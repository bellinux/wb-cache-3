3082|1459|Public
25|$|The meta-data {{model of}} the control sub-process {{is based on a}} UML class diagram. Figure 2.1.2 shows the <b>metamodel</b> of the control sub-process.|$|E
25|$|This diagram {{has been}} {{incorporated}} within the VA-EA {{to provide a}} symbolic representation of the <b>metamodel</b> it used, to describe the One-VA Enterprise Architecture and to build an EA Repository {{without the use of}} Commercial EA Repository Software. It was developed using an object oriented database within the Caliber-RM Software Product. Caliber-RM is intended {{to be used as a}} software configuration management tool; not as an EA repository.|$|E
500|$|According to the Perl 6 FAQ, Perl 6 was {{designed}} to mitigate [...] "the usual suspects" [...] that elicit the [...] "line noise" [...] claim from Perl 5 critics, including the removal of [...] "the majority of the punctuation variables" [...] and the sanitization of the regex syntax. The Perl 6 FAQ also states that what is {{sometimes referred to as}} Perl's line noise is [...] "the actual syntax of the language" [...] just as gerunds and prepositions {{are a part of the}} English language. In a December 2012 blog posting, despite claiming that [...] "Rakudo Perl 6 has failed and will continue to fail unless it gets some adult supervision", chromatic stated that the design of Perl 6 has a [...] "well-defined grammar" [...] as well as an [...] "improved type system, a unified object system with an intelligent <b>metamodel,</b> metaoperators, and a clearer system of context that provides for such niceties as pervasive laziness". He also stated that [...] "Perl 6 has a coherence and a consistency that Perl 5 lacks." ...|$|E
40|$|Abstract. There {{are some}} logic-based {{approaches}} to <b>metamodeling</b> in OWL. We enabled OWL <b>metamodeling</b> with an object-based approach. In this paper, we introduce criteria for <b>metamodeling,</b> that {{are derived from}} the principles of object-oriented <b>metamodeling,</b> and demonstrate examples of <b>metamodeling</b> with SWCLOS. ...|$|R
40|$|This chapter {{discusses}} {{the current state}} of the art, and emerging research challenges, for <b>metamodelling.</b> In the state-of-the-art review on <b>metamodelling,</b> we review approaches, abstractions, and tools for <b>metamodelling,</b> evaluate them with respect to their expressivity, investigate what role(s) <b>metamodels</b> may play at run-time and how semantics can be assigned to <b>metamodels</b> and the domain specific modeling languages they could define. In the emerging challenges section on <b>metamodelling</b> we highlight research issues regarding the management of complexity, consistency, and evolution of <b>metamodels,</b> and how the semantics of <b>metamodels</b> impacts each of these. Comment: 20 pages, 3 figure...|$|R
40|$|Abstract:- The {{state-of-the-art}} in {{the area}} of modelling of organisations is based on fixed <b>metamodels.</b> This paper gives an introduction into <b>metamodelling</b> concepts and presents a generic architecture for <b>metamodelling</b> platforms. Three best practice examples from industry projects applying <b>metamodelling</b> concepts {{in the area}} of business process modelling for e-business, e-learning, and knowledge management are presented. Due to rapid changing business requirements the complexity in developing applications which deliver business solutions is continually growing. To manage this complexity, environments providing flexible <b>metamodelling</b> capabilities instead of fixed <b>metamodels</b> has shown to be helpful. The main characteristic of such environments is that the formalism of modelling-the metamodel-can be freely defined and therefore be adapted to the problem under consideration. Finally, an outlook to future developments and research directions {{in the area of}} <b>metamodelling</b> is given. Key-Words:- knowledge-management, <b>metamodelling</b> approaches, <b>metamodelling</b> architecture, mechanism, e-learning. ...|$|R
2500|$|Extended Enterprise Modeling Language (EEML) is {{from the}} late 1990s, {{developed}} in the EU project EXTERNAL as extension of the Action Port Model (APM) by S. Carlsen (1998). The EXTERNAL project [...] aimed to [...] "facilitate inter-organisational cooperation in knowledge intensive industries. The project worked on the hypothesis that interactive process models form a suitable framework for tools and methodologies for dynamically networked organisations. In the project EEML (Extended Enterprise Modelling Language) was first constructed as a common <b>metamodel,</b> designed to enable syntactic and semantic interoperability".|$|E
50|$|The TRAK <b>Metamodel</b> both {{simplifies}} {{and extends}} the basic concepts within the MODAF 1.2 <b>metamodel.</b> It has removed and redefined stereotypes and any defence-specific constructs have been removed. The TRAK <b>Metamodel</b> specification contains {{a comparison of}} the TRAK <b>metamodel</b> at initial release against MODAF 1.2.003. This is also outlined separately.|$|E
5000|$|The OMG Structured Metrics <b>Metamodel</b> (SMM) {{specification}} {{defines a}} standard Metrics <b>Metamodel.</b> It is a {{publicly available specification}} from the Object Management Group (OMG). SMM specifies a <b>metamodel</b> for defining, representing and exchanging both measures and measurement information related to any structured information model, such as the OMG Meta Object Facility (MOF™) standard, defining an XMI interchange format between metric extraction tools. It is used to maintain metrics {{by a number of}} other OMG specifications such as the Knowledge Discovery <b>Metamodel</b> and the Value Delivery <b>Metamodel.</b>|$|E
40|$|Abstract. This chapter {{discusses}} {{the current state}} of the art, and emerging research challenges, for <b>metamodelling.</b> In the state-of-the-art review on <b>metamodelling,</b> we review approaches, abstractions, and tools for <b>metamodelling,</b> evaluate them with respect to their expressivity, investigate what role(s) <b>metamodels</b> may play at run-time and how semantics can be assigned to <b>metamodels</b> and the domain-specific modeling languages they could define. In the emerging challenges section on <b>metamodelling</b> we highlight research issues regarding the management of complexity, consistency, and evolution of <b>metamodels,</b> and how the semantics of <b>metamodels</b> impacts each of these. 3. 1 Metamodelling: State of the Art Models are powerful tools to express the structure, behavior, and other properties in mathematics, each of the hard sciences and in all areas of engineering. While models are very common, an explicit definition of a modelling language and an explicit manipulation of its models is tightly connected to computer based tools. Additional power can be gained by explicit definition and computer based manipulation of models e. g. in CAD, control engineering, algebraic mathematics and of course computer science. To be able to manipulate models, their language needs to be specified as model of these models—metamodels. In this section, we describe the state of the art for <b>metamodelling,</b> including the <b>metamodelling</b> of data structures, as well as the <b>metamodelling</b> of languages systems where appropriate. 3. 1. 1 Concepts in <b>Metamodelling</b> <b>Metamodelling</b> (literally, “beyond Modelling”) is the Modelling of models. In their most common use, <b>metamodels</b> describe the permitted structure to which models must adhere [1]; although out of the scope of this chapter, meta-metamodels formally describe <b>metamodels,</b> as they define the core abstraction...|$|R
40|$|Abstract:- Due {{to rapid}} {{changing}} business requirements the complexity in developing applications which deliver business solutions is continually growing. To manage this complexity, environments providing flexible <b>metamodelling</b> capabilities instead of fixed <b>metamodels</b> has {{shown to be}} helpful. The main characteristic of such environments is that the formalism of modelling-the metamodel-can be freely defined and therefore be adapted to the problem under consideration. This paper gives an introduction into <b>metamodelling</b> concepts and presents a generic architecture for <b>metamodelling</b> platforms. Three best practice examples from industry projects applying <b>metamodelling</b> concepts {{in the area of}} business process modelling for e-business, e-learning, and knowledge management are presented. Finally, an outlook to future developments and research directions in the area of <b>metamodelling</b> is given. Key-Words:- <b>metamodelling</b> techniques, knowledge-management, modelling approaches, <b>metamodelling</b> architecture, mechanism. ...|$|R
40|$|<b>Metamodels</b> play a {{major role}} in most {{modeling}} environments. Motivated by a survey of modelers' practice, we show that <b>metamodels</b> are not a suitable description media for modelers. We propose to build a UML-based <b>metamodeling</b> architecture which encompasses modeling paradigms (multilingual and informal descriptions) and <b>metamodels</b> (monolingual and formal descriptions) ...|$|R
50|$|Acceleo can use any EMF {{compatible}} models defined {{from any}} kind of <b>metamodel</b> like UML or even a custom DSLs. From this <b>metamodel,</b> the user can define a code generator that will produce {{any kind of}} textual language from a model using the <b>metamodel.</b>|$|E
50|$|The BIAN <b>Metamodel</b> is a {{detailed}} and comprehensive UML model that defines all the BIAN design structures - it is fully documented elsewhere {{in its own}} guide (The BIAN <b>Metamodel).</b> The <b>Metamodel</b> has three elements that capture {{the design of the}} BIAN Service Landscape.|$|E
50|$|The ATL program itself (T1.atl here) {{is also a}} model, so it {{conforms}} to a <b>metamodel</b> (the ATL <b>metamodel)</b> not presented here.|$|E
40|$|This paper {{introduces}} a new hierarchical <b>metamodeling</b> scheme for large scale computer simulations. The {{goal of the}} this new <b>metamodeling</b> method is {{to allow for the}} creation of <b>metamodels</b> that are as accurate as traditional <b>metamodeling</b> schemes but can be created with considerably fewer data points. In addition the new method allows the model builder to create hierarchically partitioned <b>metamodels</b> of black box systems such as finite element models. Black box is this case refers to systems that do not have intermediate variables/ responses around which to partition the analysis. The hierarchical <b>metamodeling</b> method is demonstrated on a finite element model consisting of 40 input variables and 32 responses...|$|R
40|$|Abstract. The {{state-of-the-art}} in {{the area}} of modelling of organisations is based on fixed <b>metamodels.</b> Due to rapid changing business requirements the complexity in developing applications which deliver business solutions is continually growing. To manage this complexity, environments providing flexible <b>metamodelling</b> capabilities instead of fixed <b>metamodels</b> has shown to be helpful. The main characteristic of such environments is that the formalism of modelling- the metamodel- can be freely defined and therefore be adapted to the problem under consideration. This paper gives an introduction into <b>metamodelling</b> concepts and presents a generic architecture for <b>metamodelling</b> platforms. Three best practice examples from industry projects applying <b>metamodelling</b> concepts {{in the area}} of business process modelling for e-business, e-learning, and knowledge management are presented. Finally, an outlook to future developments and research directions {{in the area of}} <b>metamodelling</b> is given. ...|$|R
40|$|This paper compares {{two forms}} of {{experimental}} design methods {{that may be used}} for the development of regression and neural network simulation <b>metamodels.</b> The experimental designs considered are full factorial design!; and random designs. The paper shows that, for two example problems, neural network <b>metamodels</b> using a randomised experimental design produce more accurate and efficient <b>metamodels</b> than those produced by similar sized factorial designs with either regression or neural networks. The <b>metamodelling</b> techniques are compared by their ability to predict the results from two manufacturing systems that have different levels of complexity. The results of the comparison suggest that neural network <b>metamodels</b> outperform conventional regression <b>metamodels,</b> especially when data sets based on randomised simulation experimental designs are used to produce the <b>metamodels</b> rather than data sets from similar sized full factorial experimental designs...|$|R
5000|$|Increased rigor, {{including}} a formal Content <b>Metamodel</b> that links the artifacts of TOGAF together (although {{there are some}} problems with the <b>Metamodel)</b> ...|$|E
50|$|An ATL program (T1.atl here) {{will take}} model Ma.xmi as input and will produce model Mb.xmi as output. Both models may be {{expressed}} in the OMG XMI standard. The model Ma conforms to <b>metamodel</b> MMa.km3. Model Mb conforms to <b>metamodel</b> MMb.km3. The KM3 notation is a simple and neutral <b>metamodel</b> specification language.|$|E
5000|$|... the TRAK <b>metamodel</b> {{is aimed}} at users (the MODAF M3 is an {{abstract}} UML profile intended as a specification for tool vendors to implement MODAF - there is no <b>metamodel</b> for users only fragments of 'simplified metamodel' which aim to represent the more complicated M3). In TRAK the <b>metamodel</b> shown is the master one.|$|E
40|$|National audienceA lot {{of process}} models for {{information}} systems engineering exist. They {{are based on}} different concepts (activity, product [...] .) and then on different process <b>metamodels.</b> Those <b>metamodels</b> allow a partial vision of the process engineering. This paper presents a design pattern to model concepts of various process <b>metamodels.</b> This pattern {{is a first step}} towards the construction of unified and multi-views process <b>metamodels...</b>|$|R
40|$|This papers aims at {{presenting}} {{a review of}} some <b>metamodels</b> used in optimization. We are interested in particular in the Radial Basis Functions and Kriging <b>metamodels.</b> The theory of these techniques is presented and their implementation is discussed. We present also the differentiation of these <b>metamodels.</b> Furthermore, a slight comparison between Radial Basis Functions and Kriging <b>metamodels</b> is given in ordrer to show their similarities and differences...|$|R
40|$|As {{research}} into <b>metamodeling</b> and using advanced <b>metamodeling</b> techniques continues, {{it is important}} to remember design engineers who need to use these advancements. Even experienced engineers may not be well versed in the material and mathematical background that is currently required to generate and fully comprehend advanced complex <b>metamodels.</b> A user friendly <b>metamodeling</b> environment is being developed to help bridge the gap that is currently growing between the research community and the design engineers. This tool allows users to easily create, modify, and assess the quality of <b>metamodels...</b>|$|R
5000|$|Hibernate <b>Metamodel</b> Generator - an {{annotation}} processor {{that creates}} JSR 317 Java Persistence API (JPA 2) static <b>metamodel</b> classes using the JSR 269 Pluggable Annotation Processing API ...|$|E
50|$|One {{should be}} careful not to confuse the List of MDA Tools and the List of UML tools, the former being much broader. This {{distinction}} can be made more general by distinguishing 'variable <b>metamodel</b> tools' and 'fixed <b>metamodel</b> tools'. A UML CASE tool is typically a 'fixed <b>metamodel</b> tool' since it has been hard-wired to work only with a given version of the UML <b>metamodel</b> (e.g. UML 2.1). On the contrary, other tools have internal generic capabilities allowing them to adapt to arbitrary metamodels or to a particular kind of metamodels.|$|E
50|$|Knowledge Discovery <b>Metamodel</b> (KDM), {{a common}} {{intermediate}} representation for existing software systems and their operating environments. Knowledge Discovery <b>Metamodel</b> is designed as the OMG's foundation for software modernization and software assurance. Knowledge Discovery <b>Metamodel</b> uses Meta-Object Facility to define an XMI interchange format between tools {{that work with}} existing software and an abstract interface for the next-generation assurance and modernization tools.|$|E
40|$|Due {{to rapid}} {{changing}} business requirements the complexity in developing applications which deliver business solutions is continually growing. To manage this complexity, environments providing flexible <b>metamodelling</b> capabilities instead of fixed <b>metamodels</b> has {{shown to be}} helpful. The main characteristic of such environments is that the formalism of modelling-the metamodel-can be freely defined and therefore be adapted to the problem under consideration. This paper gives an introduction into <b>metamodelling</b> concepts and presents a generic architecture for <b>metamodelling</b> platforms. Three best practice examples from industry projects applying <b>metamodelling</b> concepts {{in the area of}} business process modelling for e-business, e-learning, and knowledge management are presented. Finally, an outlook to future developments and research directions in the area of <b>metamodelling</b> is given...|$|R
40|$|Theories of {{knowledge}} reuse posit two distinct processes: reuse for replication and reuse for innovation. We identify another distinct process, reuse for customization. Reuse for customization {{is a process}} in which designers manipulate the parameters of <b>metamodels</b> to produce models that fulfill their personal needs. We test hypotheses about reuse for customization in Thingiverse, a community of designers that shares files for three-dimensional printing. 3 D <b>metamodels</b> are reused more often than the 3 D models they generate. The reuse of <b>metamodels</b> is amplified when the <b>metamodels</b> are created by designers with greater community experience. <b>Metamodels</b> make the community's design knowledge available for reuse for customization-or further extension of the <b>metamodels,</b> a kind of reuse for innovation...|$|R
40|$|Abstract: With the {{popularity}} of UML (unified modeling language) and MDA (model driven architecture), models are becoming the core artifacts of software development and maintenance. As a result, modeling languages and meta-models which are used to define modeling languages, {{become more and more}} important. Software development may cover quite a few domains, and different domains may require different modeling languages and their supporting modeling tools. But it is very expensive to develop modeling tools manually for every domain. <b>Metamodeling</b> is one of the technologies to facilitate the design of domain modeling languages and the development of modeling tools. In the approach of <b>metamodeling,</b> people design domain modeling languages according to domain request by <b>metamodeling.</b> And then, <b>metamodeling</b> tools automatically generate modeling tools, which support the designed domain modeling languages. As shown by experimental results, <b>metamodeling,</b> combined with MDA, can increase productivity of software development. This paper makes a survey of the current research on <b>metamodeling,</b> compare <b>metamodeling</b> tools, and discuss further directions of <b>metamodeling</b> and their supporting tools. Key words: metamodeling; metamodel; UML(unified modeling language); MDA(model driven architecture...|$|R
5000|$|The <b>metamodel</b> must {{support the}} {{analysis}} of the activities of the value chain to support the identification of differentiators. The internal value chain should as such be part of the <b>metamodel.</b>|$|E
5000|$|ISO/IEC 24744 Software Engineering [...] - [...] <b>Metamodel</b> for Development Methodologies is an ISO {{standard}} for software engineering metamodelling for development methodologies. It defines a <b>metamodel</b> from which development methodologies (software, but not only) can be instantiated.|$|E
50|$|Standard UML 1.4 <b>Metamodel.</b>|$|E
40|$|International audienceApplying Model-Driven Engineering (MDE) {{leads to}} the {{creation}} of a large number of <b>metamodels,</b> since MDE recommends an intensive use of models defined by <b>metamodels.</b> <b>Metamodels</b> with similar objectives are then inescapably created. A recurrent issue is thus to turn compatible models conforming to similar <b>metamodels,</b> for example to use them in the same tool. The issue is classically solved developing ad hoc model transformations. In this paper, we propose an approach that automatically detects mappings between two <b>metamodels</b> and uses them to generate an alignment between those <b>metamodels.</b> This alignment needs to be manually checked and can then be used to generate a model transformation. Our approach is built on the Similarity Flooding algorithm used in the fields of schema matching and ontology alignment. Experimental results comparing the effectiveness of the application of various implementations of this approach on real-world <b>metamodels</b> are given...|$|R
40|$|<b>Metamodels</b> {{have been}} widely used in {{engineering}} design to facilitate analysis and optimization of complex systems that involve computationally expensive simulation programs. The accuracy of <b>metamodels</b> is strongly affected by the sampling methods. In this paper, a new sequential optimization sampling method is proposed. Based on the new sampling method, <b>metamodels</b> can be constructed repeatedly through the addition of sampling points, namely, extrema points of <b>metamodels</b> and minimum points of density function. Afterwards, the more accurate <b>metamodels</b> would be constructed by the procedure above. The validity and effectiveness of proposed sampling method are examined by studying typical numerical examples...|$|R
40|$|Abstract—Establishing {{loosely coupled}} collaborations between {{services}} provided by autonomous enterprises poses several requirements and challenges for the surrounding service ecosystem. In such context emphasis must be laid especially on the correctness of available metainformation and its usage. Towards this purpose, we characterize service ecosystems {{by a set of}} <b>metamodels.</b> The <b>metamodels</b> include domain ontology <b>metamodels</b> defining the vocabulary and knowledge elements needed for collaboration establishment and management, and <b>metamodels</b> relating such domain ontologies with infrastructure services and service production facilities. In this paper we describe the <b>metamodels</b> and discuss their application for interoperability knowledge management. I...|$|R
