12|145|Public
50|$|Situated on the South Bank, London, Cinimod Studio {{transformed}} a 524 Route <b>Master</b> <b>Bus,</b> {{that is part}} of the Southbank Centre's Festival of Love.|$|E
50|$|The <b>master</b> <b>bus</b> {{is similar}} to the mixbuses but has the {{additions}} of a limiter, a K14 meter for loudness monitoring and a stereo correlation meter.|$|E
50|$|Much of {{the visual}} effects {{processing}} in Vegas follows an audio-like paradigm. Effects can be applied at any stage {{of the visual}} signal flow — event level, track level and output level effects, much like reverb, delay and flange audio effects are applied in a digital audio system, like Pro Tools, Cubase or Sonar. Master output effects can also be controlled and manipulated over time {{by the use of}} <b>Master</b> <b>Bus</b> track automation envelopes.|$|E
50|$|While <b>bus</b> <b>mastering</b> {{theoretically}} {{allows one}} peripheral device to directly communicate with another, in practice almost all peripherals <b>master</b> the <b>bus</b> exclusively to perform DMA to main memory.|$|R
50|$|Systems {{that have}} more than one <b>bus</b> <b>master</b> have {{additional}} control bus signals that control which <b>bus</b> <b>master</b> drives the address bus, avoiding bus contention on the address bus.|$|R
25|$|The PCI bus arbiter {{performs}} {{bus arbitration}} among multiple masters on the PCI bus. Any number of <b>bus</b> <b>masters</b> can reside on the PCI bus, {{as well as}} requests for the bus. One pair of request and grant signals is dedicated to each <b>bus</b> <b>master.</b>|$|R
40|$|The {{objective}} of this project {{is to provide a}} city bus vehicle tracking system, it deals with two things. Firstly, it provides information about which bus coming to the stop. And secondly, it deals with the traffic management and safety to the road user by reducing the accidents. By the presently existing system we are dealing with three terminals, a device on bus, a device at bus stop and a device on the <b>master</b> <b>bus</b> stand so as to keep the track on the all city busses. By employing this tracking system the arrival of the bus is detected near the bus stop and also can be seen on the pc at the <b>master</b> <b>bus</b> stop. Further if we use GSM modem we can also transmit the bus information to the registered mobile numbers. Hence, we can control the bus traffic and can detect the arrival of particular bus at the bus stop. ...|$|E
40|$|In the {{development}} of bus-based systems and individual PCB boards interfacing to a bus, the simulation usually re-quires a specific test bench or creation of quite complex stimuli. This problem can be avoided with a VHDL model of the bus. In this paper, the bus model concept is discussed. The concept {{can be applied to}} serial and parallel, single and multiple <b>master</b> <b>bus</b> modeling on various hierarchical levels. The model includes timing and signaling analysis, master, slave and arbitration modules. ISA (PC/AT) bus is used as an example case of the modeling. 1...|$|E
40|$|This paper {{presents}} an experimental {{design and implementation}} of serial data communication using I 2 C (Inter-Integrated Circuit) multi master and multi slave bus controller using a {{field programmable gate array}} (FPGA). The I 2 C <b>master</b> <b>bus</b> controller was interfaced with slave. This module was designed in Verilog HDL and simulated in Modelsim 10. 1 c. The design was synthesized using Xilinx ISE Design Suite 14. 2. I 2 C master initiates data transmission and in order slave responds to it. It can be used to interface low speed peripherals like motherboard, embedded system, mobile phones, set top boxes, DVD, PDA’s or other electronic devices...|$|E
50|$|Nios II {{uses the}} Avalon switch fabric as the {{interface}} to its embedded peripherals. Compared {{to a traditional}} bus in a processor-based system, which lets only one <b>bus</b> <b>master</b> access the <b>bus</b> at a time, the Avalon switch fabric, using a slave-side arbitration scheme, lets multiple masters operate simultaneously.|$|R
5000|$|PCI <b>bus</b> <b>mastering</b> {{for display}} list {{processing}} and video capture support ...|$|R
5000|$|Local buses {{of various}} sorts—in particular, for <b>bus</b> <b>mastering</b> on modern systems ...|$|R
40|$|Microprocessor {{performance}} has improved rapidly these years. In contrast memory latencies and bandwidths have improved little. The {{result is that}} the memory access time is the bottleneck which limits the system performance. In case of larger system design which requires more number of I/O ports and more memory capacity the system designer may interface external I/O ports and memory with the system. In this paper we are using advanced microcontroller bus architecture with its advanced high performance bus. AMBA AHB provides parallel communications with multi <b>master</b> <b>bus</b> management, high clock frequency, high performance systems for data transfer operation from the memory interfaced with the master or slave peripheral devices. AMBA AHB supports on chip communications standard for designing high-performance embedded microcontrollers...|$|E
40|$|The {{focus of}} this paper is on I 2 C (Inter-Integrated Circuit) {{protocol}} interface between <b>Master</b> <b>Bus</b> protocol and slave. Here we are interfacing between micro-controller and DS 1307. I 2 C bus protocol sends 8 bit data from micro-controller to DS 1307. This module was designed in VHDL and simulated and synthesized using Xilinx ISE Design Suite 14. 2. I 2 C and optimized for area and power. This concept is widely applicable from any high speed device or low speed device to any low speed device or high speed device. This module acts as a slave for the DS 1307 at the same time acts like a master for the micro-controller device which can be considered as a slave.. It can be used to interface low speed peripherals like motherboard, embedded system, mobile phones, set top boxes, DVD, PDA’s or other electronic devices...|$|E
40|$|Abstract—The Controller Area Network (CAN) {{has long}} been used for {{automotive}} applications as a method to enable robust serial communication. The goal {{was to make the}} system more reliable, safe and efficient while decreasing wiring harness weight and complexity. Based on these factors, a CAN bus project was carried out to fully utilize the application of CAN bus system in security and data acquisition system. This report shall focus on the method of application of CAN bus and the features in the security system. Having CAN bus system in place, the methods of controlling each station in the security system has changed significantly. The system permits each station to send and receive data according to the message priority. This is part of multi <b>master</b> <b>bus</b> network. The project output is a prototype of the security system which will be discussed in detail in this paper. Keywords—CAN Bus, security system, serial communication, data acquisition...|$|E
5000|$|... 16-bit vs. 32-bit: 32 bit {{includes}} DMA or <b>bus</b> <b>mastering,</b> 16-bit {{does not}} ...|$|R
5000|$|... 8-bit {{source address}} (lower 4 bits: {{priority}} class, higher 4 bits: <b>bus</b> <b>master</b> address) ...|$|R
5000|$|Memory lock (MLB) output {{indicates}} {{to other}} <b>bus</b> <b>masters</b> when a read-modify-write instruction is being processed ...|$|R
40|$|Harvard {{architecture}} – 32 -Kbyte {{instruction cache}} – 32 -Kbyte data cache – Memory Management Unit (MMU) – Separate, 32 -entry, fully-associative instruction and data translation lookahead buffers – Floating point unit (FPU) – Double-precision conforms to IEE- 754 standard – Eight floating point registers • Internal <b>master</b> <b>bus</b> (XLB) arbiter – High performance split address and data transactions – Support for various parking modes • 32 -bit double data rate (DDR) synchronous DRAM (SDRAM) controller – 66 – 133 MHz operation – Supports DDR and SDR DRAM – Built-in initialization and refresh – Up to four chip selects enabling {{up to one}} GB of external memory • Version 2. 2 peripheral component interconnect (PCI) bus – 32 -bit target and initiator operation – Support {{for up to five}} external PCI masters – 33 – 66 MHz operation with PCI bus to XLB divider ratios of 1 : 1, 1 : 2, and 1 : 4 • Flexible multi-function external bus (FlexBus) – Provides a glueless interface to boot flash/ROM, SRAM, and peripheral devices – Up to six chip selects – 33 – 66 MHz operation • Communications I/O subsystem – Intelligent 16 channel DMA controlle...|$|E
40|$|The {{increasing}} {{complexity of}} embedded systems requires modeling {{at higher levels}} of abstraction. Transaction level modeling (TLM) has been proposed to abstract communication for high-speed system simulation and rapid design space exploration. Although being widely accepted for its high performance and efficiency, TLM often exhibits a significant loss in model accuracy. In this article, we systematically analyze and quantify the speed/accuracy trade-off in TLM. To this end, we provide a classification of TLM abstraction levels based on model granularity and define appropriate metrics and test setups to quantitatively measure and compare the performance and accuracy of such models. Addressing several classes of embedded communication protocols, we apply our analysis to three common bus architectures, the industry-standard AMBA advanced high-performance bus (AHB) as an on-chip parallel bus, the controller area network (CAN) as an off-chip serial bus, and the Motorola ColdFire <b>Master</b> <b>Bus</b> as an example for a custom embedded processor bus. Based on the analysis of these individual busses, we then generalize our results for a broader conclusion. The general TLM trade-off offers gains of up to four orders of magnitude in simulation speed, generally however, {{at the price of}} low accuracy. We conclude further that model granularit...|$|E
40|$|The LHCb sub-detector {{electronics}} {{requires a}} configuration bus {{able to communicate}} fast and properly over an up to 120 -meter line, with a unique master, and up to 32 slaves located on the detector. In such a configuration, the master card will {{be located in the}} control room, which is not exposed to radiation, and the slave close to the detector electronics boards. The slave thus has to be both SEL and SEU immune, in order to work properly in radiation sensitive environments (up to 40 Krad of total dose). The SPECS protocol is a 10 Mbit/s serial link designed for the configuration of remote electronics elements. SPECS is a single-master multi-slave bus. The protocol requires 4 lines in BLVDS technology with pole-zero cancellation at the emitter side. The SPECS frame is composed of a fixed-size header (8 -bit words which contain information relevant to the transfer), a variable-size data block, and a fixed-size trailer with the checksum of the data block :The SPECS master board will host 4 SPECS masters. This board is implemented on a standard 3. 3 V 32 -bit 33 MHz PCI board. The heart of the system is designed as a portable VERILOG code and integrated within an Altera Cyclone FPGA, the PCI interface being performed by a dedicated circuit (PLX 9030). The SPECS slave offers different interfaces: Point to point SPECS interface for long distance interconnections, Multi drop SPECS bus, Local bus parallel interface, 32 configuration I/O lines, JTAG master interface, long distance I 2 C <b>master</b> <b>bus,</b> 24 commands driver to manage 12 independent links. An intermediate mezzanine board of 0. 47 dm² houses the SPECS slave, and provides all the described functionalities using 2 SMC connectors. The mezzanine board also provides most of the necessary service functions for the sub-detector front-end electronics. The goal is indeed to avoid putting any unnecessary electronics in the radiation sensitive area...|$|E
50|$|Some {{types of}} buses allow only one device (typically the CPU, or its proxy) to {{initiate}} transactions. Most modern bus architectures, such as PCI, allow multiple devices to <b>bus</b> <b>master</b> because it significantly improves performance for general-purpose operating systems. Some real-time operating systems prohibit peripherals from becoming <b>bus</b> <b>masters,</b> because the scheduler {{can no longer}} arbitrate for the bus and hence cannot provide deterministic latency.|$|R
50|$|The bus is {{completely}} asynchronous, allowing {{a mixture of}} fast and slow devices. It allows the overlapping of arbitration (selection of the next <b>bus</b> <b>master)</b> while the current <b>bus</b> <b>master</b> is still performing data transfers. The 18 address lines allow the addressing of a maximum of 256 kiB. Typically, the top 8 kiBw is reserved for the registers of the memory-mapped I/O devices used in the PDP-11 architecture.|$|R
50|$|<b>Bus</b> <b>masters</b> can {{release the}} bus in two ways. With Release When Done (RWD), the <b>master</b> {{releases}} the <b>bus</b> when it completes a transfer and must re-arbitrate for the bus before every subsequent transfer. With Release On Request (ROR), the <b>master</b> retains the <b>bus</b> by continuing to assert BBSY* between transfers. ROR allows the master to retain control over the bus until a Bus Clear (BCLR*) is asserted by another master that wishes to arbitrate for the <b>bus.</b> Thus a <b>master</b> which generates bursts of traffic can optimize its performance by arbitrating for the bus on only the first transfer of each burst. This decrease in transfer latency comes {{at the cost of}} somewhat higher transfer latency for other masters.|$|R
50|$|In a <b>bus</b> <b>mastering</b> system, {{also known}} as a first-party DMA system, the CPU and {{peripherals}} can each be granted control of the memory bus. Where a peripheral can become <b>bus</b> <b>master,</b> it can directly write to system memory without involvement of the CPU, providing memory address and control signals as required. Some measure must be provided to put the processor into a hold condition so that bus contention does not occur.|$|R
50|$|Because the USB 2.0 {{interface}} {{is limited}} to 35 MByte/s and lacks <b>bus</b> <b>mastering</b> hardware, USB 2.0 implementation results in slower access.|$|R
50|$|The FASTBUS {{backplane}} {{is a full}} {{data bus}} where any module could negotiate to be <b>master</b> of the <b>bus</b> to send or receive data.|$|R
40|$|With the {{advancement}} of Network-on-chip (NoC), fast and fair arbiter as the basic building block for high speed switches/routers gained attention in recent years. In this paper I propose the fair chance round robin arbiter (FCRRA), a high speed, low power and area efficient RRA for NoC applications. The FCRRAG tool propose in this paper can generate a design for bus arbiter, which can handle {{the exact number of}} <b>bus</b> <b>masters</b> for both on chip and off chip buses within one short cycle. General Terms i. Arbiters are electronic devices that allocate access to shared resources. ii. iii. Virtual Output Queues (VOQs) [4]: there are VOQs in a switch to remove possible output port contention (Head of Line (HOL) blocking). Bus Arbiter resolves bus conflicts when multiple <b>bus</b> <b>masters</b> request a <b>bus</b> in the same cycle. [4...|$|R
50|$|Mid 1992, {{the master}} {{specification}} was released, {{resulting in the}} development of a number of <b>bus</b> <b>masters</b> with and without interfaces to other higher-level ‘’fieldbus’’ solutions.|$|R
5000|$|X-Raider 7.1Based on the CMI 8768 chipset. Launched in July 2009, the X-Raider is a 24-bit, 96 kHz PCI 2.2 {{compliant}} card, supporting <b>bus</b> <b>mastering</b> modes.|$|R
50|$|More {{complex systems}} have a multi-master bus -- {{not only do}} they have many devices that each drive the data bus, but also have many <b>bus</b> <b>masters</b> that each drive the address bus.The address bus as well as the data bus in bus {{snooping}} systems is required to be a bidirectional bus, often implemented as a three-state bus.To prevent bus contention on the address bus, a bus arbiter selects which particular <b>bus</b> <b>master</b> is allowed to drive the address bus during this bus cycle.|$|R
50|$|However, some non-ISA bus cycles were added. Cycles {{that were}} added to improve the {{performance}} of devices beside firmware hubs include LPC-style one-, two-, and four-byte <b>bus</b> <b>master</b> memory cycles; one-, two-, and four-byte <b>bus</b> <b>master</b> I/O cycles; and 32-bit third-party DMA which conforms {{to all of the}} restrictions of ISA-style third-party DMA {{except for the fact that}} it can do 32-bit transfers. Any device that is allowed to accept traditional ISA-style DMA is also allowed to use this 32-bit ISA-style DMA. The host could initiate 32-bit ISA-style DMA cycles, while peripherals could initiate <b>bus</b> <b>master</b> cycles. Firmware hubs consumed firmware cycles that were designed just for firmware hubs so that firmware addresses and normal memory-mapped I/O addresses could overlap without conflict. Firmware memory reads could read 1, 2, 4, 16, or 128 bytes at once. Firmware memory writes could write one, two or four bytes at once.|$|R
5000|$|... rev 11 (A4000T and aftermarket) {{provides}} DMA {{support for}} a single <b>bus</b> <b>master.</b> A 16 MHz A3000 requires a 25 MHz upgrade for Buster 11 to work.|$|R
50|$|Super I/O {{devices and}} audio devices {{are allowed to}} accept I/O cycles, accept ISA-style {{third-party}} DMA cycles, and generate <b>bus</b> <b>master</b> cycles. Generic-application memory devices like nonvolatile BIOS memory and LPC flash devices are allowed to accept memory cycles. Firmware hubs are allowed to accept firmware memory cycles. Embedded controllers are allowed to accept I/O cycles and generate <b>bus</b> <b>master</b> cycles. Some ISA cycles that were deemed not useful to these classes were removed. They include host-initiated two-byte memory cycles and host-initiated two-byte I/O cycles. These removed transfer types could be initiated by the host on ISA buses but not on LPC buses. The host would have to simulate two-byte cycles by splitting them up into two one-byte cycles. The ISA bus has a similar concept because the original 8-bit ISA bus required 16-bit cycles to be split up. Therefore, the 16-bit ISA bus automatically split 16-bit cycles into 8-bit cycles {{for the benefit of}} 8-bit ISA peripherals unless the ISA device being targeted by a 16-bit memory or I/O cycle asserted a signal that told the bus that it could accept the requested 16-bit transfer without assistance from an ISA cycle splitter. ISA-style <b>bus</b> <b>mastering</b> has been replaced in the LPC bus with a <b>bus</b> <b>mastering</b> protocol that does not rely on the ISA-style DMA controllers at all. This was done in order to remove ISA's limit on what type of <b>bus</b> <b>master</b> cycles a device is allowed to initiate on which DMA channel. The ISA-style bus cycles that were inherited by LPC from ISA are one-byte host-initiated I/O bus cycles, one-byte host-initiated memory cycles, and one- or two-byte host-initiated ISA-style DMA cycles.|$|R
5000|$|<b>Bus</b> <b>mastering</b> for a 6502-style system bus; CPU and VIC-II {{accessing}} the bus during alternating half-clock cycles (the VIC-II will halt the CPU when it needs extra cycles) ...|$|R
50|$|While both {{technologies}} provide similar end results, there are fundamental differences between USB and FireWire. USB requires {{the presence of}} a <b>bus</b> <b>master,</b> typically a PC, which connects point to point with the USB slave. This allows for simpler (and lower-cost) peripherals, at the cost of lowered functionality of the bus. Intelligent hubs are required to connect multiple USB devices to a single USB <b>bus</b> <b>master.</b> By contrast, FireWire is essentially a peer-to-peer network (where any device may serve as the host or client), allowing multiple devices to be connected on one bus.|$|R
