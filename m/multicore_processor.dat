377|1120|Public
5000|$|Xeon Phi - Intel's {{competing}} massively-parallel <b>multicore</b> <b>processor</b> line ...|$|E
5000|$|Cavium Networks - OCTEON & OCTEON II <b>multicore</b> <b>Processor</b> Families ...|$|E
5000|$|Sun Microsystems's OpenSPARC T1 <b>Multicore</b> <b>processor.</b> Sun has {{released}} it under GPL.|$|E
40|$|Recent {{commercial}} {{developments in}} <b>multicore</b> <b>processors</b> (e. g. Tilera, Clearspeed, HyperX) have provided {{an option for}} high performance embedded computing that rivals the performance attainable with FPGA-based reconfigurable computing architectures. Furthermore, these processors offer more straightforward and streamlined application development by allowing the use of conventional programming languages and software tools in lieu of hardware design languages such as VHDL and Verilog. With these advantages, <b>multicore</b> <b>processors</b> can significantly enhance the capabilities of future robotic space missions. This paper will discuss these benefits, along with onboard processing applications where multicore processing can offer advantages over existing or competing approaches. This paper will also discuss the key artchitecural features of current commercial <b>multicore</b> <b>processors.</b> In comparison to the current art, the features and advancements necessary for spaceflight <b>multicore</b> <b>processors</b> will be identified. These include power reduction, radiation hardening, inherent fault tolerance, and support for common spacecraft bus interfaces. Lastly, this paper will explore how <b>multicore</b> <b>processors</b> might evolve with advances in electronics technology and how avionics architectures might evolve once <b>multicore</b> <b>processors</b> are inserted into NASA robotic spacecraft...|$|R
40|$|Moore’s law {{provides}} computer architects {{with more}} transistors {{than they can}} effectively use to extract instructionlevel parallelism (ILP) in a single core. Thus, all current and future high-performance <b>processor</b> chips are <b>multicore</b> <b>processors,</b> also known as chip multiprocessors (CMPs). These <b>multicore</b> <b>processors</b> includ...|$|R
5000|$|Stata/MP for {{multiprocessor}} computers (including dual-core and <b>multicore</b> <b>processors)</b> ...|$|R
5000|$|... #Caption: Intel Core 2 Duo {{an example}} of an x86-compatible, 64-bit <b>multicore</b> <b>processor</b> ...|$|E
5000|$|OpenSPARC, {{a series}} of {{open-source}} microprocessors based on the UltraSPARC T1 and UltraSPARC T2 <b>multicore</b> <b>processor</b> designs ...|$|E
50|$|The {{current work}} of the AEEC APEX Subcommittee {{includes}} the enhancement of ARINC 653 for <b>multicore</b> <b>processor</b> architectures.|$|E
50|$|MultiBench - multi-threaded {{code for}} testing {{scalability}} of <b>multicore</b> <b>processors.</b>|$|R
40|$|Abstract. The {{emergence}} of streaming <b>multicore</b> <b>processors</b> with multi-SIMD architectures opens unprecedented opportunities for executing many sophisticated signal processing algorithms faster {{and within a}} much lower energy budget. Here {{we report on the}} development, implementation, and demonstration of a novel, massively parallel computational scheme for inverting the spatio-temporal covariance matrix associated with ambient noise in signal detection algorithms. Our methodology involves extensive use of the FFT, for which we exploit the capabilities of leading hybrid <b>multicore</b> <b>processors,</b> including the IBM Cell, the Nvidia Tesla, and the Coherent Logix HyperX. Index Terms — FFT, <b>multicore</b> <b>processors,</b> Cell, Tesla, HyperX, spatio-temporal data whitening I...|$|R
40|$|Recently, tiled <b>multicore</b> <b>processors</b> {{have been}} {{proposed}} {{as a solution to}} provide both performance and scalability. Unlike conventional <b>multicore</b> <b>processors,</b> tiled microprocessors provide on-chip networks to exploit fine-grained parallelism. However, the performance of tiled microprocessors largely depends on compilers because of their relatively simple hardware; exploitation of parallelism, communication between cores, memory locality, and load balancing are all managed by a compiler. Thus, the compiler design is very important in tiled <b>multicore</b> <b>processors.</b> In this paper, we explore previously proposed compiler parallelization techniques for tiled processors, focusing on the exploitation of fine-grained parallelization. We also investigate future research directions in this area. 1...|$|R
5000|$|CELL, a <b>multicore</b> <b>processor</b> with {{features}} fairly consistent with vision processing units (SIMD instructions & datatypes suitable for video, and on-chip DMA between scratchpad memories).|$|E
50|$|The ARM Cortex-A9 MPCore is a 32-bit {{processor}} core licensed by ARM Holdings implementing the ARMv7-A architecture. It is a <b>multicore</b> <b>processor</b> providing up to 4 cache-coherent cores.|$|E
50|$|The ARM Cortex-A15 MPCore is a 32-bit {{processor}} core licensed by ARM Holdings implementing the ARMv7-A architecture. It is a <b>multicore</b> <b>processor</b> with out-of-order superscalar pipeline running {{at up to}} 2.5 GHz.|$|E
40|$|Abstract Data {{prefetching}} is {{an effective}} data access latency hiding technique to mask the CPU stall caused by cache misses and to bridge the performance gap between processor and memory. With hardware and/or software support, data prefetching brings data closer to a processor before it is actually needed. Many prefetching techniques {{have been developed for}} single-core processors. Recent developments in processor technology have brought <b>multicore</b> <b>processors</b> into mainstream. While some of the single-core prefetching techniques are directly applicable to <b>multicore</b> <b>processors,</b> numerous novel strategies have been proposed {{in the past few years}} to take advantage of multiple cores. This paper aims to provide a comprehensive review of the state-of-the-art prefetching techniques, and proposes a taxonomy that classifies various design concerns in developing a prefetching strategy, especially for <b>multicore</b> <b>processors.</b> We compare various existing methods through analysis as well. Keywords taxonomy of prefetching strategies, <b>multicore</b> <b>processors,</b> data prefetching, memory hierarchy...|$|R
40|$|Markov random field models {{provide a}} robust {{formulation}} of low-level vision problems. Among the problems, stereo vision {{remains the most}} investigated field. The belief propagation provides accurate result in stereo vision problems, however, the algorithm remains slow for practical use. In this paper we examine and extract the parallelisms in the belief propagation method for stereo vision on <b>multicore</b> <b>processors.</b> The results show that with parallelization exploration on <b>multicore</b> <b>processors,</b> the belief propagation algorithm can have a 13. 5 times speedup compared to the single processor implementation. The experimental results also indicate that the parallelized belief propagation algorithm on <b>multicore</b> <b>processors</b> is able to provide a frame rate in 6 frames per second. ...|$|R
40|$|The {{transactional}} {{memory in}} <b>multicore</b> <b>processors</b> {{has been a}} very hot research area over past several years. Many transactional memory systems have been proposed to solve the synchronization problem of <b>multicore</b> <b>processors.</b> Software transactional memory is one of the critical methods to ease parallel programming and improve the scalability in the environment with many cores. In this study, we give a review of the current software transactional memory systems for <b>Multicore</b> <b>processors.</b> Software transactional memory systems are classified into the following categories: transaction granularity, data organization, version management, conflict detection and synchronization. Finally, we discuss an active research challenge: whether strong isolation should be supported for the tradeoff between performance and semantics correctness in software transactional memory systems...|$|R
50|$|Sukhoi calls their {{expert system}} for sensor fusion the {{artificial}} {{intelligence of the}} Su-57. Flight tests of their integrated modular avionics started in 2017 on a fiber optic networked <b>multicore</b> <b>processor</b> system.|$|E
50|$|The Propeller 2 <b>multicore</b> <b>processor</b> {{is under}} {{development}} {{and does not}} have a release date yet. The Propeller 2 processor includes features commonly requested by customers such as code protection, additional RAM and more input/output pins.|$|E
5000|$|Sun-4v: (V presumably for [...] "virtualized") A {{variation}} on Sun-4u which includes hypervisor processor virtualization; {{introduced in the}} UltraSPARC T1 (Niagara) <b>multicore</b> <b>processor.</b> Supported by Solaris version 10 starting from release 3/05 HW2, and Solaris 11.|$|E
25|$|ThreadWeaver is a {{programming}} {{library to}} help applications {{take advantage of}} <b>multicore</b> <b>processors</b> and is included with kdelibs.|$|R
30|$|Due to {{the rapid}} {{advances}} in circuit integration technology, and to optimize performance while maintaining acceptable levels of energy efficiency and reliability, multicore technology or Chip-Multiprocessor is becoming the technology of choice for microprocessor designers. <b>Multicore</b> <b>processors</b> provide increased total computational capability on a single chip without requiring a complex microarchitecure. As a result, simple <b>multicore</b> <b>processors</b> have better performance per watt and area characteristics than complex single core processors [1].|$|R
40|$|International audienceThe {{widespread}} use of <b>multicore</b> <b>processors</b> in computing systems and the imperative necessity of exploiting massive parallelism to improve performance and dependability, make mandatory to evaluate the impact of SEUs on parallel applications running on <b>multicore</b> <b>processors.</b> This paper presents a method and preliminary results of SEU fault-injection campaigns performed on parallel applications implemented on a quad-core processor. Two representative benchmarks applications were considered for the analysis...|$|R
50|$|The e200z0 {{is used in}} the MPC5510 as an {{optional}} co-processor alongside an e200z1 core, making that chip a <b>multicore</b> <b>processor.</b> e200z0 is available as co-processors to other e200 based processors as well as very low end stand alone processors.|$|E
50|$|The {{library is}} intensively tested on several {{platforms}} as Linux, Mac OS X and Windows OTB Dashboard. Most functions are also adapted to process huge images (>4GB) using streaming {{and to take}} advantages of <b>multicore</b> <b>processor</b> as often as possible.|$|E
50|$|Stardock {{purchased}} the Star Control IP and publishing {{rights for the}} original Star Control trilogy from Atari in 2013. Star Control: Origins uses the Nitrous engine, which offers full 64-bit <b>multicore</b> <b>processor</b> support and enables aliens with full facial movements and real-time dialogue animation.|$|E
40|$|As {{a result}} of {{stringent}} requirements on size, weight, and power consumption (SWaP), {{as well as the}} need to provide advanced new functionality through software, critical real-time embedded systems in the aerospace, space, and automotive markets are beginning to make use of <b>multicore</b> <b>processors</b> for hard real-time applications. The deployment of hard real-time applications on advanced <b>multicore</b> <b>processors</b> requires a number of challenges to be overcome. A wealth of research has bee...|$|R
50|$|On <b>multicore</b> <b>processors</b> COQOS {{makes it}} {{possible}} to flexibly assign partitions to processor cores. This ensures optimal utilization of processor computing power.|$|R
40|$|We {{present an}} {{implementation}} of a Vlasov-Maxwell solver for <b>multicore</b> <b>processors.</b> The Vlasov equation describes the evolution of charged particles in an electromagnetic field, solution of the Maxwell equations. The Vlasov equation is solved by a Particle-In-Cell method (PIC), while the Maxwell system is computed by a Discontinuous Galerkin method. We use the OpenCL framework, which allows our code to run on <b>multicore</b> <b>processors</b> or recent Graphic Processing Units (GPU). We present several numerical applications to two-dimensional test cases...|$|R
5000|$|TILE64 is a <b>multicore</b> <b>processor</b> {{manufactured}} by Tilera. It {{consists of a}} mesh network of 64 [...] "tiles", where each tile houses a general purpose processor, cache, and a non-blocking router, which the tile uses {{to communicate with the}} other tiles on the processor.|$|E
50|$|TILE-Gx is a <b>multicore</b> <b>processor</b> {{family by}} Tilera. It {{consists}} of a mesh network of up to 100 cores. It is to be produced by TSMC with 40 nm. It was announced on February 19, 2013 that Tilera would produce a 72-core Tile-Gx CPU capable of processing high-bandwidth networks.|$|E
50|$|A <b>multicore</b> <b>processor</b> {{can provide}} {{additional}} performance improvement to a fast path implementation. In order {{to maximize the}} overall system throughput, multiple cores can be dedicated to running the fast path, while only one core is required to run the Operating System, the OS networking stack and the application’s control plane.|$|E
40|$|Chip-based <b>multicore</b> <b>processors</b> (CMPs) {{raise the}} {{possibility}} of significant improvement {{in the performance of}} electromagnetic sim-ulation tools. They can impact the mesh generation, solution, and result evaluation phases. This paper investigates the parallelization and scalability of Gauss–Seidel on CMPs by using a new cache blocking technique to overcome the small cache problem while using a thread synchronization technique for better cache sharing and to maximize thread cycle utilization. Index Terms—Cache blocking, chip <b>multicore</b> <b>processors</b> (CMPs), electromagnetic field problem solver, Gauss–Seidel iterative method. I...|$|R
40|$|By {{exploiting}} parallel processing, {{the proposed}} scheduling scheme enhances energy saving capability of <b>multicore</b> <b>processors</b> for real-time tasks while satisfying deadline and fault tolerance constraints. The scheme searches for a near minimum-energy schedule within a polynomial time, because finding the minimum-energy schedule on <b>multicore</b> <b>processors</b> is a NP-hard problem. The scheme consumes manifestly less energy than the state-of-the-arts method even with low parallel processing speedup {{as well as}} with high parallel processing speedup, and saves the energy consumption up to 86 %...|$|R
40|$|Multiagent {{platforms}} need to {{be evaluated}} focusing on the underlying computer architecture {{in order to allow}} developers to exploit the parallelism available in <b>multicore</b> <b>processors.</b> This paper presents the characterization of Jason, a well-known Java-based multiagent platform, when executed on distributed shared memory architectures. Since this kind of architecture is already present in current <b>multicore</b> <b>processors,</b> this should be the first step for the characterization of this platform on distributed systems. To this end, we propose the execution of a set of benchmarks recently proposed for evaluating multiagent platforms. The results obtained show that Jason can be used to program CPU-intensive multiagent applications without loosing the Java scalability over <b>multicore</b> <b>processors.</b> Though, Jason's performance for communication-intensive applications depends on the traffic pattern generated by the agents, the layout of the cores and the selected execution mode (i. e. synchronous or asynchronous) ...|$|R
