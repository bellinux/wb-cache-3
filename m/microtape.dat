4|1|Public
5000|$|Digital {{initially}} {{introduced the}} Type 550 <b>Microtape</b> Control and Type 555 Dual <b>Microtape</b> Transport as peripherals for the PDP-1 and PDP-4 computers, both 18-bit machines. DEC advertised {{the availability of}} these peripherals in March and May, 1963, and by November, planning was already underway to offer the product for the 12-bit PDP-5 and 36-bit PDP-6, even though this involved a change in recording format. [...] The initial specifications for the Type 550 controller discuss a significant advance beyond the LINCtape, {{the ability to read}} and write in either direction. [...] By late 1964, the Type 555 transport was being marketed as a DECtape transport.|$|E
50|$|DECtape (originally called <b>Microtape)</b> is a {{magnetic}} tape data storage medium used with many Digital Equipment Corporation computers, including the PDP-6, PDP-8, LINC-8, PDP-9, PDP-10, PDP-11, PDP-12, and the PDP-15. On DEC's 32-bit systems, VAX/VMS {{support for it}} was implemented but did not become an official part of the product lineup.|$|E
40|$|PICPAC is {{a program}} {{to be used for}} {{manipulating}} pictures of real-world scenes. It operated under ITS (the Incompatible Time-Sharing System) under control of a simple on-line command language. It includes facilities for reading pictures from either vidissector, for reading and writing them on disk or <b>microtape,</b> and for displaying or plotting them. It also includes focusing and control functions...|$|E
40|$|This memo is {{intended}} to get very new users started on the MAC AI system. It presents some simple rituals for making and editing fields, getting print outs, making <b>microtapes,</b> and so on. Most of the rituals given {{are not the only}} ways of doing something or even necessarily the simplest, but they do work. Some sources of more detailed documentation are referenced {{at the end of this}} memo; read then when you want to know more. If you don't understand something or need any kind of help- ask. No one minds; they all know how you feel...|$|R
40|$|Some PDP 6 LISP {{users have}} felt {{a need for}} a way to {{incorporate}} MIDAS subroutines into LISP. LISP has been changed to let you do this, using files found on the LISP SYSTEM <b>microtape.</b> You write a routine for LISP {{in much the same way}} that you write any other MIDAS relocatable subroutine. You must, however, observe the constraints imposed by LISP's allocation and use of accumulators, and its methods of handling input, output, and interrupts. In addition, you require linkage to LISP before your routine can operate properly: The entry point(s) of the subroutine must be put on the property list(s) of the appropriate atom(s), and the address fields of the instructions pointing to other routines, to list structure, or the other LISP data structures must be set properly. This is done when LISP begins operation??er allocation, but before going into its listen loop. We provide eight macros to ease the job of creating such linkages: SUBR, FSUBR, MACRO, QUOTE, E, SPECIAL, and SYM. If you write "SUBR name" at a location a in your routine, LISP will subsequently ascribe the property SUBR to the atom name, with entry location a. Similar remarks apply to the use of FSBUR, LSBUR, and MACRO. The significance and use of other four macros is perhaps best communicated through examples: 1. An instruction like "MOVEI A,QUOTE(X Y Z) " will be assembled as "MOVEI A,O". At link time, however, LISP will insert the location of list (X Y Z) into the address field of the instruction. 2. 2. Suppose that the atom FOO has the properties shown in Figure 1. Then the instructions "MOVEI A QUOTE FOO", "MOVEM B, SPECIAL FOO", "PUSHJ P, SYM FOO", and "CALL E FOO" will each be assembled with a zero address field, which will be modified at link time to be b, c, 106, and 101, respectively. Revise...|$|E

