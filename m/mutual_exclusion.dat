1904|46|Public
25|$|In 1974 Dijkstra {{presented}} three self-stabilizing algorithms for <b>mutual</b> <b>exclusion</b> on a ring. Dijkstra's work {{is considered}} {{to be the first to}} introduce and demonstrate the self-stabilization concept.|$|E
25|$|The {{academic}} {{study of}} concurrent computing {{started in the}} 1960s, with Dijkstra (1965) credited with being the first paper in this field, identifying and solving the <b>mutual</b> <b>exclusion</b> problem. He {{was also one of}} the early pioneers of the research on principles of distributed computing. His foundational work on concurrency, semaphores, <b>mutual</b> <b>exclusion</b> (mutex), deadlock (deadly embrace), finding shortest paths in graphs, fault-tolerance, self-stabilization, among many other contributions comprises many of the pillars upon which the field of distributed computing is built. Shortly before his death in 2002, he received the ACM PODC Influential-Paper Award in distributed computing for his work on self-stabilization of program computation. This annual award was renamed the Dijkstra Prize (Edsger W. Dijkstra Prize in Distributed Computing) the following year, in his honor.|$|E
25|$|In 1968 Dijkstra {{published}} his seminal paper 'Cooperating sequential processes', a 70-page essay that originated {{the field of}} concurrent programming. He discussed in it the notion of <b>mutual</b> <b>exclusion</b> (mutex) and the criteria a satisfactory solution should satisfy. He also redressed the historical perspective left out of his 1965 paper by including the first known correct solution to the <b>mutual</b> <b>exclusion</b> problem, for two processes, due to Theodorus Dekker. Dijkstra subsequently generalized Dekker's solution to n processes. Further, he proposed the first synchronisation mechanism for concurrent processes, the semaphore with its two operations, P and V. He also identified the 'deadlock problem' (called there 'the problem of the deadly embrace') and proposed an elegant 'Banker's algorithm' that prevents deadlock. The deadlock detection and prevention became perennial research problems {{in the field of}} concurrent programming.|$|E
40|$|<b>Mutual</b> <b>exclusions</b> {{provide useful}} {{information}} for learn-ing classes of concepts. We designed MuSweeper as a MineSweeper-like game to collect <b>mutual</b> <b>exclusions</b> from web users. Using {{the mechanism of}} an exten-sive game with Imperfect information, our experiments showed MuSweeper to collect <b>mutual</b> <b>exclusions</b> with high precision and efficiency...|$|R
5000|$|... {{support for}} <b>mutual</b> <b>exclusions</b> and atomic command executions inside the shell loop (in order to, e.g. avoid {{unexpectedly}} high I/O load); ...|$|R
25|$|Concurrency {{errors in}} {{critical}} sections, <b>mutual</b> <b>exclusions</b> {{and other features}} of concurrent processing. Time-of-check-to-time-of-use (TOCTOU) {{is a form of}} unprotected critical section.|$|R
25|$|In 1962 or 1963 Dijkstra {{proposed}} the semaphore mechanism for <b>mutual</b> <b>exclusion</b> algorithm for n processes (a generalization of Dekker's algorithm), {{which was probably}} the first published concurrent algorithm and which introduced a new area of algorithmic research. He also identified the deadlock problem and {{proposed the}} banker's algorithm that prevents deadlock.|$|E
25|$|Traditional {{computational}} problems {{take the}} perspective that we ask a question, a computer (or a distributed system) processes {{the question for}} a while, and then produces an answer and stops. However, there are also problems where {{we do not want}} the system to ever stop. Examples of such problems include the dining philosophers problem and other similar <b>mutual</b> <b>exclusion</b> problems. In these problems, the distributed system is supposed to continuously coordinate the use of shared resources so that no conflicts or deadlocks occur.|$|E
25|$|Locks can {{be applied}} on {{different}} levels of granularity—on entire tables, pages, or even on a per-row basis on tables. For indexes, it can either be on the entire index or on index leaves. The level of granularity to be used is defined on a per-database basis by the database administrator. While a fine-grained locking system allows more users to use the table or index simultaneously, it requires more resources, so it does not automatically yield higher performance. SQL Server also includes two more lightweight <b>mutual</b> <b>exclusion</b> solutions—latches and spinlocks—which are less robust than locks but are less resource intensive. SQL Server uses them for DMVs and other resources that are usually not busy. SQL Server also monitors all worker threads that acquire locks {{to ensure that they}} do not end up in deadlocks—in case they do, SQL Server takes remedial measures, which in many cases are to kill one of the threads entangled in a deadlock and roll back the transaction it started. To implement locking, SQL Server contains the Lock Manager. The Lock Manager maintains an in-memory table that manages the database objects and locks, if any, on them along with other metadata about the lock. Access to any shared object is mediated by the lock manager, which either grants access to the resource or blocks it.|$|E
40|$|Abstract. We {{present a}} {{technique}} for designing reconfiguration controllers in the Fractal component-based framework. We obtain discrete control loops that automatically enforce safety properties on {{the interactions between}} components, concerning, e. g., <b>mutual</b> <b>exclusions,</b> forbidden or imposed sequences. We use a reactive programming language, with a new mechanism of behavioural contracts. Its compilation involves discrete controller synthesis, which automatically generates the correct adaptation controllers. We apply our approach {{to the problem of}} adaptive ressource management, illustrated by the example of a HTTP server...|$|R
50|$|In {{order to}} run safely on {{multiprocessor}} machines, access to shared resources (files, data structures etc.) must be serialized so that threads or processes do {{not attempt to}} modify the same resource at the same time. Atomic operations, spinlocks, critical sections, <b>mutual</b> <b>exclusions</b> ("mutexes"), and serializing tokens are all possible methods {{that can be used}} to prevent concurrent access. Like recent versions of Linux and FreeBSD, XNU, as of Mac OS X 10.4 and Darwin 8.0, employs a fine-grained mutex model to achieve higher performance on multiprocessor systems.|$|R
40|$|In {{this paper}} we {{introduce}} Constraint-based Attribute and Interval Planning (CAIP), {{a new paradigm}} for representing and reasoning about plans. The paradigm enables the description of planning domains with time, resources, concurrent activities, <b>mutual</b> <b>exclusions</b> among sets of activities, disjunctive preconditions and conditional effects. We provide a theoretical foundation for the paradigm using a mapping to first order logic. We also show that CAIP plans are naturally expressed by networks of constraints, and that planning maps directly to dynamic constraint reasoning. In addition, we show how constraint templates are used to provide a compact mechanism for describing planning domains...|$|R
500|$|If {{instruction}} 1B is executed between 1A and 3A, or if instruction 1A is executed between 1B and 3B, {{the program}} will produce incorrect data. This {{is known as a}} race condition. The programmer must use a lock to provide <b>mutual</b> <b>exclusion.</b> A lock is a programming language construct that allows one thread to take control of a variable and prevent other threads from reading or writing it, until that variable is unlocked. The thread holding the lock is free to execute its critical section (the section of a program that requires exclusive access to some variable), and to unlock the data when it is finished. Therefore, to guarantee correct program execution, the above program can be rewritten to use locks: ...|$|E
2500|$|C# {{provides}} the , which {{is yet another}} example of beneficial syntactic sugar. It works by marking a block of code as a critical section by <b>mutual</b> <b>exclusion</b> of access to a provided object. Like the [...] statement, it works by the compiler generating a [...] block in its place.|$|E
2500|$|Dijkstra {{was one of}} {{the very}} early pioneers of the {{research}} on principles of distributed computing. As the citation for the Dijkstra Prize recognizes, [...] "no other individual has had a larger influence on research in principles of distributed computing." [...] Some of his papers are even considered to be those that established the field. Dijkstra's 1965 paper, Solution of a Problem in Concurrent Programming Control was the first to present the correct solution to the <b>mutual</b> <b>exclusion</b> problem. Leslie Lamport writes that this work [...] "is probably why PODC exists" [...] and it [...] "started the field of concurrent and distributed algorithms".|$|E
40|$|Tools that {{automatically}} generate queries are useful when schemas {{are hard to}} understand due to size or complexity. Usually, these tools find minimal tree patterns that contain a given set (or bag) of labels. The labels could be, for example, XML tags or relation names. The only restriction is that, in a tree pattern, adjacent labels must be among some specified pairs. A more expressive framework is developed here, where a schema is a mapping of each label to a collection of bags of labels. A tree pattern conforms to the schema if for all nodes v, the bag comprising the labels of the neighbors is contained {{in one of the}} bags to which the label of v is mapped. The problem at hand is to find a minimal tree pattern that conforms to the schema and contains a given bag of labels. This problem is NP-hard even when using the simplest conceivable language for describing schemas. In practice, however, the set of labels is small, so efficiency is realized by means of an algorithm that is fixed-parameter tractable (FPT). Two languages for specifying schemas are discussed. In the first, one expresses pairwise <b>mutual</b> <b>exclusions</b> between labels. Though W[1]-hardness (hence, unlikeliness of an FPT algorithm) is shown, an FPT algorithm is described for the case where the <b>mutual</b> <b>exclusions</b> form a circular-arc graph (e. g., disjoint cliques). The second language is that of regular expres-sions, and for that another FPT algorithm is described...|$|R
40|$|F 15. 33 > + {{automatical}} computing of {{the number}} of threads + identical sequential and parallel code sources + portable + efficient + private variables + reduction (tree-based) + critical regions 6 / 20 # # # # # # # Features of threads +lower level than OpenMP Pthreads OpenMP 3 types of mutexes 1 type semaphores [...] expressiveness: high medium 7 work with groups of threads : easy possible sometimes Thread 1 Thread 2 Thread 3 Barrier 7 barriers, <b>mutual</b> <b>exclusions</b> bound to groups of threads 3 OpenMP more appropriate for data parallelism than code parallelism 7 / 20 # # # # # # # Kohonen map w in,out input data vector neuron map x in d out = # in (...|$|R
40|$|In {{this paper}} we {{describe}} Constraint-based Attribute and Interval Planning (CAIP), a paradigm for representing and reasoning about plans. The paradigm enables {{the description of}} planning domains with time, resources, concurrent activities, <b>mutual</b> <b>exclusions</b> among sets of activities, disjunctive preconditions and conditional effects. We provide a theoretical foundation for the paradigm, based on temporal intervals and attributes. We then show how the plans are naturally expressed by networks of constraints, and show {{that the process of}} planning maps directly to dynamic constraint reasoning. In addition, we de ne compatibilities, a compact mechanism for describing planning domains. We describe how this framework can incorporate the use of constraint reasoning technology to improve planning. Finally, we describe EUROPA, an implementation of the CAIP framework...|$|R
2500|$|Dijkstra's {{algorithmic}} work (especially graph algorithms, concurrent algorithms, {{and distributed}} algorithms) {{plays an important}} role in many areas of computing science. According to Leslie Lamport (2002), Dijkstra [...] "started the field of concurrent and distributed algorithms with his 1965 CACM paper [...] "Solution of a Problem in Concurrent Programming Control", in which he first stated and solved the <b>mutual</b> <b>exclusion</b> problem." [...] As Lamport explains, [...] "that paper is probably why PODC exists (...). It remains to this day the most influential paper in the field. That it did not win a PODC Influential Paper Award reflects an artificial separation between concurrent and distributed algorithms–a separation that has never existed in Dijkstra's work." ...|$|E
60|$|But, though Great Britain {{could do}} {{perfectly}} well without her colonies, and though, on every principle {{of morality and}} justice, she ought to consent to their separation, should the time come when, after full trial of the best form of union, they deliberately desire to be dissevered, there are strong reasons for maintaining the present slight bond of connection so long as not disagreeable to the feelings of either party. It is a step, {{as far as it}} goes, towards universal peace and general friendly co-operation among nations. It renders war impossible among a large number of otherwise independent communities, and, moreover, hinders any of them from being absorbed into a foreign state, and becoming a source of additional aggressive strength to some rival power, either more despotic or closer at hand, which might not always be so unambitious or so pacific as Great Britain. It at least keeps the markets of the different countries open to one another, and prevents that <b>mutual</b> <b>exclusion</b> by hostile tariffs which none of the great communities of mankind except England have yet outgrown. And {{in the case of the}} British possessions it has the advantage, especially valuable at the present time, of adding to the moral influence and weight in the councils of the world of the power which, of all in existence, best understands liberty--and, whatever may have been its errors in the past, has attained to more of conscience and moral principle in its dealings with foreigners than any other great nation seems either to conceive as possible or recognize as desirable. Since, then, the union can only continue, while it does continue, on the footing of an unequal federation, it is important to consider by what means this small amount of inequality can be prevented from being either onerous or humiliating to the communities occupying the less exalted position.|$|E
5000|$|Lamport's Distributed <b>Mutual</b> <b>Exclusion</b> Algorithm is a {{contention-based}} algorithm for <b>mutual</b> <b>exclusion</b> on a distributed system.|$|E
40|$|We {{propose a}} novel {{inference}} framework for finding maximal cliques in a weighted graph that satisfy hard constraints. The constraints specify the graph nodes that must {{belong to the}} solution as well as <b>mutual</b> <b>exclusions</b> of graph nodes, i. e., sets of nodes that cannot {{belong to the same}} solution. The proposed inference is based on a novel particle filter algorithm with state permeations. We apply the inference framework to a challenging problem of learning part-based, deformable object models. Two core problems in the learning framework, matching of image patches and finding salient parts, are formulated as two instances of the problem of finding maximal cliques with hard constraints. Our learning framework yields discriminative part based object models that achieve very good detection rate, and outperform other methods on object classes with large deformation. ...|$|R
40|$|Many ribosomes {{simultaneously}} move on {{the same}} messenger RNA (mRNA), each separately synthesizing the protein coded by the mRNA. Earlier models of ribosome traffic represent each ribosome by a ``self-propelled particle'' and capture the dynamics by {{an extension of the}} totally asymmetric simple exclusion process (TASEP). In contrast, here we develope a theoretical model that not only incorporates the <b>mutual</b> <b>exclusions</b> of the interacting ribosomes, but also describes explicitly the mechano-chemistry of each of these individual cyclic machines during protein synthesis. Using analytical and numerical techniques of non-equilibrium statistical mechanics, we analyze this model and illustrate its power by making experimentally testable predictions on the rate of protein synthesis in real time and the density profile of the ribosomes on some mRNAs in E-Coli. Comment: 4 pages including 3 EPS figure...|$|R
40|$|Many ribosomes {{simultaneously}} move on {{the same}} messenger RNA (mRNA), each synthesizing a protein. In contrast to the earlier models, here we develope a "unified" theoretical model that not only incorporates the <b>mutual</b> <b>exclusions</b> of the interacting ribosomes, but also describes explicitly the mechano-chemistry {{of each of these}} individual cyclic machines during protein synthesis. Using a combination of analytical and numerical techniques of non-equilibrium statistical mechanics, we analyze the rates of protein synthesis and the spatio-temporal oraganization of the ribosomes in this model. We also predict how these properties would change with the changes in the rates of the various chemo-mechanical processes in each ribosome. Finally, we illustrate the power of this model by making experimentally testable predictions on the rates of protein synthesis and the density profiles of the ribosomes on some mRNAs in E-coli...|$|R
5000|$|Reliance on named {{critical}} sections for <b>mutual</b> <b>exclusion</b> hinders scalable parallelism by associating <b>mutual</b> <b>exclusion</b> with code regions {{rather than}} data objects.|$|E
5000|$|To {{implement}} a <b>mutual</b> <b>exclusion</b> lock, we define the operation FetchAndIncrement, which {{is equivalent to}} FetchAndAdd with inc=1.With this operation, a <b>mutual</b> <b>exclusion</b> lock can be implemented using the ticket lock algorithm as: ...|$|E
5000|$|The Ricart-Agrawala Algorithm is an {{algorithm}} for <b>mutual</b> <b>exclusion</b> on a distributed system. This {{algorithm is}} an extension and optimization of Lamport's Distributed <b>Mutual</b> <b>Exclusion</b> Algorithm, by removing the need for [...] messages. It was developed by Glenn Ricart and Ashok Agrawala.|$|E
40|$|Proving {{properties}} of Place/Transition Nets through Linear Algebraic Techniques {{is very interesting}} because of the polynomial complexity of the algorithms used for this purpose. In this sense, many works have been devoted to the linear analysis of marking related properties (e. g. boundedness of the state space, <b>mutual</b> <b>exclusions,</b> etc.). Nevertheless, few results exist related to linear analysis of liveness properties. In this note, we investigate some applications of linear techniques to partial characterization of liveness properties. First, {{a necessary condition for}} structural liveness in structural bounded nets is presented. It is based on the rank of the incidence matrix. Finally, given an initial marking, some sufficient conditions for dead transitions and for deadlock-freeness are presented. 1 Introduction The interest in parallel and distributed systems grows constantly according to the new domains of application of this kind of systems. One of the main problems arising from th [...] ...|$|R
40|$|International audienceWe {{present a}} novel {{technique}} for designing discrete, logical control loops, {{on top of}} continuous control tasks, ensuring logical safety properties of the tasks sequencings and mode changes. We define this new handler {{on top of the}} real-time executives built with the ORCCAD design environment for control systems, which is applied, e. g. to robotics and real-time networked control. It features structures of control tasks, each equipped with a local automaton, used for the reactive, event-based management of its activity and modes. The additional discrete handler manages the interactions between tasks, concerning, e. g., <b>mutual</b> <b>exclusions,</b> forbidden or imposed sequences. We use a new reactive programming language, with constructs for finite-state machines and data-flow nodes, and a mechanism of behavioral contracts, which involves discrete controller synthesis. The result is a discrete control loop, on top of the continuous control loops, all integrated in a coherent real-time architecture. Our approach is illustrated and validated experimentally with the case study of a robot arm...|$|R
40|$|Abstract. In {{this paper}} we {{describe}} Constraint-based Attribute and Interval Planning (CAIP), a paradigm for representing and reasoning about plans. The paradigm enables {{the description of}} planning domains with time, resources, concurrent activities, <b>mutual</b> <b>exclusions</b> among sets of activities, disjunctive preconditions and conditional effects. We provide a theoretical foundation for the paradigm, based on temporal intervals and attributes. We then show how the plans are naturally expressed by networks of constraints, and show {{that the process of}} planning maps directly to dynamic constraint reasoning. In addition, we define compatibilities, a compact mechanism for describing planning domains. We describe how this framework can incorporate the use of constraint reasoning technology to improve planning. Finally, we describe EUROPA, an implementation of the CAIP framework. 1. What Should a Planner Do? In recent years, planning has been applied to complex domains, including the sequencing of commands for spacecraft both on the ground and on-board (Jónsson et al., 2000). The domain of spacecraft operation...|$|R
50|$|In {{computer}} science, a lock or mutex (from <b>mutual</b> <b>exclusion)</b> is a synchronization {{mechanism for}} enforcing limits on {{access to a}} resource {{in an environment where}} there are many threads of execution. A lock is designed to enforce a <b>mutual</b> <b>exclusion</b> concurrency control policy.|$|E
5000|$|Removing the <b>mutual</b> <b>exclusion</b> {{condition}} {{means that}} no process will have exclusive {{access to a}} resource. This proves impossible for resources that cannot be spooled. But even with spooled resources, deadlock could still occur. Algorithms that avoid <b>mutual</b> <b>exclusion</b> are called non-blocking synchronization algorithms.|$|E
50|$|Triggers {{may also}} have <b>mutual</b> <b>exclusion</b> (mutex).|$|E
40|$|The {{interior}} {{permanent magnet}} (IPM) synchronous machine {{is vulnerable to}} developing significant amounts of current-induced ripple torque depending {{on the details of}} the machine design. Building on the contributions of earlier researchers, this paper approaches the problem of torque ripple reduction in IPM machines by applying the principle of <b>mutual</b> harmonics <b>exclusion.</b> First, this paper develops a useful analytical expression for the torque ripple that highlights the stator-rotor harmonic interactions. Next, an analytical design procedure for IPM rotors with multiple flux barriers is proposed that applies the <b>mutual</b> harmonics <b>exclusion</b> principle in combination with stator windings that use odd numbers of slots per pole pair. Finally, the technique is applied to two example IPM machines to investigate the effectiveness of this approach using finite element analysis. Promising results predict that a low peak-to-peak torque ripple can be achieved using relatively small numbers of stator slots and rotor flux barriers for the full range of current control angles, including deep flux weakening. Seok-Hee Han, Thomas M. Jahns and Wen L. Soon...|$|R
40|$|Quantum {{statistical}} mechanics and thermodynamics {{of an ideal}} gas of multispecies quasi-particles with <b>mutual</b> fractional <b>exclusion</b> statistics are discussed. It is shown that ther-modynamic potential and density of the system are analytically {{expressed in terms of}} the ianguage of generaiized cluster expansions, where the cluster coefficients are determined from Wu's functional relations of distribution functions for <b>mutual</b> fractional <b>exclusion</b> statistics. 1. The concept of spin-charge separationl has attracted much interest of physi-cists for recent years. It has been believed to be very significant and respon-sible for the origins of high?i superconductivity, 2 quantum Hall effect, 3 anyon superconductivity,a and Mott transition. s Spin-charge separation is essentially re-alized by two types of excitations spin and charge excitations in the system. A microscopic derivation for this was first carried out on the Tomonaga-Luttinger model (TLM), 6 the Calogero-sutherland model (CSM), 7 and the Haldane Shastry model (HSM). 8 The spin-charge separation was stemmed out {{as a consequence of the}} concept of Luttinger iiquids in one dimension. e Since spin and charge excita-tions are not independent of each other, this effect can be taken care of by <b>mutual</b> fractional <b>exclusion</b> statistics (MFES) 10 1 a between the two excitations. This situ-ation was expected to be correct even for higher-dimensional systems. 15 However, the system having spin-charge separation is not only the system but there are many other systems where MFES piays an important role. Therefore, it belongs to more broad systems of multispecies quasiparticles with MFES. Thus, this class of systems seems very important in the strongly correlated systems. To understand thermal properties of such a system of multispecies quasiparticles with MFES, it is inevitably necessary to obtain the equation of state for the system. However, it has been extremely difficult to do so except for pure FES cases, 16 - 1...|$|R
5000|$|Schopenhauer {{asserted}} that those Ideas {{are not related}} to that category. Quantity is only concerned with the <b>mutual</b> inclusion of <b>exclusion</b> of concepts with each other (All A are x; Some A are x; This A is x).|$|R
