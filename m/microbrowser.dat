13|2|Public
5000|$|The <b>microbrowser</b> and the WTVML markup {{language}} were originally developed by Ian Valentine, Patrick Sansom and Andy Hynes who founded WAPTV Ltd.{see. } The {{company and its}} technology was partly acquired by British Sky Broadcasting in 2000, and fully acquired in 2001 ( [...] see http://www.prweek.com/uk/news/13832/BSkyB-snaps-rest-WapTV/?DCMP=ILC-SEARCH [...] ). Platform development has continued within BSkyB, and version 7 of the <b>microbrowser</b> and WTVML {{markup language}} was released in Q3 2004. The <b>microbrowser</b> and WTVML markup then became the cornerstone of British Sky Broadcasting's interactive platform strategy.|$|E
5000|$|The <b>microbrowser</b> and mark-up {{language}} are both {{based upon the}} Open Mobile Alliance WML 1.3 specification. The WTVML <b>microbrowser</b> is currently available only as an OpenTV application, although an MHP version of the Waptv browser has been built for demonstration and proof of concept. An emulator exists, based on Craftwork's, STBe OpenTV middleware emulation.|$|E
50|$|The <b>microbrowser</b> {{can access}} Broadcast Resources {{as well as}} online {{resources}} delivered from a WTVML enabled web server. Broadcast Resources are content elements that are delivered in the satellite broadcast stream.|$|E
50|$|Interactive TV Sites {{have the}} {{requirement}} to deliver interactivity directly from internet servers, and therefore need the set-top box's middleware to support some sort of TV Browser, content translation system or content rendering system. Middleware examples like Liberate {{are based on a}} version of HTML/JavaScript and have rendering capabilities built in, while others such as OpenTV and DVB-MHP can load <b>microbrowsers</b> and applications to deliver content from TV Sites. In October 2008, the ITU's J.201 paper on interoperability of TV Sites recommended authoring using ETSI WTVML to achieve interoperability by allowing dynamic TV Site to be automatically translated into various TV dialects of HTML/JavaScript, while maintaining compatibility with middlewares such as MHP and OpenTV via native WTVML <b>microbrowsers.</b>|$|R
50|$|Rossmann {{was head}} evangelist at the Macintosh {{division}} of Apple Computer from 1983 to 1986. He worked with Joanna Hoffman {{and the couple}} subsequently married. Next, he founded Radius, a company that built Macintosh peripherals. He was vice-president of marketing and sales from 1986 to 1989. Its IPO was in 1990. He was vice-president of operations of C-Cube Microsystems, a leading developer of MPEG integrated circuits, from 1989 to 1992. Its IPO was in 1994. It was acquired by LSI Logic in 2001. Moving into pen computing, Rossmann was CEO of EO from 1992 to 1994. It built and marketed the EO Personal Communicator. It was acquired by AT&T in 1993. With his colleague Celeste Baranski, he won the Discover Award from Discover Magazine in 1993 for this product. In an early smartphone development, he was founder and CEO of Unwired Planet (later renamed Phone.com, then Openwave, then back to Unwired Planet) from 1994 to 2001. It developed the Wireless Application Protocol for smartphone <b>microbrowsers.</b> Its IPO was in 1999. After Unwired Planet, he was founder and CEO then chairman of PSS Systems, an information lifecycle governance company, from June 2001 to October 2010. It was acquired by IBM in 2010. His online movie service, Vudu, was acquired by Walmart. He was Founder and CEO from June 2005 to March 2010. Next Rossmann was founder and chairman of Zonbu, subscription-based personal computer maker, from April 2006 to December 2007. From March 2011 to January 2015 worked at Klip, Inc., a social video start up, as founder and CEO. Beginning January 2015 and to date, he is founder and chairman of Machinify, a machine intelligence for analytics company.|$|R
5000|$|New IPTV {{networks}} have {{the need for}} a TV Browser in their set-top boxes and various solutions exist, however as of 2007, the WTVML <b>microbrowser</b> is probably the widest deployed TV Browser and has a growing community of compatible Interactive TV Sites.|$|E
50|$|Applications {{include the}} Handspring Blazer <b>microbrowser</b> and Voice Memo, but exclude Palm OS Note Pad. Shortly after the i500 was {{discontinued}}, Handspring discontinued proxyservice for the Blazer browser. Sprint provided a free install ofNovarra's nweb browser as a replacement. This browser was functionalon the i500 until its proxy was taken down in 2008.|$|E
5000|$|WapTV was {{the name}} {{given to the company}} which {{originated}} the WTVML (Worldwide TV Mark-up Language) as a content format for the delivery of Interactive TV applications using Internet Servers. The system is an Interactive television technology platform comprising a <b>microbrowser,</b> a markup language, and a significant collection of associated software tools and services.|$|E
50|$|The WTVML markup {{language}} is a heavily extended superset of the WAP Forum WML 1.3 specification. WML content originally designed for wireless delivery to mobile phone handsets will work without modification on the WTVML platform, with the exception that any WBMP images will not appear on the Sky Interactive <b>microbrowser.</b> WTVML version 6.1 was published as an ETSI standard in June 2004.|$|E
5000|$|The {{platform}} brings internet-style {{content and}} interactivity to the Sky Digital platform by deploying a purpose-built WML <b>microbrowser</b> to the Sky Digital set-top-box over the satellite broadcast stream. Web site owners {{simply have to}} serve well formatted WTVML from their web servers to allow Sky set-top boxes and consumers to fully interact with their web services. In March 2007, Sky together {{with some of the}} Waptv founders [...] "spun off" [...] the technology into a new Company [...] "Miniweb", with the goals of furthering the work on WTVML in a global forum, and enabling the deployment of the system in other networks and devices.|$|E
5000|$|TV Sites for the OpenTV based <b>Microbrowser</b> are {{therefore}} web sites with a WTVML skin, {{and are often}} given a [...] "wtv." [...] sub-domain rather than a [...] "www." [...] sub-domain. Until the introduction of Sky HD in 2006, most Sky set-top boxes uses a standard 28.8 kbit/s modem to pull content across the online link. Because WTVML content is compiled into an encoded format by an online gateway before transmission, it must be decoded on the set-top-box {{before it can be}} drawn to the screen. For optimal performance it is recommended that WTVML files (decks) for download are no more than 70 K in size, with individual cards within each deck no more than 5 K in size. When fully loaded, the browser comprises three separate virtual layers, devoted to MPEG-4 & JPEG still image presentation, MPEG video presentation and OnScreen Display (OSD) presentation respectively.|$|E
5000|$|There are {{technical}} {{solutions that}} provide similar benefits as : compressing/downsampling proxy servers and microbrowsers, like Opera Mobile, which can tailor any website to small display (using Small Screen Rendering technique). However, these browsers must still download an entire page (with graphics {{and other related}} files) which, if not optimized for mobile phones, can be time-consuming and expensive to download. To improve the latter issue, the two adaptation techniques can be used together. This is the idea behind proxy-based microbrowsers like Opera Mini that download the optimized and compressed version of web pages through dedicated proxy servers. However, web pages viewed on a mobile via a proxy-based <b>microbrowser</b> are rarely specifically designed for a mobile phone, so it is left up to the proxy server and browser {{to decide what to}} compress, what to display, and how to display it, which, unlike the [...]mobi version of the site, may not necessarily be how the web page owner intends for the mobile audience.|$|E
40|$|High quality {{education}} in Science, Technology, Engineering and Math (STEM) majors expects {{not only the}} acquisition of comprehensive domain knowledge, but also the mastery of skills to solve open-ended and even ill-defined problems in real world. Problem-based Learning (PBL) is usually adopted to achieve such goals by encouraging students to learn by solving real-life problems. However, successful PBL requires sustained and in-depth involvement of faculty members, hence making PBL not scalable. Even though discussion forums and Q&A systems can help address the scalability problem of faculty involvement on large class sizes, it introduces new problems. First, as knowledge bases grow in size, {{the sheer size of}} the accumulated knowledge makes it harder to locate the desired information. Second, existing knowledge discovery techniques do not provide effective facilities for the capture and reuse of solutions to recurring problems. To address these challenges, we developed <b>MicroBrowser,</b> an innovative and interactive Question & Answer (Q&A) system augmented with pattern-based expertise-sharing interfaces and 2 D knowledge graph discussion visualization. <b>MicroBrowser</b> provides a set of pattern-based expertise-sharing interfaces to allow both learners and instructors to refine, reuse, and share knowledge. <b>MicroBrowser</b> also allows learners to browse and navigate important discussions based on topic similarity encoded by node proximity in a knowledge graph. Results of empirical evaluations of our proposed solution show that ask difficulty improves with <b>MicroBrowser</b> when compared with a state-of-the-art Q&A system for knowledge discovery and reuse tasks. In addition, success rate for knowledge discovery tasks using keywords was higher with <b>MicroBrowser.</b> Moreover, we show that, students found the pattern-based expertise-sharing interface easy to use and were able to contribute new knowledge in the form of new knowledge connections and even recommend new design patterns...|$|E
40|$|The {{emergence}} of wireless and mobile networks has {{made possible the}} introduction of electronic commerce to a new application and research area: mobile commerce. Internet-enabled mobile handheld devices {{are one of the}} core components of a mobile commerce system, making it possible for mobile users to directly interact with mobile commerce applications. Much of a mobile user’s first impression of the application will be formed by his or her interaction with the device, therefore the success of mobile commerce applications is greatly dependent on how easy they are to use. This article first explains the role of handheld devices in mobile commerce systems and then discusses the devices in detail. A mobile handheld device includes six major components: i) a mobile operating system, ii) a mobile central processor unit, iii) a <b>microbrowser,</b> iv) input/output devices, v) a memory, and vi) batteries. Each component is described in detail and major products and technologies for the component are given. The technology needed for synchronization with desktop PCs and various mobile commerce applications is also presented...|$|E
40|$|The {{appearance}} {{of different kinds}} of networked mobile devices and network appliances creates special requirements for user interfaces that are not met by existing widget based user interface creation toolkits. This thesis studies the problem domain of user interface creation toolkits for portable network connected devices. The portable nature of these devices places great restrictions on the user interface capabilities. One main characteristic of the devices is that they have small screens compared to the existing desktop environment displays. Mobile users {{want to be able to}} use their applications whenever and wherever possible. The same applications need to be accessible in different situations and environments and from different platforms and devices. Code mobility and wide area wireless data networks will enable us to transmit application code virtually everywhere, although existing user interface toolkits form a bottleneck for universal portability and access. The conclusion is that for globally accessible and portable applications explicit toolkit level support for application semantics is needed. Keywords: user interface toolkit, widgets, application semantics, semantic controls, software portability, graphical user interfaces, Java, WAP, hand-held devices 1. 	Introduction	 1 2. 	Concepts	 3 2. 1 	Platform independent graphical user interfaces	 3 2. 1. 1 	User interface toolkits	 3 2. 1. 2 	Code mobility	 5 2. 1. 3 	Application context	 6 2. 2 	Devices	 6 2. 3 	Differences with desktop user interfaces	 9 2. 3. 1 	Output	 9 2. 3. 2 	Input	 11 3. 	Technologies	 15 3. 1 	Current Java user interface concepts 15 3. 2 	Layout management	 19 3. 3 	WAP technology and its user interface concepts	 24 3. 4 	General WAP and Java interoperability	 27 4. 	Different user interface toolkit concepts	 30 4. 1 	A subset of AWT or Swing	 31 4. 1. 1 	A subset of AWT for WAP user interface elements	 32 4. 2 	A toolkit based on WAP user interface	 33 4. 2. 1 	WAP concept based	 34 4. 2. 2 	Wapplets embedded in <b>Microbrowser</b>	 34 4. 3 	Configurations and device profiles	 35 4. 4 	Lower level user interface API	 36 4. 5 	Existing implementations	 38 4. 5. 1 	Existing Java toolkits	 38 4. 5. 2 	User interface markup languages	 39 4. 5. 3 	Using markup languages for specifying user interface	 40 4. 5. 4 	The Spotless system	 41 5. 	User interface toolkit designed for small screens	 44 5. 1 	Requirements	 44 5. 1. 1 	Interaction devices	 45 5. 1. 2 	Accessibility	 46 5. 1. 3 	The toolkit	 48 5. 2 	Design issues	 49 5. 2. 1 	The screen size problem	 49 5. 2. 2 	The widget problem	 50 5. 2. 3 	The abstract factory problem	 54 5. 3 	Details	 56 5. 3. 1 	Associations between semantic controls	 56 5. 3. 2 	Input abstractions	 59 5. 3. 3 	Capability mechanisms	 61 5. 3. 4 	Compound interactive controls	 62 6. 	Conclusions	 64 Reference...|$|E

