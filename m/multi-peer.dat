15|0|Public
5000|$|A SPAN leverages {{existing}} hardware (primarily Wi-Fi and Bluetooth) {{and software}} (protocols) in commercially available smartphones to create peer-to-peer networks without relying on cellular carrier networks, wireless access points, or traditional network infrastructure. Most recently, APPLE iPhones with version 7.0 iOS and higher have been enabled with <b>multi-peer</b> ad hoc mesh networking capability, in iPhones, allowing millions of smart phones to create ad hoc networks without relying on cellular communications. It has been claimed {{that this is}} going to [...] "change the world".|$|E
40|$|The {{problem of}} <b>multi-peer</b> {{disagreement}} concerns the reasonable {{response to a}} situation in which you believe P 1 … Pn and disagree with a group of ‘epistemic peers’ of yours, who believe ∼P 1 … ∼Pn, respectively. However, the problem of <b>multi-peer</b> disagreement is a variant on the preface paradox; because of this the problem poses no challenge to the so-called ‘steadfast view’ in the epistemology of disagreement, on which it is sometimes reasonable to believe P in the face of peer disagreement about P. After some terminology is defined (§ 1), Peter van Inwagen's challenge to the steadfast view will be presented (§ 2). The preface paradox will then be presented and diagnosed (§ 3), and it will be argued that van Inwagen's challenge relies on the same principle that generates the preface paradox (§ 4). The reasonable response to <b>multi-peer</b> disagreement will be discussed (§ 5), and an objection addressed (§ 6...|$|E
40|$|A <b>multi-peer</b> system using a standard-based PCI Express ® {{multi-port}} {{switch as}} the System Interconnect {{was described in}} an IDT white paper by Kwok Kong [1]. That white paper described the different address domains existing in the Root Processor and the Endpoint Processor, memory map management, enumeratio...|$|E
40|$|One {{problem in}} the {{epistemology}} of disagreement (Kelly 2005, Feldman 2006, Christensen 2007) concerns peer disagreement, and the reasonable response to {{a situation in which}} you believe p and disagree with an “epistemic peer ” of yours (more on which notion in a moment), who believes ~p. Another (Elga 2007, pp. 486 - 8, Kelly 2010, pp. 160 - 7) concerns serial peer disagreement, and the reasonable response to a situation in which you believe p 1 … pn and disagree with an “epistemic peer ” of yours, who believes ~p 1 … ~pn. A third, which has been articulated by Peter van Inwagen (2010, pp. 27 - 8) concerns <b>multi-peer</b> disagreement, and inquires about the reasonable response to a situation in which you believe p 1 … pn and disagree with a group of “epistemic peers ” of yours, who believe ~p 1 … ~pn, respectively. We shall argue, however, that the problem of <b>multi-peer</b> disagreement is a variant on the preface paradox, and that because of this (pace van Inwagen) the problem poses no challenge to the so-called “steadfast view ” in the epistemology of disagreement. We shall define some terminology (§ 1), present van Inwagen’s challenge to the “steadfast view ” (§ 2), present and diagnose the preface paradox (§ 3), argue that van Inwagen’s challenge relies on the same principle that generates the preface paradox (§ 4), and discuss the reasonable response to <b>multi-peer</b> disagreement (§ 5). Our aim is modest: it is to defend the “steadfast view ” against one particular objection; we set aside other objections to the “steadfast view,” 1 as well as positive arguments in its favor. ...|$|E
40|$|Within {{an effort}} for {{providing}} a layered architecture of services supporting <b>multi-peer</b> collaborative applications, this paper proposes {{a new type}} of consistency management aimed for applications where a large number of processes share a large set of replicated objects. Many such applications, like peer-to-peer collaborative environments for training or entertaining purposes, platforms for distributed monitoring and tuning of networks, rely on a fast propagation of updates on objects, however they also require a notion of consistent state update. To cope with these requirements and also ensure scalability, we propose the cluster consistency model...|$|E
40|$|We {{propose to}} take {{advantage}} of the distributed multi-user Skype system for the implementation of an interactive online game. Skype combines efficient <b>multi-peer</b> support with the ability to get around firewalls and network address translation; in addition, speech is available to all game participants for free. We discuss the network requirements of interactive multi-player games, in particular concerning end-to-end delay and distributed state maintenance. We then introduce the multi-user support available in Skype and conclude that it should suffice for a game implementation. We explain how our multi-player game based on the Irrlicht graphics engine was implemented over Skype, and we present very promising results of an early performance evaluation...|$|E
40|$|Multi-party, {{interactive}} multimedia (MIM) applications pose challenges for resource management {{due to their}} simultaneous use of multiple media and their heterogeneous, distributed, and potentially large numbers of participants. Two main difficulties are the support of (1) quality of service (QoS) and (2) scalable group or <b>multi-peer</b> communication, where QoS management is complicated by relationships between different media streams and by the sizes and dynamics of groups. That is, QoS management must capture not only the identities of group participants, but also their run-time behavior. This paper describes a novel operating system construct, termed Implicit Quality Channels (IQC), which extends standard Berkeley Sockets to support resource management of <b>multi-peer</b> applications like teleconferencing and CSCW. Specifically, when a participant joins an MIM, its inclusion in the MIM's quality management infrastructure is triggered transparently. Such inclusion is implemented in three steps. First, when creating a listening socket, the MIM associates appropriate quality management information with that socket. Second, when another participant connects to this socket, the operating system kernels involved implicitly create a kernel-level event channel that will carry this QoS as well as adaptation information. Third, the resource managers on the participating hosts transparently subscribe to this event channel, thereby dynamically creating appropriate groupings of collaborating resource managers and ensuring that all participants are managed properly. Management includes the monitoring of participant behavior, the submission and receipt of adaptation events, and the dealing with requests for re-negotiation of the initial QoS. In effect, any MIM participant establishing a connection to an MIM-provided socket implicitly accepts the MIM's QoS management...|$|E
40|$|Peer-to-Peer (P 2 P) {{networks}} are popular in sharing multimedia {{resources such as}} video, audio and images. Its popularity has attracted very many users thus increasing data streaming along a congested path. The increased sharing of the resources in the network has caused delays making the network resource sharing inefficient. This paper presents a delay-optimized path algorithm that increases data flow within the network among the peers and utilizes the network resources for effective and efficient streaming of data. We consider a distributed search for peer nodes with <b>multi-peer</b> participation in both searching and initiating resource transmission within the network. The resource streaming across the peer network {{is controlled by the}} resource function. Single peer initiated searching is also considered where a single peer node initiates the resource search process. Our analysis shows that the nature of growth of the network is linear. 1...|$|E
40|$|Many network-based {{applications}} commonly open some known port(s) {{to communicate}} with their users, thus making themselves vulnerable to Denial of Service (DoS) attacks. With the purpose of solving this problem, a ``pseudo-random port-hopping'' approach was suggested by Badishi et al. and extended by Fu et al. to work for <b>multi-peer</b> applications {{in the presence of}} clock drifts. The suggested solution gives a synchronization algorithm which enables the clients and servers to communicate via communication ports changing periodically. Complementing the analytical study of the earlier work, here we study experimentally the effect of the combined parameter variations. We study the overhead and the efficiency of the algorithm in the presence of constant and various clock drifts, as well as the communication effectiveness under various attack conditions. We conclude that the algorithm's behavior follows the earlier analysis, even under situations of stress, e. g. large and even varying clock drifts...|$|E
40|$|Abstract: Database {{oriented}} data grid {{becomes a}} new demand {{with the development}} of grid technology, and DS_Grid (DatabaSe oriented Data Grid) is such a grid system supporting dynamic data integration with the idea of service. In DS_Grid, MultiChord is adopted as the grid framework implementing the distributed storage, processing and data integration of data service resources and the domain and its corresponding data resources schema are specified according to text similarity definition to locate the peers data service resources registered, so as to improve the cover range of data service resources discovered, multi-root and <b>multi-peer</b> data resources replica management mechanism to improve the efficiency of discovering data service resources and the reliability and availability of DS_Grid, filter distributed data integration strategy is applied to reduce the traffic cost and the data integration cost, and distributed clustering analysis technology is realized to summarize the huge data information. The experiments have demonstrated the availability of the key technologies adopted in DS_Grid. ...|$|E
40|$|Within {{an effort}} for {{providing}} a layered architecture {{of services for}} middleware supporting <b>multi-peer</b> collaborative applications, this paper proposes a type of consistency management called causal cluster consistency which is aimed for applications where {{a large number of}} processes share a large set of replicated objects. Many such applications, like peer-to-peer collaborative environments for educational, training or entertaining purposes, platforms for distributed monitoring and tuning of networks, rely on a fast propagation of updates on objects, however they also require a notion of consistent state update. To cope with these requirements and also ensure scalability, we propose the cluster consistency model. In a cluster consistency protocol a privileged dynamic set of processes, called coordinators, may concurrently propose updates to a subset of objects which form a cluster. The updates are applied in some order of interest by the coordinators of the cluster. Moreover, any interested process can receive update messages referring to replicated objects, with an option for the updates to be delivered unordered or in the same order as to the coordinators. This work also describes a protocol implementing causal cluster consistency, which provide...|$|E
40|$|Abstract. Within {{an effort}} for {{providing}} a layered architecture of services supporting <b>multi-peer</b> collaborative applications, this paper proposes {{a new type}} of consistency management aimed for applications where a large number of processes share a large set of replicated objects. Many such applications, like peer-to-peer collaborative environments for training or entertaining purposes, platforms for distributed monitoring and tuning of networks, rely on a fast propagation of updates on objects, however they also require a notion of consistent state update. To cope with these requirements and also ensure scalability, we propose the cluster consistency model. We also propose a two-layered architecture for providing cluster consistency. This is a general architecture that can be applied on top of the standard Internet communication layers and offers a modular, layered set of services to the applications that need them. Further, we present a fault-tolerant protocol implementing causal cluster consistency with predictable reliability, running on top of decentralised probabilistic protocols supporting group communication. Our experimental study, conducted by implementing and evaluating the twolayered architecture on top of standard Internet transport services, shows that the approach scales well, imposes an even load on the system, and provides high-probability reliability guarantees. ...|$|E
40|$|The Concept of Operations (ConOps) as {{currently}} defined by IEEE Std. 1362 - 1998 {{has evolved over}} {{the long history of}} systematic approaches to systems development. The standardized ConOps differs from a partial, non-standardized, but widely used “CONOPS”. This paper proposes—from both theory and practice—that the ConOps is a complete kernel for any system development thread and scales into a multi-level, <b>multi-peer</b> process of enterprise evolution. Self-similar versions of the ConOps are the modules in a scale hierarchy that is the fundamental architecture of complex adaptive enterprises. This architecture applies to risk management in a collective of agents contending over limited information and other resources. This “ConOps-centric ” approach should displace fragmented and linear approaches to complex systems. This concept has firm precedence and the real puzzle is why the ConOps is so neglected and abused. ConOps versus CONOPS The IEEE Std. 1362 - 1998 (IEEE, 1998) specifies an eleven-part document and implies a process, with relevant stakeholders, to address three essential issues: 1) Acknowledgment of an allocated task (“what to do”); 2) Consideration of deficiencies in current task conduct, and; 3) Synthesis of improvements (how to do better). The properly-used ConOps is a complete problem-solving process within an allocated “what” and a single scale of a system, as indicated below: A higher allocation (general requirement) A lower allocation (detailed requirement...|$|E
40|$|The {{explosive}} growth in networked systems and applications {{and the increase}} in device capabilities (as evidenced by the availability of inexpensive multimedia devices) enable novel complex distributed applications, including video conferencing, on-demand computing services, and virtual environments. These applications' need for high performance, real-time, or reliability requires the provision of Quality of Service (QoS) guarantees along the path of information exchange between two or more communicating systems. Execution environments that are prone to dynamic variability and uncertainty make QoS provision a challenging task, e. g., changes in user behavior, resource requirements, resource availabilities, or system failures are difficult or even impossible to predict. Further, with the coexistence of multiple adaptation techniques and resource management mechanisms, it becomes increasingly important to provide an integrated or cooperative approach to distributed QoS management. This work's goals are the provision of system-level tools needed for the efficient integration of multiple adaptation approaches available at different layers of a system (e. g., application-level, operating system, or network) and the use of these tools such that distributed QoS management is performed efficiently with predictable results. These goals are addressed constructively and experimentally with the Q-Fabric architecture, which provides the required system-level mechanisms to efficiently integrate multiple adaptation techniques. The foundation of this integration is the event-based communication implemented by it, realizing a loosely-coupled group communication approach frequently found in <b>multi-peer</b> applications. Experimental evaluations are performed {{in the context of a}} mobile multimedia application, where the focus is directed toward efficient energy consumption on battery-operated devices. Here, integration is particularly important to prevent multiple energy management techniques found on modern mobile devices to negate the energy savings of each other. Ph. D. Committee Chair: Schwan, Karsten; Committee Member: Eisenhauer, Greg; Committee Member: Franke, Hubertus; Committee Member: Pande, Santosh; Committee Member: Pu, Calto...|$|E
40|$|Synchronization, {{consistency}} and scalability are important {{issues in the}} design of concurrent computer system services. In this thesis we study the application of optimistic and scalable methods in concurrent system services. In a distributed setting we study scalable tracking of the causal relations between events, lightweight information dissemination in optimistic causal order in distributed systems and fault-tolerant and dynamic resource sharing. Further, we study scalable memory allocation, memory reclamation, threading, thread synchronization and data structures in shared memory systems. For each of the services we study we give the design of algorithms using optimistic methods, assess the correctness and analyze the behaviour of the algorithm, and in most cases describe implementations and perform experimental studies comparing the proposed algorithms to traditional approaches. We present a study of the accuracy of plausible timestamps for scalable event tracking in large systems. We analyze how these clocks may relate causally independent event pairs and based on the analysis we propose two new clock algorithms to satisfy the analysis criteria. We propose an information dissemination service providing optimistic causal order called lightweight causal cluster consistency. It offers scalable behaviour, low message size overhead and highprobability reliability guarantees for e. g. <b>multi-peer</b> collaborative applications. A key component in the dissemination service is a dynamic and fault-tolerant cluster management algorithm, which manages a set of tickets/resources such that each ticket has at most one owner at a time. In the dissemination service this algorithm manages senders and enables the use of small fixed size vector clocks. We present a lock-free concurrent memory allocator, NBmalloc, designed to enhance performance and scalability on multiprocessors which also shows in our experimental evaluation. We present a lock-free memory reclamation algorithm for use in the implementation of lock-free data structures. Our algorithm is the first practical one that has all the following features: (i) guarantees the safety of local as well as global references, (ii) provides an upper bound of deleted but not yet reclaimed nodes, (iii) is compatible with standard memory allocation schemes. We also present LFthreads, a user-level thread library that is implemented entirely using lock-free methods aiming for increased scalability and efficiency over traditional thread libraries...|$|E

