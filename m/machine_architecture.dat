330|728|Public
25|$|In 1963, Falkoff, Iverson, and Edward H. Sussenguth Jr., {{all working}} at IBM, used the {{notation}} {{for a formal}} description of the IBM System/360 series <b>machine</b> <b>architecture</b> and functionality, {{which resulted in a}} paper published in IBM Systems Journal in 1964. After this was published, the team turned their attention to an implementation of the notation on a computer system. One of the motivations for this focus of implementation was the interest of John L. Lawrence who had new duties with Science Research Associates, an educational company bought by IBM in 1964. Lawrence asked Iverson and his group to help utilize the language as a tool for the development and use of computers in education.|$|E
25|$|The British {{computer}} manufacturer Acorn Computers first developed the Acorn RISC <b>Machine</b> <b>architecture</b> (ARM) in the 1980s {{to use in}} its personal computers. Its first ARM-based products were coprocessor modules for the BBC Micro series of computers. After the successful BBC Micro computer, Acorn Computers considered how to move on from the relatively simple MOS Technology 6502 processor to address business markets {{like the one that}} was soon dominated by the IBM PC, launched in 1981. The Acorn Business Computer (ABC) plan required that a number of second processors be made to work with the BBC Micro platform, but processors such as the Motorola 68000 and National Semiconductor 32016 were considered unsuitable, and the 6502 was not powerful enough for a graphics-based user interface.|$|E
2500|$|One {{feature that}} {{has contributed to}} the {{longevity}} of the IBM System i platform is its high-level instruction set (called TIMI for [...] "Technology Independent Machine Interface" [...] by IBM), which allows application programs to take advantage of advances in hardware and software without recompilation. TIMI is a virtual instruction set independent of the underlying machine instruction set of the CPU. User-mode programs contain both TIMI instructions and the machine instructions of the CPU, thus ensuring hardware independence. This is conceptually somewhat similar to the virtual <b>machine</b> <b>architecture</b> of programming environments such as Smalltalk, Java and [...]NET. The key difference is that it is embedded so deeply into the AS/400's design as to make applications effectively binary-compatible across different processor families.|$|E
5000|$|NOX: <b>Machining</b> <b>Architecture,</b> with {{contributions}} by Manuel DeLanda, Detlef Mertins, Andrew Benjamin, and Brian Massumi (London: Thames and Hudson, 2004) ...|$|R
40|$|The {{objective}} {{is to provide a}}n integrated simulation environment for studying and evaluating various issues in designing parallel systems, including <b>machine</b> <b>architectures,</b> parallelizing compiler techniques, and parallel algorithms. The status of Delta project (which {{objective is}} to provide a facility to allow rapid prototyping of parallelized compilers that can target toward different <b>machine</b> <b>architectures)</b> is summarized. Included are the surveys of the program manipulation tools developed, the environmental software supporting Delta, and the compiler research projects in which Delta has played a role...|$|R
50|$|Developers are {{currently}} working on Longene 2.0, which will support the Windows applications run on non-x86 <b>architecture</b> <b>machine,</b> such as ARM <b>architecture</b> <b>machine</b> and Loongson <b>architecture</b> <b>machine.</b> And the developers are also working on the AMD64 support and porting NDISWrapper code to the project.|$|R
2500|$|The IBM System i, {{then known}} as the AS/400, was the {{continuation}} of the System/38 database <b>machine</b> <b>architecture</b> (announced by IBM in October 1978 and delivered in August 1979). The AS/400 removed capability-based addressing. The AS/400 added source compatibility with the System/36 combining the two primary computers manufactured by the IBM Rochester plant. The System/36 was IBM's most successful mini-computer but the architecture had reached its limit. [...] The first AS/400 systems (known by the development code names Silverlake and Olympic) were delivered in 1988 under the tag line [...] "Best of Both Worlds" [...] and the product line has been refreshed continually since then. Guy Dehond from Inventive Designers was one of the beta-testers of Silverlake. The programmers who worked on OS/400, the operating system of the AS/400, did not have a UNIX background. Dr Frank Soltis, the chief architect, says that this is the main difference between this and any other operating system.|$|E
5000|$|The {{number of}} {{dependent}} steps {{varies with the}} <b>machine</b> <b>architecture.</b> For example: ...|$|E
5000|$|CP-40/CMS, an {{important}} [...] "one-off" [...] research system that established the CP/CMS virtual <b>machine</b> <b>architecture</b> ...|$|E
25|$|As Gentoo is a source-based {{distribution}} with a portage tree {{describing how}} to build the packages, adding instructions to build on different <b>machine</b> <b>architectures</b> is particularly easy.|$|R
50|$|SMP uses {{a single}} shared system bus that {{represents}} one of the earliest styles of multiprocessor <b>machine</b> <b>architectures,</b> typically used for building smaller computers with up to 8 processors.|$|R
40|$|AbstractNew <b>machine</b> <b>architectures</b> {{were born}} during these last years pushed by {{industrial}} exigencies {{in terms of}} productivity. In this paper, we propose to study the performances that two new <b>machining</b> <b>architecture</b> including hybrid robot with a parallelogram closed loop and a parallel structure can offer. These two robots are combined with a 2 axis turntable in a 8 DoFs robotic cell. Three redundant parameters are used to optimize the path planning. The criteria used to optimize the behavior of each robotic cell and to assess their behavior are {{presented in this paper}} along with a comparative study of the kinematic performances and stiffness performances of the two architectures...|$|R
50|$|Such a stack <b>machine</b> <b>architecture</b> is {{inherently}} simpler since all instructions {{operate on the}} top-most stack entries.|$|E
50|$|See Unisys 2200 Series system {{architecture}} for {{a description of}} the <b>machine</b> <b>architecture</b> and its relationship to the OS 2200 operating system.|$|E
50|$|Retargeting the {{compiler}} {{for a new}} <b>machine</b> <b>architecture</b> is {{a similar}} exercise, except only the code generation modules need to be changed.|$|E
40|$|This paper {{discusses}} {{our experience}} in using a functional language in topics across the computer science curriculum. After examining {{the arguments for}} taking a functional approach, we look in detail at four case studies from different areas: programming language semantics, <b>machine</b> <b>architectures,</b> graphics and formal languages...|$|R
50|$|Universal Network Objects (UNO) is the {{component}} model {{used in the}} OpenOffice.org and LibreOffice computer software application suites. It is interface-based and designed to offer interoperability between different programming languages, object models and <b>machine</b> <b>architectures,</b> on a single machine, within a LAN or over the Internet.|$|R
5000|$|In {{practical}} computer science, {{a similar}} concept {{known as a}} virtual machine is sometimes used to minimise dependencies on underlying <b>machine</b> <b>architectures.</b> Such <b>machines</b> are also used for teaching. The term [...] "register machine" [...] is sometimes {{used to refer to}} a virtual machine in textbooks.|$|R
50|$|Inside Macintosh is {{the name}} of the {{developer}} documentation manuals published by Apple Computer, documenting the APIs and <b>machine</b> <b>architecture</b> of the Macintosh computer.|$|E
50|$|Each {{implementation}} was {{a substantial}} redesign of its predecessor and an evolutionary step forward. CP-67/CMS {{was the first}} widely available virtual <b>machine</b> <b>architecture.</b> IBM pioneered this idea with its research systems M44/44X (which used partial virtualization) and CP-40 (which used full virtualization).|$|E
50|$|This library {{combines}} {{the simplicity of}} the multithreaded programming paradigm, in which one thread supports each simultaneous connection, with the performance and scalability of an event-driven state <b>machine</b> <b>architecture.</b> In other words, this library offers a threading API for structuring an Internet application as a state machine.|$|E
50|$|A {{number of}} {{platforms}} have subtle {{differences in their}} implementation of the call stack that can affect the way a stack buffer overflow exploit will work. Some <b>machine</b> <b>architectures</b> store the top level return address of the call stack in a register. This means that any overwritten return address will not be used until a later unwinding of the call stack. Another example of a machine specific detail that can affect the choice of exploitation techniques {{is the fact that}} most RISC style <b>machine</b> <b>architectures</b> will not allow unaligned access to memory. Combined with a fixed length for machine opcodes this machine limitation can make the jump to ESP technique almost impossible to implement (with the one exception being when the program actually contains the unlikely code to explicitly jump to the stack register).|$|R
5000|$|In {{computing}}, SPICE (the Simple Protocol for Independent Computing Environments) is a remote-display system {{built for}} virtual environments which {{allows users to}} view a computing [...] "desktop" [...] environment - not only on its computer-server machine, but also from anywhere on the Internet - using {{a wide variety of}} <b>machine</b> <b>architectures.</b>|$|R
40|$|Parallel {{database}} <b>machine</b> <b>architectures</b> {{have evolved}} {{from the use of}} exotic hardware to a software parallel dataflow architecture based on conventional shared-nothing hardware. These new designs provide impressive speedup and scaleup when processing relational database queries. This paper reviews the techniques used by such systems, and surveys current commercial and research systems...|$|R
5000|$|In Europe, a {{high level}} <b>machine</b> <b>architecture</b> for ALGOL 60 was devised which was {{emulated}} on various real computers, among them the Siemens 2002 and the IBM 7090. An ALGOL manual was published which provided a detailed introduction of all features of the language with many program snippets, and four appendixes: ...|$|E
5000|$|... (A user's [...] "backup server" [...] Edition and Add-Ons are {{controlled}} by license codes; {{there is only one}} [...] "server" [...] executable distributed for Retrospect Macintosh and one distributed for Retrospect Windows. In addition, one Retrospect [...] "client" [...] executable is distributed for each applicable combination of <b>machine</b> <b>architecture</b> and OS.) ...|$|E
50|$|Programs emulating the Nintendo 64 {{benefit from}} the {{scarcity}} of 64-bit operations in the game's executable code, especially when running with a 32-bit <b>machine</b> <b>architecture</b> as a host. Most of these emulators perform the majority of calculations at 32-bit precision and trap the few subroutines that actually make use of 64-bit instructions.|$|E
50|$|The XPL {{compiler}}, called XCOM, is a one-pass compiler using a table-driven parser {{and simple}} code generation techniques. Versions of XCOM exist for different <b>machine</b> <b>architectures,</b> using different hand-written code generation modules for those targets. The original target was IBM System/360, {{which is a}} proper subset of IBM System/370, IBM System/390 and IBM System z.|$|R
40|$|QUICK, an {{interactive}} software environment for engineering design, provides a programmable FORTRAN-like calculator interface {{to a wide}} range of data structures as well as both built-in and user created functions. QUICK also provides direct access to the operating systems of eight different <b>machine</b> <b>architectures.</b> The evolution of QUICK and a brief overview of the current version are presented...|$|R
40|$|The Sun Network Filesystem (NFS™) {{provides}} transparent, {{remote access}} to filesystems. Unlike many other remote filesystem implementations under UNIX®, NFS {{is designed to}} be easily portable to other operating systems and <b>machine</b> <b>architectures.</b> It uses an External Data Representation (XDR) specification to describe protocols in a machine and system independent way. NFS is implemented on to...|$|R
5000|$|Turing {{machines}} describe algorithms {{independent of}} how much memory they use. There {{is a limit to}} the memory possessed by any current machine, but this limit can rise arbitrarily in time. Turing machines allow us to make statements about algorithms which will (theoretically) hold forever, regardless of advances in conventional computing <b>machine</b> <b>architecture.</b>|$|E
50|$|CodeWarrior was a {{key factor}} in the success of Apple's {{transition}} of its <b>machine</b> <b>architecture</b> from 68K processors to PowerPC because it provided a complete, solid PowerPC compiler when the competition (Apple's MPW tools and Symantec C++) was mostly incomplete. Metrowerks also made it easy to generate fat binaries, which included both 68K and PowerPC code.|$|E
50|$|In 1980, Knight {{participated in}} the {{development}} of the Connection <b>Machine</b> <b>architecture</b> and its original implementation. Other notable and diverse accomplishments during the 1980s included the creation of the first silicon retina in 1981, the creation of a single-chip optical mouse, the design of the Cross-Omega interconnection network architecture, and the design of the Transit multiprocessor interconnection architecture.|$|E
40|$|This {{document}} {{describes the}} GNU assembler as. This document does not describe what an assembler does, {{or how it}} works. This document also does not describe the opcodes, registers or addressing modes that as uses on any paticular computer that as runs on. Consult a good book on assemblers or the <b>machine's</b> <b>architecture</b> if you need that information...|$|R
50|$|Often {{working in}} {{collaboration}} with arts organisations, industry partners and other academic institutions, Culture Lab has facilitated conferences on diverse topics, including Music & <b>Machines,</b> <b>Architecture</b> in the Space of Flows, and Artificial Intelligence & Simulation of Behaviour, as well as hosting frequent public performances, installations, lectures, seminars and workshops. The Ballroom can host up to 150 people.|$|R
50|$|Java {{bytecode}} in Java Archive (JAR) files is not {{executed by}} Android devices. Instead, Java classes are compiled into a proprietary bytecode format and run on Dalvik (or compiled version thereof with newer ART), a specialized virtual machine (VM) designed for Android. Unlike Java VMs, which are stack <b>machines</b> (stack-based <b>architecture),</b> the Dalvik VM is a register <b>machine</b> (register-based <b>architecture).</b>|$|R
