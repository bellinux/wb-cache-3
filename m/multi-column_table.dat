3|7|Public
2500|$|Conversion from base-2 to base-10 simply inverts the {{preceding}} algorithm. The {{bits of the}} binary number are used one by one, starting with the most significant (leftmost) bit. Beginning with the value 0, the prior value is doubled, and the next bit is then added to produce the next value. This can be organized in a <b>multi-column</b> <b>table.</b> For example, to convert 100101011012 to decimal: ...|$|E
40|$|We {{present the}} design of a {{structured}} search engine which returns a <b>multi-column</b> <b>table</b> in response to a query consisting of keywords describing each of its columns. We answer such queries by exploiting the millions of tables on the Web because these are much richer sources of structured knowledge than free-format text. However, a corpus of tables harvested from arbitrary HTML web pages presents huge challenges of diversity and redundancy not seen in centrally edited knowledge bases. We concentrate on one concrete task in this paper. Given a set of Web tables T 1,..., Tn, and a query Q with q sets of keywords Q 1,..., Qq, decide for each Ti if it is relevant to Q and if so, identify the mapping between the columns of Ti and query columns. We represent this task as a graphical model that jointly maps all tables by incorporating diverse sources of clues spanning matches {{in different parts of the}} table, corpus-wide co-occurrence statistics, and content overlap across table columns. We define a novel query segmentation model for matching keywords to table columns, and a robust mechanism of exploiting content overlap across table columns. We design efficient inference algorithms based on bipartite matching and constrained graph cuts to solve the joint labeling task. Experiments on a workload of 59 queries over a 25 million web table corpus shows significant boost in accuracy over baseline IR methods. Comment: VLDB 201...|$|E
5000|$|Layout {{analysis}} or [...] "zoning"Identifies columns, paragraphs, captions, etc. {{as distinct}} blocks. Especially important in <b>multi-column</b> layouts and <b>tables.</b>|$|R
40|$|A {{large number}} of web pages contain data {{structured}} {{in the form of}} “lists”. Many such lists can be further split into <b>multi-column</b> <b>tables,</b> which can then be used in more semantically meaningful tasks. However, harvesting relational tables from such lists can be a challenging task. The lists are manually generated and hence need not have well defined templates – they have inconsistent delimiters (if any) and often have missing information. We propose a novel technique for extracting tables from lists. The technique is domain-independent and operates in a fully unsupervised manner. We first use multiple sources of information to split individual lines into multiple fields, and then compare the splits across multiple lines to identify and fix incorrect splits and bad alignments. In particular, we exploit a corpus of HTML tables, also extracted from the Web, to identify likely fields and good alignments. For each extracted table, we compute an extraction score that reflects our confidence in the table’s quality. We conducted an extensive experimental study using both real web lists and lists derived from tables on the Web. The experiments demonstrate the ability of our technique to extract tables with high accuracy. In addition, we applied our technique on a large sample of about 100, 000 lists crawled from the Web. The analysis of the extracted tables have led us to believe that there are likely to be tens of millions of useful and query-able relational tables extractable from lists on the Web. 1...|$|R
40|$|Domain-specific {{database}} applications tend {{to contain}} a sizable number of table-, form-, and report-style views that must each be designed and maintained by a software developer. A significant part of this job is the necessary tweaking of low-level presentation details such as label placements, text field dimensions, list or table styles, and so on. In this paper, we present a horizontally constrained layout management algorithm that automates the display of structured hierarchical data using the traditional visual idioms of hand-designed database UIs: <b>tables,</b> <b>multi-column</b> forms, and outline-style indented lists. We compare our system with pure outline and nested table layouts with respect to space efficiency and readability, the latter with an online user study on 27 subjects. Our layouts are 3. 9 and 1. 6 times more compact on average than outline layouts and horizontally unconstrained table layouts, respectively, and are as readable as table layouts even for large datasets...|$|R
40|$|It is {{well known}} today that pages on the Web contain {{a large number of}} content-rich {{relational}} tables. Such tables have been systematically extracted in a number of efforts to empower important applications such as table search and schema discovery. However, a significant fraction of rela-tional tables are not embedded in the standard HTML table tags, and are thus difficult to extract. In particular, a large number of relational tables are known to be in a “list ” form, which contains a list of clearly separated rows that are not separated into columns. In this work, we address the important problem of au-tomatically extracting <b>multi-column</b> relational <b>tables</b> from such lists. Our key intuition lies in the simple observation that in correctly-extracted tables, values in the same column are coherent, both at a syntactic and at a semantic level. Us-ing a background corpus of over 100 million tables crawled from the Web, we quantify semantic coherence based on a statistical measure of value co-occurrence in the same col-umn from the corpus. We then model table extraction as a principled optimization problem – we allocate tokens in each row sequentially to a fixed number of columns, such that the sum of coherence across all pairs of values in the same column is maximized. Borrowing ideas from A? search and metric distance, we develop an efficient 2 -approximation algorithm. We conduct large-scale table extraction experi-ments using both real Web data and proprietary enterprise spreadsheet data. Our approach considerably outperforms the state-of-the-art approaches in terms of quality, achieving over 90 % F-measure across many cases. 1...|$|R
40|$|Fig. 1. Interactive {{adaptation}} of {{the layout of the}} data to be displayed, based on the available horizontal width of an on-screen window. Abstract—Domain-specific database applications tend to contain a sizable number of table-, form-, and report-style views that must each be designed and maintained by a software developer. A significant part of this job is the necessary tweaking of low-level presentation details such as label placements, text field dimensions, list or table styles, and so on. In this paper, we present a horizontally constrained layout management algorithm that automates the display of structured hierarchical data using the traditional visual idioms of hand-designed database UIs: <b>tables,</b> <b>multi-column</b> forms, and outline-style indented lists. We compare our system with pure outline and nested table layouts with respect to space efficiency and readability, the latter with an online user study on 27 subjects. Our layouts are 3. 9 and 1. 6 times more compact on average than outline layouts and horizontally unconstrained table layouts, respectively, and are as readable as table layouts even for large datasets. Index Terms—Hierarchy data, tabular data, nested relations, layout management...|$|R
40|$|Despite {{extensive}} research on visual query systems, the standard way {{to interact with}} relational databases remains to be through SQL queries and tailored form interfaces. This makes the power of relational databases largely inaccessible to non-programmers. This thesis proposes a solution, in two parts. The first contribution of this thesis is {{a solution to the}} visual query language problem, that is, the problem of letting end users construct arbitrary database queries through a graphical user interface. We propose the first visual query language to simultaneously satisfy three requirements: (1) query specification through direct manipulation of results, (2) the ability to view and modify any part of the current query without departing from the direct manipulation interface, and (3) SQL-like expressiveness. By directly manipulating nested relational results, and using spreadsheet idioms such as formulas and filters, the user can express arbitrary SQL- 92 queries while always remaining able to track and modify the state of the complete query. The second contribution of this thesis is an algorithm for automatically formatting nested relational data using the traditional visual idioms of hand-designed database UIs: <b>tables,</b> <b>multi-column</b> forms, and outline-style indented lists. The algorithm plugs directly into the output stage of our visual query language, and produces the concrete graphics that the user sees and manipulates on the screen during query construction. The algorithm eliminates the need for an application developer to specify low-level presentation details such as label placements, text field dimensions, table column widths, and list styles. Our prototype visual query system gives the user an experience of responsive, incremental query building while pushing all actual query processing to the database layer. We evaluate the query building aspects of our system with formative and controlled user studies on a total of 28 spreadsheet users. The controlled study shows our system outperforming Microsoft Access by 18 points on the System Usability Scale [17]; this corresponds to a 46 percentage point difference on a percentile scale of other studies in the Business Software category. We also evaluate the different layouts that can be produced by our automatic layout algorithm, including via an online user study on 27 subjects. by Eirik Bakke. Thesis: Ph. D., Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, 2016. This electronic version was submitted by the student author. The certified thesis is available in the Institute Archives and Special Collections. Cataloged from student-submitted PDF version of thesis. Includes bibliographical references (pages 127 - 136) ...|$|R

