2|6936|Public
2500|$|The <b>maximum</b> <b>flow</b> <b>line,</b> {{shown in}} Figure 5.2, is the curve that {{passes through the}} highest flow points of each speed line. Upon {{inspection}} it may be noticed {{that each of these}} points has been taken near 56% efficiency. Selecting a low efficiency (<60%) is the most common practice used to [...] terminate compressor performance maps at high flows. Another factor that is used to establish the <b>maximum</b> <b>flow</b> <b>line</b> is a pressure ratio near or equal to 1. The 50% speed line may be considered an example of this.|$|E
40|$|Abstract – How <b>line</b> <b>flows,</b> {{capacity}} requirements and system design might be altered under deregulated market structures is explored through simulations of experimentally-obtained loads and generator dispatches under alternative market structures, including a regulated base-case dispatch. Eight generators were {{located on the}} Power Web 30 bus simulated transmission network, and the 19 buyers were randomly allocated over thirty different trials to busses on the network. <b>Line</b> <b>flows</b> were estimated using a DC optimal power flow routine. Unambiguously, the sum of <b>maximum</b> <b>flows</b> over all <b>lines</b> is lower (by from one to ten percent) under a real-time pricing (RTP) regime, as compared to a simulation of the former regulated regime with fixed price (FP). Furthermore, a demand response program (DRP) is shown to perform nearly as well, resulting in lower <b>maximum</b> <b>line</b> <b>flows</b> {{in all but one}} of the allocations. RTP also restores <b>line</b> <b>flow</b> predictability close to operation under regulation...|$|R
40|$|Abstract. We {{initiate}} a competitive analysis of packet forwarding poli-cies for <b>maximum</b> and average <b>flow</b> in a <b>line</b> network. We {{show that the}} policies Earliest Arrival and Furthest-To-Go are scalable, but not con-stant competitive, for <b>maximum</b> <b>flow.</b> We {{show that there is}} no constant competitive algorithm for average flow. ...|$|R
40|$|The {{increasing}} use {{of information}} technologies in power systems has increased the risk of power systems to cyber-attacks. In this paper, we assess the risk of transmission lines being overloaded due to cyber-based false data injection attacks. The cyber risk assessment is formulated as bilevel optimization problems that determine the <b>maximum</b> <b>line</b> <b>flows</b> under false data injection attacks. We propose efficient techniques to reduce the computation complexity of solving the bilevel problems. Specifically, primary and secondary filtering techniques are employed to identify the <b>lines</b> whose <b>flows</b> will never exceed their limits, which can significantly reduce computation burden. A special feasibility cut-based acceleration technique is introduced to further reduce the computation burden. The simulation results on the IEEE 30 -bus, IEEE 118 -bus, IEEE 300 -bus and IEEE 2383 -bus systems verify the proposed risk assessment model {{and the effectiveness of}} the proposed filtering and acceleration techniques...|$|R
40|$|We {{investigate}} how to rapidly solve an online sequence of <b>maximum</b> <b>flow</b> problems. Sequences of <b>maximum</b> <b>flow</b> problems arise in a diverse collection of settings, including stochastic network programming and real-time scheduling of jobs on a two-processor computer. In this paper, we formulate solving an online sequence of <b>maximum</b> <b>flow</b> problems as the <b>Maximum</b> <b>Flow</b> Reoptimization Problem, introduce a <b>maximum</b> <b>flow</b> algorithm designed for “warm starts,” and present computational results...|$|R
40|$|Abstract. In this paper, we {{show that}} the {{directed}} <b>maximum</b> <b>flow</b> problem {{can be reduced to}} the undirected <b>maximum</b> <b>flow</b> problem. Our result yields a new algorithm for finding <b>maximum</b> <b>flows</b> in directed graphs, by reducing any directed <b>maximum</b> <b>flow</b> instance into an undirected <b>maximum</b> <b>flow</b> instance and running the Karger-Levine algorithm to find a <b>maximum</b> <b>flow</b> in the resulting undirected graph. Given a directed graph G = (V, E) with n nodes, m edges, <b>maximum</b> <b>flow</b> value v, and capacities ce, our reduction yields a Õ(m + n(v + i)) algorithm for finding a <b>maximum</b> <b>flow</b> in G, where i is the imbalance of the graph and defined to be i = ∑ ∑ u∈V −{s,t} (w,u) ∈E c(w,u) − ∑ (u,w) ∈E c(u,w) |. For directed graphs with small flow value and small imbalance, this yields a faster algorithm for computing The <b>maximum</b> <b>flow</b> problem {{is one of the oldest}} and most well-studied problems in computer science. In the <b>maximum</b> <b>flow</b> problem, we are given a graph G = (V, E) with a source s ∈ V, a destination t ∈ V, and a capacity ce along each edge e ∈ E, and we seek to find a <b>maximum</b> <b>flow</b> from s to...|$|R
30|$|In {{uncertain}} random network, we {{can obtain}} chance distribution of <b>maximum</b> <b>flow,</b> {{but it is}} difficult to calculate the <b>maximum</b> <b>flow.</b> Sometimes, we need not know the <b>maximum</b> <b>flow</b> for an uncertain random network, but only it is enough average value of flow, so we need only to calculate the expected value of the <b>maximum</b> <b>flow.</b> By Theorem 5, we have the following theorem.|$|R
5000|$|... #Caption: Fig. 4.1.1. Transformation of a multi-source multi-sink <b>maximum</b> <b>flow</b> problem into a single-source single-sink <b>maximum</b> <b>flow</b> problem ...|$|R
5000|$|Minimum cost <b>maximum</b> <b>flow</b> problem - First {{find the}} <b>maximum</b> <b>flow</b> amount [...] Then solve with [...] and [...]|$|R
5000|$|... #Caption: Fig. 4.4.1. Transformation of a <b>maximum</b> <b>flow</b> {{problem with}} vertex {{capacities}} constraint into the original <b>maximum</b> <b>flow</b> problem by node splitting ...|$|R
40|$|Abstract — In this paper, we prove two new results {{related to}} finding <b>maximum</b> <b>flows</b> in {{directed}} graphs and finding maximum matchings in bipartite graphs. In our first result, we derive a new algorithm for finding <b>maximum</b> <b>flows</b> in directed graphs. Our algorithm works by reducing a <b>maximum</b> <b>flow</b> problem on a directed graph to a <b>maximum</b> <b>flow</b> problem on an undirected graph, {{and running the}} Karger-Levine algorithm to find a <b>maximum</b> <b>flow</b> in the undirected graph. Given a directed graph G = (V, E) with n nodes, m edges, <b>maximum</b> <b>flow</b> value v, and capacities ce, our reduction yields a Õ(m + n(v + i)) algorithm for finding a <b>maximum</b> <b>flow</b> in G, where i is the imbalance of the graph and defined to be i =Pu∈V −{s,t} |P(w,u) ∈E c(w,u) − P(u,w) ∈E c(u,w) |. For directed graphs with small imbalance, this yields a faster algorithm for computing <b>maximum</b> <b>flows.</b> In our second result, we show that the <b>maximum</b> <b>flow</b> problem on directed graphs with unit capacity edges {{can be reduced to}} the bipartite matching problem. Although our second result does not yield a faster algorithm for finding <b>maximum</b> <b>flows</b> in unit capacity directed graphs, it does show that if one can find a maximum matching in faster than o(mn 1 / 2 / log 3 / 2 n) time on bipartite graphs with n nodes and m = O(n) edges, then it would yield a faster algorithm for finding <b>maximum</b> <b>flows</b> in directed graphs, running in time o(m 3 / 2). In some sense, our second result may be viewed as a hardness result for finding faster bipartite matching algorithms. I...|$|R
40|$|Abstract—FACTS devices {{can be used}} to {{mitigate}} cascading failures in a power grid by controlling the power <b>flow</b> in individual <b>lines.</b> Placement and control are significant issues. We present a procedure for determining whether a scenario can be mitigated using the concept of <b>maximum</b> <b>flow.</b> If it can be mitigated, we determine what placement and control setting will solve the scenario. This paper treats fourteen cascading failure scenarios and reports {{on the use of the}} max-flow algorithm both in determining the mitigation of each scenario and in finding FACTS settings that will mitigate the scenario. Index Terms—Flexible AC Transmission System, FACTS placement, cascading failure, <b>maximum</b> <b>flow,</b> power system. I...|$|R
30|$|How do we {{consider}} the <b>maximum</b> <b>flow</b> of a indeterminacy network? For a random network, Fishman [9], Goldberg and Tarjan [10], and Nawathe and Rao [11] mainly used stochastic optimization to solve the <b>maximum</b> <b>flow</b> problem in a random network. For an uncertain network, Han et al. [17] gave the inverse uncertain distribution of the <b>maximum</b> <b>flow</b> in an uncertain network. In this paper, according to chance theory, we will study the chance distribution, the <b>maximum</b> <b>flow</b> of an uncertain random network.|$|R
40|$|In this paper, we {{will extend}} the results about the {{parametric}} <b>maximum</b> <b>flow</b> problem to networks {{in which the}} parametrization of the arc capacities can involve both the source and the sink, as in Gallo, Grigoriadis, and Tarjan (1989), and also an additional node. We will show that the minimum cuts of the investigated networks satisfy a relaxed form of the generalized nesting property (Arai, Ueno, and Kajitani, 1993). A consequence is that the corresponding parametric <b>maximum</b> <b>flow</b> value function has at most n − 1 breakpoints. All the minimum cut capacities can therefore be computed by O(1) <b>maximum</b> <b>flow</b> computations. We will show then that, given O(n) increasing values of the parameter, {{it is possible to}} compute the corresponding <b>maximum</b> <b>flows</b> by O(1) <b>maximum</b> <b>flow</b> computations, by suitably extending Goldberg and Tarjan’s <b>maximum</b> <b>flow</b> algorithm...|$|R
3000|$|In here, {{we assume}} that the {{networks}} are directed with only one source and one sink. If the arc capacities of a network are given, then we can calculate the <b>maximum</b> <b>flow</b> f of the network using the above algorithm. For the different capacities, obtain different but unique <b>maximum</b> <b>flow</b> f. In other words, the <b>maximum</b> <b>flow</b> f is a function of arc capacities. In paper [17], the author proved that the <b>maximum</b> <b>flow</b> f is a continuous and strictly increasing function with respect to C [...]...|$|R
3000|$|... {{denote the}} {{capacities}} of the (i, j) arcs. For a random network, the <b>maximum</b> <b>flow</b> f is a random variable function of arc capacities. For an uncertain network, the <b>maximum</b> <b>flow</b> f is an uncertain variable function of arc capacities. Similarly, for an uncertain random network, the <b>maximum</b> <b>flow</b> f is an uncertain random variable function of arc capacities.|$|R
5000|$|With some solutions, {{finding the}} minimum cost <b>maximum</b> <b>flow</b> instead is straightforward. If not, {{one can find}} the <b>maximum</b> <b>flow</b> by {{performing}} a binary search on [...]|$|R
30|$|A {{network is}} called {{uncertain}} random network if some arc capacities {{of the network}} are uncertain variables and others are random variables. The main {{purpose of this paper}} is to study the <b>maximum</b> <b>flow</b> in an uncertain random network. Under the framework of chance theory, this paper obtains chance distribution of the <b>maximum</b> <b>flow</b> of an uncertain random network. At the same time, the expected value of <b>maximum</b> <b>flow</b> is given for an uncertain random network. A new method is derived to calculate chance distribution of the <b>maximum</b> <b>flow</b> for an uncertain random network.|$|R
40|$|The {{bulk power}} {{system is the}} largest man- made network, and its sheer size makes {{controlling}} it an extremely difficult task. In this paper, a method to control the network using FACTS devices set to levels determined by a <b>maximum</b> <b>flow</b> (max-flow) algorithm from graph theory is described. The <b>maximum</b> <b>flow</b> algorithm is introduced and shown how it applies to the power system for FACTS device placement and scheduling. Finally, {{the appropriateness of the}} <b>maximum</b> <b>flow</b> algorithm for power flow control is discussed. KEYWORDS. FACTS, <b>Maximum</b> <b>Flow,</b> Distributed Algorithms I...|$|R
40|$|AbstractThe space {{complexity}} of the <b>maximum</b> <b>flow</b> problem is investigated. It is shown {{that the problem is}} log space complete for deterministic polynomial time. Thus the <b>maximum</b> <b>flow</b> problem probably has no algorithm which needs only O(logk n) storage space for any constant k. Another consequence is that there is probably no fast parallel algorithm for the <b>maximum</b> <b>flow</b> problem...|$|R
40|$|A natural {{extension}} of the <b>maximum</b> <b>flow</b> problem is the parametric <b>maximum</b> <b>flow</b> problem, in which some of the arc capacities in the network are functions of a single parameter λ. Previous approaches to the problem compute the <b>maximum</b> <b>flow</b> for a given sequence of parameter values sequentially {{taking advantage of the}} solution at the previous parameter value to speed up the computation at the next. In this paper, we present a new Simultaneous Parametric <b>Maximum</b> <b>Flow</b> (SPMF) algorithm that finds the <b>maximum</b> <b>flow</b> and a minimum cut of an important class of parametric networks for all values of parameter λ simultaneously. Instead of working with the original parametric network, a new non-parametric network is derived from the original and the SPMF gives a particular state of the flows in the derived network, from which the nested minimum-cuts under all λ-values are derived in a single scan of the vertices in a sorted order. SPMF simultaneously discovers all breakpoints of λ where the <b>maximum</b> <b>flow</b> as a step-function of λ jumps. The <b>maximum</b> <b>flows</b> at these λ-values are calculated in O(m) time from the minimum-cuts; m is the number of arcs. Generalization beyond bipartite networks is also shown...|$|R
30|$|The <b>maximum</b> <b>flow</b> was {{calculated}} using the Edmonds-Karp algorithm [13]. This algorithm is {{a variation of}} the Ford-Fulkerson <b>maximum</b> <b>flow</b> algorithm [15]. The main difference between these two approaches is that the Edmonds-Karp algorithm targets the <b>maximum</b> <b>flow</b> between two elements considering the shortest paths. Thus, it is guaranteed that the algorithm will converge on a finite number of iterations, even for non-oriented graphs.|$|R
40|$|Minimum cost <b>maximum</b> <b>flow,</b> Minimum cost circulation, Cost/Capacity scaling 16. 0. 1 Introduction to minimum cost <b>maximum</b> <b>flow</b> We {{previously}} discussed <b>maximum</b> <b>flow</b> in a network. Today we add one parameter to a flow network, a cost {{per unit of}} flow on each edge: c(v, w) ∈ R, where (v, w) ∈ E. Definition 1 The cost of a flow f is defined as: c(f) =...|$|R
40|$|In {{this paper}} {{we show an}} O(n^(3 / 2) log^ 2 n) time {{algorithm}} for finding a <b>maximum</b> <b>flow</b> in a planar graph with multiple sources and multiple sinks. This is the fastest algorithm whose running time depends only {{on the number of}} vertices in the graph. For general (non-planar) graphs the multiple-source multiple-sink version of the <b>maximum</b> <b>flow</b> problem is as difficult as the standard single-source single-sink version. However, the standard reduction does not preserve the planarity of the graph, and it is not known how to generalize existing <b>maximum</b> <b>flow</b> algorithms for planar graphs to the multiple-source multiple-sink <b>maximum</b> <b>flow</b> problem...|$|R
40|$|This work {{presents}} an algorithm for the generalized <b>maximum</b> <b>flow</b> problem. First, {{we describe the}} traditional <b>maximum</b> <b>flow</b> problem. Pre-flow Push algorithms work in a more localized manner than the Ford-Fulkerson method. These algorithms maintain at all stages a feasible pre-flow that has a saturated cut. The pre-flow is changed step by step until it does satisfy flow conservation. The resulting flow then has a saturated cut so is a <b>maximum</b> <b>flow.</b> In generalized networks, each arc has a positive multiplier (u, v) called a gain factor, associated with it, representing the fraction of flow that remains when it is sent along that arc. The generalized <b>maximum</b> <b>flow</b> problem {{is identical to the}} traditional <b>maximum</b> <b>flow</b> problem, except that it can also model network with “leak ” flow...|$|R
40|$|The {{problem of}} {{computing}} the <b>maximum</b> <b>flow</b> problem on capacitated networks arises in many application areas. In {{the area of}} heterogeneous computing, it arises in job or process scheduling when allocations of resources to jobs/processes need to be tuned. The <b>maximum</b> <b>flow</b> solver is dicult to parallelize. Highly optimized sequential version of <b>maximum</b> <b>flow</b> solvers such as those by Goldberg exists. This work describes how some of the concurrency problems are resolved in our existing Pmaxflow ([URL]) solver. Pmaxflow employs a parallel pre-flow push algorithm to compute the <b>maximum</b> <b>flow.</b> Results of various tests that compare Goldberg's sequential solvers and Pmaxflow on a NUMA shared memory computer are presented...|$|R
3000|$|..., its <b>maximum</b> <b>flow</b> is f(ξ). Obviously, f(ξ) is an {{uncertain}} random variable. Then, we can obtain the chance {{distribution of the}} <b>maximum</b> <b>flow</b> from a source node to a sink node by Theorem 4; we have the following theorem.|$|R
40|$|In this paper, two new {{neural network}} models for solving the <b>maximum</b> <b>flow</b> problem are presented. The <b>maximum</b> <b>flow</b> problem in {{networks}} is formulated {{as a special}} type of linear programming problem and it is solved by appropriately defined neural networks. The nonlinear neural networks are able to generate optimal solution for <b>maximum</b> <b>flow</b> problem. We solve neural network models {{by one of the}} numerical method. Finally, some numerical examples are provided for the sake of illustration...|$|R
40|$|Abstract. We explore {{balancing}} as a definitional and algorithmic {{tool for}} finding minimum cuts and <b>maximum</b> <b>flows</b> in ordinary and parametric networks. We {{show that a}} standard monotonic parametric <b>maximum</b> <b>flow</b> problem can be formulated as a problem of computing a particular <b>maximum</b> <b>flow</b> that is balanced in an appropriate sense. We present a divide-and-conquer algorithm to compute such a balanced flow in a logarithmic number of ordinary maximum-flow computations. For the special case of a bipartite network, we present two simple, local algorithms for computing a balanced flow. The local balancing idea becomes even simpler when applied to the ordinary <b>maximum</b> <b>flow</b> problem. For this problem, we present a round-robin arc-balancing algorithm that computes a <b>maximum</b> <b>flow</b> on an n-vertex, m-arc network with integer arc capacities of at most U in O(n 2 mlog(nU)) time. Although this algorithm is slower by at least a factor of n than other known algorithms, it is extremely simple and well-suited to parallel and distributed implementation. ...|$|R
40|$|Abstract. We {{study the}} <b>maximum</b> <b>flow</b> problem in {{directed}} H-minor-free graphs where H {{can be drawn}} in the plane with one crossing. If a structural decomposition of the graph as a clique-sum of planar graphs and graphs of constant complexity is given, we show that a <b>maximum</b> <b>flow</b> can be computed in O(n logn) time. In particular, <b>maximum</b> <b>flows</b> in directed K 3, 3 -minor-free graphs and directed K 5 -minor-free graphs can be computed in O(n logn) time without additional assumptions. ...|$|R
40|$|This {{thesis is}} {{dedicated}} to the study of Complex Network Theory with applications in power systems. The focus of the study is to analyze and solve power system problems by treating and modelling it as a network and applying the concepts from this theory. The work can be broadly classified into two parts: vulnerability analysis and fault location. Two different centrality indices are proposed to analyze power system vulnerabilities. The first method utilizes shortest path betweenness approach and a centrality index is defined based on the power flow equation using reactance as the measure of portion of power <b>flowing</b> through any <b>line.</b> A few limitations of this method are improved in the second, where power system is considered to be capacitated and directed in any steady state and another centrality index based on the <b>maximum</b> <b>flow</b> algorithm is defined using admittance as weight to model the network. Based on Kirchhoff’s law, admittances are considered to be a measure of proportion and ease with which current or power <b>flows</b> through any <b>line.</b> Further, using <b>maximum</b> <b>flow</b> algorithm, <b>lines</b> are marked as important based on the fraction of total flow they carry between nodes. It is demonstrated by simulations on the IEEE 39 and IEEE 118 bus systems that failure of transmission lines identified as critical or vulnerable has a major impact on the efficiency and performance of the network, unlike the failure of random connections which have little or no effect. In another study, cascading failures in power systems are assessed using line outage distribution factor and power transfer distribution factor together with Complex Network Theory. This work identifies the group of transmission lines which may be affected if any one line fails and investigates the sequence and depth to which the failure may propagate. Using the IEEE 14 bus system, it explains how the failure of one line can sometimes lead to a cascading failure and eventual blackout. The next part of the research applies Complex Network Theory together with travelling wave based fault location techniques to locate faults in power systems. This study is further divided into two parts. The first part analyzes a power generation network, where the double-ended travelling wave theory is used to calculate the time stamp of fault transients at each node and then network topology of the system is used to first identify the faulty link and then calculate the fault distance. Finally, the single-ended travelling wave method is used to locate faults in power distribution systems. Due to the radial structure of transmission lines in such systems, more than one fault candidates may appear in the calculations, out of which only one is real. This ambiguity is resolved by taking advantage of the spanning tree like structure and using depth first search to identify the actual fault. The results reveal that the proposed methodologies are capable of locating single faults in power systems with reasonable accuracy...|$|R
40|$|OBJECTIVES: To {{evaluate}} a computerized method of artifact detection and correction of uroflow {{and compare the}} quantitative assessment of <b>maximum</b> <b>flow</b> obtained by the computer with visual correction by experts. METHODS: A total of 90 randomly chosen flows was scanned into the computer whereafter automated artifact detection and correction was performed according to pre-established rules implemented in the software. Three experts visually corrected the flows using the same artifact detection and correction specifications as the computer. Measuring agreement between different methods of assessment of <b>maximum</b> <b>flow</b> was evaluated by calculating the difference and the standard deviation (SD) of the differences. The repeatability of assessing the <b>maximum</b> <b>flow</b> value by the computer and by expert 1 was assessed by calculating the difference between 2 readings and the coefficient of repeatability. RESULTS: The coefficient of repeatability of <b>maximum</b> <b>flow</b> after detection and correction of artifacts by the computer (0. 38 ml/s) was slightly better {{when compared with the}} coefficient of repeatability between 2 observations by 1 expert (1. 12 ml/s). The interobserver variation for the quantitative assessment of <b>maximum</b> <b>flow</b> appeared to be great. A total of 51 % of the <b>maximum</b> <b>flow</b> values assessed by expert 2 was 1 ml/s or more greater than those assessed by expert 1. When comparing the results of the computer with those of the experts, the mean value of <b>maximum</b> <b>flow</b> from expert 1 was 0. 71 ml/s smaller than the computer value (p < 0. 01), the mean value from expert 2 was 0. 53 ml/s greater (p < 0. 01) and the mean value from expert 3 was not significantly different (0. 25 ml/s greater). The SD of <b>maximum</b> <b>flow</b> after correction by the computer was 0. 3 ml/s smaller than the SD of the raw data from the flowmeter and the corrected values by 2 experts. CONCLUSIONS: Computerized artifact detection and correction eliminates an important fraction of the variability of manually corrected <b>maximum</b> <b>flow</b> values. This may lead to smaller sample size requirements, especially in studies where the primary objective is to assess a small (+/- 1 ml/s) difference in mean <b>maximum</b> <b>flow</b> between group...|$|R
40|$|We {{introduce}} the pseudoflow algorithm for the <b>maximum</b> <b>flow</b> problem that employs only pseudoflows {{and does not}} generate flows explicitly. The algorithm solves directly a problem equivalent to the minimum cut problem – the maximum blocking cut problem. Once the maximum blocking cut solution is available, the additional complexity required to find the respective <b>maximum</b> <b>flow</b> is O(m log n). A variant of the algorithm is a new parametric <b>maximum</b> <b>flow</b> algorithm generating all breakpoints in the same complexity required to solve the constant capacities <b>maximum</b> <b>flow</b> problem. The pseudoflow algorithm has also a simplex variant, pseudoflow-simplex, that can be implemented to solve the <b>maximum</b> <b>flow</b> problem. One feature of the pseudoflow algorithm {{is that it can}} initialize with any pseudoflow. This feature allows it to reach an optimal solution quickly when the initial pseudoflow is “close ” to an optimal solution. The complexities of the pseudoflow algorithm, the pseudoflow-simplex and the parametric variants of pseudoflow and pseudoflow-simplex algorithms are all O(mn log n) on a graph with n nodes and m arcs. Therefore, the pseudoflow-simplex algorithm is the fastest simplex algorithm known for the parametric <b>maximum</b> <b>flow</b> problem. The pseudoflow algorithm is also shown to solve the <b>maximum</b> <b>flow</b> problem on s, t-tree networks in linear time, where s, t-tree networks are formed by joining a forest, of capacitated arcs, with nodes s and t adjacent to any subset of the nodes...|$|R
30|$|The <b>maximum</b> <b>flow</b> {{model has}} its {{interquartile}} range (variation around the median) always {{smaller than that}} of the Erdös model. This is another indication that the <b>maximum</b> <b>flow</b> model produces more homogeneous groups than the Erdös model does, regardless of the number of clusters.|$|R
40|$|A new {{augmenting path}} based {{algorithm}} called draining algorithm is proposed. For the <b>maximum</b> <b>flow</b> {{problem in this}} letter. Unlike other augmenting path based algorithms which augment gradually the flow from zero-flow to the <b>maximum</b> <b>flow,</b> the proposed algorithm drains the redundant capacities out of the network to achieve the <b>maximum</b> <b>flow.</b> Experimental results shown efficiency of the proposed algorithm in near the high efficiency saturated network, thought it has a same computational complex with the traditional augmenting path approach for regular flow networks...|$|R
40|$|We {{study the}} <b>maximum</b> <b>flow</b> problem in {{directed}} H-minor-free graphs where H {{can be drawn}} in the plane with one crossing. If a structural decomposition of the graph as a clique-sum of planar graphs and graphs of constant complexity is given, we show that a <b>maximum</b> <b>flow</b> can be computed in O(n log n) time. In particular, <b>maximum</b> <b>flows</b> in directed K 3, 3 -minor-free graphs and directed K 5 -minor-free graphs can be computed in O(n log n) time without additional assumptions. Submitted...|$|R
