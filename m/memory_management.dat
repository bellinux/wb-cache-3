3300|256|Public
5|$|Python {{features}} a dynamic type system and automatic <b>memory</b> <b>management</b> and supports multiple programming paradigms, including object-oriented, imperative, functional programming, and procedural styles. It {{has a large}} and comprehensive standard library.|$|E
5|$|Each {{background}} processor {{consisted of}} a computation section, a control section and local memory. The computation section performed 64-bit scalar, floating point and vector arithmetic. The control section provided instruction buffers, <b>memory</b> <b>management</b> functions, and a real-time clock. 16 kwords (128 kbytes) of high-speed local memory was incorporated into each background processor for use as temporary scratch memory.|$|E
5|$|Once Perl code is compiled, {{there is}} {{additional}} overhead during the execution phase that typically isn't present for programs written in compiled languages such as C or C++. Examples of such overhead include bytecode interpretation, reference-counting <b>memory</b> <b>management,</b> and dynamic type-checking.|$|E
5000|$|Translation <b>Memory</b> (TM) <b>management</b> and leveraging, {{including}} multilingual TMs, and {{the ability}} to leverage from multiple TMs ...|$|R
5000|$|... artists (creativity, {{stage fright}} <b>management,</b> <b>memory,</b> expression…) ...|$|R
5000|$|Centralized and {{simplified}} Translation <b>memory</b> and terminology <b>management</b> ...|$|R
5|$|Python uses dynamic typing and {{a mix of}} {{reference}} counting and a cycle-detecting garbage collector for <b>memory</b> <b>management.</b> An important feature of Python is dynamic name resolution (late binding), which binds method and variable names during program execution.|$|E
5|$|All {{versions}} of Perl do automatic data-typing and automatic <b>memory</b> <b>management.</b> The interpreter knows {{the type and}} storage requirements of every data object in the program; it allocates and frees storage for them as necessary using reference counting (so it cannot deallocate circular data structures without manual intervention). Legal type conversions — for example, conversions from number to string — are done automatically at run time; illegal type conversions are fatal errors.|$|E
5|$|In PowerPC-based Macintoshes, {{the boot}} process {{starts with the}} {{activation}} of BootROM, the basic Macintosh ROM, which performs a Power On Self Test to test hardware essential to startup. On the passing of this test, the startup chime is played {{and control of the}} computer is passed to OpenFirmware. OpenFirmware initializes the Random Access Memory, <b>Memory</b> <b>Management</b> Unit and hardware necessary for the ROM's operation. The OpenFirmware then checks settings, stored in NVRAM, and builds a list of all devices on a device tree by gathering their stored FCode information.|$|E
5000|$|... {{technological}} competence, {{especially in}} handling translation <b>memories</b> and terminology <b>management</b> ...|$|R
50|$|DataBlitz is {{a general}} purpose main <b>memory</b> {{database}} <b>management</b> system, developed by Lucent Bell Labs Research from 1993 to 1995. It replaced various home-grown database products used throughout Lucent beginning in 1997.|$|R
40|$|International audienceOn {{numerical}} scientific High Performance Computing (HPC), Non-Uniform Memory Access (NUMA) platforms are now commonplace. On such platforms, the <b>memory</b> affinity <b>management</b> {{remains an}} important concern {{in order to}} overcome the memory wall problem. Prior solutions have presented some drawbacks such as machine dependency and a limited set of memory policies. This paper introduces Minas, a framework which provides either explicit or automatic <b>memory</b> affinity <b>management</b> with architecture abstraction for ccNUMAs. We evaluate our solution on two ccNUMA platforms using two geophysics parallel applications. The results show some performance improvements in comparison with other solutions available for Linux...|$|R
5|$|Perl's text-handling {{capabilities}} can be {{used for}} generating SQL queries; arrays, hashes, and automatic <b>memory</b> <b>management</b> make it easy to collect and process the returned data. For example, in Tim Bunce's Perl DBI application programming interface (API), the arguments to the API can be the text of SQL queries; thus it is possible to program in multiple languages at the same time (e.g., for generating a Web page using HTML, JavaScript, and SQL in a here document). The use of Perl variable interpolation to programmatically customize each of the SQL queries, and the specification of Perl arrays or hashes as the structures to programmatically hold the resulting data sets from each SQL query, allows a high-level mechanism for handling large amounts of data for post-processing by a Perl subprogram.|$|E
25|$|Cooperative <b>memory</b> <b>management,</b> {{used by many}} early {{operating}} systems, {{assumes that}} all programs make voluntary use of the kernel's memory manager, and do not exceed their allocated memory. This system of <b>memory</b> <b>management</b> is almost never seen any more, since programs often contain bugs which can cause them to exceed their allocated memory. If a program fails, it may cause memory used {{by one or more}} other programs to be affected or overwritten. Malicious programs or viruses may purposefully alter another program's memory, or may affect the operation of the operating system itself. With cooperative <b>memory</b> <b>management,</b> it takes only one misbehaved program to crash the system.|$|E
25|$|A common {{error is}} {{to attempt to}} use a delete {{expression}} to delete the object. This results in the wrong operator delete function being called. Dewhurst recommends two strategies for avoiding this error. The first {{is to ensure that}} any custom allocators rely upon the Standard C++ library's global, non-placement, operator new, and are thus nothing more than simple wrappers around the C++ library's <b>memory</b> <b>management.</b> The second is to create new and delete functions for individual classes, and customize <b>memory</b> <b>management</b> via class function members rather than by using the placement syntax.|$|E
50|$|Memsource, {{headquartered}} in Prague, the Czech Republic, provides a cloud-based translation environment {{and is a}} type of CAT tool. Memsource Cloud includes translation <b>memory,</b> terminology <b>management,</b> quality assurance, integrated machine translation and a web-based as well as desktop translator’s workbench.|$|R
40|$|Kernel {{architectures}} • Processes and threads • Real-time & non-RT scheduling • Operating {{system and}} hardware concurrency issues • <b>Memory,</b> I/O <b>management,</b> and device drivers • Examples drawn from current RTOS and embedded platforms • Theoretical modeling framework for RT systems • Formal RT specification...|$|R
50|$|In Intel systems, <b>memory</b> timings and <b>management</b> {{are handled}} by the Memory Reference Code (MRC), {{a part of the}} BIOS.|$|R
25|$|An MMU {{effectively}} performs virtual <b>memory</b> <b>management,</b> handling at {{the same}} time memory protection, cache control, bus arbitration and, in simpler computer architectures (especially 8-bit systems), bank switching.|$|E
25|$|According to its creator, Ruby was {{influenced}} by Perl, Smalltalk, Eiffel, Ada, and Lisp. It supports multiple programming paradigms, including functional, object-oriented, and imperative. It also has a dynamic type system and automatic <b>memory</b> <b>management.</b>|$|E
25|$|Although any {{programming}} language {{can be used}} on the server to process a form's data, the most commonly used languages are scripting languages, which tend to have stronger string handling functionality than {{programming language}}s such as C, and also have automatic <b>memory</b> <b>management</b> which helps to prevent buffer overrun attacks.|$|E
40|$|A {{multi-peer}} system using a standard-based PCI Express ® multi-port {{switch as}} the System Interconnect {{was described in}} an IDT white paper by Kwok Kong [1]. That white paper described the different address domains existing in the Root Processor and the Endpoint Processor, <b>memory</b> map <b>management,</b> enumeratio...|$|R
50|$|Kernel: Provides {{high level}} access to <b>memory</b> and process <b>management,</b> {{and access to}} the file system. Consists of KRNL386.EXE, KERNEL32.DLL, and VWIN32.VXD.|$|R
40|$|Optimizations {{aimed at}} {{improving}} the efficiency of on-chip memories are extremely important. We propose a compiler-controlled dynamic on-chip scratch-pad <b>memory</b> (SPM) <b>management</b> framework that uses both loop and data transformations. Experimental results obtained using a generic cost model indicate significant reductions in data transfer activity between SPM and off-chip memory. ...|$|R
25|$|In September 2016, Dolphin's {{developers}} {{announced the}} emulator was {{now able to}} boot all official GameCube titles. The last title to be supported for boot-up, , had been particularly difficult to emulate due to the game's use of the <b>memory</b> <b>management</b> unit. Also they announced that they removed Triforce emulation, because of no maintenance in the Triforce emulation's code.|$|E
25|$|The AllCard, an add-on <b>memory</b> <b>management</b> {{unit for}} XT-class computers, allowed normal memory to be mapped into the A0000-EFFFF (hex) address range, giving up to 952 KB for DOS programs. Programs such as Lotus 1-2-3, which {{accessed}} video memory directly, {{needed to be}} patched to handle this memory layout. Therefore, the 640 KB barrier was removed {{at the cost of}} hardware compatibility.|$|E
25|$|If {{a program}} tries to access memory that isn't {{in its current}} range of {{accessible}} memory, but nonetheless has been allocated to it, the kernel is interrupted {{in the same way}} as it would if the program were to exceed its allocated memory. (See section on <b>memory</b> <b>management.)</b> Under UNIX this kind of interrupt is referred to as a page fault.|$|E
5000|$|In 1972, {{he moved}} his family to Edina Minnesota Edina, Minnesota where he founded Effective Learning Systems, Inc. http://effectivelearningsystems.com/ He claims to have {{personally}} taught over 50,000 people techniques for relaxation, <b>memory,</b> stress <b>management,</b> controlling habits, goal achievement and self-esteem through seminars conducted for corporations, government agencies, and the general public.http://www.efflearn.com/success_stories.php ...|$|R
50|$|Periodicity {{checking}} is, of course, a trade-off. The need {{to remember}} points costs <b>memory</b> and data <b>management</b> instructions, whereas it saves computational instructions.|$|R
50|$|Modern-day game {{consoles}} and videogames, {{starting with the}} PC-Engine, all have a minimal BIOS that also provides some interactive utilities such as <b>memory</b> card <b>management,</b> audio or video CD playback, copy protection and sometimes carry libraries for developers to use etc. Few of these cases, however, would qualify as a true operating system.|$|R
25|$|Windows 2.0 was {{released}} in December 1987, and was more popular than its predecessor. It features several improvements to the user interface and <b>memory</b> <b>management.</b> Windows 2.03 changed the OS from tiled windows to overlapping windows. The result of this change led to Apple Computer filing a suit against Microsoft alleging infringement on Apple's copyrights. Windows 2.0 also introduced more sophisticated keyboard shortcuts and could make use of expanded memory.|$|E
25|$|In minimal {{microkernel}} {{just some}} very basic policies are included, and its mechanisms allows what is running {{on top of}} the kernel (the remaining part of the operating system and the other applications) to decide which policies to adopt (as <b>memory</b> <b>management,</b> high level process scheduling, file system management, etc.). A monolithic kernel instead tends to include many policies, therefore restricting the rest of the system to rely on them.|$|E
25|$|Windows NT {{kernel mode}} has {{full access to}} the {{hardware}} and system resources of the computer and runs code in a protected memory area. It controls access to scheduling, thread prioritization, <b>memory</b> <b>management</b> and the interaction with hardware. The kernel mode stops user mode services and applications from accessing critical areas of the operating system {{that they should not}} have access to; user mode processes must ask the kernel mode to perform such operations on their behalf.|$|E
40|$|In this document, we {{introduce}} Minas, a <b>memory</b> affinity <b>management</b> {{framework for}} cache-coherent NUMA Non-Uniform Memory Access) platforms, which provides either explicit <b>memory</b> affinity <b>management</b> or automatic one with efficiency and architecture abstraction for numerical scientic applications. The explicit tuning {{is based on}} an API called MAi (Memory Affinity interface) which provides simple functions to manage allocation and data placement using an extensive set of memory policies. An automatic tuning mechanism is provided by the preprocessor named MApp (Memory Anity preprocessor). MApp analyses both the application source code and the target cache-coherent NUMA platform characteristics in order to automatically apply MAi functions at compile time. Minas efficiency and architecture abstraction have been evaluated on two cache-coherent NUMA platforms using three numerical scientic HPC applications. The results have shown signicant gains when compared to other solutions available on Linux (First-touch, libnuma and numactl) ...|$|R
40|$|The AMD Élan SC 400 Evaluation Board {{provides}} a rich hardware testbed for mobile, handheld, embedded, and consumer electronics applications. With its built-in support for matrix keyboards, LCD displays, PC cards, multiple banks of Flash <b>memory,</b> power <b>management,</b> VL bus video, ISA, and on-board UART and parallel ports, the board {{makes it possible}} to exercise thes...|$|R
40|$|In {{this study}} we present the {{architecture}} for use in high-performance switching networks with support quality of service (QoS) guarantees. Quality of services guarantees in terms of delay, through-put and loss rate can be provided by using mechanism's support like scheduling and buffer management at switching architecture in packet switching networks. Our architecture {{is based on a}} new data structure for the scheduling and <b>memories</b> <b>management</b> which is the circular linked list and the pipeline for the active queues elements. In addition to being very fast, the architecture also scales very well to a large number of priority levels and to large queue size. We give {{a detailed description of the}} block that support QoS guarantees. However our proposed architecture is composed of three parts: input controller, backplane and output controller. And we give the corresponding algorithms and the corresponding implementation of this architecture...|$|R
