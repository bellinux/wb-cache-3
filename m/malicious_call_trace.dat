1|770|Public
50|$|Malicious caller {{identification}} facility, also called <b>malicious</b> <b>call</b> <b>trace</b> or caller activated <b>malicious</b> <b>call</b> <b>trace,</b> when subscribed or enabled, works by allowing {{a phone call}} recipient to mark or flag the preceding phone call connection as malicious (i.e. harassing, threatening, obscene, etc.) The phone system will then automatically trace the call by flagging station to station billing and routing data including start and end times. The call trace is not dependent upon call duration (as envisioned in dramatic movie plots) and will record all meta-data regardless of source conditions - even if the call was made from an unlisted number, a payphone or a number with {{caller identification}} disabled. To protect privacy the resulting trace data is only made available to law enforcement.|$|E
30|$|The Hybrid Virtual IDS is a {{solution}} that leverages {{the strengths of the}} cloud and improves upon the previous Snort implementation [27]. The approach combines resilience of a virtual IDS and the versatility offered by a host based IDS. This is possible through the use of integrity checking [28] and system <b>call</b> <b>trace</b> analysis [29]. Integrity checking is a static detection process in which a changed file is compared to a gold standard to determine if the change is <b>malicious.</b> System <b>call</b> <b>trace</b> analysis dynamically flags anomalous system call behavior as potentially dangerous. These two approaches are implemented inside of a virtual machine to provide an isolated environment. A custom hypervisor is then used to ensure the isolation between all virtual machines. To provide functionality to the IDS, the hypervisor has hooks that allow the inspection of other guest virtual machines running on the hypervisor. This allows the hybrid virtual IDS to remain isolated from other running virtual machines, while still allowing it to access data from the virtual machines it is monitoring. This technique performed well in testing conducted by the authors of the Hybrid Virtual IDS, but returned unexpected performance results: as the IDS decreases the length of time between inspecting of the monitored virtual machine, the workload processing time did not increase linearly as to be expected and instead became erratic. The cause of this erratic performance is open to additional research.|$|R
50|$|During 2006/2007 {{the ward}} of King's Cross {{had the most}} <b>malicious</b> <b>calls,</b> with over 40 against a total for the borough of 161.|$|R
5000|$|There are {{two types}} of <b>call</b> <b>tracing.</b> Permanent <b>call</b> <b>tracing</b> permits <b>tracing</b> of all <b>calls.</b> On-demand <b>call</b> <b>tracing</b> permits tracing, upon request, of a {{specific}} call, provided that the called party dials a designated code immediately after the <b>call</b> to be <b>traced</b> is disconnected immediately.|$|R
50|$|There {{was also}} an {{increase}} of <b>malicious</b> <b>calls,</b> with 53 being noted in that year. It was a worrying trend that was to continue until 1956/57.|$|R
50|$|The forward {{rules are}} UTID suffix match (<b>called</b> <b>tracing</b> rule in this paper) and {{namespace}} match (<b>called</b> <b>tracing</b> track in this paper). The underlying protocol of IDTP may be TCP, UDP, UDP multicast, HTTP, HTTPS, Web Service, or local handling without forwarding.|$|R
40|$|Abstract. Signature-based malware {{detection}} {{will always}} be a step behind as novel malware cannot be detected. On the other hand, machine learning-based methods are capable of detecting novel malware but classification is frequently done in an offline or batched manner and is often associated with time overheads that make it impractical. We propose an approach that bridges this gap. This approach makes use of a support vector machine (SVM) to classify system <b>call</b> <b>traces.</b> In contrast to other methods that use system <b>call</b> <b>traces</b> for malware detection, our approach makes use of a string kernel to make better use of the sequential information inherent in a system <b>call</b> <b>trace.</b> By classifying system <b>call</b> <b>traces</b> in small sections and keeping a moving average over the probability estimates produced by the SVM, our approach is capable of detecting malicious behavior online and achieves great accuracy...|$|R
50|$|Many {{application}} developers compose SQL {{statements by}} concatenating strings {{and do not}} use prepared statement; {{in this case the}} application is susceptible to a SQL injection attack. The technique transforms an application SQL statement from an innocent SQL <b>call</b> to a <b>malicious</b> <b>call</b> that can cause unauthorized access, deletion of data, or theft of information.|$|R
50|$|Malicious caller identification, {{activated}} by Vertical service code Star codes *57, is an upcharge fee subscription service offered by telephone company providers which, when dialed immediately after a <b>malicious</b> <b>call,</b> records meta-data for police follow-up. A police report must be filed after each use, as law enforcement will only {{act on the}} trace once a formal police report is filed {{in regard to the}} call.|$|R
50|$|In Canada, {{the service}} is usually marketed as <b>call</b> <b>trace,</b> and fees {{generally}} only apply when {{the service is}} used.|$|R
40|$|Abstract. <b>Call</b> <b>traces</b> {{can provide}} {{detailed}} {{insight into the}} operation of distributed embedded systems. Developers inspect traces to understand and debug systems using manual and automatic techniques such as data mining. Correlation of traces between nodes provides a network level view of system. These traces are typically gathered by logging a globally unique identifier for each called function. Unfortunately, this naive <b>call</b> <b>trace</b> gathering technique results in excessive consumption of the limited memory, bandwidth, and energy resources available in wireless sensor networks. This paper proposes three new <b>call</b> <b>trace</b> gathering techniques that are designed specifically for the computing platforms with extreme resource constraints. The first technique uses local name spaces and caller side logging to significantly reduce the bit size of function identifiers. The second technique reconstructs <b>call</b> <b>traces</b> from a log of the runtime control flow decisions made by a program. The third technique performs a novel reduction over a program’s control flow graph to limit logging to control flow nodes effecting runtime call decisions. Our work automates the insertion of logging statements into source code for all the techniques described above. Our experimental results show promising outlook where two of the techniques reduced {{the size of the}} log to less than 15 % of traces produced by traditional methods. These savings make the new <b>call</b> <b>trace</b> capturing techniques attractive additions to the toolbox employed by developers and users of wireless sensor networks. ...|$|R
50|$|Products include network <b>call</b> <b>trace,</b> service assurance, {{customer}} experience management, microwave, radio frequency (RF), and optical signal generators, spectrum analyzers, and network analyzers.|$|R
50|$|Other {{fields that}} are added {{on top of}} the header by the {{receiving}} server may be <b>called</b> <b>trace</b> fields, in a broader sense.|$|R
50|$|In October 2008 The British Red Cross {{created a}} serious ARG <b>called</b> <b>Traces</b> of Hope {{to promote their}} {{campaign}} about civilians caught up in conflict.|$|R
50|$|In 2008, {{the first}} {{installment}} of the prequel series The Alchymist's Legacy was published, which is <b>called</b> <b>Tracing</b> the Shadow and is set primarily in Francia.|$|R
40|$|A {{representation}} π of {{a locally}} compact group G is <b>called</b> <b>trace</b> class, if for every test function f the induced operator π(f) is a trace class operator. The group G is <b>called</b> <b>trace</b> class, if every π∈ G is trace class. We show that trace class groups are type I {{and give a}} criterion for semi-direct products to be trace class and show that a representation π is trace class {{if and only if}} π⊗π' can be realized in the space of distributions...|$|R
40|$|We {{describe}} {{a novel approach}} to monitoring high level behaviors using concepts from AI planning. Our goal is to understand what a program is doing based on its system <b>call</b> <b>trace.</b> This ability is particularly important for detecting malware. We approach this problem by building an abstract model of the operating system using the STRIPS planning language, casting system calls as planning operators. Given a system <b>call</b> <b>trace,</b> we simulate the corresponding operators on our model and by observing {{the properties of the}} state reached, we learn {{about the nature of the}} original program and its behavior. Thus, unlike most statistical detection methods that focus on syntactic features, our approach is semantic in nature. Therefore, it is more robust against obfuscation techniques used by malware that change the outward appearance of the trace but not its effect. We demonstrate the efficacy of our approach by evaluating it on actual system <b>call</b> <b>traces...</b>|$|R
50|$|There {{are four}} fire {{stations}} within the London Borough of Ealing. Southall and Northolt have similar-sized station grounds and both house two pumping appliances. Southall attended some 700 incidents {{more than their}} Northolt counterparts in 2006/07. Ealing, with two pumping appliances, and Acton, one pump and two fire investigation units, are the other two appliances in the area. Interestingly, the ward of Northfield had over forty <b>malicious</b> <b>calls</b> made from it, {{more than twice as}} any other ward within Ealing.|$|R
30|$|The {{analysis}} of integrity performance (e.g., {{in terms of}} user throughput) in live networks has also gained attention in the research community. This kind of analysis {{can be carried out}} by means of field trials [22 – 24] or by using <b>call</b> <b>traces</b> (or MDT) [25]. However, in the case of field trials, the conclusions may not be representative of the real QoS experienced by the users. In the case of <b>call</b> <b>traces,</b> the correlation analysis presented in [25] is rather limited {{in terms of the number}} of radio measurements employed and no method for root-cause analysis was applied.|$|R
40|$|This paper {{focuses on}} {{intrusion}} detection and countermeasures {{with respect to}} widely-used operating systems and networks. The design and architecture of an intrusion detection system built from distributed agents is proposed to implement an intelligent system on which data mining can be performed to provide global, temporal views of an entire networked system. A starting point for agent intelligence in our system is the research into the use of machine learning over system <b>call</b> <b>traces</b> from the privileged sendmail program on UNIX. We use a rule learning algorithm to classify the system <b>call</b> <b>traces</b> for intrusion detection purposes and show the results...|$|R
30|$|Recently, {{telecommunications}} fraud detection {{has become}} a hot research direction gradually. Some researchers have used blacklisting and whitelisting methods to prevent telecommunications fraud (Jiang et al. 2012; Zhang & Fischer-Hubner  2011; Patankar et al.  2008; Wang et al. 2007). More researchers use machine learning techniques {{to determine if they}} are malicious. They extract a variety of features for <b>malicious</b> <b>call</b> detection, and most of the features include telephone numbers, call-time, domain names, call networks, and the actions of listeners and callers, etc. (Kolan et al. 2008; Azad & Morla  2011; Azad & Morla 2013; Jiang et al  2013; Leontjeva et al. 2013; Rebahi & Sisalem 2005; Rebahi et al. 2006; Sorge & Seedorf 2009; Srivastava & Schulzrinne 2004; Wang et al. 2013; Wu et al. 2009; Zhang and Gurtov 2009). In 2015, Subudhi and Panigrahi (2015) published their research on telecommunication fraud using the features of a telephony communication as the input and Quarter-Sphere Support Vector Machine to distinguish fraudulent calls. The input features include call duration, call type, call frequency, location and time, and it has achieved good recognition accuracy. Then, in 2017, they used a type of C-means clustering for telecommunication fraud detection again (Subudhi and Panigrahi 2017), and got a good result as well. Coincidently, Li et al. (2018) published an article on telecommunication fraud detection in recently as well. They used machine learning algorithm to detect <b>malicious</b> <b>calls,</b> and they extracted features of calls just similar to S. Subudhi et al. It seems difficult for these approaches to detect fraudulent calls with unlabeled new numbers. On the other hand, the researches on the content of conversations are rare. The work of Miramirkhani et al. (2017) is representative, and they conducted the research on the technical support scams. They recorded and analyzed the voice content of the phishing telephone fraud and malicious webpages which triggered such scams. Though they eventually put forward simple functions to help users keep away from malicious web pages, their approach did not help avoiding <b>malicious</b> <b>calls</b> directly.|$|R
50|$|In telecommunication, <b>call</b> <b>tracing</b> is a {{procedure}} that permits an entitled user to be informed about the routing of data for an established connection, identifying the entire route from the origin to the destination.|$|R
40|$|Abstract—Automating the {{localization}} {{of software}} bugs {{that do not}} lead to crashes is a difficult task that has drawn the attention of several researchers. Several popular methods follow the same approach; function <b>call</b> <b>traces</b> are collected and represented as graphs, which are subsequently mined using subgraph mining algorithms {{in order to provide}} a ranking of potentially buggy functions-nodes. Recent work has indicated that the scalability of state-of-the-art methods can be improved by reducing the graph dataset using tree edit distance algorithms. The <b>call</b> <b>traces</b> that are closer to each other, but belong to different sets, {{are the ones that are}} most significant in localizing bugs. In this work, we further explore the task of selecting the most significant traces, by proposing different <b>call</b> <b>trace</b> selection techniques, based on the Stable Marriage problem, and testing their effectiveness against current solutions. Upon evaluating our methods on a real-world dataset, we prove that our methodology is scalable and effective enough to be applied on dynamic bug detection scenarios. Keywords-automated debugging, dynamic bug detection, frequent subgraph mining, tree edit distance, Stable Marriage problem. I...|$|R
5|$|When {{displayed}} in museum exhibitions, the interactive DVD installation is <b>called</b> <b>Tracing</b> the Decay of Fiction. The presentation {{is shown in}} a continuous loop and allows museum patrons to explore the narrative and create their own stories.|$|R
50|$|Because the {{algorithm}} traces the implicit curve it is <b>called</b> <b>tracing</b> algorithm.The algorithm traces only connected {{parts of the}} curve. If the implicit curve consists of several parts {{it has to be}} started several times with suitable starting points.|$|R
5000|$|Campaigns {{with both}} MTV and Cartoon Network {{including}} a film {{aimed at the}} UK's music festival fans http://malarianomore.org.uk/mnmtv/malaria-no-more-uk/music-to-save-lives-2 {{and a series of}} cartoons featuring a <b>malicious</b> mozzy <b>called</b> Ziii http://www.beatthemozzy.com ...|$|R
3000|$|The gain in {{accuracy}} {{achieved by}} the proposed method is {{at the cost of}} increasing the operational complexity due to the management of a larger amount of information, given by the <b>call</b> <b>traces.</b> To estimate the computational cost, let C [...]...|$|R
50|$|M-Phazes {{was born}} on 1 February 1983. He went to Miami High School on the Gold Coast and lived in Burleigh Heads, Queensland. His first rap group was <b>called</b> <b>Trace</b> Elements which also {{consisted}} of Jake Dangerous, Tactic One and Syntax.|$|R
50|$|The {{pairs of}} letters in an {{independency}} relation induce an equivalence relation {{on the free}} monoid of all possible strings of finite length. The elements of the equivalence classes induced by the independency are <b>called</b> <b>traces,</b> and are studied in trace theory.|$|R
30|$|At {{user level}} {{a series of}} {{magnitudes}} extracted from <b>call</b> <b>traces</b> are aggregated in order to calculate different metrics, e.g., the experimented average SNR in a dedicated channel or the voice call drop rate. These metrics are {{the starting point of}} the SatiX process calculation.|$|R
50|$|Applications {{served by}} probes include {{solutions}} for inter-carrier billing, revenue loss (by-pass/phantom traffic and analysis services), fraud prevention, billing, local number portability, quality of service, surveillance (global <b>call</b> <b>trace),</b> maintenance (protocol analysis), traffic engineering (link and trunk forecasting), alarming and SS7, Sigtran and IS-41 monitoring.|$|R
5000|$|Improving {{traceability}} (i.e. most languages offer ways {{to obtain}} the <b>call</b> <b>trace</b> which includes {{the names of the}} involved subroutines and perhaps even more information such as file names and line numbers); by not decomposing the code into subroutines, debugging would be impaired severely ...|$|R
40|$|Reference based {{analysis}} (RBA) {{is a novel}} {{data mining}} tool for exploring a test data set {{with respect to a}} reference data set. The power of RBA lies in it ability to transform any complex data type, such as symbolic sequences and multivariate categorical data instances, into a multivariate continuous representation. The transformed representation not only allows visualization of the complex data, which cannot be otherwise visualized in its original form, but also allows enhanced anomaly detection in the transformed feature space. We demonstrate the application of the RBA framework in analyzing system <b>call</b> <b>traces</b> and show how the transformation results in improved intrusion detection performance over state of art data mining based intrusion detection methods developed for system <b>call</b> <b>traces...</b>|$|R
40|$|A {{trace of}} a workload's system calls can be {{obtained}} with minimal interference, {{and can be used}} to drive repeatable experiments to evaluate system configuration alternatives. Replaying system <b>call</b> <b>traces</b> alone sometimes leads to inaccurate predictions because paging, and access to memorymapped files, are not modelled...|$|R
50|$|Ray Bradbury had at {{one time}} written {{a story about a}} {{telephone}} switch box that gained sentience. Its first order of business in the world, stalking. Eventually the person documenting the <b>calls</b> <b>traced</b> it down to a specific phone box and was summarily executed by said box through electrocution.|$|R
50|$|The {{following}} code {{demonstrates how}} to hook functions that are imported from another module.This {{can be used}} to hook functions in a different process from the calling process. For this the code must be compiled into a DLL file then loaded into the target process using any method of DLL injection.The advantage of this method is that it is less detectable by antivirus software and/or anti-cheat software, one might make this into an external hook that doesn't make use of any <b>malicious</b> <b>calls.</b> The Portable Executable header contains the Import Address Table (IAT), which can be manipulated as shown in the source below. The source below runs under Microsoft Windows.|$|R
