8|942|Public
50|$|X90cw - <b>Mobile</b> <b>thin</b> <b>client</b> running Windows Embedded Standard 2009 {{operating}} system with an 11.6” display.|$|E
50|$|X90mW - <b>Mobile</b> <b>thin</b> <b>client</b> running Windows Embedded Standard 2009 {{operating}} system, dual-core processor, and a 14” display.|$|E
40|$|This diploma thesis {{deals with}} the issue of the {{development}} of <b>mobile</b> <b>thin</b> <b>client</b> application which is able to manage commercial infrastructure cloud service. The introduction section provides an overview of the necessary terminology and presents the problem domain that is a subject of this thesis. Besides the project itself, of which result is the main output of this work, is also the part dedicated to research of current theses, school information resources, guidelines, recommendations and methodologies that covers topics of design and implementation of graphical user interfaces for mobile devices, especially for those that have the Android operating system installed. Information obtained on basis of the research is after used as a default knowledge base for design and implementation of the presentation layer of the previously mentioned application. The next aim of this thesis is to make analysis of requirements for new application which is being developed. The requirements are then transformed into conceptual design, to which is bound the explanation of implementation of individual application layers. UML was mainly used for the modeling of the application parts design in environment of the Sybase PowerDesigner. The programming process was performed by usage of the development environment called Eclipse SDK. Benefit of this diploma thesis lies in the possibility of reusing its concentrated knowledge resulting from the research dealing with the problems of creating GUI for mobile devices. Programmer, who is untouched in this specialization, {{will be able to use}} this part of the thesis as a critical study material which has been verified in practice. Cloud infrastructure solution providers can find there an inspiration for their own <b>mobile</b> <b>thin</b> <b>client</b> application...|$|E
40|$|Abstract — Streaming {{video to}} mobile devices like {{cellular}} phones {{is an important}} emerging application. However, <b>mobile,</b> <b>thin</b> <b>clients</b> have limited capabilities and offer restricted interfaces to the end-user and the Telco infrastructure has significant technical barriers which limit {{the introduction of new}} protocols. This paper describes our design of an end-to-end interactive video service. We outline the technological and user-interaction challenges of providing one typical type of interactive controls – time-scale modification (TSM), when streaming compressed audio-video data within the Telco infrastructure in a way that maintains audio-video synchronization and respects the video frame- and bit-rate contracts. I...|$|R
40|$|We {{demonstrate}} how XML and related technologies {{can be used}} for code mobility at any granularity, thus overcoming the restrictions of existing approaches. By not fixing a particular granularity for mobile code, we enable complete programs as well as individual lines of code to be sent across the network. We define the concept of incremental code mobility as the ability to migrate and add, remove, or replace code fragments (i. e., increments) in a remote program. The combination of fine-grained and incremental migration achieves a previously unavailable degree of flexibility. We examine the application of incremental and fine-grained code migration to a variety of domains, including user interface management, application management on <b>mobile</b> <b>thin</b> <b>clients,</b> for example PDAs, and management of distributed documents. Keywords Incremental Code Migration, XML Technologies 1 INTRODUCTION The increasing popularity of Java and the spread of Webbased technologies are contributing to a growing [...] ...|$|R
40|$|International audienceCurrent {{remote display}} {{technologies}} for <b>mobile</b> <b>thin</b> <b>clients</b> convert practically {{all types of}} graphical content into sequences of images rendered by the client. Consequently, important information concerning the content semantics is lost. The present paper goes beyond this bottleneck by developing a semantic multimedia remote display. The principle consists of representing the graphical content as a real-time interactive multimedia scene graph. The underlying architecture features novel components for scene-graph creation and management, {{as well as for}} user interactivity handling. The experimental setup considers the Linux X windows system and BiFS/LASeR multimedia scene technologies on the server and client sides, respectively. The implemented solution was benchmarked against currently deployed solutions (VNC and Microsoft-RDP), by considering text editing and WWW browsing applications. The quantitative assessments demonstrate: (1) visual quality expressed by seven objective metrics, e. g., PSNR values between 30 and 42 dB or SSIM values larger than 0. 9999; (2) downlink bandwidth gain factors ranging from 2 to 60; (3) real-time user event management expressed by network round-trip time reduction by factors of 4 - 6 and by uplink bandwidth gain factors from 3 to 10; (4) feasible CPU activity, larger than in the RDP case but reduced by a factor of 1. 5 with respect to the VNC-HEXTILE...|$|R
40|$|Under the {{framework}} of the FP- 7 European MobiThin project, the present study addresses the issue of remote display representation for <b>mobile</b> <b>thin</b> <b>client.</b> The main issue is to design a compressing algorithm for heterogeneous content (text, graphics, image and video) with low-complex decoding. As a first step in this direction, we propose a novel software architecture, based on BiFS - binary format for scenes (MPEG- 4 Part 11). On the server side, the graphical content is parsed, converted and binary encoded into the BiFS format. This content is then streamed to the terminal, where it is played on a simple MPEG player. The viability of this solution is validated by comparing it to the most intensively used wired solutions, e. g. VNC - virtual network computing...|$|E
40|$|<b>Mobile</b> <b>thin</b> <b>client</b> {{computing}} is an enabler for {{the execution}} of demanding applications from mobile handhelds. In thin client computing, the application is executed on remote servers and the mobile handheld only has to display the graphical updates and send input from the user to the remote execution environment. To guarantee a high user experience in a mobile environment, a Service Management Framework is required to prevent users observing lower Quality of Experience due {{to changes in the}} available network, server and client resources. Therefore, the Service Management Framework monitors the environment and the Self Management component intervenes when necessary, e. g. by adapting the thin client protocol settings or moving a user session from one server to another. The design of the Self Management component is presented and the performance is evaluated...|$|E
40|$|The {{emergence}} of mobile cloud computing (MCC) brings benefits to mobile users and cloud providers. However, {{due to the}} inherent limitations of the device such as battery life time, CPU and memory capacity, a <b>mobile</b> <b>thin</b> <b>client</b> device (e. g. smart phones, tablets, iWatch, Google Glass, etc) cannot {{meet the requirements of}} some demanding applications. To alleviate this limitation, the mobile device should cooperate with external resources to increase its performance. Recently, current research approaches have been unable to offer an efficient, seamless computing experience. In this paper, we present a comprehensive thin-thick client collaboration that involves conventional desktop or laptop computers, known as thick clients, by allowing the thin client to borrow resources from thick clients, particularly for optimizing data distribution and utilizing MCC resources to meet Service-Level Agreements, Quality-of-Service requirements and cloud service customers' budget. Our work uses both numerical analysis and simulation to prove that our proposed architecture can improve resource allocation efficiency and achieve better performance than other existing approaches in some cases...|$|E
50|$|Sciforma, {{previously}} named PSNext, is {{an enterprise}} Project and Portfolio Management (PPM) software developed by Sciforma Corporation. Sciforma Corporation is an American software {{company based in}} San Jose, California. It is a Java web based cross-platform solution. It provides integration of portfolio, project, resource and document management and is completely configurable. The current software version is Sciforma 7.0. This version adds Single sign-on and an HTML5 interface enabling access from <b>mobile</b> devices or <b>thin</b> <b>clients.</b>|$|R
40|$|Logical {{mobility}} {{ranges from}} simple data mobility, where information is transferred, through code mobility {{that allows the}} migration of executable code, to mobile agents, in which code and data move together. Several application domains need a more exible approach to code mobility {{than the one that}} can be achieved with Java and with mobile agents in general. This exibility can either be required as a result of low network bandwidth, scarce resources, and slow or expensive connectivity, like in mobile computing settings, or scalability requirements like in applications on several thousand clients that have to be kept in sync and be updated with new code fragments. We show how to achieve more ne-grained mobility than in the approaches using mobile agents and Java class loading. We demonstrate that the unit of mobility can be decomposed from an agent or class level, if necessary, down to the level of individual statements. We can then support incremental insertion or substitution of, possibly small, code fragments and open new application areas for code mobility such as management of applications on <b>mobile</b> <b>thin</b> <b>clients,</b> for example wireless connected PDAs or mobile phones, or more in general distributed code update and management. This work builds on the formal foundation for ne-grained code mobility that was established in [3]. That paper develops a theoretical model for ne-grained mobility at the level of single statements or variables and argues that the potential of code mobility is submerged by the capability of the most commonly used language for code mobility, i. e. ...|$|R
40|$|This paper {{deals with}} {{extending}} the AR Toolkit’s functionality to allow not only small stationary setups but wide range tracking applications as well. Based on a visionary scenario of a mobile user {{walking around in}} a building with an intelligent environment, we split the AR Toolkit’s functionality in several components based on the DWARF (Distributed Wearable Augmented Reality Framework) system. Using a <b>thin</b> <b>mobile</b> <b>client</b> we describe a mechanism for a dynamic configuration according to the location context during runtime. This means that the system triggers a context change with different strategies and then gets reconfigured by the environment. We discuss {{the architecture of the}} location component, evaluate several strategies for a context change and show how environmental conditions can influence th...|$|R
40|$|Abstract—Remote desktop systems enable {{business}} {{users to}} access critical data {{located in the}} office from outside it with a <b>mobile</b> <b>thin</b> <b>client</b> or any other portable ubiquitous devices without {{having to worry about}} data leakage. However, high latency and low bandwidth in wireless-network environments may degrade the performance of remote desktop clients, such as causing slow responses to keyboard/mouse input and low speed in playing animated presentations. We therefore propose a method of transmitting data to improve the way business applications are perceived in wireless thin clients. It utilizes multiple wireless-network paths to achieve short latency in transmitting input signals and receiving responses as well as increases the throughput of large desktop images. We evaluated the performance of the proposed method using a network simulator and a real network environment. The experimental results revealed that the round trip time of a small data packet was shorter and the throughput of large amounts of data was higher than those with single network paths or existing multipath transmission algorithms...|$|E
40|$|The goal of {{this project}} has been to develop a concept for a digital {{learning}} device aimed at the primary school children in the lower grades (1 - 6). The purpose has been to raise awareness and give ideas on how the integration of digital technology in early grades can {{be a way to}} make learning more adapted both to the way the modern children approach information {{as well as to the}} skills and needs of the individual student. It also concerns the idea of a less paper-consuming education with the use of digital textbooks and electronic paper. The background research include theoretical studies on how the introduction of computers in school affect students study skills, motivation and health as well as interviews with teachers and special pedagogue. As part of the target group research a school-day observation was made in a third grade class, following them in a ordinary day in the classroom. Student were also interviewed in small groups of two or three, discussing their views on the schoolbooks, homework, workplaces and their use of computers at school and home. A overview of the market of available student computers was made and a brief insight in upcoming technologies such as e-book readers and centralized, web-based computing. The ideation and initial sketch process resulted in a concept that was refined through the means of more detailed renderings, mock-up models and shape models in foam that was tested by target group children. The concept is a multi-mode device that combine the function of a interactive e-book reader with more advanced computing functions of a <b>mobile</b> <b>thin</b> <b>client.</b> Two 8 '' screens, one flexible e-paper screen is integrated in a soft cover that protects a TFT-LCD dual mode screen with the possibility to work as both a paper-like reading screen and back-lit computer screen. The screens work together either as a two-page spread book in the reading mode or as screen and touchscreen keyboard/touchpad in the computer mode. When closed the e-paper screen is still exposed and functioning integrated in the cover, giving direct access to the device and serving as a decorative surface when the device is not used — the background image that the user chooses still shows on the e-paper screen without using any battery power. The result should be considered a concept, the purpose has been to give ideas of how new technology can be applied in future school environments. The design is made with the intention to appeal to the targetgroup but also make it open for the user to personalize the appearance of their own device. The response from the first tests that were made with sketches and models shown to children from the target group were positive, and suggested that the concept would work from a user perspective. However, further development would be needed, such as more refined designed models and functional prototypes, to really evaulate the concept. Målet med projektet har varit att skapa ett konceptförslag för en platt-form för digitala läromedel, riktad till elever i grundskolans låg- och mellanstadie. Syftet har varit att uppmärksamma och ge idéer hur man med hjälp av ny teknik bättre kan anpassa läromedel till den individuella elevens behov och förutsättningar för lärande samt hur användningen av digitala läromedel och e-papper kan skapa en bättre och mindre papperintensiv skolmiljö. I bakgrunden till projektet behandlas argument varför integrationen av digital teknik i tidig ålder är viktig för att förbereda eleven för en livslång digital kompetens och det redogörs hur studieresultat, motivation och hälsa påverkas av en mer frekvent datoranvändning i skolan, baserat på befintliga studier och intervjuer med lärare och specialpedagog. Målgruppsstudier har genomförts i form av observation av en skoldag i tredjeklass och intervjuer med elever och lärare. Kortfattat redogörs även för befintliga elevdatorer på marknaden och ny teknik som e-bokläsare och webbbaserad, centraliserad datorkraft. Resultatet är en personlig studentenhet som kombinerar funktionen av en interaktiv e-boksläsare med kapacitet till mer avancerade datorfunktioner i form av en bärbar tunn klient dator. Formatet på produktetn är anpassad till målgruppen, lätt och smidig att ta med sig i som den är eller i skolväskan och formgivningen är anpassad för att användaren själv ska kunna sätta sin personliga prägel på dess uttryck...|$|E
40|$|There are {{scenarios}} {{in mobile}} computing that {{may benefit from}} separating presentation from computation. Traditionally this separation can be achieved via tools such as VNC. However such factors as network latency and additional communication overhead can slow down the presentation of a remotely executing mobile application below acceptable performance levels, especially for domains like gaming where responses may need {{to appear to be}} instantaneous. We present RemoteMe, an architecture and Java-based prototype for mobile-client / server communication that only requires a very <b>thin</b> <b>mobile</b> <b>client.</b> We hypothesise that RemoteMe will support faster response times to user input than existing software solutions such as VNC. This paper presents a preliminary analysis of our first prototype, and experimentally compares it to an open-source mobile-based VNC system...|$|R
40|$|AbstractIn a <b>thin</b> <b>client</b> {{computing}} architecture, application processing is {{delegated to}} a remote server rather than running the application locally. User input is forwarded to the server, and the rendered images are relayed through a dedicated remote display protocol to the user's device. Thin-client computing offers the promise of easier-to-maintain computational services with reduced total cost of ownership. With the increasingly development of cloud technology, the server side of <b>thin</b> <b>client</b> architecture is able to be deployed in cloud, thus makes the full use {{of the features of}} the Cloud, for example, virtualization, flexibility, security, and dynamic management. Meanwhile the client side can also use the <b>mobile</b> <b>thin</b> device. The traditional <b>thin</b> <b>client</b> architecture, which is platform-dependant, however, limits the most benefit of the software providers and end-users. So we propose multi-platform <b>thin</b> <b>client</b> architecture, which use VNC (Virtual Network Computing) protocol and run in the cloud environment. In this architecture, both side of the service will benefit a lot. In the one hand, the end-user can use cheap, light mobile terminal which enjoy all kind of software service of different platform. In the other hand, the software provider or developer can get more benefit with more download mass and wider circulated...|$|R
40|$|We {{propose a}} server-centric {{architecture}} for P 3 P that reuses database technology for implementation, {{as opposed to}} the prevailing client-centric implementations based on specialized engines. The server-centric implementation has several advantages including: setting up the infrastructure necessary for ensuring that web sites act according to their stated policies, allowing P 3 P to be deployed in <b>thin,</b> <b>mobile</b> <b>clients</b> that are likely to dominate Internet access in the future, and allowing site owners to refine their policies based on the privacy preferences of their users. Our experiments indicate that it performs significantly better than the sole public-domain client-centric implementation and that the latency introduced by preference matching is small enough for real-world deployments of P 3 P. We believe a good future direction for P 3 P would be to standardize on the server-centric architecture {{as an alternative to the}} current client-centric architecture...|$|R
40|$|Emerging {{pervasive}} computing technologies transform {{the way we}} live and work by embedding computation in our surrounding environment. To avoid increasing complexity, and allow the user to concentrate on her tasks, applications in a {{pervasive computing}} environment must automatically adapt to their changing context, including the user state and the physical and computational environment in which they run. Solar is a middleware platform to help these "context-aware" applications aggregate desired context fom heterogeneous sources and to locate environmental services depending on the current context. By moving most of the context computation into the infrastructure, Solar allows applications to run on <b>thin</b> <b>mobile</b> <b>clients</b> more effectively. By providing an open framework to enable dynamic injection of context processing modules, Solar shares these modules across many applications, reducing application development cost and network traffic. By distributing these modules across network nodes and reconfiguring the distribution at runtime, Solar achieves parallelism and online load balancing...|$|R
50|$|A <b>thin</b> <b>client</b> is {{a minimal}} sort of <b>client.</b> <b>Thin</b> <b>clients</b> use the {{resources}} of the host computer. A <b>thin</b> <b>client</b> generally only presents processed data provided by an application server, which performs the bulk of any required data processing. A device using web application (such as Office Web Apps) is a <b>thin</b> <b>client.</b>|$|R
50|$|The Smart <b>Thin</b> <b>Client</b> {{works by}} {{connecting}} to an Application Server which generally {{does all the}} processing {{on behalf of the}} Smart <b>Thin</b> <b>Client,</b> meaning the <b>thin</b> <b>client</b> only needs to be responsible for displaying forms and taking input. This means the computer running the <b>thin</b> <b>client</b> {{does not have to be}} a very powerful computer, and it does not require a fast network connection as it is not loading data from the database - JADE <b>thin</b> <b>clients</b> are often run over a dial-up connection. This is the reason they are called <b>thin</b> <b>clients,</b> as there is not a heavy requirement on computational power to run these clients.|$|R
5000|$|SUSE Linux Enterprise <b>Thin</b> <b>Client</b> (SLETC) is a {{modified}} version of SLED targeted at <b>thin</b> <b>client</b> terminals.|$|R
40|$|<b>Thin</b> <b>Client</b> {{technology}} boasts {{an impressive}} range of financial, technical and administrative benefits. Combined with virtualisation technology, higher bandwidth availability and cheaper high performance processors, {{many believe that}} <b>Thin</b> <b>Clients</b> have come of age. But despite {{a growing body of}} literature documenting successful <b>Thin</b> <b>Client</b> deployments there remains an undercurrent of concern regarding user acceptance of this technology and a belief that greater efforts are required to understand how to integrate <b>Thin</b> <b>Clients</b> into existing, predominantly PC-based, deployments. It would be more accurate to state that the challenge facing the acceptance of <b>Thin</b> <b>Clients</b> is a combination of architectural design and integration strategy rather than a purely technical issue. Careful selection of services to be offered over <b>Thin</b> <b>Clients</b> is essential to their acceptance. Through an evolution of three case studies the user acceptance issues were reviewed and resolved resulting in a 92 % acceptance rate of the final <b>Thin</b> <b>Client</b> deployment. No significant bias was evident in our comparison of user attitudes towards desktop services delivered over PCs and <b>Thin</b> <b>Clients...</b>|$|R
50|$|Thinvent is {{a company}} {{creating}} Linux based firmware for <b>thin</b> <b>clients.</b> The company was founded in 2007. Thinvent's Thinux firmware is bundled by major manufacturers like VXL and HP with their <b>thin</b> <b>clients.</b> Thinvent also manufactures its own range of <b>thin</b> <b>clients,</b> called MicroClients.|$|R
50|$|Lineo was a <b>thin</b> <b>client</b> and {{embedded}} systems company {{spun out of}} Caldera <b>Thin</b> <b>Clients,</b> on 20 July 1999.|$|R
50|$|T50 - Compact, {{economical}} <b>thin</b> <b>client</b> running Ubuntu Linux operating system. Sets a new price/performance {{standard for}} <b>thin</b> <b>clients.</b>|$|R
5000|$|Browser access via kiosks and <b>thin</b> <b>clients</b> access. <b>Thin</b> <b>client</b> {{firmware}} for CMS {{has been}} specially developed by Thinvent Technologies.|$|R
50|$|On November 17, 2009, DisplayLink {{announced}} their first <b>Thin</b> <b>Client</b> product {{based on their}} USB 2.0 virtual graphics technology, designed for Microsoft Windows MultiPoint Server. <b>Thin</b> <b>client</b> manufacturer HP {{was the first to}} announce a product based on DisplayLink USB Graphics technology with the launch of the t100 <b>Thin</b> <b>Client.</b>|$|R
40|$|This thesis {{focuses on}} {{designing}} {{and developing a}} centralized management and configuration solution for the <b>thin</b> <b>clients</b> offered by the OldanyGroup s. r. o. company. The purpose of this application is to simplify the <b>thin</b> <b>client</b> administration and control for customers {{as well as to}} improve the competitiveness of the whole <b>thin</b> <b>client</b> solution offered by the company...|$|R
50|$|In addition, Uniface Anywhere (formerly Uniface JTi or Java <b>Thin</b> <b>Client</b> Interface) {{can deliver}} client/server Uniface {{applications}} to any computer {{connected to the}} Internet as a <b>thin</b> <b>client</b> solution.|$|R
40|$|Abstract: This paper {{explores the}} issues and the {{techniques}} of enabling multimedia applications for the <b>thin</b> <b>client</b> computing. A prototype of a video communication system based on H. 323 family of ITU-T recommendations is used to demonstrate the support of multimedia applications with a terminal server and <b>thin</b> <b>clients</b> such as Windows-based terminals. The studies on the network applications over <b>thin</b> <b>clients</b> are composed of two parts: (1) the collaborative client–server conference system and (2) the universal plug-in architecture. With the proposed architecture, an application of multi-user audio/video conference system is devised for illustrative purposes. The universal plug-in technique is devised to shift jobs from <b>thin</b> <b>clients</b> to a supporting server, thus reducing the computing overhead required by the clients. The processed result at the supporting server is transcoded to a pre-defined universal format and then {{sent back to the}} <b>thin</b> <b>client.</b> This plug-in architecture is implemented and empirically evaluated. Key Words: <b>thin</b> <b>client</b> computing, resource sharing, universal plug-in. 1...|$|R
50|$|Neoware was {{a company}} that {{manufactured}} and marketed <b>thin</b> <b>clients.</b> It also developed and marketed enterprise software, <b>thin</b> <b>client</b> appliances, and related services aimed at reducing the TCO of IT infrastructure.|$|R
50|$|In 2011, IGEL Technology {{commissioned}} {{a study from}} Faunhofer on the ecological impact of <b>thin</b> <b>clients</b> as compared to PCs. The study found that under equivalent usage, a <b>thin</b> <b>client</b> combined with a terminal server causes around 63% lower greenhouse gas emissions than a comparable desktop PC. A <b>thin</b> <b>client</b> combined with a desktop virtualization solution causes 30-42% lower greenhouse gas emissions than a comparable PC.|$|R
50|$|IGEL Technology’s product {{portfolio}} of Zero (IZ) Clients and Universal Desktop (UD) <b>thin</b> <b>clients</b> includes both traditional desktop clients and integrated LCD <b>thin</b> <b>client</b> units equipped with either Linux or Microsoft Windows operating systems.|$|R
25|$|Caldera {{was one of}} {{the major}} {{distributors}} of Linux between 1994 and 1998. In August 1998, the company split into Caldera Systems and Caldera <b>Thin</b> <b>Clients,</b> with Caldera Systems taking over the Linux systems business and Caldera <b>Thin</b> <b>Clients</b> concentrating on the <b>Thin</b> <b>Clients</b> and embedded business. The parent and shell company Caldera, Inc. ceased to exist in 2000 after a settlement with Microsoft in the Caldera v. Microsoft lawsuit.|$|R
50|$|In November 2007, {{the company}} won Europe's largest <b>Thin</b> <b>client</b> tender thus far, to supply 20,000 <b>Thin</b> <b>client</b> PC's and {{management}} software to RZF, the tax {{authority of the}} State of North Rhine-Westphalia in Germany.|$|R
40|$|<b>Thin</b> <b>Client</b> systems provide {{affordable}} solution in environments where little computation power is needed, such as academic institutes, and small and medium businesses. Existing open source <b>Thin</b> <b>Client</b> systems are however not scalable {{and have the}} server as the single point of failure. In this paper, we present the design and implementation of a server cluster backend which makes the <b>Thin</b> <b>Client</b> solution highly available and scalable. We have used LTSP (Linux Terminal Server Project) <b>Thin</b> <b>Clients</b> for our implementation but our design is generic and {{can be applied to}} other systems as well. Our design goals are to use open source software and to keep hardware cost low...|$|R
