0|4148|Public
50|$|Originally elected Member of Parliament for Bebington in 1970, Cockeram {{lost his}} seat (which he fought unsuccessfully as the renamed Bebington and Ellesmere Port) in the both 1974 general elections. Elected for Ludlow in 1979, he {{suddenly}} retired {{weeks before the}} 1987 general election following allegations of <b>multiple</b> <b>share</b> <b>applications</b> for British Telecom and British Gas.|$|R
5000|$|<b>Multiple</b> {{different}} file/image <b>sharing</b> <b>applications</b> & {{services available}} from various companies ...|$|R
40|$|AbstractWhen we {{consider}} the development in education and communication technologies, internet appears {{as the most important}} tool of communication. Web 2. 0, which is the one of the stages of development, prepared a good ground for <b>multiple</b> <b>sharing</b> <b>application</b> and personal social communication. In this article, some information is given about Wikis, one of the web 2. 0 applications; what Wiki is, its general properties, its use in education, and the problems In its use. The usage of wikis in our country and the place of wiki in teaching & learning activities and lifelong learning are discussed...|$|R
40|$|Abstract—Wireless sensor {{networks}} are evolving from dedicated application-specific platforms to integrated in-frastructure <b>shared</b> by <b>multiple</b> <b>applications.</b> <b>Shared</b> sen-sor networks offer inherent advantages {{in terms of}} flex-ibility and cost since they allow dynamic resource shar-ing and allocation among <b>multiple</b> <b>applications.</b> Such <b>shared</b> systems face the critical need for allocation of nodes to contending applications to enhance the overall Quality of Monitoring (QoM) under resource constraints. To address this need, this paper presents Utility-based Multi-application Allocation and Deployment Environmen...|$|R
50|$|For {{development}} and testing, Catalyst {{has a built-in}} simple HTTP server. For production use, Apache, lighttpd, Hiawatha, Cherokee or Nginx with FastCGI or mod_perl support is recommended, but any web server with CGI or FastCGI support will work. On Apache, mod_perl can help with performance considerably, though its use might be an issue {{because it can be}} unsafe to <b>share</b> <b>multiple</b> <b>applications</b> under mod_perl.|$|R
40|$|With {{advances}} in hardware and networking technologies and mass manufacturing, {{the cost of}} high end hardware had fall dramatically in recent years. However, software cost still remains high and is the dominant fraction of the overall computing budget. <b>Application</b> <b>sharing</b> is a promising solution to reduce the overall IT cost. Currently software licenses are still {{based on the number}} of copies installed. An organization can thus reduce the IT cost if the users are able to remotely access the software that is installed on certain computer servers instead of running the software on every local computer. In this paper, we propose a generic <b>application</b> <b>sharing</b> architecture for users' <b>application</b> <b>sharing</b> in a cluster of closed operating systems such as Microsoft Windows. We also propose a broker-mediated solution where we allow multiple users to access a single user software license on a time multiplex basis through a single logged in user. An <b>application</b> <b>sharing</b> tool called ShAppliT has been introduced and implemented in Microsoft Windows operating system. We evaluated their performance on CPU usage and memory consumption when a computer is hosting <b>multiple</b> concurrent <b>shared</b> <b>application</b> sessions. Comment: 17 page...|$|R
50|$|Each node is {{assigned}} a unique nodeID uniformly distributed {{in a large}} identifier space. Tapestry uses SHA-1 to produce a 160-bit identifier space represented by a 40 digit hex key.Application specific endpoints GUIDs are similarly assigned unique identifiers. NodeIDs and GUIDs are roughly evenly distributed in the overlay network with each node storing several different IDs. From experiments it is shown that Tapestry efficiency increases with network size, so <b>multiple</b> <b>applications</b> <b>sharing</b> the same overlay network increases efficiency. To differentiate between applications a unique application identifier is used.Tapestry uses best-effort to publish and route objects.|$|R
40|$|Shared caches are {{pervasive}} in chip multiprocessors (CMPs). In particular, CMPs almost always feature a large, fully shared last-level cache (LLC) {{to mitigate the}} high latency, high energy, and limited bandwidth of main memory. A shared LLC has several advantages over multiple, private LLCs: it increases cache utilization, accelerates intercore communication (which happens through the cache instead of main memory), and reduces the cost of coherence (because only non-fully-shared caches must be kept coherent). Unfortunately, these advantages come at a significant cost. When <b>multiple</b> <b>applications</b> <b>share</b> the CMP, the...|$|R
40|$|This paper {{presents}} {{a model for}} optimizing both software and hardware reliability for embedded systems under cost and multiple reliability constraints. Previously, most optimization models {{have been developed for}} hardware-only or software-only systems by assuming the hardware, if any, has perfect reliability. In addition they assume that failures for each hardware or software component is statistically independent. In other words, none of the existing optimization models was developed for hardware & software (called embedded) systems with failure dependencies. Our model minimizes system cost under multiple reliability constraints. We use our model for an embedded system with <b>multiple</b> <b>applications</b> <b>sharing</b> <b>multiple</b> resources. This {{is the first time that}} optimization of this kind of model is performed on this type of system. I...|$|R
40|$|Disk {{contention}} {{is a fact}} of life in modern data centers, with <b>multiple</b> <b>applications</b> <b>sharing</b> the storage resources of a single physical machine. Log-structured storage de-signs are ideally suited for such high-contention settings, but historically have suffered from performance prob-lems due to cleaning overheads. In this paper, we in-troduce Gecko, a novel design for storage arrays where a single log structure is distributed across a chain of drives, physically separating the tail of the log (where writes oc-cur) from its body 1. This design provides the benefits of logging – fast, sequential writes for any number of con-tending applications – while eliminating the disruptive effect of log cleaning activity on application I/O. ...|$|R
40|$|We {{describe}} the Scene-Graph-As-Bus technique (SGAB), {{the first step}} in a staircase of solutions for sharing software components for virtual environments. The goals of SGAB are to allow, with minimal effort, independentlydesigned <b>applications</b> to <b>share</b> component functionality; and for <b>multiple</b> users to <b>share</b> <b>applications</b> designed for single users. This paper reports on the SGAB design for transparently conjoining different applications by unifying the state information contained in their scene graphs. SGAB monitors and maps changes in the local scene graph of one application to a neutral scene graph representation (NSG), distributes the NSG changes over the network to remote peer applications, and then maps the NSG changes to the local scene graph of the remote application. The fundamental contribution of SGAB is that both the local and remote applications can be completely unaware of each other; that is, both applications can interoperate without code or binary modification despi [...] ...|$|R
40|$|While the HCI {{community}} has been {{putting a lot of}} effort on creating physical interfaces for collaboration, studying multi-user interaction dynamics and creating specific applications to support (and test) this kind of phenomena, it has not addressed the problems implied in having <b>multiple</b> <b>applications</b> <b>sharing</b> the same interactive space. Having an ecology of rich interactive programs sharing the same interfaces poses questions {{on how to deal with}} interaction ambiguity in a cross-application way and still allow different programmers the freedom to program rich unconstrained interaction experiences. This paper describes GestureAgents, a framework demonstrating several techniques that can be used to coordinate different applications in order to have concurrent multi-user multi-tasking interaction and still dealing with gesture ambiguity across multiple applications. Author Keywords Concurrent interaction, multi-user,gesture framework, agentexclusivit...|$|R
40|$|Task {{scheduling}} {{is one of}} {{the main}} challenges in every system design, and especially in embedded systems design. Task scheduling might be classified in two broad categories: (1) compile time (static scheduling) or (2) run time (dynamic scheduling). Recently there has been a growing interest in the development of run-time scheduling techniques for platform-based designs [1][2]. This interest is due to several reasons: • Typical static scheduling algorithms assume that the tasks execution time is the worst-case execution time (WCET). However, systems designed using WCET estimates could be highly under-utilized. The execution time of a task is rarely deterministic, because it could be data-dependent or the execution time could depend on the available resources, especially when <b>multiple</b> <b>applications</b> <b>share</b> a system. • Multi-function systems support multiple functions or applications of which only one is executed at any instant, depending on external factors. Such multi-function systems offer alternatives between various functionalitie...|$|R
40|$|Abstract—Content-Centric Networking {{is a new}} communi-cation {{architecture}} that rethinks the Internet communication model, designed for point-to-point connections between hosts, and centers it around content dissemination and retrieval. Most of the issues faced by the current IP infrastructure in terms of mobility management, security, scalability, which are accrued by today’s Internet trends, find a natural solution in CCN shift from IP addresses to named data. In this paper we explore the impact of storage management {{on the performance of}} <b>multiple</b> <b>applications</b> <b>sharing</b> the same CCN infrastructure and we quantify the effectiveness of static storage partitioning and dynamic management techniques in providing service differentiation. To this purpose, we implement a set of storage management techniques in the open source CCNx prototype and perform extensive experiments in a real test-bed under fairly realistic network conditions. Our experimental results allow to clarify the relation between CCN chunk-level caching and Quality of Experience (QoE) perceived by end users. I...|$|R
40|$|Given the {{emerging}} dominance of chip-multiprocessor (CMP) systems, an important research problem concerns application memory {{performance in the}} face of deep mem-ory hierarchies, where one or more caches are <b>shared</b> by <b>multiple</b> cores. Often, when several applications compete for capacity in shared caches, the performance of multi-programmed and parallel workloads degrades significantly and becomes unpredictable. This happens because the commonly-used Least-Recently-Used replacement policy does not distinguish between processes and their distinct memory needs. Therefore, processes often suffer from such inter-application cache interference and the overall system throughput can be slowed down by as much as 55 %. In addition to managing <b>multiple</b> <b>applications</b> <b>sharing</b> the last-level cache (LLC), managing a single application’s memory performance is far from straightforward even in an idealized setup, considering only user accesses. It becomes even more challeng-ing in real-machine environments, where interference can stem from operating system (OS) activities, and even from an application’s own prefetch requests and page tabl...|$|R
40|$|Abstract—Wireless sensor {{networks}} are evolving from dedicated application-specific platforms to integrated infrastructure <b>shared</b> by <b>multiple</b> <b>applications.</b> <b>Shared</b> sensor networks offer inherent advantages {{in terms of}} flexibility and cost since they allow dynamic resource sharing and allocation among <b>multiple</b> <b>applications.</b> Such <b>shared</b> systems face the critical need for allocation of nodes to contending applications to enhance the overall Quality of Monitoring (QoM) under resource constraints. To address this need, this paper presents Utility-based Multiapplication Allocation and Deployment Environment (UMADE), an integrated application deployment system for shared sensor networks. In sharp contrast to traditional approaches that allocate applications based on cyber metrics (e. g., computing resource utilization), UMADE adopts a cyber-physical system approach that dynamically allocates nodes to applications based on their QoM of the physical phenomena. The key novelty of UMADE {{is that it is}} designed to deal with the inter-node QoM dependencies typical in cyber-physical applications. Furthermore, UMADE provides an integrated system solution that supports the end-to-end process of (1) QoM specification for applications, (2) QoM-aware application allocation, (3) application deployment over multi-hop wireless networks, and (4) adaptive reallocation of applications in response to network dynamics. UMADE has been implemented on TinyOS and Agilla virtual machine for Telos motes. The feasibility and efficacy of UMADE have been demonstrated on a 28 -node wireless sensor network testbed in the context of building automation applications. I...|$|R
40|$|Object-oriented {{persistent}} programming {{reduces the}} `impedance mismatch' between application {{programs and the}} stored data which they need to manipulate. This reduction is especially beneficial in applications such as CAD data management, where the data concerned has a complex and dynamic structure. The authors are using an implementation of persistent C++ to write <b>multiple</b> CAD <b>applications</b> <b>sharing</b> a single persistent store. One problem that has arisen from compile-time class definition in C++ is that not all classes may be compiled into all applications; this leads to problems because programs may access objects of unrecognised classes through polymorphic references. Other persistent C++ implementations require that an application program be recompiled with the appropriate class definition before objects of that class may be accessed. This is inconvenient when there are many programs and the global schema is frequently extended. This paper presents a mechanism by which objects of unrec [...] ...|$|R
50|$|This {{comparison}} contains download managers, {{and also}} file <b>sharing</b> <b>applications</b> {{that can be}} used as download managers (using the http, https and ftp-protocol). For pure file <b>sharing</b> <b>applications</b> see the Comparison of file <b>sharing</b> <b>applications.</b>|$|R
25|$|Can be {{converted}} into <b>multiple</b> <b>shares.</b>|$|R
40|$|Abstract:The {{computer}} database {{system was}} applied to information management to improve information management of scientific and modernity, to improve the efficiency of information management. This paper discusses the characteristics of computer database system and application in the information management status quo, to improve the information management, improve the efficiency of information management has a certain guiding significance. 1. The characteristics of the database system mainly has the following several aspects: 1. 1 data structured In the file system, despite its record has some internal structures, {{but there is no}} link between records. While the database system has realized the overall data structured, {{this is one of the}} main characteristics of the database, also is the essential difference between database and file system. 1. 2 data sharing, low redundancy and easy to expand Database system from the perspective of the overall view and describe the data, the data is no longer geared to the needs of a particular application, but for the whole system; As a result, the data can be used by multiple users and <b>multiple</b> <b>applications</b> <b>share.</b> Data sharing can greatly reduce the data redundancy, saving storage space. Data sharing can also avoid the incompatibility between the dat...|$|R
40|$|The high {{replication}} cost of Byzantine fault-tolerance (BFT) methods {{has been}} a major barrier to their widespread adoption in commercial distributed applications. We present ZZ, a new approach that reduces the replication cost of BFT services from 2 f + 1 to practically f + 1. The key insight in ZZ is to use f + 1 execution replicas in the normal case and to activate additional replicas only upon failures. In data centers where <b>multiple</b> <b>applications</b> <b>share</b> a physical server, ZZ reduces the aggregate number of execution replicas running in the data center, improving throughput and response times. ZZ relies on virtualization—a technology already employed in modern data centers—for fast replica activation upon failures, and enables newly activated replicas to immediately begin processing requests by fetching state on-demand. A prototype implementation of ZZ using the BASE library and Xen shows that, when compared to a system with 2 f + 1 replicas, our approach yields lower response times and up to 33 % higher throughput in a prototype data center with four BFT web applications. We also show that ZZ can handle simultaneous failures and achieve sub-second recovery. ...|$|R
40|$|Multiprocessors are {{increasingly}} being used in modern embedded systems for reasons of power and speed. These systems have to support {{a large number of}} applications and standards, in different combinations, called use-cases. The key challenges are designing efficient systems handling all these use-cases; this requires fast exploration of software and hardware alternatives with accurate performance evaluation. In this paper, we present a system level FPGA based simulation methodology for performance evaluation of applications on multiprocessor platforms. We observe that for <b>multiple</b> <b>applications</b> <b>sharing</b> an MPSoC platform, dynamic arbitration can cause deadlock in simulation. We use conservative parallel discrete event simulation (PDES) for simulation of these use-cases. We further note that conservative PDES is inefficient so we present a new PDES methodology that avoids causality errors by detecting them in advance. We call our new approach as smart conservative PDES. It is scalable in the number of use-cases and number of simulated processors and is 15 % faster than conservative PDES. We further present results of a case-study of two real life applications. We used our simulation technique to do a design space exploration for optimal buffer space for JPEG and H 263 decoders...|$|R
5000|$|Collaboration with file <b>sharing,</b> <b>application</b> <b>sharing</b> and desktop sharing ...|$|R
5000|$|<b>Multiple</b> <b>Shared</b> Processor Pools (on POWER6 and POWER7 systems only).|$|R
50|$|This {{comparison}} contains next to file <b>sharing</b> <b>applications</b> also download managers {{that can}} be used as file <b>sharing</b> <b>applications</b> (using the torrent-protocol). For pure download managers see the Comparison of download managers.|$|R
40|$|Peer-to-Peer (P 2 P) {{file sharing}} {{software}} {{has brought a}} hot discussion on P 2 P file sharing among all businesses. Freenet, Gnutella, and Napster are the three most popular P 2 P file <b>sharing</b> <b>applications.</b> They use three distinct protocols and these protocols come with different characteristics. In this paper, we discuss the protocols of these P 2 P file <b>sharing</b> <b>applications,</b> {{in terms of the}} methodologies used for peer registry, query and content sharing. In order to maximize the benefit of P 2 P file <b>sharing</b> <b>application</b> that is to facilitate file sharing among various P 2 P file <b>sharing</b> <b>applications,</b> we propose a framework to integrate various P 2 P file sharing protocols using P 2 P gateway in this paper...|$|R
5000|$|Functionality {{supported}} by the Video <b>Share</b> <b>Application</b> Server includes: ...|$|R
5000|$|... ownyourinfo.com - a {{personal}} information storing and <b>sharing</b> <b>application.</b>|$|R
5000|$|January 2011, Lockerz {{announced}} they acquired the Twitter photo <b>sharing</b> <b>application,</b> Plixi ...|$|R
50|$|Over {{the next}} few years it raised tens of {{millions}} of pounds through <b>multiple</b> <b>share</b> placements, using the capital to fund refurbishment and expansion.|$|R
3000|$|Utilities {{needed by}} {{engineers}} such as screen <b>sharing</b> <b>applications,</b> diff utilities, and remote visualization applications [...]...|$|R
5000|$|Open Garden, {{connection}} <b>sharing</b> <b>application</b> that <b>shares</b> Internet access {{with other}} devices using Wi-Fi or Bluetooth.|$|R
50|$|The Video <b>Share</b> <b>Application</b> Server is an IMS Application Server that {{interfaces}} {{with the}} S-CSCF network {{element in the}} IMS network through the 3GPP-defined ISC interface. The Application Server supports the SIP Back-to-Back User Agent (B2BUA) call control architecture that enables service policy control and enforcement capabilities of the video share session. The Video <b>Share</b> <b>Application</b> Server typically runs on a carrier grade fault tolerant hardware platform.|$|R
5000|$|Video <b>sharing</b> <b>applications</b> {{and screen}} capture tools (referring to both video screen capture tools and {{screenshot}} tools) ...|$|R
50|$|Jahia Wise - Jahia Wise is a {{commercial}} document <b>sharing</b> <b>application</b> built {{on top of}} the Jahia architecture.|$|R
5000|$|Infinit is an {{unlimited}} and encrypted {{peer to peer}} file <b>sharing</b> <b>application</b> for digital artists written in C++.|$|R
