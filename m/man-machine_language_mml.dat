0|68|Public
50|$|A <b>man-machine</b> <b>language</b> or <b>MML</b> is a {{specification}} <b>language.</b> <b>MML</b> {{typically are}} defined to standardize the interfaces for managing a telecommunications or network device from a console.|$|R
40|$|INTRODUCTION TO THE CCITT <b>MAN-MACHINE</b> <b>LANGUAGE</b> 1 Field of {{application}} The <b>man-machine</b> <b>language</b> (CCITT <b>MML)</b> {{can be used}} to facilitate operation and maintenance functions of Stored Program Control SPC systems of different types. Depending upon national requirements, CCITT MML {{can also be used to}} facilitate installation and acceptance testing of such systems. In many cases, SPC systems will be supported by auxiliary systems, e. g., in operation and maintenance centres and/or centres for other purposes such as sales, subscribers' complaints, etc., to carry out functions in cooperation with the SPC system. Different types of communication may be required for this cooperation. To clarify where the CCITT MML is intended to be used, a configuration is shown in Figure 1 /Z. 301 which illustrates the case of three separate systems. Local and remote man-machine terminals may be used. The configuration of systems in a network may vary, but this does not alter the principles governing th...|$|R
25|$|Music Macro <b>Language</b> (<b>MML)</b> is a music {{description}} language used in sequencing music on computer and video game systems.|$|R
50|$|In 1978, Japanese {{personal}} computers {{such as the}} Sharp MZ and Hitachi Basic Master were capable of digital synthesis, which were sequenced using Music Macro <b>Language</b> (<b>MML).</b> This was used to produce chiptune video game music.|$|R
5000|$|MDX is a Music Macro <b>Language</b> (<b>MML)</b> based format {{designed}} to be played on the Sharp X68000 series of computers. The music data is programmed then compiled into the MDX file. An optional PDX file containing PCM data may be present.|$|R
40|$|The {{environment}} for composing multiscale applications − built from single scale models implemented as scientific software components − distributed in various European e-infrastructures • Applications structure {{described in the}} Multiscale Modelling <b>Language</b> (<b>MML)</b> − single scale sub-modules − scaleless mappers − the coupling topology describing their connection...|$|R
40|$|Meta-modeling is a {{standard}} technique to describe the abstract syntax of the Unified Modeling Language (UML) including the Object Constraint Language (OCL). In order to overcome inherent deficiencies of meta-circular UML descriptions, the <b>language</b> <b>MML</b> based on an external formal semantics was proposed as a core of UML...|$|R
40|$|This paper {{introduces}} a new construct that we term Math Mediated <b>Language</b> (<b>MML)</b> {{focusing on the}} notion that common or everyday terms with mathematical meanings are important building blocks for students’ mathematical reasoning. A survey given to 96 pre-service early childhood educators indicated clear patterns of perceptions of these terms...|$|R
40|$|This paper {{describes}} a Meta-Modeling Framework (MMF) that addresses {{many of the}} deficiencies {{in the definition of}} The unified Modeling Language (UML), and promises to support the OMG's newly announced strategy, Model Driven Architecture (MDA) [OMG 01]. The facility comprises a <b>language</b> (<b>MML)</b> for defining modeling notations, a tool (MMT) that checks and executes those definitions, and...|$|R
40|$|The Meta-Modeling <b>Language</b> (<b>MML)</b> is a sub-set of the Unified Modeling Language (UML) that is {{proposed}} {{as the core}} language used to bootstrap the UML 2. 0 definition initiative. Since it is metacircular, MML requires an external formal semantics in order to ground it. This paper defines the MML Calculus {{which is used to}} formally define MML and therefore provides a semantic basis for UML 2. 0...|$|R
40|$|This paper {{describes}} an approach for offering web-based multimodal services in mobile environments. After {{the definition of}} requirements a first step for an implementation is presented, {{that will be used}} to extend traditional graphical user interfaces with multimodal elements, such as speech and hand-writing recognition. Moreover requirements for a new dialog-centric Multimodal Markup <b>Language</b> (<b>MML)</b> has been proposed, where graphic, speech, handwriting, anthropomorphic avatars, touch-sensitive input and other technologies cooperate together...|$|R
50|$|Music Markup <b>Language</b> (<b>MML)</b> is an XML {{application}} to describe music objects and events, using different modules and markup. MML {{can be delivered}} in different formats, such as text, block bars or piano roll, Common Western Notation or MIDI-devices. Since MML can be employed in such simple and accessible formats, it's possible to sequence music without resorting to expensive software. MML compositions can, for instance, be rendered via a simple Java plug-in.|$|R
5000|$|The soundtracks mainly consist of, often experimental, chiptune-based {{electronic}} dance music, encompassing electronic genres such as electro, house, techno, hardcore, jungle, ambient, breakbeat, gabber, noise, and trance. The {{music was}} produced using the Yamaha FM-synth sound chips of the Sega Mega Drive / Genesis video game console (YM2612) and NEC PC-88 computer (YM2608), along with Koshiros own audio programming language [...] "Music Love," [...] {{a modified version}} of the PC-88s Music Macro <b>Language</b> (<b>MML).</b>|$|R
50|$|TL1 was {{developed}} by Bellcore in 1984 as a standard <b>man-machine</b> <b>language</b> to manage network elements for the Regional Bell Operating Companies (RBOCs). It is based on Z.300 series man machine language standards. TL1 {{was designed as a}} standard protocol readable by machines as well as humans to replace the diverse ASCII based protocols used by different Network Element (NE) vendors. It is extensible to incorporate vendor specific commands.|$|R
50|$|The Modern and Medieval <b>Languages</b> Test (<b>MML)</b> is a University admissions test {{used in the}} United Kingdom. It is {{currently}} used by the University of Cambridge.|$|R
40|$|Recent {{multiscale}} applications {{require more}} and more often the coupling of many sub-models, usually originating form different fields of science. Therefore, it is increasingly important to propose an effective description language that can help scientists with different background to co-develop a multiscale application. We propose a Multiscale Modeling <b>Language</b> (<b>MML)</b> i. e. a description language aiming at specifying the architecture of a multiscale simulation program. We will illustrate this approach by proposing a MML description of a computer model for restenosis in a stented vessel...|$|R
40|$|There is an {{increasing}} demand for high-quality interactive applications which combine complex application logic with a sophisticated user interface, making use of individual media objects like graphics, animations, 3 D graphics, audio or video. Their development is still challenging as it requires the integration of software design, user interface design, and media design. This chapter presents a model-driven development approach which integrates these aspects. Its basis is the Multimedia Modeling <b>Language</b> (<b>MML),</b> which integrates existing modeling concepts for interactive applications and adds support for multimedia. As we show, advanced multimedia integration requires new modeling concepts not supported by existing <b>languages</b> yet. <b>MML</b> models can be transformed into code skeletons for multiple target platforms. Moreover, we support the integration of existing professional multimedia authoring tools into the development process by generating code skeletons which can be directly processed in authoring tools. In this way the advantages of both – systematic model-driven development and support for creative visual design – are combined...|$|R
40|$|This paper {{describes}} an action semantics for UML {{based on the}} Meta-Modelling <b>Language</b> (<b>MML)</b> - a precise meta-modelling language designed for developing families of UML languages. Actions are de¯ned as computational procedures with side-e®ects. The action semantics are described in the MML style, with model, instance and semantic packages. Di®erent actions are described as specializations of the basic action in their own package. The aim {{is to show that}} by using a Catalysis like package extension mechanism, with precise mappings to a simple semantic domain, a well-structured and extensible model for an action language can be obtained...|$|R
50|$|Transaction Language 1 (TL1) is {{a widely}} used {{management}} protocol in telecommunications. It is a cross-vendor, cross-technology <b>man-machine</b> <b>language,</b> and is widely used to manage optical (SONET) and broadband access infrastructure in North America. TL1 {{is used in the}} input and output messages that pass between Operations Support Systems (OSSs) and Network Elements (NEs). Operations domains such as surveillance, memory administration, and access and testing define and use TL1 messages to accomplish specific functions between the OS and the NE. TL1 is defined in Telcordia Technologies (formerly Bellcore) Generic Requirements document GR-831-CORE.|$|R
40|$|While {{there is}} a lot of {{research}} done in the area of 2 D or 3 D user interfaces (UIs) construction, comparatively little is known about systematic approaches to designing and developing integrated 2 D/ 3 D UIs and applications. The previously developed multimedia modeling <b>language</b> (<b>MML)</b> provides a top down approach for a model driven development of 2 D/ 3 D UIs and applications. The MML structure model and media components provide support for including X 3 D based content and automatic generation of application skeletons. We use a work instruction manual for a woodchipper as an example to illustrate how to apply MML. We discuss the ramifications of this approach and opportunities for some improvements...|$|R
40|$|PROGRAMMING LANGUAGES CHILL: The ITU-T {{high level}} {{language}} Z. 200 –Z. 209 <b>MAN-MACHINE</b> <b>LANGUAGE</b> General principles Z. 300 –Z. 309 Basic syntax and dialogue procedures Z. 310 –Z. 319 Extended MML for visual display terminals Z. 320 –Z. 329 Specification of the man-machine interface Z. 330 –Z. 349 Data-oriented human-machine interfaces Z. 350 –Z. 359 Human-computer interfaces {{for the management}} of telecommunications networks Z. 360 –Z. 369 QUALITY Quality of telecommunication software Z. 400 –Z. 409 Quality aspects of protocol-related Recommendations Z. 450 –Z. 459 METHODS Methods for validation and testing Z. 500 –Z. 519 MIDDLEWARE Distributed processing environment Z. 600 –Z. 609 For further details, please refer to the list of ITU-T Recommendations...|$|R
40|$|The {{major goal}} of this thesis {{was to create a}} map of a room by an {{autonomous}} mobile robot using the robot's internal odometry measurements and ultrasonic sensors. Yamabico, an autonomous mobile robot, will be controlled by Model-based Mobile robot <b>Language</b> (<b>MML).</b> The research for this thesis included the development of an algorithm to use information from the line-fitting capability of MML. It also included research about the inherent errors that are incurred using sonar for precise measurements. The results of this thesis are that it is possible for a map to be created by an autonomous robot using only ultrasonic sensors. However, the results would be much more accurate if an external source of navigation was used to correct the errors inherent in ultrasonic sensors and the robot's odometry. U. S. Army (USA) autho...|$|R
40|$|JSim is a {{simulation}} system for developing models, designing experiments, and evaluating hypotheses on physiological and pharmacological systems through {{the testing of}} model solutions against data. It is designed for interactive, iterative manipulation of the model code, handling of multiple data sets and parameter sets, and for making comparisons among different models running simultaneously or separately. Interactive use {{is supported by a}} large collection of graphical user interfaces for model writing and compilation diagnostics, defining input functions, model runs, selection of algorithms solving ordinary and partial differential equations, run-time multidimensional graphics, parameter optimization (8 methods), sensitivity analysis, and Monte Carlo simulation for defining confidence ranges. JSim uses Mathematical Modeling <b>Language</b> (<b>MML)</b> a declarative syntax specifying algebraic and differential equations. Imperative constructs written in other languages (MATLAB, FORTRAN, C++, etc.) are accessed through procedure calls. MML syntax i...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThe major problem addressed by {{this research is}} how to improve an existing real-time software system's readability, maintainability, stability and portability using reengineering techniques. A fundamental portion of the Model- based Mobile robot <b>Language</b> (<b>MML)</b> was the real-time system chosen {{as the basis for}} this study. The approach taken was to create a new system design. The new design was based on system specifications obtained by conducting static and dynamic analysis on the existing system. The results are that a new core system was implemented using a design that focused on creating independent software sub-systems while encapsulating data. Hardware dependencies were localized and assembly code minimized. The new system is easier to understand and modify and is portable to other hardware platforms. Autonomous vehicle, Robot, Software engineering, Real-time system[URL] United States Nav...|$|R
40|$|Summary. The goal of {{this article}} is to {{construct}} a language of the ZF set theory and to develop a notational and conceptual base which facilitates a convenient usage of the <b>language.</b> <b>MML</b> Identifier:ZF_LANG. WWW:[URL] The articles [4], [6], [7], [3], [1], [5], and [2] provide the notation and terminology for this paper. For simplicity, we follow the rules: k, n are natural numbers, a is a set, D is a non empty set, and p, q are finite sequences of elements of N. The subset VAR of N is defined by: (Def. 1) VAR = {k: 5 ≤ k}. Let us observe that VAR is non empty. A variable is an element of VAR. Let us consider n. The functor xn yielding a variable is defined by: (Def. 2) xn = 5 +n. In the sequel x, y, z, t denote variables...|$|R
40|$|Introduction This Recommendation {{identifies}} the maintenance functions {{to be controlled}} by means of the CCITT-MML. The CCITT-MML (<b>man-machine</b> <b>language)</b> is intended to handle the functions required to manage telecommunication systems, e. g. via a telecommunication management network (TMN) (see Recommendation M. 30). The man-machine interface (MMI) enables the exchange of information between users and systems encoded in MML. Interaction between the users and the controlled systems is based on a repertoire of inputs, outputs, special actions and man-machine interaction mechanisms, including dialogue procedures. This Recommendation deals with the specification and control of maintenance functions. The tests appropriate to particular maintenance functions remain as described in the relevant M-series Recommendations. When defining MML-functions the tasks which need to be performed (jobs) are first identified, in order to derive system functions to be controlled. The relationship betwee...|$|R
40|$|Inherently complex {{problems}} from many scientific disciplines require a multiscale modeling approach. Yet its practical contents remain unclear and inconsistent. Moreover, multiscale models {{can be very}} computationally expensive, and may have potential to be executed on distributed infrastructure. In this paper we propose firm foundations for multiscale modeling and distributed multiscale computing. Useful interaction patterns of multiscale models are made predictable with a submodel execution loop (SEL), four coupling templates, and coupling topology properties. We enhance a high-level and well-defined Multiscale Modeling <b>Language</b> (<b>MML)</b> that describes and specifies multiscale models and their computational architecture in a modular way. The architecture is analyzed using directed acyclic task graphs, facilitating validity checking, scheduling distributed computing resources, estimating computational costs, and predicting deadlocks. Distributed execution using the multiscale coupling library and environment (MUSCLE) is outlined. The methodology is applied to two selected applications in nanotechnology and biophysics, showing its capabilities...|$|R
40|$|Medical Markup <b>Language</b> (<b>MML)</b> {{has been}} {{developed}} over the last 6 years {{in order to create}} a set of standards by which medical data, within Japan and hopefully worldwide, can be stored, accessed and exchanged in any number of physical locates. The MML version 2. 21 is characterized by XML as meta-language, module structure for each document and enhancement of linking function among documents. Data exchange specification has been also added for query and reply. MML instances are composed of MML header and MML body. The MML header includes information for data transmission, while MML body includes several module items. One module item contains two elements: document information and module content. Nine MML module contents are defined at the present time: patient information, health insurance information, diagnosis information, lifestyle information, basic clinic information, particular information at the time of first visit, progress course information, surgery record information and clinical summary information...|$|R
40|$|An optimal {{management}} of an irrigation network {{is important to}} ensure an efficient water supply and to predict critical situations related to natural hazards. Within {{the context of the}} MAPPER European project we present a multiscale coupling methodology to simulate numerically an entire irrigation canal over a distributed High Performance Computing (HPC) resource. We decompose the network into several segments that are coupled through junctions. Our coupling strategy, based on the concept of Complex Cellular Automata (CxA), the Lattice Boltzmann (LB) method and the Multiscale Modeling <b>Language</b> (<b>MML)</b> aims at coupling simple 1 D model of canal sections with 3 D complex ones. Our goal is to build a numerical model that can be run over a distributed grid infrastructure, thus offering a large amount of computing resources. We illustrate our approach by coupling two canal sections in 1 D through a gate and a spillway junctions...|$|R
40|$|In several disciplines, a {{multiscale}} {{approach is}} being used to model complex natural processes yet a principled background to multiscale modeling is not clear. Additionally, some multiscale models requiring distributed resources to be computed in an acceptable timeframe, while no standard framework for distributed multiscale computing is place. In this paper a principled approach to distributed multiscale computing is taken, formalizing multiscale modeling based on natural processes. Based on these foundations, the Multiscale Modeling <b>Language</b> (<b>MML)</b> is extended as a clear, general, formal, and high-level means to specify scales and interactions in, and as a guide to a uniform approach to crystalize, communicate, develop and execute a multiscale model. With an MML specification, a multiscale model can be analyzed for scheduling or deadlock detection using a task graph. The potential of this method is shown by applying it to two selected applications in nano materials and biophysics...|$|R
2500|$|By {{the early}} 1980s, {{significant}} improvements to personal computer game music were made {{possible with the}} introduction of digital FM synthesis sound. Yamaha began manufacturing FM synth boards for Japanese computers such as the NEC PC-8801 and PC-9801 in the early 1980s, and by the mid-1980s, the PC-8801 and FM-7 had built-in FM sound. This allowed computer game music to have greater complexity than the simplistic beeps from internal speakers. These FM synth boards produced a [...] "warm and pleasant sound" [...] that musicians such as Yuzo Koshiro and Takeshi Abo utilized to produce music that is still highly regarded within the chiptune community. In the early 1980s, Japanese personal computers such as the NEC PC-88 and PC-98 featured audio programming languages such as Music Macro <b>Language</b> (<b>MML)</b> and MIDI interfaces, which were most often used to produce video game music. Fujitsu also released the FM Sound Editor software for the FM-7 in 1985, providing users with a user-friendly interface to create and edit synthesized music.|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedIn order to function autonomously {{in the real}} world a mobile robot must first be able to sense the boundaries of it's operating space. Once the enclosing features and/or obstacles have been sensed they must be interpreted and represented in some way meaningful to the robot's controlling algorithms. The objective of this work is the development of a system of ultrasonic sensors, or sonars, for the mobile robot YAMABICO- 11 at the Naval Postgraduate School, and the implementation of a user friendly set of sonar language functions for the robot's control <b>language</b> <b>MML.</b> The sonar hardware includes twelve transducer pairs, their drivers and a bus mounted control card. The sonar control system operates autonomously under direction of the robot's central processor. Extraction of linear features is accomplished by the use of a least-square-fit algorithm of cartesian coordinate pairs to a parametric representation of the including line segment. [URL] U. S. Nav...|$|R
40|$|Creating an {{effective}} environment for collaborative spatio-temporal model development will require computational systems that {{provide support for}} the user in three key areas: 1) Support for modular, hierarchical model construction and archiving/linking of simulation modules; 2) Support for graphical, icon-based model construction; 3) Transparent, seamless support for {{state of the art}} distributed computing. The key requirement for this support is the adoption of a modeling standard, either {{in the form of an}} interface specification language (ISL), or a Modular Modeling <b>Language</b> (<b>MML).</b> The ISL supports remote linking of simulation modules developed in disparate languages and environments. The <b>MML</b> provides a <b>language</b> standard for the development and archiving of simulation modules. Optimally, the implementation of these languages will include seamless links to graphical, icon-based simulation environments and distributed computing environments. In this paper we discuss the authors’ program to develop and implement an MML-based integrated environment designed to provide this support for distributed modular spatio-temporal modeling...|$|R
40|$|This thesis {{starts with}} a brief {{introduction}} about LTE system and Automated Testing, after which, it describes the implementation of test automation for Mobility Management Entity (MME) of 4 G LTE core network. The thesis work is focus on testing of MME logical interfaces s 1, s 6 and s 11. There is a test suite that is developed, and is used to remotely control the Tektronix G 35 tester to generate network traffic for testing purpose. Besides, the test suite sends Man Machine <b>Language</b> (<b>MML)</b> commands to the MME hardware platform called ATCA, and periodically collects counters’ data, with which the test suite is able to track {{the performance of the}} three interfaces of MME. As a conclusion, automated testing for MME is found to be very important. It provides an efficient way to generate a clear picture of the performance of MME, which is helpful when improving the quality of MME...|$|R
40|$|The Modular Program Constructor (MPC) is an {{open-source}} Java based modeling utility, {{built upon}} JSim's Mathematical Modeling <b>Language</b> (<b>MML)</b> ([URL] that uses directives embedded in model code to construct larger, more complicated models quickly and with less error than manually combining models. A major obstacle in writing complex models for physiological processes {{is the large}} amount of time it takes to model the myriad processes taking place simultaneously in cells, tissues, and organs. MPC replaces this task with code-generating algorithms that take model code from several different existing models and produce model code for a new JSim model. This is particularly useful during multi-scale model development where many variants are to be configured and tested against data. MPC encodes and preserves information about how a model is built from its simpler model modules, allowing the researcher to quickly substitute or update modules for hypothesis testing. MPC is implemented in Java and requires JSim to use its output. MPC source code and documentation are available at [URL]...|$|R
40|$|The {{development}} of highly interactive multimedia applications {{is still a}} challenging and complex task. In addition to the application logic multimedia applications typically provide a sophisticated user interface with integrated media objects. As a consequence, the development process involves different experts for software design, user interface design, and media design. There is still a lack of concepts for a structured development process to integrate these requirements. In this paper we introduce the Multimedia Modeling <b>Language</b> (<b>MML),</b> a visual modeling language supporting the design process in multimedia application development. It {{is part of a}} model-driven development approach for multimedia applications. The language is oriented on well-established software engineering concepts, in particular UML 2. 0. It integrates the results of two different research lines: application-oriented multimedia modeling and model-based user interface development. In this paper we describe the concepts of the language and present the modeling process with MML. In particular we show how MML aims to integrate the different developer roles in multimedia application design. ...|$|R
