1934|16|Public
5|$|COBOL {{programs}} were infamous for being monolithic and lacking <b>modularization.</b>|$|E
25|$|A {{number of}} other theorists have {{disagreed}} with these claims. Instead, they have outlined alternative theories of how <b>modularization</b> might emerge {{over the course of}} development, {{as a result of a}} system gradually refining and fine-tuning its responses to environmental stimuli.|$|E
25|$|By using namespaces, XHTML {{documents}} {{could provide}} extensibility by including fragments from other XML-based languages such as Scalable Vector Graphics and MathML. Finally, the renewed work {{would provide an}} opportunity to divide HTML into reusable components (XHTML <b>Modularization)</b> and clean up untidy parts of the language.|$|E
50|$|In computing, aspect-oriented {{software}} development (AOSD) is a {{software development}} technology that seeks new <b>modularizations</b> of software systems {{in order to}} isolate secondary or supporting functions from the main program's business logic. AOSD allows multiple concerns to be expressed separately and automatically unified into working systems.|$|R
40|$|This paper {{provides}} an overview of the three different kinds of AOP refactorings: aspect-aware OO refactorings, refactorings for AOP constructs, and <b>modularizations</b> of crosscutting concerns. We discuss recent developments for each of them and highlight their commonalities with respect to associated challenges and ties to related research, such as program analysis and aspect mining. 1...|$|R
40|$|AbstractÐLow {{coupling}} between modules {{and high}} cohesion inside each module {{are the key}} features of good software design. This is obtained by encapsulating the details about the internal structure of data and exporting only public functions with a clean interface. The only native support to encapsulation offered by procedural programming languages, such as C, is the possibility to limit the visibility of entities at the file level. Thus, modular decomposition is achieved by assigning functions and data structures to different files. This paper proposes {{a new approach to}} using concept analysis for module restructuring, based on the computation of extended concept subpartitions. Alternative <b>modularizations,</b> characterized by high cohesion around the internal structures that are being manipulated, can be determined by such a method. To assess the quality of the restructured modules, the trade-off between encapsulation violations and decomposition is considered and proper measures for both factors are defined. Furthermore, the cost of restructuring is evaluated through a measure of distance between original and new <b>modularizations.</b> Concept subpartitions were determined for a test suite of 20 programs of variable size, 10 public domain and 10 industrial applications. On the resulting module candidates, the trade-off between encapsulation and decomposition was measured, together with an estimate of the cost of restructuring. Moreover, the ability of concept analysis to determine meaningful <b>modularizations</b> was assessed in two ways. First, programs without encapsulation violations were used as oracles, assuming the absence of violations as an indicator of careful decomposition. Second, the suggested restructuring interventions were actually implemented in some case studies to evaluate the feasibility of restructuring and to deeply investigate the code organization before and after the intervention. Concept analysis was experienced to be a powerful tool supporting module restructuring...|$|R
2500|$|JSR 376: <b>Modularization</b> of the JDK under Project Jigsaw (Java Platform Module System) ...|$|E
2500|$|Bao, J., Voutsadakis G., Slutzki, G. Honavar:, V. (2009). Package-Based Description Logics. In: Modular Ontologies: Concepts, Theories and Techniques for Knowledge <b>Modularization.</b> Lecture Notes in Computer Science Vol. 5445, pp.349–371 ...|$|E
50|$|<b>Modularization.</b> With {{respect to}} the {{original}} design, two new features have been developedto promote <b>modularization</b> and large-scale reuse of configurations: the name-spacing and load-pathmechanisms.|$|E
40|$|It is {{becoming}} increasingly clear that we are entering {{a new era in}} systems software. As the age-old tension between structure and performance acquiesces, we can finally venture beyond monolithic systems and explore alternative <b>modularizations</b> better suited to evolution and adaptation. The OASIS project explores the potential of aspects to naturally shape crosscutting system concerns as they grow and change. This paper describes ongoing work to modularize evolving concerns within high-performance state-of-the-art systems software, and outlines some of the major challenges that lie ahead within this domain. 1...|$|R
40|$|We {{establish}} some {{relations between the}} orders of simple objects in a fusion category {{and the structure of}} its universal grading group. We consider fusion categories which have a faithful simple object and show that its universal grading group must be cyclic. As for the converse, we prove that a braided nilpotent fusion category with cyclic universal grading group always has a faithful simple object. We study the universal grading of fusion categories with generalized Tambara-Yamagami fusion rules. As an application, we classify modular categories in this class and describe the <b>modularizations</b> of braided Tambara-Yamagami fusion categories. Comment: 15 pages, amslate...|$|R
40|$|Aspect {{oriented}} {{software development}} is an emerging software development technology that seeks new <b>modularizations</b> of software systems, in computing. Today typical enterprise and internet applications have to tackle “concerns ” like security, transactional behavior, logging et al. Many important concerns often crosscut several objects and classes of object oriented systems. AOSD is a favorable model to promote improved separation of concerns, {{leading to the}} production of software systems that are easily maintainable. Nevertheless implementation wise AOSD has made remarkable progress and number of efficient technologies has been developed, but there is no satisfactory design solution for AOSD. This position paper presents an analysis of the design languages for aspect oriented programming paradigm...|$|R
50|$|In October 2008 <b>Modularization</b> of XHTML was {{superseded}} by XHTML <b>Modularization</b> 1.1, which adds an XML Schema implementation. It was itself {{superseded by}} a second edition in July 2010.|$|E
5000|$|Template {{inheritance}} {{and other}} advanced template <b>modularization</b> mechanisms.|$|E
50|$|Factorettes enables <b>modularization</b> or Composability of a Software factory.|$|E
40|$|Abstract. In {{the last}} years, {{reasoning}} over very large ontologies {{became more and}} more important. In our contribution, we propose a reasoning infrastructure, which can perform instance checking and instance retrieval over ontologies with semi-expressive terminological knowledge and large assertional parts. The key idea is to 1) use <b>modularizations</b> of the assertional part, 2) use some kind of intermediate structure to find similarities between individual modules, and 3) store information efficiently on external memory. For evaluation purposes, experiments on benchmark and real world ontologies were carried out. We show that our reasoning infrastructure can handle up to 1 billion ABox assertions. To {{the best of our knowledge}} this is the first system to provide sound and complete reasoning over SHI ontologies with such a huge number of assertions. ...|$|R
40|$|A {{methodology}} for the architectural design of software systems {{is composed of}} three interrelated facilities. First, {{there must be some}} means of capturing the requirements for the system in some primarily non-procedural specification. Second, there must be some means for describing potential <b>modularizations</b> of the system in some primarily pseudo-procedural design which captures the essential detail concerning the modules; interfaces and their interactions. Finally, there must be some means of determining whether a system design appropriately meets the system specification. In this paper, we present a design methodology based on the use of event and event sequence descriptions. We first give a brief definition of the Design Realization, Evaluation and Modelling (DREAM) system and its description language as they relate to an event-based design method. Then we define the design method and give a simple example...|$|R
40|$|Shipbuilding {{has been}} {{severely}} {{affected by the}} global economic crisis. Demand for new ships has collapsed world wide since summer 2008 causing an unprecedented levels of overcapacity in the global cargo ship fleets. The current crisis gives impulses for a radical think to adopt new designs to reduce the life cycle costs and to decrease the environmental impact. Leading shipping companies recognise that low life cycle cost and low emission save costs, open quality sensitive markets and will be the key driver to profitability in the future. The speaker will present some possible techniques to improve the link between design and production in order to boost the competitiveness of worldwide shipyards. <b>Modularizations,</b> ease of manufacturing, standardization, virtual reality, production simulation, product life cycle management, are some of these techniques illustrated in the presentation. The speaker will also draw the trends for the future years...|$|R
5000|$|JEP 253: Prepare JavaFX UI Controls and CSS APIs for <b>Modularization</b> ...|$|E
50|$|<b>Modularization</b> {{provides}} an abstract collection of components through which XHTML can be subsetted and extended. The feature {{is intended to}} help XHTML extend its reach onto emerging platforms, such as mobile devices and Web-enabled televisions. The initial draft of <b>Modularization</b> of XHTML became available in April 1999, and reached Recommendation status in April 2001.|$|E
50|$|<b>Modularization</b> and reuse are {{fundamental}} concepts along with object-orientation, component-orientation and data independence.|$|E
40|$|The Design Structure Matrix (DSM) {{methodology}} and the Net Option Value (NOV) model {{have been used}} before to show how aspects can add value to a design. Following with an in-depth analysis of that study, this paper demonstrates how aspects can be beneficial as well as detrimental. The structural transformations involved in aspect <b>modularizations</b> are carefully analyzed {{in the context of}} DSMs. This analysis exposes the unique reversion effect on dependencies that aspect modules are known for. To capture that effect within the NOV model, we extend its original set of six modular operators with an additional reversion operator. Using a design case study, its NOV worksheet and NOV experiments’ curves are presented to show a simulation of the evolutionary patterns of modules, including aspect modules. These patterns show how subtle dependencies, or the lack of them, bring down, or up, the value of an existing design. Based on the observations made in this case study, preliminary design guidelines for aspects are formulated...|$|R
40|$|The {{central role}} of “platform ” {{products}} and services in mediating the activities of disaggregated “clusters ” or “ecosystems ” of firms has been widely recognized. But platforms and the systems {{in which they are}} embedded are very diverse. In particular, platforms may exist within firms as product lines, across firms as multi-product systems, and in the form of multi-sided markets. In this paper we argue that there is a fundamental unity in the architecture of platforms. Platform architectures are <b>modularizations</b> of complex systems in which certain components (the platform itself) remain stable, while others (the complements) are encouraged to vary in crosssection or over time. Among the most stable elements in a platform architecture are the modular interfaces that mediate between the platform and its complements. These interfaces are even more stable than the interior core of the platform, thus control over the interfaces amounts to control over the platform and its evolution. We describe three ways of representing platform architectures: network graphs, design structure matrices and layer maps. We conclude by addressing a number of fundamental strategic questions suggested by a unified view of platforms. ...|$|R
40|$|This article {{constructs}} {{a theory}} of the location of transactions and the boundaries of firms in a productive system. It proposes that systems of production {{can be viewed as}} networks, in which tasks-cum-agents are the nodes and transfers-of material, energy and information-between tasks and agents are the links. Transactions are defined as mutually agreed-upon transfers with compensation and are located within the task network. Placing a transaction in a particular location in turn requires work to define, count (or measure), and pay for the transacted objects. The costs of this work (labeled mundane transaction costs) are generally low at the thin crossing points of the task network, which correspond to module boundaries. Therefore, transactions {{are more likely to be}} located at module boundaries than in their interiors. Several implications arise from this theory. Among these: <b>Modularizations</b> create new module boundaries, hence new transaction locations. Areas in the task network where transfers are dense and complex should be located in transaction-free zones, so that the cost of transacting does not overburden the system. The thin crossing points between transaction-free zones constitute breakpoints, where firms and industries may split apart. Copyright 2008, Oxford University Press. ...|$|R
5000|$|JSR 376: <b>Modularization</b> of the JDK under Project Jigsaw (Java Platform Module System) ...|$|E
5000|$|Technological <b>modularization</b> or {{standardization}} and {{the pervasiveness}} of {{information and communication technologies}} (ICT) ...|$|E
50|$|Modular {{function}} deployment (MFD) is {{a systematic}} method and procedure for company-supportive product <b>modularization.</b>|$|E
40|$|Previous {{studies have}} shown that the {{packaging}} RNA (pRNA) of bacteriophage phi 29 DNA packaging motor folds into a compact structure, constituting a RNA nanoparticle that can be modularized with functional groups as a nanodelivery system. pRNA nanoparticles can also be self-assembled by the bipartite approach without altering folding property. The present study demonstrated that 2 ′-F-modified pRNA nanoparticles were readily manufactured through this scalable bipartite strategy, featuring total chemical synthesis and permitting diverse functional <b>modularizations.</b> The RNA nanoparticles were chemically and metabolically stable and demonstrated a favorable pharmacokinetic (PK) profile in mice (half-life (T 1 / 2) : 5 – 10 hours, clearance (Cl) : < 0. 13  l/kg/hour, volume of distribution (Vd) : 1. 2  l/kg). It did not induce an interferon (IFN) response nor did it induce cytokine production in mice. Repeat intravenous administrations in mice up to 30  mg/kg did not result in any toxicity. Fluorescent folate-pRNA nanoparticles efficiently and specifically bound and internalized to folate receptor (FR) -bearing cancer cells in vitro. It also specifically and dose-dependently targeted to FR+ xenograft tumor in mice with minimal accumulation in normal tissues. This first comprehensive pharmacological study suggests that the pRNA nanoparticle had all the preferred pharmacological features to serve as an efficient nanodelivery platform for broad medical applications...|$|R
40|$|International audienceAn abelian k-linear semisimple {{category}} {{having a}} finite number of simple objects, and endowed with a ribbon structure, is called premodular. It is modular (in the sense of Turaev) if the so-called S-matrix is invertible. A modular category defines invariants of 3 -manifolds and a TQFT ([T]). When is it possible to construct a modularisation of a given premodular category, i. e. a functor to a modular category preserving the structures and ‘dominant' in a certain sense? It turns out (2. 3) that this amounts essentially to making ‘transparent' objects trivial. We give a full answer to this problem in the case when k is a field of char. 0 (as well as partial answers in char. p) : under a few obvious hypotheses, a premodular category admits a modularisation, which is unique (th. 3. 1, and cor. 3. 5 in char. 0) The proof relies on two main ingredients: a new and very simple criterion for the S-matrix to be invertible (1. 1) and Deligne's internal characterization of tannakian categories in char. 0 [D]. When simple transparent objects are invertible, the criterion is simpler (4. 2) and the modularisation can be described more explicitly (prop. 4. 4). We conclude with two examples: the premodular categories associated with quantum and at roots of unity; in the first case, we obtain modular categories which were built independently by C. Blanchet [B]; in the second case, we obtain <b>modularizations</b> in all the cases where Y. Yokota [Y] found Reshetikhin-Turaev invariants of 3 -manifolds, thereby improving as well as explaining Yokota's results...|$|R
40|$|During {{the design}} and {{construction}} phases of building projects, domain experts iteratively exchange building information models. One of their goals {{is to ensure that}} the requirements and objectives of a proposed project are satisfied. In addition, most building information modeling software currently implements heterogeneous mapping processes in their IFC interfaces that bind their native models to the IFC format. However, such exchanges frequently do not realize intended geometric transformations, project requirements, and required syntactic and semantic conditions in building model data, exacerbating the problem of model integrity and resulting in expensive changes during the construction and operation phases. These problematic issues have been addressed by the development of solid frameworks for validating a building design. This paper surveys six currently available applications for validating building design data and identifies their strengths and weaknesses: The Express Engine&# 39;s EXPRESSO, the JDSAI (TM), the EXPRESS Data Manager (TM), the IFC server ActiveX Component, the IfcDoc, and the Solibri Model Checker (R). We also structured the validation processes into three types of tasks: I) a syntax check of the assurance of compliance with the IFC schema defined by the EXPRESS language, 2) semantic and syntactic assessment in terms of conformity to model view definitions, which consist of concept <b>modularizations,</b> and 3) the validation of design programming requirements that evaluates regulations, project criteria, owner requirements, and functional performance. The purpose of this survey, based on available software that supports the validation of building model data for these three types of interoperability issues, is to integrate diverse checking approaches, as a basis for improving what are now widely distributed efforts. (C) 2015 Elsevier B. V. All rights reserved...|$|R
50|$|One of {{the major}} {{research}} meetings on ontology <b>modularization</b> is the International Workshop on Modular Ontologies series.|$|E
5000|$|Techniques like scoping, <b>modularization,</b> and {{dependency}} {{management are}} heavily utilized and baked {{into the core}} of Seed.|$|E
5000|$|<b>Modularization</b> within firms {{leads to}} the {{disaggregation}} of the traditional form of hierarchical governance. The firm is decomposed into relatively small autonomous organizational units (modules) to reduce complexity. <b>Modularization</b> leads to a structure, in which the modules integrate strongly interdependent tasks, while the interdependencies between the modules are weak. In this connection the dissemination of modular organizational forms has been facilitated by the widespread efforts {{of the majority of}} large firms to re-engineer, refocus and restructure. These efforts usually involve a strong process-orientation: the complete service-provision process of the business is split up into partial processes, which can then be handled autonomously by cross-functional teams within organizational units (modules). The co-ordination of the modules is often carried out by using internal market mechanisms, in particular by the implementation of profit centers. Overall, <b>modularization</b> enables more flexible and quicker reaction to changing general or market conditions. Building on the above principles, many alternative forms of <b>modularization</b> of firms are possible. However, it is crucial to note that <b>modularization</b> is not an independent and self-contained organizational concept, but rather consists of several basic ideas, which are integral parts of other organizational concepts. These central ideas can be found in every firm. Accordingly, it is not sensible to characterize a firm as [...] "modular" [...] or as [...] "not modular", because firms are always modular to a some degree.|$|E
40|$|Recent studies {{point to}} major {{problems}} in today's software systems. Problems in cost, reliability, maintainability, and poor responsiveness to user requirements have their {{origin in the}} early phases of the system development effort. Although increasing awareness of poor design practice has stimulated several research efforts toward making the "detailed design" process more "systematic," there is a significant need for a computer-aided methodology to help designers cope with the complex design process. A framework is established for organizing activities in support of one important aspect of "detailed design," the organization of processes into appropriate process groups and program modules. A computer-aided methodology is presented for analysis of variety of inter-process relationships in the determination of effective <b>modularizations.</b> The proposed methodology extends current software engineering practice through partial automation of an important software engineering problem, the effective structuring of processes according to multiple design criteria. Multiple design criteria are used to determine inter-process relationships. The system accomodates a number of design criteria including volume of data transport, distribution of data references, information and control distribution. The methodology begins with the assignment of a graph structure to subsystem components and their interdependencies. The resulting graph is partitioned in determination of subgraphs (modules) with strong intra-dependencies and weak inter-dependencies. The set of subgraphs define modules which satisfy principles of high module strength and low module coupling. The decomposition method used also produces a hierarchical structure of modules with little resource sharing. The resulting design limits "reference distribution" and "information distribution" between modules, which results in reduction of complexity of the total structure. Analytical tools in support of these activities are presented to illustrate support of the methodology by a pilot study...|$|R
50|$|In 2012, US Army Africa was re-designated as US Army Africa (Ninth Army) {{under the}} Army <b>modularization</b> program.|$|E
50|$|AOP {{includes}} programming {{techniques and}} tools {{that support the}} <b>modularization</b> of concerns {{at the level of}} the source code.|$|E
