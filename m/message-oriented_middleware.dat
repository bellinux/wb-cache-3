142|5|Public
5000|$|AMQP — Advanced Message Queuing Protocol, an {{application}} layer protocol for <b>message-oriented</b> <b>middleware.</b>|$|E
5000|$|Typical {{users of}} this pattern are web-servers (as {{mentioned}} above), object- and <b>message-oriented</b> <b>middleware</b> ...|$|E
5000|$|XMPP is a {{communications}} protocol for <b>message-oriented</b> <b>middleware</b> based on XML (Extensible Markup Language).|$|E
40|$|The <b>message-oriented</b> {{pervasive}} <b>middleware</b> {{is getting}} considerable attentions in recent years. This type of middleware supports asynchronous, loosely-coupled, and reliable communication between software entities. However, {{little research has}} been done on service discovery, activation, and failure recovery issues in a <b>message-oriented</b> pervasive <b>middleware.</b> In this paper, we propose a community-based approach to deal with these issues. First, we define the Pervasive Node and Pervasive Communities object models. Based on the above models, community managers perform the service activation and failure recovery by negotiating on top of SSDP+, an enhanced version of SSDP. Next, we evaluate the feasibility of this work by implementing five pervasive services that support autonomous service activation and failure recovery. Finally, experiment results on service activation time as well as failure recovery time are presented and discussed. 1...|$|R
40|$|Abstract. Transportation of Dangerous Goods {{represents}} a sensitive problem due its congenital high potential risk of causing disaster if an accident occurs. Transportation of Dangerous Goods Risk Management systems reduce {{the possibility of}} both accidental disasters and terrorist attacks detecting unusual events and blocking possible threats. Cloud computing can facilitate the development of such kinds of systems thanks to new emerging paradigms and technologies. In this paper, we discuss {{the design of a}} new <b>Message-Oriented</b> Cloud <b>Middleware</b> for Cloud, {{that can be used to}} develop a Cloud-based Transportation of Dangerous Goods Risk Management system. More specifically, we investigate issues on Transportation of Dangerous Goods, in order to focus the attention on the requirements of the Risk Management system. Then, we describe how to use the <b>Message-Oriented</b> Cloud <b>Middleware</b> for Cloud architecture and the necessary utilities in particular here for supporting Transportation of Dangerous Goods. Key words: message oriented middleware, cloud computing, federation, service provisioning, planetary system model...|$|R
5000|$|The Object Management Group's [...] Data Distribution Service (DDS) {{provides}} <b>message-oriented</b> Publish/Subscribe (P/S) <b>middleware</b> {{standard that}} aims to enable scalable, real-time, dependable, high performance and interoperable data exchanges between publishers and subscribers. The standard provides interfaces to C++, C++11, C, Ada, Java and Ruby.|$|R
5000|$|Advanced Message Queuing Protocol (AMQP) {{provides}} an open standard application layer protocol for <b>message-oriented</b> <b>middleware.</b>|$|E
5000|$|<b>Message-oriented</b> <b>middleware</b> {{appliances}} - are hardware devices {{supporting the}} sending and receiving of messages between distributed systems.|$|E
50|$|There is no global {{standard}} for enterprise service bus concepts or implementations.Most providers of <b>message-oriented</b> <b>middleware</b> {{have adopted the}} enterprise service bus concept as de facto {{standard for}} a service-oriented architecture. The implementations of ESB use event-driven and standards-based <b>message-oriented</b> <b>middleware</b> in combination with message queues as technology frameworks. However, some software manufacturers relabel their existing middleware and communication solutions as ESB without adopting the crucial aspect of a bus concept.|$|E
40|$|The extreme {{heterogeneity}} of networked embedded plat-forms makes both design and reuse of applications really hard. These facts decrease portability. A middleware is the software layer that allows to abstract the actual char-acteristics of each embedded platform. Using a middle-ware decreases {{the difficulty in}} designing applications, but programming for different middlewares is still a barrier to portability. This paper presents a design methodology based on an abstract middleware environment that allows to abstract even the services provided. This is gained by allowing the designer to smoothly move across different de-sign paradigms. As a proof, the paper shows how to mix and exchange applications between tuple-space and <b>message-oriented</b> based <b>middleware</b> environments. ...|$|R
40|$|Many {{different}} <b>message-oriented</b> <b>middlewares</b> (MOM) {{exist today}} on the market. With different underlying designs, purposes and features, {{it is not easy}} to make the right choice of MOM for your system. The IT company Nordicstation is in such a situation where they need to make a choice of MOM. They currently own a system called Sharelock which generates reports about violations of financial assets trad- ing. They wish to make the process of generating a report more asynchronous by using a MOM and they have a couple of requirements. This thesis was carried out with the purpose of finding the most suitable products for the system in mind, compare their features, performance, licenses and ease-of- use. This was accomplished by analysing their installation process, monitoring in- terfaces, documentation on their websites and performance in a simple throughput test. The results showed that RabbitMQ was the strongest candidate. It had good per- formance, an attractive web interface for monitoring, an easy installation and it also offered commercial support. Apache Artemis was also found to be an attractive choice but it did not have a web interface which made it hard to manage the system.  Idag finns det många meddelandebaserade mellanprogramvaror (MOM) på marknaden. Dessa har olika grundläggande designer, syften och kännetecken vilket kan göra det svårt att göra ett bra val av MOM för ett visst system. IT-företaget Nordicstation befinner sig i en sådan situation där de behöver göra ett val av MOM. De har ett system som kallas Sharelock som genererar rapporter om regelbrott in- om värdepappershandeln. De vill göra processen mer asynkron genom att använda en MOM och de har ett antal krav på produkten. Det här examensarbetet utfördes med syftet att hitta de mest passande produkter- na för det tänka systemet, jämföra deras särdrag, prestanda, licenser och anvä- ndarvänlighet. Detta gjordes genom att analysera deras installationsprocess, övervakningsgränssnitt, dokumentation på deras hemsida och prestanda i ett en- kelt prestandatest. Resultaten visade att RabbitMQ var den starkaste kandidaten. Den hade bra prestanda, ett attraktivt webbgränssnitt, en enkel installation och den erbjöd också kommersiell support åt kunder. Apache Artemis var också ett attraktivt val men den hade inget webbgränssnitt vilket gjorde det svårt att övervaka och hantera sys- temet. ...|$|R
50|$|OpenWire is {{a binary}} {{protocol}} designed {{for working with}} <b>message-oriented</b> <b>middleware.</b> It is the native wire format of ActiveMQ.|$|E
5000|$|An {{additional}} trend sees <b>message-oriented</b> <b>middleware</b> functions {{being implemented}} in hardware - usually FPGAs or other specialized silicon chips.|$|E
50|$|Talarian was a {{provider}} of real-time infrastructure software. Now part of TIBCO, it was a veteran provider of <b>message-oriented</b> <b>middleware.</b>|$|E
50|$|In computing, Oracle Advanced Queuing (AQ) {{is a sort}} of <b>message-oriented</b> <b>middleware</b> {{developed}} by Oracle Corporation and integrated into its Oracle database.|$|E
5000|$|Loose {{coupling}} in broader distributed system design {{is achieved by}} the use of transactions, queues provided by <b>message-oriented</b> <b>middleware,</b> and interoperability standards.|$|E
5000|$|Enterprise service bus (ESB) {{is defined}} by the Burton Group [...] as [...] "some type of {{integration}} middleware product that supports both <b>message-oriented</b> <b>middleware</b> and Web services".|$|E
50|$|<b>Message-oriented</b> <b>middleware</b> (MOM) is a {{class of}} {{software}} used to implement computer based business document exchange. Such systems provide proof of delivery services by employing techniques such as logging each send/receive activity.|$|E
50|$|Enterprise Integration Patterns {{is a book}} by Gregor Hohpe and Bobby Woolf and {{describes}} 65 patterns {{for the use of}} enterprise application integration and <b>message-oriented</b> <b>middleware</b> {{in the form of a}} pattern language.|$|E
50|$|The Advanced Message Queuing Protocol (AMQP) {{is an open}} {{standard}} {{application layer}} protocol for <b>message-oriented</b> <b>middleware.</b> The defining features of AMQP are message orientation, queuing, routing (including point-to-point and publish-and-subscribe), reliability and security.|$|E
50|$|XMPP is {{also used}} in {{deployments}} of non-IM services, including smart grid systems such as demand response applications, <b>message-oriented</b> <b>middleware,</b> and {{as a replacement for}} SMS to provide text messaging on many smartphone clients.|$|E
50|$|Historically, {{there was}} a lack of {{standards}} governing the use of <b>message-oriented</b> <b>middleware</b> that has caused problems. Most of the major vendors have their own implementations, each with its own application programming interface (API) and management tools.|$|E
50|$|A message {{queueing}} {{service is}} a <b>message-oriented</b> <b>middleware</b> or MOM deployed in a compute cloud using {{software as a service}} model. Service subscribers access queues and or topics to exchange data using point-to-point or publish and subscribe patterns.|$|E
5000|$|Developed by Dresdner Kleinwort [...] to {{integrate}} its applications with <b>Message-oriented</b> <b>middleware</b> (MOM), whilst avoiding vendor lock-in in the process, Openadaptor {{has since been}} open sourced in the first such initiative {{in the world by}} an investment bank.|$|E
50|$|SmartSockets was {{the main}} product of Talarian. It is a {{real-time}} <b>message-oriented</b> <b>middleware</b> (MOM) which is scalable and fault tolerant. Its programming model is built specifically to offer high-speed interprocess communication (IPC) for multiprocessor architecture, scalability and reliability.|$|E
50|$|Publish-subscribe is {{a sibling}} {{of the message}} queue paradigm, and is {{typically}} {{one part of a}} larger <b>message-oriented</b> <b>middleware</b> system. Most messaging systems support both the pub/sub and message queue models in their API, e.g. Java Message Service (JMS).|$|E
5000|$|Queue Manager: {{a system}} service that {{provides}} a logical container for the message queue. It is responsible for transferring data to other queue managers via message channels. Although not strictly required for <b>message-oriented</b> <b>middleware,</b> is an IBM MQ prerequisite.|$|E
50|$|The {{message queue}} {{paradigm}} is a sibling of the publisher/subscriber pattern, and is typically {{one part of}} a larger <b>message-oriented</b> <b>middleware</b> system. Most messaging systems support both the publisher/subscriber and message queue models in their API, e.g. Java Message Service (JMS).|$|E
50|$|Transport Framework - We have a {{clean and}} simple {{abstraction}} for integrating and using Transports (i.e., senders and listeners for SOAP over various protocols such as SMTP, FTP, <b>message-oriented</b> <b>middleware,</b> etc.), and {{the core of the}} engine is completely transport-independent.|$|E
50|$|NATS is an {{open source}} {{messaging}} system (sometimes called <b>message-oriented</b> <b>middleware).</b> The NATS server is written in the Go programming language. Client libraries to interface with the server are available for dozens of major programming languages. The core design principles of NATS are performance, scalability, and ease of use.|$|E
50|$|In <b>message-oriented</b> <b>middleware</b> solutions, fan-out is a {{messaging}} pattern used {{to model}} an information exchange that implies the delivery (or spreading) {{of a message}} to one or multiple destinations possibly in parallel, and not halting the process that executes the messaging to wait for any response to that message.|$|E
50|$|Many <b>message-oriented</b> <b>middleware</b> {{implementations}} {{depend on}} a message queue system. Some implementations permit routing logic to be provided by the messaging layer itself, while others depend on client applications to provide routing information or allow for a mix of both paradigms. Some implementations make use of broadcast or multicast distribution paradigms.|$|E
50|$|ZeroMQ (also spelled ØMQ, 0MQ or ZMQ) is a {{high-performance}} asynchronous messaging library, aimed at use in distributed or concurrent applications. It provides a message queue, but unlike <b>message-oriented</b> <b>middleware,</b> a ZeroMQ system can run without a dedicated message broker. The library's API {{is designed to}} resemble that of Berkeley sockets.|$|E
5000|$|<b>Message-oriented</b> <b>{{middleware}}</b> (MOM) [...] is middleware where transactions {{or event}} notifications are delivered between disparate systems or components {{by way of}} messages, often via an enterprise messaging system. With MOM, messages sent to the client are collected and stored until they are acted upon, while the client continues with other processing.|$|E
5000|$|SPECjms2007, Java Message Service performance. SPECjms2007 is {{the first}} industry-standard {{benchmark}} for evaluating the performance of enterprise <b>message-oriented</b> <b>middleware</b> servers based on JMS (Java Message Service). It provides a standard workload and performance metrics for competitive product comparisons, {{as well as a}} framework for indepth performance analysis of enterprise messaging platforms.|$|E
50|$|HornetQ is an {{open source}} {{asynchronous}} messaging project from JBoss. It {{is an example of}} <b>Message-oriented</b> <b>middleware.</b> HornetQ {{is an open}} source project to build a multi-protocol, embeddable, very high performance, clustered, asynchronous messaging system. During much of its development, the HornetQ code base was developed under the name JBoss Messaging 2.0.|$|E
