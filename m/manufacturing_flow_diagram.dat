1|2545|Public
40|$|A {{standard}} is presented for manufacture, installation, and quality control of eight types of interconnecting wire harnesses. The processes, process controls, and inspection and test requirements reflected {{are based on}} acknowledgment of harness design requirements, acknowledgment of harness installation requirements, identification of the various parts, materials, etc., utilized in harness manufacture, and formulation of a typical <b>manufacturing</b> <b>flow</b> <b>diagram</b> for identification of each manufacturing and quality control process, operation, inspection, and test. The document covers interconnecting wire harnesses defined in the design standard, including type 1, enclosed in fluorocarbon elastomer convolute, tubing; type 2, enclosed in TFE convolute tubing lines with fiberglass braid; type 3, enclosed in TFE convolute tubing; and type 5, combination of types 3 and 4. Knowledge gained through experience on the Saturn 5 program coupled with recent advances in techniques, materials, and processes was incorporated...|$|E
40|$|Abstract: Value Stream Mapping has the {{reputation}} of uncovering waste in manufacturing, production and business processes by identifying and removing or streamlining value-added steps and eliminating non-value-added steps. The various process times for manufacturing a mono block pump were obtained from a pump <b>manufacturing</b> industry. The <b>flow</b> <b>diagram</b> showing the process is drawn to reflect {{the current state of}} the operation. The non-value actions are identified in each step and between each step by their waste of time and resources. The process is analyzed for opportunity to drastically reduce and simplify it to the fewest actions necessary. By reducing waste the proportion of value adding time in the whole process rises and the process throughput speed is increased. This makes the redesigned process more effective (the right things are being done) and more efficient (needing fewer resources). The reengineered process is flow charted in its future state with process steps and information flows redesigned, simplified and made less expensive. This paper addresses the application of lean manufacturing concepts to the pump manufacturing industry...|$|R
50|$|Process <b>flow</b> <b>diagrams</b> of {{multiple}} process units within a large industrial plant will usually contain less detail {{and may be}} called block <b>flow</b> <b>diagrams</b> or schematic <b>flow</b> <b>diagrams.</b>|$|R
5000|$|Such {{chemical}} processes can be illustrated generally as block <b>flow</b> <b>diagrams</b> or {{in more detail}} as process <b>flow</b> <b>diagrams.</b> Block <b>flow</b> <b>diagrams</b> show the units as blocks and the streams flowing between them as connecting lines with arrowheads to show direction of flow.|$|R
5000|$|Common {{alternative}} names include: flow chart, process flowchart, functional flowchart, process map, process chart, functional process chart, {{business process}} model, process model, process <b>flow</b> <b>diagram,</b> work <b>flow</b> <b>diagram,</b> business <b>flow</b> <b>diagram.</b> The terms [...] "flowchart" [...] and [...] "flow chart" [...] are used interchangeably.|$|R
50|$|The Functional <b>flow</b> block <b>diagram</b> (FFBD) is a multi-tier, time-sequenced, {{step-by-step}} <b>flow</b> <b>diagram</b> of the system’s functional flow.The diagram {{is developed}} in the 1950s and widely used in classical systems engineering. The Functional <b>Flow</b> Block <b>Diagram</b> is {{also referred to as}} Functional <b>Flow</b> <b>Diagram,</b> functional block <b>diagram,</b> and functional <b>flow.</b>|$|R
5000|$|The process <b>flow</b> <b>diagram</b> {{below is}} an example of a {{schematic}} or block <b>flow</b> <b>diagram</b> and depicts the various unit processes within a typical oil refinery: ...|$|R
50|$|Data <b>flow</b> <b>diagrams</b> (DFDs) {{are one of}} {{the three}} {{essential}} perspectives of structured systems analysis and design method (SSADM). The sponsor of a project and the end users will need to be briefed and consulted throughout all stages of a system's evolution. With a data <b>flow</b> <b>diagram,</b> users are able to visualize how the system will operate, what the system will accomplish, and how the system will be implemented. The old system's data <b>flow</b> <b>diagrams</b> can be drawn up and compared with the new system's data <b>flow</b> <b>diagrams</b> to draw comparisons to implement a more efficient system. Data <b>flow</b> <b>diagrams</b> can be used to provide the end user with a physical idea of where the data they input ultimately has an effect upon the structure of the whole system from order to dispatch to recook. How any system is developed can be determined through a data <b>flow</b> <b>diagram.</b>|$|R
40|$|To {{consider}} possible ways {{to develop}} data <b>flow</b> <b>diagrams</b> • To identify problems with data <b>flow</b> <b>diagrams</b> • To see extensions of data <b>flow</b> <b>diagrams</b> to include control elements as control <b>flow</b> <b>diagrams</b> • To describe control {{in terms of}} state transition systems 29 April 2003 31 T 4 /IT 52 Commercial Systems Development 2 Developing data <b>flow</b> <b>diagrams</b> • No fixed rules about how to develop a data <b>flow</b> <b>diagram</b> in a given situation • At best, we can suggest methods dependent on the particular situation • Complication {{since there is no}} one DFD for each situation – if the DFDs of two individuals are identical then some replication has taken place – two analysts working independently may choose the same external entities, the same data stores, and same data items entering the system • A DFD is complete only when it feels right (Always ask a friend!...|$|R
50|$|Control <b>flow</b> <b>diagrams</b> were {{developed}} in the 1950s, and are widely used in multiple engineering disciplines. They {{are one of the}} classic business process modeling methodologies, along with flow charts, data <b>flow</b> <b>diagrams,</b> functional <b>flow</b> block <b>diagram,</b> Gantt charts, PERT diagrams, and IDEF.|$|R
25|$|The Functional <b>flow</b> block <b>diagram</b> (FFBD) is a multi-tier, time-sequenced, {{step-by-step}} <b>flow</b> <b>diagram</b> of the system’s functional flow.|$|R
40|$|This report {{looks at}} the need for {{structured}} techniques and more, the need for computer implementations of these techniques. In particular I look at data <b>flow</b> <b>diagrams</b> (refer chapter 3), {{one of the most}} important analysis tools and document my own design and implementation of a computer tool for creating and manipulating data <b>flow</b> <b>diagrams.</b> MacDaffy (Macintosh data flow diagrammer) is aimed at increasing the productiveness of data <b>flow</b> <b>diagrams</b> as an analysis tool...|$|R
40|$|The Department of Energy Office of Fissile Materials Disposition (DOE-MD) is {{planning}} a facility to disassemble pits and convert the plutonium in the pits into a form suitable for international inspection. The facility, called the Advanced Recovery and Integrated Extraction System (ARIES) Facility, must handle much of the 38. 2 metric tons of plutonium declared excess to national security needs in ten years of operation. A process logic <b>flow</b> <b>diagram</b> for the ARIES Facility is presented here. This <b>flow</b> <b>diagram</b> is based on and supported by a library of fact sheets on topics that impact {{the design of the}} facility. Developing the <b>flow</b> <b>diagram</b> raised issues that significantly impact the design of the facility. These issues are discussed later in this document, and for some issues, discussed in greater detail in the appropriate fact sheets. The <b>flow</b> <b>diagram</b> is designed to show requirements that dictate the need for space and/or equipment. In physically designing the facility, the same space or equipment may be used to meet several requirements. The <b>flow</b> <b>diagram</b> merely shows the activities that need to occur to meet requirements for the facility. The <b>flow</b> <b>diagram</b> is not associated with any DOE site. The requirements shown on the <b>flow</b> <b>diagram</b> may be met by an existing facilities at a given site. The <b>flow</b> <b>diagram</b> and this write up do not contain a great deal of detail on how each step in the diagram is performed. At this stage of design, the <b>flow</b> <b>diagram</b> merely identifies the need for the activity. Examples for some of the activities are given in the appropriate fact sheet. How the steps are performed becomes more defined as the design of the facility progresses...|$|R
40|$|Designers of {{software}} for real-time systems often use models, {{in the form}} of data flow/control <b>flow</b> <b>diagrams,</b> to express system behavior in a graphical notation that can be understood easily by users and by programmers, and from which designers can generate a software architecture. The research described in this paper is motivated by the desire to provide an automated designer's assistant that can generate software architectures for real-time systems directly from models expressed as data flow/control <b>flow</b> <b>diagrams.</b> To achieve this goal, an automated designer's assistant must be capable of interpreting <b>flow</b> <b>diagrams</b> in semantic, rather than syntactic, terms. Unfortunately, <b>flow</b> <b>diagrams,</b> with a limited number of syntactic elements, are seldom expressive enough to depict the semantic concepts that a designer intends; instead, most design methods that include <b>flow</b> <b>diagrams</b> allow the designer to augment those diagrams with a textual description to express semantic information. This pape [...] ...|$|R
5000|$|<b>Flow</b> <b>diagram</b> is a {{collective}} {{term for a}} <b>diagram</b> representing a <b>flow</b> or set of dynamic relationships in a system. The term <b>flow</b> <b>diagram</b> is also used as a synonym for flowchart, and sometimes as a counterpart of the flowchart.|$|R
40|$|Using {{operational}} semantic techniques, {{an extended}} variant of structured analysis style data <b>flow</b> <b>diagrams</b> {{is given a}} formal semantics. This semantics allows one to describe both how information is processed and the dynamic behavior of the system. The ability to describe dynamic behavior is an extension to the traditional notion of data <b>flow</b> <b>diagrams.</b> This semantics {{can serve as a}} target for giving meaning to specification languages that use a graphical notation similar to data <b>flow</b> <b>diagrams...</b>|$|R
40|$|It {{has been}} shown in [SB 96] that a {{particular}} subclass of Formalized Data <b>Flow</b> <b>Diagrams</b> (FDFD's) is Turing equivalent. We call this Turing equivalent subclass of FDFD's persistent flow [...] free Reduced Data <b>Flow</b> <b>Diagrams</b> (PFF [...] RDFD's). PFF [...] RDFD's do not contain persistent flows, reference only values whose types have finite domains, and have enabling conditions that contain no tests for empty flows. In addition, FDFD's do not contain (direct) representations of stores. This raises the question whether any of these common features of traditional Data <b>Flow</b> <b>Diagrams</b> elevates the expressive power of FDFD's, or whether the various subclasses have the same expressive power as FDFD's with these features. This paper addresses this issue of whether persistent flows, arbitrary domains, tests for empty flows or stores are essential features with respect to the expressive power of Formalized Data <b>Flow</b> <b>Diagrams.</b> 2 1. 1 Introduction Traditional Data <b>Flow</b> <b>Diagrams</b> (DFD's) are probably the most widely [...] ...|$|R
50|$|The FFBD {{notation}} {{was developed}} in the 1950s, and is widely used in classical systems engineering. FFBDs are one of the classic business process modeling methodologies, along with flow charts, data <b>flow</b> <b>diagrams,</b> control <b>flow</b> <b>diagrams,</b> Gantt charts, PERT diagrams, and IDEF.|$|R
40|$|This {{calculation}} {{justifies the}} numbers {{used for the}} material balance on the process <b>flow</b> <b>diagrams</b> for the KW Basin Fuel Retrieval Subproject. The purpose of these calculations is to develop the material balances that are documented in the Fuel Retrieval System (FRS) Process <b>Flow</b> <b>Diagrams</b> for future reference. The attached mass calculations were prepared in support of revising the fuel retrieval system process <b>flow</b> <b>diagrams</b> for the 105 K West Basin. The calculations refer to diagram H- 1 - 81164...|$|R
5000|$|A data <b>flow</b> <b>diagram</b> (DFD) is a {{graphical}} {{representation of the}} [...] "flow" [...] of data through an information system. It differs from the flowchart as it shows the data flow instead of the control flow of the program. A data <b>flow</b> <b>diagram</b> {{can also be used}} for the visualization of data processing (structured design). Data <b>flow</b> <b>diagrams</b> were invented by Larry Constantine, the original developer of structured design, based on Martin and Estrin's [...] "data flow graph" [...] model of computation.|$|R
40|$|We {{propose a}} method to {{automatically}} transform synchronous data <b>flow</b> <b>diagrams</b> into synchronous block diagrams. The idea is to use triggers, a mechanism that allows a block to be fired only at selected times. We discuss how to extend the transformation to also cover dynamic data <b>flow</b> <b>diagrams</b> where the number of tokens produced and consumed by blocks is variable. Our method allows widespread tools such as Simulink {{which are based on}} the synchronous block diagram model to be used for data <b>flow</b> <b>diagrams</b> as well. ...|$|R
40|$|In {{this paper}} we {{describe}} {{a part of}} our work on the automatic generation of target code from Stateflow models. We focus on the <b>flow</b> <b>diagrams</b> from the Stateflow component of MATLAB and describe how <b>flow</b> <b>diagram</b> models can be compiled into target code for embedded systems. Moreover, the paper describes a method for analyzing <b>flow</b> <b>diagrams,</b> allowing an efficient code generation. The method described has been implemented as a code generator for Stateflow models and integrated into the TargetLink environment from dSPACE [3, 4]. ...|$|R
5000|$|Chemical Engineering Collection for {{realistic}} process <b>flow</b> <b>diagrams</b> ...|$|R
5000|$|... #Caption: <b>Flow</b> <b>diagram</b> of the split-mix {{combinatorial}} synthesis ...|$|R
50|$|OTMs {{are built}} with {{end-to-end}} data <b>flow</b> <b>diagrams</b> {{very similar to}} traditional DFDs. End to end data <b>flow</b> <b>diagrams</b> decompose an IT system into its various independent, grouped, and shared components. Each component is {{described in terms of}} specific attributes. Components are then connected by communication pathways and protocols.|$|R
40|$|An optimum powered {{explicit}} guidance algorithm {{capable of}} handling all space shuttle exoatospheric maneuvers is presented. The theoretical and practical basis for the currently baselined space shuttle powered flight guidance equations and logic is documented. Detailed <b>flow</b> <b>diagrams</b> for implementing the steering computations for all shuttle phases, including powered return to launch site (RTLS) abort, are also presented. Derivation of the powered RTLS algorithm is provided, as well as detailed <b>flow</b> <b>diagrams</b> for implementing the option. The <b>flow</b> <b>diagrams</b> and equations are compatible with the current powered flight documentation...|$|R
40|$|<b>Flow</b> <b>diagram</b> of (σ_xx, σ_xy) in finite-frequency (ω) {{regime is}} numerically studied for {{graphene}} quantum Hall effect (QHE) system. The ac <b>flow</b> <b>diagrams</b> {{turn out to}} show qualitatively similar behavior as the dc <b>flow</b> <b>diagrams,</b> which can be understood that the dynamical length scale determined by the frequency poses a relevant cutoff for the renormalization flow. Then the two parameter flow is {{discussed in terms of}} the dynamical scaling theory. We also discuss the larger-ω regime which exhibits classical flows driven by the raw frequency ω. Comment: 6 pages, 4 figure...|$|R
40|$|We {{introduce}} {{the concept of}} compactly representing {{a large number of}} state sequences, e. g., sequences of activities, as a <b>flow</b> <b>diagram.</b> We argue that the <b>flow</b> <b>diagram</b> representation gives an intuitive summary that allows the user to detect patterns among large sets of state sequences. Simplified, our aim is to generate a small <b>flow</b> <b>diagram</b> that models the flow of states of all the state sequences given as input. For a small number of state sequences we present efficient algorithms to compute a minimal <b>flow</b> <b>diagram.</b> For a large number of state sequences we show that it is unlikely that efficient algorithms exist. More specifically, the problem is W[1]-hard if the number of state sequences is taken as a parameter. We thus introduce several heuristics for this problem. We argue about the usefulness of the <b>flow</b> <b>diagram</b> by applying the algorithms to two problems in sports analysis. We evaluate the performance of our algorithms on a football data set and generated data. Comment: 18 pages, 8 figure...|$|R
40|$|Abstract—System {{development}} {{life cycle}} (SDLC) {{is a process}} uses during the development of any system. SDLC consists of four main phases: analysis, design, implement and testing. During analysis phase, context <b>diagram</b> and data <b>flow</b> <b>diagrams</b> are used to produce the process model of a system. A consistency of the context diagram to lower-level data <b>flow</b> <b>diagrams</b> {{is very important in}} smoothing up developing process of a system. However, manual consistency check from context diagram to lower-level data <b>flow</b> <b>diagrams</b> by using a checklist is time-consuming process. At the same time, the limitation of human ability to validate the errors is one of the factors that influence the correctness and balancing of the diagrams. This paper presents a tool that automates the consistency check between Data <b>Flow</b> <b>Diagrams</b> (DFDs) based on the rules of DFDs. The tool serves two purposes: as an editor to draw the diagrams and as a checker to check the correctness of the diagrams drawn. The consistency check from context diagram to lower-level data <b>flow</b> <b>diagrams</b> is embedded inside the tool to overcome the manual checking problem...|$|R
5000|$|Configuration {{decision}} control <b>flow</b> <b>diagram,</b> used in {{configuration management}} ...|$|R
5000|$|Control Systems/Signal <b>Flow</b> <b>Diagrams</b> in the Control Systems Wikibook ...|$|R
5000|$|... #Caption: Block <b>flow</b> <b>diagram</b> of the ammonia {{synthesis}} process ...|$|R
5000|$|... #Caption: Material <b>flow</b> <b>diagram</b> between {{activities}} in a layout ...|$|R
5000|$|Problems {{with data}} <b>flow</b> <b>diagrams</b> have {{included}} the following: ...|$|R
5000|$|... #Caption: Process <b>flow</b> <b>diagram</b> for a {{manganese}} refining circuit.|$|R
5000|$|... #Caption: Schematic <b>flow</b> <b>diagram</b> of a fluid {{catalytic}} cracker ...|$|R
