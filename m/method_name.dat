65|3473|Public
2500|$|The {{preconditions}} after [...] "Given" [...] {{correspond to}} the PHP <b>method</b> <b>name</b> to execute: ...|$|E
5000|$|This pointcut matches a method-execution join point, if the <b>method</b> <b>name</b> {{starts with}} [...] "" [...] {{and there is}} exactly one {{argument}} of any type.|$|E
50|$|Object Reference: Objects can be {{accessed}} via object references. To invoke a method in an object, the object reference and <b>method</b> <b>name</b> are given, together with any arguments.|$|E
50|$|LINQ also {{defines a}} set of <b>method</b> <b>names</b> (called {{standard}} query operators, or standard sequence operators), along with translation rules used by the compiler to translate fluent-style query expressions into expressions using these <b>method</b> <b>names,</b> lambda expressions and anonymous types.|$|R
5000|$|In C, C++, D and Kotlin {{programs}} this is {{a function}} named in Java it is a static <b>method</b> <b>named</b> [...] (although the class must be specified at the invocation time), and in C# it is a static <b>method</b> <b>named</b> [...]|$|R
50|$|Dodgson condensation, {{mathematical}} <b>method</b> <b>named</b> {{after its}} inventor, Charles Lutwidge Dodgson.|$|R
5000|$|To invoke an Objective-C method, you replace each colon in the <b>method</b> <b>name</b> {{except the}} last with an underscore. Thus, for example, the NSWindow {{instance}} method [...] becomes [...]|$|E
5000|$|Note, {{that for}} {{operator}} overloading each operator has a name, {{that has to}} be used in the operator overloading syntax, because for example [...] "+" [...] would not be a valid <b>method</b> <b>name</b> in Oxygene.|$|E
5000|$|In C/C++, {{the method}} {{signature}} is the <b>method</b> <b>name</b> {{and the number}} and type of its parameters, {{but it is possible}} to have a last parameter that consists of an array of values:int printf(const char*, ...; ...|$|E
5000|$|The Peierls {{substitution}} <b>method,</b> <b>named</b> {{after the}} original work by R. Peierls ...|$|R
50|$|Also many {{independent}} artists {{choose a}} peer-to-peer file sharing <b>method</b> <b>named</b> BitTorrent Bundle for distribution.|$|R
40|$|Abstract. <b>Method</b> <b>names</b> in Java {{are natural}} {{language}} phrases describing behaviour, encoded {{to make them}} easy for machines to parse. Programmers rely on the meaning encoded in <b>method</b> <b>names</b> to understand code. We know little about the language used in this encoding, its rules and structure, leaving the programmer without guidance in expressing her intent. Yet {{the meaning of the}} <b>method</b> <b>names</b> — or phrases — is readily available {{in the body of the}} <b>methods</b> they <b>name.</b> By correlating names and implementations, we can figure out the meaning of the original phrases, and uncover the rules of the phrase language as well. In this paper, we present an automatically generated proof-of-concept phrase book for Java, based on a large software corpus. The phrase book captures both the grammatical structure and the meaning of method phrases as commonly used by Java programmers. ...|$|R
50|$|Method {{arguments}} {{begin with}} a name labeling the argument {{that is part of}} the <b>method</b> <b>name,</b> followed by a colon followed by the expected argument type in parentheses and the argument name. The label can be omitted.|$|E
50|$|Although {{it seems}} to be very easy to change a <b>method</b> <b>name,</b> code can be broken if {{refactoring}} tools (built into many modern IDE's) are not used to also change all code that refers to the existing method.|$|E
5000|$|In the Java {{programming}} language, {{a method}} signature is the <b>method</b> <b>name</b> {{and the number}} and type of its parameters. Return types and thrown exceptions are {{not considered to be}} a part of the method signature. methodName(parameters) {...}; ...|$|E
50|$|<b>Method</b> <b>names</b> use {{multiple}} lowerCamelCase parts {{separated by}} colons that delimit arguments, like: application:didFinishLaunchingWithOptions:, stringWithFormat: and isRunning.|$|R
50|$|Recently, a Monte Carlo <b>method,</b> <b>named</b> FRESS, was {{developed}} and appears to perform well on HP models.|$|R
5000|$|In mathematics, Laplace's <b>method,</b> <b>named</b> after Pierre-Simon Laplace, is a {{technique}} used to approximate integrals of the form ...|$|R
5000|$|This pointcut matches a method-execution join point, if the <b>method</b> <b>name</b> {{starts with}} [...] "" [...] and [...] is an {{instance}} of type [...] in the [...] package. It {{can be referred to}} using the name [...] "".|$|E
50|$|In {{computer}} programming, especially object-oriented programming, {{a method}} is commonly identified by its unique method signature, which usually includes the <b>method</b> <b>name,</b> and the number, types and order of its parameters. A method signature {{is the smallest}} type of a method.|$|E
5000|$|Handlers: For every HTTP method a handler {{function}} must {{be created}} {{to match the}} dispatch names generated by mkYesod from the parseRoutes template, by prefixing the <b>method</b> <b>name</b> (or the prefix handler if no method stated) to the resource, as described: ...|$|E
30|$|Module {{persists}} {{class and}} interface <b>names.</b> <b>Method</b> persists <b>method</b> <b>names,</b> signature, and return types. Import persists application imports. Package persists application packages. ModuleProperty persists class properties and its type. MethodProperty persists variables belonging to methods.|$|R
30|$|To {{solve the}} {{resistance}} distance, {{there is a}} <b>method</b> <b>named</b> the determinantal formula, which was proposed by Bapat [4].|$|R
5000|$|An attribute's {{characteristics}} {{may include}} a read/write flag, a type, accessor <b>method</b> <b>names,</b> delegations, a default value and lazy initialization.|$|R
5000|$|If a {{codebase}} {{has provided}} an external API that including the existing <b>method</b> <b>name</b> then the existing function {{should not be}} removed, but 'deprecated' over time and finally removed at a future date. In this case the [...] "Copy Method" [...] refactoring {{can be considered as}} an alternative.|$|E
50|$|In {{object-oriented}} programming, {{the command}} pattern is a behavioral design pattern {{in which an}} object is used to encapsulate all information needed to perform an action or trigger an event at a later time. This information includes the <b>method</b> <b>name,</b> the object that owns the method and values for the method parameters.|$|E
5000|$|Queries, or KRPC message {{dictionaries}} with a [...] "y" [...] {{value of}} [...] "q", contain two additional keys; [...] "q" [...] and [...] "a". Key [...] "q" [...] has a string value containing the <b>method</b> <b>name</b> of the query. Key [...] "a" [...] has a dictionary value containing named arguments to the query.|$|E
25|$|On 22 May 2015, a remembrance quarter peal was rung and new <b>method</b> <b>named</b> 'Quintinshill' by bellringers at St Peter's Church, Derby.|$|R
50|$|Several methods {{exist in}} Russian ballet. The {{most widely used}} is the Vaganova <b>method,</b> <b>named</b> after the {{ballerina}} and teacher, Agrippina Vaganova.|$|R
5000|$|... #Caption: The {{patent for}} the arc welding <b>method</b> <b>named</b> Elektrogefest ("Electric Hephaestus") granted to Benardos and his sponsor Stanisław Olszewski in 1887 ...|$|R
50|$|For example, {{in order}} to do some {{refactoring}} and rename a method in a text-based programming language, a developer could either manually edit the respective source code files and change the appropriate occurrences of the old <b>method</b> <b>name</b> into the new name. Alternatively, he or she could use the IDE's refactoring capabilities to make all the necessary changes automatically.|$|E
50|$|Refactoring {{tools that}} aim for {{correctness}} generally need {{a deep and}} sophisticated understanding of the programming language in question. Such an understanding is necessary to e.g. only rename the relevant occurrences of the <b>method</b> <b>name</b> and leave equally-named methods in different scopes untouched. A simple search and replace procedure, however, could not avoid such mistakes and introduce errors into the program.|$|E
5000|$|One {{widely used}} Java coding style {{dictates}} that UpperCamelCase {{be used for}} classes and lowerCamelCase be used for instances and methods.Recognising this usage, some IDEs, such as Eclipse, implement shortcuts based on CamelCase. For instance, in Eclipse's content assist feature, typing just the upper-case letters of a CamelCase word will suggest any matching class or <b>method</b> <b>name</b> (for example, typing [...] "NPE" [...] and activating content assist could suggest [...] ).|$|E
5000|$|To have clearer, more {{understandable}} code, programmers would optimally want {{to change}} <b>method</b> <b>names</b> to reflect exactly what the method does. For example: ...|$|R
5000|$|In the Mohr <b>method,</b> <b>named</b> after Karl Friedrich Mohr, {{potassium}} chromate is an indicator, giving red silver chromate after all chloride ions have reacted: ...|$|R
50|$|The Heaviside {{cover-up}} <b>method,</b> <b>named</b> after Oliver Heaviside, is {{one possible}} approach {{in determining the}} coefficients when performing the partial-fraction expansion of a rational function.|$|R
