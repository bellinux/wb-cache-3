423|464|Public
25|$|The Sweet32 attack breaks all 64-bit block ciphers used in CBC mode {{as used in}} TLS by {{exploiting}} a birthday attack and either a <b>man-in-the-middle</b> <b>attack</b> or injection of a malicious JavaScript into a web page. The purpose of the <b>man-in-the-middle</b> <b>attack</b> or the JavaScript injection is to allow the attacker to capture enough traffic to mount a birthday attack.|$|E
25|$|The TLS_DH_anon and TLS_ECDH_anon key {{agreement}} methods do not authenticate {{the server}} or the user and hence are rarely used {{because those are}} vulnerable to <b>Man-in-the-middle</b> <b>attack.</b> Only TLS_DHE and TLS_ECDHE provide forward secrecy.|$|E
25|$|Another kind {{of attack}} is the {{so-called}} man-in-the-browser attack, {{a variation of the}} <b>man-in-the-middle</b> <b>attack</b> where a Trojan horse permits a remote attacker to secretly modify the destination account number and also the amount in the web browser.|$|E
40|$|Abstract. Recent {{attacks on}} the German {{identity}} card show that a compromised client computer allows for PIN compromise and <b>man-in-the-middle</b> <b>attacks</b> on eID cards. We present a selection of new solutions to that problem which do not require changes in the card specification. All presented solutions protect against PIN compromise attacks, some of them additionally against <b>man-in-the-middle</b> <b>attacks...</b>|$|R
5000|$|... secure {{transfer}} - encrypted {{and signed}} data stream, not vulnerable to <b>man-in-the-middle</b> <b>attacks</b> ...|$|R
3000|$|... and Nb. The {{protocols}} have {{mutual authentication}} property {{to make the}} <b>man-in-the-middle</b> <b>attacks</b> necessarily unsuccessful.|$|R
25|$|In September 2014, {{a variant}} of Daniel Bleichenbacher’s PKCS#1 v1.5 RSA Signature Forgery {{vulnerability}} was announced by Intel Security Advanced Threat Research. This attack, dubbed BERserk, {{is a result of}} incomplete ASN.1 length decoding of public key signatures in some SSL implementations, and allows a <b>man-in-the-middle</b> <b>attack</b> by forging a public key signature.|$|E
25|$|Apart {{from the}} {{performance}} benefit, resumed sessions {{can also be}} used for single sign-on, as it guarantees that both the original session and any resumed session originate from the same client. This is of particular importance for the FTP over TLS/SSL protocol, which would otherwise suffer from a <b>man-in-the-middle</b> <b>attack</b> in which an attacker could intercept the contents of the secondary data connections.|$|E
25|$|The most {{immediate}} {{result of the}} protests was seen in increased internet freedoms. While commentators were divided {{about the extent to}} which the internet contributed to the ousting of Ben Ali from power, Facebook remained accessible to roughly 20% of the population throughout the crisis whilst its passwords were hacked by a country-wide <b>man-in-the-middle</b> <b>attack,</b> YouTube and DailyMotion became available after Ben Ali's ouster, and the Tor anonymity network reported a surge of traffic from Tunisia.|$|E
5000|$|... as {{multiplication}} in [...] is associative. Note {{that this}} procedure is insecure against <b>man-in-the-middle</b> <b>attacks.</b>|$|R
5000|$|Transport Layer Security (TLS) {{can be used}} {{to protect}} the {{communication}} channel from eavesdropping or <b>man-in-the-middle</b> <b>attacks.</b>|$|R
5000|$|Anonymous key exchange, like Diffie-Hellman, {{does not}} provide {{authentication}} of the parties, and is thus vulnerable to <b>man-in-the-middle</b> <b>attacks.</b>|$|R
25|$|Git version 2.6.1, {{released}} on 29 September 2015, contained a patch for a security vulnerability (CVE-2015-7545) which allowed arbitrary code execution. The vulnerability was exploitable if an attacker could convince a victim to clone a specific URL, as the arbitrary commands were {{embedded in the}} URL itself. An attacker could use the exploit via a <b>man-in-the-middle</b> <b>attack</b> if the connection was unencrypted, as they could redirect the user to a URL of their choice. Recursive clones were also vulnerable, since they allowed the controller of a repository to specify arbitrary URLs via the gitmodules file.|$|E
25|$|Signal: An instant messaging, {{voice calling}} and video calling {{application}} for iOS and Android. It uses end-to-end encryption protocols to secure all communications to other Signal users. Signal {{can be used}} to send end-to-end encrypted group messages, attachments and media messages to other Signal users. All calls are made over a Wi-Fi or data connection and are free of charge, including long distance and international. Signal has a built-in mechanism for verifying that no <b>man-in-the-middle</b> <b>attack</b> has occurred. Open Whisper Systems has set up dozens of servers to handle the encrypted calls in more than 10 countries around the world to minimize latency. The clients are published under the GPLv3 license.|$|E
25|$|A {{vulnerability}} of the renegotiation procedure was discovered in August 2009 {{that can lead to}} plaintext injection attacks against SSL 3.0 and all current versions of TLS. For example, it allows an attacker who can hijack an https connection to splice their own requests into the beginning of the conversation the client has with the web server. The attacker can't actually decrypt the client-server communication, so it is different from a typical <b>man-in-the-middle</b> <b>attack.</b> A short-term fix is for web servers to stop allowing renegotiation, which typically will not require other changes unless client certificate authentication is used. To fix the vulnerability, a renegotiation indication extension was proposed for TLS. It will require the client and server to include and verify information about previous handshakes in any renegotiation handshakes. This extension has become a proposed standard and has been assigned the number RFC 5746. The RFC has been implemented by several libraries.|$|E
25|$|Other projects, {{such as the}} EFF's SSL Observatory, {{also make}} use of notaries or similar reporters in {{discovering}} <b>man-in-the-middle</b> <b>attacks.</b>|$|R
50|$|Encryption of {{the data}} sent over DisplayPort, DVI, HDMI, GVIF, or UDI {{interfaces}} prevents eavesdropping of information and <b>man-in-the-middle</b> <b>attacks.</b>|$|R
40|$|Abstract—Song et al. {{recently}} scrutinized {{the security}} of a mutual authentication protocol published as a part of ISO/IEC WD 29167 - 6, denoted as Protocol 1, and showed its lack of protection against <b>man-in-the-middle</b> <b>attacks</b> [8]. In addition, they proposed an improved version, called Protocol 1 +, and claimed resistance against this sort of attacks. Nevertheless, in this letter we show that the new protocol is as insecure as the original protocol against <b>man-in-the-middle</b> <b>attacks...</b>|$|R
25|$|There are a {{wide variety}} of cryptanalytic attacks, and they can be {{classified}} in any of several ways. A common distinction turns on what Eve (an attacker) knows and what capabilities are available. In a ciphertext-only attack, Eve has access only to the ciphertext (good modern cryptosystems are usually effectively immune to ciphertext-only attacks). In a known-plaintext attack, Eve has access to a ciphertext and its corresponding plaintext (or to many such pairs). In a chosen-plaintext attack, Eve may choose a plaintext and learn its corresponding ciphertext (perhaps many times); an example is gardening, used by the British during WWII. In a chosen-ciphertext attack, Eve may be able to choose ciphertexts and learn their corresponding plaintexts. Finally in a <b>man-in-the-middle</b> <b>attack</b> Eve gets in between Alice (the sender) and Bob (the recipient), accesses and modifies the traffic and then forwards it to the recipient. Also important, often overwhelmingly so, are mistakes (generally in the design or use of one of the protocols involved; see Cryptanalysis of the Enigma for some historical examples of this).|$|E
2500|$|Version 5.2 of the RDP {{protocol}} in its default configuration {{is vulnerable}} to a <b>man-in-the-middle</b> <b>attack.</b> [...] Administrators can enable transport layer encryption to mitigate this risk.|$|E
2500|$|For its targets, Stuxnet contains, {{among other}} things, code for a <b>man-in-the-middle</b> <b>attack</b> that fakes {{industrial}} process control sensor signals so an infected {{system does not}} shut down due to detected abnormal behavior. Such complexity is very unusual for malware. The worm consists of a layered attack against three different systems: ...|$|E
5000|$|However, since Dynamic SSL {{is simply}} {{a process that is}} applied to SSL implementation, rather than a new protocol, it remains {{vulnerable}} to protocol vulnerabilities inherent within SSL, namely <b>Man-in-the-Middle</b> <b>attacks.</b> [...] Sharifimehr has proposed a supplementary solution involving Man-in-the-Middle Protection for Dynamic SSL. [...] His algorithm uses a combination of redundant cert verification and key tagging to prevent <b>Man-in-the-Middle</b> <b>attacks</b> and Keyjacking. Most known implementations of Dynamic SSL include Sharifimehr's additional process, described below: ...|$|R
50|$|It is {{recommended}} to use HTTP Strict Transport Security (HSTS) with HTTPS to protect users from <b>man-in-the-middle</b> <b>attacks,</b> especially SSL stripping.|$|R
50|$|This is {{an example}} of a very basic {{authentication}} protocol vulnerable to many threats such as eavesdropping, replay <b>attack,</b> <b>man-in-the-middle</b> <b>attacks,</b> dictionary attacks or brute-force attacks. Most authentication protocols are more complicated in order to be resilient against these attacks.|$|R
2500|$|Encryption {{downgrade}} attacks {{can force}} servers and clients {{to negotiate a}} connection using cryptographically weak keys. In 2014, a <b>man-in-the-middle</b> <b>attack</b> called FREAK was discovered affecting the OpenSSL stack, the default Android web browser, and some Safari browsers. [...] The attack involved tricking servers into negotiating a TLS connection using cryptographically weak 512 bit encryption keys.|$|E
2500|$|Quantum key {{distribution}} {{is vulnerable to}} a <b>man-in-the-middle</b> <b>attack</b> when used without authentication {{to the same extent}} as any classical protocol, since no known principle of quantum mechanics can distinguish friend from foe. As in the classical case, Alice and Bob cannot authenticate each other and establish a secure connection without some means of verifying each other's identities (such as an initial shared secret). If Alice and Bob have an initial shared secret then they can use an unconditionally secure authentication scheme (such as Carter-Wegman,) along with quantum {{key distribution}} to exponentially expand this key, using a small amount of the new key to authenticate the next session. Several methods to create this initial shared secret have been proposed, for example using a 3rd party or chaos theory. Nevertheless, only [...] "almost strongly universal" [...] family of hash functions can be used for unconditionally secure authentication.|$|E
50|$|The {{design of}} the MUTE network is {{vulnerable}} to a <b>man-in-the-middle</b> <b>attack.</b>|$|E
40|$|With {{increased}} use of passive RFID tags, the need for secure lightweight identification protocols arose. HB+ is one such protocol, which was proven secure in the detection-based model, but shown breakable by <b>man-in-the-middle</b> <b>attacks.</b> Trusted-HB is a variant of HB+, specifically designed to resist <b>man-in-the-middle</b> <b>attacks.</b> In this paper, we discuss several weaknesses of Trusted-HB, show that the formal security proof provided by its designers is incorrect, and demonstrate how to break it in realistic scenarios...|$|R
5000|$|An anti-cheating {{mechanism}} {{using an}} RSA-based {{public key cryptography}} authentication system that also attempts (with limited success) to detect and prevent <b>man-in-the-middle</b> <b>attacks.</b>|$|R
30|$|This section classifies all {{potential}} attacks into five categories, such as guessing <b>attacks,</b> replay <b>attacks,</b> <b>man-in-the-middle</b> <b>attacks,</b> node capture attacks, and {{denial of service}} attack.|$|R
50|$|A {{version that}} {{can deal with}} the <b>man-in-the-middle</b> <b>attack</b> has also been advanced.|$|E
5000|$|... #Caption: A {{successful}} ARP {{spoofing attack}} allows an attacker {{to perform a}} <b>man-in-the-middle</b> <b>attack.</b>|$|E
50|$|The Sweet32 attack breaks all 64-bit block ciphers used in CBC mode {{as used in}} TLS by {{exploiting}} a birthday attack and either a <b>man-in-the-middle</b> <b>attack</b> or injection of a malicious JavaScript into a web page. The purpose of the <b>man-in-the-middle</b> <b>attack</b> or the JavaScript injection is to allow the attacker to capture enough traffic to mount a birthday attack.|$|E
40|$|AbstractCurrent mobile {{authentication}} solutions put {{a cognitive}} burden on users {{to detect and}} avoid <b>Man-In-The-Middle</b> <b>attacks.</b> In this paper, we present a mobile authentication protocol named Mobile-ID which prevents <b>Man-In-The-Middle</b> <b>attacks</b> without relying on a human in the loop. With Mobile-ID, the message signed by the secure element on the mobile device incorporates the context information of the connected service provider. Hence, upon receiving the signed message the Mobile-ID server could easily identify {{the existence of an}} on-going attack and notify the genuine service provider...|$|R
40|$|Recent {{studies have}} shown that a {{significant}} number of mobile applications, often handling sensitive data such as bank accounts and login credentials, suffers from SSL vulnerabilities. Most of the time, these vulnerabilities are due to improper use of the SSL protocol (in particular, in its handshake phase), resulting in applications exposed to <b>man-in-the-middle</b> <b>attacks.</b> In this paper, we present MITHYS, a system able to: (i) detect applications vulnerable to <b>man-in-the-middle</b> <b>attacks,</b> and (ii) protect them against these attacks. We demonstrate the feasibility of our proposal by means of a prototype implementation in Android, named MITHYSApp. A thorough set of experiments assesses the validity of our solution in detecting and protecting mobile applications from <b>man-in-the-middle</b> <b>attacks,</b> without introducing significant overheads. Finally, MITHYSApp does not require any special permissions nor OS modifications, as it operates at the application level. These features make MITHYSApp immediately deployable on a large user base...|$|R
5000|$|Encryption {{standards}} - Based on ZRTP, {{which uses}} 128- or 256-bit AES {{together with a}} 3072-bit key exchange system and voice based verification to prevent <b>man-in-the-middle</b> <b>attacks.</b>|$|R
