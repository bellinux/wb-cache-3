32|215|Public
50|$|This test {{is among}} the most powerful. It forces {{detailed}} review of the program logic, and detects most coding, compiler and some design errors. Some organizations write the unit tests before writing the code, using the software design as a <b>module</b> <b>specification.</b> The unit test code is executed, and all the problems are fixed.|$|E
50|$|TCG's {{original}} {{goal was}} {{the development of}} a Trusted Platform Module (TPM), a semiconductor intellectual property core or integrated circuit that conforms to the trusted platform <b>module</b> <b>specification</b> put forward by the Trusted Computing Group and which is to be included with computers to enable trusted computing features. TCG-compliant functionality has since been integrated directly into certain mass-market chipsets.|$|E
5000|$|Atmel {{manufactures}} TPM {{devices that}} it {{claims to be}} compliant to the Trusted Platform <b>Module</b> <b>specification</b> version 1.2 revision 116 and offered with several interfaces (LPC, SPI, and I2C), modes (FIPS 140-2 certified and standard mode), temperature grades (commercial and industrial), and packages (TSSOP and QFN). [...] Atmel's TPMs support PCs and embedded devices. Atmel also provides TPM development kits to support integration of its TPM devices into various embedded designs.|$|E
40|$|This paper {{describes}} {{the design of}} the <b>module</b> <b>specifications</b> associated to the basic types and to the data structures provided by most programming languages. Also, some additional specifications were considered. This report is an evolving document describing the current state of <b>module</b> <b>specifications.</b> Supported by the Austrian Science Foundation FWF grant P 11414 - OTE "HPGP [...] - High-Performance Generic Programming" y /projects/basic/hpgp/reports/ 97 - 3 CONTENTS 2 Contents 1 Introduction 4 2 The Hierarchy of <b>Module</b> <b>Specifications</b> 4 3 Basic Types 6 3. 1 Booleans.............................. 6 3. 1. 1 BoolCore......................... 6 3. 1. 2 Bool............................ 9 3. 2 Types with Equality....................... 10 3. 2. 1 Elem............................ 10 3. 3 Pairs................................ 11 3. 3. 1 Pair [...] ...|$|R
40|$|This paper {{introduces}} the novel concept of inclusive institution as a foundational framework for studying logic-independent <b>module</b> compositionality, defines <b>specification</b> <b>modules</b> as <b>specifications</b> allowing {{both public and}} private signatures, and shows that an internal property of modules, called conservatism, is crucial for compositional semantics...|$|R
40|$|An {{approach}} to retrieving reusable software components {{by means of}} <b>module</b> <b>specifications</b> is described. The approach depends on normalizing specifications to reduce the variations in the representation of software concepts. The concept is illustrated {{in terms of both}} formal and informal approaches to component specifications...|$|R
5000|$|The {{structure}} chart aims to show [...] "the module hierarchy or calling sequence relationship of modules. There is a <b>module</b> <b>specification</b> for each module {{shown on the}} {{structure chart}}. The module specifications can be composed of pseudo-code or a program design language. The data dictionary is like that of structured analysis. At this stage in the software development lifecycle, after analysis and design have been performed, {{it is possible to}} automatically generate data type declarations", and procedure or subroutine templates.|$|E
50|$|In April 2003, the Trusted Computing Platform Alliance was {{succeeded by}} the Trusted Computing Group. One {{principal}} {{goal of the}} TCG was to produce a Trusted Platform <b>Module</b> <b>specification</b> compatible with Microsoft's NGSCB architecture as the previous specification, TPM 1.1, {{did not meet the}} requirements set forth for the technology. The new specification, TPM 1.2, introduced a number of new features for trusted architecture platforms and was designed to be compliant with Microsoft's NGSCB. The first specification for TPM 1.2, Revision 62, was released by the Trusted Computing Group in fall of 2003.|$|E
40|$|International audienceThis paper {{presents}} {{a variant of}} the SML module system that introduces a strict distinction between abstract types and manifest types (types whose definitions are part of the <b>module</b> <b>specification),</b> while retaining most of the expressive power of the SML module system. The resulting module system provides much better support for separate compilation...|$|E
5000|$|Recent Trusted Platform <b>Module</b> <b>specifications</b> define special TPM-Read {{cycles and}} TPM-Write cycles {{that are based}} on the I/O Read and the I/O Write cycles. These cycles use a START field with the formerly-reserved value of 0101 and place a 16-bit memory address offset in the address field. These cycles are used when using a TPM's {{locality}} facility.|$|R
40|$|This report {{documents}} the UFAD <b>module</b> <b>specifications</b> for EnergyPlus v 3. 1 and higher. We have conducted extensive {{validation of the}} interior zone model for Price swirl and York MIT 1 variable area (VA) diffusers. These correlations {{should not be considered}} to be applicable to other diffuser types. (See below for user procedures to support other diffuser brands and types. ...|$|R
40|$|In this thesis, {{we propose}} a black-box testing method that derives {{important}} test cases by including usage statistics, and enables a product manager {{to make a}} release decision with the rationale, 2 ̆ 2 the important use cases specified in the usage statistics are tested and have no error. 2 ̆ 2 First, we propose a method to specify components with Trace Function Method (TFM) <b>module</b> interface <b>specifications.</b> Then, we propose a way to associate module usage statistics with the TFM <b>module</b> interface <b>specification.</b> Finally, we propose a method to generate a prioritized list of black-box test cases for component testing and integration testing from the TFM <b>module</b> interface <b>specification</b> with usage statistics...|$|R
40|$|We {{discuss the}} nature of a module system and define the formal {{requirements}} for proving a module correct. These conclusions are implemented within the SEQUEL functional programming language using technology derived from the work done on program correctness by Boyer and Moore. 1 Introduction A module is a program which has been certified to perform according to a certain specification. Modules are, to a large extent, black boxes, clear in what they do but dark about how they do it. In the fabrication of large systems, modules allow the distribution of programming tasks to be made throughout a team and each team member can design her module as she likes it, secure in the knowledge {{that as long as the}} <b>module</b> <b>specification</b> is met that the whole should fit together assuming the project leader has designed the module structure properly. From the point of view of the project leader, <b>module</b> <b>specification</b> allows the project to be managed from a high level without getting lost in low-level [...] ...|$|E
40|$|AbstractIn recent papers, {{a notion}} of {{algebraic}} <b>module</b> <b>specification</b> has been introduced, along with operations to combine them. Here we {{take a closer look}} at the operations of union of module specifications with import and export interfaces and of actualization of the parameter specification that the two interfaces share. We show that both the standard and parametrized actualization are compatible with the previously introduced notion of submodule and with the union operation...|$|E
40|$|Abstract: In {{this report}} I explore some ideas for {{formally}} specifying modules {{based on the}} trace assertion method outlined in, for example, [Parnas and Wang 1989]. These ideas include: • A formal mathematical theory of trace specifications which is independent of their intended application to <b>module</b> <b>specification</b> (Chapter 2). • Some ideas on presenting module specifications (Chapter 3). • A theory of trace specifications for dealing with modules that call other modules (Chapter 4). • Automata theoretic models for trace specifications of the sort defined in Chapter...|$|E
40|$|This paper {{presents}} a general approach to annotation inference {{for a given}} static program checker. The approach reuses the checker as a subroutine. The approach {{has been used to}} implement annotation inference systems for two static program checkers, ESC/Java and rccjava. The paper describes the approach formally and shows how it applies to ESC. Static program checkers find software defects. Many static checkers rely on the programmer to supply annotations describing program proper-ties such as invariants and <b>module</b> <b>specifications...</b>|$|R
50|$|The Modula-2-based Kronos {{was quite}} {{amenable}} {{to the basic}} principles of MARS, as Modula-2 is fundamentally modular, allowing programs to be partitioned into units with relatively well defined interfaces. These interfaces supported separate compilation of modules and separation of the <b>module</b> <b>specifications</b> from their implementation. The primary difference between Lilith and Kronos was that the latter was a 32-bit processor, compared with 16-bit Lilith, and Kronos incorporated a number of extensions to the instruction set to accommodate the inter-processor communication necessary in MARS.|$|R
30|$|In Table[*] 1, the {{information}} with more details for the solar panels such as solar module technology, power rating, and related <b>module</b> <b>specifications</b> for a 50 -kW photovoltaic system is provided. This is {{considered as one}} unit {{for the purpose of}} calculation, which will be extended for {{the entire length of the}} highway. Accordingly, 504 numbers of modules are used for both Ahmedabad-Rajkot national highway (four lanes) and Ahmedabad-Vadodara highway (four lanes wo service roads). The panels are tilted at an angle of 23 °. This tilt is chosen equal to the latitude for the Ahmedabad site (23.067 °).|$|R
40|$|This paper {{emphasizes}} {{on the model}} verification of the electrical performance of a Photovoltaic (PV) cell module by MATLAB/Simulink simulation. The developed model can then be us ed to predict the PV cell behavior under different physical and environmental parameters such as solar irradiation, ambient temperature, series resistor, shunt resistor, diode saturation current and cell arrangement. Photovoltaic cell model is used for com par i ng the electrical characteristics for this modeling process. Kyocera PV module is used as the <b>module</b> <b>specification,</b> whereby a PV model can be easily generalized to predict the output current, power characteristics and the maximum power point tracking...|$|E
40|$|By {{treating}} the interfaces of a <b>module</b> <b>specification</b> as a production, we combine notions {{from the well}} known theory of algebraic graph grammars with the theory of large software system specifications to tackle the problem of designing modular systems. Given a goal specification, a library of module specifications as reusable software components {{and a collection of}} "primitive" realized data type specifications, the designing of a system consisting only of the library components to realize the goal is reduced to deriving the goal from the primitive specification using the given productions. If a derivation sequence exists, direct derivations and operations on productions are converted into the design of a modular system...|$|E
40|$|In {{this paper}} we propose a method to {{generate}} pausible clock based GALS wrapper circuits from the synchronous module’s Verilog specification code automatically. We first parse the input <b>module</b> <b>specification</b> and produce wrapper circuit components based on the specification of entered synchronous module. Existing methods for generation of the wrapper circuit waste the die size because they instantiate one asynchronous port controller for each data vector. In our improved method, we reduced the number of asynchronous port controllers to simultaneous data communication links. This method will be suitable for stream based communication systems. In order to validate the proposed algorithm, we employed the wrapper circuit in Viterbi error detection and correction circuit. The results show that our improved method will reduce the area of the wrapper circuits in contrast to the previous suggested implementations...|$|E
40|$|The requirements, definitions, {{and current}} {{planning}} for cost effective transportation from {{low earth orbit}} to higher energy earth orbits and other orbital transfers, to complement the Space Shuttle, are discussed. The issues that arise from the uncertainties of future priorities and funding {{as well as the}} maintenance of a development capacity for a future new space engine are examined. Attention is given to mission requirements including orbiter transfer requirements and power <b>module</b> <b>specifications</b> and also to candidate and cryogenic OTV concepts. The configurations for the solar electric propulsion system are presented along with the program and space transportation system evolution...|$|R
50|$|The RDM SQL Programming Language (SQL PL) {{is based}} on the ansi/ISO SQL Persistent Stored <b>Modules</b> (PSM) <b>specification</b> (ISO/IEC 90756-4:2011 +2012). It {{provides}} a high-level language in which stored procedures and functions can be written, compiled and called within the RDM SQL system.|$|R
50|$|Engineering {{design and}} {{documentation}} can be undertaken simultaneously when using a SIM. A SIM {{can be created}} as the design of an EICS progresses. Draftsman and modellers are no longer required. When a SIM {{is applied to the}} design of a connected system, all physical equipment and the associated connections to be constructed can be modelled in a relational database. Components are classified according to 'Type' and 'Location' attributes. The 'Type' attribute is used to define equipment functionalities. The 'Location' attribute is used to describe the physical position of equipment. Connections between equipment are modelled as 'connectors'. To facilitate the design, attributes, such as a device <b>module,</b> <b>specifications</b> and vendor manuals can be assigned and attached to each individual object.|$|R
40|$|AbstractAlgebraic theory {{provides}} a framework for the specification and design of modules and modular software systems. Research in this area {{has focused on the}} development of “horizontal” operations for building up module and interface specifications. Our previous work also introduced the notion of vertical development steps, where abstract specifications are converted into a more concrete form. In this paper, we study a variety of compatibility problems between structuring operations and development steps and introduce notions of the realization of an interface specification by a <b>module</b> <b>specification.</b> These compatibility problems are studied in a categorical framework where specifications and developments steps are viewed as objects and morphisms in a “development category”. We show that compatibility can be expressed as the fact that the structuring operations can be extended to partial functors and give sufficient conditions for this property...|$|E
40|$|Sophisticated instrumentation-based systems {{exist for}} {{building}} dynamic analysis tools {{but to use}} these systems a developer must write the instrumentation and analysis code by hand. This paper describes how analysis tools can be generated automatically by specifying analysis algorithms using attribute grammars based on the static and dynamic structure of the program being analysed. Using methods {{similar to those used}} to generate compilers, this approach enables implicit storage allocation for analysis data, automatic sequencing of analysis steps and transparently supports a variety of data sources and independence from the underlying implementation technology. Furthermore, analysis algorithms can be described in a modular way, enabling reuse. To demonstrate the approach the paper describes the Wyong system that generates dynamic analysis tools from specifications. An example analysis <b>module</b> <b>specification</b> is described and its reuse is illustrated. Wyong is based on the Eli compiler gener [...] ...|$|E
40|$|With the {{emergence}} of 3 GPP digital standards for mobile communications, the battery power available to the mobile transmitter will be limited as the mobile phone will have to power MP 3 players, higher resolution graphic displays and more powerful processors. These factors, along with the higher data rates required to support the applications desired by the consumers, will render today’s portable solutions inefficient. • Efficient power management for the module transmitter {{will be required to}} reduce both the average and peak current consumption. Transmitter designs will need to provide improved linearity due to the higher peak to average ratios of the more complex modulation of the 3 GPP standards. Power amplifier architectures which reduce the peak and average current while improving the linearity will be discussed, along with critical power amplifier specifications for multi-mode transmit front end modules. Presentation Outline • Modulation formats and data rate • Radio module evolution • Critical <b>module</b> <b>specification</b> • Low power efficiency enhancements • Battery energy and waste • Next generation transmitter architecture 3 CDMA/GSM SYSTEM EVOLUTIO...|$|E
40|$|Purpose – The {{purpose of}} this paper is to report a study {{designed}} to identify qualifications and skills that library and information science (LIS) students should have when they graduate. Design/methodology/approach – The reported research examines the curriculum of 49 institutions in three countries which offer programs in LIS. Course descriptions are studied through the web and the <b>module</b> <b>specifications</b> presented there. Findings – The study identifies 59 qualifications/skills that were central to graduation in the field of LIS. Research limitations/implications – Course specifications have some limitations as they do not always include the detailed description that would be desirable. Originality/value – The paper examines the orientation of institutions that provide LIS programs and, more importantly, the way that orientation is integrated into their programs of study...|$|R
5000|$|In {{common with}} other similar standards, VXS {{comprises}} a ‘base line’ specification, which defines the basic mechanical and electrical elements of VXS, {{together with a}} series of ‘dot level’ specifications, one or more of which must be implemented to create a functional <b>module.</b> The <b>specifications</b> are as follows: ...|$|R
40|$|This paper {{presents}} {{a conceptual framework}} for verifying product properties at module level, Module Property Verification (MPV). MPV is an approach to decrease overall lead-times and increase the quality of modularised products. Pre-studies indicate that companies tend to have the majority of property verifications at product level, Product Property Verification (PPV), which may results in increased costs and extended lead-times. At the same time, {{the implementation of a}} modularised product assortment brings new challenges to companies such as how to decompose product <b>specifications</b> into <b>module</b> <b>specifications,</b> achieving a balance between properties to verify, designing assembly systems that support MPV, and finding methods to design modules for MPV. The discussions of the proposed conceptual framework constitute a theoretical foundation for MPV based on pre-studies, literature reviews and applicable theories...|$|R
40|$|Condition Monitoring (CM) systems {{monitor the}} health of {{expensive}} plant items such as turbine generators. They interpret turbine parameters by signaling an alarm when pre-defined limits are breached. Often these alarms have no further operational consequence but still require investigation by an expert. This is a time consuming and laborious process due to the volume of data interpreted for each alarm. In {{order to reduce the}} burden of alarm assessment, a Decision Support System (DSS) is proposed. The DSS will feature a Routine Alarm Assessment (RAA) module which provides an initial analysis of the alarms, highlighting those with no further operational consequence and enabling the expert to focus on those which indicate a genuine problem with the turbine. The structured approach taken to capture and document the expert knowledge on RAA along with the generation of a <b>module</b> <b>specification</b> and the selected IS techniques are outlined. The implementation of an RAA prototype is discussed along with how this will act as a foundation for a full alarm interpretation and fault diagnostic system...|$|E
40|$|This {{deliverable}} {{describes the}} invocation <b>module</b> <b>specification.</b> Invocation {{is the task}} of performing an actual call to an instance of a Web Service. The goal of this specification {{is to provide a}} standardized way of invocation for all DIP components. This specification describes the invocation component at a level of detail allowing the users of the invocation module to understand how to use the invocation module using the specified API. It also describes the general architecture of the invocation module and provides implementation recommendations allowing the implementers to understand how to implement the API specified in this document. This deliverable contributes to the Open Source Semantic Web Services Architecture and Exploitable Tools by providing a standardized way to perform the invocation task. It is thus relevant to all work packages in DIP developing components required to perform invocation of Web Services instances. The target audience comprises therefore the implementers of the invocation module and the developers of components using the invocation module (e. g. WSMX). Disclaimer: The DIP Consortium is proprietary. There is no warranty for the accurac...|$|E
40|$|The main aim of {{this report}} is to {{encourage}} programme providers within the Built Environment {{to take a more}} proactive approach to the adoption of Rethinking Construction concepts within existing and future programmes. As a starting point, an Exemplar <b>Module</b> <b>Specification</b> and a Teaching Schedule have been developed. These will have to be modified {{to take into account the}} desired learning outcomes of individual programmes. The report reviews recent developments and initiatives that have encouraged the construction industry to both adopt the important cultural philosophy that customer satisfaction is inseparable from business goals and view performance in terms of safety, cost, quality and sustainability. The roles of the key organisations charged with driving the through change have been summarised. The three Appendices to the report describe: Supporting Information; EU/UK Government Education Initiatives; and Educational Networks. They also include several web sites that provide detailed information to support this report. These web sites can be used to obtain Demonstration Projects to support individual lectures or be used to identify potential funding sources to support the development of new programmes...|$|E
40|$|This paper {{describes}} a knowledge-based approach to automate a software design method for concurrent and real-time systems. The approach uses multiple paradigms to represent knowledge embedded within the design method. Semantic data modeling provides {{the means to}} represent concepts from a behavioral modeling technique, called Concurrent Object-Based Real-time Analysis (COBRA), which defines system behavior using data flow/control flow diagrams. Entity-Relationship modeling is used to represent a design meta-model based on a design method, called COncurrent Design Approach for Real-Time Systems (CODARTS), which represents concurrent designs as software architecture diagrams, task behavior <b>specifications,</b> and <b>module</b> <b>specifications.</b> Production rules provide the mechanism for codifying a set of CODARTS heuristics that can generate concurrent designs based on semantic concepts included in COBRA behavioral models and on entities and relationships included in CODARTS design meta-models. Othe [...] ...|$|R
40|$|Program {{comprehension}} is {{the most}} expensive activity of software maintenance. The different phases of a reuse reengineering process involves comprehension activities for understanding the structure of existing systems, the functionality implemented by a reuse-candidate module and the reengineering effort. We present an integrated environment implemented in Prolog for reuse reengineering existing C systems. Different tools developed in the RE 2 project are integrated in the environment through sharing a fine-grained representation for C program, the Combined C Graph (CCG). Different views of a system can be abstracted and visualised from the data-base of Prolog facts implementing its CCG representation. Software metric tools evaluate the reengineering costs, while reengineering operations are expressed as transformation rules and a symbolic executor allows the production of the <b>module's</b> <b>specification.</b> Keywords: Program Comprehension, Reverse Engineering, Reengineering, Reuse, Program [...] ...|$|R
5000|$|July 2013 - A {{submersible}} and {{a control}} <b>module</b> of new <b>specifications</b> built {{for an upcoming}} dive test in the Japan Trench ...|$|R
