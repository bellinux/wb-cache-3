193|436|Public
25|$|Called by the {{outermost}} container {{of an object}} to interact with it while it's active, e.g. to process accelerator keys in the container's <b>message</b> <b>queue</b> that are meant for the contained object.|$|E
25|$|A {{windowless}} {{object is}} {{an object that}} doesn't have its own window but it instead displayed in its container's window. It {{is used by the}} container to relay messages received by the container's window that are intended for the contained object. For example, if the mouse is moved over a window, Windows places a mouse move message along with the mouse coordinates in the <b>message</b> <b>queue</b> of the window. If this window contains windowless embedded objects, the message may have to be relayed to such an object if the coordinates of the mouse-pointer are over this object. For similar reasons this interface also provides access to the object's DropTarget interface.|$|E
5000|$|Sun Java System <b>Message</b> <b>Queue</b> (SJSMQ), {{formerly}} Java <b>Message</b> <b>Queue</b> ...|$|E
5000|$|Inter-thread data passing {{services}} for basic <b>message</b> <b>queues,</b> enhanced <b>message</b> <b>queues,</b> and byte streams.|$|R
50|$|Proprietary options {{have the}} longest history, and include {{products}} from the inception of <b>message</b> <b>queuing,</b> such as IBM WebSphere MQ, and those tied to specific operating systems, such as Microsoft <b>Message</b> <b>Queuing.</b> There are also cloud-based <b>message</b> <b>queuing</b> service options, such as Amazon Simple Queue Service (SQS), StormMQ and IronMQ.|$|R
50|$|A <b>message</b> <b>queueing</b> service {{also creates}} new value by {{providing}} reduced costs, enhanced performance and reliability. In {{order to provide}} those benefits, a <b>message</b> <b>queueing</b> service leverages cloud computing resources such as storage, network, memory and processing capacity. By using virtually unlimited cloud computing resources, a <b>message</b> <b>queueing</b> service provides an internet scale messaging platform.|$|R
5000|$|Used {{to change}} <b>message</b> <b>queue</b> {{parameters}} like the owner. Most importantly, {{it is used}} to delete the <b>message</b> <b>queue</b> by passing the [...] flag. A <b>message</b> <b>queue</b> can be deleted only by its creator, owner, or the superuser.|$|E
50|$|The POSIX.1-2001 <b>message</b> <b>queue</b> API is {{the later}} {{of the two}} UNIX <b>message</b> <b>queue</b> APIs. It is {{distinct}} from the SYS V API, but provides similar function.|$|E
50|$|Message queues can {{be grouped}} {{together}} to form <b>message</b> <b>queue</b> groups. <b>Message</b> <b>queue</b> groups permit multipoint-to-multipoint communication. They are identified by logical names so that a sender process is unaware {{of the number of}} message queues and of the location of the message queues within the cluster with which it is communicating. The <b>message</b> <b>queue</b> groups can be used to distribute messages among message queues pertaining to the <b>message</b> <b>queue</b> group. MSG defines three unicast distribution policies - equal load distribution, local equal load distribution and local best queue - and the broadcast (multicast) policy.|$|E
50|$|An early {{attempt to}} make <b>message</b> <b>queuing</b> more {{ubiquitous}} was Sun Microsystems' JMS specification, which provided a Java-only abstraction of a client API. This allowed Java developers to switch between providers of <b>message</b> <b>queuing</b> in a fashion {{similar to that of}} developers using SQL databases. In practice, given the diversity of <b>message</b> <b>queuing</b> techniques and scenarios, this wasn't always as practical as it could be.|$|R
50|$|In computing, StormMQ is a <b>message</b> <b>queuing</b> service (a form of message-oriented {{middleware}} {{that provides a}} message broker), using the standard Advanced <b>Message</b> <b>Queuing</b> Protocol (AMQP). StormMQ is a hosted, On-Premises or Cloud solution for Machine-to-Machine <b>Message</b> <b>Queuing</b> using AMQP. StormMQ Limited provides an open, secure platform and the necessary legal protections for data moved through the cloud. The platform has clients developed by StormMQ with third parties available as open source with code released under the Mozilla Public License.|$|R
30|$|A COTS enterprise-level <b>message</b> <b>queuing</b> {{solution}} {{should be}} used for communication to free-up developers from having to re-implement <b>message</b> <b>queuing</b> logic between pipelines. It also ensures that the overall system can decouple the components in the pipelines, thereby promoting features such as scalability, robustness, and performance.|$|R
50|$|Publish-subscribe is {{a sibling}} of the <b>message</b> <b>queue</b> paradigm, and is {{typically}} {{one part of}} a larger message-oriented middleware system. Most messaging systems support both the pub/sub and <b>message</b> <b>queue</b> models in their API, e.g. Java Message Service (JMS).|$|E
5000|$|Manages the {{retransmission}} queue and out-of-order <b>message</b> <b>queue.</b>|$|E
5000|$|Advanced Message Queuing Protocol (AMQP) - feature-rich <b>message</b> <b>queue</b> {{protocol}} ...|$|E
5000|$|Microsoft <b>Message</b> <b>Queuing</b> (MSMQ), which {{improved}} {{interprocess communication}} ...|$|R
50|$|Joining and departing a {{confederation}} is {{an integral}} part of time management process. When a simulation joins a confederation, all other ACMs in the confederation create input <b>message</b> <b>queues</b> for the new simulation. Conversely, when a simulation departs a confederation the other ACMs delete input <b>message</b> <b>queues</b> for that simulation.|$|R
5000|$|WebSphere MQ - Shared <b>message</b> <b>queues</b> for {{availability}} and flexibility ...|$|R
5000|$|... — Extended {{version of}} remote <b>message</b> <b>queue</b> {{starting}} command , RFC 1985 ...|$|E
5000|$|... port object {{represents}} a port and <b>message</b> <b>queue</b> for interprocess communication ...|$|E
50|$|MemcacheQ is a MemcacheDB variant that {{provides}} a simple <b>message</b> <b>queue</b> service.|$|E
5000|$|The {{following}} ports {{are used}} for Microsoft <b>Message</b> <b>Queuing</b> operations: ...|$|R
30|$|Middleware: {{communication}} between agents is facilitated via a middleware application. This includes publish-subscribe middleware, <b>message</b> <b>queues,</b> <b>message</b> brokers, service buses or other OS independent messaging.|$|R
40|$|This {{paper is}} {{concerned}} with the behaviour of <b>message</b> <b>queues</b> in distributed discrete event simulafors. We view a logical process in a distribut 4 ed simulation as com-prising a message sequencer with associah-d <b>message</b> <b>queues,</b> followed by an event processor. We show that, with standard stochastic assumptions for message ar-rival and time-stamp processes, the <b>message</b> <b>queues</b> are unstable for conservative sequencing, and for conserva-tive sequencing with maximum lookah,ead and hence for optimistic resequencing, and for any resequencing algo-rithm that does not, employ interprocessor “flow con-trol”. These results point towards certain fundamental limits on the performance of distributed simulation of open queueing networks. ...|$|R
50|$|The Message Service {{specifies}} APIs for a cluster-wide inter-process communicationsystem. The {{communication is}} based on message queues identified by a logical name. Any number of processes can send messages to a <b>message</b> <b>queue,</b> but one process at a time at most can open it for receiving. The single <b>message</b> <b>queue</b> thus supports point-to-point or multi-point-to-point communication patterns.|$|E
5000|$|Amazon Simple Queue Service (SQS) {{provides}} a hosted <b>message</b> <b>queue</b> for web applications.|$|E
5000|$|Three {{standards}} have emerged {{which are used}} in open source <b>message</b> <b>queue</b> implementations: ...|$|E
5000|$|Queue: <b>Message</b> <b>queues</b> are {{objects that}} store {{messages}} in an application.|$|R
5000|$|Improved {{organization}} of <b>message</b> <b>queuing</b> on disk including multiple volume support.|$|R
50|$|The Advanced <b>Message</b> <b>Queuing</b> Protocol (AMQP) {{is an open}} {{standard}} {{application layer}} protocol for message-oriented middleware. The defining features of AMQP are <b>message</b> orientation, <b>queuing,</b> routing (including point-to-point and publish-and-subscribe), reliability and security.|$|R
5000|$|IBM <b>Message</b> <b>Queue</b> Interface (MQI) for C, COBOL, PL/I, Java, Rexx, RPG, and C++ ...|$|E
5000|$|MQTT (formerly MQ Telemetry Transport) - {{lightweight}} <b>message</b> <b>queue</b> protocol {{especially for}} embedded devices ...|$|E
5000|$|RabbitMQ, {{open source}} <b>message</b> <b>queue</b> broker that {{implements}} the Advanced Message Queuing Protocol (AMQP) ...|$|E
5000|$|Microsoft <b>Message</b> <b>Queuing</b> [...] - [...] similar technology, {{implemented}} for [...]NET Framework ...|$|R
50|$|<b>Message</b> <b>queuing</b> (“MQ”) is a {{middleware}} {{technology that}} greatly simplifies {{communication between the}} nodes of a system and between the nodes that connect systems together. Information system consultants use <b>message</b> <b>queuing</b> as their skill base. Upon this base, information system consultants add workflow management, message brokering, and J2EE implementations using java virtual machines (JVMs) and Message Driven Beans (MDBs).|$|R
5000|$|AMQP — Advanced <b>Message</b> <b>Queuing</b> Protocol, an {{application}} layer protocol for message-oriented middleware.|$|R
