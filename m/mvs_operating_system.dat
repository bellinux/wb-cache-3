23|10000|Public
50|$|Interlink Computer Sciences, of Fremont, California, was a {{developer}} of {{hardware and software}} that allowed IBM mainframe computers running the <b>MVS</b> <b>operating</b> <b>system</b> {{to be connected to}} non-IBM networks.|$|E
5000|$|OS/390 was {{introduced}} in late 1995 in an effort, led by the late Randy Stelman, to simplify the packaging and ordering for the key, entitled elements needed to complete a fully functional <b>MVS</b> <b>operating</b> <b>system</b> package. These elements included, but were not limited to: ...|$|E
5000|$|SQL/DS {{ran on the}} DOS/VSE and VM/CMS {{operating}} systems. A little later, IBM {{also introduced}} DB2, another SQL-based DBMS, this one for the <b>MVS</b> <b>operating</b> <b>system.</b> The two products have coexisted since then; however, SQL/DS was rebranded as [...] "DB2 for VM and VSE" [...] in the late 1990s.|$|E
50|$|<b>MV</b> <b>operates</b> routes 101, 102, 105, 106, 110, 111, 113, 115, 120/121, 203, 206, 207, 208, 209, 210, 214, 215, 218, 219, MAX, CX, WAX, & DVX. X These routes are {{primarily}} in the northern portion of the service area. <b>MV</b> also <b>operates</b> the 700 series (Silver Star) routes. Keolis operates routes 103, 104, 108, 109, 117, 119, 201, 202, 212, 217, The Deuce on The Strip, SX Shuttle, SDX, BHX, & SX. These routes {{are primarily}} in the southern portion of the service area. SNTC operates HDX from Boulder City. Transdev operates RTC Paratransit operations as of August 2014.|$|R
5000|$|... #Caption: <b>MV</b> Shortland <b>operating</b> the Newcastle-Stockton ferry {{service in}} July 2006 ...|$|R
2500|$|<b>MV</b> Gadila: <b>operated</b> {{under the}} Dutch ensign with Swordfish of 'S' Flight, 860 NAS ...|$|R
50|$|The OS/360 Object File Format is the {{standard}} object module file format for the IBM DOS/360, OS/360 and VM/370, Univac VS/9, and Fujitsu BS2000 mainframe operating systems. In the 1990s, the format was given an extension with the XSD-type record for the <b>MVS</b> <b>Operating</b> <b>System</b> to support longer module names in the C Programming Language. This format is still in use by the z/VSE operating system (the follow-on to the DOS/360 Operating System). In contrast, it has been superseded by the GOFF file format on the <b>MVS</b> <b>Operating</b> <b>System</b> (the follow-on to the OS/360 Operating System) and on the z/VM Operating System (the follow-on to the VM/370 Operating System). Since the MVS and z/VM loaders will still handle this older format, some compilers have chosen to continue to produce this format instead of the newer GOFF format.|$|E
50|$|MVS/370 is {{a generic}} term for all {{versions}} of the <b>MVS</b> <b>operating</b> <b>system</b> prior to MVS/XA. The System/370 architecture, at the time MVS was released, supported only 24-bit virtual addresses, so the MVS/370 operating system architecture {{is based on a}} 24-bit address. Because of this 24-bit address length, programs running under MVS/370 are each given 16 megabytes of contiguous virtual storage.|$|E
5000|$|In MVS, JES is a {{task that}} runs under MVS and {{provides}} the necessary functions to get jobs {{into and out of}} the <b>MVS</b> <b>operating</b> <b>system,</b> and to control the scheduling of, and, indeed, their execution. It is designed to provide efficient spooling, scheduling, and management facilities for the <b>MVS</b> <b>operating</b> <b>system.</b> By separating job processing into a number of tasks, MVS operates more efficiently. At any point in time, the computer system resources are busy processing the tasks for individual jobs, while other tasks are waiting for those resources to become available. In its most simple view, MVS divides the management of jobs and resources between the JES and the base control program of MVS. In this manner, the JES manages jobs before (i.e., during the reading and scheduling phases) and after the completion of running the program (i.e., the printing, punching and purging phases); the base control program manages them during processing, usually without any specific knowledge of JES.|$|E
2500|$|<b>MV</b> Macoma: <b>operated</b> {{under the}} Dutch ensign with Swordfish of 'O' (later 'F') Flight, 860 NAS ...|$|R
50|$|<b>MV</b> Tean, <b>operated</b> by the ISSC 1953 - ????. An ex Royal Navy {{motor launch}} built at Bangor in 1941.|$|R
40|$|Abstract- Virtualization enables {{installation}} and running of multiple virtual machines {{on the same}} computer <b>system.</b> <b>Operating</b> <b>system</b> that communicates directly with hardware {{is known as the}} host <b>operating</b> <b>system</b> whereas virtual <b>operating</b> <b>systems</b> have all the features of a real <b>operating</b> <b>system,</b> but they run inside the host <b>operating</b> <b>system.</b> A virtual machine is separated from the computer hardware resources and it runs on the emulated hardware. Performance of the virtual <b>operating</b> <b>system</b> running on the same computer system hardware depends on the performance of the host <b>operating</b> <b>system.</b> In this paper we study how different host <b>operating</b> <b>systems</b> influence virtual machine performance. Windows XP®, Windows Vista ™ and Windows 7 ™ are used as host <b>operating</b> <b>systems</b> using Windows Vista as a virtual <b>operating</b> <b>system.</b> Performance measurement of the virtual <b>operating</b> <b>system</b> is done in the same controlled conditions for all three host <b>operating</b> <b>systems</b> using benchmark applications. Performance measurement results show that the virtual <b>operating</b> <b>system</b> has the best performance when Windows 7 is used as the host <b>operating</b> <b>system...</b>|$|R
5000|$|TCPaccess is a {{software}} product which implements the TCP/IP protocol suite on IBM mainframe computers using the <b>MVS</b> <b>operating</b> <b>system.</b> It {{was developed in}} 1986 by Advanced Computer Communications under the name ACCES/MVS,and was the first commercial TCP/IP implementation for MVS mainframes. It is usually associated with Interlink Computer Sciences, which developed and marketed the product from 1990 until 1999, and is frequently referred to as [...] "the Interlink stack".|$|E
50|$|The Distributed File Management (DFM) {{project was}} {{initiated}} to add DDM services to IBM's <b>MVS</b> <b>operating</b> <b>system</b> to enable programs on remote computers to create, manage, and access VSAM files. John Hufferd, {{the manager of}} the DFM project looked to the DDM Architecture team for a means of converting the data fields in records as they flowed between systems. Richard Demers took the lead on this issue, aided by Koichi Yamaguchi from the DFM project. See Data description and conversion.|$|E
5000|$|Competing with IBM in the {{mainframe}} market, {{the company}} manufactured [...] "plug-compatible" [...] mainframes, shipping its first machine in 1975 — the Amdahl 470V/6, a less expensive, more reliable and faster {{replacement for the}} System 370/168. By purchasing an Amdahl 470 and plug-compatible peripheral devices from third-party manufacturers, customers could now run S/360 and S/370 applications without buying actual IBM hardware. Amdahl's software team developed VM/PE, software designed to optimize the performance of IBM's <b>MVS</b> <b>operating</b> <b>system</b> when running under IBM's VM operating system. By 1979, Amdahl Corporation had sold over a US$1 billion of V6 and V7 mainframes and had over 6,000 employees worldwide. The corporation went on to distribute an IBM-plug-compatible front-end processor (the 4705) as well as high-performance disk drives, both jointly developed with Fujitsu engineers.|$|E
50|$|The Pick <b>operating</b> <b>system</b> was a {{complete}} <b>operating</b> <b>system.</b> Prime Information was not an <b>operating</b> <b>system,</b> but a 4GL system that ran from the Prime PRIMOS <b>operating</b> <b>system.</b>|$|R
50|$|For example, Solaris Zones {{supports}} multiple guest <b>operating</b> <b>systems</b> running {{under the}} same <b>operating</b> <b>system</b> such as Solaris 10. Guest <b>operating</b> <b>systems</b> can use the same kernel level with the same <b>operating</b> <b>system</b> version, or can be a separate copy of the <b>operating</b> <b>system</b> with a different kernel version using Solaris Kernel Zones. Solaris native Zones also requires that the host <b>operating</b> <b>system</b> is a version of Solaris; other <b>operating</b> <b>systems</b> from other manufacturers are not supported. However, Solaris Branded Zones {{would need to be}} used to have other <b>operating</b> <b>systems</b> as zones.|$|R
50|$|Because of {{the large}} number and variety of {{available}} Linux distributions, they are all grouped under a single entry; see comparison of Linux distributions for a detailed comparison. There are also a variety of BSD <b>operating</b> <b>systems</b> and DOS <b>operating</b> <b>systems,</b> covered in comparison of BSD <b>operating</b> <b>systems</b> and comparison of DOS <b>operating</b> <b>systems.</b> For information on views of each <b>operating</b> <b>system,</b> see <b>operating</b> <b>system</b> advocacy.|$|R
50|$|In 1982, Altai {{established}} their own job scheduler called ZEKE {{written for the}} VSE operating system. In efforts to create a version of ZEKE to run over the <b>MVS</b> <b>operating</b> <b>system,</b> Altai employee James Williams recruited his longtime friend Claude Arney, an employee of Computer Associates, to create the MVS version. Williams claims {{that at the time}} he did not know about the ADAPTER component or that Arney had familiarity with the CA-SCHEDULER and ADAPTER code. Arney left CA to work on Altai's ZEKE program, taking the VSE and MVS versions of the source code for ADAPTER with him. Using his knowledge of ADAPTER, Arney then convinced Altai to restructure the program to include a program translator to interface with various operating systems. Arney created the translator OSCAR 3.4 for Altai in which about 30% of OSCAR's source code was taken directly from CA's ADAPTER code.|$|E
50|$|To {{achieve the}} {{required}} efficiencies, CSG developed its own Pre-Scan {{software for the}} IBM <b>MVS</b> <b>Operating</b> <b>System.</b> This software facilitated tape drives being pre-allocated and tape files pre-mounted by tape operators as a job was read into the job scheduler. (Two Job Execution Schedulers were available from IBM; JES2 which read in the job, created a job address space in memory, and then waited for the requested job resources (tape drive, tape file mounted on drive, ready to read/write) were physically available before starting job execution; and JES3, where the job would be read in by the system, then wait until the requested job resources were physically available and allocated before creating a job address space in memory to begin execution). CSG's Pre-Scan would read in the job control language statements, parse the necessary resources required to execute the job, then dynamically allocate the physical devices, request the tape mounts, all while the system created the job address space in memory. The net result was significantly faster and more efficient throughput by eliminating / minimizing wait times.|$|E
40|$|An MVS tuning {{approach}} Experience contributes important {{knowledge in}} many proce-dures. Front the experience gained in tuning the Multiple Virtual Storage (<b>MVS)</b> <b>operating</b> <b>system,</b> {{a set of}} guidelines to help MVS installations avoid performance problems are suggested, along with an approach to tuning an MVS system. The guidelines can help a performance analyst isolate {{the cause of a}} performance problem. Not all possible problems that might be encountered are included. It is found that most MVS performance problems are a result of poor workload management and are often related to IIO activities. by R. M. Schardt Effective tuning of the Multiple Virtual Storage (<b>MVS)</b> <b>operating</b> <b>system</b> (the later releases of oS/vs 2) 1 requires knowledge of MVS operations, knowledge of the particular system to be tuned, an...|$|E
5000|$|... #Caption: <b>MV</b> Normandie, <b>operated</b> by Brittany Ferries, an English Channel RoRo {{vehicle and}} {{passenger}} ferry outward bound to France from Portsmouth.|$|R
50|$|An {{embedded}} <b>operating</b> <b>system</b> is an <b>operating</b> <b>system</b> for {{embedded computer}} <b>systems.</b> These <b>operating</b> <b>systems</b> {{are designed to}} be compact, efficient at resource usage, and reliable, forsaking many functions that non-embedded computer <b>operating</b> <b>systems</b> provide, and which may not be used by the specialized applications they run. They are frequently also referred to as real-time <b>operating</b> <b>systems,</b> and the term RTOS is often used as a synonym for embedded <b>operating</b> <b>system.</b>|$|R
50|$|The first <b>operating</b> <b>systems</b> for the GEC 4000 series were COS (Core <b>Operating</b> <b>System)</b> and DOS (Disk <b>Operating</b> <b>System).</b> These were {{basically}} single-user multi-tasking <b>operating</b> <b>systems,</b> designed for developing and running Process control type applications.|$|R
40|$|A {{powerful}} line-orientated {{text editor}} is described. The editor command set {{resembles that of}} the standard UNIX editor. The editor, which runs on any IBM 370 machine under the <b>MVS</b> <b>operating</b> <b>system,</b> is simple to use and the user needs little or {{no knowledge of the}} operating system or job control language...|$|E
40|$|The {{standard}} <b>MVS</b> <b>operating</b> <b>system</b> supplied {{for use on}} IBM 370 computers {{does not}} erase or protect data residing on areas of disk that have been released for reuse. This report discusses the problem and describes efficient techniques {{that have been developed}} and installed at the DRCS which automatically erase all data when disk space is released by its owner. This has involved modifying the disk space management software and included some restructuring to eliminate contention for system resource...|$|E
40|$|In this paper, a semi-Markov {{model is}} built to {{describe}} the software error and recovery process in a large mainframe system. The model is based on low-level error data from the <b>MVS</b> <b>operating</b> <b>system</b> running on an IBM 3081 machine. The semi-Markov model developed provides a quantification of system error characteristics and the interaction between different types of errors. As an example, a detailed model is provided, and an analysis is made of multiple errors, which constitute approximately an 17 percent of all software errors and result in considerable recovery overhead...|$|E
40|$|This paper {{presents}} an architecture that allows multiple isolated commodity <b>operating</b> <b>systems</b> to run concurrently on a microkernel-based <b>operating</b> <b>system</b> without restricting the CPU architecture of guest <b>operating</b> <b>systems.</b> There are several systems that can execute multiple guest <b>operating</b> <b>systems</b> {{by using a}} virtual machine monitor or a microkernel-based <b>operating</b> <b>system.</b> Almost all of them, however, require that the CPU architecture of a guest <b>operating</b> <b>system</b> and a host <b>operating</b> <b>system</b> are identical and the guest <b>operating</b> <b>system</b> needs to be modified. Our architecture {{does not require the}} both of them and the prototype system that we have developed achieved the execution of multiple guest <b>operating</b> <b>systems</b> such as Linux and FreeBSD compiled for several CPU architecture without the modification of them. Since it involved decreasing the performance of a guest <b>operating</b> <b>system,</b> we propose several techniques to improve the performance in this paper. Future embedded system will become more complex, so our approach offers a new way to reuse existing applications and <b>operating</b> <b>systems.</b> 1...|$|R
40|$|In my thesis, I focus on the <b>operating</b> <b>system</b> Google Chrome OS, {{determination}} of its characteristics, definition of target {{group of the}} <b>operating</b> <b>system's</b> users and comparison of available applications with those available for other <b>operating</b> <b>systems.</b> In the theoretical part, historical development of Google is analysed first, followed by the issue of Google Chrome web browser and analyse of the <b>operating</b> <b>system</b> Google Chrome OS. The practical part starts with evaluation of survey on the <b>operating</b> <b>system</b> Google Chrome OS and is followed by multi-criteria analysis of variants comparing various categories of applications available for the <b>operating</b> <b>system</b> Google Chrome OS and other <b>operating</b> <b>systems,</b> in this case represented by the <b>operating</b> <b>system</b> Microsoft Windows 8. 1 and distribution of Linux <b>operating</b> <b>system</b> Ubuntu 14. 04 LTS...|$|R
40|$|Typical {{undergraduate}} <b>operating</b> <b>systems</b> projects use {{services provided}} by an <b>operating</b> <b>system</b> via system calls or develop code in a simulated <b>operating</b> <b>system.</b> However, with the increasing popularity of <b>operating</b> <b>systems</b> with open source code such as Linux, there are untapped possibilities for <b>operating</b> <b>systems</b> projects to modify real <b>operating</b> <b>system</b> code. We present the hardware and software configuration of an open source laboratory that promises to provide students that use it with {{a better understanding of}} <b>operating</b> <b>system</b> internals than is typically gained in a traditional <b>operating</b> <b>systems</b> course. Our preliminary projects and evaluation suggest that thus far the lab has achieved its primary goal in that students that used the lab feel more knowledgeable in <b>operating</b> <b>system</b> and more confident in their ability to write and modify <b>operating</b> <b>system</b> code. 1 Introduction Worcester Polytechnic Institute (WPI) is a private university with approximately 2800 undergraduate students and [...] ...|$|R
40|$|Achieving {{gains in}} {{software}} quality requires both {{the use of}} software metrics {{and the desire to}} make measurement-driven process improvements. This paper describes the experiences, changes, and kinds of metrics used to drive quantifiable results in a very large and complex software system. Developers on the IBM Multiple Virtual Storage (<b>MVS)</b> <b>operating</b> <b>system</b> track, respond, and initiate better ways of controlling the software development process through the use of metricbased defect models, Orthagonal Defect Classification (ODC), and object-oriented techniques. Constant attention to progress with respect to the measurements and working toward goals based on the metrics show that measurement-driven process improvement can lead to noticeably better products. ...|$|E
40|$|It {{may have}} {{seemed as if the}} {{mainframe}} programmer was left out of the OUTPUT DELIVERY SYSTEM (ODS) explosion. It {{may have seemed}} that by using the SAS ® ystem for MVS you could not exploit the more powerful capabilities of ODS. Well in fact, beginning with Version 7, the full power of ODS can be harnessed within the SAS System <b>MVS</b> <b>Operating</b> <b>System</b> environment. This paper will demonstrate, through the use of examples and sample code, how to create output files which can be rendered via a web browser (i. e. HTML, XML, CSS, etc.) and are compatible with the suite of Microsoft (S) Office products, i. e [...] xls,. doc, etc. You can use the power of BASE SAS ODS to create and format output data once, and then use that data to generate mainframe print, as well as personal computer or server ready output...|$|E
40|$|Today, {{software}} {{errors are}} {{the leading cause of}} outages in fault tolerant systems. System availability can be improved despite software errors by fast error detection and recovery techniques that minimize total downtime after an outage. This dissertation analyzes software errors in three commercial systems and describes the implementation and evaluation of several techniques for early error detection and fast recovery in a database management system (DBMS). The software error study examines errors reported by customers in three IBM systems programs: the <b>MVS</b> <b>operating</b> <b>system</b> and the IMS DBMS and DB 2 DBMS. The study classifies errors by the type of coding mistake and the circumstances in the customer's environment that caused the error to arise. It observes a higher availability impact from addressing errors, such as uninitialized pointers, than software errors as a whole. It also details the frequencies and types of addressing errors and characterizes the damage they do. The error detec [...] ...|$|E
50|$|OSP, an Environment for <b>Operating</b> <b>System</b> Projects, is a {{teaching}} <b>operating</b> <b>system</b> {{designed to provide}} an environment for an introductory course in <b>operating</b> <b>systems.</b> By selectively omitting specific modules of the <b>operating</b> <b>system</b> and having the students re-implement the missing functionality, an instructor can generate projects that require students to understand fundamental <b>operating</b> <b>system</b> concepts.|$|R
50|$|OpenBSD {{claims to}} be the only <b>operating</b> <b>system</b> that is fully secure by default. This, however, does not mean it's {{inherently}} the most secure <b>operating</b> <b>system,</b> because that depends on the definition of an <b>operating</b> <b>system.</b> There are many <b>operating</b> <b>systems</b> that are not capable of networking with other systems. Thus, considering the amount of network-based security compromises today, one can argue such an <b>operating</b> <b>system</b> is more secure. OpenBSD is a network <b>operating</b> <b>system.</b>|$|R
50|$|<b>MV</b> Kittern, <b>operated</b> by the ISSC 1949 - ????. Built in 1944 by Fox and Son, Ipswich. An ex Royal Navy motor launch.|$|R
