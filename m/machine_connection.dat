6|614|Public
5000|$|Time <b>Machine</b> <b>connection</b> {{establishment}} and backups are now much faster.|$|E
5000|$|In Susanne D. Coates' Neural Interfacing: Forging the Human <b>Machine</b> <b>Connection</b> (Synthesis Lectures on Biomedical Engineering), {{she claims}} [...] "with {{the passing of}} Dobelle in 2004, 30 years of work {{developing}} the [...] "Dobelle Artificial Vision System" [...] came to a halt. There are a few groups who continue to experiment with cortical vision implants 51 but no system like Dobelle's is presently available" [...] (40).|$|E
40|$|My {{work will}} not inform you {{only with the}} issue of {{magnetic}} field, but also with design complications such as: proposal winding, analysis cogging, the <b>machine</b> <b>connection</b> to infinite bus and independent network and their solutions in the design of electrical machine. In the introductory chapter, we tried to offer the most accurate theory of magnetic fields because it is hard to understand that episodes of physical design of the machine is our alpha and omega. Shows the results of the program RMxprt and Maxwell, where we simulate the synchronous machine with the connection nominal load. The results of the program are verified and compared with calculations...|$|E
50|$|MasPar {{along with}} nCUBE criticized the open {{government}} support, by DARPA, of competitors Intel for their hypercube Personal SuperComputers (iPSC) and the Thinking <b>Machines</b> <b>Connection</b> <b>Machine</b> {{on the pages}} of Datamation.|$|R
5000|$|StarTech - a {{parallel}} chess program built {{to run on}} the Thinking <b>Machines</b> Corporation's <b>Connection</b> <b>Machine</b> model CM-5.|$|R
50|$|According to the {{independent}} wireless analyst firm Berg Insight, the number of cellular network connections worldwide used for machine to machine communication was 47.7 million in 2008. The company forecasts {{that the number of}} <b>machine</b> to <b>machine</b> <b>connections</b> will grow to 187 million by 2014.|$|R
40|$|Abstract. Since {{the fitness}} washing machine can combine the fitness {{movement}} with the housework, this paper analyzes the design purpose {{and meaning of}} fitness washing machine. In view of the design problem of the existing fitness washing machine, this paper designs a new type fitness washing machine and states the specific design scheme, related calculation and structure, application method and innovation points, among them the part of design methods mainly expounds the technical key points, technical index and transmission line, and the part of related calculation and structure mainly expounds the human calculations, design main parameter selection and washing <b>machine</b> <b>connection</b> part structure. Furthermore, the application method is introduced. At last, the innovation points have been pointed out...|$|E
40|$|This project {{deals with}} {{problems}} of industrial installation for luminous and drawer circuit and technological (motor driven) system also. Then is been described a technological system for connection and control problem of electrical machine. Then is described a drawing documentation includes disposal whole object, electrical <b>machine</b> <b>connection</b> into the switchboard, control boxes and control system. The next part contains a power circuit distribution from switchboard to all facilities including control system. The power circuit {{is shown in}} drawing documentation by the single-line diagram and the line scheme for control circuit. The technological equipments distribution includes main switchboard with cable trays are shown in disposition. In the technical report is described a whole project which advert on valid specification of ÄŒSN...|$|E
40|$|Mobile cloud {{computing}} (MCC) is just {{cloud computing}} in {{which at least}} some of the devices like mobiles, PDA etc are involved. This paper drives over several authentication techniques and methods for mobile cloud computing. An analysis of the existing works are carried out. This Paper also analyses the attacks and Issues that occur during authentication in the mobile cloud environment. Security is the main issue that obstructs cloud from being widely adopted. A framework called the Mobile Cloud Authenticator (MCA) is proposed for authenticating the mobile users in the mobile cloud environment. The overall framework of MCA consists of three major entities namely, Cloud users, Mobile network and Cloud. There is a system called Unified Cloud Authenticator (UCA) which is placed in between the mobile network and Cloud Service Provider (CSP). It authenticates both users and CSP. The UCA contains Authentication Server (AS), hashing <b>machine,</b> <b>connection</b> manager, user manager and service manager. The operational procedure of UCA has three phases namely registration phase, authentication phase and verification phase. This paper explains the overall framework of MCA and the functions of UCA in detail...|$|E
40|$|This paper {{describes}} the parallel supercomputer <b>Connection</b> <b>Machine</b> designed by Thinking Computers Corp., now sold by <b>Connection</b> <b>Machine</b> Services Inc. It presents the <b>Connection</b> <b>Machine's</b> historic development, it's different models with their hardware architecture, additional devices, operating system and software. Furthermore, it compares the <b>Connection</b> <b>Machine's</b> architecture with other computer architectures. Finally, it lists some {{applications of the}} <b>Connection</b> <b>Machine</b> and shows a real-world use in the US Naval Research Laboratory. Contents 1 Introduction 2 2 History of the <b>Connection</b> <b>Machine</b> 4 3 Hardware Architecture 5 3. 1 CM- 2............................... 6 3. 1. 1 System components................... 6 3. 1. 2 Data Processing Node.................. 6 3. 1. 3 Floating Point Unit................... 9 3. 1. 4 ALU............................ 9 3. 1. 5 Network..... [...] . ...|$|R
50|$|EPCC {{has hosted}} {{a variety of}} {{supercomputers}} over the years, including several Meiko Computing Surfaces, a Thinking <b>Machines</b> CM-200 <b>Connection</b> <b>Machine,</b> {{and a number of}} Cray systems including a Cray T3D and T3E.|$|R
5000|$|The {{original}} goal of {{this research}} was to explore new models of computational thinking. The first prototype of AgentSheets ran in 1989 at the University of Colorado, NCAR, <b>Connection</b> <b>Machine</b> 2. The <b>Connection</b> <b>Machine</b> is a highly parallel computer with up to 65,536 CPUs. Realizing how hard it was to program the <b>Connection</b> <b>Machine</b> the insight that [...] "CPU cycles will always be ultimately cheaper than cognitive cycles" [...] led to the exploration of several new programming paradigms: ...|$|R
40|$|Abstract. There are now several {{versions}} of Lisp for massively parallel SIMD architec-tures like the Thinking <b>Machines</b> <b>Connection</b> <b>Machine.</b> We describe here the extensions made to EuLisp for data-parallel programming and their implementation on a specic platform, a MasPar MP- 1. Plural EuLisp, {{in keeping with}} the rest of the language, presents a collection of simple orthogonal operators which capture the essence of data parallel processing. In support of this, we demonstrate how to implement a number of higher-level abstraction from other data-parallel languages. 1...|$|R
5000|$|... #Caption: Early 1980s {{supercomputer}} Thinking <b>Machines</b> CM-1 (the <b>Connection</b> <b>Machine)</b> at the Computer History Museum in Mountain View, California. One of {{the face}} plates has been partially removed to show the circuit boards inside.|$|R
5000|$|Massively Parallel Processor (16,384 custom bit-serial {{processors}} {8 to a chip} {{organized in}} a SIMD 128 x 128 processor array with additional CPU rows for fault-tolerance) which was {{located at the}} NASA Goddard Space Flight Center, {{and is now in}} the Smithsonian. This unit predates Danny Hillis' Thinking <b>Machines</b> Corporation's <b>Connection</b> <b>Machine</b> ...|$|R
40|$|The {{complexity}} of most machine learning techniques {{can be improved}} by transforming iterative components into their parallel equivalent. Although this parallelization has been considered in theory, few implementations have been performed on existing parallel machines. The parallel architecture of the <b>Connection</b> <b>Machine</b> provides a platform for the implementation and evaluation of parallel learning techniques. The architecture of the <b>Connection</b> <b>Machine</b> is described along with limitations of the language interface that constrain the implementation of learning programs. <b>Connection</b> <b>Machine</b> implementations of two learning programs, Perceptron and AQ, are described, and their computational complexity is {{compared to that of}} the corresponding sequential versions using actual runs on the <b>Connection</b> <b>Machine.</b> Techniques for parallelizing ID 3 are also analyzed, and {{the advantages and disadvantages of}} parallel implementation on the <b>Connection</b> <b>Machine</b> are discussed in the context of machine learning. [...] ...|$|R
40|$|The {{discipline}} of {{computational fluid dynamics}} is demanding ever-increasing computational power to deal with complex fluid flow problems. We investigate {{the performance of a}} finite-difference computational fluid dynamics algorithm on a massively parallel computer, the <b>Connection</b> <b>Machine.</b> Of special interest is an implicit time-stepping algorithm; to obtain maximum performance from the <b>Connection</b> <b>Machine,</b> it is necessary to use a nonstandard algorithm to solve the linear systems that arise in the implicit algorithm. We find that the <b>Connection</b> <b>Machine</b> ran achieve very high computation rates on both explicit and implicit algorithms. The performance of the <b>Connection</b> <b>Machine</b> puts it in the same class as today's most powerful conventional supercomputers...|$|R
50|$|The {{station has}} a ticket office, escalators, cash <b>machines,</b> bus <b>connections,</b> pay phones, water fountains, and a lost and found.|$|R
40|$|<b>Connection</b> <b>Machine</b> Lisp is a dialect of Lisp {{extended}} to al-low a fine. grained, data-oriented style of parallel execution. We {{introduce a new}} data structure, the xapping, that is like a sparse array whose elements can be processed in parallel. This kind of processing is suitable for implementation by such fine-grained parallel computers as the <b>Connection</b> <b>Machine</b> System and NON-VON. Additional program notation is introduced to indicate var-ious parallel operations. The symbols st and â€¢ are used, in a manner syntactically reminiscent of the backquote notation used in Common Lisp, to indicate what parts of an expression are to be executed in parallel. Ths symbol fl is used to indicate permu-tation and reduction of sets of data. <b>Connection</b> <b>Machine</b> Lisp in practice leans heavily on APL and FP and their descendants. Many ideas and stylistic idioms can be carried over directly. Some idioms of <b>Connection</b> <b>Machine</b> Lisp are difficult to render in APL because <b>Connection</b> <b>Machine</b> Lisp xappings may be sparse while APL vectors are not sparse. We give many small examples of programming in <b>Connection</b> <b>Machine</b> Lisp. Two metâ€¢circular interpreters for a subset of <b>Connection</b> <b>Machine</b> Lisp are presented. One is concise but suffers from defining a in terms of itself {{in such a way}} as to obscure its essential properties. The other is longer but facilitates presentation of these properties...|$|R
40|$|The {{quest for}} speed {{and the need}} to solve ever more complex {{problems}} has {{led to the development of}} powerful computer systems, such as the <b>Connection</b> <b>Machine.</b> Concurrent processing promises a solution to the problem. COOL (Concurrent Object-Oriented Language) has been developed in order to provide the <b>Connection</b> <b>Machine</b> with a subset of C 2 Ì† 2 which includes several concurrent constructs. The <b>Connection</b> <b>Machine</b> has an inherently parallel architecture which can be taken advantage of with software...|$|R
50|$|At Thinking Machines Corporation, Cliff Lasser and Steve Omohundro {{developed}} Star Lisp, {{the first}} programming language for the <b>Connection</b> <b>Machine.</b> Omohundro also {{helped create the}} data parallel style of parallel programming and developed many parallel algorithm libraries and applications for the <b>Connection</b> <b>Machine.</b>|$|R
40|$|Abstract. This article {{takes the}} {{management}} system of NC <b>machineâ€™s</b> <b>connection</b> and assembly {{as a research}} object, and introduce RFID technology {{as well as the}} application of RFID. It establishes basic information management of NC machine, marking information management, assembly information management, serial communication and other functional modules. Then design engineering framework-a kind of visual management user interface- in VC platform. At last, it needs to do the mapping coefficient and data transmitting from the engineering framework to database by ADO database access...|$|R
40|$|An {{efficient}} unstructured 3 D Euler solver is paraJlelized on a Thinking <b>Machine</b> Corporation <b>Connection</b> <b>Machine</b> 5, {{distributed memory}} computer with vectorizing capability. In this paper, the SIMD strategy is employed {{through the use}} of the CM Fortran language and the CMSSL scientific library. The performance of the CMSSL mesh partitioner is evaluated and the overall efficiency of the parallel flow solver is discussed...|$|R
50|$|For the X and Y-axis {{drive systems}} most PCB milling {{machines}} use stepper motors that drive a precision lead screw. The lead screw is in turn {{linked to the}} gantry or milling head by a special precision <b>machined</b> <b>connection</b> assembly. To maintain correct alignment during milling, the gantry or milling head's direction of travel is guided along using linear or dovetailed bearing(s). Most X/Y drive systems provide user control, via software, of the milling speed, which determines how fast the stepper motors drive their respective axes.|$|R
50|$|DARPA's <b>Connection</b> <b>Machines</b> were {{decommissioned}} by 1996.|$|R
5000|$|Mechatronics Engineering - person - <b>machine</b> - {{computer}} <b>Connection</b> ...|$|R
40|$|This manual {{describes}} {{a set of}} functions for using image pyramids on the <b>Connection</b> <b>Machine.</b> These functions are an extension of *LISP which itself {{is an extension of}} *LISP. The functions were designed to work on the <b>Connection</b> <b>Machine</b> 2 of the Northeast Parallel Architectures Center located at Syracuse University...|$|R
40|$|The CM- 2 is {{an example}} of a <b>connection</b> <b>machine.</b> The {{strengths}} and problems of this implementation are considered as well as important issues in the architecture and programming environment of <b>connection</b> <b>machines</b> in general. These are contrasted to the same issues in Multiple Instruction/Multiple Data (MIMD) microprocessors and multicomputers...|$|R
5000|$|Brewster Kahle - lead {{engineer}} on the <b>Connection</b> <b>Machine</b> projects ...|$|R
5000|$|<b>Connection</b> <b>Machine,</b> a {{real life}} {{supercomputer}} family with a similar architecture ...|$|R
50|$|A Boltzmann {{machine is}} a type of {{stochastic}} neural network invented by Geoffrey Hinton and Terry Sejnowski in 1985. Boltzmann machines {{can be seen as the}} stochastic, generative counterpart of Hopfield nets. They are named after the Boltzmann distribution in statistical mechanics. The units in Boltzmann machines are divided into two groups-visible units and hidden units. General Boltzmann <b>machines</b> allow <b>connection</b> between any units. However, learning is impractical using general Boltzmann Machines because the computational time is exponential to the size of the machine. A more efficient architecture is called restricted Boltzmann <b>machine</b> where <b>connection</b> is only allowed between hidden unit and visible unit, which is described in the next section.|$|R
40|$|We {{examine the}} {{possibility}} of applying massive parallelism to the powerful machine learning algorithm AQ developed at the University of Illinois. We show how one new tool, the <b>Connection</b> <b>Machine,</b> {{may be used to}} significantly speed up AO. We present complexity estimates of parallel source code written in <b>Connection</b> <b>Machine</b> Lisp. 8 y exploiting parallelism on the <b>Connection</b> <b>Machine,</b> the complexity of AO's major routines are redlJced from polynomial to logarithmic time. Acknowledgements This work benefited from many helpful suggestions provided by R. S. Michalski and I. Mozetic. Thanks also go to I. Mozetic, 8. Katz, and C. Uhrik for reviewing {{an earlier version of this}} paper...|$|R
40|$|The {{adaptation}} of a finite element program with explicit time integration to a massively parallel SIMD (single instruction multiple data) computer, the <b>CONNECTION</b> <b>Machine</b> is described. The adaptation required {{the development of}} a new algorithm, called the exchange algorithm, in which all nodal variables are allocated to the element with an exchange of nodal forces at each time step. The architectural and C* programming language features of the <b>CONNECTION</b> <b>Machine</b> are also summarized. Various alternate data structures and associated algorithms for nonlinear finite element analysis are discussed and compared. Results are presented which demonstrate that the <b>CONNECTION</b> <b>Machine</b> is capable of outperforming the CRAY XMP/ 14...|$|R
40|$|The <b>Connection</b> <b>Machine</b> helps PricewaterhouseCoopers LLP (PwC) {{partners}} and staff {{to solve problems}} by connecting people to people. It allows information seekers to enter their question in free text, finds knowledgeable colleagues, forwards the question to them, obtains the answer and sends {{it back to the}} seeker. In the course of this interaction, the application unobtrusively learns and updates user profiles and thereby increases its routing accuracy. The <b>Connection</b> <b>Machine</b> combines features of expertise locators, adaptive casebased recommender systems and question answering applications. This document describes the core technology that supports the workflow, the user modeling and the retrieval technology of the <b>Connection</b> <b>Machine...</b>|$|R
50|$|Gores completes its {{purchase}} of the <b>Connection</b> <b>Machines</b> business unit from Thinking Machines Corporation.|$|R
50|$|The expert may reboot {{the remote}} <b>machine</b> and the <b>connection</b> will be {{restored}} automatically.|$|R
