10|11|Public
5000|$|<b>Maskable</b> <b>interrupt</b> (IRQ): a {{hardware}} interrupt {{that may be}} ignored by setting a bit in an interrupt mask register's (IMR) bit-mask.|$|E
5000|$|The three {{semi-circular}} legends on {{the bottom}} left of the board marked positions for optional push switches to trigger the board's RESET, IRQ (Interrupt ReQuest) and NMI (Non <b>Maskable</b> <b>Interrupt)</b> lines.|$|E
5000|$|A non <b>maskable</b> <b>interrupt</b> (NMI) {{which can}} be used to respond to power down {{situations}} and/or other high priority events (and allowing a minimalistic Z80 system to easily implement a two-level interrupt scheme in mode 1).|$|E
50|$|ATNRQ0...7*:Attention Requests. These are {{reserved}} for boards to signal for processor attention, a term which covers Interrupts and Direct Memory Access (DMA). The wise choice of signal does not commit these lines to being specific types, such as <b>maskable</b> <b>interrupts,</b> non-maskable interrupts, or DMA.|$|R
50|$|External {{interrupts}} are {{triggered by}} falling/rising edges or high/low potential at the interrupt port, {{leading to an}} interrupt request (IRQ) in the controller. Hardware interrupts are divided into <b>maskable</b> <b>interrupts</b> and non-maskable interrupts (NMI). The triggering of <b>maskable</b> <b>interrupts</b> can be stopped in some time-critical functions. If an interrupt is called, the current instruction pointer (IP) is saved on the stack, and the stack pointer (SP) is decremented. The address of the interrupt service routine (ISR) is read from the interrupt vector table and loaded to the IP register, and the ISR is executed as a consequence.|$|R
50|$|IF (Interrupt Flag) is {{a system}} flag bit in the x86 architecture's FLAGS register, which determines {{whether or not the}} CPU will handle <b>maskable</b> {{hardware}} <b>interrupts.</b>|$|R
50|$|Conditionals in the 6100 only {{allow the}} next {{instruction}} to be skipped. Branches are constructed with a conditional and a following jump. There {{is only one}} <b>maskable</b> <b>interrupt.</b> When the interrupt is tripped, the CPU stores the current PC in 0000, and then jumps to the location stored in 0001. The interrupt can be disabled or enabled using the IOF and ION (or SKON) instructions.|$|E
50|$|A {{watchdog}} timer may initiate any of {{several types of}} corrective action, including <b>maskable</b> <b>interrupt,</b> non-maskable interrupt, processor reset, fail-safe state activation, power cycling, or combinations of these. Depending on its architecture, the type of corrective action or actions that a watchdog can trigger may be fixed or programmable. Some computers (e.g., PC compatibles) require a pulsed signal to invoke a processor reset. In such cases, the watchdog typically triggers a processor reset by activating an internal or external pulse generator, which in turn creates the required reset pulses.|$|E
5000|$|The AT&T 6300 Plus {{contained}} an Intel 80286 processor, {{which did not}} include the support for 8086 virtual machines (virtual 8086 mode) found in the Intel 80386 and later processors in the x86 family. On the 80286, the DOS program had to run in realmode. The 6300 Plus was designed with special hardware on the bus that would suppress and capture bus cycles from the DOS program if they were directed toward addresses not assigned for direct access by the DOS virtual machine. [...] Various system registers, such as the programmable interrupt controller, and the video controller, had to be emulated in software for the DOS process, and a watchdog timer was implemented to recover from DOS programs that would clear the interrupt flag and then hang for too long. The hardware used the Non <b>Maskable</b> <b>Interrupt</b> (NMI) to take control back to the emulation code. More detail may be seen in the patent referenced in the External Links below.|$|E
5000|$|Flags {{are heavily}} used for {{comparisons}} in the x86 architecture. When a comparison is made between two data, the CPU sets the relevant flag or flags. Following this, conditional jump instructions {{can be used}} to check the flags and branch to code that should run, e.g.: cmp eax, ebx jne do_something ...do_something: do something hereFlags are also used in the x86 architecture to turn on and off certain features or execution modes. For example, to disable all <b>maskable</b> <b>interrupts,</b> you can use the instruction: cli ...|$|R
5000|$|The W65C265S {{consists}} of a W65C816S (Static) Central Processing Unit (CPU), 8 kB of Read Only Memory (ROM), 576 bytes of Random Access Memory (RAM), Processor defined cache under software control, eight 16-bit timers with <b>maskable</b> <b>interrupts,</b> high performance interrupt-driven Parallel Interface Bus (PIB), four Universal Asynchronous Receivers and Transmitters (UART) with baud rate timers, Monitor [...] "Watch Dog" [...] Timer with [...] "restart" [...] interrupt, twenty-nine priority encoded interrupts, Built-in Emulation features, Time of Day (ToD) clock features, Twin Tone Generators (TGx), Bus Control Register (BCR) for external memory bus control, interface circuitry for peripheral devices, ABORT input for low cost virtual memory interface, and many low power features.|$|R
50|$|The {{simultaneous}} {{assertion of}} the NMI and IRQ (<b>maskable)</b> hardware <b>interrupt</b> lines causes IRQ to be ignored. However, if the IRQ line remains asserted after the servicing of the NMI, the processor will immediately respond to IRQ, as IRQ is level sensitive. Thus {{a sort of}} built-in interrupt priority {{was established in the}} 6502 design.|$|R
50|$|However, the ULA {{must wait}} for a Z80 read or write to {{complete}} before it can stop the Z80's clock and access the memory. As the ULA has no capacity to prefetch and store data in advance, it relies upon the memory being available to read to produce a clean and true video display. If an existing Z80 access is in progress when the ULA must read video data, the read is missed and the display shows blank white pixels {{in place of the}} correct video pixels. On the next frame, they may well be read correctly. The consequences of this often appeared as a flickering of missing pixels on the display, or 'snow' as it was also called. To avoid snow, some programs and games only copied data to the display on interrupt, as the Spectrum <b>maskable</b> <b>interrupt</b> was generated by the display vertical refresh signal. This ensures that as much of the display as possible was updated during the blanking and border time when video data was not used.|$|E
50|$|The 6501 and 6502 have 40-pin DIP packages; the 6503, 6504, 6505, and 6507 are 28-pin DIP versions, for reduced {{chip and}} circuit board cost. In the 28-pin versions, the pin count {{is reduced by}} leaving {{off some of the}} {{high-order}} address pins and various combinations of function pins, making those functions unavailable. Typically, the 12 pins omitted are the three N.C. pins, one of the two Vss pins, one of the clock pins, the SYNC pin, the S.O. pin, either the <b>maskable</b> <b>interrupt</b> or the NMI, and the four most-significant address lines (A12 - A15) are the 12 pins omitted to reduce the pin count from 40 to 28. The omission of four address pins reduces the external addressability to 4 KB (from the 64 KB of the 6502), though the internal PC register and all effective address calculations remain 16-bit. The 6507 omits both interrupt pins in order to include address line A12, providing 8 KB of external addressability but no interrupt capability. The 6507 was used in the popular Atari 2600 video game console, the design of which divides the 8 KB memory space in half, allocating the lower half to the console's internal RAM and peripherals the upper half to the Game Cartridge&trade;, so Atari 2600 cartridges have a 4 KB address limit (and the same capacity limit unless the cartridge contains bank switching circuitry).|$|E
40|$|The PCAL 9535 A is a {{low-voltage}} 16 -bit General Purpose Input/Output (GPIO) expander with interrupt and reset for I 2 C-bus/SMBus applications. NXP I/O expanders {{provide a}} simple solution when additional I/Os are needed while keeping interconnections to a minimum, for example, in ACPI power switches, sensors, push buttons, LEDs, fan control, etc. In addition to providing a flexible set of GPIOs, the wide VDD range of 1. 65 V to 5. 5 V allows the PCAL 9535 A to interface with next-generation microprocessors and microcontrollers where supply levels are dropping down to conserve power. The PCAL 9535 A contains the PCA 9535 register set of four pairs of 8 -bit Configuration, Input, Output, and Polarity Inversion registers, and additionally, the PCAL 9539 has Agile I/O, which are additional features specifically designed to enhance the I/O. These additional features are: programmable output drive strength, latchable inputs, programmable pull-up/pull-down resistors, <b>maskable</b> <b>interrupt,</b> interrupt status register, programmable open-drain or push-pull outputs. The PCAL 9535 A is a pin-to-pin replacement to the PCA 9535 and PCA 9535 A, however...|$|E
5000|$|The third custom support chip, named POKEY, is {{responsible}} for reading the keyboard, generating sound and serial communications (in conjunction with the PIA). It also provides timers, a random number generator (for generating acoustic noise as well as random numbers), and <b>maskable</b> <b>interrupts.</b> POKEY has four semi-independent audio channels, {{each with its own}} frequency, noise and volume control. Each 8-bit channel has its own audio control register which select the noise content and volume. For higher sound frequency resolution (quality), two of the audio channels can be combined for more accurate sound (frequency can be defined with 16-bit value instead of usual 8-bit). The name POKEY comes from the words [...] "POtentiometer" [...] and [...] "KEYboard", which are two of the I/O devices that POKEY interfaces with (the potentiometer is the mechanism used by the paddle). The POKEY chip—as well as its dual- and quad-core versions—were used in several Atari coin-op arcade machines of the 80s, including Missile Command and Asteroids Deluxe, among others.|$|R
50|$|The bit, {{which is}} bit 9 of the FLAGS register, may be set or cleared by {{programs}} with sufficient privileges, as usually {{determined by the}} Operating System. If the flag is set to 1, <b>maskable</b> hardware <b>interrupts</b> will be handled. If cleared (set to 0), such interrupts will be ignored. IF {{does not affect the}} handling of non-maskable interrupts or software interrupts generated by the INT instruction.|$|R
50|$|The 8085 has {{extensions}} {{to support}} new <b>interrupts,</b> with three <b>maskable</b> vectored <b>interrupts</b> (RST 7.5, RST 6.5 and RST 5.5), one non-maskable interrupt (TRAP), and one externally serviced interrupt (INTR). Each {{of these five}} interrupts has a separate pin on the processor, a feature which permits simple systems to avoid {{the cost of a}} separate interrupt controller. The RST 7.5 interrupt is edge triggered (latched), while RST 5.5 and 6.5 are level-sensitive. All interrupts are enabled by the EI instruction and disabled by the DI instruction. In addition, the SIM (Set Interrupt Mask) and RIM (Read Interrupt Mask) instructions, the only instructions of the 8085 that are not from the 8080 design, allow each of the three <b>maskable</b> RST <b>interrupts</b> to be individually masked. All three are masked after a normal CPU reset. SIM and RIM also allow the global interrupt mask state and the three independent RST interrupt mask states to be read, the pending-interrupt states of those same three interrupts to be read, the RST 7.5 trigger-latch flip-flop to be reset (cancelling the pending interrupt without servicing it), and serial data to be sent and received via the SOD and SID pins, respectively, all under program control and independently of each other.|$|R
40|$|The PCAL 9555 A is a {{low-voltage}} 16 -bit General Purpose Input/Output (GPIO) expander with interrupt {{and weak}} pull-up resistors for I 2 C-bus/SMBus applications. NXP I/O expanders provide {{a simple solution}} when additional I/Os are needed while keeping interconnections to a minimum, for example, in ACPI power switches, sensors, push buttons, LEDs, fan control, etc. In addition to providing a flexible set of GPIOs, the wide VDD range of 1. 65 V to 5. 5 V allows the PCAL 9555 A to interface with next-generation microprocessors and microcontrollers where supply levels are dropping down to conserve power. The PCAL 9555 A contains the PCA 9555 register set of four pairs of 8 -bit Configuration, Input, Output, and Polarity Inversion registers, and additionally, the PCAL 9555 A has Agile I/O, which are additional features specifically designed to enhance the I/O. These additional features are: programmable output drive strength, latchable inputs, programmable pull-up/pull-down resistors, <b>maskable</b> <b>interrupt,</b> interrupt status register, programmable open-drain or push-pull outputs. The PCAL 9555 A is a pin-to-pin replacement to the PCA 9555, however, the PCAL 9555 A powers up with all I/O interrupts masked. This mask default allows for a board bring-up free of spurious interrupts at power-up. The PCAL 9555 A open-drain interrupt (INT) output is activated when any input state differs from its corresponding Input Port register state and is used to indicate to the system master that an input state has changed. INT can {{be connected to the}} interrupt input of a microcontroller. By sending an interrupt signal on this line, the remote I/O can inform the microcontroller if there is incoming data on its ports without having to communicate via the I 2 C-bus. Thus, the PCAL 9555 A can remain a simple slave device. The device outputs have 25 mA sink capabilities for directly driving LEDs while consuming low device current. The power-on reset sets the registers to their default values and initializes the device state machine. The device powers on with weak pull-up resistors enabled that can replace external components. Three hardware pins (A 0, A 1, A 2) select the fixed I 2 C-bus address and allow up to eight devices to share the same I 2 C-bus/SMBus. NXP Semiconductor...|$|E
40|$|Abstract. In the VAMP (verified {{architecture}} microprocessor) project we have designed, functionally verified, and synthesized {{a processor}} with full DLX instruction set, delayed branch, Tomasulo scheduler, <b>maskable</b> nested precise <b>interrupts,</b> pipelined fully IEEE compatible dual precision floating point unit with variable latency, and separate instruction and data caches. The verification {{has been carried}} out in the theorem proving system PVS. The processor has been implemented on a Xilinx FPGA. ...|$|R
40|$|The {{need for}} further sophistication of an already complex serial CAMAC control system at Fermilab led to the {{development}} of an Auxilary/Master CAMAC Crate Controller. The controller contains a Motorola 6800 microprocessor, 2 K bytes of RAM, and 8 K bytes of PROM memory. Bussed dataway lines are time shared with CAMAC signals to provide memory expansion and direct addressing of peripheral devices without the need of external cabling. The Auxiliary/Master Crate Controller (A/MCC) can function as either a Master, i. e., stand alone, crate controller or as an Auxiliary controller to Fermilab's Serial Crate Controller (SCC). Two modules, one single- and one double-width, make up an A/ MCC. The microprocessor has one nonmaskable and one <b>maskable</b> vectored <b>interrupt.</b> Time sharing the dataway between SCC programmed and block transfer generated dataway cycles and A/MCC operations still allows a 99 percent microprocessor CPU busy time. Since the conception of the A/MCC, there has been an increasing number of control system-related projects proposed which would not have been possible or would have been very difficult to implement without such a device. The first such application now in use at Fermilab is a stand-alone control system for a mass spectrometer experiment in the Main Ring Internal Target Area. This application in addition to other proposed A/MCC applications, both stand-alone and auxiliary, is discussed. (auth...|$|R

