81|296|Public
2500|$|The early {{versions}} of 60–100MHz P5 Pentiums {{had a problem}} in the floating point unit that resulted in incorrect (but predictable) results from some division operations. This bug, discovered in 1994 by professor Thomas Nicely at Lynchburg College, Virginia, became known as the Pentium FDIV bug and caused embarrassment for Intel, which created an exchange program to replace the faulty processors. Soon afterwards, a bug was discovered which could allow a <b>malicious</b> <b>program</b> to crash a system without any special privileges (the [...] "F00F bug"); fortunately, operating systems were able to implement workarounds to prevent crashes.|$|E
5000|$|The <b>malicious</b> <b>program</b> encrypts files {{with the}} {{aforementioned}} extensions {{in the following}} directories : ...|$|E
50|$|SMART HDD is a <b>malicious</b> <b>program</b> for Microsoft Windows that {{attempts}} to confuse computer users into thinking it is the similarly named S.M.A.R.T. hardware monitoring system.|$|E
5000|$|Dropping and/or {{installing}} additional <b>malicious</b> scripts or <b>programs</b> as well downloading {{and starting}} separate <b>malicious</b> <b>programs</b> ...|$|R
5000|$|Four {{types of}} the most common <b>malicious</b> <b>programs</b> are known to affect mobile devices: ...|$|R
40|$|Abstract – As {{the title}} implies the article {{describes}} the problems of protection against <b>malicious</b> <b>programs.</b> The widely used method of protection, which is currently the signature analysis, is described. Also the article considers the causes of low efficiency of this method / A method of protection against <b>malicious</b> <b>programs</b> that would guarantee to prevent the recording and execution of unauthorized programs is offered...|$|R
50|$|In {{the spring}} of 2011, cyber-security expert Brian Krebs accused Vrublevsky and Alexander Volkov of {{creating}} a <b>malicious</b> <b>program</b> aimed at Apple computers, and accused ChronoPay of working with Mac Defender, a rogue security program posing as antivirus software.|$|E
50|$|Autorun.inf {{has been}} used to execute a <b>malicious</b> <b>program</b> automatically, without the user knowing. This {{functionality}} was removed in Windows 7 and a patch for Windows XP and Vista was released on August 25, 2009 and included in Microsoft Automatic Updates on February 8, 2011.|$|E
5000|$|On {{the day of}} the marriage, both of them {{decide to}} {{register}} the marriage. But Philipose has a different <b>malicious</b> <b>program</b> altogether. He kidnaps Kalyaani so that the wedding doesn't happen.A terrible fight ensues and finally, Avarachan and Thampi patch everything up for their children.|$|E
30|$|The {{wireless}} {{sensor node}} network is self-contained with no entry points for <b>malicious</b> <b>programs</b> to infiltrate through into the system.|$|R
5000|$|Variant I {{represent}} malicious, and packed, Win32 <b>programs.</b> Many <b>malicious</b> <b>programs</b> {{are packed}} with particular utilities {{in an attempt to}} avoid detection.|$|R
50|$|KIS uses a {{whitelist}} by Carbon Black {{to classify}} trusted and <b>malicious</b> <b>programs.</b> <b>Malicious</b> <b>programs</b> {{are not allowed}} to run at all. Unknown programs falling in between the two categories are restricted in the actions they can perform. Its firewall blocked all attacks in PC Magazine testing. Phishing protection was introduced in this release. Testing by PC Magazine found the feature blocked 44 percent of phishing URLs. Internet Explorer 7 blocked 67 percent of the URLs, and Mozilla Firefox blocked 81 percent.|$|R
50|$|Access control enforces {{checks on}} access to information, {{but is not}} {{concerned}} about what happens after that. An example: A system has two users, Alice and Bob. Alice has a file secret.txt, which is only allowed to be read and edited by her, and she prefers to keep this information to herself. In the system, there also exists a file public.txt, which is free to read and edit for all users in the system. Now suppose that Alice has accidentally downloaded a <b>malicious</b> <b>program.</b> This program can access the system as Alice, bypassing the access control check on secret.txt. The <b>malicious</b> <b>program</b> then copies the content of secret.txt and places it in public.txt, allowing Bob and all other users to read it. This constitutes {{a violation of the}} intended confidentiality policy of the system.|$|E
50|$|In earlier {{personal}} computers, {{attempting to}} write data to hardware addresses {{outside of the}} system's main memory could cause hardware damage. Some crashes are exploitable and allow a <b>malicious</b> <b>program</b> or hacker to execute arbitrary code allowing for the replication of viruses or the acquisition of data which would normally be inaccessible.|$|E
50|$|Software-based {{security}} solutions encrypt {{the data}} {{to protect it from}} theft. However, a <b>malicious</b> <b>program</b> or a hacker could corrupt the data {{in order to make it}} unrecoverable, making the system unusable. Hardware-based security solutions can prevent read and write access to data and hence offer very strong protection against tampering and unauthorized access.|$|E
40|$|<b>Malicious</b> <b>programs</b> {{have been}} a serious threat for the confidentiality, {{integrity}} and availability of a system. Different researches have been done to detect them. Two approaches have been derived for it i. e. Signature Based Detection and Heuristic Based Detection. These approaches performed well against known <b>malicious</b> <b>programs</b> but cannot catch the new <b>malicious</b> <b>programs.</b> Different researchers tried {{to find new ways}} of detecting <b>malicious</b> <b>programs.</b> The application of data mining and machine learning is one of them and has shown good results compared to other approaches. A new category of <b>malicious</b> <b>programs</b> has gained momentum and it is called Spyware. Spyware are more dangerous for confidentiality of private data of the user of system. They may collect the data and send it to third party. Traditional techniques have not performed well in detecting Spyware. So {{there is a need to}} find new ways for the detection of Spyware. Data mining and machine learning have shown promising results in the detection of other <b>malicious</b> <b>programs</b> but it has not been used for detection of Spyware yet. We decided to employ data mining for the detection of spyware. We used a data set of 137 files which contains 119 benign files and 18 Spyware files. A theoretical taxonomy of Spyware is created but for the experiment only two classes, Benign and Spyware, are used. An application Binary Feature Extractor have been developed which extract features, called n-grams, of different sizes on the basis of common feature-based and frequency-based approaches. The number of features were reduced and used to create an ARFF file. The ARFF file is used as input to WEKA for applying machine learning algorithms. The algorithms used in the experiment are: J 48, Random Forest, JRip, SMO, and Naive Bayes. 10 -fold cross-validation and the area under ROC curve is used for the evaluation of classifier performance. We performed experiments on three different n-gram sizes, i. e. : 4, 5, 6. Results have shown that extraction of common feature approach has produced better results than others. We achieved an overall accuracy of 90. 5 % with an n-gram size of 6 from the J 48 classifier. The maximum area under ROC achieved was 83. 3 % with Random Forest. + 46709325761, + 4676278255...|$|R
50|$|There {{are several}} <b>malicious</b> <b>programs</b> {{designed}} to look like Spybot-S&D (and other anti-malware software), with similar user interfaces and program file names. Some actually install spyware. These programs are known as rogue antispyware.|$|R
5000|$|CCleaner [...] (formerly Crap Cleaner), {{developed}} by Piriform, is a utility program used to clean potentially unwanted files (including temporary internet files, where <b>malicious</b> <b>programs</b> and code tend to reside) and invalid Windows Registry entries from a computer.|$|R
50|$|Aside {{from the}} von Neumann bottleneck, program {{modifications}} {{can be quite}} harmful, either by accident or design. In some simple stored-program computer designs, a malfunctioning program can damage itself, other programs, or the operating system, possibly leading to a computer crash. Memory protection {{and other forms of}} access control can usually protect against both accidental and <b>malicious</b> <b>program</b> modification.|$|E
50|$|In August 2010, Kaspersky Lab {{reported}} a trojan designated Trojan-SMS.AndroidOS.FakePlayer.a. This {{was the first}} <b>malicious</b> <b>program</b> classified as a Trojan SMS that affects smartphones running on Google's Android operating system, and which had already infected a number of mobile devices, sending SMS messages to premium rate numbers without the owner's knowledge or consent, and accumulating huge bills.|$|E
50|$|Login spoofings are {{techniques}} used {{to steal a}} user's password. The user is presented with an ordinary looking login prompt for username and password, which is actually a <b>malicious</b> <b>program,</b> usually called a Trojan horse {{under the control of}} the attacker. When the username and password are entered, this information is logged or in some way passed along to the attacker, breaching security.|$|E
5000|$|Malicious {{software}} or malware {{which is}} software that is developed to harm and disrupt computers. As such, malware is undesirable. Malware is {{closely associated with}} computer-related crimes, though some <b>malicious</b> <b>programs</b> may have been designed as practical jokes.|$|R
50|$|Kaspersky Lab {{is helping}} to assist in {{investigations}} and countermeasures that disrupt malware operations and cybercriminal activity. During the investigations they provide technical expertise such as analyzing infection vectors, <b>malicious</b> <b>programs,</b> supported Command & Control infrastructure and exploitation methods.|$|R
5000|$|Some <b>malicious</b> <b>programs</b> contain {{routines}} {{to defend}} against removal, not merely to hide themselves. An early example of this behavior is recorded in the Jargon File tale {{of a pair of}} programs infesting a Xerox CP-V time sharing system: ...|$|R
50|$|Once a <b>malicious</b> <b>program</b> is {{installed}} on a system, {{it is essential}} that it stays concealed, to avoid detection. Software packages known as rootkits allow this concealment, by modifying the host's operating system so that the malware is hidden from the user. Rootkits can prevent a malicious process from being visible in the system's list of processes, or keep its files from being read.|$|E
50|$|Some {{password}} managers use a user-selected master password or passphrase to {{form the}} key used to encrypt the protected passwords. The security of this approach depends {{on the strength of}} the chosen password (which might be guessed or brute-forced), and also that the passphrase itself is never stored locally where a <b>malicious</b> <b>program</b> or individual could read it. A compromised master password renders all of the protected passwords vulnerable.|$|E
50|$|Winlogon has {{support for}} plugins that get loaded and {{notified}} about specific events and LSASS also supports plugins (security packages). Some rootkits bundle Winlogon plugins {{because they are}} loaded before any user logs in. Some keys allow multiple comma-separated values to be supplied that allow a <b>malicious</b> <b>program</b> to be executed {{at the same time}} as a legit system file. The hashing algorithms stored in the SAM database are known to be broken.|$|E
50|$|Another {{example of}} a hacking tool is a {{computer}} worm. These <b>malicious</b> <b>programs</b> detect vulnerabilities in operating systems. Not all worms, however, are malicious. The Nachi Worms have actually fixed operating system vulnerabilities by downloading and installing security patches from the Microsoft website.|$|R
50|$|This has {{the effect}} that new Java {{installations}} only provide new language features and bug fixes, {{but they do not}} correct security vulnerabilities, because <b>malicious</b> <b>programs</b> can look for the older prior Java releases and use them rather than the newest versions.|$|R
40|$|This paper {{presents}} the detection techniques of anomalous programs {{based on the}} analysis of their system call traces. We collect the API calls for the tested executable programs from Microsoft detour system and extract the features for our classification task using the previously established n-gram technique. We propose three different feature extraction approaches in this paper. These are frequency-based, time-based and a hybrid approach which actually combines the first two approaches. We use the well-known classifier algorithms in our experiments using WEKA interface to classify the <b>malicious</b> <b>programs</b> from the benign programs. Our empirical evidence demonstrates that the proposed feature extraction approaches can detect <b>malicious</b> <b>programs</b> over 88 % which is quite promising for the contemporary similar research. <br /...|$|R
5000|$|The {{window manager}} sends each window {{a message to}} repaint itself {{whenever}} appropriate (such as when it is resized, or when another window passes in front of it). With a stacking manager, the repainting process can become corrupted when a program that is slow, unresponsive or buggy does not respond to messages in a timely manner. A <b>malicious</b> <b>program</b> can cause the system to appear unstable by simply neglecting to repaint its window. Then, {{one or more of}} the following conditions may result: ...|$|E
50|$|Working of {{hardware-based}} security: A {{hardware device}} allows a user to log in, log out and set different privilege levels by doing manual actions. The device uses biometric technology to prevent malicious users from logging in, logging out, and changing privilege levels. The {{current state of}} a user of the device is read by controllers in peripheral devices such as hard disks. Illegal access by a malicious user or a <b>malicious</b> <b>program</b> is interrupted based on {{the current state of}} a user by hard disk and DVD controllers making illegal access to data impossible. Hardware-based access control is more secure than protection provided by the operating systems as operating systems are vulnerable to malicious attacks by viruses and hackers. The data on hard disks can be corrupted after a malicious access is obtained. With hardware-based protection, software cannot manipulate the user privilege levels. It is impossible for a hacker or a <b>malicious</b> <b>program</b> to gain access to secure data protected by hardware or perform unauthorized privileged operations. This assumption is broken only if the hardware itself is malicious or contains a backdoor. The hardware protects the operating system image and file system privileges from being tampered. Therefore, a completely secure system can be created using a combination of hardware-based security and secure system administration policies.|$|E
50|$|It {{is worth}} noting that this is true for any <b>malicious</b> <b>program</b> that is run without special steps taken to limit its privileges. It is trivial to add a code snippet to any program that a user may {{download}} and let this additional code download a modified login server, an open mail relay, or similar program, and make this additional component run any time the user logs in. No special malware writing skills are needed for this. Special skill may be needed for tricking the user to run the (trojan) program in the first place.|$|E
40|$|Operating systems {{separate}} system into user land and kernel land • Kernel and driver components run with elevated privileges • Compromising {{of such a}} component: • How to protect these critical components? • Alternative to detection: try to prevent <b>malicious</b> <b>programs</b> from being executed • Focus on latter approac...|$|R
40|$|The {{protection}} {{qualities of}} {{discretionary access control}} systems realised by today's prevalent operating systems are based on {{an assessment of the}} trustworthiness of users. By starting a program a user transfers his trustworthiness to it, ie, there is the tacit assumption that the program's trustworthiness at least matches that of the user. However, <b>malicious</b> <b>programs</b> are a growing source of threat. They perform operations without the user's consent and often in contravention of his interests. To eliminate this danger we examine program-orientated protection strategies. We then present, firstly, a small enhancement to the operating system and, secondly, an addition to the operating system, which support both a user and an application with high security demands in the enforcement of authenticity and integrity even in the presence of <b>malicious</b> <b>programs...</b>|$|R
50|$|PC Magazine noted AntiBot's {{above average}} ability to {{identify}} <b>malicious</b> <b>programs</b> based on behavior and the fact it did not mistakenly mark a legitimate <b>program</b> as <b>malicious</b> during testing. However, on some infected systems AntiBot failed to install or caused blue screens because it failed to completely remove a virus.|$|R
