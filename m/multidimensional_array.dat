145|316|Public
25|$|In mathematics, a {{recurrence}} relation is an equation that recursively defines a sequence or <b>multidimensional</b> <b>array</b> of values, once {{one or more}} initial terms are given: each further term of the sequence or array {{is defined as a}} function of the preceding terms.|$|E
25|$|APL (named {{after the}} book A Programming Language) is a {{programming}} language developed in the 1960s by Kenneth E. Iverson. Its central datatype is the <b>multidimensional</b> <b>array.</b> It uses a large range of special graphic symbols to represent most functions and operators, leading to very concise code. It {{has been an important}} influence on the development of concept modeling, spreadsheets, functional programming, and computer math packages. It has also inspired several other programming languages. It is still used today for certain applications.|$|E
2500|$|The {{ordinary}} DFT transforms a one-dimensional sequence or array [...] that is {{a function}} of exactly one discrete variable n. [...] The multidimensional DFT of a <b>multidimensional</b> <b>array</b> [...] {{that is a}} function of d discrete variables [...] for [...] in [...] is defined by: ...|$|E
30|$|A Hájek-Rényi-type maximal {{inequality}} {{is established}} for <b>multidimensional</b> <b>arrays</b> of random elements. Using this result, we establish some strong laws {{of large numbers}} for <b>multidimensional</b> <b>arrays.</b> We also provide some characterizations of Banach spaces.|$|R
5000|$|Datasets, {{which are}} <b>multidimensional</b> <b>arrays</b> of a {{homogeneous}} type ...|$|R
40|$|Abstract: Handling {{with large}} amount of data is common now. Employing {{extendible}} array to deal with increasing data is really effective. But in the conventional extendible arrays all of the operations such as extension and reduction can only occur to the surroundings of the array. This property limits the application of extendible arrays. So we proposed our flexibly resizable <b>multidimensional</b> <b>arrays</b> which can be inserted or deleted {{even in the midst}} of the array. In this paper we will propose a sharing scheme of resizable <b>multidimensional</b> <b>arrays</b> in a distributed environment which means the sharing of server side array by clients. Keyword: <b>Multidimensional</b> <b>arrays,</b> Extendible arrays, Bitmap. 1...|$|R
5000|$|DIMENSION variable(subscript1, subscript2, ..., subscriptn) (declares a <b>multidimensional</b> <b>array)</b> ...|$|E
5000|$|... #Subtitle level 3: Example of <b>multidimensional</b> <b>array</b> with non-unit stride ...|$|E
5000|$|For a <b>multidimensional</b> <b>array</b> [...] {{that is a}} {{function}} of p discrete variables [...] for [...] in , the P-Dimensional Discrete Forward Cosine Transform is defined by: ...|$|E
40|$|The lack {{of direct}} support for <b>multidimensional</b> <b>arrays</b> in Java TM has been {{recognized}} as a major deficiency in the language’s applicability to numerical computing. The typical approach to adding <b>multidimensional</b> <b>arrays</b> to Java has been through class libraries that implement these structures. It {{has been shown that}} the class library approach can achieve very high-performance for numerical computing, through the use of compiler techniques and efficient implementations of aggregate array operations. Because of the inconvenience of accessing array elements through method invocations, it is advocated by many that class libraries for <b>multidimensional</b> <b>arrays</b> should be combined with new language syntax to facilitate manipulation of those <b>multidimensional</b> <b>arrays.</b> Another approach that has been discussed in the literature is that of relying exclusively on the JVM to recognize those arrays of arrays that are being used to simulate <b>multidimensional</b> <b>arrays.</b> This approach can also deliver good performance, but it does not improve the existing interfaces for numerical computing. There is yet a third approach: extending the Java language with new syntactic constructs for <b>multidimensional</b> <b>arrays</b> and directly compiling those constructs to bytecode. The new constructs provide a more convenientinterface for numerical computing, without requiring a matching class library. This paper is a comparative discussion of the three approaches to adding <b>multidimensional</b> <b>arrays</b> to Java mentioned above. We present a description of the three approaches, listing {{the pros and cons of}} each. We give a more detailed description of the third approach – language constructs translated to bytecode – as it is a new contribution. We compare each of the approaches with regards to functionality, impact on the language and virtual machine specification, implementation efforts, and typical achievable performance. We show that the best choice depends on the relative importance attached to the above metrics. 1...|$|R
5000|$|Generalized {{container}} {{classes for}} representing gridded and tabular data as <b>multidimensional</b> <b>arrays</b> or tables ...|$|R
5000|$|... <b>multidimensional</b> <b>arrays</b> {{of numbers}} used as basic data type, see {{variables}} , [...] and [...]|$|R
5000|$|The {{definition}} of a tensor as a <b>multidimensional</b> <b>array</b> satisfying a transformation law traces back {{to the work of}} Ricci. [...] This definition is still used in some physics and engineering text books.|$|E
5000|$|Definition. A tensor of type (p, q) is an {{assignment}} of a multidimensional array:to each basis [...] of an {{n-dimensional vector space}} such that, if we apply the change of basis:then the <b>multidimensional</b> <b>array</b> obeys the transformation law: ...|$|E
50|$|Multiway data {{analysis}} {{is a method}} of analyzing large data sets by representing the data as a <b>multidimensional</b> <b>array.</b> The proper choice of array dimensions and analysis techniques can reveal patterns in the underlying data undetected by other methods.|$|E
5000|$|No {{foolproof}} way {{to combine}} records into the <b>multidimensional</b> <b>arrays</b> {{from which they}} were derived.|$|R
40|$|The lack {{of direct}} support for <b>multidimensional</b> <b>arrays</b> in Java TM has been {{recognized}} as a major deficiency in the language's applicability to numerical computing. It has been shown that, when augmented with <b>multidimensional</b> <b>arrays,</b> Java can achieve very high-performance for numerical computing {{through the use of}} compiler techniques and efficient implementations of aggregate array operations. Three approaches have been discussed in the literature for extending Java with support for multidimensional arrays: class libraries that implement these structures; relying on the JVM to recognize those arrays of arrays that are being used to simulate multidimensional arrays; and extending the Java language with new syntactic constructs for <b>multidimensional</b> <b>arrays</b> and directly compiling those constructs to bytecode...|$|R
50|$|In addition, C {{supports}} {{arrays of}} multiple dimensions, which {{are stored in}} row-major order. Technically, C <b>multidimensional</b> <b>arrays</b> are just one-dimensional arrays whose elements are arrays. The syntax for declaring <b>multidimensional</b> <b>arrays</b> is as follows: int array2dROWSCOLUMNS;where ROWS and COLUMNS are constants. This defines a two-dimensional array. Reading the subscripts from left to right, array2d is an array of length ROWS, each element of which is an array of COLUMNS integers.|$|R
50|$|In mathematics, a {{recurrence}} relation is an equation that recursively defines a sequence or <b>multidimensional</b> <b>array</b> of values, once {{one or more}} initial terms are given: each further term of the sequence or array {{is defined as a}} function of the preceding terms.|$|E
5000|$|Skewing - this {{technique}} is applied to a nested loop iterating over a <b>multidimensional</b> <b>array,</b> where each iteration of the inner loop depends on previous iterations, and rearranges its array accesses so that the only dependencies are between iterations of the outer loop.|$|E
5000|$|... #Caption: Model of <b>multidimensional</b> <b>array</b> of nano-{{particle}}s. A particle {{could have}} two spins, spin up or down. Based on the spin directions, nano-particles {{will be able}} to store 0 and 1. Therefore, nanostructural material has a great potential for future use in electronic devices.|$|E
50|$|In computing, row-major {{order and}} column-major order are methods for storing <b>multidimensional</b> <b>arrays</b> in linear storage such as random access memory.|$|R
50|$|The syntax used {{to declare}} and access arrays is identical, except that C# has added syntax for declaring and {{manipulating}} <b>multidimensional</b> <b>arrays.</b>|$|R
40|$|Shao’s theorem on {{the maximum}} of {{standardized}} random walk increments for <b>multidimensional</b> <b>arrays.</b> (English summary) ESAIM Probab. Stat. 13 (2009), 409 – 416. The almost sure limiting behaviour for the maximum of sums of <b>multidimensional</b> <b>arrays</b> of independent identically distributed random variables is established. These random variables have mean zero and variance one. The multidimensional index utilized {{here is the}} classical one involving the product norm. The main result extends the non-multidimensional situation proved by Q. M...|$|R
5000|$|The {{ordinary}} DFT transforms a one-dimensional sequence or array [...] that is {{a function}} of exactly one discrete variable n. The multidimensional DFT of a <b>multidimensional</b> <b>array</b> [...] {{that is a}} function of d discrete variables [...] for [...] in [...] is defined by: ...|$|E
50|$|To access {{an integer}} element in this <b>multidimensional</b> <b>array,</b> one would use array2d43Again, reading {{from left to}} right, this accesses the 5th row, and the 4th element in that row. The {{expression}} array2d4 is an array, which we are then subscripting with 3 to access the fourth integer.|$|E
50|$|Multidimensional arrays can in {{some cases}} {{increase}} performance because of increased locality (as there is one pointer dereference instead of one for every dimension of the array, {{as it is the}} case for jagged arrays). However, since all array element access in a <b>multidimensional</b> <b>array</b> requires multiplication/shift between the two or more dimensions, this is an advantage only in very random access scenarios.|$|E
5000|$|... no arrays inside {{structures}} (but {{references to}} arrays would be allowed) {{and a similar}} restriction on <b>arrays</b> of <b>arrays</b> (<b>multidimensional</b> <b>arrays</b> are nonetheless permitted) ...|$|R
30|$|Theorem 2.1 {{provides}} a Hájek-Rényi-type maximal inequality for <b>multidimensional</b> <b>arrays</b> of random elements. This theorem {{is inspired by}} the work of Shorack and Smythe [11].|$|R
50|$|Those {{probability}} {{variables are}} implemented as multi-dimensional arrays; before introducing them, a few {{values that are}} used as indices in these <b>multidimensional</b> <b>arrays</b> are defined.|$|R
50|$|Another {{difference}} is that the entire <b>multidimensional</b> <b>array</b> can be allocated with a single application of operator new, while jagged arrays require loops and allocations for every dimension. Note, though, that Java provides a syntactic construct for allocating a jagged array with regular lengths; the loops and multiple allocations are then performed by the virtual machine and need not be explicit at the source level.|$|E
50|$|Naming indexes in slicing and {{subscripting}} {{is similar}} to naming parameters in function calls instead of relying on a fixed sequence of parameters. One advantage of naming indexes in slicing is that the programmer {{does not have to}} remember the sequence of Indexes, in a <b>multidimensional</b> <b>array.</b> A deeper advantage is that expressions generalize automatically and safely without requiring a rewrite when the number of dimensions of X changes.|$|E
50|$|Functions of {{a single}} {{variable}} (such as sine and cosine) may be implemented by a simple array. Functions involving two or more variables require <b>multidimensional</b> <b>array</b> indexing techniques. The latter case may thus employ a two-dimensional array of powerxy to replace a function to calculate xy for a limited range of x and y values. Functions that {{have more than one}} result may be implemented with lookup tables that are arrays of structures.|$|E
5000|$|TensorFlow {{computations}} {{are expressed}} as stateful dataflow graphs. The name TensorFlow {{derives from the}} operations which such neural networks perform on <b>multidimensional</b> data <b>arrays.</b> These <b>multidimensional</b> <b>arrays</b> {{are referred to as}} [...] "tensors". In June 2016, Google's Jeff Dean stated that 1,500 repositories on GitHub mentioned TensorFlow, of which only 5 were from Google.|$|R
40|$|We {{explore the}} {{orthogonal}} decomposition of tensors (also known as <b>multidimensional</b> <b>arrays</b> or n-way arrays) using two dierent denitions of orthogonality. We present numerous examples {{to illustrate the}} diculties in understanding such decompositions. We conclude with a counterexample to a tensor extension of the Eckart-Young SVD approximation theorem by Leibovici and Sabatier [Linear Algebra Appl. 269 (1998) : 307 - 329]. Keywords: tensor decomposition, singular value decomposition, principal components analysis, <b>multidimensional</b> <b>arrays.</b> Email: tgkolda@ca. sandia. gov. This work {{was supported by the}} Applied Mathematical Sciences Research Program, Oce of Energy Research, U. S. Department of Energy, under contracts DE{AC 05 - 96 OR 22464 with Lockheed Martin Energy Research Corporation and DE-AC 04 - 94 AL 85000 with Sandia Corporation. 3 This page intentionally left blank. 4 1 Introduction The problem of decomposing tensors (also called n-way <b>arrays</b> or <b>multidimensional</b> <b>arrays)</b> is approached in a v [...] ...|$|R
5000|$|This {{is exactly}} the multidimensional [...] DFT, {{normalized}} to be unitary, if the inputs and outputs are regarded as <b>multidimensional</b> <b>arrays</b> indexed by the nj and kj, respectively.|$|R
