10000|219|Public
5|$|March: Oracle Corporation {{announces that}} it will stop {{developing}} application software, <b>middleware,</b> and Oracle Linux for the Itanium.|$|E
5|$|In {{computer}} science research, Plan 9 {{has been used}} as a grid computing platform and as a vehicle for research into ubiquitous computing without <b>middleware.</b>|$|E
5|$|Rise of Mana was {{intended}} to reach a wide audience, gaining an attention only previously seen by Dawn of Mana in 2006. The concept of the main character switching between angelic and demonic form was suggested by Yagi. The original concept was to keep both characters in separate bodies, with the unoccupied character being controlled by the game's artificial intelligence. The team used the Photon Server <b>middleware</b> to develop the game's multiplayer component. The development team initially thought of creating custom <b>middleware,</b> but the rebuild needed {{would have taken a}} whole year, threatening the project's existence. In search of suitable <b>middleware,</b> the team contacted Fixer, who offered them the use of multiple options including Photon Server. Trying out Photon Server, all the problems faced by the developers were resolved within a two-month period, and the middleware's inbuilt security structure and specification match with the game persuaded the project's engineers to greenlight its use. Rise of Mana was the first Japanese game to use Photon Server. The team needed to create two different specifications for iOS and Android, as Android had higher graphical power. During the early development stage, the team {{thought it would be fun}} to re-create the multiplayer elements in Secret of Mana. The initial idea was to have multiplayer available in standard quests, but this took up too much operational space to be practical, so they reduced this to raid battles. Due to the use of Photon Server, additional player characters could be fully rendered rather than appearing as ghost-like transparent helpers.|$|E
50|$|The {{frontier}} <b>middlewares</b> sit {{between the}} manager and the backend. The purpose of <b>middlewares</b> is {{to manage the}} communication between frontier and the backend. <b>Middlewares</b> are an ideal way to add or extend additional functionality simply by plugging additional code.|$|R
40|$|Abstract—In this paper, {{we present}} MIRA, a new middle-ware for robotic applications. It is {{designed}} for use in real-world applications and for research and teaching. In comparison to many other existing <b>middlewares,</b> MIRA employs novel techniques for communication that are described in this paper. Moreover, we present benchmarks that analyze {{the performance of the}} most commonly used <b>middlewares</b> ROS, Yarp, LCM, Player, Urbi, and MOOS. Using these benchmarks, we can show that MIRA outperforms the other <b>middlewares</b> in terms of latency and computation time. I...|$|R
40|$|Abstract — Recently, {{there have}} been an {{increasing}} interest in RFID system and RFID systems have been applied to various applications. Load balancing is a fundamental technique for providing scalability of systems by moving workload from overloaded nodes to under-loaded nodes. This paper presents an approach to adaptive load balancing for RFID <b>middlewares.</b> Workloads of RFID <b>middlewares</b> can have a considerable variation according {{to the location of}} the connected RFID readers and can abruptly change at a particular instance. The proposed approach considers those characteristics of RFID <b>middlewares</b> to provide an efficient load balancing...|$|R
5|$|Age of Empires III {{builds on}} and {{introduces}} new features to the Age of Mythology engine, called Bang! Engine. One new {{feature is the}} inclusion of the Havok physics simulation <b>middleware</b> engine on the Windows version and the similar PhysX engine on Mac OS X. This means that many events such as building destruction and tree falls will not be pre-created animations, but will be calculated according to the physics engine, in an innovation for the series. Other graphical features of the game include bloom lighting and support for pixel shader 3.0.|$|E
5|$|The game began {{development}} in 2012: the project began when Masaru Oyamada told series producer Koichi Ishii {{that he could}} create a legitimate entry in the Mana series for mobile platforms. His idea was for a game true to the series that would reach a wide audience. The game's multiplayer, inspired by that used in Secret of Mana, was developed using the Photon Server <b>middleware.</b> The art director was series newcomer Hiroyuki Suzuki, while the character and monster designs were done by Taiki and Ryota Murayama. The music was composed by {{a team led by}} Tsuyoshi Sekito. The theme song was written and performed by singer-songwriter Kokia.|$|E
25|$|Oracle Fusion <b>Middleware</b> is {{a family}} of <b>middleware</b> {{software}} products, including (for instance) application server, system integration, business process management (BPM), user interaction, content management, identity management and business intelligence (BI) products.|$|E
40|$|Abstract. In {{order to}} {{guarantee}} interoperability among home network appliances and devices using heterogeneous network technologies and different applications, alliances of worldwide major companies developed and commercialized home network <b>middlewares.</b> Some {{of them were}} already published as international standards, and some {{are still in the}} standardization process. However, it finally causes another interoperable problem among these home network <b>middlewares.</b> In this paper, the architecture of a chip {{that can be used in}} a home gateway or each home network device to provide interoperability between two heterogeneous home network <b>middlewares,</b> is designed and proposed...|$|R
40|$|This {{document}} {{describes the}} various architectures {{of the three}} <b>middlewares</b> that comprise the EMI software stack. It also outlines the common efforts in the security area that allow interoperability between these <b>middlewares.</b> The assessment of the EMI Security presented in this document was performed internally {{by members of the}} Security Area of the EMI project...|$|R
30|$|The {{proposed}} solutions provide RESTful <b>middlewares</b> which {{separate the}} applications from communication domain. The <b>middlewares</b> are accessible via open interfaces and enable {{the development of}} services and applications independently of the underlying network. In addition, they provide several service capabilities to enable machine registration, synchronous and asynchronous communication, resource discovery, access rights management, group broadcast, etc.|$|R
25|$|In fact, the <b>middleware</b> {{can be seen}} as a layer {{between the}} {{hardware}} and the software. On top of the <b>middleware,</b> a number of technical areas have to be considered, and these may or may not be <b>middleware</b> independent. Example areas include SLA management, Trust, and Security, Virtual organization management, License Management, Portals and Data Management. These technical areas may be taken care of in a commercial solution, though the cutting edge of each area is often found within specific research projects examining the field.|$|E
25|$|Known <b>middleware</b> {{integrations}} of Vivox's communications platform.|$|E
25|$|The game uses <b>middleware</b> {{provided}} by the Japanese company CRI <b>Middleware</b> as a game engine. Yoshie Arakawa and Yoshinori Kanemoto provided Assault with a musical score and sound effects with the music performed by the Tokyo New City Orchestra. Most of the score pieces use themes from Star Fox 64, composed by Koji Kondo and Hajime Wakai.|$|E
30|$|Within {{the context}} of our project, we have {{investigated}} a more generalized approach {{in order to be}} able to address a broad range of resources, not only Grid <b>middlewares.</b> Therefore, we do not compete with well-established Grid computing <b>middlewares.</b> Instead, we offer an additional way for accessing distributed resources by providing an additional access mechanism and do not intend to replace existing solutions.|$|R
5000|$|Modularity, other <b>middlewares</b> like 3d engine, physic, script {{language}} or network library can be plugged.|$|R
40|$|Abstract. <b>Middlewares</b> are {{commonly}} used to solve heterogeneity problems. They are able to provide high abstraction levels {{so that it can}} hide the complexity of the systems. Some <b>middlewares,</b> like CORBA, RMI, DCOM, etc, were proposed over past years. However, none of them achieved the really dissociation from their underlying systems, which causes problems to deal with interoperability. Since 2001, Web services have been appearing as an indeed solution for interoperability, transparency and platform/language independency. The established high performance computing systems present high levels of heterogeneity, distribution and a great amount of tools to be used. Thus, these kind of systems behavior as a good scenario to profit Web service technology. The goal of this work is to present the Web service technology and how it is used on high performance computing (HPC), considering: clusters, grids and multiple clusters. Resumo. Para solucionar os problemas de hetereogeneidade é necessário o emprego de <b>middlewares</b> que abstraiam toda a complexidade dos sistemas. Alternativas, como <b>middlewares</b> baseados em CORBA, RMI, DCOM, entre outros...|$|R
25|$|Production {{and tools}} layer: generates content {{production}} tools, game development <b>middleware,</b> customizable game engines, and production management tools.|$|E
25|$|Zhou, Honbo. The Internet of Things in the Cloud: A <b>Middleware</b> Perspective. Boca Raton: CRC Press, Taylor & Francis Group, 2013.|$|E
25|$|Grid-enabled {{applications}} are specific software applications that can utilize grid infrastructure. This {{is made possible}} by the use of grid <b>middleware,</b> as pointed out above.|$|E
40|$|The {{automated}} setup of Internet of Things environments is a {{major challenge}} due to the heterogeneous nature of the involved physical components (i. e., devices, sensors, actuators). In general, IoT environments consist of (i) physical hardware components, (ii) IoT <b>middlewares</b> that bind the hardware to the digital world, and (iii) IoT applications that interact with the physical devices through the <b>middlewares</b> (e. g., for monitoring). Setting up each of these requires sophisticated means for software deployment. In this paper, we enable such a means by introducing an approach for automated deployment of entire IoT environments using the Topology and Orchestration Specification for Cloud Applications standard. Based on topology models, all components involved in the IoT environment (devices, IoT <b>middlewares,</b> applications) {{can be set up}} automatically. Moreover, to enable interchangeability of IoT <b>middlewares,</b> we show how they {{can be used as a}} service to deploy them individually and on-dema nd for separate use cases. This enables provisioning whole IoT environments out-of-the-box. To evaluate the approach, we present three case studies giving insights in the technical details...|$|R
40|$|Abstract The Grid {{paradigm}} for accessing heterogeneous distributed resources {{proved to be}} extremely effective, as many organizations are relying on Grid <b>middlewares</b> for their computational needs. Many different <b>middlewares</b> exist, the result being a proliferation of self-contained, non interoperable “grid islands”. This means that different Grids, based on different <b>middlewares,</b> cannot share resources, e. g. jobs submitted on one Grid cannot be forwarded for execution on another one. To address this problem, standard interfaces are being proposed {{for some of the}} important functionalities provided by most Grids, namely job submission and management, authorization and authentication, resource modeling, and others. In this paper we review some recent standards which address interoperability for three types of services: the BES/JSDL specifications for job submission and management, the SAML notation for authorization and authentication, an...|$|R
50|$|Standards-based, AIA has {{pre-built}} common object {{definitions and}} services. Oracle AIA {{is built on}} Oracle Fusion <b>Middleware's</b> SOA and Business Process-Management (BPM) products.|$|R
25|$|Direct State Access (DSA) – object accessors enable {{state to}} be queried and {{modified}} without binding objects to contexts, for increased application and <b>middleware</b> efficiency and flexibility.|$|E
25|$|Smart TV {{platforms}} or <b>middleware</b> have {{a public}} Software development kit (SDK) and/or Native development kit (NDK) for apps so that third-party developers can develop applications for it, and an app store so that the end-users can install and uninstall apps themselves. The public SDK enables third-party companies and other interactive application developers to “write” applications once and see them run successfully on any device that supports the smart TV platform or <b>middleware</b> architecture which it was written for, no matter who the hardware manufacturer is.|$|E
25|$|The overall grid market {{comprises}} several specific markets. These are {{the grid}} <b>middleware</b> market, {{the market for}} grid-enabled applications, the utility computing market, and the software-as-a-service (SaaS) market.|$|E
5000|$|... arc* job {{and data}} CLI - next {{generation}} command-line interface for job and data management, interoperable with other <b>middlewares</b> like gLite and UNICORE ...|$|R
30|$|In {{contrast}} to previous works, we analyzed the BRAMS model climatology, a long execution parallel application, using dedicated computational grids with different grid <b>middlewares.</b>|$|R
30|$|Another way of {{addressing}} DBMS “componentization” {{was to provide}} database <b>middlewares.</b> Such <b>middlewares</b> leave data items {{under the control of}} their original (external) management systems while integrating them into a common DBMS-style framework. External systems exhibit, in many cases, different capabilities, such as query languages with varying power or no querying facilities at all. The different data stores might also have different data models (i.e., different data definition and structuring means), or no explicit data model at all. The goal of graceful integration is achieved through componentization.|$|R
25|$|In 1997, Borland sold Paradox to Corel, but {{retained}} all {{development rights}} for the core BDE. In November 1997, Borland acquired Visigenic, a <b>middleware</b> company that was focused on implementations of CORBA.|$|E
25|$|On 16 December 2003, NDS {{acquired}} the MediaHighway <b>middleware</b> business from Canal+ Technologies {{a subsidiary of}} Thomson SA and licensed certain related patents from Thomson SA for a total consideration of €60 million.|$|E
25|$|Oracle Enterprise Manager (OEM) {{provides}} web-based {{monitoring and}} management tools for Oracle products (and for some third-party software), including database management, <b>middleware</b> management, application management, hardware and virtualization management and cloud management.|$|E
40|$|Abstract. Context {{delivery}} is an inevitable issue for ubiquitous computing. Context-aware <b>middlewares</b> perform all {{the functions of}} context sensing, inferring and delivery to context-aware applications. But {{one of the major}} issues for these <b>middlewares</b> is to devise a context delivery scheme that is scalable as well as efficient. Pure unicast or pure broadcast based dissemination can not provide scalability as well as less average latency. In this paper we present a scalable context delivery mechanism for context-aware <b>middlewares</b> based on hybrid data dissemination technique where the most requested data are broadcasted and the rest are delivered through unicast. Our scheme is adaptive {{in the sense that it}} dynamically differentiates hot (most requested) and cold (less requested) data according to request rate and waiting time. Inclusion of lease mechanism and bandwidth division further allows us to reduce network traffic and average latency. We validated our claim through extensive simulation. ...|$|R
30|$|The 3 -year {{climatology}} execution {{generated the}} expected results in 20.5, 22.3 and 33.3  days, using the computational grid configured with OurGrid, Globus and OAR/CiGri grid <b>middlewares,</b> respectively.|$|R
40|$|The {{advent of}} cloud {{computing}} has offered scientific communities {{the ability to}} access computational resources that can satisfy their growing research needs starting to outgrow the size of traditional local resources as PCs and locally managed clusters and also of grid sites. Since grids and clouds are heterogeneous in nature and are based on different <b>middlewares,</b> interoperability between the service interfaces exposing the capabilities of these infrastructures is recognized as an important issue. This problem is usually handled by using the appropriate adaptors to interact with several <b>middlewares</b> thus allowing the applications to be executed on federated infrastructures. While aiming for federated resources access, there is an overhead for the application clients to continuously detect and adapt to every evolution of the target <b>middlewares.</b> In the presented work a complementary approach is followed to circumvent this problem by enabling interoperability between different execution services through the adoption of open and widely adopted standards...|$|R
