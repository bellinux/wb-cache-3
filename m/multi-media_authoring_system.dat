1|1872|Public
5000|$|The name [...] "iptScrae" [...] was {{borrowed}} by Bumgardner from {{a former}} colleague and mentor, Kevin Bjorke, {{who came up with}} the name [...] "iptscray" [...] for a freeware Forth interpreter a few years previously. Bumgardner originally created Iptscrae for Idaho, an in-house <b>multi-media</b> <b>authoring</b> <b>system,</b> similar to HyperCard, which he created while an employee at Warner New Media. He then reused and modified the IptScrae compiler for the Palace project, which was developed in 1994.|$|E
50|$|Lauren Marie Galley (born January 10, 1995), is {{an award-winning}} <b>multi-media</b> spokesperson, <b>Author</b> and Entrepreneur.|$|R
40|$|This paper {{describes}} the AudioGraph project, a collaborative project between Surrey and Massey {{universities in the}} development of <b>multi-media</b> <b>authoring</b> tools. The tools are for use by academics, rather than multimedia professionals, for the publication and delivery of courseware via the World Wide Web. The goal was tp place the production of the media firmly {{in the hands of the}} educators rather than the technologists. It {{describes the}} current tools and our future plans for them...|$|R
40|$|Interface {{builders}} and <b>multi-media</b> <b>authoring</b> tools only support {{the construction of}} static displays where {{the components of the}} display are known at design time (e. g., buttons, menus). High-level UIMSs and automated designers support more sophisticated displays but are not easy to use as they require dealing explicitly with elaborate abstract concepts. This paper describes a GUI development environment, HandsOn, where complex displays of dynamically changing data can be constructed by direct manipulation. HandsOn integrates principles of graphic design, supports constraint-based layout, and has facilities for easily specifying the layout of collections of data. The system incorporates Programming By Example techniques to relieve the designer from having to deal with abstractions, and relies on a model-based language for the representation of the displays being constructed and as a means to provide information for the tool to reason about...|$|R
40|$|Abstract: This paper {{includes}} {{a summary of}} <b>authoring</b> <b>systems,</b> which became the base of informatic modernization of the learning process in all fields. Besides conceptual determination and classification of the <b>authoring</b> <b>systems,</b> the article also discusses the technology for {{the realization of the}} WEB <b>authoring</b> <b>system</b> on the example of the Polytechnical Engineering College. Further, a review is given of leading web <b>authoring</b> <b>systems,</b> and conclusions are made about the current situation and further development trends. One of the e-learning materials for the Algorithms and Data Structures developed at the Polytechnical Engineering College is described in detail. Possibilities of the elearning application in already existing web <b>authoring</b> <b>systems</b> are presented, its advantages and disadvantages are pointed out, and further directions of improvement and application in our conditions. ...|$|R
40|$|We {{present a}} {{detailed}} case study, drawn from many information sources, {{of a computer}} scientist learning and using Cognitive Walkthrough to assess a <b>multi-media</b> <b>authoring</b> tool. We then compare the predictions produced by the analysis to the usability problems actually found though empirical usability tests. This study results in several clear messages to both system designers and to developers of evaluation techniques: (1) the Cognitive Walkthrough technique is currently learnable and usable, but (2) it may not predict most usability errors found empirically, and (3) several elaborations of the technique might improve its effectiveness. In addition, the emergent picture of the process this evaluator went through to produce his analysis sets realistic expectations for other novice analysts who contemplate learning and using Cognitive Walkthroughs. 1. Introduction Information systems in our networked and multimedia age must be usable by the people {{they are intended to}} serve. From the pr [...] ...|$|R
5000|$|An <b>authoring</b> <b>system</b> is {{a program}} that has pre-programmed {{elements}} {{for the development of}} interactive multimedia software titles. <b>Authoring</b> <b>systems</b> can be defined as software that allows its user to create multimedia applications for manipulating multimedia objects.|$|R
40|$|Abstract. Intelligence in an ITS <b>authoring</b> <b>system</b> {{could rely on}} {{content-based}} engineering {{of instructional}} design (ID) knowledge, i. e. based on principles such as conceptualization, standardization and theory-awareness. An ontology-based architecture with appropriate ontologies has been proposed for a theory-aware ITS <b>authoring</b> <b>system.</b> Ontological engineering (OE) as a collaborative process jointly conducted by an OE expert and an ID expert {{is presented as a}} step on a roadmap towards a theory-aware ITS <b>authoring</b> <b>system.</b> ...|$|R
40|$|This {{paper is}} an {{introduction}} to courseware <b>authoring</b> <b>systems,</b> which are defined as software devised for an instructional environment that simplifies courseware development. The process of courseware authoring is described as consisting of two basic elements: computer and lesson. These two elements are further subdivided {{and the use of}} <b>authoring</b> <b>systems</b> to simplify each of these subcomponents is described. Suggestions are made for educators who are considering <b>authoring</b> <b>systems</b> to be used to develop courseware...|$|R
40|$|Intelligence in an ITS <b>authoring</b> <b>system</b> {{could rely on}} {{content-based}} engineering {{of instructional}} design (ID) knowledge, i. e. based on principles such as conceptualization, standardization and theory -awareness. An ontology - based architecture with appropriate ontologies has been proposed for a theoryaware ITS <b>authoring</b> <b>system.</b> Ontological engineering (OE) as a collaborative process jointly conducted by an OE expert and an ID expert {{is presented as a}} step on a roadmap towards a theory-aware ITS <b>authoring</b> <b>system...</b>|$|R
40|$|Current {{interface}} {{development tools}} {{cannot be used}} to speci @ complex displays without resorting to progmtnming using a toolkit or gmphics package. Interface build-ers and <b>multi-media</b> <b>authoring</b> tools only support the construction of static displays where {{the components of the}} display are known at design time (e. g., buttons, menus). This paper describes a presentation modeling system where complex displays of dynamically changing data can be modeled declaratively. The system inco~omtes principles of graphic design such as guides and grids, supports constraint-based layout and automatic update when data changes, has facilities for easily specfiing the layout of collections of data, and has facilities for making displays sensitive to the characteristics of the data being presented and the presentation context (e. g., amount of space avail-able). Finally, the models are designed to be amenable to interactive specitlcation and spectilcation using demon-strational techniques. Keywords Model-based user interfaces, user interface design techniques, user interface development tools, graphic design...|$|R
40|$|This paper {{outlines}} {{a future}} `ideal' multimedia document <b>authoring</b> <b>system</b> that allows <b>authors</b> to specify content and {{form of the}} document independently {{of each other and}} at a high level of abstraction; (2) It describes a working system that implements a small but signicant part of the functionality of such an ideal system, based on semantic modeling of the pictures as well as the text of the document; and (3) It explains {{what needs to be done}} to bridge the gap between the implemented system and the ideal one. 1 A Future `Ideal' Multimedia Document <b>Authoring</b> <b>System</b> A Document <b>Authoring</b> <b>System</b> is a tool that helps an author to write documents. If the <b>system</b> supports the <b>authoring</b> of documents that combine `presentations' in dierent media (text and images, for example), we will speak of a multimedia document <b>authoring</b> <b>system.</b> Ideally, a multimedia document <b>authoring</b> <b>system</b> would allow <b>authors</b> to specify the content and form of a high-quality document in ways that are both simpl [...] ...|$|R
5000|$|... {{designing}} Learning Management <b>Systems</b> {{and comprehensive}} <b>authoring</b> <b>systems</b> ...|$|R
40|$|Part II of the Special Issue on <b>Authoring</b> <b>Systems</b> for Intelligent Tutoring Systems (editors: Tom Murray and Stephen Blessing) This paper {{consists}} of an in-depth summary {{and analysis of the}} research and development state of the art for intelligent tutoring <b>system</b> (ITS) <b>authoring</b> <b>systems.</b> A seven-part categorization of two dozen <b>authoring</b> <b>systems</b> is given, followed by a characterization of the authoring tools and the types of ITSs that are built for each category. An overview of the knowledge acquisition and authoring techniques used in these systems is given. A characterization of the design tradeoffs involved in building an ITS <b>authoring</b> <b>system</b> is given. Next the pragmatic questions of real use, productivity findings, and evaluation are discussed. Finally, I summarize the major unknowns and bottlenecks to having widespread use of ITS authoring tools. ([URL]...|$|R
40|$|As we have {{developed}} a number of <b>authoring</b> <b>systems</b> for simulation-centered tutorial development, each successive <b>authoring</b> <b>system</b> has achieved its original goals, and yet has been quickly shown to have limitations that motivated the next <b>authoring</b> <b>system.</b> The history of these systems reveals two emerging requirement themes. The first theme {{is that there is}} a need for more than one level of tutor development. For example, a two-level <b>authoring</b> <b>system</b> might provide an easy-to-use system tbr novice tutor developers and a deeper level of authoring for expert tutor developers. A second theme is that the tutor delivery system should be componential and open so that it can work with collaborating applications, some of which may not have even existed when the <b>authoring</b> <b>system</b> was originally designed. The second part of this paper describes one essential element of a componential pproach to simulation-centered tutor development, he specification of simulation services that may be required by tutors. I. Authoring Simulation-Centered Tutors: Lessons Learned We have been involved in the development of a series of authoring tools for the development of tutors for man...|$|R
50|$|Several {{varieties}} of behavior <b>authoring</b> <b>systems</b> have been created.|$|R
40|$|This paper {{proposes a}} finger actions sensing-based robot motion <b>authoring</b> <b>system.</b> Based on finger actions sensing and their recognition, the {{proposed}} robot motion <b>authoring</b> <b>system</b> allows users easily {{to create and}} control robot motion according to the number and events of fingers. Furthermore, the system {{can be used to}} simulate user-created robot contents in the 3 D virtual environment. This allows the users to not only view the authoring process in real time but also transmit the final authored contents. The effectiveness of the proposed motion <b>authoring</b> <b>system</b> was verified based on various motion authoring simulations of an industrial robot...|$|R
40|$|To {{insure the}} {{availability}} of good authoring software at reasonable cost, it was propitious to develop an extensible authoring facility that provides functionality and extensibility throughout its various operating components. The extensible <b>authoring</b> <b>system</b> will be offered at a minimal cost to interested instructional developers, teachers, and students. It incorporates many of the features currently found in <b>authoring</b> <b>systems</b> that include an authoring language, inference engine, windowing, hypertext navigation, and an intelligent initiator. Moreover, the system remains open to user modification {{and is able to}} integrate replaceable functions at various levels, including the computer-aided instructional lesson modules produced by the <b>authoring</b> <b>system...</b>|$|R
40|$|This article {{describes}} {{the genesis of the}} Libra <b>authoring</b> <b>system</b> and pro-vides a detailed view of the design of a courseware program created by means of it. Funds from multiyear grants supported the development and subsequent dissemination of the <b>authoring</b> <b>system.</b> Lessons learned dur-ing the dissemination of the <b>authoring</b> <b>system</b> underscore the need for more in-depth understanding of instructional design and the implementa-tion of pedagogical principles by faculty authors in multimedia materials. Development of the courseware program described here reveals the sub-stantial benefits to be gained by collection and analysis of various forms of student use data...|$|R
5000|$|SiteMgr: {{web based}} <b>authoring</b> <b>system</b> with fine {{granulated}} access control lists ...|$|R
40|$|This is {{a conference}} paper. Increasingly {{industrial}} designers {{are required to}} engage in the design of computer-embedded products. Due to the interactive nature of these products, efficient prototyping is becoming more critical in the design process. This paper presents a designer-oriented prototype development method that facilitates the construction of fully functional physical prototypes. Unlike the <b>multi-media</b> <b>authoring</b> tools commonly used to date, this method employs a cheap and widely available software application: Microsoft PowerPoint with embedded Visual Basic. The method has been designed for use by programming non-literate designers and allows interactive physical prototypes to be created and tested without extensive specialist knowledge. This was achieved in part by simple modifications to a standard computer keyboard. Our case study on the use of this method in the teaching of information ergonomics demonstrated that students could effectively produce software-hardware hybrid prototypes with minimum effort in a short time scale. This method offers an excellent means of collaboration between designers and professionals from different domains. The prototyping method enables rapid and iterative design cycles in design education, research and practice...|$|R
40|$|In this paper, design {{issues for}} the <b>authoring</b> <b>system</b> of SMIL-based {{multimedia}} presentations are discussed and the solutions to these issues are presented. The proposed <b>authoring</b> <b>system</b> accepts the SMIL file as the input and provides useful editing functions, such as clear, cut, copy, and paste. The editing result of the presentation is finally saved in the SMIL format. For the input of a SMIL file, the <b>authoring</b> <b>system</b> first parses the document to compute the playback duration for each object. All editing functions are then performed on the playback duration of objects. A converting algorithm is proposed to convert the final result of editing to a SMIL file...|$|R
50|$|The Intermedia {{advanced}} hypertext <b>authoring</b> <b>system</b> was {{the most}} significant project developed at IRIS.|$|R
40|$|Abstract — We {{propose a}} {{collaborative}} <b>authoring</b> <b>system</b> for multimedia presentation. Our multimedia <b>authoring</b> <b>system</b> benefits greatly from a 3 D spatio-temporal interface which intuitively represents the multimedia presentation in one seamless environment. Our system {{is composed of}} an Editing System, a Media Object Manager and a Collaboration Manager. The Editing System contains two unique editors; a 3 D Spatio...|$|R
40|$|The {{development}} of computer-based training {{is a highly}} labor-intensive activity. Many CBT <b>authoring</b> <b>systems</b> have been created to increase CBT developer productivity, but many become unwieldy when applied to large courseware projects. The authors have worked to increase development productivity by providing instructional designers {{with a way to}} build a database of lesson content that is presented by a lesson “engine ” cognizant of the course’s overall lesson logic. The engine takes advantage of repetitive interaction strategies to present students with a highly consistent user interface that is easy to update when course requirements change. <b>Authoring</b> <b>Systems</b> and Productivity In 1986 Heines and Israelite wrote, “the major purpose of computer-based training (CBT) <b>authoring</b> <b>systems</b> is to increase CBT developer productivity, ” and that purpose remains unchanged in 1994. Over 50 major <b>authoring</b> <b>systems</b> have been on the market {{at one time or another}} since that writing (CBT Directions, 1992), each with its own approach to simplifying the process of converting lesson storyboards into interactive learning programs. As one reviews this myriad of systems, it is easy to paraphrase Will Rogers and say, “I never saw an <b>authoring</b> <b>system</b> that didn’t have some unique feature I really liked. ” While today’s <b>authoring</b> <b>systems</b> certainly simplify the job of producing individual courseware components (especially those involving multimedia), many of them become unwieldy when used to produce courses requiring thousands of such components. Perhaps the clearest examples of this may be seen with visual programming systems like Authorware and IconAuthor. These systems are truly excellent tools for producing a wide range of instructional programs, bu...|$|R
40|$|In this article, {{we report}} on an {{investigation}} into how educators describe the design of three software systems. We have been especially interested in how they describe events that are concurrent, as we believe support for concurrency will be required of an educational software <b>authoring</b> <b>system.</b> Their descriptions of concurrent processes can then be used to design the <b>authoring</b> <b>system</b> to "naturally" support concurrent programming...|$|R
40|$|Abstract. This paper {{consists}} of an in-depth summary {{and analysis of the}} research and development state of the art for intelligent tutoring <b>system</b> (ITS) <b>authoring</b> <b>systems.</b> A seven-part categorization of two dozen <b>authoring</b> <b>systems</b> is given, followed by a characterization of the authoring tools and the types of ITSs that are built for each category. An overview of the knowledge acquisition and authoring techniques used in these systems is given. A characterization of the design tradeoffs involved in building an ITS <b>authoring</b> <b>system</b> is given. Next the pragmatic questions of real use, productivity findings, and evaluation are discussed. Finally, I summarize the major unknowns and bottlenecks to having widespread use of ITS authoring tools. 1...|$|R
40|$|A web-based <b>authoring</b> <b>system</b> {{for rapid}} e- Learning has been developed. This system not only {{converts}} PowerPoint with voice into an e-Learning content using multimedia technology, but also publishes an e-Learning content. Using this system, even a researcher {{who is not}} familiar with the Information Technology can easily create an e-Learning content. This system named as Kumamoto Universal and Multipurpose <b>Authoring</b> <b>system</b> is helpful to spread rapid e-Learning...|$|R
5000|$|Authorware Inc. {{is formed}} in Minneapolis/St. Paul. From initial prototypes {{developed}} on both mainframe and very early personal computers, a Macintosh-based <b>authoring</b> <b>system</b> called [...] "Course of Action" [...] is introduced; later a PC version is developed. Shortly after its introduction, {{the title of}} the <b>authoring</b> <b>system</b> is changed to match the name of the company. Authorware {{went on to become the}} first and most widely used industry-standard development tool.|$|R
40|$|E-learning {{environment}} involves lots {{of relevant}} systems, {{such as the}} LMS (Learning Management System), the LCMS (Learning Content Management <b>System),</b> the Courseware <b>Authoring</b> <b>System,</b> and so on. Among them, the courseware authoring could be considered as the fundamental process while realizing an e-learning environment. As the result, to provide a friendly user interface in an <b>authoring</b> <b>system</b> {{has become the most}} essential part in the e-learning environment. On the other hand, how to simplify the authoring process for those users who aren’t the experts in this domain should be solved as well to make e-learning more popular. In this paper, we mainly focus on how to develop a service-oriented online <b>authoring</b> <b>system</b> based on SCORM standard. The functionalities in our <b>authoring</b> <b>system</b> can be also taken as separate services. These services can be reused in other external systems. In addition, we proposed a transformation mechanism to achieve the interoperability between various e-learning standards. Furthermore, we utilize the IMS LIP specification to maintain the authoring history of individual author, and use these profiles for authors to achieve the personalization authoring process. </p...|$|R
50|$|Enchanted Scepters {{was created}} with the World Builder {{adventure}} <b>authoring</b> <b>system</b> which was later released to consumers in 1986.|$|R
5000|$|Randal L. Schwartz (born November 22, 1961), {{also known}} as merlyn, is an American <b>author,</b> <b>system</b> {{administrator}} and programming consultant.|$|R
40|$|Abstract: On {{the basis}} of the {{achievements}} of OMNIBUS project, this paper presents the functionality of theory-aware <b>authoring</b> <b>system</b> and discusses how to accumulate learning/instructional design knowledge as the foundations for theory-awareness. The concept of “WAY ” proposed by this study would be helpful for both utilizing and abstracting learning/ instructional design knowledge. Structuralization of WAY in an IS-A hierarchy is the key point toward accumulation of learning/instructional design knowledge. Keywords: <b>Authoring</b> <b>system,</b> Ontology, Theory-awarenes...|$|R
40|$|This paper {{examines}} {{the benefits of}} self-empowering, group in-service training (INSET). It incorporates evidence from several case studies. The training involves the teaching and practising of relevant skills, as a departmental group, in the evaluation, selection and use of various computer-assisted language learning (CALL) and Web materials. Prior assessment {{of the needs of}} individual teachers and those of the department as a whole inform subsequent targeting of the training content. These needs range from a self-confessed paucity of awareness of CALL materials among modern foreign language teachers to the effective use of <b>multi-media</b> <b>authoring</b> materials across the whole ability range. There is a description of a typical training session which reveals that there must be at least two facilitators offering expertise on the CALL materials being presented and practical teacher training experience of the challenges teachers face within the classroom. The benefits of a model which supports team work and an educative process, and which holds a balance between theoretical issues and practical hands-on experience, is shown to be effective. The paper concludes with an evaluation of this form of INSET and proposes recommendations for further development and dissemination. (C) 1998 Elsevier Science Ltd. All rights reserved...|$|R
50|$|The app {{was built}} using the AppFurnace <b>authoring</b> <b>system,</b> made by Calvium, and is {{available}} on both Apple iOS and Android.|$|R
50|$|While {{playback}} engines {{existed for}} both the Macintosh and Windows platforms, the mTropolis <b>authoring</b> <b>system</b> itself only ran on the Mac.|$|R
