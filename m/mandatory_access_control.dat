372|10000|Public
25|$|SEDarwin is a port of TrustedBSD <b>mandatory</b> <b>access</b> <b>control</b> {{framework}} and {{portions of the}} SELinux framework to Darwin. It was incorporated into Mac OS X 10.5.|$|E
25|$|The non-discretionary {{approach}} consolidates {{all access}} control under a centralized administration. The {{access to information}} and other resources is usually based on the individuals function (role) in the organization or the tasks the individual must perform. The discretionary approach gives the creator or owner of the information resource {{the ability to control}} access to those resources. In the <b>Mandatory</b> <b>access</b> <b>control</b> approach, access is granted or denied basing upon the security classification assigned to the information resource.|$|E
2500|$|A system {{state is}} defined to be [...] "secure" [...] {{if the only}} {{permitted}} access modes of subjects to objects are in accordance with a security policy. To determine whether a specific access mode is allowed, the clearance of a subject is compared to the classification of the object (more precisely, to the combination of classification and set of compartments, making up the security level) {{to determine if the}} subject is authorized for the specific access mode. The clearance/classification scheme is expressed in terms of a lattice. The model defines two <b>mandatory</b> <b>access</b> <b>control</b> (MAC) rules and one discretionary access control (DAC) rule with three security properties: ...|$|E
5000|$|Use of an {{operating}} system with <b>Mandatory</b> <b>Access</b> <b>Controls</b> (MAC) such as SE Linux ...|$|R
50|$|Security-Enhanced Linux (SELinux) is a Linux kernel {{security}} module {{that provides}} a mechanism for supporting <b>access</b> <b>control</b> security policies, including United States Department of Defense-style <b>mandatory</b> <b>access</b> <b>controls</b> (MAC).|$|R
50|$|A {{system of}} <b>mandatory</b> <b>access</b> <b>controls.</b> SELinux can enforce the {{security}} policy over all processes and {{objects in the}} system, and is an optional feature in all 2.6 kernel source packages.|$|R
5000|$|Smack (Simplified <b>Mandatory</b> <b>Access</b> <b>Control</b> Kernel) is a Linux kernel {{security}} module {{that protects}} data and process interaction from malicious manipulation using {{a set of}} custom <b>mandatory</b> <b>access</b> <b>control</b> rules, with simplicity as its main design goal. It has been officially merged since the Linux 2.6.25 release.|$|E
5000|$|<b>Mandatory</b> <b>Access</b> <b>Control</b> (MAC) over {{selected}} {{subjects and}} objects ...|$|E
50|$|In 2007, the Simplified <b>Mandatory</b> <b>Access</b> <b>Control</b> Kernel was introduced.|$|E
50|$|From a purist perspective, SELinux {{provides}} {{a hybrid of}} concepts and capabilities drawn from <b>mandatory</b> <b>access</b> <b>controls,</b> <b>mandatory</b> integrity <b>controls,</b> role-based <b>access</b> <b>control</b> (RBAC), and type enforcement architecture. Third-party tools enable one to build a variety of security policies.|$|R
40|$|Role-based <b>access</b> <b>control</b> (RBAC) is a {{promising}} alternative to traditional discretionary and <b>mandatory</b> <b>access</b> <b>controls.</b> In RBAC permissions {{are associated with}} roles, and users are made members of appropriate roles thereby acquiring the roles' permissions. In this paper we formally show that lattice-based <b>mandatory</b> <b>access</b> <b>controls</b> can be enforced by appropriate configuration of RBAC components. Our constructions demonstrate that role hierarchies and constraints are required to effectively achieve this result. We show that variations of the lattice-based *-property, such as write-up (liberal *-property) and no-write-up (strict *-property), can be easily accommodated in RBAC. Our results attest to the flexibility of RBAC {{and its ability to}} accommodate different policies by suitable configuration of role hierarchies and constraints...|$|R
25|$|Fedora uses Security-Enhanced Linux by default, which {{implements}} {{a variety}} of security policies, including <b>mandatory</b> <b>access</b> <b>controls,</b> which Fedora adopted early on. Fedora provides hardening wrapper, and does hardening {{for all of its}} packages by using compiler features such as position-independent executable (PIE).|$|R
5000|$|Astra Linux OS {{developed}} for Russian Army {{has its own}} <b>mandatory</b> <b>access</b> <b>control.</b>|$|E
5000|$|Oracle Label Security is an {{implementation}} of <b>mandatory</b> <b>access</b> <b>control</b> in the Oracle DBMS.|$|E
50|$|Tomoyo Linux (stylised as TOMOYO Linux) is a Linux kernel {{security}} module which implements <b>mandatory</b> <b>access</b> <b>control</b> (MAC).|$|E
5000|$|There {{are several}} {{databases}} classified as MLS systems. Oracle has a product named Oracle Label Security (OLS) that implements <b>mandatory</b> <b>access</b> <b>controls</b> - typically {{by adding a}} 'label' column to each table in an Oracle database. OLS is being deployed at the US Army INSCOM {{as the foundation of}} an [...] "all-source" [...] intelligence database spanning the JWICS and SIPRNet networks. There is a project to create a labeled version of PostgreSQL, and there are also older labeled-database implementations such as Trusted Rubix. These MLS database systems provide a unified back-end system for content spanning multiple labels, but they do not resolve the challenge of having users process content at multiple security levels in one system while enforcing <b>mandatory</b> <b>access</b> <b>controls.</b>|$|R
50|$|SELinux was {{designed}} to demonstrate the value of <b>mandatory</b> <b>access</b> <b>controls</b> to the Linux community and how such controls could be added to Linux. Originally, the patches that make up SELinux had to be explicitly applied to the Linux kernel source; SELinux has been merged into the Linux kernel mainline in the 2.6 series of the Linux kernel.|$|R
50|$|SWIPSY had {{security}} {{properties that}} assured network and process separation. In particular processes communicating with one network could not communicate {{directly with the}} other network other than by ‘trusted mover agents’ that in turn force data to be passed to the format and content checkers. SWIPSY ran on a Trusted Solaris 8 platform, utilising its <b>Mandatory</b> <b>Access</b> <b>Controls</b> to enforce separation between compartments.|$|R
50|$|Trusted Solaris is a security-evaluated {{operating}} {{system based on}} Solaris by Sun Microsystems, featuring a <b>mandatory</b> <b>access</b> <b>control</b> model.|$|E
50|$|These {{rights and}} permissions are {{implemented}} differently in systems based on {{discretionary access control}} (DAC) and <b>mandatory</b> <b>access</b> <b>control</b> (MAC).|$|E
5000|$|Trusted RUBIX is a <b>mandatory</b> <b>access</b> <b>control</b> {{enforcing}} DBMS {{that fully}} integrates with SE-Linux to restrict {{access to all}} database objects.|$|E
40|$|While <b>Mandatory</b> <b>Access</b> <b>Controls</b> (MAC) are {{appropriate}} for multilevel secure military applications, Discretionary <b>Access</b> <b>Controls</b> (DAC) are often perceived as meeting the security processing needs of industry and civilian government. This paper argues that reliance on DAC as the principal method of <b>access</b> <b>control</b> is unfounded and inappropriate for many commercial and civilian government organizations. The paper describes a type of non-discretionary <b>access</b> <b>control</b> - role-based <b>access</b> <b>control</b> (RBAC) - that is more central to the secure processing needs of non-military systems then DAC...|$|R
40|$|While <b>Mandatory</b> <b>Access</b> <b>Controls</b> (MAC) are {{appropriate}} for multilevel secure military applications, Discretionary <b>Access</b> <b>Controls</b> (DAC) are often perceived as meeting the security processing needs of industry and civilian government. This paper argues that reliance on DAC as the principal method of <b>access</b> <b>control</b> is unfounded and inappropriate for many commercial and civilian government organizations. The paper describes a type of non-discretionary <b>access</b> <b>control</b> - role-based <b>access</b> <b>control</b> (RBAC) - that is more central to the secure processing needs of non-military systems than DAC. Comment: pp. 554 - 56...|$|R
40|$|The main {{contribution}} {{of this paper}} is to investigate issues in using <b>Mandatory</b> <b>Access</b> <b>Controls</b> (MACs), namely those provided by SELinux, to secure application-level data. Particular emphasis is placed on health-care records located on the grid. The paper disccuses the importance of a trusted computing base in providing application security. It de- scribes a secure three-tiered architecture, incorporating trusted hardware, SELinux, and application security mechanisms that are appropriate for securing sensitive application data...|$|R
5000|$|SEDarwin is a port of TrustedBSD <b>mandatory</b> <b>access</b> <b>control</b> {{framework}} and {{portions of the}} SELinux framework to Darwin. It was incorporated into Mac OS X 10.5.|$|E
50|$|Low Water-Mark <b>Mandatory</b> <b>Access</b> <b>Control</b> (LOMAC) is a <b>Mandatory</b> <b>Access</b> <b>Control</b> model {{which protects}} the {{integrity}} of system objects and subjects {{by means of an}} information flow policy coupled with the subject demotion via floating labels. In LOMAC, all system subjects and objects are assigned integrity labels, made up of one or more hierarchical grades, depending on their types. Together, these label elements permit all labels to be placed in a partial order, with information flow protections and demotion decisions based on a dominance operator describing the order.|$|E
50|$|The {{discretionary}} {{access control}} mechanisms of some operating systems {{can be used to}} enforce need to know. In this case, the owner of a file determines whether another person should have access. Need to know is often concurrently applied with <b>mandatory</b> <b>access</b> <b>control</b> schemes, in which the lack of an official approval (such as a clearance) may absolutely prohibit a person from accessing the information. This is because need to know can be a subjective assessment. <b>Mandatory</b> <b>access</b> <b>control</b> schemes can also audit accesses, in order to determine if need to know has been violated.|$|E
50|$|TrustedBSD is a {{sub-project}} of FreeBSD {{designed to}} add trusted operating system extensions, targeting the Common Criteria for Information Technology Security Evaluation (see also Orange Book). Its main focuses {{are working on}} <b>access</b> <b>control</b> lists, event auditing, extended attributes, <b>mandatory</b> <b>access</b> <b>controls,</b> and fine-grained capabilities. Since <b>access</b> <b>control</b> lists {{are known to be}} confronted with the confused deputy problem, capabilities are a different way to avoid this issue. As part of the TrustedBSD project, there is also a port of NSA's FLASK/TE implementation to run on FreeBSD. Many of these trusted extensions have been integrated into the main FreeBSD branch starting at 5.x.|$|R
40|$|The Bell-LaPadula {{security}} {{model is}} a hybrid model that combines <b>mandatory</b> <b>access</b> <b>controls</b> and discretionary <b>access</b> <b>controls.</b> The Bell-LaPadula security model has been widely accepted in military environments for its capability to specify military style confidentiality policies. The role based <b>access</b> <b>control</b> (RBAC) model has attracted extensive research effort and has been acknowledged as a flexible and policy natural model. This paper investigates a way of modeling Bell-LaPadula security policies using the RBAC model. The capability of modeling Bell-LaPadula security policies using RBAC model means that applications that are implemented using the RBAC model can then be deployed in military environments and will meet their requirements for information confidentiality. 1...|$|R
50|$|An {{important}} feature {{of the class of}} security controls described supra, termed <b>mandatory</b> <b>access</b> <b>controls,</b> or MAC, is that they are entirely beyond the control of any user: the TCB automatically attaches labels to any subjects executed on behalf of users; files created, deleted, read, or written by users; and so forth. In contrast, an additional class of <b>controls,</b> termed discretionary <b>access</b> <b>controls,</b> are under the direct control of the system users. Familiar protection mechanisms such as permission bits (supported by UNIX since the late 1960s and - in a more flexible and powerful form - by Multics since earlier still) and <b>access</b> <b>control</b> lists (ACLs) are familiar examples of discretionary <b>access</b> <b>controls.</b>|$|R
50|$|PostgreSQL's SECURITY LABEL feature (extension to SQL standards), {{allows for}} {{additional}} security; with a bundled loadable module that supports label-based <b>mandatory</b> <b>access</b> <b>control</b> (MAC) based on SELinux security policy.|$|E
50|$|System polices may {{disallow}} IPC in some circumstances. For example, in <b>mandatory</b> <b>access</b> <b>control</b> systems, {{subjects with}} different sensitivity levels {{may not be}} allowed to communicate with each other.|$|E
50|$|A <b>mandatory</b> <b>access</b> <b>control</b> {{security}} {{system based on}} Generalized Framework for Access Control (GFAC). It provides several standard and custom (and mixables) access control models. It can enforce operating system access rules.|$|E
5000|$|In response, Crispin Cowan {{proposed}} LSM: an interface for the Linux kernel {{that provides}} sufficient [...] "hooks" [...] (upcalls) {{from within the}} Linux kernel to a loadable module so as to allow the module to enforce <b>mandatory</b> <b>access</b> <b>controls.</b> Development of LSM {{over the next two}} years was conducted by the LSM community, including substantial contributions from the Immunix Corporation, the NSA, McAfee, IBM, Silicon Graphics, and many independent contributors. LSM was ultimately accepted into the Linux kernel mainstream and was included as a standard part of Linux 2.6 in December 2003.|$|R
50|$|There {{are also}} several MLS {{end-user}} applications. The other MLS capability {{currently on the}} UCDMO baseline is called MLChat, {{and it is a}} chat server that runs on the XTS-400 operating system - it was created by the US Naval Research Laboratory. Given that content from users at different domains passes through the MLChat server, dirty-word scanning is employed to protect classified content, and there has been some debate about if this is truly an MLS system or more a form of cross-domain transfer data guard. <b>Mandatory</b> <b>access</b> <b>controls</b> are maintained by a combination of XTS-400 and application-specific mechanisms.|$|R
5|$|FreeBSD {{provides}} several security-related features including <b>access</b> <b>control</b> lists (ACLs), security event auditing, extended {{file system}} attributes, <b>mandatory</b> <b>access</b> <b>controls</b> (MAC) and fine-grained capabilities. These security enhancements {{were developed by}} the TrustedBSD project. The project was founded by Robert Watson {{with the goal of}} implementing concepts from the Common Criteria for Information Technology Security Evaluation and the Orange Book. This project is ongoing and many of its extensions have been integrated into FreeBSD. The project is supported by a variety of organizations, including the DARPA, NSA, Network Associates Laboratories, Safeport Network Services, the University of Pennsylvania, Yahoo!, McAfee Research, SPARTA, Apple Computer, nCircle Network Security, Google, the University of Cambridge Computer Laboratory, and others.|$|R
