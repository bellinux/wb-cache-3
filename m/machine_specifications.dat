69|307|Public
5|$|The coin's design {{did have}} repercussions {{north of the}} border; when Canada {{introduced}} its new one-dollar coin in 1987, its dimensions were made similar so that vending <b>machine</b> <b>specifications</b> could be common between the two nations.|$|E
5000|$|... where PB is a {{value that}} {{implements}} a parser for Java, PG is a unary-function that extends a Java parser to parse generics, and PS is a unary-function that extends a Java parser to parse state <b>machine</b> <b>specifications.</b> HB is a unary-function that implements a harvester of comments on Java code. HG is a unary-function that implements a harvester of comments on generic code, and HS is a unary-function that implements a harvester of comments on state <b>machine</b> <b>specifications,</b> and so on.|$|E
5000|$|Upgrade new <b>machine</b> <b>specifications</b> at low {{additional}} cost so they remain useful longer, reduce the incursion of off-spec machines {{later in the}} life-cycle, improve standardization, reduce support costs, minimize e-waste with longer lifecycles ...|$|E
5000|$|J Strother Moore, The Interlisp Virtual <b>Machine</b> <b>Specification</b> (Xerox tech report, 1976) ...|$|R
50|$|This {{architecture}} {{should be}} compared to the original P-code <b>machine</b> <b>specification</b> as proposed by Niklaus Wirth.|$|R
5000|$|... #Caption: Overview of a Java {{virtual machine}} (JVM) {{architecture}} based on The Java Virtual <b>Machine</b> <b>Specification</b> Java SE 7 Edition ...|$|R
50|$|The <b>machine</b> <b>specifications</b> {{include a}} {{finite state machine}} that determines the processor's micro-operations. The {{canonical}} implementation of the state machine is an excellent candidate for reduction, and can also be re-implemented as a pipelined processor.|$|E
50|$|The coin's design {{did have}} repercussions {{north of the}} border; when Canada {{introduced}} its new one-dollar coin in 1987, its dimensions were made similar so that vending <b>machine</b> <b>specifications</b> could be common between the two nations.|$|E
5000|$|Upgrading new <b>machine</b> <b>specifications</b> at low {{additional}} cost ensures {{that they will}} remain useful long past their normal life. Extending the life of desktop machines will reduce the incursion of off-spec machines later in the life-cycle, improving standardization, reducing support costs, minimizing e-waste.|$|E
50|$|The {{compiler}} accepts {{source code}} conforming to the Java language specification (JLS) and produces bytecode conforming to the Java Virtual <b>Machine</b> <b>Specification</b> (JVMS).|$|R
30|$|Each virtual <b>machine’s</b> <b>specifications</b> are: one CPU {{with one}} Core, 1 -GB RAM, and one {{attached}} volume {{with a size}} of 10  GB; the installed OS is CentOS 6.|$|R
30|$|There is {{no clear}} {{comparison}} between VMs: The fact that each CSP has its own virtual <b>machines</b> <b>specifications,</b> configurations, and prices gives a kind of confusion for the Cloud customers.|$|R
5000|$|... {{compose the}} {{multiple}} subproblem <b>machine</b> <b>specifications</b> into the specification {{for a single}} all-in-one machine: a specification for a software machine that satisfies all of the customer's requirements. This is a non-trivial activity — the composition process may very well raise composition problems {{that need to be}} solved.|$|E
5000|$|Valve {{began running}} a beta-testing program in late 2013, {{selecting}} 300 Steam users {{to test their}} optimized prototype hardware units and initial versions of the Steam Controllers. The initial prototypes {{to be sent to}} testers will have various configurations, and may not be representative of the final Steam <b>Machine</b> <b>specifications.</b> The configurations include: ...|$|E
5000|$|Hoverdrive: An {{event in}} which the {{participants}} will design a radio controlled hovercraft that can navigate through any terrain including water, sand and gravel and race it through specified tracks {{in the best possible}} manner scoring maximum points. The vehicle should follow the required <b>machine</b> <b>specifications</b> and shall be tested for its swiftness, endurance and maneuverability.|$|E
30|$|Each virtual <b>machine’s</b> <b>specifications</b> are: one CPU {{with one}} Core, 1 -GB RAM, and one {{attached}} volume {{with a size}} of 10  GB, and the installed OS is CentOS 6.|$|R
50|$|Every Java {{virtual machine}} {{implementation}} {{must have a}} bootstrap class loader, capable of loading trusted classes. The Java virtual <b>machine</b> <b>specification</b> doesn't specify how a class loader should locate classes.|$|R
50|$|JamVM is an {{open source}} Java Virtual Machine (JVM) {{developed}} to be extremely small compared with other virtual machines (VMs) while conforming to the Java virtual <b>machine</b> <b>specification</b> version 2 (blue book).|$|R
50|$|Timsons Limited has {{specialised}} {{for over}} 50 {{years in the}} niche market of presses to print books. The variability of book sizes, and hence <b>machine</b> <b>specifications,</b> creates a need for flexibility in design and manufacture. Each press is custom built enabling the printer to select the print circumference, web width and folder to meet their own individual requirements and minimise excess trim waste.|$|E
40|$|A {{wide range}} of {{software}} units can be classified as state machines. We extend conventional state machine notations by adding regular expressions of events and unions of source states to state machine transitions. Reusable software components are generated from these extended state <b>machine</b> <b>specifications.</b> Component specification and generation are illustrated in Java. Keywords: finite state machine, regular expression, code generation, component, Java. ...|$|E
40|$|In {{this paper}} we {{demonstrate}} {{an approach to}} system development based on problem decomposition and subsequent (re) composition of sub-problem specifications. We illustrate the work using Problem Frames, an approach to the decomposition of problems that relates requirements, domain properties, and <b>machine</b> <b>specifications.</b> Having decomposed a problem, one approach to solving it is {{through a process of}} composing solutions to sub-problems. In this paper, we show that by formalizing system requirements and domain properties using an Event Calculus, we can both systematically derive <b>machine</b> <b>specifications</b> and solve composition problems. We add a prohibit predicate to the event calculus, that prohibits an event over a given time period. This allows a sub-solution to be formalized in a way that provides for run-time conflict resolution. We develop our earlier work on Composition Frames, an approach to composing inconsistent requirements, by adding systematic support and factoring out domain-dependent details. Throughout the paper we use a simple case study to illustrate and validate our ideas. 1...|$|E
25|$|The {{essential}} {{components in}} the platform are the Java language compiler, the libraries, and the runtime environment in which Java intermediate bytecode executes {{according to the rules}} laid out in the virtual <b>machine</b> <b>specification.</b>|$|R
40|$|To {{address a}} frame concern in Jackson’s Problem Frames, {{we must make}} {{appropriate}} descriptions of: (1) the problem domain; (2) the requirements; (3) the <b>specification</b> of the <b>machine.</b> Based on these descriptions, we must give a con-vincing argument that the given domain properties and the <b>machine</b> <b>specification</b> together entail that the requirements are fulfilled. In this paper, we demonstrate how to address certain frame concerns {{with the use of}} the formal modelling language Coloured Petri Nets (CPN). Problem domain de-scription and <b>machine</b> <b>specification</b> are brought together in a CPN model, which is augmented with a graphical anima-tion. The CPN model is executable and we simulate it to address frame concerns. We illustrate the approach on the elevator controller example...|$|R
50|$|The {{specifications}} of the BD+ {{virtual machine}} are only officially available to licensed device manufacturers. A list of licensed adopters {{is available from}} the BD+ website. Both SlySoft (now RedFox) and members of the Doom9 forum have reverse engineered the virtual <b>machine</b> <b>specification,</b> however.|$|R
40|$|The 2009 LHC run {{has made}} it {{possible}} to collect an extensive set of beam-based measurements. A good fraction of the LHC magnets, aperture and optics models has been validated with these measurements. However, a few localized optical errors remain. Appropriate corrections are necessary to reach <b>machine</b> <b>specifications</b> and to safely operate the LHC at higher intensities. The measurements, model predictions and proposed optics corrections are summarize...|$|E
40|$|We {{present an}} {{implemented}} technique for generating test cases from state <b>machine</b> <b>specifications.</b> The work {{is motivated by}} a need for testing of protocols and services developed by the company Mobile Arts. We have developed a syntax for description of state machines extended with data variables. From such state machines, test cases are generated by symbolic execution. The test cases are symbolically represented; concrete test cases are generated by instantiation of data parameters...|$|E
40|$|For agile {{manufacturing}} the well-structured and system-based management of static <b>machine</b> <b>specifications,</b> dynamic data derived from machines and human expert knowledge is the key. Semantic wiki systems based on ontologies have proven applicability in various industrial sectors. In the presented work such a wiki system is introduced, addressing {{the requirements of}} {{agile manufacturing}} due to its handling of experts' knowledge, its extensibility by the production stakeholders and its capability to integrate machine data...|$|E
40|$|Construction {{within the}} Meta {{language}} for both language and target <b>machine</b> <b>specification</b> is reported. The {{elements of the}} function language as a meaning and syntax are presented, {{and the structure of}} the target language is described which represents the target dependent object text representation of applications programs...|$|R
40|$|Diploma {{thesis is}} {{specialized}} to solving of problems machining of diffi-cult machinable materials. There {{is carried out}} the analysis of difficult machinable materials in term of chemical composition, physical and mechanical properties. In the following it deals with analysis of <b>machining,</b> <b>specification</b> of geometry, material of cutting tools and cutting conditions...|$|R
50|$|Gilad Bracha is {{the creator}} of the Newspeak {{programming}} language, a software engineer at Google {{and a member of the}} Dart (programming language) team. He is a co-author of the second and third editions of the Java Language Specification, and a major contributor to the second edition of the Java Virtual <b>Machine</b> <b>Specification.</b>|$|R
40|$|This paper {{presents}} work {{in progress}} on the Lyrebird frame-work, consisting of a language for specifying the programmer-visible behaviour of a processor and its associated devices, a tool for automatically producing a fast simulator, and a formal seman-tic interpretation providing a ma-chine model for use in an inter-active theorem prover. <b>Machine</b> <b>specifications</b> are modular, pro-viding abstract interfaces and structural parameterization (MMU-less processors, for example). Also presented is a specific example: An instantiation for the ARM 1136 jf-s core. ...|$|E
40|$|We {{explain how}} Executable Use Cases (EUCs) {{constitute}} links between application domain requirements and <b>machine</b> <b>specifications.</b> As example, we use an EUC describing the hospital work process medicine administration and its proposed support {{by a new}} pervasive health care system. The EUC {{is based on a}} generalised state machine {{in the form of a}} Coloured Petri Nets model. We demonstrate how the EUC supports investigation of whether a specification of a machine satisfies the users ’ requirements. ...|$|E
40|$|AbstractSince {{eco-efficiency}} {{of manufacturing}} resource has been emphasized, various sensors to measure energy consumption {{have been developed}} and machine tool builders also provide data of energy consumption of their own products. Due to the variety and complexity of machine tools, however, {{an enormous amount of}} data is generated and can lead to uncertainties in further interpretation. The data relating to energy consumption can be classified into process parameters and <b>machine</b> <b>specifications.</b> In order to estimate the energy use that a new machine tool utilizes, the relationship with various performance indicators of the machine tool and a process plan should be examined. The challenge is how to link the <b>machine</b> <b>specifications</b> and process plan in order to obtain actual energy consumption. This paper proposes an approach for deriving an energy estimation model from general key performance indicators of the sustainability of machine tools. For the detailed application, the proposed methodology is applied to the laser welding process of an automotive assembly line and the milling process of an aircraft part manufacturer. The paper describes the methodology for finding the parameters necessary for calculating energy use and to develop the energy estimation model by utilizing experimental data...|$|E
40|$|Projet CHLOEPagode is a {{back-end}} generator {{which produces}} automatically the various engines of a code generator (instruction selector, scheduler and register allocator) from a target <b>machine</b> <b>specification.</b> This report mainly {{focuses on the}} features of the target machine which aim at producing the scheduler, and on the heuristics used by the kernel of the scheduler...|$|R
40|$|There {{has been}} an ever growing {{interest}} {{in the study of}} process-calculi as frameworks for concurrent, distributed, object-oriented languages. These are of particular importance given the adequacy of the object programming model and its widespread use in software development and, ultimately, in Internet applications. The asynchronous - calculus is a powerful tool to reason about concurrent process interaction. However, it is not an adequate framework for the implementation of object-oriented languages as its encodings of objects are quite inefficient. Efforts in the implementation of languages based on process calculi have so far failed in providing a unifying framework {{in the form of a}} virtual <b>machine</b> <b>specification.</b> This thesis introduces a virtual <b>machine</b> <b>specification</b> and its implementation for a variant of the -calculus [...] the TyCO calculus. TyCO features objects and asynchronous messages. Thus, contrary to other calculi such as, objects are builtin entities and do not require computa [...] ...|$|R
50|$|The {{platform}} {{uses the}} object-oriented Java programming language. It {{is part of}} the Java software-platform family. Java SE defines a wide range of general-purpose APIs—such as Java APIs for the Java Class Library—and also includes the Java Language Specification and the Java Virtual <b>Machine</b> <b>Specification.</b> One of the most well-known implementations of Java SE is Oracle Corporation's Java Development Kit (JDK).|$|R
