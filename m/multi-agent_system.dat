4378|6486|Public
25|$|<b>Multi-agent</b> <b>system</b> – A <b>multi-agent</b> <b>system</b> is a {{computerized}} system composed of multiple interacting intelligent agents within an environment.|$|E
25|$|Others take a {{systemic}} viewpoint {{that does not}} necessarily depend on molecular chemistry. One systemic definition of life is that living things are self-organizing and autopoietic (self-producing). Variations of this definition include Stuart Kauffman's definition as an autonomous agent or a <b>multi-agent</b> <b>system</b> capable of reproducing itself or themselves, and of completing at least one thermodynamic work cycle. This definition is extended by the apparition of novel functions over time.|$|E
25|$|Agent {{architectures}} {{and cognitive}} architectures: Researchers have designed systems to build intelligent systems out of interacting intelligent agents in a <b>multi-agent</b> <b>system.</b> A system with both symbolic and sub-symbolic components is a hybrid intelligent system, {{and the study}} of such systems is artificial intelligence systems integration. A hierarchical control system provides a bridge between sub-symbolic AI at its lowest, reactive levels and traditional symbolic AI at its highest levels, where relaxed time constraints permit planning and world modelling. Rodney Brooks' subsumption architecture was an early proposal for such a hierarchical system.|$|E
30|$|Inspired by {{the results}} in [1 – 12], this paper further investigates the {{containment}} control for <b>multi-agent</b> <b>systems</b> under Markov switching topologies. In this paper, containment algorithms for continuous-time and discrete-time <b>multi-agent</b> <b>systems</b> are given, respectively. By using the graph theory and theory of stochastic analysis, sufficient conditions of mean square containment control for <b>multi-agent</b> <b>systems</b> are derived. Then we extend {{the results of the}} second-order <b>multi-agent</b> <b>systems</b> to high-order <b>multi-agent</b> <b>systems.</b>|$|R
40|$|Abstract. This paper reports first {{trials to}} include the User aspect into <b>Multi-Agent</b> <b>Systems,</b> which is a basic need if <b>Multi-Agent</b> <b>Systems</b> want to {{contribute}} to environments where the User is tightly coupled with decentralised systems, such as pervasive computing. The paper first outlines how <b>Multi-Agent</b> <b>Systems</b> have developed from Agent Centred <b>Multi-Agent</b> <b>Systems</b> to Organisation Centred <b>Multi-Agent</b> <b>Systems.</b> We exemplify this with problems from robotic systems in the agricultural environment. We then elaborate how <b>Multi-Agent</b> <b>Systems</b> should be designed {{by focusing on the}} User, and we propose to designate this class of resulting systems as being User Centred <b>Multi-Agent</b> <b>Systems.</b> We illustrate how this approach enables us to model and analyse more complex problem domains than Organization Centred <b>Multi-Agent</b> <b>Systems</b> are able to. We finally discuss the future directions and examples of possible application domain...|$|R
40|$|<b>Multi-agent</b> <b>systems</b> are {{ubiquitous}} in the world. Recently, <b>multi-agent</b> <b>systems</b> have received increasing attention from mathematics, physics, engineering sciences, {{and social science}} communities. This paper firstly introduces several fundamental concepts and then reviews several representative models of <b>multi-agent</b> <b>systems,</b> including the Boids model, Vicsek model, Couzin-Levin model and its invariants, and various complex dynamical networks. Based on these models, it further investigates the dynamical behaviors of <b>multi-agent</b> <b>systems,</b> such as consensus, convergence, adaptation, and consensus decision-making. Moreover, it briefly reviews the main progress in the control of <b>multi-agent</b> <b>systems.</b> Finally, it looks ahead into some important research topics on <b>multi-agent</b> <b>systems,</b> with regard to modelling, analysis, and control...|$|R
2500|$|What distinguishes a CAS from a pure <b>multi-agent</b> <b>system</b> (MAS) is {{the focus}} on {{top-level}} properties and features like self-similarity, complexity, emergence and self-organization. A MAS {{is defined as a}} system composed of multiple interacting agents; whereas in CAS, the agents as well as the system are adaptive and the system is self-similar. A CAS is a complex, self-similar collectivity of interacting, adaptive agents. [...] Complex Adaptive Systems are characterized by a high degree of adaptive capacity, giving them resilience in the face of [...]|$|E
50|$|<b>Multi-agent</b> <b>system</b> - A <b>multi-agent</b> <b>system</b> is a {{computerized}} system composed of multiple interacting intelligent agents within an environment.|$|E
50|$|Multi-agent systems {{consist of}} agents and their environment. Typically multi-agent systems {{research}} refers to software agents. However, the agents in a <b>multi-agent</b> <b>system</b> could equally well be robots, humans or human teams. A <b>multi-agent</b> <b>system</b> may contain combined human-agent teams.|$|E
5000|$|Autonomous Agents and <b>Multi-Agent</b> <b>Systems</b> is a peer-reviewed {{scientific}} journal {{covering the}} study of autonomous agents and <b>multi-agent</b> <b>systems.</b>|$|R
30|$|The paper investigates {{containment}} {{control for}} <b>multi-agent</b> <b>systems</b> under Markov switching topologies. By using graph {{theory and the}} tools of stochastic analysis, sufficient conditions of mean square containment control problems are derived for the second-order <b>multi-agent</b> <b>systems.</b> Then the obtained results are further extended to high-order <b>multi-agent</b> <b>systems.</b>|$|R
40|$|Keywords: Agent-oriented {{software}} engineering, <b>Multi-agent</b> <b>systems,</b> Application integration Abstract: The {{maturity of}} technical foundations for <b>multi-agent</b> <b>systems</b> {{and the support}} by development tools, infrastructure services, {{and a number of}} development methodologies leads to an increasing number of existing <b>multi-agent</b> <b>systems.</b> A more and more networked environment drives the demand for coupling these heterogeneous systems to large multi-multi-agent systems. Unfortunately, the design and implementation steps necessary in this context are currently not supported by established development methodologies; conventional approaches mainly focus on isolated <b>multi-agent</b> <b>systems.</b> In this paper, we present an approach for the integration of heterogeneous <b>multi-agent</b> <b>systems.</b> The Agent. Enterprise system is a coupled multimulti-agent system that has been designed and tested in the manufacturing logistics domain. ...|$|R
5000|$|<b>Multi-agent</b> <b>system</b> and {{multiple}}-agent system - multiple interactive agents ...|$|E
5000|$|The {{agents in}} a <b>multi-agent</b> <b>system</b> have several {{important}} characteristics: ...|$|E
50|$|As {{an example}} of V&V technique, {{consider}} VOMAS (virtual overlay <b>multi-agent</b> <b>system),</b> a software engineering based approach, where a virtual overlay <b>multi-agent</b> <b>system</b> is developed alongside the agent-based model. The agents in the <b>multi-agent</b> <b>system</b> are able to gather data by generation of logs {{as well as provide}} run-time validation and verification support by watch agents and also agents to check any violation of invariants at run-time. These are set by the Simulation Specialist with help from the SME (subject-matter expert). Muazi et al. also provide {{an example of}} using VOMAS for verification and validation of a forest fire simulation model.|$|E
40|$|Abstract: <b>Multi-agent</b> <b>systems</b> and ontologies can {{potentially}} enable resource interoperation and knowledge sharing in virtual collaboration environments where information {{and people are}} inherently distributed. A review of agents, <b>multi-agent</b> <b>systems</b> and ontologies in terms of definition, properties, architectures, methodologies, languages and environments is presented. An agent architecture is proposed to address virtual collaboration in a distributed environment. Based on <b>multi-agent</b> <b>systems</b> and ontologies, the proposed architecture {{has the potential of}} optimizing the flow of information in communication networks. Key-Words: agents, <b>multi-agent</b> <b>systems,</b> ontologies, cooperation, distributed environments...|$|R
40|$|Abstract. Many methodologies {{appeared}} in the latest years to deal with multiagent systems complexity and special development requirements. Each methodology focuses in certain aspects of <b>multi-agent</b> <b>systems</b> development and use different case studies to prove their effectiveness. In order to compare their characteristics {{it is necessary to}} use a single case study that requires a complex and distributed solution. This paper presents the development of a very well-known <b>multi-agent</b> <b>systems</b> case study – the Conference Management System – with the <b>Multi-agent</b> <b>Systems</b> Unified Process (MASUP). Keywords: <b>Multi-agent</b> <b>systems</b> development; Conference Managemen...|$|R
40|$|Abstract. Our overall aim is {{to provide}} a {{verification}} framework for practical <b>multi-agent</b> <b>systems.</b> To achieve practicality, we must be able to describe and implement heterogeneous <b>multi-agent</b> <b>systems.</b> To achieve verifiability, we must define semantics appropriately for use in formal verification. Thus, in this paper, we tackle the problem of implementing heterogeneous <b>multi-agent</b> <b>systems</b> in a semantically clear, and appropriate, way. ...|$|R
5000|$|... #Subtitle level 3: A swarm and a <b>multi-agent</b> <b>system</b> {{composed}} of neural networks ...|$|E
5000|$|A HBGA {{is usually}} a <b>multi-agent</b> <b>system,</b> delegating genetic {{operations}} to multiple agents (humans).|$|E
5000|$|Interaction and Knowledge (Artificial Intelligence-driven: <b>multi-agent</b> <b>system,</b> machine learning, Natural {{language}} processing and interaction, neural networks) ...|$|E
40|$|Some methodological {{aspects of}} {{developing}} <b>multi-agent</b> <b>systems</b> are considered in this work. In particular, influence of analysis and design methodologies on the interoperability properties of <b>multi-agent</b> <b>systems</b> is investigated {{from the perspective}} of ontology-based meaning transfer. A combined approach to developing better <b>multi-agent</b> <b>systems</b> is proposed and importance of interdisciplinary integration of research efforts for creation of interoperable systems is emphasized. ...|$|R
30|$|In [8], {{the mean}} square {{consensus}} {{problem of the}} high-order <b>multi-agent</b> <b>systems</b> was investigated, while the mean square containment control of high-order <b>multi-agent</b> <b>systems</b> has been discussed in this paper.|$|R
30|$|Containment {{control for}} <b>multi-agent</b> <b>systems</b> {{means that all}} {{followers}} are driven into the convex hull generated by the leaders. For example, when some robots are used to carry poisonous materials, since they do not pollute other places, a group of robots are needed to drive them in the designed route, which is called leaders. At present, many results about containment control have been obtained [1 – 12]. In [1], dynamic containment algorithms based on observers for the high-order continuous-time <b>multi-agent</b> <b>systems</b> were proposed under the fixed topology. Then the results of continuous-time <b>multi-agent</b> <b>systems</b> were extended {{to that of the}} discrete-time <b>multi-agent</b> <b>systems.</b> In [2], the containment control problem of double-integrator dynamics with multiple leaders was discussed, where velocities of leaders are unavailable. In [3], the output feedback algorithm and state feedback algorithm were proposed for solving the containment control problem of the discrete-time <b>multi-agent</b> <b>systems,</b> in which time delay is considered in communication networks of <b>multi-agent</b> <b>systems.</b> By using the Lyapunov functional method and the tools of the linear matrix inequality, containment control problems of second-order multi-agent with time delays were investigated, where the stationary leaders and dynamic leaders were considered in [4], respectively. In [5], containment algorithms based on the sampled data for the second-order <b>multi-agent</b> <b>systems</b> were given, where the necessary and sufficient conditions of <b>multi-agent</b> <b>systems</b> were derived.|$|R
5000|$|Electric power systems, e.g. COndition Monitoring <b>Multi-Agent</b> <b>System</b> (COMMAS) {{applied to}} {{transformer}} condition monitoring, and IntelliTEAM II Automatic Restoration System ...|$|E
5000|$|... "Collaborative <b>Multi-Agent</b> <b>System</b> for Dynamic Management of Electronic Services in a Mobile Global Network Environment" [...] (2011) (with Kenneth E. Grigg) ...|$|E
50|$|The Multi-Agent Programming Contest is {{an annual}} {{international}} programming competition with stated goal of stimulating {{research in the}} area of <b>multi-agent</b> <b>system</b> development and programming.|$|E
30|$|Recently, {{cooperative}} {{control for}} <b>multi-agent</b> <b>systems</b> has attracted increasing attention, {{due to its}} many applications in different fields. As is well known, consensus is the basic problem of cooperative control for <b>multi-agent</b> <b>systems,</b> which means that every agent tends to the same value in a team. Moreover, the topic of consensus problems with multiple leaders is interesting, which is called containment control for <b>multi-agent</b> <b>systems.</b>|$|R
40|$|Approaches to the {{verification}} of <b>multi-agent</b> <b>systems</b> are typically {{based on games}} or transition systems {{defined in terms of}} states and actions. However such approaches often ignore a key aspect of <b>multi-agent</b> <b>systems,</b> namely that the agents’ actions require (and sometimes produce) resources. We briefly survey previous work on the {{verification of}} <b>multi-agent</b> <b>systems</b> that takes resources into account, and outline some key challenges for future work...|$|R
40|$|The {{applications}} of <b>Multi-Agent</b> <b>Systems</b> (MAS) in electrical power systems are becoming {{popular due to}} their inherent benefits such as increased autonomy, reactivity, pro activity and social ability. This paper reviews current research on the application of <b>multi-agent</b> <b>systems</b> in micro grid schemes. The paper is mainly focused on recent developments of <b>multi-agent</b> <b>systems</b> in different aspects of micro grids such as control, market modeling, optimization and power restoration. The future directions of <b>multi-agent</b> <b>systems</b> in micro grid applications are also discussed briefly. Furthermore, this review is concluded by discussing {{the development of an}} enhanced multi-agent based distributed control framework for micro grids...|$|R
5000|$|CoJACK An ACT-R {{inspired}} {{extension to}} the JACK <b>multi-agent</b> <b>system</b> that adds a cognitive architecture to the agents for eliciting more realistic (human-like) behaviors in virtual environments.|$|E
5000|$|RoboCup Rescue Simulation: a large, <b>multi-agent</b> <b>system</b> {{is one of}} {{the most}} {{challenging}} environments to control and coordinate because there needs to be a precise coordination between agents.|$|E
5000|$|Jason is a {{platform}} {{for the development of}} multi-agent systems. An extension of the AgentSpeak agent-oriented programming language is used to program the behaviour of individual agents. Jason is developed in Java and allows the customisation of most aspects of an agent or a <b>multi-agent</b> <b>system.</b> It comes as a plugin for either jEdit or Eclipse, and different infra-structures for the deployment of a <b>multi-agent</b> <b>system,</b> for example using JADE or SACI as an agent-based distributed system middleware. See [...] and the external links below for a detailed account of the Jason platform.Jason is an open source software and is distributed under GNU LGPL.|$|E
40|$|Abstract. <b>Multi-agent</b> <b>systems</b> can be {{used for}} a variety of {{applications}} in several domains. Interactive games are one of these applications. <b>Multi-agent</b> <b>systems</b> applied to games are a rich source of research on interaction, communication, adaptability and management of resources. This paper presents a proposal for criteria and measurements to evaluate <b>multi-agent</b> <b>systems,</b> using a game system as application. These measurements may help to analyse the operation and behaviour of <b>multi-agent</b> <b>systems,</b> helping also to the further design and development of such systems. We believe that the proposed criteria consider important features in a multi-agent environment and, therefore, can be applied to different problems represented as <b>multi-agent</b> <b>systems.</b> An example of the use of these criteria in a game prototype is described, as well as the results achieved. ...|$|R
40|$|This {{working paper}} lists some {{ideas on how}} to apply {{category}} theory to agents, and <b>multi-agent</b> <b>systems.</b> It focuses more on the distributivity and compositionality of agents, {{as well as on the}} emergence of sociality and properties, than on the intelligence or on the ability of agents to reason. It presents some categorical notions, and explains informally how they can be connected with agents and <b>multi-agent</b> <b>systems.</b> Contents 1 Introduction 4 2 Agents and <b>Multi-Agent</b> <b>Systems</b> 5 2. 1 Definitions and Primitives of Agents................ 5 2. 2 Definitions and Primitives of <b>Multi-agent</b> <b>systems.........</b> 6 2. 3 Agent Theories............................ 7 2. 4 <b>Multi-Agent</b> <b>Systems</b> Theories.................... 8 3 Category Theory 9 3. 1 Category Theory in Computer Science............... 9 3. 2 Definitions............................... 10 4 Ideas for Formalization of Agents an [...] ...|$|R
40|$|Abstract. A {{formalism}} for {{the logical}} description of computational agents and <b>multi-agent</b> <b>systems</b> is given. It is explained how {{it such a}} formal description {{can be used to}} configure and reason about <b>multi-agent</b> <b>systems</b> realizing computational intelligence models. A usage within a real software system Bang 3 is demonstrated. The logical description of <b>multi-agent</b> <b>systems</b> opens Bang 3 for interaction with ontology based distributed knowledge systems like the Semantic Web. ...|$|R
