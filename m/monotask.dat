1|3|Public
40|$|Salvucci and Bogunovich (2010) {{described}} a multitasking experiment in which users {{had to look}} up {{information on the internet}} as a primary task while being occasionally interrupted by a secondary chat task. This experiment showed that users who experience deferrable interruptions at times of higher mental workload tend to defer processing until times of lower workload. Based on this we conducted an experiment in which we investigated if we could influence the process of deferring incoming interruptions, and what the potential interruption effects are on effciency in the primary task. In our experiment we introduced a short pause at certain points of higher mental workload. Analysis showed that users switched more often to the secondary task at points of higher mental workload when they experienced a pause in the primary task, while effciency remained relatively unchanged. The results suggest that while having a tendency to <b>monotask,</b> users can be seduced into multitasking without losing effciency. ...|$|E
5000|$|Mkandawire, Thandika, forthcoming. [...] "Institutional Monocropping and <b>Monotasking</b> in Africa," [...] in Privatization: Successes and Failures. Akbar Noman and Joseph Stiglitz eds. London: Cambridge University Press.|$|R
40|$|Today’s {{workstations}} {{running a}} {{multitasking operating system}} provide high level graphics toward usdr friendly interfaces. Microcomputers, on their side, implement graphic interfaces on <b>monotasking</b> operating systems. There are two differences between these machines: the operating system and the user interface to this operating system (the shell). Workstations still use standard shells (textual commands) but through a sophisticated graphic environment as a window manager, while microcomputers have their own graphic shell running on <b>monotasking</b> operating system. In this paper we examine the features of both systems and then we present an iconic shell developed for UnixTMt workstations. This shell differs from existing shells because the interaction language is based on graphic manipulations, and is integrated in a multitasking environment...|$|R
40|$|Abstract — Often, many control {{applications}} {{with time}} restric-tions are {{implemented by the}} codification of complex programs in assembly language, programming timers, manipulating periph-eral devices, tasks and interruption priorities in low level. The consequence {{of this approach is}} that the control software is pro-duced by ad hoc techniques that can present low reliability and high cost. The design and implementation of an embedded real-time control system uses, basically, two types of professionals: the control engineer and the software engineer. The main tool used by the control engineer is the functional blocks diagram that, mapped to diagrams of components, supply the software engineer with the necessary information, but the simple use of functional blocks generates a <b>monotasking</b> system. This article describes a proposal that aims to improve the process of construction (de-sign and implementation) of embedded systems with functiona...|$|R

