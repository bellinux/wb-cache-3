2|3328|Public
50|$|TL1 was {{developed}} by Bellcore in 1984 as a standard man-machine language to manage network elements for the Regional Bell Operating Companies (RBOCs). It is based on Z.300 series <b>man</b> <b>machine</b> <b>language</b> standards. TL1 {{was designed as a}} standard protocol readable by machines as well as humans to replace the diverse ASCII based protocols used by different Network Element (NE) vendors. It is extensible to incorporate vendor specific commands.|$|E
40|$|This thesis {{starts with}} a brief {{introduction}} about LTE system and Automated Testing, after which, it describes the implementation of test automation for Mobility Management Entity (MME) of 4 G LTE core network. The thesis work is focus on testing of MME logical interfaces s 1, s 6 and s 11. There is a test suite that is developed, and is used to remotely control the Tektronix G 35 tester to generate network traffic for testing purpose. Besides, the test suite sends <b>Man</b> <b>Machine</b> <b>Language</b> (MML) commands to the MME hardware platform called ATCA, and periodically collects counters’ data, with which the test suite is able to track {{the performance of the}} three interfaces of MME. As a conclusion, automated testing for MME is found to be very important. It provides an efficient way to generate a clear picture of the performance of MME, which is helpful when improving the quality of MME...|$|E
50|$|The {{majority}} of software {{is written in}} high-level programming languages that are easier and more efficient for programmers to use because they are closer than <b>machine</b> <b>languages</b> to natural languages. High-level languages are translated into <b>machine</b> <b>language</b> using a compiler or an interpreter {{or a combination of}} the two. Software may also be written in a low-level assembly language, which has strong correspondence to the computer's <b>machine</b> <b>language</b> instructions and is translated into <b>machine</b> <b>language</b> using an assembler.|$|R
50|$|Type-ins {{were usually}} written in BASIC or a {{combination}} of a BASIC loader and <b>machine</b> <b>language.</b> In the latter case, the opcodes and operands of the <b>machine</b> <b>language</b> part were often simply given as DATA statements within the BASIC program, and were loaded using a POKE loop, since few users had access to an assembler. In some cases, a special program for entering <b>machine</b> <b>language</b> numerically was provided. Programs with a <b>machine</b> <b>language</b> component sometimes included assembly language listings for users who had assemblers and who were interested in the internal workings of the program.|$|R
50|$|The {{computer}} {{could be}} programmed using an assembly language system called QUIKOMP(TM), but its simple <b>machine</b> <b>language</b> instruction set and slow operation speed encouraged many programmers to code directly in <b>machine</b> <b>language.</b>|$|R
5000|$|Hardwired into a CPU's {{circuitry}} {{is a set}} {{of basic}} operations it can perform, called an instruction set. Such operations may involve, for example, adding or subtracting two numbers, comparing two numbers, or jumping to a different part of a program. Each basic operation is represented by a particular combination of bits, known as the <b>machine</b> <b>language</b> opcode; while executing instructions in a <b>machine</b> <b>language</b> program, the CPU decides which operation to perform by [...] "decoding" [...] the opcode. A complete <b>machine</b> <b>language</b> instruction consists of an opcode and, in many cases, additional bits that specify arguments for the operation (for example, the numbers to be summed {{in the case of an}} addition operation). Going up the complexity scale, a <b>machine</b> <b>language</b> program is a collection of <b>machine</b> <b>language</b> instructions that the CPU executes.|$|R
40|$|Abstract: The {{semantic}} analyses {{phase of}} a compiler must translate abstract syntax into abstract <b>machine</b> code. <b>machine</b> <b>language</b> that can express the target-machine operations without committing to too much machinespecific details. But it is also independent {{of the details of}} the source language. The front-end of the compiler does lexical analysis, parsing, semantic analyses, and translation to intermediate representation. The back-end does optimization of the intermediate representation and translation to <b>machine</b> <b>language.</b> Key-Words: compiler, lexical analysis, abstract syntax, intermediate representation, abstract <b>machine</b> <b>language...</b>|$|R
50|$|In some {{computer}} architectures, {{the machine}} code is implemented by {{an even more}} fundamental underlying layer called microcode, providing a common <b>machine</b> <b>language</b> interface across a line or family of different models of computer with widely different underlying dataflows. This is done to facilitate porting of <b>machine</b> <b>language</b> programs between different models. An example of this use is the IBM System/360 family of computers and their successors. With dataflow path widths of 8 bits to 64 bits and beyond, they nevertheless present a common architecture at the <b>machine</b> <b>language</b> level across the entire line.|$|R
50|$|Simulation of <b>machine</b> <b>language</b> {{code and}} {{implementation}} of assembler.|$|R
5000|$|Algebraic Theory of <b>Machines,</b> <b>Languages</b> and Semigroups (January, 1968) ...|$|R
5000|$|Charles J. Roslund (Charlie's Machine): a <b>machine</b> <b>language</b> utility column; ...|$|R
30|$|An OpCode (short for {{operational}} code) is {{the portion}} of a <b>machine</b> <b>language</b> instruction that specifies the operation to be performed. A complete <b>machine</b> <b>language</b> instruction contains an OpCode and, optionally, the specification {{of one or more}} operands. The operations of an OpCode may include arithmetic, data manipulation, logical operations, and program control.|$|R
5000|$|Counting <b>machine</b> <b>language</b> {{instructions}} {{would be}} misleading {{because they can}} do varying amounts of work in different ISAs. The [...] "instruction" [...] in the standard measurements is not a count of the ISA's actual <b>machine</b> <b>language</b> instructions, but a unit of measurement, usually based on {{the speed of the}} VAX computer architecture.|$|R
50|$|A code {{generator}} generates <b>machine</b> <b>language</b> {{instructions for the}} target processor.|$|R
5000|$|... {{reserves}} {{memory for}} string variables, and optionally, a <b>machine</b> <b>language</b> program ...|$|R
5000|$|... 1984 Joseph Nechvatal, <b>Machine</b> <b>Language</b> Book by Willoughby Sharp, 74 pages ...|$|R
50|$|The Pascal MicroEngine was {{a series}} of {{microcomputer}} products manufactured by Western Digital from 1979 through the mid-1980s, designed specifically to run the UCSD p-System efficiently. Compared to other microcomputers, which ran a <b>machine</b> <b>language</b> p-code interpreter, the Pascal Microengine had its interpreter implemented in microcode. So, p-code was, effectively, its native <b>machine</b> <b>language.</b>|$|R
40|$|This video {{presents}} a telepresence system which enables a human operator {{to explore a}} remote environment {{by means of a}} multimodal <b>man</b> <b>machine</b> interface and rollin’ JUSTIN as teleoperator. The <b>man</b> <b>machine</b> interface allows for bimanual, dexterous manipulation and, through two different operating modi of the <b>man</b> <b>machine</b> interface, wide area movement as well. A bimanual assembly task, consisting of grasping a connector, opening and closing it again, is shown in this video...|$|R
50|$|Malbolge is <b>machine</b> <b>language</b> for a ternary virtual machine, the Malbolge interpreter.|$|R
5000|$|An {{input tape}} {{containing}} all the <b>machine</b> <b>language</b> {{programs at the}} installation.|$|R
5000|$|... 1978, with Jack Dennis and Joe Qualitz. <b>Machines,</b> <b>Languages,</b> and Computation. Prentice-Hall.|$|R
50|$|<b>Machine</b> <b>languages</b> and the {{assembly}} languages that represent them (collectively termed low-level programming languages) {{tend to be}} unique to {{a particular type of}} computer. For instance, an ARM architecture computer (such as may be found in a smartphone or a hand-held videogame) cannot understand the <b>machine</b> <b>language</b> of an x86 CPU that might be in a PC.|$|R
50|$|The {{earliest}} {{computers were}} often programmed {{without the help}} of a programming language, by writing programs in absolute <b>machine</b> <b>language.</b> The programs, in decimal or binary form, were read in from punched cards or magnetic tape or toggled in on switches on the front panel of the computer. Absolute <b>machine</b> <b>languages</b> were later termed first-generation programming languages (1GL).|$|R
40|$|In the IPTES {{project a}} dual {{language}} approach is proposed for overcoming both the problems {{derived from the}} use of a user-friendly, high-level, but notformally -defined language and from a lower-level, formal, but difficult-to-use language. The approach uses a user-friendly, high-level language as user interface and a lower-level, formal <b>language</b> as <b>machine</b> <b>language.</b> In this way the users can both access the IPTES environment through a nice interface and can profit from non-ambiguity-checks and proofs algorithms based on the formal kernel <b>machine</b> <b>language.</b> The correspondence between the two languages is built-in in the IPTES environment that provides a transparent mapping mechanism that relates the users specifications expressed by means of the high-level interface-language with the formal definitions expressed in the formal <b>machine</b> <b>language.</b> This paper presents the mapping mechanism that relates the current IPTES user interface (SA/RT [Ward& 85]) with the IPTES <b>machine</b> <b>language</b> (high-l [...] ...|$|R
40|$|This paper {{argues that}} through affording {{communications}} between machines and humans, <b>machine</b> <b>languages</b> become structures of media. To examine the argument, the paper selects a virtual city {{model of the}} Alphatown {{as a case study}} and draws on Roman Jakobson’s linguistic theory, at first analyses how the metalanguage functions via the mediums of listing and navigation in the Alphatown, then looks at how the affects of boredom, being lost and strangeness arise from the media infrastructures based upon metalanguage, and analyses where the poetic function lies in the transmission of affects and how the sensual and the material aspects of <b>machine</b> <b>languages</b> emerge thus functioning as poetic. With analysing the metalingual and poetic functions in a diagrammatic thought of <b>machine</b> <b>languages,</b> different levels of <b>machine</b> <b>languages</b> can be considered as media structures, while media structures manifest themselves as material and processual in the meantime...|$|R
50|$|It is also {{possible}} to program the HP 48 directly in <b>machine</b> <b>language.</b>|$|R
50|$|The computer's <b>machine</b> <b>language</b> {{consisted}} of 34 instructions, including arithmetical, logical and control instructions.|$|R
50|$|A {{programming}} language such as C, FORTRAN, or Pascal enables a programmer to write {{programs that are}} more or less independent from a particular type of computer. Such languages are considered high-level because they are closer to human languages and further from <b>machine</b> <b>languages.</b> In contrast, assembly languages are considered as low-level because they are very close to <b>machine</b> <b>languages.</b>|$|R
40|$|We give a {{disassembler}} for PET 2001 {{which is}} a popular personal computer using 6502 as a CPU. This assembler is written by <b>machine</b> <b>language.</b> Including a routine outputting to a dot printer, the memory size is 1067 bites. Furthermore, we give a method of loading a <b>machine</b> <b>language</b> program from the casette tape recorder into the BASIC TEXT area...|$|R
50|$|MLX is {{a series}} of <b>machine</b> <b>language</b> entry {{utilities}} published by the magazines COMPUTE! and COMPUTE!'s Gazette, as well as books from COMPUTE! Publications. These programs were designed to allow relatively easy entry of the type-in <b>machine</b> <b>language</b> listings that were often included in these publications. Versions were available for the Commodore 64, PET, VIC-20, Atari 8-bit family and Apple II.|$|R
5000|$|An {{input tape}} to contain all the <b>machine</b> <b>language</b> {{programs}} - unchanged, new or reassembled.|$|R
5000|$|... loads <b>machine</b> <b>language</b> {{program from}} cassette. If no name is specified, the next program is loaded ...|$|R
5000|$|A {{machine code}} monitor ( [...] <b>machine</b> <b>language</b> monitor) is {{software}} {{that allows a}} user to enter commands to view and change memory locations on a computer, with options to load and save memory contents from/to secondary storage. Some full-featured machine code monitors provide detailed control ("single-stepping") of the execution of <b>machine</b> <b>language</b> programs (much like a debugger), and include absolute-address code assembly and disassembly capabilities.|$|R
5000|$|<b>Machine</b> <b>language</b> or <b>machine</b> code, {{a set of}} {{instructions}} executed directly by a computer's central processing unit ...|$|R
50|$|Methods {{have been}} {{proposed}} to use the operational semantics of <b>machine</b> <b>languages</b> to automatically generate verification condition generators.|$|R
5000|$|... {{a way to}} {{interface}} to <b>machine</b> <b>language</b> code, which could be passed parameters using the BASIC09 calling sequence ...|$|R
