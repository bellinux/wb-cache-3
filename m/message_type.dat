218|698|Public
25|$|Message type: This field {{identifies}} the handshake <b>message</b> <b>type.</b>|$|E
25|$|Ground system {{provision}} {{is the responsibility}} of either a participating ANSP or an aircraft operator. Aircraft operators often contract out the function to either DSP or to a separate service provider. Messages from aircraft, especially automatically generated ones, can be pre-configured according to <b>message</b> <b>type</b> so that they are automatically delivered to the appropriate recipient just as ground-originated messages can be configured to reach the correct aircraft.|$|E
2500|$|Another {{approach}} {{that can be}} used with some languages involves having different data structures, but all have the initial fields, including the next (and prev if double linked list) references in the same location. [...] After defining separate structures for each type of data, a generic structure can be defined that contains the minimum amount of data shared by all the other structures and contained at the top (beginning) of the structures. [...] Then generic routines can be created that use the minimal structure to perform linked list type operations, but separate routines can then handle the specific data. [...] This approach is often used in message parsing routines, where several types of messages are received, but all start with the same set of fields, usually including a field for <b>message</b> <b>type.</b> [...] The generic routines are used to add new messages to a queue when they are received, and remove them from the queue in order to process the message. [...] The <b>message</b> <b>type</b> field is then used to call the correct routine to process the specific type of message.|$|E
40|$|Abstract. Agent {{communication}} languages (ACLs) invoke {{speech act}} theory and define individual <b>message</b> <b>types</b> {{by reference to}} particular combinations of beliefs and desires of the speaker (feasibility preconditions). Even when the mental states are restricted to a small set of nested beliefs, {{it seems that there}} might be a very large number of different possible preconditions, and therefore a very large number of different <b>message</b> <b>types.</b> With some constraints on the mental attitude of the speaker, we enumerate the possible belief states that could serve as preconditions for individual <b>message</b> <b>types,</b> and we identify how these states correspond to different possible <b>message</b> <b>types.</b> We then compare these with FIPAâ€™s primitive <b>message</b> <b>types.</b> Our approach clarifies the nature of core <b>message</b> <b>types</b> in an ACL, and perhaps settles issues concerning just how many, and what types of, speech acts should be seen as primitive in such languages. ...|$|R
30|$|The {{following}} <b>message</b> <b>types</b> {{are used}} by our adaptive protocol.|$|R
50|$|SWIFT <b>Message</b> <b>types</b> are {{the format}} or schema {{used to send}} {{messages}} to financial institutions on the SWIFT (Society for Worldwide Interbank Financial Telecommunication) network. The original <b>message</b> <b>types</b> were developed by SWIFT and retrospectively made into an ISO standard, ISO 15022. This was later supplemented by a XML based version under ISO 20022.|$|R
5000|$|The <b>Message</b> <b>Type</b> {{indicates}} the ISUP <b>message</b> <b>type.</b> The presence and {{form of the}} remaining 3 components are determined by this <b>message</b> <b>type.</b>|$|E
50|$|A 1905.1 device {{can also}} request Link Metrics from another 1905.1 device by {{generating}} a Link Metric Query message (<b>Message</b> <b>type</b> 0x0005). The requested device will respond with a Link Metric Response message (<b>Message</b> <b>type</b> 0x0006).|$|E
50|$|The <b>Message</b> <b>Type</b> Indicator is a 4 digit {{numeric field}} which {{indicates}} the overall function of the message. A <b>Message</b> <b>Type</b> Indicator includes the ISO 8583 version, the Message Class, the Message Function and the Message Origin, as described below.|$|E
5000|$|In more detail, MIDI 1.0 defines several basic <b>message</b> <b>types</b> of channel messages: ...|$|R
40|$|Formally Deprecating Some ICMPv 4 <b>Message</b> <b>Types</b> A {{number of}} ICMPv 4 <b>message</b> <b>types</b> have become {{obsolete}} in practice, but {{have never been}} formally deprecated. This document deprecates such ICMPv 4 <b>message</b> <b>types,</b> thus cleaning up the corresponding IANA registry. Additionally, it updates RFC 792 and RFC 950, obsoletes RFC 1788, and requests the RFC Editor to change the status of RFC 1788 to Historic. Status of This Memo This is an Internet Standards Track document. This document {{is a product of}} the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by th...|$|R
5000|$|Any <b>message</b> <b>types</b> and {{contents}} can be used: HTML, XML, SOAP, JSON, REST, etc.|$|R
5000|$|<b>Message</b> <b>type</b> (MT) - Specifies {{the type}} of a layer 3 message out of the Q.931-defined <b>Message</b> <b>type</b> set for call control (e.g. SETUP). There are {{messages}} defined for the call setup, the call release and the control of call features.|$|E
5000|$|Discovery (<b>Message</b> <b>Type</b> 0x0000) {{to detect}} direct 1905.1 neighbors ...|$|E
5000|$|Message type: This field {{identifies}} the handshake <b>message</b> <b>type.</b>|$|E
5000|$|... the {{receiver}} specifies which <b>message</b> <b>types</b> are permitted, and sends this permission {{data to the}} sender, ...|$|R
5000|$|BEEP defines 5 <b>message</b> <b>types</b> {{to allow}} {{most of the}} {{application}} protocols patterns needed. They are the following: ...|$|R
5000|$|RMA {{operates}} by managing which <b>message</b> <b>types</b> {{are permitted}} to be exchanged between users of a SWIFT service: ...|$|R
50|$|The <b>message</b> <b>type</b> {{defines the}} {{function}} of each DTAP message.|$|E
5000|$|Notification (<b>Message</b> <b>Type</b> 0x0001) {{to inform}} network devices about a {{topology}} change ...|$|E
50|$|The <b>message</b> <b>type</b> may be {{followed}} by various information elements depending on the protocol.|$|E
40|$|Dynamic messages, as {{proposed}} in [Nis 98], are first-class expressions {{that may occur}} as messages within programs: being first-class, they may dynamically be bound to program variables, and evaluated to "ordinary" messages during the computation. We present an extension of Abadi and Cardelli's typed calculus FOb !: [AC 96] and a type system that give provision for dynamic <b>messages.</b> The new <b>type</b> system retains the flexibility and expressive power of the original system of [Nis 98] while relying on {{a new class of}} <b>types,</b> called <b>message</b> <b>types,</b> to capture the desired <b>typing</b> of dynamic <b>messages.</b> We prove <b>type</b> soundness and the existence of minimum types for the new system. We also study the formal relationships between object <b>types</b> and <b>message</b> <b>types,</b> and discuss how <b>message</b> <b>types</b> can be encoded in terms of object types. 1 Introduction In most-object oriented languages messages are formed around a method label [...] a constant that identifies the method to be invoked [...] and a list of arguments fo [...] ...|$|R
50|$|XML/EDIFACT is an Electronic Data Interchange (EDI) format used in Business-to-business transactions. It allows EDIFACT <b>message</b> <b>types</b> {{to be used}} by XML systems.|$|R
3000|$|... {{for both}} models. The FG is {{depicted}} in Figure 3. We shortly describe the presented factor nodes and <b>message</b> <b>types</b> presented in the FG.|$|R
5000|$|Query/Response (<b>Message</b> <b>Type</b> 0x0002 and 0x0003) {{to get the}} {{topology}} {{database of}} another 1905.1 device ...|$|E
50|$|The {{following}} is a table specifying the <b>message</b> <b>type</b> and processing code for each transaction type.|$|E
5000|$|The Mandatory fixed part, when present, {{contains}} the mandatory, fixed-length parameters {{associated with the}} <b>message</b> <b>type.</b>|$|E
50|$|SWIFT {{messages}} {{consist of}} five {{blocks of the}} data including three headers, message content, and a trailer. <b>Message</b> <b>types</b> are crucial to identifying content.|$|R
5000|$|Although ISO 15022 <b>Message</b> <b>Types</b> are {{different}} in their structure than the SWIFT MT, the naming convention remains the same. The following example will illustrate: ...|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2001). All Rights Reserved. This memo resolves a duplication in the assignment of RSVP <b>Message</b> <b>Types,</b> by changing the <b>Message</b> <b>Types</b> assigned by RFC 2747 to Challenge and Integrity Response messages...|$|R
5000|$|... byte #8 (0x14) = <b>Message</b> <b>Type</b> ID - 0x14 (20) defines an AMF0 encoded command message.|$|E
5000|$|The Optional part, when present, {{contains}} the optional parameters permitted {{to be included}} in the <b>message</b> <b>type.</b>|$|E
5000|$|... {{the sender}} checks the <b>message</b> <b>type</b> against the {{permission}} data before {{sending a message}} to the receiver.|$|E
50|$|Synchronization and {{management}} of a PTP system is achieved through the exchange of messages across the communications medium. To this end, PTP uses the following <b>message</b> <b>types.</b>|$|R
40|$|Optimised Link State Routing (OLSR) is {{a popular}} {{protocol}} for use in MANET networks. In this paper, we investigate the different impacts of tuning refresh interval timers on OLSR performance under various scenarios (varying node density and node speed). Based on the simulation results with NS 2, we find that although reducing refresh intervals could improve OLSRâ€™s performance, the intervals for some <b>message</b> <b>types</b> (HELLO <b>messages)</b> have a bigger impact on OLSR performance than for other <b>message</b> <b>types.</b> We find {{that the impact of}} the interval timer grows with increased network mobility and node density...|$|R
50|$|Several {{extensions}} {{have been}} published, defining new ICMPv6 <b>message</b> <b>types</b> {{as well as}} new options for existing ICMPv6 <b>message</b> <b>types.</b> Neighbor Discovery Protocol (NDP) is a node discovery protocol in IPv6 which replaces and enhances functions of ARP. Secure Neighbor Discovery (SEND) is an extension of NDP with extra security. Multicast Listener Discovery (MLD) is used by IPv6 routers for discovering multicast listeners on a directly attached link, much like Internet Group Management Protocol (IGMP) is used in IPv4. Multicast Router Discovery (MRD) allows discovery of multicast routers.|$|R
