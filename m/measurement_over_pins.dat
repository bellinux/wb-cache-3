2|7100|Public
5000|$|<b>Measurement</b> <b>over</b> <b>pins</b> : Measurement of the {{distance}} taken over a pin positioned in a tooth space and a reference surface. The reference surface may be the reference axis of the gear, a [...] or either one or two pins positioned in the tooth space or spaces opposite the first. This measurement is used to determine tooth thickness.|$|E
40|$|<b>Measurement</b> <b>over</b> <b>pins</b> is an {{effective}} way to gauge and control the quality for the manufacture of gears. However, the conventional calculation process for the dimension of over pins is not convenient and accurate enough to meet the requirement of current engineering design. In this paper, with the help of MATLAB, different algorithms are compared and presented. It is found that the matrix method is not accurate and the computer system is easy to crash. The convergence speed of Bisection method is slow and precision level is not accurate enough. The Newton&# 039;s method and Secant method are better approaches for the reverse computation of involute function. Compared with the conventional calculation method and the simulation of SOLIDWORKS, it is confirmed that the Newton&# 039;s method and Secant method are correct. All in all, the methods proposed in this paper enhance the efficiency and accuracy level for the calculation of gear system...|$|E
5000|$|Knocking <b>over</b> <b>pins</b> {{with the}} shooter's own cue ball {{before hitting the}} opponent's cue ball; ...|$|R
5000|$|Knocking <b>over</b> <b>pins,</b> {{by any of}} the {{acceptable}} prescribed manners, earns cumulative points as follows: ...|$|R
50|$|The goal of {{the game}} is to earn a {{required}} number of points, before one's opponent does, by using one's cue ball to cause the opponent's cue ball to knock <b>over</b> <b>pins</b> (and to not do so with one's own cue ball), and by contacting the red object ball with either cue ball, after one's own cue ball has contacted that of the opponent, and/or by causing the object ball to knock <b>over</b> <b>pins,</b> again after one's own cue ball has contacted that of the opponent.|$|R
50|$|Knocking <b>over</b> <b>pins</b> {{with the}} object ball without hitting the opponent's cue ball first, or with one's own cue ball, does not earn the shooter any points, {{and in the}} latter case is a foul that awards points to the opponent.|$|R
50|$|There are {{a number}} of ways in which this game can be won, either by {{reaching}} an agreed number of knocked <b>over</b> <b>pins</b> (usually between 20 and 40), by throwing eight balls and meeting a variety of challenges and so on.|$|R
5000|$|The term [...] "ice weasel" [...] {{appeared}} {{earlier in}} a line which Matt Groening fictionally attributed to Friedrich Nietzsche: [...] "Love is a snowmobile racing across the tundra and then suddenly it flips <b>over,</b> <b>pinning</b> you underneath. At night, the ice weasels come." ...|$|R
5000|$|Knocking <b>over</b> <b>pins</b> {{with the}} shooter's own cue ball, after having hit the opponent's cue ball—this foul awards the point values of those pins to the opponent. (In player jargon this is {{referred}} to as [...] "drinking" [...] one's points, as they are lost like the contents of an empty glass); opponent does not receive [...] (Note: Knocking <b>over</b> <b>pins</b> with the red object ball on an otherwise legal shot is not a foul, and has no effect on the score (i.e., provided that the opponent's cue ball was struck first by one's own cue ball, either cue ball can be used to drive the object ball into the pins, provided that both cue balls make initial contact with each other.) ...|$|R
40|$|Computer program, TACTI, {{has been}} {{developed}} to calculate transient and steady-state temperatures, pressures, and flow in cooled turbine blade or vane with impingement insert. Coolant-side heat-transfer coefficients are calculated internally in program, with user specifying 1 of 3 modes of heat transfer at each station: impingement (including effect of crossflow); or forced convection <b>over</b> <b>pin</b> fins...|$|R
5000|$|... a blanca is {{declared}} if {{the ball}} does not knock <b>over</b> and <b>pins</b> ...|$|R
25|$|Disney has {{released}} numerous collector pins featuring the Muppets since 2004. These include Limited Edition pins, Hidden Mickey pin collections, mystery pin sets, 2008 pin sets promoting The Muppets, cast lanyard pins, and assorted individual rack <b>pins.</b> <b>Over</b> 100 <b>pins</b> displaying the characters {{have been released}} overall.|$|R
5000|$|... if {{the ball}} does not knock <b>over</b> any <b>pins</b> or just one, the throw is worth six points ...|$|R
5000|$|Direction <b>measurement</b> <b>over</b> the {{adjustment}} of the antenna, and recently; ...|$|R
5000|$|... {{describes}} Bashforth's chronograph {{that could}} make many <b>measurements</b> <b>over</b> long distances: ...|$|R
50|$|The player, using spin, {{launches}} {{the ball}} onto either {{the left or}} right long incline and to achieve a valid throw, has to knock over at least the small pin and one large pin. The ball the (ideally) rebounds from the back incline and knocks <b>over</b> more <b>pins.</b> <b>Pins</b> knocked <b>over</b> by other <b>pins</b> also count.|$|R
5000|$|... if {{the ball}} knocks <b>over</b> two <b>pins,</b> the throw is worth seven points; any extra pin is worth an {{additional}} point ...|$|R
50|$|The {{following}} table shows {{average of}} <b>measurements</b> <b>over</b> the period 2005 to 2014.|$|R
40|$|The {{importance}} of {{accounting for the}} temperature dependence of air properties in numerical simulations of air flows <b>over</b> <b>pinned</b> heat sinks is demonstrated by comparisons with recently published experiments. Numerical simulations, based on a conjugate heat transfer analysis, using the RANS-based modified k-ω turbulence model, with temperature-dependent air properties, are shown to be in significantly better agreement with experimental measurements of pressure drop, heat transfer coefficient, and heat sink base temperature, than those which employ constant air properties...|$|R
3000|$|... {{collects}} the space-domain <b>measurements</b> <b>over</b> all active MIMO links, for {{the given}} i-th pilot sub-carrier.|$|R
5000|$|Low {{numbers of}} CD4+ cells, on {{two or more}} <b>measurements</b> <b>over</b> at least six weeks: ...|$|R
25|$|The filter {{will then}} prefer the {{information}} from the first <b>measurements</b> <b>over</b> the information already in the model.|$|R
3000|$|Thus, for {{calculating the}} {{directivity}} index of a coaxial loudspeaker system {{we just need}} few <b>measurements</b> <b>over</b> [...]...|$|R
50|$|Evaporation rate is {{determined}} by a sequence of <b>measurements</b> <b>over</b> a set time interval, usually every 24 hours.|$|R
50|$|The filter {{will then}} prefer the {{information}} from the first <b>measurements</b> <b>over</b> the information already in the model.|$|R
25|$|An infamous {{moment when}} bowler Mary Schmidt failed to knock <b>over</b> any <b>pins</b> {{has been cited}} as the moment Bowling for Dollars jumped the shark.|$|R
50|$|Annual {{growth rate}} (AGR) {{is the change}} in the value of a <b>measurement</b> <b>over</b> the period of a year.|$|R
50|$|The {{acceptable}} {{means of}} knocking <b>over</b> <b>pins</b> include any {{that result from}} hitting the opponent's object ball first with one's own, and not hitting the pins with one's own cue ball. For example, one can simply send the opponent's cue ball into the pins, send the opponent's cue ball into the red object ball and have the object ball hit the pins, or hit the opponent's cue ball and then the object ball with one's own cue ball and send the object ball into the pins.|$|R
25|$|The {{upper end}} of {{multimeter}} measurement ranges varies considerably; <b>measurements</b> <b>over</b> perhaps 600volts, 10amperes, or 100megohms may require a specialized test instrument.|$|R
30|$|Repeated-measures ANOVA (Tukey post-tests) was {{performed}} to test the variations of <b>measurements</b> <b>over</b> time, i.e., between the six replays (R 1.5 to R 10).|$|R
40|$|A graph of mean <b>measurement</b> <b>over</b> time {{is one of}} {{the most}} {{commonly}} used statistical graphs for data exploration and presentation. It can be as simple as a line plot, or can be a complex graph involving lots of annotation. This paper illustrates some useful techniques provided by SAS/GRAPH and ODS Statistical Graphics to generate graphical displays of mean <b>measurement</b> <b>over</b> time. Programs using these techniques are examined in detail. The examples start from a basic plot, gradually evolve to a complex plot...|$|R
40|$|Recently, Moore, Russell and Schulman {{showed that}} quantum {{measurements}} of single coset {{states in the}} symmetric group yield exponentially little information about the Hidden Subgroup Problem in the case relevant to Graph Isomorphism. Extending their techniques to multiregister Fourier sampling, Moore and Russell showed that entangled <b>measurements</b> <b>over</b> pairs of registers yield superpolynomially little information, and conjectured that entangled <b>measurements</b> <b>over</b> Θ(n n) registers are necessary. Here we prove this conjecture. This significantly restricts the types of possible quantum algorithms for Graph Isomorphism...|$|R
25|$|Strike: hitting <b>over</b> all the <b>pins</b> {{within one}} turn.|$|R
50|$|The {{upper end}} of {{multimeter}} measurement ranges varies considerably; <b>measurements</b> <b>over</b> perhaps 600 volts, 10 amperes, or 100 megohms may require a specialized test instrument.|$|R
40|$|Abstract—Single-ISA {{heterogeneous}} multi-cores {{consisting of}} small (e. g., in-order) and big (e. g., out-of-order) cores dra-matically improve energy- and power-efficiency by scheduling workloads {{on the most}} appropriate core type. A significant body of recent work has focused on improving system throughput through scheduling. However, none of the prior work has looked into fairness. Yet, guaranteeing that all threads make equal progress on heterogeneous multi-cores is of utmost importance for both multi-threaded and multi-program workloads to improve performance and quality-of-service. Furthermore, modern oper-ating systems affinitize workloads to cores (pinned scheduling) which dramatically affects fairness on heterogeneous multi-cores. In this paper, we propose fairness-aware scheduling for single-ISA heterogeneous multi-cores, and explore two flavors for doing so. Equal-time scheduling runs each thread or workload on each core type for an equal fraction of the time, whereas equal-progress scheduling strives at getting equal amounts of work done on each core type. Our experimental results demonstrate an average 14 % (and up to 25 %) performance improvement <b>over</b> <b>pinned</b> scheduling through fairness-aware scheduling for homogeneous multi-threaded workloads; equal-progress schedul-ing improves performance by 32 % on average for heteroge-neous multi-threaded workloads. Further, we report dramatic improvements in fairness over prior scheduling proposals for multi-program workloads, while achieving system throughput comparable to throughput-optimized scheduling, and an average 21 % improvement in throughput <b>over</b> <b>pinned</b> scheduling. Keywords—heterogeneous multi-core, fairness-aware schedul-ing I...|$|R
40|$|Single-ISA {{heterogeneous}} multi-cores {{consisting of}} small (e. g., in-order) and big (e. g., out-of-order) cores dramatically improve energy- and power-efficiency by scheduling workloads {{on the most}} appropriate core type. A significant body of recent work has focused on improving system throughput through scheduling. However, none of the prior work has looked into fairness. Yet, guaranteeing that all threads make equal progress on heterogeneous multi-cores is of utmost importance for both multi-threaded and multi-program workloads to improve performance and quality-of-service. Furthermore, modern operating systems affinitize workloads to cores (pinned scheduling) which dramatically affects fairness on heterogeneous multi-cores. In this paper, we propose fairness-aware scheduling for single-ISA heterogeneous multi-cores, and explore two flavors for doing so. Equal-time scheduling runs each thread or workload on each core type for an equal fraction of the time, whereas equal-progress scheduling strives at getting equal amounts of work done on each core type. Our experimental results demonstrate an average 14 % (and up to 25 %) performance improvement <b>over</b> <b>pinned</b> scheduling through fairness-aware scheduling for homogeneous multi-threaded workloads; equal-progress scheduling improves performance by 32 % on average for heterogeneous multi-threaded workloads. Further, we report dramatic improvements in fairness over prior scheduling proposals for multi-program workloads, while achieving system throughput comparable to throughput-optimized scheduling, and an average 21 % improvement in throughput <b>over</b> <b>pinned</b> scheduling...|$|R
