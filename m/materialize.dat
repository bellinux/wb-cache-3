5540|8910|Public
5|$|Most major {{forecasting}} agencies predicted below-average {{activity to}} occur this season {{due to an}} expected strong El Niño; the El Nino failed to <b>materialize,</b> though unfavorable conditions still became established across the basin.|$|E
5|$|October 1-4, 2015 - Hurricane Joaquin briefly {{threatens to}} {{approach}} or strike the New York metropolitan area, forcing New Jersey and New York to begin storm preparations. However, they never <b>materialize,</b> as Joaquin instead turned away long before affecting the shoreline.|$|E
5|$|A North American {{version was}} {{announced}} as EarthBound 64, {{but did not}} <b>materialize</b> when the 60 percent-complete Japanese release was cancelled in August 2000 in reprioritization leading up to Project Dolphin (the code name of the GameCube). At the time, the game was estimated to need another two years of work.|$|E
40|$|<b>Materialized</b> view is used {{in large}} data centric {{applications}} to expedite query processing. The efficiency of <b>materialized</b> view depends on degree of result found against the queries over the existing <b>materialized</b> views. <b>Materialized</b> views are constructed following different methodologies. Thus {{the efficacy of the}} <b>materialized</b> views depends on the methodology based on which these are formed. Construction of <b>materialized</b> views are often time consuming and moreover after a certain time the performance of the <b>materialized</b> views degrade when the nature of queries change. In this situation either new <b>materialized</b> views could be constructed from scratch or the existing views could be upgraded. Fresh construction of <b>materialized</b> views has higher time complexity hence the modification of the existing views is a better solution. Modification process of <b>materialized</b> view is classified under <b>materialized</b> view maintenance scheme. <b>Materialized</b> view maintenance is a continuous process and the system could be tuned to ensure a constant rate of performance. If a <b>materialized</b> view construction process is not supported by <b>materialized</b> view maintenance scheme that system would suffer from performance degradation. In this paper a new <b>materialized</b> view maintenance scheme is proposed using markovs analysis to ensure consistent performance. Markovs analysis is chosen here to predict steady state probability over initial probability...|$|R
40|$|A {{conventional}} <b>materialized</b> view blindly <b>materializes</b> {{and maintains}} all rows of a view, even rows that are never accessed. We propose {{a more flexible}} materialization strategy aimed at reducing storage space and view maintenance costs. A dynamic <b>materialized</b> view selectively <b>materializes</b> only a subset of rows, for example, the most frequently accessed rows. One or more control tables {{are associated with the}} view and define which rows are currently <b>materialized.</b> The set of <b>materialized</b> rows can be changed dynamically, either manually or automatically by an internal cache manager using a feedback loop. Dynamic execution plans are generated to decide whether the view is applicable at run time. Experimental results in Microsoft SQL Server show that compared with conventional <b>materialized</b> views, dynamic <b>materialized</b> views greatly reduce storage requirements and maintenance costs while achieving better query performance with improved buffer pool efficiency...|$|R
40|$|We {{propose a}} new type of <b>materialized</b> view called a {{partially}} <b>materialized</b> view. A partially mate-rialized view only <b>materializes</b> some of the rows, for example, the most frequently accessed rows, which reduces storage space and view maintenance effort. One or more control tables are associated with the view and define which rows are currently <b>materialized.</b> As a result, one can easily change which rows of the view are stored and maintained. We show how to extend view matching and maintenance algorithms to partially <b>materialized</b> views and outline several potential applications of the new view type. Experimental results in Microsoft SQL Server show that compared with fully <b>materialized</b> views, partially <b>materialized</b> views have lower storage requirements, better buffer pool efficiency, better query performance, and significantly lower maintenance costs...|$|R
5|$|After {{occupying the}} capital, Habré {{consolidated}} power by occupying {{the rest of}} the country. In barely six weeks, he conquered southern Chad, destroying the FAT, Kamougué's militia; Kamougué's hopes for Libyan help failed to <b>materialize.</b> The rest of the country was conquered, {{with the exception of the}} Tibesti.|$|E
5|$|Fifty-six {{games into}} his 2001–02 {{season with the}} Rangers, Sather dealt Malhotra to the Dallas Stars at the trade deadline, along with winger Barrett Heisten, in {{exchange}} for forwards Martin Rucinsky and Roman Lyashenko. Although he had established himself as an effective forechecker and defensive forward, Malhotra did not <b>materialize</b> into the offensive player the Rangers hoped he would be.|$|E
5|$|In November 2004, all 45 {{episodes of}} the Playhouse, plus six episodes {{that had never}} before been {{released}} on home video, were released on DVD split between two box set collections. Reubens planned to re-release the DVDs with audio commentaries by the following year, but this has yet to <b>materialize.</b>|$|E
40|$|In {{this paper}} we present an {{analysis}} of the problem of determining optimal policies for updating distributed <b>materialized</b> views. We demonstrate the general application of <b>materialized</b> views, and define the concept of <b>materialized</b> view currency and allow a query to specify its currency requirement. We also allow a <b>materialized</b> view to be updated from either a base relation or another <b>materialized</b> view. This flexibility provides an opportunity for further reduction in the cost of maintaining distributed <b>materialized</b> views. We model the problem of optimal update policies to capture currency and policy constraints, replicated data, and various view update policies. The optimization incorporates a minimum-cost objective function as well as user's response time constraints. database, database views, <b>materialized</b> views, distributed databases, information...|$|R
40|$|AbstractMaterialized views {{evolve in}} order to meet the user's {{requirement}} in the dynamically changing data warehouse environment. Therefore, <b>materialized</b> view evolution approach focuses on choosing <b>materialized</b> views in the design process of data warehouses or maintaining a <b>materialized</b> view in response to data changes or to data sources changes and sometimes to monitor the DW quality under schema evolution. Although few researchers have addressed <b>materialized</b> view evolution problem for evolving an appropriate set of views. But, none of the surveys provides a classification of <b>materialized</b> view evolution approaches {{in order to}} identify their advantages and disadvantages. This survey tries to fill this gap. The present paper provides a review of model based <b>materialized</b> view evolution methods by identifying the three main dimensions namely; (i) Framework, (ii) Architecture and (iii) Model/Design Model, that are the basis in the classification of <b>materialized</b> view evolution methods. The goal of this paper is to provide a comparative study on model based <b>materialized</b> view evolution methods, by identifying respective potentials and limits...|$|R
40|$|In {{a typical}} data warehouse, <b>materialized</b> views {{are used to}} speed up query execution. Upon updates to the base {{relations}} in the warehouse, these <b>materialized</b> views must also be updated. The need to update these <b>materialized</b> views can {{have a negative impact}} on performance. First, it requires <b>materialized</b> view updates in addition to the base relation updates, and second, it renders the <b>materialized</b> views unavailable for querying during the update window. This performance problem is exacerbated in parallel RDBMSs, where simple single-node updates to base relations can give rise to expensive all-node updates on the <b>materialized</b> views. In this paper, we investigate the use of auxiliary relations to speed up <b>materialized</b> join view maintenance in a parallel RDBMS. Both analytical results and an implementation of our approach in a commercial parallel RDBMS show that the use of auxiliary relations significantly decreases the system resources required for updates in the presence of <b>materialized</b> views, and that this benefit increases with the number of processors in the system. 1...|$|R
5|$|The World Hockey Association {{had envisioned}} that franchises in Calgary and Edmonton would create an {{effective}} rivalry. When the Calgary Broncos {{were unable to}} start their inaugural season, the Oilers were briefly renamed the Alberta Oilers {{with the intention of}} splitting games between the two cities. This plan failed to <b>materialize.</b>|$|E
5|$|An {{anticipated}} {{backlash against}} the governing PCs failed to <b>materialize,</b> as Premier Ed Stelmach extended his party's seat total to 72 from 60. While the Alliance finished second in eight ridings across the province, they failed to win any seats as Hinman lost his Cardston-Taber-Warner riding by just 39 votes. Running candidates in 61 of the province's 83 ridings, the Alliance took 6.78% of the vote, fourth behind the PCs, Liberals and New Democrats.|$|E
5|$|Back in Kristiansund, Løvold {{started working}} {{with the idea of}} {{building}} a subsea road tunnel from Kristiansund to the mainland. He discussed the issue in Foreningen Kristiansunderen where it received support. Løvold was an important enthusiast for the fixed link project, which would <b>materialize</b> as the Kristiansund and Frei Fixed Link in 1992. The local press dubbed him the fixed link general. In 1955 he organized an inspection of Freifjorden; using echo sounding it was possible to survey the depth of the fjord. Afterwards he took contact with County Governor Olav Oksvik and the two started working towards implementing the plans.|$|E
40|$|A data {{warehouse}} stores <b>materialized</b> views {{generated from the}} underlying source data. <b>Materialized</b> views are used to speed up query processing on large amounts of data. These views need to be maintained in response to updates in the source data. This is often done, for reasons of efficiency, using incremental techniques rather than recomputing the view from scratch. In this paper we investigate the problem of incremental maintenance of <b>materialized</b> views in {{data warehouse}}s. We consider views defined by relational algebraic operators and aggregate functions. We show that a <b>materialized</b> view can be maintained without accessing the view itself by <b>materializing</b> and maintaining additional relations. These relations are derived from the intermediate results of the view computation. We first give an algorithm for determining what additional relations need to be <b>materialized</b> {{in order to maintain}} a <b>materialized</b> view incrementally. We then propose an efficient incremental algorithm for updating [...] ...|$|R
40|$|In a data {{warehouse}} system, maintaining <b>materialized</b> views can speed up query processing. These views {{need to be}} maintained in response to updates in the base relations. This is often done for reasons of data currency, using incremental techniques rather than re-computing the view from scratch. However, when the data source changes, the views in the warehouse can become inconsistent with the base data. Thus, maintenance of <b>materialized</b> views in the warehouse consistent with the base relations is a challenging task. In this paper, we propose an approach to maintain a <b>materialized</b> view without accessing the base relations by <b>materializing</b> and maintaining additional relations, known as auxiliary relations. In our approach, these auxiliary relations are derived based on the functional dependencies that hold on base relations, <b>materialized</b> view, and the key participation of the base relations in the <b>materialized</b> view. This approach helps in reducing the storage space and improves the efficiency of view maintenance. We present an algorithm to derive those auxiliary relations and determine which auxiliary relations need to be <b>materialized</b> {{in order to maintain}} a <b>materialized</b> view incrementally. We also present the cost model that enables the evaluation of the total cost and benefit involved in <b>materializing</b> auxiliary relations...|$|R
5000|$|Here, {{unlike the}} regular {{conflict}} graph, which has edges only for <b>materialized</b> conflicts, all conflicts, both <b>materialized</b> and non-materialized, {{are represented by}} edges.|$|R
5|$|Chandler {{believed}} that he had enough support at the 1944 Democratic National Convention to be nominated as President Roosevelt's running mate for the upcoming presidential election. That support failed to <b>materialize,</b> however, after the Kentucky delegation and Earle C. Clements in particular, refused to back his nomination. The convention nominated Harry S Truman as Roosevelt's running mate. Truman became president upon Roosevelt's death in 1945, and Chandler never forgave Clements for costing him {{the chance to be}} president.|$|E
5|$|Details of {{the speech}} were {{published}} the next day by the radical Daily News (founded in 1846 by Charles Dickens), and questions were raised in the House of Commons, particularly by Sir Frederick Banbury, a Conservative MP and sponsor of a bill aimed at ending vivisection demonstrations. Bayliss demanded a public apology, and when by 12 May it had failed to <b>materialize</b> he issued a writ for libel.|$|E
5|$|House of Music was {{released}} on November 19, 1996, by Mercury Records. It charted for 31 weeks on the Billboard 200, peaking at number 32, and was certified Platinum by the Recording Industry Association of America (RIAA). The record also received widespread acclaim from critics, who praised Tony! Toni! Toné!'s musicianship and songwriting. An expected international tour to promote the album did not <b>materialize</b> amid growing tensions within the group stemming from creative differences, and they disbanded shortly after its release to pursue separate music careers.|$|E
40|$|A WebView is a {{web page}} {{automatically}} created from base data typically {{stored in a}} DBMS. Given the multi-tiered architecture behind database-backed web servers, we {{have the option of}} <b>materializing</b> a WebView inside the DBMS, at the web server, or not at all, always computing it on the fly (virtual). Since WebViews must be up to date, <b>materialized</b> WebViews are immediately refreshed with every update on the base data. In this paper we compare the three materialization policies (<b>materialized</b> inside the DBMS, <b>materialized</b> at the web server and virtual) analytically, through a detailed cost model, and quantitatively, through extensive experiments on an implemented system. Our results indicate that <b>materializing</b> at the web server is a more scalable solution and can facilitate an order of magnitude more users than the virtual and <b>materialized</b> inside the DBMS policies, even under high update workloads. ...|$|R
40|$|<b>Materialized</b> {{views and}} indexes are {{physical}} structures for accelerating data access that are casually used in data warehouses. However, these data structures generate some maintenance overhead. They also {{share the same}} storage space. Most existing studies about <b>materialized</b> view and index selection consider these structures separately. In this paper, we adopt the opposite stance and couple <b>materialized</b> view and index selection to take view-index interactions into account and achieve efficient storage space sharing. Candidate <b>materialized</b> views and indexes are selected through a data mining process. We also exploit cost models that evaluate the respective benefit of indexing and view materialization, and help select a relevant configuration of indexes and <b>materialized</b> views among the candidates. Experimental results show that our strategy performs better than an independent selection of <b>materialized</b> views and indexes. Keywords: Data mining, Cost models...|$|R
40|$|AbstractData Warehouse {{evolution}} {{is a critical}} problem in present scenario due to perpetual transactions and change in their structure arising out of continual evolving users’ requirements. Handling properly all type of changes is a crucial process as it forms the core component of the modern DSS. Therefore DW has to be updated periodically according to different type of evolution of information sources. The problem of evolving an appropriate set of views is subjected to as the <b>materialized</b> view evolution problem. Many different <b>materialized</b> view evolution methods have been proposed in the literature to address this issue. This paper provides a survey of <b>materialized</b> view evolution methods. The paper aims at studying the <b>materialized</b> view evolution in relational databases and data warehouses {{as well as in}} a distributed setting. It defines an evolutionary approach for highlighting the <b>materialized</b> view evolution problem by identifying the three main dimensions that are the basis in the classification of <b>materialized</b> view evolution methods namely; (i) Framework, (ii) Architecture and (iii) Model/Design Model. This study reviews architecture based <b>materialized</b> view evolution methods, by identifying respective potentials and limits...|$|R
5|$|In 1248, a Crusader {{fleet of}} 1,800 boats and ships arrived in Cyprus {{with the intent}} of {{launching}} a Seventh Crusade against the Muslims by conquering Egypt. Their commander, Louis IX, attempted to enlist the Mongols to launch a coordinated attack on Egypt, but when this failed to <b>materialize,</b> the Crusader force sailed to Damietta and the local population there fled as soon as they landed. When as-Salih Ayyub, who was in Syria at the time, heard of this, he rushed back to Egypt, avoiding Damietta, instead reaching Mansurah. There, he organized an army and raised a commando force which harassed the Crusaders.|$|E
5|$|In 1889 Schneller {{acquired}} 1,235 acres (5,000 dunam) in Bir Salem (today Kibbutz Netzer Sereni) {{in order}} to develop an agricultural school and land for settlement for his students and graduates. In 1906 another 890 acres (3,600 dunam) was added to the original parcel. Although the agricultural school did not <b>materialize,</b> the grain, fruits and vegetables produced by the farm supplemented the orphanage diet during the food shortages of World War I.|$|E
5|$|In mid-1932, {{after nine}} pictures, Tracy {{remained}} virtually {{unknown to the}} public. He considered leaving Fox once his contract was up for renewal, but a rise in his weekly rate to $1,500 convinced him to stay. He continued to appear in unpopular films, with Me and My Gal (1932) setting an all-time low attendance record for the Roxy Theatre in New York City. He was loaned to Warner Bros. for 20,000 Years in Sing Sing (1932), a prison drama co-starring Bette Davis. Tracy was hopeful {{that it would be}} his break-out role, but despite good reviews this failed to <b>materialize.</b>|$|E
5000|$|In PostgreSQL, version 9.3 and newer {{natively}} support <b>materialized</b> views. In version 9.3, a <b>materialized</b> view is not auto-refreshed, and is populated only at time {{of creation}} (unless [...] is used). It may be refreshed later manually using [...] In version 9.4, the refresh may be concurrent with selects on the <b>materialized</b> view if [...] is used.|$|R
40|$|<b>Materialized</b> views offer {{opportunities}} for significant performance gain in query evaluation by providing fast access to pi-e-computed data. The {{question of when}} and how to use a <b>materialized</b> view in processing agiven query is a difficult one attracting a significant amount of research. In previous works, only <b>materialized</b> views whose relations are contained in those of a query have been used and, as a result, certain potentially useful <b>materialized</b> views were excluded from consideration. Proposed in this paper are new ways of utilizing <b>materialized</b> views in answering a query with aggregation operations; Views including relations not referred to in the given query are utilized. We identify the conditions where a <b>materialized</b> view can be used in reformulating a query. Also presented are algorithms to find the most efficient reformulated query. The proposed conditions and corresponding algorithms provide significant and practical performance improvements o the data warehousing environment. 1...|$|R
40|$|We {{consider}} {{concurrency control}} problems {{that arise in}} the presence of <b>materialized</b> views. Consider a database system supporting <b>materialized</b> views to speed up queries. For a range of important applications (e. g. banking, billing, network management), transactions that access <b>materialized</b> views would like to get some consistency guarantees [...] -if a transaction reads a base relation after an update, and then reads a <b>materialized</b> view derived from the base relation, it expects to see the effect of the base update on the <b>materialized</b> view. If a transaction reads two views, it expects that the two views reflect a single consistent database state. Such guarantees are not easy to obtain, as <b>materialized</b> views become inconsistent upon updates to base relations. Immediate maintenance reestablishes consistency within the transaction that updates the base relation, but this consistency comes at the cost of delaying update transactions. Deferred maintenance has been proposed to avoid penalizing [...] ...|$|R
5|$|In the 70s, AI {{was subject}} to critiques and {{financial}} setbacks. AI researchers had failed to appreciate {{the difficulty of the}} problems they faced. Their tremendous optimism had raised expectations impossibly high, and when the promised results failed to <b>materialize,</b> funding for AI disappeared. At the same time, the field of connectionism (or neural nets) was shut down almost completely for 10 years by Marvin Minsky's devastating criticism of perceptrons.|$|E
5|$|On 12 December 1964, Barrel Roll was {{approved}} by Souvanna Phouma. The program originally consisted of only two U.S bombing sorties per week that were to be conducted {{by no more than}} four aircraft in each strike. Due {{to the nature of the}} American agreement with the Thai government (most U.S. strike aircraft flew from bases in Thailand), the aircraft had to first fly to South Vietnam, land, and then take off again for Laos. By 24 December, six armed reconnaissance missions were being conducted per day, but the hoped for reaction from Hanoi did not <b>materialize.</b>|$|E
5|$|Recommissioned on 17 November 1898, with Commander Charles S. Sperry in command, Yorktown sailed {{again for}} the Far East on 7 January 1899. Rumors of German machinations in Samoa {{lengthened}} Yorktowns stay at Hawaii from {{a few days to}} a few weeks; but, when the anticipated trouble failed to <b>materialize,</b> Yorktown resumed her voyage to the Philippine Islands. On 23 February, she arrived at Cavite Navy Yard, near Manila where patrolled to prevent gun-runners thought to be supplying guns and ammunition to the Insurrectos, Filipinos fighting for independence.|$|E
40|$|A data {{warehouse}} (DW) can be abstractly {{seen as a}} set of <b>materialized</b> views defined over a set of remote data sources. A DW is intended to satisfy a set of queries. The views <b>materialized</b> in a DW relate to each other in a complex manner, through common subexpressions, in order to guarantee high query performance and low view maintenance cost. DWs are time varying. As time passes new <b>materialized</b> views are added in order to satisfy new queries, or for performance reasons, while old queries are dropped. The evolution of a DW can result in a redundant set of <b>materialized</b> views. In this paper, we address the problem of detecting redundant <b>materialized</b> views in a given DW view selection, that is, <b>materialized</b> views that can be removed from DW without negatively affecting the query evaluation or the view maintenance process. Using an AND/OR dag representation for multiple queries and views, we first formalize the process of propagating source relation changes to the <b>materialized</b> views by exploiting common subexpressions between views and by using other <b>materialized</b> views that are not affected by these changes. Then, we provide an algorithm for detecting <b>materialized</b> views that are not needed in the process of propagating source relation changes to the DW. We also show how trivially redundant views can be identified in this process. Finally, we use these results to provide a procedure for detecting <b>materialized</b> views that are redundant in a DW. Our approach considers a broad class of views that includes grouping/aggregation views and is not dependent on a specific cost model. (C) 2001 Elsevier Science Ltd. All rights reserved...|$|R
40|$|Indices and <b>materialized</b> {{views are}} {{physical}} structures that accelerate data access in data warehouses. However, these data structures generate some maintenance overhead. They also {{share the same}} storage space. The existing studies about index and <b>materialized</b> view selection consider these structures separately. In this paper, we adopt the opposite stance and couple index and <b>materialized</b> view selection {{to take into account}} the interactions between them and achieve an efficient storage space sharing. We develop cost models that evaluate the respective benefit of indexing and view materialization. These cost models are then exploited by a greedy algorithm to select a relevant configuration of indices and <b>materialized</b> views. Experimental results show that our strategy performs better than the independent selection of indices and <b>materialized</b> views...|$|R
40|$|<b>Materialized</b> {{views are}} {{commonly}} used to improve the performance of aggregation queries by orders of magnitude. In contrast to regular tables, <b>materialized</b> views are not directly updateable by the user, but are indirectly synchronized by the database system itself. In this paper we present {{an overview of the}} maintenance strategies for ‘Automatic Summary Tables’, the <b>materialized</b> view implementation in IBM’s DB 2 /UDB database system. In the first part, we focus on the incremental maintenance method, providing a way to synchronize <b>materialized</b> views based on the joins of only the changes of the base tables (deltas) with all other tables of the view definition. The second part of the paper outlines optimization techniques to improve the full recomputation of a set of <b>materialized</b> views...|$|R
