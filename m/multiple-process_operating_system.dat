0|10000|Public
40|$|Abstract- Virtualization enables {{installation}} and running of multiple virtual machines {{on the same}} computer <b>system.</b> <b>Operating</b> <b>system</b> that communicates directly with hardware {{is known as the}} host <b>operating</b> <b>system</b> whereas virtual <b>operating</b> <b>systems</b> have all the features of a real <b>operating</b> <b>system,</b> but they run inside the host <b>operating</b> <b>system.</b> A virtual machine is separated from the computer hardware resources and it runs on the emulated hardware. Performance of the virtual <b>operating</b> <b>system</b> running on the same computer system hardware depends on the performance of the host <b>operating</b> <b>system.</b> In this paper we study how different host <b>operating</b> <b>systems</b> influence virtual machine performance. Windows XP®, Windows Vista ™ and Windows 7 ™ are used as host <b>operating</b> <b>systems</b> using Windows Vista as a virtual <b>operating</b> <b>system.</b> Performance measurement of the virtual <b>operating</b> <b>system</b> is done in the same controlled conditions for all three host <b>operating</b> <b>systems</b> using benchmark applications. Performance measurement results show that the virtual <b>operating</b> <b>system</b> has the best performance when Windows 7 is used as the host <b>operating</b> <b>system...</b>|$|R
50|$|The Pick <b>operating</b> <b>system</b> was a {{complete}} <b>operating</b> <b>system.</b> Prime Information was not an <b>operating</b> <b>system,</b> but a 4GL system that ran from the Prime PRIMOS <b>operating</b> <b>system.</b>|$|R
50|$|For example, Solaris Zones {{supports}} multiple guest <b>operating</b> <b>systems</b> running {{under the}} same <b>operating</b> <b>system</b> such as Solaris 10. Guest <b>operating</b> <b>systems</b> can use the same kernel level with the same <b>operating</b> <b>system</b> version, or can be a separate copy of the <b>operating</b> <b>system</b> with a different kernel version using Solaris Kernel Zones. Solaris native Zones also requires that the host <b>operating</b> <b>system</b> is a version of Solaris; other <b>operating</b> <b>systems</b> from other manufacturers are not supported. However, Solaris Branded Zones {{would need to be}} used to have other <b>operating</b> <b>systems</b> as zones.|$|R
50|$|Because of {{the large}} number and variety of {{available}} Linux distributions, they are all grouped under a single entry; see comparison of Linux distributions for a detailed comparison. There are also a variety of BSD <b>operating</b> <b>systems</b> and DOS <b>operating</b> <b>systems,</b> covered in comparison of BSD <b>operating</b> <b>systems</b> and comparison of DOS <b>operating</b> <b>systems.</b> For information on views of each <b>operating</b> <b>system,</b> see <b>operating</b> <b>system</b> advocacy.|$|R
50|$|An {{embedded}} <b>operating</b> <b>system</b> is an <b>operating</b> <b>system</b> for {{embedded computer}} <b>systems.</b> These <b>operating</b> <b>systems</b> {{are designed to}} be compact, efficient at resource usage, and reliable, forsaking many functions that non-embedded computer <b>operating</b> <b>systems</b> provide, and which may not be used by the specialized applications they run. They are frequently also referred to as real-time <b>operating</b> <b>systems,</b> and the term RTOS is often used as a synonym for embedded <b>operating</b> <b>system.</b>|$|R
50|$|The first <b>operating</b> <b>systems</b> for the GEC 4000 series were COS (Core <b>Operating</b> <b>System)</b> and DOS (Disk <b>Operating</b> <b>System).</b> These were {{basically}} single-user multi-tasking <b>operating</b> <b>systems,</b> designed for developing and running Process control type applications.|$|R
40|$|This paper {{presents}} an architecture that allows multiple isolated commodity <b>operating</b> <b>systems</b> to run concurrently on a microkernel-based <b>operating</b> <b>system</b> without restricting the CPU architecture of guest <b>operating</b> <b>systems.</b> There are several systems that can execute multiple guest <b>operating</b> <b>systems</b> {{by using a}} virtual machine monitor or a microkernel-based <b>operating</b> <b>system.</b> Almost all of them, however, require that the CPU architecture of a guest <b>operating</b> <b>system</b> and a host <b>operating</b> <b>system</b> are identical and the guest <b>operating</b> <b>system</b> needs to be modified. Our architecture {{does not require the}} both of them and the prototype system that we have developed achieved the execution of multiple guest <b>operating</b> <b>systems</b> such as Linux and FreeBSD compiled for several CPU architecture without the modification of them. Since it involved decreasing the performance of a guest <b>operating</b> <b>system,</b> we propose several techniques to improve the performance in this paper. Future embedded system will become more complex, so our approach offers a new way to reuse existing applications and <b>operating</b> <b>systems.</b> 1...|$|R
40|$|In my thesis, I focus on the <b>operating</b> <b>system</b> Google Chrome OS, {{determination}} of its characteristics, definition of target {{group of the}} <b>operating</b> <b>system's</b> users and comparison of available applications with those available for other <b>operating</b> <b>systems.</b> In the theoretical part, historical development of Google is analysed first, followed by the issue of Google Chrome web browser and analyse of the <b>operating</b> <b>system</b> Google Chrome OS. The practical part starts with evaluation of survey on the <b>operating</b> <b>system</b> Google Chrome OS and is followed by multi-criteria analysis of variants comparing various categories of applications available for the <b>operating</b> <b>system</b> Google Chrome OS and other <b>operating</b> <b>systems,</b> in this case represented by the <b>operating</b> <b>system</b> Microsoft Windows 8. 1 and distribution of Linux <b>operating</b> <b>system</b> Ubuntu 14. 04 LTS...|$|R
40|$|Typical {{undergraduate}} <b>operating</b> <b>systems</b> projects use {{services provided}} by an <b>operating</b> <b>system</b> via system calls or develop code in a simulated <b>operating</b> <b>system.</b> However, with the increasing popularity of <b>operating</b> <b>systems</b> with open source code such as Linux, there are untapped possibilities for <b>operating</b> <b>systems</b> projects to modify real <b>operating</b> <b>system</b> code. We present the hardware and software configuration of an open source laboratory that promises to provide students that use it with {{a better understanding of}} <b>operating</b> <b>system</b> internals than is typically gained in a traditional <b>operating</b> <b>systems</b> course. Our preliminary projects and evaluation suggest that thus far the lab has achieved its primary goal in that students that used the lab feel more knowledgeable in <b>operating</b> <b>system</b> and more confident in their ability to write and modify <b>operating</b> <b>system</b> code. 1 Introduction Worcester Polytechnic Institute (WPI) is a private university with approximately 2800 undergraduate students and [...] ...|$|R
50|$|OSP, an Environment for <b>Operating</b> <b>System</b> Projects, is a {{teaching}} <b>operating</b> <b>system</b> {{designed to provide}} an environment for an introductory course in <b>operating</b> <b>systems.</b> By selectively omitting specific modules of the <b>operating</b> <b>system</b> and having the students re-implement the missing functionality, an instructor can generate projects that require students to understand fundamental <b>operating</b> <b>system</b> concepts.|$|R
50|$|OpenBSD {{claims to}} be the only <b>operating</b> <b>system</b> that is fully secure by default. This, however, does not mean it's {{inherently}} the most secure <b>operating</b> <b>system,</b> because that depends on the definition of an <b>operating</b> <b>system.</b> There are many <b>operating</b> <b>systems</b> that are not capable of networking with other systems. Thus, considering the amount of network-based security compromises today, one can argue such an <b>operating</b> <b>system</b> is more secure. OpenBSD is a network <b>operating</b> <b>system.</b>|$|R
5000|$|An {{important}} difference between most embedded <b>operating</b> <b>systems</b> and desktop <b>operating</b> <b>systems</b> {{is that the}} application, including the <b>operating</b> <b>system,</b> is usually statically linked together into a single executable image. Unlike a desktop <b>operating</b> <b>system,</b> the embedded <b>operating</b> <b>system</b> does not load and execute applications. [...] This means {{that the system is}} only able to run a single application.|$|R
50|$|An <b>operating</b> <b>system</b> crash {{commonly}} {{occurs when}} a hardware exception occurs that cannot be handled. <b>Operating</b> <b>system</b> crashes can also occur when internal sanity-checking logic within the <b>operating</b> <b>system</b> detects that the <b>operating</b> <b>system</b> has lost its internal self-consistency.|$|R
40|$|This work {{presents}} several {{approaches for}} designing self-stabilizing <b>operating</b> <b>systems.</b> The first approach {{is based on}} periodical automatic reinstalling of the <b>operating</b> <b>system</b> and restart. The second, reinstalls the executable portion of the <b>operating</b> <b>system</b> and uses predicates on the <b>operating</b> <b>system</b> state (content of variables) {{to ensure that the}} <b>operating</b> <b>system</b> does not diverge from its specifications. The last approach presents an example of a tailored self-stabilizing very-tiny <b>operating</b> <b>system.</b> Prototypes using the Intel Pentium processor were composed. ...|$|R
5000|$|Persistent <b>operating</b> <b>systems</b> are <b>operating</b> <b>systems</b> {{that remain}} {{persistent}} {{even after a}} crash or unexpected shutdown. <b>Operating</b> <b>systems</b> that employ this ability include ...|$|R
2500|$|MS-DOS ( [...] {{acronym for}} Microsoft Disk <b>Operating</b> <b>System)</b> is a {{discontinued}} <b>operating</b> <b>system</b> for x86-based personal computers mostly developed by Microsoft. Collectively, MS-DOS, its rebranding as IBM PC DOS, and some <b>operating</b> <b>systems</b> attempting to {{be compatible with}} MS-DOS, are {{sometimes referred to as}} [...] "DOS" [...] (which is also the generic acronym for disk <b>operating</b> <b>system).</b> MS-DOS was the main <b>operating</b> <b>system</b> for IBM PC compatible personal computers during the 1980s and the early 1990s, when it was gradually superseded by <b>operating</b> <b>systems</b> offering a graphical user interface (GUI), in various generations of the graphical Microsoft Windows <b>operating</b> <b>system.</b>|$|R
40|$|The goal of {{this thesis}} is to {{approach}} the issue of cloud <b>operating</b> <b>systems,</b> implementation of concrete solutions and comparism of their practical use in personal and corporate sectors. In the theoretical part the basic concepts of cloud computing and <b>operating</b> <b>systems</b> are explained. The theoretical part also contains a summary of cloud <b>operating</b> <b>systems</b> based on Linux and web <b>operating</b> <b>systems.</b> In the practical part three <b>operating</b> <b>systems</b> are chosen, implemented and subjected to comparison. The tested solutions include cloud <b>operating</b> <b>system</b> Chrome OS, Joli OS and eyeOS. All <b>operating</b> <b>systems</b> are launched, configured, tested and their practical potential is evaluated...|$|R
5000|$|MS-DOS ( [...] {{acronym for}} Microsoft Disk <b>Operating</b> <b>System)</b> is a {{discontinued}} <b>operating</b> <b>system</b> for x86-based personal computers mostly developed by Microsoft. Collectively, MS-DOS, its rebranding as IBM PC DOS, and some <b>operating</b> <b>systems</b> attempting to {{be compatible with}} MS-DOS, are {{sometimes referred to as}} [...] "DOS" [...] (which is also the generic acronym for disk <b>operating</b> <b>system).</b> MS-DOS was the main <b>operating</b> <b>system</b> for IBM PC compatible personal computers during the 1980s and the early 1990s, when it was gradually superseded by <b>operating</b> <b>systems</b> offering a graphical user interface (GUI), in various generations of the graphical Microsoft Windows <b>operating</b> <b>system.</b>|$|R
40|$|Virtualization is {{a virtual}} machine that is created {{in the form of}} {{software}} and used to make other <b>operating</b> <b>system</b> in the computer <b>operating</b> <b>systems.</b> Virtualiasasi example is VirtualBox, On this Project to install VirtualBox in computer <b>operating</b> <b>systems</b> and installation <b>operating</b> <b>system</b> Ubuntu 14. 04, Fedora 22 dan OpenSUSE 13. 1 into VirtualBox. The next stage of the third <b>operating</b> <b>system</b> already installed on VirtualBox can use the existing features in VirtualBox. Then install the database software on the Ubuntu <b>operating</b> <b>system,</b> installation of a networking software in Fedora <b>operating</b> <b>system</b> and software installation routines in the OpenSUSE <b>operating</b> <b>system.</b> PHPVirtualBox is Virtualization Software that functions the same as VirtualBox but it had excess <b>operating</b> <b>system</b> can display in the browser. To the end of the Project, display and run the <b>operating</b> <b>system</b> Ubuntu, Fedora and OpenSUSE in a web browser using PHPVirtualBox from the first computer to the second computer via a LAN cable...|$|R
50|$|Exokernel is an <b>operating</b> <b>system</b> kernel {{developed}} by the MIT Parallel and Distributed <b>Operating</b> <b>Systems</b> group, and also a class of similar <b>operating</b> <b>systems.</b>|$|R
50|$|See the {{comparison}} of real-time <b>operating</b> <b>systems</b> for a comprehensive list. Also, see the list of <b>operating</b> <b>systems</b> {{for all types of}} <b>operating</b> <b>systems.</b>|$|R
25|$|The {{alternative}} CP-67 {{system for}} the S/360-67 started a whole line of IBM <b>operating</b> <b>systems</b> focused {{on the concept of}} virtual machines. Other <b>operating</b> <b>systems</b> used on IBM S/360 series mainframes included systems developed by IBM: COS/360 (Compatibility <b>Operating</b> <b>System),</b> DOS/360 (Disk <b>Operating</b> <b>System),</b> TSS/360 (Time Sharing <b>System),</b> TOS/360 (Tape <b>Operating</b> <b>System),</b> BOS/360 (Basic <b>Operating</b> <b>System),</b> and ACP (Airline Control Program), as well as a few non-IBM systems: MTS (Michigan Terminal System), MUSIC (Multi-User System for Interactive Computing), and ORVYL (Stanford Timesharing System).|$|R
50|$|From an <b>operating</b> <b>system</b> {{perspective}} a DPE server infrastructure {{can exist}} on one server <b>operating</b> <b>system</b> (homogeneous server infrastructure) or exist as on a defined set of servers with different multiple <b>operating</b> <b>systems</b> (heterogeneous server infrastructure). The server instances or VMs provisioned by the DPE {{could be one}} specific server <b>operating</b> <b>system</b> or multiple server <b>operating</b> <b>systems.</b> Same idea for client systems instantiated by the DPE. The client instantiated by the DPE could be one or multiple client/desktop <b>operating</b> <b>systems.</b>|$|R
50|$|The {{alternative}} CP-67 {{system for}} the S/360-67 started a whole line of IBM <b>operating</b> <b>systems</b> focused {{on the concept of}} virtual machines. Other <b>operating</b> <b>systems</b> used on IBM S/360 series mainframes included systems developed by IBM: COS/360 (Compatibility <b>Operating</b> <b>System),</b> DOS/360 (Disk <b>Operating</b> <b>System),</b> TSS/360 (Time Sharing <b>System),</b> TOS/360 (Tape <b>Operating</b> <b>System),</b> BOS/360 (Basic <b>Operating</b> <b>System),</b> and ACP (Airline Control Program), as well as a few non-IBM systems: MTS (Michigan Terminal System), MUSIC (Multi-User System for Interactive Computing), and ORVYL (Stanford Timesharing System).|$|R
50|$|There is a {{computer}} industry security view that general public desktop operating systems(os) have greater risks as <b>operating</b> <b>systems</b> for cash dispensing machines than other types of <b>operating</b> <b>systems</b> like (secure) real-time <b>operating</b> <b>systems</b> (RTOS). RISKS Digest has many articles about ATM <b>operating</b> <b>system</b> vulnerabilities.|$|R
50|$|The usage {{share of}} desktop <b>operating</b> <b>systems</b> is the {{percentage}} of the <b>operating</b> <b>systems</b> (OS) used in computers (approximately market share) with so-called (retronym) desktop <b>operating</b> <b>system,</b> that also run on e.g. laptops. Originally the only computers running those <b>operating</b> <b>systems,</b> where desktop computers, while with the introduction of so-called new class of mobile <b>operating</b> <b>systems,</b> desktop got to be the part of the name of the former class of OSes. The computers running these OSes have the desktop metaphor style of GUI, unlike the mobile OSes. See also usage share of <b>operating</b> <b>systems</b> for breakdown of the share of desktop, mobile (and other styles of) <b>operating</b> <b>systems,</b> separately, and share of those all <b>operating</b> <b>systems</b> as part of across classes.|$|R
50|$|Bochs {{is mostly}} used for <b>operating</b> <b>system</b> {{development}} (when an emulated <b>operating</b> <b>system</b> crashes, {{it does not}} crash the host <b>operating</b> <b>system,</b> so the emulated OS can be debugged) and to run other guest <b>operating</b> <b>systems</b> inside already running host <b>operating</b> <b>systems.</b> It {{can also be used}} to run older software - such as PC games - which will not run on non-compatible, or too fast computers.|$|R
40|$|An {{instructional}} <b>operating</b> <b>system</b> is one {{intended for}} use in teaching courses in <b>operating</b> <b>systems.</b> Student programming assignments develop or enhance the instructional <b>operating</b> <b>system.</b> This paper presents {{an overview of the}} issues related to using <b>operating</b> <b>systems,</b> especially instructional ones, in coursework. We also present results of a survey we conducted to determine which instructional <b>operating</b> <b>systems</b> are in use at campuses in the United States...|$|R
40|$|<b>Operating</b> <b>systems</b> {{provide the}} {{fundamental}} mechanisms for securing computer processing. Since the 1960 s, <b>operating</b> <b>systems</b> designers have explored {{how to build}} "secure" <b>operating</b> <b>systems</b> - <b>operating</b> <b>systems</b> whose mechanisms protect the system against a motivated adversary. Recently, the importance of ensuring such security has become a mainstream issue for all <b>operating</b> <b>systems.</b> In this book, we examine past research that outlines the requirements for a secure <b>operating</b> <b>system</b> and research that implements example systems that aim for such requirements. For system designs that aimed t...|$|R
40|$|This unit is {{designed}} to introduce candidates to the issues involved in installing and using PC <b>operating</b> <b>systems.</b> It is intended for candidates undertaking an HNC/D in computing, computer networking or a related area who require an understanding of <b>operating</b> <b>systems.</b> On completion of the unit {{you will be able}} to: 1. describe the characteristics of PC <b>operating</b> <b>systems.</b> 2. install, configure and upgrade a client <b>operating</b> <b>system.</b> 3. diagnose and troubleshoot client <b>operating</b> <b>system</b> problems. 4. describe the networking features of client <b>operating</b> <b>systems.</b> ...|$|R
40|$|Today, {{smart cards}} {{are widely used}} in variety of {{applications}} of human life. The nature of these cards depends on theirs <b>operating</b> <b>system,</b> in other words the <b>operating</b> <b>system</b> determines that card {{can be used in}} what field. Hardware development {{on the one hand and}} increasing use of smart cards on the other, have led to that the <b>operating</b> <b>systems</b> have progressed dramatically. Moving from special-purpose <b>operating</b> <b>systems</b> with single application into multi-purpose <b>operating</b> <b>systems</b> with open architecture, is proof of claim. Increase the number of <b>operating</b> <b>systems</b> and variety of their applications, caused that the need to categorize and classify <b>operating</b> <b>systems</b> be felt more than ever. Smart card <b>operating</b> <b>systems</b> can be categorized based on different parameters such as file management, applications management, and historical generations. In this paper we will discussion about smart card <b>operating</b> <b>systems</b> and their classification based on these parameters...|$|R
50|$|Although {{primarily}} {{used with}} the CP/M <b>operating</b> <b>system,</b> the Vector 3 ran several others including OASIS, Micropolis Disk <b>Operating</b> <b>System</b> (MDOS), and Micropolis Z80 <b>Operating</b> <b>System</b> (MZOS).|$|R
40|$|At the {{beginning}} of the 90 s there was no commercial <b>operating</b> <b>system</b> satisfying requirements imposed on a distributed <b>operating</b> <b>system.</b> Some experimental distributed <b>operating</b> <b>systems</b> built upon microkernels existed in the research area but microkernels were either too dependent on the resulting <b>operating</b> <b>system</b> (UNIX) or were too bound to distribution of an <b>operating</b> <b>system</b> (RPC in a microkernel). Therefore, we approached in 1994 to the design and to the implementation of the T 4 microkernel and a distributed <b>operating</b> <b>system</b> built upon it. Carefully designing the microkernel interface we have gained a pure local microkernel with no notion about well-known <b>operating</b> <b>systems</b> and without any direct support for a distributed <b>operating</b> <b>system.</b> We are able to achieve important features of distributed <b>operating</b> <b>systems</b> (including a process migration) by implementation of system processes running in a user mode of the processor. Likewise, the support for an emulation of known <b>operating</b> <b>systems</b> (e. g. Linux) can be easily attained. The T 4 is a microkernel suitable for building fast local <b>operating</b> <b>systems</b> or wide area distributed systems. Available from STL Prague, CZ / NTK - National Technical LibrarySIGLECZCzech Republi...|$|R
5000|$|Real-time <b>operating</b> <b>system,</b> Comparison of {{real-time}} <b>operating</b> <b>systems</b> ...|$|R
50|$|ES7000 servers {{support the}} Microsoft Windows <b>operating</b> <b>system</b> both 32-bit Xeon and 64-bit Itanium, 32-bit and 64-bit {{versions}} of some Linux <b>operating</b> <b>systems,</b> and the Solaris <b>Operating</b> <b>System.</b>|$|R
50|$|KeyKOS is a persistent, pure capability-based <b>operating</b> <b>system</b> for the IBM S/370 {{mainframe}} computers. It allows emulating the VM, MVS, and POSIX environments. It is a predecessor of the Extremely Reliable <b>Operating</b> <b>System</b> (EROS), and its successors, the CapROS and Coyotos <b>operating</b> <b>systems.</b> KeyKOS is a nanokernel-based <b>operating</b> <b>system.</b>|$|R
