51|1490|Public
50|$|Integrative <b>model</b> <b>diagram,</b> DesignShare P.131.|$|E
5000|$|... #Caption: Rational Software Architect with Design <b>Model</b> <b>Diagram</b> ...|$|E
50|$|Database {{modeling}} in Visio {{revolves around}} a Database <b>Model</b> <b>Diagram</b> (DMD).|$|E
5000|$|Code Generation: BPMN process <b>model</b> <b>diagrams</b> {{are used}} to {{generate}} XML-based code in Business Process Execution Language (BPEL) for execution.|$|R
50|$|Database designs {{also include}} ER (entity-relationship <b>model)</b> <b>diagrams.</b> An ER diagram is a diagram {{that helps to}} design {{databases}} in an efficient way.|$|R
40|$|This paper investigates ontology. Ontology {{exhibits}} enormous {{potential in}} making software more efficient, adaptive, and intelligent. It {{is recognized as}} one of the areas which will bring the next breakthrough in software development. Ontology specifies a rich description of the terminology, concepts and properties explicitly defining concepts. Since understanding concepts and terms is one of the difficulties in <b>modeling</b> <b>diagrams,</b> this paper suggests an ontology aiming to identify some heavily used <b>modelling</b> <b>diagrams</b> concepts to make them easier to perfor...|$|R
5000|$|Boehm also {{identifies}} {{a number}} of misconceptions arising from oversimplifications in the original spiral <b>model</b> <b>diagram.</b> He says the most dangerous of these misconceptions are: ...|$|E
5000|$|... #Caption: Risk-Hazard (RH) <b>model</b> (<b>diagram</b> after Turner et al., 2003), {{showing the}} impact of a hazard as a {{function}} of exposure and sensitivity. The chain sequence begins with the hazard, and the concept of vulnerability is noted implicitly as represented by white arrows.|$|E
50|$|The scale {{emerged from}} {{synthesis}} of existing theories including: (a) subjective well-being, (b) developmental life-stages, (c) different categories of human needs, (d) quality of life, and (e) subjective evaluation processes. The scale {{consists of three}} axes: Subjective well-being, positive and negative affect, and fulfillment of needs. See a <b>model</b> <b>diagram</b> below.|$|E
40|$|This {{research}} {{represents a}} methodology that control model transformation from CIM level to PIM level {{in accordance with}} MDA approach. Our approach is founded on establishing a good CIM level, through well-selected rules, to facilitate transformation to PIM level. However, we create a rich PIM level through use case <b>diagram</b> <b>model,</b> state <b>diagram</b> <b>model,</b> class <b>diagram</b> <b>model</b> and package <b>diagram</b> <b>models.</b> Then, we establish transformation rules to ensure a semi-automatic transformation from CIM level to PIM level. Our Approach conform MDA approach by taking into consideration the business dimension in CIM level, since, we present this level through DFD and UML activity <b>diagram.</b> However, we <b>model</b> into PIM by UML diagrams, because UML is recommended by MDA in this leve...|$|R
40|$|Abstract. This paper {{proposes a}} visual {{modeling}} language for a large-scale hybrid {{system based on}} discrete event system specification formalism. Within theproposed language, basic <b>model</b> <b>diagrams</b> define the hybrid behavior of systems, whilethe structure can be represented through coupled <b>model</b> <b>diagrams.</b> The language can visually define large-scale hybrid systems without a sacrifice of formal semantics, and {{does not require the}} users to have programming skills. A prototype of the modeling and simulation environment based on an extended version of the language has been implemented...|$|R
40|$|The {{paper is}} some {{practical}} aerospace {{flight control system}} design applications with multiagent AI. We present design techniques and a problem-solving paradigm with multiagents with visual field windows cooperating for problem solving on boards. Flight control systems are designed with multiagent modules. A preview to a new model-based design for automatic onboard spacecraft control with visual field prediction based on Morph Gentzen computing is stated. Diagrams. The basic principles are a mathematical logic where a Gentzen or natural deduction systems is defined by taking arbitrary structures and multimedia objects coded by diagram functions. New flight planning techniques with <b>model</b> <b>diagrams</b> and applications to computable models with morph Gentzen computing are presented. Generic <b>model</b> <b>diagrams</b> are applied to model computing with minimal functions as efficient computable KR on AI worlds. Diagrammatic reasoning is {{defined in terms of}} inferences directed by the <b>model</b> <b>diagrams.</b> A speci [...] ...|$|R
50|$|Because {{fluctuations}} within SPQL {{are likely}} to occur over time, a single-occasion measurement will not provide a comprehensive assessment (Diener, 2000; Lyubomirsky, Sheldon, & Schkade, 2005). In order to capture a more comprehensive picture of SPQL, the SWB variable (axis) was measured retrospectively throughout three major life stages of adult human development: Early-adulthood, mid-adulthood, and late-adulthood (see SPQL <b>model</b> <b>diagram).</b>|$|E
5000|$|Strict {{consistency}} is {{the strongest}} consistency model. Under this model, a write to a variable by any processor needs to be seen instantaneously by all processors.The Strict <b>model</b> <b>diagram</b> and non-Strict model diagrams describe the time constraint - instantaneous. It can be better understood as though a global clock is present in which every write should be reflected in all processor caches {{by the end of}} that clock period. The next operation must happen only in the next clock period.|$|E
50|$|The SPQL {{construct}} {{consists of}} three axes (see SPQL model diagram): Subjective well-being (SWB), subjective affective experiences (SAE), and fulfillment of needs and preferences. Each axis is compounded from several variables (see SPQL <b>model</b> <b>diagram).</b> SWB consists of its baseline, which is the average of overall happiness/unhappiness, and transient deviations, which are measures of frequency and intensity of nonnormative transient experiences of happiness/unhappiness. Subjective affective experiences (SAE) consist of the average of overall positive and negative affect. Fulfillment of needs consists of a product of strength and fulfillment {{of a wide range}} of needs and preferences.|$|E
5000|$|Process Modeling: Business Process Modeling Notation (BPMN) is used, {{supported}} by modeling tools, to define process <b>model</b> <b>diagrams</b> in BPMN of priority activities for rapid delivery into production.|$|R
5000|$|Muzafer Sherif, {{his wife}} Carolyn Sherif, and Carl Hovland's Assimilation Contrast Effect model is {{grounded}} in social judgment theory. This <b>model</b> <b>diagrams</b> the level of ego involvement in information processing.|$|R
40|$|National audienceImpurities {{exist in}} {{analysis}} and design models {{as well as}} in information system models. Some of them result from circularity between concepts; we call them circular impurities. Others result from similarity between concepts; we call them similar impurities. We propose to search for possible circular and similar impurities in <b>model</b> <b>diagrams</b> by finding classical subgraphs. For example, directed cycles highlight circular impurities and bipartite subgraphs of diagrams highlight similar impurities of <b>model</b> <b>diagrams.</b> We call these classical subgraphs "impurities design patterns". The proposed solution is applicable on <b>model</b> <b>diagrams</b> which are directed graphs built with one kind of node and one kind of relationship. We propose metrics to measure possible circular and similar impurities and an evaluation function to compare impurities in models. We apply this proposition on charts of concepts of models which are directed graphs whose nodes represent concepts of a model and arcs illustrate dependencies between definitions of their concepts. We search for possible circular and similar impurities in the charts of concepts of an information system, of the ER model, and of the UML...|$|R
50|$|Clarity is {{the extent}} of {{unambiguous}} comprehension the system's structure and behavior models convey. Completeness {{is the extent}} of specification for all the system's details. These two model attributes conflict with each other. On the one hand, completeness requires the full stipulation of system details. On the other hand, the need for clarity imposes an upper limit {{on the extent of}} detail within an individual <b>model</b> <b>diagram,</b> after which comprehension deteriorates because of clutter and overloading. Establishing an appropriate balance requires careful management of context during model development. However, the modeler may take advantage of the union of information provided by the entire OPD set of an OPM system model and have one OPD which is clear and unambiguous but not complete, and another that focuses on completeness for some smaller part of the system by adding more details.|$|E
50|$|There is {{important}} information {{for one to}} remember when considering the monopoly <b>model</b> <b>diagram</b> (and its associated conclusions) displayed here. The result that monopoly prices are higher, and production output lesser, than a competitive company follow from a requirement that the monopoly not charge different prices for different customers. That is, the monopoly is restricted from engaging in price discrimination (this is termed first degree price discrimination, such that all customers are charged the same amount). If the monopoly were permitted to charge individualised prices (this is termed third degree price discrimination), the quantity produced, and the price charged to the marginal customer, would be identical {{to that of a}} competitive company, thus eliminating the deadweight loss; however, all gains from trade (social welfare) would accrue to the monopolist and none to the consumer. In essence, every consumer would be indifferent between (1) going completely without the product or service and (2) being able to purchase it from the monopolist.|$|E
40|$|Abstract. This paper {{presents}} a transformation {{from a business}} process <b>model</b> <b>diagram</b> stored in XPDL format, into a hierarchical extension of the PDDL planning language, using the concept of workflow patterns as base of the translation process. The proposed architecture is evaluated within a specific teamwork project management scenario: the allocation of human resources and web services for the cooperative development of on-line courses in an e-learning center...|$|E
50|$|The depots {{first floor}} is a museum with an {{information}} counter and is open daily (free) to the public. The museum contains <b>models,</b> <b>diagrams,</b> exhibits, and artifacts which were found during {{the renovation of}} the station.|$|R
40|$|This paper {{reviews the}} {{requirements}} for the diagrammatic presentation of information contained in a variety software documents. The purpose of the review is to establish the functionality required from graph drawing tools which might {{be connected to the}} generic software development environment UQM. A criteria for reviewing diagrams is proposed and consequently applied to a select set of <b>modelling</b> <b>diagrams</b> and program visualizations. To establish a set of a diagrams to review, taxonomic classifications of <b>modelling</b> <b>diagrams</b> and of program visualizations are also given. The results of the review indicate that a large degree of flexibility is required from the graph drawing tools which are selected for the task...|$|R
50|$|SA and SD are {{displayed}} with structure charts, data flow <b>diagrams</b> and data <b>model</b> <b>diagrams,</b> {{of which there}} were many variations, including those developed by Tom DeMarco, Ken Orr, Larry Constantine, Vaughn Frick, Ed Yourdon, Steven Ward, Peter Chen, and others.|$|R
40|$|Abstract: Endowment {{property}} is prevalent {{a new form}} of social endowment in China in recent years, But financing {{has become one of the}} bottleneck for its smooth development. In this paper, the author combing the various risk factors of REITs financing pattern, using ISM model to analysis the factors involved in grading evaluation, rendering risk <b>model</b> <b>diagram</b> to explain the structure, resulting the relationship between the various risk factors, clear the direction of risk management...|$|E
40|$|This paper {{presents}} the formal specification for {{a tool that}} models the functional requirements of a system based on use case models. The formal model of such a tool is made using Alloy, which is a lightweight modeling language. The structure of the model {{as well as an}} analysis of the model are specified using Alloy. As a complement of the formal model, a <b>model</b> <b>diagram</b> is also presented using the Alloy notation. Categories and Subject Descriptor...|$|E
40|$|Abstract—In general, {{reports are}} {{a form of}} {{representing}} data in such way that user gets the information he needs. They can be built in various ways, from the simplest (“select from”) to the most complex ones (results derived from different sources/tables with complex formulas applied). Furthermore, rules of calculations could be written as a program hard code or built in the database {{to be used by}} dynamic code. This paper will introduce two types of reports, defined in the DB structure. The main goal is to manage calculations in optimal way, keeping maintenance of reports as simple and smooth as possible. Keywords—Data Definition diagram, Server <b>Model</b> <b>Diagram,</b> system modelling, reports...|$|E
40|$|A new {{algorithm}} for {{the linear}} arrangement problem is described. The {{goal is to}} produce linear arrangements of software <b>model</b> <b>diagrams</b> such that the total length of all connections is reduced as much as possible. The algorithm uses the same general numbering strategy as existing algorithms for the highly related problems of bandwidth and profile reduction but {{is based on a}} new heuristic that addresses the unique requirements of the linear arrangement problem. Extensive testing is performed with graphs derived from software <b>model</b> <b>diagrams</b> and from structural engineering. The testing indicates that three refinements to the newalgorithmimprove the arrangementsproduced. Thenewalgorithmproduces linear arrangementswithlower total weighted edge length for both classes of test graphs in comparison with several bandwidth and profile reduction algorithms, and for the software <b>model</b> <b>diagrams</b> in comparison with an eigenvalue-based linear arrangement algorithm. The new heuristic is also shown to require slightly less execution time than the frontal increase minimization heuristic used by several bandwidth and profile reduction algorithms, and far less execution time than the eigenvalue-based algorithm. Key words. graph, linear arrangement, bandwidth, profile, diagram layout, algorithm AMS subject classifications. 05 C 78, 05 C 85, 68 R 10 1...|$|R
40|$|The {{subject of}} the master thesis Process driven {{organization}} is using UML language and BPMN methodology to model business processes of the selected organization, followed by using obtained diagrams organization for upgrade any of <b>modeled</b> <b>diagram</b> existing business processes leading to prosperity of the selected organization...|$|R
40|$|An {{analysis}} of the water entry loads imposed on the reusable {{solid propellant rocket engine}} of the space shuttle following parachute descent is presented. The cases discussed are vertical motion, horizontal motion, and motion after penetration. Mathematical <b>models,</b> <b>diagrams,</b> and charts are included to support the theoretical considerations...|$|R
40|$|Using {{a sample}} of 12. 2 million τ-lepton pairs {{produced}} by e + e − annihilation at √ s ∼ 10. 6 GeV and collected by the CLEO detector, we search for and set limits on CP violation in τ-lepton decays. For each event, we require that both τ-leptons decay via the mode τ → ππ 0 ν. The search is performed {{within the context of}} a multi-Higgs Doublet Model and the imaginary part of the coupling constant parameterizing the non-Standard <b>Model</b> <b>diagram</b> leading to CP violation is constrained to be − 0. 046 < ℑ(Λ) < 0. 022 at 90 % CL. The novel search technique is of general utility...|$|E
40|$|W hether you are {{designing}} a database from scratch {{or trying to}} fig-ure out how to modify an order database to support onlinesales, an accurate and up-to-date model of the database schema helps everyone see what they’re working with. Most dedicated database folks use data modeling tools such as ERwin or Oracle Designer. If you don’t have that luxury, {{you can use the}} Database <b>Model</b> <b>Diagram</b> template in Visio Professional to document database models for both relational and object-relational databases. With a working knowledge of database concepts and database management practices, you can use the Database <b>Model</b> <b>Diagram</b> template to build a dia-gram from scratch, import a model from another application, or reverse-engineer an existing database. When you have a database model to work with, you can add to or modify objects, including tables, columns, parent-child relationships, indexes, and code. In addition, Visio provides templates for Object Role Modeling diagrams and Express-G diagrams, two other methodologies for modeling database. However, these templates produce only diagrams, not models. In this chapter, you learn how to create database models from scratch, as well as how to import models from other applications and reverse engineer models from existing databases. You’ll learn how to set database options and prefer-ences in Visio and work with elements in Visio database model diagrams. The database templates are available only in Visio Professional and Visio for Enterprise Architects. Moreover, if you want to generate SQL code from a Visio database model, you must use Visio for Enterprise Architects, which is available with Visual Studio Professional...|$|E
40|$|Abstract. According to {{manufacturing}} {{characteristics of}} mixed private cloud enterprise, production operation management requirements of mixed private cloud enterprise are analysed. Function of production operation management in mixed private cloud enterprise is summarized. Specific content of production operation management is inducted based on mixed cloud enterprise. The process of production operation management are designed in detail. Object <b>model</b> <b>diagram</b> of production operation management are elaborated. It is analysed that {{the content of}} the reform of production order and the specific process are obtained. It is researched that production order form to be queried and finally end process has been preliminaryly discussed. It has laid a basis for optimal and reasonable application of production operation management...|$|E
40|$|Graphical {{modeling}} {{languages are}} defined with their: �Abstract syntax: formally using MOF �Concrete graphical syntax: informally using text and (example) figures � Formal diagram definition is needed �Enables interchange of <b>modeling</b> <b>diagrams</b> among tools �Enables consistent rendering of diagrams by tools �Enables consistent interpretation of diagrams by user...|$|R
40|$|This paper {{presents}} a <b>model</b> of <b>diagram</b> recognition. It {{then goes on}} to describe several techniques {{from the perspective of the}} model. We hope that this model permits an evaluation of existing techniques and a more effective comparison of competing techniques for <b>diagram</b> recognition. Current <b>models</b> are inadequate for this purpose [Blos 98]. 2. A <b>Model</b> of <b>Diagram</b> Recognitio...|$|R
40|$|SUMMARY Software {{inspection}} is {{a widely}} acknowledged effective quality improvement method in software development by detecting defects involved in software artifacts and removing them. In research on software inspection, constructing computer supported inspection systems is a major topic in the field. A lot of systems have been reported. However few inspection support systems for <b>model</b> <b>diagrams,</b> especially UML diagrams, have been emerged. We identified four key requirements an inspection support system for UML diagrams should have. They are as follows: 1) direct annotations are given to <b>model</b> <b>diagrams,</b> 2) version management is provided so that evolution of artifacts can be managed, 3) the whole inspection process should be supported, 4) horizontal and vertical readings are supported. This paper describes design and implementation of our inspection support system for UML diagrams to realize the four requirements. key words: software inspection, UML diagrams, distributed software development 1...|$|R
