1432|108|Public
5|$|C# {{provides}} properties as syntactic sugar for {{a common}} pattern in which a pair of methods, accessor (getter) and <b>mutator</b> (setter) encapsulate operations on a single attribute of a class. No redundant method signatures for the getter/setter implementations need be written, and the property may be accessed using attribute syntax rather than more verbose method calls.|$|E
25|$|There are {{a variety}} of {{different}} operations that can be performed on binary trees. Some are <b>mutator</b> operations, while others simply return useful information about the tree.|$|E
25|$|Humanised {{antibodies}} {{are produced}} by grafting murine hypervariable regions on amino acid domains into human antibodies. This results in a molecule of approximately 95% human origin. Humanised antibodies bind antigen much more weakly than the parent murine monoclonal antibody, with reported decreases in affinity of up to several hundredfold. Increases in antibody-antigen binding strength have been achieved by introducing mutations into the complementarity determining regions (CDR), using techniques such as chain-shuffling, randomization of complementarity-determining regions and antibodies with mutations within the variable regions induced by error-prone PCR, E. coli <b>mutator</b> strains and site-specific mutagenesis.|$|E
40|$|Abstract. We {{propose a}} new memory model for heap management, called {{short-term}} memory, and concurrent implementations of short-term memory for Java and C, called self-collecting <b>mutators.</b> In short-term memory objects on the heap expire after a nite amount of time, which makes deallocation unnecessary. Self-collecting <b>mutators</b> requires programmer support {{to control the}} progress of time and thereby enable reclaiming the memory of expired objects. We informally describe a simple translation scheme for porting existing programs to self-collecting <b>mutators.</b> As shown by our experimental results on several benchmarks, self-collecting <b>mutators</b> performs competitively with garbage-collected and explicitly managed systems. Unlike garbage-collected systems, selfcollecting <b>mutators</b> does not introduce pause times and provides constant execution time of all operations, independent {{of the number of}} reachable objects, and constant short-term memory consumption after a steady state has been reached. Self-collecting <b>mutators</b> can be linked against any unmodi ed C code introducing a per-object space overhead of one word and negligible runtime overhead. Short-term memory may then be used to remove explicit deallocation of some but not necessarily all objects. ...|$|R
40|$|This {{enables us}} to predict the {{conditions}} under which <b>mutators</b> will be evolutionarily favored. Surprisingly, our simulations show that effect i is typically small for strong-effect <b>mutators.</b> Our results agree semiquantitatively with existing laboratory evolution experiments and suggest future experimental directions...|$|R
40|$|AbstractWe {{determined}} the mutation frequencies of 59 nosocomial isolates of Enterobacter cloacae, and investigated {{their association with}} antimicrobial susceptibility, genotype, and history of exposure to antimicrobials. The frequencies of mutations leading to rifampicin resistance ranged from 5. 8 × 109 to 8. 0 × 106 (median, 5. 0 × 108). Seven of the 59 (12 %) isolates were graded as strong <b>mutators</b> exhibiting a more than 50 -fold increase in the mutation frequency relative to that of E. cloacae ATCC 13047, and 30 (52 %) were graded as weak <b>mutators</b> exhibiting a more than five-fold and not more than 50 -fold increase in the mutation frequency. The isolates with higher grade of mutation frequency were resistant to significantly more antimicrobials (medians of two, one and zero agents for strong <b>mutators,</b> weak <b>mutators</b> and non-mutators, respectively; p 0. 0078). The 59 isolates were classified into 36 genotypes, {{and all of the}} seven strong <b>mutators</b> had distinct genotypes. Mutation frequencies varied more than 102 -fold within a clone. In patient-based, univariate analysis, intensive-care unit admission, dense antimicrobial exposure (glycopeptide or multiple classes) and repetitive detection of this species were significantly more common among all of the four patients from whom strong <b>mutators</b> were obtained. Strong <b>mutators</b> are highly prevalent in surgical isolates of E. cloacae. Higher mutation frequency was associated with antimicrobial resistance and repetitive detection, and may contribute to the adaptability of this species...|$|R
25|$|Over {{the course}} of the experiment, Lenski and his colleagues have {{reported}} a wide array of phenotypic and genotypic changes in the evolving populations. These have included changes that have occurred in all 12 populations and others that have only appeared in one or a few populations. For example, all 12 populations showed a similar pattern of rapid improvement in fitness that decelerated over time, faster growth rates, and increased cell size. Half of the populations have evolved defects in DNA repair that have caused <b>mutator</b> phenotypes marked by elevated mutation rates. The most striking adaptation reported so far is the evolution of aerobic growth on citrate, which is unusual in E. coli, in one population at some point between generations 31,000 and 31,500.|$|E
2500|$|If a cmdlet {{receives}} either pipeline input or command-line parameter input, {{there must}} be a corresponding property in the class, with a <b>mutator</b> implementation. PowerShell invokes the <b>mutator</b> with the parameter value or pipeline input, which is saved by the <b>mutator</b> implementation in class variables. These values are then referred to by the methods which implement the functionality. Properties that map to command-line parameters are marked by ParameterAttribute and are set before the call to BeginProcessing (...) [...] Those which map to pipeline input are also flanked by ParameterAttribute, but with the ValueFromPipeline attribute parameter set.|$|E
2500|$|In {{the mid-1970s}} Dijkstra (together with other authors) {{introduced}} two useful abstractions (<b>mutator</b> and collector) {{to the study}} of garbage collection. The <b>mutator</b> abstracts the process that performs the computation, including allocation of a new storage cell. The collector is the process that automatically reclaims garbage. Furthermore, this paper gives a formalization of [...] "tri-color marking" [...] that is basic to incremental garbage collection.|$|E
40|$|We {{examine the}} {{potential}} beneficial {{effects of the}} expanded access to environmental DNA offered by <b>mutators</b> on the adaptive potential of bacterial populations. Using parameters from published studies of recombination in E. coli, {{we find that the}} presence of <b>mutators</b> has the potential to greatly enhance bacterial population adaptation when compared to populations without <b>mutators.</b> In one specific example, for which three specific amino acid substitutions are required for adaptation to occur in a 300 -amino-acid protein, we found a 3500 -fold increase in the rate of adaptation. The probability of a beneficial acquisition decreased if more amino acid changes, or integration of longer DNA fragments, were required for adaptation. The model also predicts that <b>mutators</b> are more likely than nonmutator phenotypes to acquire genetic variability from a more diverged set of donor bacteria. Bacterial populations harboring <b>mutators</b> in a sequence heterogeneous environment are predicted to acquire most of their DNA conferring adaptation in the range of 13 - 30 % divergence, whereas nonmutator phenotypes become adapted after recombining with more homogeneous sequences of 7 - 21 % divergence. We conclude that <b>mutators</b> can accelerate bacterial adaptation when desired genetic variability is present within DNA fragments of up to approximately 30 % divergence...|$|R
40|$|Weak <b>mutators</b> {{are common}} among {{clinical}} isolates of Escherichia coli. We {{show that the}} relative mutation rate and the “evolvability of fluoroquinolone resistance” are related by a power law slope of 1. 2 over 3 orders of magnitude. Thus, even weak <b>mutators</b> can drive the evolution of fluoroquinolone resistance under selection pressure...|$|R
40|$|The thesis {{deals with}} emulating higher-order {{elements}} using the transformation <b>mutators,</b> which were described by Leon Chua in 1971. The procedure of designing <b>mutators</b> from their mathematical description to {{the synthesis of}} concrete electrical circuits is described. The circuit solutions {{are based on the}} utilization of advanced circuit principles in order to achieve optimal circuit performance. <b>Mutators</b> are implemented as a set of eight incremental modules. Via their cascade connection, it is possible to emulate arbitrary elements from the periodical table of higher-order elements. The proposed solutions are tested by means of computer simulations and also verified by measurements...|$|R
2500|$|Kelavkar UP, Badr KF (April 1999). [...] "Effects of mutant p53 {{expression}} on human 15-lipoxygenase-promoter activity and murine 12/15-lipoxygenase gene expression: evidence that 15-lipoxygenase is a <b>mutator</b> gene". Proceedings of the National Academy of Sciences of the United States of America. 96 (8): 4378–83. PMC 16340 Freely accessible[...] doi:10.1073/pnas.96.8.4378.|$|E
2500|$|A {{few months}} after it was {{released}}, Psyonix released an update that adds game modes known as [...] "mutators", modifying some aspects of gameplay, such as increased or decreased gravity, ball size, ball speed and bounciness. For the 2015 holiday season, another update replaced <b>mutator</b> matches with an ice hockey-inspired mode (called [...] "Snow Day"), played on an ice rink and the ball replaced with a hockey puck with different physics. Positive reception to the ice hockey mode led to it being extended {{for a few weeks}} after the holiday season. Snow Day was permanently added to the <b>mutator</b> settings for private matches and exhibition games on February 10, 2016. [...] "Hoops", a game mode based on basketball, was added on April 26, 2016. A separate [...] "Rumble" [...] mode, which incorporates unusual power-ups, such as the ability to freeze the ball in place or cause a single opponent to have difficulty controlling their car, was added on September 8, 2016, as well as including with the update the new [...] "Crates" [...] system. An update in December 2016, known as [...] "Starbase ARC" [...] (based on Psyonix' mobile game ARC Squadron) added support for custom arenas for Windows players supported through Steam Workshop, along with other new content.|$|E
2500|$|Kelavkar and Badr (1999) {{stated that}} the ALOX15 gene product is implicated in antiinflammation, {{membrane}} remodeling, and cancer development/metastasis. Kelavkar and Badr (1999) described experiments yielding data that supported the hypothesis that loss of the TP53 gene, or gain-of-function activities resulting from the expression of its mutant forms, regulates ALOX15 promoter activity in human and in mouse, albeit in directionally opposite manners. These studies defined a direct link between ALOX15 gene activity and an established tumor-suppressor gene located in close chromosomal proximity. Kelavkar and Badr (1999) referred to this as evidence that 15-lipoxygenase is a <b>mutator</b> gene.|$|E
5000|$|<b>Mutators</b> - Unique {{mechanics}} {{change the}} way you play on the already familiar Battlegrounds.|$|R
40|$|<b>Mutators</b> {{may present}} an {{enhanced}} {{risk for the}} emergence of antibiotic resistance in bacteria during chemotherapy. Using Escherichia coli <b>mutators</b> as a model, we evaluated their ability to develop resistance to antibiotics routinely used for the treatment of urinary tract infections (UTIs). Under conditions that simulate therapeutic drug concentrations in humans, low-level resistance to trimethoprim, gentamicin, and cefotaxime emerged more frequently in <b>mutators</b> than normal strains. Resistance to trimethoprim in both cell types arose from a single point mutation in folA (Ile 94 [...] >Leu) and cefotaxime resistance resulted from loss of outer membrane porin OmpF. The mechanisms of gentamicin resistance could not be defined, but resistance did not result from mutations in ribosomal protein L 6 (rplF). Although similar mechanisms of low-level antibiotic resistance probably arise in these strains, <b>mutators</b> are a risk factor because the increased generation of mutants with low-level resistance enhances the opportunity for subsequent emergence of high-level resistance...|$|R
40|$|Most {{proposals}} for on-the-fly garbage collection ignore the ques- tion of Java’s weak and other reference types. However, {{we show that}} reference types are heavily used in DaCapo benchmarks. Of the few collectors that do address this issue, most block <b>mutators,</b> either globally or individually, while processing reference types. We introduce a new framework for processing reference types on- the-fly in Jikes RVM. Our framework supports both insertion and deletion write barriers. We have model checked our algorithm and incorporated it in our new implementation of the Sapphire on-the- fly collector. Using a deletion barrier, we process references while <b>mutators</b> are running {{in less than three}} times the time that previous approaches take while <b>mutators</b> are halted; our overall execution times are no worse, and often better...|$|R
2500|$|Field defects are {{important}} in progression to cancer. However, in most cancer research, as pointed out by Rubin “The vast majority of studies in cancer {{research has been done}} on well-defined tumors in vivo, or on discrete neoplastic foci in vitro. [...] Yet there is evidence that more than 80% of the somatic mutations found in <b>mutator</b> phenotype human colorectal tumors occur before the onset of terminal clonal expansion. Similarly, Vogelstein et al. point out {{that more than half of}} somatic mutations identified in tumors occurred in a pre-neoplastic phase (in a field defect), during growth of apparently normal cells. [...] Likewise, epigenetic alterations present in tumors may have occurred in pre-neoplastic field defects.|$|E
2500|$|Field defects {{have been}} {{identified}} in association with cancers and are important in progression to cancer. However, it was pointed out by Rubin that [...] "the vast majority of studies in cancer research has been done on well-defined tumors in vivo, or on discrete neoplastic foci in vitro. [...] Yet there is evidence that more than 80% of the somatic mutations found in <b>mutator</b> phenotype human colorectal tumors occur before the onset of terminal clonal expansion…" [...] More than half of somatic mutations identified in tumors occurred in a pre-neoplastic phase (in a field defect), during growth of apparently normal cells. [...] It would also be expected that many of the epigenetic alterations present in tumors may have occurred in pre-neoplastic field defects.|$|E
2500|$|Cancers {{are known}} to exhibit genome {{instability}} or a <b>mutator</b> phenotype. The protein-coding DNA within the nucleus is about 1.5% of the total genomic DNA. Within this protein-coding DNA (called the exome), an average cancer of the breast or colon can have about 60 to 70 protein altering mutations, of which about 3 or 4 may be “driver” mutations, and the remaining ones may be “passenger” mutations [...] However, {{the average number of}} DNA sequence mutations in the entire genome (including non-protein-coding regions) within a breast cancer tissue sample is about 20,000. In an average melanoma tissue sample (where melanomas have a higher exome mutation frequency) the total number of DNA sequence mutations is about 80,000. This compares to the very low mutation frequency of about 70 new mutations in the entire genome between generations (parent to child) in humans.|$|E
40|$|Abstract. We {{propose a}} new memory model, {{short-term}} memory, and an algorithm that employs it, called self-collecting <b>mutators.</b> In shortterm memory objects expire {{after a certain}} amount of time, which makes deallocation unnecessary. Self-collecting <b>mutators</b> require programmer support to control the time and thereby enable reusing the memory of expired objects. We identify a class of programs for which programmer support is easy and correctness is guaranteed. We also provide support for multi-threaded applications. Self-collecting <b>mutators</b> perform competitively with garbage-collected systems, as shown by our experimental results on several benchmarks. Unlike garbage-collected systems, our system has no pause times, provides constant execution time of all memory operations, independent of number of live objects, and constant memory consumption after a steady state has been reached. ...|$|R
5000|$|Linking (or Contact) Mutations - these occur {{systematically}} after {{certain words}} called <b>mutators,</b> {{of which there}} are around 100 in Breton.|$|R
40|$|Dramatic rise of <b>mutators</b> {{has been}} found to {{accompany}} adaptation of bacteria in response to many kinds of stress. Two views on the evolutionary origin of this phenomenon emerged: the pleiotropic hypothesis positing that it is a byproduct of environmental stress or other specific stress response mechanisms and the second order selection which states that <b>mutators</b> hitchhike to fixation with unrelated beneficial alleles. Conventional population genetics models could not fully resolve this controversy because they are based on certain assumptions about fitness landscape. Here we address this problem using a microscopic multiscale model, which couples physically realistic molecular descriptions of proteins and their interactions with population genetics of carrier organisms without assuming any a priori fitness landscape. We found that both pleiotropy and second order selection play a crucial role at different stages of adaptation: the supply of <b>mutators</b> is provided through destabilization of error correction complexes or fluctuations of production levels of prototypic mismatch repair proteins (pleiotropic effects), while rise and fixation of <b>mutators</b> occur when there is a sufficient supply of beneficial mutations in replication-controlling genes. This general mechanism assures a robust and reliable adaptation of organisms to unforeseen challenges. This study highlights physical principles underlying physical biological mechanisms of stress response and adaptation...|$|R
2500|$|Cancers {{are known}} to exhibit genome {{instability}} or a <b>mutator</b> phenotype. The protein-coding DNA within the nucleus is about 1.5% of the total genomic DNA. [...] Within this protein-coding DNA (called the exome), an average cancer of the breast or colon can have about 60 to 70 protein altering mutations, of which about 3 or 4 may be [...] "driver" [...] mutations, and the remaining ones may be [...] "passenger" [...] mutations. However, {{the average number of}} DNA sequence mutations in the entire genome (including non-protein-coding regions) within a breast cancer tissue sample is about 20,000. In an average melanoma tissue sample (where melanomas have a higher exome mutation frequency) the total number of DNA sequence mutations is about 80,000. These high frequencies of mutations in the total nucleotide sequences within cancers suggest that often an early alteration in the field defect giving rise to a cancer (e.g. yellow area in the diagram in the preceding section) is a deficiency in DNA repair. [...] Large field defects surrounding colon cancers (extending to about 10cm on each side of a cancer) are found to frequently have epigenetic defects in 2 or 3 DNA repair proteins (ERCC1, XPF and/or PMS2) in the entire area of the field defect. [...] When expression of DNA repair genes is reduced, DNA damages accumulate in cells at a higher than normal level, and these excess damages cause increased frequencies of mutation and/or epimutation. Mutation rates strongly increase in cells defective in DNA mismatch repair or in homologous recombinational repair (HRR). [...] A deficiency in DNA repair, itself, can allow DNA damages to accumulate, and error-prone translesion synthesis past some of those damages may give rise to mutations. [...] In addition, faulty repair of these accumulated DNA damages may give rise to epimutations. [...] These new mutations and/or epimutations may provide a proliferative advantage, generating a field defect. [...] Although the mutations/epimutations in DNA repair genes do not, themselves, confer a selective advantage, they may be carried along as passengers in cells when the cell acquires an additional mutation/epimutation that does provide a proliferative advantage.|$|E
50|$|<b>Mutator</b> methods {{may also}} be used in non-object-oriented environments. In this case, a {{reference}} to the variable to be modified is passed to the <b>mutator,</b> along with the new value. In this scenario, the compiler cannot restrict code from bypassing the <b>mutator</b> method and changing the variable directly. The onus falls to the developers to ensure the variable is only modified through the <b>mutator</b> method and not modified directly.|$|E
5000|$|Hoppe urn: a Pólya urn with an {{additional}} ball called the <b>mutator.</b> When the <b>mutator</b> is drawn it is replaced along with {{an additional}} ball of an entirely new colour.|$|E
40|$|In {{this paper}} {{we report on}} the {{isolation}} and genetic analysis of a series of strong <b>mutators</b> mapping at five minutes on the E. coli chromosome. These mutations are dominant and show no evidence of interaction in merodiploids. Cultures grown in broth medium exhibit mutant frequencies five to six orders of magnitude higher than mut+ strains. Cultures propagated in minimal salts media mutate at rates one to three orders higher than wild-type. Three-factor crosses have been used to order these <b>mutators</b> relative to metD, proA, and a Tn 10 insertion near five minutes...|$|R
40|$|Experimental (directed) {{evolution}} {{is a study}} of evolution under defined and reproducible conditions, particularly on model laboratory populations of bacteria. Recently, remarkable success of directed evolution has been reported, ranging from industrial enzymes, with substantially improved activities and thermostabilities, to vaccines and pharmaceuticals {{as well as a}} generation of novel microorganisms with desired properties. It has become clear that the major process influencing {{evolution is}} DNA Mismatch Repair (MMR). The MMR system controls genome stability of the species and is highly conserved from bacteria to humans. It maintains the integrity of DNA by repairing errors made during the replication process and by preventing genetic recombination between diverged DNAs. Inactivation of MMR results in the generation of hereditary <b>mutators</b> with highly increased mutation rates as well as in abolishment of genetic barriers between species. Most of the mutations are deleterious, but some of them are beneficial and enable <b>mutators</b> to survive environmental stress. In the stable environment <b>mutators</b> lose their advantage because of accumulating deleterious mutations. Strains with beneficial mutations could survive by reacquiring MMR wild type alleles in horizontal gene transfer through hyperrecombination phenotype of MMR <b>mutators.</b> During evolutionary history, MMR functions have been repeatedly lost and reacquired by horizontal gene transfer, which gives rise to the mosaic gene structure of MMR genes. This mosaicism is a hallmark of the evolutionary process...|$|R
5000|$|Struct {{definitions}} are {{an alternative}} way to define {{new types of}} values, with <b>mutators</b> being present when explicitly required:#lang racket(struct student (name) #:mutable)(define s (student [...] "Alice"))(set-student-name! s [...] "Bob")(student-name s) => [...] "Bob" ...|$|R
5000|$|Unreal (series) The instagib <b>mutator</b> {{provides}} {{all players}} with a modified shock rifle that upon impact reduces whatever it hit to gibs. Gibbing also happens quite often even without this <b>mutator.</b>|$|E
50|$|<b>Mutator</b> strains are {{bacterial}} cell lines which are deficient {{in one or}} more DNA repair mechanisms. An example of a <b>mutator</b> strand is the E. coli XL1-RED. This subordinate strain of E. coli is deficient in the MutS, MutD, MutT DNA repair pathways. Use of <b>mutator</b> strains is useful at introducing many types of mutation; however, these strains show progressive sickness of culture because of the accumulation of mutations in the strains own genome.|$|E
50|$|The {{alternative}} to defining <b>mutator</b> and accessor methods, or property blocks, {{is to give}} the instance variable some visibility other than private and access it directly from outside the objects. Much finer control of access rights can be defined using mutators and accessors. For example, a parameter may be made read-only simply by defining an accessor but not a <b>mutator.</b> The visibility of the two methods may be different; it is often useful for the accessor to be public while the <b>mutator</b> remains protected, package-private or internal.|$|E
40|$|In an adapted {{population}} of <b>mutators</b> {{in which most}} mutations are deleterious, a nonmutator that lowers the mutation rate is under indirect selection and can sweep to fixation. Using a multitype branching process, we calculate the fixation probability of a rare nonmutator in a large {{population of}} asexual <b>mutators.</b> We show that when beneficial mutations are absent, the fixation probability is a nonmonotonic function of the mutation rate of the mutator: it first increases sublinearly and then decreases exponentially. We also find that beneficial mutations can enhance the fixation probability of a nonmutator. Our analysis is relevant {{to an understanding of}} recent experiments in which a reduction in the mutation rates has been observed...|$|R
40|$|Weak {{pointers}} are {{a mechanism}} to allow <b>mutators</b> to communicate with GC • java. lang. ref. Reference • Specification requires us to process weak references atomically from the view point of <b>mutators</b> • Fully concurrent (on-the-fly) GC never stops all <b>mutators</b> Java reference types • Strong- usual references. • Soft- used for caches that the GC can reclaim. • Weak- used for canonicalize mappings (e. g., interned strings) that do not prevent GC from reclaiming their keys or values. • Phantom- used for scheduling pre-mortem cleanup actions more flexibility than finalisers. stronger weaker Java reference types • Strong- usual references. • Soft- used for caches that the GC can reclaim. • Weak- used for canonicalize mapping (e. g., interned strings) that do not prevent GC from reclaiming their keys or values. • Phantom- used for scheduling pre-mortem cleanup actions more flexibility than finalisers. stronger weaker reduce to strong/weak references no interaction with <b>mutators</b> Reachability stronglyreachable Strongly- can be reached without traversing any other references. Weakly- not strongly reachable but {{can be reached by}} traversing weak references. • No formal specification • Specification is written in English. • There are errors in implementations • We formalised the specification root strong reference weak reference strongly reachableGC actions The GC finds all strongly reachable objects and reclaims others. The GC “clears ” references whose referents are weakly reachable. • Weak reference to Strongly- to be retained • Weak reference to Weakly- to be cleared root strongly reachableReference. get() Reference. get() - returns a strong reference to its target or null if the GC has cleared. get() may make some objects that were weakly reachable strongly reachable...|$|R
5000|$|<b>Mutators</b> {{are at a}} {{disadvantage}} when the food supplies α and β are constant. They lose every generation compared to the non-mutating genes. But when the food supply varies, even though the <b>mutators</b> lose relative to an A or B non-mutator, they may lose less than them {{over the long run}} because, for example, an A type loses a lot when α is low. In this way, [...] "purposeful" [...] mutation may be selected for. This may explain the redundancy in the genetic code, in which some amino acids are encoded by more than one codon in the DNA. Although the codons produce the same amino acids, they {{have an effect on the}} mutability of the DNA, which may be selected for or against under certain conditions.|$|R
