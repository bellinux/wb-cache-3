84|11|Public
5|$|MSE {{is built}} upon the same {{foundation}} as other Microsoft security products; all {{use the same}} virus definitions and anti-malware engine, known as Microsoft <b>Malware</b> <b>Protection</b> Engine (MSMPENG). It {{does not have the}} personal firewall of OneCare or the centralized management features of Forefront Endpoint Protection.|$|E
5|$|On January 23, 2012, it was {{reported}} that Twitter would be acquiring Dasient, a startup that offers <b>malware</b> <b>protection</b> for businesses. Twitter announced plans to use Dasient to help remove hateful advertisers on the website.|$|E
5|$|The Microsoft <b>Malware</b> <b>Protection</b> Center {{identified}} a trend away from WSF files {{in favor of}} LNK files and PowerShell scripting. These LNK shortcut files install Locky ransomware by automating infection operations {{rather than relying on}} traditional user downloads of WSF files—all of which is made possible by the universal PowerShell Windows application. Unfortunately, cyber criminals have been able to leverage PowerShell for their attacks for years. In a recent report, the application was found to be involved in nearly 40% of endpoint security incidents. While attackers have been finding weaknesses in the Windows operating system for years, it’s clear that there’s something problematic with PowerShell scripting.|$|E
5000|$|<b>Malware</b> <b>protections</b> for VMs are not {{necessarily}} compatible with the [...] "host", and may require separate software.|$|R
40|$|This paper reconsiders {{the threat}} posed by Shacham’s “return-oriented {{programming}} ” — a technique by which W⊕X-style hardware protections are evaded via carefully crafted stack frames that divert control flow into the middle of existing variable-length x 86 instructions — creating short new instructions streams that then return. We believe this attack is both more general and a greater threat than the author appreciated. In fact, the vulnerability {{is not limited to the}} x 86 architecture or any particular operating system, is readily exploitable, and bypasses an entire category of <b>malware</b> <b>protections.</b> In this paper we demonstrate general return-oriented programming on the SPARC, a fixed instruction length RISC architecture with structured control flow. We construct a Turing-complete library of code gadgets using snippets of the Solaris libc, a general purpose programming language, and a compiler for constructing return-oriented exploits. Finally, we argue that {{the threat posed}} by return-oriented programming, across all architectures and systems, has negative implications for an entire class of security mechanisms: those that seek to prevent malicious computation by preventing the execution of malicious code...|$|R
5000|$|Secure Email Gateway: user {{optimized}} spam <b>protection,</b> <b>malware,</b> DoS and DHA protection. Real-time {{diagnostic and}} reporting; data loss prevention, secure message delivery, email branding and disclaimer management, document conversion and metadata management, real-time online queue management, large attachment management, advanced routing and spooling.|$|R
25|$|Among the new {{features}} introduced in version 9.1 (released in 2006) was fraud protection using technology from GeoTrust, a digital certificate provider, and PhishTank, {{an organization that}} tracks known phishing web sites. This feature was further improved and expanded in version 9.5, when GeoTrust was replaced with Netcraft, and <b>malware</b> <b>protection</b> from Haute Secure was added.|$|E
25|$|Kaspersky's {{consumer}} software {{include the}} Antivirus, Internet Security and Total Security products. The Antivirus software includes <b>malware</b> <b>protection,</b> monitors the PC for suspicious program behavior, and warns users about potentially dangerous websites. The Internet Security software adds privacy features, parental controls, anti-phishing tools. Total Security adds parental controls, adult website filters, diagnostic tools, a Password Manager application, and other features. Kaspersky's software {{is available for}} Macs, PCs, Android, iOS, Windows Mobile, BlackBerry and Symbian.|$|E
25|$|On July 26, 2016 a new, {{mid-range}} {{model with}} only an on-screen keyboard was introduced, the unusually slim BlackBerry DTEK50, {{powered by the}} latest version of Android (6.0, Marshmallow) and featuring a 5.2-inch full high-definition display. BlackBerry chief security officer David Kleidermacher stressed data security during the launch, indicating that this model included built-in <b>malware</b> <b>protection</b> and encryption of all user information. By then, the BlackBerry Classic, which used the BlackBerry 10 OS, had been discontinued.|$|E
40|$|Abstract. Malicious {{web sites}} perform drive-by {{download}} attacks to infect their visitors with <b>malware.</b> Current <b>protection</b> approaches rely on black- or whitelisting techniques {{that are difficult}} to keep up-to-date. As todays drive-by attacks already employ encryption to evade network level detection we propose a series of techniques that can be implemented in web browsers to protect the user from such threats. In addition, we discuss challenges and open problems that these mechanisms face in order to be effective and efficient. 1...|$|R
40|$|This paper explores “return-oriented programming, ” a {{technique}} by which an attacker can induce arbitrary {{behavior in a}} program whose control flow he has diverted — without injecting any code. A Return-oriented program chains together short instruction sequences already present in a program’s address space, each of which ends in a “return ” instruction. Return-oriented programming defeats the W⊕X protections recently deployed by Microsoft, Intel, and AMD; in this context, {{it can be seen}} as a generalization of traditional “return-into-libc” attacks. But the threat is more general: return-oriented programming is readily exploitable on multiple architectures, and bypasses an entire category of <b>malware</b> <b>protections.</b> To demonstrate the wide applicability of return-oriented programming, we construct a Turingcomplete set of building blocks called gadgets using the standard C library from each of two very different architectures: Linux/x 86 and Solaris/SPARC. To demonstrate the power of returnoriented programming, we present a high-level, general-purpose language for describing returnoriented exploits and a compiler that translates it to gadgets. We argue that the threat posed by return-oriented programming, across all architectures and systems, has negative implications for an entire class of security mechanisms: those that seek to prevent malicious computation by preventing the execution of malicious code...|$|R
5000|$|The {{arrival of}} the year 2010 {{triggered}} a bug in Symantec Endpoint. Symantec reported that <b>malware</b> and intrusion <b>protection</b> updates with [...] "a date greater than December 31, 2009 11:59pm {{were considered to be}} 'out of date.'" [...] The company created and distributed a workaround for the issue.|$|R
25|$|SmartScreen Filter {{extended}} Internet Explorer 7's phishing {{filter to}} include protection from socially engineered malware. Every website and download is checked against a local list of popular legitimate websites; if {{the site is}} not listed, the entire address is sent to Microsoft for further checks. If it has been labeled as an impostor or harmful, Internet Explorer 8 will show a screen prompting that the site is reported harmful and shouldn't be visited. From there the user can either visit his or her homepage, visit the previous site, or continue to the unsafe page. If a user attempts to download a file from a location reported harmful, then the download is cancelled. The effectiveness of SmartScreen filtering {{has been reported to}} be superior to socially engineered <b>malware</b> <b>protection</b> in other browsers.|$|E
2500|$|Firefox also {{implements}} {{a proprietary}} protocol from Google called [...] "Safe Browsing", used to exchange data related with phishing and <b>malware</b> <b>protection.</b>|$|E
2500|$|Windows Live OneCare {{features}} integrated anti-virus, personal firewall, and backup utilities, and a tune-up utility {{with the}} integrated functionality of Windows Defender for <b>malware</b> <b>protection.</b> A future {{addition of a}} registry cleaner was considered but not added because [...] "there are not significant customer advantages to this functionality". Version 2 added features such as multi-PC and home network management, printer sharing support, start-time optimizer, proactive fixes and recommendations, monthly reports, centralized backup, and online photo backup.|$|E
40|$|International audienceIn {{front of}} us stands a <b>malware's</b> <b>protection</b> layer with {{millions}} of assembly instructions and {{our goal is to}} understand what's going on. Developing a comprehensive understanding will allow us to unpack the original code, to build detection mechanisms for the malware family or to find interesting pieces of code. The purpose of this talk is to present a solution when one wants to understand a heavily obfuscated code containing a big amount of information. We first need to note that, when we speak of packer understanding, looking at system events like API calls is not enough: in most malwares' protection layers they represent {{only a small part of}} the code (and they are sometimes useless). One needs to play at assembly level, which is a hard and time-consuming task. We have thus built some tools to help. These tools come in two parts: 1. A program execution monitor using dynamic binary instrumentation associated with static information that provides two outputs: - an improved trace, containing a very detailed view of the program execution (memory access, time [...] .), using a format which is easy to parse. - an events file, showing a high level view of the execution by displaying only some specific events, e. g. the loops, the API calls, the exceptions or the dynamic layers of code. Moreover, as we are dynamically monitoring the program execution, we can do better than just detect these events and we actually collect information about them, e. g. the arguments to API calls, the memory access made inside a loop, the exception error code, etc. 2. Some tools to rapidly exploit the previously collected information: - Two visualization tools: -> a [...] timeline [...] based on the events previously detected: the user can navigate through the execution and see what kind of events happens. We also allow the user to define its own events on the execution trace and we display them on the timeline. Moreover the user can choose the abstraction level he wants to represent the execution. -> a [...] memory profile [...] , that is a memory view totally independent from the code itself, we only see its [...] effects [...] . It helps to diagnosis the code behaviour more easily than by reading millions of assembly instructions. - An inferring engine that uses rules defined either on the execution trace or on the memory profile (thus independent from the code in this case). It should be understood that we are not claiming to have built a [...] silver bullet [...] for malware analysis, our tool is not the replacement of IDA Pro or OllyDbg. Its goal is to provide something that helps the standard RE work by providing ways to divide it in easier sub-parts, to bring some points where begin the investigation of new binaries or to rapidly recognize already seen behaviours. During the presentation we are going to apply our framework on some recent malware families and show its usefulness. We will also release the source code and we plan to set up a kind of sandbox analysis...|$|R
2500|$|In 2011, Malwarebytes {{acquired}} HPhosts, {{a website}} blacklisting company, which tracks blacklisted websites and ad servers, a necessary development {{to protect against}} new internet protocol addresses and web servers which distribute malware, and advise internet service providers to shut down those with malicious activity. That year, the company had claimed to have removed over five billion pieces of Malware in three years. The following year, the company launched into the corporate market with an enterprise product aimed at desktop-based anti-malware detection and protection. In 2013, Malwarebytes acquired ZeroVulnerabilityLabs, Inc., a security research and development company founded by Pedro Bustamante, which protects software applications from [...] "known and zero-day exploits used by exploit kits, web-based vulnerability exploits and other corporate-targeted attacks". They expanded their <b>malware</b> removal and <b>protection</b> to the Android platform with the launch of Malwarebytes Anti-Malware Mobile, and launched a USB-based product called Malwarebytes Techbench aimed at helping technicians remove malware.|$|R
40|$|<b>Malware</b> {{includes}} several <b>protections</b> to complicate their analysis: {{the longer it}} takes to analyze a new malware sample, the longer the sample survives and the larger number of systems it compromises. Nowadays, new malware samples are analyzed dynamically using virtual environments (e. g., emulators, virtual machines, or debuggers). Therefore, malware incorporate a variety of tests to detect whether they are executed through such environments and obfuscate their behavior if they suspect their execution is being monitored. Several simple tests, we indistinctly call red-pills, have already been proposed in literature to detect whether the execution of a program is performed in a real or in a virtual environment. In this paper we propose an automatic and systematic technique to generate red-pills, specific for detecting if a program is executed through a CPU emulator. Using this technique we generated thousands of new red-pills, involving hundreds of different opcodes, for two publicly available emulators, which are widely used for analyzing malware. ...|$|R
2500|$|Manufacturers {{of other}} browsers criticized the test, {{focusing}} upon {{the lack of}} transparency of URLs tested {{and the lack of}} consideration of layered security additional to the browser, with Google commenting that [...] "The report itself clearly states that it does not evaluate browser security related to vulnerabilities in plug-ins or the browsers themselves", and Opera commenting that the results appeared [...] "odd that they received no results from our data providers" [...] and that [...] "social <b>malware</b> <b>protection</b> is not an indicator of overall browser security".|$|E
2500|$|On July 26, 2016 {{the company}} hinted that another {{model with a}} {{physical}} keyboard was [...] "coming shortly". The same day, BlackBerry unveiled a mid-range Android model with only an on-screen keyboard, the BlackBerry DTEK50, powered by {{the latest version of}} Android, 6.0, Marshmallow. (The Priv could also be upgraded to 6.0) This device featured a 5.2-inch full high-definition display. BlackBerry chief security officer David Kleidermacher stressed data security during the launch, indicating that this model included built-in <b>malware</b> <b>protection</b> and encryption of all user information. Industry observers pointed out that the DTEK50 is a re-branded version of the Alcatel Idol 4 with additional security-oriented software customizations, manufactured and designed by TCL.|$|E
50|$|Trojan.Win32.DNSChanger (or Trojan:Win32/Dnschanger (Microsoft <b>Malware</b> <b>Protection</b> Center)) is the {{definition}} of multiple AV-Labs, of a (backdoor) Trojan. Due to McAfee Labs, this Malware variant was detected on April 19th, 2009, though Microsoft <b>Malware</b> <b>Protection</b> Center knows about this threat since December 8th, 2006.|$|E
5000|$|In 2011, Malwarebytes {{acquired}} HPhosts, {{a website}} blacklisting company, which tracks blacklisted websites and ad servers, a necessary development {{to protect against}} new internet protocol addresses and web servers which distribute malware, and advise internet service providers to shut down those with malicious activity. That year, the company had claimed to have removed over five billion pieces of Malware in three years. The following year, the company launched into the corporate market with an enterprise product aimed at desktop-based anti-malware detection and protection. In 2013, Malwarebytes acquired ZeroVulnerabilityLabs, Inc., a security research and development company founded by Pedro Bustamante, which protects software applications from [...] "known and zero-day exploits used by exploit kits, web-based vulnerability exploits and other corporate-targeted attacks". They expanded their <b>malware</b> removal and <b>protection</b> to the Android platform with the launch of Malwarebytes Anti-Malware Mobile, and launched a USB-based product called Malwarebytes Techbench aimed at helping technicians remove malware.|$|R
40|$|Malware is {{software}} code that has malicious intent. In recent years, {{there have been}} huge changes in the threat landscape. As our dependency on the Internet for social related information sharing and work increases, {{the number of the}} possible threats is huge and we are indeed susceptible to them. Attacks may from the individual or organisational level, to nation-states resorting to cyber warfare to infiltrate and sabotage enemies operation. Hence, the need for a secure and dependable cyber defence is relevant at all levels. Malware can only do harm if it is allowed to propagate and execute without being detected. Detection based on signature alone is not the answer, because new malware with new signatures cannot be detected. Thus, behaviour-based detection is needed to detect novel malware attacks. Moreover, malware detection is a challenging task when most of the latest <b>malware</b> employs some <b>protection</b> and evasion techniques. In this study, we present a malware detection system that addresses both propagation and execution. Detection is based on monitoring session traffic for propagation, and API call sequences for execution. Our approach is inspired by the human immune system theories known as the Self/Non-self Theory and the Danger Theory. For malware detection during propagation, we investigate the effectiveness of signature-based detection, anomaly-based detection and the combination of both. The decision-making relies upon a collection of recent signatures of session-based traffic data collected at the endpoint (single computer) level. Patterns in terms of port distributions and frequency or session rates of the signatures are observed. If an abnormality is found, it often signifies worm behaviour. A knowledge base consisting of recent traffic data, which is used to predict future traffic patterns, helps to reverse the incorrect flagging of suspected worms. The knowledge base is made of recent traffic, used to predict future patterns of traffic data. It maintains only recent data as the usage pattern of a computer changes over time. Our proposed system includes several detectors, the operations of which are governed by several parameters. We study both how these parameters affect the results and performances when different detectors are or are not included. We find that the detectors produce inconsistent results when used independently but when used together achieve promising detection rates. In addition, we identify which worms are consistently detected by the system, and the characteristics of those the system cannot detect well. For detection based on execution, we analyse sequences of API calls grouped into ngrams which are compared with benign and malware profiles. A decision is made based on a statistical measure, which indicates how close the behaviour represented in the ngrams is to each of the profiles. Experiments show that the system is capable of correctly detecting malware early in its execution. The main contributions of this thesis are: the proposal and evaluation of a framework for detecting malware, that considers both propagation and execution in a systematic way; the detection methods are based on information that is simpler to process than other proposals in the literature, yet still achieve very high detection accuracy; and malware can be correctly recognised early in its execution. The experimental results show that our framework is promising in terms of effective behaviour-based detection that can detect malware and protect our computer networks from future zero-day attacks...|$|R
50|$|Windows based {{computers}} protection {{options include}} the Antivirus, Internet Security, Family Pack, and Total Security products. The Antivirus software includes <b>malware</b> <b>protection,</b> monitors the PC for suspicious program behavior, and warns users about potentially dangerous websites. The Internet Security software includes <b>malware</b> <b>protection,</b> better Internet Security {{in comparison to}} other products, Webcam Protection and other protections. Total Security software includes <b>malware</b> <b>protection,</b> Internet Security, Webcam Protection, Parental Control and other protections. Family Pack is more oriented towards families with features such as parental control and device anti-theft. All of these software include Antiphishing and antispam modules and firewall.|$|E
5000|$|Advanced <b>Malware</b> <b>Protection</b> Appliance for {{dedicated}} inline network {{protection against}} advanced malware.|$|E
5000|$|Security: Secure web gateways, web {{application}} security, network behavior anomaly detection, content filtering, <b>malware</b> <b>protection</b> ...|$|E
50|$|According to the Microsoft <b>Malware</b> <b>Protection</b> Center {{its first}} known {{detection}} {{goes back to}} July 16th, 2009.|$|E
50|$|In September 2015, FireEye {{obtained}} {{an injunction}} against a security researcher attempting to report vulnerabilities in FireEye <b>Malware</b> <b>Protection</b> System.|$|E
50|$|Between May and December 2015, the Microsoft <b>Malware</b> <b>Protection</b> Center {{detected}} Dorkbot on {{an average}} of 100,000 infected machines each month.|$|E
5000|$|Firefox also {{implements}} {{a proprietary}} protocol from Google called [...] "Safe Browsing", used to exchange data related with phishing and <b>malware</b> <b>protection.</b>|$|E
50|$|Advanced <b>Malware</b> <b>Protection</b> can be {{deployed}} inline via a product key on NGIPS, dedicated AMP Firepower appliance or on endpoints, virtual and mobile devices with FireAMP.|$|E
50|$|In 2008, {{the company}} {{launched}} its VIPRE antivirus product line. VIPRE combined anti-malware and anti-spyware into a single, small-footprint antivirus solution {{designed to provide}} <b>malware</b> <b>protection</b> to users.|$|E
50|$|Options for Mac {{protection}} software {{are limited}} to the Bitdefender Antivirus for Mac. The Antivirus software includes adware removal, ransomware protection, secure online shopping, <b>malware</b> <b>protection</b> and cloud based protection.|$|E
50|$|A Trojan:Win32/Agent is the {{definition}} (from Microsoft) of a Trojan downloader, Trojan dropper, or Trojan spy. Its first known detection goes back to January, 2008, according to Microsoft <b>Malware</b> <b>Protection</b> Center.|$|E
50|$|On January 23, 2012, it was {{reported}} that Twitter would be acquiring Dasient, a startup that offers <b>malware</b> <b>protection</b> for businesses. Twitter announced plans to use Dasient to help remove hateful advertisers on the website.|$|E
5000|$|Because of its escape sequences, it is {{possible}} to construct attack byte sequences that round-trip from ISO/IEC 2022 to Unicode and back. Use of this encoding is thus treated as suspicious by <b>malware</b> <b>protection</b> suites.|$|E
