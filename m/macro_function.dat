21|182|Public
5000|$|... 2 A [...] "top camera" [...] {{which will}} be used to take the photograph. Typically this is a digital SLR or digital compact camera with a macro lens or <b>macro</b> <b>function.</b>|$|E
5000|$|For z/System VSE, all STXIT {{functions}} provided previously by IBM DOS/VSE {{are still}} supported. In addition, a new STXIT <b>macro</b> <b>function</b> 'Disabled Timer Appendage (DIE)' is available, {{but only for}} use in Supervisor Mode (Key 0, PSW privilege bit =1). Format is: label STXIT DIE,rtnaddr|(1) ...|$|E
50|$|In Lisp {{programming}} languages, a fexpr is {{a function}} whose operands are passed to it without being evaluated. When a fexpr is called, only {{the body of the}} fexpr is evaluated; no other evaluations take place except when explicitly initiated by the fexpr. In contrast, when an ordinary Lisp function is called, the operands are evaluated automatically, and only the results of these evaluations are provided to the function; and when a (traditional) Lisp macro is called, the operands are passed in unevaluated, but whatever result the <b>macro</b> <b>function</b> returns is automatically evaluated.|$|E
5000|$|Preprocessor <b>macro</b> <b>{{functions}}</b> (without type) can be rewritten as inline functions (typed). The {{flexibility of}} accepting and returning different types {{can still be}} obtained by function overloading.|$|R
40|$|AbstractThere {{are a lot}} of {{research}} concerning code-switching, both in the local and international context. However, this study examines a different aspect of code-switching. It analyses the use of code-switching in the media specifically in a movie. The study aims to understand code-switching in the mediated form in a Malaysian movie; Gol & Gincu. The study examines the <b>macro</b> and micro <b>functions</b> of code-switching in this movie. It was found that some of the <b>macro</b> <b>functions</b> of code-switching included Speech Accommodation, Construction of Identity and to Exhibit Power. Within these <b>macro</b> <b>functions,</b> there were a variety of micro functions embedded within the discourse. The significance of the study is on how the <b>macro</b> and micro <b>functions</b> of code-switching in the movie Gol & Gincu may be reflective of code-switching in real life communication in Malaysian Society particularly the urban community...|$|R
40|$|How, why, {{when and}} where to use <b>macro</b> quoting <b>functions</b> are tricky {{questions}} for all users. Macro quoting is not, as some think, putting single and double quotation marks in or around SAS tokens. Macro quoting is actually masking special characters and mnemonic expressions in the SAS ® System so that these characters are not confused or ambiguous in their context during tokenization and execution of SAS or SAS macro. SAS <b>macro</b> quoting <b>functions</b> also are used to mark starting and ending delimiters. The terms compile-time and run-time should be understood as related to macro for mastery of <b>macro</b> quoting <b>functions.</b> The differences and timing of the compile-time <b>macro</b> quoting <b>functions,</b> %STR and %NRSTR, will be emphasized. The meaning of run-time <b>macro</b> quoting <b>functions</b> and the individual implications in your code will be covered and the differences between run-time and compile-time <b>macro</b> quoting <b>functions</b> will be illustrated. Details and history of %QUOTE and %BQUOTE may help users remember the differences in what is masked in each function. Also, the implementation of <b>macro</b> quoting <b>functions</b> with the NR-prefixes will be detailed. Macro masking of special characters is achieved by using "delta " characters, unprintable ASCII or EBCDIC characters. Just what these characters are and how to examine them and debug them will be covered. Mnemonic expressions are macro quoted during explicit or implicit evaluation. For debugging purposes, suggestions will be made about when macro quoting is stripped...|$|R
40|$|This paper {{considers}} the aggregation of production functions within a stochastic framework where both the technological parameters and the factor inputs {{are thought to}} be probabilistically distributed across firms. The corresponding "true" aggregate production function expressed in moments form is compared with the <b>macro</b> <b>function</b> of choice. This comparison either yields an aggregation bias in total output, if the <b>macro</b> <b>function</b> is fully specified, or allows the relation between exact aggregation macro parameters and their micro foundations to be established, if not. ...|$|E
40|$|Abstract. Macro {{expansion}} in current Lisp systems is naive with respect o block structure. Every <b>macro</b> <b>function</b> {{can cause the}} capture of free user identifiers and thus corrupt intended bindings. We propose a change to the expansion algorithm so that macros will only violate the binding discipline when it is explicitly intended. 1. Prob lems with Macro Expansions Lisp macro functions are powerful tools for the extension of language syntax. They allow programmers to add new syntactic onstructs to a programming language. A pro-stammer specifies a <b>macro</b> <b>function</b> which translates ac-tual instances of a syntactic extension to core language x-pressions. This process can also be pyramided, i. e., macro functions may translate into an already extended language [5]. The defined set of macro functions is coordinated by...|$|E
40|$|The SAS ® macro {{language}} {{includes a}} number of macro functions, such as %UPCASE, %QSCAN, and %SUBSTR. In addition {{a number of}} Autocall macros, such as %LEFT, %TRIM, and %VERIFY, are also supplied that act like macro functions. Macro functions are especially useful as programming tools, because the function call is replaced directly by {{the result of the}} call. Many macro programmers are unaware that they too can write useful macro functions. Fortunately macro functions are not difficult to program. Not difficult, that is, if you know the simple techniques required to turn a macro into a <b>macro</b> <b>function.</b> This paper shows you how to create a <b>macro</b> <b>function,</b> the statements that you must avoid, and the technique used to “pass ” the result of the function back to the calling program...|$|E
5000|$|... imake generates makefiles from a template, {{a set of}} C {{preprocessor}} <b>macro</b> <b>functions,</b> and a per-directory {{input file}} called an Imakefile. This allows machine dependencies (such as compiler options, alternate command names, and special make rules) to be kept separate from the descriptions of the various items to be built.|$|R
50|$|Both macros and {{templates}} are expanded at compile time. Macros {{are always}} expanded inline, while templates are only expanded inline when the compiler deems it appropriate. When expanded inline, <b>macro</b> <b>functions</b> and function templates have no extraneous runtime overhead. Template functions with many {{lines of code}} will incur runtime overhead {{when they are not}} expanded inline, but the reduction in code size may help the code to fit into the CPU's instruction cache.|$|R
40|$|This paper {{demonstrates}} {{how to use}} Base SAS ® tools to add functional, reusable extensions to the SAS ® system. Learn {{how to do the}} following: • Write user-defined <b>macro</b> <b>functions</b> {{that can be used in}}line with any other SAS code. • Use PROC FCMP to write and store user-defined functions that can be used in other SAS programs. • Write DS 2 user-defined methods and store them in packages for easy reuse in subsequent DS 2 programs...|$|R
40|$|It is very {{important}} to standardize mechanical parts as productivity increases. But, this is a very difficult subject, {{because there are a lot}} of kinds of different mechanical parts, and the mechanical parts are very complicated. Therefore, we have developed a support system, which standardizes the mechanical parts. The mechanical parts can divide into several components, and it is relatively easy to standardize these components. We built an individual standardization data base for each component, and link these data bases into a system. The system used a <b>macro</b> <b>function,</b> which records a series of operations of three-dimensional CAD system. This paper describes the methods for standardizing the mechanical parts by the <b>macro</b> <b>function,</b> with an emphasis on the method for building the standardization data base automatically, the method for generating a frame of input and output formats, and so on...|$|E
40|$|ABSTRACT Description: This paper {{explains}} how to conditionally execute statements in open code {{without having to}} wrap the code in a macro. This is accomplished by combining the <b>macro</b> <b>function</b> sysfunc with the data step function ifc. The result is that parameterized include programs gain the power of conditional processing — %if [...] . %then — for which macros are usually used...|$|E
40|$|How {{to make a}} {{user-defined}} macro {{work with}} multiple variables is often a difficult task. In many cases, {{in order to work}} with any variable lists just as SAS procedures do, your macro needs to ‘recognize ’ or parse the variable lists. Unfortunately there is no macro or function available to deal with variable lists efficiently. This paper introduces a <b>macro</b> <b>function</b> %Parse(dsn, varlist) that can parse any variable list (varlist) for a given data set (dsn). The variable list can be a conventional SAS variable list (like those used in SAS procedures and DATA steps) or a Perl regular expression. The function returns a complete list of variable names corresponding to the variable list. With additional Perl regular expressions, this function can parse variable lists or patterns far beyond the conventional ones used in SAS procedures and DATA steps. This <b>macro</b> <b>function</b> provides a useful tool for userdefined macros to handle variable lists...|$|E
40|$|We {{present a}} method for the fast {{generation}} of <b>macro</b> basis <b>functions</b> {{in the context of}} the linear embedding via Green's operators approach (LEGO) which is a domain decomposition technique based on the combination of electromagnetic bricks in turn described by means of scattering operators. We show that, when the scattering operators are rank-deficient, a reduced set of <b>macro</b> basis <b>functions</b> defined on the surface of the bricks can be obtained through the adaptive cross approximation of the scattering operator...|$|R
40|$|For programmers {{new to the}} SAS ® Macro Facility, {{understanding}} the set of <b>Macro</b> quoting <b>functions</b> and their appropriate uses can be a difficult task. This paper describes a decision-based selection methodology for choosing the correct <b>Macro</b> quoting <b>function,</b> based on which character(s) (tokens) are to be masked and at what stage the masked token(s) are to be unmasked. It is also {{meant to be a}} refresher for more experienced Macro programmers, who may use the methodology graphic as a handy reference...|$|R
40|$|Excel {{is by far}} {{the most}} widely {{distributed}} data analysis software but few users are aware of its full powers. Advanced Excel For Scientific Data Analysis takes off from where most books dealing with scientific applications of Excel end. It focuses on three areas-least squares, Fourier transformation, and digital simulation-and illustrates these with extensive examples, often taken from the literature. It also includes and describes a number of sample <b>macros</b> and <b>functions</b> to facilitate common data analysis tasks. These <b>macros</b> and <b>functions</b> are provided in uncompiled, computer-readable, easil...|$|R
40|$|The SAS ® macro {{facility}} {{has been an}} essential part of the SAS programmer’s toolkit for many years. Its continued use is a testament to its relevance and power. With each new release of SAS ® software, macros continue to be arguably the easiest way to create data-driven code generation. The intended audience for this paper includes any SAS programmer who writes macros or works with macros that are written by others. The following topics will be discussed: • Review of macro timing • the %SYSFUNC <b>macro</b> <b>function</b> (avoiding the DATA step) • macro expressions • global and local symbol tables • debugging • creating and using macro librarie...|$|E
40|$|The {{existing}} open-source libraries for 1 -D barcodes recognition are {{not able}} to recognize the codes from images acquired using simple devices without autofocus or <b>macro</b> <b>function.</b> In this article we present an improvement of an existing algorithm for recognizing 1 -D barcodes using camera phones with and without autofocus. The multilayer feedforward neural network based on backpropagation algorithm is used for image restoration in order to improve the selected algorithm. Performances of the proposed algorithm were compared with those obtained from available open-source libraries. The results show that our method makes possible the decoding of barcodes from images captured by mobile phones without autofocus...|$|E
40|$|Abstract- In this paper, an {{emotional}} and sensational robotic system {{by which the}} machine perception and the representation of affectivity can be studied is developed. This electromechanical system {{can be used as}} a versatile educational kit (module) for researchers and students. An important feature of this new system is that three demonstration modes have been built in the controlling system to perform the activities of playing, news broadcasting and learning. In the Human-Machine-Human (HMH) interaction mode, players communicate with the controller of the robot via face-to-face talking. To facilitate operation so that the robot can be controlled easily, we employ a touch screen panel with preprogrammed <b>macro</b> <b>function</b> keys. With this feature, players of this system will have impressiv...|$|E
40|$|In this paper, the Perl regular {{expression}} facility {{that provides a}} concise and flexible means for matching strings of text is extended to the macro environment using three new <b>macro</b> <b>functions.</b> Consequently, this allows direct pattern matching and replacement in macro variables, facilitating the construction of flexible and customized functions through internally parsing patterned inputs. This is illustrated with a specific example where we outline the key steps to build an automated variable selection process in the generalized linear models, with additional capability to perform joint test of several variables such as spline bases...|$|R
40|$|A fast spectral-domain {{method is}} {{proposed}} {{to evaluate the}} reaction terms between the <b>macro</b> basis <b>functions</b> in regular and non-regular arrays made of identical printed antennas. The presented technique first exploits the filtering capabilities of the <b>macro</b> basis <b>functions</b> in the spectral domain. The method is then strongly accelerated {{with the help of}} a newly formulated fast Fourier transform (FFT) -based technique, which is applicable to a contour integration in the complex plane. We name the method as contour-FFT (C-FFT). Besides an effective homogeneous medium term treated with multipoles, a computational complexity of order N log 2 N is achieved for the tabulation of substrate-related reaction terms for any possible relative positions. The complexity of the proposed method is independent from the complexity of the elements. Numerical results obtained with the proposed method are compared with those from a pre-validated reference solution based on the traditional <b>macro</b> basis <b>functions</b> technique; an excellent agreement is observed...|$|R
50|$|Unlike {{the above}} example, the {{character}} classification routines are not written as comparison tests. In most C libraries, they are written as static table lookups instead of <b>macros</b> or <b>functions.</b>|$|R
40|$|AbstractIn {{this paper}} two-parameter {{fracture}} characterization of elastic and elastic-plastic stress/strain field around a crack front is presented for a welded pipe component containing a circumferential through-thickness crack. A <b>macro</b> <b>function</b> programmed in PYTHON {{is used to}} compute the constraint parameters (T-stress, Tz and Q factors) of the specimen in the open source finite element package Code_Aster. Data obtained from literature was employed to support three-dimensional finite element models developed in this research to study the impact of high magnitude repair-weld residual stresses. Complete distributions of the T-stress, Tz and Q-factors were obtained along a 3 D crack front {{in the presence of}} residual stresses. The effects of stresses (residual and operational) on the constraint parameters are studied. It is shown that a two-parameter methodology provides effective characterization of three dimensional elastic–plastic crack tips constraint...|$|E
40|$|The aim of {{the study}} was to compare textural atributes of cooked chicken breast samples {{subjected}} to different storage or preparation conditions (raw meat after cooking, raw meat after freezing/subsequent thawing, after storage under modified – controlled conditions) using instrumental analysis. For this purpose, samples were subjected to texture testing by the use of Warner-Bratzler probe, to find changes in muscle hardness by determination of firmness and work of shear. As expected, various values of mentioned atributes were obtained for tested samples treated by three different ways. For statistical evaluation of the results, <b>macro</b> <b>function</b> of Exponent software and paired T test were used, statistically significant differences were taken at p < 0. 05. In conclussion, different forces were needed for cutting of tested samples, subjected to selected storage conditions, prior to cooking...|$|E
40|$|What are SAS {{date and}} time values? How are they used and why do we care? What {{are some of the}} more {{important}} of the many functions, formats, and tools that have been developed that work with these crucial elements of the SAS System? This tutorial will answer these questions and many more. Starting with {{date and time}} constants and their representation in SAS and then expanding to functions and formats, the basics of the use of dates and times will be integrated with their use as part of both data tables and data displays. The discussion will include functions and formats that are new to Version 8 and SAS 9. Also covered are picture formats and date directives, date scaling in SAS/GRAPH, shift operators in the INTNX and INTCK functions, {{and the use of the}} %SYSFUNC <b>macro</b> <b>function...</b>|$|E
5000|$|In {{languages}} with macros or lazy evaluation, {{control flow}} constructs such as [...] {{can be implemented}} as <b>macros</b> or <b>functions.</b> In languages without these expressive features, they are generally keywords.|$|R
40|$|Linear {{embedding}} via Green’s operators (LEGO) is {{a domain}} decomposition method that uses electromagnetic “bricks” to solve wave scattering problems. The algebraic {{form of the}} relevant functional equations (which are derived by invoking the surface equivalence principle) is a linear system characterized by a full and possibly large matrix. The size of the system can be effectively reduced by adopting <b>macro</b> basis <b>functions</b> defined {{on the surface of}} a brick through 1) the eigencurrents expansion method (EEM) and 2) the Adaptive Cross Approximation (ACA). The two methods lead to the same results, though the ACA <b>macro</b> basis <b>functions</b> are faster to compute...|$|R
40|$|Linear {{embedding}} via Green's operators (LEGO) is {{a domain}} decomposition method for solving electromagnetic problems which involve composite 3 -D structures. By combining the standard Method of Moments {{with a set}} of <b>macro</b> basis <b>functions</b> obtained through the Arnoldi iteration, the algebraic system of LEGO can be effectively compressed. However, under general circumstances {{it is not easy to}} choose the minimum number of <b>macro</b> basis <b>functions</b> for a given level of accuracy, since many physical and geometrical factors come into play. To shed light on this topic, we discuss a few examples with a focus on the convergence of the numerical solution...|$|R
40|$|List {{is one of}} {{the common}} data {{structures}} that we use in our daily work. There are many solutions in SAS to deal with this problem. Most of them will require a series of macro functions to build a general list processing target. After that, we still need to write a special purpose macro for each different mission. This increases the code complexity. In this paper, we will present a general list processing macro widely used in our work. This list macro has the following characteristics: 1. Simplicity. Simple is the best and the macro only contains several statements. 2. Flexibility. The macro is powerful and can solve many problems. 3. Versatility. Only one <b>macro</b> <b>function</b> will be needed in different situations. No other sub-macro procedures need to be created. Finally we show the application of this macro in a Combination drug therapy program...|$|E
40|$|Revitalization of Complex Kavallerie As Heritage Hotel in Pura Mangkunegaran Surakarta is {{a legacy}} of {{development}} efforts {{in the form of}} complex Pura Mangkunegaran Kavallerie - Artillerie which still exists to this day, how a process, how, act revive or revitalize the building environment to stay that was formerly in the form of barracks for troops riding armored vehicles and troops belonging to Mangkunegaran, a dynasty originating from the Mataram dynasty that once ruled in Surakarta since 1757 up to 1946 to be a heritage hotel full of culture in Mangkunegaran own. The rationale on complex historical objects Kavallerie Mangkunegaran extinct is to revitalize Complex Kavallerie as tourism history by rebuilding Complex Kavallerie with different functions, namely as a Heritage Hotel. By analyzing the macro and micro. Namely <b>macro</b> <b>Function</b> Analysis and Strategy, Objectives and Scope and Limitations Region. While Micro namely Analysis and Concepts Site, Space, Mass, Display Architecture, Structure and Utilities and emphasis. Keywords: Revitalization, Complex Kavallerie Mangkunegaran, Hotel Heritag...|$|E
40|$|The file {{attached}} to this record is the author's final peer reviewed version. The Publisher's final version can be found by following the DOI link. In this paper two-parameter fracture characterization of elastic and elastic-plastic stress/strain field around a crack front is presented for a welded pipe component containing a circumferential through-thickness crack. A <b>macro</b> <b>function</b> programmed in PYTHON is used to compute the constraint parameters (T-stress, Tz and Q factors) of the specimen in the open source finite element package Code_Aster. Data obtained from literature was employed to support three-dimensional finite element models developed in this research to study the impact of high magnitude repair-weld residual stresses. Complete distributions of the Tstress, Tz and Q-factors were obtained along a 3 D crack front {{in the presence of}} residual stresses. The effects of stresses (residual and operational) on the constraint parameters are studied. It is shown that a two-parameter methodology provides effective characterization of three dimensional elastic–plastic crack tips constraint...|$|E
40|$|Linear {{embedding}} via Green's operators (LEGO) is {{a domain}} decomposition method that uses electromagnetic “bricks” to solve wave scattering problems. The algebraic {{form of the}} relevant functional equations (which are derived by invoking the surface equivalence principle) is a linear system characterized by a full and possibly large matrix. The size of the system can be effectively reduced by adopting <b>macro</b> basis <b>functions</b> defined {{on the surface of}} a brick through 1) the eigencurrents expansion method (EEM) and 2) the Adaptive Cross Approximation (ACA). The two methods lead to the same results, though the ACA <b>macro</b> basis <b>functions</b> are faster to compute...|$|R
5000|$|... the {{location}} of a reference within an expression. If it's the leftmost position of a compound, it refers to a special operator or a <b>macro</b> or <b>function</b> binding, otherwise to a variable binding or something else.|$|R
50|$|In {{the context}} of the C or C++ {{programming}} languages, a library is called header-only if the full definitions of all <b>macros,</b> <b>functions</b> and classes comprising the library are visible to the compiler in a header file form. Header-only libraries {{do not need to be}} separately compiled, packaged and installed in order to be used. All that is required is to point the compiler at the location of the headers (the -I switch in gcc/g++), and then #include the header files into the application source. Another advantage is that the compiler's optimizer can do a much better job when all the library's source code is available.|$|R
