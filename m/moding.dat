29|10000|Public
50|$|Einar Modig (28 November 1883 - 10 March 1960) was a Swedish diplomat. After {{graduating from}} Uppsala University in 1907, <b>Moding</b> joined the Swedish Ministry for Foreign Affairs. He served {{eight years in}} South America as envoy in various country and during World War II, <b>Moding</b> served as Swedish envoy in Ankara and Athens. After the war, he served as envoy in Brussels and Luxembourg City.|$|E
5000|$|J. R. Biard and W. N. Carr, [...] "Temperature Effects and <b>Moding</b> in GaAs Injection Lasers", Device Research Conference, Michigan State University; June 1963.|$|E
40|$|This {{paper is}} an {{exploration}} {{into the relationship}} between the operational environment, the human supervisor, and the mode structure of modern control systems. Based on a field study describing operators ’ (e. g., pilots, controllers, technicians) interaction with modal systems, we developed several hypotheses about why and how operators transition among modes. We used these hypotheses to develop a framework of the complete environment-human-machine relationship. The framework, called “OFAN, ” is based on Statecharts and Operator-Function models—both modern extensions to the finite-state-machine theory. Using the OFAN framework, we describe two examples of <b>moding</b> problems and identify the particular features that induce such problems. In the first example, a <b>moding</b> problem in a display, it was the product of dual transitions into a state: one consistent with the layout of the controls (and therefore intuitive), the other dependent upon some internal state (and therefore unintuitive). In the second example, a <b>moding</b> problem in an automatic flight control system, it was a default entry into a state (of the machine) which was inconsistent with the state of the environment. For both examples, the underlying approach and methods used to highlight these <b>moding</b> problems are briefly discussed. - 2...|$|E
5000|$|... 8 {{different}} game modes: Play Quest <b>mode,</b> Arcade <b>mode,</b> Training <b>mode,</b> Survival <b>mode,</b> Time Attack <b>mode,</b> versus <b>mode,</b> Team Battle <b>mode,</b> Tag <b>mode.</b>|$|R
5000|$|Only Messiaen's <b>mode</b> 7 and <b>mode</b> 3 are not {{truncated}} modes: {{the other}} <b>modes</b> may be constructed from them or {{from one or}} more of their <b>modes.</b> <b>Mode</b> 7 contains <b>modes</b> 1, 2, 4 and 6. <b>Mode</b> 6 contains <b>modes</b> 1 and 5. <b>Mode</b> 4 contains <b>mode</b> 5. <b>Mode</b> 3 contains <b>mode</b> 1.|$|R
5000|$|Gameplay remains {{relatively}} unchanged {{from the}} original game. New <b>modes</b> on Dance Dance Revolution Hottest Party 3 include Tournament <b>Mode,</b> Relaxed <b>Mode,</b> DDR School, Hypermove <b>Mode,</b> and Wii Balance Board <b>Modes.</b> Returning <b>modes</b> include Free Play <b>Mode</b> and Training <b>Mode.</b> Dropped <b>modes</b> include the [...] "Groove Circuit/Arena" [...] <b>Mode.</b> It has been replaced with Tournament <b>Mode.</b> The use of hand markers {{have been removed from}} Free Play <b>Mode.</b> They are still existent in DDR School and Hypermove <b>Mode,</b> but are called Punch Markers.|$|R
40|$|A {{transformational}} {{approach for}} proving termination of parallel logic {{programs such as}} GHC programs is proposed. A transformation from GHC programs to term rewriting systems is developed; it exploits the fact that unications in GHC-resolution correspond to matchings. The termination of a GHC program for a class of queries is implied by the termination of the resulting rewrite system. This approach facilitates the applicability {{of a wide range}} of termination techniques developed for rewrite systems in proving termination of GHC programs. The method consists of three steps: (a) deriving <b>moding</b> information from a given GHC program, (b) transforming the GHC program into a term rewriting system using the <b>moding</b> information, and nally (c) proving termination of the resulting rewrite system. Using this method, the termination of many benchmark GHC programs such as quick-sort, merge-sort, merge, split, fair-split and append, etc., can be proved. 1 Introduction The success of logic programmin [...] ...|$|E
40|$|The {{geometric}} {{effect and}} material stress effects are included. Calculations are shown that put an upper {{limit on the}} expected phase shift in single mode fibers. The fractional change in propagation constant is presented. <b>Moding</b> effects in multimode fibers cause extraneous phase shifts of unusually high magnitude. This does not occur in single mode fibers, rendering them very insensitive to bending with a theoretical limit given by the above relation...|$|E
40|$|One {{recurring}} {{problem in}} program development {{is that of}} understanding how to re-use code developed by a third party. In the context of (constraint) logic programming, part of this problem reduces to {{figuring out how to}} query a program. If the logic program does not come with any documentation, then the programmer is forced to either experiment with queries in an ad hoc fashion or trace the control-flow of the program (backward) to infer the modes in which a predicate must be called so as to avoid an instantiation error. This paper presents an abstract interpretation scheme that automates the latter technique. The analysis presented in this paper can infer <b>moding</b> properties which if satisfied by the initial query, come with the guarantee that the program and query can never generate any <b>moding</b> or instantiation errors. Other applications of the analysis are discussed. The paper explains how abstract domains with certain computational properties (they condense) can be used to trace control-flow backward (right-to-left) to infer useful properties of initial queries. A correctness argument is presented and an implementation is reported. ...|$|E
50|$|The {{unrestricted}} <b>mode</b> {{is often}} called kernel <b>mode,</b> but many other designations exist (master <b>mode,</b> supervisor <b>mode,</b> privileged <b>mode,</b> etc.). Restricted <b>modes</b> are usually referred to as user <b>modes,</b> but are also known by many other names (slave <b>mode,</b> problem state, etc.).|$|R
40|$|Normal <b>modes,</b> quasi-normal <b>modes</b> and super-radiant <b>modes</b> are {{studied to}} clarify the total {{dynamics}} for complex scalar fields in Kerr anti-de Sitter black hole spacetime. Orthonormal relations and quasi-orthonormal relations are obtained for normal <b>modes</b> and quasi-normal <b>modes.</b> <b>Mode</b> expansions are done and the conserved quantities are studied. Any <b>modes</b> are shown to be separated into two groups, physical <b>modes</b> and unphysical <b>modes,</b> by the zero <b>mode</b> line. Zero <b>modes</b> themselves do not exist as normalizable <b>modes</b> with the correct boundary condition. The allowed physical <b>modes</b> exclude the super-radiant instability <b>modes</b> in rotating black hole spacetime. The result {{is consistent with the}} co-rotating frame consideration. ...|$|R
50|$|Each {{character}} is given three different <b>modes</b> {{from the television}} series, a Beast <b>Mode,</b> a Vehicle <b>Mode,</b> and a Robot <b>Mode.</b> Robot <b>Mode</b> is the strongest <b>mode</b> but while in Robot <b>Mode</b> your energy drains slowly, and to recharge you must revert to Beast or Vehicle <b>Modes.</b>|$|R
40|$|Amy and Klara's Friends {{must find}} speech acts and content {{befitting}} of synthetic systems. They must help us {{find out what}} machines, {{now that they have}} found speech, should really be telling us. Amy and Klara's Friends is a continuation and reaction to the Amy and Klara project (included as sample). This work, as its predecessor, brings synthetic languages into the realm of cultural intervention by means of <b>moding</b> and hacking commercial speech synthesis systems...|$|E
40|$|We present {{evidence}} that the integrated profiles of some millisecond pulsars exhibit severe changes that are inconsistent with the <b>moding</b> phenomenon as known from slowly rotating pulsars. We study these profile instabilities in particular for PSR J 1022 + 1001 and show that they occur smoothly, exhibiting longer time constants than those associated with <b>moding.</b> In addition, the profile changes of this pulsar seem {{to be associated with}} a relatively narrow-band variation of the pulse shape. Only parts of the integrated profile participate in this process which suggests that the origin of this phenomenon is intrinsic to the pulsar magnetosphere and unrelated to the interstellar medium. A polarization study rules out profile changes due to geometrical effects produced by any sort of precession. However, changes are observed in the circularly polarized radiation component. In total we identify four recycled pulsars which also exhibit instabilities in the total power or polarization profiles due to an unknown phenomenon (PSRs J 1022 + 1001, J 1730 − 2304, B 1821 − 24, J 2145 − 0750). The consequences for high precision pulsar timing are discussed in view of the standar...|$|E
40|$|A {{prototype}} X-S band horn feed {{for future}} use at various DSN sites, dealing with the testing of the final fabricated feed at DSS 13 are discussed. Measured feedhorn patterns are presented, and efficiencies calculated. Preliminary results of system noise temperature and 26 -m antenna system gain measurements are presented. Some measurements leading to an improved second generation feed are described. The results of the field measurements indicate that this horn will perform as originally specified and required. The tests for the second generation feed have indicated the potential cause of minor X-band <b>moding...</b>|$|E
5000|$|Resolutions: (SR/TR) (N <b>mode</b> / V1 <b>mode</b> / V2 <b>mode)</b> or (FR/MR) (V1 <b>mode</b> / V2 <b>mode)</b> ...|$|R
40|$|In this thesis, four {{authenticated}} encryption <b>modes</b> {{of operation}} are presented, namely, GCM <b>mode,</b> CCM * <b>mode,</b> OCB <b>mode</b> and CWC <b>mode.</b> These <b>modes</b> can provide confidentiality and authenticity simultaneously. The GCM <b>mode</b> and CCM * <b>mode</b> are in detail introduced. And {{it shows the}} comparison of the four <b>modes</b> from different aspects: properties, security, an...|$|R
50|$|Two-player <b>modes</b> include Rescue <b>mode</b> (similar to the one-player <b>mode),</b> Score <b>mode</b> (competition {{for higher}} score) and Attack <b>mode.</b>|$|R
40|$|In this paper, we {{identify}} {{a class of}} Prolog programs inferable from positive data. Our approach is based on <b>moding</b> information and linear predicate inequalities between input terms and output terms. Our results generalize the results of Arimura and Shinohara (1994). Standard programs for reverse, quick-sort, merge-sort are {{a few examples of}} programs that can be handled by our results but not by the earlier results of Arimura and Shinohara (1994). The generality of our results follows from the fact that we treat logical variables as transmitters for broadcasting communication, whereas Arimura and Shinohara (1994) treat them as point-to-point communication channels...|$|E
40|$|We {{consider}} first-order linear difference systems over C(x), {{with respect}} to a difference operator σ that is either a shift σ:x x+ 1, q-dilation σ:x qx with q∈C^× not a root of unity, or Mahler operator σ:x x^q with q∈Z_≥ 2. Such a system is integrable if its solutions also satisfy a linear differential system; it is projectively integrable if it becomes integrable "after <b>moding</b> out by scalars. " We apply recent results of Schäfke and Singer to characterize which groups can occur as Galois groups of integrable or projectively integrable linear difference systems. In particular, such groups must be solvable. Finally, we give hypertranscendence criteria...|$|E
40|$|LolliMon [10] is {{a linear}} logic {{programming}} language that combines backward-chaining, backtracking semantics for the asynchronous connectives and forward-chaining, committed {{choice for the}} synchronous connectives. Mode, reduction, and termination properties are important correctness criteria that can be verified automatically of both backward-chaining and forward-chaining logic programs by establishing suitable <b>moding</b> and subterm relationships between a clause’s head and its subgoals. This work combines existing tech-niques for termination checking of backward-chaining higher-order intuitionistic logic programs and complexity analysis of forward-chaining first-order logic programs, by devising mode, reduction, and termination analyses for the linear logic programming setting in LolliMon. Note: This document was written as a project report for 15 - 819 K Logic Programming taught by Frank Pfenning {{in the fall of}} 2006...|$|E
30|$|In {{regard to}} the {{development}} <b>mode,</b> Shenzhen Metro mainly uses five different <b>modes,</b> i.e. independent development <b>mode,</b> agent development and BT construction <b>mode,</b> protocol type cooperation and BT construction <b>mode,</b> protocol type cooperation construction <b>mode</b> and legal person type cooperation <b>mode.</b>|$|R
30|$|Regarding diverse {{features}} and control requirements, control <b>modes</b> for wind farms, PV power station and storage plant {{are designed to}} cope with different scenarios. These control <b>modes</b> include output maximization <b>mode,</b> schedule tracking <b>mode,</b> output limit <b>mode,</b> reserve <b>mode</b> and automation <b>mode.</b>|$|R
50|$|Tetris: Axis {{features}} over 20 game <b>modes,</b> {{which are}} divided up into three <b>modes,</b> Feature <b>modes,</b> Party <b>modes,</b> and AR <b>modes.</b>|$|R
40|$|Abstract: In string theory, {{there are}} various {{physical}} situations where the worldsheet fields have a shifted <b>moding.</b> For instance, {{this is the case}} for the twisted closed string in ZN orbifold or for the charged open string in a constant electro-magnetic field. Because of this feature, it is quite challenging to give explicit formulae describing the string interaction, even for the bosonic case. In this note, we focus on the case of the charged open bosonic string and construct the 1 -loop tadpole which is an object generating all 1 -point functions from the annulus in the presence of an external field. In the operator formalism, this represents one of the basic building blocks {{for the construction of a}} general loop amplitude. ...|$|E
40|$|We {{present a}} type system for linear {{constraints}} over reals {{and its use}} in mode analysis of CLP programs. The type system is designed to reason about the properties of definiteness, lower and upper bounds of variables of a linear constraint. Two proof procedures are presented for checking validity of type assertions. The first one considers lower and upper bound types, and it relies on solving homogeneous linear programming problems. The second procedure, which deals with definiteness as well, relies on computing the Minkowski’s form of a parameterized polyhedron. The two procedures are sound and complete. We extend the approach to deal with strict inequalities and disequalities. Type assertions are at the basis of <b>moding</b> constraint logic programs. We extend the notion of well-moding from pure logic programming to CLP(R) ...|$|E
40|$|Clustering of {{dwell times}} in data from single-channel recordings, {{which is in}} excess of the value {{predicted}} from the probability density function (pdf) alone, provides restrictions on modeling schemes. Two methods, (a) the probability density function of the running median for groups of any size of sequential dwell times, and (b) the distribution of cumulative probabilities associated with dwell times separated by any lag, or the second cumulative probability distribution, are proposed as alternative representations of single-channel data; these methods are suitable for the detection of such clusters or modes. Simulation of three models with and without modes is done to test the efficacy of these methods. It is found that they often yield a better estimate of <b>moding</b> parameters than the methods of running mean pdf and autocorrelation...|$|E
5000|$|... 1997Depeche <b>Mode</b> - Ultra (album)Depeche <b>Mode</b> - [...] "The Bottom Line"Depeche <b>Mode</b> - [...] "It's No Good"Depeche <b>Mode</b> - [...] "Insight"Depeche <b>Mode</b> - [...] "Home"Depeche <b>Mode</b> - [...] "Barrel of a Gun" ...|$|R
50|$|The game {{features}} {{four main}} modes: Network <b>Mode,</b> Practice <b>Mode,</b> Battle <b>Mode</b> and Story <b>Mode.</b> The first allows online matches through the PlayStation Network (PSN), {{which may be}} ranked in world rankings. The Practice <b>Mode</b> features a regular training <b>mode,</b> a tutorial <b>mode</b> that teaches the basic controls, a mission <b>mode</b> that simulates battle situations, and a challenge <b>mode</b> that is focused on performing combos.|$|R
50|$|There {{is also a}} sub-mode of {{operation}} in 32-bit protected <b>mode</b> (a.k.a. 80386 protected <b>mode)</b> called virtual 8086 <b>mode,</b> also known as V86 <b>mode.</b> This is basically a special hybrid operating <b>mode</b> that allows real <b>mode</b> programs and operating systems to run while {{under the control of}} a protected <b>mode</b> supervisor operating system. This allows for a great deal of flexibility in running both protected <b>mode</b> programs and real <b>mode</b> programs simultaneously. This <b>mode</b> is exclusively available for the 32-bit version of protected mode; it does not exist in the 16-bit version of protected <b>mode,</b> or in long <b>mode.</b>|$|R
40|$|Abstract. We {{present a}} type system for linear {{constraints}} over reals {{and its use}} in mode analysis of CLP programs. The type system is designed to reason about the properties of definiteness, lower and upper bounds of variables of a linear constraint. Two proof procedures are presented for checking validity of type assertions. The first one considers lower and upper bound types, and it relies on solving homogeneous linear programming problems. The second procedure, which deals with definiteness as well, relies on computing the Minkowski’s form of a parameterized polyhedron. The two procedures are sound and complete. We extend the approach to deal with strict inequalities and disequalities. Type assertions are at the basis of <b>moding</b> constraint logic programs. We extend the notion of well-moding from pure logic programming to CLP(R) ...|$|E
40|$|The dynamic {{integrated}} test (DIT) {{has been}} designed to perform a final checkout of the assembled Space Shuttle vehicle at Kennedy Space Center. The fact that the vehicle is not in a laboratory environment for the test represents a significant constraint in that the use of test equipment is extremely limited, and environment models cannot be used. In essence, the DIT causes the vehicle to believe that it is flying, so that hardware and software systems are exercised much as they would be for a real flight. This technique provides a tool for verifying such items as data bus activity patterns, critical timing sequences, software and hardware <b>moding</b> as a function of flight parameters, absence of EMI problems and other systems interactions which cannot be tested fully in the laboratory...|$|E
40|$|Abstract We {{demonstrate}} how a purely declarative language, {{with the help}} of strict typing, precise <b>moding,</b> and determinism declarations, can be used to concisely and declaratively express database transactions, including updates. We have begun incorporating transactions into the Aditi deductive database system using an extended form of Mercury as the database programming and query language. 1 Introduction Ideally, a database programming language should be declarative and should possess a transaction framework within which both queries and database updates can be expressed. In this paper we present language constructs that take us closer to this ideal than previous proposals. We say a language is able to express queries and updates within a transaction framework if it allows a programmer to declare sets of actions that are to be treated as one atomic operation in a multi-user concurrent access database system...|$|E
50|$|There {{are four}} main imaging <b>modes</b> in SICM: constant-z <b>mode,</b> Direct current (constant distance) <b>mode,</b> {{alternating}} current <b>mode,</b> and hopping/backstep/standing approach <b>mode.</b>|$|R
40|$|In this paper, {{we discuss}} using CTR <b>mode,</b> another {{standard}} encryption <b>mode,</b> to attack other standard encryption <b>modes</b> and using other standard encryption <b>modes</b> to attack CTR <b>mode</b> under the related-mode attack model. In particular, we {{point out that}} when the adversary has access to an oracle under one proper <b>mode,</b> then almost all other related-cipher <b>modes,</b> whether they are encryption <b>modes</b> or authentication <b>modes</b> or authenticated encryption <b>modes,</b> can be attacked with ease under the related-mode attack model...|$|R
40|$|Generalised Hermite-Gaussian <b>modes</b> (gHG <b>modes),</b> an {{extended}} notion of Hermite-Gaussian <b>modes</b> (HG <b>modes),</b> are {{formed by the}} summation of normal HG <b>modes</b> with a characteristic function α, {{which can be used}} to unite conventional HG <b>modes</b> and Laguerre-Gaussian <b>modes</b> (LG <b>modes).</b> An infinite number of normalised orthogonal <b>modes</b> can thus be obtained by modulation of the function α. The gHG <b>mode</b> notion provides a useful tool in analysis of the deformation and transformation phenomena occurring in propagation of HG and LG <b>modes</b> with astigmatic perturbation. Comment: 10 pages, 4 figure...|$|R
