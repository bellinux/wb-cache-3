0|2081|Public
5000|$|The AF_NETLINK family offers <b>multiple</b> <b>protocol</b> subsets. Each <b>interfaces</b> to a {{different}} kernel component and has {{a different}} messaging subset. The following protocol is referenced in the field below: ...|$|R
50|$|Languages {{that allow}} only single inheritance, where a class can only derive from one base class, {{do not have}} the diamond problem. The {{reason for this is that}} such {{languages}} have at most one implementation of any method at any level in the inheritance chain regardless of the repetition or placement of methods. Typically these languages allow classes to implement <b>multiple</b> <b>protocols,</b> called <b>interfaces</b> in Java. These protocols define methods but do not provide concrete implementations. This strategy has been used by ActionScript, C#, D, Java, Nemerle, Object Pascal (Delphi), Objective-C, Smalltalk, Swift and PHP. All but Smalltalk allow classes to implement <b>multiple</b> <b>protocols.</b>|$|R
30|$|The network central {{controller}} (gateway) device can make remote control to room air conditioners and other electrical equipment, {{it can also}} develop personalized scenario model and control strategies of intelligent editing room through the system to achieve the purpose of energy saving. In order to support data acquisition for different types of energy metering devices, it requires <b>multiple</b> communication <b>protocols</b> <b>interface</b> to achieve multi-energy metering (including single-phase energy meter, three-phase power meter, multi-function power meter), water meter, gas meter, features hot (cold) scale and other parameters at the same time. Data gateway should support multiple metering devices for data acquisition.|$|R
40|$|In this study, {{we design}} a modular {{intelligent}} {{measurement and control}} unit applied to the on-site oil storage tank to meet acquisition and processing of signals from typical liquid level meters, pressure transmitters, temperature sensors and others with various parameters, <b>multiple</b> <b>protocols</b> and hardware <b>interfaces.</b> We transmit metering parameters of each oil tank to the upper management database through the standard CAN bus. On {{the basis of the}} equipment, the distributed measurement and control network for storage tanks of the oil depot is built, which can be adapted to features of storage tanks in the oil depot (scattered and widely distributed) and overcome shortcomings of various instruments in the traditional metering system, such as mutual imcompatibility, different complex structures, great integration difficulty and so forth...|$|R
40|$|We {{present an}} {{integrated}} telemetry data link and network architecture system solution, developed by Mayflower for the Air Force, AFFTC, Edwards AFB, CA, based on third generation UMTS cellular standards. The data link, called COTS Affordable Data Link System (CADLS), accommodates high mobility user applications typical of tactical fighter aircraft. The data network, called Telemetry/TSPI Data Network (TDN), uses enhancements {{such as a}} multi-tiered network protocol structure to provide flexible IP-based transport, work with <b>multiple</b> air <b>interface</b> <b>protocols,</b> accommodate test platform mobility, and integrate seamlessly with unified infrastructure such as Test and Training Enabling Architecture (TENA). The end-to-end CADLS/TDN datalink network system, described in this paper, is a 2 -way, asymmetric IP-based wireless network system, and as such it is a potential candidate technology to support th...|$|R
5000|$|Port (computer networking), a <b>protocol</b> <b>interface</b> to {{the network}} ...|$|R
40|$|This {{paper is}} focused on an {{efficient}} protocol implementation based on flexible user <b>protocol</b> <b>interface</b> (UPI) configurable for different service options and protocol processing architectures. The XTPL implementation discussed in this paper is developed based on the BERKOM eXpress Transfer Protocol (XTP) Lite version for HP 9000 / 7 x Series using HP-UX 9. 0 operating system. This implementation supports the dynamical configuration of user <b>protocol</b> <b>interfaces</b> intended to provide different objectives: - optimization of the user data copy operations (use of the "single copy archtecture") - selectable QoS options for application layer framing, reliability and checksumming. Performance analyses are included to show the flexible use of user <b>protocol</b> <b>interfaces,</b> in particular the reliable single and dual copy interface, dependent on the application traffic of the connections. Keywords: User <b>Protocol</b> <b>Interface,</b> Application Programming Interface (API), Application Layer Framing, Single Copy [...] . ...|$|R
25|$|Contacts with <b>multiple</b> <b>protocols</b> can {{be grouped}} into one single contact instead of {{managing}} <b>multiple</b> <b>protocols,</b> and contacts {{can be given}} aliases or placed into groups.|$|R
50|$|Examples {{of attack}} vectors include user input fields, <b>protocols,</b> <b>interfaces,</b> and services.|$|R
5000|$|... naim {{is another}} text-based {{messaging}} client with support for <b>multiple</b> <b>protocols</b> ...|$|R
50|$|The OIF has {{published}} numerous older <b>protocol</b> <b>interfaces</b> including a generic framer interface called CEI-P. The OIF also publishes numerous older IAs of the Network Processing Forum.|$|R
5000|$|... <b>multiple</b> <b>protocols</b> HTML/XML, REST, ATOM and RSS, RTF and CSV, JSON, JSON-RPC and XML-RPC, AMF-RPC (Flash/Flex), and SOAP; ...|$|R
40|$|We {{investigate}} the multiple teleportation with some nonmaximally entangled channels. The efficiencies of two <b>multiple</b> teleportation <b>protocols,</b> the separate <b>multiple</b> teleportation <b>protocol</b> (SMTP) {{and the global}} <b>multiple</b> teleportation <b>protocol</b> (GMTP), are calculated. We show that GMTP is more efficient than SMTP. Comment: 4 pages, 2 figure...|$|R
50|$|In 1985, Aitech {{developed}} {{under contract}} for US TACOM, the first conduction-cooled 6U VMEbus board. Although electrically providing a compliant VMEbus <b>protocol</b> <b>interface,</b> mechanically, this board was not interchangeable {{for use in}} air-cooled lab VMEbus development chassis.|$|R
50|$|The ZeBu {{emulator}} supports operational modes for hardware {{description language}} (HDL) acceleration, ANSI C++/SystemC/SystemVerilog transaction-based co-emulation, where the testbench described at high-level of abstraction drives the design mapped in ZeBu via communication <b>protocol</b> <b>interfaces</b> called transactors, and an in-circuit emulator mode.|$|R
40|$|Abstractâ€”Many {{previous}} studies {{have pointed out that}} in the directory based cache coherent multiprocessors protocol processing happens to be a bottleneck and having <b>multiple</b> <b>protocol</b> engines per memory controller increases the throughput of the machines sometimes almost linearly. In this project we modeled a distributed shared memory (DSM) multiprocessor with <b>multiple</b> <b>protocol</b> engines and run memory intensive micro benchmarks on it to see if protocol processing is actually a bottleneck. We implemented a dynamic address partitioning scheme for selecting protocol engines. We wanted to check the claims about the increased throughputs due to <b>multiple</b> <b>protocol</b> processors. Also we wanted to check the levels of load balancing achieved. The simulation results showed almost no improvement in execution times. Also, the time spent in protocol handling was very less which suggested that there is no bottleneck in protocol processing...|$|R
50|$|As an {{object-oriented}} programming language, Logtalk's major features include support for both classes (with optional metaclasses) and prototypes, parametric objects, <b>protocols</b> (<b>interfaces),</b> categories (components, aspects, hot patching), multiple inheritance, public/protected/private inheritance, event-driven programming, high-level multi-threading programming, reflection, and automatic generation of documentation.|$|R
50|$|The {{framework}} {{embraces the}} model-view-controller (MVC) software design pattern by partitioning functional components into packages. This concept is taken {{a step further}} by providing an abstract network <b>interface</b> so custom <b>protocols</b> can be implemented without affecting system models. Examples include the Distributed Interactive Simulation (DIS) <b>protocol</b> <b>interface.</b>|$|R
40|$|A <b>Multiple</b> Access <b>Protocol</b> is {{an access}} {{mechanism}} {{and a set}} of rules for successful transmission of information using a common medium. In this paper, the <b>multiple</b> access <b>protocols</b> studied are those used in communication systems in which the resource to be shared is the communication channel. For wireless communication efficient resource utilization relies upon effective sharing of the available medium. Contention based random <b>multiple</b> access <b>protocols,</b> specifically the repeated contention based random <b>multiple</b> access <b>protocols</b> such as pure-ALOHA, slotted-ALOHA, Carrier Sense Multiple Access and Inhibit Sense <b>Multiple</b> Access <b>protocols,</b> are studied and the results presented. The protocols have been evaluated based on the quality of service parameters such as offered traffic, throughput, delay and capture effect. The simulations were carried out using MATLAB v 7. 0...|$|R
5000|$|Use of standard, open, {{general-purpose}} <b>protocols</b> and <b>interfaces</b> ...|$|R
5000|$|Both DataFlash and EEPROM chips can be {{accessed}} from a microcontroller, using a 4-wire Serial Peripheral Interface Bus (SPI bus). Both are available in small 8 pin packages. The <b>protocol</b> <b>interfaces</b> are very similar; in both cases, bytes are written or read, via SPI, one or more bytes at a time.|$|R
50|$|An EtherType {{field in}} each frame {{is used by}} the {{operating}} system on the receiving station to select the appropriate protocol module (e.g., an Internet Protocol version such as IPv4). Ethernet frames are said to be self-identifying, because of the frame type. Self-identifying frames make it possible to intermix <b>multiple</b> <b>protocols</b> on the same physical network and allow a single computer to use <b>multiple</b> <b>protocols</b> together. Despite the evolution of Ethernet technology, all generations of Ethernet (excluding early experimental versions) use the same frame formats. Mixed-speed networks can be built using Ethernet switches and repeaters supporting the desired Ethernet variants.|$|R
50|$|In {{addition}} to measures, PhenX also defines protocols. There may be <b>multiple</b> <b>protocols</b> defined for a measure. For example, for smoking cessation, {{there is an}} adult protocol (id: 030901) and adolescent protocol (id:030902).|$|R
50|$|<b>Multiple</b> <b>protocols</b> often {{describe}} {{different aspects}} of a single communication. A group of protocols designed to work together are known as a protocol suite; when implemented in software they are a protocol stack.|$|R
5000|$|In 2006, Comcast {{implemented}} measures using Sandvine hardware which sends forged TCP RST (reset) packets, disrupting <b>multiple</b> <b>protocols</b> used by peer-to-peer {{file sharing}} networks. [...] This prevented most Comcast users from uploading files.|$|R
40|$|Abstract 1 Advances in {{communication}} rates exceed {{the ability of}} a single source to fully utilize a gigabit WAN channel with existing deterministic protocols. Parallel communication describes a method for reducing latency by managing indeterminism and increasing channel utilization, given a surplus bandwidth-delay product. It involves a nondeterministic state mechanism, with a modified <b>protocol</b> <b>interface.</b> ...|$|R
5000|$|DMS XML: {{a simple}} XML <b>protocol</b> for <b>interfacing</b> with {{external}} DMS systems ...|$|R
5000|$|TR-30 [...] Multi-Media Access, <b>Protocols</b> and <b>Interfaces</b> - {{develops}} {{terminal equipment}} standards ...|$|R
5000|$|Another driver type is NDIS Intermediate Driver. Intermediate drivers sit {{in-between}} the MAC and IP {{layers and}} can control all traffic being {{accepted by the}} NIC. In practice, intermediate drivers implement both miniport and <b>protocol</b> <b>interfaces.</b> The miniport driver and protocol driver actually communicate with the corresponding miniport and <b>protocol</b> <b>interfaces</b> that reside in the intermediate driver. This design enables adding several chained intermediate drivers between the miniport and protocol drivers. Therefore, driver vendors cannot assume that the interface that they send traffic to is implemented by the last driver in the chain. In order to write applications using NDIS one can use samples that accompany Microsoft's Windows Driver Kit (WDK). The [...] "PassThru" [...] sample is {{a good starting point}} for intermediate drivers as it implements all the necessary details required in this driver type, but just passes the traffic through to the next driver in the chain.|$|R
50|$|Abstraction of transport/protocol {{connectivity}} is {{the ability}} to connect to various components or services through <b>multiple</b> <b>protocols</b> without code change or addition, via change to a standard configuration file. Connectivity abstraction may be achieved through a service transport protocol implementation.|$|R
40|$|<b>Multiple</b> key {{agreement}} <b>protocols</b> produce several {{session keys}} {{instead of one}} session key. Most of the <b>multiple</b> key agreement <b>protocols</b> do not utilize the hash functions in the signature schemes used for identification. Not using hash function in these protocols causes that the protocols do not satisfy some requirement security properties. In this paper we review the <b>multiple</b> key agreement <b>protocols</b> and perform attacks on some of them. Then we introduce a new <b>multiple</b> key agreement <b>protocol</b> and show that the proposed protocol is more secure than the existent <b>multiple</b> key agreement <b>protocols...</b>|$|R
40|$|Collaborating users {{need to move}} terabytes of data {{among their}} sites, often {{involving}} <b>multiple</b> <b>protocols.</b> This process is very fragile and involves considerable human involvement to deal with failures. In this work, we propose data pipelines, an automated system for transferring data among collaborating sites. It speaks <b>multiple</b> <b>protocols,</b> has sophisticated flow control and recovers automatically from network, storage system, software and hardware failures. We successfully used data pipelines to transfer three terabytes of DPOSS data from SRB mass storage server at San Diego Supercomputing Center to UniTree mass storage at NCSA. The whole process did not require any human intervention and the data pipeline recovered automatically from various network, storage system, software and hardware failures...|$|R
5|$|The program employs its own {{communication}} protocol layered {{on top of}} a schema to communicate to other nodes. This communication <b>protocol</b> <b>interfaces</b> with the BEEP infrastructure, a network application protocol framework. Computers discovered by the Xgrid system, that is computers with Mac OS X's Xgrid service enabled, are automatically added to the list of available computers to use for processing tasks.|$|R
50|$|A plug-compatible {{machine is}} one that has been {{designed}} to be backward compatible with a prior machine. In particular, a new computer system that is plug-compatible has not only the same connectors and <b>protocol</b> <b>interfaces</b> to peripherals, but also binary code compatibilityâ€”it runs the same software as the old system. A plug compatible manufacturer or PCM is a company that makes such products.|$|R
50|$|DMR-800D C1D2 - A Class 1 Division 2 {{certified}} satellite transceiver {{that allows}} monitoring of assets, processes and environments in hazardous locations. The product includes a RS-485 serial interface for connection to SCADA devices, Modbus <b>protocol</b> <b>interfaces</b> for implementing reporting and telemetry capabilities of remote equipment and discrete input/output feeds for {{monitoring and control}} of local devices not using Modbus.|$|R
50|$|The program employs its own {{communication}} protocol layered {{on top of}} a schema to communicate to other nodes. This communication <b>protocol</b> <b>interfaces</b> with the BEEP infrastructure, a network application protocol framework. Computers discovered by the Xgrid system, that is computers with Mac OS X's Xgrid service enabled, are automatically added to the list of available computers to use for processing tasks.|$|R
