0|16|Public
50|$|Provided batch-processing and {{simultaneous}} execution, subsequently enhance {{to provide}} a <b>multitasking</b> <b>mode.</b>|$|R
30|$|Due to the interruptible and nonpreemptive characterises, etasks are {{performed}} in a typical event-driven mode. An active etask runs to completion until all threads of this etask has been terminated. In view of the interruptible and preemptive characteristics, threads {{are performed}} in a typical <b>multitasking</b> <b>mode.</b> The elected thread can preempt any other lower priority threads at any execution point outside of system critical section.|$|R
3000|$|The {{investigation}} of the computed power figures for the <b>Multitasking</b> operation <b>mode</b> (cf. Fig. 4) reveals a maximum power consumption reduction of 81.5 % in case of instruction memory. As for the Combined setup, an increase of the mems [...]...|$|R
5000|$|The G Flex {{ships with}} Android 4.2.2 [...] "Jelly Bean" [...] {{with a similar}} user {{interface}} and software to the G2. Several minor new features were added, including a [...] "dual-window" [...] split-screen <b>multitasking</b> <b>mode,</b> and alongside the G2's existing optimization options for one-handed use, the ability to slide all of the on-screen navigation keys {{to one side of}} the screen. Aside from the lack of optical image stabilization (which was excluded because it would make the image sensor too tall for the device's body), the G Flex's 13-megapixel camera is similar to the G2, with the addition of a new [...] "Face Tracking" [...] shooting mode to assist users in taking photos containing themselves with the rear-facing camera, which automatically focuses on the user's face, and uses the power button's notification LED as a status light.|$|R
50|$|DESQview (DV) was a text <b>mode</b> <b>multitasking</b> {{operating}} environment developed by Quarterdeck Office Systems which enjoyed modest {{popularity in the}} late 1980s and early 1990s. Running on top of DOS, it allowed users to run multiple programs concurrently in multiple windows.|$|R
40|$|In a {{large-scale}} computing cluster, the job completions can be substantially delayed due to two sources of variability, namely, {{variability in the}} job size {{and that in the}} machine service capacity. To tackle this issue, existing works have proposed various scheduling algorithms which exploit redundancy wherein a job runs on multiple servers until the first completes. In this paper, we explore the impact of variability in the machine service capacity and adopt a rigorous analytical approach to design scheduling algorithms using redundancy and checkpointing. We design several online scheduling algorithms which can dynamically vary the number of redundant copies for jobs. We also provide new theoretical performance bounds for these algorithms in terms of the overall job flowtime by introducing the notion of a speedup function, based on which a novel potential function can be defined to enable the corresponding competitive ratio analysis. In particular, by adopting the online primal-dual fitting approach, we prove that our SRPT+R Algorithm in a non-multitasking cluster is (1 +ϵ) -speed, O(1 /ϵ) -competitive. We also show that our proposed Fair+R and LAPS+R(β) Algorithms for a multitasking cluster are (4 +ϵ) -speed, O(1 /ϵ) -competitive and (2 + 2 β + 2 ϵ) -speed O(1 /βϵ) -competitive respectively. We demonstrate via extensive simulations that our proposed algorithms can significantly reduce job flowtime under both the non-multitasking and <b>multitasking</b> <b>modes...</b>|$|R
30|$|HEROS proposes an Etask/Thread modular {{architecture}} and adopts a tuple-based IN/OUT primitive communication mechanism to provide both event-driven and real-time <b>multitasking</b> operation <b>modes.</b> CIVIC adopts the DANKAB mechanisms {{to provide a}} resource-awareness and rapid convergence routing algorithm. By these designs, this system can adapt to {{a wider range of}} IVC applications. At present, the CIVIC protocol has been ported on HEROS to perform the real-time multitasking and event-driven WSN applications. The experiment results in Section 5 show that this embedded system has small resource consumption and is adaptable to different applications. Moreover, thanks to low message-sending delay, the present design may be used to implement low cost embedded collision avoidance device by combining GPS receiver and IVC data.|$|R
50|$|DESQview was a text <b>mode</b> <b>multitasking</b> program {{introduced}} in July 1985. Running {{on top of}} MS-DOS, it allowed users to run multiple DOS programs concurrently in windows. It was the first program to bring multitasking and windowing capabilities to a DOS environment in which existing DOS programs could be used. DESQview was not a true GUI but offered certain components of one, such as resizable, overlapping windows and mouse pointing.|$|R
50|$|Thereby, the {{previously}} loaded DOS environment including all its device drivers {{became part of}} the system domain under the multitasker. Unless specific protected mode virtual device drivers were loaded, hardware access got tunneled through this 16-bit sub-system by default. For maximum speed at minimum resource footprint, the DR DOS BIOS, BDOS kernel, device drivers, memory managers and the multitasker were written in pure x86 assembly language. Apple's port of System 7.1 would run on top of this high-performance yet light-weight hybrid 32-bit/16-bit protected <b>mode</b> <b>multitasking</b> environment as a graphical system and shell in user space. Macintosh resource forks and long filenames were mapped onto the FAT12 and FAT16 file systems.|$|R
40|$|Cognitive {{control is}} defined {{by a set of}} neural {{processes}} that allow us to interact with our complex environment in a goal-directed manner 1. Humans regularly challenge these control processes when attempting to simultaneously accomplish multiple goals (i. e., multitasking), generating interference as the result of fundamental information processing limitations 2. It is clear that multitasking behavior has become ubiquitous in today’s technologically-dense world 3, and substantial evidence has accrued regarding multitasking difficulties and cognitive control deficits in our aging population 4. Here we show that multitasking performance, as assessed with a custom-designed 3 -D video game (NeuroRacer), exhibits a linear age-related decline from 20 – 79 years of age. By playing an adaptive version of NeuroRacer in <b>multitasking</b> training <b>mode,</b> older adults (60 – 85 y. o.) reduced multitasking costs compared to both an active control group and a no-contact control group, attaining levels beyond that of untrained 20 year olds, with gains persisting for six months. Furthermore, age-related deficits in neural signatures of cognitive control, as measured with electroencephalography, were remediated by multitasking training (i. e., enhanced midline frontal theta power and frontal-posterior theta coherence). Critically, this training resulted i...|$|R
5|$|It was {{confirmed}} on June 8, 2015, at Apple's WWDC that the iPad 2 would support iOS 9. This makes the iPad 2 the first iPad and only iOS device to support six major versions of iOS. As with previous releases, though, many headline features are unavailable on the iPad 2, including predictive Siri, translucency effects, split-view, slide-over and picture-in-picture <b>multitasking,</b> Low Power <b>Mode</b> and the Health app. iOS 9 {{is said to}} feature performance improvements that may help the aging device function more smoothly, and initial tests suggest {{that it did not}} significantly impact available space. Other A5-based devices will also support iOS 9 including the iPhone 4S (five major iOS versions), the iPad Mini (four major iOS versions) and iPod Touch 5G (four major iOS versions).|$|R
30|$|Optimizing {{individual}} applications had average execution times of 1.95 s for RAM models and 21.7 s for ROM models, which proves {{the efficiency of}} our approach. We attribute the high performance {{to the fact that}} we do not map application profiles to individual memory instances but only to memory types and the ILP solver chooses the ideal number of instances. The consideration of multiple applications in the other operation modes results in more ILP variables and thus in a slight increase of execution times, e.g., for the <b>Multitasking</b> operation <b>mode</b> to 6.71 s for the RAM model and 138.13 s in case of ROM. Strikingly, even more time is required for the Combined optimization processes. With 19.92 s for data memory, we are still in a reasonable range; however, 97.36 min for instruction memory appears to be disproportionately large, compared to the other values. The main explanation for this lengthy execution time is the depletion of the host machine’s main memory. Even though 128 GB constitutes a considerable amount of RAM resources, some optimization problems go beyond this scope, which results in swap operations to the file system. This severely slows down the whole optimization process, which results in execution times in the range of over an hour, as for the example above. Nevertheless, as our main focus lies on application specific and highly optimized systems-on-chips we still consider those times as reasonable commitment in exchange for a power-optimal memory configuration.|$|R
50|$|When Microsoft {{announced}} Windows in November 1983, International Business Machines (IBM), Microsoft's important {{partner in}} popularizing MS-DOS for the IBM PC, notably did not announce {{support for the}} forthcoming window environment. IBM determined that the microcomputer market needed a multitasking environment. When it released TopView in 1985, the press speculated that the software {{was the start of}} IBM's plan to increase its control over the IBM PC (even though nothing about the IBM PC was proprietary (including the BIOS which was published to the world)) by creating a proprietary operating system for it, similar to what IBM had offered for years on its larger computers. TopView also allowed IBM to serve customers who were surprised that the new IBM AT did not come with an operating system able to use the hardware <b>multitasking</b> and protected <b>mode</b> features of the new 80286 CPU, as DOS and most applications were still running in 8086/8088 real mode.|$|R
40|$|Abstract—Intelligent {{opponent}} behavior {{helps make}} video games interesting to human players. Evolutionary computation can discover such behavior, {{especially when the}} game consists of a single task. However, multitask domains, in which separate tasks within the domain each have their own dynamics and objectives, can be challenging for evolution. This paper proposes two methods for meeting this challenge by evolving neural networks: 1) Multitask Learning provides a network with distinct outputs per task, thus evolving a separate policy for each task, and 2) Mode Mutation provides a means to evolve new output modes, {{as well as a}} way to select which mode to use at each moment. Multitask Learning assumes agents know which task they are currently facing; if such information is available and accurate, this approach works very well, as demonstrated in the Front/Back Ramming game of this paper. In contrast, Mode Mutation discovers an appropriate task division on its own, which may in some cases be even more powerful than a human-specified task division, as shown in the Predator/Prey game of this paper. These results demonstrate the importance of both <b>Multitask</b> Learning and <b>Mode</b> Mutation for learning intelligent behavior in complex games. I...|$|R
40|$|KNET {{facilitates}} {{distributed computing}} between a UNIX compatible local host and a remote host {{which may or}} may not be UNIX compatible. It is capable of automatic remote login. That is, it performs on the user's behalf the chore of handling host selection, user name, and password to the designated host. Once the login has been successfully completed, the user may interactively communicate with the remote host. Data output from the remote host may be directed to the local screen, to a local file, and/or to a local process. Conversely, data input from the keyboard, a local file, or a local process may be directed to the remote host. KNET takes advantage of the <b>multitasking</b> and terminal <b>mode</b> control features of the UNIX operating system. A parent process is used as the upper layer for interfacing with the local user. A child process is used for a lower layer for interfacing with the remote host computer, and optionally one or more child processes can be used for the remote data output. Output may be directed to the screen and/or to the local processes under the control of a data pipe switch. In order for KNET to operate, the local and remote hosts must observe a common communications protocol. KNET is written in ANSI standard C-language for computers running UNIX. It has been successfully implemented on several Sun series computers and a DECstation 3100 and used to run programs remotely on VAX VMS and UNIX based computers. It requires 100 K of RAM under SunOS and 120 K of RAM under DEC RISC ULTRIX. An electronic copy of the documentation is provided on the distribution medium. The standard distribution medium for KNET is a. 25 inch streaming magnetic tape cartridge in UNIX tar format. It is also available on a 3. 5 inch diskette in UNIX tar format. KNET was developed in 1991 and is a copyrighted work with all copyright vested in NASA. UNIX is a registered trademark of AT&T Bell Laboratories. Sun and SunOS are trademarks of Sun Microsystems, Inc. DECstation, VAX, VMS, and ULTRIX are trademarks of Digital Equipment Corporation...|$|R

