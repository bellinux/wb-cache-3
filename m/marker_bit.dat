3|14|Public
5000|$|Bit 0 is {{the frame}} <b>marker</b> <b>bit</b> Pr. Every 10th bit {{starting}} with bit 9, 19, 29, ... 99 {{is also a}} <b>marker</b> <b>bit,</b> known as position identifiers P1, P2, ..., P9, P0. Thus, two marker bits in a row (P0 followed by Pr) {{marks the beginning of}} a frame. The frame encodes the time of {{the leading edge of the}} frame <b>marker</b> <b>bit.</b>|$|E
50|$|During a leap second, bit 59 (a <b>marker</b> <b>bit</b> with a phase-modulated code of 0) is {{transmitted}} again.|$|E
50|$|P0 {{is always}} the last second of a minute. In {{the event of a}} leap second, an {{additional}} 0 bit in inserted before it, and the <b>marker</b> <b>bit</b> is transmitted during second 60. LS1 and LS2 are normally both 0. Both bits are set to announce an inserted leap second {{at the end of the}} current UTC month.|$|E
5000|$|Unassigned 9-bit fields between {{consecutive}} <b>marker</b> <b>bits</b> {{are available}} for user-defined [...] "control functions". For example, the IEEE 1344 standard defines functions for bits 60-75.|$|R
3000|$|Since this {{guard time}} is only {{required}} for bits transmitted by a reader, the time penalty {{depends on the}} number of bits transmitted by readers. As mentioned before, the main information sent by readers to tags is frame size and session numbers and slot <b>marker</b> <b>bits</b> sent by readers to count down slots. Thus, if [...]...|$|R
40|$|In this paper, {{we present}} a {{recognition}} algorithm to iden-tify visual code markers embedded in a camera-phone im-age. The algorithm is capable of detecting code markers with arbitrary rotation, tilting and perspective distortion. It can also read the <b>marker</b> <b>bits</b> by mapping the image coor-dinates to the code marker coordinates. The algorithm can effectively recognize visual code markers in a time-efficient manner, without making any assumptions about the charac-teristics of the camera used for capturing the image. 1...|$|R
40|$|This article {{describes}} how a search tree {{can be extended}} {{in order to allow}} efficient access to predefined subsets of the stored elements. This is achieved by marking some of the elements of the search tree with <b>marker</b> <b>bits.</b> We show that our approach does not affect the asymptotic logarithmic complexity for existing operations. At the same time, it is beneficial because the modified search tree can now efficiently support requests on predefined subsets of the search elements that it previously could not...|$|R
50|$|As with WWVB, seconds 0, 9, 19, 29, 39, 49 and 59 of each minute are <b>marker</b> <b>bits.</b> The {{remaining}} 53 encode Japan Standard Time using binary-coded decimal. JST {{does not}} include summer time, but bits are reserved to handle it. Leap second warning bits are also provided, these announce leap seconds starting {{at the beginning of}} the UTC month (09:00 JST on the first day of the month), and ending with the leap second insertion (just after 08:59 JST on the first day of the following month).|$|R
40|$|Abstract—A {{traditional}} {{search tree}} allows for efficient sequen-tial {{access to the}} elements of the tree. In addition, a search tree allows for efficient insertion of new elements and efficient deletion of existing elements. In this article we show how to extend the capabilities of a search tree by presenting an algorithm for efficient access to predefined subsets of the indexed elements. This is achieved by marking some of {{the elements of the}} search tree with <b>marker</b> <b>bits.</b> In addition, our algorithm allows us to efficiently retrieve the indexed elements in either ascending or descending direction relative to each of the ordering attributes. Index Terms—marker bits; search trees; ordering directions; data structures I...|$|R
50|$|Both {{the average}} phase {{and the average}} {{frequency}} deviation are thus zero. Additional non-timing data is sent by phase modulation {{during the rest of}} each second. But the second <b>marker</b> (and data <b>bit)</b> is always preceded by 100 ms without any phase modulation. The signal is not phase-modulated at all during the 59th second past the minute.|$|R
40|$|ITC/USA 2014 Conference Proceedings / The Fiftieth Annual International Telemetering Conference and Technical Exhibition / October 20 - 23, 2014 / Town and Country Resort & Convention Center, San Diego, CAThis paper {{presents}} algorithms for {{estimating the}} frequency offset, multipath channel coefficients, and noise variance of iNET-formatted SOQPSK-TG. The estimators compare the received signal samples {{corresponding to the}} iNET preamble and attached sync <b>marker</b> (ASM) <b>bits</b> to a locally stored copy of the SOQPSK-TG samples corresponding to the same. The mean and variance of the three estimators over ten test channels derived from channel sounding experiments at Edwards AFB is presented. The results show that usable estimates are achievable...|$|R
40|$|ITC/USA 2014 Conference Proceedings / The Fiftieth Annual International Telemetering Conference and Technical Exhibition / October 20 - 23, 2014 / Town and Country Resort & Convention Center, San Diego, CAIn {{this work}} we {{investigate}} {{the effect of}} using different values of the radius in a constant modulus algorithm (CMA) equalizer for shaped offset quadrature-phase shift keying (SOQPSK), which is transmitted using the iNET data packet structure. The iNET packet structure contains known data bits (the preamble and asynchronous <b>marker</b> (ASM) <b>bits)</b> within each data packet, and these are used to initialize a block processing CMA algorithm. Two real-time processing methods are investigated here, which {{are referred to as}} the 'Single block processing' and the 'Block-by-block processing' methods. Both processing methods require that a number of data packets be discarded while the CMA equalizer converges. In this work we will investigate the effect on the performance of the CMA equalizer of changing its equalizing radius, and also the effect of processing different numbers of data packets based on the same initialization. Based on the results of these tests, a final choice of parameters will be made and we will produce a bit error rate curve for a single telemetry channel...|$|R
40|$|This paper {{presents}} the results of using the constant modulus algorithm (CMA) to recover a shaped offset quadrature-phase shift keying (SOQPSK) -TG modulated signal, which has been transmitted over an aeronautical telemetry channel using the iNET data packet structure. The iNET-packet structure contains known data bits (the preamble and asynchronous <b>marker</b> (ASM) <b>bits)</b> within each data packet, which can be used to determine the minimum mean square error (MMSE) equalizer and is then used as an initializer for the CMA algorithm. A baseline analysis of the performance of the MMSE-initialized CMA equalizer has been previously done using average bit error rates (BER). In order to achieve real-time processing, in this implementation the CMA equalizer weights are updated using a new data packet for each adaptation of the equalizer during which the bit error analysis is being done. Two implementations of the block processing CMA are compared. The first achieves convergence of the equalizer in the startup phase by processing a single fixed packet and the second achieves convergence by processing the multiple packets of received data. Performance evaluation results based on bit error rates, are presented for these two methods and they are compared to a previously determined baseline performance. We note that with the proper choice of parameters these real-time methods can achieve the baseline performance...|$|R
40|$|ITC/USA 2014 Conference Proceedings / The Fiftieth Annual International Telemetering Conference and Technical Exhibition / October 20 - 23, 2014 / Town and Country Resort & Convention Center, San Diego, CAThis paper {{presents}} the results of using the constant modulus algorithm (CMA) to recover a shaped offset quadrature-phase shift keying (SOQPSK) -TG modulated signal, which has been transmitted over an aeronautical telemetry channel using the iNET data packet structure. The iNET-packet structure contains known data bits (the preamble and asynchronous <b>marker</b> (ASM) <b>bits)</b> within each data packet, which can be used to determine the minimum mean square error (MMSE) equalizer and is then used as an initializer for the CMA algorithm. A baseline analysis of the performance of the MMSE-initialized CMA equalizer has been previously done using average bit error rates (BER). In order to achieve realtime processing, in this implementation the CMA equalizer weights are updated using a new data packet for each adaptation of the equalizer during which the bit error analysis is being done. Two implementations of the block processing CMA are compared. The first achieves convergence of the equalizer in the startup phase by processing a single fixed packet and the second achieves convergence by processing the multiple packets of received data. Performance evaluation results based on bit error rates, are presented for these two methods and they are compared to a previously determined baseline performance. We note that with the proper choice of parameters these real-time methods can achieve the baseline performance...|$|R
25|$|The second entry (cluster 1 in the FAT) {{nominally}} stores the end-of-cluster-chain marker as {{used by the}} formater, {{but typically}} always holds 0xFFF / 0xFFFF / 0x0FFFFFFF, that is, {{with the exception of}} bits 31-28 on FAT32 volumes these bits are normally always set. Some Microsoft operating systems, however, set these bits if the volume is not the volume holding the running operating system (that is, use 0xFFFFFFFF instead of 0x0FFFFFFF here). (In conjunction with alternative end-of-chain <b>markers</b> the lowest <b>bits</b> 2-0 can become zero for the lowest allowed end-of-chain marker 0xFF8 / 0xFFF8 / 0x?FFFFFF8; bit 3 should be reserved as well given that clusters 0xFF0 / 0xFFF0 / 0x?FFFFFF0 and higher are officially reserved. Some operating systems {{may not be able to}} mount some volumes if any of these bits are not set, therefore the default end-of-chain marker should not be changed.) For DOS 1 and 2, the entry was documented as reserved for future use.|$|R
40|$|International Telemetering Conference Proceedings / October 30 -November 02, 1995 / Riviera Hotel, Las Vegas, NevadaTo support {{initiatives}} for cheaper, faster, better ground telemetry systems, the Data Systems Technology Division (DSTD) at NASA Goddard Space Flight Center {{is developing}} a new Very Large Scale Integration (VLSI) Application Specific Integrated Circuit (ASIC) targeted to dramatically {{lower the cost of}} telemetry frame synchronization. This single VLSI device, known as the Parallel Integrated Frame Synchronizer (PIFS) chip, integrates most of the functionality contained in high density 9 U VME card frame synchronizer subsystems currently in use. In 1987, a first generation 20 Mbps VMEBus frame synchronizer based on 2. 0 micron CMOS VLSI technology was developed by Data Systems Technology Division. In 1990, this subsystem architecture was recast using 0. 8 micron ECL & GaAs VLSI to achieve 300 Mbps performance. The PIFS chip, based on 0. 7 micron CMOS technology, will provide a superset of the current VMEBus subsystem functions at rates up to 500 Mbps at approximately one-tenth current replication costs. Functions performed by this third generation device include true and inverted 64 <b>bit</b> <b>marker</b> correlation with programmable error tolerances, programmable frame length and marker patterns, programmable search-check-lock-flywheel acquisition strategy, slip detection, and CRC error detection. Acquired frames can optionally be annotated with quality trailer and time stamp. A comprehensive set of cumulative accounting registers are provided on-chip for data quality monitoring. Prototypes of the PIFS chip are expected in October 1995. This paper will describe the architecture and implementation of this new low-cost high functionality device...|$|R

