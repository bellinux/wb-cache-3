2|27|Public
40|$|The {{revision}} {{was developed}} by the UN/CEFACT ICG for the purposes of correct formatting of a UN/EDIFACT message GOVCBR introduced if the release D. 09 A. The modification concerns the size of the number of characters needed for section 4. 3. 1, the segment table. This has now been increased from its initial size of 70 characters to 75 characters. The change may cause problems with programs that extract the information from the <b>message</b> <b>directory</b> (EDMD). This document is for information. ECE/TRADE/C/CEFACT/ 2009 /MISC. 1 ECE/TRADE/C/CEFACT/ 2009 /MISC. ...|$|E
40|$|Analyses of {{solutions}} for large-scale optimization models {{are very difficult}} without effective computer aids. Solution reports may require weeks to design, implement and produce with conventional report writing systems. The reports produced are voluminous, often exceeding 100, 000 printed lines, and are thus quite awkward to access manually. Timely and economic analysis {{of solutions}} to large models is further hindered by inflexible and costly report writing software and procedures. ATHENA has been developed to allow extremely efficient immediate interactive storage {{and analysis of the}} solution file from any optimization system. ATHENA is easy to learn and use; user friendly features are provided which can preemptively assess the potential cost and implications of each request for solution information, assist the confused user, and provide the required solution information with very fast response time. The user is provided with extensive search under mask and compound logical relational constructs, as well as the capability to quickly diagnose suspicious model symptoms, and to format and issue offline reports. ATHENA is implemented in portable FORTRAN, with a parser and interpreter easily modified and expanded to suit particular hardware environments and user demands. The system has been initially designed and tuned for large-scale problems with up to 30, 000 rows and columns. Live test demonstrations show that the system exhibits very fast response time in actual use. This report presents a users manual for the prototype ATHENA query language, an error <b>message</b> <b>directory,</b> and a description of interface and extension provisionsPrepared for: Naval Postgraduate School, Monterey, California[URL] Postgraduate School, Monterey, CA. N...|$|E
40|$|Comiso team, whose task is {{to provide}} the french and {{european}} R&D community with value added network services and to experiment new services and technologies. The domains of activities of the team include Mail and <b>Messaging,</b> <b>Directory</b> services and distributed information service. Paul-Andr√© Pays is conveno...|$|R
50|$|He founded Isode Limited in 1992, {{focusing}} on high end <b>messaging</b> and <b>directory</b> products, initially employing the ISODE codebase.|$|R
50|$|Apptix's {{services}} include Microsoft Exchange email, VoIP phone service, Microsoft SharePoint collaboration services, web conferencing/secure IM, email encryption, {{mobile device}} management and <b>messaging,</b> Active <b>Directory</b> management, and archiving and backup services.|$|R
50|$|MAPI uses {{functions}} {{loosely based}} on the X.400 XAPIA standard. It includes facilities to access message transports, <b>message</b> stores, and <b>directories.</b>|$|R
50|$|Maildir is a newer {{specification}} {{that provides}} for storing all <b>messages</b> in a <b>directory</b> tree, with one file for each message.|$|R
40|$|Two key {{international}} standards for <b>messaging</b> and <b>directory</b> services are evaluated using a prototype system. The {{aim is to}} develop a graphical user interface reference model that can be used by implementors to guide and benchmark their own development. The evaluation process is discussed which enabled the specification of the reference model. The development and evaluation of such graphical user interface reference models is seen as an important key factor in the acceptance of user-oriented communication standards. KEYWORDS User Interface Evaluation; Usability Evaluation; <b>Messaging</b> Systems; <b>Directory</b> Systems; Reference Models. INTRODUCTION This paper reports on the evaluation of a graphical user interface (GUI) for X. 400 Message Handling Systems (MHS) incorporating X. 500 Directory Services (DS). The X. 400 MHS international standard is a complex and encompassing protocol describing the interchange of electronic mail messages between cooperating systems. The X. 500 DS international st [...] ...|$|R
5000|$|The maildir storage format made popular by qmail and the Courier Mail Server {{improves}} upon several features first {{shown in}} MH: a separate file per <b>message,</b> a separate <b>directory</b> per mail [...] "folder," [...] and exploitation of hardlinks and other advanced filesystem features for improved performance {{in space and}} time.|$|R
30|$|In the end, many {{commands}} were encoding and decoding popular {{message types}} over raw []byte channels, {{and it was}} more convenient to move the encoding into the system, by making the channels transmit different data types, including both Dir and []byte. The system now streams raw bytes including a message type and message length along with each message. Using this, streaming []byte messages is efficient and easy. Also, by adding to the Clive library encoding for a few types used in many commands, it is feasible to send <b>messages</b> for <b>directory</b> entries, errors, and a few others.|$|R
40|$|CMOR {{tables in}} sync with 01. beta. 30 CMIP 6 data request fix traceback color; fix email address and website in CV Fix wrong JSON error <b>message</b> Create default <b>directory</b> {{automatically}} Add cmip 6 _cv module Add CMIP 6 Validator. py Fix dataset_json return value Fix sub_experiment to s 1968 to avoid warning in test Fix wrong_activity test; change variant_id to variant_label in cmor. h Update experiments with Karkl Taylor's file 062116. cvs Add unittest for baddirectory Fix Control Vocabulary file fil...|$|R
40|$|As {{databases}} {{have expanded}} in scope from storing purely business data to include XML documents, product catalogs, e-mail <b>messages,</b> and <b>directory</b> data, {{it has become}} increasingly important to search databases based on wild-card string matching: prefix matching, for example, is more common (and useful) than exact matching, for such data. In many cases, matches need to be on multiple attributes/dimensions, with correlations between the dimensions. Traditional multi-dimensional index structures, designed with (fixed length) numeric data in mind, are not suitable for matching unbounded length string data. In this paper, we describe a general technique for adapting a multi-dimensional index structure for wild-card indexing of unbounded length string data. The key ideas are (a) a carefully developed mapping function from strings to rational numbers, (b) representing an unbounded length string in an index leaf page by a fixed length offset to an external key, and (c) storing multiple elided t [...] ...|$|R
40|$|Abstract The Internet White Pages Service {{has been}} slow to {{materialise}} for many reasons. One of them is the security concerns that organisations have, over allowing the public to gain access to either their Intranet or their directory database. The Guardian DSA is a firewall application proxy for X. 500 and LDAP protocols that is designed to alleviate these fears. Sitting in the firewall system, it filters <b>directory</b> protocol <b>messages</b> passing {{into and out of the}} Intranet, allowing security administrators to carefully control the amount of directory information that is released to the outside world. This paper describes the design of our Guardian system, and shows how relatively easy it is to configure its filtering capabilities. Finally the paper describes the working demonstration of the Guardian that was built for the 1997 World Electronic <b>Messaging</b> Association <b>directory</b> challenge. This linked the WEMA directory to the NameFLOW-Paradise Internet directory, and demonstrated some of the powerful filtering capabilities of the Guardian...|$|R
40|$|Includes bibliographical {{references}} (pages 51 - 52) This report {{describes a}} design of an {{electronic mail system}} called the Computer Message System(CMS). This system provides the user with tools to compose, send, receive, store, retrieve and forward messages. The CMS is designed on the NOS time-sharing system, an operating system developed for CYBER 170 classes of computers. The features of the CMS include the following: The user command interface to the CMS is the NOS system command(the standard NOS system commands such as PACK, XEDIT, and additional commands {{for the purpose of}} CMS, such as SEND, READ). Each separable component of message handling, such as message composition or message display, is a separate command. CMS stores each message as a separate file under NOS, and it utilizes the NOS file system to organize groups of files within separate directories. All of the NOS facilities for dealing with files and directories, such as rename, purge, catlog, change, etc., are applicable to <b>messages</b> and <b>directories</b> of <b>messages...</b>|$|R
40|$|Syntax Notation 1) {{language}} and the RO-notation (Remote Operation notation) language 1. For both languages, automatic code generation tools have been developed. All OSI application layer standards use ASN. 1 in order to specify data structures such as mail <b>messages</b> or <b>directory</b> entries that are exchanged in distributed applications. ASN. 1 allows to define complex data types, which are encoded in a standardized exchange format, the so-called transfersyntax. To automate the tedious task to program the encoding and decoding routines by hand, socalled ASN. 1 compilers can be used (e. g. MAVROS [Huit 91], Pepsy [Onio 89], [Neuf 90], [Harv 91] and [Koiv 92]). Today, ASN. 1 is a well-established language {{that has been used}} not only in all OSI application layer standards, but also for non-OSI standards such as the Internet Simple Network Management Protocol (SNMP) and the Open Document Interchange Format (ODIF). The performance and expressiveness of ASN. 1 is equal to or even better than that of s [...] ...|$|R
40|$|The Internet White Pages Service (IWPS) {{has been}} slow to {{materialise}} for many reasons. One of them is the security concerns that organisations have, over allowing the public to gain access to either their Intranet or their directory database. The Directory Guardian is a firewall application proxy for X. 500 and LDAP protocols that is designed to alleviate these fears. Sitting in the firewall system, it filters <b>directory</b> protocol <b>messages</b> passing {{into and out of the}} Intranet, allowing security administrators to carefully control the amount of directory information that is released to the outside world. This paper describes the design of our Guardian system, and shows how relatively easy it is to configure its filtering capabilities. Finally the paper describes the working demonstration of the Guardian that was built for the 1997 World Electronic <b>Messaging</b> Association <b>directory</b> challenge. This linked the WEMA directory to the Nam FLOW-Paradise Internet directory, and demonstrated some of the powerful filtering capabilities of the Guardian...|$|R
40|$|NASDAQ OMX EUROPE TotalView-ITCH SM is {{a direct}} data feed product offered by The Pan European Exchange ¬Æ, which {{features}} the following data elements: o Order level data: NASDAQ OMX EUROPE will provide its full order depth using the standard ITCH format. ITCH uses a series of messages of order messages to track {{the life of a}} customer order. 1 o Trade messages: To ensure that customers have complete information about NASDAQ OMX EUROPE order flow, TotalView-ITCH supports a trade message to reflect all matches which occur in the NASDAQ OMX EUROPE system. o Administrative messages, such trading actions and symbol <b>directory</b> <b>messages...</b>|$|R
40|$|The Phone Slave is a personal, {{integrated}} telecommunications management system, combining dwerse message {{functions in}} a single user interface on a small general purpose computer. This paper {{will focus on the}} audio components of that interface (a related publication emphasizes the graphical interface [4]). The Phone Slave is an intelligent answering machine, conversing with callers to format messages and relaying personal greetings to identified partles. Its owner can access these voice messages as well as electronic mail via speech recognition or Touch-Tones over the phone network. Access to both lncoming and outgoing <b>messages,</b> an on-line <b>directory,</b> and autodial features are also provided by a touch-sensitive color monitor...|$|R
40|$|Since {{the problem}} of {{disclosing}} personal information on the Internet continues to increase, many anonymous communication systems have been studied. Such systems usually use directory servers to manage public keys of participant nodes. However, this reduces anonymity because the query <b>messages</b> for the <b>directory</b> servers can give adversaries route information of anonymous communication channels. To solve this problem, applying ID-Based Encryption has been proposed, but in the existing method, directory servers continue to exist. Our novel method, which can grasp assigned NodeIDs without directory servers, {{can be applied to}} existing DHT-based anonymous communication systems. Our proposal enhances scalability. This paper describes the structure of our proposed system and its application...|$|R
5|$|Despite the misgivings of the expedition's commanders, {{the fleet}} left Brest as {{scheduled}} on 15 December 1796, one day {{ahead of a}} <b>message</b> from the <b>Directory</b> calling off the entire operation. De Galles knew that the British would be watching Brest harbour: their frigates were a constant presence {{as part of the}} Inshore Squadron of the blockade. In an effort to disguise his force's intentions, he first anchored in Camaret Bay and issued orders for his ships to pass through the Raz de Sein. The Raz was a dangerous narrow channel littered with rocks and sandbanks and subject to heavy surf during bad weather, but would also obscure the size, strength and direction of the French fleet from the British squadron offshore, which French scouts claimed consisted of 30 ships.|$|R
30|$|In Clive, {{applications}} perform I/O through named channels. Named channels do {{not carry}} raw byte streams. Instead, they stream typed <b>messages</b> that include <b>directory</b> entries, raw bytes, file addresses, errors, and application defined data. Doing so enables streaming of structured data, avoiding extra RPCs, which permits operation in high latency networks. For example, for file commands, full file trees can be concurrently streamed {{from one or}} more servers and pipelines may process such streams without further RPCs to the file servers involved, reducing the effects of latency. Together, named channels and structured streams cooperate to make it practical to combine existing programs to build new ones in distributed environments with high latencies, instead of requiring to write ad-hoc applications in all cases. Existing UNIX programs {{may be used as}} well as new ones.|$|R
50|$|Despite the misgivings of the expedition's commanders, {{the fleet}} left Brest as {{scheduled}} on 15 December 1796, one day {{ahead of a}} <b>message</b> from the <b>Directory</b> calling off the entire operation. De Galles knew that the British would be watching Brest harbour: their frigates were a constant presence {{as part of the}} Inshore Squadron of the blockade. In an effort to disguise his force's intentions, he first anchored in Camaret Bay and issued orders for his ships to pass through the Raz de Sein. The Raz was a dangerous narrow channel littered with rocks and sandbanks and subject to heavy surf during bad weather, but would also obscure the size, strength and direction of the French fleet from the British squadron offshore, which French scouts claimed consisted of 30 ships.|$|R
40|$|NASDAQ OMX BX TotalView-ITCH (‚ÄúBX TotalView-ITCH‚Äù) is {{a direct}} data feed product offered by NASDAQ OMX BX. BX TotalView-ITCH {{features}} the following data elements that support trading on the BX exchange in all exchange-listed equities securities: o Order level data with attribution: The BX TotalView-ITCH 5. 0 data feed provides its full order depth using the standard ITCH format. ITCH uses a series of messages of order messages to track {{the life of a}} customer order. 1 As an added feature, the message formats will support market participant attribution. BX TotalView-ITCH 5. 0 carries order level data for all U. S. exchange-listed equities. o Trade messages: To ensure that customers have complete information about BX market order flow, NASDAQ OMX BX TotalView-ITCH 5. 0 supports a trade message to reflect a match of a non-displayable order in the BX system. o Administrative messages, such trading actions and symbol <b>directory</b> <b>messages...</b>|$|R
40|$|BX TotalView-ITCH 5. 0 {{is being}} {{released}} {{in association with}} several data feed enhancements detailed in Data Technical News # 2013 - 33. BX TotalView-ITCH features the following data elements that support trading on the BX exchange in all exchange-listed equities securities: o Order level data with attribution: The BX TotalView-ITCH 5. 0 data feed provides its full order depth using the standard ITCH format. ITCH uses a series of messages of order messages to track {{the life of a}} customer order. 1 As an added feature, the message formats will support market participant attribution. BX TotalView-ITCH 5. 0 carries order level data for all U. S. exchange-listed equities. o Trade messages: To ensure that customers have complete information about BX market order flow, NASDAQ OMX BX TotalView-ITCH 5. 0 supports a trade message to reflect a match of a non-displayable order in the BX system. o Administrative messages, such trading actions and symbol <b>directory</b> <b>messages...</b>|$|R
40|$|Conferencing {{services}} for Internet telephony and multimedia {{can be enhanced}} by the integration of other Internet services, such as instant <b>messaging,</b> presence notification, <b>directory</b> lookups, location sensing, email and web. These services require a service programming architecture that can easily incorporate new Internet services into the existing conferencing functionalities, such as voice-enabled conference control. W 3 C has defined the Call Control eXtensible Markup Language (CCXML), along with its VoiceXML, for telephony call control services in a point-to-point call. However, it cannot handle other Internet service events such as presence enabled conferences. In this paper, we propose an architecture combining VoiceXML with our Language for End System Services (LESS) and the Common Gateway Interface (CGI) for multi-party conference service programming that integrates existing Internet services. VoiceXML provides the voice interface to LESS and CGI scripts. Our architecture enables many novel services such as conference setup based on participant location and presence status. We give some examples of the new services and describe our on-going implementation...|$|R
40|$|With {{the trend}} towards {{increasing}} number of processor cores in future chip architectures, scalable directory-based protocols for maintaining cache coherence will be needed. However, directory-based protocols face well-known problems in delay and scalability. Most current protocol optimizations targeting these problems maintain a firm abstraction of the interconnection network fabric as a communication medium: protocol optimizations consist of endto-end <b>messages</b> between requestor, <b>directory</b> and sharer nodes, while network optimizations separately target lowering communication latency for coherence messages. In this paper, we propose an implementation of the cache coherence protocol within the network, embedding directories within each router node that manage and steer requests towards nearby data copies, enabling in-transit optimization of memory access delay. Simulation results {{across a range of}} SPLASH- 2 benchmarks demonstrate significant performance improvement and good system scalability, with up to 44. 5 % and 56 % savings in average memory access latency for 16 and 64 -node systems, respectively, when compared against the baseline directory cache coherence protocol. Detailed microarchitecture and implementation characterization affirms the low area and delay impact of in-network coherence. 1...|$|R
40|$|Service Discovery Protocols (SDPs) provide {{mechanisms}} that allow networked devices and applications to advertise and locate services with minimum or no human intervention. For fixed networked devices, SDPs such as SLP, Bonjour, and UPnP have been proposed. For more dynamic networked environments such as ad hoc, sensor, and wireless networks, {{a set of}} discovery technologies {{have been designed to}} operate optimally in such conditions; these include protocols like Ariadne, Allia, GSD, and UDDI. Hence, it is possible to advertise and discover services in diverse network types using one of a suite of technologies. Importantly, there are differences between individual protocols in terms of: (i) service description language, (ii) <b>message</b> format, (iii) <b>directory</b> architecture, (iv) discovery protocol behavior, (v) network communication, and (vi) nonfunctional features. These differences mean {{it is not possible to}} discover services with one protocol that is advertised by another and vice versa; we characterize this as service discovery protocol heterogeneity. In this article, we propose SeDiM, a dynamic middleware solution to allow heterogeneous discovery protocols within and across different domains to interoperate with one another. SeDiM is evaluated within a case study that demonstrates transparent interoperation of protocols including SLP and Bonjour in highly heterogeneous environments...|$|R
40|$|The {{challenge}} of securing of Web based transaction services continues {{to influence the}} development and evolution of ecommerce and Web Services. This problem had driven the computer industry and standards organizations to introduce a number of security measures {{in an attempt to}} compensate for the growing security concerns of enterprises and the software development community. These efforts have not yielded a standardized architectural framework to securing Web based transaction services. The research that was conducted provided a solution to this problem by using a unique combination of technologies and architectural design techniques that provided a security framework for these transactions. The research model defined an architectural framework that incorporated infrastructure technologies, including Public Key Infrastructure (PKI), Secure Socket Layer (SSL) and Lightweight Directory Protocol (LDAP), along with XML security and a set of SOAP specification extensions that when used in conjunction with custom Java components provided an environment for secure web based transaction services. This framework used a centralized operational model that represented behavioral, security and resource location parameters in an LDAP repository. The custom Java components of the framework provided client driven capabilities that allowed a client and service provider to establish a secure transaction relationship by using a predetermined negotiation protocol that captured these parameters in the LDAP repository. The parameters defined the trust relationship in the LDAP repository and were communicated in SOAP <b>messages</b> using <b>Directory</b> Service Markup Language (DSML). These DSML SOAP messages were used with custom SOAP extensions that applied a set of operational design patterns that communicated transaction behavior between client and service provider to ensure security of the Web based transactions. The research model used this extended SOAP model and XML security to provide message level confidentiality, authentication, authorization, content integrity and non-repudiation. The framework provided these security characteristics within a SOAP messaging environment that provided end-to-end message security, application independence, transport protocol independence, intermediary soap server processing capabilities, message protection during transmission and storage and notary service capabilities...|$|R
40|$|International audienceService Discovery Protocols (SDPs) provide {{mechanisms}} that allow networked devices and applications to advertise and locate services with minimum or no human intervention. For fixed networked devices, SDPs such as SLP, Bonjour, and UPnP have been proposed. For more dynamic networked environments such as ad hoc, sensor, and wireless networks, {{a set of}} discovery technologies {{have been designed to}} operate optimally in such conditions; these include protocols like Ariadne, Allia, GSD, and UDDI. Hence, it is possible to advertise and discover services in diverse network types using one of a suite of technologies. Importantly, there are differences between individual protocols in terms of: (i) service description language, (ii) <b>message</b> format, (iii) <b>directory</b> architecture, (iv) discovery protocol behavior, (v) network communication, and (vi) nonfunctional features. These differences mean {{it is not possible to}} discover services with one protocol that is advertised by another and vice versa; we characterize this as service discovery protocol heterogeneity. In this article, we propose SeDiM, a dynamic middleware solution to allow heterogeneous discovery protocols within and across different domains to interoperate with one another. SeDiM is evaluated within a case study that demonstrates transparent interoperation of protocols including SLP and Bonjour in highly heterogeneous environments...|$|R

