14|5423|Public
50|$|The {{numbering}} scheme changed somewhat starting with ESR 24.0.0 series. The first <b>minor</b> <b>version</b> <b>number</b> increments on regularly scheduled six-week release cycle, {{and the second}} <b>minor</b> <b>version</b> <b>number</b> increments when unscheduled off-cycle releases are necessary. For example, ESR 24.1.0 was released {{at the same time}} as 25.0.0, ESR 24.1.1 was released {{at the same time as}} 25.0.1, and ESR 24.2.0 was released at the same time as 26.0.0.|$|E
5000|$|The {{predefined}} macro [...] {{indicates the}} {{major and minor}} version numbers of the Visual C++ compiler. The macro's value is an integer literal in which the last two digits indicate the <b>minor</b> <b>version</b> <b>number</b> and the preceding digits indicate the major version number.|$|E
50|$|In September 2006 SiRoB {{announced}} he would cease development, since the French DADVSI copyright law made it illegal to develop peer-to-peer programs in France. Since then releases have been less frequent, although whenever eMule increases its <b>minor</b> <b>version</b> <b>number,</b> MorphXT increases its major version number.|$|E
50|$|A {{practice}} in the software industry is to make major jumps in numeric major or <b>minor</b> <b>version</b> <b>numbers</b> for reasons which do not seem (to {{many members of the}} program's audience) to merit the marketing <b>version</b> <b>numbers.</b>|$|R
50|$|Since {{the first}} stable version was {{released}} as 1.0, Zabbix versioning has only increased <b>minor</b> <b>version</b> <b>numbers.</b> Each <b>minor</b> release actually implements many new features, while change level releases mostly introduce bugfixes.|$|R
50|$|The odd <b>minor</b> <b>version</b> <b>numbers,</b> like 5.3 and 5.5 {{are for the}} Gnus {{versions}} bundled with GNU Emacs. The even <b>version</b> <b>numbers</b> are the unbundled releases. So for example, Gnus 5.5 {{is similar}} to Gnus 5.4, but bundled with Emacs 20.1.|$|R
50|$|Various {{modifications}} {{have been}} introduced to distinguish versions or sets of versions. A set of releases or versions having the same major or <b>minor</b> <b>version</b> <b>number</b> may be collectively referred to as , for example version 2.2.x to refer to versions 2.2, 2.2.1, 2.2.2, and all other versions in the 2.2 branch of that software.|$|E
5000|$|Matching a SunOS 5.x {{release to}} its {{corresponding}} Solaris marketing name is simple: each Solaris release name includes its corresponding SunOS 5 <b>minor</b> <b>version</b> <b>number.</b> For example, Solaris 2.4 incorporated SunOS 5.4. There is one small twist: after Solaris 2.6, the [...] "2." [...] was {{dropped from the}} Solaris name and the SunOS minor number appears by itself. The latest Solaris release is named Solaris 11 and incorporates SunOS 5.11.|$|E
5000|$|In 2008, Linux Mint {{adopted the}} same release cycle as Ubuntu and dropped its <b>minor</b> <b>version</b> <b>number</b> before {{releasing}} version 5 [...] "Elyssa." [...] The same year, {{in an effort}} to increase the compatibility between the two systems, Linux Mint decided to abandon its code-base and changed the way it built its releases. Starting with Linux Mint 6 [...] "Felicia," [...] each release was now completely based on the latest Ubuntu release, built directly from it, and timed for approximately one month after the corresponding Ubuntu release, usually in May or November.|$|E
50|$|Appserver.io {{follows a}} naming {{convention}} based on major and <b>minor</b> <b>version</b> <b>numbers.</b> The major digit specifies {{a context for}} <b>minor</b> <b>version</b> names exist. The 1.*.* major version is named Iron which stands for a mythological view on the medieval age. Every <b>minor</b> <b>version</b> 1.x.* within this major release consist of a noun describing something common to this major context.|$|R
5000|$|GLSL {{versions}} {{have evolved}} alongside specific {{versions of the}} OpenGL API. It is only with OpenGL versions 3.3 and above that the GLSL and OpenGL major and <b>minor</b> <b>version</b> <b>numbers</b> match. These <b>versions</b> for GLSL and OpenGL are related in the following table: ...|$|R
5000|$|... where MAJOR and MINOR {{represent}} the major and <b>minor</b> <b>version</b> <b>numbers</b> of the program. [...] It {{is usually not}} correctly categorised by web server log analysers such as Webalizer or AWStats, so running ApacheBench with {{a great number of}} requests may skew the results of the reports generated by these programs.|$|R
50|$|Releases are {{numbered}} as {{versions of the}} form of major.minor.revision, such as Wget 1.11 or Wget 1.8.2. An increase of the major version number represents large and possibly incompatible changes in Wget's behavior or a radical redesign of the code base. An increase of the <b>minor</b> <b>version</b> <b>number</b> designates addition of new features and bug fixes. A new revision indicates a release that, compared to the previous revision, only contains bug fixes. Revision zero is omitted, meaning that for example Wget 1.11 {{is the same as}} 1.11.0. Wget does not use the odd-even release number convention popularized by Linux.|$|E
50|$|Beginning with ACIS Release 4.0, the SAT {{save file}} format {{does not change}} with minor releases, only with major releases. This allows {{applications}} that are based upon the same major version of ACIS to exchange data without being concerned about the save version. To provide this interoperability in a simple implementation, ACIS save files have contained a symbol that accurately identified the major version number, but not the minor version. This meant that applications created using the same major version of ACIS would produce compatible save files, regardless of their minor versions. This was accomplished by simply not incrementing the internal <b>minor</b> <b>version</b> <b>number</b> between major versions.|$|E
50|$|Between the 1.0 and the 2.6.x series, the Linux kernel used odd {{minor version}} numbers to denote {{development}} releases and even minor version numbers to denote stable releases; see Linux kernel: Version numbering. For example, Linux 2.3 was a development {{family of the}} second major design of the Linux kernel, and Linux 2.4 was the stable release family that Linux 2.3 matured into. After the <b>minor</b> <b>version</b> <b>number</b> in the Linux kernel is the release number, in ascending order; for example, Linux 2.4.0 → Linux 2.4.22. Since the 2004 release of the 2.6 kernel, Linux no longer uses this system, and has a much shorter release cycle.|$|E
5000|$|SEVIS has {{undergone}} six major releases since its launch. The release is numbered using a major release <b>version</b> <b>number</b> {{followed by a}} dot and a <b>minor</b> release <b>version</b> <b>number.</b> Below is a partial list of release dates: ...|$|R
50|$|Each <b>minor</b> (second <b>version</b> <b>number)</b> {{release of}} GNOME {{results in a}} new {{installer}} application and package group being released. However, subsequent micro (third <b>version</b> <b>number,</b> e.g. from 2.16.1 to 2.16.2) releases of GNOME are typically distributed {{in the form of}} individual package updates as source packages are updated, and do not require replacement of the installer package. To ensure that users do not easily fall behind in package updates, Dropline GNOME includes a panel applet to notify users when new packages for their installed release are available for download.|$|R
50|$|Beginning with Release 7.0, ACIS {{started again}} {{providing}} accurate major, <b>minor,</b> and point <b>version</b> <b>numbers.</b> Beginning with Release 2016 1.0 in September, 2015, Spatial updated to Semantic Versioning, and now describes versions by the model year and major, minor and point releases within that model year.|$|R
5000|$|On 29 May 2011, Linus Torvalds {{announced}} that the kernel version would be bumped to 3.0 for the release following 2.6.39, due to the <b>minor</b> <b>version</b> <b>number</b> getting too large and to commemorate the 20th anniversary of Linux. It continued the time-based release practice introduced with 2.6.0, but using the second number; for example, 3.1 would follow 3.0 after a few months. An additional number (now the third number) would be added on when necessary to designate security and bug fixes, as for example with 3.0.18; the Linux community refers to this as [...] "x.y.z" [...] versioning. The major version number was also later raised to 4, for the release following version 3.19.|$|E
50|$|Symbolics Genera has a {{large number}} of {{features}} and supported all the versions of various hardware that Symbolics built over its lifetime. Its source code is more than a million lines of code (the number depends on the release and what amount of software is installed). Symbolics Genera was published on tape and CD-ROM. The release of the operating system also provided most of the source code of the operating system and its applications. The user has free access to all parts of the running operating system and can write changes and extensions. The source code of the operating system is divided into systems. These systems bundle sources, binaries and other files. The system construction toolkit (SCT) maintains the dependencies, the components and the versions of all the systems. A system has two numbers: a major and a <b>minor</b> <b>version</b> <b>number.</b> The major version number counts the number of full constructions of a system. The minor version counts the number of patches to that system. A patch is a file that can be loaded to fix problems or provide extensions to a particular version of a system.|$|E
3000|$|The {{storage of}} {{different}} version files {{is one of}} the key technologies in version control. It is the management of changes to a set of files. Each version file is associated with a timestamp and the person who made the change. Certainly, version files can be compared, restored, and merged with some types of files. Version control also enables data administrators to easily track data changes made and roll back to earlier version files when required. In version control, unique version names or version numbers are assigned to keep track of different version files of electronic information incrementally such as semantic versioning. The revision number of version file includes major version number, <b>minor</b> <b>version</b> <b>number,</b> file phase identification, and revision version number. For example, the revision number of a file is “ 1.1. 1.” [...]...|$|E
50|$|The release code is {{a capital}} letter. Backward {{compatibility}} is maintained only among {{versions of the}} same release code. The major <b>version</b> and <b>minor</b> <b>version</b> are incremental <b>numbers.</b> Releases with major number change may introduce new features and change the API in a backward-compatible way as described above. Releases with a minor number change do not change the API. They provide bug fixes, editorial changes and clarification to their predecessor.|$|R
5000|$|Apple has a formalised <b>version</b> <b>number</b> {{structure}} based {{around the}} NumVersion struct, which specifies a one- or two-digit major <b>version,</b> a one-digit <b>minor</b> <b>version,</b> a one-digit [...] "bug" [...] (i.e. revision) version, a stage indicator (drawn {{from the set}} development/prealpha, alpha, beta and final/release), and a one-byte (i.e. having values in the range 0-255) pre-release version, which is only used at stages prior to final. In writing these <b>version</b> <b>numbers</b> as strings, the convention is to omit any parts after the <b>minor</b> <b>version</b> whose value are zero (with [...] "final" [...] being considered the zero stage), thus writing 1.0.2 (rather than 1.0.2b12), 1.0.2 (rather than 1.0.2f0), and 1.1 (rather than 1.1.0f0).|$|R
5000|$|The major/minor <b>version</b> <b>numbers</b> of Pugs converges to 2π (being {{reminiscent}} of TeX and METAFONT, which use a similar scheme); each significant digit in the <b>minor</b> <b>version</b> represents a successfully completed milestone. The third digit is incremented for each release. The current milestones are: ...|$|R
40|$|We {{present a}} {{comprehensive}} formal semantics for a UML state machine kernel which also considers {{the use and}} manipulation of complex structured data. We refer to the UML standard Version 2. 1. 1 {{which was published in}} year 2007. There has been no work that completely integrates complex structured data into a UML state machine semantics. We follow a ”semantics-first ” approach (in opposite to a ”complete-notation-first ” approach) in which we consider a sound basic kernel of the UML state machine notation, and extend this kernel only ater a thorough investigation of the impacts. We define an operational semantics which is intended to be implemented in a standard programming language. Currently we use such an implementation to automatically generate test cases out of a state machine specification. This document is intended to be adapted if necessary. We will indicate that by the version number given above, whereat the major version number indicates changes of the considered subset and the <b>minor</b> <b>version</b> <b>number</b> indicates adoptions and corrections. The considered UML state machine subset includes: 1. Hierarchically and orthogonally structured states. 2. Multi-level transitions...|$|E
40|$|The {{open source}} ALPSCore project, {{which is based}} on ALPS (Algorithms and Libraries for Physics Simulations) project, {{provides}} a collection of physics libraries and applications, with a focus on simulations of lattice models and strongly correlated systems. This project strives to provide a convenient set of maintained, well-documented, and reusable components for developing condensed matter physics simulation code, to help application developers make commonly used and proven computational algorithms available to a non-expert community. This release is significant enough update from v 2. 0. 0 -rc 1 to justify the new <b>minor</b> <b>version</b> <b>number.</b> New in 2. x (see v 2. 0. 0 -rc 1 description for details) : ALPSCore does not require any Boost binary libraries; uses nothing but header-only part of Boost; ALPSCore depends on Eigen 3 and provides Eigen 3 as a transitive dependency to user code; Parameter access class is reworked; New dictionary class has been split out of parameters class. New in this release: Fixes and improvements, mostly in parameters component. CMake 3. 1 + is required. Preparation to the [imminent] switch to C++ 11. Allows one to choose C++ standard to compile ALPSCore with (C++ 03 is the current default); The choice of the standard is propagated to the client code; Higher or lower standard can be requested from the client code; The "old" behavior (explicit setting of compilation options, no propagation) is available; The client code is required to use the same compiler version as ALPSCore, to avoid ABI incompatibilities. Source-level documentation is generated and installed by default. For copyright see COPYRIGHT. TXT. For licensing see LICENSE. TXT. For acknowledgment in scientific publications see ACKNOWLEDGE. TXT...|$|E
5000|$|CentOS <b>version</b> <b>numbers</b> for {{releases}} {{older than}} 7.0 have two parts, a major <b>version</b> and a <b>minor</b> <b>version,</b> which {{correspond to the}} major version and update set of Red Hat Enterprise Linux (RHEL) used to build a particular CentOS release. For example, CentOS 6.5 is built from the source packages of RHEL 6 update 5 (also known as RHEL version 6.5), which is a so-called [...] "point release" [...] of RHEL 6.|$|R
5000|$|In this scheme, the <b>version</b> <b>number</b> slowly {{approaches}} 1.0 as {{more and}} more bugs are fixed in preparation for the 1.0 release. The developers of MAME do not intend to release a version 1.0 of their emulator program. The argument is that it will never be truly [...] "finished" [...] because there will always be more arcade games. Version 0.99 was simply followed by <b>version</b> 0.100 (<b>minor</b> <b>version</b> 100 > 99). In a similar fashion Xfire 1.99 was followed by 1.100. After 8 years of development, eMule reached version 0.50a.|$|R
50|$|The {{last major}} version of IRIX was IRIX 6.5, which was {{released}} in May 1998. New <b>minor</b> <b>versions</b> of IRIX 6.5 were released every quarter until 2005; since then there have been four further <b>minor</b> releases. Through <b>version</b> 6.5.22, there were two branches of each release: a maintenance release (identified by an m suffix to the <b>version</b> <b>number)</b> that included only fixes to the original IRIX 6.5 code, and a feature release (with an f suffix) that included improvements and enhancements. An overlay upgrade from 6.5.x to the 6.5.22 maintenance release is available as a free download, whereas versions 6.5.23 and higher require an active Silicon Graphics support contract, despite only running on Silicon Graphics hardware.|$|R
5000|$|A {{very common}} {{solution}} to this problem is to have a standardised numbering system, wherein software uses a specific <b>number</b> for each <b>version</b> (aka major version), and also a subnumber for each revision (aka <b>minor</b> <b>version),</b> e.g.: 10.1, or 5.7. The major version only changes when programs that used that version will no longer be compatible. The <b>minor</b> <b>version</b> might change with even a simple revision that does not prevent other software from working with it. In cases like this, software packages can then simply request a component that has a particular major <b>version,</b> and any <b>minor</b> <b>version</b> (greater than or equal to a particular <b>minor</b> <b>version).</b> As such, they will continue to work, and dependencies will be resolved successfully, even if the <b>minor</b> <b>version</b> changes.|$|R
30|$|The {{definition}} is a <b>minor</b> <b>version</b> of Definition  2.7.|$|R
50|$|Fujifilm X-T10: mirrorless interchangeable-lens camera. <b>Minor</b> <b>version</b> of X-T1.|$|R
25|$|GNOME <b>version</b> <b>numbers</b> {{follow the}} scheme v.xx.yy. Here, v {{is a major}} version, which can include large changes such as ABI breakage; these have no regular {{schedule}} and occur in response to requirements for large-scale changes. xx is a <b>minor</b> <b>version,</b> released on the above schedule of approximately every 6 months, in which the 1- or 2-digit number's parity indicates the type of release: if xx is even (e.g. 3.20) the release is considered stable, whereas if xx is odd it represents a current development snapshot (e.g. 3.21) that will eventually evolve into the next stable release. yy indicates a point release, e.g. 3.20.6; these are made on a frequency of weeks in order to fix issues, add non-breaking enhancements, etc.|$|R
50|$|There are {{two schools}} of thought {{regarding}} how numeric <b>version</b> <b>numbers</b> are incremented. Most free and open-source software packages, including MediaWiki, treat versions {{as a series of}} individual numbers, separated by periods, with a progression such as 1.7.0, 1.8.0, 1.8.1, 1.9.0, 1.10.0, 1.11.0, 1.11.1, 1.11.2, and so on. On the other hand, some software packages identify releases by decimal numbers: 1.7, 1.8, 1.81, 1.82, 1.9, etc. Decimal versions were common in the 1980s, for example with NetWare, DOS, and Microsoft Windows, but even in the 2000s have been for example used by Opera and Movable Type. In the decimal scheme, 1.81 is the <b>minor</b> <b>version</b> following 1.8, while maintenance releases (i.e. bug fixes only) may be denoted with an alphabetic suffix, such as 1.81a or 1.81b.|$|R
50|$|GNOME <b>version</b> <b>numbers</b> {{follow the}} scheme v.xx.yy. Here, v {{is a major}} version, which can include large changes such as ABI breakage; these have no regular {{schedule}} and occur in response to requirements for large-scale changes. xx is a <b>minor</b> <b>version,</b> released on the above schedule of approximately every 6 months, in which the 1- or 2-digit number's parity indicates the type of release: if xx is even (e.g. 3.20) the release is considered stable, whereas if xx is odd it represents a current development snapshot (e.g. 3.21) that will eventually evolve into the next stable release. yy indicates a point release, e.g. 3.20.6; these are made on a frequency of weeks in order to fix issues, add non-breaking enhancements, etc.|$|R
40|$|We {{study the}} (∞, 1) -category of autoequivalences of ∞-operads. Using {{techniques}} introduced by Toën, Lurie, and Barwick and Schommer-Pries, we prove that this (∞, 1) -category is a contractible ∞-groupoid. Our calculation {{is based on}} the model of complete dendroidal Segal spaces introduced by Cisinski and Moerdijk. Similarly, we prove that the (∞, 1) -category of autoequivalences of non-symmetric ∞-operads is the discrete monoidal category associated to Z/ 2 Z. We also include a computation of the (∞, 1) -category of autoequivalences of (∞, n) -categories based on Rezk's Θ_n-spaces. Comment: 43 pages, v 2 : updated according to the revised version of [BSP 13], minor correction in the proof of Proposition 3. 5. 3, v 3 : journal <b>version,</b> <b>minor</b> changes, <b>numbering</b> has changed, v 4 : minor corrections in Section 4 due to a mistake in the previous Remark 4. 3. 2, some intermediate statements slightly changed, none of the main results are affected, numbering has not change...|$|R
