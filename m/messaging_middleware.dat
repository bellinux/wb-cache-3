53|118|Public
50|$|In {{addition}} {{to open source}} systems, hardware-based <b>messaging</b> <b>middleware</b> exists with vendors like Solace Systems, Apigee and Tervela offering queuing through silicon or silicon/software datapaths.|$|E
50|$|There are {{a number}} of open source choices of <b>messaging</b> <b>middleware</b> systems, {{including}} Apache ActiveMQ, Apache Kafka, Apache Qpid, Beanstalkd, HTTPSQSJBoss Messaging, JORAM, RabbitMQ, Sun Open Message Queue, and Tarantool.|$|E
50|$|EVO/CB is a {{distributed}} object {{system that}} is constructed on top of publish/subscribe event systems. This design decision implies modeling method calls as events and subscriptions over the underlying <b>messaging</b> <b>middleware.</b>|$|E
5000|$|... #Subtitle level 2: XMPP as an {{extensible}} <b>Message</b> Oriented <b>Middleware</b> (xMOM) platform ...|$|R
5000|$|... 3MT (Mobile, <b>Messaging</b> & <b>Middleware)</b> - Full {{lifecycle}} {{of integrated}} services, Inter-discipline service management research, cognitive mechanisms, federation, virtual infrastructure & cloud computing ...|$|R
50|$|OpenMAMA (Open <b>Middleware</b> Agnostic <b>Messaging</b> API) is a {{lightweight}} vendor-neutral integration layer for systems built {{on top of}} a variety of <b>message</b> orientated <b>middlewares.</b>|$|R
50|$|If a {{complicated}} enterprise software system consists of various pieces of software, developed {{over a period}} of tens of years - EJBs, legacy apps accessed using Java's connector architecture, SOAP services hosted on external servers, old code accessed through <b>messaging</b> <b>middleware</b> - it is necessary to write software applications that use all these pieces to do useful things, yet the differences in protocols, mobility of software, etc. get in the way.|$|E
5000|$|Nastel Technologies {{was founded}} in 1994 by David Mavashev to provide a {{solution}} for monitoring and administration of <b>messaging</b> <b>middleware</b> technologies. Nastel has since broadened its coverage, based on a complex event processing engine, to support the five dimensions of APM defined by the Gartner Group, including coverage for: Java, [...]NET, CICS, Web Services and other technologies and to handle the integration of its monitoring technology with the typical global 2000 company’s existing IT monitoring software. Nastel AutoPilot has been especially effective in the banking industry and in insurance, healthcare and retail.|$|E
50|$|If the {{software}} one uses {{moves to a}} different server, the code breaks. The SOAP libraries one uses change - for example, when one moves from using Apache SOAP to Apache Axis - so code breaks because it uses a now deprecated SOAP API. Something that was previously accessible as an EJB is now available through <b>messaging</b> <b>middleware</b> via JMS - again, you need to fix the code that uses {{the software}}, or if one has an EJB which is offered as a SOAP service to external clients. Using SOAP results in a performance penalty as compared to accessing the EJB directly. SOAP is a baseline protocol for platform and language independence, but shouldn't java clients {{be able to take}} advantage of the fact that the software they are accessing is really an EJB? So your java customers pay a performance penalty since you have to use SOAP for to accommodate you non-java clients.|$|E
5000|$|An {{implementation}} of the JMS interface for a <b>Message</b> Oriented <b>Middleware</b> (MOM). Providers are implemented as either a Java JMS implementation or an adapter to a non-Java MOM.|$|R
40|$|This paper {{describes}} {{an approach to}} enhance the resilience of <b>message</b> oriented <b>middleware</b> to faults and attacks. The system is designed to work with different <b>message</b> oriented <b>middleware</b> {{as long as the}} messaging system can supply the information and control API required. The structure of the system and the approach to handling link failures, broker failures and anomalous behaviour through the planning of mirroring and relaying mechanisms to suit the tolerable risk and the deployment context is the focus of the paper. Validation is through industrial case studies and end user assessment...|$|R
30|$|The {{remainder}} of the tools include <b>message</b> queuing <b>middleware</b> (e.g., Flume, Kafka), processing frameworks (e.g., Storm, Spark), query engines (e.g., Pig, Hive), and others. These are each applied in 3 pipelines or less (7.9 %).|$|R
50|$|NSDG (National e-Governance Services Delivery Gateway) is a {{standard}} based <b>messaging</b> <b>middleware</b> for e-Governance services. This is classified under Integrated MMP (Mission Mode Projects) of Department of Information Technology, Govt. of India under NeGP(The National e-Governance Plan) and is the Second Mission Mode Project to enter operational phase starting from 14 August 2008. Apart from many path breaking innovations that NSDG has undertaken itself and the ambitious objective it has embarked upon, NSDG is probably the only one which has won its first appreciation three months before its golive. NSDG won the The World is Open Award 2008 in the e-Governance category at The World is Open Award 2008 function organized by Skoch Consultancy Services and Red Hat. The solution is already ready and the Go-Live date is 14/08/08.The National e-Governance Plan (NeGP) of the Govt. of India aims to cooperate, collaborate and integrate information across different departments in the Centre, States and Local Government. Government systems are characterized by islands of legacy systems using heterogeneous platforms and technologies and spread across diverse geographical locations, in varying state of automation, make this task very challenging.|$|E
40|$|Abstract. Security of <b>messaging</b> <b>middleware</b> is the {{key issue}} to ensure the {{integrity}} of news transmission. By analyzing the defects on safety of current JMS-based <b>messaging</b> <b>middleware</b> communication model, elaborating several safety problems of <b>messaging</b> <b>middleware</b> from authentication, authorization, encapsulation and audit, this paper proposes a <b>messaging</b> <b>middleware</b> security model based on data encryption and digital signature technology, it encrypt messages with symmetric and asymmetric encryption algorithm and audit some safety-related events, then the security of message transmission has improved...|$|E
40|$|The use of {{middleware}} {{has been}} acknowledged {{as the principal}} means of simplifying distributed applications building in the enterprise. Wireless <b>messaging</b> <b>middleware,</b> in particular, allows loosely coupled distributed components and has emerged as being well suited to the wireless environment. In this paper we present a lightweight wireless <b>messaging</b> <b>middleware</b> solution which addresses the reliability and bandwidth issues associated with wireless links...|$|E
50|$|WMQ or Websphere MQ is IBM <b>Message</b> Oriented <b>Middleware</b> {{product for}} {{communication}} of distributed system. Mule also provides support for WMQ called Mule WMQ Transport which works with 7.0, 7.1 and 7.5 versions and provides endpoint for the same.|$|R
50|$|One of {{the long-standing}} {{standards}} for <b>message</b> oriented <b>middleware</b> is X/Open group's is XATMI specification (Distributed Transaction Processing: The XATMI Specification) which standardizes API for interprocess communications. Known implementations for this API is ATR Baltic's Enduro/X middleware and Oracle's Tuxedo.|$|R
40|$|The publish/subscribe {{paradigm}} of <b>Message</b> Oriented <b>Middleware</b> provides a loosely coupled communication model between distributed applications. Traditional publish/subscribe middleware uses keywords to match advertisements and subscriptions {{and does not}} support deep semantic matching. To this end, we designed and implemented a Semantic <b>Message</b> Oriented <b>Middleware</b> system to provide such capabilities for semantic description and matching. We adopted the DARPA Agent Markup Language and Ontology Inference Layer, a formal knowledge representation language for expressing sophisticated classifications and enabling automated inference, as the topic description language in our middleware system. A simple description logic inference system was implemented to handle the matching process between the subscriptions of subscribers and the advertisements of publishers. Moreover our middleware system also has a security architecture to support secure communication and user privilege control...|$|R
40|$|In this paper, we {{introduce}} a <b>messaging</b> <b>middleware</b> for enterprise services in wireless environments. The proposed middleware enables seamless integration between mobile devices/users and enterprise services. Mobile users send their requests to the enterprise system which replies by sending back the requests’ {{results to the}} mobile user. We adopt object-oriented analysis methods to provide for in-depth description {{and analysis of the}} <b>messaging</b> <b>middleware.</b> 1...|$|E
40|$|The Dependency-Sphere project explores {{concepts}} and middleware system support for distributed transaction processing across object and messsaging components. The {{objective is to}} enrich standard object middleware and <b>messaging</b> <b>middleware</b> to provide for an increased level of reliability for their use in combination in enterprise systems...|$|E
40|$|Achieving {{availability}} and scalability while providing service guarantees such as in-order, gapless delivery {{is essential for}} deploying publish/subscribe <b>messaging</b> <b>middleware</b> in wide area networks. Scalability often requires a publish/subscribe system to propagate subscription information and perform content matching across the network. Existing subscription propagation algorithms do not support in-order, gapless delivery in a redundant overlay network. This pape...|$|E
40|$|Abstract. Nowadays, China is {{stepping}} into an aging society, {{and most people}} care about their personal health with the Chinese economic development. Chronic-diseases have become the major threat to the elder people in China. In order to ensure a real-time {{health care for the}} elders, we propose health cloud platform with IoT for community health service. The platform includes IoT health services subsystem, health cloud application service subsystem and data management subsystem. The System development and service scheme is composed of six parts according to the function: front-end data acquisitioning module, <b>message</b> <b>middleware,</b> storage center, data mining center, medical graphics image processing center and presentation layer. The health cloud platform has two main functions: real time medical care technology and personalized health service. The successful deployment of health cloud can take demonstration for others application, and promote itself cloud computing technologies development...|$|R
40|$|In mobile ad hoc networks, {{synchronous}} communication mechanisms {{appear to be}} not suitable, since these assume that the involved entities are present {{at the same time}} during the interactions. On the other hand, asynchronous mechanisms seem to be better suited for mobile environments characterised with frequently intermittent connectivity. Therefore, <b>message</b> oriented <b>middleware</b> based on the a{{synchronous communication}} paradigm seems a reasonable choice in these environments. This paper outlines the expected research contribution of my PhD work {{in the area of the}} <b>message</b> oriented <b>middleware</b> for mobile ad hoc environments. The key aspect of my approach is the exploitation of context information to enable communication also in extreme scenarios, where topology reconfigurations are frequent and network partitions are the norm rather than the exception, in an efficient way in terms of the use of the possibly scarce resources of mobile devices...|$|R
30|$|Middleware: {{communication}} between agents is facilitated via a middleware application. This includes publish-subscribe <b>middleware,</b> <b>message</b> queues, message brokers, service buses or other OS independent messaging.|$|R
40|$|Web Service Description Language (WSDL) is {{designed}} for well-defined services. This requirement is essential for Web Services (WS) to ensure interoperability throughout a service lifecycle, support service-oriented architecture, and provide solid framework for business transactions. However, this constraint makes WSDL unsuitable for defining common interface functions for a collaborative system. This thesis argues that XML-based <b>messaging</b> <b>middleware</b> infrastructure is more effective and suitable for providing communication protocol for an evolving and collaborative system. The infrastructure can benefit from the well-established WS framework without depending on the WS technologies. We underpin our claim through the design {{and implementation of the}} eduSource Communication Layer (ECL). We show how XML-based <b>messaging</b> <b>middleware</b> can expand WS technologies to provide communication framework for an ongoing developing environment of learning object repository networks. Finally, we confirm the advantage of our approach using comparative analysis and use our experiences to write guidelines and recommendations for future development...|$|E
40|$|Standard <b>messaging</b> <b>middleware</b> {{guarantees}} {{the delivery of}} messages to intermediary destinations like message queues, but does not guarantee the receipt or the processing of a message by final recipients. Conditional messaging is an extension to standard <b>messaging</b> <b>middleware</b> that addresses this shortcoming by allowing an application to define, monitor, and evaluate various conditions on messages, such as time constraints on the receipt or the processing of a message {{by a set of}} final recipients. In this paper, we introduce the notion of conditional messaging, and present the design and implementation of a flexible and reliable system that supports conditional messaging for use in Java 2 Enterprise Edition and message queuing environments. Our solution uniquely shifts the responsibilities for implementing the management of conditions on messages from the application to the middleware. We further discuss the grouping of multiple conditional messages into atomic units-of-work, which can also integrate requests to transactional resources like distributed objects using object middleware. Conditional messaging serves to implement various kinds of backward dependencies for distributed object transactions that integrate messaging...|$|E
40|$|In {{this paper}} {{we present a}} scalable, {{integrated}} and service-oriented collaboration system, namely Global Multimedia Collaboration System, based on the XGSP collaboration framework and NaradaBrokering <b>messaging</b> <b>middleware.</b> This system can provide videoconferencing services to heterogeneous endpoints such as H. 323, SIP, Access Grid, RealPlayer as well as cellular phone. This paper discusses the design principle, system architecture and implementation in detail. The extensive performance measurement {{has been made to}} evaluate the scalability of the system...|$|E
5000|$|ObjectWeb defines {{middleware}} as: [...] "The {{software layer}} that lies between {{the operating system}} and applications {{on each side of}} a distributed computing system in a network." [...] Services that can be regarded as middleware include enterprise application integration, data integration, <b>message</b> oriented <b>middleware</b> (MOM), object request brokers (ORBs), and the enterprise service bus (ESB).|$|R
40|$|Scalable Integrated Multi-Mission Support System (SIMSS) Simulator Release 2. 0 {{software}} {{is designed to}} perform a variety of test activities related to spacecraft simulations and ground segment checks. This innovation uses the existing SIMSS framework, which interfaces with the GMSEC (Goddard Mission Services Evolution Center) Application Programming Interface (API) Version 3. 0 <b>message</b> <b>middleware,</b> and allows SIMSS to accept GMSEC standard messages via the GMSEC message bus service. SIMSS is a distributed, component-based, plug-and-play client-server system that is useful for performing real-time monitoring and communications testing. SIMSS runs on one or more workstations, and {{is designed to be}} user-configurable, or to use predefined configurations for routine operations. SIMSS consists of more than 100 modules that can be configured to create, receive, process, and/or transmit data. The SIMSS/GMSEC innovation is intended to provide missions with a low-cost solution for implementing their ground systems, as well as to significantly reduce a mission s integration time and risk...|$|R
40|$|<b>Message</b> Oriented <b>Middleware</b> (MOM) is an {{enabling}} technology for modern event- driven applications that are typically based on publish/subscribe communication [Eugster 03]. Enterprises typically contain hundreds of applications operating in environments with diverse databases and operating systems. Integration of these applications {{is required to}} coordinate the business process. Unfortunately, this is no easy task. Enterprise Integration, according to Brosey et al. (2001), 2 ̆ 2 aims to connect and combines people, processes, systems, and technologies {{to ensure that the}} right people and the right processes have the right information and the right resources at the right time 2 ̆ 2 [Brosey 01]. Communication between different applications can be achieved by using synchronous and asynchronous communication tools. In synchronous communication, both parties involved must be online (for example, a telephone call), whereas in asynchronous communication, only one member needs to be online (email). Middleware is software that helps two applications communicate with one another. Remote Procedure Calls (RPC) and Object Request Brokers (ORB) are two types of synchronous middleware—when they send a request they must wait for an immediate reply. This can decrease an application’s performance when {{there is no need for}} synchronous communication. Even though asynchronous distributed messaging using <b>message</b> oriented <b>middleware</b> is widely used in industry, there is not enough work done in evaluating the performance of various open source <b>Message</b> oriented <b>middleware.</b> The objective of this work was to benchmark and evaluate three different open source MOM’s performance in publish/subscribe and point-to-point domains, functional comparison and qualitative study from developers perspective...|$|R
40|$|In {{this paper}} we present our A/V {{collaboration}} {{system based on}} our XGSP collaboration framework and NaradaBrokering <b>messaging</b> <b>middleware.</b> Using publish/subscribe event model, this system can provide videoconferencing services to heterogeneous endpoints such as H. 323, SIP and Access Grid. This paper discusses the common a/v collaboration model shared by all kinds of A/V conferencing clients and introduces the details about how to implement such a model based on publish/subscribe event middleware...|$|E
40|$|The {{notification}} service {{is the part}} of myGrid that enables asynchronous delivery of messages between distributed components. It includes features such as topic-based publish-subscribe messaging, push/pull models, asynchronous delivery, persistence, transient and durable subscriptions, durable topics, negotiation of QoS, hierarchical topic structure and federation of services. Some of these features are novel in the area of <b>messaging</b> <b>middleware.</b> A cost evaluation of some of these features indicate that the overhead incurred is justified in terms of compensating benefits gained...|$|E
40|$|Middleware {{performance}} {{models are}} useful building {{blocks in the}} performance models of distributed software applica-tions. We focus on performance models of messaging mid-dleware implementing the Java Message Service standard, showing how certain system design properties – including pipelined processing and message coalescing – interact to create performance behavior that the existing models do not capture accurately. We construct a performance model of the ActiveMQ <b>messaging</b> <b>middleware</b> that addresses the out-lined issues and discuss how the approach extends to other middleware implementations...|$|E
30|$|Sensu {{makes use}} of RabbitMQ [69], a <b>message</b> orientated <b>middleware</b> {{platform}} based upon the AMQ standard. A Redis datastore is also used in order to store persistent data. These two technologies are used to allow Sensu to scale. Performance evaluation of RabbitMQ demonstrates its ability to handle {{tens of thousands of}} messages per second [70] and conceptually scale {{to tens of thousands of}} hosts.|$|R
5000|$|IBM MQ, (often {{referred}} to as [...] "MQ"), is IBM's Messaging solution for Enterprise and IBM's <b>Message</b> Oriented <b>Middleware</b> offering. It allows independent and potentially non-concurrent applications on a distributed system to securely communicate with each other. MQ is available on {{a large number of}} platforms (both IBM and non-IBM), including z/OS (mainframe), OS/400 (IBM System i or AS/400), Transaction Processing Facility, UNIX (AIX, HP-UX, Solaris), HP NonStop, OpenVMS, Linux, OS 2200, and Microsoft Windows.|$|R
30|$|The {{trend towards}} all {{encompassing}} monitoring {{is reflected in}} the monitoring tools. As our survey demonstrates, older monitoring tools utilised predominantly centralised architectures whereby a single server collected data from monitored hosts. With larger systems or with an all encompassing monitoring strategy, this scheme is no longer viable. Newer tools offer schemes where the computation involved in monitoring can be distributed over a large number of hosts using <b>message</b> queues, <b>middleware,</b> shared memory or other communication channels.|$|R
