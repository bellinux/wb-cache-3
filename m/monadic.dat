2857|0|Public
25|$|A monad is a {{construction}} that, given an underlying type system, embeds a corresponding type system (called the <b>monadic</b> type system) into it (that is, each <b>monadic</b> type {{acts as the}} underlying type). This <b>monadic</b> type system preserves all significant aspects of the underlying type system, while adding features particular to the monad.|$|E
25|$|Given a type {{constructor}} M, in most contexts, a {{value of}} type Mnbsp&a {{can be thought of}} as an action that returns {{a value of}} type a. The return operation takes a value from a plain type a and puts it into a <b>monadic</b> container of type Mnbsp&a; the bind operation chains a <b>monadic</b> value of type Mnbsp&a with a function of type anbsp&→nbsp&Mnbsp&b to create a <b>monadic</b> value of type Mnbsp&b.|$|E
25|$|<b>Monadic</b> second-order logic (MSO) is a {{restriction}} of second-order logic {{in which only}} quantification over unary relations (i.e.: sets) are allowed. Quantification over functions, owing to the equivalence to relations as described above, is thus also not allowed. The second-order logic without these restrictions is sometimes called full second-order logic to distinguish it from the <b>monadic</b> version. <b>Monadic</b> second-order logic is particularly used {{in the context of}} Courcelle's theorem, an algorithmic meta-theorem in graph theory.|$|E
25|$|In the {{relationship}} between preordered sets and interior algebras they correspond to the case where the preorder is an equivalence relation, reflecting {{the fact that such}} preordered sets provide the Kripke semantics for S5. This also reflects {{the relationship}} between the <b>monadic</b> logic of quantification (for which <b>monadic</b> Boolean algebras provide an algebraic description) and S5 where the modal operators □ (necessarily) and ◊ (possibly) can be interpreted in the Kripke semantics using <b>monadic</b> universal and existential quantification, respectively, without reference to an accessibility relation.|$|E
25|$|The {{function}} then {{creates a}} new <b>monadic</b> value, with type Mb, that can be fed to the next bind operators composed in the pipeline.|$|E
25|$|The bind {{operator}} unwraps {{the plain}} value with type a embedded in its input <b>monadic</b> value with type Ma, and feeds {{it to the}} function.|$|E
25|$|Once a Trémaux tree {{has been}} {{identified}} in this way, one can describe an orientation of the given graph, also in <b>monadic</b> second-order logic, by specifying the set of edges whose orientation is from the ancestral endpoint to the descendant endpoint. The remaining edges outside this set must be oriented in the other direction. This technique allows graph properties involving orientations to be specified in <b>monadic</b> second order logic, allowing these properties to be tested efficiently on graphs of bounded treewidth using Courcelle's theorem.|$|E
25|$|The unary return {{operation}} takes a value from a plain type (a) {{and puts it}} into a container using the constructor, creating a <b>monadic</b> value (with type Ma).|$|E
25|$|A {{characterization}} of Trémaux {{trees in the}} <b>monadic</b> second-order logic of graphs allows graph properties involving orientations to be recognized efficiently for graphs of bounded treewidth using Courcelle's theorem.|$|E
25|$|Any <b>monadic</b> Boolean algebra can be {{considered}} to be an interior algebra where the interior operator is the universal quantifier and the closure operator is the existential quantifier. The <b>monadic</b> Boolean algebras are then precisely the variety of interior algebras satisfying the identity xIC = xI. In other words, they are precisely the interior algebras in which every open element is closed or equivalently, in which every closed element is open. Moreover, such interior algebras are precisely the semisimple interior algebras. They are also the interior algebras corresponding to the modal logic S5, and so have also been called S5 algebras.|$|E
25|$|Moreover, for Halin graphs (a {{special case}} of treewidth three graphs) {{counting}} is not needed: for these graphs, every property {{that can be}} recognized by a tree automaton can also be defined in <b>monadic</b> second-order logic. The same is true more generally for certain classes of graphs in which a tree decomposition can itself be described in MSOL. However, it cannot be true for all graphs of bounded treewidth, because in general counting adds extra power over <b>monadic</b> second-order logic without counting. For instance, the graphs with an even number of vertices can be recognized using counting, but not without.|$|E
25|$|The validities of <b>monadic</b> {{predicate}} calculus with identity are decidable, however. This system is first-order logic restricted to signatures {{that have no}} function symbols and whose relation symbols other than equality never take more than one argument.|$|E
25|$|The {{programmer}} may define new {{operators and}} both those and the pre-defined ones may be overloaded and their priorities may {{be changed by}} the coder. The following example defines operator max with both dyadic and <b>monadic</b> versions (scanning across the elements of an array).|$|E
25|$|A type {{constructor}} that defines, {{for every}} underlying type, how {{to obtain a}} corresponding <b>monadic</b> type. In Haskell's notation, {{the name of the}} monad represents the type constructor. If M {{is the name of the}} monad and t is a data type, then Mnbsp&t is the corresponding type in the monad.|$|E
25|$|The {{operations}} {{that define the}} monad must fulfil several properties to allow the correct composition of <b>monadic</b> functions (i.e. functions that use values from the monad as their arguments or return value). Because a monad can insert additional operations around a program's domain logic, monads {{can be considered a}} sort of aspect-oriented programming. The domain logic can be defined by the application programmer in the pipeline, while required aside bookkeeping operations can be handled by a pre-defined monad built in advance.|$|E
25|$|There are systems {{weaker than}} full first-order logic {{for which the}} logical {{consequence}} relation is decidable. These include propositional logic and <b>monadic</b> predicate logic, which is first-order logic restricted to unary predicate symbols and no function symbols. Other logics with no function symbols which are decidable are the guarded fragment of first-order logic, as well as two-variable logic. The Bernays–Schönfinkel class of first-order formulas is also decidable. Decidable subsets of first-order logic are also studied {{in the framework of}} description logics.|$|E
25|$|For a long time, Haskell and its {{derivatives}} {{have been}} the only major users of monads in programming. There also exist formulations in Scheme, Perl, Python, Racket, Clojure and Scala, and monads have been an option in the design of a new ML standard. Recently F# has included a feature called computation expressions or workflows, which are an attempt to introduce <b>monadic</b> constructs within a syntax more palatable to those programmers whose only prior experience has been with imperative languages.|$|E
25|$|The satisfiability {{problem for}} a formula of <b>monadic</b> second-order logic {{is the problem of}} {{determining}} whether there exists at least one graph (possibly within a restricted family of graphs) for which the formula is true. For arbitrary graph families, and arbitrary formulas, this problem is undecidable. However, satisfiability of MSO2 formulas is decidable for the graphs of bounded treewidth, and satisfiability of MSO1 formulas is decidable for graphs of bounded clique-width. The proof involves building a tree automaton for the formula and then testing whether the automaton has an accepting path.|$|E
25|$|In {{the study}} of graph algorithms, Courcelle's theorem is the {{statement}} that every graph property definable in the <b>monadic</b> second-order logic of graphs can be decided in linear time on graphs of bounded treewidth. property P, and every fixed bound b on the clique-width of a graph, there is a linear-time algorithm for testing whether a graph of clique-width at most b has property P. The original formulation of this result required the input graph to be given together with a construction proving that it has bounded clique-width, but later approximation algorithms for clique-width removed this requirement.|$|E
25|$|Syrian-Egyptian Gnosticism {{includes}} Sethianism, Valentinianism, Basilideans, Thomasine traditions, and Serpent Gnostics, {{as well as}} {{a number}} of other minor groups and writers. Hermeticism is also a western Gnostic tradition, though it differs in some respects from these other groups. The Syrian–Egyptian school derives much of its outlook from Platonist influences. It depicts creation in a series of emanations from a primal <b>monadic</b> source, finally resulting in the creation of the material universe. These schools tend to view evil in terms of matter that is markedly inferior to goodness and lacking spiritual insight and goodness rather than as an equal force.|$|E
25|$|Because Sum and Product are binary operations, M6 and M7 {{admit the}} sum and product {{of only a}} finite number of objects. The fusion axiom, M8, enables taking the sum of {{infinitely}} many objects. The same holds for Product, when defined. At this point, mereology often invokes set theory, but any recourse to set theory is eliminable by replacing a formula with a quantified variable ranging over a universe of sets by a schematic formula with one free variable. The formula comes out true (is satisfied) whenever the name of an object that would {{be a member of the}} set (if it existed) replaces the free variable. Hence any axiom with sets can be replaced by an axiom schema with <b>monadic</b> atomic subformulae. M8 and M8' are schemas of just this sort. The syntax of a first-order theory can describe only a denumerable number of sets; hence, only denumerably many sets may be eliminated in this fashion, but this limitation is not binding for the sort of mathematics contemplated here.|$|E
25|$|For instance, to {{find the}} maximum clique in a cograph, compute in {{bottom-up}} order the maximum clique in each subgraph represented by a subtree of the cotree. For a node labeled 0, the maximum clique is the maximum among the cliques computed for that node's children. For a node labeled 1, the maximum clique is the union of the cliques computed for that node's children, and has size equal to {{the sum of the}} children's clique sizes. Thus, by alternately maximizing and summing values stored at each node of the cotree, we may compute the maximum clique size, and by alternately maximizing and taking unions, we may construct the maximum clique itself. Similar bottom-up tree computations allow the maximum independent set, vertex coloring number, maximum clique cover, and Hamiltonicity (that is the existence of a Hamiltonian cycle) to be computed in linear time from a cotree representation of a cograph. Because cographs have bounded clique-width, Courcelle's theorem may be used to test any property in the <b>monadic</b> second-order logic of graphs (MSO1) on cographs in linear time.|$|E
500|$|Based on {{the work}} of Kepler and {{probably}} Descartes, Leibniz develops a model of planetary motion based on the conatus principle, the idea of aether and a fluid vortex. This theory is expounded in the work Tentamen de motuum coelestium causis (1689). According to Leibniz, Kepler's analysis of elliptical orbits into a circular and a radial component can be explained by a [...] "harmonic vortex" [...] for the circular motion combined with a centrifugal force and gravity, both of which are examples of conatus, to account for the radial motion. Leibniz later defines the term <b>monadic</b> conatus, as the [...] "state of change" [...] through which his monads perpetually advance.|$|E
500|$|Darrell Addison Posey, {{noting that}} the {{boundary}} between cultural entomology and ethnoentomology is difficult to draw, cites Hogue as limiting cultural entomology {{to the influence of}} insects on [...] "the essence of humanity as expressed in the arts and humanities". Posey notes further that cultural anthropology is usually restricted to the study of [...] "advanced", industrialised, and literate societies, whereas ethnoentomology studies [...] "the entomological concerns of 'primitive' or 'noncivilized' societies". Posey states at once that the division is artificial, complete with an unjustified us/them bias. Brian Morris similarly criticises the way that anthropologists treat non-Western attitudes to nature as <b>monadic</b> and spiritualist, and contrast this [...] "in gnostic fashion" [...] with a simplistic treatment of Western, often 17th century, mechanistic attitude. Morris considers this [...] "quite unhelpful, if not misleading", and offers instead his own research into the multiple ways that the people of Malawi relate to insects and other animals: [...] "pragmatic, intellectual, realist, practical, aesthetic, symbolic and sacramental." ...|$|E
2500|$|A binding {{operation}} of polymorphic type (Mnbsp&t)→(t→Mnbsp&u)→(Mnbsp&u), which Haskell represents by the infix operator >>=. Its first argument is a {{value in a}} <b>monadic</b> type, its second argument is a function that maps from the underlying type of the first argument to another <b>monadic</b> type, and its result is in that other <b>monadic</b> type. Typically, the binding operation {{can be understood as}} having four stages: ...|$|E
2500|$|... a more {{authentic}} <b>monadic</b> forLoop_ construction {{can be defined}} as ...|$|E
2500|$|The {{built-in}} imperative forM_ maps a <b>monadic</b> expression into a list, as ...|$|E
2500|$|This {{problem can}} be {{expressed}} in <b>monadic</b> second order logic as follows: ...|$|E
2500|$|REG (the set {{of regular}} languages) is definable by <b>monadic,</b> second-order {{formulas}} (Büchi's theorem, 1960) ...|$|E
2500|$|An {{additive}} monad is a monad {{endowed with}} a <b>monadic</b> zero mzero and a binary operator mplus satisfying the monoid laws, with the <b>monadic</b> zero as unit. The operator mplus has type M t → M t → M t (where M is the monad constructor and {{t is the}} underlying data type), satisfies the associative law and has the zero as both left and right identity. That is: ...|$|E
2500|$|The binary bind {{operation}} [...] "" [...] {{takes as}} its arguments a <b>monadic</b> value with type Ma and a function (a → Mb) that can transform the value.|$|E
2500|$|Joel Whitebook. [...] "Intersubjectivity and the <b>Monadic</b> Core of the Psyche: Habermas and Castoriadis on the Unconscious". In: Maurizio Passerin d'Entrèves and Seyla Benhabib (eds.), [...] MIT Press, 1997, pp.172–193[...]|$|E
2500|$|Courcelle's theorem {{may also}} be used with a {{stronger}} variation of <b>monadic</b> second-order logic known as MSO2. In this formulation, a graph is represented by a set V of vertices, a set ...|$|E
2500|$|With these elements, the {{programmer}} composes {{a sequence}} of function calls (the [...] "pipeline") with several bind operators chained together in an expression. Each function call transforms its input plain type value, and the bind operator handles the returned <b>monadic</b> value, which is fed into {{the next step in}} the sequence. Between each pair of composed function calls, the bind operator can inject into the <b>monadic</b> value some additional information that is not accessible within the function, and pass it along. It can also exert finer control of the flow of execution, for example by calling the function only under some conditions, or executing the function calls in a particular order.|$|E
2500|$|Jung {{understands the}} {{emergence}} of the Demiurge out of the original, unified <b>monadic</b> source of the spiritual universe by gradual stages to be analogous to (and a symbolic depiction of) {{the emergence of}} the ego from the unconscious ...|$|E
2500|$|... "?" [...] {{also has}} a <b>monadic</b> {{equivalent}} called roll, which simply returns a single random integer between 1 and its sole operand , inclusive. Thus, a role-playing game program might use the expression [...] "?20" [...] to roll a twenty-sided die.|$|E
