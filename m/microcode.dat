666|117|Public
25|$|Finally, in an {{agreement}} effective 1996, AMD received {{the rights to}} the <b>microcode</b> in Intel's x386 and x486 processor families, but not {{the rights to the}} <b>microcode</b> in the following generations of processors.|$|E
25|$|In 1990, Intel {{brought a}} {{copyright}} infringement action alleging illegal {{use of its}} 287 <b>microcode.</b> The case ended in 1994 with a jury finding for AMD and its right to use Intel's <b>microcode</b> in its microprocessors through the 486 generation.|$|E
25|$|IBM {{provided}} <b>microcode</b> assist for APL on {{a number}} of IBM370 mainframes.|$|E
40|$|Abstract: This paper {{describes}} various <b>microcoded</b> {{designs for}} modem transmitters. The digital echo modulation technique, originally introduced by J-M. Pierret, {{is applied to}} cover {{the case of a}} fully digital universal modem. The capabilities of several <b>microcoded</b> modem designs are presented and their limitations are discussed...|$|R
5000|$|Interdata 5 (list processing, <b>microcoded</b> {{automatic}} I/O channel) ...|$|R
5000|$|Ability to run {{processes}} {{with different}} <b>microcoded</b> instruction sets.|$|R
25|$|Intel {{had created}} the first {{microprocessor}}, its 4-bit 4004, in 1971. By 1975, AMD entered the microprocessor market with the Am9080, a reverse-engineered clone of the Intel 8080, and the Am2900 bit-slice microprocessor family. When Intel began installing <b>microcode</b> in its microprocessors in 1976, it entered into a cross-licensing agreement with AMD, granting AMD a copyright license to the <b>microcode</b> in its microprocessors and peripherals, effective October 1976.|$|E
25|$|The {{original}} (and subsequent) ARM implementation was hardwired without <b>microcode,</b> {{like the}} much simpler 8-bit 6502 processor used in prior Acorn microcomputers.|$|E
25|$|Wang's {{first attempt}} at a word {{processor}} was the Wang 1200, announced in late 1971, but not available until 1972. The design consisted of the logic of a Wang 500 calculator hooked up to an OEM-manufactured IBM Selectric typewriter for keying and printing, and dual cassette decks for storage. Harold Koplow, who had written the <b>microcode</b> for the Wang 700 (and its derivative, the Wang 500) rewrote the <b>microcode</b> to perform word processing functions instead of number crunching.|$|E
50|$|<b>Microcoding</b> {{has been}} popular in application-specific {{processors}} such as network processors.|$|R
5000|$|Specialized <b>microcoded</b> {{engines to}} more {{efficiently}} accomplish the tasks at hand.|$|R
5000|$|A mid-life {{upgrade to}} [...] "S3X" [...] ("Essex") {{processors}} and <b>microcodes</b> saw: ...|$|R
25|$|Microsoft {{has issued}} update KB936357 {{to address the}} errata by <b>microcode</b> update, with no {{performance}} penalty. BIOS updates are also available to fix the issue.|$|E
25|$|The <b>microcode</b> can employ both {{pipelines}} {{to enable}} auto-repeating instructions such as rep movsw perform one iteration every clock cycle, while the 80486 needed three clocks per iteration (and the earliest x86-chips {{significantly more than}} the 486). Also, optimization of the access to the first <b>microcode</b> words during the decode stages helps in making several frequent instructions execute significantly more quickly, especially in their most common forms, and in typical cases. Some examples are (486→Pentium, in clock cycles): CALL (3→1), RET (5→2), shifts/rotates (2~3→1), etc.|$|E
25|$|String {{operations}} were implemented in <b>microcode</b> in the V60/V70, but aided by hardware Data Control Unit in the V80, running at full bus speed. This made string operations {{about five times}} faster in the V80.|$|E
40|$|<b>Microcoded</b> forth kernel. <b>Microcoded</b> forth primitives. Multi-level task {{switching}} architecture {{for real}} time applications. Optional writable control store H. FORTH OPERATING SYSTEM. Hierarchical file system. Monitor level for program debug. Multi-user multi-tasking. Target compiler, 110 management. Forth 83 Compatible H 4 TH/OI OEM SINGLE BOARD. Floppy disk controller. 2 channel SIO to 38. 2 K baud Calendar clock- 4 HR backu...|$|R
5000|$|Simpler {{instruction}} sets allow direct execution by hardware, {{avoiding the}} performance penalty of <b>microcoded</b> execution.|$|R
50|$|<b>Microcoded</b> actions {{took place}} in a {{well-defined}} sequence designed to maximize the utility of many combinations.|$|R
25|$|An early 1978 {{publication}} of Rodnay Zaks from Sybex was A microprogrammed APL implementation , {{which is the}} complete source listing for the <b>microcode</b> for a Digital Scientific Corporation Meta 4 microprogrammable processor implementing APL. This topic was also {{the subject of his}} PhD thesis.|$|E
25|$|The {{attitude}} at {{the time}} was that hardware design was more mature than compiler design so this was in itself also a reason to implement parts of the functionality in hardware or <b>microcode</b> rather than in a memory constrained compiler (or its generated code) alone. After the advent of RISC, this philosophy became retroactively known as complex instruction set computing, or CISC.|$|E
25|$|The Nintendo fixed-point {{digital signal}} {{processor}} (DSP) chip allowed for fast vector-based calculations, bitmap conversions, both 2D and 3D coordinate transformations, and other functions. Four revisions of the chip exist, each physically identical but with different <b>microcode.</b> The DSP-1 version, including the later 1A and 1B bug fix revisions, is used most often; the DSP-2, DSP-3, and DSP-4 are used in only one title each.|$|E
5000|$|Some have {{described}} the 360/85's use of <b>microcoded</b> vs hardwired as a bridge to the 370/165 ...|$|R
5000|$|When {{designing}} a new processor, a hardwired control RISC has {{the following advantages}} over <b>microcoded</b> CISC: ...|$|R
5000|$|Complex <b>microcoded</b> {{instructions}} {{may require}} many clock cycles that vary, and {{are difficult to}} pipeline for increased performance.|$|R
25|$|Like the Wang 2200, the OIS was {{characterized}} by evolution into a 24-user system. The OIS and the VS overlapped. Features such as dual-coax connections to workstations and printers were common to both system families. Buried deep in the VS <b>microcode</b> are entire pieces of OIS code, probably because WP did not figure into the original design of the VS, but was added later.|$|E
25|$|Although {{it had a}} 32-bit {{internal}} bus, the V60 {{had only}} a 16-bit external data bus and a 24-bit address bus. Its architecture was carried largely intact to the V70 (μPD70632) model, which had external 32-bit buses and was released in 1987. Launched in 1989, the V80 (μPD70832) {{was the culmination of}} the series having on-chip caches, a branch predictor, and less reliance on <b>microcode</b> for complex operations. The V60-V80 architecture did not enjoy much commercial success.|$|E
25|$|In 1990, Intel also countersued AMD, renegotiating AMD's {{right to}} use {{derivatives}} of Intel's <b>microcode</b> for its cloned processors. In the face of uncertainty during the legal dispute, AMD was forced to develop clean-room designed versions of Intel code for its x386 and x486 processors, the former long after Intel had released its own x386 in 1985. In March 1991, AMD released the Am386, its clone of the Intel 386 processor. By October {{of the same year}} it had sold one million units.|$|E
5000|$|Fastpathed CALL and RET-Imm {{instructions}} (formerly <b>microcoded)</b> {{as well as}} MOVs from SIMD registers {{to general}} purpose registers ...|$|R
50|$|The M1 was an ASIC re-{{implementation}} of the M11. Despite {{being an}} ASIC implementation {{it was also}} fully <b>microcoded.</b>|$|R
50|$|The 3725 and the 3720 {{systems were}} {{announced}} in 1983. The 3725 replaced the hardware line scanners used on previous 370x machines with multiple <b>microcoded</b> processors.|$|R
25|$|In 1951, British {{scientist}} Maurice Wilkes {{developed the}} concept of microprogramming from the realisation that the central processing unit of a computer could be controlled by a miniature, highly specialised computer program in high-speed ROM. Microprogramming allows the base instruction set to be defined or extended by built-in programs (now called firmware or <b>microcode).</b> This concept greatly simplified CPU development. He first described this at the University of Manchester Computer Inaugural Conference in 1951, then published in expanded form in IEEE Spectrum in 1955.|$|E
25|$|Computer {{operating}} systems provide {{different levels of}} access to resources. A protection ring {{is one of two}} or more hierarchical levels or layers of privilege within the architecture of a computer system. This is generally hardware-enforced by some CPU architectures that provide different CPU modes at the hardware or <b>microcode</b> level. Rings are arranged in a hierarchy from most privileged (most trusted, usually numbered zero) to least privileged (least trusted, usually with the highest ring number). On most {{operating systems}}, Ring 0 is the level with the most privileges and interacts most directly with the physical hardware such as the CPU and memory.|$|E
25|$|All {{floating}} point operations are largely implemented in <b>microcode</b> across {{the family and}} thus and are fairly slow. On the V60/V70 the 32-bit {{floating point}} operations took 120/116/137 cycles for addition/multiplication/division, while the corresponding 64-bit floating point operations took 178/270/590 cycles. The V80 had some limited hardware assist for parts of the floating point operations, e.g. decomposition into sign, exponent and mantissa, thus its floating point unit was claimed up to 3 times {{as effective as the}} one of the V70, with 32-bit operations taking 36/44/74 cycles while 64-bit floating point operations taking 75/110/533 cycles on the V80 (again, for addition/multiplication/division).|$|E
50|$|The OPR {{instructions}} came in Groups. Bits 3, 8 and 11 {{identify the}} Group of an OPR instruction, {{so it was}} impossible to combine the <b>microcoded</b> actions from different groups.|$|R
50|$|Unlike the 2980, the 2970 and the {{subsequent}} 2960 were <b>microcoded,</b> and thus allowed emulation of instruction sets {{such as that of}} the older 1900 Series or the System 4.|$|R
50|$|The design {{trend toward}} heavily <b>microcoded</b> {{processors}} with complex instructions {{began in the}} early 1960s and continued until roughly the mid-1980s. At that point the RISC design philosophy started becoming more prominent.|$|R
