10|344|Public
50|$|Universal <b>Message</b> <b>Object</b> {{defines the}} {{parameters}} {{that the program}} will use for internal messaging communications and its components to set and get variables based upon the user's needs and the program's functionality.|$|E
50|$|The {{essential}} object {{for using}} SAAJ is a SOAP <b>Message</b> <b>object</b> {{created by a}} call to the createMessage method of MessageFactory. The problem of the existence of both SOAP 1.1 and SOAP 1.2 Web services is solved by having MessageFactory implementations which let the programmer specify the style to be generated. The scope of the SAAJ standard emphasizes the API for constructing SOAP messages, but it does provide the abstract SOAPConnection class, which implementations can use for simple message transmission.|$|E
50|$|The {{narrative}} is told through collectible items which {{take the form}} of a small symbol monkey. They are known as a PEMO (Personal <b>Message</b> <b>Object)</b> and act as messages from the outside world, usually in the form of news articles, emails, letters etc. Sometimes they are easy to find and other times you will have to explore the environment to find them. To support the PEMO's, you will unlock memories after each level you complete to piece together the story, these memories come in the form of a 3D animated cutscene. A gameplay trailer was released on January 20, 2015.|$|E
50|$|The client {{extracts}} {{the attributes}} {{that are of}} interest from the response <b>messages</b> <b>objects.</b>|$|R
40|$|This paper {{presents}} type-based publish/subscribe, a new {{variant of}} the publish/subscribe paradigm. Producers publish <b>message</b> <b>objects</b> on a communication bus, and consumers subscribe to the bus by specifying the types of the objects they are interested in. <b>Message</b> <b>objects</b> are considered as first class citizens and are classified by their types, instead of arbitrarily fixed topics. By reusing the type scheme of the language to classify <b>message</b> <b>objects,</b> type-based publish/subscribe avoids any unnatural subscription scheme and provides for a seamless integration of a publish/subscribe middleware with the programming language. Type-based publish/subscribe has several quantifiable advantages over other publish/subscribe variants. In particular, {{the knowledge of the}} type of <b>message</b> <b>objects</b> enforces performance optimizations when combined with dynamic filters for content-based subscription. %from dynamically defined requirements. Our type-based publish/subscribe prototype is based on Distributed Asynchronous Collections (DACs), programming abstractions for publish/subscribe interaction. They are implemented using GJ, an extended Java compiler adding genericity to the Java language, and enable the expression of safely typed distributed interaction without requiring any generation of typed proxies...|$|R
50|$|XC800 {{features}} {{a set of}} interfaces for serial communication including UART, SPI and I2C as well as CAN connectivity. CAN (Controller Area Network) is a robust serial bus designed for board to board communication in noisy environments such as automobile and industrial control systems. MultiCAN developed by Infineon improves upon previous CAN implementations by adding features such as additional CAN nodes, more <b>message</b> <b>objects</b> linked list management of <b>message</b> <b>objects</b> and support for TTCAN level 2.|$|R
5000|$|The Universal <b>Message</b> <b>Object</b> Application Programming Interface {{is part of}} {{high-level}} design methodologies used to describe and define aspects of a data object {{used in conjunction with}} the Mule ESB. The idea is to, by staged events, wrap the work into sensible bundles and process it in stages that can conform to models of transaction-based processing that are useful in time or mission-critical applications such as financial transactions, where subsequent successful outcomes are required to permit the desired outcome. But if the user fails to supply needed data or a run-time error occurs, then the model will allow for stateful backoff, meaning [...] "no harm done", the user may then complete a transaction without losing too much work or canceling an entire transaction.|$|E
30|$|Our {{mobile node}} {{simulation}} program, MN-Simulator, uses a thread pool {{with a size}} of 30 to indefinitely execute an arbitrary number of MNs, where each MN is scheduled to periodically send 20 simulated coordinates (pairs latitude, longitude) packed into the ClientLib <b>Message</b> <b>object</b> {{to one of the}} Gateways. Thus, the total size of this LocationUpdate (LU) message is approximately 1 KBd. In addition to sending LUs, each MN also receives sporadic ping messages from the Controller in the SDDL core and immediately replies with a pong message.|$|E
40|$|This study puts {{forward a}} method to model and {{simulate}} the complex system of hospital {{on the basis of}} multi-agent technology. The formation of the agents of hospitals with intelligent and coordinative characteristics was designed, the <b>message</b> <b>object</b> was defined, and the model operating mechanism of autonomous activities and coordination mechanism was also designed. In addition, the Ontology library and Norm library etc. were introduced using semiotic method and theory, to enlarge the method of system modelling. Swarm was used to develop the multi-agent based simulation system, which is favorable for making guidelines for hospital's improving it's organization and management, optimizing the working procedure, improving the quality of medical care as well as reducing medical charge costs...|$|E
40|$|This is {{the second}} report on TyCO, a (still) {{experimental}} strongly and implicitly typed concurrent object oriented programming language based on a predicative polymorphic calculus of <b>objects,</b> featuring asynchronous <b>messages,</b> <b>objects,</b> and process declarations, together with a predicative polymorphic type syste...|$|R
50|$|Objective-C {{permits the}} sending of a <b>message</b> to an <b>object</b> {{that may not}} respond. Rather than {{responding}} or simply dropping the <b>message,</b> an <b>object</b> can forward the <b>message</b> to an <b>object</b> that can respond. Forwarding {{can be used to}} simplify implementation of certain design patterns, such as the observer pattern or the proxy pattern.|$|R
40|$|This manual {{implements}} Air Force Instruction (AFI) 33 - 127, Electronic Messaging Registration and Authority. It establishes {{procedures and}} defines the acceptable formats for registration of each <b>messaging</b> <b>object.</b> Refer technical {{questions on the}} content of this manual to the Air Force Registration Authorit...|$|R
40|$|We present {{two studies}} showing that a {{matching}} effect in persuasion can be observed between message content and the shared symbolic representation of the <b>message</b> <b>object.</b> The experimental paradigm {{was built on the}} Italian political context where citizens hold asymmetrical symbolic representations about the right-wing and the left-wing (i. e., centered on the leaders in the former, and on the coalition in the latter). Since 2001, both coalitions have focused their persuasive strategies principally on candidate image. Thus, the right-wing coalition is in a communicative congruence condition, whereas the left-wing coalition is in an incongruent condition. Results showed that when the coalitions use these images in corresponding ways, they provoke in the audience an impression of message efficacy, enhancing their persuasiveness...|$|E
40|$|We {{present a}} {{lightweight}} open source object-oriented services framework for constructing distributed applications. The congruence of internal object and externally passed messages facilitates the rapid development of correct, robust, and high-performance information-centric applications. The Object-Oriented Distributed Semantic Services (OODSS) framework is validated through its intensive use in an interaction logging service, a networked team game with hard time constraints, {{and a variety}} of other interactive systems. OODSS is lightweight, making it easy to quickly construct, debug, and deploy networked applications. OODSS connects data to algorithms by integrating the ecologylab. xml information binding framework. ecologylab. xml efficiently translates <b>message</b> <b>object</b> instances to and from XML documents. Message declaration source code combines data fields with algorithms declared in methods. The programmer instantiates message objects. OODSS automatically transforms them to XML, sends them over the network, transforms them back into object instances on the other side, and performs remote method invocation. ecologylab. xml is extremely efficient, enabling high-speed network transfer. Because messages are XML, they are human-readable, simplifying debugging, yet the compression option minimizes data transfer...|$|E
40|$|After 14 {{years of}} rising death rates due to unintentional {{injuries}} in the U. S., {{it is time to}} ask how safety messages can be redesigned to have a greater impact on risky behavior. To this end, many researchers have called for a new, narrative approach to prevention messages [...] based on persuasive stories about people who have suffered injuries and illnesses in the past. Still, there is scant evidence that story-based communications are more effective than equivalent non-narrative messages at changing actual (rather than self-reported) safety and health behavior. Our research examined the impact of injury stories on actual safety behavior in a controlled experimental setting at a US university. Teams of participants assembled a product (a child's swing) using written instructions. The instructions contained safety messages targeting assembly mistakes that have been linked to serious injuries in children who play on swings. Participant teams were randomly assigned to three conditions: assembly instructions containing story-based safety messages, instructions with concrete (but non-anecdotal) safety messages, and instructions with traditional abstract safety messages. After adjustment for covariates, story-based messages resulted in a 19 percent improvement in safety behavior, compared with non-narrative communications. Importantly, injury stories did not create undue fear of the <b>message</b> <b>object,</b> demonstrating that brief anecdotes about accident victims can convince people to take reasonable precautions without creating unwarranted alarm about risks. USA narrative communication Health communication Injury prevention Stories Anecdotes Safety Warnings Accident prevention...|$|E
40|$|This is {{the third}} report on TyCO, a (still) {{experimental}} strongly and implicitly typed concurrent object based programming language based on a predicative polymorphic calculus of <b>objects,</b> featuring asynchronous <b>messages,</b> <b>objects,</b> and procedures, together with a predicative polymorphic typing assignment system, assigning monomorphic types to variables and polymorphic types to procedure...|$|R
5000|$|... #Subtitle level 4: Allocation {{of dynamic}} memory for <b>message</b> and <b>object</b> storage ...|$|R
50|$|Data : Standby for {{improved}} data modem (IDM) data <b>message</b> concerning (<b>object)</b> at stated location.|$|R
40|$|The initial aim of {{this project}} was to create an {{ethernet}} (IEEE 802. 3) Communications System. The system was to connect Embedded controllers to facilitate the operation of a real time operation. After extensive investigation and scheduled meetings with industry, {{it became apparent that}} a superior communication system for this type of task lay in the Controller Area Network (CAN) standard. Communications Networks are extremely susceptible to volatile surroundings. A vital controller network necessitates that its communication network be invulnerable to high noise levels. It is also imperative that critical messages from one controller reach their destination on time. CAN was conceived by BOSCH as a solution to this dilemma. The project undertaken was to develop a controller area network, whose purpose was to control a solar tracker in a remote fashion. The solar tracker developed needed {{to be able to work}} in an autonomous fashion via its own embedded controller, however be able to receive commands from a remote control unit. This remote unit was able to display the status and operation mode of the tracker, yet also be able to issue over ridding commands to the tracker in a real time sense. A CAN network was created and interfaced to a MC 68 HC 11 embedded controller. A two wire differential (RS 485) system was implemented as the physical CAN bus. Every aspect of interfacing the CAN (Intel 82527) device to the HC 11 was investigated. Chip Select problems resulted in the simulation of the of the HC 11 Address/Data bus using a MC 68 HC 24 Port Replacement Unit (PRU), even the possibility of Serial Peripheral Interface (SPI) connection was considered before a hardware solution was developed. The driver software and low level communication system developed addresses all aspects of operation, from initialisation of the 82527, to dealing with the reception and transmission of various messages. Software to enable simultaneous network communications and solar tracking operation was completed for the solar tracking device. Every <b>message</b> <b>object</b> type was utilised within the system. The generation interrupts to deal with the reception of critical messages, and other message prioritisation schemes were incorporated. The resulting system demonstrated that the controller was able to drive a solar tracking panel and receive additional commands and issue status reports to a remote micro controller, in a real time situation. Such a system as this could have many solar trackers connected to the same bus and result in a cheap but reliable installation. Alternatively virtually any Industrial distributed automated process confined within a relatively close proximity could be developed by using a derivative of such a system described within this report...|$|E
40|$|This {{document}} specifies an Internet Best Current Practices for the Internet Community, {{and requests}} discussion {{and suggestions for}} improvements. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2004). This memo specifies procedures for modifying the Resource reSerVation Protocol (RSVP). This memo also lays out new assignment guidelines for number spaces for RSVP <b>messages,</b> <b>object</b> classes, class-types, and sub-objects. 1...|$|R
50|$|An Active message (in computing) is a <b>messaging</b> <b>object</b> {{capable of}} {{performing}} processing on its own. It is a lightweight messaging protocol used to optimize network communications {{with an emphasis}} on reducing latency by removing software overheads associated with buffering and providing applications with direct user-level access to the network hardware. This contrasts with traditional computer-based messaging systems in which messages are passive entities with no processing power.|$|R
50|$|Greenblatt is a {{co-inventor}} {{on three}} key U.S. patents: USP 5848234 entitled “Object Procedure <b>Messaging</b> Facility” covering <b>object</b> <b>message</b> passing, and USP 5809238 entitled “Data Server with Event Driven Sampling” covering object data stores and USP 6718399 “Communications on a Network”.|$|R
50|$|Created by a selector, it is {{possible}} {{to send a message to}} particular <b>message</b> consumer <b>objects.</b> The communication may be synchronous or asynchronous.|$|R
50|$|For the {{transport}} layer, Cryptocat adopts the OMEMO Multi-End <b>Message</b> and <b>Object</b> Encryption standard, which also gives Cryptocat multi-device support {{and allows for}} offline messaging.|$|R
40|$|The MeshRouter {{architecture}} {{provides a}} general framework for interest-limited message ex- changes among client processes. There are two general {{areas in which}} the MeshRouter im- plementation depends on specics of the associated clients: i) the lowest level inter-processor communications model and ii) the nature/content of exchanged messages and ". This note describes the hierarchical object design (C++ sense) used to implement the basic <b>Message</b> and Interest <b>objects</b> of the MeshRouter. Interfaces are dened in terms of abstract base classes, and specific inherited objects appropriate for the RTI-s/JSAF application are presented as concrete examples. The MeshRouter system includes a substantial memory management com- ponent for efficient use of the basic <b>Message</b> <b>objects.</b> This system is summarized and plausible near-term extensions are noted...|$|R
5000|$|Messaging: configurative {{registration}} of <b>message</b> listener <b>objects</b> for transparent message-consumption from message queues via Java Message Service (JMS), improvement of message sending over standard JMS APIs ...|$|R
40|$|This study characterizes and assesses {{alternative}} approaches to software component interoperability in distributed environments typical of C 4 ISR systems. Interoperability {{is the ability}} of systems to provide services to and accept services from other systems, and to use the services so exchanged to enable them to operate effectively together. This study characterizes and assesses {{alternative approaches}} to software component interoperability in distributed environments. Candidate approaches include wrappers, translators, data mediators, replicators, <b>messaging,</b> <b>Object</b> Request Broker (ORBs), and JINI for legacy systems and new systems...|$|R
40|$|There is a quite wide {{distance}} between producer and consumer {{in the marketplace}} today and the task to close {{it is to the}} advertisement. Various human objects -male, female, child up to artistic creatures- are used by advertisers to address the consumers emotions to persuade rational needs with the objective to sell a particular product or service. In this study we tried to show the importance of using male and female <b>message</b> <b>objects</b> in advertisements which are composed with the goal to increase sales...|$|R
50|$|An Intent in the Android {{operating}} {{system is a}} software mechanism that allows users to coordinate the functions of different activities to achieve a task. An Intent is a <b>messaging</b> <b>object</b> which provides a facility for performing late runtime binding between the code in different applications in the Android development environment. Its most significant use is in the launching of activities, {{where it can be}} thought of as the glue between activities: Intents provide an inter-application messaging system that encourages collaboration and component reuse.|$|R
50|$|Pd {{supports}} {{four basic}} types of text entities: <b>messages,</b> <b>objects,</b> atoms, and comments. Atoms {{are the most}} basic unit of data in Pd, and {{they consist of either}} a float, a symbol, or a pointer to a data structure (in Pd, all numbers are stored as 32-bit floats). Messages are composed of one or more atoms and provide instructions to objects. A special type of message with null content called a bang is used to initiate events and push data into flow, much like pushing a button.|$|R
40|$|In {{distributed}} systems, {{the different}} processors communicate via network <b>messages.</b> <b>Object</b> oriented systems do {{not focus on}} these messages, but on the responsibilities each object fulfils. Between the top-level objects it should be invisible on which system an addressed object resides. The Transparent Remote Access pattern gives a recipe how {{the implementation of a}} method can defer the invocation to another processor. To support Transparent Remote Access even on small machines, a stepwise approach is introduced that allows for simplification when only a part of the functionality is needed...|$|R
50|$|In non-procedural paradigms, goto is less {{relevant}} {{or completely}} absent. One {{of the main}} alternatives is message passing, which is of particular importance in concurrent computing, interprocess communication, and object oriented programming. In these cases, the individual components do not have arbitrary transfer of control, but the overall control may be scheduled in complex ways, such as via preemption. The influential languages Simula and Smalltalk {{were among the first}} to introduce the concepts of <b>messages</b> and <b>objects.</b> By encapsulating state data, object-oriented programming reduced software complexity to interactions (<b>messages)</b> between <b>objects.</b>|$|R
5000|$|For example, after a C++ {{version of}} the {{protocol}} buffer schema above is produced, a C++ source code file, polyline.cpp, can use the <b>message</b> <b>objects</b> as follows:// polyline.cpp#include [...] "polyline.pb.h" [...] // generated by calling [...] "protoc polyline.proto"Line* createNewLine(const std::string& name) { // create a line from (10, 20) to (30, 40) Line* line = new Line; line->mutable_start (...) ->set_x(10); line->mutable_start (...) ->set_y(20); line->mutable_end (...) ->set_x(30); line->mutable_end (...) ->set_y(40); line->set_label(name); return line;}Polyline* createNewPolyline (...) { // create a polyline with points at (10,10) and (20,20) Polyline* polyline = new Polyline; Point* point1 = polyline->add_point (...) point1->set_x(10); point1->set_y(10); Point* point2 = polyline->add_point (...) point2->set_x(20); point2->set_y(20); return polyline;} ...|$|R
5000|$|Queue: <b>Message</b> queues are <b>objects</b> {{that store}} <b>messages</b> in an application.|$|R
50|$|In {{the theory}} of {{object-oriented}} programming an object {{is said to have}} an internal state and is capable of receiving messages, responding to them, sending <b>messages</b> to other <b>objects</b> and changing the internal state during message handling. In more practical terminology, to call an object's method is considered the same as to send a <b>message</b> to the <b>object.</b>|$|R
40|$|Class The Queue {{abstract}} class z defines an interface that subclasses inherit and selectively override {{to provide the}} read-side and write-side protocol functionality in a Module. The Queue class is an {{abstract class}} since its interface defines the four pure virtual methods (open, close, put, and svc) described below. By defining Queue as an abstract class, the protocol-independent components (such as <b>message</b> <b>objects,</b> <b>message</b> lists, and message demultiplexing mechanisms) provided by the Stream class category are decoupled from the protocol-specific subclasses (such as those implementing the data-link, IP, TCP, UDP, and XDR protocols) that inherit and use these components. This decoupling enhances z An abstract class in C++ provides an interface that contains at least one pure virtual method. A pure virtual method provides only an interface declaration, without supplying any accompanying definition for the method. Subclasses of an abstract class must provide definitions for all its p [...] ...|$|R
