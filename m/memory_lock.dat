5|100|Public
5000|$|<b>Memory</b> <b>lock</b> (MLB) output {{indicates}} {{to other}} bus masters when a read-modify-write instruction is being processed ...|$|E
50|$|As {{the first}} {{generation}} of matrix metering, AMP was hardly foolproof. For instance, holding the FA vertically instead of horizontally might cause the meter to give different readings of the same scene. However, AMP was still demonstrably superior to the centerweighted type of light metering then in common use. AMP would give a good exposure 90-95% of the time versus 85-90% for centerweighting. Note that AMP was automatically disabled in the FA's manual exposure mode and could be turned off in the autoexposure modes. In both cases, the FA would default to Nippon Kogaku's traditional 60/40% centerweighted metering. However, the FA omitted the autoexposure <b>memory</b> <b>lock</b> of the FE2 - AMP was supposed to obviate any need for it.|$|E
40|$|Abstract. We {{extend the}} Jinja source code {{semantics}} by Klein and Nipkow with Java-style arrays and threads. Concurrency is captured in a generic framework semantics for adding concurrency through interleaving to a sequential semantics, which features dynamic thread creation, inter-thread communication via shared <b>memory,</b> <b>lock</b> synchronisation and joins. Also, threads can suspend themselves and be notified by others. We instantiate the framework with the adapted versions of both Jinja source and byte code and show type safety for the multithreaded case. Equally, the compiler from source to byte code is extended, {{for which we}} prove weak bisimilarity between the source code small step semantics and the defensive Jinja virtual machine. On top of this, we formalise the JMM and show the DRF guarantee and consistency...|$|E
5000|$|Uses system RAM {{for sound}} storage (<b>memory</b> <b>locked</b> or dynamic OS control) ...|$|R
5000|$|... #Subtitle level 3: Episode 4: Tis in My <b>Memory</b> <b>Locked</b> and You Yourself Shall Keep the Key of It ...|$|R
5000|$|... "Episode 4: ‘Tis in My <b>Memory</b> <b>Locked.</b> And You Yourself Shall Hold The Key Of It" [...] (November 6, 2011) ...|$|R
40|$|Shared memory {{programs}} {{guarantee the}} correctness of concurrent accesses to shared data using interprocessor synchronization operations. The most common synchronization operators are locks, which are traditionally implemented via {{a mix of}} shared memory accesses and hardware synchronization primitives like test-and-set. In this paper, we argue that synchronization operations implemented using fast message passing and kernelembedded lock managers are an attractive alternative to dedicated synchronization hardware. We propose three message passing lock (MP-LOCK) algorithms (centralized, distributed, and reactive) and provide implementation guidelines. MP-LOCKs reduce the design complexity and runtime occupancy of DSM controllers and can exploit software's inherent flexibility to adapt to differing applications lock access patterns. We compared the performance of MP-LOCKs with two common shared <b>memory</b> <b>lock</b> algorithms: test-and-test-and-set and MCS locks and found that MP-LOCKs scale better [...] ...|$|E
40|$|Producer-initiated {{mechanisms}} {{are added to}} invalidatebased systems to reduce communication latencies by transferring data {{as soon as it}} is produced. This paper compares the performance of three producer-initiated mechanisms: lock, deliver, and StreamLine. All three approaches out-perform invalidate with prefetch in most cases. Cached-based locks offer 10 [...] 20 % speedup over prefetch for two of the three benchmarks studies. StreamLine performs well in low-bandwidth environments, but does not improve with increased bandwidth. Deliver is generally competitive with prefetch, but does not offer a significant performance advantage overall. Keywords: shared <b>memory,</b> <b>lock,</b> deliver, message passing 1 Introduction Data communication is a critical component of the performance of large-scale multiprocessor systems. All non-trivial parallel applications require the communication of data among the participating processors. The latency of this communication largely determines the performance and sca [...] ...|$|E
5000|$|... "Episode 4: Tis in My <b>Memory</b> <b>Locked</b> and You Yourself Shall Keep the Key of It" [...] was {{released}} on November 6, 2011 as a free download.|$|R
40|$|Erlang is an {{interesting}} example of a concurrent, high-level programming lan-guage. It is very instructive to consider {{how easy it is}} to write complex con-current applications in Erlang compared to concurrent programming languages that are based on shared <b>memory,</b> <b>locks,</b> and synchronization. On the othe...|$|R
50|$|Adjustable Wheel Base on 12 mm Thru-Axle. This axle setup {{features}} on the DHExtreme-8, Europa DS (12 mm version), Europa FS, and Triton DH. The Wheelbase can be adjusted horizontally by 1 inch to effect {{the handling of the}} bike. The axle is tightened with a 9 m allen key and <b>memory</b> <b>locked</b> with two smaller horizontal allen bolts, creating a very stiff wheelbase. The disk-brake mount and derrailleur hanger make up either side of the moving section, and can therefore be replaced if damaged.|$|R
5000|$|JavaPoly is {{a library}} that polyfills native JVM support within any modern web browser. [...] This allows {{websites}} to import Java libraries, and call them directly from Javascript, {{even if the}} user does not have Java installed on their computer. [...] Unlike GWT and TeaVM, which attempt to compile a subset of Java into Javascript, JavaPoly actually executes [...] Java bytecode instructions. This means that JavaPoly can run almost any Java library, including libraries that use threads, shared <b>memory,</b> <b>locking</b> primitives, and 64-bit integers.|$|R
50|$|LynxOS is the company's {{real-time}} operating system. It is UNIX-compatible and POSIX-compliant. It features predictable worst-case response time, preemptive scheduling, real-time priorities, ROMable kernel, and <b>memory</b> <b>locking.</b> With LynxOS 7.0 is {{marketed as}} a military grade Operating system, and is intended for developers to embed these security features as they design their system, rather than adding security as an afterthought. This security {{can be used to}} protect both user accessible and also machine to machine (M2M) based embedded devices utilizing access control lists, audit, quotas, local trusted path, account management, trusted menu manager and OpenPAM.|$|R
5000|$|Most {{implementations}} {{of software}} transactional <b>memory</b> use optimistic <b>locking.</b>|$|R
50|$|The Silver Lining is a five-chapter episodic video fangame {{based on}} the King's Quest series, which was {{developed}} and released in free download format by Phoenix Online Studios for Microsoft Windows starting July 18, 2010. The most recent release, Episode 4: ‘Tis in My <b>Memory</b> <b>Locked.</b> And You Yourself Shall Hold The Key Of It, was released on November 8, 2011. Until the release of King's Quest, the official ninth installment of the series, TSL remained the first release in over fifteen years to feature Graham's family in a new adventure (since King's Quest VII: The Princeless Bride).|$|R
5000|$|<b>Memory</b> card <b>lock</b> - Early {{releases}} of firmware {{do not allow}} installing applications to memory card, and stops memory cards from going over 1 GB, but [...] "NOPEX" [...] 3rd party application fixes this issue.|$|R
40|$|We present CYCLADES, {{a general}} {{framework}} for parallelizing stochastic optimization algorithms in a shared memory setting. CYCLADES is asynchronous during shared model updates, and requires no <b>memory</b> <b>locking</b> mechanisms, similar to HOGWILD!-type algorithms. Unlike HOGWILD!, CYCLADES introduces no conflicts during the parallel execution, {{and offers a}} black-box analysis for provable speedups across a large family of algorithms. Due to its inherent conflict-free nature and cache locality, our multi-core implementation of CYCLADES consistently outperforms HOGWILD!-type algorithms on sufficiently sparse datasets, leading to up to 40 % speedup gains compared to the HOGWILD! implementation of SGD, and up to 5 x gains over asynchronous implementations of variance reduction algorithms...|$|R
40|$|We {{propose a}} type system to {{guarantee}} safe resource deal-location for shared-memory concurrent programs by extend-ing the previous type {{system based on}} fractional ownerships. Here, safe resource deallocation means that <b>memory</b> cells, <b>locks,</b> or threads are not left allocated when a program ter-minates. Our framework supports (1) fork/join parallelism, (2) synchronization with locks, and (3) dynamically allo-cated <b>memory</b> cells and <b>locks.</b> The type system is proved to be sound. We also provide a type inference algorithm for the type system and a prototype implementation of the algo-rithm...|$|R
40|$|This {{inclusive}} {{piece by}} Exim dance {{company is a}} meditation on the effort required in the present, to remember the past. Exim Dance Company The Birth of Memory "Distinctive, refined yet sensitive. " - Preview Tour Audience Member This inclusive piece by Exim dance company is a meditation on the effort required in the present, to remember the past. Award winning choreographer Adam Benjamin delicately explores <b>memories</b> <b>locked</b> and un-locked, drawing on his collaboration with architect and composer Mathew Emmett and on the contributions of dancers, Emma Pendle, Laura Henry, Mike Williams and particularly the raw, indefinable movement quality of Kevin French whose muscles and speech are affected by cerebral palsy. Choreography: Adam Benjamin  Performers: Emma Pendle, Kevin French, Laura Henry and Mike Williams  Music: Mathew Emmett, Eduardo Miranda and Andy Cowton  Film: Kayla Parker  Film score: Stuart Moore Lighting and Production Design: Charlotte Burton and Tim Hardy  Images: Claire SummersChoreographed and directed by Adam Benjamin with the dancers of Exim Dance Company, Emmett’s soundscape evolved from the hybridisation of dance, sound, space and digital technology. The Birth of Memory was performed at The Place, London in January 2016, whereabouts the music emphasises the interrelationships between performative space, the cognised environment and the dynamics of movement that draws upon integrative practice and the non-traditional exploration of acoustic space. Adam Benjamin and Mathew Emmett have been exploring performative space within contemporary dance {{through a number of}} collaborative works, where upon the impetus for The Birth of Memory has grown from an interdisciplinary practice that interrogates the spatial qualities of <b>memories</b> <b>locked</b> within our bodies...|$|R
40|$|Posix 1003. 1 b: a {{standard}} for real-time Unixes ➟ POSIX: family of IEEE/ISO standards (IEEE committee number 1003) aimed at standardizing services and interfaces offered by Unix-like OS. Eg, Posix 1003. 1 (C library), Posix 1003. 2 (Shell), Posix 1003. 1 b (real-time), Posix 1003. 1 c (threads) ➟ Benefit of Posix: portability at the source code level ➟ History: first draft in 1985, Posix 1003. 1 in 1990, 1003. 1 b in 1993 (aka “posix. 4 ”), 1003. 1 c in 1995, second version of Posix 1003. 1 b in 1996 ➟ Posix 1003. 1 b defines “real-time ” features: semaphores, shared <b>memory,</b> <b>locking</b> processes in RAM, memory-mapped files, asynchronous I/O, high-res clocks and timers, signals, schedulin...|$|R
40|$|Stochastic Gradient Descent (SGD) is {{a popular}} {{algorithm}} that can achieve stateof-the-art performance {{on a variety of}} machine learning tasks. Several researchers have recently proposed schemes to parallelize SGD, but all require performancedestroying <b>memory</b> <b>locking</b> and synchronization. This work aims to show using novel theoretical analysis, algorithms, and implementation that SGD can be implemented without any locking. We present an update scheme called HOGWILD! which allows processors access to shared memory with the possibility of overwriting each other’s work. We show that when the associated optimization problem is sparse, meaning most gradient updates only modify small parts of the decision variable, then HOGWILD! achieves a nearly optimal rate of convergence. We demonstrate experimentally that HOGWILD! outperforms alternative schemes that use locking by an order of magnitude. ...|$|R
50|$|The core runs eight threads concurrently. These threads can {{communicate}} and synchronise using <b>memory,</b> registers, channels, <b>locks,</b> or synchronisers.|$|R
50|$|Spartan was an android {{constructed}} by Lord Emp, using technology from the rogue island of Gamorra. Yohn Kohl's <b>memories</b> were <b>locked</b> away and Emp worked on perfecting the android. Spartan {{was named after}} a series of bodyguard cyborgs used by Kherubim Lords on their homeworld of Khera.|$|R
50|$|To {{take the}} song example again, the user's music player {{software}} could send the song to other machines, {{but only if}} they could attest that they were running a secure copy of the music player software. Combined with the other technologies, this provides a more secured path for the music: secure I/O prevents the user from recording it as it is transmitted to the audio subsystem, <b>memory</b> <b>locking</b> prevents it from being dumped to regular disk files as it is being worked on, sealed storage curtails unauthorized access to it when saved to the hard drive, and remote attestation protects it from unauthorized software even when it is used on other computers. Sending remote attestation data to a trusted third party, however, has been discouraged in favour of Direct Anonymous Attestation.|$|R
5000|$|West Hartlepool RFC hung {{up their}} No. 5 jersey in <b>memory</b> of their <b>lock</b> John How {{who died of}} a heart {{condition}} in a 1994 league match.|$|R
40|$|The Virtual Interface Architecture (VIA) [1] is an {{industry}} standard specifying how user processes can access networking hardware directly in a protected manner. This allows for building high performing cluster interconnects with a standardized interface. One characteristic of the VI Architecture is that it requires that all memory used for communication be locked down into physical memory. During the so called "memory registration" the Kernel Agent must force in all pages and ensure that they stay locked until the region is deregistered again. Above that, the VIA specification explicitely allows memory regions to be registered multiple times. However, all freely available VIA implementations for Linux either do not reliably <b>lock</b> the <b>memory</b> or they do not allow multiple registrations. In this {{paper we propose a}} mechanism based on kiobufs that meets both requirements and is compatible to the standard Linux kernels. Keywords [...] - Linux, Cluster interconnects, VIA, <b>Memory</b> <b>locking,</b> kiobufs [...] . ...|$|R
40|$|Supporting the {{programming}} of stateful packet forwarding functions in hardware has recently attracted {{the interest of}} the research community. When designing such switching chips, the challenge is to guarantee the ability to program functions that can read and modify data plane's state, while keeping line rate performance and state consistency. Current state-of-the-art designs are based on a very conservative all-or-nothing model: programmability is limited only to those functions that are guaranteed to sustain line rate, with any traffic workload. In effect, this limits the maximum time to execute state update operations. In this paper, we explore possible options to relax these constraints by using simulations on real traffic traces. We then propose a model in which functions can be executed in a larger but bounded time, while preventing data hazards with <b>memory</b> <b>locking.</b> We present results showing that such flexibility can be supported with little or no throughput degradation. Comment: 6 page...|$|R
40|$|Abstract: The {{unpredictable}} {{behavior of}} conventional caches presents several problems {{when used in}} real-time multitask systems. It {{is difficult to know}} its effects in the Worst Case Execution Time and it introduces additional delays when different tasks compete for cache contents in multitask systems. This complexity in the analysis may be reduced using alternative architectures to cache memories, that improves predictability but obtaining similar performance. This is the case of locking caches, that may preload and lock cache contents, precluding the replacement during system operation, thus making cache and system behavior more predictable by means of simple, well-known and easy-to-use algorithms. This work presents an analysis of worst-case performance obtained with the static use of locking caches versus worst-case performance obtained with conventional (non-locking) caches. Analysis results show that predictability can be reached with no loss of performance, and the scenarios where the locking cache provides similar performance to conventional caches may be estimated from system parameters like task size, cache size, level of locality and level of interference, without running any experiment. Key-words: real-time systems, cache <b>memories,</b> <b>locking</b> cache, schedulability analysis, performance. ...|$|R
5000|$|Vivien Traverse (Leilah de Meza). Vivien is {{the little}} sister of Eve who knows {{something}} about Lucy's death. No one knows her secret, the shock of which causes the <b>memory</b> to be <b>locked</b> away for years.|$|R
50|$|If {{played on}} an Apple IIgs, the {{processor}} speed must be set prior to starting the game. If the Classic Control Panel is accessed {{after the game}} is launched, it makes alterations to the screen holes in the secondary text screen. During game play these bytes are periodically checked and, if found altered, a copy protection routine is tripped that attempts to wipe the game from <b>memory</b> and <b>locks</b> up the system, requiring a reboot.|$|R
50|$|Up to this point, Keiichi {{has managed}} to remain {{surprisingly}} stoic despite Belldandy's condition. However, as he drives back to the temple that night at dangerously high speeds, he is so immersed in his troubles that he subconsciously expects Belldandy to aid him in making a sharp turn, without realizing that those <b>memories</b> remain <b>locked</b> and this almost causes an accident. Realizing Keiichi's guilt stirs something in Belldandy's heart, perhaps a faint reminder of the love they once shared.|$|R
40|$|Finding a {{fixed point}} to a nonexpansive operator, i. e., $x^*=Tx^*$, abstracts many {{problems}} in numerical linear algebra, optimization, and other areas of scientific computing. To solve fixed-point problems, we propose ARock, an algorithmic framework in which multiple agents (machines, processors, or cores) update $x$ in an asynchronous parallel fashion. Asynchrony is crucial to parallel computing since it reduces synchronization wait, relaxes communication bottleneck, and thus speeds up computing significantly. At each step of ARock, an agent updates a randomly selected coordinate $x_i$ based on possibly out-of-date information on $x$. The agents share $x$ through either global memory or communication. If writing $x_i$ is atomic, the agents can read and write $x$ without <b>memory</b> <b>locks.</b> Theoretically, we show that if the nonexpansive operator $T$ has a fixed point, then with probability one, ARock generates a sequence that converges to a fixed points of $T$. Our conditions on $T$ and step sizes are weaker than comparable work. Linear convergence is also obtained. We propose special cases of ARock for linear systems, convex optimization, machine learning, as well as distributed and decentralized consensus problems. Numerical experiments of solving sparse logistic regression problems are presented. Comment: updated the linear convergence proof...|$|R
50|$|XCHG {{may not be}} as {{efficient}} as one may think. For example, in x86 processors, XCHG will implicitly lock access to any operands in memory to keep the operation atomic, and so may not be efficient when swapping <b>memory.</b> Such <b>locking</b> is important when it is used to implement thread-safe synchronization, as in mutexes. However, an XCHG is usually the fastest way to swap two machine-size words residing in registers. Register renaming may also be used to swap registers efficiently.|$|R
5000|$|Note, {{a common}} type of architecture, [...] "load-store", is a synonym for [...] "Register Register" [...] below, meaning no {{instructions}} access memory except special - load to register(s) - and store from register(s) - with the possible exceptions of atomic <b>memory</b> operations for <b>locking.</b>|$|R
40|$|Recent {{advances}} in chip design have necessitated {{the development of}} a new program-ming model to simplify multithreaded programming. Transactional <b>Memory</b> (TM) re-places <b>lock</b> based thread synchronization with a new interface that approximates global lock semantics. In this paper an implementation of RSTM in Java is compared an...|$|R
50|$|Athene was an object-based {{operating}} system first released in 2000 by Rocklyte Systems. The user environment was constructed entirely from {{objects that are}} linked together at runtime. Applications for Athene could also be created using this methodology and were commonly scripted using the object scripting language Dynamic Markup Language (DML). Objects could have been shared between processes by creating them in shared <b>memory</b> and <b>locking</b> them as needed for access. Athenes object framework was multi-platform, allowing it {{to be used in}} Windows and Linux environments for the development of object-oriented programs. The company went defunct and the project abandoned sometime in 2009.|$|R
