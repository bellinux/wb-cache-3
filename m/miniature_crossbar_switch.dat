0|600|Public
50|$|The {{obvious way}} to emulate a <b>crossbar</b> <b>switch</b> {{was to find}} some way to build it from smaller <b>crossbar</b> <b>switches.</b> If a <b>crossbar</b> <b>switch</b> could be {{emulated}} by some arrangement of smaller <b>crossbar</b> <b>switches,</b> then these smaller <b>crossbar</b> <b>switches</b> could also, in turn be emulated by even smaller <b>crossbar</b> <b>switches.</b> The switching fabric could become very efficient, and possibly even be created from standardized parts. This is called a Clos network.|$|R
50|$|The {{majority}} of Bell System switches {{were made to}} connect three wires including the tip and ring of a balanced pair circuit and a sleeve lead for control. Many connected six wires, either for two distinct circuits or for a four wire circuit or other complex connection. The Bell System Type C <b>miniature</b> <b>crossbar</b> of the 1970s was similar, but the fingers projected forward from the back and the select bars held paddles to move them. The {{majority of}} type C had twelve levels; these were the less common ten level ones. The Northern Electric Minibar used in SP1 switch was similar but even smaller. The ITT Pentaconta Multiswitch of the same era had usually 22 verticals, 26 levels, and six to twelve wires. Ericsson <b>crossbar</b> <b>switches</b> sometimes had only five verticals.|$|R
40|$|Abstract — We {{propose a}} new <b>crossbar</b> <b>switch</b> {{structure}} with adaptive bandwidth control. In a complex SoC design, the proposed <b>crossbar</b> <b>switch</b> efficiently incorporates various IPs with different bandwidth requirements. Simulation under various traffic scenarios {{shows that the}} throughput of the proposed <b>crossbar</b> <b>switch</b> {{is as high as}} that of conventional switch operating at twice the speed. The proposed <b>crossbar</b> <b>switch</b> shows maximum 27 % improvement in throughput and maximum 41 % improvement in latency compared to the conventional one. The proposed <b>crossbar</b> <b>switch</b> is implemented using verilog HDL, synthesized with 0. 18 um process library, and verified on FPGAs. The area and power overhead of the proposed <b>crossbar</b> <b>switch</b> is 21 % and 15 %, respectively, when compared to the conventional <b>crossbar</b> <b>switch.</b> I...|$|R
5000|$|... #Caption: A {{substitute}} for a 16x16 <b>crossbar</b> <b>switch</b> made from 12 4x4 <b>crossbar</b> <b>switches.</b>|$|R
50|$|A {{practical}} {{implementation of a}} switch can be created from an odd number of layers of smaller subswitches. Conceptually, the <b>crossbar</b> <b>switches</b> of the three-stage switch can each be further decomposed into smaller <b>crossbar</b> <b>switches.</b> Although each subswitch has limited multiplexing capability, working together they synthesize {{the effect of a}} larger N&times;N <b>crossbar</b> <b>switch.</b>|$|R
50|$|For {{instrumentation}} use, James Cunningham, Son and Company made high-speed, very-long-life <b>crossbar</b> <b>switches</b> with physically small {{mechanical parts}} which permitted faster operation than telephone-type <b>crossbar</b> <b>switches.</b> Many of their switches had the mechanical Boolean AND function of telephony <b>crossbar</b> <b>switches,</b> but other models had individual relays (one coil per crosspoint) in matrix arrays, connecting the relay contacts to x and y buses. These latter types were equivalent to separate relays; {{there was no}} logical AND function built in. Cunningham <b>crossbar</b> <b>switches</b> had precious-metal contacts capable of handling millivolt signals.|$|R
50|$|Clos {{networks}} have three stages: the ingress stage, middle stage, and the egress stage. Each stage {{is made up}} of a number of <b>crossbar</b> <b>switches</b> (see diagram below), often just called crossbars. Each call entering an ingress <b>crossbar</b> <b>switch</b> can be routed through any of the available middle stage <b>crossbar</b> <b>switches,</b> to the relevant egress <b>crossbar</b> <b>switch.</b> A middle stage crossbar is available for a particular new call if both the link connecting the ingress switch to the middle stage switch, and the link connecting the middle stage switch to the egress switch, are free.|$|R
50|$|A junctor is {{a circuit}} used in analog {{telephone}} exchanges, including the Number One <b>Crossbar</b> <b>Switching</b> System, Number Five <b>Crossbar</b> <b>Switching</b> System, Panel switch, 1ESS switch and other switches.|$|R
40|$|Abstract: Network-on-Chip (NoC) is the {{interconnection}} {{platform that}} answers {{the requirements of}} the modern on-Chip design. Small optimizations in NoC router architecture can show a significant improvement in the overall performance of NoC based systems. Power consumption, area overhead and the entire NoC performance is influenced by the router <b>crossbar</b> <b>switch.</b> This paper presents implementation of 10 x 10 reconfigurable <b>crossbar</b> <b>switch</b> (RCS) architecture for Dynamic Self-Reconfigurable BiNoC Architecture for Network On Chip. Its main purpose is to increase the performance, flexibility. This paper presents a VHDL based cycle accurate register transfer level model for evaluating the, Power and Area of reconfigurable <b>crossbar</b> <b>switch</b> in BiNoC architectures. We implemented a parameterized register transfer level design of reconfigurable <b>crossbar</b> <b>switch</b> (RCS) architecture. The design is parameterized on (i) size of packets, (ii) length and width of physical links, (iii) number, and depth of arbiters, and (iv) switching technique. The paper discusses in detail the architecture and characterization of the various reconfigurable <b>crossbar</b> <b>switch</b> (RCS) architecture components. The characterized values were integrated into the VHDL based RTL design to build the cycle accurate performance model. In this paper we show the result of simple 4 x 4 as well as 10 x 10 <b>crossbar</b> <b>switch.</b> The results include VHDL simulation of RCS on ModelSim tool for 4 x 4 <b>crossbar</b> <b>switch</b> and Xilinx ISE 13. 1 software tool for 10 x 10 <b>crossbar</b> <b>switch...</b>|$|R
40|$|Abstract — The network {{processor}} {{incorporates a}} processor {{and a number}} of coprocessors that can be connected to the processor either Directly or using a shared bus This paper presents the proposal and development of a reconfigurable <b>crossbar</b> <b>switch</b> architecture for network processors. Its main purpose is to increase the performance, and flexibility for environments with multiprocessors and computer clusters. The results include VHDL simulation of <b>Crossbar</b> <b>Switch</b> and the use of it in a broadcast function implementation, found in message passing support middleware. This reconfigurable <b>crossbar</b> <b>Switch</b> used in Network Processor to connect the various circuits which are used to perform the various task. Keywords—Reconfigurable <b>Crossbar</b> <b>switch</b> (RCS), Network Processor, FPGA, modelsim. Therefore, the main objective {{of this paper is to}} present the RCS- 2, a reconfigurable <b>crossbar</b> <b>switch</b> architecture used to connect different inputs and outputs in interconnection and communication networks, The reconfigurable <b>crossbar</b> <b>switch</b> was described in VHDL (VHSIC Hardware Description Language) and I want to implemented it on FPGA (Field Programmable Gate Array). As per the development the results show the behaviour of the application which contains communicating processes that perform a collective broadcast operation on the reconfigurable <b>crossbar</b> <b>switch.</b> The generalised block diagram for Network Processor shown in Figure 1. I...|$|R
50|$|However, the <b>crossbar</b> <b>switch</b> does so at {{the expense}} of using N2 (N squared) simple SPST switches. For large N (and the {{practical}} requirements of a phone switch are considered large) this growth was too expensive. Further, large <b>crossbar</b> <b>switches</b> had physical problems. Not only did the switch require too much space, but the metal bars containing the switch contacts would become so long that they would sag and become unreliable. Engineers also noticed that at any time, each bar of a <b>crossbar</b> <b>switch</b> was only making a single connection. The other contacts on the two bars were unused. This seemed to imply that most of the switching fabric of a <b>crossbar</b> <b>switch</b> was wasted.|$|R
40|$|Explosive {{growth of}} Internet traffic causes a new {{challenge}} {{in the design of}} high-speed switches. One of main design issues for high-speed switches is a scalability problem. This paper proposes a scalable two-dimensional <b>crossbar</b> matrix <b>switch</b> (CMS) architecture, which is composed of multiple <b>crossbar</b> <b>switch</b> units with virtual output queues (VOQs) at the inputs and single-cell scheduling decomposition buffers (SDBs) at the outputs of each <b>crossbar</b> <b>switch</b> unit. We propose a hierarchical scheduling algorithm for the proposed <b>crossbar</b> <b>switch</b> architecture, and show that the proposed switch architecture and hierarchical scheduling algorithm can provide 100 % throughput under i. i. d uniform traffic...|$|R
50|$|A rearrangeably nonblocking {{network of}} this type with m = n = 2 is {{generally}} called a Beneš network, {{even though it was}} discussed and analyzed by others before Václav E. Beneš. The number of inputs and outputs is N = r&times;n = 2r. Such networks have 2&thinsp;log2N &minus; 1 stages, each containing N/2 2&times;2 <b>crossbar</b> <b>switches,</b> and use a total of N&thinsp;log2N &minus; N/2 2&times;2 <b>crossbar</b> <b>switches.</b> For example, an 8&times;8 Benes network (i.e. with N = 8) is shown below; it has 2&thinsp;log28 &minus; 1 = 5 stages, each containing N/2 = 4 2&times;2 <b>crossbar</b> <b>switches,</b> and it uses a total of N&thinsp;log2N &minus; N/2 = 20 2&times;2 <b>crossbar</b> <b>switches.</b> The central three stages consist of two smaller 4&times;4 Benes networks, while in the center stage, each 2&times;2 <b>crossbar</b> <b>switch</b> may itself be regarded as a 2&times;2 Benes network. This example therefore highlights the recursive construction of this type of network.|$|R
40|$|Abstract — The {{throughput}} of an input-queued <b>crossbar</b> <b>switch</b> – with {{a single}} FIFO queue at each input – is limited to 2 −√ 2 ≈ 58. 6 % for uniformly distributed, Bernoulli i. i. d. arrivals of fixed length packets. In this letter we prove that if the <b>crossbar</b> <b>switch</b> can buffer one packet at each crosspoint, then the throughput increases to 100 % asymptotically as N → ∞, where N {{is the number of}} switch ports. Index Terms — Input-queued <b>switch,</b> buffered <b>crossbar</b> <b>switch,</b> throughput. I...|$|R
40|$|Buffered <b>crossbar</b> <b>switches</b> are {{a special}} type of <b>crossbar</b> <b>switches.</b> In such a switch, besides normal input queues and output queues, a small buffer is {{associated}} with each crosspoint. Due to the intro-duction of crosspoint buffers, output and input contention is elimi-nated, and the scheduling process for buffered <b>crossbar</b> <b>switches</b> is greatly simplified. Moreover, crosspoint buffers enable the switch {{to work in an}} asynchronous mode and easily schedule and trans-mit variable length packets. Compared with fixed length packet scheduling or cell scheduling, variable length packet scheduling, or packet scheduling for short, has some unique advantages: higher throughput, shorter packet latency and lower hardware cost. In this paper, we present a fast and practical scheduling scheme for buffered <b>crossbar</b> <b>switches</b> called Localized Asynchronous Packet Scheduling (LAPS). With LAPS, an input port or output port make...|$|R
40|$|In this paper, {{we propose}} a {{continuous}} hysteresis neurons (CHN) Hopfield neural network architecture for efficiently solving <b>crossbar</b> <b>switch</b> problems. A Hopfield neural network architecture with continuous hysteresis and its collective computational properties are studied. It is proved theoretically and confirmed by simulating the randomly generated Hopfield neural network with CHN. The network architecture {{is applied to}} a <b>crossbar</b> <b>switch</b> problem and results of computer simulations are presented and used to illustrate the computation power of the network architecture. The simulation {{results show that the}} Hopfield neural network architecture with CHN is much better than the binary hysteresis Hopfield neural network architecture for <b>crossbar</b> <b>switch</b> problem in terms of both the computation time and the solution quality. Key words: Network architecture, <b>crossbar</b> <b>switch</b> problem, continuous hysteresis, Hopfield neural network 1...|$|R
40|$|Abstract—Buffered <b>crossbar</b> <b>switches</b> {{are special}} <b>crossbar</b> <b>switches</b> {{with a small}} {{exclusive}} buffer at each crosspoint of the crossbar. They demonstrate unique advantages, such as vari-able length packet handling and distributed scheduling, over traditional unbuffered <b>crossbar</b> <b>switches.</b> The current main approach for buffered <b>crossbar</b> <b>switches</b> to provide perfor-mance guarantees is to emulate push-in-first-out output queued switches. However, such an approach has several drawbacks, and in particular it has difficulty in providing tight constant performance guarantees. To address the issue, we propose in this paper the guaranteed-performance asynchronous packet scheduling (GAPS) algorithm for buffered <b>crossbar</b> <b>switches.</b> GAPS intends to provide tight performance guarantees, and requires no speedup. It directly handles variable length packets without segmentation and reassembly, and makes scheduling decisions in a distributed manner. We show by theoretical analysis that GAPS achieves constant performance guarantees. We also prove that GAPS has a bounded crosspoint buffer size of 3 L, where L is the maximum packet length. Finally, we present simulation data to verify the analytical results and show the effectiveness of GAPS. Keywords-buffered crossbar switches; performance guaran-tees; speedup; I...|$|R
5000|$|... #Caption: Western Electric 100-point six-wire Type B <b>crossbar</b> <b>switch</b> ...|$|R
5000|$|<b>Crossbar</b> <b>switch</b> Describes the {{switching}} {{element of a}} Clos network.|$|R
5000|$|Universal Star Network <b>Crossbar</b> <b>Switch</b> - Number of {{switches}} 8 ...|$|R
5000|$|The next {{approach}} was to break apart the <b>crossbar</b> <b>switch</b> into three layers of smaller <b>crossbar</b> <b>switches.</b> There {{would be an}} [...] "input layer", a [...] "middle layer" [...] and an [...] "output layer." [...] The smaller switches are less massive, more reliable, and generally easier to build, and therefore less expensive.|$|R
40|$|Building large <b>crossbar</b> <b>switches</b> for low-latency, highbandwidth interprocessor {{interconnects}} in multiprocessor {{systems is}} a difficult task because of the many practical limitations of digital electronics. This paper presents a first order design for a <b>crossbar</b> <b>switch</b> which utilizes wavelength tunable vertical-cavity surface-emitting laser (VCSEL) technology and free space optics. Free space optics can be utilized to construct a <b>crossbar</b> <b>switch</b> without the wiring complexity normally associated with digital electronic crossbar. Wavelength tunable VCSELs can be utilized to reduce the required number of components per node to as few as one wavelength tunable VCSEL and one fixed frequency receiver, thereby reducing the overall cost. By utilizing space division multiplexing, one can further {{increase the size of}} the optical <b>crossbar</b> <b>switch</b> by adding additional wavelength tunable VCSELs at each node, greatly increasing the salability of the overall system. An example system configuration conta [...] ...|$|R
40|$|Rapid {{growth of}} Internet traffic causes a new {{challenge}} {{in the design of}} high-speed switches. One of main design issues for high-speed switches is a scalability problem. This paper proposes a scalable <b>crossbar</b> matrix (SCM) <b>switch</b> architecture, which consists of multiple <b>crossbar</b> <b>switch</b> units(XSU) with virtual output queues(VOQs) at the inputs and single-cell scheduling decomposition buffers(SDBs) at the outputs. We propose a distributed scheduling algorithm for the proposed scalable <b>crossbar</b> <b>switch</b> architecture, which consists of a credit based SLIP(C-SLIP) scheduling for <b>crossbar</b> <b>switch</b> units and backlog weighted round robin (BWRR) scheduling for switching fabric output ports. In this paper, we show that largescale switch fabric can be built up by small-size <b>crossbar</b> <b>switch</b> units with improved delay performance and enough arbitration time margin. The simulation results show that the proposed switch architecture and distributed scheduling algorithm can provide 100 % throughput under i. i. d uniform traffic with a single iteration arbitration in a time slot...|$|R
5000|$|Well, in the beginning, {{early in}} the {{development}} process, several people were pushing for a <b>crossbar</b> <b>switch,</b> {{and the way the}} bus is designed, you could actually pull out the EIB and put in a <b>crossbar</b> <b>switch</b> if you were willing to devote more silicon space on the chip to wiring. We had to find a balance between connectivity and area, and there just was not enough room to put a full <b>crossbar</b> <b>switch</b> in. So we came up with this ring structure which we think is very interesting. It fits within the area constraints and still has very impressive bandwidth.|$|R
40|$|Traditional <b>crossbar</b> <b>switches</b> use {{centralized}} scheduling algorithms {{with high}} time complexity. In contrast, buffered <b>crossbar</b> <b>switches</b> {{are capable of}} distributed scheduling due to crosspoint buffers, which decouple the dependency between inputs and outputs. However, crosspoint buffers are expensive on-chip memories. To reduce the hardware cost of buffered <b>crossbar</b> <b>switches</b> and make them scalable, we consider partially-buffered <b>crossbar</b> <b>switches,</b> whose crosspoint buffers can be of an arbitrarily small size and store only part of a packet instead of the entire packet. In this paper, we propose the Packet-mode Asynchronous Scheduling Algorithm (PASA) for partially buffered <b>crossbar</b> <b>switches.</b> PASA combines the features of both distributed and centralized scheduling algorithms. It works in an asynchronous mode and can directly handle variable length packets without Segmentation And Reassembly (SAR). We theoretically prove that, with a speedup of two, PASA achieves 100 % throughput for any admissible traffic. We also show that outputs in PASA have a large probability to avoid the more time-consuming centralized scheduling process, and thus make fast scheduling decisions. Finally, we present simulation data to verify the analytical results and evaluate the performance of PASA...|$|R
50|$|The special <b>crossbar</b> <b>switches</b> used in distributing {{satellite}} TV {{signals are}} called multiswitches.|$|R
5000|$|... #Caption: Part of a bay of 10x20 3-wire <b>crossbar</b> <b>switches</b> in a LLF ...|$|R
40|$|Abstract: This paper {{analyzes}} {{the performance of}} a buffered <b>crossbar</b> <b>switch</b> under bursty traffic. It derives the saturated throughput for a buffered <b>crossbar</b> <b>switch</b> with multiple queues at each input port by the proposed analytic model. The saturation throughput sharply decreases from 1 and converges to 0. 5 with the increasing of average burst length, and it approaches 1 as the number of queues per input increases. The accuracy of the theoretic analysis is also investigated by extensive simulation. Results from this paper {{can be used as a}} guidance to design optimal buffered <b>crossbar</b> <b>switches.</b> Key words: buffered crossbar switch; input queuing; scheduling; modeling; performance analysi...|$|R
40|$|After the {{original}} work of Hopfield and Tank, {{a lot of}} modified Hopfield neural network models have been proposed for combinatorial optimization problems. Recently, a positively selffeedbacked Hopfield neural network architecture was proposed by Li et al. and successfully applied to <b>crossbar</b> <b>switching</b> problem. In this paper, we analysis {{the dynamics of the}} positively self-feedbacked Hopfield neural network, then show the role of the self-feedback and point out where the good performance comes from. Based on the theoretical analysis, we get better simulation results for <b>crossbar</b> <b>switching</b> problem by selecting suitably positive self-feedback value of the network. Key words: positively self-feedbacked Hopfield neural network, <b>crossbar</b> <b>switching</b> problem, combinatorial optimization problems. 1...|$|R
40|$|Abstract—We {{consider}} {{the problem of}} scheduling multicast traffic in a buffered <b>crossbar</b> <b>switch</b> with multiple input queues at each input port. In this paper, we design and investigate a series of combinations of queuing policies and scheduling algorithms and report the simulation result. It is shown that {{a small number of}} input queues at each input port can dramatically improve the performance under burst multicast traffic in buffered <b>crossbar</b> <b>switches.</b> Under this architecture, it is feasible to design simple queuing policies and scheduling algorithms for high speed switches while keeping high performance and small size of buffer within crossbar. Index terms—scheduling; multicast; buffered <b>crossbar</b> <b>switch</b> I...|$|R
50|$|In electronics, a <b>crossbar</b> <b>switch</b> (cross-point switch, matrix switch) is a {{collection}} of switches arranged in a matrix configuration. A <b>crossbar</b> <b>switch</b> has multiple input and output lines that form a crossed pattern of interconnecting lines between which a connection may be established by closing a switch located at each intersection, the elements of the matrix. Originally, a <b>crossbar</b> <b>switch</b> consisted literally of crossing metal bars that provided the input and output paths. Later implementations achieved the same switching topology in solid state semiconductor chips. The cross-point switch is one of the principal switch architectures, together with a rotary switch, memory switch, and a crossover switch.|$|R
5000|$|Nonblocking minimal {{spanning}} switch - {{describes how}} to combine <b>crossbar</b> <b>switches</b> into larger switches.|$|R
5000|$|Processors may be {{interconnected}} using buses, <b>crossbar</b> <b>switches</b> or on-chip mesh networks. The bottleneck in the scalability of SMP using buses or <b>crossbar</b> <b>switches</b> is the bandwidth {{and power}} {{consumption of the}} interconnect among the various processors, the memory, and the disk arrays. Mesh architectures avoid these bottlenecks, and provide nearly linear scalability to much higher processor counts at the sacrifice of programmability: ...|$|R
40|$|Buffered <b>crossbar</b> <b>switches</b> are {{a special}} type of com-bined {{input-output}} queued switches with each crosspoint of the crossbar having small on-chip buffers. The introduc-tion of crosspoint buffers greatly simplifies the scheduling process of buffered <b>crossbar</b> <b>switches,</b> and furthermore en-ables buffered <b>crossbar</b> <b>switches</b> with speedup {{of two to}} eas-ily provide port based performance guarantees. However, recent research results have indicated that, in order to pro-vide flow based performance guarantees, buffered <b>crossbar</b> <b>switches</b> have to either increase the speedup of the cross-bar to three or greatly increase {{the total number of}} cross-point buffers, both adding significant hardware complexity. In this paper, we present scheduling algorithms for buffered <b>crossbar</b> <b>switches</b> to achieve flow based performance guar-antees with speedup of two and with only one or two buffers at each crosspoint. When there is no crosspoint blocking in a specific time slot, only the simple and distributed in-put scheduling and output scheduling are necessary. Other-wise, the special urgent matching is introduced to guarantee the on-time delivery of crosspoint blocked cells. With the proposed algorithms, buffered <b>crossbar</b> <b>switches</b> can pro-vide flow based performance guarantees by emulating push-in-first-out output queued switches, and we use the counting method to formally prove the perfect emulation. For the special urgent matching, we present sequential and paral-lel matching algorithms. Both algorithms converge with N iterations in the worst case, and the latter needs less itera-tions in the average case. Finally, we discuss an alternative backup-buffer implementation scheme to the bypass path, and compare our algorithms with existing algorithms in the literature...|$|R
40|$|The {{increasing}} demand for higher data {{rates on the}} Internet requires routers that deliver high performance for high-speed connections. Nowadays high speed routers use the buffered <b>crossbar</b> <b>switches,</b> which have been the interest for research and commercialization. In this paper, a study is made {{on the importance of}} buffered <b>crossbar</b> <b>switches</b> and their scheduling algorithms. A comparative analysis is made between these scheduling algorithms...|$|R
30|$|The <b>Crossbar</b> <b>switch</b> and the SRQ are {{connected}} to the cores directly and run at the processor core frequency. After an L 1 cache miss, the processor core sends a request to the main memory and the L 2 cache in parallel. The main memory request is discarded in case of an L 2 cache hit. An L 2 cache miss results in the request being sent to the main memory via the SRQ and the <b>Crossbar</b> <b>switch.</b> The SRQ maps the request to the nodes that connect the processor to the destination. The <b>Crossbar</b> <b>switch</b> routes the request/data to the destination node or the HyperTransport port in case of an off chip access.|$|R
