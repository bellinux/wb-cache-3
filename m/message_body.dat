110|154|Public
2500|$|While most {{countries}} either outlaw {{or at least}} ignore spam, Bulgaria is the first and until now only one to legalize it. According to the Bulgarian E-Commerce act (Чл.5,6) anyone can send spam to mailboxes published as owned by a company or organization, {{as long as there}} is a [...] "clear and straight indication that the message is unsolicited commercial e-mail" [...] ("да осигури ясното и недвусмислено разпознаване на търговското съобщение като непоискано") in the <b>message</b> <b>body.</b>|$|E
2500|$|First {{discovered}} in 2009, the HTTP POST attack sends a complete, legitimate HTTP POST header, {{which includes a}} 'Content-Length' field to specify {{the size of the}} <b>message</b> <b>body</b> to follow. However, the attacker then proceeds to send the actual <b>message</b> <b>body</b> at an extremely slow rate (e.g. 1 byte/110 seconds). Due to the entire message being correct and complete, the target server will attempt to obey the 'Content-Length' field in the header, and wait for the entire body of the message to be transmitted, which can take a very long time. The attacker establishes hundreds or even thousands of such connections, until all resources for incoming connections on the server (the victim) are used up, hence making any further (including legitimate) connections impossible until all data has been sent. It is notable that unlike many other (D)DoS attacks, which try to subdue the server by overloading its network or CPU, a HTTP POST attack targets the logical resources of the victim, which means the victim would still have enough network bandwidth and processing power to operate. Further combined with the fact that Apache will, by default, accept requests up to 2GB in size, this attack can be particularly powerful. HTTP POST attacks are difficult to differentiate from legitimate connections, and are therefore able to bypass some protection systems. OWASP, an open source web application security project, has released a [...] to test the security of servers against this type of attacks.|$|E
50|$|Note that whilst {{the sample}} Continuation request has a GET method and {{therefore}} no body, it could equally be a POST, PUT, etc. with a <b>message</b> <b>body</b> {{and have the}} same <b>message</b> <b>body</b> protection {{as shown in the}} example Continuation response.|$|E
5000|$|RFC 2157 Mapping between X.400 and RFC-822/MIME <b>Message</b> <b>Bodies</b> ...|$|R
5000|$|RFC 2045, with Nathaniel Borenstein, Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet <b>Message</b> <b>Bodies,</b> ...|$|R
5000|$|... 8BITMIME {{has also}} been introduced, which reduces the need to encode <b>message</b> <b>bodies</b> in a 7-bit format.|$|R
5000|$|<b>Message</b> <b>body</b> {{semantics}} [...] - [...] <b>Message</b> <b>body</b> semantics {{include the}} precise definition {{of all of}} the data elements {{in the body of the}} message. Message semantics can be aided by the use of a precise data dictionary that documents metadata.|$|E
5000|$|The <b>message</b> <b>body,</b> inside curly braces, {{containing}} name=value pairs ...|$|E
5000|$|... #Subtitle level 2: Separation {{of message}} header and <b>message</b> <b>body</b> ...|$|E
40|$|Documentation of the HTTP {{protocol}} includes precise {{descriptions of}} the syntax of the protocol, but lacks similarly precise specification of the semantics of <b>messages</b> and <b>message</b> <b>bodies.</b> Semantics are stated in English prose; while this makes the document more intuitively accessible, it makes any sort of formal claims of correctness or interoperability difficult to derive from the specification itself. We propose “layered types”, a formal description of the interpretive semantics of HTTP <b>message</b> <b>bodies</b> based upon the stacked type syntax. This model allows us to formally declare semantics for content-related HTTP headers and offers a precise way of characterizing interoperability between current and future protocol revisions and extensions. 1...|$|R
40|$|Requirements for End-to-Middle Security for the Session Initiation Protocol (SIP) This memo {{provides}} {{information for the}} Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2005). A Session Initiation Protocol (SIP) User Agent (UA) does not always trust all intermediaries in its request path to inspect its <b>message</b> <b>bodies</b> and/or headers contained in its message. The UA might want to protect the <b>message</b> <b>bodies</b> and/or headers from intermediaries, except those that provide services based on its content. This situation requires a mechanism called "end-to-middle security " to secure the information passed between the UA and intermediaries, which does no...|$|R
50|$|As {{part of a}} POST request, an {{arbitrary}} amount of data of any type {{can be sent to}} the server {{in the body of the}} request message. A header field in the POST request usually indicates the <b>message</b> <b>body's</b> Internet media type.|$|R
5000|$|The [...] "optional HTTP <b>message</b> <b>body</b> data" [...] is {{what this}} article defines.|$|E
5000|$|The secret {{keys are}} inputs to message {{authentication}} codes and <b>message</b> <b>body</b> encryption. As the keys are only {{known by the}} two legitimate peers, they are used by the message-receiving peer to validate the message-sending peer, and to decrypt the <b>message</b> <b>body.</b> Additionally, message uniqueness is enforced by an incrementing counter, {{which is one of}} various inputs to the message's MAC.|$|E
50|$|The <b>message</b> <b>body</b> may {{optionally}} be compressed {{using the}} zlib format {{as defined in}} RFC 1950.|$|E
40|$|This memo {{provides}} {{information for the}} Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2005). This document gives examples of <b>message</b> <b>bodies</b> formatted using S/MIME. Specifically, it has examples of Cryptographic Message Syntax (CMS) objects and S/MIME messages (including the MIME formatting). It includes examples of many common CMS formats. The purpose of this document is to help increase interoperability fo...|$|R
40|$|The {{purpose of}} this memo is to propose an update to Internet RFC 2045 to include a new primary content-type {{to be known as}} `model`. RFC 2045 [1] {{describes}} mechanisms for specifying and describing the format of Internet <b>Message</b> <b>Bodies</b> via content-type/subtype pairs. We believe that `model` defines a fundamental type of content with unique presentational, hardware, and processing aspects. Various subtypes of this primary type are immediately anticipated but will be covered under separate documents...|$|R
50|$|But all {{stories have}} hidden <b>message</b> that <b>body</b> that we admire, look, fear or shy {{is not the}} real one but the soul behind it is the truth.|$|R
50|$|Encrypting the {{communications}} between mail servers {{to protect the}} confidentiality of both <b>message</b> <b>body</b> and message header.|$|E
5000|$|To {{specify a}} <b>message</b> <b>body,</b> the [...] {{parameter}} is used, so the link location {{might look like}} this: ...|$|E
50|$|The {{first two}} bytes of the <b>message</b> <b>body</b> define the Ping Type which can {{apparently}} take 6 possible values.|$|E
5000|$|... {{the ability}} to delete {{attachments}} without deleting the <b>message's</b> text <b>body,</b> or to delete the HTML version of a message while keeping the plain-text version, or vice versa, saving disk space; ...|$|R
30|$|We did {{not perform}} language-specific {{preprocessing}} techniques such as word stemming, stop word removal, or case folding, since other researchers found that such techniques tend to hurt spam-filtering accuracy [22, 38, 51]. However, we use an e-mail-specific preprocessing before the classification task. In this way, we employ the Jaakko Hyvattis normalizemime. 5 This program converts the character set to UTF- 8, decoding Base 64, Quoted-Printable and URL encoding and adding warn tokens in case of encoding errors. It also appends a copy of HTML/XML <b>message</b> <b>bodies</b> with most tags removed, decodes HTML entities and limits the size of attached binary files.|$|R
50|$|Usenet and email <b>message</b> <b>bodies</b> were {{intended}} to contain only ASCII characters (RFC 822 or RFC 2822). Most competing encodings represent binary files by converting them into printable ASCII characters, because the range of printable ASCII characters is supported by most operating systems. However, since this reduces the available character set considerably, there is significant overhead (wasted bandwidth) over 8bit-byte networks. For example, in uuencode and Base64, three bytes of data are encoded into four printable ASCII characters, which equals four bytes, a 33% overhead (not including the overhead from headers). yEnc uses one character (one byte) to represent one byte of the file, with a few exceptions.|$|R
5000|$|The VMF {{application}} header {{is defined by}} MIL-STD-2045-47001. The VMF <b>message</b> <b>body</b> consists of [...] "K" [...] Series messages.|$|E
5000|$|To {{specify a}} <b>message</b> <b>body,</b> the [...] {{parameter}} is used, {{so that the}} link location might look like this:ymsgr:sendim?exampleuser&m=This+is+my+message ...|$|E
50|$|In both cases, {{only the}} <b>message</b> <b>body</b> is encrypted. Header fields, {{including}} originator, recipients, and subject, remain in plain text.|$|E
5000|$|Messages {{can be of}} any type, and {{the data}} {{contained}} within is not restricted. <b>Message</b> <b>bodies</b> were initially limited to 8KB in size but was later raised to 64KB on 2010-07-01 and then 256KB on 2013-06-18. [...] For larger messages, the user has a few options to get around this limitation. A large message can be split into multiple segments that are sent separately, or the message data can be stored using Amazon Simple Storage Service (Amazon S3) or Amazon DynamoDB with just a pointer to the data transmitted in the SQS message. Amazon has made an Extended Client Library available for this purpose https://github.com/awslabs/amazon-sqs-java-extended-client-lib.|$|R
5000|$|Of {{the three}} major URI DNSBLs, {{the oldest and most}} popular is SURBL. After SURBL was created, some of the {{volunteer}}s for SURBL started the second major URI DNSBL, URIBL. In 2008, another long-time SURBL volunteer started another URI DNSBL, ivmURI. The Spamhaus Project provides the Spamhaus Domain Block List (DBL) which they describe as domains [...] "found in spam messages". The DBL is intended as both a URIBL and RHSBL, to be checked against both domains in a message's envelope and headers and domains in URLs in <b>message</b> <b>bodies.</b> Unlike other URIBLs, the DBL only lists domain names, not IP addresses, since Spamhaus provides other lists of IP addresses.|$|R
3000|$|In this message, the LP-SIP header is {{the same}} as the {{previous}} <b>message.</b> In the <b>body,</b> the EcoinNotificationResponse contains: [...]...|$|R
5000|$|... {{and should}} {{be placed in the}} <b>message</b> <b>body</b> of an RFC 5322 {{compliant}} email message, without any linebreaks or whitespaces.|$|E
5000|$|... charset may be any {{character}} set registered with IANA. Typically {{it would be}} the same charset as the <b>message</b> <b>body.</b>|$|E
50|$|With {{decreased}} overhead, the encoded <b>message</b> <b>body</b> is smaller. Therefore, {{the message}} {{can be delivered}} faster and requires less storage space.|$|E
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2004). All Rights Reserved. This document specifies a set of methods, headers, <b>message</b> <b>bodies,</b> properties, and reports that define Access Control extensions to the WebDAV Distributed Authoring Protocol. This protocol permits a client to read and modify access control lists that instruct a server whether to allow or deny operations upon a resource (such as HyperText Transfer Protocol (HTTP) method invocations) by a given principal. A lightweight representation of principals as We...|$|R
50|$|In a job {{recruitment}} context, face-to-face {{interactions with}} company representatives, {{such as at}} career fairs, should be perceived by applicants as rich media. Career fairs allow instant {{feedback in the form}} of questions and answers and permit multiple cues including verbal <b>messages</b> and <b>body</b> gestures and can be tailored to each job seeker's interests and questions.|$|R
3000|$|In this message, the LP-SIP header has {{the same}} content as the {{previous}} <b>message.</b> In the <b>body</b> of the <b>message,</b> {{the content of the}} VendorRegistrationResponse is: [...]...|$|R
