5|10000|Public
50|$|In 1983, Intel {{released}} {{two additional}} integrated circuits for the iAPX 432 Interconnect Architecture: the 43204 Bus Interface Unit (BIU) and 43205 <b>Memory</b> <b>Control</b> <b>Unit</b> (MCU). These chips allowed for nearly glueless multiprocessor systems {{with up to}} 63 nodes.|$|E
5000|$|Apart {{from the}} CPU cores the chips contain such {{hardware}} as 2D graphics hardware, 3D (OpenGL ES 1.1) graphics hardware, media acceleration hardware (for video decode etc.), and various interfaces (keyboard, display / MDDI, USB, camera, TV, ...). They also contain an AXI controller, {{a kind of}} <b>memory</b> <b>control</b> <b>unit.</b>|$|E
50|$|Microarchitecture {{simulation}} is {{an important}} technique in computer architecture research and computer science education. It is a tool for modeling the design and behavior of a microprocessor and its components, such as the ALU, cache <b>memory,</b> <b>control</b> <b>unit,</b> and data path, among others. The simulation allows researchers to explore the design space {{as well as to}} evaluate the performance and efficiency of novel microarchitecture features. For example, several microarchitecture components, such as branch predictors, re-order buffer, and trace cache, went through numerous simulation cycles before they become common components in contemporary microprocessors of today. In addition, the simulation also enables educators to teach computer organization and architecture courses with hand-on experiences.|$|E
40|$|In {{this paper}} an {{approach}} is presented for the hierarchical verification of the <b>memory</b> <b>control</b> <b>units,</b> I/O adapters and processor interconnect units {{as found in}} multiprocessor computer systems. It is shown how such units could be verified better and faster {{by the introduction of}} random executable timing diagrams and associated CAD tool support. Furthermore, it is shown how the timing diagrams for the unit network verification are easily derived from the timing diagrams specified for the units. The multiprocessor hardware test showed the effectiveness of the proposed verification approach. 1. Introduction To keep pace with the processing performance growth of 75 % per year, not only the complexity of the processor unit (PU) with its caches will increase, but also that of the supporting units, like processor interconnect <b>units,</b> <b>memory</b> <b>control</b> <b>units</b> and I/O adaptors. To reduce the time the PU waits for data, many complex functions must be performed by such units. These chips for example h [...] ...|$|R
3000|$|... for bias. The CNN-UM, in {{addition}} to the standard CNN, contains <b>memories</b> and <b>control</b> <b>units</b> to allow performing series of template operations and branching.|$|R
50|$|The 2922-1 Terminal <b>Control</b> <b>Unit</b> (RPQ 810563) {{employed}} the same instruction set architecture as the Model 20. It incorporated 8,192 bytes of 3.6 Î¼s magnetic-core <b>memory.</b> The <b>control</b> <b>unit</b> also containd the Binary Synchronous Communications Adapter (BSCA) {{integrated into the}} Terminal <b>Control</b> <b>Unit</b> that supported a single line at speeds up to 7200 bits per second (bps).|$|R
5000|$|The ASC {{was based}} around a single {{high-speed}} shared memory, which was accessed by the CPU and eight I/O channel controllers, {{in an organization}} similar to Seymour Cray's groundbreaking CDC 6600. Memory was accessed solely {{under the control of}} the <b>memory</b> <b>control</b> <b>unit</b> (MCU). The MCU was a two-way, 256-bit per channel parallel network that could support up to eight independent processors, with a ninth channel for accessing [...] "main memory" [...] (or [...] "extended memory" [...] as it was referred to as). The MCU also acted as a cache controller, offering high-speed access to a semiconductor-based memory for the eight processor ports, and handling all communications to the 24-bit address space in main memory. The MCU was designed to operate asynchronously, allowing it to work at a variety of speeds and scale across a number of performance points. For instance, main memory could be constructed out of slower but less expensive core memory, although this was not used in practice. At the fastest, it could sustain transfer rates of 80 million 32-bit words per second per port, for a total transfer rate of 640 million words per second. This was well beyond the capabilities of even the fastest memories of the era.|$|E
40|$|Due to the {{character}} of the original source materials and the nature of batch digitization, quality control issues may be present in this document. Please report any quality issues you encounter to digital@library. tamu. edu, referencing the URI of the item. Includes bibliographical references. Due to their high performance, Reduced Instruction Set Computer (RISC) based microprocessors have been widely used in computing systems as well as embedded control and communication systems. The first and the most important step in designing a RISC microprocessor is to define the instruction set and its corresponding architecture. It will be inconvenient in terms of time and cost to verify an instruction set and its architecture through complete hardware realization. Therefore, a logic simulator for RISC microprocessor is highly desirable. This thesis studies the logic simulation of RISC microprocessors based on behavioral modeling approach. Many behavioral models for the components of RISC microprocessors, like ALU, multiplexer, <b>memory,</b> <b>control</b> <b>unit,</b> are proposed. A prototype, called LSRM (a Logic Simulator for RISC-based Microprocessor), is also designed and implemented in SUN/UNIX environment. LSRM consists of a graphical user interface and a simulator. The user interface is built on the X-window/Motif system while the simulator is implemented in C, Verilog and PLI. The system model adopted in this research is based on the DLX machine. However, substantial extension is made in order to satisfy as many applications as possible...|$|E
5000|$|MMU: MOS Technology 8722 <b>Memory</b> Management <b>Unit</b> <b>controls</b> 8502/Z80 {{processor}} selection; ROM/RAM banking; common RAM areas; {{relocation of}} zero page and stack ...|$|R
50|$|Each CPU {{consists}} of a 4-way super-scalar unit (SU), a vector unit (VU), and main <b>memory</b> access <b>control</b> <b>unit</b> on a single LSI chip. The CPU operates at a clock frequency of 3.2 GHz. Each VU has 72 vector registers, {{each of which has}} 256 vector elements, along with 8 sets of six different types of vector pipelines: addition /shifting, multiplication, division, logical operations, masking, and load/store. The same type of vector pipelines works together by a single vector instruction and pipelines of different types can operate concurrently.|$|R
40|$|In {{this paper}} we propose a {{specification}} intermediate model in order to handle a seamless global design of complex and heterogeneous digital systems. This model is based on three views: System, Process, Function and targets control-oriented and signal processing applications. The model exhibits all the information (e. g. operators, controls, multi-dimensional operands) required to estimate <b>memory,</b> <b>control</b> and computation <b>units</b> and to partition the application onto an heterogeneou...|$|R
30|$|Boli'c [6] {{proposed}} architecture for distributed resampling with proportional allocation. The {{main idea}} is to store the particles to be routed among the processor elements into dedicated <b>memories</b> in the <b>control</b> <b>unit,</b> and to have very fast interface capable of reading particles from the central unit (CU) and routing them to PEs. The overall memory requirements for this architecture equal KM, where K {{is the number of}} PEs and M is the total number of particles.|$|R
40|$|Objectives: This course covers {{basics of}} modern {{computer}} organization and architectures. The {{emphasis is on}} understanding the interaction between computer hardware and software at various levels. The students will learn the concepts of computer technology, performance evaluation, instruction set design, computer arithmetic, data path and <b>control</b> <b>unit</b> design of processors and enhancing performance with pipelining. The laboratories include the design, simulation and implementation of a RISC processor by using Quartus-II development environment and ALTERA DE 2 board. At {{the end of this}} course, the successful student will be able to: 1. Interconnect engineering concepts related to instruction set architecture, register transfer, interconnects like buses, 3 -state buffers and Muxes as well as control hardware to design various processors. Learn to employ specialized knowledge of subsystems like data-path, <b>memory</b> and <b>control</b> <b>unit</b> components to design a RISC processing element. (1 c) Assessment Methods: Midterm and Final examinations, Labs 3, 4, 5 and 6 as well a...|$|R
40|$|The device (100) has a {{communication}} interface (110) brought into a remote position from an operator by a moving device (120). The interface wirelessly transmits {{a communication}} signal {{when it is}} in the remote position. A communication unit has an emergency call sender with an antenna for transmitting the communication signal via the antenna. A base unit detects and stores user data in a <b>memory</b> of a <b>control</b> <b>unit</b> of the interface, and is mechanically coupled with the interface when the interface is in the remote position. An independent claim is also included for a method for transmitting a communication signal...|$|R
40|$|Main memory {{contains}} {{transient information}} for all resident applications. However, if memory chip contents survives power-off, e. g., via freezing DRAM chips, sensitive data such as passwords and keys can be extracted. Main memory persistence {{will soon be}} the norm as recent advancements in MRAM and FeRAM position non-volatile memory technologies for widespread deployment in laptop, desktop, and embedded system main memory. Unfortunately, the same properties that provide energy efficiency, tolerance against power failure, and âinstant-on â powerup also subject systems to offline memory scanning. In this paper, we propose a <b>Memory</b> Encryption <b>Control</b> <b>Unit</b> (MECU) that provides memory confidentiality during system suspend and across reboots. The MECU encrypts all memory transfers between the processor-local level 2 cache and main memory to ensure plaintext data is never written to the persistent medium. The MECU design is outlined and performance and security trade-offs considered. We evaluate a MECU-enhanced architecture using the SimpleScalar hardware simulation framework on several hardware benchmarks. This analysis shows the majority of memory accesses are delayed by less than 1 ns, with higher access latencies (caused by resume state reconstruction) subsiding within 0. 25 seconds of a system resume. In effect, the MECU provides zero-cost steady state memory confidentiality for non-volatile main memory. ...|$|R
40|$|Non-volatile {{memories}} provide energy efficiency, tolerance against power failure, and âinstant-onâ power-up. These {{memories are}} likely to replace traditional volatile memory in next-generation laptops and desktops. However, the move to non-volatile memory introduces new vulnerabilities; sensitive data such as passwords and keys residing in main memory persists across reboots and can be probed during hardware suspension. In this paper, we propose a <b>Memory</b> Encryption <b>Control</b> <b>Unit</b> (MECU) to address the vulnerabilities introduced by non-volatile memories. The MECU encrypts all memory transfers between the level 2 cache and main memory. The keys used to encrypt memory blocks are derived from secret information present on removable authentication tokens, e. g., smart card, or other similar secure storage devices. This provides protection against physical attacks in absence of the token. A MECU design is outlined and performance, memory, and security trade-offs considered. We evaluate a MECU-enhanced architecture using the SimpleScalar hardware simulation framework on several hardware benchmarks. The performance analysis shows that we can secure non-volatile memories with minimal overheadâthe majority of memory accesses are delayed by less than 1 ns, with limited degradation subsiding within 67 Âµs of a system resume. In effect, we provide zero-cost steady state confidentiality for main memory. ...|$|R
40|$|This {{document}} {{describes the}} microarchitecture of the MIT M-Machine. It details the machine 's organization {{in terms of}} arithmetic units, switches, buses, <b>memories,</b> and <b>control</b> <b>units.</b> The function of each logic block is described, {{as well as the}} coarse interfaces between the different blocks. The programmer's view of the M-Machine is described more clearly in M-Machine Architecture v 1. 0. 1 The research described in this paper {{was supported in part by}} the Defense Advance Research Projects Agency of the Department of Defense under contracts N 00014 - 88 K- 0738 and F 19628 - 92 C- 0045 and in part by a National Science Foundation Presidential Young Investigator Award with matching funds from General Electric Corporation and IBM Corporation. Contents 1 Introduction 2 1. 1 Overview : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 2 2 Overview of the MAP cluster 8 3 The Cluster Instruction Fetch Unit 12 3. 1 Block Diagram : : : : : : : : : : : : : : : : : : : : : : : : : [...] ...|$|R
40|$|This thesis {{proposes a}} cache memory, {{used for a}} 32 -bit {{processor}} system, which consists of four components: the Directory, Line Replacement Unit (LRU), Cache <b>Memory,</b> and <b>Control</b> <b>Unit.</b> An 8 -way set-associative mapping method is employed in the directory. The Line Replacement Unit {{is based on the}} least recently used line replacement algorithm. The cache memory unit has a capacity of 8 k bytes, 32 bytes in each line, and it is directly accessible to 1, 2, 3, or 4 bytes (one word) once by the associated processor. This cache memory is designed for a multiple processor system as well as in single processor system; a write-through algorithm and an updating algorithm are combined together to keep the information in main memory consistent with that of the cache and to make the multicaches coherent. The hit ratios are predicted to be over 95 percent. A two-phase clock of 40 ns is employed to pipeline this cache, and it can turn out a result in 20 ns during read operations without line misses. This cache is implemented into a single chip, and is designed so {{that it is possible to}} build cache systems of various sizes using these chips, without decreasing the system speed. This cache memory has been laid out as a single integrated circuit using 3 Micron NTCMOS technology, and its electrical and logical behavior has been simulated...|$|R
50|$|The idea of {{microprogramming}} {{was introduced}} by Maurice Wilkes in 1951 as an intermediate level to execute computer program instructions. Microprograms were organized as a sequence of microinstructions and stored in special <b>control</b> <b>memory.</b> The algorithm for the microprogram <b>control</b> <b>unit</b> is usually specified by flowchart description. The main advantage of the microprogram <b>control</b> <b>unit</b> is the simplicity of its structure. Outputs of the controller are organized in microinstructions {{and they can be}} easily replaced.|$|R
5000|$|... 3270 {{devices are}} clustered, {{with one or}} more {{displays}} or printers connected to a <b>control</b> <b>unit</b> (the 3275 and 3276 included an integrated <b>control</b> <b>unit).</b> Originally devices were connected to the <b>control</b> <b>unit</b> over coaxial cable; later token ring, twisted pair, or Ethernet connections were available. A local <b>control</b> <b>unit</b> attaches directly to the channel of a nearby mainframe. A remote <b>control</b> <b>unit</b> is connected to a communications line by a modem. Remote 3270 controllers are frequently multi-dropped, with multiple <b>control</b> <b>units</b> on a line.|$|R
40|$|Introduction Heart Failure is {{the most}} {{frequent}} reason for hospital admissions in Germany since 2006 and is, moreover, {{one of the most}} cost-intensive chronic diseases. The largest part of costs is attributable to hospital treatment. Therefore, an im-plantable monitor is developed to detect increasing pulmonary artery (PA) pressure as an early sign of cardiac decom-pensation, thus allowing the physician to timely adjust heart failure therapy to prevent hospitalisation. Methods A sensor capsule containing a capacitive pressure transducer is implanted in the PA and securely hold in place by a fixation. The capsule is connected via a lead to a subcutaneously implanted housing containing the battery, <b>memory,</b> <b>control</b> and telemetry <b>units.</b> Outside the body, a Biotronik CardioMessenger enhanced with a barometric pressure sensor receives pressure data from the implant and transmits them to a Service Center. Results Mechanical design, material and surface properties of the sensor capsule and cable including the fixation as well as im-plantation procedure have been investigated and optimized in 6 acute and 5 chronic animal experiments. As a result, a delivery system was designed that allows a reproducible implantation procedure in animals. Moreover, first acute PA pressure measurements with sensor prototypes were successfully performed. Conclusion First acute results demonstrate the general feasibility of physiological PA pressure measurements, the fixation has shown to be stable in chronic experiments with dummy implants. Chronic experiments with the complete measurement system will start next...|$|R
5000|$|Provisional Air Support <b>Control</b> <b>Unit</b> (PASCU)/Marine Air Support <b>Control</b> <b>Units</b> (MASCU) ...|$|R
40|$|This work {{is about}} {{development}} of a <b>control</b> <b>unit</b> {{for use in a}} production line. The <b>control</b> <b>unit</b> is implemented in an embedded device Raspberry Pi. It communicates with central administrating system, which assigns programs to particular <b>control</b> <b>units.</b> These programs describe interaction with peripherals of the <b>control</b> <b>unit</b> and with database system of traceability...|$|R
5000|$|<b>Control</b> <b>unit</b> endPoOps {{indicates}} that a previous <b>control</b> <b>unit</b> busy status has been cleared.|$|R
5000|$|In most {{mainframe}} systems a device-independent channel usually {{attaches to}} the CPU and to a controller or <b>control</b> <b>unit</b> which implements device-dependent logic for attaching specific devices. The functions performed by the <b>control</b> <b>unit</b> {{are similar to the}} functions performed by a device driver program on smaller systems. Some devices have integrated <b>control</b> <b>units,</b> which are logically discrete but are included with the device rather than requiring a separate box. Often a <b>control</b> <b>unit</b> can attach to multiple channels connected to a single or multiple systems. Some mainframe <b>control</b> <b>units</b> are: ...|$|R
5000|$|<b>Control</b> <b>units</b> were {{connected}} to the channels with [...] "bus and tag" [...] cable pairs. The bus cables carried the address and data information and the tag cables identified what data was on the bus. The general configuration of a channel was to connect the devices in a chain, like this: MainframeâControl Unit XâControl Unit YâControl <b>Unit</b> Z. Each <b>control</b> <b>unit</b> was assigned a [...] "capture range" [...] of addresses that it serviced. For example, <b>control</b> <b>unit</b> X might capture addresses 40-4F, <b>control</b> <b>unit</b> Y: C0-DF, and <b>control</b> <b>unit</b> Z: 80-9F. Capture ranges {{had to be a}} multiple of 8, 16, 32, 64, or 128 devices and be aligned on appropriate boundaries. Each <b>control</b> <b>unit</b> in turn had one or more devices attached to it. For example, you could have <b>control</b> <b>unit</b> Y with 6 disks, that would be addressed as C0-C5.|$|R
50|$|The <b>Control</b> <b>Unit</b> (CU) is digital {{circuitry}} {{contained within}} the processor that coordinates the sequence of data movements into, out of, and between a processor's many sub-units. The result of these routed data movements through various digital circuits (sub-units) within the processor produces the manipulated data expected by a software instruction (loaded earlier, likely from <b>memory).</b> It <b>controls</b> (conducts) data flow inside the processor and additionally provides several external control signals {{to the rest of}} the computer to further direct data and instructions to/from processor external destination's (i.e. memory).|$|R
5000|$|... #Caption: IBM 702 system: From left to right, CRT memory, 702 CPU, 717 printer, operator's console, 757 printer <b>control</b> <b>unit,</b> 752 tape <b>control</b> <b>unit,</b> five 727 tape drives, 732 drum storage, five 727 tape drives, card reader, card punch, and reader/punch <b>control</b> <b>units.</b>|$|R
50|$|In IBM zSeries {{computers}} with two {{direct access storage device}} (DASD) <b>control</b> <b>units</b> connected through dedicated connections, PPRC is the protocol used to mirror a DASD volume in one <b>control</b> <b>unit</b> (the primary) to a DASD volume {{in the other}} <b>control</b> <b>unit</b> (the secondary).|$|R
40|$|WO 200275824 A UPAB: 20030111 NOVELTY - To {{produce an}} adaptronic micro system, {{one or more}} piezo {{electric}} fiber transducers (2) are embedded in a polymer matrix (1), {{with one or more}} <b>control</b> <b>units</b> (3) to <b>control</b> and/or carry signals. The <b>control</b> <b>units</b> are fitted into the matrix by an initial loose mounting on a surface of a transfer carrier (4). The transfer carrier is applied to the matrix, with the surface fitted with <b>control</b> <b>units</b> towards the transducers, and the transfer carrier is peeled off. DETAILED DESCRIPTION - To produce an adaptronic micro system, the transfer carrier is a film, sheet or plate, with an adhesive bond to hold the <b>control</b> <b>units</b> at a surface, with a weaker bonding than the bond between the <b>control</b> <b>units</b> and the matrix. The bonds are modified to hold the <b>control</b> <b>units</b> more strongly at the matrix. When the <b>control</b> <b>units</b> are in place at the matrix, the matrix and/or the <b>control</b> <b>units</b> are given an intermediate hardening. The <b>control</b> <b>units</b> are applied to the transfer carrier by a printing process, ink jet printing or by dispensing. The <b>control</b> <b>units</b> are electrodes, in an inter-digital array, or of an electrically conductive adhesive applied to the transfer carrier and treated with radiation or heat to give a total or partial hardening action. The transfer carrier, with the control electrodes, is pressed mechanically against the matrix, which is then wholly or partially hardened by radiation or heat. The <b>control</b> <b>units</b> can be of conductive film or foil materials, conductive lines or network or grid, or of an intrinsic or extrinsic electrically conductive material. The <b>control</b> <b>units</b> can also be light waveguides. The transducers are piezo electric, magnetostrictive, shape memory alloys or nano tubes. The <b>control</b> <b>units</b> are applied with a direct contact on the transducers. The control connectors, or connectors which can be fitted, are applied by one or more transfer carriers like the <b>control</b> <b>unit</b> application. The transfer carrier is a polymer film, a sheet of felt paper or coated paper. The <b>control</b> <b>units</b> are wholly embedded in the matrix. A number of micro systems (5) are assembled into a stack, and then fully hardened by mechanical pressure and heat. USE - The process is for the production of adaptronic micro systems. ADVANTAGE - The <b>control</b> <b>units</b> are wholly embedded in the matrix, for the production of prepreg modules...|$|R
5000|$|Engine <b>control</b> <b>unit</b> (ECU) â {{not to be}} {{confused}} with electronic <b>control</b> <b>unit,</b> the generic term for all these devices ...|$|R
40|$|Which of the {{following}} properly describes which IRMs are assigned to the RMCS rod block logic? A. IRMs A, B, E, and F are assigned to Activity <b>Control</b> <b>Unit</b> 1 B. IRMs A, B, E, and F are assigned to Activity <b>Control</b> <b>Unit</b> 2 C. IRMs A, C, E, and G are assigned to Activity <b>Control</b> <b>Unit</b> 1 D. IRMs A, C, E, and G are assigned to Activity <b>Control</b> <b>Unit</b> 2 Correct Answer A...|$|R
5000|$|<b>Memory</b> <b>Control</b> Program MCP-2000 Version 0.00 Beta - Free http://www.kenwood.com/i/products/info/amateur/mcp_download.htm ...|$|R
5000|$|Electronic <b>control</b> <b>unit</b> (ECU), {{a generic}} term for any {{embedded}} systemânot {{to be confused}} with engine <b>control</b> <b>unit</b> also abbreviated, ECU ...|$|R
40|$|The device has a <b>control</b> <b>unit</b> (11) {{connected}} with an actuator, for supplying a control signal and controlling the output range of force and/or {{path of the}} actuator. The piezoresistive transducers (9) {{connected with}} <b>control</b> <b>unit,</b> detect the force received or delivered by the actuator and transmit output signal to the <b>control</b> <b>unit.</b> The <b>control</b> <b>unit</b> <b>controls</b> the actuator based on the output signal. The piezoresistive transducer layer is formed with undoped hydrocarbon or pure carbon. An independent claim is included for method for controlling actuator device...|$|R
50|$|<b>Control</b> <b>unit</b> is {{a special}} case of {{function}} <b>units</b> which <b>controls</b> execution of programs. <b>Control</b> <b>unit</b> {{has access to the}} instruction memory in order to fetch the instructions to be executed. In order to allow the executed programs to transfer the execution (jump) to an arbitrary position in the executed program, <b>control</b> <b>unit</b> provides <b>control</b> flow operations. A <b>control</b> <b>unit</b> usually has an instruction pipeline, which consists of stages for fetching, decoding and executing program instructions.|$|R
