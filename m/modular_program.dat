128|717|Public
5000|$|Business programs: Full-Time Master's of Business Administration (MBA); Part-Time Executive MBA (22-month weekend program); IMM Global Executive MBA (20-month <b>modular</b> <b>program)</b> ...|$|E
50|$|The ESMT Berlin Executive MBA {{started in}} autumn 2007. The part-time, <b>modular</b> <b>program</b> runs for 18 months, and {{graduates}} are awarded {{the degree of}} Master of Business Administration. The program is held in English. It focuses on international management and technology & innovation.|$|E
50|$|The {{print manager}} program TurboPrint, by German firm IrseeSoft, is {{the de facto}} {{standard}} for advanced printing on the Amiga. It is a <b>modular</b> <b>program</b> with many drivers which support many modern printers. PrintStudio Professional I and II are another well known printer driver system for the Amiga.|$|E
5000|$|<b>Modular</b> <b>programming,</b> in {{the form}} of {{subsystems}} (particularly for I/O) and software libraries, dates to early software systems, where it was used for code reuse. <b>Modular</b> <b>programming</b> per se, with a goal of modularity, developed in the late 1960s and 1970s, as a larger-scale analog of the concept of structured programming (1960s). The term [...] "modular programming" [...] dates at least to the National Symposium on <b>Modular</b> <b>Programming,</b> organized at the Information and Systems Institute in July 1968 by Larry Constantine; other key concepts were information hiding (1972) and separation of concerns (SoC, 1974).|$|R
5000|$|David Parnas (born 1941) {{developed}} {{the concept of}} information hiding in <b>modular</b> <b>programming.</b>|$|R
5000|$|F {{places a}} heavy {{emphasis}} on <b>modular</b> <b>programming.</b> Modules in F are called [...] "programs": ...|$|R
50|$|From an {{engineering}} standpoint, C-Net DS2 was remarkable {{in its use}} of Machine language modules, early multitasking technology, relocatable code, and <b>modular</b> <b>program</b> overlays. Although the user experience was entirely text-based and non-graphical, fast performance could be attained {{through the use of}} memory expansion modules, IEEE-488 interface hard drives, and modem speeds including the mid-1980s state of the art 19,200 bps.|$|E
50|$|The Postgraduate Diploma in Education {{program is}} a {{responsive}} and flexible one year <b>modular</b> <b>program</b> that is aligned with Level 8 in the UAE Qualification Framework - QF Emirates. It not only provides a route into teaching for those whose first degree is not in education but also offers an option for in-service practitioners without teaching qualifications to refresh their teaching skills. The Postgraduate Diploma in Education consists of mandatory courses which total 28 credits.|$|E
50|$|Frenetic is a domain-specific {{language}} for programming software-defined networks (SDNs). This domain-specific programming language allows network operators, rather than manually configuring each connected network device, to program the network as a whole. Frenetic {{is designed to}} solve major OpenFlow/NOX programming problems. In particular, Frenetic introduces a set of purely functional abstractions that enable <b>modular</b> <b>program</b> development, defines high-level, programmer-centric packet-processing operators, and eliminates many of the difficulties of the two-tier programming model by introducing a see-every-packet programming paradigm. Hence Frenetic is a functional reactive programming language operating at a packet level of abstraction.|$|E
5000|$|Linda Sue Rising: Information hiding metrics for <b>modular</b> <b>programming</b> languages, Doctoral Dissertation, Arizona State University, 1992 ...|$|R
50|$|In <b>modular</b> <b>programming,</b> {{modularity}} {{refers to}} the compartmentalization and inter-relation of the parts of a software package.|$|R
40|$|Presently {{collaboration}} is difficult on complex parametric models, {{in part due}} to the illegibility of unstructured parametric schemata. This lack of legibility makes it hard for an outside author to understand a parametric model, reducing their ability to edit and share the model. This paper investigates whether the legibility of a parametric model is improved by restructuring the schema with <b>modular</b> <b>programming</b> principles. During a series of thinking-aloud interviews, where designers were asked to describe the function of unfamiliar schemata, the schema structured with <b>modular</b> <b>programming</b> principles were consistently better understood. <b>Modular</b> <b>programming</b> is found to be a beneficial, albeit small, change to parametric modelling that derives clear benefits in terms of legibility, particularly when the model is complex and used in a collaborative environment...|$|R
50|$|In {{computer}} science, {{separation of}} concerns (SoC) is a design principle for separating {{a computer program}} into distinct sections, such that each section addresses a separate concern. A concern {{is a set of}} information that affects the code of a computer program. A concern can be as general as the details of the hardware the code is being optimized for, or as specific as the name of a class to instantiate. A program that embodies SoC well is called a <b>modular</b> <b>program.</b> Modularity, and hence separation of concerns, is achieved by encapsulating information inside a section of code that has a well-defined interface. Encapsulation is a means of information hiding. Layered designs in information systems are another embodiment of separation of concerns (e.g., presentation layer, business logic layer, data access layer, persistence layer).|$|E
5000|$|Usually {{the code}} can be {{separated}} into logical sections, each addressing separate concerns, {{and so it}} hides {{the need for a}} given section to know particular information addressed by a different section. This leads to a <b>modular</b> <b>program.</b> Edsger W. Dijkstra coined the term [...] "separation of concerns" [...] to describe the mentality behind this modularization, which allows the programmer to reduce the complexity of the system being designed. Two different concerns that intermingle in the same section of code are called [...] "highly coupled". Sometimes the chosen module divisions do not allow for one concern to be completely separated from another, resulting in cross-cutting concerns. The various programming paradigms address the issue of cross-cutting concerns to different degrees. Data logging is a common cross-cutting concern, being used in many other parts of the program other than the particular module(s) that actually log the data. Since changes to the logging code can affect other sections, it could introduce bugs in the operation of the program.|$|E
50|$|HPOne {{was founded}} in 2006 as HealthPlanOne in Southport, Connecticut by Bill Stapleton and entered the {{brokerage}} business in 2007. In 2008, the company raised $6.5 million of venture capital to expand its brokerage and enter the Medicare market. The company moved into the internet sales arena as it began marketing exclusive Medicare leads and launched its nationwide Medicare Exchange. In 2010, they added exclusive Individual/Family Plan and Group leads to their lines of business and by 2011, HealthPlanOne became the largest provider of exclusive Medicare leads in the country. In 2012, the company launched its integrated, cloud-based sales technology platform through its Licensed Broker Solutions Center. In that same year, HealthPlanOne expanded its call center services to a facility in Tampa, Florida. It also launched its Mobile Application in 2012. In 2013, the company entered the Member Acquisition business acting as a full service contact and sales center for national and regional health plans. In 2013, the company also became an authorized Web Broker Entity through an agreement with The Centers for Medicare and Medicaid Services (CMS). They launched their Employer Solutions offering targeted at Employer Groups and Brokers and expanded their call center in St. Petersburg, Florida in 2013 as well. In July 2014, the company opened a third call center in Phoenix, Arizona and in December 2014 closed an investment round of growth capital from Peloton Equity, naming Carlos Ferrer and Theodore Lundberg to the Board of Directors. In May 2015, Leslie V. Norwalk, Esq., J.D., former head of The Centers for Medicare and Medicaid Services (CMS) and Richard Fernandes, Director {{and former president of}} Affinion Group, also joined its Board of Directors. In 2015, HealthPlanOne began doing business as HPOne, establishing a new corporate name as the company expanded its products and services. Its Connecticut headquarters moved from Shelton, Connecticut to Trumbull, Connecticut. Also in 2015, HPOne launched its Stars Solutions program for Medicare Managed Care Plans. This <b>modular</b> <b>program</b> enables Medicare insurers to tailor Stars initiatives to address unique member and physician opportunities. In that same year, 2015, HPOne launched a next-generation multi-carrier Exchange Solutions for retirees. The ClearChoice Exchange offers a national preferred provider organization group plan from United Healthcare alongside individual Medicare Advantage plans.|$|E
5000|$|... torchnet - Torch {{framework}} {{providing a}} set of abstractions aiming at encouraging code re-use as well as encouraging <b>modular</b> <b>programming</b> ...|$|R
40|$|Several {{applications}} {{in the areas of}} Software Engineering and Artificial Intelligence require support for <b>modular</b> <b>programming</b> and incremental knowledge organization. <b>Modular</b> logic <b>programming</b> has been studied along two orthogonal lines of research (see [Bugliesi et al. 1994] for a survey). In the first approach [Oâ€™Keefe 1985...|$|R
50|$|Each {{individual}} university reserves {{the right}} to decide whether its <b>programs</b> are <b>modular</b> in nature, or compatible with other <b>modular</b> <b>programs</b> or program components.|$|R
40|$|<b>Modular</b> <b>program</b> {{with a small}} {{main program}} and several {{specialized}} subroutines provides a general purpose computer program to simulate the design, test and analysis phases of sensitivity experiments. This program allows {{a wide range of}} design-response function combinations and the addition, deletion, or modification of subroutines...|$|E
40|$|The {{interface}} {{and support}} performance, design and confirmation requirements are defined for the modular {{space station and}} space shuttle programs. The requirements are treated as separate obligations against each <b>modular</b> <b>program</b> and are presented for the following: shuttle orbiter, shuttle booster, launch operations, mission operations, and the research applications module...|$|E
40|$|We use on-line partial-evaluation {{technology}} to generate partial derivations from natural (big-step) semantics definitions. First, we reformat the big-step rules into a small-step form, and we extend big-step semantics to be higher-order, that is, we allow data structures like closures to contain partial derivations. Next, we apply a supercompilation algorithm to the transformed semantics, thereby producing partial derivations for programs and exposing the programs' control structures. The resulting system can perform static analysis on incomplete or "modular" programs {{and can do}} double duty as a link-time static analyzer; these are significant steps towards <b>modular</b> <b>program</b> analysis. Keywords: on-line partial evaluation, natural semantics, supercompilation, static analysis, <b>modular</b> <b>program</b> analysis. 1 Introduction Perhaps the most general form of declarative language is a deductive operational semantics framework, since the semantics of other languages can be encoded within deduct [...] ...|$|E
40|$|Separating {{interface}} from implementation {{has many}} practical benefits. Here's {{a simple way}} to do just that, in ANSI-standard C code. How do you organize medium-sized or larger C programs? Few C textbooks give any insight; they concentrate on exposition of C's features using small examples. The examples usually fit in a single source code file. Without some guiding principle of organization, larger C programs can become difficult to understand and impossible to maintain. <b>Modular</b> <b>programming</b> is one way of managing the complexity. <b>Modular</b> <b>programming</b> groups related sets of functions together into a module. The module is divided into an interface and an implementation. The module exports the interface; clients modules import the interface so that they can access the functions in the module. The implementation of the module is private and hidden from the view of clients. The division of programs into modules is a powerful organizing principle for designing non-trivial programs. Modules provide abstraction, encapsulation, and information-hiding, making the large-scale structure of a program easier to understand. Careful design of modules also promotes software reuse, even in embedded systems programming. Unfortunately, C does not explicitly support <b>modular</b> <b>programming.</b> The archetypal <b>modular</b> <b>programming</b> language is Nicklaus Wirth's Modula- 2 (and- 3). A modular language, such as Modula, has syntax fo...|$|R
50|$|MLton aims {{to produce}} fast executables, and to {{encourage}} rapid prototyping and <b>modular</b> <b>programming</b> by eliminating performance penalties often {{associated with the use}} of high-level language features.|$|R
50|$|The module {{software}} design pattern provides the features and syntactic structure {{defined by the}} <b>modular</b> <b>programming</b> paradigm to programming languages that have incomplete support for the concept.|$|R
40|$|Modular {{education}} is the innovate technologies of education when developing qualification of pedagogical specialists of Russia The matter of training is projected by virtue of analysis of teacher's experience. One of the outstanding features of <b>modular</b> <b>program</b> is its flexibility. The self-contained Modules can be learned independently, in various succession and in various rate. It secures training directed to personalit...|$|E
40|$|The Advanced Photon Source (APS) {{has taken}} a unique {{approach}} to creating high-level software applications for accelerator operation and analysis. The approach is based on self-describing data, <b>modular</b> <b>program</b> toolkits, and scripts. Self-describing data provide a communication standard that aids the creation of <b>modular</b> <b>program</b> toolkits by allowing compliant programs {{to be used in}} essentially arbitrary combinations. These modular programs can be used as part of an arbitrary number of high-level applications. At APS, a group of about 70 data analysis, manipulation, and display tools is used in concert with about 20 control-system-specific tools to implement applications for commissioning and operations. High-level applications are created using scripts, which are relatively simple interpreted programs. The Tcl/Tk script language is used, allowing creating of graphical user interfaces (GUIs) and a library of algorithms that are separate from the interface. This last factor allows greater automation of control by making it easy to take the human out of the loop. Applications of this methodology to operational tasks such as orbit correction, configuration management, and data review will be discussed. ...|$|E
40|$|Grace is a {{gradually}} typed, {{object-oriented language}} {{for use in}} education. Grace needs a module system for several reasons: to teach students about <b>modular</b> <b>program</b> design, to organise large programs, especially its self-hosted implementation, and {{to provide access to}} resources defined in other languages. Grace uses its basic organising construct, objects, to provide modules, and is then able to use its gradual structural typing to obtain a number of interesting features without any additional mechanisms. 1...|$|E
50|$|SiMPLE (a {{recursive}} acronym for SiMPLE <b>Modular</b> <b>Programming</b> Language & Environment) is a programming development {{system that was}} created to provide easy programming capabilities for everybody, especially non-professionals.|$|R
50|$|Various {{software}} package metrics {{are used in}} <b>modular</b> <b>programming.</b> They have been mentioned by Robert Cecil Martin in his 2002 book Agile software development: principles, patterns, and practices.|$|R
50|$|Supporting <b>modular</b> <b>programming,</b> Falcon {{ships with}} Feathers, the {{standard}} module suite, which integrates the built-in core module, containing the basic I/O and language-integrated base functions, classes and objects.|$|R
40|$|The Engineering Analysis Subsystem Environment (EASE) {{is under}} {{development}} at the JPL {{with a view to}} prospective small and large space missions. EASE is a modular multimission/multisystem architecture for spacecraft analysis that encompases monitoring and sequence support; its collection of software analysis modules is specific to a given mission, thereby easily accommodating mission scale. An EASE subsystem analysis module can be developed in <b>modular</b> <b>program</b> sets or packages, and a level of automation can then be introduced within such sets to achieve intramodule automation...|$|E
40|$|Many {{applications}} in visualization and computer graphics use meshes composed of triangles or tetrahedra, {{and need to}} store the connectivity of these meshes. In some applications meshes must be changed at run-time. In this case, {{it is necessary to}} update mesh connectivity too. This paper presents a data structure with two operations that can express any mesh change. The prime advantage of this approach is that all low-level code to maintain mesh connectivity is contained in these two routines, which promotes a <b>modular</b> <b>program</b> design. The dat...|$|E
40|$|University afWollongong There is {{a growing}} {{awareness}} within higher education institutions {{of the need to}} provide teaching development programs for academic staff. The challenge is to provide effective programs for staff from across all disciplines, who have varying schedules of work and are under pressure to spend much of their time engaged in research in their own field of study. At the University of Wollongong the already highly effective Introduction to Tertiary Teaching (ITT) subject for academic staff has been redesigned as a flexible, <b>modular</b> <b>program</b> within a Resource Based Learning (RBI...|$|E
40|$|Interactive, <b>modular,</b> and {{object-oriented}} <b>programming</b> {{are three}} important programming paradigms. Interactive programming encourages experimental programming and fast prototyping and is most valuable for solving {{problems that are}} not well understood. <b>Modular</b> <b>programming</b> is indispensable for large-scale program development and is also useful for smaller programs. Object-oriented programming features classes, objects, and inheritance and is suitable for many real world applications. This dissertation describes an approach of merging interactive, <b>modular,</b> and object-oriented <b>programming</b> by presenting the definition, design, {{and implementation of the}} imp language, the IMP system, and the IMOOP system. The primary benefit of merging these three paradigms is that the programmer can use either paradigm where appropriate. In order to merge interactive and <b>modular</b> <b>programming,</b> the programmer must be allowed to modify variable bindings and module interfaces during program development. Furthermor [...] ...|$|R
40|$|The Nord Modular music synthesiser system {{comprises}} {{a stand-alone}} array of digital signal processors programmed by a dataflow visual langauage {{and supported by}} a visual programming environment that runs on commodity hardware. We have investigated applying program visualisation techniques to over 400 Nord <b>Modular</b> <b>programs.</b> Our visualisations make explicit module types and signal flows that are only implicit in the metaphorical graphical syntax adopted by the Nord <b>Modular</b> visual <b>programming</b> language. We have also analysed the programming style used in Nord <b>Modular</b> <b>programs,</b> in particular, the direction of program layouts. While we found that programs tended to arrange signal flow top down and left to right, we found much more variation than we expected, both within individual programs and across the Nord factory program corpus...|$|R
50|$|Although the {{procedural}} and <b>modular</b> <b>programming</b> paradigms {{are often used}} together, there are cases where a procedural programming language may not fully support modules, hence requiring a design pattern implementation.|$|R
