2|1|Public
40|$|This {{publication}} {{describes a}} <b>menu</b> <b>generator</b> facility used for creating web menu in web framework context without any complicated procedures. It uses {{the concept of}} doubly linked list data structure which aims to organize menu for better understanding and implementing. <b>Menu</b> <b>generator</b> proved {{that has been made}} successfully to support web programmers who use CodeIgniter framework in order to create menus easily and efficently...|$|E
40|$|Web {{application}} development {{can be very}} complicated without an appropriate framework, architecture and application model. A good implementation model can help application developers communicate with clients, consolidate the design before starting the development, speed up the development, and make the code highly reusable. This paper proposes a mockup-driven fast prototyping methodology (MODFM) {{for the development of}} web applications. It is built on the most recent web technologies: EJB, JSP, Servlet, XML, Struts, and web application server. A two-tier Model-View-Controller (MVC) architecture is proposed as the underline backbone and a supporting environment is tailored specifically in order to enable development. Two basic supporting tools are provided: the dynamic <b>menu</b> <b>generator</b> and the generic code generator, which produce code for front-end, back-end and database schemas. MODFM helps to generate fully functional mockup systems for the client to review at an early analysis stage, and continues to provide guidance throughout follow-on development phases. Real-life experiences on the use of this methodology in industry are presented as examples...|$|E
40|$|This paper {{presents}} an integrated system {{made up of}} a portable multi-layered interactive environment for software development and use, and a class based infrastructure for image processing. The interactive environment is responsive to different type of users, and consists of a library handler, a C interpreter, a command expander, a <b>menu</b> and dialog <b>generator,</b> and a visual programming interface. All interface layers are generated from a command description file. The design considerations of each of the interface layers is discussed. The image infrastructure enforces strict image class separation, and takes care of actions common to all image classes. Through the use of an abstraction mechanism based on function overloading, the infrastructure allows image sub-classing and the definition of new image classes, which automatically inherit the consistent behavior of the total environment. An overview of the extensive image processing libraries functionality is given, with special attention [...] ...|$|R

