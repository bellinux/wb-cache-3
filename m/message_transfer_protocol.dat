9|3088|Public
50|$|ZeroMQ {{implements}} ZMTP, the ZeroMQ <b>Message</b> <b>Transfer</b> <b>Protocol.</b> ZMTP defines {{rules for}} backward interoperability, extensible security mechanisms, command and message framing, connection metadata, and other transport-level functionality. A {{growing number of}} projects implement ZMTP directly {{as an alternative to}} using the full ZeroMQ implementations.|$|E
50|$|GSM 03.40 or 3GPP TS 23.040 is {{a mobile}} {{telephony}} standard describing {{the format of}} the Transfer Protocol Data Units (TPDU) of the Short <b>Message</b> <b>Transfer</b> <b>Protocol</b> (SM-TP) used in the GSM networks to carry Short Messages. This format is used throughout the whole transfer of the message in the GSM mobile network. In contrast, application servers use different protocols, like Short Message Peer-to-Peer or Universal Computer Protocol, to exchange messages between them and the Short message service centre.|$|E
40|$|This {{document}} specifies the interoperability {{and performance}} requirements for implementations of the Flight <b>Message</b> <b>Transfer</b> <b>Protocol</b> (FMTP). The FMTP is used, in a peer-to-peer communications context, {{for the information}} exchanges between flight data processing systems. In particular, {{for the purpose of}} notification, co-ordination and transfer of flights between air traffic control units and for the purposes of civil-military co-ordination. FMTP Specificatio...|$|E
40|$|The {{purpose of}} this project was to build a {{software}} implementation of Freenet to simulate the behaviour of a scalable application-layer peer-to-peer network. The project consisted of implementing the Freenet functionality into an existing network simulator. All milestones and objectives were completed successfully. Freenet {{is a type of}} decentralized peer-to-peer network which allows the distribution of uncensored information to its users. Anonymity of users is preserved by using Freenet’s data and <b>message</b> <b>transferring</b> <b>protocols</b> which does not allow data to be traced back to its originators. Freenet also uses routing algorithms to dynamically relocate data over the network from areas where the data is in low demand to areas where it is in high demand. These features can revolutionise the way the Internet is used and could lead to more efficient and faster networks. The project was implemented in C++ for the Linux operating system. The following features of Freenet were added to the existing simulator: message protocols, message and data routing algorithms, keys and searching algorithms, and management of data. Analysis of our test simulations conducted with 10, 100, 500 and 1000 node topologies prove that the implementation accurately follows the Freenet protocol. Time analysis of the results show that large and complex topologies can be simulated within a seconds. These test results support our claim that this implementation of Freenet on the skeleton is correct, fast and scalable...|$|R
50|$|Within Internet message {{handling}} services (MHS), a <b>message</b> <b>transfer</b> agent or {{mail transfer agent}} (MTA) or mail relay is software that <b>transfers</b> electronic mail <b>messages</b> from one computer to another using a client-server application architecture. An MTA implements both the client (sending) and server (receiving) portions of the Simple Mail <b>Transfer</b> <b>Protocol.</b>|$|R
40|$|Computational {{cluster is}} used for heavy {{computation}} that emphasizes various requirements for network functionality. Most of the computing software uses TCP/IP for their computation. But it has lot of disadvantages. This paper proposes a specialized networking protocol based on cluster computation called Command <b>Transfer</b> <b>Protocol</b> (CTP) which {{is used for}} <b>message</b> <b>transfer</b> and heavy computation between computers in cluster. Here group of computers are called clusters and messages sent between the clusters are called commands. CTP uses various functionalities which are absent in UDP and it is more efficient than TCP. This paper implements CTP in <b>message</b> <b>transfer</b> between computers and compares it with TCP/IP and UDP...|$|R
40|$|For the {{messages}} {{with a variety}} of characteristics, Unicast, Multicast and Broadcast do not on the whole ensure the optimum efficiency. For the transfer of a message to many receivers, we propose to adopt our Messenger Agent based on the Mobile Agent paradigm instead of sticking to the three main protocols. Its autonomy and asynchronous message delivery handle this case with more efficient and reliable manner compared with Unicast, which is a senderbased <b>message</b> <b>transfer</b> <b>protocol</b> like ours. Of course, we must pay for creation, migration, and management of it. However, we have justified the employment of our Messenger Agent by proving the profit from it to overcome the cost. We have considered the buffer requirements at gateways to defend the given drop ratio, the single node delay and the total delay for the entire message delivery path per packet. ...|$|E
40|$|Virtual reality (VR) is an {{emerging}} technology that has many potential applications in manufacturing. Networked or shared virtual environments (VE) are of {{growing interest in}} modern manufacturing, which is making increasing use of virtual reality technology. An important feature of networked VEs {{is the way in}} which they control and share 3 D information, and the support of this by real-time data transfer. The bottleneck of transferring 3 D data in real-time between networked VEs is the performance of networking protocols. This paper proposes a novel approach to implementing the Manufacturing Message Specifications (MMS), an ISO/IEC 9506 communication standard and presents a Manufacturing <b>Message</b> <b>Transfer</b> <b>Protocol</b> (MMTP), suitable for a broad range of Internet-based VE communication applications - in particular, virtual manufacturing collaborative design and control. An Internet communication system is described that can support networked virtual manufacturing environments within the framework of the Manufacturing Message Specifications (MMS) Standard...|$|E
40|$|This diploma thesis {{demonstrates}} {{that it is}} possible to build a distributed shared memory system for clusters of heterogeneous workstations. Distributed or virtual shared memory provides a high level of programming abstraction when it comes to build distributed or parallel applications. It is a promising technology and we think that this paradigm could be extended to general distributed systems. The challenge in this case is to overcome the problems of network latencies, protocol overhead and diversity of platforms. We addressed the first problem by using a UDP based asynchronous reliable <b>message</b> <b>transfer</b> <b>protocol</b> which faces the end-to-end argument of middleware layer applications. The communication overhead could be reduced by using a relaxed consistency model, the lazy release consistency invalidate protocol, which is a software based derivation of the release consistency model. The latter one has been used in many multiprocessor architectures. The solution supports a multiple write [...] ...|$|E
40|$|The idea of agent-oriented {{middleware}} is {{to support}} high-level communication between computational processes like agents. Such communication requires an interaction protocol, an agent communication language and a <b>transfer</b> <b>protocol.</b> This paper focuses on the third requirement and presents the framework, design and implementation of an Agent Communication <b>Transfer</b> <b>Protocol</b> (ACTP). The ACTP is an application layer protocol designed to facilitate communication between heterogeneous agents. In particular, we show how the ACTP supports various ways of communication, logical abstraction of the communication process, platform-independence, a naming convention, reliability in <b>message</b> <b>transfers</b> and a degree of flexibility. In conclusion, we suggest that the ACTP contains the right reliability, flexibility and generality to support high-level interoperability in agent communications and therefore can be useful for standardization in FIPA compliant platforms...|$|R
40|$|VANETs {{has emerged}} as the new network {{environment}} for intelligent transportations systems. In this paper, we focus on two types of VANET applications and evaluate the effectiveness of our data dissemination protocol for these two types of applications. In particular, we investigate traffic monitoring (TM) and roadside <b>message</b> <b>transfer</b> (RMT) applications. The traffic monitoring application (TMA) allows drivers to query traffic conditions at some distance ahead of themselves so that they can make decisions on route changes. The roadside <b>message</b> <b>transfer</b> application (RMTA) allows data messages to be delivered between roadside entities e. g. emergency messages via the moving vehicles. We design a robust data <b>transfer</b> <b>protocol</b> (RDTP) for these two applications. Via simulation studies, we evaluate how vehicular density, vehicular speed affect the performance of the data <b>transfer</b> <b>protocol</b> we design. We also compare the performance of our protocol with two existing protocols. For TMA, RDTP achieves comparably accurate speed estimate and higher query success rate with lower control overhead when compared to VITP, an existing protocol for the same application. For RMTA, RDTP achieves higher data throughput and lower delivery latency when compared to an existing approach...|$|R
40|$|This memo {{defines a}} {{mechanism}} for tunneling of SMTP (Simple Mail <b>Transfer</b> <b>Protocol)</b> <b>Message</b> <b>Transfer</b> Priority values through MTAs (<b>Message</b> <b>Transfer</b> Agents) that don’t support the MT-PRIORITY SMTP extension. Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes. This document {{is a product of}} the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741. Information about the current status of this document, any errata, and how to provide feedback on it may be obtained a...|$|R
40|$|Abstract. We are {{developing}} a secure and certified e-mail system AnZen-Mail that provides an experimental testbed for our cutting-edge security enhancement technologies. In addition to a provably secure <b>message</b> <b>transfer</b> <b>protocol,</b> we have designed and implemented a server (MTU) and a client (MUA) in order that they could survive recent malicious attacks such as server-cracking and e-mail viruses. The AnZenMail server is implemented in Java, a memory-safe language, {{and so it is}} free from stack smashing. Some of its safety properties have been formally verified in Coq mostly at the source code level by manually translating Java methods into Coq functions. The AnZenMail client is designed to provide a support for secure execution of mobile code arriving as e-mail attachments. It has plug-in interfaces for code inspection and execution modules such as static analysis tools, runtime/inline reference monitors, and an anti-virus engine, which are currently being developed by members of our research project. ...|$|E
40|$|Many {{businesses}} rely on email of {{some form}} for their {{day to day}} operation. This {{is especially true for}} product support organizations, who are largely unable to perform their role in the company if their in boxes are flooded with malicious email, or if important email is delayed because of the processing of attack traffic. Simple <b>Message</b> <b>Transfer</b> <b>Protocol</b> (SMTP) is the Internet protocol for the transmission of these emails. Denial of Service (DoS) attacks are deliberate attempts by an attacker to disrupt the normal operation of a service with the goal of stopping legitimate requests for the service from being processed. This disruption normally takes the form of large delays in responding to requests, dropped requests, and other service interruptions. In this paper we explore the current state of research into Distributed Denial of Service (DDoS) attack detection, protection and mitigation for SMTP servers connected to the Internet. We find that whilst there has been significant research into DDoS protection and detection generally, much of it is not relevant to SMTP servers. During our survey we found only two papers directly addressing defending SMTP servers against such attacks...|$|E
40|$|In recent years, XML {{has been}} {{accepted}} as the format of messages for several applications. Prominent examples include SOAP for Web services, XMPP for instant messaging, and RSS and Atom for content syndication. This XML usage is understandable, as the format itself is a well-accepted standard for structured data, and it has excellent support for many popular programming languages, so inventing an application-specific format no longer seems worth the effort. Simultaneously with this XML's rise to prominence {{there has been an}} upsurge in the number and capabilities of various mobile devices. These devices are connected through various wireless technologies to larger networks, and a goal of current research is to integrate them seamlessly into these networks. These two developments seem to be at odds with each other. XML as a fully text-based format takes up more processing power and network bandwidth than binary formats would, whereas the battery-powered nature of mobile devices dictates that energy, both in processing and transmitting, be utilized efficiently. This thesis presents the work we have performed to reconcile these two worlds. We present a message transfer service that we have developed to address what we have identified as the three key issues: XML processing at the application level, a more efficient XML serialization format, and the protocol used to transfer messages. Our presentation includes both a high-level architectural view of the whole message transfer service, as well as detailed descriptions of the three new components. These components consist of an API, and an associated data model, for XML processing designed for messaging applications, a binary serialization format for the data model of the API, and a <b>message</b> <b>transfer</b> <b>protocol</b> providing two-way messaging capability with support for client mobility. We also present relevant performance measurements for the service and its components. As a result of this work, we do not consider XML to be inherently incompatible with mobile devices. As the fixed networking world moves toward XML for interoperable data representation, so should the wireless world also do to provide a better-integrated networking infrastructure. However, the problems that XML adoption has touch all of the higher layers of application programming, so instead of concentrating simply on the serialization format we conclude that improvements need to be made in an integrated fashion in all of these layers...|$|E
50|$|A smart host {{is a type}} of email <b>message</b> <b>transfer</b> {{agent that}} allows a Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP) server to route email to an {{intermediate}} mailserver rather than directly to the recipient's server. This smart host often requires authentication from the sender to verify that the sender has privileges to have mail forwarded through the smart host. This is an important distinction from an open mail relay that will forward mail from the sender without authentication. Common authentication techniques include SMTP Authentication and POP before SMTP.|$|R
40|$|Vehicular Ad hoc network (VANET) {{can serve}} as a source and storage of {{up-to-date}} data that improve safety, fluency and comfort in road traffic. We aimed in this dissertation thesis on improvements in end-to-end communication between two VANET nodes by means of proposing a new application-level communication protocol that is specialised on transferring large object structures. In order to minimise size of <b>transferred</b> <b>message,</b> the <b>protocol</b> makes use of the information about the structure that both communicating parties already share. The protocol uses UDP as an end-to-end datagram transportation service, because it is, according to our simulation results, more efficient than TCP. In order not to waste successfully received datagrams, the proposed protocol uses addressing that allows processing of independently received datagrams and using their contents for reconstructing the <b>transferred</b> <b>message.</b> In case of not receiving all the datagrams the message cannot be reconstructed completely, its missing parts are exactly denoted so that a receiving application is able to make use of at least the received part...|$|R
5000|$|Checks {{accessibility}} of TCP based services like Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP), Post Office <b>Protocol</b> (POP3), Hypertext <b>Transfer</b> <b>Protocol</b> (HTTP), Network News <b>Transfer</b> <b>Protocol</b> (NNTP), File <b>Transfer</b> <b>Protocol</b> (FTP), Secure Shell (SSH), and so on.|$|R
50|$|A <b>message</b> <b>transfer</b> agent {{receives}} {{mail from}} either another MTA, a mail submission agent (MSA), or a mail user agent (MUA). The transmission details are {{specified by the}} Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP). When a recipient mailbox of a message is not hosted locally, the message is relayed, that is, forwarded to another MTA. Every time an MTA receives an email message, it adds a Received trace header field {{to the top of}} the header of the message, thereby building a sequential record of MTAs handling the message. The process of choosing a target MTA for the next hop is also described in SMTP, but can usually be overridden by configuring the MTA software with specific routes.|$|R
50|$|EFTP (various {{expansions}} of {{this have}} been given, including Easy File <b>Transfer</b> <b>Protocol,</b> Ether File <b>Transfer</b> <b>Protocol,</b> and Experimental File <b>Transfer</b> <b>Protocol)</b> {{was a very}} simple file <b>transfer</b> <b>protocol</b> developed {{as part of the}} PUP protocol suite at Xerox PARC in the late 1970s. It was part of the inspiration for the Trivial File <b>Transfer</b> <b>Protocol</b> (TFTP) in the TCP/IP suite.|$|R
5000|$|File transfer: File <b>Transfer</b> <b>Protocol</b> (FTP), Trivial File <b>Transfer</b> <b>Protocol</b> (TFTP) ...|$|R
5000|$|The Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP), {{defined in}} RFC 788 [...] has {{replaced}} the Mail <b>Transfer</b> <b>Protocol.</b>|$|R
3000|$|... across {{can achieve}} by testing experiment. Packet_in_onei̇ {{is the number}} of <b>messages</b> <b>transferring</b> in one cluster, and Packet_in_acrossi̇ {{is the number of}} <b>messages</b> <b>transferring</b> across clusters, which is {{calculated}} as follows.|$|R
50|$|The link <b>protocol</b> <b>transfers</b> <b>messages</b> {{between two}} nodes but assumes very little {{as to what}} those nodes are or how they are implemented.|$|R
3000|$|... {{should be}} {{transferred}} across cluster. The number of <b>messages</b> <b>transferring</b> in one cluster Packet_in_onei̇ {{and the number}} of <b>messages</b> <b>transferring</b> across clusters Packet_in_acrossi̇ calculate by super controller based on polling least-connection algorithm.|$|R
50|$|Crax Commander {{improves}} productivity {{by offering}} user configurable keyboard shortcuts, built-in text editor with sync coloring, full user interface customizing including fonts and colors, archive support, and built in File <b>Transfer</b> <b>Protocol</b> (FTP), Server <b>Message</b> Block (SMB), Apple Filing Protocol (AFP), SSH File <b>Transfer</b> <b>Protocol</b> (SSH), and SSH File <b>Transfer</b> <b>Protocol</b> (sFTP).|$|R
50|$|Some {{examples}} of service ports used for banner grabbing are {{those used by}} Hyper Text <b>Transfer</b> <b>Protocol</b> (HTTP), File <b>Transfer</b> <b>Protocol</b> (FTP), and Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP); ports 80, 21, and 25 respectively. Tools commonly used to perform banner grabbing are Telnet,nmap,zmap which is included with most operating systems, and Netcat.|$|R
50|$|The Local Mail <b>Transfer</b> <b>Protocol</b> (LMTP) is a {{derivative}} of ESMTP, {{the extension of}} the Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP). It is defined in RFC 2033.|$|R
50|$|The Line Mode Browser was {{designed}} {{to be able to be}} platform independent. There are official ports to Apollo/Domain, IBM RS6000, DECStation/ultrix, VAX/VMS, VAX/Ultrix, MS-DOS, Unix, Windows, Classic Mac OS, Linux, MVS, VM/CMS, FreeBSD, Solaris, and to macOS. The browser supports many <b>protocols</b> like File <b>Transfer</b> <b>Protocol</b> (FTP), Gopher, Hypertext <b>Transfer</b> <b>Protocol</b> (HTTP), Network News <b>Transfer</b> <b>Protocol</b> (NNTP), and Wide area information server (WAIS).|$|R
50|$|UDP-based Data <b>Transfer</b> <b>Protocol</b> (UDT), is a {{high-performance}} data <b>transfer</b> <b>protocol</b> designed for <b>transferring</b> large volumetric datasets over high-speed wide area networks. Such settings are typically disadvantageous {{for the more}} common TCP protocol.|$|R
40|$|Abstract. Vehicular Ad-hoc Networks (VANETs) {{have emerged}} as a new network {{environment}} for intelligent transportation systems. In this paper, we focus on traffic monitoring (TM) and roadside <b>message</b> <b>transfer</b> (RMT) applications. The TM application (TMA) allows drivers to query traffic conditions at some distance ahead of themselves {{so that they can}} make decisions on route changes. The RMT application (RMTA) allows data messages to be delivered between roadside entities e. g. emergency messages, via the moving vehicles. We design a robust data <b>transfer</b> <b>protocol</b> (RDTP), and evaluate its effectiveness on the two applications with various vehicular density and vehicular speed. Our study shows that our protocol achieves comparably accurate speed estimate and higher query success rate with lower control overhead than VITP, an existing protocol designed for TMA. It also achieves higher data throughput and lower delivery latency than another existing approach for RMTA. ...|$|R
40|$|Abstract:- As a {{distributed}} computing middleware, the Smart Data Server (SDS) provides a general framework for easy-to-build environment-independent modules with distributed functionality and a secure mechanism for invocation. But {{there are still}} some problems in the widespread cooperation with other {{distributed computing}} system and client terminal. Nevertheless, SOAP, as a new promising simple object access protocol, provides a mechanism based on XML for the structured message exchanging in the distributed environment. Here we take SOAP as the protocol for message transport between the remote client and the Smart Data Server instead of the its own “Information Package <b>Transfer</b> <b>Protocol</b> ” (IPTP), and the SDS gains some new advantages: it can cooperate with other distributed computing solutions, such as CORBA, DCOM, RMI and so on; the SDS can be applied more widely for the SOAP <b>message</b> <b>transferred</b> through HTTP, a wide and most common used protocol in the Internet...|$|R
50|$|The Quick Mail <b>Transfer</b> <b>Protocol</b> (QMTP) is {{an e-mail}} {{transmission}} protocol {{that is designed}} to have better performance than Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP), the de facto standard. It was designed and implemented by Daniel J. Bernstein.|$|R
2500|$|... 220D - Digital <b>Message</b> <b>Transfer</b> Device Subsystems (Combat-net radio) ...|$|R
50|$|DSN {{refers to}} both {{a service that}} may {{optionally}} be provided by <b>Message</b> <b>Transfer</b> Agents (MTAs) using the Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP), and a message format {{to be used to}} return indications of message delivery to the sender of that message. Specifically, the DSN SMTP service is used to request that indications of successful delivery or delivery failure (in the DSN format) be returned. Issuance of a DSN upon delivery failure is the default behavior, whereas issuance of a DSN upon successful delivery requires a specific request from the sender. Note that for various reasons, it is possible for a message to be delivered, and a DSN being returned to the sender indicating successful delivery, but the message subsequently fail to be seen by the recipient or even made available to them. The DSN SMTP extension, message format, and associated delivery status codes are specified in RFCs 3461 through 3464 and 6522.|$|R
25|$|File <b>transfer</b> <b>protocol</b> {{filesystem}} translator.|$|R
