0|807|Public
40|$|ACM Monograph Series: <b>Decision</b> <b>Table</b> Languages and Systems {{focuses on}} {{linguistic}} examination of <b>decision</b> <b>tables</b> and {{survey of the}} features of existing <b>decision</b> <b>table</b> languages and systems. The book first offers information on semiotics, programming language features, and generalization. Discussions focus on semantic broadening, outer language enrichments, generalization of syntax, limitations, implementation improvements, syntactic and semantic features, <b>decision</b> <b>table</b> syntax, semantics of <b>decision</b> <b>table</b> languages, and <b>decision</b> <b>table</b> programming languages. The text then elaborates on design i...|$|R
40|$|In {{this paper}} the {{representation}} of <b>decision</b> <b>tables</b> in a relational database environment is discussed. First, crisp <b>decision</b> <b>tables</b> are defined. Afterwards a technique to represent <b>decision</b> <b>tables</b> in a relational system is presented. Next, fuzzy extensions are made to crisp <b>decision</b> <b>tables</b> {{in order to deal}} with imprecision and uncertainty. As a result, with crisp <b>decision</b> <b>tables</b> as special cases fuzzy <b>decision</b> <b>tables</b> are defined which include fuzziness in the conditions as well as in the actions. Analogous to the crisp case, it is demonstrated how fuzzy <b>decision</b> <b>tables</b> can be stored in a fuzzy relational database environment. Furthermore, consultation of these tables is discussed using fuzzy queries. Decision making;...|$|R
40|$|Includes bibliographical {{references}} (page 37) <b>Decision</b> <b>tables</b> {{are used}} to annotate program specifications, to help a programmer state the specification precisely, and to analyze it. Developing a <b>decision</b> <b>table</b> can be a cumbersome process, and the analysis of a large table can be quite complex. This project, a computer program called the <b>Decision</b> <b>Table</b> Analyzer, is intended to help students develop <b>decision</b> <b>tables,</b> to perform various analysis calculations, and to allow a student <b>decision</b> <b>table</b> to be tested against a master <b>decision</b> <b>table</b> {{to determine whether the}} two tables are equivalent...|$|R
40|$|Abstract In {{this paper}} the {{representation}} of <b>decision</b> <b>tables</b> in a relational database environment is discussed. First, crisp <b>decision</b> <b>tables</b> are defined. Afterwards a technique to represent <b>decision</b> <b>tables</b> in a relational database system is presented. Next, fuzzy extensions are made to crisp <b>decision</b> <b>tables</b> {{in order to deal}} with imprecision and uncertainty. As a result, with crisp <b>decision</b> <b>tables</b> as special cases fuzzy <b>decision</b> <b>tables</b> are defined which include fuzziness in the conditions as well as in the actions. Analogous to the crisp case, it is demonstrated how fuzzy <b>decision</b> <b>tables</b> can be stored in a fuzzy relational database environment. Furthermore, consultation of these tables is discussed using fuzzy queries. 1...|$|R
50|$|Traditional <b>decision</b> <b>tables</b> {{have many}} {{advantages}} {{compared to other}} decision support manners, such as if-then-else programming statements, decision trees and Bayesian networks. A traditional <b>decision</b> <b>table</b> is compact and easily understandable. However, it still has several limitations. For instance, a <b>decision</b> <b>table</b> often faces the problems of conceptual ambiguity and conceptual duplication; {{and it is time}} consuming to create and maintain large <b>decision</b> <b>tables.</b> Semantic <b>decision</b> <b>tables</b> are an attempt to solve these problems.|$|R
40|$|In {{this article}} {{different}} aspects of the <b>decision</b> <b>table</b> formalism are discussed. First, crisp <b>decision</b> <b>tables</b> are defined and their construction is described. Next, fuzzy extensions are made to crisp <b>decision</b> <b>tables</b> {{in order to deal with}} imprecision and uncertainty. As a result, with crisp <b>decision</b> <b>tables</b> as special cases, a form of fuzzy <b>decision</b> <b>tables</b> is defined which include fuzziness in the conditions as well as in the actions. Consequently, the concept of completeness is introduced in the context of fuzzy <b>decision</b> <b>tables.</b> Furthermore, fuzzy consultation of <b>decision</b> <b>tables</b> is discussed, which allows decision making with fuzziness based on the matching between fuzzy conditions and the concept of fuzzy logical implication. (C) 1996 John Wiley & Sons, Inc. status: publishe...|$|R
40|$|This report treats several {{topics in}} {{applications}} of formal methods to avionics software development. Most of these topics concern <b>decision</b> <b>tables,</b> an orderly, easy-to-understand format for formally specifying complex choices among alternative courses of action. The topics relating to <b>decision</b> <b>tables</b> include: generalizations fo <b>decision</b> <b>tables</b> {{that are more}} concise and {{support the use of}} <b>decision</b> <b>tables</b> in a refinement-based formal software development process; a formalism for systems of <b>decision</b> <b>tables</b> with behaviors; an exposition of Parnas tables for users of decision tables; and test coverage criteria and <b>decision</b> <b>tables.</b> We outline features of a revised version of ORA's <b>decision</b> <b>table</b> tool, Tablewise, which will support many of the new ideas described in this report. We also survey formal safety analysis of specifications and software...|$|R
40|$|Proposes {{a method}} to solve {{qualitative}} locational choice problems using fuzzy <b>decision</b> <b>tables</b> as a matching model. Firstly, the technique of crisp <b>decision</b> <b>tables</b> is explained, and their use in locational choice problems is advocated. Subsequently, fuzzy extensions of <b>decision</b> <b>tables</b> are defined. Next, using a brief example, it is shown that fuzzy <b>decision</b> <b>tables</b> can be used efficiently for evaluating business location problems. The proposed method is supported by PROLOGA, an interactive rule-based design tool for <b>decision</b> <b>table</b> construction, optimization and manipulatio...|$|R
40|$|Rough set based {{attribute}} {{reduction is}} an important problem in pre-processing step in data mining. However, most rough set based attribute reduction methods perform on single-value <b>decision</b> <b>tables.</b> In this paper, we solve attribute reduction problems in set-valued <b>decision</b> <b>tables.</b> Our method uses the distance measure which constructed between a conditional attribute set and decision attribute. General Terms Rough set, <b>decision</b> <b>table,</b> set-valued <b>decision</b> <b>table,</b> attribute reduction...|$|R
40|$|AbstractThe use of <b>decision</b> <b>tables</b> {{to express}} {{concurrent}} algorithms, {{and the use}} of concurrent processors to execute <b>decision</b> <b>table</b> programs, are discussed. As a specific application, we show how dynamic programming algorithms can be implemented as <b>decision</b> <b>tables.</b> The Hawaii Parallel Computer (HPC) is a parallel processing computer which was designed utilizing a new computer architecture based upon field-programmable gate arrays. To exploit this computer's unique architecture, algorithms must be expressed in a <b>decision</b> <b>table</b> format. The HPC can be used to implement dynamic programming algorithms expressed in a <b>decision</b> <b>table</b> format...|$|R
40|$|In {{this paper}} it is {{examined}} how the relational approach may be used, {{not only in}} storing, but also in constructing, filling in, validating and consulting <b>decision</b> <b>tables.</b> This integration of a <b>decision</b> <b>table</b> system and the relational concept is studied {{in the context of}} an existing <b>decision</b> <b>table</b> engineering workbench, PROLOGA (PROcedural LOGic Analyzer), an interactive rule-based design tool for <b>decision</b> <b>table</b> construction and manipulation. status: publishe...|$|R
40|$|We study {{problems}} of optimization of decision and inhibitory trees for <b>decision</b> <b>tables</b> with many-valued <b>decisions.</b> As cost functions, we consider depth, average depth, number of nodes, {{and number of}} terminal/nonterminal nodes in trees. <b>Decision</b> <b>tables</b> with many-valued <b>decisions</b> (multi-label <b>decision</b> <b>tables)</b> are often more accurate models for real-life data sets than usual <b>decision</b> <b>tables</b> with single-valued <b>decisions.</b> Inhibitory trees can sometimes capture more information from <b>decision</b> <b>tables</b> than <b>decision</b> trees. In this paper, we create dynamic programming algorithms for multi-stage optimization of trees relative to a sequence of cost functions. We apply these algorithms to prove the existence of totally optimal (simultaneously optimal relative {{to a number of}} cost functions) decision and inhibitory trees for some modified <b>decision</b> <b>tables</b> from the UCI Machine Learning Repository...|$|R
40|$|Building and {{maintaining}} high quality knowledge based systems {{is not a}} trivial task. <b>Decision</b> <b>tables</b> have sometimes been recommended in this process, mainly in verification and validation. In this paper, however, it is shown how <b>decision</b> <b>tables</b> {{can also be used}} to generate, and not just to validate, knowledge bases and how the transformation process from <b>decision</b> <b>tables</b> to knowledge bases can be organized. Several options to generate rules or other knowledge representations from <b>decision</b> <b>tables</b> are described and evaluated. status: publishe...|$|R
40|$|<b>Decision</b> <b>table</b> {{decomposition}} is {{a machine}} learning approach that decomposes a given <b>decision</b> <b>table</b> into an equivalent hierarchy of <b>decision</b> <b>tables.</b> The approach aims to discover <b>decision</b> <b>tables</b> that are overall less complex than the initial one, potentially easier to interpret, and introduce new and meaningful intermediate concepts. Since an exhaustive {{search for an}} optimal hierarchy of <b>decision</b> <b>tables</b> is prohibitively complex, the decomposition uses a suboptimal iterative algorithm that requires the so-called partition selection criterion to decide among possible candidates for decomposition. This paper introduces two such criteria and experimentally compares their performance with the criteria originally used for the decomposition of Boolean functions. Two of these criteria are additionally {{used to assess the}} overall complexity of discovered <b>decision</b> <b>tables.</b> The experiments highlight the differences between the criteria, but also show that in all three cases the decomposit [...] ...|$|R
5000|$|SDT is a <b>decision</b> <b>table.</b> A <b>decision</b> <b>table</b> {{is defined}} as a [...] "tabular method of showing the {{relationship}} between a series of conditions and the resultant actions to be executed". Following the de facto international standard (CSA, 1970), a <b>decision</b> <b>table</b> contains three building blocks: the conditions, the actions (or decisions), and the rules.|$|R
40|$|In {{this paper}} it is {{explained}} how {{the techniques of}} fuzzy <b>decision</b> <b>tables</b> can used for business site selection. It is outlined how this technique fits in the spectrum of techniques which can be adopted for business site selection. Furthermore, it is described how <b>decision</b> <b>tables</b> can be modelled based on functional equivalence. The <b>decision</b> <b>tables</b> are modelled with a tool called Prologa. This tool supports the interactive construction, optimization and consultation of knowledge structuring formalisms such as <b>decision</b> <b>tables,</b> <b>decision</b> rules and decision trees. 1...|$|R
50|$|<b>Decision</b> <b>tables,</b> {{especially}} when {{coupled with the}} use of a domain-specific language, allow developers and policy experts to work from the same information, the <b>decision</b> <b>tables</b> themselves.|$|R
40|$|Abstract. The paper {{proposed}} a new algorithm of attribute value reduction use attribute union, {{only need to}} scan <b>decision</b> <b>table</b> one time, through simple operation can get all the concise rules. To avoid the <b>decision</b> information <b>table</b> for repeatedly {{and a large number}} of operations, algorithm is presented a new method of calculating rules metrics and rules extraction methods, it can not only get a concise decision rules, but also keep the accuracy of decision rules are the same. Example analysis proves the feasibility of the algorithm, and deal effectively with consistent <b>decision</b> <b>table</b> and inconsistent <b>decision</b> <b>table,</b> it can keep the <b>decision</b> <b>table</b> of information remains the same...|$|R
40|$|The {{fuzziness}} and randomness of <b>decision</b> <b>table</b> affect hugely on {{the performance}} of knowledge acquisition in rough set. In order to reduce their influence, a novel reduction algorithm based on grey relational analysis is proposed. In the algorithm, every value of <b>decision</b> <b>table</b> is converted to the same domain. Moreover, on the basis of grey relational analysis, the grey relational matrix for the converted <b>decision</b> <b>table</b> is constructed to describe the equivalence relations between samples of <b>decision</b> <b>table.</b> Finally, the samples with the same similar level are adopted as the coarser granularity. The experiments fully show that the reduction <b>decision</b> <b>table</b> achieved almost the same recognition rate with less than one tenth of the former conditions. It fully shows the effectiveness of the algorithm...|$|R
40|$|In this paper, we {{introduce}} a neural network-based <b>decision</b> <b>table</b> algorithm. We {{focus on the}} implementation details of the <b>decision</b> <b>table</b> algorithm when it is constructed using the neural network. <b>Decision</b> <b>tables</b> are simple supervised classifiers which, Kohavi demonstrated, can outperform state-of-the-art classifiers such as C 4. 5. We couple this power with the efficiency and flexibility of a binary associative-memory neural network. Initially, we demonstrate how the binary associative-memory neural network can form the <b>decision</b> <b>table</b> index to map between attribute values and data records and subsequently we show how two attribute selection algorithms {{can be used to}} pre-select attributes for this <b>decision</b> <b>table.</b> The attribute selection algorithms are easily implemented within the same binary associative-memory framework producing a tightly coupled, two-tier system allowing attribute selection and <b>decision</b> <b>table</b> indexing. The first attribute selector uses mutual information between attributes and classes to select the attributes that classify best. The second attribute selector uses a probabilistic approach to evaluate randomly selected attribute subsets. ...|$|R
40|$|On most {{datasets}} induction algorithms {{can generate}} very accurate classifiers. Sometimes, however, these classifiers are {{very hard to}} understand for humans. Therefore, in this paper it is investigated how we can present the extracted knowledge to the user by means of <b>decision</b> <b>tables.</b> <b>Decision</b> <b>tables</b> are very easy to understand. Furthermore, <b>decision</b> <b>tables</b> provide interesting facilities to check the extracted knowledge on consistency and completeness. In this paper, it is demonstrated how a consistent and complete DT can be modelled starting from raw data. Because the modelled <b>decision</b> <b>tables</b> are sufficiently small they allow easy consultation of the represented knowledge. status: publishe...|$|R
40|$|In practice, some of {{information}} systems are based on dominance relations, and values of decision attribute are fuzzy. So, it is meaningful to study attribute reductions in ordered <b>decision</b> <b>tables</b> with fuzzy <b>decision.</b> In this paper, upper and lower approximation reductions are proposed {{in this kind of}} complicated <b>decision</b> <b>table,</b> respectively. Some important properties are discussed. The judgement theorems and discernibility matrices associated with two reductions are obtained from which the theory of attribute reductions is provided in ordered <b>decision</b> <b>tables</b> with fuzzy <b>decision.</b> Moreover, rough set approach to upper and lower approximation reductions is presented in ordered <b>decision</b> <b>tables</b> with fuzzy <b>decision</b> as well. An example illustrates the validity of the approach, and results show that it is an efficient tool for knowledge discovery in ordered <b>decision</b> <b>tables</b> with fuzzy <b>decision...</b>|$|R
40|$|The {{evaluation}} of tutorial strategies, interface designs, and courseware content {{is an area}} of active research in the medical education community. Many of the evaluation techniques that have been developed (e. g., program instrumentation), commonly produce data that are difficult to decipher or to interpret effectively. We have explored the use of <b>decision</b> <b>tables</b> to automatically simplify and categorize data for the composition of user models [...] descriptions of student's learning styles and preferences. An approach to user modeling that is based on <b>decision</b> <b>tables</b> has numerous advantages compared with traditional manual techniques or methods that rely on rule-based expert systems or neural networks. <b>Decision</b> <b>tables</b> provide a mechanism whereby overwhelming quantities of data can be condensed into an easily interpreted and manipulated form. Compared with conventional rule-based expert systems, <b>decision</b> <b>tables</b> are more amenable to modification. Unlike classification systems based on neural networks, the entries in <b>decision</b> <b>tables</b> are readily available for inspection and manipulation. <b>Decision</b> <b>tables,</b> descriptions of observations of behavior, also provide automatic checks for ambiguity in the tracking data...|$|R
40|$|This {{research}} examines which {{method is}} better for programming rule-based expert systems: IF-THEN rules or <b>decision</b> <b>tables.</b> Thirty undergraduate MIS students served as experimental subjects in an eight week study. After four weeks, subjects wrote <b>decision</b> <b>tables</b> coveting cases significantly more consistently than IF-THEN rules (p<. 01). After eight weeks, however, subjects wrote IF-THEN rules that were significantly more complete (p<. 05) and significantly more correct (p<. 01). The eighth week test also revealed that subjects preferred <b>decision</b> <b>tables</b> to IF-THEN rules (p<. 05), perceiving them to be easier (p<. 01). It is interesting {{that in spite of}} a significant preference for <b>decision</b> <b>tables,</b> subjects wrote significantly more accurate IF-THEN rules...|$|R
40|$|The {{attribute}} {{core of a}} <b>decision</b> <b>table</b> {{is often}} the start point and key of many decision information system reduction procedures based on rough set theory. The algebra view and information view are two main views and methods of rough set theory. In this paper, based {{on the problem of}} calculating the attribute core of a <b>decision</b> <b>table,</b> we will study the relationship between the algebra view and information view. Through simulation experiment, we find the quantitative difference of the attribute core of a <b>decision</b> <b>table</b> in both views of rough set theory. Especially, we find that their difference will be maximized in <b>decision</b> <b>tables</b> containing much inconsistent information. 1...|$|R
40|$|Objective: To {{develop a}} {{knowledge}} representation model for clinical practice guidelines that is linguistically adequate, comprehensible, reusable, and maintainable. Design: <b>Decision</b> <b>tables</b> provide the basic {{framework for the}} proposed knowledge representation model. Guideline logic is represented as rules in conventional <b>decision</b> <b>tables.</b> These tables are augmented by layers where collateral information is recorded in slots beneath the logic. Results: <b>Decision</b> <b>tables</b> organize rules into cohesive rule sets wherein complex logic is clarified. <b>Decision</b> <b>table</b> rule sets may be verified to assure completeness and consistency. Optimization and display of rule sets as sequential decision trees may enhance the comprehensibility of the logic. The modularity of the rule formats may facilitate maintenance. The augmentation layers provide links to descriptive language, information sources, decision variable characteristics, costs and expected values of policies, and evidence sources and quality. Conclusion: Augmented <b>decision</b> <b>tables</b> {{can serve as a}} unifying knowledge representation for developers and implementers of clinical practice guidelines. � J Am Med Inform Assoc. 1997; 4 : 382 – 393...|$|R
40|$|This article {{discusses}} {{an alternative}} approach in analyzing and modelling consumer <b>decision</b> processes: <b>decision</b> <b>tables.</b> <b>Decision</b> <b>tables</b> represent means of formalizing choice rules or heuristics. The focus of this approach thus is not on quantitative, probabilistic relationships between a set of explanatory variables and choice probabilities but {{on a set of}} conditions and states that lead to particular actions. <b>Decision</b> <b>tables</b> have therefore been primarily used in the context of rule-based simulation models of consumer choice behaviour...|$|R
40|$|Abstract—Using maximal {{consistent}} {{blocks of}} tolerance relation on {{the universe in}} incomplete <b>decision</b> <b>table,</b> the concepts of join block and meet block are introduced and studied. Including tolerance class, other blocks such as tolerant kernel and compatible kernel of an object are also discussed at the same time. Upper and lower approximations based on those blocks are also defined. Default definite decision rules acquired from incomplete <b>decision</b> <b>table</b> are proposed in the paper. An incremental algorithm to update default definite decision rules is suggested for effective mining tasks from incomplete <b>decision</b> <b>table</b> into which data is appended. Through an example, we demonstrate how default definite decision rules based on maximal consistent blocks, join blocks and meet blocks are acquired and how optimization is done in support of discernibility matrix and discernibility function in the incomplete <b>decision</b> <b>table.</b> Keywords—rough set, incomplete <b>decision</b> <b>table,</b> maximal consistent block, default definite decision rule, join and meet block. I...|$|R
40|$|Decision {{situations}} have various aspects: {{knowledge acquisition}} and structuring, knowledge representation, knowledge validation and decision making. It {{has been recognized}} in literature that <b>decision</b> <b>tables</b> {{can play an important}} role in each of these stages. It is however not necessary to use only one representation formalism during the whole life cycle of an intelligent system. Likewise it is possible that different formats of the same formalism serve different purposes in the development process. Important in this respect is the search for automated and, if possible, optimized transitions between different formats of a formalism and between various formalisms. In this paper a branch and bound algorithm is presented that transforms expanded <b>decision</b> <b>tables,</b> that, because of their explicit enumeration of all decision cases primarily serve an acquisition and verification function, into optimized contracted <b>decision</b> <b>tables,</b> primarily used as target representation of a decision process. An optimal contracted <b>decision</b> <b>table</b> is a contracted <b>decision</b> <b>table</b> with a condition order which results in the minimum number of contracted decision columns. ...|$|R
40|$|In recent years, the {{software}} quality {{becomes more important}} because the system becomes large scale and high performance. In general, many defects are embedded in the upstream process of {{the software}} development. As one reason of the above, specifications include ambiguous description. As a means for writing specifications strictly, formal methods are proposed. By the way, as one of test design techniques, the <b>decision</b> <b>table</b> is proposed. However, it takes much {{time and effort to}} extract test items and understand contents written on specifications in designing manually the <b>decision</b> <b>table.</b> This paper proposes a supporting method to generate a <b>decision</b> <b>table</b> from the formal specification in order to improve efficiency of the test design with formal methods. We have implemented a supporting tool to generate a <b>decision</b> <b>table.</b> It automatically generates a skeleton <b>decision</b> <b>table</b> from the formal specification. By using the tool, it is considered that the efficiency of the test design is improved...|$|R
40|$|We {{consider}} <b>decision</b> <b>tables</b> {{with the}} values of conditional attributes (conditions) measured by sensors. These sensors produce outputs after an unknown but finite number of time units. We construct an algorithm for computing a highly parallel program represented by a Petri net from a given <b>decision</b> <b>table.</b> The constructed net allows to identify objects in <b>decision</b> <b>tables</b> to an extent which makes appropriate decisions possible. The outputs from sensors are propagated through the net with maximal speed. This is done by an appropriate implementation of all rules true in a given <b>decision</b> <b>table.</b> Our approach is based on rough set theory [20]. It also seems to have some significance for theoretical foundations of real-time systems. Keywords: real-time systems, information systems, rough sets, decision rules, Petri nets 1 Introduction We assume that a <b>decision</b> <b>table</b> S representing experimental knowledge is given [20]. It consists {{of a number of}} rows labeled by elements from a set of objects [...] ...|$|R
40|$|We apply {{rough set}} methods and boolean {{reasoning}} for knowledge discovery from <b>decision</b> <b>tables.</b> It {{is not always}} possible to extract general laws from experimental data by computing first all reducts [12] of a <b>decision</b> <b>table</b> and next <b>decision</b> rules {{on the basis of}} these reducts. We investigate a problem how information about the reduct set changes in a random sampling process of a given <b>decision</b> <b>table</b> could be used to generate these laws. The reducts stable in the process of <b>decision</b> <b>table</b> sampling are called dynamic reducts. Dynamic reducts define the set of attributes called the dynamic core. This is the set of attributes included in all dynamic reducts. The set of decision rules can be computed from the dynamic core or from the best dynamic reducts. We report the results of experiments with different data sets, e. g. market data, medical data, textures and handwritten digits. The results are showing that dynamic reducts can help to extract laws from <b>decision</b> <b>tables.</b> Key words: evol [...] ...|$|R
50|$|A <b>decision</b> <b>table</b> {{separates}} the data (that is the condition entries and decision/action entries) from the decision templates (that are the condition stubs, decision/action stubs, and {{the relations between}} them). Or rather, a <b>decision</b> <b>table</b> can be a tabular result of its meta-rules.|$|R
5000|$|Semantic <b>decision</b> <b>tables</b> (SDT) use modern {{ontology}} engineering (OE) technologies to enhance traditional <b>decision</b> <b>tables.</b> The term [...] "semantic decision table" [...] was coined by Yan Tang and Prof. Robert Meersman from VUB STARLab (Free University of Brussels) in 2006. An SDT is a (set of) <b>decision</b> <b>table(s)</b> properly annotated with an ontology. It {{provides a means}} to capture and examine decision makers’ concepts, {{as well as a}} tool for refining their decision knowledge and facilitating knowledge sharing in a scalable manner.|$|R
40|$|A formal {{equivalence}} between propositional expert systems and <b>decision</b> <b>tables</b> is proved, and a practicable procedure given {{to perform the}} transformation between propositional expert systems and <b>decision</b> <b>tables.</b> The method gave {{an order of magnitude}} speed increase for a well-known expert system in routine use. The method is very general: adaptations are shown for forward and backward chaining inferencing engines, inexact reasoning, and systems where some facts have a high cost and must be determined only if necessary. A particular application for the <b>decision</b> <b>table</b> representation is in real-time expert systems, since a simple hardware implementation is available which gives further orders of magnitude increase in performance. Finally, the <b>decision</b> <b>table</b> representation greatly simplifies the problem of completeness and consistency checking...|$|R
40|$|<b>Decision</b> <b>tables</b> {{have been}} used {{traditionally}} in the solution of problems involving decision-taking tasks. In this paper, adaptive devices based on <b>decision</b> <b>tables</b> are used for the solution of decision-taking problems. The resulting adaptive <b>decision</b> <b>tables</b> have shown to be effective for their generality and flexibility, so they are appropriate for helping in the task of automatically choosing among several applicable alternatives at each stage {{in the process of}} decision taking. An illustrating example is shown in the business management field, and an overall comparative evaluation is shown...|$|R
