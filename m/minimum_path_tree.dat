0|2723|Public
40|$|This paper {{presents}} a convergent simplicial decomposition algorithm for the variational inequality {{formulation of the}} asymmetric traffic assignment problem. It alternates between generating <b>minimum</b> <b>path</b> <b>trees</b> based on the cost function evaluated at the current iterate and the approximate solving of a master variational inequality subject to simple convexity constraints. Thus it generalizes the popular Frank-Wolfe method (where the master problem is a line search) to the asymmetric problem. Rules are given for dropping flow patterns which are not needed to express the current iterate as a convex combination of previous patterns. The results of some computational testing are reported. ...|$|R
40|$|Some {{multicast}} applications require {{high bandwidth}} and bounded delay (eg Videoconferencing). The general problem of constructing bounded delay minimal cost multicast trees uses two link metrics (cost and delay) and is NP-complete. A number of heuristics have been developed, {{most of which}} {{tend to have a}} high order of time complexity. Our heuristics achieve good results with low time-complexity and we believe that they are adaptable to a number of other multicasting scenarios. Current Internet multicasting protocols use either link-state or distance vector routing to construct multicast <b>trees</b> that have <b>minimum</b> <b>path</b> delays. <b>Tree</b> cost is ignored. When our heuristics are applied using a single link metric, they achieve <b>minimum</b> delay <b>path</b> multicast <b>trees</b> of lower cost than those constructed using Dijkstra's shortest path algorithm. The cost savings achieved by one of our heuristics is such that it can be considered as a candidate for use in distributed muticast protocols, such as MOSPF, as [...] ...|$|R
40|$|This paper {{assesses the}} {{incorporating}} of candidate nodes into overlay multicast trees. Overlay networks attempt {{to compensate for}} the awkwardness and inefficiencies that can exist across the Internet for group communication. This work uses a network simulation application to assess the feasibility of overlay networks and presents the results found. Results show that there are persistent improvements using the metric of cost between the optimal KMB <b>tree</b> and the <b>minimum</b> <b>path</b> spanning <b>tree</b> and that there are significant improvements, again using the metric of cost, between n-way distribution without a centroid node and nway distribution with a centroid node of approximately twenty per cent in each instance. This is to provide an application layer active networking infrastructure for distributed virtual reality...|$|R
40|$|The {{concept of}} reload cost, {{that is of}} a cost {{incurred}} when two consecutive arcs along a path are of different types, naturally arises {{in a variety of}} applications related to transportation, telecommunication, and energy networks. Previous work on reload costs is devoted to the problem of finding a spanning tree of minimum reload cost diameter (with no arc costs) or of minimum reload cost. In this article, we investigate the complexity and approximability of the problems of finding optimum paths, tours, and flows under a general cost model including reload costs as well as regular arc costs. Some of these problems, such as shortest <b>paths</b> and <b>minimum</b> cost flows, turn out to be polynomially solvable while others, such as <b>minimum</b> shortest <b>path</b> <b>tree</b> and <b>minimum</b> unsplittable multicommodity flows, are NP-hard to approximate within any polynomial-time computable function...|$|R
40|$|Abstract—Multipath routing {{has been}} proved {{effective}} in mobile ad-hoc networks (MANETs) for coping with link fail-ures resulting from node mobility. In wireless mesh networks (WMNs) where routers are generally static, the traffic carried by the backup paths may adversely impact other flows and the multicast group itself, because these paths {{increase the number of}} transmissions and thus the level of interference and congestion in the network. This impact, however, has not been examined, especially for multicast routing. We present simulation results that quantify the impact of data overhead of multicast multipath routing compared with single-path routing. Keywords-Multicast routing, multipath routing, wireless mesh networks, performance evaluation, shortest <b>path</b> <b>trees,</b> shortest pair of disjoint <b>paths,</b> <b>minimum</b> cost <b>trees.</b> I...|$|R
40|$|Minimization of {{decision}} trees {{is a well}} studied problem. In this work, we introduce two new problems related to minimization {{of decision}} trees. The problems are called minimum verification set (MinVS) and <b>minimum</b> <b>path</b> decision <b>tree</b> (MinPathDT) problems. Decision tree problems ask the question "What is the unknown given object?". MinVS problem {{on the other hand}} asks the question "Is the unknown object z?", for a given object z. Hence it is not an identification, but rather a verification problem. MinPathDT problem aims to construct a decision tree where only the cost of the root-to-leaf path corresponding to a given object is minimized, whereas decision tree problems in general try to minimize the overall cost of decision trees considering all the objects. Therefore, MinVS and MinPathDT are seemingly easier problems. However, in this work we prove that MinVS and MinPathDT problems are both NP-complete and cannot be approximated within a factor in o(lg n) unless P = NP...|$|R
40|$|International audienceThis paper {{focuses on}} {{tractable}} instances of interval data minmax regret graph problems. More precisely, we provide polynomial and pseudopolynomial algorithms for sets of particular instances of the interval data minmax regret {{versions of the}} shortest <b>path,</b> <b>minimum</b> spanning <b>tree</b> and weighted (bipartite) perfect matching problems. These sets are defined using a parameter that measures the distance from well known solvable instances. Tractable cases occur when the parameter is bounded by a constant. Two kinds of parameters are investigated, measuring either the distance from special weight structures or the distance from special graph structures...|$|R
40|$|AbstractWhile the {{complexity}} of min–max and min–max regret versions of most classical combinatorial optimization problems has been thoroughly investigated, {{there are very few}} studies about their approximation. For a bounded number of scenarios, we establish general approximation schemes which can be used for min–max and min–max regret versions of some polynomial or pseudo-polynomial problems. Applying these schemes to shortest <b>path,</b> <b>minimum</b> spanning <b>tree,</b> minimum weighted perfect matching on planar graphs, and knapsack problems, we obtain fully polynomial-time approximation schemes with better running times than the ones previously presented in the literature...|$|R
40|$|This paper {{focuses on}} {{tractable}} instances of interval data minmax regret graph problems. More precisely, we provide polynomial and pseudopolynomial algorithms for sets of particular instances of the interval data minmax regret {{versions of the}} shortest <b>path,</b> <b>minimum</b> spanning <b>tree</b> and weighted (bipartite) perfect matching problems. These sets are defined using a parameter that measures the distance from trivial instances. Tractable cases occur when the parameter is bounded by a constant. Two kinds of parameters are investigated, measuring either the distance from special weight structures or the distance from special graph structures...|$|R
40|$|This work {{treats the}} problem of {{designing}} data-oblivious algorithms for classical and widely used graph problems. A data-oblivious algorithm is defined as having the same sequence of operations regardless of the input data and dataindependent memory accesses. Such algorithms are suitable for secure processing in outsourced and similar environments, which serves as the main motivation for this work. We provide data-oblivious algorithms for breadth-first search, single-source single-destination shortest <b>path,</b> <b>minimum</b> spanning <b>tree,</b> and maximum flow, the asymptotic complexities of which are optimal, or close to optimal, for dense graphs...|$|R
40|$|In open canal {{irrigation}} networks, conveyance {{of water}} from the resource to plots through the best route under current topographical and ownership distribution restrictions is an important problem. This problem is especially significant for countries such as Turkey in which open canal systems constitute most of the irrigation networks. In this study, the shortest <b>path,</b> <b>minimum</b> spanning <b>tree,</b> network flow and transshipment models were applied to a state-owned irrigation network in Burdur-Turkey for open canal irrigation network optimization by taking the modifications required by the topography also into consideration and the results obtained from the models were compared with the current applications...|$|R
40|$|In this paper, {{we use the}} {{universal}} covering space of a surface to generalize previous results on computing paths in a simple polygon. We look at optimizing paths among obstacles in the plane under the Euclidean and link metrics and polygonal convex distance functions. The universal cover is a unifying framework that reveals connections between <b>minimum</b> <b>paths</b> under these three distance functions, as well as yielding simpler linear-time algorithms for shortest <b>path</b> <b>trees</b> and <b>minimum</b> link <b>paths</b> in simple polygons...|$|R
30|$|In {{addition}} to channel assignment, the schemes in [1 – 7] also deal with routing in MRMC WMNs. In the previous work [1, 2], we employed minimum power-based minimum spanning trees and <b>minimum</b> power-based shortest <b>path</b> <b>trees</b> for degree constrained routing. In [3], traffic is routed using either minimum-hop path routing or randomized multi-path routing. In [4], routing heuristics incorporate {{the impact of}} interface switching cost and a possible implementation using the dynamic source routing protocol is discussed. The optimized link state routing protocol is used in [5] for route selection. The scheme in [6] uses a flow rate computation method for routing, which aims to maximize the network throughput. For the performance evaluation of the channel assignment scheme in [7], the routes are computed statically using the smallest number of hops. In this paper, we formulate the routing problem as a MILP {{with the objective of}} maximizing the network throughput under fairness, flow conservation, half-duplex, and node-degree constraints.|$|R
40|$|AbstractIn this paper, we {{show that}} the {{universal}} covering space of a surface {{can be used to}} unify previous results on computing paths in a simple polygon. We optimize a given path among obstacles in the plane under the Euclidean and link metrics and under polygonal convex distance functions. Besides revealing connections between the <b>minimum</b> <b>paths</b> under these three distance functions, the framework provided by the universal cover leads to simplified linear-time algorithms for shortest <b>path</b> <b>trees,</b> for minimum-link <b>paths</b> in simple polygons, and for paths restricted to c given orientations...|$|R
40|$|AbstractExtensive {{facility}} location {{models on}} graphs {{deal with the}} location of a special type of subgraphs such as <b>paths,</b> <b>trees</b> or cycles and can be considered as extensions of classical point location models. Variance is one of the measures applied in models in which some equality requirement is imposed. In this paper the problem of locating a <b>minimum</b> variance <b>path</b> in a <b>tree</b> network is addressed, and an O(n 2 logn) time algorithm is proposed...|$|R
40|$|The {{primary goal}} of this {{dissertation}} was to develop and pilot test interactive, multimedia courseware which would facilitate learning the abstract structures, operations, and concepts associated with graph and network data structures in Computer Science. Learning objectives and prerequisites are presented in an introduction section of the courseware {{and a variety of}} learning activities are provided including tutorials, animated demonstrations, interactive laboratory sessions, and self-tests. Courseware development incorporated principles and practices from software engineering, instructional design, and cognitive learning theories. Implementation utilized an easy-to-use authoring tool, NeoBook Professional (1994), to create the overall framework and the user interfaces, and Microsoft QuickBASIC 4. 5 (1990) to program the interactive animated demonstrations and laboratory exercises. A major emphasis of the courseware is the use of simple interactive, animated displays to demonstrate the step-by-step operation of graph and network algorithms such as depth-first traversal, breadth-first traversal, shortest <b>path,</b> <b>minimum</b> sparring <b>tree</b> and topological ordering...|$|R
40|$|We {{address the}} problem of finding the K best <b>path</b> <b>trees</b> {{connecting}} a source node with any other non-source node in a directed network with arbitrary lengths. The main result in this paper is the proof that the kth shortest <b>path</b> <b>tree</b> is adjacent to {{at least one of the}} previous (k- 1) shortest <b>path</b> <b>trees.</b> Consequently, we design an O(f(n,m,Cmax) +Km) time and O(K+m) space algorithm to determine the K shortest <b>path</b> <b>trees,</b> in a directed network with n nodes, m arcs and maximum absolute length Cmax, where O(f(n,m,Cmax)) is the best time needed to solve the shortest simple paths connecting a source node with any other non-source node. Network/graphs K shortest <b>path</b> <b>trees</b> problem Shortest <b>path</b> <b>tree</b> problem K best spanning tree K best solutions...|$|R
40|$|The {{integration}} definition (IDEF) methodology {{has been}} extensively used for modeling of various processes. Reliability analysis of IDEF 3 models is of interest to practitioners and researchers for several reasons. It identifies critical activities in the process, improves the process performance, and decreases downtime and operating cost of the process. This paper extends the system reliability evaluation techniques, i. e., the system reduction approach and <b>minimum</b> <b>path</b> and cut sets method for reliability evaluation of IDEF 3 models. Representation of IDEF 3 models as reliability graphs, generation of the minimal path and cut sets of IDEF 3 models with a <b>path</b> <b>tree</b> algorithm, and reliability analysis of IDEF 3 models are the issues discussed in this paper. An algorithm for computing reliability of an IDEF 3 model from a path set-activity incidence matrix is also presented...|$|R
50|$|In SPBM, the Backbone MAC (B-MAC) {{addresses}} {{of the participating}} nodes and also the service membership information for interfaces to non-participating devices (user network interface (UNI) ports) is distributed. Topology data is then input to a calculation engine which computes symmetric shortest <b>path</b> <b>trees</b> based on <b>minimum</b> cost from each participating node to all other participating nodes. In SPBV these trees provide a shortest <b>path</b> <b>tree</b> where individual MAC address can be learned and Group Address membership can be distributed. In SPBM the shortest <b>path</b> <b>trees</b> are then used to populate forwarding tables for each participating node's individual B-MAC addresses and for Group addresses; Group multicast trees are sub trees of the default shortest <b>path</b> <b>tree</b> formed by (Source, Group) pairing. Depending on the topology several different equal cost multi <b>path</b> <b>trees</b> are possible and SPB supports multiple algorithms per IS-IS instance.|$|R
5000|$|The {{paths of}} the {{decomposition}} may themselves be organized {{into a tree}} called the [...] "path tree", [...] "heavy path tree", or [...] "compressed tree". Each node of the <b>path</b> <b>tree</b> corresponds to a path of the heavy path decomposition. If p is a path of the heavy path decomposition, then the parent of p in the <b>path</b> <b>tree</b> is the <b>path</b> containing the parent {{of the head of}} p. The root of the <b>path</b> <b>tree</b> is the <b>path</b> containing the root of the original <b>tree.</b> Alternatively, the <b>path</b> <b>tree</b> may be formed from the original tree by edge contraction of all the heavy edges.|$|R
3000|$|... between x and y. Like the <b>minimum</b> <b>path,</b> {{the minimal}} path {{may not be}} unique and may depend on the chosen neighborhood. The {{diameter}} B of a connected region is the longest <b>minimum</b> <b>path</b> having at least its endpoints within the connected region. A connected region is considered as convex if all minimal <b>paths</b> are <b>minimum</b> <b>paths</b> at the same time. A configuration C={D×ϕ} is the actual state of the LS function, namely, {{the shape of the}} zero LS and the connected regions (Ω [...]...|$|R
3000|$|The {{length of}} a path is a non-negative integer (L) and L=|p|− 1, where |.| denotes the number of points in the <b>path.</b> A <b>minimum</b> <b>path</b> pmin is a {{shortest}} path meaning there are no shorter p′ paths between x and y. <b>Minimum</b> <b>path</b> is usually not unique and can depend on the chosen discrete neighborhood. The distance between x and y is a non-negative integer {{that is exactly the}} {{length of a}} <b>minimum</b> <b>path</b> between the two points. This is a real metric and is going to be referred to as d [...]...|$|R
40|$|We {{address the}} problem for finding the K best <b>path</b> <b>trees</b> {{connecting}} a source node with any other non-source node in a directed network with arbitrary lengths. The main result in this paper is the proof that the kth shortest <b>path</b> <b>tree</b> is adjacent {{to at least one}} of the previous (k− 1) shortest <b>path</b> <b>trees.</b> Consequently, we design an O (+Km) time and O(K+m) space algorithm to determine the K shortest <b>path</b> <b>trees,</b> in a directed network with n nodes, m arcs and maximum absolute length, where O () is the best time needed to solve the shortest simple paths connecting a source node with any other non-source node. max (,,) f n m C maxC max (,,) f n m...|$|R
40|$|In this paper, we {{show that}} the {{universal}} covering space of a surface {{can be used to}} unify previous results on computing paths in a simple polygon. We optimize a given path among obstacles in the plane under the Euclidean and link metrics and under polygonal convex distance functions. Besides revealing connections between the <b>minimum</b> <b>paths</b> under these three distance functions, the framework provided by the universal cover leads to simplified linear-time algorithms for shortest <b>path</b> <b>trees,</b> for minimum-link <b>paths</b> in simple polygons, and for paths restricted to c given orientations. 1 Introduction If a wire, a pipe, or a robot must traverse a path among obstacles in the plane, then one might ask what is the best route to take. For the wire, perhaps the shortest distance is best; for the pipe, perhaps the fewest straight-line segments. For the robot, either might be best depending on the relative costs of turning and moving. In this paper, we find shortest paths and shortest closed curve [...] ...|$|R
5000|$|... #Subtitle level 3: <b>Minimum</b> <b>path</b> {{cover in}} {{directed}} acyclic graph ...|$|R
50|$|ECT-MASK0 is {{reserved}} for a common spanning tree algorithm, while ECT-MASK1 creates the Low PATHID set of shortest <b>path</b> first <b>trees,</b> ECT-MASK2 creates the High PATHID set of shortest <b>path</b> <b>trees</b> and the other indexes create other relatively diverse permutations of shortest <b>path</b> first <b>trees.</b>|$|R
40|$|The {{geographically}} {{distributed system}} can be interconnected via a overlay multicast network. In this overlay network the multicast data are routed and replicated on the application layer along a multicast tree. This paper presents the techniques of the network reduction and the multicast tree construction. The multicast tree {{in the form of}} shortest <b>path</b> <b>tree</b> (SPT) can be build up upon the linear programming formulation. To control the load of each host, the additional constraints on the maximal number of directly outgoing connections and integer variables are added and subsequently form the degree-bounded shortest <b>path</b> <b>tree</b> problem (db-SPT). This theoretically based problem is formulated in integer linear programming framework. Keywords: Application-layer multicast, overlay network, shortest <b>path</b> <b>tree</b> problem, degree-bounded shortest <b>path</b> <b>tree</b> problem, integer linear programming. 1...|$|R
40|$|The {{shortest}} <b>path</b> <b>tree</b> {{construction is}} essential in network routing, and the Dijkstra algorithm, which is a static routing algorithm, is widely used. When some links in a network have new weights, dynamic routing algorithms are more efficient than static routing algorithms. This is because the dynamic routing algorithms reduce redundancy by re-computing only the affected sections of the network with the changed links. However, the dynamic routing algorithms are not efficient in some situations and can increase computation time to create the shortest <b>path</b> <b>tree.</b> Therefore, hybrid routing algorithms, which reduce the total execution time of shortest <b>path</b> <b>tree</b> computation using the advantages of both static and dynamic routing algorithms, have been suggested recently. In this paper, a multi-path hybrid routing algorithm is presented that uses multi-path information to create the shortest <b>path</b> <b>tree</b> when some links have new weights. Comparisons with other routing algorithms, such as Dijkstra, Dynamic Dijkstra, and Hybrid Shortest <b>Path</b> <b>Tree</b> (HSPT), demonstrate that the multi-path hybrid routing algorithm provides better performance as the execution time decreases...|$|R
50|$|A <b>minimum</b> <b>path</b> cover {{consists}} of one path if {{and only if}} there is a Hamiltonian path in G. The Hamiltonian path problem is NP-complete, and hence the <b>minimum</b> <b>path</b> cover problem is NP-hard. However, if the graph is acyclic, the problem is in complexity class P and can therefore be solved in polynomial time by transforming it in a matching problem.|$|R
40|$|Recently, {{shortest}} <b>path</b> <b>tree</b> {{construction is}} essential in network routing. Dijkstra algorithm, one of the static routing algorithms, is widely used. When some links develop new weights, dynamic routing algorithms become more efficient than static routing algorithms. This is because dynamic routing algorithms reduce the redundancy caused by re-computing the affected part of the network {{in regards to the}} changed links. However, dynamic routing algorithms are not always efficient in some cases and increase the computation time when making the shortest <b>path</b> <b>tree.</b> In this paper, we present a Hybrid Shortest <b>Path</b> <b>Tree</b> (HSPT) algorithm which reduces the total execution time of shortest <b>path</b> <b>tree</b> computation by using the advantages of both static and dynamic routing algorithms. Comparisons with the other routing algorithms such as Dijkstra, Dynamic Dijkstra and RDSP show that the HSPT algorithm provides a better performance as demonstrated by the decrease in the execution time...|$|R
30|$|Furthermore, {{consider}} x and x+dx along a <b>minimum</b> cost <b>path.</b> It is {{also clear}} from (3) and (23) that θ= 0. Since both x and x+dx are on a <b>minimum</b> cost <b>path,</b> dx and thus ∇T are tangent to the <b>minimum</b> cost <b>path.</b>|$|R
40|$|The IDEF {{methodology}} {{has been}} extensively used for modeling processes. Qualitative and quantitative reliability analysis and risk assessment of IDEF models is of interest to industry for several reasons. It identifies critical activities in a process, improves the process performance, and decreases downtime and operating cost of the process. To evaluate the reliability and risk associated with an IDEF 3 model formal tools and techniques are required. This paper extends the system reliability evaluation techniques, i. e., the system reduction approach and <b>minimum</b> <b>path</b> and cut sets method for reliability evaluation of IDEF 3 models. Representation of IDEF 3 models as reliability graphs, generation of minimal path and cut sets of IDEF 3 models with a <b>path</b> <b>tree</b> algorithm, and reliability analysis of IDEF 3 models are the issues discussed in this paper. An algorithm for computing reliability of an IDEF 3 model from a path set - activity incidence matrix is also presented. In addition, the fault tree analysis technique and <b>minimum</b> cut and <b>path</b> sets generation algorithms are applied for reliability evaluation and risk assessment of the parent activities in an IDEF 3 model. A structural and reliability importance measure for parent activities in an IDEF 3 model {{as well as for}} the elementary activities in a decomposed model are presented...|$|R
30|$|In Row 2, the Dijkstra {{algorithm}} [20], well-known form graph theory, {{is adopted}} to associate to each node v_i∈ V, {{the cost of}} the (<b>minimum)</b> <b>path</b> from s to v_i, and the node v_i- 1 preceding v_i in the <b>minimum</b> cost <b>path.</b> Then (Row 3), the <b>minimum</b> cost <b>path</b> from s to d is read from the results of Dijkstra algorithm and S is consequently built in Rows 4 and 5.|$|R
50|$|SPBV builds {{shortest}} <b>path</b> <b>trees</b> {{that support}} Loop Prevention and optionally support loop mitigation on the SPVID. SPBV still allows learning of Ethernet MAC addresses {{but it can}} distribute multicast address {{that can be used}} to prune the shortest <b>path</b> <b>trees</b> according to the multicast membership either through Multiple MAC Registration Protocol (MMRP) or directly using IS-IS distribution of multicast membership.|$|R
40|$|In this paper, {{we present}} a {{localized}} Shortest <b>Path</b> <b>Tree</b> (SPT) based algorithm for constructing a sub-network with the minimum-energy property for a given wireless ad hoc network. Each mobile node determines its own transmission power based only on its local information. The proposed algorithm constructs local shortest <b>path</b> <b>trees</b> from the unit disk graph. The performance improvements of our algorithm are demonstrated through simulations...|$|R
50|$|In graphs {{for which}} all edges weights equal one, {{shortest}} <b>path</b> <b>trees</b> coincide with breadth-first search trees.|$|R
