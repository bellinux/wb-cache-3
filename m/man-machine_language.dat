6|7|Public
50|$|A <b>man-machine</b> <b>language</b> or MML is a {{specification}} language. MML {{typically are}} defined to standardize the interfaces for managing a telecommunications or network device from a console.|$|E
50|$|TL1 was {{developed}} by Bellcore in 1984 as a standard <b>man-machine</b> <b>language</b> to manage network elements for the Regional Bell Operating Companies (RBOCs). It is based on Z.300 series man machine language standards. TL1 {{was designed as a}} standard protocol readable by machines as well as humans to replace the diverse ASCII based protocols used by different Network Element (NE) vendors. It is extensible to incorporate vendor specific commands.|$|E
50|$|Transaction Language 1 (TL1) is {{a widely}} used {{management}} protocol in telecommunications. It is a cross-vendor, cross-technology <b>man-machine</b> <b>language,</b> and is widely used to manage optical (SONET) and broadband access infrastructure in North America. TL1 {{is used in the}} input and output messages that pass between Operations Support Systems (OSSs) and Network Elements (NEs). Operations domains such as surveillance, memory administration, and access and testing define and use TL1 messages to accomplish specific functions between the OS and the NE. TL1 is defined in Telcordia Technologies (formerly Bellcore) Generic Requirements document GR-831-CORE.|$|E
50|$|Since 2001, one of {{the main}} {{development}} direction in Ashmanov & Partners is artificial intelligence — creating a <b>man-machine</b> natural <b>language</b> interaction system. In 2005, this department was separated out into a new business entity, Nanosemantics, co-owned by Ashmanov & Partners and Natalya Kaspersky's InfoWatch. In 2009, the company launched iii.ru on-line service where users could create chat bots (infs) and virtual consultants. By 2013, iii.ru users created over 2 mln chat bots, and Nanosemantics became profitable in the B2B market.|$|R
5000|$|His {{research}} interests are in speech recognition, speech synthesis, speech interfaces and language in general. According to Hauptmann (2008) [...] "Over the years his {{research interests}} have {{led him to}} pursue and combine several different areas of research: <b>man-machine</b> communication, natural <b>language</b> processing and speech understanding".|$|R
40|$|In human dialog a {{wide variety}} of {{acknowledgments}} are used. One function of this seems to be indicating attention, interest, and involvement to the other speaker. Based on study of Japanese memory game dialogs, we propose an algorithm for choosing among acknowledgment responses, including hai (yes), so (right), and un (mm). The primary factors involved are aspects of the user's internal state, including confidence and liveliness, as inferred from the context and the user's prosody. We found that judges preferred algorithm-chosen responses to randomly varied responses, confirming our hypothesis that `sensitive' and subtle choice of response may improve helpfulness and naturalness of <b>man-machine</b> spoken <b>language</b> interaction. ...|$|R
40|$|INTRODUCTION TO THE CCITT <b>MAN-MACHINE</b> <b>LANGUAGE</b> 1 Field of {{application}} The <b>man-machine</b> <b>language</b> (CCITT MML) {{can be used}} to facilitate operation and maintenance functions of Stored Program Control SPC systems of different types. Depending upon national requirements, CCITT MML {{can also be used to}} facilitate installation and acceptance testing of such systems. In many cases, SPC systems will be supported by auxiliary systems, e. g., in operation and maintenance centres and/or centres for other purposes such as sales, subscribers' complaints, etc., to carry out functions in cooperation with the SPC system. Different types of communication may be required for this cooperation. To clarify where the CCITT MML is intended to be used, a configuration is shown in Figure 1 /Z. 301 which illustrates the case of three separate systems. Local and remote man-machine terminals may be used. The configuration of systems in a network may vary, but this does not alter the principles governing th...|$|E
40|$|PROGRAMMING LANGUAGES CHILL: The ITU-T {{high level}} {{language}} Z. 200 –Z. 209 <b>MAN-MACHINE</b> <b>LANGUAGE</b> General principles Z. 300 –Z. 309 Basic syntax and dialogue procedures Z. 310 –Z. 319 Extended MML for visual display terminals Z. 320 –Z. 329 Specification of the man-machine interface Z. 330 –Z. 349 Data-oriented human-machine interfaces Z. 350 –Z. 359 Human-computer interfaces {{for the management}} of telecommunications networks Z. 360 –Z. 369 QUALITY Quality of telecommunication software Z. 400 –Z. 409 Quality aspects of protocol-related Recommendations Z. 450 –Z. 459 METHODS Methods for validation and testing Z. 500 –Z. 519 MIDDLEWARE Distributed processing environment Z. 600 –Z. 609 For further details, please refer to the list of ITU-T Recommendations...|$|E
40|$|Introduction This Recommendation {{identifies}} the maintenance functions {{to be controlled}} by means of the CCITT-MML. The CCITT-MML (<b>man-machine</b> <b>language)</b> is intended to handle the functions required to manage telecommunication systems, e. g. via a telecommunication management network (TMN) (see Recommendation M. 30). The man-machine interface (MMI) enables the exchange of information between users and systems encoded in MML. Interaction between the users and the controlled systems is based on a repertoire of inputs, outputs, special actions and man-machine interaction mechanisms, including dialogue procedures. This Recommendation deals with the specification and control of maintenance functions. The tests appropriate to particular maintenance functions remain as described in the relevant M-series Recommendations. When defining MML-functions the tasks which need to be performed (jobs) are first identified, in order to derive system functions to be controlled. The relationship betwee...|$|E
40|$|This paper {{presents}} a simple method of mutual translation between Japanese sentences and Horn clauses, {{which has been}} implemented in our analogical reasoning system as a <b>man-machine</b> interface. Natural <b>language</b> interface systems generally need complicated semantic processing using a large dictionary. However, such processing is not suitable for our interface system because the interface overhead becomes too large {{in comparison with the}} main reasoning processing and the vocabulary is limited by the dictionary. From this viewpoint, we adopt a textual processing. Our system does not have a large dictionary, but instead we put some restrictions on sentences inputted to the system; for example, each sentence should be separated into words by spaces and be expressed uniformly. We also present inethods which keep input Japanese sentences natural and which remove ambiguities by the interaction between users and the system...|$|R
40|$|Abstract: Modeling, {{especially}} domain-specific modeling has growing {{importance in}} many fields of software enginering, such as modeling control flows of data processing {{for example in}} <b>man-machine</b> systems. Customizable <b>language</b> dictionary and customizable notations of the model elements offered by domain-specific technologies makes software systems easier to create and maintain. Visual model definitions {{have a tendency to}} be incomplete, or imprecise, thus, the definitions are often extended by textual constraints attached to the model items. Textual constraints can also eliminate the incompleteness stemming from the limitations of the visual definitions. Object Constraint Language (OCL) {{is one of the most}} popular constraint languages in the field of Domain Specific Modeling Languages. OCL is a flexible, yet formal language with mathematical background. OCL has been formalized using set theory. Our research focuses on creating an OCL optimization solution, but the existing formalism is hard to use in the field of dynamic, constraint manipulating algorithms. The paper presents OCLASM, a new formalism for OCL based on the Abstract State Machines technique. Keywords: Domain-specific modeling, OCL, constraints, Abstract State Machines...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedA research project in natural <b>language</b> <b>man-machine</b> communication {{is currently being}} conducted at the Naval Postgraduate School. The system being developed, called NLPQ, is an application of a more general system, known as NLP, which consists of a rule language and the programs to compile and execute those rules. NLPQ currently consists of particular sets of NLP rules which allow a user at a time- sharing terminal to input an English text description of a queuing problem, have the computer construct an internal problem representation, and then have it produce an English text description {{of the problem and}} a GPSS simulation program to solve the problem. The research described in this thesis produced the INTERROGATOR, a set of NLP rules for inspecting the internal problem representation to insure that it is ready to produce a GPSS program. The INTERROGATOR produces questions about missing or erroneous information, which the user may then respond to in English. It may also be used in a question-answer mode to input the entire problem. [URL] United States Marine Corp...|$|R
40|$|Domain-specific {{modeling}} has growing {{importance in}} many fields of softwareenginering, such as modeling control flows of data processing, or in <b>man-machine</b> systems. Customizable <b>language</b> dictionary and customizable notations {{of the model}} elementsoffered by domain-specific technologies make software systems easier to create andmaintain. However, visual model definitions {{have a tendency to}} be incomplete, orimprecise; the definitions can be extended by textual constraints attached to the modelitems. Textual constraints can eliminate the incompleteness stemming from the limitationsof the structural definition as well. The Object Constraint Language (OCL) is one of themost popular constraint languages in the field of UML and Domain Specific ModelingLanguages. OCL is a flexible, yet formal language with a mathematical background. Existing formalisms of OCL does not describe dynamic behavior of constraints. Ourresearch aims at creating an OCL optimization solution and prove its correctness formally. However, the shortcomings of the existing formalism has led us to create a new formalism. The paper presents OCLASM, a new formalism for OCL, which can describe both thesemantics and the dynamical behavior of the language constructs, thus, it is capable ofdescribing proofs of optimization algortihms. OCLASM is based on the Abstract StateMachines technique...|$|R

