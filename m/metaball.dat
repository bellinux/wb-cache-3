24|52|Public
5000|$|... #Caption: The Find Dialog {{displaying}} <b>metaball</b> outlines around {{search results}} ...|$|E
5000|$|A typical {{function}} {{chosen for}} metaballs is , where [...] {{is the center}} of the <b>metaball.</b> However, due to the division, it is computationally expensive. For this reason, approximate polynomial functions are typically used.|$|E
50|$|Find Dialog - The search {{function}} lists both exact and similar matches. The Find dialog provides both textual and spatial feedback regarding the search hits. Objects are highlighted {{on the canvas}} by a <b>Metaball</b> outline and arrows on the dialog point towards {{the location of the}} search results.|$|E
50|$|<b>Metaballs</b> are, in {{computer}} graphics, organic-looking n-dimensional objects. The technique for rendering <b>metaballs</b> {{was invented by}} Jim Blinn in the early 1980s.|$|R
5000|$|... #Caption: The {{interaction}} between two differently coloured 3D positive <b>metaballs,</b> created in Bryce.Note {{that the two}} smaller <b>metaballs</b> combine to create one larger object.|$|R
40|$|<b>Metaballs</b> are {{implicit}} surfaces {{widely used}} to model curved objects, {{represented by the}} isosurface of a density field defined {{by a set of}} points. Recently, the results of particle-based simulations have been often visualized using a large number of <b>metaballs,</b> however, such visualizations have high rendering costs. In this paper we propose a fast technique for rendering <b>metaballs</b> on the GPU. Instead of using polygonization, the isosurface is directly evaluated in a per-pixel manner. For such evaluation, all <b>metaballs</b> contributing to the isosurface need to be extracted along each viewing ray, on the limited memory of GPUs. We handle this by keeping a list of <b>metaballs</b> contributing to the isosurface and efficiently update it. Our method neither requires expensive precomputation nor acceleration data structures often used in existing ray tracing techniques. With several optimizations, we can display a large number of moving <b>metaballs</b> quickly...|$|R
5000|$|Each <b>metaball</b> {{is defined}} as a {{function}} in n-dimensions (e.g., for three dimensions, three-dimensional metaballs tend to be most common, with two-dimensional implementations popular as well). A thresholding value is also chosen, to define a solid volume. Then,represents whether the volume enclosed by the surface defined by [...] metaballs is filled at [...] or not.|$|E
5000|$|Finite support. A {{function}} with finite support goes to zero at a maximum radius. When evaluating the <b>metaball</b> field, any points beyond their maximum radius {{from the sample}} point can be ignored. A hierarchical culling system can thus ensure only the closest metaballs {{will need to be}} evaluated regardless of the total number in the field.|$|E
5000|$|The term 'blob {{architect}}ure' {{was coined}} by architect Greg Lynn in 1995 in his experiments in digital design with <b>metaball</b> graphical software. Soon {{a range of}} architects and furniture designers began to experiment with this [...] "blobby" [...] software to create new and unusual forms. Despite its seeming organicism, blob architecture is unthinkable without this and other similar computer-aided design programs. Architects derive the forms by manipulating the algorithms of the computer modeling platform. Some other computer aided design functions involved in developing this are the nonuniform rational B-spline or NURB, freeform surfaces, and the digitizing of sculpted forms by means akin to computed tomography.|$|E
50|$|There are {{a number}} of ways to render the <b>metaballs</b> to the screen. In the case of three {{dimensional}} <b>metaballs,</b> the two most common are brute force raycasting and the marching cubes algorithm.|$|R
40|$|International audienceRaytracing <b>metaballs</b> is {{a problem}} that has {{numerous}} applications in the rendering of dynamic soft objects such as fluids. However, current techniques are either limited in the visual effects that they can render or their performance drops as the number of <b>metaballs</b> and their density increase. We present a new acceleration structure based on BVH and kd-tree for efficient raytracing {{of a large number of}} <b>metaballs.</b> This structure is built from an adapted SAH using a fast greedy algorithm and allows the visualization of several hundreds of thousands <b>metaballs</b> at interactive-to-real-time framerates. Our method can handle arbitrary rays to simulate any complex secondary effects such as reflections or soft shadows, and is robust with respect to the density of <b>metaballs.</b> We achieve this performance thanks to a balanced CPU-GPU (using CUDA) implementation of the animation, structure creation, and rendering...|$|R
40|$|Molecular {{dynamics}} simulations {{are today}} a widely used tool in many research fields. Such simulations produce large time-dependent data sets, which {{need to be}} interactively visualised allowing efficient exploration. On the other hand, commonly used point-based rendering of the individual particles usually fails to emphasise global contiguous structures like particle clusters. To solve this issue, we want to visualise these data sets using <b>metaballs.</b> Free particles form individual spheres while clustered particles result in larger closed shapes. Using image-space hardware-accelerated techniques provides interactive frame rates and high visual quality. We present two approaches evaluating the <b>metaballs</b> shapes on the graphics hardware. The first approach uses a vicinity data structure stored in graphics memory to evaluate the <b>metaballs</b> shape in a single rendering pass. The second approach uses multiple rendering passes to approximate the <b>metaballs</b> shape on a per pixel basis. ...|$|R
50|$|For {{cross-platform}} games, mods {{written for}} the Windows version {{have not always been}} compatible with the Mac OS X and/or Linux ports of the game. In large part, {{this is due to the}} publisher's concern with prioritizing the porting of the primary game itself, when allocating resources for fixing the porting of mod-specific functions may not be cost-effective for the smaller market share of alternate platforms. For example, Battlefield 1942, ported by Aspyr for Mac OS X, had file access issues specific to mods until the 1.61D patch. Unreal Tournament 2004 does not have a working community mods menu for the Mac OS X version and, until the 3369 patch, had graphics incompatibilities with several mods such as Red Orchestra and <b>Metaball.</b>|$|E
40|$|In {{the current}} era of rapid {{development}} technology, utiliza- tion of computer graphics is very important. It is needed mostly for visualization, used for visualize the objects {{that exist in}} the real world into graphic objects. Focussing on <b>metaball</b> object, there are many methods or techniques {{that can be used for}} rendering <b>metaball,</b> with advantages and dis- advantages of each method. Among many techniques for the process, here is presented the very good technique to gener- ate 3 D <b>metaball</b> objects with high resolution image. Only the Marching Cubes algorithm technique which can produce high resolution on a <b>metaball</b> object. This paper provides an explanation of how the Marching Cubes algorithm can be applied in <b>metaball</b> objects and produce high resolution 3 D objec...|$|E
40|$|The goal of {{this project}} is to design a <b>metaball</b> {{graphics}} package for use in visualization of large object oriented software. In this technique, a <b>metaball</b> is used to represent a software entity {{and the relationship between}} these software entities. Appearance attributes such as size, color and texture are used to denote properties of the software entity. The software has been designed as a Java package with a well defined API to create metaballs of different radius, color and texture. This <b>metaball</b> API package can be seen {{as an extension of the}} Java 3 D API. The implementation is based on Java language with J 2 SDK 1. 4 and JAVA 3 D 1. 3. Hence the <b>metaball</b> API package can be used on any popular platform. This report first introduces the scope of the project and then covers state of the art in software visualization, followed by a detailed description of the <b>metaball</b> technique. Then an overview of Java 3 D is provided, followed by design and implementation detail of the <b>metaball</b> package. Finally application to software visualization id discussed briefly and conclusion. The source code of the <b>metaball</b> API implementation is also enclosed in an electronic format...|$|E
5000|$|Blobby <b>metaballs</b> {{for things}} like water or mercury, {{including}} reflection or refraction surface settings ...|$|R
5000|$|Modeling - All {{standard}} geometry entities including Polygons, (Hierarchical) NURBs/BÃ©zier Curves/Patches & Trims, <b>Metaballs</b> ...|$|R
40|$|This paper proposes an {{image-based}} {{modeling of}} clouds where realistic clouds are created from satellite images using <b>metaballs.</b> The {{intention of the}} paper is for applications to space flight simulators, the visualization of the weather information, and the simulation of surveys of the earth. In the proposed method, the density distribution inside the clouds is defined {{by a set of}} <b>metaballs.</b> Parameters of <b>metaballs,</b> such as center positions, radii, and density values, are automatically determined so that a synthesized image of clouds modeled by using <b>metaballs</b> is similar to the original satellite image. We also propose an animation method for clouds generated by a sequence of satellite images taken at some interval. The usefulness of the proposed method is demonstrated by several examples of clouds generated from satellite images of typhoons passing through Japan. 1. Introduction Recently, simulation of natural phenomena, such as water, smokes, fire, clouds, have been attempted in com [...] ...|$|R
40|$|Till {{now there}} are many {{rendering}} models for water and other fluids and their dynamics. Especially in order to generate the curved surface of flexible objects such as water, jelly, and snow, the implicit <b>metaball</b> formulation is widely used in favor of its simplicity and flexibility. This paper proposes one novel method for generating water droplets, which would be deformed in a gravitation field. In previous works, a water droplet was simply represented by approximated curved surfaces of a symmetric and quite a simple <b>metaball.</b> So the finally rendered water droplet was far from a realistic droplet, {{because they did not}} consider the gravitation force in droplets attached on a surface. We give a new generalized <b>metaball</b> model for rendering water droplets placed on an arbitrary surface considering the gravitation and friction between droplets and the plate. Our new <b>metaball</b> model uses a new vector field isosurface function controlling the basic scalar <b>metaball,</b> with respect to the norm of gravitation force. In several experiments, we could render a photo-realistic water droplets with natural-looking shadows by applying ray-tracing techniques...|$|E
40|$|Maintaining a {{triangle}} mesh on a changing implicit surface provides an amortized method for e#ciently polygonizing an implicit surface animation. Such maintenance requires {{special attention to}} the triangular mesh, including mesh reconnection when the implicit surface changes topological type, and optimization to ensure the triangles are well shaped. For added e#ciency, piecewise polynomial metaballs are often used, but introduce special problems in #nding the critical points necessary to determine topological type. There are numerous details important to implementing such techniques on piecewise polynomial metaballs. Two new <b>metaball</b> kernels are compared with an existing kernel for #nding and classifying critical points. Interval versions of <b>metaball</b> kernels and their derivatives are derived to ease implementation. A simpli#ed technique for searching for critical points is given, along with modi#- cations that cause the searchtoavoid regions of degenerate critical points surroun [...] ...|$|E
40|$|Space {{deformation}} is {{an important}} tool in computer animation and shape design. In this paper we present a new local deformation model based on generalized metaballs. The user speci"es a series of constraints, which can consist of points, lines, surfaces and volumes, their e!ective radii and maximum displacements, and the deformation model creates a generalized <b>metaball</b> for each constraint. Each generalized <b>metaball</b> {{is associated with a}} potential function centered on the constraint. The value of the potential function drops from 1 on the constraint to 0 on the boundary de"ned by the e!ective radius. This deformation model operates on the local space and is independent of the underlying representation of the object to be deformed. The deformation can be "nely controlled by adjusting the parameters of the generalized metaballs. We also present some extensions and the extended deformation model to include scale and rotation constraints. Experiments show that this deformation model is e$cient and intuitive. It can deal with various constraints, which is di$cult for traditional deformation models. # 2000 Elsevier Science Ltd. All rights reserved...|$|E
50|$|A simple {{generalization}} of <b>metaballs</b> {{is to apply}} the falloff curve to distance-from-lines or distance-from-surfaces.|$|R
5000|$|... 2D <b>metaballs</b> were a {{very common}} demo effect in the 1990s. The effect is also {{available}} as an XScreensaver module.|$|R
40|$|Displaying {{objects with}} high {{accuracy}} {{is important in}} CAGD and for the synthesis of photo-realistic images. The representation of free-form surfaces can be classified into two: parametric surfaces such as Bezier patches, and implicit surfaces like <b>metaballs.</b> We discuss display methods for both Bezier patches and <b>metaballs</b> by using Bezier Clipping. Traditionally, polygonal approximation methods have been employed to display parametric surfaces. This paper introduces various display methods for Bezier patches without polygonal approximation. Bezier Clipping can be also applied to the following: 1) curve/curve intersection, 2) curve/surface intersection, 3) scan conversion of curved regions such as outline fonts, 4) various lighting simulations such as curved light sources and radiosity method. In order to show the effectiveness of Bezier Clipping widely by using the Internet, we have coded some of them(e.,g.,curve/curve intersection, <b>metaballs)</b> in Java language. The Bezier Clipping is ve [...] ...|$|R
40|$|This paper {{considers}} {{the problem of}} liquid flow simulated in a tube using a simplified graphics model capable of fast rendering. A liquid model is represented {{by a set of}} particles whose position, speed and acceleration are derived from Navier-Stockes equations. The equations are solved by explicit numerical integration in discrete time steps. Finally, each particle used in the model is represented by a sphere or a <b>metaball</b> for smooth visualization of liquid surfaces. 1...|$|E
40|$|We propose an {{efficient}} framework for dynamic cloud rendering. Base {{on the proposed}} simplified lighting model, the Shadow Relation Table (SRT) and <b>Metaball</b> Lighting Texture Database (MLTDB) are constructed in the preprocessing, and features such as selfshadowing and light scattering can be computed quickly using table lookup at the run time. Clouds are rendered using textured billboards and alpha blending, which is further speeded up by incorporating the octree hierarchy and the hierarchical texture caching. Key words: cloud simulation, dynamic clouds rendering, cellular automata...|$|E
40|$|Modern weather {{prediction}} models create new challenges but also offer new possibilities for weather visualization. Since weather model data has a complex three-dimensional structure and various abstract parameters it cannot be presented {{directly to a}} lay audience. Nevertheless, visualizations of weather data are needed daily for weather presentations. One important visual clue for the perception of weather is given by clouds. After a discussion of weather data and its specific demands on a graphical visualization we present an approach to visualizing clouds {{by means of a}} particle system that consists of soft balls, so-called metaballs (Dobashi et al. 2000). Particular attention is given to the special requirements of large-scale cloud visualizations. Since weather forecast data typically lacks specific information on the small-scale structure of clouds we explain how to interprete weather data in order to extract information on their appearance, thereby obtaining five visual cloud classes. Based on this cloud extraction and classification, modeling techniques for each visual cloud class are developed. For the actual rendering we extend and adapt the <b>metaball</b> approach by introducing flattened particles and derived <b>metaball</b> textures. As shown by our implementation our approach yields a large-scale, realistic, 3 D cloud visualization that supports cloud fly-throughs...|$|E
5000|$|Yoda scene (lower left; bitmap import, metaballics): 3.446 {{vertices}} and 13.336 rods; the vertices form <b>metaballs</b> with {{colour information}} from {{a photograph of a}} clay model.|$|R
40|$|International audienceMetaballs [Bloomenthal 1997] are {{effective}} to represent fluids and similar complex and deformable geometries, but their implicit nature makes difficult their visualization in real time. A common {{strategy is to}} tessellate the resulting isosurface and to render it on GPU, but it scales poorly {{as the number of}} <b>metaballs</b> increases. Kanamori et al. [2008] efficiently raycast thousands of <b>metaballs</b> without intermediate representations. Their method assumes that rays are shot from a single viewpoint, thus preventing secondary effects (no shadows, reflections, etc.), and is limited to polynomial density functions. We propose to exploit the culling capacity of dynamic bounding volume hierarchies (BVH) [Wald 2007], the secant method for ray-surface intersection, and CPU-GPU parallelism to alleviate the restrictions of their method. This results in a general raytracing method, allowing arbitrary ray intersection (visibility, shadow, reflection, refraction, etc.) with <b>metaballs</b> of any finite-support at interactive performances...|$|R
50|$|Capabilities of the {{software}} include creating visualizations and animations with realistic lighting (through the use of radiosity, HDRI and Global Illumination) and organic modelling using NURBS, subdivision surfaces and <b>metaballs.</b>|$|R
40|$|A cloth {{simulation}} {{system must}} generate {{a human body}} model based on measured data obtained from range data. We propose modeling and deformation methods based on such data. In our system, {{the human body is}} modeled by layered metaballs which correspond to the horizontal cross section of the body. For each cross section, metaballs are generated by measured sample points on the boundary of the cross section. In order to fit the <b>metaball</b> surface with the sampling points, we employed the Steepest Descent method. For body deformation, the sampling points on the cross section are smoothly moved using Bezier curves. To show the effectiveness of the proposed method, we demonstrate fitting and deformation, the two human body models to be used for the cloth simulation. 1...|$|E
40|$|In this physically-based tornado simulation, the tornado-scale {{approach}} {{techniques are}} applied to simulate the tornado formation environment. The three-dimensional Navier-Stokes equations for incompressible viscous fluid flows are used to model the tornado dynamics. The boundary conditions applied in this simulation lead to rotating and uplifting flow movement as found in real tornadoes and tornado research literatures. Moreover, a particle system is incorporated with the model equation solutions to model the irregular tornado shapes. Also, together with appropriate boundary conditions, varied particle control schemes produce tornadoes with different shapes. Furthermore, a modified <b>metaball</b> scheme is used to smooth the density distribution. Texture mapping, antialising, animation and volume rendering {{are applied to}} produce realistic visual results. The rendering algorithm is implemented in OpenGL...|$|E
40|$|We {{investigate}} the CW-complex as a data structure for visualizing and controlling the topology of implicit surfaces. Previous methods for contolling the blending of implicit surfaces redefined {{the contribution of}} a <b>metaball</b> or unioned blended components. Morse theory provides new insight into the topology of the surface a function implicitly defines by studying the critical points of the function. These critical points are organized by a separatrix structure into a CW-complex. This CW-complex forms a topological skeleton of the object, indicating connectedness {{and the possibility of}} connectedness at various locations in the surface model. Definitions, algorithms and applications for the CW-complex of an implicit surface and the solid it bounds are given as a preliminary step toward direct control of the topology of an implicit surface. 1 Introduction The holy grail of implicit surface modeling research is the control of blending. Most implicit surface primitives blend based on nothin [...] ...|$|E
5000|$|... 8K Reality (pouÃ«t.net) by Fulcrum - a remix done in 8 {{kilobytes}} of executable PC code. Released at Revision 2015 demoparty {{where it}} was ranked second. The two-dimension drawings were modelled using <b>metaballs.</b>|$|R
5000|$|Support for {{a variety}} of {{geometric}} primitives, including polygon meshes, fast subdivision surface modeling, Bezier curves, NURBS surfaces, <b>metaballs,</b> icospheres, multi-res digital sculpting (including dynamic topology, maps baking, remeshing, resymetrize, decimation), outline font, and a new n-gon modeling system called B-mesh.|$|R
50|$|In 2000 Bryce was {{purchased}} by Corel Corporation. Corel released version 5 of Bryce in 2001, which included several new features, like Tree Lab and <b>metaballs.</b> Soon followed a patch to version 5.01, which fixed some bugs and added a few undocumented features.|$|R
