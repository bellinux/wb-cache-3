187|1753|Public
25|$|The {{internet}} {{layer is}} not only agnostic of data structures at the transport layer, but it also does not distinguish between operation of the various transport layer protocols. IP carries data {{for a variety of}} different upper layer protocols. These protocols are each identified by a unique protocol number: for example, Internet Control <b>Message</b> <b>Protocol</b> (ICMP) and Internet Group Management Protocol (IGMP) are protocols 1 and 2, respectively.|$|E
2500|$|The Internet {{protocol}} suite does not presume any specific hardware or software environment. [...] It only requires that hardware and a software layer exists that {{is capable of}} sending and receiving packets on a computer network. As a result, the suite has been implemented on essentially every computing platform. A minimal implementation of TCP/IP includes the following: Internet Protocol (IP), Address Resolution Protocol (ARP), Internet Control <b>Message</b> <b>Protocol</b> (ICMP), Transmission Control Protocol (TCP), User Datagram Protocol (UDP), and Internet Group Management Protocol (IGMP). In addition to IP, ICMP, TCP, UDP, Internet Protocol version 6 requires Neighbor Discovery Protocol (NDP), ICMPv6, and IGMPv6 and is often accompanied by an integrated IPSec security layer.|$|E
5000|$|... #Subtitle level 3: Internet Control <b>Message</b> <b>Protocol</b> (ICMP) flood ...|$|E
5000|$|Alternative {{protocols}} {{include the}} [...] Advanced <b>Message</b> Queuing <b>Protocol</b> (AMQP), [...] Streaming Text Oriented <b>Messaging</b> <b>Protocol</b> (STOMP) the IETF Constrained Application Protocol, [...] XMPP and Web Application <b>Messaging</b> <b>Protocol</b> (WAMP).|$|R
5000|$|Advanced <b>Message</b> Queuing <b>Protocol</b> (AMQP) - feature-rich <b>message</b> queue <b>protocol</b> ...|$|R
30|$|An {{open source}} MQB (Message Queue Broker) that fully {{implements}} the Java Message Service 1.1 (JMS) [44], Apache ActiveMQ [45]: {{it has been}} used to forward the data of the patients to the CMUs. For the communication of the PyMHealth application with this broker the <b>messaging</b> <b>protocol</b> STOMP (Streaming Text Orientated <b>Messaging</b> <b>Protocol)</b> [46] has been chosen.|$|R
5000|$|ICMP (Internet Control <b>Message</b> <b>Protocol)</b> {{for network}} {{maintenance}} and debugging ...|$|E
5000|$|Streaming Text Oriented Messaging Protocol (STOMP) - simple, text-oriented <b>message</b> <b>protocol</b> ...|$|E
5000|$|RFC 792, Internet Control <b>Message</b> <b>Protocol</b> (ICMP), J. Postel, September 1981 ...|$|E
50|$|In {{computer}} programming, {{a message}} broker is an intermediary program module that translates {{a message from}} the formal <b>messaging</b> <b>protocol</b> of the sender to the formal <b>messaging</b> <b>protocol</b> of the receiver. Message brokers are elements in telecommunication or computer networks where software applications communicate by exchanging formally-defined messages. Message brokers are a building block of message-oriented middleware.|$|R
5000|$|Gateways for AMQP, HTTP, Streaming Text Oriented <b>Messaging</b> <b>Protocol</b> (STOMP), and MQTT {{protocols}} ...|$|R
5000|$|SIMPLE (instant <b>messaging</b> <b>protocol)</b> (Session Initiation <b>Protocol</b> for Instant <b>Messaging</b> and Presence Leveraging Extensions) ...|$|R
50|$|Internet Control <b>Message</b> <b>Protocol</b> version 6 (ICMPv6) is the {{implementation}} of the Internet Control <b>Message</b> <b>Protocol</b> (ICMP) for Internet Protocol version 6 (IPv6). ICMPv6 is defined in RFC 4443. ICMPv6 {{is an integral part of}} IPv6 and performs error reporting and diagnostic functions (e.g., ping), and has a framework for extensions to implement future changes.|$|E
5000|$|ICMPv4 and ICMPv6, Internet Control <b>Message</b> <b>Protocol</b> version 4 and version 6 ...|$|E
50|$|The MegaMeeting.com {{services}} {{utilize the}} Real Time Messaging Protocol (RTMP) over port 1935, {{as well as}} the Real Time <b>Message</b> <b>Protocol</b> (RTMPT) over port 80 (tunneling via http) and the Real Time <b>Message</b> <b>Protocol</b> Secured (RTMPTS) over port 443 (tunneling via https) to allow audio, video and text chat to securely be transmitted from computer to computer.|$|E
50|$|Research areas: {{cryptographic}} algorithms, <b>message</b> <b>protocols,</b> and coding {{techniques to}} enhance enterprise and mobile applications.|$|R
5000|$|Advanced <b>Message</b> Queuing <b>Protocol</b> (AMQP) [...] - [...] {{standardized}} <b>message</b> queue <b>protocol</b> {{with multiple}} independent implementations ...|$|R
50|$|The <b>messages,</b> <b>protocols,</b> and {{structural}} components of DRDA {{are defined by}} the Distributed Data Management Architecture.|$|R
5000|$|Tests IP channel between {{monitoring}} system and another computer or network device with Internet Control <b>Message</b> <b>Protocol</b> (ICMP) protocol.|$|E
5000|$|Monitor Control Command Set (MCCS), a <b>message</b> <b>protocol</b> for {{controlling}} display parameters such as brightness, contrast, display orientation from the host device ...|$|E
5000|$|New Internet Control <b>Message</b> <b>Protocol</b> for IPv6 (ICMPv6) {{messages}} {{to discover the}} set of home agents and to obtain the prefix of the home link ...|$|E
50|$|The {{following}} is a comparison of instant <b>messaging</b> <b>protocols.</b> It contains basic general information about the protocols.|$|R
50|$|Most recently, Moscaritolo {{designed}} the Silent Circle Instant <b>Messaging</b> <b>Protocol</b> (SCIMP), which utilizes a new Progressive Encryption Technology.|$|R
50|$|VPIM {{defines a}} subset of the Internet {{multimedia}} <b>messaging</b> <b>protocols</b> (MIME) for use between voice processing server platforms.|$|R
5000|$|Assuming {{a message}} that {{complies}} with the Foo Protocol {{and that will be}} sent to the receiving party, this particular <b>message</b> (<b>protocol</b> data unit (PDU)) is: ...|$|E
50|$|IGMP {{messages}} are carried in bare IP packets with IP protocol number 2. There is no transport layer used with IGMP messaging, {{similar to the}} Internet Control <b>Message</b> <b>Protocol.</b>|$|E
50|$|The Silent Circle Instant <b>Message</b> <b>Protocol</b> (SCIMP) was an {{encryption}} {{scheme that}} was developed by Silent Circle. It enabled private conversation over instant message transports such as XMPP (Jabber).|$|E
5000|$|Streaming Text Oriented <b>Messaging</b> <b>Protocol</b> (STOMP), a text-based {{protocol}} {{developed at}} Codehaus; uses the JMS-like semantics of 'destination'.|$|R
5000|$|The {{application}} {{maintained a}} single unified contact list for all user's accounts, attributing contacts to instant <b>messaging</b> <b>protocols</b> by placing protocols' logos {{in front of}} them, although not showing contact's avatars. The application automatically dealt with contacts invitations and approvals. Social features of the messenger included online games, multi-user chat (via Meebo Rooms), currently played track name sharing and support for social networks' <b>messaging</b> <b>protocols.</b> (Albeit Meebo Messenger didn't notify of updates in social networks.) ...|$|R
50|$|The PowerLab <b>messaging</b> <b>protocol</b> is not {{publicly}} available {{and there is}} no public API for traditional programming languages such as C.|$|R
5000|$|The <b>message</b> <b>protocol</b> {{utilizes}} the Elliptic Curve Diffie-Hellman (ECDH) key exchange {{method for}} generating a secret key, this allows for sending messages without needing {{both parties to}} be online.|$|E
50|$|The {{function}} of arping {{is analogous to}} the utility ping for probing the network with the Internet Control <b>Message</b> <b>Protocol</b> (ICMP) at the Internet Layer of the Internet Protocol Suite.|$|E
50|$|Stacheldraht uses {{a number}} of {{different}} denial-of-service (DoS) attacks, including User Datagram Protocol (UDP) flood, Internet Control <b>Message</b> <b>Protocol</b> (ICMP) flood, Transmission Control Protocol (TCP) SYN flood and Smurf attack.|$|E
50|$|Messaging/Streaming - {{supports}} Real Time <b>Messaging</b> <b>Protocol</b> (RTMP) for chat messaging and video/audio streaming, as well as, publish/subscribe {{and data}} push.|$|R
50|$|Fama IM {{is a free}} {{software}} instant messaging client for Linux and Unix that supports {{the use of multiple}} instant <b>messaging</b> <b>protocols.</b>|$|R
40|$|Recently, two <b>message</b> logging <b>protocols</b> {{that are}} neither optimistic nor pessimistic but combine the {{desirable}} {{properties of the}} two classical approaches have been proposed. These protocols, Family Based Logging (FBL) and Manetho, never allow orphans to be created but do not introduce blocking in failure free runs. In a recent paper, we presented the first precise specification of <b>message</b> logging <b>protocols,</b> and argued that the two protocols mentioned above are instances of {{a new class of}} <b>message</b> logging <b>protocols,</b> that we call causal. In the same paper we defined a <b>message</b> logging <b>protocol</b> to be optimal if it is causal and does not send any additional messages over those needed to mask transient link failures. Optimal <b>message</b> <b>protocols</b> do exact a price, however: they piggyback additional information on the application's messages. One parameter of <b>message</b> logging <b>protocols</b> is the number of crash failures f that can occur before one of the processes recovers. The two existing optimal <b>message</b> logging <b>protocols</b> are at opposite ends of the spectrum: FBL can tolerate only one crash at a time while Manetho can tolerate all processes crashing. FBL is a much simpler protocol than Manetho, however, and o...|$|R
