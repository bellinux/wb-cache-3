22|246|Public
5000|$|Checkstyle {{defines a}} set of {{available}} modules, each of which provides rules checking with a configurable level of strictness (<b>mandatory,</b> <b>optional...).</b> Each rule can raise notifications, warnings, and errors. For example, checkstyle can examine: ...|$|E
5000|$|... the each {{viewpoint}} {{content is}} {{defined in terms of}} tuples (a stereotype - relationship - stereotype construct i.e. a triple [...] ) and has <b>mandatory,</b> <b>optional</b> and minimum acceptable content and correspondence rules with respect to other views within the architecture description because this is needed to specify a uniquely addressable path in a metamodel (specifying a stereotype is not sufficient on its own where there are several relationships involving the stereotype). The smallest unit of architecture description that may appear in a TRAK architecture view is therefore the Architecture Description Tuple.|$|E
30|$|Tree constraints: {{relationships}} between a parent feature and its child features (or sub-features). Tree constraints include <b>mandatory,</b> <b>optional,</b> xor (alternative) and or {{relationships between}} parents and sub-features.|$|E
5000|$|... #Subtitle level 3: Multiplicative identity: <b>mandatory</b> vs. <b>optional</b> ...|$|R
5000|$|Change {{standards}} from <b>mandatory</b> to <b>optional</b> or vice versa....|$|R
50|$|Meets all {{requirements}} of the corps/sqn annual <b>mandatory</b> and <b>optional</b> training programs.|$|R
40|$|In this paper, we {{presented}} {{an approach to}} retrieving relevant articles from the biomedical corpus. Our first run considered four kinds of operators as query expansion. The operators are phrase, <b>mandatory,</b> <b>optional</b> and synonym set. The second run lowered the ranking of documents which contained query terms only in their MeSH fields. The results of the official runs were listed. 1...|$|E
30|$|With the {{performed}} experiment {{we observed}} which characteristics of each use case template structure {{impact on the}} SPL use cases’ comprehensibility. Subjects who selected the Step Identifier structure as the best structure, for example, reported {{that it has a}} simple description and an objective, clean, organized, and compact structure. These characteristics make it easy and intuitive to identify whether the use case steps were <b>mandatory,</b> <b>optional,</b> or alternative.|$|E
30|$|Gallina and Guelfi (2007) {{propose a}} Use Case Elicitation Template (UCET) that {{provides}} special fields {{to collect information}} concerning variabilities: a) selection category, which specifies whether the use case is <b>mandatory,</b> <b>optional</b> or alternative; b) a description of variation points, and c) fault variation description, {{used to describe the}} faults strongly related to the variation points. This template was inspired from templates of Bertolino and Gnesi (2003), Cockburn (2000) and Gomaa (2004).|$|E
50|$|NB. The Federal Government of Canada {{requires}} both <b>mandatory</b> and <b>optional</b> {{section for}} immigration purposes.|$|R
5|$|The BSA {{offers a}} wide variety of <b>mandatory</b> and <b>optional</b> {{training}} programs in youth protection, outdoor skills and leadership.|$|R
30|$|Data {{elements}} {{available for}} self-description and expression of one’s personality {{can be further}} subdivided into <b>mandatory</b> and <b>optional</b> data types.|$|R
30|$|The {{incoherence}} problem indicates that, {{during the}} experiment, the subjects did not model {{the domain of}} the framework as expected. In other words, the subjects did not develop the frameworks with the correct domain features and constraints (<b>mandatory,</b> <b>optional,</b> and alternative features). As the ability to model the framework domains depend more on the subject skills than on tool support, incoherence problems could be found in equivalent proportions, approximately 50 %, when the framework was developed either manually or with the support of F 3 T.|$|E
40|$|The models below were {{generated}} automatically to support empirical {{studies on the}} performance and scalability of automated techniques for reasoning on feature models. In each generated model, each type of <b>mandatory,</b> <b>optional,</b> inclusive-OR and exclusive-OR feature was added with equal probability. The branching factor (number of children per parent node) of the feature tree varied from 1 to 6. The cross-tree constraints {{were generated}} as a single Random 3 -CNF formula. More details about these kinds of generated feature models {{can be found in}} the section below about our feature model generator tool...|$|E
40|$|Variability is {{a central}} concept in {{software}} productline engineering. Feature Models are a well accepted technique to model variants and invariants within the automotive industry. Feature models are able to express variability through <b>mandatory,</b> <b>optional,</b> and alternative features of a product. Unfortunately the variability information is localised in the feature models and difficult to transfer to other requirements artefacts (e. g. use cases) to express dependencies between different requirements artefacts of a variant. This paper presents a selfcontained model to explicitly represent the product-line variability in one central model, and further enables the definition of variability in different requirements models...|$|E
25|$|Budgets are {{organised}} as Programmes (British spelling retained {{because it}} is a term of official documents). These are either <b>Mandatory</b> or <b>Optional.</b>|$|R
50|$|CAD layer {{names are}} {{structured}} {{as a series}} of <b>mandatory</b> and <b>optional</b> fixed length fields, composed as a continuous alpha-numerical text string.|$|R
5000|$|Budgets are {{organised}} as Programmes (British spelling retained {{because it}} is a term of official documents). These are either <b>Mandatory</b> or <b>Optional.</b>|$|R
30|$|A feature model {{represents}} the information {{of all possible}} products of an SPL in terms of features and the relationships among them (Benavides et al. 2010). Several feature model languages have been proposed since the introduction of Feature-Oriented Domain Analysis (FODA) by Kang et al. (1990). According to Benavides et al. (2010) the feature models can be grouped into three categories: (i) Basic feature models, offering <b>mandatory,</b> <b>optional,</b> alternative and ‘or’ features, as well as constraints between features like ‘requires’ and ‘excludes’; (ii) Cardinality-based feature models, offering, in addition, UML-like multiplicities for feature selection; and (iii) Extended feature models, where additional information is included in terms of feature attributes.|$|E
40|$|The {{increasing}} {{complexity of}} VLSI circuits and the reduced accessibility of modern packaging and mounting technologies restrict {{the usefulness of}} conventional in-circuit debugging tools, such as in-circuit emulators for microprocessors and microcontrollers. However, this same trend enables {{the development of more}} complex products, which in turn require more powerful debugging tools. These conflicting demands could be met if the standard scan test infrastructures now common in most complex components were able to match the debugging requirements of design verification and prototype validation. This paper analyses the main debug requirements in the design of microprocessor-based applications and the feasibility of their implementation using the <b>mandatory,</b> <b>optional</b> and additional operating modes of the standard IEEE 1149. 1 test infrastructure...|$|E
40|$|During {{the last}} two years, the LATEX 3 project team has been making and {{releasing}} some packages belonging to what they call LATEX 2 ε∗, which {{is a sort of}} intermediate step before LATEX 3. Unlike the previously released l 3 suite of packages [2], which deals mainly with very basic programming structures such as lists and stacks, the LATEX 2 ε ∗ suite of packages are more about producing better results in more concrete areas of LATEX. Examples include the xor package, which is a new and much more versatile output routine, and the xparse package, using which one can easily define commands with complicated mixtures of <b>mandatory,</b> <b>optional,</b> and *-type arguments. The elegant interfaces and functionality of these packages promise well for the future...|$|E
5000|$|Joe Kosmo Award for Excellence: Awarded to {{the team}} that scores the most points in both the <b>mandatory</b> and <b>optional</b> {{competition}} events.|$|R
25|$|Group Policy Preferences {{are a way}} for the {{administrator}} to set policies that are not <b>mandatory,</b> but <b>optional</b> for the user or computer.|$|R
5000|$|ISO/IEC 9075-2:2016 Part 2: Foundation (SQL/Foundation). It {{contains}} the most central {{elements of the}} language and consists of both <b>mandatory</b> and <b>optional</b> features.|$|R
40|$|Abstract — The {{most common}} {{correctness}} requirement for a (business) workflow is the completion requirement, imposing that, in some form, every case-instance of the workflow reaches its final state. In this paper, we define three workflow completion patterns, called the <b>mandatory,</b> <b>optional</b> and possible completion. These patterns are formalized {{in terms of}} the temporal logic CTL ∗, to remove ambiguities, allow for easy comparison, and have direct applicability. In contrast to the existing methods, we do not look at the control flow in isolation but include some data information as well. In this way the analysis remains tractable but gains precision. Together with our previous work on dataflow (anti-) patterns, this paper is a significant step towards a unifying framework for complete workflow verification, using the well-developed, stable, adaptable, and effective modelchecking approach. I...|$|E
40|$|International audienceFeature {{models are}} widely used to encode the {{configurations}} of a software product line in terms of <b>mandatory,</b> <b>optional</b> and exclusive features as well as propositional constraints over the features. Numerous computationally expensive procedures {{have been developed to}} model check, test, configure, debug, or compute relevant information of feature models. In this paper we explore the possible improvement of relying on the enumeration of all configurations when performing automated analysis operations. The key idea is to pre-compile configurations so that reasoning operations (queries and transformations) can then be performed in polytime. We tackle the challenge of how to scale the existing enu-meration techniques. We show that the use of distributed computing techniques might offer practical solutions to previously unsolvable problems and opens new perspectives for the automated analysis of software product lines...|$|E
40|$|Feature {{models are}} widely used to encode the {{configurations}} of a software product line in terms of <b>mandatory,</b> <b>optional</b> and exclusive features as well as propositional constraints over the features. Numerous computationally expensive procedures {{have been developed to}} model check, test, configure, debug, or compute relevant information of feature models. In this paper we explore the possible improvement of relying on the enumeration of all configurations when performing automated analysis operations. We tackle the challenge of how to scale the existing enumeration techniques by relying on distributed computing. We show that the use of distributed computing techniques might offer practical solutions to previously unsolvable problems and opens new perspectives for the automated analysis of software product lines. Junta de Andalucía P 12 -TIC- 1867 Ministerio de Economía y Competitividad TIN 2015 - 70560 -...|$|E
50|$|There are 21 {{offices in}} a government, {{whether it is}} municipal, city or provincial. There are some <b>mandatory</b> and <b>optional</b> offices to the government.|$|R
50|$|This is a table {{comparing}} microarchitectures which {{implement the}} ARMv7-A (A means Application) instruction set architecture and <b>mandatory</b> or <b>optional</b> extensions of it, the last AArch32.|$|R
50|$|One {{week after}} the test sessions, IndyCar {{officials}} announced revised regulations for the aero kits. The domed skid plates were made <b>mandatory,</b> and <b>optional</b> underwing sidewalls were extended.|$|R
40|$|The {{most common}} {{correctness}} requirement for a (business) workflow is the completion requirement, imposing that, in some form, every case-instance of the workflow reaches its final state. In this paper, we define three workflow completion patterns, called the <b>mandatory,</b> <b>optional</b> and possible completion. These patterns are formalized {{in terms of}} the temporal logic CTL*, to remove ambiguities, allow for easy comparison, and have direct applicability. In contrast to the existing methods, we do not look at the control flow in isolation but include some data information as well. In this way the analysis remains tractable but gains precision. Together with our previous work on data-flow (anti-) patterns, this paper is a significant step towards a unifying framework for complete workflow verification, using the well-developed, stable, adaptable, and effective model-checking approach...|$|E
40|$|Feature {{modeling}} is {{a common}} way to present and manage variability of software and systems. As a prerequisite for effective variability management is comprehensible representation, the main aim {{of this paper is}} to investigate difficulties in understanding feature models. In particular, we focus on the comprehensibility of feature models as expressed in Common Variability Language (CVL), which was recommended for adoption as a standard by the Architectural Board of the Object Management Group. Using an experimental approach with participants familiar and unfamiliar with feature modeling, we analyzed comprehensibility in terms of comprehension score, time spent to complete tasks, and perceived difficulty of different feature modeling constructs. The results showed that familiarity with feature modeling did not influence the comprehension of <b>mandatory,</b> <b>optional,</b> and alternative features, although unfamiliar modelers perceived these elements more difficult than familiar modelers. OR relations were perceived as difficult regardless of the familiarity level, while constraints were significantly better understood by familiar modelers. The time spent to complete tasks was higher for familiar modelers...|$|E
30|$|Besides the {{semantic}} types, input datapoints must be declared as either <b>mandatory,</b> <b>optional,</b> or inactive {{for a given}} operation mode. Mandatory inputs are essential for a proper functioning of the profile and must be bound with an interoperable output datapoint providing the desired information. For example, the input datapoints nv 1 (room luminance level) and nv 2 (occupancy state) in Figure 3 are mandatory for the constant light controller. Optional inputs on the contrary can be bound, but do not have to. They provide additional information, such as nv 3 (manual override from the user) or nv 4 (luminance setpoint adjustment). Inactive inputs must not be bound, {{because they are not}} regarded by the profile in the given operation mode. Output datapoints on the other hand are distinguished in active and inactive. Only active outputs provide values and are possible candidates for datapoint bindings. With that information, an automated function-block-oriented composition of building automation systems is feasible. Automated design algorithms know which operation mode of a functional profile needs to be selected for a desired functionality and which datapoints of neighbored profiles are to be bound for a proper functioning.|$|E
50|$|A {{referendum}} {{can also}} be requested by a minimum of eight cantons, the so-called cantonal referendum (not {{to be confused with}} a <b>mandatory</b> or <b>optional</b> referendum on a cantonal level).|$|R
5000|$|An {{attribute}} use {{represents the}} relationship of a complex type and an attribute declaration, and indicates whether the attribute is <b>mandatory</b> or <b>optional</b> when it is used in that type.|$|R
2500|$|Em Lo - Existence Is <b>Mandatory,</b> Love Is <b>Optional</b> (2006) (Producer/Engineer) ...|$|R
