0|72|Public
5000|$|Updating AREAS.BBS (BBS' <b>message</b> base <b>configuration)</b> {{with new}} <b>message</b> areas {{when they are}} created automatically.|$|R
30|$|If a {{reconfiguration}} needs multiple <b>configuration</b> <b>messages,</b> Titan {{stops the}} current service subgraph on {{the reception of}} the first <b>message.</b> The <b>configuration</b> of the new service subgraph is then continued every time new configuration packets are received. As soon as the service subgraph information is complete, Titan starts the execution and notifies the network manager of that fact. The continuous processing of the incoming <b>configuration</b> <b>messages</b> reduces the delay after the reception of the last message, as it only includes the configuration and startup time.|$|R
5000|$|... 1.3 The {{selected}} node {{takes the}} address from the LIN <b>configuration</b> <b>message</b> ...|$|R
5000|$|... 3.5 The last node {{will accept}} the address {{contained}} in the LIN <b>configuration</b> <b>message</b> ...|$|R
30|$|The {{process begins}} with the {{symbiotic}} network planning algorithm[27] calculating the optimal node parameters. This calculation depends on which of the network planning features (see above) are enabled, {{as well as on}} the agreed common incentives between the networks. Once the optimal node parameters (sinks, transmit powers, modes, etc.) have been determined, the network (Figure 1) is reconfigured in a second step and packets are sent accordingly. To this end, a java tool is developed that can send <b>configuration</b> <b>messages</b> (radio on, radio of, set tx power, etc.) to the sensor devices. For the experiments, the <b>configuration</b> <b>messages</b> were sent over wired debugging interfaces, but the concepts can also be used when <b>configuration</b> <b>messages</b> are sent over the wireless interface. Information consistency between a node and its sink is ensured by relying on reliable networking protocols on higher layers (e.g., the Zigbee protocol).|$|R
40|$|This paper {{advocates a}} {{configuration}} approach to parallel programming for This paper advocates a configuration approach to parallel programming for distributed memory multicomputers, in particular, arrays of transputers. The distributed memory multicomputers, in particular, arrays of transputers. The configuration approach prescribes the rigorous {{separation of the}} logical structure of a configuration approach prescribes the rigorous separation of the logical structure of a program from its component parts. In the context of parallel programs, components program from its component parts. In the context of parallel programs, components are processes which communicate by exchanging <b>messages.</b> The <b>configuration</b> are processes which communicate by exchanging <b>messages.</b> The <b>configuration</b> defines the instances of these processes which exist in {{the program and the}} paths by defines the instances of these processes which exist in the program and the paths by which they are interconnected. The appro [...] ...|$|R
40|$|Fault attacks exploit {{hardware}} malfunctions {{to recover}} secrets from embedded electronic devices. In the late 90 ’s, Boneh, DeMillo and Lipton introduced fault-based attacks on CRt-RSA. These attacks factor the signer’s modulus when the message padding function is deterministic. However, the attack {{does not apply}} when the message is partially unknown, for example when messages contain some randomness which is recovered only when verifying a correct signature. In this paper we successfully extends rsa fault attacks to a large class of partially known <b>message</b> <b>configurations.</b> The new attacks rely on Coppersmith’s algorithm for finding small roots of multivariate polynomial equations. We illustrate the approach by successfully attacking several randomized versions of the ISO/IEC 9796 - 2 encoding standard. Practical experiments show that a 2048 -bit modulus can be factored {{in less than a}} minute given one faulty signature containing 160 random bits and an unknown 160 -bit message digest...|$|R
40|$|Abstract. Fault attacks exploit {{hardware}} malfunctions {{to recover}} secrets from embedded electronic devices. In the late 90 ’s, Boneh, DeMillo and Lipton [6] introduced fault-based attacks on crt-rsa. These attacks factor the signer’s modulus when the message padding function is deterministic. However, the attack {{does not apply}} when the message is partially unknown, for example when messages contain some randomness which is recovered only when verifying a correct signature. In this paper we successfully extends rsa fault attacks to a large class of partially known <b>message</b> <b>configurations.</b> The new attacks rely on Coppersmith’s algorithm for finding small roots of multivariate polynomial equations. We illustrate the approach by successfully attacking several randomized versions of the iso/iec 9796 - 2 encoding standard. Practical experiments show that a 2048 -bit modulus can be factored {{in less than a}} minute given one faulty signature containing 160 random bits and an unknown 160 -bit message digest. Keywords: Fault attacks, digital signatures, rsa, Coppersmith’s theorem, iso/iec 9796 - 2...|$|R
40|$|Instant {{messengers}} {{suffer from}} poor scalability, flexibility, security, and interoperability. This study attempts {{to solve these}} problems using the strengths of Service-Oriented Architectures. The key components to achieve these improvements include several Java related technologies such as JAX-RPC, JAXM, SOAP, WSDL, J 2 EE servlets and Enterprise Java Beans. SOAP provides a universal messaging protocol that heterogeneous parties can understand. JAX-RPC provides synchronous SOAP messaging, {{as well as a}} loosely coupled design that allows for a very flexible distributed architecture. JAXM provides asynchronous SOAP messaging. When used together, applications can implement robust instant messaging functionality. Registration, login, and other instant <b>messaging</b> <b>configuration</b> operations can be fulfilled through the use of JAX-RPC while JAXM can be used to fulfill requirements such as send and receive. Servlets and Enterprise Java Beans augment the benefits of Service-Oriented Architectures with the former being extremely scalable, portable, and modular. AIMSOA encapsulates these components to provide an instant messaging architecture solution that will augment the weaknesses of current instant messaging architectures by providing a solution for better scalability, flexibility, and interoperability...|$|R
5000|$|... jKool was {{designed}} to be a highly scalable, SaaS solution leveraging open-source software that provides real-time streaming analytics for big data and was announced at All Things Open. The technology at jKool was built using open-source software including Apache Spark, Apache STORM, and Apache Kafka sitting on top of the NoSQL database, Apache Cassandra and the search engine Apache Solr, the last two from DataStax The micro-services platform FatPipes is used as the orchestration layer to control data management, <b>messaging</b> and <b>configuration.</b>|$|R
3000|$|Downloading the Farkle game {{description}} {{including the}} Farkle game control {{service and the}} service graphs from the application server via HTTP required 38.9 [*]kB of data transfer. In our office, it took on average 17 seconds to obtain it using an HSDPA connection. The reconfiguration time of a single node has been measured using a minimal service graph involving a counter and an LED display service. This service graph is encoded in 20 bytes and fits into a single <b>configuration</b> <b>message.</b> The resulting reconfiguration time averages at 106 [*]ms and involves the transfer of a <b>configuration</b> <b>message</b> from the mobile phone over the gateway to the smart object, reconfiguration, and a confirmation message in return. Reconfiguring the node itself takes 650 [*] [...]...|$|R
40|$|We {{describe}} Elusive Interfaces, a new {{mechanism for}} protecting distributed interfaces from attacks. Elusive Interfaces {{can be used}} to ensure privacy of remote method invocation (RMI) messages and for authenticating the issuer of an invocation. Elusive Interface exploits a space of <b>message</b> <b>configurations</b> by using <b>message</b> transformations to conceal the actual communication. We describe this space and characterize its size for realistic distributed object interfaces. We analyze the effect of the various transformations on two types of attacks: eavesdropping and unauthorized invocations. We describe a sample application and examine the effects of applying the transformations to its interface. Specifically, the keyspace for our sample application exceeds 2. 7 x 10 15 formats that one particular message may take. We describe a prototype implementation of Elusive Interfaces, and evaluate the approach empirically. Performance experiments confirm that an Elusive Interface system can provide enhanced security at a moderate overhead (0. 6 milliseconds per null RMI), and performs 11 to 56 times faster than Triple-DES, 168 bit-key encryption. With the recent advances in high-speed networks and the significant reduction of communication overheads experienced by user-level messaging layers, low-overhead security mechanisms are essential. The low-overhead incurred by our Elusive Interface prototype makes it ideal for such high-speed networking environments. ...|$|R
50|$|Interface to a TTP network {{requires}} {{the use of}} the AS8202NF device. This device operates between the computer platform and the TTP network. The AS8202NF is required to be loaded with a TASM (TTP Assembler) and MEDL (<b>Message</b> Descriptor List) <b>configuration</b> data sets prior to operation.|$|R
30|$|Prototypes of MIH {{security}} methods with IPSEc/IKEv 2, DTLS, {{and the new}} MIHSec mechanism {{are developed}} {{and the results are}} compared based on IEEE 802.21 Draft 11 for handover scenarios between Wi-Fi and Ethernet networks. The impacts on signaling latency, message transport latency, <b>message</b> overhead, and <b>configurations</b> are analyzed.|$|R
5|$|The {{upcoming}} USB Power Delivery Specification revision3.0 defines {{new power}} rules based on supplied wattage. Programmable power supply protocol allows granular control over VBUS power in 10mV steps to facilitate constant current or constant voltage charging. Revision 3.0 also adds extended <b>configuration</b> <b>messages,</b> fast role swap, and deprecates the BFSK protocol.|$|R
5|$|Several {{parts of}} Debian are {{translated}} into languages other than American English, including package descriptions, <b>configuration</b> <b>messages,</b> documentation and the website. The level of software localization {{depends on the}} language, ranging from the highly supported German and French to the hardly translated Creek and Samoan. The installer is available in 73 languages.|$|R
30|$|Two {{kinds of}} buses {{were used for}} {{communicating}} between modules: data buses and control buses. The latter are exclusively used for <b>configuration</b> <b>messages.</b> The throughput of the data and control buses is 400 and 20 MB/s, respectively. The communication between the host PCs and their corresponding carrier boards is done through the PCI bus.|$|R
5000|$|DeviceNet {{incorporates}} a connection-based network. A connection must initially be established by either an UCMM (Unconnected Message Manager) or a Group 2 Unconnected Port. From there, Explicit and Implicit messages {{can be sent}} and received. Explicit messages are packets of data that generally require a response from another device. Typical <b>messages</b> are <b>configurations</b> or non-time sensitive data collection. Implicit messages are packets of data that are time-critical and generally communicate real-time data over the network. An Explicit Message Connection has {{to be used to}} established first before an Implicit Message Connection is made. Once the connection is made, the CAN identifier routes data to the corresponding node. (The Network and Transport Layers.) ...|$|R
50|$|One click {{notification}} is {{a method}} of clicking one button within a mobile app or emergency notification platform to initiate the dissemination of a message. An emergency notification system such as Red Messaging , Regroup Mass Notification and TextSpeak One-Box are examples of one-click multimodal notifications. Organizations use a one-click notification service to trigger the sending of <b>messages</b> via pre-saved <b>configurations</b> such as selected contact groups, chosen delivery methods etc.|$|R
50|$|This {{feature is}} used to {{exchange}} Wi-Fi Simple <b>Configuration</b> <b>messages</b> over an authenticated 1905.1 link. Using this protocol a 1905.1 AP Enrollee can retrieve configuration parameters (like SSID) from a 1905.1 AP Registrar. Thus AP Auto-Configuration {{is used to}} simplify the setup of a home network consisting of multiple APs - {{eliminating the need for}} the user to manually configure each AP (only a single configuration, of the AP Registrar, is required).|$|R
30|$|The {{remainder}} of the paper is organized as follows. Section 2 briefly overviews the cell selection procedure in LTE networks, the main downlink broadcast channels, and the feasibility of eavesdropping unprotected broadcasted network <b>configuration</b> <b>messages.</b> Three attacks against LTE networks are described in Section 3. The proposed research directions and theoretical architecture to mitigate radio jamming attacks is introduced in Section 4. Finally, related work is reviewed in Section 5, and the concluding remarks are presented in Section 6.|$|R
40|$|The plan {{defines the}} {{anticipated}} GSTDN/DOD station support and configuration requirements for a nominal flight with an orbital inclination of 38. 4 degrees and a circular orbit of 120 nautical miles {{for the first}} 5 orbits and 137 nautical miles thereafter. A complete set of preliminary site <b>configuration</b> <b>messages</b> (SCM) define nominal station AOS/LOS times and configurations for S-Band and UHF support. This document is intended {{for use as a}} planning tool, providing the necessary guidelines and data base for SCM generation in support of STS- 2...|$|R
40|$|A tool to {{facilitate}} the generation and publication of test data was created to test the individual components of a command and control system designed to launch spacecraft. Specifically, this tool was built to ensure messages are properly passed between system components. The tool {{can also be used}} to test whether the appropriate groups have access (read/write privileges) to the correct messages. The messages passed between system components take the form of unique identifiers with associated values. These identifiers are alphanumeric strings that identify the type of message and the additional parameters that are contained within the message. The values that are passed with the message depend on the identifier. The data generation tool allows for the efficient creation and publication of these <b>messages.</b> A <b>configuration</b> file can be used to set the parameters of the tool and also specify which messages to pass...|$|R
40|$|PAN is {{a process}} based Prolog system running in a {{distributed}} manner on the nodes of a virtual multiprocessor. It {{was designed to be}} a general purpose parallel logic programming system that would be resilient to software and hardware evolution. Programs can explicitly control parallelism through passing general terms synchronously or asynchronously among PAN's Prolog engines. Alternatively several forms of parallelism can be implicitly extracted by compilation techniques and runtime scheduling on top of this architecture. The computational platform or Parallel Virtual Machine is a meshed set of daemons on a network of heterogeneous workstations offering common <b>message</b> passing, <b>configuration</b> and job control services. PAN is presented to users under X Window as a multi-headed extension of single processor Prolog systems. An interface to each Prolog engine is displayed in a separate X widget together with a console window to the PVM, and window based methods are supported for simultaneous [...] ...|$|R
40|$|This paper {{presents}} {{a technique to}} detect inadequate (i. e., missing or ambiguous) diagnostic <b>messages</b> for <b>configuration</b> errors issued by a configurable software system. The technique injects configuration errors into the software under test, monitors the software outcomes under the injected configu-ration errors, and uses natural language processing to analyze the output diagnostic message caused by each configuration error. The technique reports diagnostic messages that may be unhelpful in diagnosing a configuration error. We implemented the technique for Java in a tool, ConfDiagDetec-tor. In an evaluation on 4 real-world, mature configurable systems, ConfDiagDetector reported 43 distinct inadequate diagnostic mes-sages (25 missing and 18 ambiguous). 30 of the detected messages have been confirmed by their developers, and 12 more {{have been identified as}} inadequate by users in a user study. On average, Conf-DiagDetector required 5 minutes of programmer time and 3 minutes of compute time to detect each inadequate diagnostic message...|$|R
30|$|The defined SIMO (Singe-Input Multiple-Output) and MIMO {{transmission}} schemes are categorized {{in several}} transmission modes. The definition of each transmission mode includes the required configuration {{information in the}} common downlink signaling channel and information on how the user terminal should search for this <b>configuration</b> <b>message</b> [13]. This mechanism {{is part of the}} general downlink signaling framework designed to allow a flexible time-frequency resource allocation separately to each UE based on the available system resources and the reported or measured channel conditions. The transmission mode for each UE is configured semistatically via higher layer signaling, in order to avoid excessive downlink signaling.|$|R
30|$|PMU samples the synchrophasor {{measurements}} and transmits these measurements {{in the form}} of data packet to a PDC via a wide area communication network. IEEE C 37.118. 2 defines four types of messages for PMU communication i.e. data, configuration, header and command. The data messages correspond to measurements made by PMU. <b>Configuration</b> <b>messages</b> contains the information about calibration factors and meta data required to properly decode the data messages which are normally in machine readable format. The data word packet consists of various layers of network protocols necessary for efficient and secure message exchange over the network.|$|R
40|$|MPEG- 4 IPMPX (intellectual {{property}} management and protection extension) {{is the latest}} ISO standard which provides a flexible framework for protecting MPEG streams. The message mechanism of IPMPX enables interoperability among IPMPX-compliant devices no matter which protection methods are embedded. This paper highlights several problems in the message syntax of IPMPX: the tool delivery message IPMP_ToolES_AU is vulnerable to network attack, the authentication message IMP_Mutual_Authentication is incapable of defending against forgery attack, and the <b>configuration</b> <b>message</b> IPMP_SelectiveDecrptionInit is ambiguous and redundant. We propose a number of remedies to those problems, which {{can be incorporated into}} a corrigenda to improve the present ISO MPEG- 4 IPMP standard...|$|R
30|$|The service exchanges {{among the}} PMU and PDC in IEC 61850 - 90 - 5 model takes place as {{illustrated}} in Fig.  3. When, PDC sends a MMS-request type message to obtain the information model of the PMU. This service is equivalent of a command <b>message</b> for obtaining <b>configuration</b> frame in IEEE C 37.118. 2. Then PMU sends back a MMS-response type message with the information of all its LNs. After receiving the information model, PDC sets “SvEna” value of R-MSVCB to true. The PMU continuously transmits R-SV values to PDC until the PDC sends command to turn off transmission by setting “SvEna” to false in R-MSVCB.|$|R
40|$|Abstract- An {{effective}} resolution multiprocessor can be {{built from}} distributed processing, logic programming, and interface elements. Widely used, portable, components can be modularly composed into a portable parallel system that displays good resistance to premature obsolescence by software evolution. A virtual multiprocessor offering common <b>message</b> passing and <b>configuration</b> services integrates a dis-tributed mesh of sequential resolution engines. Users configure and control the resolution engines and virtual multiprocessor through a GUI using an embedded command language to drive its facilities. Prolog programs either explicitly control parallel execution through message passing or would {{have to rely on}} program transformation techniques to extract parallelism implicitly. Prolog PVM X Window TCL/TK Expect...|$|R
30|$|At startup, IOMMUs are deactivated. During {{the boot}} time configuration, the {{firmware}} scans the PCI configuration space {{to discover and}} initialize vital devices, like the main video controller, loading and executing its embedded firmware. Read and write accesses to the configuration space generate PCI Express <b>configuration</b> <b>messages</b> that are sent to the targeted device. Devices know their PCI ids after the first scan, as explained in the “Communications” section. Therefore, the peripherals are able to generate valid messages at the early firmware execution stage, long before {{the execution of the}} bootloader and then of the operating system kernel. At the end of the execution of the firmware, the control is given to the bootloader and to the kernel.|$|R
30|$|IEEE C 37.118. 2 - 2011 [11] is for {{addressing}} real-time communication between PMUs, power dispatching centers (PDCs), and other applications of synchrophasor networks. The main motivation for this standard is {{the adoption of}} synchrophasor measurements and integration with other communication protocols. IEEE C 37.118. 2 adds a new configuration frame to the synchrophasor message format introduced in IEEE C 37.118 - 2005 and defines four <b>message</b> types: data, <b>configuration,</b> header, and command. The standard discusses organization of these four frames, i.e. presenting the structure of each message type, defining the words used in the message, and specifying the number of bytes per word. The standard also defines the time quality codes.|$|R
30|$|The OLSR routing {{procedure}} {{has been}} extensively analyzed in the bibliography, and currently OLSRv 2 is under consideration [4]. Some works devoted to improve it by integrating security tools [5] have been also developed. In the OLSR proactive routing two stages can be clearly differentiated. Firstly, a reliable map of the network is built. In order to obtain such an accurate map, all the network nodes must exchange messages regarding the state of their connections links. In the second stage, {{and based on the}} built map, the optimum route among the nodes is generated. The main obstacle this protocol has to skip is the high number of messages to be exchanged among nodes. However, thanks to these <b>messages</b> the network <b>configuration</b> is known by all its members.|$|R
30|$|<b>Configuration</b> <b>messages</b> are {{of three}} {{different}} types: CFG- 1, CFG- 2 and CFG- 3. CFG- 1 represents the reporting capability of PMU in terms {{of different types of}} data and is of 100 bytes. CFG- 2 gives information about the synchrophasor measurements which are currently being transmitted/reported and it is 100 bytes. CFG- 3 contains some enhanced flexibility and information about characteristics and measurements that are being sent by a PMU and its size is 110 bytes. The header messages which are 18 bytes contain the readable descriptive information sent from PMU/PDC. Command messages control operation of synchrophasor measurement devices and the transmission of data <b>configuration</b> and header <b>messages</b> and has a size of 20 bytes. For example, command messages are ‘data_on’, ‘data_off’, ‘send_header’ etc.|$|R
40|$|Abstract — The {{communication}} from a cooperative sensor network to a mobile access point is considered in this paper. Sensors {{are assumed to}} be informed with a global message, and some nodes are misinformed with random <b>messages.</b> Three system <b>configurations</b> are discussed based on whether a polling channel is implemented and whether an energy limit is imposed on individual sensors. The capacity of these system configurations are derived. It is shown that if a polling channel is implemented and there is no energy constraint on individual nodes, there is no rate loss with the presence of sensor errors. If there is no polling channel implemented and there is no energy constraint on individual nodes, the rate loss is proportional to the probability that a node is misinformed...|$|R
30|$|A {{potential}} {{enhancement of}} the anti-jamming {{properties of the}} main DL broadcast channels, importing concepts from spread spectrum modulations, protects the wireless interface from a smart jamming attack aimed to such control channels. In parallel, a randomization of the PRB allocation of UL control channels plus a sophisticated encryption method for DL system <b>configuration</b> <b>messages,</b> backed up by the deployment of a TPM in the UE, prevent an attacker from launching a smart jamming attack against these essential UL channels. Finally, a method that leverages the current availability of antennas at the eNodeB is proposed to filter out an UL smart jamming signal in order to block an UL smart jamming attack. The limitations for all these solutions have been discussed as well.|$|R
