1554|1124|Public
5|$|Python {{has been}} used in {{artificial}} intelligence tasks. As a scripting language with <b>modular</b> <b>architecture,</b> simple syntax and rich text processing tools, Python is often used for natural language processing tasks.|$|E
25|$|MIPS is a <b>modular</b> <b>architecture</b> {{supporting}} {{up to four}} coprocessors (CP0/1/2/3). In MIPS terminology, CP0 is the System Control Coprocessor (an {{essential part}} of the processor that is implementation-defined in MIPS IV), CP1 is an optional floating-point unit (FPU) and CP2/3 are optional implementation-defined coprocessors (MIPS III removed CP3 and reused its opcodes for other purposes). For example, in the PlayStation video game console, CP2 is the Geometry Transformation Engine (GTE), which accelerates the processing of geometry in 3D computer graphics.|$|E
25|$|The Small Molecule Interaction Database is a {{database}} containing protein domain-small molecule interactions. It uses a domain-based approach to identify domain families, {{found in the}} Conserved Domain Database (CDD), which interact with a query small molecule. The CDD from NCBI amalgamates data from several different sources; Protein FAMilies (PFAM), Simple <b>Modular</b> <b>Architecture</b> Research Tool (SMART), Cluster of Orthologous Genes (COGs), and NCBI’s own curated sequences. The data in SMID {{is derived from the}} Protein Data Bank (PDB), {{a database}} of known protein crystal structures.|$|E
40|$|AbstractModular product {{architectures}} {{are used}} to optimize the tradeoff between product differentiation by increased fit to costumer needs and economies of scale augmented by product standardization. Especially the development and the ramp-up of <b>modular</b> product <b>architectures</b> requires a new development process due to the interdependencies in the product itself, {{the impact on the}} production process and the higher level of market requirements. Literature describes different methods for single aspects of the development of <b>modular</b> product <b>architectures,</b> like the modularization of products but does not give a approach which considers all the needed steps and requirements. Therefore, this paper describes an holistic approach for the development of <b>modular</b> product <b>architectures</b> in three stages. In the first phase the requirements for the <b>modular</b> product <b>architecture,</b> that depend on internal and external circumstances, are identified. Based on the requirements the <b>modular</b> product <b>architecture</b> standards are defined. Afterwards the <b>modular</b> product <b>architecture</b> including the modularity as well as the variety and the interfaces are defined...|$|R
40|$|Abstract:- One of the {{principal}} motivations for constructing artificial modular neural networks comes from biological neural systems, where modularity can be observed {{at different levels of}} organization. Starting from some theoretical results that roughly state that <b>modular</b> <b>architectures</b> generalize better than their monolithic counterparts, we test through simulations this assertion on three problems: the parity function and other two "real world " problems as face expression recognition and diabetes diagnosis. We also analyze how the size of the networks influences the generalization ability. From the results we extract some general recommendations on how to build and train <b>modular</b> <b>architectures.</b> Key-Words:- Artificial neural networks, generalization performance, modularity, back propagation, parity function, face expression recognition, medical diagnosis. ...|$|R
40|$|Abstract The {{evolution}} of simulated robots {{with three different}} architectures is studied in this article. We compare a nonmodular feed-forward network, a hardwired modular, and a duplication-based modular motor control network. We conclude that both <b>modular</b> <b>architectures</b> outperform the non-modular architecture, {{both in terms of}} rate of adaptation as well as the level of adaptation achieved. The main difference between the hardwired and duplication-based <b>modular</b> <b>architectures</b> is that in the latter the modules reached a much higher degree of functional specialization of their motor control units with regard to high-level behavioral functions. The hardwired architectures reach the same level of performance, but have a more distributed assignment of functional tasks to the motor control units. We conclude that the mechanism through which functional specialization i...|$|R
25|$|He {{observed}} analogous {{trends in}} the field of repetitive or transposed genomic elements (TEs) including retroposed elements. These elements were initially considered to be junk, littering genomes, and proposed by only a few to constitute raw material for fortuitous and only occasional exaptations, and to be responsible for the plasticity of genomes and the <b>modular</b> <b>architecture</b> of genes. The current tide is moving in the opposite direction. A plethora of functions have been assigned to TEs, one example being the bewildering spectrum of tasks allocated to the evolutionarily young primate-specific Alu elements. Such sweeping interpretations should be challenged.|$|E
25|$|The ULV or Unified Launch Vehicle is {{a launch}} vehicle in {{development}} by the Indian Space Research Organisation (ISRO). The project's core {{objective is to}} design a <b>modular</b> <b>architecture</b> that will enable {{the replacement of the}} PSLV, GSLV Mk II and GSLV Mk III with a single family of launchers.It will use a semi-cryogenic core stage SC160 with SCE-200 engine with 160 tonne of propellant loading of RP-1 and LOX, producing around 2000kN thrust.The SCE-200 engine can even be clustered for heavy launch configuration.The ULV will be able to launch 6000kg to 10,000kg of payload into GTO. This will mark the renunciation of the liquid stage with Vikas engine, which uses UDMH and N2O4, which produce toxic fumes.|$|E
2500|$|IIS 7.0 has a <b>modular</b> <b>architecture.</b> Modules, {{also called}} extensions, {{can be added}} or removed {{individually}} so that only modules required for specific functionality have to be installed. IIS 7 includes native modules {{as part of the}} full installation. These modules are individual features that the server uses to process requests and include the following: ...|$|E
40|$|Successful value {{creation}} requires not only exploiting productivity gaps but also pursuing the opportunity gaps that technological innovation and changing customer preferences provide. However, {{the pursuit of}} opportunity gaps requires firms to refocus their energies toward developing new, innovative, and flexible marketing processes and architectures in which the necessary skills, resources, and core competencies, whether within or outside the firmÂ’'s boundaries, can be combined. The establishment of flexible <b>modular</b> <b>architectures</b> is not a trivial task; it requires {{an understanding of the}} critical processes and constraints driving innovation within a chain. The adoption of <b>modular</b> <b>architectures</b> can provide opportunities to create greater product variety, introduce technologically improved products, bring products to market more quickly, and undertake initiatives more easily than before. This paper applied a conceptual framework developed in Gow et al. (2002) to explain how livestock producers can exploit opportunity-gap initiatives through the development and use of flexible and <b>modular</b> chain <b>architectures.</b> The case of a New Zealand pork producer who restructured his farming operation to match consumer requirements provides empirical support. Marketing,...|$|R
50|$|System {{profilers}} {{came into}} use after punch cards {{were no longer}} needed to run programs. Mainframe computers had evolved into have <b>modular</b> <b>architectures</b> {{at the same time}} punch cards were being abandoned as input devices. Punch card based mainframe computer systems typically had very rigidly fixed architectures with little variation in input or output devices.|$|R
50|$|Good hijaxing {{encourages}} {{the use of}} a <b>modular</b> back-end <b>architecture</b> via APIs.|$|R
2500|$|FreeOTFE was {{initially}} released by Sarah Dean in 2004, {{and was the}} first open source code disk encryption system that provided a <b>modular</b> <b>architecture</b> allowing 3rd parties to implement additional algorithms if needed. Older FreeOTFE licensing required that any modification to the program be placed in the public domain. This does not conform technically to section 3 of the Open Source definition. Newer program licensing omits this condition. The FreeOTFE license has not been approved by the [...] and is not certified to be labeled with the open-source certification mark.|$|E
2500|$|Windows Vista {{includes}} Internet Information Services (IIS) version 7, {{which has}} been refactored into a <b>modular</b> <b>architecture,</b> with integrated [...]NET extensibility. Instead of a monolithic server which features all services, IIS 7 has a core web server engine, and modules offering specific functionality {{can be added to}} the engine to enable its features. Writing extensions to IIS 7 using ISAPI has been deprecated in favor of the module API. Much of IIS's own functionality is built on this API, and as such, developers will have much more control over a request process than was possible in prior versions.|$|E
2500|$|In {{order to}} comply with {{increasingly}} strict carbon dioxide emission limits in major markets, the VW Group expects to sell about one million all-electric and plug-in hybrid vehicles a year worldwide by 2025. The Group plans to expand its plug-in range with 20 new pure electric and plug-in hybrid cars, including two cars to compete with Tesla Motors, the Porsche Mission E all-electric car and the Audi e-tron quattro, {{which is expected to}} become the brand's first mass production electric vehicle. According to Thomas Ulbrich, VW brand production chief, the carmaker has capacitty to build as many as 75,000 battery electric and plug-in hybrids a year if demand rises. Volkswagen announced in October 2015 that [...] "it will develop a <b>modular</b> <b>architecture</b> for battery electric cars, called the MEB. The standardized system will be designed for all body structures and vehicle types and will allow the company to build emotionally appealing EVs with a range of up to [...]" [...] In June 2016, VW launched a program to develop 30 all-electric cars in 10 years, and sell 2-3 million electric cars per year by 2025. Due to lower manpower requirements for electric motors than for piston engines, VW expects a gradual workforce reduction as numbers of electric cars increase. VW considers battery factory ownership as too expensive.|$|E
40|$|Best {{practice}} {{suggests that}} a <b>modular</b> enterprise <b>architecture,</b> where interfaces between and among business processes and services are standardized, is a key IT capability for firms to achieve profitable growth. But few firms have successfully designed, implemented, and maintained such an architecture. This article presents findings on the drivers, constraints, and actions taken by two companies that transitioned to a <b>modular</b> enterprise <b>architecture</b> in response to competitive pressures from their business partners or customers. One company implemented an industry standard and the other developed custom partner interface processes (PIPs) to achieve business modularity. The lessons from these two case studies show how companies can smoothly transition to a <b>modular</b> enterprise <b>architecture...</b>|$|R
50|$|Frama-C has a <b>modular</b> plugin <b>architecture</b> {{comparable}} to that of Eclipse (software) or GIMP.|$|R
50|$|Flexible {{development}} uses several {{techniques to}} keep the cost of change low and to make decisions at the last responsible moment. These techniques include <b>modular</b> <b>architectures</b> to encapsulate change, experimentation and iteration to sample results and check them out with the customer frequently, set-based design to build and maintain options, and emergent processes that develop during a project in response to its needs.|$|R
5000|$|Design a {{platform}} that supports an extensible <b>modular</b> <b>architecture</b> ...|$|E
5000|$|Proper <b>modular</b> <b>architecture</b> and {{separation}} of optional components (Cron, syslog) ...|$|E
5000|$|ISA-OMAC - Open <b>Modular</b> <b>Architecture</b> Controls group {{standardizing}} packaging machinery interfaces ...|$|E
40|$|We study {{backpropagation}} networks learning classification {{problems with}} multiple classes k ? 3. The common way to code {{the output of}} a network is the one-per-class (OPC) method, where one bit is assigned to each class. A technique called error-correcting output coding (ECOC) converts the k- class learning problem into {{a large number of}} two-class learning problems. We propose to use <b>modular</b> <b>architectures</b> as a way to decorrelate the (redundant) network outputs. Various <b>modular</b> <b>architectures</b> are tested on an artificial problem. We conclude that ECOC only improves upon OPC when combined with a sufficiently modular approach. 1 Introduction In information theory it is customary to add some redundancy to the code vectors to be transmitted {{in order to be able}} to reconstruct the original vector, even if some bits are unknown or distorted. This can be achieved by adding some bits to the original code to enlarge the Hamming distance d between the resulting code vectors. It can be shown that the [...] ...|$|R
5000|$|<b>Modular,</b> componentized <b>architecture</b> using a layered build {{system with}} the ability to update each layer of code {{independently}} ...|$|R
40|$|Abstract. To face {{economic}} constraints, {{an enterprise}} organization evolves towards new structures as a networked enterprise, supply chains, a virtual enterprise or Collaborative Business organizations. This involves an interconnection of both business processes and information systems. In {{order to protect}} each partner own interest, security policies must be developed. These policies have to integrate legal, technical and organizational constraints. In this paper, we present how <b>modular</b> <b>architectures</b> can face these problems...|$|R
50|$|OpenStack has a <b>modular</b> <b>architecture</b> {{with various}} code names for its components.|$|E
5000|$|... a <b>modular</b> <b>architecture,</b> {{which enables}} {{bringing}} new {{features in the}} core easily ...|$|E
5000|$|... #Caption: Icinga <b>modular</b> <b>architecture</b> with Core, Icinga Data Out Database, Web as of v1.5 ...|$|E
40|$|Designers often seek <b>modular</b> <b>architectures</b> {{to better}} {{accommodate}} expected changes and to enable parallel development. However, we lack a formal theory and model of modularity and software evolution, {{which can be}} used for description, prediction, and prescription. According to Baldwin and Clark’s [1] theory, <b>modular</b> <b>architectures</b> add value to system designs by creating options to improve the system by substituting or experimenting on individual modules. In this paper, we evaluate their theory by looking at the design evolution of two software product platforms through the modeling lens of design structure matrices (DSMs) and design rule theory. Our analysis shows that DSM models and options theory can explain how real-world modularization activities in one case allowed for different rates of evolution in different software modules and in another case conferred distinct strategic advantages on a firm (by permitting substitution of an at-risk software module without substantial change {{to the rest of the}} system). The experiment supports our hypothesis that these formal models and theory can account for important aspects of software design evolution in large-scale systems. 1...|$|R
40|$|RF systems {{based on}} <b>modular</b> <b>architectures</b> have the {{potential}} of better re-use of technology, decreasing development time, and decreasing life cycle cost. Moreover, <b>modular</b> <b>architectures</b> provide scalability, allowing low cost upgrades and adaptability to different platforms. To achieve maximum benefit from modularity and scalability, {{the challenge is to}} define the front-end concept {{in such a way that}} it supports multiple functions and is applicable in multiple environments and platforms. This paper describes concepts for such modular systems that may be used for RF functions in maritime, airborne and land based systems. The first part discusses general scalability properties of various RF functions, the second part discusses example system concepts in a 'joint' scenario (land/sea/air). The focus of this paper is on X-Ku band systems: considering essential RF functions like radar and communication, and the types of platforms in maritime, land-based and airborne operations, this frequency range provides the highest potential for application in all these domains and platforms. Conceptual designs for weapon location radar, SAR/GMTI, surveillance radar and tactical data link are presented...|$|R
5000|$|... <b>modular</b> plugin <b>architecture</b> {{so easily}} {{customizable}} (PHP) -- plugins include WYSIWYG word processor, import/export bibliographic formats, Amazon import, PubMed import.|$|R
5000|$|Open, <b>modular</b> <b>architecture</b> {{that allows}} any compression, conversion, or {{encryption}} method to be stacked.|$|E
5000|$|To {{create a}} <b>modular</b> <b>architecture</b> of small {{satellite}} {{which can be}} used in future missions.|$|E
50|$|SAMSON has a <b>modular</b> <b>architecture</b> {{that makes}} it {{suitable}} for different domains of nanoscience, including material science, life science, physics, electronics, chemistry, and education.|$|E
30|$|Since the {{simulation}} framework {{is supposed to}} be used in successive projects, this goal must be attained in a flexible way. Modifications of models source code must be easy and must not touch {{the main part of the}} source code. Solving this difficulty involves two winning assets: the definition of <b>modular</b> protocol <b>architecture</b> and the clever use of the object oriented [23, 24] software techniques in order to design a <b>modular</b> software <b>architecture.</b>|$|R
50|$|Nginx uses an {{asynchronous}} event-driven {{approach to}} handling requests. Nginx's <b>modular</b> event-driven <b>architecture</b> can provide more predictable performance under high loads.|$|R
40|$|If {{companies}} want to tackle increasing complexity, they often take use of <b>modular</b> system <b>architectures</b> which {{are seen as}} important enabler for sharing standardized modules across different development projects. Although numerous examples in systems business can be found where companies established <b>modular</b> <b>architectures,</b> they still face difficulties to reuse standardized architectural elements {{in a wide range}} of different development projects. One of the major reason for these difficulties is the focus on single system development projects instead of scoping multiple projects. However, when transitioning from single-solution focus toward a more generic multi-solution focus, engineering projects are prone to failure due to lack of time, resources, motivation and information. Consequently, the common <b>modular</b> product <b>architecture</b> loses its stability and diverges from project to project. This leads to branched architectures, isolated projects and systems with little commonality. Therefore, it is the aim of this paper to present an audit questionnaire that assesses the capability of a company to establish common <b>modular</b> system <b>architectures</b> from which a high variety of different systems can be derived. In order to develop the audit questionnaire, issues, important factors and appropriate means of support were identified and tested during a longitudinal case study in industry for more than four years. The innovative audit questionnaire suggests concrete actions for improving system engineering processes concerning their capability to create modules that are based on a common architecture. Consequently, these modules can be shared across a wide variety of products. This support will help companies to cut complexity, cost and risk of failure in transitioning toward modular system development with common architectures...|$|R
