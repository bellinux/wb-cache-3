29|425|Public
5000|$|The cc:Mail <b>message</b> <b>store</b> {{is based}} on a related set of files {{including}} a <b>message</b> <b>store</b> file, a directory and index file, and user files. In this structure, multiple users may have a reference in their individual files to the same message, thus the product offered a single instance <b>message</b> <b>store.</b> Message references in user files relate to message offsets stored in an indexed structure. Message offsets refer to locations within the <b>message</b> <b>store</b> file which is common to all users within a given database or [...] "post office".|$|E
5000|$|X.400 {{protocol}} for access of a <b>message</b> <b>store</b> from a user agent ...|$|E
50|$|The {{shared file}} access {{architecture}} of cc:Mail offered significant performance benefits {{and made it}} possible for cc:Mail to implement a single instance <b>message</b> <b>store</b> years in advance of other products. The file-based nature of the <b>message</b> <b>store</b> also made the system very flexible and in some respects, e.g., moving a database to a new server, easy to manage.|$|E
5000|$|Answer 1571, £2.25/month. Calls {{answered}} after typically 7 rings. Up to 20 <b>messages</b> <b>stored</b> {{for up to}} 60 days.|$|R
50|$|MAPI uses {{functions}} {{loosely based}} on the X.400 XAPIA standard. It includes facilities to access <b>message</b> transports, <b>message</b> <b>stores,</b> and directories.|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. IMAP (RFC 3501) is a rich protocol for accessing remote <b>message</b> <b>stores.</b> It provides an ideal mechanism for accessing public mailing list archives as well as private and shared <b>message</b> <b>stores.</b> This document defines a URL scheme for referencing objects on an IMA...|$|R
5000|$|Patent 6,735,770 - Method and {{apparatus}} {{for high}} performance {{access to data}} in a <b>message</b> <b>store</b> ...|$|E
5000|$|Openwave Messaging:Email Mx, Network <b>Message</b> <b>Store,</b> Voice and Video Messaging, App Suite, Rich Mail, Edge GX ...|$|E
50|$|<b>Message</b> <b>Store</b> and forward, later {{known as}} voice mail. This becomes {{the bedrock of}} social {{interaction}} in the story.|$|E
50|$|SWIFT {{opened a}} third data center in Switzerland, which started {{operating}} in 2009. Since then, data from European SWIFT members {{are no longer}} mirrored to the U.S. data center. The distributed architecture partitions messaging into two messaging zones: European and Trans-Atlantic. European zone <b>messages</b> are <b>stored</b> in the Netherlands and {{in a part of}} the Switzerland operating center; Trans-Atlantic zone <b>messages</b> are <b>stored</b> in the United States and {{in a part of the}} Switzerland operating center that is segregated from the European zone messages. Countries outside of Europe were by default allocated to the Trans-Atlantic zone but could choose to have their <b>messages</b> <b>stored</b> in the European zone.|$|R
5000|$|Call minder, £4.50/month, {{as above}} but 30 five-minute <b>messages,</b> <b>stored</b> for 30 days, can answer {{immediately}} or after a short, medium, or long period (typically 4, 7, or 10 rings), and can store numbers of callers who leave no message.|$|R
50|$|Sophos PureMessage for Microsoft Exchange — part of Email Security and Data Protection — blocks spam, viruses, spyware and phishing. Scanning all inbound, {{outbound}} {{and internal}} email and Exchange <b>message</b> <b>stores,</b> it proactively protects against email-borne threats, and prevents confidential data being lost.|$|R
50|$|Enterprise Edition: Had an {{increased}} limit of 16 TB (although Microsoft's best practices documentation recommends that the <b>message</b> <b>store</b> not exceed 100 GB). Adds an X.400 connector, and interoperability software with SNADS and PROFS. Introduced two node clustering capability.|$|E
50|$|In the 1994 version, P7 was {{enhanced}} {{to provide}} folders in the <b>message</b> <b>store,</b> allow storage of submitted messages, and provide many automatic actions such as auto-foldering and correlation of replies, delivery reports and receipt notifications with submitted messages.|$|E
5000|$|It is {{very common}} for an email system to accept a <b>message,</b> <b>store</b> it and then forward it on elsewhere. Although fully open mail relays are no longer common, not only does simple [...] {{server-based}} forwarding work this way, but also many email filtering and automated electronic mailing lists services.|$|E
50|$|In October 2010 her {{mobile phone}} {{was stolen from}} her car. Although not implicated in the robbery itself, it became evident that The Sun {{newspaper}} had accessed the phone, including <b>messages</b> <b>stored</b> on it. She subsequently won substantial damages against the newspaper in March 2013.|$|R
5000|$|Eudora used an mboxo {{variation}} where a sender's {{email address}} is replaced by the constant string [...] "???@???". Most mbox clients <b>store</b> incoming <b>messages</b> as received. Eudora separates out attachments embedded in the <b>message,</b> <b>storing</b> the attachments as separate individual files in one folder.|$|R
5000|$|System disks {{which not}} only include the {{software}} above, but also contain a complete directory of all users with pertinent data about each (name, extension number, voice-mail preferences, and pointers {{to each of the}} <b>messages</b> <b>stored</b> on the <b>message</b> disk that belong to them); ...|$|R
5000|$|The Insight Connector is {{a server}} which {{works like a}} Microsoft Exchange Server, but using IMAP and a Microsoft Outlook plugin. The server also {{supports}} MAPI <b>Message</b> <b>Store</b> Provider and thus being able to edit and change the groupware-Data [...] "live and online" [...] using any IMAP server. The server is also used by IBM serving over 4.600 companies.|$|E
50|$|Meanwhile, Bill Fitler's webmail {{implementation}} {{was further}} {{developed as a}} commercial product which Lotus announced and released {{in the fall of}} 1995 as cc:Mail for the World Wide Web 1.0, thereby providing an alternative means of accessing a cc:Mail <b>message</b> <b>store</b> (the usual means being a cc:Mail desktop application that operated either via dialup or within the confines of a local area network).|$|E
50|$|Message {{handling}} is a distributed {{information processing}} task that integrates two related subtasks: message transfer and message storage. The ITU-T Recommendations define specific protocols {{for a wide}} range of communication tasks. For example, the P1 protocol is used explicitly for communication among MTAs, P3 between the user agent and an MTA, and P7 between the user agent and <b>message</b> <b>store.</b>|$|E
40|$|Traditionally, {{instructional}} {{technologies have}} been used as media for conveying information, much as teachers do. When used in this way, information is &quot;stored &quot; in the technology. During the &quot;instructional &quot; process, learners interpret the <b>messages</b> <b>stored</b> in the technology as they &quot;interact &quot; it. However, those interactions are very limited. The technolog...|$|R
40|$|Traditionally, {{instructional}} {{technologies have}} been used as media for delivering instruction, that is, as conveyors of information and tutors of students. Whn used in this way, information is "stored " in the technology. During the "instructional " process, learners perceive and try to understand the <b>messages</b> <b>stored</b> in the technology as the...|$|R
5000|$|The {{original}} sender {{knows whether}} the recipient received the message or not (through an acknowledgement system), but the sender cannot discover which network participant {{is the actual}} recipient since all the network participants will have this encrypted <b>message</b> <b>stored</b> on their computer irrespective of whether the message was intended for them or not.|$|R
50|$|Version 4.0 was {{released}} in 1993 with an entirely new interface and transitioning to a database technology for the <b>message</b> <b>store.</b> Other major features included task management, server-based rules, remote replication/synchronization, centralized administration of multiple servers, 32-bit server capability, simultaneous release on all platforms, and many other innovative additions that were firsts in the market. Gateways included SMTP, X.400, fax, pager, and PROFS.|$|E
50|$|Haraka is {{frequently}} {{used as a}} filtering MTA in front of other MTAs that lack the performance and/or filtering capabilities of Haraka. Craigslist uses Haraka to handle inbound and then forward validated connections to Postfix. Bounce.io similarly uses Haraka to accept incoming messages and deliver them to their application engine. Mail Toaster 6 uses Haraka similarly to accept incoming mail and forward to a qmail based <b>message</b> <b>store.</b>|$|E
5000|$|GmailFS is a {{good example}} of the {{collaborative}} nature of much open-source development. Building on FUSE (which allows filesystems to be implemented in userspace, instead of as code that needs to be loaded into the kernel) combined with libgmail, which is a Python library for programmatic access to a user's Gmail <b>message</b> <b>store,</b> the result is the ability to use the multiple gigabytes of Gmail message space as a fileserver accessible from anywhere on the Internet.|$|E
2500|$|Before launch, Google touted strong {{privacy in}} the app, with {{particular}} emphasis on <b>messages</b> <b>stored</b> [...] "transiently and in non-identifiable form". However, at launch, privacy was significantly rolled back, with Google now keeping logs of messages indefinitely (or until the user deletes messages) {{in an effort to}} improve the app's [...] "smart reply" [...] feature.|$|R
5000|$|Interact with an {{external}} repository to augment a <b>message</b> or <b>store</b> it ...|$|R
50|$|I.CX is a {{messaging}} {{and file}} sharing web application providing end-to-end encryption without any download or installation. It {{was developed by}} the Toronto firm EveryBit, and relies on the open-source EveryBit.js framework. All encryption is done client-side in the users web browser. All files and <b>messages</b> <b>stored</b> and sent using I.CX are protected with 256-bit AES encryption.|$|R
50|$|The X.400-series {{recommendations}} {{define the}} technical aspects of the MHS: ITU-T Rec. X.402 | (ISO/IEC 10021-2) defines the overall system architecture of an MHS, ITU-T Rec. X.411 | (ISO/IEC 10021-4) defines the Message Transfer Service (MTS) and its functional component the Message Transfer Agent (MTA), and ITU-T Rec. X.413 | (ISO/IEC 10021-5) defines the <b>Message</b> <b>Store.</b> All ITU-T recommendations provide specific terms for descriptions of system entities and procedures. For example, messages (email) exchanged among people is referred to as Interpersonal Messaging (IPM); electronically structured business documents (e.g., invoices, purchase orders, dispatch advice, etc.) exchanged among trading partners’ computers fall under the EDI protocols.|$|E
5000|$|Journaling {{refers to}} {{capturing}} information about an electronic message {{while it is}} in transit. Which messages {{and the kind of}} information that is captured should be defined by a system administrator or compliance agent. The journaled message should be encrypted and users should not have access to their own journaled <b>message</b> <b>store.</b> [...] Archiving, on the other hand, is primarily dedicated for backing up communications or removing them from their original location to an off-site location. Archiving generally does not occur while the electronic message is in transit and users may have access to their own archived messages. The journaling system may, however, be used as a communication interface to the archival system.|$|E
5000|$|The {{central point}} of {{focus in the}} cc:Mail {{architecture}} is the cc:Mail [...] "post office," [...] which {{is a collection of}} files located on the file server and consisting of the <b>message</b> <b>store</b> and related data. However, no cc:Mail software needs to be installed or run on the file server itself. The cc:Mail application is installed on the user desktops. It provides a user interface, and reads and writes to the post office files directly in order to send, access, and manage email messages. This arrangement is called a [...] "shared-file mail system" [...] (which was also implemented later in competing products such as Microsoft Mail). This is in contrast to a [...] "client/server mail system" [...] which involves a mail client application interacting with a mail server application (the latter then being the focal point of message handling). Client/server mail was added later to the cc:Mail product architecture (see below), and also became available in competing offerings (such as Microsoft Exchange).|$|E
30|$|The {{application}} includes mobile DTN networking software {{including a}} bundle routing protocol (e.g., (Schildt et al. 2011)) and our priority message forwarding mechanism (proposed in Sect. 4). We also assume that hospitals have network infrastructure {{such as an}} Emergency Medical Network or Wi-Fi network through which ambulance drivers can send <b>messages</b> <b>stored</b> in their phones to specialists in the hospital.|$|R
30|$|The {{congestion}} {{level of a}} node (expressed in seconds) is evaluated as the ratio between the total size of messages to send by the available theoretical bandwidth (cf. Equation (6)). This parameter evaluates the required time (in seconds) in order to send all the waiting <b>messages</b> <b>stored</b> in the queues, using the effective bandwidth (according {{to the number of}} neighbors).|$|R
5000|$|The IMAP {{specification}} {{has been}} criticised for being insufficiently strict and allowing behaviours that effectively negate its usefulness. For instance, the specification states that each <b>message</b> <b>stored</b> on the server has a [...] "unique id" [...] {{to allow the}} clients to identify messages they have already seen between sessions. However, the specification also allows these UIDs to be invalidated with no restrictions, practically defeating their purpose.|$|R
