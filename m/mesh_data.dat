245|354|Public
5|$|Variety and realism were focuses for the tracks: they {{featured}} visuals such as forests, Neon Cities, and Canyons, {{complete with}} obstacles. The team travelled {{to photograph the}} textures. The tracks were constructed in Softimage 3D and converted to PlayStation format <b>mesh</b> <b>data</b> using a custom tool. In response to a common criticism of the original Destruction Derby, the tracks were designed to be larger and less narrow. The team were inspired by Daytonas revolving windmills, and large jumps were implemented to add drama to the tracks. The most realistic aspect of the race tracks was the pit stop, although Edmondson stated that he limited players to one stop because the team {{did not want to}} detract from the action and because a penalty system would have added a lot of extra work. Cars nearing destruction were designed to behave in a realistic and unpredicatable fashion through effects such as losing the bonnet (hood) and catching on fire.|$|E
25|$|In 2005, Xu et al. at Rensselaer Polytechnic Institute {{used the}} 3D VIP-Man phantom to {{simulate}} respiratory motions by adopting the gated respiratory motion {{data of the}} NCAT phantom. The 4D VIP-Man Chest phantom was used to study external-beam treatment planning for a lung cancer patient. In 2007, Xu's research group reported creation {{of a series of}} polygon-based phantoms representing a pregnant woman and her fetus at the end of 3, 6, and 9 month gestations (RPI Pregnant Females). The <b>mesh</b> <b>data</b> were initially obtained from separate anatomical information sources including a non-pregnant female, a 7-month pregnant woman CT data set, and a mesh model of the fetus. In 2008, two triangular mesh-based phantoms were created, named as RPI Deformable Adult Male and Female (RPI-AM, RPI-FM). The anatomic parameters of the phantoms were made consistent with two datasets: the mass and density of internal organs originated from ICRP-23 and ICRP-89, and the whole-body height and weight percentile data were obtained from the National Health and Nutrition Examination Survey (NHANES 1999-2002). Later on, to study the relationship between breast size and lung dosimetry, a new group of phantoms were produced by altering the breast geometry of RPI-AF.|$|E
50|$|The {{triangle}} <b>mesh</b> <b>data</b> {{structure that}} OpenCTM uses is directly compatible with high performance graphics rendering pipelines, such as OpenGL, which makes {{is suitable for}} interactive computer graphics applications. Other application types, such as CAD/CAM tools, usually need to convert the <b>mesh</b> <b>data</b> into a custom mesh format for more efficient data handling.|$|E
40|$|Abstract. The {{theory of}} {{composite}} material patch winding is proposed {{to determine the}} winding trajectory by a <b>meshed</b> <b>data</b> model. The bridge condition on the concave surface is considered in this work. This paper puts forward the judgmental principles and corresponsive solutions by applying differential geometry theory and space geometry theory. To validate the feasibility of the patch winding method, the winding control code is programmed. Furthermore, the airplane inlet winding experiments are carried out...|$|R
40|$|International audienceSeveral {{approaches}} {{exist to}} provide Reverse Engineering solutions on mechanical parts. Mechanical assemblies and the expertise information retrieved {{at the same}} time with the model geometry are not really taken into account in the literature. Thus, the main challenge of this contribution is to propose a methodology to retrieve the Digital Mock-Up of a mechanical assembly from its <b>meshed</b> <b>data</b> (from digitalization). The output DMU consists of expertise information and parameterized CAD models. The methodology proposed relies on a signature by a three-level graph. It enables to provide an adequate level of details by identifying the corresponding functional surfaces in <b>meshed</b> <b>data.</b> The first-level graph is a connectivity graph; the intermediate level {{is the same as the}} first with the geometric type of face added to each node (plane, cylinder and sphere) and the deepest level corresponds to a precedence graph. This one provides information such as functional surfaces and position between them (perpendicularity, coaxiality etc.). The solutions developed and the results are presented in this paper. The methodology is illustrated thanks to an industrial use-case with a scan of an assembly with a connecting rod and a piston. The conclusion and perspectives will complete this paper...|$|R
40|$|Most of the {{multicast}} {{routing protocols}} for ad-hoc networks today {{are based on}} shared or source-based trees; however, keeping a routing tree connected {{for the purpose of}} data forwarding may lead to a substantial network overhead. A different approach to multicast routing consists of building a shared mesh for each multicast group. In multicast <b>meshes,</b> <b>data</b> packets can be accepted from any router, as opposed to trees where data packets are only accepted from routers with whom a "tree branch" has been established. The difference among multicast routing protocols based on meshes is in the method used to build these structures. Some mesh-based protocols require the flooding of sender or receiver announcements over the whole network. This paper presents the Core-Assisted Mesh Protocol, which uses <b>meshes</b> for <b>data</b> forwarding, and avoids flooding by generalizing the notion of core-based trees introduced for internet multicasting. Group members form the mesh of a group by sending join [...] ...|$|R
5000|$|Instances: Instancing {{significantly}} saves system resources, {{in particular}} memory consumption by reusing <b>mesh</b> <b>data</b> in duplicated objects.|$|E
50|$|The {{program has}} the {{function}} {{to save the}} generated <b>mesh</b> <b>data</b> in text format for use by other application programs. Other pre-processing capabilities include the following items.|$|E
5000|$|There exist many {{different}} file formats for storing polygon <b>mesh</b> <b>data.</b> Each format {{is most effective}} when used for the purpose intended by its creator.Some of these formats are presented below: ...|$|E
50|$|The simple <b>mesh</b> is {{tessellated}} <b>data</b> {{stored as}} triangles. trifans, and trisets.|$|R
5000|$|GNU Affero General Public License 3 (as {{derivative}} of AGPL'd <b>data,</b> <b>meshes,</b> textures ecc..) ...|$|R
40|$|AbstractA {{theory of}} {{composite}} material patch winding is proposed {{to determine the}} winding trajectory with a <b>meshed</b> <b>data</b> model. Two different conditions are considered in this study. One is Bridge condition on the concave surface {{and the other is}} Slip line condition in the process of patch winding. This paper presents the judgment principles and corresponding solutions by applying differential geometry theory and space geometry theory. To verify the feasibility of the patch winding method, the winding control code is programmed. Furthermore, the winding experiments on an airplane inlet and a vane are performed. From the experiments, it shows that the patch winding theory has the advantages of flexibility, easy design and application...|$|R
50|$|In applied mathematics, a doubly linked face list (DLFL) is an {{efficient}} data structure for storing 2-manifold <b>mesh</b> <b>data.</b> The structure stores linked lists for a 3D mesh's faces, edges, vertices, and corners. The structure guarantees {{the preservation of}} the manifold property.|$|E
5000|$|The {{pre-processor}} {{component of}} Calculix can generate grid {{data for the}} computational fluid dynamics programs duns, ISAAC and OpenFOAM. It can also generate input data for the commercial FEM programs Nastran, Ansys and Abaqus. [...] The pre-processor can also generate <b>mesh</b> <b>data</b> from STL files.|$|E
5000|$|Railyard {{has been}} {{discontinued}} in Trainz: A New Era, {{in favor of}} an ability to select an asset in Content Manager to open a 'preview asset window' [...] which gives a much more useful view of an asset, including <b>mesh</b> <b>data,</b> projected impact of frame rates and other performance parametrics.|$|E
40|$|Abstract—This paper {{addresses}} {{the problem of}} generic object classification from three-dimensional depth or <b>meshed</b> <b>data.</b> First, surface patches are segmented {{on the basis of}} differential geometry and quadratic surface fitting. These are represented by a modified Gaussian image that includes the well-known shape index. Learning is an interactive process in which a human teacher indicates corresponding patches, but the formation of generic classes is unaided. Classification of unknown objects is based on the measurement of similarities between feature sets of the objects and the generic classes. The process is demonstrated on a group of three-dimensional (3 -D) objects built from both CAD and laser-scanned depth data. Index Terms—Classification, object recognition, 3 -D vision. I...|$|R
40|$|We study a spline wavelet {{alternative}} direction implicit (SW-ADI) algorithm {{for solving}} two-dimensional reaction diffusion equations. This algorithm {{is based on}} a collocation method for PDEs with a specially designed spline wavelet for the Sobolev space H 2. I / on a closed interval I. By using the tensor product nature of adaptive wavelet meshes, we propose a SW-ADI method for two-dimensional prob-lems. The proposed SW-ADI method is an efficient time-dependent adaptive method with second-order accuracy for solutions with localized phenomena, such as in flame propagations. Issues like new boundary wavelets for more accurate boundary condi-tions, adaptive strategy for two-dimensional <b>meshes,</b> <b>data</b> structure and storage and implementation details, and numerical results will be discussed. c ° 1998 Academic Press 1...|$|R
30|$|The {{generation}} of a biomimetic product from a biological structure combines prescriptive and descriptive processes. At present technology {{does not allow}} us to make the transition smoothly. Finite element analysis and graphical representation (virtual reality software) utilise the 3 -D <b>meshing</b> of <b>data</b> points for differing purposes.|$|R
5000|$|A free [...] "evaluation" [...] {{version of}} FaceGen 3.5 can be {{downloaded}} from the company's website, and allows the user to create, edit, load and save files in the program's proprietary [...] ".fg" [...] format. The free version features the same functionality of the paid version, except that it is unable to export <b>mesh</b> <b>data</b> for use in generic computer-modeling programs.|$|E
5000|$|When using rapid {{prototyping}} machines, [...]stl files, {{which do not}} include anything but raw <b>mesh</b> <b>data</b> in binary (generated from Solid Works, CATIA, or other major CAD programs) need further conversion to [...]cli & [...]sli files (the format required for non stereolithography machines). Software converts [...]stl file to [...]sli files, as {{with the rest of}} the process, there can be costs associated with this step.|$|E
5000|$|The {{technique}} {{was introduced in}} 1988 by Nadia Magnenat Thalmann, Richard Laperrière, and Daniel Thalmann. This technique is used in virtually all animation systems where simplified user interfaces allows animators to control often complex algorithms and {{a huge amount of}} geometry; most notably through inverse kinematics and other [...] "goal-oriented" [...] techniques. In principle, however, the intention of the technique is never to imitate real anatomy or physical processes, but only to control the deformation of the <b>mesh</b> <b>data.</b>|$|E
40|$|International audienceView-dependent {{surface color}} of virtual objects can be {{represented}} by outgoing radiance of the surface. In this paper we tackle the processing of outgoing radiance stored as a vertex attribute of triangle <b>meshes.</b> <b>Data</b> resulting from an acquisition process can be very large and computationally intensive to render. We show that when reducing the global memory footprint of such acquired objects, smartly reducing the spatial resolution is an effective strategy for overall appearance preservation. Whereas state-of-the-art simplification processes only consider scalar or vectorial attributes, we conversely consider radiance functions defined on the surface for which we derive a metric. For this purpose, several tools are introduced like coherent radiance function interpolation, gradient computation, and distance measurements. Both synthetic and acquired examples illustrate the benefit and the relevance of this radiance-aware simplification process...|$|R
40|$|AbstractLeast-squares spline approximations can be {{calculated}} very efficiently if the data are given at the nodes of a rectangular <b>mesh.</b> If <b>data</b> values are missing at some grid points, still the algorithm {{can be used by}} fixing appropriate values for the missing data. Two simple methods are described for finding such values...|$|R
30|$|In this study, we have {{evaluated}} the subjective outcome and patient satisfaction after pelvic prolapse repair with a standardized trocar-quided polypropylene <b>mesh.</b> The <b>data</b> includes the learning curves of four senior urogynecologists. Complications and any reoperations were reported during follow-up for 1  year. A specific {{aim was to}} examine the patient-related outcomes of this technique.|$|R
50|$|Gotsman is {{best known}} for his work on online maps and aerial imagery and its {{combination}} with 3D terrain elevation data (a precursor to Google Earth), compression of 3D datasets, which was incorporated into the MPEG-4 compression standard, the use of spectral methods in geometry processing, and various methods for analyzing and processing discrete geometric data sets, in particular triangle <b>mesh</b> <b>data,</b> both static and dynamic. In recent years, Gotsman has developed a number of software applications taking advantage of the emerging new generation of range imaging cameras.|$|E
5000|$|Although FaceGen generates {{conventional}} 3D <b>mesh</b> <b>data,</b> {{it uses a}} [...] "parameterized" [...] {{approach to}} defining the properties {{that make up a}} face, and by using a fixed set of parameters it is able to morph and modify a face model independently of output resolution. FaceGen 3.3 allows the user to randomize, tween, normalize and exaggerate faces, and also includes algorithms for adjusting apparent age, ethnicity and gender. It also allows limited parametric control of facial expressions, and includes a set of phoneme expressions for the animation of characters with [...] "speaking" [...] roles.|$|E
50|$|Each dinosaur's <b>mesh</b> <b>data</b> {{was based}} on models created by Stan Winston, {{followed}} by high resolution photographs being taken of the models to help create the game's dinosaur graphics. Each of the game's dinosaur models used a maximum of 1,500 polygons, a low number for the PlayStation 2. This allowed the game more polycounts for its large levels. During the final months of development, {{one of the last}} levels designed for the game was its aviary location, which {{was based on}} a scene in the film. The game utilized motion capture technology, which was overseen by Giant Studios. The game also utilized cinematic scenes, which were created by Tigar Hare Studios.|$|E
40|$|The {{implementation}} {{is described}} of the FLOWVIS flow visualization package on a graphics supercomputer that provides real-time interactive investigation of three-dimensional CFD solutions on structured and unstructured <b>meshes.</b> The <b>data</b> structures are briefly described {{and the methods}} of visualizing flow fields are examined, including surface plots, particle paths, and planar displays in the flow field. Preliminary results using the package and work in progress are discussed...|$|R
30|$|Python API Python is an open-source, {{high-level}} computing {{language used}} for Blender’s API. This Python API is deeply integrated allowing, for example, specification {{of data and}} control over mesh elements, manipulation of the Blender interface and the drawing of custom OpenGL graphical elements over the interface itself. With the Python API it is therefore possible to create custom user interfaces to control the creation and visualisation of <b>mesh</b> based <b>data.</b>|$|R
50|$|Numerical {{methods such as}} {{the finite}} {{difference}} method, finite-volume method, and finite element method were originally defined on <b>meshes</b> of <b>data</b> points. In such a mesh, each point has a fixed number of predefined neighbors, and this connectivity between neighbors {{can be used to}} define mathematical operators like the derivative. These operators are then used to construct the equations to simulate—such as the Euler equations or the Navier-Stokes equations.|$|R
50|$|By {{identifying}} the polygons in a mesh that should {{appear to be}} smoothly connected, smoothing groups allow 3D modeling software to estimate the surface normal at any point on the mesh, by averaging the surface normals or vertex normals in the <b>mesh</b> <b>data</b> that describes the mesh. The software can use this data to determine how light interacts with the model. If each polygon lies in a plane, the software could calculate a polygon's surface normal by calculating the normal of the polygon's plane, meaning this data {{would not have to}} be stored in the mesh. Thus, early 3D modeling software like 3D Studio Max DOS used smoothing groups as a way to avoid having to store accurate vertex normals for each vertex of the mesh, as a strategy for computer representation of surfaces.|$|E
5000|$|Blender organizes data {{as various}} kinds of [...] "data blocks", such as Objects, Meshes, Lamps, Scenes, Materials, Images and so on. An object in Blender {{consists}} of multiple data blocks - for example, what the user would describe as a polygon mesh consists of at least an Object and a <b>Mesh</b> <b>data</b> block, and usually also a Material and many more, linked together. This allows various data blocks to refer to each other. There may be, for example, multiple Objects that refer to the same Mesh, and making subsequent editing of the shared mesh result in shape changes in all Objects using this Mesh. Objects, meshes, materials, textures etc. can also be linked to from other [...]blend files, which is what allows the use of [...]blend files as reusable resource libraries.|$|E
50|$|Variety and realism were focuses for the tracks: they {{featured}} visuals such as forests, Neon Cities, and Canyons, {{complete with}} obstacles. The team travelled {{to photograph the}} textures. The tracks were constructed in Softimage 3D and converted to PlayStation format <b>mesh</b> <b>data</b> using a custom tool. In response to a common criticism of the original Destruction Derby, the tracks were designed to be larger and less narrow. The team were inspired by Daytonas revolving windmills, and large jumps were implemented to add drama to the tracks. The most realistic aspect of the race tracks was the pit stop, although Edmondson stated that he limited players to one stop because the team {{did not want to}} detract from the action and because a penalty system would have added a lot of extra work. Cars nearing destruction were designed to behave in a realistic and unpredicatable fashion through effects such as losing the bonnet (hood) and catching on fire.|$|E
50|$|Meshfree methods do {{not require}} a <b>mesh</b> {{connecting}} the <b>data</b> points of the simulation domain. Meshfree methods enable the simulation of some otherwise difficult types of problems, {{at the cost of}} extra computing time and programming effort.|$|R
30|$|In this paper, {{we present}} a compression/decompression method based on CS for {{scientific}} data represented on irregular geometries and unstructured <b>meshes.</b> The <b>data</b> reconstruction (decompression) is based on Alpert tree wavelets [19, 20], suitable for irregularly spaced data. We use the stagewise orthogonal matching pursuit (StOMP) algorithm [21] as the sparse data reconstruction method. We also present adaptive algorithms that alleviate the method’s computational cost and enhance its accuracy in high-performance computing (HPC) engineering applications.|$|R
40|$|In a {{broad range}} of {{computer}} graphics applications the representation of geometric shape is based on triangle <b>meshes.</b> General purpose <b>data</b> structures for polygonal meshes typically provide fast access to geometric objects (e. g. points) and topologic entities (e. g. neighborhood relation) but the memory requirements are rather high due to the many special configurations. In this paper we present a new data structure which is specifically designed for triangle <b>meshes.</b> The <b>data</b> structure enables to trade memory for access time by either storing internal references explicitly or by locally reconstructing them on demand. The trade-off can be hidden from the programmer by an object-oriented API and automatically adapts to the available hardware resources or the complexity of the mesh (scalability). 1 Introduction Many algorithms use triangle meshes for representing geometric surfaces. The simple triangle can serve as a basic surface primitive to adaptively approximate smooth freefo [...] ...|$|R
