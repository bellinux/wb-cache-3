2|0|Public
40|$|This {{paper is}} {{concerned}} with the design of distributed decision support systems for organizations (companies, project consortiums, virtual enterprises), in which several decisionmakers have to cooperate. Typical situations {{can be found in the}} domain of the distributed management of time and resources (i. e. planning, scheduling, personal management, allocation of shared resources [...] .). Each decision-maker has some latitude that enables to accommodate himself with unpredictable changes of his environment without disturbing the overall organization, making this last more reactive. Nevertheless this autonomy must be evaluated and controlled to ensure the global consistency of local decisions. To facilitate autonomy regulations between decision-makers, we propose to design tools supporting both local problem solving and cooperation. Our approach is based on a rigorous but non-deterministic use of CSP models and constraint propagation mechanisms ([16]). The goal is the improvement of the robustness of decisions each decisionmaker imposes to others, but also, in a reversible way, to evaluate the acceptability of external decisions he must comply with. We propose some protocols associated to asynchronous communications (via mailboxes) whereby decision-makers coordinate themselves and negotiate constraints. Managing interlaced conversations and several plausible solving scenarios is a complex task that needs first a good representation of the state of decision processes. We propose a tree-structure, in which nodes represent CSP models, and branching represent constraints addition derived from internal or external hypothesis. Our communication protocols and the evolution of such CSP trees are illustrated through several scenarios in the context of the resourceconstrained <b>multi-pro</b> [...] ...|$|E
40|$|Abstra t. The use of agent based servi es in a Computational Grid is outlinedalong with parti ular {{roles that}} these agents undertake. Reasons why agents {{provide the most}} natural abstra tion for {{managing}} and supporting Grid servi es is also dis ussed. Agent servi es are divided into two broad ategories: (1) infrastru ture servi es, and (2) appli ation servi es. Infrastru ture servi es are provided by existing Grid management systems, su h as Globus and Legion, and appli ation servi es by intelligent agents. Usage s enarios are provided to demonstrate the on epts involved. 1. Introdu tion and Related Work. There has been an in rease in interest re ently within the Grid ommunity [11 ℄ towards Servi e Oriented Computing. Servi es are often seen as a natural progression from omponent based software development [6 ℄, and {{as a means to}} integrate dierent omponent development frameworks. A servi e in this ontext may be dened as a behaviour that is provided by a omponent for use by any other omponent based on a network-addressable interfa e ontra t (generally identifying some apability provided by the servi e). A servi e stresses interoperability and may be dynami ally dis overed and used. A ording to [7 ℄, the servi e abstra tion may be used to spe ify a ess to omputational resour es, storage resour es, and networks in a unied way. How the a tual servi e is implemented is hidden from the user through the servi e interfa e. Hen e, a ompute servi e may be implemented on a single or <b>multi-pro</b> essor ma hine however, these details may not be dire tly exposed in the servi e ontra t. The granularity of a servi e a...|$|E

