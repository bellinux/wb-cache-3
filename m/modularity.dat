10000|17|Public
5|$|Fodor {{revived the}} idea of <b>modularity,</b> without the notion of precise {{physical}} localizability, in the 1980s, {{and became one of}} the most vocal proponents of it with the 1983 publication of his monograph <b>Modularity</b> of Mind. Two properties of <b>modularity</b> in particular, informational encapsulation and domain specificity, make it possible to tie together questions of functional architecture with those of mental content. The ability to elaborate information independently from the background beliefs of individuals that these two properties allow Fodor to give an atomistic and causal account of the notion of mental content. The main idea, in other words, is that the properties of the contents of mental states can depend, rather than exclusively on the internal relations of the system of which they are a part, also on their causal relations with the external world.|$|E
5|$|Aspect weavers take {{instructions}} {{known as}} advice specified {{through the use}} of pointcuts and join points, special segments of code that indicate what methods should be handled by aspect code. The implementation of the aspect then specifies whether the related code should be added before, after, or throughout the related methods. By doing this, aspect weavers improve <b>modularity,</b> keeping code in one place that would otherwise have been interspersed throughout various, unrelated classes.|$|E
5|$|Following in {{the path}} paved by {{linguist}} Noam Chomsky, Fodor developed {{a strong commitment to}} the idea of psychological nativism. Nativism postulates the innateness of many cognitive functions and concepts. For Fodor, this position emerges naturally out of his criticism of behaviourism and associationism. These criticisms also led him to the formulation of his hypothesis of the <b>modularity</b> of the mind.|$|E
5|$|The Army {{wanted the}} vehicle to feature a commander’s weapons station, autocannon, coaxial weapon, and an {{anti-tank}} guided missile system. The weapons suite had to be manually operable when damaged and the commander's weapon station had to incorporate a shield. Additionally, a dismountable anti-armor weapon would be carried on board. The Army also stated that the weapon suite would emphasize <b>modularity,</b> be able to defeat other IFVs, and provide non-lethal capability to enable use in civilian environments.|$|E
5|$|The {{comparative}} {{simplicity and}} regularity of the cerebellar anatomy {{led to an}} early hope that it might imply a similar simplicity of computational function, as expressed {{in one of the}} first books on cerebellar electrophysiology, The Cerebellum as a Neuronal Machine by John C. Eccles, Masao Ito, and János Szentágothai. Although a full understanding of cerebellar function has remained elusive, at least four principles have been identified as important: (1) feedforward processing, (2) divergence and convergence, (3) <b>modularity,</b> and (4) plasticity.|$|E
5|$|Through this weaving process, aspect weavers {{allow for}} code {{which would have}} {{otherwise}} been duplicated across classes. By eliminating this duplication, aspect weavers promote <b>modularity</b> of cross-cutting concerns. Aspects define the implementation code which would have otherwise been duplicated and then use pointcuts and join points to define the advice. During weaving, the aspect weaver uses the pointcuts and join points, known as a pointcut designator, to identify the positions in candidate classes at which the implementation should be injected. The implementation is then injected into the classes at the points identified, thus permitting the code to be executed at the appropriate times without relying on manual duplication by the programmer.|$|E
5|$|After his {{military}} service, he founded a firm with Eldar Sharon (until 1964) and Alfred Neumann (until 1966). The physical {{and economic conditions}} in Israel at the time, allowed them to complete {{a fair number of}} works in a relatively brief period of time, which brought international attention. Their joint works include the Mediterranean Sea Club in Achzib (1960–1961), Dubiner House (1963), the Chaim Laskov Officer Training School (1963–1967) Bahad 1, the main officer training school of the Israel Defense Forces, just later the synagogue (1969–1971) at the same academy, and the Bat Yam city hall (1963–1969). Their designs shared aspects in common with the metabolist movement, borrowing metaphoric shapes from nature for use in planning morphological structures. The <b>modularity</b> of these works, such as the Dubiner House, provided an architectural precedent for the Habitat 67 project by Moshe Safdie.|$|E
5|$|During the game's development, {{the team}} lacked artists. The art {{director}} at Epic Games, Shane Caudle, and the artists at Digital Extremes {{could not make}} enough new textures because {{of the amount of}} diversity in characters and maps. In order to supplement the skin and texture production, Epic turned to contract artist Steve Garofalo. The game's level and content management program, UnrealEd, was written in Visual Basic and considered buggy, but no one had time to fix it. The game engine had an object-oriented design, and the scripting language, UnrealScript, was considered to be more like Java. The <b>modularity</b> of the object-oriented design meant that programmers could make large changes without affecting other parts of the game. Other tools used during development included Microsoft Visual Studio and 3D Studio Max. All of the weapon sound effects were created by Sonic Mayhem. The soundtrack for the game, which employed the system of module files, was written by Alexander Brandon, Michiel van den Bos, Andrew Sega, Dan Gardopee and Peter Hajba.|$|E
5|$|Aspect weavers' {{performance}}, {{as well as}} {{the performance}} of the code that they produce, has been a subject of analysis. It is preferable that the improvement in <b>modularity</b> supplied by aspect weaving does not impact run-time performance. Aspect weavers are able to perform aspect-specific optimizations. While traditional optimizations such as the elimination of unused special variables from aspect code can be done at compile-time, some optimizations can only be performed by the aspect weaver. For example, AspectJ contains two similar but distinct keywords, thisJoinPoint, which contains information about this particular instance of woven code, and thisJoinPointStaticPart, which contains information common to all instances of code relevant to that set of advice. The optimization of replacing thisJoinPoint with the more efficient and static keyword thisJoinPointStaticPart can only be done by the aspect weaver. By performing this replacement, the woven program avoids the creation of a join point object on every execution. Studies have shown that the unnecessary creation of join point objects in AspectJ can lead to a performance overhead of 5% at run-time, while performance degradation is only approximately 1% when this object is not created.|$|E
25|$|Aspect-oriented programming, a {{paradigm}} to increase <b>modularity</b> by isolating secondary or supporting functionality.|$|E
25|$|Speech mode {{hypothesis}} {{is the idea}} that the perception of speech requires the use of specialized mental processing. The speech mode {{hypothesis is}} a branch off of Fodor's <b>modularity</b> theory (see <b>modularity</b> of mind). It utilizes a vertical processing mechanism where limited stimuli are processed by special-purpose areas of the brain that are stimuli specific.|$|E
25|$|The <b>modularity</b> theorem – if proved for semi-stable {{elliptic}} curves – {{would mean}} that all semistable elliptic curves must be modular.|$|E
25|$|Other ways of {{modelling}} concurrent computation {{have been}} proposed, including process algebra, the actor model, and trace theory. Different models provide tradeoffs of {{concepts such as}} compositionality, <b>modularity,</b> and locality.|$|E
25|$|Seen more broadly, JIT {{can include}} methods such as: product {{standardization}} and <b>modularity,</b> group technology, total productive maintenance, job enlargement, job enrichment, flat organization and vendor rating (JIT production is {{very sensitive to}} replenishment conditions).|$|E
25|$|Experimental {{research}} {{has spawned a}} large number of hypotheses about the architecture and mechanisms of sentence comprehension. Issues like <b>modularity</b> versus interactive processing and serial versus parallel computation of analyses have been theoretical divides in the field.|$|E
25|$|Lunar Transportation Systems, Inc. is {{developing}} a new lunar architecture that {{has a number of}} advantages over current known and evolving architectures. The LTS architecture uses new innovations for <b>modularity</b> and flexibility, leading to reduced development cost, a faster development schedule, and better evolvability.|$|E
25|$|Today, subroutines {{are more}} often used to help make a program that is more structured, e.g., by {{isolating}} some algorithm or hiding some data access method. If many programmers are working on one program, subroutines are one kind of <b>modularity</b> that can help divide the work.|$|E
25|$|Much of the {{confusion}} concerning <b>modularity</b> exists in neuroscience because there is evidence for specific areas (e.g. V4 or V5/hMT+) and the concomitant behavioral deficits following brain insult (thus taken as evidence for <b>modularity).</b> In addition, evidence shows other areas are involved and that these areas subserve processing of multiple properties (e.g. V1) (thus taken as evidence against <b>modularity).</b> That these streams have the same implementation in early visual areas, like V1, is not inconsistent with a modular viewpoint: to adopt the canonical analogy in cognition, {{it is possible for}} different software to run on the same hardware. A consideration of psychophysics and neuropsychological data would suggest support for this. For example, psychophysics has shown that percepts for different properties are realized asynchronously. In addition, although achromats experience other cognitive defects they do not have motion deficits when their lesion is restricted to V4, or total loss of form perception. Relatedly, Zihl and colleagues' akinetopsia patient shows no deficit to color or object perception (although deriving depth and structure from motion is problematic, see above) and object agnostics do not have damaged motion or color perception, making the three disorders triply dissociable. Taken together this evidence suggests that even though distinct properties may employ the same early visual areas they are functionally independent. Furthermore, that the intensity of subjective perceptual experience (e.g. color) correlates with activity in these specific areas (e.g. V4), the recent evidence that synaesthetes show V4 activation during the perceptual experience of color, as well as the fact that damage to these areas results in concomitant behavioral deficits (the processing may be occurring but perceivers {{do not have access to}} the information) are all evidence for visual <b>modularity.</b>|$|E
25|$|The Global Combat Ship is {{designed}} with <b>modularity</b> and flexibility in mind to enhance versatility across {{the full range}} of operations, including maritime security, counter piracy, counter terrorist and humanitarian and disaster relief operations. The adaptable design will facilitate through-life support, ensuring upgrades can easily be undertaken as technology develops.|$|E
25|$|Evolutionary psychologists {{contend that}} {{perception}} demonstrates {{the principle of}} <b>modularity,</b> with specialized mechanisms handling particular perception tasks. For example, people with damage to a particular {{part of the brain}} suffer from the specific defect {{of not being able to}} recognize faces (prosopagnosia). Evolutionary psychology suggests that this indicates a so-called face-reading module.|$|E
25|$|In 2015, the new British pinball {{manufacturer}} Heighway Pinball {{released the}} racing themed pinball machine Full Throttle. The game has its LCD screen for scores, info and animations {{located in the}} playfield surface at player’s eye view. The game was designed with <b>modularity</b> in mind so that the playfield and artwork could be swapped out for future game titles.|$|E
25|$|The {{only way}} that both of these {{statements}} could be true, was if no solutions existed to Fermat's equation (because then no such curve could be created), which was what Fermat's Last Theorem said. As Ribet's Theorem was already proved, this meant that a proof of the <b>Modularity</b> Theorem would automatically prove Fermat's Last theorem was true as well.|$|E
25|$|Around 1955, Japanese mathematicians Goro Shimura and Yutaka Taniyama {{observed}} a possible link between two apparently completely distinct branches of mathematics, elliptic curves and modular forms. The resulting <b>modularity</b> theorem (at the time {{known as the}} Taniyama–Shimura conjecture) states that every elliptic curve is modular, meaning {{that it can be}} associated with a unique modular form.|$|E
25|$|The kernel's {{interface}} is {{a low-level}} abstraction layer. When a process makes requests of the kernel, {{it is called}} a system call. Kernel designs differ in how they manage these system calls and resources. A monolithic kernel runs all the operating system instructions in the same address space for speed. A microkernel runs most processes in user space, for <b>modularity.</b>|$|E
25|$|From 1993 to 1994, Andrew Wiles {{provided}} a {{proof of the}} <b>modularity</b> theorem for semistable elliptic curves, which, together with Ribet's theorem, {{provided a}} proof for Fermat's Last Theorem. Almost every mathematician at the time had previously considered both Fermat's Last Theorem and the <b>Modularity</b> Theorem either impossible or virtually impossible to prove, even given the most cutting edge developments. Wiles first announced his proof in June 1993 in a version that was soon recognized as having a serious gap at a key point. The proof was corrected by Wiles, partly in collaboration with Richard Taylor, and the final, widely accepted version was released in September 1994, and formally published in 1995. The proof uses many techniques from algebraic geometry and number theory, and has many ramifications in these branches of mathematics. It also uses standard constructions of modern algebraic geometry, such as the category of schemes and Iwasawa theory, and other 20th-century techniques not available to Fermat.|$|E
25|$|ETR 460 keeps {{axle load}} to an {{extremely}} low level (14.5 ton/axle) {{to allow the}} train to negotiate curves up to 35% faster than conventional Intercity trains (loco plus coaches). The body, which exploits large aluminium extrusion technology, has substantial <b>modularity</b> and allows for extremely low axle weight, whilst fully respecting the highest safety standards, and allows the best exploitation of the space with different loading gauges.|$|E
25|$|In {{cognitive}} neuroscience, visual <b>modularity</b> is {{an organizational}} concept concerning how vision works. The {{way in which}} the primate visual system operates is currently under intense scientific scrutiny. One dominant thesis is that different properties of the visual world (color, motion, form and so forth) require different computational solutions which are implemented in anatomically/functionally distinct regions that operate independently – that is, in a modular fashion.|$|E
25|$|Maintainability {{includes}} {{concepts of}} <b>modularity,</b> understandability, changeability, testability, reusability, and transferability from one development team to another. These {{do not take}} the form of critical issues at the code level. Rather, poor maintainability is typically the result of thousands of minor violations with best practices in documentation, complexity avoidance strategy, and basic programming practices that make the difference between clean and easy-to-read code vs. unorganized and difficult-to-read code.|$|E
25|$|Ribet's {{proof of}} the epsilon {{conjecture}} in 1986 accomplished {{the first of the}} two goals proposed by Frey. Upon hearing of Ribet's success, Andrew Wiles, an English mathematician with a childhood fascination with Fermat's Last Theorem, and a prior study area of elliptical equations, decided to commit himself to accomplishing the second half: proving a special case of the <b>modularity</b> theorem (then known as the Taniyama–Shimura conjecture) for semistable elliptic curves.|$|E
25|$|There {{are several}} {{formulations}} of the conjecture. Showing {{that they are}} equivalent is difficult and was a main topic of number theory {{in the second half}} of the 20th century. The <b>modularity</b> of an elliptic curve E of conductor N can be expressed also by saying that there is a non-constant rational map defined over Q, from the modular curve X0(N) to E. In particular, the points of E can be parametrized by modular functions.|$|E
25|$|Linguistic {{competence}} {{is treated as}} more comprehensive term for lexicalists, such as Jackendoff and Pustejovsky, within the generative school of thought. They assume a modular lexicon, a set of lexical entries containing semantic, syntactic and phonological information deemed necessary to parse a sentence. In the generative lexicalist view this information is intimately tied up with linguistic competence. Nevertheless, their models are still {{in line with the}} mainstream generative research in adhering to strong innateness, <b>modularity</b> and autonomy of syntax.|$|E
25|$|Entirely separately, around 1955, Japanese mathematicians Goro Shimura and Yutaka Taniyama {{suspected}} a link {{might exist}} between elliptic curves and modular forms, two completely {{different areas of}} mathematics. Known {{at the time as}} the Taniyama–Shimura–Weil conjecture, and (eventually) as the <b>modularity</b> theorem, it stood on its own, with no apparent connection to Fermat's Last Theorem. It was widely seen as significant and important in its own right, but was (like Fermat's theorem) widely considered completely inaccessible to proof.|$|E
25|$|Fermat's last theorem {{was first}} conjectured by Pierre de Fermat in 1637, famously {{in the margin}} of a copy of Arithmetica where he claimed he had a proof that was too large to fit in the margin. No {{successful}} proof was published until 1995 {{despite the efforts of}} countless mathematicians during the 358 intervening years. The unsolved problem stimulated the development of algebraic number theory in the 19th century and the proof of the <b>modularity</b> theorem in the 20th century.|$|E
25|$|While {{monolithic}} kernels execute all {{of their}} code in the same address space (kernel space) microkernels try to run most of their services in user space, aiming to improve maintainability and <b>modularity</b> of the codebase. Most kernels do not fit exactly {{into one of these}} categories, but are rather found in between these two designs. These are called hybrid kernels. More exotic designs such as nanokernels and exokernels are available, but are seldom used for production systems. The Xen hypervisor, for example, is an exokernel.|$|E
25|$|Abstraction (or <b>modularity)</b> – Types enable programmers {{to think}} {{at a higher}} level than the bit or byte, not bothering with {{low-level}} implementation. For example, programmers can begin to think of a string as a set of character values instead of as a mere array of bytes. Higher still, types enable programmers to think about and express interfaces between two of any-sized subsystems. This enables more levels of localization so that the definitions required for interoperability of the subsystems remain consistent when those two subsystems communicate.|$|E
25|$|The {{theory of}} modular forms was {{developed}} in four periods: first {{in connection with the}} theory of elliptic functions, {{in the first part of}} the nineteenth century; then by Felix Klein and others towards the end of the nineteenth century as the automorphic form concept became understood (for one variable); then by Erich Hecke from about 1925; and then in the 1960s, as the needs of number theory and the formulation of the <b>modularity</b> theorem in particular made it clear that modular forms are deeply implicated.|$|E
