795|364|Public
50|$|These higher-order <b>matcher</b> {{operations}} include logical connectives (and, or and not), {{and operations}} for iterating over collections. This {{results in a}} rich <b>matcher</b> language which allows complex assertions over collections to be written in a declarative style rather than a procedural style.|$|E
50|$|For results see SFS-Bolletinen - <b>Matcher</b> i Svenska Cupen.|$|E
50|$|The plaid <b>matcher</b> {{is powered}} by the machine's shank.|$|E
3000|$|... {{is often}} {{inadequate}} [44]. When {{a situation like}} this arises, SemLinker uses <b>matchers</b> from third parties to handle schema matching tasks. <b>Matchers</b> are classified into three groups, schema-level, instance-level, and hybrid <b>matchers</b> [45]. Schema-level <b>matchers</b> utilize the information available in input schemas to find matches between schema elements. Instance-level <b>matchers</b> use statistics, metadata, or trained classifiers to decide if the values of two schema elements match. Hybrid <b>matchers</b> combine both mechanisms to determine match candidates. Schema matching approaches are constantly evolving, and often they apply other techniques such as dictionaries, thesauri, and user-provided match or mismatch information [44].|$|R
40|$|Abstract. We {{think of}} Match as an {{operator}} which takes two graph-like structures and produces a mapping between semantically related nodes. The matching process is essentially {{divided into two}} steps: element level and structure level. Element level <b>matchers</b> consider only labels of nodes, while structure level <b>matchers</b> start from this information to consider the full graph. In this paper we present and evaluate, on the large scale real world dataset, twelve new element level semantic <b>matchers.</b> The <b>matchers</b> exploit WordNet as a background knowledge source, and return semantic relations (e. g., equivalence, more general) between concepts rather than similarity coefficients between labels in the [0, 1] range. The twelve element level semantic <b>matchers</b> are evaluated against seven {{state of the art}} matching systems. The results of the <b>matchers</b> are found comparable with the results of the matching systems. ...|$|R
40|$|Abstract. Alignments {{represent}} correspondences between entities of two ontologies. They {{are produced}} from the ontologies by ontology <b>matchers.</b> In order for <b>matchers</b> to exchange alignments and for applications to manipulate <b>matchers</b> and alignments, a minimal agreement is necessary. The Alignment API provides abstractions for {{the notions of}} network of ontologies, alignments and correspondences as well as building blocks for manipulating them such as <b>matchers,</b> evaluators, renderers and parsers. We recall {{the building blocks of}} this API and present here the version 4 of the Alignment API through some of its new features: ontology proxys, the expressive alignment language EDOAL and evaluation primitives...|$|R
50|$|For all results see SFS-Bolletinen - <b>Matcher</b> i Svenska Cupen.|$|E
5000|$|Construction of {{the failure}} {{function}} of the Aho-Corasick pattern <b>matcher.</b>|$|E
50|$|For {{results and}} tables see SFS-Bolletinen - <b>Matcher</b> i Svenska Cupen.|$|E
30|$|In this section, two base <b>matchers</b> {{that include}} minutiae-based {{algorithm}} [18] and ridge-based algorithm [19] {{will be introduced}} briefly. And in the experiment, the results are given based on the two base <b>matchers.</b>|$|R
40|$|We {{think of}} Match as an {{operator}} which takes two graph-like structures and produces a mapping between semantically related nodes. The matching process is essentially {{divided into two}} steps: element level and structure level. Element level <b>matchers</b> consider only labels of nodes, while structure level <b>matchers</b> start from this information to consider the full graph. In this paper we present various element level semantic <b>matchers,</b> and discuss their implementation within the S-Match system. The main novelty of our approach is in that element level semantic <b>matchers</b> return semantic relations (=, Ê, Í, ^) between concepts rather than similarity coefficients between labels in the [0, 1] range...|$|R
40|$|Existing set-term {{matching}} algorithms [AGS 92] for logic-based database languages, {{of which}} set terms have the commutative and idempotent properties, have several problems: Given {{a pair of}} set terms, <b>matchers</b> can only be computed sequentially and duplicated <b>matchers</b> are generated. Hence, these algorithms cannot take the advantage of existing multiple processors for computing all <b>matchers</b> in parallel. Further, duplicated <b>matchers</b> are redundant and undesirable. In order to overcome these shortcomings, we propose an improved set-term matching algorithm for LDL=NR, a logic database language for nested relations, which generates non-redundant <b>matchers</b> for a given pair of set terms in parallel. The proposed algorithm thus eliminates the sequential and redundant problems in [AGS 92]. Keywords: Logic database language, logic programming, set-term, matching, unification 1 Introduction Logic-based data languages, such as LDL [NT 89] [CGK + 90], HILOG [CC 90], HILOG-R [CK 91], LDL=PNF [Cha 93], a [...] ...|$|R
50|$|It Is fully {{entertainment}} Channel. In 2014 (October) Channel 7 {{started their}} broadcasting from Dubai. After {{a few days}} they started from Germany. Now it is from Hong Kong. Channel 7 is jointly added by <b>Matcher</b> Kathi. Kazi Md. Khalilur Rahman Nayan is the honorable Managing Director of Channel 7 HD and <b>Matcher</b> Kathi.|$|E
5000|$|Z Cards: Wine & Food <b>Matcher,</b> Wine Vintages. Wine Tasting, Wine Finder (2001) ...|$|E
50|$|Archie {{changed all}} that. It {{combined}} a script-based data gatherer, which fetched site listings of anonymous FTP files, {{with a regular}} expression <b>matcher</b> for retrieving file names matching a user query. (4) In other words, Archie's gatherer scoured FTP sites across the Internet and indexed all of the files it found. Its regular expression <b>matcher</b> provided users with access to its database.|$|E
50|$|Argument <b>matchers</b> {{are helpful}} when {{the details of}} the passing {{arguments}} are not as important as knowing if the method is being called or not. Instead of the actual arguments, some <b>matchers</b> like wildcard entries or regular expressions can be used.|$|R
40|$|Schema {{matching}} {{is recognized}} {{to be one}} of the basic operations required by the process of data and schema in-tegration. Over the years, a significant body of work was devoted to the identification of heuristics for schema match-ing. However, existing tools do not deliver satisfactory re-sults as of yet. In this work we introduce the notion of sec-ond line schema <b>matchers,</b> <b>matchers</b> that operate on the out-come of other <b>matchers</b> to improve their original outcome. We demonstrate the differences between first and second line <b>matchers</b> using examples, demonstrating the benefit of this classification. We then introduce four new second line heuristics and show their comparative performance through a thorough empirical analysis of 230 schemata. ...|$|R
50|$|Other <b>matchers</b> {{specify the}} number of {{operations}} of each type separately, while still others set a total cost but allow different weights to be assigned to different operations. Some <b>matchers</b> permit separate assignments of limits and weights to individual groups in the pattern.|$|R
5000|$|This {{algorithm}} can {{be tested}} here (Epipolar or homography geometry constrained matches): WBS Image <b>Matcher</b> ...|$|E
5000|$|OpenCog {{provides}} a basic pattern <b>matcher</b> (on hypergraphs) {{which is used}} to implement various AI algorithms.|$|E
50|$|Other {{built-in}} matchers include toBe, toBeTruthy, toBeFalsy, toContain, toBeDefined, toBeUndefined, toBeNull, toBeNaN, toBeGreaterThan, toBeLessThan, toBeCloseTo. The identity <b>matcher</b> toBe checks if {{two things}} are the same object. The condition matchers toBeTruthy, toBeFalsy evaluate if something is true or false and toBeDefined, toBeUndefined check if something is defined or undefined. As the name suggests toBeNull checks if something is null and toBeNaN checks if something is NotANumber(NaN). Precision <b>matcher</b> toBeCloseTo accepts two parameters and checks if a number {{is close to the}} first parameter, given a certain amount of decimal precision as indicated by the second parameter. <b>Matcher</b> toContain is used to verify that an element, object or sub-string is contained in an array, list or string.|$|E
40|$|Abstract. Third-eye stereo {{analysis}} evaluation compares a virtual image, derived from results obtained by binocular {{stereo analysis}}, with a recorded image {{at the same}} pose. This technique is applied for evaluating stereo <b>matchers</b> on long (or continuous) stereo input sequences where no ground truth is available. The paper provides a critical and constructive discussion of this method. The paper also introduces data measures on input video sequences as an additional tool for analyzing issues of stereo <b>matchers</b> occurring for particular scenarios. The paper also reports on extensive experiments using two top-rated stereo <b>matchers.</b> ...|$|R
40|$|Schema {{matching}} is {{a complex}} process focusing on matching between concepts describing the data in heterogeneous data sources. There is a shift from manual schema matching, done by human experts, to automatic matching, using various heuristics (schema <b>matchers).</b> In this work, we consider the problem of linearly combining {{the results of a}} set of schema <b>matchers.</b> We propose the use of machine learning algorithms to learn the optimal weight assignments, given a set of schema <b>matchers.</b> We also suggest the use of genetic algorithms to improve the process efficiency. 1...|$|R
40|$|We {{address the}} problem of {{automating}} the process of deciding whether two data schema elements match (that is, refer to the same actual object or concept), and propose several methods for combining evidence computed by multiple basic <b>matchers.</b> One class of methods uses Bayesian networks to account for the conditional dependency between the similarity values produced by individual <b>matchers</b> that use the same or similar information, so as to avoid overconfidence in match probability estimates and improve the accuracy of matching. Another class of methods relies on optimization switches that mitigate this dependency in a domain-independent manner. Experimental results under several testing protocols suggest that the matching accuracy of the Bayesian composite <b>matchers</b> can significantly exceed that of the individual component <b>matchers,</b> and the careful selection of optimization switches can improve matching accuracy even further...|$|R
50|$|She {{developed}} Manta <b>Matcher,</b> {{an online}} citizen science database for identifying individual manta rays from their unique markings.|$|E
50|$|Basic and {{advanced}} effects and filters such as noise reduction, compressor/expander, volume shaping, volume <b>matcher,</b> pitch, reverb, resampling, and parametric EQ.|$|E
50|$|Multibyte regexp - Regular {{expression}} <b>matcher</b> {{is aware}} of multibyte string; you can use multibyte characters both in patterns and matched strings.|$|E
50|$|The plaid <b>matcher's</b> {{downward}} pressure is more helpful {{than that of}} the presser foot because the plaid <b>matcher's</b> foot can slide freely forward and back in order to move with the feed dogs. Consequently {{it appears to be a}} walking foot, even though the only force it generates is downward.|$|R
40|$|Many code-generator {{generators}} use tree {{pattern matching}} and dynamic programming. This paper describes a simple program that generates <b>matchers</b> that are fast, compact, {{and easy to}} understand. It is simpler than common alternatives: 200 – 700 lines of Icon or 950 lines of C versus 3000 lines of C for Twig and 5000 for burg. Its <b>matchers</b> run up to 25 times faster than Twig’s, They are necessarily slower than burg’s BURS (bottom-up rewrite system) <b>matchers,</b> but they are more flexible and still practical. Categories and Subject Descriptors: D. 3. 4 [Programming Languages]: Processors—code gener-ation; compilers; translator writing systems and compiler generator...|$|R
50|$|Hamcrest is a {{framework}} that assists writing software tests in the Java programming language. It supports creating customized assertion <b>matchers</b> ('Hamcrest' is an anagram of 'matchers'), allowing match rules to be defined declaratively. These <b>matchers</b> have uses in unit testing frameworks such as JUnit and jMock. Hamcrest has been included in JUnit since 2012.|$|R
50|$|The G5RV antenna is a dipole with a {{symmetric}} resonant feeder line, {{which serves}} as impedance <b>matcher</b> for a 50 Ohm coax cable to the transceiver.|$|E
50|$|Examples {{using the}} Pop-11 pattern <b>matcher,</b> {{which makes it}} {{relatively}} easy for students to learn to develop sophisticated list-processing programs without having to treat patterns as tree structures accessed by 'head' and 'tail' functions (CAR and CDR in Lisp), {{can be found in}} the online introductory tutorial. The <b>matcher</b> is at the heart ofthe SimAgent (sim_agent) toolkit. Some of the powerful features of the toolkit, e.g. linking pattern variables to inline code variables, would have been very difficult to implement without the incremental compiler facilities.|$|E
50|$|Manta <b>Matcher</b> {{has already}} {{supported}} research {{that contributed to}} the listing of reef mantas (Manta alfredi) on Appendix 1 of the Convention on Migratory Species in November 2014.|$|E
40|$|Ontology {{matching}} finds correspondences between similar entities {{of different}} ontologies. Two ontologies may be similar {{in some aspects}} such as structure, semantic etc. Most ontology matching systems integrate multiple <b>matchers</b> to extract all the similarities that two ontologies may have. Thus, we face a major problem to aggregate different similarities. Some matching systems use experimental weights for aggregation of similarities among different <b>matchers</b> while others use machine learning approaches and optimization algorithms to find optimal weights to assign to different <b>matchers.</b> However, both approaches have their own deficiencies. In this paper, we will point out the problems and shortcomings of current similarity aggregation strategies. Then, we propose a new strategy, which enables us to utilize the structural information of ontologies to get weights of <b>matchers,</b> for the similarity aggregation task. For achieving this goal, we create a new Ontology Matching system which it uses three available <b>matchers,</b> namely GMO, ISub and VDoc. We have tested our similarity aggregation strategy on the OAEI 2012 data set. Experimental results show significant improvements in accuracies of several cases, especially in matching the classes of ontologies. We will compare the performance of our similarity aggregation strategy with other well-known strategie...|$|R
25|$|A {{material}} used in impedance <b>matchers</b> for transducers, {{speakers and}} range finders.|$|R
40|$|Many code {{generator}} generators use tree pattern matching and dynamic programming. This note describes a simple program that generates <b>matchers</b> that are fast, compact, {{and easy to}} understand. It is simpler than common alternatives: 200 [...] 700 lines of Icon versus 3000 lines of C for Twig and 5000 for burg. Its <b>matchers</b> run up to 25 times faster than Twig's. They are necessarily slower than burg's BURS (bottom-up rewrite system) <b>matchers</b> but they are more flexible and still practical. 1 AT&T Bell Laboratories, 600 Mountain Avenue 2 C- 464, Murray Hill, NJ 07974 2 Department of Computer Science, The University of Arizona, Tucson, AZ 85721 1 Introduction Many {{code generator}} generators use tree pattern matching and dynamic programming (DP) [3, 4]. They accept tree patterns and associated costs and semantic actions that, for example, allocate registers and emit object code. They produce tree <b>matchers</b> that make two passes over each subject tree. The first pass is bottom up and finds a set o [...] ...|$|R
