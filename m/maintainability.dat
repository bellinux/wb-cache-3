4755|0|Public
5|$|Up until version 3.6, Web was {{extensible}} with a plugin {{system called}} Web extensions. This package was {{distributed by the}} developers of Web and contained the official extensions. For version 3.8, this system was removed because of problems with stability and <b>maintainability,</b> with some popular extensions, such as ad blocking, being moved to the core application instead.|$|E
5|$|Manne {{had strong}} {{preferences}} in {{his choice of}} drum set. Those preferences, however, changed several times over his career. He began with Gretsch drums. In 1957, intrigued {{by the sound of}} a kind of drum made by Leedy (then owned by Slingerland), he had a line made for him that also became popular with other drummers. In the 1970s, after trying and abandoning many others for reasons of sound or <b>maintainability,</b> he settled on the Japanese-made Pearl Drums.|$|E
5|$|To {{provide the}} desired performance, several {{features}} {{were used in}} the RB.199. To operate efficiently across a wide range of conditions and speeds up to Mach 2, the RB.199 and several other engines make use of variable intake ramps to control the air flow. The hydraulic system is pressurised by syphoning power from both or either operational engine; the hydraulics are completely contained within the airframe rather than integrating with the engine to improve safety and <b>maintainability.</b> In case of double-engine, or double-generator, failure, the Tornado has a single-use battery capable of operating the fuel pump and hydraulics for up to 13 minutes.|$|E
5|$|The Radar System Improvement Program (RSIP) was a joint US/NATO {{development}} program. RSIP {{enhances the}} operational {{capability of the}} E-3 radars' electronic countermeasures, and dramatically improve the system's reliability, <b>maintainability,</b> and availability. Essentially, this program replaced the older transistor-transistor logic (TTL) and emitter-coupled logic (MECL) electronic components, long-since out of production, with off-the-shelf digital computers that utilised a High-level programming language instead of assembly language. Significant improvement came from adding pulse compression to the pulse-Doppler mode, replacing the old 8-bit FFT with 24-bit FFTs, and the 12-bit A/D (Sign + 12-bits) with a 15-bit A/D (Sign + 15-bits). These hardware and software modifications improve the E-3 radars' performance, providing enhanced detection with an emphasis towards low radar cross-section (RCS) targets.|$|E
5|$|Marco Pesenti Gritti, the {{initiator}} of Galeon, {{originally developed}} Epiphany in 2002 as a fork of Galeon. The fork occurred {{because of the}} divergent aims of Gritti {{and the rest of}} Galeon development team about new features. While Gritti regarded Galeon's monolithic design and the number of user-configurable features as factors limiting Galeon's <b>maintainability</b> and user base expansion, the rest of the Galeon developers wanted to see more features added. At the same time the GNOME project created the GNOME human interface guidelines, which promoted simplification of user interfaces. As Galeon was oriented towards power users, most developers saw the implementation of those guidelines as unacceptable. As a result, Gritti created a new browser based on Galeon's codebase, with most of the non-mission-critical features removed. He intended Epiphany to comply fully with the GNOME human interface guidelines, with a very simple user-interface. As such, Epiphany does not have its own theme settings and uses GNOME's settings, which are specified in the GNOME Control Center.|$|E
5|$|In December 2006, the Center for Naval Analyses {{released}} a report on U.S. small arms in combat. The CNA conducted surveys on 2,608 troops returning from combat in Iraq and Afghanistan over the past 12 months. Only troops who fired their weapons at enemy targets were allowed to participate. 341 troops were armed with M249 SAWs, making up 13 percent of the survey. 71 percent of M249 users (242 troops) {{reported that they were}} satisfied with the weapon. 40 percent of users preferred feeding the SAW with the soft 100-round pouch, while 21 percent chose the soft and hard 200-round pouches each. 60 percent (205 troops) were satisfied with handling qualities, such as handguards, size, and weight - of those dissatisfied, just under half thought that it was too heavy. M249 users had the lowest levels of satisfaction with weapon <b>maintainability</b> at 70 percent (239 troops), most due to the difficulty in removing and receiving small components and poor corrosion resistance. The SAW had the highest levels of stoppages at 30 percent (102 troops), and 41 percent of those that experienced a stoppage said it had a large impact on their ability to clear the stoppage and re-engage their target. 65 percent (222 troops) did not need their machine guns repaired while in theater. 65 percent (222 troops) were confident in the M249's reliability, defined as level of soldier confidence their weapon will fire without malfunction, and 64 percent (218 troops) were confident in its durability, defined as level of soldier confidence their weapon will not break or need repair. Both factors were attributed to high levels of soldiers performing their own maintenance. 60 percent of M249 users offered recommendations for improvements. 17 percent of requests were for making the weapon lighter, and another 17 percent were for more durable belt links and drums, as well as other modifications, such as a collapsible stock.|$|E
25|$|<b>Maintainability</b> {{is closely}} related to Ward Cunningham's concept of {{technical}} debt, which is an expression of the costs resulting of a lack of <b>maintainability.</b>|$|E
25|$|Maintainability: <b>Maintainability</b> {{includes}} {{the notion of}} adaptability, portability and transferability (from one development team to another). Measuring and monitoring <b>maintainability</b> is a must for mission-critical applications where change is driven by tight time-to-market schedules {{and where it is}} important for IT to remain responsive to business-driven changes. It is also essential to keep maintenance costs under control.|$|E
25|$|<b>Maintainability</b> {{includes}} {{concepts of}} modularity, understandability, changeability, testability, reusability, and transferability from one development team to another. These {{do not take}} the form of critical issues at the code level. Rather, poor <b>maintainability</b> is typically the result of thousands of minor violations with best practices in documentation, complexity avoidance strategy, and basic programming practices that make the difference between clean and easy-to-read code vs. unorganized and difficult-to-read code.|$|E
25|$|Besides, the EME has a Station Workshop, which {{provides}} repair and maintenance support to various Defence establishments located in Bengaluru and four <b>Maintainability</b> Advisory Groups (MAGs) with public sector undertakings. The MAGs {{act as a}} link between the Army and industries engaged in Defence production. They are BEL, ITI, HAL, and LRDE. The MAGs look into aspects related to <b>maintainability</b> during design development and in-service phase of equipment being introduced or in use in the Army.|$|E
25|$|Simple {{processes}} {{become increasingly}} programmable and dynamic, using a DevOps approach. DevOps aims {{to maximize the}} predictability, efficiency, security, and <b>maintainability</b> of operational processes. Very often, automation supports this objective.|$|E
25|$|The {{mandatory}} use {{of these}} standards will aid significantly in achieving standardization and result in improvements in availability, <b>maintainability,</b> reliability, and supportability. This, in turn, will enhance lifecycle configuration management and logistic support with subsequent reductions in life cycle costs.|$|E
25|$|Software {{structural}} quality {{refers to}} how it meets non-functional requirements that support the delivery of the functional requirements, such as robustness or <b>maintainability.</b> It {{has a lot more}} to do with the degree to which the software works as needed.|$|E
25|$|Choosing {{packaging}} machinery {{includes an}} assessment of technical capabilities, labor requirements, worker safety, <b>maintainability,</b> serviceability, reliability, ability to integrate into the packaging line, capital cost, floorspace, flexibility (change-over, materials, etc.), energy requirements, quality of outgoing packages, qualifications (for food, pharmaceuticals, etc.), throughput, efficiency, productivity, ergonomics, return on investment, etc.|$|E
25|$|Reasons for why <b>maintainability</b> is low can be {{classified}} as reckless vs. prudent and deliberate vs. inadvertent, and often {{have their origin in}} developers' inability, lack of time and goals, their carelessness and discrepancies in the creation cost of and benefits from documentation and, in particular, maintainable source code.|$|E
25|$|As the A-6 Intruder was {{retired in}} the 1990s, its role was filled by the F/A-18. The F/A-18 {{demonstrated}} its versatility and reliability during Operation Desert Storm, shooting down enemy fighters and subsequently bombing enemy targets {{with the same}} aircraft on the same mission. It broke records for tactical aircraft in availability, reliability, and <b>maintainability.</b>|$|E
25|$|Based on the {{combination}} of safety, performance and <b>maintainability,</b> the Rover 75 was found in 2011 to be the cheapest car to insure in the United Kingdom across all age groups. Based on fuel efficiency and lower taxes, the Rover 75 was found in 2011 {{to be the most}} cost effective diesel in its class.|$|E
25|$|Size: While not {{a quality}} {{attribute}} per se, the sizing of source code is a software characteristic that obviously impacts <b>maintainability.</b> Combined with the above quality characteristics, software size {{can be used}} to assess the amount of work produced and to be done by teams, as well as their productivity through correlation with time-sheet data, and other SDLC-related metrics.|$|E
25|$|Newer {{proposals}} for quality models such as Squale and Quamoco propagate a direct {{integration of the}} definition of quality attributes and measurement. By breaking down quality attributes or even defining additional layers, the complex, abstract quality attributes (such as reliability or <b>maintainability)</b> become more manageable and measurable. Those quality models have been applied in industrial contexts but have not received widespread adoption.|$|E
25|$|Historically, the structure, {{classification}} and terminology of {{attributes and}} metrics applicable to software quality management have been derived or {{extracted from the}} ISO 9126-3 and the subsequent ISO 25000:2005 quality model, also known as SQuaRE. Based on these models, the Consortium for IT Software Quality (CISQ) has defined five major desirable structural characteristics needed {{for a piece of}} software to provide business value: Reliability, Efficiency, Security, <b>Maintainability</b> and (adequate) Size.|$|E
25|$|While {{monolithic}} kernels execute all {{of their}} code in the same address space (kernel space) microkernels try to run most of their services in user space, aiming to improve <b>maintainability</b> and modularity of the codebase. Most kernels do not fit exactly {{into one of these}} categories, but are rather found in between these two designs. These are called hybrid kernels. More exotic designs such as nanokernels and exokernels are available, but are seldom used for production systems. The Xen hypervisor, for example, is an exokernel.|$|E
25|$|The OLPC {{project has}} been the subject of {{extensive}} praise and criticism. It was praised for enabling low-cost, low-power machines; for assuring consensus at ministerial level in many countries that computer literacy is a mainstream part of education; for creating interfaces that worked without literacy in any language, and particularly without literacy in English. It has been criticized from many sides regarding its US-centric focus that ignores bigger problems, high total costs that may actually even be quite cost-ineffective, low focus on <b>maintainability</b> and training and its limited success so far.|$|E
25|$|Reliability {{engineering}} is {{the discipline of}} ensuring a system meets customer expectations for reliability throughout its life; i.e., it does not fail more frequently than expected. Next to prediction of failure {{it is just as}} much about prevention of failure. Reliability engineering applies to all aspects of the system. It is closely associated with <b>maintainability,</b> availability (dependability or RAMS preferred by some), and logistics engineering. Reliability {{engineering is}} always a critical component of safety engineering, as in failure modes and effects analysis (FMEA) and hazard fault tree analysis, and of security engineering.|$|E
25|$|The F-15 Multistage Improvement Program (MSIP) was {{initiated}} in February 1983 {{with the first}} production MSIP F-15C produced in 1985. Improvements included an upgraded central computer; a Programmable Armament Control Set, allowing for advanced versions of the AIM-7, AIM-9, and AIM-120A missiles; and an expanded Tactical Electronic Warfare System that provides improvements to the ALR-56C radar warning receiver and ALQ-135 countermeasure set. The final 43 F-15Cs included the Hughes APG-70 radar developed for the F-15E; these are sometimes referred as Enhanced Eagles. Earlier MSIP F-15Cs with the APG-63 were upgraded to the APG-63(V)1 to improve <b>maintainability</b> and to perform similar to the APG-70. Existing F-15s were retrofitted with these improvements.|$|E
25|$|Procedural {{programming}} {{is a type}} of imperative programming in which the program is built from one or more procedures (also termed subroutines or functions). The terms are often used as synonyms, but the use of procedures has a dramatic effect on how imperative programs appear and how they are constructed. Heavily-procedural programming, in which state changes are localized to procedures or restricted to explicit arguments and returns from procedures, is a form of structured programming. From the 1960s onwards, structured programming and modular programming in general have been promoted as techniques to improve the <b>maintainability</b> and overall quality of imperative programs. The concepts behind object-oriented programming attempt to extend this approach.|$|E
25|$|The AW119 is a {{single-engine}} multirole helicopter, AgustaWestland {{promote the}} type as possessing excellent flight qualities {{with high levels}} of controllability, maneuverability and inherent safety. The design of the rotorcraft is derived from Agusta's earlier and highly successful A109 helicopter, differing primarily by only being equipped with a single engine (as the A109 was originally designed), a Pratt & Whitney PT6B-37A turboshaft engine, and using fixed skids in place of the A109's retractable wheeled landing gear arrangement. The AW119 shares the same cockpit and cabin of the AW109, along with commonality with various other systems, while costing roughly half of the latter's price tag. According to Flight International, the AW119 is competitively priced and provides good levels of accessibility, <b>maintainability,</b> comfort, noise levels, and speed.|$|E
25|$|The Air Training Command's (ATC) successor, the Air Education and Training Command (AETC), {{uses the}} T-38C to prepare pilots for the F-15C Eagle and F-15E Strike Eagle, the F-16 Fighting Falcon, B-52 Stratofortress, B-1B Lancer, B-2 Spirit, A-10 Thunderbolt, F-22 Raptor and F-35 Lightning II. The AETC {{received}} T-38Cs in 2001 {{as part of}} the Avionics Upgrade Program. The T-38Cs owned by the AETC have undergone propulsion modernization which replaces major engine components to enhance reliability and <b>maintainability,</b> and an engine inlet/injector modification to increase available takeoff thrust. These upgrades and modifications, with the Pacer Classic program, should extend the service life of T-38s past 2020. The T-38 has an availability goal of 75% which it maintained in 2011, however in 2015 availability is 60%.|$|E
25|$|However, the {{distinction}} between measuring and improving software quality in an embedded system (with emphasis on risk management) and software quality in business software (with emphasis on cost and <b>maintainability</b> management) is becoming somewhat irrelevant. Embedded systems now often include a user interface and their designers are as much concerned with issues affecting usability and user productivity as their counterparts who focus on business applications. The latter are in turn looking at ERP or CRM system as a corporate nervous system whose uptime and performance are vital {{to the well-being of}} the enterprise. This convergence is most visible in mobile computing: a user who accesses an ERP application on their smartphone is depending on the quality of software across all types of software layers.|$|E
25|$|The first {{production}} Short 360 had its {{maiden flight}} on 19 August 1982 and entered service with Suburban Airlines (later merged with Allegheny Airlines/US Airways) in November 1982. Building on {{the strengths and}} reputation of its 330 antecedent, the 360s found a niche in regional airline use worldwide, being able to operate comfortably from 4,500ft (1,400 m) runways – opening up hundreds of airfields {{that would otherwise be}} inaccessible to airliners. With a cruise speed about 215mph (370km/h), at an altitude of 10,000ft (3,048 m), the unpressurized 360 was not the fastest turboprop in its market but it offered acceptable performance at a reasonable price combined with ease of service and <b>maintainability.</b> The PT6A turboprops are fully ICAO Stage 3 noise-compliant, making the 360 one of the quietest turboprop aircraft operating today. Production of the 360 ceased in 1991 after 165 deliveries. In 1998, approximately 110 360s were in service. In 2009 a retired Emerald Airlines 360 was bought by Kingsland Primary School in Stoke-on-Trent, for use as a mobile classroom.|$|E
500|$|Furthermore, C# {{has added}} several major {{features}} to accommodate functional-style programming, {{culminating in the}} LINQ extensions released with C# 3.0 and its supporting framework of lambda expressions, extension methods, and anonymous types. [...] These features enable C# programmers to use functional programming techniques, such as closures, when it is advantageous to their application. The LINQ extensions and the functional imports help developers {{reduce the amount of}} boilerplate code that is included in common tasks like querying a database, parsing an xml file, or searching through a data structure, shifting the emphasis onto the actual program logic to help improve readability and <b>maintainability.</b>|$|E
2500|$|Assessing <b>maintainability</b> {{requires}} {{checking the}} following software engineering best practices and technical attributes: ...|$|E
2500|$|The B2M1 entered {{service with}} the Imperial Japanese Navy in March 1932, serving aboard the {{carriers}} , [...] and [...] Modifications to improve <b>maintainability</b> {{resulted in the}} B2M2 or Navy Type 89-2 Carrier Attack Plane, which otherwise showed little improvement in performance over the B2M1. Production of both versions totalled 204 aircraft.|$|E
2500|$|In some cases, however, {{optimization}} {{relies on}} using more elaborate algorithms, {{making use of}} [...] "special cases" [...] and special [...] "tricks" [...] and performing complex trade-offs. A [...] "fully optimized" [...] program might {{be more difficult to}} comprehend and hence may contain more faults than unoptimized versions. Beyond eliminating obvious antipatterns, some code level optimizations decrease <b>maintainability.</b>|$|E
2500|$|Optimizing {{existing}} code {{usually does}} not add new features, and worse, it might add new bugs in previously working code (as any change might). Because manually optimized code might sometimes have less [...] "readability" [...] than unoptimized code, optimization might impact <b>maintainability</b> {{of it as}} well. Optimization {{comes at a price}} and {{it is important to be}} sure that the investment is worthwhile.|$|E
2500|$|The B-2's combat use preceded a U.S. Air Force {{declaration}} of [...] "full operational capability" [...] in December 2003. The Pentagon's Operational Test and Evaluation 2003 Annual Report {{noted that the}} B-2's serviceability for Fiscal Year 2003 was still inadequate, mainly due to the <b>maintainability</b> of the B-2's low observable coatings. The evaluation {{also noted that the}} Defensive Avionics suite had shortcomings with [...] "pop-up threats".|$|E
2500|$|In Prolog, loading code is {{referred}} to as consulting. [...] Prolog can be used interactively by entering queries at the Prolog prompt ?-. [...] If there is no solution, Prolog writes no. [...] If a solution exists then it is printed. [...] If there are multiple solutions to the query, then these can be requested by entering a semi-colon. [...] There are guidelines on good programming practice to improve code efficiency, readability and <b>maintainability.</b>|$|E
