0|46|Public
5000|$|... #Subtitle level 3: The <b>Migrating</b> Native Peoples <b>Program</b> 1972-1982 ...|$|R
40|$|Offloading is an {{effective}} method to <b>migrate</b> <b>programs</b> from mobile devices to cloud, but it critically depends on network and cloud conditions. We suggest that the mobile device does not directly communicate with a distant cloud, but instead, with a nearby cloudlet acting as an intermediate node. Such a cloudlet-based offloading system is modeled and analyzed {{with respect to the}} state transition process with failures. In addition, we evaluated the failure and repair time, and four types of execution time as well. The numerical results reveal that in environments characterized by higher reachability of cloudlet and cloud, longer connection time or even larger speedup factor F, this scheme benefits from reduced execution time...|$|R
50|$|October 1, 1975: TV Shin-Hiroshima System (TSS) starts broadcasting. Fuji TV network <b>programming</b> <b>migrates</b> {{to the new}} station.|$|R
40|$|Abstract. Gradual type systems {{offer the}} {{possibility}} of <b>migrating</b> <b>programs</b> in dynamically-typed languages to more statically-typed ones. There is little evidence yet that large, real-world dynamically-typed <b>programs</b> can be <b>migrated</b> with a large degree of automation. Unfortunately, since these systems typically lack principal types, fully automatic type inference is beyond reach. To combat this challenge, we propose using logs from run-time executions to assist inference. As a first step, {{in this paper we}} study how to use run-time logs to improve the efficiency of a type inference algorithm for a small language with first-order functions, records, parametric polymorphism, subtyping, and bounded quantification. Handling more expressive features in order to scale up to gradual type systems for dynamic languages is left to future work. ...|$|R
40|$|Binary {{translation}} {{acts as a}} main {{method used}} to solve software compatibility among different instruction set architectures (ISAs), yet the main objects that the binary translator deals with are serial programs but not parallel programs. We propose a hybrid method combining local library replacement and instruction translation based on a formal model built to describe the equivalent when <b>migrating</b> MPI <b>programs</b> between different clusters. The shared codes in a MPI program (MPI library function call) are treated by executing local libraries, and the other parts are done by dynamic binary translation. Also, {{during the course of}} dealing with local library functions, we propose a method of program flow redirection by designing two algorithms along with hierarchically encapsulating local libraries. A framework called MPI-QEMU is designed to implement <b>migrating</b> MPI <b>program</b> of 64 bits from X 86 - 64 /Linux platform to the domestic SW platform which is verified by experiment...|$|R
40|$|Chip {{design is}} at an {{inflection}} point. It {{is now clear that}} chip multiprocessors (CMPs) will dominate product offerings for the forseeable future. Such designs integrate many processing cores onto a single chip. However, debate remains about the relative merits of explicit software threading necesary to use these designs. At the same time, the pursuit of improved performance for single threads must continue, as legacy applications and hard-to-parallelize codes will remain important. These concerns lead computer architects to a quandary with each new design. Too much focus on per-core performance will fail to encourage software (and software developers) to <b>migrate</b> <b>programs</b> toward explicit concurrency; too little focus on cores will hurt performance of vital existing applications. Furthermore, because future chips will be constrained by power, it may not be possible to deploy both aggressive cores and many hardware threads in the same chip. To address the need for chips delivering both high single-thread performance and many hardware threads, this thesis evaluates ScalableCoresinChipMultiprocessors:CMPsequippedwith cores that deliver high-performance (at high per-core power) when the situation merits, but can also operate at lower-power modes, to enable concurrent execution of many threads. Toward this vision, I make several contributions. First, I discuss a method for representing inter-instructio...|$|R
40|$|We {{introduce}} a new genre of user interface applications that can migrate from one machine to another, taking their user interface and application contexts with them, and continue from where they left off. Such applications are not tied to one user or one machine, and can roam freely over the network, rendering service to a community of users, gathering human input and interacting with people. We envisage that this will support many new agent-based collaboration metaphors. The ability to <b>migrate</b> executing <b>programs</b> has applicability to mobile computing as well. Users ca...|$|R
5000|$|Mach 4 {{attempted}} {{to address these}} problems, {{this time with a}} more radical set of upgrades. In particular, it was found that program code was typically not writable, so potential hits due to copy-on-write were rare. Thus it made sense to not map the memory between programs for IPC, but instead <b>migrate</b> the <b>program</b> code being used into the local space of the program. This led to the concept of [...] "shuttles" [...] and it seemed performance had improved, but the developers moved on with the system in a semi-usable state. Mach 4 also introduced built-in co-location primitives, making it a part of the kernel itself.|$|R
30|$|Integrity of the ‘home’ track. Students in the ‘home’ {{track of}} a two-track school would be {{unlikely}} to <b>migrate</b> if the <b>program</b> were carefully designed. Graduates of any such program are unlikely to successfully migrate if their skills are not custom-designed for accreditation at the destination, if they receive no specialized language training, and if their work visas are not facilitated {{in the context of a}} bilateral agreement.|$|R
40|$|In this {{dissertation}} {{the researcher}} developed the methodology for {{the migration of}} computer programs from a legacy architecture to client/server architecture. System migrations have failed frequently, and even so-called successful migrations may have serious usability problems. Additional difficulties include missing documentation of the existing program(s), the persons who developed the existing system are not available for consultation, and, frequently, there are important operational and economic issues that must be considered. The client/server environment {{is quite different from}} the source environment; the operating system and implementation languages have changed, and system requirements may have been greatly expanded, frequently including the Internet. User interface equipment and techniques are more comprehensive, system response times may be more demanding, significant software system components may be purchased instead of developed in-house, and other elements of the operating theater may be either entirely new or greatly revised. The methodology for developing systems has evolved significantly. In order to make use of the advantages of client/server equipment, new concepts will need to be embodied in the <b>migrated</b> <b>program,</b> such as the use of middleware, object technology to permit the development of higher quality software, and the separation of functionality into server-side and client-side procedures. This dissertation identifies those factors that most critically affect the possibility of success or of failure in the migration. These factors will make it possible to lessen or eliminate the potential for failure. In addition, this dissertation will provide a model for the conversion of legacy systems to more reliable and scalable client/server systems. For this dissertation, the researcher gathered published material relating to the migration of computer systems from one hardware/software platform to a second. Some of the material discussed the conversion process itself. Other material described successes, failures, general techniques and approaches to the migration. Still others discussed nontechnical aspects, including the creation of migration teams and user training. From this material, the most pertinent factors were identified, and from them, a plan of success was developed. That plan of success is this dissertation...|$|R
40|$|In {{the last}} three years we have been working with {{persistence}} and distribution, in particular migration of higher-level objects between autonomous persistent programs. In this chapter we introduce persistence and then present a few examples of opportunities and many more challenges that exist in the combination of persistence and mobility. 1 Introduction Mobile objects are active objects that <b>migrate</b> between <b>programs.</b> These active objects are commonly implemented as procedures, instances of classes or abstract data types, or threads. A persistent program is a program written in a language that permits to create and manipulate objects independent of their life time (see section 2). The main motivation for the research work described here is our perception that persistence has not been properly addressed by the research community studying mobile objects. Persistence is important because many of the examples for mobile object applications presented in the literature include local or re [...] ...|$|R
50|$|The {{concept of}} a process is not {{introduced}} in this report as processes are a well-known design in operating systems. Process Migration refers to the mobility of executing (or suspended) processes in a distributed computing environment. Usually, this term indicates that a process uses a network to migrate to another machine to continue its execution there. Sometimes the term is {{used to describe the}} change in execution from one processor to another processor within the same machine. I will use process migration in the first context - <b>programs</b> <b>migrating</b> between machines.|$|R
40|$|In {{the last}} three years we have been working with {{persistence}} and distribution, in particular migration of higher-level objects (such as procedures) between autonomous persistent programs. In this paper we introduce persistence and the suitability of Napier 88 [...] - the persistent system we have used for our experiments [...] - as an agent language. We then present a few examples of opportunities and many more challenges that exist in the combination of persistence with agents. 1 Introduction Mobile agents are active objects that <b>migrate</b> between <b>programs.</b> These active objects are commonly implemented as procedures, instances of classes or abstract data types, or threads. A persistent program is a program written in a language that permits to create and manipulate objects independent of their life time (see section 2). The main motivation for this paper is our perception that free variables and persistence have not been properly addressed by the agent research community. Persistence is impor [...] ...|$|R
40|$|Abstract: Refactoring of {{information}} systems is hard, for two reasons. On the one hand, large databases exist which have to be adjusted. On the other hand, many programs access that data. These programs {{all have to be}} migrated in a consistent manner such that their semantics does not change. It cannot be relied upon, however, that no running processes exist during such a migration. Consequently, a refactoring of an information system needs {{to take care of the}} migration of data, programs, and processes. This paper extends the model described in [SLK 10] by operations, messages, and methods, which allows to model complete object-oriented systems. 1 Methods are expressed by special double-pushout graph transformations. Homomorphisms are used for the typing of the instance level as well as for the description of refactorings which specify the addition, folding, and unfolding of schema elements. Finally, a categorical framework is presented which allows to derive instance migrations from schema transformations in such a way that programs and processes to the old schema are correctly <b>migrated</b> into <b>programs</b> and processes to the new schema...|$|R
50|$|In September 1998, due to {{the trend}} of children's <b>programs</b> <b>migrating</b> more toward cable {{channels}} such as Turner's Cartoon Network, WTBS dropped cartoons from its schedule entirely and began focusing on feature films, sitcoms from the 1980s and 1990s, and a few drama series. As the 1990s and 2000s wore on, the station began to more closely resemble a basic cable channel than a superstation. Outside of Braves baseball, the only Atlanta-centric programming seen on WTBS by 2002 {{was a pair of}} public affairs shows on weekend mornings that were only broadcast over WTBS, and were replaced on the national feed by acquired television series.|$|R
40|$|Abstract. Refactoring of {{information}} systems is hard, for two reasons. On the one hand, large databases exist which have to be adjusted. On the other hand, many programs access that data. These programs {{all have to be}} migrated in a consistent manner such that their semantics does not change. It cannot be relied upon, however, that no running processes exist during such a migration. Consequently, a refactoring of an information system needs {{to take care of the}} migration of data, programs, and processes. This paper introduces a model for complete object-oriented systems, describing the schema level with classes, associations, operations, and inheritance as well as the instance level with objects, links, methods, and messages. Methods are expressed by special double-pushout graph transformations. Homomorphisms are used for the typing of the instance level as well as for the description of refactorings which specify the addition, folding, and unfolding of schema elements. Finally, a categorial framework is presented which allows to derive instance migrations from schema transformations in such a way that programs and processes to the old schema are correctly <b>migrated</b> into <b>programs</b> and processes to the new schema. ...|$|R
40|$|Aspect Oriented Programming (AOP) {{is a new}} program-ming {{paradigm}} {{that offers}} a novel modularization unit for the crosscutting concerns. Functionalities originally spread across several modules and tangled with each other can be factored out into a single, separate unit, called an aspect. The source code fragments introduced to port an exist-ing application to a distributed environment (such as Java RMI) are typically scattered and tangled, thus representing an ideal candidate for the usage of aspects. In this paper, we propose a distribution framework based on AOP and we describe the steps necessary to <b>migrate</b> an existing <b>program</b> to it. In our solution, the original application remains obliv-ious of the distribution concern and all required aspects are generated automatically. The approach was validated on a case study. ...|$|R
40|$|In an {{age where}} {{training}} and knowledge are easily accessible online, textbooks, lecture slides and other class materials have <b>migrated</b> to online <b>programs.</b> Online programs are becoming easier to maintain for professors and administrators and offer some convenience and efficiency that traditional classroom lectures do not. It is widely assumed that students who {{have grown up with}} cell phones, email accounts, social media, iPods, Google and laptops easily identify with internet based applications. This research studies a group of over 30 university students seeking to develop skill-­‐sets to prepare them for entering the workforce through participation in an online and traditional classroom experience. This research can be used by professors seeking to develop presentation mediums that will most effectively teach students in skill-­‐based curriculums...|$|R
50|$|On January 24, 2006, CBS Corporation (the {{parent company}} of UPN) and the Warner Bros. unit of Time Warner {{announced}} that The WB and UPN would be shut down that September and have some of their higher-rated <b>programs</b> <b>migrated</b> onto a new jointly owned network called The CW. On February 22, News Corporation {{announced that it would}} start up another new network called MyNetworkTV. This new service, which would be a sister network to Fox, would be operated by Fox Television Stations and its syndication division, Twentieth Television. MyNetworkTV was created in order to give stations affiliated with UPN and The WB that were not mentioned as becoming CW affiliates another option besides becoming independent stations, as well as to compete against The CW.|$|R
40|$|<b>Migrating</b> {{sequential}} <b>programs</b> {{to effectively}} utilize next generation multicore architectures {{is a key}} challenge facing application developers and implementors. Languages like Java that support complex control- and dataflow abstractions confound classical automatic parallelization techniques. On the other hand, introducing multithreading and concurrency control explicitly into programs can impose a high conceptual burden on the programmer, and may entail a significant rewrite of the original program. In this paper, we consider a new technique to address this issue. Our approach makes use of futures, a simple annotation that introduces asynchronous concurrency into Java programs, but provides no concurrency control. To ensure concurrent execution does not yield behavior inconsistent with sequential execution (i. e., execution yielded by erasing all futures), we present a new interprocedural summary-based dataflow analysis. The analysis inserts lightweight barriers that block and resume threads executing futures if a dependency violation may ensue. There are no constraints on how threads execute other than those imposed by these barriers. Our experimental results indicate futures can be leveraged to transparently ensure safety and profitably exploit parallelism; in contrast to earlier efforts, our technique is completely portable, and requires no modifications to the underlying JVM. Categories and Subject Descriptors D. 3. 3 [Programming Languages]: Language Constructs and Features—Concurrent programmin...|$|R
40|$|AbstractA {{novel and}} unified {{approach}} for reliable distributed and parallel computing using mobile agents is introduced. The agents can be deployed in large scale and hierarchical network environments crossing barriers transparently. The networks can consist of high- and low-resource nodes ranging from generic computers to microchips, and the supported network classes range from body area networks to the Internet including {{any kind of}} sensor and ambient network. Agents are represented by mobile program code that can be modified at run-time. The presented approach enables the development of sensor clouds and smart systems of the future integrated in daily use computing environments and the Internet. Agents can migrate between different hardware and software platforms by <b>migrating</b> the <b>program</b> code of the agent, embedding {{the state and the}} data of an agent, too. The entire information exchange and coordination of agents with other agents and the environment is performed by using a tuple space database. Beside architecture specific hardware and software implementations of the agent processing platform, there is a JavaScript (JS) implemen- tation layered {{on the top of a}} distributed management layer. The JS platform enables the integration of Multi-agent Systems (MAS) in Internet server and application environments (e. g., WEB browser). Agents can migrate transparently between hardware-level sensor networks and WEB browser applications or network servers and vice versa without any transformation required...|$|R
50|$|ABC's {{affiliation}} {{agreement with}} KTVK did not expire until December 31, 1994; however, KTVK {{had already begun}} to drop ABC shows from its schedule, unhappy about losing its affiliation with the network after 41 years. As a result, ABC's <b>programming</b> <b>migrated</b> to KNXV in stages, and the station carried programming from both ABC and Fox for a while, with ABC as a temporary secondary affiliation. Good Morning America was the first ABC program to move to KNXV, following the first round of changes at the end of August 1994. KNXV then picked up Mike and Maty, World News Now, Nightline and ABC's Saturday morning cartoons when the station officially dropped its Fox affiliation on December 15. The rest of ABC's programming moved to KNXV on January 9, 1995. KNXV kept about one-third of its syndicated programming, with the rest moving to other area stations.|$|R
40|$|SummaryThe Hedgehog (Hh) {{family of}} {{morphogenetic}} proteins has important instructional roles in metazoan development and human diseases. Lipid modified Hh {{is able to}} <b>migrate</b> to and <b>program</b> cells far away from its site of production despite being associated with membranes. To investigate the Hh spreading mechanism, we characterized Shifted (Shf) as a component in the Drosophila Hh pathway. We show that Shf is the ortholog of the human Wnt inhibitory factor (WIF), a secreted antagonist of the Wingless pathway. In contrast, Shf is required for Hh stability and for lipid-modified Hh diffusion. Shf colocalizes with Hh in the extracellular matrix and interacts with the heparan sulfate proteoglycans (HSPG), leading us to suggest that Shf could provide HSPG specificity for Hh. We also show that human WIF inhibits Wg signaling in Drosophila without affecting the Hh pathway, indicating that different WIF family members might have divergent functions in each pathway...|$|R
40|$|The {{purpose of}} this paper is threefold. First, the {{description}} of a research plan for a large-scale computer adaptive testing <b>program</b> <b>migrating</b> from a network to Internet version is presented. The general areas needed in such a research plan include: (1) comparability studies; (2) psychometric analyses; (3) development projects; (4) validity studies; and (5) audits. Second, some data showing the comparability between the network and Internet version of one test (i. e., Elementary Algebra) are presented. Simulations used actual test questions with previously calibrated parameters at known ability groups. The comparability results examine comparability in ability estimates, scale scores, performance levels, course placements, and content specifications. The third aspect of this paper is to suggest the use of the "Association of Test Publisher's Provisional Guidelines " in the development of a research plan. Limitations in the simulation data require additional research. Next steps to replicate th...|$|R
2500|$|In Operation Wetback in 1954, the United States and the Mexican governments cooperated {{to deport}} illegal {{immigrant}} Mexicans in the U.S. to Mexico. This cooperation {{was part of}} more harmonious Mexico-United States relations starting in World War II. Joint border policing operations were established in the 1940s when the Bracero Program (1942–1964) brought qualified Mexicans to the U.S. as guest workers. Many Mexicans who did not qualify for the <b>program</b> <b>migrated</b> illegally. According to Mexican law, Mexican workers needed authorization to accept employment in the U.S. As Mexico industrialized post-World War II in {{what was called the}} Mexican Miracle, Mexico wanted to preserve [...] "one of its greatest natural resources, a cheap and flexible labor supply." [...] In some cases along with their U.S. born children (who are citizens according to U.S. law), some illegal immigrants, fearful of potential violence as police swarmed through Mexican American barrios throughout the southeastern states, stopping [...] "Mexican-looking" [...] citizens on the street and asking for identification, fled to Mexico.|$|R
40|$|With {{the advent}} of WWW, there is {{considerable}} interest in <b>programs</b> that can <b>migrate</b> from one host to another and execute. For instance, Java programs are increasingly being used to add dynamic content to a web page. When a user accesses the web page through a browser, the browser <b>migrates</b> the Java <b>program</b> and executes it at the user's site. Mobile programs are appealing because they support efficient utilization of network resources and extensibility of information servers. However, since they cross administrative domains, {{they have the ability}} to access a host site's protected resources. For instance, they can potentially read a user's private files, access and modify personal information, and steal proprietary information. In this paper, we present a novel approach for allowing a site to protect and control the local resources that external Java programs can access. In this approach, a site uses a declarative policy language to specify a set of constraints on accesses to lo [...] ...|$|R
40|$|Mobile code {{computation}} is a {{new paradigm}} for structuring distributed systems. Mobile <b>programs</b> <b>migrate</b> from remote sites to a host, and interact with the resources and facilities local to that host. This new mode of distributed computation promises great opportunities for electronic commerce, mobile computing, and information harvesting. There has been a general consensus that security {{is the key to}} the success of mobile code computation. In this paper, we survey the issues surrounding the protection of a host from potentially hostile mobile programs. Decades of research in operating systems has provided significant experience and insight into the nature of system security. Before we propose any new security model for mobile code systems, it is wise to question why the existing protection mechanisms found in distributed operating systems do not fully address the security needs of mobile code systems. We propose three security challenges that are distinctive of the mobile code phenomen [...] ...|$|R
5000|$|In Operation Wetback in 1954, the United States and the Mexican governments cooperated {{to deport}} illegal {{immigrant}} Mexicans in the U.S. to Mexico. This cooperation {{was part of}} more harmonious Mexico-United States relations starting in World War II. Joint border policing operations were established in the 1940s when the Bracero Program (1942-1964) brought qualified Mexicans to the U.S. as guest workers. Many Mexicans who did not qualify for the <b>program</b> <b>migrated</b> illegally. According to Mexican law, Mexican workers needed authorization to accept employment in the U.S. As Mexico industrialized post-World War II in {{what was called the}} Mexican Miracle, Mexico wanted to preserve [...] "one of its greatest natural resources, a cheap and flexible labor supply." [...] In some cases along with their U.S. born children (who are citizens according to U.S. law), some illegal immigrants, fearful of potential violence as police swarmed through Mexican American barrios throughout the southeastern states, stopping [...] "Mexican-looking" [...] citizens on the street and asking for identification, fled to Mexico.|$|R
40|$|The {{legacy systems}} are the {{executable}} code(s) developed with huge investment, incorporation of changes {{made in the}} business rules {{over a long period}} of time. These systems are evolved and accumulated perennially the then needs of organization from time to time. The advancement of technology and perennial modification of the code to the changing needs of the business have weakened the productivity of these legacy systems and have put the system on the brink of software crash. This has compelled for a paradigm shift in the technology and knocks the human resource either to waist their precious time in abstracting or sifting useful business rules buried across the legacy system. To enable the existing code to be amenable to changes in the business norms and to ease the process of strong cohesion and weak coupling, there is a necessity to understand the code so as to either modify and reuse existing <b>program</b> or <b>migrate</b> the <b>program</b> to another programming language code. There is a need to transform the program code in to natural language text. The methodology proposed in this paper translates the legacy system to the English language by substituting the English language constructs in the place of token, which are having the finite meaning and reserved by the programming language. Further a platform is provided for common people to understand the code in English language syntax and asking them to abstract the concept by their experience and intelligence. Since the legacy system is expressed in near English language, proficient and non-proficient people are involved in the understanding process, which leads to the correct abstraction of the concept(s) ...|$|R
40|$|Data-intensive {{software}} programs typically transform {{a set of}} source data values into target data values. While the group of developers who write, compile and test the software or the query have {{a clear understanding of}} the transformation logic (or transformation rules) at the time the program is created, that understanding can quickly fade at an enterprise level for a variety of reasons, including poor documentation, loss of the source (uncompiled) version of the software, loss of the developers who wrote the software, or lack of available skills in the programming language (e. g., COBOL). This leaves the enterprise in a precarious position {{of not being able to}} maintain, upgrade or <b>migrate</b> the software <b>programs</b> at the heart of their operations unless they can recreate the transformations that relate the source data to the target data. In this paper, we propose a technique to reverse engineer transformation rules by analyzing the data using data mining algorithms and processing the results of these algorithms. We demonstrate our technique using a prototype implementation and prove its correctness with a sample data set. 1...|$|R
40|$|The Hedgehog (Hh) {{family of}} {{morphogenetic}} proteins has important instructional roles in metazoan development and human diseases. Lipid modified Hh {{is able to}} <b>migrate</b> to and <b>program</b> cells far away from its site of production despite being associated with membranes. To investigate the Hh spreading mechanism, we characterized Shifted (Shf) as a component in the Drosophila Hh pathway. We show that Shf is the ortholog of the human Wnt inhibitory factor (WIF), a secreted antagonist of the Wingless pathway. In contrast, Shf is required for Hh stability and for lipid-modified Hh diffusion. Shf colocalizes with Hh in the extracellular matrix and interacts with the heparan sulfate proteoglycans (HSPG), leading us to suggest that Shf could provide HSPG specificity for Hh. We also show that human WIF inhibits Wg signaling in Drosophila without affecting the Hh pathway, indicating that different WIF family members might have divergent functions in each pathway. Copyright Â© 2005 by Elsevier Inc. DGICYT; MCYT GEN 2001 - 4846 -C 05 - 01; Comunidad Autónma de Madrid; Fundación Ramón ArecesPeer Reviewe...|$|R
5000|$|Channel 43 {{became a}} PBS member station on August 15 {{of that year}} - {{becoming}} the city's second non-commercial educational station, after KETA-TV - while its Fox affiliation and inventory of syndicated <b>programming</b> <b>migrated</b> to channel 25, in addition to 30 employees, and other equipment and intellectual property from channel 43. The following year, the station's callsign was changed to KTLC to reflect its new branding as [...] "The Literacy Channel" [...] (a relatively contradictory brand as the station's programming, while educational in form, was not entirely focused on literacy). The conversion of the station {{was part of a}} national education demonstration initiative formed between OETA's Board of Directors, the OETA Foundation Board of Trustees, and Heritage Media; Sandy Welch, PBS' senior vice president for education services at that time, and management with the Children's Television Workshop collaborated with the consortium {{in the development of the}} station's new format, which OETA and PBS intended to use as a model for instructional and educational programming on a national level.|$|R
5000|$|Until 1972, Friendship Centres were dependant, {{to a large}} degree, on {{individual}} volunteers {{and their ability to}} raise operating funds though various fund raising events, private donations and small grants from foundations and provincial and federal governments. Centres also began to evolve from the provision of referrals to the [...] "front line" [...] delivery of social services. In 1972 the Government of Canada formally recognized the viability of Friendship Centres and implemented the <b>Migrating</b> Native Peoples <b>Program</b> (MNPP). The MNPP was given a four-year mandate to provide 40 Friendship Centres and the NAFC with Core operating funds. In 1976, the government conducted an evaluation of the MNPP which revealed the vital role that Friendship Centres played in the communities they served and the wide base of the community support they had established. The MNPP was extended for one year in order to evaluate the programs effectiveness. This evaluation revealed the vital role Friendship Centres had in their communities they served and the wide base of community support they had established. Also identified was the ability to expand services and programs as well as develop human resources.|$|R
40|$|The {{following}} proposal {{provides the}} rationale and details for a proposed program of doctoral studies in Kinesiology, {{offered by the}} department of Human Performance, Dance and Recreation (HPDR). Below is an overview of the rationale, benefits, and costs of the program. Need for the program: • The program will benefit the economic needs of the state in several respects, including the preparation of future health care providers and biomedical researchers. Not only will the program prepare PhD level graduates, but it will also support the thriving undergraduate program that prepares dozens of future healthcare providers each year. Equally critical is that this program will stimulate the research and development of new approaches and new technologies for addressing escalating health care costs that disproportionately affect Hispanic and Native American persons. This will create new jobs and bring federal research dollars and human capital to the state. Furthermore, there is a tremendous benefit to the state when talented students <b>migrate</b> to graduate <b>programs</b> from around the country and from other countries. The human capital that we potentially gain is significant. • The discipline of Kinesiology needs PhD-trained educators. Recent Department of Labor estimates suggest the demand for college faculty will increase by 31 % over the next decade. Kinesiology i...|$|R
25|$|Unlike in {{most other}} NFC markets with a Fox owned-and-operated station in which the station {{maintains}} such an arrangement with a local NFL franchise, KDFW does not carry any team-produced analysis or magazine programming; channel 4 held the local rights to air various team-related programs and specials {{during the regular season}} until 1998, when the local rights to these <b>programs</b> <b>migrated</b> to KTVT under a programming agreement reached between that station and the Cowboys earlier that year, in advance of CBS's assumption of the broadcast rights to the rival American Football Conference (AFC). The KTVT arrangement exists even though, as a CBS station, its telecasts of Cowboys regular season games are limited to those involving an AFC opponent or, since 2014, cross-flexed games declined by Fox that involve opponents in the NFC. Since Fox obtained the partial (now exclusive) over-the-air network television rights to Major League Baseball in 1996, KDFW has also carried certain Texas Rangers games that have been regionally or nationally televised by the network during the league's regular season and postseason. Additionally, from 1998 to 2009, KDFW also served as an alternate carrier of Rangers baseball games produced by co-owned regional sports network Fox Sports Southwest for broadcast on sister station KDFI, which served as the team's official flagship station during that period; KTXA (channel 21) assumed the local over-the-air television rights to the Rangers in 2010.|$|R
40|$|BACKGROUND: Theoretical work {{suggests}} that data from multiple nuclear loci provide better estimates of population genetic parameters than do single loci, {{but just how}} many loci are needed and how much sequence is required from each has been little explored. METHODOLOGY/PRINCIPLE FINDINGS: To investigate how much data is required to estimate the population genetic parameter theta (4 N(e) mu) accurately under ideal circumstances, we simulated datasets of DNA sequences under three values of theta per site (0. 1, 0. 01, 0. 001), varying in both {{the total number of}} base pairs sequenced per individual and the number of equal-length loci. From these datasets we estimated theta using the maximum likelihood coalescent framework implemented in the computer <b>program</b> <b>Migrate.</b> Our results corroborated the theoretical expectation that increasing the number of loci impacted the accuracy of the estimate more than increasing the sequence length at single loci. However, when the value of theta was low (0. 001), the per-locus sequence length was also important for estimating theta accurately, something that has not been emphasized in previous work. CONCLUSIONS/SIGNIFICANCE: Accurate estimation of theta required data from at least 25 independently evolving loci. Beyond this, there was little added benefit in terms of decreasing the squared coefficient of variation of the coalescent estimates relative to the extra effort required to sample more loci...|$|R
