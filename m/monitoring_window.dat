21|140|Public
5000|$|Voyage to the Bottom of the Sea {{had a story}} called [...] "The Mermaid" [...] (1967, Season 3, Episode 77); at {{the opening}} of the episode one can see the mermaid unnoticed by Commander Lee Crane (David Hedison) go {{swimming}} by the S.S.R.N. Seaview submarine's <b>monitoring</b> <b>window.</b>|$|E
3000|$|... threshold, or {{its average}} CPU {{utilization}} throughout the last CPU load <b>monitoring</b> <b>window</b> exceeds stress [...]...|$|E
30|$|As {{shown in}} Fig.  3, the <b>monitoring</b> <b>window</b> W slides, {{whenever}} a new sliding window unit s_new {{has been created}} and the expired window unit s_exp is removed. Thus, the partial numeric values C_i,j(t) of each data object O_i at monitoring node N_j update within the new <b>monitoring</b> <b>window</b> W' (W' = W + s_new - s_exp). Obviously, changes in data objects may violate the current local constraints.|$|E
5000|$|Veriato Log Manager [...] — {{provides}} {{event and}} security log management. Centrally <b>monitors</b> <b>Windows,</b> Unix, Linux, switches, routers, and hubs.|$|R
50|$|The Soulseek client {{features}} two {{file transfer}} <b>monitoring</b> <b>windows</b> where {{the progress of}} files being uploaded and downloaded can be monitored and controlled.|$|R
30|$|We now {{analyze the}} time {{complexity}} of Algorithms 1 and 2. With the sliding of the <b>monitor</b> <b>window,</b> {{we assume that}} n and a represent the number of monitoring nodes and all data objects that violate local constraints, respectively.|$|R
30|$|Based on {{the above}} two observations, we can {{effectively}} reduce the communication cost between the distributed nodes {{to maintain a}} valid global top-k when <b>monitoring</b> <b>window</b> slides.|$|E
30|$|By {{analyzing}} Table  1, we can {{see that}} when k= 2, the local top-k is 3701126131, 3701111002 in the time slot of 07 : 00 : 00 – 07 : 15 : 00. As the <b>monitoring</b> <b>window</b> slides, we can get the same local top-k in the time slot of 07 : 00 : 10 – 07 : 15 : 10. In this case, although the <b>monitoring</b> <b>window</b> slides, there is no violation of the local constraint. Thus, the communication cost between the monitoring node and the coordinator node can be reduced.|$|E
30|$|Motivated by this, in {{this paper}} we are going to study on a new problem of {{distributed}} top-k monitoring, which is to continuously query the top-k data objects with the largest aggregate numeric values over distributed data streams within a fixed-size <b>monitoring</b> <b>window.</b> Each data stream contains a sequence of data objects associated with numeric values, and the aggregate numeric value of each data object is calculated from distributed data streams. The continuous top-k query we studied is restricted to the most recent portion of the data stream, and the numeric values of data objects are changed correspondingly as the <b>monitoring</b> <b>window</b> slides.|$|E
40|$|System uses window {{itself as}} {{principal}} element of well-known attenuated total reflection technique frequently used for spectroscopic analysis of thin films. Monitor includes notch in <b>monitored</b> <b>window,</b> which acts as beam splitter to reflect portion of light {{at less than}} critical angle and causes total internal reflection...|$|R
50|$|Kaseya Network Monitor (KNM), {{previously}} called Intellipool Network Monitor (INM), is a network, server {{and performance}} monitor designed to <b>monitor</b> <b>Windows,</b> Linux, Unix and SNMP enabled devices. It is commercial software developed and sold by Intellipool AB, Sweden. Intellipool AB {{was acquired by}} Kaseya the 1st of May 2011.|$|R
2500|$|SESAMO_Win - Sexrelation Evaluation Schedule Assessment <b>Monitoring</b> on <b>Windows</b> ...|$|R
3000|$|At the outset, the {{coordinator}} node initializes the global top-k set by running an efficient algorithm for one-time top-k queries, e.g., TPUT algorithm [5]. Once the global top-k set T has been initialized, {{the coordinator}} node C {{will send a}} message containing T and initial revision factors δ _i,j = 0 corresponding to each monitoring node N_j. Upon receiving this message, monitoring node N_j will create local constraint ([...] 4) from T and revision factors. With the sliding of the <b>monitoring</b> <b>window,</b> monitoring nodes detect potential violations based on local constraint and revision factors.|$|E
30|$|Normally, as {{the number}} of {{monitoring}} nodes m increases, the overall communication cost of monitoring infrastructure is increased correspondingly. For one thing, due to {{the increase in the number}} of monitoring nodes, the data objects and their numeric values will be distributed more widely. So the numeric values of data objects will change more dramatically when the <b>monitoring</b> <b>window</b> slides, thereby increasing the probability of violating local constraints; for another, the global resolution phase in our algorithm needs to request information from all monitoring nodes to resolve violations of local constraints.|$|E
40|$|The {{integration}} of a monitoring port along the microfluidic {{path of a}} MALDI-chip integrated device is described. Optimization of the microreactor design allows longer reaction and measuring times. The Schiff base reaction between 4 -tert-butylaniline (1) and 4 -tert-butylbenzaldehyde (2) in ethanol was carried out on-chip in the MALDI ionization chamber and the formed imine 3 was detected in real time, demonstrating the feasibility of the <b>monitoring</b> <b>window</b> approach. This preliminary result opens the way to on-chip kinetic studies by MALDI-MS, by opening multiple monitoring windows along the microchannel...|$|E
5000|$|... #Subtitle level 3: SESAMO_Win (Sexrelation Evaluation Schedule Assessment <b>Monitoring</b> on <b>Windows)</b> ...|$|R
5000|$|The user {{interface}} had a Project window for organising clips into bins, a Sequence {{window with a}} multi-track timeline for arranging clips into a program using three-point editing, and Source and Program <b>monitor</b> <b>windows.</b> A finished program could either be exported as a QuickTime movie or written back to DV tape using the [...] "print to video" [...] command.|$|R
5000|$|Clipboard <b>Monitor</b> the <b>Windows</b> {{clipboard}} {{to display}} the text of copied verse references ...|$|R
30|$|The {{sliding window}} model [2] is a {{commonly}} used data stream model, which {{can improve the}} processing efficiency of the data stream by logical abstraction of the data stream. In the sliding window scenario, distributed monitoring nodes track numeric values of data objects within the <b>monitoring</b> <b>window</b> W. Based on the arrival order of each object in W, the data objects in window W could be partitioned into several small window units s_ 0,s_ 1,...,s_l- 1 (l = W/w). The size of sliding window unit w is specified according to the actual application scenario. Small window unit is more suitable for near real-time applications, but {{it will lead to}} higher communication and computation costs.|$|E
40|$|Tangible user {{interfaces}} (TUIs) augment {{the physical world}} by integrating digital information with everyday physical objects. Currently, building these UIs requires “getting down and dirty ” with input technologies such as computer vision. Consequently, only a small cadre of technology experts can currently build these UIs. Based on a literature review and structured interviews with nine TUI researchers, we created Papier-Mâché, a toolkit for building tangible interfaces using computer vision, electronic tags, and barcodes. Papier-Mâché introduces a high-level event model for working with these technologies that facilitates technology portability. For example, an application can be prototyped with computer vision and deployed with RFID. We present an evaluation of our toolkit with six class projects and a user study with seven programmers, finding the input abstractions, technology portability, and <b>monitoring</b> <b>window</b> to be highly effective...|$|E
30|$|There {{have been}} a few typical {{research}} efforts dealing with similarity search over streaming time series under DTW. The first is SPRING introduced by Sakurai et al. [13]. The method is very impressive in the computational time. The authors claimed that SPRING is up to 650, 000 times faster than using the naive calculation of the DTW distance. However, SPRING cannot work on z-score normalization, since at each time tick the z-score coefficients (mean and standard deviation) change frequently. When the z-score coefficients change, reusing computed results at previous time ticks is virtually impossible to SPRING. Hence, SPRING cannot be used to compare with our methods. Recently, Gong et al. [21] have introduced NSPRING, an extension of SPING supporting z-score normalization. However, since NSPRING computes current data, created from the current z-score coefficients, and then combines these data with the previous data, created from the previous z-score coefficients, in our opinion the method is inaccurate. With an incessant effort, we have recently developed ISPRING [22], an improved variant of SPRING. ISPRING is SPRING equipped with incremental min–max normalization (see Sect. 4.1). We choose min–max normalization rather than z-score normalization for ISPRING, because the min–max coefficients (minimum and maximum values) of evolving subsequences in streaming time series are occasionally changed, whereas the z-score coefficients of the subsequences are almost changed whenever there is a new-coming data point. For the reason, ISPRING using incremental min–max normalization can use current normalized data with previous normalized data to compute the DTW distance between a new-coming time-series subsequence and a specific time-series pattern if the min–max coefficients of the evolving subsequence are not changed. To extract the min–max coefficients of the new-coming subsequence of one streaming time series on the spot, ISPRING uses a <b>monitoring</b> <b>window</b> anchored at the entry of the time-series stream. The experiments in [21] demonstrated that the size of the <b>monitoring</b> <b>window</b> should be the same length as the pattern. We will compare ESUCR-DTW using incremental min–max normalization with ISPRING in Sect.  5.|$|E
5000|$|This {{program is}} mainly used to <b>monitor</b> <b>Windows</b> machines. Being {{installed}} {{on a remote}} system NSClient++ listens to port TCP 12489. The Nagios plugin {{that is used to}} collect information from this addon is called [...] As NRPE, NSClient++ allows to monitor the so-called 'private services' (memory usage, CPU load, disk usage, running processes, etc.) Nagios is a host and service monitor which is designed to inform your network problems.|$|R
25|$|Microsoft {{learned from}} discussions with {{customers}} {{that there was}} confusion as to whether users were taking appropriate steps to protect their systems, or if the steps they were taking were effective. From this research, Microsoft {{made the decision to}} include a visible control panel with Windows XP Service Pack 2 that would provide a consolidated view of the most important security features. Service Pack 2, released in August 2004, includes the first version of Windows Security Center (WSC). This version <b>monitors</b> <b>Windows</b> Update, Windows Firewall, and the availability of an anti-virus program. Third-party providers of personal firewall and anti-virus software packages were encouraged to use WSC API to register their products with WSC.|$|R
30|$|So, θ[*]>[*] 1 {{indicates}} that non-congestive losses are predominant in the wireless channel; thus, a loss event {{is expected to}} occur mainly due to a loss prone channel. On the other hand, if θ[*]<[*] 1, congestive losses are predominant in the <b>monitored</b> <b>window,</b> and the TCP congestion control action is needed. Finally, if θ[*]=[*] 1, no clear indications can be obtained, and the reason of a loss event is inferred through the adoption of Jr, as for native JTCP algorithm.|$|R
30|$|Most of the {{traditional}} top-k algorithms {{are based on a}} single-server setting. They may be highly inefficient and/or cause huge communication overhead when applied to a distributed system environment. Therefore, the problem of top-k monitoring in distributed environments has been intensively investigated recently. This paper studies how to monitor the top-k data objects with the largest aggregate numeric values from distributed data streams within a fixed-size <b>monitoring</b> <b>window</b> W, while minimizing communication cost across the network. We propose a novel algorithm, which adaptively reallocates numeric values of data objects among distributed nodes by assigning revision factors when local constraints are violated and keeps the local top-k result at distributed nodes in line with the global top-k result. We also develop a framework that combines a distributed data stream monitoring architecture with a sliding window model. Based on this framework, extensive experiments are conducted on top of Apache Storm to verify the efficiency and scalability of the proposed algorithm.|$|E
40|$|International audienceIn this paper, LEMON, a {{lightweight}} enhanced monitoring alg orithm based on packet sampling, is proposed. It targets a pre-assigned accuracy on bitrate estimates, for each monit ored flow at a router interface. To this end, LEMON {{takes into account}} some basic properties of the flows, which can be easil y inferred from a sampled stream, and it exploits them to dynamically adapt the monitoring time-window on a per-flow b asis. Its effectiveness has been tested using real packet traces. Experimental results show that LEMON is able to finel y tune, in real-time, the <b>monitoring</b> <b>window</b> associated to each flow and, compared to a classic fixed-scale monitoring ap proach, {{it is able to}} better satisfy the accuracy requiremen ts of bitrate estimates. Moreover, its communication overhea d can be kept low enough by choosing an appropriate aggregati on policy in the message exporting process. Finally, LEMON pro duces a low processing overhead, which can be easily sustained by currently deployed routers...|$|E
40|$|The {{geometric}} average trigger reset option resets the strike price {{based on the}} {{geometric average}} of the underlying asset's prices over a <b>monitoring</b> <b>window.</b> Similar contracts have been traded on exchanges in Asia. This paper derives an analytic formula for pricing this option with multiple monitoring windows. The analytic formula in fact is a corollary of a general formula that holds for a large class of path-dependent options: It prices any option whose value can be written as a linear combination of �[image omitted], where X is a multinormal random vector and b is some constant vector. Numerical experiments suggest that the pricing formula approximates the values of arithmetic average trigger reset options accurately. Thus pricing the arithmetic average trigger reset option can benefit from using this formula as the control variate in Monte Carlo simulation. Numerical results also suggest that the geometric average trigger reset option does not have significant delta jump as the standard reset option, and this useful property reduces the hedging risk dramatically. ...|$|E
5000|$|In Windows 2000, the System <b>Monitor</b> of <b>Windows</b> 9x and the Performance <b>Monitor</b> of <b>Windows</b> NT 4 and earlier, as well {{as another}} program called Network Monitor, were merged into a Microsoft Management Console (MMC) plug-in called Performance, which {{consisted}} of two parts: [...] "System Monitor" [...] and [...] "Performance Logs and Alerts". The [...] "System Monitor" [...] naming was kept in Windows XP. Some third-party publications {{referred to it as}} [...] "Performance Monitor" [...] however, even in Windows 2000 or XP contexts.|$|R
40|$|International audienceWe {{propose a}} {{technique}} to collect use traces in any existing applica-tion, without a need to modify this application. This technique {{is based on the}} use of accessibility libraries. We implemented our technique in a collector that uses UIAutomation and JavaAccessibility libraries: it can <b>monitor</b> <b>Windows</b> target-applications to collect the user’s traces. The traces are then stored in a trace-base management system in order to be exploited thereafter. We have tested our collector on more than fifty applications in order to evaluate our ap-proach...|$|R
40|$|Abstract — This paper {{describes}} {{the design and}} implementation of a high-reliability and low-power status monitoring protocol, e. g. for wireless alarm systems. The dual design approach followed consists of an in-depth device characterization with subsequent algorithm development. This allows to understand and leverage the correct design {{and implementation of the}} most critical components of the algorithms. The high-reliability status monitoring protocol operates based on <b>monitoring</b> <b>windows</b> with synchronous notification, subsequent acknowledgement rounds and periods of reduced activity, at regular intervals. This leads to deterministic and thus highly reliable operation of the status monitoring protocol implementation on the Tmote Sky platform. I...|$|R
30|$|The five {{papers in}} this special issue cover the areas graph data, {{streaming}} data, transaction data, {{as well as a}} data problem in decision support. In “Query Optimal K-plex Based Community in Graphs,” authors propose a new k-plex based community model for community search. In “Keyphrase Extraction Using Knowledge Graphs,” authors propose a keyphrases extracting approach using knowledge graphs to detect the latent relations of noun words and named entities. In “Sliding Window Top-K Monitoring over Distributed Data Streams,” authors study how to monitor the top-k data objects with the largest aggregate numeric values from distributed data streams within a fixed size <b>monitoring</b> <b>window,</b> while minimizing communication cost across the network. In “Reordering Transaction Execution to Boost High Frequency Trading Applications,” authors propose a pipeline-aware reordered execution to improve application performance by rearranging statements in order of their degrees of contention. In “A Feedback-based Approach to Utilizing Embeddings for Clinical Decision Support,” authors propose a feedback-based approach which considers the semantic association between a retrieved biomedical article and a pseudo feedback set, hence improve the performance in biomedical articles retrieval.|$|E
40|$|This report {{describes}} the development, realisation and the functionality examination of an optical measurement {{system for a}} quantitative detection of the change from contours of notched specimens during tensile tests. Afterwards out of the contour data, the nomial diameter, the minimal diameter, the radius {{and the length of}} the notch will be determined. The measurement system, based on a CCD-highspeed-camera, was adapted at an existing experimental arrangement, consisting of an electromechanical testing machine and an environmental chamber with a <b>monitoring</b> <b>window.</b> Since the chamber works with liquid nitrogen as a cooling medium, some constructive proceedings were carried out in the region of the optical way, to minimice the influence of the evaporated gas. Performing experiments with differently notched specimens by different temperatures, the functionality of the system was demonstrated. In spite of the decrease of the measuring accuracy with decreasing temperature due to the nitrogen influence, the determination of the most important parameters, for example the minimal diameter, up to - 150 C is sufficiently accurate. (orig.) Available from TIB Hannover: ZA 5141 (6022) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekSIGLEDEGerman...|$|E
40|$|Wansu Lim, et al, 'QoS aware MAC {{protocol}} for OFDMA-PON'. Paper {{presented at the}} 13 th International Conference on Transparent Optical Networkds (ICTON), 26 - 30 June 2011, Stockholm, Sweden. Published in IEEE Xplore, 1 August 2011, DOI: 10. 1109 /ICTON. 2011. 5970941. Copyright 2011 IEEE. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must {{be obtained from the}} IEEE. ???A quality of service (QoS) aware medium access control (MAC) protocol is presented for next generation OFDMA-PONs. The end-to-end delay and network throughput are investigated in the presence of class-of-service and service-level differentiation. In addition, this paper proposes a new dynamic subcarrier allocation (DSA) algorithm. The <b>monitoring</b> <b>window</b> time technique is used where OLT measures the state of the ONU's queue instead of exchanging traditional report messages. As a result, the end-to-end packet delay of high and middle SLAs is less than 0. 7 ms even if the ONU offered load is 1. 0. The packet delay of the high priority traffic class regardless of SLA levels is however less than 0. 6 ms. The total network throughput is 97 % of total capacity...|$|E
5000|$|Extended Microsoft <b>Windows</b> <b>monitoring</b> via WS-Management and Zenoss {{open source}} {{extensions}} ...|$|R
5000|$|SniperSpy and SniperSpy Mac - <b>monitoring</b> {{software}} for <b>Windows</b> & Mac.|$|R
5000|$|Sequencing the <b>monitored</b> {{medication}} delivery <b>window</b> and prioritizing other {{patient care}} activities; ...|$|R
