0|9541|Public
40|$|Deep EDSLs {{intrinsically}} compromise programmer {{experience for}} improved program performance. Shallow ED-SLs, complement them, by trading program performance for good programmer experience. We present Yin-Yang, a library for DSL embedding that uses compile-time metaprogramming to transparently, and reliably, transform shallow EDSL {{programs to the}} equivalent deep EDSL programs. The transformation allows program prototyping and development with the shallow embedding, while the equivalent deep embedding is used where performance is of essence. Through language virtualization and a <b>minimal</b> <b>interface</b> Yin-Yang allows <b>design</b> of compiler agnostic EDSLs that perform domain-specific analysis at compile time while ED-SLs can be compiled at both run and compile time. For run time compiled EDSLs Yin-Yang introduces guarded recompilation that significantly reduces EDSL invocation overheads. This allows EDSLs {{to be used in}} latency sensitive applications, and on small data sets. We show that Yin-Yang’s transformation is reliable and obviates all embedding related annotations in a large set of applications from two non-trivial EDSLs...|$|R
50|$|The Memory Address Register is {{half of a}} <b>minimal</b> <b>interface</b> {{between a}} {{microprogram}} and computer storage. The other half is a memory data register.|$|R
50|$|The Memory Data Register is {{half of a}} <b>minimal</b> <b>interface</b> {{between a}} {{microprogram}} and computer storage, the other half is a memory address register (MAR).|$|R
50|$|Vox 2.0 {{introduces}} a <b>minimal</b> <b>interface,</b> {{reminiscent of the}} Winamp audio player, {{and a number of}} features considered unique in comparison to macOS's built-in iTunes.|$|R
40|$|Nowadays, {{information}} system creation process consists of several different actions, {{one of those}} actions – web <b>interface</b> <b>design.</b> Web <b>interface</b> <b>design</b> process requires a good methodology, to make web interface process better, quicker, flexible and satisfy other web <b>interface</b> <b>design</b> criterions. RUP (Rational Unified Process) don’t present any special creation process of internet web interface. Frequently web <b>interface</b> <b>design</b> process lies in the head of it’s designers. There are no full methodology of web <b>interface</b> <b>design</b> process in one place, only some web interface advices or articles about one or other web interface process steps could be found. The goal of this work {{is to make a}} methodology of web <b>interface</b> <b>design</b> and implement it for internet service provider system. Methodology also would be useful for companies which participate in web <b>interface</b> <b>design</b> process, also in school or university study process, or like a guide for any web interface designer. The developed methodology for web <b>interface</b> <b>design</b> was used for implementing internet service provider system web <b>interface,</b> system <b>design</b> process and redesign above-mentioned system web interface for measuring process times. Methodology of web <b>interface</b> <b>design,</b> reduce web <b>interface</b> <b>design</b> process time, help to make web <b>interface</b> <b>design</b> process easier, more flexible and understandable for web interface designer, also certain better web interface appearance independence from system functional part, with possibility to change web interface appearance without changing rest of system parts...|$|R
40|$|International audienceDespite being {{a set of}} proven, well-documented, contextualized {{recommendations}} for solving frequently occurring user <b>interface</b> <b>design</b> problems, user <b>interface</b> <b>design</b> patterns are still not widely used. We believe {{this is due to}} the lack of tools to help designers find patterns and identify how they can be combined to solve user <b>interface</b> <b>design</b> problems. This paper proposes to classify and make explicit the relationships between user <b>interface</b> <b>design</b> patterns. We conducted a small-scale study that indicated that this proposal is more efficient and better accepted by the participants than browsing through a user <b>interface</b> <b>design</b> library...|$|R
40|$|The {{goal of this}} {{publication}} is to describe process and methods of user <b>interface</b> <b>design</b> in~theory and show application of methods in user <b>interface</b> <b>design</b> and evalutation of system Spokojená Jídelna. Publication describes one of many possible approaches to user <b>interface</b> <b>design,</b> but not the only one...|$|R
40|$|Interface {{builders}} are popular tools for designing and developing graphical user interfaces. These tools, however, are engineering-centered; they operate mainly on windows and widgets. A typical interface builder {{does not offer}} any specific support for user-centered <b>interface</b> <b>design,</b> a methodology recognized as critical for effective user <b>interface</b> <b>design.</b> We present MOBILE (Model-Based Interface Layout Editor) an interface building tool that fully supports user-centered design and that guides the interface building process by using user-task models and a knowledge base of <b>interface</b> <b>design</b> guidelines. The approach in MOBILE has the important added benefit of being useful in both top-down and bottom-up <b>interface</b> <b>design</b> strategies. Keywords Model-based interface development, task models, interface builders, user-centered <b>interface</b> <b>design,</b> user <b>interface</b> development tools...|$|R
40|$|Abstract—Interfaces are {{recognized}} as an important mecha-nism to define contracts governing interactions between semi-independent software modules. Well-designed interfaces signifi-cantly reduce software complexity and ease maintainability by fostering modularization, hiding implementation details and min-imizing the impact caused by changes in the software implemen-tation. However, <b>designing</b> good <b>interfaces</b> is not a trivial task. The presence of <b>interface</b> <b>design</b> defects often yield increased development cost, lower code quality and reduced development productivity. Despite their importance, currently {{there are only a}} few research efforts that investigate the quality of <b>interface</b> <b>design.</b> In this paper, we identify and characterize common <b>interface</b> <b>design</b> anomalies and illustrate them via examples taken from well-known open source applications. In order to quantify the presence of <b>interface</b> <b>design</b> anomalies and estimate their impact on the <b>interface</b> <b>design</b> quality, as well on the software quality attributes, such as maintainability, we conduct an empirical study covering 9 open source projects. Building on our empirical results, we develop a set of recommendations to improve <b>interface</b> <b>design...</b>|$|R
5000|$|The {{principles}} of user <b>interface</b> <b>design</b> {{are intended to}} improve the quality of user <b>interface</b> <b>design.</b> According to Larry Constantine and Lucy Lockwood in their usage-centered design, these principles are: ...|$|R
50|$|The <b>interface</b> <b>design</b> {{describes}} {{internal and}} external program interfaces, {{as well as the}} <b>design</b> of human <b>interface.</b> Internal and external <b>interface</b> <b>designs</b> are based on the information obtained from the analysis model.|$|R
40|$|Multimedia based {{development}} has matured over the years. Developers have heeded {{the message to}} ensure that there is quality <b>interface</b> <b>design</b> and they make careful use of metaphors to improve communication between computer and user. A look at semiotic theory and <b>interface</b> <b>design</b> guidelines confirms that metaphors are still essential communication components in human-computer <b>interface</b> <b>design.</b> This paper looks at how the relatively immature Internet reflects those essential components...|$|R
40|$|Interfaces are {{recognized}} as an important mechanism to define contracts governing interactions between semi-independent software modules. Well-designed interfaces significantly reduce software complexity and ease maintainability by fostering modularization, hiding implementation details and minimizing the impact caused by changes in the software implementation. However, <b>designing</b> good <b>interfaces</b> is not a trivial task. The presence of <b>interface</b> <b>design</b> defects often yield increased development cost, lower code quality and reduced development productivity. Despite their importance, currently {{there are only a}} few research efforts that investigate the quality of <b>interface</b> <b>design.</b> In this paper, we identify and characterize common <b>interface</b> <b>design</b> anomalies and illustrate them via examples taken from well-known open source applications. In order to quantify the presence of <b>interface</b> <b>design</b> anomalies and estimate their impact on the <b>interface</b> <b>design</b> quality, as well on the software quality attributes, such as maintainability, we conduct an empirical study covering 9 open source projects. Building on our empirical results, we develop a set of recommendations to improve <b>interface</b> <b>design.</b> Comment: Conference paper, published in IEEE CSIT' 201...|$|R
40|$|We {{consider}} a mesoscopic model of phase transitions and investigate the geometric {{properties of the}} interfaces of the associated minimal solutions. We provide density estimates for level sets and, in the periodic setting, we construct <b>minimal</b> <b>interfaces</b> at a universal distance from any given hyperplane...|$|R
40|$|As {{computing}} and {{embedded systems}} become ubiquitous in our world, {{the importance of}} user <b>interface</b> <b>design</b> knowledge increases in our curriculum. Students of undergraduate information systems or computer science programs should possess some competence in this computing sub-discipline. However, many programs {{do not have the}} curricular space to host a separate course in usability or user <b>interface</b> <b>design.</b> To address this concern, results and observations of incorporating user <b>interface</b> <b>design</b> pedagogy {{in the context of a}} software engineering project course are presented. The project centers around a data collection application to be hosted on a PDA (Personal Digital Assistant). The application has significant constraints concerning usability and human factors that provide a rich context for teaching and demonstrating user <b>interface</b> <b>design</b> concepts. An appendix highlights the evolution of the actual interface developed by one of the development teams. The user <b>interface</b> <b>design</b> changes were the result o...|$|R
40|$|Abstract. This paper {{presents}} a microkernel architecture for constraint programming organized around {{a number of}} small number of core func-tionalities and <b>minimal</b> <b>interfaces.</b> The architecture contrasts with the monolithic nature of many implementations. Experimental results indi-cate that the software engineering benefits are not incompatible with runtime efficiency. ...|$|R
40|$|The current {{literature}} on <b>interface</b> <b>design</b> is reviewed. Four major approaches to <b>interface</b> <b>design</b> are identified; craft, cognitive engineer-ing, enhanced software engineering and technologist. The {{aim of this}} classification framework is not to split semantic hairs, but to provide a comprehensive overview of a complex field and to clarify {{some of the issues}} involved. The paper goes on to discuss the source of quality in <b>interface</b> <b>design</b> and concludes with some recommendations on how to improve HCI methods...|$|R
40|$|The user {{interface}} is, of course, {{a crucial part}} of a user’s experience with any piece of software. E-learning <b>interface</b> <b>design</b> is especially critical, as the learning effectiveness and <b>interface</b> <b>design</b> are substantially intertwined. I suggest in this paper that the <b>design</b> of an <b>interface</b> for an e-learning program should be determined by how people learn and the tasks they need to perform in the program. This is in contrast to other approaches which view the <b>interface</b> <b>design</b> process as separate from the learning design. In this paper I describe an approach to e-learning <b>interface</b> <b>design</b> that focuses on the goals, audience, and learning, and explore examples that demonstrate the success of this approach. 1...|$|R
40|$|An {{important}} current {{movement in}} computing is towards mobile and ubiquitous interaction. A major research field within mobile and ubiquitous computing is <b>minimal</b> attention <b>interfaces.</b> At present however, {{there is little}} in the way of validated heuristics to inform the design and implementation of <b>minimal</b> attention user <b>interfaces.</b> A paradigmatic example of a challenging mobile interaction task is physical navigation. A potentially promising solution to the problem of providing a <b>minimal</b> attention <b>interface</b> for physical navigation tasks is spatial audio. The initial focus of this research is to investigate the use of spatial audio as an element in a <b>minimal</b> attention <b>interface</b> to provide usable and meaningful navigation cues in one or more common navigational contexts. The aims of this project are to highlight problems, identify and analyse issues and evaluate potential solutions. Finally, we intend to formulate guidelines for the use of spatial audio in the wider context of <b>minimal</b> attention <b>interfaces...</b>|$|R
40|$|Website {{has become}} a major media for exchanging {{information}} because of its tremendous speed and easy access. Even a single website may contain tens of thousands of web pages nowadays. A website with tons of information, as an <b>interface,</b> should be <b>designed</b> well enough to ensure users to access appropriate information easily and quickly. This thesis describes a novel website <b>interface</b> <b>design</b> approach to achieve the aforementioned goal. Several ideas are behind the development of this approach. First, a website <b>interface</b> <b>design</b> is based on a general <b>interface</b> <b>design</b> model to the dynamic system. The model is based on a set of core notions: function, behavior, and structure. Second, this general <b>interface</b> <b>design</b> model is modified to suit the website <b>interface</b> <b>design</b> based on our observation of the difference between the website and the dynamic system. Third, the <b>interface</b> <b>design</b> axiom, i. e., the mental model should be equal to the design model is elaborated {{in the context of the}} developing the new approach. Last, the UML is used to represent the <b>interface</b> which is <b>designed</b> based on the new approach. The new approach is validated based on an experimental study. Two interfaces are developed based on the new approach and a popular approach in the literature, respectively. The participants operate on the two interfaces, and their performance and mental workload are used to derive conclusions. Both experiment and data are statistically processed. The experimental results allow us to conclude that the new approach is very promising to the website <b>interface</b> <b>design...</b>|$|R
50|$|Ecological <b>interface</b> <b>design</b> (EID) is an {{approach}} to <b>interface</b> <b>design</b> that was introduced specifically for complex sociotechnical, real-time, and dynamic systems. It has been applied {{in a variety of}} domains including process control (e.g. nuclear power plants, petrochemical plants), aviation, and medicine.|$|R
5000|$|A dummy board {{provides}} a <b>minimal</b> <b>interface.</b> This type of diagnostic board in intended {{to confirm that}} the interface is correctly implemented. For example, a PC motherboard manufacturer can test PCI functionality of a PC motherboard by connecting a dummy PCI board into each PCI slot on the motherboard ...|$|R
40|$|This thesis {{describes}} {{the process of}} creating a calendar application featuring an effective and user friendly interface. The first step is an analysis of existing calendar applications on various platforms. Then the calendar data standard is explored, together with good practices for user <b>interface</b> <b>design.</b> The analysis is followed by designing the calendar application. The design process consists of calendar library <b>design,</b> graphical <b>interface</b> <b>design</b> and structural <b>interface</b> <b>design.</b> The resulting application, implemented in C++ using Qt framework, is tested...|$|R
40|$|High {{software}} usability {{stems from}} good user <b>interface</b> <b>design.</b> Good designs invariably depend on {{an ability to}} understand and evaluate (and thereby improve) <b>interface</b> <b>designs</b> in the development process. Understanding and evaluating designs depends, in part, on the methods used to represent the designs...|$|R
40|$|This book {{covers the}} design, {{evaluation}} and development process for interactive human computer interfaces including user <b>interface</b> <b>design</b> principles, task analysis, <b>interface</b> <b>design</b> methods, auditory <b>interfaces,</b> haptics, user interface evaluation, usability testing prototyping, issues in interface construction, interface evaluation, World Wide Web and mobile device interface issues. The book {{is ideal for}} the student that wants {{to learn how to}} use prototyping tools as part of the <b>interface</b> <b>design</b> and how to evaluate an interface and its interaction quality by using usability testing techniques...|$|R
5000|$|The Art of Human-Computer <b>Interface</b> <b>Design,</b> Addison-Wesley (1990) ...|$|R
40|$|This paper {{describes}} {{the design and}} implementation of a Meeting Browser demo that is suitable for use on hand-held devices. <b>Design</b> of a <b>minimal</b> <b>interface</b> is achieved by using Question-Answering techniques. Users can input natural language questions to the system, and if a result is found it is displayed in video and audio...|$|R
40|$|Despite {{multiple}} window interfaces {{have eliminated}} some user-interface problems by showing information in independent windows, disorientation, cognitive overload and split attention keeping {{up to date}} as an important problems of e-learning interfaces. The {{aim of this study}} is to determine the effects of parallel <b>interface</b> <b>designs</b> on the e-learning success of primary school students. For this purpose, three different parallel <b>interface</b> <b>designs</b> were created with the same content for experimental design. Content was selected as 4 basic traffic signals. This study was designed as general survey models. Performances of the students were examined through the questions related to recall, attention, and difficulty level of media. 9 6 th grade primary school students participated in the application. According to the results of the application students were fever forced and best recall in 2 nd level parallel <b>interface</b> <b>design.</b> However, students were faster in 3 th level parallel <b>interface</b> <b>design.</b> At the end of the research solutions to the problems of the learner-interface interaction is presented by help of parallel <b>interface</b> <b>designs...</b>|$|R
5000|$|Prodatum, {{synthesizer}} preset editor, uses a lifelike <b>interface</b> <b>design</b> ...|$|R
5000|$|... #Subtitle level 2: Cultural Aesthetics for User <b>Interface</b> <b>Design</b> ...|$|R
5000|$|Updated user <b>interface</b> <b>design,</b> {{providing}} increased ease-of-use and efficiency.|$|R
40|$|In this paper, {{we report}} on a recent <b>interface</b> <b>design</b> and {{evaluation}} process for a new knee and hip automatic physiotherapy assistant and rehabilitation system (ARS). <b>Interface</b> <b>design</b> was concurrent {{with the development of}} ARS. The ARS has the potential to improve the automation of rehabilitation treatments, by providing quantitative measures of a patient’s motion. However, the complexity of rehabilitation information available to the therapist has increased with this additional information. We applied Ecological <b>Interface</b> <b>Design</b> (EID) to understand the domain of physiotherapy {{and the role of the}} automation. Results of a Work Domain Analysis (WDA) revealed new functions and constraints in rehabilitation now accessible through the ARS, and provided the <b>design</b> requirements for <b>interface</b> <b>design.</b> A novel <b>interface</b> was <b>designed</b> which is currently undergoing evaluation to see if it improves the quality and experience of physiotherapy. This study provides an example of the advantages of using EID at the early phase of design, and how to apply EID to a system of increasing automaticity...|$|R
50|$|User <b>interface</b> <b>design</b> {{includes}} {{selecting and}} arranging interface elements to enable users {{to interact with}} the functionality of the system. The goal is to facilitate usability and efficiency as much as possible. Common elements found in <b>interface</b> <b>design</b> are action buttons, text fields, check boxes, radio buttons and drop-down menus.|$|R
40|$|Poor {{perception}} {{from human}} interpretation on system <b>interface</b> <b>design</b> may deviate human critical judgment about state of a system. As a result accidents may occur due to misinterpretation on displayed information {{available on the}} screen. In relation to that, this paper describes designing scenarios for system <b>interface</b> <b>design</b> which reflects with user’s working context. System <b>interface</b> <b>design</b> that familiar with working context will help to increase user’s satisfaction and the ease of use of a particular system. Moreover, through the process in designing scenarios also leads to the identification of problems and how experts deal with challenging tasks in using the system. Human abstract thinking {{which could not be}} gather in a quantitative way motivate authors to employ Cognitive Task Analysis method in collecting system <b>interface</b> <b>design</b> requirements from the experts as to design task scenarios. In general experts involve in this study are from the manufacturing industries where their daily scope of work is in system maintenance tasks. There are five phases involve in Cognitive Task Analysis; define tasks, select participants, task observation, task diagram and knowledge audit. Results from the interview and observation session will give an essential clue in designing scenarios for system <b>interface</b> <b>design.</b> This is because in knowing a correct problem to solve and provide cues at a needed point in time will help users to interpret information on system <b>interface</b> <b>design...</b>|$|R
5000|$|... #Caption: Student {{experiment}} in <b>Interface</b> <b>Design</b> developed at UP Valencia ...|$|R
5000|$|... #Subtitle level 3: 1997 Human <b>Interface</b> <b>Design</b> Excellence (HIDE) Award ...|$|R
