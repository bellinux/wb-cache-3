0|12|Public
50|$|Marlett is a TrueType font {{that has}} been used in Microsoft Windows since Windows 95. The {{operating}} system uses this font to create user interface icons that are used in the menus and windows. Examples are the close, maximize and <b>minimize</b> <b>buttons</b> that are made from the individual glyphs in the font. This was important to allow the users to scale the user interface and have the icons scale with the elements.|$|R
5000|$|Top {{menu bar}} - a {{multipurpose}} top bar, saving space, and containing: (1) the menu{{bar of the}} currently active application, (2) the capture bar of the main window of the currently active application including the maximize, <b>minimize</b> and exit <b>buttons,</b> (3) the session menu including the global system settings, logout, shut down and similar basic controls, and (4) the diverse global notification indicators including the time, weather, {{and the state of}} the underlying system.|$|R
25|$|Previously GNOME {{used the}} {{traditional}} desktop metaphor, but in GNOME 3 this {{was replaced with}} GNOME Shell, a more abstract metaphor where switching between different tasks and virtual workspaces {{takes place in a}} separate area called Overview. Also, since Mutter replaced Metacity as the default window manager, the <b>minimize</b> and maximize <b>buttons</b> no longer appear on the titlebar by default. Adwaita replaced Clearlooks as the default theme. Many GNOME Core Applications also went through redesigns to provide a more consistent user experience.|$|R
50|$|Windows 8.1 Update {{introduced}} {{changes that}} facilitate mouse-oriented means of switching between and closing Metro-style apps, patterned upon the mechanics used by desktop {{programs in the}} Windows user interlace. In lieu of the recent apps sidebar, computer icons for opened apps can be displayed on the taskbar; as with desktop programs, shortcuts to apps can also be pinned to the taskbar. When a mouse is connected, an auto-hiding titlebar with <b>minimize</b> and close <b>buttons</b> is displayed within apps when the mouse is moved {{toward the top of}} the screen.|$|R
25|$|The taskbar {{has seen}} the biggest visual changes, where the old Quick Launch toolbar has been {{replaced}} {{with the ability to}} pin applications to taskbar. Buttons for pinned applications are integrated with the task buttons. These buttons also enable Jump Lists to allow easy access to common tasks. The revamped taskbar also allows the reordering of taskbar buttons. To the far right of the system clock is a small rectangular button that serves as the Show desktop icon. By default, hovering over this button makes all visible windows transparent for {{a quick look at the}} desktop. In touch-enabled displays such as touch screens, tablet PCs, etc., this button is slightly (8 pixels) wider in order to accommodate being pressed by a finger. Clicking this <b>button</b> <b>minimizes</b> all windows, and clicking it a second time restores them.|$|R
500|$|Further {{interface}} behavior {{changes are}} made on the April 2014 [...] "Windows 8.1 Update", which are oriented towards non-touch environments (such as desktop and laptop PCs) that use a keyboard and mouse, and improve integration between Windows Store apps and the desktop. When a mouse is in use, the Desktop is shown on startup by default, the Start screen uses context menus instead of a toolbar {{across the bottom of}} the screen for manipulating tiles, an autohiding title bar with <b>minimize</b> and close <b>buttons</b> is displayed within apps at the top of the screen, the taskbar can display and pin apps alongside desktop programs and be accessed from within apps, and visible search and power buttons are added to the Start screen. In non-touch environments, the default image viewer and media player programs were changed back to Windows Photo Viewer and Windows Media Player in lieu of the Xbox Video and Photos apps.|$|R
25|$|With version 6.0, if the Desktop Experience {{component}} is {{plugged into the}} remote server, remote application user interface elements (e.g., application windows borders, Maximize, <b>Minimize,</b> and Close <b>buttons</b> etc.) will take on the same appearance of local applications. In this scenario, the remote applications will use the Aero theme if the user connects to the server from a Windows Vista machine running Aero. Later versions of the protocol also support rendering the UI in full 32-bit color, as well as resource redirection for printers, COM ports, disk drives, mice and keyboards. With resource redirection, remote applications can use {{the resources of the}} local computer. Audio is also redirected, so that any sounds generated by a remote application are played back at the client system. Moreover, a remote session can also span multiple monitors at the client system, independent of the multi-monitor settings at the server. RDC {{can also be used to}} connect to Windows Media Center (WMC) remote sessions; however, since WMC does not stream video using RDP, only the applications can be viewed this way, not any media.|$|R
40|$|Authors: Spencer Reisbick & Patrick Willoughby ### Abstract This {{protocol}} {{describes an}} approach to preparing a series of Gaussian 09 computational input files for an ensemble of conformers generated in Spartan’ 14. The resulting input files are necessary for computing optimum geometries, relative conformer energies, and NMR shielding tensors using Gaussian. Using the conformational search feature within Spartan’ 14, an ensemble of conformational isomers was obtained. To convert the structures into a format that is readable by Gaussian 09, the conformers were first exported to a single “. sdf” file. A Python script was used to (i) read the structural information of each conformer within the “. sdf” file and (ii) write the corresponding atomic coordinates into a series Gaussian 09 input files. This approach decreases the amount of active effort required to compute NMR chemical shifts of a structure that populates an ensemble of conformers. ### Introduction NMR spectroscopy is the most useful tool for determining the structure of an unknown organic molecule. By coupling this approach with other analytical techniques (e. g. mass spectrometry) the structure of an unknown organic molecule can be elucidated. However, molecules of greater complexity continue to be isolated and/or prepared, and their associated analytical data are increasingly convoluted. Consequently, the assigned structures of these newly isolated compounds are sometimes incorrect, which leads to years of misguided effort “chasing molecules that were never there” (1). Modern computational chemistry software packages (e. g., Spartan (2, 3), Gaussian 09 (4), and Jaguar (5, 6)) have enabled the routine use of density functional theory (DFT) calculations for predicting spectroscopic properties of organic molecules. For example, one of us recently reported a protocol that described an approach using Gaussian 09 to compute NMR data for molecules that adopt conformational isomers (7). An important, {{early part of this}} protocol required the use of the software application, MacroModel (8) (part of the Schrödinger suite) to carry out a stochastic conformational search using the OPLS molecular mechanics force field. For each structure resulting from this conformational search, free energies and NMR shielding tensors were calculated. Using the free energy data, a Boltzmann factor was determined for each conformer, which was, in turn, converted into the relative mole fraction. The computed NMR data are averaged (using the mole fraction of each conformation), referenced, and scaled to generate a set of Boltzmann-weighted average chemical shifts. Due to the widespread use of Spartan for molecular mechanics calculations, we have prepared an addendum to this protocol that utilizes the structures resulting from a Spartan Conformer Distribution calculation. As discussed in our original protocol,(7) molecules of increasing complexity are often accompanied by many conformational isomers. We have developed a Python script (e. g., “write-g 09 -inputs-sdf. py”) that generates two Gaussian 09 input files for each structure resulting from the conformational search. For convenience, we have provided an additional script (e. g., “write-g 03 -inputs-sdf. py”) that prepares Gaussian 03 input files. These input files include an “-opt_freq” file for determining the optimal geometry and free energy along with an “-nmr” file for calculating NMR shielding tensor data. The Python script expedites the DFT computations by greatly simplifying the preparation of the Gaussian input files. More specifically, the script extracts structural information from a “. sdf” file generated in Spartan, and the coordinates of each conformation are written into the Gaussian input files. The “. sdf” file type is routinely used for storing molecular information for multiple structures and can be produced by myriad software applications. The script provided in this protocol will be useful for writing Gaussian input files from “. sdf” files prepared in other chemistry software applications. ### Equipment **Software required to carryout Python scripts** 1. Command-line interface application (Terminal in Mac OS X or Linux; or Command Prompt in Windows) - Python, version 2 or 3 (included with Mac OS X and Linux operating systems) - Python script editor (e. g., IDLE (see [[URL] - Text editing application (e. g., TextEdit in Mac OS X or Notepad in Windows) **Software requirements for calculations** 1. This protocol has been written for use with Spartan’ 142, 3; however, we have tested earlier versions of Spartan (e. g., Spartan’ 08) and found that they are also compatible with the following Procedure. - The approach described in the Procedure is amenable to any software application that is capable of performing a conformational search and exporting the family of conformers as a “. sdf” file (e. g., MacroModel 8 and ChemBio 3 D 9). **Hardware requirements for use of Python scripts** 1. Most standard personal computers built after 2008 are capable of executing the Python scripts included in this protocol. **Hardware requirements for conformational search calculation** 1. A CPU with 4 GB of RAM and a dual-core processor is capable of performing the conformational search calculation for generating a family of conformers of the candidate structure. The hardware requirements for carrying out the DFT calculations in Gaussian 09 are described in ref. 7. ### Procedure **Create input geometry and carry out a molecular mechanics conformational search in Spartan ● TIMING 30 min (Steps 1 – 8) ** 1. Draw cis- 3 -methylcyclohexanol in the Spartan workspace. In Spartan select File → New to open the Model Kit toolbar. Change the Rings drop down menu to Cyclohexane and click inside the workspace to add a parent cyclohexane molecule. Select the Csp 3 button within the Model Kit toolbar and click one of the yellow open valences on the cyclohexane ring. This operation will attach the methyl group. Select the Osp 3 button within the Model Kit toolbar and click a yellow open valence on the cyclohexane ring that is both two carbons separated from and cis to the previously added methyl group. This will add an oxygen atom to the cyclohexane ring to give cis- 3 -methylcyclohexanol. Ensure that the overall structure is cis- 3 -methylcyclohexanol before continuing. - Quick and Crude Molecular Mechanics Geometry Optimization. Cleanup the preliminary geometry by clicking the <b>Minimize</b> <b>button</b> or selecting Build → Minimize. - Perform the conformational search. Select Setup → Calculations. A window will open. Change the Calculate: drop down menu selection to Conformer Distribution. Change the two drop down menus to the right so that they display Molecular Mechanics and MMFF. Check the box next to Maximum: and change the conformers examined to “ 1000 ”. Click Submit and a Save As window will appear. Change the computational filename to “cis- 3 -methylcyclohexanol”, change the directory (i. e. folder) to a location that is convenient for storing the associated computational files, and click Save. Click OK in the window that appears, which indicates that the conformational search has started. - After the conformational search has finished, a window confirming that the job has completed will appear. Click OK in this window. When prompted to open a new document select No. Select File → Close to clear the workspace. - Select File → Open and locate the conformational search output file “cis- 3 -methylcyclohexanol. spartan. ” - Ensure that all expected conformers have been found by the calculation. Select Display → Spreadsheet to open a window containing an entry for each structure found during the conformational search. A conformational search of cis- 3 -methylcyclohexanol is expected to yield six unique conformers. - Export the library of conformers as a single “. sdf” file. Select File → Save As… to open a Save As window. Enter “cis- 3 -methylcyclohexanol” as the filename, change the Save as type: drop down menu selection to MDL SD (*. sdf) and click Save. If a popup window appears with the title Select molecules, click Write all molecules followed by OK. Click OK in the popup window that confirms the file export. This step will export all structures from the conformational search to a single “. sdf” file—“cis- 3 -methylcyclohexanol. sdf”—located in the same directory as the conformational search output file. - Examine the resulting “. sdf” file to ensure that the results of the conformational search were correctly exported (Optional). Open the “. sdf” file in a text-editing application (e. g., TextEdit in Mac OS X or Notepad in Windows) and check that an entry is included for all unique conformations. A unique entry typically begins with the text “Spartan” followed by a series of numbers. Additionally, structures are usually systematically labeled, for example, the first conformation is by default titled “M 0001 ”. **Create Gaussian input files for each conformer ● TIMING 15 min (Steps 9 – 12) ** - 9. Download the “write-g 09 -inputs-sdf. py” (or “write-g 03 -inputs-sdf. py” if using Gaussian 03) Python script from [Supplementary Data 1]([URL] to the directory containing the “. sdf” file created in Step 7 (see Step 3 for directory location). If using Python version 2, download the “write-g 09 -inputs-sdf. py” script located in the Python-Version- 2 directory within [Supplementary Data 1]([URL] ▲ CRITICAL STEP Users must download the Python script from [Supplementary Data 1]([URL] that is compatible with the particular versions of both Python (i. e., either version 2 or 3) and Gaussian (i. e., either version 09 or 03) that are to be used. - 10. Editing the “write-g 09 -inputs-sdf. py” Python script to change the memory and number of processors used in Gaussian calculations (optional). To accommodate different users’ needs, we have prepared the “write-g 09 -inputs-sdf. py” Python script so that it is convenient to change the amount of memory and the|$|R

