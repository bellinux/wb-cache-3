0|31|Public
5000|$|Drives do {{not support}} all {{attribute}} codes (sometimes abbreviated as [...] "ID", for [...] "identifier", in tables). Some codes are specific to particular drive types (<b>magnetic</b> platter, <b>flash,</b> SSD). Drives may use different codes for the same parameter, e.g., see codes 193 and 225.|$|R
50|$|There is no {{industry}} standard or official name for blinkies, but most common names use {{some combination of}} the terms flash, magnet, strobe, body, blink, light, and/or jewelry. Common examples are blinkies, blinkees, body lights, blinky body lights, <b>magnetic</b> flashers, or <b>flashing</b> jewelry.|$|R
50|$|Fast {{low angle}} shot <b>magnetic</b> {{resonance}} imaging (<b>FLASH</b> MRI) is a basic measuring principle for rapid MRI invented in 1985 by Jens Frahm, Axel Haase, W Hänicke, KD Merboldt, and D Matthaei (German Patent Application P 35 04 734.8, February 12, 1985) at the Max-Planck-Institut für biophysikalische Chemie in Göttingen, Germany. The technique is revolutionary in shortening MRI measuring times by up to two orders of magnitude.|$|R
40|$|Flash {{is a type}} of Electronically Erasable Programmable Read-Only Memory (EEPROM). Different from {{traditional}} <b>magnetic</b> disks, <b>flash</b> memories have no moving parts and are purely electronic devices, giving them unique advantages, such as lower access latency, lower power consumption, higher density, shock resistance, and lack of noise. However, existing applications cannot run directly on flash memories due to their special characteristics. Flash Translation Layer (FTL) is a software layer built on raw flash memories that emulates a normal block device like magnetic disks. Primary functionalities of the FTL include address translation, garbage collection, and wear leveling. This survey focuses on address translation technologies and provides a broad overview of existing schemes described in patents, journals, and conference proceedings...|$|R
40|$|Abstract Compared with {{traditional}} <b>magnetic</b> disks, <b>Flash</b> memory has many advantages {{and has been}} used as external storage media for a wide spectrum of electronic devices (such as PDA, MP 3, Digital Camera and Mobile Phone) in recent years. As the capacity increases and price drops, it looks like a perfect alternative for magnetic disks. However, due to hardware limitations of flash memory, techniques including storage subsystem and indexing originally designed for magnetic disks can not run smoothly in a flash memory without any modification. In this paper we explore problems of indexing flash-resided data and present a new dynamical hash index for flash memory in two schemas. The analysis and experimental results validate the efficiency of our design. I...|$|R
40|$|Flash {{memory is}} widely used as the {{secondary}} storage in lightweight computing devices due to its outstanding advantages over <b>magnetic</b> disks. <b>Flash</b> memory has many access characteristics {{different from those of}} magnetic disks, and how to take advantage of them is becoming an important research issue. There are two existing approaches to storing data into flash memory: page-based and log-based. The former has good performance for read operations, but poor performance for write operations. In contrast, the latter has good performance for write operations when updates are light, but poor performance for read operations. In this paper, we propose a new method of storing data, called page-differential logging, for flash-based storage systems that solves the drawbacks of the two methods. The primar...|$|R
40|$|NAND {{flash memory}} is fast {{becoming}} popular {{as a component of}} large scale storage devices. For workloads requiring many random I/Os, flash devices can provide two orders of magnitude increased performance relative to <b>magnetic</b> disks. <b>Flash</b> memory has some unusual characteristics. In particular, general updates require a page write, while updates of 1 bits to 0 bits can be done in-place. In order to measure how well algorithms perform on such a device, we propose the “EWOM” model for analyzing algorithms on flash memory devices. We introduce flash-aware algorithms for counting, listmanagement, and B-trees, and analyze them using the EWOM model. This analysis shows that one can use the incremental 1 -to- 0 update properties of flash memory in interesting ways to reduce the required number of page-write operations. 1...|$|R
40|$|This paper {{presents}} a fully symmetrical sense amplifier topology for advanced non-volatile memories. The proposed structure ensures zero systematic offset, together with adequate rejection of disturbs coming from capacitive coupling with noisy substrate, power supply, and ground. The presented topology {{has been designed}} for phase change memories, however, it is also suitable for use in other non-volatile storage devices such as <b>magnetic</b> RAMs and <b>Flash</b> memories. Experimental results on sensing time, offset, and sensitivity demonstrated {{the effectiveness of the}} proposed scheme. 1...|$|R
40|$|Abstract. Snapshot Isolation is an {{established}} concurrency control algorithm, where each transaction executes against its own version/snapshot of the database. Version management may produce unnecessary random writes. Compared to <b>magnetic</b> disks <b>Flash</b> storage offers fundamentally different IO characteristics, e. g. excellent random read, low random write performance and strong read/write asymmetry. Therefore {{the performance of}} snapshot isolation can be improved by minimizing the random writes. We propose a variant of snapshot isolation (called SI-CV) that collocates tuple versions created by a transaction in adjacent blocks and therefore minimizes random writes {{at the cost of}} random reads. Its performance, relative to the original algorithm, in overloaded systems under heavy transactional loads in TPC-C scenarios on Flash SSD storage increases significantly. At high loads that bring the original system into overload, the transactional throughput of SI-CV increases further, while maintaining response times that are multiple factors lower. ...|$|R
40|$|IEEE Conference on Computer Communications Workshops, INFOCOM WKSHPS 2015, 26 - 1 May 2015 Storage class memory (SCM) modules can {{be placed}} {{side-by-side}} with DRAM on the memory bus, available to memory instructions issued by the CPU. This shift engenders a new 'DRAM-SCM' storage architecture and potentially allows near-DRAM secondary storage access speed, which is several orders of magnitude faster than <b>magnetic</b> disk or <b>flash</b> memory. Utilizing SCM as a secondary storage device will have {{a profound impact on}} memory hierarchy design, requiring new architectural and operating system support. Department of ComputingInvited conference pape...|$|R
40|$|In this study, we {{investigate}} the backup-system using peer-to-peer network system. In general, {{as a way}} to backup the data, we use <b>magnetic</b> tape, hard-disk, <b>flash</b> memory, file server, and online storage, etc. However, these devices have some problems on redundancy, dispersiveness, or security. We propose fault tolerant data backup system with peer-to-peer network. To improve the level of redundancy and dispersiveness, our system employs the number of peer-to-peer network's nodes and redundant encrypting backup data. We attempt to reduce the nodes' load by halving backup data and sending it to separate nodes...|$|R
40|$|We {{design and}} {{implement}} FD-Buffer, a buffer manager for database systems running on flash-based disks. Unlike <b>magnetic</b> disks, <b>flash</b> media has an inherent read-write asymmetry: writes involve expen-sive erase operations {{and as a}} result are usually much slower than reads. Therefore, we address this asymmetry in FD-Buffer. Specifically, we use the average I/O cost per page access as op-posed to the traditional miss rate as the performance metric for a buffer. We develop a new replacement policy in which we sepa-rate clean and dirty pages into two pools. The size ratio of the two pools is automatically adapted according to the read-write asymme-try and the runtime workload. We evaluate FD-Buffer with trace-driven simulations as well as experiments on real flash disks. Our evaluation results show that our algorithm achieves up to 40 % less I/O cost in simulation and up to 33 % improvement on the over-all performance on commodity flash disks, in comparison with the state-of-the-art flash-aware replacement policy. 1...|$|R
40|$|This slide {{presentation}} reviews several {{forms of}} nonvolatile memory {{for use in}} space applications. The intent is to: (1) Determine inherent radiation tolerance and sensitivities, (2) Identify challenges for future radiation hardening efforts, (3) Investigate new failure modes and effects, and technology modeling programs. Testing includes total dose, single event (proton, laser, heavy ion), and proton damage (where appropriate). Test vehicles {{are expected to be}} a variety of non-volatile memory devices as available including Flash (NAND and NOR), Charge Trap, Nanocrystal <b>Flash,</b> <b>Magnetic</b> Memory (MRAM), Phase Change [...] Chalcogenide, (CRAM), Ferroelectric (FRAM), CNT, and Resistive RAM...|$|R
40|$|Subjects with Alzheimer's disease (AD) exhibit normal {{visually}} evoked potentials (VEP) to pattern reversal stimuli but {{a delayed}} P 2 flash response. The pattern response may {{originate in the}} primary visual cortex via the geniculo-calcarine pathway while the flash P 2 may originate in the association areas via the cholinergic-tectal pathway. We now show: a) that the pathology of AD is more prominent in the visual association areas B 18 / 19 than in B 17 and b) that the <b>magnetic</b> signal to <b>flash</b> and pattern may originate from B 18 / 19 and B 17 respectively...|$|R
40|$|The {{phosphorescent}} {{state of}} 2, 3 -dichloroquinoxaline doped into single crystals of durene and 1, 2, 4, 5 -tetrachlorobenzene {{has been studied}} using several methods based upon optical detection of <b>magnetic</b> resonance (ODMR). <b>Flash</b> excitation and continuous optical pumping methods are described and analysed. Phosphorescent transient effects caused by spin-lattice relaxation and variable intersystem crossing rates are observed and described using first-order solutions of the appropriate rate equations. The effects of spatial polarization of the phosphorescence (anisotropic spatial distribution of phosphorescence intensity) of single crystals on ODMR signals is observed and discussed. The spatial polarization of emission can cause difficulties in determining relative radiative rate constants of the triplet sublevels in oriented samples, but can yield information about the linear polarization of the emission analogous to that obtained by conventional means using polarizers...|$|R
40|$|Flashisatypeofelectronicallyerasableprogrammablereadonly memory (EEPROM), {{which has}} many {{advantages}} over traditionalmagneticdisks,suchasloweraccesslatency,lower powerconsumption,lackofnoise,andshockresistance. However, {{due to its}} special characteristics, flash memory cannot be deployed directly {{in the place of}} traditional <b>magnetic</b> disks. The <b>Flash</b> TranslationLayer (FTL) is a software layer builtonrawflashmemorythatcarriesoutgarbagecollection and wear leveling strategies and hides the special characteristicsofflashmemoryfromupperfilesystemsbyemulatinga normal block device like magnetic disks. Most existing FTL schemes are optimized for some specific access patterns or bring about significant overhead of merge operations under certain circumstances. In this paper, we propose a novel FTL scheme named LazyFTL that exhibits low response latency and high scalability, and at the same time, eliminates the overhead of merge operations completely. Experimental results show that LazyFTL outperforms all the typical existing FTL schemes and is very close to the theoretically optimal solution. We also provide a basic design that assists LazyFTL to recover from system failures...|$|R
40|$|Mobile {{computers}} such as notebooks, subnotebooks, and palmtops require low weight, {{low power}} consumption, and good interactive performance. These requirements impose many challenges on architectures and operating systems. This chapter investigates three alternative storage devices for mobile computers: <b>magnetic</b> hard disks, <b>flash</b> memory disk emulators, and flash memory cards. We have used hardware measurements and trace-driven simulation to evaluate {{each of the}} alternative storage devices and their related design strategies. Hardware measurements on an HP OmniBook 300 highlight differences {{in the performance of}} the three devices as used on the Omnibook, especially the poor performance of version 2. 00 of the Microsoft Flash File System [12] when accessing large files. The traces used in our study came from different environments, including mobile computers (Mac- 1 An earlier version of this appeared in the Proceedings of the First Symposium on Operating Systems Design and Implementatio [...] ...|$|R
40|$|Due to its superiority such as low access latency, {{low energy}} consumption, light weight, and shock resistance, {{the success of}} flash memory as a storage {{alternative}} for mobile computing devices has been steadily expanded into personal computer and enterprise server markets with ever increasing capacity of its storage. However, since flash memory exhibits poor performance for small-to-moderate sized writes requested in a random order, existing database systems {{may not be able}} to take full advantage of flash memory without elaborate flash-aware data structures and algorithms. The objective of this work is to understand the applicability and potential impact that flash memory SSD (Solid State Drive) has for certain type of storage spaces of a database server where sequential writes and random reads are prevalent. We show empirically that up to more than an order of magnitude improvement can be achieved in transaction processing by replacing <b>magnetic</b> disk with <b>flash</b> memory SSD for transaction log, rollback segments, and temporary table spaces...|$|R
40|$|Flash {{memory is}} widely used as the {{secondary}} storage in lightweight computing devices due to its outstanding advantages over <b>magnetic</b> disks. <b>Flash</b> memory has many access characteristics {{different from those of}} magnetic disks, and how to take advantage of them is becoming an important research issue. There are two existing approaches to storing data into flash memory: page-based and log-based. The former has good performance for read operations, but poor performance for write operations. In contrast, the latter has good performance for write operations when updates are light, but poor performance for read operations. In this paper, we propose a new method of storing data, called page-differential logging, for flash-based storage systems that solves the drawbacks of the two methods. The primary characteristics of our method are: (1) writing only the difference (which we define as the page-differential) between the original page in flash memory and the up-to-date page in memory; (2) computing and writing the page-differential only once at the time the page needs to be reflected into flash memory. The former contrasts with existing page-based methods that write the whole page including both changed and unchanged parts of data or from log-based ones that keep track of the history of all the changes in a page. Our method allows existing disk-based DBMSs to be reused as flash-based DBMSs just by modifying the flash memory driver, i. e., it is DBMS-independent. Experimental results show that the proposed method improves the I/O performance by 1. 2 ~ 6. 1 times over existing methods for the TPC-C data of approximately 1 Gbytes. Comment: 37 page...|$|R
40|$|Abstract—Flash disks {{have been}} an {{emerging}} secondary storage media. In particular, there have been portable devices, multimedia players and laptop computers that are configured with no <b>magnetic</b> disks but <b>flash</b> disks. It is envisioned that some RDBMSs will operate on flash disks in the near future. However, the I/O characteristics of flash disks {{are different from those}} of magnetic disks. Thus, in this paper, we study the core of query processing in RDBMSs — join processing — on flash disks. Specifically, we propose a new join method, called DigestJoin, to exploit fast random reads of flash disks. DigestJoin consists of two phases: (1) projecting the join attributes followed by a join on the projected attributes; and (2) fetching the full tuples that satisfy the join to produce the final join results. While the problem of tuple/page fetching with minimum I/O cost (in the second phase) is intractable, we propose three heuristic fetching strategies. We have implemented DigestJoin on a real flash disk for performance evaluation. Experiments on TPC-H datasets show that DigestJoin clearly outperforms the traditional sort-merge join under various system configurations. I...|$|R
40|$|International audienceDue {{to several}} {{important}} features, {{such as high}} performance, low power consumption, and shock resistance, NAND flash has become a very popular stable storage medium for embedded mobile devices, personal computers, and even enterprise servers. However, the peculiar characteristics of flash memory require redesigning the existing data storage and indexing techniques that were devised for magnetic hard disks. In this article, we propose TRIFL, an efficient and generic TRajectory Index for FLash. TRIFL is designed around the key requirements of trajectory indexing and flash storage. TRIFL is generic {{in the sense that}} it is efficient for both simple flash storage devices such as SD cards and more powerful devices such as solid state drives. In addition, TRIFL is supplied with an online self-tuning algorithm that allows adapting the index structure to the workload and the technical specifications of the flash storage device to maximize the index performance. Moreover, TRIFL achieves good performance with relatively low memory requirements, which makes the index appropriate for many application scenarios. The experimental evaluation shows that TRIFL outperforms the representative indexing methods on <b>magnetic</b> disks and <b>flash</b> disks...|$|R
40|$|The {{popularity}} of high-density flash memory as {{data storage media}} has increased steadily for {{a wide spectrum of}} computing devices such as PDA’s, MP 3 players, mobile phones and digital cameras. More recently, computer manufacturers started launching new lines of mobile or portable computers that did away with magnetic disk drives altogether, replacing them with tens of gigabytes of NAND flash memory. Like EEPROM and <b>magnetic</b> disk drives, <b>flash</b> memory is non-volatile and retains its contents even when the power is turned off. As its capacity increases and price drops, flash memory will compete more successfully with lower-end, lowercapacity disk drives. It is thus not inconceivable to consider running a full database system on the flash-only computing platforms or running an embedded database system on the lightweight computing devices. In this paper, we present a new design called inpage logging (IPL) for flash memory based database servers. This new design overcomes the limitations of flash memory such as high write latency, and exploits unique characteristics of flash memory to achieve the best attainable performance for flash-based database servers. We show empirically that the IPL approach can yield considerable performance benefit over traditional design for disk-based database servers. We also show that the basic design of IPL can be elegantly extended to support transactional database recovery...|$|R
40|$|New {{storage class}} memory (SCM) technologies, such as phase change memory (PCM) and memristors, {{are not only}} byte-addressable like DRAM but also {{non-volatile}} like traditional hard disk drives. SCM modules can be placed side-by-side with DRAM on the memory bus, available to memory instructions issued by the CPU. This shift thus engenders a new "DRAM-SCM" storage architecture, which promises near-DRAM secondary storage access speed at several orders of magnitude faster than <b>magnetic</b> disk or <b>flash</b> memory. Utilizing SCM as a secondary storage device will have {{a profound impact on}} memory hierarchy design, requiring new architectural and operating system support. In this paper, we adopt PCM in the DRAM-SCM storage architecture and present BSS to provide file system-independent Block device Support for Storage class memory. To ensure backward compatibility and high performance, BSS provides a block device interface found in traditional hard disk drives and allows existing file systems to be built on top of itself without any modifications. BSS is designed to directly access the PCM through memory instructions and bypass traditional disk caches that are intended to reduce seek time. The DRAM-SCM architecture and BSS are prototyped in QEMU and the Linux kernel, respectively. Validation using benchmarks reveals that both work together well to exploit significant advantages of SCM. Compared to traditional hard disk drives, our approach boosts the write/read performance by up to 204 x for large files and achieves comparable performance for small ones. Department of Computin...|$|R
40|$|Due to the {{character}} of the original source materials and the nature of batch digitization, quality control issues may be present in this document. Please report any quality issues you encounter to digital@library. tamu. edu, referencing the URI of the item. Includes bibliographical references. Issued also on microfiche from Lange Micrographics. As the use of hyperthermic medical procedures increases, it has become more important to be able to non-invasively monitor the volume of treated tissue in real-time (or near real-time), not only to ensure that diseased tissue is destroyed, but also to prevent unnecessary collateral damage to surrounding healthy tissue. This research focuses on using T 2 *-weighted <b>FLASH</b> <b>magnetic</b> resonance imaging to detect irreversible changes in i. n vitro bovine liver tissue and tissuesimulating polyacrylamide gel phantoms following heating from physiologic levels into temperature regions used to induce coagulative necrosis. All samples were heated from physiologic levels to hyperthermic levels at specific intervals and imaged using a closed-loop water bath. Signal intensities were calculated and a comparison was made between images acquired at baseline temperatures and those images taken while at increased temperature. Results indicate that signal intensity levels do not return to baseline values in the samples following heating to levels known to result in coagulation, and for those samples which were heated to lower temperatures, these effects were not seen. The effects on image intensity may possibly provide a method to predict the coagulation front during hyperthermic procedures...|$|R
40|$|Most {{embedded}} database systems {{are built on}} a two-level memory hierarchy, a RAM buffer on top of flash memory. Both kinds of memories have limited capacity, thus, how to efficiently utilize them is critical for embedded systems with resource restrictions. Different from <b>magnetic</b> hard disk, <b>flash</b> memory has speed asymmetry in reads and writes, i. e., random reads are over {{an order of magnitude}} faster than random writes. &mu;-tree&nbsp; is the state-of-theart index supporting efficient random updates on the flash memory. However, we found that the traditional page based buffer scheme(LRU-P for short) under-utilized the RAM space. To improve the utilization on the memory resources and the query performance, we propose a novel buffer scheme called LRU-N &ndash; a node-based LRU policy for the RAM buffer. In addition, to increase the utilization of the flash memory, we also present a k-partitioning strategy for &mu;-tree. LRU-N uses a page address swizzling scheme to exploit the co-related locality of accessing multiple tree nodes in the &mu;-tree. The k-partitioning strategy determines an optimal k value for space efficiency by allocating more flash memory to the leaf nodes and guarantees sufficient space for tree growth. Our experiments conducted on both simulated data sets of various distributions and real-world data sets show that LRU-N can significantly improve buffer hit rate up to 65 % for the best cases over the page-based scheme LRU-P; even with small buffer size, LRU-N can also achieve rather good performance. And our proposed k-partitioning strategy can effectively reduce the index size up to 33 % over &mu;-tree...|$|R
40|$|Mobile {{computers}} such as notebooks, subnotebooks, and palmtops require low weight, {{low power}} consumption, and good interactive performance. These requirements impose many challenges on architectures and operating systems. This paper investigates three alternative storage devices for mobile computers: <b>magnetic</b> hard disks, <b>flash</b> memory disk emulators, and flash memory cards. We have used hardware measurements and trace-driven simulation to evaluate {{each of the}} alternative storage devices and their related design strategies. Hardware measurements on an HP OmniBook 300 highlight differences {{in the performance of}} the three devices as used on the Omnibook, especially the poor performance of version 2. 00 of the Microsoft Flash File System [11] when accessing large files. The traces used in our study came from different environments, including mobile computers (Macintosh Power-Books) and desktop computers (running Windows or HP-UX), as well as synthetic workloads. Our simulation study shows that flash memory can reduce energy consumptionby an order of magnitude, compared to magnetic disk, while providing good read performance and acceptable write performance. These energy savings can translate into a 22 % extension of battery life. We also find that the amount of unused memory in a flash memory card has a substantial impact on energy consumption, performance, and endurance: compared to low storage utilizations (40 % full), running flash memory near its capacity (95 % full) can increase energy consumption by 70 – 190 %, degrade write response time by 30 %, and decrease the lifetime of the memory card by up to a third. For flash disks, asynchronous erasure can improve write response time by a factor of 2. 5. ...|$|R
40|$|The rat infarct model offers {{important}} {{parallels to}} the process of remodeling after myocardial in-farction (M I) in humans. The aim {{of this study was to}} test the feasibility of cine fast low-angle shot (<b>FLASH)</b> <b>magnetic</b> resonance imaging (MRI) for assessment of the infarcted and noninfarcted rat heart and to compare the results with established methods. In group A, MRI was done 8 - 16 weeks after MI on a 7 -T scanner using an electrocardiogram-triggered cine-FLASH sequence. We determined left ventricular (LV) volumes and mass, wall thickness, MI size, cardiac output, and ejection fraction. Afterward, MI size was histologically determined. In group B, after MRI eight controls and eight rats I 6 weeks after MI underwent conventional hemodynamic measurements for determination of cardiac output, LV volumes, and ejection fraction by electromagneticjlowmeter and pressure-volume curves. LV wet weight was determined. In group A, MRI-acquired MI size (18. 5 ? 2 %) was smaller than histology (22. 8 ? 2. 5 %, p < 0. 05) with close correlation (r = 0. 97). In group B, agreement in LV mass was found between MRI and wet weight (controls, 537. 6 t 19. 6 vs. 540. 3 t 18. 4 mg; MI, 865. 1 ? 39. 2 vs. 865. 1 ? 41. 3 mg; for the difference p = ns, r = 0. 97, p < 0. 05) and in the MRI and jlowmeter measurements (cardiac output, controls 73. 1 ? 2. 9 vs. 75. 2 ? 2. 6 mlh in; MI 82. 4 ? 5. 2 vs. 81. 9 ? 3. 7 m l h i n; for the difference p = ns, r = 0. 80, p < 0. 05). End-diastolic volume by MR...|$|R
40|$|Over {{the last}} twenty years the {{interfaces}} for accessing persistent storage within a computer system have remained essentially unchanged. Simply put, seek, read and write have defined the fundamental operations that can be performed against storage devices. These three interfaces have endured because the devices within storage subsystems have not fundamentally changed since the invention of <b>magnetic</b> disks. Non-volatile (<b>flash)</b> memory (NVM) has recently become a viable enterprise grade storage medium. Initial implementations of NVM storage devices have chosen to export these same disk-based seek/read/write interfaces because they provide compatibility for legacy applications. We propose there is a new class of higher order storage primitives beyond simple block I/O that high performance solid state storage should support. One such primitive, atomic-write, batches multiple I/O operations into a single logical group that will be persisted as a whole or rolled back upon failure. By moving write-atomicity down the stack into the storage device, it is possible to significantly reduce the amount of work required at the application, filesystem, or operating system layers to guarantee the consistency and integrity of data. In this work we provide a proof of concept implementation of atomic-write on a modern solid state device that leverages the underlying log-based flash translation layer (FTL). We present an example of how database management systems can benefit from atomic-write by modifying the MySQL InnoDB transactional storage engine. Using this new atomic-write primitive we are able to increase system throughput by 33 %, improve the 90 th percentile transaction response time by 20 %, and reduce the volume of data written from MySQL to the storage subsystem by as much as 43 % on industry standard benchmarks, while maintaining ACID transaction semantics. ...|$|R
40|$|Flash memory {{promises}} to revolutionize storage systems {{because of its}} massive performance gains, ruggedness, large decrease in power usage and physical space requirements, {{but it is not}} a direct replacement for <b>magnetic</b> hard disks. <b>Flash</b> memory possesses fundamentally different characteristics and in order to fully utilize the positive aspects of flash memory, we must engineer around its unique limitations. The primary limitations are lack of in-place updates, the asymmetry between the sizes of the write and erase operations, and the limited endurance of flash memory cells. This leads to the need for efficient methods for block cleaning, combating write amplification and performing wear leveling. These are fundamental attributes of flash memory and will always need to be understood and efficiently managed to produce an efficient and high performance storage system. Our goal in this work is to provide analysis and algorithms for efficiently managing data storage for endurance in flash memory. We present update codes, a class of floating codes, which encodes data updates as flash memory cell increments that results in reduced block erases and longer lifespan of flash memory, and provides a new algorithm for constructing optimal floating codes. We also analyze the theoretically possible limits of write amplification reduction and minimization by using offline workloads. We give an estimation of the minimal write amplification by a workload decomposition algorithm and find that write amplification can be pushed to zero with relatively low over-provisioning. Additionally, we give simple, efficient and practical algorithms that are effective in reducing write amplification and performing wear leveling. Finally, we present a quantitative model of wear levels in flash memory by constructing a difference equation that gives erase counts of a block with workload, wear leveling strategy and SSD configuration as parameters...|$|R
40|$|The {{focus of}} this thesis is on systems that employ both <b>flash</b> and <b>magnetic</b> disks as storage media. Considering the widely {{disparate}} I/O costs of flash disks currently on the market, our approach is a cost-aware one: we explore techniques that exploit the I/O costs of the underlying storage devices to improve I/O performance. We also study the asymmetric I/O properties of <b>magnetic</b> and <b>flash</b> disks and propose algorithms that {{take advantage of this}} asymmetry. Our work is geared towards database systems; however, most of the ideas presented in this thesis can be generalised to any data-intensive application. For the case of low-end, inexpensive flash devices with large capacities, we propose using them at the same level of the memory hierarchy as magnetic disks. In such setups, we study the problem of data placement, that is, on which type of storage medium each data page should be stored. We present a family of online algorithms {{that can be used to}} dynamically decide the optimal placement of each page. Our algorithms adapt to changing workloads for maximum I/O efficiency. We found that substantial performance benefits can be gained with such a design, especially for queries touching large sets of pages with read-intensive workloads. Moving one level higher in the storage hierarchy, we study the problem of buffer allocation in databases that store data across multiple storage devices. We present our novel approach to per-device memory allocation, under which both the I/O costs of the storage devices and the cache behaviour of the data stored on each medium determine the size of the main memory buffers that will be allocated to each device. Towards informed decisions, we found that the ability to predict the cache behaviour of devices under various cache sizes is of paramount importance. In light of this, we study the problem of efficiently tracking the hit ratio curve for each device and introduce a lowoverhead technique that provides high accuracy. The price and performance characteristics of high-end flash disks make them perfectly suitable for use as caches between the main memory and the magnetic disk(s) of a storage system. In this context, we primarily focus on the problem of deciding which data should be placed in the flash cache of a system: how the data flows from one level of the memory hierarchy to the others is crucial for the performance of such a system. Considering such decisions, we found that the I/O costs of the flash cache play a major role. We also study several implementation issues such as the optimal size of flash pages and the properties of the page directory of a flash cache. Finally, we explore sorting in external memory using external merge-sort, as the latter employs access patterns that can take full advantage of the I/O characteristics of flash memory. We study the problem of sorting hierarchical data, as such is necessary for a wide variety of applications including archiving scientific data and dealing with large XML datasets. The proposed algorithm efficiently exploits the hierarchical structure in order to minimize the number of disk accesses and optimise the utilization of available memory. Our proposals are not specific to sorting over flash memory: the presented techniques are highly efficient over magnetic disks as well. EThOS - Electronic Theses Online ServiceGBUnited Kingdo...|$|R
40|$|The rise {{of modern}} Web {{applications}} {{has seen a}} surge in the quantity of digital content - photos, videos, and user interactions - stored, accessed, and transmitted by Internet services. To better handle such content, popular Web services, such as Facebook, have deployed large cache tiers within their serving stacks to lessen the load on backend systems and to decrease the data-request latency for users. Designing such cache infrastructures exposes challenges across three dimensions: (1) Modern Web workloads differ from earlier traditional workloads, due to {{the large amount of}} user-created content, as well as the frequency of updates due to user interactions; therefore, more advanced cache-replacement policies are required to provide sustained high hit-ratios, the key metric for caching performance. (2) Flash devices are extensively used due to their cost advantage over DRAM and their significantly higher I/O performance than <b>magnetic</b> disks; however, <b>flash</b> often yields low performance and high wearing costs with the small random writes that advanced caching algorithms tend to generate. (3) Load balance is critical for the scalability of an entire cache-server tier; however, different content within the modern Web may have disparate popularities, and the dependent data-partition mechanism is often used to co-locate relative data in favor of advanced application queries. Both scenarios exacerbate the imbalance. In this dissertation, we use two existing cache systems within the Facebook infrastructure - the photo-cache as a representative of static-content cache, and the Tao cache as an example of in-memory cache solutions - to address the three challenges men- tioned above. First, we examine the workload caused by accessing photos on Facebook and the effectiveness of the many layers of photo caches that have been deployed. By analyzing an event stream covering almost 80 million requests for more than 1 million unique photos, we are able to study cache-access patterns, evaluate current cache efficacy, and explore the potential performance benefits of certain advanced eviction algorithms at multiple cache layers. Second, when building advanced cache on flash devices, in order to address the performance degradation caused by small random writes, we propose the novel RIPQ (Restricted Insertion Priority Queue) framework. RIPQ allows for advanced caching algorithms with large cache sizes, high throughput, and long device lifetime. RIPQ maintains an approximate priority queue efficiently on flash by aggregating small random writes into large writes to a restricted set of insertion points, lazily moving items, and co-locating items with similar priorities. We show that two families of advanced caching algorithms, Segmented-LRU and GDSF (Greedy-Dual-Size-Frequency), can be easily implemented with RIPQ. Our evaluation builds on traces from Facebook's photoserving stack shows that GDSF algorithms with RIPQ can improve cache hit ratios by 20 % over the current production system, while incurring low overhead and achieving high throughput. Third, we investigate the principal causes of load imbalance - including data colocation, non-ideal hashing scenario, and hot-spot temporal effects. We analyze Facebook's runtime traffic against the partitioned cache tier in front of Tao, a subsystem that stores objects associated with Facebook's social graph. As part of this investigation, we also employ trace-drive analytics to study the benefits and limitations of current loadbalancing methods - including consistent hashing and hot-partition replication (with front-end caching as a special case) - and we suggest areas for future research. 2019 - 08 - 1...|$|R

