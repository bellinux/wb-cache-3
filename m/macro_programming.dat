82|219|Public
5000|$|<b>Macro</b> <b>programming,</b> {{allowing}} {{the user to}} program command sequences to be sent with one button press ...|$|E
50|$|SAM76 is a <b>macro</b> <b>programming</b> {{language}} used {{from the late}} 1970s to the present 2007 initially ran on CP/M.|$|E
50|$|On Lisp: Advanced Techniques for Common Lisp {{is a book}} by Paul Graham on <b>macro</b> <b>programming</b> in Common Lisp. Published in 1993, it is {{currently}} out of print, but can be freely downloaded as a PDF file.|$|E
40|$|Abstract. Based on {{the design}} {{parameters}} of disc CAM with the oscillating roller follower and modified trapezoid curve follower motion, by introducing <b>macro</b> <b>program</b> cyclic variable, the mathematical calculation model of <b>macro</b> <b>program</b> about cutter path of disc CAM with the holonomic constraint oscillating roller follower is established. The <b>macro</b> <b>program</b> is designed to can be adjusted quickly, according to the design parameters and the process parameters. The numerical control program completely parametric design is realized. So it provides programming methods and strategies for numerical control machining <b>macro</b> <b>program</b> design of the oscillating roller follower disc CAM with a complicated movement law...|$|R
40|$|Abstract. In {{order to}} reduce non-cutting time and improve {{machining}} efficiency, the <b>macro</b> <b>program</b> of automatic tool changer (ATC) has been designed firstly, {{which was based on}} the macro theory and parameter settings. Then, the machining simulation environment of the automatic tool changing was established, based on which, the digital simulation of automatic tool changing process is realized by mapping of the practical changing tool process in the virtual machining environment. The simulation results effectively verify and improve the <b>macro</b> <b>program</b> performance...|$|R
40|$|Visualizing Categorical Data {{presents}} a comprehensive overview of graphical methods for discrete data — count data, cross-tabulated frequency tables, and discrete response data. These methods {{are designed to}} complement traditional numerical summaries and statistical models, expose patterns in the data, and to aid in diagnosing model defects. They are illustrated with real data problems, and implemented in a large collection of SAS <b>macro</b> <b>programs</b> available with the book. A number of these methods are somewhat novel, and the <b>macro</b> <b>programs</b> may take some effort to use effectively with your own data. In this paper I present an overview of these methods and illustrate {{the use of the}} <b>macro</b> <b>programs</b> for graphic analysis to reveal features of the data not apparent in traditional numerical summaries. The goal is to translate ”theory into practice, ” and enable readers to use these techniques productively with their own data...|$|R
50|$|The WordStar Command Emulator {{is written}} in Microsoft Visual Basic for Applications, a <b>macro</b> <b>programming</b> {{language}} based on Visual Basic built into Microsoft Word {{to allow for a}} high level of customization. Most Word add-ins are written in this language also known as VBA.|$|E
50|$|Keyboard {{and mouse}} macros that are created using an application's {{built-in}} macro features are sometimes called application macros. They {{are created by}} carrying out the sequence once and letting the application record the actions. An underlying <b>macro</b> <b>programming</b> language, most commonly a scripting language, with {{direct access to the}} features of the application may also exist.|$|E
5000|$|Input {{is entirely}} command driven, {{allowing}} unattended batch operation; a built-in <b>Macro</b> <b>programming</b> language allows {{the construction of}} a simple new [...] "command" [...] that can execute other commands in a complex manner. Users store their own previously written macros in a macro libraries (a single disk file), and there is an extensive [...] "permanent" [...] macro library available for all users.|$|E
50|$|According to {{information}} present on product website, the <b>program</b> uses <b>macro</b> <b>program</b> to integrate itself into Microsoft Office. In case if macro security level is high, then program {{will not be}} installed correctly.|$|R
40|$|The SAS ® macro facility, which {{includes}} macro variables and <b>macro</b> <b>programs,</b> {{is the most}} useful tool to develop your own applications. Beginning SAS programmers often don’t realize {{that the most important}} function in learning a <b>macro</b> <b>program</b> is understanding the macro language processing rather than just learning the syntax. The lack of understanding includes how SAS statements are transferred from the input stack to the macro processor and the DATA step compiler, what role the macro processor plays during this process, and when best to utilize the interface to interact with the macro facility during the DATA step execution. In this talk, these issues are addressed via creating simple macro applications step-by-step...|$|R
50|$|The first screenwriting {{software}} was SmartKey, a <b>macro</b> <b>program</b> that sent strings of commands to existing word processing programs, such as WordStar, WordPerfect and Microsoft Word. SmartKey was popular with screenwriters from 1982-1987, after which word processing programs {{had their own}} macro features.|$|R
50|$|Microsoft Excel is a {{spreadsheet}} developed by Microsoft for Windows, macOS, Android and iOS. It features calculation, graphing tools, pivot tables, and a <b>macro</b> <b>programming</b> language called Visual Basic for Applications. It {{has been a}} very widely applied spreadsheet for these platforms, especially since version 5 in 1993, and it has replaced Lotus 1-2-3 as the industry standard for spreadsheets. Excel forms part of Microsoft Office.|$|E
50|$|Modern vision mixers {{may also}} have {{additional}} functions, such as serial communicationswith {{the ability to use}} proprietary communications protocols, control auxiliary channels for routing video signals to other sources than the program out, <b>macro</b> <b>programming,</b> and DVE (Digital Video Effects) capabilities. Mixers are often equipped with effects memory registers, which can store a snapshot of any part of a complex mixer configuration and then recall the setup with one button press.|$|E
50|$|Visual Basic for Applications enables {{building}} user-defined functions (UDFs), automating {{processes and}} accessing Windows API and other low-level functionality through dynamic-link libraries (DLLs). It supersedes and expands on {{the abilities of}} earlier application-specific <b>macro</b> <b>programming</b> languages such as Word's WordBasic. It {{can be used to}} control many aspects of the host application, including manipulating user interface features, such as menus and toolbars, and working with custom user forms or dialog boxes.|$|E
40|$|A {{summary table}} with {{statistical}} comparisons {{is one of}} the most common tables included in clinical study reports. The table usually contains not only summary statistics such as, count, mean, standard deviations, medians, ranges for relevant continuous variables of interest, and number and percentage of patients falling within a particular category for categorical variables of interest, but also some statistical information such as p-values from Chi-square test, Fisher’s exact test, t-test, ANOVA test, etc. We have developed a user-friendly <b>macro</b> <b>program</b> to calculate summary statistics and test results for both continuous and categorical variables of interest, and output a highly customized, presentable table into Microsoft Word. The SAS <b>Macro</b> <b>program</b> is flexible, allowing you to choose the descriptive statistics and the statistical methods for comparisons among groups...|$|R
50|$|An {{update to}} Scriptor {{understood}} the style sheets used in Microsoft Word for DOS. And so {{the need for}} key <b>macro</b> <b>programs</b> was lessened. Scriptor's limitation was that once formatted {{it was difficult to}} re-import the resulting text back into a word processor for further editing.|$|R
50|$|After remapping, the old key {{will retain}} its {{original}} function even after being remapped elsewhere, effectively creating {{two copies of}} the same key. After it is remapped somewhere else, the original or 'old' key can be remapped to a different function or have a <b>macro</b> <b>programmed</b> to it.|$|R
5000|$|Word 97 had {{the same}} general {{operating}} performance as later versions such as Word 2000. This was the first copy of Word featuring the Office Assistant, [...] "Clippit", which was an animated helper used in all Office programs. This was a takeover from the earlier launched concept in Microsoft Bob. Word 97 introduced the <b>macro</b> <b>programming</b> language Visual Basic for Applications (VBA) which remains in use in Word 2016.|$|E
50|$|The third known {{version is}} part number 2189014-00-212, {{with at least}} one model being {{produced}} in February 1993. These are visually very similar to part number 2189014-00-211, with the same AT style plug and chassis, silver label on the reverse bearing the AnyKey moniker, screws holding the keyboard together, <b>macro</b> <b>programming</b> requiring the control key, and lacking the AnyKey inscription on their face. An alternate version is part number 2189014-00-712 with a PS/2 style plug.|$|E
50|$|The AnyKey {{keyboard}} is extensively programmable. This {{takes two}} forms: Remapping, and <b>macro</b> <b>programming.</b> The only keys on the AnyKey that cannot be programmed {{in at least}} some way are those used to control the programming itself - Program Macro, Suspend Macro, Repeat Rate, and Remap. Any other key on the keyboard including letters, numbers, arrow keys, and even special keys like modifiers such as Shift, Alt, Ctrl, Enter, and the Space Bar can be programmed.|$|E
50|$|The Program light {{normally}} remains solidly {{on or off}} {{depending on}} whether the keyboard is set to use macros, which can be toggled by pressing the Suspend Macro key. The state of the Program light does not reflect whether there are any <b>macros</b> <b>programmed</b> into the keyboard, merely whether the keyboard is in macro mode.|$|R
40|$|Adverse events (AE) are {{commonly}} reported and analyzed {{through the use}} of various summary tables as requested by FDA and other regulatory agencies. However, writing and validating these SAS programs are very labour-intensive and time-consuming. In this paper, we introduce a SAS <b>macro</b> <b>program</b> that creates one adverse event analysis dataset for generating different summary tables...|$|R
40|$|This paper {{deals with}} the {{optimization}} of coaxial filters using Tuning Space Mapping (TSM) method implemented to CST environment. The function of fine and coarse model and their link between each other is explained. In addition, supporting <b>macros</b> <b>programmed</b> in VBA language, which are used for maximum efficiency of the optimization from the user´s point of view, are mentioned. <b>Macros</b> are <b>programmed</b> in CST and are also used for automatic calibration constants determination and for automatic calibration process between the coarse model and the fine model. The whole algorithm is illustrated on the particular seven-order filter design and optimized results are compared to measured ones...|$|R
50|$|Release 1A's {{executable}} code was about 60 KB {{smaller than the}} later Release 2, which provided greater <b>macro</b> <b>programming</b> facilities. This extra space for data, with the additional 128 KB of RAM available to a fully expanded Tandy 2000, {{made it possible to}} construct larger worksheets than later PCs running Release 2 (until the advent of machines with Expanded memory). For nearly two years following its introduction, the Tandy 2000 was the top performer for processing large models in Lotus 1-2-3.|$|E
5000|$|Variable names {{used in the}} [...] "Clip" [...] {{language}} allow embedded variables, {{which in}} turn allows dynamic naming and renaming on the fly. The only shortcoming in NoteTab's <b>macro</b> <b>programming</b> language are lack of local variables, and the limitation of one command per line, and one line per command (commands may not be broken into several lines). Some people may find the symbolism used to mark variables, functions, and commands within a script irritating. These symbols provide lightning-fast parsing (execution) of the macros.|$|E
50|$|Other software, such as GNU LilyPond and Philip's Music Writer, reads {{input from}} {{ordinary}} text files whose contents resemble a computer <b>macro</b> <b>programming</b> language that describes bare musical content {{with little or}} no layout specification. The software translates the usually handwritten description into fully engraved graphical pages to view or send for printing, taking care of appearance decisions from high level layout down to glyph drawing. The music entry process is iterative and is similar to the edit-compile-execute cycle used to debug computer programs.|$|E
40|$|When {{religion}} is visibly expressed, {{is it the}} expression of religion? (b) When organiza-tions move within the continuum, do they move in multiple and even counterintuitive directions? (c) How do beneficiaries benefit? (d) How does the “faith factor ” figure into <b>macro</b> <b>programs?</b> It is concluded {{that it is in}} both what the typology is designed to do and not designed to do that informs future research...|$|R
40|$|This note {{extends the}} {{construction}} of the design matrix used for estimating cell probabilities with ignorable missing data described by Lipsitz et al. (1998). A reformulation for the general case of an n-way table is described, and implemented in a SAS <b>macro</b> <b>program.</b> The <b>macro</b> constructs this design matrix and offset variable, estimates the cell probabilities, and returns a table with the estimates, their standard errors, and fitted cell frequencies...|$|R
5000|$|Historically, {{and in some}} {{contemporary}} legacy systems, such as VMS and OS/400, {{computer programs}} have a multitude of entry points, each corresponding to the different functionalities of the program. The usual way to denote entry points, as used system-wide in VMS and in PL/I and <b>MACRO</b> <b>programs,</b> is to append them {{at the end of}} the name of the executable image, delimited by a dollar sign ($), e.g[...]|$|R
5000|$|RT-11 {{was written}} in {{assembly}} language. Heavy use of the conditional assembly and <b>macro</b> <b>programming</b> features of the MACRO-11 assembler allowed a significant degree of configurability and allowed programmers to specify high-level instructions otherwise unprovided for in machine code. RT-11 distributions included the source code of the operating system and its device drivers with all the comments removed and a program named [...] "SYSGEN" [...] which would build the operating system and drivers according to a user-specified configuration. Developer's documentation included a kernel listing that included comments.|$|E
50|$|A {{more recent}} {{advancement}} in CNC interpreters is support of logical commands, known as parametric programming (also known as <b>macro</b> <b>programming).</b> Parametric programs include both device commands {{as well as}} a control language similar to BASIC. The programmer can make if/then/else statements, loops, subprogram calls, perform various arithmetic, and manipulate variables to create a large degree of freedom within one program. An entire product line of different sizes can be programmed using logic and simple math to create and scale an entire range of parts, or create a stock part that can be scaled to any size a customer demands.|$|E
5000|$|The {{patent for}} this [...] "Display Keyboard" [...] ( [...] , filed 1996, {{published}} 1998) {{is held by}} inventor Elkin Acevedo. However, the first programmable LCD keyboard [...] {{was developed in the}} mid-1980s in Germany. This keyboard, sold under the LCBoard name in the U.S. until 1999, contained many of the features of the Optimus keyboard including monochrome graphic icons on each keyboard key, <b>macro</b> <b>programming,</b> context sensitive and application dependent switching between functions. S. Bigbie et. al. published related ideas in an IBM Technical Disclosure Bulletin (Vol. 21 No. 2 July 1978) , as did Alan Bagley of Hewlett-Packard in (...) [...]|$|E
50|$|In {{computing}} terminology, a {{macro virus}} is {{a virus that}} is written in a <b>macro</b> language: a <b>programming</b> language which is embedded inside a software application (e.g., word processors and spreadsheet applications). Some applications, such as Microsoft Office, Excel, Power point allow <b>macro</b> <b>programs</b> to be embedded in documents such that the macros are run automatically when the document is opened, and this provides a distinct mechanism by which malicious computer instructions can spread. This is one reason it can be dangerous to open unexpected attachments in e-mails. Many antivirus <b>programs</b> can detect <b>macro</b> viruses, however the macro virus' behavior can still be difficult to detect.|$|R
50|$|A key can {{be cleared}} of its <b>macro</b> by {{pressing}} <b>Program</b> <b>Macro</b> and then pressing the key twice. Pressing a programmed key will “play back” all the keypresses that were programmed into {{it at the}} current repeat rate of the keyboard.|$|R
40|$|SAS notes, warnings, and {{errors are}} {{written to the}} log to help SAS programmers {{understand}} what SAS is expecting to find. Some messages are for information, some signal potential problems, some require you {{to make changes in}} your SAS code, and some might seem obscure. This paper explores some of these notes, warnings, and errors that come from DATA step and <b>macro</b> <b>programs.</b> This paper deciphers them into easily understood explanations that enable you to answer many of your questions...|$|R
