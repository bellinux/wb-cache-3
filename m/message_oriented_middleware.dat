80|179|Public
5000|$|... #Subtitle level 2: XMPP as an {{extensible}} <b>Message</b> <b>Oriented</b> <b>Middleware</b> (xMOM) platform ...|$|E
5000|$|An {{implementation}} of the JMS interface for a <b>Message</b> <b>Oriented</b> <b>Middleware</b> (MOM). Providers are implemented as either a Java JMS implementation or an adapter to a non-Java MOM.|$|E
50|$|WMQ or Websphere MQ is IBM <b>Message</b> <b>Oriented</b> <b>Middleware</b> {{product for}} {{communication}} of distributed system. Mule also provides support for WMQ called Mule WMQ Transport which works with 7.0, 7.1 and 7.5 versions and provides endpoint for the same.|$|E
40|$|Abstract — We {{address the}} issue of {{middleware}} for networked control systems which feature the convergence of control with communication and computation. Our thesis is that a welldesigned software architectural framework is critical to the widespread deployment and proliferation of such systems. We develop a list of key requirements for middleware, and present Etherware, a <b>message</b> <b>oriented</b> component <b>middleware</b> for networked control. We describe the application models supported in Etherware, and illustrate these vis-á-vis our vehicular control testbed. We conclude with some experiments that demonstrate the support for system management and evolution in Etherware. I...|$|R
40|$|Networked {{control systems}} could {{possibly}} constitute {{the next logical}} step in the evolution of control, leading to the convergence of control with communication and computing. A central challenge is that traditional digital control methods cannot be directly applied to such systems. However, if appropriate system abstractions can be engineered, then such methods and theory can still be utilized. Our thesis is that a well designed middleware framework can indeed manufacture such an abstraction of virtual collocation, and thereby, propel the further proliferation of networked control systems. In this thesis, we present such a middleware framework for networked control systems. Central to this framework is Etherware, a <b>message</b> <b>oriented</b> component <b>middleware</b> for such systems. We begin with {{a detailed description of the}} design and architecture of Etherware, and illustrate Etherware based development of networked control systems through a fairly complex traffic control testbed application. Building on the middleware, we addres...|$|R
40|$|Abstract—Adaptation {{middleware}} {{is becoming}} widely {{used to build}} adaptive collaborative applications. However, collaborative applications requiring real-time services are intolerant of the long reconfiguration time of the existing adaptation middleware, which is {{in a range of}} seconds or even tens of seconds. In this paper, we present MARCHES, which is active <b>message</b> <b>oriented</b> adaptation <b>middleware</b> that reduces the reconfiguration time. Different from the traditional middleware that supports the single component-chain based application architecture, MARCHES maintains multiple component chains or actuators. Then the process of architecture reconfiguration is done by a new method of switching active and inactive actuators, which replaces the traditional method of modifying the single-chain architecture. An active message based synchronization protocol is proposed according to the new method to reduce the communication overhead and reconfiguration time. Experiment results demonstrate that MARCHES improves the packet delivery ratio and throughput of collaborative applications. Results also show that the reconfiguration time achieved by MARCHES is in a range of hundreds of microseconds and the extra costs introduced by the multi-actuator architecture are extremely low. Keywords- Middleware; adaptation; active messages I...|$|R
50|$|One of {{the long-standing}} {{standards}} for <b>message</b> <b>oriented</b> <b>middleware</b> is X/Open group's is XATMI specification (Distributed Transaction Processing: The XATMI Specification) which standardizes API for interprocess communications. Known implementations for this API is ATR Baltic's Enduro/X middleware and Oracle's Tuxedo.|$|E
5000|$|ObjectWeb defines {{middleware}} as: [...] "The {{software layer}} that lies between {{the operating system}} and applications {{on each side of}} a distributed computing system in a network." [...] Services that can be regarded as middleware include enterprise application integration, data integration, <b>message</b> <b>oriented</b> <b>middleware</b> (MOM), object request brokers (ORBs), and the enterprise service bus (ESB).|$|E
5000|$|IBM MQ, (often {{referred}} to as [...] "MQ"), is IBM's Messaging solution for Enterprise and IBM's <b>Message</b> <b>Oriented</b> <b>Middleware</b> offering. It allows independent and potentially non-concurrent applications on a distributed system to securely communicate with each other. MQ is available on {{a large number of}} platforms (both IBM and non-IBM), including z/OS (mainframe), OS/400 (IBM System i or AS/400), Transaction Processing Facility, UNIX (AIX, HP-UX, Solaris), HP NonStop, OpenVMS, Linux, OS 2200, and Microsoft Windows.|$|E
40|$|Business Process Management (or BPM) {{has emerged}} {{recently}} {{as one of}} the most prominent technologies in enterprise systems. Generally, BPM aims to provide business process modelling, enactment, and monitoring. BPM attempts to create general frameworks, which avoid the "hard-coded" approach to application integration. It leverages the logic of business processes in the hands of process stakeholders, by abstracting from the data and application implementation details. However, despite the interest of various parties and the development of the technology, BPM solutions have not always delivered successfully. There reside many challenges and difficulties in BPM, which include the scalability, volatility, autonomy, heterogeneity, reliability, and security issues. A wide range of information technologies has been proposed to respond to these issues, but many limitations and challenges still exist; particularly, providing process support for collaborative business processes that are characterised by autonomous processes, asynchronous business activities, and message-based process communication. This thesis is motivated by the requirement to build a new approach for BPM to tackle the challenges of collaborative processes. We propose to integrate <b>Messaging</b> <b>Oriented</b> <b>Middlewares</b> and Rule-based technology into a new so-called Harmonized Messaging Technology (or HMT). The HMT utilises a messaging mechanism empowered by rules for supporting collaborative business processes. In particular, the HMT is intended to bridge the gap between the communication-oriented approaches and rule-based approaches for process management. The technology considers the abstraction of the process logic and the automation of the process management through an ordered flow of messages. In this thesis, we propose a temporal first-order language, which is called Harmonized Messaging Calculus and forms the formal foundation for rules governing the business process execution in HMT. For verification purpose, we consider the correctness criteria for such HMT rules, which help to avoid inconsistencies and unexpected behaviour in executing HMT process models. In addition, this thesis will present the architecture of the systems, which manage business processes through HMT. The functionality of HMT in process modelling and enactment is also investigated. Finally, the flexibility of HMT process models in supporting the new functionality is discussed. We conclude the thesis with the indication of directions for future work, which focus on the issues related to the deployment of HMT. In particular, we raise issues in design interfaces, analysis tools, audit trail data, transactions support, and security...|$|R
40|$|Abstract—To achieve {{integration}} on heterogeneous applica-tion systems, {{and ensure}} reliable transmission of infor-mation {{in the manufacturing}} integrated service platform, some technologies and methods are studied, such as the hi-erarchical architecture, center architecture model, security mechanism of J 2 EE, the integrated architecture, asynchro-nous communication mode, and advantages of reliable transmission of the information <b>oriented</b> <b>middleware.</b> Com-bine J 2 EE platform and J 2 EE connector architecture, an in-tegrated framework is proposed, which includes client layer, middle layer and heterogeneous information system layer. With the information <b>oriented</b> <b>middleware</b> and its infor-mation broker, the framework not only can promote busi-ness logic which is separated from the client side and server side, meet easily the increasingly complex and ever-changing needs of the business logic, but also can achieve reliable in-formation transmission. As a result, it will make develop-ment and maintenance and application of the manufactur-ing integrated service platform become more convenient, and will provide the integrated heterogeneous application systems with reliable communications services. Index Terms—integrated services, heterogeneous applica-tion integration, distributed system architecture, integrated framework, information <b>oriented</b> <b>middleware,</b> asynchro-nous communications, reliable information transmission I...|$|R
40|$|We {{present a}} new QoS-enabled load {{management}} framework for component <b>oriented</b> <b>middleware.</b> It offers {{the possibility of}} selecting the optimal load distribution algorithms and changing the load metrics at runtime. The QoS service level agreements are made at user level, transparent to the managed application...|$|R
50|$|The Java Message Service (JMS) API is a Java <b>Message</b> <b>Oriented</b> <b>Middleware</b> (MOM) API {{for sending}} {{messages}} between {{two or more}} clients. It is an implementation to handle the Producer-consumer problem. JMS {{is a part of}} the Java Platform, Enterprise Edition, and is defined by a specification developed under the Java Community Process as JSR 914. It is a messaging standard that allows application components based on the Java Enterprise Edition (Java EE) to create, send, receive, and read messages. It allows the communication between different components of a distributed application to be loosely coupled, reliable, and asynchronous.|$|E
50|$|Based on {{earnings}} {{reported for}} IBM's 1Q13, annualized revenue for IBM's middleware software unit increased to $14 billion (up $7 billion from 2011). License and maintenance revenue for IBM middleware products reached $7 billion in 2011. In 2012, IBM expected {{an increase in}} both market share and total market increase of ten percent. The worldwide application infrastructure and middleware software market grew 9.9 percent in 2011 to $19.4 billion, according to Gartner. Gartner reported that IBM continues to be number one in other growing and key areas including the Enterprise Service Bus Suites, <b>Message</b> <b>Oriented</b> <b>Middleware</b> Market, the Transaction Processing Monitor market and Integration Appliances.|$|E
5000|$|IBM, Red Hat, Oracle Corporation and Microsoft {{are some}} of the vendors that provide {{middleware}} software. Vendors such as Axway, SAP, TIBCO, Informatica, Objective Interface Systems, Pervasive and webMethods were specifically founded to provide more niche middleware solutions. Groups such as the Apache Software Foundation, OpenSAF, the ObjectWeb Consortium (now OW2) and OASIS' AMQP encourage the development of open source middleware. Microsoft [...]NET [...] "Framework" [...] architecture is essentially [...] "Middleware" [...] with typical middleware functions distributed between the various products, with most inter-computer interaction by industry standards, open APIs or RAND software licence. Solace Systems provides middleware in purpose-built hardware for implementations that may experience scale. StormMQ provides <b>Message</b> <b>Oriented</b> <b>Middleware</b> as a service.|$|E
40|$|This paper {{describes}} {{the implementation of}} an object <b>oriented</b> <b>middleware</b> that allows the application developer to regulate the use of individual remote methods by means of access control lists. Such platform has been implemented as an instance of Arcademis, a framework for middleware development. The objective of this case study is twofold. Firstly, to demonstrate how frameworks and design patterns can be synergistically combined {{in order to facilitate}} the implementation of distributed software. Secondly, to point similarities between the architecture of object <b>oriented</b> <b>middleware,</b> such as Java RMI, and distributed authentication systems, such as Kerberos, in order to argue that discretionary access control can be added to the commercial middleware platforms as a natural extension of the remote method invocation paradigm. ...|$|R
5000|$|Two {{technologies}} {{implement the}} DC-BUS: Byte <b>oriented</b> and <b>Message</b> <b>oriented.</b>|$|R
50|$|Each level's soundtrack {{contains}} <b>messages</b> <b>oriented</b> towards peace, well-being, love, and happiness.|$|R
50|$|Building on its {{capability}} to support discovery across local network domains, XMPP is well-suited for cloud computing where virtual machines, networks, and firewalls would otherwise present obstacles to alternative service discovery and presence-based solutions. Cloud computing and storage systems rely on {{various forms of}} communication over multiple levels, including not only messaging between systems to relay state but also the migration or distribution of larger objects, such as storage or virtual machines. Along with authentication and in-transit data protection, XMPP can be applied {{at a variety of}} levels and may prove ideal as an extensible middleware or <b>Message</b> <b>Oriented</b> <b>Middleware</b> (MOM) protocol. Widely known for its ability to exchange XML-based content natively, it has become an open platform for the exchange of other forms of content including proprietary binary streams, Full Motion Video (FMV) content, and the transport of file-based content, via for example the Jingle series of extensions. Here the majority of the applications {{have nothing to do with}} human communications (i.e., IM) but instead provide an open means to support machine-to-machine or peer-to peer communications across a diverse set of networks.|$|E
40|$|This paper {{describes}} {{an approach to}} enhance the resilience of <b>message</b> <b>oriented</b> <b>middleware</b> to faults and attacks. The system is designed to work with different <b>message</b> <b>oriented</b> <b>middleware</b> {{as long as the}} messaging system can supply the information and control API required. The structure of the system and the approach to handling link failures, broker failures and anomalous behaviour through the planning of mirroring and relaying mechanisms to suit the tolerable risk and the deployment context is the focus of the paper. Validation is through industrial case studies and end user assessment...|$|E
40|$|The publish/subscribe {{paradigm}} of <b>Message</b> <b>Oriented</b> <b>Middleware</b> provides a loosely coupled communication model between distributed applications. Traditional publish/subscribe middleware uses keywords to match advertisements and subscriptions {{and does not}} support deep semantic matching. To this end, we designed and implemented a Semantic <b>Message</b> <b>Oriented</b> <b>Middleware</b> system to provide such capabilities for semantic description and matching. We adopted the DARPA Agent Markup Language and Ontology Inference Layer, a formal knowledge representation language for expressing sophisticated classifications and enabling automated inference, as the topic description language in our middleware system. A simple description logic inference system was implemented to handle the matching process between the subscriptions of subscribers and the advertisements of publishers. Moreover our middleware system also has a security architecture to support secure communication and user privilege control...|$|E
5000|$|Bharatamuni Awards - Best <b>Message</b> <b>Oriented</b> Film, Best Debut Director - Kranthi Madhav ...|$|R
40|$|A new {{reflective}} QoS-enabled {{load management}} framework for component <b>oriented</b> <b>middleware</b> is presented. The proposed framework offers {{the possibility of}} automatically selecting the optimal load distribution algorithms and changing the used load metrics at runtime, according to workload time evolution. QoS service level agreements are being offered at application level, transparent to the managed application...|$|R
40|$|Data access layers are an {{ubiquitous}} {{issue in}} enterprise applications. In {{a great number}} of companies a relational database coexists with an object <b>oriented</b> <b>middleware</b> and the applications have to deal with that. The impedance mismatch between both models is very well known among the software development community. In order to cope with i...|$|R
40|$|In mobile ad hoc networks, {{synchronous}} communication mechanisms {{appear to be}} not suitable, since these assume that the involved entities are present {{at the same time}} during the interactions. On the other hand, asynchronous mechanisms seem to be better suited for mobile environments characterised with frequently intermittent connectivity. Therefore, <b>message</b> <b>oriented</b> <b>middleware</b> based on the a{{synchronous communication}} paradigm seems a reasonable choice in these environments. This paper outlines the expected research contribution of my PhD work {{in the area of the}} <b>message</b> <b>oriented</b> <b>middleware</b> for mobile ad hoc environments. The key aspect of my approach is the exploitation of context information to enable communication also in extreme scenarios, where topology reconfigurations are frequent and network partitions are the norm rather than the exception, in an efficient way in terms of the use of the possibly scarce resources of mobile devices...|$|E
40|$|Abstract The {{characteristics}} of mobile environments, {{with the possibility}} of frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware. In particular, the synchronous communication paradigms often employed in standard middleware {{do not appear to be}} particularly suited to ad hoc environments, in which not even the intermittent availability of a backbone network can be assumed. Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments. <b>Message</b> <b>oriented</b> <b>middleware</b> for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, also for some specific mobile computing systems recently. In this paper, we present our experience in designing, implementing, and evaluating Epidemic Messaging Middleware for Ad hoc networks (EMMA), an adaptation of Java Message Service (JMS) for mobile ad hoc environments, discussing in detail the design challenges and the solutions that have been adopted. Keywords <b>Message</b> <b>oriented</b> <b>middleware</b> Æ Middleware for mobile computing Æ Epidemic protocol Æ Mobile ad hoc networks...|$|E
40|$|<b>Message</b> <b>Oriented</b> <b>Middleware</b> (MOM) is an {{enabling}} technology for modern event- driven applications that are typically based on publish/subscribe communication [Eugster 03]. Enterprises typically contain hundreds of applications operating in environments with diverse databases and operating systems. Integration of these applications {{is required to}} coordinate the business process. Unfortunately, this is no easy task. Enterprise Integration, according to Brosey et al. (2001), 2 ̆ 2 aims to connect and combines people, processes, systems, and technologies {{to ensure that the}} right people and the right processes have the right information and the right resources at the right time 2 ̆ 2 [Brosey 01]. Communication between different applications can be achieved by using synchronous and asynchronous communication tools. In synchronous communication, both parties involved must be online (for example, a telephone call), whereas in asynchronous communication, only one member needs to be online (email). Middleware is software that helps two applications communicate with one another. Remote Procedure Calls (RPC) and Object Request Brokers (ORB) are two types of synchronous middleware—when they send a request they must wait for an immediate reply. This can decrease an application’s performance when {{there is no need for}} synchronous communication. Even though asynchronous distributed messaging using <b>message</b> <b>oriented</b> <b>middleware</b> is widely used in industry, there is not enough work done in evaluating the performance of various open source <b>Message</b> <b>oriented</b> <b>middleware.</b> The objective of this work was to benchmark and evaluate three different open source MOM’s performance in publish/subscribe and point-to-point domains, functional comparison and qualitative study from developers perspective...|$|E
5000|$|The {{discussion}} {{moved on}} to more technical issues, but the name remained, although a backronym was formed as [...] "License to Enhance <b>Message</b> <b>Oriented</b> Network Access for Diverse Environments".|$|R
40|$|Graduation date: 1983 In {{process control}} systems where an entire process is being {{controlled}} by a computer, the component tasks of the system have to be monitored. An efficient <b>message</b> <b>oriented</b> environment could {{be an important factor}} in the optimization of such systems. In this paper we discuss the design of a real time <b>message</b> <b>oriented</b> system, where intertask communication is used for the synchronization and cooperation of the component tasks. Exchanging messages between tasks is one way to achieve such communication. A semaphore is a mechanism to coordinate exclusive access to shared system resources. In this design, semaphores are treated as special forms of messages. In a <b>message</b> <b>oriented</b> system, these characteristics should be provided to guarantee an efficient and safe environment. The SES system is designed to provide such an environment for the processes that run on the Real Time Task Supervisor version 1. 1 of August Systems series 300 computers, which guarantees a reliable and safe computer for process control applications...|$|R
40|$|Abstract. Current {{techniques}} for automated composition use a single algorithm, focusing on {{one aspect of}} musical generation. In our system we make use of several algorithms, distributed using an agent <b>oriented</b> <b>middleware,</b> with each specialising on a separate aspect of composition. This paper describes the architecture and algorithms behind this system, {{with a focus on}} the agent framework used for implementation. We show early results which encourage a future application of this framework in automated music composition and analysis. ...|$|R
40|$|The {{date of receipt}} and {{acceptance}} will be inserted by the editor Abstract The characteristics of mobile environments, {{with the possibility of}} frequent disconnections and fluctuating bandwidth, have forced a rethink of traditional middleware. In particular, the synchronous communication paradigms often employed in standard middleware {{do not appear to be}} particularly suited to ad hoc environments, in which not even the intermittent availability of a backbone network can be assumed. Instead, asynchronous communication seems to be a generally more suitable paradigm for such environments. <b>Message</b> <b>oriented</b> <b>middleware</b> for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems, and, recently, also for some specific mobile computing systems. In this paper, we present our experience in designing, implementing and evaluating EMMA (Epidemic Messaging Middleware for Ad hoc networks), an adaptation of Java Message Service (JMS) for mobile ad hoc environments, discussing in details the design challenges and the solutions that have been adopted. Key words <b>Message</b> <b>oriented</b> <b>middleware</b> – middleware for mobile computing – epidemic protocol – mobile ad hoc networks...|$|E
40|$|We {{present a}} {{solution}} to guarantee scalable causal ordering through matrix clocks in <b>Message</b> <b>Oriented</b> <b>Middleware</b> (MOM). This solution {{is based on a}} decomposition of the MOM in domains of causality, i. e. small groups of servers interconnected by router servers. The causal order is locally maintained into groups, this allows the cost of matrix clocks maintenance to be kept linear, instead of quadratic, {{in the size of the}} application. We have implemented this algorithm in a MOM, and the performance measurements confirm the predictions. ...|$|E
40|$|Integration {{could be}} applied for the {{interoperation}} among distributed heterogeneous systems. This paper presents the application integration framework for data exchange and business interaction based on Service Component Architecture, <b>Message</b> <b>Oriented</b> <b>Middleware</b> and Enterprise Service Bus. Furthermore, it introduces {{the implementation of the}} framework using some leading open source software such as Apache Tuscany, Apache ServiceMix and Apache ActiveMQ. The case conducted in the integration of 38 regional labor management information systems shows the framework is reliable and also has good performance with reduced cost...|$|E
40|$|Building component-based {{distributed}} applications {{is a complex}} task involving a set of cooperating actors like architects, developers, transactions or persistency specialists. For more than ten years, the Object Management Group (OMG) defines open standards to build interoperable {{distributed applications}}. First, the Common Object Request Broker Architecture (CORBA) introduced interoperability between heterogeneous distributed objects: An object <b>oriented</b> <b>middleware.</b> Now, the Model Driven Architecture (MDA) introduces interoperability between heterogeneous models: A model <b>oriented</b> <b>middleware.</b> In this context, we advocate the separation of concerns in order to structure the modeling and meta modeling of enterprise distributed component architectures. In the meantime, design related knowledge is most often lost at runtime. Nevertheless, this knowledge could be important to reify architectures of applications at runtime and to support their administration and reconfiguration. Thus, we intend to support separation of concerns from design to runtime of applications, using a meta data repository centric approach. This paper discusses our proposal, CODeX, to structure the definition of meta models in order to offer dedicated points {{of view of a}} model to each of the actors of the software engineering process, from architects to application administrators...|$|R
40|$|International audienceWith the {{emergence}} of sensors in applications in which the {{quality of service requirements}} are high (e. g., industrial, medical, domotic), management of these sensing devices gains an increasing importance. However, management issues are still little explored in this context. This demonstration presents our solution for dynamically managing networked heteroge- neous sensing devices. The solution is based on a service <b>oriented</b> <b>middleware</b> that provides generic management op- erations for configuration, software management and perfor- mance monitoring of sensing devices...|$|R
40|$|Due to the {{complexity}} issue of developing heterogeneous Wireless Sensor Network application such as limited reusability, non-scalability, tight coupling between platform and application, a new middleware needs to be introduced to solve these problems. A distributed system framework such as Service Oriented Architecture (SOA) can definitely resolve these issues. SOA framework is able to hide {{the complexity}} lower layer to the application programmer and also create modular programming that can support different platforms. This paper aims to provide the service <b>oriented</b> <b>middleware</b> that supports heterogeneous services in Smart Home and Ambient Assisted Living (SHAAL) application...|$|R
