15|42|Public
50|$|Using a <b>maintenance</b> <b>window</b> {{requires}} increased specialization {{of skill}} of the IT staff, and requires {{a certain amount of}} time set up, test, and deploy. For small businesses with only a few employees, it may be simpler to just go around and manually apply updates at each computer, rather than spending hours trying to set up deployment through a <b>maintenance</b> <b>window.</b>|$|E
5000|$|In {{information}} technology and systems management, a <b>maintenance</b> <b>window</b> {{is a period of}} time designated in advance by the technical staff, during which preventive maintenance that could cause disruption of service may be performed.|$|E
5000|$|A {{planned outage}} {{is the result}} of a planned {{activity}} by the system owner and/or by a service provider. These outages, often scheduled during the <b>maintenance</b> <b>window,</b> can be used to perform tasks including the following: ...|$|E
50|$|Uptime is also {{a common}} metric, often used for data {{services}} such as shared hosting, virtual private servers and dedicated servers. Common agreements include percentage of network uptime, power uptime, number of scheduled <b>maintenance</b> <b>windows,</b> etc.|$|R
40|$|The Swedish Transport Administration is {{introducing}} a new regime, called <b>maintenance</b> <b>windows,</b> for allocating train free slots reserved for maintenance tasks on the railway infrastructure. In this paper, {{a model for}} the assessment and the dimensioning of such <b>maintenance</b> <b>windows</b> is presented, which considers marginal effects on both the maintenance cost and the expected train traffic demand. The aim is to establish quantitative measures {{that can be used for}} comparing conflicting capacity requests from infrastructure maintenance and traffic operations on railway networks. The model is demonstrated in a cost benefit analysis for a real life case study on the Swedish Northern Main Line. Efficient planning of railway infrastructure maintenanc...|$|R
5000|$|... #Caption: Security and <b>Maintenance</b> in <b>Windows</b> 10: No {{issue has}} been {{detected}} ...|$|R
50|$|In February 2013, Mount Whitney {{transferred}} to the San Giorgio del Porto Shipyard in Genoa, Italy for a major 60-day overhaul and repair project. The ship returned to active duty in April 2013 {{at the end of}} the <b>maintenance</b> <b>window.</b>|$|E
50|$|Where disk {{protection}} {{software is}} used, protective {{services such as}} a scheduled system scan at each reboot can be turned off, thereby accelerating the boot process for users during the day. Instead, a full virus scan is scheduled during the <b>maintenance</b> <b>window,</b> but is unneeded at each startup.|$|E
50|$|High-availability {{maintenance}} {{windows are}} often planned {{for a time}} where activity is at its lowest so as to cause minimal disruption to customers, though which also require unusual work schedules for the employees. An Internet service provider, for example, may schedule a <b>maintenance</b> <b>window</b> for Sunday during the night hours.|$|E
30|$|Develop a {{visualisation}} {{tool that}} shows the railway track geographically, using both mile markers and GPS coordinates, for information concerning track quality. This mapping should show the track parts clearly and be used to facilitate {{the connection between the}} results and the track infrastructure. This is to also include <b>maintenance</b> <b>windows</b> (time slots), which are crucial in assisting the estimation of maintenance actions.|$|R
5000|$|With RFC 2544’s {{focus on}} {{identifying}} the maximum {{performance of a}} device or network under test, the overall test time is variable and heavily depends {{on the quality of}} the link and subtest settings. RFC 2544 test cycles can easily require a few hours of testing. This is not an issue for lab testing or benchmarking, but becomes a serious issue for network operators with short service <b>maintenance</b> <b>windows.</b>|$|R
25|$|Rail {{corrugation}} is {{a common}} issue with transit systems due to {{the high number of}} light-axle, wheel passages which result in grinding of the wheel/rail interface. Since maintenance may overlap with operations, <b>maintenance</b> <b>windows</b> (nighttime hours, off-peak hours, altering train schedules or routes) must be closely followed. In addition, passenger safety during maintenance work (inter-track fencing, proper storage of materials, track work notices, hazards of equipment near states) must be regarded at all times. At times, maintenance access problems can emerge due to tunnels, elevated structures, and congested cityscapes. Here, specialized equipment or smaller versions of conventional maintenance gear are used.|$|R
5000|$|A <b>maintenance</b> <b>window</b> is {{scheduled}} between 02:00 AM to 06:00 AM {{which is the}} possible low traffic and customer usage time frame. As such, the IT or network engineer who is responsible in such service change and/or upgrade activity are called [...] "Rubber Tappers"; {{for which they are}} required to wake up early in the morning to complete their deployment, testing and commissioning before sunrise.|$|E
40|$|Materialized {{aggregate}} views {{represent a}} set of redundant entities in a data warehouse that are frequently used to accelerate On-Line Analytical Processing (OLAP). Due to the complex structure of the data warehouse and the different pro {{les of the users}} who submit queries, there is need for tools that will automate and ease the view selection and management processes. In this paper, we present DynaMat, a system that manages dynamic collections of materialized aggregate views in a data warehouse. At query time DynaMat utilizes a dedicated disk space for storing computed aggregates that are further engaged for answering new queries. Queries are executed independently, or can be bundled within a multi query expression. In the latter case we present an execution mechanism that exploits dependencies among the queries and the materialized set to further optimize their execution. During updates, DynaMat reconciles the current materialized view selection and refreshes the most beneficial subset of it within a given <b>maintenance</b> <b>window.</b> We show how to derive an efficient update plan with respect to the available <b>maintenance</b> <b>window,</b> the different update policies for the views and the dependencies that exist among them...|$|E
40|$|Abstract — Due to {{extensive}} {{usage of}} Cloud Computing for different application which has complete data storage on Cloud [...] It has become {{necessary to have}} proper backup system which can reduce the overall <b>maintenance</b> <b>window</b> plus provide some sort of security for the backup over the cloud. Hence this {{is an effort to}} provide the backup to the application which can be taken and different time interval. After the first backup, subsequent backups will be incremental in nature as they will just backup the difference of two backups. By doing this it will improve the performance and system up time. As the huge data is transferred over the cloud it is vital to provide the security to data passing over to Cloud. We can provide it by putting encryption Mechanism to data chunks which are getting transferred to Cloud. It will also have user level authorization which can help in restoring the backup files any where irrespective of the instruments which has been used while backups. Index Terms — Incremental Backup, security, Performance I...|$|E
50|$|Light shelves also {{increase}} <b>maintenance</b> requirements and <b>window</b> coverings must be coordinated with light shelf design.|$|R
40|$|Software {{upgrades}} {{are one of}} {{the leading}} causes of downtime in IT infrastructures. Long running data migration processes require intensive up-front preparation, extended <b>maintenance</b> <b>windows</b> and close monitoring, and they impose a significant burden on the system administrators. Even worse, major upgrades sometimes fail due to complex, hidden dependencies within the system, causing unplanned downtime and loss of critical data. In this paper, we propose a technique for converting an offline data-migration process into a dependency-agnostic online upgrade that requires minimal administrative intervention and that eliminates the need for planned downtime. We illustrate our technique by walking the reader through a hypothetical, but realistic online upgrade scenario in a medium-sized IT infrastructure – namely, hot-swapping the wiki software that underlies Wikipedia with an entirely different wiki engine...|$|R
40|$|In {{manufacturing}} systems, many maintenance tasks require {{equipment to}} be locked out for safety. However, such stoppage might directly cause short-term production losses although maintenance is performed to increase the long-term system reliability. In this paper, we investigate how long we can strategically stop equipment for maintenance during production operating without affecting system throughput. We extend the concept of <b>maintenance</b> opportunity <b>windows</b> (MOWs) to various system configurations and introduce a new concept of group <b>maintenance</b> opportunity <b>windows</b> (GMOWs). GMOW is the maximum time window that allows to perform a group maintenance without jeopardizing the flow of a production line. Moreover, we also provide how to calculate MOW and GMOW via simulations which can deal with uncertainties in production lines, such as random machine failures, starvations, blockages, etc. close...|$|R
40|$|Purpose. The article aims {{to analyze}} the {{stabilization}} process of train movement after interruption and loss of the working capacity. Methodology. To examine the process of train movement on the route (double-track line with sorting station) in extreme conditions during the maintenance windows for capital repair of the track. During the investigation of this process time calculations of a normal motion restoration after the maintenance windows were carried out. In this process there are no organizational interventions aimed to change various coefficients. It {{is presented in the}} research in its pure form, in order to show how the system comes to equilibrium. Findings. It was found out that the major losses of working capacityduring the maintenance windows occur as a result of perturbations caused by interruptions, not the interruptions in themselves. The actual idle time in the study is about 300 train-hours. Directly because of the <b>maintenance</b> <b>window</b> it is 129 train-hours. Losses were equal to more than half of total idle time of trains caused by the maintenance windows. Originality. The authors proved the possible reduction of working capacity losses on railway direction {{as a result of a}} deliberate action on this process. Practical value. Implementation of these actions will reduce the losses of the working capacity...|$|E
40|$|Pre-computation and materialization {{of views}} with {{aggregate}} functions {{is a common}} technique in Data Warehouses. Due to the complex structure of the warehouse and the different pro®les of the users who submit queries, there is need for tools that will automate the selection {{and management of the}} materialized data. In this paper we present DynaMat, a system that dynamically materializes information at multiple levels of granularity in order to match the demand (workload) but also takes into account the maintenance restrictions for the warehouse, such as down time to update the views and space availability. DynaMat uni®es the view selection and the view maintenance problems under a single framework using a novel ªgoodnessº measure for the materialized views. DynaMat constantly monitors incoming queries and materializes the best set of views subject to the space constraints. During updates, DynaMat reconciles the current materialized view selection and refreshes the most bene®cial subset of it within a given <b>maintenance</b> <b>window.</b> We compare DynaMat against a system that is given all queries in advance and the pre-computed optimal static view selection. The comparison is made based on a new metric, the Detailed Cost Savings Ratio introduced for quantifying the bene®ts of view materialization against incoming queries. These experiments show that DynaMat's dynamic view selection outperforms the optimal static view selection and thus, any sub-optimal static algorithm that has appeared in the literature. ...|$|E
40|$|Abstract—Software updates are {{the current}} {{standard}} {{to respond to}} software bugs. The software developer provides an update fix that is then applied by the administrator: the binary is modified and the service is restarted. Restarting a service inevitably leads to downtime and service unavailability; {{in the case of}} a multi-threaded installation of Apache, restart takes several seconds and depending on the load of the web server, several hundred or even thousand client requests will be rejected with an error. Given the cost of restarts, system administrators attempt to minimize the frequency of service restarts or postpone a restart until the next <b>maintenance</b> <b>window.</b> However, to ensure the integrity of the system, code repair must happen as soon as possible (ASAP). We describe here the effectiveness of an on-the-fly update system that provides ASAP repair by integrating dynamic patches with a sandbox based on dynamic binary translation. To investigate the feasibility of ASAP code repair, we analyze the software updates released for Apache 2. 2 between Dec 1 st, 2005 and Feb 18, 2013. The study shows that such a system allows patching 45 of 49 bugs at runtime. Of the 4 unpatchable bugs, 1 bug is not applicable to dynamic update mechanisms, and 3 bugs require a restart. Furthermore, a performance evaluation of the prototype implementation shows that our approach adds low execution overhead (below 7 % for different configurations that request a 287 kB file). I...|$|E
40|$|Abstract. Increasing {{dependence}} of business on 24 / 7 IT systems sets requirements to support recovery from hardware, software and operational errors and reduce number {{and length of}} <b>maintenance</b> <b>windows</b> through online and automated or semi-automated system management activities. These requirements cannot be satisfied purely by technology let alone a single technological innovation on a single layer of a system stack. Oracle has defined Maximum Availability Architecture (MAA) to describe the combination of its technologies to support recovery from hardware, software and operational errors. With regard to the Oracle RDBMS, these extend the online and automated management features of the RDBMS. This paper reviews the MAA on Oracle RDBMS with particular focus using Linux as platform to implement the MAA. The paper also provides a threat analysis to review the extent and limitations of MAA-based implementation high-availability and disaster recovery capabilities...|$|R
40|$|Abstract—This paper {{presents}} a systems view of refurbishment systems to evaluate {{root causes of}} suboptimal refurbishment. Case studies from ten selected South African and Malawian fi rms from largest electric power utilities, mining, petrochemical, and processing industries were used to establish causal relationships. Sample surveys of thirty four Malawian firms were used {{as part of a}} multimethod or triangulation approach to provide generaliza-tions, validation and reliability. Of the surveyed firms, 66. 7 %, and of case studied fi rms 100 %, showed that deferred refurbishment was a result of constrained capacity which led to components operating at higher loads, to lack of <b>maintenance</b> <b>windows</b> and to increased failure rates; there was no formal refurbishment model and technical skills base was the weakest asset management link. The study advances a novel way of depicting root causes of suboptimal refurbishment in typically complex dynamic struc-tures using integrated systems thinkin...|$|R
50|$|The {{development}} of VisualSVN Server began {{to answer the}} demand of VisualSVN users for easier Subversion server installation, configuration and <b>maintenance</b> on <b>Windows</b> platform. The first public release of VisualSVN Server happened in 2007. For that time, VisualSVN Server was the only all-in-one Subversion server package which made Subversion server installation, {{as well as its}} configuration, maintenance and upgrades, really simple.|$|R
40|$|Managing {{scientific}} software stacks {{has traditionally}} been a manual task that required a sizeable team with knowledge about the specifics of building each application. Keeping the software stack up to date also caused a significant overhead for system administrators as well as support teams. Furthermore, a flat module view and the manual creation of modules by different members of the teams can end up providing a confusing view of the installed software to end users. In addition, on many HPC clusters the OS images have to include auxiliary packages to support components of the scientific software stack, potentially bloating {{the images of the}} cluster nodes and restricting the installation of new software to a designated <b>maintenance</b> <b>window.</b> To alleviate this situation, tools like EasyBuild help to manage a large number of scientific software packages in a structured way, decoupling the scientific stack from the OS-provided software and lowering the overall overhead of managing a complex HPC software infrastructure. However, the relative novelty of these tools and the variety of requirements from both users and HPC sites means that such frameworks still have to evolve and adapt to different environments. In this paper, we report on how we deployed EasyBuild in a cluster with 45 K+ cores (JURECA). In particular, we discuss which features were missing in order to meet our requirements, how we implemented them, how the installation, upgrade, and retirement of software is managed, and how this approach is reused for other internal systems. Finally, we outline some enhancements {{we would like to see}} implemented in our setup and in EasyBuild in the future...|$|E
40|$|Effective {{maintenance}} planning is essential and important in any organisation {{that is responsible}} for procuring and managing complex assets. In the marine shipping industry {{maintenance planning}} is very significant due to its complexity and the obligations on shipping organisations to comply with certain regulations and requirements. Moreover, improper planning can reduce the ship's availability, which may in turn, be reflected in the revenue of the company. Another issue that requires attention in this field is the cost of maintenance, since improper or inadequate planning could result in breakdowns that could increase the cost of maintenance. This research aims to identify the key factors that affect ship maintenance planning and to provide a framework that can help the decision maker to identify and choose optimum decisions regarding ship maintenance. The research is divided into four stages in order to achieve its objectives and to address the research problem. The first stage is the review of the literature to identify the need for maintenance and to select the key factors that affect maintenance planning. The findings indicate that: maintenance scheduling, selection of maintenance strategy, ship construction, crew compensation, and shipyard selection are the most important factors. The second stage is to evaluate maintenance performance measurements for the marine shipping industry by conducting case study and interviews with professionals involved in the mercantile industry. Semi-structured interviews were conducted with six senior staff experts from three different organisations. The results show that: dry docking scheduling, maintenance costs and budgets, customer satisfaction, employees' satisfaction, classification requirements, and the ship's maintenance requirements are the main factors that have great influence on maintenance planning. The third stage is to develop new methodology to measure the maintenance performance in the marine shipping organisation which is the ship maintenance performance measurement (SMPM) framework. The developed method was validated to assist managers in making the right decisions in ship maintenance planning. The framework was developed based on ten thematic criteria that can be used as indicators for potential organisation growth, i. e., maintenance strategy; dry docking scheduling; budget and costs; the ship's equipment; customer satisfaction; employees; health, safety and environment; learning and growth; classification requirements; and the ship's operation and demands requirements. Interviews were conducted with key personnel from the Kuwait Oil Tanker Company (KOTC) to validate the framework. The fourth stage demonstrates that an optimised schedule for the dry docking of ships for routine maintenance has been constructed. This is accomplished on the basis of one measured criterion, dry docking scheduling, by using an integer programming model to maximise the ship's availability within the company fleet. The model is defined by three constraints: the <b>maintenance</b> <b>window,</b> maintenance completion, and the ship's limit. The model was validated using data from KOTC, and the results depict an optimum solution for maintenance scheduling, maximising the ship's availability to 100 % and not less than 92 %. EThOS - Electronic Theses Online ServiceCollege of Technological Studies at Public Authority for Applied Education and Training, KuwaitGBUnited Kingdo...|$|E
40|$|Oussama Jebbar High {{availability}} is {{an important}} non-functional requirement for carrier grade services. The applications/systems providing and protecting such services undergo frequent upgrades which makes meeting this requirement very challenging. A system upgrade is the migration process from the system’s current configuration to a new one. This migration may include configuration changes, installation and removal of software, etc [...] The Service Availability Forum (SAF) published a set of standards that describe a high availability enabling middleware for Commercial-off-the-shelf (COTS) components based systems. In such a middleware, the Software Management Framework (SMF) is the service responsible for orchestrating the upgrades. These upgrades are performed according to a road map called an upgrade campaign specification. The Availability Management Framework (AMF) is another service defined in the SAF standards and which is responsible of managing {{the availability of the}} services and the service providers. To take a SAF compliant system from one configuration to another, one has first {{to come up with an}} upgrade campaign specification for that purpose. Moreover, there are multiple upgrade campaign specifications that can take the system from the same source configuration to the same target configuration, but they differ in the duration they take and the service outage they may induce. Designing an upgrade campaign specification for a SAF compliant system is not a straight forward process. Indeed, this is an error prone task that becomes more challenging when the system and the set of changes to perform get larger. Besides, selecting which upgrade campaign specification to apply among all the valid ones is either expensive (running the same upgrade campaign specification on a replica of the real system), or tedious (evaluating, comparing and selecting upgrade campaign specifications manually). In this thesis we propose automation as a solution to ease and minimize human intervention in the design and evaluation of upgrade campaign specifications. We devise a model driven approach to automatically generate upgrade campaign specifications. Our approach consists of several activities in order to ensure the SAF compliance of the generated upgrade campaign specification on one hand. On the other hand, we use the dependencies between system components to apply a set of rules that can improve the quality of the upgrade campaign specification by avoiding some of the unnecessary service outage. These rules include rules to order changes to be performed as well as a set of heuristics that make use of the dependencies. We also address the upgrade campaign evaluation related issues. We extend an existing discrete event systems based simulation approach for upgrade campaign evaluation. We expose the limitations of a random simulation as its results are unreliable for comparison. To overcome these limitations we define best case and worst case scenarios that we use to guide upgrade campaign simulations to see how the upgrade campaigns perform in edge cases. We also devise a method for upgrade campaign specification selection/elimination based on applicability checks according to two criteria: the <b>maintenance</b> <b>window,</b> and the acceptable outage during this window. Finally, we implemented prototypes for upgrade campaign specification generation and evaluation...|$|E
40|$|Today’s IT {{infrastructure}} {{is more and}} more being virtualized. Almost every kind of component like servers, storage and network devices can be virtualized to provide a high available, scalable and sustainable environment. Server consolidation- replacing many small servers by one large physical machine- leads to an increased utilization of hardware resources, decreased power consumption for operation and cooling. Virtualization also changed the way of day-to-day operations of IT administrators. The deployment of virtual machines is an easier and simpler process than installing new physical hardware and the possibilities of moving virtual machines between host systems reduces <b>maintenance</b> <b>windows</b> and downtimes. The virtualization of hardware also introduced new ways of monitoring and measuring performance of virtualized IT services. The integration of these features in network management and monitoring systems is needed for a secure and proactive operation of virtualized infrastructures. This paper presents the idea and development process of integrating VMware vSphere virtual infrastructures in an open source enterprise-grade network management system called OpenNMS...|$|R
40|$|Includes {{article and}} presentation. We {{consider}} {{the problem of}} inferring IPv 6 router uninter- rupted system availability, or uptime, from a remote vantage point with- out privileged access. Uptime inference is important to broader efforts to measure and characterize the availability of critical infrastructure, provides insight into network operations, and has subtle security impli- cations. Our approach utilizes active probes to periodically elicit IPv 6 fragment identifiers from IPv 6 router interfaces, and analyzes the re- sulting identifier time series for reboots. We demonstrate the approach’s potential by characterizing 21, 539 distinct IPv 6 router interfaces over a five-month period. We find evidence of clustered reboot events, popular <b>maintenance</b> <b>windows,</b> and correlation with globally visible control plane data. Our results, validated by five ASes, provide initial insight into {{the current state of}} IPv 6 router availability. This work supported by NSF grants CNS- 1111445 and CNS- 1111449 and Department of Homeland Security (DHS) contracts N 66001 - 2250 - 58231 and N 66001 - 12 -C- 0130...|$|R
40|$|Materialized view {{selection}} {{is one of}} the crucial decisions in designing a data warehouse for optimal efficiency. Static selection of views may materialize certain views that are not beneficial as the data and usage trends change overtime. On the contrary, dynamic selection of views works better only for queries demanding a high degree of aggregation. These facts point to the need for a technique that combines the improved response time of the static approach and the automated tuning capability of the dynamic approach. In this paper, we propose a hybrid approach for the selection of materialized views. The idea is to partition the collection of all views into a static and a dynamic set such that views selected for materialization from the static set are persistent over multiple query (and <b>maintenance)</b> <b>windows,</b> whereas views selected from the dynamic set can be queried and/or replaced on the fly. Highly aggregated views are selected on the fly based on the query access patterns of users, whereas the more detailed static set of views {{play a significant role in}} the efficient maintenance of the dynamic set of views and in answering certain detailed view queries. We prove that our proposed strategy satisfies the monotonicity requirements, which is essential for the greedy heuristic to deliver competitive solutions. 1 Experimental results show that our approach outperforms Dynamat; a well-known dynamic view management system that is known to outperform optimal static view selection...|$|R
40|$|One {{of the key}} {{tasks of}} a {{database}} administrator is to optimize the set of materialized indices {{with respect to the}} current workload. To aid administrators in this challenging task, commercial DBMSs provide advisors that recommend a set of indices based on a sample workload. It is left for the administrator to decide which of the recommended indices to materialize and when. This decision requires some knowledge of how the indices benefit the workload, which may be difficult to understand if there are any dependencies or interactions among indices. Unfortunately, advisors do not provide this crucial information as part of its recommendation. Motivated by this shortcoming, we propose a framework and associated tools that can help an administrator understand the interactions within the recommended set of indices. We formalize the notion of index interactions and develop a novel algorithm to identify the interaction relationships that exist within a set of indices. We present experimental results with a prototype implementation over IBM DB 2 that demonstrate the efficiency of our approach. We also describe two new database tuning tools that utilize information about index interactions. The first tool visualizes interactions based on a partitioning of the index-set into non-interacting subsets, and the second tool computes a schedule that materializes the indices over several <b>maintenance</b> <b>windows</b> with maximal overall benefit. In both cases, we provide strong analytical results showing that index interactions can enable enhanced functionality. 1...|$|R
40|$|In {{manufacturing}} systems, many maintenance tasks require {{equipment to}} be stopped in order to safely perform them. However, such stoppage cannot last for too long since it might directly result in short-term production losses. In this paper, we investigate how long we can strategically shut down equipment for maintenance during scheduled operations without affecting system throughput. Using the concept of <b>maintenance</b> opportunity <b>windows</b> (MOWs), we estimate such time intervals for various system configurations. Simulations are used to deal with uncertainties in production lines, such as random machine failures, starvations, blockages, etc. Moreover, the proposed MOW algorithms are demonstrated through simulations and real case studies in an automotive assembly plant. close...|$|R
40|$|In {{this study}} we used graph theory {{analysis}} to investigate age-related reorganization of functional networks during the active maintenance of information that is interrupted by external interference. Additionally, we sought to investigate network differences before and after averaging network parameters between both <b>maintenance</b> and interference <b>windows.</b> We compared young and older adults by measuring their magnetoencephalographic recordings during an interference-based working memory task restricted to successful recognitions. Data analysis focused on the topology/temporal evolution of functional networks during both the <b>maintenance</b> and interference <b>windows.</b> We observed that: (a) Older adults require higher synchronization between cortical brain sites {{in order to achieve}} a successful recognition, (b) The main differences between age groups arise during the interference window, (c) Older adults show reduced ability to reorganize network topology when interference is introduced, and (d) Averaging network parameters leads to a loss of sensitivity to detect age differencesThis work has been supported by the Spanish MINECO under project [FIS 2013 - 41057], as well as Fundación Carolina Doctoral Scholarship Program and Colciencias Doctoral Program 56...|$|R
40|$|Over {{the past}} two decades, the broken windows {{hypothesis}} by George Kelling and James Q. Wilson has revolutionized thinking about urban policy. This now-familiar theory is that uncorrected manifestations of disorder, even minor ones like broken windows, signal a breakdown in the social order that accelerates neighborhood decline. The response to this theory has been a proliferation of policies focusing on public order. Largely missing from the academic debate about these developments is {{a discussion of the}} complex and important role of property regulation in order-maintenance efforts. This Article attempts to fill that property law gap in the public-order puzzle by tackling the complicated relationship between property regulation and order-restoration efforts. Order <b>maintenance,</b> broken <b>windows,</b> land use, zoning, public order, urban developmen...|$|R
30|$|The recent boost {{of smart}} meter {{installations}} in households {{and small businesses}} has led to increased interest in load monitoring techniques such as Non-Intrusive Load Monitoring (NILM). Based on smart meter data, these techniques provide deep insights into energy consumption and processes inside buildings. Furthermore, NILM allows occupancy detection for health-monitoring purposes (elderly care), enables prediction of <b>maintenance</b> <b>windows</b> for selected appliances, allows the optimisation of workflows inside industrial buildings, and aims to achieve cost reduction by providing (immediate) user feedback. Researchers find that a consensus regarding which performance metrics should be applied to measure and report performance has not been reached (Faustine et al., 2017; Pereira & Nunes, 2018). It has been pointed out repeatedly that standardising NILM performance metrics {{is one of the}} biggest research issues related to NILM (Faustine et al., 2017). Beside performance metrics, the used datasets for training and evaluation as well as the applied methodology influence if an objective comparison of two candidate algorithms is possible or not (Nalmpantis & Vrakas, 2018). A requirements catalogue similar to the Zeifman requirements (Zeifman, 2012), a list of requirements that describe what characteristics a NILM algorithm should have, is likely to ease objective comparisons by providing clear guidelines how meaningful comparisons of several NILM approaches can be drawn. Recently, machine learning in NILM has gained popularity due to first promising research contributions, which indicate that machine learning algorithms have the potential to surpass existing HMM-based algorithms (Kelly & Knottenbelt, 2015; Bonfigli et al., 2018; Kim et al., 2017). In addition, these studies revealed one special aspect of machine learning approaches for load monitoring: good generalisation abilities. Hitherto, neither a comparison case study evaluating the generalisation abilities of existing NILM algorithms was conducted nor a machine-learning NILM algorithm was developed that shows acceptable performance on unseen smart meter data.|$|R
40|$|Effective {{and timely}} {{maintenance}} actions can sustain and improve both system availability and product quality in automated manufacturing systems. However, arbitrarily stopping machines for maintenance will occupy their production time and, in turn, introduce production losses into the system. Real-time maintenance decision-making in manufacturing systems is complex {{because it requires}} the integration of multiple sources of information, such as the system configuration, current machine health condition, real-time buffer level, and system throughout target. The research presented in this thesis aims at developing tools to support real-time maintenance decision-making in complex manufacturing systems. First, the concept of passive <b>maintenance</b> opportunity <b>window</b> (PMOW) is introduced, which {{is defined as the}} machine idle-time induced by the propagation of downtime of the other machines in the system. Real-time PMOWs are predicted in manufacturing systems with serial and non-serial structures. Second, the concept of active <b>maintenance</b> opportunity <b>window</b> (AMOW) is proposed so that machines can be strategically shut down for preventive maintenance (PM) while the system throughput requirement can be still satisfied. A system decomposition method is developed to investigate the transient behavior of manufacturing systems with different configurations, based on which real-time AMOWs are estimated. Third, maintenance policies are examined by integrating the real-time buffer levels and machine degradation profiles. The system throughputs under a control-limit policy and a Markov Decision Process approach are evaluated and compared. Last, the propagation of downtime in serial-parallel manufacturing systems is studied, based on which three resilience metrics (i. e., production loss, throughput recovery time, and total underproduction time) are defined and evaluated. An optimization problem is formulated for the design of a resilient manufacturing system. The model and methodology developed in this dissertation provide managerial insights on conducting maintenance operations in complex manufacturing systems. The effectiveness of the proposed model and algorithms is validated by case studies with simulations, and measurements in an automotive assembly plant...|$|R
