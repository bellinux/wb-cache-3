133|7660|Public
50|$|In <b>matching</b> <b>pattern</b> to the crossbelt (above).|$|E
50|$|The {{receiver}} synchronizes automatically by {{searching through}} possible time and frequency offsets for a <b>matching</b> <b>pattern.</b> The frequency search range is normally +/- 100 Hz {{but can be}} as high as +/- 500 Hz if the user wishes so.|$|E
5000|$|There is {{a library}} in Scala called [...] "Scala Joins" [...] Scala Joins {{to use the}} Join-Pattern, it proposes to use pattern <b>matching</b> <b>Pattern</b> Matching {{as a tool for}} {{creating}} models of joins. You can find examples of the use of the join pattern in scala here: Join definitions in Scala.|$|E
5000|$|Standard {{executable}} were scanned, or, {{one could}} use up to twenty file <b>matching</b> <b>patterns</b> ...|$|R
5000|$|A {{template}} specifies {{the response}} to a <b>matched</b> <b>pattern.</b> A template may {{be as simple as}} some literal text, like ...|$|R
50|$|Unlike other {{functional}} programming languages, Refal {{is based on}} <b>pattern</b> <b>matching.</b> Its <b>pattern</b> <b>matching</b> works in the forward direction rather than backwards (starting from the goal) as in Prolog.|$|R
50|$|In 1966, Joseph Weizenbaum, also a {{professor}} at MIT, published a simple program called ELIZA which performed natural language processing. In essence, the program functioned like a psychotherapist where the program only used open ended questions to encourage patients to respond. The program would apply pattern <b>matching</b> <b>pattern</b> rules to human statements to figure out its reply.|$|E
50|$|The {{matching}} law, and {{the generalized}} matching law, have helped behavior analysts to understand some complex human behaviors, especially {{the behavior of}} children in certain conflict situations. James Snyder and colleague have found that response matching predicts the use of conflict tactics by children and parents during conflict bouts. This matching rate predicts future arrests. Even children's use of deviant talk appears to follow a <b>matching</b> <b>pattern.</b>|$|E
5000|$|The {{initial phase}} of the Primavera Championship {{consists}} of 3 rounds, each consisting of 14 teams, organised by geographical criteria: teams play in a true robin-round format, {{for a total of}} 26 games in the regular season. The top two in each group have direct access to the final phase: the remaining two positions are assigned via the play-offs, with the participation of eight teams (the third and fourth ranked, plus the fifth best). The <b>matching</b> <b>pattern</b> is as following: ...|$|E
5000|$|Estimate a {{total number}} of rows in all tables {{containing}} a column name that <b>matches</b> <b>PATTERN</b> (this is SQL*Plus specific script) ...|$|R
30|$|In effect we enabled a three-steep {{procedure}} that progressively loosened the selection limits (the fourth percentile on Euclidean distances and a Spearman coefficient of 0.95) {{in order to}} obtain at least 12 matched patterns: if the first trial on the current reference pattern failed to furnish 12 <b>matched</b> <b>patterns</b> at the highest limits, we loosened the fixed values slightly and tried again to obtain at least 12 <b>matched</b> <b>patterns,</b> and so on until the third trial.|$|R
30|$|Moreover, {{complex and}} {{misleading}} situations can {{occur when the}} future time evolutions of the reference patterns disagree {{with those of the}} <b>matched</b> <b>patterns.</b>|$|R
50|$|In {{computer}} science, {{pattern matching}} is {{the act of}} checking a given sequence of tokens {{for the presence of}} the constituents of some pattern. In contrast to pattern recognition, the match usually has to be exact. The patterns generally have the form of either sequences or tree structures. Uses of pattern matching include outputting the locations (if any) of a pattern within a token sequence, to output some component of the matched pattern, and to substitute the <b>matching</b> <b>pattern</b> with some other token sequence (i.e., search and replace).|$|E
5000|$|A {{variety of}} {{approaches}} {{to the problem of}} mixture decomposition have been proposed, many of which focus on maximum likelihood methods such as expectation maximization (EM) or maximum a posteriori estimation (MAP). Generally these methods consider separately the questions of system identification and parameter estimation; methods to determine the number and functional form of components within a mixture are distinguished from methods to estimate the corresponding parameter values. Some notable departures are the graphical methods as outlined in Tarter and Lock [...] and more recently minimum message length (MML) techniques such as Figueiredo and Jain [...] and to some extent the moment <b>matching</b> <b>pattern</b> analysis routines suggested by McWilliam and Loh (2009).|$|E
5000|$|Nolan {{is among}} a group of artists that {{includes}} Eva Berendes, Nicholas Byrne and Richard Wright who use pre-modern pattern-making and craftsmanship to re-investigate the importance of making. Noland frequently makes reference to the aesthetics of cosmology. The work is often the result of a slow and deliberate process, <b>matching</b> <b>pattern</b> with en elusive sense of order. [...] Nolan's work often has its origins in literary works, such as Thomas Hardy's poem The Darkling Thrush that provided the title for The weakened eye of day, a work she conceived for the Irish Museum of Modern Art in 2014. As part of The Weakened Eye of Day, she wrote a piece of [...] "speculative fiction" [...] {{in the form of an}} online audio work called [...] "The Three Body Problem".|$|E
40|$|A {{very fast}} {{parallel}} approach to <b>pattern</b> <b>matching</b> is presented. The approach {{is based on}} the bit-parallel approach and we use two-dimensional bitwise memory matrix which helps to achieve very fast parallel <b>pattern</b> <b>matching</b> algorithms. The parallel <b>pattern</b> <b>matching</b> takes O(1) time for the exact <b>pattern</b> <b>matching</b> and O(k) for the approximate <b>pattern</b> <b>matching,</b> where k is the number of errors...|$|R
40|$|A {{universal}} lossless {{data compression}} code called the multilevel <b>pattern</b> <b>matching</b> code (MPM code) is introduced. In processing a finite alphabet data string of length n, the MPM code operates at O(log log n) levels sequentially. At each level, the MPM code detects <b>matching</b> <b>patterns</b> in the input data string (substrings {{of the data}} appearing in two or more nonoverlapping positions). The <b>matching</b> <b>patterns</b> detected at each level are of a fixed length which decreases by a constant factor from level to level, until this fixed length becomes one at the final level. The MPM code represents information about the <b>matching</b> <b>patterns</b> at each level as a string of tokens, with each token string encoded by an arithmetic encoder. From the concatenated encoded token strings, the decoder can reconstruct the data string via several rounds of parallel substitutions. A O(1 = log n) maximal redundancy/sample upper bound is established for the MPM code with respect to any class of finite state sources of unifo [...] ...|$|R
5000|$|The program {{produces}} {{graduates who}} {{take part in}} management in the infocom industry sectors. IM Telkom apply link and <b>match</b> <b>patterns,</b> which are embodied in: ...|$|R
40|$|This paper {{addresses}} task allocation {{schemes for}} MIN-based multiprocessors. Two types of allocation policies, cubic and noncubic, are discussed here. Conflicts through {{the network and}} inability to partition the system effectively are the main bottlenecks in a MIN-based system. To solve both the problems, a renaming scheme for input and output ports of a MIN is proposed. We use the baseline MIN as an example in this work and call the renaming scheme as bit reversal (BR) <b>matching</b> <b>pattern.</b> Allocation with the new <b>matching</b> <b>pattern</b> minimizes conflicts and partitions the system completely into independent subsystems. The novelty of this <b>matching</b> <b>pattern</b> {{is that we can}} use any dynamic cubic allocation and/or scheduling scheme developed for the hypercubes also for the MIN machines. The BR <b>matching</b> <b>pattern</b> can be used with any kind of MIN. An allocation policy for noncubic tasks is also presented with this <b>matching</b> <b>pattern.</b> Various performance measures with different allocation algorithms are compared via simulation. The advantages of the algorithms with the proposed <b>matching</b> <b>pattern</b> are shown in terms of system efficiency, delay and task miss ratio...|$|E
40|$|Abstract. The paper {{introduces}} a novel concept of ontology matching patterns firmly {{based on the}} OWL language. Such a <b>matching</b> <b>pattern</b> consists of source and target ontology patterns, and involves naming patterns for detecting the ontology patterns {{as well as the}} <b>matching</b> <b>pattern</b> as such. We provide definitions of the matching patternâ€™s constituents along with illustrative examples. Furthermore, we discuss differences between two kinds of matching patterns. Finally, we demonstrate the applicability of these patterns within ontology alignment evaluation and ontology transformation...|$|E
40|$|The {{theory of}} #nite-state automata #FSA# is rich and #nite-state automata {{techniques}} {{have been used}} {{in a wide range of}} domains, such as switching theory, pattern <b>matching,</b> <b>pattern</b> recognition, speech processing, hand writing recognition, optical character recognition, encryption algorithm, data compression, indexing and operating system analysis #Petri-net#...|$|E
40|$|The paper explores an {{environment}} in which agents are motivated to make unproductive investments with the sole aim of improving their matching opportunities. In contrast to existing work, I add frictions by allowing the investment to be imperfectly observed. The analysis allows for {{a deeper understanding of the}} trade-off inherent in related models: investments waste resources but facilitates more efficient <b>matching</b> <b>patterns.</b> I show that greater frictions i) do not always lead to inferior <b>matching</b> <b>patterns,</b> and ii) can force the economy into to a Pareto preferred equilibrium. Matching Frictions Premarital investment Signaling...|$|R
40|$|<b>Pattern</b> <b>matching</b> with wildcards is {{the problem}} of finding all factors of a text t of length n that <b>match</b> a <b>pattern</b> x of length m, where wildcards (characters that match everything) may be present. In this paper we present a number of fast average-case {{algorithms}} for <b>pattern</b> <b>matching</b> where wildcards are restricted to either the pattern or the text, however, the results are easily adapted to the case where wildcards are allowed in both. We analyse the average-case complexity of these algorithms and show the first non-trivial time bounds. These are the first results on the average-case complexity of <b>pattern</b> <b>matching</b> with wildcards which, as a by product, provide with first provable separation in complexity between exact <b>pattern</b> <b>matching</b> and <b>pattern</b> <b>matching</b> with wildcards in the word RAM model...|$|R
40|$|This thesis {{presents}} {{an application of}} a generalized suffix tree extended {{by the use of}} frequency of patterns, to perform accurate and faster biological sequence analysis as an improvement on the computation time of existing tools in this area. This application utilizes the knowledge of frequency of prefixes shared by two or more sequences in a generalized suffix tree, to identify with good accuracy, sequences in a database which are highly similar to a given query sequence. The speedup is achieved by reducing the size of the database to very few sequences which are found closest to the query sequence in question. This results in a faster computation. It can also be viewed as an extension of exact <b>pattern</b> <b>matching,</b> where cumulative results of <b>matched</b> <b>patterns</b> indicate the closest sequences. The specific strategy is to pick <b>matched</b> <b>patterns</b> of the query sequence and identify sequences in the database which share a large number of these <b>matched</b> <b>patterns.</b> Experiments conducted in this study demonstrate that this application outperforms BLAST by obtaining a better computation time, while preserving the accuracy of alignments...|$|R
40|$|With the {{increasing}} internationalization of China, language communication {{has become an}} important channel for us {{to adapt to the}} political and economic environment. How to improve English learnersâ€™ language learning efficiency in limited conditions has turned into a problem demanding prompt solution at present. This paper applies two pronunciation patterns according to the actual needs of English pronunciation rating: to-be-evaluated pronunciation pattern and standard pronunciation pattern. It will translate the patterns into English pronunciation rating results through European distance. Besides, this paper will introduce the design philosophy of the whole algorithm in combination with CHMM <b>matching</b> <b>pattern.</b> Each link of the CHMM pattern will be given selective analysis while a contrast experiment between the CHMM <b>matching</b> <b>pattern</b> and the other two patterns will be conducted. From the experiment results, it can be concluded that CHMM pattern is the best option...|$|E
40|$|We {{construct}} a bilateral search {{model of the}} housing market in which agents differ in their flow rewards while searching. Buyers and sellers enter the market with high flow rewards, but move at a Poisson rate to a state with low flow rewards {{if they do not}} transact in the meantime. We characterize the equilibrium steady state <b>matching</b> <b>pattern</b> and compare this to the constrained efficient <b>matching</b> <b>pattern.</b> In particular we show that equilibrium is characterized by too little /Opportunistic Matching/, in which agents with high flow values will match only with agents with low flow values. We also characterize the joint distribution of price and time to sale (for sellers). The expected price conditional on time to sale falls with time spent on the market, while the conditional variance of price first rises and then falls with time on the market. ...|$|E
40|$|Abstract. With the {{increase}} of urban car ownership {{and the development of}} computer technology and image processing technology, through the video detection of traffic information more and more important. This paper proposes a testing method of vehicle identification, and separately in grayscale <b>matching,</b> <b>pattern</b> matching and shape matching three methods respectively to test the vehicle, and respectively analyzes the three methods of accuracy and the reasons for the unreasonable data...|$|E
50|$|F# uses <b>pattern</b> <b>matching</b> to bind {{values to}} names. <b>Pattern</b> <b>matching</b> {{is also used}} when {{accessing}} discriminated unions - the union is value <b>matched</b> against <b>pattern</b> rules and a rule is selected when a match succeeds. F# also supports Active Patterns {{as a form of}} extensible <b>pattern</b> <b>matching.</b> It is used, for example, when multiple ways of matching on a type exist.|$|R
40|$|ABSTRACTâ€”Molecular {{biologists}} often {{search for}} the important information from the databases in different directions of different uses <b>Pattern</b> <b>Matching</b> an automated data analysis technique, usually performed on a computer, by which a group of characteristic properties of an unknown object is compared with the comparable groups of characteristics {{of a set of}} known objects, to discover the identity or proper classification of the unknown object. The sequence <b>pattern</b> <b>match</b> algorithm proposed in this paper searches for <b>matches</b> between <b>patterns.</b> With the increasing need for instant information, <b>pattern</b> <b>matching</b> will continue to grow and change as needed from time to time. To extract pattern from a large sequence it takes more time, in order to reduce searching time an approach is proposed that reduces the search time with accurate retrieval of the <b>matched</b> <b>pattern</b> from the given sequence of any size, the greedy method is used here to perform the <b>pattern</b> <b>matching...</b>|$|R
30|$|The final {{effect is}} the {{selection}} of patterns that present marked resemblance in time evolution; the current situation is then assumed to develop {{in a way that}} resembles its <b>matched</b> <b>patterns.</b>|$|R
40|$|In {{this paper}} we give an {{overview}} of four algorithms that we have developed for pattern <b>matching,</b> <b>pattern</b> discovery and data compression in multidimensional datasets. We show that these algorithms can fruitfully be used for processing musical data. In particular, we show that our algorithms can discover instances of perceptually signifrant musica 1 repetition that cannot be found using previous approaches. We also describe results that suggest {{the possibility of using}} our datacompression algorithm for modelling expert motivic-thematic music analysis...|$|E
40|$|A new {{semantic}} {{pattern is}} proposed in this paper, {{which can be}} used by users to post questions and an-swers in user-interactive question answering (QA) sys-tem. The necessary procedures of using semantic pat-tern in a QA system are also presented, which include question structure analysis, pattern <b>matching,</b> <b>pattern</b> generation, pattern classification and answer extrac-tion. A user interface of using semantic pattern is also implemented in our QA system, which allows users to effectively post and answer questions. It gains good overall user satisfaction. 1...|$|E
40|$|Abstract. The JMatch {{language}} extends Java with iterable abstract pattern <b>matching,</b> <b>pattern</b> matching that {{is compatible}} with the data abstraction features of Java and makes iteration abstractions convenient. JMatch has ML-style deep pattern matching, but patterns can be abstract; they are not tied to algebraic data constructors. A single JMatch method may be used in several modes; modes may share a single implementation as a boolean formula. Modal abstraction simplifies specification and implementation of abstract data types. This paper describes the JMatch language and its implementation. ...|$|E
5000|$|To learn {{whether an}} actual spatial <b>pattern</b> <b>matches</b> some {{expected}} <b>pattern.</b>|$|R
40|$|We explore {{probabilistic}} lexico-syntactic <b>pattern</b> <b>matching,</b> {{also known}} as soft <b>pattern</b> <b>matching,</b> in a definitional question answering system. Most current systems use regular expression based hard <b>matching</b> <b>patterns</b> to identify definition sentences. Such rigid surface matching often fares poorly when faced with language variations. We propose two soft matching models to address this problem: one based on bigrams {{and the other on}} Profile Hidden Markov Model (PHMM). Both models provide a theoretically sound method to model <b>pattern</b> <b>matching</b> as a probabilistic process that generates token sequences. We demonstrate the effectiveness of the models on definition sentence retrieval for definitional question answering. We show that both models significantly outperform the state-of-the-art manually constructed hard <b>matching</b> <b>patterns</b> on recent TREC data. A critical difference between the two models is that the PHMM has a more complex topology. We experimentally show that the PHMM can handle language variations more effectively but requires more training data to converge. While we evaluate soft pattern models only on definitional question answering, we believe that both models are generic and can be extended to other areas where lexico-syntactic <b>pattern</b> <b>matching</b> can be applied...|$|R
5000|$|... wildmat is a <b>pattern</b> <b>matching</b> library {{developed}} by Rich Salz. Based on the wildcard syntax already {{used in the}} Bourne shell, wildmat provides a uniform mechanism for <b>matching</b> <b>patterns</b> across applications with simpler syntax than that typically offered by regular expressions. Patterns are implicitly anchored {{at the beginning and}} end of each string when testing for a match.|$|R
