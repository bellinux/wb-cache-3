28|64|Public
5000|$|Implementations {{using the}} decimal {{representation}} of an integer <b>Message</b> <b>Id</b> in the id {{field of the}} Delivery Receipt body and the hexadecimal representation of an integer <b>Message</b> <b>Id</b> in message_id and receipted_message_id fields ...|$|E
5000|$|... #Subtitle level 3: <b>Message</b> <b>Id</b> in SMPP 3.3 SMSC Delivery Receipts ...|$|E
5000|$|Using of SMPP 3.3 SMSC Delivery Receipts, {{especially}} the <b>Message</b> <b>Id</b> format in them ...|$|E
50|$|<b>Message</b> <b>IDs</b> must {{be unique}} {{on a single}} CAN bus, {{otherwise}} two nodes would continue transmission beyond {{the end of the}} arbitration field (ID) causing an error.|$|R
50|$|X - Reserved {{portion of}} the {{facility}} code. Reserved for internal use. Used to indicate HRESULT values that are not status values, but are instead <b>message</b> <b>ids</b> for display strings.|$|R
30|$|We {{analyze the}} total power {{consumption}} in three cases {{to determine the}} total power consumption's expected value. The first case (case 1 with orange box) addresses the false wake-up packets. This case has two possible cases, case 1 a and case 1 b. One is that the error wake-up packet has been received by wake-up radios with matched wake-up ID addresses, {{the other one is}} that the error wake-up packet has been received by wake-up radios without any matched wake-up ID addresses. In the earlier case, the wake-up radios will acknowledge the sender as they receive the matched wake-up ID addresses. The sender will send the message to wake-up radios. The wake-up radios find that the <b>message's</b> <b>ID</b> address does not match their own wake-up ID addresses. Then, the wake-up radios send retransmission requests to sender, and then they go to sleep. Regarding the <b>message's</b> <b>ID</b> address, it is the same as wake-up ID address. The wake-up radio receives the wake-up signal's wake-up ID address and the <b>message's</b> <b>ID</b> address from sender. It can compare the wake-up ID address with the <b>message's</b> <b>ID</b> address to know if both of them are correct or one of them is incorrect. If the wake-up ID address matches the <b>message's</b> <b>ID</b> address, then both of them are correct. If wake-up ID address does not match the <b>message's</b> <b>ID</b> address, then one of them is incorrect. In this case, the wake-up radio will request retransmission. In the latter case, the wake-up radios will not acknowledge the sender, as mismatched wake-up ID addresses, and go to sleep. As the wake-up receiver is separate from the main data receiver, they have different bit error rates. In case 2, we discuss the main data receiver's error from the noise. If the wake-up ID is correct and the correct wake-up receiver ACKs, then the message received by the main data receiver might be incorrect as the main data receiver has its own bit error rate, which is different with the wake-up receiver. The second case (case 2 with green boxes) addresses the false message. The correct wake-up radio receives the false message and sends retransmission request to sender. Other wake-up radios go to sleep after they receive the correct wake-up packets. The third case (case 3 with blue boxes) addresses a successful wake-up packet and a successful message. Only the correct wake-up radio will acknowledge the sender as it receives a correct wake-up packet and a correct message. Other wake-up radios go to sleep after they receive the correct wake-up packets.|$|R
5000|$|... b01 = 8 bytes - like type b00. not {{including}} <b>message</b> <b>ID</b> (4 last bytes).|$|E
50|$|Resource {{adapters}} {{are used}} to retrieve and route data. They provide access todatabases, files, messaging systems, enterprise applications and other datasources and targets.Each adapter includes a set of adapter commands {{that can be used}} to customizeits operation. Adapter commands specify different queues and queuemanagers, specific messages by <b>message</b> <b>ID,</b> specific sets of messages with thesame <b>message</b> <b>ID,</b> message descriptors in the data, and more.|$|E
50|$|The bare message {{itself is}} {{structured}} as an optional list of standard properties (<b>message</b> <b>id,</b> user id, creation time, reply to, subject, correlation id, group id etc.), an optional list ofapplication-specific properties (i.e., extended properties) and a body, which AMQP {{refers to as}} application data.|$|E
2500|$|J2178-3 – Defines {{standards}} for network <b>message</b> frame <b>IDs</b> for single byte headers ...|$|R
5000|$|... byte #9-12 (0x00000000) = <b>Message</b> Stream <b>ID.</b> This (strangely) is in little-endian order ...|$|R
5000|$|... #Caption: A list of cell {{broadcast}} <b>messages</b> (cell <b>IDs)</b> received on an Android smartphone.|$|R
50|$|The Abandon {{operation}} requests {{that the}} server abort an operation named by a <b>message</b> <b>ID.</b> The server need not honor the request. Neither Abandon nor a successfully abandoned operation send a response. A similar Cancel extended operation does send responses, {{but not all}} implementations support this.|$|E
50|$|The {{standard}} {{defines a}} 2-wire 18 gauge wire cable that can {{run up to}} 130 ft and operates at 9600 bit/s. A message is composed of up to 21 characters, unless the engine is stopped and the vehicle is not moving in which case transmitters are allowed to exceed the 21 byte max message length. Messages start with a <b>Message</b> <b>ID</b> (MID) character and finish with a checksum at the end. Characters are transmitted in the common 8N1 format.|$|E
50|$|The {{creation}} of new services and service patterns presents the most important way to extend Octopussy without making changes to the source code. However, since patterns are outlined as simplified regular expressions, administrators {{should have at least}} some basic knowledge about regex in general. It is further strongly recommended to build on already existing services and also understand the meaning of a message objects' basic fields, which are <b>message</b> <b>ID,</b> pattern, log level, taxonomy, table and rank.|$|E
5000|$|... byte #8 (0x14) = <b>Message</b> Type <b>ID</b> - 0x14 (20) defines an AMF0 encoded command message.|$|R
3000|$|... sends <b>messages</b> {{including}} <b>ID</b> {{and available}} channel to request {{to join the}} cluster once it receives the CH information of s [...]...|$|R
5000|$|The <b>Message</b> Type <b>ID</b> byte defines {{whether the}} packet {{contains}} audio/video data, a remote object or a command. Some possible values for are: ...|$|R
50|$|The Packet Type byte of a packet/tag header {{is based}} on the RTMP <b>message</b> <b>ID</b> byte with the AMF {{metadata}} value of 18 (0x12), video payload value of 9 (0x09) and audio payload value of 8 (0x08) being the only valid types used. The third bit indicates the payload is encrypted using the same mechanism as RTMP uses, however this is rarely used due to encrypted transports such as RTMP being used instead. The FLV packet encryption is generally inherited from a MP4 file that is stored on a Adobe Flash Media Server.|$|E
50|$|SQS {{does not}} {{automatically}} delete messages once they are sent. When a message is delivered, a receipt handle is generated for that delivery {{and sent to the}} recipient. These receipts are not sent with the message but in addition to it. SQS requires the recipient to provide the receipt in order to delete a message. This feature is new as of 2008 where only the <b>message</b> <b>ID</b> was required for message deletion. Because the system is distributed, a message may be sent more than once. In this case, the most recent receipt handle is needed to delete the message.|$|E
5000|$|The {{only way}} how to pass {{delivery}} receipts in SMPP 3.3 is to put information in a text form to the short_message field; however, {{the format of the}} text is described in Appendix B of SMPP 3.4, although SMPP 3.4 may (and should) use receipted_message_id and message_state for the purpose. While SMPP 3.3 states that <b>Message</b> <b>ID</b> is a C-Octet String (Hex) of up to 8 characters (plus terminating '\0'), the SMPP 3.4 states that the id field in the Delivery Receipt Format is a C-Octet String (Decimal) of up to 10 characters. This splits SMPP implementations to 2 groups: ...|$|E
25|$|The vehicle {{responds}} to the PID query on the CAN bus with <b>message</b> <b>IDs</b> that depend on which module responded. Typically the engine or main ECU responds at ID 7E8h. Other modules, like the hybrid controller or battery controller in a Prius, respond at 07E9h, 07EAh, 07EBh, etc. These are 8h higher than the physical address the module {{responds to}}. Even though the number of bytes in the returned value is variable, the message uses 8 data bytes regardless (CAN bus protocol form Frameformat with 8 data bytes).|$|R
50|$|Full Screen Picture Caller ID - See FULL SCREEN profile {{pictures}} & status <b>messages</b> as caller <b>ID</b> {{every time}} you make or receive a call.|$|R
30|$|The {{reason why}} Droptimeout and DropTTL {{increase}} {{is that the}} sensor node that is deployed around the failed sink node keeps sending data in upstream routing to the failed sink node until potential fields converge. When a neighbor node of the failed sink node has data in upstream routing, the node waits for an <b>ID</b> <b>message</b> from the failed sink node. Because the failed sink node cannot send an <b>ID</b> <b>message,</b> the neighbor node of the failed sink node drops the data owing to timeout.|$|R
30|$|The {{complete}} {{structure of}} beacons {{is defined as}} previously motivated in our requirements section: <Vehicle ID, <b>Message</b> <b>ID,</b> Vehicle’s Geographical Coordinates, Message List >.|$|E
3000|$|The {{complete}} {{data message}} structure comprises the following information: <Vehicle ID, <b>Message</b> <b>ID,</b> Vehicle’s Geographical Coordinates, Time Stamp, Event’s Geographical Coordinates, Priority List [...]...|$|E
30|$|We read in {{a sample}} of raw Ansar 1 forum posts and {{compiled}} the message text and respective message IDs into an initial corpus. We then automatically removed duplicates (same <b>message</b> <b>ID)</b> and empty documents (no message text) from the corpus.|$|E
50|$|A reader server is {{one that}} makes the {{articles}} available in the hierarchical disk directory format originated by B News 2.10, or offers the NNTP or IMAP commands, for use by newsreaders. A reader server typically also works as a transit server, but it may operate independently or serve as an alternative interface to an Internet forum. When receiving news, this type of server must perform the additional steps of filing articles into newsgroups and assigning sequential numbers within each group. An Xref line is usually added, listing all the groups where the message appears and the sequence numbers. Unlike <b>Message</b> <b>IDs,</b> the numbers and ordering of articles will differ on each server; but related servers may force agreement by operating in a slave mode, re-using their siblings' Xref lines. Reader servers typically also maintain a News Overview (NOV) database that allows newsreaders to quickly obtain message summaries and present messages in threaded form.|$|R
30|$|The {{experiment}} lasts 12 s {{and uses}} the following routing configuration: CTN 1, 2, and 4 send CAN messages to CTN 0. Concerning the value domain, error-free CTNs send only CAN messages where the CAN ID matches the CTN node number: e.g., CTN 1 is only allowed to send <b>messages</b> with <b>ID</b> 1. CTN 0 is only an receiver and does not produce any CAN messages.|$|R
30|$|In our method, a node updates its {{potential}} when the node receives an <b>ID</b> <b>message</b> containing a potential. Therefore, a node with data that is awake {{for a long}} time updates {{its potential}} more frequently. When a sensor node that has upstream data waits for an <b>ID</b> <b>message</b> from the failed sink node, its potential may become less than that of its neighbor node owing to frequent updates of potential. It then forwards the data to the neighbor sensor node. When the data are forwarded many times, similarly, the data are finally dropped due to the expiry of the TTL.|$|R
30|$|Both data {{messages}} and beacons have vehicle and message IDs to enable vehicles to distinguish different broadcast messages. An example of vehicle ID is the MAC address, while the <b>message</b> <b>ID</b> {{can either be}} a sequence number or a timestamp of the message generation time.|$|E
40|$|HTML file in the {{database}} has a different URL. Next, the biff dispatcher generates a notice comprising the summary and the URL, and delivers it to the user’s mobile phone, whose address is registered in {{the database}} in advance. When users receive the notice, they can click the URL attached to the summary to read the whole message. After the URL analyzer decodes the URL and gets the <b>message</b> <b>ID,</b> the user accesses the HTML files stored {{in the database}} based on the <b>message</b> <b>ID</b> and reads the message as a Web page. 3 E-mail Summarizer Many approaches to sentence extraction have been proposed (e. g., Mani and Maybury, 1999). These approaches are effective for summarizing news articles, but they {{cannot be applied to}} e-mail messages as they are for two reasons. One is that the document structure of e-mails is more complex than that of news articles. For example, most e-mail messages contain quoted messages, signatures, tables, itemizations or return codes inserted at line ends, which may interrupt sentences. The other is that most e-mail messages do not use lead or topic sentences such as those that often appear in news articles. Thus information about sentence positions and important keywords is not as effective in summarizing e-mail messages as it is in news articles...|$|E
40|$|We {{describe}} {{the design of}} an Access Control System using Web Services for information and content management. In this paper we described the solution for control mechanism of the information systems which have unique <b>message</b> <b>id,</b> requesting and giving permissions to different channels, and accessibility of the user to the specific channels by giving permissions to the user to use XML Messaging Systems using Web Services. This paper presents {{an overview of the}} research efforts undertaken by our group to build access control services around a Web Services model...|$|E
40|$|Many of the {{processors}} used in automotive Electronic Control Units (ECUs) are resource constrained due to {{the cost}} pressures of volume production; they have relatively low clock speeds and limited memory. Controller Area Network (CAN) is used to connect the various ECUs; however, the broadcast nature of CAN means that every message transmitted on the network can potentially cause additional processing load on the receiving nodes, whether the message is relevant to that ECU or not. Hardware filters can reduce or even eliminate this unnecessary load by filtering out messages that are not needed by the ECU. Filtering is done on the <b>message</b> <b>IDs</b> which are primarily used to identify {{the contents of the}} message and its priority. In this paper, we consider the problem of selecting filter configurations to minimize the load due to undesired messages. We show that the general problem is NP-complete. We therefore propose and evaluate an approach based on Simulated Annealing. We show that this approach nds near-optimal filter configurations for the interesting case where there are more desired messages than available filters...|$|R
30|$|The server agent then {{broadcasts}} {{the route}} request <b>message</b> using destination <b>ID,</b> the registered adjacent nodes that are nearer to the destination node which {{are ready to}} provide the service replies with the acknowledgement message to the server agent.|$|R
40|$|Many {{identity}} based signature (IBS) schemes {{have been}} proposed so far. However, most of the schemes are based on bilinear pairings. Only a few IBS schemes are with-out pairings. Up to now, there still remains a challenge to construct a provably secure and efficient IBS scheme without pairings. In this paper, we propose an efficient IBS scheme based on cubic residues, and we prove that our scheme is secure against adaptively chosen <b>message</b> and <b>ID</b> attack...|$|R
