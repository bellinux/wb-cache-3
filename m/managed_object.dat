70|629|Public
5000|$|In telecommunication, {{the term}} <b>managed</b> <b>object</b> has the {{following}} meanings: ...|$|E
5000|$|M-ACTION - Request {{an action}} to be {{performed}} on a <b>managed</b> <b>object</b> ...|$|E
5000|$|Add Attributes, Get Attributes, and Modify Attributes—to {{manipulate}} {{the attributes of}} a <b>managed</b> <b>object.</b>|$|E
50|$|CMIP models {{management}} information {{in terms of}} <b>managed</b> <b>objects</b> and allows both modification and performing actions on <b>managed</b> <b>objects.</b> <b>Managed</b> <b>objects</b> are described using GDMO (Guidelines for the Definition of <b>Managed</b> <b>Objects),</b> and can be identified by a distinguished name (DN), from the X.500 directory.|$|R
40|$|In large {{distributed}} management systems, typically {{there are}} large amounts of <b>managed</b> <b>objects.</b> Multiple managers {{are responsible for the}} management of different groups of <b>managed</b> <b>objects</b> according to different functional management purposes. Therefore concepts are necessary in order to structure and demarcate the overall set of <b>managed</b> <b>objects</b> according to the responsibilities of several managers and in order to specify dynamically which manager is allowed and which manager is obliged to perform certain management activities on specified sets of <b>managed</b> <b>objects.</b> This article demonstrates how technical consistency and integrity of management information can be provided by using authorisation policies, if several managers are managing the same <b>managed</b> <b>objects...</b>|$|R
50|$|The Guidelines for the Definition of <b>Managed</b> <b>Objects</b> (GDMO) is a {{specification}} {{for defining}} <b>managed</b> <b>objects</b> {{of interest to}} the Telecommunications Management Network for use in CMIP.|$|R
5000|$|M-GET - Request <b>managed</b> <b>object</b> {{attributes}} (for one {{object or}} {{a set of}} objects) ...|$|E
5000|$|Create—to {{create a}} new <b>managed</b> <b>object</b> such as a {{symmetric}} key, and return the identifier.|$|E
50|$|An object {{identifier}} (or object ID or OID) uniquely identifies a <b>managed</b> <b>object</b> in the MIB hierarchy.|$|E
40|$|The ICOMA {{system is}} {{intended}} as a flexible and open platform for configuration management. ICOMA {{should be able to}} manage your own and outside applications, no matter what size your network is or how your organization is structured. It is adaptable to the administrators personal requirements. The volume of data to be given by the administrators should be minimized. ICOMA allows you to write your own <b>managed</b> <b>objects</b> (MO), which configure your applications, with the support of development tools. It is possible to combine existing <b>managed</b> <b>objects</b> to form new compound <b>managed</b> <b>objects.</b> ICOMA supports a repository which scheme models your enterprise and whose contents are used to speed up the ICOMA system and to make it more reliable. The communication between <b>managed</b> <b>objects</b> and the ICOMA tools is handled by the configuration bus which supports wide distributed environments. The MO-Editor of the ICOMA system is a generic management tool to configure most of the <b>managed</b> <b>objects.</b> It supports configurable user dialogs. That allows the strict division of the user interface from the functionality of the <b>managed</b> <b>objects.</b> The ICOMA system can integrate and can be integrated into existing and emerging standards like SNMPv 2 high 2 using gateways...|$|R
40|$|Abstract. It {{is often}} useful {{to be able}} to examine <b>managed</b> <b>objects</b> of a crashed network el-ement in order to {{determine}} why it is faulty. However, most network monitoring systems only allow the examination of <b>managed</b> <b>objects</b> of fault-free agents. This work presents the specication and requirements of a clustering architecture for SNMP agents, which supports replication of <b>managed</b> <b>objects.</b> Also, we described its properties. The architecture is struc-tured in three layers. The lower layer corresponds to the <b>managed</b> <b>objects</b> at the network elements. The middle layer contains management entities called clusters that monitor and replicate <b>managed</b> <b>objects.</b> The upper layer allows the denition of management clusters as well as the relationship between clusters. An analysis of network resources demanded on a practical tool for replicating <b>managed</b> <b>objects</b> is presented. Resumo. O acesso aos objetos de ger encia de um elemento de rede falho ·e muitas vezes ·util para determinar a causa da sua falha. Contudo, a maioria dos sistemas de monitoramento de redes somente permite examinar os objetos de ger encia dos agentes livres de falhas. Este trabalho apresenta a especicac‚ ao de uma arquitetura de agrupamento para agentes SNMP que suportam replicac‚ ao dos objetos de ger encia. As propriedades da arquitetura tamb·e...|$|R
5000|$|MIB modules contain {{definitions}} of interrelated <b>managed</b> <b>objects.</b>|$|R
5000|$|Object {{definitions}} describe managed objects. An ASN.1 macro, OBJECT-TYPE, {{is used to}} concisely {{convey the}} syntax and semantics of a <b>managed</b> <b>object.</b>|$|E
50|$|Note: A <b>managed</b> <b>object</b> may {{represent}} a physical entity, a network service, or an abstraction of a resource that exists independently of its use in management.|$|E
50|$|The Berkeley DB used by Project Darkstar stores {{all data}} {{that is to}} be persisted. Anything {{that is to be}} stored in the {{database}} must also be serializable, as the database is programmed to store binary information. A <b>managed</b> <b>object</b> can be anything from player data (i.e. position, equipment) to internal server data and control logic (i.e. scalable data structure, tasks). The usefulness of managed objects is seen in the instance of a server failure. Since managed objects are updated transactionally, any corrupted data is discarded on the server restart and the <b>managed</b> <b>object</b> is rolled back to its last working state.|$|E
50|$|A KMIP server {{stores and}} {{controls}} <b>Managed</b> <b>Objects</b> such as symmetric and asymmetric keys, certificates, and user defined objects. Clients {{then use the}} protocol to access these objects subject to a security model that is implemented by the servers. Operations are provided to create, locate, retrieve and update <b>managed</b> <b>objects.</b>|$|R
40|$|This paper {{proposes a}} {{solution}} for mapping managed resources (network elements, networks) to the <b>managed</b> <b>objects</b> representing them. It supports an off-line, dynamic negotiation of Shared Management Knowledge in the TMN. Given a method for globally naming managed resources, managers identify the resource they want to manage {{as well as the}} management information they require. The manager's requirements are then mapped to the agents which contain the <b>managed</b> <b>objects.</b> From the global name of the agent, and knowledge about the management information that the agent supports, the manager can construct the global distinguished name of <b>managed</b> <b>objects...</b>|$|R
5000|$|MEF 31 [...] Service OAM Fault Management Definition of <b>Managed</b> <b>Objects</b> ...|$|R
5000|$|The MOF {{compiler}} (MOFComp.exe): The <b>Managed</b> <b>Object</b> Format (MOF) compiler parses a file containing <b>Managed</b> <b>Object</b> Format {{statements and}} adds the classes and class instances {{defined in the}} file to the CIM repository. The MOF format is a specific syntax to define CIM class representation in an ASCII file (e.g. MIB are to SNMP what MOF files are to CIM). MOFComp.exe is included in every WMI installation. Every definition existing in the CIM repository is initially defined in an MOF file. MOF files are located in %SystemRoot%\System32\WBEM. During the WMI setup, they are loaded in the CIM repository.|$|E
50|$|OMG's MOF {{is not to}} be {{confused}} with the <b>Managed</b> <b>Object</b> Format (MOF) defined by the Distributed Management Task Force (DMTF) in section 6 of the Common Information Model (CIM) Infrastructure Specification, version 2.5.0.|$|E
5000|$|The database, {{where all}} managed objects are stored, is called Management Information Base. In {{contrast}} with a CI, a <b>managed</b> <b>object</b> is [...] "dynamic" [...] and communicates with other network recourses that are managed.|$|E
5000|$|MEF 44 [...] Virtual NID (vNID) Definition of <b>Managed</b> <b>Objects</b> (SNMP) ...|$|R
5000|$|The {{types of}} <b>managed</b> <b>objects</b> that are <b>managed</b> by KMIP include ...|$|R
5000|$|HPR-IP-MIB: [...] — Definitions of <b>Managed</b> <b>Objects</b> for APPN/HPR in IP Networks ...|$|R
50|$|An {{example of}} a <b>managed</b> <b>object</b> is '''', which is a scalar object that {{contains}} a single object instance, the integer value that indicates {{the total number of}} input AppleTalk packets on a router interface.|$|E
5000|$|Novell {{later wrote}} a version that diversified the <b>managed</b> <b>object</b> class to include users. That {{solution}} (based {{on the second}} iteration of Magic Windows, engineered primarily by Damon Janis), [...] "UserNet", appeared at the Novell Brainshare conference in 1994.|$|E
50|$|A <b>managed</b> <b>object</b> (sometimes {{called a}} MIB object, an object, or a MIB) {{is one of}} any number of {{specific}} characteristics of a managed device. Managed objects {{are made up of}} one or more object instances (identified by their OIDs), which are essentially variables.|$|E
5000|$|Include {{definitions}} for <b>managed</b> <b>objects</b> {{that are}} compatible with management standards like SNMP.|$|R
5000|$|FIBRE-CHANNEL-FE-MIB: [...] Definitions of <b>Managed</b> <b>Objects</b> for the Fabric Element in Fibre Channel Standard ...|$|R
40|$|Telecommunications Management Network (TMN) systems use the {{object-oriented}} {{information modelling}} techniques and communication facilities provided by OSI Systems Management (SM). TMN interfaces are specified {{in terms of}} rather passive <b>Managed</b> <b>Objects</b> (MOs) with prespecified behaviour. In this paper, we propose the concept of Active <b>Managed</b> <b>Objects</b> (AMOs) as the means to specify and express arbitrary management functions (including those specified in [1]) through a suitable scripting language. AMOs may be delegated to a TMN application in agent role and function close to other <b>managed</b> <b>objects</b> they access. Such a facility increases the intelligence and autonomy of TMN applications and enables the expression of management functions with arbitrary intelligence. Also, since it uses the normal TMN mechanisms for information modelling and access (GDMO, CMIS/P), it could be potentially standardised. In this paper, we describe the AMO concept, examine tha information model and scripting language aspects and present our implementation experience. Keywords TMN, OSI Management, Active <b>Managed</b> <b>Objects,</b> Management by Delegation...|$|R
50|$|Core Data {{supports}} fetched properties; multiple configurations {{within a}} <b>managed</b> <b>object</b> model; local stores; and store aggregation (the data {{for a given}} entity may be spread across multiple stores); customization and localization of property names and validation warnings; {{and the use of}} predicates for property validation. These features of the original Objective-C implementation are not supported by the Java implementation.|$|E
5000|$|... 1. In a network, an {{abstract}} representation of network {{resources that are}} managed. With [...] "representation", we mean not the actual device that is managed, but also the device driver, that communicates with the device. An example of a printer as a <b>managed</b> <b>object</b> is the window that shows information about the printer, such as the location, printer status, printing progress, paper choice, and printing margins.|$|E
50|$|Each <b>managed</b> <b>object</b> has an {{immutable}} Value {{such as a}} key {{block that}} contains a cryptographic key. They also contain mutable Attributes {{which can be used}} to store meta data about the keys. Some attributes are derived directly from the Value, such as the cryptographic algorithm and length of a key. Other attributes are defined in the specification for the management of objects such as the Application Specific Identifier which is usually derived from tape identification data. Additional identifiers can be defined by the server or client as need by the application.|$|E
5000|$|RFC 1657, Obsolete - Definitions of <b>Managed</b> <b>Objects</b> for the Fourth Version of the Border Gateway ...|$|R
5000|$|...NET {{applications}} can directly use the Caching API to programmatically cache {{and retrieve}} any serializable <b>managed</b> <b>objects.</b>|$|R
5000|$|Defines {{maintenance}} domains, their constituent maintenance points, and the <b>managed</b> <b>objects</b> {{required to}} create and administer them ...|$|R
