35|92|Public
5000|$|The {{following}} {{is a presentation of}} the basic DSW algorithm in pseudocode, after the Stout-Warren paper. It consists of a <b>main</b> <b>routine</b> with three subroutines. The <b>main</b> <b>routine</b> is given by ...|$|E
5000|$|A minimal correct C program {{consists}} of an empty <b>main</b> <b>routine,</b> taking no arguments and doing nothing:int main(void){} ...|$|E
5000|$|To provide {{even faster}} compile times, some {{languages}} were structured for [...] "one-pass compilers" [...] which expect subordinate routines {{to be defined}} first, as with Pascal, where the <b>main</b> <b>routine,</b> or driver function, is the final section of the program listing.|$|E
30|$|Aspect-oriented design (AOD) is {{currently}} {{out of the}} scope of this method. In the case of using AOD, the revision steps above cannot be applied because <b>main</b> <b>routines</b> do not know their required libraries (aspects), but the libraries know the routines that call the libraries. All aspects should be woven together before applying our method if AOD is used.|$|R
40|$|Contents Tutorial Introduction 2 colSum 14 diagProduct 15 dupRow 16 dupCol 17 forwardSelect 18 getNextArg 24 globalRidge 25 localRidge 30 overWrite 36 predictError 37 rowSum 41 rbfDesign 42 traceProduct 2 Tutorial Introduction Tutorial Introduction These manual {{pages are}} {{for a set of}} Matlab {{routines}} which implement forward selection and ridge regression (global and local) for linear neural networks (such as radial basis function networks) applied to supervised learning problems (regression, classification and time series prediction). The <b>main</b> <b>routines</b> are forwardSelect, globalRidge, localRidge, predictError and rbfDesign. The other documented routines (e. g. rowSum, traceProduct, etc.) ar...|$|R
30|$|We propose {{two basic}} {{policies}} {{to design the}} timings to re-plan. First, we activate re-plan modules only when we judge from map errors information that we cannot continue the present plan. Second, {{in order to keep}} real-time performance, we divide checking routines whether to activate the re-plan modules (with low calculation cost) and <b>main</b> <b>routines</b> of re-planning (with high calculation cost). These policies decrease the total number of applied modules, and in most cases, the calculation time may be shortened. Based on the above policies, we propose the algorithm shown in Figure  2, consisting of three checking routines and three re-plan modules.|$|R
5000|$|The {{following}} simple program demonstrates Go's concurrency {{features to}} implement an asynchronous program. It launches two [...] "goroutines" [...] (lightweight threads): one {{waits for the}} user to type some text, while the other implements a timeout. The [...] statement waits for either of these goroutines {{to send a message}} to the <b>main</b> <b>routine,</b> and acts on the first message to arrive (example adapted from Chisnall).|$|E
5000|$|Developers {{can develop}} and debug an applet {{directly}} simply {{by creating a}} <b>main</b> <b>routine</b> (either in the applet's class or in a separate class) and calling init (...) and start (...) on the applet, thus allowing for development in their favorite Java SE development environment. All one has to do after that is re-test the applet in the AppletViewer program or a web browser to ensure it conforms to security restrictions.|$|E
50|$|The 1st Battalion {{deployed}} for {{the first}} time to the Persian Gulf when it arrived in Sharjah, now part of the United Arab Emirates and left in late 1970. Also that year the 2nd Battalion returned home from Germany and deployed on a short tour of Northern Ireland which would be one of many for the regiment, and especially so during the 1970s. In 1971 the 2nd Battalion, due to defence cuts, was placed in 'suspended animation' and two companies were retained, but the following year, due to the change of Government, the battalion was reformed. Also in 1971 the 1st Battalion deployed to Ireland {{for the first}} time. Such deployments were difficult with troops being in constant danger from snipers and bombs, with patrols and guarding being the <b>main</b> <b>routine</b> duties. Their tour came to an end in December; during their deployment five men were lost to shooting and bombing incidents.|$|E
50|$|There are two more-recent {{members of}} the SAFER family that have made changes to the <b>main</b> {{encryption}} <b>routine,</b> designed by the Armenian cryptographers Gurgen Khachatrian (American University of Armenia) and Melsik Kuregian in conjunction with Massey.|$|R
5000|$|European Champion (only <b>main</b> diszipline):1. Place <b>Routines</b> (2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012) ...|$|R
50|$|In 2009, {{some members}} of the Studies Group of Medieval Chinese History at National Taiwan University (NTU), Li-hsin Chao National Chi Nan University as the {{promoter}} of this group, starting to emerge a new academic community. The EMCH is one of their <b>main</b> and <b>routine</b> acativites.|$|R
40|$|A {{method and}} system for {{increasing}} optical instrument calibration and prediction accuracy {{within and across}} different optical instrument platforms can comprise two main submethods or routines. The first routine can include one for correcting differences among optical instruments of different model types regardless of the manufacturer and correcting differences among optical instruments of the same model type. The second <b>main</b> <b>routine</b> or sub-method can include one for analyzing new samples of a product over time and maintaining prediction accuracy as compared to a reference method over time. The first routine can include a "TRANS" procedure, a "MIN" procedure, and checkcell tests. The second <b>main</b> <b>routine</b> provides techniques on how a product database can be cleaned, condensed, and expanded automatically as it is used {{by one or more}} different optical instruments...|$|E
40|$|The {{computer}} program is discussed which can read several input files {{and provide a}} best set of values for the functions provided by the user, using either C-statistic or the chi(exp 2) statistic method. The program consists of one <b>main</b> <b>routine</b> and several functions and subroutines. Detail descriptions of each function and subroutine is presented. A {{brief description of the}} C-statistic and the reason for its application is also presented...|$|E
40|$|WINGENERATOR (WINdows GENERATOR) is an eayto- use {{application}} programmed in MATLAB language, running under Microsoft Windows™ on a PC {{developed for}} research and educational purposes. The <b>main</b> <b>routine</b> {{is a part of}} a general purpose tool called WINEASYLAB. The software has been made under friendly user philosophy and is selfexplicative. The able to generate arbitrary signal waveforms, coupled with the graphical and mathematical capacities of MATLAB makes this software an interesting tool easy to use by users at any level...|$|E
5000|$|World Champion (only <b>main</b> diszipline):1. Place <b>Routines</b> (2006, 2007, 2008, 2009, 2010, 2012)1. Place Women’s Doubles with Lena Scheiwiller (2005, 2006) ...|$|R
40|$|Software {{design and}} {{development}} in Free/Open Source projects are analyzed {{through the lens of}} the theory of modularity applied to complex systems. Both the architecture of the artifacts (software) and the organization of the projects benefited from the paradign of modularity, in an original and effective manner. Our study shows that three <b>main</b> <b>routines,</b> or shortcuts, emerged and were effectively applied. First, some successful projects inherited previously existing modular architecture, rather than designing new modular systems from scratch. Second, popular modular systems, like GNU/Linux kernel, evolved from an initial integrated structure through a process of evolutionary adaptation. Third, development of modular software took advantage from the violation of one fundamental rule of modularity, that is information hiding. Implications and extensions of Free/Open Source projects' experience are discussed in the conclusions. ...|$|R
40|$|SPECFEM 3 D Geotech is an open-source, {{parallel}} and cross-platform geotechnical engineering application. This {{software was}} originally developed for slope stability analysis and simulation of multistage excavation. Main features include surface loading, water table, gravity loading, and pseudostatic earthquake loading. The software is parallelized based on MPI and domain decomposition. Changes in the version v 1. 2. 0 	The file {{format of the}} displacement boundary conditions has changed (See Section 3. 2. 5 of the manual). 	Now the program can be run from the general locations. 	<b>Main</b> <b>routines</b> are modularized in preparation to add new applications in the coming versions. 	Removed all instances of runtime warning for temporary arrays. 	Added step-by-step tutorials for both serial and parallel runs. 	Added GiD mesh converter. 	Improved EXODUS mesh converter. 	Fixed several minor bugs. 	Structural change and overall code cleanup...|$|R
40|$|Imaging spectrometers {{simultaneously}} collect {{image data}} {{in hundreds of}} spectral channels, from the near-UV to the IR, and can thereby provide direct surface materials identification by means resembling laboratory reflectance spectroscopy. Attention is presently given to a software system, the Spectral Analysis Manager (SPAM) {{for the analysis of}} imaging spectrometer data. SPAM requires only modest computational resources and is composed of one <b>main</b> <b>routine</b> and a set of subroutine libraries. Additions and modifications are relatively easy, and special-purpose algorithms have been incorporated that are tailored to geological applications...|$|E
40|$|The SIMRAND I Computer Program (Version 5. 0 x 0. 3) {{written in}} Microsoft FORTRAN for the IBM PC {{microcomputer}} and its compatibles is described. The SIMRAND I Computer Program comprises eleven modules-a <b>main</b> <b>routine</b> and ten subroutines. Two additional files are used at compile time; one inserts the system or task equations into the source code, {{while the other}} inserts the dimension statements and common blocks. The SIMRAND I Computer Program can be run on most microcomputers or mainframe computers with only minor modifications to the computer code...|$|E
40|$|Three <b>main</b> <b>routine</b> {{sources of}} data on food {{poisoning}} are used in England and Wales. The first is the statutory notification system, in which clinicians notify the ‘proper officer ’ of their local authorities of cases or suspected cases of food poisoning, and the data are collated by the Office for National Statistics. Second and third are the reporting schemes for laboratory confirmed infections and general outbreaks of infectious intestinal disease, {{both of which are}} coordinated by the PHLS Communicable Disease Surveillance Centre. This review discusses {{the strengths and weaknesses of}} the three sources...|$|E
40|$|We {{present an}} R {{package for the}} {{simulation}} of simple and complex survival data. It covers different situations, including recurrent events and multiple events. The <b>main</b> simulation <b>routine</b> allows the user to introduce an arbitrary number of distributions, each corresponding to a new event or episode, with its parameters, choosing between the Weibull (and exponential as a particular case), log-logistic and log-normal distributions...|$|R
40|$|This report {{considers}} the Perfect code dyfesm[2]. We concentrate on providing {{some insight into}} the influence of application/algorithm considerations and the problem size on the performance observed on Cedar. The mappings to Cedar of two of the key computational primitives are discussed along with the relationship of the approaches to the particular problem used in the benchmark. For a consideration of this code {{from the point of view}} of a restructuring compiler the reader is referred to [1]. Section 2 describes the governing equations and the method used to solve them. Sections 3 and 4 present the code structure and a brief description of the test problem. Sections 5 and 6 discuss the <b>main</b> <b>routines</b> and their optimization along with two key primitives and some of the effects of Cedar on their implementation. Finally, Section 7 presents the performance of the various versions of the code that were tested. 2 Description of Metho...|$|R
40|$|The images {{shown in}} this paper were all {{generated}} on a PDP-I 1 / 45 computer having a 256 K-byte random access frame buffer which {{was used as the}} depth buffer. The <b>main</b> <b>routines</b> were written in Fortran and the critical parts were written in assembly language. The computation time of the extended subdivision algo-rithm is roughly proportional to the area covered by visible objects. Images of nontextured objects of the type used in this paper take about 25 minutes. The addition of texture or reflection increases this time by about l 0 percent. All images have a resolution of 512) < 512 picture elements. Conclusions By refining and extending Catmull's subdivision algorithm, images can be generated having a far higher degree of naturalness than was previously possible. These generalizations result in improved techniques for generating patterns and texture, and in the new capability for simulating reflections. References 1. Bui-Tuong Phong. Illumination for computer generated images...|$|R
40|$|WINACTRL- 2 (Windows Network Analyzer ConTRoL version 2) is an easy-to-use {{application}} programmed within MATLAB environment, running under Windows™ on {{a standard}} PC platform. The application has been developed with a double proposal: research and educational purposes. The <b>main</b> <b>routine</b> {{is a part of}} a general purpose tool called WINEASYLAB. The software has been made under friendly user philosophy and is self-explicative. The able to measure microwave signals, power and scattering parameters coupled with the graphical and mathematical abilities of MATLAB including 3 D graphics makes this software an interesting tool easy to use by users at any level...|$|E
40|$|This {{tutorial}} is {{made for}} new users of RIAM Ocean Model and DREAMS prediction system. Such users are recommended to read all options defined at options. h, the scalar parameters in params. h and the <b>main</b> <b>routine</b> of riamom. F at the earliest opportunity. Altimeter data assimilation is performed with assim. h and sub_assim. F. The surface and bottom boundary conditions are carefully prepared for better accuracy. The cron process of Unix/Linux OS allows fully automatic operations of the prediction system from forcing input to displaying output. Many technical features explained in this report will help the correct understanding and usage of the prediction system...|$|E
40|$|A binary {{component}} is a separately compiled program {{that can be}} used as a part of a larger program. Binary components generally conform to an accepted technology such as JavaBeans or ActiveX, and generally support a rich program interface containing properties methods and events. Binary components are generally used in a graphical user interface (GUI) environment. There are a number of benefits to be realized by converting command-line software into binary components. The most important of these is that GUI environments are more popular and more familiar to most people than command-line environments. Using binary components can greatly simplify a GUI implementation, to the point where it is only slightly more complicated than a typical command-line implementation. However there are benefits that go beyond mere convenience. Binary components have much richer interfaces than command-line programs. Binary components are service-oriented rather than task-oriented. A task-oriented program has a <b>main</b> <b>routine</b> that is devoted to accomplishing a single task. A service-oriented component has no <b>main</b> <b>routine</b> or main function, but instead provides a variety of services to its clients. Binary components can be easily integrated with one another, which permits a design where each major feature of an application is implemented in a different component. Such a design encourages software reuse at the component level and facilitates low-impact feature upgrades. We first delineate a design-pattern-based methodology for converting command-line programs into components. We then illustrate these principles using two projects, a simulation system for digital circuits, and a data generation system for software and hardware testing. ...|$|E
40|$|In {{order to}} {{accurately}} estimate the second-order {{effects on the}} behavior of steel frames with semi-rigid connections as well as to perform the practical design more easily and rationally, an attempt was made to develop a structural analysis program which precisely considers the characteristics of semi-rigid connections. This program is composed of the following three <b>main</b> <b>routines</b> : (1) The procedure for the structural analysis based on the method presented by Goto-Chen. This method, which uses closed-form solutions, takes into account the geometrical nonlinearity along with the inelastic property of connections. (2) Program PACOM (Parameter Analysis of COnnection Models) to prepare the parameters for the prediction equations of semi-rigid connection models which was developed based on the program SCDB (Steel Connection Data Bank). (3) Graphic routine for drawing the general configration and sectional force diagrams of the overall structure under the proposed loading step and likewise for the hystersis loop in relation to the connection moment and relative rotation. Developement of this system was effectively done by using Engineering Work Station (EWS) with a drawing function on a CRT display...|$|R
50|$|In Utah, most 3A, 4A, and 5A {{schools have}} a drill team. This sport is {{incredibly}} competitive in this state, {{probably due to}} the high number of dancers. Tryouts are normally held during the months of April and May the school year before the season. The reason for this is because most teams work on their technique, go to camps, and perfect their smaller routines over the summer for the performances they do {{at the beginning of the}} school year. The summer preparation gives teams more time to perfect their <b>main</b> <b>routines</b> for the winter competition season. Teams usually compete at 3-4 competitions before taking their routines to their school's regional competition. The teams that usually place in the top four at regionals go to the state competition to compete against the top teams from other regions. The dance styles include lyrical, hip hop, officers, and camp dances, which are the smaller routines performed at school functions and are optional at competitions. Dance, military, and kick are the required styles at regional and state competitions, and are the only routines performed.|$|R
40|$|Java {{performance}} {{has been increasing}} steadily {{for the past few}} years, and can now compete with that of C and Fortran. This paper describes the porting of Ludwig, which is a versatile code for the simulation of Lattice-Boltzmann models in 3 D on cubic lattices, to Java in order to increase its portability. The performance difference between the original C code and the Java port is analysed. The Java port has been benchmarked on different Java Virtual Machines, and the performance differences among the different JVMs for the <b>main</b> <b>routines</b> of the code is shown. The difficulties encountered in the porting operation are discussed. Two parallel versions of the program have been developed, using JOMP (Java OpenMP) and mpiJava (Message Passing Interface for Java), respectively. However, the mpiJava version is still under development, so no benchmarking results are yet available. The problems encountered in the JOMP port are discussed, and an explanation of the different algorithms programmed to overcome a speedup limitation of the original C code is provided. The problems found in the mpiJava port are addressed, and will be dealt with i...|$|R
40|$|The Kansas Geological Survey (KGS) {{developed}} a semi-analytical solution for slug tests that incorporates {{the effects of}} partial penetration, anisotropy, {{and the presence of}} variable conductivity well skins. The solution can simulate either confined or unconfined conditions. The original model, written in FORTRAN, has a text-based interface with rigid input requirements and limited output options. We recreated the <b>main</b> <b>routine</b> for the KGS model as a Visual Basic macro that runs in most versions of Microsoft Excel and built a simple-to-use Excel spreadsheet interface that automatically displays the graphical results of the test. A comparison of the output from the original FORTRAN code to that of the new Excel spreadsheet version for three cases produced identical results...|$|E
40|$|Impact-echo {{method is}} widely used for {{non-destructive}} testing on concrete evaluation. One of the procedures of this method is determining P-wave speed by measuring travel time of P-wave (between two transducers. For this purpose, a microcontroller-based portable instrument is developed. This research proposes a PIC microcontroller routine using interrupt-on-change and timer 0 features. On concrete, impact waves reach the first accelerometer and will interrupt the <b>main</b> <b>routine</b> and start the timer 0. When the waves reach the second accelerometer, the timer 0 will be stopped. The value of the timer represents the travel time of P-wave. Therefore, the P-wave speed can be calculated. The routine is verified using controlled signal generated by internal PIC. The accurate result of the travel time measurements is presented.) t...|$|E
40|$|This work {{shows the}} {{development}} and application of computational algorithms based on chaos theory and cellular automaton to simulate the grain growth process on squared steel billets produced by continuous casting. Three algorithms were developed to simulate the grain structures on chill, columnar and equiaxed zones. These include routines to simulate grain nucleation and growth. These routines were compiled separately from the <b>main</b> <b>routine</b> {{in order to make}} more efficient the simulator. Algorithms analyze each node at every step time during simulation and a graphical interface is used to display the results on the screen. Chaos theory is used for integrating a random selection process. The result is an image formed with cells that represent grains (cellular automaton) displayed on the screen based on a numeric code assigned to the nodal positions...|$|E
30|$|Based on a problem-partitioning structure, we {{designed}} rearrangement task realization that involve (a) design of three modules {{in consideration of}} characteristics of map errors {{and structure of the}} plan result, and (b) design of when they should be activated with the combination of checking <b>routines</b> and <b>main</b> re-planning <b>routines.</b> In addition to the proposition of a realization procedure, we constructed real robot systems. The proposed method and systems were tested by experiments in actual environments including transformation of obstacles. The results showed the effectiveness of our method.|$|R
40|$|It is {{estimated}} that 40 % of all crops grown {{in the world today}} are grown using irrigation. As a consequence, shifting precipitation patterns due to climate change are viewed as a major threat to food security. This report presents the Community Land Model-Agriculture module (CLM-AG), which models crop growth and water stress. The CLM-AG model is a global generic crop model built in the framework of the Community Land Model version 3. 5. This report describes the structure and <b>main</b> <b>routines</b> of the model. Two different evaluations of the model are then considered. First, at a global level, CLM-AG is run under a historic climatology and compared to the Global Agro-Ecological Zones, an existing model of irrigation need. Second, the irrigation need computed for the United States is compared to survey data from the United States Department of Agriculture. For both evaluations, CLM-AG results are comparable to either the model results or the surveyed data. Development of the IGSM applied in {{this research was supported by}} the U. S. Department of Energy, Office of Science (DE-FG 02 - 94 ER 61937); the U. S. Environmental Protection Agency, EPRI, and other U. S. government agencies and a consortium of 40 industrial and foundation sponsors. For a complete list see [URL]...|$|R
40|$|Lattice Quantum Chromodynamic (QCD) models {{subatomic}} interactions {{based on}} a four-dimensional discretized space–time continuum. The Lattice QCD computation {{is one of the}} grand challenges in physics especially when modeling a lattice with small spacing. In this work, we study the implementation of the <b>main</b> kernel <b>routine</b> of Lattice QCD that dominates the execution time on the Cell Broadband Engine. We tackle the problem of efficient SIMD execution and the problem of limited bandwidth for data transfers with the off-chip memory. For efficient SIMD execution, we present runtime data fusion technique that groups data processed similarly at runtime. We also introduce analysis needed to reduce the pressure on the scarce memory bandwidth that limits the performance of this computation. We studied two implementations for the <b>main</b> kernel <b>routine</b> that exhibit different patterns of accessing the memory and thus allowing different sets of optimizations. We show the attributes that make one implementation more favorable in terms of performance. For lattice size that is significantly larger than the local store, our implementation achieves 31. 2 GFlops for single precision computations and 16. 6 GFlops for double precision computations on the PowerXCell 8 i, an order of magnitude better than the performance achieved on most general-purpose processors...|$|R
