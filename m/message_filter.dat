6|238|Public
50|$|For device 16, the suffix letters further {{define the}} device: the first suffix letter is 'S' for serial or 'E' for Ethernet. The {{subsequent}} letters are: 'C' security processing function (e.g. VPN, encryption), 'F' firewall or <b>message</b> <b>filter,</b> 'M' network managed function, 'R' rotor, 'S' switch and 'T' telephone component. Thus a managed Ethernet switch would be 16ESM.|$|E
50|$|The Commander officer {{gives the}} user extra {{benefits}} such as an ad-free interface, a building queue, an improved galaxy view with added information, a <b>message</b> <b>filter,</b> extra shortcuts to enhance play and an 'Empire' view. Empire view gives the player an interface which shows information about all planets, including mine and power plant levels and ships currently docked. Upgrades to buildings can be performed via the Empire view.|$|E
40|$|In {{an earlier}} paper [3], Jajodia and Kogan {{proposed}} a <b>message</b> <b>filter</b> approach to enforcing mandatory security in multilevel object-oriented databases. The key {{idea in the}} <b>message</b> <b>filter</b> model is that all information exchange be permitted solely through messages and that security be enforced by a <b>message</b> <b>filter</b> component that mediates these messages. In a recent paper [8] the authors proposed a kernelized architecture for implementing the <b>message</b> <b>filter</b> model. A major complication in implementing this model arises due to timing channels intrinsic to the object-oriented model of computing. These channels arise because object-oriented "write-up" operations are abstract and arbitrarily complex (as opposed to primitive memory writes). One approach to closing these timing channels is to execute a logically sequential computation as concurrent pieces. Our earlier paper presented an execution model for managing such concurrent computations {{as well as a}} multiversion synchronization protocol to [...] ...|$|E
5000|$|... 1997. <b>Message</b> <b>Filtering</b> Techniques. US patent issued April 1997 ...|$|R
5000|$|<b>Message</b> <b>filtering</b> is {{available}} for censoring vulgarities in public messages.|$|R
40|$|Abstract:- This paper {{presents}} a software framework, called HDS, {{that tries to}} simplify the realization of distributed and adaptive applications by merging the client-server and the multi-agent paradigms and by implementing all the interactions among the processes of a system through the exchange of typed messages {{and the use of}} <b>message</b> <b>filters</b> for driving and dynamically adapting the behavior of the system. Typed <b>messages</b> and <b>message</b> <b>filters</b> are the elements that mainly characterize such a software framework. Typed messages can be considered an object-oriented “implementation ” of the types of message defined by an agent communication language and so they are means that make HDS a suitable software framework both for the realization of multi-agent systems and for the reuse of multi-agent model and techniques in non-agent based systems. <b>Message</b> <b>filters</b> drive and adapt the behavior of a system by acting on the exchange of messages. On the one hand, <b>message</b> <b>filters</b> can constrain the exchange of messages, modify the flow of messages, and manipulate their content. On the other hand, processes can dynamically add and remove some <b>message</b> <b>filters</b> to adapt the behavior of a system to any hardware and software new configuration and to any new user requirement...|$|R
40|$|Workgroups that defy {{traditional}} boundmies require successful {{communication among}} people whose interests, schedules, and locations may differ {{and are likely}} to change rapidly. CLUES is a dynamic personalized <b>message</b> <b>filter</b> that facilitates effective communication by prioritizing voice and text messages using personal information found in an individual’s work environment. CLUES infers message timeliness by considering calendar appointments, outgoing messages and phone calls, and by correlating these “clues ” via a personal rolodex. Experience shows that CLUES can be especially useful to mobile users with high message traffic who often access their messages over the telephone...|$|E
40|$|Different {{middleware}} {{technologies have}} been facilitating the {{communication between the}} distributed applications. RMI and CORBA are {{the most commonly used}} technology for communication between distributed components. This research work was undertaken in view of increasing e-business requirements. The Transfer of Messages in Distributed Systems (TMDS architecture) proposed in this paper is based on the concept of asynchronous communication between components. The advantage of the proposed architecture is that the sender of the message can continue processing after sending the message and need not wait for the reply from other application. TMDS Architecture ensures guaranteed delivery of the message. TMDS Architecture supports the two major domain of asynchronous messaging: (i) Publish/Subscribe and (ii) Point-To-Point domains. In addition TMDS architecture has the facility to prioritize the <b>message,</b> <b>filter</b> messages on certain conditions and the architecture also supports easy integration of new systems with the existing legacy systems...|$|E
30|$|The {{results from}} the {{multihop}} experiments are important {{in order to get}} an overview about the limits of our synchronization approach. The first scenario was made up of 5 nodes ordered in a chain, where a node can only communicate with the immediate neighbors. The only difference between the simulation and the testbed environment is that the testbed environment does not have an omniscient observer, which is able to continuously measure the synchronization deviation among all nodes. For this reason, we decided to measure the time difference between the edge nodes with the aid of an oscilloscope, whereas each node periodically sets an output pin at the same phase state for a short time. Unfortunately, these measurements cannot be gathered automatically over several periods. Therefore, we manually made snapshots over several minutes and took those diagrams, which display the biggest time deviation. To simulate the multihop network, we have simply implemented a <b>message</b> <b>filter.</b>|$|E
5000|$|RFC 5235 - Spamtest and Virustest; {{allows a}} script to {{interface}} with implementation-dependent <b>message</b> <b>filtering.</b>|$|R
5000|$|<b>Message</b> <b>{{filtering}}</b> - some {{systems support}} filtering data {{so that a}} subscriber may only see messages matching some pre-specified criteria of interest ...|$|R
30|$|Our {{prototype}} <b>message</b> <b>filtering</b> {{system is}} implemented {{as a single}} Erlang application, running on an Android smartphone, and comprising a number of subsystems (modules) for <b>message</b> receiving, queuing, <b>filtering</b> and displaying. All messaging is carried between the mobile device, and a PC that emulates the Command and Control Centre, using TCP/IP sockets.|$|R
40|$|One of {{the main}} {{features}} of information flow control is to ensure the enforcement of privacy, secrecy, and confidentiality. However, most information flow models that have been proposed are too restrictive, overprotected, and inflexible. This paper presents an approach to control flow information in object-oriented systems using versions, thus allowing considerable flexibility without compromising system security by disclosing and leaking sensitive information. Models based on <b>message</b> <b>filtering</b> intercept every <b>message</b> exchanged among objects to control the flow of information. Versions are proposed to provide flexibility and avoid unnecessary and undesirable blocking of <b>messages</b> during the <b>filtering</b> process. Two options of operations are supported by versions [...] cloning reply and non-cloning reply. Furthermore, we present an algorithm enforcing the <b>message</b> <b>filtering</b> through these operations...|$|R
5000|$|Thunderbird {{can manage}} {{multiple}} email, newsgroup, and news feed accounts and supports multiple identities within accounts. Features such as quick search, saved search folders ("virtual folders"), advanced <b>message</b> <b>filtering,</b> <b>message</b> grouping, and labels help manage and find messages. On Linux-based systems, system mail (movemail) accounts are supported. Thunderbird provides basic support for system-specific new email notifications {{and can be}} extended with advanced notification support using an add-on.|$|R
25|$|SeaMonkey Mail is a {{traditional}} e-mail client that includes support for multiple accounts, junk mail detection, <b>message</b> <b>filters,</b> HTML <b>message</b> support, and address books, among other features. It shares code with Mozilla Thunderbird; both Thunderbird and SeaMonkey are built from Mozilla's comm-central source tree.|$|R
30|$|This paper {{demonstrates}} that contemporary smartphones act as effective <b>message</b> <b>filtering</b> systems in high traffic environments such as emergency response organisations, without relying on central servers. We have prototyped a mobile messaging application for Android smartphones in the Erlang language. We implemented filtering rules based on message origin, importance, and temporal validity, and tested the filtering capabilities of a smartphone in a realistic setup, that simulates traffic {{of tens of}} thousands of messages per minute, as in a large scale emergency response operation. The conclusion is that careful coding of the messaging application so that it operates in constant memory space and judicious use of the available display area can provide an effective portable <b>message</b> <b>filtering</b> for real-time, high-volume traffic, and the potential to reduce information overload for the emergency responder.|$|R
40|$|Abstract—Interest {{management}} {{is essential for}} real-time large-scale distributed virtual environments (DVEs) which seeks to <b>filter</b> irrelevant <b>messages</b> on the network. Many exist-ing interest management schemes such as HLA DDM focus on providing precise <b>message</b> <b>filtering</b> mechanisms. However, {{this leads to a}} second problem: the computational overhead of the interest matching process. If the CPU cost of interest matching is too high, it would be unsuitable for real-time applications such as multiplayer online games for which runtime perfor-mance is important. This paper evaluates the performance of existing interest matching algorithms and proposes a new algorithm based on parallel processing. The new algorithm is expected to have better computational efficiency than existing algorithms and maintain the same accuracy of <b>message</b> <b>filtering</b> as them. Experimental evidence shows that our approach works well in practice...|$|R
50|$|The ACM uses {{simulation}} <b>message</b> <b>filtering</b> to {{evaluates the}} content of a message received from the confederation. The ACM delivers messages to its simulation that are of interest, and pass filtering criteria and discards {{those that are not}} of interest. The ACM filters two types of messages: update messages and interaction messages.|$|R
50|$|The ALSP {{communication}} scheme consists of (1) an inter-component communications model {{that defines the}} transport layer interface that connects ALSP components, (2) a layered protocol for simulation-to-simulation communication, object management, and time management, (3) a <b>message</b> <b>filtering</b> scheme to define the information of interest to a simulation, and (4) a mechanism for intelligent message distribution.|$|R
50|$|Clearswift {{extended}} the MIMEsweeper line to include web and instant <b>messaging</b> <b>filtering.</b> These were marketed as protecting against the leakage of confidential company information on {{social networking sites}} - Clearswift argues that instead of banning Web 2.0 sites and services entirely, businesses can actually gain a competitive advantage by making use of them, provided their use is monitored.|$|R
5000|$|... 100 filters to {{automatically}} sort incoming <b>messages</b> (200 <b>filters</b> for the Plus version).|$|R
40|$|E-mail {{services}} are essential in the Internet. However, the basic e-mail architecture presents problems that opens it to several threats. Alternatives {{have been proposed}} to solve some problems related with e-mail services, offer-ing reliability and scalability to those systems. This work presents a distributed trust model, allowing to create dy-namic and decentralized trusted server lists, through the ex-clusion of servers used as spreaders of malicious messages. Many techniques were used to build it, like a social network model, <b>message</b> <b>filters,</b> <b>message</b> management, and a trust information storage and propagation model. ...|$|R
40|$|Filtered {{delivery}} {{model of}} message passing in an object-oriented distributed computing environment facilitates separation of message control from message processing in a transparent manner. In this model, special objects called filter objects {{have the ability}} to <b>filter</b> <b>messages</b> in transit and perform intermediate actions. We present the design and implementation of the <b>message</b> <b>filtering</b> model for transparent dynamically pluggable filter objects for MICO, an open-source CORBA implementation. For implementing the filtering framework, enhancements to the MICO implementation model are proposed. A process for development of filter objects with related tool support has also been outlined...|$|R
30|$|For mobile users, Kwon [35] {{presents}} a context-aware <b>message</b> <b>filtering</b> system that uses case-based reasoning and AHP. However, it {{is limited by}} the number of cases in the database. Besides, the author used a user questionnaire to assign the importance of all criteria. This method is inflexible if the number of criteria increases because it would require a long questionnaire to be created.|$|R
30|$|Collaboration {{technologies}} for emergency response {{have not received}} much dedicated attention from research in CSCW, mobile, ubiquitous computing, and related areas; nevertheless some of the outputs of such research could be relevant to emergency response support. For example, location-based notifications that alert the users in a target area to information of interest to them could easily be added to our approach as additional types of filtering rules that add location to the properties of a received <b>message.</b> <b>Filtering</b> on the other hand, has been an active topic for research in mobile based communications. In [10] {{the use of a}} ‘middleman’ between message sender and receiver is proposed to filter or delay all but the most essential data when the communication link to the mobile device is slow. Yet, other approaches suggest that such filtering should be done collaboratively, i.e., shared between the participating mobile devices [11]. As this paper demonstrates, it is also feasible to do <b>message</b> <b>filtering,</b> in real-time, on individual mobile devices.|$|R
50|$|Servers {{can change}} the game mode and have custom maps made to fit the {{properties}} of the game. Certain thresholds are used to catch malicious players and kick them off the server, as well as <b>message</b> <b>filters</b> and an entire collection of other anti-cheating features. There are around 250 servers active at any given time (although only about 10-20% have active players most of the time).|$|R
40|$|Colloque avec actes et comité de lecture. internationale. International audienceThis paper {{presents}} an information extraction system, dedicated to <b>message</b> <b>filtering</b> {{for a specific}} domain (security systems). The paper focuses on a method for identifying domain-specific ontology elements (terms and concepts), using syntactic information and an existing domain ontology. The domain ontology is represented using description logics. The system uses description logics inference mechanisms to validate the candidate concepts...|$|R
40|$|This paper {{presents}} an information extraction system, dedicated to <b>message</b> <b>filtering</b> {{for a specific}} domain (security systems). The paper focuses on a method for identifying domain-specific ontology elements (terms and concepts), using syntactic information and an existing domain ontology. The domain ontology is represented using description logics. The system uses description logics inference mechanisms to validate the candidate concepts. inria- 00101016, version 1 - 27 Nov 2012 1...|$|R
40|$|This paper {{proposes a}} system {{enforcing}} content-based <b>message</b> <b>filtering</b> for On-line Social Networks (OSNs). The system allows OSN users {{to have a}} direct control on the messages posted on their walls. This is achieved through a flexible rule-based system, that allows a user to customize the filtering criteria {{to be applied to}} their walls, and a Machine Learning based soft classifier automatically labelling messages in support of content-based filtering...|$|R
50|$|Update {{messages}}. The ACM evaluates update messages {{based on}} the simulation’s update <b>message</b> <b>filtering</b> criteria that the simulation provides. As discussed in earlier, when an ACM receives an update message there are four possible outcomes: (1) the ACM discards the message, (2) the ACM sends the simulation a create message, (3) the ACM sends the simulation the update message, or (4) the ACM sends the simulation a delete message.|$|R
40|$|XML <b>message</b> <b>filtering</b> {{systems are}} used for sifting through {{real-time}} messages to support business data mining and reporting. An XML <b>message</b> <b>filtering</b> system needs to (a) process registered filter predicates on multiple distributed real-time streams and (b) match and validate the filter results with local data to identify the relevant data {{that can be used}} for higher-level processing. Although efficient real-time filtering schemes exists, the matching phase of the operation where filter results have to be matched against local data to select those matches that are relevant to the particular task remains to be expensive as it requires expensive join operations. In this paper, we present an efficient middleware (FMware) for filtering and matching XML messages against locally available data. The proposed operator relies on a novel cluster-domain matching scheme to reduce the cost of the process. We analytically study the cost of the proposed middleware and experimentally show that it adaptively reduces the number of local data accesses and provides large savings in matching time with respect to cluster-unaware matching...|$|R
40|$|Since the {{creation}} of Twitter in 2008, micro-blogging services have {{received a lot of}} attention among users who wish to share news items, opinions and information with friends and colleagues. However, these services typically provide for only limited organisation of content, with the main ranking criterion being post time with perhaps some basic <b>message</b> <b>filtering</b> accommodated. Given the substantial and increasing volume of posts that micro-blogging services attract, there is a clear need to assist users when it comes to effectively consuming this content. In this regard, categorisation offers one approach to organise content by grouping related messages together. In this paper we present a study in the recommendation of categories for short-form messages in order to provide for better search and <b>message</b> <b>filtering.</b> In particular, we present an index-based approach where real-time web data {{can be used as a}} source of knowledge for category recommendation. Further, we evaluate our approach on two different micro-blogging datasets and results show that micro-blog messages in sufficient quantities provide a useful recommendation signal for category recommendation...|$|R
40|$|This paper {{introduces}} JAF, a Java {{and actor}} based framework aimed at supporting real-virtual teleconferences and more general multimedia applications like video-on-demand, interactive television and so forth. JAF represents a real-time architecture supporting a modular specification of multimedia session Quality-of-Service (QoS) constraints, notably timing requirements. Run-time verification of QoS constraints rely on <b>message</b> <b>filtering</b> and user-defined scheduling. The paper introduces JAF and describes {{the development of}} some experimental tools for real-virtual teleconferences over Mbone...|$|R
40|$|Abstract — This paper {{proposes a}} system that {{implements}} a content-based <b>message</b> <b>filtering</b> service for Online Social Networks (OSNs). Our system allows OSN users to have a direct control on the messages that are posted on their walls. This is done through a rule-based system, that allows a user to customize the filtering criteria, {{which is to be}} applied to their walls, and a Machine Learning based classifier which can automatically produce membership labels for the support of our content-based filtering mechanism. I...|$|R
5000|$|Web {{interfaces}} for list administration, archiving of <b>messages,</b> spam <b>filtering,</b> etc. Separate interfaces {{are available}} for users (for self-administration), moderators (to accept/reject list posts), and administrators.|$|R
50|$|Tumbleweed {{products}} {{were used to}} block security threats, protect information, and conduct business online. Tumbleweed provided solutions for inbound and outbound email protection, secure file routing, and identity validation that allow organizations to conduct business over the Internet. Tumbleweed offered these solutions in three product suites: MailGate, SecureTransport, and Validation Authority. MailGate provides protection against spam, viruses, and attacks, and enables policy-based <b>message</b> <b>filtering,</b> encryption, and routing. SecureTransport enables customers to safely exchange large files and transactions without proprietary software. Validation Authority determines the validity of digital certificates.|$|R
