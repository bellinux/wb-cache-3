36|87|Public
5000|$|... trivial <b>multivalued</b> <b>dependency</b> 2: A <b>multivalued</b> <b>dependency</b> {{for which}} [...]|$|E
5000|$|... trivial <b>multivalued</b> <b>dependency</b> 1: A <b>multivalued</b> <b>dependency</b> which {{involves}} all {{the attributes of}} a relation i.e.. A trivial <b>multivalued</b> <b>dependency</b> implies, for tuples [...] and , tuples [...] and [...] which are equal to [...] and [...]|$|E
50|$|In {{contrast}} to the functional dependency, the <b>multivalued</b> <b>dependency</b> requires that certain tuples be present in a relation. Therefore, a <b>multivalued</b> <b>dependency</b> is a special case of tuple-generating dependency. The <b>multivalued</b> <b>dependency</b> {{plays a role in}} the 4NF database normalization.|$|E
40|$|Abstract We study <b>multivalued</b> <b>dependencies,</b> {{as well as}} the propositional {{formulas}} whose deduction calculus parallels that of <b>multivalued</b> <b>dependencies,</b> and the variant {{known as}} degenerated <b>multivalued</b> <b>dependencies.</b> For each of these sorts of expressions, we provide intrinsic characterizations in purely semantic terms. They naturally generalize similar properties of functional dependencies or Horn clauses...|$|R
40|$|Discovery of <b>multivalued</b> <b>dependencies</b> from {{database}} {{relations is}} viewed as a search in a hypothesis space de ned according to the generalisation relationship among <b>multivalued</b> <b>dependencies.</b> Two algorithms for the discovery of <b>multivalued</b> <b>dependencies</b> from relations are presented. The topdown algorithm enumerates the hypotheses from the most general to more speci c hypotheses which are checked on the input relation. The bottomup algorithm rst computes the invalid <b>multivalued</b> <b>dependencies.</b> Starting with the most general dependencies, the algorithm iteratively re nes the set of dependencies to conform with each particular invalid dependency. The implementation of the algorithms is analysed and some empirical results are presented...|$|R
40|$|We {{present a}} lattice-base {{formalism}} to relate, {{in a novel}} way, different representation methods for relational data. Specifically, relations given extensionally by tuples, <b>multivalued</b> <b>dependencies,</b> and Armstrong relations for <b>multivalued</b> <b>dependencies.</b> The semantics of this formalism {{is based on a}} closure operator used to calculated the lattice. We prove that this representation yields the set of <b>multivalued</b> <b>dependencies</b> that hold in a set of tuples as well as Armstrong relation. Postprint (published version...|$|R
50|$|In {{database}} theory, a <b>multivalued</b> <b>dependency</b> {{is a full}} constraint {{between two}} sets of attributes in a relation.|$|E
5000|$|Because the lecturers {{attached}} to the course and the books {{attached to}} the course are independent of each other, this database design has a multivalued dependency; {{if we were to}} add a new book to the AHA course, we would have to add one record for each of the lecturers on that course, and vice versa.Put formally, there are two multivalued dependencies in this relation: {course} [...] {book} and equivalently {course} [...] {lecturer}.Databases with multivalued dependencies thus exhibit redundancy. In database normalization, fourth normal form requires that either every <b>multivalued</b> <b>dependency</b> X [...] Y is trivial or for every nontrivial <b>multivalued</b> <b>dependency</b> X [...] Y, X is a superkey. A <b>multivalued</b> <b>dependency</b> X [...] Y is trivial if Y is a subset of X, or if [...] is the whole set of attributes of the relation.|$|E
50|$|A <b>multivalued</b> <b>dependency</b> is {{a special}} case of a join dependency, with only two sets of values involved, i.e. it is a binary join dependency.|$|E
40|$|Abstract. Functional dependencies, {{a notion}} {{originated}} in Relational Database Theory, {{are known to}} admit interesting characterizations in terms of Formal Concept Analysis. In database terms, two successive, natural extensions {{of the notion of}} functional dependency are the socalled degenerate <b>multivalued</b> <b>dependencies,</b> and <b>multivalued</b> <b>dependencies</b> proper. We propose here a new Galois connection, based on any given relation, which gives rise to a formal concept lattice corresponding precisely to the degenerate <b>multivalued</b> <b>dependencies</b> that hold in the relation given. The general form of the construction departs significantly from the most usual way of handling functional dependencies. Then, we extend our approach so as to extract Armstrong relations for the degenerate <b>multivalued</b> <b>dependencies</b> from the concept lattice obtained; the proof of the correctness of this construction is nontrivial...|$|R
40|$|One problem {{concerning}} the universal relation assumption is {{the inability of}} known methods to obtain a database scheme design in the general case, where the real-world constraints are given {{by a set of}} dependencies that includes embedded <b>multivalued</b> <b>dependencies.</b> We propose a simpler method of describing the real world, where constraints are given by functional dependencies and a single join dependency. The relationship between this method of defining the real world and the classical methods is exposed. We characterize in terms of hypergrapbs those <b>multivalued</b> <b>dependencies</b> that are the consequence of a given join dependency. Also characterized in terms of hypergraphs are those join dependencies that are equivalent to a set of <b>multivalued</b> <b>dependencies...</b>|$|R
40|$|Data {{dependencies}} play {{an important}} role in the design of relational databases. In particular, functional and <b>multivalued</b> <b>dependencies</b> are useful to obtain relation schemes that satisfy the fourth normal form. We study the learnability of the class FMVD of sets of functional and <b>multivalued</b> <b>dependencies</b> within the exact model of learning via queries, and prove that neither equivalence queries alone nor membership queries alone suce to learn the class...|$|R
50|$|A {{functional}} dependency {{is a special}} case of <b>multivalued</b> <b>dependency.</b> In a {{functional dependency}} X → Y, every x determines exactly one y, never more than one.|$|E
5000|$|A trivial <b>multivalued</b> <b>dependency</b> X [...] Y is {{one where}} either Y is a subset of X, or X and Y {{together}} form the whole set of attributes of the relation.|$|E
5000|$|... full {{constraint}}: A constraint which expresses {{something about}} all attributes in a database. (In contrast to an embedded constraint.) That a <b>multivalued</b> <b>dependency</b> {{is a full}} constraint follows from its definition,as where it says something about the attributes [...]|$|E
40|$|AbstractWe {{extend the}} result on the {{equivalence}} between functional and <b>multivalued</b> <b>dependencies</b> in relational databases and {{a fragment of}} propositional logic. It is shown that this equivalence still holds for functional and <b>multivalued</b> <b>dependencies</b> in databases that support complex values via nesting of records and lists. The equivalence has several implications. Firstly, it extends a well-known result from relational databases to databases which are not in first normal form. Secondly, it characterises the implication of functional and <b>multivalued</b> <b>dependencies</b> in complex-value databases in purely logical terms. The database designer {{can take advantage of}} this equivalence to reduce database design problems to simpler problems in propositional logic. Furthermore, relational database design tools can be reused to solve problems for complex-value databases...|$|R
50|$|Ronald Fagin {{demonstrated}} {{that it is}} always possible to achieve 4NF. Rissanen's theorem is also applicable on <b>multivalued</b> <b>dependencies.</b>|$|R
40|$|Functional <b>dependencies</b> (FDs) and <b>multivalued</b> <b>dependencies</b> (MVDs) play a {{fundamental}} role in relational databases where they provide semantics {{for the data}} {{and at the same time}} are the foundation for database design. Since XML documents are closely coupled with relational databases in that XML documents are typically exported and imported from relational databases, the study of FDs and MVDs in XML is of fundamental significance in XML research. In this paper we investigate the issue of defining <b>multivalued</b> <b>dependencies</b> in XML, a topic which to the best of our knowledge has not been previously investigated. We define <b>multivalued</b> <b>dependencies</b> in XML (XMVDs) and justify our definition by proving that, for a very general class of mappings from relations to XML, a relation satisfies an MVD if and only if the corresponding XML document satisfies the corresponding XMVD. Thus our definition of a XMVD in a XML document is a natural extension of the definition of a MVD in relations...|$|R
50|$|A <b>multivalued</b> <b>dependency</b> exists {{when there}} are at least 3 {{attributes}} (like X,Y and Z) in a relation and for value of X there is a well defined set of values of Y and a well defined set of values of Z. However, the set of values of Y is independent of set Z and vice versa.|$|E
5000|$|Fourth {{normal form}} (4NF) {{is a normal}} form used in {{database}} normalization. Introduced by Ronald Fagin in 1977, 4NF is {{the next level of}} normalization after Boyce-Codd normal form (BCNF). Whereas the second, third, and Boyce-Codd normal forms are concerned with functional dependencies, 4NF is concerned with a more general type of dependency known as a <b>multivalued</b> <b>dependency.</b> A table is in 4NF if and only if, for every one of its non-trivial multivalued dependencies X [...] Y, X is a superkey—that is, X is either a candidate key or a superset thereof.|$|E
5000|$|Let [...] be a {{relational}} schema and let [...] and [...] (subsets). The <b>multivalued</b> <b>dependency</b> [...] (which {{can be read}} as [...] multidetermines [...] ) {{holds on}} [...] if, in any legal relation , for all pairs of tuples [...] and [...] in [...] such that , there exist tuples [...] and [...] in [...] such that In more simple words the above condition can be expressed as follows: if we denote by [...] the tuple having values for [...] collectively equal to [...] correspondingly, then whenever the tuples [...] and [...] exist in , the tuples [...] and [...] should also exist in [...]|$|E
40|$|AbstractData {{dependencies}} play {{an important}} role in the design of relational databases. There is a strong connection between dependencies and some fragments of the propositional logic. In particular, functional dependencies are closely related to Horn formulas. Also, <b>multivalued</b> <b>dependencies</b> are characterized in terms of multivalued formulas. It is known that both Horn formulas and sets of functional dependencies are learnable in the exact model of learning with queries. Here we present an algorithm that learns a non-trivial subclass of multivalued formulas using membership and equivalence queries. Furthermore, a slight modification of the algorithm allows us to learn the corresponding subclass of <b>multivalued</b> <b>dependencies...</b>|$|R
40|$|AbstractIn {{traditional}} relational databases, {{the data}} are stored in "flat" tables. Query processing performance {{is dominated by the}} cost of joining such tables. By contrast, nested relational structures can avoid joins. If, however, such structures are decomposed into nested normal form (NNF) then the number of normal scheme trees in the resulting nested scheme forest may dominate query processing performance. Thus, minimizing the number of such trees is an important design goal. We prove that the problem of finding a succinct NNF scheme forest is NP-hard even for the class of sets of unary <b>multivalued</b> <b>dependencies,</b> which is a subclass of the class of split-free sets of <b>multivalued</b> <b>dependencies...</b>|$|R
40|$|Abstract. In Database Theory, <b>Multivalued</b> <b>Dependencies</b> are {{the main}} tool to define the Fourth Normal Form and, as such, their {{inference}} problem has been deeply studied; two related notions appearing in that study are a syntactical analog in propositional logic and a restriction that maintains to this logic the same relationship as Functional Dependencies do to Horn logic. We present semantic, lattice-theoretic characterizations of such <b>multivalued</b> <b>dependencies</b> that hold in a given relation, as well as similar results for the related notions just mentioned. Our characterizations explain better some previously known facts by providing a unifying framework that {{is also consistent with}} the studies of Functional Dependencies. ...|$|R
5000|$|If {{the column}} {{headings}} in a relational database table {{are divided into}} three disjoint groupings X, Y, and Z, then, {{in the context of}} a particular row, we can refer to the data beneath each group of headings as x, y, and z respectively. A <b>multivalued</b> <b>dependency</b> X [...] Y signifies that if we choose any x actually occurring in the table (call this choice xc), and compile a list of all the xcyz combinations that occur in the table, we will find that xc is associated with the same y entries regardless of z. So essentially the presence of z provides no useful information to constrain the possible values of y.|$|E
5000|$|These non-trivial multivalued {{dependencies}} on a non-superkey {{reflect the}} fact that the varieties of pizza a restaurant offers are independent from the areas to which the restaurant delivers. This state of affairs leads to redundancy in the table: for example, we are told three times that A1 Pizza offers Stuffed Crust, and if A1 Pizza starts producing Cheese Crust pizzas then we will need to add multiple rows, one for each of A1 Pizza's delivery areas. There is, moreover, nothing to prevent us from doing this incorrectly: we might add Cheese Crust rows for all but one of A1 Pizza's delivery areas, thereby failing to respect the <b>multivalued</b> <b>dependency</b> {Restaurant} [...] {Pizza Variety}.|$|E
40|$|Object-oriented Bayesian {{networks}} (OOBNs) {{facilitate the}} design of large Bayesian networks by allowing Bayesian networks to be nested inside of one another. Weak conditional independence {{has been shown to}} be a necessary and su#cient condition for ensuring consistency in OOBNs. Since weak conditional independence plays such an important role in OOBNs, in this paper we establish two useful results relating weak conditional independence with weak <b>multivalued</b> <b>dependency</b> in relational databases. The first result strengthens a previous result relating conditional independence and <b>multivalued</b> <b>dependency.</b> The second result takes a step towards showing that the complete axiomatization for weak <b>multivalued</b> <b>dependency</b> is also complete for full weak conditional independence...|$|E
40|$|In {{traditional}} relational databases, {{the data}} is stored in "flat" tables. Query processing performance {{is dominated by the}} cost of joining such tables. By contrast, nested relational structures can avoid joins. If, however, such structures are decomposed into nested normal form (NNF) then the number of normal scheme trees in the resulting nested scheme forest may dominate query processing performance. Thus minimizing the number of such trees is an important design goal. We prove that the problem of finding a succinct NNF scheme forest is NP-hard even for the class of sets of unary <b>multivalued</b> <b>dependencies,</b> which is a subclass of the class of split-free sets of <b>multivalued</b> <b>dependencies...</b>|$|R
40|$|In Database Theory, <b>Multivalued</b> <b>Dependencies</b> are {{the main}} tool to define the Fourth Normal Form and, as such, their {{inference}} problem has been deeply studied; two related notions appearing in that study are a syntactical analog in propositional logic and a restriction that maintains to this logic the same relationship as Functional Dependencies do to Horn logic. We present semantic, lattice-theoretic characterizations of such <b>multivalued</b> <b>dependencies</b> that hold in a given relation, as well as similar results for the related notions just mentioned. Our characterizations explain better some previously known facts by providing a unifying framework that {{is also consistent with}} the studies of Functional Dependencies. Postprint (published version...|$|R
40|$|Symmetric <b>{{dependencies}},</b> or <b>MultiValued</b> Dependencies-like, {{are those}} dependencies that follow the deduction rules of <b>MultiValued</b> <b>Dependencies</b> (MVD’s). These are MVD-clauses, Degenerate <b>MultiValued</b> <b>Dependencies</b> (DMVD’s), and MVD’s, being the latter ones {{relevant to the}} 4 th normal form in the relational database model. Previous results have explained how to characterize these dependencies with lattices. However, these characterizations were ad-hoc, and no unified characterization has been provided yet. The {{purpose of this paper}} is to present such a common characterization for all these kind of dependencies providing the same framework for all of them, and to extend this generalization to the construction of Armstrong relations. Preprin...|$|R
40|$|Abstract — This paper {{introduces}} a new definition of fuzzy <b>multivalued</b> <b>dependency,</b> called α-fmvd, {{on the basis}} of the α-equality of tuples as defined in [1]. Next the definition is shown to be consistent, i. e., it reduces to that of classical <b>multivalued</b> <b>dependency</b> (mvd) when the choice parameter takes the value one. Finally, a set of sound and complete inference axioms have been designed and proved for the α-fmvd. Copyright c ○ 2011 Yang’s Scientific Research Institute, LLC. All rights reserved...|$|E
40|$|Following the {{development}} of fuzzy logic theory by Lotfi Zadeh, its applications were investigated by researchers in different fields. Presenting and working with uncertain data is a complex problem. To solve for such a complex problem, the structure of relationships and operators dependent on such relationships must be repaired. The fuzzy database has integrity limitations including data dependencies. In this paper, first fuzzy <b>multivalued</b> <b>dependency</b> based semantic proximity and its problems are studied. To solve these problems, the semantic proximity's formula is modified, and fuzzy <b>multivalued</b> <b>dependency</b> based {{on the concept of}} extension of semantic proximity with α degree is defined in fuzzy relational database which includes Crisp, NULL and fuzzy values, and also inference rules for this dependency are defined, and their completeness is proved. Finally, we will show that fuzzy functional dependency based on this concept is a special case of fuzzy <b>multivalued</b> <b>dependency</b> in fuzzy relational database. Comment: 13 pages, 2 tables, Journa...|$|E
40|$|A {{simple and}} elegant {{set-theoretic}} characterization is given {{as to when}} a given set of functional and multivalued dependencies logically implies a given functional or <b>multivalued</b> <b>dependency.</b> A simple proof of the characterization is given which makes use of a result of Sagiv, Delobel, Parker, and Fagin (1981) ...|$|E
40|$|We {{investigate}} the inference rules {{that can be}} applied to functional and <b>multivalued</b> <b>dependencies</b> that exist in a database relation. Three types of rules are discussed. First, we list the well known rules for functional dependencies. Ther, we {{investigate the}} rules for multi-valued dependencies. It is shown that fcr [...] . ach rule for functional dependencies the same rule or a similar rule holds for nultivalued dependencies. There is, howc. ier, one additional rule for multi-valued dependencies that has no parallel amonq t 5 e rules for functional dependen-cies. Finally, we present rules that invo 1 ve func t iona 1 and mu ltivalued depeidencies together. The main result of the paper is that the rules presented are romplete for the family of function-al and <b>multivalued</b> <b>dependencies...</b>|$|R
40|$|Database design aims {{to find a}} {{database}} schema that permits the efficient processing of common types of queries and updates on future database instances. Full first-order hierarchical decompositions constitute a large class of database constraints that can provide assistance to the database designer in identifying a suitable database schema. We establish finite axiomatisations of full first-order hierarchical decompositions that mimic best database design practice. That is, an inference engine derives all the independent collections of the universal schema during database normalization, and the designer determines during database denormalization which recombinations of these independent collections manifest the final database schema. We also show that well-known correspondences between <b>multivalued</b> <b>dependencies,</b> degenerated <b>multivalued</b> <b>dependencies,</b> and a fragment of Boolean propositional logic do not extend beyond binary full first-order hierarchical decompositions...|$|R
40|$|While {{providing}} syntactic flexibility, XML provides little semantic {{content and}} so the study of integrity constraints in XML {{plays an important role}} in helping to improve the semantic expressiveness of XML. Functional <b>dependencies</b> (FDs) and <b>multivalued</b> <b>dependencies</b> (MVDs) play a fundamental role in relational databases where they provide semantics for the data and at the same time are the foundation for database design. In some previous work, we defined the notion of <b>multivalued</b> <b>dependencies</b> in XML (called XMVDs) and defined a normal form for a restricted class of XMVDs, called hierarchical XMVDs. In this paper we generalise this previous work and define a normal form for arbitrary XMVDs. We then justify our definition by proving that it guarantees the elimination of redundancy in XML documents...|$|R
