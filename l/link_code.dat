20|716|Public
5000|$|... 15: next page: {{this bit}} {{is used to}} {{indicate}} the intention of sending other <b>link</b> <b>code</b> words after the base <b>link</b> <b>code</b> word; ...|$|E
50|$|An ISLI code {{consists}} of three parts: service code, <b>link</b> <b>code</b> and check digit. The service code comprises six decimal digits.The <b>link</b> <b>code</b> comprises decimal digits and its length is defined for each service. The check digit contains one decimal digit calculated from the service code and the <b>link</b> <b>code.</b> It is used for error detection.|$|E
5000|$|Every fast link pulse burst transmits {{a word of}} 16 bits {{known as}} a <b>link</b> <b>code</b> word. The first such word {{is known as a}} base <b>link</b> <b>code</b> word, and its bits are used as follows: ...|$|E
40|$|Dynamic <b>linking</b> {{supports}} flexible <b>code</b> deployment: partially <b>linked</b> <b>code</b> <b>links</b> further <b>code</b> on the fly, as needed; and thus, end-users receive updates automatically. On {{the down}} side, each program run may link {{different versions of}} the same code, possibly causing subtle errors which mystify end-users...|$|R
5000|$|Interactive margin {{area with}} drag & drop <b>linking,</b> <b>coding,</b> merging ...|$|R
5000|$|... a {{flexible}} module {{system that is}} used for <b>linking</b> <b>code</b> and for namespace management, ...|$|R
50|$|The <b>link</b> <b>code</b> {{words are}} also called pages. The base <b>link</b> <b>code</b> word is {{therefore}} called a base page. The next page {{bit of the}} base page is 1 when the device intends to send other pages, {{which can be used}} to communicate other abilities. These additional pages are sent only if both devices have sent base pages with a next page bit set to 1. The additional pages are still encoded as <b>link</b> <b>code</b> words (using 17 clock pulses and up to 16 bit pulses).|$|E
5000|$|... #Caption: How a <b>link</b> <b>code</b> word (a 16 bit word) is {{encoded in}} a fast link pulse burst ...|$|E
5000|$|For a full {{copy of the}} 2014 ACA Code of Ethics, see the <b>link</b> <b>Code</b> of Ethics at: 2014 ACA Code of Ethics ...|$|E
5000|$|Code {{automation}} Templates for Data Vault: Helps automatically {{generate the}} Hub ETL <b>code,</b> <b>Link</b> ETL <b>code</b> and the Satellite ETL code through your existing ETL Platform.|$|R
40|$|The REBUS- 3 burnup code, {{used in the}} ANL RERTR Program, is a {{very general}} code that uses {{diffusion}} theory (DIF 3 D) to obtain the fluxes required for reactor burnup analyses. Diffusion theory works well for most reactors. However, to include the effects of exact geometry and strong absorbers {{that are difficult to}} model using diffusion theory, a Monte Carlo method is required. MCNP, a general-purpose, generalized-geometry, time-dependent, Monte Carlo transport code, is the most widely used Monte Carlo code. This paper presents a linking of the MCNP code and the REBUS burnup code to perform these difficult burnup analyses. The <b>linked</b> <b>code</b> will permit the use of the full capabilities of REBUS which include non-equilibrium and equilibrium burnup analyses. Results of burnup analyses using this new <b>linked</b> <b>code</b> are also presented...|$|R
40|$|This paper {{discusses}} {{the implementation of}} the sparse matrix support with Octave. It address the algorithms that have been used, their implementation, including examples of using sparse matrices in scripts and in dynamically <b>linked</b> <b>code.</b> The octave sparse functions the compared with their equivalent functions with Matlab, and benchmark timings are calculated. 1...|$|R
50|$|The FLP burst {{consists}} of 17 NLP at a 125 µs time interval (with a tolerance of 14 µs). Between {{each pair of}} two consecutive NLP (i.e. at 62.5 µs after first NLP of the pulse pair) an additional positive pulse may be present. The presence of this additional pulse indicates a logical 1, its absence a logical 0. As a result, every FLP contains a data word of 16 bits. This data word is called a <b>link</b> <b>code</b> word (LCW). The bits of the <b>link</b> <b>code</b> word are numbered from 0 to 15, where bit 0 corresponds to the first possible pulse in time and bit 15 to the last.|$|E
5000|$|... 14: acknowledgement: {{the device}} sets this to one to {{indicate}} the correct reception of the base <b>link</b> <b>code</b> word from the other party; this is detected by the reception {{of at least three}} identical base code words; ...|$|E
5000|$|An ISLI code {{shall be}} shown in the format [...] " [...] ISLI XXXXXX-XXXXX-X" [...] The hyphen is used for {{separating}} the three fields (service code, <b>link</b> <b>code</b> and check digit) and the word [...] "ISLI" [...] must be prefixed.|$|E
5000|$|... using a nonce-type {{password}} exchange (see in {{the external}} <b>links</b> for <b>code)</b> ...|$|R
40|$|We use Khovanov {{homology}} {{to define}} families of LDPC quantum error-correcting codes: unknot codes with asymptotical parameters [[3 ^(2 l+ 1) /sqrt(8 {\pi}l); 1; 2 ^l]]; unlink codes with asymptotical parameters [[sqrt(2 / 2 {\pi}l) 6 ^l; 2 ^l; 2 ^l]] and (2,l) -torus <b>link</b> <b>codes</b> with asymptotical parameters [[n; 1;d_n]] where d_n>\sqrt(n) / 1. 62. Comment: 20 page...|$|R
50|$|With {{the advent}} of multi-tier architectures, {{beginning}} with client-server and progressing to service-oriented architecture, a build became much more complex than simply compiling and <b>linking</b> <b>code.</b> Builds included many other types of activities, such as applying database changes, loading static content from a content management system, configuring software components, and deploying {{all or part of}} the build.|$|R
50|$|The base page (the base <b>link</b> <b>code</b> word) is {{sufficient}} for devices toadvertise which ones among the 10BASE-T, 100BASE-TX and 100BASE-T4 modes theysupport. For gigabit Ethernet, two other pages are required. These pages aresent if both devices have sent base pages with a next page bit set to one.|$|E
50|$|The {{acknowledgement}} bit is used {{to signal}} the correct reception of the base code word. This corresponds to having received three identical copies of the base code word. Upon receiving these three identical copies, the device sends a <b>link</b> <b>code</b> word with the acknowledge bit set to one from six times to eight times.|$|E
50|$|These {{mechanisms}} do {{not prevent}} misuse of the weapon, which is restricted by Permissive Action <b>Link</b> <b>code</b> systems, or an accident from physically causing initiation of the explosives or detonators directly from extremely high temperatures, impact forces, or electrical disturbance such as lightning. The risk of accidental direct detonation is significantly reduced by using insensitive high explosives such as TATB, which is extremely unlikely to detonate due to fire or impact or electricity. While TATB may decompose or burn in a fire, {{it is extremely}} unlikely to detonate {{as a result of}} that action.|$|E
5000|$|Air <b>Link's</b> IATA <b>code</b> DR has {{now been}} assumed by the French charter {{operator}} Air Méditerranée ...|$|R
40|$|Planet PDF {{brings you}} the Portable Document Format (PDF) version of Thinking in C++ Volume 1 (2 nd Edition). Planet PDF is the premier PDF-related {{site on the}} web. There is news, software, white papers, interviews, product reviews, Web <b>links,</b> <b>code</b> samples, a forum, and regular {{articles}} {{by many of the}} most prominent and respected PDF experts in the world. Visit our sites for more detail...|$|R
5000|$|Statically <b>linking</b> GPL <b>code</b> {{into the}} program but not {{providing}} the source code of the whole program under GPL.|$|R
40|$|Compilers used in {{industry}} are mainly based on a separate compilation framework. However, {{the knowledge of the}} whole program improves efficiency of object-oriented language compilers, therefore more efficient implementation techniques are based on a global compilation framework. In this paper, we propose a compromise by including three global compilation techniques (type analysis, coloring and binary tree dispatching) in a separate compilation framework. Files are independently compiled into standard binary files with unresolved symbols. The program is build by linking object files: files are gathered and analyzed, some <b>link</b> <b>code</b> is generated then symbols are resolved. 1...|$|E
40|$|Aggressive {{optimization}} {{of programs}} often relies on analysis and transformation that cuts across the natural abstraction {{boundaries of the}} source programming language, such as procedures in procedural languages, or classes in class-based object-oriented languages like Java. Unfortunately, execution environments for languages such as Java dynamically <b>link</b> <b>code</b> into the application as it executes, precluding cross-cutting analyses and optimizations that are too expensive to apply on-line. Fortunately, persistent object systems usually treat the code base {{as an integral part}} of the persistent store. This code base approximates the notion of "wholeprogram " that has been exploited in other optimization frameworks. This paper describes an analysis and optimization framework for Java that operates against the persistent code base, and couples the results of analysis and optimization with the run-time system to ensure continued correctness of the resulting code. The framework p [...] ...|$|E
40|$|Many {{software}} maintenance activities {{need to find}} code units (functions, files, etc.) that implement a certain concern (features, bugs, etc.). To facilitate such activities, many approaches have been proposed to automatically <b>link</b> <b>code</b> units with concerns described in natural languages, which are termed as concern localization and often employ Information Retrieval (IR) techniques. There {{has not been a}} study that evaluates and compares the effectiveness of latest IR techniques on a large dataset. This study fills this gap by investigating ten IR techniques, some of which are new and have not been used for concern localization, on a Linux kernel dataset. The Linux kernel dataset contains more than 1, 500 concerns that are linked to over 85, 000 C functions. We have evaluated the effectiveness of the ten techniques on recovering the links between the concerns and the implementing functions and ranked the IR techniques based on their precisions on concern localization...|$|E
5000|$|A similar IME called 8 Steps Unihan was {{developed}} by 8 Steps Unihan company in Melbourne, Australia. [...] The 8StepsA font coupled with Microsoft windows 10 SimSunExtB font are able to display all the characters in Unihan 10.0. which includes the extension F character set.The glyphs that are repeated have been linked together and {{only one of the}} <b>linked</b> <b>code</b> is used by the IME so that all the displayable characters are unique.|$|R
5000|$|Vanderbilt Ultra-Soft Pseudopotential Site : Website of David Vanderbilt with <b>links</b> to <b>codes</b> that {{implement}} ultrasoft pseudopotentials {{and libraries}} of generated pseudopotentials.|$|R
40|$|SRGULL, a scramjet-cycle-analysis {{computer}} code, engineer's {{software tool}} capable of nose-to-tail simulation of hydrogen-fueled, scramjet engine integrated with air-frame. Simulated flow that of real gas with equilibrium thermodynamic properties. Program facilities initial estimates of performance of scramjet cycle by <b>linking</b> <b>code</b> for two-dimensional forebody, inlet, and nozzle with code for one-dimensional combustor. Five computer codes (SCRAM, SEAGUL, INLET, Program HUD, and GASH) integrated in program to provide capability {{for analysis of}} changing flow conditions. Written in FORTRAN 77...|$|R
40|$|Abstract—Many {{software}} maintenance activities {{need to find}} code units (functions, files, etc.) that implement a certain con-cern (features, bugs, etc.). To facilitate such activities, many approaches have been proposed to automatically <b>link</b> <b>code</b> units with concerns described in natural languages, which are termed as concern localization and often employ Information Retrieval (IR) techniques. There {{has not been a}} study that evaluates and compares the effectiveness of latest IR techniques on a large dataset. This study fills this gap by investigating ten IR techniques, some of which are new and have not been used for concern localization, on a Linux kernel dataset. The Linux kernel dataset contains more than 1, 500 concerns that are linked to over 85, 000 C functions. We have evaluated the effectiveness of the ten techniques on recovering the links between the concerns and the implementing functions and ranked the IR techniques based on their precisions on concern localization. Keywords-concern localization; information retrieval; Linux kernel; mean average precision; I...|$|E
40|$|Abstract. Aggressive {{optimization}} {{of programs}} often relies on analysis and trans-formation that cuts across the natural abstraction {{boundaries of the}} source pro-gramming language, such as procedures in procedural languages, or classes in class-based object-oriented languages like Java. Unfortunately, execution envi-ronments for languages such as Java dynamically <b>link</b> <b>code</b> into the application as it executes, precluding cross-cutting analyses and optimizations that are too expensive to apply on-line. Fortunately, persistent object systems usually treat the code base {{as an integral part}} of the persistent store. This code base approximates the notion of “whole-program ” that has been exploited in other optimization frameworks. This paper describes an analysis and optimization framework for Java that operates against the persistent code base, and couples the results of analysis and optimization with the run-time system to ensure continued correctness of the resulting code. The framework performs extensive analysis over the code in the store, supporting optimizations that cut across class boundaries in ways that are not safe to perform off-line on stand-alone Java classes. ...|$|E
40|$|Abstract—This paper {{considers}} {{the problem of}} jointly decoding binary phase shift keyed (BPSK) messages from a single distant transmitter to a cooperative receive cluster connected by a local area network (LAN). A distributed reception technique is pro-posed based on the exchange of coarsely-quantized observations among {{some or all of}} the nodes in the receive cluster. By taking into account the differences in channel quality across the receive cluster, the quantized information from other nodes in the receive cluster can be appropriately combined with locally unquantized information to form aggregate posterior likelihoods for the received bits. The LAN throughput requirements of this technique are derived as a function of the number of participating nodes in the receive cluster, the forward <b>link</b> <b>code</b> rate, and the quantization parameters. Using information theoretic analysis and simulations of an LDPC coded system in fading channels, numerical results show that the performance penalty (in terms of outage probability and block error rate with respect to ideal receive beamforming) due to coarse quantization is small in the low SNR regimes enabled by cooperative distributed reception. Index Terms—Distributed reception, receive beamforming, quantization, likelihood combining I...|$|E
5000|$|GNU AGPLv3 and GPLv3 {{licenses}} each include clauses (in section 13 of each license) {{that together}} achieve {{a form of}} mutual compatibility for the two licenses. These clauses explicitly allow the [...] "" [...] of a work formed by <b>linking</b> <b>code</b> licensed under the one license against code licensed under the other license, despite the licenses otherwise not allowing relicensing {{under the terms of}} each other. In this way, the copyleft of each license is relaxed to allow distributing such combinations.|$|R
5000|$|... 7.1, June 2012. Includes SCOOP {{processor}} garbage collection. Multiple {{improvements to}} Eiffel Information System <b>linking</b> application <b>code</b> to appropriate external {{resources such as}} requirements documents.|$|R
5000|$|When Randomized mmap (...) base is enabled, PaX {{randomly}} {{shifts the}} mmap (...) base, affecting the positioning of all libraries and other non-specific mmap (...) calls. This causes all dynamically <b>linked</b> <b>code,</b> i.e. shared objects, to be mapped at a different, randomly selected offset every time. Attackers requiring a {{function in a}} certain library must guess where that library is loaded in virtual memory space to call it. This makes return-to-libc attacks difficult; although shellcode injections can still look up the address of any function in the global offset table.|$|R
