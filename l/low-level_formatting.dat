14|42|Public
2500|$|The {{process of}} {{initializing}} these logical blocks {{on the physical}} disk platters is called <b>low-level</b> <b>formatting,</b> which is usually performed at the factory and is not normally changed in the field. High-level formatting writes data structures used by the operating system to organize data files on the disk. This includes [...] writing partition and file system structures into selected logical blocks. For example, some of the disk space {{will be used to}} hold a directory of disk file names and a list of logical blocks associated with a particular file.|$|E
5000|$|... #Caption: <b>Low-level</b> <b>formatting</b> {{software}} from 1987 to find highest performance interleave choice for 10 MB IBM PC XT {{hard disk drive}} ...|$|E
50|$|Consider a {{standard}} 1.44 MB floppy disk. <b>Low-level</b> <b>formatting</b> of the floppy disk, normally writes 18 sectors of 512 bytes {{to each of}} 160 tracks (80 on each side) of the floppy disk, providing 1,474,560 bytes of storage on the disk.|$|E
5000|$|... #Caption: <b>Low-level</b> <b>format</b> of a 10-megabyte IBM PC XT {{hard drive}} ...|$|R
5000|$|... #Caption: <b>Low-level</b> <b>format</b> utility {{performing}} interleave speed {{tests on}} a 10-megabyte IBM PC XT hard drive.|$|R
50|$|The <b>low-level</b> <b>format</b> of floppy disks (and early hard disks) is {{performed}} by the disk drive's controller.|$|R
50|$|Depending {{upon the}} system, <b>low-level</b> <b>formatting</b> was {{generally}} done by an operating system utility. IBM compatible PCs used the BIOS, which is invoked using the MS-DOS debug program, to transfer control to a routine hidden at different addresses in different BIOSes.|$|E
50|$|Drive Setup is {{the default}} disk {{formatting}} tool in Mac OS 7.5.2-9.2.2. It supports such features as partitioning, and <b>low-level</b> <b>formatting.</b> It could format hard drives in HFS, HFS Plus file systems, and supported formatting drives {{for use with}} Linux and A/UX.|$|E
50|$|Today, an end-user, in most cases, {{should never}} perform a <b>low-level</b> <b>formatting</b> of an IDE or ATA hard drive, {{and in fact}} it is often not {{possible}} to do so on modern hard drives because the formatting is done on a servowriter before the disk is assembled into a drive in the factory.|$|E
50|$|Different <b>low-level</b> <b>formats</b> {{can be used}} on {{the same}} media; for example, large records can be used to cut down on inter-record gap size.|$|R
40|$|Abstract. Polytypic {{functions}} have mainly {{been studied}} {{in the context of}} functional programming languages. In that setting, applications of polytypism include elegant treatments of polymorphic equality, prettyprinting, and the encoding and decoding of high-level datatypes to and from <b>low-level</b> binary <b>formats.</b> In this paper, we discuss how polytypism supports some aspects of theorem proving: automated termination proofs of recursive functions, incorporation of the results of metalanguage evaluation, and equivalence-preserving translation to a <b>low-level</b> <b>format</b> suitable for propositional methods. The approach is based on an interpretation of higher order logic types as terms, and easily deals with mutual and nested recursive types. ...|$|R
50|$|Starting in {{the late}} 1980s, driven by the volume of IBM {{compatible}} PCs, HDDs became routinely available pre-formatted with a compatible <b>low-level</b> <b>format.</b> At the same time, the industry moved from historical (dumb) bit serial interfaces to modern (intelligent) bit serial interfaces and word serial interfaces wherein the low level format was performed at the factory.|$|R
5000|$|In {{the case}} of floppy disks, both high- and <b>low-level</b> <b>formatting</b> are customarily {{performed}} in one pass by the disk formatting software. 8-inch floppies typically came low-level formatted and were filled with a format filler value of [...] Since the 1990s, most 5.25-inch and 3.5-inch floppies have been shipped pre-formatted from the factory as DOS FAT12 floppies.|$|E
50|$|Hard {{disk drives}} {{prior to the}} 1990s {{typically}} had a separate disk controller that defined how data was encoded on the media. With the media, the drive and/or the controller possibly procured from separate vendors, users were often able to perform <b>low-level</b> <b>formatting.</b> Separate procurement also had the potential of incompatibility between the separate components such that the subsystem would not reliably store data.|$|E
5000|$|<b>Low-level</b> <b>formatting</b> (i.e., {{closest to}} the hardware) marks the {{surfaces}} of the disks with markers indicating {{the start of a}} recording block (typically today called sector markers) and other information like block CRC to be used later, in normal operations, by the disk controller to read or write data. This is intended to be the permanent foundation of the disk, and is often completed at the factory.|$|E
50|$|The present {{ambiguity}} in the term <b>low-level</b> <b>format</b> {{seems to be}} due to both inconsistent documentation on web sites and the belief by many users that any process below a high-level (file system) format must be called a <b>low-level</b> <b>format.</b> Since much of the low level formatting process can today only be performed at the factory, various drive manufacturers describe reinitialization software as LLF utilities on their web sites. Since users generally have no way to determine the difference between a complete LLF and reinitialization (they simply observe running the software results in a hard disk that must be high-level formatted), both the misinformed user and mixed signals from various drive manufacturers have perpetuated this error. Note: Whatever possible misuse of such terms may exist (search hard drive manufacturers' web sites for all these terms), many sites do make such reinitialization utilities available (possibly as bootable floppy diskette or CD image files), to both overwrite every byte and check for damaged sectors on the hard disk.|$|R
50|$|A server {{could support}} {{up to four}} network cards, and these could be a mixture of {{technologies}} such as ARCNET, Token Ring and Ethernet. The operating system was provided {{as a set of}} compiled object modules that required configuration and linking. Any change to the operating system required a re-linking of the kernel. Installation also required the use of a proprietary <b>low-level</b> <b>format</b> program for MFM hard drives called COMPSURF.|$|R
50|$|Another {{method for}} SCSI disks {{may be to}} use the sg_format command to issue a <b>low-level</b> SCSI <b>Format</b> Unit Command.|$|R
5000|$|The {{floppy disk}} drives, {{known as the}} RX50, {{accepted}} proprietary 400 kB single-sided, quad-density 5Â¼-inch diskettes. Initial versions of the operating systems on the Rainbow did not allow for <b>low-level</b> <b>formatting,</b> requiring users to purchase RX50 media from Digital Equipment Corporation. The high cost of media ($5 per disk) led to accusations of vendor [...] "lock-in" [...] against Digital. However, later versions of MS-DOS and CP/M allowed formatting of diskettes.|$|E
50|$|Degaussing often renders hard disks inoperable, as it erases <b>low-level</b> <b>formatting</b> {{that is only}} done at {{the factory}} during manufacturing. In some cases, it is {{possible}} to return the drive to a functional state by having it serviced at the manufacturer. However, some modern degaussers use such a strong magnetic pulse that the motor that spins the platters may be destroyed in the degaussing process, and servicing may not be cost-effective. Degaussed computer tape such as DLT can generally be reformatted and reused with standard consumer hardware.|$|E
50|$|In practice, the USB {{drive is}} a {{standard}} mass storage device, so it will also work on any modern operating system which can use such devices, including Windows XP, Vista and 7, Mac OS X and Linux. The PC card drive, similarly, {{is a standard}} removable ATA device, so it also will typically function without any problems on modern operating systems including Windows XP. The problem on the latest operating systems is unavailability or incompatibility of the software used to operate the proprietary features of the drive, such as <b>low-level</b> <b>formatting</b> and the software write protection.|$|E
50|$|The floppy {{controller}} chip used in IBM PCs and compatibles was the NEC 765A. As technology progressed, {{descendants of}} these machines used what were essentially extensions to this chip. Many other computers, particularly ones from Commodore and early ones from Apple, write disks in formats which cannot be encoded or decoded by the 765A, {{even though the}} drive mechanisms {{are more or less}} identical to ones used on PCs. The Catweasel was therefore created to emulate the hardware necessary to produce these other <b>low-level</b> <b>formats.</b>|$|R
2500|$|Windows Phone 8 devices use SD cards {{designed}} for access {{only by the}} phone manufacturer or mobile provider. An SD card inserted into the phone underneath the battery compartment becomes locked [...] "to the phone with an automatically generated key" [...] so that [...] "the SD card cannot be read by another phone, device, or PC". Symbian devices, however, {{are some of the}} few that can perform the necessary <b>low-level</b> <b>format</b> operations on locked SD cards. It is therefore possible to use a device such as the Nokia N8 to reformat the card for subsequent use in other devices.|$|R
50|$|WebAssembly or wasm is a <b>low-level</b> {{bytecode}} <b>format</b> for in-browser client-side scripting, {{evolved from}} JavaScript. Its initial {{aim is to}} support compilation from C and C++, though other source languages such as Rust are also supported.|$|R
50|$|User instigated <b>low-level</b> <b>formatting</b> (LLF) of {{hard disk}} drives was common for {{minicomputer}} and personal computer systems until the 1990s. IBM and other mainframe system vendors typically supplied their hard disk drives (or {{media in the}} case of removable media HDDs) with a low-level format. Typically this involved subdividing each track on the disk into one or more blocks which would contain the user data and associated control information. Different computers used different block sizes and IBM notably used variable block sizes but the popularity of the IBM PC caused the industry to adopt a standard of 512 user data bytes per block by the middle 1980s.|$|E
50|$|The {{process of}} {{initializing}} these logical blocks {{on the physical}} disk platters is called <b>low-level</b> <b>formatting,</b> which is usually performed at the factory and is not normally changed in the field. As a next step in preparing an HDD for use, high-level formatting writes partition and file system structures into selected logical blocks to make the remaining logical blocks available to the host's operating system and its applications. The file system uses some of the disk space to structure the HDD and organize files, recording their file names and the sequence of disk areas that represent the file. Examples of partition mapping scheme include Master boot record (MBR) and GUID Partition Table (GPT). Examples of data structures stored on disk to retrieve files include the File Allocation Table (FAT) in the DOS file system and inodes in many UNIX file systems, {{as well as other}} operating system data structures (also known as metadata). As a consequence, not all the space on an HDD is available for user files, but this system overhead is usually negligible.|$|E
50|$|The servo {{patterns}} are normally never overwritten by the device {{for any reason}} and are used to precisely position the read/write heads over data tracks on the media, to compensate for sudden jarring device movements, thermal expansion, or changes in orientation. Degaussing indiscriminately removes not only the stored data but also the servo control data, and without the servo data the device is {{no longer able to}} determine where data is to be read or written on the magnetic medium. The medium must be <b>low-level</b> <b>formatted</b> to become usable again; with modern hard drives, this is generally not possible without manufacturer-specific and often model-specific service equipment.|$|R
50|$|Iomega Zip drives were {{prone to}} {{developing}} misaligned heads. Dust inside the Zip disks or dirty heads caused by oxide build-up could misalign the heads, but in newer devices {{it was due}} to poor quality control and manufacturing defects in the drive itself. Magnetic fields could also cause the drive heads to become misaligned, as the drives were not internally shielded from external magnetic fields. The heads caused the data on the cartridge to become misaligned, rendering it unreadable. The Zip cartridges also wore out, grew defects, or otherwise lost all four 'Z tracks'. If all four redundant 'Z tracks' were lost, the cartridge was unusable, since retail drives are unable to <b>low-level</b> <b>format</b> the disks.|$|R
5000|$|Super{{formatting}} is {{the process}} of formatting a floppy disk at a capacity that the disk is not designed for. It can ruin a floppy disk, but it is used in some floppy-based Linux distros to increase the room for applications and utilities. muLinux is a notable example of this technique. Another common use (which is not as popular nowadays) was to format low-density 3Â½-inch or 5Â¼-inch floppies as high-density, {{or in the case of}} 3.5-inch disks, even extra-high density (HD-36). [...] "Notched" [...] disks will usually turn up a lot of bad sectors, especially if the formatted capacity is considerably (1.5 to 3) times higher than intended. Superformatting is usually done with a <b>low-level</b> <b>format</b> (such as [...] "FORMAT /U" [...] in DOS and [...] "fdformat" [...] in Linux.) ...|$|R
30|$|Controller layer. Reliably {{destroying}} keys is challenging, as side-channel attacks {{based on}} semiconductor memory data remnants (Halderman et al. 2009) may allow an attacker {{to recover the}} key or key-related information. Swanson et al. (2010) proposed scramble and finally erase (SAFE), which combines encryption and erasure techniques to provide almost instant secure deletion with verifiability. SAFE relies on the assumptions that data in the SSDs are stored encrypted and the SSDs implement best practices of key management (e.g., the keys should never leave the controller). It works as follows: Upon receiving a sanitize command, it erases the controllerâs key memory, such that the driver {{is not able to}} encrypt/decrypt the data. It then erases every block on the device, and writes all the pages with a known pattern, and erases them again. Finally, it reinitializes the device and performs a <b>low-level</b> <b>format</b> operation on the drive, and provides a new key to the controller.|$|R
40|$|Natural {{languages}} {{have been}} subject of studies for centuries and are hot topic even today. The demand for computer systems able to communicate directly in natural language places new challenges. Computational resources like grammars and lexicons and efficient processing tools are needed. Grammars are described as computer programs in declarative domain specific languages. Just like any other programming language they require mature compilers and efficient runtime systems. The topic of this thesis is the runtime system for the Grammatical Framework (GF) language. The {{first part of the}} thesis describes the semantics of the Portable Grammar Format (PGF). This is a <b>low-level</b> <b>format</b> which for GF plays the same role as the JVM bytecode for Java. The representation is designed to be as simple as possible to make it easy to write interpreters for it. The second part is for the incremetal parsing algorithm in PGF. The parser performance was always a bottle neck in GF until now. The new parser is of orders of magnitude faster than any of the previous implementations. The last contribution of the thesis is the developmen...|$|R
5000|$|Purdue University {{issued a}} {{bulletin}} about the trojan on March 8, 1990. The trojan came in an altered utility file called CORETEST.COM, which {{was intended to}} test performance of hard drives. The trojan affected IBM platform computers running MS-DOS or PC DOS. The trojan alters the master boot record (partition sector) and, at every reboot, it installs one of twelve [...] "tricks" [...] that causes issues with hardware or operation of the computer. The trick vanishes when the power is cut off, and any of the twelve tricks may appear or reappear on the next reboot. In addition, on each boot the trojan uses a random number generator to determine whether to do a <b>low-level</b> <b>format</b> of the active copy of the boot sector and the first copy of the FAT; there is a 1/4096th chance of this happening. If the format does not happen, the trojan randomly changes one random word {{in any of the}} first sixteen sectors of the FAT, leading to a gradual corruption of the file system.|$|R
50|$|ProDOS has no kernel {{support for}} other file systems. If necessary, a {{conversion}} utility {{on the main}} system disk is used to transfer files individually between ProDOS and older Apple DOS 3.3 disks. Because they use a different <b>low-level</b> disk <b>format</b> than DOS 3.3 and ProDOS, transferring data from DOS 3.2 disks to ProDOS is a two-step process using a DOS 3.3 disk as an intermediary (utilizing the DOS 3.3 utility MUFFIN or similar).|$|R
40|$|This paper {{presents}} {{techniques to}} integrate worst-case execution time (WCET) data into a compiler. Currently, a tight integration of WCET into compilers is strongly desired, but only some ad-hoc approaches were reported currently. Previous work mainly used self-written WCET estimators with limited functionality and preciseness during compilation. A very tight integration {{of a high}} quality WCET analyzer into a compiler was not yet achieved. This work {{is the first to}} present such a tight coupling between a compiler and the WCET analyzer aiT. This is done by automatically translating the assembly-like contents of the compilerâs <b>low-level</b> <b>format</b> (LLIR) to aiTâs exchange format CRL 2. Additionally, the results produced by aiT are automatically collected and re-imported into the compiler infrastructure. The work described in this paper is smoothly integrated into a C compiler for the Infineon TriCore processor. It opens up new possibilities for the design of WCET-aware optimizations in the future. The concepts for extending the compiler structure are kept very general so that they are not limited to WCET information. Rather, it is possible to use our concepts also for multi-objective optimization of e. g. best-case execution time (BCET) or energy dissipation. 1...|$|R
5000|$|ProDOS {{retains the}} 16-sector <b>low-level</b> <b>format</b> of DOS 3.3 for 5.25 inch disks, but {{introduces}} a new high-level format that {{is suitable for}} devices of up to 32 MB; this makes it suitable for hard disks from that era and 3.5-inch floppies. All the Apple computers from the II Plus onward can run both DOS 3.3 and ProDOS, the Plus requiring a [...] "Language Card" [...] memory expansion to use ProDOS; the e and later models have built-in Language Card hardware, and so can run ProDOS straight. ProDOS includes software to copy files from Apple DOS disks. However, many people who had {{no need for the}} improvements of ProDOS (and who did not like its much higher memory footprint) continued using Apple DOS or one of its clones long after 1983. The Apple convention of storing a bootable OS on every single floppy disk means that commercial software can be used no matter what OS the user owns. A program called DOS.MASTER enables users to have multiple virtual DOS 3.3 partitions on a larger ProDOS volume, which allows the use of many floppy-based DOS programs with a hard disk.|$|R
50|$|These drive models use a single-density, single-side floppy {{data storage}} format {{similar to that}} used by the Commodore 1540 & Commodore 1541 drives, but with a {{slightly}} different data marker indicating which model originally formatted the disk. The <b>low-level</b> disk <b>format</b> is similar enough to allow reading between models, but different enough that one series of drive models cannot reliably write to disks formatted with one of the other model series. A difference of one extra 'header' byte is what causes this write incompatibility.|$|R
