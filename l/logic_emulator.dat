6|23|Public
40|$|In {{this paper}} we {{describe}} {{a method for}} the automatic construction of a testbench, able to dynamically communicate a standard VHDL simulator with a <b>logic</b> <b>emulator</b> by means of text files. The proposed approach significantly reduces turn-around times in an emulation based rapid system prototyping environment. In this way, time consuming logic synthesis and technology mapping steps are moved, in the design cycle, after a previous functional verification. 1...|$|E
40|$|FPGA-based <b>logic</b> <b>emulator</b> {{with large}} gate {{capacity}} generally comprises {{a large number}} of FPGAs. However, gate utilization of FPGAs and speed of emulation are limited by the number of signal pins among FPGAs and the interconnection architecture of the <b>logic</b> <b>emulator.</b> The time-multiplexing of interconnection wires is required for multi-FPGA system incorporating several stateof-the-art FPGAs. This paper proposes a circuit partitioning algorithm called SCATOMi(SCheduling driven Algorithm for TOMi) for multi-FPGA system incorporating four to eight FPGAs where FPGAs are interconnected through TOMi(Time-multiplexed, Off-chip, Multicasting interconnection). SCATOMi improves the performance of TOMi architecture by limiting the number of inter-FPGA signal transfers on the critical path and considering the scheduling of inter-FPGA signal transfers. The performance of the partitioning result of SCATOMi is 5. 5 times faster than traditional partitioning algorithms. Experiments on architecture comparison show that, by adopting the proposed TOMi interconnection architecture along with SCATOMi, the pin count is reduced to 15. 2 %- 81. 3 % while the critical path delay is reduced to 46. 1 %- 67. 6 % compared to traditional architectures including mesh, crossbar and VirtualWire architecture. ...|$|E
40|$|While ASIC {{devices of}} a decade ago {{primarily}} contained synchronous circuitry triggered with a single clock, many contemporary architectures require multiple clocks that operate asynchronously to each other. This multi-clock domain behavior presents significant functional verification challenges for large parallel verification systems such as distributed parallel simulators and logic emulators. In particular, multiple asynchronous design clocks {{make it difficult to}} verify that design hold times are met during logic evaluation and causality along reconvergent fanout paths is preserved during signal communication. In this paper, we describe scheduling and synchronization techniques to maintain modeling fidelity for designs with multiple asynchronous clock domains that are mapped to parallel verification systems. It is shown that when our approach is applied to an FPGA-based <b>logic</b> <b>emulator,</b> evaluation fidelity is maintaine...|$|E
5000|$|Design Validation {{tests the}} {{computer}} {{as a whole}} {{to see if it}} works in all situations and all timings. Once the design validation process starts, the design at the logic level are tested using <b>logic</b> <b>emulators.</b> However, this is usually too slow to run realistic test. So, after making corrections based on the first test, prototypes are constructed using Field-Programmable Gate-Arrays (FPGAs). Most hobby projects stop at this stage. The final step is to test prototype integrated circuits. Integrated circuits may require several redesigns to fix problems.|$|R
40|$|This thesis {{describes}} VEGA, a special-purpose logic emulation {{processor and}} associated software, designed to achieve maximum usable logic block density per unit silicon area and fast mapping. Logic blocks {{are represented by}} instructions stored in on-chip memories. A circuit is emulated by sequentially executing the instructions that describe it. Three independent execution units and a two-level memory hierarchy offer high emulation performance. FPGA-based <b>logic</b> <b>emulators</b> are capacity-limited by the low gate density on FPGAs and typically achieve no more than 25 % logic block utilization due to I/O restrictions. Using similar technology, VEGA achieves a fourfold improvement in raw density as compared to a Xilinx XC 4010 FPGA. Furthermore, since VEGA achieves 89 % logic block utilization on average, the effective density [...] ...|$|R
50|$|The ICE4000 {{connects to}} the engineer's PC via a USB 2.0 interface. PIC devices under debug with the ICE4000 ran at full speed, and the {{emulator}} supported unlimited breakpoints, and complex break/trigger <b>logic.</b> The <b>emulator</b> supported multiple external inputs and external outputs to sync with other instruments.|$|R
40|$|With {{the advent}} of System-On-a-Chip (SOC) design, many Application Specific Integrated Circuits (ASICs) now require {{multiple}} design clocks that operate asynchronously to each other. This design characteristic presents a significant challenge when these ASIC designs are mapped to hardware based verification systems such as parallel cycle-accurate simulators and logic emulators. In general, hardware based verification systems require all computation and communication to be synchronized to a global system clock. As a result, the undefined relationship between design asynchronous clocks can {{make it difficult to}} determine hold times for synchronous storage elements and causality relationships along reconvergent communication paths. ^ This research presents new scheduling and synchronization techniques to support accurate mapping of designs with multiple asynchronous clocks to a hardware based <b>logic</b> <b>emulator.</b> The multi-domain scheduling problem can be divided into problems of scheduling multi-domain data paths, multi-domain clock paths, and multi-domain memories. Our approach is based upon a crucial observation that multi-domain functional requirements can be reduced to single domain constraints that need to be satisfied simultaneously. We have developed a new set of algorithms to statically schedule multi-domain circuits such that functional properties (timing closure, setup, and hold-time) are satisfied in each of the constituent domains. Through analysis, we show that our approach is scalable to an unlimited number of domains and supports increasingly large design sizes. To prove the effectiveness of our approach, we have integrated our algorithms into the compilation system for a commercial multi-FPGA logic emulation system. For three industrial designs mapped to a <b>logic</b> <b>emulator</b> using this software environment, modeling fidelity is improved and performance is enhanced versus previous manual mapping or hard-wired approaches. A theoretical analysis based on Rent 2 ̆ 7 s Rule validates the scalability of our approach as device sizes increase. ...|$|E
40|$|The Virtual Wires {{system is}} an FPGA-based <b>logic</b> <b>emulator</b> which allows a user to {{thoroughly}} test a design before fabrication. It runs at hardware speeds thus making it preferable to a software simulator which is relatively slow. The problem, however, {{is that one}} can only use the inputs and outputs of this system to determine its correct functionality. This makes the debugging process extremely difficult. I have developed the InnerView Hardware Debugger which is a logic analysis tool for the Virtual Wires Emulator. Through the readback capability of the Xilinx FPGAs, I extract {{the state of the}} emulation and send it back to the host. The ability to know {{the current state of the}} internal logic of each FPGA allows a user to debug his/her design with much greater facility than in the case where only the I/O is available. In addition, InnerView provides flexible triggering capabilities, as well as the ability to run the design for a given number of clock cycles and then return the state infor [...] ...|$|E
40|$|Abstract—With {{the advent}} of {{system-on-a-chip}} design, many application specific integrated circuits (ASICs) now require multiple design clocks that operate asynchronously to each other. This design characteristic presents a significant challenge when these ASIC designs are mapped to parallel verification hardware such as parallel cycle-based simulators and logic emulators. In general, these systems require all computation and communication to be synchronized to a global system clock. As a result, the undefined relationship between design clocks can {{make it difficult to}} determine hold times for synchronous storage elements and causality relationships along reconvergent communication paths. This paper presents new scheduling and synchronization techniques to support accurate mapping of designs with multiple asynchronous clocks to parallel verification hardware. Through analysis, it is shown that this approach is scalable to an unlimited number of domains and supports increasingly large design sizes. To prove the effectiveness of the authors ’ approach, developed algorithms have been integrated into the compilation system for a commercial multi-FPGA logic emulation system. For three designs mapped to a <b>logic</b> <b>emulator</b> using this software environment, modeling fidelity is maintained and performance is enhanced versus previous manual mapping approaches. A theoretical analysis based on Rent’s rule validates the scalability of the approach as device sizes increase. Index Terms—Asynchronous circuits, FPGA-based emulation, functional verification, static scheduling...|$|E
40|$|Over {{the past}} decade both the {{quantity}} and complexity of available on-chip memory resources have increased dramatically. In order to ensure accurate ASIC behavior, both logic functions and memory resources must be successfully verified before fabrication. Often, the functional verification of contemporary ASIC memory {{is complicated by the}} presence of multiple design clocks that operate asynchronously to each other. The presence of multiple clock domains presents significant challenges for large parallel verification systems such as parallel simulators and <b>logic</b> <b>emulators</b> that model both design logic and memory. Specifically, multiple asynchronous design clocks make it difficult to verify that design hold times are met during memory model execution and causality along memory data/control paths is preserved during signal communication. In this paper, we describe new scheduling heuristics for memory-based designs with multiple asynchronous clock domains tha...|$|R
40|$|We {{describe}} a complete FPGA-based emulation software system using Virtual Wires technology and {{present the results}} of emulating an 18 K-gate ASIC implementation of a Sparc microprocessor. Virtual wires overcomes the pincount limitation that formerly restricted the efficiency of FPGA-based <b>logic</b> <b>emulators.</b> The MIT Virtual Wires softwire compiler accepts a netlist {{description of the system}} to be emulated and produces programming information for the FPGA hardware, an inexpensive ($ 3000) board designed for Virtual Wires in-circuit emulation. The compiler also provides an interface to standard logic simulator tools for hardware accelerated simulation. We discuss innovative features of the compiler system and knowledge gained during its construction. A comparison is made of different implementations of the on-chip Virtual Wires circuitry synthesized by the compiler. Several enhancements to the original Virtual Wires concept are presented that will further emulation speed and FPGA utilization...|$|R
40|$|Logic {{emulation}} enables {{designers to}} functionally verify complex integrated circuits prior to chip fabrication. However, traditional FPGA-based <b>logic</b> <b>emulators</b> have poor inter-chip communication bandwidth, commonly limiting gate utilization {{to less than}} 20 percent. Global routing contention mandates the use of expensive crossbar and PC-board technology {{in a system of}} otherwise low-cost, commodity parts. Even with crossbar technology, current emulators only use a fraction of potential communication bandwidth because they dedicate each FPGA pin (physical wire) to a single emulated signal (logical wire). Virtual Wires overcome pin limitations by intelligently multiplexing each physical wire among multiple logical wires and pipelining these connections at the maximum clocking frequency of the FPGA. The resulting increase in bandwidth allows effective use of low dimension, direct interconnect. The size of the FPGA array can be decreased as well, resulting in low cost logic emulation...|$|R
40|$|FPGA-based ASIC {{development}} {{systems have}} become important tools in contemporary ASIC design. Existing systems exhibit low per-FPGA gate utilization (10 to 20 percent) due to limited inter-chip communication. Attempts at overcoming this limitation {{through the use}} of high dimensional interconnection topologies have met with limited success. This paper focuses on the prototype hardware and software interfaces that have been developed for an FPGA-based ASIC emulation system based on a new technique for overcoming inter-chip communication limitations. This technique, referred to as virtual wires, intelligently multiplexes each physical FPGA wire among a number of logical wires. The Virtual Wires Emulation System exhibits high FPGA gate utilization while achieving system speeds comparable to existing <b>logic</b> <b>emulators.</b> A two-dimensional mesh interconnection topology of FPGAs is used to eliminate the cost of signal switching elements and to facilitate scalability. A system capable of emulating [...] ...|$|R
40|$|A {{complete}} {{software system}} using Virtual Wires technology for FPGA-based logic emulation has been constructed. This {{system has been}} successfully used to emulate an 18 K-gate ASIC implementation of a Sparc microprocessor. The use of Virtual Wires overcomes the pincount limitation that formerly restricted the efficiency of FPGA-based <b>logic</b> <b>emulators.</b> The Virtual Wires emulation compiler accepts a netlist description of the circuit to be emulated and compiles programming information for the FPGA hardware. The compiler also provides support for an interface to standard logic simulator tools for hardware accelerated simulation. Innovative features of the compiler system and knowledge gained during its construction are presented. A comparison is made of different implementations of the on-chip Virtual Wires circuitry synthesized by the compiler. A user's guide to the compiler and its supporting tools is provided. Future improvements to further enhance emulation speed and FPGA utilization are [...] ...|$|R
40|$|Existing FPGA-based <b>logic</b> <b>emulators</b> {{are limited}} by inter-chip {{communication}} bandwidth, resulting in low gate utilization (10 to 20 percent of usable gates). This resource imbalance increases the number of chips needed to emulate a particular logic design and thereby decreases emulation speed, since signals must cross more chip boundaries. Current emulators only use a fraction of potential communication bandwidth because they dedicate each FPGA pin (physical wire) to a single emulated signal (logical wire). These logical wires are not active simultaneously and are only switched at emulation clocking speeds. Virtual Wires overcome pin limitations by intelligently multiplexing each physical wire among multiple logical wires and pipelining these connections at the maximum clocking frequency of the FPGA. A virtual wire connects a logical output of one FPGA to a logical input on another FPGA. Virtual Wires relax the absolute limits imposed on gate utilization. The resulting increase in band [...] ...|$|R
40|$|There is {{currently}} {{great interest in}} using systems of FPGAs for <b>logic</b> <b>emulators,</b> custom computing devices, and software accelerators. An important step in making these technologies more generally useful is to develop completely automatic mapping tools from high-level specification to FPGA programming files. In this paper we examine one step in this automatic mapping process, the selection of physical FPGA pins to use for routing inter-FPGA signals. We present an algorithm that greatly increases mapping speed while also improving mapping quality. Introduction In the time since they were introduced, FPGAs have moved from being viewed simply {{as a method of}} implementing random logic in circuit boards to being a flexible implementation medium for many types of systems. Logic emulation tasks, where ASIC designs are simulated on large FPGA-based structures [Varghese 93], have greatly increased simulation speeds. Software subroutines have been hand-optimized to FPGAs to speed up inner loops of [...] ...|$|R
40|$|Scott Hauck, Gaetano Borriello Department of Computer Science and Engineering University of Washington Seattle, WA 98195 Abstract There is {{currently}} {{great interest in}} using systems of FPGAs for <b>logic</b> <b>emulators,</b> custom computing devices, and software accelerators. An important step in making these technologies more generally useful is to develop completely automatic mapping tools from high-level specification to FPGA programming files. In this paper we examine one step in this automatic mapping process, the selection of FPGA pins to use for routing inter-FPGA signals. We present an algorithm that greatly increases mapping speed while also improving mapping quality. Introduction There is great interest in using multiple-FPGA systems for such tasks as logic emulation, software acceleration, and custom-computing devices. Many such systems are discussed elsewhere in these proceedings. An important aspect shared by all of these systems is that they harness multiple FPGAs, connected in a [...] ...|$|R
40|$|Abstract—Multi-FPGA systems (MFSs) {{are used}} as custom {{computing}} machines, <b>logic</b> <b>emulators,</b> and rapid prototyping vehicles. A key aspect of these systems is their programmable routing architecture which is {{the manner in which}} wires, FPGAs, and Field-Programmable Interconnect Devices (FPIDs) are connected. Several routing architectures for MFSs have been proposed and previous research has shown that the partial crossbar {{is one of the best}} existing architectures. A new routing architecture, called the Hybrid Complete-Graph and Partial-Crossbar (HCGP), was proposed by Khalid and was shown to provide superior speed and cost compared to partial crossbar. In this paper we address the issue of scalability of the HCGP routing architecture. The motivation for this work was to evaluate the suitability of the HCGP architecture for a future rapid prototyping system product that was being developed at Cadence. Experimental results show that the HCGP architecture is scalable and can be used with the state-of-the-art, high gate count FPGAs. Index Terms—Partitioning, reconfigurable components, reconfigurable-computing, reconfigurable-systems, system-level...|$|R
40|$|There is {{currently}} {{great interest in}} using fixed arrays of FPGAs for <b>logic</b> <b>emulators,</b> custom computing devices, and software accelerators. An important part of designing such a system is determining the proper routing topology to use to interconnect the FPGAs. This topology can have a great effect on the area and delay of the resulting system. Tree, Bipartite Graph, and Mesh interconnection schemes have all been proposed for use in FPGA-based systems. In this paper we examine Mesh interconnection schemes, and propose several constructs for more efficient topologies. These reduce inter-chip routing costs by more than 50 % over the basic 4 -way Mesh. Introduction In the time since they were introduced, FPGAs have moved from being viewed simply {{as a method of}} implementing random logic in circuit boards to being a flexible implementation medium for many types of systems. Logic emulation tasks, in which ASIC designs are simulated on large FPGA-based structures [Butts 92], have greatly increa [...] ...|$|R
40|$|Although {{simulation}} {{remains an}} important part of application-specific integrated circuit (ASIC) validation, hardware-assisted parallel verification is becoming a larger part of the overall ASIC verification flow. In this paper, we describe and analyze a set of incremental compilation steps that can be directly applied to a range of parallel logic verification hardware, including <b>logic</b> <b>emulators.</b> Important aspects of this work include the formulation and analysis of two incremental design mapping steps: the partitioning of newly added design logic onto multiple logic processors and the communication scheduling of newly added design signals between logic processors. To validate our incremental compilation techniques, the developed mapping heuristics have been integrated into the compilation flow for a field-programmable gate-array-based Ikos VirtuaLogic emulator [1]. The modified compiler has been applied to five large benchmark circuits that have been synthesized from register-transfer level and mapped to the emulator. It is shown that our incremental approach reduces verification compile time for modified designs by up to a factor of five versus complete design recompilation for benchmarks of over 100 000 gates. In most cases, verification run-time following incremental compilation of a modified design matches the performance achieved with complete design recompilation...|$|R
40|$|Multi-FPGA systems (MFSs) {{are used}} as custom {{computing}} machines, <b>logic</b> <b>emulators</b> and rapid prototyping vehicles. A key aspect of these systems is their programmable routing architecture, {{the manner in which}} wires, FPGAs and Field-Programmable Interconnect Devices (FPIDs) are connected. In this paper we present an experimental study for evaluating and comparing two commonly used routing architectures for multi-FPGA systems: 8 -way mesh and partial crossbar. A set of 15 large benchmark circuits are mapped into these architectures, using a customized set of partitioning, placement and inter-chip routing tools. Particular attention was paid to the development of appropriate interchip routing algorithms for each architecture. The architectures are compared on the basis of cost (the total number of pins required in the system) and speed (determined by post inter-chip routing critical path delay). The results show that the 8 -way mesh architecture has high cost, poor routability and speed while the partial crossbar architecture gives relatively low cost, good routability and speed. Using our experimental approach, we also explore a key architecture parameter associated with the partial crossbar architecture, {{and its impact on the}} routability and speed of the architecture. We briefly describe an inter-chip router for the partial crossbar architecture, called PCROUTE, that gives excellent routability and speed results for real benchmark circuits...|$|R
40|$|Abstract—Although {{simulation}} {{remains an}} important part of application-specific integrated circuit (ASIC) validation, hardware-assisted parallel verification is becoming a larger part of the overall ASIC verification flow. In this paper, we describe and analyze a set of incremental compilation steps that can be directly applied to a range of parallel logic verification hardware, including <b>logic</b> <b>emulators.</b> Important aspects of this work include the formulation and analysis of two incremental design mapping steps: the partitioning of newly added design logic onto multiple logic processors and the communication scheduling of newly added design signals between logic processors. To validate our incremental compilation techniques, the developed mapping heuristics have been integrated into the compilation flow for a field-programmable gate-array-based Ikos VirtuaLogic emulator [1]. The modified compiler has been applied to five large benchmark circuits that have been synthesized from register-transfer level and mapped to the emulator. It is shown that our incremental approach reduces verification compile time for modified designs by up to a factor of five versus complete design recompilation for benchmarks of over 100 000 gates. In most cases, verification run-time following incremental compilation of a modified design matches the performance achieved with complete design recompilation. Index Terms—Incremental compilation, incremental partitioning, incremental routing, logic emulation. I...|$|R
40|$|Abstract—Logic {{emulation}} enables {{designers to}} functionally verify complex integrated circuits prior to chip fabrication. How-ever, traditional FPGA-based <b>logic</b> <b>emulators</b> have poor inter-chip communication bandwidth, commonly limiting gate utiliza-tion {{to less than}} 20 %. Global routing contention mandates the use of expensive crossbar and PC-board technology in a sys-tem of otherwise low-cost commodity parts. Even with crossbar technology, current emulators only use a fraction of potential communication bandwidth because they dedicate each FPGA pin (physical wire) to a single emulated signal (logical wire). Virtual wires overcome pin limitations by intelligently multiplexing each physical wire among multiple logical wires, and pipelining these connections at the maximum clocking frequency of the FPGA. The resulting increase in bandwidth allows effective use of low-dimension direct interconnect. The size of the FPGA array can be decreased as well, resulting in low-cost logic emulation. This paper covers major contributions of the MIT Virtual Wires project. In {{the context of a}} complete emulation system, we analyze phase-based static scheduling and routing algorithms, present virtual wires synthesis methodologies, and overview an operational prototype with 20 K-gate boards. Results, including in-circuit emulation of a SPARC microprocessor, indicate that virtual wires eliminate the need for expensive crossbar technol-ogy while increasing FPGA utilization beyond 45 %. Theoretical analysis predicts that virtual wires emulation scales with FPGA size and average routing distance, while traditional emulation does not. I...|$|R
40|$|Existing FPGA-based <b>logic</b> <b>emulators</b> {{suffer from}} limited inter-chip {{communication}} bandwidth, {{resulting in low}} gate utilization (10 to 20 percent). This resource imbalance increases the number of chips needed to emulate a particular logic design and thereby decreases emulation speed, since signals must cross more chip boundaries. Current emulators only use a fraction of potential communication bandwidth because they dedicate each FPGA pin (physical wire) to a single emulated signal (logical wire). These logical wires are not active simultaneouslyand are only switched at emulation clock speeds. Virtual wires overcome pin limitations by intelligently multiplexing each physical wire among multiple logical wires and pipelining these connections at the maximum clocking frequency of the FPGA. A virtual wire represents a connection from a logical output on one FPGA to a logical input on another FPGA. Virtual wires not only increase usable bandwidth, but also relax the absolute limits imposed on gate utilization. The resulting improvement in bandwidth reduces the need for global interconnect, allowing effective use of low dimension inter-chip connections (such as nearest-neighbor). Nearest-neighbor topologies, coupled with the ability of virtual wires to overlap communication with computation, can even improve emulation speeds. We present the concept of virtual wires and describe our first implementation, a “softwire ” compiler which utilizes static routing and relies on minimal hardware support. Results from compiling netlists for the 18 K gate Sparcle microprocessor and the 86 K gate Alewife Communications and Cache Controllerindicate that virtual wires can increase FPGA gate utilizationbeyond 80 percent withouta significant slowdown in emulation speed...|$|R
40|$|Multi-FPGA systems (MFSs) {{are used}} as custom {{computing}} machines, <b>logic</b> <b>emulators</b> and rapid prototyping vehicles. A key aspect of these systems is their programmable routing architecture which is {{the manner in which}} wires, FPGAs and Field-Programmable Interconnect Devices (FPIDs) are connected. Several routing architectures for MFSs have been proposed [Arno 92] [Butt 92] [Hauc 94] [Apti 96] [Vuil 96] [Babb 97] and previous research has shown that the partial crossbar {{is one of the best}} existing architectures [Kim 96] [Khal 97]. In this paper we propose a new routing architecture, called the Hybrid Complete-Graph and Partial-Crossbar (HCGP) which has superior speed and cost compared to a partial crossbar. The new architecture uses both hardwired and programmable connections between the FPGAs. We compare the performance and cost of the HCGP and partial crossbar architectures experimentally, by mapping a set of 15 large benchmark circuits into each architecture. A customized set of partitioning and inter-chip routing tools were developed, with particular attention paid to architecture-appropriate inter-chip routing algorithms. We show that the cost of the partial crossbar (as measured by the number of pins on all FPGAs and FPIDs required to fit a design), is on average 20 % more than the new HCGP architecture and as much as 25 % more. Furthermore, the critical path delay for designs implemented on the partial crossbar were on average 20 % more than the HCGP architecture and up to 43 % more. Using our experimental approach, we also explore a key architecture parameter associated with the HCGP architecture: the proportion of hard-wired connections versus programmable connections, to determine its best value. ...|$|R
40|$|Part 2 : Control Systems SecurityInternational audienceThe {{first step}} to {{grappling}} with the security problems that face modern supervisory control and data acquisition (SCADA) systems and industrial control networks is investing in research and education. However, because of the specialized nature of industrial control systems and networks, the cost of even a modest testbed for research or education can quickly get out of hand. Hardware-based testbeds are often not practical due to budgetary constraints, {{and they do not}} readily scale to meet educational demands. Software simulations are a cost-effective alternative, but current solutions focus primarily on network aspects, not the implementation of field device and application functionality. This paper describes the design and implementation of a programmable <b>logic</b> controller <b>emulator</b> using VMware. The emulator solution is both cost-effective and scalable. Moreover, it can accurately replicate real-world field device functionality to meet research and educational requirements...|$|R
40|$|Modern {{influence}} mines use Ship Classification Systems (SCS) {{to differentiate}} between targets and non-targets through an analysis of signature features. Unlike classical mine modelling, which follows a deterministic approach, {{in this paper we}} describe the stochastic mine model that was developed at NURC. The model, called Fuzzy <b>Logic</b> Advanced Mine <b>Emulator</b> (FLAME) is a generic mine model using a fuzzy logic approach. An important advantage offered by this model is that it can be retrained and is able to simulate modern and even future mine threats. In the experimental section, we show another advantage of the model; the capability of the FLAME to identify the signature features that offer the greatest level of discrimination for the specific target(s) of interest. Clearly, this provides valuable information for MCM forces, mine layers and ship designers. In the experimental section we show the capabilities of FLAME to learn to distinguish the signatures of two ships. Also we show how the output statistics of FLAME provides detailed insights on the most distinctive signature features of these two ships...|$|R
40|$|Knowing {{the program}} timing {{characteristics}} is funda-mental {{to the successful}} design and execution of real-time systems. Today, measurement-based timing analysis tools such as in-circuit <b>emulators,</b> <b>logic</b> analyzers and oscillo-scopes, are used in industry. A critical timing measure is the worst-case execution time (WCET) of a program. Re-cently, tools for deriving WCET estimates, mostly based on static program analysis, have reached the market. In this article we summarize experiences from five differ-ent industrial case-studies. The studies were made on typi-cal industrial systems, in close cooperation with the system developers, using both static and measurement-based tools. The primary purpose {{was to investigate the}} difficulties in-volved in applying current timing analysis methods to in-dustrial code. We were also interested howWCET estimates can be derived by different methods, how labor-intensive the methods are, and the accuracy of obtained results. As a result, we provide observations on the benefits and drawbacks of the different timing analysis methods used and specify general conditions when a particular method should be most beneficial. We also show the benefits of having sev-eral types of timing analysis tools available. ...|$|R

