0|10000|Public
50|$|Raw {{information}} is called Data. A record {{is a set}} of <b>logical</b> <b>grouped</b> <b>data.</b> e.g. an employee record will have data stored in the form of fields/attributes like his name, address etc.|$|R
40|$|Abstract. This {{research}} {{presents an}} algorithm that allows transaction processing to proceed during site failures and network partitioning while ensuring {{the consistency of}} replicated data. Our algorithm can be used together with various voting schemes which provide varying degrees of data availability. Different voting schemes may be used simul-taneously for different groups,'of data. Our algorithm contains as special cases: the site quorum method in which the ~ is a single distinguished partition, and the virtual partition method in which a (possibly different) distinguished partition is determined for each <b>logical</b> <b>data</b> item. By <b>grouping</b> <b>data</b> items in various ways, our algorithm can be tuned to yield methods which lie between these two extremes. 1...|$|R
50|$|<b>Logical</b> <b>data</b> models {{should be}} based on the {{structures}} identified in a preceding conceptual data model, since this describes the semantics of the information context, which the logical model should also reflect. Even so, since the <b>logical</b> <b>data</b> model anticipates implementation on a specific computing system, the content of the <b>logical</b> <b>data</b> model is adjusted to achieve certain efficiencies.|$|R
40|$|Data models {{provide a}} map of the {{components}} of an information system. Prior research has indicated that more expressive conceptual data models (despite their increased size) result in better performance for problem solving tasks. An initial experiment using <b>logical</b> <b>data</b> models indicated that more expressive <b>logical</b> <b>data</b> models also enhanced end-user performance for information retrieval tasks. However, the principles of parsimony and bounded rationality imply that, past some point, increases in size lead to a level of complexity that results in impaired performance. The results of this study support these principles. For a <b>logical</b> <b>data</b> model of increased but still modest size, users composing queries for the more expressive <b>logical</b> <b>data</b> model did not perform as well as users composing queries for the corresponding less expressive but more parsimonious <b>logical</b> <b>data</b> model. These results indicate that, when constructing <b>logical</b> <b>data</b> models, data modelers should consider tradeoffs between parsimony and expressiveness...|$|R
5000|$|<b>Logical</b> <b>data</b> independence: The {{ability to}} change the logical (conceptual) schema without {{changing}} the External schema (User View) is called <b>logical</b> <b>data</b> independence. For example, the addition or removal of new entities, attributes, or relationships to the conceptual schema sternal schemas or having to rewrite existing application programs.|$|R
40|$|Approved {{for public}} release; {{distribution}} unlimitedTheories and guidance for <b>logical</b> <b>data</b> base design have lagged {{far behind the}} advances in physical data base design. The advent of sophisticated data base management systems has relieved the user {{of many of the}} problems of physical data base design, but has placed more emphasis on good logical design. The theory behind <b>logical</b> <b>data</b> base design is explored and a step by step procedure for the <b>logical</b> <b>data</b> base design procedure is presented, employing mathematical and operations research techniques. [URL] Colonel, United States Marine Corp...|$|R
5000|$|... #Subtitle level 3: Reasons for {{building}} a <b>logical</b> <b>data</b> structure ...|$|R
40|$|This paper {{describes}} the SZS ontologies that provide status values for precisely describing {{what is known}} or has been established about <b>logical</b> <b>data.</b> The ontology values are useful for describing existing <b>logical</b> <b>data,</b> and for automated reasoning software to describe their input and output. Standards for presenting the ontology values are also provided. ...|$|R
50|$|Note, see <b>Logical</b> <b>data</b> {{model for}} {{discussion}} {{of the relationship of}} these three DIV data models, with comparison of the Conceptual, <b>Logical</b> & Physical <b>Data</b> Models.|$|R
5000|$|Functional requirements, i.e. <b>logical</b> <b>data</b> models, {{use case}} scenarios, work instructions, reports...|$|R
5000|$|... #Subtitle level 5: Schema to {{read the}} schemas (<b>Logical</b> <b>Data</b> Schema (LDS)) ...|$|R
5000|$|The {{definition}} of the <b>logical</b> <b>data</b> schema or LDS (the schema to read schemata) ...|$|R
50|$|In {{the context}} of Oracle databases, a schema object is a <b>logical</b> <b>data</b> storage structure.|$|R
5000|$|... danda: Pepper's jargon for Structural Corroboration, {{which in}} layman's terms {{is similar to}} <b>Logical</b> <b>Data.</b>|$|R
5000|$|Information - The <b>logical</b> <b>data</b> and {{statistics}} {{that the organization}} required to run properly and actively ...|$|R
50|$|<b>Logical</b> <b>data</b> models {{represent}} the abstract {{structure of a}} domain of information. They are often diagrammatic in nature and are most typically used in business processes that seek to capture things of importance to an organization and how they relate to one another. Once validated and approved, the <b>logical</b> <b>data</b> model can become {{the basis of a}} physical data model and form the design of a database.|$|R
50|$|Labeled graphs {{could be}} {{represented}} in graph databases from the mid-1980s, such as the <b>Logical</b> <b>Data</b> Model.|$|R
5000|$|Provides a <b>logical</b> <b>data</b> {{model as}} a {{standard}} for the goldensource and for consuming applications to inherit.|$|R
5000|$|Provides a <b>logical</b> <b>data</b> {{model with}} {{elements}} and business rules {{needed for the}} creation of DQ rules.|$|R
5000|$|UML to {{structured}} query language (SQL)-based <b>logical</b> <b>data</b> models as supported by IBM Rational Data Architect software.|$|R
5000|$|Where necessary, {{the option}} will be {{documented}} with a <b>logical</b> <b>data</b> structure and a level 1 data-flow diagram.|$|R
5000|$|<b>Logical</b> <b>Data</b> Model (OV-7) : Documentation of {{the data}} {{requirements}} and structural business process rules of the Operational View.|$|R
5000|$|Virtualized Data Access - Connect to {{different}} data sources {{and make them}} accessible from a common <b>logical</b> <b>data</b> access point.|$|R
50|$|Core {{architecture}} {{data model}} (CADM) in enterprise architecture is a <b>logical</b> <b>data</b> {{model of information}} used to describe and build architectures.|$|R
5000|$|Data {{modeling}} during {{systems analysis}}: In systems analysis <b>logical</b> <b>data</b> models are created {{as part of}} the development of new databases.|$|R
40|$|A common {{approach}} to managing large, heterogeneous, and distributed collections of data is {{to separate the}} data itself (and its physical rendering in replicas) from the metadata that describes {{the nature of the}} <b>data</b> (often called <b>logical</b> <b>data</b> descriptions). Metadata catalogs store descriptive information (metadata attributes) about <b>logical</b> <b>data</b> items. These catalogs can then be queried to retrieve the particular <b>logical</b> <b>data</b> item that matches the desired criteria. However, the query has to be formulated in terms of the metadata attributes defined for the catalog. Our work explores the notion of virtual metadata, where catalogs can be queried using metadata attributes not originally defined in the catalog. We use semantic web standards to query catalogs with virtual metadata and reason about how to map them into existing metadata attributes. ...|$|R
40|$|This {{document}} {{presents the}} work completed {{as an extension}} to the Metadata Strategy project completed in May 2002. The report includes details of the project inputs, the analysis steps completed to identify MSRM-core metadata elements, and the resulting detailed <b>logical</b> <b>data</b> model. The detailed <b>logical</b> <b>data</b> model is provided separately in Oracle Designer format. This document builds on the Metadata Strategy document and should {{be used as a}} key reference for future project phases, including the metadata tool evaluation...|$|R
40|$|The high {{capacity}} provided by packet-switched networks is supporting {{the proliferation of}} bandwidth intensive multimedia applications which require multicasting capability. As a consequence a mixed traffic scenario where both unicast and multicast demands compete for the same shared resources, is the one {{more likely to be}} found within the current transport networks. On todayâ€™s traffic-engineered networks such traffic travels through <b>logical</b> <b>data</b> paths setting up by constrained-based routing schemes provided by a control plane. In this paper we have devised a novel constraint-based routing scheme to forward unicast and multicast traffic envisioning a system resource consumption outstanding performance. We introduce the concept of AnyTraffic <b>data</b> <b>group</b> which consists of a group of egress nodes receiving unicast and multicast traffic over the same single minimum-cost tree. A novel Steiner tree-based heuristic algorithm is specifically defined to accommodate such <b>data</b> <b>group</b> and has been compared with the standard shortest path (SP) algorithm - the optimal case for unicast routing - and a classical Steiner tree (ST) heuristic algorithm - the optimal case for multicast routing. Exhaustive experiments have been done to validate the results. Preprin...|$|R
5000|$|The {{physical}} implementation {{format of}} the <b>Logical</b> <b>Data</b> Model entities, e.g., message formats, file structures, physical schema. In DoDAF V1.5, this was the SV-11.|$|R
5000|$|... {{allows a}} UniPro device to {{communicate}} with another UniPro device using multiple <b>logical</b> <b>data</b> streams (example: sending audio and video and control information separately).|$|R
3000|$|... â€¢ Support for <b>logical,</b> <b>data</b> and {{temporal}} operators: {{to cope with}} the unlimited nature of data streams, Stream Reasoning systems extend conventional SQL-based <b>logical</b> and <b>data</b> operators with temporal operators. This allows us to limit an unbounded stream to a specific window, and also to detect events following one after another chronologically.|$|R
5000|$|There {{are three}} {{different}} types of data models produced while progressing from requirements to the actual database {{to be used for}} the information system. [...] The data requirements are initially recorded as a conceptual data model which is essentially a set of technology independent specifications about the data and is used to discuss initial requirements with the business stakeholders. The conceptual model is then translated into a <b>logical</b> <b>data</b> model, which documents structures of the data that can be implemented in databases. Implementation of one conceptual data model may require multiple <b>logical</b> <b>data</b> models. The last step in data modeling is transforming the <b>logical</b> <b>data</b> model to a physical data model that organizes the data into tables, and accounts for access, performance and storage details. Data modeling defines not just data elements, but also their structures and the relationships between them.|$|R
5000|$|... {{allows a}} UniPro device to {{simultaneously}} connect to multiple other devices (this requires switches as supported {{in a future}} version of UniPro) using multiple <b>logical</b> <b>data</b> streams.|$|R
30|$|The {{uppermost}} layer supports <b>logical</b> <b>data</b> {{structures such as}} relations, tuples, and views. Typical {{tasks of}} this layer include query processing and optimization, access control, and integrity enforcement.|$|R
50|$|<b>Logical</b> <b>data</b> {{independence}} {{is more difficult}} to achieve than physical data independence, since application programs are heavily dependent on the logical structure of the data that they access.|$|R
50|$|The {{requirements}} {{also require}} a business or <b>logical</b> <b>data</b> model. Most of the <b>logical</b> <b>data</b> {{model can be}} derived from the requirements. For instance it knows which entities are needed (ORDERS, ORDER_LINES and PRODUCST) and in some cases it also can derive the type of an attribute. For instance __approved__ can only be true or false because it is used as a condition and LINES should be a relation to ORDER_LINES. Some types however cannot be derived and need to be defined explicitly in this data model. Below is an example of this data model.|$|R
