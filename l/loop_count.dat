20|134|Public
25|$|The {{bacteria}} count using the standard plate count, direct microscopic count, or plate <b>loop</b> <b>count</b> methods shall be {{not more than}} one million (1,000,000) Colony-forming units (cfu) of bacteria per milliliter.|$|E
50|$|Though the syntax of {{template}} metaprogramming {{is usually}} {{very different from}} the programming language it is used with, it has practical uses. Some common reasons to use templates are to implement generic programming (avoiding sections of code which are similar except for some minor variations) or to perform automatic compile-time optimization such as doing something once at compile time rather than every time the program is run — for instance, by having the compiler unroll loops to eliminate jumps and <b>loop</b> <b>count</b> decrements whenever the program is executed.|$|E
5000|$|For example {{as defined}} by the State of Indiana {{administrative}} code, grade A milk shall meet the following standards:*The bacterial estimate classification shall be [...] "acceptable".*The bacteria count using the standard plate count, direct microscopic count, or plate <b>loop</b> <b>count</b> methods shall be not more than one million (1,000,000) bacteria per milliliter.*The somatic cell count shall be not more than one million (1,000,000) cells per milliliter.*The milk shall not contain drug residues.Milk not meeting these standards shall be designated as undergrade. Undergrade milk may not be sold for human consumption or processing into products for human consumption.|$|E
50|$|This FORTRAN IV {{compiler}} in version 1 had {{the interesting}} bug that DO <b>loops</b> <b>counted</b> incorrectly! DO <b>loops</b> would <b>count</b> 1,2,3,5,6,7, …! A quick patch was released to fix this.|$|R
40|$|Multi-criticality {{real-time}} systems require protected-mode {{operating systems}} with bounded interrupt latencies and guaranteed isolation between components. A tight WCET analysis of such systems requires trustworthy information about loop bounds and infeasible paths. We propose sequoll, {{a framework for}} employing model checking of binary code to determine <b>loop</b> <b>counts</b> and infeasible paths, as well as validating manual infeasible path annotations which are often error-prone. We show that sequoll automatically determines many of the <b>loop</b> <b>counts</b> in the Mälardalen WCET benchmarks. We also show that sequoll computes loop bounds and validates several infeasible path annotations used to reduce the computed WCET bound of seL 4, a high-assurance protected microkernel for multicriticality systems...|$|R
50|$|The aim of {{the game}} is to get the longest line or loop in your colour. Each tile in a line counts as one point, and in a loop is two points. Only the highest-scoring line or <b>loop</b> <b>counts.</b>|$|R
5000|$|For example, {{as defined}} by the state of Indiana’s {{administrative}} code, Grade A milk shall meet the following standards:*The bacterial estimate classification shall be [...] "acceptable".*The bacteria count using the standard plate count, direct microscopic count, or plate <b>loop</b> <b>count</b> methods shall be not more than one million (1,000,000) Colony-forming units (cfu) of bacteria per milliliter.*The somatic cell count shall be not more than one million (1,000,000) cfu cells per milliliter.*The milk shall not contain drug residues.Milk not meeting these standards shall be designated as undergrade. Undergrade milk may not be sold for human consumption or processing into products for human consumption.|$|E
5000|$|Lower {{milk quality}} - Somatic cell count (SCC) and Plate <b>loop</b> <b>count</b> (PLC) are, respectively, {{measurements}} of the quantity of white blood cells and total number of bacteria present in a milk sample. A high SCC indicates reduced udder health (as the immune system fights some infection) and implies lower milk quality. AMS herds consistently show higher SCCs than conventionally milked herds. A high PLC indicates bacterial contamination, usually through poor sanitation or cooling and similarly implies low milk quality. High PLC in AMS {{may be attributed to}} the continuous use of milking lines (rather than twice a day in conventional systems), which reduces the time window for cleaning, and the incremental addition of milk to the bulk milk tank which may not cool efficiently at low milk levels.|$|E
30|$|The method SOMP is used {{to greatly}} {{reduce the size of}} the {{calculated}} sample, which makes it easy to calculate sparse coefficients and error results in the comparison, and reduces the number of the <b>loop</b> <b>count</b> accordingly, improving the precision level than the calculation of samples with larger size. More important, this method can significantly improve the recognition result.|$|E
40|$|After {{discussing}} the various issues regarding and requirements on pure quantum gravitational observables in homogeneous-isotropic conditions, we construct a composite operator observable satisfying most of them. We also expand it to first {{order in the}} <b>loop</b> <b>counting</b> parameter and suggest it as a physical quantifier of gravitational back-reaction in an initially inflating cosmology. Comment: 15 pages, uses LaTeX 2...|$|R
40|$|The Markov-Dyck shifts {{arise from}} finite {{directed}} graphs. An expression for the zeta {{function of a}} Markov-Dyck shift is given. The derivation of this expression {{is based on a}} formula in Keller (G. Keller, Circular codes, <b>loop</b> <b>counting,</b> and zeta-functions, J. Combinatorial Theory 56 (1991), pp. 75 – 83). For a class of examples that includes the Fibonacci-Dyck shift the zeta functions and topological entropy ae determined...|$|R
40|$|AbstractWe prove {{a simple}} formula for the zeta-function of coded systems {{generated}} by circular codes (and more generally by circular Markov codes). We apply {{this to the}} <b>loop</b> <b>counting</b> method for determining the topological entropy of a subshift of finite type, to the zeta-function of the Dyck-shift over 2 N symbols, and to the zeta-function of a subshift of finite ype which is obtained from a full shift by deleting one block of arbitrary length...|$|R
40|$|For full QCD vacuum {{expectation}} values we {{construct an}} expansion in quark <b>loop</b> <b>count</b> and in powers of a coupling constant. The leading term in this expansion is the valence (quenched) approximation vacuum expectation value. Higher terms give corrections to the valence approximation. A {{test of the}} expansion is presented for moderately heavy quarks on a small lattice. We consider briefly an application of the expansion to quarkonium-glueball mixing. Comment: 16 pages, 5 figures, version to appear in PRD including additional discussion of Boglione and Pennington paper on consequences of valence approximation corrections for quarkonium-glueball mixin...|$|E
40|$|Automation of the hardware/software {{codesign}} (HSC) methodology {{brings with}} it {{the need to develop}} sophisticated high-level profiling tools. This paper presents a profiling tool which uses execution profiling on standard C code to obtain accurate and consistent times at the level of individual compound code sections. This tool is used in the ASP hardware/software codesign project. The results from this tool show that profiling must be performed on dedicated hardware which is {{as close as possible to}} the final implementation, as opposed to a workstation. Further, in this paper a formula is derived for the number of times a program has to be profiled in order to get an accurate estimate of the number of times a loop with an indeterminate <b>loop</b> <b>count</b> is executed. (C) 2000 Published by Elsevier Science B. V. All rights reserved...|$|E
40|$|Abstract- This paper {{describes}} the unrolling of loops with indeterminate loop counts in system level pipelines. Two methods {{are discussed in}} this paper. The first method is the varied latency method, where the input is blocked until the pipeline is clear. This variation in the input arrival time {{gives rise to the}} name. In this method the output will be in the same order as the input. The second method, called the fixed latency method, allows for the input arrival time to remain unchanged. The loops with <b>loop</b> <b>count</b> in excess of the number of unrolled loops will have to be stored, until a suitable gap in the system becomes available. Analysis of the both methods is given, which shows that the fixed latency method is signifi-cantly faster but needs reordering of tasks and mem-ory to store tasks. I...|$|E
40|$|To {{determine}} {{safe and}} tight worst-case execution time (WCET) estimates {{of scientific and}} multimedia codes that {{spent most of the}} execution time on executing loop iterations, efficient and accurate <b>loop</b> iteration <b>count</b> estimation methods are required. To support dynamic scheduling decisions based on WCET estimations, an effective <b>loop</b> iteration <b>count</b> estimation method should generate parametric formulae that can be evaluated at runtime. Therefore, the <b>loop</b> iteration <b>count</b> estimation methods utilized for WCET estimation must be effective in analyzing loops with symbolic bounds, non-rectangular loops, zero-trip loops, loops with multiple critical paths, and loops with non-unit strides. In this paper we present a novel approach to parametric WCET estimation to handle loops with both affine and nonaffine loop bounds in an efficent manner using a formulation based on Newton-Gregory interpolating polynomials...|$|R
40|$|We derive a Belief-Propagation {{algorithm}} for <b>counting</b> large <b>loops</b> in a directed network. We {{evaluate the}} distribution of the number of small loops in a directed random network with given degree sequence. We apply the algorithm to a few characteristic directed networks of various network sizes and loop structures and compare the algorithm with exhaustive counting results when possible. The algorithm is adequate in estimating <b>loop</b> <b>counts</b> for large directed networks and can be used to compare the loop structure of directed networks and their randomized counterparts. Comment: (9 pages, 3 figures...|$|R
5000|$|In graph theory, {{the degree}} (or valency) of a vertex of a graph {{is the number}} of edges {{incident}} to the vertex, with <b>loops</b> <b>counted</b> twice. The degree of a vertex [...] is denoted [...] or [...] The maximum degree of a graph G, denoted by Δ(G), and the minimum degree of a graph, denoted by δ(G), are the maximum and minimum degree of its vertices. In the graph on the right, the maximum degree is 5 and the minimum degree is 0. In a regular graph, all degrees are the same, and so we can speak of the degree of the graph.|$|R
40|$|We characterise the eigenfunctions of an {{equilateral}} triangle billiard {{in terms of}} its nodal domains. The number of nodal domains has a quadratic form in terms of the quantum numbers, with a non-trivial number-theoretic factor. The patterns of the eigenfunctions follow a group-theoretic connection {{in a way that makes}} them predictable as one goes from one state to another. Extensive nu-merical investigations bring out the distribution functions of the mode number and signed areas. The statistics of the boundary intersections is also treated analytically. Finally, the distribution functions of the nodal <b>loop</b> <b>count</b> and the nodal counting function are shown to contain information about the classical periodic orbits using the semiclassical trace formula. We believe that the results belong generically to non-separable systems, thus extending the previous works which are concentrated on separable and chaotic systems. ...|$|E
40|$|Abstract- Multi-sensor {{biomedical}} {{image registration}} and fusion usually require intensive computational effort. This article presented a novel automated {{approach of the}} multisensor retinal optic nerve head image registration and fusion using heuristic optimization algorithm. The reference and the to-be-registered images are from two different modalities, i. e. angiogram grayscale images and fundus color images. The optic nerve head vasculature is extracted using Canny Edge Detector. Control points are detected at the vessel bifurcations using adaptive exploratory algorithm. Mutual-Pixel-Count (MPC) maximization based heuristic optimization adjusts the control points at the sub-pixel level. The iteration stops either when MPC reaches the maximum value, or when the maximum allowable <b>loop</b> <b>count</b> is reached. A refinement of the parameter set is obtained {{at the end of}} each loop, and finally an optimal fused image is generated at the end of the iteration. Comparative evaluation is performed with the genetic algorithm. The results show the advantages of the presented method in terms of novelty, efficiency and accuracy...|$|E
40|$|Abstract — In this paper, {{we propose}} a new single {{appearance}} schedule for synchronous dataflow programs to minimize data memory and code memory size simultaneously. While a single appearance schedule promises only one appearance of each node definition in the generated code, it requires {{significant amount of}} data memory overhead compared with a buffer optimal schedule allowing multiple appearance. The key idea of the proposed technique {{is to make a}} dynamic decision of <b>loop</b> <b>count</b> to make a schedule quasi-static. The proposed quasi-static schedule produces a single appearance schedule code with minimum data memory requirement. We prove that every buffer optimal schedule can be transformed to our single appearance schedule which requires optimal buffer size for arbitrary synchronous dataflow graphs. The only penalty for the proposed technique is slight performance overhead of computing loop counts dynamically. In order to minimize the overhead we propose optimization techniques. Experimental results show that the proposed algorithm reduces 20 % total memory with less than 1 % performance overhead compared with the previous single appearance schedule algorithms. I...|$|E
40|$|Routers in {{wireless}} {{networks are}} often prone to variety of attacks {{like a man}} in the middle, distributed denial of service, smurf, ping of death, routing <b>loops,</b> <b>counting</b> to infinity,. Among all these attacks routing loop is the most common one and it have a harmful effect on network performance. In this study, we have proposed a novel cognitive agents based security scheme to handle routing loops in wireless networks. The proposed scheme uses Cognitive Agents (CAs) on every routers with Observation-Belief (O-B) model, which detect and handle routing loops efficiently. As a result, network performance improves with respect to various performance metrics like delay, packet loss ratio, bandwidth consumption, throughput, latency, queue length and so on...|$|R
5000|$|A <b>counting</b> <b>loop</b> can be {{simulated}} by {{iterating over}} an incrementing list or generator, for instance, Python's [...]|$|R
40|$|Static path {{analysis}} {{is a key}} process of Worst Case Execution Time (WCET) estimation, the objective {{of which is to}} find the execution path that has the largest execution time. Currently, there is an argument in the research community whether model checking is another good solution for WCET analysis, besides ILP. To our knowledge, no paper so far has addressed this argument with real performance data. In this paper, we implement both ILP and model checking for static {{path analysis}} of WCET, and the experiment results show that ILP yields very good performance, while model checking only works well for simple programs, and it is inclined to scalability problems when dealing with programs that have complex structures and large <b>loop</b> <b>counts.</b> © 2008 IEEE...|$|R
40|$|In this paper, {{we propose}} a new single {{appearance}} schedule for synchronous dataflow programs to minimize data memory and code memory size {{at the same}} time. When the software code is automatically synthesized from the dataflow program graphs, a single appearance schedule promises only one appearance of each node definition in the generated code. While several heuristics {{have been developed to}} find a single appearance schedule, they all have to pay significant amount of data memory overhead compared with a buffer optimal schedule. The key idea of the proposed technique is to make a dynamic decision of <b>loop</b> <b>count</b> to make a schedule quasi-static. The proposed quasi-static static schedule produces a single appearance schedule code with minimum data memory requirement. We prove that the proposed scheduling technique is optimal for a chain-structured graph in terms of data memory requirement while maintaining the single appearance schedule. The only penalty for the proposed technique is slight performance overhead of computing loop counts dynamically. Experimental results show that the proposed algorithm reduces 20 % total memory with less than 1 % performance overhead compared with the previous single appearance schedule algorithms for CD 2 DAT and non uniform filter bank applications...|$|E
40|$|Dynamic-radius Species-conserving Genetic Algorithm for de novo Protein Folding Instructions Dynamic-radius Species-conserving Genetic Algorithm for de novo Protein Folding is a Java {{application}} {{written in}} Java version 1. 7, {{but it should}} run on other versions of Java. There are 10 command line parameters that should be set: 	# position 1 - population size 	# position 2 - number of generations 	# position 3 - mutation rate (decimal) 	# position 4 - initial radius (decimal) 	# position 5 - radius delta (decimal) 	# position 6 - reevaluation <b>loop</b> <b>count</b> 	# position 7 - convergence limit 	# position 8 - protein 	# position 9 - output file location 	# position 10 - log status 0 few logs; 1 more logs; 2 most logs An output file will {{be placed in the}} file location for position 9. Here is an example for running the application: java -jar /Users/mbrown 15 /NetBeansProjects/DSGAProteinFolding/dist/DSGAProteinFoldingKG. jar 1000 2000 0. 03 8. 0 - 1. 0 500 4 PPHPPHHPPHHPPPPPHHHHHHHHHHPPPPPPHHPPHHPPHPPHHHHH //Users//mbrown 15 //Documents//genetic-algorithm-files// 1 This method allows multiple runs to be placed in a batch file. The class called TestAllCombinationsSample will generate a file for Figure 2. The file GAProteinFoldingDD has the code for the traditional Genetic Algorithm...|$|E
40|$|Milk {{quality data}} on a month-by-month basis from March 1999 to December 2000 were studied from five of the largest milk plants {{operating}} in New York State. The analyses focused on bulk tank somatic cell count (SCC), bacterial counts {{in the form of}} plate <b>loop</b> <b>count</b> (PLC), and antibiotic residue violations in the pool of milk of New York State, their mutual relation, and the influence of farm size. The average SCC was 363, 000 cells/ml, the average PLC was 24, 400 bacteria/ml, and the average number of antibiotic residue violations in the pool ofmilkwas 3. 9 per 1000 producers. Eachmonth between 72 and 88 % of the milk pool had SCC levels in compliance with the European Union (EU) require-ments (SCC < 400, 000 cells/ml). The findings in this study suggest that larger farms had lower SCC and PLC but more antibiotic violations. However, the larger farms contribute most to the SCC and PLC of the total pool of milk. Farms with high SCC also had higher PLC and more antibiotic violations. Measurable improvements in overall quality of the pool of milk in New York state would most likely occur by targeting incentives, education, and training programs for any farms with very high SCC and for larger farms with SCC between 400, 000 and 750, 000 cells/ml. (Keywords: somatic cell count, bacterial count, antibi-otic residue, New York State) Abbreviation key: CC = concordance correlation coef...|$|E
2500|$|A <b>counting</b> <b>loop</b> can be {{simulated}} by {{iterating over}} an incrementing list or generator, for instance, Python's range (...) [...]|$|R
5000|$|Likewise, the post-decrement {{operator}} {{is commonly}} used with pointers:// Copy one array to anothervoid copy_array(float *src, float *dst, int n){ while (n-- > 0) // <b>Loop</b> that <b>counts</b> down from n to zero *dst++ = *src++; // Copies element *(src) to *(dst), // then increments both pointers} ...|$|R
50|$|The same concept can be {{extended}} to multigraphs and graphs with loops by storing the number of edges between each two vertices in the corresponding matrix element, and by allowing nonzero diagonal elements. <b>Loops</b> may be <b>counted</b> either once (as a single edge) or twice (as two vertex-edge incidences), {{as long as a}} consistent convention is followed. Undirected graphs often use the latter convention of <b>counting</b> <b>loops</b> twice, whereas directed graphs typically use the former convention.|$|R
40|$|Regarding the {{assessment}} of traffic data in ITS, there is an increasing need for answers to the following questions: (i) What exactly is "traffic data quality"?, and, related to that, (ii) There are too many ways to define and to do things, and results of different researchers are inconsistent or not comparable. How can we overcome this situation? With that background, an important aim of the ongoing DLR-project I. MoVe {{is to develop a}} consistent understanding of traffic data quality, together with a unified framework for its assessment. To this end, a probabilistic framework for traffic data quality is provided in this paper. Real-world examples from I. MoVe demonstrate its application for {{the assessment}} of data sources like induction loops, stationary bluetooth sensors and floating car data (FCD). A first important point is to distinguish strictly between quality indices, quality requirements, and quality itself. While the present framework develops quality indices based on established quality criteria like accuracy, completeness, validity, and coverage, the usual understanding of quality is extended to a probabilistic view. This also addresses the problem of information retrieval in the presence of vagueness and uncertainty. The provided examples are making full use of the proposed framework, and also constitute interesting results for the practitioner by themselves. Examples include {{the assessment of}} induction <b>loop</b> <b>count</b> data, and assessing the temporal coverage of a stretch of road with stationary bluetooth data, or of the whole city of Berlin, Germany with FCD...|$|E
40|$|We {{construct}} a systematic mean-field-improved coupling constant and quark loop expansion for corrections to the valence (quenched) approximation to vacuum expectation {{values in the}} lattice formulation of QCD. Terms in the expansion are evaluated {{by a combination of}} weak coupling perturbation theory and a Monte Carlo algorithm. The valence (quenched) approximation to the infinite volume, continuum limit of lattice QCD gives values for hadron masses and for meson decay constants not far from experiment. Missing from these calculations, however, is an independent theoretical estimate of the error arising from the valence approximation. A possible method for determining the valence approximation’s error is proposed in Ref. [1]. In the present article, we describe an improved version of of the method of Ref. [1] which we believe is likely to require less computer time. The expansion we describe can be adapted to any choice of quark action but will be given here only for Wilson quarks. In an exact treatment of QCD, virtual quarkantiquark pairs produced by a chromoelectric field reduce the field’s intensity by a factor which depends both on the field’s momentum and on its intensity. In the valence approximation this factor, analogous to a dielectric constant, is approximated by its zero-field-momentum zerofield-intensity limit [2]. Our expression for the error in the valence approximation to any vacuum expectation value consists of a sum indexed by a power of a mean-field-improved coupling constant [3] and by a quark <b>loop</b> <b>count.</b> Each term in the expansion requires as input, in effect, the dielectric constant entering the valence approximation. The dielectric constant, for convenience, we obtain analytically from mean-field-improved perturbation theory to second order in the coupling constant. A related calculation without mean-field improvement is described in Ref. [4]. The remaining work of evaluating each term in ∗ present address: Group T- 8, Los Alamos National Laboratory...|$|E
40|$|The current {{experiments}} {{were conducted to}} look at the impact of differing pre-milking routines on milking time parameters, milk quality and oxytocin profiles. All {{experiments were}} performed on Holstein cows milked 3 X daily and producing 13 - 16 Kg/milking. Lag times of 0, 60, 90, 120 and 240 s along with forestripping or not forestripping were applied to 786 Holstein cows. Cows in early to mid-lactation had the highest milk yield in the first 2 min when lag time was 60 s and forestripping was included; however, lag time or forestripping had no impact on unit on-time for early to mid-lactation cows. The combination of forestripping with lag times of 90 and 120 s increased the amount of milk harvested in the first 2 min to > 60 % of the total and of milk and lag times beyond 60 s reduced milking unit on-time for late-lactation cows independent of forestripping. The quantity and quality of foremilk was analyzed to evaluate the relationship between foremilk and harvested milk plate <b>loop</b> <b>count</b> (PLC) and somatic cell count (SCC). The SCC and PLC of foremilk were not good predictors of the SCC and PLC in the harvested milk fraction. The foremilk represents 0. 12 % of the total milk harvested and the somatic cells and bacteria found in the foremilk represent < 0. 28 % and 1. 44 % of the total somatic cells and bacteria in milk. Manual stimulation, no stimulation and mechanical stimulation by increased cycle pulsation (300 cycles/min) with low vacuum were included as treatments to analyze their impact on oxytocin profiles and milking parameters. Increased cycle pulsation elicits a similar oxytocin profile to that of cows which were subjected to manual stimulation. Proper cleaning of the teats and detection of mastitis during mechanical stimulation needs further investigation in regard to identification of abnormal milk in real-time and by mechanical means...|$|E
5000|$|... "{}", [...] " [...] (...) [...] " [...] can map to [...] "iteration" [...] (<b>counting</b> <b>loop,</b> {{pre-test}} loop, middle-test loop, post-test loop, and infinite loop) ...|$|R
5000|$|<b>Counting</b> <b>loops</b> are not {{suitable}} to all data structures, {{in particular to}} data structures with no or slow random access, like lists or trees.|$|R
40|$|Branch {{prediction}} accuracy {{remains to}} be critical for high performance and low power. Prior work has studied causes of branch mispredictions {{in order to provide}} insights into how better branch predictors can be designed. However, most of the previous works have considered only run-time classification of branch mispredictions, leaving a large number of mispredictions in the unknown category. For more comprehensive analysis, in this paper, we present a detailed source code analysis of branch mispredictions for SPEC CPU 2000 and Mibench benchmarks. Our analysis show that constant loop exits, insufficient history lengths, wrong-type history, array access/pointer references, complex linked list data structures, changing function inputs, and varying <b>loop</b> <b>counts</b> are the major causes for most of the branch mispredictions. We further show that most mispredictions have repetitive patterns that suggest different design strategies for future branch predictors. ...|$|R
