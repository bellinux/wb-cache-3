97|215|Public
5000|$|... 1996 - OEM {{agreement}} {{with one of}} the world's largest manufacturers of monitors, fax machines, laser printers, MFPs and other office equipment - Samsung Information Systems America. According to the agreement the new multifunction device Samsung OFFICE MASTER OML-8630A was to be equipped with the Cognitive Cuneiform <b>LE</b> <b>system</b> of symbol optical recognition worldwide.|$|E
50|$|Pro Tools|HD {{required}} a Digidesign TDM system and interface, and {{was intended for}} professional recording studios. Pro Tools LE was a complete package intended for home users and some post-production facilities. The package included the Pro Tools LE software and hardware such as the M-Box 2 or Digi 003. Pro Tools M-Powered was simply the Pro Tools application adapted to run on M-Audio hardware, and generally comparable in power to an <b>LE</b> <b>system.</b>|$|E
40|$|This paper {{presents}} the Modify-on-Access (MonA) <b>le</b> <b>system,</b> an active <b>le</b> <b>system,</b> that cooperates with processes to accomplish tasks. The MonA <b>le</b> <b>system</b> optimizes critical {{read and write}} paths, while simplifying system software and application programs. MonA provides a framework for dynamically pushing and popping modular transformations onto data streams during accesses. We demonstrate that the MonA <b>le</b> <b>system</b> adds considerable functionality for minimal overhead, 3 { 5 % for a null transformation. Furthermore, the MonA <b>le</b> <b>system</b> outperforms a user-space transformation by 5 { 14 %. In the future, devices and will be intelligent, combining processing and memory capabilities into one system. The MonA transformation model is poised to exploit the opportunities presented by these architectural advances. ...|$|E
5000|$|Anatomiques et Recherches sur <b>le</b> <b>systems</b> morphologiques nerveux of Annelides polychetes, 1885 - Anatomical and {{morphological}} {{research on}} the nervous system of Polychaeta.|$|R
40|$|Abstract. As we gain {{experience}} with parallel <b>le</b> <b>systems,</b> it becomes {{increasingly clear that}} a single solution does not suit all applications. For example, {{it appears to be}} impossible to nd a single appropriate interface, caching policy, le structure, or disk-management strategy. Furthermore, the proliferation of le-system interfaces and abstractions make applications di cult to port. We propose that the traditional functionality of parallel <b>le</b> <b>systems</b> be separated into two components: a xed core that is standard on all platforms, encapsulating only primitive abstractions and interfaces, and a set of high-level libraries to provide a variety of abstractions and applicationprogrammer interfaces (APIs). We present our current and next-generation <b>le</b> <b>systems</b> as examples of this structure. Their features, such as a three-dimensional le structure, strided read and write interfaces, and I/O-node programs, are speci cally designed with the exibility and performance necessary to support a wide range of applications. ...|$|R
5000|$|<b>LE</b> <b>Systems,</b> {{under the}} {{sponsorship}} of DARPA, developed a dazzler based on a DPSS laser, with green light output at 532 nm, essentially a higher-intensity version of a green laser pointer. The advantage of 532 nm wavelength lies {{in its ability to}} interact with human eyes in daylight and reduced light conditions.|$|R
40|$|As Linux {{clusters}} {{emerged as}} an alternative to traditional supercomputers one of the problems faced was the absence of a high-performance parallel <b>le</b> <b>system</b> comparable to the le systems on the commercial machines. The Parallel Virtual FileSystem(PVFS) developed at Clemson University has attempted to address this issue. PVFS is a parallel <b>le</b> <b>system</b> currently used in Parallel I/O research and as a parallel <b>le</b> <b>system</b> on Linux clusters running high-performance parallel applications. An important component of parallel le systems is the <b>le</b> <b>system</b> interface which has dierent requirements compared to the normal UNIX interface particularly the I/O interface. A parallel I/O interface is required to provide support for non-contiguous access patterns, collective I/O, large le sizes in order to achieve good performance with parallel applications. As it supports signi cantly dierent functionality, the interface exposed by a parallel <b>le</b> <b>system</b> assumes importance. So, the <b>le</b> <b>system</b> needs to either directly provide a parallel I/O interface or at the least support for such an interface to be implemented on top...|$|E
40|$|This paper {{describes}} {{the creation of}} a Unix-compatible <b>le</b> <b>system</b> with highly scalable performance and size. The <b>le</b> <b>system</b> is on the CM- 5 backed by a scalable array of disks. Using the Unix <b>le</b> <b>system</b> (UFS) from the SunOS 4. 1. 2 kernel as a base and modifying it to support Connection Machine (CM) operations, we have created a new <b>le</b> <b>system,</b> the scalable <b>le</b> <b>system,</b> or sfs. We discuss the CM operations we support, such as parallel reads and writes to the processing nodes of the Connection Machine, the use of NFS to support many partitions of processing nodes on the CM, support for very large le sizes (64 -bit) and support for odd numbers of disk drives. The tradeo s and decisions made {{during the course of this}} project as well as performance data for varying numbers of disk drives are provided. ...|$|E
40|$|Repository for {{multimedia}} data diers {{from that of}} the traditional text-based data both in storage space and streaming bandwidth requirements. The le systems used in multimedia environment need to support large volumes and high bandwidth. In this paper, we propose a novel scalable distributed <b>le</b> <b>system</b> built using Autonomous Disks. Autonomous disks are attached directly to the network and are able to perform lightweight processing. We discuss dierent ways to realize autonomous disk, and describe a prototype implementation on Linux platform using PC-based hardware. We present the basic requirements of the multimedia <b>le</b> <b>system</b> and present the design methodology and a prototype Linuxbased implementation of the distributed <b>le</b> <b>system</b> that supports them. We present experimental results on the performance of the proposed <b>le</b> <b>system</b> prototyped using autonomous disks. We show that the performance of the <b>le</b> <b>system</b> scales linearly with the number of disks and the number of clients [...] . ...|$|E
40|$|Algorithms are oÂ®ered for {{selecting}} the principal {{elements of a}} system. Fail- ures of principal elements generate an epidemic of refusals. The preventive main- tenance problem of improving the reliability of functioning of a complex control- <b>ling</b> <b>system</b> is considered. The statistical analysis of moments of failures of the principal elements allows to solve this reliability problem...|$|R
40|$|Scheme and DHTs, while {{practical}} in the-ory, {{have not}} until recently been consid-ered unproven. Given {{the current status}} of real-time theory, steganographers com-pellingly desire the appropriate unication of A * search and thin clients. We conrm that although the lookaside buffer [13] and Smalltalk are largely incompatible, journal-ing <b>le</b> <b>systems</b> [15] can be made ubiqui-tous, concurrent, and exible. ...|$|R
40|$|Today's {{wide variety}} of {{computing}} devices oer a large diversity of resource availability. These resources include CPU, bandwidth, and memory. Workstations and PCs typically are rich in resources, in contrast to palmtop devices, which are generally quite limited. This disparity oers challenges to integrating these heterogeneous devices into a single distributed system. Services must be available to each device, {{but it may be}} necessary to modify certain services if the connected device does not have the required resources. A key component of many distributed systems is remote access to les. Traditional distributed <b>le</b> <b>systems</b> are typically rather static and are not able change their characteristics depending on the current available resources of a particular device. The static nature of these <b>le</b> <b>systems</b> is mainly due to the fact that they typically have no knowledge of the computing devices using their services, the location of the devices, or the type of data being transfered. Data [...] ...|$|R
40|$|BAG is a {{distributed}} {{operating system}} designed for real-time applications which is {{run on a}} distributed real-time system. The heterogeneously distributed BAG system consists of nodes which have VME-bus chassis, dierent types of processor modules, and an interconnection network. The operating system has three main parts having distributed properties: task migration, load balancing and a distributed <b>le</b> <b>system.</b> Heterogeneous task migration {{is based on the}} extended nite state machine (EFSM) programming model. The EFMS model has also eased the implementation of the migration mechanism. The load balancing algorithm is centralized in one node. But the overall system will be a multi-centered structure. Another objective of our work is to achieve a fast load balancing mechanism suitable for real-time systems. A <b>le</b> <b>system</b> supporting the task migration mechanism is also designed and developed. Users and processes all have the same view of this <b>le</b> <b>system</b> as a global tree. The <b>le</b> <b>system</b> uses a client/server approach and meets distributed <b>le</b> <b>system</b> requirements with real-time concepts such as priorities and time-out values...|$|E
40|$|This paper {{presents}} the Modify-on-Access (Mona) <b>le</b> <b>system</b> that provides extensibility through transformations applied to streams of data. Mona overcomes two limitations of prior extensible le systems. First, the Mona <b>le</b> <b>system</b> oers {{two levels of}} extensions (kernel and user) that share a common interface. It allows performance-critical operations to execute with modest overhead in the kernel and untrusted or more complex operations to safely execute in user space. Second, Mona enables ne-grained extensions which allow an application to customize the <b>le</b> <b>system</b> at runtime. This paper discusses {{the implementation of the}} Modify-on-Access <b>le</b> <b>system.</b> Our implementation adds modest overhead of 0 { 3 % (0. 01 { 0. 21 s) to <b>le</b> <b>system</b> operations. This overhead has even less eect on net system performance for several benchmarks. Moreover, this paper describes applications that achieve 4 { 5 times speedup using custom transformations. This paper also describes several trans-formations that increase functionality. Among these are the ftp transformation that allows a user to browse a remote le as though it were local and the command transformation which invokes an arbitrary executable (even a shell script) on a data stream. ...|$|E
40|$|This paper {{presents}} the Modify-on-Access (Mona) <b>le</b> <b>system</b> that provides extensibility through transformations applied to streams of data. Mona is novel in two ways. First, it o ers {{two levels of}} extensions (kernel and user). It allows performance-critical operations to execute with little overhead in the kernel and untrusted or more complex operations to execute in user space. Second, a running application can extend Mona dynamically, which allows the application to adapt the <b>le</b> <b>system</b> at runtime. This paper discusses {{the implementation of the}} Modify-on-Access <b>le</b> <b>system.</b> In our implementation, extensibility adds only a few microseconds to each <b>le</b> <b>system</b> operation (read, write, open, etc.), which has a negligible e ect on overall system performance. We present applications that achieve 4 { 5 times speedup by using a simple kernel transformation. This paper also describes several transformations that increase functionality, such as the ftp transformation that allows a user to browse a remote le as though it were local. 1...|$|E
40|$|Continuous media applications, {{which require}} a {{guaranteed}} transfer {{rate of the}} data, are becoming {{an integral part of}} daily computational life. However, conventional <b>le</b> <b>systems</b> do not provide rate guarantees, and are therefore not suitable for the storage and retrieval of continuous media data (e. g., audio, video). To meet the demands of these new applications, continuous media <b>le</b> <b>systems,</b> which provide rate guarantees by managing critical storage resources such as memory and disks, must be designed. In this paper, we highlight the issues in the storage and retrieval of continuous media data. We rst present a simple scheme for concurrently retrieving multiple continuous media streams from disks. We then introduce a a clever allocation technique for storing continuous media data that eliminates disk latency and thus, drastically reduces RAM requirements. We present, for video data, schemes for implementing the operations fast-forward, rewind and pause. Finally, we conclude by outlining directions for future research in the storage and retrieval of continuous media data...|$|R
50|$|The P. lessonae - P. kl. esculentus (L-E, <b>LE,</b> lessonae-esculentus) <b>system</b> is most {{widespread}} hybridogenetic system. It {{is found}} in Western Europe.|$|R
40|$|Nowadays, {{data can}} be {{represented}} and stored by using dierent formats ranging from non structured data, typical of <b>le</b> <b>systems,</b> to semistructured data, typical of Web sources, to highly structured data, typical of relational database systems. Therefore, the necessity arises to de ne new models and approaches for uniformly handling datasources having dierent formats and structures, and obtaining a global, integrated, and uniform representation. In this paper we present three approaches to data integration and propose a unifying framework integrating the various methodologies and incorporating techniques developed separately...|$|R
40|$|This report {{describes}} {{the design and}} implementation of Carousel, a virtual <b>le</b> <b>system</b> and its client applica-tion. The virtual <b>le</b> <b>system</b> provides a unied interface for accessing and manipulating resources on IMAP and WebDAV servers. Carousel draws inspiration from the features {{and implementation of the}} Be File Sys-tem (BFS), supporting two features not provided by most traditional le systems: multiple categorization and live queries...|$|E
40|$|Abstract. A purely {{functional}} <b>le</b> <b>system</b> {{has been}} built on top of pure Scheme. Itprovides persistent structures and massive storage expected of le systems, without explicit side-e ects like read and write. The <b>le</b> <b>system</b> becomes an additional, lazy argument to programs that would read from it, and an additional result from functions that would alter it. Functional programming on lazy structures replaces in-place side-e ects with a signi cant storage management problem, handled by conjoining the heap to the <b>le</b> <b>system.</b> A hardware implementation of reference counting is extended out to manage sectors, {{as well as the}} primary heap. Backing it is a garbage collector of heap and of disk (i. e. UNIX's fsck), needed only at reboot. CR categories and Subject Descriptors...|$|E
40|$|Large-scale scientic and {{business}} applications require data processing of ever-increasing amounts of data, fu-eling {{a demand for}} scalable parallel le systems com-prising hundreds to thousands of disks. Modern parallel <b>le</b> <b>system</b> architectures however, span a large and com-plex design space. As a result, IT architects {{are faced with a}} challenge when deciding on the most appropri-ate parallel <b>le</b> <b>system</b> for a specic scientic or indus-trial application in a large-scale computing installation. Typically, the right choice depends on the characteris-tics of the application as well as the design assumptions built into a parallel <b>le</b> <b>system.</b> In this study, we {{take a close look at}} two prominent modern parallel le systems, PVFS 2 and Lustre, and compare them experimentally on a range of benchmark-driven scenarios modeling specic real-world applications. ...|$|E
40|$|Abstract. Digital movie systems o er great {{perspectives}} for multimedia applications. But {{the large}} amounts of data involved {{and the demand for}} isochronous transmission and playback are also great challenges for the designers {{of a new generation of}} <b>le</b> <b>systems,</b> database systems, operating systems, window systems, video encoder/decoders and networks. Today's research prototypes of digital movie systems su er from severe performance bottlenecks, resulting in small movie windows, low frame rates or bad image quality (or all of these). We consider the performance problem to be the most important problem with digital movie systems, preventing their widespread use today. In this paper we address performance issues of digital movie systems from a practical perspective. We report on performance experience gained with the XMovie system, and on new algorithms and protocols to overcome some of these bottlenecks...|$|R
40|$|Many {{universities}} have implemented faculty pro <b>le</b> <b>systems</b> that capture faculty and researchersâ scholarly outputs and activities. These systems usually include public pro les and tools to help nd collaborators or experts. They {{may be used}} to create reports for faculty annual reviews or for promotion and tenure, or to assist faculty with complying with open access policies by facilitating deposit in institutional repositories. In many universities, libraries {{play a central role in}} the implementation of these systems. This paper explores three case studies showing how and why libraries came into this role and examines some of the consequences of this trend...|$|R
40|$|Improvements in the {{processing}} speed of multiprocessors are outpacing {{improvements in the}} speed of disk hardware. Parallel disk I/O subsystems have been proposed as one way {{to close the gap}} between processor and disk speeds. In a previous paper we showed that prefetching and caching have the potential to deliver the performance bene ts of parallel <b>le</b> <b>systems</b> to parallel applications. In this paper we describe experiments with practical prefetching policies, and show that prefetching can be implemented e ciently even for the more complex parallel le access patterns. We also test the ability of these policies across a range of architectural parameters. ...|$|R
40|$|This paper presen ts {{the design}} and {{implementation}} of a continuous media <b>le</b> <b>system,</b> whic hhas been imple-mented in the con text of a distributed m ultimediaap-plication development environment that has been proto-typed. T omake a performance analysis of le systems and distributed object services for continuous media pro-visioning, we validate the performance analysis of le sys-tem on media-on-demand (MOD) systems against that of a con ventional <b>le</b> <b>system</b> through an experimental evalu...|$|E
40|$|A {{persistent}} <b>le</b> <b>system</b> stores every previous {{state of}} each le, allowing convenient {{access to the}} full state of the <b>le</b> <b>system</b> as it appeared {{at any point in}} the past. Achieving this conve-nient feature presents a challenging data struc-tural problem because the amount of data in-volved is so large: it must use as little space as possible, and provide ecient operations for modifying the current state and accessing both current and past states. We formalize persistent le systems as a problem in data structures, and analyze {{it in the context of}} the external memory model. We begin by considering the design of our initial solution to this problem from the PersiFS 1 <b>le</b> <b>system,</b> which is based on a log of metadata changes and an indirection layer for storing le data. These " data structures support the desired operations, but are not asymptotically ecient. Applying more advanced data struc-tures, we rene the design into the next version, PersiFS 2. We use B +-trees for le content in-dexing in order to improve the space eciency of the system, and we present a novel partially-persistent B+-tree design, which can be used to track changes to les with logarithmic modica-tion and query cost. PersiFS 2 has been imple-mented as a working <b>le</b> <b>system</b> with these data structures, and our measurements indicate that the new <b>le</b> <b>system</b> data structure provides dra-matically improved access time for previous revi-sions with a small increase in cost for modica-tions. ...|$|E
40|$|Improvements in the {{processing}} speed of multiprocessors are outpacing {{improvements in the}} speed of disk hardware. Parallel disk I/O subsystems have been proposed as one way {{to close the gap}} between processor and disk speeds. Such parallel disk systems require parallel <b>le</b> <b>system</b> software to avoid performance-limiting bottlenecks. We discuss cache management techniques {{that can be used in}} a parallel <b>le</b> <b>system</b> implementation for multiprocessors with scienti c workloads. We examine several writeback policies, and give results of experiments that test their performance...|$|E
40|$|This paper {{deals with}} static data {{management}} in computer systems connected by networks. A basic functionality in these systems is the interactive use of shared data objects {{that can be}} accessed from each computer in the system. Examples for these objects are les in distributed <b>le</b> <b>systems,</b> cache lines in virtual shared memory systems, or pages in the WWW. In the static scenario we are given read and write request frequencies for each computer-object pair. The goal is to calculate a placement of the objects to the memory modules, possibly with redundancy, such that a given cost function is minimized. With th...|$|R
40|$|We discuss {{robustness}} in <b>LE</b> <b>systems</b> {{from the}} perspective of engineering, and the predictability of both outputs and construction process that this entails. We present an architectural system that contributes to engineering robustness and low-overhead systems development (GATE, a General Architecture for Text Engineering). To verify our ideas we present results from the development of a multi-purpose cross-genre Named Entity recognition system. This system aims be robust across diverse input types, and to reduce the need for costly and time-consuming adaptation of systems to new applications, with its capability to process texts from widely di#ering domains and genres...|$|R
40|$|In this paper, we {{introduce}} {{a system for}} handling very large datasets, which need to be stored across multiple computing sites. Data distribution introduces complex management issues, particularly as computing sites may make use of different storage systems with different internal organizations. The motivation for our work is the ATLAS Experiment for the Large Hadron Collider (LHC) at CERN, where the authors are involved in developing the data management middleware. This middleware, called DQ 2, is charged with shipping petabytes of data every month to research centers and universities worldwide and has achieved aggregate throughputs in excess of 1. 5 Gbytes/sec over the wide-area network. We describe DQ 2 âs design and implementation, which builds upon previous work on distributed ?<b>le</b> <b>systems,</b> peer-to-peer systems and Data Grids. We discuss its fault tolerance and scalability properties and brie?y describe results from its daily usage for the ATLAS Experiment...|$|R
40|$|Vendors cannot {{provide all}} the {{operating}} system services that users demand. As a result, {{there has been a}} persistent desire to make operating systems more exible and customizable. It is natural that object-oriented technology would come to bear on this area. However, many solutions have been disappointing when it comes to ease of use. This paper describes the design and implementation of Frigate, an object-oriented <b>le</b> <b>system.</b> The goal of Frigate isto provide amodular, extensible framework. The framework allows new extensions to be -in &quot; on the y. Frigate's focus di ers from most other <b>le</b> <b>system</b> designs in that itistargeted for use by ordinary users rather than by sophisticated operating system gurus. Thus, ease of use is a very important concern in the design. Frigate is fully implemented and supports a set of example <b>le</b> <b>system</b> extensions. ...|$|E
40|$|Most currentmultiprocessor le {{systems are}} {{designed}} to use multiple disks in parallel, using the high aggregate bandwidth to meet the growing I/O requirements of parallel scienti c applications. Many multiprocessor le systems provide applications with a conventional Unix-like interface, allowing the application to access multiple disks transparently. This interface conceals the parallelism within the <b>le</b> <b>system,</b> increasing the ease of programmability, but making it di cult or impossible for sophisticated programmers and libraries to use knowledge about their I/O needs to exploit that parallelism. In addition to providing an insu cient interface, most current multiprocessor le systems are optimized for a di erent workload than they {{are being asked to}} support. We introduce Galley, a new parallel <b>le</b> <b>system</b> that is intended to e ciently support realistic scienti c multiprocessor workloads. We discuss Galley's le structure and application interface, as well as the performance advantages o ered by that interface. Key words: Parallel I/O. Multiprocessor <b>le</b> <b>system.</b> Performance evaluation. IBM SP- 2. Scienti c Computing...|$|E
40|$|As the PC cluster {{has grown}} in {{popularity}} as a parallel computing platform, the demand for system software for this platform has grown as well. One common piece of system software available for many commercial parallel machines is the parallel <b>le</b> <b>system.</b> Parallel le systems oer higher I/O performance than single disk or RAID systems, provide users with a convenient and consistent name space across the parallel machine, support physical distribution of data across multiple disks and network entities (I/O nodes), and typically include additional I/O interfaces to support larger les and control of le parameters. The Parallel Virtual File System (PVFS) Project is an eort to provide a parallel <b>le</b> <b>system</b> for PC clusters. As a parallel <b>le</b> <b>system,</b> PVFS provides a global name space, striping of data across multiple I/O nodes, and multiple user interfaces. The system is implemented at the user level, so no kernel modi cations are necessary to install or run the system. All communication [...] ...|$|E
40|$|As {{parallel}} computers are increasingly {{used to run}} scienti c applications with large data sets, and as processor speeds continue to increase, it becomes more important to provide fast, e ective parallel <b>le</b> <b>systems</b> for data storage and for temporary les. In an earlier work we demonstrated that a technique we call disk-directed I/O {{has the potential to}} provide consistent high performance for large, collective, structured I/O requests. In this paper we expand on this potential by demonstrating the ability of a disk-directed I/O system to read irregular subsets of data from a le, and to lter and distribute incoming data according to data-dependent functions. ...|$|R
5000|$|... 2008 : Das <b>System</b> (<b>Le</b> SystÃ¨me) by Falk Richter, Festival d'Avignon, ThÃ©Ã¢tre {{national}} de Bretagne ...|$|R
5000|$|ChannelNews [...] "OpenIO et Rozo <b>Systems,</b> <b>les</b> deux pÃ©pites franÃ§aises du SDS" [...] article Nov. 2015 ...|$|R
