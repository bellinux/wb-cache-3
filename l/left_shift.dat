346|419|Public
5|$|In cryptography, a Caesar cipher, {{also known}} as Caesar's cipher, the shift cipher, Caesar's code or Caesar shift, {{is one of the}} {{simplest}} and most widely known encryption techniques. It is a type of substitution cipher in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example, with a <b>left</b> <b>shift</b> of 3, D would be replaced by A, E would become B, and so on. The method is named after Julius Caesar, who used it in his private correspondence.|$|E
25|$|In the Portuguese keyboard, {{the dead}} tilde key, near the <b>left</b> <b>shift</b> key, has both the dead {{circumflex}} {{and the dead}} breve.|$|E
25|$|So for the <b>left</b> <b>shift</b> T, σp(T) is {{the open}} unit disk and σc(T) is the unit circle, whereas {{for the right}} shift T*, σr(T*) is the open unit disk and σc(T*) is the unit circle.|$|E
30|$|Step 5 : Calculate the <b>left</b> <b>shifting</b> {{priority}} {{according to}} the formulas (14)~(18) and perform <b>left</b> <b>shifting</b> operation following the principle of <b>left</b> <b>shifting.</b>|$|R
3000|$|... [...]. <b>Left</b> <b>shifting</b> {{priority}} {{also needs}} to consider the amount of traffic and interference, because the <b>left</b> <b>shifting</b> operation will reduce the interference to other cells and increase the interference to themselves. After obtaining the <b>left</b> <b>shifting</b> priority, we can select the cell from B [...]...|$|R
50|$|There {{are four}} basic ways to shift testing {{earlier in the}} {{lifecycle}} (that is, leftward on the classic V-model). These {{can be referred to}} as traditional <b>shift</b> <b>left</b> testing, incremental <b>shift</b> <b>left</b> testing, Agile/DevOps <b>shift</b> <b>left</b> testing, and model-based <b>shift</b> <b>left</b> testing.|$|R
25|$|Standard {{alphanumeric}} keyboards have keys {{that are}} on three-quarter inch centers (0.750inches, 19.05mm), and have a key travel of at least 0.150inches (3.81mm). Desktop computer keyboards, such as the 101-key US traditional keyboards or the 104-key Windows keyboards, include alphabetic characters, punctuation symbols, numbers {{and a variety of}} function keys. The internationally common 102/104 key keyboards have a smaller <b>left</b> <b>shift</b> key and an additional key with some more symbols between that and the letter to its right (usually Z or Y). Also the enter key is usually shaped differently. Computer keyboards are similar to electric-typewriter keyboards but contain additional keys, such as the command or Windows keys. There is no standard computer keyboard, although many manufacture imitate the keyboard of PCs. There are actually three different PC keyboard: the original PC keyboard with 84 keys, the AT keyboard also with 84 keys and the enhanced keyboard with 101 keys. The three differ somewhat in the placement of function keys, the control keys, the return key, and the shift key.|$|E
2500|$|For 1 < p < ∞, l p is reflexive. Define the <b>left</b> <b>shift</b> T : l p → l p by ...|$|E
2500|$|If the [...] key is {{held down}} {{at a certain point}} in the {{execution}} sequence, Windows Vista invokes the AutoPlay dialog regardless of any AutoPlay settings to the contrary. Previous versions of Windows do not execute the AutoRun task. It is essential that the <b>left</b> <b>Shift</b> key is used for this purpose as holding down the right Shift key for eight seconds invokes FilterKeys.|$|E
3000|$|Similar to {{the right}} {{shifting}} operation, we can compute the <b>left</b> <b>shifting</b> priority for the cells in B [...]...|$|R
50|$|As {{illustrated}} in the following figure, many projects developing large and complex software-reliant systems decompose development into {{a small number of}} increments (Vs) having correspondingly shorter durations. The <b>shift</b> <b>left</b> illustrated by the dashed red arrows occurs because parts of the single, large waterfall V model’s types of testing (shown in gray) are <b>shifted</b> <b>left</b> to become increments of the corresponding types of testing in the smaller incremental V models. When each increment is also a delivery to the customer and operations, then incremental <b>shift</b> <b>left</b> testing <b>shifts</b> both developmental testing and operational testing to the <b>left.</b> Incremental <b>shift</b> <b>left</b> testing is popular when developing large, complex systems, especially those incorporating significant amounts of hardware. Like traditional <b>shift</b> <b>left,</b> the transition to incremental <b>shift</b> <b>left</b> has also been largely completed.|$|R
5000|$|In the branle, dancers {{step to the}} <b>left,</b> <b>shifting</b> {{their weight}} <b>left,</b> and then close again, in two motions in the feel of [...]|$|R
2500|$|The letter [...] "Í" [...] {{is often}} placed {{left of the}} space key, leaving {{the width of the}} <b>left</b> <b>Shift</b> key intact. [...] "Ű" [...] may be located to the left of Backspace, making that key smaller, but {{allowing}} for a larger Enter key. Ű being close to Enter often leads to it being typed instead of hitting Enter, especially when one has just switched from a keyboard that has Ű next to backspace.|$|E
2500|$|Apart from serialization, {{the terms}} bit endianness and bit-level endianness are seldom used, as {{computer}} architectures where each individual bit {{has a unique}} address are rare. Individual bits or bit fields are accessed via their numerical value or, in high-level programming languages, assigned names, the effects of which, however, may be machine dependent or lack software portability. The natural numbering is that the arithmetic <b>left</b> <b>shift</b> 1<<n yields a mask for the bit of position n, a rule which exhibits the machine's (byte) endianness at least if [...] e.g. if used for indexing a sufficiently large bit array. Other numberings do occur in various documentations.|$|E
2500|$|Blood films {{display a}} range of abnormalities. A {{monocyte}} count of >1x109/L is essential for a diagnosis of CMML. Other features may include; leukocytosis (50% of cases); <b>left</b> <b>shift</b> and dysplasia of monocytes and granulocytes; presence of metamyelocytes, myelocytes and promonocytes; monocytes with hypersegmented/abnormal shaped nuclei, increased cytoplasmic basophilia and/or the presence of cytoplasmic granules; eosinophilia (in cases of CMML with eosinophilia); and spherocytosis (in cases of DCT positive haemolytic anaemia). Platelet counts may be reduced, increased or normal. Haemoglobin levels are usually reduced with normocytic and normochromic red blood cells. Autoantibodies and cold agglutinins may be present and 10% of CMML is DCT positive.|$|E
5000|$|POL (sr. Pomeri Levo, en. <b>Shift</b> <b>Left)</b> - <b>shifts</b> {{the bits}} of the {{accumulator}} to the left ...|$|R
5000|$|Let [...] be {{a linear}} code over a finite field (also called [...] Galois field) [...] of block length n. [...] {{is called a}} cyclic code if, for every {{codeword}} c=(c1,...,cn) from C, the word (cn,c1,...,cn-1) in [...] obtained by a cyclic right shift of components is again a codeword. Because one cyclic right shift is equal to n &minus; 1 cyclic <b>left</b> <b>shifts,</b> a cyclic code may also be defined via cyclic <b>left</b> <b>shifts.</b> Therefore the linear code [...] is cyclic precisely when it is invariant under all cyclic shifts.|$|R
50|$|When {{representing}} {{elements as}} a binary string (e.g. in GF(23) {{the most significant}} bit represents β22=β4, the middle bit represents β21=β2, and the least significant bit represents β20=β), we can square elements by doing a <b>left</b> circular <b>shift</b> (<b>left</b> <b>shifting</b> β4 would give β8, but since we are working in GF(23) this wraps around to β). This makes the normal basis especially attractive for cryptosystems that utilize frequent squaring.|$|R
2500|$|Several other minor {{refinements}} {{were made}} to stethoscopes until, in the early 1960s, David Littmann, a Harvard Medical School professor, created a new stethoscope that was lighter than previous models and had improved acoustics. In the late 1970s, 3M-Littmann introduced the tunable diaphragm: a very hard (G-10) glass-epoxy resin diaphragm member with an overmolded silicone flexible acoustic surround which permitted increased excursion of the diaphragm member in a Z-axis {{with respect to the}} plane of the sound collecting area. The <b>left</b> <b>shift</b> to a lower resonant frequency increases the volume of some low frequency sounds due to the longer waves propagated by the increased excursion of the hard diaphragm member suspended in the concentric accountic surround. Conversely, restricting excursion of the diaphragm by pressing the stethoscope diaphragm surface firmly against the anatomical area overlying the physiological sounds of interest, the acoustic surround could also be used to dampen excursion of the diaphragm in response to [...] "z"-axis pressure against a concentric fret. This raises the frequency bias by shortening the wavelength to auscultate a higher range of physiological sounds.|$|E
6000|$|... "Yes, but, say, before-you-go-lemme-tell-ya-somef'n. You've {{never seen}} this boy of mine, not when he was feeling right. Believe me, he's there! He's a wizard. He's a Hindoo! Say, he's been practising up a <b>left</b> <b>shift</b> that..." ...|$|E
5000|$|File:DES-key-schedule.png|thumb|250px|— The key-schedule of DESrect 96 28 298 58 Permuted choice 1rect 127 122 268 155 Permuted choice 2rect 127 216 268 249 Permuted choice 2rect 127 357 268 390 Permuted choice 2rect 127 451 268 484 Permuted choice 2rect 96 91 127 116 <b>Left</b> <b>shift</b> by 1rect 268 91 299 116 <b>Left</b> <b>shift</b> by 1rect 96 185 127 210 <b>Left</b> <b>shift</b> by 1rect 268 185 299 210 <b>Left</b> <b>shift</b> by 1rect 96 326 127 351 <b>Left</b> <b>shift</b> by 2rect 268 326 299 351 <b>Left</b> <b>shift</b> by 2rect 96 419 127 444 <b>Left</b> <b>shift</b> by 1rect 268 419 299 444 <b>Left</b> <b>shift</b> by 1Figure 3 {{illustrates}} the key schedule for encryption—the algorithm which generates the subkeys. Initially, 56 {{bits of the}} key are selected from the initial 64 by Permuted Choice 1 (PC-1)—the remaining eight bits are either discarded or used as parity check bits. The 56 bits are then divided into two 28-bit halves; each half is thereafter treated separately. In successive rounds, both halves are rotated left by one or two bits (specified for each round), and then 48 subkey bits are selected by Permuted Choice 2 (PC-2)—24 bits from the left half, and 24 from the right. The rotations (denoted by [...] "<<<" [...] in the diagram) mean that {{a different set of}} bits is used in each subkey; each bit is used in approximately 14 out of the 16 subkeys.|$|E
5000|$|... {{spans the}} entire algebra. The {{horizontal}} distribution [...] spanned by <b>left</b> <b>shifts</b> of [...] and [...] is completely non-integrable. Then choosing any smooth positive quadratic form on [...] gives a sub-Riemannian metric on the group.|$|R
50|$|Decrease in {{myocardial}} {{mass of the}} <b>left</b> ventricle will <b>shift</b> {{the balance}} of depolarisation towards the right. For example, scarring and atrophy caused by ischaemia of the left ventricle will cause depolarisation of {{the left side of}} the heart to be less forceful. Hence, depolarisation of the right ventricle will be greater in amplitude than <b>left,</b> <b>shifting</b> the axis to the right.|$|R
3000|$|... − 1 and 2 n+ 1 − 1 can be {{achieved}} by a <b>left</b> circular <b>shift</b> (<b>left</b> rotate) for l positions, whereas the modular multiplication and shift for 2 [...]...|$|R
50|$|The <b>left</b> <b>shift</b> S* is Fredholm with index 1.|$|E
5000|$|... #Subtitle level 3: Equivalence of {{arithmetic}} <b>left</b> <b>shift</b> and multiplication ...|$|E
50|$|In C and C++, {{operator}} << {{represents a}} binary <b>left</b> <b>shift.</b>|$|E
5000|$|... 104 [...] 103 [...] 102 [...] 101 [...] 100 [...] Original binary 0000 0000 0000 0000 0000 1111111011011100 Initialization 0000 0000 0000 0000 0001 1111110110111000 <b>Shift</b> <b>left</b> (1st) 0000 0000 0000 0000 0011 1111101101110000 <b>Shift</b> <b>left</b> (2nd) 0000 0000 0000 0000 0111 1111011011100000 <b>Shift</b> <b>left</b> (3rd) 0000 0000 0000 0000 1010 1111011011100000 Add 3 to 100, {{since it}} was 7 0000 0000 0000 0001 0101 1110110111000000 <b>Shift</b> <b>left</b> (4th) 0000 0000 0000 0001 1000 1110110111000000 Add 3 to 100, {{since it was}} 5 0000 0000 0000 0011 0001 1101101110000000 <b>Shift</b> <b>left</b> (5th) 0000 0000 0000 0110 0011 1011011100000000 <b>Shift</b> <b>left</b> (6th) 0000 0000 0000 1001 0011 1011011100000000 Add 3 to 101, since it was 6 0000 0000 0001 0010 0111 0110111000000000 <b>Shift</b> <b>left</b> (7th) 0000 0000 0001 0010 1010 0110111000000000 Add 3 to 100, since it was 7 0000 0000 0010 0101 0100 1101110000000000 <b>Shift</b> <b>left</b> (8th) 0000 0000 0010 1000 0100 1101110000000000 Add 3 to 101, since it was 5 0000 0000 0101 0000 1001 1011100000000000 <b>Shift</b> <b>left</b> (9th) 0000 0000 1000 0000 1001 1011100000000000 Add 3 to 102, since it was 5 0000 0000 1000 0000 1100 1011100000000000 Add 3 to 100, since it was 9 0000 0001 0000 0001 1001 0111000000000000 <b>Shift</b> <b>left</b> (10th) 0000 0001 0000 0001 1100 0111000000000000 Add 3 to 100, since it was 9 0000 0010 0000 0011 1000 1110000000000000 <b>Shift</b> <b>left</b> (11th) 0000 0010 0000 0011 1011 1110000000000000 Add 3 to 100, since it was 8 0000 0100 0000 0111 0111 1100000000000000 <b>Shift</b> <b>left</b> (12th) 0000 0100 0000 1010 0111 1100000000000000 Add 3 to 101, since it was 7 0000 0100 0000 1010 1010 1100000000000000 Add 3 to 100, since it was 7 0000 1000 0001 0101 0101 1000000000000000 <b>Shift</b> <b>left</b> (13th) 0000 1011 0001 0101 0101 1000000000000000 Add 3 to 103, since it was 8 0000 1011 0001 1000 0101 1000000000000000 Add 3 to 101, since it was 5 0000 1011 0001 1000 1000 1000000000000000 Add 3 to 100, since it was 5 0001 0110 0011 0001 0001 0000000000000000 <b>Shift</b> <b>left</b> (14th) 0001 1001 0011 0001 0001 0000000000000000 Add 3 to 103, since it was 6 0011 0010 0110 0010 0010 0000000000000000 <b>Shift</b> <b>left</b> (15th) 0011 0010 1001 0010 0010 0000000000000000 Add 3 to 102, since it was 6 0110 0101 0010 0100 0100 0000000000000000 <b>Shift</b> <b>left</b> (16th) 6 5 2 4 4 BCD ...|$|R
3000|$|... is {{input to}} the {{subtraction}} counter unit (SCU), {{by which the}} OCU is triggered to enable the decompression. Note that a delay unit (DU) is applied to adjust the time slot, and one 2 -bits <b>left</b> <b>shifting</b> unit (LSU) is used to realize the multiply operation.|$|R
5000|$|The <b>shift</b> <b>left</b> and <b>shift</b> right {{operations}} may {{shift the}} tape head across the tape, but when actually building a Turing machine {{it is more}} practical to make the tape slide back and forth under the head instead.|$|R
5000|$|... #Subtitle level 2: Proof of {{formula for}} {{cyclical}} <b>left</b> <b>shift</b> operation ...|$|E
5000|$|... #Caption: Peripheral blood (MGG stain): marked leukocytosis with {{granulocyte}} <b>left</b> <b>shift</b> ...|$|E
5000|$|The <b>left</b> <b>shift</b> {{operator}} acts on one-sided infinite {{sequence of}} numbers by ...|$|E
3000|$|We do {{not deal}} with the cells in the non-{{shifting}} group, and we shift to the right for the cells in the right-shifting group and <b>shift</b> to the <b>left</b> for the cells in the left-shifting group. Next, we will obtain the right shifting priority Prior_R^i [...] and <b>left</b> <b>shifting</b> priority Prior_L^i, respectively.|$|R
5000|$|... which {{represents}} the results after <b>left</b> cyclical <b>shift</b> of k positions.|$|R
25|$|Similarly, when a two's-complement {{number is}} {{shifted to the}} right, the most-significant bit, which {{contains}} magnitude and the sign information, must be maintained. However, when <b>shifted</b> to the <b>left,</b> a 0 is shifted in. These rules preserve the common semantics that <b>left</b> <b>shifts</b> multiply the number by two and right shifts divide the number by two.|$|R
