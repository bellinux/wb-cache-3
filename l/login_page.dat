59|29|Public
2500|$|Google has {{supported}} secure HTTPS {{since the day}} it launched. In the beginning, it was only default on the <b>login</b> <b>page,</b> a reason that Google engineer Ariel Rideout stated was because HTTPS made [...] "your mail slower". However, users could manually switch to secure HTTPS mode inside the inbox after logging in. In July 2008, Google simplified the ability to manually enable secure mode, with a toggle in the settings menu.|$|E
5000|$|... #Caption: This image {{displays}} the <b>login</b> <b>page</b> of Daylight Linux Version 2 ...|$|E
5000|$|... #Caption: Screenshot of {{a website}} <b>login</b> <b>page</b> using a CAPTCHA {{defense against the}} {{creation}} of accounts by bots ...|$|E
5000|$|Security: sets up Spring Security, {{including}} <b>login</b> <b>pages,</b> {{filters and}} dependencies ...|$|R
50|$|Hospice Journey {{personalized}} websites {{created by}} users are only {{accessible to the}} site creator and the guests he/she invites. Users must have an account and login to see the site. Hospice Journey's <b>login</b> <b>pages</b> are encrypted using the https protocol.|$|R
25|$|Apart from {{standard}} web application security recommendations website owners can reduce {{their exposure to}} opportunistic hacking by only allowing search engines to index the public parts of their websites (with robots.txt) and explicitly blocking them from indexing transactional parts (<b>login</b> <b>pages,</b> private pages, etc.).|$|R
5000|$|... #Caption: A {{screenshot}} of the Outlook Web App <b>login</b> <b>page</b> that {{is displayed}} when navigating to Clinton's email service ...|$|E
5000|$|In {{order to}} test the <b>login</b> <b>page,</b> it is {{necessary}} to pass some sample input vectors [...] In this context [...] is called a test vector.|$|E
5000|$|For an example, {{consider}} a <b>login</b> <b>page</b> with two input fields: a username field and a password field. In that case, the login {{system can be}} described as: ...|$|E
50|$|Many pornographic paysites use {{referrer}} {{information to}} secure their websites. Only web browsers arriving from a small set of approved (<b>login)</b> <b>pages</b> are given access; this facilitates the sharing of materials {{among a group of}} cooperating paysites. Referrer spoofing is often used to gain free access to these paysites.|$|R
5000|$|SecureWorks had {{tracked the}} {{activities}} of Fancy Bear {{for more than a}} year before the cyberattack, and in June 2016 had reported the group made use of malicious Bitly links and fake Google <b>login</b> <b>pages</b> to trick targets into divulging their passwords. However, as the New York Times reported: [...] "The hackers made a critical error by leaving some of their Bitly accounts public, making it possible for SecureWorks to trace 9,000 of their links to nearly 4,000 Gmail accounts targeted between October 2015 and May 2016 with fake Google <b>login</b> <b>pages</b> and security alerts designed to trick users into turning over their passwords." [...] Of this list of targeted accounts, more than one hundred were policy advisors to Clinton, or members of her presidential campaign, and by June, twenty staff members had clicked on the phishing links.|$|R
2500|$|According to the State Department, {{there were}} 2,093 email chains on the server that were retroactively marked as {{classified}} by the State Department at the [...] "Confidential" [...] confidential level. TG-4127 accessed Hilary for America Campaign Gmail accounts through spoofed <b>login</b> <b>pages.</b> Victims {{thought they were}} standard pages and hackers were able to access their email account.|$|R
5000|$|Next, head to {{the portal}} and in the <b>login</b> <b>page,</b> click on [...] "First Time Login" [...] whereby you will be setting your {{personal}} details such as username, password, three security questions and answers.|$|E
50|$|The roaming {{customer}} uses {{a regular}} web browser to access a <b>login</b> <b>page</b> on the captive portal {{where he can}} fill in his credentials (typically his username and password) {{to get access to}} the network.|$|E
5000|$|Provides a user {{interface}} that displays {{a set of}} Information Card icons from which the user selects their preferred i-card when authentication is required by a local application or relying party (e.g. a web site's <b>login</b> <b>page).</b>|$|E
40|$|Google hacking {{is a term}} to {{describe}} the search queries that find out security and privacy flaws. Finding vulnerable servers and web applications, server fingerprinting, accessing to admin and user <b>login</b> <b>pages</b> and revealing username-passwords are all possible in Google with a single click. Google can also reveal secrets of cryptography applications, i. e., clear text and hashed passwords, secret and private keys, encrypted messages, signed messages etc. In this paper, advanced search techniques in Google and the search queries that reveal cryptographic secrets are explained with examples in details. ...|$|R
40|$|Current {{authentication}} practices {{suffer from}} many loopholes. To access an online banking facility, a customer with Internet access {{would need to}} register with the institution for the service, and set up some password for authentication process. Basically {{there are two types}} of password inputs allowed by banking websites these days. The first one is the traditional input in which we enter the password using keyboards and the second one is the virtual input in which the system accepts password using a virtual keyboard available in <b>login</b> <b>pages</b> of all bank websites. Virtual keyboards are considered as additional security steps for accessing online banking websites but this paper will describe how weak this implementation can be and what security measures can be adopted to maintain the confidentiality...|$|R
5000|$|Session side jacking, {{where the}} {{attacker}} uses packet sniffing to read network traffic between two parties {{to steal the}} session cookie. Many web sites use SSL encryption for <b>login</b> <b>pages</b> to prevent attackers from seeing the password, but do not use encryption {{for the rest of}} the site once authenticated. This allows attackers that can read the network traffic to intercept all the data that is submitted to the server or web pages viewed by the client. Since this data includes the session cookie, it allows him to impersonate the victim, even if the password itself is not compromised. [...] Unsecured Wi-Fi hotspots are particularly vulnerable, as anyone sharing the network will generally be able to read most of the web traffic between other nodes and the access point.|$|R
5000|$|The poletop radios {{provide access}} to the network, SSID [...] "Wireless Oakland", which greets the user with a <b>login</b> <b>page.</b> Free {{internet}} service is being offered at a 128 kbit/s by MichTel Communications, which will charge fees for additional download speeds and services.|$|E
50|$|If {{the user}} needs to access another web application, the login server {{receives}} the login cookie {{and provides the}} granting cookie without presenting a <b>login</b> <b>page.</b> Notice that the web applications never receive the password (or some other secret) the user uses to authenticate.|$|E
50|$|The FBI {{has claimed}} that the real IP address of the Silk Road server was found via data leaked {{directly}} from the site's CAPTCHA, but security researchers believe that the PHP <b>login</b> <b>page</b> was manipulated to output its $_SERVER variable and real IP following site maintenance reconfiguration.|$|E
40|$|Web {{users are}} {{increasingly}} victims of phishing, spoofing and malware attacks. In this article, we discuss existing and proposed defense mechanisms. We highlight the vulnerabilities of current defenses, {{and the challenges}} of validating and adopting new defenses. 1 SSL-based Logon Most web browsers and servers support the Secure Socket Layer (SSL) protocol (or its standard version, the Transaction Layer Security (TLS) standard); see [R 00]. SSL (and TLS) are advanced, public-key cryptographic protocols. Their main goal is it to protect the confidentiality of sensitive traffic against an eavesdropper, who can listen to the traffic between the client and the server. For example, merchant sites and <b>login</b> <b>pages</b> use SSL to protect, respectively, credit card numbers and passwords, sent by users to the servers. 1. 1 Simplified description of SSL as used in most sites. SSL operation {{is divided into two}} phases: a handshake phase and a data transfer phase. We illustrate this in Figure 2, for connection between a client and an imaginary bank sit...|$|R
40|$|The theft {{attacks of}} web digital identities, e. g., phishing, and pharming, {{could result in}} severe loss to users and vendors, and even hold users back from using online services, {{e-business}} services, especially. In this paper, we propose an approach, referred to as automated individual white-list (AIWL), to protect user’s web digital identities. AIWL leverages a Naïve Bayesian classifier to automatically maintain an individual white-list of a user. If the user tries to submit his or her account information to a web site that does not match the white-list, AIWL will alert the user of the possible attack. Furthermore, AIWL keeps track {{of the features of}} <b>login</b> <b>pages</b> (e. g., IP addresses, document object model (DOM) paths of input widgets) in the individual white-list. By checking the legitimacy of these features, AIWL can efficiently defend users against hard attacks, especially pharming, and even dynamic pharming. Our experimental results and user studies show that AIWL is an efficient tool for protecting web digital identities...|$|R
5000|$|Extras (plugins), such as {{search engine}} {{optimized}} URLs, custom entrance, <b>login</b> and logout <b>pages,</b> display specific themes based upon user's language, {{time of day}} or date and custom advertising pages.|$|R
5000|$|For {{performance}} measurement, operators typically {{measure the}} performance of their networks at different levels. They either use per-port metrics (how much traffic on port 80 flowed between a client and a server and how long did it take) or they rely on end-user metrics (how fast did the <b>login</b> <b>page</b> load for Bob.) ...|$|E
50|$|Another popular use {{of cookies}} is for logging into websites. When the user visits a website's <b>login</b> <b>page,</b> the web server {{typically}} sends the client a cookie containing a unique session identifier. When the user successfully logs in, the server remembers that that particular session identifier has been authenticated, and grants the user {{access to its}} services.|$|E
50|$|QR codes {{can be used}} to log into websites: a QR code {{is shown}} on the <b>login</b> <b>page</b> on a {{computer}} screen, and when a registered user scans it with a verified smartphone, they will automatically be logged in. Authentication is performed by the smartphone which contacts the server. Google tested such a login method in January 2012.|$|E
40|$|Users {{increasingly}} entrust websites {{with their}} personal and sensitive information. Sites commonly protect this information using user-supplied credentials (i. e., logins). We conductedameasurementstudyoftopwebsitesandsurprisingly {{found that they}} transmit these credentials in the clear, thus leaving them vulnerable to eavesdropping. To make matters worse, users are often unaware of this threat because sites and browsers reflect little information about how logins are handled. As a first step towards solving this problem, we develop techniques for measuring logins on browsers to predict how logins would be handled before they are submitted. We demonstrate that achieving this goal requires instrumentation at the application layer and inside browsers. Specifically, network traces are not sufficient for determining login safety in general due to application-layer encryption; similarly, application-layer traces are insufficient because login submission logic may be generated in the browser at runtime. Based onameasurement studyusing <b>login</b> <b>pages</b> gathered from popular sites {{in addition to those}} visited by users through normal Web browsing, we found such predictions to be quite challenging {{due to a lack of}} any standard formats for Web logins. However, by applying a carefully chosen set of rules when measuring logins, we almost always correctly predict how logins will be handled...|$|R
30|$|To {{set up a}} SecurePost group, users {{require a}} {{corresponding}} OSN account on the platform of their choice. They can either use an established account (such as a Twitter handle for a newspaper) or set up an anonymous account. The application presents the platform specific API based <b>login</b> web <b>page</b> to the user. After a user logs on, the OSN platforms returns an access token. This is a common design pattern used by other social media applications. The access token is forwarded to the proxy server (discussed in Section 6.2) and discarded by the application.|$|R
50|$|ALIPORE SOCIAL WELFARE TRUST also builds {{houses for}} the {{homeless}} and provide help to the poor for the sources of their livelihood. For this purpose Alipore Social Welfare Trust have joined hands with IMWS (Indian Muslim Welfare Society) Batley UK. For detailed video clips and pictorial albums, please <b>login</b> to Facebook <b>Page</b> by clicking IMWS-ASWT HOUSING & EMPOWERMENT PROJECT.|$|R
50|$|The {{distinctive}} logo {{shown to}} the left was the system's original ASCII art banner, appearing on the text-only service's dial-up <b>login</b> <b>page.</b> MindVox was originally accessible only through telnet, ftp and direct dial-up. Its existence predates the invention of SSH and widespread use of the World Wide Web by several years. In later years, MindVox was also accessible via the web.|$|E
5000|$|A {{client device}} {{connects to the}} Secure Global Desktop Server either via a {{supported}} Java-enabled browser or via Native Client software (this [...] "native client" [...] can be downloaded from a SGD installation's <b>login</b> <b>page,</b> i.e. instead of logging in and letting the Java applet handle the connection automatically for you, you could instead do it manually by downloading this [...] "native client" [...] from the SGD main <b>login</b> <b>page,</b> install it locally, and then launch it and connect via this). When you connect via a browser {{the first time as}} a client, the SGD client (the client-side of the aforementioned Java component) is downloaded so you can then SSL-encrypt your connection. The system officially supports Mozilla Firefox, Internet Explorer, and Safari, but other browsers might work too {{for as long as they}} have access to a working Java-plugin. The latest Java Runtime Environment is recommended but at least version 1.5 is required.|$|E
5000|$|Google has {{supported}} secure HTTPS {{since the day}} it launched. In the beginning, it was only default on the <b>login</b> <b>page,</b> a reason that Google engineer Ariel Rideout stated was because HTTPS made [...] "your mail slower". However, users could manually switch to secure HTTPS mode inside the inbox after logging in. In July 2008, Google simplified the ability to manually enable secure mode, with a toggle in the settings menu.|$|E
40|$|We {{introduce}} a biometric trait {{based on the}} user behavior extracted from his interaction with a web page. We propose the integration of this soft biometric trait in a conventional <b>login</b> Internet <b>page</b> to enhance {{the security of the}} system. We call this security layer WebBiometrics. This layer monitors the user mouse movements while he clicks his PIN code numbers. The proposed biometric method provides a non-intrusive soft behavioral biometric add-on to enhance on-line security. We describe the functionality of the system, the set of algorithms developed for the verification framework and preliminary experimental results. We also present quantitative measures of security enhancement offered by the introduction of this soft biometric compared to a PIN only based web access. 1...|$|R
30|$|User {{interfaces}} {{are extremely}} important {{as this is}} how a software product is finally judged by end users. However, intuitive, easy to use GUIs are very time consuming and resource intensive to produce. Research projects often {{do not have the}} time or resources to spend on this feature, as often there is little “research” in providing this functionality. It is primarily an engineering task. When we decided to make the Eucalyptus S 3 service accessible via a standard web browser, we effectively had to build the entire S 3 front end again as dynamic web pages served from an Apache server. This consumed a large amount of development effort from the short six month project, and, in retrospect, was probably not the best use of our very limited resources. Consequently, in a subsequent project (Sticky Policy Based Open Source Security APIs for the Cloud), in which we have added federated access to OpenStack, we decided to enhance the existing OpenStack command line interfaces, rather than produce new browser based interfaces. This was certainly less time consuming, but it was not without its problems. Specifically, all of the existing IdPs expect users to be using web browsers for authentication, and therefore do not provide command line interfaces for this. Furthermore their web based <b>login</b> <b>pages</b> are all formatted differently and present different content to their users. So it would have been impractical to try to parse these and extract the username and password fields from them. We solved this problem by invoking the web browser from the command line interface, which allows the user to login using the existing IdP browser based interface with which he is familiar, and then asking the user to continue with the command line interface, now that he has been authenticated.|$|R
40|$|People {{responsible}} for IT-systems are increasingly {{confronted with the}} concept of Application Service Providing. While some companies provide such services for almost any kind of customer, some major organisations start to set up their own internal ASP-departments. All these different appearances of the ASP-model are based on the importance of security, minimised administrative work and the ability to handle different clients {{at the same time to}} become profitable and get accepted by the market. Existing ASP solutions have not yet proved to be satisfying as far as these requirements are concerned or they are not available for prospects at the moment. Here is the starting point of this diploma thesis. The intention was to conceptually design a framework and implement a prototype to enable ASP companies and departments to easily set up the infrastructure for the ASP model. For this purpose, it was necessary to evaluate different base technologies and to integrate existing solutions. Important components were the personalised user interface of the portal, the business logic implemented in scripts and components, the user management using databases and a server farm to provide applications. Interfaces were defined for billing components, licensing and monitoring-tools. The use of technologies to secure the infrastructure were also evaluated. The prototype allows an ASP to set up an extensible infrastructure, including <b>login</b> <b>pages</b> hosted by a web server, the user management connected via ODBC database, the administration of the back-end systems via web front-ends and the providing of applications such as office packages via Internet. The business logic is encapsulated in COM components or included in the web pages via VBScript. The prototype could be used in the INI-SC since there are plans of making the INI-SC act as internal ASP department and provide a variety of applications...|$|R
