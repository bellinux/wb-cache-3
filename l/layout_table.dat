11|180|Public
2500|$|... a text {{renderer}} whose layout/shaping engine internally reorders the glyph mapped {{from the}} vowel [...] before the glyph mapped from consonants, and a basic font containing a spacing glyph for that vowel; such approach {{will be used}} with TrueType and OpenType fonts, without needing any OpenType <b>layout</b> <b>table</b> in that font; there already exist such fonts, but still not any compatible OpenType layout engine, because it must contain a specific code to support the Buginese script (compliant TrueType fonts for the Buginese script already exist, such as Saweri or Code2000, but the Uniscribe layout engine used by most versions of Microsoft Windows still does not have this support (integrated only in Windows Server 2012 R2 and Windows 8.1), so the Buginese script still cannot be used in Microsoft Word and Internet Explorer; but alternate layout engines for OpenType {{may be used in}} other word processors and web browsers, provided that these text layout engines are also updated to support the script: this includes the Pango text layout engine currently ported on Linux, Windows, OS X, and some other platforms, but which currently lacks this necessary support); ...|$|E
50|$|The median polish is an {{exploratory}} data analysis procedure {{proposed by the}} statistician John Tukey. It finds an additively-fit model for data in a two-way <b>layout</b> <b>table</b> (usually, results from a factorial experiment) of the form row effect + column effect + overall median.|$|E
5000|$|... mona-outline version 2.30pre2 is {{included}} with the source code for Mona Font source package, which consists of a subset of glyphs found in Mona. OpenType <b>layout</b> <b>table</b> supports standard ligature in default language. When the font is viewed under Windows Font Viewer, a horizontal stroke overlays the glyph.|$|E
50|$|OpenType <b>layout</b> <b>tables</b> support Vertical Writing for kana under default and Japanese languages.|$|R
5000|$|Layout {{analysis}} or [...] "zoning"Identifies columns, paragraphs, captions, etc. {{as distinct}} blocks. Especially important in multi-column <b>layouts</b> and <b>tables.</b>|$|R
50|$|Courier Standard, Courier Standard Bold, Courier Standard Bold Italic, Courier Standard Italic are fonts {{distributed}} with Adobe Reader 6, as {{a replacement}} for the PostScript Courier fonts. The stroke terminators are flat instead of round. It contains code pages 1252, Windows OEM Character Set. The font is Hinted and Smoothed for all point sizes. It contains OpenType <b>layout</b> <b>tables</b> aalt, dlig, frac, ordn, sups for Default Language in Latin script; dlig for TUR language in Latin script. Each font contains 374 glyphs.|$|R
5000|$|Because of its {{compliance}} with Japanese Industrial Standard for encoding JIS X 0213:2004, variant characters have different stroke layouts {{from the ones}} used in older MS Gothic and other conventional fonts. To use older characters in a web page, for example, Meiryo needs to be activated manually. (MingLiU and PMingLiU version 5.03 follow the standards set by Taiwan's Ministry of Education and the reference rendering used in Unicode documents, which also causes similar dissatisfaction among users. On the other hand, MS Gothic, MS PGothic, MS UI Gothic, MS Mincho, MS PMincho can be updated to version 5.00, which include JIS X 0213:2004 support to match the characters used in Meiryo, and also incorporated JIS90 Forms OpenType <b>Layout</b> <b>Table</b> for users preferring the old glyphs. For Vista users, Microsoft also offered an update to make MS Gothic and MS Mincho font families to use characters in JIS X 0208-1990.) ...|$|E
5000|$|... a text {{renderer}} whose layout/shaping engine internally reorders the glyph mapped {{from the}} vowel e before the glyph mapped from consonants, and a basic font containing a spacing glyph for that vowel; such approach {{will be used}} with TrueType and OpenType fonts, without needing any OpenType <b>layout</b> <b>table</b> in that font; there already exist such fonts, but still not any compatible OpenType layout engine, because it must contain a specific code to support the Buginese script (compliant TrueType fonts for the Buginese script already exist, such as Saweri or Code2000, but the Uniscribe layout engine used by most versions of Microsoft Windows still does not have this support (integrated only in Windows Server 2012 R2 and Windows 8.1), so the Buginese script still cannot be used in Microsoft Word and Internet Explorer; but alternate layout engines for OpenType {{may be used in}} other word processors and web browsers, provided that these text layout engines are also updated to support the script: this includes the Pango text layout engine currently ported on Linux, Windows, OS X, and some other platforms, but which currently lacks this necessary support); ...|$|E
40|$|We {{propose a}} method for dynamic content {{management}} of large and structurally heterogeneous websites. The content management system (CMS) discussed in this paper allows even non-specialists to easily update webpages and add new ones without knowing anything {{about the details of}} the HTML language. The database driven implementation of this CMS adopts a recursive structure that constructs a complex web page using structural units like a <b>layout</b> <b>table</b> to arrange the elementary atomic units of information. This CMS completely separates content from structure and always guarantees well-formed websites, including a well-formed navigation structure. This system is currently used by the Carnegie Institution’s Department of Plant Biology as a tool for expanding their project website and for incorporating new experimental data with highly heterogeneous structure. Many organizations need to provide accurate and up-to-date information on their web pages. While this task is relatively straightforward fo...|$|E
5000|$|Cascading Style Sheets (CSS) were {{developed}} to improve the separation between design and content, and move back towards a semantic organization of content on the Web. The term [...] "tableless design” implies the use of CSS rather than <b>layout</b> <b>tables</b> to position HTML elements on the page. HTML tables still have their legitimate place when presenting tabular information within web pages, and are also sometimes still used as layout devices in situations for which CSS support is poor or problematical, like vertically centering an element.|$|R
5000|$|The [...] "Electrostar" [...] is a four-coach EMU {{built by}} Bombardier, with a 2+2 seating <b>layout,</b> <b>tables,</b> plug-sockets and free WiFi. The class began to enter service in September 2016 on weekday peak {{services}} between London Paddington and Hayes & Harlington using the existing {{overhead electrical equipment}} used by Heathrow Express, and can operate in four, eight and twelve-coach formations. Services using the class were extended to Maidenhead in May 2017; GWR will operate the class across the Thames Valley route once electrification work is complete.|$|R
5000|$|... #Caption: Raffald Experienced Housekeeper 2nd Course <b>Table</b> <b>Layout</b> ...|$|R
40|$|Incorporating {{evaluation}} metrics with GUI {{development tools}} will help designers create consistent interfaces in the future. Complexity in design of interfaces makes efficient evaluation impossible {{by a single}} consistency checking evaluation tool. Our f ocus is on developing a family of evaluation tools {{in order to make}} the evaluation process less cumbersome. We have developed a dialog box typeface and color table to facilitate detection of anomalies in color, font, font size, and font style. Concordance tools have been developed to spot variant capitalization and abbreviations globally in the interface and specifically in the button widgets. As buttons are frequently used widgets, a button <b>layout</b> <b>table</b> has been created to spot any inconsistencies in height, width and relative position between a given group of buttons if present. Finally, a terminology basket tool has been created to identify unwanted synonyms of computer related terms used in the interface which may be misleading to the end user. (Also cross-referenced as CAR-TR- 770) (Also cross-referenced as ISR-TR- 95 - 52...|$|E
40|$|Designing a user {{interface}} with a consistent visual design and textual properties with current generation GUI development tools is cumbersome. SHERLOCK, {{a family of}} consistency checking tools, {{has been designed to}} evaluate visual design and textual pro perties of interface, make the GUI evaluation process less arduous, and aid usability testing. SHERLOCK includes a dialog box summary table to pro vide a compact overview of visual properties of hundreds of dialog boxes of the interface. Terminology specific tools, like Interface Concordance, Terminology Baskets and Interface Speller have been developed. Button specific tools including Button Conco rdance and Button <b>Layout</b> <b>Table</b> have been created to detect variant capitalization, distinct typefaces, distinct colors, variant button sizes and inconsistent button placements. This paper describes the design, software architecture, and the use of SHERLOC K. An experiment with 60 subjects to study the effects of inconsistent interface terminology on user's performance showed 10 - 25 % speedup for consistent interfaces. SHERLOCK was tested with four commercial prototypes; the corresponding outputs, analysis a nd feedback from designers of these applications is presented. (Also cross-referenced as CAR-TR- 828...|$|E
40|$|The o-phenanthroline {{method was}} tested {{as to its}} {{applicability}} to the separate determination of iron in natural water: ionic ferrous iron, reducible iron, snd colloidally dispersed iron. In connection with this, {{the results of the}} following experiments are given in this paper. 1. Determination of the absorption curve of o-phenanthroline ferrous complex. (Figure 1.) 2. Construction of the calibration curve for a Purfrich's photometer with filter S 50, 15 cm cuvettes. (Figure 2.) 3. Examination of the effects of coexisting anions on the determination of iron by the method of three way <b>layout.</b> (<b>Table</b> 1., Table 2.) 4. Trial determinations of iron in three different states in solution. (Table 3., Table 4.) 5. Test of the applicability of this method to the determination of ionic ferrous iron and reducible iron in thermal water. (Table 5., Table 6.) From the above, it was revealed that ionic ferrous iron and reducible iron in natural water are separately determinable with sufficient accuracy by the o-phenanthroline method, and that ionic iron and colloidally dispersed iron are also separately determinable, when the dispersed iron is present in amount more than 1. 3 % of the total iron...|$|E
50|$|Co-ment allows {{groups of}} users to collaboratively {{elaborate}} online texts. It offers a wiki-style editing environment, supporting many syntaxes, and allows some finely controlled <b>layouts,</b> including <b>table</b> or images.|$|R
2500|$|The [...] "Electrostar" [...] is a four-coach EMU {{built by}} Bombardier, with a 2+2 seating <b>layout,</b> <b>tables,</b> plug-sockets and free WiFi. The class began to enter service in September 2016 on weekday peak {{services}} between London Paddington and Hayes & Harlington using the {{overhead electrical equipment}} used by Heathrow Express, and can operate in four, eight and twelve-coach formations. Services using the class were extended to Maidenhead in May 2017; GWR will operate the class across the Thames Valley route once electrification work is complete and will operate to Reading and Didcot Parkway from Jan 2018.|$|R
50|$|Versions 1.00 and 1.01 were {{supplied}} with Microsoft Office 2002 (Microsoft Office XP), Microsoft Office 2003 and the standalone versions of those suites' applications. It includes 50,377 glyphs (38,917 characters), which reduces Combining Diacritical Marks to 72, increases Miscellaneous Technical characters to 123, increases Private Use Area characters to 43, reduces Spacing Modifier Letters to 57. Code page 1361 (Korean Johab) was added. It adds <b>layout</b> <b>tables</b> for Devanagari, Gujarati, Gurmukhi, Kana (Hiragana & Katakana), Kannada, and Tamil. Its Han Ideographic tables were updated to support vertical writing. It covers all code points containing non-control characters in Unicode 2.1 and allows editable embedding.|$|R
40|$|Abstract—Designing user {{interfaces}} with consistent visual and textual properties is difficult. To demonstrate {{the harmful effects}} of inconsistency, we conducted an experiment with 60 subjects. Inconsistent interface terminology slowed user performance by 10 to 25 percent. Unfortunately, contemporary software tools provide only modest support for consistency control. Therefore, we developed SHERLOCK, a family of consistency analysis tools, evaluates visual and textual properties of {{user interfaces}}. It provides graphical analysis tools such as a dialog box summary table that presents a compact overview of visual properties of all dialog boxes. SHERLOCK provides terminology analysis tools including an Interface Concordance, an Interface Spellchecker, and Terminology Baskets to check for inconsistent use of familiar groups of terms. Button analysis tools include a Button Concordance and a Button <b>Layout</b> <b>Table</b> to detect variant capitalization, distinct typefaces, distinct colors, variant button sizes, and inconsistent button placements. This paper describes the design, software architecture, and the use of SHERLOCK. We tested SHERLOCK with four commercial prototypes. The outputs, analysis, and feedback from designers of the applications are presented. Index Terms—Graphical User Interfaces, evaluation tools, consistency, textual and visual style, assessment tools, metrics. 1 INTRODUCTION AND PREVIOUS RESEARCH Consistency in user interfaces follows the second law of thermodynamics. If nothing is done, then entropy will increase in the form of more and more inconsistency in your user interface...|$|E
40|$|A {{fast reactor}} {{benchmark}} problem {{in two and}} three space dimensions There is a high need for benchmark problems {{in order to test}} and to compare the performance and accuracy of computational methods and of computer codes for the solution of reactor physics problems. In what follows such a model-problem is described which has been designed mainly for neutron-diffusion calculations. The layout shown in pictures a, l. b), 2. a), 2. b) has its origin in the MARK I core design of the SNR 300, a sodium cooled fast breeder prototypereactor. Only some modi-fications have been made'in oder to facilitate the representation of the reactor in the computer code input. The whole benchmark problem consists of one three-dimensional model in triangularz-geometry (see pict. 1 a, 1. b)) and a consistent one in rectangular x-y-z-geometry (see pict. 2. a), 2. b)). For each of the two geometries two twodimensional models have been developed. Relatively big homogeneous material zones have been chosen and the energy range is divided into four groups only, so input preparation and computing time should be reasonable. Note that the control-rods are inserted to different positions (see pict. 2. b)). Table 1 gives the detailed coqosition of the different mixtures used (note that the mixture numbers 5, 6, 7 are neither defined there nor used in the <b>layout),</b> <b>table</b> 2 gives alternatively macroscopic crosssections for all energy groups (which were obtained by a standard condensation process starting from the 26 group KFKINR cross sectionThe boundary conditions are chosen {{in such a way that}} pictures 1. a) and l. b) resp. 2. a), and 2. b) represent one sixth resp. a quarter of the whole reactor. Outer boundary conditions are logarithmic, i. e. flux equal to zero at extrapolated boundaries. Note, that due to symmetries, as shown in picture l. a), it is possible to calculat...|$|E
5000|$|... #Caption: Foldout {{engraving}} of <b>table</b> <b>layout</b> for {{an elegant}} second course ...|$|R
5000|$|... #Caption: A typical 1st class <b>table</b> <b>layout</b> on a Virgin Trains Super Voyager ...|$|R
2500|$|... a text {{renderer}} {{that does}} not implement the reordering and works in a script-neutral way, but that can support complex scripts with a text layout/shaping engine capable of rendering complex scripts only through fonts specially built to include advanced layout/shaping tables, and a font that contains these layout tables; such a renderer exists on OS X, which uses the AAT engine, but the existing Buginese fonts do not contain AAT <b>layout</b> <b>tables</b> (with the exception of some commercial Buginese fonts designed and sold by some font foundries specifically for the OS X platform), so the expected reordering of vowel [...] will not be rendered.|$|R
40|$|This thesis {{describes}} CSS layout {{possibilities and}} practical utilization in contem- porary browsers. The {{goal is to}} explain the specifics of layout modes and show how they should be used. The techniques are briefly discussed and introduced through exemplary source code and illustrations. Flex layout and grid layout se- em {{to be the best}} fit for modern multi-device web and they ought to replace older float <b>layout</b> and <b>table</b> <b>layout.</b> We can provide older specification's functionality in older browsers without direct support by using JavaScript polyfills...|$|R
50|$|In addition, older XSL-FO 1.0 {{features}} {{are still not}} fully supported including automatic <b>table</b> <b>layout,</b> floats and more.|$|R
40|$|In {{this paper}} we study a {{geometric}} problem arising in typography: {{the problem of}} laying out a two dimensional table. Each cell of the table has content associated with it. We may have choices on the geometry of cells (e. g., number of rows to use for the text in a cell.) The problem is to choose configurations for the cells to optimize an objective function such as minimum table height given a fixed width for the table. We formulate a combinatorial version of the <b>table</b> <b>layout</b> problem, where {{the objective is to}} choose cell geometry to minimize table size. The <b>table</b> <b>layout</b> problem is NP-complete, even for very restricted instances. One of our main results is an algorithm for computing the convex hull of the set of feasible table configurations, which gives a heuristic algorithm for <b>table</b> <b>layout.</b> We establish a connection between the fractional (LP) solution to the <b>table</b> <b>layout</b> problem and generalized network flow. We also present experimental results comparing the performance of heuristic [...] ...|$|R
5000|$|In digital typography, the TrueType font Arial Unicode MS is an {{extended}} {{version of the}} font Arial. Compared to Arial, it includes higher line height, omits kerning pairs and adds enough glyphs to cover a large subset of Unicode 2.1—thus supporting most Microsoft code pages, but also requiring much more storage space (22 megabytes). [...] It also adds Ideographic <b>layout</b> <b>tables,</b> but unlike Arial, it mandates no smoothing in the 14-18 point range, and contains Roman (upright) glyphs only; there is no oblique (italic) version. Arial Unicode MS is normally distributed with Microsoft Office, {{but it is also}} bundled with Mac OS X v10.5 and later. It may also be purchased separately (as Arial Unicode) from Ascender Corporation, who licenses the font from Microsoft.|$|R
5000|$|... #Caption: <b>Table</b> <b>layout</b> for [...] "Dinner with Removes". The {{dishes to}} be sampled {{first and then}} removed are indicated.|$|R
5000|$|The <b>table's</b> <b>layout</b> {{suggests}} that it was constructed by means of what amounts, in modern language, to the identity ...|$|R
40|$|In {{this thesis}} we {{address the problem}} of tabular layout with a focus on {{automatic}} <b>table</b> <b>layout</b> optimization. In a world where documents are produced in both physical format and also delivered electronically to an increasing range of smart devices, we draw {{attention to the fact that}} authoring tables is still di cult, frustrating, prone to errors and automated optimal <b>table</b> <b>layout</b> is basic or non-existent. We show through examples that while tables are well supported by document authoring tools, <b>table</b> <b>layout</b> su ers from many usability bottlenecks and inconsistencies. The current tools provide powerful features for controlling the presentation parameters but they provide limited or no features for controlling the logical table structure. In this context we survey table creation in several popular document authoring programs and review previous work on logical table models. We then present a combinatorial optimization modelling method for the <b>table</b> <b>layout</b> optimization problem, the problem of minimizing a table 2 ̆ 7 s height subject to it tting on a given page (width). We present three models of the problem for tables with spanning cells and inner tables and evaluate their performance using mixed integer programming, constraint programming and local search. When a table is too large to be displayed in one page, a multiple-objective optimization problem arises for automated <b>table</b> <b>layout,</b> nding suitable ways of splitting the table across multiple pages without a ecting the meaning of the data. We present two mixed integer programming optimization models for nding arrangements of columns in pages such that the the number of pages is minimized and, at the same time, the changes to the column or row ordering or grouping is also minimized. To demonstrate our results, we developed a Table Drawing Tool prototype which implements an automated solution for the <b>table</b> <b>layout</b> optimization problem using a mathematical modelling method...|$|R
5000|$|DBSCHEMA - Compile {{a source}} schema layout. The source <b>layout</b> {{describes}} the <b>tables</b> (known as SETS) and columns (known as FIELDS).|$|R
40|$|We present DATUM, a novel {{method for}} tolerating multi-ple disk {{failures}} in disk arrays. DATUM {{is the first}} known method that can mask any given number of failures, re-quires an optimal amount of redundant storage space, and spreads reconstruction accesses uniformly over disks {{in the presence of}} failures without needing large <b>layout</b> <b>tables</b> in controller memory. Our approach is based on information dispersal, a coding technique that admits an efficient hardware implementation. As the method does not restrict the configuration parameters of the disk array, many existing RAID organizations are par-ticular cases of DATUM. A detailed performance com-parison with two other approaches hows that DATUM’S response times {{are similar to those of}} the best competi-tor when two or less disks fail, and that the performance degrades gracefully when more than two disks fail. ...|$|R
2500|$|... cut {{and paste}} – taking text, a {{numerical}} table, or an image and pasting it into a document. The term originated when such compound documents were created using manual paste up techniques for typographic page layout. [...] Actual brushes and paste were later replaced by hot-wax machines equipped with cylinders that applied melted adhesive wax to developed prints of [...] "typeset" [...] copy. This copy was then cut out with knives and rulers, and slid into position on layout sheets on slanting <b>layout</b> <b>tables.</b> After the [...] "copy" [...] had been correctly positioned and squared up using a T-square and set square, it was pressed down with a brayer, or roller. The {{whole point of the}} exercise was to create so-called [...] "camera-ready copy" [...] which existed only to be photographed and then printed, usually by offset lithography.|$|R
5000|$|Quite a few {{industry}} standard programs offer the abilities to automatically slice a <b>layout</b> directly into <b>tables</b> using built in functions. These are outlined below: ...|$|R
40|$|Typed {{assembly}} languages usually support heap allocation safely, {{but often}} rely on an external garbage collector to deallocate {{objects from the}} heap and prevent unsafe dangling pointers. Even if the external garbage collector is provably correct, verifying {{the safety of the}} interaction between TAL programs and garbage collection is nontrivial. This paper introduces a typed assembly language whose type system is expressive enough to type-check a Cheney-queue copying garbage collector, so that ordinary programs and garbage collection can co-exist and interact inside a single typed language. The only built-in types for memory are linear types describing individual memory words, so that TAL programmers can define their own object <b>layouts,</b> method <b>table</b> <b>layouts,</b> heap layouts, and memory management techniques. 1...|$|R
40|$|Domain-specific {{database}} applications tend {{to contain}} a sizable number of table-, form-, and report-style views that must each be designed and maintained by a software developer. A significant part of this job is the necessary tweaking of low-level presentation details such as label placements, text field dimensions, list or table styles, and so on. In this paper, we present a horizontally constrained layout management algorithm that automates the display of structured hierarchical data using the traditional visual idioms of hand-designed database UIs: tables, multi-column forms, and outline-style indented lists. We compare our system with pure outline and nested <b>table</b> <b>layouts</b> with respect to space efficiency and readability, the latter with an online user study on 27 subjects. Our layouts are 3. 9 and 1. 6 times more compact on average than outline layouts and horizontally unconstrained <b>table</b> <b>layouts,</b> respectively, and are as readable as <b>table</b> <b>layouts</b> even for large datasets...|$|R
