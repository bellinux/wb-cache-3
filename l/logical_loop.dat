4|13|Public
50|$|During the fighting, Mario {{returns to}} the Imperial Palace to free Aliera. Together, they return to the throne room and kill Tortaalik. As the Dragon Heir, Adron is now the Emperor in truth, but his spell cannot be stopped. Caught in a <b>logical</b> <b>loop,</b> the spell {{continues}} to grow until it will eventually explode. Adron knows that he has doomed himself and the city with his pride. He uses his fleeting moments of immense power to teleport Khaavren and his friends to safety. Back in the castle, Sethra Lavode comprehends what is about to happen. She teleports Aliera and Mario away, and sends the Orb to the Paths of the Dead. Adron's spell explodes into a sea of chaos that destroys Dragaera City, a cataclysm later called Adron's Disaster.|$|E
40|$|We {{present a}} {{concrete}} proposal for enhancing Prolog and Prolog based Constraint Logic Programming languages {{with a new}} language construct, the <b>logical</b> <b>loop.</b> This is a shorthand notation for {{the most commonly used}} recursive control structure: the iteration or tail recursion. We argue that this enhancement fits well with the existing language concepts, enhances productivity and maintainability, and helps newcomers to the language by providing concepts that are familiar from many other programming languages. The language extension is implemented and has been in everyday use over several years within the ECLiPSe system...|$|E
40|$|Nuclear {{power plants}} have <b>logical</b> <b>loop</b> {{structures}} in their system configuration. This paper explains the method {{to solve a}} loop structure in reliability analysis. As examples of loop structured systems, the reactor core isolation cooling system and high-pressure core injection system of a boiling water reactor are considered and analyzed under a station blackout accident condition. The analysis results show {{the important role of}} loop structures under severe accidents. For the evaluation of the safety of nuclear power plants, it is necessary to accurately evaluate a loop structure's reliability...|$|E
50|$|In {{a network}} utilising SMLT, {{it is often}} no longer {{necessary}} to run a spanning tree protocol of any kind {{since there are no}} <b>logical</b> bridging <b>loops</b> introduced by the presence of the IST. This eliminates the need for spanning tree reconvergence or root-bridge failovers in failure scenarios which causes interruptions in network traffic longer than time-sensitive applications are able to cater for.|$|R
40|$|It is {{very often}} the case that {{programs}} require passing, maintaining, and updating some notion of state. Prolog programs often implement such stateful computations by carrying this state in predicate arguments (or, alternatively, in the internal datábase). This often causes code obfuscation, complicates code reuse, introduces dependencies on the data model, and is prone to incorrect propagation of the state information among predicate calis. To partly solve these problems, we introduce contexts as a consistent mechanism for specifying implicit arguments and its threading in clause goals. We propose a notation and an interpretation for contexts, ranging from single goals to complete programs, give an intuitive semantics, and describe a translation into standard Prolog. We also discuss a particular light-weight implementation in Ciao Prolog, and we show the usefulness of our proposals {{on a series of}} examples and applications, including code directiy using contexts, DCGs, extended DCGs, <b>logical</b> <b>loops</b> and other custom control structures...|$|R
50|$|Smarty generates web content {{through the}} {{placement}} of special Smarty tags within a document. These tags are processed and substituted with other code. Tags are directives for Smarty that are enclosed by template delimiters. These directives can be variables, denoted by a dollar sign ($), functions, <b>logical</b> or <b>loop</b> statements. Smarty allows PHP programmers to define custom functions that can be accessed using Smarty tags.|$|R
40|$|XNOR, {{and blocks}} {{implementing}} more complex logic (Boolean) functions. • No <b>logical</b> <b>loops,</b> i. e., topologically {{there may be}} loops, {{but they are not}} sensitizable under any (valid) input combination, even such loops may be prohibited / not produced by automated analysis / synthesis tools Goal Given two Boolean netlists, check if the corresponding outputs of the two circuits are equal for all possible inputs • Two circuits are equivalent iff the Boolean function representing the outputs of the networks are logically equivalent • Identify equivalence points and implications between the two circuits to simplify equivalence checking • Since a typical design proceeds by a series of local changes, in most cases there are many implications / equivalent subcircuits in the two circuits to be compared • Various tautology/satisfiability checking algorithms based on heuristics (problem is NPcomplete, but many work well on “real ” applications [...] .) • In this course we consider three main combinational equivalence checking methods:- Propositional resolution method (tautology/satisfiability checking) - Stålmarck’s method (recent patented algorithm, very efficient and popular) - ROBDD-based method (Boolean function converted into ROBDD’s representation...|$|R
50|$|MotionSupervisor {{acts as an}} {{interface}} between the Motion Control Loop, the Orchestra GCode, the ControllerSupervisor and the <b>Logical</b> Control <b>Loop.</b> Using information from the ControllerSupervisor, it selects either automatic or jog mode. In jog mode, MotionSupervisor provides axes to moves, direction and feed rates. In automatic and in semiautomatic mode, instructions on movement {{will come from the}} G-Code interpreter. The MotionSupervisor also collects error messages coming from the MotionControl Loop and sends them to the ControllerSupervisor.|$|R
40|$|This book, {{for a few}} {{different}} reasons, {{was focused}} on the DCF method, the 	 main of the reasons being that the DCF method captures best the value of prof- 	 itable, economically sound companies – it works for all firms which have real 	 expertise. The main purpose of this book was to explain the inner workings of 	 the DCF method, especially the variant in which capital structure constantly af- 	 fects cost of equity, as it does in reality. 	 The focus then was on the valuation model which integrates the three com- 	 ponents that elsewhere are often treated separately: cash flows, the cost of capi- 	 tal and the discounting process itself. The book revolved around these three is- 	 sues. For example, it is commonly known that if the value of equity changes, 	 the capital structure changes too. At the same time the change may affect the 	 cost of capital, which in turn will influence the value of equity itself. The re- 	 cursive approach to company valuation that was presented in the book relied 	 on solving such <b>logical</b> <b>loops</b> that appeared both at each time period and along 	 time periods. Performing the company valuation is such a way is much more 	 complicated than assuming no links between for example the value of equity 	 and the cost of capital, but leads to a much more reliable and methodically f law- 	 less valuation...|$|R
40|$|We {{describe}} a novel restoration strategy called virtual protection cycles (-cycles, patents pending) for extremely fast restoration in IP networks. Originally conceived {{for use in}} WDM and Sonet transport networks, we outline the adaption of the -cycle concept to an IP environment. In an IP router-based network, -cycles are implemented with virtual circuits techniques (such as an MPLS label switched path, or other means) to form closed <b>logical</b> <b>loops</b> that protect a number of IP links, or a node. In the event of failure, packets which would normally have been lost are encapsulated with a-cycle IP address and reenter the routing table, which diverts them onto a protection cycle. They travel by normal forwarding or label switching along the-cycle until they reach a node where the continuing route cost to the original destination is lower than that at the-cycle entry node. Diverted packets are deencapsulated (dropped from the-cycle) at that node and follow a normal (existing) route from there to their destination. Conventional routing protocols such as OSPF remain in place and operate as they do today, to develop a longer term global update to routing tables. Diversionary flows on the -cycle inherently cease when the global routing update takes effect {{in response to the}} failed link or node. The-cycle thus provides an immediate real-time detour, preventing packet loss, until conventional global routing reconvergence occurs. The aim of the paper is to explain the basic-cycle concept and its adaptation to both link and node restoration in the IP transport layer, and to outline certain initial results on the problem of optimized design of-cycle based IP networks...|$|R
40|$|ZED {{editing program}} for DEC VAX {{computer}} simple, powerful line editor for text, program source code, and nonbinary data. Excels in processing of text {{by use of}} procedure files. Also features versatile search qualifiers, global changes, conditionals, online help, hexadecimal mode, space compression, <b>looping,</b> <b>logical</b> combinations of search strings, journaling, visible control characters, and automatic detabbing. Users of Cambridge implementation devised such ZED procedures as chess games, calculators, and programs for evaluating pi. Written entirely in C...|$|R
40|$|Abstract—Application-level {{multicast}} suffers some disadvantages {{in terms}} of high multicast delay, overloading at Rendezvous Point (RP) and single-point of failure. In this paper, we propose DINCast to optimize application-level shared-tree multicast. The general idea of DINCast is to form a special <b>logical</b> data <b>loop</b> and use this loop instead of the RP as multicast sources. To demonstrate its effectiveness, we first analyze multicast delay with the inclusion of transmission delay, queuing delay and propagation delay of a typical symmetrical shared-tree multicast. We evaluate three placement schemes of DINCast. Our simulation results show that DINCast is effective in optimizing the multicast delay over the shared-tree multicast and the reduced rate of multicast delay may be up to 50 %. Next, for any multicast tree, we carry out further simulations to optimize multicast delay. The experimental results show that DINCast can achieve better performance than original shared-tree Multicast...|$|R
40|$|International audienceWe {{present a}} novel {{technique}} for designing discrete, <b>logical</b> control <b>loops,</b> {{on top of}} continuous control tasks, ensuring logical safety properties of the tasks sequencings and mode changes. We define this new handler {{on top of the}} real-time executives built with the ORCCAD design environment for control systems, which is applied, e. g. to robotics and real-time networked control. It features structures of control tasks, each equipped with a local automaton, used for the reactive, event-based management of its activity and modes. The additional discrete handler manages the interactions between tasks, concerning, e. g., mutual exclusions, forbidden or imposed sequences. We use a new reactive programming language, with constructs for finite-state machines and data-flow nodes, and a mechanism of behavioral contracts, which involves discrete controller synthesis. The result is a discrete control loop, on top of the continuous control loops, all integrated in a coherent real-time architecture. Our approach is illustrated and validated experimentally with the case study of a robot arm...|$|R
40|$|Mesoscopic multi-terminal Josephson {{junctions}} are novel {{devices that}} provide weak coupling between several bulk superconductors through a common normal layer. Because of the nonlocal coupling of the superconducting banks, a current flow {{between two of}} the terminals can induce a phase difference and/or current flow in the other terminals. This "phase dragging" effect is used in designing a new type of superconducting phase qubit, the basic element of a quantum computer. Time-reversal symmetry breaking can be achieved by inserting a pi-phase shifter into the flux <b>loop.</b> <b>Logical</b> operations are done by applying currents. This removes the necessity for local external magnetic fields to achieve bistability or controllable operations. Comment: 7 pages, 3 figure...|$|R
30|$|Although widely {{applied in}} {{transport}} {{research and policy}} appraisal it is acknowledged that any model is only a simplified representation of the real world, subject to boundaries, assumptions and interpretation. However, the choice of system dynamics as the underlying principle for the PTTMAM has advantages that may make it a more appropriate choice for policy appraisal than other options. For instance, the clear visualisation of <b>logical</b> feedback <b>loops</b> can be easily understood by non-modellers, facilitating dialogue on the model assumptions, as well as allowing a more open and engaging development process. These aspects may reduce subjectivity and mis-interpretation, and/or increase the confidence in the model by third parties. The validation tools available to the system dynamics modeller, such as extreme case testing and sensitivity analysis, coupled with short running times {{for even the most}} complex model, allows for an efficient calibration process and testing of many more scenarios than alternative modelling tools. Although there may be individual or non-empirical aspects that may be overlooked, subjective or difficult to capture, as long as these are clear to the parties designing scenarios, interpreting the results and applying them to policy decision making, modelling is an important and relevant part of a policy tool kit.|$|R
40|$|The ZED {{editor for}} the DEC VAX is a simple, yet {{powerful}} line editor for text, program source code, and non-binary data. Line editors can be superior to screen editors in some cases, such as executing complex multiple or conditional commands, or editing via slow modem lines. ZED excels {{in the area of}} text processing by using procedure files. For example, such procedures can reformat a file of addresses or remove all comment lines from a FORTRAN program. In addition to command files, ZED also features versatile search qualifiers, global changes, conditionals, on-line help, hexadecimal mode, space compression, <b>looping,</b> <b>logical</b> combinations of search strings, journaling, visible control characters, and automatic detabbing. The ZED editor was originally developed at Cambridge University in London and has been continuously enhanced since 1976. Users of the Cambridge implementation have devised such elaborate ZED procedures as chess games, calculators, and programs for evaluating Pi. This implementation of ZED strives to maintain the characteristics of the Cambridge editor. A complete ZED manual is included on the tape. ZED is written entirely in C for either batch or interactive execution on the DEC VAX under VMS 4. X and requires 80, 896 bytes of memory. This program was released in 1988 and updated in 1989...|$|R

