1|10000|Public
50|$|The project {{imagined}} a parallel processing computer running {{on top of}} massive databases (as opposed to a traditional filesystem) using a logic programming language to define and access the data. They envisioned building a prototype machine with performance between 100M and 1G LIPS, where a LIPS is a <b>Logical</b> <b>Inference</b> <b>Per</b> <b>Second.</b> At the time typical workstation machines were capable of about 100k LIPS. They proposed to build this machine over a ten-year period, 3 years for initial R&D, 4 years for building various subsystems, and a final 3 years to complete a working prototype system. In 1982 the government {{decided to go ahead}} with the project, and established the Institute for New Generation Computer Technology (ICOT) through joint investment with various Japanese computer companies.|$|E
40|$|We discuss an {{efficient}} {{implementation of the}} Warren Abstract Machine (WAM) [12] in detail. Special attention is given to data formats, memory layout, WAM optimizations and code generation techniques. A final section describes some hardware considerations for even higher performance execution. Currently the compiler produces code that runs at approximately 900, 000 <b>logical</b> <b>inferences</b> <b>per</b> <b>second</b> (LIPS) on a single processor of an IBM 3090 using the naive reverse benchmark. Using several of the yet unimplemented optimizations, we expect this figure to top one million LIPS...|$|R
40|$|AbstractThis paper {{describes}} a reduced-instruction-set computer (RISC) architecture for PROLOG and gives examples of Warren-machine (WAM) instructions, built-in functions, and unit clauses written using its instruction set. Two optimizations that allow dereferencing and trailing to be omitted frequently {{are applied to}} the RISC code, allowing it to execute 30 % faster than unoptimized macro expansions of Warren-machine instructions. Using an instruction cache and a data cache, hand-optimized unit clauses are estimated to run at more than 1, 700, 000 <b>logical</b> <b>inferences</b> <b>per</b> <b>second</b> (LIPS), while a mixture of hand-optimized and macro-expanded RISC code should execute {{in the range of}} 200, 000 to 700, 000 LIPS. Hand-optimized RISC code is four times the size of corresponding WAM code; macro-expanded RISC code is seven times large...|$|R
40|$|An {{improved}} memory tagging {{scheme is}} introduced for symbolic programming languages that provide for first-class variable object types, such as logic programming languages. The {{advantage of this}} tagging scheme is that it provides for greatly reduced variable dereferencing times, thereby making possible substantially greater machine performances. For example, the concatenate program on one Prolog machine model increases from 454 KLIPS (thousands of <b>logical</b> <b>inferences</b> <b>per</b> <b>second)</b> to 667 KLIPS. The tagging scheme is described, the new machine instructions that are required to utilize the new tagging scheme are described, and the modifications to the microcoded definitions of these new and several old instructions are described. Cycle timing diagrams are presented to show {{the locations of the}} time reductions in the machine's performance...|$|R
40|$|Most Prolog {{machines}} {{have been}} based on specialized architectures. Our goal is to start with a general purpose architecture and determine a minimal set of extensions for high performance Prolog execution. We have developed both the architecture and optimizing compiler simultaneously, drawing on results of previous implementations. We find that most Prolog specific operations can be done satisfactorily in software; however, there is a crucial set of features that the architecture must support to achieve the best Prolog performance. The emphasis of this paper is on our architecture and instruction set. The costs and benefits of the special architectural features and instructions are analyzed. Simulated performance results are presented and indicate a peak compiled Prolog performance of 3. 68 million <b>logical</b> <b>inferences</b> <b>per</b> <b>second.</b> 1 Introduction Logic programming in general and Prolog [22] in particular have become popular for rapid software prototyping, natural language translation, and [...] ...|$|R
40|$|The role of inferencing with {{uncertainty}} {{is becoming more}} important in rule-based expert systems (ES), since knowledge given by a human expert is often uncertain or imprecise. We have succeeded in designing a VLSI chip which can perform an entire inference process based on fuzzy logic. The design of the VLSI fuzzy inference engine emphasizes simplicity, extensibility, and efficiency (operational speed and layout area). It is fabricated in 2. 5 um CMOS technology. The inference engine consists of three major components; a rule set memory, an inference processor, and a controller. In this implementation, a rule set memory is realized by a read only memory (ROM). The controller consists of two counters. In the inference processor, one data path is laid out for each rule. The number of the inference rule can be increased adding more data paths to the inference processor. All rules are executed in parallel, but each rule is processed serially. The logical structure of fuzzy inference proposed in the current paper maps nicely onto the VLSI structure. A two-phase nonoverlapping clocking scheme is used. Timing tests indicate that the inference engine can operate at approximately 20. 8 MHz. This translates to an execution speed of approximately 80, 000 Fuzzy <b>Logical</b> <b>Inferences</b> <b>Per</b> <b>Second</b> (FLIPS), and indicates that the inference engine is suitable for a demanding real-time application. The potential applications include decision-making {{in the area of}} command and control for intelligent robot systems, process control, missile and aircraft guidance, and other high performance machines. Comment: Appears in Proceedings of the Second Conference on Uncertainty in Artificial Intelligence (UAI 1986...|$|R
40|$|This paper {{presents}} an architectural {{proposal for a}} hardware-based interval type- 2 fuzzy inference system. First, it presents a computational model which considers parallel inference processing and type reduction based on computing inner and outer bound sets. Taking into account this model, we conceived a hardware architecture with several pipeline stages for full parallel execution of type- 2 fuzzy inferences. The architectural proposal is used for specifying a type- 2 fuzzy processor with reconfigurable rule base, which is implemented over FPGA technology. Implementation results show that this processor performs more than 30 millions of type- 2 fuzzy <b>inferences</b> <b>per</b> <b>second...</b>|$|R
40|$|This paper {{presents}} mixed-signal current-mode CMOS circuits {{to implement}} programmable fuzzy controllers that perform the singleton or zero-order Sugeno’s method. Design equations to characterize these circuits are provided {{to explain the}} precision and speed that they offer. This analysis is illustrated with the experimental results of prototypes integrated in standard CMOS technologies. These tests show that an equivalent precision of 6 bits is achieved. The connection of these blocks according to a proposed architecture allows fuzzy chips with low silicon area whose inference speed is {{in the range of}} 2 Mega FLIPS (fuzzy logic <b>inferences</b> <b>per</b> <b>second...</b>|$|R
40|$|El pdf del artículo es la versión post-print. This paper {{presents}} mixed-signal current-mode CMOS circuits {{to implement}} programmable fuzzy controllers that perform the singleton or zero-order Sugeno's method. Design equations to characterize these circuits are provided {{to explain the}} precision and speed that they offer. This analysis is illustrated with the experimental results of prototypes integrated in standard CMOS technologies. These tests show that an equivalent precision of 6 b is achieved. The connection of these blocks according to a proposed architecture allows fuzzy chips with low silicon area whose inference speed is {{in the range of}} 2 Mega FLIPS (fuzzy logic <b>inferences</b> <b>per</b> <b>second).</b> Peer Reviewe...|$|R
40|$|This paper {{presents}} a {{design of a}} 50 Mega Fuzzy <b>Inferences</b> <b>per</b> <b>Second</b> (MFIPS) digital fuzzy processor. The design has been developed using 1. 0 μm CMOS VLSI technology with Cadence Edge that we have got from Eurochip. Particularly two dedicated circuits are reported: the MIN-MAX and the Defuzzifier. These circuits have been separatly designed and realized to verify their performances {{in comparison with the}} digital simulations. The preliminary testing results are also reported. This fuzzy processor has been thought in order to apply it to trigger device in HEP (High Energy Physics) experiments. These days fuzzy processors which run at this speed are not available on the market and this is the innovative feature of this design...|$|R
40|$|A {{complete}} digitally - programmable analogue Fuzzy Logic Controller (FLC) is presented. The {{design of}} some new functional blocks and {{the improvement of}} others aim towards speed optimisation with a reasonable accuracy, as it is needed in several analogue Signal Processing applications. A nine-rules, two-inputs and one-output prototype was fabricated and successfully tested using a standard CMOS 2. 4 microns technology showing good agreement with the expected performances, namely: 5. 26 Mflips (Mega fuzzy logic <b>inferences</b> <b>per</b> <b>second)</b> at the pin terminals (@CL= 13 pF), 933 @W power consumption per rule (@Vdd= 5 V) and 5 to 6 bits of precision. Since the circuit is intended for a subsystem embedded in an application chip (@CL ≤@ 5 pF) over 8 Mflips may be expected...|$|R
40|$|A {{digitally}} - programmable analogue Fuzzy Logic Controller (FLC) is presented. Input {{and output}} signals are processed in the analog domain whereas {{the parameters of}} the controller are stored in a built-in digital memory. Some new functional blocks have been designed whereas others were improved towards the optimisation of the power consumption, the speed and the modularity while keeping a reasonable accuracy, as it is needed in several analogue signal processing applications. A nine-rules, two-inputs and one-output prototype was fabricated and succesfully tested using a standard CMOS 2. 4 technology, showing good agreement with the expected performances, namely: from 2. 22 to 5. 26 Mfiips (Mega fuzzy logic <b>inferences</b> <b>per</b> <b>second)</b> at the pin terminals (@CL= 13 pF), 933 W power consumption per rule (@Vdd= 5 V) and 5 bits of resolution. Since the circuit is intended for a subsystem embedded in an application chip (@CL _ 5 pF) up to 8 Mfiips may be expected...|$|R
40|$|A Prolog {{technology}} {{theorem prover}} (PTTP) {{is an extension}} of Prolog that is complete for the full first-order predicate calculus. It differs from Prolog in its use of unification with the occurs check for soundness, the model-elimination reduction rule that is added to Prolog inferences to make the inference system complete, and depth-first iterative-deepening search instead of unbounded depth-first search to make the search strategy complete. A Prolog technology theorem prover has been implemented by an extended Prolog-to-LISP compiler that supports these additional features. It is capable of proving theorems in the full first-order predicate calculus at a rate of thousands of <b>inferences</b> <b>per</b> <b>second.</b> 1 This is a revised and expanded version of a paper presented at the 8 th International Conference on Automated Deduction, Oxford, England, July 1986, and is to appear in Journal of Automated Reasoning. This research was supported by the Defense Advanced Research Projects Agency under Co [...] ...|$|R
40|$|In this paper, a new {{structure}} possessing {{the advantages of}} low-power consumption, less hardware and high-speed is proposed for fuzzy controller. The maximum output delay for general fuzzy logic controllers (FLC) is about 86 ns corresponding to 11. 63 MFLIPS (fuzzy logic <b>inference</b> <b>per</b> <b>second)</b> while this amount of the delay in the designed fuzzy controller becomes 52 ns that corresponds to 19. 23 MFLIPS. This mixed analog/digital realization of the circuit makes the design programmable and extendable. The proposed controller supports Rational-Power Membership Functions with a resolution of 0. 03125. Simulation results of the controller using HSPICE simulator level 49 in 0. 35 um in CMOS process technology (BSIM 3 v 3) show an average power consumption of 4. 38 mW, and an RMS error of 1. 26 %. This controller {{can be used in}} many applications {{in which there is a}} need for a controller chip by correct programming with system experts. Meanwhile the whole area of the chip is 0. 0775 mm 2...|$|R
40|$|Abstract. We {{present an}} RDFS closure algorithm, {{specifically}} designed and implemented on the Cray XMT supercomputer, that obtains infer-ence rates of 13 million <b>inferences</b> <b>per</b> <b>second</b> on the largest system con-figuration we used. The Cray XMT, with its large global memory (4 TB for our experiments), permits {{the construction of}} a conceptually straight-forward algorithm, fundamentally a series of operations on a shared hash table. Each thread is given a partition of triple data to process, a dedi-cated copy of the ontology to apply to the data, and a reference to the hash table into which it inserts inferred triples. The global nature of the hash table allows the algorithm to avoid a common obstacle for dis-tributed memory machines: the creation of duplicate triples. On LUBM data sets ranging between 1. 3 billion and 5. 3 billion triples, we obtain nearly linear speedup except for two portions: file I/O, which can be ameliorated with the additional service nodes, and data structure ini-tialization, which requires nearly constant time for runs involving 32 processors or more...|$|R
40|$|Abstract—We {{present a}} highly modular fuzzy {{inference}} analog CMOS chip architecture with on-chip digital programmability. This chip {{consists of the}} interconnection of parameterized instances of two different kind of blocks, namely label blocks and rule blocks. The architecture realizes a lattice partition of the universe of discourse, which at the hardware level means that the fuzzy labels associated to every input (realized by the label blocks) are shared among the rule blocks. This reduces the area and power consumption and is the key point for chip modularity. The proposed architecture is demonstrated through a 16 -rule twoinput CMOS 1 - m prototype which features an operation speed of 2. 5 Mflips (2. 5 2 10 6 fuzzy <b>inferences</b> <b>per</b> <b>second)</b> with 8. 6 mW power consumption. Core area occupation of this prototype is of only 1. 6 mm 2 including the digital control and memory circuitry used for programmability. Because of the architecture modularity the number of inputs and rules can be increased with any hardly design effort. Index Terms—Analog IC design, function approximation, fuzzy hardware. I...|$|R
40|$|We {{present a}} highly modular fuzzy {{inference}} analog CMOS chip architecture with on-chip digital programmability. This chip {{consists of the}} interconnection of parameterized instances of two different kind of blocks, namely label blocks and rule blocks. The architecture realizes a lattice partition of the universe of discourse, which at the hardware level means that the fuzzy labels associated to every input (realized by the label blocks) are shared among the rule blocks. This reduces the area and power consumption and is the key point for chip modularity. The proposed architecture is demonstrated through a 16 -rule two input CMOS 1 -μm prototype which features an operation speed of 2. 5 Mflips (2. 5 × 10 ^ 6 fuzzy <b>inferences</b> <b>per</b> <b>second)</b> with 8. 6 mW power consumption. Core area occupation of this prototype is of only 1. 6 mm 2 including the digital control and memory circuitry used for programmability. Because of the architecture modularity the number of inputs and rules can be increased with any hardly design effort. This work {{was supported in part}} by the Spanish C. I. C. Y. T under Contract TIC 96 - 1392 -C 02 - 02 (SIVA) ...|$|R
40|$|Abstract. Many tableaux provers {{that follow}} Stickel’s Prolog Technol-ogy and lean have been {{relying on the}} Prolog {{compiler}} for an efficient term representation and the implementation of unification. In particu-lar, {{this is the case}} for leanCoP, the only tableaux prover that regularly takes part in the CASC, the yearly ATP competition. On the other hand, the most efficient superposition provers are typically written in low-level languages, reckoning that the efficiency factor is significant. In this paper we discuss low-level representations for first-order tableaux theorem proving and present the Bare Metal Tableaux Prover, a C im-plementation of the exact calculus used in the leanCoP theorem prover with its cut semantics. The data structures are designed {{in such a way that}} the prove function does not need to allocate any memory. The code is less elegant than the Prolog code, albeit concise and readable. We also measure the constant factor that a high-level programming language in-curs: the low-level implementation performs 18 times more <b>inferences</b> <b>per</b> <b>second</b> on an average TPTP CNF problem. We also discuss the imple-mentation improvements which could be enabled by complete access to the internal data structures, such as direct manipulation of backtracking points. ...|$|R
40|$|This thesis {{focuses on}} a wide range of {{contemporary}} topics in modern electromagnetics and technology including topologically protected one-way modes, integrated photonic LIDAR, and optical neural networks. First, we numerically investigate large Chern numbers in photonic crystals and explore their origin from simultaneously gapping multiple band degeneracies. Following this, we perform microwave transmission measurements in the bulk and at the edge of ferrimagnetic photonic crystals. Bandgaps with large Chern numbers of 2, 3, and 4 are present in the experimental results 'which show excellent agreement with theory. We measure the mode profiles and Fourier transform them to produce dispersion relations of the edge modes, whose number and direction match our Chern number calculations. We use these waveguides to realize reflectionless power splitters and outline their application to general one-way circuits. Next we create a new chip-scale LIDAR architecture in analogy to planar RF lenses. Instead of relying upon many continuously tuned thermal phase shifters to implement nonmechanical beam steering, we use aplanatic lenses excited in their focal plane feeding ID gratings to generate discrete beams. We design devices which support up to 128 resolvable points in-plane and 80 resolvable points out-of-plane, which are currently being fabricated and tested. These devices have many advantages over conventional optical phased arrays including greatly increased optical output power and decreased electrical power for in-plane beamforming. Finally we explore a new approach for implementing convolutional neural networks through an integrated photonics circuit consisting of Mach-Zehnder Interferometers, optical delay lines, and optical nonlinearity units. This new platform, should be able to perform the order of a thousand <b>inferences</b> <b>per</b> <b>second,</b> at [mu]J power levels <b>per</b> <b>inference,</b> with the nearest state of the art ASIC and GPU competitors operating 30 times slower and requiring three orders of magnitude more power. by Scott Alexander Skirlo. Thesis: Ph. D., Massachusetts Institute of Technology, Department of Physics, 2017. Cataloged from PDF version of thesis. Includes bibliographical references (pages 163 - 175) ...|$|R
40|$|Dependency-based Compositional Se-mantics (DCS) {{provides}} a precise and expressive way to model semantics of natural language queries on relational databases, by simple dependency-like trees. Recently abstract denotation is pro-posed to enable generic <b>logical</b> <b>inference</b> on DCS. In this paper, we discuss some other possibilities to equip DCS with <b>logical</b> <b>inference,</b> and we discuss further on how <b>logical</b> <b>inference</b> can help textual entailment recognition, or other semantic precessing tasks...|$|R
40|$|This paper {{describes}} {{the architecture of}} two VLSI Fuzzy chips designed to run at very high speed: 50 Mega Fuzzy <b>Inference</b> <b>per</b> <b>Second</b> (MFIPS) at least. The two projects differ {{in the number of}} inputs; one processes 2 - 4 seven bit inputs while the other one 8 - 16 seven bit inputs. The two chips have been designed for applications in High Energy Physics Experiments (HEPE) where the apparatus, called trigger device, needs to discriminate different nuclear events in few microseconds. So far most of the fuzzy logic applica-tions do not require high speed because not required by the industrial applications, therefore they have been done by implementing the fuzzy system on microprocessors, DSPs, or on commercial fuzzy chips which do not have very high speed performances like those necessary for HEPE. In the first phase of our research 1. 0 ym VLSI fuzzy chip [11, [2] prototype with four 7 bit inputs and one output running at 50 MFIPS was designed and constructed whose processing rate depends upon the number of rules of the fuzzy system. To further increase the speed we have faced the problem of processing, when possible, only the active fuzzy rules which are a few percent of the total ones. The research carried out on this prototype allowed us to extract some general conclu-sions:- for applications with no more than 4 inputs only the active rules are processed. Our design has a processing rate of 320 ns for 4 inputs, whichever is the fuzzy system. The process-ing rate is higher if less than 4 inputs are processed and reaches 100 ns for two inputs. - for applications which need 8 - 16 inputs an Active Rule Selector (ARS) has been designed to increase the process-ing speed which is 20 ns times the number of processed rules. The ARS is able to reject most of the non active rules. This paper starts with a concise description of the design of the first chip, already constructed and running, then describes in more details the two new projects which are designed in 0. 7 ym CMOS technology with ES 2 foundry standard cells...|$|R
5000|$|<b>Logical</b> <b>Inferences,</b> Bridging (Backward) Inferences, and Elaborative (Forward) Inferences ...|$|R
5000|$|Mivar-based {{technology}} of data processing {{is a method}} of creating <b>logical</b> <b>inference</b> system or automated algorithm construction from modules, services or procedures {{on the basis of}} active trained mivar network of rules with the linear computational complexity. Mivar-based {{technology of}} data processing is designed for data processing including <b>logical</b> <b>inference,</b> computational procedures and services.|$|R
40|$|There {{exists a}} demand for realizing <b>logical</b> <b>inferences</b> from {{multiple}} concurrent interacting processes under uncertainties. Our aim {{is to provide a}} framework for this challenging problem from the Logic-based Artificial Intelligence approach. We propose an agent architecture which combines Logic Programs with First-order Dynamic Bayesian Networks for establishing the <b>logical</b> <b>inferences</b> under uncertainties. The interactions of the concurrent processes are modeled by a new class of LP, Shared Logic Program, which realizes the process communications by overlapping their Herbrand Bases. Stochastic communications between Shared Logic Programs are also defined by First-order Dynamic Bayesian Networks. The proposed approach could provide a basic framework for defining <b>logical</b> <b>inference...</b>|$|R
40|$|Today a lot {{of expert}} systems moved out into routine use. But still {{there are not enough}} {{flexibility}} and sometimes understandability. The development of tools for representing knowledge and new mechanism for <b>logical</b> <b>inference</b> may significantly change the situation. In this paper the Mivar networks as a knowledge representation mechanism is considered and the <b>logical</b> <b>inference</b> based on mivar network is examined...|$|R
25|$|Modern Knowledge Representation {{which offers}} <b>logical</b> <b>inference</b> in for example Description Logic or Conceptual Graphs.|$|R
50|$|Reasoning {{can be done}} by {{translating}} graphs into logical formulas, then {{applying a}} <b>logical</b> <b>inference</b> engine.|$|R
5000|$|Opportunistic {{reasoning}} {{is a method}} of selecting a suitable <b>logical</b> <b>inference</b> strategy within artificial intelligence applications.|$|R
50|$|In {{first order}} logic, {{resolution}} condenses the traditional syllogisms of <b>logical</b> <b>inference</b> {{down to a}} single rule.|$|R
5000|$|To {{search for}} <b>logical</b> <b>inference</b> path the {{following}} actions are implemented {{according to the}} following (enumerated) stages: ...|$|R
5000|$|After rule firing simulation, {{the goal}} {{achievement}} analysis is carried out, that is, required value acquisition is analyzed by comparing special {{characters in the}} service row. If {{there is at least}} one value “unknown” (...) in the service row , <b>logical</b> <b>inference</b> path search is further carried out. Otherwise, the task is considered to be solved successfully and all the rules fired in a corresponding order form <b>logical</b> <b>inference</b> path searched.|$|R
5000|$|Statements in {{the form}} of an if-then (antecedent-consequent) {{sentence}} that describe the <b>logical</b> <b>inferences</b> that can be drawn from an assertion in a particular form ...|$|R
50|$|The maximum entropy {{principle}} is also needed to guarantee the uniqueness and consistency of probability assignments obtained by different methods, statistical mechanics and <b>logical</b> <b>inference</b> in particular.|$|R
40|$|A {{method of}} proof is {{presented}} and used in proving theorems in logic and set theory. Many commonly used methods of proof are rigid and not easy to apply in proving different theorems. This study deductively draws conclusions from rules of <b>logical</b> <b>inference</b> and then, it generalizes the deduction methods {{to be applied to}} logic and set theory. Then, it shows how this method of <b>logical</b> <b>inference</b> can be used to prove implications involving conjunction or disjunction of premises and to prove some identities in set theory involving implication or containment...|$|R
40|$|We {{present a}} higher-order {{inference}} sys-tem {{based on a}} formal compositional semantics and the wide-coverage CCG parser. We develop an improved method to bridge between the parser and seman-tic composition. The system is evaluated on the FraCaS test suite. In contrast to the widely held view that higher-order logic is unsuitable for efficient <b>logical</b> <b>inferences,</b> {{the results show that}} a system based on a reasonably-sized semantic lexicon and a manageable number of non-first-order ax-ioms enables efficient <b>logical</b> <b>inferences,</b> including those concerned with general-ized quantifiers and intensional operators, and outperforms the state-of-the-art first-order inference system. ...|$|R
40|$|Dependency-based Compositional Se-mantics (DCS) is a {{framework}} of natural language semantics with easy-to-process structures as well as strict semantics. In this paper, we equip the DCS framework with <b>logical</b> <b>inference,</b> by defining ab-stract denotations as an abstraction of the computing process of denotations in original DCS. An inference engine is built to achieve inference on abstract denota-tions. Furthermore, we propose a way to generate on-the-fly knowledge in <b>logical</b> <b>inference,</b> by combining our framework {{with the idea of}} tree transformation. Experiments on FraCaS and PASCAL RTE datasets show promising results...|$|R
