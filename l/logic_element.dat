123|534|Public
5000|$|William W. Armstrong, Adaptive Boolean <b>Logic</b> <b>Element,</b> US Patent 3,934,231, Jan. 20, 1976.|$|E
5000|$|In electronics, a carry-select adder is a {{particular}} way to implement an adder, which is a <b>logic</b> <b>element</b> that computes the -bit sum of two -bit numbers. The carry-select adder is simple but rather fast, having a gate level depth of [...]|$|E
50|$|In electronics, an adder is a {{combinatorial}} or sequential <b>logic</b> <b>element</b> which computes the n-bit sum of two numbers. The {{family of}} Ling adders {{is a particularly}} fast adder and is designed using H. Ling's equations and generally implemented in BiCMOS. Samuel Naffziger of Hewlett Packard presented an innovative 64 bit adder in 0.5 µm CMOS based on Ling's equations at ISSCC 1996. The Naffziger adder's delay was less than 1 nanosecond, or 7 FO4. See Naffzinger's paper below for more details.|$|E
40|$|This paper {{presents}} an algorithm {{to update the}} placement of <b>logic</b> <b>elements</b> when given an incremental netlist change. Specifically, these algorithms are targeted to incrementally place <b>logic</b> <b>elements</b> created by layout-driven circuit restructuring techniques. The incremental placement engine assumes that the restructuring algorithms provide a list of new <b>logic</b> <b>elements</b> along with preferred locations {{for each of these}} new elements. It then tries to shift non-critical <b>logic</b> <b>elements</b> in the original placement out of the way to satisfy the preferred location requests. Our algorithm considers modern FPGA architectures with clustered logic blocks that have numerous architectural constraints. Experiments indicate that our technique produces results of extremely high quality. 1...|$|R
5000|$|... #Subtitle level 3: Example XSLT {{stylesheet}} using <b>logic</b> <b>elements</b> ...|$|R
50|$|The {{controlling}} {{of signals}} {{by means of}} combinational <b>logic</b> <b>elements.</b>|$|R
5000|$|A {{single event}} upset (SEU) is a change of state caused by one single {{ionizing}} particle (ions, electrons, photons...) striking a sensitive node in a micro-electronic device, such as in a microprocessor, semiconductor memory, or power transistors. The state change {{is a result of}} the free charge created by ionization in or close to an important node of a <b>logic</b> <b>element</b> (e.g. memory [...] "bit"). The error in device output or operation caused as a result of the strike is called an SEU or a soft error.|$|E
5000|$|One {{member of}} the lab, Ken Johnson, {{proposed}} {{a new type of}} transistor-based logic that followed the same conventions as the magnetic amplifiers, namely that binary logic was based on known currents instead of voltages. Like the magnetic amplifiers, Johnson's [...] "Neuron" [...] design could be used to control several different inputs. Better yet, the system often required only one transistor per <b>logic</b> <b>element,</b> whereas conventional voltage-based logic would require two or more. Although transistors were falling in price they were still expensive, so a Neuron-based machine might offer similar performance at a much lower price than a machine based on traditional transistor logic.|$|E
5000|$|As {{the prices}} of {{transistors}} dropped, Ken Johnson, an engineer at the lab, proposed {{a new type of}} transistor-based logic that followed the same conventions as the magnetic amplifiers, namely that binary logic was based on well known currents instead of voltages. Like the magnetic amplifiers, Johnson's design could be used to control several different inputs. Better yet, the system often required only one transistor per <b>logic</b> <b>element,</b> whereas conventional voltage-based logic often required two or more. Although transistors were falling in price they were still expensive, so a machine based on Johnson's design might offer similar performance at a much lower price. He dubbed the concept [...] "Neuron" [...] due to its resemblance to the neurons in the brain.|$|E
40|$|Abstract. Advantages of {{applying}} fuzzy logic theory to metal products quality indices control in {{development of new}} models and in improvement of acting process operations are shown. It is proved that {{it is appropriate to}} determine fuzzy relation as preference relation in process of handling products quality indices in process operations. Elaboration of algorithm of handling mathematical models with fuzzy <b>logic</b> <b>elements</b> to control quality indices is undertaken. Methodology of mathe-matical models development with fuzzy <b>logic</b> <b>elements</b> for metal products quality indices control is created. Process of metal products quality indices control on the basis of models with fuzzy <b>logic</b> <b>elements</b> is illustrated...|$|R
30|$|Number of <b>logic</b> <b>elements</b> – 2, 454 / 18, 752 (13 %).|$|R
30|$|Maximum {{resource}} {{consumption of}} the design on FPGA (<b>logic</b> <b>elements</b> and memory bits).|$|R
5000|$|In the 1960s {{computer}} {{design was}} based on mounting electronic components (transistors, resistors, etc.) on circuit boards. Several boards {{would be used to}} make a discrete <b>logic</b> <b>element</b> of the machine, known as a module. Overall machine cycle speed is strongly related to the signal path [...] - [...] the length of the wiring [...] - [...] requiring high-speed computers to make their modules as small as possible. This was at odds with the need to make the modules themselves more complex in order to increase functionality. By the late 1960s the individual components had stopped getting much smaller, so in order to increase the complexity of the machines, the modules would have to grow. In theory, this could slow the machine down due to signalling delays.|$|E
5000|$|The KG-13 {{employed}} [...] "FLYBALL" [...] modules. These were modules made {{of discrete}} components {{set up as}} <b>logic</b> <b>element</b> circuit groups such as NAND gates, NOR gates, XOR gates, flip flops, monostables, multivibrators, etc. Once tested, the modules were potted in a compound whose colour indicated their function. The coloured potting compound was extremely hard and any attempt to penetrate it resulted in damage to the internal circuitry. In a KG-13, the following colours are confirmed: Pink, Yellow, Green, Blue, Red, Orange and Black. Purple and Brown modules were probably used but those colours are unconfirmed as of this time. Yellow modules were single transistor emitter follower clock drivers. Pink modules were two transistor shift register flip flops. Each yellow module drove nine pink ones. A two transistor multivibrator module drove the audio alarm thru an amplifier. Two transistor monostables were also used. NAND and NOR modules were built from a single transistor and XOR modules were built from two transistors. Failures usually occurred in the power supplies, buffers, and synchronizers though most problems were quickly resolved. When new, there was a high frequency of failures due to cold solder joints. One board in the KG-13 had a black module which was a noise generator containing a Zener diode noise source. This was the only classified module because the noise was used to randomize the key stream on startup. The circuitry inside the module then used the koken chain shift registers to create an pseudo random key stream. That was why {{there was no problem}} in restarting the KG-13 with the same card. The noise source ensured that the chances of duplicating the start point was negligible.|$|E
40|$|Propagation {{delay of}} a signal through a channel is {{measured}} by cyclically generating a first step-wave signal for transmission through the channel to a two-input <b>logic</b> <b>element</b> and a second step-wave signal with a controlled delay to the second input terminal of the <b>logic</b> <b>element.</b> The <b>logic</b> <b>element</b> determines which signal is present first at its input terminals and stores a binary signal indicative of that determination {{for control of the}} delay of the second signal which is advanced or retarded for the next cycle until both the propagation delayed first step-wave signal and the control delayed step-wave signal are coincident. The propagation delay of the channel is then determined by measuring the time {{between the first and second}} step-wave signals out of the controlled step-wave signal generator...|$|E
5000|$|FPGAs, {{during which}} <b>logic</b> <b>elements</b> are placed and {{interconnected}} {{on the grid}} of the FPGA ...|$|R
40|$|AbstractReversible {{computing}} is {{a paradigm}} where computing models are defined {{so that they}} reflect physical reversibility, {{one of the fundamental}} microscopic physical property of Nature. In this survey/tutorial paper, we discuss how computation can be carried out in a reversible system, how a universal reversible computer can be constructed by reversible <b>logic</b> <b>elements,</b> and how such <b>logic</b> <b>elements</b> are related to reversible physical phenomena. We shall see that, in reversible systems, computation can often be carried out in a very different manner from conventional (i. e., irreversible) computing systems, and even very simple reversible systems or <b>logic</b> <b>elements</b> have computation- or logical-universality. We discuss these problems based on reversible logic elements/circuits, reversible Turing machines, reversible cellular automata, and some other related models of reversible computing...|$|R
50|$|As well {{as these}} problems, some <b>logic</b> <b>elements</b> can enter {{metastable}} states, which create further problems for circuit designers.|$|R
40|$|A {{reconfigurable}} <b>logic</b> <b>element</b> (LE) {{is developed}} {{for use in}} constructing a NULL Convention Logic (NCL) FPGA. It can be configured {{as any of the}} 27 fundamental NCL gates, including resettable and inverting variations, and can utilize embedded registration for gates with three or fewer inputs. The developed LE is compared with a previous NCL LE, showing that the one developed herein yields a more area efficient NCL circuit implementation. The NCL FPGA <b>logic</b> <b>element</b> is simulated at the transistor level using the 1. 8 V, 180 nm TSMC CMOS process...|$|E
40|$|Abstract — In {{this paper}} we propose new three-input XOR and three-input XNOR gate based on {{generalized}} threshold gate (GTG) topology. The GTG topology is main part is monostable-bistable <b>logic</b> <b>element</b> (MOBILE). The proposed gates use fewer elements count in comparison with other implementations which utilize MOBILE as a main structure. By exploiting the new three-input XOR gate and a carry generator, we present a full adder. All the circuits are simulated by using HSPICE simulator. Index Terms _ monostable-bistable <b>logic</b> <b>element,</b> resonant tunneling diode, threshold gate, multi threshold threshold gate, generalized threshold gate. I. ...|$|E
40|$|Abstract—We {{leverage}} {{properties of}} the logic synthesis netlist to define both a new FPGA <b>logic</b> <b>element</b> (function generator) architecture and an associated technology mapping algorithm that together provide improved logic density. We demonstrate that an “extended ” <b>logic</b> <b>element</b> with slightly modified K-input LUTs achieves much of the benefit of an architecture with K+ 1 -input LUTs, while consuming silicon area close to a K-LUT (a K-LUT requires half the area of a K+ 1 -LUT). We introduce the notion of “non-inverting paths ” in a circuit’s AND-inverter graph (AIG) and show their utility in mapping into the proposed <b>logic</b> <b>element</b> architectures. We propose a general family of <b>logic</b> <b>element</b> architectures, and present results showing that they {{offer a variety of}} area/performance trade-offs. One of our key results demonstrates that while circuits mapped to a traditional 5 -LUT architecture need 15 % more LUTs and have 14 % more depth than a 6 -LUT architecture, our extended 5 -LUT architecture requires only 7 % more LUTs and 5 % more depth than 6 -LUTs, on average. Nearly all of the depth reduction associated with moving from K-input to K+ 1 -input LUTs can be achieved with considerably less area using extended K-LUTs. We further show that 6 -LUT optimal mapping depths can be achieved with {{a small fraction of the}} LUTs in hardware being 6 -LUTs and the remainder being extended 5 -LUTs, suggesting that a heterogeneous logic block architecture may prove to be advantageous. Index Terms—Field-programmable gate arrays, FPGAs, archi-tecture, logic synthesis, area, optimization...|$|E
50|$|Given {{this basic}} device, flip flops and other fluidic <b>logic</b> <b>elements</b> can be constructed. Simple systems of digital logic {{can thus be}} built.|$|R
50|$|The {{difference}} in propagation delays of <b>logic</b> <b>elements</b> {{is the major}} contributor to glitches in asynchronous circuits {{as a result of}} race conditions.|$|R
5000|$|Let us {{consider}} an imperfect circuit that {{suffers from a}} delay in the physical <b>logic</b> <b>elements</b> i.e. AND gates etc.The simple circuit performs the function noting: ...|$|R
40|$|Magnetic {{nanostructures}} {{are promising}} for nonvolatile data storage applications, {{as well as}} for reconfigurable logic devices. The derived magnetic logic concepts are commonly relying on the magnetostatic coupling of small ensembles or larger chains and networks of nanostructures. Recently, we presented a simple single-layer <b>logic</b> <b>element</b> based on an S-shaped geometry. This reconfigurable device can be integrated with magnetoresistive elements and is relatively simple to fabricate. We present a detailed micromagnetic analysis of the geometrical parameter space in which the <b>logic</b> <b>element</b> performs reliably. The influence of imperfections on the device characteristics, that is, sidewall roughness and roundedness of the edges, is investigated. Special attention is paid to obtain configurations with symmetric input field values. © 2012 IEEE...|$|E
40|$|We {{describe}} a coherent optical <b>logic</b> <b>element</b> susceptible of fabrication in an array format at optical wavelength-packing densities. The element offers large dynamic range, temporal storage of optical pulses, and precise clocking with no pulse loss or distortion. One- and two-pulse strategies and phase-control issues are examined...|$|E
40|$|A widely-used {{transistor}} <b>logic</b> <b>element</b> (the diode-transistor circuit) {{is examined}} from the worst-case-design {{point of view}} to determine a generally applicable design procedure capable of being programmed for use on a digital 13; computer. A suitable programme is presented {{and the results of}} a typical design problem are discussed...|$|E
50|$|KTechlab is an Open Source IDE for {{electronic}} and PIC microcontroller circuit design and simulation; it is a circuit designer with auto-routingand a simulator of common electronic components and <b>logic</b> <b>elements.</b>|$|R
50|$|The delay {{components}} {{that make up}} a general synchronous system are composed of the following three individual subsystems: the memory storage <b>elements,</b> the <b>logic</b> <b>elements,</b> and the clocking circuitry and distribution network.|$|R
40|$|This paper {{presents}} "surfing," a novel {{variation of}} wave pipelining. In previous wave pipelined designs, timing uncertainty grows monotonically as data propagates through gates and other <b>logic</b> <b>elements.</b> Our designs propagate a timing pulse {{along with the}} data values, and our <b>logic</b> <b>elements</b> have delays that decrease {{in the presence of}} the pulse. This produces a "surfing" effect wherein events are bound in close proximity to the timing pulse. This produces a robust variant of wave-pipelining where timing dispersion is bounded regardless of the length of the pipeline. We demonstrate our approach with the design of a simple proof-of-concept chip...|$|R
40|$|Quantitative {{measurements}} of the Hunchback transcription factor in Drosophila embryos show that its target genes can respond {{with a high degree}} of precision to the exact level of the protein, simulating a continuous, analog readout, while other target genes show a combinatorial effect, resembling a Boolean <b>logic</b> <b>element...</b>|$|E
40|$|In the {{investigation}} of minimal machinery in reversible computing, we proved that each nondegenerate 2 -state 3 -symbol reversible <b>logic</b> <b>element</b> is logically universal. So far, a 2 -state 4 -symbol element called “rotary element ” was shown to be logically universal {{in the framework of}} reversible <b>logic</b> <b>element</b> with memory. The main result in this paper not only improves the previous result with respect to the number of symbols, but also shows all the 2 -state 3 -symbol reversible logic elements except degenerate ones are logically universal. It is known that there are 24 essentially different 2 -state 3 -symbol reversible logic elements. Among them, 10 are degenerate ones, which are equivalent to 2 -state 2 -symbol ones or simple connecting wires. The other 14 are nondegenerate ones, and thus they are “proper ” 2 -state 3 -symbol reversible logic elements. For each of the 14 elements we construct a circuit composed only of it that simulates a Fredkin gate, a logically universal gate...|$|E
3000|$|Each {{hardware}} task (implemented on the RCU) {{occupies a}} tile on the reconfigurable area [18]. The {{size of the}} tile {{is the same for}} all the tasks to facilitate the placement and routing of the RCU. We choose, for example, the tile size of the task which uses the maximum of resources on the RCU (we designate by [...] "resource" [...] here the <b>Logic</b> <b>Element</b> used by the RCU to map any task).|$|E
5000|$|The NCR 315 is microprogrammed {{with hand}} wired ferrite cores (a ROM) pulsed by a {{sequencer}} with conditional execution. Wires routed through the cores {{are enabled for}} various data and <b>logic</b> <b>elements</b> in the processor.|$|R
5000|$|... #Caption: Photograph of a chip {{constructed}} by D-Wave Systems Inc., mounted and wire-bonded {{in a sample}} holder. The D-Wave processor is designed to use 128 superconducting <b>logic</b> <b>elements</b> that exhibit controllable and tunable coupling to perform operations.|$|R
5000|$|Synchronous <b>logic</b> <b>elements</b> such as {{flip-flops}} have {{static timing}} criteria {{that must be}} satisfied {{in order for them}} to work correctly. In a system-synchronous clock topology where a skew-aligned clock is fed to all devices, the criteria is ...|$|R
