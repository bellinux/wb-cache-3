9994|2289|Public
5|$|A {{cluster is}} a group of loosely coupled {{computers}} that work together closely, so that in some respects they can be regarded as a single computer. Clusters are composed of multiple standalone machines connected by a network. While machines in a cluster {{do not have to be}} symmetric, <b>load</b> <b>balancing</b> is more difficult if they are not. The most common type of cluster is the Beowulf cluster, which is a cluster implemented on multiple identical commercial off-the-shelf computers connected with a TCP/IP Ethernet local area network. Beowulf technology was originally developed by Thomas Sterling and Donald Becker. The vast majority of the TOP500 supercomputers are clusters.|$|E
25|$|Finally, DHTs {{must deal}} with more {{traditional}} distributed systems issues such as <b>load</b> <b>balancing,</b> data integrity, and performance (in particular, ensuring that operations such as routing and data storage or retrieval complete quickly).|$|E
25|$|From 1997, the successor, the ICE2 trains {{pulled by}} Class 402 powerheads, {{was put into}} service. One {{of the goals of}} the ICE2 was to improve <b>load</b> <b>balancing</b> by {{building}} smaller train units which could be coupled or detached as needed.|$|E
30|$|The <b>load</b> <b>balance</b> {{algorithm}} {{is an active}} research topic in distributed computing. In future, more elaborate <b>load</b> <b>balance</b> strategy for the distributed ICA can be further studied.|$|R
40|$|<b>Load</b> <b>balance</b> is {{critical}} to achieving scalability for large network emulation studies, which are of compelling interest for emerging Grid, Peer to Peer, and other distributed applications and middleware. Achieving <b>load</b> <b>balance</b> in emulation is difficult because of irregular network structure and unpredictable network traffic. We formulate <b>load</b> <b>balance</b> as a graph partitioning problem and apply classical graph partitioning algorithms to it. The primary challenge in this approach is how to extract useful information from the network emulation and present it to the graph partitioning algorithms {{in a way that}} reflects the <b>load</b> <b>balance</b> requirement in the original emulation problem. Using a large-scale network emulation system called MaSSF, we explore three approaches for partitioning, based on purely static topology information (TOP), combining topology and application placement information (PLACE), and combining topology and application profile data (PROFILE). These studies show that exploiting static topology and application placement information can achieve reasonable <b>load</b> <b>balance,</b> but a profile-based approach further improves <b>load</b> <b>balance</b> for even large scale network emulation. In our experiments, PROFILE improves <b>load</b> <b>balance</b> by 50 % to 66 % and emulation time is reduced up to 50 % compared to purely static topology-based approaches. 1...|$|R
40|$|Abstract. Computational grid {{nowadays}} {{has become}} a hotspot in high performance computing environments because it can solve larger scale computing problems. The present <b>load</b> <b>balance</b> strategy in computing grid such as the Globus tools is static. This paper mainly focuses on dynamic <b>load</b> <b>balance</b> in the computational grid. We put forward a new model that solves the dynamic <b>load</b> <b>balance</b> problems on computational grid. ...|$|R
25|$|As of 2015, {{the system}} still runs on central master {{database}} and application servers, {{but there are}} several cache layers with various ever-changing technologies, {{as well as a}} multitude of subsystems for DNS resolution, <b>load</b> <b>balancing,</b> metrics, monitoring, other system administration etc.|$|E
25|$|Fairly large {{single-storied}} earthen {{structures are}} common {{in different parts of}} the world, but building a two-storied structure of such enormous proportions as that of the main building at the resort, was quite a challenge. Since the building was designed without any concrete pillars, extra attention had to be paid to load bearing and <b>load</b> <b>balancing</b> aspects to ensure stability.|$|E
25|$|OSPF detects {{changes in}} the topology, such as link failures, and converges on a new loop-free routing {{structure}} within seconds. It computes the shortest-path tree for each route using a method based on Dijkstra's algorithm. The OSPF routing policies for constructing a route table are governed by link metrics associated with each routing interface. Cost factors may be the distance of a router (round-trip time), data throughput of a link, or link availability and reliability, expressed as simple unitless numbers. This provides a dynamic process of traffic <b>load</b> <b>balancing</b> between routes of equal cost.|$|E
40|$|Abstract Recently, a novel switch architecture, {{the load}} bal-anced (LB) switch {{proposed}} by C. S. Chang et al [1], [2] {{opened a new}} avenue for designing a large-capacity packet switch. The <b>load</b> <b>balanced</b> switch consists of two stages. First, a load-balancing stage spreads arriving packets equally among all linecards. Then, a forwarding stage transfers packets from the linecards to their nal output destination. The <b>load</b> <b>balanced</b> switch does not need any centralized scheduler and can achieve 100 % throughput under a broad class of trafc distributions. However, the <b>load</b> <b>balanced</b> switch may cause packets at the output port to be out of sequence. Several schemes have been proposed to tackle the out-of-sequence problem of the <b>load</b> <b>balanced</b> switch. However, they are either too complex to implement, or introduce a large additional delay. In this paper, we present a practical <b>load</b> <b>balanced</b> switch, called the Byte-Focal switch, which uses packet-by-packet scheduling to signicantly improve the delay performance over switches of comparable complexity. I...|$|R
50|$|Umbraco can be {{deployed}} {{on a single}} physical server running the database and web tier, and this deployment model can be appropriate for small low-cost sites. Umbraco sites which serve content under higher load can also {{be deployed}} on a <b>load</b> <b>balanced</b> cluster. <b>Load</b> <b>balanced</b> Umbraco installations can use software or hardware load balancers, and <b>load</b> <b>balanced</b> network files can be shared using a SAN, NAS or a cluster file system or using a file replication service between nodes in the cluster.|$|R
40|$|Abstract — For the {{operation}} of distribution systems, <b>loading</b> <b>balance</b> of distribution feeders is important for reducing power loss and mitigating power flow overloading. In this paper, a loop power controller (LPC) is applied for the control of real power and reactive power flows by adjusting voltage ratio and phase shift so that the <b>loading</b> <b>balance</b> of distribution feeders can be obtained. To incorporate photovoltaic (PV) power generation in feeder <b>loading</b> <b>balance,</b> a Taipower distribution feeder with large PV installation is selected for computer simulation. Daily loading unbalance is determined by analyzing PV power generation recorded by the SCADA system and by constructing daily power load profiles based on distribution automation system (DAS) data. The load transfer required to achieve <b>loading</b> <b>balance</b> and the line impedance of distribution feeders are used to derive the voltage ratio and phase shift of the LPC. Computer simulations indicated that <b>loading</b> <b>balance</b> can be achieved in distribution feeders with large PV system installation by using loop power controllers according to the variation of solar energy and power loading of study feeders. The system power loss reduction resulting from feeder <b>loading</b> <b>balance</b> by LPC is also investigated in this paper. Index Terms — Distribution automation system, loop power con- troller, photovoltaic...|$|R
25|$|The Domain Name System {{specifies}} a set {{of various}} types of resource records (RRs), which are the basic information elements of the domain name system. Each record has a type (name and number), an expiration time (time to live), a class, and type-specific data. Resource records of the same type are described as a resource record set (RRset). The order of resource records in a set, which is returned by a resolver to an application, is undefined, but often servers implement round-robin ordering to achieve <b>load</b> <b>balancing.</b> The Domain Name System Security Extensions (DNSSEC), however, work on the complete set of resource record in canonical order.|$|E
25|$|Interstate {{pipeline}} companies {{rely heavily}} on underground storage to perform <b>load</b> <b>balancing</b> and system supply management on their long-haul transmission lines. FERC regulations though demand that these companies open up the remainder of their capacity not used for that purpose to third parties. Twenty-five interstate companies currently operate 172 underground natural gas storage facilities. In 2005, their facilities accounted for about 43 percent of overall storage deliverability and 55 percent of working gas capacity in the US. These operators include the Columbia Gas Transmission Company, Dominion Gas Transmission Company, The National Fuel Gas Supply Company, Natural Gas Pipeline of America, Texas Gas Transmission Company, Southern Star Central Pipeline Company, TransCanada Corporation.|$|E
25|$|Power to gas is a {{technology}} which converts electrical {{power to a}} gas fuel. There are 2 methods, {{the first is to}} use the electricity for water splitting and inject the resulting hydrogen into the natural gas grid. The second (less efficient) method is used to convert carbon dioxide and water to methane, (see natural gas) using electrolysis and the Sabatier reaction. The excess power or off peak power generated by wind generators or solar arrays is then used for <b>load</b> <b>balancing</b> in the energy grid. Using the existing natural gas system for hydrogen Fuel cell maker Hydrogenics and natural gas distributor Enbridge have teamed up to develop such a power to gas system in Canada.|$|E
40|$|Recent work on {{peer-to-peer}} {{systems has}} demonstrated {{the ability to}} deliver low latencies and good <b>load</b> <b>balance</b> when demand for data items is relatively uniform. We describe a lightweight, adaptive, and system-neutral replication protocol, LAR, that delivers low latencies and good <b>load</b> <b>balance</b> even when demand is heavily skewed...|$|R
5000|$|Support for {{implementing}} easily redundant and <b>load</b> <b>balanced</b> monitoring hosts ...|$|R
40|$|Abstract. Cloud {{services}} {{are widely used}} in manufacturing, logistics, digital applications, and document processing. Cloud services {{must be able to}} handle tens of thousands of concurrent requests and to enable servers to seamlessly provide the amount of <b>load</b> <b>balance</b> capacity needed in response to incoming application traffic in addition to allowing users to obtain information quickly and accurately. In the past, scholars proposed using static <b>load</b> <b>balance</b> or server response times to evaluate <b>load</b> <b>balance</b> capacity, both of which cause the server to load unevenly, and in this study, a dynamic annexed balance method is used to solve this problem...|$|R
25|$|Internet service {{providers}} establish the worldwide connectivity between individual networks {{at various levels}} of scope. End-users who only access the Internet when needed to perform a function or obtain information, represent {{the bottom of the}} routing hierarchy. At the top of the routing hierarchy are the tier 1 networks, large telecommunication companies that exchange traffic directly with each other via peering agreements. Tier 2 and lower level networks buy Internet transit from other providers to reach at least some parties on the global Internet, though they may also engage in peering. An ISP may use a single upstream provider for connectivity, or implement multihoming to achieve redundancy and <b>load</b> <b>balancing.</b> Internet exchange points are major traffic exchanges with physical connections to multiple ISPs. Large organizations, such as academic institutions, large enterprises, and governments, may perform the same function as ISPs, engaging in peering and purchasing transit on behalf of their internal networks. Research networks tend to interconnect with large subnetworks such as GEANT, GLORIAD, Internet2, and the UK's national research and education network, JANET. Both the Internet IP routing structure and hypertext links of the World Wide Web are examples of scale-free networks. Computers and routers use routing tables in their operating system to direct IP packets to the next-hop router or destination. Routing tables are maintained by manual configuration or automatically by routing protocols. End-nodes typically use a default route that points toward an ISP providing transit, while ISP routers use the Border Gateway Protocol to establish the most efficient routing across the complex connections of the global Internet.|$|E
2500|$|... Reddit has {{decommissioned}} {{their physical}} servers and migrated to Amazon Web Services. Reddit uses PostgreSQL {{as their primary}} datastore and is slowly moving to Apache Cassandra, a column-oriented datastore. It uses RabbitMQ for offline processing, HAProxy for <b>load</b> <b>balancing</b> and memcached for caching. In early 2009, Reddit started using jQuery. On June 7, 2010, Reddit staff launched a revamped mobile interface featuring rewritten CSS, a new color scheme, and a multitude of improvements.|$|E
2500|$|The {{ratio of}} the average load to the peak load of a central station is called the load factor. For {{electric}} companies to increase profitability and lower rates, {{it was necessary to}} increase the load factor. The way this was eventually accomplished was through motor load. Motors are used more during daytime and many run continuously. (See: Continuous production.) [...] Electric street railways were ideal for <b>load</b> <b>balancing.</b> Many electric railways generated their own power and also sold power and operated distribution systems.|$|E
40|$|Exponential {{growth of}} mobile {{subscribers}} and various application data traffic requirements cause exorbitant load in Long Term Evolution (LTE) networks. Telecom operators are considering small cells and Wi-Fi for handling this huge traffic demand. As User Equipments (UEs) are {{typically associated with}} a near-by cell (eNB), spatio-temporal variation in traffic demands makes the LTE networks suffer from load imbalance problem. Due to the distributed nature of eNB operation in LTE Radio Access Network (RAN), traditional solutions to tackle load imbalance problem could lead to excessive overhead over X 2 interface. Hence, managing densely deployed cells is very challenging in the existing distributed LTE RAN. In this work, load imbalance issue is addressed by proposing a centralized Software Defined LTE RAN (SD-LTE-RAN) framework and a novel QoS Aware <b>Load</b> <b>Balance</b> (QALB) algorithm. For taking <b>load</b> <b>balance</b> decisions, the QALB algorithm considers loads of neighbor cells, QoS profiles of UEs and their expected throughputs w. r. t. neighbor cells. Unlike existing <b>load</b> <b>balance</b> algorithms, it does not change handover-offset parameters of cells to avoid ping pong handovers. The proposed framework and QALB algorithm are implemented in NS- 3 simulator. In various <b>load</b> <b>balance</b> scenarios, proposed QALB algorithm is able to maintain better QoS data rates (> 80 % of their configured Guaranteed Bit Rates (GBRs)) for more than 70 % of the cells in the network. While existing <b>load</b> <b>balance</b> algorithms {{are able to do}} the same for only 50 % of the cells in the network. In overall, the QALB algorithm is able to decrease the total network overload by 15 % compared to existing <b>load</b> <b>balance</b> algorithms. We also evaluated the QALB algorithm in mobility scenarios and identified that it is able to decrease average network overload by 10 % compared to existing <b>load</b> <b>balance</b> algorithms. To evaluate the network wide fair load distribution, we defined <b>load</b> <b>balance</b> index (LBI) using Jain's Fairness Index. (C) 2016 Elsevier B. V. All rights reserved...|$|R
5000|$|... can <b>load</b> <b>balance</b> from IPv6 {{clients to}} IPv4 servers {{and vice versa}} ...|$|R
40|$|Interactive {{video-on-demand}} applications pose {{a number}} of interesting problems such as the support of fast forward and rewind at arbitrary speeds. While {{it has been shown}} that no single data layout scheme can support these functions at arbitrary speeds without violating <b>load</b> <b>balance</b> conditions, researchers are now exploring methods to allow at least a wide range of speeds to be supported under <b>load</b> <b>balance</b> conditions. In this paper, we introduce Declustered Mirror, a novel scheme that mirrors a set of striped disks to provide improved performance and fault tolerance for a video-on-demand system. The improved performance is obtained by the use of disk stripping to provide high I/O bandwidth for multimedia data and by the use of Distributed Cyclic Layout (DCL) and Staggered Distributed Cyclic Layout (SDCL) to provide support for a wide range of fast forward and rewind speeds under <b>load</b> <b>balance</b> conditions. Fault tolerance is provided through mirroring. Keywords: <b>load</b> <b>balance,</b> fast forward [...] ...|$|R
2500|$|Pumped-storage {{hydroelectricity}} (PSH), or pumped hydroelectric {{energy storage}} (PHES), {{is a type}} of hydroelectric energy storage used by electric power systems for <b>load</b> <b>balancing.</b> [...] The method stores energy in the form of gravitational potential energy of water, pumped from a lower elevation reservoir to a higher elevation. Low-cost surplus off-peak electric power is typically used to run the pumps. During periods of high electrical demand, the stored water is released through turbines to produce electric power. Although the losses of the pumping process makes the plant a net consumer of energy overall, the system increases revenue by selling more electricity during periods of peak demand, when electricity prices are highest.|$|E
2500|$|One {{motivation}} for equitable coloring suggested by [...] concerns scheduling problems. In this application, the vertices of a graph represent {{a collection of}} tasks to be performed, and an edge connects two tasks {{that should not be}} performed at the same time. A coloring of this graph represents a partition of the tasks into subsets that may be performed simultaneously; thus, the number of colors in the coloring corresponds to the number of time steps required to perform the entire task. Due to <b>load</b> <b>balancing</b> considerations, it is desirable to perform equal or nearly-equal numbers of tasks in each time step, and this balancing is exactly what an equitable coloring achieves. [...] mentions a specific application of this type of scheduling problem, assigning university courses to time slots in a way that spreads the courses evenly among the available time slots and avoids scheduling incompatible pairs of courses {{at the same time as}} each other.|$|E
50|$|Cloud <b>load</b> <b>balancing</b> {{is a type}} of <b>load</b> <b>balancing</b> that is {{performed}} in cloud computing. Cloud <b>load</b> <b>balancing</b> is the process of distributing workloads across multiple computing resources. Cloud <b>load</b> <b>balancing</b> reduces costs associated with document management systems and maximizes availability of resources. It {{is a type of}} <b>load</b> <b>balancing</b> and {{not to be confused with}} Domain Name System (DNS) <b>load</b> <b>balancing.</b> While DNS <b>load</b> <b>balancing</b> uses software or hardware to perform the function, cloud <b>load</b> <b>balancing</b> uses services offered by various computer network companies.|$|E
40|$|Opportunistic routing (OR) {{has been}} {{proposed}} to improve the performance of wireless networks by exploiting the multi-user diversity and broadcast nature of the wireless medium. It involves multiple candidate forwarders to relay packets every hop. The existing OR doesn’t {{take account of the}} traffic <b>load</b> and <b>load</b> <b>balance,</b> therefore some nodes may be overloaded while the others may not, leading to network performance decline. In this paper, we focus on opportunities routing selection with node <b>load</b> <b>balance</b> which is described as a convex optimization problem. To solve the problem, by combining primal-dual and sub-gradient methods, a fully distributed Node <b>load</b> <b>balance</b> Multi-flow Opportunistic Routing algorithm (NMOR) is proposed. With node <b>load</b> <b>balance</b> constraint, NMOR allocates the flow rate iteratively and the rate allocation decides the candidate forwarder selection of opportunities routing. The simulation results show that NMOR algorithm improves 100 %, 62 % of the aggregative throughput than ETX and EAX, respectively...|$|R
40|$|Abstract: Opportunistic routing (OR) {{has been}} {{proposed}} to improve the performance of wireless networks by exploiting the multi-user diversity and broadcast nature of the wireless medium. It involves multiple candidate forwarders to relay packets every hop. The existing OR doesn’t {{take account of the}} traffic <b>load</b> and <b>load</b> <b>balance,</b> therefore some nodes may be overloaded while the others may not, leading to network performance decline. In this paper, we focus on opportunities routing selection with node <b>load</b> <b>balance</b> which is described as a convex optimization problem. To solve the problem, by combining primal-dual and sub-gradient methods, a fully distributed Node <b>load</b> <b>balance</b> Multi-flow Opportunistic Routing algorithm (NMOR) is proposed. With node <b>load</b> <b>balance</b> constraint, NMOR allocates the flow rate iteratively and the rate allocation decides the candidate forwarder selection of opportunities routing. The simulation results show that NMOR algorithm improves 100 %, 62 % of the aggregative throughput than ETX and EAX, respectively. Copyright © 2014 IFSA Publishing, S. L...|$|R
40|$|This paper {{describes}} a <b>load</b> <b>balance</b> routine {{which has been}} developed for the NAG Parallel Library. This routine is designed for <b>load</b> <b>balance</b> problems where each task can be computed independently and allows the user to choose {{from a number of}} different <b>load</b> <b>balance</b> strategies. The benefits of this routine are discussed in terms of both performance and ease of use, and results are presented for a production RCS prediction code on a Cray T 3 D and a SGI Origin 2000. 1 Introduction The <b>load</b> <b>balance</b> routine described in this paper has been developed for inclusion in the NAG Parallel Library [7]. This library is a collection of portable, memory scalable, parallel Fortran 77 routines for the solution of numerical and statistical problems. This work forms part of the ESPRIT Framework IV project P 20018 PINEAPL (Parallel Industrial Numerical Applications and Portable Libraries). The aim of the project is to develop an application-driven, general-purpose library of parallel numerical s [...] ...|$|R
5000|$|Gateway <b>Load</b> <b>Balancing</b> Protocol - Cisco {{proprietary}} router redundancy solution providing <b>load</b> <b>balancing</b> ...|$|E
5000|$|EIGRP {{features}} <b>load</b> <b>balancing</b> on {{paths with}} different costs. A multiplier, called variance, {{is used to}} determine which paths to include into <b>load</b> <b>balancing.</b> The variance is set to 1 by default, which means <b>load</b> <b>balancing</b> on equal cost paths. The maximum variance is 128. The minimum metric of a route is multiplied by the variance value. Each path with a metric that is smaller than the result is used in <b>load</b> <b>balancing</b> ...|$|E
50|$|You have to {{manually}} add each <b>load</b> <b>balancing</b> server individually to the <b>load</b> <b>balancing</b> cluster after you've {{created a}} cluster host.|$|E
3000|$|... {{enable to}} <b>load</b> <b>balance</b> between active cluster controller. The polling least-connection {{algorithm}} is as follows.|$|R
30|$|The {{microgrid}} incorporating temperature controlling devices mainly has to meet power <b>load</b> <b>balance</b> {{during the}} operation.|$|R
40|$|By {{analyzing}} a large {{of history}} data and predicting load variance trend of host, We can offer the important basis to <b>load</b> <b>balance</b> and decide <b>load</b> <b>balance</b> strategy for effective <b>load</b> <b>balance.</b> However most <b>load</b> prediction re-search focus on flow prediction {{of the network}} or load prediction algorithm it-self used classical time series prediction method, usually it is ignored on <b>load</b> <b>balance</b> after <b>load</b> prediction. Moreover, information exchange among nodes in distributed system through broadcast usually. It would be casting a lot of re-source of network. {{it is difficult to}} <b>balancing</b> <b>load</b> with whole system, because some node don’t know load status and change of other network nodes well and exactly. Aiming at these disadvantages, we propose a novel algorithm for up-dating load information and prediction based on mobile agent called CPLBMA. This system is based on OpenMosix parallel distributed system platform, and used series prediction method combining with mobile agent technology to im-prove the performance from a simple load prediction algorithm. According to the prediction result, using stochastic interval and hierachical cluster analysis, selecting a matched node for overload node or underload node to dispatching and migrating task, it can overcome shortage o...|$|R
