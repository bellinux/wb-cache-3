0|145|Public
50|$|<b>Language</b> <b>interoperability</b> is the {{capability}} of two different programming languages to natively interact and operate on {{the same kind of}} data structures.|$|R
5000|$|Part of the Babel Scientific Programming <b>Language</b> <b>Interoperability</b> System (SIDL and Babel are core {{technologies}} of the CCA and the SciDAC TASCS Center - see above.) ...|$|R
40|$|We {{are proposing}} an {{efficient}} proxy based approach during the access of service oriented application information through mobile devices. Researchers {{are interested in}} invocation of functionalinaties to the user with minimal over head by using dynamic invocation and with <b>language</b> <b>interoperability</b> approach. Even though various traditional approaches introduced in the traditional mechanisms those are not optimum and used for only few simple query or minimal parameters. For dynamic invocation we introduced a novel Proxy based approach and for the <b>language</b> <b>interoperability,</b> we introduced Web services with proxy implementation in androi...|$|R
5000|$|SML# is an {{extension}} of SML providing record polymorphism and C <b>language</b> <b>interoperability.</b> It is a conventional native compiler and its name is not an allusion to running on the [...]NET framework.|$|R
40|$|Abstract: We {{are proposing}} an {{efficient}} proxy based approach during the access of service oriented application information through mobile devices. Researchers {{are interested in}} invocation of functionalinaties to the user with minimal over head by using dynamic invocation and with <b>language</b> <b>interoperability</b> approach. Even though various traditional approaches introduced in the traditional mechanisms those are not optimum and used for only few simple query or minimal parameters. For dynamic invocation we introduced a novel Proxy based approach and for the <b>language</b> <b>interoperability,</b> we introduced Web services with proxy implementation in android Mobile devices have become highly popular in recent years. A computing device is usually considered a mobil...|$|R
40|$|Component-based environments provide {{opportunities}} {{to improve the}} performance, numerical accuracy, and other characteristics of parallel simulations in computational fluid dynamics (CFD). Because component-based software engineering combines object-oriented design with the powerful features of well-defined interfaces, programming <b>language</b> <b>interoperability,</b> an...|$|R
40|$|Abstract We are {{developing}} scientific software component technology {{to manage the}} complexity of modern, parallel simulation software and increase the interop-erability and re-use of scientific software packages. In this paper, we describe a <b>language</b> <b>interoperability</b> tool named Babel that enables the creation and dis-tribution of language-independent software libraries using interface definition language (IDL) techniques. We have created a scientific IDL {{that focuses on the}} unique interface description needs of scientific software, such as complex numbers, dense multidimensional arrays, and parallel distributed objects. Pre-liminary results indicate that in addition to <b>language</b> <b>interoperability,</b> this ap-proach provides useful tools for the design of modern object-oriented scientific software libraries. We also describe a web-based component repository called Alexandria that facilitates the distribution, documentation, and re-use of scien-tific components and libraries...|$|R
40|$|Dynamic {{invocation}} of service oriented applications {{is still an}} important research issue {{in the field of}} mobile computing and service computing,In this paper we are proposing an efficient proxybased approach during the access of service oriented application information through mobile devices,to maximize the user performance by minimizing the time complexity issues. Researchers are interested in {{invocation of}} functionalities to the user with minimal over head by using dynamic invocation and with <b>language</b> <b>interoperability</b> approach. Even though various traditional approaches introduced in thetraditional mechanisms those are not optimum and used for only few simple query or minimal parameters. For dynamic invocation we introduced a novel Proxy based approach and for the <b>language</b> <b>interoperability,</b> we introduced Web services with proxy implementationin androi...|$|R
40|$|A new {{distributed}} middleware technology 'Web Services' {{is applied}} in the proposed Healthcare Information System (HIS) {{to address the issue}} of system and <b>language</b> <b>interoperability</b> raised from existing Healthcare Information systems. With the development of HISs, hospitals and healthcare institutes have been building various HISs for processing massive healthcare data, such as, systems built up for hospitals under the NHS (National Health Service) to manage patients' records. Nowadays many healthcare providers are willing to integrate their systems' functions and data for information sharing. This has raised concerns in data transmission, data security, and network limitation. Among these issues, system and <b>language</b> <b>interoperability</b> are one of most obvious issues since data and application integration is not an easy task due to differences in programming languages, system platforms Database Management Systems (DBMS) used within different systems. As a new distributed middleware technology, Web service brings an ideal solution to the issue of system and <b>language</b> <b>interoperability.</b> Web service has been approved to be very successful in many commercial applications (e. g. Amazon. com, Dell computer, etc.), however it is different to healthcare information system. As the result, Web Service-based Integrated Healthcare Information System (WSIHIS) is proposed to address the interoperabitity issue of existing HISs but also to introduce this new technology into the healthcare environment...|$|R
40|$|My {{research}} {{focuses on}} programming systems and languages {{with an emphasis on}} using type theory to create practical programming languages and tools. <b>Language</b> <b>Interoperability</b> Most software systems are created not with a single language but instead with a collection of languages each carefully chosen to solve a particular set of problems within those systems. Typically the facilities for these languages to interoperate are constructed in an ah-hoc fashion and are thus tedious to use, error-prone, and do not preserve the safety properties of the languages involved. I am interested in constructing foundationsbased interoperability boundaries that do not have these problems and thus make <b>language</b> <b>interoperability</b> a viable alternative when building large systems. Previous research into <b>language</b> <b>interoperability</b> developed common runtimes that could support multiple languages, culminating in the development of the. NET framework and the evolution of the Java virtual machine to support multiple languages. However, comparatively less {{attention has been paid to}} understanding the semantics of interoperability. This is less important when we consider similar language pairs such as C++ and Java, but it is critical when the languages involved have safety properties that must be preserved even in the presence of interoperability, e. g., a dependently-typed or linearly-typed language...|$|R
40|$|AbstractThis paper {{presents}} <b>language</b> <b>interoperability</b> issues {{appearing in}} order to implement support for the BETA language in the Java-based Eclipse integrated development environment. One of the challenges is to implement plug-ins in BETA {{and be able to}} load them in Eclipse. In order to do this, some form of <b>language</b> <b>interoperability</b> between Java and BETA is required. The first approach is to use the Java Native Interface and use C to bridge between Java and BETA. This results in a workable, but complicated solution. The second approach is to let the BETA compiler generate Java class files. With this approach it is possible to implement plug-ins in BETA and even inherit from Java classes. In the paper the two approaches are described together with part of the mapping from BETA to Java class files...|$|R
40|$|Building {{systems from}} {{existing}} applications written {{in two or}} more languages is common practice. Such systems are polylingual. Polylingual systems are relatively easy to build {{when the number of}} APIs needed to achieve <b>language</b> <b>interoperability</b> is small. However, when the number of distinct APIs become large, maintaining and evolving polylingual systems becomes a notoriously difficult task...|$|R
40|$|Chasm is a toolkit {{providing}} seamless <b>language</b> <b>interoperability</b> between Fortran 95 and C++. <b>Language</b> <b>interoperability</b> {{is important}} to scientific programmers because scientific applications are predominantly written in Fortran, while software tools are mostly written in C++. Two design features differentiate Chasm from other related tools. First, we avoid the common-denominator type systems and programming models found in most IDL-based interoperability systems. Chasm uses the intermediate representation generated by a compiler front-end for each supported language as its source of interface information instead of an IDL. Second, bridging code is generated for each pairwise language binding, removing {{the need for a}} common intermediate data representation and multiple levels of indirection between the caller and callee. These features make Chasm a simple system that performs well, requires minimal user intervention, and in most instances, bridging code generation can be performed automatically. Chasm is also easily extensible and highly portable...|$|R
50|$|Babel is an {{open source}} {{middleware}} system serving the scientific computing community. As a <b>language</b> <b>interoperability</b> tool, Babel enables the arbitrary mixing of software libraries written in C/C++, Fortran, Python, and Java. As a distributed computing platform, Babel provides a language-neutral Remote Method Invocation (RMI) scheme similar to Java's RMI which allows third-party plug-ins to specify custom data encodings and network protocols.|$|R
40|$|With the {{increasing}} complexity and interdisciplinary nature of scientific applications, code reuse {{is becoming increasingly}} important in scientific computing. One method for facilitating code reuse {{is the use of}} components technologies, which have been used widely in industry. However, components have only recently worked their way into scientific computing. <b>Language</b> <b>interoperability</b> is an important underlying technology for these component architectures. In this paper, we present an approach to <b>language</b> <b>interoperability</b> for a high-performance parallel, component architecture being developed by the Common Component Architecture (CCA) group. Our approach is based on Interface Definition Language (IDL) techniques. We have developed a Scientific Interface Definition Language (SIDL), as well as bindings to C and Fortran. We have also developed a SIDL compiler and run-time library support for reference counting, reflection, object management, and exception handling (Babel). Results from using Babel to call a standard numerical solver library (written in C) from C and Fortran show that the cost of using Babel is minimal, where as the savings in development time and the benefits of object-oriented development support for C and Fortran far outweigh the costs...|$|R
40|$|This thesis evaluates {{different}} {{state of}} the art technologies that supports <b>language</b> <b>interoperability.</b> The evaluation is done {{from the point of view}} of the programmer – it should be as convenient and easy to use many languages that interoperates together as it is to use just one language. The second part of the thesis is a case study of the Java based Eclipse platform. Extensions to Eclipse consists of Java class files, which means that Eclipse expects plugins to have some relation to the Java language. A key issue is <b>language</b> <b>interoperability,</b> specifically when developing Eclipse support for languages other than Java. Integration of the MjolnerTool (implemented in BETA) into Eclipse has been tried with two different strategies. The first using JNI to access C and thereby using C to bridge between Java and BETA. The solution works but is complex and tiresome to implement. The second strategy uses a modified BETA compiler that generates Java bytecode. This allows for a much easier integration into the Eclipse framework. The Eclipse Java debugger is reused to debug BETA source code...|$|R
40|$|Dynamic program slicing {{methods are}} very {{attractive}} for debugging because many statements can be {{ignored in the}} process of localizing a bug. Although <b>language</b> <b>interoperability</b> is a key concept in modern development platforms, current slicing techniques are still restricted to a single language. In this paper a cross-language dynamic program slicing technique is introduced for the. NET environment. The method is utilizing the CLR Debugging Services API, hence it can be applied to large multi-language applications...|$|R
40|$|Traditional {{wireless}} sensor networks (WSNs) {{often do}} not consider interoperability between WSNs and access networks. To address the issue, this paper investigates interoperable publish/subscribe communication in WSNs. The proposed middleware, called TinyDDS, provides two types of <b>interoperability,</b> programming <b>language</b> <b>interoperability</b> and protocol interoperability, by customizing standard data types, data representation and session protocol. Evaluation results show that TinyDDS simplifies the development of publish/subscribe applications and it is implemented efficient in memory footprint and power consumption. 1...|$|R
40|$|Babel is an {{open-source}} <b>language</b> <b>interoperability</b> framework {{tailored to}} the needs of high-performance scientific computing. As an integral element of the Common Component Architecture (CCA) it is used {{in a wide range of}} research projects. In this paper we describe how we extended Babel to support interoperable tuple data types (structs). Structs are a common idiom in scientific APIs; they are an efficient way to pass tuples of nonuniform data between functions, and are supported natively by most programming languages. Using our extended version of Babel, developers of scientific code can now pass structs as arguments between functions implemented in any of the supported languages. In C, C++ and Fortran 2003, structs can be passed without the overhead of data marshaling or copying, providing <b>language</b> <b>interoperability</b> at minimal cost. Other supported languages are Fortran 77, Fortran 90, Java and Python. We will show how we designed a struct implementation that is interoperable with all of the supported languages and present benchmark data compare the performance of all language bindings, highlighting the differences between languages that offer native struct support and an object-oriented interface with getter/setter methods...|$|R
40|$|Standard {{techniques}} used in multilingual terminology management fail to describe legal terminologies {{as they are}} bound to different legal systems and terms do not share a common meaning. In the LexALP project, we use a technique defined for general lexical databases to achieve cross <b>language</b> <b>interoperability</b> between <b>languages</b> of the Alpine Convention. In this paper we present the methodology and tools developed for the collection, description and harmonisation of the legal terminology of spatial planning and sustainable development in the four languages of {{the countries of the}} Alpine Space. ...|$|R
40|$|Abstract: We {{are proposing}} an {{empirical}} model of mechanism for spatial search with efficient service oriented technology, although though different traditional approaches are proposed by various researchers for retrieval of results, {{based on the}} spatial or location based queries and u location based query or spatial object is an integrated part of an object location and set of features or attributes in location. In our proposed approach we are handling the location based queries with service oriented application or web services, to maintain the <b>language</b> <b>interoperability</b> and cache implementation improves the performanc...|$|R
40|$|<b>Language</b> <b>interoperability</b> {{is not a}} new {{research}} area for the programming languages community. In the early 2000 s, considerable effort went into understanding how to efficiently marshal data between two interoperating languages. The “last word ” in this area was the birth of the. NET framework which solved the problem by unifying the data model that interoperating languages utilize. Since then, both the. NET framework and the JVM have evolved to handle increasingly larger classes of programming languages, most recently dynamic languages with. NET’s DLR and Java’s Da Vinci machine project. One of the biggest meta-problems that programming language researchers face when developing new languages with fancy type systems is that of relevance. More often than not, the advanced types of these languages make it difficult to understand how to extend these works into more mainstream languages {{so that they can be}} enjoyed by the masses. Because of this, it is difficult for a language designer to make the critical argument that their creation is relevant and useful. <b>Language</b> <b>interoperability</b> makes this situation much more palatable. Imagine a world where your fancy linearly-typed or dependently-typed language could interoperate with the mainstream programming language you use for day-to-day work. As an end-user, this is great because the barrier to adopting the fancy language has been greatly lowered. But as a researcher, now we can leverage a mainstream programming language’...|$|R
40|$|This paper {{describes}} {{the use of}} a new distributed middleware technology Web Services in the proposed Healthcare Information System (HIS) {{to address the issue of}} system interoperability raised from existing Healthcare Information systems. With the development of HISs, hospitals and healthcare institutes have been building their own HISs for processing massive healthcare data, such as, systems built up for hospitals under the NHS (National Health Service) to manage patients records. Nowadays many healthcare providers are willing to integrate their systems functions and data for information sharing. This has raised concerns in data transmission, data security and network limitation. Among these issues, system and <b>language</b> <b>interoperability</b> are one of most obvious issues since data and application integration is not an easy task due to differences in programming languages, system platforms, Database Management Systems (DBMS) used within different systems. As a new distributed middleware technology, Web service brings an ideal solution to the issue of system and <b>language</b> <b>interoperability.</b> Web service has been approved to be very successful in many commercial applications (e. g. Amazon. com, Dell computer, etc.), however it is different to healthcare information system. As the result, Web Service-based Integrated Healthcare Information System (WSIHIS) is proposed to address the interoperability issue of existing HISs but also to introduce this new technology into the healthcare environment...|$|R
2500|$|...NET Framework (pronounced dot net) is a {{software}} framework developed by Microsoft that runs primarily on Microsoft Windows. It includes a large class library named Framework Class Library (FCL) and provides <b>language</b> <b>interoperability</b> (each <b>language</b> can use code written in other languages) across several programming languages. Programs written for [...]NET Framework execute in {{a software}} environment (in {{contrast to a}} hardware environment) named Common Language Runtime (CLR), an application virtual machine that provides services such as security, memory management, and exception handling. (As such, computer code written using [...]NET Framework is called [...] "managed code".) FCL and CLR together constitute [...]NET Framework.|$|R
40|$|ABSTRACT: We {{present a}} Microsoft Component Object Model (COM) {{component}} set to mediate between the userprovided HLA federate code and DMSO RTI, providing programming <b>language</b> <b>interoperability.</b> By using this component set, any programming environment capable of creating and using COM objects, in particular, {{rapid application development}} tools such as Borland C++ Builder and Microsoft Visual Basic, can be chosen for federate development. Recompilation of the federates is avoided in case of switching to another RTI implementation; only the component needs to be ported to the new RTI. Implementation and testing issues of the components are also discussed. 1...|$|R
40|$|Expressive and {{efficient}} mobile code languages {{are essential for}} the rapid construction of mobile systems. This paper provides a qualitative and quantitative comparative evaluation of three mobile code languages: Java Voyager, JoCaml and mHaskell. The languages evaluated represent a spectrum, having different programming paradigms and supporting different classes of mobility. The comparison {{is based on a}} non-trivial meeting scheduler case study that uses two common patterns of mobile computation: distributed information retrieval and multicast. Illustrated by the meeting scheduler, the languages are compared for programming model, security, <b>language</b> <b>interoperability</b> and performance on networks of 2, 4, 6 and 8 locations. 1...|$|R
5000|$|...NET Framework (pronounced dot net) is a {{software}} framework developed by Microsoft that runs primarily on Microsoft Windows. It includes a large class library named Framework Class Library (FCL) and provides <b>language</b> <b>interoperability</b> (each <b>language</b> can use code written in other languages) across several programming languages. Programs written for [...]NET Framework execute in {{a software}} environment (in {{contrast to a}} hardware environment) named Common Language Runtime (CLR), an application virtual machine that provides services such as security, memory management, and exception handling. (As such, computer code written using [...]NET Framework is called [...] "managed code".) FCL and CLR together constitute [...]NET Framework.|$|R
5000|$|Dually: Providing Architectural <b>Languages</b> and Tools <b>Interoperability</b> through Model Transformation Technologies ...|$|R
40|$|Though {{there has}} been {{remarkable}} progress on formally verified compilers in recent years, most of these compilers suffer from a serious limitation: they are proved correct {{under the assumption that}} they will only be used to compile whole programs. This is an unrealistic assumption since most software systems today are comprised of components written in different languages - both typed and untyped - compiled by different compilers to a common target, as well as low-level libraries that may be handwritten in the target language. We are pursuing a new methodology for building verified compilers for today 2 ̆ 7 s world of multi-language software. The project has two central themes, both of which stem from a view of compiler correctness as a <b>language</b> <b>interoperability</b> problem. First, to specify correctness of component compilation, we require that if a source component s compiles to target component t, then t linked with some arbitrary target code t 2 ̆ 7 should behave the same as s interoperating with t 2 ̆ 7. The latter demands a formal semantics of interoperability between the source and target languages. Second, to enable safe interoperability between components compiled from languages as different as ML, Rust, Python, and C, we plan to design a gradually type-safe target language based on LLVM that supports safe interoperability between more precisely typed, less precisely typed, and type-unsafe components. Our approach opens up a new avenue for exploring sensible <b>language</b> <b>interoperability</b> while also tackling compiler correctness...|$|R
40|$|Logic {{programming}} languages, such as Prolog, {{are found}} to be particularly appropriate for solving problems involving logical deduction from a set of data. The. NET framework aims to support <b>language</b> <b>interoperability,</b> so it could be valuable to find ways of using languages such as Prolog within the. NET framework. One way in which this could be done is by translating Prolog to the new language C#, which is closely related to. NET. There already exist translators which translate Prolog to C and to Java, both languages closely related to C#. Thus, a translator to C # could be obtained by modifying one of these existing translators. ...|$|R
40|$|Abstract [...] -. NET Framework is a {{software}} framework developed by Microsoft that runs primarily on Microsoft Windows. It includes a large library and provides <b>language</b> <b>interoperability</b> (each <b>language</b> can use code written in other languages) across several programming languages. Programs written for. NET Framework execute in {{a software}} environment, {{known as the}} Common Language Runtime (CLR), an application virtual machine that provides services such as security, memory management, and exception handling. The class library and the CLR together constitute. NET Framework. When the new versions of. Net framework are release it overcomes the problem of early version and add new features in its which provide better usability of it...|$|R
40|$|Abstract: Dynamic {{invocation}} of service oriented applications {{is still an}} important research issue {{in the field of}} mobile computing and service computing,In this paper we are proposing an efficient proxy based approach during the access of service oriented application information through mobile devices,to maximize the user performance by minimizing the time complexity issues. Researchers are interested in {{invocation of}} functionalities to the user with minimal over head by using dynamic invocation and with <b>language</b> <b>interoperability</b> approach. Even though various traditional approaches introduced in the traditional mechanisms those are not optimum and used for only few simple query or minimal parameters. For dynamic invocation we introduced a novel Prox...|$|R
40|$|<b>Language</b> <b>interoperability</b> is a {{difficult}} problem facing the developers and users of large numerical software packages. Language choices often hamper the reuse and sharing of numerical libraries, especially in a scientific computing environment that uses a breadth of programming languages, including C, c ++, Java, various Fortran dialects, and scripting languages such as Python. In this paper, we propose {{a new approach to}} langauge interoparability for high-performance scientific applications based on Interface Definition Language (IDL) techniques. We investigate the modifications necessary to adopt traditional IDL approaches for use by the scientific community, including IDL extensions for numerical computing and issues involved in mapping IDLs to Fortran 77 and Fortran 90...|$|R
40|$|A major {{challenge}} to achieving {{widespread use of}} software component technology in scientific computing is an effective migration strategy for existing, or legacy, source code. This paper describes initial work and challenges in automating the identification and generation of components using the ROSE compiler infrastructure and the Babel <b>language</b> <b>interoperability</b> tool. Babel enables calling interfaces expressed in the Scientific Interface Definition Language (SIDL) to be implemented in, and called from, an arbitrary combination of supported languages. ROSE is used to build specialized source-to-source translators that (1) extract a SIDL interface specification from information implicit in existing C++ source code and (2) transform Babel 's output to include dispatches to the legacy code...|$|R
40|$|Abstract: In this work, {{we propose}} a {{compilation}} strategy for non-strict functional languages targeting the Microsoft. NET Platform, a multilanguage platform {{which provides a}} large number of services to aid current software development. This strategy is based on the push/enter execution model, enables fast function calling mechanisms whenever possible and males use of new features present in. NET Framework, such as delegates and tail calls. Our case study was the compilation of the Haskell language, a standardized and well known non-strict functional language. Our main contribution is the construction of an environment for the testing of different compilation techniques for functional languages targeting. NET. Key Words:. NET, <b>languages</b> <b>interoperability,</b> virtual machines, functional programming, compilers, Haskel...|$|R
40|$|After {{decades of}} {{development}} in programming languages and programming environments, Smalltalk {{is still one of}} few environments that provide advanced features and is still widely used in the industry. However, as Java became prevalent, the ability to call Java code from Smalltalk and vice versa becomes important. Traditional approaches to integrate the Java and Smalltalk languages are through low-level communication between separate Java and Smalltalk virtual machines. We are not aware of any attempt to execute and integrate the Java language directly in the Smalltalk environment. A direct integration allows for very tight and almost seamless integration of the languages and their objects within a single environment. Yet integration and <b>language</b> <b>interoperability</b> impose challenging issues related t...|$|R
