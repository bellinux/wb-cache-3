4|18|Public
2500|$|In {{addition}} to <b>legacy</b> <b>API</b> support, the fork adds additional post processing shader options, allowing ambient occlusion, tessellation, bump mapping, and other effects {{not available in}} Dolphin.|$|E
5000|$|RDM 14.0 Enterprise {{contains}} {{both the}} core cursor API and the SQL interface, {{in addition to}} all of the remaining APIs. This package allows {{for the use of the}} C# ADO.NET interface, the JAVA JDBC interface and the ODBC interface. It also has full support for third-party connectivity and administrative tools, in addition to supporting the full <b>legacy</b> <b>API</b> from previous versions of the RDM product line.|$|E
40|$|The Host Identity Protocol (HIP) is a {{promising}} solution for dynamic network interconnection. HIP introduces a namespace based on cryptographically generated Host Identifiers. In this paper, two different API variants for accessing the namespace are described, namely the legacy {{and the native}} APIs. Furthermore, we present our implementation experience on applying the APIs {{to a number of}} applications, including FTP, telnet, and personal mobility. Well-known problems of callbacks and referrals, i. e., passing the IP address within application messages, are considered for FTP in the context of HIP. We show that the callback problem is solvable using the <b>legacy</b> <b>API.</b> The APIs are important for easy transition to HIP-enabled networks. Our experimentation with well-known network applications indicate that porting applications to use the APIs is realistic...|$|E
50|$|The WOW {{subsystem}} of {{the operating}} system thunks <b>legacy</b> 16-bit <b>APIs</b> to their newer 32-bit equivalents {{in order to provide}} support for 16-bit pointers, memory models and address space.|$|R
50|$|<b>Legacy</b> Navigational C <b>API</b> -RDM’s {{low-level}} C {{is still}} supported, with minor changes {{required for the}} developer.|$|R
40|$|Traditional desktop environments are {{designed}} {{on the assumption}} of having a single keyboard focus and a single mouse cursor. Tabletop displays {{on the other hand}} are often used as multi-user interactive displays. User interface software built for one of these environments cannot easily be run in the other environment. This paper presents Multi-Pointer X (MPX), a modified X Window System to accommodate for multiple input devices. MPX allows traditional single-user applications to run simultaneously with novel multi-user applications. Input devices can be hot-plugged at any time and allow users to interact with multiple applications simultaneously. Ambiguity in <b>legacy</b> <b>APIs</b> is resolved with the novel “Client-Pointer ” principle. MPX also provides new APIs for collaborative applications and thus bridges the gap between traditional desktop applications and tabletop applications...|$|R
40|$|Analyzing the Change-Proneness of APIs and web APIs APIs and web APIs {{are used}} to expose {{existing}} business logic and, hence, to ease the reuse of functionalities across multiple software systems. Software systems can use the business logic of legacy systems by binding their APIs and web APIs. With {{the emergence of a}} new programming paradigm called service-oriented, APIs are exposed as web APIs hiding the technologies used to implement legacy systems. As a consequence, web APIs establish contracts between legacy systems and their consumers and they should stay as stable as possible to not break consumers’ systems. This dissertation aims at better understanding the change-proneness of APIs and web APIs. Specifically to that end, we investigated which indicators can be used to highlight change-prone APIs and web APIs and we provided approaches to assist practitioners in refactoring them. To perform this analysis we adopted a research approach consisting of three different tracks: analysis of change-prone APIs, analysis of change-prone web APIs, and refactoring of change-prone APIs and web APIs. Change-Prone APIs Service-oriented systems are composed by web services. Each web service is implemented by an implementation logic that is hidden to its clients through its web APIs. Along the history of a software system the implementation logic can be changed and its changes can be propagated and affect web APIs. Among all the software units composing the implementation logic, APIs are likely to be mapped directly into web APIs. This scenario is likely to happen especially if a <b>legacy</b> <b>API</b> is made available through a web service. In this first track we focused on analyzing the change-proneness of APIs (i. e., the set of public methods declared in a software unit). Among all the metrics we analyzed, we have shown that the Interface Usage Cohesion (IUC) metric is the most suitable metric to highlight change-prone Java interfaces. This result suggests that software engineers should design interfaces with high external cohesion (measured with the IUC metric) to avoid frequent changes. Moreover, we analyzed the impact of specific antipatterns on the changeproneness of APIs. We showed empirically that changes to APIs are more likely to appear if APIs are affected by the ComplexClass, SpaghettiCode, and SwissArmyKnife antipatterns. As a consequence software engineers should refactor APIs affected by these antipatterns. Change-Prone Web APIs In the second track we analyzed the change-proneness of web APIs. First, we developed two tools to analyze software systems composed of web APIs. The first tool is called WSDLDiff and extracts fine-grained changes between subsequent versions of WSDL APIs. The second tool extracts the full chains of dependencies among web APIs at run time. Second, we performed an empirical study to investigate which scenarios can cause changes to web APIs. We showed that low externally cohesive APIs change frequently to 1) improve understandability and 2) ease maintainability and reduce clones in the APIs. Low internally cohesive APIs change frequently to 1) reduce the impact of changes on the many clients they have, 2) avoid that all the clients lead the APIs to be changed frequently, and 3) improve understandability. Moreover, we proposed a new internal cohesion metric (DTC) to measure the internal cohesion of WSDL APIs. Refactoring APIs and Web APIs Based on the results of the studies performed in the first and second track, we defined two approaches to refactor APIs and web APIs. The first approach assists software engineers in refactoring APIs with low external cohesion based on the Interface Segregation Principle (ISP). We defined the problem of splitting low externally cohesive APIs into smaller APIs specific for each client (i. e., ISP) as a multi-objective clustering optimization problem. To solve this problem we proposed a genetic algorithm that outperforms other search based approaches. The second approach assists software engineers in refactoring fine-grained web APIs. These APIs should be refactored into coarse-grained web APIs to reduce the number of remote invocations and avoid performance problems. To achieve this goal we proposed a genetic algorithm that looks for Façade APIs that cluster together the fine-grained methods of the original API. Conclusion We believe that these results advance the state-of-the-art in designing, analyzing, and refactoring software systems composed of web APIs (i. e., serviceoriented systems) and provide to the research community new insights into the change-proneness of APIs and web APIs. Software Computer TechnologyElectrical Engineering, Mathematics and Computer Scienc...|$|E
5000|$|As of OpenBSD 5.5 (May 1, 2014), the [...] call {{used for}} OpenBSD's random devices no longer uses ARC4, but ChaCha20 (arc4random name might be reconsidered as A Replacement Call for Random).NetBSD's {{implementation}} of the <b>legacy</b> [...] <b>API</b> has also been switched over to ChaCha20 as well.|$|R
50|$|The studio {{features}} three isolation {{booths and}} a large live room. Flora houses an <b>API</b> <b>Legacy</b> console {{and a variety of}} analog and digital audio equipment.|$|R
40|$|All major desktop environments are {{designed}} around {{the assumption of}} having a single system cursor and a single keyboard. Co-located multi-user interaction on a standard desktop requires users to physically hand over the devices. Existing collaboration applications require complicated and limiting setups and no collaboration application or toolkit supports ad-hoc transition from a traditional single-user desktop to a multi-user collaboration environment without restarting applications. Our Multi-Pointer X server (MPX) allows easy transition between a single-user desktop and a multi-user collaboration environment. Pointer devices and keyboards can be added and removed at any time. Independent cursors and keyboard foci for these devices allow users to interact with and type into multiple applications simultaneously. MPX is compatible with any legacy X application and resolves ambiguity in <b>legacy</b> <b>APIs</b> using the novel “ClientPointer ” principle. MPX also provides new APIs for multi-user applications and thus enables fluid integration of single-user and multi-user environments...|$|R
5000|$|Schedule {{the timing}} of musical events with high precision. DirectMusic allows timestamping of MIDI input data {{at the moment of}} arrival to a system wide {{reference}} clock. Music or sound effects composed for DirectMusic can be very flexible and can change dynamically over time or in response to a user event. DirectMusic addresses the problems of Windows' <b>legacy</b> MidiOut <b>API,</b> which has shaky timing and limited real-time control.|$|R
40|$|Today {{reengineering}} existing (legacy) {{systems to}} the web is a typical software maintenance task. In such projects developers integrate a web representation with the <b>legacy</b> system's <b>API</b> and its responses. Often the same information is provided to other channels than HTTP and in other formats than HTML as well, and the old (legacy) interfaces are still supported. Add-on services such as security or logging are required. Performance and scalability of the web application might be crucial. To resolve these issues [...] ...|$|R
50|$|All of {{the vintage}} {{recording}} gear and instruments {{that were used}} {{from the time of}} the studio foundation are still in use today. The centerpiece of the control room is a custom built 48 channel in-line <b>API</b> <b>Legacy</b> fit with Neve Flying Faders II.|$|R
5000|$|The Turtle Creek barn {{was located}} {{down the hill}} off of Ricks Road. It {{originally}} functioned only as a rehearsal space. In 1972, Albert purchased the Location Recorders Remote Truck it was wired into the Barn for exclusive use of [...] "The Band" [...] by it's founders Aaron Baron, Larry Dahlstrom and John Venable. Then, in 1994, it was converted to a full recording studio, with a newly constructed George Augpurger-designed control room added on. A 36 channel <b>API</b> <b>Legacy</b> console was installed.|$|R
50|$|Registry {{values are}} name/data pairs stored within keys. Registry values are {{referenced}} separately from Registry keys. Each Registry value {{stored in a}} Registry key has a unique name whose letter case is not significant. The Windows API functions that query and manipulate Registry values take value names separately from the key path and/or handle that identifies the parent key. Registry values may contain backslashes in their names, but doing so makes them difficult to distinguish from their key paths when using some <b>legacy</b> Windows Registry <b>API</b> functions (whose usage is deprecated in Win32).|$|R
40|$|Interoperability is {{essential}} to address limitations caused by the ad hoc implementation of clinical information systems and the distributed nature of modern medical care. The HL 7 V 2 and V 3 standards have {{played a significant role}} in ensuring interoperability for healthcare. FHIR is a next generation standard created to address fundamental limitations in HL 7 V 2 and V 3. FHIR is particularly relevant to OpenMRS, an Open Source Medical Record System widely used across emerging economies. FHIR has the potential to allow OpenMRS to move away from a bespoke, application specific API to a standards based API. We describe efforts to design and implement a FHIR based API for the OpenMRS platform. Lessons learned from this effort were used to define long term plans to transition from the <b>legacy</b> OpenMRS <b>API</b> to a FHIR based API that greatly reduces the learning curve for developers and helps enhance adhernce to standards...|$|R
25|$|One of Microsoft's biggest {{advances}} initially {{developed for}} Windows NT {{was a new}} 32-bit API, to replace the <b>legacy</b> 16-bit Windows <b>API.</b> This API was called Win32, {{and from then on}} Microsoft referred to the older 16-bit API as Win16. The Win32 API had three levels implementations: the complete one for Windows NT, a subset for Chicago (originally called Win32c) missing features primarily of interest to enterprise customers (at the time) such as security and Unicode support, and a more limited subset called Win32s which could be used on Windows 3.1 systems. Thus Microsoft sought to ensure some degree of compatibility between the Chicago design and Windows NT, even though the two systems had radically different internal architectures. Windows NT was the first Windows operating system based on a hybrid kernel.|$|R
5000|$|British Grove Studios {{was built}} by Mark Knopfler as [...] "a {{monument}} to past and future technology". It has two studios. Alongside modern technology, the equipment includes two old EMI mixing consoles: a very rare tube desk from the 1960s like the ones used by George Martin and The Beatles and a later console on which the album Band on the Run was recorded. The large console in studio one is a custom-made Neve 88R, while the console in studio two is an <b>API</b> <b>Legacy.</b> The main speakers are ATC monitors in a 5.1 configuration. Specifically, the full-range models are ATC SCM 300ASL (300A) mounted in standard left-center-right configuration, with two more 300As on a unique track system for surround. Dual ATC SCM0.1/15ASL PRO (Sub 1/15) subwoofers alongside {{the left and right}} mains provide the LFE monitoring.|$|R
40|$|Abstract — Modern HPC {{applications}} {{put forward}} significant I/O requirements. To deal with them, MPI provides the MPI-IO API for parallel file access. ROMIO library implements MPI-IO and provides efficient support for parallel I/O in C and Fortran based applications. On the other hand, Java based MPI-like libraries such as MPJ Express and F-MPJ have emerged but they lack parallel I/O support. Little {{research has been}} done to provide Java based ROMIO-like libraries due to the non-availability of MPI-IO-like API for the Java language. In this paper, we take the first step towards the development of parallel I/O API in Java by evaluating the newly introduced Java NIO <b>API</b> versus the <b>legacy</b> Java I/O <b>API.</b> We propose two simple approaches for performing parallel file I/O using NIO and evaluate them on two different computational platforms. The implementation of proposed approaches exploits the view buffers concept of NIO API to perform efficient array based file I/O operations from multiple processes. We report encouraging speedups and suggest that design of a parallel I/O API in Java should be based on the NIO API...|$|R
500|$|... "Love Story" [...] was {{recorded}} with Pro Tools and tracking vocals, which Swift sang {{live with the}} band. The band consisted of acoustic guitars, bass guitars, and drums. All other instruments were overdubbed by Chapman. He said, [...] "I think there are nine acoustic guitars on that track, and I stacked several background vocals — me singing, 'Ah's'." [...] Audio engineering was executed by Chad Carlson in Blackbird Studios' Studio D, with the usage of the <b>API</b> <b>Legacy</b> Plus equipments: Avantone CV-12, Neve 1073, and Tube-Tech CL-1B. Audio mixing done by Justin Niebank and was set in Studio F, with the usage of the console Solid State Logic 9080 K series and Genelec 1032 console. In between, overdubs were executed in Studio E by Chapman. [...] "Love Story", {{along with the rest}} of the album, was mastered by Hank Williams at MasterMix Studios in Nashville, Tennessee. The song was mixed for mainstream airplay by Chapman. He pulled Niebank's stems into his Mac OS laptop and used Apple Logic to create the pop version. Chapman made mix tweaks and created new elements with his laptop. In order to do so, he muted the country instruments and replaced them with new elements characteristic to pop music, replacing banjo and fiddle with electric guitar. The pop version's opening beat is a Logic loop in the Ultrabeat beat generator. All the new electric guitars were done with the Amplitube Stomp I/O.|$|R

