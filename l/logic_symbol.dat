7|90|Public
5000|$|Each <b>logic</b> <b>symbol</b> is {{represented}} by a different shape. The actual set of shapes was introduced in 1984 under IEEE/ANSI standard 91-1984. [...] "The <b>logic</b> <b>symbol</b> given under this standard are being increasingly used now and have even started appearing in the literature published by manufacturers of digital integrated circuits." ...|$|E
50|$|The <b>logic</b> <b>symbol</b> → {{can be used}} {{to denote}} IMPLY in {{algebraic}} expressions.|$|E
50|$|Zellweger's logic {{alphabet}} {{offers a}} visually systematic way of representing {{each of the}} sixteen binary truth functions. The idea behind the logic alphabet is to first represent the sixteen binary truth functions {{in the form of}} a square matrix rather than the more familiar tabular format seen in the table above, and then to assign a letter shape to each of these matrices. Letter shapes are derived from the distribution of Ts in the matrix. When drawing a <b>logic</b> <b>symbol,</b> one passes through each square with assigned F values while stopping in a square with assigned T values. In the extreme examples, the symbol for tautology is a X (stops in all four squares), while the symbol for contradiction is an O (passing through all squares without stopping). The square matrix corresponding to each binary truth function, as well as its corresponding letter shape, are displayed in the table below.|$|E
40|$|It is {{disclosed}} {{a method}} of encoding a binary data stream for transmission over an optical transmission channel employing a digital modulation scheme using a number K of different phases. The method comprises: converting the binary data stream into a sequence of <b>logic</b> <b>symbols</b> represented by respective values out {{of a set of}} K integer values; splitting the sequence of <b>logic</b> <b>symbols</b> into a first subsequence of first <b>logic</b> <b>symbols</b> and a second subsequence of second logic symbols; differentially encoding the first <b>logic</b> <b>symbols</b> to derive differentially encoded logic symbols; applying a forward error correction code to the second <b>logic</b> <b>symbols</b> to derive adjacent blocks of symbols comprising a number m of FEC encoded logic symbols; and generating a stream of encoded <b>logic</b> <b>symbols</b> by combining each of the m FEC encoded <b>logic</b> <b>symbols</b> of one block and a respective one of the differentially encoded <b>logic</b> <b>symbols...</b>|$|R
50|$|The {{following}} basic <b>logic</b> <b>symbols</b> {{shall be}} used.|$|R
5000|$|Quantification {{in general}} is covered in the article on {{quantification}} (<b>logic).</b> <b>Symbols</b> are encoded [...]|$|R
40|$|Abstract {{turnstile}} is a LATEX {{package that}} allows typesetting of the mathematical <b>logic</b> <b>symbol,</b> “turnstile”, {{in all of}} the various ways it is used. This package was developed because there was no easy way in LATEX to typeset this symbol in its various forms, and place expressions above and below the crossbar. ...|$|E
40|$|A {{family of}} {{standardized}} thick-oxide P-MOS building blocks (standard cells) is described. The information {{is presented in}} a form useful for systems designs, logic design, and the preparation of inputs to both sets of Design Automation programs for array design and analysis. A data sheet is provided for each cell and gives the cell name, the cell number, its <b>logic</b> <b>symbol,</b> Boolean equation, truth table, circuit schematic circuit composite, input-output capacitances, and revision date. The circuit type file, also given for each cell, together with the logic drawing contained on the data sheet provides all the information required to prepare input data files for the Design Automation Systems. A {{detailed description of the}} electrical design procedure is included...|$|E
40|$|Acting {{intelligently}} in dynamic environments involves anticipating surrounding processes, {{for example}} to foresee {{a dangerous situation}} or acceptable social behavior. Knowledge about spatial configurations and how they develop over time enables intelligent robots to safely navigate by reasoning about possible actions. The seamless connection of high-level deliberative processes to perception and action selection remains a challenge though. Moreover, an integration should allow the robot to build awareness of these processes as in reality there will be misunderstandings a robot {{should be able to}} respond to. My aim is to verify that actions selected by the robot do not violate navigation or safety regulations and thereby endanger the robot or others. Navigation rules specified qualitatively allow an autonomous agent to consistently combine all rules applicable in a context. Within this thesis, I develop a formal, symbolic representation of right-of-way-rules based on a qualitative spatial representation. This cumulative dissertation consists of 5 peer-reviewed papers and 1 manuscript under review. The contribution of this thesis is an approach to represent navigation patterns based on qualitative spatio-temporal representation and the development of corresponding effective sound reasoning techniques. The approach is based on a spatial logic in the sense of Aiello, Pratt-Hartmann, and van Benthem. This logic has clear spatial and temporal semantics and I demonstrate how it allows various navigation rules and social conventions to be represented. I demonstrate the applicability of the developed method in three different areas, an autonomous robotic system in an industrial setting, an autonomous sailing boat, and a robot that should act politely by adhering to social conventions. In all three settings, the navigation behavior is specified by logic formulas. Temporal reasoning is performed via model checking. An important aspect is that a <b>logic</b> <b>symbol,</b> such as turn left, comprises a family of movement behaviors rather than a single pre-specified movement command. This enables to incorporate the current spatial context, the possible changing kinematics of the robotic system, and so on without changing a single formula. Additionally, I show that the developed approach can be integrated into various robotic software architectures. Further, an answer to three long standing questions in the field of qualitative spatial reasoning is presented. Using generalized linear programming as a unifying basis for reasoning, one can jointly reason about relations from different qualitative calculi. Also, concrete entities (fixed points, regions fixed in shape and/or position, etc.) can be mixed with free variables. In addition, a realization of qualitative spatial description can be calculated, i. e., a specific instance/example. All three features are important for applications but cannot be handled by other techniques. I advocate the use of And/Or trees to facilitate efficient reasoning and I show the feasibility of my approach. Last but not least, I investigate a fourth question, how to integrate And/Or trees with linear temporal logic, to enable spatio-temporal reasoning...|$|E
50|$|The <b>logic</b> <b>symbols</b> ⊕, Jpq, and ⊻ {{can be used}} {{to denote}} XOR in {{algebraic}} expressions.|$|R
5000|$|A {{variety of}} symbols {{are used to}} express logical ideas; see the List of <b>logic</b> <b>symbols</b> ...|$|R
25|$|Turing's {{first task}} {{had to write}} a {{generalized}} expression using <b>logic</b> <b>symbols</b> to express exactly what his Un(M) would do.|$|R
40|$|This book adopts an {{integrated}} approach to {{hardware and software}} for logic-circuit design. It has been developed from the author's experience in lecturing to first-year undergraduate students of electronics and software engineering. Modern programming logic is used and the author describes how the basic programmable devices work, {{as well as how}} to write the software to make them work. The book starts off with the basics of combinatorial design: how to specify logic circuits, how to minimise them and how to implement them. Sequential logic design is presented using the algorithmic state machine (ASM) approach with reference to Moore and Mealy design. These are implemented in programmable logic, using a software specification to drive established programmable logic, using a software specification to drive established programmable array lgoic (PAL) architectures; the software uses the popular PALASM and PLPL specification languages with worked design examples programming standard PAL chips. Later chapters also cover arithmetic circuits and their implementation, data conversion which is used to interface digital circuits to the outside world, and practical aspects of building digital circuits. Solutions are provided for the end of chapter questions. Sections 1. Introduction 1. 1 Introducing digital electronics 1. 2 Organisation of this book 1. 3 Preliminaries 2. Combinational logic design 2. 1 Combinational logic/Boolean algebra 2. 2 Logic functions 2. 3 Combinational logic and computer software 2. 4 Combinational logic implementation 2. 5 Integrated Circuits 2. 6 Basic logic Devices 2. 7 Introductory combinatorial design 2. 8 Laws of logic 2. 9 Minimisation 2. 10 Timing considerations and static hazards 2. 11 Logic implementations 2. 12 Terminology 2. 13 Concluding comments and further reading 2. 14 Questions 3. Logic circuits 3. 1 Device characteristics 3. 2 Switching devices 3. 3 Logic technologies 3. 4 Comparison of logic circuits 3. 5 Specimen CMOS and ECL datasheets 3. 6 Concluding comments and further reading 3. 7 Questions 4. Introductory sequential logic 4. 1 Sequential logic concepts 4. 2 Bistables 4. 3 Clocks and synchronism 4. 4 Master-slave D-type bistable 4. 5 Positive edge-triggered D-type 4. 6 Timing considerations 4. 7 Asynchronous inputs 4. 8 Sequential systems 4. 9 Algorithmic state machine design 4. 10 Further ASM chart design 4. 11 Asynchronous vs. synchronous design 4. 12 Concluding comments and further reading 4. 13 Questions 5. Programmable logic implementation 5. 1 Programmable logic design 5. 2 Programmable circuits 5. 3 The PALCE 16 V 8 PAL and the PALASM language 5. 4 Introductory programmable design example 5. 5 Programmable sequential logic examples 5. 6 Design examples 5. 7 Concluding comments and further reading 5. 8 Questions 6. Number systems, coding and arithmetic 6. 1 Numbers and coding systems 6. 2 Binary arithmetic 6. 3 Design examples 6. 4 Concluding comments and further reading 6. 5 Questions 7. Analog-to-digital and digital-to-analog conversion 7. 1 Analog-to-digital and digital-to-analog basics 7. 2 A/D and D/A performance characteristics 7. 3 Amplifiers and operational amplifiers 7. 4 D/A conversion circuits 7. 5 A/D conversion circuits 7. 6 Concluding comments and further reading 7. 7 Questions 8. Interface and hybrid circuits 8. 1 Schmitt trigger 8. 2 Power supplies and decoupling 8. 3 Output stages 8. 4 Driving circuits 8. 5 Clock circuits 8. 6 Monostables 8. 7 Timer chips 8. 8 Concluding comments and further reading References. Appendix 1. Drawing logic circuits A 1. 1 Mixed-logic convention A 1. 2 IEEE/ANSI <b>logic</b> <b>symbol</b> standard Appendix 2. The PLPL programming language and the PEEL 18 CV 8 A 2. 1 The PEEL 18 CV 8 PAL A 2. 2 The PLPL programming language A 3. 3 Examples in PLPL and PEEL 18 CV 8 Appendix 3. Semiconductor manufacturers - contact addresses Appendix 4. Further reading Appendix 5. Abbreviated answers to questionsContent...|$|E
50|$|The axioms and theorems {{of formal}} ethics can be {{represented}} with the standard notation of predicate logic (but with a grammar closer to higher-order logics), augmented with imperative, deontic, belief, and modal <b>logic</b> <b>symbols.</b>|$|R
5000|$|It {{can be used}} as a math <b>symbol.</b> Specifically, in <b>logic,</b> [...] "x • y" [...] means logical conjunction. It is {{the same}} as saying [...] "x and y" [...] (see also List of <b>logic</b> <b>symbols).</b>|$|R
5000|$|We {{explain how}} the four {{inference}} rules are used in proofs, using the proof of [...] The <b>logic</b> <b>symbols</b> [...] and [...] indicate [...] "true" [...] and [...] "false," [...] respectively, and [...] indicates [...] "not." [...] The theorem numbers refer to theorems of A Logical Approach to Discrete Math.|$|R
50|$|Published in 1960 by Hans Freudenthal, Lincos: Design of a Language for Cosmic Intercourse, expands upon Astraglossa {{to create}} a {{general-purpose}} language derived from basic mathematics and <b>logic</b> <b>symbols.</b> Several researchers have expanded further upon Freudenthal's work. A dictionary resembling Lincos was featured in the Carl Sagan novel Contact and film adaptation.|$|R
5000|$|... (Turnstile symbol) in the {{following}} context of Mathematical logic, means [...] "provable from". That is, a [...] b reads: b is provable from a (in some specified formal system). See List of <b>logic</b> <b>symbols.</b> In other cases, the turnstile symbol may mean implies; permits the derivation of. See: List of mathematical symbols.|$|R
40|$|Proposed is {{a system}} that recognizes <b>logic</b> <b>symbols</b> and their inter [...] {{connections}} on logic diagrams. Input diagram, digitized by scanner, is converted into a set of line segments through a sequence of picture processing operations. Then symbols and connections are extracted by identifying loops and rectilinear polylines utilizing model [...] base in which symbols are graphically described. Experiment with a number of logic diagrams shows that the system correctly recognizes more than 96 % of <b>logic</b> <b>symbols</b> and connections on A 4 -size diagram with an average complexity within 15 seconds on a workstation. 1 Introduction A system for the recognition of schematic diagrams can be evaluated by the three criteria of recognition accuracy, flexibility, and efficiency. Most systems reported in the literature [1, 3, 6] imposed severe restrictions on the input diagrams to improve the recognition accuracy, and are very sensitive to the change of domain knowledge while taking little care to the efficiency [...] . ...|$|R
25|$|In the FFBD method, the {{functions}} are organized and depicted by their logical order of execution. Each function is shown {{with respect to}} its logical relationship to the execution and completion of other functions. A node labeled with the function name depicts each function. Arrows {{from left to right}} show the order of execution of {{the functions}}. <b>Logic</b> <b>symbols</b> represent sequential or parallel execution of functions.|$|R
50|$|There are two symbols for IMPLY gates: the {{traditional}} symbol and the IEEE symbol. For more information see <b>Logic</b> Gate <b>Symbols.</b>|$|R
50|$|The {{example in}} the {{previous}} section used unformalized, natural-language reasoning. Curry's paradox also occurs in some varieties of formal logic. In this context, it shows that if we assume there is a formal sentence (X → Y), where X itself is equivalent to (X → Y), then we can prove Y with a formal proof. One example of such a formal proof is as follows. For an explanation of the logic notation used in this section, refer to the list of <b>logic</b> <b>symbols.</b>|$|R
5000|$|In {{classical}} logics, {{taking a}} contradiction [...] (see List of <b>logic</b> <b>symbols)</b> as a premise (that is, taking as a premise {{the truth of}} both [...] and [...] ), allows us to prove any statement [...] Indeed, since [...] is true, the statement [...] is true (by generalization). Taking [...] together with [...] is a disjunctive syllogism from which we can conclude [...] (This is often called the principle of explosion, since the truth of a contradiction is imagined to make the number of theorems in a system [...] "explode".) ...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedFault Tree Analysis {{is a method}} implemented trough the use of <b>logic</b> <b>symbols,</b> for analyzing either qualitatively or quantitatively the events that lead to a mission or system failure. This work examines an Anti-Aircraft Warfare (AAW) scenario restricted {{to the defense of}} an aircraft carrier. A fault tree of events that lead to a hit on the carrier is displayed logically from the top down. Fault tree analysis when applied to the AAW model is examined with a view toward its usefulness as an instructional and a predictive tool. [URL] Commander, United States Nav...|$|R
50|$|There {{are three}} symbols for AND gates: the American (ANSI or 'military') symbol and the IEC ('European' or 'rectangular') symbol, {{as well as}} the {{deprecated}} DIN symbol. For more information see <b>Logic</b> Gate <b>Symbols.</b>|$|R
5000|$|A logical symbol is a {{fundamental}} concept in logic, tokens {{of which may be}} marks or a configuration of marks which form a particular pattern. Although the term [...] "symbol" [...] in common use refers at some times to the idea being symbolized, and at other times to the marks {{on a piece of paper}} or chalkboard which are being used to express that idea; in the formal languages studied in mathematics and logic, the term [...] "symbol" [...] refers to the idea, and the marks are considered to be a token instance of the <b>symbol.</b> In <b>logic,</b> <b>symbols</b> build literal utility to illustrate ideas.|$|R
50|$|By contrast, for the three-variable {{fragment}} of first-order <b>logic</b> without function <b>symbols,</b> satisfiability is undecidable.|$|R
50|$|In <b>logic</b> formulae, logical <b>symbols</b> {{are used}} instead of these phrases; see the {{discussion}} of notation.|$|R
5000|$|TWiT {{gets its}} name from its first and {{flagship}} podcast, This Week in Tech. The logo design originated from a traditional <b>logic</b> gate <b>symbol</b> of an [...] "AND gate" [...] turned on its side. Voiceovers are provided by Jim Cutler.|$|R
50|$|There {{are three}} symbols for NAND gates: the MIL/ANSI symbol, the IEC symbol and the {{deprecated}} DIN symbol sometimes found on old schematics. For more information see <b>logic</b> gate <b>symbols.</b> The ANSI {{symbol for the}} NAND gate is a standard AND gate with an inversion bubble connected.|$|R
50|$|The Tree {{is usually}} written out using {{conventional}} <b>logic</b> gate <b>symbols.</b> A Cut Set {{is a combination}} of events, typically component failures, causing the top event. If no event can be removed from a Cut Set without causing the top event, then the Cut Set is called a Minimal Cut Set.|$|R
50|$|There {{are three}} symbols for NOR gates: the American (ANSI or 'military') symbol and the IEC ('European' or 'rectangular') symbol, {{as well as}} the {{deprecated}} DIN symbol. For more information see <b>Logic</b> Gate <b>Symbols.</b> The ANSI symbol for the NOR gate is a standard OR gate with an inversion bubble connected.|$|R
25|$|In {{the context}} of first-order <b>logic,</b> the <b>symbols</b> in a {{signature}} are {{also known as the}} non-logical symbols, because together with the logical symbols they form the underlying alphabet over which two formal languages are inductively defined: The set of terms over the signature and the set of (well-formed) formulas over the signature.|$|R
50|$|Algorithmic {{communication}} systems are {{a relatively new}} field within CETI. In these systems, which build upon early work on mathematical languages, the sender describes a small set of mathematic and <b>logic</b> <b>symbols</b> that {{form the basis for}} a rudimentary programming language that the recipient can run on a virtual machine. Algorithmic communication has a number of advantages over static pictorial and mathematical messages, including: localized communication (the recipient can probe and interact with the programs within a message, without transmitting a reply to the sender and then waiting years for a response), forward error correction (the message might contain algorithms that process data elsewhere in the message), and the ability to embed proxy agents within the message. In principle, a sophisticated program when run on a fast enough computing substrate, may exhibit complex behavior and perhaps, intelligence.|$|R
5000|$|In <b>logic,</b> the <b>symbol</b> ⊨, [...] or [...] {{is called}} the double turnstile. It is often read as [...] "entails", [...] "models", [...] "is a {{semantic}} consequence of" [...] or [...] "is stronger than". It {{is closely related to}} the turnstile symbol , which has a single bar across the middle, and which denotes syntactic consequence (in contrast to semantic).|$|R
40|$|The {{original}} {{definition of}} a stable model has been generalized to logic programs with aggregates. On the other hand, it was extended to first-order formulas using a syntactic transformation SM, similar to circumscription. In a recent paper, Lee and Meng combined these two ideas in a single framework by defining the operator SM for generalized formulas that may include, besides the usual syntactic features of first-order <b>logic,</b> <b>symbols</b> used in dlv-style aggregate expressions. In this note, we make the syntax proposed by Lee and Meng more uniform by allowing aggregate symbols to be used at any stage of the recursive process of building a formula from atoms, along with propositional connectives and quantifiers. We also generalize several useful properties of SM to formulas with aggregates, and investigate {{the relationship between the}} Lee-Meng semantics of aggregates and the semantics of counting adopted in the language RASPL- 1...|$|R
