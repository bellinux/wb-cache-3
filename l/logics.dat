10000|10000|Public
5|$|The {{frame and}} {{qualification}} problems. AI researchers (like John McCarthy) who used logic {{discovered that they}} could not represent ordinary deductions that involved planning or default reasoning without making changes to the structure of logic itself. They developed new <b>logics</b> (like non-monotonic <b>logics</b> and modal <b>logics)</b> to try to solve the problems.|$|E
5|$|Mathematically, {{these models}} can be {{represented}} in several ways. Petri nets, which were introduced in Carl Adam Petri's 1962 doctoral thesis, were an early attempt to codify the rules of consistency models. Dataflow theory later built upon these, and Dataflow architectures were created to physically implement the ideas of dataflow theory. Beginning in the late 1970s, process calculi such as Calculus of Communicating Systems and Communicating Sequential Processes were developed to permit algebraic reasoning about systems composed of interacting components. More recent additions to the process calculus family, such as the π-calculus, have added the capability for reasoning about dynamic topologies. <b>Logics</b> such as Lamport's TLA+, and mathematical models such as traces and Actor event diagrams, have also been developed to describe the behavior of concurrent systems.|$|E
25|$|Paraconsistent logic has {{significant}} overlap with many-valued logic; however, not all paraconsistent <b>logics</b> are many-valued (and, of course, not all many-valued <b>logics</b> are paraconsistent). Dialetheic <b>logics,</b> {{which are also}} many-valued, are paraconsistent, but the converse does not hold.|$|E
50|$|There {{are many}} others {{including}} AC/ACT <b>logic,</b> AHC/AHCT <b>logic,</b> ALVC <b>logic,</b> AUC <b>logic,</b> AVC <b>logic,</b> CBT <b>logic,</b> CBTLV <b>logic,</b> FCT <b>logic</b> and LVC <b>logic</b> (LVCMOS).|$|R
25|$|Inclusion/exclusion <b>logic</b> has {{the same}} {{expressive}} power as independence <b>logic,</b> already {{on the level of}} open formulas. Inclusion <b>logic</b> and exclusion <b>logic</b> are obtained by adding only inclusion atoms or exclusion atoms to first-order <b>logic,</b> respectively. Inclusion <b>logic</b> sentences correspond in expressive power to greatest fixed-point <b>logic</b> sentences; hence inclusion <b>logic</b> captures (least) fixed-point <b>logic</b> on finite models, and PTIME over finite ordered models. Exclusion <b>logic</b> in turn corresponds to dependence <b>logic</b> in expressive power.|$|R
40|$|The {{objective}} {{of this paper is}} to introduce the hybrid <b>logic</b> methodology into possibilistic reasoning. It has been well-known that possibilistic <b>logic</b> has some strong modal <b>logic</b> flavor. However, modal <b>logic</b> lacks the capability of referring to states or possible worlds though states are crucial to its semantics. Hybrid <b>logic</b> circumvents the problem by blending the classical <b>logic</b> mechanism into modal <b>logic.</b> It is a hybrid of classical <b>logic</b> and modal <b>logic,</b> however, unlike classical <b>logic,</b> it treats terms and formulas uniformly. We study some variants of hybrid possibilistic <b>logic,</b> including hybrid qualitative possibility <b>logic,</b> hybrid graded modal <b>logic,</b> and hybrid possibilistic description <b>logic...</b>|$|R
25|$|Default <b>logics,</b> non-monotonic <b>logics</b> and {{circumscription}} are {{forms of}} logic {{designed to help}} with default reasoning and the qualification problem. Several extensions of logic {{have been designed to}} handle specific domains of knowledge, such as: description logics; situation calculus, event calculus and fluent calculus (for representing events and time); causal calculus; belief calculus; and modal <b>logics.</b>|$|E
25|$|The {{characteristic}} or defining {{feature of}} a paraconsistent logic {{is that it}} rejects the principle of explosion. As a result, paraconsistent <b>logics,</b> unlike classical and other <b>logics,</b> {{can be used to}} formalize inconsistent but non-trivial theories.|$|E
25|$|A common way {{to conduct}} these {{simulations}} is {{to replicate the}} settlement <b>logics</b> of the real payment or securities settlement systems under analysis and then use real observed payment data. In case of system comparison or system development, naturally also the other settlement <b>logics</b> need to be implemented.|$|E
50|$|Following the {{developments}} in formal <b>logic</b> with symbolic <b>logic</b> {{in the late}} nineteenth century and mathematical <b>logic</b> in the twentieth, topics traditionally treated by <b>logic</b> not being part of formal <b>logic</b> have tended to be termed either philosophy of <b>logic</b> or philosophical <b>logic</b> if no longer simply <b>logic.</b>|$|R
50|$|One major {{improvement}} was to combine CMOS inputs and TTL drivers to {{form of a}} new type of <b>logic</b> devices called BiCMOS <b>logic,</b> of which the LVT and ALVT <b>logic</b> families are the most important. The BiCMOS family has many members, including ABT <b>logic,</b> ALB <b>logic,</b> ALVT <b>logic,</b> BCT <b>logic</b> and LVT <b>logic.</b>|$|R
40|$|In this paper, {{we present}} a paraconsistent {{description}} <b>logic</b> based on quasi-classical <b>logic.</b> Compared to the four-valued descrip-tion <b>logic,</b> quasi-classical description <b>logic</b> satisfies all of the three basic inference rules (i. e., modus ponens, modus tollens and disjunctive syllogism) so that the inference ability of quasi-classical description <b>logic</b> is closer to that of classical <b>logic.</b> Quasi-classical description <b>logic</b> combines three inclusions (i. e., mate-rial inclusion, internal inclusion and strong inclusion) of four-valued description <b>logic</b> so that quasi-classical description <b>logic</b> satisfies the intuitive equivalence. Moreover, we develop a ter-minable, sound and complete tableau algorithm for quasi-classical description <b>logic.</b> As an important result, the complexity of rea-soning problems in quasi-classical description <b>logic</b> is proved to be no {{higher than that of}} reasoning problems in description <b>logic.</b> Key words: ontology, description <b>logic,</b> quasi-classical <b>logic,</b> paracon-sistent <b>logic,</b> multiple-valued <b>Logic,</b> inconsistency-tolerant reasoning, tableau algorithm...|$|R
25|$|Girle, Rod, 2000. Modal <b>Logics</b> and Philosophy. Teddington UK: Acumen.|$|E
25|$|There {{are many}} {{variations}} of first-order logic. Some {{of these are}} inessential {{in the sense that}} they merely change notation without affecting the semantics. Others change the expressive power more significantly, by extending the semantics through additional quantifiers or other new logical symbols. For example, infinitary <b>logics</b> permit formulas of infinite size, and modal <b>logics</b> add symbols for possibility and necessity.|$|E
25|$|Algebraic logic {{uses the}} methods of {{abstract}} algebra to study the semantics of formal <b>logics.</b> A fundamental example {{is the use of}} Boolean algebras to represent truth values in classical propositional logic, and the use of Heyting algebras to represent truth values in intuitionistic propositional logic. Stronger <b>logics,</b> such as first-order logic and higher-order logic, are studied using more complicated algebraic structures such as cylindric algebras.|$|E
5000|$|<b>Logic</b> and inference: propositional <b>logic,</b> {{predicate}} <b>logic,</b> attribute <b>logic,</b> universal <b>logic,</b> inductive inference, deductive inference, associative reasoning, analogical reasoning, approximate reasoning.|$|R
25|$|In <b>logic</b> and {{mathematics}} second-order <b>logic</b> {{is an extension}} of first-order <b>logic,</b> which itself {{is an extension of}} propositional <b>logic.</b> Second-order <b>logic</b> is in turn extended by higher-order <b>logic</b> and type theory.|$|R
50|$|Water <b>logic</b> is {{contrast}} to traditional or rock <b>logic.</b> Water <b>logic</b> has boundaries which depends on circumstances and conditions while rock <b>logic</b> has hard boundaries. Water <b>logic,</b> in someways, resembles fuzzy <b>logic.</b>|$|R
25|$|Another type of <b>logics</b> are s {{that allow}} {{inductive}} definitions, like one writes for primitive recursive functions.|$|E
25|$|Maman, Daniel and Rosenhek, Zeev. The Israeli Central Bank: Political Economy: Global <b>Logics</b> & Local Actors. Routledge, 2011.|$|E
25|$|Jean-Yves Béziau (France/Switzerland, b. 1965). Has written {{extensively}} on the general structural features and philosophical foundations of paraconsistent <b>logics.</b>|$|E
5000|$|A. N. Prior created modern {{temporal}} <b>logic,</b> {{closely related}} to modal <b>logic,</b> in 1957 by adding modal operators F and P meaning [...] "eventually" [...] and [...] "previously". Vaughan Pratt introduced dynamic <b>logic</b> in 1976. In 1977, Amir Pnueli proposed using temporal <b>logic</b> to formalise the behaviour of continually operating concurrent programs. Flavors of temporal <b>logic</b> include propositional dynamic <b>logic</b> (PDL), propositional linear temporal <b>logic</b> (PLTL), linear temporal <b>logic</b> (LTL), computational tree <b>logic</b> (CTL), Hennessy-Milner <b>logic,</b> and T.|$|R
40|$|Traditional <b>logic</b> {{programming}} languages, such as Prolog, {{apply the}} methods of classical <b>logic</b> to programming tasks. Recently, computer scientists introduced new <b>logic</b> programming languages, based on linear <b>logic</b> rather than classical <b>logic.</b> While classical <b>logic</b> models information that does not change, linear <b>logic</b> models changes of state, and accounts for finite resources, such as money or computer memory, simply and directly. It {{has been applied to}} concurrency, natural language processing, updating information in databases, and other resource-sensitive problems. Affine <b>logic</b> is related to linear <b>logic</b> and has a similar range of applications but with a different emphasis. In a linear <b>logic</b> system, axioms mean that a particular resource is spent to meet a particular requirement, and every formula must be used, or spent, exactly once. This makes linear <b>logic</b> ideal for accounting for all resources. However, some situations require resources to be used at most once. Affine <b>logic</b> captures this notion because using all resources is not necessary. Therefore, programming languages based on affine <b>logic</b> may prove to be useful. To investigate how affine <b>logic</b> may be applied to <b>logic</b> programming, it is necessary to specify the differences between affine <b>logic</b> and classical <b>logic,</b> and between affine <b>logic</b> and linear <b>logic.</b> This paper looks at these differences in terms of the "structural" rules of classical <b>logic.</b> Keywords: affine <b>logic,</b> linear <b>logic,</b> <b>logic</b> programming 1...|$|R
50|$|Digital <b>logic</b> {{circuits}} can {{be divided}} into combinational <b>logic,</b> in which the output signals depend only on the current input signals, and sequential <b>logic,</b> in which the output depends both on current input and on past inputs. In other words, sequential <b>logic</b> is combinational <b>logic</b> with memory. Virtually all practical digital devices require sequential <b>logic.</b> Sequential <b>logic</b> {{can be divided}} into two types, synchronous <b>logic</b> and asynchronous <b>logic.</b>|$|R
25|$|Second-order logic {{with full}} {{semantics}} is more expressive than first-order logic. For example, {{it is possible}} to create axiom systems in second-order logic that uniquely characterize the natural numbers and the real line. The cost of this expressiveness is that second-order and higher-order <b>logics</b> have fewer attractive metalogical properties than first-order logic. For example, the Löwenheim–Skolem theorem and compactness theorem of first-order logic become false when generalized to higher-order <b>logics</b> with full semantics.|$|E
25|$|Hannan, M.T., L. Polos, and G R. Carroll (2007) <b>Logics</b> of Organization Theory: Audiences, Code, and Ecologies. Princeton: Princeton University Press.|$|E
25|$|There are systems {{weaker than}} full first-order logic {{for which the}} logical {{consequence}} relation is decidable. These include propositional logic and monadic predicate logic, which is first-order logic restricted to unary predicate symbols and no function symbols. Other <b>logics</b> with no function symbols which are decidable are the guarded fragment of first-order logic, as well as two-variable logic. The Bernays–Schönfinkel class of first-order formulas is also decidable. Decidable subsets of first-order logic are also studied {{in the framework of}} description <b>logics.</b>|$|E
40|$|This paper surveys various {{complexity}} and expressiveness results on {{different forms of}} <b>logic</b> programming. The main focus is on decidable forms of <b>logic</b> programming, in particular, propositional <b>logic</b> programming and datalog, but we also mention general <b>logic</b> programming with function symbols. Next to classical results on plain <b>logic</b> programming (pure Horn clause programs), more recent results on various important extensions of <b>logic</b> programming are surveyed. These include <b>logic</b> programming with different forms of negation, disjunctive <b>logic</b> programming, <b>logic</b> programming with equality, and constraint <b>logic</b> programming...|$|R
40|$|This paper {{exploits}} {{the point}} of view of constraint programming as computation in a logical system, namely constraint <b>logic.</b> We define the basic ingredients of constraint <b>logic,</b> such as constraint models and generalised polynomials. We show that constraint <b>logic</b> is an institution, and we internalise the study of constraint <b>logic</b> to the framework of category-based equational <b>logic.</b> By showing that constraint <b>logic</b> is a special case of category-based equational <b>logic,</b> we integrate the constraint <b>logic</b> programming paradigm into equational <b>logic</b> programming. Results include a Herbrand theorem for constraint <b>logic</b> programming characterising Herbrand models as initial models in constraint <b>logic...</b>|$|R
50|$|In philosophy, term <b>logic,</b> {{also known}} as {{traditional}} <b>logic,</b> syllogistic <b>logic</b> or Aristotelian <b>logic,</b> is a loose name for an approach to <b>logic</b> that began with Aristotle and that was dominant until the advent of modern predicate <b>logic</b> {{in the late nineteenth}} century. This entry is an introduction to the term <b>logic</b> needed to understand philosophy texts written before predicate <b>logic</b> came to be seen as the only formal <b>logic</b> of interest. Readers lacking a grasp of the basic terminology and ideas of term <b>logic</b> can have difficulty understanding such texts, because their authors typically assumed an acquaintance with term <b>logic.</b>|$|R
25|$|The {{extra effort}} of using sequences, however, is {{justified}} since part {{or all of}} the structural rules may be omitted. Doing so, one obtains the so-called substructural <b>logics.</b>|$|E
25|$|A full {{account of}} the duality between paraconsistent and intuitionistic logic, {{including}} an explanation on why dual-intuitionistic and paraconsistent <b>logics</b> do not coincide, {{can be found in}} Brunner and Carnielli (2005).|$|E
25|$|The most {{commonly}} studied infinitary <b>logics</b> are denoted Lαβ, where α and β are each either cardinal numbers or the symbol ∞. In this notation, ordinary first-order logic is Lωω.|$|E
5000|$|MacColl's work {{represents}} one of the first treatments of logical pluralism where he explores the possibilities of modal <b>logic,</b> <b>logic</b> of fiction, connexive <b>logic,</b> many-valued <b>logic</b> and probability <b>logic.</b>|$|R
50|$|Notable {{derivatives}} of interval temporal <b>logic</b> are graphical interval <b>logic,</b> signed interval <b>logic</b> {{and future}} interval <b>logic.</b>|$|R
40|$|In 1952 P. F. Strawson {{proposed}} a <b>logic</b> of presuppositions. It is {{an interpretation of}} Aristotelian <b>logic,</b> i. e. of the <b>logic</b> of the traditional syllogism. In 1981 Richard Diaz published a monograph in which he presented truth-relevant <b>logic.</b> This paper shows that truth-relevant <b>logic</b> is but a propositional version of the <b>logic</b> of presuppositions. A semantics of the <b>logic</b> of presuppositions is developed using truth-relevant <b>logic.</b> The semantics is then further extended to polyadic <b>logic</b> and some consequences discussed...|$|R
