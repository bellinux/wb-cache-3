75|638|Public
25|$|As >i is {{used for}} the Imaginary unit, its use as a <b>loop</b> <b>variable</b> is discouraged.|$|E
25|$|Unlike {{many other}} kinds of loops, such as the while-loop, the for-loop is often {{distinguished}} by an explicit loop counter or <b>loop</b> <b>variable.</b> This allows {{the body of the}} for-loop (the code that is being repeatedly executed) to know about the sequencing of each iteration. For-loops are also typically used when the number of iterations is known before entering the loop. For-loops are the shorthand way to make loops when the number of iterations is known, as every for-loop could be written as a while-loop.|$|E
25|$|That is, a {{value is}} {{assigned}} to the <b>loop</b> <b>variable</b> i and only if the while expression is true will the loop body be executed. If the result were false the for-loop's execution stops short. Granted that the loop variable's value is defined after the termination of the loop, then the above statement will find the first non-positive element in array A (and if no such, its value will be N + 1), or, with suitable variations, the first non-blank character in a string, and so on.|$|E
40|$|We {{compute the}} <b>loop</b> <b>variables</b> {{for a class}} of space-times with topological defects. In {{particular}} we compute these quantities for multiple moving cosmic strings and two plane topological defects crossed by a cosmic string, showing that these quantities are elements of the homogeneous Lorentz group. We also compute the <b>loop</b> <b>variables</b> for a multi-chiral cone and we show that {{in the context of}} Einstein theory the <b>loop</b> <b>variables</b> are elements of the inhomogeneous Lorentz group, but in the context of Einstein-Cartan theory they are elements of the homogeneous Lorentz group. (C) 1996 American Institute of Physics...|$|R
40|$|I {{consider}} a method using <b>loop</b> <b>variables</b> that can limit {{the size of}} the of a rational-expectations model and hopefully speed up the process of solving it. We can generally write such a model using a "Blanchard-Kahn" specification f_t(y_t, y_{t- 1 }, y_{t+ 1 }, x_t) = 0, where y is endogenous, x is exogenous, t is time and y_ 0 and y_{T+ 1 } are known. Two methods are generally considered for solving such a system: Fair-Taylor and Stacked-Time. Let us consider the model (without rational expectations) y_t = f_t(y(t), y(t- 1), x(t)). Considering a particular ordering of the equations, the <b>loop</b> <b>variables</b> are the ones used through their present value before they are computed. Computing the value of y associated through g to a starting value of y_b can be done using a Gauss-Seidel iteration. This allows computation, through finite differences, of the Jacobian of y_b = g(y_b) and the application of Newton-Raphson method to a problem with {{the size of the}} number of <b>loop</b> <b>variables.</b> This technique is easily applied to rational-expectations models. In the full model, the <b>loop</b> <b>variables</b> are actually the union of the original <b>loop</b> <b>variables</b> and the leads so that, if we consider computing (not solving) the whole set of equations in one pass, only <b>loop</b> <b>variables</b> and leads affect the result. Computing the Jacobian of the whole model will be limited, and to do the Newton-Raphson process, we need realize (at most) T x n_b + (T- 1) x n_l + 1 iterations and invert a matrix of dimension T x n_b + (T- 1) x n_l. To evaluate the efficiency (speed and convergence probability) of this method, we use a small macro economic model of the French economy. The initial version does not use rational expectations and contains three <b>loop</b> <b>variables,</b> associated with the Keynesian loop, the price-wage loop, and the exchange rate loop. In this version, we introduce rational expectations in the investment equation (where firms are supposed to know the next production level) and in the consumption equation (where households know in advance their future revenue). We produce simulations over 20 to 100 periods to compare our method with the above in terms of speed and convergence reliability. ...|$|R
5000|$|The {{algorithmic}} {{level is}} defined by the definition of concurrent algorithms (signals, <b>loops,</b> <b>variables,</b> assignments). In the structural domain, blocks like ALUs are in use.|$|R
25|$|Still another {{possibility}} is that the code generated may employ an auxiliary variable as the <b>loop</b> <b>variable,</b> possibly held in a machine register, whose value {{may or may not be}} copied to I on each iteration. Again, modifications of I would not affect the control of the loop, but now a disjunction is possible: within the loop, references to the value of I might be to the (possibly altered) current value of I or to the auxiliary variable (held safe from improper modification) and confusing results are guaranteed. For instance, within the loop a reference to element I of an array would likely employ the auxiliary variable (especially if it were held in a machine register), but if I is a parameter to some routine (for instance, a print-statement to reveal its value), it would likely be a reference to the proper variable I instead. It is best to avoid such possibilities.|$|E
2500|$|I = 7 [...] !Overt {{adjustment}} of the <b>loop</b> <b>variable.</b> Compiler complaint likely.|$|E
2500|$|... normal {{statements}} [...] !Memory might fade that [...] "I" [...] is the <b>loop</b> <b>variable.</b>|$|E
50|$|Loop interchange: These {{optimizations}} exchange inner loops with outer loops. When the <b>loop</b> <b>variables</b> index into an array, such {{a transformation}} can improve locality of reference, {{depending on the}} array's layout.|$|R
40|$|Projet CHARMERegister {{allocation}} is a compiler phase {{where the}} gains can be essential in achieving performance on new architectures exploiting instruction level parallelism. We focus {{our attention on}} loops and improve the existing methods by introducing {{a new kind of}} graph. We model loop unrolling and register allocation together in a common framework, called the meeting graph. We expect that our results improve significantly loop register allocation while keeping the amount of code replication low. As a byproduct, we present an optimal algorithm for allocating <b>loop</b> <b>variables</b> to a rotating register file, as well as a new heuristic for <b>loop</b> <b>variables</b> spilling...|$|R
5000|$|Interchange or {{permutation}} - these optimizations exchange inner loops with outer loops. When the <b>loop</b> <b>variables</b> index into an array, such {{a transformation}} can improve locality of reference, {{depending on the}} array's layout.|$|R
2500|$|Different {{languages}} specify {{different rules}} for what value the <b>loop</b> <b>variable</b> will hold on termination of its loop, and indeed some hold that it [...] "becomes undefined". This permits a compiler to generate code that leaves any {{value in the}} <b>loop</b> <b>variable,</b> or perhaps even leaves it unchanged because the loop value was held in a register and never stored to memory. Actual behaviour may even {{vary according to the}} compiler's optimization settings, as with the Honywell Fortran66 compiler.|$|E
2500|$|In some {{languages}} (not C or C++) the <b>loop</b> <b>variable</b> is immutable {{within the}} scope of the loop body, with any attempt to modify its value being regarded as a semantic error. Such modifications are sometimes a consequence of a programmer error, which can be very difficult to identify once made. However, only overt changes are likely to be detected by the compiler. Situations where the address of the <b>loop</b> <b>variable</b> is passed as an argument to a subroutine make it very difficult to check, because the routine's behavior is in general unknowable to the compiler. Some examples in the style of Fortran: ...|$|E
2500|$|PL/I and Algol 68, allows loops {{in which}} the <b>loop</b> <b>variable</b> is {{iterated}} over a list of ranges of values instead of a single range. The following PL/I example will execute the loop with six values of i: 1, 7, 12, 13, 14, 15: ...|$|E
5000|$|The START/NEXT {{block is}} used for a simple block that runs from a start index to an end index. Unlike the FOR/NEXT <b>loop,</b> the <b>looping</b> <b>variable</b> is not available. The syntax of the START/NEXT block is: ...|$|R
40|$|We {{study the}} {{suitability}} of complex Wilson <b>loop</b> <b>variables</b> as (generalized) coordinates on the physical phase space of SU(2) -Yang-Mills theory. To this end, we construct a natural one-to-one map from the physical phase space of the Yang-Mills theory with compact gauge group G to a subspace of the physical configuration space of the complex G^C-Yang-Mills theory. Together with a recent result by Ashtekar and Lewandowski this implies that the complex Wilson <b>loop</b> <b>variables</b> form {{a complete set of}} generalized coordinates on the physical phase space of SU(2) -Yang-Mills theory. They also form a generalized canonical loop algebra. Some implications for both gauge theory and general relativity are discussed...|$|R
40|$|In {{recent work}} on Einstein gravity in four {{dimensions}} using the Ashtekar <b>variables,</b> non-local <b>loop</b> <b>variables</b> have {{played an important}} role in attempts to formulate a quantum theory. The introduction of such variables is guided by gauge invariance, and here an infinite set of <b>loop</b> <b>variables</b> is introduced for the Hamiltonian form of the Einstein-Maxwell theory. The loops that enter the description naturally are the (source free) electric field lines. These variables are invariant under spatial diffeomorphisms and they also form a closed Poisson algebra. As such they may be useful for quantization attempts and for studying classical solutions. Comment: 8 pages, Alberta-Thy- 30 - 93 (RevTeX...|$|R
2500|$|This type of for-loop is a {{generalisation}} of the numeric range type of for-loop, as {{it allows}} for the enumeration of sets of items other than number sequences. It is usually characterized {{by the use of}} an implicit or explicit iterator, in which the <b>loop</b> <b>variable</b> takes on each of the values in a sequence or other data collection. A representative example in Python is: ...|$|E
2500|$|The name for-loop {{comes from}} the English word , which is used as the keyword in most {{programming}} languages to introduce a for-loop. The term in English dates to ALGOL 58 and was popularized in the influential later ALGOL 60; it is the direct translation of the earlier German , used in Superplan (1949–1951) by Heinz Rutishauser, who also was involved in defining ALGOL 58 and ALGOL 60. The loop body is executed [...] "for" [...] the given values of the <b>loop</b> <b>variable,</b> though this is more explicit in the ALGOL version of the statement, in which a list of possible values and/or increments can be specified.|$|E
5000|$|As [...] is {{used for}} the Imaginary unit, its use as a <b>loop</b> <b>variable</b> is discouraged.|$|E
40|$|We {{consider}} the small deformation of the point-like Wilson loop in the 3 -dimensional N= 6 superconformal Chern-Simons theory. By Taylor {{expansion of the}} point-like Wilson loop in powers of the <b>loop</b> <b>variables,</b> we obtain the BPS operators that correspond to the excited string states of the dual IIA string theory on the pp wave background. The BPS conditions of the Wilson loop constrain both the <b>loop</b> <b>variables</b> and the forms of the operators obtained in the Taylor expansion. Comment: 19 pages; v 2 : references added, minor corrections v 3 : references added, introduction changed, comments added v 4 : a reference added, comments added to discussio...|$|R
40|$|The lattice {{gauge theory}} {{calculations}} predict hadronic matter to quark-gluon plasma phase transitions, decofinement phase transitions, which occur when hadronic matter reaches a critical temperature or pressure. The Polyakov loop is the order parameter of the deconfinement phase transition when the quarks are infinitely heavy. The global Z sub N symmetry of the Polyakov <b>loop</b> <b>variables</b> {{suggests that the}} (d + 1) - dimensional finite temperature SU(N) lattice gauge theory and Z sub N spin system {{are in the same}} universality class and finite temperature lattice gauge theories can be replaced by effective spin models consisting of the Polyakov <b>loops</b> as spin <b>variables.</b> When finite spin Hamilton is explicitly broken and longer the polyakov loop is the order parameter. In spin system the ferromagnetic phase transitions can be understood in terms of percolating cluster of the aligned spins. The similar approach can also be applied to spin models with polyakov <b>loop</b> <b>variables.</b> Here the difficulty appears in the definition of the percolating clusters of the same signed Polyakov loops. Recently, the attempts towards understanding the problem have reached to considerable levels. In the thesis work two new approaches have been proposed towards describing deconfinement phase transitions in terms of the percolating clusters of the Polyakov <b>loop</b> <b>variables...</b>|$|R
40|$|In this paper, {{an attempt}} {{is made to}} {{represent}} 5 + 1 dimensional gravity (via ADM formalism) {{in terms of the}} loop constructions introduced by the author in a companion paper. The "momenta" and "velocity" from the earlier paper, which were proven to be cobordant loops in 6 D; are used as the new <b>loop</b> <b>variables.</b> In the process, the Hamiltonian, Diffeomorphism and Gauss constraints are written in polynomials of these <b>loop</b> <b>variables.</b> Other constraints such as the "Q" constraint and simplicity constraints arise due to greater degrees of freedom. We then undergo the Master Constraint treatment to resolve the constraints. Then, a pre-quantum version of the theory is examined; and the properties of the Grassmannian of the Hilbert Space are explored. Comment: 8 page...|$|R
5000|$|... {{creates a}} <b>loop</b> <b>variable</b> and repeats the tag iterating a sequence, e.g. for {{creating}} a selection list or a table ...|$|E
5000|$|Different {{languages}} specify {{different rules}} for what value the <b>loop</b> <b>variable</b> will hold on termination of its loop, and indeed some hold that it [...] "becomes undefined". This permits a compiler to generate code that leaves any {{value in the}} <b>loop</b> <b>variable,</b> or perhaps even leaves it unchanged because the loop value was held in a register and never stored to memory. Actual behaviour may even {{vary according to the}} compiler's optimization settings, as with the Honywell Fortran66 compiler.|$|E
5000|$|The Wilson <b>loop</b> <b>variable</b> is a {{quantity}} {{defined by the}} trace of a path-ordered exponential of a gauge field [...] transported along a closed line C: ...|$|E
40|$|The {{canonical}} quantization of diffeomorphism invariant {{theories of}} connections {{in terms of}} <b>loop</b> <b>variables</b> is revisited. Such theories include general relativity {{described in terms of}} Ashtekar-Barbero variables and extension to Yang-Mills fields (with or without fermions) coupled to gravity. It is argued that the operators induced by classical diffeomorphism invariant or covariant functions are respectably invariant or covariant under a suitable completion of the diffeomorphism group. The canonical quantization in terms of <b>loop</b> <b>variables</b> described here, yields a representation of the algebra of observables in a separable Hilbert space. Furthermore, the resulting quantum theory is equivalent to a model for diffeomorphism invariant gauge theories which replaces space with a manifestly combinatorial object. Comment: Revised version. To be published in General Relativity and Gravitation, 14 pages, 1 figur...|$|R
30|$|Where k is a <b>loop</b> control <b>variable.</b>|$|R
40|$|We {{present a}} {{histories}} {{version of the}} connection formalism of general relativity. Such an approach introduces a spacetime description [...] a characteristic feature of the histories approach [...] and we discuss {{the extent to which}} the usual <b>loop</b> <b>variables</b> are compatible with a spacetime description. In particular, we discuss the definability of the Barbero connection without any gauge fixing. Although it is not the pullback of a spacetime connection onto the three-surface and it does not have a natural spacetime interpretation, this does not mean that the Barbero connection is not suitable variable for quantisation; it appears naturally in the formalism even in absence of gauge fixing. It may be employed therefore, to define <b>loop</b> <b>variables</b> similar to those employed in loop quantum gravity. However, the loop algebra would have to be augmented by the introduction of additional variables. Comment: 23 page...|$|R
50|$|The foreach {{statement}} takes {{a list of}} values, {{usually a}} list of filenames produced by wildcarding, and then for each, sets the <b>loop</b> <b>variable</b> to that value and runs the nested commands.|$|E
5000|$|In some {{languages}} (not C or C++) the <b>loop</b> <b>variable</b> is immutable {{within the}} scope of the loop body, with any attempt to modify its value being regarded as a semantic error. Such modifications are sometimes a consequence of a programmer error, which can be very difficult to identify once made. However, only overt changes are likely to be detected by the compiler. Situations where the address of the <b>loop</b> <b>variable</b> is passed as an argument to a subroutine make it very difficult to check, because the routine's behavior is in general unknowable to the compiler. Some examples in the style of Fortran: ...|$|E
50|$|Now r9 is the <b>loop</b> <b>variable,</b> but it {{interacts with}} the {{multiply}} by 8. Here we get to do some strength reduction. The multiply by 8 {{can be reduced to}} some successive additions of 8. Now there are no multiplications inside the loop.|$|E
40|$|It {{is shown}} how the Mandelstam {{constraints}} for an SU(2) pure lattice gauge theory with 3 N physical {{degrees of freedom}} may be solved completely in terms of 3 N Wilson and Polyakov <b>loop</b> <b>variables</b> and N − 1 gauge invariant discrete ± 1 variables, thus enabling a manifestly gauge invariant formulation of the theory...|$|R
40|$|The loop {{representation}} {{plays an}} important role in canonical quantum gravity because <b>loop</b> <b>variables</b> allow a natural treatment of the constraints. In these lectures we give an elementary introduction to (i) the relevant history of loops in knot theory and gauge theory, (ii) the loop representation of Maxwell theory, and (iii) the loop representatio...|$|R
40|$|The large-mass {{behaviour}} of <b>loop</b> <b>variables</b> in Maxwell-Chern-Simons {{theory is}} analysed {{by means of}} a gauge-field transformation which allows to reset the Maxwell-Chern-Simons action to pure Chern-Simons. Comment: 15 pages, final version to appear on Journ. Phys. A: Math. Gen [...] The case of the large mass behaviour of planar Wilson lines has been include...|$|R
