19|9|Public
25|$|Security skins are {{a related}} {{technique}} that involves overlaying a user-selected image onto the <b>login</b> <b>form</b> {{as a visual}} cue that the form is legitimate. Unlike the website-based image schemes, however, the image itself is shared only between the user and the browser, and not between the user and the website. The scheme also relies on a mutual authentication protocol, which makes it less vulnerable to attacks that affect user-only authentication schemes.|$|E
5000|$|A {{web site}} could declare an input that should {{autofocus}} when the page is loaded, {{such as a}} search field (e.g., Google.com), or the username field of a <b>login</b> <b>form.</b> Sites offering keyboard shortcuts often allow pressing [...] to see the available shortcuts. Examples include Gmail and JIRA.|$|E
50|$|Similar problem {{arises in}} case of {{websites}} requiring authentication, where the user is expected to enter his or her credentials without actually knowing if the website is not spoofed. HTTPS mitigates this attack by first authenticating the server to the user (using trust anchor and certification path validation algorithm), and only then displaying the <b>login</b> <b>form.</b>|$|E
40|$|A {{number of}} {{commercial}} cloud-based password managers use bookmarklets to automatically populate and submit <b>login</b> <b>forms.</b> Unfortunately, an attacker web site can maliciously alter the JavaScript environment and, when the login bookmarklet is invoked, steal the user’s passwords. We describe general attack techniques for altering a bookmarklet’s JavaScript environment and {{apply them to}} extracting passwords from six commercial password managers. Our proposed solution has been adopted by several of the commercial vendors. 1...|$|R
30|$|Xiang et al. [7] present CANTINA+, an effective, rich feature-based machine {{learning}} approach to detect phishing webpages. The rich features {{are taken from}} the various field of a webpage like Document Object Model (DOM) tree and the URL of a website. They filtered the website without <b>login</b> <b>forms</b> in {{the first step to}} decrease false positive rate. CANTINA+ achieved a true positive rate of 92  % and a false positive rate of 0.4  %.|$|R
50|$|Content Prioritization and Mobile Navigation Aids: The browser {{attempts}} to automatically find the main {{information on a}} web page and focus on that content. Additionally, a user can “jump to” other prioritized content such as <b>login,</b> search or <b>forms.</b>|$|R
5000|$|Modules is dynamic or {{static output}} in an {{template}} position. Templates define dynamic positions {{that can be}} assigned modules. An example could be a boxed <b>login</b> <b>form</b> in a sidebar. This could be compared to another CMS's [...] "widgets in sidebar". Multiple modules can be assigned to each position and each module's assignment can be controlled per menu item. Historically, modules are assigned to sidebars around the main component output.|$|E
50|$|Security skins are {{a related}} {{technique}} that involves overlaying a user-selected image onto the <b>login</b> <b>form</b> {{as a visual}} cue that the form is legitimate. Unlike the website-based image schemes, however, the image itself is shared only between the user and the browser, and not between the user and the website. The scheme also relies on a mutual authentication protocol, which makes it less vulnerable to attacks that affect user-only authentication schemes.|$|E
40|$|Web {{security}} {{is an important}} area of research. This work has focused on web securing schemes. The primary concentration is to interpret the way to handle the SQL Injections. It {{is one of the}} many web attack methods used by hackers to steal data from industries. It is one of the most usual technique used in present era for application layer attack It is the category of attack that takes the benefit of. Improper coding of your web applications that allows hacker to inject SQL commands into say a <b>login</b> <b>form</b> to allow them to gain access to the data held within your database. So in this work we have reviewed different research on the SQL injections...|$|E
40|$|Vulnerabilities in {{password}} {{managers are}} unremitting because current designs provide large attack surfaces, {{both at the}} client and server. We describe and evaluate Horcrux, a password manager that is designed holistically to minimize and decentralize trust, while retaining the usability of a traditional password manager. The prototype Horcrux client, implemented as a Firefox add-on, is split into two components, with code that {{has access to the}} user's master's password and any key material isolated into a small auditable component, separate from the complexity of managing the user interface. Instead of exposing actual credentials to the DOM, a dummy username and password are autofilled by the untrusted component. The trusted component intercepts and modifies POST requests before they are encrypted and sent over the network. To avoid trusting a centralized store, stored credentials are secret-shared over multiple servers. To provide domain and username privacy, while maintaining resilience to off-line attacks on a compromised password store, we incorporate cuckoo hashing in a way that ensures an attacker cannot determine if a guessed master password is correct. Our approach only works for websites that do not manipulate entered credentials in the browser client, so we conducted a large-scale experiment that found the technique appears to be compatible with over 98 % of tested <b>login</b> <b>forms.</b> Comment: 13 page...|$|R
50|$|Personal's {{consumer}} products included: the Data Vault with Cloud Sync for secure management and sharing {{of data and}} documents between an individual and other individuals, companies, sites, apps and devices; and Data Imports to import information from third parties, including social media services, companies and the U.S. Department of Education, and the Fill It App for automated completion of web and mobile <b>forms,</b> <b>logins</b> and checkouts.|$|R
50|$|The Personal Platform was a privacy- and security-by-design {{platform}} {{for individuals to}} manage and reuse their own data and information. The Fill It app was a 1-click form-filling solution for web and mobile <b>logins,</b> checkouts and <b>forms,</b> and the Data Vault app served as the main cloud-based repository for a user's data. Personal helped individuals take control and benefit from their information while knowing that the information in their Data Vault remained legally theirs {{and could not be}} used without their permission.|$|R
40|$|In this {{scholarly}} writing explain {{about the}} making of the DVD leasing application program by using Visual Basic 6. 0 programs consist of the <b>login</b> <b>form</b> Main Menu, the form customer, the form Rental Transactions and Customer Reports form can be printed. Then, making this application utilizing Microsoft Access database on the facilities and work under windows operating system to facilitate in making this program Lease is an agreements in which the tenant must pay or provide compensation or benefits from the objects or goods owned by the owner of the loaned items. Example of a lease in everyday life such as office building contract hire, lease land for agricultural land, hire / charter vehicles, rentals vcd and dvd original, and etc...|$|E
40|$|Phishing is {{a plague}} in cyberspace. Typically, phish {{detection}} methods either use humanverified URL blacklists or exploit webpage features via machine learning techniques. However, {{the former is}} frail in terms of new phish, and the latter suffers from the scarcity of effective features and the high false positive rate (FP). To alleviate those problems, we propose a layered anti-phishing solution that aims at 1) exploiting the expressiveness of a rich set of features with machine learning to achieve a high true positive rate (TP) on novel phish, and 2) limiting the FP to a low level via filtering algorithms. Specifically, we proposed CANTINA+, the most comprehensive feature-based approach in the literature including eight novel features, which exploits the HTML Document Object Model (DOM), search engines and third party services with machine learning techniques to detect phish. Moreover, we designed two filters to help reduce FP and achieve runtime speedup. The first is a near-duplicate phish detector that uses hashing to catch highly similar phish. The second is a <b>login</b> <b>form</b> filter, which directly classifies webpages with no identified <b>login</b> <b>form</b> as legitimate. We extensively evaluated CANTINA+ with two methods on a diverse spectrum of corpora with 8118 phish and 4883 legitimate webpages. In the randomized evaluation, CANTINA+ achieved over 90 % TP on unique testing phish and over 99 % TP on near-duplicate testing phish, and about 0. 4 % FP with 10 % training phish. In the time-based evaluation, CANTINA+ achieved over 87 % TP on unique testing phish, about 95 % TP on near-duplicate testing phish, and about 1 % FP under 20 % training phish with a two-week sliding window. Capable of achieving 0. 4 % FP and over 90 % TP, our CANTINA+ has been demonstrated to be a competitive anti-phishing solution...|$|E
40|$|Changes in this release: Usability {{improvements}} to collection sets, collections, and credentials. These include: More contextual help {{is available to}} users in the workflow of setting up a collection and credentials. The "Add collection" button dropdown provides a description of each collection type. To help users focus {{on the most important}} information on collection and credential pages, less important details are hidden in an accordion view. Users do not need to click to login to SFM; the <b>login</b> <b>form</b> is now on the landing page. Tightened up starting/stopping/skipping of Twitter stream harvests. Allow exporting Twitter stream harvests as soon as tweets are available (instead of having to wait until the collection is turned off.) On collection detail page, seed warnings are displayed next to the seed. Improved logic for preventing creating duplicate seeds. Fixes to admin interface to handle large lists (e. g., the list of possible parent harvests for a harvest) that was bogging down page rendering...|$|E
40|$|Key size {{becomes very}} {{important}} to a cryptographic algorithm according to Kerckhoffs law where a civilian cryptosystem shall depend fully on key secrecy. Currently, there are four passphrase generation methods: Sentence, acronym, diceware, and coinware. Unicity distance is the minimum size of ciphertext for unique decipherability of ciphertext when number of spurious keys is zero. A key with size less than unicity distance is good where there are spurious keys which allow a protection method using limited unsuccessful <b>logins.</b> Here, stronger <b>forms</b> of passphrases using textual semantic noises like punctuation marks, mnemonic substitution, misspelling, and associative morphing, which improve the key entropy, are proposed An ASCII mutual substitution table is presented together with its proof on information rate increment. Higher information rate has lower redundancy, and hence bigger unicity distance ensures encrypted keys the short cryptogram in a key vault, like Password Safe, cannot be cryptanalyzed within certain limited login attempts. Document Type: Proceedings Pape...|$|R
40|$|Online Shop Security System based AES Cryptography is an {{application}} {{in the form}} of an online store website that was developed to improve safety and comfort for the user. Online store security system implemented at the time of <b>login</b> in the <b>form</b> of a verification code. This online store security system restricts website access only on one specific computer so that data is more secure than those who are not responsible. Online Shop Security System based AES cryptography was developed using Adobe Dreamweaver web editor with web promgramming PHP and MySQL database server. Web design {{in the form of}} headers, banner and other web components edited using the program Adobe Photoshop image processing applications. The processing of data using SQL syntax. Results of research and testing show that the System Security Online store based AES cryptography can display information well and is user friendly both for users and administrators, and is also equipped with a security system that can improve user comfort in accessing the online store...|$|R
40|$|Degree of {{bachelor}} of science(BSc) in Information Technology for management StudiesThe project that be develop is about School Student Information Management System that use in Bt/Oddamavadi Fatima Balika M. V. {{the project will}} {{be known as the}} School Student Information Management System (SSIMS) There are Six major modules included in the SSIMS, that are the Home Page Module, <b>Login</b> Module, Main <b>form</b> Module, Update and Delete Module, Progress Report module and Report Generation Module. This report contains the introduction, Literature Review and methodology, analysis and design of the project {{that is going to be}} developed the project methodology that is going to be used is the Database Life Cycle (DBLC) and Software Development Life Cycle (SDLC). Problems of the current system of the School Student Information Management System had been analyzed and requirement analysis had been made. SSIMS is going to be Window Base and going to be used by different groups of users. As user group, Record Officer and Class Room teacher to develop the real system, designs had been made that covers the system architecture, user interfaces and database designs. This system is hoped to help the Fathima Balika M. V in Handling the Student Information Managemen...|$|R
40|$|OpenID is an {{open and}} {{promising}} Web single sign-on (SSO) solution. This work investigates the challenges and concerns web users face when using OpenID for authentication, and identifies what changes in the login flow could improve the users ’ experience and adoption incentives. We found our participants had several behaviors, concerns, and misconceptions that hinder the OpenID adoption process: (1) their existing password management strategies reduce the perceived usefulness of SSO; (2) many (26 %) expressed concerns with single-point-of-failure related issues; (3) most (71 %) held the incorrect belief that the OpenID credentials are being given to the content providers; (4) half exhibited an inability to distinguish a fake Google <b>login</b> <b>form,</b> even when prompted; (5) many (40 %) were hesitant to consent {{to the release of}} their personal profile information; and (6) many (36 %) expressed concern with the use of SSO on websites that contain valuable personal information or, conversely, are not trustworthy. We also found that with an improved affordance and privacy control, more than 60 % of study participants would use Web SSO solutions on the websites they trust...|$|E
40|$|Cross-Site Request Forgery (CSRF) is {{a widely}} {{exploited}} web site vulnerability. In this paper, we present a new variation on CSRF attacks, login CSRF, in which the attacker forges a cross-site request to the <b>login</b> <b>form,</b> logging the victim into the honest web site as the attacker. The severity of a login CSRF vulnerability varies by site, {{but it can be}} as severe as a cross-site scripting vulnerability. We detail three major CSRF defense techniques and find shortcomings with each technique. Although the HTTP Referer header could provide an effective defense, our experimental observation of 283, 945 advertisement impressions indicates that the header is widely blocked at the network layer due to privacy concerns. Our observations do suggest, however, that the header can be used today as a reliable CSRF defense over HTTPS, making it particularly well-suited for defending against login CSRF. For the long term, we propose that browsers implement the Origin header, which provides the security benefits of the Referer header while responding to privacy concerns...|$|E
40|$|To {{encourage}} {{users to}} use {{stronger and more}} secure pass-words, modern web browsers offer users password man-agement services, allowing users to save previously en-tered passwords locally onto their hard drives. We present Lupin, a tool that automatically extracts these saved pass-words without the user’s knowledge. Lupin allows a net-work adversary to obtain passwords {{as long as the}} <b>login</b> <b>form</b> appears on a non-HTTPS page. Unlike existing password sniffing tools, Lupin can obtain passwords for websites users are not visiting. Furthermore, Lupin can extract passwords embedded in login forms with a destina-tion address served in HTTPS. To determine the number of websites vulnerable to our attack, we crawled the top 45, 000 most popular websites from Alexa’s top website list and discovered that at least 28 % of these sites are vulnerable. To further demonstrate the feasibility of our attack, we tested Lupin under controlled conditions using one of the authors ’ computers. Lupin was able to extract passwords from 1, 000 websites in less than 35 seconds. We suggest techniques for web developers to protect their web applications from attack, and we propose alternative designs for a secure password manager. ...|$|E
40|$|Authentication {{techniques}} that use at many web pages {{and easy to}} do is use user-id and password. However, these techniques are vulnerable to theft user-id and password when sent from client to server. For that given an alternative security by encrypting the user-id and password at client side before {{being sent to the}} server. The algorithm used is symmetric algorithm RC- 6, designed with javascript on the client side and PHP on the server side. Based on RC- 6 Symmetric encryption algorithm, the research done by creating a generating keys script for encryption and decryption, encryption RC- 6 with javascript, decryption RC- 6 with PHP and the design of a prototype web page with a login that already uses encryption. Using the program fidller and wireshark shows that a web page with <b>login</b> <b>form</b> that does not use encryption to send user-id and password in plaintext form so easily obtained by the sniffer. While in the web pages that use encryption, user-id and password is sent in the form of ciphertext. The addition of a web page access time is shown by firebug, where on the web pages that use encryption are adding an average access time of 64. 67 ms. ...|$|E
40|$|With {{the growing}} {{amount of data}} on the Web and the {{increase}} in frequency of new information being published, it becomes more and more critical to deliver these updates to the users in a timely manner. Having an efficient update delivery system enables companies to distribute their valuable information to many more users and get more of them to visit their web pages and latest products. Tekla, the case study company of this thesis aims to tackle this issue by developing an automatic update notification tool to periodically pull the updates from their various web pages and offer them to the users. The updates range from recent news and events to the latest software updates and extensions. The company’s web service, Extranet, holds valuable information to the company and therefore it is protected by an authenticated <b>login</b> <b>form.</b> Therefore, any communication with the server has to go through a secure channel and this prevents the use of conventional update delivery methods. In this study, the Tekla Update Notification Tool is specified, designed and implemented. The application provides a communication channel between the software company and individual users. When a new update is detected, the application automatically delivers the update to the user’s computer and sends notifications indicating that a new update is available. The retrieval an...|$|E
30|$|To check whether SQL {{injection}} {{attacks are}} possible, the vulnerability scanners send specially crafted requests {{and analyze the}} responses returned by the server. A server may respond with a rejection page or with an execution page. A rejection page is returned by the server {{as a consequence of}} an error while processing the request. An execution page is returned by the server as a consequence of a successful execution of the request. This page may correspond to the ‘normal’ scenario, i.e., {{in the case of a}} legitimate use of the Web site, but may also result from a successful exploitation of an injection attack. These latter requests are those we consider in this paper. In particular, our objective is to identify the vulnerabilities that can be successfully exploited by the attackers. For instance, the successful exploitation of an SQL injection vulnerability in a <b>login</b> <b>form</b> may lead to bypass an authentication, and the successful exploitation of a File include vulnerability on a search form may lead to display extra data like /etc/passwd file content. In order to identify the vulnerabilities of a Web site, the scanners generally send specially crafted requests via the identified injection points allowing them to determine whether the input parameters submitted to the target system are sanitized or not. An injection point is a piece of a Web page into which a code can be injected: a parameter in the URL or a field of a form, etc. Overall, the identification of potential vulnerabilities is generally based on the characterization of responses of a Web server to crafted requests sent via the injection points and the ability to distinguish rejection pages and execution pages.|$|E
40|$|Indian Railways is the world's ninth largest {{commercial}} or utility employer, by number of employees, with over 1. 4 million employees. Indian Railways (reporting mark IR) is an Indian state-owned enterprise, {{owned and operated}} by the government of India through the Ministry of Railways. Our Railways were first introduced to India in 1853 from Bombay to Thane. Indian Railways is the golden era to our nation. RUNNING ROOM is a railway project which aims “To allocate the beds for the loco Pilots (LP’s), Assistant Loco Pilots (ALP’s) and Guards in the running room of all divisions. It is also used to display the allocated beds of different sections through online”, is using J 2 EE technology. The project maintains the registers of the LP’s, ALP’s, Guards those who are traveling between different sections and to know the timings of Loco Pilots. In this the Loco-Pilot and Assistant-Pilots will take rest after traveling to a particular distance for a specified time. The LP/ALP must register into the book by giving the details like his name, incoming train no, outgoing date, outgoing train no, room which is allocated, room departure time and also along with his designation and head quarters. It is also called bed occupation register. In this project if the bed is filled it will be indicated with a particular color. By this we can get the remaining number of beds so that we can allocate for the other pilots all this information must be provided through online. When a pilot register in the <b>login</b> <b>form</b> and enter his details like username, password he will redirect to the bed occupation register. While entering to the designation and some other details the particular room number and the bed number will be allocated to the LP/ALP. The process will be easy, comparing to the present situation, which is done as paper work...|$|E
40|$|Abstract In this paper, we {{concerned}} about improving inefficiences {{of the business}} processes at store room areagrocery products in a grocery company. Due to inefficiencies of the inventory management, {{it is necessary to}} improve them related with providing good information and data management. The main problem is miss information related with early warning system of lifetime products. They often have unsold inventory grocery products as impact of expired date. This journal analyzes a system to find out the need for system, then designs the system based on the system requirement obtained from the analysis. The information system of store room area grocery product is designed by using an object-oriented approach and UML modeling language to identify the actor, to make the system use case, to model the business process using the activity chart, to make interaction scheme using sequence diagram and to identify class. In the designing stage, this database and interface design is made. After database and interface design, the next stage is to make the program code by considering the use case and interaction diagrams that are made previously in modeling the object-oriented system. The result of this research consists of input constituting <b>login</b> <b>form,</b> product, suppliers, unit, category, action, location, and personnel data, addition, withdrawal, and action transactions, searching for product data, personnel data, location data and report input. Meanwhile the output constitutes withdrawal list, increment, product early earning reports approaching the expired date, product list, location list, personnel list, stock op name checklist, and the product master label. The outputs of the information system are reports and documents in monitor screen view and in printing. The validation showed that the information system designed can support the early warning system of expired date of grocery products in store room area. Keywords: information system, object oriented, early warning, inventory management, expired dat...|$|E
40|$|Abstract — Indian Railways is the world's ninth largest {{commercial}} or utility employer, by number of employees, with over 1. 4 million employees. Indian Railways (reporting mark IR) is an Indian state-owned enterprise, {{owned and operated}} by the government of India through the Ministry of Railways. Our Railways were first introduced to India in 1853 from Bombay to Thane. Indian Railways is the golden era to our nation. RUNNING ROOM is a railway project which aims “To allocate the beds for the loco Pilots (LP’s), Assistant Loco Pilots (ALP’s) and Guards in the running room of all divisions. It is also used to display the allocated beds of different sections through online”, is using J 2 EE technology. The project maintains the registers of the LP’s, ALP’s, Guards those who are traveling between different sections and to know the timings of Loco Pilots. In this the Loco-Pilot and Assistant-Pilots will take rest after traveling to a particular distance for a specified time. The LP/ALP must register into the book by giving the details like his name, incoming train no, outgoing date, outgoing train no, room which is allocated, room departure time and also along with his designation and head quarters. It is also called bed occupation register. In this project if the bed is filled it will be indicated with a particular color. By this we can get the remaining number of beds so that we can allocate for the other pilots all this information must be provided through online. When a pilot register in the <b>login</b> <b>form</b> and enter his details like username, password he will redirect to the bed occupation register. While entering to the designation and some other details the particular room number and the bed number will be allocated to the LP/ALP. The process will be easy, comparing to the present situation, which is done as paper work...|$|E
40|$|Omeka 1. 0 was {{released}} on June 2, 2009. What's New in Omeka 1. 0 ? UI Improvements File metadata page on public themes Autocomplete for tags Pagination, filtering and sorting on the users admin panel Upgrade notification when new version is released 'Remember Me' option when logging in JSONP now available for JSON outputs Compatibility with 0. 10 Minor changes to config. ini Removed many deprecated helper functions Changed Dublin Core form inputs API improvements Plugin API New plugin API functions for item/file/collection ingest: insert_item, update_item, insert_files_for_item, insert_collection, insert_files_for_item, insert_element_set Theme API Additional options/arguments for display_files, including built in display of icons for specific file types New helpers for file metadata page: item_file, show_file_metadata, link_to_file_metadata Additional options for show_item_metadata() Additional argument for item() Additional argument for select_item_type, select_item_type_elements, select_element, select_user(), select_entity() Miscellaneous release_object() to help solve memory leak issues Security fixes Command Injection with ImageMagick Default JSON outputs Internal changes Overhaul of File model Upgraded to Zend Framework 1. 7. 5 List of bug fixes UI Improvements trac# 485, adds a file metadata page that will display on every public theme. This displays Dublin Core and other element metadata for the files that are attached to items. This can be accessed at the following relative URL in any Omeka installation: 'files/show/id', where ID is the unique numeric ID for the file (similar to items). See #Theme API improvements for more details. trac# 352, adds pagination capabilities to table classes and controllers. Omeka admin panel now shows pagination for lists of collections and users. Plugins can also use these improvements to implement pagination in a clean and simple fashion. trac# 65, implements autocomplete for adding tags via the admin interface. trac# 489, adds filtering/sorting criteria for users. Site administrators can now sort by username, first/last name, institution name, role, status (active/inactive). Can filter by role or status. trac# 459, adds an upgrade notification to the admin dashboard to tell users when {{a new version of}} Omeka is available (with a corresponding helper function, get_latest_omeka_version. trac# 158, enables JSONP for auto-serialized JSON requests. The javascript callback can be provided via the optional 'callback' parameter for any JSON request (output=json). JSONP responses are given the 'text/javascript' MIME type. This is different from the regular JSON MIME type ('application/json'). trac# 154, adds a 'Remember Me' option to the <b>login</b> <b>form.</b> This will maintain a user's session for 2 weeks from the moment of login. If 'Remember' is not checked, the session will expire when the browser session terminates. This also adds a 'session. name' field to the config. ini file and removes the pre-existing 'login. expire' setting. See Compatibility Issues for more details. If session name is not provided in the config file, the default session name will be automatically generated from the WEB_ROOT of the installation. A common use case for customizing the session name is so that session data could be shared across Omeka installations or with other applications running on the same server. Also added an 'initializeSession' phase to Omeka_Core, so that the session name could be properly configured prior to requests. Compatibility issues with 0. 10 'login. expire' setting was removed from the config. ini file. If you rely on this setting for determining the length of user sessions, tell your users instead to check 'Remember Me' when logging in through the admin. That is the same as setting login. expire to 2 weeks, and having the option of not extending the session is more secure on public computers. Many deprecated helper functions have been removed from the 1. 0 release of Omeka. Most of these were non-working as of 0. 10, but some {{may or may not have}} functioned correctly. In the interests of clarifying the API, these functions will not be available as of 1. 0. Using any of these functions within themes or plugins will now cause a fatal error: generate_url(options, name) dublin_core(type) metatext_form(item, input="textarea",metafields=null) items_rss_header() get_month(date) get_day(date) get_year(date) item_metadata(item, field, escape=true) type(id=null) types(array params = array()) tags(array params = array()) items(array params = array()) users(array params = array()) institutions(array params = array()) metafields(array params = array()) people(array params = array()) has_collection(item, name=null) has_files(item) item_types() collections(array params = array()) entities(array params = array()) has_collectors(collection) has_tags(item, array tags=array()) has_thumbnail(item) has_type(item, name=null) display_empty(val, alternative="[Empty]") get_base_url(use_relative_uri=false) is_current(link, req = null) link_to_thumbnail(item, props=array(), action='show', random=false) link_to_fullsize(item, props=array(), action='show', random=false) link_to_square_thumbnail(item, props=array(), action='show', random=false) _link_to_archive_image(item, props=array(), action='show', random=false, imageType = 'thumbnail') items_rss_uri(params=array()) item_permalink_url(item) define_metafield(name, description, type=null) add_theme_pages(dir, theme='both') add_controllers(dir='controllers') add_data_feed(format, options=array()) add_navigation(text, link, type='main', permissions=null) [3572] All Dublin Core elements on the items form are now plain text. The 'Language' and 'Date' elements are the ones affected by this change. The logic behind this change is that the previous form inputs (drop menu for language and YYYY/MM/DD date field) did not allow the full range of data entry that is implied by unqualified Dublin Core. In certain situations, data ingested from other systems may not have been possible to edit using Omeka. For example, if a date field containing 'May 10, 1932 ' was not converted to 1932 - 05 - 10 when ingested into the Omeka database, it would not be editable using the Omeka administrative interface. The value in 'path_to_convert' is changed from previous versions. This will not affect users with an up-to-date database. See Security Fixes for more details. API Improvements Plugin API Some helper functions have been added to simplify the task of ingesting data into Omeka from other systems. For more information about these helpers, see the codex or inline code documentation: insert_item(metadata = array(), elementTexts = array(), fileMetadata = array()) update_item(item, metadata = array(), elementTexts = array(), fileMetadata = array()) insert_collection(metadata = array()) trac# 488, insert_element_set(elementSet, array elements = array()) trac# 648, insert_files_for_item(item, transferStrategy, files, options = array()) [3710] release_object(var) : Can be used in plugins to avoid memory leaks. This encapsulates a workaround for PHP's built in garbage collection, which causes memory leaks when objects contain circular references. It does this by explicitly destroying an object instead of relying on PHP's garbage collection. Currently this only has a noticeable impact with record instances (classes extending Omeka_Record), though it may be extended to other classes in the future as needed. Caveats: This will destroy an object before automatic garbage collection would normally take over, so there may still be broken references to that object elsewhere in the application. This could cause problems when two plugins conflict with one another. For example, one plugin could store a reference to an Item record for future use, and a second plugin might release that record using release_object(). In this case, the first plugin would cease to work because of the second plugin's behavior. For this reason, release_object() should be avoided unless a memory leak crashes the plugin or otherwise interferes with its function. Example:item = insert_item(array('public'=>true), array()); release_object(item); Theme API trac# 479, a series of enhancements to display_files() : adds 'linkAttributes' and 'imgAttributes' options to display_files(). These are arrays that represent the XHTML attributes in the and tags, if applicable. adds support for displaying icons using display_files(). Users can now pass the 'icons' option as a keyed array of MIME types and paths to the respective icons. Here is a usage example from the code: changes the 3 rd argument of display files from a string (class attribute for the wrapping div) to an array (all attributes for the wrapping div). NOTE: This will break themes that relied on the previous behavior, but is easy to fix. the div that wraps each file now contains a class corresponding to the hyphenated MIME type of the file, i. e. learned 'linkToMetadata' option for the 'image', 'icon' and default callbacks. This is a boolean value that allows the theme writer to choose whether or not to link to the file's metadata page. This overrides the 'linkToFile' option and defaults to false. Here is an example of some of the new changes to display_files() : echo display_files_for_item(array('showFilename'=>false, 'linkToFile'=>false, 'linkAttributes'=>array('rel'=>'lightbox'), 'filenameAttributes'=>array('class'=>'random-class'), 'imgAttributes'=>array('class'=>'icon-image'), 'icons' => array('audio/mpeg'=>img('audio. gif')))); trac# 641, enhancements to show_item_metadata() : adds a 'show_element_sets' option. This allows a theme writer to choose to show specific element sets for an item. The theme writer can also choose to show all item type metadata for the item by putting 'Item Type Metadata' in the list (or the more specific name for certain item types, like 'Document Item Type Metadata'). adds a 'return_type' option. This option can be either 'array' or 'html' (default is 'html'). It allows a theme writer to retrieve the output from show_item_metadata() as an array to more easily enable custom markup. item() : Adds a fourth item argument to be able to display element metadata for an arbitrary Item record. Adds 'Permalink' metadata retrieval. Example: echo item('Permalink'); [...] > [URL] trac# 485, item_file(), show_file_metadata(), and the file metadata page: There is now a files/show page that can be displayed on every theme. By default, this page is located in the shared view scripts directory, application/views/scripts/files/show. php. If you would like to customize the markup for this file within your theme, copy this file from the shared directory to a files/ directory in your public theme and modify accordingly. item_file() helper has been added to facilitate display of metadata associated with files. It behaves similarly to item() when displaying Dublin Core or other element sets, though the arbitrary metadata associated with files is different than it is for files. The following metadata can be displayed for files: 'Id' 'Archive Filename' 'Original Filename' 'Size' 'Mime Type' 'Date Added' 'Date Modified' 'Authentication' 'Mime Type OS' 'File Type OS' 'Uri' 'Fullsize Uri' 'Thumbnail Uri' 'Square Thumbnail Uri' 'Permalink' show_file_metadata() helper has been added to facilitate listing file metadata in the same vein as show_item_metadata() for items. The main difference between this and show_item_metadata() is that it can display the 'MIME Type Metadata' element set, which displays all the metadata that was programmatically extracted from the file when it was first uploaded to Omeka. link_to_file_metadata() helper has been added to facilitate linking to the new file metadata page within themes. Security Fixes [3706] Fixed a security hole where the 'path_to_convert' admin setting could be replaced with an arbitrary command that would be executed when derivative images were created. The solution was to change the 'path_to_convert' setting so that it only represents the directory containing the ImageMagick binaries (not the binary itself). This should be fixed automatically when upgrading existing databases to 1. 0. [3587] Fixed a potential security hole involving JSON outputs. It was discovered that the default JSON output for users included the user's password hash. JSON outputs are protected by the ACL, so the password hash would only be available to super users, who can change passwords arbitrarily anyway. Still, this could have become a vulnerability in the future. The solution was to remove all default non-HTML outputs (including JSON) from controllers, thus forcing controller writers to enable alternative output formats explicitly using Zend Framework's ContextSwitch action helper. This reduces the chances of accidentally exposing sensitive data to the end user. The down side is that it may break plugins that rely on the existence of default 'JSON' outputs. Internal Changes Upgrades Zend Framework to 1. 7. 5. trac# 651, completely overhauled the File model. Prior to 1. 0, the File model handled everything to do with files, including uploading files, extracting metadata from the files, and creating derivative images. This splits those components into separate classes (Omeka_File_Ingest, Omeka_File_Info, and Omeka_File_Derivative_Image, respectively). The File model is now represented by the following 4 classes: Omeka_File_Ingest [...] In charge of ingesting files into Omeka, either through direct uploads (form POSTs), urls, or filesystem paths. This can also be extended to allow additional methods of file transfer by passing instances of classes that adhere to Omeka_File_Transfer_Adapter_Interface. Omeka_File_Info [...] Extracts additional metadata from files. This extracts the same metadata as in 0. 10. It has the most room for improvement of all the new file classes. Of particular interest in future development would be to revamp the algorithm that it uses to determine what metadata fields to populate. Omeka_File_Derivative_Image [...] Creates derivative images when given the path to the original file. Like Omeka_File_Info, this will run automatically when a file is inserted into the Omeka database. This is not meant to be invoked by plugin writers. List of Bugs Fixed in 1. 0 Fixes trac# 626 Images for items show have alt attribute for the display_files function. Fixes trac# 623 Make list tab on admin/items/browse appear selected when first going to the page. Fixes trac# 622 Alert on forgot password page breaks layout, adds images for submit-small and submit-extran small submit inputs. Fixes trac# 632, plugins should be able to add view scripts without adding controllers or a controllers directory. Fixes trac# 630, class autoloader needs to check entire include path. Fixes trac# 650, ElementSet::addElements() overwrites existing elements. Now, the order is relative to the other elements being added, which prevents overwriting. Fixes trac# 634, Dublin Core elements should be text areas, adds a migration. Fixes trac# 652, session namespace error using Zend Framework 1. 7. 4. Fixes a potential security issue where the database object was partially serialized into JSON for Omeka_Record objects. Fixes a potential security hole involving default JSON outputs for controllers. This removes the default action contexts from Omeka_Controller_Action and adds them to each relevant controller. The default action contexts were 'json', 'rss 2 ' and 'dc' for 'browse' actions, and 'json' and 'dc' for 'show' actions. This not make sense for most controllers, since RSS and Dublin Core are only for the ItemsController. It also opened up a security hole where sensitive data could have been passed to an attacker through the automatically serialized JSONP output. Note that this breaks backwards compatibility for any plugin controllers that extend off Omeka_Controller_Action, but only if those controllers rely on the default existence of the 'json' output for 'browse' and 'show' actions. Refs trac# 485, fixes a filter so that a plugin writer can do array('Display', 'File', [...] .) to filter element text displayed for files. Refs trac# 485, fixes a bug where filtering the element text so that it is blank should show the '[no text]' value for the RecordMetadataList helper. Refs trac# 485, fixes a bug in RecordMetadata helper where filters were not being properly invoked for arbitrary fields like 'Archive Filename' or 'Date Added'. Fixes styling on install form, adds closing tag to dashboard. Fixes trac# 613, query string vars not sent when redirecting users to the admin panel. Fixes trac# 647, Item view helper needs to be able to be called inside filters. Now item() can be called inside a filter that normally runs inside of another call to item(), so the API can be used to filter one element based on the value of another element. Fixes trac# 640 Themes admin panel layout busted with lots of themes in directory. Fixes trac# 657 Make uninstall button on plugins list red. Adds border above Save Item/Delete item on items/edit form, hides the Elements header on item-type/add if there are no element associated with an item-type. Fixes trac# 653 Hide the 'remove' link from single dublin core fields on item/add form. Fixes trac# 516 remove element button on item-types/edit doesn't prompt for confirm. Fixes trac# 665 'Use HTML' checkbox on items form was broken in IE 7. Fixes trac# 661 Link to Omeka archive in installer broken on subdomains. Fixed a bug in display_files() where GIF and BMP were not displaying derivative images [3722, 3724]...|$|E

