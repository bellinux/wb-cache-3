0|95|Public
40|$|<b>Line</b> <b>clipping</b> {{and drawing}} are two {{important}} {{processes in the}} graphics output pipeline. Improving the efficiency of these two processes will improve the overall efficiency of the output pipeline. My thesis is that the efficiency of these two processes can be improved significantly.;Traditionally, <b>line</b> <b>clipping</b> is done in floating point numbers and line drawing in integers. A <b>line</b> is first <b>clipped,</b> probably more than once, and then rasterized. Since line segments must be rasterized at the end, doing clipping and rasterization together improves the overall efficiency, avoids computation in floating point numbers, and eliminates inconsistencies introduced in the <b>line</b> <b>clipping</b> process. However, <b>line</b> <b>clipping</b> in floating point numbers is still required for line segments in three and higher dimensions.;In this thesis, the efficiency of higher dimensional <b>line</b> <b>clipping</b> is improved via {{the extension of the}} Nicholl-Lee-Nicholl <b>line</b> <b>clipping</b> algorithm to higher dimensions. The efficiency of line drawing is improved by a new run-length slice line drawing algorithm which does not use multiplications and divisions. <b>Line</b> <b>clipping</b> and <b>line</b> drawing are amalgamated by using new algorithms that find the first visible grid point in constant or logarithmic time in terms of then umber of grid points from the first endpoint to the first visible grid point...|$|R
40|$|The {{most popular}} <b>lines</b> <b>clipping</b> {{algorithms}} are Cohen-Sutherland and Liang-Barsky <b>line</b> <b>clipping</b> algorithm. These algorithms {{are complex and}} the steps of calculation are very high. This paper proposes a simple new <b>line</b> <b>clipping</b> algorithm for 2 D space which uses the parametric equation of the line. This algorithm further easily extended to the polygon clipping by considering {{the edge of the}} polygon as a line. The proposed algorithm is numerically tested for a numbers of random line segments and the results show the simplicity and less complex behavior of the algorithm...|$|R
40|$|The {{presentation}} {{will examine}} the current research experience {{in the field of}} fundamental algorithms complexity and <b>line</b> <b>clipping</b> algorithms. <b>Line</b> <b>clipping</b> algorithms can be taken as an example for a demonstration how some fundamental algorithms can be improved significantly and how their complexity can be changed. Many algorithms have been developed so far and some algorithms were developed for some very special cases. In spite of the simplicity of the <b>line</b> <b>clipping</b> problem it seems to be quite difficult to make appropriate tests that prove the efficiency or properties of the given algorithm. Also experiments published elsewhere seem to be difficult to repeat. The aim of this presentation is to show thoughts and developments made in the past that lead to new <b>line</b> <b>clipping</b> algorithms in E 2 and E 3 that proved some general approaches to algorithms design...|$|R
40|$|A new O(lg N) <b>line</b> <b>clipping</b> {{algorithm}} in E 2 {{against a}} convex window is presented. The main {{advantage of the}} presented algorithm is the principal acceleration of the <b>line</b> <b>clipping</b> problem solution. A comparison of the proposed algorithm with others shows a significant improvement in run-time. Experimental results for selected known algorithms are also shown...|$|R
40|$|Abstract [...] A new <b>line</b> <b>clipping</b> {{algorithm}} against convex window {{based on}} a new approach for intersection detection is presented. Theoretical comparisons with Cyrus-Beck's algorithm are shown together with experimental results obtained by simulations. The main advantage of the presented algorithm is the substantial acceleration of the <b>line</b> <b>clipping</b> problem solution and that edges can be oriented clockwise or anti-clockwise. I...|$|R
5000|$|Danny Cohen (PhD '69) - {{internet}} pioneer, {{developed the}} first real-time visual flight simulator and the Cohen-Sutherland <b>line</b> <b>clipping</b> algorithm ...|$|R
50|$|In 1967, flight-simulation work by Danny Cohen {{led to the}} {{development}} of the Cohen-Sutherland computer graphics two- and three-dimensional <b>line</b> <b>clipping</b> algorithms, created with Ivan Sutherland.|$|R
40|$|ABSTRACT: Demonstration {{of various}} <b>Line</b> <b>clipping</b> {{algorithms}} {{on the basis}} of their working principles. One way for improving the efficiency of a <b>line</b> <b>clipping</b> algorithm is to reduce the repetition of algorithm. In this region codes are used to identify the position of line. One algorithm reduces intersection calculations. An efficient clipping algorithm is presented here to achieve this goal. One is based on testing xy plane to reduce intersection calculation. Our algorithm with reducing the confluence point can avoid the repetition of algorithm...|$|R
40|$|A {{comparison}} {{of a new}} algorithm for <b>line</b> <b>clipping</b> in E 2 and E 3 by convex polygon and/or polyhedron with O(1) processing complexity and Cyrus- Beck algorithm is presented. The new algorithm in E 2 is based on dual space representation and space subdivision technique. The principle of algorithm in E 3 {{is based on the}} projection of polyhedron to three orthogonal E 2 coordinate systems. Algorithms have optimal complexities O(1) and demonstrates that preprocessing can be used to speed up the <b>line</b> <b>clipping</b> significantly. Obvious applications are for one polygon and/or polyhedron and many <b>clipped</b> <b>lines.</b> Detailed theoretical estimations and experimental results are also presented...|$|R
50|$|The Nicholl-Lee-Nicholl {{algorithm}} is a fast <b>line</b> <b>clipping</b> algorithm {{that reduces the}} chances of <b>clipping</b> a single <b>line</b> segment multiple times, as may happen in the Cohen-Sutherland algorithm.|$|R
40|$|Abstract: Aparallel <b>line</b> <b>clipping</b> {{algorithm}} and {{its implementation}} on a parallel clipping hardware environment are presented. We first develop a simple theory {{to show that}} parallel clipping is possible {{for all types of}} line segments. We then present the architecture of a hardware environment based on which parallel clipping is to be implemented. The parallel <b>line</b> <b>clipping</b> algorithm and its implementation on the parallel clipping hardware environment are presented finally. Based on our approach, only 141 cycles are required to <b>clip</b> a <b>line</b> segment. The corresponding figure for the famous J. Clarkâ€™s Geometry Engine is 160 cycles...|$|R
50|$|In {{computer}} graphics, <b>line</b> <b>clipping</b> is {{the process}} of removing lines or portions of lines outside an area of interest. Typically, any line or part thereof which is outside of the viewing area is removed.|$|R
40|$|A new <b>line</b> <b>clipping</b> {{algorithm}} against {{convex polyhedron}} in E 3 with an expected complexity O(1) is presented. The suggested approach {{is based on}} two orthogonal projections to E 2 co-ordinate system and on pre-processing of the given polyhedron. The pre-processing enables to speed up solution significantly. The proposed method is convenient for those applications when many <b>lines</b> are <b>clipped</b> against constant convex polyhedron. Theoretical considerations and experimental results are also presented...|$|R
50|$|The Cohen-Sutherland {{algorithm}} is a computer-graphics algorithm used for <b>line</b> <b>clipping.</b> The algorithm divides a two-dimensional space into 9 regions and then efficiently determines {{the lines and}} portions of lines that are visible in the central region of interest (the viewport).|$|R
50|$|In {{computational}} geometry, {{the problem}} of computing the intersection of a polyhedron with a line has important applications in computer graphics, optimization, and even in some Monte Carlo methods. It {{can be viewed as}} a three-dimensional version of the <b>line</b> <b>clipping</b> problem.|$|R
40|$|Algorithms for <b>line</b> <b>clipping</b> against convex polygon {{have been}} studied {{for a long time}} and many {{research}} papers have been published so far. In spite of the latest graphical hardware development and significant increase of performance the clipping is still a bottleneck of the graphical pipeline. This paper presents a new robust and fast algorithm for <b>line</b> <b>clipping</b> by a convex polygon. The algorithm uses a small pre-processing in order to obtain significant speed up. The proposed algorithm is especially convenient for applications where points or lines are represented in homogeneous coordinates. The algorithm does not use division in floating point representation as the resulting points are in homogeneous coordinates. The algorithms will benefit if vector-vector hardware supported operations can be used. 1...|$|R
5000|$|We're {{going to}} take these screens that we used in the Between the <b>Lines</b> <b>clip</b> {{on the road with}} us, so we want to get quite a {{cinematic}} feeling to the show, and in a way expand on the story elements and the ideas on the record in a visual sense as well. Jon Hume ...|$|R
5000|$|... #Caption: The {{approach}} to the principal entrance, <b>lined</b> by <b>clipped</b> bay trees ...|$|R
40|$|A new {{algorithm}} for <b>line</b> <b>clipping</b> by convex polygon with O (1) processing complexity is presented. It {{is based}} on dual space representation and space subdivision technique. The suggested algorithm also demonstrates that pre-processing {{can be used in}} order to speed up solution of some problems in computer graphics applications significantly. Theoretical considerations and experimental results are also presented. ...|$|R
40|$|The {{computer}} graphics system performance is increasing {{faster than any}} other computing application. Algorithms for <b>line</b> <b>clipping</b> against convex polygons and lines have been studied {{for a long time}} and many research papers have been published so far. In spite of the latest graphical hardware development and significant increase of performance the clipping is still a bottleneck of any graphical system. So its implementation in hardware is essential for real time applications. In this paper clipping operation is discussed and a hardware implementation of the <b>line</b> <b>clipping</b> algorithm is presented and finally formulated and tested using Field Programmable Gate Arrays (FPGA). The designed hardware unit consists of two parts : the first is positional code generator unit and the second is the clipping unit. Finally it is worth mentioning that theÂ  designed unit is capable of <b>clipping</b> (232524) <b>line</b> segments per second. Â Â Â Â  Â Â  </p...|$|R
40|$|<b>Clipping</b> a <b>line</b> segment yields at most one <b>line</b> segment <b>Clipping</b> a polygon {{can yield}} {{multiple}} polygons ï¿½ However, clipping a convex polygon can yield at most one other polygon 2 Tessellation and Convexity ï¿½ One {{strategy is to}} replace nonconvex (concave) polygons {{with a set of}} triangular polygons (a tessellation) ï¿½ Also makes fill easier ï¿½ Tessellation code in GLU library 3 Clipping as a Black Box ï¿½ Can consider <b>line</b> segment <b>clipping</b> as a process that takes in two vertices and produces either no vertices or the vertices of a <b>clipped</b> <b>line</b> segmen...|$|R
50|$|In {{computer}} graphics, the Liang-Barsky algorithm (named after You-Dong Liang and Brian A. Barsky) is a <b>line</b> <b>clipping</b> algorithm. The Liang-Barsky algorithm {{uses the}} parametric equation {{of a line}} and inequalities describing {{the range of the}} clipping window to determine the intersections between the <b>line</b> and the <b>clip</b> window. With these intersections it knows which portion of the line should be drawn. This algorithm is significantly more efficient than Cohen-Sutherland. The idea of the Liang-Barsky clipping algorithm is to do as much testing as possible before computing line intersections.|$|R
50|$|From 1965 to 1968, Sutherland was an Associate Professor of Electrical Engineering at Harvard University. Work {{with student}} Danny Cohen in 1967 {{led to the}} {{development}} of the Cohen-Sutherland computer graphics <b>line</b> <b>clipping</b> algorithm. In 1968, with the help of his student Bob Sproull, he created the first virtual reality and augmented reality head-mounted display system, named The Sword of Damocles.|$|R
40|$|New {{algorithms}} Point-in-Polygon and <b>line</b> <b>clipping</b> algorithms {{are very}} often used especially in computer graphics applications. Algorithms usually have O(N) or O(lg N) complexities. New algorithms with O(l) expected complexity {{has been developed}} using pre-processing. The interesting feature of presented algorithms is that memory requirements depend on geometrical properties of polygons. The presented approach {{can be considered as}} an alternative method to parallel processing...|$|R
40|$|New {{efficient}} algorithms for the <b>line</b> <b>clipping</b> by {{the given}} rectangle in E 2 are presented. The first algorithm {{is based on}} the line direction evaluation, the second one is based on a new coding technique of clipping rectangleâ€™s vertices. It allows solving all cases more effectively. A comparison of the proposed algorithms with the Liang-Barsky algorithm and some experimental results are presented, too...|$|R
5000|$|In 1967, he {{developed}} the first real-time visual flight simulator on a general purpose computer and also developed the first real-time radarsimulator. Flight simulation work by Cohen {{led to the development}} of the Cohen-Sutherland computer graphics <b>line</b> <b>clipping</b> algorithms, created with Ivan Sutherland at Harvard University.He received a PhD from Harvard in 1969 as a student of Sutherland. His thesis was titled: [...] "Incremental Methods for Computer Graphics".|$|R
40|$|A {{new concept}} and method for <b>line</b> <b>clipping</b> is {{developed}} that describes clipping in an exact and mathematical form. The basic ideas form {{the foundation for}} a family of algorithms for two-dimensional, three-dimensional, and four-dimensional (homogeneous coordinates) <b>line</b> <b>clipping.</b> The <b>line</b> segment to be clipped is mapped into a parametric representation. From this, a set of conditions is derived that describes the interior of the clipping region. Observing that these conditions are all of similar form, they are rewritten such that the solution to the clipping problem is reduced to a simple max/min expression. For each dimension, the mathematics are discussed, an example is given, the algorithm is designed, and a performance test is conducted. The new algorithm is compared with the traditional Sutherland-Cohen clipping algorithm. Using randomly generated data, the new algorithm showed a 36 percent, 40 percent, and 79 percent improvement for two-dimensional, three-dimensional, and four- dimensional clipping, respectively. One of the advantages of this algorithm is the quick rejection of line segments that are invisible. In addition, this algorithm can be easily generalized for clipping against any convex viewing volum...|$|R
50|$|The Phoenix Mercury shot 85.5% {{from the}} free-throw <b>line.</b> This <b>clip</b> {{is the best}} team free-throw {{percentage}} in WNBA and NBA history.|$|R
50|$|By this we {{select the}} point of {{intersection}} of <b>line</b> and <b>clipping</b> window where (dot product is 0) and hence <b>clip</b> the <b>line.</b>|$|R
40|$|This {{algorithm}} supports <b>line</b> <b>clipping</b> {{against a}} rectangular window with edges {{parallel to the}} screen. The algorithm combines different partial solutions given in the bibliography such as implicit area codes, decision trees, line ends comparison, symmetry or avoiding redundant calculations, mixing them with fixed-point arithmetic, explicit calculation reusing and dynamic monitoring. It may work in the fractional object space while still using integer arithmetic (fixed-point). It is faster than traditional algorithms. It provides more precision without using floating point arithmetic...|$|R
40|$|Algorithms for <b>clipping</b> <b>lines</b> against {{rectangular}} {{windows are}} nor mally implemented in object space using floating point arithmetic, {{and the resulting}} <b>clipped</b> <b>lines</b> are then scan converted to obtain their representation as a list of pixels in image space. Some algorithms avoid the use of floating point arithmetic. They use integer arithmetic to obtain the end points of the <b>clipped</b> <b>line.</b> The line is then scan converted as before. In both cases there is a side e ect. This is described and discussed. An alternative approach is to scan convert the <b>lines,</b> then <b>clip</b> against the viewport. The algorithm would then use {{a description of the}} line as a list of pixel locations in image space, rather than a pair of end points in object space. The feasability of this method, in terms of side e ects and efficiency, is discussed...|$|R
40|$|A new {{algorithm}} for <b>line</b> <b>clipping</b> against {{convex polyhedron}} is given. The suggested algorithm is faster for {{higher number of}} facets of the given polyhedron than the traditional Cyrus-Beck's and others algorithms with complexity O (N). The suggested algorithm has O (N) complexity in the worst case and expected O (N) complexity. The speed up is achieved because of "known order " of triangles. Some principal results of comparisons of selected algorithms are presented and give some imagination how the proposed algorithm could be used effectively...|$|R
40|$|Two new <b>line</b> <b>clipping</b> {{algorithm}}s, the opposite-corner algorithm and the perpendicular-distance algorithm, {{that are}} based on simple geometric observations are presented. These algorithms do not require computation of outcodes nor do they depend on the parametric representations of the lines. It is shown that the opposite-corner algorithm perform consistently better than an algorithm due to Nicholl, Lee, and Nicholl which is claimed to be better than the classic algorithm due to Cohen-Sutherland and the more recent Liang-Barsky algorithm. The pseudo-code of the opposite-corner algorithm is provided in the Appendix...|$|R
40|$|New {{modifications}} of the Cohen-Sutherland algorithm for {{the line and}} <b>line</b> segment <b>clipping</b> in E 2 are presented. The suggested algorithms {{are based on a}} new coding technique based on coding of the line direction together with coding of end-points of the <b>clipped</b> <b>line</b> segment. It allows to solve all cases more effectively. The proposed algorithms are convenient for line or <b>line</b> segment <b>clipping</b> by the rectangle. Theoretical considerations and experimental results are also presented. The CS algorithm based on coding of the end-points of the given line segment is a very well known algorithm. It is simple and robust. It enables to detect all the cases when the line segment is completely inside of the given rectangle and some cases when the line segment is outside, see fig. 1. 1...|$|R
40|$|A new {{algorithm}} for <b>clipping</b> <b>line</b> segments by {{a rectangular}} window on {{rectangular coordinate system}} is presented in this paper. The algorithm is very different to the other <b>line</b> <b>clipping</b> algorithms. For the line segments that cannot be identified as completely inside or outside the window by simple testings, this algorithm applies affine transformations (the shearing transformations) to the line segments and the window, and changes {{the slopes of the}} line segments and the shape of the window. Thus, it is clear for the line segment to be outside or inside of the window. If the line segments intersect the window, the algorithm immediately (no solving equations) gets the intersection points. Having applied the inverse transformations to the intersection points, the algorithm has the final results. The algorithm is successful to avoid the complex classifications and computations. Besides, the algorithm is effective to simplify the processes of finding the intersection points. Comparing to some classical algorithms, the algorithm of this paper is faster for <b>clipping</b> <b>line</b> segments and more efficient for calculations...|$|R
5000|$|ETS 300 092 - Calling <b>Line</b> Identification Presentation (<b>CLIP)</b> ...|$|R
