56|1068|Public
2500|$|Windows NT was {{originally}} designed for ARC-compatible platforms, relying on its boot manager support and providing only osloader.exe, a <b>loading</b> <b>program</b> accepting ordinary command-line arguments specifying Windows directory partition, location or boot parameters, which is launched by ARC-compatible boot manager when a user chooses to start specific Windows NT operating system. But because the x86 lacked {{any of the}} ARC support, the additional layer was added specifically for that platform: custom boot manager code presenting text menu allowing the user to choose from one or more operating system and its options configured in boot.ini configuration file, prepended by special StartUp module {{which is responsible for}} some preparations such as switching the CPU to the protected mode. When a user chooses an operating system from the boot menu, the following command-line arguments are then passed to the part of the osloader.exe common to all processor architectures: ...|$|E
5000|$|... {{the use of}} the Toner <b>Loading</b> <b>Program</b> {{was indeed}} a likely {{copyright}} violation, because the Toner <b>Loading</b> <b>Program</b> was not a [...] "lock-out code" [...] that SCC was entitled to copy under the DMCA, and because the Toner <b>Loading</b> <b>Program</b> could be rewritten in different ways (and therefore had enough creativity to qualify for copyright protection).|$|E
50|$|Likewise, the {{majority}} opinion held that anyone purchasing a printer and toner cartridge could read the Toner <b>Loading</b> <b>Program</b> from the printer; so SCC did not circumvent an access control on the Toner <b>Loading</b> <b>Program</b> either.|$|E
5000|$|RUN (OS/2 only) : Similar to CALL, <b>loads</b> <b>programs</b> in CONFIG.SYS. Similar to INSTALL under DOS and CALL under OS/2, but <b>loads</b> <b>programs</b> in {{background}} concurrenty.|$|R
40|$|The {{abstract}} of {{the invention}} relates to an experimental device for the testing of automotive assemblies, in particular, individual suspension units under realistic load conditions. The experimental device consists of a load device for introducing vertical forces, lateral forces, longitudinal forces, braking and drive forces on the automotive assembly. Moreover, the experimental device consists of a control device for {{the control of the}} load device such that the vertical forces, lateral forces, longitudinal forces, braking and drive forces are exerted on the automotive assembly in accordance with a predefined control <b>load</b> <b>program.</b> The control <b>load</b> <b>program</b> consists of a standardized basic <b>load</b> <b>program</b> matched to the current automotive assembly to be tested by vehicle and/or axle-specific conversion parameters and by conversion parameters specific to the experimental device. Modification means for matching the automotive assembly to the standardized basic <b>load</b> <b>program</b> are preferred, said modification means permitting a relatively uncomplicated matching of the basic <b>load</b> <b>program.</b> The modification means are preferred means for [...] ...|$|R
30|$|In an interruptible <b>load</b> <b>program,</b> {{participants}} {{are subject to}} load interruption during system contingencies.|$|R
5000|$|... {{violated}} {{copyright law}} by copying the Toner <b>Loading</b> <b>Program,</b> and ...|$|E
50|$|The {{court also}} {{rejected}} the district court's {{conclusion that the}} interoperability defense did not apply. Since SCC had offered testimony that its chips did indeed contain independently-created programs in addition to Lexmark's Toner <b>Loading</b> <b>Program,</b> the Toner <b>Loading</b> <b>Program</b> {{could be seen as}} necessary to allow interoperation between SCC's own programs and the Lexmark printer.|$|E
5000|$|Concerning the copyrightability of the Toner <b>Loading</b> <b>Program,</b> {{he found}} that the record {{supported}} Lexmark's claim that the program could have been implemented in any number of ways, and therefore Lexmark's implementation was creative and copyrightable. Agreeing that the record was inadequate for the district court to conclude that the Toner <b>Loading</b> <b>Program</b> was a [...] "lock-out code", he noted that Lexmark's expert had testified that the entire Toner <b>Loading</b> <b>Program</b> process could be turned off by flipping a single bit in the chip's code, and that it should have been possible for SCC to discover this; so copying the program may not have been practically necessary too.|$|E
50|$|In computing, a loader is {{the part}} of an {{operating}} system that is responsible for <b>loading</b> <b>programs</b> and libraries. It is one of the essential stages in the process of starting a program, as it places programs into memory and prepares them for execution. <b>Loading</b> a <b>program</b> involves reading the contents of the executable file containing the program instructions into memory, and then carrying out other required preparatory tasks to prepare the executable for running. Once loading is complete, the operating system starts the program by passing control to the <b>loaded</b> <b>program</b> code.|$|R
5000|$|Because of this mistaken standard, it {{had refused}} to {{consider}} {{whether or not the}} alternative Toner <b>Loading</b> <b>Programs</b> proposed by Lexmark were practical.|$|R
5000|$|A small {{resident}} monitor which handles disk input/output, error recovery, and job-to-job transition, and <b>loads</b> <b>programs</b> to {{be executed}} from the core-image library on disk.|$|R
50|$|The <b>Loading</b> <b>Program</b> is {{the fourth}} release by {{collaborative}} group Tuatara. The release mainly consists of remixes of songs from their first three albums.|$|E
5000|$|It {{had held}} that the Toner <b>Loading</b> <b>Program</b> was copyrightable simply because it [...] "could be written {{in a number of}} {{different}} ways", without considering the practical realities.|$|E
50|$|Judge Feikens {{also wrote}} an opinion, agreeing {{with many of}} the {{majority}} opinion's results (though sometimes for different reasons), but disagreeing with its conclusion on the Toner <b>Loading</b> <b>Program.</b>|$|E
50|$|When the job gets {{to label}} 5EX {{if it has}} a {{currently}} <b>loaded</b> <b>program</b> it is deleted from memory and the ENDJOB (EJ) command terminates the job.|$|R
5000|$|... 3M {{developed}} the DC300 tape cartridge for <b>loading</b> <b>programs</b> into AT&T’s electronic switching systems that were becoming {{the backbone of}} the world’s phone system in the 1970s.|$|R
5000|$|CALL (OS/2 4.0 {{and higher}} only) : Similar to INSTALL under DOS, <b>loads</b> <b>programs</b> in CONFIG.SYS. Similar to RUN under OS/2, but runs in {{foreground}} and halts CONFIG.SYS processing until return.|$|R
50|$|On the DMCA counts, Feikens {{agreed that}} Lexmark had not {{established}} a violation {{with regards to}} the Toner <b>Loading</b> <b>Program,</b> but for a very different reason than that found by the majority opinion. He noted that SCC had testified that it had not even been aware that the Toner <b>Loading</b> <b>Program</b> existed; it had copied the data on the Lexmark printer chip (including the Toner <b>Loading</b> <b>Program)</b> purely in an attempt to bypass the protection on the Printer Engine Program. Since the DMCA requires that an infringer knowingly circumvent access controls on the protected program, SCC could not have knowingly circumvented protections on a program it did not know existed. With regards to the Printer Engine Program, he agreed with the majority opinion, but also noted in his belief that the consumer had acquired the rights to access this program by purchasing the printer, and therefore the DMCA would not apply to attempts to access it.|$|E
50|$|The {{band had}} eleven {{members at the}} time of 2001's Cinemathique, which was {{intended}} to fulfill the original desire of creating music for soundtracks. A remix album, The <b>Loading</b> <b>Program,</b> was released in 2003.|$|E
5000|$|The {{software}} of MACS3.NET Loading Computer System {{includes the}} MACS3 Basic <b>Loading</b> <b>Program,</b> performing functions of Categories A and B {{according to the}} ISO 16155:2006 and (optionally) a range of additional modules and programs, performing functions of Category C: ...|$|E
40|$|Utility <b>load</b> {{management}} <b>programs</b> - including direct {{load control}} and interruptible <b>load</b> <b>programs</b> - were employed by utilities {{in the past}} as system reliability resources. With electricity industry restructuring, the context for these programs has changed; the market that was once controlled by vertically integrated utilities has become competitive, raising the question: can existing <b>load</b> management <b>programs</b> be modified so that they can effectively participate in competitive energy markets? In the short run, modified and/or improved operation of <b>load</b> management <b>programs</b> may be the most effective form of demand-side response available to the electricity system today. However, in light of recent technological advances in metering, communication, and load control, utility <b>load</b> management <b>programs</b> must be carefully reviewed in order to determine appropriate investments to support this transition. This report investigates the feasibility of and options for modifying an existing utility load management system so that it might provide reliability services (i. e. ancillary services) in the competitive markets that have resulted from electricity industry restructuring. The report is a case study of Southern California Edison's (SCE) <b>load</b> management <b>programs.</b> SCE was chosen because it operates one of the largest <b>load</b> management <b>programs</b> in the country and it operates them within a competitive wholesale electricity market. The report describes a wide range of existing and soon-to-be-available communication, control, and metering technologies {{that could be used to}} facilitate the evolution of SCE's <b>load</b> management <b>programs</b> and systems to provision of reliability services. The fundamental finding of this report is that, with modifications, SCE's load management infrastructure could be transitioned to provide critical ancillary services in competitive electricity markets, employing currently or soon-to-be available load control technologies...|$|R
5000|$|Users {{can break}} the {{execution}} of the <b>loaded</b> <b>program</b> by way of a [...] "Quit" [...] key (usually F10). When this action is performed, then the Slave interface returns to WHDLoad by calling a resload_Abort internal function.|$|R
50|$|An in-circuit {{emulator}} (ICE) provides {{a window into}} the embedded system. The programmer uses the emulator to <b>load</b> <b>programs</b> into the embedded system, run them, step through them slowly, and view and change data used by the system's software.|$|R
5000|$|MACS3 Basic <b>Loading</b> <b>Program</b> is {{designed}} for all vessel types (container, tanker, bulk carrier, general cargo, RoRo, passenger) {{in accordance with the}} unified IACS Requirement L5 [...] "Onboard Computers for Stability Calculations". It is approved by all leading classification societies: GL, LR,ABS,DNV,BV,NKK,KR.|$|E
5000|$|It had {{concluded}} that the Toner <b>Loading</b> <b>Program</b> was not a [...] "lock-out code", because it had not sufficiently considered how difficult {{it would be for}} SCC—without Lexmark's knowledge of the code's structure and purpose—to alter the code and still pass the printer's authentication mechanisms.|$|E
50|$|MACS3 Basic <b>Loading</b> <b>Program</b> {{supports}} client-server {{software architecture}} for distributed cargo management {{and allows the}} complete loading condition (container, tanks, general cargo and constant items) to be stored in a single compressed mxml-file, making it very {{easy for you to}} exchange loading conditions between ship and office.|$|E
50|$|The LOAD (LO) command <b>loads</b> <b>PROGRAM</b> XPLT (the assembler) {{from the}} {{directory}} :LIB, {{it is then}} started by the RESUME (RM) command. If the run does not HALT with the output LD the job continues at label 1F for error handling.|$|R
40|$|Utility <b>load</b> {{management}} <b>programs,</b> including direct <b>load</b> {{control and}} interruptible <b>load</b> <b>programs,</b> constitute a large installed base of controllable loads that are employed by utilities as system reliability resources. In response to energy supply shortfalls expected {{during the summer}} of 2001, the California Public Utilities Commission in spring 2001 authorized new utility <b>load</b> management <b>programs</b> as well as revisions to existing programs. This report provides an independent review of the designs of these new programs for a large utility (Southern California Edison) and suggests possible improvements to enhance the price responsiveness of the customer actions influenced by these programs. The report also proposes a new program to elicit a mass-market demand response to utility price signals...|$|R
50|$|Ekiden and Kitsune <b>load</b> new <b>program</b> code via {{starting}} {{an entirely new}} program, either through fork-exec or dynamic <b>loading.</b> The existing <b>program</b> state is then transferred to the new program space.|$|R
5000|$|BELCO {{enhances the}} MACS3 Basic <b>Loading</b> <b>Program</b> with easy-to-use {{container}} management features. It works with {{high level of}} integration into MACS3 [...]NET, so any changes to the container cargo are immediately reflected in the MACS3 stability and strength calculations. The results of the MACS3 and BELCO can be displayed simultaneously at any time.|$|E
5000|$|In 2002, SCC {{developed}} its own {{computer chip}} that would duplicate the 'handshake' {{used by the}} Lexmark chip, and that also included a verbatim copy of the Toner <b>Loading</b> <b>Program,</b> which SCC claimed was necessary to allow the printer to function. A Prebate cartridge could successfully be refilled if Lexmark's chip on the cartridge was replaced with the SCC chip. SCC began selling its [...] "Smartek" [...] chips to toner cartridge rechargers.|$|E
5000|$|To enforce this agreement, Lexmark {{cartridges}} {{included a}} computer chip {{that included a}} 55-byte computer program (the [...] "Toner Loading Program") which communicated with a [...] "Printer Engine Program" [...] built into the printer. The program calculated the amount of toner used during printing: when the calculations indicated that the original supply of Lexmark toner should be exhausted, the printer would stop functioning, even if the cartridge had been refilled. In addition, if the chip did not perform an encrypted authentication sequence, or if the Toner <b>Loading</b> <b>Program</b> on the chip {{did not have a}} checksum matching exactly a value stored elsewhere on the chip, the printer would not use the cartridge.|$|E
40|$|<b>Load</b> {{balancing}} <b>programs</b> {{are usually}} verified by analyzing and simulating simple performance models. In this paper, {{we argue that}} besides this verification the correctness of <b>load</b> balancing <b>programs</b> needs to be verified formally, {{in order to gain}} confidence in the use of these programs in practical situations where the simple models are not always respected. Towards this end, we propose a set of correctness conditions that need to be satisfied by <b>load</b> balancing <b>programs.</b> Moreover, we show that these correctness conditions are not unduly restrictive, by designing a rich family of <b>load</b> balancing <b>programs</b> that satisfy these conditions. The presented programs are distinguished by their properties of full distribution, scalability, adaptivity, fault-tolerance, and guaranteed progress irrespective of the speed at which the environment produces or consumes load...|$|R
5000|$|... #Caption: IBM System/3 console {{from the}} 1970s. <b>Program</b> <b>load</b> {{selector}} switch is lower left; <b>Program</b> <b>load</b> switch is lower right.|$|R
50|$|Self-{{relocation}} {{is similar}} to the relocation process employed by the linker-loader when a program is copied from external storage into main memory; the difference is that it is the <b>loaded</b> <b>program</b> itself rather than the loader in the operating system or shell that performs the relocation.|$|R
