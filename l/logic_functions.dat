714|885|Public
25|$|Researchers have {{successfully}} used DNA origami-based nanobots {{capable of carrying}} out <b>logic</b> <b>functions</b> to achieve targeted drug delivery in cockroaches. It is said that the computational power of these nanobots can be scaled up {{to that of a}} Commodore 64.|$|E
25|$|ENIAC used common octal-base radio {{tubes of}} the day; the decimal {{accumulators}} {{were made of}} 6SN7 flip-flops, while 6L7s, 6SJ7s, 6SA7s and 6AC7s were used in <b>logic</b> <b>functions.</b> Numerous 6L6s and 6V6s served as line drivers to drive pulses through cables between rack assemblies.|$|E
2500|$|We are {{now able}} to compute some <b>logic</b> <b>functions,</b> for example: ...|$|E
40|$|Contents Introduction 4 1. The Basics of Feed-Forward ANNs 4 2. The Simple Perceptron Model 5 A Simple Perceptron Learning the OR <b>Logic</b> <b>Function</b> 9 A Simple Perceptron Learning the AND <b>Logic</b> <b>Function</b> 11 A Simple Perceptron Trying to Learn the XOR <b>Logic</b> <b>Function</b> 14 3. The Multi-layer Perceptron Model (MLP) 16 MLP Learning the XOR <b>Logic</b> <b>Function</b> 17 4. Algorithm for Transforming Nonlinearly Separable Classes in Linearly Separable Classes 19 Conclusions 20 References 20 2 List of Tables and Figures Table 4 The {{verification}} of the algorithm correctness for the perceptron which {{has learned the}} AND <b>logic</b> <b>function</b> Table 7 The classification process of the three vectors resulted from re-coding and performed in the output layer Table 8 The re-coding of the 4 input vectors by adding a third common component (x 3) to the vectors in similar classes Figure 4 The network state before learning the OR <b>logic</b> <b>function</b> Figure 5 The graphic representation of the network state before learn...|$|R
50|$|However, an {{arbitrary}} choice table {{does not always}} define a fuzzy <b>logic</b> <b>function.</b> In the paper, a criterion has been formulated to recognize whether a given choice table defines a fuzzy <b>logic</b> <b>function</b> and a simple algorithm of fuzzy <b>logic</b> <b>function</b> synthesis has been proposed based on introduced concepts of constituents of minimum and maximum. A fuzzy <b>logic</b> <b>function</b> represents a disjunction of constituents of minimum, where a constituent of minimum is a conjunction of variables of the current area {{greater than or equal}} to the function value in this area (to the right of the function value in the inequality, including the function value).|$|R
40|$|We {{address the}} problem of {{computing}} and learning multivalued multithreshold perceptrons. Every n-input k-valued <b>logic</b> <b>function</b> can be implemented using a (k; s) -perceptron, for some number of thresholds s. We propose a genetic algorithm to search for an optimal (k; s) -perceptron that e ciently realizes a given multiple-valued <b>logic</b> <b>function,</b> that is to minimize the number of thresholds. Experimental results show that the genetic algorithm nd optimal solutions in most cases...|$|R
2500|$|There {{were also}} {{improvements}} to the electronics inside the calculators. All of the <b>logic</b> <b>functions</b> of a calculator had been squeezed into the first [...] "calculator on a chip" [...] integrated circuits (ICs) in 1971, but this was leading edge technology {{of the time and}} yields were low and costs were high. Many calculators continued to use two or more ICs, especially the scientific and the programmable ones, into the late 1970s.|$|E
2500|$|Research {{efforts on}} micro-scaled fluidic systems started {{to focus on}} the {{rectifying}} phenomena, which can be seen only in nano-scaled systems. In 2006, Professor Majumdar and Professor Yang in University of California, Berkeley built the first [...] "nanofluidic" [...] transistor. The transistor can be turn on or off by an external electrical signal, allowing the control of ionic fluids in a nano-scaled channel. Their work implies a possibility to create a nanofluidic circuitry with <b>logic</b> <b>functions.</b>|$|E
50|$|Simple <b>logic</b> <b>functions.</b>|$|E
40|$|Abstract. This paper {{describes}} a novel Field Programmable Gate Array (FPGA) logic synthesis technique which determines if a <b>logic</b> <b>function</b> {{can be implemented}} in a given programmable circuit and describes how this problem can be formalized and solved using Quantified Boolean Satisfiability. This technique is general enough {{to be applied to}} any type of <b>logic</b> <b>function</b> and programmable circuit; thus, it has many applications to FPGAs. The applications demonstrated in this paper include FPGA technology mapping and resynthesis where their results show significant FPGA performance improvements. ...|$|R
40|$|We have {{confirmed}} that genetic algorithm (GA) with variable gene length is a useful method compared to GA with fixed one for synthesizing SVT-gate networks of quaternary <b>logic</b> <b>function.</b> However, {{it is difficult to}} obtain the optimal solution of given function, because there are many choices of possible threshold functions during the synthesis. In this paper, we introduce a new mutation process for improving solution, and discuss the ability of the GA for searching optimal solution of the synthesizing SVT-gate networks for quaternary <b>logic</b> <b>function...</b>|$|R
50|$|Computers emulate logic devices {{by making}} {{measurements}} of switch inputs, calculating a <b>logic</b> <b>function</b> from these measurements and then sending the results out to electronically controlled switches.|$|R
50|$|Microprogramming {{is still}} used in modern CPU designs. In some cases, after the {{microcode}} is debugged in simulation, <b>logic</b> <b>functions</b> are substituted {{for the control}} store. <b>Logic</b> <b>functions</b> are often faster and less expensive than the equivalent microprogram memory.|$|E
5000|$|We are {{now able}} to compute some <b>logic</b> <b>functions,</b> for example: ...|$|E
5000|$|Using these properties, {{expressions}} for dyadic <b>logic</b> <b>functions</b> can be obtained: ...|$|E
40|$|Abstract — Multifunctional digital {{circuits}} are circuits composed of polymorphic (multifunctional) gates. In {{addition to its}} standard <b>logic</b> <b>function</b> (such as NAND), a polymorphic gate exhibits another <b>logic</b> <b>function</b> (such as NOR) which is activated under a specific condition, for example, when Vdd, temperature or illumination reaches a certain level. This paper describes the evolutionary design of multifunctional combinational circuits at the gate level using a circuit simulator and in a {{field programmable gate array}} (FPGA). The FPGAbased implementation exhibits a significant speedup against a highly optimized software simulator. I...|$|R
40|$|Abstract. In the {{structure}} theory of many-valued <b>logic</b> <b>function,</b> {{the decision and}} constitution of the Sheffer function {{is a very important}} problem, which is reduced to the decision of the minimal covering of precomplete sets in the many-valued <b>logic</b> <b>function</b> sets. According to the completeness theory in partial k-valued logic and the similar relationship theory among precomplete sets, in this paper, the methods of determination on the minimal covering of regular separable function sets are found out, and the minimal covering of regular separable function sets in partial four-valued logic are decided...|$|R
40|$|Abstract — Crossbar-based {{architectures}} {{are promising}} {{for the future}} nanoelectronic systems. However, due to the inherent unre-liability of nanoscale devices, the implementation of any logic func-tions relies on aggressive defect-tolerant schemes applied at the post-manufacturing stage. Most of such defect-tolerant approaches explore mapping choices between logic variables/products and crossbar vertical/horizontal wires. In this paper, we develop a new approach, namely fine-grained logic hardening, {{based on the idea}} of adding redundancies into a <b>logic</b> <b>function</b> so as to boost the success rate of logic implementation. We propose an analytical framework to evaluate and fine-tune the amount and location of redundancy to be added for a given <b>logic</b> <b>function.</b> Furthermore, we devise a method to optimally harden the <b>logic</b> <b>function</b> so as to maximize the defect tolerance capability. Simulation results show that the proposed logic hardening scheme boosts defect tolerance capability significantly in yield improvement, compared to mapping-only schemes with the same amount of hardware cost. I...|$|R
50|$|Transistor {{count for}} generic <b>logic</b> <b>functions</b> {{is based on}} static CMOS implementation.|$|E
50|$|Memory cells {{control and}} define the {{function}} that the logic performs {{and how the}} various <b>logic</b> <b>functions</b> are interconnected.|$|E
5000|$|IEEE Std 91/91a: graphic symbols for <b>logic</b> <b>functions</b> (used {{in digital}} electronics). It is {{referenced}} in ANSI Y32.2/IEEE Std 315.|$|E
50|$|Typical {{practical}} implementations of a <b>logic</b> <b>function</b> utilize a multi-level {{network of}} logic elements.Starting from an RTL {{description of a}} design, the synthesis tool constructs a corresponding multilevel Boolean network.|$|R
50|$|A {{standard}} cell {{is a group}} of transistor and interconnect structures that provides a boolean <b>logic</b> <b>function</b> (e.g., AND, OR, XOR, XNOR, inverters) or a storage function (flipflop or latch). The simplest cells are direct representations of the elemental NAND, NOR, and XOR boolean function, although cells of much greater complexity are commonly used (such as a 2-bit full-adder, or muxed D-input flipflop.) The cell's boolean <b>logic</b> <b>function</b> is called its logical view: functional behavior is captured {{in the form of a}} truth table or Boolean algebra equation (for combinational logic), or a state transition table (for sequential logic).|$|R
40|$|This paper {{describes}} a novel Field Programmable Gate Array (FPGA) logic synthesis technique which determines if a <b>logic</b> <b>function</b> {{can be implemented}} in a given programmable circuit and describes how this problem can be formalized and solved using Quantified Boolean Satisfiability. This technique is general enough {{to be applied to}} any type of <b>logic</b> <b>function</b> and programmable circuit; thus, it has many applications to FPGAs. The application demonstrated in this paper is FPGA PLB evaluation where their results show that this tool allows radical new features of FPGA logic blocks to be evaluated in a rigorous scientific way. 1...|$|R
5000|$|The RAD750 {{is based}} on the PowerPC 750. [...] Its {{packaging}} and <b>logic</b> <b>functions</b> are completely compatible with the PowerPC 7xx family.|$|E
5000|$|Some {{functions}} like statistical {{operations and}} boolean <b>logic</b> <b>functions</b> are accessed via sub-menus, and thus {{they are not}} printed on any visible key.|$|E
50|$|Digital {{electronic}} circuits are usually made from large assemblies of logic gates (often printed on integrated circuits), simple electronic representations of Boolean <b>logic</b> <b>functions.</b>|$|E
50|$|Because the NAND {{function}} has functional completeness all logic {{systems can}} be converted into NAND gates. This is also true for NOR gates. In principle, any combinatorial <b>logic</b> <b>function</b> can be realized with enough NAND gates.|$|R
5000|$|In digital {{electronics}} a diode-OR circuit is used {{to derive}} a simple Boolean <b>logic</b> <b>function.</b> This kind of circuit was once very common in Diode-transistor logic but has been largely replaced by CMOS in modern electronics: ...|$|R
30|$|To {{construct}} an NK Boolean Network, N nodes are first created. For each node, K nodes are randomly selected and a directed link is created {{from each of}} the K nodes to the current node in question. For each of the N nodes a random <b>logic</b> <b>function</b> is created and assigned to the node. When K= 2 this <b>logic</b> <b>function</b> may well be one of the well known Boolean functions such as AND and OR, though this is not definite. Each node has a binary state (0 or 1) which is randomly selected at the time of model creation and then updated as the model runs.|$|R
50|$|PAL devices {{consisted}} of a small PROM (programmable read-only memory) core and additional output logic used to implement particular desired <b>logic</b> <b>functions</b> with few components.|$|E
5000|$|A {{number of}} basic {{arithmetic}} and bitwise <b>logic</b> <b>functions</b> are commonly supported by ALUs. Basic, general purpose ALUs typically include these operations in their repertoires: ...|$|E
50|$|The {{arithmetic}} <b>logic</b> <b>functions</b> {{were fully}} electronic, implemented with vacuum tubes. The family of logic gates ranged from inverters to {{two and three}} input gates. The input and output levels and operating voltages were compatible between the different gates. Each gate consisted of one inverting vacuum tube amplifier, preceded by a resistor divider input network that defined the logical function. The control <b>logic</b> <b>functions,</b> which only needed to operate once per drum rotation and therefore did not require electronic speed, were electromechanical, implemented with relays.|$|E
50|$|There {{are three}} {{principal}} functions in a modular synthesizer: •(audio) signal, • control and • <b>logic.</b> The <b>function</b> is not {{determined by the}} module, rather by how it is used. For example, an oscillator may function as an audio signal when the output is routed eventually to a loudspeaker; a control when the output controls a parameter of another module; and logic when providing a <b>logic</b> <b>function,</b> such as a clock, trigger, gate or sync.|$|R
50|$|The state {{register}} is just {{a representation}} of a binary number. If {{the states in the}} state machine are numbered (easy to arrange), the <b>logic</b> <b>function</b> is some combinational logic that produces the number of the next state.|$|R
50|$|Next, {{this network}} is {{optimized}} using several technology-independent techniques before technology-dependent optimizations are performed. The typical cost function during technology-independent optimizations is total literalcount of the factored {{representation of the}} <b>logic</b> <b>function</b> (which correlates quite well with circuit area).|$|R
