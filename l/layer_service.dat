93|1068|Public
50|$|A Network (<b>Layer)</b> <b>Service</b> Access Point Identifier (NSAPI), is an {{identifier}} used in GPRS (cellular data) networks.|$|E
50|$|IEC 61158-3-21: 2010, Industrial {{communication}} networks - Fieldbus specifications - Part 3-21: Data-link <b>layer</b> <b>service</b> definition - Type 21 elements.|$|E
50|$|In a {{communication}} {{system based on}} a layered OSI model, packet segmentation {{may be responsible for}} splitting one MPDU into multiple physical <b>layer</b> <b>service</b> data units so that reliable transmission (and potential re-transmission via ARQ) of each one can be performed individually.|$|E
50|$|The Language Grid {{consists}} of four service layers: P2P Grid <b>Layer,</b> Atomic <b>Service</b> <b>Layer,</b> Composite <b>Service</b> <b>Layer</b> and Application System Layer.|$|R
5000|$|DIN 62058-42 Physical <b>layer</b> <b>services</b> and asynchronos data {{exchange}} ...|$|R
5000|$|Transport <b>layer</b> <b>services</b> are {{conveyed}} to an application via a programming interface to the transport <b>layer</b> protocols. The <b>services</b> may {{include the following}} features: ...|$|R
5000|$|Domain Name Service is an Application <b>Layer</b> <b>service</b> {{which is}} used to look up the IP address of a given domain name. Once a reply is {{received}} from the DNS server, it is then possible to form a Layer 3 connection to the third-party host.|$|E
50|$|The network <b>layer</b> <b>service</b> {{is defined}} by a Set Primitives. These {{primitives}} tells the service to perform some action. - These primitives seem very like programming language procedures. Because the network layer must provides 2 types of service, namely connection-oriented and connection-less, there are two sets of primitives.|$|E
50|$|The NSEL (Network-Selector) is a {{field in}} the NSAP address that {{identifies}} the network <b>layer</b> <b>service</b> to which a packet should be sent. This part of the address for a router will always be 0x00. In the IS-IS routing protocol, the field is {{sometimes referred to as}} the SEL field.|$|E
5000|$|IEC 62056-42:2002 Physical <b>layer</b> <b>services</b> and {{procedures}} for connection-oriented asynchronous data exchange ...|$|R
3000|$|In the <b>service</b> <b>layer,</b> an ADP PE+BED {{algorithm}} is run if the received WBC segment contains errors. After completing the decoding {{process at the}} <b>service</b> <b>layer,</b> the <b>service</b> <b>layer</b> (SL) byte error rate can be obtained as [...]...|$|R
5000|$|Application <b>layer</b> (a.k.a. <b>service</b> <b>layer</b> or GRASP Controller Layer [...] ) ...|$|R
50|$|In service-oriented {{architecture}} (SOA), the service layer {{is the third}} layer in a five-abstraction-layer model. The model consists of Object layer, Component <b>layer,</b> <b>Service</b> layer, Process layer and Enterprise layer. The service layer {{can be considered as}} a bridge between the higher and lower layers, and is characterized by a number of services that are carrying out individual business functions.|$|E
50|$|The SAP is a {{conceptual}} location at which one OSI layer can request {{the services of}} another OSI layer. As an example, PD-SAP or PLME-SAP in IEEE 802.15.4 can be mentioned, where the Media Access Control (MAC) layer requests certain services from the Physical <b>Layer.</b> <b>Service</b> access points are also used in IEEE 802.2 Logical Link Control in Ethernet and similar Data Link Layer protocols.|$|E
50|$|In {{connectionless}} mode each packet includes complete addressing information. The packets are routed individually, sometimes {{resulting in}} different paths and out-of-order delivery. Each packet is labeled with a destination address, source address, and port numbers. It {{may also be}} labeled with the sequence number of the packet. This precludes {{the need for a}} dedicated path to help the packet find its way to its destination, but means that much more information is needed in the packet header, which is therefore larger, and this information needs to be looked up in power-hungry content-addressable memory. Each packet is dispatched and may go via different routes; potentially, the system has to do as much work for every packet as the connection-oriented system has to do in connection set-up, but with less information as to the application's requirements. At the destination, the original message/data is reassembled in the correct order, based on the packet sequence number. Thus a virtual connection, also known as a virtual circuit or byte stream is provided to the end-user by a transport layer protocol, although intermediate network nodes only provides a connectionless network <b>layer</b> <b>service.</b>|$|E
3000|$|A IP/MPLS {{networking}} device (nonaccess stratum (NAS) driver) {{responsible for}} provision of IP/MPLS <b>layer</b> <b>services</b> to <b>Layer</b> 2 and vice-versa [...]...|$|R
5000|$|ISO 15765-2:2016 Road {{vehicles}} -- Diagnostic communication over Controller Area Network (DoCAN) -- Part 2: Transport {{protocol and}} network <b>layer</b> <b>services</b> ...|$|R
5000|$|... #Caption: Diagram AIn {{the absence}} of any <b>layers,</b> <b>services</b> contain a mixture of {{different}} types of logic. This makes it difficult to manage these services.|$|R
30|$|The MAC <b>layer</b> <b>service</b> time is {{the time}} {{interval}} from the time instant when a packet becomes {{the head of the}} queue and starts to contend for transmission to the time instant when the packet transmission is over. This time is important when we examine the performance of higher protocol layers. Apparently, the distribution of the MAC <b>layer</b> <b>service</b> time is a discrete probability distribution when the smallest time unit of the backoff timer is a time slot σ. Here, we model the characteristics of each vehicle in the network as two M/G/ 1 queues and approach service time distributions through probability generating function (PGF).|$|E
40|$|A {{lifetime}} Maui resident recalls {{work as a}} sugar {{field worker}} and store employee. Also contained in the interview is detailed information on the plantation store system and his own family-run store/restaurant. portable track <b>layer,</b> <b>service</b> station attendant, storekeeper; Japanese; maleInterview conducted in English. Stat...|$|E
40|$|We {{explore the}} problem of {{neighbor}} discovery in a mobile ad hoc network environment. We describe a protocol for learning about neighboring nodes in such an environment. The protocol is used for establishing and tearing down communication links with neighboring nodes as they move from one region of the network to another. The protocol is implemented {{on top of the}} abstract MAC <b>layer</b> <b>service</b> presented in [4], which provides reliable message delivery within the local neighborhood and also provides the sender with an acknowledgment when all neighboring nodes have received a message. There is an upper bound, guaranteed by the abstract MAC <b>layer</b> <b>service,</b> on the worst case delay that a message can experience before it is received or acknowledged. We determine the time complexity of the neighbor discovery protocol in terms of the bounded delays provided by the underlying abstract MAC layer...|$|E
50|$|ISAKMP defines {{procedures}} and packet formats to establish, negotiate, modify and delete Security Associations. SAs contain {{all the information}} required for execution of various network security services, such as the IP <b>layer</b> <b>services</b> (such as header authentication and payload encapsulation), transport or application <b>layer</b> <b>services</b> or self-protection of negotiation traffic. ISAKMP defines payloads for exchanging key generation and authentication data. These formats provide a consistent framework for transferring key and authentication data which is independent of the key generation technique, encryption algorithm and authentication mechanism.|$|R
50|$|Within the <b>service</b> <b>layering</b> {{semantics}} of the OSI network architecture, {{the presentation}} <b>layer</b> responds to <b>service</b> requests from the application <b>layer</b> and issues <b>service</b> requests to the session layer.|$|R
50|$|<b>Layered</b> <b>Service</b> Provider (LSP) is a {{deprecated}} {{feature of}} the Microsoft Windows Winsock 2 Service Provider Interface (SPI). A <b>Layered</b> <b>Service</b> Provider is a DLL that uses Winsock APIs to attempt to insert itself into the TCP/IP protocol stack. Once in the stack, a <b>Layered</b> <b>Service</b> Provider can intercept and modify inbound and outbound Internet traffic. It allows processing of all the TCP/IP traffic taking place between the Internet and the applications that are accessing the Internet (such as a web browser, the email client, etc.). For example, {{it could be used}} by malware to redirect web browers to rogue websites, or to block access to sites like Windows Update. Alternatively, a computer security program could scan network traffic for viruses or other threats. The Winsock Service Provider Interface (SPI) API provides a mechanism for layering providers on top of each other. Winsock LSPs are available for a range of useful purposes, including parental controls and Web content filtering. The parental controls web filter in Windows Vista is an LSP. The layering order of all providers is kept in the Winsock Catalog.|$|R
30|$|Considering the influences, i.e., user quantity, channel status (physical <b>layer),</b> <b>service</b> distribution, various QoS {{restrictions}} (QoS parameters in application layer), {{and resource}} allocation algorithm, that {{play on the}} system throughput, a reasonable cross-layer-based mathematical model (QoS-Adaptive Service Model) is proposed first to characterize the average system capacity and instantaneous capacity, which {{is the basis for}} RR and AC.|$|E
40|$|Most medium {{access control}} (MAC) {{mechanisms}} discard collided packets and consider interference harmful. Recent work on Analog Network Coding (ANC) suggests a different approach, in which multiple interfering transmissions are strategically scheduled. Receiving nodes collect the results of collisions and then use a decoding process, such as ZigZag decoding, to extract the packets involved in the collisions. In this paper, we present an algebraic representation of collisions and describe a general approach to recovering collisions using ANC. To {{study the effects of}} using ANC on the performance of MAC layers, we develop an ANC-based MAC algorithm, CMAC, and analyze its performance in terms of probabilistic latency guarantees for local packet delivery. MAC <b>layer</b> <b>service,</b> as defined in [14, 13]. This study shows that ANC can significantly improve the performance of the abstract MAC <b>layer</b> <b>service</b> compared to conventional probabilistic transmission approaches. We illustrate how this improvement in the MAC layer can translate into faster higher-level algorithms, by analyzing the time complexity of a multi-message network-wide broadcast algorithm that uses CMAC...|$|E
40|$|Abstract. This paper designs a {{frame system}} of Digital Ocean {{including}} the supporting layer, base layer, data <b>layer,</b> <b>service</b> layer, application layer and assurance layer. The framework system realizes the effective integration, exchanging and sharing {{of the marine}} information, the basic geographical information {{and all kinds of}} closely related economic and social information by using the open architecture and standardized service mode, and it provides the structure template for the construction of the Digital Ocean...|$|E
50|$|By using {{attenuated}} Bloom filters {{consisting of}} multiple <b>layers,</b> <b>services</b> {{at more than}} one hop distance can be discovered while avoiding saturation of the Bloom filter by attenuating (shifting out) bits set by sources further away.|$|R
50|$|<b>Service</b> <b>Layer</b> is {{a design}} pattern, applied within the service-orientation design paradigm, {{which aims to}} {{organize}} the services, within a service inventory, into a set of logical <b>layers.</b> <b>Services</b> that are categorized into a particular layer share functionality. This helps to reduce the conceptual overhead related to managing the service inventory, as the services belonging to the same layer address a smaller set of activities.|$|R
50|$|The Base <b>Services</b> <b>Layer</b> is {{the lowest}} level {{reachable}} by user-side operations; it includes the File Server and User Library, a Plug-In Framework which manages all plug-ins, Store, Central Repository, DBMS and cryptographic services. It also includes the Text Window Server and the Text Shell: the two basic services from which a completely functional port can be created {{without the need for}} any higher <b>layer</b> <b>services.</b>|$|R
40|$|This paper {{discusses}} {{different ways}} to globally provide the MAC <b>Layer</b> <b>Service</b> via interconnected MANs and B-ISDN. It takes into account several communication configurations, the use or non-use of Connectionless Servers in B-ISDN, protocol alternatives (AAL 3 / 4 or AAL 5) and especially various interworking scenarios: interworking at different levels / layers and protocol mapping versus encapsulation. None of the discussed alternatives is an optimum solution for all configurations taken into account. The applicable and the recommended alternatives for each configuration are identified...|$|E
40|$|Many envisioned {{applications}} of ad hoc networks involve only small scale networks that we term Vicinity Ad-hoc Groups (VAGs). Distributed coordination services, instead of pairwise communications, are primary requirements of VAGs. Existing designs for distributed services in ad hoc networks apply either a layered structure or a vertical integration. While the former approach is e#cient for protocol development, the latter improves runtime efficiency. In this paper, we argue that, since distributed services require group-oriented communications, both design and runtime e#ciency of protocols {{can be achieved}} in VAGs, provided that a dedicated network <b>layer</b> <b>service</b> is designed in place of unicast routing protocols. Based on these arguments, we propose NASCENT as a general network <b>layer</b> <b>service</b> for VAGs. NASCENT provides a lightweight VAG membership management along with a routing structure for message passing, and supports concurrent execution of various distributed algorithms. NASCENT is also tailored {{to cope with the}} transiency of VAGs. We demonstrate how smoothly distributed algorithms can be built on top of NASCENT. With a complexity-based analysis, we also show that NASCENT greatly improves the runtime e#ciency of these distributed algorithms. Finally, through simulations with ns- 2, we confirm the ability of NASCENT to support the envisioned VAG applications...|$|E
40|$|Within {{the frame}} of the {{recently}} launched EU project “Design 4 Energy” an attempt is being made to develop a design methodology that is able to create energy-efficient buildings within the context of their neighbourhoods. The work presented in this paper is the first steps towards this goal. Two approaches are combined and used to capture usage scenarios and visionary scenarios as the building blocks of the methodology. Also presented is the conceptual view of the dedicated technology platform and an overall architecture with three layers: data and knowledge <b>layer,</b> <b>service</b> layer and interface/application layer...|$|E
40|$|Tyt. z ekranu tytułowego. Praca doktorska, Akademia Górniczo-Hutnicza im. Stanisława Staszica (Kraków), 2011. Zawiera bibliogr. Dostępna także w wersji drukowanej. Tryb dostępu: Internet. Service {{oriented}} infrastructure, reference {{architecture of}} SOA solution stack, virtualization technologies overview, Hardware Partitioning, Virtual Machines, Lightweight Virtualization Containers, Multilevel Virtualization, provisioning challenges of virtual execution infrastructures, Maximizing IT Operations Resource Efficiency, Managing Virtual, Physical Assets, Establishing Performance, Availability Requirements, Integrating Network, Storage, System Management, evolution of maturity levels in computer systems management, informational technology process frameworks, Information Technology Infrastructure Library, Operational Management Capabilities Model, adaptive, autonomic systems, construction methods of control loops for computer systems management, Queuing Networks, Control Theory, Fuzzy Logic, Heuristics, POLICY REPRESENTATION, Description Language, Autonomic Computing Policy Language, CIM-SPL, Rule Engines, technologies of building adaptable systems, Component-Based Design, Reflective Middleware, Parameter Adaptation, Compositional Adaptation, model of adaptable provisioning of service oriented infrastructure with lightweight virtualization, elements of adaptable SOI provisioning with lightweight virtualization, Required Elements by the SOI Provisioning Process, Classification of Infrastructure Services, Lightweight Virtualization Containers Application Appliances, solaris lightweight virtualization platform, Solaris Lightweight Virtualization Containers, Solaris Projects, Solaris Resource Manager, Provisioning Challenges of Solaris Lightweight Virtualization, cloud computing integration with lightweight virtualization, process model of adaptable soi provisioning, Self-Managing Requirements Specification, Providing Manageability Endpoints, Adaptation Policies Definition, Provisioning Procedures Initiation, Provisioning Procedure Activation, requirements for adaptable SOI lightweight virtualization provisioning platform, modules, monitoring, management platform, Functional, Non-Functional Requirements, adaptation manager, policy management infrastructure, provisioning manager, architecture of adaptable SOI lightweight virtualization provisioning platform, adaptable architectures foundation, <b>layered</b> architecture, Operational <b>Services</b> <b>Layer,</b> Resource Access Layer, Runtime Infrastructure as a <b>Service</b> <b>Layer,</b> Self-Configuration <b>Services</b> <b>Layer,</b> Information <b>Services</b> <b>Layer,</b> Connectivity <b>Services</b> <b>Layer,</b> Model-based Translation <b>Layer,</b> Quality of <b>Services</b> <b>Layer,</b> Governance, Policies Layer, {{organization of the}} A-SOI-LV-PP’s modules for runtime infrastructure provisioning, Operating System Kernel Resource Managers for Lightweight Virtualization Containers, Provisioning Manager, Monitoring, Management Agents, Infrastructure Access Gateway, Adaptation Managers, Policy Management Infrastructure, implementation of adaptable SOI lightweight virtualization provisioning platform, selected technologies, monitoring, management platform, JMX-Based Infrastructure Management System Platform, Resource Access Layer, Runtime Infrastructure as a <b>Service</b> <b>Layer,</b> Information <b>Services</b> <b>Layer,</b> Resource Access Module, Policy Evaluation Module, policy management infrastructure, Policy Definition Tool, Policy Storage, provisioning manager, construction of lightweight virtualization containers application appliances, experimental studies, case study description, Configuration of Testbed Hardware Infrastructure, Provisioning Procedure Definition, case study compliance with the provisioning process model, Self-Managing Requirement Specification, Providing Manageability Endpoints, Adaptation Policies Definition, Provisioning Procedure Initiation, Provisioning Procedure Activation, experiment design, results, Preliminary Assumption...|$|R
40|$|Abstract. The modern B 2 B {{electronic}} business {{system should be}} able to make the enterprise meet better the need of the market, which must have some characteristics of cross-organization, cross-enterprises and frequent interaction. The paper proposes a dynamic electronic commerce model based on XML and Web Services, which consists of presentation <b>layer,</b> Web <b>Services</b> <b>layer,</b> application <b>service</b> <b>layer,</b> data integration layer and data layer. The dynamic e-business model can not only implement the loose system integration, but also be able to reuse the existing resources, and reduce to the cost of system integration and implementation time...|$|R
50|$|Base service {{providers}} implement the actual {{details of a}} transport protocol: setting up connections, transferring data, and exercising flow control and error control. <b>Layered</b> <b>service</b> providers implement only higher-level custom communication functions and rely on an existing underlying base provider for the actual data exchange with a remote endpoint.|$|R
