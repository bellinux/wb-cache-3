3|117|Public
50|$|Automatic server {{discovery}} often uses Multicast UDP to send broadcasts, {{to which}} available license servers respond {{with information about}} their network location. When a <b>licensed</b> <b>server</b> is discovered, the information is locally cached on the client machine, so automatic server discovery {{does not have to}} be performed at each application startup.|$|E
5000|$|In the U.S., {{where the}} frozen drink is popular in Mexican and [...] "Tex-Mex" [...] restaurants, the drink {{has been seen}} served in glasses ranging from beer steins to large schooners and even large rounded {{stemless}} [...] "fishbowls" [...] (as a large quantity of margarita is typically dispensed this way, the drink {{is intended to be}} consumed by multiple patrons, and alcohol-service laws often prohibit a <b>licensed</b> <b>server</b> or bartender from knowingly serving a drink of this size to a single person).|$|E
3000|$|Finally, {{we compare}} our {{solution}} to greedy algorithm [22], cooperative local bargaining [21], and dynamic spectrum access protocol (DSAP) [16]. In greedy algorithm, {{most of the}} PUs are self-interested, and they are hesitant to share the available spectrum, until they get the highest offer maximizing their individual utility. Local bargaining is cooperative, where the users exchange messages and they self-organize into bargaining groups for spectrum sharing. DSAP {{is based on the}} concept of centralized <b>licensed</b> <b>server</b> which is responsible for leasing spectrum to the requesting users. Thus, we compare our approach to three different solutions showing greedy, cooperative, and centralized behaviors, respectively. All the solutions are implemented under our ad hoc scenario, and the users are deployed according to Poisson processes with [...]...|$|E
50|$|Floating {{licensing}} is {{a software}} licensing approach {{in which a}} limited number of licenses for a software application are shared among a larger number of users over time. When an authorized user wishes to run the application they request a license from a central <b>license</b> <b>server.</b> If a <b>license</b> is available the <b>license</b> <b>server</b> allows the application to run. When they finish using the application, or when the allowed license period expires, the license is reclaimed by the <b>license</b> <b>server</b> and made available to other authorized users.|$|R
50|$|Publisher-specific <b>license</b> <b>servers</b> are {{commonly}} provided by software publishers, or through third party providers, to manage software licensing {{for a specific}} software publisher's products. Publisher-specific <b>license</b> <b>servers</b> are more commonly used for industry specialized software products than for common software products due to the high value of the managed software products.|$|R
50|$|It {{is the job}} of a {{software}} <b>license</b> <b>server</b> to determine and control the number of copies of a program permitted to be used based on the license entitlements that an organization owns. Typically, an end-user customer organization will install {{a software}} <b>license</b> <b>server</b> on a host computer to provide licensing services to an enterprise computing environment.|$|R
30|$|After verification, the Data Store {{receives}} the authenticated {{request from the}} <b>License</b> <b>Servers.</b>|$|R
50|$|The server {{component}} of a client-server application may also contain an internal <b>license</b> <b>server.</b>|$|R
50|$|The <b>license</b> <b>server</b> {{can manage}} <b>licenses</b> over a local area network, an {{intranet}} or virtual private network, or the Internet.|$|R
30|$|It {{is the job}} of the Data Collector to {{communicate}} with the <b>license</b> <b>servers</b> to check whether the game application licenses are valid.|$|R
50|$|License {{borrowing}} is {{a feature}} that allows a user to run software on a computer that is not continuously connected to the <b>license</b> <b>server</b> on the network.|$|R
50|$|A {{software}} <b>license</b> <b>server</b> is {{a centralized}} computer software system which provides access tokens, or keys, to client computers {{in order to}} enable licensed software to run on them.|$|R
40|$|A comnon {{method of}} {{enforcing}} software license terms {{is for a}} program to contact another program, called a <b>license</b> <b>server,</b> and ask for permission to run. This study attempts to bypass these license checks in a commercial product through runtime code modification, using the DynInst library. The programs chosen as victims for this study are Adobe FrameMalter, the Purify family of programs, and MatLab. We successfully bypass the FrameMaker licensing checks, allowing full use of the product when the <b>license</b> <b>server</b> is unavailable. Limitations in DynInst prevent similar results with Purify or MatLab. A set of powerful tools has been developed and used in the process, and their generality should simplify similar license bypassing efforts on other software products. Key words : System security, intellectual property protection, cyber cime, dynamic instrumentation, bypassing licence checks, binary code rewriting...|$|R
5000|$|Microsoft Software Licensing and Protection Services, {{also known}} as Microsoft SLPS, is a {{software}} licensing suite that provides developers {{with the ability to}} license software, create license versions, and track performance of products and profitability. SLPS is intended for developers and independent software vendors (ISV) streamline operations with [...]NET protection technology and a <b>licensing</b> <b>server.</b>|$|R
50|$|The {{campus is}} fully networked, with optical fiber inter-building backbone. Services like MOODLE, Student Management System, MBCET Webmail which uses VMware Zimbra, Digital Library-DSpace and {{centralized}} <b>License</b> <b>server</b> for software like AutoCAD, StaaD, Pspice etc. are provided. Leased line connection of 50MBps provides internet connection. 24 hr campus wide WiFi connection is provided to faculty and students.|$|R
50|$|LabKey <b>licenses</b> LabKey <b>Server</b> and its {{documentation}} {{for free}} under the Apache License.|$|R
40|$|Current praxis of {{software}} licensing {{has been identified}} as major obstacle for Grid computing {{a couple of years ago}} already. Recent surveys of Clouds indicate that the same holds true for Cloud computing. As a consequence, using commercial applications that require access to a <b>license</b> <b>server</b> for authorisation at run-time has been quite limited until recently in distributed computing environments. Due to the mandatory centralised control of license usage at application run-time, e. g. heartbeat control by the <b>license</b> <b>server,</b> traditional software <b>licensing</b> practices are not suitable especially when the environment stretches across adminis- trative domains. In this paper we present a novel approach for managing software licenses as web service resources in distributed service oriented environments. Licenses become mobile objects, which may move to the environment where required to authorise the execution of a license pro- tected application. The SmartLM solution decouples authorisation for license usage from authorisation for application execution. All authori- sations are expressed and guaranteed by Service Level Agreements...|$|R
40|$|Linux (Server Bundle) {{provides}} a turnkey GIS solution, {{with much of}} the data content available through ArcGIS SM Online services—optimized for publishing with the included ArcGIS <b>Server</b> <b>license.</b> The <b>Server</b> Bundle includes preloaded hardware to support the configuration with the data collection of choice, plus ArcGIS Serve...|$|R
25|$|Zune {{music and}} devices were {{follow-on}} to Microsoft's MSN Music service. MSN Music {{was created in}} 2004 to compete with Apple's iTunes services. After only two years, Microsoft announced the closing of MSN Music in 2006 immediately before announcing the Zune service. In 2008, Microsoft shut down the MSN Music <b>licensing</b> <b>servers</b> only two years after promising users the servers would be available for five years.|$|R
50|$|Automatic server {{discovery}} is a software licensing feature that allows client applications to find <b>license</b> <b>servers</b> automatically on the network, thus {{eliminating the need}} for end users to manually configure server information and allowing system administrators to perform their tasks more easily and efficiently. If you have, for example, over 70 machines then the configuration process {{will take a long time}} if it is done manually.|$|R
40|$|This thesis {{deals with}} familiarization with the reverse engineering, the {{modalities}} of its use and misuse {{in practice and}} becoming familiar with existing tools to protect software and tools developed within the Lissom project. It also focuses on the analysis of existing methods of security breaches and the proposal of protection for Lissom project applications {{in collaboration with the}} <b>license</b> <b>server</b> for operating system Windows...|$|R
50|$|Zune {{music and}} devices were {{follow-on}} to Microsoft's MSN Music service. MSN Music {{was created in}} 2004 to compete with Apple's iTunes services. After only two years, Microsoft announced the closing of MSN Music in 2006 immediately before announcing the Zune service. In 2008, Microsoft shut down the MSN Music <b>licensing</b> <b>servers</b> only two years after promising users the servers would be available for five years.|$|R
50|$|Open iT Software Suite {{supports}} several License Managers. These include Abaqus License Manager, Animator, Altair License Manager, Beta License Manager, Bentley® SELECT, Clearcase, Dassault's Systemes <b>License</b> <b>Server</b> (DSLS), Elan, Enterprise Architect LM, GHSlm (Green Hills), FlexNet (FLEXlm), HQMS, IBM-LUM, LM-X, LS-DYNA, MathLM, Aladdin Hardlock, Parasoft License Manager, Peloton, Reprise (RLM), Safenet Sentinel, Sentinel RMS, Slick Edit, SmartPlant, STI License Manager, Vector {{and other}} license manager {{can be added}} on request.|$|R
50|$|With Media Composer 8, Avid {{introduced}} monthly {{and annual}} subscription licensing systems similar to Adobe Creative Cloud, allowing users {{to install and}} activate Avid without purchasing a perpetual license. Media Composer licenses must be confirmed either by Avid's internet servers every 30 days or by an on-site floating <b>license</b> <b>server.</b> Starting with version 8, updates and support for perpetual licenses also require annual support agreements; support is included with subscription licenses.|$|R
50|$|Microsoft Dynamics CRM {{offers two}} types of licenses: <b>Server</b> <b>license</b> and Client Access License (CAL). Each {{deployment}} {{should have at least}} one <b>server</b> <b>license</b> and one CAL. CAL is also known as a user license.|$|R
40|$|The {{aim of this}} Bachelor {{thesis is}} to create {{licensing}} protection to Lissom project products. Theoretical part introduces reader into software licensing and protection. There are describes possibilities of legal protection, licensing and ways of breaking it. Main aim of this part is to protect software using <b>licensing</b> <b>server.</b> Practical part is dedicated to implementation license database management tool, program creating license files and finally a library enabling using of these files...|$|R
5000|$|In 2006, when {{announcing the}} closing of MSN Music in the United States, Microsoft promised users that <b>license</b> <b>servers</b> would be {{maintained}} for five years but in April 2008, Microsoft announced that the DRM servers for MSN Music would be deactivated on 2008-08-31. After this date, {{it was no longer}} possible to reauthorize purchased songs when changing computers or operating systems.They have suggested that customers back-up their music by burning it to CD.|$|R
5000|$|In May 2007 Microsoft {{published}} the network protocol behind its license acquisition mechanism. [...] According to the specification, the client software obtains a 7 byte plain-text content key Kcontent from the <b>license</b> <b>server.</b> The server encrypts the key before transferring {{it to the}} client with a globally predefined 160-bit ECC key, ECC1. The server also sends a content key ID, unencrypted. The client then uses the Kcontent as an RC4 key to decrypt the licensed media stream.|$|R
5000|$|Open iT LicenseAnalyzer is a {{software}} usage metering and optimization tool used for managing software licenses. This module provides an enterprise-wide view of software license usage, allowing companies to align purchases and maintenance with user needs. There {{are more than}} 20 license managers that are being supported such as FLEXlm/FlexNet, IBM LUM, Reprise License Manager, LM-X, Sentinel RMS, MathLM, Bentley Select, Dassault Systemés <b>License</b> <b>Server</b> (DSLS), etc. Some of this module’s primary functions include the following: ...|$|R
40|$|A mobile Digital Rights Management {{platform}} is proposed {{that follows the}} DRM reference architecture while including several important functions lacking in the OMA DRM. The platform provides strong protection methods utilizing encryption and digital watermarking, and supports content superdistribution with peer-to-peer networking and Bluetooth. Licenses for defining content usage rights are acquired from <b>license</b> <b>servers</b> with a <b>license</b> negotiation subsystem of the client. The DRM Player software has been implemented into a smart phone and tested with many applications. 1...|$|R
2500|$|In May 2007 Microsoft {{published}} the network protocol behind its license acquisition mechanism.], Microsoft Development Network Library, rev. 2.0, March 14, 2008. [...] According to the specification, the client software obtains a 7 byte plain-text content key Kcontent from the <b>license</b> <b>server.</b> [...] The server encrypts the key before transferring {{it to the}} client with a globally predefined 160-bit ECC key, ECC1. [...] The server also sends a content key ID, unencrypted. [...] The client then uses the Kcontent as an RC4 key to decrypt the licensed media stream.|$|R
40|$|This thesis {{deals with}} an {{implementation}} of Linux software protection against reverse engineering within the Lissom project. Protection {{consists of three}} layers. The first layer is represented by methods detecting tools, that enable the application of reverse engineering methods. Protection based on hashing the functions represents the second layer which protects the application against changes. The third layer of protection is a binary parts file encryption. These methods complete an existing <b>license</b> <b>server</b> of the Lissom project. Possible future extensions are discussed {{at the end of}} the thesis...|$|R
5000|$|In January 2016, Su {{announced}} that AMD {{was working on}} new FinFET-based chips {{to create a new}} line of microprocessors, products, accelerated processing units (APUs), graphics chips, and semi-custom chip designs for unreleased video game consoles. AMD’s share value spiked in July 2016 when AMD reported strong revenue growth. Fortune attributed the “impressive” statistic to Su, stating she “continues to execute on her comeback plan… key gains in graphics and video gaming console chips have boosted results as well as a savvy deal to <b>license</b> <b>server</b> chip designs in China.” ...|$|R
50|$|Signal is {{developed}} by Open Whisper Systems. The clients are published as free and open-source software under the GPLv3 <b>license.</b> The <b>server</b> code is published under the AGPLv3 license.|$|R
40|$|Grid and Cloud Computing {{have become}} very popular over the years. Cloud {{computing}} received a real boost through several commercial offers by big companies initially selling their spare CPU cycles {{to the general public}} and now making business with dedicated resources. This scheme gets adopted more and more, and there is a strong demand to not only run home-grown software in the Grid or Cloud, but also licensed, off-the-shelf software created by Independent Software Vendors (ISV). However, current licensing methods have several aspects that severely limit the usability of licensed software in these environments. First of all, licensing models do not always allow running licensed soft- ware outside the administrative domain stated in the license agreement. There are other common contractual measures in license agreements to protect the ISV's ownership of the code and stop users from using the code in an unlawful manner. While technical measures exist to cover traditional licensing scenarios, largely distributed environments spanning different administrative domains pose new challenges to the technical implementation of license management. A small number of projects have already tried to tackle the problem from the technical point of view. Some of them technically bent the existing licensing solution and opened them up to the public world, e. g. by setting up authenticated proxies and pretending that external requests to the <b>license</b> <b>server</b> come from the internal network [2, 3]. These techniques, while technically feasible, kept the original licensing mechanisms and may have bent contractual obligations in some cases. In the SmartLM project [1], we've developed a solution, which allows <b>license</b> <b>servers</b> to issue tokens of limited lifetime for the execution of a job. We've managed to avoid the necessity of being connected to the <b>license</b> <b>server</b> all the time. Thus, compute jobs can be moved wherever they need to go. In order to avoid that the user has any added value from using the token multiple times, the token is bound to exactly one set of input data using cryptographic methods. SmartLM also tackles the legal and business aspects, by including ISVs and business experts in the development of new licensing models. The technical measures described in this work incorporate their requirements...|$|R
40|$|ABSTRACT ⎯ In this paper, {{we propose}} a key {{management}} scheme which can provide {{delivery of the}} key used to encrypt a digital content from the package server to digital rights management (DRM) clients in a secure manner. The proposed scheme can protect digital content from attacks since an encrypted digital content is sent by a package server and only DRM clients can decrypt the encrypted digital content. It protects the key not only from purchasers but also among the other principals who manage the distribution and <b>license</b> <b>servers.</b> Keywords⎯Digital rights management (DRM), key management, content protection. I...|$|R
