0|10000|Public
50|$|For {{a fuller}} list, see the pages <b>linked</b> on <b>List</b> <b>of</b> <b>listed</b> {{buildings}} in Scotland.|$|R
25|$|A {{binary tree}} {{can be seen}} as a type <b>of</b> <b>linked</b> <b>list</b> where the {{elements}} are themselves <b>linked</b> <b>lists</b> <b>of</b> the same nature. The result is that each node may include a reference to the first node of one or two other linked lists, which, together with their contents, form the subtrees below that node.|$|R
50|$|In 2012 the <b>links</b> {{directory}} <b>of</b> Cyndi's <b>List</b> was duplicated by a rival website.|$|R
25|$|This is a <b>link</b> to a <b>list</b> <b>of</b> <b>links</b> (see <b>list).</b> Perhaps as a web link...|$|R
5000|$|The {{two images}} are now {{organized}} in hierarchy <b>of</b> <b>linked</b> <b>lists</b> in following structure : ...|$|R
5000|$|This is {{an example}} of the node {{structure}} used for implementation <b>of</b> <b>linked</b> <b>list</b> in C: ...|$|R
25|$|This section {{provides}} <b>links</b> to <b>lists</b> <b>of</b> {{species of}} various taxa found in India.|$|R
500|$|Dates of each annual assembly, <b>links</b> to <b>list</b> <b>of</b> {{members of}} each country's {{delegation}} ...|$|R
50|$|This section {{provides}} <b>links</b> to <b>lists</b> <b>of</b> {{species of}} various taxa found in India.|$|R
5000|$|The idea of DLX {{is based}} on the {{observation}} that in a circular doubly <b>linked</b> <b>list</b> <b>of</b> nodes, ...|$|R
5000|$|This macro {{is used to}} {{retrieve}} an enclosing structure from a pointer to a nested element, such as this iteration <b>of</b> a <b>linked</b> <b>list</b> <b>of</b> my_struct objects: ...|$|R
40|$|The {{article is}} {{concerned}} with learning link grammars in the model of Gold. We show that rigid and k-valued link grammars are learnable from strings. In fact, we prove that the languages <b>of</b> <b>link</b> structured <b>lists</b> <b>of</b> words associated to rigid link grammars have finite elasticity and we show a learning algorithm. As a standard corollary, this result leads to the learnability of rigid or k-valued link grammars learned from strings...|$|R
5000|$|Python 2.4 {{introduced}} the [...] module with support for deque objects. It is implemented using a doubly <b>linked</b> <b>list</b> <b>of</b> fixed-length subarrays.|$|R
50|$|Awards {{are given}} in the {{following}} categories. Follow the <b>links</b> for <b>lists</b> <b>of</b> the award winners, year by year.|$|R
5000|$|Jean Besse Par Contest [...] - <b>linked</b> to <b>list</b> <b>of</b> all players; evidently include 1 of 4 women placed ...|$|R
5000|$|Suppose {{you wanted}} to create a <b>linked</b> <b>list</b> <b>of</b> {{families}} and their members. Using internal storage, the structure might look like the following: ...|$|R
50|$|The {{total number}} of {{parliamentary}} seats is 129. For <b>links</b> to <b>lists</b> <b>of</b> MSPs, see Member of the Scottish Parliament.|$|R
40|$|Abstract The {{article is}} {{concerned}} with learning link grammars in the model of Gold. We show that rigid and k-valued link grammars are learnable from strings. In fact, we prove that the languages <b>of</b> <b>link</b> structured <b>lists</b> <b>of</b> words associated to rigid link grammars have finite elasticity and we show a learning algorithm. As a standard corollary, this result leads to the learnability of rigid or k-valued link grammars learned from strings. 1. ...|$|R
25|$|We {{will use}} a {{representation}} of the graph in which each vertex maintains a circular <b>linked</b> <b>list</b> <b>of</b> adjacent vertices, in clockwise planar order.|$|R
2500|$|Suppose {{you wanted}} to create a <b>linked</b> <b>list</b> <b>of</b> {{families}} and their members. [...] Using internal storage, the structure might look like the following: ...|$|R
50|$|A {{large number}} of {{software}} systems are available for visualization biological data. The <b>links</b> below <b>link</b> <b>lists</b> <b>of</b> such systems, grouped by application areas.|$|R
50|$|We {{will use}} a {{representation}} of the graph in which each vertex maintains a circular <b>linked</b> <b>list</b> <b>of</b> adjacent vertices, in clockwise planar order.|$|R
5000|$|... {{the skip}} list, a similar {{variation}} on the linked list, offers fast lookup and hurts the advantages <b>of</b> <b>linked</b> <b>lists</b> (quick insert/deletion) less than an unrolled linked list ...|$|R
50|$|A common {{variation}} {{is to build}} <b>linked</b> <b>lists</b> <b>of</b> tokens where each token holds a single WME. In this case, <b>lists</b> <b>of</b> WMEs for a partial match are represented by the <b>linked</b> <b>list</b> <b>of</b> tokens. This approach may be better because it eliminates the need to copy <b>lists</b> <b>of</b> WMEs from one token to another. Instead, a beta node needs only {{to create a new}} token to hold a WME it wishes to join to the partial match list, and then link the new token to a parent token stored in the input beta memory. The new token now forms the head <b>of</b> the token <b>list,</b> and is stored in the output beta memory.|$|R
30|$|A doubly <b>linked</b> <b>list</b> <b>of</b> agents is {{maintained}} by the system. Inserting or removing agents updates this list. This list is used for activities discussed later such as time scheduling.|$|R
5000|$|A single <b>listing</b> <b>of</b> pianists in all genres {{would be}} impractical, given the {{multitude}} of musicians noted for their performances on the instrument. Below are <b>links</b> to <b>lists</b> <b>of</b> well-known or influential pianists divided by genres: ...|$|R
50|$|Each sector {{within the}} level has a <b>linked</b> <b>list</b> <b>of</b> things stored in that sector. As each sector is drawn the sprites are placed into a <b>list</b> <b>of</b> sprites to be drawn. If {{not within the}} field of view these are ignored.|$|R
5000|$|This {{function}} frees {{the memory}} allocated by the getaddrinfo (...) function. As {{the result of}} the latter is a <b>linked</b> <b>list</b> <b>of</b> addrinfo structures, [...] freeaddrinfo (...) loops through the list and frees each one in turn.|$|R
50|$|Rather, a TCB {{provides}} an anchor for a <b>linked</b> <b>list</b> <b>of</b> other, related request control blocks (RBs), the composite of which (i.e., the TCB plus the top-linked RB) performs {{the function of}} a Process control block.|$|R
50|$|MiFID and its {{accompanying}} {{implementing directive}} were transposed {{in full and}} on time, with minor exceptions. The European Commission has published a transposition table <b>linking</b> to <b>lists</b> <b>of</b> national provisions which transpose directives.|$|R
40|$|<b>Linked</b> <b>lists</b> consist <b>of</b> <b>linked</b> nodes. •  Each node is {{a simple}} container, holding some piece of data, which has links(references) {{to one or more}} other nodes. •  There are many {{varieties}} <b>of</b> <b>linked</b> <b>lists.</b> o Forward links o Backward and forward links o Multiple successors o “dummy ” nodes o Circular links o...|$|R
3000|$|As EZBC used a {{large amount}} <b>of</b> {{operations}} <b>of</b> <b>link</b> <b>lists</b> such as adding and deleting nodes during encoding, this made its coding efficiency decline greatly when good image quality was required. Instead of using Amplitude Quadtree Q [...]...|$|R
5000|$|Many of {{the special}} cases <b>of</b> <b>linked</b> <b>list</b> {{operations}} can be eliminated by including a dummy element at the front <b>of</b> the <b>list.</b> This ensures {{that there are no}} special cases for the beginning <b>of</b> the <b>list</b> and renders both [...] and [...] unnecessary. In this case, the first useful data in the list will be found at [...]|$|R
50|$|Insertion is linear to {{the number}} of bins a {{candidate}} intersects because inserting a candidate into 1 bin is constant time. Deletion is more expensive because we need to search the singly <b>linked</b> <b>list</b> <b>of</b> each bin the candidate intersects.|$|R
5000|$|The {{identifier}} [...] initially references nothing (it is uninitialized); {{it is then}} rebound to reference {{an object}} (a <b>linked</b> <b>list</b> <b>of</b> strings). The <b>linked</b> <b>list</b> referenced by [...] is then mutated, adding a string to the list. Lastly, [...] is rebound to [...]|$|R
2500|$|Many of {{the special}} cases <b>of</b> <b>linked</b> <b>list</b> {{operations}} can be eliminated by including a dummy element at the front <b>of</b> the <b>list.</b> [...] This ensures {{that there are no}} special cases for the beginning <b>of</b> the <b>list</b> and renders both insertBeginning (...) and removeBeginning (...) unnecessary. In this case, the first useful data in the list will be found at list.firstNode.next.|$|R
