2|2|Public
50|$|ASA control {{characters}} are <b>logical</b> <b>printer</b> commands. They tell the printer {{how far to}} advance the paper before printing the current line of text. ASA control {{characters are}} all displayable characters. Printers do not understand these characters themselves, therefore the printer driver must translate them to the corresponding printer commands when sending the print data to the printer.|$|E
50|$|If no {{printer port}} is present at 0x3BC, the second port {{in the row}} (0x378) becomes logical {{parallel}} port 1 and 0x278 becomes logical parallel port 2 for the BIOS. Sometimes, printer ports are jumpered to share an interrupt despite having their own IO addresses (i.e. only one can be used interrupt-driven at a time). In some cases, the BIOS supports a fourth printer port as well, but the base address for it differs significantly between vendors. Since the reserved entry for a fourth <b>logical</b> <b>printer</b> port in the BIOS Data Area (BDA) is shared with other uses on PS/2 machines and with S3 compatible graphics cards, it typically requires special drivers in most environments.Under DR-DOS 7.02 the BIOS port assignments can be changed and overridden using the LPT1, LPT2, LPT3 (and optionally LPT4) CONFIG.SYS directives.|$|E
5000|$|The PrinterSetup {{system can}} manage CUPS queues. It takes the {{approach}} of assigning a text file to describe each print queue. These 'PrinterSetupFiles' may then be added to other text files called 'PrinterSetupLists'. This allows <b>logical</b> grouping of <b>printers.</b> [...] the PrinterSetup project remains in its infancy.|$|R
40|$|Within a {{heterogeneous}} distributed computing environment, {{it is necessary}} to integrate services, such as printing and mail, that are scattered throughout the environment and which perform single logical tasks. This paper discusses a general purpose architecture which provides a framework for designing complex multi-user systems capable of interfacing with these services. The merits of this generalized approach are reflected in the following two case studies of applications being developed by the University of Massachusetts' Project Pilgrim: PIMS (Pilgrim Interface to Mail Systems) and PIPS (Pilgrim Interface to Print Systems). These designs incorporate the principles of this architecture and utilize OSF DCE. PIPS permits the uniform access of {{a heterogeneous}} system's printing facilities and provides support for printing complex multi-document jobs. This interface is platform independent, supports flexible mappings between <b>logical</b> and physical <b>printers</b> and permits all printi [...] ...|$|R

