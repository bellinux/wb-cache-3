368|1228|Public
50|$|However, an {{arbitrary}} choice table {{does not always}} define a fuzzy <b>logic</b> <b>function.</b> In the paper, a criterion has been formulated to recognize whether a given choice table defines a fuzzy <b>logic</b> <b>function</b> and a simple algorithm of fuzzy <b>logic</b> <b>function</b> synthesis has been proposed based on introduced concepts of constituents of minimum and maximum. A fuzzy <b>logic</b> <b>function</b> represents a disjunction of constituents of minimum, where a constituent of minimum is a conjunction of variables of the current area {{greater than or equal}} to the function value in this area (to the right of the function value in the inequality, including the function value).|$|E
50|$|Computers emulate logic devices {{by making}} {{measurements}} of switch inputs, calculating a <b>logic</b> <b>function</b> from these measurements and then sending the results out to electronically controlled switches.|$|E
50|$|Typical {{practical}} implementations of a <b>logic</b> <b>function</b> utilize a multi-level {{network of}} logic elements.Starting from an RTL {{description of a}} design, the synthesis tool constructs a corresponding multilevel Boolean network.|$|E
40|$|Abstract: In {{this paper}} a new {{approach}} is introduced for implementing the basic <b>logic</b> <b>functions</b> using analog current-mode techniques. By expanding the <b>logic</b> <b>functions</b> in power series expressions, and using summers and multipliers, realization of the basic <b>logic</b> <b>functions</b> is simplified. To illustrate the proposed technique, a CMOS circuit for simultaneous realization of the <b>logic</b> <b>functions</b> NOT, OR, NAND and XOR is considered. HSPICE simulation results, obtained with ± 3. 5 V supply, are included. Key Words: Current-mode, Digital logic gate...|$|R
40|$|In {{this letter}} a new {{technique}} is introduced for implementing the basic <b>logic</b> <b>functions</b> using analog current-mode techniques. By expanding the <b>logic</b> <b>functions</b> in power series expressions, and using summers and multipliers, realization of the basic <b>logic</b> <b>functions</b> is simplified. Since no transistors are working in saturation, the problem of fan-out is alleviated. To illustrate the proposed technique, a circuit for simultaneous realization of the <b>logic</b> <b>functions</b> NOT, OR, NAND and XOR is considered. SPICE simulation results, obtained with 3 V supply, are include...|$|R
40|$|In this thesis, four special <b>logic</b> <b>functions</b> (threshold functions, {{monotone}} increasing functions, monotone decreasing functions, and unate functions) are {{extended to}} more general functions {{which allows the}} activities of these special functions to be a 2 ̆ 2 fuzzy 2 ̆ 2 rather than a 2 ̆ 21 -or-O 2 ̆ 2 process. These special <b>logic</b> <b>functions</b> are called as fuzzy special <b>logic</b> <b>functions</b> and {{are based on the}} concepts and techniques developed in fuzzy logic and fuzzy languages. The algorithms of determining C(n), Cmax(n) and generating the most dissimilar fuzzy special <b>logic</b> <b>functions</b> as well as important properties and results are investigated. Examples are given to illustrated these special <b>logic</b> <b>functions.</b> In addition, their applications [...] function representation, data compression, error correction, and monotone flash analog to digital converter, their relationships, and fuzzy classification are also presented. It is obviously shown that fuzzy logic theory can be used successfully on these four special <b>logic</b> <b>functions</b> in order to normalize the grade of membership function μ in the interval [0 1]. As a result, the techniques described in this thesis may be of use in the study of other special <b>logic</b> <b>functions</b> and much fertile field work is great worth researching and developing...|$|R
50|$|A {{standard}} cell {{is a group}} of transistor and interconnect structures that provides a boolean <b>logic</b> <b>function</b> (e.g., AND, OR, XOR, XNOR, inverters) or a storage function (flipflop or latch). The simplest cells are direct representations of the elemental NAND, NOR, and XOR boolean function, although cells of much greater complexity are commonly used (such as a 2-bit full-adder, or muxed D-input flipflop.) The cell's boolean <b>logic</b> <b>function</b> is called its logical view: functional behavior is captured {{in the form of a}} truth table or Boolean algebra equation (for combinational logic), or a state transition table (for sequential logic).|$|E
50|$|Because the NAND {{function}} has functional completeness all logic {{systems can}} be converted into NAND gates. This is also true for NOR gates. In principle, any combinatorial <b>logic</b> <b>function</b> can be realized with enough NAND gates.|$|E
5000|$|In digital {{electronics}} a diode-OR circuit is used {{to derive}} a simple Boolean <b>logic</b> <b>function.</b> This kind of circuit was once very common in Diode-transistor logic but has been largely replaced by CMOS in modern electronics: ...|$|E
50|$|Simple <b>logic</b> <b>functions.</b>|$|R
40|$|Abstract — The {{ability to}} {{efficiently}} match completelyspecified <b>logic</b> <b>functions</b> to structures of K-input look-up tables (K-LUTs) {{is a central}} problem in FPGA resynthesis algorithms. We {{address the problem of}} matching completely-specified <b>logic</b> <b>functions</b> of 9 to 12 inputs in K-LUT structures. Our method is based on the off-line generation of libraries of LUT structures. During resynthesis, matching is performed efficiently using NPN encoding and hash table look-ups to find alternative LUT structures for the implementation of <b>logic</b> <b>functions.</b> Generating an effective library of LUT structures may seem prohibitive due to the overwhelming number of potential <b>logic</b> <b>functions</b> which must be considered and represented. We show that, by careful consideration of which <b>logic</b> <b>functions</b> and LUT structures to keep in the library, it is, indeed, possible to generate useful, compact libraries. Numerical results are presented to support our proposed use of precomputed libraries. I...|$|R
50|$|Microprogramming {{is still}} used in modern CPU designs. In some cases, after the {{microcode}} is debugged in simulation, <b>logic</b> <b>functions</b> are substituted {{for the control}} store. <b>Logic</b> <b>functions</b> are often faster and less expensive than the equivalent microprogram memory.|$|R
50|$|The state {{register}} is just {{a representation}} of a binary number. If {{the states in the}} state machine are numbered (easy to arrange), the <b>logic</b> <b>function</b> is some combinational logic that produces the number of the next state.|$|E
50|$|Next, {{this network}} is {{optimized}} using several technology-independent techniques before technology-dependent optimizations are performed. The typical cost function during technology-independent optimizations is total literalcount of the factored {{representation of the}} <b>logic</b> <b>function</b> (which correlates quite well with circuit area).|$|E
5000|$|Sequential control {{refers to}} dis-continuous time and event based {{automation}} sequences that occur within continuous processes. These may be implemented {{as a collection}} of time and <b>logic</b> <b>function</b> blocks, a custom algorithm, or using a formalized Sequential function chart methodology.|$|E
40|$|In {{this article}} the {{algorithm}} for transformation of <b>logic</b> <b>functions</b> which are given by truth tables is considered. The suggested algorithm allows {{the transformation of}} many-valued <b>logic</b> <b>functions</b> with the required number of variables and can be looked in this sense as universal. Comment: 25 pages, in English, German and Russia...|$|R
40|$|This paper {{proposes a}} method to {{generate}} program code for embedded systems using Multi-valued Decision Diagrams (MDDs) that are called heterogeneous MDDs. The heterogeneous MDDs represent <b>logic</b> <b>functions</b> more compactly, and have shorter average path length than other Decision Diagrams (DDs). The code generated using heterogeneous MDDs can evaluate <b>logic</b> <b>functions</b> faster using {{a small amount of}} memory. Our experimental results show that some functions are suitable for this method, while others are suitable for Levelized Compiled Code (LCC) method. We also introduce a new measure of <b>logic</b> <b>functions,</b> the LN-ratio to determine which of the two methods is better...|$|R
2500|$|We are {{now able}} to compute some <b>logic</b> <b>functions,</b> for example: ...|$|R
50|$|A {{complete}} computer {{called the}} ALWAC 800 was constructed using magnetic logic, {{but it was}} not commercially successful.The Elliott 803 computer used a combination of magnetic cores (for <b>logic</b> <b>function)</b> and germanium transistors (as pulse amplifiers) for its CPU. It was a commercial success.|$|E
50|$|Transistor-transistor logic (TTL) is a {{class of}} digital {{circuits}} built from bipolar junction transistors (BJTs) and resistors. It is called transistor-transistor logic because transistors perform both the <b>logic</b> <b>function</b> (e.g., AND) and the amplifying function (compare with resistor-transistor logic (RTL) and diode-transistor logic (DTL)).|$|E
50|$|Compared to LUT6-based {{architectures}} (such as Xilinx 7-series {{devices and}} Altera Stratix devices), a LUT4-based device {{is unable to}} implement as-complex logic functions with {{the same number of}} logic cells. For example, a <b>logic</b> <b>function</b> with seven inputs could be implemented in eight LUT4s or two LUT6s.|$|E
5000|$|Using these properties, {{expressions}} for dyadic <b>logic</b> <b>functions</b> can be obtained: ...|$|R
40|$|<b>Logic</b> <b>functions</b> {{of several}} {{variables}} are considered as mappings from a Cartesian product of several {{copies of a}} finite (Galois) field into the field itself. Based on the well-known fact that such mappings are always polynomial, it is shown how the corresponding polynomial expressions for given <b>logic</b> <b>functions</b> are obtained through several concrete computational examples...|$|R
50|$|Transistor {{count for}} generic <b>logic</b> <b>functions</b> {{is based on}} static CMOS implementation.|$|R
50|$|The NAND gate has the {{property}} of functional completeness. That is, any other <b>logic</b> <b>function</b> (AND, OR, etc.) can be implemented using only NAND gates. An entire processor can be created using NAND gates alone. In TTL ICs using multiple-emitter transistors, it also requires fewer transistors than a NOR gate.|$|E
5000|$|... the {{bridging}} fault model. Two {{signals are}} connected together {{when they should}} not be. Depending on the logic circuitry employed, this {{may result in a}} wired-OR or wired-AND <b>logic</b> <b>function.</b> Since there are O(n^2) potential bridging faults, they are normally restricted to signals that are physically adjacent in the design.|$|E
50|$|Data binding is {{a general}} {{technique}} that binds data sources from the provider and consumer together and synchronizes them. This is usually done with two data/information sources with different languages as in XML data binding. In UI data binding, data and information objects of the same language but different <b>logic</b> <b>function</b> are bound together (e.g. Java UI elements to Java objects).|$|E
40|$|The {{elements}} of Galois field GF(4) {{are represented by}} four numerals { 0, 1, 2, 3 }; it is shown that all quaternary <b>logic</b> <b>functions</b> can be expressed {{in a sort of}} standard form as polynomial functions over GF(4); the two field operators of GF(4) are proposed as basic logic gates and are used as basic building blocks in the representation of the <b>logic</b> <b>functions...</b>|$|R
40|$|An {{optical system}} based on an area-coded scheme and the shadow-casting {{technique}} is proposed for fuzzy image processing. All of the fuzzy <b>logic</b> <b>functions</b> of two images can be implemented in parallel. The access of the fuzzy <b>logic</b> <b>functions</b> can be easily achieved by programming an LED source array in the system. Above all, no thresholding device is required. The experimental results are also given...|$|R
40|$|The column {{multiplicity}} of a decomposition {{table for a}} given function {{is the number of}} distinct column patterns. This paper derives upper bounds on column multiplicities for <b>logic</b> <b>functions</b> whose number of true minterms is speci-fied. These bounds are significant improvement over bounds in which the number of true minterms is unspecified. From these bounds, we can estimate the number of LUTs to im-plement <b>logic</b> <b>functions</b> in FPGA <b>logic</b> synthesis. 1...|$|R
50|$|Logic {{redundancy}} {{occurs in}} a digital gate network containing circuitry that {{does not affect the}} static <b>logic</b> <b>function.</b> There are several reasons why logic redundancy may exist. One reason is that it may have been added deliberately to suppress transient glitches (thus causing a race condition) in the output signals by having two or more product terms overlap with a third one.|$|E
50|$|The ESPRESSO {{algorithm}} {{proved so}} successful {{that it has been}} incorporated as a standard <b>logic</b> <b>function</b> minimization step into virtually any contemporary logic synthesis tool. For implementing a function in multi-level logic, the minimization result is optimized by factorization and mapped onto the available basic logic cells in the target technology, whether this concerns an FPGA (Field Programmable Gate Array) or an ASIC (Application Specific Integrated Circuit).|$|E
5000|$|Logic Friday [...] {{is a free}} Windows {{program that}} {{provides}} a graphical interface to ESPRESSO, {{as well as to}} misII, another module in the Berkeley Octtools package. With Logic Friday users can enter a <b>logic</b> <b>function</b> as a truth table, equation, or gate diagram, minimize the function, and then view the results in both of the other two representations. Logic Friday is available at http://www.sontrak.com.|$|E
50|$|Memory cells {{control and}} define the <b>function</b> that the <b>logic</b> {{performs}} {{and how the}} various <b>logic</b> <b>functions</b> are interconnected.|$|R
5000|$|IEEE Std 91/91a: graphic symbols for <b>logic</b> <b>functions</b> (used {{in digital}} electronics). It is {{referenced}} in ANSI Y32.2/IEEE Std 315.|$|R
40|$|First, {{this paper}} {{considers}} {{the number of}} LUTs to implement <b>logic</b> <b>functions</b> based on MUX-based realization and cascade realization. This is useful to quickly estimate the number of LUTs to implement the functions on a FPGA. Second, this paper shows an algorithm to realize <b>logic</b> <b>functions</b> by 6 -LUTs using cascade and MUX-based realizations. It often produces smaller circuits than previous methods {{when the number of}} the input variables is smaller than 16. ...|$|R
