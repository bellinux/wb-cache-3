302|10000|Public
50|$|Umbraco can be {{deployed}} {{on a single}} physical server running the database and web tier, and this deployment model can be appropriate for small low-cost sites. Umbraco sites which serve content under higher load can also {{be deployed}} on a <b>load</b> <b>balanced</b> cluster. <b>Load</b> <b>balanced</b> Umbraco installations can use software or hardware load balancers, and <b>load</b> <b>balanced</b> network files can be shared using a SAN, NAS or a cluster file system or using a file replication service between nodes in the cluster.|$|E
5000|$|Support for {{implementing}} easily redundant and <b>load</b> <b>balanced</b> monitoring hosts ...|$|E
5000|$|Transparent (implicit) {{exploitation}} of parallelism {{in a natural}} and <b>load</b> <b>balanced</b> manner using all available multi-core processors in the system automatically.|$|E
50|$|Cloud <b>load</b> <b>balancing</b> {{is a type}} of <b>load</b> <b>balancing</b> that is {{performed}} in cloud computing. Cloud <b>load</b> <b>balancing</b> is the process of distributing workloads across multiple computing resources. Cloud <b>load</b> <b>balancing</b> reduces costs associated with document management systems and maximizes availability of resources. It {{is a type of}} <b>load</b> <b>balancing</b> and {{not to be confused with}} Domain Name System (DNS) <b>load</b> <b>balancing.</b> While DNS <b>load</b> <b>balancing</b> uses software or hardware to perform the function, cloud <b>load</b> <b>balancing</b> uses services offered by various computer network companies.|$|R
40|$|<b>Load</b> <b>balancing</b> {{middleware}} is {{used extensively}} to improve scalability and overall system throughput in distributed systems. Many <b>load</b> <b>balancing</b> middleware services are simplistic, however, {{since they are}} geared only for specific usecases and environments. These limitations {{make it hard to}} use the same <b>load</b> <b>balancing</b> service for anything other than the distributed application it was designed for originally. This lack of generality forces continuous re-development of application-specific <b>load</b> <b>balancing</b> services. Not only does re-development increase deployment costs of distributed applications, but it also increases the potential of producing nonoptimal <b>load</b> <b>balancing</b> implementations since proven <b>load</b> <b>balancing</b> service optimizations cannot be reused directly. This paper presents a set of <b>load</b> <b>balancing</b> service features that address many existing middleware <b>load</b> <b>balancing</b> service inadequacies, such as lack of server-side transparency, centralized <b>load</b> <b>balancing,</b> sole support for stateless replication, fixed load monitoring granularities, lack of fault tolerant <b>load</b> <b>balancing,</b> non-extensible <b>load</b> <b>balancing</b> algorithms, and simplistic replica management. All the capabilities described in this paper are currently under development {{for the next generation of}} middleware-based <b>load</b> <b>balancing</b> service distributed with our CORBA-compliant ORB (TAO). Keywords: Middleware, patterns, scalability, CORBA, <b>load</b> <b>balancing.</b> ...|$|R
40|$|This paper {{presents}} a <b>load</b> <b>balancing</b> model {{to investigate the}} effect of non-uniform traffic distributions on <b>load</b> <b>balancing</b> in CDMA system. Applying two traffic models on non-uniform traffic distributions, the impact of traffic non-uniformity on system <b>load</b> <b>balancing</b> is compared with uniform distributions. To evaluate the model, we define both <b>load</b> <b>balancing</b> factor (LBF) and <b>load</b> <b>balancing</b> coefficient (LBC). Results indicate that the more offered traffic is easier to achieving <b>load</b> <b>balancing</b> than the less offered traffic. 1...|$|R
5000|$|Active/active â€” Traffic {{intended}} for the failed node is either passed onto an existing node or <b>load</b> <b>balanced</b> across the remaining nodes. This is usually only possible when the nodes use a homogeneous software configuration.|$|E
5000|$|... {{when one}} of several <b>load</b> <b>balanced</b> servers becomes {{unavailable}} due to overload, all other servers will receive a higher load, potentially leading to more overload and a snow-ball effect which takes down the entire system.|$|E
5000|$|One user {{may have}} an {{inconsistent}} IP address. This is true for users behind proxies (such as AOL customers). It is also true for some mobile/roaming users, as well as users that are behind <b>load</b> <b>balanced</b> Internet connections. Users with IPv6 Privacy Extensions enabled may also change their IPv6 privacy addresses at any time.|$|E
40|$|This paper {{presents}} {{the process of}} <b>load</b> <b>balancing</b> in simulation system Triad. Net, the architecture of <b>load</b> <b>balancing</b> subsystem. The main features of static and dynamic <b>load</b> <b>balancing</b> are discussed and new approach, controlled dynamic <b>load</b> <b>balancing,</b> needed for regular mapping of simulation model on the network of computers is proposed. The paper considers linguistic constructions of Triad language for different <b>load</b> <b>balancing</b> algorithms description...|$|R
40|$|The <b>load</b> <b>balancing</b> {{architecture}} {{is the most}} popular method to improve the performance of the server. The selection of the <b>load</b> <b>balancing</b> algorithms {{is one of the most}} important issues. In this paper, we use NetFlow to collect traffic for six <b>load</b> <b>balancing</b> algorithms, including least connections, round robin, minimum misses, hash, response time, and bandwidth. We compared their flow counts and packet counts separately. Both the WAN link <b>load</b> <b>balancing</b> and server <b>load</b> <b>balancing</b> are implemented. In addition, we also collected the burst traffic for server <b>load</b> <b>balancing.</b> The results for the performance of the algorithms are analyzed and compared. Key words: NetFlow, <b>load</b> <b>balancing,</b> cluste...|$|R
40|$|This paper aims {{to conduct}} an {{experiment}} on using some popular algorithms say Particle Swarm Optimization <b>Load</b> <b>Balancing</b> Algorithm(PSO), Cat Swarm Optimization <b>Load</b> <b>Balancing</b> Algorithm(CSO) and Genetic <b>Load</b> <b>Balancing</b> Algorithm (GA) in dynamic cloud computing environment {{in order to achieve}} low over heads during <b>load</b> <b>balancing...</b>|$|R
50|$|ClearSDN (Service Delivery Network) is a <b>load</b> <b>balanced</b> {{network that}} {{distributes}} critical updates and {{services such as}} intrusion detection, content filtration, anti-virus, anti-spam, dynamic DNS, remote backup, remote security auditing, reporting and security tools for compliance and management tools for administration. The product was launched in February 2010, and is managed by ClearFoundation and works with ClearOS platform.|$|E
50|$|OpenSSI uses LVS {{to provide}} {{fault-tolerant}} <b>load</b> <b>balanced</b> IP services. Inbound network connections are received by a director node which redirects {{them to the}} least loaded server node. (A node may be both a director and server). In the event of director node failure another director node takes over and the system continues to accept inbound connections.|$|E
50|$|For example, an {{enterprise}} may concurrently use separate cloud providers for infrastructure (IaaS) and software (SaaS) services, or use multiple infrastructure (IaaS) providers. In the latter case, they may use different infrastructure providers for different workloads, deploy a single workload <b>load</b> <b>balanced</b> across multiple providers (active-active), or deploy a single workload on one provider, with a backup on another (active-passive).|$|E
40|$|Abstract: <b>Load</b> <b>balancing</b> is a {{technique}} in which workload is distributed across multiple computers or other resources to get optimal resource utilization, minimum time delay, maximize throughput and avoid overload. Mainly in operation of parallel and distributed computing systems, <b>load</b> <b>balancing</b> problem arises. <b>Load</b> <b>balancing</b> scheme can be characterized as: static and dynamic <b>load</b> <b>balancing.</b> This paper represents a senderinitiated <b>load</b> <b>balancing</b> scheme, which {{is a part of}} dynamic <b>load</b> <b>balancing</b> scheme, with the help of genetic algorithm (GA), as due to easily adaptable search technique and robust, immense popularity have gained by genetic algorithms...|$|R
40|$|Abstract: In <b>load</b> <b>balancing,</b> each {{processor}} {{is assigned}} work proportional to its performance so that execution {{time of the}} program can be minimized. The gap between lightly loaded processor and heavily loaded processor is filled by <b>load</b> <b>balancing.</b> Static <b>load</b> <b>balancing</b> and dynamic <b>load</b> <b>balancing</b> {{are two types of}} <b>load</b> <b>balancing.</b> For decreasing unnecessary request messages and for increasing acceptance rate, genetic algorithm is used with <b>load</b> <b>balancing.</b> Population of solutions are maintained iteratively by genetic algorithm in which each solution represents a chromosome. Basic operation of genetic algorithm here is to determine a destination processor that can receive a task...|$|R
40|$|Abstract- This paper {{introduces}} a new mechanism for <b>load</b> <b>balancing</b> in a network. <b>Load</b> <b>balancing</b> {{is a computer}} networking method for distributing workload across multiple computing resources such as computers, a computer cluster network links,central processing units or disk drives. <b>Load</b> <b>Balancing</b> is usually provided by dedicated software or hardware, such as a multilayer switch or Domain Name System Sever Process. There are various algorithms to perform <b>load</b> <b>balancing.</b> In this paper we will discuss how to perform <b>load</b> <b>balancing</b> using heaps and discuss the advantage and disadvantages of using this method to perform <b>load</b> <b>balancing...</b>|$|R
5000|$|Enduro/X ASG - Application server for Go. This {{provides}} XATMI and XA {{facilities for}} Golang. Go application {{can be built}} by normal Go executable files which in turn provides stateless services, which can be <b>load</b> <b>balanced,</b> clustered and reloaded on they fly with out service interruption by means of administrative work only. Framework provides distributed transaction processing facility for Go.|$|E
50|$|The stmsboot {{program is}} an {{administrative}} command to manage fibre channel devices under Solaris. When enabled, MPxIO will discover multiple paths {{to the same}} fibre channel drives and map them as one device under a new device name. This mapping creates a highly-available and multiplexed (trunked and <b>load</b> <b>balanced)</b> storage presentation on the server configured. The stmsboot command automatically updates /etc/vfstab and dump configuration to properly leverage the new device names.|$|E
50|$|The {{technology}} infrastructure at MP3.com {{consisted of}} over 1500 simple Intel based servers running Red Hat Linux (versions 5.2 - 7.2) in <b>load</b> <b>balanced</b> clusters in data centers run by AT&T, Worldcom and the now defunct Exodus Communications. It {{was one of}} the first massively scalable Internet architectures for media delivery. The software of choice was C, Perl, Apache, Squid, MySQL some Oracle and Sybase. This architecture routinely pushed 1.2 Gbit/s total traffic globally.|$|E
40|$|Abstract. In {{this paper}} the {{classification}} {{and development of}} server <b>load</b> <b>balancing</b> technology are briefly described and the <b>load</b> <b>balancing</b> algorithms based on server cluster are compared. A server <b>load</b> <b>balancing</b> technology and algorithm based on multiple parameters are proposed. Finally, the <b>load</b> <b>balancing</b> algorithm is tested. Testing {{results show that the}} method is feasible...|$|R
40|$|Cloud {{computing}} {{requires more}} reliable, efficient and scalable <b>load</b> <b>balancing</b> algorithm to survive. As {{one of the}} main challenges in cloud computing, <b>load</b> <b>balancing</b> facilitate dynamic workload across multiple nodes ensuring that no single node get overloaded. With proper <b>load</b> <b>balancing,</b> resource consumption is maintained at minimum level, enabling scalability, avoiding bottleneck and overprovisioning etc. In this paper, systematic review on existing <b>load</b> <b>balancing</b> techniques currently prevalent in cloud computing was carried out. <b>Load</b> <b>balancing</b> metrics; Response time...|$|R
40|$|This paper {{presents}} thorough {{survey of}} work addressing on <b>load</b> <b>balancing</b> in recent computing trends. There are many issues whose solutions {{lead to the}} need for <b>load</b> <b>balancing.</b> The objective of <b>load</b> <b>balancing</b> is to increase the performance of parallel and distributed system by distributing the load among the processors. <b>Load</b> <b>balancing</b> is a major factor for achieving high performance. It affects the execution time significantly by expediting it. Load imbalance is a well-known problem in the areas involving parallelism. However, offering <b>load</b> <b>balancing</b> is a difficult and challenging task. Various algorithms have been proposed for <b>load</b> <b>balancing.</b> These algorithms have distinguished features and each uses different mechanisms. Various <b>Load</b> <b>balancing</b> algorithms like biased sampling, honey bee, active clustering, and join idle queue have been studied...|$|R
5000|$|Terminal Server Session Directory is {{a feature}} that allows users to easily and {{automatically}} reconnect to a disconnected session in a <b>load</b> <b>balanced</b> Terminal Server farm. The session directory keeps a list of sessions indexed by username and server name. This enables a user, after disconnecting a session, to reconnect to the correct Terminal Server where the disconnected session resides in order to resume working in that session.This reconnection will work even if the user connects from a different client computer.|$|E
50|$|On 6 January she {{departed}} Batavia {{as part of}} a {{fleet of}} seven ships bound for Europe under the command of the outgoing Governor-General of the Dutch East Indies Pieter de Carpentier. Just as the fleet was leaving, however, a valuable cargo arrived at Batavia from China, so Vianen was held back to be loaded. She was then sent {{to catch up with the}} main fleet, but had been loaded too hastily, and had to return to port to have her <b>load</b> <b>balanced</b> by the addition of 5000 ingots of copper.|$|E
50|$|Another {{problem with}} {{parallel}} algorithms is ensuring {{that they are}} suitably <b>load</b> <b>balanced,</b> by ensuring that load (overall work) is balanced, rather than input size being balanced. For example, checking all numbers from one to a hundred thousand for primality is easy to split amongst processors; however, if the numbers are simply divided out evenly (1-1,000, 1,001-2,000, etc.), {{the amount of work}} will be unbalanced, as smaller numbers are easier to process by this algorithm (easier to test for primality), and thus some processors will get more work to do than the others, which will sit idle until the loaded processors complete.|$|E
40|$|Abstract: Distributed {{processing}} can be {{used for}} solving large computation intensive problems. A distributed system may include parallel supercomputers, networked workstations and PCs. This paper discusses <b>load</b> <b>balancing</b> of a parallel job in a distributed computation environment. The information necessary for <b>load</b> <b>balancing</b> is studied. The software tools that automatically collect the information and perform <b>load</b> <b>balancing</b> is described. Parallel computational fluid dynamics examples are used to demonstrate the effectiveness of the <b>load</b> <b>balancing</b> method. Key-Words: distributed computing, dynamic <b>load</b> <b>balancing.</b> 1...|$|R
5000|$|Gateway <b>Load</b> <b>Balancing</b> Protocol - Cisco {{proprietary}} router redundancy solution providing <b>load</b> <b>balancing</b> ...|$|R
40|$|In {{communication}} networks servers are duplicated for dependability reasons. To utilize them efficiently a controller distributes {{the load}} {{between them in}} a best possible way. In this paper we study dynamic <b>load</b> <b>balancing</b> based on {{the states of the}} servers {{at the start of the}} <b>load</b> <b>balancing</b> interval. The servers are modeled as M/M/ 1 /n queuing systems. The transient loss of this system is found using renewal type of argument. This result is used for dynamic <b>load</b> <b>balancing</b> to minimize the sum of lost tasks over the <b>load</b> <b>balancing</b> interval. The result is compared with ideal <b>load</b> <b>balancing</b> and weighted <b>load</b> <b>balancing</b> of tasks to the two servers. 1...|$|R
5000|$|With {{the weather}} clearing, The Spirit trundles down the muddy runway and barely clears the treetops {{at the end}} of the field. Every hour, Lindbergh {{switches}} fuel tanks to keep the monoplane's weight <b>load</b> <b>balanced.</b> As he flies over Cape Cod, he realizes he has not slept in 28 hours. He recalls in times past sleeping on railroad tracks, on short bunk beds, and under a windmill. When [...] "Slim" [...] begins to doze, he is awakened by a fly. Over Nova Scotia, he sees a motorcyclist below, remembering his own Harley Davidson motorcycle traded in as partial payment for his first aircraft, a World War I war-surplus Curtiss Jenny.|$|E
50|$|Content {{switches}} {{are typically}} used for load balancing among groups of servers. Load balancing {{can be performed}} on HTTP, HTTPS, VPN, or any TCP/IP traffic using a specific port. Load balancing often involves destination network address translation so that the client of the <b>load</b> <b>balanced</b> service is not fully aware of which server is handling its requests. Some of the layer 4-7 switches can perform NAT at wirespeed. Also, content switches can often be used to perform standard operations such as SSL encryption/decryption to reduce the load on the servers receiving the traffic, or to centralise the management of digital certificates. Layer 7 switching is the base technology of a content delivery network.|$|E
50|$|Choosing {{the type}} of backup site to be used is decided by an {{organizations}} based on a cost vs. benefit analysis. Hot sites are traditionally more expensive than cold sites, since much of the equipment the company needs must be purchased and thus people are needed to maintain it, making the operational costs higher. However, if the same organization loses {{a substantial amount of}} revenue for each day they are inactive, then it may be worth the cost. Another advantage of a hot site is that it can be used for operations prior to a disaster happening. This <b>load</b> <b>balanced</b> production processing method can be cost effective, and will provide the users with the security of minimal downtime during an event that affects one of the data centers.|$|E
40|$|We {{examine the}} {{stability}} of two interfering processors with service rates depending {{on the number of}} users present of each of the classes and subject to static or dynamic <b>load</b> <b>balancing.</b> Such models arise in several contexts, especially in wireless networks, or multiprocessing. In case of static <b>load</b> <b>balancing,</b> we extend existing stability results by deriving Lyapunov functions that are connected to the solutions of one dimensional Poisson equation. We then characterize the optimal static <b>load</b> <b>balancing.</b> The Lyapunov function found for the static <b>load</b> <b>balancing</b> is used to derive the exact stability condition of an interesting class of dynamic <b>load</b> <b>balancing</b> policies. We show that for certain properties of the state-dependent service rates, simple dynamic <b>load</b> <b>balancing</b> schemes improve the stability condition. Keywords: Stability, Dynamic <b>load</b> <b>balancing,</b> State-dependent service rates, Lyapunov functions...|$|R
40|$|Abstractâ€”In {{this paper}} the {{classification}} {{and development of}} server <b>load</b> <b>balancing</b> technology are briefly described and the <b>load</b> <b>balancing</b> algorithms based on server cluster are compared. A server <b>load</b> <b>balancing</b> technology and algorithm based on multiple parameters are proposed. Finally, the <b>load</b> <b>balancing</b> algorithm is tested. Testing {{results show that the}} method is feasible. Keywords- server; load balancing; algorithm; schedule I...|$|R
5000|$|Gateway <b>Load</b> <b>Balancing</b> Protocol - A Cisco Systems {{proprietary}} router redundancy protocol providing <b>load</b> <b>balancing</b> ...|$|R
