2|10000|Public
50|$|The A110 runs at 800 MHz, the A100 at 600 MHz, {{and both}} have a TDP of 3 watts, and a power {{consumption}} in the <b>lowest</b> <b>power</b> <b>state</b> of only 0.4 watts.|$|E
50|$|These allow gains to be {{made through}} {{optimisation}} of servers. This is typically done by doing diagnostic tests on individual servers and developing {{a model for a}} data center’s energy demand using these measurements. By analysing every server in a data centre, server power management software can identify servers that can be removed. It also enables servers to be virtualized, processes to be consolidated to a smaller number of servers, and servers with a predictable cyclical power demand to be fully powered down when not in use. Active power management features are also included which put remaining servers into their <b>lowest</b> <b>power</b> <b>state</b> that allows instant wake-up on demand when required.|$|E
50|$|It is {{believed}} {{that the reason for}} the problem is a bug in the CPU with handling cache coherency in dual cpu setups when switching the CPU to <b>low</b> <b>power</b> <b>states.</b> To address this problem, Apple released a firmware update, disabling switching to <b>low</b> <b>power</b> <b>states.</b>|$|R
5000|$|C6 and CC6 <b>low</b> <b>power</b> <b>states</b> {{with lower}} entry and exit latency ...|$|R
25|$|Through <b>state</b> {{encoding}} for <b>low</b> <b>power</b> <b>state</b> machines may be optimized {{to minimize}} power consumption.|$|R
50|$|The {{second major}} {{reason is that}} the various {{hardware}} operating <b>states</b> for <b>power</b> management can be difficult to use effectively. This is because deeper <b>low</b> <b>power</b> <b>states</b> tend to have larger transition latency and energy costs than lighter <b>low</b> <b>power</b> <b>states.</b> For workloads that have frequent and intermittent bursts of activity, such as web search queries, this prevents the use of deep lower <b>power</b> <b>states</b> without incurring significant latency penalties, which may be unacceptable for the application.|$|R
5000|$|Most 802.11 {{wireless}} interfaces do {{not maintain}} a link in <b>low</b> <b>power</b> <b>states</b> and cannot receive a magic packet ...|$|R
40|$|In {{this paper}} {{we show that}} in modern {{computing}} systems, DVFS gives much more limited energy savings with relatively high performance overhead as compared to running workloads at high speed and then transitioning into <b>low</b> <b>power</b> <b>state.</b> The primary reasons for this are recent advancements in platform and CPU architectures such as sophisticated memory subsystem design, and more efficient <b>low</b> <b>power</b> <b>state</b> support. We justify our analysis with measurements on {{a state of the}} art system using benchmarks ranging from very CPU intensive to memory intensive workloads. ...|$|R
50|$|The {{mobile device}} {{and the network}} {{negotiate}} phases in which data transfer occurs. During other times the device turns its receiver off and enters a <b>low</b> <b>power</b> <b>state.</b>|$|R
50|$|SWSUSP {{helps to}} drive the system to a <b>low</b> <b>power</b> <b>state</b> (called suspend) when not {{actively}} used while providing the ability {{to return to the}} same state as before suspend (called resume/restore).|$|R
40|$|Partitioning {{has been}} shown to be an {{effective}} method for synthesis of <b>low</b> <b>power</b> finite <b>state</b> machines. In this approach, an FSM is partitioned into two or more coupled sub-machines such that most of the time only one of the sub-machines is active. In this paper, we present a GA based approach for simultaneous partitioning and state assignment of finite <b>state</b> machines with <b>power</b> reduction as the objective. Experimental results obtained compare favorably with previous works on FSM partitioning, <b>low</b> <b>power</b> <b>state</b> assignment as well as using GA for partitioning alone. 1...|$|R
40|$|Power {{consumption}} {{has become}} a critical issue in designing computer systems. Dynamic power management is an approach that aims to reduce power consumption at system level by selectively placing components into <b>low</b> <b>power</b> <b>states.</b> Time-out and prediction based policies are often adopted in practical systems. However, they have to accurately determine the time in <b>low</b> <b>power</b> <b>state</b> and otherwise the saved power consumption is not worth the loss of performance. In this paper, a power management for multiprocessor systems is proposed to optimally reduce the power consumption of multiple processors. The key feature of the proposed power management is that how long to place a processor into <b>low</b> <b>power</b> <b>state</b> is determined in advance but not decided when a processor becomes idle. Thus, many off-time quanta are pre-determined beforehand. The proposed power management schedules the off-time quanta to processors and a processor is placed into <b>low</b> <b>power</b> <b>state</b> if an off-time quantum is assigned to it. It seems that processors execute special tasks which just reduce the power supplied to them. Hence, the off-time quanta are also named sleep tasks, which are virtual and injected into the original task traffic. By doing so, the inaccurate time length of sleep tasks hardly impacts on the performance, because if a processor is blocked by a sleep task there is another one available except that all the others are blocked at the same time. Then a probabilistic policy is also proposed to optimally assign sleep tasks from the waiting queue to the processors for minimum loss of performance. In the proposed policy, high priority is given to real tasks and sleep tasks are serviced only on necessity. The analysis of the probabilistic policy is performed on a queueing model and shows that the policy is asymptotically optimal. The proposed power management and policy are further examined in empirical studies...|$|R
40|$|This {{proposal}} addresses an inconsistency between REQUEST SENSE {{as described}} in SAT r 2 and SPC- 3 r 21 d regarding ASC’s to be used when the device is in a <b>low</b> <b>power</b> <b>state.</b> In addition, text is clarified which implied that the translator sends a REQUEST SENSE command to the ATA device (which is does not). Documents Affecte...|$|R
50|$|IDLE - Used {{when the}} {{connection}} has dropped or no connection can be found. This is the <b>lowest</b> <b>power</b> consumption <b>state.</b>|$|R
50|$|Nevertheless, {{trade-offs}} apply: running 32-bit arithmetic on an 8-bit chip {{could end}} up using more power, as the chip must execute software with multiple instructions. Modern microprocessors go into <b>low</b> <b>power</b> <b>states</b> when possible, and an 8-bit chip running 32-bit calculations would be active for more cycles. This creates a delicate balance between software, hardware and use patterns, plus costs.|$|R
5000|$|Nvidia {{also claims}} an 8 to 10 times {{performance}} increase in PureVideo Feature Set E video decoding {{due to the}} video decoder cache paired with increases in memory efficiency. However, H.265 is not supported for full hardware decoding, relying on a mix of hardware and software decoding. When decoding video, a new <b>low</b> <b>power</b> <b>state</b> [...] "GC5" [...] is used on Maxwell GPUs to conserve power.|$|R
50|$|In a <b>low</b> <b>power</b> <b>state,</b> each CPU {{would have}} only {{consumed}} about 5 Watts (or even less when switching to even lower <b>power</b> <b>states),</b> making for 10 Watts needing to be cooled. But when run in full power mode (as to circumvent the cache problem), each CPU does consume about 50 Watts making {{for a total of}} 100 Watts—essentially the upper limit for which the cooling system was designed, making the fans run at full speed, even when the machine is mostly idle.|$|R
5000|$|Many {{low-power}} electronics {{systems are}} designed as fully static systems—such as, for example, the Psion Organiser, the TRS-80 Model 100, and the Galileo spacecraft. In such a fully static system, the processor has a static core and data {{is stored in}} static RAM, rather than dynamic RAM. Such design features allow the entire system to be [...] "paused" [...] indefinitely in a <b>low</b> <b>power</b> <b>state,</b> and then instantly resumed when needed.|$|R
40|$|Mobile and {{embedded}} platforms {{have experienced}} dramatic advances in capabilities, {{largely due to}} the development of associated peripheral devices for storage and communication. The incorporation of these I/O devices has increased the overall power envelope of these platforms. In fact, system-level power consumption of mobile platforms is often dominated by peripheral devices. Since battery technologies alone have been unable to provide the lifetimes required by many platforms, in order to conserve energy, most devices provide the ability to transition into <b>low</b> <b>power</b> <b>states</b> during idle periods. The resulting energy savings are heavily dependent upon the lengths and number of idle periods experienced by a device. This paper presents an infrastructure designed to take advantage of device <b>low</b> <b>power</b> <b>states</b> by increasing the burstiness of device accesses and idle periods to provide a reduced power profile, and thereby an improvement in battery life. Our approach combines compiler-based source modifications with operating system support to implement a dynamic solution for enhanced energy consumption. We evaluate our infrastructure on an XScale-based embedded platform with a Linux implementation. 1...|$|R
40|$|Abstract—Smartphone based web {{browsing}} wastes a lot {{of power}} when downloading webpages due to the special characteristics of the 3 G radio interface. In this paper, we identify these special characteristics, and address power consumption issues through two novel techniques. First, we reorganize the computation sequence of the web browser when loading a webpage, so that the web browser can first run the computations that will generate new data transmissions and retrieve these data from the web server. Then, the web browser can put the 3 G radio interface into <b>low</b> <b>power</b> <b>state,</b> release the radio resource, and then run the remaining computations. Second, we introduce a practical data mining based method to predict the user reading time of webpages, based on which the smartphone can switch to <b>low</b> <b>power</b> <b>state</b> when the reading time is longer than a threshold. To demonstrate the effectiveness of our energy-aware approaches, we develop a testbed with Android phones on T-Mobile UMTS network. Experimental results show that our approach can reduce the power consumption of smartphone by more than 30 % during web browsing, and reduce the webpage loading time by 17 %. I...|$|R
40|$|This paper {{introduces}} {{an efficient}} hardware approach {{to reduce the}} register file energy consumption by turning unused registers into a <b>low</b> <b>power</b> <b>state.</b> Bypassing the register fields of the fetch instruction to the decode stage allows the identification of registers required by the current instruction (instruction predecode) and allows the control logic to turn them back on. They are put into the low-power state after the instruction use. This technique achieves an 85 % energy reduction with no performance penalty...|$|R
40|$|The green {{networking}} {{research area}} defines new mechanisms {{to modify the}} network configuration {{as a consequence of}} traffic behavior, so that energy saving can be obtained during low traffic hours. These solutions exploit traffic engineering techniques able to modify network paths so that a subset of network elements i. e, links or routers, can pass in a <b>low</b> <b>power</b> <b>state.</b> The great part of proposed solutions relies on links standby while just few of them consider nodes standby as a feasible solution...|$|R
5000|$|Wake-on-LAN {{can be a}} {{difficult}} technology to implement, because it requires appropriate BIOS, network card and, sometimes, operating system and router support to function reliably. In some cases, hardware may wake from one <b>low</b> <b>power</b> <b>state</b> but not from others. This means that due to hardware issues the computer may be waking up from the [...] "fully off state" [...] (S5) but doesn't wake from sleep or hibernation or vice versa. Also, {{it is not always}} clear what kind of magic packet a NIC expects to see.|$|R
40|$|Smartphone based web {{browsing}} wastes a lot {{of power}} when downloading webpages due to the special characteristics of the 3 G radio interface. In this paper, we identify these spe-cial characteristics, and address the power consumption is-sues in smartphone web browsing through two novel tech-niques. First, we reorganize the computation sequence of the web browser when loading a webpage, so that the web browser can first run the computations that will generate new data transmissions and retrieve these data from the web server. Then, the web browser can put the 3 G radio interface into <b>low</b> <b>power</b> <b>state,</b> release the radio resource, and then run the remaining computations. Second, we introduce a practical data mining based method to predict the user read-ing time of webpages, based on which the smartphone can switch to <b>low</b> <b>power</b> <b>state</b> when the reading time is longer than a threshold. To demonstrate the effectiveness of our energy-aware approaches, we develop a testbed with An-droid phones on T-Mobile UMTS network. Experimental re-sults show that our approach can reduce the power consump-tion of the smartphone by more than 30 % during web brows-ing. Moreover, our solution can further reduce the webpage loading time and increase the network capacity. 1...|$|R
40|$|This thesis studies {{intelligent}} on-demand {{radio resource}} provisioning involving sleep mode operation in ultra Small Cell Networks (SCNs). Sleep modes are <b>low</b> <b>power</b> <b>states</b> of base stations. The {{purpose of the}} research is to investigate how appropriate traffic information can be adopted in sleep mode operation schemes for SCNs with different architectures. A novel protocol-friendly sleep mode operation algorithm based on Adaptive Traffic Perception is proposed for distributed SCN architectures. It is proved robust to different SCN layouts with {{the reduction in the}} average power consumption of base stations being more than 35...|$|R
50|$|PC power {{management}} {{refers to the}} mechanism for controlling the power use of personal computer hardware. This is typically {{through the use of}} software that puts the hardware into the <b>lowest</b> <b>power</b> demand <b>state</b> available. It is an aspect of Green computing.|$|R
5000|$|Because {{the exact}} {{meaning of the}} standby symbol on a given device may be unclear until the control is tried, it has been {{proposed}} that a separate sleep symbol, a waning moon, instead be used to indicate a <b>low</b> <b>power</b> <b>state.</b> Proponents include the California Energy Commission and the Institute of Electrical and Electronics Engineers. Under this proposal, the older standby symbol would be redefined as a generic [...] "power" [...] indication, {{in cases where the}} difference between it and the other power symbols would not present a safety concern. This alternative symbolism was published as IEEE standard 1621 on December 8, 2004.|$|R
40|$|Abstract:- Reducing power {{consumption}} {{has become one}} of the major goals in designing electronic systems for mobile devices and embedded applications. One of the most promising approaches, called Dynamic Power Management (DPM), is to adapt at run-time <b>power</b> <b>states</b> of system components by means of changing the operating voltage of a processor as well as switching I/O devices to low-power sleeping states during periods of inactivity. This work is aimed to provide innovative strategies to enhance the capabilities of a potential Power Manager that acts at the operating system level. In particular, several low-power process scheduling policies, increasing the possibility to conveniently force devices into <b>low</b> <b>power</b> <b>states,</b> have been implemented in the Linux operating system to verify their feasibility and to analyze their benefits and drawbacks...|$|R
50|$|In some cases, {{the heat}} {{released}} by the chain reaction will cause the fissile (and other nearby) materials to expand. In such cases, the chain reaction can either settle into a <b>low</b> <b>power</b> steady <b>state</b> or may even become either temporarily or permanently shut down (subcritical).|$|R
40|$|In {{real-time}} systems, Dynamic Power Management (DPM) {{techniques have}} traditionally {{centered on the}} CPU with less focus given to I/O. However, I/O-based DPM techniques have been popularly researched in non-real-time systems. These techniques focus on switching I/O devices to <b>low</b> <b>power</b> <b>states</b> based on some policy. These methods, however, are not applicable to realtime environments because of the non-deterministic nature of the policies. Recently, scheduling techniques to reduce power consumption of I/O devices in real-time systems have emerged. In this paper, we propose an online task scheduling algorithm, Slack Utilization for Reduced Energy (SURE), which utilizes slack in periodic task systems to reduce power consumption in I/O devices. ...|$|R
40|$|In a {{synchronous}} finite {{state machine}} (FSM), huge current peaks are often observed {{at the moment of}} <b>state</b> transition. Previous <b>low</b> <b>power</b> <b>state</b> encoding algorithms focus on the reduction of switching activities of state registers (i. e., state bits). However, even though the switching state registers are the same, different combinations of switching directions still result in different peak currents. Based on that observation, in this paper, we propose the first approach to re-encode an FSM by considering the switching directions of state registers in order to minimize the peak current caused by the state transition. Experimental data consistently show that the peak current is reduced with no penalty...|$|R
40|$|Upcoming {{telecommunication}} networks {{are expected to}} lower energy requirements of current infrastructures, especially at the network edge. That necessarily entails cutting off energy wasted when devices are active, yet idle, just to maintain their presence on the network. To this purpose, the concept of delegating network activity has been introduced to allow devices to enter <b>low</b> <b>power</b> <b>states</b> without breaking their connectivity. This paper addresses the client-side architecture for delegating routine network tasks to the proper service. It depicts the logical framework for this purpose and identifies its main logical elements and their function; further, it discusses their integration with power management capability today available in most computing devices...|$|R
5000|$|First {{generation}} Maxwell GM107/GM108 provides few consumer-facing additional features; Nvidia instead {{focused on}} power efficiency. Nvidia's video encoder, NVENC, is 1.5 to 2 {{times faster than}} on Kepler-based GPUs meaning it can encode video at 6 to 8 times playback speed. Nvidia also claims an 8 to 10 times performance increase in PureVideo Feature Set E video decoding due to the video decoder cache paired with increases in memory efficiency. However, HEVC is not supported for full hardware decoding, relying on a mix of hardware and software decoding. When decoding video, a new <b>low</b> <b>power</b> <b>state</b> [...] "GC5" [...] is used on Maxwell GPUs to conserve power.|$|R
40|$|IN this paper, the {{realization}} of <b>low</b> <b>power</b> finite <b>state</b> machines (FSMs) on FPGAs using decomposition techniques is addressed. The original FSM {{is divided into two}} submachines using a probabilistic criterion. Only one submachine is active at a time, meanwhile the other is disabled to save power. Differen...|$|R
40|$|Abstract—Modern {{enterprises}} employ {{hundreds of}} workstations for daily business operations, which consume {{a lot of}} energy and thus have significant operating costs. To reduce such costs, dynamic energy management is often employed. However, dynamic energy management, especially that for disks, introduces delays when an accessed disk is in a <b>low</b> <b>power</b> <b>state</b> and needs to be brought into active state. In this paper, we propose System-wide Alternative Retrieval of Data (SARD) that exploits the large number of machines in an enterprise environment to transparently retrieve binaries from other nodes, thus avoiding access delays when the local disk is in a <b>low</b> <b>power</b> mode. SARD uses a software-based approach to reduce spin-up delays while eliminating the need for major operating system changes, custom buffering, or shared memory infrastructure. I...|$|R
5000|$|Similar in {{some ways}} to [...] is the [...] (SToP, opcode [...] ) instruction, which {{completely}} shuts down the MPU while waiting for a single interrupt input. When [...] is executed, the MPU halts its internal clock (but does retain all data in its registers) and enters a <b>low</b> <b>power</b> <b>state.</b> The MPU is brought out of this state by pulling its reset input pin ( [...] , which is classified as an interrupt input) low. Execution will then resume at the address stored at locations , the hardware reset vector. As with , [...] is intended for use in <b>low</b> <b>power</b> embedded applications where {{long periods of time}} may elapse between events that require MPU attention and no other processing is required. [...] would not be used in normal programming, as it would result in total cessation of processing.|$|R
