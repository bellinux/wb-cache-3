62|1009|Public
2500|$|A {{lawyer for}} Chief Inspector Azilah Hadri says {{the type of}} {{explosives}} used {{in the murder of}} Mongolian national Altantuya Shaariibuu is not in the stock of federal police headquarters Bukit Aman. “Azilah's <b>log</b> <b>record</b> from Bukit Aman shows that he was only issued with a Glock pistol and magazines. Hence, there is a question as to how this type of explosive was allegedly used," [...] said lawyer Hazman Ahmad. In addition, both Sirul and Azilah are not trained to handle explosives and bombs such as the C4.|$|E
5000|$|Compensation <b>Log</b> <b>Record</b> {{notes the}} {{rollback}} {{of a particular}} change to the database. Each corresponds with exactly one other Update <b>Log</b> <b>Record</b> (although the corresponding update <b>log</b> <b>record</b> is not typically stored in the Compensation <b>Log</b> <b>Record).</b> It includes this extra information: ...|$|E
5000|$|... undoLSN: This is a {{reference}} to the oldest <b>log</b> <b>record</b> of the oldest in-progress transaction. This is the oldest <b>log</b> <b>record</b> needed to undo all in-progress transactions.|$|E
5000|$|The Dynamic Logs—The Vinyl Reunion (Dynamic <b>Log</b> <b>Records,</b> 1985, LP) ...|$|R
30|$|Note that if {{the role}} of Leader is {{frequently}} switched in different members, the <b>log</b> <b>records</b> of committed transactions will be lost. To prevent this, it is not until the backup node ensures that the received <b>log</b> <b>records</b> which are integrated from the committed LSN and whose LSN’s are greater than the local last LSN that Follower can discard <b>log</b> <b>records</b> after the committed LSN. In other words, the Follower buffers the new log entries until these data cover the LSN range (local_committed_LSN, local_last_LSN], and then replaces the corresponding log entries in disk atomically. The main steps are illustrated in Procedure 2.|$|R
30|$|When a {{restarting}} member {{finds the}} status of system is after_election and its election role is Follower, it has {{to ensure that the}} state of local data is consistent with the Leader. Since the Follower cannot judge whether the <b>log</b> <b>records</b> whose LSN is greater than the committed LSN should be applied to the local memory table, it must get necessary information from the Leader. In order to reduce the network overhead, we implement a recovery mechanism as below. To begin with, the Follower scans log file in disk to update local variables, e.g., local last LSN, committed LSN. As described above, the committed LSN is the max committed LSN stored in the log file. Then, it starts to replay local <b>log</b> <b>records</b> whose LSN is not greater than the committed LSN, and it discards the remaining <b>log</b> <b>records.</b> At the same time, the Follower reports its committed LSN to the Leader. When the Leader receives this message, it sends the corresponding <b>log</b> <b>records</b> after that LSN to the Follower. Finally, the Follower can receive new <b>log</b> <b>records</b> and refresh the committed LSN, which triggers itself to replay the log continuously.|$|R
50|$|Type: Describes {{the type}} of {{database}} <b>log</b> <b>record.</b>|$|E
50|$|Information {{about the}} actual changes that {{triggered}} the <b>log</b> <b>record</b> to be written.|$|E
50|$|Transaction ID number: A {{reference}} to the database transaction generating the <b>log</b> <b>record.</b>|$|E
5000|$|At 2.5pm, the Ships <b>Log</b> <b>records</b> ‘Departed this life, Frank Toovey Lake, Navigating Midshipman.’ ...|$|R
5000|$|Journald Agent {{provides}} {{access to}} <b>logging</b> <b>records</b> through the standard OpenLMI interface. It is a client of systemd's journald service, accessing the journald records in several ways and providing a way to store new <b>log</b> <b>records.</b> Journald, as a structured logging system, stores supplemental information along each record, {{making it easier to}} find and extract information from the resulting log files.|$|R
40|$|International audienceTraditional {{access control}} {{mechanisms}} prevent illegal access by controlling access right before executing an action; they belong to a class of a priori security solutions and, {{from this point of}} view, they have some limitations, like inflexibility in unanticipated circumstances. By contrast, a posteriori mechanisms enforce policies not by preventing unauthorized access, but rather by deterring it. Such access control needs evidence to prove violations. Evidence is derived from <b>log</b> <b>records,</b> which trace each user's actions. Efficiency of violation detection mostly depends on the compliance of <b>log</b> <b>records</b> with the access and usage control policy. In order to develop an efficient method for finding these violations, we propose restructuring <b>log</b> <b>records</b> according to a security policy model. We illustrate our methodology by applying it to the healthcare domain, taking care of the Integrating the Healthcare Enterprise (IHE) framework, particularly its basic security profile, ATNA (Audit Trail and Node Authentication). This profile defines <b>log</b> <b>records</b> established on the analysis of common health practice scenarios. We analyze and establish how ATNA <b>log</b> <b>records</b> can be refined in order to be integrated into an a posteriori access and usage control process, based on an expressive and contextual security policy like the OrBAC (Organization Based Access Control) policy...|$|R
5000|$|Update <b>Log</b> <b>Record</b> notes {{an update}} (change) to the database. It {{includes}} this extra information: ...|$|E
50|$|Prev LSN: A link {{to their}} last <b>log</b> <b>record.</b> This implies {{database}} logs are constructed in linked list form.|$|E
50|$|For that we run {{backwards}} {{through the}} log for each transaction in the TT (those runs can of course be combined into one) using the Previous Sequence Number {{fields in the}} records. For each record we undo the changes (using {{the information in the}} Undo field) and write a compensation <b>log</b> <b>record</b> to the log file. If we encounter a Begin Transaction record we write an End <b>Log</b> <b>record</b> for that transaction.|$|E
30|$|<b>Log</b> <b>records</b> {{are stored}} on disk continuously. Therefore, {{there are no}} holes in log files.|$|R
5000|$|... set up test {{verification}} clauses {{that create}} <b>log</b> <b>records</b> for 'predicted good'/'predicted bad' conditions (VERIFY); ...|$|R
50|$|Durability can be {{achieved}} by flushing the transaction's <b>log</b> <b>records</b> to non-volatile storage before acknowledging commitment.|$|R
50|$|During a {{recovery}} or while undoing {{the actions of}} an aborted transaction {{a special kind of}} <b>log</b> <b>record</b> is written, the Compensation <b>Log</b> <b>Record</b> (CLR), to record that the action has already been undone. CLRs are of the form (Sequence Number, Transaction ID, Page ID, Redo, Previous Sequence Number, Next Undo Sequence Number). The Redo field contains application of Undo field of reverted action, and the Undo field is omitted because CLR is never reverted.|$|E
5000|$|... undoNextLSN: This field {{contains}} the LSN {{of the next}} <b>log</b> <b>record</b> {{that is to be}} undone for transaction that wrote the last Update Log.|$|E
5000|$|A Sawzall script has {{a single}} input (a <b>log</b> <b>record)</b> and can output only by {{emitting}} to tables. The script can have no other side-effects.|$|E
5000|$|... writing {{transaction}} <b>log</b> <b>records</b> {{from the}} in-memory log buffer to the transaction log files on disk ...|$|R
3000|$|... (B*))) without storing {{matching}} <b>log</b> <b>records</b> locally. Thus, CAS cannot {{learn the}} user password and fingerprint data.|$|R
5000|$|The Leonard Burgess <b>Log</b> <b>records</b> [...] "Nig" [...] {{giving birth}} to 5 kittens at 1130pm 24 December 1903.|$|R
50|$|We create log {{records of}} the form (Sequence Number, Transaction ID, Page ID, Redo, Undo, Previous Sequence Number). The Redo and Undo fields keep {{information}} about the changes this <b>log</b> <b>record</b> saves and how to undo them. The Previous Sequence Number is {{a reference to the}} previous <b>log</b> <b>record</b> that was created for this transaction. In the case of an aborted transaction, it's possible to traverse the log file in reverse order using the Previous Sequence Numbers, undoing all actions taken within the specific transaction.|$|E
5000|$|... redoLSN: This is a {{reference}} to the first <b>log</b> <b>record</b> that corresponds to a dirty page. i.e. the first update that wasn't flushed at checkpoint time. This is where redo must begin on recovery.|$|E
50|$|Log Sequence Number (LSN): A unique ID for a <b>log</b> <b>record.</b> With LSNs, logs can be {{recovered}} in constant time. Most LSNs are assigned in monotonically increasing order, which {{is useful in}} recovery algorithms, like ARIES.|$|E
40|$|A log is a {{collection}} of record of events that occurs within an organization containing systems and network. These logs are very important for any organization, because log file will able to record all user activities. As this log files plays vital role and also it contains sensitive information, it should be maintained highly secure. So, management and securely maintenance of <b>log</b> <b>records</b> are very tedious task. However, deploying such a system for high security and privacy of <b>log</b> <b>records</b> is an overhead for an organization and also it requires additional cost. Many techniques have been design so far for security of <b>log</b> <b>records.</b> The alternative solution is to maintaining <b>log</b> <b>records</b> over a cloud database. Log files over cloud environment leads to challenges about privacy, confidentiality and integrity of log files. In this paper, we propose highly secured cloud rendered log management and also use of some cryptographic algorithms for dealing the issues to access a cloud based data storage. To the best of knowledge, this is the strong work to provide a complete solution to the cloud based secure log management problem...|$|R
50|$|CLFS {{supports}} both dedicated logs, {{as well as}} multiplexed logs. A dedicated log {{contains a}} single stream of <b>log</b> <b>records</b> whereas multiplexed <b>log</b> contain multiple streams, each stream for a different application. Even though a multiplexed log has multiple streams, logs are flushed to the streams sequentially, in a single batch. CLFS can allocate space {{for a set of}} <b>log</b> <b>records</b> ahead-of-time (before the logs are actually generated) to make sure the operation does not fail due to lack of storage space.|$|R
50|$|Four {{types of}} log streams are specified: alarm (ITU X.733 and ITU X.736 based <b>log</b> <b>records),</b> {{notification}} (ITU X.730 and ITU X.731 based <b>log</b> <b>records),</b> system and application. The application type {{is used by}} applications to define application-specific log streams. There is exactly one predefined log stream {{for each of the}} alarm, notification, and system log stream types in an SA Forum cluster. User applications are allowed to use any of the predefined streams or create new application-specific log streams.|$|R
50|$|A <b>log</b> <b>record</b> in a CLFS {{stream is}} first placed to Log I/O Block in a buffer in system memory. Periodically blocks are flushed to stable storage devices. On the storage device, a log {{contains}} {{a set of}} Containers, which are allocated contiguously, each containing multiple Log I/O Blocks. New log records are appended to the present set. Each record is identified by a Log Sequence Number (LSN), an increasing 32-bit sequence number. The LSN and other metadata are stored in the record header. The LSN encodes the identifier of the container, the offset to the record and the identifier of the record - this information is used to access the <b>log</b> <b>record</b> subsequently. However, the container identifiers are logical identifiers, they must be mapped to physical containers. The mapping is done by CLFS itself.|$|E
5000|$|A {{lawyer for}} Chief Inspector Azilah Hadri says {{the type of}} {{explosives}} used {{in the murder of}} Mongolian national Altantuya Shaariibuu is not in the stock of federal police headquarters Bukit Aman. “Azilah's <b>log</b> <b>record</b> from Bukit Aman shows that he was only issued with a Glock pistol and magazines. Hence, there is a question as to how this type of explosive was allegedly used," [...] said lawyer Hazman Ahmad. In addition, both Sirul and Azilah are not trained to handle explosives and bombs such as the C4.|$|E
50|$|Running {{through the}} log file, we check for each entry, whether the {{modified}} page P on the entry {{exists in the}} DPT table. If it doesn't, then {{we do not have}} to worry about redoing this entry since the data persists on the disk. If page P exists in the DPT table, then we see whether the Sequence Number in the DPT is smaller than the Sequence Number of the <b>log</b> <b>record</b> (i.e. whether the change in the log is newer than the last version that was persisted). If it isn't, then we don't redo the entry since the change is already there. If it is, we fetch the page from the database storage and check the Sequence Number stored on the page to the Sequence Number on the <b>log</b> <b>record.</b> If the former is smaller than the latter, the page needs to be written to the disk. That check is necessary because the recovered DPT is only a conservative superset of the pages that really need changes to be reapplied. Lastly, when all the above checks are finished and failed, we reapply the redo action and store the new Sequence Number on the page. It is also important for recovery from a crash during the Redo phase, as the redo isn't applied twice to the same page.|$|E
5000|$|... message_tag -- {{provides}} a custom tag, up to 8 bytes in length, that {{is applied to}} all trace and <b>log</b> <b>records</b> for the identified request.|$|R
50|$|All <b>log</b> <b>records</b> {{include the}} general log {{attributes}} above, and also other attributes {{depending on their}} type (which is recorded in the Type attribute, as above).|$|R
50|$|Lam is {{also the}} founder of her own <b>record</b> label, <b>LOG</b> <b>Records.</b> It was {{represents}} artists in the Dance, EDM, Hip-Hop, Rock, Pop and R&B genres.|$|R
