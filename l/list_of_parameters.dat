142|10000|Public
25|$|Positional {{parameters}} are the typical ordered <b>list</b> <b>of</b> <b>parameters</b> that most programming languages use. All parameters {{may also be}} passed by using their name in an unordered way. A named-only parameter can only be passed by specifying its name (that is, it never captures a positional argument), and are indicated with a leading : character. Slurpy parameters (indicated by an * before the parameter name) are Perl 6's tool for creating variadic functions. A slurpy hash will capture remaining passed-by-name parameters, whereas a slurpy array will capture remaining passed-by-position parameters.|$|E
500|$|The COALESCE {{function}} {{accepts a}} <b>list</b> <b>of</b> <b>parameters,</b> returning the first non-Null value from the list: ...|$|E
500|$|Unusually for a {{dynamically}} typed language, PHP supports type declarations on function parameters, {{which are}} enforced at runtime. This {{has been supported}} for classes and interfaces since PHP5.0, for arrays since PHP5.1, for [...] "callables" [...] since PHP 5.4, and scalar (integer, float, string and boolean) types since PHP7.0. PHP7.0 also has type declarations for function return types, expressed by placing the type name after the <b>list</b> <b>of</b> <b>parameters,</b> preceded by a colon. For example, the getAdder function from the earlier example could be annotated with types like so in PHP7: ...|$|E
30|$|The <b>list</b> <b>of</b> input <b>parameters</b> <b>of</b> CIGALE {{is shown}} in Table 1.|$|R
5000|$|The {{following}} is <b>list</b> <b>of</b> X.3 <b>parameters</b> {{associated with a}} PAD: ...|$|R
30|$|A {{complete}} <b>list</b> <b>of</b> the <b>parameters</b> and variants {{is shown}} in Appendix 3, Table 14.|$|R
2500|$|Commands {{took the}} form of a keyword {{followed}} by a <b>list</b> <b>of</b> <b>parameters</b> separated by spaces or special characters. Similar to a Unix shell builtin, if an internal command was recognized, it was carried out by the CCP itself. Otherwise it would attempt to find an executable file on the currently logged disk drive and (in later versions) user area, load it, and pass it any additional parameters from the command line. These were referred to as [...] "transient" [...] programs. On completion, CP/M would reload the part of the CCP that had been overwritten by application programs — this allowed transient programs a larger memory space.|$|E
5000|$|The [...] {{function}} {{accepts a}} <b>list</b> <b>of</b> <b>parameters,</b> returning the first non-Null value from the list: ...|$|E
5000|$|Where :params is the <b>list</b> <b>of</b> <b>parameters</b> {{the code}} can take. This {{means that the}} Smalltalk code: ...|$|E
5000|$|The above {{example is}} an {{expression}} that evaluates to a first-class function. The symbol [...] creates an anonymous function, given a <b>list</b> <b>of</b> <b>parameter</b> names, [...] - [...] just a single argument in this case, and an expression that is evaluated as {{the body of the}} function, [...] Anonymous functions are sometimes called lambda expressions.|$|R
5000|$|... /etc/fstab (Linux) or /etc/vfstab (Solaris) - <b>list</b> <b>of</b> default <b>parameters</b> {{for each}} file system {{including}} quota status.|$|R
2500|$|The above {{example is}} an {{expression}} that evaluates to a first-class function. The symbol lambda creates an anonymous function, given a <b>list</b> <b>of</b> <b>parameter</b> names, (x) [...] just a single argument in this case, and an expression that is evaluated as {{the body of the}} function, (* x x). Anonymous functions are sometimes called lambda expressions.|$|R
50|$|Each menu item, {{rather than}} being {{instantiated}} with a <b>list</b> <b>of</b> <b>parameters,</b> is instead done with a Command object.|$|E
5000|$|There are {{two types}} of macros, object-like and function-like. Object-like macros do not take parameters; function-like macros do (although the <b>list</b> <b>of</b> <b>parameters</b> may be empty). The generic syntax for declaring an {{identifier}} as a macro of each type is, respectively: ...|$|E
50|$|Each plugin is {{described}} by a <b>list</b> <b>of</b> <b>parameters</b> and supported inputs and output. The host may execute various actions, for example to signal that a parameter value has changed or that {{a portion of a}} film frame has to be rendered.|$|E
5000|$|A <b>listing</b> <b>of</b> various <b>parameter</b> {{sets for}} Ring Learning with Errors Signatures is given at ringlwe.info (click here) ...|$|R
5000|$|An FCL {{program is}} a <b>list</b> <b>of</b> formal <b>parameter</b> declarations, an entry label, and a {{sequence}} of basic blocks: ...|$|R
5000|$|... ap pops a closure and a <b>list</b> <b>of</b> <b>parameter</b> {{values from}} the stack. The closure {{is applied to}} the {{parameters}} by installing its environment as the current one, pushing the <b>parameter</b> <b>list</b> in front <b>of</b> that, clearing the stack, and setting C to the closure's function pointer. The previous values of S, E, and the next value of C are saved on the dump.|$|R
5000|$|Too many parameters: a long <b>list</b> <b>of</b> <b>parameters</b> {{is hard to}} read, {{and makes}} calling and testing the {{function}} complicated. It may indicate {{that the purpose of}} the function is ill-conceived and that the code should be refactored so responsibility is assigned in a more clean-cut way.|$|E
5000|$|It is, of course, {{perfectly}} {{possible to}} generate the above code [...] "inline" [...] using a single assembler macro statement, specifying just four or five operands (or alternatively, {{make it into a}} library subroutine, accessed by a simple call, passing a <b>list</b> <b>of</b> <b>parameters),</b> making the optimization readily accessible to inexperienced programmers.|$|E
50|$|In {{computer}} programming, a parameter is {{a special}} kind of variable, used in a subroutine to refer to one of the pieces of data provided as input to the subroutine. These pieces of data are called arguments. An ordered <b>list</b> <b>of</b> <b>parameters</b> is usually included in the definition of a subroutine, so that, each time the subroutine is called, its arguments for that call can be assigned to the corresponding parameters.|$|E
30|$|There are {{not many}} {{parameter}} need to be tuned in PSO. Here is a <b>list</b> <b>of</b> the <b>parameters</b> and their typical values.|$|R
3000|$|In this paper, {{we are not}} {{interested}} in describing properties arising for specific values <b>of</b> those <b>parameters,</b> but instead in generic properties that hold on sets <b>of</b> <b>parameters.</b> More specifically, we denote the <b>list</b> <b>of</b> all <b>parameters</b> [...]...|$|R
3000|$|... p). The same {{resource}} {{can be used}} to get {{the current}} status of the channel in use of a node, receiving a <b>list</b> <b>of</b> radio <b>parameters</b> (r [...]...|$|R
5000|$|... actor ID (...) In ==> Out : action In: a ==> Out: a endendThe {{first line}} {{declares}} the actor name, {{followed by a}} <b>list</b> <b>of</b> <b>parameters</b> (which is empty, in this case), and the declaration of the input and output ports. The input ports are those {{in front of the}} ==> sign (here only one port named In), the output ports are those after it (in this case only one port named Out).|$|E
5000|$|Positional {{parameters}} are the typical ordered <b>list</b> <b>of</b> <b>parameters</b> that most programming languages use. All parameters {{may also be}} passed by using their name in an unordered way. A named-only parameter can only be passed by specifying its name (that is, it never captures a positional argument), and are indicated with a leading [...] character. Slurpy parameters (indicated by an [...] before the parameter name) are Perl 6's tool for creating variadic functions. A slurpy hash will capture remaining passed-by-name parameters, whereas a slurpy array will capture remaining passed-by-position parameters.|$|E
5000|$|H2 is the free-list. Procedures {{which need}} to {{allocate}} memory grab cells off of H2; procedures which are finished with memory {{put it on}} H2. On entry to a function, the <b>list</b> <b>of</b> <b>parameters</b> is given in H0; on exit, the results should be returned in H0. Many procedures return a boolean result indicating success or failure, which is put in H5. Ten cells, W0-W9, are reserved for public working storage. Procedures are [...] "morally bound" [...] (to quote the CACM article) to save and restore the values of these cells.|$|E
30|$|The QoE/QoS mapping {{solutions}} {{presented in}} the last section are not sufficient {{to deal with the}} heterogeneity and extensibility issues present in QoS management. As previously presented, two significant and challenging issues are yet to be fully addressed: (i) there is an expanding <b>list</b> <b>of</b> QoE <b>parameters,</b> and (ii) different NSPs can adopt different network performance parameters to specify QoS requirements. An ideal QoS management solution should support both the QoS specification allowing the use <b>of</b> an extensible <b>list</b> <b>of</b> QoS <b>parameters</b> and the automatic mapping <b>of</b> these <b>parameters</b> to those understood and controlled by the NSPs.|$|R
5000|$|... xargs is {{a command}} on Unix and most Unix-like {{operating}} systems {{used to build}} and execute command lines from standard input. Commands such as [...] and [...] can accept the standard input as a parameter, or argument by using a pipe. However, others such as [...] and [...] disregard the standard input stream and rely solely on the arguments found after the command. Additionally, under the Linux kernel before version 2.6.23, and under many other Unix-like systems, arbitrarily long <b>lists</b> <b>of</b> <b>parameters</b> cannot be passed to a command, so [...] breaks the <b>list</b> <b>of</b> arguments into sublists small enough to be acceptable.|$|R
3000|$|Recognition <b>of</b> {{uncertain}} <b>parameters</b> There is {{a variety}} of uncertain variables (factors) in building a conceptual reservoir model as needed in a well-testing diagnosis problem. It helps to prepare a <b>list</b> <b>of</b> uncertain <b>parameters</b> {{that are to be}} studied by the experimental design.|$|R
5000|$|... 2. Catalogue. Set {{online in}} March 2002. Being {{a subset of}} the Directory, it {{contains}} a selection of journals that fulfill a series of international quality criteria. Titles are classified according to a previously agreed international quality parameters such as peer review procedures, coverage in international databases, abstracts and keywords in more than one language, international editorial boards, among a total of 33 parameters for printed journals and 36 for electronic journals. The <b>list</b> <b>of</b> <b>parameters</b> met by every title is shown in each record. To date, more than 3,500 journals have been rated and included in this catalogue.|$|E
5000|$|Unusually for a {{dynamically}} typed language, PHP supports type declarations on function parameters, {{which are}} enforced at runtime. This {{has been supported}} for classes and interfaces since PHP 5.0, for arrays since PHP 5.1, for [...] "callables" [...] since PHP 5.4, and scalar (integer, float, string and boolean) types since PHP 7.0. PHP 7.0 also has type declarations for function return types, expressed by placing the type name after the <b>list</b> <b>of</b> <b>parameters,</b> preceded by a colon. For example, the [...] function from the earlier example could be annotated with types like so in PHP 7: ...|$|E
5000|$|Even {{programs}} {{may be considered}} and represented as expressions with operator “procedure” and, at least, two operands, the <b>list</b> <b>of</b> <b>parameters</b> and the body, which is itself an expression with “body” as an operator and a sequence of instructions as operands. Conversely, any mathematical expression {{may be viewed as}} a program. For example, the expression [...] may be viewed as a program for the addition, with [...] and [...] as parameters. Executing this program consists in evaluating the expression for given values of [...] and if they do not have any value—that is they are indeterminates—, the result of the evaluation is simply its input.|$|E
5000|$|In the {{mathematical}} theory of special functions, Schwarz's list or the Schwartz table is the <b>list</b> <b>of</b> 15 cases found by [...] when hypergeometric functions {{can be expressed}} algebraically. More precisely, it is a <b>listing</b> <b>of</b> <b>parameters</b> determining the {{cases in which the}} hypergeometric equation has a finite monodromy group, or equivalently has two independent solutions that are algebraic functions. It lists 15 cases, divided up by the isomorphism class of the monodromy group (excluding the case of a cyclic group), and was first derived by Schwarz by methods of complex analytic geometry. Correspondingly the statement is not directly in terms <b>of</b> the <b>parameters</b> specifying the hypergeometric equation, but in terms of quantities used to describe certain spherical triangles.|$|R
40|$|The {{strategy}} pattern decouples algorithms {{from the}} class that uses them allowing the algorithms to vary independently. It does not, however, allow algorithms to have different parameters. The solution {{presented in this paper}} addresses the case when the algorithms have different sets <b>of</b> <b>parameters,</b> and when the user is allowed to see and modify these parameters for each concrete algorithm before its execution. This is accomplished by introducing special parameter classes which encapsulate algorithm parameters and have certain responsibilities (e. g. boundary values checking). The abstract algorithm class is completely decoupled from parameters letting each concrete algorithm class create its own <b>list</b> <b>of</b> <b>parameter</b> instances which mirrors its parameters. 1...|$|R
50|$|There {{are over}} one hundred {{available}} configuration parameters, which make The Webalizer a highly configurable web traffic analysis application. For a complete <b>list</b> <b>of</b> configuration <b>parameters</b> please refer to the README file shipped with every source or binary distribution.|$|R
