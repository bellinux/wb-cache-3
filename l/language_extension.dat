488|1344|Public
25|$|The {{standard}} compiler releases since 4.6 include front ends for C (gcc), C++ (g++), Objective-C, Objective-C++, Fortran (gfortran), Java (gcj), Ada (GNAT), and Go (gccgo). A popular parallel <b>language</b> <b>extension,</b> OpenMP, is also supported. Version 5.0 {{added support}} for Cilk Plus, and since version 5.1, there is preliminary support for OpenACC.|$|E
2500|$|These {{are usually}} {{provided}} {{in the form of}} program libraries. [...] There are also C++ and Fortran compilers that handle interval data types and suitable operations as a <b>language</b> <b>extension,</b> so interval arithmetic is supported directly.|$|E
2500|$|One {{does not}} have clauses with free {{variables}} in Prolog. In Haskell, {{in the absence of}} the ScopedTypeVariables <b>language</b> <b>extension,</b> all type variables implicitly occur quantified, i.e. a Haskell type a -> a means [...] here.|$|E
40|$|Abstract. This paper {{describes}} the ableJ extensible language frame-work, {{a tool that}} allows one to create new domain-adapted languages by importing domain-specific <b>language</b> <b>extensions</b> into an extensible im-plementation of Java 1. 4. <b>Language</b> <b>extensions</b> may define the syntax, semantic analysis, and optimizations of new language constructs. Java and the <b>language</b> <b>extensions</b> are specified as higher-order attribute gram-mars. We describe several <b>language</b> <b>extensions</b> and their implementation in the framework. For example, one extension embeds the SQL database query language into Java and statically checks for syntax and type er-rors in SQL queries. The tool supports the modular specification of composable <b>language</b> <b>extensions</b> so that programmers can import into Java the unique set of extensions that they desire. When extensions fol-low certain restrictions, they can be composed without requiring any implementation-level knowledge of the <b>language</b> <b>extensions.</b> The tools automatically compose the selected extensions and the Java host lan-guage specification. ...|$|R
40|$|Language {{workbenches}} {{significantly reduce}} the effort for building extensible languages. However, they do not facilitate programmers with built-in debugging support for <b>language</b> <b>extensions.</b> This paper presents an extensible debugger architecture that enables debugging of <b>language</b> <b>extensions.</b> This is established by defining mappings between the base language and the <b>language</b> <b>extensions.</b> We show an implementation of our approach for the mbeddr language workbench. ...|$|R
5000|$|While LINQ is {{primarily}} implemented as a library for [...]NET Framework 3.5, it also defines optional <b>language</b> <b>extensions</b> that make queries a first-class language construct and provide syntactic sugar for writing queries. These <b>language</b> <b>extensions</b> have initially been implemented in C# 3.0, VB 9.0, F# and Oxygene, with other languages like Nemerle having announced preliminary support. The <b>language</b> <b>extensions</b> include: ...|$|R
2500|$|Scheme is a {{functional}} programming language {{and one of the}} two main dialects of the programming language Lisp. [...] Unlike Common Lisp, the other main dialect, Scheme follows a minimalist design philosophy specifying a small standard core with powerful tools for <b>language</b> <b>extension.</b>|$|E
2500|$|Implementations of the {{hygienic}} macro system, {{also called}} syntax-rules, {{are required to}} respect the lexical scoping {{of the rest of}} the language. [...] This is assured by special naming and scoping rules for macro expansion and avoids common programming errors that can occur in the macro systems of other programming languages. [...] R6RS specifies a more sophisticated transformation system, syntax-case, which has been available as a <b>language</b> <b>extension</b> to R5RS Scheme for some time.|$|E
2500|$|This feature {{makes it}} easy to develop {{efficient}} languages within languages. [...] For example, the Common Lisp Object System can be implemented cleanly as a <b>language</b> <b>extension</b> using macros. [...] This means that if an application needs a different inheritance mechanism, it can use a different object system. [...] This is in stark contrast to most other languages; for example, Java does not support multiple inheritance and there is no reasonable way to add it.|$|E
40|$|Abstract. This paper {{describes}} the Java Language Extender frame-work, {{a tool that}} allows one to create new domain-adapted languages by importing domain-specic <b>language</b> <b>extensions</b> into an extensible im-plementation of Java 1. 4. <b>Language</b> <b>extensions</b> may dene the syntax, semantic analysis, and optimizations of new language constructs. Java and the <b>language</b> <b>extensions</b> are specied as higher-order attribute gram-mars. We describe several <b>language</b> <b>extensions</b> and their implementation in the framework. For example, one embeds the SQL database query lan-guage into Java and statically checks for syntax and type errors in SQL queries. The tool supports the modular specication of composable lan-guage extensions so that programmers can import into Java the unique set of extensions that they desire. When extensions follow certain restric-tions, they can be composed without requiring any implementation-level knowledge of the <b>language</b> <b>extensions.</b> The tools automatically compose the selected extensions and the Java host language specication. ...|$|R
5000|$|... #Subtitle level 2: Modified compilers and <b>language</b> <b>extensions</b> ...|$|R
50|$|The XML for Analysis {{specification}} referred {{back to the}} OLE DB for OLAP specification {{for details}} on the MDX Query Language. In Analysis Services 2005, Microsoft added some MDX Query <b>Language</b> <b>extensions</b> like subselects. Products like Microsoft Excel 2007 started to use these new MDX Query <b>Language</b> <b>extensions.</b> Some refer to this newer variant of MDX as MDX 2005.|$|R
50|$|GCC {{supports}} nested {{functions in}} C, as a <b>language</b> <b>extension.</b>|$|E
50|$|Some compilers like GCC {{support such}} {{constructs}} as a <b>language</b> <b>extension.</b>|$|E
5000|$|TypeScript is a <b>language</b> <b>extension</b> {{that adds}} {{features}} to ECMAScript 5. Additional features include: ...|$|E
5000|$|There {{are several}} supersets of Modula-2 with <b>language</b> <b>extensions</b> for {{specific}} application domains: ...|$|R
5000|$|... 2007: S-PLUS 8 released. New package system, <b>language</b> <b>extensions</b> for R package compatibility, Workbench debugger.|$|R
40|$|MT Icon is an Icon {{language}} interpreter {{that supports}} multiple tasks, where a task is the execution state {{of a program}} within the Icon virtual machine. MT Icon includes <b>language</b> <b>extensions</b> that allow Icon programs to load, execute, communicate with, and control one another, all within a single instantiation of the Icon interpreter. This document describes the <b>language</b> <b>extensions</b> and provides examples of their use. ...|$|R
5000|$|PyGrib A python <b>language</b> <b>extension</b> module {{which allows}} one {{to read and write}} GRIB 1 and GRIB 2 formats.|$|E
50|$|Standish {{described}} {{three classes}} of <b>language</b> <b>extension,</b> {{which he called}} paraphrase, orthophrase, and metaphrase (otherwise paraphrase and metaphrase being translation terms).|$|E
50|$|C++ AMP BLAS: The C++ AMP BLAS Library is an {{open source}} {{implementation}} of BLAS for Microsoft's AMP <b>language</b> <b>extension</b> for Visual C++.|$|E
40|$|We {{consider}} {{the suitability of}} three types of language {{for the implementation of}} image processing algorithms on FPGAs; Hardware Description <b>Languages,</b> Parallel <b>Language</b> <b>Extensions,</b> Serial <b>Language</b> <b>Extensions.</b> We discuss the requirements for a language for this purpose and identify the weaknesses of four specific languages, VHDL, SystemC, Handel-C, SA-C and Match. Finally, we propose VERTIPH, a new multiple-view visual language that should avoid these weaknesses...|$|R
50|$|Tree {{descriptions}} support inheritance {{to allow}} modularity and reuse of base language tree descriptions for <b>language</b> <b>extensions.</b>|$|R
40|$|In {{this paper}} {{we present a}} set of <b>language</b> <b>extensions</b> that improve the expressiveness and {{performance}} of Java for scientific computation. First of all, the <b>language</b> <b>extensions</b> allow the manipulation of multi-dimensional arrays to be expressed more naturally, and to be implemented more efficiently. Furthermore, data-parallel programming is supported, allowing ecient parallelization of a large class of operations on arrays. We also provide <b>language</b> <b>extensions</b> to construct specialized array representations, such as symmetric, block, and sparse matrices. These extensions are: tuples, parameterized types, array subscript overloading, and the inline modifier. These extensions are not only useful to construct special array representations, but are also useful in their own right. Finally, we add complex numbers as a primitive type to the language. We evaluat...|$|R
50|$|Several extensions, {{most notably}} those {{collected}} in the MediaWiki <b>Language</b> <b>Extension</b> Bundle, are designed to further enhance the multilingualism and internationalization of MediaWiki.|$|E
50|$|Ateji PX is an {{object-oriented}} programming <b>language</b> <b>extension</b> for Java. It {{is intended to}} facilliate parallel computing on multi-core processors, GPU, Grid and Cloud.|$|E
50|$|Walrusoft's {{main product}} was BASIC 8 (1986), a BASIC {{programming}} <b>language</b> <b>extension</b> for the Commodore 128 home/personal computer. BASIC 8 {{was published by}} Patech Software, Inc.|$|E
50|$|In C# 5 {{a set of}} <b>language</b> and {{compiler}} <b>extensions</b> {{was introduced}} {{to make it easier}} to work with the task model. These <b>language</b> <b>extensions</b> included the notion of async methods and the await statement that make the program flow appear synchronous.|$|R
50|$|The use {{of other}} {{backslash}} escapes is not defined by the C standard, although compiler vendors often provide additional escape codes as <b>language</b> <b>extensions.</b>|$|R
40|$|Many typed {{functional}} languages provide excellent {{support for}} defining and manipulating concrete instances of inductively defined recursive types. However, {{few of these}} languages provide good support for treating these types in a more abstract way. There {{have been a number}} of <b>language</b> <b>extensions</b> proposed to provide abstract facilities for manipulating these types. Unfortunately none have been widely adopted. We show several programming idioms based on recursion schemas that provides many of the benefits of several proposed extensions without any needed <b>language</b> <b>extensions...</b>|$|R
5000|$|Syntactic {{quality is}} the {{correspondence}} between the model M and the <b>language</b> <b>extension</b> L of the language in which the model is written. Three aspects here are: ...|$|E
50|$|C++/CX (component extensions) is a <b>language</b> <b>extension</b> for C++ compilers from Microsoft {{that enables}} C++ programmers to write {{programs}} for the new Windows Runtime platform, or WinRT API.|$|E
50|$|Whereas JDBC {{provides}} an API, SQLJ {{consists of a}} <b>language</b> <b>extension.</b> Thus programs containing SQLJ must be run through a preprocessor (the SQLJ translator) {{before they can be}} compiled.|$|E
40|$|This paper {{describes}} an extension to Lustre {{to support the}} analysis of globally asynchronous, locally synchronous (GALS) architectures. This extension consists of constructs for directly specifying the timeout automata used to describe asynchronous communication between processes represented by Lustre nodes. It is implemented using an extensible language framework based on attribute grammars that allows such extensions to be modularly defined {{so that they may}} be more easily composed with other <b>language</b> <b>extensions.</b> Key words: synchronous languages, extensible languages, attribute grammars, composable <b>language</b> <b>extensions...</b>|$|R
40|$|<b>Language</b> <b>extensions</b> {{increase}} programmer productivity {{by providing}} concise, often domain-specific syntax, and sup-port for static verification of correctness, security, and style constraints. <b>Language</b> <b>extensions</b> {{can often be}} realized through translation to the base language, supported by pre-processors and extensible compilers. However, various kinds of extensions require further adaptation of a base compiler’s internal stages and components, for example to support sep-arate compilation or {{to make use of}} low-level primitives of the platform (e. g., jump instructions or unbalanced synchro-nization). To allow for a more loosely coupled approach, we propose an open compiler model based on normalization steps from a high-level language to a subset of it, the core language. We developed such a compiler for a mixed Java and (core) bytecode language, and evaluate its effective-ness for composition mechanisms such as traits, as well as statement-level and expression-level <b>language</b> <b>extensions...</b>|$|R
40|$|The {{conventions}} {{connected to}} the use of object-oriented frameworks can be described by framework-specific <b>language</b> <b>extensions.</b> The programmer is then aided in writing more correct programs. In an integrated structure-oriented language-design environment such <b>language</b> <b>extensions</b> can be supported internally. 1 Introduction White box frameworks are known for being hard to use since they require detailed knowledge of the internal structure of the framework[Joh 88], and that a number of programming conventions[Hed 97] must be adhered to when using the framework. Failure to follow these conventions lead to unpredictable errors which often are left undetected until run-time. Framework-specific <b>language</b> <b>extensions,</b> also described in [Bos 96], which capture these conventions allow such errors to be detected and reported to the programmer before the program is executed. This is especially useful when working in an integrated programming environment since editing support for the framework-specifi [...] ...|$|R
