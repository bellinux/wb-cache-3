33|10000|Public
2500|$|A <b>list</b> <b>of</b> <b>processes</b> {{unique to}} Unami follow. Note {{that these are}} written in {{linguistic}} notation. Thus, {ə,a} → ∅ / _{h, x}V when {ə,a} are weak means that the sounds /ə/ and /a/ become null (disappear) {{in the context of}} when they are weak and appear before either /h/ or /x/ and another vowel. The slash means [...] "in the context of", and the underscore _ indicates where the /ə/ or /a/ must occur. In some notations the pound symbol (#) appears, indicating word boundaries (either the beginning or end). Regular parenthesis indicate optional conditions when framing phonemes or additional information about phonemes (e.g., [...] "C=stop"). The capital letters C, V, and N mean [...] "consonant", [...] "vowel", and [...] "nasal" [...] respectively.|$|E
5000|$|... top and htop, which {{display a}} <b>list</b> <b>of</b> <b>processes</b> and their {{resource}} usage; htop can send signals to processes directly from this list.|$|E
50|$|PVM also {{supports}} broadcasting (PVM_bcast) which sends to all processes {{in a group}} and multicasting (PVM_mcast) which sends to a specific <b>list</b> <b>of</b> <b>processes.</b>|$|E
5000|$|... {{displays}} column <b>lists</b> <b>of</b> <b>Processes,</b> Services, Associated Handles and Associated Modules; charts of CPU Usage (separate {{for every}} core) ...|$|R
5000|$|The PID {{namespace}} provides isolation for {{the allocation}} <b>of</b> <b>process</b> identifiers (PIDs), <b>lists</b> <b>of</b> <b>processes</b> and their details. While the new namespace is isolated from other siblings, processes in its [...] "parent" [...] namespace still see all processes in child namespaces—albeit with different PID numbers.|$|R
5|$|For a <b>list</b> <b>of</b> {{scattering}} <b>processes,</b> see Scattering.|$|R
5000|$|Each Grade on the Bridge has a <b>list</b> <b>of</b> <b>processes</b> that {{auditors}} should run. Below are sample commands from processes run in each Grade.|$|E
5000|$|The {{basic idea}} of list {{scheduling}} {{is to make}} an ordered <b>list</b> <b>of</b> <b>processes</b> by assigning them some priorities, and then repeatedly execute the following two steps until a valid schedule is obtained : ...|$|E
5000|$|... watch [...] "ps -e | grep php"This will {{generate}} a <b>list</b> <b>of</b> <b>processes</b> every two seconds, filter for all lines that contain the word [...] "php", and display {{the results on}} the screen. The output might look something like this: ...|$|E
50|$|For {{a general}} <b>list</b> <b>of</b> toponymic <b>processes,</b> see Place name origins.|$|R
50|$|The {{sleep and}} displaysleep can show an imposed value of 0 (disabled) {{together}} with a <b>list</b> <b>of</b> <b>process</b> IDs that impose this value. These are processes such as backup programs which need the machine to stay awake, for example until the backup is finished.|$|R
5000|$|Analysis of gene {{ontology}} {{information by}} BioGPS {{was able to}} produce a <b>list</b> <b>of</b> biological <b>processes</b> in each <b>of</b> which MEGF8 plays a significant role: ...|$|R
50|$|The first {{versions}} of the standard focused exclusively on software development processes. This was expanded to cover all related processes in a software business, for example project management, configuration management, quality assurance, and so on. The <b>list</b> <b>of</b> <b>processes</b> covered grew to cover six business areas: organizational,management,engineering,acquisition supply,support, andoperations.|$|E
50|$|Siderotype is an iron-based {{photographic}} print. The {{term was}} coined by Sir John Frederick William Herschel. A short <b>list</b> <b>of</b> <b>processes</b> defined as siderotypes is as follows: amphitype, argentotype, argyrotype, aurotype, breath print, Brown Line, chromatic photo, chrysotype, cyanotype, ferrogallic process, kallitype, kelaenotype, Nakahara's process, palladiotype, pellet print, Phipson's process, platinotype, printout platinum, satista print, sepia platinotype, sepiatype and vandyke.|$|E
50|$|Once a {{malicious}} program is installed on a system, {{it is essential}} that it stays concealed, to avoid detection. Software packages known as rootkits allow this concealment, by modifying the host's operating system so that the malware is hidden from the user. Rootkits can prevent a malicious process from being visible in the system's <b>list</b> <b>of</b> <b>processes,</b> or keep its files from being read.|$|E
5000|$|... #Caption: Thailand National <b>List</b> <b>of</b> Essential Medicines <b>Process</b> Flowchart.|$|R
50|$|Below is a <b>list</b> <b>of</b> {{commonly}} used <b>processes</b> in signmaking shops.|$|R
5000|$|Stochastic processes: An {{extension}} of probability theory that studies collections of random variables, such as time series or spatial <b>processes.</b> See also <b>List</b> <b>of</b> stochastic <b>processes</b> topics, and [...]|$|R
5000|$|... htop is an {{interactive}} system-monitor process-viewer and process-manager. It is designed {{as an alternative}} to the Unix program top. It shows a frequently updated list of the processes running on a computer, normally ordered by the amount of CPU usage. Unlike , htop provides a full <b>list</b> <b>of</b> <b>processes</b> running, instead of the top resource-consuming processes. Htop uses color and gives visual information about processor, swap and memory status.|$|E
5000|$|An unlocker is {{a utility}} used to {{determine}} what process is locking a file, and displays a <b>list</b> <b>of</b> <b>processes</b> as well as choices {{on what to do}} with the process (kill task, unlock, etc.) along with a list of file options such as delete or rename. On some Unix-like systems, utilities such as [...] and [...] can be used to inspect the state of file locks by process, by filename, or both.|$|E
5000|$|A <b>list</b> <b>of</b> <b>processes</b> {{unique to}} Unami follow. Note {{that these are}} written in {{linguistic}} notation. Thus, {ə,a} → ∅ / _{h, x}V when {ə,a} are weak means that the sounds /ə/ and /a/ become null (disappear) {{in the context of}} when they are weak and appear before either /h/ or /x/ and another vowel. The slash means [...] "in the context of", and the underscore _ indicates where the /ə/ or /a/ must occur. In some notations the pound symbol (#) appears, indicating word boundaries (either the beginning or end). Regular parenthesis indicate optional conditions when framing phonemes or additional information about phonemes (e.g., [...] "C=stop"). The capital letters C, V, and N mean [...] "consonant", [...] "vowel", and [...] "nasal" [...] respectively.|$|E
500|$|A more {{comprehensive}} <b>list</b> <b>of</b> injection moulding <b>processes</b> {{may be found}} here: ...|$|R
50|$|The {{standard}} {{offers a}} <b>list</b> <b>of</b> 33 <b>processes</b> which are allowed in natural ingredients, {{all of which}} are physical treatments and not chemical modifications. These include blending, cleaning, extrusion, freezing, drying, etc.|$|R
2500|$|Besides {{foreground}} and background, {{a process}} can be stopped. This is achieved by typing [...] while the process is running in the foreground. A <b>list</b> <b>of</b> all <b>processes,</b> both {{in the background and}} stopped, can be achieved by running jobs: ...|$|R
5000|$|Each object {{managed by}} the Object Manager has a header and a body; the header {{contains}} state information used by Object Manager, whereas the body contains the object-specific data and the services it exposes. An object header contains certain data, exposed as , such as [...] (which identifies the object), [...] (the category the object belongs to), [...] (the access rights for an object), [...] (the resource usage information for the object), [...] (the number of times a handle, an identifier to the object, has been opened), [...] (the <b>list</b> <b>of</b> <b>processes</b> which has a live reference to the object), its [...] (the number of live references to the object), and the [...] (an object that identifies {{the structure of the}} object body) of the object.|$|E
30|$|Unreliable failure {{detectors}} were {{proposed by}} Chandra and Toueg [5] as an abstraction that, depending on its properties, {{can be used}} to solve consensus in asynchronous systems with crash faults. In this sense, a failure detector is a distributed oracle that can be accessed by a process to obtain information {{about the state of the}} other processes of the distributed system. Each process accesses a local module implementing the failure detector, which basically outputs a <b>list</b> <b>of</b> <b>processes</b> suspected of having failed. In a broad sense failure detectors {{can be used to}} monitor processes of any application running on a network. Furthermore, the failure detector must have a well-known interface through which it provides process state information.|$|E
40|$|The {{advent of}} very large scale {{distributed}} {{applications in the}} form of peer-to-peer systems, introduced new problems caused by their intrinsic dynamic behavior (i. e., nodes continuously joining and leaving the system). Such problems inhibit the usage of many techniques developed for quasi-static distributed systems. In this paper we analyze the behavior of a simple subscription-flooding based algorithm for publish/subscribe in a highly dynamic environment. Specifically we define the problem of keeping a <b>list</b> <b>of</b> <b>processes</b> matching a given event (Event Distribution List) complete and accurate. We propose a simple variant of the subscription flooding approach, introducing expiration of subscriptions and their periodic refresh, and show how it can maintain accurate and complete EDLs in a dynamic distributed system. © 2006 IEEE...|$|E
2500|$|... {{means for}} the state machine to {{influence}} elements of the consensus, such as the <b>list</b> <b>of</b> active <b>processes.</b> Tendermint is implemented {{in the style of}} a blockchain, which amortizes the overhead of BFT and allows for faster recovery from failure.|$|R
50|$|Xchanging {{works with}} large organisations in {{processing}} {{areas such as}} HR, accounting and procurement, as well as industry specific processing such as securities processing and insurance claims processing. Although the <b>list</b> <b>of</b> back-office <b>processes</b> which could be transformed is non-exhaustive.|$|R
5000|$|Besides {{foreground}} and background, {{a process}} can be stopped. This is achieved by typing [...] while the process is running in the foreground. A <b>list</b> <b>of</b> all <b>processes,</b> both {{in the background and}} stopped, can be achieved by running : ...|$|R
40|$|International audienceApplication-level {{firewalls}} filter traffic {{based on}} a white <b>list</b> <b>of</b> <b>processes</b> that are allowed to access the network. Although they have a complete overview of the system {{in which they are}} executed, they can be easily bypassed by knowledgable attackers. In this paper we present AL-SAFE, a cloud-tailored application-level self-adaptable firewall which combines the high degree of visibility of an application-level firewall with the isolation of a traditional standalone firewall. AL-SAFE is able to filter traffic at two distinct points in the virtual infrastructure and adapt the enforced rulesets based on changes in the virtual infrastructure topology and the list of services running inside the virtual machines. Our performance analysis shows that AL-SAFE imposes a tolerable delay to legitimate network connections while it is able to filter out all unauthorised packets...|$|E
40|$|Simulation is {{the process}} of {{executing}} a model that describes a system with enough detail; this model has its entities, an internal state, some input and output variables and a <b>list</b> <b>of</b> <b>processes</b> bound to these variables. a simulation language such as general purpose simulation system (GPSS) is always a challenge, because of the way it executes the models and the abstraction level it can achieve, very different compared with most well-known programming languages. This article presents an open source simulation framework that implements a subset of entities of GPSS, which could help students to improve the understanding of this language. This tool also stores all entities of simulations in every single simulation time, which is very useful for debugging simulations, but also for getting a detailed history of all entities in the simulations, knowing exactly how they have behaved in every simulation time...|$|E
40|$|We propose an {{integrated}} model for eukaryotic DNA replication {{to explain the}} following problems: (1) How is DNA spooled through fixed sites of replication? (2) What and where are the helicases that unwind replicating DNA? (3) Why are the best candidates for replicative helicases, namely mini-chromosome maintenance (MCM) proteins, not concentrated at the replication fork? (4) How do MCM proteins spread away from loading sites at origins of replication? We draw on recent discoveries {{to argue that the}} MCM hexameric ring is a rotary motor that pumps DNA along its helical axis by simple rotation, such that the movement resembles that of a threaded bolt through a nut, and we propose that MCM proteins act at a distance from the replication fork to unwind DNA. This model would place DNA replication in a growing <b>list</b> <b>of</b> <b>processes,</b> such as recombination and virus packaging, that are mediated by ring-shaped ATPases pumping DNA by helical rotation...|$|E
5000|$|The {{following}} is a <b>list</b> <b>of</b> the four <b>processes</b> that occur between the four stages of the ideal Ericsson cycle: ...|$|R
30|$|A {{drawback}} of the FROST {{framework is}} that it overwrites the heap of the previously running kernel, because the framework boots a full-fledged Linux kernel. This includes information like structures of the MMU, the <b>list</b> <b>of</b> running <b>processes</b> and the memory mappings <b>of</b> <b>processes</b> to physical locations. Additionally, the kernel likely reinitializes Input/Output (IO) devices, which resets the corresponding device memory.|$|R
25|$|Detecting {{rootkits}} is a {{major challenge}} for anti-virus programs. Rootkits have full administrative access to the computer and are invisible to users and hidden from the <b>list</b> <b>of</b> running <b>processes</b> in the task manager. Rootkits can modify {{the inner workings of}} the operating system and tamper with antivirus programs.|$|R
