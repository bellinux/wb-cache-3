27|2|Public
50|$|In IBM System/360 {{mainframe}} environments such as OS/360, including z/OS for the z/Architecture mainframes, {{this type}} of program {{is known as a}} <b>linkage</b> <b>editor.</b> However, a <b>linkage</b> <b>editor,</b> as the name implies, has the additional capability of allowing the addition, replacement, and/or deletion of individual program sections. Operating systems such as OS/360 have a different format for executable load-modules, in that they contain supplementary data about the component sections of a program, so that an individual program section can be replaced, {{and other parts of the}} program updated so that relocatable addresses and other such references can be corrected by the <b>linkage</b> <b>editor,</b> as part of the process.|$|E
50|$|The Stage 2 jobstream uses {{a variety}} of utilities, {{including}} the assembler and <b>linkage</b> <b>editor.</b>|$|E
5000|$|The {{following}} example {{shows the}} control statements that instruct the OS/360 <b>Linkage</b> <b>Editor</b> to link an overlay program, indented to show structure (segment names are arbitrary): ...|$|E
40|$|The highly {{transportable}} {{programming system}} designed and implemented {{to support the}} development of software for the Space Ultrareliable Modular Computer (SUMC) is described. The SUMC system support software consists of program modules called processors. The initial set of processors consists of the supervisor, the general purpose assembler for SUMC instruction and microcode input, <b>linkage</b> <b>editors,</b> an instruction level simulator, a microcode grid print processor, and user oriented utility programs. A FORTRAN 4 compiler is undergoing development. The design facilitates the addition of new processors with a minimum effort and provides the user quasi host independence on the ground based operational software development computer. Additional capability is provided to accommodate variations in the SUMC architecture without consequent major modifications in the initial processors...|$|R
40|$|Introduction In {{traditional}} programming languages, {{database management}} systems, file systems and operating systems {{there are a}} number of, often conflicting, binding mechanisms for composing sub-systems, programs and data. In our experiments in designing, building and using a persistent information space architecture (PISA) [3] we have encountered these binding mechanisms and wish to report on them here. We wish to build a total system capable of providing for all programming activity. Our traditional view of the persistent information space is that it will subsume the functions of a plethora of mechanisms currently supported by components such as command languages, editors, file systems, compilers and interpreters, <b>linkage</b> <b>editors</b> and binders, debuggers, DBMS sublanguages and graphics libraries[1]. The information space is composed of objects, which may be simple or highly structured, defined by the universe of discourse of the type system 2 of the PISA arch...|$|R
5000|$|An {{absolute}} expression can {{be completely}} evaluated at assembly time {{and does not}} require further processing by the <b>linkage</b> <b>editor.</b> For example, [...] has an absolute nominal value.|$|E
50|$|The {{operating}} system was a proprietary Four-Phase Disc Operating System (rebranded by Philips) which supported the usual components at that time: text editor, assembler, various compilers, and <b>linkage</b> <b>editor.</b>|$|E
5000|$|RLD {{records are}} used to {{relocate}} addresses. For example, a program referencing an address located 500 bytes inside the module, will internally store the address as 500, but when the module is loaded into memory it's bound to be located someplace else, so an RLD record informs the <b>linkage</b> <b>editor</b> or loader what addresses to change. Also, when a module references an external symbol, it will usually set {{the value of the}} symbol to zero, then include an RLD entry for that symbol to allow the loader or <b>linkage</b> <b>editor</b> to alter the address to the correct value.|$|E
50|$|An {{example of}} a {{load-and-go}} system is the OS/360 loader, which performed many of {{the functions of the}} <b>Linkage</b> <b>Editor,</b> but placed the linked program in memory rather than creating an executable on disk.|$|E
50|$|A {{relocatable}} {{expression is}} one that contains one or more terms that require relocation by the <b>linkage</b> <b>editor</b> when the program ls linked, for example, in the following code 'ACON' has a relocatable nominal value.|$|E
50|$|Each {{programming}} language {{used in a}} computer shop will have an associated compiler that translates a source program into a machine-language object module. Then the object module from the compiler must be processed by the <b>linkage</b> <b>editor,</b> IEWL, to create an executable load module.|$|E
50|$|Programs {{could be}} {{converted}} to a more ready-to-use with the STORECI command, which invoked Core Image Builder (DM2s counterpart to the 360s <b>Linkage</b> <b>Editor).</b> Alternatively, a program could go through this process each time {{it was to be}} run, and for infrequently used programs this was preferred in order to conserve disk space.|$|E
50|$|Q address {{constants}} contain not actual addresses but {{a displacement}} in the External Dummy Section - {{similar to the}} Linux Global Offset Table (see Position-independent code). A J adcon is set by the <b>linkage</b> <b>editor</b> to hold the cumulative length of the External Dummy Section, and does not actually contain an address.|$|E
5000|$|The <b>Linkage</b> <b>Editor</b> organizes a {{load module}} in a {{specialized}} format consisting of alternating [...] "text records" [...] and [...] "control/relocation dictionary records". This organization allows a load module {{to be completely}} loaded and relocated with one input/output operation by Program Fetch (EXCP on pre-MVS systems, or STARTIO on MVS/370 and later systems).|$|E
50|$|In OS/360 and {{descendant}} systems, the (privileged) {{operating system}} facility is called IEWFETCH, {{and is an}} internal component of the OS Supervisor, whereas the (non-privileged) LOADER application can perform {{many of the same}} functions, plus those of the <b>Linkage</b> <b>Editor,</b> and is entirely external to the OS Supervisor (although it certainly uses many Supervisor services).|$|E
50|$|Another {{principle}} {{was the use}} of very high-level complex {{instructions to}} be implemented in microcode. As an example, one of the instructions, , was a complete <b>linkage</b> <b>editor.</b> Other instructions were designed to support the internal data structures and operations of programming languages such as FORTRAN, COBOL, and PL/I. In effect, FS was designed to be the ultimate complex instruction set computer (CISC).|$|E
50|$|A {{variation}} of EXCP is XDAP, which is indeed for accessing direct access storage, only, and is provided for reading and updating existing direct access storage records. XDAP {{cannot be used}} to add records, but XDAP can be utilized along with BSAM or BPAM to effect record additions to such datasets, and several OS components utilize XDAP in this manner (the <b>Linkage</b> <b>Editor,</b> IEWL, in particular).|$|E
5000|$|The system's <b>Linkage</b> <b>Editor</b> {{application}} is named IEWL. IEWL's main {{function is to}} associate load modules (executable programs) and object modules (the output from, say, assemblers and compilers), including [...] "automatic calls" [...] to libraries (high-level language [...] "built-in functions"), into a format which may be most efficiently loaded by IEWFETCH. There are {{a large number of}} editing options, but for a conventional application only a few of these are commonly employed.|$|E
5000|$|This format {{provides}} for the description of a compiled application's object code, which can be fed to a <b>linkage</b> <b>editor</b> to be made into an executable program, or run directly through an object module loader. It is created by the Assembler or by a programming language compiler. For {{the rest of this}} article, unless a reason for being explicit in the difference between a language compiler and an assembler is required, the term [...] "compile" [...] includes [...] "assemble" [...] and [...] "compiler" [...] includes [...] "assembler." ...|$|E
5000|$|The {{operating}} system requires all executable programs {{to be stored}} in libraries because the member's directory entry contains additional attribute information specific to load modules. When used for storing load modules, directories also contain, among other data, {{the size of the}} load module and the address of the first [...] "text record", which is different from the address of the first member data. Executable programs are written to libraries by the <b>linkage</b> <b>editor</b> and loaded into user-acquired storage by the Loader (an application program) or into system-acquired storage by Program Fetch (a component of the OS supervisor).|$|E
40|$|Tells {{how to use}} the Time Sharing System's <b>linkage</b> <b>editor.</b> This {{optional}} {{program can}} be used to join two or more related object modules into one object module. saving dynamic loader processing time. A linkage edi-tor user can also, without having to reassemble or recompile his program, combine control sections (pos-sibly saving external s 1 torage and reducing program execution time); rename entry points, control sections, and external references; and change control section attributes. An introduction explains: how a TSS/ 360 object module is created, its structure, how control sections are named and attributes assigned, external definitions and references, the difference between explicit and implicit linkage, and the difference between static and dynamic linking. The reader is shown how to invoke the <b>linkage</b> <b>editor</b> and how to use <b>linkage</b> <b>editor</b> control statements. Examples are provided for both conversational and non-conversational users. Before using this publication, be familiar with the contents of...|$|E
40|$|A {{three phase}} {{language}} compiler is described which produces IBM 360 / 370 compatible object modules {{and a set}} of simulation tables to aid in run time verification. A link edit step augments the standard OS <b>linkage</b> <b>editor.</b> A comprehensive run time system and library provide the HAL/S operating environment, error handling, a pseudo real time executive, and an extensive set of mathematical, conversion, I/O, and diagnostic routines. The specifications of the information flow and content for this system are also considered...|$|E
40|$|A {{case history}} is {{presented}} in which the NASTRAN system provided both guidelines and working software {{for use in the}} development of a discrete element program, PATCHES- 111. To avoid duplication and to take advantage of the wide spread user familiarity with NASTRAN, the PATCHES- 111 system uses NASTRAN bulk data syntax, NASTRAN matrix utilities, and the NASTRAN <b>linkage</b> <b>editor.</b> Problems in developing the program are discussed along with details on the architecture of the PATCHES- 111 parametric cubic modeling system. The system includes model construction procedures, checkpoint/restart strategies, and other features...|$|E
40|$|Programs for {{a variety}} of {{microprocessors}} (including Intel 8080; Motorola 6800, 6809 and 68000; and Texas Instruments 9900) can be prepared on different host computers (such as IBM 370, CDC 6000, and Nord 10) using portable programs developed at CERN. The range of cross software consists of: an assembler for each target microprocessor, a single <b>linkage</b> <b>editor,</b> a single object module librarian, and a variety of pre-loaders which convert object modules from CERN's format (CUFOM) into manufacturers' formats. The programs are written in BCPL and PASCAL, programming languages which are available {{on a wide range of}} computers...|$|E
40|$|A {{computer}} system consisting of several PDP- 11 minicomputers {{linked to a}} CII 10070 computer is used at CERN to acquire and check data {{from a series of}} high energy physics experiments. All program preparation for the minicomputers is carried out on the large machine. A macroassembler, a compiler for an intermediate level language and a <b>linkage</b> <b>editor</b> are provided. The data links are used for loading programs into the minicomputer and are also used by systems for editing source programs. remote job submission and for access to the CII 10070 permanent file system. Some examples of the use of these facilities and the benefits they provide are given. (7 refs) ...|$|E
40|$|Hardware, software, and {{performance}} {{features of the}} Digital Instrumentation and Navigation System (DIANS) designed for NASA research to collect flight data as a strap-down system are detailed. The support software for the system has a cross compiler, a <b>linkage</b> <b>editor,</b> and cross assembler, extended communication capabilities, postflight processing applications, and compilers for PASCAL, FORTRAN, CBASIC and MT. The DIANS microcomputer has a 1 Mbyte RAM module, a fast floating point processor board, a 68000 monoboard computer with 64 RAM, a 128 Kbyte bubble memory card, and a navigation radio. The system also carries a battery for full system operation for over an hour. The support software is also stored on a host mainframe computer, which has a CP/M operating system. Pitch, roll, and heading data are gathered from the on-board system, and communication is possible between the airborne and ground-based computer...|$|E
40|$|Specific {{modifications}} in the Disk Operational System Unified Series {{to insure the}} relocatability of programs stored permanently in the core image library is described. A self-relocating method for loading programs into the working memory with re-editing all the programs recorded in the core image library is presented. The modified <b>linkage</b> <b>editor</b> can {{be included in a}} relocation dictionary containing data about each address constant at the assembly stage {{at the request of the}} programmer. The relocation dictionary increases the dimension of the RL-phase in comparison with the dimension of this same phase when edited by the standard method, making possible the creation of multiphase program complexes. Generation and use of the modified system using Assembly language is described. An example of the use of the system is given, and limitations of the use of the relocatable programs in the modified system are outlined...|$|E
40|$|The {{compiler}} {{is a large}} multi-phase {{design and}} can be broken into four phases: Phase 1 inputs the source language and does a syntactic and semantic analysis generating the source listing, a file of instructions in an internal format (HALMAT) {{and a collection of}} tables to be used in subsequent phases. Phase 1. 5 massages the code produced by Phase 1, performing machine independent optimization. Phase 2 inputs the HALMAT produced by Phase 1 and outputs machine language object modules in a form suitable for the OS- 360 or FCOS <b>linkage</b> <b>editor.</b> Phase 3 produces the SDF tables. The four phases described are written in XPL, a language specifically designed for compiler implementation. In addition to the compiler, there is a large library containing all the routines that can be explicitly called by the source language programmer plus a large collection of routines for implementing various facilities of the language...|$|E
40|$|The {{success of}} the Real Time Multiprocessor Operating System (RTMPOS) in the {{development}} and evaluation of experimental hardware and software systems for real time interactive simulation of air breathing propulsion systems was evaluated. The Real Time Multiprocessor Operating System (RTMPOS) provides the user with a versatile, interactive means for loading, running, debugging and obtaining results from a multiprocessor based simulator. A front end processor (FEP) serves as the simulator controller and interface between the user and the simulator. These functions are facilitated by the RTMPOS which resides on the FEP. The RTMPOS acts in conjunction with the FEP's manufacturer supplied disk operating system that provides typical utilities like an assembler, <b>linkage</b> <b>editor,</b> text editor, file handling services, etc. Once a simulation is formulated, the RTMPOS provides for engineering level, run time operations such as loading, modifying and specifying computation flow of programs, simulator mode control, data handling and run time monitoring. Run time monitoring is a powerful feature of RTMPOS that allows the user to record all actions taken during a simulation session and to receive advisories from the simulator via the FEP. The RTMPOS is programmed mainly in PASCAL along with some assembly language routines. The RTMPOS software is easily modified to be applicable to hardware from different manufacturers...|$|E

