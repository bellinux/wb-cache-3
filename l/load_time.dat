513|4241|Public
5|$|The 2009 {{version was}} {{released}} for sale September 9, 2008. Symantec set several goals for version 2009 while in development: complete installations under {{minute and a}} footprint of 100 MB. Average installation times range from eight to ten minutes, and the previous 2008 version had a 400 MB footprint. Other goals included reducing <b>load</b> <b>time</b> after the computer starts, from 20–30 seconds to 10 seconds, and file scanning times with a technology allowing Norton to skip certain trusted files. The technology works {{on the basis that}} if a piece of software runs on a significant proportion of computers, then it is safe.|$|E
5|$|The same update {{released}} {{alongside the}} Fury expansion pack introduced in-game advertisements, {{found in the}} loading screens before a race. This move was met with criticism from gaming news outlets, particularly as the advertisements almost doubled the loading time between levels, and while the game content loads at the same speed, the advert must finish playing before the race can begin. The adverts were removed soon after numerous complaints were made by players. In addition to the <b>load</b> <b>time</b> problems, there had been consternation about advertising being retroactively added into a game {{that had already been}} paid for.|$|E
25|$|Java {{bytecode}} {{can either}} be interpreted at run time by a virtual machine, {{or it can be}} compiled at <b>load</b> <b>time</b> or runtime into native code which runs directly on the computer's hardware. Interpretation is slower than native execution, and compilation at <b>load</b> <b>time</b> or runtime has an initial performance penalty for the compilation. Modern performant JVM implementations all use the compilation approach, so after the initial startup time the performance is equivalent to native code.|$|E
5000|$|DSA {{focuses on}} {{decreasing}} page <b>loading</b> <b>times</b> and offloading web-servers, especially for dynamic sites. FEO focuses primarily on decreasing page <b>loading</b> <b>times</b> and reducing bandwidth. Still, cost-savings on origin servers {{can also be}} made by implementing FEO: it decreases page <b>loading</b> <b>times,</b> without rewriting code, consequently saving man-hours that would normally be necessary to optimize code. Also, revenue might increase from lower page <b>loading</b> <b>times</b> ...|$|R
25|$|After {{receiving}} {{criticism for}} long <b>load</b> <b>times,</b> FromSoftware {{announced that it}} was working on a patch to improve the issue. Two patches addressing various issues, including reducing the <b>loading</b> <b>times,</b> were released in April 2015.|$|R
40|$|International audienceThe <b>loading</b> <b>time</b> and {{temperature}} dependences viscoelastic {{behavior of a}} soda-lime-silicate glass (SLS) were studied by indentation creep experiments. Experiments were conducted in air, water and silicone oil with 15 - 10000 s <b>loading</b> <b>times,</b> {{and temperature}}s ranging between 100 and 500 K. The indentation size was found to depend much on the <b>loading</b> <b>time</b> and temperature. Hardness was found to decrease significantly with increasing <b>loading</b> <b>time,</b> even at 173 K, and to decrease rapidly with rising temperature, even well below the glass transition temperature (T-g). Water {{on the surface of}} glasses appeared to reduce the hardness and indentation viscosity of the glass...|$|R
25|$|A shared {{library or}} shared object is a file that is {{intended}} to be shared by executable files and further shared object files. Modules used by a program are loaded from individual shared objects into memory at <b>load</b> <b>time</b> or run time, rather than being copied by a linker when it creates a single monolithic executable file for the program.|$|E
25|$|The Ericsson Erlang {{implementation}} loads {{virtual machine}} bytecode which {{is converted to}} threaded code at <b>load</b> <b>time.</b> It also includes a native code compiler on most platforms, developed by the High Performance Erlang Project (HiPE) at Uppsala University. Since October 2001 the HiPE system is fully integrated in Ericsson's Open Source Erlang/OTP system. It also supports interpreting, directly from source code via abstract syntax tree, via script as of R11B-5 release of Erlang.|$|E
500|$|The second minor update was {{announced}} on February 2, 2010, {{along with the}} Sony Ericsson Aspen {{which was the first}} phone to use this version. [...] 6.5.3 continues the trend of attempting to provide a more finger-friendly user interface with several new usability features such as native support for multitouch; although device maker HTC Corporation created proprietary work-arounds to allow multi-touch to work on some applications it installed on its HD2 handset(However, Microsoft applications on this handset, such as the Internet Explorer web browser, did not support multi-touch.) and drag-and-drop start menu icons. Touchable tiles replaced soft keys." [...] Internet Explorer Mobile 6 has also received some major updates including decreased page <b>load</b> <b>time,</b> improved memory management and gesture smoothing. As with other updates it was unofficially ported to some other devices. Additional features include threaded email and Office Mobile 2010.|$|E
500|$|Although its {{gameplay}} {{was mainly}} well received, the game's long <b>loading</b> <b>times</b> were criticised. Jeff Gerstmann of Giant Bomb noted Wipeout 2048 technical issues, particularly its <b>loading</b> <b>times.</b> IGN's Cam Shea called the 30-second <b>loading</b> <b>times</b> frustrating [...] "when {{all you want}} to do is race", and Gameplanet's Adam Goodall also described the long <b>loading</b> <b>times</b> as awful, though he felt they were not enough to make the game a failure and assured the overall gameplay experience [...] "deeply satisfying". GamesRadar's Kathryn Bailey said that the game's online mode was well-executed, highly accessible and a [...] "credit to Wipeout." [...] She said that its user interface appeared clean and shiny, and called the touchscreen-based menu system [...] "a pleasure to behold". The Guardian Simon Parkin criticised the game's protracted loading times; a pause at least twenty seconds too long had a negative effect in the era of [...] "insta-fix mobile gaming on the rival platforms". Willington found the lengthy <b>load</b> <b>times</b> an issue which plagues the game, [...] "totally at odds" [...] with the normal pace of gameplay. Gaston said that the <b>loading</b> <b>times</b> were [...] "simply unforgivable"; he routinely waited over 50 seconds after selecting a race to start it, which minimised the ability to comfortably play the game [...] "on the go". Walton also found the long <b>loading</b> <b>times</b> infuriating in a handheld game, and said that having to wait more than 40 seconds to start a race was far longer than it should have been. Although Furfari found that the game had one of the longest <b>loading</b> <b>times</b> on the PlayStation Vita, it was not a [...] "deal breaker" [...] and Wipeout 2048 was one of the few racing titles for the console that he recommended. Although Haley noted the game's substantial <b>loading</b> <b>times,</b> he said that was a common feature in PlayStation Vita launch titles.|$|R
50|$|Smaller code size; faster compile and <b>load</b> <b>times.</b>|$|R
40|$|Abstract: In {{order to}} improve {{reliability}} of automobile transmission system and its running stability, this paper raises a reliability assessment calculation method. This method considers dependent failure of the parts, material strength degradation with increasing <b>load</b> <b>times</b> and uncertainty of <b>load</b> <b>times</b> in micro and macro scopes to explore main factors affecting the system reliability. The feasibility of this method has been validated by the example analysis. As a result, material properties of each gear parts, torques and <b>load</b> <b>times</b> play key parts in reliability of the system. ...|$|R
2500|$|Dynamic linking or {{late binding}} is linking {{performed}} while a program is being loaded (<b>load</b> <b>time)</b> or executed (run time), rather {{than when the}} executable file is created. A dynamically linked library (dynamic-link library or DLL under Windows and OS/2; dynamic shared object or DSO under Unix-like systems) is a library intended for dynamic linking. Only a minimum amount of work {{is done by the}} linker when the executable file is created; it only records what library routines the program needs and the index names or numbers of the routines in the library. The majority of the work of linking is done at the time the application is loaded (<b>load</b> <b>time)</b> or during execution (run time). Usually, the necessary linking program, called a [...] "dynamic linker" [...] or [...] "linking loader", is actually part of the underlying operating system. [...] (However, it is possible, and not exceedingly difficult, to write a program that uses dynamic linking and includes its own dynamic linker, even for an operating system that itself provides no support for dynamic linking.) ...|$|E
2500|$|Notepad is {{a common}} text-only (plain text) editor. The {{resulting}} files—typically saved with the [...]txt extension—have no format tags or styles, making the program suitable for editing system files to use in a DOS environment and, occasionally, source code for later compilation or execution, usually through a command prompt. It is also useful for its negligible use of system resources; making for quick <b>load</b> <b>time</b> and processing time, especially on under-powered hardware.|$|E
2500|$|In February 2012, Tom's Hardware {{performance}} tested Chrome 17, Firefox 10, Internet Explorer 9, Opera 11.61, and Safari 5.1.2 on Windows 7. Tom's Hardware summarized their tests {{into four}} categories: Performance, Efficiency, Reliability, and Conformance. In the performance category they tested HTML5, Java, JavaScript, DOM, CSS 3, Flash, Silverlight, and WebGL (WebGL 2 is current as of version 51; and Java and Silverlight stop working as of version 52) they also tested start up time and page <b>load</b> <b>time.</b> The performance {{tests showed that}} Firefox was either [...] "acceptable" [...] or [...] "strong" [...] in most categories, winning three categories (HTML5, HTML5 hardware acceleration, and Java) only finishing [...] "weak" [...] in CSS performance. In the efficiency tests, Tom's Hardware tested memory usage and management. In this category, it determined that Firefox was only [...] "acceptable" [...] at performing light memory usage, while it was [...] "strong" [...] at performing heavy memory usage. In the reliability category, Firefox performed a [...] "strong" [...] amount of proper page loads. In the final category, conformance, {{it was determined that}} Firefox had [...] "strong" [...] conformance for JavaScript and HTML5. In conclusion, Tom's Hardware determined that Firefox was the best browser for Windows 7 OS, but that it only narrowly beat Google Chrome.|$|E
40|$|This thesis {{deals with}} the <b>loading</b> <b>time</b> of {{websites}} developed by CSS frameworks. Thesis also focuses on website optimization and website measuring. The main goal of this thesis is to execute the performance analysis on a websites developed by different CSS frameworks. Finally approach and evaluate which CSS framework {{is due to the}} <b>loading</b> <b>time</b> of a website best suited for a particular type of website. The theoretical part explains the concept of CSS framework. In this part are also presented the most popular CSS frameworks. Following part of thesis deals with <b>loading</b> <b>time</b> of websites. There are described optimization possibilities and website measuring. In the practical part is the performance analysis of the <b>loading</b> <b>time</b> of different websites developed by different CSS frameworks. The conclusion of thesis evaluates the results of the analyzes and subsequently are presented recommendations which are based on these results. The recommendations and the analyzes forms main contribution of this thesis and can help to website developers to select a CSS framework for developing websites due to less <b>loading</b> <b>time</b> of a website...|$|R
50|$|Musou Orochi {{installs}} 1024 MB {{to reduce}} <b>load</b> <b>times.</b>|$|R
50|$|Kessen III {{installs}} 2048 MB {{to reduce}} <b>load</b> <b>times.</b>|$|R
2500|$|Rogue Galaxy is {{an action}} {{role-playing}} game played from a third-person perspective {{in which the}} player moves through a continuous environment, with no <b>load</b> <b>time</b> between overworld exploration and combat. Battles occur as random encounters, a la traditional role-playing video games such as Square's Final Fantasy X or Level-5's own [...] However, unlike such games, which feature turn-based combat, Rogue Galaxy uses a real-time hack and slash combat {{system in which the}} player fights with a party of three characters. The player has direct control over only one character, although which character this is can be changed at any time. The two NPCs fight independently of the player character, based on the strategy selected prior to the battle. Available strategies include fighting very aggressively, targeting a specific enemy, or not fighting at all. The strategy can also be changed {{at any time during the}} battle. Additionally, the player can issue specific orders to the NPCs during combat, such as having them use an item or activate one of their special abilities. NPC allies will also offer advice to the player character, such as suggesting they perform a special move or use a particular item. The player is given a choice of either ignoring the advice, or picking one of the available options. NPCs will not perform any special moves or use items unless the player tells them to, or has selected a particular strategy prior to the battle.|$|E
2500|$|Many critics {{took issue}} with the level design and {{shooting}} mechanics, particularly when compared to both the original Duke Nukem 3D {{and those of other}} modern-day first-person shooters. Kevin VanOrd of GameSpot felt that the [...] "joy of that game's shooting has been flattened" [...] with [...] "little sense of impact", finding the overall design to be [...] "tedious", and ended his video review by calling Duke Nukem Forever a [...] "bad, boring, bargain bin kind of game". Eurogamer commented that [...] "few of the locations [...] the sort of exploration and excitement that made Duke 3D such a memorable experience. Duke Nukem Forever is linear to a fault, and huge chunks of the game are spent simply walking from one fight to another through uninspired corridors." [...] IGN criticized [...] "the frequent first-person platforming segments that make up an unnecessarily large percentage of the story mode", although they stated the [...] "shooting sections are simple fun". GamesRadar concluded that [...] "Duke Nukem Forevers world-record development time has produced an ugly, buggy shooter that veers back and forth between enjoyably average and outright boring, with occasional surges of greatness along the way." [...] GamePro felt that [...] "Unexpected moments ... are really the game's biggest strengths. But they're few and far between." [...] X-Play gave the game a 1 out of 5, criticizing the graphics, <b>load</b> <b>time,</b> number of enemies onscreen, the multiplayer, being called [...] "an afterthought", the game's [...] "creepy, hateful view of women.", and the hive level, with Adam Sessler saying that [...] "this is all played for laughs".|$|E
50|$|With the {{software}} installed tests from PC Mag found an 18% increase on total system boot {{time and a}} 19% increase in <b>load</b> <b>time</b> of web pages. With the antispam component turned on <b>load</b> <b>time</b> of email retrieval was slowed by 2.7 times.|$|E
50|$|Sengoku Musō {{installs}} 1024 MB {{to reduce}} <b>load</b> <b>times.</b>|$|R
50|$|Because {{the loading}} screen data itself {{needs to be}} read from the media, it {{actually}} increases the overall <b>loading</b> <b>time.</b> For example, with a ZX Spectrum game, the screen data takes up 6 kilobytes, representing an increase in <b>loading</b> <b>time</b> of about 13% over the same game without a loading screen.|$|R
5000|$|Optimized {{rendering}} for {{two times}} faster first page <b>load</b> <b>times,</b> 1.5 times faster PDF export file generation and 60% smaller peak memory footprint.|$|R
50|$|The {{translated}} string {{table is}} applied to the modules at <b>load</b> <b>time.</b>|$|E
50|$|In June 2008 Google {{revealed}} that landing page <b>load</b> <b>time</b> impacts Quality Score.|$|E
5000|$|Compression: {{the proxy}} server can {{optimize}} and compress the content {{to speed up}} the <b>load</b> <b>time.</b>|$|E
50|$|G1 Jockey 4 {{installs}} 1024 MB {{to reduce}} <b>load</b> <b>times.</b>|$|R
50|$|Sengoku Musō 2 {{installs}} 1024 MB {{to reduce}} <b>load</b> <b>times.</b>|$|R
50|$|Shadow Hearts 2 {{installs}} 1.28 GB {{to reduce}} <b>load</b> <b>times.</b>|$|R
5000|$|... 50 songs maximum {{are loaded}} per player; {{sometimes}} fewer are loaded if the USB <b>load</b> <b>time</b> exceeds a certain limit.|$|E
50|$|Lengthy <b>load</b> <b>time</b> and {{extensive}} disk access {{was a problem}} with Wizardry; however, the Commodore versions, which particularly suffer from this, provided a variety of workarounds. In C128 mode, the VDC memory is used to store overlays and REUs are supported in both C64 and C128 mode. Wizardry 2-5 also detect if 16k or 64k of VDC memory is present and can use the 1571 drive's burst mode for faster <b>load</b> <b>time.</b>|$|E
50|$|Java {{bytecode}} {{can either}} be interpreted at run time by a virtual machine, {{or it can be}} compiled at <b>load</b> <b>time</b> or runtime into native code which runs directly on the computer's hardware. Interpretation is slower than native execution, and compilation at <b>load</b> <b>time</b> or runtime has an initial performance penalty for the compilation. Modern performant JVM implementations all use the compilation approach, so after the initial startup time the performance is equivalent to native code.|$|E
50|$|Taishou Mononoke Ibunroku {{installs}} 128 MB {{to reduce}} <b>load</b> <b>times.</b>|$|R
50|$|Winback 2:Project Poseidon {{installs}} 1024 MB {{to reduce}} <b>load</b> <b>times.</b>|$|R
50|$|Winning Post 6 {{installs}} 1024 MB {{to reduce}} <b>load</b> <b>times.</b>|$|R
