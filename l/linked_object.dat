18|1060|Public
25|$|Allows {{the object}} to support linking, e.g. by {{allowing}} the container to set {{the source of a}} <b>linked</b> <b>object.</b>|$|E
50|$|Information on each <b>linked</b> <b>object.</b> This {{information}} {{could be in}} existing WWW pages, existing databases of price information etc., or have been specially created.|$|E
50|$|A {{display to}} view the {{information}} on the <b>linked</b> <b>object.</b> At the present time this is most likely to be the screen of a mobile telephone.|$|E
2500|$|Contains {{the methods}} that the {{standard}} OLE dialog boxes that manage <b>linked</b> <b>objects</b> use to update <b>linked</b> <b>objects</b> in a container, or to query and change their sources. Used by the [...] "Links", [...] "Change source", [...] "Update links" [...] and [...] "Object properties" [...] dialog boxes.|$|R
5000|$|Java/C++ based {{component}} architecture (UObject) with possibility to <b>link</b> <b>objects</b> or run them remotely ...|$|R
5000|$|Architecture {{components:}} C++ / Java (UObject) {{with the}} ability to <b>link</b> <b>object</b> or execute remotely ...|$|R
5000|$|Direct linking (or hot-linking) {{is a form}} of {{bandwidth}} leeching {{that occurs}} when placing an unauthorized <b>linked</b> <b>object,</b> often an image, from one site in a web page belonging to a second site (the leech).|$|E
50|$|Inline linking (also {{known as}} hotlinking, leeching, piggy-backing, direct linking, offsite image grabs) {{is the use}} of a <b>linked</b> <b>object,</b> often an image, on one site by a web page {{belonging}} to a second site. One site is said to have an inline link to the other site where the object is located.|$|E
5000|$|Result link: A {{transforming}} link specifying {{that the}} linked process creates (generates, yields) the <b>linked</b> <b>object,</b> {{which is the}} resultee. Graphically, an arrow with a closed arrowhead pointing from the creating process to the resultee shall define a result link. The syntax of a result link OPL sentence is: Processing yields Resultee.|$|E
30|$|Every {{connection}} {{is represented in}} the simulator by a so-called <b>link</b> <b>object.</b> It is the most fundamental building block of the simulator and contains all the PHY functionality objects, such as channel coding, modulation, MIMO processing, channel generation and estimation and channel state information (CSI) feedback calculation. Moreover, the <b>link</b> <b>object</b> also contains the generated signals throughout the whole transceiver chain of the specific connection.|$|R
25|$|Additionally {{allows the}} dialog boxes to query when <b>linked</b> <b>objects</b> were last updated, and {{whether this was}} done {{automatically}} or manually.|$|R
40|$|<b>Links</b> among <b>objects</b> contain rich {{semantics}} {{that can}} be very helpful in classifying the objects. However, many irrelevant links can be found in real-world link data such as Web pages. Often, these noisy and irrelevant links do not provide useful and predictive information for categorization. It is thus important to automatically identify which links are most relevant for categorization. In this paper, we present a contextual dependency network (CDN) model for classifying <b>linked</b> <b>objects</b> in the presence of noisy and irrelevant links. The CDN model makes use of a dependency function that characterizes the contextual dependencies among <b>linked</b> <b>objects.</b> In this way, CDNs can differentiate the impacts of the related objects on the classification and consequently reduce the effect of irrelevant links on the classification. We show how to learn the CDN model effectively and how to use the Gibbs inference framework over the learned model for collective classification of multiple <b>linked</b> <b>objects.</b> The experiments show that the CDN model demonstrates relatively high robustness on data sets containing irrelevant links...|$|R
5000|$|The 3790 {{failed to}} achieve the success IBM intended, due to several issues. [...] It had a complex {{programming}} language, The 3790 Macro Assembler, and the customers {{found it difficult to}} deploy applications on it. The Macro Assembler ran only on an IBM mainframe and then the compiled and <b>linked</b> <b>object</b> was moved to the 3790 for testing.|$|E
5000|$|Effect link: An {{transforming}} link specifying {{that the}} linked process affects the <b>linked</b> <b>object,</b> {{which is the}} affectee, i.e., the process causes some unspecified change {{in the state of}} the affectee. Graphically, a bidirectional arrow with two closed arrowheads, one pointing in each direction between the affecting process and the affected object, shall define the effect link. The syntax of an effect link OPL sentence is: Processing affects Affectee.|$|E
5000|$|Consumption link: A {{transforming}} link specifying {{that the}} linked process consumes (destroys, eliminates) the <b>linked</b> <b>object,</b> the consumee. Existence of the consumee is precondition (or {{part of the}} precondition) to the activation of the process. Graphically, an arrow with a closed arrowhead pointing from the consumee to the consuming process defines the consumption link. By assumption, the consumed object disappears {{as soon as the}} process begins execution. The syntax of a consumption link OPL sentence is: Processing consumes Consumee.|$|E
50|$|GraphDB had index-free adjacency, {{which meant}} that it not {{necessary}} to manage a global index for relationships between nodes/entities. The <b>linked</b> <b>objects</b> contained direct reference to their adjacent neighboring nodes.|$|R
5000|$|Sherman's The First Mile {{received}} a poor review from PC Gamer, being criticised for [...] "typos" [...] and for [...] "incorrectly <b>linked</b> <b>objects,</b> caricatured minorities, physical impossibilities, and confusing commands." ...|$|R
5000|$|Web Server: When GeneWeb runs on a {{computer}} connected to the internet, it can accept HTTP requests from web clients, generating and serving HTML web pages and <b>linked</b> <b>objects</b> (images, etc.).|$|R
50|$|Prior to the {{corporate}} takeover by TCS, BaNCS was developed at the Headquarters of Financial Network Services PTY. at the Systems Development office under the base version Office in 70 Rosehill Street, Redfern, Sydney, New South Wales, Australia.Versions 1 through to 7.4 were developed under FNS. Satellite functionality was integrated into the Base Software in subversions from customer sites via the Redfern Projects Office, and managed by the Base Manager into release candidates and separate administration integrated enhancements into documentation and user guides.Two Major branches were developed off the elements from version 2 through to version 4 of the core based initially on AT&T NCR 9800 series Mainframe architecture - creating a UNIX branch and an NT/Windows Server Branch. COBOL Sources were inter-changeable but software interfacing with the OS, such as transaction queues, differed to handle the various implementations written in C and linked into the Microfocus COBOL run time system <b>linked</b> <b>object.</b> scripting also varied across branches to handle operations and non-functional requirements.Major versions featured multicurrency (with spot positions) and multi lingual. To cater for this various front ends were created such as BTM (Branch Terminal Manager), Branch 2000, BEAM handled transactions from Tellers.Major version 6 included three database back ends: Oracle, Informix and DB2.UNIX Was implemented in practice on HP-UX, IBM AIX and AT&T NCR System V UNIX variants. ksh or Korn Shell was the primary script language.Version 7.5 onwards of The BaNCS system was developed by Tata Consultancy Services business unit TCS Financial Solutions.It was developed in COBOL.|$|E
5000|$|Psychologists {{have often}} taken a Freudian {{perspective}} when describing why people collect. They highlight the controlling and impulsive dark side to collecting, {{the need for}} people to have [...] "an object of desire." [...] This desire, and hence the innate propensity to collect, begins at birth. The infant first desires the emotional and physical comfort of the nourishing breast, then the familiar baby blanket the child clings to for comfort and security. Stuffed animals, favorite toys are taken to bed and provide the emotional security needed to fall asleep. A sense of ownership and control is facilitated through possession of these items for the vulnerable child. Freud himself took a more extreme position {{on the origins of}} collecting. Not surprisingly, he postulated that all collecting stems from unresolved toilet training conflict. Freud took the stance that the loss of bowel control was a traumatic experience, and the product from the bowels was disgusting and frightening to the child. Therefore the collector is trying to gain back control of their bowels as well as their [...] "possessions" [...] which were long flushed down the toilet. Where Freud <b>linked</b> <b>object</b> fixation to the anal-retentive stage in childhood, Muensterberger, in his perspective paper [...] "Unruly Passion" [...] believes collecting to be a [...] "need-driven compensatory behavior where every new object effectively gives the notion of fantasized omnipotence." [...] Jung had his own theories about why people become collectors. He touted the influence of archetypes on behavior. These universal symbols are embedded in what he termed our collective unconscious. Using this logic, collecting and completing sets have as their archetypal antecedents the collecting of [...] "nuts and berries" [...] once needed for survival by our early ancestors.|$|E
40|$|Abstract. User queries on the Web can be {{classified}} into three types according to user’s intention: informational query, navigational query and transactional query. In this paper, a query type classification method and Service Link information for transactional queries are proposed. Web mediated activity is usually implemented by hyperlinks. Hyperlinks can be good indicators in classifying queries and retrieving good answer pages for transactional queries. A hyperlink related to an anchor text has an anticipated action with a <b>linked</b> <b>object.</b> Possible actions are reading, visiting and downloading a <b>linked</b> <b>object.</b> We can assign a possible action to each anchor text. These tagged anchor texts {{can be used as}} training data for query type classification. We can collect a large-scale and dynamic train query set automatically. To see the accuracy of the proposing classification method, various experiments were conducted. From experiments, I could achieve 91 % of possible improvement for transactional queries with our classification method. ...|$|E
50|$|Artefact {{analysis}} has <b>linked</b> <b>objects</b> found at Gilund {{to the other}} sites in the Ahar-Banas Complex, {{as well as the}} site of Bagor. In addition, lithics at Gilund and Bagor were produced using the same techniques.|$|R
40|$|Previous {{researches}} {{suggest that}} contextual memory is especially {{susceptible to the}} negative effects of aging upon cognition. The {{purpose of this study was}} to evaluate the effects of memorization strategies on the performance of twenty-four elders and twenty-one young participants on contextual memory task. Within each of the age groups, the participants were divided into those that received or did not receive specific orientation to <b>link</b> <b>objects</b> to a context. At test session, participants were engaged in object and context recognition tests. Findings showed that the specific orientation to <b>link</b> <b>object</b> to context was able to revert the contextual memory deficits of the elders...|$|R
50|$|MorphX uses {{referencing}} to <b>link</b> <b>objects,</b> so changes in—for example—datatypes {{of field}} names automatically updates everyplace that uses those field names (such as forms or reports). Furthermore, changes made through MorphX {{show in the}} application immediately after compilation.|$|R
40|$|Anterior {{temporal}} lobe access to semantic representations. Geschwind (1965 a, 1965 b) {{that of other}} primates and mammalian species, its polysensory in the posterior at <b>linked</b> <b>object</b> representations. n era of imaging y the use of dif-). These two au-thors resurrected the BrocaWernickeLichtheim model, one region that stored concepts (that is, semantic memories), this was Contents lists available at ScienceDirect ier Neuropsyc Neuropsychologia 76 (2015...|$|E
40|$|Object {{versions}} {{are a key}} feature of object-oriented database evolution. The applications targeted by OODBs (such as CAD or CASE applications) need to manipulate complex objects, i. e objects linked to other objects by dependence relations (composition, inheritance, association, etc.) and, consequently, complex object versions. This paper investigates the existing approaches in complex object version management through version propagation, i. e the automatic creation or destruction of groups of <b>linked</b> <b>object</b> versions. The main issues of version propagation are underlined: limitation of the scope, version referencing and ambiguous propagation cases management. The paper then presents the authors’ approach: a user-customizable multi-strategy version propagation model in which the propagation capabilities, called strategies, can be declaratively described by means of rules and associated with each relation, according to its semantics. A comprehensive example of composite class and instance version propagation illustrates {{the capabilities of the}} model...|$|E
40|$|Numerical {{simulation}} of linked rigid-body motion generates realistic motion automatically. Simulation alone, however, prevents intuitive direction. In the worst case, an artist repeatedly tweaks {{a variety of}} simulation parameters until she achieves the desired effect. Because {{of the complexity of}} the dynamics of linked rigid bodies, the tweaking becomes tedious, even for the simplest animation goals. This thesis describes an interactive technique for direct control of linked rigid-body simulation with a click-and-drag interface. It uses numerical simulation to preserve the physical realism of the motion. Differential control, an interactive form of gradient descent, provides the basis of the interface. This thesis extends differential control to edit the motion of linked rigid bodies connected with passive joints in an open-loop topology. The <b>linked</b> <b>object</b> can collide for an instantaneous or sustained time period at a single point of contact. by Jonathan Jong-Ho Lee. Thesis (M. Eng.) [...] Massachusetts Institute of Technology, Dept. of Electrical Engineering and Computer Science, 2003. Includes bibliographical references (p. 97 - 100) ...|$|E
50|$|Development was {{transferred}} to the new-founded company Rae Technology, a spin-off from Apple Computer. At Rae, the two Arora brothers and David Kleinberg developed an object-oriented environment called SOLO (Structure of <b>Linked</b> <b>Objects),</b> which is the technological basis of NetObjects Fusion.|$|R
40|$|The work {{represents}} the conceptual model of <b>link</b> <b>objects</b> {{and the corresponding}} system of parameters describing their state. Telecommunication information system design stages are investigated {{on the basis of}} the obtained model. TIS ar-chitecture suggested in the work brings about the concept ofunited telecommunication information space...|$|R
40|$|Abstract. In Web-based e-learning, an {{up-to-date}} {{catalogue of}} subject-specific Web resources can effectively offer inexperienced {{students with an}} advanced academic portal on the Web. To automatically construct such academic Web resource catalogue, a key issue is how to classify the collected Web pages. However, existing link-based classification methods treat all neighbors equally in the categorization of the target objects. In this paper, we propose a contextbased classification approach that can scale well for noisy and heterogeneous link data such as Web pages. We quantitatively measure the contextually topical dependencies between <b>linked</b> <b>objects</b> using the dependence functions, which are then exploited to classify the target <b>objects</b> in the <b>link</b> structure. Experimental {{results show that the}} proposed classification model can better capture the link regularities and can facilitate better categorization of <b>linked</b> <b>objects...</b>|$|R
40|$|Abstract: The {{appropriate}} {{design of}} a system {{is one of the}} essential topics {{at the beginning of a}} new development project. According to the intended purpose of a device the first step is to model the system in order to get a structure for the implementation of the required features. In general the implementation of the system requirements is split in hardware parts and tasks which are done in software. In case of the hardware design the solutions for the challenges are mostly clear and supported by fundamentals of e. g. digital logic laws and several design methods. If we think of the software part a lot of problems have to be solved without such clear fundamentals. Object oriented design is one of the paradigms which promise a way for designing stable and reliable software. A problem arises in this context if the used microprocessor platform is not supported with a compiler for an object oriented programming language. In this case only the system modelling could be done in terms of software objects and their relations, the implementation has to be done in a procedural language. The following article is based on research work done in the development of a modular process data system. Based on a sequential main program and interrupt driven hardware interfaces, a software implementation without an operating system was implemented. By means of special software structure called <b>Linked</b> <b>Object</b> List, object oriented design was implemented with the procedural language “C”. Due to this design a reusable and flexible system was achieved which enables a high degree of flexibility concerning the hardware configuration and system customization at the user site. ...|$|E
40|$|Anticipating the {{consequences}} of our own actions is a fundamental component of normal sensorimotor control and is seen, for example, during the manipulation of objects. When one hand pulls on an object held in the other hand, there is an anticipatory increase in grip force in the restraining hand that prevents the object from slipping. This anticipation is thought {{to rely on a}} forward internal model of the manipulated object and motor system, enabling the prediction of {{the consequences}} of our motor commands. Here we investigate the development of such a predictive response. Each hand held an object that was attached to its own torque motor. On each trial the subject was required to pull on the object held in the left hand and to maintain the position of the object held in the right hand. The torque motors were computer controlled so that the objects could be either "linked" so that the forces on the objects were equal and opposite, acting as though they were a single object, or "unlinked," so that they acted as two independent objects. A predictive response in the restraining hand is only necessary when the objects are linked and is unnecessary in the unlinked condition where there is no risk of the object slipping. To examine the learning and decay of predictive responses, we measured the grip force responses during unlinked trials that followed a linked trial. After a single linked trial, anticipatory grip force was quick to develop, but decayed slowly over the following unlinked trials. Varying the time between trials showed that the rate of decay depended on the number of trials since the last linked trial rather than time. Increasing the frequency of linked trials showed an increased level of subsequent grip force modulation, but did not alter the decay rate. When the torque motors simulated a <b>linked</b> <b>object</b> that did not have normal physical properties, prediction was reduced. These results show that the use of predictive responses has a different time course for learning and decay, and the response depends on experience and the physical properties of the objects...|$|E
40|$|The {{diversity}} of data models used in databases {{is one of}} the problems encountered in interoperability. In order to <b>link</b> <b>object</b> and relational worlds, an object view generator on relational databases has been defined. Moreover a metaobject layer allowing metamodeling abilities helps reducing the interoperability problems between different object models. Now, according to the changes performed in the object model, the computed underlying relational structures may become inconsistent, and so, reduce the interoperability with non-object-oriented databases. We propose an open translation engine between the object and relational layers. It is designed as a set of rules <b>linking</b> <b>object</b> and relational representations, which are implemented as metaclass' methods. So when the developer changes the object model, he can adapt the correspondence rules to mirror the evolution of the object model's semantic...|$|R
5000|$|Link base {{register}} for dynamically <b>linked</b> modules (<b>object</b> orientation) ...|$|R
25|$|A commit <b>object</b> <b>links</b> tree <b>objects</b> {{together}} into a history. It contains {{the name of a}} tree object (of the top-level source directory), a time stamp, a log message, and the names of zero or more parent commit objects.|$|R
50|$|The Transport {{compartment}} {{contains a}} network of conveyance elements (channels, pipes, pumps, and regulators) and storage/treatment units that transport water to outfalls or to treatment facilities. Inflows to this compartment can come from surface runoff, groundwater interflow, sanitary dry weather flow, or from user-defined hydrographs. The components of the Transport compartment are modeled with Node and <b>Link</b> <b>objects.</b>|$|R
