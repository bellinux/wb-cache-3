14|219|Public
5000|$|There {{are other}} uses of this product beyond cross {{platform}} development (though it does this well). As a CASE tool, a non-programmer business analyst can actually lay {{out all the}} user interfaces, review them with end users and subject matter experts in a RAD-like (Rapid Application Development) requirements capture by functional review, and then the XVT architect tool will deliver the C or C++ (ANSI-compliant) code. This would take a bit of familiarity with a compiler and the layout tools, but it would allow programmers to be relieved of coding GUI and focus their work on the business <b>logic,</b> <b>event</b> handling, etc.|$|E
40|$|The Discrete Event Calculus Reasoner is {{a program}} for {{performing}} automated commonsense reasoning using the discrete event calculus [Mueller, 2006], {{a version of the}} classical <b>logic</b> <b>event</b> calculus [Shanahan, 1997, Miller and Shanahan, 2002]. The program supports such types of reasoning as deduction, temporal projection, abduction, planning, postdiction, and model finding...|$|E
40|$|Abstract. Recently, Ferraris, Lee and Lifschitz {{presented}} a generalized {{definition of a}} stable model that applies to the syntax of arbitrary firstorder sentences, under which a logic program {{is viewed as a}} special class of first-order sentences. The new definition of a stable model is similar to the definition of circumscription, and can even be characterized in terms of circumscription. In this paper, we show the opposite direction, that is, how to embed circumscription into the new stable model semantics, and based on this, how to turn some versions of the classical <b>logic</b> <b>event</b> calculus into the general language of stable models. By turning the latter to answer set programs under certain conditions, we show that answer set solvers can be used for classical <b>logic</b> <b>event</b> calculus reasoning, allowing more expressive query answering than what can be handled by the current SAT-based implementations of the event calculus. We prove the correctness of our translation method and compare our work with the related work by Mueller. ...|$|E
50|$|In 2012, Wolff and {{majority}} shareholder Chris Everingham incorporated <b>Event</b> <b>Logic,</b> Inc., an <b>events</b> management and PR company.|$|R
5000|$|Agent <b>Logic</b> - <b>event</b> {{detection}} and response software - Webspector webpage change software ...|$|R
40|$|The work {{reported}} in this paper {{is part of a}} silicon compiler that receives a parallel algorithm written in CIRCAL and produces a VLSI implementation. The implementation logic used is the asynchronous <b>event</b> <b>logic.</b> A generated netlist of <b>event</b> <b>logic</b> modules is used to produce the VLSI mask layout geometries for this circuit using the standard cell approach. A standard library of cells for <b>event</b> <b>logic</b> modules has been designed, simulated and its layout generated. 1...|$|R
40|$|Abstract. The Event Calculus is a {{narrative}} based formalism for reasoning about actions and change originally proposed in logic programming form by Kowalski and Sergot. In this paper we summarise how variants of the Event Calculus may be expressed as classical logic axiomatisations, and how {{under certain circumstances}} these theories may be reformulated as “action description language ” domain descriptions using the Language E. This enables the classical <b>logic</b> <b>Event</b> Calculus to inherit various provably correct automated reasoning procedures recently developed for E. ...|$|E
40|$|If you're new to ActionScript 3. 0, or want {{to enhance}} your skill set, this bestselling book is the ideal guide. Designers, developers, and programmers alike will find Learning ActionScript 3. 0 {{invaluable}} for navigating ActionScript 3. 0 's learning curve. You'll learn the language by getting a clear look at essential topics such as <b>logic,</b> <b>event</b> handling, displaying content, classes, and much more. Updated for Flash Professional CS 5, this revised and expanded edition delivers hands-on exercises and full-color code samples to help you increase your abilities as you progress through the book. To...|$|E
40|$|Classical <b>logic</b> <b>Event</b> Calculus, and {{the special}} purpose logical action {{language}} E, are both well established formalisms for describing actions and change. However, there {{is yet to be}} an account of ramifications in Event Calculus sufficiently general to represent the classes of domains expressible in E. Indeed, an adequately general ramification theory constructed in any general purpose logical language still awaits. Therefore, under the motivation of creating a flexible ramification theory in a universal language, suitable for integration into a rich action theory, a new enhanced version of classical <b>logic</b> <b>Event</b> Calculus named EC-R is proposed. EC-R supports representation and reasoning about domains containing ramifications for classes of domains more general than those possible under previous general purpose language formulations. This article makes two main contributions. The first, EC-R, is a narrative-based action formalism able to represent concurrent events, non-deterministic actions and indirect causal effects by virtue of an integrated solution to the frame and ramification problems. The formalism can reason about significant subclasses of domains containing both mutually interacting effects and cyclic causal dependencies. The formalism is elaboration tolerant and may be integrated with the standard variants of the Event Calculus. The second contribution is the definition of a semantic mapping between EC-R and E, and a proof of soundness and completeness of the EC-R theory with respect to E’s model theoretic specification...|$|E
40|$|An event, {{as opposed}} to an atemporal property, has its own time and {{location}} and occurs once. Although the notion of events has been found in researches on ontology, logic, linguistics, artificial intelligence and deductive databases, the different approaches to this notion do not seem to capture the various logical aspects of events. This paper proposes an <b>event</b> <b>logic</b> with expressions such as quantification over events, event sort-hierarchy, and composition and disjointness of <b>events.</b> In the <b>logic,</b> <b>events</b> are regarded as constants, sorts, predicates and variables in an order-sorted second-order language, which provides knowledge representation and reasoning for event assertions. In order to implement a query answering system, we present a sorted tableau calculus for the refutation of <b>event</b> formulas in <b>logic...</b>|$|R
40|$|Abstract [...] - A mixed-mode {{simulator}} {{is described}} that can simulate voltage {{fluctuations in the}} power supply network. Current flow due to <b>logic</b> <b>events</b> is {{taken into account in}} order to predict the voltage fluctuations. The difference between the maximum voltage fluctuations calculated by the proposed mixed-mode simulation and these calculated by conventional circuit simulation are within 20 %, and we demonstrated the feasibility of the proposed simulation by simulating an entire MOS memory chip (36, 000 transistors) in 75 minutes on an HP 9000 / 735. I...|$|R
6000|$|... "Isn't it {{in a fair}} way {{to become}} so?" [...] asked the doctor; {{and he turned to}} the lawyer: [...] "What should you say was the <b>logic</b> of <b>events</b> among us for the last ten or twenty years?" ...|$|R
40|$|We {{present a}} tool for commonsense {{reasoning}} in the classical <b>logic</b> <b>event</b> calculus using satisfiability. We describe the tool, which takes event calculus reasoning problems as input, encodes the problems as propositional satisfiability problems, runs a satisfiability solver on the encoded problems, and produces solutions to the reasoning problems as output. We describe the encoding method and how various commonsense phenomena are expressed using the tool. We evaluate the tool on 14 benchmark commonsense reasoning problems for the event calculus, compare its performance with the causal calculator on eight zoo world test problems, and discuss two natural understanding applications built using the tool...|$|E
40|$|As the IT {{industry}} {{is becoming more}} and more interested in service oriented business models and upcoming technologies like Web Services or Grid Computing, the need for automated contract management increases accordingly. In this paper we evolve a formal representation for contractual agreements together with their monitoring and enforcement by standard components of logic programming. We incorporate different logical formalisms like Horn <b>Logic,</b> <b>Event</b> Calculus, Deontic Logic and ECA rules into one logical framework to execute complex contract rules on an individual or a group level together with their normative relationships (permissions, obligations and prohibitions). This logica...|$|E
40|$|Learning ActionScript 3. 0 {{gives you}} a solid {{foundation}} in the Flash language and demonstrates how {{you can use it}} for practical, everyday projects. The book does more than give you a handful of sample scripts, defining how ActionScript and Flash work. It {{gives you a}} clear look into essential topics such as <b>logic,</b> <b>event</b> handling, displaying content, migrating legacy projects to ActionScript 3. 0, classes, and much more. Written for those new to the language, this book doesn't rely exclusively on prior knowledge of object-oriented programming (OOP). Instead, it helps you expand your skillset by f...|$|E
5000|$|The report {{refers to}} various 'causes of the {{alienation}} and exasperation {{of the feelings}} of the population of Palestine'. It cites Jean de la Fontaine's lines in the original French to clarify the <b>logic</b> of <b>events</b> and the attitude of the local population: ...|$|R
5000|$|The <b>logic</b> {{behind the}} <b>event</b> study {{methodology}} (within the specific context of mergers) is explained in Warren-Boulton and Dalkir (2001): ...|$|R
40|$|In {{this paper}} a new {{approach}} for implementing CIRCAL algorithms using <b>event</b> <b>logic</b> is presented. A high-level description of an algorithm is expressed in CIRCAL, a formal parallel hardware description language. The approach employs a transition signaling convention and a request-acknowledgement protocol under bundled data model. The mapping approach is a syntax-directed one that will parse various CIRCAL constructs to their corresponding <b>event</b> <b>logic.</b> The mapping methodology is illustrated by an example...|$|R
40|$|Controlling the sensing of an {{environment}} by an agent {{has been accepted}} as necessary for effective operation within most practical domains. Usually, however, agents operate in partially observable domains where not all parameters of interest are accessible to direct sensing. In such circumstances, sensing actions must be chosen for what they will reveal indirectly, through an axiomatized model of the domain causal structure, including ramifications. This article shows how sensing can be chosen so as to acquire and use indirectly obtained information to meet goals not otherwise possible. Classical <b>logic</b> <b>Event</b> Calculus is extended with both a knowledge formalism and causal ramifications, and is used to show how inferring unknown information about a domain leads to conditional sensing actions. ...|$|E
40|$|User {{interface}} {{development is}} a time and resource consuming task. Thus, reusing existing UI components is a desirable approach for rapid UI development. To keep UIs maintainable, those components should be loosely coupled. Composing UIs of heterogeneous components developed with different technologies, on the other hand, is a non-trivial task not supported well by currently existing integration frameworks, and there is only little progress in automatizing the integration step. In this paper, we introduce a framework for UI integration which is capable of handling heterogeneous UI components. It facilitates events annotated with RDF and ontologies for assembling user interfaces from loosely coupled components. With that framework, UIs can be composed semi-automatically, based on <b>logic</b> <b>event</b> processing rules...|$|E
40|$|Abstract. Event {{processing}} networks {{emerged as}} a paradigm to implement applications that interact with distributed, loosely coupled components. Such a network consists of event producers, event consumers, and event processing agents that implement the application <b>logic.</b> <b>Event</b> processing networks are typically intended to process an extensive amount of events. Hence, {{there is a need}} for performance and scalability evaluation at design time. In this paper, we take up the challenge of modelling event processing networks using coloured Petri nets. We outline how this type of system is modelled and illustrate the formalisation with the widely used showcase of the Fast Flower Delivery Application (FFDA). Further, we report on the validation of the obtained coloured Petri net with an implementation of the FFDA in the ETALIS framework. Finally, we show how the net of the FFDA is employed for analysis with CPN-Tools. ...|$|E
5000|$|Several policy {{refinement}} {{approaches have}} been developed. The most notable ones {{are based on}} linear temporal <b>logic</b> [...] and <b>event</b> calculus.|$|R
40|$|AbstractThis work {{describes}} a model-based approach for contamination event detection in water distribution systems using chlorine mea- surements. The proposed method considers the known chlorine input injection signals, and uses multiple Monte-Carlo simulations which {{run in parallel}} to the real system, in order to compute at each time step, bounds of the expected chlorine concentration at the different chlorine sensing locations. The sensor measurements are then compared with the estimated bounds and according to a certain <b>event</b> <b>logic,</b> an <b>event</b> alarm flag is raised when these bounds are exceeded. The methodology is applied on a realistic benchmark network, taking into account uncertainties in the hydraulic dynamics...|$|R
50|$|A visual mapping {{engine is}} used to {{configure}} data transformation between data sets. Data can be restructured as it is transformed, thus allowing for dissimilar data structures between source and destination. Flow data access operates independently of the mapping layer. The applied mapping <b>logic</b> uses <b>events</b> containing Object Pascal code.|$|R
40|$|Abstract. Event {{detection}} is {{a central}} component in numerous wireless sensor network (WSN) applications. In spite of this, the area of event description has not received enough attention. The majority of current event description approaches rely on using precise values to specify event thresholds. However, we believe that crisp values cannot adequately handle the often imprecise sensor readings. In this paper we demonstrate that using fuzzy values instead of crisp ones significantly improves the accuracy of event detection. We also show that our fuzzy logic approach provides higher detection precision {{than a couple of}} well established classification algorithms. A disadvantage of using fuzzy logic is the exponentially growing size of the rule-base. Sensor nodes have limited memory and storing large rulebases could be a challenge. To address this issue we have developed a number of techniques that help reduce the size of the rule-base by more than 70 % while preserving the level of event detection accuracy. Key words: wireless sensor networks, fuzzy <b>logic,</b> <b>event</b> description, event detection accuracy...|$|E
40|$|This {{research}} {{presents a}} methodology for the ontological formalisation of vague spatial concepts from natural language, with an {{application to the}} automatic recognition of event occurrences on video data. The main issue faced when defining concepts sourced from language is vagueness, related {{to the presence of}} ambiguities and borderline cases even in simple concepts such as ‘near’, ‘fast’, ‘big’, etc. Other issues specific to this semantic domain are saliency, granularity and uncertainty. In this work, the issue of vagueness in formal semantics is discussed and a methodology based on supervaluation semantics is proposed. This constitutes the basis for the formalisation of an ontology of vague spatial concepts based on classical <b>logic,</b> <b>Event</b> Calculus and supervaluation semantics. This ontology is structured in layers where high-level concepts, corresponding to complex actions and events, are inferred through mid-level concepts, corresponding to simple processes and properties of objects, and low-level primitive concepts, representing the most essential spatio-temporal characteristics of the real world. The development of ProVision, an event recognition system based on a logic-programming implementation of the ontology, demonstrates a practical application of the methodology. ProVision grounds the ontology on data representing the content of simple video scenes, leading to the inference of event occurrences and other high-level concepts. The contribution of this research is a methodology for the semantic characterisation of vague and qualitative concepts. This methodology addresses the issue of vagueness in ontologies and demonstrates the applicability of a supervaluationist approach to the formalisation of vague concepts. It is also proven to be effective towards solving a practical reasoning task, such as the event recognition on which this work focuses...|$|E
2500|$|In June 2011, Amnesty International criticized [...] "Western media coverage" [...] which [...] "has {{from the}} outset {{presented}} a very one-sided view of the <b>logic</b> of <b>events,</b> portraying the protest movement as entirely peaceful and repeatedly suggesting that the regime's security forces were unaccountably massacring unarmed demonstrators who presented no security challenge." ...|$|R
40|$|Our {{topic is}} {{broadening}} a practical ”proofs-as-programs” method of program development to “proofs-as-processes”. We extend our previous results that implement proofs-as-processes {{for the standard}} model of asynchronous message passing computation to a much wider class of process models including the ¼-calculus and other process algebras. Our first result is a general process model whose definition in type theory is interesting in itself both technically and foundationally. Process terms are type free lambda-terms. Typed processes are elements of a co-inductive type. They are higher-order in that they can take processes as inputs and produce them as outputs. A second new result is a procedure to generate event structures over the general process model and then define <b>event</b> <b>logics</b> and <b>event</b> classes over these structures. Processes are abstract realizers for assertions in the <b>event</b> <b>logics</b> over them, and they extend the class of primitively realizable propositions built on the propositions-as-types principle. They also {{provide a basis for}} the third new result, showing when programmable event classes generate strong realizers that prevent logical interference as processes are synthesized...|$|R
40|$|We {{present a}} logical {{framework}} to reason about distributed systems called the <b>Logic</b> of <b>Events.</b> This <b>logic</b> has been formalized in Nuprl. We developed {{a suite of}} tools and tactics in Nuprl to reason about event classes. We also developed a programming language called EventML which allows programmers to write specifications of distributed protocols...|$|R
40|$|We {{propose a}} new {{foundation}} for security {{based on a}} logical concept of protected {{information that can be}} enforced in the mathematical structure of a computation system. We describe a computation system based on event structures and a <b>logic</b> of <b>events,</b> and we show how to model all limitations on the capabilities of adversaries using a theory of atoms. ...|$|R
40|$|In {{this paper}} we define the {{real-time}} <b>logic</b> of <b>event</b> clocks. This <b>logic</b> is inspired from event clock automata. The logic is defined, illustrated and {{shown to be}} decidable in Pspace by a simple decision procedure that relies to a reduction to event clock automata. The expressive power of the logic is compared to known formalisms...|$|R
50|$|Since 2005, Béziau {{has been}} {{organizing}} world congresses and schools on universal <b>logic.</b> These <b>events</b> bring together hundreds of researchers {{and students in}} the field and offer tutorials and research talks {{on a wide range of}} subjects. Traditionally, the congresses have a contest and a secret speaker whose identity is only revealed when his or her talk begins.|$|R
40|$|The {{notion of}} stable {{coherence}} has been recently introduced to characterize coherent assignments to conditional many-valued events {{by means of}} hyperreal-valued states. In a nutshell, an assignment, or book, β on a finite set of conditional events is stably coherent if there exists a coherent variant β of β such that β maps all antecedents of conditional events to a strictly positive hyperreal number, and such that β and β differ by an infinitesimal. In this paper, we provide a characterization of stable coherence in terms of layers of zero probability for books on Łukasiewicz <b>logic</b> <b>events.</b> © 2016, Springer-Verlag Berlin Heidelberg. The {{authors would like to}} thank there referee for the valuable comments that considerably improved the presentation of this paper. Flaminio has been funded by the Italian project FIRB 2010 (RBFR 10 DGUA_ 002). Godo has been also funded by the MINECO/FEDER Project TIN 2015 - 71799 -C 2 - 1 -P. Peer Reviewe...|$|R
6000|$|... "We {{had that}} {{question}} the other night, didn't we? Our legal friend here {{seemed to feel}} that we might rub along indefinitely as we are doing, or work out an Altruria of our own; or {{go back to the}} patriarchal stage and own our working-men. He seemed not to have so much faith in the <b>logic</b> of <b>events</b> as I have. I doubt if it is altogether a woman's logic. Parole femmine, fatti maschi, and the <b>logic</b> of <b>events</b> isn't altogether words; it's full of hard knocks, too. But I'm no prophet. I can't forecast the future; I prefer to take it as it comes. There's a little tract of William Morris's, though--I forget just what he calls it--that is full of curious and interesting speculation on this point. He thinks that, if we keep the road we are now going, the last state of labor will be like its first, and it will be owned." ...|$|R
5000|$|The Canadian Technology Awards is {{the inaugural}} awards {{ceremony}} honouring MADE-IN-CANADA branded technologies and technology leaders. Co-produced by GOOGLE, Facebook, Extreme Startups, Fasken Martineau DuMoulin, reBOOT Canada and Infinite <b>Logic</b> the <b>event</b> is {{a dinner party}} with eight stimulating speakers exploring issues surrounding Canadian innovation, a showcase of ten emerging technologies on demo in the courtyard reception {{as well as an}} awards presentation honouring 3 categories: ...|$|R
60|$|Alford dropped weakly {{into the}} only {{chair in the}} room, which stood next the door {{by the head of}} his bed, and {{abandoned}} himself a helpless prey to the <b>logic</b> of the <b>events.</b>|$|R
