21|1700|Public
50|$|Early {{practice}} of web archiving involved the highlighting of a “site {{of the week}} award” as a record for the contest. Besides that, another early practice was the professional <b>link</b> <b>list</b> (for example Amnesty International’s list of human rights groups) and (Yahoo!) directory and Open Directory Project.|$|E
50|$|Authorized Program Facility (APF) {{is a new}} {{facility}} that limited use of certain dangerous services to programs that are authorized, that is link edited with AC(1) and were loaded from the <b>link</b> <b>list,</b> LPA, or SYS1.SVCLIB. In MVS IBM enhanced the facility to allow the installation to designate additional data sets as authorized.|$|E
50|$|Franko Luin had a keen {{interest}} in languages, particularly the international auxiliary language Esperanto, and was for many years president of the Swedish Esperanto association SEF. He wrote poems, translated songs into Esperanto and organized a well renowned homepage, the Kiosk, which had an enormous <b>link</b> <b>list</b> of online newspapers. In his later years, he collected and digitized many 19th and 20th century works by Slovene classical authors and distributed them on his homepage Beseda ("Word").|$|E
5000|$|An {{asymmetric}} doubly <b>linked</b> <b>list</b> {{is somewhere}} between the singly <b>linked</b> <b>list</b> and the regular doubly <b>linked</b> <b>list.</b> It shares some features with the singly <b>linked</b> <b>list</b> (single-direction traversal) and others from the doubly <b>linked</b> <b>list</b> (ease of modification) ...|$|R
40|$|ABSTRACT – Our {{research}} paper aims at <b>linked</b> <b>list</b> {{which is a}} data structure {{and it is the}} collection of nodes which together represent a sequence. <b>Linked</b> <b>list</b> are of many types. It can be singly <b>linked</b> <b>list,</b> doubly <b>linked</b> <b>list,</b> circular <b>linked</b> <b>list.</b> In this we will focus on how to traverse a <b>linked</b> <b>list,</b> insertion of a node {{at the beginning of the}} <b>linked</b> <b>list,</b> insertion of the node after a node, deletion of node from beginning and deletion of node from the end of the <b>linked</b> <b>list</b> and how two <b>linked</b> <b>lists</b> can be concatenated...|$|R
5000|$|... {{the skip}} list, a similar {{variation}} on the <b>linked</b> <b>list,</b> offers fast lookup and hurts the advantages of <b>linked</b> <b>lists</b> (quick insert/deletion) less than an unrolled <b>linked</b> <b>list</b> ...|$|R
5000|$|Blogger allows {{its users}} {{to choose from}} various {{templates}} and then customize them. Users may also choose {{to create their own}} templates using CSS. The new design template, known as [...] "Dynamic View", was introduced on 31 August 2011 with Dynamic Views being introduced on 27 September 2011. It is built with AJAX, HTML5, and CSS3. The time for loading is 40 percent shorter than traditional templates, and allows user to present blog in seven different ways: classic, flipcard, magazine, mosaic, sidebar, snapshot, and timeslide. Readers still have the option to choose preferable views when the blog owner has set a default view. Some of the widgets (e.g., Labels, Profile, <b>Link</b> <b>List,</b> Subscription Links, Followers and Blog Archive etc.) are available for Dynamic Views; other templates are chosen by the blogger.|$|E
3000|$|... [l](i, j) and two link lists: the {{insignificant}} nodes <b>link</b> <b>list</b> LIN and {{the significant}} pixels <b>link</b> <b>list</b> LSP. Both Amplitude Quadtree Q [...]...|$|E
40|$|Before {{going on}} to discuss an {{algorithm}} for decomposing a poset into minimum number of chains, we would look at some possible representations of posets {{which can be used}} to design efficient algorithms for doing various operations on posets. For this purpose, we should first examine some of the common operations that need to be performed on the posets. Given a poset P, the following operations on elements x  y ¡ P are required to be performed: 1. Check if x ¢ y 2. Check if x covers y 3. Compute x £ y and x ¤ y In the following sections, we consider some representations for posets and compare their performance for the above set of operations. 2 Adjacency list representation Since a poset is a graph, so we can use an adjacency list representation similar to a graph for it. In an adjacency list representation, we have a <b>link</b> <b>list</b> for each element of the poset. The <b>link</b> <b>list</b> for an element contains the other elements of the poset that are related to it. We can maintain two relationships through a adjacency list: 1. Cover Relation (e ¥) : The <b>link</b> <b>list</b> for element x ¡ P = ¦ y: y ¡ P  x y...|$|E
50|$|In {{languages}} {{that support}} abstract data types or templates, <b>linked</b> <b>list</b> ADTs or templates {{are available for}} building <b>linked</b> <b>lists.</b> In other languages, <b>linked</b> <b>lists</b> are typically built using references together with records.|$|R
25|$|Difficulties {{arise in}} <b>linked</b> <b>lists</b> {{when it comes}} to reverse traversing. For instance, singly <b>linked</b> <b>lists</b> are {{cumbersome}} to navigate backwards and while doubly <b>linked</b> <b>lists</b> are somewhat easier to read, memory is consumed in allocating space for a back-pointer.|$|R
50|$|XOR <b>linked</b> <b>lists</b> {{leverage}} XOR {{properties in}} order to save space to represent doubly <b>linked</b> <b>list</b> data structures.|$|R
40|$|Book Searching with Recommendation is a {{application}} to find recommendation book on same categories as user input or find the recommendation on another book that another user mostly lend together. This diagram make user {{could find the}} title and number of location of book in library easily after get the recommendation. Book Searching use list of book data and transaction data library in txt database. This information used to find recommendation book. After read data information from txt file, the information is stored on Tree and <b>Link</b> <b>List</b> as data structure in Apriori and FP-Growth algorithm and <b>Link</b> <b>List</b> if using K-Means Algorithm. Information at data structure could be read to find the recommendation of user’s input. The output are recommended book {{and the number of}} place at librar...|$|E
40|$|The {{process takes}} {{less time for}} {{handling}} instructions then would be speedy and efficient. The speed of the process is not only depends on architectural features and operational frequency, but also depends on the algorithm and data structure, which is used for that process. There are many page replacement algorithms such as Least Recently Used ((LRU), First-In-First-Out (FIFO), etc. are available in memory management. Performance of any page replacement algorithm depends on data structure {{which is used to}} implement a page table. Now a day, hash table is widely used to implement a page table because of its efficiency in dictionary operations. In this paper we use self-adjustable doubly circular <b>link</b> <b>list,</b> skip list and splay tree as a data structure to implement page table for LRU algorithm. This paper shows that how the combination of LRU with self-adjustable doubly circular <b>link</b> <b>list,</b> skip list and splay tree towards improvement of hit ratio...|$|E
40|$|This {{site was}} created to provide information, research, and {{networking}} for people working in urban and community forestry. It is meant to inform, educate, and inspire the researcher, arborist, community group leader, and volunteer. The site contains: educational materials, how-to guides, a research database, discussion forums, a quarterly web-zine, a comprehensive <b>link</b> <b>list</b> of national and local resources, late-breaking news, interactive tools for tree identification and selection, and an Ask an Arborist section. Educational levels: General public, Graduate or professional...|$|E
5000|$|CDR coding, another {{technique}} for decreasing overhead and improving cache locality in <b>linked</b> <b>lists</b> similar to unrolled <b>linked</b> <b>lists.</b>|$|R
5000|$|XOR <b>linked</b> <b>list,</b> a doubly <b>linked</b> <b>list</b> {{that uses}} one XORed pointer per node {{instead of two}} {{ordinary}} pointers.|$|R
25|$|Nodes in a <b>linked</b> <b>list</b> must be read {{in order}} from the {{beginning}} as <b>linked</b> <b>lists</b> are inherently sequential access.|$|R
40|$|One of {{the major}} {{challenges}} in programming languages is to support different data structures and their variations in both static and dynamic aspects. One of the these data structures is the property list which applications {{use it as a}} convenient way to store, organize, and access standard types of data. In this paper, the standards methods for implementation of the Property Lists, including the Static Array, <b>Link</b> <b>List,</b> Hash and Tree are reviewed. Then an efficient method to implement the property list is presented. The experimental results shows that our method is fast compared with the existing methods. Comment: 9 Pages, 5 Figure...|$|E
40|$|In this research, an AHPL (A Hardware Programming Language) based {{automation}} system {{is used to}} design and verify the Intel- 8080 microprocessor from the RTL (Register Transfer Level) hardware description through the network list of transistors. The HPSIM {{is used as a}} RTL simulator which interprets the AHPL description and executes the connections, branches, and register transfer, and prints line or register values for each circuit clock period. After the AHPL description has been translated to switch-level <b>link</b> <b>list,</b> ESIM is applied for more detailed simulation to ensure the digital behavior in this microprocessor design is correct. The ESIM is an event-driven switch-level simulator which accepts commands from the user, and executes each command before reading the next one. After performing these different levels of simulations, a comparison is discussed at the end...|$|E
40|$|Several {{recent studies}} {{employed}} traditional information retrieval (IR) methods {{to assist in}} the mapping of elements of software engineering artifacts to each other. This activity is referred to as candidate link generation because the final say in determining the final mapping belongs to the human analyst. Feedback techniques that utilize information from the analyst (on whether the candidate links are correct or not) have been shown {{to improve the quality of}} the mappings. Yet the analyst is making an investment of time in providing the feedback. This leads to the question of whether or not guidance can be provided to the analyst on how to best utilize that time. This paper simulates a number of approaches an analyst might take to evaluating the same candidate <b>link</b> <b>list,</b> and discovers that more structured and organized approaches appear to save time/effort of the analyst. 1...|$|E
40|$|Using doubly <b>linked</b> <b>list</b> in {{embedded}} {{systems can be}} expensive. Although doubly linked is efficient {{in terms of time}} complexity and highly flexible in itself, enabling easy traversal and update, but it often demands more memory space compared to other list data strucure – this is {{as a result of the}} space required for the extra pointers, doubling the amount needed for a singly <b>linked</b> <b>list.</b> In this paper, we introduce the S-linked list – a hybrid of the concept of the singly <b>linked</b> <b>list</b> and the circular <b>linked</b> <b>list.</b> The hybrid gives a data structure that is similar to the unrolled <b>linked</b> <b>list,</b> but rather than have an array in each node, we have a singly <b>linked</b> <b>list.</b> An analysis of the space complexity and assymptotic time complexity of the algorithm was carried out...|$|R
40|$|This {{application}} uses to displaying searching name, {{in search}} of name all data fill in the <b>linked</b> <b>list,</b> <b>linked</b> <b>list</b> consisting of nim, name, address and phone. <b>Linked</b> <b>list</b> itself has the advantage in the allocation of memory, so the data can be accommodated {{as much as we}} want. This application also use Hash table for to accelerate the search time. Hash Table also can accommodate data alphabet to match the existing data in the <b>linked</b> <b>list...</b>|$|R
5000|$|A {{non-blocking}} <b>linked</b> <b>list</b> is {{an example}} of non-blocking data structures designed to implement a <b>linked</b> <b>list</b> in shared memory using synchronization primitives: ...|$|R
40|$|Network Processor (NP) is {{optimized}} {{to perform}} special network functionalities. It has highly parallel processing architecture to achieve high performance. Ad hoc network {{is an exciting}} research aspect due to the characters of self-organization、 dynamically changing topology and temporary network life. However, all the characters make the security problem more serious. Denial-of-Service (DoS) attack is the main puzzle in the security of Ad hoc network. A novel NP-based security scheme is proposed to combat the attack in AODV routing protocol. Security agent is established by a hardware thread in NP. Agent can update itself at some interval by the trustworthiness of the neighbor nodes. Agent can trace the RREQ and RREP messages stream to aggregate the key information to <b>link</b> <b>list</b> and analyze them by intrusion detection algorithm. NS 2 simulator is expanded to validate the security scheme. Simulation results show that NP-based security scheme is highly effective to detect and block DoS attack...|$|E
40|$|Now {{internet}} {{like as a}} giant library by website as its book. In {{this time}} easy and speed to be a important condition for the seeking of a information. Therefore, various aspect require user can learning the Al-Qur'an base on the web. Besides user can quickly {{to look for the}} sentence translation Al-Qur'an with 3 kinds way, for example: 1. By searching Juz Al-Qur'an 2. By searching Surat Al-Qur'an 3. By searching word and <b>link</b> <b>list</b> the Surat Al-Qur'an So that can easely the user or santri to look for the information of about translation sentence Al-Qur'an with swiftly and interaktif. Besides seeking process in this web also there process learning, that is process the evaluation santri. This Web is design by using Macromedia Dreamwaver and making with the JSP by using database Mysql. Existence of this Al-Qur'an web, is expected will give the amenity to us in learning content Al-Qur'an Keyword : Al-Qur'an,, Santri, Evaluat...|$|E
40|$|Couple {{of decades}} back, {{there was a}} {{tremendous}} development in the field of algorithms, which were aimed at finding efficient solutions for widespread applications. The benefits of these algorithms were observed in their optimality and simplicity with speed. Many of the algorithms were readdressed {{to solve the problem of}} finding shortest path. Heuristic search techniques make use of problem specific knowledge to find efficient solutions. Most of these techniques determine the next best possible state leading towards the goal state by using evaluation function. This paper shows the practical performance of the following algorithms, to find the shortest path:Hill Climbing, Steepest-ascent, and Best-First and A*. While implementing these algorithms, we used the data structures which were indicated in the original papers. In this paper we present an alternative data structure multi-level <b>link</b> <b>list</b> and apply the heuristic technique to solve shortest path problem. This was tested for class of heuristic search family [...] A* and Best First Search approaches. The results indicate that use of this type of data structure helps in improving the performance of algorithms drastically. ...|$|E
40|$|This {{document}} {{introduces the}} basic structures and techniques for building <b>linked</b> <b>lists</b> {{with a mixture}} of explanations, drawings, sample code, and exercises. The material is useful if you want to understand <b>linked</b> <b>lists</b> or {{if you want to see}} a realistic, applied example of pointer-intensive code. A separate document, <b>Linked</b> <b>List</b> Problem...|$|R
50|$|In general, if {{a set of}} data {{structures}} {{needs to}} be included in <b>linked</b> <b>lists,</b> external storage is the best approach. If a set of data structures need {{to be included in}} only one <b>linked</b> <b>list,</b> then internal storage is slightly better, unless a generic <b>linked</b> <b>list</b> package using external storage is available. Likewise, if different sets of data that can be stored in the same data structure are to be included in a single <b>linked</b> <b>list,</b> then internal storage would be fine.|$|R
25|$|A {{binary tree}} {{can be seen}} as a type of <b>linked</b> <b>list</b> where the {{elements}} are themselves <b>linked</b> <b>lists</b> of the same nature. The result is that each node may include a reference to the first node of one or two other <b>linked</b> <b>lists,</b> which, together with their contents, form the subtrees below that node.|$|R
40|$|Binary {{search tree}} is a best-suited data {{structure}} for data storage and retrieval when entire tree could be accommodated {{in the primary}} memory. However, this is true only when the tree is height-balanced. Lesser the height faster the search will be. Despite of the wide popularity of Binary search trees {{there has been a}} major concern to maintain the tree in proper shape. In worst case, a binary search tree may reduce to a linear <b>link</b> <b>list,</b> thereby reducing search to be sequential. Unfortunately, structure of the tree depends on nature of input. If input keys are not in random order the tree will become higher and higher on one side. In addition to that, the tree may become unbalanced after a series of operations like insertions and deletions. To maintain the tree in optimal shape many algorithms have been presented over the years. Most of the algorithms are static in nature as they take a whole binary search tree as input to create a balanced version of the tree. In this paper, few techniques have been discussed and analyzed in terms of time and space requirement. Key words...|$|E
40|$|Extensible Markup Language (XML) {{nowadays}} {{is one of}} {{the most}} important standard media used for exchanging and representing data through the Internet. Storing, updating and retrieving the huge amount of web services data such as XML is an attractive area of research for researchers and database vendors. In this thesis, we propose and develop a new mapping model, called MAXDOR, for storing, rebuilding, updating and querying XML documents using a relational database without making use of any XML schemas in the mapping process. The model addressed the problem of solving the structural hole between ordered hierarchical XML and unordered tabular relational database to enable us to use relational database systems for storing, updating and querying XML data. A multiple <b>link</b> <b>list</b> is used to maintain XML document structure, manage the process of updating document contents and retrieve document contents efficiently. Experiments are done to evaluate MAXDOR model. MAXDOR will be compared with other well-known models available in the literature(Tatarinov et al., 2002) and (Torsten et al., 2004) using total expected value of rebuilding XML document execution time and insertion of token execution time. EThOS - Electronic Theses Online ServiceGBUnited Kingdo...|$|E
40|$|Biographical {{data are}} needed in a large variety of history of {{astronomy}} studies. For these, information not only about outstanding scientists but also about all other contributors to astronomy and astrophysics has to be retrieved. The usual sources like major encyclopaedias and biographical dictionaries of science are often not very helpful, {{because the number of}} persons covered be these is rather limited. However, there are many special sources containing biographical data for thousands of 20 th century astronomers and astrophysicists: national, regional and special biographical dictionaries (general, of astronomy, of related fields, and of science in general); biographical appendices to books on history of astronomy; obituaries, biographies, papers on history of astronomy, personal notes, interviews, and data on authors (in journals, newsletters, newspapers, and books); membership directories of societies; annual reports of institutions and societies; Who’s Who of science and in general; World Wide Web; and others. The problem is, however, how to find these “hidden ” sources. The main bibliographic compilations of astronomy (Astronomischer Jahresbericht, Astronomy and Astrophysics Abstracts, Astrophysical Data System) list only a minor part of the sources mentioned above. There are at least three online bio-bibliographical inventories [1 – 3] and a WWW <b>link</b> <b>list</b> [4] directing to biographical sources for several thousand 20 th century astronomers. Nevertheless, the majority of sources is not covered by these...|$|E
2500|$|In general, if {{a set of}} data {{structures}} {{needs to}} be included in <b>linked</b> <b>lists,</b> external storage is the best approach. [...] If a set of data structures need {{to be included in}} only one <b>linked</b> <b>list,</b> then internal storage is slightly better, unless a generic <b>linked</b> <b>list</b> package using external storage is available. [...] Likewise, if different sets of data that can be stored in the same data structure are to be included in a single <b>linked</b> <b>list,</b> then internal storage would be fine.|$|R
5000|$|An XOR <b>linked</b> <b>list</b> is a data {{structure}} used in computer programming. It {{takes advantage of}} the bitwise XOR operation to decrease storage requirements for doubly <b>linked</b> <b>lists.</b>|$|R
25|$|On {{the other}} hand, dynamic arrays (as well as fixed-size array data structures) allow constant-time random access, while <b>linked</b> <b>lists</b> allow only {{sequential}} access to elements. Singly <b>linked</b> <b>lists,</b> in fact, {{can be easily}} traversed in only one direction. This makes <b>linked</b> <b>lists</b> unsuitable for applications where it's useful to look up an element by its index quickly, such as heapsort. Sequential access on arrays and dynamic arrays is also faster than on <b>linked</b> <b>lists</b> on many machines, because they have optimal locality of reference and thus {{make good use of}} data caching.|$|R
