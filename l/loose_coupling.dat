847|132|Public
25|$|Distributed {{programming}} typically {{falls into}} one of several basic architectures: client–server, three-tier, n-tier, or peer-to-peer; or categories: <b>loose</b> <b>coupling,</b> or tight coupling.|$|E
500|$|The branch-line coupler {{consists}} of two parallel transmission lines physically coupled together with two or more branch lines between them. [...] The branch lines are spaced λ/4 apart and represent sections of a multi-section filter design {{in the same way}} as the multiple sections of a coupled line coupler except that here the coupling of each section is controlled with the impedance of the branch lines. [...] The main and coupled line are [...] of the system impedance. [...] The more sections there are in the coupler, the higher is the ratio of impedances of the branch lines. [...] High impedance lines have narrow tracks and this usually limits the design to three sections in planar formats due to manufacturing limitations. [...] A similar limitation applies for coupling factors looser than low coupling also requires narrow tracks. [...] Coupled lines are a better choice when <b>loose</b> <b>coupling</b> is required, but branch-line couplers are good for tight coupling and can be used for [...] hybrids. [...] Branch-line couplers usually do not have such a wide bandwidth as coupled lines. [...] This style of coupler is good for implementing in high-power, air dielectric, solid bar formats as the rigid structure is easy to mechanically support.Matthaei et al., pp.809–811Räisänen and Lehto, p.127 ...|$|E
2500|$|In more {{sophisticated}} crystal receivers, the tuning coil is replaced with an adjustable air core antenna coupling transformer which improves the selectivity by {{a technique called}} <b>loose</b> <b>coupling.</b> This ...|$|E
40|$|AbstractTight couple 70 S ribosmes are {{converted}} to <b>loose</b> <b>couple</b> ones on enzymatic binding of phenylalanyl-tRNA. Enzymatic binding at 0 °C {{as well as}} nonenzymatic binding {{does not lead to}} any change. Further, no change takes place when the P site is occupied by N-acetylphenylalanyl-tRNA. <b>Loose</b> <b>couple</b> 70 S ribosomes are not affected by either enzymatic or nonenzymatic binding of phenylalany-tRNA...|$|R
3000|$|... [9]. Using {{only the}} mobile smart phone device offers a more {{generalized}} solution, but suffers from limited sensor accessing, poor MEMs (Micro Electro-Mechanical Systems) sensor quality, and <b>looser</b> <b>coupling</b> between the user’s {{movement and the}} sensing capability. CompAcc [...]...|$|R
5000|$|One of {{the most}} popular dances among Chilotes, this is danced by two <b>loose</b> <b>couples,</b> {{handkerchiefs}} in hands. It most likely came from Argentina where it is called [...] "Perico", and evolved in Chiloe, acquiring the name or “Pericona”.|$|R
2500|$|Ordinary {{transformers}} {{are designed}} to be [...] "tightly coupled". Due to the iron core and close proximity of the windings, they have a high mutual inductance (M), the coupling coefficient is close to unity 0.95 - 1.0, which means almost all the magnetic field of the primary winding passes through the secondary. The Tesla transformer in contrast is [...] "loosely coupled", the primary winding is larger in diameter and spaced apart from the secondary, so the mutual inductance is lower and the coupling coefficient is only 0.05 to 0.2. This means that only 5% to 20% of the magnetic field of the primary coil passes through the secondary when it is open circuited. The <b>loose</b> <b>coupling</b> slows the exchange of energy between the primary and secondary coils, which allows the oscillating energy to stay in the secondary circuit longer before it returns to the primary and begins dissipating in the spark.|$|E
5000|$|<b>Loose</b> <b>coupling</b> is an {{architectural}} principle and design goal in service-oriented architectures; eleven forms of <b>loose</b> <b>coupling</b> and their tight coupling counterparts are listed in: ...|$|E
50|$|Event-driven {{architecture}} also aims at promoting <b>loose</b> <b>coupling.</b>|$|E
40|$|AbstractRibosomes from Escherichia coli {{have been}} shown to undergo subunit {{dissociation}} at elevated hydrostatic pressure. This holds for both crude and highly purified ribosomes. No inhibitory effect could be detected by addition of either the S 100 supernatant, or tRNA, polyuridylic acid, and spermine. Light scattering experiments at pressures up to 1000 bar reveal different susceptibility of tight <b>couple</b> and <b>loose</b> <b>couple</b> ribosomes toward pressure dissociation. Tight couples are subjected to EF-Tu-catalyzed binding of aminoacyl-tRNA, thus yielding a model system of the elongating ribosome before the peptidyl transfer step. High pressure dissociation of this compound suggests that enzymatic binding converts tight <b>couples</b> into <b>loose</b> <b>couples.</b> A hypothesis referring to conformational changes during the elongation cycle is presented...|$|R
25|$|Reducing the {{coupling}} between the coils, by physically separating {{them so that}} less of the magnetic field of one intersects the other, reduces the mutual inductance, narrows the bandwidth, and results in much sharper, more selective tuning than that produced by a single tuned circuit. However, the <b>looser</b> <b>coupling</b> also reduced {{the power of the}} signal passed to the second circuit. The transformer was made with adjustable coupling, to allow the listener to experiment with various settings to gain the best reception.|$|R
50|$|The authors further {{distinguish}} between 'Aggregation', where one object 'has' or 'is part of' another object (implying that an aggregate object and its owner have identical lifetimes) and acquaintance, where one object merely 'knows of' another object. Sometimes acquaintance is called 'association' or the 'using' relationship. Acquaintance objects may request operations of each other, but they aren't responsible for each other. Acquaintance is a weaker relationship than aggregation and suggests much <b>looser</b> <b>coupling</b> between objects, which {{can often be}} desirable for maximum maintainability in a design.|$|R
50|$|This pattern {{promotes}} {{the idea of}} <b>loose</b> <b>coupling.</b>|$|E
5000|$|... #Subtitle level 2: Extreme <b>loose</b> <b>coupling</b> {{and well}} {{distributed}} ...|$|E
5000|$|... #Subtitle level 3: <b>Loose</b> <b>coupling</b> and the {{information}} environment ...|$|E
40|$|In {{this paper}} a {{heterogeneous}} network model {{based on the}} IMS-SIP (session Initiation protocol) {{with the help of}} Authentication, Authorization, and Accounting (AAA) protocol that integrates the Worldwide Interoperability for Microwave Access (WiMAX), Universal Mobile Telecommunications System (UMTS) and Wireless Local Area Network (WLAN) technologies is proposed to improve QoS. The proposed <b>Loose</b> <b>coupled</b> WiMAX-UMTS-WLAN convergence architecture using IMS is compared with interworking of WiMAX-UMTS-WLAN without IMS and WiMAX-UMTS interworking with IMS. The QoS performance metrics such as different traffic delays such as Voice over IP (delay sensitive), Video streaming, Web browsing and background traffic (email, FTP), throughput ar...|$|R
50|$|The {{specification}} also {{covers the}} issues of a distributed implementation on multiple material resources in a network or a centralized implementation, with all the modules installed in a single material support. Information sharing between modules is <b>loose</b> <b>coupled.</b> This promotes low dependence between modules, reducing the impact of changes in one module on other modules, and facilitating the modules' reuse. In this way, the modules {{have little or no}} knowledge of the functioning of any other modules and the communication between modules is done through the exchange of messages following a precise communication protocol provided by the architecture's API.|$|R
5000|$|TDD {{can lead}} to more modularized, flexible, and {{extensible}} code. This effect often comes about because the methodology requires that the developers think of the software in terms of small units that can be written and tested independently and integrated together later. This leads to smaller, more focused classes, <b>looser</b> <b>coupling,</b> and cleaner interfaces. The use of the mock object design pattern also contributes to the overall modularization of the code because this pattern requires that the code be written so that modules can be switched easily between mock versions for unit testing and [...] "real" [...] versions for deployment.|$|R
50|$|Cloud {{architecture}}, {{the systems}} {{architecture of the}} software systems involved {{in the delivery of}} cloud computing, typically involves multiple cloud components communicating with each other over a <b>loose</b> <b>coupling</b> mechanism such as a messaging queue. Elastic provision implies intelligence in the use of tight or <b>loose</b> <b>coupling</b> as applied to mechanisms such as these and others.|$|E
50|$|The {{compound}} {{application of}} service reusability, service abstraction and service <b>loose</b> <b>coupling</b> principles help developing composable services.|$|E
50|$|Four {{types of}} autonomy, which promote <b>loose</b> <b>coupling,</b> are: {{reference}} autonomy, time autonomy, format autonomy, and platform autonomy.|$|E
30|$|To {{solve the}} {{challenge}} of consistency, two different models can be adopted to implement the SDRAN architecture: “evolutionary” and “clean slate.” The evolutionary model allows for gradually deployment based in existing networks: legacy control plane entities from operators can connect to the core network without modifying the existing interfaces. SDRAN controller implements backward-compatible interfaces to support the interworking with legacy network entities. There are two modes to couple the legacy architecture and future evolutional architecture: <b>loose</b> <b>couple</b> (fully decouple the legacy control plane entities and evolved control plane entities) and tight couple (reuse the legacy control plane entities with evolved structure as much as possible).|$|R
50|$|All {{these models}} make it {{possible}} for one software component to affect the behavior of another component over a network. They are different in that RPC- and ORB-based middleware create systems of tightly coupled components, whereas MOM-based systems allow for a <b>looser</b> <b>coupling</b> of components. In an RPC- or ORB-based system, when one procedure calls another, it must wait for the called procedure to return before it can do anything else. In these synchronous messaging models, the middleware functions partly as a super-linker, locating the called procedure on a network and using network services to pass function or method parameters to the procedure and then to return results.|$|R
40|$|Abstract. Service-Oriented Architecture (SOA) is a {{well known}} {{paradigm}} for development of flexible and <b>loose</b> <b>coupled</b> software applications using services that are available in a network. The latter provide business functionality through well-defined interfaces that can be dynamically discovered. Services can be aggregated into more complex ones called composite services. Currently, there exist a lot of composition approaches that serve different goals. In {{order to be able}} to comprehensively study the web-service composition process, different approaches should be analyzed and organized into appropriate taxonomy framework. This paper presents an overview of current approaches for service composition and further analyzes them toward various aspects of the composition model...|$|R
5000|$|Mediator allows <b>loose</b> <b>coupling</b> {{between classes}} {{by being the}} only class that has {{detailed}} knowledge of their methods.|$|E
50|$|<b>Loose</b> <b>coupling</b> of {{interfaces}} can {{be enhanced}} by publishing data in a standard format (such as XML or JSON).|$|E
5000|$|Development of {{the theory}} for an {{arbitrary}} number of systems with <b>loose</b> <b>coupling</b> subjected to determinate and random dynamic inputs (1967) ...|$|E
40|$|AbstractThe {{study was}} {{conducted}} to gain some important characteristics of the influence of the blade flap-bending/torsion elastic coupling stiffness on blade root flap-shear force and vibratory hub loads of a bearingless rotor. Based on the aerodynamic force, this paper presents a <b>loose</b> <b>coupled</b> aeroelastic analytical model by finite element method. Four sets of composite rotor with different elastic couplings were designed and investigated. The results of the investigation showed that flap-bending/torsion couplings {{have a significant effect on}} the rotor vibratory hub loads and the distribution of the couplings also critical for the degree of vibration reduction. Through the present research, it has been demonstrated that structural couplings can significantly impact rotor vibration characteristics...|$|R
40|$|AbstractUsing Computational Fluid Dynamics (CFD), {{unsteady}} flow-field {{related to}} multi-store separating from aircraft was researched. The unsteady flow-field's change and multi-store's movement were interacted and interdepended. Unstructured dynamic mesh, Euler equation, 6 -DOF kinematics, dynamics Equations of rigid body were solved and updated {{at the same}} physics time step with <b>loosing</b> <b>coupling.</b> AEDC wind tunnel test model is computed in this paper, the result of solution is in very good agreement with the wind tunnel test result. Last, multi-store separating from aircraft are modeled and simulated. The simulated {{results indicate that the}} movement of border upon stores has severe aerodynamic interfere action. The sequence and distance of multi-store have determinant influence for safe separation...|$|R
40|$|Treatment of corn {{mitochondria}} (Zea mays L., WF 9 (Tms) × M 14) with polycations (protamine, pancreatic ribonuclease, or polylysine) releases acceptorless respiration if phosphate is present. Concurrently, {{there is}} extensive active swelling which is reversed when respiration is uncoupled or stopped. Mersalyl, the phosphate transport inhibitor, blocks both {{the release of}} respiration and the active swelling. Diversion of energy into phosphate transport lowers respiratory control and ADP: O ratios. This response is termed “loose coupling” in distinction to “uncoupling” in which energy is made unavailable for either transport or ATP formation. Corn mitochondria as used here are endogenously <b>loose</b> <b>coupled</b> to some extent, and show state 4 respiration linked to active transport...|$|R
5000|$|Some {{scholars}} advocate that {{loosely coupled}} system and garbage can model guarantee {{the flexibility of}} higher education organizations. Proponents of <b>loose</b> <b>coupling</b> system believe that the university's academic freedom and students' individual identity will be destroyed if administrators tighten up the <b>loose</b> <b>coupling.</b> However, Weick argues that the [...] "unpredictability (of an organization) is insufficient evidence for concluding that the elements in a system are loosely coupled". Other scholars notice the Weick's warning that <b>loose</b> <b>coupling</b> {{should not be used}} as a normative model. Universities will not lose their academic freedom with a tighter coupled system. Frank W. states that [...] "They (universities) are tightly coupled in some aspects and uncoupled in other aspects. Tight coupling occurs when an issue supports the status quo. Uncoupling occurs when an issue challenges the status quo".|$|E
50|$|Distributed {{programming}} typically {{falls into}} one of several basic architectures: client-server, three-tier, n-tier, or peer-to-peer; or categories: <b>loose</b> <b>coupling,</b> or tight coupling.|$|E
5000|$|<b>Loose</b> <b>coupling</b> in broader {{distributed}} system design {{is achieved by}} the use of transactions, queues provided by message-oriented middleware, and interoperability standards.|$|E
40|$|With {{the advent}} of Service Oriented Architectures, more {{applications}} are built in a distributed manner based on <b>loose</b> <b>coupled</b> services. In this context, Workflow Management Systems {{play an important role}} as they are the means to both define the processes that realize the application goals as well as implement the orchestration of the different services. The purpose of the chapter is to give an overview of various solutions regarding workflow semantics and languages, as well as their enactment within the scope of distributed systems. To this end, major focus is given to solutions that are aimed at Grid environments. Scheduling algorithms and advance reservation techniques are also discussed as these are among the hottest research topics in Workflow Management Systems...|$|R
40|$|In a publish/subscribe (pub/sub) network, message {{delivery}} is guaranteed for all connected subscribers at publish time. However, in a dynamic mobile scenario where users join {{and leave the}} network, {{it is important that}} content published at the time they are disconnected is still delivered when they reconnect from a different point. In this paper, we enhance the caching mechanisms in pub/sub networks to enable client mobility. We build our mobility support with minor changes in the caching scheme while preserving the main principles of <b>loose</b> <b>coupled</b> and asynchronous communication of the pub/sub communication model. We also present a new proactive mechanism to reduce the overhead of duplicate responses. The evaluation of our proposed scheme is performed via simulations and testbed measurements. © 2010 IEEE...|$|R
40|$|To {{utilize the}} {{advantages}} of existing and emerging Internet techniques and {{to meet the demands}} {{for a new generation of}} collaborative working environments, a framework with an upperware-middleware architecture is proposed, which consists of four layers: resource layer, middleware layer, upperware layer and application layer. The upperware contains intelligent agents and plug/play facilities; the former coordinates and controls multiple middleware techniques such as Grid computing, Web-services and mobile agents, while the latter are used for the applications, such as semantic CAD, to plug and <b>loose</b> <b>couple</b> into the system. The method of migrating legacy software using automatic wrapper generation technique is also presented. A prototype mobile environment for collaborative product design is presented to illustrate the utilization of the CWE framework in collaborative design and manufacture...|$|R
