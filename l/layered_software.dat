81|1226|Public
5000|$|... {{an entry}} point {{is needed to}} each level of <b>layered</b> <b>software,</b> or ...|$|E
50|$|Symbolics {{developed}} Genera {{based on}} this foundation of the MIT Lisp machine operating system. It sells the operating system and <b>layered</b> <b>software.</b> Some of the <b>layered</b> <b>software</b> has been integrated into Genera in later releases. Symbolics improved the operating system software from the original MIT Lisp Machine and expanded it. The Genera operating system was only available for Symbolics Lisp Machines and the Open Genera virtual machine.|$|E
50|$|Web {{services}} {{written in}} GT.M can be deployed under an Internet super server such as inetd or xinetd. Web enabled applications can use <b>layered</b> <b>software</b> such as EWD or CFMumps.|$|E
50|$|Installation of a Protective <b>Layer</b> <b>Software</b> or Authorization Management Software.|$|R
50|$|DOSEMU, stylized as dosemu, is a {{compatibility}} <b>layer</b> <b>software</b> {{package that}} enables DOS operating systems (e.g., MS-DOS, DR-DOS, FreeDOS) and application software to run atop Linux on x86-based PCs (IBM PC compatible computers).|$|R
40|$|In depth {{knowledge}} of DSP and Communications theory. Simulation, analysis of signal processing and communications components and systems, mostly in Matlab, C++. Specification, analysis, simulation, design, verification and/or implementation of all components of digital cellular modems: radio, baseband analog, baseband mixed signal, baseband digital, physical <b>layer</b> <b>software.</b> WORK EXPERIENC...|$|R
5000|$|The VAXft was {{a family}} of {{fault-tolerant}} minicomputers developed and manufactured by Digital Equipment Corporation (DEC) using processors implementing the VAX instruction set architecture (ISA). [...] "VAXft" [...] stood for [...] "Virtual Address Extension, fault tolerant". These systems ran the OpenVMS operating system, and were first supported by VMS 5.4. Two <b>layered</b> <b>software</b> products, VAXft System Services and VMS Volume Shadowing, were required to support the fault-tolerant features of the VAXft and for the redundancy of data stored on hard disk drives.|$|E
50|$|AUTOSAR {{provides}} {{a set of}} specifications that describes basic software modules, defines application interfaces and builds a common development methodology based on standardized exchange format. Basic software modules made available by the AUTOSAR <b>layered</b> <b>software</b> architecture {{can be used in}} vehicles of different manufacturers and electronic components of different suppliers, thereby reducing expenditures for research and development and mastering the growing complexity of automotive electronic and software architectures. Based on this guiding principle, AUTOSAR has been devised {{to pave the way for}} innovative electronic systems that further improve performance, safety and environmental friendliness and to facilitate the exchange and update of software and hardware over the service life of the vehicle. It aims to be prepared for the upcoming technologies and to improve cost-efficiency without making any compromise with respect to quality.|$|E
40|$|Abstract. Software {{structuring}} techniques {{aim to make}} systems {{easier to}} develop and maintain, increasing their quality. Aspect-Oriented Software Development (AOSD) and Software Architectural Styles are examples of such techniques. In {{spite of all the}} benefits of such structuring techniques, it is not always easy or even advantageous to integrate two or more of these techniques. For example, the effects of combining AOSD and <b>Layered</b> <b>Software</b> Architectures are still not well understood. This paper proposes a metrics suite {{to assess the impact of}} AOSD on <b>layered</b> <b>software</b> architectures. To better account for the influence of aspects on the layered system, we defined new metrics and extended existing ones to measure coupling between system layers and layering violations. These metrics are an initial effort to measure the maintainability of aspectoriented software adopting the layered architectural style. In addition, they can be used to support decision making on combining aspects and <b>layered</b> <b>software</b> architectures. We also developed a tool to automatically collect the proposed metrics. ...|$|E
50|$|The Radio Interface <b>Layer,</b> <b>software</b> {{that handles}} {{communication}} with the modem, was replaced by free code, thus making the telephony part usable. A library handling the GPS was then adapted from free code that was originally written for another phone and permitted the HTC Dream to have GPS working with Replicant.|$|R
5000|$|Products {{developed}} by Jennic included JenNet, a wireless networking stack {{based on the}} IEEE 802.15.4 standard. JenNet-IP included a 6LoWPAN protocol stack. Jennic was the first chipset manufacturer to support this protocol for their 802.15.4 products. [...] In May 2011, NXP announced its intent to release JenNet-IP network <b>layer</b> <b>software</b> under an open source license.|$|R
5000|$|Device {{drivers are}} the {{abstraction}} <b>layer</b> between <b>software</b> concepts and hardware circuitry ...|$|R
40|$|<b>Layered</b> <b>software</b> {{development}} has demonstrably good reuse properties and offers {{one of the}} few promising approaches to addressing the library scalability problem. In this paper, we show how one can develop <b>layered</b> <b>software</b> using common Unix (Linux/Solaris) dynamic libraries. In particular, we show that, from an object-oriented design standpoint, dynamic libraries are analogous to components in a mixin-based object system. This enables us to use libraries in a layered fashion, mixing and matching different libraries, while ensuring that the result remains consistent. As a proof-of-concept application, we present two libraries implementing file versioning (automatically keeping older versions of files for backup) and application-transparent locking in a Unix system. Both libraries can be used with new, aware applications or completely unaware legacy applications. Further, the libraries are useful both in isolation, and as cooperating units...|$|E
40|$|This paper {{deals with}} the {{synthesis}} of control software for hybrid systems specified as hybrid automata. Instead of generating the software from scratch, the synthesis {{is based on a}} generic <b>layered</b> <b>software</b> architecture which supports both periodic and event-triggered computations. The use of the <b>layered</b> <b>software</b> architecture as the framework for implementing hybrid controllers is motivated in the paper. An automatic code generator HA 2 LS (from Hybrid Automata to Layered Systems) is introduced. HA 2 LS reads a specification in terms of hybrid automata and generates intermediate code that can be processed by the tools provided by the layered architecture. The generated software provides a clean interface for a control engineer to plug in the control algorithms. With externally supplied control algorithms and IO procedures, the synthesis of executable hybrid controllers can be completed. The generated code can also be used for simulation purposes if it is generated from the specification [...] ...|$|E
40|$|We de ne {{a domain}} speci c {{embedded}} language in Haskell to describe <b>layered</b> <b>software</b> architectures of editors. By using a typed programming language {{to describe the}} architecture, the type correctness of its components is guaranteed by the type checker of the language. Furthermore, because the architecture description of a system {{is part of the}} implementation of the system, the implementation will always comply with the architecture...|$|E
5000|$|... 3D Wayfinder is {{an indoor}} {{wayfinding}} software and service {{used to help}} visitors to navigate in large public buildings (shopping centers, airports, train stations, hospitals, universities etc.)3D Wayfinder uses a 3D floor plans of a building and renders it in real-time. It displays interactive information <b>layers.</b> <b>Software</b> {{can be used on}} interactive kiosks or as a mobile application.|$|R
5000|$|Presentation <b>layer</b> {{automation}} <b>software,</b> {{increasingly used}} by Business Process Outsourcers to displace human labor ...|$|R
40|$|Interconnectivity {{of digital}} cameras with other devices {{seems to be}} one of the main {{concerns}} of consumers and digital camera manufacturers. Interconnectivity features in digital cameras provide better usage of digital cameras. Moreover, with adequate application <b>layer</b> <b>software,</b> the digital photographs could go directly from camera to the desired target: disk, printers, web sites or web prints, using just one communication protocol: PTP...|$|R
40|$|In {{this work}} we revise the <b>layered</b> <b>software</b> {{architecture}} for the Knowledge Grid by explicitly introducing {{the concept of}} Resourceome, i. e. an “alive” ontology of resources. This approach is necessary to tackle the challenges posed by the “ome” status, reached by the world of bioinformatics resources. The resulting software architecture, a Resourceomic Grid, integrates components to support issues like awareness, discovery, integration and abstraction of resources...|$|E
40|$|This paper {{reports on}} our {{experimentation}} {{with the design}} of a <b>layered</b> <b>software</b> ar hite ture for the support of parallel and distributed exe ution of Logi Programming Systems, how it oers a set of on urren y and ommuni ation abstra tions that are integrated in an extended Prolog, and how this is used to support a high-level group-oriented distributed logi language. 1...|$|E
40|$|In {{this paper}} we present CosmOpen, a reverse-engineering tool {{optimized}} for the behavioural analysis of complex <b>layered</b> <b>software.</b> CosmOpen combines cheap and non-intrusive observation techniques with a versatile graph manipulation engine. By programming different graph manipulation scripts, the ‘focal length’ of our tool {{can be adapted}} to different abstraction levels. We illustrate how our tool can be used to extract high-level behavioural models from a complex multi-threaded platform (GNU/Linux, CORBA middleware) ...|$|E
40|$|The short SPEAR 3 startup time {{required}} precommissioned software for machine setup, beam measurements and data analysis. To accomplish this goal, we used Matlab with the Accelerator Toolbox (AT), the Channel Access Toolbox (MCA) and Middle <b>Layer</b> <b>software</b> to integrate code and streamline production. This paper outlines the software architecture, describes the Middle Layer component and provides examples from SPEAR 3 commissioning...|$|R
50|$|Security {{countermeasures}} {{are being}} developed and applied to smartphones, from security in different <b>layers</b> of <b>software</b> to the dissemination of information to end users. There are good practices to be observed at all levels, from design to use, {{through the development of}} operating systems, <b>software</b> <b>layers,</b> and downloadable apps.|$|R
40|$|Abstract: This paper {{presents}} AUTOSAR-ready light {{software architecture}} (AUTOSAR-Lite), {{which is a}} light weighted version of the AUTOSAR, for automotive embedded control systems. The proposed AUTOSAR-Lite reduces overhead problems caused by the excessive standard specifications of AUTOSAR. Concurrently, AUTOSAR-Lite keeps advantages of AUTOSAR such as a scalability, re-usability, reliability, and transferability. The fundamental design of AUTOSAR-Lite is originated from the AUTOSAR standard. AUTOSAR-Lite is composed of three layers such as an application software, runtime environment, and basic <b>software</b> <b>layer.</b> The application <b>software</b> <b>layer</b> adopts component-based design methodology as AUTOSAR. The runtime environment layer integrates interfaces between application and basic <b>software</b> <b>layers.</b> In case of the basic <b>software</b> <b>layer,</b> restrictions of the module configurations and interfaces of basic software are minimized. In order to validate the feasibility of AUTOSAR-Lite, a software desig...|$|R
40|$|In {{this article}} we present COSMOPEN, a reverse {{engineering}} tool optimised for the behavioural analysis of complex <b>layered</b> <b>software.</b> COSMOPEN combines cheap and non-intrusive observation techniques with a versatile graph manipulation engine. By programming different graph manipulation scripts, the “focal length ” of our tool {{can be adapted to}} the different abstraction levels found in complex software. We illustrate how our tool can be used to extract high-level behavioural models from a complex multithreaded platform (GNU/Linux, CORBA middleware) ...|$|E
40|$|This {{position}} paper presents an approach for predicting functional and extra-functional properties of <b>layered</b> <b>software</b> component architectures. Our approach {{is based on}} parameterised contracts a generalisation of design-bycontract. The main contributions of the paper are twofold. Firstly, it attempts to clarify the meaning of "contractual use of components" a term sometimes used loosely [...] or even inconsistently [...] in current literature. Secondly, we demonstrate how to deploy parameterised contracts to predict properties of component architectures with non-cyclic dependencies...|$|E
40|$|This paper {{presents}} a partially implemented <b>layered</b> <b>software</b> architecture for describing and designing environmental sounds (everyday sounds) in non visual interfaces {{based on a}} new sound model (audio framework). This architecture facilitates non-speech audio presentation of objects and interaction mechanisms to non visual interfaces. Physical layer, system sound software layer, sound analyser/synthesiser layer and interface layer define the different layers of this new architecture. The suggested sound model (audio framework) {{can be used as}} a basis for the description and design of environmental sounds in non visual interfaces. This paper will describe its different components: physical modelling, interaction, context sensitivity, and metaphorical description. The term audio framework will be used ultimately for the presented sound model. This paper will first give an introduction to the background on the use of computers by blind operators and the development of graphical user interfaces and their impact on this group of computer users, the use of sounds in CAL applications for visually impaired users and two examples for adaptation of GUIS for blind computer users, existing approaches for modelling environmental sounds, and then presents the new audio framework and its implementation in a <b>layered</b> <b>software</b> architecture. Finally some implemented sounds are discussed...|$|E
50|$|Different {{security}} counter-measures {{are being}} developed and applied to smartphones, from security in different <b>layers</b> of <b>software</b> to the dissemination of information to end users. There are good practices to be observed at all levels, from design to use, {{through the development of}} operating systems, <b>software</b> <b>layers,</b> and downloadable apps.|$|R
40|$|Current {{systems for}} {{multi-channel}} underwater signal processing {{suffer from a}} tied relation between the hardware and physical <b>layer</b> <b>software</b> or require {{a large amount of}} engineering work. To provide a low-cost, small form factor and flexible solution, this work presents a multi-channel testbed consisting of an off-the-shelf FPGA board and a simple expansion board. Nonetheless, the proposed testbed provides the flexibility and processing power to evaluate novel multi-channel physical layer algorithms...|$|R
25|$|AirPort Extreme cards, {{using the}} Broadcom chipset, have the Media Access Control <b>layer</b> in <b>software.</b> The driver is closed source.|$|R
30|$|Layered Queueing Networks. Layered {{queueing}} networks (LQNs) are {{an extension}} of queueing networks to describe <b>layered</b> <b>software</b> architectures. An LQN model of an application can be built automatically from software engineering models expressed using formalisms such as UML or Palladio Component Models (PCM) [57]. Compared to ordinary queueing networks, LQNs provide the ability to describe dependencies arising in a complex workflow of requests and the layering among hardware and software resources that process them. Several evaluation techniques exist for LQNs [58]-[61].|$|E
40|$|We {{define a}} domain {{specific}} embedded language in Haskell for describing <b>layered</b> <b>software</b> architectures which maintain bidirectional dependencies. By using a typed programming language {{to describe the}} architecture, the type correctness of its components is guaranteed by the type checker of the language. Because, contrary to the situation with typical Architecture Description Languages, the description {{is part of the}} implementation of the system, the implementation is guaranteed to comply with the architecture, and the architecture is guaranteed to comply with the implementation. 1...|$|E
40|$|This paper {{examines}} the <b>layered</b> <b>software</b> modules of a heterogeneous multiprocessor simulator and debugger, {{and the design}} patterns that span these modules. Lucent’s LUxWORKS simulator and debugger works with multiple processor architectures. Its modeling infrastructure, processor models, processor monitor / control, hardware control, vendor simulator interface and Tcl/Tk extension layers are spanned by the following design patterns: 1) build and extend abstract virtual processors, 2) build reflective entities, and 3) build a covariant extensible system. Together these modules and patterns define a processor execution architecture that encourages reus...|$|E
30|$|Openair 1 : Baseband Signal Processing: This folder {{contains}} the code {{for the physical}} <b>layer</b> <b>software</b> modem along with RTAI/Linux device drivers and user-space tools to control the hardware. It also contains simulation environments and channel models to test the code without the hardware or to do performance simulations. Further, openair 1 provides also the functionality for the Eurecom MIMO OpenAir Sounder (EMOS) to perform MIMO channel measurements over multiple users [2].|$|R
40|$|Interconnectivity {{of digital}} camera with other devices {{is one of}} the main {{concerns}} of consumers and digital camera manufacturers. Interconnectivity features in digital cameras allow more consumer-friendly usage of digital cameras. Moreover, with a suitable application <b>layer</b> <b>software,</b> digital photographs can be sent directly from the camera to a desired target: disk storage, printer, web site, as an e-mail message or web print, using a single, purpose-designed, communication protocol: the Picture Transfer Protocol, PTP. ...|$|R
40|$|HW/SW co-designed {{processors}} {{currently have}} {{a renewed interest}} due to their capability to boost performance without running into the power and complexity walls. By employing a <b>software</b> <b>layer</b> that performs dynamic binary translation and applies aggressive optimizations through exploiting the runtime application behavior, these hybrid architectures provide better performance/watt. However, a poorly designed <b>software</b> <b>layer</b> can result in significant translation/optimization overheads that may offset its benefits. This work presents a detailed characterization of the <b>software</b> <b>layer</b> of a HW/SW co-designed processor {{using a variety of}} benchmark suites. We observe that the performance of the <b>software</b> <b>layer</b> is very sensitive to the characteristics of the emulated application with a variance of more than 50...|$|R
