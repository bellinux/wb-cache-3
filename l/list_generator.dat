8|71|Public
50|$|In Python, the set-builder's braces are {{replaced}} with square brackets, parentheses, or curly braces, giving <b>list,</b> <b>generator,</b> and set objects, respectively. Python uses an English-based syntax. Haskell replaces the set-builder's braces with square brackets and uses symbols, including the standard set-builder vertical bar.|$|E
50|$|OLGA - Object <b>List</b> <b>Generator</b> & Analyzer: OLGA is {{a search}} engine {{designed}} to allow users to run multiple queries, generate a list of objects from each query and flexibly combine the results. OLGA takes as input either a list of object symbols or search parameters based on ontology annotations or position. The final list of genes, QTLs or strains can be downloaded or submitted to the GA Tool, the Variant Visualizer or the Genome Viewer from within the tool.|$|E
40|$|Three related studies {{replicated}} {{and extended}} previous work (J. A. Danielson et al. (2003),Educational Technology Research and Development, 51 (3), 63 – 81) involving the Diagnostic Pathfinder (dP) (previously Problem <b>List</b> <b>Generator</b> [PLG]), a cognitive tool for learning diagnostic problem solving. In studies 1 and 2, groups of 126 and 113 veterinary students, respectively, used the dP to complete case-based homework; groups of 120 and 199, respectively, used an alternative method. Students in the dP groups {{scored significantly higher}} (p =. 000 and. 003, respectively) on final exams than those in control groups. In the third study, 552 veterinary students responding to a questionnaire indicated that the dP’s gating and data synthesis activities aided learning. The dP’s feedback and requirement of completeness appear to aid learning most...|$|E
5000|$|Online {{worldwide}} independent lodging company, Airbnb, is {{an example}} of growth hacking by coupling technology and ingenuity. Airbnb realized they could essentially hack the Craiglist.org scale and tap both into their user base as well as their website by adding automated <b>listing</b> <b>generators</b> from Airbnb with the feature called [...] "Post to Craigslist". The company's growth was a combination of clever thinking and technical know-how.|$|R
5000|$|A {{counting}} loop can be simulated by {{iterating over}} an incrementing <b>list</b> or <b>generator,</b> for instance, Python's [...]|$|R
25|$|There is {{a special}} {{notation}} called definite clause grammars (DCGs). A rule defined via -->/2 instead of :-/2 is expanded by the preprocessor (expand_term/2, a facility analogous to macros in other languages) according to a few straightforward rewriting rules, resulting in ordinary Prolog clauses. Most notably, the rewriting equips the predicate with two additional arguments, {{which can be used}} to implicitly thread state around, analogous to monads in other languages. DCGs are often used to write parsers or <b>list</b> <b>generators,</b> as they also provide a convenient interface to difference lists.|$|R
40|$|Regulatory {{institutions}} such as the Institute of Medicine and Joint Commission endorse problem lists as an effective method to facilitate transitions of care for patients. In practice, the problem list is a common model for documenting a care provider's medical reasoning with respect to a problem and its status during patient care. Although natural language processing (NLP) systems have been developed to support problem list generation, encoding many information layers - morphological, syntactic, semantic, discourse, and pragmatic - can prove computationally expensive. The contribution of each information layer for accurate problem list generation has not been formally assessed. We would expect a problem <b>list</b> <b>generator</b> that relies on natural language processing would improve its performance with the addition of rich semantic features We hypothesize that problem list generation can be approached as a two-step classification problem - problem mention status (Aim One) and patient problem status (Aim Two) classification. In Aim One, we will automatically classify the status of each problem mention using semantic features about problems described in the clinical narrative. In Aim Two, we will classify active patient problems from individual problem mentions and their statuses. We believe our proposal is significant in two ways. First, our experiments will develop and evaluate semantic features, some commonly modeled and others not in the clinical text. The annotations we use will be made openly available to other NLP researchers to encourage future research on this task and other related problems including foundational NLP algorithms (assertion classification and coreference resolution) and applied clinical applications (patient timeline and record visualization). Second, by generating and evaluating existing NLP systems, we are building an open-source problem <b>list</b> <b>generator</b> and demonstrating the performance for problem list generation using these features. ...|$|E
40|$|Automated {{shopping}} <b>list</b> <b>generator</b> is {{an application}} {{that can give}} everyone especially for housewife to get the list of their needs systematically. This project is basically use platform like android Phone, Windows Phone and android. This system is easier to used, this system is not like an online shopping because I really focused on the items that is storage in freezer only. So, the foods are cannot be sell in online shopping. This system also only can be use for update the needs that people always use in cooking, like vegetable, fish, meat, chicken and others. Busy person sometimes cannot remember {{and they were not}} concern about their needs. This system will help them to be systematically in manage their work and warning message will be displayed if the food is finished. The items that users were brought will save in database, then the data can sync to other person that they want to sharing by install some application in their phone...|$|E
40|$|QAP measure outputs and NIFTI header {{information}} is now stored in individual participant-level output JSON files instead of single-participant CSVs. At {{the end of}} the pipeline run, the information in these JSON files can be consolidated using the qap_jsons_to_csv. py script. Visualization graphs & reports are now generated using the qap_jsons_to_csv. py script upon completion of the pipeline run. Consolidated the data configuration file (participant <b>list)</b> <b>generator</b> scripts into one multi-purpose script (qap_sublist_generator. py), which supports BIDS directory format and AWS S 3 bucket file path links. The pipeline configuration YAML file parameter names have been updated to be clearer. Introduction of the qap_check_output_csv. py script, which quickly compares the output CSV file against your original data configuration YAML file, then lists which participant-session-scans are missing in the final output and creates a new data configuration file with these scans for a convenient re-run. Users can now select to have zeros removed from anatomical scans prior to processing via the pipeline configuration file with the "exclude_zeros" flag. This is useful if a large number of zeros have been introduced to anatomical scans during de-facing and de-earing of images for privacy compliance, which can skew the QAP metric results. Improved information & error reporting. Fixed a bug where not all participants listed in the data configuration file would be run. Fixed several bugs that were causing report/PDF generation to crash or fail to complete...|$|E
40|$|The <b>list</b> set <b>generator</b> {{is defined}} and {{algorithms}} {{for its use}} are given. The <b>list</b> set <b>generator</b> is a construct which may be added to a list processing system or any system that handles sets. It efficiently generates the set which results from any expression involving sets and set operators. The efficiency derives from evaluating the expression {{as a whole and}} in parallel, rather than evaluating subexpressions and then using those sets to ar-rive at the final result. KEY WORDS AND PHRASES: set manipulating, list processing, set generation, sets, lists, file processin...|$|R
5000|$|There is {{a special}} {{notation}} called definite clause grammars (DCGs). A rule defined via [...] instead of [...] is expanded by the preprocessor ( [...] , a facility analogous to macros in other languages) according to a few straightforward rewriting rules, resulting in ordinary Prolog clauses. Most notably, the rewriting equips the predicate with two additional arguments, {{which can be used}} to implicitly thread state around, analogous to monads in other languages. DCGs are often used to write parsers or <b>list</b> <b>generators,</b> as they also provide a convenient interface to difference lists.|$|R
5000|$|While <b>lists</b> and <b>generators</b> had comprehensions/expressions, in Python {{versions}} {{older than}} 2.7 the other Python built-in collection types (dicts and sets) {{had to be}} kludged in using lists or generators: ...|$|R
40|$|Background: In Belgium, the {{construction}} of the national electronic point-of-care information service, EBMPracticeNet, was initiated in 2011 to optimize quality of care by promoting evidence-based decision-making. The collaboration of the government, healthcare providers, Evidence-Based Medicine (EBM) partners, and vendors of Electronic Health Records (EHR) is unique to this project. All Belgian healthcare professionals get free access to an up-to-date database of validated Belgian and nearly 1, 000 international guidelines, incorporated in a portal that also provides EBM information from sources other than guidelines, including computerized clinical decision support that is integrated in the EHRs. The EBMeDS system is the electronic evidence-based decision support system of EBMPracticeNet. The EBMeDS system covers all clinical areas of diseases and could {{play a crucial role in}} response to the emerging challenge posed by chronic conditions. Diabetes was chosen as the analysis topic of interest. The objective of this study is to assess the effectiveness of EBMeDS use in improving diabetes care. This objective will be enhanced by a formal process evaluation to provide crucial information on the feasibility of using the system in daily Belgian family medicine. Methods: The study is a cluster-randomized trial with before/after measurements conducted in Belgian family medicine. Physicians' practices will be randomly assigned to the intervention or control group in a 1 : 1 ratio, to receive either the EBMeDS reminders or to follow the usual care process. Randomization will be performed by a statistical consultant with an electronic random <b>list</b> <b>generator,</b> anonymously for the researchers. The follow-up period of the study will be 12 months with interim analysis points at 3, 6 and 9 months. Primary outcome is the one-year pre- to post-implementation change in HbA 1 c. Patients will not be informed about the intervention. Data analysts will be kept blinded to the allocation. Discussion: The knowledge obtained in this study will be useful for further integration in other Belgian software packages. Users' perceptions and process evaluation will provide information for improving the feasibility of the system...|$|E
40|$|The domain {{with which}} this {{research}} is concerned is traumatic brain injury and models which attempt to predict hypotensive (low blood pressure) events occurring in a hospital intensive care unit environment. The models process anonymised, clinical, minute-byminute, physiological data from the BrainIT consortium. The research reviews three predictive modelling techniques: classic time series analysis; hidden Markov models; and classifier models, which are {{the main focus of}} this thesis. The data preparation part of this project is extensive and six applications have been developed: an event <b>list</b> <b>generator,</b> used to process a given event definition; a data set generation tool, which produces a series of base data sets {{that can be used to}} train machine learning models; a training and test set generation application, which produces randomly drawn training and test data sets; an application used to build and assess a series of logistic regression models; an application to test the statistical models on unseen data, which uses anonymised real clinical data from intensive care unit bedside monitors; and finally, an application that implements a proposed clinical warning protocol, which attempts to assess a model’s performance in terms of usefulness to a clinical team. These applications are being made available under a public domain licence to enable further research (see Appendix A for details). Six logistic regression models and two Bayesian neural network models are examined using the physiological signals heart rate and arterial blood pressure, along with the demographic variables of age and gender. Model performance is assessed using the standard ROC technique to give the AUC metric. An alternative performance metric, the H score, is also investigated. Using unseen clinical data, two of the models are assessed in a manner which mimics the ICU environment. This approach shows that models may perform better than would be suggested by standard assessment metrics. The results of the modelling experiments are compared with a recent similar project in the healthcare domain and show that logistic regression models could form the basis of a practical early warning system for use in a neuro intensive care unit. ...|$|E
50|$|In this case, {{the result}} list is {{constructed}} by binding the variables a and b to all combinations of values from the respective <b>generator</b> <b>lists.</b> The {{further to the}} right a generator is, the faster does its generator variable vary over {{the elements of the}} <b>generator</b> <b>list.</b> In the example above, the b generator is {{to the right of the}} a generator.|$|R
40|$|Binary (i. e., bit stream) {{data are}} omnipresent in {{computer}} and net-work applications but most functional programming languages cur-rently {{do not provide}} sufcient support for them. Erlang is an ex-ception since it does support direct manipulation of binary data, albeit currently restricted to byte streams, not bit streams. To ame-liorate the situation, we extend Erlang's built-in binary datatype so that it becomes exible enough to handle bit streams properly. To further simplify programming on bit streams we then show how bi-nary comprehensions can be introduced in the language and how binary and list comprehensions can be extended to allow both bi-nary and <b>list</b> <b>generators.</b> Categories and Subject Descriptors D. 3. 2 [Programming Lan-guages]: Language ClassicationsApplicative (functional) lan-guage...|$|R
5000|$|For our purposes, another {{generating}} set is more convenient. The following table <b>lists</b> the six <b>generators,</b> in which ...|$|R
50|$|The NPL {{interpreter}} {{evaluates the}} <b>list</b> of <b>generators</b> {{from left to}} right so conditions can mention any bound variables that occur to their left. These were known as set comprehensions. NPL eventually evolved into Hope but lost set comprehensions, which made a reappearance in the form of list comprehensions in later functional languages.|$|R
50|$|Rheem Califone {{manufactured}} A/V equipment {{under the}} Rheem, Califone, and Roberts brands {{commonly used in}} schools and institutions, including PA systems, reel-to-reel audio tape recorders, phonographs, as well as Combo organs. Rheem and Ruud also sold re-branded Briggs & Stratton residential Emergency power systems beginning in 2007. However, as of March 2, 2013, the companies no longer <b>listed</b> backup <b>generators</b> on their respective websites.|$|R
40|$|We {{study the}} finite {{generation}} of the intersection algebra of two principal ideals I and J in a unique factorization domain R. We provide an algorithm that produces a <b>list</b> of <b>generators</b> of this algebra over R. In the special case that R is a polynomial ring, this algorithm has been implemented in the commutative algebra software system Macaulay 2. A new class of algebras, called fan algebras, is introduced. Comment: Minor changes, to appear in Communications in Algebr...|$|R
40|$|Abstract. This short note {{constitutes}} an appendix {{to a paper}} by Poonen. The paper Automorphisms mapping a point to a subvariety by Bjorn Poonen con-tains {{an appeal to the}} fact that there exists an algorithm which accomplishes the following basic task: Given a finitely generated commutative Z-algebra A (specified by generators and relations) and a finite <b>list</b> of <b>generators</b> for an ideal I of A, compute a finite <b>list</b> of <b>generators</b> for the inverse image of the ideal I ⊗Q under the natural morphism A → A⊗Q. The existence of such an algorithm is well-known, and the purpose of this note is to briefly describe two different procedures for the task at hand, and to make some additional related remarks. Before this, we observe that representing the Z-algebra A as a quotient A = Z[X]/J where J is an ideal of the polynomial ring Z[X] = Z[X 1, [...] ., XN] (where N and generators for J are part of the input data) one sees that it suffices to consider the case where A is a polynomial ring over Z. In this case, the pullback ideal in question may also simply be described as th...|$|R
40|$|A {{tropical}} polynomial in nr variables {{divided into}} blocks of r variables each, is r-symmetric, {{if it is}} invariant under the action of Sn that permutes the blocks. For r= 1 we call these tropical polynomials symmetric. We can define r-symmetric and symmetric rational functions in a similar manner. In this paper we identify generators for the sets of symmetric tropical polynomials and rational functions. While r-symmetric tropical polynomials are not finitely generated, we show that r-symmetric rational functions are and provide a <b>list</b> of <b>generators...</b>|$|R
50|$|For the low {{discrepancy}} additive recurrence above, a and m {{are chosen}} to be 1. Note, however, that this will not generate independent random numbers, so {{should not be used}} for purposes requiring independence. The list of pseudorandom number <b>generators</b> <b>lists</b> methods for generating independent pseudorandom numbers.|$|R
40|$|Abstract. Tausworthe {{random number}} {{generators}} {{based on a}} primitive trinomial allow an easy and fast implementation when their parameters obey certain restrictions. However, such generators, with those restrictions, have bad statistical properties unless we combine them. A generator is called maximally equidistributed if its vectors of successive values have the best possible equidistribution in all dimensions. This paper shows how to find maximally equidistributed combinations in an efficient manner, and gives a <b>list</b> of <b>generators</b> with that property. Such generators have a strong theoretical support and lend themselves to very fast software implementations. 1...|$|R
40|$|The smooth way of {{transition}} from existing GEANT 3 based simulation software to GEANT 4 adopted by ALICE will be explained. The AliRoot package {{as a client}} of the Monte Carlo interface (pure abstract class) is used in GEANT 4 based classes for building GEANT 4 objects (geometry physics <b>list,</b> primary <b>generator).</b> We shall also summarise our experience with GEANT 4 and give an overview of what parts of GEANT 4 {{are used in the}} current ALICE GEANT 4 simulation prototype, what functionality has been added and what problems have been encountered...|$|R
40|$|Tausworthe {{random number}} {{generators}} {{based on a}} primitive trinomial allow an easy and fast implementation when their parameters obey certain restrictions. However, such generators, with those restrictions, have bad statistical properties unless we combine them. A generator is called maximally equidistributed if its vectors of successive values have the best possible equidistribution in all dimensions. This paper shows how to find maximally equidistributed combinations in an efficient manner, and gives a <b>list</b> of <b>generators</b> with that property. Such generators have a strong theoretical support and lend themselves to very fast software implementations...|$|R
40|$|Results of {{research}} and engineering analyses to date show that it is feasible to develop and fly on the first Spacelab mission a multipurpose laboratory in which experiments can be performed on the microphysical processes in atmospheric clouds. The paper presents a series of tables on the Atmospheric Cloud Physics Laboratory, with attention given to experiment classes, the preliminary equipment <b>list</b> (particle <b>generators,</b> optical and imaging devices, particle detectors and characterizers, etc.), initial equipment (scientific equipment subsystems and flight support subsystems), and scientific functional requirements (the expansion chamber, the continuous flow diffusion chamber, the static diffusion chamber, the humidifier, and particle generators) ...|$|R
5000|$|Cobra is a general-purpose, {{object-oriented}} programming language. Cobra is designed by Charles Esterbrook, and {{runs on the}} Microsoft [...]NET and Mono platforms. It is strongly influenced by Python, C#, Eiffel, Objective-C, and other programming languages. It supports both static and dynamic typing. It has support for unit tests and contracts. It has lambda expressions, closures, <b>list</b> comprehensions, and <b>generators.</b>|$|R
40|$|B. Schuster SCH 1 {{proved that}} the mod 2 Morava K-theory K(s) ^*(BG) is evenly {{generated}} for all groups G of order 32. For the four groups G with the numbers 38, 39, 40 and 41 in the Hall-Senior list H, the ring K(2) ^*(BG) {{has been shown to}} be generated as a K(2) ^*-module by transferred Euler classes. In this paper, we show this for arbitrary s and compute the ring structure of K(s) ^*(BG). Namely, we show that K(s) ^*(BG) is the quotient of a polynomial ring in 6 variables over K(s) ^*(pt) by an ideal for which we <b>list</b> explicit <b>generators.</b> Comment: 23 page...|$|R
40|$|Targeting {{only the}} portion of an FPGA {{actually}} used in a given application, the so-called application-dependent test (ADT) {{can be used to}} reduce testing efforts and time as well as to enable defect tolerance and improve the manufacturing yield, since it excludes those faults that do not affect the design for which the FPGA will be used. In spite of its inherent advantages, ADT has very limited support, if any, in both academic and commercial tools currently available. To address this limitation, this work introduces an integrated software environment for application-dependent test of FPGAs. The environment architecture is comprised of a variety of tools, such as a SAT solver, a fault simulator, a package for visual inspection of the networks, a custom benchmark generator, and various custom fault <b>list</b> <b>generators</b> and test configuration generators. The architecture is highly modular and extensively based on a plug-in approach, enabling third-party test strategies and configuration generation logic to be easily integrated. To demonstrate the potential of the environment, we developed a complete suite of plug-ins, based on both state-of-the-art and novel ADT techniques. The test configuration generation module addresses some limitations of existing approaches, related to the exhaustiveness of the faults covered (with special regard to feedback bridging faults) as well as some convergence issues caused by existing techniques. The experimental results presented {{at the end of the}} paper, obtained from a set of real-world benchmarks, confirm the effectiveness of the environment architecture as well as the impact of the new ADT techniques implemented in the proof-of-concept plug-ins...|$|R
50|$|Wheel {{factorization}} is {{a method}} for generating lists of mostly prime numbers from a simple mathematical formula and a much smaller list of the first prime numbers. These lists may then be used in trial division or sieves. Because not all the numbers in these lists are prime, doing so introduces inefficient redundant operations... however, the generators themselves require very little memory compared to keeping a pure list of prime numbers. The small list of initial prime numbers constitute complete parameters for the algorithm to generate {{the remainder of the}} <b>list.</b> These <b>generators</b> are referred to as wheels. While each wheel may generate an infinite list of numbers, past a certain point the numbers cease to be mostly prime.|$|R
5000|$|This {{results in}} a list with the {{elements}} 1, 4, 9, and 16. The expression {{in front of the}} colon, a * a, is an element expression. Because of the generator that follows the colon, it is evaluated for the variable a bound to each element of the <b>generator</b> <b>list,</b> in this case 1, 2, 3, and 4.Comprehensions may contain more than one generator, as in this example: ...|$|R
40|$|The {{installation}} of generators on turbine aircraft is discussed. Emphasis {{is placed on}} the use of the samarium cobalt generator. Potential advantages of an electric secondary power system at the engine level are <b>listed.</b> The integrated <b>generator</b> and the externally mounted generator are discussed. It is concluded that the integrated generator is best used in turbojet and low bypass ratio engines where there is no easy way of placing generators externally without influencing frontal areas...|$|R
40|$|Abstract. We adapt a {{basis of}} Habiro’s for the even Kauffman bracket skein module of S 1 ˆD 2 to define bases for the even and odd skein modules of S 1 ˆD 2 {{relative}} to two points. We discuss genus- 1 tangle embedding, and define an even and odd version of the previously defined Kauffman bracket ideal for genus- 1 tangles. These even and odd Kauffman bracket ideals are obstructions to tangle embeddings. Using our even and odd bases for the relative skein modules, we show how to compute a finite <b>list</b> of <b>generators</b> for the even and odd Kauffman bracket ideals of a genus- 1 tangle. We do this explicitly for three genus- 1 tangles. We relate these ideals to determinants of closures of genus- 1 tangles. 1...|$|R
5000|$|The {{games were}} {{produced}} using Flash 8. They combined video footage, animation and 3-d rendering {{to offer a}} feeling of hyperreality. The use of video footage gives many of the games {{the look and feel}} of games played on the Sega CD platform as well as many of the pre-3D PC games. ESPN Online games are played in a virtual “Game Controller” that looks remarkable like a Sony PSP. This virtual controller can be flipped over to view a leader board, a friends <b>list</b> and avatar <b>generator.</b>|$|R
40|$|Abstract. This is a concise expository {{survey of}} cluster algebras, {{introduced}} by S. Fomin and A. Zelevinsky in their four-part series of foundational papers [1], [2], [3], [4] (the paper [3] is with coauthor A. Berenstein). Our primary {{focus is on}} Cluster Algebras IV: Coefficients [4]. We introduce the setting of principal coefficients and define and study F-polynomials and g-vectors. Along the way, we mention the Laurent phenomenon and the classification of cluster algebras of finite type. 1. What is a cluster algebra? A cluster algebra is {{a particular kind of}} commutative subalgebra of a field of rational functions. One specifies a cluster algebra by describing its generators. But instead of providing an a priori infinite <b>list</b> of <b>generators,</b> one gives instead an initial finite set of them, and, in addition, an iterative method of producing new generators from old ones. This method is a combinatorial process which we call mutation...|$|R
