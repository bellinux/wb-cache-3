7|926|Public
5000|$|The default router code example: Module only:http://example/news module == news Invalid module maps to {{controller}} name:http://example/foo controller == foo Module + controller:http://example/blog/archive module == blog controller == archive Module + controller + action:http://example/blog/archive/list module == blog controller == archive action == list Module + controller + action + params:http://example/blog/archive/list/sort/alpha/date/desc module == blog controller == archive action == <b>list</b> <b>sort</b> == alpha date == desc ...|$|E
5000|$|Spock's Beard {{was sort}} of a phrase that we'd say to each other - my brother and I - when {{something}} weird would happen. We'd say, [...] "Wow, that's like Spock's Beard," [...] meaning, [...] "that only happens in a parallel universe, right?" [...] Anyway, Spock only has that beard in the one episode, and it's when he's in the parallel universe in [...] "Mirror, Mirror". So, that was just something we'd say to each other as an inside joke. I put Spock's Beard on the <b>list</b> <b>sort</b> of as a joke. Everybody seemed to like it the best, and so we picked that one.|$|E
40|$|In {{this paper}} we are proposing a new sorting algorithm, <b>List</b> <b>Sort</b> algorithm, {{is based on}} the dynamic memory allocation. In this {{research}} study we have also shown the comparison of various efficient sorting techniques with <b>List</b> <b>sort.</b> Due the dynamic nature of the <b>List</b> <b>sort,</b> it becomes much more fast than some conventional comparison sorting techniques and comparable to Quick Sort and Merge Sort. <b>List</b> <b>sort</b> takes the advantage of the data which is already sorted either in ascending order or in descending order. Comment: 7 pages, 5 figure...|$|E
50|$|Note: only {{top five}} {{performances}} <b>listed</b> (<b>sorted</b> by dismissals then date).|$|R
5000|$|... #Subtitle level 2: Tamil Nadu Elections 2016 Candidate <b>List</b> (<b>Sorted</b> Alphabetically) ...|$|R
50|$|The {{complete}} <b>list</b> (<b>sorted</b> into regions from northeast to southwest) is below.|$|R
40|$|Radix sorting {{methods have}} {{excellent}} asymptotic performance on string data, for which comparison {{is not a}} unit-time operation. Attractive for use in large byte-addressable memories, these methods have nevertheless long been eclipsed by more easily programmed algorithms. Three ways to sort strings by bytes left to right [...] -a stable <b>list</b> <b>sort,</b> a stable two-array sort, and an in-place "American flag" sort [...] -are illustrated with practical C programs. For heavy-duty sorting, all three perform comparably, usually running {{at least twice as}} fast as a good quicksort. We recommend American flag sort for general use...|$|E
40|$|ABSTRACT Radix sorting {{methods have}} {{excellent}} asymptotic performance on string data, for which comparison {{is not a}} unit-time operation. Attractive for use in large byte-addressable memories, these methods have nevertheless long been eclipsed by more easily prograÍrmed algorithms. Three ways to sort strings by bytes left to right-a stable <b>list</b> <b>sort,</b> a stable two-array sort, and an in-place "American flag " sor¿-are illustrated with practical C programs. For heavy-duty sorting, all three perform comparably, usually running {{at least twice as}} fast as a good quicksort. We recommend American flag sort for general use. For sorting strings you can't beat radix ss¡f-s ¡ so the theory says. The idea is simple. Deal the strings into piles by their first letters. On...|$|E
40|$|This {{study is}} an {{animation}} tutorial {{for the people}} who wants to learn the Data Structure. The emphasis is placed on vivid animations to help the people to understand algorithms for data structure easily. Some of the implementations to be addressed are: stack (Array-Based Stack, Linked Stack), queue (Array-Based Queue), List (Circular Linked List, Double Linked List, Linear Linked <b>List),</b> <b>sort</b> (Quick Sort, Merge Sort, Bubble Sort, Shell Sort, Insertion Sort, Heap Sort, Radix Sort, Selection Sort), heap (Priority Queue, Heap Build, Heap Sort), recursive (Tower of Hanio), hashing (Open Hashing, Close Hashing) binary search (Loop, Recursive), tree (2 - 3 Tree, Huffman Tree, Binary Search Tree, Balance Tree). Conclusions are formulated in terms of further work to be accomplished in order to better help understanding the completed algorithm...|$|E
50|$|Tree view of 3D {{models in}} All Models <b>list,</b> <b>sorted</b> by {{categories}} (folders).|$|R
40|$|Pbit, besides its simplicity, is {{definitely}} the fastest <b>list</b> <b>sorting</b> algorithm. It considerably surpasses all already known methods. Among many advantages, it is stable, linear and be made to run in place. I will compare Pbit with algorithm described by Donald E. Knuth in the third volume of ''The Art of Computer Programming'' and other (QuickerSort, MergeSort) <b>list</b> <b>sorting</b> algorithms. Comment: 25 pages, 4 table...|$|R
25|$|The {{following}} is an incomplete <b>list,</b> <b>sorted</b> by location, of Connick stained glass works in the United States.|$|R
40|$|Abstract. Classical single-sorted {{algebraic}} signatures {{are defined}} as sets of operation symbols together with arities. In their many-sorted variant they also <b>list</b> <b>sort</b> symbols and use sort-sequences as operation types. An operation type not only indicates sorts of parameters, but also constitutes dependency between an operation {{and a set of}} sorts. In the paper we define algebraic signatures with dependency relation on their symbols. In modal logics theory, structures like 〈W, R〉, whereW is a set and R ⊆ W × W is a transitive relation, are called transitive Kripke frames [Seg 70]. Part of our result is a definition of a construction of non-empty products in the category of transitive Kripke frames and p-morphisms. In general not all such products exist, but when the class of relations is restricted to bounded strict orders, the category lacks only the final object to be finitely (co) complete. Finally we define a category AlgSigDep of signatures with dependencies and we prove that it also has all finite (co) limits, {{with the exception of the}} final object. 1...|$|E
5000|$|Keshi <b>list</b> <b>sorted</b> by line {{starting}} year. (a keshi line {{running from}} 1980 to 1995 {{would be in}} the [...] "1980~1990" [...] section) ...|$|R
5000|$|Weekday Religious Education {{classes are}} {{currently}} offered in several {{school districts in}} the United States. The following is a partial <b>list,</b> <b>sorted</b> by state: ...|$|R
5000|$|Optionally, {{they can}} be <b>listed</b> <b>sorted</b> by either the imagename, the PID or the amount of {{computer}} usage. But by default, they are sorted by chronological order: ...|$|R
5000|$|Here is an {{implementation}} of the MDD algorithm in pseudo-code. It takes in an unsorted list of tasks and return the <b>list</b> <b>sorted</b> by increasing modified due date: ...|$|R
50|$|Incomplete <b>list,</b> <b>sorted</b> {{by number}} of employees, {{but can be}} sorted by each column. Area use is from county records. Dates are {{at the start of}} 2016 unless {{otherwise}} noted.|$|R
5000|$|Dangerous Goods <b>List</b> <b>sorted</b> by UN number, with {{references}} to specific requirements set in chapters 3 to 9; special provisions and exemptions related to dangerous goods packed in limited quantities ...|$|R
25|$|Depending on {{the methods}} of production, wine type, grape varieties, ageing processes, the {{following}} phenolics {{can be found in}} wine. The <b>list,</b> <b>sorted</b> in alphabetical order of common names, is not exhaustive.|$|R
50|$|Likewise, if x {{is greater}} than x_center, we know that all {{intervals}} in S_center must begin before x, so we find those intervals that end after x using the <b>list</b> <b>sorted</b> by interval endings.|$|R
5000|$|... finally, another [...] {{operation}} unwraps {{the values}} (from the anonymous array) {{used for the}} sorting, producing the items of the original <b>list</b> in the <b>sorted</b> order (<b>sorted</b> <b>list</b> of value ⇒ <b>sorted</b> <b>list</b> of item).|$|R
50|$|There {{are several}} schemes for {{overcoming}} this flaw with simple binary trees; {{the most common}} is the self-balancing binary search tree. If this same procedure is done using such a tree, the overall worst-case time is , which is asymptotically optimal for a comparison sort. In practice, the added overhead {{in time and space}} for a tree-based sort (particularly for node allocation) make it inferior to other asymptotically optimal sorts such as heapsort for static <b>list</b> <b>sorting.</b> On the other hand, {{it is one of the}} most efficient methods of incremental sorting, adding items to a list over time while keeping the <b>list</b> <b>sorted</b> at all times.|$|R
5000|$|TACDB: {{platform}} <b>lists,</b> <b>sorted</b> by nomenclature, {{which contain}} {{links to the}} C-E equipment complement of each platform, with links to the parametric data for each piece of equipment, military unit lists and their subordinate units with equipment used by each unit.|$|R
50|$|If {{the items}} {{are stored in}} a linked list, then the <b>list</b> can be <b>sorted</b> with O(1) {{additional}} space. The algorithm starts with an initially empty (and therefore trivially <b>sorted)</b> <b>list.</b> The input items are taken off the list one at a time, and then inserted in the proper place in the <b>sorted</b> <b>list.</b> When the input list is empty, the <b>sorted</b> <b>list</b> has the desired result.|$|R
25|$|This {{is a list}} {{of ships}} of the Pawtuxet class. The <b>list</b> is <b>sorted</b> by launch date; however the table {{includes}} sort buttons so the <b>list</b> can be <b>sorted</b> by any column.|$|R
50|$|This <b>list</b> is <b>sorted</b> alphabetically by {{aquarium}} name.|$|R
50|$|<b>List</b> in <b>sorted</b> {{order of}} the year of death.|$|R
5000|$|Repeatedly merge sublists {{to create}} a new sorted sublist until the single list {{contains}} all elements. The single <b>list</b> is the <b>sorted</b> <b>list.</b>|$|R
5000|$|Technology & Equipment : <b>Lists</b> many <b>sorts</b> of near-future gadgets.|$|R
50|$|Includes all {{competitive}} matches. The <b>list</b> is <b>sorted</b> by shirt number.|$|R
50|$|The <b>list</b> is <b>sorted</b> by surname when total {{cards are}} equal.|$|R
50|$|The <b>list</b> <b>sorts</b> interracial marriages from pairings {{that are}} most likely to divorce to the least likely. it can be {{concluded}} that White-Hispanic pairings regardless of gender {{are most likely to}} end in divorce. This is consistent with the fact that even endogenous White-White or Hispanic-Hispanic couples are most likely to result in divorce.|$|R
50|$|The <b>list</b> is <b>sorted</b> by Eredivisie goals when total {{goals are}} equal.|$|R
50|$|The <b>list</b> is <b>sorted</b> by shirt number when total {{appearances}} are equal.|$|R
50|$|The <b>list</b> is <b>sorted</b> by total minutes played then by jersey number.|$|R
