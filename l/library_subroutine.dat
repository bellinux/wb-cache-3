15|288|Public
25|$|Quicksort gained {{widespread}} adoption, appearing, for example, in Unix as {{the default}} library sort subroutine. Hence, it lent {{its name to}} the C standard <b>library</b> <b>subroutine</b> qsort and in the reference implementation of Java.|$|E
5000|$|It is, of course, {{perfectly}} {{possible to}} generate the above code [...] "inline" [...] using a single assembler macro statement, specifying just four or five operands (or alternatively, {{make it into a}} <b>library</b> <b>subroutine,</b> accessed by a simple call, passing a list of parameters), making the optimization readily accessible to inexperienced programmers.|$|E
40|$|Keywords: Computer-aided {{control system}} design, {{numerical}} algorithms, numerical linear algebra, Lyapunov equations, Sylvester equations. We discuss solvers for Sylvester, Lyapunov, and Stein equations {{that are available}} in the SLICOT <b>Library</b> (<b>Subroutine</b> Library In COntrol Theory). These solvers offer improved efficiency, reliability, and functionality compared to corresponding solvers in other computer-aided control system design packages. The performance of the SLICOT solvers is compared with the corresponding MATLAB solvers. ...|$|E
5000|$|... {{address of}} I/O {{operating}} system <b>library</b> <b>subroutines</b> (e.g. read/write) ...|$|R
5000|$|For {{functional}} programming, frequent {{calls to}} <b>library</b> <b>subroutines</b> are common, {{but may be}} often inlined by the optimizing compiler ...|$|R
40|$|Language {{problem areas}} are {{summarized}} and possible solutions are discussed. Areas covered are: (1) double complex, (2) arrays of work space in <b>library</b> <b>subroutines,</b> (3) calls from a library subprogram to user code, (4) decomposition and synthesis of floating-point numbers, (5) environment parameters, (6) precision function, and (7) control structures...|$|R
40|$|Abstract — The {{numerical}} solution of algebraic Riccati equations {{is a central}} issue in computer-aided control systems design. It is the key step in many computational methods for model reduction, filtering, and controller design for linear control systems. We discuss recent advances in the solvers for continuous-time and discrete-time algebraic Riccati equations available in the SLICOT <b>Library</b> (<b>Subroutine</b> Library In COntrol Theory) and compare their performance with the corresponding solvers in the Matlab toolboxes...|$|E
40|$|We discuss solvers for Sylvester, Lyapunov, and Stein {{equations}} {{that are}} available in the SLICOT <b>Library</b> (<b>Subroutine</b> Library In COntrol Theory). These solvers offer improved efficiency, reliability, and functionality compared to corresponding solvers in other computer-aided control system design packages. The performance of the SLICOT solvers is compared with the corresponding MATLAB solvers. This note can also serve as a guide to the SLICOT and SLICOTbased MATLAB solvers for Linear Matrix Equations. ...|$|E
40|$|The paper {{presents}} performance {{results for}} some {{components of the}} new, public-domain version of the SLICOT <b>library</b> (<b>Subroutine</b> Library in Control Theory), in comparison with equivalent computations performed by some MATLAB functions included in the Control Toolbox. SLICOT incorporates the new algorithmic developments in numerical linear algebra, implemented in the state-of-the-art software packages LAPACK and BLAS. The results show that, at comparable accuracy, SLICOT routines are several times faster than MATLAB computations...|$|E
40|$|Proceedings of the 1980 Winter Simulation Conference, T. I. Oren, C. M. Shub, P. F. Roth (eds.) This {{tutorial}} paper {{describes the}} capabilities and design philosophies of Chapter G of the IMSL (International Mathematics and Statistics <b>Libraries)</b> <b>subroutine</b> package. Several specific subroutines are described and further enhancements for later packages are alluded to...|$|R
5000|$|System {{time can}} be {{converted}} into calendar time, which is a form more suitable for human comprehension. For example, the Unix system time [...] seconds {{since the beginning of}} the epoch translates into the calendar time 9 September 2001 01:46:40 UT. <b>Library</b> <b>subroutines</b> that handle such conversions may also deal with adjustments for timezones, daylight saving time (DST), leap seconds, and the user's locale settings. Library routines are also generally provided that convert calendar times into system times.|$|R
40|$|We present BioSubroutine, an open {{depository}} server {{that automatically}} categorizes various subroutines frequently used in bioinformatics research. We processed a large bioinformatics <b>subroutine</b> <b>library</b> called Bio. pl {{that was the}} first Bioperl <b>subroutine</b> <b>library</b> built in 1995. Over 1000 subroutines were processed automatically and an HTML interface has been created. BioSubroutine can accept new subroutines and algorithms from any such <b>subroutine</b> <b>library,</b> as well as provide interactive user forms. The subroutines are stored in an SQL database for quick searching and accessing. BioSubroutine is an open access project under the BioLicense license scheme. close...|$|R
40|$|Most {{implementations}} of a radix- 2 fast Fourier transform {{on large}} scientific computers use algorithms that involve memory accesses whose strides are powers of two. (The term str/de means the memory increment between successive elements stored or fetched). Such strides are unacceptable for recently developed supercomputers, particularly the Cray- 2, because of serious difficulties with memory bank conflicts. This paper describes an algorithm {{for evaluating the}} fast Fourier transform that avoids this difficulty and thus could {{provide the basis for}} implementations that more fully utilize the power of the Cray- 2. A Fortran program implementing this algorithm is included, and timing comparisons with the Cray assembly-coded <b>library</b> <b>subroutine</b> are shown...|$|E
40|$|In component-based {{software}} engineering programs are constructed from pre-defined software library modules. However, if the library 2 ̆ 7 s subroutines do not exactly match the programmer 2 ̆ 7 s requirements, the subroutines 2 ̆ 7 code must be adapted accordingly. For this process {{to be acceptable}} in safety or mission-critical applications, where all code must be proven correct, it must be possible to verify the correctness of the adaptations themselves. In this paper we show how refinement theory {{can be used to}} model typical adaptation steps and to define the conditions that must be proven to verify that a <b>library</b> <b>subroutine</b> has been adapted correctly...|$|E
40|$|Ref: Journal of Supercomputing, vol. 1, no. 1 (July 1987), pg. 43 { 60 Most {{implementations}} of a radix- 2 fast Fourier transform {{on large}} scienti c computers use algorithms that involve memory accesses whose strides are powers of two. (The term stride means the memory increment between successive elements stored or fetched). Such strides are unacceptable for recently developed supercomputers, particularly the Cray- 2, because of serious di culties with memory bank con icts. This paper describes an algorithm {{for evaluating the}} fast Fourier transform that avoids this di culty andthus could {{provide the basis for}} implementations that more fully utilize the power of the Cray- 2. A Fortran program implementing this algorithm is included, and timing comparisons with the Cray assembly-coded <b>library</b> <b>subroutine</b> are shown...|$|E
40|$|Mathematical {{software}} libraries (IMSL, NAG) supply subprograms for {{the solution}} of a broad class of frequently occurring numerical problems. Therefore, the library routines are normally used as building blocks in more complex computer codes. Users taking advantage of this approach can simplify code development and introduce expertise to their codes. The acceptance of mathematical software libraries is strongly related {{to the quality of}} their components. Results on the performance and accuracy of <b>library</b> <b>subroutines</b> for matrix multiplication, {{the solution of}} linear equations and eigenvalue problems on a CRAY X-MP are reported...|$|R
40|$|Mathematical {{software}} libraries represent {{collections of}} subprograms for {{the solution of}} frequently occurring numerical problems. The acceptance of mathematical software libraries strongly depends {{on the quality of}} their components, because the library routines are often used as building blocks in more complex computer codes. This approach can simplify code development and introduce know-how to the user's code. Results on the performance and accuracy of <b>library</b> <b>subroutines</b> from IMSL and NAG for matrix multiplication, solution of linear equations, and eigenvalue problems on a CRAY X-MP and an IBM 3081 are reported...|$|R
40|$|This User's Manual {{describes}} the Hypercluster Parallel Processing Library, composed of FORTRAN-callable subroutines which enable a FORTRAN programmer to manipulate and transfer information throughout the Hypercluster at NASA Lewis Research Center. Each subroutine and its parameters {{are described in}} detail. A simple heat flow application using Laplace's equation is included to demonstrate the use {{of some of the}} <b>library's</b> <b>subroutines.</b> The manual can be used initially as an introduction to the parallel features provided by the library. Thereafter it {{can be used as a}} reference when programming an application...|$|R
40|$|A {{comprehensive}} {{computer program}} (SIMWEST) {{developed for the}} modeling of wind energy/storage systems utilizing any combination of five types of storage (pumped hydro, battery, thermal, flywheel, and pneumatic) is described. Features of the program include: a precompiler which generates computer models (in FORTRAN) of complex wind source/storage/application systems, from user specifications using the respective library components; a program which provides the techno-economic system analysis with the respective I/O the integration of system dynamics, and the iteration for conveyance of variables; and capability to evaluate economic feasibility as well as general performance of wind energy systems. The SIMWEST operation manual is presented and the usage of the SIMWEST program and {{the design of the}} library components are described. A number of example simulations intended to familiarize the user with the program's operation is given along with a listing of each SIMWEST <b>library</b> <b>subroutine...</b>|$|E
40|$|The paper {{presents}} performance {{results for}} some {{components of the}} new, public-domain version of the SLICOT <b>library</b> (<b>Subroutine</b> Library in Control Theory), in comparison with equivalent computations performed by some Matlab functions included in the Control Toolbox. SLICOT incorporates the new algorithmic developments in numerical linear algebra, implemented in the stateof -the-art software packages LAPACK and BLAS. The results show that, at comparable or better accuracy, SLICOT routines are several times faster than Matlab computations. 1 Introduction Matlab 1 [7] is an excellent tool for developing and testing new algorithmic ideas or new control analysis and synthesis methods. However, the practical experience has shown a sometimes poor performance of Matlab in a dedicated production-quality computer-aided control system design environment (CACSD). To achieve the robustness and efficiency needed for solving possibly illconditioned or large-scale real-life control problems, a [...] ...|$|E
40|$|A {{procedure}} to supply test data {{for a number}} of undergraduate programming exercises in the PL/ 1 language and check the validity of the programs is described. The procedure provides diag-nostic information to the student and performs all necessary output, as well as maintaining complete records of student performance on magnetic disc storage. The procedure differs from many previous grading routines in being called as a precompiled <b>library</b> <b>subroutine,</b> and is the first known grading procedure for PL/ 1. The initial set of class problems and specimen output listings are appended. In view of recent interest in what have become known as "grading programs " (Perlis and Braden, 1965; Forsythe and Wirth, 1965; Berry, 1966), the following description of another such program successfully imple-mented on an IBM System/ 360 Model 50 computer may be of value. Whereas previous published work has been almost exclusively for programs written in ALGOL or its dialects, this is the first known grading program for PL/ 1 exercises. Beginning in the third term of the 1966 academic year, introductory courses in digital computing have been given as part of undergraduate units in Statistics an...|$|E
50|$|By {{carefully}} using {{blocks of}} line numbers {{that do not}} overlap, programmers can build <b>libraries</b> of <b>subroutines</b> (simulating functions as above) and merge them into new programs as needed.|$|R
5000|$|<b>Subroutine</b> <b>library</b> {{containing}} input/output, mathematical, arithmetic and conversion routines ...|$|R
5000|$|The {{availability}} of a rich collection of well-documented <b>subroutine</b> <b>libraries.</b>|$|R
40|$|ABSTRACT: Real world optical design {{teaching}} {{system which}} include the software design program and the hardware robotic optical bench with stock lens set as well as image evalution with CCD testing equipment has been build up. The datum of optical lens distance and the lens curvature are input to robotic the control program by digit meter and robotic which connected to the lens holder in the bench. The datum of the index of refraction and the curvature of stock lenses are stored in the lens <b>library</b> <b>subroutine</b> with code number in order easily to key in. According to the optical design program, servomotors drive the lens and its holders to suitable positions. The result of update optical system are checked by the resolving power projector to project test pattern through optical system to screen to be inspected and processed by CCD camera and image process system. The value of the square wave modular transfer functions are calculated and feed back to the optical design program to suggest the direction for the next turn of optimization. This system can show the aberration patterns {{with respect to the}} variance of lenses position and different sets of lenses. And in the lens optimizing process, by visualize and real time process which give the student real feeling to the abstract optical design course. ...|$|E
40|$|Adsorption Process Has Been Gaining Its Popularity As An Effective Alternative For Separation Processes. Two Fundamental Properties That Determine The Adsorption Rate Are The Adsorption Equilibrium And The Mass Transfer Limitation. The Adsorption Isotherm Is Obtained From Batch Studies. The Mass Transfer Coefficients Of The Batch Studies Need To Be Extracted By Matching The Model With The Experimental Data. For Dye Adsorption On Activated Carbon, Concentration Dependent Surface Diffusivity Is The Most Important Mass Transfer Parameter And Must Be Included In The Study. The Pore Diffusivity Should Also Be Included To Improve The Accuracy Of The Simulation. In This Work, A Mathematical Model For Adsorption Rate Was Developed Based On The Film-Poreconcentration Dependent Surface Diffusion (FPCDSD) Model. The Governing Partial Differential Equations (Pdes) Were Transformed To Ordinary Differential Equations (Odes) Using Orthogonal Collocation (OC) Method. This Set Of Odes Was Then Integrated Using The Numerical Algorithm DIVPAG (IMSL <b>Library</b> <b>Subroutine),</b> Which Was Based On Gearâ€™s Method. The FPCDSD Model Is Sufficiently General And Can Be Reduced Easily To Describe Other Simpler Models For Liquid Adsorption, Such As Film-Concentration Dependent Surface Diffusion (FCDSD) Model And Film-Pore Diffusion (FPD) Model. The Data Fitting Using The FPD Model Was Unsatisfactory. Both The FPCDSD And The FCDSD Model Were Able To Fit The Experimental Data Using A Single Set Of Mass Transfer Parameters. However, The Ds 2 Values For FCDSD Model Were Found To Be About 30...|$|E
40|$|We {{describe}} the design, implementation, {{and performance of}} a frontal code for the solution of large sparse symmetric systems of linear finite-element equations. The code is intended primarily for positive-definite systems, since numerical pivoting is not performed. The resulting software package, MA 62, {{will be included in}} the Harwell <b>Subroutine</b> <b>Library.</b> We illustrate the performance of our new code on a range of problems arising from real engineering and industrial applications. The performance of the code is compared with that of the Harwell <b>Subroutine</b> <b>Library</b> general frontal solver MA 42 and with other positive-definite codes from the Harwell <b>Subroutine</b> <b>Library...</b>|$|R
40|$|The paper {{presents}} {{the development and}} application of software for structural analysis adapted to construction engineering applications. The software consists of data structures, application <b>subroutine</b> <b>libraries</b> and the built-in Matlab <b>subroutine</b> <b>library.</b> For each application, the user writes an application-specific main program using the data structures and routines in the <b>subroutine</b> <b>libraries.</b> This gives the user flexibility to build a main program that is adapted to {{the specific needs of}} the current application. The software has been tested in a number of real-world projects, e. g. tunnels and bridges. The examples show that the software is a useful design tool for design work...|$|R
40|$|The Fortran {{simulation}} translator (FST) is {{a simulation}} language, {{that enables the}} researcher to develop concepts, in terms of mathematical equations, e. g. about agro-ecological systems, that are converted in a Fortran program with data files (Fortran simulation environment, FSE). This generated Fortran program is well-structured and can be executed using both user developed and standard mathematical <b>library</b> <b>subroutines</b> (e. g. IMSL). The possibility to use the generated Fortran program {{as a starting point}} for further model development makes FST a valuable tool, both for research and education. (C) 2002 Elsevier Science B. V. All rights reserved...|$|R
5000|$|CUBLAS - CUDA Basic Linear Algebra <b>Subroutines</b> <b>library,</b> see {{main and}} docs ...|$|R
5000|$|The IBM 1130 {{was a small}} 16-bit word-addressable machine. It {{had only}} six {{registers}} plus condition indicators, and no stack. The registers are Instruction Address Register (IAR), Accumulator (ACC), Accumulator Extension (EXT), and three index registers X1 - X3. The calling program is responsible for saving ACC, EXT, X1, and X2. There are two pseudo-operations for calling subroutines, [...] to code non-relocatable subroutines directly linked with the main program, and [...] to call relocatable <b>library</b> <b>subroutines</b> through a transfer vector. [...] Both pseudo-ops resolve to a Branch and Store IAR (...) machine instruction that stores {{the address of the}} next instruction at its effective address (EA) and branches to EA+1.|$|R
50|$|ESSL: IBM's Engineering and Scientific <b>Subroutine</b> <b>Library,</b> {{supporting}} the PowerPC architecture under AIX and Linux.|$|R
50|$|In the 1960s, programmers built {{scientific}} <b>subroutine</b> <b>libraries</b> {{that were}} reusable {{in a broad}} array of engineering and scientific applications. Though these <b>subroutine</b> <b>libraries</b> reused well-defined algorithms in an effective manner, they had a limited domain of application. Commercial sites routinely created application programs from reusable modules written in assembly language, COBOL, PL/1 and other second- and third-generation languages using both system and user application libraries.|$|R
40|$|Most work {{concerning}} secure computer sys-tems {{has dealt}} with the design, verification, and implementation of provably secure computer sys-tems, or has explored ways of making existing computer systems more secure. The problem of locating security holes in existing systems has received considerably less attention; methods gen-erally rely on “thought experiments ” as a critical step in the procedure. The difficulty is that such experiments require that {{a large amount of}} infor-mation be available in a format that makes corre-lating the details of various programs straightfor-ward. This paper describes a method of providing such a basis for the “thought experiment ” by writ-ing a special manual for parts of the operating sys-tem, system programs, and <b>library</b> <b>subroutines...</b>|$|R
5000|$|With {{the advent}} of {{numerical}} programming, sophisticated <b>subroutine</b> <b>libraries</b> became useful. These <b>libraries</b> would contain <b>subroutines</b> for common high-level mathematical operations such as root finding, matrix inversion, and solving systems of equations. The language of choice was FORTRAN. The most prominent numerical programming library was IBM's Scientific Subroutine Package (SSP). [...] These <b>subroutine</b> <b>libraries</b> allowed programmers to concentrate on their specific problems and avoid re-implementing well-known algorithms. The library routines would also be better than average implementations; matrix algorithms, for example, might use full pivoting to get better numerical accuracy. The library routines would also have more efficient routines. For example, a library may include a program to solve a matrix that is upper triangular. The libraries would include single-precision and double-precision versions of some algorithms.|$|R
50|$|The Model 44 Programming System {{software}} {{included a}} supervisor, utility programs, assembler, FORTRAN IV compiler, and a <b>library</b> of scientific <b>subroutines.</b>|$|R
