71|0|Public
25|$|Any search {{strategy}} {{can be used}} to search this space. Prolog uses a sequential, <b>last-in-first-out,</b> backtracking strategy, in which only one alternative and one sub-goal is considered at a time. Other search strategies, such as parallel search, intelligent backtracking, or best-first search to find an optimal solution, are also possible.|$|E
25|$|To prevent {{frustration}} with unsensed failures, all {{the connections between}} layers in the switch are allocated using first-in-first-out lists (queues). As a result, if a connection is faulty or noisy and the customer hangs up and redials, they will get {{a different set of}} connections and subswitches. A <b>last-in-first-out</b> (stack) allocation of connections might cause a continuing string of very frustrating failures.|$|E
50|$|A Turing {{machine is}} {{equivalent}} to a single-stack pushdown automaton (PDA) {{that has been made}} more flexible and concise by relaxing the <b>last-in-first-out</b> requirement of its stack. In addition, a Turing machine is also equivalent to a two-stack PDA with standard <b>last-in-first-out</b> semantics, by using one stack to model the right side and the other stack to model {{the left side of the}} Turing machine.|$|E
50|$|FIFO's {{opposite}} is LIFO, <b>last-in-first-out,</b> where the youngest entry or 'top of the stack' is processed first.|$|E
50|$|Stacks in {{computing}} architectures are {{regions of}} memory where data is added or removed in a <b>last-in-first-out</b> (LIFO) manner.|$|E
50|$|This {{clustering}} {{result can}} be used to modify the drift-plus-penalty algorithm to enable improved O(1/V), O(log2(V)) tradeoffs. The modifications can use either place-holder backlog or <b>Last-in-First-Out</b> (LIFO) scheduling.|$|E
5000|$|It is {{established}} practice that [...] "bumping" [...] may be fair. This means making one employee redundant to save another's job, typically on a <b>last-in-first-out</b> ("LIFO") basis. But the employer has no duty {{to do so}} and the bumped employee may succeed in a claim for unfair dismissal.|$|E
50|$|Any search {{strategy}} {{can be used}} to search this space. Prolog uses a sequential, <b>last-in-first-out,</b> backtracking strategy, in which only one alternative and one sub-goal is considered at a time. Other search strategies, such as parallel search, intelligent backtracking, or best-first search to find an optimal solution, are also possible.|$|E
5000|$|Stacks {{are created}} using [...] The stack offers methods {{to put a}} new object on the stack (method push (...) [...] ) and to get objects from the stack (method pop (...) [...] ). A stack returns the object {{according}} to <b>last-in-first-out</b> (LIFO), e.g. the object which was placed latest on the stack is returned first. java.util.Stack is a standard implementation of a stack provided by Java. The Stack class represents a <b>last-in-first-out</b> (LIFO) stack of objects. It extends class [...] with five operations that allow a vector {{to be treated as}} a stack. The usual push and pop operations are provided, as well as a method to peek at the top item on the stack, a method to test for whether the stack is empty, and a method to search the stack for an item and discover how far it is from the top. When a stack is first created, it contains no items.|$|E
50|$|To prevent {{frustration}} with unsensed failures, all {{the connections between}} layers in the switch are allocated using first-in-first-out lists (queues). As a result, if a connection is faulty or noisy and the customer hangs up and redials, they will get {{a different set of}} connections and subswitches. A <b>last-in-first-out</b> (stack) allocation of connections might cause a continuing string of very frustrating failures.|$|E
50|$|When {{multiple}} {{goods are}} bought or made, {{it may be}} necessary to identify which costs relate to which particular goods sold. This may be done using an identification convention, such as specific identification of the goods, first-in-first-out (FIFO), or average cost. Alternative systems may be used in some countries, such as <b>last-in-first-out</b> (LIFO), gross profit method, retail method, or combinations of these.|$|E
5000|$|It is also {{possible}} to implement backpressure on a set ofpre-specified paths. This can restrict the capacity region, but might improve in-orderdelivery and delay. Another way to improve delay, without affecting the capacity region, is to use an enhancedversion that biases link weights towards desirable directions. [...] Simulations of such biasing have shown significant delay improvements.Note that backpressure does not require First-in-First-Out (FIFO) service at the queues. It has been observedthat <b>Last-in-First-Out</b> (LIFO) service can dramatically improve delay {{for the vast majority}} of packets,without affecting throughput.|$|E
50|$|Because {{the data}} is added and removed in a <b>last-in-first-out</b> manner, stack-based memory {{allocation}} is very simple and typically faster than heap-based memory allocation (also known as dynamic memory allocation). Another feature is that memory on the stack is automatically, and very efficiently, reclaimed when the function exits, which can be convenient for the programmer if {{the data is}} no longer required. If however, the data needs {{to be kept in}} some form, then it must be copied from the stack before the function exits. Therefore, stack based allocation is suitable for temporary data or data which is no longer required after the creating function exits.|$|E
5000|$|In both SL and SLD, [...] "S" [...] {{stands for}} the fact that the only literal {{resolved}} upon in any clause [...] is one that is uniquely selected by a selection rule or selection function. In SL resolution, the selected literal is restricted to one which has been most recently introduced into the clause. In the simplest case, such a <b>last-in-first-out</b> selection function can be specified by the order in which literals are written, as in Prolog. However, the selection function in SLD resolution is more general than in SL resolution and in Prolog. There is no restriction on the literal that can be selected.|$|E
5000|$|A {{number of}} {{proposed}} {{changes to the}} United States tax code have been announced by the United States House Committee on Ways and Means. The proposal would reduce the federal corporate tax rate from 35 percent to 20 percent as well as repealing the corporate alternative minimum tax (“AMT”). Depreciation rules would be replaced with expensing new investment in equipment, structures, and intellectual property. Depreciation or expensing deduction {{would not be allowed}} for land, and inventories would be subject to <b>last-in-first-out</b> (LIFO) accounting. In addition, the deductibility of net interest expense would be eliminated. Additionally, corporate tax would be [...] "border adjusted", which would mean that exports would be exempt from the tax and imports subject to it.|$|E
50|$|Dynamic scoping {{is fairly}} easy to implement. To find an identifier's value, the program could {{traverse}} the runtime stack, checking each activation record (each function's stack frame) for a value for the identifier. In practice, this is made more efficient via {{the use of an}} association list, which is a stack of name/value pairs. Pairs are pushed onto this stack whenever declarations are made, and popped whenever variables go out of scope. Shallow binding is an alternative strategy that is considerably faster, making use of a central reference table, which associates each name with its own stack of meanings. This avoids a linear search during run-time to find a particular name, but care should be taken to properly maintain this table. Note that both of these strategies assume a <b>last-in-first-out</b> (LIFO) ordering to bindings for any one variable; in practice all bindings are so ordered.|$|E
50|$|For example, an {{abstract}} stack, {{which is a}} <b>last-in-first-out</b> structure, could be defined by three operations: push, that inserts a data item onto the stack; pop, that removes a data item from it; and peek or top, that accesses a data item {{on top of the}} stack without removal. An abstract queue, which is a first-in-first-out structure, would also have three operations: enqueue, that inserts a data item into the queue; dequeue, that removes the first data item from it; and front, that accesses and serves the first data item in the queue. There would be no way of differentiating these two data types, unless a mathematical constraint is introduced that for a stack specifies that each pop always returns the most recently pushed item that has not been popped yet. When analyzing the efficiency of algorithms that use stacks, one may also specify that all operations take the same time no matter how many data items have been pushed into the stack, and that the stack uses a constant amount of storage for each element.|$|E
5000|$|So-called [...] "subroutine-threaded code" [...] (also [...] "call-threaded code") {{consists}} {{of a series of}} machine-language [...] "call" [...] instructions (or addresses of functions to [...] "call", as opposed to direct threading's use of [...] "jump"). Early compilers for ALGOL, Fortran, Cobol and some Forth systems often produced subroutine-threaded code. The code in many of these systems operated on a <b>last-in-first-out</b> (LIFO) stack of operands, which had well-developed compiler theory. Most modern processors have special hardware support for subroutine [...] "call" [...] and [...] "return" [...] instructions, so the overhead of one extra machine instruction per dispatch is somewhat diminished. Anton Ertl has stated [...] "that, in contrast to popular myths, subroutine threading is usually slower than direct threading". However, Ertl's most recent tests show that subroutine threading is faster than direct threading in 15 out of 25 test cases. Ertl's most recent tests show that direct threading is the fastest threading model on Xeon, Opteron, and Athlon processors; indirect threading is the fastest threading model on Pentium M processors; and subroutine threading is the fastest threading model on Pentium 4, Pentium III, and PPC processors.|$|E
5000|$|The first area—stemming {{from his}} 1980 Oxford doctorate—was {{how to write}} down {{mathematical}} models of trade union behaviour. In the late 1970s, such research was unconventional. However, along with the important 1981 paper by McDonald and Solow in the American Economic Review, Oswald's work was to become standard in modern textbooks. It included a 1982 paper, in The Economic Journal, {{which was the first}} to propose the idea of the ‘utilitarian’ trade union model. Later in the 1980s, he worked on theoretical aspects of labour contracts, with papers in the 1986 American Economic Review and the 1984 Quarterly Journal of Economics. A 1993 paper in Labour Economics argued that <b>last-in-first-out</b> layoff rules means that union indifference curves are locally horizontal. Then began a strand of empirical work on labour markets—particularly the then-unconventional book The Wage Curve [...] (with David G. ("Danny") Blanchflower), published by MIT Press in 1994. This documented the discovery of a power law—with an exponent of approximately -0.1 -- linking wages to the local unemployment rate. Unusually for that era, it used data on 5 million randomly sampled workers around the world; this book went on to win Princeton’s Lester Prize. Replications of the wage-curve finding have been found in a large number of nations. His other research on wage formation demonstrated the importance of rent-sharing in the labour market (Quarterly Journal of Economics 1992, Quarterly Journal of Economics 1996); it included it an Oxford University Press book co-authored with Alan Carruth. The fourth strand of work was on entrepreneurship. This led in particular to a 1998 paper, with Danny Blanchflower, in the Journal of Labor Economics with the title [...] "What makes an entrepreneur?". [...] This has become a principal reference in university and business-school courses. It is the most-cited paper of all time in JOLE. (source: Thomson Reuters Web of Science Database, 2013) Other work was on the idea that high rates of home ownership lead to a high rate of unemployment (in the 1997 Journal of Economic Perspectives) and that oil price shocks are a key driver of movements in unemployment (in the 1998 Review of Economics and Statistics).|$|E
40|$|The {{feasible}} solutions of {{the traveling}} salesman problem with pickup and delivery (TSPPD) are commonly represented by vertex lists. However, when the TSPPD {{is required to}} follow a policy that loading and unloading operations must be performed in a <b>last-in-first-out</b> (LIFO) manner, we show that its feasible solutions can be represented by trees. Consequently, we develop a novel variable neighborhood search (VNS) heuristic for the TSPPD with <b>last-in-first-out</b> loading (TSPPDL) involving several search operators based on the tree data structure. Extensive experiments suggest that our VNS heuristic is superior to the current best heuristics for the TSPPDL in terms of solution quality, while requiring no more computing time as {{the size of the}} problem increases. Traveling salesman Pickup and delivery <b>Last-in-first-out</b> loading Tree data structure Variable neighborhood search...|$|E
40|$|In {{this paper}} we {{introduce}} {{the concept of}} s-monotone index selection rule for linear programming problems. We show that several known anti-cycling pivot rules like the minimal index, <b>Last-In–First-Out</b> and the most-often-selected-variable pivot rules are s-monotone index selection rules. Furthermore, we show a possible way to define new s-monotone pivot rules. We prove that several known algorithms like the primal (dual) simplex, MBU-simplex algorithms and criss-cross algorithm with s-monotone pivot rules are finite methods. We implemented primal simplex and primal MBU-simplex algorithms, in MATLAB, using three s-monotone index selection rules, the minimal-index, the <b>Last-In–First-Out</b> (LIFO) and the Most-Often-Selected-Variable (MOSV) index selection rule. Numerical results demonstrate {{the viability of the}} above listed s-monotone index selection rules in the framework of pivot algorithms...|$|E
40|$|This paper {{addresses}} {{a variation of}} the traveling salesman problem with pickup and delivery in which loading and unloading operations have to be executed in a <b>last-in-first-out</b> (LIFO) order. We introduce three new local search operators for this problem, which are then embedded within a variable neighborhood search heuristic. We evaluate the performance of the heuristic on data adapted from TSPLIB instances...|$|E
40|$|Abstract. We {{consider}} {{the extension of}} the <b>last-in-first-out</b> graph search-ing game of Giannopoulou and Thilikos to digraphs. We show that all common variations of the game require the same number of searchers, and the minimal number of searchers required is one more than the cycle-rank of the digraph. We also obtain a tight duality theorem, giving a precise min-max characterization of obstructions for cycle-rank. ...|$|E
40|$|We {{construct}} a multi-country employer-employee data {{to examine the}} consequences of employment protection. We identify the effects by comparing worker exit rates between units of the same firm that operate in two countries that have different seniority rules. The results show that <b>last-in-first-out</b> rules reduce dismissals of older, more senior workers, especially in shrinking multinational firms, and increase their bargaining power, resulting in a steeper seniority-wage profile...|$|E
40|$|An address trap (breakpoint) {{mechanism}} and <b>last-in-first-out</b> (LIFO) address stack are suggested as two {{additions to the}} basic microprocessor architecture whose functions are solely to aid the programmer. These devices provide the programmer {{with the ability to}} specify address breakpoints and to trace program execution back through N instructions, where N is the depth of the stack. Both devices, plus interface logic and buffering, have been designed for an INTEL 8080 -based system using approximately 25 integrated-circuit packages...|$|E
40|$|We {{consider}} the adjacency matrix {{associated with a}} graph that describes transitions between $ 2 ^{N}$ states of the discrete Preisach memory model. This matrix can also {{be associated with the}} <b>last-in-first-out</b> inventory management rule. We present an explicit solution for the spectrum by showing that the characteristic polynomial is the product of Chebyshev polynomials. The eigenvalue distribution (density of states) is explicitly calculated and is shown to approach a scaled Devil's staircase. The eigenvectors of the adjacency matrix are also expressed analytically...|$|E
40|$|Several {{variations}} of index selection rules for simplex-type algorithms for linear programming, like the <b>Last-In-First-Out</b> or the Most-Often-Selected-Variable are rules not only theoretically finite, but also provide significant flexibility {{in choosing a}} pivot element. Based on an implementation of the primal simplex and the monotonic build-up (MBU) simplex method, the practical benefit of the flexibility of these anti-cycling pivot rules is evaluated using public benchmark LP test sets. Our results also provide numerical evidence that the MBU-simplex algorithm is {{a viable alternative to}} the traditional simplex algorithm...|$|E
40|$|We {{consider}} an M/G/ 1 queue that is idle at time 0. The {{number of customers}} sampled at an independent exponential time is shown {{to have the same}} geometric distribution under the preemptive-resume <b>last-in-first-out</b> and the processor-sharing disciplines. Hence, the marginal distribution of the queue length at any time is identical for both disciplines. We then give a detailed analysis of the time until the first departure for any symmetric queueing discipline. We characterize its distribution and show that it is insensitive to the service discipline. Finally, we study the tail behavior of this distribution...|$|E
40|$|The minimum $k$-enclosing ball problem {{seeks the}} ball with {{smallest}} radius that contains at least~$k$ of~$m$ given points in a general $n$-dimensional Euclidean space. This problem is NP-hard. We present a branch-and-bound algorithm on the tree of the subsets of~$k$ points to solve this problem. The nodes on the tree are ordered in a suitable way, which, complemented with a <b>last-in-first-out</b> search strategy, allows for {{only a small fraction}} of nodes to be explored. Additionally, an efficient dual algorithm to solve the subproblems at each node is employed. Comment: 20 pages, 9 figure...|$|E
30|$|The second {{category}} {{is to reduce}} the complexity of queue structure at nodes. Typically, in [9, 17], per-neighbor queue structure is used to replace the per-flow queue in classical back-pressure algorithm, which can significantly reduce the packet average delay. In [16], cluster-based back-pressure scheduling allows each node to maintain two types of queues, i.e., queues for gateways to reach destined cluster and queues for nodes within the current cluster. In this way, it largely reduces the total number of queues needed to be maintained in the network. In [7], a <b>last-in-first-out</b> (LIFO) queue is used, which helps decrease the average packet delay.|$|E
40|$|This paper {{introduces}} an additive branch-and-bound algorithm for two {{variants of}} the pickup and delivery traveling salesman problem in which loading and unloading operations {{have to be performed}} either in a <b>Last-In-First-Out</b> (LIFO) or in a First-In-First-Out (FIFO) order. Two relaxations are used within the additive approach: the assignment problem and the shortest spanning r-arborescence problem. The quality of the lower bounds is further improved by a set of elimination rules applied at each node of the search tree to remove from the problem arcs that cannot belong to feasible solutions because of precedence relationships. The performance of the algorithm and the effectiveness of the elimination rules are assessed on instances from the literature...|$|E
40|$|Abstract. In the uncapacitated {{asymmetric}} traveling salesman {{with multiple}} stacks, we perform a hamiltonian circuit {{to pick up}} n items, storing them in a vehicle with k stacks satisfying <b>last-in-first-out</b> constraints, and then we deliver every item by performing a hamiltonian circuit. We {{are interested in the}} convex hull of the (arc-) incidence vectors of such couples of hamiltonian circuits. For the general case, we determine the dimension of this polytope, and show that every facet of the asymmetric traveling salesman polytope defines one of its facets. For the special case with two stacks, we provide an integer linear programming formulation whose linear relaxation is polynomial-time solvable, and we propose new families of valid inequalities to reinforce this linear relaxation...|$|E
40|$|This paper {{provides}} evidence {{consistent with}} firms with <b>Last-in-first-out</b> (LIFO) inventory policy being priced {{by the market}} as having lower information risk than First-in-first-out (FIFO) firms. Furthermore, the paper shows that this pricing differential is sustained after controlling for accruals quality, suggesting that the inventory policy signals some information risk characteristics that are not captured by accruals quality measure. We investigate the relation between inventory policy and accruals quality and find that accruals quality is systematically worse for FIFO firms than for LIFO firms after controlling for correlated omitted variables and known firm attributes. These findings complement the currently established relationship between the cost of capital, market pricing and accruals quality {{by focusing on the}} need for understanding the incremental effects of individual accounting policies. School of Accounting and Financ...|$|E
30|$|Transaction cost {{may affect}} price {{transmission}} in different ways. On the supply side, menu costs may prevent retailers from changing selling price despite variations of input prices or inflation (Ball and Mankiw, 1994); the organisation of stock management procedure (i.e. first-in-first-out and <b>last-in-first-out</b> of the stock) may determine time lags in price transmission (Reagan and Weitzman, 1982; Wohlgenant, 1985). Kimmel (Kimmel, 2009) develops practical reasoning {{about the process}} that lead firms to react to decrease/increase of input price, mixing considerations about cost structure, transaction cost which are implicit {{in the decision-making process}} regarding output level (e.g. via contracts, advertising), expectations, and the inherent time lag of decision making itself. On the demand side, transaction cost may also be effective if consumer search cost in oligopoly appears (Chavas and Mehta, 2001, p. 1; Sheldon and Sperling, 2003, p. 103).|$|E
40|$|In this paper, we {{investigate}} {{the performance of}} a three-node dual-hop cognitive radio network (CRN) with a half-duplex (HD) decode-and-forward (DF) buffer-aided relay. We derive expressions for the average rate and symbol error rate (SER) performance of an adaptive link selection based channel-aware buffer-aided relay (CABR) scheme that imposes peak-power and peak-interference constraints on the secondary nodes, and compare them with those of conventional non-buffer-aided relay (CNBR) and conventional buffer-aided relay (CBR) schemes for a delay-tolerant system. For finite-delay systems, we analyze {{the performance of a}} modified threshold-based scheme for fixed-rate transmission, and demonstrate that use of a <b>last-in-first-out</b> buffer is advantageous in some situations. We bring out the trade-offs between delay, throughput and SER. Computer simulation results are presented to demonstrate accuracy of the derived expressions. Comment: This work has been submitted to the IEEE Transaction of Vehicular Technology for possible publicatio...|$|E
40|$|In {{this paper}} we {{experimentally}} evaluate {{the performance of}} a parametrized branch-and-bound (B&B) algorithm for scheduling real-time tasks on a multiprocessor system. The objective of the B&B algorithm is to minimize the maximum task lateness in the system. We show that a <b>last-in-first-out</b> (LIFO) vertex selection rule clearly outperforms the commonly used least-lower-bound (LLB) rule for the scheduling problem. We also present a new adaptive lower-bound cost function that greatly improves the performance of the B&B algorithm when parallelism in the application cannot be fully exploited on the multiprocessor architecture. Finally, we evaluate a set of heuristic strategies, one of which generates near-optimal results with performance guarantees and another of which generates approximate results without performance guarantees. 1 Introduction Since its introduction in the field of artificial intelligence, the branch-and-bound (B&B) strategy has been successfully used for finding optimal [...] ...|$|E
