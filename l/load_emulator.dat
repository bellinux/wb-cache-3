5|9|Public
40|$|A {{resonant}} <b>load</b> <b>emulator</b> for distributed {{energy resource}} inverters to test anti-islanding algo- rithms is presented. This emulator allows to change the operation conditions {{that can be applied}} during development, test and certification of an inverter under resonant loads. It is based on a three-phase three-wire inverter that exchanges the required currents imitating the behavior of real resonant loadsPostprint (published version...|$|E
40|$|The authors {{present a}} test {{platform}} for the low-power DC electric motor of a traction vehicle or a high-power motor scaled in the traction and braking modes. The <b>load</b> <b>emulator</b> of the traction drive is made using an induction motor controlled by a frequency converter. A microcontroller controls the bi-directional DC/DC converter and sends a speed reference signal to the frequency converter. The test bench is meant for determination of the power consumption by motor in various speed cycles, and {{will be used to}} demonstrate the operation of electric vehicle to students and to investigate the charging/discharging strategies of energy sources...|$|E
40|$|Abstract. Since it {{can change}} {{electron}} energy distribution functions, {{very high frequency}} (VHF) plasma has gained significant attention as a promising new class of plasma. We demonstrate an automatic matching system for VHF plasma, that works in very wide ranges. A matching system was prepared using conventional variable capacitors. Reflection coefficient at the input of the matching circuits was measured with a directional coupler. A new calculation method for automatic matching based on numerical models for the circuit was developed, {{and the performance of}} the automatic matching system was evaluated using a <b>load</b> <b>emulator.</b> These results revealed that the system has an automatic matching capability for the entire range of the covering load area...|$|E
40|$|This paper {{deals with}} {{hardware-in-the-loop}} simulation of urban electric vehicles. The proposed platform, {{which is expected}} to be used for electric vehicle prototyping, is very simple and effective. Indeed, the induction motorbased powertrain is coupled to DC machine-based <b>load</b> torque <b>emulator</b> taking into account the electric vehicle mechanics and aerodynamics. Experiments are carried-out using the New European Driving Cycle (NEDC) to show that the proposed hardware-in-the-loop simulation system is effective and provides a simple configuration for prototyping electric vehicles...|$|R
5000|$|Along with {{reference}} implementation of X protocol X.org Foundation hosts development of several utilities and example applications, including [...] on-screen calculator, [...] simple digital and analog clock, [...] text editor, [...] periodically updated histogram {{of the average}} system <b>load,</b> [...] terminal <b>emulator,</b> and [...] which shows a pair of eyes that follow the cursor.|$|R
5000|$|Emulation {{software}} {{may offer}} improved audio capabilities (e.g. decreased latency and better audio interpolation), enhanced save states (which allow {{the user to}} save a game at any point for debugging or re-try) and decreased boot and <b>loading</b> times. Some <b>emulators</b> feature an option to [...] "quickly" [...] boot a game, bypassing the console manufacturer's original splash screens.|$|R
40|$|The paper {{presents}} {{a method of}} emulating electrical loads using power electronic converters. The loads include machines such as induction motors and its associated mechanical load and also more complex machine systems such as wind power generation systems. The <b>load</b> <b>emulator</b> is effectively a dynamically controllable source or sink which is capable of bidirectional power exchange with either a grid or another power electronic converter system. Using load emulation, the feasibility of connecting a particular load to a grid under various conditions can be studied {{in the absence of}} any electromechanical machinery. This paper considers the case of a power electronic Voltage Source Inverter (VSI) emulating a three phase induction motor connected to a three phase ac grid. The VSI is operated in a mode where the current drawn from the ac grid is controlled by closed loop control. Experimental results have been provided to verify the scheme...|$|E
40|$|This paper {{presents}} {{a method of}} emulating electrical loads using power electronic converters. The loads include machines such as induction motors and their associated mechanical load and also more complex machine systems such as wind-driven generators. The <b>load</b> <b>emulator</b> is, effectively, a dynamically controllable source or sink which is capable of bidirectional power exchange with either a grid or another power electronic converter system. Using load emulation, the feasibility of connecting a particular machine to a grid under various load conditions can be examined {{without the need for}} any electromechanical machinery. This paper considers the case of a power electronic voltage source inverter (VSI) emulating a three-phase induction motor connected to a three-phase ac grid. The VSI is operated in a mode where the current drawn from the ac grid is controlled by closed-loop control. The consistency of the experimental results with the simulation results proves the ability of the emulator and the proposed testing approach...|$|E
25|$|This option {{writes the}} {{operating}} system to a disk image (ISO) file, which can be <b>loaded</b> into some <b>emulators</b> (such as Bochs, QEMU or more commonly VMware) or written to a CD-ROM and booted on real hardware. This option also allows deploying to a USB mass storage device, such as a USB flash drive, to boot on devices {{that may not have}} an optical disc drive. Because networking is not in place yet, debugging is unsupported with this deploy option.|$|R
40|$|This paper {{presents}} the design, implementation, and experimental validation of a digitally-controlled emulator of proton exchange membrane (PEM) fuel cells for static and dynamic behavior. The emulator {{is a low}} cost, easy to use, and portable device designed to evaluate power systems and control strategies for fuel cell-based generation systems. For the implementation of this emulator, an appropriate mathematical model is chosen, parameterized, and experimentally validated. The resulting model is processed digitally by the emulator, which generates the appropriate electrical behavior to a <b>load.</b> The <b>emulator</b> power stage is implemented by using a two-inductor step-down DC/DC switching converter, which is controlled directly by the digital processing system. Later, the electrical scheme of the power stage and the block diagram of the system are presented, and {{the behavior of the}} emulator is illustrated with a simulation. Finally, the emulator is validated using experimental data...|$|R
50|$|Creating a tool-assisted speedrun is {{the process}} of finding the optimal set of inputs to fulfill a given {{criterion}} â€” usually completing a game as fast as possible. No limits are imposed on the tools used for this search, but the result has to be a set of timed key-presses that, when played back on the actual console, achieves the target criterion. The basic method used to construct such a set of inputs is to record one's input while playing the game on an emulator, all the while saving and <b>loading</b> the <b>emulator's</b> state repeatedly to test out various possibilities and only keep the best result. To make this more precise, the game is slowed down. Initially, it was common to slow down to some low fraction (e.g. 5%) of normal speed. However, due to advances in the field, it is now expected that frame-advance, manually stepping through emulation one frame at a time, is used. A tool-assisted speedrun done without this technique will most likely be criticised for sloppy play.|$|R
40|$|Machine) implementation. Erlang [2] is {{compiled}} to {{code for}} a virtual machine, the JAM. The Erlang compiler is itself written in Erlang. The JAM is implemented by an emulator written in "C". The emulator also implements code loading, memory management, concurrency, garbage collection, distribution (at present with TCP/IP) and built-in functions. Each Erlang module is compiled {{to a separate}} file of instructions which can be executed by the <b>emulator.</b> The <b>emulator</b> <b>loads</b> these files as they are needed. Modules can also be pre-loaded. Modules which are already loaded can be replaced by modified modules - even if these modules are being used. Garbage collection is done on a per internal Erlang process basis. This means that pauses for garbage collection will be very short provided {{that there are no}} very large processes. Supported versions of this implementation are available (at present) on ffl SUN Workstations (both SunOS 4 and Solaris 2) ffl RS 6000 / AIX ffl Interactive Systems UNIX o [...] ...|$|R
40|$|Thesis (Masters Diploma (Electrical Engineering)) [...] Cape Technikon, Cape Town, 1987 This thesis {{describes}} {{the development of}} a computerized Load Recorder. The load recorder is used by the Cape Town City Council to assist in the tariff investigation of electricity consumers. This investigation assists the consumers in selecting the best cost effective electricity tariff. It also motivates the consumers to maintain a constant load which in turn assists the Council in supplying the required electricity. The load recorder replaces a manual and time consuming method used in conducting the tariff investigation. The development of the load recorder involved the design of hardware and software. It was designed in a compact enclosure to hook up to the electricity meters of the consumer for a period of 7 days. The software was designed in the 6805 assembly language to log data and record the electricity load every 15 or 30 minutes for this period. At the end of this period the data is downloaded into the HP 85 personal computer. A basic program was designed for the HP 85 to analyse and compute the downloaded data. A graphical representation and analysis is printed by the HP 85 computer. The given graph of the results represents the electricity used for this period. The tariff rates are analysed and calculated to determine the best cost effective tariff. A CMOS micro computer intergrated circuit was chosen due to the determined specification of the load recorder. In order to make the development of the load recorder possible an aid (tool) had to be designed and built for the chosen microprocessor. This development aid, the emulator, is included as part of this thesis. The Motorola exorciser only supported a cross assembler for the chosen microprocessor family. The emulator was designed and built to enable testing and debugging on the Exorciser. The development on the emulator involved a detailed analysis of the Exorciser development system. The emulator was designed using hardware and software. The hardware emulator board was designed as a standard Motorola size card which plugs into the Exorciser. The software was designed for the 6809 exorciser and for the 6805 emulator. The emulator was soak tested and debugged during the development of the <b>load</b> recorder. The <b>emulator</b> opened further avenues for future microcomputer design projects especially where a confined area and compactness is an important factor. The design and development of the <b>emulator</b> and the <b>load</b> recorder was conducted in the Computer Section of the City Electrical Engineer's Department of Cape Town...|$|R

