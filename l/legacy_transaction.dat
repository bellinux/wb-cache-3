3|4|Public
40|$|International audienceThis paper tackles {{the problem}} of {{composition}} of transaction services, which are governed by various transaction standards. Among others, we can cite the Object Transaction Service, Java Transaction Service, or Web Services Atomic Transaction. However, the Web Services Atomic Transaction standard encloses <b>legacy</b> <b>transaction</b> standards to support the Web Services application platform. This encapsulation introduces an additional complexity to the system and hides the specificities of <b>legacy</b> <b>transaction</b> standards. When composing heterogeneous legacy applications, the underlying transaction services are basically not composed transparently. This paper presents an approach to build an Adapted Transaction Service, named ATS, which supports several transaction standards concurrently. The objective of ATS is to facilitate the transaction standards composition. To introduce ATS we detail how the Object Transaction Service, Web Services Atomic Transaction, and Java Transaction Service standards can be composed. Besides, an ATS implementation is introduced using the GoTM framework. We show that this fine-grained component-based approach does not introduce an additional overhead to legacy applications and supports well scalability. Moreover, this approach can be extended to other standards...|$|E
40|$|In {{this paper}} we {{describe}} our experience applying {{the concepts of}} reflection to a <b>legacy</b> <b>transaction</b> processing (TP) monitor {{in order to support}} the implementation of extended transaction models. In the past ten years, numerous extended transaction models have been proposed to address challenges posed by new advanced applications. Few practical implementations of these extended transaction models exist, and none are being used in a commercial TP monitor. We believe the reason for this state of a airs is that the interface and functionality of commercial TP monitors is "locked in" to a fixed transaction model. We have developed the Reflective Transaction Framework as a practical method to implement extended transaction models on a commercial TP monitor. The design of our framework is based on the principles of computational reflection, and in particular open implementation. The implementation of our framework introduces transaction adapters, which are reflective software modules that provide a meta interface to the underlying TP monitor, allowing application developers the flexibility to adjust both the application programming interface and system functionality. Unlike classic reflective systems, the Reflective Transaction Framework applies reflection to a legacy TP monitor written in a non-reflective programming language. This paper focuses on the ability of the Reflective Transaction Framework to perform reflective computation and {{on the extent to which}} the legacy TP monitor supports this computation...|$|E
40|$|Not {{that long}} ago, {{businesses}} were scrambling {{to find a}} method of quickly extending their legacy applications to the Web. A variety of tactical Web-enablement technologies were used to meet that requirement, {{but most of these}} extension solutions were implemented as short-term, stop-gap responses to an immediate need. In many cases the resulting deployment infrastructures are fragile, failure-prone and inflexible. Until recently most extension solutions focused primarily on exposing <b>legacy</b> <b>transactions,</b> not business processes. Today’s business environment has moved beyond the need to simply expose <b>legacy</b> <b>transactions.</b> With the Micro Focus product line, organizations have the best tools to extend COBOL applications and support the flexibility demands of Service Oriented Architecture (SOA). In this paper we will {{take a look at how}} COBOL transaction...|$|R
40|$|With the {{conventional}} <b>legacy</b> POS payment <b>transaction</b> method, vendors {{are bound to}} a payment institute in their region and can only use relatively expensive dedicated or slow dial-up lines to their financial institute. This chapter covers the work to produce an architecture that shows how to reengineer traditional point of sales terminal payments in order to adapt these for payment over the Internet through Web services...|$|R
40|$|Abstract [...] In a {{reconfigurable}} platform {{such as the}} E 2 R platform, interconnectivity {{and data}} transfer between the different components in the platform {{is a very important}} task. In this paper we propose the interconnect as a reconfigurable resource which can be configured to the data transfer needs of the platform. Functionalities of the components in the resource’s Logical Device Drivers are elaborated. Additionally, with a NoC based C-CEM as an example, initialization, data transfer and <b>legacy</b> data transfer <b>transactions</b> support are explained in detail...|$|R
40|$|Abstract. Transactional memory (TM) has {{recently}} {{emerged as an}} effective tool for extracting fine-grain parallelism from declarative critical sections. In order to make STM systems practical, significant effort {{has been made to}} integrate transactions into existing programming languages. Unfortunately, existing approaches fail to provide a simple implementation that permits lock-based and transaction-based abstractions to coexist seamlessly. Because of the fundamental semantic differences between locks and <b>transactions,</b> <b>legacy</b> applications or libraries written using locks can not be transparently used within atomic regions. To address these shortcomings, we implement a uniform transactional execution environment for Java programs in which transactions can be integrated with more traditional concurrency control constructs. Programmers can run arbitrary programs that utilize traditional mutual-exclusion-based programming techniques, execute new programs written with explicit transactional constructs, and freely combine abstractions that use both coding styles. ...|$|R

