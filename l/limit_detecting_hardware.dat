0|942|Public
5000|$|... aid {{developers}} in <b>detecting</b> <b>hardware</b> that {{is poorly}} supported ...|$|R
40|$|Abstract—We {{develop a}} region-based timing {{characterization}} approach to <b>detect</b> <b>hardware</b> Trojans (HTs) on integrated circuits (ICs). In {{order to ensure}} the scalability of the approach, we partition the target IC into well-formed and non-overlapping regions and <b>detect</b> <b>hardware</b> Trojans on all circuit locations by examining the timing properties of the transistor paths. Based on the circuit partition, we insert a minimal number of test points that provide additional observation interfaces for the delay measurements of all circuit locations. Our evaluations on ISCAS and ITC benchmarks show that the region-based Trojan detection via test points can <b>detect</b> <b>hardware</b> Trojans accurately with well controlled area overhead and test time. I...|$|R
40|$|Abstract. For {{the problem}} of Hardware Trojan detection, we {{analyzed}} the statistical properties of the power side-channel signal, and proposed a Hardware Trojan(HT) detection method based on the power side-channel signal. We processed the power side-channel signal by the maximum margin criterion(MMC), and projected the power side-channel signal onto low-dimensional subspace. We extract signal’s Characteristic vector sequence, and <b>detect</b> <b>Hardware</b> Trojan in IC chip through statistical processing and analysis. We did simulation experiments to verify by Monte Carlo, and <b>detect</b> <b>Hardware</b> Trojan in C 7552 circuit. Experimental results show that at ± 20 % of the process noise we can <b>detect</b> <b>Hardware</b> Trojan that accounts for 0. 028 percent of the circuit, and compared with the K-L transform, this method achieved a good experimental result...|$|R
50|$|Improved Pentium {{support with}} DigiSpeech Portable Sound {{parallel}} port sound card. QEMM 7.5 no longer loads itself to shadow RAM. Optimize now properly <b>detects</b> <b>hardware</b> on system with network card.|$|R
5000|$|Any {{hardware}} drivers {{that the}} boot process depends on must be loaded. A common arrangement is to pack kernel modules for common storage devices onto the initrd and then invoke a hotplug agent {{to pull in}} modules matching the computer's <b>detected</b> <b>hardware.</b>|$|R
50|$|The term is {{frequently}} used in mainframe-based wide area networks, where TP monitors manage {{the transfer of}} data between several clients making requests to a server. TP monitors will control and manage the data smoothly to available servers by <b>detecting</b> <b>hardware</b> failures and switching to another node.|$|R
5000|$|... '''''' is a Linux program {{originally}} {{written by}} Rusty Russell {{and used to}} add a loadable kernel module (LKM) to the Linux kernel or to remove a LKM from the kernel. It is commonly used indirectly: udev relies upon modprobe to load drivers for automatically <b>detected</b> <b>hardware.</b>|$|R
50|$|CPU-Z has {{an ability}} to {{directly}} <b>detect</b> <b>hardware</b> features, {{such as the ability}} to access, read, and display the SPD data from memory modules. The ability to document clock speed makes it a tool for motherboard overclockers, as a way of proving the CPU speeds achieved by various experiments.|$|R
40|$|Fault-tolerant-microcomputer concept {{based on}} {{enhancing}} "simple" computer with redundancy and self-checking logic circuits <b>detect</b> <b>hardware</b> faults. Interface and checking logic and redundant processors confer on 16 -bit microcomputer ability to check itself for hardware faults. Checking circuitry also checks itself. Concept of self-checking complementary pairs (SCCP's) employed throughout ICL unit...|$|R
40|$|Hardware Trojan {{detection}} and protection {{is becoming more}} crucial as more untrusted third parties manufacture many parts of critical systems nowadays. The most common way to <b>detect</b> <b>hardware</b> Trojans is comparing the untrusted design with a golden (trusted) one. However, third-party intellectual properties (IPs) are black boxes with no golden IPs to trust. So, previous attempts to <b>detect</b> <b>hardware</b> Trojans will not work with third-party IPs. In this work, we present novel methods for Trojan protection and detection on field programmable gate arrays (FPGAs) {{without the need for}} golden chips. Presented methods work at runtime instead of test time. We provide a wide spectrum of Trojan {{detection and}} protection methods. While the simplest methods have low overhead and provide limited protection mechanisms, more sophisticated and costly techniques are introduced that can <b>detect</b> <b>hardware</b> Trojans and even clean up the system from infected IPs. Moreover, we study the cost of using the FPGA partial reconfiguration feature to get rid of infected IPs. In addition, we discuss the possibility to construct IP core certificate authority that maintains a centralized database of unsafe vendors and IPs. We show the practicality of the introduced schemes by implementing the different methodologies on FPGAs. Results show that simple methods present negligible overheads and as we try to increase security the delay and power overheads increase...|$|R
2500|$|NTDETECT.COM, {{required}} for booting an NT-based OS, <b>detects</b> basic <b>hardware</b> information needed for successful boot ...|$|R
50|$|On 2006-07-09 version 3.0 was published. The {{packaging}} {{system was}} completely rewritten {{resulting in the}} PKG and Updateos2 tools, and the libupdateos and libsmarttools libraries. The functionality of the TGZex packages was widened, this time to include dependency tracking and descriptions in many languages. The installation process was simplified to allow a full install in 15 minutes. The system used udev, D-Bus and HAL to <b>detect</b> <b>hardware</b> and mount devices automatically.|$|R
40|$|Abstract. It is {{expected}} that commodity hardware is becoming less re-liable because of the continuously decreasing feature sizes of integrated circuits. Nevertheless, more and more commodity hardware with insuf-ficient error detection is used in critical applications. One possible solu-tion is to <b>detect</b> <b>hardware</b> errors in software using arithmetic AN-codes. These codes <b>detect</b> <b>hardware</b> errors independent of the actual failure modes of the underlying hardware. However, measurements have shown that AN-codes still exhibit large rates of undetected silent data corrup-tions (SDC). These high rates of undetected SDCs are caused by the insufficient protection of control and data flow through AN-codes. In contrast, ANB- and ANBD-codes promise much higher error detection rates because they also detect errors in control and data flow. We present our encoding compiler that automatically applies either an AN-, ANB-or ANBD-code to an application. Our error injections show that AN-, ANB-, and ANBD-codes successfully detect errors and more important that indeed ANB- and ANBD-codes reduce the SDC rate more effec-tively than AN-codes. The difference between ANBD- and ANB-codes is also visible but less pronounced. ...|$|R
5000|$|... {{fluorescent}} and DIG-labeled tracers {{for competitive}} immunoassays, i.e. to <b>limit</b> <b>detect</b> digoxin, a drug used to cure cardiac arrhythmia, down to 0.2 ng mL−1.|$|R
3000|$|... (Former) {{open burning}} is {{considered}} a major source for the contamination of free-range eggs above EU regulatory <b>limits</b> <b>detected</b> in the Netherlands [31] and Italy [241].|$|R
40|$|This paper {{describes}} {{the design of}} a watchdog coprocessor for <b>detecting</b> <b>hardware</b> and software errors. The watchdog executes assertions about the process running on the main computer. Both general purpose an special purpose (used to check systems such as digital signal processors, telephone switching systems, or digital flight controllers) watchdog designs are described. The improvement of error coverage by adding control flow checking facilities is discussed. The implementation of the watchdog as a software process is presented...|$|R
50|$|A machine-check {{exception}} (MCE) {{is a type}} {{of computer}} hardware error that occurs when a computer's central processing unit <b>detects</b> a <b>hardware</b> problem.|$|R
40|$|Abstract: For today’s {{coal mining}} enterprises, the mining {{production}} environment is very harsh and {{sometimes there are}} electric leakages in the automatic production equipment which cause {{a great impact on}} the stability of coal production. This paper proposes an electric leakage fault intelligent detection model. The intelligent method can fix the electric leakage faults on time which is an important prerequisite to ensure mine production stable and secure. The experimental results show that the model can effectively <b>detect</b> <b>hardware</b> failures and leakage...|$|R
40|$|Recent {{advances}} in steering algorithms {{have made it}} possible to accurately control electron beam position in storage rings, implement fast and slow feedback systems, and in some cases <b>detect</b> <b>hardware</b> errors. In practice, however, the program operator would like to reduce the overhead of selecting variables and constraints and to easily view the data. To simplify the process, we constructed an interactive orbit control program in MATLAB [1]. The program modules are easily adapted to new algorithms or beam lines. This paper describes the program functionality and architecture. ...|$|R
5000|$|Serial {{presence}} <b>detect</b> SPD memory <b>hardware</b> {{feature to}} auto-configure timings ...|$|R
50|$|In tamper {{resistant}} hardware, automatic zeroisation may be initiated when tampering is <b>detected.</b> Such <b>hardware</b> may be rated for cold zeroisation, {{the ability to}} zeroise itself without its normal power supply enabled.|$|R
50|$|During kernel boot, {{the console}} is {{commonly}} used to display the boot log of the kernel. The boot log includes information about <b>detected</b> <b>hardware,</b> and updates {{on the status of}} the boot procedure. At this point in time, the kernel is the only software running, and hence logging via user-space (e.g. syslog) is not possible, so the console provides a convenient place to output this information. Once the kernel has finished booting, it runs the init process (also sending output to the console), which handles booting {{of the rest of the}} system including starting any background daemons.|$|R
40|$|International audienceThis paper {{presents}} a fault tolerance architecture for data fusion mechanisms that tolerates hardware faults in the sensors and software faults {{in the data}} fusion. After introducing the basic concepts of fault tolerance and data fusion, we present first the generic architecture before detailing an implementation using Kalman filters for mobile robot localization. Finally fault injection is used on real data from this implementation to validate our architecture. Under a single fault hypothesis, we <b>detect</b> <b>hardware</b> and software faults and recover from hardware faults. With more redundancies, {{it would be possible}} to consider multiple faults and recover from software ones...|$|R
50|$|HP 40G (F1907A) was {{released}} in 2000 in parallel with the HP 39G. The HP 40G's operating system {{is identical to the}} HP 39G. Differences <b>detected</b> in <b>hardware</b> during start-up trigger the differences in software functionality.|$|R
50|$|Kudzu is a {{hardware}} probing program (written by Red Hat Linux) which {{relies on a}} library of hardware device information.When the computer boots, kudzu detects changes in the running system's hardware configuration, if any, and activates the newly <b>detected</b> <b>hardware</b> (or removal of hardware). kudzu only runs at boot time, and then exits. There is no performance penalty during normal operation. (Since Fedora release 9, kudzu is supplemented by HAL)kudzu detects and configures new and/or changed hardware on a system. When started, kudzu <b>detects</b> the current <b>hardware,</b> and checks it against a database stored in /etc/sysconfig/hwconf, if one exists. It then determines if any hardware has been added or removed from the system. If so, it gives the users the opportunity to configure any added hardware, and unconfigure any removed hardware. It then updates the database in /etc/sysconfig/hwconf.If no previous database exists, kudzu attempts to determine what devices have already been configured, by looking at /etc/modprobe.conf, /etc/sysconfig/network-scripts/, and /etc/X11/xorg.conf.|$|R
5000|$|... ntdetect.com is a {{component}} of Microsoft Windows NT-based operating systems that operate on the x86 architecture. It is used during the Windows NT startup process, and is responsible for <b>detecting</b> basic <b>hardware</b> that {{will be required to}} start the operating system.|$|R
40|$|Multi-core {{systems are}} {{becoming}} particularly common, {{due to the}} high performance they can deliver. Higher, their performance strongly depends {{on the availability of}} effective cache controllers, able to guarantee (among others) the coherence of the caches of the different cores. This paper proposes a method for the test of the cache coherence logic existing within each core in a multi-core system, resorting to a functional approach; this means that the method is based on the generation of a suitable test program, to be run in a coordinated manner on the cores composing the system. The method is able to <b>detect</b> <b>hardware</b> defects affecting this logic. We validated our method on a LEON 3 multicore system...|$|R
40|$|International audienceA Hardware Trojan is a {{malicious}} hardware {{modification of}} an integrated circuit. It could be inserted at different design steps but also during the process fabrication of the target. Due to the damages that can be caused, detection of these alterations {{has become a major}} concern. In this paper, we propose a new resilient method to <b>detect</b> <b>Hardware</b> Trojan based on path delay measurements. First, an accurate path delay model is defined. Then, path delay measurements are compared in a way that theoretically eliminate process and experimental variations effects. Finally, this proposed detection method is experimentally validated using different FPGA boards with substantial process variations. Both small sized sequential and combinatorial Hardware Trojans are implemented and successfully detected...|$|R
40|$|To {{increase}} the throughput of electronic manufacturing companies, design, prototyping, production, {{installation and maintenance}} processes of electronic devices are generally complemented {{by a number of}} performance and parametric tests, known as Failure Analysis (FA). In this paper, major FA proposals are considered. In particular, two non- invasive solutions are presented in detail: an advanced boundary scan, using an FPGA to speed up the tests, and a logic combinational test procedure, performed by means of a fault injectable emulation system. Moreover, an innovative CPU emulation approach is proposed, particularly suited to devices that include CPU chips. In order to <b>detect</b> <b>hardware</b> faulty, the approach provides for the emulation of the same boot code designed for DUT normal operation...|$|R
5000|$|... 100% DOS legacy {{compatible}} (allegedly; {{some games}} fail to <b>detect</b> the virtualized <b>hardware</b> and/or clash with Virtual-86 mode) ...|$|R
50|$|On 12 August 2005 {{the first}} Live edition of series II was published. It {{had a more}} {{distinctive}} graphical design, used the squashfs technology (2 GB of data packed on just one CD) and unionfs. It <b>detected</b> the <b>hardware</b> and configured the X Server automatically.|$|R
40|$|A GPS-SBAS Receiver is {{developed}} around a Digital Signal Processor with optimize usage of {{hardware and software}} in the system. The receiver is designed and engineered for use in avionics application after FAA TSO certification. Important aspects of the receiver are reliable hardware and safety features. The failure analysis of the receiver hardware for various navigation functionalities shows acceptable performance. The power-on self test and continuous online tests to <b>detect</b> <b>hardware</b> failure enhance the safety and reliability of the equipment. Additional <b>hardware</b> to <b>detect</b> failure improves the test coverage of the equipment. Comprehensive Receiver Autonomous Integrity Monitoring (RAIM) ensures reliable performance and safety of the system while in use in an aircraft {{anywhere in the world}} during the en-route, terminal and nonprecision approach phases of the flight...|$|R
5000|$|With the kernel in memory, boot-time device {{drivers are}} loaded (but not yet initialized). The {{required}} information (along {{with information on}} all <b>detected</b> <b>hardware</b> and Windows Services) is stored in the [...] portion of the registry, {{in a set of}} registry keys collectively called a Control Set. Multiple control sets (typically two) are kept, in the event that the settings contained in the currently-used one prohibit the system from booting. [...] contains control sets labeled , , etc., as well as [...] During regular operation, Windows uses [...] to read and write information. [...] is a reference to one of the control sets stored in the registry. Windows picks the [...] "real" [...] control set being used based on the values set in the [...] registry key: ...|$|R
50|$|Basic Functions: It {{automatically}} {{tries to}} <b>detect</b> audio <b>hardware</b> {{and lets the}} user choose subdevices for input and output from a drop-down list as well as common options for the sound server. QjackCtl then uses these selections to build and execute the right command-line for jackd.|$|R
5000|$|Supported standards. 100% DOS legacy game {{compatible}} (allegedly; {{some games}} fail to <b>detect</b> the virtualized <b>hardware</b> and/or clash with Virtual-86 mode): ...|$|R
40|$|Abstract—Malicious {{modification}} of hardware during design or fabrication {{has emerged as}} a major security concern. Such tampering (also referred to as Hardware Trojan) causes an integrated circuit (IC) to have altered functional behavior, potentially with disastrous consequences in safety-critical applications. Conventional design-time verification and post-manufacturing testing cannot be readily extended to <b>detect</b> <b>hardware</b> Trojans due to their stealthy nature, inordinately large number of possible instances and large variety in structure and operating mode. In this paper, we analyze the threat posed by hardware Trojans and the methods of deterring them. We present a Trojan taxonomy, models of Trojan operations and a review of the state-of-the-art Trojan prevention and detection techniques. Next, we discuss the major challenges associated with this security concern and future research needs to address them. Index Terms—Hardware Trojan; Design for Security; I...|$|R
