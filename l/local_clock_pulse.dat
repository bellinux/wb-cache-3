0|940|Public
40|$|A <b>clock</b> <b>pulse</b> {{generator}} for decoding pulse position modulation in {{an optical}} communication receiver is synchronized by a delay tracking loop which multiplies impulses of a data pulse by the square wave <b>clock</b> <b>pulses</b> from the generator to produce positive impulses when the <b>clock</b> <b>pulse</b> is of one level, and negative impulses when the <b>clock</b> <b>pulse</b> is of another level. A delay tracking loop integrates the impulses and produces an error signal that adjusts the delay so the <b>clock</b> <b>pulses</b> will be synchronized with data pulses. A dead-time tau sub d is provided between data pulses of an interval tau sub p {{in the data}} pulse period tau. When synchronized, {{the average number of}} positive impulses integrated will equal the average number of negative impulses over the continuous stream of data pulses...|$|R
40|$|Process for the {{transmission}} of busy/idle statuses in a communication system, in particular in a key-operated one-way or intercom loudspeaker system equipped with line selection. Controlled by a switching processor (1), data is loaded onto a data line (6) via the associated busy/idle status of all terminal devices as data packets at a first <b>clock</b> <b>pulse,</b> where each data packet contains a serial bit stream in which each bit represents the busy/idle status of precisely one terminal device and the bits are arranged in the data packet in a predefined constant sequence by a second <b>clock</b> <b>pulse</b> {{is much higher than}} that of the first <b>clock</b> <b>pulse.</b> The frequency of the second <b>clock</b> <b>pulse</b> and the number of <b>clock</b> <b>pulses</b> assigned to a data packet is equal to the number of terminal devices. The <b>clock</b> <b>pulses</b> are loaded onto a clock line (7). In order to report the busy/idle status to a terminal device (5. 1 - 5. n), the data is synchronized with a selected part of the <b>clock</b> <b>pulses</b> in order to select the bi ts in the data packet assigned to said terminal device. These bits are used to generate control signals which are routed parallel to the display units of the terminal devices...|$|R
50|$|Since start, {{stop and}} clock signal are asynchronous, {{there is a}} uniform {{probability}} distribution of the start and stop signal-times between two subsequent <b>clock</b> <b>pulses.</b> This detuning of the start and stop signal from the <b>clock</b> <b>pulses</b> is called quantization error.|$|R
5000|$|In this system, sync marks {{are made}} by {{inserting}} additional <b>clock</b> <b>pulses</b> between adjacent zero bits (following the MFM rule) where they would normally be omitted. In particular, the data bit pattern [...] "10001" [...] has a <b>clock</b> <b>pulse</b> inserted in the middle, where it would normally be omitted: ...|$|R
5000|$|Read the {{effective}} address: In {{case of a}} memory instruction (direct or indirect) the execution phase {{will be in the}} next <b>clock</b> <b>pulse.</b> If the instruction has an indirect address, {{the effective}} address is read from main memory, and any required data is fetched from main memory to be processed and then placed into data registers (Clock Pulse: T3). If the instruction is direct, nothing is done at this <b>clock</b> <b>pulses.</b> If this is an I/O instruction or a Register instruction, the operation is performed (executed) at <b>clock</b> <b>Pulse.</b>|$|R
50|$|In this {{protocol}} {{only two}} connections are {{used instead of}} the usual four pins for the general JTAG interface. The two connections are a bidirectional data output, and a clock. The clocking signal is split into a period of three <b>clock</b> <b>pulses,</b> for each <b>clock</b> <b>pulse</b> the TDI, TDO and TMS signals are passed on the micro controller via the bidirectional data output.|$|R
40|$|So far, we have mainly studied {{synchronous}} algorithms. Generally, asynchronous algorithms {{are more}} difficult to obtain. Also it is substantially harder to reason about asynchronous algorithms than about synchronous ones. For instance, computing a BFS tree (Chapter 3) efficiently requires much more work in an asynchronous system. However, many real systems are not synchronous, and we therefore have to design asynchronous algorithms. In this chapter, we will look at general simulation techniques, called synchronizers, that allow running synchronous algorithms in asynchronous environments. 10. 1 Basics A synchronizer generates sequences of <b>clock</b> <b>pulses</b> at each node of the network satisfying the condition given by the following definition. Definition 10. 1 (valid <b>clock</b> <b>pulse).</b> We call a <b>clock</b> <b>pulse</b> generated at a node v valid if it is generated after v received all the messages of the synchronous algorithm sent to v by its neighbors in the previous pulses. Given a mechanism that generates the <b>clock</b> <b>pulses,</b> a synchronous algorith...|$|R
5000|$|An {{infinitely}} repeating {{series of}} <b>clock</b> <b>pulses</b> which {{start on the}} left and move rightward.|$|R
5000|$|... with n {{the number}} of counter <b>clock</b> <b>pulses</b> and T0 {{the period of the}} coarse counter.|$|R
5000|$|... a ninth <b>clock</b> <b>pulse</b> is sent per byte {{transmitted}} {{marking the}} position of the unused acknowledgement bits.|$|R
40|$|So far, we have mainly studied {{synchronous}} algorithms. Generally, asynchro-nous algorithms {{are more}} difficult to obtain. Also it is substantially harder to reason about asynchronous algorithms than about synchronous ones. For in-stance, computing a BFS tree (Chapter 2) efficiently requires much more work in an asynchronous system. However, many real systems are not synchronous, and we therefore have to design asynchronous algorithms. In this chapter, we will look at general simulation techniques, called synchronizers, that allow running synchronous algorithms in asynchronous environments. 10. 1 Basics A synchronizer generates sequences of <b>clock</b> <b>pulses</b> at each node of the network satisfying the condition given by the following definition. Definition 10. 1 (valid <b>clock</b> <b>pulse).</b> We call a <b>clock</b> <b>pulse</b> generated at a node v valid if it is generated after v received all the messages of the synchronous algorithm sent to v by its neighbors in the previous pulses. Given a mechanism that generates the <b>clock</b> <b>pulses,</b> a synchronous algorithm is turned into an asynchronous algorithm in an obvious way: As soon as the ith <b>clock</b> <b>pulse</b> is generated at node v, v performs all the actions (local computations and sending of messages) of round i of the synchronous algorithm. Theorem 10. 2. If all generated <b>clock</b> <b>pulses</b> are valid according to Definition 10. 1, the above method provides an asynchronous algorithm that behaves exactly {{the same way as the}} given synchronous algorithm. Proof. When the ith pulse is generated at a node v, v has sent and received exactly the same messages and performed the same local computations as in the first i − 1 rounds of the synchronous algorithm. The main problem when generating the <b>clock</b> <b>pulses</b> at a node v is that v can-not know what messages its neighbors are sending to it in a given synchronous round. Because there are no bounds on link delays, v cannot simply wait “long enough ” before generating the next pulse. In order satisfy Definition 10. 1, nodes have to send additional messages for the purpose of synchronization. The tota...|$|R
30|$|After {{a signal}} “ 1 ” {{arrives at the}} bus aclr, all {{registers}} are cleared, and a circuit is converted into an initial state. After that, a signal of logical “ 1 ” {{is sent to the}} bus input ena 1 (it also gets to the BF storage input); a data byte is delivered to the input Datain; then a <b>clock</b> <b>pulse</b> passes. A value of the counter CN increases at the <b>clock</b> <b>pulse</b> edge, and the data is recorded in the buffer BF. The operation is repeated for 16384 <b>clock</b> <b>pulses</b> until the processing of the frame with the dimensionality of 128 by 128 DE is completed, and values of X and Y coordinates and of the maximal brightness W appear at the CCU output therewith.|$|R
5000|$|... #Caption: {{sketch of}} the coarse {{counting}} method in TDCs: showing measurements of T in various relations to the <b>clock</b> <b>pulses</b> ...|$|R
40|$|A method involving: distributing two {{clock signal}}s over a clock signal {{distribution}} system; {{in each of}} a plurality <b>local</b> <b>clocking</b> regions located along the signal distribution system, detecting the two clock signals and generating therefrom a <b>local</b> <b>clock</b> signal for that <b>local</b> <b>clocking</b> region, wherein the generated <b>local</b> <b>clock</b> signals {{for at least some}} of the plurality of <b>local</b> <b>clocking</b> regions are in a first group all of which are aligned in phase with each other and the generated <b>local</b> <b>clock</b> signals for the remainder of the plurality of <b>local</b> <b>clocking</b> regions are in a second group all of which are aligned in phase with each other, and wherein the phase of the first group is out of phase with the phase of the second group by a predetermined amount; and bringing all of the clock signals for the plurality of <b>local</b> <b>clocking</b> regions into phase alignment so that the phase of the first group is in phase with the phase of the second grou...|$|R
5000|$|Transponders {{operating}} in the ISM band at 27 MHz amplitude modulated for the <b>clock</b> <b>pulses</b> and impulse frequency of 50 kHz.|$|R
40|$|There are {{different}} ways to operate digital circuits to achieve good propagation of data. In recent days most of the digital circuits are failing to synchronize the clock with data waves. The <b>clock</b> <b>pulse</b> must be given in proper time period, almost equal to the data propagation speed or arrival time of the data to the next stage. In the present paper a new method is proposed to synchronize the speed between data and <b>clock</b> <b>pulse...</b>|$|R
40|$|SDH is a {{well known}} {{technology}} which {{is used for the}} data communication. It is used for high speed data transmission. The synchronization in this technology is with respect to the single <b>clock</b> <b>pulse.</b> So different signals of different data rate are multiplexed by the same <b>clock</b> <b>pulse.</b> This paper is a review paper regarding the problems in synchronisation of the different data rate signals in single clock, and master slave technique used to overcome these problem...|$|R
25|$|CPHA {{determines the}} timing of the data bits {{relative}} to the <b>clock</b> <b>pulses.</b> It is not trivial to convert between the two forms.|$|R
40|$|A {{conventional}} positive-edge-triggered flip-flop (FF) {{senses and}} {{responds to the}} control input or inputs {{at the time the}} clock input is changing from 0 to 1. It does not respond at all to changes in the opposite direction. Negative-edge-triggered FF's behave in a complementary manner. Thus, these FF's can respond at most once per <b>clock</b> <b>pulse</b> cycle. It is proposed that double-edge-triggered (DET) FF's, responding to both edges of the <b>clock</b> <b>pulse,</b> would have advantages with respect to speed and energy dissipation...|$|R
25|$|The Internal Clock Output {{rotary switch}} was eliminated. Instead, the Auto-Correct setting {{was also used}} to specify the INT CLOCK OUTPUT jack's <b>clock</b> <b>pulse</b> note value.|$|R
50|$|This mode {{is similar}} to mode 2. However, the {{duration}} of the high and low <b>clock</b> <b>pulses</b> of the output will be different from mode 2.|$|R
50|$|The Internal Clock Output {{rotary switch}} was eliminated. Instead, the Auto-Correct setting {{was also used}} to specify the INT CLOCK OUTPUT jack's <b>clock</b> <b>pulse</b> note value.|$|R
5000|$|But, {{if there}} are {{continuous}} <b>clock</b> <b>pulses</b> even after then (i.e. the next <b>clock</b> <b>pulses</b> comes in time tw (< tm [...] )) {{the value of the}} slave is not updated. This is because the monoflop is still unsteady and the value in the shift register still contains the same value as before. So with the next rising edge, i.e. after the n+1 rising edge, the transmission of the same data continues and the MSB of data transmitted earlier is re-transmitted at the end of tw.|$|R
40|$|WO 2005029734 A UPAB: 20050512 NOVELTY - The {{regenerator}} has {{an optical}} clock regeneration stage (2), which generates synchronized, stable optical reset <b>clock</b> <b>pulses</b> for a data signal (1). The semiconductor component is non-linear {{with reference to}} the transmission characteristics for the data signal (5, 9). A part of a degraded data signal is transmitted to the clock regeneration stage and the generated <b>clock</b> <b>pulse</b> is transmitted to the semiconductor component. The clock regeneration stage is configured {{in such a way that}} a timed optical reset to achieve transparency occurs. DETAILED DESCRIPTION - A time-slice control unit (3), is connected upstream of the semiconductor component and defines a sequence of data bits in the time gap between two respective <b>clock</b> <b>pulses.</b> The other part of the degraded data signal is transmitted to the semiconductor component at a power, at which the semiconductor component, relaxing from the condition of transparency, exhibits a non-linear transmission characteristic for the data signal. A blocking unit is connected downstream of the semiconductor component and removes the reset <b>clock</b> <b>pulses</b> from the data signal path. USE - For optical signals ADVANTAGE - Degraded optical signals with high data rate are transmitted and regenerated without optoelectronic or wavelength conversion using compact, non-linear semiconductor components with low power consumption...|$|R
30|$|After that, an {{asynchronous}} reset {{should be}} performed, {{and the system}} is ready to process a new image. Therefore, the image processing time is 32770 <b>clock</b> <b>pulses.</b>|$|R
5000|$|Amplitude {{modulation}} - modulating {{a signal}} [...] {{by changing the}} amplitude of a carrier wave, as in:is self-clocking, as the zero crossings serve as a <b>clock</b> <b>pulse.</b>|$|R
500|$|The Dickson charge pump, or Dickson multiplier, {{consists}} of a cascade of diode/capacitor cells with the bottom plate of each capacitor driven by a <b>clock</b> <b>pulse</b> train. [...] The circuit is a modification of the Cockcroft-Walton multiplier but takes a DC input with the clock trains providing the switching signal instead of the AC input. [...] The Dickson multiplier normally requires that alternate cells are driven from <b>clock</b> <b>pulses</b> of opposite phase. [...] However, since a voltage doubler, shown in figure 7, requires only one stage of multiplication only one clock signal is required.Yuan, pp.13-14 ...|$|R
50|$|After each <b>clock</b> <b>pulse,</b> {{the signal}} lines inside the CPU {{need time to}} settle to their new state. That is, every signal line must finish {{transitioning}} from 0 to 1, or from 1 to 0. If the next <b>clock</b> <b>pulse</b> comes before that, {{the results will be}} incorrect. In the process of transitioning, some energy is wasted as heat (mostly inside the driving transistors). When executing complicated instructions that cause many transitions, the higher the clock rate the more heat produced. Transistors may be damaged by excessive heat.|$|R
40|$|In this paper, {{we report}} a novel ultrafast all-optical self clock {{extraction}} module (CEM) {{based on two}} inline symmetric Mach-Zehnder switches. In the proposed CEM, incoming data packet is used as the control signal to set/reset the imbalance/balance states of the SMZs for extracting the <b>clock</b> <b>pulse,</b> CEM offers fast clock extraction response and high on/off contrast ratio between extracted <b>clock</b> <b>pulse</b> and residual signals. Simulation results show that contrast ratio of more than 20 dB at low input energy (1 fJ) and small required processing time in 100 Gb/s transmission are achievable...|$|R
40|$|The {{conventional}} {{pipeline system}} is facing seviour problems due to improper synchronization of <b>clock</b> <b>pulses.</b> The data transfer rates most importantly {{depend on the}} effective clock management. In most of the digital systems the propagation of information mainly controlled {{on the basis of}} <b>clock</b> <b>pulses.</b> This is a universal problem in all the digital systems mostly called jitter or skew. In most of the digital systems the clock skew decreases the performance of the digital systems. Here a new system is implemented {{in the path of the}} clock to remove or reduce the clock skew...|$|R
5000|$|The Dickson charge pump, or Dickson multiplier, {{consists}} of a cascade of diode/capacitor cells with the bottom plate of each capacitor driven by a <b>clock</b> <b>pulse</b> train. [...] The circuit is a modification of the Cockcroft-Walton multiplier but takes a DC input with the clock trains providing the switching signal instead of the AC input. The Dickson multiplier normally requires that alternate cells are driven from <b>clock</b> <b>pulses</b> of opposite phase. However, since a voltage doubler, shown in figure 7, requires only one stage of multiplication only one clock signal is required.|$|R
40|$|WO 200284900 A UPAB: 20030113 NOVELTY - A {{continuously}} operated laser (COL) (5) generates/adjusts an output wavelength {{alongside a}} device (1) for generating <b>clock</b> <b>pulses</b> (DGCP) and a discriminator (2). The COL {{links to the}} discriminator and radiates its light into it with a required wavelength. Between the DGCP and the discriminator there is an optical delay line (3) for delaying each pulse for a data signal (DS) by a half bit and for placing it in a time gap between each of two <b>pulses</b> in a <b>clock</b> <b>pulse</b> signal (TS). USE - For transparent optical networks, wavelength division multiplexing, etc. ADVANTAGE - Pulses for data and clock signals and the continuous laser signal have different wavelengths/polarizations/beam direction to avoid interference. Also, a device fits {{in front of the}} discriminator for adjusting the power of the data <b>pulses</b> and <b>clock</b> <b>pulses</b> so that the effect on the non-linear discriminator is almost equal and the discriminator can be switched over safely...|$|R
40|$|Based on a {{worst case}} analysis, {{clocking}} schemes for high-performance systems are analyzed. These are 1 - and 2 -phase systems using simple clocked latches, and 1 -phase systems using edge-triggered D-flip-flops. Within these categories (any {{of which may}} be preferable in a given situation), it is shown how optimal tradeoffs can be made by appropriately choosing the parameters of the clocking system {{as a function of the}} technology parameters. The tradeoffs involve the clock period (which determines the data rate), and the tolerances that must be enforced on the propagation delays through the logic. Clock-pulse edge tolerances are shown to be an important factor. It is seen that, for systems using latches, their detrimental effects on the clock period can be converted to tighter bounds on the short-path delays by allowing D changes to lag behind the leading edges of the <b>clock</b> <b>pulses</b> and by using wider <b>clock</b> <b>pulses</b> or, in the case of 2 -phase systems, by overlapping the <b>clock</b> <b>pulses.</b> link_to_subscribed_fulltex...|$|R
5000|$|Interpolators {{are often}} used with a stable system clock. The start event is asynchronous, but the stop event is a {{following}} clock. [...] For convenience, imagine that the fast ramp rises exactly 1 volt during a 100 ns clock period. Assume the start event occurs at 67.3 ns after a clock pulse; the fast ramp integrator is triggered and starts rising. The asynchronous start event is also routed through a synchronizer that takes at least two <b>clock</b> <b>pulses.</b> By the next <b>clock</b> <b>pulse,</b> the ramp has risen to [...]327 V. By the second <b>clock</b> <b>pulse,</b> the ramp has risen to 1.327 V and the synchronizer reports the start event has been seen. The fast ramp is stopped and the slow ramp starts. The synchronizer output {{can be used to}} capture system time from a counter. After 1327 clocks, the slow ramp returns to its starting point, and interpolator knows that the event occurred 132.7 ns before the synchronizer reported.|$|R
5000|$|Nearly all {{sequential}} logic today is clocked or synchronous logic. In a synchronous circuit, an electronic oscillator called a clock (or clock generator) generates {{a sequence of}} repetitive <b>pulses</b> called the <b>clock</b> signal which is distributed to all the memory elements in the circuit. The basic memory element in {{sequential logic}} is the flip-flop. The output of each flip-flop only changes when triggered by the <b>clock</b> <b>pulse,</b> so changes to the logic signals throughout the circuit all begin at the same time, at regular intervals, synchronized by the clock. [...] The output of all the storage elements (flip-flops) in the circuit at any given time, the binary data they contain, is called {{the state of the}} circuit. The state of a synchronous circuit only changes on <b>clock</b> <b>pulses.</b> At each cycle, the next state is determined by the current state and the value of the input signals when the <b>clock</b> <b>pulse</b> occurs.|$|R
40|$|So far, we have mainly studied {{synchronous}} algorithms. Generally, asynchronous algorithms {{are more}} difficult to obtain. Also it is substantially harder to reason about asynchronous algorithms than about synchronous ones. For instance, computingaBFStree(Chapter 3) efficientlyrequiresmuchmoreworkin an asynchronous system. However, many real systems are not synchronous, and we therefore have to design asynchronous algorithms. In this chapter, we will look at general simulation techniques, called synchronizers, that allow running synchronous algorithms in asynchronous environments. 12. 1 Basics A synchronizer generates sequences of <b>clock</b> <b>pulses</b> at each node of the network satisfying the condition given by the following definition. Definition 12. 1 (valid <b>clock</b> <b>pulse).</b> We call a <b>clock</b> <b>pulse</b> generated at a node v valid if it is generated after v received all the messages of the synchronous algorithm sent to v by its neighbors in the previous pulses. Given a mechanism that generates the <b>clock</b> <b>pulses,</b> a synchronous algorithm is turned into an asynchronous algorithm in an obvious way: As soon as the ith clockpulseisgeneratedatnodev, v performsalltheactions(localcomputations and sending of messages) of round i of the synchronous algorithm. Theorem 12. 2. If all generated <b>clock</b> <b>pulses</b> are valid according to Definition 12. 1, the above method provides an asynchronous algorithm that behaves exactly {{the same way as the}} given synchronous algorithm. Proof. When the ith pulse is generated at a node v, v has sent and received exactly the same messages and performed the same local computations as in the first i− 1 rounds of the synchronous algorithm. Themainproblemwhengeneratingtheclockpulsesatanodev isthatv cannot know what messages its neighbors are sending to it in a given synchronous round. Because there are no bounds on link delays, v cannot simply wait “long enough ” before generating the next pulse. In order satisfy Definition 12. 1, nodes have to send additional messages for the purpose of synchronization. The tota...|$|R
