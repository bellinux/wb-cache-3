2|10000|Public
40|$|Electromagnetic {{interference}} effects caused by electric power lines on neighboring metallic utilities such as water, gas or oil pipelines {{became a major}} concern due to {{significant increase in the}} load and short circuit current levels needed to satisfy the load requirements. Another reason for increased interference levels originates from the environmental concerns, which impose on various utilities the obligation to share common corridors. This paper presents three different scenarios of a pipeline in which all types of electromagnetic interferences (coupling) will be investigated and their effects on the pipeline will be predicted. The level of the calculated voltage, owing to each type of coupling, depends on different factors (voltage level, <b>length</b> <b>of</b> <b>parallelism,</b> separation distance, soil resistivity, load current magnitude and pipeline coating). The effects of these factors are discussed; some factors such as the fault current level, separation distance and soil resistivities are found to exhibit a large influence on the pipeline voltage. To the best of the authors’ knowledge, the comprehensive analyses presented in this paper considering all types of interferences have not yet been published elsewhere...|$|E
40|$|AC {{interference}} from high voltage power lines can impair the proper operation of signaling and protection systems of a railway during both normal operation and fault conditions, if {{the level of}} the current is too high {{and if there is a}} rail unbalance condition. A simplified analysis can lead to either significant unnecessary expense due to overdesign or to damage due to insufficient mitigation measures. This paper describes the mechanisms of electromagnetic interference between power lines and neighboring railroad tracks and presents a simple parametric analysis of a railroad subjected to AC {{interference from}} nearby high voltage power lines. Under steady-state conditions, the effects of some critical parameters are discussed. These parameters include: <b>length</b> <b>of</b> <b>parallelism,</b> distance between the power line and the railroad tracks, load current magnitude, soil resistivity and ballast resistivity, as well as the presence of shield wires and the existence of a track unbalance condition. For a single-phase-to-ground fault, three representative soil structure types are used to illustrate the ground potential rise transfer mechanism to the rail located near the energized structure. This paper provides useful information for estimating AC interference levels between power lines and nearby railroads before a detailed study is performed. Furthermore, this paper reveals some intriguing new (or unpublished) results related to inductive interference caused by three-phase power line operating under normal (steady-state) unbalanced load conditions...|$|E
50|$|A {{triangle}} {{where one}} vertex {{is an ideal}} point, one angle is right: the third angle is the angle <b>of</b> <b>parallelism</b> for the <b>length</b> <b>of</b> the side between {{the right and the}} third angle.|$|R
40|$|Abstract. In {{this paper}} we present Tyche, a {{nonlinear}} pseudorandom number generator designed for computer simulation. Tyche {{has a small}} 128 -bit state and an expected period <b>length</b> <b>of</b> 2127. Unlike most non-linear generators, Tyche is consistently fast across architectures, due to its very simple iteration function derived from ChaCha, one of today’s fastest stream ciphers. Tyche is especially amenable for the highly parallel environments we find today, in particular for Graphics Processing Units (GPUs), where it enables {{a very large number}} of uncorrelated parallel streams running in-dependently. For example, 216 parallel independent streams are expected to generate about 296 pseudorandom numbers each, without overlaps. Additionally, we determine bounds for the period <b>length</b> and <b>parallelism</b> <b>of</b> our generators, and evaluate their statistical quality and performance. We compare Tyche and the variant Tyche-i to the XORWOW and TEA 8 generators in CPUs and GPUs. Our comparisons show that Tyche and Tyche-i simultaneously achieve high performance and excellent statistical properties, particularly when compared to other nonlinear generators...|$|R
25|$|Euler {{discussed}} a generalization of Euclidean geometry called affine geometry, which retains the fifth postulate unmodified while weakening postulates {{three and four}} {{in a way that}} eliminates the notions of angle (whence right triangles become meaningless) and <b>of</b> equality <b>of</b> <b>length</b> <b>of</b> line segments in general (whence circles become meaningless) while retaining the notions <b>of</b> <b>parallelism</b> as an equivalence relation between lines, and equality <b>of</b> <b>length</b> <b>of</b> parallel line segments (so line segments continue to have a midpoint).|$|R
5000|$|The below table {{shows the}} {{relationship}} between levels <b>of</b> <b>parallelism,</b> grain size and degree <b>of</b> <b>parallelism</b> ...|$|R
40|$|This paper {{presents}} {{the phenomenon of}} directed nuclear radiation based on the analysis of Lobachevsky angle <b>of</b> <b>parallelism.</b> In spite <b>of</b> the wide application of Lobachevsky geometry in relativistic physics [1 - 3], one of its basic concepts, the angle <b>of</b> <b>parallelism,</b> has not received due interpretation. The angle <b>of</b> <b>parallelism</b> characterizes the closeness of a produced particle to the absolute in the Lobachevsky geometry. For an arbitrary distance ρ the corresponding angle <b>of</b> <b>parallelism</b> is determined a...|$|R
5000|$|The {{symmetry}} <b>of</b> <b>parallelism</b> {{cannot be}} proven in ordered geometry. Therefore, the [...] "ordered" [...] concept <b>of</b> <b>parallelism</b> does not form an equivalence relation on lines.|$|R
40|$|This paper {{presents}} efficient dataflow {{schemes for}} parallel string matching. Two subproblems {{known as the}} exact matching and the k-mismatches problems are covered. Three parallel algorithms based on multiple input (and output) streams are presented. Time complexities of these parallel algorithms are O((n/d) +α), 0 ≤ α ≤ m, where n and m represent <b>lengths</b> <b>of</b> reference and pattern strings (n>> m) and d represents the number of streams used (the degree <b>of</b> <b>parallelism).</b> We can control the degree <b>of</b> <b>parallelism</b> by using variable number (d) of input (and output) streams. These performances are better than {{those found in the}} literature. These algorithms present three different methods to design special purpose systolic array hardware for string matching. With linear systolic array architecture, m PEs are needed for serial design and d*m PEs are needed for parallel design. I...|$|R
5000|$|Synchronisation <b>of</b> <b>parallelism</b> <b>of</b> the {{printing}} to the lenticules: ...|$|R
40|$|Thesis (MA) [...] PU for CHE, 1999 This mini-dissertation {{analyses}} {{the phenomenon}} <b>of</b> <b>parallelism</b> in the epic "Dikgang tse pedi" with specific reference to "Kgang ke oe Bakwena". The {{first part of}} the dissertation deals with theoretical issues and attempts to arrive at a working definition <b>of</b> <b>parallelism,</b> based on the viewpoints of different researchers. The central theoretical focus of this study will be based on Kunene's (1971) and Pretorius's (1988) viewpoints regarding the differentiation between different types <b>of</b> <b>parallelism.</b> Other devices that contribute to the creation <b>of</b> <b>parallelism</b> are also briefly dealt with in order to identify their interrelation with <b>parallelism.</b> Various types <b>of</b> <b>parallelism</b> and relevant examples of different authors are discussed. The second part of the dissertation consists of an analysis of the poem "Kgang ke eo Bakwena" using Kunene's and Pretorius' tenets regarding parallelism as the theoretical matrix. The conclusion of this study indicates that the viewpoints of Pretorius and Kunene can be successfully applied in the analysis <b>of</b> <b>parallelism</b> in poetry. Master...|$|R
30|$|This level <b>of</b> <b>parallelism</b> {{can reach}} a {{reasonable}} parallelism degree and preserve memory area. Due to its {{great potential for}} scalability and mastered area overhead, new explorations are focused on this second level <b>of</b> <b>parallelism.</b>|$|R
2500|$|Lack <b>of</b> <b>parallelism</b> <b>of</b> beds on the {{opposite}} sides of the contact:Angular unconformity ...|$|R
40|$|In this paper, {{we report}} {{results of a}} new study <b>of</b> instruction-level <b>parallelism</b> and the smoothability <b>of</b> this <b>parallelism.</b> In {{addition}} to showing a strikingly high limit <b>of</b> <b>parallelism</b> for an oracle machine model, we also study the following new aspects <b>of</b> <b>parallelism</b> and smoothability. Parallelism Limits: In addition to confirming some results recently reported (i. e. by Wilson and Lam [LW 92]), our work also provides answers to the following important questions for architects and compiler writters which were left open...|$|R
2500|$|In {{hyperbolic}} geometry, {{the angle}} <b>of</b> <b>parallelism</b> [...] , is the angle at one vertex {{of a right}} hyperbolic triangle that has two asymptotic parallel sides. The angle depends on the segment length a between the right angle and the vertex of the angle <b>of</b> <b>parallelism.</b>|$|R
50|$|The maximum degree <b>of</b> <b>parallelism</b> {{depends on}} the {{structure}} of the Arithmetic and Logic Unit. Higher degree <b>of</b> <b>parallelism</b> indicates a highly parallel ALU or processing element. Average parallelism depends on both the hardware and the software. Higher average parallelism can be achieved through concurrent programs.|$|R
40|$|This report {{examines}} the basic {{issues involved in}} implementing parallel execution in a distributed computational environment. The study {{was carried out by}} considering our claim that both a compiler should be directly involved in detecting processes of a program to run in parallel on a distributed system, and that a distributing operating system, in particular global scheduling should provide a support for such parallel execution. For this purpose, first of all the issues <b>of</b> <b>parallelism</b> <b>of</b> a program's processes has been examined. Issues such as the granularity <b>of</b> <b>parallelism,</b> use <b>of</b> <b>parallelism,</b> the generality <b>of</b> <b>parallelism</b> and the programmer's actions when writing parallel programs have been addressed. Possible future developments are then presented. Following this a support for parallel execution in distributed systems has also been discussed. In particular the issues of interprocess communication, process synchronisation, memory management, process management including global schedu [...] ...|$|R
40|$|A {{parallel}} {{graph reduction}} machine simulator is described. This performs combinator reduction and can simulate various different parallel reduction strategies. A number of functional programs are examined, and experimental results presented comparing the amount <b>of</b> <b>parallelism</b> obtainable using explicit divide-and-conquer with {{the maximum amount}} <b>of</b> <b>parallelism</b> available in the programs...|$|R
40|$|This paper {{discusses}} {{two aspects}} <b>of</b> <b>parallelism</b> in logic programming: parallelism as a formalism (often {{referred to as}} concurrency) and the implications <b>of</b> <b>parallelism</b> with regard to performance. Two alternatives for a parallel logic programming system are considered in detail. One allows programmers to describe processes and communications using concurrent logic languages, and the other attempts to exploit the <b>parallelism</b> <b>of</b> ordinary logic programs...|$|R
40|$|Although {{much has}} been said about {{parallelism}} in discourse, a formal, computational theory <b>of</b> <b>parallelism</b> structure is still outstanding. In this paper, we present a theory which given two parallel utterances predicts which are the parallel elements. The theory consists of a sorted, higher-order abductive calculus and we show that it reconciles the insights of discourse theories <b>of</b> <b>parallelism</b> with those <b>of</b> Higher-Order Unification approaches to discourse semantics, thereby providing a natural framework in which to capture the effect <b>of</b> <b>parallelism</b> on discourse semantics. 1 Introduction Both Higher-Order Unification (HOU) approaches to discourse semantics [Dalrymple et al., 1991; Shieber et al., 1996; Gardent et al., 1996; Gardent and Kohlhase, 1996] and discourse theories <b>of</b> <b>parallelism</b> [Hobbs, 1990; Kehler, 1995] assume parallelism structuration: given a pair of parallel utterances, the parallel elements are taken as given. This assumption clearly undermines the predictive powe [...] ...|$|R
5000|$|The angle <b>of</b> <b>parallelism</b> {{function}} in hyperbolic geometry {{is defined by}} ...|$|R
40|$|AbstractA new {{construction}} <b>of</b> <b>parallelisms,</b> determined by Johnson, is valid {{for both the}} finite and infinite cases and gives a variety <b>of</b> partial <b>parallelisms</b> <b>of</b> deficiency one that admit a transitive group. Since there are extensions to parallelisms, one obtains parallelisms admitting a collineation group fixing one spread and transitive on the remaining spreads. The construction permits a counting of the isomorphism classes <b>of</b> the <b>parallelisms.</b> In this article, we enumerate the isomorphism classes <b>of</b> the <b>parallelisms</b> and show that {{there are at least}} 1 + [(q− 3) / 2 r] mutually non-isomorphic parallelisms in PG(3,q = pr), for p odd. Furthermore, we provide a group-theoretic characterization <b>of</b> the constructed <b>parallelisms...</b>|$|R
40|$|Interface {{automaton}} is a {{model of}} software component behaviour based on finite state machines. It describes component's provided interface, the supported usage, and required interface, the usage of other components. A considerable number of components can be used in parallel with no bound on the level <b>of</b> <b>parallelism.</b> It is not necessary for the model to attempt to capture such unboundedness. An alternative approach is to allow an increment of the level <b>of</b> <b>parallelism</b> on- demand. This thesis analyses on a theoretical level and proposes a final form of an operation to perform such replication to allow creation of models of an arbitrary level <b>of</b> <b>parallelism</b> <b>of</b> certain parts of its behaviour...|$|R
40|$|This report {{describes}} {{the current state}} of research as well as the implementation of the approaches <b>of</b> <b>parallelism</b> in MuPAD 1. 4. It introduces the programming paradigm <b>of</b> macro <b>parallelism</b> (based on the concepts of message passing, network variables and work groups), demonstrates first parallel algorithms including benchmarks and gives technical details on the implementation <b>of</b> macro <b>parallelism</b> based on the concept of Dynamic Modules. 1 This work is supported by the DFG Sonderforschungsbereich 376 : Massive Parallelitat: Algorithmen, Entwurfsmethoden, Anwendungen. Contents 1 Introduction to Parallelism in MuPAD 3 1. 1 The Concept <b>of</b> Micro <b>Parallelism............................</b> 3 1. 2 Problems <b>of</b> Micro <b>Parallelism..............................</b> 3 1. 3 The Concept <b>of</b> Macro <b>Parallelism...........................</b> 4 1. 4 Why We Switched from Micro to Macro Parallelism................. 5 2 [...] ...|$|R
50|$|All {{three types}} <b>of</b> <b>parallelism</b> usually operate {{combined}} {{in a single}} job.|$|R
50|$|Antithetic {{parallelism}} {{is a form}} <b>of</b> <b>parallelism</b> {{where the}} meaning {{of two or more}} excerpts of text are obversed, although directly linked by providing the same meaning from differing perspectives. This type <b>of</b> <b>parallelism</b> is used in order to create repetition of meaning as a technique for cognitive reinforcement, thus more effectively communicating the meaning of the text.|$|R
40|$|This paper {{presents}} some {{techniques for}} efficient thread forking and joining in parallel execution environments, {{taking into consideration}} the physical structure of NUMA machines and the support for multi-level parallelization and processor grouping. Two work generation schemes and one join mechanism are designed, implemented, evaluated and compared with the ones used in the IRIX MP library, an efficient implementation which supports a single level <b>of</b> <b>parallelism.</b> Supporting multiple levels <b>of</b> <b>parallelism</b> is a current research goal, both in shared and distributed memory machines. Our proposals include a first work generation scheme (GWD, or global work descriptor) which supports multiple levels <b>of</b> <b>parallelism,</b> but not processor grouping. The second work generation scheme (LWD, or local work descriptor) {{has been designed to}} support multiple levels <b>of</b> <b>parallelism</b> and processor grouping. Processor grouping is needed to distribute processors among different parts of the computation and ma [...] ...|$|R
2500|$|... ¢ the Magnum {{needs more}} barrels {{to take full}} {{advantage}} <b>of</b> <b>parallelism</b> ¢ ...|$|R
5000|$|Lyra2p (that take {{advantage}} <b>of</b> <b>parallelism</b> capabilities potentially {{available on the}} legitimate user's platform) ...|$|R
25|$|The in-core {{ceilings}} are roofline-like curve {{beneath the}} actual roofline {{that may be}} present {{due to the lack}} of some form <b>of</b> <b>parallelism.</b> These ceilings effectively limit how high performance can reach. Performance cannot exceed an in-core ceiling until the underlying lack <b>of</b> <b>parallelism</b> is expressed and exploited. The ceilings can be also derived from architectural optimization manuals other than benchmarks.|$|R
30|$|Both {{of these}} {{computing}} architectures reduce computation time by exploiting the parallelism {{inherent in the}} application. They rely {{on the fact that}} multiple parts of the overall problem can be computed relatively independently of each other. Though HPC and RC act on different levels <b>of</b> <b>parallelism,</b> in general, applications with a high degree <b>of</b> <b>parallelism</b> are well-suited to these architectures.|$|R
40|$|This paper {{deals with}} {{parallelism}} evolution compared to sequential processor evolution following Moore's law, and is inspired from our 12 years <b>of</b> <b>parallelism</b> experiment on various architecture and with di#erent programming paradigms. We introduce speed up of parallel runs as temporal advance on sequential technology, and we point out real next challenges <b>of</b> <b>parallelism</b> to perpetuate its lead on sequential computing...|$|R
50|$|The in-core {{ceilings}} are roofline-like curve {{beneath the}} actual roofline {{that may be}} present {{due to the lack}} of some form <b>of</b> <b>parallelism.</b> These ceilings effectively limit how high performance can reach. Performance cannot exceed an in-core ceiling until the underlying lack <b>of</b> <b>parallelism</b> is expressed and exploited. The ceilings can be also derived from architectural optimization manuals other than benchmarks.|$|R
40|$|A {{business}} {{process is a}} set of structured, related activities that aims at fulfilling a specific organizational goal for a customer or market. An important metric when develop-ing a {{business process}} is its degree <b>of</b> <b>parallelism,</b> i. e., the maximum number of tasks that are executable in parallel in that process. The degree <b>of</b> <b>parallelism</b> determines the peak demand on tasks, providing a valuable guide for the problem of resource allocation in business processes. In this paper, we investigate how to automatically measure the de-gree <b>of</b> <b>parallelism</b> for business processes, described using the BPMN standard notation. We first present a formal model for BPMN processes in terms of Labelled Transition Systems, which are obtained through process algebra encod-ings. We then propose an approach for automatically com-puting the degree <b>of</b> <b>parallelism</b> by using model checking techniques and dichotomic search. We implemented a tool for automating this check and we applied it successfully to more than one hundred BPMN processes...|$|R
40|$|Aberration and {{radiation}} pressure reflected by a moving mirror {{are examples of}} the Klein, one-way Doppler shift, and Poincare', two-way Doppler shift, disc models of hyperbolic geometry, respectively. Aberration, like the Thomas precession, {{is related to the}} angular defect, and is a kinematical eect rather than relativistic. At the angle <b>of</b> <b>parallelism,</b> determined by a stationary observer looking at a moving object in the direction normal to its motion, the rotation of the object is related to its Lorentz contraction that an observer sees traveling at the same speed as the object. The origin of the Lorentz contraction is the angular defect, while the angle <b>of</b> <b>parallelism</b> is an asymptotic limit, providing the unique link between circular and hyperbolic functions. The relative velocity provides an upper limit on the angle of incidence with the radiation pressure vanishing at the angle <b>of</b> <b>parallelism.</b> Two-way, second-order Doppler shifts can be used to establish experimentally the existence of an angle <b>of</b> <b>parallelism...</b>|$|R
40|$|International audienceA {{business}} {{process is a}} set of structured, related activities that aims at fulfilling a specific organizational goal for a customer or market. An important metric when developing a {{business process}} is its degree <b>of</b> <b>parallelism,</b> i. e., the maximum number of tasks that are executable in parallel in that process. The degree <b>of</b> <b>parallelism</b> determines the peak demand on tasks, providing a valuable guide for the problem of resource allocation in business processes. In this paper, we investigate how to automatically measure the degree <b>of</b> <b>parallelism</b> for business processes, described using the BPMN standard notation. We first present a formal model for BPMN processes in terms of Labelled Transition Systems, which are obtained through process algebra encodings. We then propose an approach for automatically computing the degree <b>of</b> <b>parallelism</b> by using model checking techniques and dichotomic search. We implemented a tool for automating this check and we applied it successfully to more than one hundred BPMN processes...|$|R
