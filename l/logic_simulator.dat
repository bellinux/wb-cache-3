83|65|Public
50|$|System-level testing may be {{performed}} with ISIM or the ModelSim <b>logic</b> <b>simulator,</b> and such test programs {{must also be}} written in HDL languages. Test bench programs may include simulated input signal waveforms, or monitors which observe and verify the outputs of the device under test.|$|E
50|$|Mixed-mode {{simulation}} {{is handled}} on three levels; (a) with primitive digital elements that use timing models and the built-in 12 or 16 state digital <b>logic</b> <b>simulator,</b> (b) with subcircuit models {{that use the}} actual transistor topology of the integrated circuit, and finally, (c) with In-line Boolean logic expressions.|$|E
50|$|Mixed-mode {{simulation}} {{is handled}} on three levels; (a) with primitive digital elements that use timing models and the built-in 12 or 16 state digital <b>logic</b> <b>simulator,</b> (b) with subcircuit models {{that use the}} actual transistor topology of the integrated circuit, and finally, (c) with In-line Boolean logic expressions. An example of a mixed-mode simulator is shown in Figure 2.|$|E
50|$|Digital <b>logic</b> <b>simulators</b> {{often include}} a Tcl {{scripting}} interface for simulating Verilog, VHDL and SystemVerilog hardware languages.|$|R
5000|$|High end {{hardware}} emulators {{provide a}} debugging environment with many features {{that can be}} found in <b>logic</b> <b>simulators,</b> and in some cases even surpass their debugging capabilities: ...|$|R
40|$|Accurate {{estimation}} of switching activity {{is very important}} in digital circuits. In this paper we present a comparison between the evaluation of the switching activity calculated using logic (Verilog) and electrical (HSPICE) simulators. We also study how the variation on the delay model (min, typ, max) and parasitic effects affect the number of transitions in the circuit. Results show a variable and significant over{{estimation of}} this measurement using <b>logic</b> <b>simulators</b> even when including postlayout effects. Furthermore, we show the contribution of glitches to the overall switching activity, giving that the treatment of glitches in conventional <b>logic</b> <b>simulators</b> is the main cause of switching activity overestimation. Ministerio de Ciencia y Tecnología TIC 2000 - 1350 Ministerio de Ciencia y Tecnología TIC 2002 - 228...|$|R
5000|$|Unlike ISE which {{relied on}} ModelSim for simulation, the Vivado System Edition {{includes}} an in-built <b>logic</b> <b>simulator.</b> Vivado also introduces high-level synthesis, with a toolchain that converts C code into programmable logic. Vivado {{has been described}} as a [...] "state-of-the-art comprehensive EDA tool with all the latest bells and whistles in terms of data model, integration, algorithms, and performance".|$|E
50|$|Mixed-mode {{simulation}} {{is handled}} on three levels by CircuitLogix: (a) with primitive digital elements that use timing models and a built-in 12-state digital <b>logic</b> <b>simulator,</b> (b) with subcircuit models {{that use the}} actual transistor topology of the integrated circuit, and finally, (c) with In-line Boolean logic expressions. These two modeling techniques use SPICE {{to solve a problem}} while the third method, digital primitives, uses mixed-mode capability.|$|E
50|$|Xilinx ISE is {{a design}} {{environment}} for FPGA products from Xilinx, and is tightly-coupled to {{the architecture of}} such chips, and cannot be used with FPGA products from other vendors. The Xilinx ISE is primarily used for circuit synthesis and design, while ISIM or the ModelSim <b>logic</b> <b>simulator</b> is used for system-level testing. Other components shipped with the Xilinx ISE include the Embedded Development Kit (EDK), a Software Development Kit (SDK) and ChipScope Pro.|$|E
50|$|The idea {{of being}} able to {{simulate}} the ASICs from the information in this documentation was so obviously attractive that <b>logic</b> <b>simulators</b> were developed that could read the VHDL files. The next step was the development of logic synthesis tools that read the VHDL, and output a definition of the physical implementation of the circuit.|$|R
40|$|The {{degradation}} delay {{model is}} applied to accurately estimate the switching activity in CMOS digital circuits. The model overcomes the limitations of conventional gate-level <b>logic</b> <b>simulators</b> to handle the propagation of glitches, a main source of switching activity. Model results of a four-bit multiplier are within 4 % with respect to HSPICE, while Verilog overestimations are up to 68 %. Peer Reviewe...|$|R
50|$|Achieving {{confidence}} that a design is functionally correct continues {{to become more}} difficult. To counter these problems, in the late 1980s fast <b>logic</b> <b>simulators</b> and specialized hardware description languages such as Verilog and VHDL became popular. In the 1990s, constrained random simulation methodologies emerged using hardware verification languages such as Vera and e, as well as SystemVerilog (in 2002), to further improve verification quality and time.|$|R
50|$|Logisim is a <b>logic</b> <b>simulator</b> which permits {{circuits}} to {{be designed}} and simulated using a graphical user interface. Released under the GNU Public License, Logisim is free software designed to run on the Windows, macOS, and Linux operating systems. Its code is Java using the Swing graphical user interface library. The primary developer, Carl Burch, worked on Logisim from 2001 to 2011. On October 11, 2014, Burch {{announced that he was}} suspending development of Logisim indefinitely.|$|E
50|$|It is {{certainly}} possible to represent hardware semantics using traditional programming languages such as C++, which operate on control flow semantics {{as opposed to}} data flow, although to function as such, programs must be augmented with extensive and unwieldy class libraries. Generally, however, software programming languages do not include any capability for explicitly expressing time, and thus cannot function as hardware description languages. Before the introduction of System Verilog in 2002, C++ integration with a <b>logic</b> <b>simulator</b> {{was one of the}} few ways to use object-oriented programming in hardware verification. System Verilog is the first major HDL to offer object orientation and garbage collection.|$|E
40|$|Discrete Event Simulation on GPUs {{employing}} parallel heap {{data structure}} {{is the focus}} of this thesis. Two traditional algorithms, one being conservative and other being optimistic, for parallel discrete event simulation have been implemented on GPUs using CUDA. The first algorithm is the safe-window algorithm (conservative). It has produced expected performance when compared to sequential simulation. The second algorithm, known as SyncSim, is an optimistic simulation algorithm previously designed to be space efficient and reduce rollbacks. This algorithm is re-implemented on GPU platform with necessary changes on the <b>logic</b> <b>simulator</b> and the parallel heap implementation. The performance of the parallel heap when working with a <b>logic</b> <b>simulator</b> has also been validated against the results indicated in previous research paper on parallel heap without the <b>logic</b> <b>simulator...</b>|$|E
5000|$|An [...] block models combinational <b>logic.</b> The <b>simulator</b> infers the {{sensitivity}} list {{to be all}} variables from the contained statements: ...|$|R
40|$|This {{communication}} presents HALOTIS, a novel {{high accuracy}} logic timing simulation tool, that incorporates a new simulation algorithm based on different concepts for transitions and events. This new simulation algorithm {{is intended for}} including the inertial and degradation delay models. Simulation results {{are very similar to}} those obtained by electrical simulators, and show a higher accuracy compared to conventional delay models implemented in current <b>logic</b> <b>simulators.</b> Ministerio de Ciencia y Tecnología TIC 2000 - 135...|$|R
40|$|Fast, {{efficient}} <b>logic</b> <b>simulators</b> are {{an essential}} tool in modern VLSI system design. Logic simulation is used extensively for design verification prior to fabrication, and as VLSI systems grow in size, the execution time required by simulation {{is becoming more}} and more significant. Faster <b>logic</b> <b>simulators</b> will have an appreciable economic impact, speeding time to market while ensuring more thorough system design testing. One approach to this problem is to utilize parallel processing, taking advantage of the concurrency available in the VLSI system to accelerate the logic simulation task. Parallel logic simulation has received a great deal of attention over the past several years, but this work has not yet resulted in effective, high-performance simulators being available to VLSI designers. A number of techniques have been developed to investigate performance issues: formal models, performance modeling, empirical studies, and prototype implementations. Analyzing reported results of these techniques, we conclude that five major factors affect performance: synchronization algorithm, circuit structure, timing granularity, target architecture, and partitioning. After reviewing techniques for parallel simulation, we consider each of these factors using results reported in the literature. Finally we synthesize the results and present directions for future research in the field...|$|R
40|$|This paper {{examines}} {{the use of}} spreadsheets {{as a tool for}} learning theoretical principles of concurrent error detection. Basic concepts of concurrent checking are presented by using specific spreadsheet templates. A matrix representation of a system of logical functions is used for this aim. A specific technique is described for constructing a <b>logic</b> <b>simulator</b> implementing this matrix representation. After the <b>logic</b> <b>simulator</b> construction, students are able to solve practical tasks due to understanding its theoretical basis. The proposed spreadsheet simulation approach for teaching the subject achieves the theoretical goal of the lesson by making use of practical student activities. Submitted January 2004; revised and accepted March 2004...|$|E
40|$|The {{primary purpose}} of TPG {{interface}} (TPGITF) software is to create test patterns, according to a mathematical model, for a real device. In order for the device actually to be tested or to be accurately simulated, a means is required to transform the TPGITF generated test into forms acceptable as input to logic test equipment or to a software <b>logic</b> <b>simulator.</b> The MACRODATA- 200 Logic Test System and the LOGSIM <b>logic</b> <b>simulator</b> are the particular systems supported by the TPGITF software. A description is presented of the TPGITF software processor. It is assumed that the reader {{is familiar with the}} TPG, LOGSIM, and TOIL systems. Flow charts are given...|$|E
40|$|We {{present the}} concept of a multi-valued <b>logic</b> <b>simulator</b> for {{bridging}} faults in sequential circuits. Different models for the handling of intermediate values in flipflops on the digital design level can be integrated and result in an Expected realistic behavior area for bridging faults. Several experimental results are given to underline properties and advantages of the simulation technique...|$|E
40|$|The {{complexity}} of large-scale multiprocessors has burdened {{the design and}} verification process making complexity-effective func-tional verification an elusive goal. We propose {{a solution to the}} verification of complex systems by introducing an abstracted veri-fication environment called Raven. We show how Raven uses stan-dard C/C++ to extend the capability of contemporary discrete-event <b>logic</b> <b>simulators.</b> We introduce new data types and a diagnos-tic programming interface (DPI) that provide the basis for Raven. Finally, we show results from an interconnect router ASIC used in a large-scale multiprocessor. ...|$|R
40|$|JLSCircuitTester helps {{automate}} {{the testing}} and grading of circuits built using digital <b>logic</b> <b>simulators.</b> With many simulators, the testing and grading of circuits is tedious and time consuming enough that {{students do not}} test their cir-cuits thoroughly. JLSCircuitTester addresses this problem by simplifying {{the means by which}} users specify sets of in-put and expected output values. In addition, it automati-cally verifies that the circuit under test produces the correct output. The projects submitted during the pilot semester contained approximately half as many errors as the previ-ous semester’s projects. The automatic evaluation has also simplified the grading of those projects...|$|R
50|$|However, {{chip design}} trends point to event {{simulation}} gaining relative performance due to activity factor {{reduction in the}} circuit (due to techniques such as clock gating and power gating, which are becoming much more commonly used {{in an effort to}} reduce power dissipation). In these cases, since event simulation only simulates necessary events, performance may no longer be a disadvantage over cycle simulation. Event simulation also has the advantage of greater flexibility, handling design features difficult to handle with cycle simulation, such as asynchronous logic and incommensurate clocks. Due to these considerations, almost all commercial <b>logic</b> <b>simulators</b> have an event based capability, even if they primarily rely on cycle based techniques.|$|R
40|$|A novel {{approach}} to the application of an interval-labeled net model in logic simulation with timing among concurrent processes is introduced. By means of the model, logic circuit properties involving timing information can be specified and simulated in a multiprocessor-based environment using the token-passing algorithm. A <b>logic</b> <b>simulator</b> with timing information with a structure based on this approach is proposed. link_to_subscribed_fulltex...|$|E
40|$|A programmer's manual is {{reported}} for a <b>Logic</b> <b>Simulator</b> (LOGSIM) computer {{program that is}} a large capacity event simulator with the capability to accurately simulate the effects of certain unknown states, rise and fall times, and floating nodes in large scale metal oxide semiconductor logic circuits. A {{detailed description of the}} software with flow charts is included within the report...|$|E
40|$|This paper {{presents}} {{a method to}} find disjoint decompositions using an automatic test pattern generator and a <b>logic</b> <b>simulator.</b> Since the method uses netlists rather than binary decision diagrams to represent logic functions, it can decompose larger networks. By using netlists, it efficiently finds decompositions of form f(X 1;X 2) =g(h(X 1);X 2), where jX 1 jk or jX 2 jk...|$|E
40|$|Many {{aspects of}} digital circuit {{operation}} can be efficiently verified by simulating circuit operation over "weakened" state values. This technique {{has long been}} practiced with <b>logic</b> <b>simulators,</b> using the value X to indicate a signal that could be either 0 or 1. This concept can be formally extended to a wider class of circuit models and signal values, yielding lattice-structured state domains. For more precise modeling of circuit operation, these values can be encoded in binary and hence represented symbolically as Ordered Binary Decision Diagrams. The net result is a tool for formal verification that can apply a hybrid of symbolic and partially-ordered evaluation...|$|R
40|$|This paper {{presents}} {{a model for}} characterizing delay and power for CMOS logic cells that accounts for input slope and output capacitance loading. A method for deriving the model parameters and VHDL modeling for simple logic gates is presented. The model makes feasible delay and power estimation at VHDL simulation speed, the errors of the model prediction are less than 5 % of Spice results. 1 Introduction Analog circuit simulators suffer from severe memory and execution time constraints and are hence unsuitable for VLSI circuits. <b>Logic</b> and timing <b>simulators</b> are much faster, but their accuracy depends upon {{the accuracy of the}} model used for simulation. Usually, delay and power models used by <b>logic</b> <b>simulators</b> assume signal slew rate as being constant, and model only the load influence for delay and power dissipation of the cell. In order to improve the simulation accuracy, the model should include also the dependency upon the signal slope together with cell output load. In this paper we p [...] ...|$|R
40|$|An {{approach}} for fast discrete function evaluation based on multi-valued decision diagrams (MDD) is proposed. The MDD for a logic function is {{translated into a}} table on which function evaluation is performed by a sequence of address lookups. The value of a function for a given input assignment is obtained with at most one lookup per input. The main application is to cycle-based logic simulation of digital circuits, where the prin-cipal difference from other <b>logic</b> <b>simulators</b> is that only values of the output and latch ports are computed. Theoretically, deci-sion-diagram based function evaluation offers orders-of-mag-nitude potential speedup over traditional logic simulation methods. In practice, memory bandwidth becomes the domi-nant consideration on large designs. We describe techniques to optimize usage of the memory hierarchy. ...|$|R
40|$|This paper {{reports the}} {{development}} of the Cairo University Waveform Relaxation (CUWORX) simulator. In order to accelerate the convergence of the waveform relaxation (WR) in the presence of logic feedback, CUWORK is initialized via a <b>logic</b> <b>simulator.</b> This logic initialization scheme is shown to be highly effective for digital synchronous circuits. Additionally, this logic initialization scheme preserves fully the multi-rate properties of the WR algorithm...|$|E
40|$|Testing {{of large}} scale {{integrated}} logic circuits is considered from the point-of-view of automatic {{test pattern generation}}. A <b>logic</b> <b>simulator</b> based approach for automatic test pattern generation is taken and is described. The logic model and the timing model used in the simulator are also described. Two methods are presented for generating test patterns from {{the output of the}} simulator. Recommendations for future study are also presented...|$|E
40|$|A {{method for}} worst case path-delay {{estimation}} in complex digital circuits is presented. It {{has been named}} Statistical Static Timing Analysis Using a Standard <b>Logic</b> <b>Simulator</b> (SSTA for SLog). It enables acceleration of algorithmically simple but computationally expensive and time-consuming Monte-Carlo simulations. The technique deals with fabrication-dependent delay variations of a particular technology. It applies a realistic rise/fall delay model with fanout dependent delays based on technology and implementation data...|$|E
40|$|ISBN: 0769505376 IC {{technologies}} are approaching the ultimate limits of silicon {{in terms of}} channel width, power supply and speed. By approaching these limits, circuits are becoming increasingly sensitive to noise, which will result in unacceptable rates of soft-errors. Furthermore, defect behavior is becoming increasingly complex resulting in increasing number of timing faults that can escape detection by fabrication testing. Thus, fault tolerant techniques will become necessary even for commodity applications. This work considers the implementation and improvements of a new soft error and timing error detecting technique based on time redundancy. Arithmetic circuits were used as test vehicle to validate the approach. Simulations and performance evaluations of the proposed detection technique were made using time and <b>logic</b> <b>simulators.</b> The obtained results show that detection of such temporal faults {{can be achieved by}} means of meaningful hardware and performance cost...|$|R
40|$|As an {{alternative}} to traditional software debuggers and hardware <b>logic</b> <b>simulators,</b> hardware/software coverification tools have been introduced in novel design processes for the embedded systems market. The main idea behind co-verification is to reduce design time by enabling an early integration of hardware and software development. However, with this approach, several new aspects on software debugging {{have been brought to}} surface. Especially when we look at verification of multithreaded applications, and multiprocessors in embedded real-time systems, the use of co-simulation has shown to be a promising method for reducing and/or eliminating the intrusiveness on run-time behaviour that is related to traditional software debugging. This paper presents the key concepts with co-simulation as adopted in two leading commercial tools. Furthermore, the use of co-simulation for verification of a real-time system is discussed. Ideas on applications that can benefit from co-simulation are also p [...] ...|$|R
40|$|Design {{verification}} via simulation is {{an important}} component in the development of digital systems. However, with continuing increases in the capabilities of VLSI systems, the simulation task has become a significant bottleneck in the design process. As a result, researchers are attempting to exploit parallel processing techniques to improve the performance of VLSI logic simulation. This tutorial describes the current state-of-the-art in parallel logic simulation, including parallel simulation techniques, factors that impact simulation performance, performance results to date, and the directions currently being pursued by the research community. I. INTRODUCTION The benefits of faster <b>logic</b> <b>simulators</b> are self evident to just about anyone in the electronic design automation field. Due to increased complexity in the VLSI system design process, logic simulation has taken on an essential role in the verification of designs prior to fabrication, yet the time required to complete simulation [...] ...|$|R
