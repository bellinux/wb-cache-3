38|21|Public
50|$|In Series 6, Episode 8 of Spooks, the Yalta {{organization}} {{sets off}} a <b>logic</b> <b>bomb</b> planted within the American defense network {{to shut down}} all US controlled satellites. It is activated by the entry of a code into a game which causes the <b>logic</b> <b>bomb</b> to copy a virus to all the satellites and shut them down.|$|E
50|$|In June 2006 Roger Duronio, {{a disgruntled}} system {{administrator}} for UBS, {{was charged with}} using a <b>logic</b> <b>bomb</b> to damage the company's computer network, and with securities fraud for his failed plan to drive down the company's stock with activation of the <b>logic</b> <b>bomb.</b> Duronio was later {{convicted and sentenced to}} 8 years and 1 month in prison, as well as a $3.1 million restitution to UBS.|$|E
5000|$|Kuniaki Watanabe {{designed}} {{all levels}} in the Circle game. Music [...] "Warm Breeze" [...] by Johan Krafft (<b>Logic</b> <b>Bomb).</b>|$|E
5000|$|... #Subtitle level 2: Supposed <b>logic</b> <b>bombing</b> of the Trans-Siberian Pipeline ...|$|R
5000|$|Non-Target Specific: Non-Target Specific Threat Agents are {{computer}} viruses, worms, trojans and <b>logic</b> <b>bombs.</b>|$|R
40|$|International audienceVirtualisation and {{emulation}} {{technologies are}} increasingly used for malware analysis. However {{this is not}} what they were developed for and as a result, new problems arise. This presentation will introduce the different kinds of virtualisation technologies, the problem they try to solve for malware analysts (real-time behavior monitoring) and the currently emerging problems (virtual machine detection and <b>logic</b> <b>bombs).</b> The conclusion of this survey is that perfect monitoring and undetectability are reachable goals for virtual machines, but the detection of <b>logic</b> <b>bombs</b> is intractable. As a result, virtual machines are a handy tool for malware analysts but undetectable real-time monitoring techniques should be developed instead...|$|R
50|$|The Tom Clancy book Debt of Honor {{features}} a <b>logic</b> <b>bomb</b> {{installed in the}} code of various stock market computers.|$|E
50|$|It {{has been}} {{reported}} that in 1982 the Trans-Siberian Pipeline incident occurred because of a <b>logic</b> <b>bomb.</b> (It was later reported that this story may be a hoax). A KGB operative was reported to have stolen the plans for a sophisticated control system and its software from a Canadian firm, for use on their Siberian pipeline. The CIA was supposedly tipped off by documents in the Farewell Dossier and had the company insert a <b>logic</b> <b>bomb</b> in the program for sabotage purposes.|$|E
50|$|In {{the series}} The Illuminae Files, Kady Grant, Byron Zhang, and AIDAN write a <b>logic</b> <b>bomb</b> {{to send to}} the onboard {{computer}} of the Lincoln.|$|E
50|$|As {{technology}} advances, application environments {{become more}} complex and application development security becomes more challenging. Applications, systems, and networks are constantly under various security attacks such as malicious code or denial of service. Some of the challenges from the application development security point of view include Viruses, Trojan horses, <b>Logic</b> <b>bombs,</b> Worms, Agents, and Applets.|$|R
40|$|Symbolic {{execution}} is {{an important}} software testing approach. It has been widely employed in program analysis, such as bug detection and malware analysis. However, the approach is not overwhelming because it suffers many issues, including the well-known scalability issue and other challenges, such as handling floating-point numbers and symbolic memories. Currently, several symbolic execution tools are available off-the-shelf, but they generally do not demonstrate their limitations clearly to users. Yet, we have no effective approach to benchmark their capabilities. Without such information, users would not know which tool to choose, or how reliable their program analysis results are based on particular symbolic execution tools. To address such concerns, this paper proposes a novel approach to benchmark symbolic execution tools. Our approach is based on <b>logic</b> <b>bombs</b> which are guarded by particular challenging problems. If a symbolic execution tool can find test cases to trigger such <b>logic</b> <b>bombs</b> during evaluation, it indicates that the tool can handle corresponding problems. Following the idea, we have designed an automated benchmark framework and a dataset of <b>logic</b> <b>bombs</b> covering 12 different challenges. Then we have conducted real-world experiments on benchmarking three popular symbolic execution tools: KLEE, Angr, and Triton. Experimental results show that our approach can reveal their limitations in handling particular issues accurately and efficiently. The benchmark process generally takes {{only a few minutes}} to evaluate a tool. To better serve the community, we release our toolset on GitHub as open source, and we hope it would serve as an essential tool to benchmark symbolic execution tools in the future...|$|R
5000|$|Software that is {{inherently}} malicious, such as viruses and worms, often contain <b>logic</b> <b>bombs</b> that execute a certain payload at a pre-defined time or when some other condition is met. This technique {{can be used}} by a virus or worm to gain momentum and spread before being noticed. Some viruses attack their host systems on specific dates, such as Friday the 13th or April Fools' Day. Trojans that activate on certain dates are often called [...] "time bombs".|$|R
5000|$|... "Malicious logic": In {{context of}} incapacitation, any hardware, firmware, or {{software}} (e.g., <b>logic</b> <b>bomb)</b> intentionally introduced {{into a system}} to destroy system functions or resources.|$|E
50|$|In the CIA {{level of}} Tom Clancy's Splinter Cell, a PC and console video game, a {{conversation}} {{can be heard}} with {{a reference to a}} <b>logic</b> <b>bomb.</b>|$|E
5000|$|Hugh Jackman's {{character}} in Swordfish, Stanley Jobson, {{claims to have}} [...] "dropped a <b>logic</b> <b>bomb</b> through the trapdoor" [...] while hacking into a Department of Defense network.|$|E
40|$|Abstract. The global {{information}} {{has become the}} human development trend {{with the development of}} network technology. People enjoy the convenience brought by the network technology and confront many network security issues. Because the network attack behavior has concealment, complexity and permeability, the network security issues become increasingly prominent and the network security protection become more difficult. Based on the analysis of the threatening factors to the network security, such as hacking, computer viruses, computer system vulnerabilities, security issues of the network protocol, weak authentication and <b>logic</b> <b>bombs,</b> the firewal...|$|R
30|$|A {{computer}} virus is a malicious code which executes harmful and unauthorized activities like erasing necessary files, accessing confidential data and personal information like passwords, account numbers, contact lists etc. Depending {{on the way}} of propagation, functioning and damaging the systems/users, malwares are classified into various categories. These include computational viruses, computer worms, Trojans, Rootkits, spyware, <b>logic</b> <b>bombs</b> and so on [1, 2]. Dissemination of {{computer virus}}es to other connected systems bears a high resemblance to the behavior of biological viruses [3 – 5]; therefore, various models of computer virus propagation have been proposed by using an epidemiological analog [6 – 9].|$|R
50|$|High {{interaction}} client honeypots {{are very}} effective at detecting unknown attacks on clients. However, the tradeoff for this accuracy is a performance {{hit from the}} amount of system state {{that has to be}} monitored to make an attack assessment. Also, this detection mechanism is prone to various forms of evasion by the exploit. For example, an attack could delay the exploit from immediately triggering (time bombs) or could trigger upon a particular set of conditions or actions (<b>logic</b> <b>bombs).</b> Since no immediate, detectable state change occurred, the client honeypot is likely to incorrectly classify the server as safe even though it did successfully perform its attack on the client. Finally, if the client honeypots are running in virtual machines, then an exploit may try to detect the presence of the virtual environment and cease from triggering or behave differently.|$|R
50|$|In Season 2, Episode 5 of Mr. Robot ("eps2.3_logic-b0mb.hc"), Elliot {{discusses}} {{the use of}} a <b>logic</b> <b>bomb</b> to hack FBI agents Android phones and E Corp's network and applications.|$|E
5000|$|In Season 9, Episode 12 of Criminal Minds ("The Black Queen"), a <b>logic</b> <b>bomb</b> is {{used against}} the team that begins {{deleting}} information with failed attempts to crack the code ...|$|E
5000|$|In {{the episode}} [...] "Scattered" [...] of the 2004 re-imagining of Battlestar Galactica, the Cylons leave a <b>logic</b> <b>bomb</b> in the ship's {{computers}} after briefly {{gaining access to}} them. It later causes a series of nearly catastrophic system malfunctions.|$|E
40|$|Abstract. Drivers, {{especially}} {{third party}} drivers, could contain mali-cious code (e. g., <b>logic</b> <b>bombs)</b> or carefully designed-in vulnerabilities. Generally, {{it is extremely}} difficult for static analysis to identify these code and vulnerabilities. Without knowing the exact triggers that cause the execution/exploitation of these code/vulnerabilities, dynamic taint analysis cannot help either. In this paper, we propose a novel cross-brand comparison approach to assess the drivers in a honeypot or test-ing environment. Through hardware virtualization, we design and de-ploy diverse-drivers based replicas to compare the runtime behaviour of the drivers developed by different vendors. Whenever the malicious code is executed or vulnerability is exploited, our analysis can capture the evidence of malicious driver behaviour through comparison and dif-ference telling. Evaluation shows that it can faithfully reveal various kernel integrity/confidentiality manipulation and resource starvation at-tacks launched by compromised drivers, thus to assess the trustworthi-ness of the evaluated drivers...|$|R
40|$|Abstract:In {{terms of}} computing, a {{malicious}} attack {{is an attack}} {{that can be used}} to compromise the system state with the intent of acquiring, destroying, modifying or accessing a user’s data without any permission. Physical attacks typically mean either the theft of hardware storing personal/confidential information or the destruction of said hardware. Electronic attacks (the focus of this presentation) involve unauthorized access or unauthorized modification of the user’s computer. Malicious attacks like Viruses, Worms, Trojan horses, <b>Logic</b> <b>bombs</b> (a. k. a. Time bombs), Trapdoors, Phishing/Spoofing can be accessing victim system resources without getting any permission. Earlier detection system like firewall, access control, encryption methods are failed due to self similarity of new malicious attacks. We propose new Intrusion detection system for malicious traffic by using particle swarm optimization techniques combined with genetic algorithm. The main use of this combined algorithm is that it produces good classification rules. By using these rules, IDS detects the intrusion with very low false alarm rate and High detection Accuracy rate...|$|R
40|$|The {{number of}} occurrences and {{severity}} of computerbased attacks such as viruses and worms, <b>logic</b> <b>bombs,</b> trojan horses, computer fraud, and plagiarism of code have become of increasing concern. In an attempt to better deal with these problems it is proposed that methods for examining the authorship of computer programs are necessary. This field is referred to here as software forensics. This involves the areas of author discrimination, identification, and characterisation, as well as intent analysis. Borrowing extensively from the existing fields of linguistics and software metrics, {{this can be seen}} as a new and exciting area for forensics to extend into. Keywords Authorship analysis, computer programming, malicious programs, software forensics, software metrics, source code 1. INTRODUCTION Computer programs are generally written in what is referred to as source code. Source code is the textual form of a computer program that is written by a computer programmer. In some cases sourc [...] ...|$|R
50|$|To be {{considered}} a <b>logic</b> <b>bomb,</b> the payload should be unwanted and unknown to the user of the software. As an example, trial programs with code that disables certain functionality after a set time are not normally regarded as logic bombs.|$|E
50|$|An insider may {{attempt to}} steal {{property}} or information for personal gain, or to benefit another organization or country. The {{threat to the}} organization could also be through malicious software left running on its computer systems by former employees, a so-called <b>Logic</b> <b>bomb.</b>|$|E
5000|$|In October 2009, Douglas Duchak was {{terminated}} {{from his job}} as data analyst at the Colorado Springs Operations Center (CSOC) of the U.S. Transportation Security Administration. Surveillance cameras captured images of Duchak entering the facility after hours and loading a <b>logic</b> <b>bomb</b> onto a CSOC server that stored data from the U.S. Marshals. In January 2011, Duchak was sentenced to two years in prison, $60,587 in fines, and three years on probation. [...] At his sentencing, Duchak tearfully apologized as his lawyer noted {{that at the time of}} the incident, Duchak's wife was pregnant with their second child. The judge at the sentencing mentioned that this <b>logic</b> <b>bomb</b> planting [...] "incident was an anomaly in an otherwise untarnished work history." ...|$|E
40|$|The {{frequency}} {{and severity of}} computer-based attacks such as viruses and worms, <b>logic</b> <b>bombs,</b> trojan horses, computer fraud, and plagiarism of software code have all become of increasing concern to many of those involved with information systems. Part of the difficulty experienced in collecting evidence regarding the attack or theft in such situations has been the definition and collection of appropriate measurements to use in models of authorship. With this purpose in mind a system called IDENTIFIED is being developed {{to assist with the}} task of software forensics which is the use of software code authorship analysis for legal or official purposes. IDENTIFIED uses combinations of wildcards and special characters to define count-based metrics, allows for hierarchical metametric definitions, automates much of the file handling task, extracts metric values from source code, and assists with the analysis and modelling processes. It is hoped that the availability of such tools will encourage more detailed research into this area of ever-increasing importance...|$|R
40|$|Application markets {{such as the}} Google Play Store and the Apple App Store {{have become}} the de facto method of distributing {{software}} to mobile devices. While official markets dedicate significant resources to detecting malware, stateof-the-art malware detection can be easily circumvented using <b>logic</b> <b>bombs</b> or checks for an emulated environment. We present a Practical Root Exploit Containment (PREC) framework that protects users from such conditional malicious behavior. PREC can dynamically identify system calls from high-risk components (e. g., third-party native libraries) and execute those system calls within isolated threads. Hence, PREC can detect and stop root exploits with high accuracy while imposing low interference to benign applications. We have implemented PREC and evaluated our methodology on 140 most popular benign applications and 10 root exploit malicious applications. Our results show that PREC can successfully detect and stop all the tested malware while reducing the false alarm rates {{by more than one}} order of magnitude over traditional malware detection algorithms. PREC is light-weight, which makes it practical for runtime on-device root exploit detection and containment...|$|R
50|$|The {{versatility}} of the Mach-Zehnder configuration {{has led to}} {{its being}} used {{in a wide range}} of fundamental research topics in quantum mechanics, including studies on counterfactual definiteness, quantum entanglement, quantum computation, quantum cryptography, quantum <b>logic,</b> Elitzur-Vaidman <b>bomb</b> tester, the quantum eraser experiment, the quantum Zeno effect, and neutron diffraction. In optical telecommunications it is used as an electro-optic modulator for phase as well as amplitude modulation of light. See their respective articles for further information on these topics.|$|R
50|$|In Series 6, Episode 2 of NCIS, Abby and McGee have a {{conversation}} about logic that gives them {{the idea of using}} a <b>logic</b> <b>bomb</b> to hack into computers on a US Naval Carrier to access certain files. No details of the bomb itself are seen on screen or discussed at all.|$|E
5000|$|On 20 March 2013, in {{an attack}} {{launched}} against South Korea, a <b>logic</b> <b>bomb</b> struck machines and [...] "wiped the hard drives and master boot records {{of at least three}} banks and two media companies simultaneously." [...] Symantec reported that the malware also contained a component that was capable of wiping Linux machines.|$|E
50|$|A <b>logic</b> <b>bomb</b> is a {{piece of}} code {{intentionally}} inserted into a software system that will set off a malicious function when specified conditions are met. For example, a programmer may hide a piece of code that starts deleting files (such as a salary database trigger), should they ever be terminated from the company.|$|E
40|$|In {{industrial}} control systems, {{devices such}} as Programmable Logic Controllers (PLCs) are commonly used to directly interact with sensors and actuators, and perform local automatic control. PLCs run software on two different layers: a) firmware (i. e. the OS) and b) control logic (processing sensor readings to determine control actions). In this work, we discuss ladder <b>logic</b> <b>bombs,</b> i. e. malware written in ladder logic (or {{one of the other}} IEC 61131 - 3 -compatible languages). Such malware would be inserted by an attacker into existing control logic on a PLC, and either persistently change the behavior, or wait for specific trigger signals to activate malicious behaviour. For example, the LLB could replace legitimate sensor readings with manipulated values. We see the concept of LLBs as a generalization of attacks such as the Stuxnet attack. We introduce LLBs on an abstract level, and then demonstrate several designs based on real PLC devices in our lab. In particular, we also focus on stealthy LLBs, i. e. LLBs that are hard to detect by human operators manually validating the program running in PLCs. In addition to introducing vulnerabilities on the logic layer, we also discuss countermeasures and we propose two detection techniques. Comment: 11 pages, 14 figures, 2 tables, 1 algorith...|$|R
40|$|Dedicated to my Grand Master- Hemmatabadi – The {{fine man}} Who left me too soon, He is truly missed. The art of war teaches us to rely {{not on the}} {{likelihood}} of the enemy’s not coming but on our own readiness to receive him, not on the chance of he is not attacking, but rather on {{the fact that we have}} made our position unassailable. - "The Art of War " – Sun Tzu Malicious code refers to a broad category of software threats to your network and systems. Perhaps the most sophisticated types of threats to computer systems are presented by malicious codes that exploit vulnerabilities in computer systems. Any code which modifies or destroys data, steals data, allows unauthorized access Exploits or damage a system, and does something that user did not intend to do, is called malicious code. This paper will briefly introduce you to the various types of malicious code you will encounter, including Viruses, Trojan horses, <b>Logic</b> <b>bombs</b> and Worms. Taxonomy of malicious Code A computer program is a sequence of symbols that are caucused to achieve a desired functionality; the program is termed malicious when their sequences of instructions are used to intentionally cause adverse affects to the system. In the other words we can’t call any “bug ” as a Malicious Code. Malicious codes are also called programmed threats. The following figure provides an overall taxonomy of Malicious Code...|$|R
40|$|In today’s {{business}} environment {{it is difficult}} to obtain senior management approval for the expenditure of valuable resources to “guarantee” that a potentially disastrous event will not occur that could affect the ultimate survivability of the organization. The total information network flexibility achieved depends to a great extent on how network security is implemented. However, this implementation depends on the network designers at the initial stage and the network administrators in the long term. Initial security level designed can be later changed, improved or compromised by the network administrators who look after day-to-day network and system functions. Their competencies and the motivation contribute in achieving the desired security objectives that are aligned with the business goals. Incompetent network administrator may pave the way to attacks that could take place either at once where an obvious vulnerability may exist or in several phases where it requires information gathering or scanning in order to enter into the target system. De-motivated network administrator may ignore the possible threats or find strategies to make his/ her presence vital for the existence of the network services. The latter may be an example of a competent network administrator who is not rewarded due to the lapses of the senior management, in which case backdoors or <b>logic</b> <b>bombs</b> may be deployed so that the administrator may take vengeance in case the career is terminated or someone else is given undue recognition. Two studies on real cases given in this paper highlights the influence of such network administrators. To preserve the confidentiality, the names of personnel or organizations are not revealed...|$|R
