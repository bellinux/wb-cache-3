120|2246|Public
25|$|Static {{libraries}} are searched {{and linked}} into the ELF file at <b>link</b> <b>time</b> {{and are not}} linked at run time.|$|E
2500|$|The rpath of an {{executable}} or shared {{library is}} an optional {{entry in the}} [...]dynamic section of the ELF executable or shared libraries, with the type DT_RPATH, called the DT_RPATH attribute. It can be stored there at <b>link</b> <b>time</b> by the linker. Tools such as chrpath and patchelf can create or modify the entry later.|$|E
2500|$|The second scheme, {{and the one}} {{implemented}} in many production-quality C++ compilers, is a table-driven approach. This creates static tables at compile time and <b>link</b> <b>time</b> that relate ranges of the program counter to the program state with respect to exception handling. [...] Then, if an exception is thrown, the runtime system looks up the current instruction location in the tables and determines what handlers are in play and {{what needs to be}} done. This approach minimizes executive overhead for the case where an exception is not thrown. This happens at the cost of some space, but this space can be allocated into read-only, special-purpose data sections that are not loaded or relocated until an exception is actually thrown. [...] This second approach is also superior in terms of achieving thread safety.|$|E
40|$|Drivers {{able to use}} <b>link</b> {{traversal}} <b>time</b> predictions can {{use this}} information to choose better routes. Such antici- patory vehicle routing bases routing decisions on <b>link</b> traversal <b>times</b> likely to be experienced by the vehicle instead of historic or real <b>time</b> <b>link</b> traversal <b>times.</b> However, generating such <b>link</b> traversal <b>times</b> is a challenge. This paper describes a multi- agent system in which road agents and vehicle agents cooperate to provide ad hoc <b>link</b> traversal <b>times</b> for the routes the vehicle agents intend to follow. Road agents use observations to learn {{a model of the}} road they represent and combine this model with information obtained from vehicle agents to predict future <b>link</b> traversal <b>times.</b> Two such models are described in this paper, namely a polynomial model and an artificial neural network. Both models are evaluated based on a microscopic traffic simulation. The predictions obtained using both models are analyzed and compared with the actual observed <b>link</b> traversal <b>times</b> to estimate the accuracy of the predictions. status: publishe...|$|R
40|$|In the {{research}} area of dynamic traffic assignment, <b>link</b> travel <b>times</b> {{can be derived}} from link cumulative inflow and outflow curves which are generated by dynamic network loading. In this paper, the profiles of cumulative flows are piecewise linearized. Both the step function (SF) and linear interpolation (LI) are used to approximate cumulative flows over time. New formulations of the SF-type and LI-type <b>link</b> travel <b>time</b> models are developed. We prove that these two types of <b>link</b> travel <b>time</b> models ensure first-in-first-out (FIFO) and continuity of travel times with respect to flows, and have other desirable properties. Since the LI-type <b>link</b> travel <b>time</b> model does not satisfy the causality property, a modified LI-type (MLI-type) <b>link</b> travel <b>time</b> model is proposed in this paper. We prove that the MLI-type <b>link</b> travel <b>time</b> model ensures causality, strong FIFO and travel time continuity, and that the MLI-type <b>link</b> travel <b>time</b> function is strictly monotone under the condition that the travel time of each vehicle on a link is greater than the free flow travel <b>time</b> on that <b>link.</b> Numerical examples are set up to illustrate the properties and accuracy of the three models. © 2010 Elsevier Ltd. postprin...|$|R
50|$|Another {{major feature}} was the {{internal}} linker for Win32, Win64, and Windows CE, which greatly improveď <b>linking</b> <b>time</b> and memory use, {{and make the}} compile-link-run cycle in Lazarus much faster. The efficiency for smart-linking, or dead code elimination, was also improved.|$|R
2500|$|Season one of The O.C. {{received}} generally positive {{reviews from}} critics and is frequently {{regarded as the}} best season. Upon the show's premiere, Gael Fashingbauer Cooper of MSNBC described Ryan and Seth's friendship as [...] "the most promising plot". The New York Times noted that [...] "Mr. Schwartz pulled it off, sneaking a truly smart show past the gatekeepers {{in the guise of}} something commercial and trashy and fun." [...] The reviewer also praised how the show [...] "steered clear of both Aaron Spelling-style camp and the soggy earnestness that often characterises teen drama" [...] and praised the integration of the adult cast into the plotlines. IGN called it [...] "far more engaging and interesting" [...] than its predecessors in the teen genre. The reviewer pointed to the show's sense of humor and respect for its audience, praising the series as [...] "very funny" [...] and [...] "well-acted", while referring to Mischa Barton as the weak <b>link.</b> <b>Time</b> Magazine critic James Poniewozik was fond of the premiere episode, saying that the show [...] "looks to have enough heart, talent and wit to generate a few seasons' worth of luxurious suds. As Ryan would say, in the teen-soap business, being 100% original doesn't make you smart. Delivering a formula with so much style and believability that it feels new again—that does." ...|$|E
50|$|It {{is common}} to speak of <b>link</b> <b>time</b> {{operations}} (the operations performed by a linker) or <b>link</b> <b>time</b> requirements (programming language requirements that must be met by compiled source code {{for it to be}} successfully linked).|$|E
50|$|The {{operations}} performed at <b>link</b> <b>time</b> usually include fixing up the addresses of externally referenced objects and functions, {{various kinds of}} cross module checks (e.g. type checks on externally visible identifiers and in some languages instantiation of template). Some optimizing compilers delay code generation until <b>link</b> <b>time</b> because {{it is here that}} information about a complete program is available to them. Resolving external variables in a program is also done at <b>link</b> <b>time.</b>|$|E
40|$|Finding the {{shortest}} path in a road network {{is a well}} known problem. Various proven static algorithms such as Dijkstra and A* are extensively evaluated and implemented. When confronted with dynamic costs, such as <b>link</b> travel <b>time</b> predictions, alternative route planning algorithms have to be applied. This paper applies Ant Colony Optimization combined with <b>link</b> travel <b>time</b> predictions to find routes that reduce the time spend by travels by taking into account <b>link</b> travel <b>time</b> predictions. The presented algorithm is evaluated using simulations in real world traffic networks. status: publishe...|$|R
40|$|<b>Link</b> travel <b>time</b> plays a {{significant}} role in traffic planning, traffic management and Advanced Traveler Information Systems (ATIS). A public probe vehicle dataset is a probe vehicle dataset that is collected from public people or public transport. The appearance of public probe vehicle datasets can support travel time collection at a large temporal and spatial scale but at a relatively low cost. Traditionally, <b>link</b> travel <b>time</b> is the aggregation of travel time by different movements. A recent study proved that <b>link</b> travel <b>time</b> of different movements is significantly different from their aggregation. However, there is still not a complete framework for estimating movement-based <b>link</b> travel <b>time.</b> In addition, probe vehicle datasets usually have a low penetration rate but no previous study has solved this problem. To solve the problems above, this study proposed a detailed framework to estimate movement-based <b>link</b> travel <b>time</b> using a high sampling rate public probe vehicle dataset. Our study proposed a k-Nearest Neighbors (k-NN) regression method to increase travel time samples using incomplete trajectory. An incomplete trajectory was compared with historical complete trajectories and the <b>link</b> travel <b>time</b> of the incomplete trajectory was represented by its similar complete trajectories. The result of our study showed that the method can significantly increase <b>link</b> travel <b>time</b> samples but there are still limitations. In addition, our study investigated the performance of k-NN regression under different parameters and input data. The sensitivity analysis of k-NN algorithm showed that the algorithm performed differently under different parameters and input data. Our study suggests optimal parameters should be selected using a historical dataset before real-world application...|$|R
30|$|In addition, the VRPLite package uses a discretized space–time–state {{modeling}} approach, so it {{is natural}} to consider time-dependent <b>link</b> travel <b>time</b> in the program, such as the vehicle routing problem with time-dependent <b>link</b> travel <b>time</b> and path flexibility in the paper [39], as well as spatial and temporal conflicts between AGVs.|$|R
50|$|In {{computer}} science, <b>link</b> <b>time</b> {{refers to}} the period of time, during {{the creation of a}} computer program, in which a linker is being applied to that program. <b>Link</b> <b>time</b> occurs after compile time and before runtime (when a program is executed).|$|E
5000|$|Link-time {{optimization}} {{is a type}} {{of program}} optimization performed by a compiler to a program at <b>link</b> <b>time.</b> <b>Link</b> <b>time</b> optimization is relevant in programming languages that compile programs on a file-by-file basis, and then link those files together (such as C and Fortran), rather than all at once (such as Java's [...] "Just in time" [...] (JIT) compilation).|$|E
5000|$|Static {{libraries}} are searched {{and linked}} into the ELF file at <b>link</b> <b>time</b> {{and are not}} linked at run time.|$|E
40|$|In {{the present}} study, two {{techniques}} used for wells linking in Underground Coal Gasification (UCG), namely, Reverse Combustion Linking (RCL) and Forward Combustion Linking (FCL) are compared. <b>Linking</b> <b>time</b> in FCL is estimated using two-dimensional model and assuming {{stability of the}} combustion front. Effects of instabilities during FCL are discussed...|$|R
40|$|This paper {{considers}} {{the problem of}} dynamic traffic assignment under the principle that individual drivers will choose fastest paths, in the dynamic situation where path durations consist of time-dependent <b>link</b> travel <b>times.</b> Rather than constructing a unified model encompassing traffic dynamics and route choice, we decompose the model into an assignment mapping, which identifies the <b>link</b> travel <b>times</b> resulting from an input routing policy, and a routing mapping, which yields fastest-path routings associated with input <b>link</b> travel <b>times.</b> Since time-dynamic <b>link</b> travel <b>times</b> are influenced by route choice, this dynamic situation therefore encompasses predictive routing strategies. We establish that user-equilibrium routing policies are fixed points of {{the composition of the}} routing and assignment functions. After discussing di#culties associated with establishing existence of fixed points under discrete-time modeling and all-ornothing routing, we present instead new iterative routing mapping [...] ...|$|R
5000|$|... #Subtitle level 3: Possible <b>link</b> to <b>Times</b> Square {{car bomb}} attempt ...|$|R
5000|$|<b>Link</b> <b>time</b> {{redirection}} {{of memory}} routines: {{this approach is}} taking advantage of function wrapping supported by GCC compilers to intercept libc memory allocation routines.|$|E
50|$|In {{computer}} science, run time, runtime or {{execution time}} is the time during which a program is running (executing), in contrast to other program lifecycle phases such as compile time, <b>link</b> <b>time</b> and load time.|$|E
50|$|Program {{lifecycle}} phases are {{the stages}} {{a computer program}} undergoes, from initial creation to deployment and execution. The phases are edit time, compile time, distribution time, installation time, <b>link</b> <b>time,</b> load time, and run time.|$|E
40|$|Traffic {{congestion}} {{is becoming}} a serious environmental threat that must be resolved quickly. The mobile travel information system developed at The Nottingham Trent University enables the integration of data concerning traffic flows and individual journey plans thus {{making it possible to}} perform optimisation of travel. This paper focuses on the issue of provision of real-time information about urban travel and assistance with planning travel. Nottingham’s SCOOT (Split Cycle Offset Optimisation Technique) traffic-light control system provides real-time information about the <b>link</b> travel <b>times</b> within certain areas of the city. However, rather than using <b>link</b> travel <b>times</b> {{at the time of the}} request, it is more effective to predict the <b>link</b> travel <b>times</b> for the time of travel along the particular links. The future <b>link</b> travel <b>times</b> depend upon the historical travel <b>time</b> of the <b>link</b> (for the specific time step in the day) as well as the current <b>link</b> travel <b>time.</b> Consequently, the <b>link</b> weights are a combination of real-time data, historical data and static data. Three prediction methods have been implemented and tested in the context of Nottingham’s urban road network. The preliminary results suggest that the information discounting technique gives the best results...|$|R
40|$|Route finding {{issues have}} always been a {{significant}} research focus in intelligence transportation system. Many solution models have been proposed in the previous work and analyzed in detail. Successive <b>link</b> travel <b>time</b> correlation has been identified {{to play an important role}} in these models to realistically reflect the property of traffic flows. In this paper, we establish a framework to find the best route in a stochastic time-dependent network by considering <b>link</b> travel <b>time</b> indeterminacy and correlation between adjacent <b>links</b> with real <b>time</b> information. We provide explicit mathematical formulations to update the outing <b>link</b> travel <b>time</b> distributions according to the real time information and help the travelers to find the best route to their destination. A simple illustrative example is shown to demonstrate the effectiveness and advantages of the proposed method...|$|R
30|$|The {{dependent}} variable yl,d,i here can equal the local speed measurements spl,d,i (in m/s) or the corresponding <b>link</b> travel <b>times</b> LTTl,d,i=Ll/spl,d,i (where Ll denotes the length in meters of the l-th link). In {{order to make}} the models comparable, <b>link</b> travel <b>times</b> are divided by the length of the links to obtain LTT_l,d,i= 1 /sp_l,d,i in seconds per meter.|$|R
50|$|The {{definition}} of a programming language may specify <b>link</b> <b>time</b> requirements that source code must meet to be successfully compiled (e.g. {{the maximum number of}} characters in an externally visible identifier that must be considered significant).|$|E
50|$|The LLVM Compiler Infrastructure uses SSA {{form for}} all scalar {{register}} values (everything except memory) in its primary code representation. SSA form is only eliminated once register allocation occurs, {{late in the}} compile process (often at <b>link</b> <b>time).</b>|$|E
50|$|Once all files {{have been}} {{compiled}} separately into object files, traditionally, a compiler links (merges) the object files {{into a single}} file, the executable. However, {{in the case of}} the GCC compiler, for example, with <b>Link</b> <b>Time</b> Optimization (LTO) enabled, GCC is able to dump its internal representation (GIMPLE) to disk, so that all the different compilation units that will go to make up a single executable can be optimized as a single module. This expands the scope of inter-procedural optimizations to encompass the whole program (or, rather, everything that is visible at <b>link</b> <b>time).</b> With link-time optimization, the compiler can apply various forms of interprocedural optimization to the whole program, allowing for deeper analysis, more optimization, and ultimately better program performance.|$|E
40|$|In {{the present}} study [...] two {{techniques}} used for wells linking in Underground Coal Gasification (UCG), namely, Reverse Combustion Linking (RCL) and Forward Combustion Linking (FCL) are compared. <b>Linking</b> <b>time</b> in FCL is estimated using two-dimensional model and assuming stability of the combustion front. Effects of instabilities during FCL are discussed. (C) 2007 Elsevier Ltd. All rights reserved...|$|R
50|$|Pathfinder.com transitioned to {{a landing}} page, with <b>links</b> to <b>Time</b> Inc.'s other sites.|$|R
30|$|Based on the {{location}} information over time, algorithms for inferring <b>link</b> travel <b>times</b> have been discussed in the literature (see for instance [12] for a discussion using the same data base as in this paper). Typically <b>link</b> travel <b>time</b> estimates are temporally aggregated into time-of-day-intervals for every given link. This generates panel data sets containing observations for many (link, day, time-of-day-interval) combinations.|$|R
5000|$|Relocation is {{typically}} {{done by the}} linker at <b>link</b> <b>time,</b> {{but it can also}} be done at run time by a relocating loader, or by the running program itself. Some architectures avoid relocation entirely by deferring address assignment to run time; this is known as zero address arithmetic.|$|E
50|$|However, {{internal}} {{names of}} the function are rarely used directly. Generally, messages are converted to function calls defined in the Objective-C runtime library. It is not necessarily known at <b>link</b> <b>time</b> which method will be called because the class of the receiver (the object being sent the message) need not be known until runtime.|$|E
5000|$|The rpath of an {{executable}} or shared {{library is}} an optional {{entry in the}} [...] section of the ELF executable or shared libraries, with the type , called the [...] attribute. It can be stored there at <b>link</b> <b>time</b> by the linker. Tools such as [...] and [...] can create or modify the entry later.|$|E
5000|$|Similarly, in Three Days to Never by Tim Powers, various {{individuals}} and groups try to find and control a time machine, hoping to travel back in time, make changes to events, and thereby enter a parallel universe in which they might find themselves experiencing a happier life. Powers also explicitly <b>links</b> <b>time</b> travel with rivers in his 1983 novel The Anubis Gates.|$|R
40|$|A {{stochastic}} time-dependent (STD) {{network is}} defined by treating all <b>link</b> travel <b>times</b> at all time periods as random variables, with possible time-wise and link-wise stochastic dependency. A routing policy is a decision rule which specifies what node to take next out of the current node based on the current time and online information. A formal framework is established for optimal routing policy problems in STD networks, including generic optimality conditions, and a comprehensive taxonomy with insights into variants of the problem. A variant pertinent to road traffic networks is studied in detail, where a discrete joint distribution of <b>link</b> travel <b>times</b> is used to accommodate the most general stochastic dependency among <b>link</b> travel <b>times,</b> and the access to perfect online information about <b>link</b> travel <b>times</b> is assumed. Both exact and approximation solution algorithms are designed and tested. The criteria of optimality are then extended to reliability measures, such as travel time variance and expected early/late schedule delays. The first routing-policy-based stochastic dynamic traffic assignment (DTA) mode...|$|R
5000|$|<b>Link</b> {{roundtrip}} <b>time</b> ≈ {{packet transmission}} time + 2 × propagation delay + processing delay ...|$|R
