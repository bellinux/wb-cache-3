47|454|Public
2500|$|In the English <b>language</b> <b>statement</b> [...] 'New York has {{the postal}} {{abbreviation}} NY' , 'New York' [...] {{would be the}} subject, [...] 'has the postal abbreviation' [...] the predicate and [...] 'NY' [...] the object.|$|E
5000|$|The {{semantic}} parameterization {{process is}} based on Description Logic, wherein the TBox is composed of words in a dictionary, including nouns, verbs, and adjectives, and the ABox is partitioned into two sets of assertions: 1) those assertions that come from words in the natural <b>language</b> <b>statement,</b> called the grounding, and 2) those assertions that are inferred by the (human) modeler, called the meta-model. Consider the following unstructured natural <b>language</b> <b>statement</b> (UNLS) (see Breaux et al. for an extended discussion): ...|$|E
5000|$|Therefore, if Y is an unprovable {{statement}} {{in a formal}} system, there is no statement X in that system such that X {{is equivalent to the}} implication (X → Y). By contrast, the previous section shows that in natural (unformalized) language, for every natural <b>language</b> <b>statement</b> Y there is a natural <b>language</b> <b>statement</b> Z such that Z is equivalent to (Z → Y) in natural language. Namely, Z is [...] "If this sentence is true then Y".|$|E
5000|$|Programming <b>language</b> <b>statements</b> {{typically}} have conventions for: ...|$|R
5000|$|Concrete {{things such}} as {{programming}} <b>language</b> <b>statements,</b> database schemas, and ...|$|R
50|$|The {{templates}} {{are capable}} of generating any text based file, and {{are not limited to}} Clarion <b>Language</b> <b>statements.</b>|$|R
5000|$|In {{computer}} science, a NOP, no-op, or NOOP (pronounced [...] "no op"; {{short for}} no operation) is an assembly language instruction, programming <b>language</b> <b>statement,</b> or computer protocol command that does nothing.|$|E
5000|$|In the English <b>language</b> <b>statement</b> [...] 'New York has {{the postal}} {{abbreviation}} NY' , 'New York' [...] {{would be the}} subject, [...] 'has the postal abbreviation' [...] the predicate and [...] 'NY' [...] the object.|$|E
5000|$|Reification {{in natural}} {{language}} processing refers to where a natural <b>language</b> <b>statement</b> is transformed so actions and events in it become quantifiable variables. For example [...] "John chased the duck furiously" [...] can be transformed into something like ...|$|E
50|$|Semantic Types of Natural <b>Language</b> <b>Statements.</b> Proc. of the 10th IEEE Internat. Simposium on Intelligent Control. Monterey, California, 1995.|$|R
3000|$|... {{template}} files (also called templates): {{written in}} the language of the resulting documents together with special template <b>language</b> <b>statements,</b> and [...]...|$|R
50|$|Method for Extracting Semantic Types of Natural <b>Language</b> <b>Statements</b> from Texts. Proc. 10th IEEE Intern. Simposium on Intelligent Control. Monterey, California, 1995.|$|R
50|$|An {{interpreted}} <b>language</b> <b>statement</b> has {{similarities to}} the HLL primitives, {{but with a}} further added layer. Before the statement can be executed in a manner very similar to an HLL statement: it must first be processed by an interpreter, a process that may involve many primitives in the target machine language.|$|E
50|$|Mesa was {{compiled}} into a stack-machine language, purportedly {{with the highest}} code density ever achieved (roughly 4 bytes per high-level <b>language</b> <b>statement).</b> This was touted in a 1981 paper where implementors from the Xerox Systems Development Department (then, the development arm of PARC), tuned up the instruction set and published a paper on the resultant code density.|$|E
5000|$|The {{corresponding}} Data Definition <b>Language</b> <b>statement</b> is as follows. CREATE TABLE Supplier ( [...] SupplierNumber INTEGER NOT NULL, Name VARCHAR(20) NOT NULL, Address VARCHAR(50) NOT NULL, Type VARCHAR(10), CONSTRAINT supplier_pk PRIMARY KEY(SupplierNumber), CONSTRAINT number_value CHECK (SupplierNumber > 0) [...] ) CREATE TABLE Invoices ( [...] InvoiceNumber INTEGER NOT NULL, SupplierNumber INTEGER NOT NULL, Text VARCHAR(4096), CONSTRAINT invoice_pk PRIMARY KEY(InvoiceNumber), CONSTRAINT inumber_value CHECK (InvoiceNumber > 0), CONSTRAINT supplier_fk FOREIGN KEY(SupplierNumber) REFERENCES Supplier(SupplierNumber) ON UPDATE CASCADE ON DELETE RESTRICT [...] ) ...|$|E
50|$|The {{format of}} {{assembler}} <b>language</b> <b>statements</b> reflects {{the layout of}} an 80-column punched card, though successive versions have relaxed most of the restrictions.|$|R
30|$|For {{semantic}} annotation, {{two main}} methods are generally used: annotation with concepts {{belonging to a}} taxonomy or annotation with natural <b>language</b> <b>statements</b> defining prerequisites and learning objectives.|$|R
5000|$|AIF, AGO, ANOP, AEND, AEXIT and MEXIT - used {{to control}} the {{generation}} of different assembly <b>language</b> <b>statements,</b> depending {{on the nature of}} the macro’s supplied arguments.|$|R
50|$|A 6502 {{assembly}} <b>language</b> <b>statement</b> {{consists of}} a three character instruction mnemonic, followed by an operand {{in the case of}} an instruction that takes an operand. When assembled, the resulting machine code will consist of a one byte operation code (opcode), followed by a one or two byte operand, if the instruction was assembled with an operand, hence 6502 machine instructions vary in length from one to three bytes. The operand will be stored in the 6502's customary little-endian format. The 65C816, the 16-bit CMOS version of the 6502, also supports 24 bit addressing, which addressing modes will result in instructions being assembled with three byte operands, also arranged in little-endian format.|$|E
5000|$|The car was {{launched}} as a two-door saloon/sedan in 1957. In 1958 a four-door version became available: a three-door station wagon and panel van versions were also introduced in 1958. The panel van {{used the same}} body as the station wagon but with the rear side windows replaced with metal windows. Applying the English <b>language</b> <b>statement</b> [...] "It is a car and a van" [...] Opel branded this version as the CarAVan, a name which {{would continue to be}} applied to Opel station wagons, albeit in later years without the eccentric use of upper case letters, for several decades. For this version, the standard three-leaf rear leaf springs were replaced with more robust four-leaf equivalents. The CarAVan was particularly popular with self-employed tradesman, combining most of the driving characteristics of a car with the load-carrying potential of a small commercial vehicle.|$|E
50|$|The MCS {{talked with}} an {{external}} co-processor, the DCP (Datacomm Control Processor). This was a 24-bit minicomputer with a conventional register architecture and hardware I/O capability to handle thousands of remote terminals. The DCP and the B6500 communicated by messages in memory, essentially packets in today's terms, and the MCS did the B6500-side processing of those messages. In {{the early years}} the DCP did have an assembler (Dacoma), an application program called DCPProgen written in B6500 ALGOL. Later the NDL (Network Definition Language) compiler generated the DCP code and NDF (network definition file). There was one ALGOL function for each kind of DCP instruction, and if you called that function then the corresponding DCP instruction bits would be emitted to the output. A DCP program was an ALGOL program comprising nothing but {{a long list of}} calls on these functions, one for each assembly <b>language</b> <b>statement.</b> Essentially ALGOL acted like the macro pass of a macro assembler. The first pass was the ALGOL compiler; the second pass was running the resulting program (on the B6500) which would then emit the binary for the DCP.|$|E
50|$|The company {{develops}} {{software that}} converts natural <b>language</b> <b>statements</b> into a format {{that can be}} more easily processed by computer programs, a process called natural language processing.|$|R
50|$|Structural statements, which {{define the}} model. They consist of FORTRAN-like {{programming}} <b>language</b> <b>statements,</b> and functional blocks of program code (procedures) designed for repeat operations that frequently {{occur in a}} model definition.|$|R
50|$|Firebird has {{the same}} syntax in Data Modification <b>Language</b> <b>{{statement}}s</b> (DSQL); the statement may add at most one row. In stored procedures, triggers and execution blocks (PSQL) the aforementioned Oracle syntax is used.|$|R
40|$|From {{a formal}} {{semantic}} perspective, interpreting natural language utterances {{can be broken}} down into two tasks: (I) Constructing logical forms or semantic representations of the utterances and (II) Manipulating well-formed semantic representations. Assuming semantic representations are drawn from a formal language, the problem (I) of formalization must be addressed before reasoning (II) within a formal system can commence. In Discourse Representation Theory (DRT; Kamp and Reyle, 1993), the point is simply that a Discourse Representation Structure (DRS) must be associated with a natural <b>language</b> <b>statement</b> before one can speak of model-theoretic interpretations that lie behind the manipulations in (II), constituting the reason for bothering with (I). Experience has shown that picking out a formal semantic representation faithful to a natural <b>language</b> <b>statement</b> is extremely difficult, resulting in pressure to blur the distinction between (I) and (II). The interest in am...|$|E
40|$|Language) In English, some {{some stories}} in the Dhegiha <b>language.</b> (<b>Statement</b> of Responsibility) by James Owen Dorsey. At head of title: Department of the Interior. U. S. Geographical and Geological Survey of the Rocky Mountain Region. J. W. Powell, in charge. The {{corrections}} and contributions by Frances La Flèche are especially noted by the collector...|$|E
40|$|Engineering {{large-scale}} software {{systems is}} {{fundamentally different from}} programming in the small. A programming <b>language</b> <b>statement</b> is inadequate as the unit of development. Instead, components must become {{the building blocks of}} software. Component-based development of software has become an area of intense research and commercial focus, resulting in several component interoperability models, such as CORBA, ActiveX, and JavaBeans. These models have the potential t...|$|E
50|$|Although our {{original}} {{intention was to}} ascertain under which conditions detailed flowcharts were most helpful, our repeated negative results have led us to a more skeptical opinion of the utility of detailed flowcharts under modern programming conditions. We repeatedly selected problems and tried to create test conditions which would favor the flowchart groups, but found {{no statistically significant differences}} between the flowchart and non-flowchart groups. In some cases the mean scores for the non-flowchart groups even surpassed the means for the flowchart groups. We conjecture that detailed flowcharts are merely a redundant presentation of the information contained in the programming <b>language</b> <b>statements.</b> The flowcharts may even be at a disadvantage because they are not as complete (omitting declarations, statement labels, and input/output formats) and require many more pages than do the concise programming <b>language</b> <b>statements.</b>|$|R
40|$|This project {{examines}} concurrent dynamic memory-allocation. Dynamic memory-allocation {{occurs when}} a program requests storage other than for local variables on the stack. Dynamic memoryallocation and deallocation is made available via programming <b>language</b> <b>statements</b> such as new and delete, or via runtime routines such as malloc and free. Some programming languages provide garbag...|$|R
50|$|Refinement - It is {{the process}} of elaboration. A {{hierarchy}} is developed by decomposing a macroscopic statement of function in a step-wise fashion until programming <b>language</b> <b>statements</b> are reached. In each step, one or several instructions of a given program are decomposed into more detailed instructions. Abstraction and Refinement are complementary concepts.|$|R
30|$|NLIDBs are {{important}} tools since they allow users accessing {{information in a}} database by a query formulated in natural language (NL). The purpose of these systems is to facilitate the querying task to users by sparing them the burden of having to learn a DB query language. With a NLIDB, a user simply types a query in natural language, similarly as he/she would do when communicating with another person, and the interface interprets the query and translates it to a DB query <b>language</b> <b>statement,</b> which is submitted by the NLIDB to a DB management system {{to get the information}} requested.|$|E
30|$|The {{study was}} {{approved}} by The University of Melbourne Human Research Ethics Committee. All students enrolled in music performance at the conservatorium {{were invited to participate}} in the peak performance training program by email within the first month of the academic year. This email, containing the plain <b>language</b> <b>statement</b> and consent form, explained that the aim of the study was to improve our understanding of peak performance training for tertiary performing arts students in Australia. The second author was introduced as an internationally renowned expert in helping performers achieve peak performance, who would be delivering lectures before a residency at the university to conduct a week of master classes on essential skills for optimal performance. Students were instructed to complete the PSI online before the first lecture and immediately after the master class at a webpage connected to the second author’s business website. The PSI was administered as part a larger survey administered to all performing arts students at the faculty to assess their overall performance health and wellbeing. This survey obtained basic demographic information, degree of musculoskeletal pain and injury and non-musculoskeletal problems and their perception of interference on practice/rehearsal/performance quality, and included a MPA inventory and motivation and engagement scale. Students could participate in the coaching program without being involved in the research study. Hard copies of the plain <b>language</b> <b>statement</b> and consent form were handed out and returned by 31 participants during the first lecture.|$|E
30|$|In a first activity, {{the design}} team will prepare a {{competency}} profile using a competency editor. The TELOS competency editor presented on Figure  9 is one solution {{that provides a}} natural <b>language</b> <b>statement</b> of the competencies, but more important it provides their underlying structure (K, S, P). Simpler solutions exist such as an outline/tree editor that is available in any text editor, {{but it would have}} to be extended to provide the structural parts of a competency on which competency comparison relations can be computed. One could also use a simple taxonomy of concepts instead of a complete OWL ontology as we have done in the examples here.|$|E
40|$|This {{invention}} is a robot {{control system}} based on a high level language implementing a spatial operator algebra. There are two high level languages included within the system. At the highest level, applications programs can be written in a robot-oriented applications language including broad operators such as MOVE and GRASP. The robot-oriented applications <b>language</b> <b>statements</b> are translated into statements in the spatial operator algebra language. Programming can also take place using the spatial operator algebra <b>language.</b> The <b>statements</b> in the spatial operator algebra language from either source are then translated into machine <b>language</b> <b>statements</b> for execution by a digital control computer. The system also includes the capability of executing the control code sequences in a simulation mode before actual execution to assure proper action at execution time. The robot's environment is checked {{as part of the}} process and dynamic reconfiguration is also possible. The languages and system allow the programming and control of multiple arms and the use of inward/outward spatial recursions in which every computational step can be related to a transformation from one point in the mechanical robot to another point to name two major advantages...|$|R
30|$|One skill {{considered}} {{necessary in}} this field {{is the ability to}} transform natural <b>language</b> <b>statements</b> to abstract conceptual structures that adhere to particular syntactic structures specified in a modeling language (Frederiks & van der Weide, 2006). One prerequisite for this ability {{is to be able to}} determine whether a given model is syntactically correct (Overhage, Birkmeier, & Schlauderer, 2012).|$|R
50|$|Users {{would sit}} at a {{terminal}} and type in programming <b>language</b> <b>statements.</b> The statements could either be entered into the system's command interpreter directly, or entered into a text editor, saved to a file, and loaded into the command interpreter from the file. Errors in source code were reported to the user immediately after the line was typed.|$|R
