38|313|Public
25|$|Sentinel node may simplify certain <b>list</b> <b>operations,</b> by {{ensuring}} that the next or previous nodes exist for every element, and that even empty lists {{have at least one}} node. One may also use a sentinel node {{at the end of the}} list, with an appropriate data field, to eliminate some end-of-list tests. For example, when scanning the list looking for a node with a given value x, setting the sentinel's data field to x makes it unnecessary to test for end-of-list inside the loop. Another example is the merging two sorted lists: if their sentinels have data fields set to +∞, the choice of the next output node does not need special handling for empty lists.|$|E
2500|$|Using {{this idea}} the basic <b>list</b> <b>operations</b> {{can be defined}} like this: ...|$|E
2500|$|Many of {{the special}} cases of linked <b>list</b> <b>operations</b> can be {{eliminated}} by including a dummy element {{at the front of}} the list. [...] This ensures that there are no special cases for the beginning of the list and renders both insertBeginning (...) and removeBeginning (...) unnecessary. In this case, the first useful data in the list will be found at list.firstNode.next.|$|E
50|$|A Turbo Filter-Dryer {{is another}} class of filter dryer which also {{incorporates}} the <b>listed</b> <b>operations,</b> but {{works on a}} different set of filtration principle.|$|R
50|$|In {{the method}} known as {{separate}} chaining, each bucket is independent, and has {{some sort of}} list of entries with the same index. The time for hash table operations {{is the time to}} find the bucket (which is constant) plus the time for the <b>list</b> <b>operation.</b>|$|R
50|$|See Character and op {{codes for}} a <b>list</b> of <b>operations.</b>|$|R
5000|$|Using {{this idea}} the basic <b>list</b> <b>operations</b> {{can be defined}} like this: ...|$|E
5000|$|This {{method of}} {{implementing}} indexing is detailed in Section 3.4 Linear <b>List</b> <b>Operations</b> in [...] "A skip list cookbook" [...] by William Pugh.|$|E
5000|$|Many of {{the special}} cases of linked <b>list</b> <b>operations</b> can be {{eliminated}} by including a dummy element {{at the front of}} the list. This ensures that there are no special cases for the beginning of the list and renders both [...] and [...] unnecessary. In this case, the first useful data in the list will be found at [...]|$|E
5000|$|... #Caption: <b>List</b> of <b>operations</b> {{that are}} reverse computable and their costs.|$|R
50|$|Here ++ {{denotes the}} <b>list</b> {{concatenation}} <b>operation,</b> and L and M are lists.|$|R
5000|$|Below is a <b>list</b> of <b>operations</b> that do {{not need}} to be certified: ...|$|R
50|$|Sentinel node may simplify certain <b>list</b> <b>operations,</b> by {{ensuring}} that the next or previous nodes exist for every element, and that even empty lists {{have at least one}} node. One may also use a sentinel node {{at the end of the}} list, with an appropriate data field, to eliminate some end-of-list tests. For example, when scanning the list looking for a node with a given value x, setting the sentinel's data field to x makes it unnecessary to test for end-of-list inside the loop. Another example is the merging two sorted lists: if their sentinels have data fields set to +∞, the choice of the next output node does not need special handling for empty lists.|$|E
5000|$|Many {{programming}} languages {{provide support}} for list data types, and have special syntax and semantics for lists and <b>list</b> <b>operations.</b> A list can often be constructed by writing the items in sequence, separated by commas, semicolons, or spaces, within a pair of delimiters such as parentheses ' (...) ', brackets '', braces '{}', or angle brackets '<>'. Some languages may allow list types to be indexed or sliced like array types, {{in which case the}} data type is more accurately described as an array. In object-oriented programming languages, lists are usually provided as instances of subclasses of a generic [...] "list" [...] class, and traversed via separate iterators. List data types are often implemented using array data structures or linked lists of some sort, but other data structures may be more appropriate for some applications. In some contexts, such as in Lisp programming, the term list may refer specifically to a linked list rather than an array.|$|E
40|$|The list is a {{fundamental}} data structure. It stores a linearly ordered collection of elements and allows access only {{to the front and}} rear elements of the list. Catenation can be applied to lists, unifying the rear of one list with the front of another. Absent other requirements, the basic <b>list</b> <b>operations,</b> including catenation, have straightforward implementations. If the list has certain secondary properties, however, the operations, particularly catenation, become more difficult. Non-destructive lists, for example, support side-effect-free <b>list</b> <b>operations</b> and are fundamental in high-level programming languages such as LISP, ML, and Scheme. Actual implementations of non-destructive lists usually apply simple copying methods directly to the lists or to trees representing the lists. These copying methods have high space and time overhead, however. Persistent data structures allow operations on old versions, and therefore techniques for designing persistent data structures might be use [...] ...|$|E
5000|$|Filtering: {{different}} views {{can be combined}} to create filters narrowing down <b>lists</b> of memory <b>operations.</b> Using filtering {{it is possible to}} create complex queries to <b>list</b> only memory <b>operations</b> of interest.|$|R
5000|$|Here is {{an example}} based on reMorse or THRAT: Select Next <b>Operation</b> in <b>list</b> Perform <b>Operation</b> ...|$|R
50|$|FoodCycle {{operates}} from London, England, but has operations {{throughout the}} United Kingdom (see <b>list</b> of <b>operations</b> below).|$|R
40|$|This paper {{introduces}} a new data structure, the VList, that is compact, thread safe and significantly faster to use than Linked Lists {{for nearly all}} <b>list</b> <b>operations.</b> Space usage can be reduced by 50 % to 90 % and in typical <b>list</b> <b>operations</b> speed improved by factors ranging from 4 to 20 or more. Some important operations such as indexing and length are typically changed from O(N) to O(1) and O(lgN) respectively. A language interpreter Visp, using a dialect of Common Lisp, has been implemented using VLists and the benchmark comparison with OCAML reported. It is also shown how to adapt the structure to create variable length arrays, persistent deques and functional hash tables. The VArray requires no resize copying and has an average O(1) random access time. Comparisons are made with previous resizable one dimensional arrays, Hash Array Trees (HAT) Sitarski [1996], and Brodnik, Carlsson, Demaine, Munro, and Sedgewick [1999...|$|E
40|$|AbstractA finite-time computable {{function}} is a partial function from Σω to Σω whose value is constructed by applying finite number of <b>list</b> <b>operations</b> ‘cons’ and ‘head’ to the argument. A finite-time computability preserving conversion α:X→Y for X,Y⊂Σω is a bijection which preserves finite-time computability. We show {{that all the}} finite-time computability preserving conversions with the domain Σω are extended sliding block functions...|$|E
40|$|We give an {{operational}} semantics for the synchronisation mechanisms of πDemos, a small process-oriented discrete event simulation language based upon Simula and Demos. The operational semantics gives a clear, concise and precise meaning to πDemos programs {{and have been}} extended to full Demos. The paper includes applications of the semantics as an implementation blueprint and in verifying the consistency of event <b>list</b> <b>operations...</b>|$|E
50|$|The <b>list</b> of <b>operations</b> shows a world-wide {{commitment}} {{since it}} ranges from Afghanistan to Africa and the Balkans.|$|R
40|$|The Invertible Bloom Lookup Tables (IBLT) is a data {{structure}} which supports insertion, deletion, retrieval and <b>listing</b> <b>operations</b> of the key-value pair. The IBLT {{can be used}} to realize efficient set reconciliation for database synchronization. The most notable feature of the IBLT is the complete <b>listing</b> <b>operation</b> of the key-value pairs based on the algorithm similar to the peeling algorithm for low-density generator-matrix (LDGM) codes. In this paper, we will present a stopping set (SS) analysis for the IBLT which reveals finite length behaviors of the listing failure probability. The key of the analysis is enumeration of the number of stopping matrices of given size. We derived a novel recursive formula useful for computationally efficient enumeration. An upper bound on the listing failure probability based on the union bound accurately captures the error floor behaviors. It will be shown that, in the error floor region, the dominant SS have size 2. We propose a simple modification on hash functions, which are called SS avoiding hash functions, for preventing occurrences of the SS of size 2. Comment: 5 pages, Submitted to ISIT 201...|$|R
5000|$|RapidShare - Reforms in {{take down}} {{procedures}} by in 2011 resulted them in them being {{removed from the}} <b>list.</b> Ceased <b>operations</b> in 2015.|$|R
40|$|Linked {{lists are}} an {{important}} component of the computer science curriculum. JVALL is a software package that provides an animation of linked <b>list</b> <b>operations</b> that is fully compatible with the Java LinkedList class. The animations are driven by a client program that can be either an applet or standalone application. It provides an effective way for students to learn, experiment with, and debug linked list based classes. ...|$|E
40|$|Since its {{inception}} Functional Programming, J. McCarthy, has almost universally used the Linked List as the underpinning data structure. This paper introduces a new data structure, the VList, that is compact, thread safe and significantly faster to use than Linked Lists {{for nearly all}} <b>list</b> <b>operations.</b> Space usage can be reduced by 50 % to 90 % and in typical <b>list</b> <b>operations</b> speed improved by factors ranging from 4 to 20 or more. Some important operations such as indexing and length are typically changed from O(N) to O(1) and O(lgN) respectively. A language interpreter Visp, using a dialect of Common Lisp, has been implemented using VLists and the benchmark comparison with OCAML reported. It is also shown how to adapt the structure to create variable length arrays, persistent deques and functional hash tables. The VArray requires no resize copying and has an average O(1) random access time. Comparisons are made with previous resizable one dimensional arrays, Hash Array Trees (HAT) Sitarski [1996], and Brodnik, Carlsson, Demaine, Munro, and Sedgewick [1999]...|$|E
40|$|The list is a {{fundamental}} data structure. It stores a linearly ordered collection of elements and allows access only {{to the front and}} rear elements of the list. Catenation can be applied to lists, unifying the rear of one list with the front of another. Absent other requirements, the basic <b>list</b> <b>operations,</b> including catenation, have straightforward implementations. If the list has certain secondary properties, however, the operations, particularly catenation, become more difficult. Non-destructive list...|$|E
40|$|This memo {{provides}} {{information for the}} Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2000). All Rights Reserved. RPS Security [2] requires certain RPSL [1] objects in the IRR to be hierarchically delegated. The set of objects {{that are at the}} root of this hierarchy needs to be created and digitally signed by IANA. This paper presents these seed objects and <b>lists</b> <b>operations</b> required from IANA...|$|R
50|$|Each IMP is {{followed}} by one of several operations defined for that IMP. See the Whitespace Tutorial for the <b>list</b> of <b>operations</b> supported in Whitespace.|$|R
50|$|After {{more than}} thirty-four years of service, Anderson retired on December 21, 1921. He became a brigadier general on the retired <b>list</b> by <b>operation</b> of 1930.|$|R
40|$|Reprinted from Communications of the ACM 1965 ""A set of subroutines is discussed, {{which is}} {{designed}} to aid in the programming of computations on indexed lists of numbers using machine language or a symbolic assembly system. The most commonly performed <b>list</b> <b>operations</b> are outlined, and logically arranged into five groups. As an example, the computation of power spectral density from the autocovariance function is discusse d for a class of EEG signals. " - from page 32...|$|E
40|$|We {{describe}} data parallel <b>list</b> <b>operations</b> that exploit pair {{structure on}} lists and an algebra that relates them. We illustrate {{their use in}} applications such as FFTs, sorting, and dynamic network design, and show that optimal algorithms can often be derived. The operations have a natural implementation on hypercubes and related topologies, and also a geometric implementation as dynamic networks. Equations from the algebra can be used a transformation rules, so that software or hardware development {{can be done in}} a calculational way...|$|E
40|$|This {{paper is}} {{concerned}} with design, implementation and verification of persistent purely functional data structures which are motivated by the representation of natural numbers using positional number systems. A new implementation of random-access list based on redundant segmented binary numbers is described. It uses 4 digits and an invariant which guarantees constant worst-case bounds for cons, head, and tail <b>list</b> <b>operations</b> as well as logarithmic time for lookup and update. The relationship of random-access list with positional number system is formalized and benefits of this analogy are demonstrated...|$|E
50|$|In 1979, Ayalon was {{appointed}} commander of Shayetet 13, and {{was once again}} decorated - this time for carrying out a long <b>list</b> of <b>operations</b> without casualties.|$|R
5000|$|Here, [...] {{denotes the}} empty list, [...] the <b>list</b> {{concatenation}} <b>operation,</b> and [...] denotes a list conditionally holding a value, , if the condition [...] holds (evaluates to [...] ).|$|R
40|$|This article {{analyzes}} MAC {{programs in}} five States and finds considerable variation between these {{programs and the}} FUL program in both size and pricing aggressiveness. We conclude that expansion of existing MAC programs and creation of new ones could contribute to cost containment efforts nationwide. Options for States seeking to optimize their efforts include focusing on pricing for drugs with high sales volumes, ensuring that MAC lists include prices for all forms and dosages of listed drug entities, and collaborating with other States or the Federal Government on MAC <b>list</b> <b>operation...</b>|$|R
