52|150|Public
50|$|Design Gateway: Platform for <b>logical</b> <b>circuit</b> {{design and}} {{verification}} of single and multi-board system-level electronic designs.|$|E
50|$|Virtual circuit - Sometimes {{called a}} <b>logical</b> <b>circuit,</b> is a path between {{two or more}} points {{that seems like a}} fixed {{physical}} path, but actually is one path out of many possible physical paths that can be arranged. A permanent virtual circuit(PVC) is a virtual circuit that provides a guaranteed connection between two or more points when needed without having to reserve or commit to a specific physical path in advance.|$|E
50|$|It {{supports}} {{multiple levels}} of granular Quality of Service per port, per <b>logical</b> <b>circuit</b> (DLCI, VC/VP, VLAN), and per channel (to DS0) for traffic prioritization. These comprehensive QoS functions include classification, rate limiting, shaping, weighted round-robin scheduling, strict priority queuing, weighted random early detection, random {{early detection and}} packet marking. For network convergence applications, Layer 2 CoS can be mapped to Layer 3 CoS on a per DLCI, per VP/VC, or per-VLAN basis.|$|E
5000|$|<b>Logical</b> <b>circuits</b> Research {{laboratory}} (Faculty of Electrical Engineering) ...|$|R
25|$|Boolean circuit, a {{mathematical}} model for digital <b>logical</b> <b>circuits.</b>|$|R
50|$|Kiselev V., Shalyto A. Study of Transidents in One-Contour <b>Logical</b> <b>Circuits</b> // Journal of Computer and Systems Sciences International. 1999. Vol. 38. No. 5, pp. 693-697.|$|R
5000|$|It is {{possible}} to create a <b>logical</b> <b>circuit</b> using multiple full adders to add N-bit numbers. Each full adder inputs a Cin, which is the Cout of the previous adder. This kind of adder is called a ripple-carry adder, since each carry bit [...] "ripples" [...] to the next full adder. Note that the first (and only the first) full adder may {{be replaced by a}} half adder (under the assumption that Cin = 0).|$|E
5000|$|Like NAND gates, NOR gates are {{so-called}} [...] "universal gates" [...] {{that can}} be combined to form {{any other kind of}} logic gate. For example, the first embedded system, Apollo Guidance Computer, was built exclusively from NOR gates, about 5,600 in total for the later versions. Today, integrated circuits are not constructed exclusively from a single type of gate. Instead, EDA tools are used to convert the description of a <b>logical</b> <b>circuit</b> to a netlist of complex gates (standard cells) or transistors (full custom approach).|$|E
5000|$|On 19 February 1946 Turing {{presented}} a detailed {{paper to the}} National Physical Laboratory (NPL) Executive Committee, giving the first reasonably complete design of a stored-program computer. However, because of the strict and long-lasting secrecy around the Bletchley Park work, he was prohibited (because of the Official Secrets Act) from explaining that he knew that his ideas could be implemented in an electronic device [...] The better-known EDVAC design presented in the First Draft of a Report on the EDVAC (dated June 30, 1945), by John von Neumann, who knew of Turing's theoretical work, received much publicity, despite its incomplete nature and questionable lack of attribution {{of the sources of}} some of the ideas. Turing's report on the ACE was written in late 1945 and included detailed <b>logical</b> <b>circuit</b> diagrams and a cost estimate of £11,200. He felt that speed and size of memory were crucial and he proposed a high-speed memory of what would today be called 25 kilobytes, accessed at a speed of 1 MHz [...] The ACE implemented subroutine calls, whereas the EDVAC did not, and what also set the ACE apart from the EDVAC was the use of Abbreviated Computer Instructions, an early form of programming language. Initially, it was planned that Tommy Flowers, the engineer at the Post Office Research Station at Dollis Hill in north London, who had been responsible for building the Colossus computers should build the ACE, but because of the secrecy around his wartime achievements and the pressure of post-war work, this was not possible.|$|E
40|$|It {{has been}} {{observed}} through experiments and SPICE simulations that <b>logical</b> <b>circuits</b> based upon Chua's circuit exhibit complex dynamical behavior. This behavior {{can be used to}} design analogs of more complex logic families and some properties can be exploited for electronics applications. Some of these circuits have been modeled as systems of ordinary differential equations. However, as the number of components in newer circuits increases so does the complexity. This renders continuous dynamical systems models impractical and necessitates new modeling techniques. In recent years some discrete dynamical models have been developed using various simplifying assumptions. To create a robust modeling framework for chaotic <b>logical</b> <b>circuits,</b> we developed both deterministic and stochastic discrete dynamical models, which exploit the natural recurrence behavior, for two chaotic NOR gates and a chaotic set/reset flip-flop (RSFF). This work presents a complete applied mathematical investigation of <b>logical</b> <b>circuits.</b> Experiments on our own designs of the above circuits are modeled and the models are rigorously analyzed and simulated showing surprisingly close qualitative agreement with the experiments. Furthermore, the models are designed to accommodate dynamics of similarly designed circuits. This will allow researchers to develop ever more complex chaotic <b>logical</b> <b>circuits</b> with a simple modeling framework. Comment: 19 pages, 14 figures, 2 table...|$|R
40|$|Abstract — In {{the world}} of {{computation}} and processors the power dissipation is main problem that will reduce {{the performance of the}} processor. In the processor continuous switching in the <b>logical</b> <b>circuits</b> cause heat dissipation in processor that will fetch more power from the supply side and this problem will cause reduction of the optimized performance of the microprocessor. In this research paper we are trying to present a new kind of logical algorithm by which we can reduce the power dissipation by reducing the switching of transistors present or use in various <b>logical</b> <b>circuits...</b>|$|R
50|$|In <b>logical</b> <b>circuits,</b> {{a simple}} adder {{can be made}} with an XOR gate to add the numbers, and a series of AND, OR and NOT gates to create the carry output.|$|R
40|$|Elements of the coincidence-CNOT (controlled-NOT) are {{experimentally}} demonstrated, {{which includes}} a bright photon source with good spatial mode quality; nonclassical interferometry; improved photon detection; and tomographic analysis. The <b>logical</b> <b>circuit</b> of the coincidence-CNOT is described in the paper...|$|E
40|$|A {{formula is}} {{suggested}} {{to evaluate the}} area of a <b>logical</b> <b>circuit</b> that is built in a given library of logical elements according to the BDD (Binary Decision Diagram) representation of a system of Boolean functions. The experimental results of synthesis of combinational logical circuits from the minimized BDD representations in the design library of custom CMOS VLSI circuits are described. </p...|$|E
40|$|Abstract—The LinearDD system, {{which first}} {{permitted}} in logical design {{the representation of}} a <b>logical</b> <b>circuit</b> (combination circuit or a memory circuit) as two- and three-dimensional linear decision diagrams, is described. It is compatible with standard data formats (EDIF, ISCAS 85, etc.) and designing tools, such as hardware description languages (HDL). This system is extended to circuit designing by nanotechnologies. 1...|$|E
5000|$|Approximate adders, {{multipliers}} {{and other}} <b>logical</b> <b>circuits</b> can reduce hardware overhead. For example, an approximate multi-bit adder can ignore the carry chain and thus, allow all its sub-adders to perform addition operation in parallel.|$|R
40|$|We {{prove that}} in a {{two-dimensional}} Sandpile automaton, embedded in a regular infinite planar cellular space, {{it is impossible to}} cross information, if the bit of information is the presence (or absence) of an avalanche. This proves {{that it is impossible to}} embed arbitrary <b>logical</b> <b>circuits</b> in a Sandpile through quiescent configurations. Our result applies also for the non-planar neighborhood of Moore. Nevertheless, we also show that it is possible to compute <b>logical</b> <b>circuits</b> with a two-dimensional Sandpile, if a neighborhood of radius two is used in Z(2); crossing information becomes possible in that case, and we conclude that for this neighborhood the Sandpde is P-complete and Turing universal...|$|R
40|$|In this paper, {{first we}} present a new {{explanation}} for the relation between <b>logical</b> <b>circuits</b> and artificial neural networks, <b>logical</b> <b>circuits</b> and fuzzy logic, and artificial neural networks and fuzzy inference systems. Then, based on these results, we propose a new neuro-fuzzy computing system which can effectively be implemented on the memristor-crossbar structure. One important feature of the proposed system is that its hardware can directly be trained using the Hebbian learning rule and without the need to any optimization. The system also {{has a very good}} capability to deal with huge number of input-out training data without facing problems like overtraining. Comment: 16 pages, 11 images, submitted to IEEE Trans. on Fuzzy system...|$|R
40|$|Abstract: Different methods {{adopted to}} study the working space of robot other than the {{traditional}} software methods, used block diagram in control theory to describe the transfer function of the kinematical chain of robot based on decomposition, digital and <b>logical</b> <b>circuit</b> of electronic technology with the foregoing result, data acquisition of dexterous working space and singular working space can be easily found then...|$|E
40|$|Abstract. The {{contribution}} {{deals with}} decomposition of logical {{systems for the}} purpose of solving analysis, synthesis and diagnostics tasks. The system can be specified by its structure or by algebraic expressions of its function. Particular attention is paid to propose algorithms for ordering of components of algebraic expression, decomposition of algebraic expression into substrings, and composition of modularly-organized <b>logical</b> <b>circuit</b> from those substrings. Also a way for the determination of identical and isomorphic modules of de/composed circuits is presented...|$|E
40|$|Universite de Montreal Departement dInformatique et de Recherche Operationnelle email jeroenIROUMontrealCA This paper {{discusses}} a cryptographic {{protocol to}} evaluate an andgate such that a party can keep {{his or her}} input bit secret from the other party Such a protocol is of interest	 {{because it can be}} generalized to any <b>logical</b> <b>circuit</b> for any number of participants A formal statement of this generalization reads as follows n participants want to compute together a function fx x...|$|E
40|$|Abstract: The paper {{presents}} {{an application of}} feed-forward neural networks: the simulation of combinational <b>logical</b> <b>circuits</b> (CLC). In the first part a presentation of main problems of CLC design is displayed, followed, {{in the second part}} by an example of simulating such circuits by artificial neural networks. 1...|$|R
40|$|The paper {{discusses}} {{two methods}} {{to evaluate the}} signal reliability of the output of <b>logical</b> <b>circuits.</b> It is known that faults present in a circuit will not always cause {{the output of the}} circuit to be incorrect. The first method evaluates the contribution of each fault to the reliability of the circuit and requires the enumeration of the behavior of each fault in the entire fault set. The use of McCluskey and Clegg's characterization of faulty networks by evaluating the functional equivalence classes of the network is a way {{to reduce the amount of}} computation involved. The second method uses a probabilistic model of <b>logical</b> <b>circuits</b> and consists of straightforward operations which can easily be automated. The method also yields the signal reliability and has the capability of very easily specifying the individual fault probabilities of all the circuit lines independently...|$|R
40|$|The {{object of}} my thesis is the {{realization}} of grammatical evolution in the Java programming language for solving problems of approximation of functions and synthesis of <b>logical</b> <b>circuits.</b> The application is practical used for testing and gathering data in context of using different purpose function and parallel grammatical evolution. The data are analyzed and evaluated...|$|R
40|$|Recently, thermal-aware {{digital circuit}} design in {{advanced}} technologies is great challenges to realize high-speed and robust microprocessors. In this paper, we explore temperature gradient alleviating method for arithmetic units. Aiming at alleviating temperature gradients at <b>logical</b> <b>circuit</b> design level, {{we try to}} flatten out a power density by applying delay-balancing technique for equal-delay circuits. Our proposal is evaluated in fine grain thermal simulation. Simulation results show the strong dependency between placement and temperature gradients on arithmetic units...|$|E
40|$|Quantum {{computers}} {{are poised to}} radically outperform their classical counterparts by manipulating coherent quantum systems. A realistic quantum computer will experience errors due {{to the environment and}} imperfect control. When these errors are even partially coherent, they present a major obstacle to achieving robust computation. Here, we propose a method for introducing independent random single-qubit gates into the <b>logical</b> <b>circuit</b> {{in such a way that}} the effective <b>logical</b> <b>circuit</b> remains unchanged. We prove that this randomization tailors the noise into stochastic Pauli errors, leading to dramatic reductions in worst-case and cumulative error rates, while introducing little or no experimental overhead. Moreover we prove that our technique is robust to variation in the errors over the gate sets and numerically illustrate the dramatic reductions in worst-case error that are achievable. Given such tailored noise, gates with significantly lower fidelity are sufficient to achieve fault-tolerant quantum computation, and, importantly, the worst case error rate of the tailored noise can be directly and efficiently measured through randomized benchmarking experiments. Remarkably, our method enables the realization of fault-tolerant quantum computation under the error rates observed in recent experiments. Comment: 7 + 6 pages, comments welcom...|$|E
40|$|An {{endeavor}} {{has made}} {{to develop an}} application software tool called “Logic Circuit Diagram Designer”. Logic Circuit Diagram Designer is a learning tool for <b>Logical</b> <b>Circuit</b> Designing and simplifying Boolean expression. This paper explains algorithm and methodology for transforming Boolean Expression into Logic Circuit diagram and transforming Logic circuit diagram into Boolean Expression. The Karnaugh-map technique is used to simplify the Boolean Expression. The versatile software Logic Circuit Diagram Designer has developed using C# language in Microsoft Visual Studio. Net 200...|$|E
30|$|Different {{thresholds}} {{are applied}} to each variable node according to its connectivity. In addition, prematurely deactivated variable nodes are reactivated by dynamically increasing threshold values. The threshold increasing condition is checked with a simple estimator based on <b>logical</b> <b>circuits.</b> For the check nodes, the SC method is modified to make it useful for reducing check node calculations.|$|R
40|$|Quantum {{computing}} algorithms can be conveniently {{expressed in}} a format of a quantum <b>logical</b> <b>circuits.</b> Such circuits consist of sequential coupled operations, termed ''quantum gates'', or quantum analogs of bits called qubits. We review a recently proposed method [1] for constructing general ''quantum gates'' operating on an qubits, as composed of a sequence of generic elementary ''gates''...|$|R
40|$|The {{development}} of a two dimensional data processing system is reported that extracts data from optical images by performing multiple logical operations simultaneously. A two dimensional <b>logical</b> <b>circuits</b> is described that contains a liquid crystal negation element and an OR-ing element. The negation element performs 20, 000 negations simultaneously, and the OR does 20, 000 OR operations simultaneously...|$|R
40|$|Abstract Automatic {{printed circuit}} board (PCB) layout {{generation}} is currently achieved {{through the use of}} several independent CAD systems. A register transfer level (RTL) based design automation system provides a viable alternative to existing methods of PCB layout generation. In this paper, the design and implementation of a software processor that generates a PCB layout using SSI/MSI components from the <b>logical</b> <b>circuit</b> provided by UAHPL, an RTL language, is presented. Keywords: {{printed circuit board}}s | computer aided design | logic circuits | programming language...|$|E
40|$|Submitted {{on behalf}} of EDA Publishing Association ([URL] audienceRecently, thermal-aware digital circuit design in {{advanced}} technologies is great challenges to realize high-speed and robust microprocessors. In this paper, we explore temperature gradient alleviating method for arithmetic units. Aiming at alleviating temperature gradients at <b>logical</b> <b>circuit</b> design level, we try to flatten out a power density by applying delay-balancing technique for equal-delay circuits. Our proposal is evaluated in fine grain thermal simulation. Simulation results show the strong dependency between placement and temperature gradients on arithmetic units...|$|E
40|$|Designing an {{asynchronous}} communication architecture in a VLSI system, {{we have the}} choice of either using a token ring or a bus. The token ring structure is often more reliable than the bus structure because of its point-to-point interconnection. In this paper, we study two alternative token ring arbitration protocols which we call Busy Ring Protocol (BRP) and Lazy Ring Protocol (LRP). Their performance evaluation shows that BRP allows better response time under higher request rates, while its major disadvantage is waste of activity, and hence power, if the request trac is relatively low. We describe the design of speed-independent control circuits for these two ring protocols. The initial specication of the protocol made in a Petri net is rened to a Signal Transition Graph, which is further implemented into a <b>logical</b> <b>circuit</b> by recently developed methods. The <b>logical</b> <b>circuit</b> involves, as a standard component, a two-way mutual exclusion (ME) element. The arbiter designs have been veried at all levels, using dierent Petri net interpretations. The nal check has been performed using Cadence HSPICE simulation tool. We conclude {{with the idea of}} a " approach, combining the advantages of both BRP and LRP. Index terms: arbiters, asynchronous circuits, design process, mutual exclusion, Petri nets...|$|E
40|$|AbstractThis paper {{presents}} a linear time algorithm for approximating, {{in the sense}} below, the longest path length of a given directed acyclic graph (DAG), where each edge length is given as a normally distributed random variable. Let F(x) be the distribution function of the longest path length of the DAG. Our algorithm computes the mean and the variance of a normal distribution whose distribution function F˜(x) satisfies F˜(x) ⩽F(x) as long as F(x) ⩾a, given a constant a (1 / 2 ⩽a< 1). In other words, it computes an upper bound 1 −F˜(x) on the tail probability 1 −F(x), provided x⩾F− 1 (a). To evaluate {{the accuracy of the}} approximation of F(x) by F˜(x), we first conduct two experiments using a standard benchmark set ITC' 99 of <b>logical</b> <b>circuits,</b> since a typical application of the algorithm is the delay analysis of <b>logical</b> <b>circuits.</b> We also perform a worst case analysis to derive an upper bound on the difference F˜− 1 (a) −F− 1 (a) ...|$|R
40|$|This thesis {{deals with}} {{evolutionary}} {{design of the}} digital circuits performed by a cartesian genetic programing and optimization by a coevolution. Algorithm coevolves fitness predictors that are optimized for a population of candidate digital circuits. The thesis presents theoretical basis, especially genetic programming, coevolution in genetic programming, design of the digital circuits, and deals with possibilities of the utilization of the coevolution in the combinational circuit design. On {{the basis of this}} proposal, the application designing and optimizing <b>logical</b> <b>circuits</b> is implemented. Application functionality is verified in the five test tasks. The comparison between Cartesian genetic programming with and without coevolution is considered. Then <b>logical</b> <b>circuits</b> evolved using cartesian genetic programming with and without coevolution is compared with conventional design methods. Evolution using coevolution has reduced the number of evaluation of circuits during evolution in comparison with standard cartesian genetic programming without coevolution and in some cases is found solution with better parameters (i. e. less logical gates or less delay) ...|$|R
2500|$|The ENIAC was {{programmed}} using subroutines, nested loops, {{and indirect}} addressing for both data locations and jump destinations. [...] During her work programming the ENIAC, Kay McNulty {{is credited with}} {{the invention of the}} subroutine. [...] Her colleague, Jean Jennings, recalled when McNulty proposed the idea to solve the problem where the <b>logical</b> <b>circuits</b> did not have enough capacity to compute some trajectories. [...] The team collaborated on the implementation.|$|R
