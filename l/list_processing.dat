127|73|Public
25|$|Wang {{also had}} a line called Alliance, {{which was based on}} the high end OIS (140/145) {{hardware}} architecture. It had more powerful software compared to the OIS word processing and <b>list</b> <b>processing</b> packages. The system was Tempest certified, leading to global deployment in American embassies after the Iran hostage crisis. The most significant enhancement was in the indexing capabilities of the Alliance system; documents could be indexed by every word contained in them. The database product, Visual Memory, permitted every word in each field to be indexed. In addition to the advanced indexing features, the Alliance word processor was also substantially enhanced, even though the Z80 platform on which it ran forced it to remain as an 8-bit application in a 64KB workstation.|$|E
2500|$|Because of Lisp's early {{heritage}} in <b>list</b> <b>processing,</b> {{it has a}} wide array of higher-order functions relating to iteration over sequences. In many cases where an explicit loop would be needed in other languages (like a [...] loop in C) in Lisp the same task can be accomplished with a higher-order function. (The same is true of many functional programming languages.) ...|$|E
2500|$|Simon was {{a pioneer}} in the field of {{artificial}} intelligence, creating with Allen Newell the Logic Theory Machine (1956) and the General Problem Solver (GPS) (1957) programs. GPS may possibly be the first method developed for separating problem solving strategy from information about particular problems. Both programs were developed using the Information Processing Language (IPL) (1956) developed by Newell, Cliff Shaw, and Simon. Donald Knuth mentions the development of <b>list</b> <b>processing</b> in IPL, with the linked list originally called [...] "NSS memory" [...] for its inventors. In 1957, Simon predicted that computer chess would surpass human chess abilities within [...] "ten years" [...] when, in reality, that transition took about forty years.|$|E
5000|$|The {{following}} is a <b>list</b> of <b>processing</b> units manufactured by GlobeCore: ...|$|R
5000|$|In 1966, Heinz List {{established}} {{his own company}} to further develop the field of high-viscosity <b>processing.</b> Heinz <b>List</b> established the <b>LIST</b> Dry <b>Processing</b> Group based on the following: ...|$|R
50|$|This is a <b>list</b> of <b>processing</b> {{techniques}} that are employed numerous times throughout {{the construction of}} a modern electronic device; this list does not necessarily imply a specific order.|$|R
50|$|<b>List</b> <b>processing</b> : To {{implement}} Logic Theorist on a computer, {{the three}} researchers developed a programming language, IPL, which {{used the same}} form of symbolic <b>list</b> <b>processing</b> that would later {{form the basis of}} McCarthy's Lisp programming language, an important language still used by AI researchers.|$|E
5000|$|Interdata 5 (<b>list</b> <b>processing,</b> microcoded {{automatic}} I/O channel) ...|$|E
5000|$|PCI bus {{mastering}} {{for display}} <b>list</b> <b>processing</b> and video capture support ...|$|E
5000|$|... a {{powerful}} filtering system, {{so much so}} {{that it is possible to}} run a fully automated client-based electronic mailing <b>list</b> (including <b>processing</b> subscriptions, unsubscriptions and forwards to moderation) using solely Pegasus Mail; ...|$|R
30|$|While milk {{producer}} cooperatives in Finland {{represent the}} traditional cooperative organizational form, i.e., their organization {{conforms to the}} cooperative principles of equal treatment of members, equal voting rights, and unallocated capital (Nilsson et al. 2009), large meat cooperatives have adopted vertically integrated hybrid structures in which ownership and control rights are separated from patronage (Pyykkönen et al. 2012). The role of the meat cooperatives is exclusively to exercise ownership and control rights in the stock exchange <b>listed</b> <b>processing</b> and marketing company. We expected the members of meat cooperatives to value the price and capital benefits more highly than the members of dairy cooperatives (hypothesis 3).|$|R
5000|$|There is no {{standard}} {{definition of}} what constitutes a vision chip and thus the type of circuitry that may be performed. Below is a sample <b>list</b> of <b>processing</b> steps reported in vision chip designs, as reported in several books.: ...|$|R
50|$|IPL — The first <b>list</b> <b>processing</b> language. The best-known {{version was}} IPL-V.|$|E
50|$|An {{extension}} of CORC, the Cornell List Processor (CLP), was a <b>list</b> <b>processing</b> language used for simulation.|$|E
50|$|The ALGOL 68-R {{compiler}} {{was initially}} {{written in a}} local dialect of ALGOL 60 with extensions for address manipulation and <b>list</b> <b>processing.</b> The parser was written using J.M. Foster's Syntax Improving Device (SID) parser generator.|$|E
50|$|The <b>list</b> of packet <b>processing</b> {{applications}} {{is usually}} {{divided into two}} categories. The following are a few examples selected to illustrate the variety in use today.|$|R
50|$|It {{provides}} Lisp {{features such}} as <b>lists,</b> symbol <b>processing,</b> function mapping, anonymous functions (lambda expressions), s-expressions (excluding improper lists), and macros. It also provides the functions expected of a modern scripting language, including support for regular expressions, XML, Unicode (UTF-8), TCP/IP and UDP networking, matrix and array processing, advanced math, statistics and Bayesian statistical analysis, financial mathematics, and distributed computing support.|$|R
30|$|The dairy {{marketing}} cooperatives of {{this study}} represented the most traditional type of agricultural cooperative, in which the patron-owners are closely involved in the whole process from the supply of milk to processing and marketing of the end products. Members of dairy supply cooperatives included in the sample have a role of supplying and exercising ownership rights in the cooperative and indirectly in the central group company under whose brand name the products are collectively marketed. Members of the hybrid type of meat cooperatives are most distanced from the end markets. The role of the meat cooperatives is to exercise ownership and control rights in the stock exchange <b>listed</b> <b>processing</b> and marketing company. It is evident that heterogeneity in organizational structures {{is related to the}} valuation of benefits by farmers and how significant cooperative membership is to them. However, the causation could not be confirmed and is left for future studies. The perceived value of the cooperative to its members may affect their decisions as the owners to choose another organizational structure that better corresponds to their valuations.|$|R
50|$|SLIP is a <b>list</b> <b>processing</b> {{computer}} programming language, invented by Joseph Weizenbaum in the 1960s. The name SLIP stands for Symmetric LIst Processor. It was first implemented {{as an extension}} to the Fortran programming language, and later embedded into MAD and ALGOL.|$|E
50|$|The {{language}} includes features {{intended to}} help with programs that perform simple problem solving actions such as lists, dynamic memory allocation, data types, recursion, functions as arguments, generators, and cooperative multitasking. IPL invented the concept of <b>list</b> <b>processing,</b> albeit in an assembly-language style.|$|E
50|$|The Data Base Task Group (DBTG) was {{a working}} group founded in 1965 (initially named the <b>List</b> <b>Processing</b> Task Force and later renamed to DBTG in 1967) by the Cobol Committee, {{formerly}} Programming Language Committee, of the Conference of Data Systems Language (CODASYL). The DBTG was chaired by William Olle of RCA.|$|E
3000|$|... to {{evaluate}} its robustness; (2) the median estimation error Δ among all Nsuc successful estimations {{to evaluate}} its accuracy; (3) the median estimation time t over all Nrun runs to evaluate its efficiency. Note that the estimation time {{does not include}} pre-processing computation time (i.e., texture feature detection/matching, point sampling, etc), but it incorporates the codebook building time, which took < 1 s with the basic RANSAC and around two seconds with the probabilistic RANSAC using our parameter setting. The feature detectors <b>listed</b> by increasing <b>processing</b> time are Harris, FAST, SURF and SIFT. The point sampling approaches <b>listed</b> by increasing <b>processing</b> time are random, probabilistic and uniform samplings.|$|R
5000|$|The <b>list</b> of {{available}} <b>Processing</b> resources <b>lists</b> the available (built-in and user-supplied) macros, batch processing routines and scripts. PhotoShop-compatible plugins {{will appear in}} this list, ready for use, if their [...]8BF files {{have been placed in}} the PhotoPerfect directory.|$|R
5000|$|Mustache is {{described}} as a [...] "logic-less" [...] system because it lacks any explicit control flow statements, like if and else conditionals or for loops; however, both looping and conditional evaluation can be achieved using section tags <b>processing</b> <b>lists</b> and lambdas.|$|R
5000|$|Because of Lisp's early {{heritage}} in <b>list</b> <b>processing,</b> {{it has a}} wide array of higher-order functions relating to iteration over sequences. In many cases where an explicit loop would be needed in other languages (like a [...] loop in C) in Lisp the same task can be accomplished with a higher-order function. (The same is true of many functional programming languages.) ...|$|E
50|$|Gelernter {{received}} his Ph.D. at the University of Rochester in 1957. He implemented, with Nathaniel Rochester, a computer language for <b>list</b> <b>processing</b> within FORTRAN. The work {{for this was}} done with Carl Gerberich at IBM, to this end producing the Fortran <b>list</b> <b>processing</b> language (FLPL). His most ambitious project during his tenure at Stony Brook University was the SYNCHEM expert problem-solving system for the discovery of potential routes to the total synthesis of organic molecules through a self-guided intelligent search and application of its large knowledge base of graph transforms, rules and sophisticated heuristics representing generalized organic reactions organized around recognized functional groups. Prof. Gelernter died on May 28, 2015. His sons are geneticist and Yale professor Joel Gelernter and computer scientist and conservative social commentator David Gelernter, also a Yale professor. His daughter Judith is a research scientist in the Information Technology Laboratory at the National Institute of Standards and Technology.|$|E
50|$|CWIC (Compiler for Writing and Implementing Compilers) is {{the last}} known Schorre metacompiler. It was {{developed}} at Systems Development Corporation by Erwin Book, Dewey Val Schorre and Steven J. Sherman With the full power of (lisp 2) a <b>list</b> <b>processing</b> language optimizing algorithms could operate on syntax generated lists and trees before code generation. CWIC also had a symbol table built into the language.|$|E
50|$|Storm {{is but one}} {{of dozens}} of stream {{processing}} engines, for a more complete <b>list</b> see Stream <b>processing.</b> Twitter announced Heron on June 2, 2015 which is API compatible with Storm. There are other comparable streaming data engines such as Spark Streaming and Flink.|$|R
40|$|Abstract In {{this paper}} we {{consider}} three semi-online scheduling problems for jobs with release times on m identical parallel machines. The worst case performance ratiosoftheLS algorithm are analyzed. The objective {{function is to}} minimize the maximum completion time of all machines, i. e. the makespan. If the job list has a nondecreasing release times, then 2 − 1 m is the tight bound of the worst case performance ratio of the LS algorithm. If the job <b>list</b> has non-increasing <b>processing</b> times, we show that 2 − 1 2 m is an upper bound of the worst case performance ratio of the LS algorithm. Furthermore if the job list has non-decreasing release times and the job <b>list</b> has non-increasing <b>processing</b> times we prove that the LS algorithm has worst case performance ratio not greater than 3...|$|R
50|$|When {{the film}} {{workprint}} {{had been cut}} to a satisfactory state, it was then used to make an edit decision list (EDL). The negative cutter referred to this <b>list</b> while <b>processing</b> the negative, splitting the shots into rolls, which were then contact printed to produce the final film print or answer print. Today, production companies {{have the option of}} bypassing negative cutting altogether. With the advent of digital intermediate ("DI"), the physical negative does not necessarily need to be physically cut and hot spliced together; rather the negative is optically scanned into computer(s) and a cut list is conformed by a DI editor.|$|R
5000|$|It {{was created}} by Ray Ozzie during the early {{development}} of Lotus Notes. He borrowed the compiler and decompiler from the Lotus 1-2-3 spreadsheet, but unlike the spreadsheet language Formula Language was designed primarily for string and <b>list</b> <b>processing,</b> not numerical processing. It was originally a Functional programming language with unique text list-handling features inspired by Ray Ozzie's prior use of Icon and [...] Lisp.|$|E
5000|$|The word [...] "cons" [...] and {{expressions}} like [...] "to cons onto" [...] are {{also part of}} a more general functional programming jargon. Sometimes operators that have a similar purpose, especially in the context of <b>list</b> <b>processing,</b> are pronounced [...] "cons". (A good example is the :: operator in ML, Scala, F# and Elm or the : operator in Haskell, which adds an element to the beginning of a list.) ...|$|E
50|$|In 1965 CODASYL {{formed a}} <b>List</b> <b>Processing</b> Task Force. This group was {{chartered}} to develop COBOL language extensions for processing collections of records; the name arose because Charles Bachman's IDS system (which {{was the main}} technical input to the project) managed relationships between records using chains of pointers. In 1967 the group renamed itself the Data Base Task Group (DBTG), and its first report in January 1968 was entitled COBOL extensions to handle data bases.|$|E
40|$|This paper {{describes}} a font installation package written entirely in. It can parse Adobe Font Metric and Font Encoding files, and convert them into Property List and Virtual Property <b>List</b> files, for <b>processing</b> with pltotf and vptovf. Since {{it is written}} in, it is very customizable, and can deal with arbitrary font encodings, as well as mathematics fonts...|$|R
50|$|With {{the growth}} of the Internet, by 1998, the {{distribution}} of shareware by disk and CD-ROM was beginning to wane while order processing was booming, and with 13+ years of 100-hour work weeks taking their toll on Nelson and Kay Ford, they sold PsL to Digital River, Inc., a major (NYSE <b>listed)</b> online order <b>processing</b> company, and retired.|$|R
40|$|AbstractThe word {{identification}} span {{refers to}} the area of the visual field in which words can be identified during a single fixation. The {{purpose of the study was}} to estimate the vertical word identification span in a visual word search task, in which words were arranged in a vertical list. In addition, we studied the effect of list layout (orientation, length, and line spacing) on the speed of search and eye movements. The task of the observer was to identify a target word in a word list, where the other words were distracters. Threshold search time, that is, stimulus presentation time for correct identification at a probability level of 0. 79, was determined by using a multiple alternative staircase method. Eye movements were recorded simultaneously. The results showed that, in vertical lists, 4 – 5 words could be identified during a single fixation. Thus, the vertical word identification span was 4 – 5 character spaces, whereas according to previous studies the horizontal word identification span is about 10 character spaces, which corresponds to 1 – 2 words. There were fewer fixations and the saccade amplitudes were smaller for vertical than for horizontal lists of the same length. However, search times did not depend on list orientation. This was due to longer fixation times for vertical lists. Further, since average fixation duration for vertical lists was longer than for horizontal <b>lists,</b> <b>processing</b> time seems to depend on the number of items within the span...|$|R
