0|21|Public
5000|$|DJ Ralph ‘N’ JO - To The <b>Limit</b> (DJ <b>Sender</b> Remix) / 2005, F*** Me I'm Famous (France) ...|$|R
5000|$|... 1993 The Joy Fun Garden (Return to <b>Sender,</b> <b>limited</b> release) Allmusic review ...|$|R
30|$|Network area size {{represents}} the x and y {{dimensions of the}} network area. In the GPSR protocol, increasing the network area size yields an increment {{in the number of}} routing hops the data packet needs to use to reach the intended destination. In addition, increasing the network area size yields a decrease in the NWLB problem since the routing neighbor will be far from the <b>limit</b> of the <b>sender</b> node transmission range. Decreasing the network area size decreases the number of routing hops used to route the data packet to its destination and hence increases the average number of NWLB since the data packet will be routed to neighboring nodes closer to the <b>limit</b> of the <b>sender's</b> transmission range.|$|R
50|$|User-to-user {{flow control}} is only {{supported}} for established connections. Here, flow control {{is achieved by}} keeping a counter SENT_CNT on the sending side which is increased with every sent package. The receiving node counts the packages which were read by the receiving application. When this counter reaches the configurable number N, it informs the sender of this, which subtracts N from SENT_CNT. In case SENT_CNT reaches a certain <b>limit,</b> the <b>sender</b> stops sending packages until SENT_CNT falls under the threshold again.|$|R
50|$|In telecommunications, a {{plesiochronous}} {{system is}} one where {{different parts of the}} system are almost, but not quite, perfectly synchronised. According to ITU-T standards, a pair of signals are plesiochronous if their significant instants occur at nominally the same rate, with any variation in rate being constrained within specified <b>limits.</b> A <b>sender</b> and receiver operate plesiosynchronously if they operate at the same nominal frequency but may have a slight frequency mismatch, which leads to a drifting phase. The mismatch between the two systems' clocks is known as the plesiochronous difference.|$|R
40|$|Abstract. In this study, {{we propose}} a bandwidth-aware scaling {{mechanism}} for rate adaptive video streaming. This mechanism involves {{estimation of the}} capacity of the network dynamically by measuring bottleneck bandwidth and available bandwidth values. By taking the available bandwidth as an upper <b>limit,</b> the <b>sender</b> adjusts its output rate accordingly. While increasing the quality of the video, using a bandwidth estimator instead of probing prevents the congestion generated by the streaming application itself. The results of the bandwidth-aware algorithm are compared with that of a similar algorithm with no bandwidth-aware scaling and the improvement is demonstrated with measurements taken over WAN. ...|$|R
30|$|In addition, {{the problem}} of wrong {{notification}} of route failure arises because of channel contention. In IEEE 802.11 MAC protocol, {{when the number of}} attempts for medium access exceeds a specified <b>limit,</b> the <b>sender</b> assumes that the receiver is out of range and stops its transmission attempts. The MAC protocol notifies the upper layer that the path is unavailable, and the upper layer starts a route recovery procedure [15]. At this stage, TCP stops transmission, and throughput becomes zero during the route recovery process. Moreover, if the route recovery process takes longer than the RTO, then there will be unnecessary activation of TCP congestion control.|$|R
40|$|Abstract –TCP is a window-based {{flow and}} {{congestion}} control protocol {{that uses a}} sliding window mechanism to manage its data transmission. The purpose of this scheme is to guarantee that the sender adjusts its transmission rate to meet both sender and receiver needs. Thus, the TCP sender contains a variable denoted window determining the amount of packets it can send into the network before receiving an ACK. This variable changes dynamically over time to properly limit the connection’s sending rate. The sending rate of a TCP connection is regulated by two distinct mechanisms, the flow control and the congestion control. Although these mechanisms are similar, {{in the sense that}} both attempt to prevent the connection from sending at an excessive rate, they have specific purposes. Flow control is implemented to avoid that a TCP sender overflows the receiver’s buffer. Thus, the receiver advertises in every ACK transmitted a window <b>limit</b> to the <b>sender.</b> This window is named receiver advertised window (rwin) and changes over time depending on both the traffic conditions and the application speed in reading the receiver’s buffer. Therefore, the sender may not increase its window at any time beyond the value specified in rwin. In contrast to flow control, congestion control is concerned with the traffic inside the network. Its purpose is to prevent collapse inside the network when the traffic source (sender) is faster than the network in forwarding data. To this end, the TCP sender also uses a limiting window called congestion window (cwnd). Assuming that the receiver is not <b>limiting</b> the <b>sender,</b> cwnd defines the amount of data the sender may send into the network before an ACK is received. Considering flow control and congestion control, the <b>sender</b> faces two <b>limiting</b> factors for its window size, namely the rwin and the cwnd. To conform wit...|$|R
30|$|Position-based routing {{protocols}} always route the data packet to the neighboring node {{closest to the}} destination node. The sender node searches its list of neighbors for this node, but the selected next hop node may not be within the transmission range of the sender, although it is listed as a neighboring node. This is because the routing neighbor {{is close to the}} <b>limit</b> of the <b>sender's</b> transmission range with a high probability that the selected neighboring node may have left the sender's transmission range, even though it is still listed in the sender's list of neighbors. This situation is defined as a NWLB problem.|$|R
40|$|Economic {{remittances}} are {{money transfers}} worldwide from migrants {{to their country}} of origin. This study aimed to examine which significance the remittance has for the sender. How do the senders describe their experiences of remittances, what strategies {{are used in the}} process of remitting and how has the migrants’ social and economic situation in the host country been affected by remitting? The issues were answered through six semi-structured interviews with remitting migrants. The theoretical approach consisted of the concepts transnational social space, reciprocity and social exclusion. The findings were that remittances had great value to the senders with both negative and positive outcomes. Strategies formed to live up to expectations to remit were group wise, long-term and practical. Remittances had an impact on choices regarding recreational activities, housing and employment. Our conclusion is that remitting is an important act to maintain the bond to the country of origin, despite economic and social sacrifices. Being a participant in dual social worlds in which social and economic conditions differ shapes the experienced requirement to remitt.   Remittance cannot be seen as a sole factor for placing senders in social exclusion, though it can <b>limit</b> the <b>sender</b> economically and socially...|$|R
40|$|TCP is a window-based {{flow and}} {{congestion}} control protocol {{that uses a}} sliding window mechanism to manage its data transmission. The purpose of this scheme is to guarantee that the sender adjusts its transmission rate to meet both sender and receiver needs. Thus, the TCP sender contains a variable denoted window determining the amount of packets it can send into the network before receiving an ACK. This variable changes dynamically over time to properly limit the connection’s sending rate. The sending rate of a TCP connection is regulated by two distinct mechanisms, the flow control and the congestion control. Although these mechanisms are similar, {{in the sense that}} both attempt to prevent the connection from sending at an excessive rate, they have specific purposes. Flow control is implemented to avoid that a TCP sender overflows the receiver’s buffer. Thus, the receiver advertises in every ACK transmitted a window <b>limit</b> to the <b>sender.</b> This window is named receiver advertised window (rwin) and changes over time depending on both the traffic conditions and the application speed in reading the receiver’s buffer. Therefore, the sender may not increase its window at any time beyond the value specified in rwin. In contrast to flow control, congestion control is concerned with the traffic inside the network. Its purpose is to prevent collapse inside the network when the traffic source (sender) is faster than the network in forwarding data. To this end, the TCP sender also uses a limiting window called congestion window (cwnd). Assuming that the receiver is not <b>limiting</b> the <b>sender,</b> cwnd defines the amount of data the sender may send into the network before an ACK is received. Considering flow control and congestion control, the <b>sender</b> faces two <b>limiting</b> factors for its window size, namely the rwin and the cwnd. To conform with both control schemes, the TCP sender adjusts its window to the minimum between rwin and cwnd. In general, however, cwnd is considered the limiting factor of a TCP sender because the receiver’s buffer is mostly large enough not to constrain the sender’s transmission rate. TCP congestion control has been evolving over the years to detect congestion inside the network and promptly react to that by properly slowing down...|$|R
40|$|With {{the growth}} of high {{performance}} networking, a single host may have simultaneous connections that vary in bandwidth {{by as many as}} six orders of magnitude. We identify requirements for an automatically-tuning TCP to achieve maximum throughput across all connections simultaneously within the resource <b>limits</b> of the <b>sender.</b> Our auto-tuning TCP implementation makes use of several existing technologies and adds dynamically adjusting socket buffers to achieve maximum transfer rates on each connection without manual con guration. Our implementation involved slight modifications to a BSD-based socket interface and TCP stack. With these modifications, we achieved drastic improvements in performance over large bandwidth*delay paths compared to the default system configuration, and significant reductions in memory usage compared to hand-tuned connections, allowing servers to support at least twice as many simultaneous connections...|$|R
40|$|Reliable {{multicast}} transport protocols support dissemination {{communication and}} their throughputs are either <b>limited</b> by the <b>sender</b> or by intermediate nodes that consolidate acknowledgements and retransmissions. RMSP is a portable reliable multicast protocol that supports collaborative communication at the session-layer level and provides higher throughput by maintaining two transport connections per node {{irrespective of the}} number of nodes. However, the throughput only of RMSP may degrade if one or more nodes or the centralized connection manager that monitors them fails. In this report, we propose a fully distributed fault-tolerant protocol, DFT-RMSP, that detects and isolates faulty nodes and reinstates the multicast collaborative communications. We derive analytic expressions for throughput degradation and analyze its sensitivity to node-failure rates, network delay, and multicast group size. We show that DFT-RMSP provides less downtime and achieves graceful throughput degradation un [...] ...|$|R
40|$|With more {{applications}} {{moving to}} the cloud, cloud providers need to diagnose performance problems in a timely manner. Offline processing of logs is slow and inefficient, and instrumenting the end-host network stack would violate the tenants' rights to manage their own virtual machines (VMs). Instead, our Dapper system analyzes TCP performance in real time near the end-hosts (e. g., at the hypervisor, NIC, or top-of-rack switch). Dapper determines whether a connection is <b>limited</b> by the <b>sender</b> (e. g., a slow server competing for shared resources), the network (e. g., congestion), or the receiver (e. g., small receive buffer). Emerging edge devices now offer flexible packet processing at high speed on commodity hardware, {{making it possible to}} monitor TCP performance in the data plane, at line rate. We use P 4 to prototype Dapper and evaluate our design on real and synthetic traffic. To reduce the data-plane state requirements, we perform lightweight detection for all connections, followed by heavier-weight diagnosis just for the troubled connections...|$|R
40|$|Energy {{harvesting}} wireless {{sensor network}} nodes {{would not be able}} to operate without duty cycling. In TinyOS, duty cycling is supported through Low Power Listening or LPL. LPL is sender-centric: the longer the wakeup interval, the more power a receiver saves, at the cost of more energy per transmission for the sender. Due to the limitations of energy storage technologies, there is a <b>limit</b> to the <b>sender</b> wakeup interval which energy harvesting senders could support. Currently, the limit could be derived computationally or experimentally. Computational derivation is overly conservative, while manual experimentation is labour intensive. In this paper, we present a protocol which enables sensor nodes to determine the wakeup interval limit experimentally without human intervention or the aid of other nodes. Not only does the protocol allow for easier determination of the said limit, it also allows network nodes to adjust to environmental changes that nodes encounter while in deployment, such as capacitor ageing...|$|R
30|$|TCP-DAA [41] is a sender/receiver {{modification}} {{introduced by}} Oliveira and Braun. In TCP-DAA, the receiver reduces {{the number of}} ACKs {{by taking advantage of}} the cumulative property of TCP. TCP-DAA dictates changes to the sender as well as the receiver. In this approach, the receiver may combine up to four ACK packets when the wireless channel is in good condition and less for lossy channels. The limit of four packets is imposed by the <b>sender's</b> congestion window <b>limit</b> that is also fixed at four packets. The authors report that the low <b>limit</b> of the <b>sender's</b> cwnd is proper for minimizing collisions and more than enough for scenarios having up to 10 hops. The delay of ACK responses are performed in a dynamic manner based on packet loss event. When there is no packet loss, TCP-DAA delays ACKs until it receives more data packets up to four, but reduces the number to two in case of out-of-order packet delivery. These concepts lead this approach to outperform a regular TCP whenever the channel is able to provide higher bandwidth.|$|R
40|$|Active {{networking}} {{offers a}} change in the usual network paradigm: from passive carrier of bits to a more general computing engine. Active networking not only allows the network nodes to perform computations on the data but also allow their users to inject customized programs into the nodes of the network, that may modify, redirect or store the user data flowing through the network. In this thesis, we focus on the benefits of active networking with respect to a problem that is unlikely to disappear in the near future: network congestion. Rather than applying congestion reduction mechanisms generically and broadly, we discuss the mechanism that allows each application to specify how losses to its data should occur in a controlled fashion. Congestion is a prime candidate for active networking, since it is specifically an intra-network event and is potentially far removed from the application. Further, the time that is required for congestion notification information to propagate back to the <b>sender</b> <b>limits</b> the speed with which an application can selfregulate to reduce congestion. In this thesis, we propose a model for Active Congestion control, using active queu...|$|R
40|$|Payment systems {{play a very}} {{important}} role in ensuring the safe and efficient transfer of deposits and financial instruments. Consequently, the failure of these systems may have a destabilising impact. Business continuity plans have thus been developed to ensure their robustness. However, their smooth functioning is also contingent on the capacity of participants to submit their payment orders. The Banque de France, in its role of overseer of the French payment systems, conducted a study with a view to enhancing its understanding of the consequences and the impact of the technical default of a participant in such systems. This study, carried out using a simulator of the functioning of the Paris Net Settlement (PNS) large-value payment system, operated by the CRI (Centrale des Règlements Interbancaires), shows that the technical default of a participant in this system has negative consequences on the smooth running of the system. Indeed, a situation in which a major participant, {{in the wake of a}} technical incident, is unable to submit its payment orders in a normal fashion to its counterparties in PNS, could further exacerbate congestion in the system and result in almost 10 % of payments being rejected among non-defaulting participants. The consequences of a technical default could nevertheless be greatly reduced if the participants set their bilateral <b>sender</b> <b>limits</b> at a lower level than that currently observed and if they reacted rapidly to information indicating a technical default by reducing their bilateral limits with the defaulting participant (defaulter). ...|$|R
40|$|Abstract — TCP incast {{congestion}} {{which can}} introduce hun-dreds of milliseconds delay {{and up to}} 90 % throughput degra-dation, severely affecting application performance, has been a practical issue in high-bandwidth low-latency datacenter net-works. Despite continuous efforts, prior solutions have significant drawbacks. They either only support quite a <b>limited</b> number of <b>senders</b> (e. g., 40 - 60), which is not sufficient, or require non-trivial system modifications, which is impractical and not incrementally deployable. We present PAC, a simple yet very effective design to tame TCP incast congestion via Proactive ACK Control at the receiver. The key design principle behind PAC is that we treat ACK not only as the acknowledgement of received packets but also as the trigger for new packets. Leveraging datacenter network characteristics, PAC enforces a novel ACK control to release ACKs {{in such a way}} that the ACK-triggered in-flight data can fully utilize the bottleneck link without causing incast collapse even when faced with over a thousand senders. We implement PAC on both Windows and Linux platforms, and extensively evaluate PAC using small-scale testbed exper-iments and large-scale ns- 2 simulations. Our results show that PAC significantly outperforms the previous representative designs such as ICTCP and DCTCP by supporting 40 X (i. e., 40 → 1600) more senders; further, it does not introduce spurious timeout and retransmission even when the measured 99 th percentile RTT is only 3. 6 ms. Our implementation experiences show that PAC is readily deployable in production datacenters, while requiring minimal system modification compared to prior designs. I...|$|R
40|$|Our project {{deals with}} the science and {{philosophy}} studies and text and sign dimensions. In these dimension the project will go deep and proof {{the connection between the}} idea of the free will people have, and advertising. The study is based on an analysis and an interpretation of three chosen advertisements, where two of them are based on our observation of the Copenhagen Central Station. To examine the connection between the idea of free will and advertising we have chosen some analytically categories; free will, semiotic and ethics in connection with advertising. Beside these analytically categories, we have also chosen to immerse ourselves into the project, in both relations to the observation and as well in the understanding of the analysis and the results of it. After an analysis of the three advertisements we can now conclude that advertising can have an effect on us and our free will if the sender choose to abuse the advertisement instruments. These results have given us the base to see free will as existing in the individual person, but is to some extent different from individual to individual. The findings from our analysis gives us the ability to point out an ethical limit for advertising, which will protect the individual from being manipulated and by this being unable to use their free will. This <b>limit</b> occurs when <b>sender</b> treats the individual person as an object and not as a subject. Therefore chooses the sender to use the advertisement instruments in a way that creates a deceptive advertisement...|$|R
40|$|Real-time gross {{settlement}} (RTGS) {{systems such as}} CHAPS Sterling require large amounts of liquidity to support payment activity. To meet their liquidity needs, RTGS participants borrow from the central bank or rely on incoming payments from other participants. Both options can prove costly [...] the latter in particular if participants delay outgoing payments until incoming ones arrive. This article presents an empirical analysis of the timing and funding of payments in CHAPS. The authors seek to identify the factors driving the intraday profile of payment activity {{and the extent to}} which incoming funds are used as a funding source, a process known as liquidity recycling. They show that the level of liquidity recycling in CHAPS is high and stable throughout the day, and attribute this result to several features of the system. First, the settlement of time-critical payments provides liquidity to the system early in the settlement day; this liquidity can be recycled for the funding of less urgent payments. Second, CHAPS throughput guidelines provide a centralised coordination mechanism, in effect limiting any tendency toward payment delay. Third, the relatively small direct membership of CHAPS facilitates coordination between members, for example, through the use of bilateral net <b>sender</b> <b>limits.</b> Coordination encourages banks to maintain a relatively constant flux of payments throughout the day. The authors also argue that the high level of recycling helps to reduce liquidity risk, and that the relatively smooth intraday distribution of payments serves to mitigate operational risk associated with highly concentrated payment activity. They note, however, that the benefits of liquidity recycling are not evenly distributed between members of CHAPS. Payment systems; Bank liquidity; Risk; Electronic funds transfers...|$|R

