1|17|Public
40|$|This report {{describes}} a preliminary evaluation of perfor-mance of a cell-FPGA-like architecture for future hybrid “CMOL ” circuits. Such circuits will combine a semiconduc-tor-transistor (CMOS) stack and a two-level nanowire cross-bar with molecular-scale two-terminal nanodevices (program-mable diodes) formed at each crosspoint. Our cell-based architecture {{is based on}} a uniform CMOL fabric of “tiles”. Each tile consists of 12 four-transistor basic cells and one (four times larger) <b>latch</b> <b>cell.</b> Due to high density of nan-odevices, which may be used for both logic and routing func-tions, CMOL FPGA may be reconfigured around defective nanodevices to provide high defect tolerance. Using a semi-custom set of design automation tools we have evaluated CMOL FPGA performance for the Toronto 20 benchmark set, so far without optimization of several parameters in-cluding the power supply voltage and nanowire pitch. The results show that even without such optimization, CMOL FPGA circuits may provide a density advantage of more than two orders of magnitude over the traditional CMOS FPGA with the same CMOS design rules, at comparable time delay, acceptable power consumption and potentially high defect tolerance...|$|E
50|$|For normal operation, {{the added}} {{boundary}} scan <b>latch</b> <b>cells</b> are set {{so that they}} have no effect on the circuit, and are therefore effectively invisible. However, when the circuit is set into a test mode, the latches enable a data stream to be shifted from one latch into the next. Once a complete data word has been shifted into the circuit under test, it can be latched into place so it drives external signals. Shifting the word also generally returns the input values from the signals configured as inputs.|$|R
40|$|This {{invention}} {{is comprised}} of a logical memory <b>latch</b> and <b>cell,</b> using logic and circuit modifications, provides SEU immunity without loss of speed. A single logic state is hardened against SEU using technology methods and the information concerning valid states is then based to simplify hardened circuit design...|$|R
40|$|A 12 -b 300 MSPS Current-Steering DAC with 0. 13 um CMOS {{technology}} is presented. In {{order to reduce}} the chip area, a laminated-step layout technique is proposed. Based on this technique, the occupied DAC core size is only 0. 26 mm 2 even in 12 -b resolution. Further, a current auto-averaging technique, an output impedance enhancement circuit, and the novel <b>latched</b> switching <b>cell</b> logic are discussed to keep the desired 12 - b DAC performance. The measured results are within ± 1 LSB for DNL. The measured SFDR is 70 dB under Nyquist output frequency with 50 mW power dissipation at 3. 3 V power supply...|$|R
50|$|Rituximab {{tends to}} stick {{to one side of}} B cells, where CD20 is, forming a cap and drawing {{proteins}} over to that side. The presence of the cap changed the effectiveness of natural killer (NK) cells in destroying these B cells. When an NK <b>cell</b> <b>latched</b> onto the cap, it had an 80% success rate at killing the cell. In contrast, when the B cell lacked this asymmetric protein cluster, it was killed only 40% of the time.|$|R
50|$|To read a {{bit from}} a {{particular}} memory cell, the wordline along the cell's row is turned on, activating all the cells in the row. The stored value (Logic 0 or 1) from the cell then comes to the Bit-lines associated with it. The sense amplifier {{at the end of}} the two complimentary bit-lines amplify the small voltages to a normal logic level. The bit from the desired <b>cell</b> is then <b>latched</b> from the <b>cell's</b> sense amplifier into a buffer, and put on the output bus.|$|R
40|$|A {{method for}} {{predicting}} the SEU susceptibility of a standard-cell D-latch using an alpha-particle sensitive SRAM, SPICE critical charge simulation results, and alpha-particle interaction physics. A technique utilizing test structures to quickly and inexpensively characterize the SEU sensitivity of standard <b>cell</b> <b>latches</b> {{intended for use}} in a space environment. This bench-level approach utilizes alpha particles to induce upsets in a low LET sensitive 4 -k bit test SRAM. This SRAM consists of cells that employ an offset voltage to adjust their upset sensitivity and an enlarged sensitive drain junction to enhance the cell's upset rate...|$|R
40|$|Digital analog {{converters}} {{bridge the}} gap between digital signal processing chips, and power amplifiers that transmit analog signals. Communications systems require ever increasing bandwidth, however data converters are typically the bottleneck in these systems. This thesis presents the design of a high speed current steering DAC using CMOS 90 nm technology. The resolution of the converter is 10 bits, segmented into 6 thermometer encoded MSB current cells, and 4 binary weighted LSB current cells. Each of the sub-components, such as the binary-thermometer encoder, digital <b>latch,</b> current <b>cell,</b> reconstruction filter, are discussed in detail. The current cells were designed with transistor matching, and output impedance effects in mind to achieve high performance. The DNL of the converter was measured to be 0. 02 LSB, while the INL is 0. 29 LSB. With a clock frequency of 1. 2 GHz, the SFDR was measured to be 72. 07 dB with an input of 596. 48 MHz...|$|R
50|$|A {{standard}} cell {{is a group}} of transistor and interconnect structures that provides a boolean logic function (e.g., AND, OR, XOR, XNOR, inverters) or a storage function (flipflop or <b>latch).</b> The simplest <b>cells</b> are direct representations of the elemental NAND, NOR, and XOR boolean function, although cells of much greater complexity are commonly used (such as a 2-bit full-adder, or muxed D-input flipflop.) The cell's boolean logic function is called its logical view: functional behavior is captured {{in the form of a}} truth table or Boolean algebra equation (for combinational logic), or a state transition table (for sequential logic).|$|R
40|$|In nanometric technologies, {{circuits}} {{are increasingly}} sensitive to {{various kinds of}} perturbations. Soft errors, a concern for space applications in the past, became a reliability issue at ground level. Alpha particles and atmospheric neutrons induce single-event upsets (SEU), affecting memory <b>cells,</b> <b>latches,</b> and flip-flops, and single-event transients (SET), initiated in the combinational logic and captured by the latches and flip-flops associated to the outputs of this logic. To face this challenge, a designer must dispose a variety of soft error mitigation schemes adapted to various circuit structures, design architectures, and design constraints. In this paper, we describe various SEU and SET mitigation schemes that could help the designer meet her or his goals...|$|R
40|$|ISBN 978 - 1 - 4419 - 6992 - 7; e-ISBN 978 - 1 - 4419 - 6993 - 4 In nanometric technologies, {{circuits}} {{are increasingly}} sensitive to {{various kinds of}} perturbations. Soft errors, a concern {{in the past for}} space applications, became a reliability issue at ground level. Alpha particles and atmospheric neutrons induce single-event upsets (SEUs) affecting memory <b>cells,</b> <b>latches,</b> and flip-flops, and single-event transient (SETs) initiated in the combinational logical and captured by the associated latches and flip-flops. To face this challenge, a designer must dispose a variety of soft-error mitigation schemes adapted to various circuit structures, design architectures, and design constraints. In this chapter, we describe several SEU and SET mitigation schemes that could help designers to meet their reliability constraints...|$|R
40|$|Sequential elements, flip-flops, <b>latches,</b> {{and memory}} <b>cells,</b> {{are the most}} {{vulnerable}} com-ponents to soft errors. Since state-of-the-art designs contain millions of bistables, it is not feasible to protect all system bistables using hardening techniques that impose area, perfor-mance, and power overhead. A practical approach is to rank system bistables based on their contribution to the overall system vulnerability and protect the most problematic bistables. This analysis is traditionally performed by fault injection and simulation methods which are intractable for large designs and multi-cycle analysis. In this paper, we present an an-alytical framework to analyze multi-cycle error propagation behavior and then rank system bistables based on their effects on system-level soft error rate. The number of clock cycles required for an error in a bistable to be propagated to system outputs is {{used to measure the}} vulnerability of bistables to soft errors. ...|$|R
40|$|This paper {{examines}} {{the effect of}} technology scaling and microarchitectural trends on the rate of soft errors in CMOS memory and logic circuits. We describe and validate an end-to-end model that enables us to compute the soft error rates (SER) for existing and future microprocessorstyle designs. The model captures the effects of two important masking phenomena, electrical masking and latchingwindow masking, which inhibit soft errors in combinational logic. We quantify the SER due to high-energy neutrons in SRAM <b>cells,</b> <b>latches,</b> and logic circuits for feature sizes from 600 nm to 50 nm and clock periods from 16 to 6 fan-out-of- 4 inverter delays. Our model predicts that the SER per chip of logic circuits will increase nine orders of magnitude from 1992 to 2011 {{and at that point}} will be comparable to the SER per chip of unprotected memory elements. Our result emphasizes that computer system designers must address the risks of soft errors in logic circuits for future designs...|$|R
5000|$|Synchronous {{programming}} (also synchronous reactive programming or SRP) is {{a computer}} programming paradigm supported by synchronous programming languages. The principle of SRP {{is to make the}} same abstraction for programming languages as the synchronous abstraction in digital circuits. Synchronous circuits are indeed designed at a high-level of abstraction where the timing characteristics of the electronic transistors are neglected. Each gate of the circuit (or, and, ...) is therefore assumed to compute its result instantaneously, each wire is assumed to transmit its signal instantaneously. A synchronous circuit is clocked and at each tick of its clock, it computes instantaneously its output values and the new values of its memory <b>cells</b> (<b>latches)</b> from its input values and the current values of its memory cells. In other words, the circuit behaves as if the electrons were flowing infinitely fast. The first synchronous programming languages were invented in France in the 1980s: Esterel, Lustre and Signal. Since then, many other synchronous languages have emerged.|$|R
40|$|The {{sensations of}} sound and motion {{generated}} by the inner ear are controlled by the brain through extensive centripetal innervation originating within the brain stem. In the semicircular canals, brain stem efferent neurons make synaptic contacts with mechanosensory hair cells and with the dendrites of afferent neurons. Here, we examine the relative contributions of efferent action on hair cells and afferents. Experiments were performed in vivo in the oyster toadfish, Opsanus tau. The efferent system was activated via electrical pulses to the brain stem and sensory responses to motion stimuli were quantified by simultaneous voltage recording from afferents and intracellular current- and/or voltage-clamp recordings from hair cells. Results showed synaptic inputs to both afferents and hair cells leading to relatively long-latency intracellular signaling responses: excitatory in afferents and inhibitory in hair cells. Generally, {{the net effect of}} efferent action was an increase in afferent background discharge and a simultaneous decrease in gain to angular motion stimuli. Inhibition of hair cells was likely the result of a ligand-gated opening of a major basolateral conductance. The reversal potential of the efferent-evoked current was just below the hair cell resting potential, thus resulting in a small hyperpolarization. The onset latency averaged about 90 ms and latency to peak response was 150 – 400 ms. Hair cell inhibition often outlasted afferent excitation and, in some cases, <b>latched</b> hair <b>cells</b> in the “off” condition for > 1 s following cessation of stimulus. These features endow the animal with a powerful means to adjust the sensitivity and dynamic range of motion sensation...|$|R
40|$|A new parallel-in-parallel-out bit-level pipelined {{multiplier}} {{is presented}} to perform multiplication in GF(2 m). The existing designs use m 2 identical cells each having 7 latches and have a system latency of 3 m. We start with the Dependence Graph (DG) of the algorithm and pipleine it to achieve a critical path equal to the delay of a 2 -input AND and XOR gate. The critical path in the proposed design {{is the same as}} in previous designs. The number of <b>latches</b> required per <b>cell</b> has however, been reduced from 7 to 3. This results in considerable hardware savings and the system latency is also reduced form the present 3 m to m+ 1 in the proposed design. A chip has been designed using Magic to implement the proposed multiplier. Introduction In recent years, Finite Fields have received a lot of attention because of their application in error control coding [1] [2]. They have also been used in digital signal processing, pseudorandom number generation, encryption and decryption protocols in [...] ...|$|R
40|$|In this work, the e#ects of {{transient}} faults on {{high performance}} microprocessors is explored. To perform a thorough exploration, a highly detailed RTL {{model of a}} modern, deeply pipelined, out-of-order microprocessor implementing the Alpha ISA was created. Using this model, the e#ects of manipulating individual state elements such as pipeline <b>latches</b> and RAM <b>cells</b> can be observed {{by comparing the results}} against that of a reference simulation. Using statistical fault injection into our experimental infrastructure, approximately 83 % of single bit corruptions into potentially vulnerable processor state result in a complete state convergence within 10 000 cycles. Of the remaining trials, approximately 25 % show di#erences in microarchitectural state, but have not a#ected software visible state. The failed trials were analyzed to identify areas in the model that are particularly susceptible to transient faults, and then lightweight protection mechanisms were implemented which masked approximately 20 - 75 % of the failures. Building upon the failure modes seen in the microarchitecture, fault injections into software were performed to investigate the level of masking that the software layer provides. Together, the baseline microarchitectural substrate and software mask 9 out of 10 transient faults from a#ecting correct program execution...|$|R
40|$|Abstract. We {{propose a}} {{technology}} mapping algorithm that takes existing structural tech-nology-mapping algorithms based on dynam-ic programming [1, 3, 4] and extends them to retime pipelined circuits. If the circuit to be mapped has a tree structure, our algorithm generates an optimal solution compatible with that structure. The algorithm {{takes into account}} gate delays and capacitive loads as latches are moved across the logic. It also supports latches with embedded logic: i. e., cells that combine a D latch with a combin-ational gate at little extra cost in latch delay. simple transparent latch and a gate (denoted f(x 1,x 2, [...] .,xn)) for only little more delay and area than the <b>latch</b> itself. These <b>cell</b> libraries are often incomplete; e. g., a typical cell lib-rary based on tristate latches may embed only D, AND 2, AND 3, and OR 2 gates in latches, disallowing larger gates and inverting gates. For such asymmetric libraries, a simple change of latch polarity (i. e., retiming across an inverter) may enable or disable the embed-ding of a gate within the latch. Such effects are not modeled by previous work. Furthermore, the application of existing re-timing algorithms [5, 6, 7] after technology mapping is suboptimal. The smallest possible latch movement is a movement across a single mapped gate. But this ignores the pos-sibility of breaking a large gate into smaller pieces and placing the latch between them to meet a delay constraint. 1. Introduction. Th...|$|R

