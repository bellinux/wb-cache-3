2533|0|Public
25|$|As Joey {{tentatively}} {{enters the}} stage space, he is {{met with a}} spontaneous ovation sparked by the immediacy of the live moment, in turn aided {{by the fact that}} Kohler and Jones never stray from the game that dictates they treat him as a live horse. This playful notion helps Joey’s creators invite the audience to believe in his aliveness, and the audience succumbs, not only for his lifelike movement, but also for the way he is activated by those around him. As both creators and performers, Jones and Kohler soothe Joey’s “nervousness,” and a planned moment when Joey “notices” the audience elicits a generous laugh. Joey shies, nervously clops his hooves, and nickers gently to demonstrate alarm. He sniffs Kohler’s jacket pocket, as he “knows” there is a snack in there. Later, when Jones crosses the stage to demonstrate a feature, he is careful not to walk behind Joey, lest he is kicked. The audience must believe he will not be kicked – only a spiteful puppeteer could activate such a trick – but Jones’s conviction that he should respect the animal’s space foregrounds the moment’s <b>liveness</b> and heightens the audience’s engagement. Finally, a jockey is introduced, and Joey patiently holds still while he is mounted. Joey accepts the rider’s weight without complaint, comfortably parades around the stage, and swiftly exits before the effect is mundane. For the entire time that Joey inhabits the stage, the audience is noticeably spellbound.|$|E
2500|$|Petri nets can be {{described}} as having different degrees of <b>liveness</b> [...] A Petri net [...] is called -live iff all of its transitions are -live, where a transition is ...|$|E
5000|$|A <b>liveness</b> {{property}} {{cannot be}} violated in a finite {{execution of a}} distributed system because the [...] "good" [...] event might only theoretically occur at some time after execution ends. Eventual consistency {{is an example of}} a <b>liveness</b> property. All properties can be expressed as the intersection of safety and <b>liveness</b> properties.|$|E
5000|$|Live {{and dead}} {{hypotheses}} - [...] "deadness and <b>liveness</b> ... are measured by thinker's willingness to act. The maximum of <b>liveness</b> in a hypothesis means willingness to act irrevocably" ...|$|E
5000|$|Informally, a <b>liveness</b> {{property}} can {{be interpreted}} as something [...] "good" [...] eventually happens. Therefore, regardless of what has happened to a certain point in time, something good can happen at some time in the future. More formally, let P be a trace property. P is a trace <b>liveness</b> property, or a <b>liveness</b> property, [...] "if every finite sequence over acts(P) has some extension in traces(P)." ...|$|E
5000|$|Both Paxos and Gbcast {{are subject}} to the FLP impossibility result. [...] Thus neither {{protocol}} can be guaranteed live under all possible conditions. At best we can talk about the conditions under which <b>liveness</b> is guaranteed, expressed as predicates on the failure detection mechanism: if the condition for <b>liveness</b> holds, then the protocol will be live. The <b>liveness</b> conditions of Basic Paxos and Gbcast are similar but not identical.|$|E
5000|$|Hendrik Folkerts: Keeping Score: Notation, Embodiment, and <b>Liveness,</b> 2016 ...|$|E
5000|$|... {{inclusion}} of <b>liveness</b> (or randomness) {{as in any}} kind of performance.|$|E
50|$|As a {{qualitative}} property, <b>liveness</b> of a FD-DEVS network is decidable by (1) generating RG of the given network, (2) from RG, generating kernel {{directed acyclic graph}} (KDAG) in which a vertex is strongly connected component, and (3) checking if a vertex of KDAG contains a state transition cycle which contains a set of <b>liveness</b> statesHZ06b.|$|E
5000|$|Perform {{dataflow}} {{analysis to}} gather <b>liveness</b> information. Keep {{track of all}} variables’ live intervals, the interval when a variable is live, in a list sorted in order of increasing start point (note that this ordering is free if the list is built when computing <b>liveness.)</b> We consider variables and their intervals to be interchangeable in this algorithm.|$|E
50|$|As a {{qualitative}} property, <b>liveness</b> of a SP-DEVS network is decidable by (1) generating the finite-vertex reachability graph (RG) of the given network, (2) from RG, generating kernel {{directed acyclic graph}} (KDAG) in which a vertex is strongly connected component, and (3) checking if a vertex of KDAG contains a state transition cycle which contains a set of <b>liveness</b> statesHwang05.|$|E
5000|$|In {{concurrent}} computing, <b>liveness</b> {{refers to}} a set of properties of concurrent systems, that require a system to make progress despite the fact that its concurrently executing components ("processes") may have to [...] "take turns" [...] in critical sections, parts of the program that cannot be simultaneously run by multiple processes. <b>Liveness</b> guarantees are important properties in operating systems and distributed systems.|$|E
5000|$|... {{formally}} {{defined a}} proof rule for functional composition that assures a program's safety and <b>liveness.</b>|$|E
5000|$|Susan S Owicki; Leslie Lamport. [...] "Proving <b>Liveness</b> Properties of Concurrent Programs". ACM TOPLAS. (4:3): 455-495.|$|E
50|$|Weak {{fairness}} over {{an action}} means if that action is continuously enabled, it must eventually be taken. With weak fairness on Tick only {{a finite number}} of stuttering steps are permitted between ticks. This temporal logical statement about Tick is called a <b>liveness</b> assertion. In general, a <b>liveness</b> assertion should be machine-closed: it shouldn't constrain the set of reachable states, only the set of possible behaviours.|$|E
5000|$|Iterate through <b>liveness</b> start {{points and}} {{allocate}} a register from the available register pool to each live variable.|$|E
50|$|Since TLA+ {{specifications}} {{are written}} in a formal language, they are amenable to finite model checking. The model checker finds all possible system behaviours up to some number of execution steps, and examines them for violations of desired invariance properties such as safety and <b>liveness.</b> TLA+ specifications use basic set theory to define safety (bad things won't happen) and temporal logic to define <b>liveness</b> (good things eventually happen).|$|E
5000|$|In {{distributed}} computing, safety properties informally {{require that}} [...] "something bad will never happen" [...] in a distributed system or distributed algorithm. Unlike <b>liveness</b> properties, safety properties can be violated by a finite {{execution of a}} distributed system. In a database system, a promise to never return data with null fields {{is an example of}} a safety guarantee. All properties can be expressed as the intersection of safety and <b>liveness</b> properties.|$|E
5000|$|A recent {{innovation}} by Kenneth Okereafor [...] and , {{presented an}} optimized and secure design of applying biometric <b>liveness</b> detection technique using a trait randomization approach. This novel concept potentially opens up {{new ways of}} mitigating biometric spoofing more accurately, and making impostor predictions intractable or very difficult in future biometric devices. A simulation of Kenneth Okereafor's biometric <b>liveness</b> detection algorithm using a 3D multi-biometric framework consisting of 15 <b>liveness</b> parameters from facial print, finger print and iris pattern traits resulted in a system efficiency of the 99.2% over a cardinality of 125 distinct randomization combinations. The uniqueness of Okereafor's innovation lies {{in the application of}} uncorrelated biometric trait parameters including intrinsic and involuntary biomedical properties from eye blinking pattern, pulse oxymetry, finger spectroscopy, electrocardiogram, perspiration, etc.|$|E
50|$|Most {{specifications}} do {{not require}} assertion of <b>liveness</b> properties. Safety properties suffice both for model checking and guidance in system implementation.|$|E
50|$|Likewise rain, make me {{a person}} who don’t {{hesitate}} to rain on everywhere equally, and bring <b>liveness</b> to everywhere it drops.|$|E
50|$|There is an {{open source}} library, called DEVS# at http://xsy-csharp.sourceforge.net/DEVSsharp/, that {{supports}} some algorithms for finding safyness and <b>liveness</b> as well as Min/Max processing time bounds.|$|E
50|$|Starvation {{freedom is}} in fact the highest <b>liveness</b> {{guarantee}} that the algorithm gives; unlike the two-process Peterson algorithm, the filter algorithm does not guarantee bounded waiting.|$|E
50|$|Making the use-define or define-use chains {{is a step}} in <b>liveness</b> analysis, so that logical {{representations}} of all the variables can be identified and tracked through the code.|$|E
50|$|There are {{two main}} types of {{properties}} that can be expressed using linear temporal logic: safety properties usually state that something bad never happens (G), while <b>liveness</b> properties state that something good keeps happening (GF or G''''''F). More generally, safety properties are those for which every counterexample has a finite prefix such that, however it is extended to an infinite path, {{it is still a}} counterexample. For <b>liveness</b> properties, on the other hand, every finite prefix of a counterexample can be extended to an infinite path that satisfies the formula.|$|E
5000|$|On 29 September 2015, a YouTube {{video was}} posted by an {{associate}} of eyeThenticate (at the time of posting) demonstrating a spoof of Eyeprint ID using version 2.3.6 of the demo application. The Play Store app description has been updated to clarify that the demo application [...] "includes limited <b>liveness</b> detection only, and spoofing tests conducted on this app will not be relevant to the product sold through EyeVerify partners". The version of Eyeprint ID that is integrated by partners has <b>liveness</b> detection built in to prevent spoofing attempts.|$|E
50|$|In {{most cases}} of {{biosynthesis}} and chemosynthesis, flake ice {{is used to}} control the reaction rate and maintain the <b>liveness.</b> Flake ice is sanitary, clean with rapid temperature reduction effect.|$|E
5000|$|Petri nets can be {{described}} as having different degrees of <b>liveness</b> [...] A Petri net [...] is called -live iff all of its transitions are -live, where a transition is ...|$|E
50|$|Besides {{removing}} unused {{instructions from}} the compiled bytecode, ProGuard optimizes it using techniques such as control flow analysis, data-flow analysis, partial evaluation, static single assignment, global value numbering, and <b>liveness</b> analysis.|$|E
50|$|There are two {{open source}} {{libraries}} DEVS# written in C# at http://xsy-csharp.sourceforge.net/DEVSsharp/ and XSY written in Python at https://code.google.com/p/x-s-y/ that support some reachability graph-based verification algorithms for finding safyness and <b>liveness.</b>|$|E
50|$|AS5710, JAUS Core Service Set.:Establishes {{a common}} set of {{services}} for distributed systems communication and coordination. The Core Service Set includes service definitions for transport, events, access control, management, time, <b>liveness</b> and discovery.|$|E
5000|$|Freedom from {{starvation}} (or [...] "finite bypass") is {{a stronger}} <b>liveness</b> guarantee than deadlock-freedom. It states that all processes vying {{for access to}} the critical region eventually make progress. Any starvation-free system is also deadlock-free.|$|E
5000|$|<b>Liveness</b> {{analysis}} is a [...] "backwards may" [...] analysis. The {{analysis is}} done in a backwards order, and the dataflow confluence operator is set union. In otherwords, if applying <b>liveness</b> analysis to a function with a particular number of logical branches within it, the analysis is performed starting {{from the end of}} the function working towards the beginning (hence [...] "backwards"), and a variable is considered live if any of the branches moving forward within the function might potentially (hence [...] "may") need the variable's current value. This is in contrast to a [...] "backwards must" [...] analysis which would instead enforces this condition on all branches moving forward.|$|E
5000|$|On the {{portability}} side of biometric products, {{more and}} more vendors are embracing significantly-miniaturized Biometric Authentication Systems (BAS) thereby driving elaborate cost savings especially for large scale deployments. This is also complimented by Kenneth Okereafor's innovative integrated <b>liveness</b> detection technique., which is a novel design of a framework that performs biometric <b>liveness</b> detection using / multi-modal random trait technique; and was first presented at the 2017 UKSim-AMSS 19th International Conference on Modelling & Simulation [...] and published by the IEEE International Journal of Simulation, Systems, Science and Technology. The innovative framework tackles biometric spoofing from a randomized trait analysis approach that guarantees more secure authentication.|$|E
50|$|Sometimes, {{however, the}} <b>liveness</b> gave an added {{dimension}} of immediacy to the technology, such as inventors personally demonstrating flame-proof clothing and bullet-proof vests while the presenters looked on. Sometimes {{it was the}} presenter who acted as test dummy.|$|E
50|$|Timed automata {{can be used}} {{to model}} and analyse the timing {{behavior}} of computer systems, e.g., real-time systems or networks. Methods for checking both safety and <b>liveness</b> properties have been developed and intensively studied over the last 20 years.|$|E
