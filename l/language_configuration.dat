12|301|Public
50|$|Leading zeroes {{for hours}} are optional, but are {{very common in}} {{automated}} output and sometimes in written time. However, Windows' region and <b>language</b> <b>configuration</b> for both Serbian variations (Cyrillic and Latin) omits the leading zero for hours and days and months in the date.|$|E
50|$|Monmouthpedia's initial {{goal was}} to have 1,000 QR codes by April 2012, with each article having a {{corresponding}} ceramic plaque emblazoned with a code. By May, the project's home page reported 712 new and improved articles in 25 different languages. For non-English speakers, where available, articles in other languages are automatically displayed {{in the language of}} the user on the basis of the phone's <b>language</b> <b>configuration.</b> At project launch, some 500 articles in other languages were available thanks to the collaboration of editors abroad. In addition to this, the project covers over 250 pre-existing entries on Monmouth-related topics. In the same period, over 1,000 photographs were uploaded.|$|E
5000|$|Pro Cycling Manager is {{a series}} of cycling {{management}} and real-time simulation games created by Cyanide. The game was first launched in 2001 as Cycling Manager, but the series took on the Pro label in June 2005. A new version is released every year to coincide with the Tour de France. The game is offered in a variety of languages (French, English, German, Spanish, Italian, Dutch, Danish, Norwegian,Portuguese,...) although the actual <b>language</b> <b>configuration</b> depends on the local publisher. Pro Cycling Manager runs on the PC. The game is produced in cooperation with most of the main professional cycling teams {{under the aegis of the}} IPCT and the AIGCP. In September 2007 a Sony PSP version of the game was released, called Pro Cycling, it is engineered to take advantage of PSP gameplay and it offers a limited management mode.|$|E
5000|$|TypoScript is {{a purely}} {{declarative}} <b>configuration</b> <b>language.</b> In Typoscript, <b>configuration</b> values are defined, which are parsed into a system-wide PHP array. TypoScript is object-based and organized in a tree-like structure.|$|R
40|$|System <b>configuration</b> <b>languages</b> provide {{powerful}} abstractions that simplify managing large-scale, networked systems. Thousands {{of organizations}} now use <b>configuration</b> <b>languages,</b> such as Puppet. However, specifications written in <b>configuration</b> <b>languages</b> can have bugs {{and the shell}} remains {{the simplest way to}} debug a misconfigured system. Unfortunately, it is unsafe to use the shell to fix problems when a system <b>configuration</b> <b>language</b> is in use: a fix applied from the shell may cause the system to drift from the state specified by the <b>configuration</b> <b>language.</b> Thus, despite their advantages, <b>configuration</b> <b>languages</b> force system administrators to give up the simplicity and familiarity of the shell. This paper presents a synthesis-based technique that allows administrators to use <b>configuration</b> <b>languages</b> and the shell in harmony. Administrators can fix errors using the shell and the technique automatically repairs the higher-level specification written in the <b>configuration</b> <b>language.</b> The approach (1) produces repairs that are consistent with the fix made using the shell; (2) produces repairs that are maintainable by minimizing edits made to the original specification; (3) ranks and presents multiple repairs when relevant; and (4) supports all shells the administrator may wish to use. We implement our technique for Puppet, a widely used system <b>configuration</b> <b>language,</b> and evaluate it on a suite of benchmarks under 42 repair scenarios. The top-ranked repair is selected by humans 76 % of the time and the human-equivalent repair is ranked 1. 31 on average. Comment: Published version in proceedings of IEEE/ACM International Conference on Automated Software Engineering (ASE) 201...|$|R
40|$|<b>Configuration</b> <b>languages</b> {{based on}} XML and source code {{annotations}} are {{very popular in}} the industry. There are situations {{in which there are}} reasons to move <b>configuration</b> <b>languages</b> from one format to the other, or to support multiple <b>configuration</b> <b>languages.</b> In such cases mappings between languages based on these formats have to be defined. Mapping can be used to support multiple <b>configuration</b> <b>languages</b> or to seamlessly move configurations from annotations to XML or vice versa. In this paper, we present XML to annotations mapping patterns {{that can be used to}} map languages from one format to the other...|$|R
5000|$|Cloudify {{uses the}} OASIS TOSCA {{technology}} and {{is written in}} the Python programming language. It is licensed under the Apache License Version 2.0, and its source files can be found and forked on GitHub.Built on a YAML DSL (Domain Specific <b>Language)</b> <b>configuration</b> files called [...] "blueprints" [...] define the application's configurations, services and their tier dependencies. With these Cloudify automates the deployment phases of applications to Cloud computing and Virtualization infrastructure. The blueprints describe how the application interacts with the data center through APIs to execute the defined blueprint configurations. These blueprint files describe the execution plans for the lifecycle of the application for installing, starting, terminating, orchestrating and monitoring the application stack. Cloudify uses the blueprint as input that describes the deployment plan and is responsible for executing it on the cloud environments. The blueprint also employs cloud driver configuration files as well, to describe machines and their images for the chosen cloud, {{making it possible to}} manage the infrastructure as code. For each component it describes the location of your binaries, installation and monitoring configurations. By creating an abstraction layer that isolates the code from the underlying infrastructure, Cloudify is able to support any cloud.|$|E
40|$|The work of Francesc de la Torre is {{positioned}} in the baroque context, in the junction between linguistic conflict and literary <b>language</b> <b>configuration.</b> Kenneth Brown and Vicent Escartí edit ten unpublished Catalan poems of this author {{included in a}} miscellany manuscript. A brief study of the literary atmosphere and {{the significance of these}} texts is included. </span...|$|E
40|$|This {{paper will}} examine the legacy of Spanish {{colonialism}} in the <b>language</b> <b>configuration</b> of Latin America. It will show how this area is inevitably dominated by Spanish-speaking, eurocentric élites, and how this situation {{can be found in}} many national constitutions, in education systems and in some literacy programmes. The tensions between Spanish as national ‘unifier’ and attempts at multiethnic expression by those whose mother tongue {{is one of the many}} indigenous languages will be highlighted, as well as the pressures to move towards a ‘homogenised’ supra-national Hispanic identity. The predominantly assimilationist policies and the resulting alienation for the marginalised groups will be discussed...|$|E
40|$|Approved {{for public}} release, {{distribution}} is unlimitedThe {{primary goal of}} this thesis is to investigate {{the use of the}} eXtensible Markup Language (XML) as a network <b>configuration</b> <b>language.</b> Network <b>configuration</b> is a difficult and time- consuming task. Current network configuration solutions are based on proprietary <b>configuration</b> <b>languages</b> and parsers. XML is a platform-neutral data representation language and worldwide standard. It is potentially advantageous to use XML to configure networks, however, XML was not developed for network configuration. A new XML based configuration solution for the Server and Agent Active Network Management System (SAAM) is provided to marshal evidence that XML can be used effectively as a network <b>configuration</b> <b>language.</b> [URL] Lieutenant, Jordanian Air Forc...|$|R
40|$|AbstractThis paper {{reports on}} the {{mathematical}} structure of a configuration, defined 120 years ago in 1876 by Th. Reye, and the zeroth book on graph theory, written by A. Sainte-Laguë 70 years ago in 1926, i. e. 10 years earlier than the book of König. In particular, those parts of Sainte-Laguë's book are discussed which {{are closely related to}} <b>configurations.</b> In graph-theoretical <b>language</b> <b>configurations</b> are linear regular uniform hypergraphs...|$|R
50|$|Multiple text editors, {{with the}} help of {{additional}} syntax files and some <b>language</b> semantics <b>configuration,</b> support Haxe syntax highlighting and semantics.|$|R
40|$|Recent {{research}} has found that operators frequently misconfigure Internet services, causing various availability and performance problems. In this paper, we propose a software infrastructure that eliminates several types of misconfiguration by automating the generation of configuration files in Internet services, even as the services evolve. The infrastructure comprises a custom scripting <b>language,</b> <b>configuration</b> file templates, communicating runtime monitors, and heuristic algorithms to detect dependencies between configuration parameters and select ideal configurations. To demonstrate our infrastructure experimentally, we apply it to a realistic online auction service. Our results show that the infrastructure can simplify operation significantly while eliminating 58 % of the misconfigurations found in a previous study of the same service. Furthermore, our results show that the infrastructure can efficiently determine the configuration parameters that lead to high performance as the service evolves through a hardware upgrade and the scheduled maintenance of a few nodes...|$|E
40|$|Abstract. This paper {{describes}} {{a tool for}} extracting multi-word number expressions, calculating their numerical values, and then generating them into another language, thus translating the expressions in that language. It {{is based on the}} fact that such expressions in many languages follow a simple recursive pattern. By changing the <b>language</b> <b>configuration</b> files of our tool, extraction and translation can be done for all the languages which use this pattern. We present the results of testing this tool on seven languages and twenty four language pairs. During testing, the analysis part (finding the numerical value) worked correctly for all the languages for which testing was done. Generation worked correctly for five languages but requires some modification for two languages due to the fact that word forms in languages like Telugu depend on the context. We also discuss some issues which remain and suggest solutions for some of these issues...|$|E
40|$|International audienceWe propose in {{this article}} to analyze the {{linguistic}} representations associated with the two official languages of the Philippines: Filipino and English –both {{at the heart of}} the educational system. Referring to the systems of values and affects attached to languages, the concept of linguistic representation – or social representations of languages – has been adopted by sociolinguists and educational specialists in so far as it plays a key role in the process of identity construction as well as in the transmission of language. A collective interview organized in one of the most prominent university in Manila has allowed us to bring forward the social representations of Filipino and English among students before measuring their respective importance through the administration of a questionnaire. The study of these representations among socially privileged Filipino will bring us to question the <b>language</b> <b>configuration</b> and more specifically the place of English in the social structure of this former US colony marked by the permanency of extreme social inequalities. We will see that the medium of instruction and its representations are a tool to analyze neocolonial issues...|$|E
5000|$|System {{where other}} CMS-related {{functionality}} {{can be viewed}} and managed such as packages, website <b>languages,</b> hostname <b>configuration,</b> the server log etc.|$|R
5000|$|<b>Configuration</b> <b>{{language}},</b> {{a language}} {{used to write}} configuration files ...|$|R
40|$|In 2008, the CMS {{experiment}} {{made the}} transition from a custom-parsed <b>language</b> for job <b>configuration</b> to using Python. The current CMS software release has over 180, 000 lines of Python configuration code. We describe the new configuration system, the motivation for the change, the transition itself, and our experiences with the new <b>configuration</b> <b>language...</b>|$|R
40|$|Abstract. The need {{of having}} a Passage Retrieval (PR) system for Arabic texts is due {{essentially}} to our aim to build an Arabic Question Answering (QA) system in our research team. We have chosen working on the PR system to be our first step to pursue our aim because being the core component and its quality will affect directly {{the performance of the}} QA system. JAVA Information Retrieval System (JIRS) is a PR QA-oriented system, multi-platform, open source and free to use. JIRS uses an n-gram model and it is language-independent. It separates <b>language</b> <b>configuration</b> files to make easier its adaptation to any language. In this paper, we report the different challenges when adapting the JIRS to the Arabic language. In order to evaluate JIRS on Arabic, we had to develop an Arabic test-bed using the multilingual CLEF QA one as guideline. We also report the results obtained in our experiments where we retrieved Arabic passages with JIRS first without any text preprocessing and second performing a prior light-stemming on the documents of the test-bed. The preliminary results show {{that it is possible to}} obtain a first Arabic passage retrieval system adapting JIRS on pre-processed text with a light-stemmer. ...|$|E
40|$|This study {{concerns}} Japanese {{children living}} abroad {{due to their}} fathers 2 ̆ 7 work. These children need to acquire {{the language of the}} host country, {{while at the same time}} maintaining their Japanese so that they will be able to adjust to Japanese society in the future. It would be expected that their language development has been considerably influenced by the bilingual environment in which they live. The question focused on in this paper is what happens to the L 1 of Japanese children who live abroad as a result of contact with a dominant L 2 environment. We can speculate about it by observing code-switching (CS) patterns. The paper investigates CS produced by Japanese children living in the UK from a grammatical perspective. The source of data is an elicitation by using one language at one time. The data was analyzed in the framework of the Matrix Language Frame (MLF) model and the 4 -M model. It is shown that the children 2 ̆ 7 s CS is characterized as the incorporation of L 2 into L 1, because syntactically relevant system morphemes were always from Japanese. This implies that the L 1 is maintained at the surface level of the <b>language</b> <b>configuration.</b> The results of the study suggest that the language contact situation for Japanese bilingual children may lead to L 1 maintenance with convergence to L 2. It is argued that L 1 is maintained on the surface linguistic configuration, with converging toward L 2 at the conceptual level...|$|E
40|$|Psychology uses {{listening}} {{as a work}} resource. When it comes to psychotherapy, listening establishes communication and makes psychologist-client dialogue easier. This qualitative research aims to discuss the clinic listening in phenomenological attitude in existential-phenomenological psychotherapy with deaf people. This perspective {{is based on the}} thinking of German philosopher Martin Heidegger, who considers humane a being-with and being-in-the-world, always unveiling meanings. Regarding the deaf people, Libras is currently the natural language of Brazilian deaf people. In this new <b>language</b> <b>configuration,</b> communication occurs in a visual-spatial modality. Thus, listening and speech gain new dimensions, demanding different ways of understanding in the field of psychotherapy. To the development of this research, we present excerpts from therapeutic sessions narratives with a deaf client, interpreted in the light of Heidegger s hermeneutics. We consider that it is possible for the psychotherapist to listen to deaf people in phenomenological attitude. Such position, which does not naturalize and limit the humane, helps so that the clients do not feel responsible for their existence and can hermeneutically converse in their language. In this context, the psychologist must be qualified to conduct the treatment in Libras. We hope that this research can, somehow, fill the existing gap of the scientific production about such theme in the field of Psychology and, mainly, instigate discussion in the context of Psychology courses on the importance and need to qualify psychologists for the management of clinical practice with deaf peopleA psicologia faz uso da escuta como um dos recursos do seu trabalho. Em se tratando da psicoterapia, a escuta estabelece a comunicação e facilita o diálogo entre psicólogocliente. A presente pesquisa, de caráter qualitativo, tem por objetivo discutir a escuta clínica na atitude fenomenológica na psicoterapia fenomenológico-existencial com pessoas surdas. Essa perspectiva está embasada no pensamento do filósofo alemão Martin Heidegger, que considera o humano um ser-no-mundo-com-os-outros, sempre desvelando sentidos. Com relação às pessoas surdas, atualmente, a Libras é a língua natural das pessoas surdas brasileiras. Nessa nova configuração de língua, a comunicação ocorre na modalidade espaço-visual. Assim, escuta e fala ganham novas dimensões que demandam diferentes formas de compreensão no campo da psicoterapia. Para o desenvolvimento desta pesquisa, apresentamos recortes das narrativas de sessões psicoterapêuticas com um cliente surdo, interpretadas à luz da hermenêutica heideggeriana. Consideramos ser possível para o psicoterapeuta escutar pessoas surdas em atitude fenomenológica, com postura que não naturaliza e não limita o humano, auxiliando para que o cliente se responsabilize por seu existir e que possa dialogar hermeneuticamente em sua língua, cabendo, nesse contexto, ao psicólogo, estar habilitado em Libras para realizar o atendimento. Esperamos que esta pesquisa possa, de alguma forma, preencher a lacuna existente no que se refere à produção científica sobre tal temática, no campo da psicologia, e, principalmente, fomentar a discussão no contexto dos cursos de psicologia acerca da importância e necessidade de capacitar o psicólogo para o exercício da prática clínica com pessoas surda...|$|E
5000|$|Kafel is a <b>configuration</b> <b>language,</b> which {{converts}} readable policies into seccompb-bpf bytecode ...|$|R
5000|$|IEC 61850-6:2009 - <b>Configuration</b> <b>language</b> for {{communication}} in electrical substations related to IEDs ...|$|R
5000|$|Construction language, {{a general}} {{category}} that includes <b>configuration</b> <b>languages,</b> toolkit languages, and programming languages ...|$|R
5000|$|... #Caption: A ConQAT {{analysis}} {{block that}} has been created using the graphical <b>configuration</b> <b>language.</b>|$|R
40|$|Existing black-box {{adaptation}} techniques are insufficiently powerful {{for a large}} class of real-world tasks. Meanwhile, white-box techniques are language-specific and overly invasive. We argue {{for the inclusion of}} specialpurpose adaptation features in a <b>configuration</b> <b>language,</b> and outline the benefits of targetting binary representations of software. We introduce Cake, a <b>configuration</b> <b>language</b> with adaptation features, and show how its design is being shaped by two case studies. 1...|$|R
5000|$|Toolkit {{languages}} {{are used to}} build applications out of toolkits and are more complex than <b>configuration</b> <b>languages.</b>|$|R
50|$|Each point {{belongs to}} four lines: in the tic tac toe {{interpretation}} of the configuration, one line is horizontal, one vertical, and two are diagonals or broken diagonals. Each line contains three points, so in the <b>language</b> of <b>configurations</b> the Hesse configuration has the notation 94123.|$|R
50|$|At {{the extreme}} end, soft-coded {{programs}} {{develop their own}} poorly designed and implemented scripting <b>languages,</b> and <b>configuration</b> files that require advanced programming skills to edit. This {{can lead to the}} production of utilities to assist in configuring the original program, and these utilities often end up being 'softcoded' themselves.|$|R
5000|$|Data Storage — Substation <b>Configuration</b> <b>Language</b> (SCL) {{is defined}} for {{complete}} storage of configured {{data of the}} substation in a specific format.|$|R
5000|$|<b>Configuration</b> <b>{{languages}}</b> are {{languages in}} which software engineers {{choose from a}} limited set of predefined options to create new or custom software installations.|$|R
5000|$|In January 2017, Neos 3.0 {{has been}} published, {{along with a}} new version of Flow {{framework}} and a name change of its <b>configuration</b> <b>language</b> from TypoScript2 to Fusion ...|$|R
40|$|Abstract. Modern IDEs have an {{open-ended}} plugin architecture to allow customizability. However, developing a plugin is costly {{in terms of}} effort and expertise required by the customizer. We present a two-pronged approach that allows for open-ended customizations while keeping the customization cost low. First, we explicitly limit {{the portion of the}} design space targeted by the configuration mechanism. This reduces customization cost by simplifying the configuration interface. Second, we use a declarative programming <b>language</b> as our <b>configuration</b> <b>language.</b> This facilitates open-ended specification of behavior without burdening the user with operational details...|$|R
5000|$|Construction {{languages}} {{include all}} forms of communication by which a human can specify an executable problem solution to a computer. They include <b>configuration</b> <b>languages,</b> toolkit languages, and programming languages: ...|$|R
50|$|Well-known {{examples}} of declarative domain-specific languages (DSLs) include the yacc parser generator input language, QML, the Make build specification <b>language,</b> Puppet's <b>configuration</b> management <b>language,</b> regular expressions, and {{a subset of}} SQL (SELECT queries, for example). DSLs {{have the advantage of}} being useful while not necessarily needing to be Turing-complete, which makes it easier for a language to be purely declarative.|$|R
50|$|At mid-2009 {{the general}} <b>configuration</b> <b>language</b> {{used in the}} toolkit still appears to be state of the art, {{compared}} to the other toolkits for generation of the small-footprint OS images.|$|R
