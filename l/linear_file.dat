7|61|Public
50|$|Certain {{application-level}} memory-mapped file operations also {{perform better}} than their physical file counterparts. Applications can access and update data in the file directly and in-place, as opposed to seeking {{from the start of}} the file or rewriting the entire edited contents to a temporary location. Since the memory-mapped file is handled internally in pages, <b>linear</b> <b>file</b> access (as seen, for example, in flat file data storage or configuration files) requires disk access only when a new page boundary is crossed, and can write larger sections of the file to disk in a single operation.|$|E
40|$|This work is {{motivated}} by the observation that hard disk seek capability per byte of storage has declined exponentially for decades, and yet most popular access structures are still based on basic ideas proposed 30 years ago. These access structures are typically seek-intensive. In this paper, we propose a new paradigm for data access and organization called the <b>linear</b> <b>file,</b> which aims to drastically reduce disk seeks during query and update evaluation, by organizing data {{as a set of}} ongoing, on-disk sorts. In a <b>linear</b> <b>file,</b> updates are processed quickly, structures are 100 % packed, and data are carefully organized on disk to reduce seeks among disk pages. Since the <b>linear</b> <b>file</b> is a general template for data organization, in this paper we benchmark T 1 SM and T 2 SM, two specific instantiations for use with one-dimensional and spatial data, respectively. 1. Contact author Paper ID: 261 1 1 Introduction The B-tree and other closely related structures have been the foundation for physi [...] ...|$|E
40|$|The UPIO (User-controllable Parallel I/O) we {{proposed}} in [6] extends the abstraction of a <b>linear</b> <b>file</b> model into an n-dimensional file model, {{making it possible}} to control the layout of data blocks across disks and aggregating disk bandwidth through UPIO's interfaces. This enables users to produce high-performance external computation codes by planning I/O, computations, communication, and data reuse effectively in the codes. In this paper we show how well UPIO produces high-performance external computation codes by designing an I/O and communication-efficient external Laplace equation solver algorithm and exploring the effects of UPIO with the codes. 1. Introduction We believe that users are better able than systems to reduce I/O time through explicit I/O management for the parallel computing environments. Thus, to achieve high performance, file systems or I/O mechanisms for parallel machines should be user-controllable in the sense that users should be able by considering the acces [...] ...|$|E
50|$|IBM has {{developed}} a file system for tape called the <b>Linear</b> Tape <b>File</b> System. The IBM implementation of this file system has been released as the open-source IBM <b>Linear</b> Tape <b>File</b> System — Single Drive Edition (LTFS-SDE) product. The <b>Linear</b> Tape <b>File</b> System uses a separate partition on the tape to record the index meta-data, thereby avoiding {{the problems associated with}} scattering directory entries across the entire tape.|$|R
5000|$|... #Subtitle level 3: IBM <b>Linear</b> Tape <b>File</b> System - Library Edition ...|$|R
5000|$|... #Subtitle level 3: Oracle's StorageTek <b>Linear</b> Tape <b>File</b> System, Library Edition ...|$|R
40|$|This paper {{describes}} {{the features of}} the Journaled File System (JFS) and some of the history of moving this technology to the Linux operating system. JFS was designed to support the following requirements: Fast recovery from system outages Support large files and partitions Support a large number of directories & files JFS provides the following features to meet these requirements: Sub-second file system recovery time by journaling metadata only 64 -bit scalability: PetaBytes range for files and partitions B+tree indices used on all file system on-disk structures; B+trees use extensively in place of traditional <b>linear</b> <b>file</b> system structures for performance What is a File System? A file system is used to store and manage user data on disk drives; it ensures the integrity of the data written to the disk is identical to the data that is read back. In addition to storing data contained in files,...|$|E
40|$|In {{this paper}} we {{describe}} the architecture and design of a new file system, XFS, for Silicon Graphics ’ IRIX operating system. It is a general purpose file system for use on both workstations and servers. The focus of the paper is on the mechanisms used by XFS to scale capacity and performance in supporting very large file systems. The large file system support includes mechanisms for managing large files, large numbers of files, large directories, and very high performance I/O. In discussing the mechanisms used for scalability we include both descriptions of the XFS on-disk data structures and analyses of why they were chosen. We discuss in detail our use of B+ trees in place {{of many of the}} more traditional <b>linear</b> <b>file</b> system structures. XFS has been shipping to customers since December of 1994 in a version of IRIX 5. 3, and we are continuing to improve its performance and add features in upcoming releases. We include performance results from running on the latest version of XFS to demonstrate the viability of our design. 1...|$|E
40|$|Large, spatial {{databases}} may {{be required}} to process both intense query and intense update loads. For example, a data warehouse which contains spatial data {{may be required}} to answer difficult, analytical queries {{at the same time as}} it accepts massive amounts of new data, and any downtime to merge new data into existing data organizations may be unacceptable. Traditional, incremental spatial access methods (like the popular R-tree and its variants) may be unacceptable for use in such an environment since they support relatively slow update rates, and may lead to a relatively poor global data organization resulting in slow query evaluation. In this paper, we present the details T 2 SM, which is an instantiation of the <b>linear</b> <b>file</b> template, for use with spatial data. In T 2 SM, data are organized as a set of ongoing, external memory sorts based on the STR algorithm. T 2 SM exhibits query performance similar to (and sometimes superior to) a bulk-loaded R-Tree, but at the same time is truly incremental and can maintain exceptional update rates. ...|$|E
5000|$|... #Subtitle level 3: IBM <b>Linear</b> Tape <b>File</b> System - Single Drive Edition ...|$|R
5000|$|Engineering Emmy Award: IBM and Fox Group for the Development and Application of LTFS (<b>Linear</b> Tape <b>File</b> System) ...|$|R
50|$|The HP <b>Linear</b> Tape <b>File</b> System (HP LTFS) is HP's implementation. It {{is a free}} {{open source}} {{software}} application.|$|R
40|$|ITC/USA 2010 Conference Proceedings / The Forty-Sixth Annual International Telemetering Conference and Technical Exhibition / October 25 - 28, 2010 / Town and Country Resort & Convention Center, San Diego, CaliforniaThe RCC IRIG Chapter 10 {{standard}} {{requires that}} Chapter 10 recorders use the STANAG- 4575 (NATO Advanced Data Storage Interface) file system to store data files. The STANAG- 4575 standard defines a <b>linear</b> <b>file</b> {{system in which}} each file is stored in a single contiguous block of disk space. There is a small directory listing {{at the beginning of}} the disk. This listing stores the starting position and length for each file. It also stores the file's name and its creation date and time. This file system is very efficient for storing files that are recorded sequentially because it does not require the disk to constantly update a file allocation table on each write. Unfortunately, the STANAG- 4575 file system is not directly supported by Microsoft Windows. This means that it is not possible to simply attach a recorder's disk to a PC and copy the files directly using Windows Explorer. This paper will discuss an approach that allows the contents of a STANAG formatted disk to be read from a standard Windows PC. In addition to copying files from the disk, this approach allows several other useful operations to be performed on the disk. These operations include advanced copy options such as partial file copies and splitting files into multiple pieces. It can also provide a mechanism for deleting files, reformatting the disk and performing a sanitization procedure on a disk to declassify it...|$|E
50|$|The <b>Linear</b> Tape <b>File</b> System (LTFS) is a self-describing tape {{format and}} file system made {{possible}} by the partition feature. File data and filesystem metadata are stored in separate partitions on the tape. The metadata, which uses a standard XML schema, is readable by any LTFS-aware system and can be modified separately from the data it describes. The <b>Linear</b> Tape <b>File</b> System Technical Work Group of the Storage Networking Industry Association (SNIA) works {{on the development of the}} format for LTFS.|$|R
50|$|In 2012, Quantum {{introduced}} its Scalar LTFS (<b>Linear</b> Tape <b>File</b> System) appliance, which offers new modes of portability and user accessibility for archived content on LTO tape.|$|R
5000|$|Analyze module: This module {{features}} three process representations (general and <b>linear</b> logging <b>file</b> and the s-notation of the text) {{and four}} aggregated levels of analysis (summary, pause, revision and source analyses). Additionally a process graph is produced.|$|R
40|$|We {{present a}} case of a 66 -year-old lady with chest pain, without dynamic 12 -lead electrocardiographic (ECG) changes and normal serial troponin. Coronary {{angiography}} revealed a <b>linear</b> <b>filing</b> defect in the first obtuse marginal branch of the circumflex artery indicating coronary artery dissection, with superadded thrombus. She was managed medically with dual antiplatelet therapy and has responded well. Spontaneous coronary artery dissection (SCAD) is a rare cause of cardiac chest pain, which can be missed without coronary angiography. Unlike most other lesions in patients with unstable symptoms, where coronary intervention with stenting is recommended, patients with SCAD generally fare better with conservative measures than with intervention, unless there is hemodynamic instability...|$|R
5000|$|TS2360 - Full-height {{external}} {{standalone or}} rack mountable shelf unit with a native physical capacity of 2.5 TB. The IBM Ultrium 6 technology {{is designed to}} support media partitioning, IBM <b>Linear</b> Tape <b>File</b> System (LTFS) technology and encryption of data and WORM cartridges.|$|R
50|$|QStar {{develops}} archive {{and data}} management software for storage devices. It supports several archive technologies (Tape, Optical, RDX, RAID, object storage and cloud) from several archive vendors. Options include proprietary and industry-standard file systems, such as <b>Linear</b> Tape <b>File</b> System and Universal Disk Format.|$|R
50|$|<b>Linear</b> Tape <b>File</b> System (LTFS) allows files {{stored on}} {{magnetic}} tape to be accessed {{in a similar}} fashion to those on disk or removable flash drives. It requires both a specific format of data on the tape media and software to provide a file system interface to the data.|$|R
50|$|EYE is {{performing}} a major film digitization and preservation project together with IBM and Thought Equity Motion, {{a provider of}} video platform and rights development services. The project involves scanning and storing more than 150 million discrete DPX files on LTO Gen5 Tape in the <b>Linear</b> Tape <b>File</b> System format.|$|R
5000|$|The IBM <b>Linear</b> Tape <b>File</b> System - Single Drive Edition, (initially {{released}} as [...] "IBM Long Term File System"), allows tapes to be formatted as an LTFS volume, and for these volumes to be mounted - and users and applications access files and directories stored {{on the tape}} directly, including drag-and-drop of files.|$|R
50|$|Oracle's free {{open source}} StorageTek <b>Linear</b> Tape <b>File</b> System (LTFS), Open Edition {{software}} is {{claimed to be}} the first to store 8.5TB (native capacity) on a single cartridge. It supports Oracle’s midrange StorageTek LTO 5 and LTO 6 tape drives from HP and IBM as well as Oracle’s StorageTek T10000C and T10000D tape drives.|$|R
2500|$|There are two layouts to the PDF files: {{non-linear}} (not [...] "optimized") and linear ("optimized"). Non-linear PDF files consume less {{disk space}} than their linear counterparts, {{though they are}} slower to access because portions of the data required to assemble pages of the document are scattered throughout the PDF <b>file.</b> <b>Linear</b> PDF <b>files</b> (also called [...] "optimized" [...] or [...] "web optimized" [...] PDF files) are constructed {{in a manner that}} enables them to be read in a Web browser plugin without waiting for the entire file to download, since they are written to disk in a linear (as in page order) fashion. PDF files may be optimized using Adobe Acrobat software or QPDF.|$|R
40|$|Huge {{amounts of}} {{biological}} data {{are stored in}} <b>linear</b> <b>files.</b> Biological proteins are sequences of amino acids. The quantities of data in these fields tend to increase year on year. String matching algorithms {{play a key role}} in many computer science problems, and in the implementation of computer software. For this reason efficient string-matching algorithms should be used which use minimal computer storage and which minimize the searching response time. In this study, we propose a new algorithm called the Random String Matching Algorithm (RSMA). RSMA combines our enhanced preprocessing phase from the Berry Ravindran algorithm with our proposed new searching phase procedure. This variety of searching order allows our proposed algorithm to reduce the number of comparison characters and enhances the searching response time. Experimental results show that the RSMA algorithm offers a smaller number of comparisons and offers improved elapsed searching time when compared to other well-known algorithms...|$|R
40|$|Huge {{amounts of}} data are stored in <b>linear</b> <b>files.</b> This {{is also the case}} for {{biological}} data. Biological proteins are sequences of amino acids. The quantities of data in these fields tend to increase year on year. For this reason efficient string-matching algorithms should be used which use minimal computer storage and which minimize the searching response time. In this paper, we propose a new algorithm called BRBMH algorithm which offers improved number of comparison and elapsed searching time when compared to the well-known algorithms such as BF, KMP, BM, BMH, KR, ZT, QS, BR, FS, SSABS, TVSBS, ZTBMH and BRFS algorithms. The experimental results show that the new algorithm is faster and perform fewer numbers of comparisons than other compared algorithms for any length of alphabets and patterns. So the proposed algorithm is applicable for searching protein sequence databases as well as in any other string searching applications...|$|R
5000|$|Recording and Reproducing Speech and Other Sounds (improvements include {{compliant}} cutting head, wax surface, {{and constant}} <b>linear</b> velocity disk), <b>filed</b> June 1885, issued May 1886 (with Charles Tainter) ...|$|R
50|$|The {{functionality}} of IBM Spectrum Archive {{is provided}} by IBM <b>Linear</b> Tape <b>File</b> System. IBM Spectrum Archive {{works in conjunction with}} LTO tape technology to simplify accessing data stored on an IBM tape cartridge. It allows users to run any application designed for disk files against tape data without concern {{for the fact that the}} data is physically stored on tape.|$|R
50|$|Crossroads {{announced}} on April 11th, 2011, to launch {{in a new}} tape-based archive product that leverages the <b>Linear</b> Tape <b>File</b> System (LTFS) technology. This solution will serve as an online archive for tier3(Tertiary storage) data, presenting itself as disk storage, but incorporating both disk for fast file storage and retrieval, and physical LTO tape for cost-effective, long-term capacity storage. Products available are StrongBOX T1 and StrongBOX T3.|$|R
40|$|The two- and three-noded {{spatially}} coupled thin-walled finite {{curved beam}} elements are presented {{on the basis}} of assumed strain fields. These elements consider the extensional/inextensional conditions along the centroid axis of curved beam. For curved beams with the extensional condition, the two-noded element is formulated from constant strain and linear curvature fields. And the strain is assumed as <b>linear</b> <b>filed</b> and curvatures are assumed to be third-order ones for the three-noded element. In addition the normal stress at an arbitrary point of symmetric and non-symmetric cross-sections is explicitly evaluated since strain and curvature functions are assumed independently. In order to illustrate the accuracy and the practical usefulness of the present assumed strain curved beam elements, the displacements and the normal stresses of curved beams are evaluated and compared with the previously published results and the solutions by the shell elements from SAP 2000. The emphasis is given in investigating the influence of inextensibility along the beam axis on the coupled behavior of curved beam with respect to the values of boundary condition, subtended angle, and slenderness ratio...|$|R
50|$|The IBM <b>Linear</b> Tape <b>File</b> System - Library Edition (LTFS-LE) product allows LTFS volumes {{to be used}} in a tape library. Each LTFS-formatted tape {{cartridge}} in the library appears as a separate folder under the filesystem mount point and the user or application can navigate into each of these folders to access the files stored on each tape. The LTFS-LE software automatically controls the tape library robotics to load and unload the necessary LTFS volumes.|$|R
40|$|Abstract—While {{there are}} many {{financial}} and practical reasons to prefer tape storage over disk for various applications, the difficultly of using tape {{in a general way}} is a major inhibitor to its wider usage. We present a file system that takes advantage {{of a new generation of}} tape hardware to provide efficient access to tape using standard, familiar system tools and interfaces. The <b>Linear</b> Tape <b>File</b> System (LTFS) makes using tape as easy, flexible, portable, and intuitive as using other removable and sharable media, such as a USB drive. I...|$|R
40|$|In {{designing}} imaging optical systems, {{the primary}} {{task is to}} correct aberrations. Aberrations are deviations from perfect imagery. They depend on both the filed size and pupil position. When the Constant Optical Path Length (OPL) condition is satisfied, an optical system is free of all orders of spherical aberrations, which have zero field dependence. When the Abbe Sine condition is satisfied, all the aberrations with <b>linear</b> <b>filed</b> dependence are corrected. The Abbe Sine condition does not involve any off-axis ray properties, but it predicts the correction of off-axis aberrations. We go one step beyond the Constant OPL condition and the Abbe Sine condition. By using Hamilton's characteristic functions, we developed a set of criteria for correcting the aberrations with quadratic field dependence and all orders of pupil dependence. These criteria involve only properties of the rays originating from the on-axis object point as the Abbe Sine condition does. Using these criteria, we analyzed some known designs and obtained new information about these designs. We also developed an algorithm to implement the criteria in designing well-corrected novel optical systems. Even when the criteria are not exactly satisfied, {{we now have a}} way to predict the residual quadratic field-dependent aberrations without tracing rays from any off-axis object point. We extended the Hamiltonian treatment to bilateral systems and developed similar criteria for correcting the quadratic field-dependent aberrations for this type of system...|$|R
40|$|The {{purpose of}} this study was to {{characterize}} the effect of zoledronic acid (a bisphosphonate used clinically to treat bone metastasis) on osteoblasts and a model of breast cancer metastasis to bone in vitro. Murine calvarial pre-osteoblasts (MC 3 T 3 -E 1) were grown to various stages of maturity in tissue culture and continuously treated with zoledronic acid (ZA) at 0. 05, 0. 50 or 5. 00 �M concentrations. Drug effects on osteoblast proliferation, differentiation and mineralization were assessed. Additionally, mineralized 3 D osteoblastic tissue was grown in a specialized bioreactor based on the principle of simultaneous-growth-and-dialysis. This 3 D bone model provides a unique test system in which cancer cell interactions with osteoblastic tissue at controlled phenotypic maturities can be monitored in real time. Using this system, human metastatic breast cancer cells (MDA-MB- 231) were co-cultured for 6 days with osteoblastic tissue in the activelymineralizing phase (120 days of continuous culture). Without added ZA, cancer cells were observed to attach, penetrate, and colonize osteoblastic-tissue in a continuous process that ultimately marshaled osteoblasts into <b>linear</b> <b>files</b> similar to that observed in authentic pathological tissue. A single dose of ZA (at 0. 50 μM and 0. 05 μM administered 3 days after co-culture was initiated) delayed cancer-cell penetration and colony formation, with osteoblasts retaining the characteristic cuboidal shape observed in controls for the first 2 days of co-culture. Thereafter, cancer-cell colonization progressed to the filing stage...|$|R
40|$|The optimal {{partition}} of a huge, <b>linear</b> (flat) <b>file</b> among processing nodes {{in a network}} to minimize the time to search for signatures {{of interest in the}} file is considered. First, an expression is developed for the expected time of finding the kth signature (including the last signature) of K signatures for a uniform distribution of signatures in the file. Secondly, for a single signature we propose processing data in the file in order from that with the most probability mass (i. e. data with the most a priori likelihood of containing the signature) to that with the least probability mass in a “greedy ” manner to speed processing time. Applications of this work include radar, sensors, image processing and search. I...|$|R
40|$|In this paper, a {{load sharing}} problem {{involving}} the optimal load allocation of very long <b>linear</b> data <b>files</b> over N processors interconnected in a bus-oriented network is investigated. Two distinct types of bus networks are {{examined in the}} case when {{there is more than}} one such outstanding divisible job in the network. These are a network with load origination at a control processor and a network with load origination at a computing processor. In both cases, it is assumed that each processor is equipped with a front-end processor for communications off-loading. It is found that a multi-job scheme outperforms a single-job scheme in terms of the total solution finish time. Closed form solutions and simple recursive algorithms for the determination of the optimal load allocation are also presented...|$|R
