3|38|Public
50|$|During {{the normal}} full {{operation}} of the power plant on , Unit 2 reactor scram was initiated followed by a main turbine trip. A universal <b>logic</b> <b>card</b> in the plant's solid-state protection system malfunctioned, erroneously reporting a low-low water level condition in the steam generators. This then caused the actuation of the auxiliary feed water system and reactor protection system.|$|E
40|$|Testing device {{measures}} {{simple and}} disjunctive reaction time of human subject to light stimuli. Tester consists of reaction key, <b>logic</b> <b>card,</b> panel mounted neon indicators, and interconnecting wiring. Device {{is used for}} determining reaction times of patients undergoing postoperative neurological therapy...|$|E
40|$|The Shuttle Upper Atmosphere Mass Spectrometer (SUMS), a {{component}} experiment of the NASA Orbital Experiments Program (OEX), was flown aboard the shuttle Columbia (OV 102) mounted at the forward {{end of the}} nose landing gear well with an atmospheric gas inlet system fitted to the lower fuselage (chin panel) surface. The SUMS was designed to provide atmospheric data in flow regimes inaccessible prior {{to the development of}} the Space Transportation System (STS). The experiment mission operation began about one hour prior to shuttle de-orbit entry maneuver and continued until reaching 1. 6 torr (about 86 km altitude). The SUMS mass spectrometer consists of the spare unit from the Viking mission to Mars. Bendix Aerospace under contract to NASA LaRC incorporated the Viking mass spectrometer, a microprocessor based <b>logic</b> <b>card,</b> a pressurized instrument case, and the University of Texas at Dallas provided a gas inlet system into a configuration suited to interface with the shuttle Columbia. The SUMS experiment underwent static and dynamic calibration as well as vacuum maintenance before and after STS 40 shuttle flight. The SUMS flew a total of 3 times on the space shuttle Columbia. Between flights the SUMS was maintained in flight ready status. The flight data has been analyzed by the NASA LaRC Aerothermodynamics Branch. Flight data spectrum plots and reports are presented in the Appendices to the Final Technical Report for NAS 1 - 17399...|$|E
5000|$|<b>Logic</b> <b>cards,</b> {{switching}} {{and control}} cards, power cards and related devices that facilitate PBX operation.|$|R
40|$|The {{design and}} {{fabrication}} of telemetry ground {{data processing equipment}} using commercial <b>logic</b> <b>cards</b> or modules are discussed. A microelectronics program was initiated to evaluate circuitry, packaging methods, and fabrication approaches necessary to produce a competitively procured logic system. The NAS-PAK logic system covering all phases of implementation is considered...|$|R
50|$|Wolfson Microelectronics also {{produced}} the Audio Cards for Raspberry PI Model B Rev 2 named Wolfson Audio Card. After Wolfson Microelectronics {{was purchased by}} Cirrus <b>Logic</b> the Audio <b>Card</b> for Raspberry PI Model B+ was renamed Cirrus <b>Logic</b> Audio <b>Card.</b>|$|R
5000|$|Some {{logic gates}} are more robust {{than others to}} a change to their inputs. Therefore, not all <b>logic</b> gate <b>cards</b> have the same {{strategic}} value.|$|R
50|$|The Univac 1830, Navy {{designated}} CP-823/U, was {{a digital}} electronic computing machine which received problems and data and processed answers in numerical form. It used parallel binary arithmetic and logic operations; word length was 30 bits. All of the Central Processor (C.P.) logic and I/O logic control was microelectronic circuitry, constructed of integrated, monolithic semiconductor elements (resistors, {{diodes and transistors}} contained within a single chip of silicon). <b>Logic</b> <b>cards</b> that were not microelectronic are the Master Clock cards in the C.P and the Input amplifier and output data driver cards in the I/O units.|$|R
2500|$|Emulated Cirrus <b>Logic</b> graphic <b>cards</b> {{are used}} in emulators. QEMU emulate the Cirrus CLGD 5446 PCI VGA-card, which is also {{emulated}} by Bochs (which in addition also emulates the CL-GD5430 ISA ...|$|R
40|$|Interlocks are an {{important}} feature of both personnel and machine protection systems for mitigating risks inherent in operation of dangerous equipment. The purpose of an interlock is to secure specific equipment or entire systems under well defined conditions {{in order to prevent}} accidents from happening. Depending on specific requirements for the level of reliability, availability, speed, and cost of the interlock, various technologies are available. Different approaches are discussed, in particular in the context of personnel safety systems, which have been built or tested at CERN during the last few years. Technologies discussed include examples of programmable devices, PLCs and FPGAs, as well as wired logic based on relays and special <b>logic</b> <b>cards...</b>|$|R
50|$|In 1994 Jordan Hargraphix Software {{released}} SVGA BGI drivers version 5.5 {{that are}} compatible with some SVGA hardware like ATI or Cirrus <b>Logic</b> <b>cards</b> and VESA VBE-compatible cards. Also there are tweaked VGA drivers for non-standard graphic modes supported by VGA by writing directly into its registers, protected mode driver versions for Turbo Pascal 7.0 and mouse driver (actually cursor handler for unsupported video modes by standard mouse drivers). These drivers were shareware and buying them let receiving their source code and technical support; now {{they are no longer}} supported and come as abandonware. Main bugs are lack of aligning bytes support in VESA TrueColor modes (so TrueColor driver is not suitable for Nvidia graphic cards) and video memory bank switching bug in mouse driver (since real mode addressing space is 1 megabyte, but some video modes require up to 4 megabytes of memory, it is split into 64 kilobyte banks).|$|R
5000|$|The 2650 {{was also}} used in some large items of {{equipment}} such as the Tektronix 8540, a microprocessor software development system which supported various in-circuit emulator, trace memory and <b>logic</b> analyser <b>cards</b> for real-time debugging of microprocessor systems, as practiced in the 1980s. The 2650 provided the base operating system functions, data transfer, and interface to a host computer or serial computer terminal.|$|R
50|$|The Luck & <b>Logic</b> trading <b>card</b> {{game was}} officially {{released}} in Japan on January 28, 2016. Trial deck 1 and 2, Brave Logic and Rinne Logic respectively, {{as well as}} the first booster expansion, Growth & Genesis, was released in english on the 24th of June 2016. Booster set 5, Trance Re:union, was the last set released for english edition of the game, which released the 31st of March 2017.|$|R
40|$|Test trap {{consists}} of logic nest of five printed circuit boards, plus power supply within the unit. Device monitors {{more than one}} logic area simultaneously, gives visual display of detected error, operates at computer speed, maintains readily available <b>logic</b> description of <b>cards</b> used, and is compatible with existing computer circuitry...|$|R
5000|$|Additional 1108 {{hardware}} instructions included {{double precision}} arithmetic, double-word load, store, and comparison instructions. The processor could {{have up to}} 16 input/output channels for peripherals. The 1108 CPU was, {{with the exception of}} the 128-word (200 octal) ICR (Integrated Control Register) stack, entirely implemented via discrete component <b>logic</b> <b>cards,</b> each with a 55-pin high density connector, which interfaced to a machine wire wrapped backplane. Additional hand applied twisted pair wiring was utilized to implement backplane connections with sensitive timing, connections between machine wire wrapped backplanes, and connections to the I/O channel connector panel in the lower section of the CPU Cabinet. The ICR (Integrated Control Register) stack was implemented with [...] "new" [...] integrated circuit technology, replacing the thin film registers on the 1107. The ICR consisted of 128 38-bits, with a half-word Parity Bit calculated and checked with each access. The ICR was logically the first 128 memory addresses (200 Octal), but was contained in the CPU. The core memory was contained in a one or more separate cabinet(s), and consisted of two separate 32K modules, for a total capacity of 64K 38-bit words (36-bits data and a Parity Bit for each 18-bit half-word). The basic cycle time of the core memory was 750 ns, and the supporting circuitry was implemented with the same circuit card/backplane technology as the 1108 CPU.|$|R
5000|$|Direct {{memory access}} (DMA) is where some other device {{other than the}} CPU assumes control of the system bus to move data to or from the NIC to memory. This removes load from the CPU but {{requires}} more <b>logic</b> on the <b>card.</b> In addition, a packet buffer on the NIC may not be required and latency can be reduced.|$|R
5000|$|A smart card, chip card, or {{integrated}} circuit card (ICC), is any pocket-sized card with embedded {{integrated circuit}}s which can process data. This implies {{that it can}} receive input which is processed [...] - [...] {{by way of the}} ICC applications [...] - [...] and delivered as an output. There are two broad categories of ICCs. Memory cards contain only non-volatile memory storage components, and perhaps some specific security <b>logic.</b> Microprocessor <b>cards</b> contain volatile memory and microprocessor components. The card is made of plastic, generally PVC, but sometimes ABS. The card may embed a hologram to avoid counterfeiting. Using smart cards is also a form of strong security authentication for single sign-on within large companies and organizations.|$|R
40|$|I {{designed}} a PCI card capable of simultaneously digitizing two channels of NTSC video with 780 x 525 24 bit RGB pixels per frame, with a 30 Hz frame rate. However, {{for reasons of}} practicality and utility, lower resolutions were the primary design target. Specifically, 320 x 200 8 bit monochrome pixels per frame, which provides a telepresence data feed to the Engineering Department's ViO goggles from the Department's CCD cameras. The brightness, luminance, and chroma of each video channel can be adjusted independently on card, and YIQ {{can be converted to}} other color models, such as RGB, using on-chip logic. The core <b>logic</b> of <b>card</b> was modeled in VHDL and verified using Altera's MAX+PLUS II development software. Plans to fabricate the card were abandoned due to lack of resources...|$|R
50|$|A {{contactless}} {{smart card}} is a contactless 13.56-MHz credential whose dimensions are credit-card size. Its embedded integrated circuits can store and sometimes process data and communicate with a terminal via radio waves. There are two broad categories of {{contactless smart card}}s. Memory cards contain non-volatile memory storage components, and perhaps some specific security <b>logic.</b> Contactless smart <b>cards</b> do contain read-only RFID called CSN (Card Serial Number) or UID, and a re-writeable smart card microchip that can be transcribed via radio waves.|$|R
5000|$|... the Function Processor or FP is {{in essence}} a line card, {{but there is}} {{processing}} logic and queue <b>logic</b> on the <b>card.</b> This allows for packets to be directly manipulated on the FP, decreasing the load on the CP. FPs normally process data frames on the ingress path and can autonomously forward frames to egress ports without further processing by protocol or control software on the egress FP. This is done by implementing backplane transfer, egress queuing and subsequent transmission all using ASICs.|$|R
50|$|Magic Online {{is played}} as an {{electronic}} analogue {{to the physical}} card game. Digital artwork reproduces {{the look of the}} paper card game, and users interact with their cards to play with them on a virtual tabletop. Each game is hosted by the Magic Online servers, which apply a rules engine to enforce proper play. The <b>logic</b> for handling <b>card</b> interactions is provided by Perl scripts. Though the rules set as a whole is largely accurate and works well, it occasionally suffers from bugs.|$|R
5000|$|Due to {{the nature}} of Magics gameplay, in which any card can {{override}} the games core rules, Duels was developed using a combination of C++ for the core engine and the Lua scripting language, wrapped in XML, to provide <b>logic</b> for specific <b>cards.</b> [...] The engine was developed in this fashion to allow for future expansions on the game, including adding new cards and complexities to it. The game is able to handle cards with more complex rules, though these may require additional programming.|$|R
50|$|These {{circuits}} {{were constructed}} of discrete components (resistors, capacitors, transistors) mounted on single sided paper-epoxy {{printed circuit boards}} either 2.5 by 4.5 in with a 16-pin gold plated edge connector (single wide) or 5.375 by 4.5 in with two 16-pin gold plated edge connectors (double wide), that IBM referred to as SMS cards (Standard Modular System). The amount of <b>logic</b> on one <b>card</b> {{was similar to that}} in one 7400 series SSI or simpler MSI package (e.g., 3 to 5 logic gates or a couple of flip-flops on a single wide card up to about 20 logic gates or 4 flip-flops on a double wide card).|$|R
5000|$|The Dazzler used over 70 MOS and TTL IC's, which {{required}} two cards to hold all the chips, [...] "Board 1" [...] held the analog circuits, while [...] "Board 2" [...] held the bus interface and digital <b>logic.</b> The two <b>cards</b> were connected {{together with a}} 16-conductor ribbon cable. Although the analog card did not talk on the bus, it would normally be plugged into the bus for power connections and physical support within the chassis. The manual also described a way to [...] "piggyback" [...] the two cards with a separate power cable to save a slot. Output from the analog card was composite color, and an RF modulator was available for direct connection to a color TV.|$|R
50|$|As {{computing}} resources continued to expand over {{the remainder of}} the decade through the adoption of time sharing and the development of simpler high-level programming languages like BASIC, an increasing number of college students began programming and sharing simple sports, puzzle, <b>card,</b> <b>logic,</b> and board games as the decade progressed. These creations remained trapped in computer labs for {{the remainder of the}} decade, however, because even though some adherents of Spacewar! had begun to sense the commercial possibilities of computer games, they could only run on hardware costing hundreds of thousands of dollars. As computers and their components continued to fall in price, however, the dream of a commercial video game finally became attainable at the start of the 1970s.|$|R
40|$|The game of Cluedo – {{also known}} as Clue – {{requires}} working out a ‘murder’ scene by elimination. Beginners typically rely only on cards in their hand and cards they have seen; experts also use propositional <b>logic</b> about <b>cards</b> they have not seen, based on questions asked and answers given.   A game-playing program has been written to test the value of using deductions to guide question-asking. This paper describes how {{the program has been}} designed and presents results for five strategies (including a ‘no intelligence’ strategy) for three player games and six player games. The program has been written using JESS (the Java Expert System Shell).   The results were not quite as expected. Using propositional logic did indeed allow the game to be solved in fewer turns, but there were times when adding extra information to the logical deductions made things worse, not better. There is also a strong effect from the mechanics of the game – specifically, which room is chosen as the ‘guilty’ location – on the number of turns required to solve the problem.   It is suggested that strategies might benefit from occasionally breaking away from their highly focussed approach to inject variety into the questioning  The test cases used are listed in an appendix...|$|R
50|$|A TV tuner card {{is a kind}} of {{television}} tuner that allows television signals to be received by a computer. Most TV tuners also function as video capture cards, allowing them to record television programs onto a hard disk much like the digital video recorder (DVR) does. The interfaces for TV tuner cards are most commonly either PCI bus expansion card or the newer PCI Express (PCIe) bus for many modern cards, but PCMCIA, ExpressCard, or USB devices also exist. In addition, some video cards double as TV tuners, notably the ATI All-In-Wonder series. The card contains a tuner and an analog-to-digital converter (collectively known as the analog front end) along with demodulation and interface <b>logic.</b> Some lower-end <b>cards</b> lack an onboard processor and, like a Winmodem, rely on the system's CPU for demodulation.|$|R
5000|$|The {{length of}} the slot and number of pins made VLB cards {{notoriously}} difficult to install and remove. The sheer mechanical effort required was stressful to both the card and the motherboard, and breakages were not uncommon. This was compounded by the extended {{length of the}} <b>card</b> <b>logic</b> board; often {{there was not enough}} room in the PC case to angle the card into the slot, requiring it to be pushed with great force straight down into the slot. To avoid excessive flexing of the motherboard during this action the chassis and motherboard had to be designed with good, relatively closely spaced supports for the motherboard, which was not always the case, and the person inserting the board had to distribute the downward force evenly across its top edge.|$|R
40|$|KeY is a {{tool that}} {{provides}} facilities for formal specification and verification of programs within a commercial platform for UML based software development. Using the KeY tool, formal methods and object-oriented development techniques are applied in an integrated manner. Formal specification is performed using the Object Constraint Language (OCL), {{which is part of}} the UML standard. KeY provides support for the authoring and formal analysis of OCL constraints. The target language of KeY based development is Java Card DL, a proper subset of Java for smart card applications and embedded systems. KeY uses a dynamic <b>logic</b> for Java <b>Card</b> DL to express proof obligations, and provides a state-of-the-art theorem prover for interactive and automated verification. Apart from its integration into UML based software development, a characteristic feature of KeY is that formal specification and verification can be introduced incrementally...|$|R
5000|$|The {{theoretical}} {{foundation of}} KeY is a formal <b>logic</b> called Java <b>Card</b> DL. DL stands for Dynamic Logic. It is {{a version of}} a first-order dynamic logic tailored to Java Card programs. As such, it for example allows statements (formulas) like , which intuitively says that the post-condition [...] must hold in all program states reachable by executing the Java Card program [...] in any state that satisfies the pre-condition [...] This is equivalent to [...] in Hoare calculus if [...] and [...] are purely first order. Dynamic logic, however, extends Hoare logic in that formulas may contain nested program modalities such as , or that quantification over formulas which contain modalities is possible. There is also a dual modality [...] which includes termination. This dynamic logic {{can be seen as}} a special multi-modal logic (with an infinite number of modalities) where for each Java block [...] there are modalities [...] and [...]|$|R
40|$|Abstract KeY is a {{tool that}} {{provides}} facilities for formal speci¯cation and veri¯cation of programs within a commercial platform for UML based soft-ware development. Using the KeY tool, formal methods and object-oriented development techniques are applied in an integrated manner. Formal spec-i¯cation is performed using the Object Constraint Language (OCL), {{which is part of}} the UML standard. KeY provides support for the authoring and? The research reported here has been partially supported by STINT, Veten-skapsrºadet, Vinnova, and DFG. 2 Wolfgang Ahrendt et al. formal analysis of OCL constraints. The target language of KeY based devel-opment is JAVA CARD, a proper subset of JAVA for smart card applications and embedded systems. KeY uses a dynamic <b>logic</b> for JAVA <b>CARD</b> to ex-press proof obligations, and provides a state-of-the-art theorem prover for interactive and automated veri¯cation. Apart from its integration into UML based software development, a characteristic feature of KeY is that formal speci¯cation and veri¯cation can be introduced incrementally. Key words object-oriented design|formal speci¯cation|formal veri¯-cation|UML|OCL|design patterns|JAVA...|$|R
40|$|Abstract. KeY is a {{tool that}} {{provides}} facilities for formal specification and verification of programs within a commercial platform for UML based software development. Using the KeY tool, formal methods and object-oriented development techniques are applied in an integrated manner. Formal specification is performed using the Object Constraint Language (OCL), {{which is part of}} the UML standard. KeY provides support for the authoring and formal analysis of OCL constraints. The target language of KeY based development is Java Card DL, a proper subset of Java for smart card applications and embedded systems. KeY uses a dynamic <b>logic</b> for Java <b>Card</b> DL to express proof obligations, and provides a state-of-the-art theorem prover for interactive and automated verification. Apart from its integration into UML based software development, a characteristic feature of KeY is that formal specification and verification can be introduced incrementally. Keywords: Object-oriented design – Formal specification – Formal verification – UML – OCL – Design patterns – Java...|$|R
40|$|In this paper, I {{describe}} a Dynamic <b>Logic</b> for Java <b>Card</b> and outline a sequent calculus for this logic that axiomatises Java Card. The {{purpose of the}} logic {{is to provide a}} framework for software verication that can be integrated into real-world software development processes. 1 Introduction Design principles and goals. The work that is reported in this paper has been carried out as part of the KeY project [1]. The goal of KeY is to enhance a commercial CASE tool with functionality for formal specication and deductive verication and, thus, to integrate formal methods into real-world software development processes. Accordingly, the design principles for the software verication component of the KeY system are: The programs that are veried should be written in a " object-oriented (OO) programming language. The logical formalism should be as easy as possible to use for software developers (that do not have years of training in formal methods). Java Card. We use Java C [...] ...|$|R
40|$|This paper {{reports on}} the ongoing KeY project aimed at {{bridging}} the gap between (a) object-oriented software engineering methods and tools and (b) deductive verification {{for the development of}} JAVA CARD programs. In particular, we describe a Dynamic <b>Logic</b> for JAVA <b>CARD</b> and outline a sequent calculus for this logic that axiomatises JAVA CARD and is used in the verification component of the KeY system. 1 Introduction The goal of the project 1 (read "key") is to enhance a commercial CASE tool with functionality for formal specification and deductive verification and, thus, to integrate formal methods into real-world software development processes. Accordingly, the design principles for the software verification component of the KeY system are: The programs to be verified should be written in a "real" object-oriented (OO) programming language. The logical formalism should be as easy as possible to use for software developers (that do not have years of training in formal methods). [...] ...|$|R
40|$|This {{card game}} program {{is based on}} the basic <b>logic</b> of {{blackjack}} <b>card</b> games. Blackjack also known as twenty one game. The winner is the biggest values or the one who received a value of twenty one. This program is simple blackjack card game used C language and array data structure. This game have two players and a deck of card. Start game with 52 cards shuffled and dealt for 2 players. Each player has 26 cards. Shuffled cards using swap method. Two top cards summed and compared with other players. The player who has the largest card value wins. But the values of the cards should not exceed 21. If one player has a cards value over 21 will lose. Cards that have been played will be removed from the game. This game will finished if the player's card runs out. This program could not distribute the 2 cards directly from the deck to the players and added more card for bigger values...|$|R
40|$|The {{race card}} {{is at once}} a trope and a topic that reductively prefigures racial meaning and performance. As a trope, it frames most racial {{discourse}} as a cheat or violation and thus prevents deliberation over material realities of race. As a topic, it exists {{as a resource for}} diminishing the social and political significance of persistent racial problems. We argue that The Daily Show with Jon Stewart (TDS) deploys political humor as a troping device that disrupts the contradictory <b>logics</b> of race <b>card</b> rhetoric and disorders a range of reductive commonplaces and figures of racial discourses. Specifically, we maintain that TDS pushes the boundaries of everyday negotiations of race, performs alternative conventions, and models manners of thinking, speaking, and acting useful for contemporary understandings of race. This essay therefore enhances the contemporary body of scholarship on politics and humor while expanding upon analyses of the rhetoricity of race and race relations...|$|R
