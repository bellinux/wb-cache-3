408|153|Public
25|$|Freedman's {{graduate}} {{work at the}} University of Calgary had involved {{the development of a}} process migration subsystem for networks of Sun Microsystems computers. From 1992 - 1994, the company commercialized that work, developing the company's <b>Load</b> <b>Balancer</b> product, which was a versatile system for distributing batch jobs across the increasingly larger networks of computers emerging at that time. Freedman hired Theo de Raadt as FSA's first employee. De Raadt's programming and architecture competence have since been proven in his OpenBSD operating system project, but at the time FSA Corporation was his first job since graduating from the University of Calgary. In January, 1994, the <b>Load</b> <b>Balancer</b> product line was sold to Unison Tymlabs, which needed a UNIX-based product line ahead of its IPO. Unison has since been absorbed via acquisition by IBM, and the <b>load</b> <b>balancer</b> product line is now sold by IBM.|$|E
25|$|The WRT54GS {{is nearly}} {{identical}} to the WRT54G except for additional RAM, flash memory, and SpeedBooster software. Versions 1 to 3 of this router have 8MB of flash memory. Since most third parties' firmware only use up to 4MB flash, a JFFS2-based read/write filesystem can be created and used on the remaining 4MB free flash. This allows for greater flexibility of configurations and scripting, enabling this small router to both load-balance multiple ADSL lines (multi-homed) or to be run as a hardware layer-2 <b>load</b> <b>balancer</b> (with appropriate third party firmware).|$|E
25|$|In early 1995, Paul Scripko {{joined the}} company as its first VP of Sales. He and Freedman had met at Unison Tymlabs, where he had assumed {{responsibility}} for sales of FSA's <b>Load</b> <b>Balancer</b> product line after its acquisition in 1994. Scripko professionalized FSA's sales machine, and the company immediately began to derive higher revenues from larger customers. Also around this time, Benjamin Freedman (brother of Dan Freedman) began to work part-time as the company's VP of Marketing. Gary Neill was brought on board by Dan Freedman as a management consultant in the Fall of 1995, and remained with the company until its acquisition by McAfee in 1996.|$|E
50|$|The {{classifier}} chips {{were used}} in Network Switches and <b>Load</b> <b>Balancers.</b>|$|R
5000|$|Configuration and {{management}} of networking equipment such as routers, switches, firewalls, <b>load</b> <b>balancers</b> ...|$|R
50|$|LineRate virtual <b>load</b> <b>balancers</b> support X-Forwarded-For via {{command line}} drive configurations, or via node.js scripts.|$|R
25|$|FSA Corporation (formerly Freedman, Sharp, and Associates) {{developed}} UNIX and Windows system level {{software for}} security and distributed system {{administration in the}} 1990s. The company provided the underlying technology basis for software offerings by IBM, Symantec, and McAfee. FSA's best known products were its <b>Load</b> <b>Balancer</b> distributed workload management solution, its PowerBroker secure system administration solution for controlling and auditing the power of root on UNIX networks, and its CipherLink network encryption solution. The company was acquired by McAfee in 1996. The company was a testing ground for Theo de Raadt's ideas concerning open-source software, {{which led to the}} OpenBSD operating system. De Raadt was FSA's first non-founding employee.|$|E
25|$|The sale of <b>Load</b> <b>Balancer</b> {{left the}} company with staff and cash, but no product. Freedman had {{developed}} and marketed a 3-day UNIX security course in 1992, and had developed significant contacts within the banking, defense, and chip-making communities. These customers all had similar problems in managing large UNIX networks, specifically concerning the control and audit {{of the actions of}} the systems' administrators. The problem was that the root account used by systems administrators when reconfiguring parts of the system, was able to edit any of the audit trails created by the system. Freedman designed a new product, PowerBroker, that was similar in concept to today's sudo products, but which allowed centralized control and auditing of an entire network even down to the keystroke level, with the logs stored on a dedicated remote computer to which the system administrators typically did not have access. By vetting all access and logging through this remote machine, a secure log could be maintained. The system was ported to over 22 versions of UNIX to accommodate the newer, larger networks with hundreds or thousands of machines. Dean Huxley was responsible for most of the system-level programming on PowerBroker with Kevin Chmilar and Earle Lowe also contributing.|$|E
50|$|In March 2014, KEMP {{announced}} availability on the Microsoft Azure Cloud platform (the first <b>load</b> <b>balancer</b> available there) of the VLM for Azure LoadMaster, {{a virtual}} <b>load</b> <b>balancer.</b>|$|E
50|$|Large server farms {{typically}} also place <b>load</b> <b>balancers</b> {{between the}} front end servers and the network.|$|R
40|$|Abstractâ€”One key {{adaptation}} mechanism often {{deployed in}} networking and computing systems is dynamic load balancing. The goal from employing dynamic <b>load</b> <b>balancers</b> {{is to ensure}} that the offered load would be judiciously distributed across resources to optimize the overall performance. To that end, this paper discovers and studies new instances of Reduction of Quality (RoQ) attacks that target the dynamic operation of <b>load</b> <b>balancers.</b> Our exposition is focused on a number of load balancing policies that are either employed in current commercial products or have been proposed in literature for future deployment. Through queuing theory analysis, numerical solutions, simulations and Internet experiments, we are able {{to assess the impact of}} RoQ attacks through the potency metric. We identify the key factors, such as feedback delay and averaging parameters, that expose the trade-offs between resilience and susceptibility to RoQ attacks. These factors could be used to harden <b>load</b> <b>balancers</b> against RoQ attacks. To the best of our knowledge, this work is the first to study adversarial exploits on the dynamic operation of <b>load</b> <b>balancers...</b>|$|R
50|$|Numerous {{scheduling}} algorithms, {{also called}} load-balancing methods, {{are used by}} <b>load</b> <b>balancers</b> to determine which back-end server to send a request to.Simple algorithms include random choice or round robin. More sophisticated <b>load</b> <b>balancers</b> may take additional factors into account, such as a server's reported load, least response times, up/down status (determined by a monitoring poll of some kind), number of active connections, geographic location, capabilities, or how much traffic it has recently been assigned.|$|R
5000|$|For Internet services, {{server-side}} <b>load</b> <b>balancer</b> {{is usually}} a software program that is listening on the port where external clients connect to access services. The <b>load</b> <b>balancer</b> forwards requests {{to one of the}} [...] "backend" [...] servers, which usually replies to the <b>load</b> <b>balancer.</b> This allows the <b>load</b> <b>balancer</b> to reply to the client without the client ever knowing about the internal separation of functions. It also prevents clients from contacting back-end servers directly, which may have security benefits by hiding the structure of the internal network and preventing attacks on the kernel's network stack or unrelated services running on other ports.|$|E
5000|$|<b>Load</b> <b>balancer</b> {{forwards}} packets to {{web servers}} according to different workloads on servers. However, {{it is hard}} to implement a scalable <b>load</b> <b>balancer</b> because of both the [...] "cloud's commodity business model and the limited infrastructure control allowed by cloud providers." [...] Client-side <b>Load</b> <b>Balancer</b> (CLB) solve this problem by using a scalable cloud storage service.CLB allows clients to choose back-end web servers for dynamic content although it delivers static content.|$|E
5000|$|... #Subtitle level 2: Client-side <b>Load</b> <b>Balancer</b> Using Cloud Computing ...|$|E
40|$|International audienceThe power {{consumption}} of the High Performance Computing (HPC) systems is an increasing concern as large-scale systems grow in size and, consequently, consume more energy. In response to this challenge, we have develop and evaluate new energy-aware <b>load</b> <b>balancers</b> to reduce the average power demand and save energy of parallel systems when scientific applications with imbalanced load are executed. Our <b>load</b> <b>balancers</b> combine dynamic <b>load</b> balancing with DVFS techniques {{in order to reduce}} the clock frequency of underloaded computing cores which experience some residual imbalance even after tasks are remapped. The results show that our <b>load</b> <b>balancers</b> present power reductions of 7. 5 % in average with the fine-grained variant that performs per-core DVFS, and of 18. 75 % with the coarse-grained variant that performs per-chip DVFS over real applications...|$|R
5000|$|HP Cloud <b>Load</b> <b>Balancers</b> are a managed load {{balancing}} service {{that allow for}} the automatic distribution of incoming traffic across compute resources.|$|R
5000|$|<b>Load</b> <b>balancers</b> {{provide one}} point of entry to a service, but forward traffic flows {{to one or more}} hosts that {{actually}} provide the service.|$|R
50|$|Red Hat {{adapted the}} Piranha load {{balancing}} software {{to allow for}} transparent load balancing and failover between servers. The application being balanced does not require special configuration to be balanced, instead a Red Hat Enterprise Linux server with the <b>load</b> <b>balancer</b> configured, intercepts and routes traffic based on metrics/rules set on the <b>load</b> <b>balancer.</b>|$|E
50|$|Cisco ACE Load Balancing Modules {{can also}} insert this field, usually {{implemented}} when the <b>load</b> <b>balancer</b> is configured to perform source NAT, {{to allow the}} <b>load</b> <b>balancer</b> to exist in a one-armed configuration, while providing a mechanism that the real servers can use to account for client source IP address. The reference mentions x-forward, however X-Forwarded-For can be substituted.|$|E
50|$|The Profense <b>Load</b> <b>Balancer</b> {{distributes}} traffic between {{web servers}} and assists compression and acceleration.|$|E
50|$|CDNs use {{a variety}} of methods of content {{delivery}} including, but not limited to, manual asset copying, active web caches, and global hardware <b>load</b> <b>balancers.</b>|$|R
40|$|The goal of load {{balancing}} is to assign to each node {{a number of}} tasks proportional to its performance. On distributed-memory machines, {{it is important to}} take data dependencies into account when distributing tasks, since they have a big impact on the communication requirements of the distributed application. Many <b>load</b> <b>balancers</b> have been proposed that deal with applications with homogeneous tasks, but applications with heterogeneous tasks have proven to be far more complex to handle. In this paper we present a {{load balancing}} architecture that can deal with applications with heterogeneous tasks. The idea is to provide a set of <b>load</b> <b>balancers</b> that are effective for different types of homogeneous tasks, and to allow users to combine these <b>load</b> <b>balancers</b> for applications with heterogeneous tasks. We implemented this architecture on the Nectar multicomputer and we present performance results for several applications with homogeneous and heterogeneous tasks. Keywords: load balancing, hetero [...] ...|$|R
50|$|Managed {{services}} include dedicated servers, {{data center}} migrations, switch and router maintenance, VMware, storage, high-availability <b>load</b> <b>balancers,</b> backup and recovery, remote hands, firewalls, and application, service, and infrastructure monitoring.|$|R
50|$|<b>Load</b> <b>balancer</b> for {{the public}} content which routes traffic to a pool of eight servers.|$|E
5000|$|LineRate Systems in 2013 (high-performance, {{software-based}} <b>Load</b> <b>Balancer</b> for x86 {{systems with}} node.js datapath scripting) ...|$|E
50|$|In May 2015, KEMP {{announced}} {{and launched}} the world's first software defined network (SDN) ready adaptive <b>load</b> <b>balancer.</b>|$|E
50|$|Brocade {{also sells}} {{software-based}} networking devices including technology for SDN, Network virtualization, virtual routers, virtual firewalls, virtual Application Delivery Controllers (<b>load</b> <b>balancers),</b> network security appliances and VPNs through its wholly owned subsidiary, Vyatta.|$|R
5000|$|F5 Networks <b>load</b> <b>balancers</b> support [...] {{one-armed}} and multi-armed configurations. Big-IP {{may also}} be configured to delegate trust to proxies more than one hop away, and accept custom X-Forwarded-For headers from other sources.|$|R
30|$|For compute resources, {{the maximum}} number of instances, open ports can be specified. Additionally, one can specify if they are load {{balanced}} using some <b>load</b> <b>balancers,</b> like {{in the case of the}} Web server tier described in Listing 1.|$|R
50|$|When {{a client}} {{application}} calls a service provider or stored procedure through the server, a KSP server {{with a matching}} service provider or stored procedure is selected by the <b>load</b> <b>balancer</b> provider, and the request is routed to the appropriate KSP server. If a server, service provider, or stored procedure in the KSP server farm is unavailable, it will {{be taken out of}} rotation by the <b>load</b> <b>balancer</b> automatically.|$|E
50|$|One would {{normally}} deploy a <b>load</b> <b>balancer</b> to ensure high availability for a server cluster {{at the system}} level.|$|E
5000|$|Å»arnowiec Pumped Storage Power Station - a pumped-storage plant {{originally}} intended {{only as an}} energy reservoir and <b>load</b> <b>balancer</b> ...|$|E
50|$|The company {{introduced}} hardware-based server <b>load</b> <b>balancers</b> nearly {{simultaneously with}} other large {{companies such as}} F5 Networks in the late 1990s. The company has its headquarters in San Jose, California, and maintains engineering facilities in Millerton, New York, USA.|$|R
25|$|On April 2, 2015, Cisco {{announced}} plans to buy Embrane, a software-defined networking startup. The deal will give Cisco Embrane's software platform, which provides layer 3â€“7 network services for things such as firewalls, VPN termination, server <b>load</b> <b>balancers</b> and SSL offload.|$|R
30|$|Network Resource: {{includes}} the network cards that connect into servers {{as well as}} infrastructure components that include repeaters, <b>load</b> <b>balancers,</b> switches and firewalls. Networks can use different topologies and protocols, which influence the level of security, resilience and Quality of Service.|$|R
