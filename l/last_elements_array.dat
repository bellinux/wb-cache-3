0|4894|Public
5000|$|The {{number of}} <b>elements</b> in an <b>array</b> can be {{determined}} either by evaluating the array in scalar context or {{with the help of}} the [...] sigil. The latter gives the index of the <b>last</b> <b>element</b> in the <b>array,</b> not the number of elements. The expressions scalar(@array) and ($#array + 1) are equivalent.|$|R
5000|$|In the Perl {{programming}} language, # {{is used as}} a modifier to array syntax {{to return}} the index number of the <b>last</b> <b>element</b> in the <b>array,</b> e.g., @array's <b>last</b> <b>element</b> is at [...] The number of elements in @array is $#array + 1, since Perl arrays default to using zero based indices. If the array has not been defined, the return is also undefined. If the array is defined but has not had any elements assigned to it, e.g., @array = (...) then $#array returns &minus;1. See the section on Array functions in the Perl language structure article.|$|R
5000|$|Binary MSD radix sort, {{also called}} binary quicksort, can be {{implemented}} in-place by splitting the input array into two bins - the 0s bin and the 1s bin. The 0s bin is grown {{from the beginning of}} the array, whereas the 1s bin is grown from the end of the array. The 0s bin boundary is placed before the first <b>array</b> <b>element.</b> The 1s bin boundary is placed after the <b>last</b> <b>array</b> <b>element.</b> The most significant bit of the first <b>array</b> <b>element</b> is examined. If this bit is a 1, then the first element is swapped with the element in front of the 1s bin boundary (the <b>last</b> <b>element</b> of the <b>array),</b> and the 1s bin is grown by one element by decrementing the 1s boundary array index. If this bit is a 0, then the first element remains at its current location, and the 0s bin is grown by one <b>element.</b> The next <b>array</b> <b>element</b> examined is the one in front of the 0s bin boundary (i.e. the first element that is not in the 0s bin or the 1s bin). This process continues until the 0s bin and the 1s bin reach each other. The 0s bin and the 1s bin are then sorted recursively based on the next bit of each <b>array</b> <b>element.</b> Recursive processing continues until the least significant bit has been used for sorting. [...] Handling signed integers requires treating the most significant bit with the opposite sense, followed by unsigned treatment of the rest of the bits.|$|R
40|$|A {{rectangular}} waveguide narrow-wall longitudinal-aperture array (slot array) {{is designed to}} perform {{as close to a}} uniform array with minimum power reflected into the feed-waveguide as possible using microwave network analysis. The array is designed by optimizing the mutual coupling through the waveguide between the elements. For this analysis, the external coupling between the <b>array</b> <b>elements</b> is ignored. The mutual coupling analysis is performed using microwave theory. The first four <b>elements</b> of the <b>array</b> are reduced to lossy two-port networks. The <b>last</b> <b>element</b> of the <b>array,</b> called the H-plane-bend-radiator [1], is reduced to a lossy one-port network. The loss in a network represents the power radiated by the corresponding element. The S-parameters and the phases of the <b>array</b> <b>elements</b> are obtained from computational analysis performed using HFSS (High Frequency Structure Simulator). This discussion is presented in detail in [1]. The phase of an element is the phase of the aperture E-field {{at the center of the}} aperture and is measured relative to the phase of the input power, which is equal to zero at the input port of the array. 1 I...|$|R
5000|$|Line 10: Starts iterating {{from the}} second <b>element</b> of that <b>array</b> [...] up to its <b>last</b> <b>element.</b>|$|R
50|$|Note: Insert on an {{unsorted}} array {{is sometimes}} quoted as being O(n) {{due to the}} assumption that the element to be inserted must be inserted at one particular location of the array, which would require shifting all the subsequent elements by one position. However, in a classic array, the array is used to store arbitrary unsorted elements, and hence the exact position of any given element is of no consequence, and insert is carried out by increasing the array size by 1 and storing the element {{at the end of the}} array, which is a O(1) operation. Likewise, the deletion operation is sometimes quoted as being O(n) due to the assumption that subsequent elements must be shifted, but in a classic unsorted array the order is unimportant (though elements are implicitly ordered by insert-time), so deletion can be carried out by swapping the element to be deleted with the <b>last</b> <b>element</b> in the <b>array</b> and then decrementing the array size by 1, which is a O(1) operation.|$|R
2500|$|This {{scheme is}} {{attributed}} to Nico Lomuto and popularized by Bentley in his book Programming Pearls and Cormen et al. in their book Introduction to Algorithms. This scheme chooses a pivot that is typically the <b>last</b> <b>element</b> in the <b>array.</b> The algorithm maintains index [...] as it scans the array using another index [...] such that the elements [...] through [...] (inclusive) are {{less than or equal}} to the pivot, and the elements [...] through [...] (inclusive) are greater than the pivot. As this scheme is more compact and easy to understand, it is frequently used in introductory material, although it is less efficient than Hoare's original scheme. This scheme degrades to [...] when the array is already in order. There have been various variants proposed to boost performance including various ways to select pivot, deal with equal elements, use other sorting algorithms such as Insertion sort for small arrays and so on. In pseudocode, a quicksort that sorts elements [...] through [...] (inclusive) of an array [...] can be expressed as: ...|$|R
5000|$|This {{scheme is}} {{attributed}} to Nico Lomuto and popularized by Bentley in his book Programming Pearls and Cormen et al. in their book Introduction to Algorithms. This scheme chooses a pivot that is typically the <b>last</b> <b>element</b> in the <b>array.</b> The algorithm maintains index [...] as it scans the array using another index [...] such that the elements [...] through [...] (inclusive) are {{less than or equal}} to the pivot, and the elements [...] through [...] (inclusive) are greater than the pivot. As this scheme is more compact and easy to understand, it is frequently used in introductory material, although it is less efficient than Hoare's original scheme. This scheme degrades to [...] when the array is already sorted as well as when the array has all equal elements. There have been various variants proposed to boost performance including various ways to select pivot, deal with equal elements, use other sorting algorithms such as Insertion sort for small arrays and so on. In pseudocode, a quicksort that sorts elements [...] through [...] (inclusive) of an array [...] can be expressed as: ...|$|R
50|$|Without a presort, {{at worst}} case, this {{algorithm}} would require every element {{to be checked}} against every other element with two possible outcomes: either there is no duplicate <b>element</b> in the <b>array,</b> or the <b>last</b> two <b>elements</b> in the <b>array</b> are the duplicates. This results in an O(n2) efficiency.|$|R
5000|$|In {{the given}} example the array can contain 10 {{elements}} of any value {{available to the}} [...] type. In C, the <b>array</b> <b>element</b> indices are 0-9 inclusive in this case. For example, the expressions [...] and [...] are the first and <b>last</b> <b>elements</b> respectively.|$|R
50|$|Array {{subscript}} numbering {{begins at}} 0 (see Zero-based indexing). The largest allowed array subscript is therefore {{equal to the}} number of <b>elements</b> in the <b>array</b> minus 1. To illustrate this, consider an array a declared as having 10 elements; the first element would be a0 and the <b>last</b> <b>element</b> would be a9.|$|R
5000|$|Weak heaps {{may be used}} to sort an array, in {{essentially}} the same way as a conventional heapsort. [...] First, a weak heap is built out of all of the <b>elements</b> of the <b>array,</b> and then the root is repeatedly exchanged with the <b>last</b> <b>element,</b> which is sifted down to its proper place.|$|R
5000|$|... #Caption: Animation of the {{insertion}} sort sorting a 30 <b>element</b> <b>array.</b>|$|R
40|$|The {{proposed}} wideband shorted planar inverted {{cone antenna}} (SPICA) {{has been described}} as a two <b>element</b> antenna <b>array</b> in this paper. The two <b>element</b> <b>array</b> by this antenna with proper phase of excitation and spacing between the <b>elements</b> provide superdirective <b>array</b> characteristic. This array gives peak endfire directivity from 3. 502 dBi to 10. 3 dBi and radiation efficiency above 98 % in the operating frequency band. Also in radiation pattern characteristic, the farfield pattern of the array is more directional than single <b>element</b> <b>array.</b> Thus the proposed SPICA is suitable for wideband antenna array applications...|$|R
40|$|Abstract — The {{proposed}} wideband shorted planar inverted {{cone antenna}} (SPICA) {{has been described}} as a two <b>element</b> antenna <b>array</b> in this paper. The two <b>element</b> <b>array</b> by this antenna with proper phase of excitation and spacing between the <b>elements</b> provide superdirective <b>array</b> characteristic. This array gives peak endfire directivity from 3. 502 dBi to 10. 3 dBi and radiation efficiency above 98 % in the operating frequency band. Also in radiation pattern characteristic, the farfield pattern of the array is more directional than single <b>element</b> <b>array.</b> Thus the proposed SPICA is suitable for wideband antenna array applications. Index Terms — SPICA, wideband, superdirective arra...|$|R
50|$|If {{it is an}} <b>array,</b> its <b>elements,</b> in <b>array</b> <b>element</b> order, {{are treated}} as {{successive}} records of the file and each has length that of an <b>array</b> <b>element.</b>|$|R
40|$|A 16 -by- 16 <b>element</b> <b>array</b> is {{operated}} at a center frequency of 2. 25 MHz using a 256 -channel transmitter system. Reception is performed with {{a subset of}} <b>elements</b> of the <b>array</b> or with a separate single element probe. The beam fields generated in water have been simulated and compared to experiments with excellent agreement. 3 D imaging of defects inside components has been addressed only by electronic steering and focusing to various depths of the inspected component. Work has also been done using an 8 -by- 8 <b>element</b> <b>array...</b>|$|R
50|$|In {{computer}} science, dead-reckoning {{refers to}} navigating an array data structure using indexes. Since every <b>element's</b> <b>array</b> {{has the same}} size, {{it is possible to}} directly access one <b>array</b> <b>element</b> by knowing any position in the array.|$|R
5000|$|High array density/multiplex: Compared to flat microarrays, SAT {{allows one}} to perform {{parallel}} measurements. A few microliters of microspheres could contain thousands of <b>array</b> <b>elements</b> and each <b>array</b> <b>element</b> is represented by hundreds of individual microspheres. Thus, the measurement by flow cytometry represents a replicate analysis of each <b>array</b> <b>element.</b>|$|R
50|$|The primary {{facility}} for accessing {{the values of}} the <b>elements</b> of an <b>array</b> is the array subscript operator. To access the i-indexed <b>element</b> of <b>array,</b> the syntax would be arrayi, which refers to the value stored in that <b>array</b> <b>element.</b>|$|R
40|$|An {{investigation}} into the applicability and accuracy of Pritchard's approximation for closely packed transducer arrays is undertaken. A new, modal Pritchard approximation is developed, based upon normal modes of the acoustic medium, and is tested for arrays of acoustically hard spheres to ascertain its accuracy in determining the mutual acoustic radiation impedance between <b>array</b> <b>elements.</b> For ka= 1, {{it is found that}} the modal Pritchard approximation works quite well in approximating the mutual radiation impedance of a two <b>element</b> <b>array,</b> even for relatively close spacing, but for arrays of three or more scatterers in close proximity, the approximation may have relatively large errors. The effect of neglecting inter-element scattering is analyzed for the monopole to monopole scattering of various configurations of a three <b>element</b> <b>array</b> and a sixteen <b>element</b> double line <b>array.</b> Office of Naval Research (ONR 321 SS) N 0001499 WR 3016...|$|R
40|$|An exposed four <b>element</b> <b>array</b> of 12. 8 m {{diameter}} elements {{mounted on}} a common pedestal is the recommended ground antenna configuration {{in support of the}} 2 GHz bandwidth Ku-band downlink from tdr satellites. The array provides three channel phase monopulse tracking capability with only listening feeds in each <b>element.</b> The <b>array</b> is as cost effective as a single aperture antenna and offers significant advantages in tracking and reliability...|$|R
5000|$|The values {{corresponding}} to these symbols {{are kept in}} an array. (For simplicity, the number represented by the numeral indicates the order in the array.) For instance, for the following 10 <b>element</b> <b>array</b> of RNCs: ...|$|R
50|$|The old form of {{the name}} was Risarna. The first element is ris '' - the <b>last</b> <b>element</b> is derived from arin 'gravel; island made by gravel'. The <b>last</b> <b>element</b> ö 'island' was added in the 16th century.|$|R
5000|$|For {{one-dimensional}} arrays, {{this facility}} may be provided as an operation [...] "(A,x)" [...] {{that increases the}} size of the array A by one and then sets the value of the <b>last</b> <b>element</b> to x. Other array types (such as Pascal strings) provide a concatenation operator, which can be used together with slicing to achieve that effect and more. In some languages, assigning a value to an <b>element</b> of an <b>array</b> automatically extends the array, if necessary, to include that <b>element.</b> In other <b>array</b> types, a slice can be replaced by an array of different size" [...] with subsequent elements being renumbered accordingly — as in Python's list assignment [...] "A5:5 = 10,20,30", that inserts three new elements (10,20, and 30) before element [...] "A5". Resizable arrays are conceptually similar to lists, and the two concepts are synonymous in some languages.|$|R
5000|$|ALL True if all {{values are}} true ANY True if any value is true. Example: IF (ANY( [...] a > b)) THEN COUNT Number of true <b>elements</b> in <b>array</b> MAXVAL Maximum value in an array MINVAL Minimum value in an array PRODUCT Product of <b>array</b> <b>elements</b> SUM Sum of <b>array</b> <b>elements</b> ...|$|R
5000|$|The <b>last</b> <b>element</b> {{is the old}} {{district}} name Odal (Old Norse: Ódalr). The first {{element of}} this is ó, a sideform of á which means [...] "river" [...] (here the Glåma river). The <b>last</b> <b>element</b> is dalr which means [...] "valley" [...] or [...] "dale".|$|R
40|$|This thesis evaluates two <b>array</b> antenna <b>elements</b> {{for large}} phased array antennas. The two antenna {{concepts}} are a surface mounted notch element and a PIFA (Planar Inverted F Antenna). The antennas have been simulated at S-band in Ansys HFSS {{as a unit}} cell in an infinite array environment. Thereafter, a finite 7 x 7 <b>element</b> <b>array</b> of the two concepts was simulated. A corresponding 49 <b>element</b> <b>array,</b> using the notch element, was built and measured upon. Embedded element patterns and S-matrix parameters have been measured. From this result, full array antenna patterns as well as active reflection coefficients have been calculated. The measurements show very good performance for large scan angles and a wide frequency range...|$|R
40|$|Abstract — Hybrid {{electrical}} energy storage (HEES) systems {{are composed of}} multiple banks of heterogeneous {{electrical energy}} storage (EES) elements with distinctive properties. Charge replacement in a HEES system (i. e., dynamic assignment of load demands to EES banks) {{is one of the}} key operations in the system. This paper formally describes the global charge replacement (GCR) optimization problem and provides an algorithm to find the near-optimal GCR control policy. The optimization problem is formulated as a mixed-integer nonlinear programming problem, where the objective function is the charge replacement efficiency. The constraints account for the energy conservation law, efficiency of the charger/converter, the rate capacity effect, and self-discharge rates plus internal resistances of the EES <b>element</b> <b>arrays.</b> The near-optimal solution to this problem is obtained while considering the state of charges (SoCs) of the EES <b>element</b> <b>arrays,</b> characteristics of the load devices, and estimates of energy contributions by the EES <b>element</b> <b>arrays.</b> Experimental results demonstrate significant improvements in the charge replacement efficiency in an example HEES system comprised of banks of battery and supercapacitor elements with a high-power pulsed military radio transceiver as the load device. I...|$|R
40|$|Iterator-Related Improvements to Containers This {{proposal}} recommends {{several small}} enhancements {{to the way}} containers interact with iterators. While none of these introduces functionality that cannot be achieved by other means, they make containers easier to use and teach, and make user code smaller and easier to read. Last I frequently find that I need an iterator to the <b>last</b> <b>element</b> of a container. Accessing the first and <b>last</b> <b>elements</b> directly is fully supported by front and back, but complementary access through an iterator is available only for the first <b>element</b> with begin. <b>last</b> provides the same semantics as begin, but for the <b>last</b> <b>element</b> of the container. If the container is empty, last returns end, otherwise it returns the <b>last</b> <b>element.</b> Note that <b>last</b> completes the symmetry of the design: Iterators begin las...|$|R
40|$|In {{this paper}} we suggest a {{cylindrical}} array, which utilizes signal cancellation and sparse <b>element</b> spacing. The <b>array</b> has narrow beamwidth and low sidelobe level. The beamwidth is about 12 for a 35 <b>element</b> <b>array</b> having- 20 dB sidelobe level. Omnidirectional coverage area is obtained {{by a combination}} of commutation and phasing. The <b>array</b> has less <b>elements</b> and smaller size than a respective array consisting of linear panels...|$|R
40|$|Various {{aspects of}} {{miniature}} <b>element</b> <b>array</b> construction are discussed. Some initial results on optimization of lateral resolution {{with a special}} focusing technique in linear array design is presented, together with the constructional details. Furthermore {{the construction of a}} catheter tip array is treated in detail...|$|R
5000|$|The <b>element</b> <b>array</b> {{constituted}} a feeding apparatus that is {{radically different from}} the jaws of modern animals. They are now termed [...] "conodont elements" [...] to avoid confusion. The three forms of teeth, i.e., coniform cones, ramiform bars, and pectiniform platforms, probably performed different functions.|$|R
40|$|ABSTRACT: Bayesian {{estimation}} {{techniques are}} applied {{to the problem of}} time and frequency offset estimation for Global Positioning System receivers. The estimation technique employs Markov Chain Monte Carlo (MCMC) to estimate unknown system parameters, utilizing a novel, multi-dimensional, Bayesian, global optimization strategy for initializing a Metropolis-Hastings proposal distribution. The technique enables the design of a high performance multi-user GPS receiver, capable of overcoming the near-far problem when the relative signal power is on the order of 5 dB (single antenna element) and 20 dB (4 antenna <b>element</b> <b>array)</b> and providing dramatically improved performance over conventional matched filter techniques against interference and jamming when the relative jammer and satellite signal power is on the order of 20 dB (4 antenna <b>element</b> <b>array)</b> ...|$|R
40|$|Array antennas {{with digital}} {{beamforming}} provide a powerful method for interference suppression. In the project KOMPASSION a miniaturised 2 x 2 <b>element</b> <b>array</b> antenna with reduced element spacing and a surface, {{which is only}} {{one quarter of the}} surface of a conventional four <b>element</b> <b>array</b> antenna, was developed. Because of the lower element distance strong coupling effects appear which have to be taken into account. Different designs of the antenna were tested, among which one variant uses a decoupling and matching network (DMN). The project included also the development of a complete L 1 /E 1 - GNSS receiver for tracking and processing of the GNSS satellite signals. The performance of the receiver and the miniaturised antenna was investigated by field tests...|$|R
50|$|If {{an array}} appears as an item, it {{is treated as}} if the <b>elements</b> werespecified in <b>array</b> <b>element</b> order.|$|R
