692|2645|Public
25|$|More playable {{species are}} said to be {{available}} in the future through major updates and the <b>Legacy</b> <b>system</b> with the ability to use other classes' abilities through this system. The Cathar were added to the game during Patch 2.1, and is available to all players who unlock the species through the Cartel Market. The Togruta race was announced in January 2015 as a new playable race to be made available in 2015.|$|E
25|$|On January 18, 2012, {{the first}} content patch (1.1) was released, {{adding a new}} Flashpoint and adding four bosses to an {{existing}} Operation. Patch (1.2) was released on April 12, 2012. The update included the new <b>Legacy</b> <b>system,</b> a new Flashpoint, Operation, a PVP Warzone, as well as improved character textures and advanced options such as user interface customization. Guild banks and player character pets are also introduced. A Weekend Pass Free Trial was made available for new players but has since closed. Patch 1.3 was released in June 2012. The game update featured a New Group Finder, the ability to augment every item, and adaptable social gear. In addition, players {{will be able to}} request that their characters are able to transfer to other servers. Subsequent patches have introduced a 'Cartel Market' where players can purchase virtual currency to spend on cosmetic items in-game. These items include armour sets, lightsaber colour crystals, mounts, pets and character-perk unlocks.|$|E
5000|$|Organizations {{can have}} {{compelling}} reasons for keeping a <b>legacy</b> <b>system,</b> such as: ...|$|E
5000|$|Current <b>legacy</b> <b>systems</b> and {{any future}} plans of {{decommissioning}} such <b>legacy</b> <b>systems.</b>|$|R
40|$|Abstract. Amount of <b>legacy</b> <b>systems</b> {{in early}} stages are fall behind {{multi-core}} ages, and these <b>legacy</b> <b>systems</b> {{were designed for}} single processor which can not expand the computing power of the multi-core hardware. In this paper, we employ aspect oriented programming technology and design the crosscutting concerns for the potentially parallelizable software components of <b>legacy</b> <b>systems.</b> We propose a new multi-core programming model which can change the single thread of <b>legacy</b> <b>systems</b> into multi-threads for multi-core hardware platform without revising the source code of <b>legacy</b> <b>systems.</b> The proposed method can enhance the performance of software and utilization of hardware...|$|R
40|$|With the {{progress}} of the software technology, the existing <b>legacy</b> <b>systems</b> are becoming obsolete and unable to satisfy the customer needs and expectations. Most of the <b>legacy</b> <b>systems</b> designed using COBOL, as it is a programming language. On the other hand, today Java widely used programming language for designing systems. The Java is pure object-oriented, where as the COBOL is procedure oriented programming language. The <b>legacy</b> <b>systems</b> designed earlier needs the huge amount of maintenance. The programmers of these <b>legacy</b> <b>systems</b> are now getting old moving into the retirement. After that, for people maintaining <b>legacy</b> <b>systems</b> it will be more difficult because keep up these <b>legacy</b> <b>systems</b> needs expertise in the programming language. Therefore, it is necessary to propose a framework to migrate existing <b>legacy</b> COBOL <b>systems</b> to object-oriented Java platform. The advantages of this migration process are that the upholding of the system running in the different organizations will be easier than the <b>legacy</b> COBOL <b>systems...</b>|$|R
50|$|In 2006, TMCC was {{phased out}} when Lionel {{unveiled}} their new <b>Legacy</b> <b>system.</b>|$|E
5000|$|... $54.9 {{billion in}} {{book-entry}} marketable issues {{held in a}} <b>legacy</b> <b>system</b> by 278,000 customers ...|$|E
5000|$|... 1970s - National Distress System (<b>legacy</b> <b>system)</b> is {{installed}} to receive {{and respond to}} VHF distress calls.|$|E
40|$|<b>Legacy</b> {{software}} <b>systems</b> often {{suffer from}} code quality problems. Maintenance of <b>legacy</b> <b>systems</b> {{can therefore be}} costly, {{and the value of}} <b>legacy</b> <b>systems</b> may diminish {{due to a lack of}} adaptability and reliability. Many code quality problems are caused by idiomatic implementation of crosscutting concerns. This work studies the idiomatic implementation of crosscutting concerns in <b>legacy</b> <b>systems,</b> and examines whether modern language technology like aspect-oriented programming can improve the situation. 1...|$|R
40|$|One of the {{strategies}} for migrating <b>legacy</b> <b>systems</b> to distributed object-oriented environments is wrapping. Wrapping is a method of encapsulation that provides wellknown interfaces for accessing <b>legacy</b> <b>systems.</b> The advantage of wrapping is that <b>legacy</b> <b>systems</b> {{become part of the}} new generation of applications without discarding the value of the legacy applications. There, however, are many styles for interfacing with <b>legacy</b> <b>systems.</b> Application developers who want to migrate <b>legacy</b> <b>systems</b> to new environments and to use them have the burden of understanding and implementing various interfacing techniques. To solve this problem, we construct the extensible wrapping template classes for various interfacing styles and present an automatic wrapper generation method based on them. Keywords: Legacy Software, Distributed Environments, CORBA, Wrapper 1...|$|R
40|$|The {{problem of}} {{reengineering}} of <b>legacy</b> <b>systems,</b> in the widest sense, is widely recognised {{as one of}} the most significant challenges facing software engineers. So-called <b>legacy</b> <b>systems</b> are normally, but not necessarily, large systems built in an era before encapsulation and componentisation were regarded as fundamental tenets of design. Through a gradual process of accretion and change, they have become devoid of useful structure. This makes them hard, expensive or impossible to modify in order to meet changes in the business processes. <b>Legacy</b> <b>systems,</b> whilst often essential to the running of an organisation, also inhibit change in that organisation. The problems of <b>legacy</b> <b>systems</b> are not limited to any one kind of organisation: large corporations and SMEs both suffer. Moreover, there seems no reason to be confident that today's new systems are not also tomorrow's <b>legacy</b> <b>systems.</b> The problem of reengineering <b>legacy</b> <b>systems</b> is probably here to stay. In this paper we introduce the idea [...] ...|$|R
5000|$|New {{implementation}} - This {{is a new}} {{implementation of}} SAP S/4HANA (green field): customers who are migrating from a non-SAP <b>legacy</b> <b>system</b> or from an SAP ERP system and implementing a fresh system that requires an initial data load. In this scenario, the SAP S/4HANA system is implemented, and master and transactional data are migrated from the <b>legacy</b> <b>system,</b> thus standard data migration tools and content has to be used.|$|E
5000|$|Enables new modernized signals (L1C, L2C, and L5) and has M-code capability, {{which the}} <b>legacy</b> <b>system</b> {{is unable to}} do.|$|E
5000|$|Single Sign-On (SSO) Delegator pattern {{describes}} how {{to construct a}} delegator agent for handling a <b>legacy</b> <b>system</b> for single sign-on (SSO).|$|E
40|$|Over {{the past}} two decades, lots of people have {{forecast}} that <b>legacy</b> <b>systems</b> would soon be a craze of the history. In bare disparity, companies are now apprehending greater repayment from their <b>legacy</b> <b>systems</b> as they tie them to distributed systems. However, companies face {{quite a lot of}} major disputes in managing their <b>legacy</b> <b>systems</b> in these rapidly changing environments. The role of web services in migration of <b>legacy</b> <b>systems</b> to service-oriented architecture is of extreme importance for research field. Web Services are software system designed to support interoperable machine-to-machine interaction over a network. It has an interface designed in a format that systems can work upon. In this paper, an emphasis has been laid onto the study of web services and their role in context to extraction of several components from <b>legacy</b> <b>systems...</b>|$|R
40|$|<b>Legacy</b> {{software}} <b>systems</b> {{are notorious}} for repeating {{the mistakes of the}} past. However, it is entirely possible that the solutions to problems might be available in their past. Maintaining a Lessons Learned (LL) database and consulting it regularly might result in avoiding potential problems. This research uses surveys as a means to obtain LL and corrective actions taken in <b>legacy</b> <b>systems.</b> It also presents three case studies to demonstrate the utility of LL in <b>legacy</b> <b>systems.</b> This research found that LL are used in <b>legacy</b> <b>systems,</b> however their use is not widespread. When employed, the LL process improves a <b>legacy</b> <b>system’s</b> situation and validates the lessons learned tool utilized by hardware engineering projects. In addition, the research shows that problems facing <b>legacy</b> <b>systems</b> are not isolated, but are replicated throughout industry. Preventive Measures as identified in LL, and applied to new efforts can dramatically affect system life cycle costs but this remains to be verified in subsequent research...|$|R
50|$|<b>Legacy</b> <b>systems</b> & {{services}} need to {{be modified}} {{in order to be}} tested on cloud. Usage of robust interfaces with these <b>legacy</b> <b>systems</b> may solve this problem. Also like any other cloud services, cloud testing is vulnerable to security issues.|$|R
50|$|One of {{the major}} {{features}} exposed by Java CAPS is its adapters; these adapters are JCA compliant and offer <b>legacy</b> <b>system</b> integration.|$|E
5000|$|... "Echelon" [...] {{was created}} in the {{incubator}} of the Cold War. Today it is a <b>legacy</b> <b>system,</b> and several NSA stations are closing.|$|E
50|$|More recently, Uniform Resource Identifiers (URIs) and universally unique {{identifiers}} (UUIDs) are usually used to uniquely identify objects. FPIs {{have become a}} <b>legacy</b> <b>system.</b>|$|E
40|$|Migration of <b>legacy</b> <b>systems</b> to SOA {{has caught}} lots of {{attention}} in both academic and industry. People have proposed many methods, such as wrapping, reengineering etc. However, various characteristics of <b>legacy</b> <b>systems</b> can make the migration complicated, and different enterprises can afford different level migration cost. In this paper, the existing methods and options for evolving <b>legacy</b> <b>systems</b> are compared, and their advantages and disadvantages are identified respectively. Different adaptive situations are listed to assist in making migration decision...|$|R
40|$|The {{economic}} and organizational impact of imposing state-of-the-art {{technology to the}} large number of proprietary <b>legacy</b> <b>systems</b> operational in most hospitals requires integrated clinical professional workstations to provide flexible encapsulation mechanisms for these systems rather than reengineering these systems to this new technology. In this paper the implications of different input/output and translation models of <b>legacy</b> <b>systems</b> for their integration into a clinical workstation is described. Examples of <b>legacy</b> <b>systems</b> that have been integrated in the HERMES clinical workstation are presented as examples of the range of difficulties one might encounter. The features that an integrated workstation should offer for integrating a broad range of <b>legacy</b> <b>systems</b> are also addressed in this paper...|$|R
40|$|The {{problems}} {{posed by}} mission-critical <b>legacy</b> <b>systems</b> - e. g., brittleness, inflexibility, isolation, nonextensibility, lack of openness - are well known, but practical solutions {{have been slow}} to emerge. Generally, organisations attempt to keep their <b>legacy</b> <b>systems</b> operational, while developing mechanisms which allow the <b>legacy</b> <b>systems</b> to interoperate with new, modem systems which provide additional functionality. The most mature approach employs gateways to provide this interoperability. However, gateways introduce considerable complexity in their attempt to maintain consistency between the <b>legacy</b> and target <b>systems.</b> This paper presents an innovative gateway-free approach to migrating <b>legacy</b> information <b>systems</b> in a missioncritical environment : the ButtelJly Methodology. The fundamental premise of this methodology is to question the need for the parallel operation of the <b>legacy</b> and target <b>systems</b> during migration...|$|R
50|$|In general, {{three classes}} of {{information}} system technology {{are of interest}} in <b>legacy</b> <b>system</b> modernization:Technologies used to construct the legacy systems, including the languages and database systems.Modern technologies, which often represent nirvana to those mired in decades-old technology and which hold (the often unfulfilled) promise of powerful, effective, easily maintained enterprise information systems.Technologies offered by the <b>legacy</b> <b>system</b> vendors - These technologies provide an upgrade path for those too timid or wise to jump head-first into the latest wave of IT offerings. <b>Legacy</b> <b>system</b> vendors offer these technologies for one simple reason: to provide an upgrade path for system modernization that does not necessitate leaving {{the comfort of the}} “mainframe womb.” Although these technologies can provide a smoother road toward a modern system, they often result in an acceptable solution that falls short of the ideal.|$|E
50|$|Budgetary {{constraints}} {{often lead}} corporations to {{not address the}} need of replacement or migration of a <b>legacy</b> <b>system.</b> However, companies often don’t consider the increasing supportability costs (people, software and hardware, all mentioned above) and do not {{take into consideration the}} enormous loss of capability or business continuity if the <b>legacy</b> <b>system</b> were to fail. Once these considerations are well understood, then based on the proven ROI of a new, more secure, updated technology stack platform is not as costly as the alternative - and the budget is found.|$|E
50|$|Even {{if it is}} {{no longer}} used, a <b>legacy</b> <b>system</b> may {{continue}} to impact the organization due to its historical role. Historic data may not have been converted into the new system format and may exist within the new system {{with the use of a}} customized schema crosswalk, or may exist only in a data warehouse. In either case, the effect on business intelligence and operational reporting can be significant. A <b>legacy</b> <b>system</b> may include procedures or terminology which are no longer relevant in the current context, and may hinder or confuse understanding of the methods or technologies used.|$|E
40|$|In {{adoption}} {{process of}} Service Oriented Architecture (SOA), the <b>legacy</b> <b>systems</b> {{of a company}} can not be neglected. The reason is the <b>legacy</b> <b>systems</b> have been deployed {{in the past and}} have been running critical business processes within an enterprise in its current IT architecture. However not all migration process of <b>legacy</b> <b>systems</b> to SOA has been successfull. Highlighting the right factors to reach <b>legacy</b> <b>systems</b> migration success in a specific company is the key value. The main adopted research method in this study has been interviewed for different companies with different enterprises including bank, furniture, engineering and airline companies in Europe. Through separate interviews, critical success factors of migrating <b>legacy</b> <b>systems</b> into SOA have been collected and identified in each case company. Finally collected results are analyzed and presented as the recognized factors affecting successful migration of legacy assets into SOA from business and technical perspectives. Comment: 11 pages, 4 figure...|$|R
40|$|The {{reengineering}} pattern {{presented in}} this paper shows how you can transform conditionals in object-oriented code to improve the flexibility of application. 1. Introduction <b>Legacy</b> <b>systems</b> are not limited to the procedural paradigm and languages like Cobol. Even if object-oriented paradigm promised the building of more flexiblesystems and the ease in their evolution, nowadays object-oriented <b>legacy</b> <b>systems</b> exist in C++, Smalltalk or Java. These <b>legacy</b> <b>systems</b> need to be reengineered to meet new requirements. The goal of the Famoos Esprit project was to support the evolution of such a object-oriented <b>legacy</b> <b>systems</b> towards frameworks. In this context, we used patterns as a way to record reengineering expertise. We wrote reverse engineering patterns that record how to extract information of the <b>legacy</b> <b>systems</b> from the code, the organization or the people [Deme 99 a] and reengineering patterns that present how code can be transformed to support new requirements, to be more flexible or [...] ...|$|R
40|$|This paper {{describes}} a smart radio network that can facilitate communication of radios operating under congested {{conditions in the}} 2. 4 GHz unlicensed band. The network detects <b>legacy</b> <b>systems</b> spectrally, temporally, and spatially, and implements a novel avoidance technique to reduce or remove interference with the <b>legacy</b> <b>systems.</b> The system was designed {{by a team of}} students from Carnegi...|$|R
5000|$|A <b>legacy</b> <b>system</b> {{composed}} of a rich client, a server-based middle tier, and a database, {{all of which are}} tightly coupled. (e.g. changes in one are very likely to trigger changes in another).|$|E
50|$|Both TPEG1 and TPEG2 are {{standardized}} {{with the}} International Organization for Standardization as ISO/TS 18234 (TPEG1) and ISO/TS 21219 (TPEG2). TPEG1 {{is now considered}} a <b>legacy</b> <b>system</b> and the implementation of new services based on TPEG1 is discouraged.|$|E
50|$|Crosswalk {{tables are}} often {{employed}} within or in parallel to enterprise systems, especially when multiple systems are interfaced {{or when the}} system includes <b>legacy</b> <b>system</b> data. In the context of Interfaces, they function {{as a sort of}} internal ETL mechanism.|$|E
50|$|The {{re-examination}} {{of attitudes}} toward <b>legacy</b> <b>systems</b> is also inviting more reflection on what makes <b>legacy</b> <b>systems</b> as durable as they are. Technologists are relearning that sound architecture, practiced up front, helps businesses avoid costly and risky rewrites in the first place. The most common <b>legacy</b> <b>systems</b> tend to be those which embraced well-known IT architectural principles, with careful planning and strict methodology during implementation. Poorly designed systems often don't last, both because they wear out and because their reliability or usability are low enough {{that no one is}} inclined to make an effort to extend their term of service when replacement is an option. Thus, many organizations are rediscovering the value of both their <b>legacy</b> <b>systems</b> themselves and those systems' philosophical underpinnings.|$|R
40|$|Summarises {{findings}} of two international workshops on <b>legacy</b> <b>systems,</b> held {{in conjunction with}} an EPSRC managed programme. Issues covered include the nature and dynamics of <b>legacy</b> <b>systems,</b> the co-evolution of software and organisations, issues around software as a technology (its engineering and its management), and organisational/people issues...|$|R
40|$|<b>Legacy</b> <b>systems</b> are {{valuable}} assets for organisations. They continuously evolve with new emerged technologies in rapidly changing business environment. ICENI provided an excellent Grid middleware framework for developing Grid-based systems. It creates {{an opportunity for}} <b>legacy</b> <b>systems</b> to evolve in Grid environment. In this paper, we propose a component-based reengineering approach which applies software clustering techniques and program slicing techniques to recover components from <b>legacy</b> <b>systems.</b> It supports component encapsulation with JNI and component integration with CXML. The resulting components with core legacy code function in Grid environment...|$|R
