236|233|Public
25|$|Written and {{designed}} by The Hitchhiker's Guide to the Galaxy creator Douglas Adams, Starship Titanic began development in 1996 and {{took two years}} to develop. In order to achieve Adams's goal {{of being able to}} converse with characters in the game, his company developed a <b>language</b> <b>processor</b> to interpret player's input and give an appropriate response and recorded over 16 hours of character dialogue. Oscar Chichoni and Isabel Molina, artists on the film Restoration (1995), served as the game's production designers {{and designed}} the ship's Art Deco visuals. The game's voice cast includes Monty Python members Terry Jones and John Cleese. A tie-in novel titled Douglas Adams's Starship Titanic was written by Jones and released in October 1997.|$|E
2500|$|Adams {{aimed to}} develop a text parser-based {{dialogue}} system {{as opposed to the}} drop-down conversation menus of contemporary adventure games, in which player have limited dialogue options. The text parser includes over 30,000 words and 16 hours of dialogue recorded by voice actors. According to Adams, over 10,000 lines of dialogue were recorded for the game. In order to make conversations with characters convicing, The Digital Village's Jason Williams and Richard Millican created a <b>language</b> <b>processor</b> called SpookiTalk, which was based on VelociText, a software developed by Linda Watson of Virtus Corporation. Producer Emma Westecott thought the processor was preferable as common text-to-speech programs [...] "made the voices sound cold and distant". The bots in the game understood around 500 words of vocabulary and were capable of conversing with the player as well as each other. According to Westecott, the developers' intention was [...] "getting into characters" [...] and cited games such as Myst and Mortal Kombat as contemporary games that lacked [...] "proper interaction" [...] with human characters. Williams and Millican modified VelociText into SpookiTalk in order to improve recognition of complicated sentence forms from players, as well as reducing repeated responses, and retaining a character's memory of an object or topic as a conversation progresses. Additional dialogue support was done by linguist Renata Henkes.|$|E
5000|$|ISO/IEC 18009:1999 Information technology—Programming languages—Ada: Conformity {{assessment}} of a <b>language</b> <b>processor</b> ...|$|E
40|$|To develop <b>language</b> <b>processors</b> {{efficiently}} {{is difficult}} because they {{need to deal with}} large data with complex structures. Using tools based on formal specification is one of the strategies to reduce the cost in developing <b>language</b> <b>processors.</b> However, the area of application which can be developed by these tools is limited. This dissertation aims at realization of the practical development environment for <b>language</b> <b>processors</b> based on the formalism of attribute grammars (AGs). AGs ar...|$|R
5000|$|Semantic {{indexing}} for {{text mining}} and entity analytics integrated with popular natural <b>language</b> <b>processors.</b>|$|R
5000|$|Jürgen Eickel, Manfred Paul, Friedrich L. Bauer, Klaus Samelson, A Syntax Controlled Generator of Formal <b>Language</b> <b>Processors,</b> Communications of the ACM 6(8): 451-455, 1963 ...|$|R
5000|$|ALGOL 68RS {{programs}} are allowed {{the use of}} several stropping variants, even within the one <b>language</b> <b>processor.</b>|$|E
5000|$|MTS Volume II: <b>Language</b> <b>processor</b> descriptions: F-level assembler; FORTRAN G; IOH/360; PIL; SNOBOL4; UMIST; WATFOR; and 8ASS (PDP-8 assembler) ...|$|E
50|$|IBM Assembly <b>Language</b> <b>Processor</b> (ALP) is an {{assembler}} {{written by}} IBM for 32 bit OS/2 Warp (OS/2 3.0), which {{was released in}} 1994.|$|E
5000|$|<b>Language</b> <b>processors,</b> {{including}} compilers, static analyzers, and the like, often expand sugared constructs {{into more}} fundamental constructs before processing, a process sometimes called [...] "desugaring".|$|R
40|$|Abstract. In {{this article}} a {{modification}} of a grammar systems theoretic construc-tion, the so-called network of parallel <b>language</b> <b>processors,</b> is proposed to describe the behaviour of peer-to-peer (P 2 P) systems. In our model, the <b>language</b> <b>processors</b> form teams, send and receive information through collective and individual filters. The paper deals with the dynamics of string collections. The connection between the growth function of a developmental system and the growth function of networks of parallel multiset string processors with teams of collective and individual filtering is also established...|$|R
40|$|In this paper, we {{describe}} PAG (Prototyping with Attribute Grammars), {{a framework for}} building Prolog prototypes from specifications based on attribute grammars, which we have developed for supporting rapid prototyping activities in an introductory course on <b>language</b> <b>processors.</b> This framework works for general noncircular attribute grammars with arbitrary underlying context-free grammars, includes a specification language embedded in Prolog that strongly resembles the attribute grammar notations explained in the course cited, and lets students produce comprehensible prototypes from their specifications in a straightforward way. Key words: attribute grammars, language prototyping framework, education in <b>language</b> <b>processors,</b> Prolog...|$|R
5000|$|The main {{difference}} is that C uses a [...] "format string" [...] that is interpreted to find the arguments to the printf function and convert them, whereas Pascal performs that {{under the control of}} the <b>language</b> <b>processor.</b> The Pascal method is arguably faster, because no interpretation takes place, but the C method is highly extensible.|$|E
50|$|Harris's {{methodology}} disclosing {{the correlation}} of form with meaning was developed into a system for the computer-aided analysis of natural language by {{a team led by}} Naomi Sager at NYU, which has been applied to a number of sublanguage domains, most notably to medical informatics. The software for the Medical <b>Language</b> <b>Processor</b> is publicly available on SourceForge.|$|E
50|$|The Droid Turbo {{comes with}} a Snapdragon 805 quad-core {{processor}} clocked at 2.7 GHz, an Adreno 420 GPU, natural <b>language</b> <b>processor</b> for the phone's contextual features, and is backed by a 3,900 mAh battery. The Droid Turbo also has a 5.2-inch Quad HD display with a 565 pixels per inch pixel density at a 1440×2560 resolution.|$|E
40|$|In {{this paper}} we offer a new {{framework}} for describing mainly locally connected processor arrays, where the cell processors {{are defined by}} rewriting systems (grammars). The notion of the CNN template {{is defined by the}} local communication rules and the rewriting process following the communication. A striking similarity of the dynamics of the Cellular Network of <b>Language</b> <b>Processors</b> to the analog CNN dynamics can be demonstrated. As a future example, the dynamic activity pattern of the Internet could also be modelled in this way. In addition to the concepts and results pertinent to locally connected arrays, this contribution can be considered as a tutorial on networks of <b>language</b> <b>processors</b> as well. The introduction of coloring above the strings, the signals of the array, may lead to an analogic CNN system where strings and analog signals could be used in interaction. 1 Networks of language processors: motivations Networks of <b>language</b> <b>processors</b> (NLP systems) is a collective term that ha [...] ...|$|R
25|$|During the {{development}} of TTM, {{it became apparent that}} applications other than assembler macro processing were possible. These include data editing, text manipulation, expression compiling, and macro processing for <b>language</b> <b>processors</b> other than assemblers.|$|R
5000|$|S/SL's [...] "semantic mechanisms" [...] {{extend its}} {{capabilities}} to {{all phases of}} compiling, {{and it has been}} used to implement all phases of compilation, including scanners, parsers, semantic analyzers, code generators and virtual machine interpreters in multi-pass <b>language</b> <b>processors.</b>|$|R
50|$|In {{computer}} programming, a compile and go system, compile, load, and go system, assemble and go system, or {{load and}} go systemis a programming <b>language</b> <b>processor</b> in which the compilation, assembly, or link steps are not separated from program execution. The intermediate forms of the program are generally kept in primary memory, and not saved to the file system.|$|E
5000|$|The biggest {{difference}} between C and Pascal is that Pascal supports the explicit {{use of a}} [...] "tagfield" [...] for the <b>language</b> <b>processor</b> {{to determine if the}} valid component of the variant record is being accessed:In this case, the tagfield q must be set to the right state to access the proper parts of the record.|$|E
5000|$|The <b>language</b> <b>processor</b> turned BASIC09 {{source code}} into a tokenized, optimized, {{bytecode}}, called I-code in the BASIC09 literature. If that bytecode {{version of the}} source were saved (called packing), {{it could also be}} executed by a much more compact version of the interpreter, called RunB (no editor, no prettyprinter, no extraneous information included for human convenience, no debugger, ...).|$|E
40|$|MTS Manual is {{a series}} of volumes that {{describe}} in detail the facilities provided by the Michigan Terminal System. This volume describes the three PL/I <b>language</b> <b>processors</b> available in MTS: (1) the PL/I (F) compiler; (2) the PL/I Optimizing compiler; and (3) the PL/C compiler. The MTS version of the PL/I (F) compiler is derived from the IBM OS/ 360 F-level PL/I compiler (version 5). This volume describes the three PL/I <b>language</b> <b>processors</b> available in MTS: (1) the PL/I (F) compiler (2) the PL/I Optimizing compiler (3) the PL/C compiler The MTS version of the PL/I (F) compiler is derived from the IBM OS/ 360 F-level PL/I compiler (version 5). The PL/C compiler is a compile-and-execute processor developed at Cornell University. ...|$|R
40|$|Many modern NLP {{applications}} require basic <b>language</b> <b>processors</b> such as POS taggers, parsers, etc. All {{these tools}} are usually pre-existing, {{and must be}} adapted to fit in {{the requirements of the}} application to be developed. This adaptation procedure is usually time consuming and increases the application development cost. Our proposal to minimize this effort is to use standard engineering solutions for software reusability. In that sense, we converted all our <b>language</b> <b>processors</b> to classes which may be instantiated and accessed from any application via a CORBA broker. Reusability is not the only advantatge, since the distributed CORBA approach also makes it possible to access the analyzers from any remote application, developed in any language, and running on any operating system. 1...|$|R
40|$|Montague’s {{semantics}} {{has been}} used in the past for constructing natural-language processors in higher-order functional languages. This paper describes the work done and progress so far in extending a Montague–like compositional semantics in constructing natural <b>language</b> <b>processors</b> to accommodate n-ary transitive verbs for n> 2. In the earl...|$|R
50|$|In {{the wake}} of the Applied Data Research lawsuit IBM decided to develop {{chargeable}} versions of several applications, mostly language processors, although it's not clear whether the lawsuit was actually the deciding factor. As a result, SVS does not include a sort/merge program or any <b>language</b> <b>processor</b> other than the new Assembler (XF), which is required for the system generation process.|$|E
5000|$|As of October 2010, MyDLP {{includes}} widespread {{data loss}} prevention features [...] such as text extraction from binary formats, incident management queue, source code detection and data identification methods for bank account, {{credit card and}} several national identification numbers. Besided, features like data classification through statistical analysis of trained sentences and native <b>language</b> <b>processor</b> integrated Naive Bayes classifier [...] are claimed to be inspiring.|$|E
5000|$|To create dynamic data, {{the library}} {{functions}} [...] and [...] {{are used to}} obtain and release dynamic blocks of data. Thus, dynamic memory allocation is not built into the <b>language</b> <b>processor.</b> This is especially valuable when C is being used in operating system kernels or embedded targets as these things are very platform (not just architecture) specific and would require changing the C compiler for each platform (or operating system) {{that it would be}} used on.|$|E
40|$|Statistical natural <b>language</b> <b>processors</b> {{have been}} the focus of much {{research}} during the past decade. The UCLA Medical Imaging Informatics Group (MII) has developed a statistical NLP for the domain of radiology. We report a study of syntactic and semantic behavior of sentences in the domain of chest radiology...|$|R
25|$|The initial {{version of}} TTM was {{implemented}} {{to run in}} a conversational manner under the Caltech Basic Time Sharing System for the IBM System/360 Model 50. Other versions have been written {{to run in the}} batch processing environment of OS/360 and to operate in front of or in conjunction with various <b>language</b> <b>processors.</b>|$|R
40|$|This {{paper is}} a {{contribution}} to the ongoing quest for modular descriptions of <b>language</b> <b>processors,</b> with the specific aim of rapidly prototyping domain-specific languages [21]. Some might argue that this problem was solved in the eighties, with the development of a proliferation of <b>language</b> <b>processors</b> based on attribute grammars [11, 15, 22]. Others might argue that functional programming languages such as ML are adequate for the purpose, without any further extensions. We believe that functional programming languages do not o#er enough specialised support for implementing compilers. However, attribute grammars are not in widespread use, despite their many advantages. This may be due to restrictions imposed by attribute definition languages, which are often less flexible than general purpose functional programming languages. Such general languages tend to yield descriptions that are compact, but they lack the dedicated structuring mechanisms of attribute grammars...|$|R
50|$|A parent {{places a}} LENA {{recorder}} (also {{known as a}} digital <b>language</b> <b>processor</b> or DLP) {{in his or her}} children's LENA clothing and records an entire day of the child's sound environment. The recorder is then connected to a computer with special software that processes the recording into data metrics including the child's exposure to verbal stimulation, the number of child utterances, and other information. As pediatricians do with a child's height and weight, the system also generates percentile scores comparing the child's vocalizations with those of other children the same age.|$|E
5000|$|... slrn was {{maintained}} by Thomas Schultz from 2000 to 2007, {{with the help}} of others who made contributions, but development is now again followed by the original author, John E. Davis. Current development focuses on better support for different character sets and tighter integration of the S-Lang <b>language</b> <b>processor.</b> Version 1.0.0 of slrn was released on December 21, 2012, 18 years after the first release. Latest release is 1.0.3 on October 23, 2016. Historically slrn was the starting point for many Usenet users. slrn is still a compromise between features, resource usage and simplicity.|$|E
50|$|The {{influence}} of Harris's work is pervasive in linguistics, often invisibly. Diverse lines {{of research that}} Harris opened continue to be developed by others, as indicated by contributions to (Nevin 2002a, 2002b). The Medical <b>Language</b> <b>Processor</b> developed by Naomi Sager {{and others in the}} Linguistic String Program in the Courant Institute of Mathematical Sciences (NYU) has been made available on Sourceforge. Richard Kittredge and his colleagues have developed systems for automatic generation of text from data, which are used for weather radio broadcasts and for production of reportage of stock market activity, sports results, and the like. Work on information retrieval has been influential in development of the Lexis-Nexis systems and elsewhere.|$|E
40|$|This seminar paper {{concentrates}} on XML (Extensible Markup Language) parsers and XSL (Extensible Stylesheet <b>Language)</b> <b>processors.</b> XML parsers {{are used for}} reading XML formatted data, either just {{to ensure that it}} is properly formed or to store it in the system memory for further processing. XSL processors are used to transform and format XML data to different presentation formats...|$|R
40|$|Networks of <b>language</b> <b>processors</b> (NLP systems) is a {{collective}} term {{which has been}} introduced as a formal language theoretic framework for describing symbolic processing in highly (massively) parallel and distributed architectures. Roughly speaking, an NLP system consists of several language determining devices (<b>language</b> <b>processors)</b> which are located at nodes of a virtual graph (a network) and which rewrite strings and communicate them through the network. In this paper we briefly discuss the model and introduce a particular variant which {{can be considered as}} a formal model for collaborating agents which communicate with each other through a network and use recommendations for filtering information. 1 Introduction One of the most challenging problems of current computer science is to develop sophisticated, highly reliable tools for supporting effective information dissemination and information search performed by users of computer networks. All who use Internet face similar questions e [...] ...|$|R
50|$|This {{feature is}} {{available}} in Pascal by using the subrange construct (3 bits gives a range from 0 to 7) {{in association with the}} keyword packed:Both C and Pascal support records which can include different fields overlapping each other:Both <b>language</b> <b>processors</b> are free to allocate only as much space for these records as needed to contain the largest type in the union/record.|$|R
