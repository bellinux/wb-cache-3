58|6820|Public
25|$|The <b>Logical</b> <b>framework</b> <b>approach,</b> {{which is}} popular in {{international}} development organizations.|$|E
5000|$|The <b>Logical</b> <b>Framework</b> <b>Approach</b> {{takes the}} form of a four-by-four project table.|$|E
5000|$|The <b>Logical</b> <b>Framework</b> <b>Approach,</b> Handbook for objectives-oriented planning, Fourth edition, NORAD, 1999, [...]|$|E
40|$|This thesis {{presents}} original {{research in}} the field of Knowledge Representation and Reasoning, a central Artificial Intelligence issue. The contribution of the thesis is providing the ALASKA platform, that is able to integrateunder a unified <b>logical</b> <b>framework</b> different implementation <b>approaches</b> for addressing the RULE-BASED DATA ACCESS problem. This thesis presents original {{research in the}} field of Knowledge Representation and Reasoning,a central Artificial Intelligence issue. The contribution of the thesis is providing the ALASKA platform, that is able to integrateunder a unified <b>logical</b> <b>framework</b> different implementation <b>approaches</b> for addressing the RULE-BASED DATA ACCESS problem...|$|R
40|$|We {{present a}} new {{approach}} to search guidance for logics presented within a <b>Logical</b> <b>Framework.</b> This <b>approach</b> is based on the idea of rippling, as used in [4] to guide the search for inductive proofs and, more recently, in some non-inductive domains as well. We present our ideas with respect to the Edinburgh <b>Logical</b> <b>Framework</b> (LF) style of representation of logics but conjecture that our approach could be extended to other <b>Logical</b> <b>Frameworks.</b> We discuss some experiments we have carried out in LF and indicate some possible future research. Introduction Our research is concerned with the development of search techniques for Framework Logics. We use Proof Plans [5] as an environment to reason about such techniques. When doing search in Framework Logics we often find that we want to produce connections between hypotheses and conclusions (i. e. identical expressions {{on both sides of the}} sequent) to obtain axioms. In order to obtain such complementary expressions, we first look for them [...] ...|$|R
40|$|We {{investigate}} {{an automated}} program synthesis {{system based on}} the paradigm of programming by proofs. To automatically extract a -term that computes a recursive function given {{by a set of}} equations the system must nd a formal proof of the totality of the given function. Because of the particular <b>logical</b> <b>framework,</b> usually such <b>approaches</b> make it dicult to use techniques such as those in rewriting theory. We overcome this diculty for the automated system that we consider by exploiting product types. As a consequence, this would enable the incorporation of termination techniques used in other areas while still extracting programs...|$|R
50|$|The <b>Logical</b> <b>Framework</b> <b>Approach</b> (LFA) is a {{methodology}} mainly used for designing, monitoring, and evaluating international development projects. Variations {{of this tool}} are known as Goal Oriented Project Planning (GOPP) or Objectives Oriented Project Planning (OOPP).|$|E
50|$|The <b>Logical</b> <b>Framework</b> <b>Approach</b> was {{developed}} in 1969 for the U.S. Agency for International Development (USAID). It {{is based on a}} worldwide study by Leon J. Rosenberg, a principal of Fry Consultants Inc. In 1970 and 1971, USAID implemented the method in 30 country assistance programs under the guidance of Practical Concepts Incorporated, founded by Rosenberg.|$|E
50|$|REEEP uses a Theory of Change as a {{high level}} project {{strategy}} guide, taking into account market context and cross-cutting considerations. For each investment REEEP makes {{as part of a}} market acceleration project, it develops a SME-specific strategic plan that incorporates a stakeholder analysis; key activities, outputs and outcomes; benchmarking and key performance indicators (KPIs); and contingency planning, among other elements. This strategy typically includes a <b>Logical</b> <b>Framework</b> <b>Approach</b> (Logframe) template.|$|E
40|$|Confirmatory {{induction}} {{is based}} on the assumption that unknown individuals are similar to known ones, i. e. they satisfy the properties shared by known individuals. This assumption can be represented inside a non-monotonic <b>logical</b> <b>framework.</b> Accordingly, existing <b>approaches</b> to confirmatory induction take advantage of the machinery developed so far for non-monotonic inference. However, they are based on completion policies that are unnecessary strong for the induction purpose. The contribution of this paper is twofold: some basic requirements that any model for generalization based on confirmatory induction should satisfy are proposed. Then, a model for generalization based on Hempel's notion of confirmation is introduced. This model is rational in the sense that it satisfies the rationality postulates we exhibit; moreover, the completion principle on which this model is based captures exactly the similarity assumption, hence the model can be considered minimal as well...|$|R
40|$|Despite perfect {{functioning}} of its internal components, a robot can be unsuccessful in performing its tasks because of unforeseen situations. These situations {{occur when the}} behavior of the objects in the robot’s environment deviates from its expected values. For robots, such deviations are exhibited in the form of unknown external faults which prohibit them from performing their tasks successfully. In this work we propose to use naive physics knowledge to reason about such faults in the robotics domain. We propose an approach that uses naive physics concepts to find information about the situations which result in a detected unknown fault. The naive physics knowledge is represented by the physical properties of objects which are formalized in a <b>logical</b> <b>framework.</b> The proposed <b>approach</b> applies a qualitative version of physical laws to these properties for reasoning about the detected fault. By interpreting the reasoning results the robot finds the information about the situations which can cause the fault. We apply the proposed approach to the scenarios in which a robot performs manipulation tasks of picking and placing objects. Results of this application show that naive physics holds great promise for reasoning about unknown ex- ternal faults in robotics...|$|R
40|$|We {{show how}} coercive subtyping may {{be added to}} a lambda-free <b>logical</b> <b>framework,</b> by {{constructing}} the <b>logical</b> <b>framework</b> TF<, {{an extension of the}} lambda-free <b>logical</b> <b>framework</b> TF with coercive subtyping. Instead of coercive application, TF< makes use of a typecasting operation. We develop the metatheory of the resulting framework, including providing some general conditions under which typecasting in an object theory with coercive subtyping is decidable. We show how TF< may be embedded in the <b>logical</b> <b>framework</b> LF, and hence how results about LF may be deduced from results about TF<...|$|R
50|$|In logic, {{a logical}} {{framework}} {{provides a means}} to define (or present) a logic as a signature in a higher-order type theory {{in such a way}} that provability of a formula in the original logic reduces to a type inhabitation problem in the framework type theory. This approach has been used successfully for (interactive) automated theorem proving. The first logical framework was Automath; however, the name of the idea comes from the more widely known Edinburgh Logical Framework, LF. Several more recent proof tools like Isabelle are based on this idea. Unlike a direct embedding, the <b>logical</b> <b>framework</b> <b>approach</b> allows many logics to be embedded in the same type system.|$|E
40|$|In {{this second}} part, we showed the <b>Logical</b> <b>Framework</b> <b>Approach</b> in a {{university}} library. The successive steps of the methodology are includes: a) Problem Identification; b) Participation Analysis; c) Problem Analysis; d) Objectives Analysis; e) Alternatives Analysis and f) Matrix of the Logical Framework...|$|E
40|$|The work {{presents}} in didactic {{form the}} main {{concepts of the}} <b>Logical</b> <b>Framework</b> <b>Approach.</b> The main elements of the methodology are described: Participation Analysis; Problem Analysis; Problem Tree; Objectives Analysis; Objective Tree; Alternatives Analysis; Matrix of the Logical Framework. In a second part of this work, a complete example related to a university library will be developed...|$|E
40|$|Any opinions, findings, {{conclusions}} or recommendations {{expressed in}} this publication {{are those of the}} author and A <b>logical</b> <b>framework</b> and its implementation should serve as a flexible tool for specifying, simulating, and reasoning about formal systems. When the formal systems we are interested in exhibit state and concurrency, however, existing <b>logical</b> <b>frameworks</b> fall short of this goal. <b>Logical</b> <b>frameworks</b> based on a rewriting interpretation of substructural logics, ordered and linear logic in particular, can help. To this end, this dissertation introduces and demonstrates four methodologies for developing and using substructural <b>logical</b> <b>frameworks</b> for specifying and reasoning about stateful and concurrent systems. Structural focalization is a synthesis of ideas from Andreoli’s focused sequent calculi and Watkins’s hereditary substitution. We can use structural focalization to take a logic and define a restricted form of derivations, the focused derivations, that form the basis of a <b>logical</b> <b>framework.</b> We apply this methodology to define SLS, a <b>logical</b> <b>framework</b> for substructural <b>logical</b> specifications, as a fragment of ordere...|$|R
40|$|<b>Logical</b> <b>frameworks</b> - formal {{systems for}} the {{specification}} and representation of other formal systems - are now a well-established field of research, and the number and variety of <b>logical</b> <b>frameworks</b> is large and growing continuously. In this thesis, I tie several examples of <b>logical</b> <b>frameworks</b> into a single hierarchy. I begin by introducing an infinite family of new, weak, lambda-free <b>logical</b> <b>frameworks.</b> These systems do not use lambda-abstraction, local definition, or any similar feature; parameterisation, and the instantiation of parameterisation, is taken as basic. These frameworks form conservative extensions of one another; this structure of extension is what I call the modular hierarchy of <b>logical</b> <b>frameworks.</b> I show how several examples of existing <b>logical</b> <b>frameworks</b> - specifically, the systems PAL and AUT- 68 from the AUTOMATH family, the Edinburgh <b>Logical</b> <b>Framework,</b> Martin-Lof's <b>Logical</b> <b>Framework,</b> and Luo's system PAL+ - can be fitted into this hierarchy, {{in the sense that}} one of the weak frameworks can be embedded in each as a conservative subsystem. I give several examples of adequacy theorems for object theories in the weak frameworks; these theorems are easier to prove than is usually the case for a <b>logical</b> <b>framework.</b> Adequacy theorems for the systems higher in the hierarchy follow as immediate corollaries. In the second part of this thesis, I investigate an approach to the design of <b>logical</b> <b>frameworks</b> suggested by the existence of such a hierarchy: that a framework could be built by specifying a set of features, the result of adding any of which to a framework is a conservative extension of the same. I show how all of the weak frameworks from the first part, as well as two of the systems we gave there as examples, can indeed be built in this manner...|$|R
40|$|The Concurrent <b>Logical</b> <b>Framework,</b> or CLF, {{is a new}} <b>logical</b> <b>framework</b> {{in which}} {{concurrent}} computations can be represented as monadic objects, {{for which there is}} an intrinsic notion of concurrency. It is designed as a conservative extension of the linear <b>logical</b> <b>framework</b> LLF with the synchronous connectives# of intuitionistic linear logic, encapsulated in a monad. LLF is itself a conservative extension of LF with the asynchronous connectives -#, & and #...|$|R
40|$|The three-year {{research}} project funded by MSB applies design science, {{in combination with}} traditional scientific investigation, to develop a method to guide the planning phase of capacity development projects for disaster risk reduction and climate change adaptation. The method facilitates local participation and ownership as it builds on {{the strengths of the}} <b>Logical</b> <b>Framework</b> <b>Approach</b> (LFA), while contextualising it to suit capacity development for disaster risk management and climate change adaptation...|$|E
40|$|The {{topic of}} the thesis focuses on the {{management}} of projects funded by the EU. In the first part I provide basic information about possibility of withdrawing funds from the EU. I describe operational programmes, funding opportunities {{and the process of}} withdrawing finances. I focus on the classification of different types of projects to be financed. The second part focuses on project management itself. I will analyze the project management methodology approved by European Commission for projects funded by the EU [...] the <b>logical</b> <b>framework</b> <b>approach.</b> I will analyze whether the <b>logical</b> <b>framework</b> <b>approach</b> covers all phases of the project life cycle defined by the EU. I propose some methods {{that can be used in}} practice for different types of project with usage of well-known standard for project management [...] PMBOK. The last part includes a case study [...] analysis of project "Revitalization of village center in Drnava". Applying the logical framework methodology I will design a logical framework matrix for the village, which is one of the obligatory documents needed for the subsidiary applicants...|$|E
40|$|Personalized {{inclusive}} eLearning {{requires a}} dynamic support {{in terms of}} recommendation strategies that combines design time and runtime approaches. This support is to be provided by standard-based open learning management systems. In this paper, we identify different situations during the delivery of a course based on the Collaborative <b>Logical</b> <b>Framework</b> <b>approach</b> and propose when to recommend and what recommendations are to be provided to the learners to improve their performance by addressing eLearning critical factors. Expert evaluations and empirical studies maintain this work...|$|E
40|$|A key {{component}} in proof assistant {{software is the}} meta-language used to encode the objects that are being reasoned about. Such a meta-language is called a <b>logical</b> <b>framework.</b> Several different <b>logical</b> <b>frameworks</b> exist; some only provide the most basic encoding of abstract syntax data, while others support powerful representation methodologies and concepts such as judgments-as-types and higher-order abstract syntax, e. g. the <b>logical</b> <b>framework</b> LF. The direct support for high-level concepts in the <b>logical</b> <b>framework</b> allows for rapid prototyping of new logics, type systems, and semantics. It also eases the development of theorems when the key concepts are directly supported. A concept, which is becoming increasingly important, is resources, but so far resources have not been supported very well by existing <b>logical</b> <b>frameworks.</b> In this thesis I develop the theoretical infrastructure required to implement — and give an implementation of — a new <b>logical</b> <b>framework</b> that extends LF with the concepts of both linear resources, which must be used exactly once, and affine resources, {{which can be used}} at most once...|$|R
40|$|Theory of Change’ (ToC) is a {{critical}} thinking approach to program design, monitoring, and evaluation which has become increasingly influential in international development. Described as “a roadmap, a blueprint, an engine of change, a theory of action and more” (Stein and Valters 2012 : 5), ToC outlines the building blocks and the relationships between them {{that would lead to}} the accomplishment of a long-term goal. When done well, this approach enables stakeholders to embed an intervention within a larger strategy and broad, transformative analysis. It is flexible and practical insofar as it clearly articulates a vision of meaningful social change, and then systematically maps out specific steps towards achieving it. ToC is especially well-suited for the design, monitoring, and evaluation of complex, multifaceted, long-term endeavors and ‘wicked problems’ 1 like climate change, conflict transformation, and gender equality. It is not without its critics, however, and there are concerns that if misapplied it might become an onerous (and potentially confusing) bureaucratic requirement rather than a vehicle for transformation. In this Guidance Note, we describe the Theory of Change approach and explain why it is a good fit for climate change adaptation programming. We highlight its differences with the more familiar logic model / <b>logical</b> <b>framework</b> (‘logframe’) <b>approaches</b> – and also show how they can be used together. We go on to guide the reader through the steps of a hypothetical ToC exercise, and then comment on how to avoid the disadvantages and pitfalls that can occur when applying this model. We conclude by highlighting a ‘real world’ example of how one agency has used ToC to enhance its work...|$|R
50|$|The {{intersection}} of logic and type theory {{is a vast}} and active research area. New logics are usually formalised in a general type theoretic setting, known as a <b>logical</b> <b>framework.</b> Popular modern <b>logical</b> <b>frameworks</b> such as the calculus of constructions and LF are based on higher-order dependent type theory, with various trade-offs in terms of decidability and expressive power. These <b>logical</b> <b>frameworks</b> are themselves always specified as natural deduction systems, which {{is a testament to}} the versatility of the natural deduction approach.|$|R
40|$|Diploma {{thesis is}} {{dedicate}} to plan project which {{task is to}} improve communication on high school while {{it is going to}} use project and change management. The theoretical part is about basic knowledge of project and change management. Analysis of current state is done primarly with strategic analysis. Practical part include <b>Logical</b> <b>Framework</b> <b>approach,</b> risk analysis, budget etc. In this part we also choose and implement chosen IT solution. Benefits of the project and project itself is summarized at the end of thesis...|$|E
40|$|This paper {{presents}} {{an evaluation of}} the 15 -week course on Training in Fisheries Planning and Management being offered at the University of Namibia since 1991. This course includes instruction in fisheries technology, fisheries biology, fisheries law and law of the sea, fisheries economics, fisheries sociology, environment impact assessment, planning and management, the <b>logical</b> <b>framework</b> <b>approach</b> to planning and computer literacy. The participats in the course have rated the various elements in a range of 2. 9 to 4. 7 out of a maximum of 5 points...|$|E
40|$|As public {{services}} come under more scrutiny, practitioners are evaluating {{more of their}} investments in human capital. But, faced with numerous evaluation approaches, how do they compare them? This paper presents The Evaluator's Comparison Framework (ECF), {{a useful tool for}} comparing the planning, implementation (including monitoring and evaluation), and reporting elements of a project/initiative. It also demonstrates the framework in use with a comparison of the <b>Logical</b> <b>Framework</b> <b>Approach</b> (LFA) and the abdi Recommended ROI approach. From this demonstration, the differences between these approaches can be seen, allowing evaluators to select the one more appropriate to their needs...|$|E
40|$|Abstract. In recent years, <b>logical</b> <b>frameworks</b> which support formalizing {{language}} specifications {{together with}} their meta-theory have been pervasively used in small and large-scale applications, from certifying code [2] to advocating a general infrastructure for formalizing the meta-theory and semantics of programming languages [5]. In particular, the <b>logical</b> <b>framework</b> LF [9], based on the dependently typed lambda-calculus, and light-weight variants of it like LFi [17] have {{played a major role}} in these applications. While the acceptance of <b>logical</b> <b>framework</b> technology has grown and they have matured, one of the most criticized points is concerned with the run-time performance. In this tutorial we give a brief introduction to <b>logical</b> <b>frameworks,</b> describe its state-of-the art and present recent advances in addressing some of the existing performance issues. ...|$|R
40|$|We {{illustrate}} how definitions and correctness proofs for the familiar thunk-based simu-lation of call-by-name by call-by-value can be encoded in the <b>logical</b> <b>framework</b> LF and the logic programming language Elf. This work {{is part of}} a survey of <b>logical</b> <b>frameworks</b> applied to formalizing operational semantics and associated meta-theory. ...|$|R
40|$|CLF {{is a new}} <b>logical</b> <b>framework</b> with an {{intrinsic}} notion of concurrency. It is designed as a conservative extension of the linear <b>logical</b> <b>framework</b> LLF with the synchronous connectives # of intuitionistic linear logic, encapsulated in a monad. LLF is itself a conservative extension of LF with the asynchronous connectives #...|$|R
40|$|The {{success of}} any project is {{directly}} related to the quality of the decisions underlying the project. Quality decisions can be defined as being “well considered, justifiable and explainable ” [1]. Coherent and logical methodologies or approaches have been developed to aid project decision makers in making these quality decisions. These approaches should serve as ”intelligible, acceptable, and exhaustive instrument(s) of communication allowing conception, justification, and transformation of preferences within the decision process. ” [2] 2 LFA WITHIN THE PROJECT CYCLE One such decision-aiding approach is the <b>logical</b> <b>framework</b> <b>approach</b> (LFA), developed in 1969 by Rosenberg for USAID. This approach is well suite...|$|E
40|$|The article {{examines}} international development assistance—aid. Donors assert that experts possess predictive knowledge and project belief in such knowledge into organizational form—the <b>Logical</b> <b>Framework</b> <b>Approach.</b> While such beliefs lack predictive power, as aid operates under multiple sovereignty conditions, no single authority determines truth. Donors ease pressure on experts by accepting variation in intervention logics, yet assert {{the validity of}} “single truth ” knowledge; knowledge production practices have not basically changed. Belief that what is believed is true, revealed in aid work, illuminates the nature of policy in rich countries and helps explain low confidence in government...|$|E
40|$|While trauma {{registries}} {{provide the}} mechanisms to collect comprehensive, timely and accurate data {{related to the}} injuries and evaluate trauma care systems, {{they have not been}} established in most developing countries. On the other hand, in complex projects that have large aims, a <b>logical</b> <b>framework</b> <b>approach</b> (LFA) can help summarize and describe the multiple branches of the project systematically, and elucidate the main goals, extensive objectives, activities and expected outcomes. Therefore a LFA can be used to design and guide trauma registry project management, to integrate the cultural, clinical and capacity variations among countries; and to ensure early alignment of the project's design and evaluation...|$|E
5000|$|We now {{formulate}} {{the basic}} <b>logical</b> <b>framework</b> of nonstandard analysis: ...|$|R
5000|$|To {{describe}} a <b>logical</b> <b>framework,</b> one must provide the following: ...|$|R
40|$|We {{present and}} discuss various formalizations of Modal Logics in <b>Logical</b> <b>Frameworks</b> based on Type Theories. We {{consider}} both Hilbert- and Natural Deductionstyle proof systems for representing both truth (local) and validity (global) consequence relations for various Modal Logics. We introduce several techniques for encoding the structural peculiarities of necessitation rules, in the typed -calculus metalanguage of the <b>Logical</b> <b>Frameworks.</b> These formalizations yield readily proof-editors for Modal Logics when implemented in Proof Development Environments, such as Coq or LEGO. Keywords: Hilbert and Natural-Deduction proof systems for Modal Logics, <b>Logical</b> <b>Frameworks,</b> Typed -calculus, Proof Assistants. Introduction In this {{paper we address}} the issue of designing proof development environments (i. e. "proof editors" or, even better, "proof assistants") for Modal Logics, in the style of [11, 12]. To this end, we explore the possibility of using <b>Logical</b> <b>Frameworks</b> (LF's) based on Type Theory [...] ...|$|R
