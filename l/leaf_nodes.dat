919|672|Public
5|$|Dying {{stands of}} B. coccinea were {{observed}} in 1989, and the fungus Cryptodiaporthe melanocraspedia isolated as the cause in 1995. The disease, a form of aerial canker, manifested initially as dead dry brown leaves and the tips of new growth. Plants would die from the top downwards, with larger branches affected over time. Under the outer bark, orange and brown patches of necrosis spread out from <b>leaf</b> <b>nodes</b> until they encircle the stem, which then dies. Flower spikes may be affected during flowering season. In humid spells during warm weather, white or pink spore tendrils are produced on dead wood. One affected stand monitored over three years from October 1989 to June 1992 showed a 97% mortality of plants (compared with a baseline 40%). Investigators Bryan Shearer and colleagues isolated another virulent pathogen that they identified as a species of Zythiostroma, however it appeared to invoke an immune response in the plant. This immune response, coupled {{with the fact that}} it had not been observed in the wild, led them to believe it was not a major pathogen of the species. This species has since been reclassified and named as Luteocirrhus shearii.|$|E
25|$|A {{balanced}} {{binary tree}} has the minimum possible maximum height (a.k.a. depth) for the <b>leaf</b> <b>nodes,</b> because {{for any given}} number of <b>leaf</b> <b>nodes,</b> the <b>leaf</b> <b>nodes</b> are placed at the greatest height possible.|$|E
25|$|Some {{balanced}} trees store values only at <b>leaf</b> <b>nodes,</b> and {{use different}} kinds of nodes for <b>leaf</b> <b>nodes</b> and internal nodes. B-trees keep values in every node in the tree, and may use the same structure for all nodes. However, since <b>leaf</b> <b>nodes</b> never have children, the B-trees benefit from improved performance if they use a specialized structure.|$|E
25|$|The {{previous}} step deleted {{an element}} (the new separator) from a <b>leaf</b> <b>node.</b> If that <b>leaf</b> <b>node</b> is now deficient (has {{fewer than the}} required number of nodes), then rebalance the tree starting from the <b>leaf</b> <b>node.</b>|$|R
5000|$|... 1 The first {{internode}} {{extends from}} the scale <b>leaf</b> <b>node</b> to the first true <b>leaf</b> <b>node</b> ...|$|R
5000|$|... 1 Stem {{elongation}} {{may occur}} earlier than stage 19; {{in this case}} continue with the principal stage 32 First internode extends from the scale <b>leaf</b> <b>node</b> to the first true <b>leaf</b> <b>node</b> ...|$|R
25|$|A B-tree is kept {{balanced}} by requiring that all <b>leaf</b> <b>nodes</b> {{be at the}} same depth. This depth will increase slowly as elements {{are added to the}} tree, but an increase in the overall depth is infrequent, and results in all <b>leaf</b> <b>nodes</b> being one more node farther away from the root.|$|E
25|$|<b>Leaf</b> <b>nodes</b> {{have the}} same {{restriction}} {{on the number of}} elements, but have no children, and no child pointers.|$|E
25|$|For any {{non-empty}} {{binary tree}} with n0 <b>leaf</b> <b>nodes</b> and n2 nodes of degree 2, n0 = n2 + 1.|$|E
5000|$|For every non-constant <b>leaf</b> <b>node,</b> {{assign a}} 1 (i.e. 1 {{register}} {{is needed to}} hold the variable/field/etc.). For every constant <b>leaf</b> <b>node</b> (RHS of an operation - literals, values), assign a 0.|$|R
30|$|After the {{classification}} tree is generated, we can search members who meet certain requirements easily via visiting {{from the top}} to the corresponding <b>leaf</b> <b>node.</b> If a new member just joins in, we can use his/her profile to search the tree and find the matched <b>leaf</b> <b>node</b> to insert the member. Each member in the searching pool is stored in one <b>leaf</b> <b>node</b> of {{the classification}} tree T. If a member’s certain attributes in the profile are updated, we can relocate the member to the proper <b>leaf</b> <b>node</b> by removing the member and then reinserting into the tree.|$|R
50|$|In version 0.4 of the Gnutella protocol, an ultrapeer which {{receives}} {{a message from}} a <b>leaf</b> <b>node</b> (message with hop count zero) knows for sure that the message was originated from that <b>leaf</b> <b>node.</b>|$|R
25|$|Unrooted trees {{illustrate}} {{only the}} relatedness of the <b>leaf</b> <b>nodes</b> {{and do not}} require the ancestral root to be known or inferred.|$|E
25|$|Decision {{complexity}} {{of a game}} {{is the number of}} <b>leaf</b> <b>nodes</b> in the smallest decision tree that establishes the value of the initial position.|$|E
25|$|The {{game tree}} size {{is the total}} number of {{possible}} games that can be played: the number of <b>leaf</b> <b>nodes</b> in the game tree rooted at the game's initial position.|$|E
50|$|The new node's joining request {{will always}} be {{forwarded}} to the <b>leaf</b> <b>node.</b> The <b>leaf</b> <b>node</b> will check to see whether if routing table is full. If the routing table is full, this level is full of <b>nodes</b> and the <b>leaf</b> <b>node</b> can accept the new node as its child {{to create a new}} level node. Otherwise, it must forward the new node to take over one of the empty positions.|$|R
2500|$|All insertions {{start at}} a <b>leaf</b> <b>node.</b> To insert a new element, search the tree {{to find the}} <b>leaf</b> <b>node</b> where the new element should be added. Insert the new element into that node with the {{following}} steps: ...|$|R
2500|$|In the B+ tree, {{copies of}} the keys are stored in the {{internal}} nodes; the keys and records are stored in leaves; in addition, a <b>leaf</b> <b>node</b> may include a pointer to the next <b>leaf</b> <b>node</b> to speed sequential access [...]|$|R
25|$|The game-tree {{complexity}} {{of a game}} {{is the number of}} <b>leaf</b> <b>nodes</b> in the smallest full-width decision tree that establishes the value of the initial position. A full-width tree includes all nodes at each depth.|$|E
25|$|Star {{alignment}} {{can be seen}} as {{a special}} case of the tree alignment. When we use star alignment, the evolutionary tree has only one internal node and n <b>leaf</b> <b>nodes.</b> The sequence, which is assigned to the internal node, is called core sequence.|$|E
25|$|Attack {{trees are}} related to the {{established}} fault tree formalism. Fault tree methodology employs boolean expressions to gate conditions when parent nodes are satisfied by <b>leaf</b> <b>nodes.</b> By including a priori probabilities with each node, it is possible to perform calculate probabilities with higher nodes using Bayes Rule. However, in reality accurate probability estimates are either unavailable or too expensive to gather. With respect to computer security with active participants (i.e., attackers), the probability distribution of events are probably not independent nor uniformly distributed, hence, naive Bayesian analysis is unsuitable.|$|E
30|$|The {{topology}} to be {{used for}} experimentation is the fat-tree topology described in [23]. For a K-pod fat tree, K flows are initiated every K 3 ms and K 2 flows every K 3 ms. The backoff delay is taken as K ms and the denial delay as K 3 ms. Each request is generated as defined above between random core and <b>leaf</b> <b>node</b> or random <b>leaf</b> and <b>leaf</b> <b>node.</b> The number of functions in the function sequence (chosen randomly) Random (1,..., 3) for Core to <b>Leaf</b> <b>Node</b> flows and Random(1,..., 5) <b>nodes</b> for <b>Leaf</b> to <b>Leaf</b> <b>Node</b> flows. The whole experiment is repeated 10 times to discard data from anomalous behavior.|$|R
5000|$|... leaf_to_increment = NULL p = pointer to the <b>leaf</b> <b>node</b> {{containing}} the next symbol IF (p is NYT) THEN Extend P by adding two children Left child becomes new NYT and right child {{is the new}} symbol <b>leaf</b> <b>node</b> p = parent of new symbol <b>leaf</b> <b>node</b> leaf_to_increment = Right Child of p ELSE Swap p with leader of its block IF (new p is sibling to NYT) THEN leaf_to_increment = p p = parent of p WHILE (p != NULL) Slide_And_Increment(p) IF (leaf_to_increment != NULL) Slide_And_Increment(leaf_to_increment) ...|$|R
30|$|Here, each <b>leaf</b> <b>node</b> in {{a minimal}} vertex {{resource}} hierarchy represents a resource node, i.e., a resource is encrypted with a <b>leaf</b> <b>node’s</b> key. There {{is a direct}} edge from each user node u to all of her authorized resource nodes, i.e., resources in her capability list (cpl[u]).|$|R
25|$|Insertion on {{internal}} nodes is slightly {{more complex than}} on <b>leaf</b> <b>nodes.</b> Say that the internal node is node A and that node B is the child of A. (If the insertion is to insert a right child, then B is the right child of A, and similarly with a left child insertion.) A assigns its child to the new node and the new node assigns its parent to A. Then the new node assigns its child to B and B assigns its parent as the new node.|$|E
25|$|In applications, it is {{frequently}} useful {{to build a}} B-tree to represent a large existing collection of data and then update it incrementally using standard B-tree operations. In this case, {{the most efficient way}} to construct the initial B-tree is not to insert every element in the initial collection successively, but instead to construct the initial set of <b>leaf</b> <b>nodes</b> directly from the input, then build the internal nodes from these. This approach to B-tree construction is called bulkloading. Initially, every leaf but the last one has one extra element, which will be used to build the internal nodes.|$|E
25|$|For example, {{it may be}} used to {{represent}} sparse bitsets, i.e., subsets of a much larger, fixed enumerable set. In such a case, the trie is keyed by the bit element position within the full set. The key is created from the string of bits needed to encode the integral position of each element. Such tries have a very degenerate form with many missing branches. After detecting the repetition of common patterns or filling the unused gaps, the unique <b>leaf</b> <b>nodes</b> (bit strings) can be stored and compressed easily, reducing the overall size of the trie.|$|E
50|$|When a node {{wants to}} leave the network, it must update the routing tables of its parent node, child nodes, {{adjacent}} nodes and routing nodes. If this <b>node</b> is a <b>leaf</b> <b>node,</b> it can leave the network safely. Otherwise, it must find a <b>leaf</b> <b>node</b> to replace its position.|$|R
5000|$|If {{the element}} {{is not in}} a <b>leaf</b> <b>node,</b> {{remember}} its location and continue searching until a leaf, which will contain the element's successor, is reached. The successor can be either the largest key that is smaller than the one to be removed, or the smallest key that is larger than the one to be removed. It is simplest to make adjustments to the tree from the top down such that the <b>leaf</b> <b>node</b> found is not a 2-node. That way, after the swap, there will not be an empty <b>leaf</b> <b>node.</b>|$|R
25|$|Expand the <b>leaf</b> <b>node</b> {{and choose}} one of its children.|$|R
25|$|Unrooted trees {{illustrate}} the relatedness of the <b>leaf</b> <b>nodes</b> without making assumptions about ancestry. They {{do not require}} the ancestral root to be known or inferred. Unrooted trees can always be generated from rooted ones by simply omitting the root. By contrast, inferring the root of an unrooted tree requires some means of identifying ancestry. This is normally done by including an outgroup in the input data so that the root is necessarily between the outgroup {{and the rest of}} the taxa in the tree, or by introducing additional assumptions about the relative rates of evolution on each branch, such as an application of the molecular clock hypothesis.|$|E
25|$|Internal nodes are all nodes {{except for}} <b>leaf</b> <b>nodes</b> and the root node. They are usually {{represented}} as an ordered set of elements and child pointers. Every internal node contains {{a maximum of}} U children and a minimum of L children. Thus, the number of elements is always 1 less {{than the number of}} child pointers (the number of elements is between L−1 and U−1). U must be either 2L or 2L−1; therefore each internal node is at least half full. The relationship between U and L implies that two half-full nodes can be joined to make a legal node, and one full node can be split into two legal nodes (if there’s room to push one element up into the parent). These properties make it possible to delete and insert new values into a B-tree and adjust the tree to preserve the B-tree properties.|$|E
500|$|Erythranthe guttata is {{the most}} {{widespread}} of the Erythranthe genus and its characteristics are fairly representative of the genus. E. guttata is [...] tall with disproportionately large [...] long, tubular flowers. Leaves are opposite and oval, [...] long. The species as strictly defined is perennial and spreads with stolons or rhizomes. The stem may be erect or recumbent. In the latter form, roots may develop at lower <b>leaf</b> <b>nodes.</b> Sometimes dwarfed, it may be hairless or have some hairs. Leaves are opposite, round to oval, usually coarsely and irregularly toothed or lobed. The bright yellow flowers are born on a raceme, most often with five or more flowers. The calyx has five lobes that are much shorter than the flower. Each flower has bilateral symmetry and has two lips. The upper lip usually has two lobes; the lower, three. The lower lip may have one large to many small red to reddish brown spots. The opening to the flower is hairy. The fruit is a two-valved capsule [...] long, containing many seeds.|$|E
5000|$|... #Caption: Slide_And_Increment(leaf node) sliding starts. P is a <b>leaf</b> <b>node.</b>|$|R
50|$|To delete {{a string}} x from a tree, we first locate the leaf {{representing}} x. Then, assuming x exists, we remove the corresponding <b>leaf</b> <b>node.</b> If {{the parent of}} our <b>leaf</b> <b>node</b> has only one other child, then that child's incoming label is appended to the parent's incoming label and the child is removed.|$|R
50|$|A {{multicast}} protection scheme through spanning paths is {{also one}} of the key approaches to protecting multicast sessions. A spanning path in a multicast tree is defined as a path from a <b>leaf</b> <b>node</b> to any other <b>leaf</b> <b>node</b> in the light tree. The scheme derives backup paths for every spanning path in the multicast tree.|$|R
