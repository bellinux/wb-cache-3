1|460|Public
40|$|The coding {{of data on}} 2, 565 {{individual}} human altitude chamber tests is reported {{as part of a}} selection procedure designed to eliminate individuals who are highly susceptible to decompression sickness, individual aircrew members were exposed to the pressure equivalent of 37, 000 feet and observed for one hour. Many entries refer to subjects who have been tested two or three times. This data contains a substantial body of statistical information important {{to the understanding of the}} mechanisms of altitude decompression sickness and for the computation of improved high altitude operating procedures. Appropriate computer formats and encoding procedures were developed and all 2, 565 entries have been converted to these formats and stored on magnetic tape. A gas <b>loading</b> <b>file</b> was produced...|$|E
50|$|Some {{database}} programs {{take one}} <b>load</b> <b>file</b> for importing images {{and another for}} importing data while others take only one <b>load</b> <b>file</b> for both pieces of information.|$|R
5000|$|Recursive {{selection}} - <b>loads</b> <b>files</b> in directory and in subdirectories.|$|R
50|$|A <b>load</b> <b>file</b> in the {{litigation}} community is {{commonly referred to}} as the file used to import data (coded, captured or extracted data from ESI processing) into a database; or the file used to link images. These <b>load</b> <b>files</b> carry commands, commanding the software to carry out certain functions with the data found in them.|$|R
50|$|Application Provider Security Domains {{are only}} {{instantiated}} from pre-loaded executable <b>load</b> <b>files.</b>|$|R
5000|$|PhotoLoader organizes <b>loaded</b> <b>files</b> {{according}} to the date each file was created.|$|R
50|$|<b>Load</b> <b>files</b> {{are usually}} ASCII text files that have delimited fields of information. Such <b>load</b> <b>files</b> may have data about {{documents}} to be imported into a document management software such as Concordance or Summation. Or {{they may have}} the path or directory where images may reside so that the software can link such images to their corresponding records.|$|R
5000|$|FILESHIGH (MS-DOS 7.0 and DR-DOS 7.02 {{and higher}} and FreeDOS only) : Same as FILES, but {{explicitly}} <b>loads</b> <b>file</b> handles into upper memory.|$|R
5000|$|... #Caption: Instead of <b>loading</b> <b>files</b> {{one after}} the other, AMD can load them all separately, {{even when they are}} {{dependent}} on each other.|$|R
5000|$|Version 9.1 was {{released}} in November, 1991. It is a maintenance update that makes REVIC compatible with MS-DOS 5.0. Previous versions of REVIC will not <b>load</b> <b>files</b> correctly similar to the previous problem with MS-DOS 4.0/4.01.|$|R
50|$|CONFIG.SYS is {{composed}} mostly of name=value directives which look like variable assignments. In fact, these will either define some tunable parameters often resulting in reservation of memory, or <b>load</b> <b>files,</b> mostly device drivers and TSRs, into memory.|$|R
5000|$|OCR or Search-able Text {{which is}} {{considered}} [...] "data" [...] is also imported into most database programs via the same <b>load</b> <b>files.</b> Though some people prefer to load the OCR into their databases by running a separate command to search and find the desired text.|$|R
5000|$|Text mode {{drivers are}} a {{different}} from PnP drivers as they are loaded regardless if the hardware is present or not. The loading phase of the installer displays some messages on the screen about the current <b>file</b> being <b>loaded.</b> The message is [...] "Setup is <b>loading</b> <b>files</b> (file description)...". The <b>files</b> <b>loaded</b> in this phase are those located in sections ending in [...] In those sections, the key gives a driver name and the value gives a file. The driver name is the looked {{up in the same}} section without the [...] suffix to find the driver's user-friendly name. The kernel also needs a registry hive mounted to load the registry from, so [...] is also <b>loaded.</b> All the <b>file</b> names of the <b>files</b> <b>loaded</b> by the boot loader are hard-coded except for the drivers.|$|R
5000|$|Music files {{have to be}} [...] "wrapped" [...] by Sony {{software}} {{in order to be}} played on a Sony music player. Sony has not introduced drag and drop support for music files. Although it is possible to <b>load</b> <b>files</b> directly onto a Sony player without using SonicStage, {{it is not possible to}} play music <b>files</b> <b>loaded</b> this way. Neither is it possible in most cases to transfer music files back to a PC. (all versions prior to 3.4) ...|$|R
50|$|Documents {{are turned}} over to {{opposing}} counsel, based on agreed-upon specifications. Often this production {{is accompanied by a}} <b>load</b> <b>file,</b> which is used to load documents into a document review platform. Documents can be produced either as native files, or in a petrified format (such as PDF or TIFF), alongside metadata.|$|R
5000|$|The {{structure}} and key structure <b>files</b> are <b>loaded</b> before {{the process is}} compiled. This {{is done by the}} <b>load</b> <b>file.</b> BUILDER makes the assumption that the data structures are already loaded when it compiles a process. It is at this point that the compilation [...] "binds" [...] the data structures to the code.|$|R
50|$|However, {{not all of}} the game's {{system file}} have been released, meaning that the game itself can only be {{modified}} to a certain extent in its script. This make bugs and crashes quite difficult to repair, and to this day, it remains quite an unstable game, suffering memory errors and crashes when <b>loading</b> <b>files.</b>|$|R
50|$|The {{strength}} of CEGUI's design {{is that it}} is highly configurable. The system does not directly <b>load</b> <b>files,</b> render windows, directly display text, or even fetch input from the system. CEGUI interfaces with these through user-defined code, though its source code package comes with a number of modules for using certain components and libraries.|$|R
5000|$|Support for dynamic models (just <b>load</b> [...]ecore <b>file</b> {{and commit}} to repository) ...|$|R
50|$|The FC3 can be {{combined}} very well with a SD2IEC-Floppy, because his Fastloader stays alive in File-Browsers like CBM or SD2BRWSE. Also, user have the very good FC3 F-key commands for changing directories on the SD-Card or <b>loading</b> <b>files</b> without the need of typing anything. Therefore, the combination FC3 and SD2IEC complement each other very well.|$|R
5000|$|StormEngineC (JavaScript) - Javascript 3D {{graphics}} {{library with}} option of <b>loading</b> COLLADA <b>files.</b>|$|R
5000|$|Global stream {{system for}} data <b>loading</b> from <b>file,</b> file part, memory stream, or package ...|$|R
5000|$|... preinstall [...] - [...] run {{just prior}} to <b>loading</b> the <b>files</b> in the fileset.|$|R
5000|$|...- <b>loads</b> a <b>file</b> into E in {{read-only}} mode. (Not in v 3.12 (dos 6)) ...|$|R
5000|$|IFS (MS-DOS 4.00-4.01 only, ignored under DR-DOS 7.02 and higher; OS/2) : <b>Loads</b> installable <b>file</b> systems.|$|R
5000|$|Three.js (JavaScript) - a 3D Javascript library {{capable of}} <b>loading</b> COLLADA <b>files</b> {{in a web}} browser.|$|R
50|$|In late 1981 Paterson, now at Microsoft, {{began writing}} PC DOS 1.10. It debuted in May 1982 {{along with the}} Revision B IBM PC. Support for the new {{double-sided}} drives was added, allowing 320 kB per disk. A number of bugs were fixed, and error messages and prompts were made less cryptic. The DEBUG utility was now able to <b>load</b> <b>files</b> greater than 64k in size.|$|R
50|$|Ruckus Network {{is a free}} ad-supported online {{music service}} {{available}} to students at all American colleges. With its official launch in September 2004, Ruckus became the first online music service focused exclusively on the college market. Ruckus uses Microsoft's Windows Media DRM system, allowing the possibility of <b>loading</b> <b>files</b> onto compatible PlayForSure portable media players. Their service offers over three million tracks free to its users.|$|R
5000|$|...c command : Execute command {{on first}} buffer <b>loaded</b> from <b>file.</b> May be used {{up to ten}} times.|$|R
3000|$|After <b>loading</b> <b>files</b> with ARFF loader, {{the class}} {{assigner}} picks up appropriate class labels from dataset and performs feature selection {{on the basis}} of frequently used headings and most frequent titles. The feature selector module is implemented using three feature selection methods namely Document Frequency (DF), Mutual Information (MI) and Information Gain (IG). The mathematical modeling of these feature selection methods requires some probability distributions and statistical notations described below: [...]...|$|R
30|$|After {{format and}} {{measurement}} <b>files</b> are <b>loaded,</b> users need to <b>load</b> the response <b>file</b> (see Table  1 and “Acquisition and preparation of magnetometer sensor response” section) by {{clicking on the}} third icon on the toolbar to locate and <b>load</b> the response <b>file.</b> If the response file is appropriately formatted and successfully loaded, UDECON will automatically plot the response file data and show {{the name of the}} response file just beneath the measurement file name (Fig.  2 c). The procedures of loading format and measurement files followed by response file, are typical for deconvolution of a measurement file for the first time. If users have previously conducted deconvolution with these <b>loaded</b> <b>files</b> and saved a “.mat” file using UDECON (see “Saving deconvolution data and plots” section), deconvolution optimization analysis can be continued by directly <b>loading</b> the “.mat” <b>file</b> without <b>loading</b> any of the three files (see Fig.  1). The “.mat” file stores not only the deconvolution-related data but also the loaded measurement and response data. The “.mat” <b>file</b> can be <b>loaded</b> to UDECON using the fourth icon on the toolbar.|$|R
5000|$|... // <b>Load</b> DLL <b>file</b> hinstLib = LoadLibrary(TEXT("Example.dll")); if (hinstLib == NULL) { printf("ERROR: {{unable to}} load DLL\n"); return 1; } ...|$|R
50|$|The file {{compiler}} is invoked {{using the}} function compile-file. The generated file with compiled code {{is called a}} fasl (from fast <b>load)</b> <b>file.</b> These fasl files and also source code <b>files</b> can be <b>loaded</b> with the function load into a running Common Lisp system. Depending on the implementation, the file compiler generates byte-code (for example for the Java Virtual Machine), C language code (which then is compiled with a C compiler) or, directly, native code.|$|R
50|$|Ruckus Network {{was a free}} ad-supported online {{music service}} {{available}} to students at all American colleges. With its official launch in September 2004, Ruckus became the first online music service focused exclusively on the college market. Ruckus used Microsoft's Windows Media DRM system, allowing the possibility of <b>loading</b> <b>files</b> onto compatible PlayForSure portable media players. Their service offered over 3 million tracks free to its users. However, in February 2009, Ruckus announced that its services {{will no longer be}} available.|$|R
5000|$|TPF {{also does}} not include a compiler/assembler, text editor, or {{the concept of a}} desktop. TPF {{application}} source code is typically kept in PDSs on a z/OS system. However, some previous installations of TPF kept source code in z/VM-based files and used the CMS update facility to handle versioning. Currently, the z/OS compiler/assembler is used to build TPF code into object modules, producing <b>load</b> <b>files</b> that the TPF [...] "online system" [...] can accept. Starting with z/TPF 1.1, Linux will be the build platform.|$|R
50|$|C64's BASIC {{did provide}} a LOAD command which was {{intended}} to <b>LOAD</b> binary program <b>files,</b> data files, and BASIC programs, but this command when used in a C64 BASIC program to <b>load</b> binary data <b>files</b> like BSAVE images needed to restart the BASIC program after the ("non-relocating") load.|$|R
