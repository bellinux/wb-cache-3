24|16|Public
5000|$|Port Login (PLOGI) - N_Port <b>login,</b> <b>request</b> login {{to another}} N_port, before any data {{exchange}} between ports; ...|$|E
5000|$|Consider {{a system}} that can only support ten users (S=10). Whenever a user logs in, P is called, decrementing the {{semaphore}} S by 1. Whenever a user logs out, V is called, incrementing S by 1 representing a login slot that has become available. When S is 0, any users wishing to log in must wait until [...] and the <b>login</b> <b>request</b> is enqueued onto a FIFO queue; mutual exclusion is used to ensure that requests are enqueued in order. Whenever S becomes greater than 0 (login slots available), a <b>login</b> <b>request</b> is dequeued, and the user owning the request is allowed to log in.|$|E
50|$|Presence, {{particularly}} MPOP, requires {{collaboration between}} {{a number of}} electronic devices (for example IM client, home phone, cell phone, and electronic calendar) and the presence services each of them are connected with. To date, {{the most common and}} wide-scale implementations use closed systems, with a SPOP (Single Point of Presence, where a single device publishes state). Some vendors have upgraded their services to automatically log out connected clients when a new <b>login</b> <b>request</b> reaches the server from a newly connecting different device. For presence to universally work with MPOP support, multiple devices must be able to not only intercommunicate among each other, the status information must also be appropriately handled by all other interoperable, connected presence services and the MPOP scheme for their clients.|$|E
50|$|Credential {{stuffing}} {{is a type}} of cyberattack where stolen account credentials {{are used}} to access user accounts through large-scale automated <b>login</b> <b>requests</b> directed against a web application.|$|R
50|$|The GameCQ system {{deals with}} all <b>login</b> <b>requests,</b> {{as well as}} session {{information}} and chat abilities via a process called the MetaServer. When a player connects {{to one of the}} available servers, details are passed between the MetaServer and the selected game node so as to authenticate that user.|$|R
50|$|A Wireless Supplicant is {{a program}} that runs on a {{computer}} and is responsible for making <b>login</b> <b>requests</b> to a wireless network. It handles passing the login and encryption credentials to the authentication server. It also handles roaming from one wireless access point to another, {{in order to maintain}} connectivity.|$|R
3000|$|... {{can not get}} I, {{such that}} it has to forge an invalid one. When S {{receives}} the <b>login</b> <b>request</b> message from U, it will decrypt and compute G_ 1 ^* = E_K^* (ID^* ||N_ 1 ||γ ||N_c [...]), but the equation ID^* = ID does not hold, therefore, S will reject the <b>login</b> <b>request.</b> Thus, our scheme can resist insider impersonation attack.|$|E
40|$|Abstract The paper {{presents}} a remote user authentication scheme using {{the properties of}} bilinear pairings. In the scheme, the remote system receives user <b>login</b> <b>request</b> and allows login to the remote system if the <b>login</b> <b>request</b> is valid. The scheme prohibits the scenario of many logged in users with the same login-ID, and provides a flexible password change option to the registered users without any assistance from the remote system...|$|E
3000|$|... [...])[*]≤[*]∆T holds. If {{the answer}} is no, Sn rejects the <b>login</b> <b>request</b> of U. Otherwise, it {{continues}} to perform the next step.|$|E
25|$|An unintentional denial-of-service {{may also}} {{result from a}} prescheduled event created by the website itself, {{as was the case}} of the Census in Australia in 2016. This could be caused when a server {{provides}} some service at a specific time. This might be a university website setting the grades to be available where it will result in many more <b>login</b> <b>requests</b> at that time than any other.|$|R
2500|$|The {{security}} subsystem deals with security tokens, grants or denies access to user accounts based on resource permissions, handles <b>login</b> <b>requests</b> and initiates <b>login</b> authentication, and determines which system resources {{need to be}} audited by Windows NT. It also looks after Active Directory. [...] The workstation service implements the network redirector, which is the client side of Windows file and print sharing; it implements local requests to remote files and printers by [...] "redirecting" [...] them to the appropriate servers on the network. Conversely, the server service allows other computers on the network to access file shares and shared printers offered by the local system.|$|R
40|$|We {{describe}} {{a novel approach}} to reduce the impact of spoofing by a subtle change in the login process. At {{the heart of our}} contribution is the understanding that current anti-spoof technologies fail {{largely as a result of}} the difficulties to communicate security and risk to typical users. Accordingly, our solution is oblivious to whether the user was tricked by a fraudster or not. We achieve that by modifying the user login process, and letting the browser or operating system cause different results of user <b>login</b> <b>requests,</b> based on whether the site is trusted or not. Experimental results indicate that our new approach, which we dub “SpoofKiller”, will address approximately 80 % of spoofing attempts. Free licenses to the technology are offered by the organization owning it, and serious discussions with a major OS vendor have been initiated, with the goal of protecting payments made from apps running on their platform. ...|$|R
3000|$|... } and {{attempts}} replaying {{the same message}} for login to Sn. The verification of the <b>login</b> <b>request</b> fails because of (T [...]...|$|E
3000|$|... [...]. Because the {{attacker}} {{does not know}} U’s password, the smart card does not validate the <b>login</b> <b>request</b> and rejects the access request of {{the attacker}}.|$|E
3000|$|... checks if b[*]=[*]b′ holds. If {{the answer}} is yes, the {{validity}} of U can be assured and Sn continues to perform the next step. Otherwise, it rejects the <b>login</b> <b>request</b> message of U.|$|E
40|$|With {{the rapid}} growth of {{information}} technologies, mobile devices have been utilized in a variety of services such as e-commerce. When a remote server provides such e-commerce services to a user, it must verify the legitimacy of the user over an insecure communication channel. Therefore, remote user authentication has been widely deployed to verify the legitimacy of remote user <b>login</b> <b>requests</b> using mobile devices like smart cards. In this paper we propose a smart card-based authentication scheme that provides both user anonymity and mutual authentication between a remote server and a user. The proposed authentication scheme is a simple and efficient system applicable to the limited resource and low computing performance of the smart card. The proposed scheme provides not only resilience to potential attacks in the smart card-based authentication scheme, but also secure authentication functions. A smart card performs a simple one-way hash function, the operations of exclusive-or and concatenation in the authentication phase of the proposed scheme. The proposed scheme also provides user anonymity using a dynamic identity and key agreement, and secure password change...|$|R
40|$|Even though {{passwords}} are {{the most}} convenient means of authentication, they bring along themselves the threat of dictionary attacks. Dictionary attacks may be of two kinds: online and offline. While offline dictionary attacks are possible only if the adversary is able to collect data for a successful protocol execution by eavesdropping on the communication channel and can be successfully countered using public key cryptography, online dictionary attacks can be performed by anyone {{and there is no}} satisfactory solution to counter them. This paper presents a new authentication protocol which is called CompChall (computational challenge). The proposed protocol uses only one way hash functions as the building blocks and attempts to eliminate online dictionary attacks by implementing a challenge-response system. This challenge-response system is designed in a fashion that it does not pose any difficulty to a genuine user but is time consuming and computationally intensive for an adversary trying to launch a large number of <b>login</b> <b>requests</b> per unit time {{as in the case of}} an online dictionary attack. The protocol is stateless and thus less vulnerable to DoS (Denial of Service) attacks. 1...|$|R
30|$|The system {{starts in}} idle state (i 1). If the user <b>requests</b> <b>login</b> in the system, Manage Access (t 16) state is executed. In case of {{failure of the}} login, the system returns to the idle state (i 1), otherwise, it enters in idle state (i 2). From i 2, the user can start to {{characterize}} the meeting, so, the system enters in Meeting Characterized (g 2) superstate in which Define participants (t 2), Define Date Range (t 1) and Define topics (t 3) states are reached, followed by the idle state (i 2).|$|R
40|$|Abstract: A remote {{password}} {{authentication scheme}} based on the Chinese remainder theorem is proposed. The scheme can verify the remote password without verification tables. In the initial phase, the password generation centre generates and assigns a password corresponding to each user. The ideas of smart cards and the identity-based signature scheme introduced by Shamir are employed in this phase. Each user possesses a smart card for later login and authentication. In the login phase, the user submits the identity and password associated with the smart card. In the authentication phase, the system verifies the remotely submitted password to check if the <b>login</b> <b>request</b> is accepted or rejected. A signature scheme and communication timestamps are provided in the authentication phase against the potential attacks of replaying a previously intercepted <b>login</b> <b>request.</b> ...|$|E
30|$|When {{the main}} page is rendered, two HTML pages, privacyCA.htm and ted.htm, are {{uploaded}} connecting the application server to the device and privacy CA. The user then performs a simple name/password authentication with the application server via HTTP {{message to the}} application server {{as a part of}} a <b>login</b> <b>request.</b>|$|E
40|$|The paper {{presents}} an authentication scheme for remote systems using smart card. The scheme prevents the scenario of many logged in users {{with the same}} login identity, and does not require password/verifier table to validate the users' <b>login</b> <b>request.</b> The scheme provides a user-friendly password change option, and withstands the replay, impersonation, stolen-verifier, guessing, and denial-of-service attacks...|$|E
40|$|Cloud Computing {{is a new}} {{technology}} which is directly connected with the internet which provide on demand self service internet infrastructure where a customer can pay and use only what is needed. Cloud Computing all services are managed by third party cloud service provider. Nowadays majority using static password to login into the system or access the online accounts in cloud but never change the password which is not secure. Since Cloud computing is a quite new subject, most of the cloud providers have not yet tighten up their security and still use insecure or complicated login method. Static password thoroughly investigated {{and found out that}} it is not completing the cloud computing security requirement. Proposed solution is One Time Password and One Day Password, OTP will get expire after two minutes, if user again <b>login</b> will <b>request</b> and receive new password via email and ODP will get expire after 24 hours and on request receive new password via email for new login session. OTP/ODP used with AES encryption. This paper focuses the authentication and transmission encryption in cloud computing services...|$|R
25|$|Another cross-site {{vulnerability}} is cross-site request forgery (CSRF). In CSRF, code on an attacker's site tricks the victim's browser {{into taking}} actions the user didn't intend at a target site (like transferring {{money at a}} bank). It works because, if the target site relies only on cookies to authenticate requests, then requests initiated by code on the attacker's site will carry the same legitimate <b>login</b> credentials as <b>requests</b> initiated by the user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and {{not only in the}} cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.|$|R
5000|$|Passwords {{have been}} used with {{computers}} since {{the earliest days of}} computing. MIT's CTSS, one of the first time sharing systems, was introduced in 1961. It had a <b>LOGIN</b> command that <b>requested</b> a user password. [...] "After typing PASSWORD, the system turns off the printing mechanism, if possible, so that the user may type in his password with privacy." [...] In the early 1970s, Robert Morris developed a system of storing login passwords in a hashed form as part of the Unix operating system. The system was based on a simulated Hagelin rotor crypto machine, and first appeared in 6th Edition Unix in 1974. A later version of his algorithm, known as crypt(3), used a 12-bit salt and invoked a modified form of the DES algorithm 25 times {{to reduce the risk of}} pre-computed dictionary attacks.|$|R
3000|$|The replay {{attacks are}} {{impossible}} if the previous {{information is not}} reused again. In our proposed protocol, the login message and the authentication message are validated by checking timestamps. When an attacker eavesdrops the communication between U and Sn or between Sn and GW, he/she does not reusable again. We assume if an adversary intercepts a <b>login</b> <b>request</b> message {ID [...]...|$|E
40|$|In 2006, Das et al. [6] {{proposed}} a novel remote user authentication scheme using bilinear pairings. In that scheme, the remote system receives user <b>login</b> <b>request</b> and allows login to the legitimate user. In this paper we present the cryptanalysis of the Das et al. scheme and propose an improved and more secure scheme that enables user to choose and change their password {{without the help}} of the remote server...|$|E
40|$|In 1995, Wu {{proposed}} a remote login authentication {{scheme based on}} geometric approach. However, Chien, Jan and Tseng presented a cryptanalysis of Wu's scheme {{to show that it}} is not secure. Moreover, they {{proposed a}} modified version of Wu's scheme. This paper presents there is a serious weakness in this modified remote login authentication scheme. We show that an illegal user can easily forge a valid <b>login</b> <b>request</b> in the modified version proposed previously...|$|E
40|$|Reducing {{the energy}} {{consumption}} of PCs is becom-ing increasingly important with rising energy costs and environmental concerns. Sleep {{states such as}} S 3 (sus-pend to RAM) save energy but prevent the PC from re-sponding to network traffic, for example remote desktop <b>logins,</b> file transfer <b>requests,</b> or content distribution pro-tocols such as bittorrent. We conducted a background survey showing that having these applications running {{is the reason why}} many users leave PCs on even when idle. We present Somniloquy, an architecture that augments network interfaces to allow PCs in S 3 to be responsive to network traffic, transparently to remote applications and to the network itself. We show that many applications can be supported without application-specific code in the augmented network interface, including file sharing, re-mote desktop and VOIP. We show that a further class of applications can be supported with modest process-ing and memory resources in the network interface, in-cluding instant messaging presence and file sharing, for example downloading using bittorrent while the PC is asleep. Our prototype implementation of Somniloquy using a USB peripheral showed significant energy saving poten-tial in experiments, with 24 x less power draw for desk-tops and 11 x for laptops compared to an idle power-on state. ...|$|R
40|$|Abstract. In 1995, Wu {{proposed}} a remote login authentication {{scheme based on}} geometric ap-proach. However, Chien, Jan and Tseng presented a cryptanalysis of Wu’s scheme {{to show that it}} is not secure. Moreover, they {{proposed a}} modified version of Wu’s scheme. This paper presents there is a serious weakness in this modified remote login authentication scheme. We show that an illegal user can easily forge a valid <b>login</b> <b>request</b> in the modified version proposed previously. Key words: cryptography, remote login. 1...|$|E
40|$|Recently, J. -J. Shen, C. -W. Lin and M. -S. Hwang (Computers & Security, Vol 22, No 7, pp 591 - 595, 2003) {{proposed}} a modi ed Yang-Shieh scheme to enhance security. They claimed that their modi ed scheme can withstand the forged login attack and {{also provide a}} mutual authentication method to prevent the forged server attack. In this paper, we show that the Shen-Lin-Hwang scheme cannot resist the forged login attack either. The intruder is able to forge a valid forge request of a legitimate user U i and then successfully impersonate him by intercepting a <b>login</b> <b>request</b> sent by U i and registering a smart card...|$|E
40|$|A new remote {{password}} {{authentication scheme}} based on IC cards is proposed in this paper. By using the scheme, a remote password can be authenticated without either a password file or a verification table. A user first applies for an account in the financial organization and then uses the given IC card to login. In the login phase, a user inputs the identity and password, transmits the generated values to the center. In the authentication phase, the system uses the secret key and remotely submitted message to verify whether the request is legal or not. A one-time-used random number and a timestamp are supplied to protect the potential attacks, which may replay a previously intercepted <b>login</b> <b>request.</b> Further, by using the characteristics of IC cards, the proposed scheme is very suitable for authenticating passwords remotely...|$|E
40|$|For {{e-commerce}} companies providing online services, fraudulent access {{resulting from}} theft of identity credentials {{is a serious}} concern. Such online service providers deploy a variety of defenses and invest significant {{time and effort to}} the analysis of a large amount of log data to detect malicious activities and their impact. To reduce this burden, we explore the effectiveness of an anomaly detection based approach that relies on identity credential usage log records. More specifically, we use an anomaly-based metric to score the risk of each identity credential usage, e. g., a <b>login</b> <b>request.</b> Scores are determined based on categorical attribute values extracted from log records, such as timestamps. We utilize actual log data of login attempts to a university portal {{to evaluate the effectiveness of}} this approach. Our approach can work in conjunction with intrusion or fraud detection systems. It is also possible that stronger authentication can be required only when the risk score is high, which can help balance security and usability demands...|$|E
40|$|In this paper, {{we propose}} a secure and {{efficient}} user authentication scheme with countable and time-bound features. The countable feature is {{to limit the}} use to {{a certain number of}} times, which means that the users are able to successfully log into the system in a fixed number of times. The feature of the time-bound allows each login ticket to have a period of expiration. In other words, if a <b>login</b> <b>request</b> is overdue, it would not be available any-more. These features make our scheme more reliable for applications in the field of electronic commerce, such as on-line games, pay-TV, and so on. Since our scheme does not require any password or verification table and can avoid replay attacks, it is under firm security. Moreover, our scheme shows a lower computational overhead on the user side. Therefore, it offers an efficient and adequate alternative for the implementations in the mobile environment with limited computing capability. (C) 2009 Elsevier Inc. All rights reserved...|$|E
40|$|Dinas Kesehatan Kabupaten Pasuruan {{is a part}} of SKPD unit of Pasuruan district, one of {{the main}} task of this unit is to ensure a good health care service to the community. In order to ensure good health care service Dinas Kesehatan Kabupaten Pasuruan provide a {{licensing}} service for health workforce, this licensing service divided into two main license which is license for work and licence for practice. This licensing service is used by healtchare workforce such as doctor, midwife, nurse, pharmacist, therapists and nutritionists. To facilitate this licensing service Dinas Kesehatan Kabupaten Pasuruan created an information system. This information system have to be realiable and able to accelerate the process to get a practice license or work license for healthcare workforce. This information system must be accessible via desktop, web or a mobile device. Therefore in this research the information system is developed using back end and front end method. By using this method we produce a siginificant speed in application response time with 114 milli second response time for <b>login</b> <b>request</b> and 47 milli second for get request...|$|E
40|$|User {{authentication}} plays a {{very important}} role in building a secure computing system. In this thesis, we first studied and investigated existing user authentication schemes and some basic concepts of smart cards. We then proposed and implemented an improved user authentication scheme based on the smart card, specifically, Java card. We simulated a web server, and implemented the user authentication scheme with the Java card by programming a Java card applet and a Java program to send commands and receive responses from the card. The proposed user authentication scheme has two phases: the registration phase and the user authentication phase. In the registration phase, the server triggers the Java card to generate a secret value and store it. Then the Java card uses this secret value and hashes the username and password combination, which is stored in the web server 2 ̆ 7 s authentication database. The user 2 ̆ 7 s <b>login</b> <b>request</b> to the web server will start the user authentication phase, where the smart card will compute the hash, using the username and password entered, and return it to the web server for user verification. The implementation of the proposed user authentication scheme proved the correctness and effectiveness of the scheme. Compared with the previous user authentication schemes, our proposed authentication scheme is more secure because it implements a two-factor authentication. Even if the user 2 ̆ 7 s password is compromised, a user would still need the smart card to log into the system...|$|E
40|$|My {{assignment}} {{was to develop}} an Android application for Explizit (and the owner Argentum), an implementation of {{a part of their}} booking system Interbook, letting the user login and get a list of their facilities and bookings, and detailed information about the bookings, with the app logging in and getting data from a webservice. The app was developed in two stages, with the first stage being the user interface and controlling mechanisms behind it and the second being user login and getting data from the webservice. The first stage was not very hard to do and I got started very quickly. This part of the process took approximately three and a half week. Even though I still continued to work on it {{during the rest of the}} project, the focus was moved from graphical user interface to the second stage of the project. The second stage was very hard, at least in comparison to the first stage. Developing an Android client communicating with a webservice (running WCF) was something new both to me and to Explizit, so I soon realized that it could be a quite nail-biting, and I was right. Alas, I did not manage to finish the project in time, because of the many problems I had getting to grips with the protocol I was supposed to use (SOAP). Eventually I did manage to perform a successful <b>login</b> <b>request.</b> That was in the beginning of week 8, though, and I estimated that I would not have time enough to complete the app with a satisfactory level of quality. A second assignment in my work was to explore the possibilities for distributing and publishing this app. Providing the customers with the required webservices is not part of the deal. Hence, there is a number of different set of addresses to the different webservices that the app will connect to, which has to be set in some way. There is essentially two questions that has to be answered: ''Shall there be a general app or many municipality specific versions?'' and ''Public access or not?''. The first question means that the app should either be distributed as one general version that manages (contains or gets) all addresses or many municipality specific versions. The second question means that it is necessary to decide if there should be any control on who use is using the app or not, that is, if anyone can use it or just certain people. Validerat; 20110818 (anonymous...|$|E
