0|96|Public
5000|$|... #Caption: The Retişoara valley viaduct and {{terminus}} {{with the}} <b>loading</b> <b>bins</b> for the iron ore.|$|R
40|$|We {{estimate}} {{the size of}} a most <b>loaded</b> <b>bin</b> in the setting when the balls are placed into the bins using a random linear function in a finite field. The balls are chosen from a transformed interval. We show that in this setting the expected load of the most <b>loaded</b> <b>bins</b> is constant. This is an interesting fact because using fully random hash functions with the same class of input sets leads to an expectation of Θ(m/ m) balls in most <b>loaded</b> <b>bins</b> where m is the number of balls and bins. Although the family of the functions is quite common the size of largest bins was not known even in this simple case...|$|R
50|$|Instead of just {{selecting}} a random bin for each ball, {{it is possible}} to select two or more bins for each ball and then put the ball in the least <b>loaded</b> <b>bin.</b> This is a compromise between a deterministic allocation, in which all bins are checked and the least <b>loaded</b> <b>bin</b> is selected, and a totally random allocation, in which a single bin is selected without checking other bins.|$|R
50|$|Obviously, it is {{possible}} to make the load as small as m/n by putting each ball into the least <b>loaded</b> <b>bin.</b> The interesting case is when the bin is selected at random, or at least partially at random.|$|R
6000|$|... "I feel sure on it. I feel it here," [...] {{replied the}} woman, placing {{her hand on}} her breast. [...] "Sweet Miss Lizzie Gordon and me prayed {{together}} that the Lord would send 'em home if it was His will, an' ever since then the <b>load's</b> <b>bin</b> off my heart." ...|$|R
50|$|The Crystal Crawler is a LEGO Power Miners set {{made from}} {{the pieces of the}} Claw Digger and the Crystal Sweeper. It has 671 pieces. The Crystal Crawler has tread in the front and large spiky wheels at the back. It has seat and rollcage for two minifigures, a movable scoop in the front and an extendabile <b>loading</b> <b>bin</b> at the rear.|$|R
50|$|The other {{applications}} where the F class found a useful second life were at freezing works and coal mines. Here, the locomotives {{were used as}} shunters, {{and in the case}} of coal mines, to run trains of empty NZR wagons to the <b>loading</b> <b>bins</b> and <b>loaded</b> wagons back to the NZR connection. These lines were usually of a higher standard than the bush tramways, and so no track modifications were required to accommodate these useful engines.|$|R
50|$|Shell Grit dispatchingThe name {{is derived}} from the Laker family in the area, who {{established}} it as a shell grit plant and approximately 1000 tonnes of it was made each week. That shell grit used to then be transported to Australian Glass Siding in Spotswood, Victoria. Elevated <b>Loading</b> <b>Bins</b> and Platforms made of Concrete were provided. The shell grit dispatching was the Queenscliff Railway's main function. The Lakers decided to cease the business and decided to then create an engineering business at the site. So the Australian Glass Co then obtained shell grit from New South Wales.|$|R
40|$|We {{investigate}} randomized processes underlying {{load balancing}} {{based on the}} multiple-choice paradigm: m balls have {{to be placed in}} n bins, and each ball can be placed into one out of 2 randomly selected bins. The aim is to distribute the balls as evenly as possible among the bins. Previously, it was known that a simple process that places the balls one by one in the least <b>loaded</b> <b>bin</b> can achieve a maximum load of m/n +#(log log n) with high probability. Furthermore, it was known {{that it is possible to}} achieve (with high probability) a maximum load of at most + 1 using maximum flow computations...|$|R
40|$|Given a {{distributed}} system of n balls and n bins, how evenly can we distribute the balls to the bins, minimizing communication? The fastest non-adaptive and symmetric algorithm achieving a constant maximum <b>bin</b> <b>load</b> requires Θ(loglogn) rounds, and any such algorithm running for r∈O(1) rounds incurs a <b>bin</b> <b>load</b> of Ω((logn/loglogn) 1 /r). In this work, we explore the fundamental {{limits of the}} general problem. We present a simple adaptive symmetric algorithm that achieves a <b>bin</b> <b>load</b> of 2 in log∗n+O(1) communication rounds using O(n) messages in total. Our main result, however, is a matching lower bound of (1 −o(1)) log∗n on the time complexity of symmetric algorithms that guarantee small <b>bin</b> <b>loads.</b> The essential preconditions of the proof are (i) a limit of O(n) on {{the total number of}} messages sent by the algorithm and (ii) anonymity of bins, i. e., the port numberings of balls need not be globally consistent. In order to show that our technique yields indeed tight bounds, we provide for each assumption an algorithm violating it, in turn achieving a constant maximum <b>bin</b> <b>load</b> in constant time. German Research Foundation (DFG, reference number Le 3107 / 1 - 1) Society of Swiss Friends of the Weizmann Institute of ScienceSwiss National Fun...|$|R
40|$|We {{explore the}} {{fundamental}} limits of distributed balls-into-bins algorithms, i. e., algorithms where balls act in parallel, as separate agents. This problem {{was introduced by}} Adler et al., who showed that non-adaptive and symmetric algorithms cannot reliably perform better than a maximum <b>bin</b> <b>load</b> of Θ(log log n / log log log n) within {{the same number of}} rounds. We present an adaptive symmetric algorithm that achieves a <b>bin</b> <b>load</b> of two in log ∗ n+O(1) communication rounds using O(n) messages in total. Moreover, larger <b>bin</b> <b>loads</b> can be traded in for smaller time complexities. We prove a matching lower bound of (1 − o(1)) log ∗ n on the time complexity of symmetric algorithms that guarantee small <b>bin</b> <b>loads</b> at an asymptotically optimal message complexity of O(n). The essential preconditions of the proof are (i) a limit of O(n) on the total number of messages sent by the algorithm and (ii) anonymity of bins, i. e., the port numberings of balls are not globally consistent. In order to show that our technique yields indeed tight bounds, we provide for each assumption an algorithm violating it, in turn achieving a constant maximum <b>bin</b> <b>load</b> in constant time. As an application, we consider the following problem. Given a fully connected graph o...|$|R
40|$|Abstract Given a {{distributed}} system of n balls and n bins, how evenly can we distribute the balls to the bins, minimizing communication? The fastest non-adaptive and symmetric algorithm achieving a constant max-imum <b>bin</b> <b>load</b> requires Θ(log log n) rounds, and any such algorithm running for r ∈ O(1) rounds incurs a <b>bin</b> <b>load</b> of Ω((log n / log log n) 1 /r). In this work, we ex-plore the fundamental {{limits of the}} general problem. We present a simple adaptive symmetric algorithm that achieves a <b>bin</b> <b>load</b> of 2 in log ∗ n + O(1) com-munication rounds using O(n) messages in total. Our main result, however, is a matching lower bound of (1 − o(1)) log ∗ n on the time complexity of symmetric algorithms that guarantee small <b>bin</b> <b>loads.</b> The essen-tial preconditions of the proof are (i) a limit of O(n) on {{the total number of}} messages sent by the algorithm and (ii) anonymity of bins, i. e., the port numberings of balls need not be globally consistent. In order to show that our technique yields indeed tight bounds, we pro-vide for each assumption an algorithm violating it, in turn achieving a constant maximum <b>bin</b> <b>load</b> in con-stant time. An extended abstract of preliminary work appeared at STOC 2011 [24] and the corresponding article has been published on arxiv [23]...|$|R
40|$|Photograph of <b>loading</b> <b>bins</b> of the Columbia Steel Corporation in Iron Springs, Utah, December 11, 1924. A car sits on dirt land to {{the right}} of center while a man leans against the driver door to the car with his right foot resting on the car and both hands on his hips. To the left, a pile of wooden planks can be seen in front of piles of rock. An {{elevated}} station sits above the piles on the left while {{what seems to be a}} railroad track runs through the building and to the right where freight cars sit on the trak. The station is supported by wooden beams cemented to the ground. What looks like a covered rectangular hallway extends out of the building and done to the ground on the right where it seems to go below the surface...|$|R
40|$|We {{explore the}} {{fundamental}} limits of distributed balls-into-bins algorithms. We present an adaptive symmetric algorithm that achieves a <b>bin</b> <b>load</b> of two in log* n+O(1) communication rounds using O(n) messages in total. Larger <b>bin</b> <b>loads</b> can be traded in for smaller time complexities. We prove a matching lower bound of (1 -o(1)) log* n {{on the time}} complexity of symmetric algorithms that guarantee small <b>bin</b> <b>loads</b> at an asymptotically optimal message complexity of O(n). For each assumption of the lower bound, we provide an algorithm violating it, in turn achieving a constant maximum <b>bin</b> <b>load</b> in constant time. As an application, we consider the following problem. Given a fully connected graph of n nodes, where each node needs to send and receive up to n messages, and in each round each node may send one message over each link, deliver all messages {{as quickly as possible}} to their destinations. We give a simple and robust algorithm of time complexity O(log* n) for this task and provide a generalization to the case where all nodes initially hold arbitrary sets of messages. A less practical algorithm terminates within asymptotically optimal O(1) rounds. All these bounds hold with high probability. Comment: 39 pages, 2 figures. Extended abstract will be published at STOC' 1...|$|R
5000|$|The work {{consisted}} of {{a new set of}} sidings and dump hoppers between the coal preparation plant and the PTC main line to allow the emptying of non-air wagons of washed coal, these sidings were known as [...] "Coal & Allied Siding". Unwashed coal ran via the existing exchange sidings. The new loading point was constructed at the Newcastle end of the preparation plant and was served by a balloon loop and a 1200T <b>loading</b> <b>bin.</b> The rails for both balloon loop and Coal & Allied Siding came from the section of the RVR beyond Stockrington. The balloon loop was brought into use in June 1973, Coal & Allied siding was also ready for use in June 1973 but due to industrial problems it was not used until 17 August 1973. The last non-air train from Hexham to Port Waratah ran on 15 August 1973.|$|R
40|$|The idea {{of using}} {{multiple}} choices to improve allocation schemes is now well understood and is often illustrated by the following example. Suppose n balls are allocated to n bins with each ball choosing a bin independently and uniformly at random. The load, {{or the number of}} balls in the most <b>loaded</b> <b>bin,</b> will then be approximately n n with high probability. Suppose now the balls are allocated sequentially by placing a ball in the least <b>loaded</b> <b>bin</b> among the k≥ 2 bins chosen independently and uniformly at random. Azar, Broder, Karlin, and Upfal showed that in this scenario, the maximum load drops to n k +Θ(1), with high probability, which is an exponential improvement over the previous case. In this thesis we investigate multiple choice allocations from a slightly different perspective. Instead of minimizing the maximum load, we fix the bin capacities and focus on maximizing the number of balls that can be allocated without overloading any bin. In the process that we consider we have m= cn balls and n bins. Each ball chooses k bins independently and uniformly at random. Is it possible to assign each ball to one of its choices such that the no bin receives more than ℓ balls? For all k≥ 3 and ℓ≥ 2 we give a critical value, c_k,ℓ^*, such that when cc_k,ℓ^* this is not the case. In case such an allocation exists, how quickly can we find it? Previous work on total allocation time for case k≥ 3 and ℓ= 1 has analyzed a breadth first strategy which is shown to be linear only in expectation. We give a simple and efficient algorithm which we also call local search allocation(LSA) to find an allocation for all k≥ 3 and ℓ= 1. Provided the number of balls are below (but arbitrarily close to) the theoretical achievable load threshold, we give a linear bound for the total allocation time that holds with high probability. We demonstrate, through simulations, an order of magnitude improvement for total and maximum allocation times when compared to {{the state of the art}} method. Our results find applications in many areas including hashing, load balancing, data management, orientability of random hypergraphs and maximum matchings in a special class of bipartite graphs...|$|R
30|$|The {{time of the}} {{translation}} by the gravity of <b>load</b> inside a <b>bin</b> is usually deterministic. Thus, the sliding time can be added after the calculation of the expected retrieval time.|$|R
40|$|ABSTRACT: Many dynamic {{resource}} allocation and on-line load balancing problems can be modeled by processes that sequentially allocate balls into bins. The balls arrive {{one by one and}} are to be placed into bins on-line without using a centralized controller. If n balls are sequentially placed into n bins by placing each ball in a randomly chosen bin, then it is widely known that the maximum <b>load</b> in <b>bins</b> is ln n / ln ln n ·� 1 + o� 1 � � with high probability. Azar, Broder, Karlin, and Upfal extended this scheme, so that each ball is placed sequentially into the least full of d randomly chosen bins. They showed that the maximum <b>load</b> of the <b>bins</b> reduces exponentially and is ln ln n / ln d + �� 1 � with high probability, provided d ≥ 2. In this paper we investigate various extensions of these schemes that arise in applications in dynamic {{resource allocation}} and on-line load balancing. Traditionally, the main aim of allocation processes is to place balls into bins to minimize the maximum <b>load</b> in <b>bins.</b> However, in many applications it is equally important to minimize the number of choices performed (the allocation time). We study adaptive allocation schemes that achieve optimal tradeoffs between the maximum load, the maximum allocation time, and the average allocation time. We also investigate allocation processes that may reallocate the balls. We provide a tigh...|$|R
40|$|In the {{standard}} balls-and-bins model of balanced allocations, m balls are placed sequentially into n bins. Each ball chooses d uniform-random bins and {{is placed in}} the least <b>loaded</b> <b>bin.</b> It is well known that when d = log Θ(1) n, after placing m = n balls, the maximum load (number of balls in a bin) is Θ(1) w. h. p. In this paper we show that as long as d = Ω(log n), independent random choices are not necessary to achieve a constant load balance: these choices may be structured in a very general way. Specifically, we allow each ball i to have an associated random set of bins Bi. We require that |Bi | = Ω(log n) and that bins are included in Bi with approximately the same probability; but the distributions of the Bis are otherwise arbitrary, so that there may be correlations in the choice of bins. We show that this model captures structure important to two applications, nearby server selection and load balance in distributed hash tables. ...|$|R
40|$|Suppose that we {{sequentially}} put n balls into n bins. If we put each {{ball into}} a random bin then the heaviest bin will contain log n/log log n balls (w. h. p.). However, Azar, Broder, Karlin and Upfal [1] showed that if for each ball we choose two bins at random {{and put it}} in the least <b>loaded</b> <b>bin</b> among the two then the heaviest bin will contain only log log n balls (w. h. p). How much memory do we need to implement this scheme? We need roughly log log log n bits per bin, and n log log log n bits in total. Let us assume now that we have limited amount of memory. For each ball, we are given two random bins and we have to put the ball into one of them. Our goal is to minimize the load of the heaviest bin. We prove that if we have n 1 −δ bits then the heaviest bin will contain at least Ω(δ log n/log log n) balls. The bound is tight in the communication complexity model...|$|R
40|$|As a brief {{announcement}} [12], we {{proposed the}} following balls-into-bins strategy allocating n balls into n bins, denoted by (k, d) -choice process. The placement process consists of n/k rounds, {{each of which}} k < d balls are placed into k least <b>loaded</b> <b>bins</b> out of d bins chosen independently and uniformly at random. In this paper, we present complete analysis for our preliminary results and provide tight {{upper and lower bounds}} for the maximum load that hold with high probability for any 1 ≤ k < d ≤ n. The entire spectrum of allocation schemes that lie between the boundaries of the single and multiple-choice algorithms is captured in this simple process. Our new results indicate that we can choose suitable parameters k and d to achieve the optimal tradeoff between the maximum <b>bin</b> <b>load</b> and message cost. For some k and d, the (k, d) -choice process produces maximum load of O(1) whp at the expense of (1 +) n messages for 0 < < 1 constant. This shows that our allocation scheme outperforms any known non-adaptive balls-into-bins process; any other algorithms achieving constant maximum load require higher message cost than what we have. For example, the standard multiple choice scheme requires O(n log n) messages in order to achieve a constant maximum load. Furthermore, we present some applications in which (k, d) -choice is more efficient than the standard multiple-choice algorithm; i. e. the cost of item insertion and search is as low as (1 + o(1)) time on average. 0 a...|$|R
40|$|Suppose we {{sequentially}} put n balls into n bins. If we put each {{ball into}} a random bin then the heaviest bin will contain ∼ log n / log log n balls with high probability. However, Azar, Broder, Karlin and Upfal [2] showed that if {{each time we}} choose two bins at random and put {{the ball in the}} least <b>loaded</b> <b>bin</b> among the two then the heaviest bin will contain only ∼ log log n balls with high probability. How much memory do we need to implement this scheme? We need roughly log log log n bits per bin, and n log log log n bits in total. Let us assume now that we have limited amount of memory. For each ball, we are given two random bins and we have to put the ball into one of them. Our goal is to minimize the load of the heaviest bin. We prove that if we have n 1 −δ bits then the heaviest bin will contain at least Ω(δ log n / log log n) balls with high probability. The bound is tight in the communication complexity model...|$|R
5000|$|Despite its {{elevation}} of 260 metres being considerably {{lower than that}} of Denniston (600 metres), the steep grade between the coastline and Millerton still meant that the coal was difficult to get down from the hilltop to the coastal railway near sea level. The Westport Coal Company built the Millerton Incline in 1891 and the Millerton Mine began production in 1896. Mining at Millerton ended in the late 1960s, as it largely did at Denniston. The Millerton Incline was a narrow gauge (...) incline consisting of two parallel sets of tracks on which the coal tubs ran, being hauled by rope. Remnants of tracks, trucks, bath house and other installations are still visible.The Millerton Incline was a significant engineering achievement for its time, and the remains of this incline and its infrastructure are more accessible than those of the more famous Denniston Incline. The Millerton Incline was used to convey tubs of coal from the mines around the Millerton area to the bins at Granity, which were once the largest coal <b>loading</b> <b>bins</b> of wooden construction in New Zealand. The bins no longer exist, but the incline remains and can still be seen today.|$|R
40|$|Abstract- We {{consider}} the following canonical load balancing problem: Drop n balls into n bins so as to minimize the maximum loading. An execution of the well-known “load the least <b>loaded</b> <b>bin</b> ” algorithm results in an optimal loading of one ball per bin. Azar et. al. (1994) consider an algorithm which assigns each ball to the least loaded of d randomly chosen bins and show that the maximum load is + O(1) for d> 2, as compared to &(1 + o(1)) for d = 1. A dynamic version of the load balancing problem involves jobs arriving as a rate nX Poisson process at n rate 1 exponential server queues is considered in Mitzenmacher (1996) and in Vvedenskaya et. al. (1996). They find similar exponential improvements in performance for d 2 2 as compared with d = 1. In this paper, we consider a variation of randomized load balancing schemes which involve the use of memory. This is motivated by the observation that the loads do not change by much between iterations; hence remembering “good samples ” from one iteration for use in future iterations ought to pay off significantly. We find this is indeed true, and quantify the improvement. I...|$|R
40|$|Suppose m {{balls are}} {{sequentially}} thrown into n bins where each ball {{goes into a}} random bin. It is well-known that {{the gap between the}} load of the most <b>loaded</b> <b>bin</b> m log n and the average is Θ(n), for large m. If each ball goes to the lesser loaded of two random bins, this gap dramatically reduces to Θ(log log n) independent of m. Consider now the following “(1 + β) -choice ” process for some parameter β ∈ (0, 1) : each ball goes to a random bin with probability (1 −β) and the lesser loaded of two random bins with probability β. How does the gap for such a process behave? Suppose that the weight of each ball was drawn from a geometric distribution. How is the gap (now defined in terms of weight) affected? In this work, we develop general techniques for analyzing such balls-into-bins processes. Specifically, we show that for the (1 + β) -choice process above, the gap is Θ(log n/β), irrespective of m. Moreover the gap stays at Θ(log n/β) in the weighted case for a large class of weight distributions. No non-trivial explicit bounds were previously known in the weighted case, even for the 2 -choice paradigm. ...|$|R
5000|$|From 1900 until 1989, Makareao was the {{terminus}} {{of a short}} {{branch line}} railway. On 29 August 1885, a branch had been opened to Dunback from a junction with the Main South Line in Palmerston, but to provide better access to the lime deposits, a sub-branch was built from Inch Valley to Makareao. Together, the two lines were known as the Dunback and Makareao Branches and the Makareao portion served solely the limeworks; it did not carry passengers or general freight. It was just under 4 km long and opened on 31 March 1900. [...] The terminus in Makareao was a modest affair, with just <b>loading</b> <b>bins</b> for the lime and a loop to hold 26 wagons. [...] On 1 January 1968, the Dunback portion of the branch closed and the 11 km section between Palmerston and Inch Valley operated solely to carry Makareao lime. The demise of the line was sudden. Trains ran thrice weekly to carry the lime to a Dunedin-based cement factory, and when this factory closed in 1988, {{the reason for the}} line's existence disappeared. The line was formally closed on 1 June 1989, but railway remnants remain at the Makareao terminus and the line's disused formation can still be seen between Makareao and Inch Valley.|$|R
40|$|The {{power of}} two choices {{is a classic}} {{paradigm}} for load balancing when assigning m balls to n bins. When placing a ball, we pick two bins according to two hash functions h_ 0 and h_ 1, and place {{the ball in the}} least <b>loaded</b> <b>bin.</b> Assuming fully random hash functions, when m=O(n), Azar et al. [STOC' 94] proved that the maximum load is n + O(1) with high probability. In this paper, we investigate the power of two choices when the hash functions h_ 0 and h_ 1 are implemented with simple tabulation, which is a very efficient hash function evaluated in constant time. Following their analysis of Cuckoo hashing [J. ACM' 12], Pǎtraşcu and Thorup claimed that the expected maximum load with simple tabulation is O(n). This did not include any high probability guarantee, so the load balancing was not yet to be trusted. Here, we show that with simple tabulation, the maximum load is O(n) with high probability, giving the first constant time hash function with this guarantee. We also give a concrete example where, unlike with fully random hashing, the maximum load is not bounded by n + O(1), or even (1 +o(1)) n with high probability. Finally, we show that the expected maximum load is n + O(1), just like with fully random hashing. Comment: SODA' 1...|$|R
40|$|We {{investigate}} balls-and-bins processes where m weighted {{balls are}} placed into n bins using the “power of two choices ” paradigm, whereby a ball is {{inserted into the}} less loaded of two randomly chosen bins. The case where each of the m balls has unit weight had been studied extensively. In a seminal paper Azar et al. [2] showed that when m = n the most <b>loaded</b> <b>bin</b> has Θ(log log n) balls with high probability. Surprisingly, the gap in load between the heaviest bin and the average bin does not increase with m and was shown by Berenbrink et al. [4] to be Θ(log log n) with high probability for arbitrarily large m. We generalize this result to the weighted case where balls have weights drawn from an arbitrary weight distribution. We show {{that as long as}} the weight distribution has finite second moment and satisfies a mild technical condition, the gap between the weight of the heaviest bin and the weight of the average bin is independent of the number balls thrown. This is especially striking when considering heavy tailed distributions such as Power-Law and Log-Normal distributions. In these cases, as more balls are thrown, heavier and heavier weights are encountered. Nevertheless with high probability, the imbalance in the load distribution does not increase. Furthermore, if the fourth moment of the weight distribution is finite, the expected value of the gap is shown to be independent of the number of balls. 1...|$|R
40|$|The bin packing {{problem is}} a {{combinatorial}} NP-hard problem. In it, objects of different volumes must be packed into {{a finite number of}} bins of capacity V in a way that minimizes the number of bins used. Most of the previous approaches have dealt with one-dimensional cases, only a few with two-dimensional problems and it is very rare to find work on three-dimensional bin packing. In this paper a elitism based compact genetic algorithm is presented to solve three-dimensional container <b>loading</b> or <b>bin</b> packing problems. The three dimensional bin packing problem is the problem of orthogonally packing of set of boxes into a minimum of three dimensional bin. This algorithm uses a probability vector to represent the bit probability of 0 and 1 and model the distribution of generation...|$|R
5000|$|The balls-into-bins {{problem is}} a classic problem in {{probability}} theory that has many applications in computer science. The problem involves m balls and n boxes (or [...] "bins"). Each time, a single ball is placed {{into one of the}} bins. After all balls are in the bins, we {{look at the number of}} balls in each bin; we call this number the <b>load</b> on the <b>bin</b> and ask: what is the maximum load on a single bin? ...|$|R
40|$|In this work, {{we examine}} a generic class of simple {{distributed}} balls-into-bins algorithms. Exploiting the strong concentra-tion bounds {{that apply to}} balls-into-bins games, we provide an iterative method to compute accurate estimates of the re-maining balls and the load distribution after each round. Each algorithm is classified by (i) the <b>load</b> that <b>bins</b> accept in a given round, (ii) the number of messages each ball sends in a given round, and (iii) whether each such message is given a rank expressing the sender’s inclination to commit to the re-ceiving bin (if feasible). This novel ranking mechanism results in notable improvements, in particular {{in the number of}} balls that may commit to a bin {{in the first round of}} the algorithm. Simulations independently verify the correctness of the results and confirm that our approximation is highly accurate eve...|$|R
40|$|Within such {{disciplines}} as Management Science, Information and Computer Science, Engineering, Mathematics and Operations Research, {{problems of}} cutting and packing (C&amp;P) {{of concrete and}} abstract objects appear under various specifications (cutting problems, knapsack problems, container and vehicle loading problems, pallet <b>loading,</b> <b>bin</b> packing, assembly line balancing, capital budgeting, changing coins, etc.), although they all have essentially the same logical structure. In cutting problems, a large object must be divided into smaller pieces; in packing problems, small items must be combined to large objects. Most of these problems are NP-hard. Since the pioneer work of L. V. Kantorovich in 1939, which {{first appeared in the}} West in 1960, there has been a steadily growing number of contributions in this research area. In 1961, P. Gilmore and R. Gomory presented a linear programming relaxation of the one-dimensional cutting stock problem. The best-performing algorithms today are based on their relaxation. It was, however, more than three decades before the first `optimum? algorithms appeared in the literature and they even proved to perform better than heuristics. They were of two main kinds: enumerative algorithms working by separation of the feasible set and cutting plane algorithms which cut off infeasible solutions. For many other combinatorial problems, these two approaches have been successfully combined. In this thesis we do it for one-dimensional stock cutting and two-dimensional two-stage constrained cutting. For the two-dimensional problem, the combined scheme provides mostly better solutions than other methods, especially on large-scale instances, in little time. For the one-dimensional problem, the integration of cuts into the enumerative scheme improves the results of the latter only in exceptional cases. While the main optimization goal is to minimize material input or trim loss (waste), in a real-life cutting process there are some further criteria, e. g., the number of different cutting patterns (setups) and open stacks. Some new methods and models are proposed. Then, an approach combining both objectives will be presented, to our knowledge, for the first time. We believe this approach will be highly relevant for industry...|$|R
2500|$|In 1967, Yorkville {{expanded}} distribution westward to Vancouver and southward {{into the}} United States via Buffalo, New York. In 1969, Yorkville began designing larger concert equipment including eight-, sixteen- and 24-channel mixers {{with a pair}} of integral graphic equalizers, an audio snake and heavy folded-horn [...] "W"-style bass <b>bins</b> <b>loaded</b> with 18-inch drivers. The sound contracting business also designed and used wedge-shaped monitor speakers on stage for artists to hear themselves. Concurrently, Yorkville incorporated their Buffalo operation to create a US-based business entity: Yorkville Sound Inc.|$|R
50|$|Another {{difficulty}} {{to overcome}} was {{the means for}} <b>loading</b> a digital <b>bin.</b> A <b>bin</b> could be <b>loaded</b> manually by recording directly into the bin's buffer, {{or it could be}} loaded by a high speed data device. At the time digital bins were first put into production, an S-VHS based storage device manufactured by Honeywell called a VLDS (Very Large Data Store) was used. A single S-VHS tape was capable of storing over 5 GB of data. These extremely expensive storage devices were eventually replaced by CD loading.|$|R
5000|$|In 1967, Yorkville {{expanded}} distribution westward to Vancouver and southward {{into the}} United States via Buffalo, New York. In 1969, Yorkville began designing larger concert equipment including eight-, sixteen- and 24-channel mixers {{with a pair}} of integral graphic equalizers, an audio snake and heavy folded-horn [...] "W"-style bass <b>bins</b> <b>loaded</b> with 18-inch drivers. The sound contracting business also designed and used wedge-shaped monitor speakers on stage for artists to hear themselves. Concurrently, Yorkville incorporated their Buffalo operation to create a US-based business entity: Yorkville Sound Inc.|$|R
40|$|We {{consider}} the unbalanced allocation of $m$ balls into $n$ bins by a randomized algorithm using the "power of two choices". For each ball, we select {{a set of}} bins at random, then place {{the ball in the}} fullest bin within the set. Applications of this generic algorithm range from cost minimization to condensed matter physics. In this paper, we analyze the distribution of the <b>bin</b> <b>loads</b> produced by this algorithm, considering, for example, largest and smallest loads, loads of subsets of the bins, and the likelihood of <b>bins</b> having equal <b>loads...</b>|$|R
