3|30|Public
5000|$|Circuit Implementation does transistor-level {{designs of}} basic {{elements}} (gates, multiplexers, latches etc.) {{as well as}} of some larger blocks (ALUs, caches etc.) that may be implemented at the <b>log</b> <b>gate</b> level, or even at the physical level if the design calls for it.|$|E
50|$|The Tioga Pass Entrance Station is {{the primary}} {{entrance}} for travelers entering Yosemite National Park from the east on the Tioga Pass Road. Open only during the summer months, the entrance station consists of two historical buildings, a ranger station and a comfort station, built in 1931 and 1934 respectively. Both are rustic stone structures with peeled log roof structures, and are examples of the National Park Service rustic style employed at the time by the National Park Service. Two <b>log</b> <b>gate</b> structures that had been removed since the site's original construction were rebuilt in 1999; the stone piers that supported them remain. The use of stone at Tioga Pass set a precedent for the extensive employment of stone construction in other park buildings in the Yosemite high country. Civilian Conservation Corps workers assisted in the entrance station's construction.|$|E
40|$|Abstract. Combined with a {{multi-level}} intake structure, {{using the}} standard k ε − two-equation turbulence model {{to carry on}} the three-dimensional numerical simulation for the hydraulic characteristics of this intake. The flow velocity, fluid flow distribution and head loss were analyzed and summarized. The vertical velocity distribution near the intake has been significantly changed after placed stop <b>log</b> <b>gate,</b> the flow velocity of the reservoir surface water near the intake increases significantly, more surface water enter the power plant unit, and the head loss increases greatly...|$|E
5000|$|A {{petition}} to allow oil drilling and <b>logging</b> of Golden <b>Gate</b> Park in San Francisco ...|$|R
40|$|We {{prove that}} the {{reliable}} computation of any Boolean function with sensitivity s <b>log</b> s) <b>gates</b> if the gates fail independently with a xed positive probability. This theorem was stated by Dobrushin and Ortyukov in 1977, but their proof was found by Pippenger, Stamoulis and Tsitsiklis to contain some errors...|$|R
50|$|Access to {{the lake}} is up past hornelake caves left over bridge on the left follow up to <b>logging</b> access <b>gate.</b> 4 {{kilometers}} up there is a fork stay to the right esary lake will {{be seen on the}} right. 4x4 required to get to lake or a short hike from the logging road to the water.|$|R
60|$|I {{know not}} how many had been cooped {{up in the}} little fort since the early spring, {{awaiting}} {{the chance to go}} back to their weed-choked clearings. The fort at Harrodstown was like an hundred others I have since seen, but sufficiently surprising to me then. Imagine a great parallelogram made of log cabins set end to end, their common outside wall being the wall of the fort, and loopholed. At the four corners of the parallelogram the cabins jutted out, with ports in the angle in order to give a flanking fire in case the savages reached the palisade. And then there were huge <b>log</b> <b>gates</b> with watch-towers on either sides where sentries sat day and night scanning the forest line. Within the fort was a big common dotted with forest trees, where such cattle as had been saved browsed on the scanty grass. There had been but the one scrawny horse before our arrival.|$|R
40|$|Abstract [...] We {{prove that}} the {{reliable}} computation of any Boolean function with sensitivity s requires Ω (s <b>log</b> s) <b>gates</b> if the gates fail independently with a fixed positive probability. This theorem was stated by Dobrushin and Ortyukov in 1977, but their proof was found by Pippenger, Stamoulis and Tsitsiklis to contain some errors. Index Terms [...] Reliable computation, noisy gates, Boolean functions...|$|R
40|$|In {{this paper}} we {{investigate}} {{the complexity of}} superscalar decode/issue logic assuming primitive gates. We show, assuming that the issuing is performed {{on the base of}} opcodes, that the complexity of checking data dependencies is in the order of k 3 <b>gates</b> and <b>log</b> k <b>gate</b> delay, k being the issue width, when assuming infinite resources and in-order issuing. In assuming out-of-order issuing the complexities are in the order of 2 k <b>gates</b> and <b>log</b> k <b>gate</b> delay, and for out-of-order issuing with renaming in the order of 2 k gates and k gate delay. When the resources are restricted we show that the complexity is in the order of n k gates and k 2 log n delay, n being the cardinality of the instruction set. Finally, by assuming that the issuing is performed using grouping of instructions rather than opcode specific description the complexity is in the order of m k gates and k 2 log m delay, where m is the number of instruction groups. 1. Introduction It is widely accepted that in [...] ...|$|R
50|$|This lake can be {{accessed}} by Horne Lake road follow up past Horne Lake Caves across a bridge {{that is on the}} left. Follow for about a kilometer you should come to a <b>logging</b> access <b>gate</b> it should be open. After the gate it is another six kilometers to the gate for Lacy Lake. stay on main logging road there is a fork that you need to stay to the left then another fork you need to stay to the right. This is a lovely lake if you just want to go to explore. No fishing or swimming in this lake permitted.|$|R
60|$|In {{absolute}} silence old Benson led {{his little}} party {{to a far}} corner of the stockade, where there was a small gate, fastened with a strong <b>log</b> bar. This <b>gate</b> was opened just far enough for them to slip through, and then closed again. Their mission had begun. There was no telling how it would end.|$|R
5000|$|During a {{question}} and answer presentation on 21 September 2013, Gates said [...] "it was a mistake", referring to {{the decision to use}} Ctrl+Alt+Del as the keyboard combination to <b>log</b> into Windows. <b>Gates</b> stated he would have preferred a single button to trigger the same actions, but could not get IBM to add the extra button into the keyboard layout.|$|R
40|$|We {{show that}} neural {{networks}} with three-times continuously di erentiable activation functions {{are capable of}} computing a certain family of n-bit Boolean functions with two gates, whereas networks composed of binary threshold functions require at least (<b>log</b> n) <b>gates.</b> Thus, for a large class of activation functions, analog neural networks can be more powerful than discrete neural networks, even when computing Boolean functions. 1 Introduction. Arti cial neural networks have become a popular model for machine learning and many results have been obtained regarding their application to practical problems. Typically, the network is trained to encode complex associations between inputs and outputs during supervised training cycles, where the associations are encoded by the weights of the network. Once trained, the network will comput...|$|R
50|$|Slabsides is a one-story {{log cabin}} {{with an open}} floor plan with a {{partitioned}} bedroom. It {{is located in a}} relatively low stretch of the Marlboro Mountains, perched {{on the west side of}} a hill in the wooded John Burroughs Nature Sanctuary. There is no direct access by motor vehicle; to reach it, visitors must park on the gravel road up the hill and follow a <b>gated</b> <b>logging</b> road slightly downhill, then level, roughly 0.3 mile (500 m) to the cabin.|$|R
40|$|It {{is known}} that, for every {{constant}} $kgeq 3 $, {{the presence of}} a $k$-clique (a complete subgraph on $k$ vertices) in an $n$-vertex graph cannot be detected by a monotone boolean circuit using fewer than $Omega((n/log n) ^k) $ gates. We show that, for every constant $k$, {{the presence of a}}n $(n-k) $-clique in an $n$-vertex graph can be detected by a monotone circuit using only $O(n^ 2 <b>log</b> n) $ <b>gates.</b> Moreover, if we allow unbounded fanin, then $O(log n) $ gates are enough...|$|R
40|$|Suppose that {{a quantum}} circuit with K {{elementary}} gates {{is known for}} a unitary matrix U, and assume that U^m is a scalar matrix for some positive integer m. We show that a function of U can be realized on a quantum computer with at most O(mK+m^ 2 <b>log</b> m) elementary <b>gates.</b> The functions of U are realized by a generic quantum circuit, which has a particularly simple structure. Among other results, we obtain efficient circuits for the fractional Fourier transform. Comment: 4 pages, 2 figure...|$|R
40|$|We {{prove that}} the {{reliable}} computation of any Boolean function with sensitivity s requires ΩΓ s <b>log</b> s) <b>gates</b> if {{the gates of the}} circuit fail independently with a fixed positive probability. This theorem was stated by Dobrushin and Ortyukov in 1977, but their proof was found by Pippenger, Stamoulis and Tsitsiklis to contain some errors. We save the original structure of the proof of Dobrushin and Ortyukov, correcting two points in the probabilistic argument. 1 Introduction In this paper, we prove lower bounds on the number of gates needed to compute Boolean functions by circuits with noisy gates. We say that a gate fails if its output is incorrect. Let us fix a bound " 2 (0; 1 = 2) on the failure probability of the gates and a bound p 2 (0; 1 = 2) on the probability that the value computed by the circuit is incorrect. These parameters which will be held constant Supported in part by NSF Grant CCR- 9002614. y This research was partially supported by NSF Grant CCR 8710078 an [...] ...|$|R
40|$|Alon and Boppana {{showed that}} if a {{monotone}} Boolean function f of n variables can be computed by a monotone circuit containing k AND gates, where k > 1, then {{it can also be}} computed using a monotone circuit containing k AND gates and O(k(n+k)) OR gates. They note that their result is tight up to a logarithmic factor. Here we show that under the same assumption the function f can be computed using a monotone circuit containing k AND gates and O(k(n + k) = <b>log</b> k) OR <b>gates.</b> This result is tight up to a constant factor. By duality the same result holds when the roles of the AND and OR gates are interchanged...|$|R
40|$|Abstract. Given {{a stream}} of n numbers and a number B, the subset sum problem deals with {{checking}} whether there exists {{a subset of the}} stream that adds to exactly B. The unary subset sum problem, USS, is the same problem when the input is encoded in unary. We prove that any p-pass randomized algorithm computing USS with error at most 1 / 3 must use space Ω (B p). For p ≤ B, we give a randomized p-pass algorithm that computes USS with error at most 1 / 3 using space We give a deterministic one-pass algorithm which given an input stream and two parameters B, ɛ, decides whether there exist a subset of the input stream that adds to a value in the range [(1 − ɛ) B, (1 + ɛ) B] using Õ(nB p). space O () log B. We observe that USS is monotone (under a suitable ɛ encoding) and give a monotone NC 2 circuit for USS. We also show that any circuit using ε-approximator gates for USS under this encoding needs Ω(n / <b>log</b> n) <b>gates</b> to compute the Disjointness function. ...|$|R
40|$|We {{study the}} {{complexity}} of computing Boolean functions using AND, OR and NOT gates. We show that a circuit of depth d with S gates {{can be made to}} output a constant by setting O(S 1 (d)) (where ffl(d) = 4) of its input values. This implies a superlinear size lower bound for a large class of functions. Using this, we obtain a function computable by a uniform family of constant depth polynomial size circuits that cannot be computed by constant depth circuits of linear size. We give circuit constructions that show that the bound O(S 1 (d)) is near optimal. We also study {{the complexity of}} computing threshold functions. The function T n r has the value 1 iff at least r of its inputs have the value 1. We show that a circuit computing T n r has at least ΩΓ r 2 (log n) = <b>log</b> r) <b>gates,</b> for r n 1 = 3, improving previous bounds. We also show a trade-off between the number of gates and the number of wires in a threshold circuit, namely, a circuit w [...] ...|$|R
5000|$|Buddy and Cookie float {{through a}} terrible {{thunderstorm}} {{in a hot}} air balloon of Buddy's design. [...] "In a few minutes, we'll be on Mars", promises Buddy. Cookie is afraid; when {{a bolt of lightning}} streaks by, Buddy nonchalantly dismisses it as probable flatulence on his part. But the next bolt sends Cookie into Buddy's arms, and both are sorely afraid. The balloon knocks into a storm cloud that resembles a human face: the cloud blows the delicate vessel into another, which instead of winds lends blows, like those of a boxer, to the balloon. The couple spins round and round until they encounter a cloud resembling a rattlesnake which spits such lightning that two of the balloon's tethers split; another bolt severs the basket entirely & the two fall, in a winding path, to the earth. The basket glides along, the balloon's anchor trailing behind, and Buddy and Cookie pass a signpost pointing in the direction whither they are headed: [...] "To Lemonia, the Sour Domain." [...] A large bird, thinking it has dodged the oncoming cart, is caught by the trailing anchor and let off on a <b>log.</b> A <b>gate</b> opens {{at the sight of the}} basket, which continues to roll until it is dismantled by a crash.|$|R
60|$|Once I found {{where the}} beavers had {{utilized}} man's work. A huge log dam {{had been built}} on a wilderness stream to secure a head of water for driving logs from the lumber woods. When the pines and fourteen-inch spruce were all gone, the works were abandoned, and the dam left--with the gates open, of course. A pair of young beavers, prospecting for a winter home, found the place and were suited exactly. They rolled a sunken <b>log</b> across the <b>gates</b> for a foundation, filled them up with alder bushes and stones, and the work was done. When I found the place they had a pond a mile wide to play in. Their house was in a beautiful spot, under a big hemlock; and their doorway slanted off into twenty feet of water. That site was certainly well chosen.|$|R
40|$|We {{prove that}} any AC 0 circuit {{augmented}} with ɛ log 2 n MODm gates {{and with a}} MAJORITY gate at the output, require size n Ω(log n) to compute MODl, when l has a prime factor not dividing m and ɛ is sufficiently small. We also obtain that the MOD 2 function is hard on the average for AC 0 circuits of size n ɛ log n augmented with ɛ log 2 n MODm gates, for every odd integer m and any sufficiently small ɛ. As a consequence, for every odd integer m, we obtain a pseudorandom generator, based on the MOD 2 function, for circuits of size S containing ɛ <b>log</b> S MODm <b>gates.</b> Our results are based on recent bounds of exponential sums that were previously introduced for proving lower bounds for MAJ◦MODm ◦ ANDd circuits...|$|R
40|$|We {{present an}} {{algorithm}} {{for building a}} circuit that approximates single qubit unitaries with precision ϵ using O(log(1 /ϵ)) Clifford and T gates and employing up to two ancillary qubits. The algorithm for computing our approximating circuit requires an average of O(log^ 2 (1 /ϵ) log log(1 /ϵ)) operations. We prove {{that the number of}} gates in our circuit saturates the lower bound on the number of gates required in the scenario when a constant number of ancillae are supplied, and as such, our circuits are asymptotically optimal. This results in significant improvement over {{the current state of the}} art for finding an approximation of a unitary, including the Solovay-Kitaev algorithm that requires O(log^ 3 +δ(1 /ϵ)) gates and does not use ancillae and the phase kickback approach that requires O(log^ 2 (1 /ϵ) <b>log</b> log(1 /ϵ)) <b>gates,</b> but uses O(log^ 2 (1 /ϵ)) ancillae...|$|R
40|$|We prove optimal lower bounds for multilinear {{circuits}} and for monotone circuits with bounded depth. These lower bounds state that, {{in order}} to compute certain functions, these circuits need exactly as many OR gates as the respective DNFs. The proofs exploit a property of the functions that is based solely on prime implicant structure. Due to this feature, the lower bounds proved also hold for approximations of the considered functions {{that are similar to}} slice functions. Known lower bound arguments cannot handle these kinds of approximations. In order to show limitations of our approach, we prove that cliques of size n − 1 can be detected in a graph with n vertices by monotone formulas with O (<b>log</b> n) OR <b>gates.</b> Our lower bound for multilinear circuits improves a lower bound due to Borodin, Razborov and Smolensky for nondeterministic read-once branching programs computing the clique function. ...|$|R
40|$|Given {{a box of}} AND gates, each of fan-in 2, it {{is known}} that k OR gates are mistakenly put into a box of AND gates. Suppose that there is no tool to test which are OR gates. In order to compute the AND {{function}} of two values correctly, how many gates are necessary to construct an error-free circuit? This is the so-called AND/OR problem [3]. We consider modular circuits, which are leveled circuits and whose lowest level with exactly two gates has the roots of two disjoint subcircuits. Kleitman et al. [3] showed that it needs at most O((k + 1) <b>log</b> 2 3) <b>gates</b> to tolerate k OR gates, where they gave a construction achieving this bound. By combinatorial approach, we prove that for any k the optimal modular circuit needs 1 + 2 P k i= 1 2 z(i) gates, where z(i) is the number of zero in the binary representation of i. Also we characterize the fault tolerant circuit (not necessarily modular) with polynomial over a field. 1 Introduction Designing Boolean circuits that can tolerat [...] ...|$|R
40|$|We {{demonstrate}} how linear differential operators could be emulated by a quantum processor, should one ever be built, using the Abrams-Lloyd algorithm. Given a linear differential operator of order 2 S, acting on functions psi(x_ 1,x_ 2, [...] .,x_D) with D arguments, the computational cost required to estimate a low order eigenvalue to accuracy Theta(1 /N^ 2) is Theta((2 (S+ 1) (1 + 1 /nu) +D) log N) qubits and O(N^{ 2 (S+ 1) (1 + 1 /nu) } (D <b>log</b> N) ^c) <b>gate</b> operations, where N {{is the number}} of points to which each argument is discretized, nu and c are implementation dependent constants of O(1). Optimal classical methods require Theta(N^D) bits and Omega(N^D) gate operations to perform the same eigenvalue estimation. The Abrams-Lloyd algorithm thereby leads to exponential reduction in memory and polynomial reduction in gate operations, provided the domain has sufficiently large dimension D > 2 (S+ 1) (1 + 1 /nu). In the case of Schrodinger's equation, ground state energy estimation of two or more particles can in principle be performed with fewer quantum mechanical gates than classical gates. Comment: significant content revisions: more algorithm details and brief analysis of convergenc...|$|R
40|$|Decoupling {{has become}} a central concept in quantum {{information}} theory with applications including proving coding theorems, randomness extraction {{and the study of}} conditions for reaching thermal equilibrium. However, our understanding of the dynamics that lead to decoupling is limited. In fact, the only families of transformations that are known to lead to decoupling are (approximate) unitary two-designs, i. e., measures over the unitary group which behave like the Haar measure as far as the first two moments are concerned. Such families include for example random quantum circuits with O(n 2) gates, where n is the number of qubits in the system under consideration. In fact, all known constructions of decoupling circuits use Ω(n 2) gates. Here, we prove that random quantum circuits with O(n <b>log</b> 2 n) <b>gates</b> satisfy an essentially optimal decoupling theorem. In addition, these circuits can be implemented in depth O(log 3 n). This proves that decoupling can happen in a time that scales polylogarithmically in the number of particles in the system, provided all the particles are allowed to interact. Our proof does not proceed by showing that such circuits are approximate two-designs in the usual sense, but rather we directly analyze the decoupling property. ...|$|R
40|$|In this paper, we {{investigate}} about a lower bound {{on the number}} of gates in a Boolean circuit that computes the clique function with a limited number of negation gates. To derive strong lower bounds on the size of such a circuit we develop a new approach by combining the three approaches: the restriction applied for constant depth circuits[Has], the approximation method applied for monotone circuits[Raz] and boundary covering developed in the present paper. Based on the approach the following statement is established: If a circuit C with at most #(1 / 6) log <b>log</b> m# negation <b>gates</b> detects cliques of size (log m) 3 (log m) 1 / 2 in a graph with m vertices, then C contains at least 2 (1 / 5) (log m) (log m) 1 / 2 gates (Theorem 8). No non-trivial lower bounds on the size of such circuits were previously known even if we restrict the number of negation gates to be a constant. Moreover, by the Fischer's result[Fis] if one can improve the number of negation gates #(1 / 6) log log m# up to # 2 [...] ...|$|R
40|$|Abstract—Principles for {{designing}} practical self-routing nonblocking N × N circuit-switched connection networks with optimal q(N × log N) hardware at the bit-level of complexity are described. The overall principles behind the architecture {{can be described}} as “Expand-Route-Contract. ” A self-routing nonblocking network with w-bit wide datapaths can be achieved by expanding the datapaths to w + z independent bit-serial connections, routing these connections through self-routing networks with blocking, and by contracting the data at the output and recovering the w-bit wide datapaths. For an appropriate redundancy z, the blocking probability can be made arbitrarily small and the fault tolerance arbitrarily high. By using efficient space domain concentrators, the architecture yields self-routing nonblocking switching networks with an optimal O(N × log N) bits of memory or O(N × log N × log log <b>log</b> N) logic <b>gates.</b> By using a linear-cost time domain concentrator, the architecture yields self-routing nonblocking switching networks with an optimal q(N × log N) bits of memory or logic gates. These designs meet Shannon’s lower bound on memory requirements, established in the 1950 s. The number of stages of crossbars can match the theoretical minimum, which has not been achieved by previous self-routing networks. The architecture is feasible with existing electrical or optical technologies. The designs of electrical and optical switch cores with Terabits of bisection bandwidth for Networks-of-Workstations (NOWs) are described...|$|R
40|$|Delta {{networks}} are {{a class of}} multistage interconnection networks {{that can be used}} to interconnect a large number of modules in a modular computing system. In a packet communication environment, the modules in a system communicate asynchronously using fixed size packets. In this environment, delta networks exhibit a large parallelism in packet transfer leading to good performance. They also allow for local control in packet routing, extensibility, clean interfaces, speed independence, and simple proofs of correctness. They can be augmented to improve reliability, and pruned to have different numbers of input and output links. Feedback paths can be added to provide a range of performance. Special extreme cases of (N x N) delta {{networks are}} the full crossbar switch, which has O(N(' 2)) gates and O(N) ideal bandwidth, and the single bus, which has O(N) gates and 0 (1) bandwidth. Delta networks constructed from fixed size basic switches have O(N <b>log</b> N) <b>gates</b> and O(N) ideal bandwidth. The performance of delta networks with fixed size basic switches is comparable to that of the full crossbar switch in realistic environments as well. The class of delta networks includes several other networks that have been proposed in the literature. Thus, this study applies to these networks as well. Unbuffered delta networks have no internal buffers within the network. A simple model for network operation can be used to obtain a network characteristic that can then be used to obtain good estimates of performance for other models and environments. Using priority schemes in arbitrating between conflicting packets (that require passage through the same link at the same time) leads to a deterioration in performance as compared to arbitration with equiprobable selection from conflicting packets. Inserting a buffer between the stages of a delta network leads to a considerable improvement in performance, making its performance better than that of the (same size) unbuffered crossbar switch. However, as the number of buffers between stages is increased, the network bandwidth saturates quickly to a constant, while the delay that a packet encounters in the network increases almost linearly with buffer size. Thus, the buffer size for most practical applications should be limited to one or two. The performance obtained is also sensitive to precisely how the switches in the network operate. The switch operation policy needs to be chosen depending on the values of certain network parameters in an implementation. There are many ways of pruning delta networks. Optimal pruned delta networks, with buffers between stages, have a nonintuitive topology. Introducing feedback paths leads to a range of performance and cost. However, packets can deadlock in such networks. It is possible to detect and recover from deadlocks. For good performance to be obtained, it is necessary to prevent the frequent occurrence of deadlocks. This can be achieved by controlling the flow of packets into the networks...|$|R
40|$|Quantum {{switching}} {{networks are}} analogs of classical switching networks in which classical switches {{are replaced by}} quantum switches. These networks are used to switch quantum data among a set of quantum sources and receivers. They {{can also be used}} to efficiently switch classical data, and help overcome some limitations of classical switching networks by utilizing the unique properties of quantum information systems, such as superposition and parallelism. In this thesis, we design several such networks which can be broadly put in the following three categories: 1. Quantum unicast networks: We give the design of quantum Baseline network (QBN) which is a self-routing and unicast quantum packet switch that uses the Baseline topology. The classical version of the network blocks packets internally even when there are no output contentions and each input packet is addressed to a different output. The QBN uses the principles of quantum superposition and parallelism to overcome such blocking. Also, for assignments that have multiple input packets addressed to an output, this network creates a quantum superposition of all these packets on that output, ensuring that all packets have non-zero probabilities of being observed on that output. 2. Quantum concentrators: We introduce a new network called quantum concentrator, which is a key component of our quantum multicasting network design. This concentrator is also an n × n quantum switching network, to be denoted by n-QC, and which, for any m, 1 ≤ m ≤ n, routes arbitrary quantum states on any m of its inputs to its top m outputs. This network uses O(n <b>log</b> n) quantum <b>gates,</b> and has a gate level depth of O(log 2 n). We also give several variations of this network, the main ones being order-preserving and priority quantum concentrators. 3. Quantum multicast networks: We first design a quantum multicasting network, called a generalized quantum connector (GQC) which can be used to multicast quantum information from n input sources to n outputs. Since general quantum states cannot be copied due to the no-cloning theorem, this network actually multicasts superposed classical information packets, contained in a finite number of qubits at each input. Copying needed for such multicasting is obtained by Wootters and Zurek's quantum copying machines or controlled-not gates. This n-input and n-output (n × n) network, to be denoted by n-GQC, is recursively constructed using n/ 2 -GQCs and uses O(n log 2 n) quantum gates. The time complexity of this network in terms of gate level depth is O(log 3 n). We also give two variations of this network which improve its behavior when routing multicast assignments that have multiple input packets contending for same outputs...|$|R

