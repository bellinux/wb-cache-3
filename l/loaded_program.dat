14|1110|Public
50|$|When the job gets {{to label}} 5EX {{if it has}} a {{currently}} <b>loaded</b> <b>program</b> it is deleted from memory and the ENDJOB (EJ) command terminates the job.|$|E
5000|$|Users {{can break}} the {{execution}} of the <b>loaded</b> <b>program</b> by way of a [...] "Quit" [...] key (usually F10). When this action is performed, then the Slave interface returns to WHDLoad by calling a resload_Abort internal function.|$|E
50|$|Self-{{relocation}} {{is similar}} to the relocation process employed by the linker-loader when a program is copied from external storage into main memory; the difference is that it is the <b>loaded</b> <b>program</b> itself rather than the loader in the operating system or shell that performs the relocation.|$|E
5000|$|RUN (OS/2 only) : Similar to CALL, <b>loads</b> <b>programs</b> in CONFIG.SYS. Similar to INSTALL under DOS and CALL under OS/2, but <b>loads</b> <b>programs</b> in {{background}} concurrenty.|$|R
5000|$|... {{the use of}} the Toner <b>Loading</b> <b>Program</b> {{was indeed}} a likely {{copyright}} violation, because the Toner <b>Loading</b> <b>Program</b> was not a [...] "lock-out code" [...] that SCC was entitled to copy under the DMCA, and because the Toner <b>Loading</b> <b>Program</b> could be rewritten in different ways (and therefore had enough creativity to qualify for copyright protection).|$|R
50|$|Likewise, the {{majority}} opinion held that anyone purchasing a printer and toner cartridge could read the Toner <b>Loading</b> <b>Program</b> from the printer; so SCC did not circumvent an access control on the Toner <b>Loading</b> <b>Program</b> either.|$|R
50|$|The Slave {{interface}} loads {{the main}} executable of the installed program by calling a WHDLoad function (resload_DiskLoad or resload_LoadFile), then patches the main executable (so that the <b>loaded</b> <b>program</b> will {{be capable of}} loading its data stored into the hard disk via the Slave, in order to fix compatibility problems, and to enable an exit from the program) and calls the main executable.|$|E
50|$|When a {{breakpoint}} is hit, various {{tools are}} used to inspect {{the state of the}} program or alter it. Stack trace of each thread may be used to see the chain of function calls that led to the paused instruction. A list of watches allows one to view the values of selected variables and expressions. There may also be tools to show the contents of registers, <b>loaded</b> <b>program</b> modules and other information.|$|E
5000|$|The basic {{instruction}} simulation {{technique is}} the same regardless of purpose: first execute the monitoring program passing {{the name of the}} target program as an additional input parameter. The target program is then loaded into memory, but control is never passed to the code. Instead, the entry point within the <b>loaded</b> <b>program</b> is calculated, and a pseudo program status word (PSW) is set to this location. A set of pseudo registers are set to what they would have contained if the program had been given control directly.|$|E
40|$|Applications such as {{warehouse}} maintenance need to load large data volumes regularly. The {{efficiency of}} loading {{depends on the}} resources that {{are available at the}} source and at the target systems. Our work aims to understand the performance criteria that are involved in bulk loading data into a database and devise tailored optimization strategies. Unlike commercial systems and previous research on the same topic, our approach follows the fundamental database principle of physical-logical independence. A <b>loading</b> <b>program</b> is represented as a sequence of algebraic expressions. This abstraction enables the use of appropriate algebraic rewritings to optimize a <b>loading</b> <b>program</b> and of a cost model that takes into consideration efficiency criteria such as the processing times at the source and target systems and the bandwidth between them. A slow <b>loading</b> <b>program</b> may be preferable if it does not slow down other applications by consuming too much memory. Thus, we view the problem of optimizing a <b>loading</b> <b>program</b> as finding a compromise between several efficiency criteria. The ability to represent <b>loading</b> <b>programs</b> in an algebra and performance criteria in a cost model has two very desirable properties: reusability and efficiency. Database programmers do not have to write <b>loading</b> <b>programs</b> by hand. In addition, tuning <b>loading</b> <b>programs</b> becomes easier since programmers have a better control on the performance criteria specified in the cost model. The algebra captures data transformations that would have bee...|$|R
40|$|The {{abstract}} of {{the invention}} relates to an experimental device for the testing of automotive assemblies, in particular, individual suspension units under realistic load conditions. The experimental device consists of a load device for introducing vertical forces, lateral forces, longitudinal forces, braking and drive forces on the automotive assembly. Moreover, the experimental device consists of a control device for {{the control of the}} load device such that the vertical forces, lateral forces, longitudinal forces, braking and drive forces are exerted on the automotive assembly in accordance with a predefined control <b>load</b> <b>program.</b> The control <b>load</b> <b>program</b> consists of a standardized basic <b>load</b> <b>program</b> matched to the current automotive assembly to be tested by vehicle and/or axle-specific conversion parameters and by conversion parameters specific to the experimental device. Modification means for matching the automotive assembly to the standardized basic <b>load</b> <b>program</b> are preferred, said modification means permitting a relatively uncomplicated matching of the basic <b>load</b> <b>program.</b> The modification means are preferred means for [...] ...|$|R
30|$|The <b>loading</b> <b>program</b> {{was applied}} to the {{specimens}} as load-controlled until the specimens collapsed. The <b>loading</b> <b>program</b> was manually applied to the specimens at the same loading velocity. The loads and displacements observed in the specimens during the loading steps were monitored via the computer display.|$|R
50|$|In computing, a loader is {{the part}} of an {{operating}} system that is responsible for loading programs and libraries. It is one of the essential stages in the process of starting a program, as it places programs into memory and prepares them for execution. Loading a program involves reading the contents of the executable file containing the program instructions into memory, and then carrying out other required preparatory tasks to prepare the executable for running. Once loading is complete, the operating system starts the program by passing control to the <b>loaded</b> <b>program</b> code.|$|E
50|$|The video {{also shows}} the dual {{use of the}} {{magnetic}} card as a program documentation menu. Notes can be printed or handwritten by the programmer on the top side of the magnetic card. Once read by the cardreader, the card can then be stored, as shown, in a slot between {{the top of the}} keyboard and the display, thus providing a notation indicating both the name of the program currently loaded and the purpose of each of the five label buttons A-E and their secondary functions A'-E' within the <b>loaded</b> <b>program.</b>|$|E
50|$|Examples can {{be found}} in MS-DOS/PC DOS; when running on 286 or higher processors, the {{resident}} executable loader contains code specially designed to detect and fix certain widespread applications and stub loaders (such as programs linked with older versions of Microsoft's EXEPACK or Rational Systems' 386 DOS extenders) by patching the <b>loaded</b> <b>program</b> image before executing it, or where DOS patches Windows (WINA20.386) Over the course of development, DR-DOS also had to be modified to not only emulate many undocumented peculiarities of MS-DOS/PC DOS, but also actual bugs in the kernel and several drivers to make certain other drivers and applications run on DR-DOS, when they were tested on specific versions of MS-DOS only.|$|E
5000|$|... {{violated}} {{copyright law}} by copying the Toner <b>Loading</b> <b>Program,</b> and ...|$|R
50|$|The {{court also}} {{rejected}} the district court's {{conclusion that the}} interoperability defense did not apply. Since SCC had offered testimony that its chips did indeed contain independently-created programs in addition to Lexmark's Toner <b>Loading</b> <b>Program,</b> the Toner <b>Loading</b> <b>Program</b> {{could be seen as}} necessary to allow interoperation between SCC's own programs and the Lexmark printer.|$|R
40|$|The {{effects of}} {{different}} <b>loading</b> <b>programs</b> on the elasto-/viscoplastic behavior of rate-sensitive materials are analyzed with specific numerical examples. An appropriate solution scheme and a consistent tangent operator are applied which {{are capable of}} being adopted for general computational procedures. Numerical computations and results are reported which illustrate the rate-dependence of the elasto-/viscoplastic constitutive model in use. In the numerical analysis the loading is applied by increasing the pressure and accordingly a nondimensional <b>loading</b> <b>program</b> parameter is introduced. In the numerical results {{the significance of the}} <b>loading</b> <b>program</b> is thus emphasized with reference to the nonlinear response of the elasto-/viscoplastic material behavior of solids...|$|R
5000|$|While some {{versions}} of Commodore BASIC included disk-specific [...] and [...] commands, the version {{built into the}} popular Commodore 64 lacked these, requiring the user to specify the disk drive's device number (typically 8 or 9) to the standard [...] command, which otherwise defaulted to tape. Another omission from the Commodore 64s BASIC 2.0 was a [...] command to load a disk's contents into screen memory without clearing main memory. On the 64, viewing a disk's contents was implemented as loading a [...] "program" [...] which when listed showed the directory. This {{had the effect of}} overwriting the currently <b>loaded</b> <b>program.</b> Addons like the DOS Wedge overcame this by rendering the directory listing direct to the screen.|$|E
50|$|The last 66 bytes of the 512-byte MBR are {{reserved}} for the partition table and other information, so the MBR boot sector program must be {{small enough to fit}} within 446 bytes of memory or less. The MBR code may communicate with the user, examine the partition table. Eventually, the MBR will need to perform its main task, and load the program that will perform the next stage of the boot process, usually by making use of INT 13h BIOS calls. While it may be convenient to think of the MBR and the program that it loads as separate and discrete, a clear distinction between the MBR and the loaded OS is not technically required—the MBR, or parts of it, could stay resident in RAM and be used as part of the <b>loaded</b> <b>program,</b> after the MBR transfers control to that program. The same is true of a volume boot record, whether that volume is a floppy disk or a fixed disk partition. However, in practice, it is typical for the program loaded by a boot record program to discard and overwrite the RAM image of the latter, so that its only function is as the first link of the boot loader chain.|$|E
5000|$|From a {{technical}} standpoint, {{it is important}} to note that the distinction between an MBR and a volume boot record exists only at the user software level, above the BIOS firmware. (Here, the term [...] "user software" [...] refers to both operating system software and application software.) To the BIOS, removable (e.g. floppy) and fixed disks are essentially the same. For either, the BIOS reads the first physical sector of the media into RAM at absolute address 7C00hex, checks the signature in the last two bytes of the loaded sector, and then, if the correct signature is found, transfers control to the first byte of the sector with a jump (JMP) instruction. The only real distinction that the BIOS makes is that (by default, or if the boot order is not configurable) it attempts to boot from the first removable disk before trying to boot from the first fixed disk. From the perspective of the BIOS, the action of the MBR loading a volume boot record into RAM is exactly the same as the action of a floppy disk volume boot record loading the object code of an operating system loader into RAM. In either case, the program that BIOS loaded is going about the work of chain loading an operating system. The distinction between an MBR and a volume boot record is an OS software-level abstraction, designed to help people to understand the operational organization and structure of the system. That distinction doesn't exist for the BIOS. Whatever the BIOS directly loads, be it an MBR or a volume boot record, is given total control of the system, and the BIOS from that point is solely at the service of that program. The <b>loaded</b> <b>program</b> owns the machine (until the next reboot, at least). With its total control, this program is not required to ever call the BIOS again and may even shut BIOS down completely, by removing the BIOS ISR vectors from the processor interrupt vector table, and then overwrite the BIOS data area. This is mentioned to emphasize that the boot program that the BIOS loads and runs from the first sector of a disk can truly do anything, so long as the program does not call for BIOS services or allow BIOS ISRs to be invoked after it has disrupted the BIOS state necessary for those services and ISRs to function properly.|$|E
5000|$|Concerning the copyrightability of the Toner <b>Loading</b> <b>Program,</b> {{he found}} that the record {{supported}} Lexmark's claim that the program could have been implemented in any number of ways, and therefore Lexmark's implementation was creative and copyrightable. Agreeing that the record was inadequate for the district court to conclude that the Toner <b>Loading</b> <b>Program</b> was a [...] "lock-out code", he noted that Lexmark's expert had testified that the entire Toner <b>Loading</b> <b>Program</b> process could be turned off by flipping a single bit in the chip's code, and that it should have been possible for SCC to discover this; so copying the program may not have been practically necessary too.|$|R
30|$|In an interruptible <b>load</b> <b>program,</b> {{participants}} {{are subject to}} load interruption during system contingencies.|$|R
40|$|AbstractIn {{the present}} paper {{computational}} applications are illustrated with reference to elasto/viscoplastic problems. The influence of different <b>loading</b> <b>programs</b> on the inelastic behaviour of rate-sensitive elasto/viscoplastic materials is illustrated with specific numerical examples. An associated formulation of the evolutive laws is adopted. Different loading procedures {{are taken into account}} by considering different values of the loading rates and of the intrinsic properties of the material. A suitable integration scheme is applied and a numerical example is considered by analysing different <b>loading</b> <b>programs.</b> Numerical computations and results are reported which illustrate the rate-dependency of the constitutive model in use. Consequently the significance of the <b>loading</b> <b>program</b> is emphasized with reference to the non-linear response of rate-dependent elasto/viscoplastic materials...|$|R
40|$|Graduation date: 1987 The {{system in}} this thesis uses {{multiple}} Intel iSBC 86 / 12 A cards connected to the Intel Multibus. The system was written using the Intel language PLM 86. The final result is a low level debug tool that provides the user with the following capabilities: examine/change memory, examine/change processor registers, load a user written program, set a breakpoint, and execute the <b>loaded</b> <b>program</b> all in a multi-microprocessor environment. The system is designed to use five iSBC 86 / 12 A cards currently two are implemented. The system interfaces to the Intel MDS 800 system via the SDM 86 monitor hardware and firmware...|$|E
40|$|Effective dynamic virtual-machine {{optimization}} {{depends on}} quickly finding and optimizing frequently-executed code regions. Such regions are naturally represented with a trace-cache, {{a collection of}} long, frequently-executed sequences of instructions. An ideal trace-cache is small and captures {{the majority of the}} program's execution stream, yet consists of traces large enough to allow for useful inter-bytecode optimizations and improve instruction-fetch performance. This thesis describes an efficient dynamic technique for finding and constructing such traces. Our trace caching algorithm relies on three innovative techniques: profiling data is managed with the Branch Implication Graph(BI-Graph) data structure, decomposing the program into small, independent, tree-like components using our hot subgraph filters the BI-Graph for relevant data, and traces are constructed from components using a minimum-bounded expected completion rate. We evaluated the runtime performance of our generated traces using a trace cache simulator implemented on top of the Java Virtual Machine, SableVM. Tested against Java benchmarks, our primary data structure, the BI-Graph, scales linearly with the <b>loaded</b> <b>program</b> size and is no larger than a control flow graph. On our benchmarks set, our traces capture 98. 5 % of the executed instructions, average 34 bytecodes instructions in length, and execute to completion 98. 5 % of the time. Further, the total size of all traces created scales linearly at 83 % of the program's size, averaging only 50000 bytecodes. The entire algorithm, including context-sensitive, branch bias profiling and trace creation, has a projected overhead of only 4. 5 %. Thus, our algorithm efficiently constructs a small trace cache consisting of long traces that both tend to execute to completion and capture the majority of the execution stream...|$|E
5000|$|Because of this mistaken standard, it {{had refused}} to {{consider}} {{whether or not the}} alternative Toner <b>Loading</b> <b>Programs</b> proposed by Lexmark were practical.|$|R
50|$|The <b>Loading</b> <b>Program</b> is {{the fourth}} release by {{collaborative}} group Tuatara. The release mainly consists of remixes of songs from their first three albums.|$|R
5000|$|A small {{resident}} monitor which handles disk input/output, error recovery, and job-to-job transition, and <b>loads</b> <b>programs</b> to {{be executed}} from the core-image library on disk.|$|R
5000|$|... 3M {{developed}} the DC300 tape cartridge for <b>loading</b> <b>programs</b> into AT&T’s electronic switching systems that were becoming {{the backbone of}} the world’s phone system in the 1970s.|$|R
5000|$|It {{had held}} that the Toner <b>Loading</b> <b>Program</b> was copyrightable simply because it [...] "could be written {{in a number of}} {{different}} ways", without considering the practical realities.|$|R
50|$|Judge Feikens {{also wrote}} an opinion, agreeing {{with many of}} the {{majority}} opinion's results (though sometimes for different reasons), but disagreeing with its conclusion on the Toner <b>Loading</b> <b>Program.</b>|$|R
50|$|On the DMCA counts, Feikens {{agreed that}} Lexmark had not {{established}} a violation {{with regards to}} the Toner <b>Loading</b> <b>Program,</b> but for a very different reason than that found by the majority opinion. He noted that SCC had testified that it had not even been aware that the Toner <b>Loading</b> <b>Program</b> existed; it had copied the data on the Lexmark printer chip (including the Toner <b>Loading</b> <b>Program)</b> purely in an attempt to bypass the protection on the Printer Engine Program. Since the DMCA requires that an infringer knowingly circumvent access controls on the protected program, SCC could not have knowingly circumvented protections on a program it did not know existed. With regards to the Printer Engine Program, he agreed with the majority opinion, but also noted in his belief that the consumer had acquired the rights to access this program by purchasing the printer, and therefore the DMCA would not apply to attempts to access it.|$|R
5000|$|CALL (OS/2 4.0 {{and higher}} only) : Similar to INSTALL under DOS, <b>loads</b> <b>programs</b> in CONFIG.SYS. Similar to RUN under OS/2, but runs in {{foreground}} and halts CONFIG.SYS processing until return.|$|R
40|$|In {{the present}} paper the effects of {{different}} loading procedures on the response of rate-sensitive inelastic materials are analysed. The elasto/viscoplastic model problem is developed {{by taking advantage of}} the postulate of maximum dissipation in order to derive an associated formulation of the evolutive laws. A non-dimensional <b>loading</b> <b>program</b> parameter is introduced which accounts for the loading procedure and the intrinsic properties of the material. An appropriate solution method is applied and specific numerical examples are reported so that the implications due to different <b>loading</b> <b>programs</b> on the inelastic behaviour of rate-sensitive materials are suitably illustrated...|$|R
50|$|The {{band had}} eleven {{members at the}} time of 2001's Cinemathique, which was {{intended}} to fulfill the original desire of creating music for soundtracks. A remix album, The <b>Loading</b> <b>Program,</b> was released in 2003.|$|R
