10000|10000|Public
5|$|DBI {{provides}} caching for database {{handles and}} <b>queries,</b> which can greatly improve performance in long-lived execution environments such as mod perl, helping high-volume systems avert load spikes {{as in the}} Slashdot effect.|$|E
5|$|David Stouck, {{professor}} emeritus of English at Simon Fraser University, writes that the Mary Baker Eddy Library holds the original manuscript, and that Cather's handwriting is evident in edits for the typesetter and notes with <b>queries.</b>|$|E
5|$|MTV {{featured}} Savage in {{its program}} Savage U, wherein {{he traveled to}} college campuses in the United States to speak about sexuality and answer students' <b>queries.</b> The series premiered on MTV on April 3, 2012.|$|E
5000|$|<b>Query</b> level {{features}} or <b>query</b> features, which depend {{only on the}} <b>query.</b> For example, {{the number}} of words in a <b>query.</b> Further information: <b>query</b> level feature ...|$|R
40|$|International audienceSPARQL <b>query</b> {{language}} plays {{a significant}} role in developing semantic web and web intelligence. In order to deal with large data <b>query</b> execution over RDF, SPARQL <b>query</b> optimizer is an essential component in the SPARQL <b>query</b> engine for improving <b>query</b> execution performance. This paper proposes an approach for performing <b>query</b> planning and optimization based on an extended <b>query</b> pattern graph and heuristics. First, this paper generalizes SPARQL <b>query</b> statement representation by taking other expressions into account, aiming at overcoming the limitations of only using basic <b>query</b> triple patterns. Second, this paper presents the heuristics for estimating the cost of executing <b>query</b> triple pattern. The proposed <b>query</b> planning methods are implemented within Corese <b>query</b> engine and are evaluated using BSBM benchmark. The results suggest that the proposed methods can optimize effectively the <b>query</b> execution time of SPARQL <b>query</b> engine...|$|R
40|$|This thesis proposes an {{object-oriented}} <b>query</b> {{language that}} is more powerful than many existing <b>query</b> languages. The language is formally specified and its expressive power is demonstrated by giving four translation schemes from other prominent objectoriented <b>query</b> languages. Further, this <b>query</b> language can be supported by a <b>query</b> algebra and both the <b>query</b> language and <b>query</b> algebra can be optimised using meaning preserving transformation rules. Object-Oriented <b>Query</b> Languages. The functional requirements of high-level objectoriented <b>query</b> languages are identified and they combine as well as supplement features found in existing object-oriented <b>query</b> languages. Effectively they formulate a <b>query</b> model against which existing <b>query</b> languages can be evaluated and compared. An evaluation of four representative <b>query</b> languages chosen from research prototypes and commercial products shows that none satisfies all the requirements. On {{the basis of the}} requirements a new <b>query</b> language, obje [...] ...|$|R
5|$|Predecessor and {{successor}} <b>queries</b> can {{be performed}} with rank <b>queries.</b> Once the rank of the target value is known, its predecessor is the element at the position given by its rank (as {{it is the largest}} element that is smaller than the target value). Its successor is the element after it (if it is present in the array) or at the next position after the predecessor (otherwise). The nearest neighbor of the target value is either its predecessor or successor, whichever is closer.|$|E
5|$|The above {{procedure}} only performs exact matches, {{finding the}} position of a target value. However, due to the ordered nature of sorted arrays, it is trivial to extend binary search to perform approximate matches. For example, binary search can be used to compute, for a given value, its rank (the number of smaller elements), predecessor (next-smallest element), successor (next-largest element), and nearest neighbor. Range <b>queries</b> seeking the number of elements between two values can be performed with two rank <b>queries.</b>|$|E
25|$|Each of the 50 million <b>queries</b> {{is tested}} as Q {{to see if}} the result {{computed}} from a single query could match the actual history ILI data obtained from the U.S. Centers for Disease Control and Prevention (CDC). This process produces a list of top <b>queries</b> which gives the most accurate predictions of CDC ILI data when using the linear model. Then the top 45 <b>queries</b> are chosen because, when aggregated together, these <b>queries</b> fit the history data the most accurately. Using the sum of top 45 ILI-related <b>queries,</b> the linear model is fitted to the weekly ILI data between 2003 and 2007 so that the coefficient can be gained. Finally, the trained model is used to predict flu outbreak across all regions in the United States.|$|E
40|$|We {{have built}} an HTTP based {{resource}} discovery system called Discover {{that provides a}} single point of access to over 500 WAIS servers. Discover provides two key services: <b>query</b> refinement and <b>query</b> routing. <b>Query</b> refinement helps a user improve a <b>query</b> fragment to describe the user's interests more precisely. Once a <b>query</b> has been refined and describes a manageable result set, <b>query</b> routing automatically forwards the <b>query</b> to the WAIS servers that contain relevant documents. Abbreviated descriptions of WAIS sites called content labels are used by the <b>query</b> refinement and <b>query</b> routing algorithms. Our experimental results suggest that <b>query</b> refinement {{in conjunction with the}} <b>query</b> routing provides an effective way to discover resources in a large universe of documents. Our experience with <b>query</b> refinement has convinced us that the expansion of <b>query</b> fragments is essential for using a large, dynamically changing, heterogenous distributed information system. 1 Introduction Locating an [...] ...|$|R
50|$|<b>Query</b> optimizer - Performs <b>query</b> {{optimization}} {{on every}} <b>query</b> {{to choose an}} efficient <b>query</b> plan (a partial order (tree) of operations) to be executed to compute the <b>query</b> result. May be specific to a particular storage engine.|$|R
40|$|In this {{research}} will be worked through about how cryptography RC 4 's algorithm implementation in protection to <b>query</b> result and of <b>query,</b> security by encryption and descryption up to both is in network. Implementation of {{this research}} which is build software in client that function access databases that is placed {{by the side of}} server. Software that building to have facility for encryption and descryption <b>query</b> result and of <b>query</b> that is sent from client goes to server and. transmission <b>query</b> result and of <b>query</b> can secure its security. Well guaranted transmission security him of <b>query</b> result and of <b>query</b> can be told to succeed if success software can encryption <b>query</b> result and of <b>query</b> which transmission so that in the event of scanning to both, scanning will not understand data content. Conclusion {{of this research}} that is woke up software succeed encryption <b>query</b> and result of <b>query</b> which transmission between application of client and of server databases. Abstract in Bahasa Indonesia: Pada penelitian ini dibahas mengenai bagaimana mengimplementasikan algoritma kriptografi RC 4 dalam proteksi terhadap <b>query</b> dan hasil <b>query,</b> pengamanan dilakukan dengan cara melakukan enkripsi dan dekripsi selama keduanya berada di dalam jaringan. Pengimplementasian dari penelitian ini yaitu membangun sebuah software yang akan diletakkan di sisi client yang berfungsi mengakses database yang diletakkan di sisi server. Software yang dibangun memiliki fasilitas untuk mengenkripsi dan mendektipsi <b>query</b> dan hasil <b>query</b> yang dikirimkan dari client ke server dan juga sebaliknya. Dengan demikian tramsmisi <b>query</b> dan hasil <b>query</b> dapat terjamin keamanannya. Terjaminnya keamanan transmisi <b>query</b> dan hasil <b>query</b> dapat dikatakan berhasil jika software berhasil mengenkripsi <b>query</b> dan hasil <b>query</b> yang ditransmisikan sehingga apabila terjadi penyadapan terhadap keduanya, penyadap tidak akan mengerti isi data tersebut. Kesimpulan dari penelitian ini yaitu software yang dibangun berhasil mengenkripsi <b>query</b> dan hasil <b>query</b> yang ditransmisikan antara aplikasi client dan server database. Kata kunci: enkripsi, transmisi, RC 4, <b>query,</b> databas...|$|R
25|$|Notes and <b>Queries</b> (1926) — Essays.|$|E
25|$|Prior to version 7, Drupal had {{functions}} that performed tasks related to databases, such as SQL query cleansing, multi-site table name prefixing, and generating proper SQL <b>queries.</b> In particular, Drupal 6 introduced an abstraction layer that allowed programmers to create SQL <b>queries</b> without writing SQL.|$|E
25|$|Notes and <b>queries,</b> (1868). (Oxford University Press).|$|E
40|$|Abstract — The {{sequence}} {{in which the}} source tables are accessed during <b>query</b> execution is called a <b>query</b> execution plan. The process of selecting one execution plan from potentially many possible plans {{is referred to as}} <b>query</b> optimization. The <b>query</b> optimizer {{is one of the most}} important components of a <b>query</b> processor. The input to the optimizer consists of the <b>query,</b> the database schema (table and index definitions), and the database statistics. The output of the optimizer is a <b>query</b> execution plan, sometimes referred to as a <b>query</b> plan or just a plan. The goal is to eliminate as many unneeded tuples, or rows as possible. The paper describes the design of <b>query</b> optimizer w ith four basic phases such as <b>Query</b> Analysis, Index Selection Join Selection and Plan Selection. Index Terms — Execution plan, index selection, join selection, <b>query</b> analysis, <b>query</b> optimization...|$|R
40|$|The {{multiple}} <b>query</b> is a <b>query</b> {{that combines}} Boolean and probabilistic <b>query</b> {{on the information}} retrieval inference network system, the system consists of two components i. e. a dokument and a <b>query</b> network, they are joined by links between the representation and <b>query</b> concepts. The document network build an inverted belief list and the <b>query</b> network are evaluated by using canonical matrix. The similarity process between representation and <b>query</b> conceps yields a set of relevant document retrieved. The experiment has showed {{that the use of}} multiple <b>query</b> formulations will significantly improve the retrieval perfomance, compared to either the Boolean or probabilistic <b>query...</b>|$|R
40|$|Semantic <b>query</b> {{optimization}} {{is applied}} to relational databases using the inductive learning approach. This approach generates an alternate <b>query</b> using the learning framework and the algorithm. The alternate <b>query</b> should be semantically equivalent to original <b>query.</b> The semantically equivalent <b>query</b> generated should be less expensive than the original <b>query.</b> These can be implemented in SQL using the SQL hints. These hints allow user to implement the desired plan for the <b>query...</b>|$|R
25|$|Notes and <b>Queries,</b> 6th ser., viii. 45, 92, 338, xi, 15.|$|E
25|$|SQL Server {{also allows}} stored {{procedures}} to be defined. Stored procedures are parameterized T-SQL <b>queries,</b> that {{are stored in}} the server itself (and not issued by the client application {{as is the case}} with general <b>queries).</b> Stored procedures can accept values sent by the client as input parameters, and send back results as output parameters. They can call defined functions, and other stored procedures, including the same stored procedure (up to a set number of times). They can be selectively provided access to. Unlike other <b>queries,</b> stored procedures have an associated name, which is used at runtime to resolve into the actual <b>queries.</b> Also because the code need not be sent from the client every time (as it can be accessed by name), it reduces network traffic and somewhat improves performance. Execution plans for stored procedures are also cached as necessary.|$|E
25|$|BioSample {{records are}} indexed and searchable, {{supporting}} cross-database <b>queries</b> by sample description.|$|E
5000|$|<b>Query</b> {{expansion}} (QE) is {{the process}} of reformulating a seed <b>query</b> to improve retrieval performance in information retrieval operations, particularly in the context of <b>query</b> understanding.In the context of search engines, <b>query</b> expansion involves evaluating a user's input (what words were typed into the search <b>query</b> area, and sometimes other types of data) and expanding the search <b>query</b> to match additional documents. <b>Query</b> expansion involves techniques such as: ...|$|R
40|$|The main {{objective}} of <b>query</b> processor is {{to generate the}} most efficient <b>query</b> results. Using an apt execution plan, <b>query</b> minimizes cost of execution for results. The order of accessing a source table is very important during <b>query</b> execution. The best execution plan from possible ones is presented by <b>Query</b> optimizer. The paper discusses various stages of <b>query</b> optimization using execution plan. It gives the analysis of indexes, type of expressions & joins used in the execution plan of the <b>query.</b> The approach gets the estimate {{of the cost of}} <b>query</b> joins in a <b>query</b> at compile time. These estimates help in the construction of a <b>query</b> plan at compile time and then executed at run-time...|$|R
40|$|Abstract—Content-based image {{retrieval}} from {{a mobile}} device in large image database is challenging. In this paper {{we present a}} client-server architecture where a server is running on a personal computer and a client on the device. The client sends content-based <b>query</b> request to the server and the server performs an interactive content-based <b>query</b> and sends the <b>query</b> results to the client. In the <b>query</b> a user of the mobile device define a time interval after {{that he wants to}} see the <b>query</b> results. The server generates the <b>query</b> result after the given time. Furthermore the user of the device can get the updated <b>query</b> results {{at any time during the}} <b>query</b> operation. This interactive <b>query</b> can avoid un-wanted progressing <b>query</b> results and thus reduce the server <b>query</b> time and memory. W I...|$|R
25|$|OLAP is {{typically}} contrasted to OLTP (online transaction processing), {{which is generally}} characterized by much less complex <b>queries,</b> in a larger volume, to process transactions rather than {{for the purpose of}} business intelligence or reporting. Whereas OLAP systems are mostly optimized for read, OLTP has to process all kinds of <b>queries</b> (read, insert, update and delete).|$|E
25|$|DNS {{primarily}} {{uses the}} User Datagram Protocol (UDP) on port number 53 to serve requests. DNS <b>queries</b> {{consist of a}} single UDP request from the client followed by a single UDP reply from the server. The Transmission Control Protocol (TCP) is used when the response data size exceeds 512 bytes, or for tasks such as zone transfers. Some resolver implementations use TCP for all <b>queries.</b>|$|E
25|$|Apache Kylin is a {{distributed}} {{data store}} for OLAP <b>queries</b> originally developed by eBay.|$|E
5000|$|Building an {{appropriate}} <b>query.</b> This involves adding and removing phrases until the <b>query</b> and corresponding list of <b>query</b> results satisfies the user’s information need. At this stage two panels are visible: <b>query</b> topics and <b>query</b> results (the leftmost two panels in the screenshot).|$|R
30|$|<b>Query</b> {{service is}} an {{advanced}} discovery service that includes four major functions: performing local or remote searching, publishing IndexableDoc document in peer network, propagating <b>query</b> to nearby peers, handling advanced <b>query</b> such as Boolean <b>Query,</b> XQuery, SQL-Liked <b>Query,</b> etc. The reason for implementing <b>Query</b> Service is because JXTA discovery service is only designed for publishing advertisement and performing plain text searching. It can only handle simple keywords <b>query</b> which is insufficient for modern applications.|$|R
50|$|To avoid {{excessively}} large <b>query</b> region after {{expansion in}} skewed datasets, an optimization of the <b>query</b> algorithm exists, which improves the <b>query</b> efficiency by avoiding unnecessary <b>query</b> enlargement.|$|R
25|$|Sutcliffe, Chris. The Canon of Robert Armin's Work: An Addition. Notes and <b>Queries</b> (1996) 43(2): 171–175.|$|E
25|$|Microsoft Visual Studio {{includes}} native {{support for}} data programming with Microsoft SQL Server. It {{can be used}} to write and debug code to be executed by SQL CLR. It also includes a data designer that {{can be used to}} graphically create, view or edit database schemas. <b>Queries</b> can be created either visually or using code. SSMS 2008 onwards, provides intellisense for SQL <b>queries</b> as well.|$|E
25|$|Search engines, {{increasing}} the energy efficiency of data centres {{and ability to}} use increasingly advanced <b>queries.</b>|$|E
30|$|<b>Query</b> {{expansion}} {{ranking method}} is our proposed feature selection method {{inspired by the}} <b>query</b> expansion methods {{from the field of}} information retrieval (IR). <b>Query</b> expansion helps to find more relevant documents for a given <b>query.</b> It does so by adding new terms to the <b>query.</b> The new terms are selected from documents that are relevant to the original <b>query</b> so that the expanded <b>query</b> can retrieve more relevant documents. More specifically, terms from the relevant documents are extracted along with some scores, and those with the highest scores are included in the expanded <b>query.</b>|$|R
40|$|Abstract: How {{to process}} twig <b>query</b> quickly and {{correctly}} has {{attracted much attention}} in research society recently. Filtering <b>query</b> irrelevant elements before <b>query</b> execution {{is an important step}} for reducing elements scanned at <b>query</b> processing. As a flattened structural index, F-Index is proposed to filter out all <b>query</b> irrelevant index nodes, thus <b>query</b> irrelevant elements can be filtered out rapidly and mostly, especially when it is processing deeply nested XML documents with a complex structure. After filtering, a new efficient <b>query</b> algorithm based on the remaining elements is proposed to accelerate <b>query</b> processing. Experimental results on various datasets indicate that twig <b>query’s</b> performance can be improved significantly by using F-Index. Key words: XML; <b>query</b> optimization; twig query; filtering; structural index 摘 要: 如何快速、有效地处 理 twig形式的查询 是 XML查询处理的关键问题,通过过滤与查询无关的元素可...|$|R
40|$|Abstract: In {{this paper}} a visual {{approach}} for the <b>query</b> interface on the spatial/temporal data is described, {{which is designed}} for the users who know nothing about <b>query</b> languages. Based on concept of elementary <b>query</b> and <b>query</b> operators, a complex spatial/temporal <b>query</b> could be built as a compound <b>query</b> which is broken down into several interactive iterations. In each of iterations, users just {{need to build a}} simple elementary <b>query</b> and select a <b>query</b> operator, which greatly reduces the mental load of users. To make <b>query</b> building more efficient, a novel approach based on the <b>query</b> pattern retrieving and matching is explained and used in the interface. An experimental prototype has been implemented to demonstrate the usability of the interface...|$|R
