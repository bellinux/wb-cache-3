2569|711|Public
5000|$|... the TCP state, read <b>queue</b> <b>length,</b> {{and write}} <b>queue</b> <b>length</b> of the file; ...|$|E
50|$|The {{adaptive}} RED or active RED (ARED) algorithm infers {{whether to}} make RED {{more or less}} aggressive based on the observation of the average <b>queue</b> <b>length.</b> If the average <b>queue</b> <b>length</b> oscillates around min threshold then early detection is too aggressive. On the other hand, if the average <b>queue</b> <b>length</b> oscillates around max threshold then early detection is being too conservative. The algorithm changes the probability according to how aggressively it senses it has been discarding traffic.|$|E
50|$|The {{evolution}} of the <b>queue</b> <b>length</b> process can also be written {{in the form of}} a Lindley equation.|$|E
3000|$|... : it is average <b>queuing</b> <b>length</b> matrix, {{of which}} the {{corresponding}} element is the average <b>queuing</b> <b>length</b> in CC [...]...|$|R
50|$|Typically it {{is assumed}} that the server visits the {{different}} queues in a cyclic manner. Exact results exist for waiting times, marginal <b>queue</b> <b>lengths</b> and joint <b>queue</b> <b>lengths</b> at polling epochs in certain models. Mean value analysis techniques can be applied to compute average quantities.|$|R
5000|$|Visualize {{and limit}} work-in-progress, reduce batch sizes, and manage <b>queue</b> <b>lengths</b> ...|$|R
5000|$|... {{on arrival}} to a queue, a {{positive}} customer acts as usual {{and increases the}} <b>queue</b> <b>length</b> by 1, ...|$|E
5000|$|... {{displays}} Processes with Disk Activity, Disk Activity and Storage; charts of Disk Usage (KB/sec) and Disk <b>Queue</b> <b>Length</b> ...|$|E
50|$|In {{queueing}} theory, {{a discipline}} within the mathematical theory of probability, the Pollaczek-Khinchine formula states {{a relationship between}} the <b>queue</b> <b>length</b> and service time distribution Laplace transforms for an M/G/1 queue (where jobs arrive according to a Poisson process and have general service time distribution). The term is also used to refer to the relationships between the mean <b>queue</b> <b>length</b> and mean waiting/service time in such a model.|$|E
40|$|Historically, work zone {{maintenance}} of traffic (MOT) {{plans have been}} deployed without a scalable and systematic means to assess congestion and make comparisons between modeled and actual <b>queue</b> <b>lengths</b> observed during construction. This session will discuss how commercial probe data {{can be used to}} estimate <b>queue</b> <b>lengths</b> and fuse that information with crash data...|$|R
30|$|The LQF-MWM {{promotes}} the minimization of both <b>queue</b> <b>lengths</b> and vehicles delay [1, 18].|$|R
40|$|In {{this paper}} {{martingale}} methods are applied for analyzing asymptotes of <b>queuing</b> <b>lengths</b> of servers. We consider closed Jackson networks {{consisting of a}} large number of customers, an infinite server, and several single servers. The servers with the lowest service rate are referred to as bottleneck servers. Arrival times and departure times for each sever are assumed to be exponentially distributed with constant mean. It is also assumed that there are several bottleneck single servers in the system. For the non-bottleneck servers we found the <b>queuing</b> <b>length</b> processes are always in a light usage regime. For the bottleneck servers we found the critical times which discern the <b>queuing</b> <b>length</b> processes in a heavy usage regime and in a light usage regime. We also show that the <b>queuing</b> <b>length</b> distributions at time t converge in weak sense to stationary distributions in the light usage regime. The Gaussian diffusion approximation are established for the heavy usage regime. Keywords: Bottlenec [...] ...|$|R
50|$|From the two {{equations}} above, we can {{infer that}} Mean <b>queue</b> <b>length</b> in M/M/1 queue is twice that in M/D/1 queue.|$|E
50|$|A {{stationary}} {{distribution for the}} number of customers in the queue and mean <b>queue</b> <b>length</b> can be computed using probability generating functions.|$|E
50|$|Some {{computer}} performance metrics, e.g. {{the average}} process <b>queue</b> <b>length,</b> or the average CPU utilization, use {{a form of}} exponential moving average.|$|E
40|$|Scheduling {{policies}} for statistical multiplexing should provide delay differentiation between different trafic classes, where each class represents an aggregate traffic of individual applications {{having the same}} target queueing delay requirements. we propose scheduling to optimally balance weighted <b>queue</b> <b>lengths</b> as an approach to delay differentiation, class weights being set inversely proportional to the respective products of target delays and packet arrival rates. We fomulate {{the problem in the}} framework of Markov decision theory, assuming a discrete-time, two-class, single server queueing model with unit service time per packet. We first find a scheduling policy based on weighted instantaneous <b>queue</b> <b>lengths,</b> for the case of Bernoulli packet arrivals, that minimizes the stationary mean of the absolute value of the difference of the weighted instantaneous <b>queue</b> <b>lengths.</b> We then find a scheduling policy based on weighted cumulative <b>queue</b> <b>lengths,</b> for the case of i. i. d. packet batch arrivals, that achieves target mean queueing delays in simulation...|$|R
40|$|In srudying the {{performance}} of a compUler communication system with many queues and an intellegently allocared resource, it was found mat cenain conditions regarding the state of the sySl. em could be used to formulate guidelines for assessing the behaviour of the resource. improv-ing resource utilization, and minimizing communication delay. In particular, if the resource based i[5 service-orienred decisions on me various <b>queue</b> <b>lengths.</b> it was critical to determine exactly when i[5 decisions were unbiased. lbis led to a series of problems, wim the first set inves-tigared here. We look for conditions under which a single resource (server) in a simple systcm will find <b>queue</b> <b>lengths</b> that are uniformly distributed (thus forcing the resource to be indifferent to <b>queue</b> <b>lengths).</b> In doing so, we present simple probabilistic proofs characterising a class of single-server queues (see [4]). Additionally, it is shown how a queue can be designed so that equilibrium <b>queue</b> <b>lengths</b> are partly (in a given range) uniformly disaibured. a design that was essential to the original communication problem. In cenain multiqueue systems, a resourceful server may decide on which queue to aucnd to next based on criteria mat may include!. he equilibrium <b>queue</b> <b>lengths</b> of some or all queues. Th...|$|R
3000|$|... is not infinity, {{then the}} <b>queue</b> <b>lengths</b> will not grow to infinity, which proves the {{stability}} of BA-MW-PCC.|$|R
5000|$|For example, a 15-minute average L of {{a process}} <b>queue</b> <b>length</b> Q, {{measured}} every 5 seconds (time difference is 5 seconds), is computed as ...|$|E
50|$|When {{a router}} wants to signal {{congestion}} to the sender, it adds {{a bit in}} the header of packets sent. When a packet arrives at the router, the router calculates the average <b>queue</b> <b>length</b> for the last (busy + idle) period plus the current busy period. (The router is busy when it is transmitting packets, and idle otherwise). When the average <b>queue</b> <b>length</b> exceeds 1, then the router sets the congestion indication bit in the packet header of arriving packets.|$|E
5000|$|From these variables, {{the average}} delay {{experienced}} by each vehicle {{and the average}} <b>queue</b> <b>length</b> at any time t can be calculated, using the following formulas: ...|$|E
5000|$|... 3. Finally, use little's law {{applied to}} each queue {{to compute the}} mean <b>queue</b> <b>lengths</b> for k = 1, ..., K ...|$|R
30|$|Our {{framework}} {{allows for}} user-defined timer events. Statistics for incoming/outgoing packet activity {{as well as}} <b>queue</b> <b>lengths</b> are all logged using counters. The NCRAWL logger periodically retrieves statistics and notifies the user at runtime about the flow stability and the corresponding <b>queue</b> <b>lengths.</b> The latter are also available {{for use in the}} NC algorithm if needed. Finally, the developer may also implement additional debugging support for inspecting the algorithm configuration at runtime using Clickâ€™s read handler.|$|R
30|$|In {{order to}} achieve optimal performance, the {{resource}} allocation should be updated at a sufficiently high rate, such that MW-PCC can adapt sufficiently fast {{to the evolution of}} the <b>queue</b> <b>lengths.</b> Since the arrival processes are modeled as random processes, the optimal update rate, should be chosen to correspond to the time duration, in which the random processes can be considered as stationary. In this way, the instantaneous <b>queue</b> <b>lengths</b> accurately represent the dynamic behavior of the arrival processes.|$|R
5000|$|The {{number of}} servers is fixed and the traffic {{intensity}} (utilization) is increased to 1 (from below). The <b>queue</b> <b>length</b> approximation is a reflected Brownian motion.|$|E
5000|$|Traffic {{intensity}} is fixed {{and the number}} of servers and arrival rate are increased to infinity. Here the <b>queue</b> <b>length</b> limit converges to the normal distribution.|$|E
5000|$|Regarding the {{recognition}} of an unwanted situation, Van Jacobson asserted in 2006 that existing algorithms have been using incorrect means of recognizing bufferbloat. [...] Algorithms like RED measure the average <b>queue</b> <b>length</b> and consider it a case of bufferbloat if the average grows too large. Jacobson demonstrated in 2006 that this measurement {{is not a good}} metric, as the average <b>queue</b> <b>length</b> rises sharply {{in the case of a}} communications burst. The queue can then dissipate quickly (good queue) or become a standing queue (bad queue). Other factors in network traffic can also cause false positives or negatives, causing countermeasures to be deployed unnecessarily. Jacobson suggested that average <b>queue</b> <b>length</b> actually contains no information at all about packet demand or network load. [...] He then suggested that a better metric might be the minimum amount of delay experienced by any packet in the sliding window of the buffer.|$|E
40|$|The {{scheduling}} at an ATM {{access point}} is modelled as a stochastic control problem and optimal scheduling policy is obtained for equalising input buffer contents {{in the case}} of two inputs with unequal arrival rates. The optimal policy is work conserving, and it serves the longer queue when the <b>queue</b> <b>lengths</b> are unequal and serves the queue with larger arrival rate when the <b>queue</b> <b>lengths</b> are equal. In the case of 0 - 1 arrival processes, some sample path wise results are obtained...|$|R
3000|$|... (t). Thus, the {{scheduler}} can {{be easily}} implemented by time stamping arriving data packets of all MSs, and/or {{keeping track of the}} corresponding <b>queue</b> <b>lengths.</b>|$|R
3000|$|... [...]). The {{left side}} of (22) is the {{long-term}} average of the <b>queue</b> <b>lengths,</b> i.e., the system delay. It is bounded by the constants [...]...|$|R
5000|$|To initialise, set Lk(0) = 0 for k = 1,...,K. (This {{sets the}} average <b>queue</b> <b>length</b> {{in a system}} with no {{customers}} to zero at all nodes.) ...|$|E
50|$|DVIs {{are useful}} for {{representing}} models involving both dynamics and inequality constraints. Examples of such problems include, for example, mechanical impact problems, electrical circuits with ideal diodes, Coulomb friction problems for contacting bodies, and dynamic economic and related problems such as dynamic traffic networks and networks of queues (where the constraints can either be upper limits on <b>queue</b> <b>length</b> or that the <b>queue</b> <b>length</b> cannot become negative). DVIs are related {{to a number of}} other concepts including differential inclusions, projected dynamical systems, evolutionary inequalities, and parabolic variational inequalities.|$|E
50|$|By {{providing}} endpoints with {{congestion indication}} before the queue is full, AQM disciplines {{are able to}} maintain a shorter <b>queue</b> <b>length</b> than drop-tail queues, which combats bufferbloat and reduces network latency.|$|E
3000|$|... (t). In this article, {{the time}} {{average of the}} total <b>queue</b> <b>lengths</b> of all users {{is used as a}} metric for the system delay performance: [...]...|$|R
40|$|We {{consider}} a single-server first-in-first-out queue fed by {{a finite number}} of distinct sources of jobs. For a large class of short-range dependent and light-tailed distributed job processes, using functional large deviation techniques we prove a large deviation principle and logarithmic asymptotics for the joint waiting time and <b>queue</b> <b>lengths</b> distribution. We identify the paths that are most likely to lead to the rare events of large waiting times and long <b>queue</b> <b>lengths.</b> A number of examples are presented to illustrate salient features of the results...|$|R
40|$|The paper {{describes}} a a novel methodology for estimating worst case <b>queue</b> <b>lengths</b> {{in real time}} communication networks of connected segments each of token bus type. A general non probabilistic traffic model is suggested, which {{is believed to be}} applicable even where a probabilistic model traditionally is the first choice, e. g. alerting and user interface handling. Completion time theory is provided justifying the correctness of an iterative estimation scheme for worst case <b>queue</b> <b>lengths,</b> and numerical results illustrating the virtues of the algorithm are presented...|$|R
