274|4982|Public
25|$|SDMI did {{not accept}} that Felten had {{successfully}} broken the watermark {{according to the rules}} of the contest, noting that there was a requirement for files to lose no sound quality. SDMI claimed that the automated judging result was inconclusive, as a submission which simply wiped all the sounds off the file would have successfully removed the watermark but would not meet the <b>quality</b> <b>requirement.</b>|$|E
2500|$|The {{degree of}} {{crosslinking}} (and hence {{the extent of}} the change) is different in intensity depending on the process. According to DIN 16892 (<b>quality</b> <b>requirement</b> for pipes made of PE-X) at least the following degree of crosslinking must be achieved: ...|$|E
2500|$|Using treated {{wastewater}} {{from the}} city, {{the garden is}} one of only a few installations in the United States that reuses wastewater for a water feature. [...] Even in the summer months, the garden does not draw on drinking water supplies, instead relying entirely on wastewater treatment plant effluent, which additionally irrigates [...] of farmland. [...] Until recently, such use was prohibited by state law, but the law was revised partly due to this water reclamation project. [...] The garden also provides wetland mitigation for a nearby industrial park to provide waterfowl and amphibian habitat, and offloads Silver Creek from water it would not naturally carry during low-flow months in the summer to address an Oregon Department of Environmental <b>Quality</b> <b>requirement.</b> [...] The wastewater receives final treatment on about [...] of the Oregon Garden where a series of 25 ponds perform three final filtering functions. [...] The end result is extremely high quality treated water.|$|E
40|$|Defining <b>quality</b> <b>requirements</b> {{completely}} and correctly {{is more difficult}} than defining functional requirements because stakeholders do not state most of <b>quality</b> <b>requirements</b> explicitly. We thus propose a method to measure a requirements specification for identifying the amount of <b>quality</b> <b>requirements</b> in the specification. We also propose another method to recommend <b>quality</b> <b>requirements</b> to be defined in such a specification. We expect stakeholders can identify missing and unnecessary <b>quality</b> <b>requirements</b> when measured <b>quality</b> <b>requirements</b> are different from recommended ones. We use a semi-formal language called X-JRDL to represent requirements specifications because it is suitable for analyzing <b>quality</b> <b>requirements.</b> We applied our methods to a requirements specification, and found our methods contribute to defining <b>quality</b> <b>requirements</b> more {{completely and}} correctly. ...|$|R
30|$|Software <b>quality</b> <b>requirements</b> {{are widely}} focused {{on in the}} field of software, and we can find a special {{magazine}} issue of IEEE Software published in 2008 (Blaine and Cleland-Huang 2008). In the issue, the importance and challenges of software <b>quality</b> <b>requirements</b> were summarized, and one of the challenges is measurement and traceability for software <b>quality</b> <b>requirements.</b> In this section, we briefly review research on this measurement and traceability to clarify the importance of software <b>quality</b> <b>requirements.</b> We use non-functional requirements (NFRs) as a synonym for <b>quality</b> <b>requirements</b> even though NFR contains more things than do <b>quality</b> <b>requirements</b> (Blaine and Cleland-Huang 2008; Glinz 2008).|$|R
3000|$|Finally, we briefly review {{research}} on measuring <b>quality</b> <b>requirements.</b> One famous catalog for software <b>quality</b> <b>requirements</b> is the ISO 9126 standard (International Standard ISO/IEC 9126 - 1 2001 [...]...|$|R
5000|$|Is there a <b>quality</b> <b>requirement?</b> Is {{the nature}} of the {{solution}} critical? Are there technical or rational grounds for selecting among possible solutions? ...|$|E
50|$|Along {{important}} listed rail routes (TEN-T), {{the railway}} shall be of high speed type, either when new parts are built, or when upgrades are made. This creates a <b>quality</b> <b>requirement</b> on these projects.|$|E
50|$|The term itself means 'The Real Baker', and, {{according}} to the organization, members must meet a minimum <b>quality</b> <b>requirement.</b> It is financially supported by franchising, and by sales of its distinctive cake-tins and children's books.|$|E
3000|$|... [...]), {{but how to}} {{establish}} relationships between <b>quality</b> <b>requirements</b> (a <b>quality</b> feature in the study) is not explained in the study. Because <b>quality</b> <b>requirements</b> qualify functional requirements, measuring and predicting <b>quality</b> <b>requirements</b> {{on the basis of}} the content of each functional requirement is a natural idea. Kaiya et al. developed such an idea by using semi-formal functional requirement notation (Kaiya and Ohnishi [...]...|$|R
30|$|In {{the same}} way as {{functional}} <b>requirements,</b> <b>quality</b> <b>requirements,</b> such as security, usability, reliability, and efficiency should be defined at the requirements definition stage because these requirements are the dominant factor in development costs and efforts. How to define <b>quality</b> <b>requirements</b> completely and correctly is thus well studied (Kaiya et al. 2010 a; Firesmith 2005; Zhang et al. 2008). However, we have no standard ways to confirm such <b>quality</b> <b>requirements</b> are adapted in upcoming software artifacts such as design documents or test cases. For functional requirements, traditional stepwise refinement techniques can be used for this purpose. At the last stage of software development, we can confirm whether <b>quality</b> <b>requirements</b> are adapted and implemented through testing. It is, however, too late to find incorrect or missing <b>quality</b> <b>requirements</b> in software implementation at this stage because the design and/or codes would need to be revised. We thus have to develop a method for validating <b>quality</b> <b>requirements</b> considerations in intermediate software artifacts, such as design documents.|$|R
40|$|Requirements {{prioritization}} {{is recognized}} as an important but challenging activity in software product development. For a product to be successful, {{it is crucial to}} find the right balance among competing <b>quality</b> <b>requirements.</b> Although literature offers many methods for requirements prioritization, the research on prioritization of <b>quality</b> <b>requirements</b> is limited. This study identifies how <b>quality</b> <b>requirements</b> are prioritized in practice at 11 successful companies developing software intensive systems. We found that ad-hoc prioritization and priority grouping of requirements are the dominant methods for prioritizing <b>quality</b> <b>requirements.</b> The results also show that it is common to use customer input as criteria for prioritization but absence of any criteria was also common. The results suggests that <b>quality</b> <b>requirements</b> by default have a lower priority than functional requirements, and that they only get attention in the prioritizing process if decision-makers are dedicated to invest specific time and resources on QR prioritization. The results of this study may help future research on <b>quality</b> <b>requirements</b> to focus investigations on industry-relevant issues...|$|R
5000|$|The {{degree of}} {{crosslinking}} (and hence {{the extent of}} the change) is different in intensity depending on the process. According to DIN 16892 (<b>quality</b> <b>requirement</b> for pipes made of PE-X) at least the following degree of crosslinking must be achieved: ...|$|E
5000|$|... atarimae hinshitsu　（当たり前品質） - The {{idea that}} things will work as they are {{supposed}} to (e.g. a pen will write). The functional requirement actually. For example, a wall or flooring in a house have functional parts in the house as a product; when the functionality is met, the [...] "atarimae" [...] <b>quality</b> <b>requirement</b> is met.|$|E
5000|$|The active {{chilled beam}} system employs fins to help heat and cool. Active chilled beam systems are {{effective}} {{to the point}} where outdoor air can be mixed with the indoor air without any traditional air conditioning (such as heating, cooling, humidifying, or dehumidifying), thus enabling a building to meet its [...] "minimum outdoor air" [...] air <b>quality</b> <b>requirement.</b>|$|E
40|$|Software product {{development}} companies experience different challenges in managing <b>quality</b> <b>requirements</b> compared to functional requirements. In this context, <b>quality</b> <b>requirements</b> {{are defined as}} requirements that describe a restriction on the system, and specify how well the system performs its functions. In a market–driven development context with large markets, potential customers, and strong competitors push the software {{product development}} companies to release the software product to a certain market segment {{at the right time}} with higher level of quality than the competitors. This thesis focuses on techniques and methods that support software product development companies that release their product to an open market. The goals are to find means to improve the ability to make early estimates of <b>quality</b> <b>requirements</b> with adequate accuracy, such as performance, in order to enhance high–level decision–making. This thesis is based on empirical research, including both quantitative and qualitative research design. The research results include a systematic literature review of empirical studies on <b>quality</b> <b>requirements,</b> which presents the state of research. The results show that there is a gap in the research literature of how cost estimation of <b>quality</b> <b>requirements</b> is conducted. How <b>quality</b> <b>requirements</b> are handled in practice is discovered and described in a survey in requirements engineering for embedded systems. From the survey, issues emerge such as when the quality level is good enough, and how to get <b>quality</b> <b>requirements</b> into projects when functional requirements are prioritized. A case study within the embedded software domain investigates how <b>quality</b> <b>requirements</b> metrics are used in an industrial context, which concludes that for a method to be successful, it is important that it is flexible enough to handle the diverse nature of <b>quality</b> <b>requirements.</b> Finally, a model for cost–benefit analysis of <b>quality</b> <b>requirements,</b> called QUPER, was set into operation in a case study. The intent was to evaluate and improve the model for supporting <b>requirements</b> prioritization and <b>quality</b> <b>requirements</b> roadmapping at early stages of release planning...|$|R
40|$|ABSTRACT {{not taken}} into account {{properly}} [13]. In fact, there As the degree of compliance of <b>quality</b> <b>requirements</b> mainly induces the acceptance and success of a system, special emphasis should be laid on the elicitation, specification and validation of <b>quality</b> <b>requirements.</b> Current requirements definition methods, however, mainly focus on objects, functions, and states. This paper emphasizes <b>quality</b> <b>requirements</b> and their integration into the system development process. Based on a faceted and adaptable classification approach, a framework to manage <b>quality</b> <b>requirements</b> will be proposed. Prospective effects improving not only {{the quality of the}} elicited requirements and their compliances but also the quality of the software development process itself will be discussed...|$|R
40|$|Abstract. Context & motivation: In market-driven {{software}} development it is crucial, but challenging, {{to find the}} right balance among competing <b>quality</b> <b>requirements</b> (QR). Problem: In order to identify the unique challenges associated with the selection, trade-off, and management of <b>quality</b> <b>requirements</b> an interview study is performed. Results: This paper describes how QR are handled in practice. Data is collected through interviews with five product managers and five project leaders from five software companies. Contribution: The contribution of this study is threefold: Firstly, it includes an examination of the interdependencies among <b>quality</b> <b>requirements</b> perceived as most important by the practitioners. Secondly, it compares the perceptions and priorities of <b>quality</b> <b>requirements</b> by product management and project management respectively. Thirdly, it characterizes the selection and management of <b>quality</b> <b>requirements</b> in down-stream development activities...|$|R
50|$|SDMI did {{not accept}} that Felten had {{successfully}} broken the watermark {{according to the rules}} of the contest, noting that there was a requirement for files to lose no sound quality. SDMI claimed that the automated judging result was inconclusive, as a submission which simply wiped all the sounds off the file would have successfully removed the watermark but would not meet the <b>quality</b> <b>requirement.</b>|$|E
50|$|Paula Risikko is Doctor of Science (Health Care) in 1997 {{from the}} University of Tampere. Her {{dissertation}} was entitled “The {{current and future}} <b>quality</b> <b>requirement</b> in nursery”. Risikko has received Honorary Doctorate from the University of Vaasa. She is {{taking a break from}} her regular position as the Vice Rector of the Seinäjoki University of Applied Sciences, because her involvement in politics. In 2007 parliamentary elections, Risikko received 9 266 votes.|$|E
5000|$|Without {{modification}} Ruppert's {{algorithm is}} guaranteed to terminate and generate a quality mesh for non-acute input and any poor-quality threshold less than about 20.7 degrees. To relax these restrictions various small improvements have been made. By relaxing the <b>quality</b> <b>requirement</b> near small input angles, the algorithm can be extended to handle any straight-line input. [...] Curved input can also be meshed using similar techniques.Ruppert's algorithm can be naturally extended to three dimensions, however its output guarantees are somewhat weaker due to the sliver type tetrahedron.|$|E
30|$|The {{following}} discusses {{evidence that}} the target solution support specific SOA related <b>quality</b> <b>requirements.</b> The <b>quality</b> <b>requirements</b> selected include (i) interoperability capabilities, (ii) autonomic composition of services, (iii) QoS-aware service compositions and (iv) business-driven automated composition.|$|R
40|$|An {{autonomic}} {{system is}} essentially characterized by <b>quality</b> <b>requirements</b> that specify {{that the system}} {{should be able to}} adapt itself (configure, optimize, heal, etc.) under varying circumstances and situations. These <b>quality</b> <b>requirements</b> call for an architecture centric software engineering approach. In this paper, we discuss and illustrate the architectural design of a complex real-world distributed application with autonomic <b>quality</b> <b>requirements.</b> In particular, we present an architecture with autonomous entities (agents) for managing warehouse logistics. We illustrate how the subsequent architectural decisions are guided by a reference architecture for situated multi-agent systems on the one hand, and by functional and <b>quality</b> <b>requirements</b> of the application on the other hand. 1...|$|R
40|$|Architectural design plays a {{key role}} in {{mainstream}} software engineering. The software architecture is the backbone of the designed solution, it meets the functional requirements of the system and aims to satisfy the essential <b>quality</b> <b>requirements.</b> An autonomic system is essentially characterized by <b>quality</b> <b>requirements</b> that specify that the system should be able to adapt (manage, configure, heal) itself under varying circumstances and situations. These <b>quality</b> <b>requirements</b> call for an architecture-centric software engineering approach...|$|R
5000|$|Advanced {{product quality}} {{planning}} {{is a process}} developed in the late 1980s by a commission of experts gathered around 'Big Three' US automobile industry: Ford, GM and Chrysler. Representatives from the three automotive original equipment manufacturers (OEMs) and the Automotive Division of American Society for Quality Control (ASQC)* created the Supplier <b>Quality</b> <b>Requirement</b> Task Force for developing a common understanding on topics of mutual interest within the automotive industry. [...] *NOTE: The ASQC has {{changed its name to}} the ASQ (American Society for Quality) to better represent the scope of its work.|$|E
5000|$|Using treated {{wastewater}} {{from the}} city, {{the garden is}} one of only a few installations in the United States that reuses wastewater for a water feature. [...] Even in the summer months, the garden does not draw on drinking water supplies, instead relying entirely on wastewater treatment plant effluent, which additionally irrigates 240 acre of farmland. Until recently, such use was prohibited by state law, but the law was revised partly due to this water reclamation project. The garden also provides wetland mitigation for a nearby industrial park to provide waterfowl and amphibian habitat, and offloads Silver Creek from water it would not naturally carry during low-flow months in the summer to address an Oregon Department of Environmental <b>Quality</b> <b>requirement.</b> The wastewater receives final treatment on about 16 acre of the Oregon Garden where a series of 25 ponds perform three final filtering functions. The end result is extremely high quality treated water.|$|E
3000|$|... [...]). They {{used the}} {{technique}} to identify domain specific commonality by directly comparing one spectrum {{of a system}} to another. Whether a requirement is related to a <b>quality</b> <b>requirement</b> is decided {{on the basis of}} the occurrences of terms, which characterize the <b>quality</b> <b>requirement</b> in the study. Measuring quality requirements is used for prioritizing requirements (Otero et al.|$|E
40|$|This paper {{discusses}} the historical {{development of the}} study of flying qualities and the evolution of flying <b>qualities</b> <b>requirements.</b> Subjects considered include the scope of flying qualities, early historical development of flying qualities, research on flying <b>qualities</b> <b>requirements,</b> human response characteristics, command control systems, gust response and its relation to flying qualities, prediction of flying qualities, discussion of the Space Shuttle and of some recent airplanes, and format of the flying <b>qualities</b> <b>requirements...</b>|$|R
40|$|Abstract—Applying {{software}} architecture patterns in architecture design {{is an important}} way to construct high quality design of {{software architecture}}. Meanwhile, the selection of architecture patterns has a close relationship to the <b>quality</b> <b>requirements</b> of software systems to be developed. Applying a specific architecture pattern can usually address several <b>quality</b> <b>requirements,</b> and further optimize architecture design. In this paper, we review existing recommendation methods of architecture patterns based on <b>quality</b> <b>requirements,</b> then analyze and verify the validity of a recommendation method through a replicated experiment in software engineering. The result of this work provides architects a verified method to select suitable architecture patterns based on <b>quality</b> <b>requirements.</b> Keywords—software architecture; <b>quality</b> requirement; architecture pattern; architecture tactic; experimental replication I...|$|R
30|$|Software <b>quality</b> <b>{{requirements}}</b> {{defined in}} the requirements analysis stage should be implemented in the final products, such as source codes and system deployment. To guarantee this meta-requirement, <b>quality</b> <b>requirements</b> {{should be considered in}} the intermediate stages, such as the design stage or the architectural definition stage. We propose a novel method for checking whether <b>quality</b> <b>requirements</b> are considered in the design stage. In this method, a technique called “spectrum analysis for quality requirements” is applied not only to requirements specifications but also to design documents. The technique enables us to derive the spectrum of a document, and <b>quality</b> <b>requirements</b> considerations in the document are numerically represented in the spectrum. We can thus objectively identify whether the considerations of <b>quality</b> <b>requirements</b> in a requirements document are adapted to its design document. To validate the method, we applied it to commercial software systems {{with the help of a}} supporting tool, and we confirmed that the method worked well.|$|R
40|$|For {{a purpose}} of {{suitable}} system product development and acquisition successfully, {{it is extremely}} important to specify the <b>quality</b> <b>requirement</b> for target system during system design phase, and developing or selecting a most suitable product finally from among the alternative candidate products. However, the quality requirements analysis {{is a very difficult}} matter because it is non-formulaic and demands much of product customer’s technical perceptiveness. Traditionally, analysis of quality requirements of a product has been conducted through questionnaires or interviews with customers based on survey investigator’s personal experience. This kind of lack of structure and incompleteness in the traditional approach introduced missing requirements and errors in prioritizing requirements to implement in the requirement analysis of a product. On the other hand, we have been working on developing the techniques (SQuaRE) for quality requirements and evaluation for system and software product {{for a long time in}} ISO/IECJTC 1 /SC 7 WG 6. F or the purpose of specify the <b>quality</b> <b>requirement</b> of system product, the method of quantitative <b>quality</b> <b>requirement</b> definitions based on ISO/IEC 9126 [1] quality model that includes six characteristics is widely recognized. However, independency among each quality characteristic is not sure and the suitability of method by using these six quality characteristics for <b>quality</b> <b>requirement</b> is not certified statistically. In this paper, we propose the concept of quality requirements definition method based on the SQuaRE quality models define in ISO/IEC 25030 [2, 3]. Also, this paper proposes the result of verification about effectiveness of quantitative <b>quality</b> <b>requirement</b> definition approach from the view point of six quality characteristics described in ISO/IEC 9126. </p...|$|E
30|$|We can {{maintain}} the traceability {{links between the}} power of a <b>quality</b> <b>requirement</b> in a spectrum and requirements because the power is derived from the requirements. For example in Figure 1, the power of resource efficiency is derived from requirements # 1, # 2 and # 3. When we want to know the reasons for the differences between two spectra, we simply trace the links mentioned above. The spectrum analysis for quality requirements only focuses on the type of quality requirements. It cannot handle the value and/or level of quality requirements. For example, it can detect whether a <b>quality</b> <b>requirement</b> related to resource efficiency is considered in a document. An example of such a <b>quality</b> <b>requirement</b> is “the number of users.” However, it cannot decide whether the number itself (e.g., 10, 100 or 10000 people) is correctly considered in a document. For this kind of decision on the value/level of quality requirements, specific methods are required for each type of quality requirements. This is one of the limitations of our spectrum analysis.|$|E
3000|$|... 0), denoted as γ, above a threshold. The {{radio link}} <b>quality</b> <b>requirement</b> {{will depend on}} the {{multipath}} conditions, UE speed, and block error rate required for each type of connection (see [3] and [21] for more details).|$|E
30|$|As of today, <b>quality</b> <b>requirements</b> {{for various}} usage {{scenarios}} are implemented by {{rule of thumb}} rather than quantitative criteria. Not matching the <b>quality</b> <b>requirements</b> may lead either to high costs (for processing and storage if the digital object is larger than necessary) or poor results (for automated media analysis like OCR, long-term preservation or reproduction). Thus, automated tools will lower the costs by greatly improving the degree of automation as well as lowering the efforts to implement the content owner's <b>quality</b> <b>requirements.</b>|$|R
40|$|M. Ing. (Engineering Management) Requirements {{engineering}} {{forms an}} integral part of software engineering. The purpose of requirements engineering is to provide high <b>quality</b> <b>requirements</b> for a system or solution. These requirements are then utilised by developers to produce a high quality system. They also assist project managers to better plan the schedule and costing of information technology projects, resultinq in cost savinqs. The problem is that although formal definitions and processes do exist for requirements engineering, projects are still failing due to the poor <b>quality</b> of <b>requirements,</b> This study investigates this phenomenon, in particular to understand why project teams cannot deliver high <b>quality</b> <b>requirements.</b> This is done against the background of the processes and standards available to organisations. The root cause of the problem is researched to determine whether the processes are the cause or whether other factors are contributing to poor <b>quality</b> <b>requirements.</b> This study makes use of two cases within one organisation to determine what the contributing factors are with regard to poor and good <b>quality</b> <b>requirements.</b> The cases provide information on why one project delivered good <b>quality</b> <b>requirements</b> and another project within same organisation, the same business unit, with the same support structure, delivered poor <b>quality</b> <b>requirements.</b> It is perceived that the case study method was a valid method in this particular research study as it provided the researcher with in-depth knowledge and observations on how organisations deal with the process of requirements engineering. It was found that the quality and clarity of communication or the lack thereof plays {{a significant role in the}} <b>quality</b> of <b>requirements.</b> This research provides an alternative view on the factors contributing towards poor <b>quality</b> <b>requirements.</b> This implies that organisations can train or educate requirements engineers in communication skills. The skill of communication allows a requirements engineer to create a trust relationship with customers, and this empowers him/her to elicit good <b>quality</b> <b>requirements</b> from the users...|$|R
40|$|<b>Quality</b> <b>requirements,</b> {{that form}} a major {{sub-category}} of requirements, define a broad set system-wide attributes such as security, performance, usability and scalability. Unfortunately, many organizations pay {{less attention to}} <b>quality</b> <b>requirements</b> & assume that the necessary qualities are implicitly understood & will naturally emerge as the product is developed. In this paper, we would try to address important questions related to role of <b>quality</b> <b>requirements</b> in the software development lifecycle, and techniques for managing them effectively. Also, we would find out as to what happens when requirements are not managed? and suggest some practices to write <b>quality</b> <b>requirements.</b> The purpose {{is to make the}} community specifying the requirements understand requirements defects that {{have been made in the}} past. Hopefully, it also helps to avoid similar mistakes in the future...|$|R
