1129|218|Public
5|$|This <b>quadtree</b> {{method is}} more general, as it works even for {{clustering}} methods {{that are not}} reducible. However, the nearest-neighbor chain algorithm matches its time and space bounds while using simpler data structures.|$|E
50|$|Split-and-merge {{segmentation}} {{is based}} on a <b>quadtree</b> partition of an image. It is sometimes called <b>quadtree</b> segmentation.|$|E
50|$|The {{polygonal}} map <b>quadtree</b> (or PM <b>Quadtree)</b> is {{a variation}} of <b>quadtree</b> {{which is used to}} store collections of polygons that may be degenerate (meaning that they have isolated vertices or edges). A big difference between PM quadtrees and edge quadtrees is that the cell under consideration is not subdivided if the segments meet at a vertex in the cell.|$|E
40|$|We {{describe}} simple linear time algorithms for coloring {{the squares}} of balanced and unbalanced <b>quadtrees</b> {{so that no}} two adjacent squares are given the same color. If squares sharing sides are defined as adjacent, we color balanced <b>quadtrees</b> with three colors, and unbalanced <b>quadtrees</b> with four colors; these results are both tight, as some <b>quadtrees</b> require this many colors. If squares sharing corners are defined as adjacent, we color balanced or unbalanced <b>quadtrees</b> with six colors; for some <b>quadtrees,</b> at least five colors are required. ...|$|R
50|$|There {{are three}} main classes of PM <b>Quadtrees,</b> which vary {{depending}} on what information they store within each black node. PM3 <b>quadtrees</b> can store any amount of non-intersecting edges and at most one point. PM2 <b>quadtrees</b> {{are the same as}} PM3 <b>quadtrees</b> except that all edges must share the same end point. Finally PM1 <b>quadtrees</b> are similar to PM2, but black nodes can contain a point and its edges or just a set of edges that share a point, but you cannot have a point and a set of edges that do not contain the point.|$|R
50|$|<b>Quadtrees</b> may be {{classified}} {{according to the}} type of data they represent, including areas, points, lines and curves. <b>Quadtrees</b> may also {{be classified}} by whether the shape of the tree is independent of the order in which data is processed. The following are common types of <b>quadtrees.</b>|$|R
5000|$|The Z-ordering {{can be used}} to {{efficiently}} build a <b>quadtree</b> for a set of points. [...] The {{basic idea}} is to sort the input set according to Z-order. Once sorted, the points can either be stored in a binary search tree and used directly, which is called a linear <b>quadtree,</b> or they {{can be used to}} build a pointer based <b>quadtree.</b>|$|E
5000|$|Point-region (PR) quadtrees {{are very}} similar to region quadtrees. The {{difference}} is the type of information stored about the cells. In a region <b>quadtree,</b> a uniform value is stored that applies to the entire area of the cell of a leaf. The cells of a PR <b>quadtree,</b> however, store a list of points that exist within the cell of a leaf. As mentioned previously, for trees following this decomposition strategy the height depends on the spatial distribution of the points. Like the point <b>quadtree,</b> the PR <b>quadtree</b> may also have a linear height when given a [...] "bad" [...] set.|$|E
50|$|A region <b>quadtree</b> {{may also}} be used as a {{variable}} resolution representation of a data field. For example, the temperatures in an area may be stored as a <b>quadtree,</b> with each leaf node storing the average temperature over the subregion it represents.|$|E
50|$|Edge <b>quadtrees</b> (much like PM <b>quadtrees)</b> {{are used}} to store lines rather than points. Curves are {{approximated}} by subdividing cells to a very fine resolution, specifically {{until there is a}} single line segment per cell. Near corners/vertices, edge <b>quadtrees</b> will continue dividing until they reach their maximum level of decomposition. This can result in extremely unbalanced trees which may defeat the purpose of indexing.|$|R
40|$|There {{has been}} recent {{interest}} {{in the use of}} <b>quadtrees</b> to represent regions in an image. It thus becomes desirable to develop efficient methods of conversion between <b>quadtrees</b> and other types of region representations. This paper presents an algorithm for converting from <b>quadtrees</b> to a simple class of boundary codes. The algorithm is shown to have an execution time proportional to the perimeter of the region...|$|R
40|$|AbstractWe {{present a}} {{parallel}} study of three variants {{of the notion}} of multidimensional quadtrees: <b>quadtrees</b> of Catalan's type, increasing <b>quadtrees,</b> and point <b>quadtrees.</b> Using the language of the theory of species, we present for these models of tree-like structures some combinatorial equations that lead, for example, to several explicit, recursive or asymptotic formulas for the probability of having k nodes in a fixed hyperoctant, the expected value and the variance of the number of leaves...|$|R
5000|$|For each {{adjacent}} pair of points, the derived square is computed and {{its side}} length determined. For each derived square, the interval containing it is bounded {{by the first}} larger square {{to the right and}} to the left in sorted order. [...] Each such interval corresponds to a square in the <b>quadtree.</b> The result of this is a compressed <b>quadtree,</b> where only nodes containing input points or two or more children are present. A non-compressed <b>quadtree</b> can be built by restoring the missing nodes, if desired.|$|E
50|$|The {{algorithm}} uses shifted quadtrees. The key {{concept of}} the algorithm is alignment to the <b>quadtree</b> grid. An object of size r is called k-aligned (where k ≥ 1 is a constant) if it is inside a <b>quadtree</b> cell of size at most kr (R ≤ kr).|$|E
50|$|To {{simplify the}} discussion, let us assume the {{children}} of a node in the <b>quadtree</b> follow the Z-order (SW, NW, SE, NE). Since we can count on this structure, for any cell {{we know how to}} navigate the <b>quadtree</b> to find the adjacent cells in the different levels of the hierarchy.|$|E
5000|$|<b>Quadtrees</b> {{are also}} used {{in the area of}} fractal image {{analysis}} ...|$|R
40|$|We {{propose a}} simple direct {{approach}} for computing the expected cost of random partial match queries in random <b>quadtrees.</b> The approach gives {{not only an}} explicit expression for the leading constant in the asymptotic approximation of the expected cost but also more terms in the asymptotic expansion if desired. Key words. <b>Quadtrees,</b> partial match queries, binomial transform, Mellin transform, Euler transform, Rice's integral...|$|R
40|$|This project {{examines}} {{methods for}} generating and populating a virtual terrain. The current standard for displaying terrains utilises realtime adapting <b>quadtrees.</b> <b>Quadtrees</b> do not suit densely populated terrains {{which has led}} to my development of a realtime adapting block based on a regular grid. The adapting block uses a mipmap style hierarchy of height mapped grids for diminishing levels of detail...|$|R
5000|$|... #Caption: A point <b>quadtree</b> with point data. Bucket {{capacity}} 1.|$|E
5000|$|Index (database), <b>Quadtree,</b> Kd-tree, UB-tree, R-tree, range tree as alternatives.|$|E
5000|$|The tree {{directory}} {{follows the}} spatial decomposition of the <b>quadtree.</b>|$|E
40|$|Abstract – The paper {{proposed}} combining traditional <b>quadtrees</b> and framed-quadtrees {{with the}} shunting equation based {{neural network model}} to improve the efficiency of path planning. The introduction of <b>quadtrees</b> is used for improving {{the efficiency of the}} trajectory generation and enlarging the representation capability of maps, especially in sparse environments. And the introduction of framed-quadtree is used for the generation of Euclidean shortest paths. The introduction of <b>quadtrees</b> and framed-quadtrees does not change the structure of the neural network model based on the shunting model; so the stability and the convergence of the neural network were reserved. And the feature that a map can be represented by <b>quadtrees</b> with multi-resolution was betaken to simplify the selection of parameters in the neural network model. Theoretical analyses and Simulation studies of the proposed method were done to demonstrate following conclusions: the Euclidean shortest paths can be generated without collision and without much computational complexity; the improved neural network method does not suffer from undesired local minima; the proposed method can generate shorter collision free trajectory and has bigger representation capabilities of maps...|$|R
5000|$|... #Caption: The {{method of}} [...] for {{combining}} circle packings and <b>quadtrees</b> to achieve bounded slope number for planar graphs with bounded degree ...|$|R
40|$|<b>Quadtrees</b> {{have proved}} popular in {{computer}} graphics and spatial databases {{as a way}} of representing regions in two dimensional space. This hierarchical data-structure is flexible enough to support non-convex and even disconnected regions, therefore it is natural to ask whether this data-structure can form the basis of an abstract domain. This paper explores this question and suggests that <b>quadtrees</b> offer a new approach to weakly relation domains whilst their hierarchical structure naturally lends itself to representation with boolean functions...|$|R
5000|$|Therefore, if {{all objects}} are fat and k-aligned, it is {{possible}} to find the exact maximum disjoint set in time nO(kc) using a divide-and-conquer algorithm. Start with a <b>quadtree</b> cell that contains all objects. Then recursively divide it to smaller <b>quadtree</b> cells, find the maximum in each smaller cell, and combine the results to get the maximum in the larger cell. Since the number of disjoint fat objects intersecting the boundary of every <b>quadtree</b> cell is bounded by 4kc, we can simply [...] "guess" [...] which objects intersect the boundary in the optimal solution, and then apply divide-and-conquer to the objects inside.|$|E
5000|$|Purely {{functional}} data structure, {{of which}} the hashed <b>quadtree</b> is one ...|$|E
5000|$|...qix — an {{alternative}} <b>quadtree</b> spatial index used by MapServer and GDAL/OGR software ...|$|E
40|$|<b>Quadtrees</b> and octrees {{are used}} {{extensively}} throughout computer graphics {{and in many}} other diverse fields such as computer vision, robotics, and pattern recognition. Managing information stored in <b>quadtrees</b> and octrees requires basic tree traversal operations such as point location, region location, and neighbor searches. This paper presents simple and efficient methods for performing these operations that are inherently nonrecursive and {{reduce the number of}} comparisons with poor predictive behavior. The methods are table-free, thereby reducing memory accesses, and generalize easily to higher dimensions...|$|R
50|$|One of the {{advantages}} of using <b>quadtrees</b> for image manipulation is that the set operations of union and intersection can be done simply and quickly.|$|R
40|$|Abstract. <b>Quadtrees</b> and octrees {{are used}} {{extensively}} throughout computer graphics {{and in many}} other diverse fields such as computer vision, robotics, and pattern recognition. Managing information stored in <b>quadtrees</b> and octrees requires basic tree traversal operations such as point location, region location, and neighbor searches. This paper presents simple and efficient methods for performing these operations that are inherently non-recursive and {{reduce the number of}} comparisons with poor predictive behavior. The methods are table-free, thereby reducing memory accesses, and generalize easily to higher dimensions. 1...|$|R
5000|$|While this {{algorithm}} works, it {{does not}} by itself guarantee a minimally sized <b>quadtree.</b> For example, consider the result {{if we were to}} union a checkerboard (where every tile is a pixel) of size [...] with its complement. The result is a giant black square which should be represented by a <b>quadtree</b> with just the root node (coloured black), but instead the algorithm produces a full 4-ary tree of depth [...] To fix this, we perform a bottom-up traversal of the resulting <b>quadtree</b> where we check if the four children nodes have the same colour, in which case we replace their parent with a leaf of the same colour.|$|E
50|$|The {{following}} method inserts a point {{into the}} appropriate quad of a <b>quadtree,</b> splitting if necessary.|$|E
5000|$|Consider {{the cell}} [...] and the [...] {{neighbourhood}} of same-sized cells centred at [...] We call this neighbourhood the extended cluster. We say the <b>quadtree</b> is well-balanced {{if it is}} balanced, and for every leaf [...] that contains a point of the point set, its extended cluster {{is also in the}} <b>quadtree</b> and the extended cluster contains no other point of the point set.|$|E
50|$|This PTAS is more space-efficient {{than the}} PTAS based on <b>quadtrees,</b> and {{can handle a}} {{generalization}} where the objects may slide, but it cannot handle the weighted case.|$|R
40|$|AbstractSome results {{about the}} size of <b>quadtrees</b> and linear <b>quadtrees,</b> used to {{represent}} binary 2 n × 2 n digital pictures, are generalized to d-dimensional 2 n × … × 2 n pictures. Among these results are a comparison of the space-efficiency of linear vs regular trees, in terms of both the number of nodes of the tree and the number of bits needed to store each node, and an upper bound on the number of nodes as a function of n and the perimeter of the picture...|$|R
40|$|In this paper, the {{efficient}} manipulation of thematic maps that contain multiple non-overlapping features is investi-gated. New methods based on Linear <b>quadtrees</b> are pro-posed and their performance {{is compared to}} that of similar structures. More specifically, window queries involving mul-tiple features are described and tested having the number of disk accesses as a performance measure. Experimentally, it is shown that the proposed methods have a stable behav-ior and, in general, outperform the previous structures with respect to time and space complexity. Keywords spatial databases, region <b>quadtrees,</b> multiple features, su-perimposed bitstrings, window queries 1...|$|R
