111|152|Public
5000|$|... (1) More personalization. Community detection/discovery often {{uses the}} same global {{criterion}} to decide whether a subgraph qualifies as a community. In other words, the criterion is fixed and predetermined. But in reality, communities for different vertices may have very different characteristics. Moreover, community search allows the query users to specify more personalized <b>query</b> <b>conditions.</b> In addition, the personalized <b>query</b> <b>conditions</b> enable the communities to be interpreted easily.|$|E
50|$|An {{expression}} index, {{also known}} as a function based index, is a database index that is built on a generic expression, rather than one or more columns. This allows indexes to be defined for common <b>query</b> <b>conditions</b> that depend on data in a table, but are not actually stored in that table.|$|E
40|$|Abstract: The Structured Query Language (SQL) {{has been}} {{established}} as a standard for querying relational databases. However, users face the problem how to define their requirements for data by the exact <b>query</b> <b>conditions.</b> This work examines advantages of fuzzy queries, which provide a better representation of the user requirements by expressing imprecise conditions through linguistic terms. Further, the paper discusses solving empty and overabundant answer problems, revealing similarities in database entities and applying preferences in <b>query</b> <b>conditions.</b> Finally, paper discusses practical realisations of fuzzy queries...|$|E
30|$|Inverse {{queries are}} useful when a {{decision}} maker {{needs to know}} the lower/upper bounds of some environmental and/or meteorological-climatic parameters (pn) that may trigger a given susceptibility/hazard or risk level. In this case {{the result of a}} query is a summary of the parameter maps that generated the top ranked map that best satisfies the <b>query</b> <b>condition.</b>|$|R
40|$|As {{information}} {{becomes available}} in increasing {{amounts to a}} wide spectrum of users, the need for a shift towards a more user-centered information access paradigm arises. We develop a personalization framework for database systems based on user profiles and identify the basic architectural modules required to support it. We define a preference model that assigns to each atomic <b>query</b> <b>condition</b> a personal degree of interest and provide a mechanism to compute the degree of interest in any complex <b>query</b> <b>condition</b> based on the degrees of interest in the constituent atomic ones. Preferences are stored in profiles. At query time, personalization proceeds in two steps: (a) preference selection and (b) preference integration into the original user query. We formulate the main personalization step, i. e. preference selection, as a graph computation problem and provide an efficient algorithm for it. We also discuss results of experimentation with a prototype query personalization system. 1...|$|R
40|$|When {{similarity}} queries over multimedia databases {{are processed}} by splitting the overall <b>query</b> <b>condition</b> into {{a set of}} sub-queries, {{the problem of how}} to e#ciently and e#ectively integrate the sub-queries' results arises. The common approach is to use a (monotone) scoring function, like min and average, to compute an overall similarity score by aggregating the partial scores an object obtains on the sub-queries...|$|R
40|$|In Geographic InfolTnation Systems spatial objects {{may change}} their spatial {{location}} and/or shapes over time. Query processing of such spatiotemporal objects consists of spatial <b>query</b> <b>conditions</b> and temporal <b>query</b> <b>conditions.</b> Dur study focuses on representing the spatiotemporal monitoring of a polygonal object and aims at developing an efficient data structure supporting queries and operations that refer to both {{spatial and temporal}} monitoring. In this paper, we present a first perfolTnance comparison which indicates that spatial indexing offers apossibility of efficient query processing of a spatiotemporal object...|$|E
40|$|The Structured Query Language (SQL) {{has been}} {{established}} as a standard for querying relational databases. However, users face the problem how to define their requirements for data by the exact <b>query</b> <b>conditions.</b> This work examines advantages of fuzzy queries, which provide a better representation of the user requirements by expressing imprecise conditions through linguistic terms. Further, the paper discusses solving empty and overabundant answer problems, revealing similarities in database entities and applying preferences in <b>query</b> <b>conditions.</b> Finally, paper discusses practical realisations of fuzzy queries...|$|E
3000|$|Temporal queries, {{in which}} the <b>query</b> <b>conditions</b> are related to bus running time. For example, how many buses were delayed during 17 : 00 ∼ 19 : 00 ? [...]...|$|E
40|$|<b>Condition</b> <b>queries</b> on {{distributed}} data {{ask where}} particular conditions are satisfied. It {{is possible to}} represent <b>condition</b> <b>queries</b> as geometric objects by plotting field data in various spaces derived from the data, and by selecting loci within these derived spaces which signify the desired conditions. Rather simple geometric partitions of derived spaces can represent complex <b>condition</b> <b>queries</b> because much complexity can be encapsulated in the derived space mapping itself A geometric view of <b>condition</b> <b>queries</b> provides a useful conceptual unification, allowing one to intuitively understand many existing vector field feature detection algorithms [...] and to design new ones [...] as variations on a common theme. A geometric representation of <b>condition</b> <b>queries</b> also provides a simple and coherent basis for computer implementation, reducing {{a wide variety of}} existing and potential vector field feature detection techniques to a few simple geometric operations...|$|R
40|$|The massive {{adoption}} of smart phones and other mobile devices has generated humongous amount of spatial and spatio-temporal data. The importance of spatial analytics and aggregation is ever-increasing. An important {{challenge is to}} support interactive explo-ration over such data. However, spatial analytics and aggregation using all data points that satisfy a <b>query</b> <b>condition</b> is expensive, especially over large data sets, and could not {{meet the needs of}} interactive exploration. To that end, we present novel indexing structures that support spatial online sampling and aggregation on large spatial and spatio-temporal data sets. In spatial online sam-pling, random samples from the set of spatial (or spatio-temporal) points that satisfy a <b>query</b> <b>condition</b> are generated incrementally in an online fashion. With more and more samples, various spatial analytics and aggregations can be performed in an online, interactive fashion, with estimators that have better accuracy over time. Our design works well for both memory-based and disk-resident data sets, and scales well towards different query and sample sizes. More importantly, our structures are dynamic, hence, they are able to deal with insertions and deletions efficiently. Extensive experiments on large real data sets demonstrate the improvements achieved by our indexing structures compared to other baseline methods. 1...|$|R
30|$|In addition, {{we define}} the bitwise AND {{operation}} (denoted by&) for two bit-vectors belonging to different subpartitions, {{so that the}} <b>query</b> involving <b>conditions</b> on different attributes can be performed by index operations.|$|R
40|$|Abstract—We propose {{techniques}} for exploratory search in large databases. The {{goal is to}} provide new functionality that aids users in homing in on the right <b>query</b> <b>conditions</b> to find what they are looking for. Query refinement proceeds interactively by repeatedly consulting the user to manage <b>query</b> <b>conditions.</b> This process is characterized by three key challenges: (1) dealing with incomplete and imprecise user input, (2) keeping user effort low, and (3) guaranteeing interactive system response time. We address the first two challenges with a probability-based framework that guides the user to the most important <b>query</b> <b>conditions.</b> To recover from input errors, we introduce the notion of sensitivity and propose efficient algorithms for identifying the most sensitive user input, i. e., those inputs that had the greatest influence on the query results. For the third challenge, we develop techniques that can deliver estimates of the required probabilities within a given hard realtime limit {{and are able to}} adapt automatically as the interactive query refinement proceeds. I...|$|E
3000|$|Spatial–temporal queries, {{in which}} the <b>query</b> <b>conditions</b> are related to both bus running time and bus stop locations. For example, which are the spatial–temporal zones with {{significant}} aggregation of delaying events? [...]...|$|E
40|$|The Extensible Markup Language (XML) is {{becoming}} the most popular format for information representation and data exchange. Much research has been investigated on providing flexible query facilities while aiming at efficient techniques to extract data from XML documents. However, {{most of them are}} focused on only the exact matching of <b>query</b> <b>conditions.</b> In this paper, we describe a cooperative XML query answering system, CoXML, which cooperates with the users by extending query relaxation techniques and provides approximate matching of <b>query</b> <b>conditions.</b> We also present our participation effort in the Initiative for the Evaluation of XML Retrieval (INEX) with CoXML. 1...|$|E
50|$|The LIFER/LADDER {{system could}} only support simpleone-table queries or {{multiple}} table <b>queries</b> with easyjoin <b>conditions.</b>|$|R
3000|$|... (SQ 2): Structural {{reachability}} <b>query</b> with filtering <b>conditions</b> on {{the values}} of the attributes of the graph edges and nodes.|$|R
40|$|A top-N {{selection}} query {{against a}} relation {{is to find}} the N tuples that satisfy the <b>query</b> <b>condition</b> the best but not necessarily completely. In this paper, we propose a new method for evaluating top-N queries against a relation. This method employs a learning-based strategy. Initially, this method finds and saves the optimal search spaces for a small number of random top-N queries. The learned knowledge is then used to evaluate new queries. Extensive experiments are carried out to measure the performance of this strategy and the results indicate that it is highly competitive with existing techniques for both low-dimensional and high-dimensional data. Furthermore, the knowledge base can be updated based on new user queries to reflect new query patterns so that frequently submitted queries can be processe...|$|R
3000|$|Spatial queries, {{in which}} the <b>query</b> <b>conditions</b> are related to bus stop locations. For example, given a bus stop ID “ 560 ”, which are the nearest {{neighboring}} bus stops where delaying events happen? [...]...|$|E
40|$|Deep Web {{contains}} numerous data {{resources and}} it has been a hot topic in the database research field. There are many researches focused on Deep Web query interface discovery, form information extraction, etc. However, a very limited amount of studies are about Deep Web integrated query interface construction till now. This paper provides an integrated interface construction method based on Apriori Algorithm. This method uses the Apriori Algorithms nature of mining maximum frequent item sets to find the <b>query</b> <b>conditions</b> that appear frequently in one area, and accepts these <b>query</b> <b>conditions</b> as the layout in the integrated query interface. Then the method defines the control elements of the <b>query</b> <b>conditions</b> and their value ranges according to the principle that the integrated query interface must have good query translation function to every other query interface of this area. Finally, this method is used to construct integrated query interface for book area, and the result shows that the method is feasible to generate a friendly area representative integrated query interface...|$|E
40|$|The {{evolution}} of database systems tends {{to the development}} of higher degree of user-friendliness such that the system can be directly handled by nonprofessionals. In order to reach this goal, the database system needs to provide a query language by which queries can be speci ed conceptually. Also, the query condition may be relaxed such that information within a certain semantic distance to the exact answer can be obtained. Moreover, the real-world information is usually imprecise and incomplete. It is therefore important to store imprecise and incomplete information in a database, and to manipulate this information accordingly. In this paper, we provide a conceptual query language by which fuzzy <b>query</b> <b>conditions</b> and neighborhood <b>query</b> <b>conditions</b> can be speci ed. Query processing strategies for these two <b>query</b> <b>conditions</b> are proposed considering imprecise and incomplete information. A domain concept hierarchy is constructed ontopofanumerical domain to handle imprecise data, while dependencies between database attributes are derived for incomplete information. An application of the techniques for processing queries under network partitioning is also discussed. ...|$|E
40|$|Abstract. The top-N query {{problem is}} to find the N results that satisfy the <b>query</b> <b>condition</b> the best but not {{necessarily}} completely. It is gaining importance in relational databases and in e-commerce where services and products are sold on the Internet. This paper addresses three important issues related to the top-N query problem in a relational database context. First, we propose a new query language to facilitate the specification of various top-N queries. This language adds new features to existing languages. Second, we make a case that the sum function is a more appropriate distance function for ranking tuples when attributes involved in a top-N query are incomparable. Third, based on the sum distance function, we discuss how to process top-N queries. Keywords: Top-N query, query language, query processing, distance function. ...|$|R
40|$|PFSQL is {{the query}} {{language}} used for querying fuzzy relational databases. Oneof {{the most distinguished}} features of PFSQL is the possibility to prioritize conditions. Priorities are most often confused with weights. In this paper we compare <b>queries</b> withprioritized <b>conditions</b> with <b>queries</b> with weighed <b>conditions.</b> Since PFCSP systems are thetheoretical background for PFSQL and similarly WFCSP are the theoretical backgroundfor weighted queries we elaborate these two systems. Queries with thresholds are anotherfeature of PFSQL. When a threshold {{is attached to a}} condition only the tuples that satisfythe condition with a higher value then the threshold are displayed in the result. Throughexamples we compare these features of PFSQL...|$|R
40|$|This article {{presents}} the definition and {{the implementation of}} the OOHQL (Object Oriented Hypermedia Query Language) on top of the OO-Navigator Framework, an object-oriented framework for developing object-oriented hypermedia applications. This language allows a final user to easily formulate queries on a hypermedia application and to obtain a set of nodes satisfying the <b>query</b> <b>condition.</b> This <b>querying</b> capability introduces a new way to access information contained in a hypermedia application, and helps users not to get lost when navigating large webs of information. Key Words: object-oriented systems, hypermedia, query language, framework and algebra specification. 1. Introduction. Nowadays, we face {{the construction of a new}} generation of hypermedia applications combining different navigational techniques with sophisticated behavior, and storage of large amounts of information. This is for example the case of web-based applications. Navigating this kind of applications is oft [...] ...|$|R
30|$|MongoDB [23] {{is another}} {{open-source}} cross-platform NoSQL database program. It is a categorized document-based database, while Cassandra and HBase are column-based databases. Compared to other database management systems, {{it is easy}} to use and can process a number of <b>query</b> <b>conditions.</b>|$|E
40|$|Abstract. We explore {{flexible}} querying of RDF data, {{with the}} aim of making it possible to return data satisfying <b>query</b> <b>conditions</b> with varying degrees of exactness, and also to rank the results of a query depending on how “closely ” they satisfy the <b>query</b> <b>conditions.</b> We make queries more flexible by logical relaxation of their conditions based on RDFS entailment and RDFS ontologies. We develop a notion of ranking of query answers, and present a query processing algorithm for incrementally computing the relaxed answer of a query. Our approach has application in scenarios where {{there is a lack of}} understanding of the ontology underlying the data, or where the data objects have heterogeneous sets of properties or irregular structures. ...|$|E
30|$|Our {{target is}} to find the zone during a time {{interval}} that has maximal LLR in bus delay aggregation analysis. Figure  7 illustrates the processing of the delay aggregation query with Spark. Step 1 in Fig.  7 corresponds to Step 2 in Fig.  5, and Steps 2 and 3 in Fig.  7 correspond to Step 3 in Fig.  5. Bus-OLAP takes <b>query</b> <b>conditions</b> as input. Firstly, Step 1 joins the <b>query</b> <b>conditions</b> into condition tuples <o, a, d, t, de>, where the variables denote “Longitude,” “Latitude,” “Date,” “Time,” and “Delay,” respectively. Secondly, Step 2 partitions tuples to nodes of the Spark cluster and gets the new tuples of LLR. Finally, Step 3 searches the tuple with maximal LLR, which is the query result.|$|E
40|$|Spatial query is {{the core}} {{function}} of GIS analysis, the query data is mostly geometric point, line, polygon which has the location information and formatted <b>query</b> <b>condition</b> is a variety of spatial relationships. We focus on the spatial query efficiency improvement with the query data in case of large and complex, and propos an effective spatial adaptive grid index filter algorithm for spatial query. It {{is different from the}} commonly used uniform grid index algorithm as it constructs the adaptive grid index of data using the spatial distribution information then it can radically improve the efficiency of spatial query. This algorithm contains four steps, including boundary grid index construction, internal grid index construction, primary spatial query and advanced spatial query. It is realized by C++ language and verified by experiments, the spatial query efficiency than the traditional uniform grid index algorithm has significantly increased. © 2011 IEEE. IEEE Geoscience and Remote Sensing Society (IEEE GRSS); East China Norm. Univ., Sch. Resour. Environ. Sci.; Shanghai Urban Dev. Inf. Res. Cent.; The Geographical Society of Shanghai; East China Univ. Sci. Technol., Bus. Sch. Spatial query {{is the core}} function of GIS analysis, the query data is mostly geometric point, line, polygon which has the location information and formatted <b>query</b> <b>condition</b> is a variety of spatial relationships. We focus on the spatial query efficiency improvement with the query data in case of large and complex, and propos an effective spatial adaptive grid index filter algorithm for spatial query. It is different from the commonly used uniform grid index algorithm as it constructs the adaptive grid index of data using the spatial distribution information then it can radically improve the efficiency of spatial query. This algorithm contains four steps, including boundary grid index construction, internal grid index construction, primary spatial query and advanced spatial query. It is realized by C++ language and verified by experiments, the spatial query efficiency than the traditional uniform grid index algorithm has significantly increased. © 2011 IEEE...|$|R
40|$|In {{this paper}} {{we present a}} {{definition}} of a domain relational calculus for fuzzy relational databases using the GEFRED model as a starting point. It is possible to define an equivalent fuzzy tuple relational calculus and consequently we achieve the two query language levels that Codd designed for relational databases but these are extended to fuzzy relational databases: Fuzzy relational algebra Ž defined in the GEFRED model. and the fuzzy relational calculus which is put forward in this paper. The expressive power of this fuzzy relational calculus is demonstrated {{through the use of}} a method to translate any algebraic expression into an equivalent expression in fuzzy domain relational calculus. Furthermore, we include a useful system so that the degree to which each value has satisfied the <b>query</b> <b>condition</b> can be measured. Some examples are also included in order to clarify the definition. � 1999 John Wiley & Sons, Inc. I...|$|R
3000|$|... (SQ 4): Structural pattern {{matching}} query combined with structural reachability <b>query</b> with filtering <b>conditions</b> on {{the attributes of}} {{the edges of the}} retrieved path by the reachability query.|$|R
40|$|XIRQL (“circle”) is an XML query {{language}} that incorporates imprecision and vagueness for both structural and content-oriented <b>query</b> <b>conditions.</b> The corresponding uncertainty is handled by a consistent probabilistic model. The core features of XIRQL are 1) document ranking based on index term weighting, 2) specificity-oriented search for retrieving {{the most relevant}} parts of documents, 3) datatypes with vague predicates for dealing with specific types of content and 4) structural vagueness for vague interpretation of structural <b>query</b> <b>conditions.</b> A XIRQL database may contain several classes of documents, where all documents in a class conform to the same DTD; links between documents also are supported. XIRQL queries are translated into a path algebra, which can be processed by our HyREX retrieval engine...|$|E
40|$|User {{data stored}} in {{personal}} information systems is growing massively. Simultaneously, this data is increasingly distributed across multiple organizational domains such as email, music databases, and photo albums, {{some of which}} are structured automatically by applications. Powerful search tools are needed to help users locate data in these expanding yet fragmented data sets. In this paper, we present a novel fuzzy search approach that considers approximate matches to structure and content <b>query</b> <b>conditions.</b> Our framework uses unified data and query processing models so that structure conditions can be approximately matched by content and vice versa. Our models also unify external structure (e. g., directories) with internal structure (e. g., XML structure), supporting integrated queries matched to a single data domain. We propose indexes and algorithms for efficient query processing. We evaluate our approach using a real data set, showing that it can leverage structure information to significantly improve search accuracy, yet is robust to mistakes in <b>query</b> <b>conditions...</b>|$|E
40|$|In {{this paper}} {{we present a}} volume data model {{amenable}} to querying volumes in databases. Unlike most existing volume models, which are directed towards specific applications (notably, volume displaying) and are therefore directed towards executing with the greatest possible efficiency a small set of operations, {{we are interested in}} defining a volume algebra through which generic <b>query</b> <b>conditions</b> can be composed. We argue that a general volume model [...] ...|$|E
40|$|There is now growing {{interest}} in organizing and querying large bodies of video data. In this paper, we will develop a simple SQL-like video query language {{which can be used}} not only to identify videos in the library that are of interest to the user, but which {{can also be used to}} extract, from such a video in a video library, the relevant segments of the video that satisfy the specied <b>query</b> <b>condition.</b> We investigate various types of user requests and show how they are expressed using our query language. We also develop polynomial-time algorithms to process such queries. Furthermore, we show how video-presentations may be synthesized in response to a user query. We show how a standard relational database system can be extended in order to handle queries such as those expressed in our language. Based on these principles, we have built a prototype video retrieval system called VIQS. We will describe the design and implementation of VIQS and show some sample interactions with VIQS. ...|$|R
40|$|The {{commonly}} used Plane Sweep algorithm in the spatial relationship query is a serial algorithm, {{when dealing with}} huge amounts of spatial data, the efficiency is very low,and the existing parallel computing method is not applicable to normal computer. Aiming at this problem, this paper proposes a parallel algorithm of spatial relationship query between polygons based on heterogeneous multi-core architecture. The algorithm uses STR-tree index to filter out non-intersection polygons first, then decomposes the filtered polygons data into points set and edges set, and constructs a quadtree index for them; under the premise of data accuracy meets the requirement of floating point calculation, uses GPU's powerful batch computing power quickly processing the intersection between edges and calculates the topology relationship between rings, then uses the topology relationship between rings to calculate the DE- 9 IM model between polygons; compares the DE- 9 IM model with spatial relationship <b>query</b> <b>condition</b> and outputs the query results. At last, the efficiency and accuracy of the algorithm is verified by experiment...|$|R
40|$|The {{interest}} in indexing and querying video data is growing rapidly. Desktop video {{is a new}} and attractive medium for communication between people using computers and networks. The main focus in any video information system {{is to develop a}} database management system with a friendly content-based retrieval of the digital video information. In this paper, we present an on-line video system for educational purposes. The interface consist of two main modules, An annotation-video-interface which can be used to put keywords, comments, proposal exercises, recommended lectures and so on in video segments. The annotations specify video sequences information for the automatic generation of a video library indexed by content. And a query-video-interface which can be used to extract the relevant segments of video that satisfy the specific <b>query</b> <b>condition.</b> We also describe the implementation of a real time video server, which make uses of a protocol designed for video conferencing to transmit the video sequences. Eje: Procesamiento distribuido y paralelo. Tratamiento de señale...|$|R
