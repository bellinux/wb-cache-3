10000|10000|Public
5|$|Ramagya Prashna (रामाज्ञा प्रश्न), {{literally}} <b>Querying</b> the Will of Rama, is an Awadhi work {{related to}} both Ramayana and Jyotisha (astrology). It consists of seven Kands or books, {{each of which}} is divided into seven Saptakas or Septets of seven Dohas each. Thus it contains 343 Dohas in all. The work narrates the Ramayana non-sequentially, and gives a method to look up the Shakuna (omen or portent) for astrological predictions.|$|E
5|$|Controversy rapidly {{surrounded}} Edward's death. With Mortimer's {{execution in}} 1330, rumours began to circulate that Edward {{had been murdered}} at Berkeley Castle. Accounts {{that he had been}} killed by the insertion of a red-hot iron or poker into his anus slowly began to circulate, possibly as a result of deliberate propaganda; chroniclers in the mid-1330s and 1340s spread this account further, supported in later years by Geoffrey le Baker's colourful account of the killing. It became incorporated into most later histories of Edward, typically being linked to his possible homosexuality. Most historians now dismiss this account of Edward's death, <b>querying</b> the logic in Edward's captors murdering him in such an easily detectable fashion.|$|E
5|$|During World War II Russell Spurr was a {{lieutenant}} in the Royal Indian Navy fighting the Japanese in Burma. After the war, in February 1946, Spurr {{was part of the}} Commonwealth occupation force stationed in the Japanese naval base of Kure in southern Japan. There he noticed a huge drydock standing empty, and after <b>querying</b> what it had been used for, he learnt that it was where Yamato had been built. Spurr had been isolated in Burma for several years and had never heard of Yamato, but he became interested in her story and started collecting information about the battleship.|$|E
30|$|In our method, {{we define}} the <b>query</b> depth in Neo 4 j as follows: when we <b>query</b> from the {{starting}} node A to node B, we define the <b>query</b> depth as one; further, if we <b>query</b> from node B to another node C, that is, we <b>query</b> from A, through node B, to node C, we define the <b>query</b> depth as two, and so on. The <b>query</b> methods {{are divided into}} single <b>query</b> and traversal <b>query,</b> both of them do multi-query depth <b>query.</b> Although the middle <b>query</b> process of the single <b>query</b> may contain multiple results, it finally returns one <b>query</b> result only. Compared with the single <b>query,</b> traversal <b>query</b> will return all results of every depth, and it will only return {{the number of the}} nodes {{as the result of the}} <b>query</b> since the amount of the data is large. Taking Neo 4 j <b>query</b> as an example, single <b>query</b> and traversal <b>query</b> respectively perform five kinds of <b>queries</b> whose <b>query</b> depths are five. The final result of a single <b>query</b> is only one node; however, the middle result may have multiple nodes. Specially, count <b>query</b> is the <b>query</b> whose <b>query</b> result is the number of nodes, and the traversal <b>query</b> is the <b>query</b> which returns a specific number of nodes.|$|R
5000|$|<b>Query</b> {{rewriting}} is {{the process}} of automatically reformulating a search <b>query</b> to more accurately capture its intent. <b>Query</b> expansion adds additional <b>query</b> terms, such as synonyms, in order to retrieve more documents and thereby increase recall. <b>Query</b> relaxation removes <b>query</b> terms to reduce the requirements for a document to match the <b>query,</b> thereby also increasing recall. Other forms of <b>query</b> rewriting, such as automatically converting consecutive <b>query</b> terms into phrases and restricting <b>query</b> terms to specific fields, aim to increase precision. Apache Lucene search engine [...] uses <b>query</b> rewrite to transform complex <b>queries</b> to more primitive <b>queries,</b> such as expressions with wildcards (e.g. quer*) into a boolean <b>query</b> of the matching terms from the index (such as <b>query</b> OR <b>queries).</b>|$|R
40|$|Users submit <b>queries</b> to {{an online}} {{database}} via its <b>query</b> interface. <b>Query</b> interface parsing, which is im-portant for many applications, understands the <b>query</b> capabilities of a <b>query</b> interface. Since most <b>query</b> interfaces are organized hierarchically, {{we present a}} novel <b>query</b> interface parsing method, StatParser (Sta-tistical Parser), to automatically extract the hierarchical <b>query</b> capabilities of <b>query</b> interfaces. StatParser automatically learns from a set of parsed <b>query</b> interfaces and parses new <b>query</b> interfaces. StatParser starts from a small grammar and enhances the grammar {{with a set of}} probabilities learned from parsed <b>query</b> interfaces under the maximum-entropy principle. Given a new <b>query</b> interface, the probability-enhanced grammar identifies the parse tree with the largest global probability to be the <b>query</b> capabilities of the <b>query</b> interface. Experimental results show that StatParser very accurately extracts the <b>query</b> capabilities and can effectively overcome the problems of existing <b>query</b> interface parsers...|$|R
5|$|The {{architecture}} of the Xgrid system is designed around a job based system; the controller sends agents jobs, and the agents return the responses. The actual computation that the controller executes in an Xgrid system {{is known as a}} job. The job contains all the files required to complete the task successfully, such as the input parameters, data files, directories, executables and/or shell scripts, the files included in an Xgrid job must be able to be executed either simultaneously or asynchronously, or any benefits of running such a job on an Xgrid is lost. Once the job completes, the controller can be set to notify the client of the task's completion or failure, for example by email. The client can leave the network while the tasks are running. It can also monitor the job status on demand by <b>querying</b> the controller, although it cannot track the ongoing progress of individual tasks.|$|E
5|$|Two local magistrates, J. Bruce and Anthony Hill, were {{stranded}} in the Castle Inn in Merthyr Tydfil. They swore in around 70 men as special constables, but they were heavily outnumbered by the radical crowds. Bruce wrote an urgent letter to Bute in Cardiff Castle, asking for urgent advice on whether to call in the armed forces, and <b>querying</b> whether the Marquess had readied the Militia for action. Huge crowds marched on the local iron works, stopping production. The messages from Merthyr Tydfil reached Bute that afternoon, who began to assemble the Eastern and Central Yeomanry militia units and transport ready for deployment. Bute paused until the morning, hoping to hear better news, but messengers bought more desperate news from Bruce and Hill, and the Yeomanry were dispatched. Meanwhile, an 80-man unit of the 93rd Foot {{had arrived in the}} Castle Inn from Brecon. Bute continued to keep Whitehall informed of the events by letter throughout.|$|E
25|$|Prefix hash tree: {{sophisticated}} <b>querying</b> over DHTs.|$|E
50|$|An {{example of}} a {{monotonic}} <b>query</b> is a select-project-join <b>query</b> containing only conditions of equality (also known as conjunctive <b>queries).</b> Examples of non-monotonic <b>queries</b> are aggregation <b>queries,</b> or <b>queries</b> with set difference.|$|R
40|$|<b>Query</b> folding {{refers to}} the {{activity}} of determining if and how a <b>query</b> can be answered using a given set of resources, which might be materialized views, cached results of previous <b>queries,</b> or <b>queries</b> answerable by another database. We investigate <b>query</b> folding in the context where <b>queries</b> and resources are conjunctive <b>queries.</b> We develop an exponential-time algorithm that finds all foldings, and a polynomial-time algorithm for the subclass of acyclic <b>queries.</b> Our results {{can be applied to}} <b>query</b> optimization in centralized databases, to <b>query</b> processing in distributed databases, and to <b>query</b> answering in federated databases. 1 Introduction <b>Query</b> folding {{refers to the}} activity of determining if and how a <b>query</b> can be answered using a given set of resources. These resources might be materialized views, cached results of previous <b>queries,</b> or even <b>queries</b> answerable by another database. <b>Query</b> folding is important because the base relations referred to in a <b>query</b> might be stored remotely a [...] ...|$|R
40|$|Large {{volume of}} <b>queries</b> over {{large volume of}} users allows search engine to build methods for {{generating}} <b>query</b> suggestion for input <b>query.</b> <b>Query</b> recommendation methods are powerful technique to generate related <b>queries</b> or alternate <b>queries</b> as a <b>query</b> suggestion for original <b>query</b> which is given by user in the search engine first time. In this review paper we discussed about <b>query</b> recommendation methods and comparison between different methods how the <b>query</b> suggestion is given by these methods for the input <b>query</b> by user in search engine. Some <b>query</b> recommendation method do not covers the unseen and rare <b>queries</b> {{but some of them}} covers these <b>queries</b> by some additional feature added such as generalize the <b>query</b> token of input <b>query</b> by a suitable place holder from hierarchy tool wordnet 3. 0 or wekepedia by yago mapping. These generalization techniques are also discussed in this paper...|$|R
25|$|Another new {{addition}} in SC2K is the query tool. Using the query tool on tiles reveals {{information such as}} structure name and type, altitude, and land value. Certain tiles also display additional information; power plants, for example, display the percentage of power being consumed when queried, and <b>querying</b> roads displays the amount of traffic on that tile. <b>Querying</b> a library and selecting 'Ruminate' displays an essay written by Neil Gaiman.|$|E
25|$|RQL, one of {{the first}} {{declarative}} languages for uniformly <b>querying</b> RDF schemas and resource descriptions, implemented in RDFSuite.|$|E
25|$|Some {{database}} developers compromise {{by creating}} an underlying snowflake schema with views built {{on top of it}} that perform many of the necessary joins to simulate a star schema. This provides the storage benefits achieved through the normalization of dimensions with the ease of <b>querying</b> that the star schema provides. The tradeoff is that requiring the server to perform the underlying joins automatically can result in a performance hit when <b>querying</b> as well as extra joins to tables that may not be necessary to fulfill certain queries.|$|E
40|$|Declarative <b>query</b> {{languages}} {{are an important}} feature of database management systems and have {{played an important role}} in their success. As database management technology enters the multimedia information system area, the availability of special-purpose <b>query</b> languages for multimedia applications will be equally important. In this report, we survey multimedia <b>query</b> languages and <b>query</b> models. Particularly, we look at those systems from the point of view of well-defined <b>queries,</b> fuzzy <b>queries,</b> visual <b>queries,</b> and <b>query</b> presentations. Several research issues, such as generic multimedia <b>query</b> languages, incremental <b>queries,</b> fuzzy <b>queries,</b> spatio-temporal <b>queries,</b> feature storage and organization, are also identified. In our opinion these are vital issues for the success and development of a multimedia <b>query</b> language...|$|R
40|$|Abstract — <b>Query</b> {{processing}} in sensor networks {{has recently}} received significant {{attention from the}} research community. Processing <b>queries</b> in an energy efficient manner is a crucial challenge. There exists numerous ways to process a <b>query</b> in sensor networks. Choosing {{an efficient way to}} process the <b>query</b> is essential for <b>query</b> optimization. In this paper, we consider a <b>query</b> optimizer for sensor networks. By examining <b>query</b> plans, each of which specifies a way to execute the <b>query,</b> our <b>query</b> optimizer estimates the energy the <b>query</b> plan may consume. A <b>query</b> plan that will potentially utilize the least energy is chosen for execution. Simulation results show that the <b>query</b> plan chosen by our <b>query</b> optimizer consumes a significant less amount of energy than our simulation of TinyDB, a state-of-the-art <b>query</b> processing engine for sensor networks. I...|$|R
50|$|In {{database}} theory, a conjunctive <b>query</b> is {{a restricted}} form of first-order <b>queries.</b> Many first-order <b>queries</b> {{can be written}} as conjunctive <b>queries.</b> In particular, {{a large part of}} <b>queries</b> issued on relational databases can be expressed in this way. Conjunctive <b>queries</b> also have a number of desirable theoretical properties that larger classes of <b>queries</b> (e.g., the relational algebra <b>queries)</b> do not share.|$|R
25|$|When {{performing}} a reverse lookup, the DNS client converts the address into these formats before <b>querying</b> {{the name for}} a PTR record following the delegation chain as for any DNS query. For example, assuming the IPv4 address 208.80.152.2 is assigned to Wikimedia, it is represented as a DNS name in reverse order: 2.152.80.208.in-addr.arpa. When the DNS resolver gets a pointer (PTR) request, it begins by <b>querying</b> the root servers, which point to the servers of American Registry for Internet Numbers (ARIN) for the 208.in-addr.arpa zone. ARIN's servers delegate 152.80.208.in-addr.arpa to Wikimedia to which the resolver sends another query for 2.152.80.208.in-addr.arpa, which results in an authoritative response.|$|E
25|$|Programs {{that need}} to use processor-specific {{instructions}} not implemented in a compiler. A common example is the bitwise rotation instruction {{at the core of}} many encryption algorithms, as well as <b>querying</b> the parity of a byte or the 4-bit carry of an addition.|$|E
25|$|SQL Server Integration Services (SSIS) {{provides}} ETL capabilities for SQL Server {{for data}} import, data integration and data warehousing needs. Integration Services includes GUI tools to build workflows such as extracting data from various sources, <b>querying</b> data, transforming data—including aggregation, de-duplication, de-/normalization and merging of data—and then exporting the transformed data into destination databases or files.|$|E
30|$|A more {{detailed}} analysis {{has been conducted}} to show some specific <b>query</b> properties and their relation with QbE STD performance focusing on the two best QbE STD systems (system 1 and system 4 b). We have set two different categories as follows: worst <b>queries</b> and best <b>queries.</b> The former are those that contribute with a negative ATWV within the final performance and the latter are those that posses the best ATWV contribution within the final performance. Twelve different <b>queries</b> belong to the worst <b>query</b> category, and ten different <b>queries</b> do to the best <b>query</b> category. Among the worst <b>queries,</b> there are ten <b>queries</b> that belong {{to one of the}} worst groups based on the earlier analyses (short-length <b>queries,</b> high-energy <b>queries</b> for system 4 b, and low-energy <b>queries</b> for system 1). Among the best <b>queries,</b> there are seven <b>queries</b> that belong to one of the best groups presented in the previous analyses (medium energy <b>queries</b> and long-length <b>queries).</b>|$|R
30|$|We then study {{why some}} <b>queries</b> are not {{identified}} by SimAttack (i.e., Misclassified and Unknown <b>queries</b> on Fig. 13). Results {{show that the}} proportion of <b>queries</b> in the these two categories changes according to the number of fake <b>queries.</b> For instance, for 1 fake <b>query,</b> unknown <b>queries</b> represent 78.9 % of non-identified <b>queries</b> while misclassified <b>queries</b> represent 21.1 %. If we consider 7 fake <b>queries,</b> these percentages change to 40.8 and 59.2 %, respectively.|$|R
40|$|Abstract. Through the {{in-depth}} {{study of the}} existing distributed database <b>query</b> processing technology, this paper proposes a distributed database <b>query</b> processing program. This program optimizes the existing <b>query</b> processing, stores the commonly used <b>query</b> results according to the <b>query</b> frequency, to be directly used by the subsequent <b>queries</b> or used as intermediate <b>query</b> results, thus avoiding possible transmission {{of a large number}} of data, thereby reducing the <b>query</b> time and improving <b>query</b> efficiency...|$|R
25|$|Semantic MediaWiki {{also has}} its own inline <b>querying</b> tools. For instance, if pages about {{countries}} stored additional information like population data, a query could be added to a page that displays {{a list of all}} countries with a population greater than 50 million, along with their capital city; and Germany would appear in such a list, with Berlin alongside it.|$|E
25|$|Although BAM systems usually use a {{computer}} dashboard display to present data, BAM is distinct from the dashboards used by business intelligence (BI) insofar as events are processed in real-time or near real-time and pushed to the dashboard in BAM systems, whereas BI dashboards refresh at predetermined intervals by polling or <b>querying</b> databases. Depending on the refresh interval selected, BAM and BI dashboards can be similar or vary considerably.|$|E
25|$|Aside from routing, {{there exist}} many {{algorithms}} that exploit {{the structure of}} the overlay network for sending a message to all nodes, or a subset of nodes, in a DHT. These algorithms are used by applications to do overlay multicast, range queries, or to collect statistics. Two systems that are based on this approach are Structella, which implements flooding and random walks on a Pastry overlay, and DQ-DHT, which implements a dynamic <b>querying</b> search algorithm over a Chord network.|$|E
5000|$|A <b>query</b> optimizer {{will not}} always choose the most {{efficient}} <b>query</b> plan for a given <b>query.</b> In some databases the <b>query</b> plan can be reviewed, problems found, and then the <b>query</b> optimizer gives hints {{on how to improve}} it. In other databases alternatives to express the same <b>query</b> (other <b>queries</b> that return the same results) can be tried. Some <b>query</b> tools can generate embedded hints in the <b>query,</b> for use by the optimizer.|$|R
5000|$|<b>Query</b> level {{features}} or <b>query</b> features, which depend {{only on the}} <b>query.</b> For example, {{the number}} of words in a <b>query.</b> Further information: <b>query</b> level feature ...|$|R
40|$|We review {{existing}} <b>query</b> {{answering systems}} for sensor data. We then propose an extended <b>query</b> answering approach termed smart <b>query,</b> specifically for marine sensor data. The smart <b>query</b> answering system integrates pattern <b>queries</b> and continuous <b>queries.</b> The proposed smart <b>query</b> system considers both streaming data and historical data from marine sensor networks. The smart <b>query</b> also uses <b>query</b> relaxation technique and semantics from domain knowledge as a recommender system. The proposed smart <b>query</b> benefits in building {{data and information}} systems for marine sensor networks...|$|R
25|$|For the non-recursive query method, a DNS {{resolver}} client queries a DNS server {{that provides}} a record for a domain {{for which it is}} authoritative itself, or it provides a partial result without <b>querying</b> other servers. In case of a caching DNS resolver, the non-recursive query of its local DNS cache delivers a result and reduces the load on upstream DNS servers by caching DNS request records {{for a period of time}} after an initial response from upstream DNS servers.|$|E
25|$|On 14 March 2000, the Oxford English Dictionary Online (OED Online) became {{available}} to subscribers. The online database contains the entire OED2 and is updated quarterly with revisions {{that will be}} included in the OED3 (see above). The online edition is the most up-to-date version of the dictionary available. The OED web site is not optimized for mobile devices, but the developers have stated that there are plans to provide an API that would enable developers to develop different interfaces for <b>querying</b> the OED.|$|E
25|$|Some {{languages}} allow both {{static and}} dynamic typing (type checking), sometimes called soft typing. For example, Java {{and some other}} ostensibly statically typed languages support downcasting types to their subtypes, <b>querying</b> an object to discover its dynamic type, and other type operations that depend on runtime type information. More generally, most programming languages include mechanisms for dispatching over different 'kinds' of data, such as disjoint unions, subtype polymorphism, and variant types. Even when not interacting with type annotations or type checking, such mechanisms are materially similar to dynamic typing implementations. See programming language for more discussion of the interactions between static and dynamic typing.|$|E
40|$|Session: QoS, <b>Query</b> Processing, Optimization (full paper) International audienceThis paper {{concerns}} {{the integration of}} the Case Based Reasoning (CBR) paradigm in <b>query</b> processing, providing a way to optimize <b>queries</b> when there is no prior knowledge on <b>queried</b> data sources and certainly no related metadata such as data statistics. Our <b>Query</b> Optimization by Learning (QOL) approach optimizes <b>queries</b> using cases generated from the evaluation of similar past <b>queries.</b> A <b>query</b> case comprises: (i) the <b>query,</b> (ii) the <b>query</b> plan and (iii) the measures (computational resources consumed) of the <b>query</b> plan. The work also {{concerns the}} way the CBR process interacts with the <b>query</b> plan generation process. This process uses classical heuristics and makes decisions randomly (e. g. when there is no statistics for join ordering and selection of algorithms, routing protocols); It also (re) uses cases (existing <b>query</b> plans) for similar <b>queries</b> parts, improving the <b>query</b> optimization and evaluation efficiency...|$|R
40|$|Navigational <b>queries</b> for graph-structured data, such as {{the regular}} path <b>queries</b> and the {{context-free}} path <b>queries,</b> are usually evaluated to a relation of node-pairs $(m, n) $ such {{that there is a}} path from $m$ to $n$ satisfying the conditions of the <b>query.</b> Although this relational <b>query</b> semantics has practical value, we believe that the relational <b>query</b> semantics can only provide limited insight {{in the structure of the}} graph data. To address the limits of the relational <b>query</b> semantics, we introduce the all-path <b>query</b> semantics and the single-path <b>query</b> semantics. Under these path-based <b>query</b> semantics, a <b>query</b> is evaluated to all paths satisfying the conditions of the <b>query,</b> or, respectively, to a single such path. While focusing on context-free path <b>queries,</b> we provide a formal framework for evaluating <b>queries</b> on graphs using both path-based <b>query</b> semantics. For the all-path <b>query</b> semantics, we show that the result of a <b>query</b> can be represented by a finite context-free grammar annotated with node-information relevant for deriving each path in the <b>query</b> result. For the single-path <b>query</b> semantics, we propose to search for a path of minimum length. We reduce the problem of finding such a path of minimum length to finding a string of minimum length in a context-free language, and for deriving such a string we propose a novel algorithm. Our initial results show that the path-based <b>query</b> semantics have added practical value and that <b>query</b> evaluation for both path-based <b>query</b> semantics is feasible, even when <b>query</b> results grow very large. For the single-path <b>query</b> semantics, determining strict worst-case upper bounds on the size of the <b>query</b> result remains the focus of future work...|$|R
40|$|This paper proposes Deep 2 Q, a novel {{search engine}} that {{proactively}} transforms <b>query</b> forms of Deep Web sources into phrase <b>queries,</b> constructs <b>query</b> evaluation plans, and caches results for popular <b>queries</b> offline. Then at <b>query</b> time, keyword <b>queries</b> are simply matched with phrase <b>queries</b> to retrieve results. Deep 2 Q embodies a novel dual-ranking framework for <b>query</b> answering and novel solutions for discovering frequent attributes and <b>queries.</b> Preliminary experiments show the great potentials of Deep 2 Q...|$|R
