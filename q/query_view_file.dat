0|3122|Public
5000|$|Database Explorer - GUI {{tool for}} <b>querying,</b> <b>viewing</b> and editing {{database}} content.|$|R
40|$|Materialized complex {{object-oriented}} {{views are}} a promising technique for {{the integration of}} heterogeneous databases {{and the development of}} powerful data warehousing systems. Path <b>query</b> <b>views</b> are virtual classes formed from selection queries that specify a predicate upon the value of an aggregation hierarchy path. The primary difference between previous work regarding OODB indexing and the efficient implementation of materialized path <b>query</b> <b>views</b> addressed in this paper lies in the nature of their usage. For OODB indexing, query usage is the primary purpose of index structures. Because the materialized view data itself can be used to answer queries, the primary use of index structures with regard to materialized path <b>query</b> <b>views</b> is for the incremental maintenance of views in the face of updates. We have developed an augmented inherited multi-index (AIM) strategy that is specifically tailored for the maintenance of materialized path <b>query</b> <b>views.</b> We find that we can improve update perform [...] ...|$|R
40|$|We {{present a}} new way of {{managing}} file contents, its implementation and preliminary experimental results. The goal is to permit simultaneous read/writ- e accesses to different <b>views</b> on a <b>file,</b> in order to help in separating a user's concerns, even when they are not independent. Files are considered as mount point directories from which <b>views</b> on the <b>files</b> are accessible as subdirectories and files with read and write permissions. Views are designated with logical formulas describing desired properties of views. They contain those parts of the original file that satisfy the formulas. Properties are attached to parts of the file automatically via programs called transducers. A file system interface is used for <b>querying</b> <b>views,</b> navigating between views, and updating view contents...|$|R
5000|$|Given a <b>query,</b> <b>view</b> {{this as a}} mini document, {{and compare}} it to your {{documents}} in the low-dimensional space.|$|R
40|$|Static index pruning {{techniques}} permanently {{remove a}} presumably redundant {{part of an}} inverted file, to reduce the file size and query processing time. These techniques differ in deciding which parts of an index can be removed safely; i. e., without changing the top-ranked query results. As defined in the literature, the <b>query</b> <b>view</b> of a document is the set of query terms that access to this particular document, i. e., retrieves this document among its top results. In this paper, we first propose using <b>query</b> <b>views</b> {{to improve the quality}} of the top results compared against the original results. We incorporate <b>query</b> <b>views</b> in a number of static pruning strategies, namely term-centric, document-centric, term popularity based and document access popularity based approaches, and show that the new strategies considerably outperform their counterparts especially for the higher levels of pruning and for both disjunctive and conjunctive query processing. Additionally, we combine the notions of term and document access popularity to form new pruning strategies, and further extend these strategies with the <b>query</b> <b>views.</b> The new strategies improve the result quality especially for the conjunctive query processing, which is the default and most commo...|$|R
50|$|QVT, which {{introduces}} {{means to}} <b>query,</b> <b>view</b> and transform MOF-based models, {{is a very}} important standard, approved in 2005. See Model Transformation Language for further information.|$|R
40|$|Cataloged from PDF {{version of}} article. Static index pruning {{techniques}} permanently remove a presumably redundant {{part of an}} inverted file, to reduce the file size and query processing time. These techniques differ in deciding which parts of an index can be removed safely; that is, without changing the top-ranked query results. As defined in the literature, the <b>query</b> <b>view</b> of a document is the set of query terms that access to this particular document, that is, retrieves this document among its top results. In this paper, we first propose using <b>query</b> <b>views</b> {{to improve the quality}} of the top results compared against the original results. We incorporate <b>query</b> <b>views</b> in a number of static pruning strategies, namely term-centric, document-centric, term popularity based and document access popularity based approaches, and show that the new strategies considerably outperform their counterparts especially for the higher levels of pruning and for both disjunctive and conjunctive query processing. Additionally, we combine the notions of term and document access popularity to form new pruning strategies, and further extend these strategies with the <b>query</b> <b>views.</b> The new strategies improve the result quality especially for the conjunctive query processing, which is the default and most common search mode of a search engine...|$|R
40|$|We {{describe}} {{the prototype of}} a system intended to allow a user to navigate in an urban environment using a mobile telephone equipped with a camera. The system uses a database of views of building facades to determine the pose of a <b>query</b> <b>view</b> provided by the user. Our method {{is based on a}} novel wide-baseline matching algorithm that can identify corresponding building facades in two views despite significant changes of viewpoint and lighting. We show that our system is capable of localising <b>query</b> <b>views</b> reliably in a large part of Cambridge city centre. ...|$|R
5000|$|IBM Lotus Domino 8.0+ KeyView (10.4.0.0) filter {{supports}} ODT, ODS, ODP for <b>viewing</b> <b>files.</b>|$|R
40|$|One {{approach}} to simplifying ontologies, {{for inclusion in}} a more tractable semantic web, is {{through the use of}} non-materialized <b>view</b> <b>queries.</b> <b>View</b> <b>queries</b> define how a simplified “view” or “application” ontology is derived from larger more complex ontologies. In this work we look at a language for specifying <b>view</b> <b>queries</b> over OWL/RDFS sources, and we illustrate some initial ideas for how to execute user <b>queries</b> over our <b>view</b> ontology, without materializing it first...|$|R
50|$|Ability to <b>view</b> <b>files</b> {{directly}} in the Preview Pane within Windows Explorer for Microsoft Windows 7 and Vista users.|$|R
5000|$|Project and Code Navigation: {{specialized}} project <b>views,</b> <b>file</b> structure <b>views</b> {{and quick}} jumping between files, classes, methods and usages ...|$|R
40|$|We propose {{incorporating}} <b>query</b> <b>views</b> in {{a number}} of static pruning strategies, namely term-centric, document-centric and access-based approaches. These query-view based strategies considerably outperform their counterparts for both disjunctive and conjunctive query processing in Web search engines. Categories and Subject Descriptor...|$|R
40|$|In {{this paper}} {{we present a}} {{prototype}} system for image based localization in urban environments. Given a database of views of city street scenes tagged by GPS locations, the system computes the GPS location of a novel <b>query</b> <b>view.</b> We first use a wide-baseline matching technique based on SIFT features to select the closest views in the database. Often due to a large change of viewpoint and presence of repetitive structures, {{a large percentage of}} matches (> 50 %) are not correct correspondences. The subsequent motion estimation between the <b>query</b> <b>view</b> and the reference view, is then handled by a novel and efficient robust estimation technique capable of dealing with large percentage of outliers. This stage is also accompanied by a model selection step among the fundamental matrix and the homography. Once the motion between the closest reference views is estimated, the location of the <b>query</b> <b>view</b> is then obtained by triangulation of translation directions. Approximate solutions for cases when triangulation cannot be obtained reliably are also described. The presented system is tested on the dataset used in ICCV 2005 Computer Vision Contest and is shown to have higher accuracy than previous reported results. ...|$|R
50|$|The {{mobile app}} lets users <b>view</b> <b>files</b> on Yandex.Disk, upload files from their mobile device, {{download}} files for use offline and email file download links.|$|R
5000|$|Project and code navigation: special project <b>views,</b> <b>file</b> {{structure}} <b>views,</b> {{and quick}} jumping between files, classes, methods and usages, navigation through class hierarchy, and usages search.|$|R
40|$|Abstract—In {{this paper}} we present an {{approach}} for image based localization in urban environments. Given {{a database of}} views of city street views tagged by GPS locations, the system computes the GPS location of a novel <b>query</b> <b>view.</b> We first use a wide-baseline matching technique based on SIFT features to select the closest views in the database. Often due to a large change of viewpoint and presence of repetitive structures, {{a large percentage of}} matches (> 50 %) are not correct correspondences. The subsequent motion estimation between the <b>query</b> <b>view</b> and the reference view, is then handled by a novel and efficient robust estimation technique capable of dealing with large percentage of outliers. We will discuss in detail sensitivity and robustness of the proposed robust estimation method. The motion estimation stage is also accompanied by a model selection step among the fundamental matrix and the homography. Once the motion between the closest reference views is estimated, the location of the <b>query</b> <b>view</b> is then obtained by triangulation of translation directions. The presented system is tested on a moderate size dataset of street views and results are shown to have higher accuracy than previous reported results. Performance and scalability of the presented system will be also discussed...|$|R
5000|$|The <b>Query</b> <b>view</b> {{is similar}} in {{appearance}} to the Pipeline view. Here, the user constructs partial pipelines. When the query is executed, VisTrails identifies the pipeline versions which contain the specified partial pipeline. This {{is analogous to the}} Query By Example method of performing database queries.|$|R
5000|$|Version 3.8 {{included}} a new option to <b>view</b> <b>files</b> and folders as a tree, a new Connect to Server {{item in the}} sidebar and incremental loading of search results.|$|R
40|$|Answering <b>queries</b> using <b>views</b> {{amounts to}} {{computing}} {{the answer to}} a query having information only on the extension of a set of precomputed <b>queries</b> (<b>views).</b> This problem is relevant in several fields, such as information integration, query optimization, and data warehousing, and has been studied recently in different settings. In this paper we address answering <b>queries</b> using <b>views</b> in a setting where intensional knowledge about the domain is represented using a very expressive Description Logic equipped with n-ary relations, and queries are nonrecursive datalog queries whose predicates are the concepts and relations that appear in the Description Logic knowledge base. We study the problem under different assumptions, namely, closed and open domain, and sound, complete, and exact information on view extensions. We show that under the closed domain assumption, in which the set of all objects in the knowledge base coincides with the set of objects stored in the <b>views,</b> answering <b>queries</b> using <b>views</b> is already intractable. We show also that under the open domain assumption the problem is decidable in double exponential time...|$|R
50|$|A hex editor or viewer {{may be used}} to <b>view</b> <b>file</b> data as a {{sequence}} of hexadecimal (or decimal, binary or ASCII character) values for corresponding bytes of a binary file.|$|R
40|$|We {{present an}} {{scalable}} algorithm for answering multiple conjunctive <b>queries</b> using <b>views.</b> This {{is an important}} problem in query optimization, data integration and ontology-based data access. Since rewriting one conjunctive <b>query</b> using <b>views</b> is an NP-hard problem, we develop an approach where answering n queries takes less than n times the cost of answering one query, by compactly representing and indexing common patterns in the input <b>queries</b> and the <b>views.</b> Our initial experimental results show a promising speed up. 1...|$|R
40|$|International audienceLocation {{recognition}} is commonly treated as visual instance retrieval on "street view" imagery. The dataset items and <b>queries</b> are panoramic <b>views,</b> i. e. groups of images taken {{at a single}} location. This work introduces a novel panorama-to-panorama matching process, either by aggregating features of individual images in a group or by explicitly constructing a larger panorama. In either case, multiple views are used as queries. We reach near perfect location recognition on a standard benchmark with only four <b>query</b> <b>views...</b>|$|R
40|$|We {{revisit the}} problem of {{answering}} tree pattern <b>queries</b> using <b>views.</b> We first show that, for <b>queries</b> and <b>views</b> {{that do not have}} nodes labeled with the wildcard *, there is an alternative to the approach of query rewriting which does not require us to find any rewritings explicitly yet which produces the same answers as the maximal contained rewriting. Then, using the new approach, we give a simple criterion and a corresponding algorithm for identifying redundant view answers, which are view answers that can be ignored when evaluating the maximal contained rewriting. Finally, for <b>queries</b> and <b>views</b> that do have nodes labeled *, we provide a method to find the maximal contained rewriting and show how to answer the <b>query</b> using <b>views</b> without explicitly finding the rewritings. Griffith Sciences, School of Information and Communication TechnologyFull Tex...|$|R
40|$|To {{provide a}} {{complete}} {{analysis of the}} organization, its business and its needs, {{it is necessary for}} leaders to have data that help decision making. Data warehouses are designed to meet such needs; they are an analysis and data management technology. This article describes an MDA (Model Driven Architecture) process that we have used to automatically generate the multidimensional schema of data warehouse. This process uses model transformation using several standards such as Unified Modeling Language, Meta-Object Facility, <b>Query</b> <b>View</b> Transformation, Object Constraint Language, [...] . From the UML model, especially the class diagram, a multidimensional model is generated as an XML file, the transformation is carried out by the QVT (<b>Query</b> <b>View</b> Transformation) language and the OCL (Object Constraint Language) Language. To validate our approach a case study is presented {{at the end of this}} wor...|$|R
50|$|Most {{utilities}} {{that work}} with LBM and BBM files are rather dated, such as MacPaint or Deluxe Paint. IrfanView allows to <b>view</b> <b>files,</b> is free for non commercial use and can work under Linux.|$|R
40|$|A popular {{technique}} for answering <b>queries</b> using <b>views</b> is to rst rewrite the <b>queries</b> using the <b>views</b> {{and then to}} evaluate the queries using the data in the views. Exist-ing work has addressed the problem of nd-ing equivalent or maximally-contained rewrit-ings (MCR) of <b>queries</b> using <b>views.</b> At the same time, emerging applications require in-vestigating the problem of rewriting <b>queries</b> using <b>views</b> in a more general setting, and pose new technical challenges. In this paper we consider the problem of nding whether there exist rewritings that (1) are contained in the query, (2) contain the query, or (3) overlap with the query. We investigate com-plexity issues and present ecient sound and complete algorithms that nd minimally con-taining rewritings (MiCR) and check {{for the existence of}} contained rewritings, which is an easier problem than nding an MCR...|$|R
50|$|In 2007, Autodesk {{introduced}} an online translator for DWFs called Freewheel. Freewheel {{was a way}} to <b>view</b> a DWF <b>file</b> without downloading software. It was also a web service which offered developers a web-based interface for <b>viewing,</b> <b>querying,</b> and manipulating DWF files.Freewheel has been replaced by the web based viewing and editing web service Autodesk 360.|$|R
50|$|Far Manager {{features}} an internal viewer and editor, customizable user menus, tree <b>views,</b> <b>file</b> search, compare, integrated help, and a task switcher for its tools. Its standard functionality can be expanded with macros (which allow scripting) and plugins.|$|R
40|$|Location-based service Continuous spatial <b>query</b> <b>View</b> field nearest {{neighbor}} query query {{can be employed}} for applications such as augmented reality systems, tour guide sys-jects outsid lled the vi {{nearest neighbor}} query. Given the location and {{the field of view}} of a user, the view field nearest neighbor query retrie nearest data object (from the user’s location) that exists in the user’s view field...|$|R
5000|$|... #Caption: A diagram {{attempting}} to show potential paths available to drivers over the approximate distance (per.) Right click the image here and {{open in a}} new tab or window, then click it again on that page for a clearer <b>view.</b> (<b>File</b> size: 105 KB) ...|$|R
40|$|In {{studying}} actual Web searching by {{the public}} at large, we analyzed over one million Web queries by users of theExcitesearchengine. Wefoundthatmostpeopleuse few search terms, few modified <b>queries,</b> <b>view</b> few Web pages,andrarelyuseadvancedsearchfeatures. Asmall number of search terms are used with high frequency, andagreatmanytermsareunique;thelanguageofWeb queries is distinctive. Queries about recreation and entertainmentrankhighest. Findingsarecomparedtodata from two other large studies of Web queries. This study providesaninsightintothepublicpracticesandchoices in Web searching...|$|R
50|$|Some of {{the main}} {{features}} are: forms customization (e.g. labels, different types of HTML input field, content check), lookup fields, master/details <b>view,</b> <b>files</b> upload, calculated fields, hooks, graph report generation, export to CSV, checking for possible duplication during insertions, authentication, authorization restrictions on view/update/delete, and e-mail notices.|$|R
5000|$|Added the Visual Query Designer, a {{graphical}} interface {{that allows}} users to interactively build <b>queries</b> and <b>view</b> the results.|$|R
5000|$|FileApp allows <b>viewing</b> OpenDocument <b>files</b> on iPhone and iPad.|$|R
50|$|Hiew (short for Hacker's view) is {{a popular}} console hex editor for Windows written by Eugene Suslikov (sen). Amongst its feature set {{is its ability to}} <b>view</b> <b>files</b> in text, hex and {{disassembly}} mode. The program is particularly useful for editing executable files such as COFF, PE or ELF executable files.|$|R
