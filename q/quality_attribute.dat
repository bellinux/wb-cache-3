600|4357|Public
25|$|Size: While not a <b>quality</b> <b>attribute</b> per se, the sizing of {{source code}} is a {{software}} characteristic that obviously impacts maintainability. Combined with the above quality characteristics, software size {{can be used}} to assess the amount of work produced and to be done by teams, as well as their productivity through correlation with time-sheet data, and other SDLC-related metrics.|$|E
25|$|Welding gas {{pressures}} using oxy-acetylene are set {{in accordance}} with the manufacturer's recommendations. The welder will modify the speed of welding travel to maintain a uniform bead width. Uniformity is a <b>quality</b> <b>attribute</b> indicating good workmanship. Trained welders are taught to keep the bead the same size {{at the beginning of the}} weld as at the end. If the bead gets too wide, the welder increases the speed of welding travel. If the bead gets too narrow or if the weld puddle is lost, the welder slows down the speed of travel. Welding in the vertical or overhead positions is typically slower than welding in the flat or horizontal positions.|$|E
5000|$|Like all NFRs and <b>quality</b> <b>attribute</b> requirements, ASRs {{should be}} {{specified}} in a SMART way. <b>Quality</b> <b>attribute</b> scenarios [...] are {{one way to}} achieve the S(specific) and the M(easured) criteria in SMART. The SEI recommends <b>Quality</b> <b>Attribute</b> Workshops (QAWs) for this effort. It has been suggested to keep architecture analysis and design lightweight and flexible; <b>quality</b> <b>attribute</b> trees for certain application genres and technology domains can support such approaches.|$|E
40|$|A {{method for}} judging the {{reusability}} of C++ code components and for assessing indirect <b>quality</b> <b>attributes</b> from the direct attributes measured by an automated tool was demonstrated. The method {{consisted of two}} phases. The first phase identified and analytically validated a set of measurements for assessing direct <b>quality</b> <b>attributes</b> based on measurement theory. An automated tool was used to compute actual measures for a repository of C++ classes. A taxonomy relating reuse, indirect <b>quality</b> <b>attributes,</b> and measurements identified and validated during {{the first part of}} this research was defined. The second phase consisted of identifying and validating a set of measurements for assessing indirect <b>quality</b> <b>attributes.</b> A case study of the feasibility of applying direct measurements to assess the indirect <b>quality</b> <b>attributes</b> was conducted. The comparison and analysis of indirect <b>quality</b> <b>attributes</b> measured by human analysis with direct <b>quality</b> <b>attributes</b> measured by the automated tool provided empirical evidence that the two sets of <b>quality</b> <b>attributes,</b> direct and indirect, do correlate...|$|R
5000|$|<b>Quality</b> <b>attributes</b> are {{by nature}} abstract, because they {{indicate}} how but not what. Within the architectural process, relationships are identified between the <b>quality</b> <b>attributes</b> from one discipline and comparable <b>quality</b> <b>attributes</b> in another discipline. This {{makes it easier}} to identify how choices made in one area influence solutions in other areas. The more pro-actively this occurs and the more <b>quality</b> <b>attributes</b> that can be reconciled, the more constructive the process. Within this harmonization process, [...] "similar" [...] <b>quality</b> <b>attributes</b> are easily traceable to each other, while others {{are far more likely to}} underline the uniqueness of a particular discipline. Nevertheless, a discipline usually recognizes itself in the <b>quality</b> <b>attributes</b> of other disciplines, provided that they have been properly defined and explained.|$|R
40|$|Optimal {{levels of}} <b>quality</b> <b>attributes</b> usually cannot be {{achieved}} simultaneously within a system. Information about system stakeholders' preferences and priorities over <b>quality</b> <b>attributes</b> {{is needed in}} order to manage tradeoffs between <b>quality</b> <b>attributes</b> both at development time and at runtime. Such information has to be integrated in non-functional requirements specification. We extend the UML QoS Framework metamodel to allow UML QoS models built from the metamodel to incorporate specification about preferences and priorities over <b>quality</b> <b>attributes...</b>|$|R
5000|$|... an {{advanced}} description of <b>quality,</b> <b>attribute,</b> property, and quantity, ...|$|E
50|$|Generate <b>quality</b> <b>attribute</b> utility tree - {{define the}} core {{business}} and technical {{requirements of the}} system, and map them to an appropriate architectural property. Present a scenario for this given requirement.|$|E
5000|$|Softgoal is used {{to define}} {{non-functional}} requirements. It’s usually a <b>quality</b> <b>attribute</b> {{of one of the}} intentional elements. In GRL notation softgoal is represented by irregular curvilinear shape with the softgoal name inside.|$|E
40|$|Purpose: Service-Oriented Architecture (SOA) is {{becoming}} an extensive field in research as well as popular architecture pattern because of its support towards <b>quality</b> <b>attributes</b> like performance, scalability, interoperability, reliability etc. Every architecture pattern provides benefits, having positive impacts on <b>quality</b> <b>attributes.</b> On the other hand, each architecture pattern comes with certain liabilities, having negative impacts on <b>quality</b> <b>attributes.</b> This paper makes an effort to illustrate the various factors related to <b>quality</b> <b>attributes</b> of SOA. A trade-off between various <b>quality</b> <b>attributes</b> is also discussed. The existing as well as future efforts to maintain the quality of SOA are reviewed. Methodology: The <b>quality</b> <b>attributes</b> like Interoperability, Performance, Security, Reliability, Availability, Modifiability, Testability, Usability and Scalability are very well explained along with their current status as well as future requirements. Future research: Future work {{will focus on the}} analysis of service-level agreements which help in providing necessary level of services to service consumers. Still, a great work is required to deal with the <b>quality</b> <b>attributes</b> and <b>quality</b> requirements in SOA life cycl...|$|R
40|$|Understanding <b>quality</b> <b>attributes</b> {{relationships}} impersonates a {{vital role}} in sustaining a sufficient level of quality to a software system. Furthermore, calibrating the relationships between system's <b>quality</b> <b>attributes</b> will not only affect its quality but also may reduce the development cost. However, this paper introduces a framework to explore the nature of the relationships between different <b>quality</b> <b>attributes</b> at a low level with the aid of architectural strategies (i. e. tactics). Additionally, this framework enables the software architects to calibrate and adjust the <b>quality</b> <b>attributes</b> relationships using two pieces of information, that is, tactics and scenarios. Furthermore, the developed framework enables software architects to have a rough measurement of the strength of the relationships between the <b>quality</b> <b>attributes...</b>|$|R
50|$|To stop {{disciplines}} {{talking at}} cross purposes, unequivocal agreement is {{needed on the}} <b>quality</b> <b>attributes</b> each discipline brings into the architectural process. These must serve {{as a basis for}} further reconciliation and harmonization of definitions within the architectural process. Infrastructure architecture provides its own set of <b>quality</b> <b>attributes,</b> alongside the specific <b>quality</b> <b>attributes</b> of the business and information architectures.|$|R
50|$|Examples of Environments {{within the}} Client Realm Working Area are Office, Kiosk and Remote. Within each Environment, quality demands are denoted by Quality Attributes with a value that is fitting to that Environment. On their turn, these values {{correspond}} to classes, provisions and/or permutations {{that are relevant}} to that <b>Quality</b> <b>Attribute.</b>|$|E
5000|$|Usability {{answers the}} {{question}} [...] "can someone use this interface?". Jacob Nielsen describes usability as the <b>quality</b> <b>attribute</b> [...] which describes how usable the interface is. Shneiderman proposes principles for designing more usable interfaces called [...] "Eight Golden Rules of Interface Design" [...] which {{are well known}} heuristics for creating usable systems.|$|E
5000|$|Size: While not a <b>quality</b> <b>attribute</b> per se, the sizing of {{source code}} is a {{software}} characteristic that obviously impacts maintainability. Combined with the above quality characteristics, software size {{can be used}} to assess the amount of work produced and to be done by teams, as well as their productivity through correlation with time-sheet data, and other SDLC-related metrics.|$|E
40|$|Abstract. This paper {{attempts}} {{to compare the}} classification of <b>quality</b> <b>attributes</b> using Kano’s method and the service gaps method proposed by Kong and Muthusamy (2011). Expectation and perception data from 80 articles were systematically reviewed. Only two articles with classification of <b>quality</b> <b>attributes</b> by Kano’s method were identified. Four service quality factors were apparent from this study, and eight of the <b>quality</b> <b>attributes</b> {{were found to be}} the same by both methods. Service gaps could indeed be used to classify <b>quality</b> <b>attributes,</b> besides for evaluation of service quality and customer satisfaction...|$|R
40|$|Embedded {{systems are}} used in many {{critical}} applications where a failure can have serious consequences. Therefore, achieving {{a high level of}} dependability is an ultimate goal. However, in order to achieve this goal we are in need of understanding the interrelationships between the different dependability <b>quality</b> <b>attributes</b> and other embedded systems’ <b>quality</b> <b>attributes.</b> This research study provides indicators {{of the relationship between the}} dependability <b>quality</b> <b>attributes</b> and other <b>quality</b> <b>attributes</b> for embedded systems by identifying the impact of architectural tactics as the candidate solutions to construct dependable embedded systems...|$|R
25|$|Newer {{proposals}} for quality models such as Squale and Quamoco propagate a direct {{integration of the}} definition of <b>quality</b> <b>attributes</b> and measurement. By breaking down <b>quality</b> <b>attributes</b> or even defining additional layers, the complex, abstract <b>quality</b> <b>attributes</b> (such as reliability or maintainability) become more manageable and measurable. Those quality models have been applied in industrial contexts but have not received widespread adoption.|$|R
50|$|In 1985, Szcześniak {{became the}} first woman to receive the Nicholas Appert Award, the highest honor {{bestowed}} upon its members by the Institute of Food Technologists (IFT). It commended her pioneering work on food texture that led to its recognition as an important <b>quality</b> <b>attribute</b> affecting consumer acceptance and to its organization as a subdiscipline of food science. She is the only woman thus far to ever win the Nicholas Appert Award. Dr Szcześniak was elected an IFT Fellow in 1981.|$|E
50|$|Quality-driven: classic {{software}} design approaches (e.g. Jackson Structured Programming) were driven by required functionality {{and the flow}} of data through the system, but the current insight is that the architecture of a software system is {{more closely related to}} its quality attributes such as fault-tolerance, backward compatibility, extensibility, reliability, maintainability, availability, security, usability, and other such -ilities. Stakeholder concerns often translate into requirements on these quality attributes, which are variously called non-functional requirements, extra-functional requirements, behavioral requirements, or <b>quality</b> <b>attribute</b> requirements.|$|E
50|$|Welding gas {{pressures}} using oxy-acetylene are set {{in accordance}} with the manufacturer's recommendations. The welder will modify the speed of welding travel to maintain a uniform bead width. Uniformity is a <b>quality</b> <b>attribute</b> indicating good workmanship. Trained welders are taught to keep the bead the same size {{at the beginning of the}} weld as at the end. If the bead gets too wide, the welder increases the speed of welding travel. If the bead gets too narrow or if the weld puddle is lost, the welder slows down the speed of travel. Welding in the vertical or overhead positions is typically slower than welding in the flat or horizontal positions.|$|E
40|$|Engineering {{systems are}} {{typically}} designed to cost and specification. The robustness of the engineered systems is frequently measured {{with respect to}} consistency according to a Six Sigma philosophy. However, robustness is just one measure of system behavior, and in insufficient to characterize the behavior of complex systems with respect to extensibility, robustness controllability, and flexibility. The extensibility index measures {{the extent to which}} the <b>quality</b> <b>attributes</b> may be adjusted relative to their variation, even if such adjustment causes other attributes to fail specification. The robustness index is representative of consistency of the <b>quality</b> <b>attributes,</b> as measured the relative breadth of the specification to the variance of the <b>quality</b> <b>attributes.</b> The controllability index measures the span of the <b>quality</b> <b>attributes</b> while maintaining the feasibility of the other <b>quality</b> <b>attributes.</b> Finally, the flexibility index measures the range of the <b>quality</b> <b>attributes</b> while holding other <b>quality</b> <b>attributes</b> fixed. All of the measures are valid for linear and non-linear systems, uncoupled and coupled systems, and systems with varying number of decision variables and <b>quality</b> <b>attributes.</b> The four measures are applied to the injection molding of digital video disc substrates. The application example demonstrates some significant short comings in this manufacturing process, and provides insight into general system design requirements and strategies. 1 In preparation for submission to 12 / 15 / 200...|$|R
40|$|Software {{architecture}} {{is an essential}} early stage in the software design process. In this stage, the architect should give the <b>quality</b> <b>attributes</b> a special consideration because a good level of meeting these attributes can be performed by well-designed architecture. This {{means that there is}} a close relationship between <b>quality</b> <b>attributes</b> and software architecture. However, <b>quality</b> <b>attributes</b> can be achieved through the appropriate application of a set of unit operations. A unit operation is a systematic designing operation that can be applied directly to system architecture. Architectural styles (patterns) include high level design decisions that address <b>quality</b> <b>attributes.</b> Many general architectural styles are defined in the literature. For the domain of user interactive systems there are many architectural styles that address some important <b>quality</b> <b>attributes.</b> In many cases, it is essential to evaluate software styles in terms of their achievement of the required <b>quality</b> <b>attributes</b> by analyzing the relationships between these attributes, unit operations, and styles. This evaluation can help and facilitate the process of selecting a specified style. In this paper the authors propose a structured quantitative evaluation method to show a rank of four well-known user interface management systems (UIMSs) in terms of their supporting a set of six important selected <b>quality</b> <b>attributes...</b>|$|R
3000|$|Analysed tweets and <b>quality</b> <b>attributes</b> are filtered. If all <b>quality</b> <b>attributes</b> {{associated}} with a tweet satisfy a filtering policy, the tweet will be saved into the data store. Otherwise, the tweet will be discarded [...]...|$|R
50|$|By {{working to}} improve said factors, {{corporations}} can achieve their goals of increased output at lower costs, while potentially creating optimal levels of customer satisfaction. There are numerous reasons why each of these factors correlates to overall improvement. For example, making software user interfaces easier to understand reduces the need for extensive training. The improved interface tends to lower {{the time needed to}} perform tasks, and so would both raise the productivity levels for employees and reduce development time (and thus costs). Each of the aforementioned factors are not mutually exclusive; rather they should be understood to work in conjunction to form the overall workplace environment. In the 2010s, usability is recognized as an important software <b>quality</b> <b>attribute,</b> earning its place among more traditional attributes such as performance, robustness and aesthetic appearance. Various academic programs focus on usability. Several usability consultancy companies have emerged, and traditional consultancy and design firms offer similar services.|$|E
3000|$|... 2 For simplicity, {{terms such}} as <b>quality</b> <b>attribute,</b> <b>quality</b> <b>attribute</b> property, and {{non-functional}} property are treated as synonymous.|$|E
3000|$|The {{product manager}} {{identifies}} timeliness {{as an important}} <b>quality</b> <b>attribute,</b> which is communicated to the data scientist. A new <b>quality</b> <b>attribute</b> is created for timeliness. The data scientist includes reference to a data processing tool, which is capable of evaluating the <b>quality</b> <b>attribute</b> (timeliness) [...]...|$|E
40|$|International audienceQuantitative and {{integrated}} evaluation of software <b>quality</b> <b>attributes</b> at the architectural design stage provides a sound basis for making objective decisions for design trade-offs {{and developing a}} high quality software. In this paper we introduce a formal method for modeling software architectures and evaluationg their <b>quality</b> <b>attributes</b> quantitatively and in a unified manner. This method is based on stochastic activity networks (SANs) and the <b>quality</b> <b>attributes</b> considered include security, dependability and performance...|$|R
40|$|Architectural {{knowledge}} management approaches have {{paid little attention}} to manage knowledge about <b>quality</b> <b>attributes,</b> which are the key considerations for designing and evaluating software architecture. In this work we identify the kinds of information that needs to be captured about <b>quality</b> <b>attributes</b> with special focus on architectural design decisions. We also describe how a tool can help to capture and reuse <b>quality</b> <b>attributes</b> knowledge to improve the software architecture process. Muhammad Ali Babar, Rafael Capill...|$|R
30|$|Evaluation of new <b>quality</b> <b>attributes.</b> New {{functionality}} has to {{be developed}} for evaluation of additional <b>quality</b> <b>attributes.</b> The added functionality should be updated to the processing configurations (Fig.  14), and communicated to the end users of the tool.|$|R
40|$|<b>Quality</b> <b>attribute</b> {{requirements}} such {{as those}} for performance, security, modifiability, reliability, and usability have a significant influence on the software architecture of a system. At the Software Engineering Institute, we are studying and codifying the relationship between <b>quality</b> <b>attribute</b> requirements and the architectural design strategies that impact their achievement. In CMU/SEI- 2000 -TN- 017, we introduced the notion of <b>quality</b> <b>attribute</b> design primitives. <b>Quality</b> <b>attribute</b> design primitives (or attribute primitives) are architectural building blocks that target the achievement of one or sometimes several <b>quality</b> <b>attribute</b> requirements. Our intent is to codify a fairly comprehensive set of attribute primitives {{in a manner that}} articulates how each attribute primitive makes its specific contribution toward the achievement of one or several attribute goals. We believe this will provide a very powerful language for constructing or analyzing software architectures in relation to <b>quality</b> <b>attribute</b> requirements. To determine the expressive and explanatory power of these attribute primitives, we will examine various classes of systems. This paper uses attribute primitives to examine the qualities of Enterprise JavaBeans (EJB) -based systems. In particular, we find that attribute primitives hold promise for providing insight into the <b>quality</b> <b>attribute</b> consequences of using various EJB infrastructure features...|$|E
40|$|<b>Quality</b> <b>attribute</b> {{models are}} {{proposed}} as {{the linkage between}} a specification of a <b>quality</b> <b>attribute</b> requirement and a design fragment that is focused on achieving that requirement. Each <b>quality</b> <b>attribute</b> model has a collection of parameters that must be specified {{in order to determine}} from the model whether a requirement will be met. These parameters can be bound through design decisions, through values given from a quality requirement, or through knowledge of the designer. Architectural tactics are designed to relate design decisions to control of a <b>quality</b> <b>attribute</b> model parameter in order to achieve particular responses. In this paper, we present a series of steps that enable moving from a single <b>quality</b> <b>attribute</b> requirement to a design fragment focused on achieving that requirement. We demonstrate these steps through application to an embedded system...|$|E
30|$|A <b>quality</b> <b>attribute</b> {{specifies}} {{source of}} social media data (e.g. Twitter), and target (e.g. tweets) the attribute refers to. A <b>quality</b> <b>attribute</b> may refer {{to one or}} more quality metrics, which are utilized for evaluation of the attribute [11]. Each quality metric may contain a formula/model, which can be encoded with a specified format.|$|E
40|$|Image {{quality metrics}} {{have become more}} and more popular in the image {{processing}} community. However, so far, no one has been able to define an image quality metric well correlated with the percept for overall image quality. One of the causes is that image quality is multi-dimensional and complex. One approach {{to bridge the gap between}} perceived and calculated image quality is to reduce the complexity of image quality, by breaking the overall quality into a set of <b>quality</b> <b>attributes.</b> In our research we have presented a set of <b>quality</b> <b>attributes</b> built on existing attributes from the literature. The six proposed <b>quality</b> <b>attributes</b> are: sharpness, color, lightness, artifacts, contrast, and physical. This set keeps the dimensionality to a minimum. An experiment validated the <b>quality</b> <b>attributes</b> as suitable for image quality evaluation. The process of applying image quality metrics to printed images is not straightforward, because image quality metrics require a digital input. A framework has been developed for this process, which includes scanning the print to get a digital copy, image registration, and the application of image quality metrics. With <b>quality</b> <b>attributes</b> for the evaluation of image quality and a framework for applying image quality metrics, a selection of suitable image quality metrics for the different <b>quality</b> <b>attributes</b> has been carried out. Each of the <b>quality</b> <b>attributes</b> has been investigated, and an experimental analysis carried out to find the most suitable image quality metrics for the given <b>quality</b> <b>attributes.</b> For the many attributes metrics based on structural similarity are the the most suitable, while for other attributes further evaluation is required...|$|R
40|$|Abstract: This paper {{describes}} how to rank refactoring patterns to improve {{a set of}} <b>quality</b> <b>attributes</b> {{of a piece of}} software. The Analytical Hierarchy Process (AHP) is used to express the relative importance of the <b>quality</b> <b>attributes</b> and the relative importance of refactoring patterns in regards to those selected <b>quality</b> <b>attributes.</b> This ranking of refactoring patterns can be used to focus the refactoring effort on the most beneficial patterns to the software being developed or maintained. ...|$|R
40|$|Products are now {{developed}} {{based on}} what customers desire, and thus attractive quality creation has become crucial. In studies on customer satisfaction, methods for analyzing <b>quality</b> <b>attributes</b> and enhancing customer satisfaction have been proposed to facilitate product development. Although substantial studies have performed {{to assess the impact}} of the attributes on customer satisfaction, little research has been conducted that quantitatively calculate the odds of customer satisfaction for the Kano classification, fitting a nonlinear relationship between attribute-level performance and customer satisfaction. In the present study, the odds of customer satisfaction were determined to identify the classification of <b>quality</b> <b>attributes,</b> and took customer psychology into account to suggest how decision-makers should prioritize the allocation of resources. A novel method for quantitatively assessing <b>quality</b> <b>attributes</b> was proposed to determine classification criteria and fit the nonlinear relationship between <b>quality</b> <b>attributes</b> and customer satisfaction. Subsequently, a case study was conducted on bicycle user satisfaction to verify the novel method. The concept of customer satisfaction odds was integrated with the value function from prospect theory to understand <b>quality</b> <b>attributes.</b> The results of this study can serve as a reference for product designers to create attractive <b>quality</b> <b>attributes</b> in their products and thus enhance customer satisfaction...|$|R
