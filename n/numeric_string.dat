19|52|Public
5000|$|... login.ticket_client - a three-character <b>numeric</b> <b>string</b> used to {{indicate}} the client that is written into the SAP logon ticket ...|$|E
50|$|The V-11 was a multichip design, mainly {{consisting}} of an I/E chip, a M chip, a F chip and five ROM/RAM chips. Unlike the MicroVAX 78032, which implemented {{a subset of}} VAX ISA, the V-11 was a complete VAX implementation, supporting all of the 304 instructions and 17 data types (byte, word, longword, quadword, octaword, F-floating, D-floating, G-floating, H-floating, bit, variable-length bit field, character string, trailing <b>numeric</b> <b>string,</b> leading separate <b>numeric</b> <b>string,</b> packed decimal string, absolute queue, and self-relative queue).|$|E
50|$|Go has built-in, language-level {{support for}} {{associative}} arrays, called maps. A map's key type {{may only be}} a boolean, <b>numeric,</b> <b>string,</b> array, struct, pointer, interface, or channel type. A map type is written like this: mapkeytypevaluetype.|$|E
5000|$|Sometimes {{the word}} [...] "string" [...] precedes [...] "grammar" [...] in {{unrelated}} terms. An example is [...] "address string grammar", {{which is a}} grammar for Internet Protocol address strings.Another is the term [...] "numeric string grammar" [...] which refers to <b>numeric</b> <b>strings</b> (strings which denote numbers or numerals).|$|R
50|$|As Small Basic will readily convert between data types, numbers can be {{manipulated}} as <b>strings</b> and <b>numeric</b> <b>strings</b> as numbers. This is demonstrated through the second example.|$|R
5000|$|Formatting <b>numeric</b> or <b>string</b> values into a {{printable}} output string ...|$|R
50|$|The '+' {{operator}} is overloaded: it is {{used for}} string concatenation and arithmetic addition. This may cause problems when inadvertently mixing strings and numbers. As a unary operator, it can convert a <b>numeric</b> <b>string</b> to a number.|$|E
5000|$|Character {{and string}} types can store {{sequences}} of characters from a character set such as ASCII. Since most character sets include the digits, {{it is possible}} to have a <b>numeric</b> <b>string,</b> such as [...] However, many languages treat these as belonging to a different type to the numeric value [...]|$|E
50|$|The {{maximum length}} of a string value was 240 ASCII characters. This {{includes}} intermediate results when evaluating a TEX expression. <b>Numeric</b> <b>string</b> values are limited to 62 digits in the string including the (-) for negative numbers. Numeric values are also normalized where leading zeros are stripped from the string representation.|$|E
50|$|ThinBASIC {{supports}} {{a wide range}} of <b>numeric</b> and <b>string</b> data types.|$|R
500|$|By default, {{scalar type}} {{declarations}} follow weak typing principles. So, for example, if a parameter's type is int, PHP would allow not only integers, but also convertible <b>numeric</b> <b>strings,</b> floats or booleans {{to be passed}} to that function, and would convert them. However, PHP 7 has a [...] "strict typing" [...] mode which, when used, disallows such conversions for function calls and returns within a file.|$|R
50|$|Configuration is a {{function}} which dynamically changes {{the parameters of the}} RTCs during run-time.Configuration can be <b>numeric</b> and <b>string.</b>|$|R
50|$|SQR has arrays {{like those}} of the C {{programming}} language or COBOL. An array has one or more fields, each field either a <b>numeric,</b> <b>string,</b> or date variable. Each field may have multiple occurrences, giving SQR the equivalent of two-dimensional arrays. SQR has special commands that manipulate multiple items within a single array. There are also many commands that cannot use an array element in place of a scalar variable.|$|E
50|$|Tree {{description}} {{lists the}} node types allowed in a tree. Node types support single inheritance. Node types {{have children and}} attributes. Children must be of defined node type. Attributes may be of primitive type (<b>numeric,</b> <b>string,</b> boolean), enum type or node type. Attributes are used to store literals during tree construction and additional information gathered during tree analysis (for example, links between reference and definition, to represent higher-order abstract syntax).|$|E
5000|$|Data {{types are}} {{restricted}} to the following core data types: boolean, string, integer, real, date, timestamp, and arbitrary_id, {{or one of the}} following domain-specific data types: <b>numeric,</b> <b>string,</b> enumerated, and composite. Domain-specific numeric and string data types can represent subsets of the core data types. The domain-specific composite data type is to always be treated as a single unit within the domain. e.g., a MailingAddress composite data type could be declared, but city information couldn't be extracted from it.|$|E
5000|$|... : The string is {{converted}} to a number value. JavaScript attempts to convert the <b>string</b> <b>numeric</b> literal to a Number type value. First, a mathematical value {{is derived from the}} <b>string</b> <b>numeric</b> literal. Next, this value is rounded to nearest Number type value.|$|R
5000|$|Multidimensional arrays {{are also}} {{supported}} with both <b>numeric</b> and <b>string</b> variables. In {{the case of}} an array, the element address is enclosed with a parenthesis:A(1)=1A$(1)="BOOKS"Multiple dimensions are separated by commasA(1,3)=4A$(2,2)="XYZ123" ...|$|R
30|$|In the HHPSO–SVM feature {{selection}} algorithm, HHPSO provides multiple candidate solutions to {{feature selection}} and SVM is employed {{to evaluate the}} classification performance using these candidate solutions. Particles cooperate to locate a best solution in an N dimensional problem space, where N is the cardinality of the original feature set. Positions of particles are represented as <b>numeric</b> <b>strings</b> of length N. Each value in the string is within zero and one, which {{can be seen as}} the contribution of the corresponding feature to the classification task. The higher the value, the more important it is. Each particle selects a set of important features based on its position string.|$|R
50|$|The SPID is a <b>numeric</b> <b>string</b> from 3 to 20 digits in length. A SPID (or {{more than}} one, if necessary) is {{assigned}} when the ISDN Basic Rate Interface (BRI) is {{obtained from the}} phone company. Beginning in 1998, most phone companies began to use a generic SPID format. In this format, the SPID is a 14-digit number that includes a 10-digit telephone number (which includes the 3-digit Numbering Plan Area code), a 2-digit Sharing Terminal Identifier, and a 2-digit Terminal Identifier (TID). The generic SPID format {{makes it easier to}} tell users what to specify when installing an ISDN line and simplifies corporate installation procedures.|$|E
5000|$|The {{plaintext}} {{character set}} in BATCO consists of 12 symbols, the digits 0 to 9, the decimal point and a [...] "change" [...] character denoted as CH. The BATCO ciphertext character set is the letters A through Z. BATCO {{can also be}} used to transmit numeric information, such as grid coordinates. Switching to this mode is accomplished by sending the vocabulary code for an appropriate proword, such as FIGURES or GRID. The decimal point plaintext character is used as needed in numeric mode, having its normal meaning. The CH symbol is used to mark the end of a <b>numeric</b> <b>string</b> transmission, returning to the vocabulary card codes.|$|E
40|$|Abstract:- Various {{algorithms}} for string search {{are well}} known. At the users standing, some criteria {{are necessary to}} select it among them to their purposes. Conventional criteria are insufficient due to the various measurements and regardless of the alphabet in strings. This paper discusses an evaluation method for string search algorithms at users standing {{and the results of}} application. It concludes BSKMP is the most effective for both the bit string and the <b>numeric</b> <b>string,</b> while MM is for the text in natural languages...|$|E
50|$|Each {{resource}} has a {{type and}} a name, both being either <b>numeric</b> identifiers or <b>strings.</b>|$|R
5000|$|The {{description}} contains {{one or more}} capabilities, {{which have}} conventional names. The capabilities are typed: boolean, <b>numeric</b> and <b>string.</b> The termcap library has no predetermined type for each capability name. It determines the types of each capability by the syntax: ...|$|R
40|$|Order-preserving {{matching}} is {{a string}} matching problem of two <b>numeric</b> <b>strings</b> where the relative orders of consecutive substrings are matched {{instead of the}} characters themselves. The order relation between two characters is a ternary relation (>,,<), {{but it was not}} suciently studied in previous works [5, 7, 1]. In this paper, we extend the representations of order relations by Kim et al. [5] to ternary order relations, and prove the equiva-lence of those representations. The extended prefix representation takes logm+ 1 bits per character, while the nearest neighbor representation takes 2 logm bits per character. With our extensions, the time complexities of order-preserving matching in binary order relations can be achieved in ternary order relations as well. ...|$|R
40|$|This paper {{proposes a}} system for {{recognizing}} numeric strings from topographical maps, which is composed of the automatic recognition stage and the interactive recognition stage. In this method, uncertain numeric strings extracted through the automatic recognition stage based on topo-graphical map feature only, are confirmed and corrected by the interactive recognition stage. Therefore we can obtain high precise recognition results. The method was applied to <b>numeric</b> <b>string</b> recognition from map image which include 102 strings made up of 249 numerals. As a result, 95. 1 % of 102 numeric strings were correctly recognized. ...|$|E
40|$|The paper {{proposes a}} system for {{recognizing}} numeric strings from topographical maps, which is composed of an automatic recognition stage and an interactive recognition stage. In this method, uncertain numeric strings extracted through the automatic recognition stage based on topographical map features only are confirmed and corrected by the interactive recognition stage. Therefore one can obtain highly precise recognition results. The method was applied to <b>numeric</b> <b>string</b> recognition from a map image which includes 102 strings made up of 249 numerals. As a result, 95. 1 % of 102 numeric strings were correctly recognized. Third International Conference on Document Analysis and Recognition, August 14 - 16, 1995, Montreal, Canad...|$|E
40|$|At 1 algorithm,for {{recognizing}} nutvreric strings with notation {{rules by}} using string checking has been developed. The proposed string check function removes extraneous characters from recognized character strings {{by using the}} notation rules. This function also determines whether to carry out recognition error correction. In this correction process, recognized characters are compared with string in a dictionary. Errors in character strings are autotnatically corrected to meaninRfu 1 letters by using the notcltion rules and dictionary. The string space of the dictionar. ~ to be compared is restricted based on the notation rules; this reduces processing time. The string check function improved the string recognition rate from 98. 5 % to 99. 7 %. and decreases the error rate by 98 %. 2. <b>Numeric</b> <b>String</b> Itnportant nteanirrgful strings, such as I. D. codes. written in a &) main with neighboring characters can be recognized in recil titrre /,?I using this crlgorithm. 1...|$|E
50|$|This {{paradigm}} {{considers the}} variables of the program not necessarily as <b>numeric</b> or <b>string</b> variables but can act on graphic objects too. This is a common feature with Kig (but in this case, the language is Python (language)) and DrGeo (in this case, with Scheme (language)).|$|R
5000|$|This {{expression}} selects {{messages that}} have a field named Department with a string value matching [...] "IT" [...] and a Percent-Disk-Free field with an integer value {{less than or equal}} to 10. The Elvin subscription language supports a range of operations for matching <b>numeric</b> and <b>string</b> values, including the use of regular expression matching.|$|R
50|$|SDXF {{data can}} express {{arbitrary}} levels of structural depth. Data elements are self-documenting, {{meaning that the}} metadata (<b>numeric,</b> character <b>string</b> or structure) are encoded into the data elements. The design of this format is simple and transparent: computer programs access SDXF data {{with the help of}} well-defined functions, exempting programmers from learning the precise data layout.|$|R
40|$|The {{objective}} of this document is to explain the HL 7 codes needed to identify the vaccine used in an immunization. The document will: • Provide background information on the concepts behind CVX codes • Describe the business rules for creating new CVX and MVX codes • Provide resources and explanation on data mapping Background Information: Vaccine Coding Systems In 1999, the CDC published an implementation guide for messaging immunization histories. Two value sets were defined that allowed specification of the vaccine used at the vaccine administration level. The CVX code is a <b>numeric</b> <b>string,</b> which identifies the type of vaccine product used. The MVX code is an alphabetic string that identifies the manufacturer of that vaccine. Taken together, the immunization can be resolved to a trade name (the proprietary name of the product). For example, a CVX code of 43 represents Hepatitis B, adult formulation. There are 2 manufacturers of this vaccine, GlaxoSmithKline (MVX = SKB) and Merck (MVX = MSD). A...|$|E
40|$|We {{introduce}} a new string matching problem called order-preserving matching on numeric strings where a pattern matches a text if the text contains a substring whose relative orders coincide {{with those of the}} pattern. Order-preserving matching is applicable to many scenarios such as stock price analysis and musical melody matching in which the order relations should be matched instead of the strings themselves. Solving order-preserving matching has to do with representations of order relations of a <b>numeric</b> <b>string.</b> We define prefix representation and nearest neighbor representation, which lead to efficient algorithms for order-preserving matching. We present efficient algorithms for single and multiple pattern cases. For the single pattern case, we give an O(n log m) time algorithm and optimize it further to obtain O(n + m log m) time. For the multiple pattern case, we give an O(n log m) time algorithm. Comment: 15 pages; submitted to Theoretical Computer Science, 5 Dec 2012; presented at Theo Murphy International Scientific Meeting of the Royal Society on Storage and Indexing of Massive Data, 7 Feb 201...|$|E
30|$|One {{additional}} {{issue is}} about user experience. For the whole sensitive phone number, although IM-Visor brings only 1.84 % reception latency, the display latency may be user-perceptible. Recalling policies in “Sensitive keystroke analysis” section, IM-Visor enforces two different policies (i.e., context-based policy and prefix-matching policy) to analyze user input. With the context-based policy, IM-Visor will treat every single number as sensitive and commit it to a user app one by one, so the display latency is non-perceptible. With the prefix-matching policy, the display latency is user-perceptible for sensitive keystrokes. For a sensitive <b>numeric</b> <b>string</b> like phone number, the prefix-matching of IM-Visor cannot determine the sensitiveness of input {{until the last}} number has been typed. Hence, from the view of a user, no character is displayed until the last number of whole sensitive data has been typed. To {{strike a balance between}} user privacy and experience, those long sensitive string in user-defined sensitive data set will be maintained in the form of shorter pieces to alleviate the uncomfortable display latency. For example, a sensitive phone number “ 1320469299 ” will be automatically maintained in the form of two shorter pieces like “ 13204 ” and “ 69299 ”.|$|E
40|$|Paper plays {{a crucial}} role in many {{developing}} world information practices. However, paper-based records are inefficient, error-prone and difficult to aggregate. Therefore we need to link paper with the flexibility of online information systems. A mobile phone is the perfect bridging device. Long battery life, connectivity, solid-state memory, low price and immediate utility make it better suited to developing world conditions than a PC. However, mobile software platforms are difficult to use, difficult to develop for, and make the assumption of ubiquitous connectivity. To address these limitations we present CAM – a framework for developing mobile applications for the rural developing world. CAM applications are accessed by capturing barcodes using the phone camera, or by entering <b>numeric</b> <b>strings</b> with the keypad. Supporting minimal navigation, direct linkage to paper practices and offline multimedia interaction, CAM is uniquely adapted to rural user, application and infrastructure constraints. 1...|$|R
40|$|In {{domain of}} {{analytic}} cursive word recognition, {{there are two}} main approaches: explicit segmentation based and implicit segmentation based. However, both approaches have their own shortcomings. To overcome individual weaknesses, this paper presents a hybrid strategy for recognition of strings of characters (words or numerals). In a two stage dynamic programming based, lexicon driven approach, first an explicit segmentation is applied to segment either cursive andwritten words or <b>numeric</b> <b>strings.</b> However, at this stage, segmentation points are not finalized. In the second verification stage, statistical features are extracted from each segmented area to recognize characters using a trained neural network. To enhance segmentation and recognition accuracy, lexicon is consulted using existing dynamic programming matching techniques. Accordingly, segmentation points are altered to decide true character boundaries byusing lexicon feedback. A rigorous experimental protocol shows high performance of the proposed method for cursive handwritten words and numeral strings...|$|R
40|$|Affiliation Exposure is an {{exposure}} model for two-mode affiliation data, where actors have shared activities together and these activities {{expose them to}} certain behaviors or influence. Starting with an affiliation matrix A, a row-normalized weight matrix W is computed based on A*A', and then multiplied by the attribute vector Y. All inputs must be <b>numeric</b> variables (<b>strings</b> must be converted). affiliation data, attributes...|$|R
