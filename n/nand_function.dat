6|11|Public
50|$|Because the <b>NAND</b> <b>function</b> has {{functional}} completeness all logic {{systems can}} be converted into NAND gates. This is also true for NOR gates. In principle, any combinatorial logic function can be realized with enough NAND gates.|$|E
40|$|We {{describe}} a general method of proving degree lower bounds for conical juntas (nonnegative combinations of conjunctions) that compute recursively defined boolean functions. Such lower bounds {{are known to}} carry over to communication complexity. We give two applications: - AND-OR trees. We show a near-optimal ~Omega(n^{ 0. 753 [...] . }) randomised communication lower bound for the recursive <b>NAND</b> <b>function</b> (a. k. a. AND-OR tree). This answers an open question posed by Beame and Lawry. - Majority trees. We show an Omega(2. 59 ^k) randomised communication lower bound for the 3 -majority tree of height k. This improves over the state-of-the-art already {{in the context of}} randomised decision tree complexity...|$|E
40|$|In Boolean algebra, it {{is known}} that the logical {{function}} that corresponds to the negation of the conjunction [...] NAND [...] is universal in the sense that any other logical function can be built based on it. This property makes it essential to modern digital electronics and computer processor design. Here, we design a molecular Turing machine that computes the <b>NAND</b> <b>function</b> over binary strings of arbitrary length. For this purpose, we will perform a mathematical abstraction of the kind of operations that can be done over a double-stranded DNA molecule, as well as presenting a molecular encoding of the input symbols for such a machine...|$|E
40|$|A {{monolithic}} multi-terminal {{logic device}} that functions both optically and electrically as an &quot;ORNAND &quot; gate, is demonstrated {{for the first}} time. The device, based on the real-space transfer of hot electrons into a complementary collector layer, has been implemented in MBE-grown InGaAsflnAlAs heterostructure. Excellent performance is obtained at room temperature. The output current and optical power both exhibit or and <b>nand</b> <b>functions</b> of voltages of any {{two of the three}} input terminals, these functions being interchangeable by the voltage on the third terminal...|$|R
40|$|Reversible circuit {{designing}} is {{the area}} where researchers are focussing more and more for the generation of low loss digital system designs. Researchers are using the concept of Reversible Logic in many areas such as Nanotechnology, low loss computing, optical computing, low power CMOS design etc. Here we have proposed a novel design approach for a 2 -bit binary Arithmetic Logic Unit (ALU) using optimized 8 : 1 multiplexer circuit with reversible logic concept [1]. This ALU circuit can perform complement, transfer, addition, subtraction, multiplication, OR, XOR, <b>NAND</b> <b>functions</b> on given values. The ALU circuit has been simulated on Modelsim tool and synthesised for Xilinx Spartan 3 E with Device XC 3 S 500 E with 200 MHz frequency. This 2 -bit ALU using reversible logic is useful for the designs of low power loss systems...|$|R
30|$|The carbon {{nanotube}} full adder presented in [15] is another majority function based with 14 transistors and 3 capacitors. To design this full adder, <b>NAND</b> and NOR <b>functions</b> are also used.|$|R
40|$|Abstract. Chaos {{computing}} {{is a new}} {{circuit design}} scheme of using chaos computing units to achieve reconfigurable logic gates. The computing unit can function as different kinds of logic gates by changing external parameters. In this paper, the possibilities of expanding the function of a chaotic NOR gate proposed in the literature is studied. The numerical model for the circuit design was built by constructing differential equations fit for Matlab integration mechanism. Besides, numerical model for integrator saturation was built to make results of numerical simulation conform to that of circuit simulation. Analysis {{of the impact of}} integrator saturation was done. With the analysis and by changing the control voltage, <b>NAND</b> <b>function</b> was expanded for the original chaotic logic gate that was only able to function as a NOR gate. By adding the function control signal to the input end and setting the voltage of it to different levels, the computing unit becomes a real time reconfigurable one...|$|E
40|$|We {{construct}} a universal quantum computer following Deutsch’s original proposal {{of a universal}} quantum Turing machine (UQTM). Like Deutsch’s UQTM, our machine can emulate any classical Turing machine and can execute any algorithm that can be implemented in the quantum gate array framework but {{under the control of}} a quantum program, and hence is universal. We present the architecture of the machine, which consists of a memory tape and a processor and describe the observables that comprise the registers of the processor and the instruction set, which includes a set of operations that can approximate any unitary operation to any desired accuracy and hence is quantum computationally universal. We present the unitary evolution operators that act on the machine to achieve universal computation and discuss each of them in detail and specify and discuss explicit program halting and concatenation schemes. We define and describe a set of primitive programs in order to demonstrate the universal nature of the machine. These primitive programs facilitate the implementation of more complex algorithms and we demonstrate their use by presenting a program that computes the <b>NAND</b> <b>function,</b> thereby also showing that the machine can compute any classically computable function. Antonio A. Lagana, M. A. Lohe, and Lorenz von Smeka...|$|E
40|$|Reversible circuits, which permute the set {{of input}} vectors, have {{potential}} applications in nanocomputing [3], low power design [1], digital signal processing [6], and quantum computing [4]. This paper shows that given a reversible circuit C {{and a set of}} wires F of C, it is NP-hard to generate a minimum complete test set for stuck-at faults on F. A gate is reversible if the Boolean function it com-putes is bijective. If a reversible gate has k input and output wires, it is called a k k gate, or a gate on k wires. A circuit is reversible if all gates are reversible and are interconnected without fanout or feedback. If a reversible circuit has n input and output wires, it is called an n n circuit. We shall focus our attention to detecting faults in a reversible circuit C which cause wires to be stuck-at- 0 or stuck-at- 1. Let L(C) be {{the set of}} all possible fault locations in C. L(C) consists of all input and output wires of C, and input wires to gates in C. For an n n reversible circuit C, a test is an input vector in f 0; 1 gn. A set of tests that detects all faults on F L(C) is said to be complete for F. Let SF (C) be the minimum cardinality of a complete test set for F. We denote SF (C) by S(C) if F = L(C). A k-CNOT gate is a reversible gate on k + 1 wires. It passes some k inputs, referred to as control bits, to the outputs unchanged, and inverts the remaining input, referred to as target bit, if the control bits are all 1. The 0 -CNOT gate is just an ordinary NOT gate. A CNOT gate is a k-CNOT gate for some k. Some CNOT gates are shown in Fig. 1, where a control bit and target bit are denoted by a black dot and ring-sum, respectively. A CNOT circuit is a reversible circuit consisting of only CNOT gates. Since the 2 -CNOT gate can implement the <b>NAND</b> <b>function,</b> any Boolean function can be implemented by a CNOT circuit. It is shown in [2] that S(C) = O(log jL(C) j) for any reversible circuit C. Moreover, it is shown in [5] that S(C) n if C is an n n CNOT circuit with no 0 -CNOT or 1 -CNOT gates. We show in this paper that it is NP-hard to compute SF (C) for a given CNOT circuit C and F L(C). Let PSfrag replacements t...|$|E
40|$|A {{molecular}} dyad {{consisting of}} a photochromic dihydroindolizine unit covalently linked to a porphyrin performs, when illuminated through a third-harmonic-generating crystal, the functions of both an AND and a NAND Boolean logic gate with shared all-optical inputs. The NAND gate {{is of particular interest}} as it is a so-called universal gate, and hence all other digital systems can be implemented by combinations of <b>NAND</b> gates. The <b>functions</b> of the AND and the NAND gates rely on changes in absorption and emission of the dyad in the visible spectral region upon isomerization of the photochromic unit. The change in absorption which forms the basis for the AND gate function is ascribed to the colorization/decolorization of the photochrome itself in response to the optical inputs. The variation in emission intensity which constitutes the <b>NAND</b> gate <b>function</b> {{is a result of the}} changes in redox properties of the photochrome that follow upon isomerization, such that only one of the two isomers is competent to quench the porphyrin emission by electron transfer...|$|R
40|$|Recently, we have {{demonstrated}} a picosecond all-optical switch, which also {{functions as a}} partial all-optical NAND logic gate using a novel polydiacetylene that is synthesized in our laboratory. The nonlinear optical properties of the polydiacetylene material are measured using the Z-scan technique. A theoretical model based on a three level system is investigated and the rate equations of the system are solved. The theoretical calculations are proven to match nicely with the experimental results. The absorption cross-sections for both the first and higher excited states are estimated. The analyses also show that the material suffers a photochemical change beyond {{a certain level of}} the laser power and its physical properties suffer radical changes. These changes are the cause for the partial <b>NAND</b> gate <b>function</b> and the switching mechanism...|$|R
50|$|Strictly speaking, a 2-input <b>NAND</b> or NOR <b>function</b> is {{sufficient}} to form any arbitrary Boolean function set. But in modern ASIC design, standard-cell methodology is practiced with a sizable library (or libraries) of cells. The library usually contains multiple implementations of the same logic function, differing in area and speed. This variety enhances the efficiency of automated synthesis, place, and route (SPR) tools. Indirectly, it also gives the designer greater freedom to perform implementation trade-offs (area vs. speed vs. power consumption). A complete group of standard-cell descriptions is commonly called a technology library.|$|R
40|$|AbstractIn this paper, we {{extend the}} manner of {{defining}} the evolution update of discrete dynamical systems on Boolean functions, without limiting the local functions to being dependent restrictions of a global one. Then, we analyze the cases concerned with parallel dynamical systems with the OR, AND, <b>NAND</b> and NOR <b>functions</b> as independent local functions over undirected and also directed dependency graphs. This extension of the update method widely generalizes the traditional one where only a global Boolean function is considered for establishing the evolution operator of the system. Besides, our analysis allows us to show a richer dynamics in these new kinds of parallel dynamical systems...|$|R
40|$|According to {{conservation}} of information theorems, performance of an arbitrarily chosen search, on average, does {{no better than}} blind search. Domain expertise and prior knowledge about search space structure or target location is therefore essential in crafting the search algorithm. The effectiveness of a given algorithm can be measured by the active information introduced to the search. We illustrate this by identifying sources of active information in Avida, a software program designed to search for logic <b>functions</b> using <b>nand</b> gates. Avida uses stair step active information by rewarding logic functions using {{a smaller number of}} <b>nands</b> to construct <b>functions</b> requiring more. Removing stair steps deteriorates Avida’s performance while removing deleterious instructions improves it. Some search algorithms use prior knowledge better than others. For the Avida digital organism, a simple evolutionary strategy generates the Avida target in far fewer instructions using only the prior knowledge available to Avida...|$|R
40|$|Abstract:- Polymorphic digital {{circuits}} are circuits composed of polymorphic (multifunctional) {{as well as}} ordinary gates. In addition to its standard logic <b>function</b> (such as <b>NAND),</b> a polymorphic gate exhibits another logic function which is activated under a specific condition, for example, when Vdd, temperature, illumination or a special signal reaches a certain level. This paper describes existing polymorphic gates and their features, benefits and limits and discusses special class of polymorphic gates – bifunctional polymorphic gates controlled by a special signal. These gates seem to be most flexible polymorphic gates. In the paper a new two-input bifunctional gate for polymorphic circuits is proposed. The gate produces <b>NAND</b> or XOR <b>function</b> according to a special signal. The proposed gate is effective in terms of area overhead – it consists of 9 transistors only, while corresponding circuit employing conventional gates consists of more than 10 transistors. Key-Words: hardware engineering, {{digital circuits}}, CMOS logic gates, polymorphic electronics, VLSI, reconfigurable digital circuits...|$|R
40|$|This {{dissertation}} describes using theory, {{computer simulations}} and laboratory measurements {{a new class}} of real time reconfigurable UV-programmable floating-gate circuits operating with current levels typically in the pA to μ A range, implemented in a standard double-poly CMOS technology. A new design method based on using the same basic two-MOSFET circuits extensively is proposed, meant for improving the opportunities to make larger FGUVMOS circuitry than previously reported. By using the same basic circuitry extensively, instead of different circuitry for basic digital functions, the goal is to ease UV-programming and test and save circuitry on chip and I/O-pads. Matching of circuitry should also be improved by using this approach. Compact circuitry can be made, reducing wiring and active components. Compared to earlier FGUVMOS approaches the number of transistors for implementing the CARRY’ of a FULL-ADDER is reduced from 22 to 2. A complete FULL-ADDER can be implemented using only 8 transistors. 2 - MOSFET circuits able to implement CARRY’, NOR, <b>NAND</b> and INVERT <b>functions</b> are demonstrated by measurements on chip, working with power supply voltages ranging from 800 mV down to 93 mV. An 8 -transistor FULL-ADDER might use 2500 times less energy than a FULL ADDER implemented using standard cells in the same 0. 6 μ m CMOS technology while running at 1 MHz. The circuits are also shown to be {{a new class of}} linear threshold elements, which is the basic building blocks of neural networks. Theory is developed as a help in the design of floating gate circuits. dr. ing. dr. ing...|$|R
40|$|It {{is beyond}} dispute that {{to find ways}} to apply ideas from Mathematics to Computation is a {{compelling}} need. In this sense, the development of the theory of Computation {{is one of the most}} important tasks in modern Mathematics. In fact, several mathematical concepts have been revealed as fundamental in order to establish this theory of Computation. In this thesis, Boolean algebras, graphs and discrete dynamical systems are mixed properly to construct a mathematical model, named parallel dynamical system (PDS) that allows us to formalize and analyze computational processes, thus contributing to the development of the theory of Computation. In computer processes, there are many entities and each entity has a state at a given time, usually ON/OFF. Thus, it is natural to consider that its state can be modelled by the basic Boolean algebra { 0, 1 }. The update of the states of these entities constitutes an evolution in time of the system, that is, a discrete dynamical system. The evolution of the system depends on the relations among entities, which are usually represented by a graph which is called the dependency graph of the system, and on local functions, each of them acting on the state of an entity and the states of the entities related to it. If the states of the entities are updated in a parallel (or synchronous) manner, the system is called parallel dynamical system (PDS), while if they are updated in a sequential (or asynchronous) order, the system is named sequential dynamical system (SDS). Our main goal in this thesis is to give a complete characterization of the orbit structure for the case of PDS over undirected graphs and essential properties for PDS over directed graphs. Since computational studies become inefficient when the number of entities is big enough, the unique way to give general results for these systems is to find out their properties analytically, as done in this work in Chapters 2, 3 and 4 in order to describe the different coexistent periodic orbits of PDS. Firstly, we generalize some known results, giving a complete characterization of the orbit structure of PDS over undirected dependency graphs, with maxterms and minterms Boolean functions as global evolution operators. Secondly, we obtain essential properties of the orbit structure of PDS over directed dependency graphs (PDDS). In this sense, for PDDS on general maxterms and minterms, it is shown that the situation becomes more involved, since any periodic orbit can appear, so breaking the pattern found for the undirected case, where only fixed points or 2 -periodic orbits can exist. We also demonstrate that this breakdown is due to the existence of directed cycles in the directed dependency graph, while for PDDS over acyclic directed dependency graphs the periodic orbits continue being only fixed points or 2 -periodic ones. After that, we proposed and analyzed in detail two extensions of PDS. On one hand, we extend the manner of defining the evolution update of these systems, without limiting the local functions to be dependent restrictions of a global one. Concretely, we analyze the cases concerned with the AND, OR, <b>NAND</b> and NOR <b>functions</b> as independent local functions over undirected and also directed dependency graphs. This extension allows us to show a richer dynamics in these new kinds of PDS. On the other hand, we introduce another wide generalization by considering that the states of the entities can take values in an arbitrary Boolean algebra. This definition widely extends the traditional one, where it is assumed that every entity can take values in the simplest Boolean algebra { 0, 1 }. Finally, since the coexistence of periodic orbits depends on the number of entities, their connections and the Boolean operator, analytical results cannot be given in general. In view of this, we develop several matrix methods for the computation of orbits in these systems. These algorithms constitute a new tool for the study of orbits of PDS. Moreover, we extend these methods to the case of SDS, even when the local functions are locally independent...|$|R

