25|10000|Public
5000|$|Venti - A <b>network</b> <b>storage</b> <b>system</b> that {{permanently}} stores data blocks.|$|E
50|$|LayerWalker Technology, Inc. is a fabless {{integrated}} circuit design company that announced a <b>network</b> <b>storage</b> <b>system</b> on a chip (SoC). Their products targeted digital home, {{small business and}} consumer electronics markets.|$|E
50|$|Venti is a <b>network</b> <b>storage</b> <b>system</b> that {{permanently}} stores data blocks. A 160-bit SHA-1 hash of {{the data}} (called score by Venti) acts as the address {{of the data}}. This enforces a write-once policy since no other data block can be found with the same address: the addresses of multiple writes of the same data are identical, so duplicate data is easily identified and the data block is stored only once. Data blocks cannot be removed, making it ideal for permanent or backup storage. Venti is typically used with Fossil to provide a file system with permanent snapshots.|$|E
40|$|Abstract—Distributed <b>networked</b> <b>storage</b> <b>systems</b> {{provide the}} <b>storage</b> {{service on the}} Internet. We address the privacy issue of the {{distributed}} <b>networked</b> <b>storage</b> <b>system.</b> It is desired that data stored in the system remain private even if all storage servers in the system are compromised. The major challenge of designing these distributed <b>networked</b> <b>storage</b> <b>systems</b> {{is to provide a}} better privacy guarantee while maintaining the distributed structure. To achieve this goal, we introduce secure decentralized erasure code, which combines a threshold public key encryption scheme and a variant of the decentralized erasure code. Our secure distributed <b>networked</b> <b>storage</b> <b>system</b> constructed by the secure decentralized erasure code is decentralized, robust, private, and with low storage cost. Index Terms—Networked <b>storage</b> <b>system,</b> distributed <b>storage</b> <b>system,</b> decentralized erasure code, threshold encryption, security. Ç...|$|R
40|$|Abstract. We model <b>networked</b> <b>storage</b> <b>systems</b> with distributed, cryptographically {{enforced}} file-access {{control in}} an applied pi calculus. The calculus contains cryptographic primitives and supports file-system constructs, including access revocation. We establish that the <b>networked</b> <b>storage</b> <b>systems</b> implement simpler, centralized storage specifications with local access-control checks. More specifically, we {{prove that the}} former systems preserve safety properties of the latter systems. Focusing on security, we then derive strong secrecy and integrity guarantees for the <b>networked</b> <b>storage</b> <b>systems.</b> ...|$|R
40|$|This paper {{considers}} {{the problem of}} balancing locality and load in <b>networked</b> <b>storage</b> <b>systems</b> with multiple <b>storage</b> devices (or bricks). Data distribution affects locality and load balance across the devices in a <b>networked</b> <b>storage</b> <b>system.</b> This paper proposes a user-centric data migration scheme which tries to balance locality and load in such <b>networked</b> <b>storage</b> <b>systems.</b> The presented approach automatically and transparently manages migration of data blocks among disks as data access patterns and loads change over time. We implemented a prototype system, embodying our ideas, on PCs running Linux. This paper presents the design of user-centric migration and an evaluation of it through realistic experiments. 1...|$|R
40|$|This article {{describes}} a <b>network</b> <b>storage</b> <b>system,</b> which is developed on the embedded system platform. It uses the open-source embedded real-time operating system kernel uCOS-II. Because the kernel {{is far from}} complete, such as {{the lack of a}} file system, device management, network protocol stack, graphical user interface, but it is small and open source. We extended its functions, such as to add LwIP network protocol stack, IDE hard drive, DM 9000 NIC driver, NOR FALSH drive and a file system that supports large-capacity memory and etc, making it an embedded <b>network</b> <b>storage</b> <b>system</b> based on uCOS-II. </div...|$|E
40|$|Collaborating users {{need to move}} terabytes of data {{among their}} sites, often {{involving}} multiple protocols. This process is very fragile and involves considerable human involvement to deal with failures. In this work, we propose data pipelines, an automated system for transferring data among collaborating sites. It speaks multiple protocols, has sophisticated flow control and recovers automatically from <b>network,</b> <b>storage</b> <b>system,</b> software and hardware failures. We successfully used data pipelines to transfer three terabytes of DPOSS data from SRB mass storage server at San Diego Supercomputing Center to UniTree mass storage at NCSA. The whole process did not require any human intervention and the data pipeline recovered automatically from various <b>network,</b> <b>storage</b> <b>system,</b> software and hardware failures...|$|E
40|$|Enterprise storage {{systems are}} facing {{enormous}} challenges due to increasing growth and heterogeneity {{of the data}} stored. Designing future storage systems requires comprehensive insights that existing trace analysis methods are ill-equipped to supply. In this paper, we seek to provide such insights by using a new methodology that leverages an objective, multidimensional statistical technique to extract data access patterns from <b>network</b> <b>storage</b> <b>system</b> traces. We apply our method on two large-scale real-world production <b>network</b> <b>storage</b> <b>system</b> traces to obtain comprehensive access patterns and design insights at user, application, file, and directory levels. We derive simple, easily implementable, thresholdbased design optimizations that enable efficient data placement and capacity optimization strategies for servers, consolidation policies for clients, and improved caching performance for both...|$|E
50|$|Linksys is an American company selling data {{networking}} hardware products mainly to home users and small businesses. Its products include wired and wireless routers, Ethernet switches, VoIP equipment, wireless Internet video cameras, audio visual products and <b>network</b> <b>storage</b> <b>systems.</b>|$|R
5000|$|Energy: testing {{services}} for electricity <b>networks</b> and <b>storage</b> <b>systems</b> ...|$|R
40|$|In this dissertation, {{we examine}} {{some of the}} {{challenges}} faced by the emerging <b>networked</b> <b>storage</b> <b>systems.</b> We focus on two main issues. Current file <b>systems</b> allocate <b>storage</b> statically {{at the time of}} their creation. This results in many suboptimal scenarios, for example: (a) space on the disk is not allocated well across multiple file systems, (b) data is not organized well for typical access patterns. We propose Virtual Allocation for flexible storage allocation. Virtual allocation separates storage allocation from the file system. It employs an allocate-on-write strategy, which lets applications fit into the actual usage of storage space without regard to the configured file system size. This improves flexibility by allowing storage space to be shared across different file systems. We present the design of virtual allocation and an evaluation of it through benchmarks based on a prototype system on Linux. Next, based on virtual allocation, we consider the problem of balancing locality and load in <b>networked</b> <b>storage</b> <b>systems</b> with multiple <b>storage</b> devices (or bricks). Data distribution affects locality and load balance across the devices in a <b>networked</b> <b>storage</b> <b>system.</b> We propose user-optimal data migration scheme which tries to balanc...|$|R
40|$|Minist Informat & Commun, IEEE Commun Soc, IEEE Reg 10, Korean Inst Commun Sci, IEEK Commun Soc, Open Stand & Internet Assoc, Korea Inst Informat Scientists & Engineers, Inst Informat Technol Advancement, Korea Res Fdn, Elect & Telecommun ResTodays storage {{paradigm}} is shifting from the closed and managed mode {{to be more}} open and dynamic. <b>Network</b> <b>storage</b> <b>system</b> {{can be made up}} of a group of loosely coupled and heterogeneous storage resources. But this openness exposes the data dire...|$|E
40|$|This paper {{presents}} a recovery protocol for block I/O operations in Slice, a storage system architecture for high-speed LANs incorporating network-attached block storage. The {{goal of the}} Slice architecture {{is to provide a}} network file service with scalable bandwidth and capacity while preserving compatibility with off-theshelf clients and file server appliances. The Slice prototype virtualizes the Network File System (NFS) protocol by interposing a request switching filter at the client's interface to the <b>network</b> <b>storage</b> <b>system.</b> The distribute...|$|E
40|$|This paper {{presents}} a recovery protocol for block I/ 0 operations in Slice, a storage system architecture for highspeed LANs incorporating network-attached block storage. The {{goal of the}} Slice architecture {{is to provide a}} network file service with scalable bandwidth and capacity while preserving compatibility with off-the-shelf clients and file server appliances. The Slice prototype "virtualizes" the Network File System (NFS) protocol by interposing a request switching filter at the client's interface to the <b>network</b> <b>storage</b> <b>system</b> (e. g., in a network adapter or switch) ...|$|E
50|$|Pillar Data Systems, a {{computer}} data storage company headquartered in San Jose, California, developed midrange and enterprise <b>network</b> <b>storage</b> <b>systems.</b> Pillar Data employed 325 people and sold its products to {{organizations in the}} financial services, healthcare, government and legal industries. Its primary product-offering was the Axiom platform.|$|R
25|$|On December 9, 2008, Dell and EMC {{announced}} the multi-year extension, through 2013, {{of the strategic}} partnership with EMC. In addition, Dell expanded its product lineup by adding the EMC Celerra NX4 <b>storage</b> <b>system</b> to the portfolio of Dell/EMC family of <b>networked</b> <b>storage</b> <b>systems</b> and partnered on {{a new line of}} data deduplication products as part of its TierDisk family of data storage devices.|$|R
40|$|Abstract—Networked <b>storage</b> <b>systems</b> provide <b>storage</b> {{services}} for users over <b>networks.</b> Secure <b>networked</b> <b>storage</b> <b>systems</b> store encrypted data to guarantee data confidentiality. However, using encryption schemes somehow restricts the access control function over stored data. We address the access control function for a secure <b>networked</b> <b>storage</b> <b>system</b> by proposing a fine-grained access control mechanism. In our mechanism, a user cannot only {{read or write}} data but also grant the reading permissions of a single file or a whole directory of files to others with low cost. Moreover, these functions are supported in a confidential way against honest-but-curious storage servers. Our technical contribution is to propose a hybrid encryption scheme for a typical structure of a file system by integrating a hierarchical proxy re-encryption scheme and a hierarchical key assignment scheme. We measure the computation overhead for reading, writing, and granting operations by experiments. Our experimental results show that getting a finer access control mechanism does not cost much. Index Terms—Networked storage system; access control mechanism; proxy re-encryption; hybrid encryption; I...|$|R
40|$|This paper {{describes}} a <b>network</b> <b>storage</b> <b>system,</b> called Venti, intended for archival data. In this system, a unique hash of a block's contents {{acts as the}} block identifier for read and write operations. This approach enforces a write-once policy, preventing accidental or malicious destruction of data. In addition, duplicate copies of a block can be coalesced, reducing the consumption of storage and simplifying the implementation of clients. Venti is a building block for constructing a variety of storage applications such as logical backup, physical backup, and snapshot file systems...|$|E
40|$|Abstract: A more {{realistic}} threat on cryptographic techniques (than breaking the un-derlying computational problems) is exposure of stored secrets {{that may be}} secret keys, private keys, password verification data and/or password-encrypted keys. In this {{paper we propose a}} secure <b>network</b> <b>storage</b> <b>system</b> (NSS) that provides not only a higher level of security against exposure of stored secrets but also information privacy with respect to the servers involved. The assumption of the NSS protocol is that a client remembers his password and stores an additional secret on insecure devices. We also analyzed its security of the NSS protocol, followed by some discussions whether the assumption is reasonable or not...|$|E
40|$|This paper {{presents}} Slice, a new {{storage system}} architecture for highspeed LANs incorporating network-attached block storage. Slice interposes a request switching filter [...] called a /proxy [...] along the network path between {{the client and}} the <b>network</b> <b>storage</b> <b>system</b> (e. g., in a network adapter or switch). The purpose of the/proxy is to route requests among a server ensemble that implements the file service. We present a prototype that uses this approach to virtualize the standard NFS file protocol to provide scalable, high-bandwidth file service to ordinary NFS clients. The paper presents and justifies the architecture, proposes and evaluates several request routing policies realizable within the architecture, and explores {{the effects of these}} policies on service structur...|$|E
40|$|Abstract—Traditionally, <b>network</b> <b>storage</b> <b>systems</b> have mainly been {{dominated}} by two IP-based storage technologies, i. e., <b>Network</b> Attached <b>Storage</b> (NAS) and Storage Area Net-work (SAN). In recent years, cloud based storage (e. g., Amazon S 3) has gained growing popularity for its high flexibility and cross-platform compatibility. Many enterprises are considering to replace traditional <b>storage</b> <b>systems</b> with cloud-based systems. Evaluating such a transition demands a systematic study on understanding the performance behaviours of the emerging cloud storage. To fill in this gap, in this paper, we conduct a comprehensive study on the three <b>storage</b> <b>systems</b> with realistic <b>network</b> conditions. Specifically, we select one representativ...|$|R
5000|$|P3 Energy GmbH: Management and {{technology}} consulting for the German energy supply industry, and testing services for electricity <b>networks</b> and <b>storage</b> <b>systems</b> since 2010; headquarters in Aachen ...|$|R
40|$|In this paper, we {{describe}} methods for predicting {{the performance of}} Computational Grid resources (machines, <b>networks,</b> <b>storage</b> <b>systems,</b> etc.) using computationally inexpensive statistical techniques. The predictions generated in this manner are intended to support adaptive application scheduling in Grid settings, and on-line fault detection. We describe a mixture-of-experts approach to non-parametric, univariate time-series forecasting, and detail {{the effectiveness of the}} approach using example data gathered from “production ” (i. e. non-experimental) Computational Grid installations. ...|$|R
40|$|Modeling and {{simulation}} is {{an effective}} way to design and evaluate the performance of a <b>network</b> <b>storage</b> <b>system.</b> OSDsim is designed and developed for simulation of an Object-based Storage Device (OSD) system. An OSD File System (OSDFS) has been designed and developed for OSDsim. It can provide high throughput for big object requests and also maintain high disk utilization for small object requests. The OSDFS can be configured to suit different workload patterns. The disk module designed and developed for OSDsim makes use of the dynamic disk profile extracted from the actual disk drive through interrogative and empirical methods. Therefore disk drive simulation should be accurate. OSDsim has been validated and the write error is within 5 %. 1...|$|E
40|$|Abstract. This paper {{presents}} Slice, a new {{storage system}} architecture for high-speed LANs incorporating network-attached block storage. Slice interposes a request switching lter | called a proxy | along the network path between {{the client and}} the <b>network</b> <b>storage</b> <b>system</b> (e. g., in a network adapter or switch). The purpose of the proxy is to route requests among a server ensemble that implements the le service. We present aprototype that uses this approach to virtualize the standard NFS le protocol to provide scalable, high-bandwidth le service to ordinary NFS clients. The paper presents and justi es the architecture, proposes and evaluates request routing policies realizable within the architecture, and explores the e ects of these policies on service structure. ...|$|E
40|$|Computer {{security}} is of growing {{importance in the}} increasingly networked computing environment. This work examines the issue of high-performance network security, specifically integrity, by focusing on integrating security into <b>network</b> <b>storage</b> <b>system.</b> Emphasizing the cost-constrained environment of storage, we examine how current software-based cryptography cannot support storage 2 ̆ 7 s Gigabit/sec transfer rates. To solve this problem, we introduce a novel message authentication code, based on stored message digests. This allows storage to deliver high-performance, a factor of five improvement in our prototype 2 ̆ 7 s integrity protected bandwidth, without hardware acceleration for common read operations. For receivers, where precomputation cannot be done, we outline an inline message authentication code that minimizes buffering requirements...|$|E
40|$|Recent {{gains in}} {{communication}} speeds motivate {{the design of}} <b>network</b> <b>storage</b> <b>systems</b> whose performance tracks the rapid advances in network technology rather than the slower rate of advances in disk technology. Viewing the network as the primary access path to I/O is an attractive approach to building incrementally scalable, cost-effective, and easy-to-administer <b>storage</b> <b>systems</b> that move data at network speeds. This paper gives an overview of research on highspeed <b>network</b> <b>storage</b> in the Trapeze project. Our work is directed primarily at delivering gigabit-per-second performance for <b>network</b> <b>storage</b> access, using custom firmware for Myrinet networks, a lightweight messaging system optimized for block I/O traffic, and a new kernel <b>storage</b> layer incorporating <b>network</b> memory and parallel disks. Our current prototype is capable of client file access bandwidths approaching 100 MB/s, with network memory fetch latencies below 150 s for 8 KB blocks. ...|$|R
40|$|Summary. In this paper, we {{describe}} methods for predicting {{the performance of}} Computational Grid resources (machines, <b>networks,</b> <b>storage</b> <b>systems,</b> etc.) using computationally inexpensive statistical techniques. The predictions generated in this manner are intended to support adaptive application scheduling in Grid settings, and on-line fault detection. We describe a mixture-of-experts approach to non-parametric, univariate time-series forecasting, and detail {{the effectiveness of the}} approach using example data gathered from “production ” (i. e. non-experimental) Computational Grid installations. See footnote 1 for information on sources of support for this work. ...|$|R
40|$|ITC/USA 2008 Conference Proceedings / The Forty-Fourth Annual International Telemetering Conference and Technical Exhibition / October 27 - 30, 2008 / Town and Country Resort & Convention Center, San Diego, CaliforniaA common {{concern in}} {{telemetry}} post-processing environments is adequate disk storage capacity to house captured and post-processed telemetry data. In today's network environments {{there are many}} storage solutions that can be deployed to address storage needs. Recent trends in <b>storage</b> <b>systems</b> reveal movement to implement security services in <b>storage</b> <b>systems.</b> After reviewing <b>storage</b> options appropriate for telemetry post-processing environments; the security services such systems typically offer will also be discussed and contrasted with other third party security services that might be implemented directly {{on top of a}} <b>networked</b> <b>storage</b> <b>system...</b>|$|R
40|$|As {{demand for}} storage {{bandwidth}} and capacity grows, designers have proposed {{the construction of}} petabytescale storage systems. Rather than relying upon a few very large storage arrays, these petabyte-scale systems have thousands of individual disks working together to provide aggregate storage system bandwidth exceeding 100 GB/s. However, providing this bandwidth to storage system clients becomes difficult due to limits in network technology. This paper discusses different interconnection topologies for large disk-based systems, drawing on previous experience from the parallel computing community. By choosing the right <b>network,</b> <b>storage</b> <b>system</b> designers can {{eliminate the need for}} expensive high-bandwidth communication links and provide a highly-redundant network resilient against single node failures. We analyze several different topology choices and explore the tradeoffs between cost and performance. Using simulations, we uncover potential pitfalls, such as the placement of connections between the storage system network and its clients, that may arise when designing such a large system...|$|E
40|$|This paper comtemplates two {{important}} information-provisioning pradigms - caching and replication, and proposes {{a new approach}} on <b>network</b> <b>storage</b> <b>system</b> {{in order to meet}} the increasing demands for large files. The key idea of our system is to have two tailor-made servers for large and small object, respectively. Modified proxy cache is responsible for store and deliver small objects. For large objects, we introduce a replication mechanism. By replicating large objects in a dedicated server and relaying through a proxy cache, storage can be fully utilized. Large objects can be accessed without a priori knowledge of server location. Our system provides a scalable solution to the continuing growth of traffic volume while it retains transparency for users. It is also designed to ensure compatibility with existing networking standards, applications and system software. I. Introduction Both caching and replication technology have been successful in improving response time and reducing serve [...] ...|$|E
40|$|This paper {{describes}} a <b>network</b> <b>storage</b> <b>system,</b> called Venti, intended for archival data. In this system, a unique hash of a block’s contents {{acts as the}} block identifier for read and write operations. This approach enforces a write-once policy, preventing accidental or malicious destruction of data. In addition, duplicate copies of a block can be coalesced, reducing the consumption of storage and simplifying the implementation of clients. Venti is a building block for constructing a variety of storage applications such as logical backup, physical backup, and snapshot file systems. We have built a prototype {{of the system and}} present some preliminary performance results. The system uses magnetic disks as the storage technology, resulting in an access time for archival data that is comparable to non-archival data. The feasibility of the write-once model for storage is demonstrated using data from over a decade’s use of two Plan 9 file systems. 1...|$|E
40|$|In {{this paper}} we {{introduce}} SPEK (Storage Performance Evaluation Kernel module), a benchmarking tool for measuring and characterizing raw performance of data <b>storage</b> <b>systems</b> at block level. It {{can be used}} for both DAS (Direct Attached Storage) and block level <b>networked</b> <b>storage</b> <b>systems.</b> Each SPEK tool consists of a controller, several workers, and one or more probers. Each worker is a kernel module generating I/O requests to lower level SCSI layer directly. Compared to traditional file system and disk I/O benchmarking tools, SPEK is highly accurate and efficient since it runs at kernel level and eliminates file system overheads. It is specially suitable for accurately measuring raw performance of data storages at block level without influence of file system cache or buffer cache. Using SPEK, a user can easily simulate realistic workloads and produce detailed profiling data for <b>networked</b> <b>storage</b> as well as DAS. We have built a prototype on Linux and our experiments have demonstrated its accuracy and efficiency in measuring block level <b>storage</b> <b>systems...</b>|$|R
40|$|RAID-II (RAID the second) is a {{scalable}} high-bandwidth network le server for heterogeneous computing environments {{characterized by}} a mixture of high-bandwidth scientic, engineering and multi-media applications and low-latency high-transaction-rate UNIX applications. RAID-II is motivated by three observations: applications are becoming more bandwidth intensive, the I/O bandwidth of workstations is decreasing with respect to MIPS, and recent technological developments in high-performance <b>networks</b> and secondary <b>storage</b> <b>systems</b> make it economical to build high-bandwidth <b>network</b> <b>storage</b> <b>systems.</b> Unlike most existing le servers that use a bus as a system backplane, RAID-II achieves scalability by treating the network as the system backplane. RAID-II is notable because it phys-ically separates les service, the management of le metadata, from storage service, the storage and transfer of le data; stripes les over multiple storage servers for improved performance and reliability; provides separate mechanisms for high-bandwidth and low-latency I/O requests; im-plements a RAID level 5 storage system; and runs LFS, the Log-Structured File System, which is specically designed to support high-bandwidth I/O and RAID level 5 <b>storage</b> <b>systems...</b>|$|R
40|$|Multi-device and {{multi-service}} smart environments make {{heavy use}} of the Internet and intra-net, thus constantly transferring and saving large amounts of digital data leading to an exponential data growth. This {{has led to the}} development of <b>network</b> <b>storage</b> <b>systems</b> such as <b>Storage</b> Area <b>Networks</b> and <b>Network</b> Attached <b>Storage.</b> <b>Network</b> Attached <b>Storage</b> provides a file system level access to data from storage elements that are connected to the network. One of the most widely used protocols in <b>network</b> <b>storage</b> <b>systems,</b> is the Server Message Block(SMB) protocol, that interconnects users from various operating systems such as Windows, Linux and Mac OS. Samba is a popular open-source user-space server that implements the SMB protocol. There have been a multitude of discussions about moving traditional user-space applications like web servers to the kernel-space in order to improve various aspects of the server like CPU utilization, memory utilization, memory footprint, context switching, etc. In this thesis, we have designed and implemented a server in the Linux kernel space. We discuss in detail, the features and functionalities of the newly implemented server. We provide an insight into why some of the design considerations were made, in order to improve the efficiency of protocol handling by the in-kernel file sharing server. We compare the performance of the user-space Samba solution with the in-kernel file sharing solution, implemented and discussed in this thesis, against different workloads to identify the competitiveness of the developed solution. We conclude by discussing what we learned, during the implementation process, along with some ideas for further improving the feature set and performance of the in-kernel server solution...|$|R
