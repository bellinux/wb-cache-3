10000|10000|Public
5|$|Three {{channels}} facilitate lymphatic drainage {{from the}} cervix. The anterior and lateral cervix drains to <b>nodes</b> along the uterine arteries, travelling along the cardinal ligaments {{at the base}} of the broad ligament to the external iliac lymph <b>nodes</b> and ultimately the paraaortic lymph <b>nodes.</b> The posterior and lateral cervix drains along the uterine arteries to the internal iliac lymph <b>nodes</b> and ultimately the paraaortic lymph <b>nodes,</b> and the posterior section of the cervix drains to the obturator and presacral lymph <b>nodes.</b> However, there are variations as lymphatic drainage from the cervix travels to different sets of pelvic <b>nodes</b> in some people. This has implications in scanning <b>nodes</b> for involvement in cervical cancer.|$|E
5|$|As of FreeBSD 5.4, {{support for}} the Common Address Redundancy Protocol (CARP) was {{imported}} from the OpenBSD project. CARP allows multiple <b>nodes</b> to share a set of IP addresses. So {{if one of the}} <b>nodes</b> goes down, other <b>nodes</b> still can serve the requests.|$|E
5|$|From −125,000 till +125,000 {{there are}} only about ten 243-year series at both <b>nodes</b> {{regarding}} all the transits of Venus in this very long time-span, because both <b>nodes</b> of the orbit of Venus move back and forward in time as seen from the Earth.|$|E
30|$|For example, in {{the minimum}} ring of user 1 <node 18, <b>node</b> 17, <b>node</b> 13, <b>node</b> 14, <b>node</b> 18 >, if you choose (<b>node</b> 14, <b>node</b> 13) as the {{starting}} point and the target point, respectively, you can obtain the ring <node 14, <b>node</b> 3, <b>node</b> 2, <b>node</b> 13, <b>node</b> 17, <b>node</b> 18, <b>node</b> 14 >; if you choose (<b>node</b> 13, <b>node</b> 17), you can get the ring <node 14, <b>node</b> 16, <b>node</b> 17, <b>node</b> 18, <b>node</b> 14 >. In order to ensure that the expanded ring can still override the user’s location, it cannot be selected (<b>node</b> 14, <b>node</b> 18) again {{as the starting point}} and destination of the search.|$|R
50|$|We {{assume that}} the channel from the source <b>node</b> to the relay <b>node,</b> from the source <b>node</b> to the {{destination}} <b>node,</b> and from the relay <b>node</b> to the destination <b>node</b> are where the source <b>node,</b> the relay <b>node,</b> and the destination <b>node</b> are denoted <b>node</b> 1, <b>node</b> 2, and <b>node</b> 3, subsequently.|$|R
30|$|For example, in Fig.  1, a {{boundary}} tree, {{which consists of}} <b>node</b> 9 <b>node</b> 10, <b>node</b> 9 <b>node</b> 11, <b>node</b> 9 <b>node</b> 8, and <b>node</b> 8 <b>node</b> 12, is a relative maximum boundary tree.|$|R
5|$|Lymphatic vessels {{from the}} {{parathyroid}} glands drain into deep cervical lymph <b>nodes</b> and paratracheal lymph <b>nodes.</b>|$|E
5|$|Titan {{runs the}} Cray Linux Environment, a full version of Linux on the login <b>nodes</b> that users {{directly}} access, but a smaller, more efficient version on the compute <b>nodes.</b>|$|E
5|$|The yearlong {{conversion}} began October 9, 2011. Between October and December, 96 of Jaguar's 200 cabinets, each containing 24 XT5 blades (two 6-core CPUs per node, four <b>nodes</b> per blade), were {{upgraded to}} XK7 blades (one 16-core CPU per node, four <b>nodes</b> per blade) while {{the remainder of}} the machine remained in use. In December, computation was moved to the 96 XK7 cabinets while the remaining 104 cabinets were upgraded to XK7 blades. ORNL's external ESnet connection was upgraded from 10 Gbit/s to 100 Gbit/s and the system interconnect (the network over which CPUs communicate with each other) was updated. The Seastar design used in Jaguar was upgraded to the Gemini interconnect used in Titan which connects the <b>nodes</b> into a direct 3D torus interconnect network. Gemini uses wormhole flow control internally. The system memory was doubled to 584 TiB. 960 of the XK7 <b>nodes</b> (10 cabinets) were fitted with a Fermi based GPU as Kepler GPUs were not then available; these 960 <b>nodes</b> were referred to as TitanDev and used to test code. This first phase of the upgrade increased the peak performance of Jaguar to 3.3 petaFLOPS. Beginning on September 13, 2012, Nvidia K20X GPUs were fitted to all of Jaguar's XK7 compute blades, including the 960 TitanDev <b>nodes.</b> In October, the task was completed and the computer was finally christened Titan.|$|E
2500|$|... {{where the}} source <b>node,</b> the relay <b>node,</b> and the {{destination}} <b>node</b> are denoted <b>node</b> 1, <b>node</b> 2, and <b>node</b> 3, subsequently.|$|R
5000|$|... {{function}} insertEnd(List list, <b>Node</b> <b>node)</b> if list.lastNode == null node.prev := <b>node</b> node.next := <b>node</b> else insertAfter(list.lastNode, <b>node)</b> list.lastNode := <b>node</b> ...|$|R
5000|$|<b>Node</b> : A {{box from}} which child boxes originate; a parent box. See <b>Node</b> Index, <b>Node</b> Tree, <b>Node</b> Number, <b>Node</b> Reference, Diagram <b>Node</b> Number.|$|R
25|$|Some {{balanced}} trees store values only at leaf <b>nodes,</b> and {{use different}} kinds of <b>nodes</b> for leaf <b>nodes</b> and internal <b>nodes.</b> B-trees keep values in every node in the tree, and may use the same structure for all <b>nodes.</b> However, since leaf <b>nodes</b> never have children, the B-trees benefit from improved performance if they use a specialized structure.|$|E
25|$|In B-trees, {{internal}} (non-leaf) <b>nodes</b> {{can have}} a variable number of child <b>nodes</b> within some pre-defined range. When data is inserted or removed from a node, its number of child <b>nodes</b> changes. In {{order to maintain the}} pre-defined range, internal <b>nodes</b> may be joined or split. Because a range of child <b>nodes</b> is permitted, B-trees do not need re-balancing as frequently as other self-balancing search trees, but may waste some space, since <b>nodes</b> are not entirely full. The lower and upper bounds on the number of child <b>nodes</b> are typically fixed for a particular implementation. For example, in a 2-3 B-tree (often simply referred to as a 2-3 tree), each internal node may have only 2 or 3 child <b>nodes.</b>|$|E
25|$|A {{balanced}} {{binary tree}} has the minimum possible maximum height (a.k.a. depth) for the leaf <b>nodes,</b> because {{for any given}} number of leaf <b>nodes,</b> the leaf <b>nodes</b> are placed at the greatest height possible.|$|E
30|$|When {{feedback}} <b>node</b> j requests {{a specific}} service s, the managed <b>node</b> M_j {{searches for the}} trust <b>node</b> which can provide service s. If there exists such a <b>node,</b> say <b>node</b> i, <b>node</b> j requests the service from <b>node</b> i. If not, M_j searches for the recommendation <b>node</b> k. Then, <b>node</b> k recommends a service <b>node</b> i with the maximum trust degree that can provide service s to <b>node</b> j. If there does not exist a recommendation <b>node</b> k, the transaction fails.|$|R
50|$|Child: A child <b>node</b> is a <b>node</b> {{extending}} from another <b>node.</b> For example, a computer with internet access {{could be considered}} a child <b>node</b> of a <b>node</b> representing the internet. The inverse relationship is that of a parent <b>node.</b> If <b>node</b> C is a child of <b>node</b> A, then A is the parent <b>node</b> of C.|$|R
50|$|Say {{that the}} {{external}} <b>node</b> being added onto is <b>node</b> A. To {{add a new}} <b>node</b> after <b>node</b> A, A assigns the new <b>node</b> {{as one of its}} children and the new <b>node</b> assigns <b>node</b> A as its parent.|$|R
25|$|The {{values are}} stored at several <b>nodes</b> (k of them) {{to allow for}} <b>nodes</b> {{to come and go}} and still have the value {{available}} in some node. Periodically, a node that stores a value will explore the network to find the k <b>nodes</b> that are close to the key value and replicate the value onto them. This compensates for disappeared <b>nodes.</b>|$|E
25|$|Alternative {{convention}} include {{writing a}} number by the edge to indicate multiplicity (commonly used in Coxeter diagrams), darkening <b>nodes</b> to indicate root length, or using 120° angles on valence 2 <b>nodes</b> {{to make the}} <b>nodes</b> more distinct.|$|E
25|$|There are no <b>nodes</b> in {{relativistic}} orbital densities, although individual {{components of}} the wave function will have <b>nodes.</b>|$|E
30|$|For a <b>node</b> c of a flow f, if <b>node</b> c {{operates}} network coding on {{packets of}} flow f, then the <b>node</b> c is called coding <b>node</b> of flow f. For a <b>node</b> v of a flow f, if <b>node</b> v receives packet P of flow f, the <b>node</b> s of flow f firstly sends out the packet P, then <b>node</b> s {{is called the}} initial <b>node</b> of <b>node</b> v for flow f and the initial <b>node</b> is represented by in(v,f).|$|R
30|$|A verge <b>node</b> {{will turn}} on its overhearing function. When a verge <b>node</b> i overhears a RREP packet sent by <b>node</b> j, <b>node</b> i set ups a forward route to <b>node</b> j, puts the hop count and IA {{information}} of <b>node</b> j {{and that of}} itself into the header of the RREP packet, and then sends back to its upstream <b>node.</b> To avoid the loop problem, we restrict that every verge <b>node</b> can only overhear {{and set up the}} forward route once. For example, in Figure 4, when the destination <b>node</b> D receives the RREQ packet broadcasted by <b>node</b> 7, <b>node</b> D will send back a RREP packet with its hop count and IA information to <b>node</b> 7. The verge <b>node</b> 3 overhears the RREP packet sent by <b>node</b> D, so <b>node</b> 3 set ups a forward route to <b>node</b> D, and then sends back a RREP packet to its upstream <b>node</b> 2 with its own hop count and IA information and that of <b>node</b> D. The verge <b>node</b> 4 will set up a forward route to any one <b>node</b> of 3, 6, or 7 depends on whose RREP packets can be overheard by <b>node</b> 4 first.|$|R
2500|$|We {{assume that}} the channel from the source <b>node</b> to the relay <b>node,</b> from the source <b>node</b> to the {{destination}} <b>node,</b> and from the relay <b>node</b> to the destination <b>node</b> are ...|$|R
25|$|An empty list is a {{list that}} {{contains}} no data records. This is usually the same as saying that it has zero <b>nodes.</b> If sentinel <b>nodes</b> are being used, the list is usually said to be empty when it has only sentinel <b>nodes.</b>|$|E
25|$|In a {{more general}} scheme, the node's belief {{can be sent to}} the input of any <b>node(s)</b> in any level(s), but the {{connections}} between the <b>nodes</b> are still fixed. The higher-level node combines this output with the output from other child <b>nodes</b> thus forming its own input pattern.|$|E
25|$|Approximately 75% of {{the lymph}} from the breast {{travels to the}} {{axillary}} lymph <b>nodes</b> {{on the same side}} of the body, whilst 25% of the lymph travels to the parasternal <b>nodes</b> (beside the sternum bone). A small amount of remaining lymph travels to the other breast and to the abdominal lymph <b>nodes.</b> The axillary lymph <b>nodes</b> include the pectoral (chest), subscapular (under the scapula), and humeral (humerus-bone area) lymph-node groups, which drain to the central axillary lymph <b>nodes</b> and to the apical axillary lymph <b>nodes.</b> The lymphatic drainage of the breasts is especially relevant to oncology because breast cancer is common to the mammary gland, and cancer cells can metastasize (break away) from a tumour and be dispersed to other parts of the body by means of the lymphatic system.|$|E
50|$|<b>Node</b> D is {{unaware of}} the ongoing data {{transfer}} between <b>node</b> A and <b>node</b> B. <b>Node</b> D has data to send to <b>node</b> C, {{which is in the}} transmission range of <b>node</b> D. D initiates the process by sending an RTS frame to <b>node</b> C. <b>Node</b> C has already deferred its transmission until the completion of the current data transfer between <b>node</b> A and <b>node</b> B (to avoid co-channel interference at <b>node</b> B). Hence, even though it receives RTS from <b>node</b> D, it does not reply back with CTS. <b>Node</b> D assumes that its RTS was not successful because of collision and hence proceeds to back off (using an exponential backoff algorithm).|$|R
5000|$|... 1 10 o---> o---------------------------------------------------------> o Top level 1 3 2 5 o---> o---------------> o---------> o---------------------------> o Level 3 1 2 1 2 3 2 o---> o---------> o---> o---------> o---------------> o---------> o Level 2 1 1 1 1 1 1 1 1 1 1 1 [...] o---> o---> o---> o---> o---> o---> o---> o---> o---> o---> o---> o Bottom level [...] Head 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th NIL <b>Node</b> <b>Node</b> <b>Node</b> <b>Node</b> <b>Node</b> <b>Node</b> <b>Node</b> <b>Node</b> <b>Node</b> <b>Node</b> ...|$|R
3000|$|..., so the <b>node</b> j {{is called}} the member <b>node</b> of <b>node</b> i, {{provided}} that any <b>node</b> can become a member <b>node</b> of only one cluster.|$|R
25|$|Stage II: {{the cancer}} {{involves}} the testis and metastasis to retroperitoneal and/or paraaortic lymph <b>nodes</b> (lymph <b>nodes</b> below the diaphragm).|$|E
25|$|Lymphatic {{drainage}} {{from the}} ascending colon and proximal {{two-thirds of the}} transverse colon is to the colic lymph <b>nodes</b> and the superior mesenteric lymph <b>nodes,</b> which drain into the cisterna chyli. The lymph from the distal one-third of the transverse colon, the descending colon, the sigmoid colon, and the upper rectum drain into the inferior mesenteric and colic lymph <b>nodes.</b> The lower rectum to the anal canal above the pectinate line drain to the internal iliac <b>nodes.</b> The anal canal below the pectinate line drains into the superficial inguinal <b>nodes.</b> The pectinate line only roughly marks this transition.|$|E
25|$|Remove from V all the <b>nodes</b> in the prefix P, {{and all the}} {{neighbours}} of <b>nodes</b> in the set W.|$|E
3000|$|In this system, {{besides the}} channel between the source <b>node</b> (S) and {{destination}} <b>node</b> (D), there also exist channels between the source <b>node</b> and each relay <b>node</b> (R) and each relay <b>node</b> and destination <b>node.</b> d [...]...|$|R
30|$|Now, suppose <b>node</b> B {{is sending}} data to <b>node</b> A {{and at the}} same time <b>node</b> C wants to {{transmit}} data to <b>node</b> D. When <b>node</b> C senses the medium, it finds that transmission is taking place. Therefore, <b>node</b> C defers transmission, but actually there is no problem with <b>node</b> C transmitting data to <b>node</b> D; this is called the exposed terminal problem.|$|R
30|$|Broadcast topology. The <b>node</b> u {{broadcasts}} its own reasonable neighbor <b>node,</b> and the advised <b>node</b> stores {{information into}} the data construction Info_Root <b>Node,</b> marking the considered <b>node</b> as the reasonable neighbor <b>node</b> of the <b>node</b> u and receiving the information packet from the u. After accepting a data packet by each <b>node,</b> it requires {{to examine the}} Info_Root <b>Node</b> to determine the receiving of the data packet. If it cannot be received, it is discarded.|$|R
