41|1200|Public
2500|$|... where [...] is {{action and}} [...] is the Hamiltonian {{function}} (<b>not</b> <b>operator).</b> Here the generalized coordinates [...] for [...] (used {{in the context}} of the HJE) can be set to the position in Cartesian coordinates as [...]|$|E
2500|$|In practice, {{the fuzzy}} rule sets usually have several antecedents that are {{combined}} using fuzzy operators, such as AND, OR, and NOT, though again the definitions tend to vary: AND, in one popular definition, simply uses the minimum weight {{of all the}} antecedents, while OR uses the maximum value. There is also a <b>NOT</b> <b>operator</b> that subtracts a membership function from 1 to give the [...] "complementary" [...] function.|$|E
50|$|The boolean <b>NOT</b> <b>operator</b> was {{represented}} by the circumflex character (^).|$|E
2500|$|These are {{technically}} <b>not</b> <b>operators,</b> {{rather they}} are considered [...] "" ...|$|R
5000|$|These are {{technically}} <b>not</b> <b>operators,</b> {{rather they}} are considered [...] "units associated with names" ...|$|R
50|$|<b>Not</b> all <b>operators</b> are closable.|$|R
5000|$|Isomorphism - <b>NOT</b> <b>operator</b> as {{isomorphism}} between {{positive logic}} and negative logic ...|$|E
50|$|In Microsoft's SQL Server Transact-SQL (T-SQL) language, the tilde is a unary Bitwise <b>NOT</b> <b>operator.</b>|$|E
5000|$|Systems (instruments, navigation, hydraulics, pneumatics, {{fuel systems}} (but not fuel itself), {{electrical}} system, electronics, fixed furnishings (but <b>not</b> <b>operator</b> specific), air conditioning, anti-ice system, etc.).|$|E
50|$|Creation and Annihilation <b>operators</b> are <b>not</b> Hermitian <b>operators.</b>|$|R
40|$|In this note, we {{consider}} the minimum number of <b>NOT</b> <b>operators</b> in a Boolean formula representing a Boolean function. In circuit complexity theory, the minimum number of NOT gates in a Boolean circuit computing a Boolean function f is called the inversion complexity of f. In 1958, Markov determined the inversion complexity of every Boolean function and particularly proved that _ 2 (n+ 1) NOT gates are sufficient to compute any Boolean function on n variables. As far as we know, no result is known for inversion complexity in Boolean formulas, i. e., the minimum number of <b>NOT</b> <b>operators</b> in a Boolean formula representing a Boolean function. The aim of this note is showing that we can determine the inversion complexity of every Boolean function in Boolean formulas by arguments based {{on the study of}} circuit complexity. Comment: 5 pages, 1 figure...|$|R
5000|$|Filters {{satisfying}} these {{properties are}} generally <b>not</b> Reynolds <b>operators,</b> meaning, first: ...|$|R
5000|$|Example: for +2, {{which is}} 00000010 in binary (the ~ {{character}} is the C bitwise <b>NOT</b> <b>operator,</b> so ~X means [...] "invert all the bits in X"): ...|$|E
50|$|Capabilities {{define the}} {{prerequisites}} {{and effects of}} actions in a STRIPS-like format, reading preexisting beliefs, removing some using the <b>NOT</b> <b>operator,</b> and adding new ones by stating them.|$|E
5000|$|Improve service {{levels and}} standards, by {{entering}} into a [...] "purchase of service" [...] {{contract with a}} rail operator (SP) and defining service based on regional transit requirements, <b>not</b> <b>operator</b> needs or profits ...|$|E
50|$|Every {{subnormal}} operator (in particular, {{a normal}} operator) is hyponormal, and every hyponormal operator is a paranormal convexoid <b>operator.</b> <b>Not</b> every paranormal <b>operator</b> is, however, hyponormal.|$|R
40|$|In the paper, a {{complete}} {{description of the}} delta-derivations and the delta-superderivations of semisimple finite-dimensional Jordan superalgebras over an algebraically closed field of characteristic p not equal 2 is given. In particular, new examples of nontrivial (1 / 2) -derivations and odd (1 / 2) -superderivations are given that are <b>not</b> <b>operators</b> of right multiplication by {{an element of the}} superalgebra...|$|R
5000|$|... {{the next}} token is end-of-line, which is <b>not</b> an <b>operator.</b> the outer while loop is left.|$|R
5000|$|... where [...] is {{action and}} [...] is the Hamiltonian {{function}} (<b>not</b> <b>operator).</b> Here the generalized coordinates [...] for [...] (used {{in the context}} of the HJE) can be set to the position in Cartesian coordinates as [...]|$|E
50|$|To build {{a virtual}} {{condition}} using input names the boolean operations AND and OR are allowed. The <b>NOT</b> <b>operator</b> {{is not possible}} because the input names can not be negated, even when they apparently describe boolean values. They simply exist or not.|$|E
5000|$|In practice, {{the fuzzy}} rule sets usually have several antecedents that are {{combined}} using fuzzy operators, such as AND, OR, and NOT, though again the definitions tend to vary: AND, in one popular definition, simply uses the minimum weight {{of all the}} antecedents, while OR uses the maximum value. There is also a <b>NOT</b> <b>operator</b> that subtracts a membership function from 1 to give the [...] "complementary" [...] function.|$|E
5000|$|Bitwise {{operations}} are contrasted by byte-level operations which characterize the bitwise operators' logical counterparts, the AND, OR and <b>NOT</b> <b>operators.</b> Instead of performing on individual bits, [...] "byte-level" [...] operators perform on strings of eight bits (known as bytes) at a time. The {{reason for this}} is that a byte is normally the smallest unit of addressable memory (i.e. data with a unique memory address.) ...|$|R
5000|$|... {{the next}} token is end-of-line, which is <b>not</b> an <b>operator.</b> the inner while loop is not entered.|$|R
50|$|In Africa, {{regulation}} is mainly something that {{pertains to the}} vehicle itself <b>not</b> its <b>operator</b> or its mode of operation.|$|R
50|$|All conjunctions of literals and all disjunctions of literals are in CNF, as {{they can}} be seen as conjunctions of one-literal clauses and conjunctions of a single clause, respectively. As in the {{disjunctive}} normal form (DNF), the only propositional connectives a formula in CNF can contain are and, or, and not. The <b>not</b> <b>operator</b> can only be used as part of a literal, which means that it can only precede a propositional variable or a predicate symbol.|$|E
5000|$|In the C, C++ and C# {{programming}} languages, the tilde {{character is}} used as bitwise <b>NOT</b> <b>operator,</b> following the notation in logic (an [...] causes a logical NOT, instead). In C++ and C#, the tilde is also used as the first character in a class's method name (where {{the rest of the}} name must be the same name as the class) to indicate a destructor - a special method which is called {{at the end of the}} object's life.|$|E
5000|$|A {{logical formula}} is {{considered}} to be in DNF if and only if it is a disjunction of one or more conjunctions of one or more literals. A DNF formula is in full disjunctive normal form if each of its variables appears exactly once in every clause. As in conjunctive normal form (CNF), the only propositional operators in DNF are and, or, and not. The <b>not</b> <b>operator</b> can only be used as part of a literal, which means that it can only precede a propositional variable.|$|E
5000|$|Of course, each multiplicative {{integral}} is a multiplicative operator, {{but some}} product integrals are <b>not</b> multiplicative <b>operators.</b> (See Product integral#Basic definitions.) ...|$|R
5000|$|Allakhverdiyev J. E. About {{repeated}} full {{systems and}} <b>not</b> self-interfaced <b>operators</b> depending on parametre. Reports of Academy Sciences USSR, Vol.166, №1, с.3.|$|R
50|$|Java does <b>not</b> include <b>operator</b> overloading, nor custom {{conversions}} {{in order}} to prevent abuse of the feature and to keep the language simple.|$|R
50|$|The caret {{has many}} uses in {{programming}} languages. It can signify exponentiation, the bitwise XOR operator, string concatenation, and control characters in caret notation, among other uses. In regular expressions, the caret {{is used to}} {{mark the beginning of}} a string, or the beginning of a line within that string (depending on the regular expression dialect and specified options); if it begins a character class, it indicates that the inverse of the class is to be matched. Pascal uses the caret for declaring pointers and when dereferencing them. Go also uses it as a bitwise <b>NOT</b> <b>operator.</b>|$|E
50|$|The Llanelly's New Lines Company was in receivership, {{being unable}} to service its debts, and the New Lines were rescued by being worked by the LNWR from 1 July 1871. The Great Western Railway was alarmed that the LNWR now had access to Swansea, and quickly took steps {{to take over the}} Llanelly company's Original Lines from 1 January 1873. Thus the Llanelly company ceased to control its network, and the LNWR had {{acquired}} the New Lines and the GWR controlled the Original Lines. The lease of the Vale of Towy Railway was joint between the LNWR and the GWR, and it was converted to full joint ownership by the GWR and LNWR by Act of 28 July 1884. The Llanelly Company, now only the owner, but <b>not</b> <b>operator,</b> of the Original Lines, was fully absorbed by the GWR 1 July 1889.|$|E
5000|$|In the D {{programming}} language, the tilde {{is used as}} {{an array}} concatenation operator, {{as well as to}} indicate an object destructor and bitwise <b>not</b> <b>operator.</b> Tilde operator can be overloaded for user types, and binary tilde operator is mostly used to merging two objects, or adding some objects to set of objects. It was introduced because plus operator can have different meaning in many situations. For example, what to do with [...] "120" [...] + [...] "14" [...] ? Is this a string [...] "134" [...] (addition of two numbers), or [...] "12014" [...] (concatenation of strings) or something else? D disallows + operator for arrays (and strings), and provides separate operator for concatenation (similarly PHP programming language solved this problem by using dot operator for concatenation, and + for number addition, which will also work on strings containing numbers).|$|E
25|$|This list does <b>not</b> include <b>operators</b> of Chinese copies / {{licensed}} manufactured versions {{known as}} the Chengdu J-7/F-7. Information is based on Mig-21 (2008).|$|R
5000|$|Allakhverdiyev J. E. About {{completeness}} {{of system}} of own and attached elements of one class of <b>not</b> self-interfaced <b>operators.</b> Scientific notes АSU, №7, 1957 ...|$|R
50|$|This list does <b>not</b> include <b>operators</b> of Chinese copies / {{licensed}} manufactured versions {{known as}} the Chengdu J-7/F-7. Information is based on Mig-21 (2008).|$|R
