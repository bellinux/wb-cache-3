3|10000|Public
40|$|This paper proposes {{implementations}} of {{the well-known}} traffic policing mechanisms for high speed networks. The implementations {{are based on}} a high performance development environment and are described through commented block diagrams. The considered mechanisms are Leaky Bucket with variants, Jumping Window, Triggered Jumping Window, Continuous Sliding Window, Discretized Sliding Window and Time Slotted Moving Window. These mechanisms were implemented in UNIX and DOS environments. A comparison of the results focusing on the implementation complexity is presented considering required memory, <b>number</b> <b>of</b> <b>timers</b> and its precision, mean processing time of the communication system and mean mechanism processing time. The results confirm the low implementation complexity of Leaky Bucket, Jumping Window and Time Slotted Moving Window mechanisms...|$|E
40|$|This paper {{describes}} a window-based policing mechanism, called Time Slotted Moving Window. Its key idea consists in aggregating the arrival events computation {{in order to}} minimize the processing and buffering requirements. Its main characteristics are simplicity, low implementation complexity, memory saving and use of a single low precision timer. Its performance behavior ranges from jumping window to sliding window results. Simulation and implementation results considering geometric and bursty traffics are obtained for comparison purpose. The comparative analysis concentrates on the <b>number</b> <b>of</b> <b>timers</b> and their precision, the maximum burst duration, the required memory and the violation probability. Furthermore, the mechanisms were implemented in UNIX and DOS environment using a high performance implementation architecture. The results confirm proposed mechanism efficiency...|$|E
40|$|This paper {{proposes a}} traffic {{policing}} mechanism for multimedia communication systems with {{quality of service}} guarantees, called Slotted Moving Window (SMW). Moreover, it also presents efficient implementations of SMW and several other well known traffic policing mechanisms, for comparison purposes. SMW main feature is the capability to accurately control the mean cell rate in a cost-effective approach. In addition, SMW is characterized by low implementation complexity, low memory requirements and use of a single low precision timer. Its key idea consists in aggregating arrival events {{in order to minimize}} processing and buffering requirements. The comparative analysis concentrates on the <b>number</b> <b>of</b> <b>timers</b> and their precision, the required memory, the processing time, the maximum burst duration and the violation probability. Finally, the results confirm the efficiency and low implementation complexity of both Leaky Bucket and the Slotted Moving Window mechanism. 1. INTRODUCTION One o [...] ...|$|E
3000|$|... {{indicates}} the total <b>number</b> <b>of</b> <b>timer</b> expiration times {{for an event}} record since it has been updated last time. Notice that for an event record the ERS resets the value of corresponding [...]...|$|R
5000|$|... {{the model}} <b>number</b> <b>of</b> the 555 <b>timer</b> IC, a classic {{integrated}} circuit (chip) implementing a variety <b>of</b> <b>timer</b> and multivibrator applications, and historically {{widely used in}} electronics.|$|R
40|$|AbstractWe propose an {{approach}} to assess and profile the time complexity of an wireless sensor network application executing in the TOSSIM environment since TOSSIM lacks the built-in facilities to determine the run time for an application that is intended for execution in parallel and distributed mode on real sensor network hardware. This procedure, which is conceived to estimate the time complexity in approximate terms, requires counting the <b>number</b> <b>of</b> <b>timer</b> periods needed to execute certain functionality of an application. Consequently, {{the length of a}} time interval associated with the sleep-wakeup periods for motes is used to approximate the time complexity of the application. We present the application of the proposed methodology for simulation of a wireless sensor network application in the TOSSIM environment...|$|R
50|$|In {{addition}} to the kernel, BeRTOS provides a hardware abstraction layer that includes large <b>number</b> <b>of</b> peripheral drivers (<b>timer,</b> serial, ADC, motors, LCD display, NTC sensors, keyboard, buzzer, memories), algorithms (hash table, CRC, MD2, entropy pool, RLE), communication protocols and a graphic windowing subsystem for small displays.|$|R
30|$|The FGM- 3 and FGM- 3 h sensors both produce TTL pulse streams with {{frequencies}} {{ranging from}} the 10 s to 100 s of kHz. We {{have found that the}} 8 -bit “PIC” series of microcontrollers from Microchip, Inc. are ideal high-speed pulse counters, because, unlike many similar microcontrollers, PIC microcontrollers allow external clocking of some of their internal 16 -bit registers, which can thus act as counters. The NPM uses twin PIC 18 F 252 microcontrollers (Microchip Technology Inc., 2006), each having two externally clocked 16 -bit counters. Because the output frequency of the magnetic sensors is sufficiently high to overflow the counters over the course of one second, frequency is measured by reading the stored counts added to the counter range multiplied by the <b>number</b> <b>of</b> <b>timer</b> overflows that occurred over the course of 1 second. The PIC counters return the resulting frequency measurement over a 9600 -baud TTL-level serial data stream, which is easily read by the control microcontroller. As each PIC is able to count two pulse streams, one of the PICs returns the frequencies of sensors X and Y, while the second PIC returns the frequency of sensor Z, leaving a spare channel.|$|R
40|$|Monitoring {{containers}} {{during transport}} in a secure, tamper resistant, and reliable manner, {{is the subject}} of the IBM Secure Trade Lane project (STL). We have evaluated a platform based on motes (i. e. very small computers) and TinyOS as the base for communication in STL. We implemented an IEEE 802. 15. 4 full functional device (FFD) MAC layer with beacon support, and we discovered that running this MAC layer was too much for the motes. We saw starvation and we experienced a far too slow data transfer between layers in TinyOS. We tried to overcome the starvation problems by introducing means to limit the high <b>number</b> <b>of</b> <b>timer</b> interrupts required by the MAC layer. Our approach is called Adaptive Timer Resolution, but it did not solve our problems in this case. We concluded that motes and TinyOS are insufficient for the 802. 15. 4 FFD MAC layer and that this platform is having problems running applications with a high frequency of interrupts, and still execute useful code in between. Our contributins are the evaluation of the mote platform by pushing it beyond its limits and our timer resolution control mechanism Adaptive Timer Resolution...|$|R
50|$|Scripted {{sequences}} trigger off <b>of</b> a <b>number</b> <b>of</b> things. A <b>timer,</b> progress <b>of</b> the game, or a {{check point}} could activate a scripted sequence. For players that speedrun video games, skipping these scripted sequences {{that would otherwise}} slow down their completion time is a talent. Being able to manipulate the games hit boxes so that the game does not trigger sequence is efficient for fast completions.|$|R
2500|$|The total <b>number</b> <b>of</b> relays, cam <b>timers</b> {{and drum}} sequencers can number into the {{hundreds}} or even thousands in some factories. Early programming techniques and languages {{were needed to}} make such systems manageable, {{one of the first}} being ladder logic, where diagrams of the interconnected relays resembled the rungs of a ladder. Special computers called programmable logic controllers were later designed to replace these collections of hardware with a single, more easily re-programmed unit.|$|R
40|$|We {{describe}} a new {{implementation of the}} BSD callout and timer facilities. Current BSD kernels take time proportional to the <b>number</b> <b>of</b> outstanding <b>timers</b> to set or cancel timers. Our implementation takes constant time to start, stop, and maintain timers; {{this leads to a}} highly scalable design that can support thousands <b>of</b> outstanding <b>timers</b> without much overhead. Unlike the existing implementation, our routines are guaranteed to lock out interrupts only for a small, bounded amount of time. We also extend the setitimer() interface to allow a process to have multiple outstanding timers, thereby reducing the need for users to maintain their own timer packages. The changes to the BSD kernel are small (548 lines of code added, 80 removed) and are available on the World Wide Web. This work {{supported by a grant from}} the NSF. Redesigning the BSD Callout and Timer Facilities Adam M. Costello !amc@cs. wustl. edu? [URL] George Varghese !varghese@cs. wustl. edu? [URL]...|$|R
5000|$|In Australia, New Zealand, Canada {{and most}} of the United States, a {{flashing}} red or orange pedestrian signal is used at between green and steady red; it means [...] "complete crossing but do not start to cross". This has a similar meaning to European flashing green, but means that if a pedestrian glances at it, they will not enter an intersection without enough time to leave. In the United States and in parts of Canada, Australia and New Zealand (e.g., Auckland CBD) pedestrian signals which count down the <b>number</b> <b>of</b> seconds (see <b>Timers</b> below) until cross traffic has the right of way are becoming popular at heavily used pedestrian crossings such as in urban shopping districts.|$|R
40|$|This paper characterizes {{analytically}} {{the performance}} of REAchability Protocol (REAP), a network layer end-to-end recovery protocol for IPv 6. REAP {{was developed by the}} IETF SHIM 6 Working Group as part of its multihoming solution. The behavior of REAP is governed by a small <b>number</b> <b>of</b> parameters: three <b>timers,</b> a simple characterization of the application traffic, and the communication delay. The key figure of merit of REAP performance is the time to recover from a path failure as seen by the upper layers, figure that cannot be trivially obtained, despite the apparent simplicity of this reachability protocol. In this paper we provide upper bounds for the recovery time of REAP for different deployment scenarios, applying these analytical results to two interesting case studies, TCP and VoIP traffic. European Community´s Seventh Framework ProgramPublicad...|$|R
3000|$|The value <b>of</b> <b>timer</b> {{affects the}} {{performance}} of CONCOR. If the value <b>of</b> <b>timer</b> is very small, then the entry in the DPVT will become invalid very frequently. As a result, a node (say Node [...]...|$|R
50|$|Throughout {{the latter}} part of the 20th century, a <b>number</b> <b>of</b> inventors {{patented}} various coffeemaker designs using an automated form of the drip brew method. Subsequent designs have featured changes in heating elements, spray head, and brew-basket design, as well as the addition <b>of</b> <b>timers</b> and clocks for automatic-start, water filtration, filter and carafe design, and even built-in coffee grinding mechanisms.|$|R
40|$|International audienceProgrammable logic {{controllers}} (PLCs) {{are widely}} used in embedded systems. Timers play {{a pivotal role in}} PLC real-time applications. The formalization <b>of</b> <b>timers</b> is <b>of</b> great importance. The study presents a formalization <b>of</b> PLC <b>timers</b> in the theorem proving system Coq, in which the behaviors <b>of</b> <b>timers</b> are characterized by a set of axioms at an abstract level. The authors discuss how to model timers at a proper and sound abstract level. PLC programs with timers are modeled. As a case study, a quiz machine problem with a timer is investigated. This work demonstrates the complexity <b>of</b> formal <b>timer</b> modelin...|$|R
3000|$|... [...]) {{capable of}} {{delivering}} a message {{is in its}} neighbour. On the other hand, if the value <b>of</b> <b>timer</b> is large, DPVT will continue to hold a valid DPV for a node which is not in range. As a result, the execution efficiency of routing approach will decrease. The effect <b>of</b> <b>timer</b> was studied through simulation also. The results of the same are detailed in Section 6.6.|$|R
40|$|AbstractIn this paper, {{we study}} the {{concurrent}} behaviors <b>of</b> <b>timers</b> with arbitrary delays. Timers are modeled as synchronized products of automata, and we investigate formal languages satisfying {{constraints on the}} delays <b>of</b> each <b>timer.</b> Under very general assumptions, we prove that the concurrent behavior <b>of</b> two <b>timers</b> is rational. We give explicit automata to recognize these languages, {{which can be used}} as models in the specification and verification of timed processes...|$|R
5000|$|This lack <b>of</b> <b>Timer</b> [...] "drive mode" [...] can be {{compensated}} for with a Pentax IR Remote and Remote [...] "drive mode" [...] selection.|$|R
50|$|The conceit <b>of</b> <b>TiMER</b> {{is that a}} wrist implant is {{available}} that counts down {{to the day when}} the user will meet his or her soulmate.|$|R
40|$|Abstract:Based on {{the fact}} that a large <b>number</b> <b>of</b> timing {{controllers}} are needed in the applications like sequential logic control and programmable controller, this paper proposed a PLC timer system based on ARM+FPGA, in which ARM is used to execute user program while FPGA is used for timer operation in parallel. The FPGA <b>timer</b> module consists <b>of</b> <b>timer</b> controller, timer dynamic parameters and soft contact state register, the timer controller carries out counter operation for timing unit every 1 ms, then results from timing operation would be saved in <b>timer</b> parameter list <b>of</b> a dual port RAM, when controller commands need to be executed via PLC, the timer will be used as a regular memory unit for W/R operation, thus no executing time of PLC program would be spared basically, which can well meet the system requirements where large <b>number</b> <b>of</b> controllers are needed. Simultaneously, principles of system composition, timing operation control and timing operation flow are all introduced followed by which a field test is also carried out for testament <b>of</b> the designed <b>timer</b> system...|$|R
50|$|To keep roadways, tunnels, {{and bridges}} safe for {{pedestrians}} and drivers, New York City has made efficient use <b>of</b> <b>timers</b> to regulate traffic lighting and help conserve energy.|$|R
5000|$|... a {{parallel}} port for Centronics-type printers or general purpose I/O. This {{was provided by}} a Rockwell 6522 Versatile Interface Adaptor, which was also the source <b>of</b> <b>timer</b> interrupts.|$|R
30|$|Finally, we must define how the {{admission}} control mechanism on each node will behave {{in the event}} <b>of</b> <b>timer</b> expiration {{depending on the type}} <b>of</b> <b>timer.</b> Since per flow timer expiration occurs when {{the admission}} control mechanism cannot confirm the minimum bandwidth required for transmission, all reservations made on behalf of this flow are removed and all per request timers are canceled. On the other hand, the per sub-request timer expiration event occurs when the flow is partially confirmed and the portion of bandwidth required, which has not been confirmed, is released.|$|R
25|$|Edwin Bollier, the {{co-founder of}} the Swiss {{manufacturer}} <b>of</b> the <b>timer,</b> testified that he had sold similar timers to East Germany, and admitted having connections to a <b>number</b> <b>of</b> intelligence agencies, including both the Libyans and the CIA.|$|R
3000|$|... of 10 and 15 ms {{are almost}} similar. Moreover, the impact <b>of</b> <b>timer</b> expiry {{completely}} vanishes when input traffic load is increased beyond 1000, see Figs. 9 and 10.|$|R
40|$|Timers {{are used}} {{throughout}} in network protocols, particularly for packet loss detection and for connection management. Thus, {{at least one}} timer is used per connection. Internet servers and gateways need to serve several thousands of simultaneously open connections, therefore a multiplicity <b>of</b> <b>timers</b> have to be managed simultaneously. To achieve scalable timer management, we present a large-scale hardware timer manager that can be implemented as a coprocessor in any network processing unit. This coprocessor uses on- and off-chip memory to handle the timers. The on-chip memory functions like a processor cache to reduce the <b>number</b> <b>of</b> external memory accesses and therefore, to decrease operation latency. To sort the timers according to their expiration time, the data structure <b>of</b> the <b>timer</b> manager {{is based on the}} d-heap structure. We have simulated the model in SystemC to measure the performance <b>of</b> the <b>timer</b> operations: start, stop and expire. In this paper present a hardware concept for a large-scale timer manager and we discuss the simulation results, to show its efficiency. 1...|$|R
40|$|This {{research}} {{is based on}} the study of part timer-workers at Ni Hao restaurant. Ni Hao restaurant is different from other restaurants. It is divided into two parts, namely : wok and ala carte restaurant. The capacity is very huge especially for the wok restaurant, around 600 - 700 seats. It requires a lot of workers both part timers and full timers. This condition creates two major "concerned cost", food and beverage cost, and labor cost. Labor issues are still the <b>number</b> one concern <b>of</b> most restaurant owners and managers. Food and beverage costs can still held in check through price adjustments, portion controls and through purchasing efficiencies. But on the other hand, labor costs are not controlled by paying low wages. This is very controverting with the demand of every restaurant, minimizing the labor cost. Solving the problems an employing part-time workers can be an efficient way to keep costs down which is can be controlled through scheduling and improving labor productivity. Considering the point, in this dissertation the writers will conduct a research about "How to control labor (part-timer) cost by determining labor productivity". The aim of this {{research is}} to find how many part timers do actually the restaurant needs to cover guests in one day. The writers conduct an observation regarding to 5 elements which determine labor productivity which are labor cost percentage, sales per labor hour, labor euro per guest served, guest served per labor euro and guest served per labor hour. The data is collected in 3 weeks period by observing each of part-timers and will be analyzed by quantitative and qualitative methods. After calculating, the estimated <b>number</b> <b>of</b> part <b>timers</b> needed will be found both in weekday and weekend. Therefore, some recommendations should be made in order to improve labor productivity...|$|R
50|$|In {{addition}} to the converters, many embedded microprocessors include a variety <b>of</b> <b>timers</b> as well. One {{of the most common}} types <b>of</b> <b>timers</b> is the Programmable Interval Timer (PIT). A PIT may either count down from some value to zero, or up to the capacity of the count register, overflowing to zero. Once it reaches zero, it sends an interrupt to the processor indicating that it has finished counting. This is useful for devices such as thermostats, which periodically test the temperature around them to see if they need to turn the air conditioner on, the heater on, etc.|$|R
40|$|AbstractAdaptive {{assessment}} e-platform {{is being}} promoted {{in the world}} to make teachers understand students’ e-learning performance on the Internet. However, system's load testing for an adaptive assessment is a very important issue during development of such an e-platform. In this paper, we have adopted the genetic fuzzy markup language (GFML) to infer the performance of an adaptive assessment e-platform. Firstly, we collected the data and information of the e-platform loading in two different mechanisms. With the collected data, the proposed CPU usage calculation mechanism is first implemented to acquire the CPU usage information from the screenshot of Ganglia. Next, we used the fuzzy c-means (FCM) clustering mechanism to construct the knowledge base according to the collected data. Then, <b>number</b> <b>of</b> threads, constant <b>timer,</b> MySQL parameter, CPU usage, and testing time of the e-platform were utilized to infer the e-platform load performance. Finally, the genetic learning algorithm was utilized to learn the knowledge and rule base to optimize the proposed approach. From these experimental results, the proposed method is feasible for verifying the performance of an adaptive assessment e-platform. In the future, the adaptive assessment e-platform can be utilized to e-Navigation systems and applications...|$|R
30|$|Timer Triggering: Since D-ForenRIA {{knows the}} {{signature}} <b>of</b> <b>timers,</b> when it detects {{that the next}} expected HTTP request matches the signature of some timeout based function, it asks an SR-Browser to trigger that function.|$|R
3000|$|... where tmax is {{the maximum}} value <b>of</b> dwell <b>timer</b> and NB is the <b>number</b> <b>of</b> {{blocking}} events {{before the current}} event. The choice of tmax is very {{crucial to the performance}} of the CAD-VHO scheme. The optimum value for tmax depends on the simulation scenario. Besides, a higher value for tmax can result in less <b>number</b> <b>of</b> handovers and can be tolerated by non-real-time applications. However for real-time applications, there is the need to limit the maximum value <b>of</b> dwell <b>timer.</b> In this work, we choose tmax from multiples of conventional dwell time values and perform simulation to find the optimum value. The mean non-blocking and blocking periods, γ 1 and γ 2, will be evaluated by the dwell time algorithm incorporated into MT.|$|R
50|$|These types <b>of</b> <b>timers</b> are not devices nor {{parts of}} devices; they exist only in lines of code. They {{rely on the}} {{accuracy}} of a clock oscillator usually built into a hardware device that runs the software.|$|R
40|$|Brown, Gouda, and Miller [1] {{claim that}} they have {{redesigned}} the window protocol such that it tolerates both message loss and message disorder, while using only bounded sequence numbers. They suggest to implement the timeout condition of the protocol by means <b>of</b> <b>timers.</b> We analyze the consequences of an implementation with timers and show {{that it is not}} possible to implement the protocol as specified by means <b>of</b> <b>timers.</b> This is due to the fact that in the original protocol it is not observable for the sender whether the timeout condition holds or not. We slightly modify the protocol such that an implementation with timers is possible, and prove that it is correct...|$|R
40|$|Temporal event {{correlation}} {{is essential}} to realizing self-managing distributed systems. Autonomic controllers often require that events be correlated across multiple components using rule patterns with timer-based transitions, e. g., to detect denial of service attacks and to warn of staging problems with business critical applications. This short paper discusses automatic adjustment <b>of</b> <b>timer</b> values for event correlation rules, in particular compensating for the variability of event propagation delays due to factors such as contention for network and server resources. We describe a corresponding Management Station architecture and present experimental studies on a testbed system that suggest that this approach can produce results at least as good as an optimal fixed setting <b>of</b> <b>timer</b> values. 1...|$|R
