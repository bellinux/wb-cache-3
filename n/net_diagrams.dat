13|45|Public
25|$|M : P → Z {{is a place}} multiset, where Z is a {{countable}} set. M {{extends the}} concept of configuration and is commonly described with reference to Petri <b>net</b> <b>diagrams</b> as a marking.|$|E
40|$|BioPNML) is presented. The {{concepts}} and terminology of the interchange format {{as well as}} its syntax that is based on XML (eXtensible Markup Language) are introduced. BioPNML is designed to provide a starting point {{for the development of a}} standard inter-change format for Bioinformatics and Petri nets. The language will make it possible to present biology Petri <b>net</b> <b>diagrams</b> between all supported hardware platforms and ver-sions. It is also designed to bridge Petri net models to other known metabolic simulators...|$|E
40|$|Abstract We {{argue that}} current discussions of {{criteria}} for actual causation are ill-posed in several respects. (1) The methodology of current discussions is by induction from intuitions about an infinitesimal {{fraction of the}} possible examples and counterexamples; (2) cases with larger numbers of causes generate novel puzzles; (3) “neuron ” and causal Bayes <b>net</b> <b>diagrams</b> are, as deployed in discussions of actual causation, almost always ambiguous; (4) actual causation is (intuitively) relative to an initial system state since state changes are relevant, but most current accounts ignore state changes through time; (5) more generally, {{there is no reason}} to think that philosophical judgements about these sorts of cases are normative; but (6) there is a dearth of relevant psychological research that bears on whether various philosophica...|$|E
40|$|Abstract. In {{view of the}} {{teaching}} problems and difficulties of machinery manufacturing equipment design, the automatic generation technology of structural <b>net</b> and speed <b>diagram</b> was proposed. The conceptions and characteristics of structural formula, structural <b>net</b> and speed <b>diagram</b> were discussed. The expected targets of the automatic generation technology were put forward. The technical principles of automatically generating structural <b>net</b> and speed <b>diagram</b> were respectively analyzed. Based on these, the automatic generation software of structural <b>net</b> and speed <b>diagram</b> was designed and developed. The development environment and implementation methods of the software were proposed. It is proved that the software {{can play an important}} role in improving {{the teaching}} effect and quality...|$|R
40|$|In legal {{knowledge}} acquisition, {{the threat}} of punishment remains an important litmus test for categorizing legal rules: something is a real duty if it is backed - directly or indirectly - by a threat of punishment. In practice, no accounts of how enforcement design patterns are superposed on representations of specific legal rules exist in our field, and the litmus test does not work in modeling legal rules. This paper considers the distinction between punishments and rewards, and points to a more obvious connection with production of evidence, and allocation of burden of proof. Since this work {{was done in the}} context of a knowledge acquisition methodology based on petri <b>net</b> markup language <b>diagrams,</b> the result is a generic enforcement pattern expressed as a petri <b>net</b> <b>diagram...</b>|$|R
40|$|A hybrid {{intelligent}} control system that combines {{the theories of}} fuzzy logic and variable structure systems (VSS) is presented. This control architecture {{is viewed as a}} discrete event system (DES) and its properties are studied using the corresponding Petri <b>Net</b> <b>diagram.</b> The equivalence between this controller and a learning finite state automaton is revealed. The validity of the method is supported by simulation results concerning an arc-welding process and a mobile robot moving in a partially unknown environment. © 2000 IMACS/Elsevier Science B. V. All rights reserved...|$|R
40|$|The design, implementation, and {{verification}} of agent conversations (i. e., multiagent sequences of language primitives which {{are intended to}} together achieve some goal) can be difficult and exacting, and often requires skills which agent developers do not possess. In this paper, we describe the architecture of a planned software tool {{that is designed to}} help developers with this task. Our proposed Conversation Design Tool (CDT) will be built as a set of extensions to an automatic theorem-proving framework, and so will be able to directly manipulate expressions in a variety of ACL semantics description languages. The CDT will also employ a variety of graphical representations, such as finite state machine diagrams and Petri <b>net</b> <b>diagrams,</b> to facilitate reasoning in certain specialized domains. Finally, the CDT will include a generative capability to automatically create conversation policy configuration files for KAoS-architecture agents...|$|E
40|$|As {{part of the}} Domino {{project on}} {{distributed}} system management, a model of 'Delegation of Authority' was created. A formal description method {{was used as the}} basis of the model in order to achieve precision and generality. Z was chosen for this purpose, supplemented by Prolog to animate the specification so that it could be validated with examples. It was found that other representation methods were necessary for visualising the model and for meaningful communication in discussions between colleagues. Three different methods were used for discussions: plain English, an ad hoc graphical method for representing domain structures and Petri <b>net</b> <b>diagrams.</b> In this paper we discuss the roles of each method of representation, its uses and limitations, and their inter-relationship. Formal interpretations in Z of the graphical methods are shown. 1. INTRODUCTION This paper reviews the representation methods used in an abstract model of 'Delegation of Authority'. It aims to show how Z fitted into [...] ...|$|E
40|$|AbstractTo {{increase}} the expressiveness of knowledge representations, the graph-theoretical basis of semantic networks is reconsidered. Directed labeled graphs are generalized to directed recursive labelnode hypergraphs, which permit a most natural representation of multi-level structures and n-ary relationships. This net formalism is embedded into the relational/functional programming language RELFUN. Operations on (generalized) graphs are specified in a declarative fashion to enhance readability and maintainability. For this, nets are represented as nested RELFUN terms {{kept in a}} normal form by rules associated directly with their constructors. These rules rely on equational axioms postulated in the formal definition of the generalized graphs as a constructor algebra. Certain kinds of sharing in <b>net</b> <b>diagrams</b> are mirrored by binding common subterms to logical variables. A package of declarative transformations on net terms is developed. It includes generalized set operations, structure-reducing operations and extended path searching. The generation of parts lists is given as an application in mechanical engineering. Finally, imperative net storage and retrieval operations are discussed...|$|E
2500|$|Graphically, {{places in}} a Petri net may contain a {{discrete}} number of marks called tokens. [...] Any distribution of tokens over the places will represent a {{configuration of the}} net called a marking. [...] In an abstract sense relating to a Petri <b>net</b> <b>diagram,</b> a transition of a Petri net may fire if it is enabled, i.e. there are sufficient tokens {{in all of its}} input places; when the transition fires, it consumes the required input tokens, and creates tokens in its output places. [...] A firing is atomic, i.e. a single non-interruptible step.|$|R
40|$|Models of decisionmaking {{organizations}} {{supported by}} command, control and communication systems, are represented using the Petri Net formalism. A small set of primitives, defining the correspondence between decision models signals and functions and their Petri Net counterparts, is proposed. A new decision signal routing demultiplexer {{is added to}} the Petri Net formalism to represent internal decisionmaking in the model. Using the above primitives, any decisionmaking structure can be modeled by a Petri <b>Net</b> <b>diagram.</b> An array is introduced that describes the interactions between decisionmakers and an algorithm is presented for the calculation of delay when synchronous protocols are used...|$|R
25|$|In {{the diagram}} of a Petri net (see top figure right), places are {{conventionally}} depicted with circles, transitions with long narrow rectangles and arcs as one-way arrows that show connections {{of places to}} transitions or transitions to places. If the diagram were of an elementary net, then those places in a configuration would be conventionally depicted as circles, where each circle encompasses a single dot called a token. In the given diagram of a Petri net (see right), the place circles may encompass more than one token to show {{the number of times}} a place appears in a configuration. The configuration of tokens distributed over an entire Petri <b>net</b> <b>diagram</b> is called a marking.|$|R
40|$|In {{this paper}} {{we present a}} self {{consistent}} theoretical approach for the calculation of the Survival Probability for central dijet production. These calculations are performed in a model of high energy soft interactions based on two ingredients:(i) the results of N= 4 SYM, which {{at the moment is}} the only theory that is able to deal with a large coupling constant; and (ii) the required matching with high energy QCD. Assuming, in accordance with these prerequisites, that soft Pomeron intercept is rather large and the slope of the Pomeron trajectory is equal to zero, we derive analytical formulae that sum both enhanced and semi-enhanced diagrams for elastic and diffractive amplitudes. Using parameters obtained from a fit to the available experimental data, we calculate the Survival Probability for central dijet production at energies accessible at the LHC. The results presented here which include the contribution of semi-enhanced and <b>net</b> <b>diagrams,</b> are considerably larger than our previous estimates. Comment: 11 pages, 10 pictures in. eps file...|$|E
40|$|In {{our group}} several {{projects}} used and use Coloured Petri nets as their main technique for modeling. Design/CPN {{has been one}} of the tools to edit and simulate the Petri <b>net</b> <b>diagrams.</b> However, Design/CPN has to be considered as a closed tool. To enlarge its funcitonality the desire is to open the tool for its environment. This is achieved by a library of functions which are implemented using Design/ML and Mimic allowing selective import and export of single or all pages of a Petri net diagram. Its input/output format is a human-readable text le. The text has a well dened syntax and maintains the nets structure and its content. Hence the interface is public other tools can use the diagrams produced by Design/CPN and Design/CPN can use the output of other tools. 1 Introduction Today's software development needs special and powerful tools which support the underlying concepts and techniques. In the area of specication and prototyping (Coloured) Petri nets are a well known formalism for [...] ...|$|E
40|$|We {{argue that}} current discussions of {{criteria}} for actual causation are ill-posed in several respects. (1) The methodology of current discussions is by induction from intuitions about an infinitesimal {{fraction of the}} possible examples and counterexamples; (2) cases with larger numbers of causes generate novel puzzles; (3) “neuron” and causal Bayes <b>net</b> <b>diagrams</b> are, as deployed in discussions of actual causation, almost always ambiguous; (4) actual causation is (intuitively) relative to an initial system state since state changes are relevant, but most current accounts ignore state changes through time; (5) more generally, {{there is no reason}} to think that philosophical judgements about these sorts of cases are normative; but (6) there is a dearth of relevant psychological research that bears on whether various philosophical accounts are descriptive. Our skepticism is not directed towards the possibility of a correct account of actual causation; rather, we argue that standard methods will not lead to such an account. A different approach is required...|$|E
40|$|Nowadays {{with the}} growth of {{organizations}} and their affiliates, the importance of information systems has increased. Functional and non-functional requirements of information systems in an organization are supported. There are literally several techniques to support the functional requirements in terms of software methodologies, but support for the second set of requirements has received little attention. Software Performance Engineering (SPE) forum tries to address this issue by presenting software methodologies to support both types of requirements. In this paper, we present a formal model for the evaluation of system performance based on a pragmatic model. Because of supporting the concurrency concepts, petri net has a higher priority than queuing system. For mapping UML to colored Petri <b>net</b> <b>diagram,</b> we use an intermediate graph. The preliminary results indicate that the proposed model may save significant amount of computations...|$|R
40|$|In this paper, {{we discuss}} a new {{authoring}} {{system for the}} stepwise re�nement ofmultimedia presentations. The proposed system is based on data �ow and control �ow diagrams, with many enhanced notations especially useful for multimedia presentation designs. Presentation designers can use our system to quickly develop a prototype presentation, and re�ne it step by step toward a �nal presentation. A multimedia DFD�CFD of multiple levels is to help a presentation designer to analyze the script structure of a presentation. However, it is not powerful enough to de�ne the precise schedule or layout of a presentation. Incorporated with an interactive multimedia Petri <b>net</b> <b>diagramming</b> mechanism, the last level of a presentation window is re�ned to a Petri net, which describes the temporal behavior of a presentation window. Our interactive multimedia Petri net is a variation of timed Petri net, {{with the addition of}} User Transitions and Sync Arc. Since a multimedia presentation is interactive, we introduce the above two objects for participant dependent synchronization. Using our system, a presentation designer is able to analyze his�her presentation script and design the presentation in a systematic manner...|$|R
40|$|Abstract. This paper {{presents}} a new data structure, the Data Decision Diagrams, {{equipped with a}} mechanism allowing the definition of application-specific operators. This mechanism is based on combination of inductive linear functions offering a large expressiveness while alleviating for the user the burden of hard coding traversals in a shared data structure. We demonstrate the pertinence of our system through {{the implementation of a}} verification tool for various classes of Petri nets including self modifying and queuing nets. Topics. Petri <b>Nets,</b> Decision <b>Diagram,</b> System verification. ...|$|R
40|$|To {{increase}} the expressiveness of knowledge representations, the graph-theoretical basis of semantic networks is reconsidered. Directed labeled graphs are generalized to directed recursive labelnode hypergraphs, which permit a most natural representation of multi-level structures and n-ary relationships. This net formalism is embedded into the relational/functional programming language RELFUN. Operations on (generalized) graphs are specified in a declarative fashion to enhance readability and maintainability. For this, nets are represented as nested RELFUN terms {{kept in a}} normal form by rules associated directly with their constructors. These rules rely on equational axioms postulated in the formal definition of the generalized graphs as a constructor algebra. Certain kinds of sharing in <b>net</b> <b>diagrams</b> are mirrored by binding common subterms to logical variables. A package of declarative transformations on net terms is developed. It includes generalized set operations, structure-reducing operations, and extended path searching. The generation of parts lists is given as an application in mechanical engineering. Finally, imperative net storage and retrieval operations are discussed...|$|E
40|$|ABSTRACT: A common motif {{in protein}} {{structures}} is {{the assembly of}} R-helices. Natural R-helical assemblies, such as helical bundles and coiled coils, consist of multiple right-handed R-helices. Here we design a protein complex containing both left-handed and right-handed helices, with peptides of D- and L-amino acids, respectively. The two peptides, D-Acid and L-Base, feature hydrophobic heptad repeats and are designed to pack {{against each other in}} a “knobs-into-holes ” manner. In solution, the peptides form a stable, helical heterotetramer with tight packing in the most solvent-protected core. This motif may be useful for designing protease-resistant, helical D-peptide ligands against biological protein targets. The interfaces between interacting right-handed R-helices are structurally well characterized. Among the most studied R-helical assemblies (1) is the coiled coil, which consists of two to five interacting R-helices that wrap around each other with an overall superhelical twist (2). A distinguishing structural feature of coiled coils is the specific and regular local packing of side chains (“knobs-into-holes”), a feature first predicted by Crick using helical <b>net</b> <b>diagrams</b> (3). Helica...|$|E
40|$|One {{emerging}} {{approach to}} reducing the labour {{and costs of}} software development favours the specialisation of techniques to particular application domains. The rationale is that programs within a given domain often share enough common features and assumptions to enable the incorporation of substantial support mechanisms into domain-specific programming languages and associated tools. Instead of being machine-oriented, algorithmic implementations, programs in many domain-specific languages (DSLs) are rather user-level, problem-oriented specifications of solutions. Taken further, this view suggests that the most appropriate representation of programs in many domains is diagrammatic, {{in a way which}} derives from existing design notations in the domain. This thesis conducts an investigation, using mathematical techniques and supported by case studies, of issues arising from the use of diagrammatic representations in DSLs. Its structure is conceptually divided into two parts: the first is concerned with semantic and reasoning issues; the second introduces an approach to describing the syntax and layout of diagrams, in a way which addresses some pragmatic aspects of their use. The empirical context of our work is that of IEC 1131 - 3, an industry standard programming language for embedded control systems. The diagrammatic syntax of IEC 1131 - 3 consists of circuit (i. e. box-and-wire) diagrams, emphasising a data- flow view, and variants of Petri <b>net</b> <b>diagrams,</b> suited to a control-flow view. The first contribution of the thesis is the formalisation of the diagrammatic syntax and the semantics of IEC 1131 - 3 languages, as a prerequisite to the application of algebraic techniques. More generally, we outline an approach to the design of diagrammatic DSLs, emphasising compositionality in the semantics of the language so as to allow the development of simple proof systems for inferring properties which are deemed essential in the domain. The control-flow subset of IEC 1131 - 3 is carefully evaluated, and is subsequently re-designed, to yield a straightforward proof system for a restricted, yet commonly occurring, class of safety properties. A substantial part of the thesis deals with DSLs in which programs may be represented both textually and diagrammatically, as indeed is the case with IEC 1131 - 3. We develop a formalisation of the data-flow diagrams in IEC 1131 -...|$|E
5000|$|Models provide {{mathematical}} representations for parallel {{programs and}} related verification problems. Examples of models are automata, networks of communicating automata, Petri <b>nets,</b> binary decision <b>diagrams,</b> boolean equation systems, etc. From a theoretical point of view, research on models seeks for general results, independent {{of any particular}} description language.|$|R
30|$|Petri <b>nets,</b> Reliability Block <b>Diagrams</b> (RBD), and Fault Trees are {{probably}} the most widely known and used formalisms for dependability analysis. Petri nets are a flexible and expressive modeling approach, which allows a general interactions between system components, including synchronization of event firing times. They also find large application also in performance analysis.|$|R
40|$|Graphs (networks) {{are very}} common data {{structures}} which are handled in computers. Diagrams {{are widely used}} to represent the graph structures visually in many information systems. In order to automatically draw the diagrams which are, for example, state graphs, data-flow graphs, Petri <b>nets,</b> and entity-relationship <b>diagrams,</b> basic graph drawing algorithms are required...|$|R
30|$|It is {{possible}} to express the behaviour of a system with a modelling technique such as petri <b>nets,</b> state-transition <b>diagrams</b> or abstract state machines (ASM). As complex topologies are not applicable in practice due {{to the problem of}} state explosion, modelling the system behaviour as unsophisticated as possible is very important [15]. Different solutions for the state explosion problem have been offered in literature [16, 17]. On the other hand, forming the models in a simplest way as possible is always a big advantage in industrial applications. Hence, the possible solutions can be achieved easily and system requirements can be identified accurately.|$|R
40|$|Abstract—The UML {{modeling}} of complex distributed systems often {{is a great}} challenge due to {{the large amount of}} parallel real-time operating components. In this paper the problems of verification of such systems are discussed. ECPN, an Extended Colored Petri Net is defined to formally describe state transitions of components and interactions among components. The relationship between sequence diagrams and Free Choice Petri Nets is investigated. Free Choice Petri Net theory helps verifying the liveness of sequence diagrams. By converting sequence diagrams to ECPNs and then comparing behaviors of sequence diagram ECPNs and statecharts, the consistency among models is analyzed. Finally, a verification process for an example model is demonstrated. Keywords—Consistency, liveness, Petri <b>Net,</b> sequence <b>diagram.</b> I...|$|R
40|$|Abstract. This work {{presents}} {{a method for}} obtaining fail-safe systems based in parity alternation from Petri net specifications. A fail-safe system is a system with adequate redundancy for detecting failures and preventing them. This method generates a VHDL description of a system from a Petri <b>net</b> or state <b>diagram</b> description. These results have relevance in the integration of access technologies to high speed telecommunication networks, where fail safe mechanisms are becoming an important concern...|$|R
40|$|A simple join point model {{supports}} crosscutting {{among different}} perspectives of a model, including class diagrams, sequence diagrams, advice, inter-type declarations and role-bindings. A simple weaver works to coordinate the crosscutting structure across the model elements. Coordination involves resolving the separate crosscutting structures to find all interactions between join points. This woven structure is represented as a simple extension to the UML meta-model, which makes it easily accessible to the modeling environment and other tools. Simple and uniform access to the woven structure enables aggregate analysis and reasoning about the crosscutting in the model. This can range from simple visual hyperlinks between crosscutting model elements to more elaborate structures such as <b>net</b> sequence <b>diagrams.</b> The woven structure can also be opened to direct queries from the user, to aid in model development. 1...|$|R
40|$|We {{classify}} two-dimensional local conformal nets with parity symmetry {{and central}} charge less than 1, up to isomorphism. The maximal ones {{are in a}} bijective correspondence with the pairs of A-D-E Dynkin diagrams with the difference of their Coxeter numbers equal to 1. In our previous classification of one-dimensional local conformal <b>nets,</b> Dynkin <b>diagrams</b> D 2 n + 1 and E 7 do not appear, but now they do appear in this classification of two-dimensional local conformal nets. Such nets are also characterized as two-dimensional local conformal nets with -index equal to 1 and central charge less than 1. Our main tool, in addition to our previous classification results for one-dimensional nets, is 2 -cohomology vanishing for certain tensor categories related to the Virasoro tensor categories with central charge less than 1...|$|R
40|$|We give an {{efficient}} constructive deterministic approximation algorithm that determines minimum installation layouts {{with respect to}} cable cost and trace cost (the latter for supporting and safeguarding the cables) in order to embed intensity weighted flow <b>nets</b> (wiring <b>diagrams,</b> power supply systems, …) into industrial, technical, or urban environments. We show, that the algorithm observes a convenient upper cost bound and prove its polynomial time behavior. The resulting layout structures {{may be viewed as}} hybrids derived from General Steiner Trees as well from solutions for the Quadratic-Semi-Assignment Problem. The success of the algorithm is based on the search for partial structures that enable common line conduction on common traces with only moderate increased cable cost (compared with shortest path conduction) but with more reduced trace cost. Practical results are given...|$|R
40|$|Diagrammatic {{models are}} a {{particular}} class of conceptual models which enable representation of models in two dimensions. Besides, {{this type of}} models typically use a limited niniber of symbols and thus enable easier model comprehension as well as better communication between modellers and their clients. One of the powerful features of diagrammatic modelling is its capability to enable hierarchical modelling. Advantages of hierarchical modelling are to enable easier modelling of complex systems by using top-down model design and permitting information hiding. In this paper technical capabilities of several diagrammatic modelling methods (augmented Petri <b>nets,</b> activity <b>diagrams</b> and activity cycle diagrams) for using hierarchical modelling are demonstrated. Top-down model development with diagrammatic modelling techniques is illustrated on a rather comprehensive example of modelling airport passenger building operations. Arguments for using hybrid model development are presented as well...|$|R
40|$|We {{describe}} the object-oriented editor GenEd supporting {{the design of}} specifications for visual notations. Prominent features of GenEd are (1) it is generic, i. e. domain-specific syntax and semantics are specified by users; (2) built-in parser for actual drawings, driven by formal specifications; (3) powerful reasoning capabilities about diagrams and their specification. GenEd's specification language {{is based on a}} fully formalized theory for describing visual notations. Three examples, place-transition petri <b>nets,</b> entity-relationship <b>diagrams,</b> and a small GIS application are presented. Keywords [...] - Theory of visual languages, formal semantics, diagrammatical reasoning, description logics, visual editor, visual parsing, geographical information systems. 1 Motivation and Introduction This paper reports on the design and evaluation of the generic editor GenEd for visual notations. The term "generic" refers to the characteristic that users can specify domain-specific syntax and semantics [...] ...|$|R
40|$|The {{evolution}} of software {{has become a}} more and more critical point in the use and maintenance of large software system. Accordingly, the continuous change of the system's design gets into focus. Here we suggest a two-fold approach combining visual architecture description with graphical specification techniques. Rule-based modification [...] a generalization of graph transformations [...] at both levels {{can be used to}} describe the model evolution. Allowing transformations at both levels allows distinguishing evolution steps with local and a global range. 1 Introduction Visual modeling techniques, e. g. ER <b>diagrams,</b> Petri <b>nets,</b> UML <b>diagrams,</b> etc., have been successfully applied in different application domains like computer science or (electrical) engineering. They provide an intuitive way to describe static and dynamic properties of systems, and their precision allows consistency checks and behavior simulation. In the past, visual modeling techniques for software engineering have be [...] ...|$|R
40|$|The {{significance}} of graphs and rules {{in many areas}} of computer science is evident: On the one hand, graphs constitute appropriate means for the description of complex relationships between objects. Trees, Petri <b>nets,</b> circuit <b>diagrams,</b> data flow graphs, state charts, and entity-relationship diagrams are some typical examples. On the other hand, rules are used to describe "permitted" actions on objects as, for example, in the areas of functional and logic programming, formal languages, algebraic specification, theorem proving, and rule-based systems. The intention of bringing graphs and rules together [...] motivated by several application areas [...] has led to the theory of graph grammars and graph transformation (see volume I of the Handbook and [1 [...] 7] for a survey). A wide spectrum of approaches exists within this theory {{and some of them are}} implemented (see, for example, Progres [8, 9], Graph Ed [10], Dactl [11], and Agg [...] ...|$|R
40|$|SOFL is {{a formal}} {{language}} and method for system specification and design. As a language {{it is an}} integration of Petri <b>nets,</b> Data Flow <b>Diagrams,</b> and VDM-SL. As a method it {{is a combination of}} structured method and object-oriented method. In this paper we introduce a graphical user interface (GUI) for supporting the construction of SOFL specifications, and a tool for testing SOFL specifications. With those tools {{it would be easy to}} construct a SOFL specification that consists of Condition Data Flow Diagrams and specification modules, and to ensure its consistency and validity...|$|R
40|$|In {{this paper}} a text format for High-level Petri <b>Net</b> (HLPN) <b>diagrams</b> is presented. The text format is {{designed}} {{to serve as a}} platform-independent file format for the Design/CPN tool. It is consistent with the forthcoming standard for High-level Petri Nets. The text format may also be seen as our contribution to the development of an open, tool-independent interchange format for High-level Petri nets. The text format will make it possible to move Design/CPN diagrams between all supported hardware platforms and versions. It is also designed to be a bridge to other Petri Net tools, e. g., other analysis tools which the user may want to use with Design/CPN diagrams. The proposed text format does not address any standardisation for the inscription language used in the diagram. It is, however, possible to extend the format to incorporate such a standardisation. The text format is designed for the exchange of Hierarchical Coloured Petri Nets but the structure is general enough to cope with o [...] ...|$|R
