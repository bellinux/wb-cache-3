21|88|Public
50|$|As a <b>native</b> <b>protocol</b> {{embedded}} in the SCADA host.|$|E
5000|$|Type 4, the pure-java driver {{that uses}} {{database}} <b>native</b> <b>protocol.</b>|$|E
5000|$|Pegasus Mail - A free mail client used MHS its <b>native</b> <b>protocol.</b>|$|E
50|$|Sphinx {{can be used}} {{either as}} a {{stand-alone}} server or as a storage engine ("SphinxSE") for the MySQL family of databases.When run as a standalone server Sphinx operates similar to a DBMS and can communicate with MySQL, MariaDB and PostgreSQL through their <b>native</b> <b>protocols</b> or with any ODBC-compliant DBMS via ODBC.MariaDB, a fork of MySQL, is distributed with SphinxSE.|$|R
50|$|This product {{provides}} {{a set of}} gateway processes that run on Tuxedo that communicate with a mainframe using its <b>native</b> <b>protocols.</b> This gateway provides bidirectional integration between mainframe and Tuxedo platforms and makes Tuxedo appear as a remote CICS or IMS region to the mainframe, and the remote CICS or IMS region as another Tuxedo domain to the local Tuxedo application.|$|R
50|$|Microsoft Exchange Connectivity. The Bat! {{connects to}} Microsoft Exchange Server using <b>native</b> MAPI <b>protocol</b> to fetch or send messages.|$|R
5000|$|Sola Access Information Language (SAIL) [...] <b>native</b> <b>protocol</b> is primary form of {{front end}} access {{electronic}} communication protocol of the Sola Trading platform ...|$|E
50|$|This module is the {{interface}} between a proprietary (eventually <b>native)</b> <b>protocol</b> and the ISO/IEEE (VITAL) object world.It is not defined within the standard {{and as a result}} it can be implemented free.|$|E
5000|$|GlusterFS has {{a client}} and server component. Servers are {{typically}} deployed as storage bricks, with each server running a glusterfsd daemon to export a local file {{system as a}} volume. The glusterfs client process, which connects to servers with a custom protocol over TCP/IP, InfiniBand or Sockets Direct Protocol, creates composite virtual volumes from multiple remote servers using stackable translators. By default, files are stored whole, but striping of files across multiple remote volumes is also supported. The final volume may then be mounted by the client host using its own <b>native</b> <b>protocol</b> via the FUSE mechanism, using NFS v3 protocol using a built-in server translator, or accessed via gfapi client library. Native-protocol mounts may then be re-exported e.g. via the kernel NFSv4 server, SAMBA, or the object-based OpenStack Storage (Swift) protocol using the [...] "UFO" [...] (Unified File and Object) translator.|$|E
5000|$|Rsync {{can also}} {{operate in a}} daemon mode, serving files in the <b>native</b> rsync <b>protocol</b> (using the [...] "rsync://" [...] syntax).|$|R
5000|$|SAS {{controllers}} may {{connect to}} SATA devices, either directly connected using <b>native</b> SATA <b>protocol</b> or through SAS expanders using Serial ATA Tunneling Protocol (STP).|$|R
5000|$|... uWSGI {{is often}} used for serving Python web {{applications}} in conjunction with web servers such as Cherokee and Nginx, which offer direct support for uWSGI's <b>native</b> uwsgi <b>protocol.</b>|$|R
40|$|The {{paper is}} {{evaluating}} the overheads for different security technologies used in wireless networks {{in order to}} correctly identify the right solution for practical implementations. Since in IEEE 802. 11 communications the <b>native</b> <b>protocol</b> overheads are more extended compared with other technologies, adding new overheads could negatively impact on the overall throughput. For this reason the usual WEP and WPA methods were analyzed in order to calculate the real throughput degradation. Previous works on this problem provide heterogeneous information and few usable data for network engineers...|$|E
40|$|OUCH A simple {{protocol}} {{that allows}} NASDAQ participants to enter, replace and cancel orders, and receive executions. It is the low-level <b>native</b> <b>protocol</b> for connecting to NASDAQ. RASH A simple proprietary protocol that allows NASDAQ participants to enter orders, cancel existing orders and receive executions. FIX NASDAQ‘s FIX implementation {{acts like a}} router, converting incoming FIX messages into OUCH messages and back again. FIX Lite Order entry protocol based on a subset of FIX 4. 2. QIX NASDAQ protocol that provides a fast, reliable point-to-point connection from the NASDAQ Market Center to your site. CTCI Allows subscribers to record and to report NASDAQ securities transactions from their computer systems to NASDAQ’s computer systems via th...|$|E
40|$|Only on OUCH 4. 0 OUCH A simple {{protocol}} {{that allows}} NASDAQ participants to enter, replace and cancel orders, and receive executions. It is the low-level <b>native</b> <b>protocol</b> for connecting to NASDAQ. RASH A simple proprietary protocol that allows NASDAQ participants to enter orders, cancel existing orders and receive executions. FIX NASDAQ‘s FIX implementation {{acts like a}} router, converting incoming FIX messages into OUCH messages and back again. FIX Lite Order entry protocol based on a subset of FIX 4. 2. QIX NASDAQ protocol that provides a fast, reliable point-to-point connection from the NASDAQ Market Center to your site. CTCI Allows subscribers to record and to report NASDAQ securities transactions from their computer systems to NASDAQ’s computer systems via th...|$|E
40|$|This paper {{examines}} {{the performance of}} DTN bundling layers against <b>native</b> <b>protocols</b> for radio data network {{with a view to}} possible deployment for emergency communications purposes. The authors conducted experiments with an existing DTN convergence layer in both AX. 25 point-to-point and D-Star multi-hop communications links with hidden transmitters. The experimental results show that the DTN system exhibits marginally better performance than TCP/IP, appears to perform better where there are hidden transmitters, and has a more compact link utilisation pattern than TCP/IP. However, situations where obvious improvements can still be made were also identified...|$|R
5000|$|... xrdp allows remote {{connection}} to a Linux installation through the <b>native</b> Windows RDP <b>protocol</b> ...|$|R
5000|$|FreeSWITCH is a WebRTC Application Server, able to {{directly}} provide native services to browsers, like videoconferences, IVRs, Call Centers, {{without the use}} of any gateway or third party. FreeSWITCH can directly provide services through Secure WebSocket (WSS), SRTP, and DTLS, the <b>native</b> WebRTC <b>protocols.</b>|$|R
40|$|This paper {{describes}} {{a proposal for}} a protocol known as OHP, for communication between applications and hypermedia link services. If hypermedia viewers were written to use this protocol, or third party applications were adapted to use the protocol, then these applications could be used with any link service which adhered to the protocol. The paper proposes the use of shims for converting between the OHP protocol and the linkservice's <b>native</b> <b>protocol.</b> Contents 1. Introduction 2. The Protocol Shim 3. Anchors 4. Communication Protocols 5. Defining the OHP Protocol 5. 1. LocSpecs 5. 2. Presentation Specifics 5. 3 Scripts 5. 4. Communication Channels 5. 5. Form of the Protocol 5. 6. Messages that the linkserver may send 5. 7. Messages that the Editor/Viewer May Send 5. 8. Messages that both may send 5. 9 Protocol Summary 6. Example Scenarios 7. Existing Standards 8. Conclusions Appendix: Summary of Protocol References 1. Introduction In order to introduce this paper we would first like to define w [...] ...|$|E
40|$|System on Chip is {{composed}} of many Intellectual Property (IP) blocks which {{communicate with each other}} using different bus protocols. Each IP may have different <b>native</b> <b>protocol.</b> So establishing communication between these bus protocols which vary from one IP to another is of much significance. The protocols used may be either proprietary or non-proprietary. AXI 1. 0 and OCP 2. 0 protocols and are used to build our ASIC interconnect system. Here we establish communication between these two protocols using an AXI to OCP converter. This converter acts as a bridge between the two protocols clearing the incompatibilities for communication. We also use a clock bridge to enhance communication between IP blocks that operate at different frequencies. The numbers of masters, slaves, address and data widths are also configurable depending on the requirement. The AXI master, AXI to OCP converter, Clock Bridge, OCP master, OCP slaves, arbiter and address decoder are designed using VHDL and synthesized...|$|E
40|$|NASDAQ accepts limit {{orders from}} system {{participants}} and executes matching orders when possible. Non-matching orders may {{be added to}} the NASDAQ Limit Order Book, a database of available limit orders, where they wait to be matched in price-time priority. OUCH is a simple protocol that allows NASDAQ participants to enter orders, cancel existing orders and receive executions. It is intended to allow participants and their software developers to integrate NASDAQ into their proprietary trading systems or to build custom front ends. OUCH only provides a method for participants to send orders to NASDAQ and receive updates on those orders entered. For information about all orders entered into and executed on the NASDAQ book, refer to the ITCH protocol (available separately). OUCH is the low-level <b>native</b> <b>protocol</b> for connecting to NASDAQ. It is designed to offer the maximum possible performance at the cost of flexibility and ease of use. For applications that do not require this extreme level of performance, NASDAQ offers other, more standard interfaces that may be more suitable and easier to develop to. 1. 1 Architectur...|$|E
50|$|Standard OPC {{databases}} {{serve as}} the communication link to the Distributed Control System (DCS), Hydraulic Power Unit (HPU), and Electrical Power Unit (EPU). The UMCS will communicate with subsea control pods at the wellhead from multiple subsea equipment providers, without disrupting the subsea vendor’s <b>native</b> communication <b>protocol.</b>|$|R
40|$|With the {{emergence}} of large switched public data networks that are well-suited to connectionless internets, for instance SMDS, {{it is possible that}} larger and larger numbers of internet users will get their connectivity from large public data networks whose <b>native</b> <b>protocols</b> {{are not the same as}} the user’s internet protocol. This results in a routing problem that has not yet been addressed. That is, large numbers of routers (potentially tens of thousands) must be able to find direct routes to each other in a robust and efficient way. This paper describes a solution to the problem, called shortcut routing, that incorporates 1) a sparse graph of logical connectivity between routers, 2) hierarchical addressing among the public data network subscribers, and 3) the use of “entry router ” information i...|$|R
50|$|SONET {{is a set}} of {{transport}} containers that allow for delivery of a variety of protocols, including traditional telephony, ATM, Ethernet, and TCP/IP traffic. SONET therefore is not in itself a <b>native</b> communications <b>protocol</b> and should not be confused as being necessarily connection-oriented in the way that term is usually used.|$|R
40|$|Title: Supporting {{multiplatform}} applications with YA-RPC Author: František Kovařík Department: Department of Software Engineering Supervisor: RNDr. Petr Hnětynka, Ph. D. Supervisor's e-mail address: hnetynka@d 3 s. mff. cuni. cz Abstract: Over {{the last}} three decades, Remote Procedure Call (RPC) has become a popular inter-computer and inter-process communication paradigm widely used {{by a variety of}} interconnected computer systems. Even though a number of RPC protocols and implementations evolved over those years, no single system offers a significant set of features, while providing an easy-to-use application programming interface. In this thesis, we present Yet Another Remote Procedure Call - YaRpc, a specification of a flexible and programmer friendly middleware that offers advanced features such as pluggable transports and protocols, callbacks, and configurable method dispatch. Additionally, we define YaRpc <b>Native</b> <b>Protocol</b> (YNP), a new light-weight high-performance RPC protocol with a rich set of features. We provide a native implementation of both YaRpc middleware and YNP protocol for Java and. NET Framework, and compare its usability with Java RMI,. NET Remoting and SOAP web services. Keywords: YaRpc, remote procedure call, distributed syste...|$|E
40|$|An {{unmanned}} vehicle systems test-bed {{has been}} developed. The test-bed {{has been designed}} to accommodate hardware changes and various vehicle types and algorithms. The creation of this test-bed allows research teams to focus on algorithm development and employ a common well-tested experimental framework. The ArduPilotOne autopilot was developed to provide the necessary level of abstraction for multiple vehicle types. The autopilot was also designed to be highly integrated with the Mavlink protocol for Micro Air Vehicle (MAV) communication. Mavlink is the <b>native</b> <b>protocol</b> for QGroundControl, a MAV ground control program. Features were added to QGroundControl to accommodate outdoor usage. Next, the Mavsim toolbox was developed for Scicoslab to allow hardware-in-the-loop testing, control design and analysis, and estimation algorithm testing and verification. In order to obtain linear models of aircraft dynamics, the JSBSim flight dynamics engine was extended to use a probabilistic Nelder-Mead simplex method. The JSBSim aircraft dynamics were compared with wind-tunnel data collected. Finally, a structured methodology for successive loop closure control design is proposed. This methodology is demonstrated {{along with the rest of}} the test-bed tools on a quadrotor, a fixed wing RC plane, and a ground vehicle. Test results for the ground vehicle are presented. ...|$|E
40|$|The {{software}} package presented within {{this paper has}} proven to be capable of managing the storage and exchange of several hundreds of terabytes of data, transparently distributed among dozens of disk storage nodes. One of the key design features of the dCache is that although the location and multiplicity of the data is autonomously determined by the system, based on configuration, cpu load and disk space, the name space is uniquely represented within a single file system tree. The system has shown to significantly improve the efficiency of connected tape storage systems, through caching, 'gather & flush ' and scheduled staging techniques. Furthermore, it optimizes the throughput to and from data clients as well as smoothing the load of the connected disk storage nodes by dynamically replicating datasets on the detection of load hot spots. The system is tolerant against failures of its data servers which enables administrators to go for commodity disk storage components. Access to the data is provided by various ftp dialects, including gridftp, as well as by a <b>native</b> <b>protocol,</b> offering regular file system operations like open/read/write/seek/stat/close. Furthermore the software is coming with an implementation of the Storage Resource Manager protocol, SRM, which is evolving to an open standard for grid middleware to communicate with site specific storage fabrics...|$|E
50|$|IIoT and MES Gateway {{appliances}}: Computer appliances {{that are}} designed to translate data bidirectionally between control systems and enterprise systems. Proprietary, embedded, firmware applications running on the appliance use point-to-point connections to translate data between field devices in their <b>native</b> automation <b>protocols</b> and MES systems through their APIs, ODBC, or RESTful interfaces.|$|R
50|$|A metaobject {{protocol}} {{is one way}} {{to implement}} aspect-oriented programming. Many of the early founders of MOPs, including Gregor Kiczales, have since moved on to be the primary advocates for aspect-oriented programming. Kiczales et al. of PARC were hired to design AspectJ for Java, a language which does not possess a <b>native</b> metaobject <b>protocol.</b>|$|R
50|$|Mail-11 was the <b>native</b> email {{transport}} <b>protocol</b> used by Digital Equipment Corporation's VMS operating system, {{and supported}} by several other DEC operating systems such as Ultrix.|$|R
40|$|Much {{recent work}} on Byzantine state machine {{replication}} focuses on protocols with improved performance under benign conditions (LANs, homogeneous replicas, limited crash faults), with relatively little evaluation under typical, practical conditions (WAN delays, packet loss, transient disconnection, shared resources). This {{makes it difficult}} for system designers to choose the appropriate protocol for a real target deployment. Moreover, most protocol implementations differ in their choice of runtime environment, crypto library, and transport, hindering direct protocol comparisons even under similar conditions. We present a simulation environment for such protocols that combines a declarative networking system with a robust network simulator. Protocols can be rapidly implemented from pseudocode in the high-level declarative language of the former, while network conditions and (measured) costs of communication packages and crypto primitives can be plugged into the latter. We show that the resulting simulator faithfully predicts the performance of <b>native</b> <b>protocol</b> implementations, both as published and as measured in our local network. We use the simulator to compare representative protocols under identical conditions and rapidly explore the effects of changes in the costs of crypto operations, workloads, network conditions and faults. For example, we show that Zyzzyva outperforms protocols like PBFT and Q/U under most but not all conditions, indicating that one-size-fits-all protocols may be hard if not impossible to design in practice. ...|$|E
40|$|Witnet is a {{decentralized}} oracle network (DON) {{that connects}} smart contracts {{to the outer}} world. Generally speaking, it allows any piece of software to retrieve the contents published at any web address {{at a certain point}} in time, with complete and verifiable proof of its integrity and without blindly trusting any third party. Witnet runs on a blockchain with a <b>native</b> <b>protocol</b> token (called Wit), which miners-called witnesses-earn by retrieving, attesting and delivering web contents for clients. On the other hand, clients spend Wit to pay witnesses for their Retrieve-Attest-Deliver (RAD) work. Witnesses also compete to mine blocks with considerable rewards, but Witnet mining power is proportional to their previous performance in terms of honesty and trustworthiness-this is, their reputation as witnesses. This creates a powerful incentive for witnesses to do their work honestly, protect their reputation and not to deceive the network. The Witnet protocol is designed to assign the RAD tasks to witnesses in a way that mitigates most attack vectors to the greatest extent. At the same time, it includes a novel 'sharding' feature that (1) guarantees the efficiency and scalability of the network, (2) keeps the price of RAD tasks within reasonable bounds and (3) gives clients the freedom to adjust certainty and price by letting them choose how many witnesses will work on their RAD tasks. When coupled with a Decentralized Storage Network (DSN), Witnet also gives us the possibility to build the Digital Knowledge Ark: a decentralized, immutable, censorship-resistant and eternal archive of humanity's most relevant digital data. A truth vault aimed to ensure that knowledge will remain democratic and verifiable forever and to prevent history from being written by the victors. Comment: Version 0. 1 - 58 pages, 18 figures - Reviewed and edited by D. Levi and L. I. Cuend...|$|E
40|$|Increasing traffic volumes in the Internet put strict {{requirements}} to the architectureof optical core networks. The exploding number of Internet users, andmassive increase in Internet content consumption forces carriers to constantlyupgrade and transform their core networks {{in order to}} cope with the trafficgrowth. The choice of both physical components and transport protocols inthe core network is crucial in order to provide satisfactorily performance. Data traffic in the core network consists {{of a wide variety of}} protocols. OTN is a digital wrapper technology, responsible for encapsulating existingframes of data, regardless of <b>native</b> <b>protocol,</b> and adding additional overheadfor addressing, OAM and error control. The wrapped signal is thentransported directly over wavelengths in the optical transport network. Thecommon OTN wrapper overhead makes it possible to monitor and controlthe signals, regardless of the protocol type being transported. OTN is standardized by the ITU through a series of recommendations,the two most important being ITU-T G. 709 - "Interfaces for the OpticalTransport Network", and ITU-T G. 872 - "Architecture of the Optical TransportNetwork". OTN uses a flexible TDM hierarchy in order to provide highwavelength utilization. The TDM hierarchy makes it possible to performswitching at various sub-wavelength bit rates in network nodes. An introduction to OTN and an overview of recent progress in OTNstandardization is given in the thesis. An OTN switch which utilizes theflexible multiplexing hierarchy of OTN is proposed, and its characteristics istested in a network scenario, comparing it to the packet switched alternative. Simulation results reveal that OTN switching doesn t provide any performancebenefits compared to packet switching in the core network. OTNswitches do however provide bypass of intermediate IP routers, reducing therequirements for router processing power in each network node. This reducesoverall cost, and improves network scalability. An automatically reconfigurable OTN switch which rearranges link subcapacitiesbased on differences in output buffer queue lengths is also proposedand simulated in the thesis. Simulation results show that the reconfigurableOTN switch has better performance than both pure packet switching andregular OTN switching in the network scenario...|$|E
30|$|For each {{of these}} options, the basic {{functionality}} for transferring the data within the hybrid cloud system is available within the proof-of-concept system. The main additional steps would be {{to add to the}} management and user interface layers. For point 1, usage tracking could be used as one mechanism to determine whether content was no longer required to be stored on high storage tiers. For point 3, creating a copy of the data within the host cloud provider is more cost-effective than exporting and reimporting the data, should a copy already be available. All data access is currently through Fedora {{and the only way to}} use S 3 <b>native</b> <b>protocols</b> is to use a tool not part of Kindura. Direct access via S 3 protocols would make the data difficult to navigate since the S 3 names are UUIDs combined with our given names.|$|R
50|$|<b>Native</b> {{plaintext}} tunneling <b>protocols</b> include Layer 2 Tunneling Protocol (L2TP) {{when it is}} set {{up without}} IPsec and Point-to-Point Tunneling Protocol (PPTP) or Microsoft Point-to-Point Encryption (MPPE).|$|R
50|$|Scality {{released}} version 4.2 in October 2013 which added <b>native</b> {{file access}} <b>protocols</b> including Network File System (NFS), Server Message Block (SMB), Apple Filing Protocol (AFP), and FTP.|$|R
