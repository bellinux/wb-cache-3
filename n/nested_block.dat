44|155|Public
25|$|IF..THEN..(ENDIF). Rather {{than being}} {{restricted}} to a jump, any simple statement, or <b>nested</b> <b>block,</b> could follow the THEN key keyword. This a structured form.|$|E
2500|$|... sh lacked an {{expression}} grammar. The square bracketed condition {{had to be}} evaluated by the slower means of running the external test program. [...] sh's if command took its argument words as a new command to be run as a child process. [...] If the child exited with a zero return code, sh would look for a then clause (a separate statement, but often written joined on the same line with a semicolon) and run that <b>nested</b> <b>block.</b> [...] Otherwise it would run the else. [...] Hard-linking the test program as both [...] "test" [...] and [...] " ...|$|E
5000|$|... <b>nested</b> <b>block</b> structure: code {{sequences}} {{and associated}} declarations could be grouped into blocks {{without having to}} be turned into separate, explicitly named procedures; ...|$|E
5000|$|... <b>nested</b> <b>blocks</b> of {{imperative}} {{source code}} such as nested if-clauses, while-clauses, repeat-until clauses etc.|$|R
50|$|The {{common myna}} (along with European starlings, house sparrows, and feral rock pigeons) is a {{nuisance}} to city buildings; its <b>nests</b> <b>block</b> gutters and drainpipes, causing water damage to building exteriors.|$|R
40|$|QCTL {{extends the}} {{temporal}} logic CTL with quantification over atomic propositions. While the algorithmic questions for QCTL and its fragments with limited quantification depth are well-understood (e. g. satisfiability of QkCTL, with at most k <b>nested</b> <b>blocks</b> of quantifiers, is (k+ 1) -EXPTIME-complete), very few results are {{known about the}} expressiveness of this logic. We address such expressiveness questions in this paper. We first consider the distinguishing power of these logics (i. e., their ability to separate models), their relationship with behavioural equivalences, {{and their ability to}} capture the behaviours of finite Kripke structures with so-called characteristic formulas. We then consider their expressive power (i. e., their ability to express a property), showing that in terms of expressiveness the hierarchy QkCTL collapses at level 2 (in other terms, any QCTL formula can be expressed using at most two <b>nested</b> <b>blocks</b> of quantifiers) ...|$|R
5000|$|... Rather {{than being}} {{restricted}} to a jump, any simple statement, or <b>nested</b> <b>block,</b> could follow the THEN key keyword. This a structured form.|$|E
5000|$|Exceptions {{are raised}} in the code via the throw (...) procedure. Try {{statements}} allow the program to bail out of any <b>nested</b> <b>block,</b> {{and serve as a}} better replacement for intra-procedure gotos (which are still supported under Pascaline). Since unhandled exceptions generate errors by default, the throw (...) procedure can serve as a general purpose error flagging system.|$|E
5000|$|Like raw strings, {{there can}} be any number of equals signs between the square brackets, {{provided}} both the opening and closing tags have a matching number of equals signs; this allows nesting as long as <b>nested</b> <b>block</b> comments/raw strings use a different number of equals signs than their enclosing comment: [...] Lua discards the first newline (if present) that directly follows the opening tag.|$|E
5000|$|This code is {{identical}} to the following <b>nested</b> IF/THEN/ELSE/END <b>block</b> equivalent: ...|$|R
25|$|Any {{number and}} variety of catch clauses can be used above. If there is no catch {{matching}} a particular throw, control percolates back through subroutine calls and/or <b>nested</b> <b>blocks</b> until a matching catch is found or {{until the end of}} the main program is reached, at which point the program is forcibly stopped with a suitable error message.|$|R
40|$|Turing {{machine is}} model for {{general-purpose}} computing device. There are many implementation of Turing Machine. Khan and Khiyal (2006) presented a deterministic Turing model that simulates distributed processing. In current study we enhanced {{the model for}} complex tasks and enable to solve equation with several operands on the right hand, to perform <b>nested</b> conditional <b>blocks,</b> <b>nested</b> loop and updated the function execution...|$|R
50|$|Judith Querida Longyear (20 September 1938 - 13 December 1995) was an American {{mathematician}} {{and professor}} whose research interests included graph theory and combinatorics. Longyear earned her Ph.D. from Pennsylvania State University 1972, {{under the supervision}} of Sarvadaman Chowla, with a thesis entitled Tactical Configurations. She taught mathematics at several universities including California Institute of Technology, Dartmouth College and Wayne State University. She worked on <b>nested</b> <b>block</b> designs and Hadamard matrices.|$|E
5000|$|VisSim uses a {{hierarchical}} composition to create <b>nested</b> <b>block</b> diagrams. A typical model {{would consist of}} [...] "virtual plants" [...] composed of various VisSim [...] "layers", combined if necessary with custom blocks written in C or FORTRAN. A virtual controller can be added and tuned to give desired overall system response. Graphical control element such as sliders and buttons allow control of what-if analysis for operator training or controller tuning.|$|E
5000|$|... sh lacked an {{expression}} grammar. The square bracketed condition {{had to be}} evaluated by the slower means of running the external test program. sh's if command took its argument words as a new command to be run as a child process. If the child exited with a zero return code, sh would look for a then clause (a separate statement, but often written joined on the same line with a semicolon) and run that <b>nested</b> <b>block.</b> Otherwise it would run the else. Hard-linking the test program as both [...] "" [...] and [...] "" [...] gave the notational advantage of the square brackets and the appearance that the functionality of test {{was part of the}} sh language. sh's use of a reversed keyword to mark the end of a control block was a style borrowed from ALGOL 68.|$|E
5000|$|The <b>block</b> <b>nested</b> loop runs in [...] I/Os where [...] is {{the number}} of {{available}} pages of internal memory and [...] and [...] is size of [...] and [...] respectively in pages. Notethat <b>block</b> <b>nested</b> loop runs in [...] I/Os if [...] fits in the available internal memory.|$|R
5000|$|Syntax defects were {{generally}} simple but unnecessary inconsistencies {{in the definition}} of the language. For example, the , [...] and [...] commands all did basically the same thing, namely, associate a name with a string or set of words. But all three had slight but unnecessary differences. An equal sign was required for a [...] but not for [...] or parentheses were required around a word list for a [...] but not for [...] or , etc. Similarly, the , [...] and looping constructs use needlessly different keywords ( [...] , [...] and [...] ) to terminate the <b>nested</b> <b>blocks.</b>|$|R
50|$|Most basically, {{applications}} use code folding {{to outline}} source code, collapsing each block {{to a single}} line. This can be only top-level blocks like functions and classes, <b>nested</b> <b>blocks</b> like <b>nested</b> functions and methods, or all blocks, notably control-flow blocks. This allows one to get an overview of code, easily navigating and rearranging it, and to drill down into more detail as needed, without being distracted by other code. Viewing-wise, this allows one to quickly see {{a list of all}} functions (without their bodies), while navigation-wise this replaces extensive paging past long functions - or searching for the target - with going directly to the next function.|$|R
50|$|In {{the book}} Programmers at Work, C. Wayne Ratliff {{discussed}} using the style below. The style begins much like 1TBS {{but then the}} closing brace lines up with the indent of the <b>nested</b> <b>block.</b> Ratliff was the original programmer behind the popular dBase-II and -III fourth-generation programming languages. He indicated that it was originally documented in material from Digital Research Inc. This style has sometimes been termed banner style, possibly for the resemblance to a banner hanging from a pole. In this style, which is to Whitesmiths as K&R is to Allman, the closing control is indented as the last item in the list (and thus properly loses salience). The style can make visual scanning easier for some, since the headers of any block are the only thing exdented at that level (the theory being that the closing control of the prior block interferes with the visual flow of the next block header in the K&R and Allman styles).|$|E
40|$|A {{method of}} {{analysing}} join algorithms {{based upon the}} time required to access, transfer and perform the relevant CPU based operations on a disk page is proposed. The costs of variations of several of the standard join algorithms, including <b>nested</b> <b>block,</b> sort-merge, GRACE hash and hybrid hash, are presented. For a given total buffer size, the cost of these join algorithms depends on the parts of the buffer allocated for each purpose (for example, when joining two relations using the <b>nested</b> <b>block</b> join algorithm the amount of buffer space allocated for the outer and inner relations can significantly affect the cost of the join). Analysis of expected and experimental results of various join algorithms show that a combination of the optimal <b>nested</b> <b>block</b> and optimal GRACE hash join algorithms usually provide the greatest cost benefit. Algorithms to quickly determine the buffer allocation producing the minimal cost for each of these algorithms are presented. 1 Introduction In the past, the [...] ...|$|E
40|$|Abstract. A {{method of}} {{analysing}} join algorithms {{based upon the}} time required to access, transfer and perform the relevant CPU-based operations on a disk page is proposed. The costs of variations of several of the standard join algorithms, including <b>nested</b> <b>block,</b> sort-merge, GRACE hash and hybrid hash, are presented. For a given total buffer size, the cost of these join algorithms depends on the parts of the buffer allocated for each purpose. For example, when joining two relations using the <b>nested</b> <b>block</b> join algorithm, the amount of buffer space allocated for the outer and inner relations can significantly affect the cost of the join. Analysis of expected and experimental results of various join algorithms show that a combination of the optimal <b>nested</b> <b>block</b> and optimal GRACE hash join algorithms usually provide the greatest cost benefit, unless the relation size is a small multiple of the memory size. Algorithms to quickly determine a buffer allocation producing the minimal cost for each of these algorithms are presented. When the relation size is a small multiple of the amount of main memory available (typically up to three to six times), the hybrid hash join algorithm is preferable...|$|E
50|$|In {{computer}} programming, a {{block or}} code block is a lexical structure of source code which is grouped together. Blocks consist {{of one or more}} declarations and statements. A programming language that permits the creation of <b>blocks,</b> including <b>blocks</b> <b>nested</b> within other <b>blocks,</b> is called a block-structured programming language. Blocks are fundamental to structured programming, where control structures are formed from blocks.|$|R
40|$|Abstract – Content of the {{web page}} is the textual and {{graphical}} information that related {{to the topic of}} the page, which is the focus of web data mining and information retrieval. For web pages, the page content is the target of word-segmentation and indexing for search engine, corpus collection of news, reviews, blogs, etc. for knowledge management researches. Extracting content {{of the web}} pages correctly and efficiently improves the accuracy of following analysis for it significantly reduces the noise in the pages, and also alleviates the workload of indexing and segmentation. In this works, no uniform approach or model is presented to measure the importance of different nested portions in web pages. Through a user study, we found that people do have a consistent view about the importance of blocks in web pages. In this paper, we investigate how to find a model to automatically assign importance values to <b>nested</b> <b>blocks</b> in a web page. We define the block importance estimation as a learning problem. First, we use the VIPS (Vision-based Page Segmentation) algorithm to partition a web page and block in the webpage into semantic blocks with a hierarchy structure. Then spatial features (such as position, size) and content features (such as the number of images and links) are extracted to construct a feature vector for each <b>block</b> and <b>nested</b> <b>blocks</b> [...] Based on analyzing the features of the pages, this approach could effectively extract contents from web pages. Experiments show good results comparing to related works...|$|R
50|$|In {{computer}} science, a {{local variable}} is a variable that is given local scope. Local variable references in the function or block {{in which it}} is declared override the same variable name in the larger scope. In programming languages with only two levels of visibility, local variables are contrasted with global variables. On the other hand, many ALGOL-derived languages allow any number of nested levels of visibility, with private variables, functions, constants and types hidden within them, either by <b>nested</b> <b>blocks</b> or <b>nested</b> functions. Local variables are fundamental to procedural programming, and more generally modular programming: variables of local scope are used to avoid issues with side-effects that can occur with global variables.|$|R
40|$|The {{management}} of three connected reservoirs for the capture, storage and supply of urban stormwater is modelled using a pump-to-fill policy that minimises {{the volume of}} water lost to overflow. A discrete state Markov model is used with constant daily demand from the supply reservoir and stochastic inflow to the capture reservoir. The pump-to-fill policy is completely deterministic and depends only on the current volume in the supply, storage and capture reservoirs. By judicious ordering of the states the very large transition matrix is shown to possess a <b>nested</b> <b>block</b> upper Hessenberg structure. Standard censoring methods reduce {{the analysis of the}} system to a characteristic sequence of full-to-full transitions for the supply reservoir. The <b>nested</b> <b>block</b> structure of the original transition matrix is captured using special recursive algebraic procedures that enable a further reduction to a sequence of simultaneous full-to-full transitions for the supply and storage reservoirs. Capabilities of the model are demonstrated through application to a hypothetical three-reservoir network for the capture and supply of water. The methods proposed in this paper could be used to calculate the steady-state probabilities for three-reservoir storage systems and could assist projections for future water supply capabilities. This paper also provides insight into how the analysis could be extended to systems of more than three reservoirs. ...|$|E
30|$|Once the <b>nested</b> <b>block</b> {{optimization}} class tree solver Hopt {{is found}} and each image block {{is only a}} simple matrix-vector inner product, {{an estimate of the}} original image block can be obtained. The image is divided into n non-overlapped image blocks; only the n sub-matrix-vector inner product operation can be used to complete the image processing of the entire image. The total amount of calculation requires only M[*]×[*]B 2 sub-multiplication and M[*]×[*]B 2 sub-adding, which is much smaller than the image processing method in the traditional product design.|$|E
40|$|Statistical {{properties}} of designs with {{two kinds of}} treatments: basic and supplementary, are examined. The basic treatments are arranged randomly in an ([alpha] 1,[alpha] 2, [...] .,[alpha]R) -resolvable block design. This basic design is orthogonally supplemented by some orthogonal addition of the supplementary treatments. Mixed linear models of observations following two- or three-step randomizations are considered. The final design under these models is generally balanced and that allows obtaining its stratum efficiency factors for both cases. ([alpha] 1,[alpha] 2, [...] .,[alpha]R) -Resolvability Efficiency balance General balance Multistratum analysis <b>Nested</b> <b>block</b> design Orthogonal block structure Partial efficiency balance Supplemented block design...|$|E
5000|$|This is {{essentially}} the same as the <b>block</b> <b>nested</b> loop join algorithm. This algorithm scans [...] more times than necessary.|$|R
40|$|Using <b>nested</b> {{balanced}} incomplete <b>block</b> designs, new {{families of}} optimal block designs {{for a certain}} type of dialled cross experiments are obtained. It is further shown that triangular partially balanced incomplete block designs satisfying a certain parametric condition also lead to optimal designs for diallel crosses. These results unify and extend some of the earlier results on optimality of block designs for diallel crosses. <b>Nested</b> balanced incomplete <b>block</b> designs Triangular design Optimality...|$|R
40|$|Throughout {{the past}} several decades, solitary nesting bees have been {{developed}} {{as an alternative to}} honeybees (Apis mellifera) as pollinators of commercial crops due to declines in honeybee populations. One of the largest problems when using these alternative pollinators is female pre-nesting dispersal. In previous studies it has been found that different release and emergence methods show varying amounts of nesting fidelity. This was tested with the species Osmia californica at four different locations in Cache Valley. Two emergence treatments were used at each location: first, 90 bees were released in mass from loose cocoons in a wooden box. Three wooden <b>nesting</b> <b>blocks</b> within a 30 foot radius from the release site were provided for nesting. This was the control group; this method {{is often referred to as}} the mass release method and is used often in commercially pollinated crops. High pre-nesting dispersal was expected. In the second treatment 90 bees were placed in built-in compartments on the back of three wooden <b>nesting</b> <b>blocks,</b> and emerged through the cavities of the block. This treatment combined positive aspects from the mass release method and natal nest release method in order to increase nest fidelity, and will be referred to as the loose cocoon blocks. These two treatments were placed at least. 12 km from each other at each location. Blocks were out from May-July 2014. Nesting success was calculated by the number of cells provisioned by O. californica for each treatment at each location. Results were variable; at one location the loose cocoon blocks had four times the amount of provisioned cells. At another location the control blocks had two times as many, and at the other locations the two treatments showed equal results. Because of this variability future experiments should be conducted before any definitive questions of success can be answered...|$|R
40|$|We {{introduce}} a partition {{of the web}} pages particularly suited to the PageRank problems in which the web link graph has a <b>nested</b> <b>block</b> structure. Based on the partition of the web pages, dangling nodes, common nodes, and general nodes, the hyperlink matrix can be reordered {{to be a more}} simple block structure. Then based on the parallel computation method, we propose an algorithm for the PageRank problems. In this algorithm, the dimension of the linear system becomes smaller, and the vector for general nodes in each block can be calculated separately in every iteration. Numerical experiments show that this approach speeds up the computation of PageRank...|$|E
40|$|We {{study the}} problem of {{computing}} the matrix exponential of a block triangular matrix in a peculiar way: Block column by block column, from left to right. The need for such an evaluation scheme arises naturally {{in the context of}} option pricing in polynomial diffusion models. In this setting a discretization process produces a sequence of <b>nested</b> <b>block</b> triangular matrices, and their exponentials are to be computed at each stage, until a dynamically evaluated criterion allows to stop. Our algorithm is based on scaling and squaring. By carefully reusing certain intermediate quantities from one step to the next, we can efficiently compute such a sequence of matrix exponentials...|$|E
40|$|Given several systems ’ {{automatic}} {{translations of}} the same sentence, we show how to combine them into a confusion network, whose various paths represent composite translations {{that could be considered}} in a subsequent rescoring step. We build our confusion networks using the method of Rosti et al. (2007), but, instead of forming alignments using the tercom script (Snover et al., 2006), we create alignments that minimize invWER (Leusch et al., 2003), a form of edit distance that permits properly <b>nested</b> <b>block</b> movements of substrings. Oracle experiments with Chinese newswire and weblog translations show that our confusion networks contain paths which are significantly better (in terms of BLEU and TER) than those in tercom-based confusion networks. ...|$|E
40|$|Abstract. This paper {{presents}} a compositional denotational semantics for goto jumps. The semantics interacts {{well with the}} idioms of structural programming, like ifstatements and while-loops. It faithfully models jumps {{into and out of}} <b>nested</b> <b>blocks</b> and it can also handle computed jumps (in the form of C’s switch-statement). The underlying mathematics is remarkable simple: It only uses total functions of ordinary set theory and disjoint unions. Neither domain theory nor continuous functions are required. The paper demonstrates the semantics for a simple while language containing assignments, goto jumps and switch-statements. The semantics is used to verify Duff’s device, a famous example of the (ab-) use of computed jumps in structural programming. The semantics presented here is a generalisation of Huismann and Jacobs semantics for abrupt termination in Java [1]. ...|$|R
50|$|Structured {{programming}} {{consists of}} <b>nested</b> <b>blocks</b> of code, and long blocks of code - such as long switch statements - can obscure the overall structure. Code folding {{allows one to}} see the overall structure and expand to a specific level. Further, in some uses, particularly strict structured programming (single function exit), there are code patterns {{that are hard to}} see when looking at expanded code. For example, in resource management in structured programming, one generally acquires a resource, followed by a block of code using the resource, and finishing with releasing the resource. The acquisition/release pairing is hard {{to see if there is}} a long block of code in between, but easy to see if the intervening block is folded. Similarly, in conditional code like , secondary blocks may be far from the condition statement.|$|R
50|$|The {{soldiers}} of the neotropical termite family Serritermitidae, have a defense strategy which involves front gland autothysis, with the body rupturing between the head and abdomen. When outside the nest they try {{to run away from}} attackers, and only use autothysis when in the <b>nest,</b> to <b>block</b> tunnels up, preventing attackers entering.|$|R
