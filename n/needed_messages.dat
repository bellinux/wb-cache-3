3|662|Public
30|$|In {{order for}} results to be {{generated}} during parallel processing, information exchange between threads is often <b>needed.</b> <b>Messages</b> can be exchanged {{in the following}} communication patterns: 1 to 1, 1 to N, N to 1, and N to N [4, 5]. An interconnection between cores must exist for communication to occur.|$|E
40|$|A {{challenging}} aspect in open ad hoc networks {{is their}} resilience against malicious agents. This {{is especially true}} in complex, urban-scale scenarios where numerous moving agents carry mobile devices that create a peer-to-peer network without authentication. A requirement for the proper functioning of such networks is that all the peers act legitimately, forwarding the <b>needed</b> <b>messages,</b> and concurring to the maintenance of the network connectivity. However, few malicious agents may easily exploit the movement patterns in the network to dramatically reduce its performance. We propose a methodology where an evolutionary algorithm evolves the parameters of different malicious agents, determining their types and mobility patterns in order to minimize the data delivery rate and maximize the latency of communication in the network. As a case study, we consider a fine-grained simulation of a large-scale disruption-tolerant network in the city of Venice. By evolving malicious agents, we uncover situations where even a single attacker can hamper the network performance, and we correlate the performance decay to the number of malicious agents...|$|E
5000|$|With {{the advent}} of computers, IBM saw an {{opportunity}} to apply new technology to the <b>need</b> for <b>message</b> switching.|$|R
50|$|ForgetMeNot Software also {{integrates}} with companies’ {{customer relationship}} management systems. Simple one-way messaging systems don't provide a cost effective or elegant mechanism for customer acceptance, feedback or fulfilment. Enterprises <b>need</b> <b>messaging</b> systems which allow for two-way communication between themselves and the customer. ForgetMeNot Software's eTXT platform enables digital messages {{to be sent to}} and received from consumers which can then be properly categorized and tracked, adding a powerful new tool for companies to maintain and manage customer relationships.|$|R
50|$|A {{semicolon}} (ascii 59) {{is mandatory}} to terminate (and send) a message.A newline is just treated as whitespace and not <b>needed</b> for <b>message</b> termination.|$|R
50|$|Although the {{attacker}} cannot attack {{words of the}} key out of order, he can store messages for later sequential attack on later words once he knows earlier words. Again, he only <b>needs</b> <b>messages</b> with weak IVs, and can discard others. Through this process, he can gather {{a large number of}} messages for attack on the entire key; in fact, he can store only a short portion of the beginning of those messages, just enough to carry the attack out as far as the word of the key the IV will allow him to attack.|$|R
40|$|Abstract. In this paper, {{we address}} the {{question}} whether security of service-oriented computing in general, and web services technology in particular, is adequately equipped for any interaction patterns that are not request-response, such as event-driven interactions. Taking into account the distributed nature of access control, we argue that serviceoriented computing <b>needs</b> <b>message</b> context level security, which captures the relationship of each message to other messages, and places {{it in the context}} of a services interaction sequence. We illustrate these requirements by discussing them from the point of view of the EFSOC framework. ...|$|R
3000|$|... | 2)+O(|V|)}. Note {{that the}} {{communication}} <b>messages</b> <b>needed</b> {{to determine the}} synchronization pairs are one-off.|$|R
5000|$|Authentication: The <b>message</b> <b>needs</b> {{to be sent}} by the person/machine {{who claims}} to have sent it.|$|R
30|$|At {{the time}} of the initial setup, before any {{messages}} are transmitted in the network, the CA and all sources generate the keys that each will <b>need</b> for <b>message</b> authentication. The sets of keys are generated using the TESLA algorithm.|$|R
5000|$|A JAXM client {{may or may}} not use a {{messaging}} provider. Generally, you do not <b>need</b> a <b>messaging</b> provider if {{you just}} want to be a consumer of Web services.Some limitations of not using a messaging provider are the following: ...|$|R
5000|$|... 8BITMIME {{has also}} been introduced, which reduces the <b>need</b> to encode <b>message</b> bodies in a 7-bit format.|$|R
5000|$|It is the {{simplest}} topology, no network addressing is <b>needed,</b> because each <b>message</b> {{has only one}} possible receiver.|$|R
40|$|Abstract Esoteric protocols, such as {{electronic}} cash, {{electronic voting}} and selective dis-closure protocols, use special message constructors {{that are not}} widely used in other types of protocols (for example, in authentication protocols). These mes-sage constructors include blind signatures, commitments and zero-knowledge proofs. Furthermore, a standard formalization of the Dolev-Yao intruder [6] {{does not take into}} account these message constructors, nor does it consider some types of attacks (such as privacy attacks, brute-force dictionary attacks and known-plaintext attacks) that esoteric as well as other types of protocols are designed to protect against. This paper aims to present an extension of typed MSR [3, 4] in order to formally specify the <b>needed</b> <b>message</b> constructors, as well as the capa-bilities of a Dolev-Yao intruder designed to attack esoteric protocols...|$|R
30|$|Each vehicle vi can {{broadcast}} {{messages to}} other vehicles when <b>needed.</b> The <b>messages</b> are links between nodes in M for communication. Denote a message by mmid={bmid,SVRID,tmid} where bmid represents the message body, SVRID represents the vehicle ID of a sender, and tmid {{is the message}} expiration time.|$|R
50|$|This article {{attempts}} {{to make the case}} that reliability is not <b>needed</b> at the <b>message</b> level, but required at the business level.|$|R
50|$|Additionally, some {{switches}} with layer 3 capabilities {{can act as}} an IGMP querier. In networks {{where there}} is no router present to act as a multicast router, a switch with IGMP snooping enabled can be used to generate the <b>needed</b> IGMP <b>messages</b> to get users to subscribe to multicast traffic.|$|R
3000|$|... [...])k[*]×[*] 1 is the {{original}} uncompressible <b>message</b> <b>needed</b> to be sent where k[*]<[*]C. C is the max flow min cut, and F [...]...|$|R
50|$|Some GSM {{smartphones}} will {{alert the}} user {{about the number}} of SMS <b>messages</b> <b>needed</b> to send the message, when it requires more than one.|$|R
5000|$|For example, when a <b>message</b> <b>needs</b> {{to be routed}} from node “2” (which is “010”) to “6” (which is “110”), {{the steps}} are following: ...|$|R
50|$|In 2005, Sendmail {{released}} the Sentrion email infrastructure platform {{to address the}} <b>need</b> for full-content <b>message</b> inspection, enabling policy-based delivery of all human and machine-generated email.|$|R
40|$|In a {{language}} like Smalltalk in which objects communicate only via message passing, message passing {{control is a}} fundamental tool {{for the analysis of}} object behavior (trace, spying) or for the definition of new semantics (asynchronous messages, proxy, [...] .). Different techniques exist, from the well known approach based on the specialization of the doesNotUnderstand: method to the exploitation the method lookup algorithm done by the virtual machine. Until now no comparison between these techniques has been made. In this article we compare the different techniques taking into account the reflective aspects used, the scope, the limit and the cost of the control. Keywords: message passing control, instance specialization, doesNotUnderstand:, error handling, method compilation, anonymous class, minimal object 1 Message Passing Control: A <b>need</b> <b>Message</b> passing control is the corner stone of a broad range of applications from application analysis (trace[BH 90, PWG 93], interaction diagrams, cl [...] ...|$|R
40|$|The {{benefits}} of hardware support for shared memory versus those for message passing {{are difficult to}} evaluate without an in-depth study of real applications on a common platform. We evaluate the communication mechanisms of the MIT Alewife machine, a multiprocessor which provides integrated cache-coherent shared memory, message passing, and DMA. We perform this evaluation with "best-effort" implementations which solve several sparse, irregular benchmark problems with a preconditioned conjugate gradient sparse matrix solver (ICCG). We find that machines with fast global memory operations do not <b>need</b> <b>message</b> passing or bulk transfer to support our irregular problems. This is primarily due to three reasons. First, a 5 -to- 1 ratio between global and local cache misses makes memory copies in bulk communication expensive relative to communication via shared memory. Second, although message passing has synchronization semantics superior to shared memory for datadriven computation, efficient sha [...] ...|$|R
3000|$|... {{path and}} the {{destination}} node does not <b>need</b> any additional <b>message</b> from the indirect path to decode error free. Any relay power spend on forwarding over [...]...|$|R
5000|$|Routing: <b>Messages</b> <b>need</b> {{to be routed}} {{efficiently}} {{from the}} sender to the receiver. Intermediate nodes may need to route the messages if {{the body of the}} message is encrypted.|$|R
40|$|International audienceSelf-reconfiguration {{for moving}} MEMS microrobots {{currently}} needs a positioning {{system and a}} map of the target shape. Traditional positioning solutions like GPS or multilateration are not applicable in the micro-world and maps sharing does not scale. In this paper we present self-reconfiguration method where nodes are unaware of their positions, and where {{they do not have the}} final coordinates of each microrobots. In other words, nodes do not store the correct positions that build the target shape. Consequently memory usage for each node is reduced to O(1). This algorithm does not <b>need</b> <b>message</b> exchange to achieve the self reconfiguration from a chain to square configuration (microrobots are organized in square shape) that represents the optimal logical topology for messages sending and it ensures a Snap-connectivity. Obtained results show a rapid convergence of the algorithm. The worst-case time complexity is of n movement rounds, where n represents the number of microrobots. Our algorithm is implemented in the declarative language MELD and executed in the simulator DPRSim...|$|R
40|$|International audienceTo execute MPI {{applications}} reliably, {{fault tolerance}} mechanisms are <b>needed.</b> <b>Message</b> logging {{is a well}} known solution to provide fault tolerance for MPI applications. It as been proved that it can tolerate higher failure rate than coordinated checkpointing. However pessimistic and causal message logging can induce high overhead on failure free execution. In this paper, we present O 2 P, a new optimistic message logging protocol, based on active optimistic message logging. Contrary to existing optimistic message logging protocols that saves dependency information on reliable storage periodically, O 2 P logs dependency information {{as soon as possible}} {{to reduce the amount of}} data piggybacked on application messages. Thus it reduces the overhead of the protocol on failure free execution, making it more scalable and simplifying recovery. O 2 P is implemented as a module of the Open MPI library. Experiments show that active message logging is promising to improve scalability and performance of optimistic message logging...|$|R
40|$|AllNet {{is a new}} {{networking}} protocol {{designed to}} provide communication utilizing all available means, including Internet and cellular communications, but when these are not available, also ad-hoc networking and delay-tolerant networking. These latter mechanisms are best for low-bandwidth commu- nications. Effective support of low-bandwidth networking <b>needs</b> <b>message</b> prioritization, which can benefit by knowing whether messages are being sent on behalf of someone to whom {{the owner of the}} mobile device is socially connected. By keeping track of the social network of each of the friends of the owner of the mobile device, the device can devote its resources to supporting better quality communication among people its owner cares about, and fewer resources to communication among people its owner doesn’t know. AllNet generalizes this notion by anonymously keeping track of friends, friends of friends, friends of friends of friends, and so on. Doing this while using only limited communication and storage is the challenge addressed by the AllNet social network connectivity algorithm described and evaluated in this paper...|$|R
2500|$|The Bahá'í Faith in Mexico {{begins with}} visits of Bahá'ís before 1916. After {{mentioning}} the <b>need</b> for the <b>message</b> {{of the religion}} to visit the Latin American countries `Abdu'l-Bahá continues: ...|$|R
5000|$|Each {{statement}} <b>needs</b> a <b>message</b> {{to be sent}} and a reply received {{before the}} next statement can proceed. Suppose, for example, that , , , and [...] are all located on the same remote machine. In this case, two complete network round-trips to that machine must take place before the third statement can begin to execute. The third statement will then cause yet another round-trip to the same remote machine.|$|R
5000|$|The AIDA model {{proposes that}} {{advertising}} <b>messages</b> <b>need</b> {{to accomplish a}} number of tasks designed to move the consumer {{through a series of}} sequential steps from brand awareness through to action (purchase and consumption).|$|R
40|$|Abstract. In this article, {{we present}} a design {{technique}} that facilitates the work of extracting and defining the tasks scheduling problem for a multiagent system. We also compare a centralized scheduling approach to a decentralized scheduling approach to see {{the difference in the}} efficiency of the schedules and the amount of information transmitted between the agents. Our experimental results show that the decentralized approach <b>needs</b> less <b>messages,</b> while being as efficient as the centralized approach. ...|$|R
50|$|Cleo {{was given}} a Xerox partner {{of the year award}} for five years, from 2009 to 2014. The Cleo Streem {{solution}} integrates with Xerox multi-function products, providing customers with comprehensive solutions for network fax and interactive <b>messaging</b> <b>needs.</b>|$|R
50|$|Children's books - Books for {{children}} with strong female role models, a lack of princesses <b>needing</b> rescuing, and <b>messages</b> about getting off your ass and doing something {{instead of waiting for}} things to somehow work out right in the end.|$|R
5000|$|Messaging. Lightstreamer {{implements}} a publish-subscribe pattern, {{suitable for}} both one-to-many fan-out scenarios and one-to-one <b>messaging</b> <b>needs.</b> It {{takes care of}} routing each message to the right recipients, multiplexing the flow of events {{on the top of}} each connection with the clients.|$|R
5000|$|News processing: For framing and agenda-setting, {{different}} conditions {{seem to be}} <b>needed</b> in processing <b>messages</b> to produce respective effects. Framing effect {{is more concerned with}} audience attention to news messages, while agenda setting is more concerned with repeated exposure to messages.|$|R
