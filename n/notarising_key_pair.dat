0|876|Public
40|$|AbstractIn this paper, {{a dynamic}} user {{hierarchy}} mechanism based on <b>key</b> <b>pairs</b> is proposed. Through careful design of keys, {{we get an}} economic integer <b>key</b> <b>pair</b> for each user. In our scheme, the relationship between two users can be easily revealed by performing a simple formula to the <b>key</b> <b>pair.</b> Furthermore, by applying our scheme, whenever a new user is inserted into the user hierarchy system, the corresponding <b>key</b> <b>pair</b> can be determined quickly without changing any existing <b>key</b> <b>pairs...</b>|$|R
40|$|Abstract. The {{proposed}} {{technique is}} used to provide maximum security for data over the network and minimize time consumption in encryption and decryption. In this technique we used two <b>key</b> <b>pair,</b> one small size <b>key</b> <b>pair</b> for data encryption and one large size <b>key</b> <b>pair</b> to encrypt <b>key</b> component(n=p*q) of small size <b>key</b> <b>pair.</b> In proposed system every communicating party needs just two <b>key</b> <b>pairs</b> for communicating with {{any number of other}} communicating parties. Once someone obtains <b>key</b> <b>pairs,</b> he /she can communicate with anyone else. RSA is a well known public key cryptography algorithm {{and was one of the}} first great advances in public key cryptography...|$|R
3000|$|KeyUpdate([...] sk, pk [...]): On input the ([...] l - 1) [...] old <b>key</b> <b>pairs</b> [...] (sk_l - 1,pk_l - 1 [...]), the {{algorithm}} outputs a new <b>key</b> <b>pair</b> [...] (sk_l,pk_l [...]) [...].|$|R
50|$|Alice has a <b>key</b> <b>pair</b> (A,a) with A {{her public}} key and a her private key and Bob has the <b>key</b> <b>pair</b> (B,b) with B his public key and b his private key.|$|R
40|$|In this paper, we {{discovered}} {{a new class of}} colliding <b>key</b> <b>pairs</b> of RC 4, namely, two different secret keys generate the same internal state after RC 4 ’s key scheduling algorithm. This is to our knowledge the first discovery of RC 4 colliding keys with hamming distance greater than one, that is, the colliding <b>key</b> <b>pairs</b> we found can differ from each other at three different positions, and the value difference between these positions needs not be fixed. We analyzed the transition pattern and evaluated the probability of the existence of this new class of colliding <b>key</b> <b>pairs.</b> Our result shows that RC 4 key collision could be achieved by two keys with greater hamming distance than the ones found in [1] and [2]. And this newly discovered class of colliding <b>key</b> <b>pairs</b> reveals the weakness that RC 4 ’s key scheduling algorithm could generate even more colliding keys. We also proposed an algorithm for searching colliding <b>key</b> <b>pairs</b> within this new class. Some concrete colliding <b>key</b> <b>pairs</b> are demonstrated in this paper, among which 55 -byte colliding <b>key</b> <b>pair</b> is the shortest one we found by using our algorithm within one hour time. Proceedings of the 6 th International Conference, ISPEC 2010, Seoul, Korea, May 12 - 13, 2010...|$|R
5000|$|If a Private Key Generator (PKG) is compromised, all {{messages}} protected {{over the}} entire lifetime of the public-private <b>key</b> <b>pair</b> used by that server are also compromised. This makes the PKG a high-value target to adversaries. To limit the exposure due to a compromised server, the master private-public <b>key</b> <b>pair</b> could be updated with a new independent <b>key</b> <b>pair.</b> However, this introduces a key-management problem where all users must have the most recent public key for the server.|$|R
40|$|The {{fact that}} the stream cipher RC 4 can {{generate}} colliding <b>key</b> <b>pairs</b> with hamming distance one was first discovered by Matsui in FSE 2010. This kind of weakness demonstrates that two different secret keys {{have the same effect}} on the cipher's encryption and the corresponding decryption procedure. In this paper, we further investigate the property of RC 4 key collisions and achieved the following results: 1. We show that RC 4 can generate colliding <b>key</b> <b>pairs</b> with various hamming distances, which cannot be generated by Matsui's pattern. We also give concrete examples of colliding <b>key</b> <b>pairs</b> with hamming distances greater than one. 2. We formalize RC 4 colliding <b>key</b> <b>pairs</b> into two large patterns, namely, Transitional pattern and Self-Absorbing pattern. All the currently known colliding <b>key</b> <b>pairs</b> can be categorized into either two patterns. 3. We analyze both patterns and clarified the relations among the probability of key collision, key length and hamming distances which yield the colliding <b>key</b> <b>pairs.</b> 4. We demonstrate the vulnerability of key collisions by showing collisions of RC 4 -Hash function proposed in INDOCRYPT 2006. Some concrete experimental results of RC 4 -Hash collision are also given in this paper...|$|R
40|$|The proxy {{signature}} {{scheme is}} a kind of digital signature scheme. In the proxy signature scheme, one user, called the original signer, can delegate his/her signing capability to another user called the proxy signer. This is similar to a person delegating his/her seal to another person in the real world. In this paper, we propose a new type of proxy signature scheme, the self proxy signature scheme. In this scheme, a signer, Alice, delegates her signing capability to herself and uses the proxy private/public <b>key</b> <b>pair</b> as temporary <b>keys.</b> Using this scheme, the signer protects her original private/public <b>key</b> <b>pair</b> and uses multiple private/public <b>key</b> <b>pairs</b> simultaneously. Therefore, the signer Alice uses a temporary <b>key</b> <b>pair</b> for only a particular work. Furthermore, it is easy to revoke the temporary private/public <b>key</b> <b>pair.</b> Thus, {{it can be said that}} the proposed scheme is practical. Key words: Digital signature, Proxy signature, Public key cryptograph...|$|R
30|$|As {{shown in}} the figure, a TPM {{includes}} a Random Number Generator (RNG). The RNG {{is used in the}} creation of RSA <b>key</b> <b>pairs</b> that are internal to the TPM. At the time of manufacture, a cryptographic <b>key</b> <b>pair,</b> known as the Endorsement Key (EK), is generated and stored inside the TPM chip. The private part of the EK is held securely by the chip, and is never exposed. Another important concept in TPM is the root of trust. The source of the root of trust is the Storage Root Key (SRK). The SRK is the first <b>key</b> <b>pair</b> generated by the TPM which is never exported from the TPM. Each subsequent RSA <b>key</b> <b>pair</b> that the TPM generated is bound to this original SRK.|$|R
3000|$|The {{challenger}} [...] B [...] {{runs the}} KeyGen_S(s) algorithm {{to generate the}} server’s public–private <b>key</b> <b>pair</b> (pk_S, sk_S) and gives pk_S to [...] A _ 2. [...] A _ 2 generates the receiver’s public–private <b>key</b> <b>pair</b> 〈 pk_R, sk_R 〉 and gives pk_R to [...] B [...].|$|R
5000|$|To sign {{a message}} [...] with the Merkle {{signature}} scheme, the signer picks a <b>key</b> <b>pair</b> , signs using the one-time signature scheme, and then adds additional information {{to prove that}} it was indeed one of the original <b>key</b> <b>pairs</b> (rather than one newly generated by a forger).|$|R
30|$|Setup(1 λ): output {{the master}} <b>key</b> <b>pair</b> (mpk,msk).|$|R
3000|$|The {{challenger}} [...] B [...] {{runs the}} KeyGen_R (s) algorithm {{to generate the}} receiver’s public–private <b>key</b> <b>pair</b> (pk_R, sk_R) and gives pk_R to [...] A _ 1. [...] A _ 1 generates the server’s public–private <b>key</b> <b>pair</b> 〈 pk_S, sk_S 〉 and gives pk_S to [...] B [...].|$|R
3000|$|To {{create a}} <b>key</b> <b>pair</b> for a notary group, we employ Boneh et al.’s {{efficient}} method of distributed RSA <b>key</b> <b>pair</b> generation [57]. The protocol allows {{a set of}} parties to construct an RSA modulus N = pq = ∑p_i∑q_i where N is publicly known, and each member N [...]...|$|R
30|$|Server generates {{public-private}} <b>key</b> <b>pair</b> (pk, sk) for asymmetric encryption/decryption.|$|R
40|$|In {{this paper}} we {{emphasize}} the importance of unique certified one-time <b>key</b> <b>pairs</b> in Buyer-Seller Watermarking (BSW) protocols. We distinguish between reactive unbinding attacks, in which the seller reacts to illicit file sharing by fabricating further evidence of such activity, and pre-emptive unbinding attacks, in which the seller gains an advantage by taking action that pre-empts the file being shared. We demonstrate the importance of certified one-time <b>key</b> <b>pairs</b> in the BSW protocol by Lei et al., for protecting against pre-emptive unbinding attacks, and subsequently reveal a new attack on a recently published BSW protocol due to its omission of unique <b>key</b> <b>pairs.</b> ...|$|R
5000|$|... #Subtitle level 3: Using {{separate}} <b>key</b> <b>pairs</b> {{for signing}} and encryption ...|$|R
5000|$|Given {{block size}} r, a public/private <b>key</b> <b>pair</b> is {{generated}} as follows: ...|$|R
5000|$|The second, SSC, {{is based}} on {{public-private}} <b>key</b> <b>pairs</b> and digital certificates.|$|R
30|$|Instead {{of relying}} on {{password}} sharing, SecurePost uses public key cryptography to authorize users. When creating an account, the app generates two asymmetric 2048 bit RSA <b>key</b> <b>pairs.</b> The app stores the private keys, and transmits the public keys to the proxy server. One <b>key</b> <b>pair</b> grants posting credentials while the other pair grants administrative credentials.|$|R
3000|$|AuthUpdate (sk_l,pk_l,ft_l - 1,φ [...]) : On input a new <b>key</b> <b>pair</b> (pk [...] l, sk [...] l [...]) the {{original}} file tag ft l− 1 {{and the public}} verification parameter φ, it outputs a new file tag [...] ft_l and the new update key β [...] l [...] that are valid under the new <b>key</b> <b>pair.</b>|$|R
40|$|The {{property}} that the stream cipher RC 4 can generate the same keystream outputs under two different secret keys {{has been discovered}} recently. The principle that how the two different keys can achieve a collision has been studied in the previous researches by investigating the key scheduling algorithm of RC 4. However, how to find those colliding <b>key</b> <b>pairs</b> is a different story, which has been largely remained unexploited. Previous researches have demonstrated that finding colliding <b>key</b> <b>pairs</b> becomes more difficult as the key size decreases, and also finding key collisions {{can be related to}} key recovery attacks and hash collisions. In this paper, we propose novel searching techniques which can be used to find short colliding <b>key</b> <b>pairs</b> that belong to two different kind of colliding key patterns efficiently. The colliding <b>key</b> <b>pairs</b> we find in both patterns are by far the shortest ones ever found...|$|R
5000|$|... #Subtitle level 2: Combining many {{one-time}} <b>key</b> <b>pairs</b> into a hash-based signature scheme ...|$|R
30|$|Gen(1 λ): a {{randomized}} algorithm which outputs a public <b>key,</b> secret <b>key</b> <b>pair</b> (pk,sk).|$|R
50|$|A {{key ring}} is a file which is {{necessary}} for Secure Sockets Layer (SSL) connection over the web. It is securely stored on the server which hosts the website. It contains the public/private <b>key</b> <b>pair</b> for the particular website. It also contains the public/private <b>key</b> <b>pairs</b> from various certificate authorities and the trusted root certificate for the various certification authorities.|$|R
40|$|Abstract. The {{development}} of public-private <b>key</b> <b>pairs</b> has evaluated congestion control, and current trends {{suggest that the}} refinement of B-trees will soon emerge. In our research, we validate the synthesis of public-private <b>key</b> <b>pairs.</b> Our focus in our research is not on whether DNS and Lamport clocks can synchronize to surmount this riddle, but rather on presenting new low-energy configurations (DOOR) ...|$|R
40|$|Entities {{participating}} in the generation or verification of digital signatures depend on {{the authenticity of the}} process. This Recommendation specifies methods for obtaining the assurances necessary for valid digital signatures: assurance of domain parameter validity, assurance of public key validity, assurance that the <b>key</b> <b>pair</b> owner actually possesses the private key, and assurance of the identity of the <b>key</b> <b>pair</b> owner...|$|R
50|$|The RSA or ECC <b>key</b> <b>pair</b> is {{generated}} in the application and stored in the mobile. These keys {{will be used for}} all the crypto process like signing, encryption and decryption. The <b>key</b> <b>pair</b> generation is a onetime process and is completely user driven. The user can also use X.509 digital certificates from any certification authority (CA) for the crypto processes mentioned above.|$|R
5000|$|... {{a trusted}} third party service by subscriber's <b>key</b> <b>pair</b> generation, storing of the <b>key</b> <b>pairs</b> on {{hardware}} security module and creation of digital signature provided that the {{trusted third party}} shall be offered by the certifying authority (the trusted third party shall send application form and certificate signing request to the Certifying Authority for issuing a digital signature certificate to the subscriber), ...|$|R
40|$|Evolutionary {{programming}} must work. Even {{though this}} result {{at first glance}} seems unexpected, it fell in line with our expectations. In fact, few end-users would disagree {{with the construction of}} public-private <b>key</b> <b>pairs.</b> Here, we propose a novel application for the practical unification of evolutionary programming and public-private <b>key</b> <b>pairs</b> (FARCE), which we use to demonstrate that RPCs can be made “fuzzy”, reliable, and introspective. ...|$|R
30|$|Private cloud {{holds the}} <b>key</b> <b>pair</b> (sk, K) and the {{convergence}} key kE {{of the medical}} personnel.|$|R
5000|$|Alice generates an RSA <b>key</b> <b>pair,</b> {{comprising}} the modulus , the public exponent [...] {{and the private}} exponent ...|$|R
5000|$|Algorithm. Key Generation for ACE {{encryption}} scheme.Input: a size parameter m , {{such that}} [...]Output: a public/private <b>key</b> <b>pair.</b>|$|R
5000|$|Bob {{finds the}} secret <b>key</b> <b>paired</b> with that identifier, and deciphers Alice's cipher text with that secret key.|$|R
5000|$|To {{establish}} a strongly secured communication channel, using a chip-specific <b>key</b> <b>pair</b> with strong encryption and integrity protection.|$|R
40|$|We {{present a}} simple and {{efficient}} off-line prepaid electronic cash scheme. It uses an asymmetric security architecture to limit power and memory consumption. The client owns an ECC <b>key</b> <b>pair,</b> and RSA <b>key</b> <b>pairs</b> are used on the infrastructure side. Our system provides limited anonymity and is secure against eavesdropping. Double-spender’s identity can be revealed. The reasonable size of the coin and reduced computational complexity enables the use on mobile devices. ...|$|R
