0|199|Public
5000|$|... (9) Local Governments {{should get}} <b>automatic</b> <b>allocations</b> at the {{beginning}} of every month.|$|R
5000|$|If {{it refers}} to an object with <b>automatic</b> <b>allocation</b> which goes out of scope, ...|$|R
5000|$|FN P90, a {{personal}} defense weapon (PDW) designed and manufactured by FN Herstal (also called PS-90, <b>non</b> <b>automatic</b> type) ...|$|R
50|$|The Hawaii Warriors {{were the}} third team from a <b>non</b> <b>automatic</b> {{qualifier}} conference {{to play in}} a BCS bowl game. They played Georgia in the Sugar Bowl on January 1, 2008 in New Orleans.|$|R
50|$|These three {{approaches}} are appropriate in different situations and have various trade-offs. For example, static memory allocation has little <b>allocation</b> overhead, <b>automatic</b> <b>allocation</b> may involve slightly more overhead, and dynamic memory allocation can potentially {{have a great}} deal of overhead for both allocation and deallocation. The persistent nature of static objects is useful for maintaining state information across function calls, <b>automatic</b> <b>allocation</b> is easy to use but stack space is typically much more limited and transient than either static memory or heap space, and dynamic memory allocation allows convenient allocation of objects whose size is known only at run-time. Most C programs make extensive use of all three.|$|R
5000|$|Where possible, <b>automatic</b> or static <b>allocation</b> {{is usually}} {{simplest}} because the storage is {{managed by the}} compiler, freeing the programmer of the potentially error-prone chore of manually allocating and releasing storage. However, many data structures can change in size at runtime, and since static <b>allocations</b> (and <b>automatic</b> <b>allocations</b> before C99) must have a fixed size at compile-time, there are many situations in which dynamic allocation is necessary. [...] Prior to the C99 standard, variable-sized arrays were a common example of this. (See the article on [...] {{for an example of}} dynamically allocated arrays.) Unlike <b>automatic</b> <b>allocation,</b> which can fail at run time with uncontrolled consequences, the dynamic allocation functions return an indication (in the form of a null pointer value) when the required storage cannot be allocated. (Static allocation that is too large is usually detected by the linker or loader, before the program can even begin execution.) ...|$|R
40|$|One {{of the key}} {{features}} of modern high level programming languages is the <b>automatic</b> <b>allocation</b> and reclaimation of space for data structures. This paper concentrates {{on the problem of}} providing these facilities satisfying the following constraints: ffl The programming language permits cyclic data structures; ffl The architecture is a distributed multi-processor; and ffl Global synchronization is not required...|$|R
50|$|Resource {{management}} therefore {{needs to}} be tied to the lifespan of suitable objects {{in order to gain}} <b>automatic</b> <b>allocation</b> and reclamation. Resources are acquired during initialization, when there is no chance of them being used before they are available, and released with the destruction of the same objects, which is guaranteed to take place even in case of errors.|$|R
50|$|Ch has a {{built-in}} string type (string_t) for <b>automatic</b> memory <b>allocation</b> and de-allocation. It supports shell aliases, history, piping, etc.|$|R
40|$|This paper {{presents}} a new method for extracting the functional specification of digital {{designs for the}} purpose of <b>automatic</b> <b>allocation</b> and composition. A mechanism is presented for compactly specifying circuit functionality as a set of rules in a constraint programming environment. The functional description of the components preserves a uniform structure on all levels of abstraction. This supports rapid design space exploration and transparent integration of already optimized components into the design flow...|$|R
40|$|The Dynamic Host Configuration Protocol (DHCP) {{provides}} a framework for passing configuration information to hosts on a TCP/IP network. DHCP {{is based on the}} Bootstrap Protocol (BOOTP) [7], adding the capability of <b>automatic</b> <b>allocation</b> of reusable network addresses and additional configuration options [19]. DHCP captures the behavior of BOOTP relay agents [7, 23], and DHCP participants can interoperate with BOOTP participants [9]. Due to some errors introduced into RFC 1531 in the editorial process, this memo is reissued as RFC 1541...|$|R
30|$|Self-configuration [12, 13] {{solutions}} are required that automatically {{set up and}} configure devices. This includes solutions for <b>automatic</b> address <b>allocation</b> and <b>automatic</b> detection of configuration inconsistencies.|$|R
50|$|Volunteers {{make up a}} {{small but}} {{significant}} proportion of front line ambulance staff that respond to emergency calls in London. Voluntary responders vary in skill level, but their principal purpose remains the same. That is to attend medical emergencies {{as quickly as possible}} to improve the patient's chance of survival, saving lives which may have been lost without the additional resources being available to the ambulance service. Importantly, the deployment of any voluntary responder will not replace the <b>automatic</b> <b>allocation</b> of a regular front line ambulance.|$|R
40|$|Abstract:- This paper {{presents}} a preliminary study of {{an approach that}} models programmable logic controllers (PLCs) for their effective deployment in industrial control processes. A working model is developed for <b>automatic</b> <b>allocation</b> of PLCs and also a formal verification of Ladder Diagram representations of control processes using the Symbolic Model Verifier (SMV) tool. <b>Automatic</b> resource <b>allocation</b> is achieved through the proposition of a digraph model for any Ladder Diagram representation of a control process, which is then translated into an XML (Extensible Mark Up Language) model. The required PLC resources needed to implement a control process are extracted from the XML model. These resources are then used by a selection engine to determine, from a PLC database, the most appropriate PLCs or Embedded Controllers (EBCs) that can satisfy the resource requirements. Additionally, information extracted from the XML model is used to generate a formally verifiable SMV code of the system. This paper focuses on the practical implementation, testing, and verification of three conceptual modules applied to a control process. These are, the XML model of the control process, the PLC Database <b>Automatic</b> Resource <b>Allocation,</b> and the XML-to-SMV translator. This work was significantly motivated by the ever increasing number of industries who seek to increase their productivity by automating their processes...|$|R
50|$|Manual {{allocation}} (commonly called static allocation): The DHCP server {{issues a}} private IP address dependent upon each client's MAC address, {{based on a}} predefined mapping by the administrator. This feature is variously called static DHCP assignment by DD-WRT, fixed-address by the dhcpd documentation, address reservation by Netgear, DHCP reservation or static DHCP by Cisco and Linksys, and IP address reservation or MAC/IP address binding by various other router manufacturers. If {{no match for the}} client's MAC address is found, the server may or may not optionally fall back to either Dynamic or <b>Automatic</b> <b>allocation.</b>|$|R
50|$|The {{council has}} 56 members, {{all of whom}} must be {{proposed}} {{by one of the}} unions affiliated to the TUC. Unions with more members receive an <b>automatic</b> <b>allocation</b> of seats, in proportion to their membership. Smaller unions propose candidates for eleven elected seats. In addition, there are separately elected seats: four for women, three for black workers, at least one of whom must be a woman, and one each for young workers, workers with disabilities, and LGBT workers. The General Secretary also has a seat on the council.|$|R
5000|$|In many {{programming}} language implementations, all variables declared within a procedure (subroutine, or function) are local to that function; the runtime {{environment for the}} program automatically allocates memory for these variables on program execution entry to the procedure, and automatically releases that memory when the procedure is exited. Special declarations may allow local variables to retain values between invocations of the procedure, or may allow local variables to be access by other procedures. The <b>automatic</b> <b>allocation</b> of local variables makes recursion possible, to a depth limited by available memory.|$|R
40|$|Schizophrenia {{has been}} {{associated}} with deficits in facial affect processing, especially negative emotions. However, the exact nature of the deficit remains unclear. The aim {{of the present study was}} to investigate whether schizophrenia patients have problems in <b>automatic</b> <b>allocation</b> of attention as well as in controlled evaluation of facial affect. Thirty-seven patients with schizophrenia were compared with 41 control subjects on incidental facial affect processing (gender decision of faces with a fearful, angry, happy, disgusted, and neutral expression) and degraded facial affect labeling (labeling of fearful, angry, happy, and neutral faces). The groups were matched on estimates of verbal and performance intelligence (National Adult Reading Test; Raven's Matrices), general face recognition ability (Benton Face Recognition), and other demographic variables. The results showed that patients with schizophrenia as well as control subjects demonstrate the normal threat-related interference during incidental facial affect processing. Conversely, on controlled evaluation patients were specifically worse in the labeling of fearful faces. In particular, patients with high levels of negative symptoms may be characterized by deficits in labeling fear. We suggest that patients with schizophrenia show no evidence of deficits in the <b>automatic</b> <b>allocation</b> of attention resources to fearful (threat-indicating) faces, but have a deficit in the controlled processing of facial emotions that may be specific for fearful faces. (c) 2006 Elsevier Ireland Ltd. All rights reserved...|$|R
40|$|Abstract. TA (Task Allocation) {{system is}} {{designed}} for the workers of National Astronomical Observatory, Chinese Academy of Sciences. TA {{plays an important role}} in simplifying the manual operation, improving work efficiency and reducing man-made mistakes. TA achieves an intellectualized even distribution for the task of data processing and it proposes an interactive way of task allocation. The result of <b>automatic</b> <b>allocation</b> can be fine-tuned by drag-and-drop so it realizes convenient human interaction. This paper discusses the design and implementation of the intelligent and interactive task allocation system in detail and worked out an optimistic algorithm of intelligent task allocation...|$|R
40|$|The {{structural}} assembler for built-in control systems, {{methods of}} its adaption {{to the different}} classes of the built-in microprocessors, procedure for <b>automatic</b> <b>allocation</b> of the programs in the paged memory of the microcontrollers have been developed firstly. The results have been used at development of the computer-aided process systems for attestation of the rolled stock and flexible printed circuits of the semiconductor structures. The complexity of the programs has been decreased by 25 - 30 %, the coding time has been reduced 1, 5 time. Available from VNTIC / VNTIC - Scientific & Technical Information Centre of RussiaSIGLERURussian Federatio...|$|R
5000|$|In general, [...] is the {{allocation}} of memory at compile time, before the associated program is executed, unlike dynamic memory <b>allocation</b> or <b>automatic</b> memory <b>allocation</b> where memory is allocated as required at run time.|$|R
40|$|CONTENTS THIS IS SDS THIS IS A TEACHING DOCUMENT WHAT SDS DOES EXPERIMENTAL SYSTEMS AND DATA FLOW Dealing with Data Flow Management Integrated Systems - Ideal If They Could Be Universal Interpreted and Compiled Languages The SDS Approach WHY SDS? Data Transfer / Memory Allocation / Data Structure MEMORY ALLOCATION IN COMPILED LANGUAGES - C <b>Automatic</b> <b>Allocation</b> Run-Time Allocation Common Memory Allocation Errors in C A Note About Memory Allocation in FORTRAN Lost Information and Overwrites in Compiled Languages MEMORY ALLOCATION IN INTERPRETED LANGUAGES Demonstration of a Crude Search Mechanism SDS' MEMORY ALLOCATION TECHNIQUES/SYSTEMS DATA TRANSFER BETWEEN PROCESSORS - LIFE BEFORE SDS Data Structures Varying Data Structure Storages in Compiled Languages Dealing with Data Transfer - External Data Representation THE SDS APPROACH TO DATA TRANSFER TRANSFER WITHIN A SYSTEM ALLOCATION WITHIN PROCESS AND SHARED MEMORY Sharing Data Originating in Process Memory Shared Memory How Share...|$|R
40|$|This article {{presents}} {{the development of}} a system used by the Brazilian Network of Legal Metrology and Quality – INMETRO and its delegated public bodies to increase the coverage of mandatory periodic verification on measuring instruments in Brazil, especially <b>non</b> <b>automatic</b> weighing instruments. Based on a governmental database of active establishments that allowed the choice of an specific economic activity, the system provides a list of establishments where measuring instruments are used to commercial transitions and, therefore, subject to periodic mandatory verification. As a result, the use of system increased the number of measuring instruments controlled in Brazil, revealed areas for improvement and provided references to set goals...|$|R
40|$|In {{dependable}} embedded systems, it is {{current practice}} to assign each application subsystem to a dedicated processor. However, several activities aim at an integrated approach, allowing {{the deployment of}} multiple application subsystems on a single distributed computer system [1]. The resulting large number of feasible allocations of tasks to processors {{makes it hard for}} the developer to determine an optimal solution, and therefore <b>automatic</b> <b>allocation</b> is desirable. This paper presents an allocation algorithm that takes advantage of the existence of replicated software and hardware components in dependable embedded systems and the resultant symmetric solutions in order to minimize the number of allocations taken into consideration. 1...|$|R
40|$|The <b>automatic</b> <b>allocation</b> of {{enterprise}} workload to resources {{can be enhanced}} {{by being able to}} make what–if response time predictions whilst different allocations are being considered. We experimentally investigate an historical and a layered queuing performance model and show how they can provide a good level of support for a dynamic-urgent cloud environment. Using this we define, implement and experimentally investigate the effectiveness of a prediction-based cloud workload and resource management algorithm. Based on these experimental analyses we: (i) comparatively evaluate the layered queuing and historical techniques; (ii) evaluate the effectiveness of the management algorithm in different operating scenarios; and (iii) provide guidance on using prediction-based workload and resource management...|$|R
40|$|A hybrid wet-dry {{cooling system}} can reduce water {{consumption}} at {{a power plant}} while minimizing the performance penalty of an air-cooled condenser (ACC). <b>Automatic</b> <b>allocation</b> of turbine exhaust steam among the wet and dry sections provides robust performance. However, the performance test for the unit must be carefully designed to prove the guarantees for water conservation and thermal performance with minimal uncertainty. A hybrid wet-dry cooling system of the “parallel ” type is modeled based on recently-constructed power plants. Effects of typical off-design test conditions are demonstrated. Techniques are recommended for designing an effective performance test for a hybrid wet-dry cooling system based {{on the use of}} existing Performance Test Codes (PTC) ...|$|R
40|$|MPLS <b>automatic</b> {{bandwidth}} <b>allocation</b> (or provisioning) {{refers to}} the process of dynamically updating the bandwidth allocation of a label switched path on the basis of actual aggregate traffic demand on this path. Since bandwidth updates require signaling, it is common to limit the rate of updates to reduce signaling costs. In this article, we propose a model-free asynchronous adaptive hysteresis algorithm for MPLS <b>automatic</b> bandwidth <b>allocation</b> under bandwidth update rate constraints. We validate the effectiveness of the proposed approach by comparing it against existing schemes in (i) voice and (ii) data traffic scenarios. The proposed method can also be used in more general GMPLS networks. © 2010 Elsevier B. V. All rights reserved...|$|R
40|$|International audienceWe {{address the}} problem of optimally mapping uniform DAGs to {{systolic}} arrays, given an ane timing function. We introduce an <b>automatic</b> <b>allocation</b> method based on a preprocessing by reindexing that transforms the initial DAG into a new one that enables the well known projection method to minimize the number of processors along a number of directions. We demonstrate its superiority to other methods, and establish the space-optimality of the proposed method. We also show an upper bound on the number of processors that corresponds to the best space complexity that both the projection method and the so-called grouping method can give for the initial DAG. We also describe how the new allocation method can be implemented in tools...|$|R
40|$|Matching ontologies is {{a crucial}} process when facilitating system {{interoperability}} and information exchange. A reoccurring problem in this process is that names can be ambiguous, yielding uncertainty to whether entities of two heterogeneous ontologies are actually related. Linguistic ontologies provide a clear structure of meanings, rather than names, allowing the quantification of the relatedness of any two given meanings. We propose an approach for the <b>automatic</b> <b>allocation</b> of correct meanings within a linguistic ontology {{through the use of}} virtual documents and information retrieval techniques. The benefits of this approach are tested and established using a data set from the Ontology Alignment Evaluation Initiative (OAEI) competition, while further improvements are revealed using a benchmark data set from the same competition. ...|$|R
40|$|Cataloged from PDF {{version of}} article. MPLS <b>automatic</b> {{bandwidth}} <b>allocation</b> (or provisioning) {{refers to the}} process of dynamically updating the bandwidth allocation of a label switched path on the basis of actual aggregate traffic demand on this path. Since bandwidth updates require signaling, it is common to limit the rate of updates to reduce signaling costs. In this article, we propose a model-free asynchronous adaptive hysteresis algorithm for MPLS <b>automatic</b> bandwidth <b>allocation</b> under bandwidth update rate constraints. We validate the effectiveness of the proposed approach by comparing it against existing schemes in (i) voice and (ii) data traffic scenarios. The proposed method can also be used in more general GMPLS networks. (C) 2010 Elsevier B. V. All rights reserved...|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. The Dynamic Host Configuration Protocol (DHCP) provides a framework for passing configuration information to hosts on a TCPIP network. DHCP {{is based on the}} Bootstrap Protocol (BOOTP) [7], adding the capability of <b>automatic</b> <b>allocation</b> of reusable network addresses and additional configuration options [19]. DHCP captures the behavior of BOOTP relay agents [7, 21], and DHCP participants can interoperate with BOOTP participants [9]. Table of Content...|$|R
40|$|Despite the {{potential}} importance of data structure layouts and traversal patterns, compiler transformations on pointer-intensive programs are performed primarily using pointer analysis, {{and not by}} controlling and using information about the layout of high-level data structures. This paper describes a compiler transformation called <b>Automatic</b> Pool <b>Allocation</b> that segregates instances of "logical" data structures in the heap into distinct pools, and allows different heuristics {{to be used to}} partially control the internal layout of those data structures. Because these are rigorous transformations, their results, combined with pointer analysis information, can be used to perform further compiler analyses and transformations, and we briefly list a few examples. <b>Automatic</b> Pool <b>Allocation</b> also provides several direct performance benefits for pointer intensive programs, most importantly, that traversals of a logical data structure allocated to a separate pool can have better spatial locality and smaller working sets. We evaluate the performance and cache behavior of the code transformed by the <b>automatic</b> pool <b>allocation</b> transformation on a series of heap-intensive and general-purpose benchmarks, and find that it speeds up several C programs by 10 - 40 % percent or more, and does not hurt (or help) other programs...|$|R
40|$|ON LITHUANIAN MIXED TYPE VERBS: STEM RELATIONS AND DERIVATION Summary I {{have argued}} {{in this article}} that Lithuanian mixed type verbs are in fact suffixed verbs with {{alternating}} suffixal morphs which sometimes surface as zeroes (see Table l; cf. Andronov 1999, 73 - 75; 2000 a, 42 f). According to the morphemic structure of their stems all Lithuanian verbs split into two major classes of non suffixed vs. suffixed. The latter ones make up two subclasses depending on whether their main stems are parisyllabic or imparisyllabic (thematic vowels arc not counted). All imparisyllabic (traditional mixed type) verbs have alternating suffixes comparable to <b>non</b> <b>automatic</b> root vowel alternations and are employed in stem distinction, cf. praes. 3 ren ̃ ka : inf. rin ̃ kti, praet. 3 rin ̃ ko (‘gather’, e : i) an d praes. 3 kal ̃ b-ø-a : inf. kalb-ė́-ti, praet. 3 kalb-ė́j-o (‘speak’, ø : ė; alternation ė → ėj /-V {{can be interpreted as}} automatic). These alternations are not independent distinctive features and mark verbal stems together with inflectional paradigms. Alternating verbal suffixes and root vowels are in complementary distribution: if a verb has a suffix it will not exhibit <b>non</b> <b>automatic</b> root vowel alternations (and vice versa). This distribution also affects present stem paradigms -n(-) a and -sta (e. g. praes. 3 ti-n ̃ -k-a ‘passes, matches’, gáu-n-a ‘gets’, tir ̃ p-st-a ‘melts’) which block root vowel alternations (inf. tìkti, gáuti, tir ̃ pti, praet. 3 tìko, ga ̃ vo, tir ̃ po) with some exceptions, e. g. inf. skrìsti, praes. skre-n ̃ -d-a, praet. skrìdo (‘fly’, i : e plus praes. stem characterised by -n-a). </span...|$|R
50|$|Boise State went 13-0 {{during the}} regular season, their second {{straight}} undefeated season, to win the conference championship {{for the second straight}} year and seventh time in eight years. They would be ranked #6 in the BCS {{at the end of the}} regular season and received an invitation to the Tostitos Fiesta Bowl to become the first team from a <b>non</b> <b>automatic</b> qualifying conference to receive an at-large berth to a BCS bowl (other non-AQ teams had received automatic bids under BCS rules). The Broncos faced BCS #4 ranked TCU in the first matchup of two teams from non-AQ conferences in a BCS bowl. They defeated the Horned Frogs 17-10 and finished the season #4 in AP and coache's polls.|$|R
40|$|Abstract: Ultrasound imaging of ovary {{is used to}} {{determine}} infertility problems. Now a days it is quite common. For effective treatment, information like shape, position, size and presence of cyst are important. Today detection of cyst is done by medical experts in <b>non</b> <b>automatic</b> way. This method often results inaccurate and incorrect determination. In this paper, a new automatic detection of follicles in ultrasound images of ovary is proposed. Four stages are involved like preprocessing, segmentation, feature extraction and classification. In preprocessing stage gaussian low pass filter is used for removing speckle noise in ultrasound image of ovary. Proposed algorithm use kirsch template for segmentation. Features extracted from the segmented image is used to classify normal ovary or cystic ovary...|$|R
40|$|Context-awareness {{is highly}} desired across several {{application}} domains. Semantic Web Services (SWS) enable the automatic discovery of distributed Web services based on comprehensive semantic representations. However, although SWS technology supports the <b>automatic</b> <b>allocation</b> of resources {{for a given}} well-defined task, it does not entail the discovery of appropriate SWS representations for a given situational context. Whereas tasks are highly dependent on the situational {{context in which they}} occur, SWS technology does not explicitly encourage the representation of domain situations. Moreover, describing the complex notion of a specific situation in all its facets is a costly task and may never reach semantic completeness. Particularly, following the symbolic SWS approach leads to ambiguity issues and does not entail semantic meaningfulness. Apart from that...|$|R
