41|0|Public
25|$|<b>Nestable</b> Here-Strings: PowerShell Here-Strings {{have been}} {{improved}} and can now nest.|$|E
5000|$|OCaml uses <b>nestable</b> comments, {{which is}} useful when commenting a code block.codeLine(* comment level 1(*comment level 2*)*) ...|$|E
5000|$|Component-based : Pages may be {{constructed}} with small <b>nestable</b> components, each having a template and a component class. Custom components are purportedly trivial to construct.|$|E
5000|$|Cycles either can{{not occur}} {{or do not}} occur in {{practice}} {{because all of the}} small set of garbage-collected built-in types are not arbitrarily <b>nestable.</b> (using interfaces one could create such scenario, but that is not common usage) ...|$|E
50|$|Icehouse pieces, or Icehouse Pyramids, Treehouse pieces, Treehouse Pyramids and officially Looney Pyramids, are <b>nestable</b> and {{stackable}} pyramid-shaped gaming {{pieces and}} a game system. The game system {{was invented by}} Andrew Looney and John Cooper in 1987, originally {{for use in the}} game of Icehouse.|$|E
50|$|The skeletons are {{provided}} as a C++ library {{and are not}} <b>nestable</b> but type safe. A custom MPI abstraction layer is used, NetStream, which takes care of primitive data type marshalling, synchronization, etc. A skeleton may have multiple lower-level parallel implementations depending on the target architectures: sequential, LAN, and WAN. For example: centralized master-slave, distributed master-slave, etc.|$|E
50|$|The SkeTo {{project is}} a C++ library which {{achieves}} parallelization using MPI. SkeTo is different from other skeleton libraries because instead of providing <b>nestable</b> parallelism patterns, SkeTo provides parallel skeletons for parallel data structures such as: lists, trees, and matrices. The data structures are typed using templates, and several parallel operations can be invoked on them. For example, the list structure provides parallel operations such as: map, reduce, scan, zip, shift, etc...|$|E
50|$|Calcium {{supports}} {{the execution of}} skeleton applications {{on top of the}} ProActive environmentfor distributed cluster like infrastructure. Additionally, Calcium has three distinctive features for algorithmic skeleton programming. First, a performance tuning model which helps programmers identify code responsible for performance bugs. Second, a type system for <b>nestable</b> skeletons which is proven to guaranty subject reduction properties and is implemented using Java Generics. Third, a transparent algorithmic skeleton file access model, which enables skeletons for data intensive applications.|$|E
50|$|Lithium and its {{successor}} Muskel are skeleton frameworks {{developed at}} University of Pisa, Italy. Both of them provide <b>nestable</b> skeletons to the programmer as Java libraries.The {{evaluation of a}} skeleton application follows a formal definition of operational semantics introduced by Aldinucci and Danelutto, which can handle both task and data parallelism. The semantics describe both functional and parallel behavior of the skeleton language using a labeled transition system. Additionally, several performance optimization are applied such as: skeleton rewriting techniques 10, task lookahead, and server-to-server lazy binding.|$|E
50|$|Skil is an {{imperative}} language for skeleton programming. Skeletons {{are not directly}} part of the language but are implemented with it. Skil uses a subset of C language which provides functional language like features such as higher order functions, curring and polymorphic types. When Skil is compiled, such features are eliminated and a regular C code is produced. Thus, Skil transforms polymorphic high order functions into monomorphic first order C functions. Skil does not support <b>nestable</b> composition of skeletons. Data parallelism is achieved using specific data parallel structures, for example to spread arrays among available processors. Filter skeletons can be used.|$|E
5000|$|Some Modifications {{additionally}} introduce {{shifts in}} underlying approach to computing, {{such as the}} language Snap!, featuring first class procedures (their mathematical foundations are called also lambda calculus), first class lists (including lists of lists), and first class truly object oriented sprites with prototyping inheritance, and <b>nestable</b> sprites, which {{are not part of}} Scratch. Snap! (its previous version was called BYOB) was developed by Jens Mönig with documentation provided by Brian Harvey from University of California, Berkeley and has been used to teach [...] "The Beauty and Joy of Computing" [...] introductory course in CS for non-CS-major students.|$|E
50|$|The obvious {{generalization}} of DCAS {{to more than}} two addresses is sometimes called MCAS (multi-word CAS); MCAS can be implemented by a <b>nestable</b> LL/SC, but such a primitive is not directly available in hardware. MCAS can be implemented in software in terms of DCAS, in various ways. In 2013, Trevor Brown, Faith Ellen, and Eric Ruppert have implemented in software a multi-address LL/SC extension (which they call LLX/SCX) that while being more restrictive than MCAS enabled them, via some automated code generation, to implement {{one of the best}} performing concurrent binary search tree (actually a chromatic tree), slightly beating the JDK CAS-based skip list implementation.|$|E
50|$|On February 9, 1999, the ABC show Nightline {{featured}} IDEO in {{a segment}} called The Deep Dive: One Company's Secret Weapon for Innovation. The segment featured Jack Smith of ABC touring the IDEO office and challenging {{the company to}} redesign the shopping cart in five days to demonstrate IDEO's process for innovation. The end result was a shopping cart with a <b>nestable</b> steel frame which holds removable plastic baskets to help deter theft and increase shopper flexibility. A dual child seat with a swing-up tray was {{also included in the}} design, as well as a cupholder, a scanner to skip the checkout line and steerable back wheels for maneuverability. The demonstration of IDEO's innovation process has led to the segment becoming part of numerous curricula, including Project Lead the Way and multiple universities.|$|E
50|$|The {{overwintering}} queen first appears {{during spring}} and establishes underground colonies. She will then find an underground nest, typically {{some sort of}} rodent burrow or some other naturally available hole in wood or dirt. Upon discovering a <b>nestable</b> area, the queen will lay an egg brood and begin incubation. The fuel for their thermoregulation during incubation is derived from nectar, pollen, and honey between foraging trips. After about one month, the first worker generation will hatch. They will assist the queen in foraging and incubating the brood. The colony will grow for a year, as workers and male drones are reared. Soon afterwards, a new clutch of queens will be born. Upon maturation, they will leave the nest to mate, and then will hibernate for the winter until it is their turn in the spring to begin a colony.|$|E
40|$|The Air Pollution Model (TAPM) {{developed}} by CSIRO is a PC-based, three-dimensional (3 -d), <b>nestable,</b> prognostic meteorological {{and air pollution}} model, driven by a graphical user interface (Hurley, 2002). It uses global input databases of terrain height, land use, sea-surface temperature, and synoptic meteorological analyses. The meteorological component of TAP...|$|E
40|$|SFTRAN 3 {{supports}} structured programing in FORTRAN environment. Language intended {{particularly to}} support {{two aspects of}} structured programing [...] <b>nestable</b> single-entry control structures and modularization and top-down organization of code. Code designed and written using these SFTRAN 3 facilities have fewer initial errors, easier to understand and less expensive to maintain and modify...|$|E
40|$|The {{superior}} packaging {{characteristics of}} <b>nestable</b> column structural elements make this concept attractive for application to missions space shuttle missions requiring large and/or high stiffness, or complex structures. Photographs depict investigations pursued relative to defining structural and assembly technology using these structural elements. The {{neutral buoyancy facility}} assembly simulation tests and the large space structure mobile work station are featured...|$|E
3000|$|The column-oriented {{data model}} stores data by columns {{rather than by}} rows. It enables both storing large amounts of data in bulk and {{efficiently}} querying over very large structured data sets. A column-oriented data model does not rely on a fixed schema. It provides <b>nestable,</b> map-like structures for data items which improve flexibility over fixed schema [46]. The common representatives of column-oriented DBMSs are Apache Cassandra 11 and Apache HBase. 12 [...]...|$|E
40|$|Previous work on {{software}} contracts assumes fixed and statically known boundaries {{between the parties}} to a contract. Implementations of contract monitoring systems rely on this assumption to explain the nature of contract violations and to assign blame to violators. In this paper, we explain how to implement arbitrary, nested, and dynamic contract boundaries with two examples. First, we add <b>nestable</b> contract regions to a static, first-order module system. Second, we show that even a dynamic, higher-order, and hierarchical module system can be equipped with software contracts that support precise blame assignment...|$|E
40|$|Abstract. The {{usability}} of web applications today often {{suffers from}} the page-based medium’s lack of intrinsic support for hierarchical dialog sequences mirroring the parent-child relationships between dialog boxes in window-based user interfaces. For multi-channel applications, an additional challenge lies in reconciling the device-independent business logic with the device-specific interaction patterns necessitated by different clients ’ input/output capabilities. We therefore present a graphical Dialog Flow Notation that allows the specification of <b>nestable</b> dialog sequences for different presentation channels. These specifications serve as input for a Dialog Control Framework that controls the dialog flows of complex web applications. ...|$|E
40|$|Engines {{provide the}} means for a {{computation}} to be run for a limited period of time, interrupted {{if it does not}} complete in that time, and later restarted from the point of interruption. Previous work on engines demonstrated that engines can be implemented by defining a new interpreter to support them. This article demonstrates that engines may be defined in terms of continuations and timer interrupts and thereby incorporated into an existing language implementation. The article extends the engine mechanism to solve several problems with <b>nestable</b> engines, and demonstrates that the extended mechanism can be implemented in terms of continuations as well...|$|E
40|$|A {{structural}} element concept is described which permits achievement of weight critical payloads for space shuttle. These columns are highly efficient structural members {{which could be}} the basic building elements for very large, space truss structures. Parametric results are presented which show that untapered cylindrical columns result in volume limited payloads on the space shuttle and that <b>nestable,</b> tapered columns easily eliminate this problem. It is recognized that the tapered column concept belongs to a class of structures which must be assembled in orbit. However, analytical results are presented which indicate that the gain {{in the amount of}} structure placed in orbit per launch, is great enough that such a concept should be considered in future systems studies of very large space structures...|$|E
40|$|A {{file data}} model for {{algorithmic}} skeletons is proposed, focusing on transparency and efficiency. Algorithmic skele-tons correspond to a high-level programming model that {{takes advantage of}} <b>nestable</b> programming patterns to hide the complexity of parallel/distributed applications. Transparency is achieved using a workspace factory ab-straction and the proxy pattern to intercept calls on File type objects. Thus allowing programmers to continue us-ing their accustomed programming libraries, without hav-ing the burden of explicitly introducing non-functional code {{to deal with the}} distribution aspects of their data. A hybrid file fetching strategy is proposed (instead of lazy or eager), that takes advantage of annotated func-tions and pipelined multithreaded interpreters to transfer files in-advance or on-demand. Experimentally, using a BLAST skeleton application, it is shown that the hybrid strategy provides a good tradeoff between bandwidth usage and CPU idle time...|$|E
40|$|A {{retractable}} {{tool bit}} assembly for a tool {{such as an}} allen key is presented. The assembly includes one or more spring loaded <b>nestable</b> or telescoping tubular sections together with a catch mechanism for capturing and holding the tool in its retracted position. The catch mechanism consists of a latch mechanism located in a base section and which engages a conically shaped tool head located at the inner end of the tool. The tool head adjoins an eccentric oval type neck portion which extends to a rear lip of the tool head. The latch mechanism releases when the ovular neck portion rotates about the catch members upon actuation of a rotary tool drive motor. When released, all the telescoping sections and the tool extends fully outward to a use position...|$|E
40|$|We exhibit an {{aggressive}} optimizing compiler for a functionalprogramming language {{which includes a}} first-class forward automatic differentiation (AD) operator. The compiler’s performance is competitive with FORTRAN-based systems on our numerical examples, despite the potential inefficiencies entailed by support of a functional-programming language and a first-class AD operator. These results are achieved by combining (1) a novel formulation of forward AD {{in terms of a}} reflexive mechanism that supports firstclass <b>nestable</b> nonstandard interpretation with (2) the migration to compile-time of the conceptually run-time nonstandard interpretation by whole-program inter-procedural flow analysis. Categories and Subject Descriptors G. 1. 4 [Quadrature and Numerical Differentiation]: Automatic differentiation; D. 3. 2 [Language Classifications]: Applicative (functional) languages; D. 3. 4 [Processors]: Code generation, Compilers, Optimization; F. 3. 2 [Semantics of Programming Languages]: Partial evaluation, Program analysi...|$|E
40|$|We {{present a}} Structure word set for ANS Forth, {{and provide a}} {{portable}} implementation in the file cstruct. fs. A major aim is compatibility with structures in C libraries. The idea for making structures <b>nestable</b> with reusable field labels is taken from Randolph Peters ’ Pocket Forth implementation [1], and we implement some early binding ideas stressed in a Forth Scientific Library implementation [2]. We implement both left and right syntaxes for structure data references. Copyright c ○ 2000 David N. Williams Permission is granted to copy, distribute and/or modify this document {{under the terms of}} the GNU Free Documentation License, Version 1. 1 or any later version published by the Free Software Foundation, with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy of the license is included in the section entitled “GNU free documentation license”...|$|E
40|$|We {{present an}} {{extension}} to the FORTRAN language {{that allows the}} user to specify parallelism by means of clearly defined, <b>nestable</b> blocks. The implementation achieves compilerindependence through a portable preprocessor. High performance is obtained by prespawning processes and relying {{on a set of}} run-time routines to manage a self-scheduling allocation scheme. The resulting system, which we call ParFOR, lends itself to the exploitation of finegrained parallelism because of its low scheduling overhead. It encourages the elimination of explicit process synchronization, thereby enhancing the readability of the source program. In addition, ParFOR provides a variety of modes and compile-time options that are useful for performance measurement and debugging. Finally, we present an evaluation of system efficiency including timing results for several parallel applications running on the eight-processor Ultracomputer prototype. 1. Introduction It has been shown that parallel programming can b [...] ...|$|E
40|$|Under {{funding from}} the Office of Naval Research (ONR), and the Naval Oceanographic Office (NAVOCEANO), the Mississippi State University Center for Air Sea Technology (CAST) {{has been working on}} {{developing}} a Relocatable Modeling Environment(RME) to provide a uniform and unbiased infrastructure for efficiently configuring numerical models in any geographic/oceanic region. Under Naval Oceanographic Office (NAVO-CEANO) funding, the model was implemented and tested for NAVOCEANO use. With our current emphasis on ocean tidal modeling, CAST has adopted the Colorado University's numerical ocean model, known as CURReNTSS (Colorado University Rapidly Relocatable <b>Nestable</b> Storm Surge) Model, as the model of choice. During the RME development process, CURReNTSS has been relocated to several coastal oceanic regions, providing excellent results that demonstrate its veracity. This report documents the model validation results and provides {{a brief description of the}} Graphic user Interface (GUI) ...|$|E
40|$|A {{generalization}} {{of the data}} parallel model has been proposed by Blelloch which permits the nesting of data parallel operators to specify parallel computation across nested and irregular data structures. In this paper we consider the costs of supporting the general model of nested data parallelism, analyzing the requirements such a model places upon an underlying model of execution. We propose a new multi-node execution model which {{meets the needs of}} the paradigm and is additionally generic in the partitioning of data aggregates within the system. The basis for our execution model is an abstract machine based upon elementary notions of nodal multi-threading. We demonstrate the utility of our proposal by providing a full definition for a simple <b>nestable</b> one-dimensional data parallel operator. We discuss the applicability of our design to existing multi-processor machines, illustrating performance statistics gathered from a prototype system we have constructed on the Thinking Machines CM [...] ...|$|E
40|$|DiffSharp is an {{algorithmic}} differentiation or automatic differentiation (AD) {{library for}} the. NET ecosystem, which is {{targeted by the}} C# and F# languages, among others. The library has been designed with machine learning applications in mind, allowing very succinct implementations of models and optimization routines. DiffSharp is implemented in F# and exposes forward and reverse AD operators as general <b>nestable</b> higher-order functions, usable by any. NET language. It provides high-performance linear algebra primitives [...] -scalars, vectors, and matrices, with a generalization to tensors underway [...] -that are fully supported by all the AD operators, and which use a BLAS/LAPACK backend via the highly optimized OpenBLAS library. DiffSharp currently uses operator overloading, but we are developing a transformation-based version of the library using F#'s "code quotation" metaprogramming facility. Work on a CUDA-based GPU backend is also underway. Comment: Extended abstract presented at the AD 2016 Conference, Sep 2016, Oxford U...|$|E
40|$|A set of {{interchangeable}} pieces comprising {{a computerized}} tomography calibrator, and {{a method of}} use thereof, permits focusing of a computerized tomographic (CT) system. The interchangeable pieces include a plurality of <b>nestable,</b> generally planar mother rings, adapted for the receipt of planar inserts of predetermined sizes, and of predetermined material densities. The inserts further define openings therein for receipt of plural sub-inserts. All pieces are of known sizes and densities, permitting the assembling of different configurations of materials of known sizes and combinations of densities, for calibration (i. e., focusing) of a computerized tomographic system through variation of operating variables thereof. Rather than serving as a phanton, which {{is intended to be}} representative of a particular workpiece to be tested, the set of interchangeable pieces permits simple and easy standardized calibration of a CT system. The calibrator and its related method of use further includes use of air or of particular fluids for filling various openings, as part of a selected configuration of the set of pieces...|$|E
40|$|This report {{documents}} {{an existing}} capability to produce operationally relevant products on sea level and currents from a tides/storm surge model for any coastal region {{around the world}} within 48 hours {{from the time of}} the request. The model is ready for transition to the Naval Oceanographic Office (NAVOCEANO) for potential contingency use anywhere around the world. A recent application to naval operations offshore Liberia illustrates this. Mississippi State University, in collaboration with the University of Colorado and NAVOCEANO, successfully deployed the Colorado University Rapidly Relocatable <b>Nestable</b> Tides and Storm Surge (CURReNTSS) model that predicts sea surface height, tidal currents and storm surge, and provided operational products on tidal sea level and currents in the littoral region off south-western coast of Africa. This report summarizes the results of this collaborative effort in an actual contingency use of the relocatable model, summarizes the lessons learned, and provides recommendations for further evaluation and transition of this modeling capability to operational use...|$|E
40|$|The concept {{presented}} {{is intended}} to enhance astronaut assembly of truss structure that is either too large or complex to fold for efficient Shuttle delivery to orbit. The potential of augmented astronaut assembly is illustrated by applying {{the result of the}} tests to a barebones assembly of a truss structure. If this structure were assembled from the same <b>nestable</b> struts that were used in the Mobile Work Station assembly tests, the spacecraft would be 55 meters in diameter and consist of about 500 struts. The struts could be packaged in less than 1 / 2 % of the Shuttle cargo bay volume and would take up approximately 3 % of the mass lift capability. They could be assembled in approximately four hours. This assembly concept for erectable structures is not only feasible, but could be used to significant economic advantage by permitting the superior packaging feature of erectable structures to be exploited and thereby reduce expensive Shuttle delivery flights...|$|E
40|$|AbstractThe relation-algebraic {{approach}} to graph transformation {{has previously been}} formalised {{in the context of}} complete distributive allegories. Careful analysis reveals that the zero laws postulated for distributive allegories were never used, and that completeness was most importantly used for the difunctional closures necessary for a relation-algebraic characterisation of pushouts. We therefore define collagories essentially as “distributive allegories without zero morphisms”, and also define a variant of Kleene star to produce difunctional closures where necessary. Typical collagories relevant for generalised graph structure transformation can be obtained from basic collagories like that of sets and relations via <b>nestable</b> constructions of collagories of semi-unary algebras, which allow natural representations in particular of graph structures, also with fixed label sets, or with type graphs. Since collagories are intended as foundation for generalised graph structure transformation in the algebraic tradition, we concentrate particularly on co-tabulations, the core of the relation-algebraic gluing concept. We clarify the precise relationship between co-tabulations and pushouts, and investigate the special case of direct sums, which is particularly affected by the absence of zero laws. Finally, we consider Van Kampen squares, the central ingredient of the definition of adhesive categories that has recently become popular as foundation for algebraic graph transformation, and obtain an interesting characterisation of Van Kampen squares in collagories...|$|E
40|$|VLIW {{architectures}} are well-suited {{for implementing}} application-specific programmable pro-cessors {{because of their}} great scalability and modularity. VLIW architectures take advantage of not only temporal parallelism found in RISC architectures but also spatial parallelism by using multiple functional units. However, the large instruction storage and bandwidth requirements have prevented VLIW architectures from being used in cost-sensitive systems. This thesis describes a VLIW DSP processor called UTDSP, which incorporates a novel and flexible instruction packing and fetching mechanism to reduce the code size and bandwidth prob-lems plaguing other VLIW architectures. With this scheme {{it is possible to}} actually achieve some code compression while attaining significant performance speedup over a traditional architecture. The UTDSP is flexible in that additional functional units with application-specific instructions can be easily added when required for performance with little impact on its compiler. The VLSI design and implementation of the UTDSP is presented. This implementation, consist-ing of five pipeline stages, is capable of executing seven instructions per cycle and provides zero-overhead hardware loops that are <b>nestable</b> and interruptable. A GUI-based assembly debugger and architecture simulator were implemented. The UTDSP adopts a synthesis-based design meth-odology and a novel hierarchical CAD flow that can significantly reduce its area. i To Hsiao-ching, Hsien-yuan, and Yu-liang i...|$|E
40|$|Multivariate {{clustering}} {{based on}} fine spatial resolution maps of elevation, temperature, precipitation, soil characteristics, and solar inputs {{has been used}} at several specified levels of division to produce a spectrum of quantitative ecoregion maps for the conterminous United States. The coarse ecoregion divisions accurately capture intuitively-understood regional environmental differences, whereas the finer divisions highlight local condition gradients, ecotones, and clines. Such statistically generated ecoregions can be produced based on user-selected continuous variables, allowing customized regions to be delineated for any specific problem. By creating an objective ecoregion classification, the ecoregion concept is removed Ecoregions {{are designed to help}} users visualize and understand similarities across complex multivariate environmental factors by grouping areas into like categories. The basis for such groupings has many contentious conceptual underpinnings. Debate abounds as to whether ecoregions should be specialized for a particular use or general purpose, spatially contiguous versus disjunct, <b>nestable</b> versus nonhierarchical, and whether ecoregions can be defensible as units of management, legislation, or even ecological triage (Omernik 1995, 2003; Overton and others 2002; Leathwick and others 2003). Supreme among these issues, however, is the question of whether ecoregions can (or should) be delineated using quantitative statistical methods or whether they can only be draw...|$|E
