35|374|Public
5000|$|The {{complexity}} of the subset sum problem {{can be viewed as}} depending on two parameters, N, the number of decision variables, and P, the precision of the problem (stated as the number of binary place values that it takes to state the problem). (Note: here the letters N and P mean something different from what they mean in the <b>NP</b> <b>class</b> of problems.) ...|$|E
5000|$|A common {{misconception}} is {{that the}} NP in [...] "NP-hard" [...] stands for [...] "non-polynomial" [...] when in fact it stands for [...] "Non-deterministic Polynomial acceptable problems". Although it is suspected {{that there are no}} polynomial-time algorithms for NP-hard problems, this has not been proven. Moreover, the class P in which all problems can be solved in polynomial time, is contained in the <b>NP</b> <b>class.</b>|$|E
50|$|In 1907, the Northern Pacific was {{in need of}} some {{branch line}} locomotives, and {{purchased}} ten of the fourteen remaining at the builder's plant. The cost was $14,500 each. They became <b>NP</b> <b>class</b> S-10, numbers 320-329. Because they were completed in February 1907, that was the date on their builder's plates. Alco sold the remaining four to Pullman, the Nevada Northern, and the Manchurian Southern. The later was a Japanese-controlled railroad in Manchuria. They offered the NP $15,000 each for their ten, but the NP declined.|$|E
40|$|In {{the article}} we {{provides}} an {{response to the}} problem of equality of P and <b>NP</b> <b>classes,</b> which is also called the Millennium problem. As a result, given the complete result of equality. For theory of refutation we use method of "reductio ad absurdum". We use tensor analysis for define objects which considered relatively to the Turing machine computation. The goal was to give an answer to a proble that has affected to degree of the proof calculation's details. The result can be obtained relative to the current problems of equality P and <b>NP</b> <b>classes,</b> but other than that give an opportunity to explore the computational process more...|$|R
2500|$|As of November 2013, NPs were {{recognized}} legally in Israel. [...] The law passed on November 21, 2013. [...] Although {{in the early}} stages, the Israeli Ministry of Health has already graduated two <b>NP</b> <b>classes</b> - in palliative care and geriatrics. [...] The law was passed {{in response to a}} growing physician shortage in specific health care fields, similar to trends occurring worldwide.|$|R
5000|$|... {{with the}} <b>class</b> - The <b>NP</b> the <b>class</b> is the {{complement}} of the preposition with.|$|R
40|$|There is {{a number}} of known <b>NP</b> <b>class</b> problems, and {{majority}} {{of them have been}} shown to be equivalent to others. In particular now it is clear that construction of a Gröbner basis (or Buchberger algorithm) must be one of equivalent problems, but there was no example. In the following paper the reduction is constructed...|$|E
40|$|The {{relationship}} between the complexity classes P and NP is an unsolved question {{in the field of}} theoretical computer science. In this paper, we look at the link between the P - NP question and the "Deterministic" versus "Non Deterministic" nature of a problem, and more specifically at the temporal nature of the complexity within the <b>NP</b> <b>class</b> of problems. Let us remind that the <b>NP</b> <b>class</b> is called the class of "Non Deterministic Polynomial" languages. Using the meta argument that results in Mathematics should be "time independent" as they are reproducible, the paper shows that the P!=NP assertion is impossible to prove in the a-temporal framework of Mathematics. In a previous version of the report, we use a similar argument based on randomness to show that the P = NP assertion was also impossible to prove, but this part of the paper was shown to be incorrect. So, this version deletes it. In fact, this paper highlights the time dependence of the complexity for any NP problem, linked to some pseudo-randomness in its heart. Comment: 21 pages, 1 figure, 2 table...|$|E
40|$|This paper depicts {{algorithms}} {{for solving}} the decision Boolean Satisfiability Problem. An extreme problem is formulated {{to analyze the}} complexity of algorithms and the complexity for solving it. A novel and easy reformulation as a lottery for an extreme case is presented to determine a stable complexity around $ 2 ^n$. The reformulation {{point out that the}} decision Boolean Satisfiability Problem can only be solved in exponential time. This implies there is not an efficient algorithm for the <b>NP</b> <b>Class.</b> Comment: arXiv admin note: text overlap with arXiv: 1510. 0268...|$|E
40|$|The aim of {{this paper}} is to show that σ–notation, based on the {{positionality}} principle, doesn’t just answer the question of equivalence of P and <b>NP</b> problem <b>classes,</b> but also represents the key to the solution of (some) more general problems from the domain of multivalued logics. However, the achievement of such an aim in its full scope is hardly possible within the limits of this paper. Therefore, the following plan shall be realized: Firstly, the logic algebra fragment necessary for the solution of the P and <b>NP</b> <b>classes</b> equivalence problem shall be expounded. Secondly, the necessary symbols and definitions shall be introduced to show that the calculations in the domain of the multivalued logic can be directly executed within the framework of σ–notation...|$|R
40|$|Abstract—In {{this paper}} a {{deterministic}} polynomial-time algorithm is presented for the Clique problem. The case is considered {{as the problem}} of omitting the minimum number of vertices from the input graph so {{that none of the}} zeroes on the graph’s adjacency matrix (except the main diagonal entries) would remain on the adjacency matrix of the resulting subgraph. The existence of a deterministic polynomial-time algorithm for the Clique problem, as an NP-complete problem will prove the equality of P and <b>NP</b> complexity <b>classes.</b> Keywords—Clique problem, Deterministic Polynomial-time Algorithm, Equality of P and <b>NP</b> Complexity <b>Classes...</b>|$|R
50|$|Fagin's theorem is {{a result}} in {{descriptive}} complexity theory that states that the set of all properties expressible in existential second-order logic is precisely the complexity <b>class</b> <b>NP.</b> It is remarkable since it is a characterization of the <b>class</b> <b>NP</b> that does not invoke a model of computation such as a Turing machine.|$|R
40|$|This paper {{describes}} a parallel {{solution of the}} sequential dynamic programming method for solving a <b>NP</b> <b>class,</b> 2 D knapsack (or cutting-stock) problem which is the optimal packing of multiples of n rectangular objects into a knapsack of size LW and are only obtainable with guillotine-type (side to side) cuts. Here, we describe and analyze this problem for the associative model. Since the introduction of associative SIMD computers {{over a quarter of}} a century ago, associative computing and the data-parallel paradigm remain popular. The MASC (Multiple instruction stream ASsociative Computer) parallel model supports a generalized version of an associative style of computing. This model supports data parallelism, constant time maximum and minimum operations, one or more instruction streams (ISs) which are sent to an equal number of partition sets of processors, and assignment of tasks to ISs using control parallelism. We solve this <b>NP</b> <b>class</b> problem with a parallel algorithm that runs in O(W(n+L+W)) time using L processors, where LW for a 2 D knapsack problem with a capacity of LW. The new multiple IS version using LW processors and max{L,M} ISs runs in O(n+L+W) given practical hardware considerations. Both of these results are cost optimal with respect to the best sequential implementation. Moreover, an efficient MASC algorithm for this well-known problem should give insight to how the associative model compares to other parallel models such as PRAM...|$|E
40|$|In {{order to}} prove that the P of {{problems}} is different to the <b>NP</b> <b>class,</b> we consider the satisfability problem of propositional calculus formulae, which is an NP-complete problem. It is shown that, for every search algorithm A, there is a set E(A) containing propositional calculus formulae, each of which requires the algorithm A to take non-polynomial time to find the truth-values of its propositional letters satisfying it. Moreover, E(A) 's size is an exponential function of n, which makes it impossible to detect such formulae in a polynomial time. Hence, the satisfability problem does not have a polynomial complexit...|$|E
40|$|Morrill and Valentin in {{the paper}} "Computational {{coverage}} of TLG: Nonlinearity" considered {{an extension of the}} Lambek calculus enriched by a so-called "exponential" modality. This modality behaves in the "relevant" style, that is, it allows contraction and permutation, but not weakening. Morrill and Valentin stated an open problem whether this system is decidable. Here we show its undecidability. Our result remains valid if we consider the fragment where all division operations have one direction. We also show that the derivability problem in a restricted case, where the modality can be applied only to variables (primitive types), is decidable and belongs to the <b>NP</b> <b>class.</b> Comment: 17 page...|$|E
5000|$|In the {{computational}} complexity theory, the low {{hierarchy and}} high hierarchy of complexity levels {{were introduced in}} 1983 by Uwe Schöning to describe the internal structure of the complexity <b>class</b> <b>NP.</b> The low hierarchy starts from complexity class P and grows [...] "upwards", while the high hierarchy starts from <b>class</b> <b>NP</b> and grows [...] "downwards".|$|R
5000|$|The {{complexity}} <b>class</b> <b>NP</b> can {{be defined}} in terms of NTIME as follows: ...|$|R
40|$|We {{introduce}} a parameter that measures the "constrainedness" of an ensemble of combinatorial problems. If problems are over-constrained, {{they are likely}} to be insoluble. If problems are under-constrained, {{they are likely to}} be soluble. This constrainedness parameter generalizes a number of parameters previously used in different NP-complete problem classes. Phase transitions in different <b>NP</b> <b>classes</b> can thus be directly compared. This parameter can also be used in a heuristic to guide search. The heuristic captures the intuition of making the most constrained choice first, since it is often useful to branch into the least constrained subproblem. Many widely disparate heuristics can be seen as minimizing constrainedness...|$|R
40|$|Abstract: Problem statement: In {{this study}} we discuss the {{relationship}} between the known classes P and NP. We show that the difficulties in solving problem “P versus NP ” have methodological in nature. An algorithm for solving any problem is sensitive to even small changes in its formulation. Conclusion/Recommendations: As we will show in the study, these difficulties are exactly in the formulation of some problems of the class NP. We construct a class UF that contains P and that simultaneously is strictly contained in NP. Therefore, a new problem arises “P versus UF”. Key words: Class P, class <b>NP,</b> <b>class</b> UF, set-theoretic model, problem without foresight, problem that exponential in natur...|$|E
40|$|Treballs Finals de Grau de Matemàtiques, Facultat de Matemàtiques, Universitat de Barcelona, Any: 2016, Director: Juan Carlos Martínez AlonsoAutomated Theorem Proving {{is an area}} in {{mathematical}} logic and computer science dedicated {{to the production of}} theorem proofs by algorithmical means, and is of great use in many fields such as some areas of mathematics, artificial intelligence, software verification, hardware verification or declarative programming. The aim of {{the first part of this}} work is to present Herbrand’s theory and the Resolution Method for the first order logic. In the second part we show one of the many applications of the Resolution Method: the Prolog programming language, which is a useful tool for the resolution of problems in the <b>NP</b> <b>class...</b>|$|E
40|$|The {{question}} of whether all problems in <b>NP</b> <b>class</b> are also in P class is generally {{considered one of the}} most important open questions in mathematics and theoretical computer science as it has far-reaching consequences to other problems in mathematics, computer science, biology, philosophy and cryptography. There are intensive research on proving `NP not equal to P' and `NP equals to P'. However, none of the `proved' results is commonly accepted by the research community up to date. In this paper, motived by approximability of traveling salesman problem (TSP) in polynomial time, we aim to provide a new perspective: showing that NP=P from polynomial time approximation-bounded solutions of TSP in Euclidean space. Comment: 9. arXiv admin note: text overlap with arXiv: 1502. 0044...|$|E
5000|$|The {{well-known}} complexity <b>class</b> <b>NP</b> can {{be defined}} in terms of NTIME as follows: ...|$|R
5000|$|The <b>classes</b> <b>NP,</b> RP and ZPP are sets {{which have}} {{witnesses}} for membership. The <b>class</b> <b>NP</b> requires only that witnesses exist. They {{may be very}} rare. Of the 2f(|x|) possible strings, with f a polynomial, only one need cause the verifier to accept (if x is in X. If x is not in X, no string will cause the verifier to accept).|$|R
50|$|<b>NP</b> is a <b>class</b> of {{decision}} problems; the analogous class of function problems is FNP.|$|R
40|$|The {{question}} of whether the complexity class P is equal to the complexity class NP has been a seemingly intractable problem for over 4 decades. It has been clear that if an algorithm existed that would solve the problems in the <b>NP</b> <b>class</b> in polynomial time then P would equal NP. However, no one has yet been able to create that algorithm or to successfully prove that such an algorithm cannot exist. The algorithm that will be presented in this paper solves the 3 -satisfiability or 3 -CNF-SAT problem, which has been proven to be NP-complete. Comment: This paper has been withdrawn by the author because the integer operations within the algorithm cannot be proven to have a polynomial run tim...|$|E
40|$|The {{relationship}} between the complexity classes P and NP is an unsolved question {{in the field of}} theoretical computer science. After a brief presentation, this paper looks at the relation between the P- NP question and the “Deterministic ” versus “Non Deterministic” nature of a problem. Let us remind that the <b>NP</b> <b>class</b> is called the class of “Non Deterministic Polynomial ” languages. Using the meta Mathematical argument that proofs should not have any reference to time, the paper shows that the P = NP assertion is impossible to prove in the deterministic or time independent framework of Mathematics. A similar argument based on Randomness shows that the P = NP assertion is also impossible to prove, so that the P- NP problem turns to be undecidable in the framework of Mathematics...|$|E
40|$|The {{classical}} 0 - 1 {{knapsack problem}} {{is one of}} the more studied combinatorial optimization problem which belong to the <b>NP</b> <b>class</b> of algorithms. A number of its generalized forms have been addressed by various researchers using different designing techniques. In this paper, we design and analyze the Multiple Knapsack Problems (MKP) by using genetic algorithms. A modified Genetic Algorithm (mGA) is developed with the key focus on efficient encoding scheme for binary string representation and a competent dynamic programming based method for initial population generation. Furthermore transposition is applied in mGA instead of crossover for maintaining the population diversity. Performance analysis of the mGA, justifies our claims that the population incorporates adequate quality and diversity to reach a near optimal solution and transposition reduces the overall computation time...|$|E
50|$|In {{computational}} complexity theory, a sparse {{language is}} a formal language (a set of strings) such that the complexity function, {{counting the number of}} strings of length n in the language, is bounded by a polynomial function of n. They are used primarily {{in the study of the}} relationship of the complexity <b>class</b> <b>NP</b> with other <b>classes.</b> The complexity class of all sparse languages is called SPARSE.|$|R
5000|$|Determining {{whether or}} not a knot is trivial is known to be in the {{complexity}} <b>class</b> <b>NP</b> ...|$|R
5000|$|Fagin 1974: {{the set of}} all {{properties}} expressible in existential second-order {{logic is}} precisely the complexity <b>class</b> <b>NP,</b> ...|$|R
40|$|The Lambek {{calculus}} is {{a well-known}} logical formalism for modelling natural language syntax. The original calculus covered {{a substantial number of}} intricate natural language phenomena, but only those restricted to the context-free setting. In order to address more subtle linguistic issues, the Lambek calculus has been extended in various ways. In particular, Morrill and Valentin (2015) introduce an extension with so-called exponential and bracket modalities. Their extension is based on a non-standard contraction rule for the exponential that interacts with the bracket structure in an intricate way. The standard contraction rule is not admissible in this calculus. In this paper we prove undecidability of the derivability problem in their calculus. We also investigate restricted decidable fragments considered by Morrill and Valentin and we show that these fragments belong to the <b>NP</b> <b>class...</b>|$|E
40|$|Answer Set Programming (ASP) is a {{declarative}} programming paradigm. The intrinsic {{complexity of}} the evaluation of ASP programs makes {{the development of more}} effective and faster systems a challenging research topic. This paper reports on the recent improvements of the ASP solver WASP. WASP is undergoing a refactoring process which will end up in the release of a new and more performant version of the software. In particular the paper focus on the improvements to the core evaluation algorithms working on normal programs. A preliminary experiment on benchmarks from the 3 rd ASP competition belonging to the <b>NP</b> <b>class</b> is reported. The previous version of WASP was often not competitive with alternative solutions on this class. The new version of WASP shows a substantial increase in performance. Comment: The paper appears in the Proceedings of the 15 th International Workshop on Non-Monotonic Reasoning (NMR 2014...|$|E
40|$|A quantum machine {{consisting}} of interacting linear clusters of atoms is {{proposed for the}} 3 SAT problem. Each cluster with two relevant states of collective motion {{can be used to}} register a Boolean variable. Given any 3 SAT Boolean formula the interactions among the clusters can be so tailored that the ground state(s) (possibly degenerate) of the whole system encodes the satisfying truth assignment(s) for it. This relates the 3 SAT problem to the dynamics of the properly designed glass system. PACS numbers: 89. 80. +h, 71. 45. -d Typeset using REVTEX 1 Equipped with powerful algorithms, today’s electronic computers solve many problems amazingly fast. Yet there are problems hard to them {{in the sense that the}} best algorithms essentially take exponential running time. Many of the hard problems are NP even NPcomplete [1]. A problem is NP provided that it can have its answer checked in polynomial time. If the problem has the further property that all problems in the <b>NP</b> <b>class</b> can b...|$|E
50|$|Fagin's theorem is {{a result}} in {{descriptive}} complexity theory that states that the set of all properties expressible in existential second-order logic is precisely the complexity <b>class</b> <b>NP.</b> It is remarkable since it is a characterization of the <b>class</b> <b>NP</b> that does not invoke a model of computation such as a Turing machine. The theorem was proven by Ronald Fagin in 1974 (strictly, in 1973 in his doctoral thesis).|$|R
40|$|AbstractWe show, for example, the {{following}} claim: if EXPSPACE (def DSPACE(2 poly) has a non-p-isomorphic pair of complete sets, {{then it has}} a complete set that is not p-isomorphic to U and that is of the form f(U) for some one-way function f, where U is any fixed paddable complete set in EXPSPACE. We have similar but weaker results for the <b>class</b> <b>NP,</b> super-polynomial complexity <b>classes,</b> and classes that include co-NEXP...|$|R
5000|$|In {{computational}} complexity theory, an NP-complete {{decision problem}} is {{one which is}} in the <b>NP</b> complexity <b>class</b> and which is also NP-hard. In this context, NP stands for [...] "nondeterministic polynomial time". The set of NP-complete problems is often denoted by NP-C or NPC.|$|R
