23|12|Public
50|$|In {{computer}} {{networking and}} computer architecture, a <b>northbound</b> <b>interface</b> of a component is an interface that conceptualizes {{the lower level}} details (e.g., data or functions) used by, or in, the component. A <b>northbound</b> <b>interface</b> is used to interface with higher level layers using the southbound interface of the higher level component(s). In architectural overviews, the <b>northbound</b> <b>interface</b> is normally drawn {{at the top of}} the component it is defined in, hence the name <b>northbound</b> <b>interface.</b>|$|E
50|$|A <b>northbound</b> <b>interface</b> is {{typically}} an output-only interface (as opposed {{to one that}} accepts user input) found in carrier-grade network and telecommunications network elements. The languages or protocols commonly used include SNMP and TL1. For example, a device {{that is capable of}} sending out syslog messages but that is not configurable by the user is said to implement a <b>northbound</b> <b>interface.</b> Other examples include SMASH, IPMI, WSMAN, SOAP, etc.|$|E
50|$|IMP is an {{integrated}} middleware platform for external system aiming to service logic communication. The IMP receives the messages from outside and translates into messages understandable by SCS. By this way, IMP isolates the external platform and enhances the communication of efficiency and safety. By the other way, IMP will connect with OLC Server and CSIP Server by <b>northbound</b> <b>interface.</b>|$|E
50|$|<b>Northbound</b> <b>interfaces</b> {{normally}} talk to southbound interfaces {{of higher}} level components and vice versa.|$|R
40|$|Definition and {{development}} of the Network Service Plane and <b>northbound</b> <b>interfaces</b> development This deliverable describes the Network Service Plane (NSP) and its <b>interfaces,</b> specifically its <b>northbound</b> <b>interfaces</b> towards a Meta-Scheduling System [MSS] or towards user client software. The NSP is responsible for coordinating the reservation of network resources that belong to different administrative domains which are managed by different Network Resource Provisioning Systems (NRPSs). This deliverable specifies the reservation interface used for multidomain reservation management and the administrative topology interface used to manage the participating domains and the interdomain topology of the network. It describes the different system modules, and describes the functionality of the system as a whole by explaining the sequence of actions taken for different common workflows...|$|R
50|$|<b>Northbound</b> <b>interfaces</b> are {{provided}} to pass information to other network management and service management systems using JMX, CORBA, SNMP and XML/HTTP protocols. Southbound interfaces provide two-way access to network elements using any proprietary protocols {{required by the}} customer as well as standard protocols, such as SNMP, TL1, XML, CMIP, CORBA and Netflow/IPFIX.|$|R
5000|$|SDN Applications are {{programs}} that explicitly, directly, and programmatically communicate their network requirements and desired network behavior to the SDN Controller via a <b>northbound</b> <b>interface</b> (NBI). In addition they may consume an abstracted {{view of the}} network for their internal decision-making purposes. An SDN Application consists of one SDN Application Logic and one or more NBI Drivers. SDN Applications may themselves expose another layer of abstracted network control, thus offering one or more higher-level NBIs through respective NBI agents.|$|E
40|$|A Software-defined Constrained Optimal Routing (SCOR) {{platform}} is introduced as a <b>Northbound</b> <b>interface</b> in SDN architecture. It {{is based on}} constraint programming techniques and is implemented in MiniZinc modelling language. Using constraint programming techniques in this <b>Northbound</b> <b>interface</b> has created an efficient tool for implementing complex Quality of Service routing applications in a few lines of code. The code includes only the problem statement and the solution is found by a general solver program. A routing framework is introduced based on SDN's architecture model which uses SCOR as its <b>Northbound</b> <b>interface</b> and an upper layer of applications implemented in SCOR. Performance of a few implemented routing applications are evaluated in different network topologies, network sizes and various number of concurrent flows. Comment: 19 pages, 11 figures, 11 algorithms, 3 table...|$|E
30|$|<b>Northbound</b> <b>interface</b> to {{external}} API controlled by operators {{allowing them to}} dynamically change the share of resources and policy at any time or location.|$|E
30|$|<b>Northbound</b> {{internal}} <b>interface</b> to CN controller. Information between SDRAN controller and CN controller is exchanged via the interface, {{enabling the}} {{cooperation and coordination}} of RAN and CN functions.|$|R
50|$|DNMS {{supports}} {{a variety of}} <b>northbound</b> and southbound <b>interfaces.</b>|$|R
30|$|The {{overall control}} {{architecture}} and interfaces for the next-generation SDN-based wireless network {{should also be}} established to enable efficient integration of many advanced physical-layer wireless technologies, to allow effective QoS provisioning for diverse set of wireless applications with very different characteristics and requirements, to support very large numbers of access nodes and wireless connections, and to foster the emerging active infrastructure sharing among multiple wireless operators via virtualization techniques. Specifically, the <b>northbound</b> <b>interfaces</b> should be appropriately defined to allow active sharing of wireless access and/or core networks among wireless operators and service providers where service providers can have sufficient power to control their traffic and optimize the assigned network resources. Moreover, the southbound interfaces should be engineered to achieve efficient utilization of network infrastructure and flexible programmable capability to provision and control the resource management and sharing operations under different RAN and wireless technologies.|$|R
30|$|Both modules {{communicate}} with the Controller Interface to perform the orchestration/monitoring activities of VNFs in the physical infrastructure. This interface {{is made up of}} two sub-modules, (i) SDN <b>northbound</b> <b>interface,</b> responsible for translating chain installation requests and state queries (for example, from switches) to the protocol used by the SDN controller, and (ii) NFV <b>northbound</b> <b>interface,</b> responsible for adapting requests relevant to the VNFs to the protocol used by the NFV controller of the infrastructure. A detailed definition of the Controller Interface is left for future work.|$|E
30|$|In the Controller Interface, the SDN <b>northbound</b> <b>interface</b> {{corresponds}} to a Web Server Gateway Interface (WSGI) part of the Ryu controller, and enables external access to the methods defined in the SDN 6 control application. The communication with the SDN controller is done via HTTP GET calls to a REST (Representational State Transfer) web service; information about network flows is also passed on these calls. The NFV <b>northbound</b> <b>interface</b> {{corresponds to}} an RPC server (implemented using Spyne [20]), that exposes the NFV platform methods through Simple Object Access Protocol (SOAP). The communication with the NFV Platform is performed {{by means of a}} SOAP client, which accesses the methods related to NF instantiation and deployment.|$|E
40|$|Software-Defined Networking (SDN) {{promises}} to introduce flexibility and programmability into networks {{by offering a}} <b>northbound</b> <b>interface</b> (NBI) for developers to create SDN applications. However, current designs and implementations have several drawbacks, including the lack of extended security features. In this paper, we present a secure <b>northbound</b> <b>interface,</b> through which an SDN controller can offer network resources, such as statistics, flow information or topology data, via a REST-like API to registered SDN applications. A trust manager ensures that only authenticated and trusted applications can utilize the interface. Furthermore, a permission system allows for fine-grained {{authorization and access control}} to the aforementioned resources. We present a prototypical implementation of our interface and developed example applications using our interface, including an SDN management dashboard...|$|E
40|$|The {{thesis is}} divided into two parts. In the {{literature}} study part, state of Software-defined Networking (SDN) standardization is walked through and compared to the current implementations of on-market vendors. In this part the technical possibilities enabled by SDN are mapped and SDN’s probability of becoming the new way of building networks is assessed lightly. In the case study part, prototypes of such value adding services are designed and created. Showcase starts by comparing available SDN solutions and selecting two of them for closer inspection. Case study continues by making technological choices in API and development tool realms. Then, the process of creating a prototype of a management interface on one SDN controller is described. The designed and implemented solution has the capability of dynamically prioritizing the network flows and dynamically changing the route of a network flow from the shortest path (from source to destination) into forcing it to make a detour through intrusion prevention system before being allowed to reach the destination. As a part of the research, a web tool including user interface for achieving described functions is created, because such tools are widely adopted by ISPs as the visible interface for customers to interact with. After the solution has been finalized on one SDN controller platform, the research shifts to analyze the consequences of changing one SDN controller to another. In this part, standardization situation of both south- and <b>northbound</b> <b>interfaces</b> are discussed more closely. Research finds out that {{because of the lack of}} standardization in northbound REST APIs, change invalidates most, or all, of the developed SDN applications. Thesis articulates if change with full functionality retained is possible, and analyses the amount of needed work for straightforward code conversion or other means. The study indicates that SDN works as enabling technology and makes it possible to achieve functions in network management that have earlier been impossible through programming, mostly because the lack of relevant application programming interfaces. The thesis validates SDN as a functional technology with huge headroom for service development possibilities, however it finds the standardization of the <b>northbound</b> programming <b>interfaces</b> lacking and brings up questions about market penetration chances for the technology due to some major vendors having less than enthusiastic implementations of the technology...|$|R
50|$|As {{recommended}} by ITU-T, the element management system's key functionality {{is divided into}} five key areas - fault, configuration, accounting, performance and security (FCAPS). Portions {{of each of the}} FCAPS functionality fit into the TMN models. <b>Northbound,</b> the EMS <b>interfaces</b> to network management systems and or service management systems depending on the deployment scenario. Southbound, the EMS talks to the devices.|$|R
40|$|Several recent proposals, namely Software Defined Networks (SDN), Network Functions Virtualization (NFV) and Network Service Chaining (NSC), aim to {{transform}} the network into a programmable platform, focusing respectively on the control plane (SDN) and on the data plane (NFV/NSC). This paper sits on the same line of the NFV/NSC proposals but with a more long-term horizon, and it presents its considerations on some controversial aspects that arise when considering the programmability of the data plane. Particularly, this paper discusses the relevance of data plane vs control plane services, {{the importance of the}} hardware platform, and the necessity to standardize <b>northbound</b> and southbound <b>interfaces</b> in future software-defined data plane service...|$|R
40|$|Abstract: SDN is {{the current}} hot {{research}} topic in the network area. It becomes high-profile because of being considered as the direction of next-generation network. Service deployment is the core content of <b>northbound</b> <b>interface</b> and the focus for researchers in SDN. So far, there are still rare successful SDN application cases, the relevant researches on service deployment are even fewer. Based {{on the concept of}} service deployment, we bring up a service deployment framework in SDN, build a service deployment model, and then study the problem of price calculation during the process of service deployment and present some corresponding optimization algorithms...|$|E
40|$|This paper {{presents}} an SDN orchestrator that offers adaptive path provisioning in dynamic service chaining {{to recover from}} congestion events throughout service chain paths. Moreover, the SDN orchestrator exposes a <b>Northbound</b> <b>interface</b> based on REST principles and on the Intent-Based Network Modeling Language data model that allows applications to describe their requirements for the network (including dynamic service chaining) without being concerned with low-level implementation details. Experiments in an emulated network environment {{have been carried out}} to show the feasibility of the approach and {{to evaluate the effectiveness of}} the orchestration process in terms of network resource usage and adaptation overhead...|$|E
30|$|The logical {{networks}} {{described above}} are {{the core of}} the network slicing concept. In this concept, the network and available resources can be partitioned in many slices, which are associated with services and sets of requirements. Each slice can be considered as (at least) one logical network. Network slicing is usually considered together with orchestration concept, which supports slice management (creating slices, changing slices’ properties, reconfiguration of slice’s network, etc.) and provides interfaces (<b>northbound</b> <b>interface,</b> API—application programming interface) for service providers, other network operators, and other allowed (authorized) users. The purpose for this feature is to make services and networks more agile and adjustable to business and user’s requirements or current network situation.|$|E
30|$|NFV. There {{are open}} issues that arise when {{attempting}} to integrate NFV and SDN. For instance, the programmability of the SDN network needs to be ensured by standardizing the <b>northbound</b> and southbound <b>interfaces</b> between PNF and VNF that form a single network service chain. In addition, the virtualization has {{a negative impact on}} the performance of the virtual LTE and Wi-Fi services, {{and as a result of}} this, the performance of virtualized network functions leaves much to be desired when compared with performance of the physical network functions. Cloud computing offers potential computational environments to virtualize the network functions, such as mobile cloud and Cloud Radio Access Networks (C-RAN), but there may be significant latency to migrate the processing and traffic load of PNFs to the cloud environment. This is even more the case if the wireless links are used for this purpose; otherwise, wired links are not always available in EDHs. Global standardization is still on-going and a unified cellular programmable interface for implementing SDN and NFV is under development, including a service chain through the integration of SDN and NFV.|$|R
40|$|In {{the last}} years, Software Defined Networking {{has emerged as}} a {{promising}} paradigm to foster network innovation and address the issues coming from the ossification of the TCP/IP architecture. The clean separation between control and data plane, the definition of <b>northbound</b> and southbound <b>interfaces</b> are key features of the Software Defined Networking paradigm. Moreover, a centralised control plane allows network operators to deploy advanced control and management strategies. Effective traffic engineering and resources management policies allow to achieve a better utilisation of network resources and improve end-to-end service performance. This paper deals with the architectural design and experimental validation of a control application that enables differentiated routing for traffic flows belonging to different service classes. The new control application makes routing decisions leveraging on OpenFlow network statistics, i. e., taking advantage of real-time network status information. Moreover, a Deep Packet Inspection module has been developed and integrated in the control application to detect VoIP traffic with Session Initiation Protocol signalling, enforcing this way policies for a differentiated treatment of VoIP traffic. Finally, a functional validation is performed in emulated environment...|$|R
40|$|The Internet {{has led to}} the {{creation}} of a digital society, where (almost) everything is connected and is accessible from anywhere. However, despite their widespread adoption, traditional IP networks are complex and very hard to manage. It is both difficult to configure the network according to predefined policies, and to reconfigure it to respond to faults, load, and changes. To make matters even more difficult, current networks are also vertically integrated: the control and data planes are bundled together. Software-defined networking (SDN) is an emerging paradigm that promises to change this state of affairs, by breaking vertical integration, separating the network's control logic from the underlying routers and switches, promoting (logical) centralization of network control, and introducing the ability to program the network. The separation of concerns, introduced between the definition of network policies, their implementation in switching hardware, and the forwarding of traffic, is key to the desired flexibility: by breaking the network control problem into tractable pieces, SDN makes it easier to create and introduce new abstractions in networking, simplifying network management and facilitating network evolution. In this paper, we present a comprehensive survey on SDN. We start by introducing the motivation for SDN, explain its main concepts and how it differs from traditional networking, its roots, and the standardization activities regarding this novel paradigm. Next, we present the key building blocks of an SDN infrastructure using a bottom-up, layered approach. We provide an in-depth analysis of the hardware infrastructure, southbound and <b>northbound</b> application programming <b>interfaces</b> (APIs), network virtualization layers, network operating systems (SDN controllers), network programming languages, and network applications. We also look at cross-layer problems such as debugging and troubleshooting. In an effort to anticipate the future evolution of this - ew paradigm, we discuss the main ongoing research efforts and challenges of SDN. In particular, we address the design of switches and control platforms—with a focus on aspects such as resiliency, scalability, performance, security, and dependability—as well as new opportunities for carrier transport networks and cloud providers. Last but not least, we analyze the position of SDN as a key enabler of a software-defined environment...|$|R
40|$|This ACINO {{deliverable}} {{presents the}} work performed in task “Design of the programmability elements for in-operation network control” {{to design the}} <b>northbound</b> <b>interface</b> of the ACINO orchestrator. The document begins with {{a review of the}} requirements of the <b>northbound</b> <b>interface,</b> derived from previous work done related to use cases and application requirements and the expected properties of the ACINO framework (see report "ACINO: The framework for the application-centric network orchestrator"). The <b>northbound</b> <b>interface</b> of the orchestrator uses the intent paradigm: applications request what they want (in term of service properties), not how the requested services should be set up. This paradigm makes the interface potentially independent of the orchestrator, as it does not rely on the technical implementation of the control plane. Adopting an Intent-based interface as a standard for the orchestrator could make Software-Defined Networks much more popular, as applications communicating with them would 1) be easier to write (no knowledge of network technology required) and 2) not be tied to a specific orchestrator implementation. A review {{of the state of the}} art on the subject is presented in chapter 3. The document defines two northbound interfaces: the Dynamic Intent-driven Service Management Interface or DISMI, which allows applications to request network services, and the Multi-Layer Topology and Planning Interface or MLTPI, which is an interface used for management purposes (e. g. interfacing with Network Management Systems (NMS)). The network primitives exposed to applications through the DISMI are defined. Using the provided grammar, applications can combine them to build intents. The main types of primitives are: 	Actions, which describe the type of connection requested: point-to-point, point-to-multipoint or multipoint-to-multipoint, uni- or bi-directional; 	Nouns, which describe the network end points; 	Constraints, which specify the properties of the requested network service (bandwidth, delay, encryption, [...] .); 	Selectors, which allow discriminating traffic at the network end points and routing it over application-specific services. Required properties for the DISMI, such as support for the standard CRUD operations (Create, Remove, Update, Delete), are discussed. Various ways to implement the intent grammar are presented. The DISMI is defined as a RESTful HTTP API, with JavaScript Object Notation (JSON) as data objects, and JSON schema to implement the grammar. The possibility for an application to negotiate the network service properties after the initial intent request is discussed, and the steps to implement such functionality at the <b>northbound</b> <b>interface</b> are presented. The architecture of the intent framework is presented. As defined, the DISMI is independent of ONOS, and the framework itself could be implemented as a component separate from ONOS. It is however integrated to the orchestrator to provide a full orchestrator implementation. The framework implements: 	The DISMI module, which performs the intent resolution: all the parameters and primitives of the intent are checked and validated; 	The various intent compilers (one per intent) that decompose intents and find a way to install them as sets of network requirements, then send them to ONOS for actual installation. The network primitives exposed to applications through the MLTPI are defined. Network Management Systems can use them to pose questions, such as what-if questions (“what if this link fails?”) or re-optimization questions (“what is the benefit of a re-optimization with regard to energy usage?”). The result of such re-optimizations can be applied to the network or discarded. The MLTPI is an extension of the DISMI: it adds a set of primitives and methods to the DISMI, that are only visible to privileged applications. Some of these primitives are to send questions; others provide the answers from the framework. Similarly to the DISMI, a RESTful HTTP API is defined for the MLTPI. Finally, summarizing the design work presented in this report, four areas are identified in the network controller used as the base for the ACINO orchestrator, where programmability elements need to be modified or introduced to implement the functionalities described in this document...|$|E
40|$|In this paper, we {{introduce}} SCOR (Software-defined Constrained Optimal Routing), a new SDN <b>Northbound</b> <b>Interface</b> for QoS routing {{and traffic}} engineering. SCOR {{is based on}} constraint programming techniques and is implemented in the MiniZinc modelling language. It provides a powerful, high level abstraction, consisting of 9 basic constraint programming predicates. A key feature of SCOR {{is that it is}} declarative, where only the constraints and utility function of the routing problem need to be expressed, and the complexity of solving the problem is hidden from the user, and handled by a powerful generic solver. We show that the interface (set of predicates) of SCOR is sufficiently expressive to handle all the known and relevant QoS routing problems. We further demonstrate the practicality and scalability of the approach via a number of example scenarios, with varying network topologies, network sizes and number of flows...|$|E
40|$|Chemical {{algorithms}} are statistical control algorithms {{described and}} represented as chemical reaction networks. They are analytically tractable, they reinforce a deterministic state-to-dynamics relation, they have configurable stability properties, {{and they are}} directly implemented in state space using a high-level visual representation. These properties make them attractive solutions for traffic shaping and generally the control of dynamics in computer networks. In this paper, we present a framework for deploying chemical algorithms on field programmable gate arrays. Besides substantial computational acceleration, we introduce a low-overhead approach for hardware-level programmability and re-configurability of these algorithms at runtime, and without service interruption. We {{believe that this is}} a promising approach for expanding the control-plane programmability of software defined networks (SDN), to enable programmable network dynamics. To this end, the simple high-level abstractions of chemical algorithms offer an ideal <b>northbound</b> <b>interface</b> to the hardware, aligned with other programming primitives of SDN (e. g., flow rules) ...|$|E
40|$|International audienceSoftware Defined Networking (SDN) {{is deemed}} to empower next {{generation}} network and cloud services in several aspects. The authors argue that its high flexibility can be exploited not only in retrieving services efficiently but also in yielding new ones by introducing programming capabilities on its top. This however requires to structure its <b>northbound</b> <b>interface</b> (NBI) with an abstract application programming interface (API), the definition of which is {{actually one of the}} SDN challenges. We propose in this paper a global analysis of the capabilities of the NBI of the SDN articulated to a generic but simple double sided model of service lifecycle. Its analysis determines interesting properties of the NBI leading to precisely identify the associated API. We derive from this service lifecycle a general framework structuring the internal architecture of the SDN in two orchestrators dedicated respectively to the management of services and resources. Our approach which provides a firm foundation for the implementation of the NBI is illustrated with an example...|$|E
40|$|International audienceSoftware Defined Networking (SDN) is {{supposed}} to bring flexibility, dynamicity and automation to today's network through a logically centralized network controller. We argue that reaching SDN's full capacities requires however the development of standardized programming capabilities on its top. In this paper we introduce "Bring Your Own Control" (BYOC) as a new concept providing a convenient framework structuring the openness of the SDN on its northbound side. We derive from the lifecycle characterizing the services deployed in an SDN, the parts of services the control {{of which may be}} delegated by the operator to external customers through dedicated application programming interfaces (API) located in the <b>northbound</b> <b>interface</b> (NBI). We argue that the exploitation of such services may noticeably be refined by the operator through various business models monetizing the openness of the SDN following the new paradigm of "Earn as Your Bring" (EaYB). We propose an analysis of BYOC and we illustrate our approach with several use cases...|$|E
40|$|Abstract—The {{software-defined}} networking (SDN) paradigm brings unprecedented agility and flexibility to network operators. The usage of centralized software-based controllers simplifies {{operation and management}} and enables innovation in the control plane through network programmability. Besides, a controller may be operated via third-party applications using the so-called northbound application programming interfaces (APIs). In this paper, we report our preliminary work on {{the interaction between the}} <b>northbound</b> <b>interface</b> of the open-source industry-supported OpenDaylight controller and our Net 2 Plan tool. Net 2 Plan is an open-source network planning tool that is able to execute user-made algorithms. By connecting Net 2 Plan to OpenDaylight, users would be able to easily orchestrate their networks, e. g. defining flow routing, making use of built-in or user-defined algorithms, implemented in the Net 2 Plan framework. In this paper, we present some illustrative experiments, and discuss future challenges. Keywords—Software-defined networking; network orchestration; OpenFlow; OpenDaylight; Net 2 Plan; northbound API; open-sourc...|$|E
40|$|Due to {{copyright}} restrictions, {{the access}} to {{the full text of}} this article is only available via subscription. Many of the video streaming applications in today's Internet involve the distribution of content from a CDN source to a large population of interested clients. However, widespread support of IP multicast is unavailable due to technical and economical reasons, leaving the floor to application layer multicast which introduces excessive delays for the clients and increased traffic load for the network. This paper is concerned with the introduction of an SDN-based framework that allows the network controller to not only deploy IP multicast between a source and subscribers, but also control, via a simple <b>northbound</b> <b>interface,</b> the distributed set of sources where multiple-description coded (MDC) video content is available. We observe that for medium to heavy network loads, relative to the state-of-the-art, the SDN-based streaming multicast video framework increases the PSNR of the received video significantly, from a level that is practically unwatchable to one that has good quality...|$|E
40|$|Software Defined Networking (SDN) {{promises}} to abstract hardware and hard-wired network topologies {{in favor of}} programmable dynamic infrastructures. However, especially features like multi-tenancy require {{for new ways to}} ensure that access to critical network resources are restricted to trusted applications and users. The challenge here is that these entities are not necessarily known at the time of planning and setup, but are rather added dynamically to the network at runtime. Controlling access to northbound interfaces of SDN controllers thus requires for new ways to express access control policies which are able to cope with this degree of complexity and abstraction. We thus introduce a taxonomy-based policy engine, which allows the definition of fine-grained security policies based on a first-order logic description of the network environment. We describe the taxonomy structure and show how it {{can be used in a}} Prolog-based policy engine to protect a secure SDN <b>northbound</b> <b>interface</b> developed in previous work. By evaluating the implementation in a virtual SDN environment, we found the performance overhead of our approach to be tolerable...|$|E
40|$|Many of {{the video}} {{streaming}} applications in today's Internet involve the distribution of content from a CDN source to a large population of interested clients. However, widespread support of IP multicast is unavailable due to technical and economical reasons, leaving the floor to application layer multicast which introduces excessive delays for the clients and increased traffic load for the network. This paper {{is concerned with the}} introduction of an SDN-based framework that allows the network controller to not only deploy IP multicast between a source and subscribers, but also control, via a simple <b>northbound</b> <b>interface,</b> the distributed set of sources where multiple- description coded (MDC) video content is available. We observe that for medium to heavy network loads, relative to the state-of-the-art, the SDN-based streaming multicast video framework increases the PSNR of the received video significantly, from a level that is practically unwatchable to one that has good quality. Comment: 6 pages, 5 figures, 1 table, First Workshop on Software-Defined Internets of the Future - WSDIF 2014. Proceedings of the 11 th IEEE International Conference on Mobile Ad hoc and Sensor Systems (MASS) 2014 - Philadelphia, Pennsylvania - October 28 - 30, 201...|$|E
40|$|Telecommunication {{networks}} {{are meant to}} be efficient, transparent, and accessible to the broadest possible set of users. However, they are very complex systems, in which a large number of components cooperates, posing a challenge to the desired efficiency, transparency and ease of access. Emerging technological paradigms such as Software Defined Networking (SDN), Network Function Virtualization (NFV) and Cloud Computing open up to {{a whole new set of}} possible applications for the infrastructure, or better ways to implement traditional services, but also introduce new environments to be controlled. One of the main challenges in delivering end-to-end service chains across multiple SDN, NFV and Cloud domains is to achieve unified management and orchestration functions. A very critical aspect is the definition of an open, vendor-agnostic, and interoperable <b>northbound</b> <b>interface</b> (NBI) that should be as abstracted as possible from domain-specific data and control plane technologies, making the underlying infrastructure easier to be accessed, while still allowing a fair amount of flexibility and freedom in programmability of the network. In this document we describe a reference architecture and expand an intent-based NBI for end-to-end service orchestration across multiple technological domains. More specifically, we consider the use case of an Internet of Things (IoT) infrastructure deployment and the corresponding Cloud-based data collection, processing, and publishing services, differentiating multiple Quality of Service (QoS) classes. Finally we report the experimental validation of the proposed architecture over a heterogeneous, multi-domain SDN test bed...|$|E
40|$|This thesis {{covers the}} process of {{developing}} a network management system simulator with support for northbound communication over the CORBA-based protocol TMF 814. The simulator allows the user to import real data from an existing network management system. The user can view and configure the data through a GUI. The simulator acts as a TMF 814 server for clients on higher management network levels. Much of the focus in this project lies on the architecture's modularity, which can be divided into three areas: a graphical user interface, a <b>northbound</b> <b>interface</b> and a database interface. The intention of the final product is to facilitate TMF 814 integrations, but parts of the code can be re-utilized for multiple purposes. Modules can be attached and extracted to make custom solutions that require either processing or visualization of network management data or simply TMF 814 server functionality. Developing the simulator has lead to {{a deeper understanding of the}} protocol and its underlying structures. Therefore, experiences and pitfalls that might be useful for the prospective TMF 814 developer are shared. As the comprehensiveness of the protocol revealed itself during the course of the project, we have a final deliverable with a small portion of the server side functionality implemented. Apart from the server implementation, the product parses client data and visualizes it graphically. At the end, we have successfully built a modular and maintainable platform, although more testing is necessary before we can verify correct behavior. We are also left questioning interoperability, abstraction, maintainability and legal issues of the protocol's underlying infrastructure...|$|E

