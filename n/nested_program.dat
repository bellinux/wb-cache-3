10|195|Public
5000|$|The {{theoretical}} {{foundation of}} KeY is a formal logic called Java Card DL. DL stands for Dynamic Logic. It is {{a version of}} a first-order dynamic logic tailored to Java Card programs. As such, it for example allows statements (formulas) like , which intuitively says that the post-condition [...] must hold in all program states reachable by executing the Java Card program [...] in any state that satisfies the pre-condition [...] This is equivalent to [...] in Hoare calculus if [...] and [...] are purely first order. Dynamic logic, however, extends Hoare logic in that formulas may contain <b>nested</b> <b>program</b> modalities such as , or that quantification over formulas which contain modalities is possible. There is also a dual modality [...] which includes termination. This dynamic logic {{can be seen as}} a special multi-modal logic (with an infinite number of modalities) where for each Java block [...] there are modalities [...] and [...]|$|E
3000|$|... {{will contain}} {{multiple}} instances {{of the basic}} blocks in the program code. If a scoped path goes through a <b>nested</b> <b>program</b> scope, all the basic blocks from the <b>nested</b> <b>program</b> scope are hidden for this path. The starting basic block of a scoped path [...]...|$|E
3000|$|... {{will contain}} {{multiple}} instances {{of the conditions}} in the program code. If a scoped path goes through a <b>nested</b> <b>program</b> scope, all the conditions from the <b>nested</b> <b>program</b> scope are hidden for this path. To follow a certain path, {{it is also important}} whether a condition evaluates to TRUE/FALSE. Whether a condition has to be evaluated as TRUE or as FALSE is given by the syntactical structure of a program. For a given scoped path [...]...|$|E
40|$|We {{define the}} class of head-cycle free <b>nested</b> logic <b>programs,</b> and its proper {{subclass}} of acyclic <b>nested</b> <b>programs,</b> generalising similar classes originally defined for disjunctive logic programs. We then extend several results known for acyclic and head-cycle free disjunctive programs under the stable model semantics to the nested case. Most notably, we provide a propositional semantics for the program classes under consideration. This generalises different extensions of Fages' theorem, including a recent result by Erdem and Lifschitz for tight logic programs. We further show that, based on a shifting method, head-cycle free <b>nested</b> <b>programs</b> can be rewritten into normal programs in polynomial time and space, extending a similar technique for head-cycle free disjunctive programs. All this shows that head-cycle free <b>nested</b> <b>programs</b> constitute a subclass of <b>nested</b> <b>programs</b> possessing a lower computational complexity than arbitrary <b>nested</b> <b>programs,</b> providing the polynomial hierarchy does not collapse...|$|R
40|$|This study aims {{to explore}} the Native English-Speaking Teacher (<b>NEST)</b> <b>Program</b> in {{relation}} to teachers’ instruction and students’ learning of English in primary schools in Taiwan. Inviting native English-speakers to teach English {{in the school system}} is not an unusual practice in the Asia-Pacific region. As the practice of including NESTs in the school system has become prevalent in Taiwan, alongside other Asian countries, its significance cannot be overlooked. It is worthwhile to look into the impact of <b>NEST</b> <b>programs</b> on local English teachers and students in context. Through interviewing, class observation and questionnaire, this study finds that the <b>NEST</b> <b>Program</b> in Taiwan did not have a considerable impact on teachers’ instruction, whereas its effect on teachers’ professional development was mainly concerning English language proficiency. As for students’ learning, the <b>NESTs</b> in the <b>Program</b> served as a language model in the classroom and were able to arouse students’ motivation {{at the beginning of the}} school year. Nevertheless, the teachers and the students had unfavorable perceptions of the NESTs due to their unexpected leave without notice. In light of the research findings, the author makes suggestions on the <b>NEST</b> <b>Program.</b> </p...|$|R
40|$|We {{introduce}} {{the class of}} possibilistic <b>nested</b> logic <b>programs.</b> These possibilistic logic programs allow us to use nested expressions in the bodies and the heads of their rules. By considering a possibilistic <b>nested</b> logic <b>program</b> as a possibilistic theory, a construction of a possibilistic logic programing semantics based on answer sets for <b>nested</b> logic <b>programs</b> and the proof theory of possibilistic logic is defined. We show that this new semantics for possibilistic logic programs is computable by means of transforming possibilistic <b>nested</b> logic <b>programs</b> into possibilistic disjunctive logic programs. The expressiveness of the possibilistic <b>nested</b> logic <b>programs</b> is illustrated by scenarios from the medical domain. In particular, we exemplify how possibilistic <b>nested</b> logic <b>programs</b> are expressive enough for capturing medical guidelines which are pervaded of vagueness and qualitative information...|$|R
3000|$|... is a {{sequence}} of control-flow edges from an entry point of the scope to an exit point of the scope. In case of <b>nested</b> <b>program</b> scopes, the whole inner program scope is a single block in the paths of the outer program scope. A scoped path of a program scope [...]...|$|E
40|$|Abstract This paper characterizes graph grammars {{which provide}} formal {{definition}} of program documentation tabular forms {{with respect to}} syntactic manipulation and mechanical drawing. We propose an at-tribute context-free graph grammar with 280 rewriting rules and 1248 attribute rules for ISO 6592 based <b>nested</b> <b>program</b> forms with 137 items. The grammar is shown to have precedence property [1] by 5376 rela-tions over the marks. Furthermore, we con-sider context-sensitive graph grammars for tessellation tabular forms...|$|E
40|$|Abstract. We present ABC, a {{software}} tool for automatically computing symbolic upper bounds {{on the number}} of iterations of <b>nested</b> <b>program</b> loops. The system combines static analysis of programs with symbolic summation techniques to derive loop invariant relations between program variables. Iteration bounds are obtained from the inferred invariants, by replacing variables with bounds on their greatest values. We have successfully applied ABC to a large number of examples. The derived symbolic bounds express non-trivial polynomial relations over loop variables. We also report on results to automatically infer symbolic expressions over harmonic numbers as upper bounds on loop iteration counts. ...|$|E
5000|$|The [...] "Clao7alcw" [...] (Raven's Nest) {{language}} <b>nest</b> <b>program</b> at Mount Currie, {{home of the}} Lil’wat, {{is conducted}} in the Lil’wat language." ...|$|R
5000|$|TinyOS {{began as}} a project at UC Berkeley {{as part of the}} DARPA <b>NEST</b> <b>program.</b> It has since grown to involve {{thousands}} of academic and commercial developers and users worldwide. (list in reverse chronological order) ...|$|R
40|$|Abstract. <b>Nested</b> logic <b>{{programs}}</b> and epistemic logic {{programs are}} two important extensions of answer set programming. However, {{the relationship between}} these two formalisms is rarely explored. In this paper we first introduce the epistemic HT-logic, and then propose a more general extension of logic <b>programs</b> called <b>nested</b> epistemic logic <b>programs.</b> The semantics of this extension- named equilibrium views- is defined {{on the basis of the}} epistemic HT-logic. We prove that equilibrium view semantics extends both the answer sets of <b>nested</b> logic <b>programs</b> and the world views of epistemic logic programs. Therefore, our work establishes a unifying framework for both <b>nested</b> logic <b>programs</b> and epistemic logic programs. Furthermore, we also provide a characterization of the strong equivalence of two <b>nested</b> epistemic logic <b>programs.</b> ...|$|R
40|$|Functions {{specified}} by nested recursions {{are difficult to}} define and reason about. We present several ameliorative techniques that use deduction in a classical higher-order logic. First, we discuss how an apparent circular dependency between the proof of nested termination conditions and {{the definition of the}} specified function can be avoided. Second, we propose a method that allows the specified function to be defined {{in the absence of a}} termination relation. Finally, we show how our techniques extend to <b>nested</b> <b>program</b> schemes, where a termination relation cannot be found until schematic parameters have been filled in. In each of these techniques, suitable induction theorems are automatically derived...|$|E
40|$|Abstract. Applications that {{manipulate}} {{programs as}} data are called meta programs. Examples of meta programs are compilers, source-to-source translators and code generators. Meta programming can {{be supported by}} the ability to represent program fragments in concrete syntax instead of abstract syntax. The resulting meta programs are far more self-documenting because “what {{you see is what}} you manipulate”. One caveat in concrete meta programming is the syntactic separation between the meta language and the manipulated language. Conventional scanning and parsing technologies have a hard time distinguishing the two levels. To aid in solving this problem, many meta programming systems use quoting and escaping to indicate precisely where level switches occur. These “syntactic hedges ” can heavily obfuscate the concrete program fragments. In practice, it leads to programmers avoiding the use of concrete syntax for the bigger or more deeply <b>nested</b> <b>program</b> fragments. This paper contributes by removing the technical need for quotes and escapes, allowing more “what {{you see is what you}} manipulate ” than before in meta programming applications. ...|$|E
40|$|To {{minimize}} the surging power consumption of microprocessors, adaptive computing environments (ACEs) where microarchitectural resources can be dynamically tuned to match a program's runtime requirement and characteristics {{are becoming increasingly}} common. Adaptive computing environments usually have multiple configurable hardware units, necessitating exploration {{of a large number}} of combinatorial configurations in order to identify the most energy-efficient configuration. In this paper, we propose a scheme for efficient management of multiple configurable units, utilizing the inherent capabilities of dynamic optimization systems. Most dynamic optimizers typically detect dominant code regions (hotspots). We develop an ACE management scheme where hotpot boundaries are used for phase detection and adaptation. Since hotspots are of variable sizes and are often <b>nested,</b> <b>program</b> phase behavior which is hierarchical in nature is automatically captured in this technique. To demonstrate the usefulness and effectiveness of our framework, we use the proposed framework to dynamically adapt the sizes of L 1 data and L 2 caches that have different reconfiguration latencies and overheads. Our technique reduces L 1 D and L 2 cache energy consumption by 47 % and 58 %, while a popular previously proposed technique only achieves reduction of 32 % and 52 % respectively. 1...|$|E
5000|$|The Lil'wat {{people are}} very active in {{reviving}} their language and culture. Language is taught in the school, right from nursery to grade 12. There are resource elders who come into help. The “Clao7alcw” (Raven’s Nest) language <b>nest</b> <b>program</b> is conducted in the Lil’wat dialect." ...|$|R
40|$|Barn owls are an {{endangered}} species in Illinois, but populations {{have been known to}} increase where <b>nest</b> box <b>programs</b> have been implemented. In conjunction with the John Wesley Powell Audubon Society, a barn owl <b>nest</b> box <b>program</b> was established in McLean County and the surrounding area. Seventeen boxes are now scheduled for construction and installation this winter in the McLean County area in order to enhance existing barn owl populations, and the <b>nest</b> box <b>program</b> will continue in the future through the JWP Audubon...|$|R
40|$|We {{present a}} {{sufficient}} {{as well as}} a necessary condition for the equivalence between answer sets and models of completion for logic <b>programs</b> with <b>nested</b> expressions in the bodies of rules. This condition is the weakest among all that we are aware of even for normal logic programs. To obtain this result, we present a polynomial time reduction from this class of <b>nested</b> logic <b>programs</b> to extended programs. Consequently, answer sets for these <b>nested</b> <b>programs</b> can be computed by an answer set generator for extended programs on the one hand, and characterized in terms of models of completion on the other. ...|$|R
40|$|Computational engineering' (CE) is {{computation}} {{based on}} mathematical models {{for use in}} engineering design. CE {{can be used to}} study and optimise structures and processes in industry and other branches of society to utilise resources in the most effective way. Modelling, simulation, optimisation and visualisation are basic methods of CE. The current development of CE is concerned with increased realism, improved efficiency, reliability and quality control, and integration of methods to solve more complex problems. The purpose of this thesis is to {{contribute to the development of}} the field of CE. As a respond, the thesis attempts to give both an overview and detailed knowledge of computational methods. The examples are limited to structural engineering, but the methodology should have a wider range of application. The thesis consists of five appended papers (A-E) and a summary. Paper A implements and tests mesh adaptive FE-analysis applied to plate bending problems. Paper B integrates CAD, FEM and optimisation programs in a nested loop for optimisation of a bridge structure. Paper C implements and tests the FEM 90 program together with a CAD program in modelling and simulation of a major bridge structure. Paper D investigates methods to solve systems of non-linear equations as arising in FE-simulation of structures loaded to failure. Paper E implements and tests new pre-conditioned, iterative methods to solve large, multi-connected 3 D problems. The summary gives an overview of the CE methods, and discusses computer implementation and integration of methods with the object-oriented FEM 90 program as example. Paper A confirms that the SPR(D) technique provides good error estimates and that re-meshing adaptivity is applicable also for plate bending problems. The optimisation in Paper B indicated substantial cost reductions for a common type of highway bridge. However, the <b>nested</b> <b>program</b> set-up was not ideal. Paper C showed that CAD and FEM could handle complex engineering structures. However, increased realism of the simulations required improvement of methods for solution of non-linear equations. Paper D indicated that a combination of dynamics and a trust region method might improve the solution of non-linear equations. Paper E showed that the multi-grid method with mesh adaptation extends the range of the FEM to large 3 D problems. The thesis shows that CE today consists of a number of useful but independent methods/programs. The object-oriented methodology provides a means to integrate the methods around data contained in natural objects defined by classes. The presentation proposes the development of generally applicable classes for use in the solution of realistic engineering problems...|$|E
40|$|IN THIS ISSUE OF TRANSECT - (feature article) Microbial Observatories Reveal Lively Little-Known Worlds Beneath the Surfaces of Land and Lake - Innovative <b>Nesting</b> <b>Program</b> at Coal Oil Point Reserve Proves Great Success - Stunt Ranch Reserve Looks Forward to New Facilities - Field Course Students from Minnesota Discover California Ecology at NRS Reserve...|$|R
40|$|Abstract In {{this paper}} we define {{a class of}} <b>nested</b> logic <b>programs,</b> <b>nested</b> logic <b>programs</b> with ordered {{disjunction}} (LP ODs +), which allows to specify qualitative preferences by means of nested preference expressions. For doing this we extend the syntax of logic programs with ordered disjunction (LPODs) to capture more general expressions. We define the LP ODs + semantics in a simple way and we extend most {{of the results of}} logic programs with ordered disjunction showing how our approach effectively is a proper generalisation of LPODs. ...|$|R
40|$|<b>Nested</b> logic <b>{{programs}}</b> and epistemic logic {{programs are}} two important extensions of answer set programming. However, {{the relationship between}} these two formalisms is rarely explored. In this paper we first introduce the epistemic HT-logic, and then propose a more general extension of logic <b>programs</b> called {/em <b>nested</b> epistemic logic programs}. The semantics of this extension - named equilibrium views - is defined {{on the basis of the}} epistemic HT-logic. We prove that equilibrium view semantics extends both the answer sets of <b>nested</b> logic <b>programs</b> and the world views of epistemic logic programs. Therefore, our work establishes a unifying framework for both <b>nested</b> logic <b>programs</b> and epistemic logic programs. Furthermore, we also provide a characterization of the strong equivalence of two <b>nested</b> epistemic logic <b>programs.</b> Griffith Sciences, School of Information and Communication TechnologyNo Full Tex...|$|R
40|$|Abstract — In modern {{multiprocessor}} systems, proces-sors can be stalled by inter-task communication when read-ing from {{a remote}} buffer. This paper presents {{a solution for}} the inter-task communication, that has a minimal im-pact {{on the performance of}} the system, hides the inter-task communication latency without requiring additional hard-ware. The solution applies to jobs, represented as task graphs, where the tasks are <b>nested</b> loop <b>programs.</b> Buffers are allocated in scratch-pad memories of the consuming tasks to provide low latency read access. For the <b>nested</b> loop <b>programs,</b> minimal buffer sizes can be determined to cover all possible communication patterns. The added computational complexity is low, as the solution adds only a few operations to the <b>nested</b> loop <b>programs...</b>|$|R
40|$|Contents: Crowds and Crowds [Balancing {{the birth}} rate and death rate of a species] - p. 2, 12; Overlooked, Under-used [Less popular fish and game] - p. 3 - 5; Let's Cook Starlings [Abundance of starlings] - p. 6; Let's Cook 'Possum [Cooking possum] - p. 7; So You Can't Catch Brook Trout! [Tricks of angling] - p. 10; Goose <b>Nesting</b> <b>Program</b> on Ladd Marsh - p. 1...|$|R
40|$|This paper {{describes}} {{the conversion of}} <b>nested</b> loop <b>programs</b> into single assignment forms. The <b>nested</b> loop <b>programs</b> may contain the integer operators: integer division, floor, ceil,and modulo, in expressions and the stride, or step size, of for loops may be greater than one. The programs may be parametrized but must have static control. The conversion is done completely automatical by the tool ######. The output of HiPars is a single assignment program (SAP) and a dependence graph (DG). The description of the dependence graph is based on linearly bounded lattices. We will show {{the relation between the}} integer division operators in the SAP and linearly bounded lattices in the corresponding DG. KEYWORDS. <b>Nested</b> loop <b>programs,</b> data dependencies, single assignment programs, linearly bounded lattices. ...|$|R
5000|$|Dengue Fever Prevention: The Social Duty team {{travels to}} several suburbs and organizes Aedes aegypti {{mosquito}} <b>nest</b> eradication <b>program.</b>|$|R
50|$|The Westport River estuary {{has long}} been known for its wildlife. Deer, coyotes, foxes, and turkeys can all be spotted at {{different}} times along the shore. Ospreys are very prevalent. There were 41 nesting sites confirmed in 1980. Now the population has spread to over 300 statewide, due to the Westport River estuary <b>nesting</b> <b>program.</b> MassWildlife continues to provide technical assistance to monitor a sample of the nesting population to determine productivity.|$|R
50|$|Kahn was the 2010 {{winner of}} the Australian Local Hero Award in {{recognition}} of her work founding OzHarvest, a non-denominational charity that rescues excess food which would otherwise be discarded and distributes the food to charities supporting the vulnerable in Sydney, Newcastle, Adelaide and Brisbane.Kahn was behind {{the creation of the}} <b>NEST</b> <b>program</b> - Nutrition, Education & Sustenance Training which aims to educate vulnerable Australians about nutrition and healthy eating, providing valuable life skills to disadvantaged and marginalised communities.|$|R
40|$|Multimedia applications, {{executed}} by embedded multiprocessor systems, can {{in some cases}} be represented as task graphs, with the tasks containing <b>nested</b> loop <b>programs.</b> The <b>nested</b> loop <b>programs</b> communicate via arrays and can be executed on different processors. Typically an array can be communicated via a circular buffer with a capacity smaller than the array. For such buffers, the communicating <b>nested</b> loop <b>programs</b> have to synchronize and a sufficient buffer capacity needs to be computed. In a circular buffer we use a write and a read window to support rereading, out-of-order reading or writing, and skipping of locations. A cyclo static dataflow model {{is derived from the}} application and used to compute buffer capacities that guarantee deadlock free execution. Our case-study applies circular buffers in a Digital Audio Broadcasting channel decoder application, where the frequency deinterleaver reads according to a non-affine pseudo-random function. For this application, buffer capacities are calculated that guarantee deadlock free execution...|$|R
40|$|In {{this paper}} we discuss the {{sensitive}} discount optimality for Markov decision processes. The n-discount optimality is a refined selective criterion, that is a generalization of the average optimality and the bias optimality. Our approach {{is based on the}} system of <b>nested</b> linear <b>programs.</b> In the last section we provide an algorithm for the computation of the Blackwell optimal policy. The n-discount optimal policies are obtained as by-product of this algorithm. Here we restrict ourselves to the case of completely ergodic Markov decision processes. Key Words: Markov decision processes, sensitive discount optimality, Blackwell optimality, <b>nested</b> linear <b>programs.</b> 1...|$|R
50|$|When {{eggs are}} removed in {{artificial}} pigeon houses, {{the interval between}} reproductive attempts is strongly reduced, which reduces {{the efficiency of the}} method. Dummy egg <b>nesting</b> <b>programs</b> have therefore been tested in some cities with mixed results. There, the eggs are removed and replaced with dummy eggs. The real eggs are then destroyed. Such structures are being used in New York City and also the Melbourne city centre by the Melbourne City Council at Batman Park The loft used in Melbourne is on stilts, with a cage door allowing access from beneath for accessing the structure at night when the pigeons are asleep.|$|R
50|$|The {{well-established}} {{wood duck}} <b>nest</b> box <b>program</b> produces about 2,000 wood duck hatchlings a year. The boxes are prepared {{early in the}} year and checked frequently during nesting season to track hatches and remove non-viable eggs.|$|R
40|$|This {{presentation}} {{documents the}} attempt of the University of Liège (Belgium) {{to establish a}} "pedagogical development continuum" by offering three <b>nested</b> <b>programs,</b> each likely to be credited in the next one, thanks to a single overarching competency framework (the CREER model). At a proper level of intensity, each program builds upon components of SoTL, defined after Potter & Kustra (2011) as: "the systematic study of teaching and learning, using established or validated criteria of scholarship, to understand how teaching (beliefs, behaviours, attitudes, and values) can maximize learning, and/or develop a more accurate understanding of learning, resulting in products that are publicly shared for critique and use by an appropriate community". Peer reviewe...|$|R
40|$|This paper {{presents}} the MatParser tool. MatParser is an array analysis compiler that automatically converts an affine <b>nested</b> loop <b>program</b> {{into a single}} assignment <b>program.</b> The <b>nested</b> loop <b>programs</b> may contain non-linear operators like div/mod/floor/ceil and stepsizes other than one. The {{focus of this article}} is on the software architecture used in MatParser to resolve the data dependencies. Finding that two variables are dependent on each other and at which iteration, is a very computational intensive procedure. MatParser employs a particular linear programming technique to find the data dependencies, based on parametric integer programming (PIP) as proposed by Paul Feautrier. To appreciate the implementation of MatParser, we will explain in this paper in sufficient detail the basics of the linear programming technique used. ...|$|R
40|$|Equilibrium {{logic is}} an {{approach}} to nonmonotonic reasoning that extends the stable model and answer-set semantics for logic programs. In particular, it includes the general case of <b>nested</b> logic <b>programs,</b> where arbitrary Boolean combinations are permitted in heads and bodies of rules, as special kinds of theories. In this paper, we present efficient reductions of the main reasoning tasks associated with equilibrium logic and <b>nested</b> logic <b>programs</b> into quantified propositional logic, an extension of classical propositional logic where quantifications over atomic formulas are permitted. Thus, quantified propositional logic is a fragment of second-order logic, and its formulas are usually referred to as quantified Boolean formulas (QBFs). We provide reductions not only for decision problems, {{but also for the}} central semantical objects of equilibrium logic and <b>nested</b> logic <b>programs.</b> In particular, our encodings map a given reasoning task into some QBF such that the latter is valid precisely in case the former holds. The reasoning tasks we deal with here are the consistency problem, brave reasoning, and skeptical reasoning. Additionally, we also provide encodings for testing equivalence of theories or programs under different notions of equivalence, viz. ordinary, strong, and uniform equivalence. For all considered reasoning tasks, we analyse their computational complexity and give strict complexity bounds. Hereby, our encodings yield uppe...|$|R
40|$|We {{show that}} an {{analogue}} of the domain-theoretic least fixpoint operator {{can be defined}} in a purely set-theoretic framework. It can be formalized in classical higher order logic, serving as a solid foundation for proving termina-tion of (possibly <b>nested)</b> recursive <b>programs</b> {{in a variety of}} mechanized proof systems. 1...|$|R
