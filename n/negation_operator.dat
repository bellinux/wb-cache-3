78|31|Public
2500|$|As for {{the case}} of Alfred Tarski's satisfiability {{relation}} for first-order formulas, {{the positive and negative}} satisfiability relations of the team semantics for dependence logic are defined by structural induction over the formulas of the language. Since the <b>negation</b> <b>operator</b> interchanges positive and negative satisfiability, the two inductions corresponding to [...] and [...] need to be performed simultaneously: ...|$|E
50|$|In Standard ML, the tilde {{is used as}} the prefix for {{negative}} numbers and as the unary <b>negation</b> <b>operator.</b>|$|E
50|$|In Apache mod_jk's uriworkermap.properties format, {{an exclamation}} mark ("!") denotes a <b>Negation</b> <b>operator</b> when {{used as the}} first non blank {{character}} in a line.|$|E
5000|$|In {{set theory}} and some {{electrical}} engineering contexts, <b>negation</b> <b>operators</b> {{can be written}} as an overline above the term or expression to be negated, for example: ...|$|R
40|$|This paper {{presents}} a thorough study of negation in SPARQL. The types of negation supported in SPARQL are identified and their main features discussed. Then, we study the expressive {{power of the}} corresponding <b>negation</b> <b>operators.</b> At this point, we identify a core SPARQL algebra {{which could be used}} instead of the W 3 C SPARQL algebra. Finally, we analyze the <b>negation</b> <b>operators</b> in terms of their compliance with elementary axioms of set theory. Comment: Proc. of the Alberto Mendelzon International Workshop on Foundations of Data Management (AMW' 2016...|$|R
40|$|This {{article has}} one aim, {{to reject the}} claim that {{negation}} is semantically ambiguous. The first section presents the putative incompatibility between truth-value gaps and the truth-schema; the second section presents the motivation for the ambiguity thesis; the third section summarizes arguments against the claim that natural language negation is semantically ambiguous; and the fourth section indicates the problems of an introduction of two distinct <b>negation</b> <b>operators</b> in natural language...|$|R
5000|$|In Typographical Number Theory, negation, i.e. {{the turning}} of a {{statement}} to its opposite, is denoted by the [...] "~" [...] or <b>negation</b> <b>operator.</b> For instance, ...|$|E
5000|$|In {{mathematical}} logic, {{a formula}} is in {{negation normal form}} if the <b>negation</b> <b>operator</b> ( [...] , [...] ) is only applied to variables and the only other allowed Boolean operators are conjunction ( [...] , [...] ) and disjunction ( [...] , [...] ).|$|E
5000|$|... {{arguments}} can {{be combined}} with the following operators: ! - Unary <b>negation</b> <b>operator</b> -a - Binary AND operator -o - Binary OR operator (the [...] operator has higher precedence than the [...] operator) \(Expression\) - Parentheses for grouping must be escaped with a backslash ...|$|E
40|$|Adjoint triples arise as a {{generalization}} of a t-norm and its residuated implication. They are basic operators {{to make the}} calculus in multi-adjoint logic programming, multi-adjoint concept lattices, multi-adjoint fuzzy rough sets and multi-adjoint fuzzy relation equations, providing more flexibility and increasing the range of applications in the setting {{in which they are}} considered. This thesis is focused on the study of the adjoint triples, their properties and applications. Firstly, important properties of adjoint pairs/triples and the algebraic structures associated with these operators, which are called multi-adjoint algebras, have been presented. Later, this work presents an intense comparison among di erent general algebraic structures such as implication triples, sup-preserving aggregations, quantales, u-norms, uninorms and general implications considered in extended-order algebras. This comparative study proves that the use of these algebraic structures, in environments requiring residuated implications, provides particular cases of multi-adjoint algebras. Moreover, adjoint negations are introduced as a new {{generalization of}} residuated negations that satisfy the most signifi cant properties. Besides generalizing this kind of negations, this work shows that adjoint negations generalize, at least, three of the most useful <b>negation</b> <b>operators</b> given in the literature, such as the <b>negation</b> <b>operators</b> introduced by Trillas, the pairs of weak negations presented by Georgescu and Popescu and the <b>negation</b> <b>operators</b> de fined by Della Stella and Guido in the setting of a specifi c extended-order algebra. The last part of the thesis describes a process on how to represent a multi-adjoint logic programming as a multi-adjoint relation equation, which is important in order to use these fuzzy relation equations as a decision support system for fuzzy logic. The solvability of these equations is provided from the theory of Fuzzy Formal Concept Analysis...|$|R
40|$|We propose an {{enhancement}} {{to current}} parsing and transformation systems by leveraging the expressive power of Boolean grammars, a generalization of context-free grammars that adds conjunction and <b>negation</b> <b>operators.</b> In addition to naturally expressing a larger class of languages, Boolean grammars capture multiple parse {{trees of the}} same document simultaneously {{and the ability to}} switch between these parse “views”. In particular, source transformation and reengineering tasks can benefit from parse views by recasting the input text into whichever parse is most suitable for the task at hand...|$|R
40|$|Opinion {{retrieval}} aims {{to tell if}} {{a document}} is positive, neutral or negative on a given topic. Opinion extraction further identifies the document’s supportive and the non-supportive evidence. This paper defines the annotation of opinionated material. The algorithm employs opinion holders, a topic’s conceptual words, sentiment words, opinion <b>operators,</b> and <b>negation</b> <b>operators</b> to recognize opinions. An opinion extraction system is developed and then reflects the major views of selected information sources. The text-based evidence extracted is ready for opinion summarization and opinionated question answering...|$|R
5000|$|As for {{the case}} of Alfred Tarski's satisfiability {{relation}} for first-order formulas, {{the positive and negative}} satisfiability relations of the team semantics for dependence logic are defined by structural induction over the formulas of the language. Since the <b>negation</b> <b>operator</b> interchanges positive and negative satisfiability, the two inductions corresponding to [...] and [...] need to be performed simultaneously: ...|$|E
5000|$|Frege's propositional {{calculus}} {{is equivalent to}} any other classical {{propositional calculus}}, such as the [...] "standard PC" [...] with 11 axioms. Frege's PC and standard PC share two common axioms: THEN-1 and THEN-2. Notice that axioms THEN-1 through THEN-3 only make use of (and define) the implication operator, whereas axioms FRG-1 through FRG-3 define the <b>negation</b> <b>operator.</b>|$|E
5000|$|It is not {{in general}} {{possible}} for a logical system to have a formal <b>negation</b> <b>operator</b> such {{that there is a}} proof of [...] "not" [...] P exactly when there isnt a proof of P see Gödels incompleteness theorems. The BHK interpretation instead takes [...] "not" [...] P to mean that P leads to absurdity, designated , so that a proof of &not;P is a function converting a proof of P into a proof of absurdity.|$|E
40|$|In this paper, we {{extend the}} domains of {{affirmation}} and <b>negation</b> <b>operators,</b> and more important, of triangular (semi) norms and (semi) conorms from the unit interval to bounded partially ordered sets. The fundamental properties of the original operators are proven to be conserved under this extension. This clearly shows that they are essentially based upon order-theoretic notions. Consequently, a rather general order-theoretic invariance study of these operators is undertaken. Also, in a brief algebraic excursion, the notion of weak invertibility of these operators is introduced, and the relation with the order-theoretic concept of residuals is studied. The importance of these results for fuzzy set theory and possibility theory is briefly discussed...|$|R
40|$|Best Student PaperInternational audienceAn {{important}} aspect of interpretability in Fuzzy Linguistic Summaries (FLS) {{is the absence of}} opposition therein, which is not guaranteed by the the current approaches used for their generation, possibly leading to confusion for the end-user. In this paper, we first introduce a 3 -level hierarchy to organise the models of opposition starting from simpler sentences, then enriched with generalised quantifiers and thirdly considering the several <b>negation</b> <b>operators</b> allowed by fuzzy logic. We then introduce a general model of opposition for FLS sentences, which we propose to represent as a 4 ‑dimensional cube. We additionally discuss the antonym property in this analysis framework and prove it for general protoforms...|$|R
40|$|The opinion {{analysis}} task is a {{pilot study}} task in NTCIR- 6. It contains the challenges of opinion sentence extraction, opinion polarity judgment, opinion holder extraction and relevance sentence extraction. The three former are new tasks, and the latter is proven to be tough in TREC. In this paper, we introduce our system for analyzing opinionated information. Several formulae are proposed to decide the opinion polarities and strengths of words from composed characters and then further to process opinion sentences. The <b>negation</b> <b>operators</b> are also taken into consideration in opinion polarity judgment, and the opinion operators are used as clues to find the locations of opinion holders. The performance of the opinion extraction and polarity judgment achieves the f-measure 0. 383 under the lenient metric and 0. 180 under the strict metric, which is the second best of all participants...|$|R
5000|$|Sufficiency is the {{converse}} of necessity. That is to say, given P→Q (i.e. if P then Q), P {{would be a}} sufficient condition for Q, and Q would be {{a necessary condition for}} P. Also, given P→Q, it is true that ¬Q→¬P (where ¬ is the <b>negation</b> <b>operator,</b> i.e. [...] "not"). This means that the relationship between P and Q, established by P→Q, can be expressed in the following, all equivalent, ways: ...|$|E
5000|$|Pure type {{systems were}} {{independently}} introduced by Stefano Berardi (1988) and Jan Terlouw (1989). Barendregt discussed them at length in his subsequent papers. In his PhD thesis, Berardi defined a cube of constructive logics {{akin to the}} lambda cube (these specifications are non-dependent). A modification of this cube was later called the L-cube by Geuvers, who in his PhD thesis extended the Curry-Howard correspondence to this setting. Based on these ideas, Barthe and others defined classical pure type systems (CPTS) by adding a double <b>negation</b> <b>operator.</b> [...] Similarly, in 1998, Tijn Borghuis introduced modal pure type systems (MPTS). Roorda has discussed the application of pure type systems to functional programming; and Roorda and Jeuring have proposed a programming language based on pure type systems.|$|E
5000|$|Integer {{constants}} may be {{specified in}} source code in several ways. Numeric values {{can be specified}} as decimal (example: 1022), octal with zero (0) as a prefix (01776), or hexadecimal with 0x (zero x) as a prefix (0x3FE). A character in single quotes (example: 'R'), called a [...] "character constant," [...] represents the value of that character in the execution character set, with type int. Except for character constants, the type of an integer constant {{is determined by the}} width required to represent the specified value, but is always at least as wide as int. This can be overridden by appending an explicit length and/or signedness modifier; for example, 12lu has type unsigned long. There are no negative integer constants, but the same effect can often be obtained by using a unary <b>negation</b> <b>operator</b> [...] "-".|$|E
40|$|Research in (medical) terminological {{knowledge}} representation is showing an {{increased interest in}} the family of Description Logics (DLs), as they allow for automatic reasoning. This interest is driven {{by an increase in}} demands on the quality of and reasoning ability with medical terminological knowledge. Recent advances in Computer Science have demonstrated the computational decidability and empirical tractability of quite expressive DLs. The question arises whether this expressivity is usable and useful. This paper motivates and describes an exploratory study to address this question by examining the surplus value of individual DL constructors based on an investigation of UMLS terms. Our study indicates that the disjunction and <b>negation</b> <b>operators</b> comprise very valuable extensions to current DLs. The impact of formalization depends on the involved semantic type; "Injury and Poisoning" is one of the semantic types in which a large portion of concepts will benefit from the extensio...|$|R
40|$|The {{well-known}} parsing algorithm for context-free grammars due to Valiant (“General context-free recogni-tion in {{less than}} cubic time”, Journal of Computer and System Sciences, 10 : 2 (1975), 308 – 314) is analyzed and extended to handle the more general Boolean grammars, which are context-free grammars augmented with conjunction and <b>negation</b> <b>operators</b> in the rules. The algorithm reduces construction of a parsing table to computing multiple products of Boolean matrices of various sizes. Its time complexity on an input string of length n is O(BMM(n) log n), where BMM(n) {{is the number of}} operations needed to multiply two Boolean matrices of size n × n, which is O(nω) with ω < 2. 373 as per the current knowledge. A parse tree can be constructed in time MM(n) logO(1) n (where MM(n) is the complexity of multiplying two integer matrices), by applying a known efficient procedure for determining witnesses for Boolean matrix multiplication. The algorithm has a succinct proof of correctness and is ready to be implemented...|$|R
5000|$|Algebraic {{expression}} trees represent expressions {{that contain}} numbers, variables, and unary and binary operators. Some {{of the common}} operators are × (multiplication), ÷ (division), + (addition), − (subtraction), ^ (exponentiation), and - (<b>negation).</b> The <b>operators</b> are contained in the internal nodes of the tree, with the numbers and variables in the leaf nodes. The nodes of binary operators have two child nodes, and the unary operators have one child node.|$|R
5000|$|According to Bertrand Russell's Theory of Descriptions, the <b>negation</b> <b>operator</b> in a {{singular}} sentence can take either wide or narrow scope: we distinguish between [...] "some S is not P" [...] (where negation takes [...] "narrow scope") and [...] "it {{is not the}} case that 'some S is P'" [...] (where negation takes [...] "wide scope"). The problem with this view is that {{there appears to be no}} such scope distinction in the case of proper names. The sentences [...] "Socrates is not bald" [...] and [...] "it {{is not the case}} that Socrates is bald" [...] both appear to have the same meaning, and they both appear to assert or presuppose the existence of someone (Socrates) who is not bald, so that negation takes narrow scope. However, Russell's theory analyses proper names into a logical structure which makes sense of this problem. According to Russell, Socrates can be analysed into the form 'The Philosopher of Greece.' In the wide scope this would then read: It is not the case that there existed a philosopher of Greece who was bald. In the narrow scope it would read the Philosopher of Greece was not bald.|$|E
40|$|A dually nondeterministic {{refinement}} algebra with a <b>negation</b> <b>operator</b> is proposed. The algebra facilitates reasoning about totalcorrectness preserving program transformations and nondeterministic programs. The <b>negation</b> <b>operator</b> is used {{to express}} enabledness and termination operators through a useful explicit definition. As a small application, a property of action systems is proved employing the algebra. A dually nondeterministic refinement algebra without the <b>negation</b> <b>operator</b> is also discussed...|$|E
3000|$|... [...]. An {{equivalent}} definition can {{be obtained}} by requiring that each regulatory function can be written as a composition of Boolean functions that use only the operators AND and OR with one or more inputs. Since the <b>negation</b> <b>operator</b> is not needed, cooperative Boolean networks are exactly the ones without negative interactions.|$|E
40|$|We {{consider}} {{two ways}} of thinking about negation: (i) as a form of complementation (the negation of a proposition p holds exactly in those situations in which p fails), and (ii) as an operation of reversal, or inversion (to deny that p is to say that things are the other way around). These two conceptions are significantly different. But whereas a variety of techniques exist to model the intuition behind conception (i) [...] -from Euler and Venn diagrams to Boolean algebras [...] -conception (ii) has not been given comparable attention. In this note we outline a simple, geometric proposal. In fact, conception (ii) can be modeled in different ways depending on whether one understands the geometric metaphor of an inversion as involving a rotation or a reflection. These two options are equivalent in classical two-valued logic, but they differ significantly in many-valued logics. Here we show that they correspond to two basic sorts of <b>negation</b> <b>operators</b> [...] -familiar from the works of Post and Kleene, respectively [...] -and we provide a simple group-theoretic argument demonstrating their generative power...|$|R
40|$|Previous work on {{quantifier}} scope annotation {{focuses on}} scoping sentences {{with only two}} quantified noun phrases (NPs), where the quantifiers are restricted to a predefined list. It also ignores <b>negation,</b> modal/logical <b>operators,</b> and other sentential adverbials. We present a comprehensive scope annotation scheme. We annotate the scope interaction between all scopal terms in the sentence from quantifiers to scopal adverbials, without putting any restriction {{on the number of}} scopal terms in a sentence. In addition, all NPs, explicitly quantified or not, with no restriction on the type of quantification, are investigated for possible scope interactions. ...|$|R
40|$|One {{difference}} between natural and formal languages is that natural languages are ambiguous in many respects, {{one of them}} being the ambiguity of sentences {{with more than one}} logic operator. In this paper we focus on sentences containing <b>negation</b> and modal <b>operators</b> and their interpretation by 4 - and 5 -years old...|$|R
40|$|Abstract. In this work, {{we propose}} {{a method for}} {{document}} re-ranking, which exploits negative feedback represented by non-relevant documents. The concept of non-relevance is modelled through the quantum <b>negation</b> <b>operator.</b> The evaluation carried out on a standard collection shows {{the effectiveness of the}} proposed method in both the classical Vector Space Model and a Semantic Document Space. ...|$|E
40|$|The {{phenomenon}} of non-adjacency between a proclitic and the verb (known as interpolation in the Romance philological literature) {{was a very}} productive phenomenon in Old Portuguese. During that period, {{a wide variety of}} constituents could be interpolated. The loss of generalized interpolation occurs in 17 th century and from then on only the <b>negation</b> <b>operator</b> não can disrupt proclitic-verb sequences (cf. Martins 1994) ...|$|E
40|$|Several papers relate {{different}} {{alternative approaches}} to classical concept lattices: such as property-oriented and object-oriented concept lattices and the dual concept lattices. Whereas the usual {{approach to the}} latter is via a <b>negation</b> <b>operator,</b> this paper presents a fuzzy generalization of the dual concept lattice, the dual multi-adjoint concept lattice, in which {{the philosophy of the}} multi-adjoint paradigm is applied and no negation on the lattices is needed...|$|E
5000|$|A 2-valued {{morphism}} can {{be interpreted}} as representing a particular state of B. All propositions of B which are mapped to 1 are considered true, all propositions mapped to 0 are considered false. Since this morphism conserves the Boolean <b>operators</b> (<b>negation,</b> conjunction, etc.), the set of true propositions will not be inconsistent but will correspond to a particular maximal conjunction of propositions, denoting the (atomic) state.|$|R
40|$|We {{investigate}} a modal logic of probability with a unary modal operator expressing that a proposition is more probable than its <b>negation.</b> Such an <b>operator</b> is not closed under conjunction, and its modal logic is therefore non-normal. Within this framework we study {{the relation of}} probability with other modal concepts: belief and action. We focus {{on the evolution of}} belief, and propose an integration of revision. For that framework we give a regression algorithm...|$|R
50|$|Symbolic logic {{studies the}} purely formal {{properties}} of strings of symbols. The {{interest in this}} area springs from two sources. First, the notation used in symbolic logic {{can be seen as}} representing the words used in philosophical logic. Second, the rules for manipulating symbols found in symbolic logic can be implemented on a computing machine. Symbolic logic is usually divided into two subfields, propositional logic and predicate logic. Other logics of interest include temporal logic, modal logic and fuzzy logic. The area of symbolic logic called propositional logic, also called propositional calculus, studies the properties of sentences formed from constants and logical operators. The corresponding logical operations are known, respectively, as conjunction, disjunction, material conditional, biconditional, and <b>negation.</b> These <b>operators</b> are denoted as keywords and by symbolic notation.|$|R
