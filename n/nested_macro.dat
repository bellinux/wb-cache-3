1|3|Public
40|$|We {{apply the}} general {{framework}} developed by John et al. in [15] {{to analyze the}} convergence of multi-level methods for mixed finite element discretizations of the generalized Stokes problem using the Scott–Vogelius element. Having in mind that semi-implicit operator splitting schemes for the Navier–Stokes equations lead to this class of problems, we take symmetric stabilization operators into account. The use {{of the class of}} Scott–Vogelius elements seems to be promising since discretely divergence-free functions are pointwise divergence-free. However, to satisfy the Ladyzhenskaya–Babuˇska– Brezzi stability condition, we have to deal in the multi-grid analysis with non-nested families of meshes which are derived from <b>nested</b> <b>macro</b> element triangulations. ...|$|E
40|$|Abstract- In {{an attempt}} to find a method to create a stable, fast, easily {{modified}} replacement for a Microsoft Access database, SAS rapidly became the only choice as a replacement tool. SAS can very quickly be adapted for uses by relative beginners in novel ways to exploit its strengths as a data extraction and manipulation tool. Using PC SAS and SAS CONNECT for ODBC a method was found to convert the most fragile parts of a Rail Car Setoff reporting database. Aimed at the well-informed MS Office user with exposure to interest in SAS, this paper is intended to introduce PC SAS as a tool that does more than just statistical analysis but also is a viable alternate tool to the more traditional programming solutions. This shift from MS Access to SAS cut processing time from over 20 minutes to less than 4 and reduced {{the complexity of the}} database from multiple <b>nested</b> <b>macros</b> down to a single file that is in plain text in easily readable SAS ® code...|$|R
40|$|Under the {{direction}} of DR. PETER CALINGAERT.) ML/I is a general purpose macro language which provides for the user specification of the argument delimiters of a macro, where each macro may have several possible patterns of delimiters. Other language features include <b>nested</b> and recursive <b>macro</b> calls and definitions, macro-time assignment and conditional statements, an extensive macrotime environment, the specification of a possibly variable number of delimiters for each macro, and a method of defining multi-atom macro names and delimiters...|$|R
40|$|While it is {{understood}} that macro variables are referenced in ODS by using MVAR and NMVAR statements, macro programs {{continue to play a}} vital role in ODS. To back up this claim, the TABLETEMPLATE macro that generates a customized table in ODS is reviewed in depth. Looping in the macro eliminates the need for hard coding, and multiple ampersand macro variables (&&f&i) provide the only viable means for inserting data dependent text strings into a table. Pre and Post macro versions of the code are presented to emphasize the role played by macros in ODS. PROBLEM DEFINITION To generalize PROC TEMPLATE table definitions, it is recommended that DYNAMIC variables reference structural components such as headers or footers and that MVAR and NMVAR be reserved for constants that can change each time a compiled template is called in a DATA step. However, what if the macro variables you need to define come from the set of unique values in a column from the input data? Furthermore, what if you need a different outcome in a PROC TEMPLATE CELLSTYLE-AS statement for each unique value in the column? In this situation, a reliable table definition requires the assistance of a full-fledged macro with looping capabilities. What the paper describes is an application where an ODS table definition is <b>nested</b> inside the <b>macro</b> TABLETEMPLATE. The table definition uses MVAR and DYNAMIC variables in addition to conventional macro variables with multiple ampersands for managing the CELLSTYLE-AS statement...|$|R

