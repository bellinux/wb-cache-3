19|207|Public
2500|$|There {{are also}} some {{specialty}} dies worth mentioning. [...] Bump dies are designed to move the shoulder of a bottleneck case back just a bit to facilitate chambering. [...] These are frequently {{used in conjunction with}} neck dies, as the bump die itself does not manipulate the neck of the case whatsoever. A bump die can be a very useful tool to anyone who owns a fine shooting rifle with a chamber that is cut to minimum headspace dimensions, as the die allows the case to be fitted to this unique chamber. Another die is the [...] "hand die". [...] A hand die has <b>no</b> <b>threads</b> and is operated—as the name suggests—by hand or by use of a hand-operated arbor press. [...] Hand dies are available for most popular cartridges, and although available as full-length resizing dies, they are most commonly seen as neck sizing dies. [...] These use an interchangeable insert to size the neck, and these inserts come in 1/1000-inch steps so that the user can custom fit the neck of the case to his own chamber or have greater control over neck tension on the bullet.|$|E
60|$|The impostors now {{wanted more}} money, more silk, and more gold {{to use in}} their weaving. They put it all in their own pockets, and there came <b>no</b> <b>threads</b> on the loom, but they went on as they had done before, working at the empty loom. The Emperor soon sent another worthy statesman {{to see how the}} weaving was getting on, and whether the cloth would soon be finished. It was the same with him as the first one; he looked and looked, but because there was nothing on the empty loom he could see nothing.|$|E
5000|$|... <b>no</b> <b>threads</b> or {{multiple}} server processes for handling multiple requests at once ...|$|E
5000|$|... had <b>no</b> <b>thread</b> {{striations}} (fine lines etched onto {{a copper}} encased bullet tip and/or bullet side casing by clothing threads when the bullet first penetrates clothing threads), ...|$|R
5000|$|Single-process {{design with}} only several <b>threads.</b> <b>No</b> {{processes}} or <b>threads</b> started per connection.|$|R
60|$|She {{opened a}} drawer or two, looked over some {{business}} papers, {{and put them}} back again. Her severe face had <b>no</b> <b>thread</b> of relaxation in it, by which any explorer could have been guided to the gloomy labyrinth of her thoughts.|$|R
50|$|Because {{there are}} <b>no</b> <b>threads</b> to become fouled, cam and groove {{couplings}} are popular in moderately dirty environments, such as septic tank pump trucks and chemical / fuel tanker trucks.|$|E
50|$|Slip tip (Luer-slip) {{fittings}} simply {{conform to}} Luer taper dimensions and are pressed together and held by friction (they have <b>no</b> <b>threads).</b> Luer components are manufactured either from metal or plastic {{and are available}} from many companies worldwide.|$|E
50|$|The web has <b>no</b> <b>threads</b> at its center, {{similar to}} most tetragnathid spiders. Most webs are built low above the ground. The spider {{sits at the}} center during the day most of the time. Sometimes they hide at the edge and sense prey {{with the help of}} a {{signaling}} thread.|$|E
30|$|IDLE IDLE {{represents}} a state when a vCPU is not executing any code, and thus voluntarily yields the physical CPU. This state is reached when the QEMU thread emulating a vCPU is scheduled {{out of a}} pCPU, and if <b>no</b> <b>thread</b> other than the idle idle task is scheduled to run on this vCPU in the guest OS (transition 4). On Linux, the purpose of swapper swapper (the idle idle task) is to invoke the scheduler to choose potential threads ready for execution, or to halt the CPU in case <b>no</b> <b>thread</b> is ready to run. The vCPU goes out of this state {{as soon as the}} thread emulating it gets scheduled back on the host (transition 3).|$|R
25|$|When {{the cause}} is destroyed, the effect will no longer exist. For example, cotton cloth {{is the effect of}} the cotton threads, which is the {{material}} cause. Without threads there will be no cotton cloth. Without cotton there will be <b>no</b> <b>thread.</b>|$|R
50|$|The {{benefit of}} this optimistic {{approach}} is increased concurrency: <b>no</b> <b>thread</b> needs {{to wait for}} access to a resource, and different threads can safely and simultaneously modify disjoint parts of a data structure that would normally be protected under the same lock.|$|R
5000|$|To make a {{code block}} synchronized, it is preceded by the [...] keyword {{followed}} by the lock object inside the brackets. When the executing thread reaches the synchronized block, it acquires a mutual exclusion lock, executes the block, then releases the lock. <b>No</b> <b>threads</b> may enter this block until the lock is released. Any non-null reference type {{may be used as}} the lock.|$|E
5000|$|A [...] {{instruction}} {{guarantees that}} the results of predecessor operations are visible to successor operations of other threads or I/O devices. [...] can guarantee the order of combinations of both memory and memory-mapped I/O operations. E.g. it can separate memory read and write operations, without affecting I/O operations. Or, if a system can operate I/O devices in parallel with memory, [...] doesn't force them to wait for each other. A single CPU with <b>no</b> <b>threads</b> may decode [...] as [...]|$|E
50|$|Thrust-collar type MJTs {{are used}} in {{applications}} where {{it is difficult to}} use threaded tensioners, such as on rolling mills where the joint would typically need to be tightened by crane wrenching. Jackbolts push a threadless nut against a retainer ring, which is fitted into a groove and transfers the jacking force to the main bolt or stud. Because there are <b>no</b> <b>threads,</b> they can also be used in press column applications, eliminating the problems and hassles associated with large nut threads.|$|E
50|$|When {{the cause}} is destroyed, the effect will no longer exist. For example, cotton cloth {{is the effect of}} the cotton threads, which is the {{material}} cause. Without threads there will be no cotton cloth. Without cotton there will be <b>no</b> <b>thread.</b>|$|R
50|$|There {{were several}} add-on lenses {{released}} for the Kodak DC20. These included a macro adapter, a telephoto converter, and a wide-angle converter from Tiffen. These were clip-on lenses since the original lens had <b>no</b> <b>thread.</b> There {{was also an}} add-on photo flash unit made by Kodak.|$|R
5000|$|... "This {{means that}} when you wait on a {{condition}} variable, the wait may (occasionally) return when <b>no</b> <b>thread</b> specifically broadcast or signaled that condition variable. Spurious wakeups may sound strange, but on some multiprocessor systems, making condition wakeup completely predictable might substantially slow all condition variable operations. The race conditions that cause spurious wakeups should be considered rare." ...|$|R
5000|$|On {{the same}} day, August 12, Isaac M. Singer {{received}} his first patent on a transverse shuttle machine {{that became a}} formidable competitor. A new partnership was now formed, {{under the name of}} Wheeler, Wilson & Co., and in 1853 the Wheeler & Wilson Manufacturing Co. was organized. On Dec. 19, 1854, Mr. Wilson received US patent 12116 for his [...] "four-motion feed", which the machines of other inventors were forced to adopt. The advantage of his improvements was that the stitching made the strongest possible seam, being exactly even on both sides, with <b>no</b> <b>threads</b> showing above the surface that would be liable to wear oft and cause ripping. The first completed machine—that finished in 1851—sold for $125.|$|E
5000|$|The {{primary purpose}} of the idle process and its threads is to {{eliminate}} what would otherwise be a special case in the scheduler. Without the idle threads, there could be cases when <b>no</b> <b>threads</b> were runnable (or [...] "Ready" [...] in terms of Windows scheduling states). Since the idle threads are always in a Ready state (if not already Running), this can never happen. Thus whenever the scheduler is called due to the current thread leaving its CPU, another thread can always be found to run on that CPU, even if it is only the CPU's idle thread. The CPU time attributed to the idle process is therefore indicative of the amount of CPU time that is not needed or wanted by any other threads in the system.|$|E
50|$|Starting in the 1930s, filters {{were also}} {{made in a}} sizing system known as a series mount. The filters {{themselves}} were round pieces of glass (or occasionally other materials) with <b>no</b> <b>threads.</b> Very early filters had no rims around the glass, but the more common later production filters had the glass mounted in metal rims. To mount the filters on a camera, the filter was placed between two rings; the mount ring either screwed into the lens threads or was slipped over the lens barrel and the retaining ring screws into the mounting ring to hold the filter in place. The series designations are generally written as Roman numerals, I to IX, though {{there are a few}} sizes not written that way, such as Series 4.5 and Series 5.5. Most Series filter sizes are now obsolete, production having ceased by the late 1970s. However, Series 9 became a standard of the motion picture industry and Series 9 filters are still produced and sold today, particularly for professional motion picture cinematography.|$|E
50|$|All {{threaded}} or press-fit jewelry {{must have}} internal tapping (<b>no</b> screw <b>threads</b> on posts).|$|R
5000|$|The {{specifications}} for zinc flake coatings are defined in international standard ISO 10683 {{and also in}} European standard EN 13858. ISO 10683 sets out the requirements for zinc flake coatings for threaded fasteners and EN 13858 describes the requirements for zinc flake coatings for fasteners with <b>no</b> <b>thread</b> and for other parts as well. There are three groups of zinc flake coatings: ...|$|R
5000|$|Idle: {{the lowest}} {{priority}} thread that only runs when <b>no</b> other <b>thread</b> {{is ready to}} execute.|$|R
5000|$|There {{are also}} some {{specialty}} dies worth mentioning. Bump dies are designed to move the shoulder of a bottleneck case back just a bit to facilitate chambering. These are frequently {{used in conjunction with}} neck dies, as the bump die itself does not manipulate the neck of the case whatsoever. A bump die can be a very useful tool to anyone who owns a fine shooting rifle with a chamber that is cut to minimum headspace dimensions, as the die allows the case to be fitted to this unique chamber. Another die is the [...] "hand die". A hand die has <b>no</b> <b>threads</b> and is operated—as the name suggests—by hand or by use of a hand-operated arbor press. Hand dies are available for most popular cartridges, and although available as full-length resizing dies, they are most commonly seen as neck sizing dies. These use an interchangeable insert to size the neck, and these inserts come in 1/1000-inch steps so that the user can custom fit the neck of the case to his own chamber or have greater control over neck tension on the bullet.|$|E
40|$|Proof-carrying code (PCC) is {{a general}} {{framework}} that can, in principle, verify safety properties of arbitrary machine-language programs. Existing PCC systems and typed assembly languages, however, can only handle sequential programs. This severely limits their applicability since many real-world systems use some form of concurrency in their core software. Recently Yu and Shao proposed a logic-based "type" system for verifying concurrent assembly programs. Their thread model, however, is rather restrictive in that <b>no</b> <b>threads</b> can be created or terminated dynamically and no sharing of code is allowed between threads. In this paper, we present a new formal framework for verifying general multi-threaded assembly code with unbounded dynamic thread creation and termination as well as sharing of code between threads. We adapt and generalize the rely-guarantee methodology to the assembly level and show how to specify the semantics of thread "fork" with argument passing. In particular, we allow threads to have different assumptions and guarantees {{at different stages of}} their lifetime so they can coexist with the dynamically changing thread environment. Our work provides a foundation for certifying realistic multi-threaded programs and makes an important advance toward generating proofcarrying concurrent code...|$|E
40|$|Evidence {{is seen in}} Fig. 1 {{that the}} alveoli are lined with a {{continuous}} epithelium. In Fig. 2 there has been extensive shedding of the epithelium and broad sheets of fibrin {{are attached to the}} alveolar wall. On the right the exudate has escaped {{from both sides of the}} alveolar wall and the network of fibrin has begun to appear beneath the epithelium on its upper side. Owing, however, to the fact that the epithelium is still intact, though slightly raised from the surface, no pore has been formed. In Fig. 3 the exudate has found its exit from a very definite point and has been converted into fibrin which radiates into the alveolus. No pore has resulted because the epithelium on the opposite side of the alveolus is still intact. In Fig. 4 the epithelium has been pushed off from diametrically opposite sides of the alveolar wall and a pore has been formed with a thread of fibrin passing from one alveolus to an adjoining alveolus. Pores are as numerous in edema due to mitral stenosis with in sufficiency of the valves as in pneumonia, but there are <b>no</b> <b>threads</b> of fibrin to direct attention to them. This study confirms my previously expressed opinion-pores are not normal, preformed openings...|$|E
50|$|Jennifer, {{waiting in}} Lisen's tower for Prydwen to return, listens to Flidais' {{tale of the}} Wild Hunt and how its randomness, being outside the Weaver's control, gifts the Weaver's creatures with freedom of choice. That wildness also made Maugrim possible; and because Maugrim came from outside the Tapestry there is <b>no</b> <b>thread</b> in it with his name on it, Flidais explains, and so he cannot die.|$|R
40|$|Tie bars {{instead of}} {{threaded}} fasteners make track throwing less likely. Proposed undercarriage for tank or bulldozer has flanged edges to prevent rocks and other road debris from getting caught in track drive and damaging or casting off track. Improved track has <b>no</b> <b>threaded</b> fasteners to be loosened by road shock and vibration. Continuous chain of floating guide bars articulated at web junctions. Pins replace bolted connections. Guide bars and flanges on vehicle keep out stones...|$|R
6000|$|... "Nor do I {{intend to}} be," [...] she said firmly; [...] "unless I {{have to go}} to court <b>no</b> <b>thread</b> of {{mourning}} do I put on. My father behaved like a tyrant to me, and I will not feign a grief at an event which has brought us happiness. Well, Ronald, what do you think had best be done? You and Malcolm have managed so well that we had best leave it for you to decide." ...|$|R
40|$|A 3 D {{groundwater}} {{model is}} developed, {{for the protection}} and remediation of any environmental contamination problem that may be occurred in the east of Euphrates River. The groundwater flow pattern is found from the northern-west toward sothern-east; therefore it is found there are no threats of any groundwater contamination coming from the East on the most densified populated area that located between the Euphrates and Al Hillah Rivers. Experimental test results of the chemical analysis for groundwater dissoluble minerals in the area which is located between Euphrates and Al Hillah Rivers show that their values are fallen within the allowable limits of the World Health Organization (WHO) except that for total dissolved salt (TDS) and acidity and reversely they are exceeded for groundwater in the areas {{to the east of}} Al Hillah River. In this mathematical modeling process, for any environmental pollution problem may be occurred between Euphrates and Al Hillah Rivers, it is found that an extraction a discharge of 3 L/S of groundwater storage {{from the center of the}} polluted area is pumped by a temporary pipeline to be transferred across Al Hillah River and to get rid of by either disposing it directly in the Third River or injecting it in the groundwater to the east of Al Hillah River by a temporary injecting well. These are found the possible hydrogeologic alternative solutions to such environment problem for the protection of the most populated area within the region and consequently, there are <b>no</b> <b>threads</b> for drinking water...|$|E
30|$|Scalability {{and load}} {{balancing}} {{are the two}} major concerns when parallelizing a program [11, 12]. Scalability implies maximum number of threads that can be created for a parallel program. Load balancing {{is concerned with the}} issue of allocating the same amount of load to all the processing elements and ensuring that the execution times of these processors are nearly the same. The main challenge of implementing macroblock-level parallelism is to reduce the idle time among the processors. Processors should wait until the reference macroblocks are encoded except for the first macroblock. The balancing of tasks in the MB level is performed by determining the execution time of each function dynamically using the profiling. We have written a function call in the program, which monitors the threads’ function with their execution times and makes all the threads active without going to idle state by any interruptions during the task execution. Load balancing is further improved by allowing each of the processing to access the structure and load the index of the macroblock that can be encoded by themselves without the need of a coordinator thread. A reference flag is created in the program for each thread to identify the status of the thread. The 0 and 1 statuses of a reference flag will indicate respectively whether the thread is active or not active. Each thread identifies starting and ending positions of its region based on its own thread ID with reference flag. Each thread shall only encode the macroblocks within its own region after all the data dependencies are resolved as shown in Figure 2. However, each thread will perform entropy encoding if there are no macroblocks available for encoding. This idea is to effectively balance the workload among the threads, so that <b>no</b> <b>threads</b> will fall into an idle state. Hence, threads do not {{have to wait for the}} availability of macroblocks to encode within its region. In this way, the balancing of tasks in the MB level is achieved dynamically without going any thread to idle state, which solves the load balance problem.|$|E
40|$|FSW {{is a new}} {{solid-state}} process {{currently being}} investigated for joining aluminum alloys {{that are difficult to}} weld, where there is no perceptible wear of the pin tool throughout the experiment. The present report investigates and examines tool wear in the friction-stir welding of Al 6061 -T 6 and Al 6061 -T 6 containing 20 % (volume) Al 2 O 3 particles, a metal matrix composite (MMC), in order to compare wear optimized tool geometries and corresponding parameters. ^ The weld tool, referred to as pin tool or nib, did not exhibit any measurable wear in the FSW of the 6061 Al alloy even after traversing tens of meters of material. However, the pin tool geometry changed during the FSW of the Al 6061 -T 6 containing 20 % (volume) Al 2 O 3 particles. Tool wear was measured in relation to the original tool by weighing the photograph of the tool and comparing the percentage change relative to the original tool photograph. The maximum wear rate was roughly 0. 64 %/cm at 1000 rpm for the MMC at 1 mm/s traverse speed. The best performance involving the least wear for MMC FSW was observed at a tool rotational speed of 500 rpm and a traverse speed of 3 mm/s; where the corresponding wear rate was 0. 13 %/cm. Optical, scanning and transmission microscopy were used to characterize the microstructures of the base material and weld zone for the MMC confirming the solid phase nature of the technique. The microstructure of the friction stir weld zone shows a characteristic dynamic recrystallization phenomenon that acts as a mechanism to accommodate the super-plastic deformation and facilitates the bonding. Rockwell E hardness profiles for both aluminum alloys were measured from the base metals through the FSW zone near the through-thickness mid-section. ^ In the FSW of Al 6061 containing 20 % (volume) Al 2 O 3 particles, tool wear has been shown to depend primarily on rotational and traverse speeds, with optimum wear occurring at 1000 rpm. However, as the traverse or actual weld speed is increased from 1 mm/s to 11 mm/s, tool wear and tool wear rate decline. The most significant part of this work was the emergence of a self-optimized tool shape after a considerable traverse distance. When these shapes are developed, tool wear becomes negligible and final shape influences the residual weld properties by variations in the residual through-weld hardness profiles at the start of welding process in contrast to the end of welding experiments. A weld-related flow phenomenon in connection with the specific tool geometry during the FSW of MMC samples was observed using various right-hand threaded pin tools and self-optimized tool shape pins. ^ It may be concluded from this study that using a pin with self-optimized shape and <b>no</b> <b>threads</b> can be used successfully to join Al 2 O 3 reinforced aluminum alloys. As a result, the self-optimizing wear phenomena may provide a basis for designing optimized tools for other FSW systems, especially those involving appreciable tool wear or any other applications for which wear resistance is important. (Abstract shortened by UMI.) ...|$|E
50|$|Stack {{overflows}} {{are made}} worse by anything that reduces the effective stack size of a given program. For example, the same program being run without multiple threads might work fine, {{but as soon as}} multi-threading is enabled the program will crash. This is because most programs with threads have less stack space per thread than a program with <b>no</b> <b>threading</b> support. Because kernels are generally multi-threaded, people new to kernel development are usually discouraged from using recursive algorithms or large stack buffers.|$|R
6000|$|... "Mind this!" [...] he went on, {{shaking his}} hands {{at me in}} the vehemence of his agitation. [...] "I hold <b>no</b> <b>thread,</b> in my own mind, between that man Fosco, and the past time which I call back to me for your sake. If you find the thread, keep it to yourself--tell me nothing--on my knees I beg and pray, let me be ignorant, let me be innocent, let me be blind to all the future as I am now!" ...|$|R
5000|$|In fact, the {{solutions}} implied by both problem statements {{can result in}} starvation [...] - [...] the first readers-writers problem may starve writers in the queue, and the second readers-writers problem may starve readers. Therefore, the third readers-writers problem is sometimes proposed, which adds the constraint that <b>no</b> <b>thread</b> shall be allowed to starve; that is, the operation of obtaining a lock on the shared data will always terminate in a bounded amount of time.A solution with fairness for both readers and writers might be as follows: ...|$|R
