46|10000|Public
5000|$|Obtain {{the minimum}} SOP form {{to reduce the}} <b>number</b> <b>of</b> <b>product</b> <b>terms</b> to a minimum.|$|E
5000|$|While {{the number}} of levels here is 3, the total <b>number</b> <b>of</b> <b>product</b> <b>terms</b> and literals reduce [...] because of the sharing of the term B + C.|$|E
5000|$|This fixed output {{structure}} often frustrated designers {{attempting to}} optimize the utility of PAL devices because output structures of different types were often required by their applications. (For example, one could not get 5 registered outputs with 3 active high combinational outputs.) So, in June 1983 AMD introduced the 22V10, a 24 pin device with 10 output logic macrocells. Each macrocell could be configured by the user to be combinational or registered, active high or active low. The <b>number</b> <b>of</b> <b>product</b> <b>terms</b> allocated to an output varied from 8 to 16. This one device could replace all of the 24 pin fixed function PAL devices. Members of the PAL [...] "V" [...] ("variable") series included the PAL16V8, PAL20V8 and PAL22V10.|$|E
40|$|Programmable Logic Array (PLA) adders are {{described}} which petform an addition in one cycle {{with a single}} pass through a PLA and require a reasonable number ofproduct terms for 8 -, an 16 -, or even a 32 -bit adder. The PLA features two-bit input decoders feeding an AND array followed by an OR array whose outputs are pairwise Exclusive-oRed. Carrylook-ahead adder equations, adapted to the PLA to require relatively few <b>product</b> <b>terms,</b> are adjusted for maximum sharing ofproduct <b>terms.</b> The <b>number</b> <b>of</b> unique <b>product</b> <b>terms</b> is a relative measure {{of one of the}} physical dimensions of the PLA. Equations for contiguous sum bits are grouped into strings, each using a common input carry. A procedure optimally assigns sum bits to strings to further minimize the total <b>number</b> <b>of</b> unique <b>product</b> <b>terms.</b> The methods are extended to PLAs with decoders of increased inputs and substantially reduced <b>product</b> <b>terms.</b> They can serve as dedicated macro functions on a chip, using special decoders relevant to adders. As a result, the other PLA dimension comprising the <b>number</b> <b>of</b> outputs from all input decoders increases only moderately, and can even decrease, with larger decoders. Finally, the PLA adder can be further substuntially compressed by splitting the OR array into two parts such that a row of the AND array is shared between two <b>product</b> <b>terms,</b> and OR an array column is shared between two sums <b>of</b> <b>product</b> <b>terms...</b>|$|R
40|$|A novel {{hierarchical}} {{approach is}} proposed to symbolic analysis of large analog circuits. The key {{idea is to}} use a graph-based representation [...] called Determinant Decision Diagram (DDD) [...] to represent the symbolic determinant and cofactors associated with the MNA matrix for each subcircuit block. By exploiting the inherent sharing and sparsity of symbolic expressions, DDD is capable of representing a huge <b>number</b> <b>of</b> symbolic <b>product</b> <b>terms</b> in a canonical and highly-compact manner. Further, it enables cofactoring and sensitivity computation to be performed with time linear in the size of DDD. Experimental results have demonstrated that our method outperforms the best-known existing hierarchical symbolic analyzer SCAPP, and sometimes even numerical simulator SPICE...|$|R
40|$|Abstract: We {{introduce}} an {{implementation of}} a radix 4 dual recoding procedure for the squaring operation <b>of</b> an n-bit <b>number</b> which reduces the <b>number</b> <b>of</b> bit <b>product</b> <b>terms</b> employed in the previously known squaring methods obtained by either Booth radix- 4 recoded multiplication or by radix 2 squaring. Several other squaring algorithms have been developed such as [WSMB 99], [YW 01], and [SNC 01]. Employing the dual recoded radix- 4 procedure for design of a squaring circuit introduces {{a significant reduction in}} power and area. Architecturally, radix- 4 dual recoded squaring uses only the 1 ’s complement representation which allows for a simpler PPG structure as compared to the 2 ’s complement representation required for Booth radix- 4 multiplication...|$|R
5000|$|The GAL22V10 has 12 input pins, and 10 pins {{that can}} be {{configured}} as either inputs or outputs, and exists in various switching speeds, from 25 to 4 ns. Each output is driven by an output-logic macrocell, with an output-enable product term, and a variable <b>number</b> <b>of</b> <b>product</b> <b>terms,</b> ranging from eight to sixteen. Each OLMC may be set to output as inverting or non-inverting, and be placed into either registered or combinatorial mode. In registered mode, each macrocell actively uses a D-flip-flop to hold a state under control of the data input from the logic portion of the macrocell and the rising edge of the clock signal, while in combinatorial mode the flip-flop {{is removed from the}} macrocell and the outputs are driven directly by the logic. In the latter mode, the pin may also dynamically switch between input and output based on the product term. In either mode the pin value is fed back into the array as a product term. Combinations are set using an E2PROM. [...] The output registers can be preloaded into a potentially invalid state for testing by a GAL22V10 programmer. Inputs and outputs include active pull-ups and are transistor-transistor logic compatible due to high-impedance buffers.A user electronic signature section is included for details such as user ID codes, revision IDs, or asset tagging on official Lattice Semiconductor units, as well as a static ES section for compatibility with non-Lattice Semiconductor GAL22V10 units. In addition, a security cell is included which, when set, disallows the retrieval of the array logic from the chip, until a new set of logic is set.|$|E
40|$|An {{algorithm}} is proposed in this paper that finds exact exclusive-or sum-of-products of an arbitrary function, provided the <b>number</b> <b>of</b> <b>product</b> <b>terms</b> is less than eight. If the <b>number</b> <b>of</b> <b>product</b> <b>terms</b> in the minimal expression is more than seven, then the algorithm detects it and heuristically returns near-optimal expressions. The {{algorithm is}} time and space efficient even for functions with many input variables. 1...|$|E
40|$|Abstract An {{algorithm}} is proposed in this pa-per which finds all minimal exclusive-or sum-of-products (ESOP) expressions of an arbitrary func-tion without limitations concerning the polarities of the variables, provided the <b>number</b> <b>of</b> <b>product</b> <b>terms</b> is up to five. If the <b>number</b> <b>of</b> <b>product</b> <b>terms</b> in the minimal expression is more that five, then the al-gorithm detects it. The {{algorithm is}} time efficient even for {{a large number of}} input variables...|$|E
40|$|A graph {{representation}} called Multi-Terminal Determinant Decision Diagrams (MTDDD's) {{is proposed}} for the semisymbolic transfer functions of analog integrated circuits. With multiple numeric terminals (instead of only terminal 1 and terminal 0 in Determinant Decision Diagrams [...] DDD's), MTDDD's can describe naturally numeric coefficients that arise from semi-symbolic analysis, where some circuit parameters are considered symbols {{and the others are}} given as numeric values. Similar to DDD's, MTDDD's are capable of representing a huge <b>number</b> <b>of</b> symbolic/semi-symbolic <b>product</b> <b>terms</b> in a compact manner. An efficient DDD-based algorithm is described to construct MTDDD's. Experimental results have demonstrated that semi-symbolic transfer functions for practical analog circuits like A 741 can be generated {{in less than a minute}} on a Pentium-II 450 MHz PC...|$|R
40|$|In this article, we have shown, {{by means}} of the EXOR Ternary Decision Diagram that the <b>number</b> <b>of</b> literals and <b>product</b> <b>terms</b> <b>of</b> the Fixed Polarity Reed–Muller (FPRM) {{expansions}} can be used to fully classify all Boolean functions in NP equivalent class and NPN equivalent class, respectively. Efficient graph based algorithms to compute the complete weight vectors have been presented. The proof and computation method has led to the derivation of a set of characteristic signatures that has low probability of aliasing when used as the Boolean matching filters in library mapping...|$|R
40|$|A new {{approach}} is proposed to hierarchical symbolic analysis of large analog integrated circuits. It consists of performing symbolic suppression of each subcircuit to its terminals {{in terms of}} subcircuit matrix determinants and cofactors, and applying Cramer's rule to solve symbolically the set of equations at the top level of the circuit hierarchy. The novelty of the proposed approach is to use an annotated, directed and acyclic graph, called Determinant Decision Diagram (DDD), to represent symbolic determinants of subcircuit matrices and cofactors used in subcircuit suppression, as well as symbolic determinants of the top-level circuit matrix and cofactors required in applying Cramer's rule. DDD enables systematically exploiting the inherent sparsity of circuit matrices and the sharing of symbolic expressions. It is capable of representing a huge <b>number</b> <b>of</b> symbolic <b>product</b> <b>terms</b> in a canonical and highly compact manner. The proposed approach is illustrated using a Cauer parameter low [...] ...|$|R
40|$|A {{major problem}} {{associated}} with state assignment procedures for VLSI controllers is obtaining an assignment that produces minimal or near minimal logic. The key item in Programmable Logic Array (PLA) area minimization {{is the number}} of unique product terms required by the design equations. This paper presents a state assignment algorithm for minimizing the <b>number</b> <b>of</b> <b>product</b> <b>terms</b> required to implement a finite state machine using a PLA. Partition algebra with predecessor state information is used to derive a near optimal state assignment. A maximum bound on the <b>number</b> <b>of</b> <b>product</b> <b>terms</b> required can be obtained by inspecting the predecessor state information. The state assignment algorithm presented is much simpler than existing procedures and leads to the same <b>number</b> <b>of</b> <b>product</b> <b>terms</b> or less. An area-efficient PLA structure implemented in a 1. 0 micron CMOS process is presented along with a summary of the performance for a controller implemented using this design procedure...|$|E
40|$|Abstract — This paper {{discusses}} {{reduction of}} the <b>number</b> <b>of</b> <b>product</b> <b>terms</b> in representation of totally symmetric Boolean functions by Sum of Products (SOP) and Fixed Polarity Reed-Muller (FPRM) expansions. The suggested method reduces the <b>number</b> <b>of</b> <b>product</b> <b>terms,</b> correspondingly, the implementation cost of symmetric functions based on these expressions by exploiting Gray decoding of input variables. Although this decoding is a particular example of all possible linear transformation of Boolean variables, it is efficient {{in the case of}} symmetric functions since it provides a significant simplification of SOPs and FPRMs. Mathematical analysis as well as experimental results demonstrate the efficiency of the proposed method. Index Terms — Symmetric function, Gray code, linear transformation, autocorrelation...|$|E
40|$|The paper {{presents}} one {{concept of}} decomposition methods dedicated to PAL-based CPLDs. The proposed approach {{is an alternative}} to the classical one, which is based on two-level minimization of separate single-output functions. The key idea of the algorithm is to search for free blocks that could be implemented in PAL-based logic blocks containing a limited <b>number</b> <b>of</b> <b>product</b> <b>terms.</b> In order to better exploit the <b>number</b> <b>of</b> <b>product</b> <b>terms,</b> two-stage decomposition and BDD-based decomposition are to be used. In BDD-based decomposition methods, functions are represented by Reduced Ordered Binary Decision Diagrams (ROBDDs). The results of experiments prove that the proposed solution is more effective, in terms of the usage of programmable device resources, compared with the classical ones...|$|E
40|$|This paper {{presents}} an efficient method for deriving exact s-expanded symbolic expressions for behavioral modeling of analog circuits. The key {{idea is to}} introduce a graph-based representation called multi-root Determinant Decision Diagram (DDD), where each root represents the symbolic coefficient of a particular power of s. By exploiting sharing and sparsity, a huge <b>number</b> <b>of</b> symbolic <b>product</b> <b>terms</b> can be compactly represented and efficiently manipulated. Experimental results have demonstrated that this method can produce the exact s-expanded-symbolic transfer function for ¯A 741 opamps in several CPU seconds on a UltraSparc-I workstation, {{and the use of}} generated symbolic expression for frequencydomain simulation achieved a speedup of about 50 over SPICE 3 F 5. I. Introduction Symbolic analysis is to calculate the behavior or the characteristic of a circuit in terms of symbolic parameters. Due to its importance in many applications such as optimum topology selection, design space explo [...] ...|$|R
40|$|A {{comparative}} study {{of different types of}} digital multipliers based on the A 2 redundant binary representation is investigated in this paper. Some techniques have been proposed and implemented using different ALTERA Stratix FPGA platforms. The principle is to try to reduce the <b>number</b> <b>of</b> partial <b>products</b> <b>terms</b> to be summed with addition trees. These techniques are based on exploiting the associative and commutative properties of the addition operation. The multiplication was achieved using four schemes which are respectively the trivial scheme, the BRAUN scheme, the BOOTH scheme and finally the Carry-Save Wallace scheme. Two input A 2 - Natural transcoders and one output Natural-A 2 transcoder are deployed to translate between the classical and the new A 2 redundant binary representation. Synthesis results show that the A 2 -BRAUN multiplier requires lessarea than the conventional one. It was also noticed that the A 2 -Wallace multiplier offers better speed performance with respect to others schemes...|$|R
40|$|Approved {{for public}} release; {{distribution}} in unlimited. Several heuristics and algorithms {{have been developed}} to find minimal sum-of-products expressions in binary logic. Most of them use prime implicants during minimization process. An efficient search strategy has been developed for finding minimal sum-of-products expressions for multiple-valued logic (MVL) functions by using the constrained implicants set concept. The search space can be considerably reduced over the only other known exact minimization technique and exhaustive search. The primary goals of this research are to: (1) examine whether the constrained implicant set concept can be efficiently used in binary logic, and; (2) develop a heuristic called the constrained implicant set heuristic (CISH). The general idea of the CISH is to select the minterm with the least implicant cover size and find the implicant with the largest minterm coverage that covers a selected minterm. In this research, the implementation of the CISH is presented, the performance analysis of the CISH is shown by comparing with other heuristics (Maximum Implicant Heuristic, Espresso II) with respect to the average <b>number</b> <b>of</b> the <b>product</b> <b>terms,</b> the average computation time, and the average memory usage. Lieutenant Junior Grade, Turkish Nav...|$|R
40|$|The implementability of {{synchronous}} counters in the Programmable Logic Devices (PLD) {{is discussed}} in this paper. The most commonly used counters are analysed {{from this point of}} view. The expressions for their individual bits are given and the <b>number</b> <b>of</b> <b>product</b> <b>terms</b> is derived to allow to estimate the size of the particular counter which can be implemented in the chosen PLD...|$|E
40|$|We {{propose a}} {{solution}} to the minimization problem of multiple-valued programmable logic arrays (PLA) that uses simulated annealing. The algorithm accepts a sum-of-products expression, divides and recombines the product terms, gradually progressing toward a minimal solution. The input expression can be user-specified or one produced by another heuristic. The process is termed simulated annealing because it has an analog in the statistical mechanical model of annealing in solids. That is, the slow cooling of certain solids results in a state of low energy, a crystalline state rather than an amorphous state that results from fast cooling. In a PLA, the crystalline state is analogous to a realization with a small <b>number</b> <b>of</b> <b>product</b> <b>terms.</b> Unlike recently studied minimization techniques (which are classified as direct cover methods), our technique manipulates product terms directly, breaking them up and joining them in different was while reducing the total <b>number</b> <b>of</b> <b>product</b> <b>terms.</b> Computer- aided design tool, multiple-valued logic, programmable logic array, heuristic minimization technique VLSI design tool[URL]...|$|E
40|$|Abstract- A new {{neural network}} (NN) {{approach}} is proposed {{in this paper}} to estimate the Boolean function (BF) complexity. Large number of randomly generated single output BFs has been used and experimental results show good correlation between the theoretical results and those predicted by the NN model. The proposed model is capable of predicting the <b>number</b> <b>of</b> <b>product</b> <b>terms</b> (NPT) in the BF that gives an indication on its complexity...|$|E
40|$|Abstract A high {{probability}} of detecting errors caused by hardware faults {{is an essential}} property of any fault-tolerant system. VLSI technology makes the use of duplication and matching for error detection practical and attractive. A critical circuit {{in this context is}} a self-testing comparator. Faults in the comparator must be detected so that they do not mask discrepancies between the duplicated modules. This paper discusses the implementation ofcomparators which are self-testing with respect to faults caused by any single physical defect likely to occur inNMOS andCMOS integrated circuits. A new fault model for PLA's is presented. This model reflects several physical defects in VLSI circuits which are not accounted for in previously published models. It is shown that in a self-testing comparator, implemented as a single two-levelNOR-NORPLA, the <b>number</b> <b>of</b> required <b>product</b> <b>terms</b> grows exponentially with the <b>number</b> <b>of</b> input bits. A particular design of a comparator using a single two-levelNOR-NORPLA is discussed. The operation of this comparator under the faults in the fault model is analyzed in detail. The comparator is proven to be self-testing with respect to any likely single fault in the proposed fault model, provided that several guidelines about its physical layout are followed. The use of this comparator as a basic building block of fault-tolerant systems is discussed. Index Terms-Concurrent error detection, duplication and matching, faults in VLSI circuits, MOS PLA fault model, programmable logic array, self-testing comparator, two-rail code checker. I...|$|R
5000|$|The {{resistivity}} of {{the system}} is related to the probability of an electron to propagate between two given points in space. Classical physics assumes that the total probability is just the sum of the probabilities of the paths connecting the two points. However quantum mechanics tells us that to find the total probability we have to sum up the quantum-mechanical amplitudes of the paths rather than the probabilities themselves. Therefore, the correct (quantum-mechanical) formula for the probability for an electron to move from a point A to a point B includes the classical part (individual probabilities of diffusive paths) and a <b>number</b> <b>of</b> interference <b>terms</b> (<b>products</b> <b>of</b> the amplitudes corresponding to different paths). These interference terms effectively make it more likely that a carrier will [...] "wander around in a circle" [...] than it would otherwise, which leads to an increase in the net resistivity. The usual formula for the conductivity of a metal (the so-called Drude formula) corresponds to the former classical terms, while the weak localization correction corresponds to the latter quantum interference terms averaged over disorder realizations.|$|R
40|$|One {{familiar}} with the Euler zeta function, which established the remarkable relationship between the prime and composite numbers, might naturally ponder {{the results of the}} application of this special function in cases where there is no known way to sieve composite <b>numbers</b> out <b>of</b> the <b>product</b> <b>term</b> in this famous equation. Such would be case when an infinite series <b>of</b> <b>numbers</b> to be analyzed are calculated by a polynomial expression that yields successively increasing positive integer values and which has as its input domain the positive integers themselves. In such cases there may not be an intuitive way to eliminate the composite <b>terms</b> from the <b>product</b> <b>term</b> on the right-hand side of the Euler zeta function equation by either scaling a previous prime number calculation or by employing predictable values of the domain of the function which would make future outputs of the polynomial prime. So the best one may be able to hope for in this case is to determine some value to be added or subtracted from unity in the numerator above the <b>product</b> <b>term</b> to make both sides of the equation equal in the hope that that value can be used to predict the <b>number</b> <b>of</b> prime <b>numbers</b> that exist as outputs of the polynomial function for some limit {{less than or equal to}} x of the input domain. Comment: V 3 added a modified version of the big Zeta equation that adapts to integer-valued functions for which the first term generated is not unity. This version also generalizes Theorem 1 to include all integer-valued polynomials, even those which do not generate prime numbers, thus opening up the potential for the M-series to be used to predict other properties of integer-valued polynomial functions. arXiv admin note: substantial text overlap with arXiv: 1510. 0102...|$|R
40|$|This {{publication}} {{is a work}} of the U. S. Government {{as defined}} in Title 17, United States Code, Section 101. As such, it is in the public domain, and under the provisions of Title 17, United States Code, Section 105, may not be copyrighted. Proceedings of the 18 th International Symposium on Multiple-Valued Logic, May 1988, pp. 226 - 236 We compare the performance of three heuristic algorithms [3, 6, 13] for the minimization of sum-of-products expressions realized by the newly developed multiplevalued programmable logic arrays [9]. Heuristic methods are important because exact minimization is extremely time consuming. We compare the heuristics to the exact solution, showing that heuristic methods are reasonably close to minimal. We use as a basis of comparison the average <b>number</b> <b>of</b> <b>product</b> <b>terms</b> over a set of randomly generated functions. All three heuristics produce nearly the same average <b>number</b> <b>of</b> <b>product</b> <b>terms.</b> Although the averages are close, there is surprisingly little overlap among the set of functions where the best realization is achieved. Thus, there is a benefit to applying different heuristics and then choosing the best realization...|$|E
40|$|This {{publication}} {{is a work}} of the U. S. Government {{as defined}} in Title 17, United States Code, Section 101. As such, it is in the public domain, and under the provisions of Title 17, United States Code, Section 105, may not be copyrighted. IEEE Transactions on Computers, C- 38, Jan. 1989, pp. 82 - 98, 1988 While the use of programmable logic arrays in modern logic design is common, little is known about what PLA size provides reasonable coverage in typical applications. We address this question by showing upper and lower bounds on the average <b>number</b> <b>of</b> <b>product</b> <b>terms</b> required in the minimal realization of binary and multiple-valued functions {{as a function of the}} number of nonzero output values. When the number of such values is small, the bounds are nearly the same, and accurate values for the average are obtained. In addition, an upper bound is derived for the variance of the distribution of the <b>number</b> <b>of</b> <b>product</b> <b>terms</b> required in minimal realizations of binary functions. When the number of nonzero values is small, we find that the variance is small, and it follows that most functions require nearly the average <b>number</b> <b>of</b> <b>product</b> <b>terms.</b> The variance, in addition to the upper and lower bounds, allow conclusions to be made about how PLA size determines the set of realizable functions. Although the bounds are most accurate when there are few nonzero values, they are adequate for analyzing commercially available PLA’s, which we do in this paper. Most such PLA’s are small enough that our results can be applied. For example, when the number of nonzero values exceeds some threshold uT, determined by the PLA size, only a small fraction of the functions can be realized. Our analysis shows that for all but one commercially available PLA, the number of nonzero values is a statistically meaningful criteria for determining whether or not a given function is likely to be realized...|$|E
40|$|A new {{approach}} is proposed to generate interpretable symbolic expressions of small-signal characteristics for large analog circuits. The approach {{is based on}} a complete, exact, yet compact representation of symbolic expressions via determinant decision diagrams (DDDs). We show that two key tasks of generating interpretable symbolic expressions — term de-cancellation and term simplification—can be performed in linear time {{in terms of the number}} of DDD vertices. With the number of DDD vertices many-orders-of-magnitude less than the <b>number</b> <b>of</b> <b>product</b> <b>terms,</b> the proposed approach has been shown to be much more efficient than other start-of-the-art approaches...|$|E
40|$|This {{research}} {{presents the}} results of a study on the existence and frequency distribution of the shell primes defined herein as prime numbers that result from the calculation of the "half-shell" of an p-dimensional entity of the form $n^p-(n- 1) ^p$ where power $p$ is prime and base $n$ is the realm of the positive integers. Following the introduction of the shell primes, we will look at the results of a non-sieving application of the Euler zeta function to the prime shell function as well as to any integer-valued polynomial function in general which has the ability to produce prime numbers when power $p$ is prime. One familiar with the Euler zeta function, which established the remarkable relationship between the prime and composite numbers, might naturally ponder the results of the application of this special function in cases where there is no known way to sieve composite <b>numbers</b> out <b>of</b> the <b>product</b> <b>term</b> in this famous equation. Such would be case when an infinite series <b>of</b> <b>numbers</b> to be analyzed are calculated by a polynomial expression that yields successively increasing positive integer values and which has as its input domain the positive integers themselves. In such cases there may not be an intuitive way to eliminate the composite <b>terms</b> from the <b>product</b> <b>term</b> in the Euler zeta function equation by either scaling a previous prime number calculation or by employing predictable values of the domain of the function which would render outputs of the polynomial prime. So the best one may be able to hope for in these cases is to calculate some value to be added or subtracted from unity in the numerator above the <b>product</b> <b>term</b> in the Euler Zeta function to make both sides of that equation equal with the expectation that that value could be used to predict the <b>number</b> <b>of</b> prime <b>numbers</b> that exist as outputs of the polynomial function for some limit {{less than or equal to}} x of the input domain. Comment: Version 5 : Spelling corrections only ("Riemann" on page 5...|$|R
50|$|In {{the real}} world of over 200 nations trading {{hundreds}} <b>of</b> thousands <b>of</b> <b>products,</b> <b>terms</b> <b>of</b> trade calculations can get very complex. Thus, the possibility of errors is significant.|$|R
5000|$|It {{is often}} the case that the {{canonical}} minterm form can be simplified to an equivalent SoP form.This simplified form would still consist of a sum <b>of</b> <b>product</b> <b>terms.</b> However, in the simplified form,it is possible to have fewer <b>product</b> <b>terms</b> and/or <b>product</b> <b>terms</b> that contain fewer variables.For example, the following 3-variable function: ...|$|R
40|$|Abstract — In this paper, an Ant Colony Optimization (ACO) based {{algorithm}} for {{synthesis of}} Multiple-Valued Logic (MVL) functions is proposed. The algorithm is tested using 50000 randomly generated 2 -variable 4 -valued functions. The proposed approach {{was compared to}} the existing direct cover techniques [2][6][7] {{as well as the}} approach proposed in [9]. The results obtained show that the proposed algorithm outperforms other approaches in terms of the average <b>number</b> <b>of</b> <b>product</b> <b>terms</b> required to realize a given MVL function. Keywords — MVL, multi-valued logic, synthesis, and ACO...|$|E
40|$|The paper {{presents}} a new two-step approach to FSM synthesis for PAL-based CPLDs that strives {{to find an}} optimum fit of an FSM {{to the structure of}} the CPLD. The first step, the original state assignment method, includes techniques of twolevel minimization and aims at area minimization. The second step, PAL-oriented multi-level optimization, is a search for implicants that can be shared by several functions. It is based on the graph of outputs. Results of experiments prove that the presented approach is especially effective for PAL-based CPLD structures containing a low <b>number</b> <b>of</b> <b>product</b> <b>terms...</b>|$|E
40|$|Abstract: A new {{approach}} is proposed to generate interpretable symbolic expressions of small-signal characteristics for large analog circuits. The approach {{is based on}} a complete, exact, yet compact representation of symbolic expressions via determinant decision diagrams (DDDs). We show that two key tasks of gener-ating interpretable symbolic expressions — term de-cancellation and term simplification—can be performed in linear time {{in terms of the number}} of DDD vertices. With the number of DDD vertices many-orders-of-magnitude less than the <b>number</b> <b>of</b> <b>product</b> <b>terms,</b> the proposed approach has been shown to be much more efficient than other start-of-the-art approaches. 1...|$|E
30|$|In Table 8, {{the problem}} becomes harder to solve for the {{proposed}} B&B algorithm. In this case, the time of resolution of the B&B algorithm exceeds the proposed time limit onset from four hospitals if the <b>number</b> <b>of</b> <b>products</b> equals 30, and onset from three hospitals when the <b>number</b> <b>of</b> <b>products</b> equals 40. Here, the <b>number</b> <b>of</b> batches is increased and the <b>number</b> <b>of</b> <b>products</b> by batch is decreased.|$|R
30|$|There is no {{inventory}} at the cross-dock {{at the end}} {{of planning}} horizon, so the total <b>number</b> <b>of</b> <b>products</b> unloaded at the cross-dock must be equal to the total <b>number</b> <b>of</b> <b>products</b> reloaded to outbound trucks.|$|R
25|$|Transaction {{specific}} {{factors like}} the nature <b>of</b> the <b>product,</b> <b>terms</b> <b>of</b> repayment, collateral, etc.|$|R
