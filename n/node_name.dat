17|257|Public
5000|$|Channel tables {{select the}} {{outbound}} channel {{on the basis}} of the next-hop domain name, and also encode per-domain-name parameters for the particular channel, such as the UUCP <b>node</b> <b>name</b> or IP address.|$|E
50|$|The Cluster Membership Service (CLM) {{provides}} applications with membership {{information about}} the nodes that have been administratively configured in the cluster configuration (these nodes are also called cluster nodes or configured nodes) and is core to any clustered system. A cluster consists of this set of configured nodes, each with a unique <b>node</b> <b>name.</b>|$|E
50|$|A World Wide <b>Node</b> <b>Name,</b> WWNN, or WWnN, is a World Wide Name {{assigned}} to a node (an endpoint, a device) in a Fibre Channel fabric. It is valid for the same WWNN to be seen on many different ports (different addresses) on the network, identifying the ports as multiple network interfaces of a single network node.|$|E
40|$|Whenever {{multiple}} users modify XML documents concurrently, {{access control}} and synchronization of read and update operations are required. We suggest to define access rights and locks {{at the level}} of <b>node</b> <b>names</b> that are defined in the DTD of the XML document. This allows us to normalize (a subset of) XPath expressions, used e. g. in queries, such that access control and synchronization can be performed {{at the level of}} <b>node</b> <b>names</b> too. Then we show that access control and locking at the level of <b>node</b> <b>names</b> can be solved by the same technique, i. e. the identification of corresponding <b>node</b> <b>names</b> of XPath expressions. Finally, we extend our approach to predicate filters that may be used in XPath expressions for both, access control and synchronization in order to qualify a selected subset of nodes, and present a fast predicate evaluator for these predicates...|$|R
5000|$|... "Paths" [...] {{are often}} formed by {{concatenation}} of <b>node</b> <b>names</b> or <b>node</b> addresses. Example: ...|$|R
5000|$|... (( [...] ,)); no <b>nodes</b> are <b>named</b> (A,B,(C,D)); leaf <b>nodes</b> are <b>named</b> (A,B,(C,D)E)F; all <b>nodes</b> are <b>named</b> (:0.1,:0.2,(:0.3,:0.4):0.5); all but {{root node}} have a {{distance}} to parent (:0.1,:0.2,(:0.3,:0.4):0.5):0.0; {{all have a}} distance to parent (A:0.1,B:0.2,(C:0.3,D:0.4):0.5); distances and leaf names (popular) (A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F; distances and all names ((B:0.2,(C:0.3,D:0.4)E:0.5)F:0.1)A; a tree rooted on a leaf node (rare) ...|$|R
50|$|Each zone {{has its own}} <b>node</b> <b>name,</b> {{access to}} virtual or {{physical}} network interfaces,and storage assigned to it; there is no requirement for a zone to have any minimum amount of dedicated hardware other than the disk storage necessary for its unique configuration. Specifically, {{it does not require}} a dedicated CPU, memory, physical network interface or HBA, although any of these can be allocated specifically to one zone.|$|E
50|$|A WWN may be {{employed}} {{in a variety of}} roles, such as a serial number or for addressability; for example, in Fibre Channel networks, a WWN may be used as a WWNN (World Wide <b>Node</b> <b>Name)</b> to identify an endpoint, or a WWPN (World Wide Port Name) to identify an individual port on a switch. Two WWNs which do not refer to the same thing should always be different even if the two are used in different roles, i.e. a role such as WWPN or WWNN does not define a separate WWN space. The use of burned-in addresses and specification compliance by vendors is relied upon to enforce uniqueness.|$|E
40|$|Abstract. Propose a model {{extraction}} {{approach to}} abstract the DTD document rapidly, and {{to eliminate the}} nested ring in DTD document by using redefining the <b>node</b> <b>name.</b> Map the DTD document that removing ring out to XML document. Analyzes the XQuery query, and does the responding pre-processing, realizes the XQuery program with nested ring structure...|$|E
5000|$|As {{attribute}} <b>nodes</b> <b>named</b> [...] "xmlns" [...] or [...] "xmlns:xxx", {{exactly as}} the namespaces {{are written in}} the source XML document. This is the model presented by DOM.|$|R
3000|$|We first {{note that}} two <b>nodes,</b> <b>named</b> O 1 and O 2, have no direct link but may {{communicate}} through h - 1 relay nodes. This {{gives rise to}} two possibilities, where [...]...|$|R
5000|$|In each tree level, the <b>node</b> is <b>named</b> by its {{position}} in the tree. For example, <b>node</b> h is <b>named</b> 3:0, <b>node</b> i is <b>named</b> 3:1 and <b>node</b> p is <b>named</b> 4:6. For a node at position , it will fill its left routing table by nodes at position [...] for any valid [...] and fill its right routing table by nodes at position [...] for any valid [...]|$|R
40|$|Causal Bayesian Graphs can be {{constructed}} from causal information in text. These graphs can be sparse because the cause or effect event can be expressed in various ways to represent the same information. This sparseness can corrupt inferences made on the graph. This paper proposes to reduce sparseness by merging: equivalent nodes and their edges. This paper presents a number of experiments that evaluates the applicability of node similarity techniques to detect equivalent nodes. The experiments found that techniques that rely upon combination of node contents and structural information are the most accurate strategies, specifically we have employed: 1. <b>node</b> <b>name</b> similarity and 2. combination of <b>node</b> <b>name</b> similarity and common neighbours (SMCN). In addition, the SMCN returns ”better” equivalent nodes than the string matching strategy. São Paulo Research Foundation (FAPESP) (grants 2013 / 12191 - 5, 2011 / 22749 - 8 and 2011 / 20451 - 1...|$|E
30|$|The wmdl_browse (Algorithm 3) and (Algorithm 4) is an {{operation}} which updates the file list available in all pGrid nodes {{in the network}} and displays it in the browse list with pGrid <b>node</b> <b>name.</b> The operation wmdl_cp is also a low level operation, which just simply copies a data between two remote nodes. This operation is done only by the administrator and is triggered when a pGrid Node is removed permanently from the group.|$|E
40|$|Method of and {{device for}} {{querying}} of protected data structured {{in the form}} of a tree. A corresponding tree of node polynomials is constructed such that each node polynomial evaluates to zero for an input equal to an identifier assigned to a <b>node</b> <b>name</b> occurring in a branch of the data tree starting with the node in question. A tree of blinding polynomials and a tree of difference polynomials are constructed such that each polynomial in the tree of node polynomials equals the sum of the corresponding polynomial in the tree of blinding polynomials and the corresponding polynomial in the tree of difference polynomials. The blinding tree is given to a client, the difference tree to a server. By combining the outcomes of the evaluations of the client and the server, it is possible to identify nodes that match a given query...|$|E
5000|$|The blank node {{identifiers}} {{are only}} limited in scope to a serialization {{of a particular}} RDF graph, i.e. the node [...] in the subsequent example does not represent the same node as a <b>node</b> <b>named</b> [...] in any other graph.|$|R
5000|$|Node tests may {{consist of}} {{specific}} <b>node</b> <b>names</b> or more general expressions. In {{the case of}} an XML document in which the namespace prefix [...] has been defined, [...] will find all the [...] elements in that namespace, and [...] will find all elements, regardless of local name, in that namespace.|$|R
50|$|Bouchard's <b>nodes</b> are <b>named</b> after French {{pathologist}} Charles Jacques Bouchard (1837-1915).|$|R
40|$|Abstract — The {{migration}} to wireless network from wired network {{has been a}} universal trend in recent days. Wireless broadcasting is a mechanism for dispersing identical information in the wireless mobile environment. In this paper, we propose an XML broadcasting scheme. The wireless XML data stream consists of sequence of integrated nodes, called G-node. G-node is a unit structure which consists of <b>node</b> <b>name,</b> location path, child index, attribute index, lineage code, Attribute Value List and Text List. An encoding scheme, called Lineage Encoding, is defined to represent the parent-child relationships among XML elements as a sequence of bit-strings, called Lineage Code (V, H). The components of G-node are used to process twig pattern queries at mobile clients efficiently. Twig pattern query involves element selections satisfying complex patterns in tree-structured XML data. Symmetric encryption technique is used for ensuring security at mobile clients. By adopting these techniques mobile clients can retrieve the required data satisfying the given twig pattern query and security is provided so that one mobile client cannot view other mobile clients information...|$|E
40|$|This paper proposes Phoenix, a {{programming}} {{model for}} writing parallel and distributed applications that accommodate dynamically joining/leaving compute resources. In the proposed model, nodes {{involved in an}} application see a large and fixed virtual <b>node</b> <b>name</b> space. They communicate via messages, whose destinations are specified by virtual node names, rather than names bound to a physical resource. We describe Phoenix API and show how it allows a transparent migration of application states, as well as dynamically joining/leaving nodes as its by-product. We also demonstrate through several application studies that Phoenix model is close enough to regular message passing, thus it is a general programming model that facilitates porting many parallel applications/algorithms to more dynamic environments. Experimental results indicate applications that have a small task migration cost can quickly take advantage of dynamically joining resources using Phoenix. Divide-and-conquer algorithms written in Phoenix achieved a good speedup {{with a large number}} of nodes across multiple LANs (120 times speedup using 169 CPUs across three LANs). We believe Phoenix provides a useful programming abstraction and platform for emerging parallel applications that must be deployed across multiple LANs and/or shared clusters having dynamically varying resource conditions...|$|E
40|$|Fi System on a Chip (SoC) named G 2 C 501. This SoC {{includes}} a 32 -bit CPU, crypto accelerator, real-time clock and a versatile sensor interface {{that can serve}} as a standalone host subsystem. The G 2 C 501 goes beyond today’s basic radio frequency identification (RFID) technology to offer intelligent tracking and sensor capabilities that leverage IEEE 802. 11 (Wi-Fi) networks. Due to its support for multiple location technologies, small form factor and ultra-low power consumption, the G 2 C 502 SoC can be integrated into Wi-Fi sensor tags that lower cost of ownership and meet the needs of a variety of industries including consumer electronics, pharmaceuticals, chemical manufacturing, cold chain and more. A battery powered, small size ultra low-power Wi-Fi wireless measurement <b>node</b> <b>name</b> IP Sensor has been built using the G 2 C 501 SoC. Sensors for measurement of temperature, humidity, light, and vibration or motion are currently mounted on the IP Sensor board. The node is able to read a sensor and send data to the network by using an IP-based application protocol such as UDP. This paper describes the new IP Sensor device and gives a programming methodology using LabVIEW. Key-Words:- Wi-Fi sensors, System on a Chip (SoC), ultra-low power, LabVIE...|$|E
50|$|Schmorl's <b>nodes</b> are <b>named</b> for German {{pathologist}} Christian Georg Schmorl (1861-1932).|$|R
5000|$|Marjanović, David, (2002) Re: {{thoughts}} on which <b>nodes</b> to <b>name</b> Dinosaur Mailing List ...|$|R
50|$|Apple {{has moved}} away from using NetInfo towards LDAP, {{particularly}} in Mac OS X Server. http://www.apple.com/pr/library/2003/oct/08pantherserver.html. Mac OS X v10.4 is the last version to support Netinfo. Beginning with Mac OS X v10.5, Netinfo has been completely phased out and replaced by a new local search <b>node</b> <b>named</b> dslocal, which files are located in /var/db/dslocal/ and are standard property list (XML-based) files.|$|R
40|$|STARS (Simple Transmission and Retrieval System) [1], {{originally}} developed as an interface program of COACK (Component Oriented Advanced Control Kernel) [2 - 5] for non-Windows systems, is effective for various control systems. At present, STARS is {{installed in the}} beamline control system at the KEK Photon Factory and {{is reported to be}} useful by the beamline staff. We are still developing various types of client programs for STARS. Recently, we have found that STARS is highly effective for developing the next version of COACK. Here we describe the recent status and progress of STARS and discuss its availability as the core architecture of the COACK system. OVERVIEW OF STARS STARS is a message transferring software for small-scale control systems with TCP/IP sockets, which works on various types of operating systems. It was {{originally developed}} as an interface program of COACK for non-Windows systems. STARS consists of client programs (STARS clients) and a server program (STARS server), and each client is connected to the server via a TCP/IP socket. STARS users can upgrade the system by writing client programs, and STARS clients are able to participate in the system at any time without system stoppage. <b>Node</b> <b>Name</b> and Message Transfer STARS clients and STARS servers handle only text-based messages. Figure 1 shows an example of message transfer on STARS. TCP/I...|$|E
40|$|Fireworks, the event-display {{program of}} CMS, was {{extended}} with an advanced geometry visualization package. ROOT's TGeo geometry {{is used as}} internal representation, shared among several geometry views. Each view is represented by a GUI list-tree widget, implemented as a flat vector to allow for fast searching, selection, and filtering by material type, <b>node</b> <b>name,</b> and shape type. Display of logical and physical volumes is supported. Color, transparency, and visibility flags can be modified for each node or for a selection of nodes. Further operations, like opening of a new view or changing of the root node, can be performed via a context menu. Node selection and graphical properties determined by the list-tree view can be visualized in any 3 D graphics view of Fireworks. As each 3 D view can display any number of geometry views, a user is free to combine different geometry-view selections within the same 3 D view. Node-selection by proximity to a given point is possible. A visual clipping box can be set for each geometry view to limit geometry drawing into a specified region. Visualization of geometric overlaps, as detected by TGeo, is also supported. The geometry visualization package is used for detailed inspection and display of simulation geometry {{with or without the}} event data. It also serves as a tool for geometry debugging and inspection, facilitating development of geometries for CMS detector upgrades and for SLHC...|$|E
40|$|With the {{advancement}} of computer technologiesto faster processors and more memory, the WorldWideWeb,wireless communication, and miniaturization of sensortechnology, {{it is now possible}} to simulate and executeengineering and science laboratory projects on a remotecomputer. With Internet connection, students have access to"virtual laboratories" via the www, experiment-orientedproblems can be now offered without the overhead incurredwhen maintaining a full laboratory. This paper investigatesthe opportunity that a new wireless sensor technologybrings to remote laboratories. G 2 Microsystems of Campbell, California, USA, released in 2007 the first ever ultra-low power Wi-Fi System on a Chip(SoC) named G 2 C 501. This SoC includes a 32 -bit CPU,crypto accelerator, real-time clock and a versatile sensorinterface that can serve as a standalone host subsystem. TheG 2 C 501 goes beyond today’s basic radio frequencyidentification (RFID) technology to offer intelligent trackingand sensor capabilities that leverage IEEE 802. 11 (Wi-Fi) networks. Due to its support for multiple locationtechnologies, small form factor and ultra-low powerconsumption, the G 2 C 502 SoC can be integrated into Wi-Fisensor tags that lower cost of ownership and meet the needsof a variety of industries including consumer electronics,pharmaceuticals, chemical manufacturing, cold chain andmore. A battery powered, small size ultra low-power Wi-Fiwireless measurement <b>node</b> <b>name</b> IP Sensor has been builtusing the G 2 C 501 SoC. Sensors for measurement oftemperature, humidity, light, and vibration or motion arecurrently mounted on the IP Sensor board. The node is ableto read a sensor and send data to the network by using anIP-based application protocol such as UDP. This paper describes the new IP Senso...|$|E
50|$|The circuit file {{contains}} the component netlist, simulation options, analyses statements, and the output control statements. The component netlist comprises {{a list of}} all circuit elements, along with the <b>node</b> <b>names</b> connected to their terminals. The netlist topology is converted into an equivalent matrix which is solved to find the circuit state, and is also used to simulation output file.|$|R
50|$|PSpice employs passive {{convention}} of elements, the first <b>named</b> <b>node</b> {{is taken as}} higher potential. The reference direction of current through the element goes from the first <b>named</b> <b>node</b> to the second i.e., the positive current flows from the first <b>named</b> <b>node</b> (N+) to the second (N-). If the nodes are interchanged, {{the direction of the}} current through the element will be reversed.|$|R
50|$|Osler's <b>nodes</b> are <b>named</b> after Sir William Osler who {{described}} {{them in the}} early 20th century.|$|R
40|$|Bigdata {{handles the}} {{datasets}} which exceeds {{the ability of}} commonly used software tools for storing, sharing and processing the data. Classification of workload is a major issue to the Big Data community namely job type evolution and job size evolution. On the basis of job type, job size and disk performance, clusters are been formed with data <b>node,</b> <b>name</b> node and secondary name node. To classify the workload and to perform the job scheduling, mapreduce algorithm {{is going to be}} applied. Based on the performance of individual machine, workload has been allocated. Mapreduce has two phases for processing the data: map and reduce phases. In map phase, the input dataset taken is splitted into keyvalue pairs and an intermediate output is obtained and in reduce phase that key value pair undergoes shuffle and sort operation. Intermediate files are created from map tasks are written to local disk and output files are written to distributed file system of Hadoop. Scheduling of different jobs to different disks are identified after completing mapreduce tasks. Johnson algorithm is used to schedule the jobs and used to find out the optimal solution of different jobs. It schedules the jobs into different pools and performs the scheduling. The main task to be carried out is to minimize the computation time for entire jobs and analyze the performance using response time factors in hadoop distributed file system. Based on the dataset size and number of nodes which is formed in hadoop cluster, the performance of individual jobs are identified Keywords — hadoop; mapreduce; johnson algorith...|$|E
40|$|Wong Kit-pui. Thesis (M. Phil.) [...] Chinese University of Hong Kong, 1995. Includes bibliographical {{references}} (leaves 117 - 119). ACKNOWLEDGMENT [...] - p. 4 ABSTRACT [...] - p. 6 KEYWORDS [...] - p. 7 Chapter Chapter 1 [...] - INTRODUCTION [...] - p. 9 Chapter Chapter 2 [...] - APPROACH [...] - p. 14 Chapter 2. 1 [...] - Challenges [...] - p. 15 Chapter 2. 2 [...] - Knowledge Representation [...] - p. 16 Chapter 2. 3 [...] - Proposed Information Model [...] - p. 17 Chapter 2. 4 [...] - Restricted Language Set [...] - p. 20 Chapter Chapter 3 [...] - THEORY [...] - p. 26 Chapter 3. 1 [...] - Features [...] - p. 26 Chapter 3. 1. 1 [...] - Superficial Details [...] - p. 30 Chapter 3. 1. 2 [...] - Hidden Details [...] - p. 31 Chapter 3. 2 [...] - Matching Process [...] - p. 36 Chapter 3. 2. 1 [...] - Inexact Match [...] - p. 37 Chapter 3. 2. 2 [...] - An Illustration [...] - p. 38 Chapter 3. 2. 2. 1 [...] - Stage 1 - Query Parsing [...] - p. 39 Chapter 3. 2. 2. 2 [...] - Stage 2 - Gross Filtering [...] - p. 41 Chapter 3. 2. 2. 3 [...] - Stage 3 - Fine Scoring [...] - p. 42 Chapter 3. 3 [...] - Extending Knowledge [...] - p. 46 Chapter 3. 3. 1 [...] - Attributes with Intermediate Closeness [...] - p. 47 Chapter 3. 3. 2 [...] - Comparing Different Entities [...] - p. 48 Chapter 3. 4 [...] - Putting Concepts to Work [...] - p. 50 Chapter Chapter 4 [...] - IMPLEMENTATION [...] - p. 52 Chapter 4. 1 [...] - Overall Structure [...] - p. 53 Chapter 4. 2 [...] - Choosing NL Parser [...] - p. 55 Chapter 4. 3 [...] - Ambiguity [...] - p. 56 Chapter 4. 4 [...] - Storing Knowledge [...] - p. 59 Chapter 4. 4. 1 [...] - Type Hierarchy [...] - p. 60 Chapter 4. 4. 1. 1 [...] - <b>Node</b> <b>Name</b> [...] - p. 61 Chapter 4. 4. 1. 2 [...] - Node Identity [...] - p. 61 Chapter 4. 4. 1. 3 [...] - Operations [...] - p. 68 Chapter 4. 4. 1. 3. 1 [...] - Direct Edit [...] - p. 68 Chapter 4. 4. 1. 3. 2 [...] - Interactive Edit [...] - p. 68 Chapter 4. 4. 2 [...] - Implicit Features [...] - p. 71 Chapter 4. 4. 3 [...] - Database of Captions [...] - p. 72 Chapter 4. 4. 4 [...] - Explicit Features [...] - p. 73 Chapter 4. 4. 5 [...] - Transformation Map [...] - p. 74 Chapter Chapter 5 [...] - ILLUSTRATION [...] - p. 78 Chapter 5. 1 [...] - Gloss Tags [...] - p. 78 Chapter 5. 2 [...] - Parsing [...] - p. 81 Chapter 5. 2. 1 [...] - Resolving Nouns and Verbs [...] - p. 81 Chapter 5. 2. 2 [...] - Resolving Adjectives and Adverbs [...] - p. 84 Chapter 5. 2. 3 [...] - Normalizing Features [...] - p. 89 Chapter 5. 2. 4 [...] - Resolving Prepositions [...] - p. 90 Chapter 5. 3 [...] - Matching [...] - p. 93 Chapter 5. 3. 1 [...] - Gross Filtering [...] - p. 94 Chapter 5. 3. 2 [...] - Fine Scoring [...] - p. 96 Chapter Chapter 6 [...] - DISCUSSION [...] - p. 101 Chapter 6. 1 [...] - Performance Measures [...] - p. 101 Chapter 6. 1. 1 [...] - General Parameters [...] - p. 101 Chapter 6. 1. 2 [...] - Experiments [...] - p. 103 Chapter 6. 1. 2. 1 [...] - Inexact Matching Behaviour [...] - p. 103 Chapter 6. 1. 2. 2 [...] - Exact Matching Behaviour [...] - p. 106 Chapter 6. 2 [...] - Difficulties [...] - p. 108 Chapter 6. 3 [...] - Possible Improvement [...] - p. 110 Chapter 6. 4 [...] - Conclusion [...] - p. 112 REFERENCES [...] - p. 117 APPENDICES [...] - p. 121 Appendix A Notation [...] - p. 121 Appendix B Glossary [...] - p. 123 Appendix C Proposed Feature Slots and Value [...] - p. 126 Appendix D Sample Captions and Queries [...] - p. 128 Appendix E Manual Pages [...] - p. 130 Appendix F Directory Structure [...] - p. 136 Appendix G Imported Toolboxes [...] - p. 137 Appendix H Program Listing [...] - p. 14...|$|E
30|$|First {{we present}} here {{an example of}} the {{implementation}} applied on the mock-up website we used in the experiment. The user goal is, for instance, “Lymphatic System contains immune cells called lymphocytes, which protect our body from antigens. They are produced by lymph <b>nodes.</b> <b>Name</b> at least three locations in the body where lymph nodes are present”. The correct links are Home: Introduction[*]>[*]Circulatory System[*]>[*]Lymphatic System.|$|R
40|$|The WIC Special Site Menu is {{used for}} viewing the virtual food {{instrument}} inventory, opening food instrument boxes, assigning MICR printer <b>node</b> <b>names</b> to virtual voucher stations for printing food instruments and CVVs, viewing voucher audit issuance reports, printing forms alignment food instruments for testing purposes, printing preprinted manual food instruments and CVVs, and viewing the preprinted manual food instrument and CVV number inventory...|$|R
50|$|The basic {{elements}} of TreeFam are gene families that {{can be divided into}} two parts: TreeFam-A and TreeFam-B families. TreeFam-B families are automatically created. They might contain errors given complex phylogenies. TreeFam-A families are manually curated from TreeFam-B ones. Family <b>names</b> and <b>node</b> <b>names</b> are assigned at the same time. The ultimate goal of TreeFam is to present a curated resource for all the families.|$|R
30|$|Wireless sensor {{networks}} (WSN) {{consist of}} autonomous, cooperative sensors spatially deployed over a geographical area, with applications ranging from surveillance [1] and localization systems [2, 3], to environmental monitoring for physical field sensing and disaster prevention [4, 5]. WSN nodes typically acquire {{the data and}} communicate them to a <b>node</b> <b>named</b> fusion center (FC), which stores the sensors’ readings or forwards them through wired network infrastructures for further processing.|$|R
