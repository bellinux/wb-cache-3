1399|175|Public
25|$|Pathak, J., Basu, S., and Honavar, V. (2006). Modeling Web Services by Iterative Reformulation of Functional and <b>Non-Functional</b> <b>Requirements.</b> Proceedings of the International Conference on Service Oriented Computing. Lecture Notes in Computer Science, Berlin: Springer, Vol. 4294, pp.314–326.|$|E
25|$|Software {{structural}} quality {{refers to}} how it meets <b>non-functional</b> <b>requirements</b> that support the delivery of the functional requirements, such as robustness or maintainability. It {{has a lot more}} to do with the degree to which the software works as needed.|$|E
5000|$|<b>Non-functional</b> <b>requirements</b> - {{definition}} of performance requirements ...|$|E
5000|$|The {{quality of}} the source code is a <b>non-functional</b> <b>requirement.</b>|$|R
5000|$|Sufficient network {{bandwidth}} {{may be a}} <b>non-functional</b> <b>requirement</b> of a system. Other examples include: ...|$|R
50|$|User stories rarely include {{performance}} or <b>non-functional</b> <b>requirement</b> details, so <b>non-functional</b> tests (e.g. response time) may be overlooked.|$|R
5000|$|Assess {{the system}} for {{compliance}} with <b>non-functional</b> <b>requirements,</b> ...|$|E
5000|$|Discovering [...] "qualities and constraints" [...] (<b>Non-functional</b> <b>requirements)</b> ...|$|E
5000|$|... #Subtitle level 2: Relation to <b>non-functional</b> <b>requirements</b> {{and quality}} {{attributes}} ...|$|E
5000|$|Of {{the design}} {{specification}} against the requirement specification: Do the architectural design, detailed design and database logical model specifications correctly implement the functional and <b>non-functional</b> <b>requirement</b> specifications? ...|$|R
40|$|With the {{development}} of Internet, web service is used widely. How to choose the web service which can satisfy the <b>non-functional</b> <b>requirement</b> of users is an important problem in web service. To address this problem, this paper presents a web service selection approach based on improved Euclidean distance. It uses the gauss method to normalize the multi-dimension QoS parameters and computes the distance of points in the multidimension QoS space to scale the similarity of QoS properties by introducing weight to Euclidean distance. Then the web service which can satisfy the <b>non-functional</b> <b>requirement</b> of users can be found according to this approach. At last, an application example is used to explain this approach. © 2012 IEEE. University of MelbourneWith {{the development}} of Internet, web service is used widely. How to choose the web service which can satisfy the <b>non-functional</b> <b>requirement</b> of users is an important problem in web service. To address this problem, this paper presents a web service selection approach based on improved Euclidean distance. It uses the gauss method to normalize the multi-dimension QoS parameters and computes the distance of points in the multidimension QoS space to scale the similarity of QoS properties by introducing weight to Euclidean distance. Then the web service which can satisfy the <b>non-functional</b> <b>requirement</b> of users can be found according to this approach. At last, an application example is used to explain this approach. © 2012 IEEE...|$|R
30|$|Requirement debt: {{refers to}} {{trade-offs}} made {{with respect to}} what requirements the development team needs to implement or how to implement them. Examples {{of this type of}} debt are partially implemented requirements or implementations that do not fully satisfy a <b>non-functional</b> <b>requirement</b> [6].|$|R
50|$|Continuous testing {{includes}} the validation of both functional requirements and <b>non-functional</b> <b>requirements.</b>|$|E
5000|$|<b>Non-functional</b> <b>requirements</b> {{are often}} called [...] "quality attributes" [...] of a system. Other terms for <b>non-functional</b> <b>requirements</b> are [...] "qualities", [...] "quality goals", [...] "quality of service requirements", [...] "constraints" [...] and [...] "non-behavioral requirements". Informally these are {{sometimes}} called the [...] "", from attributes like stability and portability. Qualities—that is non-functional requirements—can {{be divided into two}} main categories: ...|$|E
5000|$|... development-time <b>non-functional</b> <b>requirements</b> such as {{maintainability}} and transferability {{defined in}} ISO 25010:2011 standard ...|$|E
40|$|Today’s {{systems have}} various {{communication}} features •  Many security-critical dependencies exist •  Security is a <b>non-functional</b> <b>requirement</b> {{that is difficult}} to evaluate (e. g., metrics, etc.) •  Which security features are necessary in certain domains? It is difficult to design secure systems [Bis 02] Expert knowledge is neede...|$|R
40|$|Abstract This {{literature}} survey is providing briefing over different software component selection methods. This study provides overview of different research papers published in various journals and conferences. This review process includes investigation of various selection methodologies, software evaluation techniques and criteria of evaluation. Result shows that majority of components selection methodologies include functional and <b>non-functional</b> <b>requirement</b> for software component selection...|$|R
40|$|The {{web service}} {{consumer}} requires sometimes a service provider which gives functional and <b>non-functional</b> <b>requirement</b> especially in e-business domain. In this paper, an overview on web services and their qualities are described. We propose a new architecture which permits {{the management of}} QoS, by integrating a new layer in the web service architectureFor further information, please visit this web site...|$|R
5000|$|Elaboration {{delivers}} a working architecture that mitigates the top risks and fulfills the <b>non-functional</b> <b>requirements.</b>|$|E
5000|$|L. Chung, B. Nixon, E. Yu, J. Mylopoulos. <b>Non-functional</b> <b>requirements</b> in {{software}} engineering, Springer, 2000.|$|E
5000|$|Measuring the <b>non-functional</b> <b>requirements</b> {{improves}} the work effort estimation of software development based on functional sizing alone.|$|E
50|$|Any <b>non-functional</b> system <b>requirements</b> (response time, reliability, maintainability, etc.) {{need to be}} {{considered}} at this stage.|$|R
50|$|A {{system may}} be {{required}} to present the user with a display of the number of records in a database. This is a functional requirement. How up-to-date update this number needs to be, is a <b>non-functional</b> <b>requirement.</b> If the number needs to be updated in real time, the system architects must ensure that the system is capable of updating the displayed record count within an acceptably short interval of the number of records changing.|$|R
40|$|The {{primary goal}} of my {{research}} is to develop techniques that enable cost-effectiveness validation of <b>non-functional</b> software <b>requirements.</b> <b>Non-functional</b> software <b>requirements</b> describe how well a system completes the tasks {{it is designed to}} do. For example, the performance of a system, which describes the quality of service it provides in terms of throughput, response time, transit delay, latency, etc., is an important <b>non-functional</b> <b>requirement</b> that software venders must consider. As Google engineers have discovered, people will visit a website less often if it is loading slower than a close competitor by more than 250 milliseconds — literally the blink of an eye. Moreover, four out of five online users will click away if a video stalls while loading [1]. The impending demand for performance, however, is not met by how performance requirements are validated by the industry. Most of the time, the performance of a system is most likely to be assessed {{at the end of the}} development cycle. This could lead to disastrous results if it is revealed at this stage that these quality requirements could not be met by the current architecture without significant rework. An experience from Oracle Corporation suggests that performance validation accounts for an average of 2. 5 % of the total cost of development. However, the cost of fixing poorly performing applications at the end of development cycle is estimated to be 25 % of the total cost of development [2]...|$|R
5000|$|... {{how well}} the system will perform runtime <b>non-functional</b> <b>requirements</b> such as reliability, operability, {{performance}} efficiency, security, compatibility defined in ISO/IEC 25010:2011 standard ...|$|E
50|$|In {{addition}} to functional requirements captured in a use case description, an analyst may include such <b>non-functional</b> <b>requirements</b> as response time, learnability, etc.|$|E
50|$|Non-functional {{requirements}}: <b>Non-functional</b> <b>requirements</b> are {{requirements that}} specify criteria {{that can be}} used to judge the operation of a system, rather than specific behaviors.|$|E
40|$|Abstract. This paper {{presents}} Amelie, {{a service}} oriented framework that sup-ports {{the implementation of}} awareness systems. Amelie adopts the tenets of Re-combinant computing to address an important <b>non-functional</b> <b>requirement</b> for Ambient Intelligence software, namely the heterogeneous combination of ser-vices and components. Amelie is founded upon FN-AAR an abstract model of Awareness Systems which enables the immediate expression and implementa-tion of socially salient requirements, such as symmetry and social translucence. We discuss the framework and show how system behaviours can be specified using the Awareness Mark-up Language AML...|$|R
40|$|Transparency {{is a novel}} <b>non-functional</b> <b>requirement</b> for {{software}} systems. It is acclaimed {{to improve the quality}} of service since it gives users access to information concerning the system's processes, clarifying who is responsible if something goes wrong. Thus, it is believed to support people's right to a secure and private processing of their personal data. We define eight quality metrics for transparency and we demonstrate the usage and the effectiveness of the metrics by assessing transparency on the Microsoft HealthVault, an on-line platform for users to collect, store, and share medical records...|$|R
40|$|Requirements {{traceability}} {{has been}} identified as a quality factor and a characteristic a system should possess and include as a <b>non-functional</b> <b>requirement.</b> Requirements engineering processes should always include methods and tools of maintaining traces and relationships between requirements and product artefacts. To investigate the extent to which requirements traceability is used in software and information technology projects, a theoretical model of requirements traceability was presented in this research. Five organizations were investigated through semi-structured interviews and their requirements tracing practices were compared with the theoretical model. The extent to which organizations apply requirements traceability practices in their projects differs and as a result they were categorised as inactive, dormant and active users in this research. The advent of agile development methods {{is one of the major}} factors affecting requirements traceability practices. Among other recommended areas of further research, there is need for future research to look at how agile development and traditional methods can be implemented together in requirement tracing practices...|$|R
5000|$|In {{system or}} {{software}} development projects, business requirements usually require authority from stakeholders. This typically {{leads to the}} creation or updating of a product, system, or software. The product/system/software requirements usually consist of both functional requirements and <b>non-functional</b> <b>requirements.</b> Although typically defined {{in conjunction with the}} product/system/software functionality (features and usage), <b>non-functional</b> <b>requirements</b> often actually reflect a form of business requirements which are sometimes considered constraints. These could include necessary performance, security, or safety aspects that apply at a business level.|$|E
5000|$|Goal-oriented Requirements Language (GRL), an i*-based {{modeling}} {{language used}} in systems development, {{is designed to}} support goal-oriented modeling and reasoning about requirements especially the <b>non-functional</b> <b>requirements</b> ...|$|E
5000|$|It {{allows you}} to provide equal {{weightage}} to functional and <b>non-functional</b> <b>requirements</b> (e.g. security requirements, platform requirements, etc.), {{which may not be}} possible with other tools.|$|E
40|$|Mixed {{criticality}} {{systems are}} composed {{of a set of}} applications with di erent criticality levels. The interest relies on the possibility of running these applications on a single processor, with advantages on cost, size, weight and energy consumption. The use of partitioning for developing these kinds of systems is a suitable approach. A related issue is how to partition a system. This paper describes an automatic partitioning al- gorithm. It relies on restrictions to state requirements that the system partitioning must meet. They provide great exibility for meeting require- ments derived from the user or from speci c functional and <b>non-functional</b> <b>requirement...</b>|$|R
40|$|More {{and more}} works are {{done on the}} design of the Unified Modeling Language (UML) which is {{designed}} to help us for modeling effective object oriented software, Existing Object-Oriented design methods are not mature enough to capture <b>non-functional</b> <b>requirement</b> such as concurrency, fault tolerance, distribution and persistence of a software approach. Our approach proposed to use aspect-oriented software development (AOSD) mechanisms to solve the issues for interactions of the communication diagram in UML that support only the Object-Oriented mechanisms,thus AOSD allow to design programs that are out of reach of strict Object-Orientation and could possibly improve the structures and implementations. Comment: 6 pager, 7 figures,journa...|$|R
50|$|Portability {{testing is}} the process of {{determining}} the degree of ease or difficulty to which a software component or application can be effectively and efficiently transferred from one hardware, software or other operational or usage environment to another. The test results, defined by the individual needs of the system, are some measurement of how easily the component or application will be to integrate into the environment and these results will then be compared to the software system's <b>non-functional</b> <b>requirement</b> of portability for correctness. The levels of correctness are usually measured by the cost to adapt the software to the new environment compared to the cost of redevelopment.|$|R
