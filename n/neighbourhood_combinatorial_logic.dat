0|139|Public
50|$|An {{alternate}} term is <b>combinatorial</b> <b>logic,</b> {{though this}} usage {{may be considered}} controversial.|$|R
40|$|Transient {{hardware}} faults (Soft-Errors) ! ■ Induced by e. g., radiation, glitches, insufficient {{signal integrity}} ■ Increasingly affecting microcontroller logic Figure 2. 3. : Soft Error Rate per chip for SRAM, latches and logic. The SER of <b>combinatorial</b> <b>logic</b> increases from 10 7 to approximately 10 2, while the SER of SRAM remains on a constant high level through all feature sizes. The plot di⇣erentiates the <b>combinatorial</b> <b>logic</b> elements in distinct pipeline depths. [?] ■ Future hardware designs: Even more performance and parallelism � On {{the price of}} being less and less reliable...|$|R
30|$|The {{unification}} signal {{indicates the}} pipeline stage unification. Since the pipeline register between two adjacent <b>combinatorial</b> <b>logic</b> circuits is inactive or by-passed, the two logic circuits operate {{together as a}} single stage.|$|R
50|$|Because the NAND {{function}} has functional completeness all logic {{systems can}} be converted into NAND gates. This is also true for NOR gates. In principle, any <b>combinatorial</b> <b>logic</b> function can be realized with enough NAND gates.|$|R
50|$|The BDF (Boolean Data Flow) domain can {{be thought}} as a {{generalization}} of the SDF domain. It expands the concept of data flow oriented domains by the possibility to activate or deactivate parts of the model according to <b>combinatorial</b> <b>logic.</b>|$|R
40|$|Nanocrystalline sulfur-doped {{cadmium sulfide}} (CdS) {{prepared}} by microwave synthesis was investigated. Photoelectrochemical and optical characteristics of sulfur-doped CdS exhibit the photoelectrochemical photocurrent switching effect. Depending on the wavelength and applied bias, the anodic and/or cathodic photocurrent was observed. The unusual behaviour of nanocrystalline CdS allowed {{the construction of}} a <b>combinatorial</b> <b>logic</b> system from this material...|$|R
50|$|Microcode can be {{characterized}} as horizontal or vertical, referring primarily to whether each microinstruction controls CPU elements with little or no decoding (horizontal microcode) or requires extensive decoding by <b>combinatorial</b> <b>logic</b> before doing so (vertical microcode). Consequently, each horizontal microinstruction is wider (contains more bits) and occupies more storage space than a vertical microinstruction.|$|R
40|$|Signals for {{controlling}} phase-controlled rectifier circuit are generated by <b>combinatorial</b> <b>logic</b> {{than can be}} implemented in large-scale integration (LSI). LSI circuit saves space, weight, and assembly time compared to previous controls that employ one-shot multivibrators, latches, and capacitors. LSI logic functions by sensing three phases of ac power source and by comparing actual currents with intended currents...|$|R
50|$|Shestakov may be {{considered}} as a forerunner of <b>combinatorial</b> <b>logic</b> and its application (and, hence, Boolean algebra of logic as well) in electric engineering, the 'language' of which is broad enough to simulate non-electrical objects of any conceivable physical nature. He was a pioneer of study of merged continual algebraic logic (parametrical) and topological (structural) models.|$|R
40|$|Current {{trends in}} device scaling {{continue}} to cause an increasing risk of transient faults in microprocessors {{due to high}} energy strikes from radiated particles. In this work, we present a thorough microarchitectural analysis of the e#ects of soft errors on a production-level Verilog implementation of an ARM 926 EJ-S core. We examine the propagation of faults occurring in both sequential state elements and <b>combinatorial</b> <b>logic</b> and note a number of critical distinctions in the error propagation behavior of soft errors occurring at logic gates versus state elements. Further, we exemplify {{the ways in which}} the emerging trend of faults in <b>combinatorial</b> <b>logic</b> will a#ect the scope of the soft error problem, especially in the embedded design space. Also, since this work was conducted on a production-level core, we highlight some of the nuances of soft error e#ects that arise and are specific to production-level designs...|$|R
40|$|CS 1023 is {{the first}} module of a course that runs for 24 weeks over the two semesters of the Junior Freshman {{academic}} year. CS 1023 runs over the first semester. The second module is CS 1024 Digital Logic Design II, for which CS 1023 is a pre-requisite. There are 2 lectures and 1 tutorial per week. In addition, students are divided into four groups that attend practicals on a 2 -week cycle, i. e. each student does one 2 -hour laboratory experiment every fortnight. Attendance at all lectures, tutorials and laboratory sessions is compulsory. Aims The lectures do not assume any prior knowledge of the subject, and build gradually in difficulty {{towards the end of}} the course. Starting with the theoretical foundations of logic, the students learn about <b>combinatorial</b> <b>logic,</b> and how it can be used to construct logic functions that are useful in computing systems. They learn that feedback around <b>combinatorial</b> <b>logic</b> introduces asynchronous sequential behaviour that is the basis for latches and gated latches. The focus is on laying the groundwork for the hardware courses in the second year. Care is taken that the students realize the subject applies to both computer software and hardware. Laboratory experiments reinforce the concepts as well as adding variety and introducing practical elements. Learning Outcomes When students have successfully completed this module they should be able to: Thoroughly analyze and design <b>combinatorial</b> <b>logic</b> functions and asynchrounous sequential logic systems...|$|R
40|$|A finite {{state machine}} (FSM) {{is one of the}} most used digital logic {{applications}} in today's electrical systems. An FSM can be implemented in electrical systems based on programmable logic devices (PLD) or <b>combinatorial</b> <b>logic</b> platforms. Both platforms for a FSM contain advantages and restrictions for the hardware and software design. In regards of coding, FSM can be coded in alternatives styles and programming languages. In this paper we introduce the concept of a self-configuring FSM based on coding data as memory look-up tables. The resulting FSM is then able to self-configure the <b>combinatorial</b> <b>logic</b> of this FSM required to perform the compulsory state sequence. The primary benefit of using memory based look-up table (LUT) FSM is that well established data error correction methods can be applied to protect the FSM behavior, even in the event of single error events (SEE). A high level hardware design of this FSM will be presented in comparison to a PLD FSM implementation...|$|R
40|$|In {{adiabatic}} switching [1], the registers {{as part of}} the circuitry, up to now have not been examined very well. Known approaches will be either only partially adiabatic [2], or integral part of the <b>combinatorial</b> <b>logic,</b> making automatic design hard [8, 5]. They are, however, a crucial part of the design. First, because in the registers information is stored, so here all the problems connected with reversible or irreversible logic have to be taken into account. Second, because the registers will have to shape the input signals for the <b>combinatorial</b> <b>logic,</b> which have to cope with some restrictions. In this paper, two different adiabatic registers will be introduced, which will be able to generate the two needed types of waveforms needed for a combinatorial part using switch logic. All internal nodes of the registers are charged and discharged adiabatically. Since the registers will be used in irreversible logic, diodes are used to erase the stored information with low power losses. 1 IN [...] ...|$|R
50|$|Apple's RIP was {{of its own}} design, and was {{implemented}} using remarkably few ICs, including PALs for most <b>combinatorial</b> <b>logic,</b> with the subsystem timing, DRAM refreshing, and rasterization functions being implemented in very few medium-scale-integration PALs. Apple's competitors (i.e., QMS, NEC, and others) generally used a variation of one of Adobe's RIPs with their large quantity of small-scale-integration (i.e., Texas Instruments' 7400 series) ICs.|$|R
30|$|This section {{presents}} {{experimental results}} of our pipeline synthesis and optimization technique. Three video processing algorithms with relatively large <b>combinatorial</b> <b>logic</b> are selected for pipelining--they are the YCrCb to RGB converter, 8 × 8 1 D IDCT, and Bayer filter. It is assumed that these algorithms constitute a critical path in a larger design, therefore, by pipelining these algorithms, a throughput increase can be obtained for the overall system.|$|R
40|$|<b>Combinatorial</b> <b>logic</b> circuit {{minimization}} is usualy done using Karnaugh’s Map or Bolean equation. This paper {{presents an}} aplication of Firefly Algorithm to design combinational logic circuit {{in which the}} objective function is to minimize {{the total number of}} gates used. Then, the algorithm is benchmarked with other literatures. Result indicates that it able to find optimal solution but further analysis is required for a more complex combinatorial ogic circuit minimizatio...|$|R
40|$|The {{invention}} {{concerns a}} circuit protected against transitory perturbations, comprising a <b>combinatorial</b> <b>logic</b> circuit (10), having {{at least an}} output (A); a circuit (20) generating an error control code for said output, and a storage element (24) provided at said output, controlled by the circuit generating a control code to be transparent when the control code is correct, and to maintain its status when the control code is incorrect...|$|R
40|$|Abstract—This article {{presents}} a formal framework for modeling computational genetic regulatory networks as automata, with multi-threshold protein concentration and combinatorial logical gene-protein interactions. By computing {{the intersection of}} the languages generated by these automata we obtain the complete set of pathways in a gene network. We illustrate the effectiveness of our framework in the modeling of (i) morphogenesis in Arabidopsis and (ii) regulation in phage λ. Keywords-Gene networks, automata, <b>combinatorial</b> <b>logic.</b> I...|$|R
50|$|When digital {{computers}} became available, being general-purpose programmable devices, {{they were}} soon applied to control sequential and <b>combinatorial</b> <b>logic</b> in industrial processes. However these early computers required specialist programmers, and stringent operating environmental control for temperature, cleanliness, and power quality. To meet these challenges this the PLC was developed with several key attributes. It would tolerate the shop-floor environment, it would support discrete input and output, {{and it was}} easily maintained and programmed.|$|R
40|$|We propose an all {{spin state}} element to enable all spin state {{machines}} using spin currents and nanomagnets. We demonstrate via numerical simulations {{the operation of}} a state element a critical building block for synchronous, sequential logic computation. The numerical models encompass Landau-Lifshitz-Gilbert (LLG) nanomagnet dynamics with stochastic models and vector spin-transport in metallic magnetic and non-magnetic channels. Combined with all spin <b>combinatorial</b> <b>logic,</b> the state elements can enable synchronous and asynchronous computing elements. Comment: 21 pages, 6 figure...|$|R
40|$|Abstract—Comparator is {{the most}} {{frequent}} operation in many digital and scientific applications. Here {{in this paper we}} are simulating a low transistor count scalable digital comparator based on parallel prefix tree. Fastest comparators are designed by using the <b>combinatorial</b> <b>logic</b> gates, which results huge number of transistor count, and hence the area is also increased. So here we implemented the comparator using Gate Diffusion Input Cells to reduce the transistor count and hence the area of the circuit...|$|R
40|$|A {{fast and}} robust three-level binary higher order {{statistics}} (HOS) based algorithm for simultaneous voiced/unvoiced detection and pitch estimation of speech signals in coloured noise environments with low SNR is presented. The {{use of the}} three-level binary speech signals dramatically reduces the computational effort required in evaluating the higher order cumulants. The superior performance of the new algorithm over the conventional autocorrelation method using real speech signals is demonstrated. The algorithm can easily be implemented in digital hardware using simple <b>combinatorial</b> <b>logic...</b>|$|R
30|$|Image {{and video}} {{decompression}} systems use two-dimensional (2 D) {{version of the}} IDCT, which is two one-dimensional (1 D) IDCTs arranged serially with a transpose memory element in between. In the context of RTL, the two 1 D IDCTs are normally treated as separate entities; therefore, the critical path {{is defined as the}} longest path of a 1 D IDCT. For a parallel implementation of the 1 D IDCT with large <b>combinatorial</b> <b>logic,</b> pipelining is an interesting strategy for improving data throughput.|$|R
50|$|Adobe's RIPs have, generally, {{been named}} for United States rockets (Atlas, Redstone, etcetera), but Apple's RIP was {{of its own}} design, and was {{implemented}} using remarkably few integrated circuits (ICs), including PALs for most <b>combinatorial</b> <b>logic,</b> with the subsystem timing, DRAM refreshing, and rasterization functions being implemented in very few medium-integration PALs. Apple's competitors (i.e., QMS, NEC, and others) have generally used a variation of one of Adobe's RIPs with their large quantity of low-integration (i.e., Texas Instruments' 7400 series) ICs.|$|R
40|$|As {{processor}} clock frequencies become faster, architecture-level {{design is}} becoming increasingly limited by factors such as on-chip variation. Parameter variation occurs in integrated circuits {{as the result of}} a variety of manufacturing and physical factors. In this paper, we examine the degree to which there is parameter variation on an FPGA. Data were gathered from a <b>combinatorial</b> <b>logic</b> device instantiated on the FPGA. We analyze these data with respect to variance, and provide a confidence interval for the variance and standard deviation. ...|$|R
40|$|International audienceWith {{shrinking}} process technologies, {{the likelihood}} of mid-life logic faults is increasing. In this paper, we present an approach for mitigating the effects of faults in <b>combinatorial</b> <b>logic</b> through the selective addition of redundant logic. This approach {{can be applied to}} a generic digital circuit, protects against multiple fault models and offers a trade-off between area and fault coverage. The results show that fault coverage can be improved by 4 x with an area penalty of 50 % and only two additional layers of logic...|$|R
5000|$|A [...] barrel shifter is {{a digital}} circuit that can shift a data word by a {{specified}} {{number of bits}} {{without the use of}} any sequential <b>logic,</b> only pure <b>combinatorial</b> <b>logic.</b> One way to implement it is as a sequence of multiplexers where the output of one multiplexer is connected to the input of the next multiplexer in a way that depends on the shift distance. A barrel shifter is often used to shift and rotate n-bits in modern microprocessors, typically within a single clock cycle.|$|R
5000|$|The Tseytin transformation, {{alternatively}} written Tseitin transformation {{takes as}} input an arbitrary <b>combinatorial</b> <b>logic</b> circuit and produces a boolean formula in {{conjunctive normal form}} (CNF), which can be solved by a CNF-SAT solver. The length of the formula is linear {{in the size of}} the circuit. Input vectors that make the circuit output [...] "true" [...] are in 1-to-1 correspondence with assignments that satisfy the formula. This reduces the problem of circuit satisfiability on any circuit (including any formula) to the satisfiability problem on 3-CNF formulas.|$|R
40|$|There is a world-wide {{resurgence}} {{of interest in}} asynchronous logic design techniques. After two decades during which clocked logic has imposed its discipline across {{all corners of the}} world of digital logic, the older and more anarchic approach seems poised to make a come-back. Asynchronous design Virtually all digital design today is based on a synchronous approach. The total system is designed as the composition of one or more subsystems where each subsystem is a clocked finite state machine; the subsystem changes from one state to the next on the edges of a regular clock. The state is held in a set of flip-flops (registers), and <b>combinatorial</b> <b>logic</b> is used to derive the new state and outputs from the old state and inputs. The new state is copied through the flip-flops on every rising edge of the clock signal. Special techniques are required whenever a signal crosses into the domain of a particular clock (either from outside the system or from the domain of a different clock within the same system), but otherwise the system behaves in a discrete and deterministic way provided a few rules are followed; these rules include managing the delays of the <b>combinatorial</b> <b>logic</b> so that the flip-flop set up and hold times are met under all conditions...|$|R
30|$|In CAL designs, actions execute in a single-clock cycle (with {{exception}} to while loops and memory access). Large actions, therefore, {{would result in}} a large <b>combinatorial</b> <b>logic</b> and reduces the maximum allowable operating frequency which in turn decreases throughput. The pipeline optimization strategy is to partition this large action into smaller actions that satisfy a required throughput requirement, but with a minimum resource penalty. Finding a pipeline schedule that minimizes resource is a nonlinear optimization problem, where the number of possible solutions increases exponentially with a linear increase of operator mobility.|$|R
40|$|Weinberger arrays (WAs) are an {{alternative}} to progammable logic arrays (PLAs) {{as a method of}} implementing <b>combinatorial</b> <b>logic</b> circuits. Column folding is a technique generally employed in PLAs to save the silicon area by implementing the circuit of two column in the area of one. THis paper describes an algorithm for folding weinberger arrays. The algorithm performs column and row ordering and tehn column folding. The complexity of the algorithm is 0 (n-squared). The algorithm has been tested extensively on WAs that were generated circuits. Experimental results are discussed...|$|R
40|$|Until now, {{there was}} no single {{resource}} for actual digital system design. Using both basic and advanced concepts, Sequential Logic: Analysis and Synthesis offers a thorough exposition of the analysis and synthesis of both synchronous and asynchronous sequential machines. With 25 {{years of experience in}} designing computing equipment, the author stresses the practical design of state machines. He clearly delineates each step of the structured and rigorous design principles that can be applied to practical applications. The book begins by reviewing the analysis of <b>combinatorial</b> <b>logic</b> and Boolean...|$|R
40|$|This note is {{motivated}} by the following problem originating in <b>combinatorial</b> <b>logic.</b> Let /and g be the functions {{on the set of}} positive integers defined by fix) = 3 x and g(x) - [x/ 2], where ifrj denotes the greatest integer {{less than or equal to}} the real number r. Let Y denote the collection of all composite functions formed by repeated applications of / and g. For which positive integers k does there exist h e T such that h(1) = k? For example, if f,g and Y are defined as above, the...|$|R
5000|$|... b = log2(n)In this technique, {{the states}} are {{assigned}} in binary sequence where {{the states are}} numbered starting from binary 0 and up. Clearly, the number of flip-flops used {{is equal to the}} number bits(b). Since Binary encoding uses the minimum number of bits (flip-flops) to encode a machine the flip-flops are maximally utilized. As a result, more <b>combinatorial</b> <b>logic</b> is required to decode each state when compared to One Hot. Requires less number of flip-flops when compared to One hot but hamming distance can be as worse as number of bits(b).|$|R
40|$|We {{present a}} system capable of {{automatically}} solving <b>combinatorial</b> <b>logic</b> puzzles given in (simplified) English. It involves translating the English {{descriptions of the}} puzzles into answer set programming(ASP) and using ASP solvers to provide solutions of the puzzles. To translate the descriptions, we use a lambda-calculus based approach using Probabilistic Combinatorial Categorial Grammars (PCCG) where the meanings of words are associated with parameters {{to be able to}} distinguish between multiple meanings of the same word. Meaning of many words and the parameters are learned. The puzzles are represented in ASP using an ontology which is applicable to a large set of logic puzzles...|$|R
5000|$|In one hot encoding, {{only one}} of the bits of the state {{variable}} is [...] "1" [...] (hot) for any given state. All the other bits are [...] "0". The Hamming distance of this techniques is 2. One hot requires one flip-flop for every state in FSM. As a result, the state machine is already “decoded,” so the state of the machine is determined simply by finding out which flip-flop is active. This encoding technique reduces the width of the <b>combinatorial</b> <b>logic</b> and, as a result, the state machine requires fewer levels of logic between registers, reducing its complexity and increasing its speed.|$|R
