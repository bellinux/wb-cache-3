0|1148|Public
5000|$|The <b>uniform</b> <b>interface</b> {{constraint}} {{is fundamental}} {{to the design of}} any REST service. It simplifies and decouples the architecture, which enables each part to evolve independently. The four constraints for this <b>uniform</b> <b>interface</b> are: ...|$|R
30|$|Interface {{mismatches}} {{can exist}} between the <b>uniform</b> <b>interface</b> and the native database’s capabilities which decrease performance.|$|R
40|$|We {{introduce}} a new approach for RESTful Semantic Web Services called EXPRESS. It aims to exploit the similarities between REST and the Semantic Web, such as realization of resources, self describing representations, and <b>uniform</b> <b>interfaces.</b> EXPRESS is straightforward and systematic. It works by identifying resources in ontologies and provides them with a <b>uniform</b> <b>interface.</b> We also discuss other RESTful and non-RESTful approaches to Semantic Web Services and show how they relate. 1...|$|R
30|$|Interoperability: at {{the device}} level, the SD should share a <b>uniform</b> <b>interface</b> pattern in {{regardless}} of the heterogeneity of underlying specifications, which means a high interoperability of different SDs.|$|R
5000|$|LLC is a {{software}} component {{that provides a}} <b>uniform</b> <b>interface</b> to the user of the data link service, usually the network layer. LLC may offer three types of services: ...|$|R
5000|$|The uniform {{falls in}} line with the NHS Scotland <b>National</b> <b>Uniform</b> {{standard}}, which is in keeping with the uniform standard described by the <b>National</b> Ambulance <b>Uniform</b> Procurement group in 2016. [...] Amongst cost and comfort considerations, all Scottish Ambulance Service Staff now wear the <b>national</b> <b>uniform</b> which comprises a dark green trouser / shirt combination.|$|R
40|$|Existing {{approaches}} to Semantic Web Services (SWS) require both a domain ontology and a semantic {{description of the}} service. We propose EXPRESS a lightweight approach to SWS. Its simplicity stems from the similarities between REST and the Semantic Web such as resource-realization, self?describing representations, and <b>uniform</b> <b>interfaces.</b> The semantics of a service is elicited from the resource descriptions in the domain ontology and the semantics of the <b>uniform</b> <b>interface,</b> hence {{eliminating the need for}} ontologically describing services. In this poster we describe EXPRESS and show how it represents different service types. It also discusses our ongoing and future work on service discovery and choreograph...|$|R
40|$|Abstract. We present {{architecture}} for e-business {{applications that}} receive requests from a party over the Net, {{to allow the}} applications to make decisions relying on the credentials of the requesting party. Relying party applications will be provided with <b>uniform</b> <b>interface</b> to the credentials of the requesting party. This will allow use of simple, widely available credentials {{as well as more}} advanced credentials such as public key certificates, attribute certificates and `Negative` credentials such as certificate revocation lists (CRL). The core of the architecture is a Credential Manager who will provide all credential management functions, including collection of credentials, providing <b>uniform</b> <b>interface</b> to credentials, and extracting semantics relevant to the relying party’s applications. ...|$|R
5000|$|... #Caption: Strasburg (left) {{receiving}} a <b>Nationals</b> <b>uniform</b> from Ryan Zimmerman, August 2009 ...|$|R
5000|$|Uniform {{worn by the}} {{generation}} after 2010: <b>National</b> <b>uniform</b> (every Sunday and Thursday) ...|$|R
40|$|As {{the number}} of IoT devices grows, the {{management}} and configuration of IoT devices becomes crucial in resource constraint networks. It is hard to manage and configure {{a large amount of}} heterogeneous resource constraint IoT devices because people need to know how they connect to each other, what internet-enabled services are available to provide, and how people interact with things through the internet. The thing-centric approach focuses on user experience when engaging things, but the cloud- centric approach switch the focus to IoT services that can process data streams collected from things and applications that help get people joined in the IoT world. To manage IoT populations effectively in a centralized manner, not only does it mean that moving computational power closer to the edge is a way to reduce bandwidth and latency, but it also implies {{that it is necessary to}} build an architecture which can scale and manage tons of connected devices by a <b>uniform</b> <b>interface.</b> In particular, RESTful Web services can provide a <b>uniform</b> <b>interface</b> that operates resources by HTTP methods. For example, users can read and write data by a <b>uniform</b> <b>interface,</b> and a flowerpot can write data and be triggered to water plants by a <b>uniform</b> <b>interface.</b> Thus, in the scope of IoT, embedded middleware can implement <b>uniform</b> <b>interface</b> by REST model. Virtualizing physical things has emerged as a design pattern to build IoT systems. Resource less constraint devices are capable of being virtualized with enough CPU power, memory, networking, but they are more expensive and power consuming. However, resource highly constraint devices take advantage of low energy consumption and cheaper price, but they cannot be virtualized because they do not have ability to even run a single multi-threaded program. Therefore, it is very important to select the right platforms for the right roles. In our case, we use Raspberry Pi 3 as a middleware and Nordic nRF 52832 as a BLE endpoint. In this thesis, a REST-based IoT management system based on Service-Oriented Architecture is built, and the performance of the system has been tested, including the response time of HTTP GET and POST requests of the centralized server in a Fog domain and a script engine onto a BLE-enabled endpoint...|$|R
40|$|All system {{communications}} {{are based}} on a <b>Uniform</b> <b>Interface.</b> Clients traverse links consistent with HATEOS. Generative- all payloads, including generalized next steps, are generated dynamically No Domain Specific Languages, just generalized capabilities from coordinated Resources. A Framework for Situationally-Aware Composite Applications and Emergent Process...|$|R
50|$|Instead, a {{somewhat}} abstruse - but effective - technique {{was chosen to}} provide the necessary data/implementation hiding. This technique uses private void pointers to encapsulate object private data. The void pointers actually point at concrete data structures, but give a <b>uniform</b> <b>interface</b> to the dso.|$|R
5000|$|Integrate {{many kinds}} of {{applications}} (independent from platform, programming language or resource) {{so they can be}} bound together in workflows and processes to work in conjunction. The different interfaces are hidden by the usage of a <b>uniform</b> <b>interface</b> in the Integration Platform (Process Integration).|$|R
30|$|To {{simplify the}} system implementation, HEROS {{provides}} a <b>uniform</b> <b>interface</b> and a tuple-based communication {{mechanism for the}} interactions of system components. Basing upon the concept of parallel language LINDA, HEROS adopts the tuple space and the IN/OUT primitives for the message exchange and interprocess communication (IPC).|$|R
5000|$|... {{categorical}} standards - <b>national,</b> <b>uniform,</b> technology-based {{standards that}} limit {{the discharge of}} pollutants (see Effluent guidelines) ...|$|R
40|$|The Universal Index System (UIS) is {{an index}} {{management}} system {{that uses a}} <b>uniform</b> <b>interface</b> to solve the heterogeneity problem among database management systems. UIS provides an easy-to-use common interface to access all underlying data, but also allows different underlying database management systems, storage representations, and access methods...|$|R
40|$|TogoWS {{provides}} an <b>uniform</b> <b>interface</b> to {{access to the}} popular databases like DDBJ, PDBJ, KEGG, NCBI, EBI, UCSC. Users can perform search, get, and format conversion for many kind of database entries. This service aims to be provided {{as a tool for}} researchers/engineers who write programming language to develop systems...|$|R
5000|$|<b>Uniform</b> Driver <b>Interface</b> (UDI) - a {{cross-platform}} {{driver interface}} project ...|$|R
25|$|Some compilers for {{relatively}} low-level languages, such as Pascal or C, allow the programmer to embed assembly language {{directly in the}} source code. Programs using such facilities can then construct abstractions using different assembly language on each hardware platform. The system's portable code can then use these processor-specific components through a <b>uniform</b> <b>interface.</b>|$|R
50|$|Apache Tuscany also {{implements}} Service Data Objects (SDO) {{which provides}} a <b>uniform</b> <b>interface</b> for handling different forms of data, including XML documents, that can exist in a network of services and provides the mechanism for tracking changes. Tuscany supports the SCO and the SDO (2.01 for C++ / 2.1 for Java) specification.|$|R
50|$|Some compilers for {{relatively}} low-level languages, such as Pascal or C, allow the programmer to embed assembly language {{directly in the}} source code. Programs using such facilities can then construct abstractions using different assembly language on each hardware platform. The system's portable code can then use these processor-specific components through a <b>uniform</b> <b>interface.</b>|$|R
40|$|Object-stacking is a {{model for}} {{structuring}} object based systems. The main feature of object-stacking is that layers of objects with a <b>uniform</b> <b>interface</b> are constructed, and the functions of these objects are integrated. The effectiveness of object-stacking has been shown for file systems of distributed operating systems. This paper presents {{the application of the}} object-stacking model to the World-Wide Web, an information exploring/providing system on the Internet. Objectstacking gives powerful tools to information providers who use the World-Wide Web. This paper describes the implementation method of object-stacking in the WorldWide Web. This paper proposes the new concepts of demand stacking, virtual stackable objects, and pointer swizzling in the World-Wide Web. 1 Introduction Object-stacking {{is a model}} for structuring object-based systems[10][11]. The main feature of object-stacking is that layers of objects with a <b>uniform</b> <b>interface</b> are constructed, and the functions of these obje [...] ...|$|R
5000|$|... #Caption: Video {{representing}} negative refraction {{of light}} at <b>uniform</b> planar <b>interface.</b>|$|R
40|$|Data {{integration}} systems harmonize {{data from}} multiple sources {{into a single}} coherent representation. The goal is to provide an integrated view over all the data sources of interest {{and to provide a}} <b>uniform</b> <b>interface</b> to access all of these data. The access to the integrated data is usually in the form of querying rathe...|$|R
40|$|The system MARVIn is a {{realisation}} {{of animation}} tools, like geometry editor, animation manager, renderer and texture editor, {{as well as}} utility tools under an <b>uniform</b> user <b>interface</b> bases on OSF/Motif. Purpose of the workshop is a selection of requirements and defining uniform guiding rules for the integration and designing of animation tools under an <b>uniform</b> user <b>interface...</b>|$|R
40|$|Abstract. Existing {{approaches}} to Semantic Web Services (SWS) require a domain ontology and a semantic {{description of the}} service. In the case of lightweight SWS approaches, such as SAWSDL, service description is achieved by semantically annotating existing web service interfaces. Other approaches such as OWL-S and WSMO describe services in a separate ontology. So, existing approaches separate service description from domain description, therefore increasing design efforts. We propose EXPRESS a lightweight approach to SWS that requires the domain ontology definition only. Its simplicity stems from the similarities between REST and the Semantic Web such as resource realization, self describing representations, and <b>uniform</b> <b>interfaces.</b> The semantics of a service is elicited from a resource’s semantic description in the domain ontology and the semantics of the <b>uniform</b> <b>interface,</b> hence {{eliminating the need for}} ontologically describing services. We provide an example that illustrates EXPRESS and then discuss how it compares to SA-REST and WSMO...|$|R
50|$|The Patient Protection and Affordable Care Act, {{signed into}} law March 23, 2010, {{includes}} a provision that creates a <b>national,</b> <b>uniform</b> nutrition-disclosure standard for food service establishments.|$|R
30|$|The {{virtual file}} system (VFS) {{provides}} abstractions for applications (processes) to access storage devices via system calls. The calls include a file descriptor {{and the location}} [10, 13, 14]. VFS locates and determines the storage device {{as well as the}} file system hosting the data, starting from a relative location. VFS provides an <b>uniform</b> <b>interface</b> to access multiple file systems [15].|$|R
40|$|This paper {{presents}} {{the outline of}} a <b>uniform</b> <b>interface</b> mechanism for activating different kinds of modules, e. g. processes, monitors, and pro-cedures. The usefulness of such an interface in the design of modules and in the tuning of a system is discussed. The overheads involved in using it are explained, together with some implications that its general use has on the system structure...|$|R
50|$|Papers is a {{reference}} management software for Mac OS X and Windows, used to manage bibliographies and references when writing essays and articles. It is primarily used to organize references {{and maintain a}} library of PDF documents and also provides a <b>uniform</b> <b>interface</b> for document repository searches, metadata editing, full screen reading {{and a variety of}} ways to import and export documents.|$|R
40|$|Nowadays complex {{distributed}} applications are often built {{on top of}} autonomous functional entities called Web services. There exist various heterogeneous technological domains that Web services can belong to. The used protocols and programming models may differ vastly from the ones used in other domains. This fact poses a challenge to developers that want to create service compositions incorporating services from different technological domains. Developing such a composition requires knowledge about the involved data formats, protocols and other technology specific details of the involved services. This diploma thesis will firstly present a concept that provides a model for <b>uniform</b> <b>interfaces</b> for services stemming from heterogeneous technological domains and, secondly, a model that allows the creation of service compositions from heterogeneous services, utilizing the <b>uniform</b> <b>interface.</b> The concept will also provide means to handle heterogeneous data structures within a service composition and a runtime environment allowing the execution of composite applications which use the underlying data model...|$|R
40|$|In {{the paper}} we address two {{practical}} problems concerning the use of corpora in translation studies. The first stems from the limited resources available for targeted languages and genres within languages, whereas translation researchers and students need: sufficiently large modern corpora, either reflecting general language or specific to a problem domain. The second problem concerns {{the lack of a}} <b>uniform</b> <b>interface</b> for accessing the resources, even when they exist. We deal with the first problem by developing a framework for semiautomatic acquisition of large corpora from the Internet for the languages relevant for our research and training needs. We outline the methodology used and discuss the composition of Internet-derived corpora. We deal with the second problem by developing a <b>uniform</b> <b>interface</b> to our corpora. In addition to standard options for choosing corpora and sorting concordance lines, the interface can compute the list of collocations and filter the results according to user-specified patterns in order to detect language-specific syntactic structures. 1...|$|R
30|$|Service {{providers}} {{take the}} form of internal or external storage and compute services accessible through a CRUD (Create, Read, Update, Delete) REST API. Kindura provides a plug-in Service Connector layer to enable cloud service providers to provide a <b>uniform</b> <b>interface</b> to cloud resources including storage and preservation services. Such services include content replication and bit-integrity checking. Plug-ins adaptors essentially implement the uniform API using the provider API.|$|R
50|$|Apart {{from having}} a basis in {{programming}} language theory, Racket {{was designed to be}} used as a general-purpose language in production systems. Thus, the Racket distribution features an extensive library that covers systems and network programming, web development, a <b>uniform</b> <b>interface</b> to the underlying operating system, a dynamic foreign function interface, several flavours of regular expressions, lexer/parser generators, logic programming, and a complete GUI framework.|$|R
40|$|Motivation: The current data {{explosion}} is intractable without {{advanced data}} management systems. The numerous data sets become really useful {{when they are}} interconnected under a <b>uniform</b> <b>interface</b> [...] -representing the domain knowledge. The SRS has become an integration system for both data retrieval and applications for data analysis. It provides capabilities to search multiple databases by shared attributes and to query across databases fast and efficiently...|$|R
