25|150|Public
50|$|The Hox {{genes are}} “physically linked in four {{chromosomal}} clusters (Hoxa, Hoxb, Hoxc, Hoxd), and their physical {{position on the}} chromosome seems to correlate with {{the time and place}} of expression. For example, the most 3’ HOXC genes (HOXC4, HOXC5) are expressed only in the anterior limbs (wings) in chickens, while the more 5’ genes (HOXC9, HOXC10, HOXC11) are expressed only in the posterior limbs (legs). The intermediate genes (HOXC6, HOXC8) are expressed in both the upper and lower limbs. Within the limb bud, expression also varies {{as a function of the}} position along the anterior-posterior axis. Such is the case with HOXB9, which is most highly expressed next to the AER, and decreases when moving anteriorly to posteriorly, resulting in the least HOXB9 expression next to the posterior ZPA. HOXB9 expression is inversely proportional to the level of Shh expression, which makes sense, as the ZPA secretes Shh.HOXA and HOXD genes for the most part follow <b>nested</b> <b>expression</b> domains, in which they are activated uniformly along the anterior-posterior axis of the limb itself, but not the anterior-posterior axis of the entire body. Whereas HOXC and HOXB genes tend to be restricted to specific limbs, HOXA and HOXD are usually expressed in all limbs. HOXD9 and HOXD10 are expressed in the developing limb throughout the entire anterior-posterior axis, followed by HOXD11, HOXD12, HOXD13, which are each expressed in more posterior regions, with HOXD13 being restricted to only the most posterior regions of the limb bud. As a result, HOXD expression clusters around the posterior ZPA (where HOXD9, 10, 11, 12, and 13 are all expressed), while less expression occurs around the AER, where only HOXD9 and HOXD10 are expressed.|$|E
5000|$|The Hox genes, which {{initially}} {{establish the}} anterior-posterior {{axis of the}} entire embryo, continue {{to participate in the}} dynamic regulation of limb development even after the AER and ZPA have been established. Complex communication ensues as AER-secreted FGFs and ZPA-secreted Shh initiate and regulate Hox gene expression in the developing limb bud. Though many of the finer details remain to be resolved, a number of significant connections between Hox gene expression and the impact on limb development have been discovered. The pattern of Hox gene expression can be divided up into three phases throughout limb bud development, which corresponds to three key boundaries in proximal-distal limb development. The transition from the first phase to the second phase is marked by the introduction of Shh from the ZPA. The transition into the third phase is then marked by changes in how the limb bud mesenchyme responds to Shh signaling. This means that although Shh signaling is required, its effects change over time as the mesoderm is primed to respond to it differently. These three phases of regulation reveal a mechanism by which natural selection can independently modify each of the three limb segments - the stylopod, the zeugopod, and the autopod. [...] The Hox genes are “physically linked in four chromosomal clusters (Hoxa, Hoxb, Hoxc, Hoxd), and their physical position on the chromosome seems to correlate with the time and place of expression. For example, the most 3’ Hoxc genes (HOXC4, HOXC5) are expressed only in the anterior limbs (wings) in chickens, while the more 5’ genes (HOXC9, HOXC10, HOXC11) are expressed only in the posterior limbs (legs). The intermediate genes (HOXC6, HOXC8) are expressed in both the upper and lower limbs. Within the limb bud, expression also varies {{as a function of the}} position along the anterior-posterior axis. Such is the case with HOXB9, which is most highly expressed next to the AER, and decreases when moving anteriorly to posteriorly, resulting in the least HOXB9 expression next to the posterior ZPA. HOXB9 expression is inversely proportional to the level of Shh expression, which makes sense, as the ZPA secretes Shh.HOXA and HOXD genes for the most part follow <b>nested</b> <b>expression</b> domains, in which they are activated uniformly along the anterior-posterior axis of the limb itself, but not the anterior-posterior axis of the entire body. Whereas HOXC and HOXB genes tend to be restricted to specific limbs, HOXA and HOXD are usually expressed in all limbs. HOXD9 and HOXD10 are expressed in the developing limb throughout the entire anterior-posterior axis, followed by HOXD11, HOXD12, HOXD13, which are each expressed in more posterior regions, with HOXD13 being restricted to only the most posterior regions of the limb bud. As a result, HOXD expression clusters around the posterior ZPA (where HOXD9, 10, 11, 12, and 13 are all expressed), while less expression occurs around the AER, where only HOXD9 and HOXD10 are expressed.|$|E
40|$|Summary: High-throughput {{technologies}} {{can identify}} genes whose expression profiles correlate with specific phenotypes; however, placing these genes into a biological context remains challenging. To help address this issue, we developed <b>nested</b> <b>Expression</b> Analy-sis Systematic Explorer (nEASE). nEASE complements traditional gene ontology enrichment approaches by determining statistically enriched gene ontology sub-terms within {{a list of}} genes based on co-annotation. Here, we overview an open-source software version of the nEASE algorithm. nEASE can be used either stand-alone {{or as part of}} a pathway discovery pipeline. Availability: nEASE is implemented within the Multiple Experimen...|$|E
40|$|We compare {{two recent}} {{extensions}} of the answer set (stable model) semantics of logic programs. One of them, due to Lifschitz, Tang and Turner, allows the bodies and heads of rules to contain <b>nested</b> <b>expressions.</b> The other, due to Niemelä and Simons, uses weight constraints. We {{show that there is}} a simple, modular translation from the language of weight constraints into the language of <b>nested</b> <b>expressions</b> that preserves the program's answer sets. <b>Nested</b> <b>expressions</b> can be eliminated from the result of this translation in favor of additional atoms. The translation makes it possible to compute answer sets for some programs with weight constraints using satis ability solvers, and to prove the strong equivalence of programs with weight constraints using the logic of here-and-there...|$|R
40|$|We {{extend the}} answer set {{semantics}} {{to a class}} of logic programs with <b>nested</b> <b>expressions</b> permitted in the bodies and heads of rules. These expressions are formed from literals using negation as failure, conjunction (,) and disjunction (;) that can be <b>nested</b> arbitrarily. Conditional <b>expressions</b> are introduced as abbreviations. The study of equivalent transformations of programs with <b>nested</b> <b>expressions</b> shows that any such program is equivalent {{to a set of}} disjunctive rules, possibly with negation as failure in the heads. The generalized answer set semantics is related to the LloydTopor generalization of Clark's completion and to the logic of minimal belief and negation as failure...|$|R
40|$|In answer set programming, {{combinatorial}} search {{problems are}} solved by writing logic programs the answer sets of which correspond to solutions. Such programs often contain auxiliary atoms, "defined" {{in terms of}} atoms introduced earlier. To prove that the answer sets of a program containing definitions correspond to the solutions of the problem we want to solve, {{we need to understand}} how adding definitions aects the collection of answer sets. In particular, it is useful to be able to describe the effects of adding definitions to a program with <b>nested</b> <b>expressions,</b> in view of the relation of this class of programs to the input language of the answer set programming system smodels. In this paper we generalize the splitting set theorem to programs with <b>nested</b> <b>expressions</b> and show how this generalization can be used to prove program correctness in answer set programming. We also show that, under certain conditions, adding explicit and recursive definitions to a program with <b>nested</b> <b>expressions</b> extends its answer sets conservatively...|$|R
40|$|In {{this paper}} a flat {{notation}} for logical forms is described. This notation allows the logical forms {{to be easy}} to build, easy to work with, and able to deal with ambiguity by underspecification. The main mechanism to convert a logical form into the corresponding flat form is the reification of all the predicates and operators used in an otherwise <b>nested</b> <b>expression.</b> The resulting flat logical forms are convenient for natural language processing applications that require the use of partial logical forms. In particular, it is shown how partial logical forms (encoded in flat notation) can be used to perform answer extraction...|$|E
40|$|UNLABELLED: High-throughput {{technologies}} {{can identify}} genes whose expression profiles correlate with specific phenotypes; however, placing these genes into a biological context remains challenging. To help address this issue, we developed <b>nested</b> <b>Expression</b> Analysis Systematic Explorer (nEASE). nEASE complements traditional gene ontology enrichment approaches by determining statistically enriched gene ontology subterms within {{a list of}} genes based on co-annotation. Here, we overview an open-source software version of the nEASE algorithm. nEASE can be used either stand-alone {{or as part of}} a pathway discovery pipeline. AVAILABILITY: nEASE is implemented within the Multiple Experiment Viewer software package available at [URL] SUPPLEMENTARY INFORMATION: Supplementary data are available at Bioinformatics online...|$|E
40|$|A novel {{approach}} to {{the representation of the}} design and the composition of logic programs is presented. Therefore, definite clauses and expressions describing transformations of logic programs are used as operands in a calculus for meta-programming. The transformations are intended to express aspects of the design of a complete logic program, for example the introduction of an accumulator. The clauses can be regarded as specializations of the design expressed by the transformations. The derivation of logic programs is defined in terms of reduction of a -calculus instrumented for meta-programming on DCPs and fragments due to an appropriate set of basic data types. A composition expressed as a <b>nested</b> <b>expression</b> can be automatically retrieved from some fragments due to a process called lifting (emphasizing a slight similarity to this notion in semantics). Lifting starts from an initial logic program and applies transformations while incorporating specializing clauses at suitable levels...|$|E
40|$|We {{extend a}} theorem by Francois Fages about the {{relationship}} between the completion semantics and the answer set semantics of logic programs to a class of programs with <b>nested</b> <b>expressions</b> permitted in the bodies of rules. Fages' theorem is important from the perspective of answer set programming: whenever the two semantics are equivalent, answer sets can be computed by propositional solvers, such as sato, instead of answer set solvers, such as smodels. The need to extend Fages' theorem to programs with <b>nested</b> <b>expressions</b> is related to the use of choice rules in the input language of smodels. ...|$|R
40|$|We compare {{two recent}} {{extensions}} of the answer set (stable model) semantics of logic programs. One of them, due to Lifschitz, Tang and Turner, allows the bodies and heads of rules to contain <b>nested</b> <b>expressions.</b> The other, due to Niemela and Simons, uses weight constraints. We {{show that there is}} a simple, modular translation from the language of weight constraints into the language of <b>nested</b> <b>expressions</b> that preserves the program's answer sets. This translation can be used to study equivalent transformations of logic programs written in the input language of the answer set programming system SMODELS. Keywords: answer sets, cardinality constraints, SMODELS, stable models, weight constraints. ...|$|R
50|$|Provision for <b>nested</b> Boolean <b>expressions.</b>|$|R
40|$|Introduction Generation of mask layout for static CMOS {{cells from}} a boolean {{specification}} {{has been done}} for many years now, especially in research environments. However in commercial systems standard cell libraries providing a limited choice of cells are most popular. With logic synthesis widely available in commercial systems now, a cell generator can show remarkable advantages. This requires particular attention for cell timing behavior and routing transparency, in combination with a consistent timing model in the logic synthesis package. As result high performance circuits can be generated, with a reduced cell count and fast and reliable timing. 2. Static CMOS cell style Static CMOS cells have a general circuit topology as depicted in figure 1. Such a function is normally specified as the inverse of a <b>nested</b> <b>expression</b> built from input identifiers, and symbols, or symbols, and braces. The internal structure of the N [...] and P...|$|E
40|$|In this study, {{a formal}} model for {{specification}} of Access Control Policies (ACP) is represented. This model {{is capable of}} expressing several ACPs and combining them in a unified framework. We call present model Constrained Policy Graph (CPG), which {{is an extension of}} Take-Grant (TG) protection model. Although TG can be used to specify the ACPs but it represents the policies without any constraint (e. g., time, location, or any other restriction parameters). Furthermore, it hasn`t ever been used for combining the policies and <b>nested</b> <b>expression</b> of them. In present proposed model, not only the policies can be constrained according to system requirements but also, it can be used for combining ACPs as well as their nested specification. Furthermore, ACPs can be verified conflicts or contradictions using this model. One of the main applications of the proposed model is specifying and combining the ACPs of web services and verifying their composed policies in web service composition...|$|E
40|$|The {{mammalian}} Distal-less (Dlx) clusters (Dlx 1 - 2, Dlx 5 - 6, and Dlx 3 - 7) have a <b>nested</b> <b>expression</b> {{pattern in}} developing visceral (branchial) arches. Genetic regulatory mechanisms controlling Dlx spatial expression within the visceral arches {{have not yet}} been defined. Here we show that an enhancer in the Dlx 3 - 7 cluster can regulate the visceral arch specific expression pattern of the Dlx 3 gene. We have used a 79 -kb transgene construct containing the entire Dlx 3 - 7 bigene cluster with a LacZ reporter inserted in frame in the first exon of the Dlx 3 gene. Visceral arch expression is absent when a 4 -kb element located within the Dlx 3 - 7 intergenic region is deleted. A 245 -bp element (I 37 - 2) whose DNA sequence is highly conserved between human and mouse located within the 4 kb-deleted region can drive visceral arch expression when fused to a hsp 68 -lacZ reporter transgene construct. Reporter expression is detected in 9. 5 and 10. 5 days postcoitum transgenic embryos {{in a manner consistent with}} the endogenous Dlx 3 expression pattern in the mesenchyme of the first and second visceral arches. Thus the I 37 - 2 element is both necessary and sufficient for Dlx 3 expression. The I 37 - 2 element contains several putative binding sites for several transcription factors including Dlx and other homeodomain proteins within the evolutionarily conserved region. Significantly, the I 37 - 2 element shows a sequence-match including a Dlx binding site to a cis-element in the Dlx 5 - 6 intermediate region designated mI 56 i [Zerucha, T., Stuhmer, T., Hatch, G., Park, B. K., Long, Q., Yu, G., Gambarotta, A., Schultz, J. R., Rubenstein, J. L. & Ekker, M. (2000) J. Neurosci. 20, 709 – 721], despite distant phylogenetic relationship between these clusters. Our results provide evidence for a concerted role for DLX auto- and cross-regulation in the establishment of a <b>nested</b> <b>expression</b> pattern for Dlx 3 - 7 and Dlx 5 - 6 clusters within the visceral arches...|$|E
40|$|We {{present the}} first {{complete}} translation of XPath into an algebra, {{paving the way}} for a comprehensive, state-of-theart XPath (and later on, XQuery) compiler based on algebraic optimization techniques. Our translation includes all XPath features such as <b>nested</b> <b>expressions,</b> position-based predicates and node-set functions. The translate...|$|R
40|$|XQuery, the defacto XML query language, is {{typically}} composed of highly <b>nested</b> <b>expressions.</b> Iterative execution of such expressions {{tends to be}} intuitive but inefficient. Instead, decorrelation of <b>nested</b> XQuery <b>expressions</b> opens up the opportunity for significant query optimization. Although several algorithms have been proposed to optimize nested XQueries, these works pay {{little attention to the}} ordered semantics of XQuery expressions. The appropriate extension of decorrelation to XQuery with multiple level orderby clauses and other order sensitive functions hence represents an important and non-trivial task. We propose an algebraic rewriting technique of <b>nested</b> XQuery <b>expressions</b> containing explicit orderby clauses. The proposed work successfully addresses the challenges caused by the hierarchical nature and the ordered semantics of XQuery expressions. Using a running example, our decorrelation algorithm is illustrated. Further, we show the performance gain achievable by our approach via an experimental study...|$|R
40|$|An {{increasing}} number of applications depend on efficient storage and analysis features for XML data. Hence, query optimization and efficient evaluation techniques for the emerging XQuery standard {{become more and more}} important. Many XQuery queries require <b>nested</b> <b>expressions.</b> Unnesting them often introduces binary grouping. We introduce several algorithms implementing binary grouping and analyze their time and space complexity. Experiments demonstrate their performance...|$|R
40|$|The branchial arches are meristic {{vertebrate}} structures, being metameric both {{between each}} other within the rostrocaudal series along the ventrocephalic {{surface of the}} embryonic head and within each individual arch: thus, just as each branchial arch must acquire a unique identity along the rostrocaudal axis, each structure within the proximodistal axis of an arch must also acquire a unique identity. It is believed that regional specification of metameric structures {{is controlled by the}} <b>nested</b> <b>expression</b> of related genes resulting in a regional code, a principal that is though to be demonstrated by the regulation of rostrocaudal axis development in animals exerted by the nested HOM-C/Hox homeobox genes. The <b>nested</b> <b>expression</b> pattern of the Dlx genes within the murine branchial arch ectomesenchyme has more recently led to the proposal of a Dlx code for the regional specification along the proximodistal axis of the branchial arches (i. e. it establishes intra-arch identity). This review re-examines this hypothesis, and presents new work on an allelic series of Dlx loss-of-function mouse mutants that includes various combinations of Dlx 1, Dlx 2, Dlx 3, Dlx 5 and Dlx 6. Although we confirm fundamental aspects of the hypothesis, we further report a number of novel findings. First, contrary to initial reports, Dlx 1, Dlx 2 and Dlx 1 / 2 heterozygotes exhibit alterations of branchial arch structures and Dlx 2 −/− and Dlx 1 / 2 −/− mutants have slight alterations of structures derived from the distal portions of their branchial arches. Second, we present evidence for a role for murine Dlx 3 {{in the development of the}} branchial arches. Third, analysis of compound Dlx mutants reveals four grades of mandibular arch transformations and that the genetic interactions of cis first-order (e. g. Dlx 5 and Dlx 6), trans second-order (e. g. Dlx 5 and Dlx 2) and trans third-order paralogues (e. g. Dlx 5 and Dlx 1) result in significant and distinct morphological differences in mandibular arch development. We conclude by integrating functions of the Dlx genes within the context of a hypothesized general mechanism for the establishment of pattern and polarity in the first branchial arch of gnathostomes that includes regionally secreted growth factors such as Fgf 8 and Bmp and other transcription factors such as Msx 1, and is consistent both with the structure of the conserved gnathostome jaw bauplan and the elaboration of this bauplan to meet organismal end-point designs...|$|E
40|$|Gegenbaur’s {{classical}} {{hypothesis of}} jaw-gill arch serial homology is widely cited, but remains unsupported by either paleontological evidence (e. g. {{a series of}} fossils reflecting the stepwise transformation of a gill arch into a jaw) or developmental genetic data (e. g. shared molecular mechanisms underlying segment identity in the mandibular, hyoid and gill arch endoskeletons). Here we show that <b>nested</b> <b>expression</b> of Dlx genes – the “Dlx code ” that specifies upper and lower jaw identity in mammals and teleosts – is a primitive feature of the mandibular, hyoid and gill arches of jawed vertebrates. Using fate-mapping techniques, we demonstrate that the principal dorsal and ventral endoskeletal segments of the jaw, hyoid and gill arches of the skate Leucoraja erinacea derive from molecularly equivalent mesenchymal domains of combinatorial Dlx gene expression. Our data suggest that vertebrate jaw, hyoid and gill arch cartilages are serially homologous, and were primitively patterned dorsoventrally by a common Dlx blueprint. The pharyngeal endoskeleton of jawed vertebrates (gnathostomes) was primitively segmented dorsoventrally into the palatoquadrate and Meckel’s cartilage in the mandibular arch, the hyomandibula and ceratohyal in the hyoid arch, and epibranchial an...|$|E
40|$|The <b>nested</b> <b>expression</b> {{patterns}} of the paired−box containing transcription factors Pax 2 / 5 and Pax 6 demarcate the midbrain and forebrain primordium at the neural plate stage. We demonstrate that, in Pax 2 / 5 deficient mice, the mesencephalon/metencephalon primordium is completely missing, resulting in a fusion of the forebrain to the hindbrain. Morphologically, in the alar plate the deletion {{is characterized by the}} substitution of the tectum (dorsal midbrain) and cerebellum (dorsal metencephalon) by the caudal diencephalon and in the basal plate by the replacement of the midbrain tegmentum by the ventral metencephalon (pons). Molecularly, the loss of the tectum is demonstrated by an expanded expression of Pax 6, (the molecular determinant of posterior commissure), and a rostral shift of the territory of expression of Gbx 2 and Otp (markers for the pons), towards the caudal diencephalon. Our results suggest that an intact territory of expression of Pax 2 / 5 in the neural plate, nested between the rostral and caudal territories of expression of Pax 6, is necessary for defining the midbrain vesicle. Ó 1999 Elsevier Science Ireland Ltd. All rights reserve...|$|E
40|$|Navigational {{features}} {{have been}} largely recognized as fundamental for graph database query languages. This fact has motivated several authors to propose RDF query languages with navigational capabilities. In particular, we have argued in a previous paper that <b>nested</b> regular <b>expressions</b> are appropriate to navigate RDF data, and we have proposed the nSPARQL query language for RDF, that uses <b>nested</b> regular <b>expressions</b> as building blocks. In this paper, we study some of the fundamental properties of nSPARQL concerning expressiveness and complexity of evaluation. Regarding expressiveness, we show that nSPARQL is expressive enough to answer queries considering the semantics of the RDFS vocabulary by directly traversing the input graph. We also show that nesting is necessary to obtain this last result, and we study the expressiveness of the combination of <b>nested</b> regular <b>expressions</b> and SPARQL operators. Regarding complexity of evaluation, we prove that the evaluation of a <b>nested</b> regular <b>expression</b> E over an RDF graph G can be computed in time O(|G|·|E|) ...|$|R
50|$|At the root, Joule is an {{imperative}} language {{and because of}} that a statement-based language. It has a rich expression syntax, which transforms easily to its relational syntax underneath. Complex expressions become separate statements, where the site of the original expression is replaced by a reference to the acceptor of the results channel. Therefore, <b>nested</b> <b>expressions</b> still compute completely concurrently with their embedding statement.|$|R
40|$|XQuery, the defacto XML query language, is a {{functional}} language with operational seman-tics, which precludes the direct application of classical query optimization techniques. The features of XQuery, such as <b>nested</b> <b>expressions</b> and ordered semantics, further aggravate this situation. The appropriate extension of existing optimization techniques to XQuery processing hence represents {{an important and}} non-trivial task. We propose an algebraic rewriting technique of <b>nested</b> XQuery <b>expressions</b> containing explicit orderby clauses. Un-like prior work, this technique enables the optimization of <b>nested</b> XQuery <b>expressions</b> not only with set but also with ordered sequence semantics. Our technique is based on two steps. First, we perform order-sensitive algebraic query unnesting. Second, we apply query minimization techniques that exploit pairwise XPath set containment after pulling up order-sensitive operations. We illustrate how our proposed technique is able to not only success-fully tackle the XQuery logical optimization problem solved in the NEXT framework, but also to correctly support ordered semantics. We have implemented the proposed optimiza-tion techniques {{on top of the}} XAT algebraic framework in our RainbowCore project. W...|$|R
40|$|AbstractThe Dlx {{homeobox}} gene family {{is expressed in}} a complex pattern within the embryonic craniofacial ectoderm and ectomesenchyme. A previous study established that Dlx- 2 is essential for development of proximal regions of the murine first and second branchial arches. Here we describe the craniofacial phenotype of mice with mutations in Dlx- 1 and Dlx- 1 and - 2. The skeletal and soft tissue analyses of mice with Dlx- 1 and Dlx- 1 and - 2 mutations provide additional evidence that the Dlx genes regulate proximodistal patterning of the branchial arches. This analysis also elucidates distinct and overlapping roles for Dlx- 1 and Dlx- 2 in craniofacial development. Furthermore, mice lacking both Dlx- 1 and - 2 have unique abnormalities, including the absence of maxillary molars. Dlx- 1 and - 2 are expressed in the proximal and distal first and second arches, yet only the proximal regions are abnormal. The <b>nested</b> <b>expression</b> patterns of Dlx- 1, - 2, - 3, - 5, and - 6 provide evidence for a model that predicts the region-specific requirements for each gene. Finally, the Dlx- 2 and Dlx- 1 and - 2 mutants have ectopic skull components that resemble bones and cartilages found in phylogenetically more primitive vertebrates...|$|E
40|$|AbstractThe Hox code of jawed {{vertebrates}} {{is characterized}} by the colinear and rostrocaudally <b>nested</b> <b>expression</b> of Hox genes in pharyngeal arches, hindbrain, somites, and limb/fin buds. To gain insights into the evolutionary path leading to the gnathostome Hox code, we have systematically analyzed the expression pattern of the Hox gene complement in an agnathan species, Lethenteron japonicum (Lj). We have isolated 15 LjHox genes and assigned them to paralogue groups (PG) 1 – 11, based on their deduced amino acid sequences. LjHox expression during development displayed gnathostome-like spatial patterns with respect to the PG numbers. Specifically, lamprey PG 1 – 3 showed homologous expression patterns in the rostral hindbrain and pharyngeal arches to their gnathostome counterparts. Moreover, PG 9 – 11 genes were expressed specifically in the tailbud, implying its posteriorizing activity as those in gnathostomes. We conclude that these gnathostome-like colinear spatial patterns of LjHox gene expression can be {{regarded as one of the}} features already established in the common ancestor of living vertebrates. In contrast, we did not find evidence for temporal colinearity in the onset of LjHox expression. The genomic and developmental characteristics of Hox genes from different chordate species are also compared, focusing on evolution of the complex body plan of vertebrates...|$|E
40|$|AbstractPhenotypic {{analysis}} of both zebrafish and mouse {{has shown that}} fibroblast growth factor 8 (FGF 8) is required for many developmental decisions. To further {{our understanding of the}} FGF 8 signaling process, we sought to identify new transcriptional targets of the pathway. Here, we propose that two zebrafish ETS genes, pea 3 and erm, are general targets of FGF 8 signaling, based upon the following observations: both genes are expressed around all early FGF 8 signaling sources, both genes are downregulated in fgf 8 mutant embryos in all tissues known to require fgf 8 function, a pharmacological inhibitor of the FGF pathway completely abolishes expression of both genes, and ectopic expression of fgf 8 is sufficient to induce both genes. The finding that pea 3 and erm are common transcriptional targets of FGF 8 signaling suggests that they are general mediators of FGF 8 signaling during development. In addition, we observed that pea 3 is often expressed close to an FGF 8 source, and erm is expressed in a broader domain. To test whether this differential expression is established by FGF 8, we have induced FGF 8 ectopically and show that it is sufficient to recapitulate the endogenous <b>nested</b> <b>expression</b> pattern of pea 3 and erm...|$|E
40|$|Logic {{programs}} P and Q {{are strongly}} equivalent if, given any program R, programs P [R and Q [R are equivalent (that is, {{have the same}} answer sets). Strong equivalence is convenient {{for the study of}} equivalent transformations of logic programs: one can prove that a local change is correct without considering the whole program. Lifschitz, Pearce and Valverde showed that Heyting's logic of here-andthere can be used to characterize strong equivalence for a large class of logic programs|the programs with <b>nested</b> <b>expressions,</b> introduced by Lifschitz, Tang and Turner. (Such programs subsume the more widelyknown class of extended disjunctive programs.) This note considers a simpler, more direct characterization of strong equivalence for programs with <b>nested</b> <b>expressions,</b> recently proposed by the author, and shows that it can also be applied to the weight constraint programs of Niemel 7 ̆fa and Simons. Thus, this characterization of strong equivalence is convenient for the study of equivalent transformations of logic programs written in the input languages of answer set programming systems dlv and smodels. ...|$|R
40|$|Abstract. XQuery {{becomes a}} {{standard}} of the XML query language. Just like in SQL, XQuery allows <b>nested</b> <b>expressions.</b> To optimize XQuery processing, {{a lot of research}} has been done on normalization, i. e., transforming <b>nested</b> <b>expressions</b> to equivalent unnested ones. Previous normalization rules are classified into two categories- source-level and algebra-level- depending on whether a construct is specified by using a query language or an algebraic expression. In implementation point of view, we contend that the source-level rule is preferable to the algebra-level rule because algebras used for normalization are hard to be directly exploited in a typical DBMS. However, a complete set of source-level rules is yet to be developed. In this paper, we propose source-level rules for normalizing XQuery expressions and present an implementation mechanism. We show that our rules are correct and complete according to the nesting types classified by Kim. Our mechanism is easily implementable since it adapts the well-known Query Graph Model (QGM) representation. We have successfully implemented this mechanism into our XML DBMS named Odysseus/XML...|$|R
40|$|Navigational queries on graph {{databases}} return binary relations {{over the}} nodes of the graph. The calculus of relations, popularized by Tarski, {{serves as a}} natural benchmark for first-order navigational querying. Recently, <b>nested</b> regular <b>expressions</b> have been proposed to extend navigational querying to RDF graphs, i. e., ternary relations. In this paper we investigate a notion of “star-free ” <b>nested</b> regular <b>expressions,</b> obtained by removing the Kleene star (transitive closure) operator, but adding in the set difference operator. We claim this obtains the natural generalization of the Tarski algebra to RDF graphs. We then proceed {{to point out that}} the resulting navigational queries are already expressible in SPARQL proper, and we delineate a fragment of SPARQL, called Tarski-SPARQL, that is precisely equivalent with the star-free <b>nested</b> regular <b>expressions...</b>|$|R
40|$|The Hox code of jawed {{vertebrates}} {{is characterized}} by the colinear and rostrocaudally <b>nested</b> <b>expression</b> of Hox genes in pharyngeal arches, hindbrain, somites, and limb/fin buds. To gain insights into the evolutionary path leading to the gnathostome Hox code, we have systematically analyzed the expression pattern of the Hox gene complement in an agnathan species, Lethenteron japonicum (Lj). We have isolated 15 LjHox genes and assigned them to paralogue groups (PG) 1 - 11, based on their deduced amino acid sequences. LjHox expression during development displayed gnathostome-like spatial patterns with respect to the PG numbers. Specifically, lamprey PG 1 - 3 showed homologous expression patterns in the rostral hindbrain and pharyngeal arches to their gnathostome counterparts. Moreover, PG 9 - 11 genes were expressed specifically in the tailbud, implying its posteriorizing activity as those in gnathostomes. We conclude that these gnathostome-like colinear spatial patterns of LjHox gene expression can be {{regarded as one of the}} features already established in the common ancestor of living vertebrates. In contrast, we did not find evidence for temporal colinearity in the onset of LjHox expression. The genomic and developmental characteristics of Hox genes from different chordate species are also compared, focusing on evolution of the complex body plan of vertebrates...|$|E
40|$|International audienceSUMMARY The Hox {{gene family}} encodes homeodomain-containing {{transcription}} factors {{involved in the}} patterning of structures composed of repeated elements along the antero-posterior axis of Bilateralia embryos. In vertebrate, Hox genes are thought to control the segmental identity of the rhombomeres, the branchial arches, and the somites. They are therefore thought to have {{played a key role}} in the morphological evolution of structures like the jaw, girdles, and vertebrae in gnathostomes. Thus far, our knowledge about the expression patterns of the Hox genes, the Hox code, has been mainly restricted to osteichthyans species and little is known about chondrichthyans. Recently, we identified 34 Hox genes clustered in three complexes (HoxA, HoxB, and HoxD) in the dogfish (Scyliorhinus canicula) genome suggesting that in sharks most, if not all, genes belonging to the HoxC complex are lost. To gain insights into the evolution of gnathostome Hox transcription, we present here expression patterns along the anteroposterior axis for all Hox genes known in the dogfish. A comparison of these patterns with those of osteichthyans shows that the expression patterns of the Hox genes in serially homologous compartments such as the branchial arches, the hindbrain, and the somites underwent only subtle changes during the evolution of gnathostomes. Therefore, the <b>nested</b> <b>expression</b> of Hox genes in these structures, the Hox code, is a ground plan, which predates the morphological diversification of serially homologous structures along the body axis...|$|E
40|$|AbstractTo {{elucidate}} the molecular mechanism for regulating the region-specific morphogenesis {{of the chicken}} respiratory tract, we analyzed the spatiotemporal expression patterns of the Hoxb genes, Bmp- 2, Bmp- 4, Wnt- 5 a, and Wnt- 11 in the developing respiratory tract. We found region-specific expression of these genes in the mesenchymal layer of the respiratory tract. Before bronchial branching proceeds, Hoxb genes show <b>nested</b> <b>expression</b> patterns around the ventral-distal tip of the lung bud. As morphogenesis proceeds, these expression domains correspond to the morphological subdivisions of the chick respiratory tract. Hoxb- 5 and Hoxb- 6 expression domains demarcate the trachea, bronchial tree, and air sacs. Particularly the expression domains of Hoxb- 6 to - 9 correspond to the morphological subdivisions of the air sacs along the proximodistal axis. Bmp- 4 and Bmp- 2 are expressed throughout the entire pulmonary mesenchyme and its dorsal half, respectively. Wnt- 5 a and Wnt- 11 are expressed in the tracheal mesenchyme. Interestingly, the expression domain of Bmp- 2 is complementary to the Hoxb- 6 domain. The respiratory mesenchyme influences the process of epithelial branching during morphogenesis. By tissue recombination experiments, {{we found that the}} dorsal and the ventral pulmonary mesenchyme, demarcated by Hoxb- 6 expression, have different inductive capacities toward the tracheal epithelium. These observations suggest the possibility that Hoxb genes are involved in the system specifying regional differences in morphogenesis and cytodifferentiation of respiratory tract. In addition, it is possible that BMPs and WNTs mediate region-specific epithelial–mesenchymal interaction in this system...|$|E
40|$|Moreover, {{there are}} many cases where {{functional}} programs are more efficiently executed than their relational equivalents. 1 Introduction During the last years a lot of approaches have been proposed in order to amalgamate functional and logic programming languages [7] [1]. Such integrations have several advantages: 1. Functional and logic programming styles {{can be used in}} one language. 2. It extends logic programming by allowing <b>nested</b> <b>expressions,</b> i. e., it is not necessar...|$|R
40|$|This {{document}} {{describes the}} TasteCurry system, a prototypical {{implementation of the}} multiparadigm Curry. Curry is a universal programming language aiming at the amalgamation {{of the most important}} declarative programming paradigms, namely functional programming and logic programming. Curry combines in a seamless way features from functional programming (<b>nested</b> <b>expressions,</b> lazy evaluation, higher-order functions), logic programming (logical variables, partial data structures, built-in search), and concurrent programming (concurrent evaluation of constraints with synchronization on logical variables) ...|$|R
40|$|Abstract. Turner’s {{logic of}} {{universal}} causation {{is a general}} logic for nonmonotonic reasoning. It has its origin in McCain and Turner’s causal action theories which have been translated to propositional logic and logic programming with <b>nested</b> <b>expressions.</b> In this paper, we propose {{to do the same}} for Turner’s logic, and show thatTurner’s logic can actually be mapped to McCain and Turner’s causal theories. These results can be used to construct a system for reasoning in Turner’s logic. ...|$|R
