29|70|Public
5000|$|Instead of {{defining}} a <b>numeric</b> <b>function,</b> an agent's preference relation {{can be represented}} graphically by indifference curves. This is especially useful when {{there are two kinds}} of goods, x and y. Then, each indifference curve shows a set of points [...] such that, if [...] and [...] are on the same curve, then [...]|$|E
50|$|In reality, {{there are}} two or more attributes. For example, a person has to select between two {{employment}} options: option A gives him $12K per month and 20 days of vacation, while option B gives him $15K per month and only 10 days of vacation. The person has to decide between (12K,20) and (15K,10). Different people may have different preferences. Under certain conditions, a person's preferences can be represented by a <b>numeric</b> <b>function.</b> The article ordinal utility describes some properties of such functions and some ways by which they can be calculated.|$|E
50|$|For example, a <b>numeric</b> <b>function</b> {{normally}} returns {{a number}} (int or float), and while zero {{might be a}} valid response; false is not. Similarly, a function that normally returns a string might sometimes return the empty string as a valid response, but return false on failure. This process of type-juggling necessitates care in testing the return value: e.g. in PHP, use === equal and of same type rather than just == equal, after automatic type-conversion. It works only when the original function {{is not meant to}} return a boolean value, and still requires that information about the error be conveyed via other means.|$|E
5000|$|... #Subtitle level 3: Converting predicates to <b>numeric</b> <b>functions</b> ...|$|R
5000|$|A {{limited number}} of <b>numeric</b> <b>functions</b> were provided, all of which took one numeric parameter: ...|$|R
5000|$|Utilize {{numerous}} <b>numeric</b> <b>functions,</b> across examples such as statistics, data analysis, image processing, and {{signal processing}} ...|$|R
50|$|Another {{consideration}} that might complicate the decision problem is uncertainty. This complication exists {{even when there}} is a single attribute, e.g.: money. For example, option A might be a lottery with 50% chance to win $2, while option B is to win $1 for sure. The person has to decide between the lottery <2:0> and the lottery <1:1>. Again, different people may have different preferences. Again, under certain conditions the preferences can be represented by a <b>numeric</b> <b>function.</b> Such functions are called cardinal utility functions. The article Von Neumann-Morgenstern utility theorem describes some ways by which they can be calculated.|$|E
50|$|There are {{differences}} of opinion about the proper definition for {{the result of a}} <b>numeric</b> <b>function</b> that receives a quiet NaN as input. One view is that the NaN should propagate to the output of the function in all cases to propagate the indication of an error. Another view, and the one taken by the ISO C99 and IEEE 754-2008 standards in general, is that if the function has multiple arguments and the output is uniquely determined by all the non-NaN inputs (including infinity), then that value should be the result. Thus for example the value returned by hypot(±∞,qNaN) and hypot(qNaN,±∞) is +∞.|$|E
5000|$|Design on the {{computer}} was begun in December 1950 at PAFB's Atlantic Missile Range. The Air Force Civilian engineering team assembled to design and build {{the computer}} consisted of seven key members: Thomas G. Holmes, Charlie West, John MacNeill, Jim Bellinger, Steve Batchelor, Bruce Smith and Harlan Manweiler. Thomas G. Holmes {{was responsible for the}} overall logical design of the computer, ensuring all of the components worked together. He determined how to interconnect the modules to provide the control and <b>numeric</b> <b>function</b> of the computer. Charlie West was the director of the project. John MacNeill and Jim Bellinger were the mechanical engineers responsible for designing the cabinet. Steve Batchelor was in charge of purchasing and manufacturing. Bruce Smith was in charge of designing the building modules {{to be used in the}} design and Harlan Manweiler was the comptroller.|$|E
40|$|The Abstract State Machine Thesis {{asserts that}} every {{classical}} algorithm is behaviorally equivalent to an abstract state machine. This thesis {{has been shown}} to follow from three natural postulates about algorithmic computation. Here, we prove that augmenting those postulates with an additional requirement regarding basic operations implies Church’s Thesis, namely, that the only <b>numeric</b> <b>functions</b> that can be calculated by effective means are the recursive ones (which are the same, extensionally, as the Turing-computable <b>numeric</b> <b>functions).</b> In particular, this gives a natural axiomatization of Church’s Thesis, as Gödel and others suggested may be possible...|$|R
40|$|Abstract. Church’s Thesis {{asserts that}} the only <b>numeric</b> <b>functions</b> that can be {{calculated}} by effective means are the recursive ones, which are the same, extensionally, as the Turingcomputable <b>numeric</b> <b>functions.</b> The Abstract State Machine Theorem states that every classical algorithm is behaviorally equivalent to an abstract state machine. This theorem presupposes three natural postulates about algorithmic computation. Here, we show that augmenting those postulates with an additional requirement regarding basic operations gives a natural axiomatization of computability and a proof of Church’s Thesis, as Gödel and others suggested may be possible. In a similar way, but with {{a different set of}} basic operations, one can prove Turing’s Thesis, characterizing the effective string functions, and—in particular—the effectively-computable functions on string representations of numbers...|$|R
40|$|This paper {{presents}} a core generator for arbitrary <b>numeric</b> <b>functions</b> on Xilinx Virtex FPGAs. The cores use the state-of-the-art multipartite table method, which allows {{input and output}} precisions {{in the range of}} 8 to 24 bits on current Virtex chips. The implementation uses the JBits API to embed elaborate optimisation techniques in the description of the hardware...|$|R
5000|$|Koppa {{remained}} {{in use in}} the system of Milesian Greek numerals, where it had the value of 90. It has continued {{to be used in}} this function into modern times, though its shape has changed over time. In the Greek cursive script, the Q-like shape with a closed circle on top (handwritten as [...] ) was often broken up at the side (...) or at the top (...) [...] These are also the shapes in which it was borrowed into the early Cyrillic alphabet (Ҁ), as well as into Gothic (...) , in both cases with the same <b>numeric</b> <b>function.</b> In the Coptic script, the identical-looking sign ϥ is also used as a numeral for 90, although as an alphabetic letter it has an unrelated sound value, /f/, derived from Egyptian demotic. Later, in minuscule handwriting, the shape changed further into a simple zigzag line ( [...] , [...] ).|$|E
40|$|In this paper, {{we propose}} a new {{representation}} of numeric functions using a piecewise arithmetic expression. To represent a <b>numeric</b> <b>function</b> compactly, we partition {{the domain of}} the function into uniform segments, and transform the sub-function in each segment into an arithmetic spectrum. From this arithmetic spectrum, we derive an arithmetic expression, and obtain a piecewise arithmetic expression for the function. By using the piecewise arithmetic expression, we can increase the number of zero arithmetic coefficients significantly, and represent a <b>numeric</b> <b>function</b> more compactly than using a conventional single arithmetic expression. We also present an application of the piecewise arithmetic expression to design of <b>numeric</b> <b>function</b> generators (NFGs). Since the piecewise arithmetic expression has many zero coefficients and repeated coefficients, by storing only distinct nonzero coefficients in a table, we can significantly reduce the table size needed to store arithmetic coefficients. Experimental results show that the table size can be reduced to only a small percent of the table size needed to store all the arithmetic coefficients. Japan Society of the Promotion of Science (JSPS) Ministry of Education, Culture, Sports, Science and Technology (MEXT) Hiroshima City UniversityGrant-in Aid No. 22500050 (MEXT) No. 0206 (HCU...|$|E
40|$|I {{show how}} the Bachmann method of {{generating}} countable ordinals using uncountable ordinals can {{be replaced by the}} use of higher order xed point extractors available in the term calculus of Howard's system of constructive ordinals. This leads to a notion of the intrinsic complexity of a notated ordinal analogous to the intrinsic complexity of a <b>numeric</b> <b>function</b> described in Gödel's T...|$|E
40|$|This paper {{presents}} the implementation, on Virtex FPGAs, of a core generator for arbitrary <b>numeric</b> <b>functions</b> in fixed-point format. The cores use the state-of-theart multipartite table method, which allows {{input and output}} precisions {{in the range of}} 8 to 24 bits on current Virtex chips. The implementation uses the JBits API to embed elaborate optimisation techniques in the description of the hardware. ...|$|R
40|$|This paper {{presents}} a planning algorithm designed {{to deal with}} problems in dynamic environments and/or with time constraints. This algorithm {{is based on a}} novel heuristic approach, which follows the design principles of anytime algorithms. The algorithm is based on a greedy action selection which reduces the problem complexity and allows to cope with large problems. The planner also supports other important features like sensing actions and <b>numeric</b> <b>functions.</b> All these characteristics turn the system into a versatile tool for handling problems in different domains as, for example, the control of mobile robots...|$|R
40|$|IEICE Transactions on Information and Systems, Vol. E 93 -D No. 8 pp. 2059 - 2067, Aug. 2010. This {{publication}} {{is a work}} of the U. S. Government {{as defined}} in Title 17, United States Code, Section 101. As such, it is in the public domain, and under the provisions of Title 17, United States Code, Section 105, may not be copyrighted. This paper proposes a high-speed architecture to realize two-variable <b>numeric</b> <b>functions.</b> It represents the given function as an edge valued multiple-valued decision diagram (EVMDD), and shows a systematic design method based on the EVMDD [...] ...|$|R
40|$|AbstractWe give an {{efficient}} algorithm for partitioning {{the domain of}} a <b>numeric</b> <b>function</b> f into segments. The function f is realized as a polynomial in each segment, and a lookup table stores the coefficients of the polynomial. Such an algorithm {{is an essential part}} of the design of lookup table methods Ercepovac et al. (2000) [5], Lee et al. (2003) [7], Nagayama et al. (2007) [12], Paul et al. (2007) [6] and Sasao et al. (2004) [8] for realizing numeric functions, such as sin(πx), ln(x), and −ln(x). Our algorithm requires many fewer steps than a previous algorithm given in Frenzen et al. (2010) [10] and makes tractable the design of <b>numeric</b> <b>function</b> generators based on table lookup for high-accuracy applications. We show that an estimate of segment width based on local derivatives greatly reduces the search needed to determine the exact segment width. We apply the new algorithm to a suite of 15 numeric functions and show that the estimates are sufficiently accurate to produce a minimum or near-minimum number of computational steps...|$|E
40|$|International Symposium on Multiple-Valued Logic, Barcelona, Spain, May 26 - 28, 2010, pp. 223 - 228. This {{publication}} {{is a work}} of the U. S. Government {{as defined}} in Title 17, United States Code, Section 101. As such, it is in the public domain, and under the provisions of Title 17, United States Code, Section 105, may not be copyrighted. This paper proposes a new architecture for memory-based floating-point <b>numeric</b> <b>function</b> generators (NFGs). The design method uses piecewise-split edge-valued multi-valued decision diagrams (EVMDDs) [...] ...|$|E
40|$|Proceedings of the 18 th International Workshop on Post-Binary ULSI Systems May 20, 2009, Naha, Okinawa, Japan. This {{publication}} {{is a work}} of the U. S. Government {{as defined}} in Title 17, United States Code, Section 101. As such, it is in the public domain, and under the provisions of Title 17, United States Code, Section 105, may not be copyrighted. This paper introduces design methods for <b>numeric</b> <b>function</b> generators (NFGs) using decision diagrams. NFGs are hardware accelerators to compute values of numeric functions such as trigonometric, logarithmic, square root, and reciprocal functions [...] ...|$|E
40|$|Automatic {{differentiation}} (AD) is {{an essential}} primitive for machine learning programming systems. Tangent is a new library that performs AD using source code transformation (SCT) in Python. It takes <b>numeric</b> <b>functions</b> written in a syntactic subset of Python and NumPy as input, and generates new Python functions which calculate a derivative. This approach to automatic differentiation is different from existing packages popular in machine learning, such as TensorFlow and Autograd. Advantages are that Tangent generates gradient code in Python which is readable by the user, easy to understand and debug, and has no runtime overhead. Tangent also introduces abstractions for easily injecting logic into the generated gradient code, further improving usability...|$|R
40|$|In {{order to}} {{investigate}} the structure of computable functions over (binary) trees, we definetwo claϖ of raeursive trae function 8 by extending the notion of recursive functions over naturalnumbers in two different ways, and also define the class of functions computable by while programsover trϖ. Then we show that thoee cla∞ coincide with the claae of conjugat e of recursive func-tions over natural numbers via a standard ∞ding function (between trϖ and natural numbelB). We also study how {{the choice of the}} coding function affects the result, and prove that the class ofconjugates of recursive <b>numeric</b> <b>functions</b> via coding function φ remains same as above, so longas the conjugates of constructors sue and cons remain to be recursive...|$|R
40|$|The Bayesian {{framework}} of learning from positive noise-free examples derived by Muggleton [12] is extended to learning functional hypotheses from positive examples containing normally distributed {{noise in the}} outputs. The method subsumes a type of distance based learning as a special case. We also present an effective method of outlier-identification which may significantly improve the predictive accuracy of the final multi-clause hypothesis if it is constructed by a clause-by-clause covering algorithm as e. g. in Progol or Aleph. Our method is implemented in Aleph and tested on two experiments, one of which concerns <b>numeric</b> <b>functions</b> while the other treats non-numeric discrete data where the normal distribution is taken as an approximation of the discrete distribution of noise...|$|R
40|$|Journal of Computational and Applied Mathematics. Vol. 235, Issue 14, pp. 4076 - 4082, May 2011. This {{publication}} {{is a work}} of the U. S. Government {{as defined}} in Title 17, United States Code, Section 101. As such, it is in the public domain, and under the provisions of Title 17, United States Code, Section 105, may not be copyrighted. We give an efficient algorithm for partitioning the domain of a <b>numeric</b> <b>function</b> f into segments. The function f is realized as a polynomial in each segment, and a look-up table stores the coefficients of the polynomial [...] ...|$|E
40|$|IPSJ Transactions on System LSI Design Methodology, Vol. 3, pp. 118 - 129, Feb. 2010. This {{publication}} {{is a work}} of the U. S. Government {{as defined}} in Title 17, United States Code, Section 101. As such, it is in the public domain, and under the provisions of Title 17, United States Code, Section 105, may not be copyrighted. This paper proposes programmable architectures and design methods for <b>numeric</b> <b>function</b> generators (NFGs) of two-variable functions. To realize a two-variable function in hardware, we partition a given domain of the function into segments, and approximate the function by a polynomial in each segment. This paper introduces two planar segmentation algorithms that efficiently partition a domain of a two-variable function [...] ...|$|E
40|$|Abstract. Relaxation skyline queries {{have been}} proposed, in the {{relational}} context, {{as a solution}} to the so-called empty answer problem. Given a query composed of selection and join operations, a relaxation skyline query relies on the usage of a relaxation function (usually, a <b>numeric</b> <b>function)</b> to quantify the distance of each tuple (pair of tuples in case of join) from the specified conditions and uses a skyline-based semantics to compute the answer. Though the empty answer problem is extremely relevant also in a streaming context, where users may not be acquainted with the actual data arriving on the stream, it has been largely neglected. Specifically, no solutions have been proposed so far for skyline-based relaxation over data streams. In this paper, we define relaxation skyline queries for window-based join over data streams, propose one processing algorithm and present a preliminary experimental evaluation of the designed technique. ...|$|E
50|$|Seed7 {{has many}} libraries, {{covering}} areas including containers, <b>numeric</b> <b>functions,</b> lexical analysis, file manipulation, networking (sockets, Transport Layer Security (TLS/SSL), Hypertext Transfer Protocol (HTTP), HTTP Secure (HTTPS), File Transfer Protocol (FTP), Simple Mail Transfer Protocol (SMTP), etc.), graphics, pixmap and vector fonts, database access (MySQL-MariaDB, SQLite, PostgreSQL, Oracle, Open Database Connectivity (ODBC)), Common Gateway Interface (CGI) support, data compression, character encoding, time and date handling, XML processing, message digests and more. These libraries {{reduce the need}} to use operating system features and third-party libraries directly. Seed7 libraries contain abstraction layers for hardware, operating system and third-party libraries, e.g. graphic and database libraries. In other words, no changes are needed to move Seed7 programs between different processors or operating systems.|$|R
40|$|This paper {{presents}} {{the method of}} data transformation for discovering <b>numeric</b> <b>functions</b> from their examples. Based {{on the idea of}} transformations between functions, this method {{can be viewed as a}} semantic counterpart to the more common approach of formula construction used in most previous discovery systems. Advantages of the new method include a flexible implementation through the design of transformation rules, and a sound basis for rigorous mathematical analysis to characterize what can be discovered. The method has been implemented in a discovery system called "LINUS," which can identify a wide range of functions: rational functions, quadratic relations, and many transcendental functions, as well as those that can be transformed to rational functions by combinations of differentiation, logarithm and function inverse operations...|$|R
40|$|Derivatives, {{mostly in}} the form of {{gradients}} and Hessians, are ubiquitous in machine learning. Automatic differentiation (AD) is a technique for calculating derivatives of <b>numeric</b> <b>functions</b> expressed as computer programs efficiently and accurately, used in fields such as computational fluid dynamics, nuclear engineering, and atmospheric sciences. Despite its advantages and use in other fields, machine learning practitioners have been little influenced by AD and make scant use of available tools. We survey the intersection of AD and machine learning, cover applications where AD has the potential to make a big impact, and report on some recent developments in the adoption of this technique. We aim to dispel some misconceptions that we contend have impeded the use of AD within the machine learning community...|$|R
40|$|In {{computer}} graphics, the {{rendering of}} shading, mist, texture, etc., may require {{the generation of}} shading-off in image luminace or chrominance. This can be mathematically modeled as {{the construction of a}} gradual <b>numeric</b> <b>function</b> from a partially defined function. The Lipschitz condition is an appropriate requirement for gradualness of a function; futhermore it has the advantage of being defined in both the Euclidian and digital spaces. In this paper, we review the structure of the set of Lipschitz functions defined on a metric space E, and then we examine methods for extrapolating a Lipschitz function on a subset S of E to a Lipschitz function on E. Two approaches are considered: first the use of lattice-theoritical operations from mathematical morphology, and second the solution of an integral equation for a finite Borel measure on S when S is compact. This theory {{can be applied to the}} design of algorithms for generating gradual colour ranges in synthetic images...|$|E
40|$|The Differential Evolution (DE) is a {{prominent}} meta-heuristic algorithm {{that has been}} successfully employed to numerous complex and diverse problems from the fields of mathematics, science and engineering. DE belongs to the evolutionary family of algorithms {{which is based on}} the Darwinian theory of natural selection and evolution. DE maintains a population of candidate solutions and uses the vector differences between randomly picked candidate solution vectors to produce new, improved solutions to advance its evolutionary optimization process, generation by generation. This paper introduces a novel DE-variant — the DE with Alternating Strategies (DE-AS) and evaluates its performance using a number of benchmark problems on <b>numeric</b> <b>function</b> optimization. DE-AS effectively combines the exploitative and explorative characteristics of five different DE-variants by randomly alternating and executing these DE-variants in a single algorithm. The experimental results indicate that DE-AS can perform better than many other existing DE-variants on most of the benchmark functions, in terms of both final solution quality and convergence speed...|$|E
40|$|A <b>numeric</b> <b>function</b> ρ: ρ(k) = 1 +k- 1 /k+ 1, k ∈ N was {{considered}} in [1]. In its terms criterions of finite representability and tameness of marked quivers, posets with equivalence and dyadic posets can be obtained; Dynkin schemes and extended schemes {{also can be}} characterized. In this paper authors consider the connection of function ρ with locally-scalar representations [2] of extended Dynkin graphs. Then a family of functions ρ_n is defined [...] a generalization of function ρ, which plays an analogous part for more wide class of graphs. Also some properties of functions ρ and ρ_k are proved. References [1] L. A. Nazarova, A. V. Roiter. Norm of a relation, separating functions and representations of marked quivers. Ukr. Math. Jour., 54 (2002), No. 6, p. 808 - 840. [2] S. A. Kruglyak, A. V. Roiter. Locally-scalar representations of graphs {{in the category of}} Hilbert spaces. Prepr. Ukr. Math. Jour. (2003). Comment: 14 pages. Report: International Conference on Algebras, Modules and Rings, Lisbon 2003 (by I. Redchuk...|$|E
40|$|SimuPy is a {{framework}} for simulating interconnected dynamical system models and provides an open source, python-based tool {{that can be used}} in model- and system- based design and simulation workflows. Using SimuPy, it is easy to implement software representations of dynamical systems from <b>numeric</b> <b>functions</b> or from symbolic expressions using SymPy. SimuPy provides an API to connect these dynamical system models in block diagrams. The aggregate dynamics are automatically combined and can be simulated using the ordinary differential equation solvers provided by SciPy (or any solvers with the same interface). SimuPy can also handle event-based discontinuities by monitoring event functions, interrupting the integration upon a zero-crossing, and re-starting integration after using a root finder to determine the location of the discontinuity event...|$|R
40|$|Ceteris paribus (other {{things being}} equal) {{preference}} provides a convenient means for stating constraints on <b>numeric</b> utility <b>functions,</b> but direct constructions of numerical utility representations from such statements have exponential worstcase cost. This paper describes more efficient constructions that combine analysis of utility independence with constraintbased search...|$|R
2500|$|In some {{settings}} it {{is natural}} to consider primitive recursive functions that take as inputs tuples that mix numbers with truth values (that is t for true and f for false), or that produce truth values as outputs [...] This {{can be accomplished by}} identifying the truth values with numbers in any fixed manner. [...] For example, it is common to identify the truth value t with the number 1 and the truth value f with the number 0. [...] Once this identification has been made, the characteristic function of a set A, which always returns 1 or 0, {{can be viewed as a}} predicate that tells whether a number is in the set A. [...] Such an identification of predicates with <b>numeric</b> <b>functions</b> will be assumed for the remainder of this article.|$|R
