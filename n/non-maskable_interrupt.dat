31|5|Public
25|$|After {{it became}} clear that it had been a mistake to ignore the issue of PC compatibility, Wang belatedly {{released}} an emulation board for Wang PC that enabled operation of many PC compatible software packages. The board accomplished this by monitoring all I/O and memory transactions (visible in those days before North/South bridge chips to any board plugged into a slot on the expansion bus) and generating a <b>non-maskable</b> <b>interrupt</b> (NMI) whenever an operation was deemed to involve an incompatible device, requiring emulation.|$|E
25|$|The CPU recognizes seven {{interrupt}} levels. Levels 1 through 5 {{are strictly}} prioritized. That is, a higher-numbered interrupt can always interrupt a lower-numbered interrupt. In the status register, a privileged instruction {{allows one to}} set the current minimum interrupt level, blocking lower or equal priority interrupts. For example, if the interrupt level in the status register is set to 3, higher levels from 4 to 7 can cause an exception. Level 7 is a level triggered <b>Non-maskable</b> <b>interrupt</b> (NMI). Level 1 can be interrupted by any higher level. Level 0 means no interrupt. The level is stored in the status register, and is visible to user-level programs.|$|E
2500|$|Forcing a {{complete}} dump of virtual memory will capture an active rootkit (or a kernel dump {{in the case}} of a kernel-mode rootkit), allowing offline forensic analysis to be performed with a debugger against the resulting dump file, without the rootkit being able to take any measures to cloak itself. This technique is highly specialized, and may require access to non-public source code or debugging symbols. Memory dumps initiated by the operating system cannot always be used to detect a hypervisor-based rootkit, which is able to intercept and subvert the lowest-level attempts to read memoryâ€”a hardware device, such as one that implements a <b>non-maskable</b> <b>interrupt,</b> may be required to dump memory in this scenario. [...] Virtual machines also make it easier to analyze the memory of a compromised machine from the underlying hypervisor, so some rootkits will avoid infecting virtual machines for this reason.|$|E
5000|$|Deterministic {{interrupt}} handling {{as well as}} fast <b>non-maskable</b> <b>interrupts</b> ...|$|R
50|$|ATNRQ0...7*:Attention Requests. These are {{reserved}} for boards to signal for processor attention, a term which covers Interrupts and Direct Memory Access (DMA). The wise choice of signal does not commit these lines to being specific types, such as maskable <b>interrupts,</b> <b>non-maskable</b> <b>interrupts,</b> or DMA.|$|R
50|$|The bit, {{which is}} bit 9 of the FLAGS register, may be set or cleared by {{programs}} with sufficient privileges, as usually {{determined by the}} Operating System. If the flag is set to 1, maskable hardware interrupts will be handled. If cleared (set to 0), such interrupts will be ignored. IF {{does not affect the}} handling of <b>non-maskable</b> <b>interrupts</b> or software interrupts generated by the INT instruction.|$|R
5000|$|ABORT:a special-purpose, <b>non-maskable</b> <b>interrupt</b> (65C816 only, see below), level-triggered ...|$|E
50|$|Clock {{and control}} signals {{were used to}} manage the traffic on the bus. For example the DO Disable line would {{tristate}} the address lines during direct memory access. Unassigned lines of the original bus specification were later assigned to support more advanced processors. For example, the Zilog Z-80 processor had a <b>non-maskable</b> <b>interrupt</b> line that the Intel 8080 processor did not. One unassigned line of the S-100 bus then was reassigned to support the <b>non-maskable</b> <b>interrupt</b> request.|$|E
50|$|The Operating System's <b>Non-Maskable</b> <b>Interrupt</b> {{dispatch}} routine reads this {{register to}} determine {{the reason for the}} interrupt and so which service routine to execute.|$|E
50|$|External {{interrupts}} are {{triggered by}} falling/rising edges or high/low potential at the interrupt port, {{leading to an}} interrupt request (IRQ) in the controller. Hardware interrupts are divided into maskable <b>interrupts</b> and <b>non-maskable</b> <b>interrupts</b> (NMI). The triggering of maskable interrupts can be stopped in some time-critical functions. If an interrupt is called, the current instruction pointer (IP) is saved on the stack, and the stack pointer (SP) is decremented. The address of the interrupt service routine (ISR) is read from the interrupt vector table and loaded to the IP register, and the ISR is executed as a consequence.|$|R
5000|$|HPET is a {{continuously}} running timer {{that counts}} upward, not a one-shot device that counts down to zero, causes one interrupt and then stops. Since HPET compares the actual timer value and the programmed target value on equality rather than [...] "greater or equal", interrupts can be missed {{if the target}} time has already passed when the comparator value is written into the chip's register. In such a case, {{not only is the}} intended interrupt missed, but actually set far into the future (about 232 or 264 counts). In the presence of <b>non-maskable</b> <b>interrupts</b> (such as a System Management Interrupt (SMI)) that do not have a hard upper bound on their execution time, this race condition requires time-consuming re-checks of the timer after setup and is hard to avoid completely. The difficulties are exacerbated if the comparator value is not synchronized with the timer immediately, but delayed by one or two ticks, as some chipsets do.|$|R
5000|$|<b>Non-maskable</b> <b>interrupt</b> (NMI): a {{hardware}} interrupt that lacks an associated bit-mask, {{so that it}} can never be ignored. NMIs are used for the highest priority tasks such as timers, especially watchdog timers.|$|E
5000|$|It {{should also}} be noted that the Z80 {{supports}} a <b>non-maskable</b> <b>interrupt</b> with /NMI being on Pin 17 of the original 40 pin DIP package. [...] Since a <b>non-maskable</b> <b>interrupt</b> will regain control of the CPU even after executing the instruction sequence DI / HALT, that pair does not represent a true HCF, it will only result in a HCF condition if either the /NMI pin is connected directly to the +5V rail, making the generation of that signal impossible, or if the interrupt routine that services /NMI ends with a return, placing it back in the HALT state.|$|E
5000|$|In computing, a <b>non-maskable</b> <b>interrupt</b> (NMI) is a {{hardware}} interrupt that standard interrupt-masking techniques {{in the system}} cannot ignore. It typically occurs to signal attention for non-recoverable hardware errors. (Some NMIs may be masked, but only by using proprietary methods specific to the particular NMI.) ...|$|E
50|$|Any value {{written to}} NMIRES resets the bits in NMIST which {{indicate}} {{the reason for}} the most recent <b>Non-Maskable</b> <b>Interrupt.</b> This is used by interrupt dispatch code in the Operating System and there would ordinarily not be a reason for a user program to write here.|$|E
50|$|It {{provided}} only {{floppy disk}} and Centronics parallel interfaces, plus a <b>non-maskable</b> <b>interrupt</b> button. The +D's casing was simple folded steel, {{which was not}} only stronger than before but acted as a heatsink, improving reliability. Apart from the missing ports, though, it was software-compatible with the larger device.|$|E
50|$|The {{hardware}} interrupt system supports a 4-bit interrupt priority input, which {{needed to be}} higher than the priority level stored in the status register (bits 12-15) in order for the interrupt request to be served. In addition, the /LOAD input provides a <b>non-maskable</b> <b>interrupt</b> facility with a dedicated vector.|$|E
50|$|Not mapped {{into the}} address space is a 12-bit program counter and an {{associated}} hardware stack (four or six levels deep, depending on model). There {{are only two}} status bits (carry and zero), and they are banked based on processor mode, with separate status bits for normal, interrupt and <b>non-maskable</b> <b>interrupt</b> operation.|$|E
5000|$|The LPC1100(X)L-series {{consists}} of three subseries: LPC111x, LPC111xL, and LPC111xXL. The LPC111xL and LPC111xXL include the power profiles, a windowed watchdog timer, and a configurable open-drain mode. The LPC1110XL adds a <b>Non-Maskable</b> <b>Interrupt</b> (NMI) and 256-byte page flash erase function. The LPC1114-LPCXpresso and LPC1115-LPCXpresso development board are available from NXP. The summary for these series are: ...|$|E
50|$|A {{common use}} of a hybrid {{interrupt}} is for the NMI (<b>non-maskable</b> <b>interrupt)</b> input. Because NMIs generally signal major - or even catastrophic - system events, a good implementation of this signal tries {{to ensure that the}} interrupt is valid by verifying that it remains active for a period of time. This 2-step approach helps to eliminate false interrupts from affecting the system.|$|E
50|$|The latter {{generated}} a <b>non-maskable</b> <b>interrupt,</b> freezing any {{software running on}} the Spectrum and allowing it to be saved to disk. This made it simple to store tape-based games on disk, to take screenshots and to enter cheat codes. A duplicate expansion connector at the back allowed other peripherals to be daisy chained, although {{the complexity of the}} DISCiPLE meant that many would not work correctly.|$|E
5000|$|Like Sinclair's own ZX Interface 1, the DISCiPLE was a {{wedge-shaped}} unit fitting {{underneath the}} Spectrum. It {{was designed as}} a super-interface, providing all the facilities a Spectrum owner could need. In addition to floppy-disk, parallel port printer interface and a [...] "magic button" [...] (see <b>Non-maskable</b> <b>interrupt),</b> it also offered twin joystick ports, Sinclair ZX Net-compatible network ports and an inhibit button for disabling the device.|$|E
50|$|The processor's <b>non-maskable</b> <b>{{interrupt}}</b> (NMI) input is edge sensitive, {{which means}} that the interrupt is triggered by the falling edge of the signal rather than its level. The implication of this feature is that a wired-OR interrupt circuit is not readily supported. However, this also prevents nested NMI interrupts from occurring until the hardware makes the NMI input inactive again, often under control of the NMI interrupt handler.|$|E
50|$|The system's {{keyboard}} has a {{mouse port}} built into either side. The {{front of the}} computer has a headphone jack, volume control, joystick, keyboard and mouse ports. The top has a retractable carrying handle only on non-Compact models, a reset button, and a <b>non-maskable</b> <b>interrupt</b> (NMI) button. The rear {{has a variety of}} ports, including stereoscopic output for 3D goggles, FDD and HDD expansion ports, and I/O board expansion slots.|$|E
5000|$|... "Random reboot" [...] is a non-technical term {{referring}} to an unintended (and often undesired) reboot following a system crash, whose root cause may not immediately be evident to the user. Such crashes may occur {{due to a}} multitude of software and hardware problems, such as triple faults. They are generally symptomatic of an error in ring 0 that is not trapped by an error handler in an operating system or a hardware-triggered <b>non-maskable</b> <b>interrupt.</b>|$|E
50|$|After {{it became}} clear that it had been a mistake to ignore the issue of PC compatibility, Wang belatedly {{released}} an emulation board for Wang PC that enabled operation of many PC compatible software packages. The board accomplished this by monitoring all I/O and memory transactions (visible in those days before North/South bridge chips to any board plugged into a slot on the expansion bus) and generating a <b>non-maskable</b> <b>interrupt</b> (NMI) whenever an operation was deemed to involve an incompatible device, requiring emulation.|$|E
50|$|A {{watchdog}} timer may initiate any of {{several types of}} corrective action, including maskable interrupt, <b>non-maskable</b> <b>interrupt,</b> processor reset, fail-safe state activation, power cycling, or combinations of these. Depending on its architecture, the type of corrective action or actions that a watchdog can trigger may be fixed or programmable. Some computers (e.g., PC compatibles) require a pulsed signal to invoke a processor reset. In such cases, the watchdog typically triggers a processor reset by activating an internal or external pulse generator, which in turn creates the required reset pulses.|$|E
50|$|For example, {{the above}} diagram shows a likely {{configuration}} for a two-stage watchdog timer. During normal operation the computer regularly kicks Stage1 {{to prevent a}} timeout. If the computer fails to kick Stage1 (e.g., due to a hardware fault or programming error), Stage1 will eventually timeout. This event will start the Stage2 timer and, simultaneously, notify the computer (by means of a <b>non-maskable</b> <b>interrupt)</b> that a reset is imminent. Until Stage2 times out, the computer may attempt to record state information, debug information, or both. The computer will be reset upon Stage2 timeout.|$|E
50|$|The CPU recognizes seven {{interrupt}} levels. Levels 1 through 5 {{are strictly}} prioritized. That is, a higher-numbered interrupt can always interrupt a lower-numbered interrupt. In the status register, a privileged instruction {{allows one to}} set the current minimum interrupt level, blocking lower or equal priority interrupts. For example, if the interrupt level in the status register is set to 3, higher levels from 4 to 7 can cause an exception. Level 7 is a level triggered <b>Non-maskable</b> <b>interrupt</b> (NMI). Level 1 can be interrupted by any higher level. Level 0 means no interrupt. The level is stored in the status register, and is visible to user-level programs.|$|E
5000|$|Rockwell advertised the $375 AIM-65, with 1K RAM, as an [...] "easy, {{inexpensive}} computer ... for learning, designing, work or just fun". Standard software {{included the}} system console monitor software in ROM, called Advanced Interactive Monitor. It featured an assembler, disassembler, setting and viewing memory and registers, starting execution of other programs and more. Single stepping {{was made possible}} using <b>non-maskable</b> <b>interrupt</b> (NMI). The command prompt was the less-than sign [...] "<", and on receiving a single character command, it added this input character and the greater-than sign [...] ">". If the thermal printer was turned on, this would be output on a single line. The monitor included a number of service routines that could be accessed and used by a user's program to control I/O and code execution, and was fully documented, including source code.|$|E
5000|$|Forcing a {{complete}} dump of virtual memory will capture an active rootkit (or a kernel dump {{in the case}} of a kernel-mode rootkit), allowing offline forensic analysis to be performed with a debugger against the resulting dump file, without the rootkit being able to take any measures to cloak itself. This technique is highly specialized, and may require access to non-public source code or debugging symbols. Memory dumps initiated by the operating system cannot always be used to detect a hypervisor-based rootkit, which is able to intercept and subvert the lowest-level attempts to read memoryâ€”a hardware device, such as one that implements a <b>non-maskable</b> <b>interrupt,</b> may be required to dump memory in this scenario. [...] Virtual machines also make it easier to analyze the memory of a compromised machine from the underlying hypervisor, so some rootkits will avoid infecting virtual machines for this reason.|$|E
50|$|The AWE32 didn't use its MPU-401 port {{to access}} the EMU8000 - Creative decided to expose the EMU8000's {{registers}} directly, through three sets of non-standard ports, and interpret MIDI commands in software on the host CPU. As with the Gravis Ultrasound, software designers had to write special AWE32 support into their programs. To support older software, the AWE32 featured OPL-3 FM synthesis, and came with the AWEUTIL program which attempted to provide GM/MT-32/GS redirection to the native AWE hardware; however, AWEUTIL wasn't compatible with all programs or motherboards due to its use of the <b>non-maskable</b> <b>interrupt</b> (a feature that was omitted or disabled on many clone boards), and it used a lot of precious DOS conventional memory. Also, if a game used DOS 32-bit protected mode through a non-DPMI compliant DOS extender, then the MPU-401 emulation would not function and the EMU8000 would not be used unless directly supported by the software. This {{did not affect the}} Creative Wave Blaster daughterboard header. AWE32's usage in Windows was simplified by the fact that Windows 3.1x had drivers which made the OPL3 and the EMU8000 appear like any another MIDI peripheral, on their own MIDI interfaces.|$|E
50|$|The 8085 has {{extensions}} {{to support}} new interrupts, with three maskable vectored interrupts (RST 7.5, RST 6.5 and RST 5.5), one <b>non-maskable</b> <b>interrupt</b> (TRAP), and one externally serviced interrupt (INTR). Each {{of these five}} interrupts has a separate pin on the processor, a feature which permits simple systems to avoid {{the cost of a}} separate interrupt controller. The RST 7.5 interrupt is edge triggered (latched), while RST 5.5 and 6.5 are level-sensitive. All interrupts are enabled by the EI instruction and disabled by the DI instruction. In addition, the SIM (Set Interrupt Mask) and RIM (Read Interrupt Mask) instructions, the only instructions of the 8085 that are not from the 8080 design, allow each of the three maskable RST interrupts to be individually masked. All three are masked after a normal CPU reset. SIM and RIM also allow the global interrupt mask state and the three independent RST interrupt mask states to be read, the pending-interrupt states of those same three interrupts to be read, the RST 7.5 trigger-latch flip-flop to be reset (cancelling the pending interrupt without servicing it), and serial data to be sent and received via the SOD and SID pins, respectively, all under program control and independently of each other.|$|E
30|$|OProfile {{programs}} hardware counters {{to calculate}} the number of user-specified performance events and to generate a <b>non-maskable</b> <b>interrupt</b> (NMI) when the counter has counted to the user-specified count.|$|E
30|$|The Intel PT {{driver and}} Trace Analyzer are {{implemented}} as a kernel module for Linux 4.9 without any kernel modification. The kernel module registers a <b>non-maskable</b> <b>interrupt</b> handler to receive PMI when the Trace Buffer is full. The prototype is evaluated on a machine with Intel Core i 7 - 7700 running at 3.6 GHz and 16 GB memory.|$|E
40|$|An {{interrupt}} {{is provided}} to a signal processor having a <b>non-maskable</b> <b>interrupt</b> input, {{in response to}} the detection of a request for transfer to backup software. The signal processor provides a transfer signal to a transfer mechanism only after completion of the present machine cycle. Transfer to the backup software is initiated by the transfer mechanism only upon reception of the transfer signal...|$|E
