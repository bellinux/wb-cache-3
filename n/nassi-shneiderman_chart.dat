1|3|Public
40|$|The N-S Chart {{program is}} a Nassi-Shneiderman Diagram {{development}} tool. This manual, N-S Chart User Guide, shows you {{how to use the}} various parts of the program. It does not teach you how good Nassi-Shneiderman diagrams should be drawn. • If you want a brief lesson on getting started with N-S Chart, see "Learning About N-S Chart. " You should be able to follow this chapter easily, even if you've never drawn a <b>Nassi-Shneiderman</b> <b>chart</b> before. • For more detailed information on how to use N-S Chart, look through chapter 2 : Using N-S Chart. • For a brief summary of the various features of N-S Chart, see chapter 3 : Reference. If you are wanting more detailed information about the program, refer to the separate volume "N-S Chart Project Report"...|$|E
40|$|In {{recent years}} {{structured}} programming {{has emerged as}} an advanced programming technology. During this time, many tools {{have been developed for}} facilitating the programmer % use of ‘structured programming. One of these tools, the Structured Flowcharts developed by I. Nassi and B. Shneiderman in 1972, is proving its value in both the design phase and the coding phase of program development. Several programming groups in System Products Division, Endicott, New York, have used the <b>Nassi-Shneiderman</b> <b>charts</b> as replacements for conventional flowcharts in structuring programs. The charts have been used extensively on some projects for structured walk-throughs, design reviews, and education. This paper describes the <b>Nassi-Shneiderman</b> <b>charts</b> and provides explanations of their use in programming, in development process control, in walkthroughs, and in testing. It includes an analysis of the value of <b>Nassi-Shneiderman</b> <b>charts</b> compared to other design and documentation methods such as pseudo-code, HIP 0 charts, prose, and flowcharts, as well as the authors’ experiences in using the <b>Nassi-Shneiderman</b> <b>charts.</b> The paper is intended for a general data processing audience and although no special’knowledge is required, familiarity with structured programming concepts would be helpful. The reader should gain insight into the use of <b>Nassi-Shneiderman</b> <b>charts</b> as part of the total development process...|$|R
40|$|This project {{involved}} {{the development of}} N-S Chart; a NassiShneiderman Cartographer for the Apple Macintosh. N-S Chart is a tool for drawing and maintaining Nassi-Shneiderman diagrams, and incorporates the beneficial features of diagramming methods, and automated computer graphics tools discussed in chapters 2 and 3. The features of N-S Chart are discussed in chapter 7. <b>Nassi-Shneiderman</b> <b>charts</b> (N- 8 Charts), {{an alternative to the}} flowchart, are described in chapter 5. A cartographer is someone who works with charts. In the process of implementing the original Nassi-Shneiderman diagramming technique, modifications and improvements to the method were developed and implemented. Flowcharts were designed in the days of 2 nd generation languages. They do not support the constructs used in todays 3 GLs and 4 GLs. NassiShneiderman charts do. However the original Nassi-Shneiderman diagrams did have a few drawbacks which prevented them from becoming more widely used than they have been. The problems of data specification and drawability have been addressed in this project and successful solutions have been found. Chapter 8 describes aspects of user interface design. Symbols {{have been added to the}} drawing technique to support the specification of data inputs and outputs. Symbols have been modified to clarify charts and the drawing and maintenance process has been automated and simplified to an almost trivial level. Details of the implementation of N-S Chart are discussed in chapter 9 and possibilities for further extension are mentioned in chapter 10...|$|R
40|$|Currently, we {{are facing}} a {{computer}} software crisis. The ever increasing burden of maintaining software in businesses with large software holdings has led to this crisis. Over $ 30 billion per year is being spent on software maintenance worldwide. ^ One solution to the current software crisis is to produce software which has high maintainability. Highly maintainable software can be produced by effective software design; that is, the application of flexible, simple, visible, {{and easy to use}} design methodologies and tools. A new software design tool, the Pseudocode-Box (PB) diagram, is proposed in this study to meet these requirements. ^ After presenting a critical evaluation of some currently available methodologies and tools, the PB diagram is proposed with detailed rationale, advantages and disadvantages, basic structure, and an example of actual usage. Next, three performance measures of PB diagrams: understandability, productivity, and adaptability are explained. Then a research methodology to evaluate the performance of PB diagrams is introduced; a quasi-experimental design is adopted. To insure internal and external validity, a separate-sample pretest-posttest control group design is used. Next, three hypotheses regarding understandability, productivity, and adaptability of the PB diagrams are tested. ^ Experimental results provide clear evidence of the superior performance of the PB diagram during both systems development life cycle (SDLC) and systems maintenance life cycle (SMLC). The results support the hypotheses of this study. First, the PB diagram has better understandability than that of the <b>Nassi-Shneiderman</b> (N-S) <b>chart.</b> Secondly, the PB diagram results in higher productivity than that of the N-S chart. Thirdly, the PB diagram is more adaptable in terms of total time required during SMLC than that of the N-S chart. ^ Finally, an ideal combination of software design methodologies and tools for use during both systems development life cycle and systems maintenance life cycle is discussed. Limitations of this study are addressed. And directions for future research are suggested. ...|$|R

