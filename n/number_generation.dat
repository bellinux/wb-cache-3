859|2556|Public
25|$|Methods for random <b>number</b> <b>generation</b> {{where the}} {{marginal}} distribution is a binomial distribution are well-established.|$|E
25|$|Rule 30 was {{originally}} suggested {{as a possible}} block cipher for use in cryptography. Two dimensional cellular automata are used for random <b>number</b> <b>generation.</b>|$|E
25|$|The System z9 adds 128-Bit Advanced Encryption Standard (AES) to {{the list}} of {{hardware-based}} cryptographic algorithms. Other hardware-boosted features include additional random <b>number</b> <b>generation</b> and SHA algorithms. This specialized encryption hardware means System z9 potentially outperforms other platforms which must rely on encryption software.|$|E
30|$|The total squared error {{does not}} get {{modified}} over a <b>number</b> of <b>generations,</b> i.e., no improvement {{is seen in the}} rule base over a <b>number</b> of <b>generations.</b>|$|R
5000|$|... in the {{collateral}} line, the <b>number</b> of <b>generations</b> between the blood relation and the nearest common ancestor, plus the <b>number</b> of <b>generations</b> between that common ancestor and the deceased.|$|R
40|$|Analysis of some {{statistical}} {{characteristics and}} productivity of some widely used pseudorandom <b>numbers</b> <b>generation</b> algorithms, used in Monte-Carlo applications, was made. Conclusions made regarding {{the effectiveness of}} these algorithms. ???????? ?????? ?????????????? ????????????? ? ?????????????? ????????? ???????????????? ?????????? ????????? ??????????????? ???????????????????, ??????? ???????????? ? ??????? ?????, ????????? ? ?????????????? ??????? ?????-?????. ??????? ?????? ?????????? ????????????? ???? ??????????...|$|R
25|$|In {{the field}} of {{pseudorandom}} <b>number</b> <b>generation,</b> a candidate generator of undetermined quality whose output sequence lies too far outside the typical set by some statistical criteria is rejected as insufficiently random. Thus, although the typical set is loosely defined, practical notions arise concerning sufficient typicality.|$|E
2500|$|In general, Monte Carlo {{methods are}} used in {{mathematics}} to solve various problems by generating suitable random numbers (see also Random <b>number</b> <b>generation)</b> and observing that fraction of the numbers that obeys some property or properties. The method is useful for obtaining numerical solutions to problems too complicated to solve analytically. [...] The most common application of the Monte Carlo method is Monte Carlo integration.|$|E
5000|$|Because {{the outcome}} of quantum-mechanical events cannot in {{principle}} be predicted, they are the ‘gold standard’ for random <b>number</b> <b>generation.</b> Some quantum phenomena used for random <b>number</b> <b>generation</b> include: ...|$|E
30|$|From the results, we can {{see that}} the best results are {{obtained}} when the <b>number</b> of <b>generation</b> is 20, 000. Thus, for higher <b>number</b> of <b>generations</b> and larger population size, the system has better performance.|$|R
30|$|In {{the first}} phase, the GAOM {{was applied to}} {{determine}} the population size and <b>number</b> of <b>generations</b> for the two algorithms. The population size and <b>number</b> of <b>generations</b> were set as 1000 and 4000 for the Falg, whilst they were set equal to 1000 and 3000 for the Salg. These population size and <b>number</b> of <b>generations</b> which were chosen, represent the optimal choice {{with respect to the}} statistical parameters obtained and the execution time.|$|R
50|$|In a {{cellular}} automaton, a finite pattern {{is called a}} spaceship if it reappears after a certain <b>number</b> of <b>generations</b> in the same orientation but in a different position. The smallest such <b>number</b> of <b>generations</b> is called {{the period of the}} spaceship.|$|R
5000|$|Random <b>number</b> <b>generation</b> (including Mersenne Twister MT19937).|$|E
5000|$|Pseudo-random <b>number</b> <b>generation,</b> {{including}} Mersenne Twister MT19937.|$|E
5000|$|Crypt - Random <b>number</b> <b>generation,</b> Digests and encoding/decoding engines ...|$|E
50|$|KZFT readily uncovers small {{deviations}} from a constant spectral density of white noise resulting from computer random numbers generator. Such computer random <b>number</b> <b>generations</b> become predictable {{in the long}} run. Kolmogorov complexity provides the opportunity to generate unpredictable sequences of random numbers.|$|R
30|$|Step 1 {{consists}} of two random <b>number</b> <b>generations</b> and one copy operation, which take O(1) time. For simplicity, we assume here that the dimensionality is constant d[*]=[*]O(1). In case of very high dimensions, the complexities should be multiplied by d due to the distance calculations.|$|R
40|$|In this work, {{we propose}} device {{independent}} true random <b>numbers</b> <b>generation</b> protocols based on non-inequality paradoxes such as Hardy's and Cabello's non-locality argument. The efficiency of generating randomness in our protocols are {{far better than}} any other proposed protocols certified by CHSH inequality or other non-locality test involving inequalities. Thus, highlighting non-inequality paradox as an important resource for device independent quantum information processing in particular generating true randomness. As a byproduct, we find that the non-local bound of the Cabello's argument with arbitrary dimension {{is the same as the}} one achieved in the qubits system. More interestingly, we propose a new dimension witness paradox based on the Cabello's argument, which can be used for constructing semi-device-independent true random <b>numbers</b> <b>generation</b> protocol...|$|R
5000|$|... #Subtitle level 3: Importance {{of strong}} random <b>number</b> <b>generation</b> ...|$|E
5000|$|... #Subtitle level 3: Random <b>Number</b> <b>Generation</b> Based Loot Systems ...|$|E
50|$|For the {{generation}} of uniform random variates, see Random <b>number</b> <b>generation.</b>|$|E
30|$|Generally, the {{algorithm}} terminates when either a maximum <b>number</b> of <b>generations</b> is reached, or a satisfactory fitness level {{has been reached}} for the population. If {{the algorithm}} is terminated due to a maximum <b>number</b> of <b>generations,</b> a satisfactory solution {{may or may not}} have been reached.|$|R
30|$|Step 4 Estimate whether lower-level {{population}} achieves {{the maximum}} <b>number</b> of <b>generations.</b> If {{it reaches the}} upper bound, the optimal variables and optimal value are recorded. Otherwise, procedures of selection, crossover and mutation are invoked and step 3 is repeated till the maximal <b>number</b> of <b>generations</b> is achieved.|$|R
500|$|... where T is the <b>number</b> of <b>generations,</b> N'e is the {{effective}} population size, and p is the initial frequency for the given allele. The {{result is the}} <b>number</b> of <b>generations</b> expected to pass before fixation occurs for a given allele in a population with given size (N'e) and allele frequency (p).|$|R
5000|$|CURAND - CUDA Random <b>Number</b> <b>Generation</b> library, see {{main and}} docs ...|$|E
5000|$|Random <b>number</b> <b>generation,</b> matrix for bootstrapping, Gibbs {{sampling}} and Monte Carlo simulation ...|$|E
5000|$|... {{pseudorandom}} <b>number</b> <b>generation,</b> e.g. {{to assign}} items to bins for A/B tests ...|$|E
30|$|Step 2 Judge {{whether the}} {{population}} {{reaches the maximum}} <b>number</b> of <b>generation.</b> If the GA runs for the maximal <b>number</b> of <b>generations,</b> record the optimal value {{and then go to}} the next step. Otherwise, GA operations of selection, crossover and mutation are carried out; and then go back to Step 1.|$|R
30|$|The genetic {{algorithm}} {{goes into a}} loop, the number of iterations of this loop {{is defined by the}} <b>number</b> of <b>generations.</b> After the end of the specified <b>number</b> of <b>generations,</b> the algorithm selects the individual with the highest fitness from the current population to represent the solution of the problem.|$|R
5000|$|... where T is the <b>number</b> of <b>generations,</b> Ne is the {{effective}} population size, and p is the initial frequency for the given allele. The {{result is the}} <b>number</b> of <b>generations</b> expected to pass before fixation occurs for a given allele in a population with given size (Ne) and allele frequency (p).|$|R
5000|$|HP-11C — Scientific Programmable, {{including}} hyperbolics, gamma function, statistical functions, {{and random}} <b>number</b> <b>generation.</b>|$|E
50|$|Methods for random <b>number</b> <b>generation</b> {{where the}} {{marginal}} distribution is a binomial distribution are well-established.|$|E
50|$|Niederreiter's book Random <b>Number</b> <b>Generation</b> and Quasi-Monte Carlo Methods won the Outstanding Simulation Publication Award.|$|E
30|$|Step- 3 : Specify {{termination}} criteria by <b>number</b> of <b>generations.</b>|$|R
30|$|The <b>number</b> of <b>generations</b> {{reaches a}} {{predefined}} maximal iteration value.|$|R
30|$|The <b>number</b> of <b>generations</b> {{set by the}} {{designer}} are over.|$|R
