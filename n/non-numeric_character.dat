3|14|Public
500|$|A [...] (or [...] ) clause is {{a string}} of characters, each of which {{represents}} {{a portion of the}} data item and what it may contain. Some picture characters specify the type of the item and how many characters or digits it occupies in memory. For example, a [...] indicates a decimal digit, and an [...] indicates that the item is signed. Other picture characters (called [...] and [...] characters) specify how an item should be formatted. For example, a series of [...] characters define character positions as well as how a leading sign character is to be positioned within the final character data; the rightmost <b>non-numeric</b> <b>character</b> will contain the item's sign, while other character positions corresponding to a [...] to the left of this position will contain a space. Repeated characters can be specified more concisely by specifying a number in parentheses after a picture character; for example, [...] is equivalent to [...] Picture specifications containing only digit (...) and sign (...) characters define purely [...] data items, while picture specifications containing alphabetic (...) or alphanumeric (...) characters define [...] data items. The presence of other formatting characters define [...] or [...] data items.|$|E
40|$|This {{technique}} uses lexical {{matching within}} domainspecific free-text {{to locate and}} remove terms contained in the Metathesaurus or SPECIALIST Lexicon. The remaining character strings of text were presented to domain experts along with the original sections of text for manual review. Internet search engines were used to verify questionable character strings. The key element of this technique was the SPECIALIST Lexicon which {{was used to remove}} common words and known variations of medical terms from the text. The removal of these terms reduced the number of <b>non-numeric</b> <b>character</b> strings remaining in the text from 12, 075 to 574. Ninety-three percent of 230 randomly selected remaining character strings resulted in the identification of undocumented vocabulary terms...|$|E
50|$|In September 2013, the Global Volcanism Program {{announced}} a new format for Volcano Number. The new format is a 6-digit number, and no longer includes <b>non-numeric</b> <b>characters.</b>|$|R
50|$|The Luhn mod N {{algorithm}} {{is an extension}} to the Luhn algorithm (also known as mod 10 algorithm) that allows it to work with sequences of <b>non-numeric</b> <b>characters.</b> This can be useful when a check digit is required to validate an identification string composed of letters, a combination of letters and digits or even any arbitrary set of characters.|$|R
50|$|Early {{computers}} that were exclusively decimal include the ENIAC, IBM NORC, IBM 650, IBM 1620, IBM 7070. In these machines the basic unit of data was the decimal digit, encoded {{in one of}} several schemes, including binary-coded decimal or BCD, bi-quinary, excess-3, and two-out-of-five code. Except for the 1620, these machines used word addressing. When <b>non-numeric</b> <b>characters</b> were used in these machines, they were encoded as two decimal digits.|$|R
5000|$|Small Basic {{supports}} {{basic data}} types, like strings, integers and decimals, and will readily convert one type to another {{as required by}} the situation. In the example, both the [...] and [...] methods read a string from the command line, but [...] rejects any <b>non-numeric</b> <b>characters.</b> This allows the string to be converted to a numeric type treated as a number rather than a string by the [...] operator.|$|R
50|$|SBasic was {{compatible}} with the syntax of Basic, a programming language commonly used in the 1970s through the 1980s, as well as Fortran77. However, the language relaxed many of the requirements of Basic and had more flexibility than Fortran. For instance, line numbers were optional, and permitted <b>non-numeric</b> <b>characters.</b> In addition, SBasic offered developers structured programming concepts, including recursion and nesting. Many PL-1 programs could be compiled with little modification, though SBasic did not offer an extensive function library.|$|R
25|$|Many {{children}}'s, shōnen and shōjo manga use furigana (however, rarely on numerals). Shōnen and shōjo manga {{tend to have}} furigana for all <b>non-numeric</b> <b>characters,</b> while children manga, such as Doraemon, {{may also}} ignore furigana on elementary-grade kanji. There are also books with a phonetic guide (mainly in hiragana but sometimes in romaji) for Japanese learners, which may be bilingual or Japanese only. These are popular with foreigners wishing to master Japanese faster and enjoy reading Japanese short stories, novels or articles.|$|R
5000|$|It {{alludes to}} the many {{confusing}} error messages that technology users have {{had to put up}} with in the Information Age. [...] "Out of Paper" [...] (also seen as [...] "PC LOAD LETTER" [...] for some printers) is familiar to many office workers. [...] "Redo From Start" [...] was the somewhat unhelpful error message produced by the BASIC interpreter in many early home computers when <b>non-numeric</b> <b>characters</b> were entered in response to a prompt for numerical input. Other inscrutable Hex-talk includes: ...|$|R
500|$|To {{check digit}} calculations: First, convert any <b>non-numeric</b> <b>characters</b> into numbers. [...] Letters are {{assigned}} values alphabetically from 10 to 35 (A=10, Z=35), < is 0. [...] Second, multiply each number by a weighting value. [...] This is a repeating pattern of 7,3,1. [...] For example, the first number is multiplied by 7, the second number by 3, the third by 1, the fourth by 7, the fifth by 3, etc. [...] Now, sum the products {{to obtain a}} single number. [...] Finally, divide the number by 10 and the remainder is your check digit (this {{is known as a}} modulo 10 calculation).|$|R
50|$|For {{check digit}} calculations: First, convert any <b>non-numeric</b> <b>characters</b> into numbers. Letters are {{assigned}} values alphabetically from 10 to 35 (A=10, Z=35), < is 0. Second, multiply each number by a weighting value. This is a repeating pattern of 7,3,1. For example, the first number is multiplied by 7, the second number by 3, the third by 1, the fourth by 7, the fifth by 3, etc. Now, sum the products {{to obtain a}} single number. Finally, divide the number by 10 and the remainder is your check digit (this {{is known as a}} modulo 10 calculation).|$|R
50|$|As a SIP {{address is}} text, {{much like an}} e-mail address, it may contain <b>non-numeric</b> <b>characters.</b> As the client may be a SIP phone or other device with just a numeric, telephone-like keypad, various schemes exist to {{associate}} an entirely numeric identifier to a publicly reachable SIP address. These include the iNum Initiative (which issues E.164-formatted numbers, where the corresponding SIP address is the number '@sip.inum.net'), SIP Broker-style services (which associate a numeric *prefix to the SIP domain name) and the e164.org and e164.arpa domain name servers (which convert numbers to addresses one-by-one as DNS reverse-lookups).|$|R
50|$|To {{check digit}} calculations: First, convert any <b>non-numeric</b> <b>characters</b> into numbers. Letters are {{assigned}} values alphabetically from 10 to 35 (A=10, Z=35), < is 0. Second, multiply each number by a weighting value. This is a repeating pattern of 7,3,1. For example, the first number is multiplied by 7, the second number by 3, the third by 1, the fourth by 7, the fifth by 3, etc. Now, sum the products {{to obtain a}} single number. Finally, divide the number by 10 and the remainder is your check digit (this {{is known as a}} modulo 10 calculation).|$|R
50|$|In {{traditional}} games, a level-up {{would occur}} once every ten lines are cleared. After a level-up, the blocks fall slightly faster, and typically more points are given. In some newer games such as Tetris Worlds, {{the number of}} lines required vary upon each new level. For example, NES Tetris operates at 60 frames per second. At level 0, a piece falls one step every 48 frames, and at level 19, a piece falls one step every 2 frames. Level increments either terminate {{at a certain point}} (Game Boy Tetris tops off at level 20) or increase forever yet not in speed after a certain point. NES Tetris will level up in speed until level 29 (due to limitations of the game's engine, pieces are not capable of dropping faster than this), but tool-assisted emulation will show that the level indicator increases indefinitely—eventually leading to a glitch where the meter displays <b>non-numeric</b> <b>characters.</b> Modern games such as Tetris the Grand Master or Tetris Worlds, at their highest levels, opt to drop a piece more than one row per frame. Pieces will appear to reach the bottom as soon as they spawn. As a result, these games have a delay that lets the player slide the piece on the bottom for a moment to help deal with an otherwise unplayable fall speed. In some games, the hover time is regenerated after a piece is moved or rotated.|$|R
40|$|Here we {{describe}} {{the diversity of the}} Malagasy Nesomyrmex brevicornis-group as the final installment of series describing the complete Malagasy Nesomyrmex fauna. In the current paper introduce the N. brevicornis-group, a newly outlined species group. We split this group from one of the four former groups, N. madecassus-group (sensu Csősz and Fisher 2015). The relatively small number of individuals available within the N. brevicornis-group relative to the large number of OTUs hampers the use of sophisticated statistical techniques to evaluate the morphological data. Instead, we assess the diversity of the N. brevicornis-group via a conventional morphology-based approach relying upon <b>non-numeric</b> <b>characters</b> (shape, sculpture, color etc.) recorded by simple eye inspection. Morphometric data are used as secondary data to confirm the most probable boundaries between species, but without employing statistical analyses. We rejected prior species hypotheses imposed by the primary approach if a non-overlapping range of a single index calculated from continuous numeric traits was found between two hypothesized species. Our methods render every species in this revisionary work separable via both salient features and morphometric traits. Our approach reveals the existence of nine morphologically distinct species, Nesomyrmex brevicornis sp. n., N. brunneus sp. n., N. cingulatus sp. n., N. edentates sp. n., N. flavigaster sp. n., N. longiceps sp. n., N. minutus sp. n., N. punctaticeps sp. n., and N. sellaris sp. n [...] Geographic maps showing the distribution of each species are provided, along with an updated key to workers of Malagasy Nesomyrmex species groups that includes the newly outlined N. brevicornis-group...|$|R
40|$|In this work, {{we present}} {{accordion}} arrays, a straightforward and effective memory compression technique targeting Unicode-based character arrays. In many <b>non-numeric</b> Java programs, <b>character</b> arrays represent a significant fraction (30 - 40 % on average) {{of the heap}} memory allocated. In many locales, most, but not all, of those arrays consist entirely of characters whose top bytes are zeros, and, hence, can be stored as byte arrays without loss of information. In {{order to get the}} almost factor of two compression rate for character vectors, two challenges must be overcome: 1) all code that reads and writes character vectors must dynamically determine which kind of array is being accessed and perform byte or character loads/stores as appropriate, and 2) compressed vectors must be dynamically inflated when an incompressible character is written. We demonstrate how these challenges can be overcome with minimal space and execution time overhead, resulting in an average speedup of 2 % across our benchmark suite, with individual speedups as high as 8 %...|$|R

