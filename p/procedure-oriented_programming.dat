5|5|Public
5000|$|PureBasic is a [...] "Second {{generation}} BASIC" [...] language, with structured conditionals and loops, and <b>procedure-oriented</b> <b>programming</b> supported. The user is {{not required}} to use procedures, so a programmer may opt for a coding style which includes Goto, Gosub Label, and Return.|$|E
50|$|Second-generation BASICs (for example, VAX Basic, SuperBASIC, True BASIC, QuickBASIC, BBC BASIC, Pick BASIC and PowerBASIC) {{introduced}} {{a number of}} features into the language, primarily related to structured and <b>procedure-oriented</b> <b>programming.</b> Usually, line numbering is omitted from the language and replaced with labels (for GOTO) and procedures to encourage easier and more flexible design. In addition keywords and structures to support repetition, selection and procedures with local variables were introduced.|$|E
40|$|Most {{object-oriented}} {{languages are}} objective: an object always {{responds to the}} same message in the same way. Subjective objects more closely match naturally occurring systems, and they provide consistent solutions {{to a wide range}} of problems, problems that otherwise must be solved by varied and specialized mechanisms. Applying a perspective-receiver symmetry principle in designing the subjectivity semantics of an object-oriented language results in a semantically uncluttered language with a surprisingly wide range of utility. We employ this approach in creating the language Us, a subjective version of Self. 1 Introduction: Subjectivity meets Objects Object-orientation [MMN] wins converts because it can more closely simulate the real world than <b>procedure-oriented</b> <b>programming,</b> yet most object-oriented languages are stuck in a 19 -th century, objective stance. A Self or Smalltalk object, for example, always exhibits the same behavior, no matter what the context. But whenever multiple min [...] ...|$|E
40|$|This paper proposes several {{concepts}} {{that form the}} basis for slicing object-oriented programs. In the case of object-oriented languages, new relations occur between language constructs such as classes, methods, and messages. Thus new forms of dependencies have to be considered in addition to the traditional control and data dependencies that form the basis of most software maintenance tools that are currently available for maintaining <b>procedure-oriented</b> <b>programs.</b> We show how the proposed slicing concepts can be applied within the software maintenance process by giving an illustration through an example of Java program...|$|R
40|$|As we {{move from}} {{developing}} <b>procedure-oriented</b> to object-oriented <b>programs,</b> the complexity traditionally found in functions and procedures {{is moving to}} the connections among components. Different faults occur when components are integrated to form higher level structures that aggregate the behavior and state of the components. Consequently, we need to place more effort on testing the connections among components. Although object-oriented technologies provide abstraction mechanisms for building components that can then be integrated to form applications, it also adds new compositional relations that can contain faults, which are most properly found during integration testing. This paper describes techniques for analyzing and testing the polymorphic relationships that occur in object-oriented software...|$|R
40|$|As we move firm {{developing}} <b>procedure-oriented</b> to object-oriented <b>programs,</b> {{the complexity}} traditionally found in functions and procedures {{is moving to}} the connections among components. More faults occur as components are integrated to form higher level aggregates of behavior and state. Consequently, we need to place more e [...] lyoi on testing the connections among components. Although object-oriented technology provides abstraction mechanisms to build components to integrate, it also adds new compositional relations that can contain faults, which must be found during integration testing. This paper describes new techniques for analyzing and testing the polymorphic relationships that occur in object-oriented software. The application of these techniques can result in an increased ability to find faults and overall higher quality software...|$|R
40|$|For {{the past}} decade, {{with the growing}} {{popularity}} of World Wide Web, object-oriented programming, such as Java and Visual. Net, have been widely applied to develop large software system on Internet. Moreover, object-oriented (OO) software techniques have gradually replaced <b>procedure-oriented</b> <b>programming</b> as the mainstream in software industry. However, the software errors still increases in proportion to the software system complexity. Although, there have been lots of researches on the object-oriented software testing (OOT) proposed to test OO software errors, most of them focused on the single class testing instead of high level testing for OO specification. This paper provides a testing framework based on finite automata to test the inconsistency and incompleteness of OO specification. This approach differs from formal proofs and model checking in that it performs the testing directly on an executable finite automata without manually deriving the formal proofs or generating a great deal of state spaces. Keywords: Object-Oriented Program, software testing, software complexity. 1...|$|E
40|$|Basic {{computer}} {{training is}} an important part of the fundamental training for engineers in each application area. The article shows that the purpose of such training has been always the formation of the basic theoretical concepts and practical skills to solve problems by programming with computers. All the formation periods and the following improvement of basic computer training were analyzed by the example of the National Research University «Moscow Power Engineering Institute» (NRU MPEI). Special role of the structured programming technology is mentioned, the use of which allows you to effectively develop easy understood algorithms and computer programs with a minimal number of errors. Particular attention is drawn to the serious methodological support in the 80 th (the last century), the basic computer training of students by the Ministry of Higher Education of the USSR and the Research Institute of Higher School Problems. The important role of methodical councils of universities on the computer technology application to coordinate in those years the basic computer training at the University is mentioned. The article shows the new teaching methods of the main discipline with generally accepted today in Russia term “Informatics”. This method was developed in the National Research University «Moscow Power Engineering Institute» at the Applied Mathematics Department, providing the basic computer training of students in 1 – 2 semesters. This new teaching method has such a «reference point» as fundamental programming concepts «task – method of this task solution – algorithm for solving the task – computer program». The main tasks of the discipline of the basic computer training were defined: – formation of students’ formal logic, algorithmic thinking; – learning of modern technology of structured programming, providing efficient development of algorithms and computer programs; – formation of practical skills of designing algorithms of any complexity; – learning of <b>procedure-oriented</b> <b>programming</b> languages. The article analyzes some negative aspects, related to basic computer training and appeared in the last 15 – 20 years in the National Research University «Moscow Power Engineering Institute» and other higher technical educational universities of Russia, including: – subjective diluting effect, changing the purpose and content of basic computer training and replacement by the other, «unconvincing» in the content subjects; – lack of a unified program of discipline «Informatics» for higher technical educational institutions of Russia; – lack of understanding of the specificity of very intensive work of lecturers, conducting such training, and the underestimation of their labor; – insufficient current level of initial computer training for the secondary school graduates; – lack of methodological interaction of higher technical educational universities of Russia among themselves and with the secondary school on basic computer training. The article emphasizes that the basic computer training in engineering education in Russia will be in perspective realized in its classic historical sense of the word, if the qualified engineers, who are able to think logically and resolve efficiently any professional tasks, will be necessary for the country as before. </p...|$|E
40|$|Abstract: As we {{move from}} {{developing}} <b>procedure-oriented</b> to O-O <b>programs,</b> the complexity traditionally found in functions and procedures {{is moving to}} the connections among components. More faults occur as components are integrated to form higher level aggregates. Consequently, we need to place more effort on testing the connections among components. Although O-O technology provides abstraction mechanisms to build components to integrate, it also adds new compositional relations that can contain faults, which must be found during integration testing. This paper describes new techniques for analyzing and testing the polymorphic relationships that occur in O-O software. The application of these techniques can result in an increased ability to find faults and overall higher quality software. Key Words: object-oriented software, coverage testing Category: D. 2. ...|$|R
40|$|The {{developed}} {{computer software}} system is particularly suitable for three dimensional investigations of hemodynamic conditions in abdominal aortic and carotid artery bifurcation aneurysms. It {{consists of two}} major clinically relevant modeling scope; rigid wall and deformable wall models. It provides an integrated set of tools that help solve clinically relevant hemodynamic variables such as velocity, wall shear stress and pressure profiles that aids in predicting disease development. The developed graphical user interface is essential for creating mathematical models of an aneurysm with prescribed boundary and initial conditions. This userfriendly interface automatically performs geometric model constructions, input data preparations, model discretizations, computational modeling and post-processing options of the aneurismal models. The blood flow dynamics is defined according to the incompressible Navier-Stokes and the continuity equations for viscous fluids. The computational modeling technique is based on finite element method. Because of the increasing size {{and complexity of the}} analysis and the software system design to date, a change in the programming approach and a shift in software design strategy have been proposed for developing readable, expandable and maintainable software systems. This change is from the <b>procedure-oriented</b> to object-oriented <b>programming</b> system development methodologies. Keywords Computer software; object-oriented programming; three dimensional finite element analysis; hemodynamic; abdominal aortic aneurysm; carotid artery bifurcation aneurysm 1...|$|R

