46|259|Public
50|$|Starfleet sends a <b>priority</b> <b>message</b> to Captain Kirk {{and orders}} him to {{investigate}} Sector 39J where contact {{has been lost}} with the colonies in the Gamma 7A system, also the last known position of the Intrepid. Arriving there, Ensign Chekov reports that the sensors show no life readings in the system of a billion inhabitants.|$|E
50|$|The Enterprise {{is engaged}} in an {{unprecedented}} scientific study of a naked singularity when a top <b>priority</b> <b>message</b> forces Captain Kirk to divert to Aleph Prime, a mining colony in a nearby system. Upon arrival, the high priority of the message {{seems to have been}} a mistake: the Enterprise was needed simply to ferry a single criminal to a rehabilitation colony in the same solar system.|$|E
50|$|It covers {{only part}} of the screen as well as dimming the {{remaining}} area. It helps to give the user a potentially high <b>priority</b> <b>message,</b> such as a new text message, voice mail or incoming phone call, either when the user gives the phone their attention, for example, by opening a flip phone or when running an application such as a game in the foreground.|$|E
30|$|The {{transmission}} of high <b>priority</b> <b>messages</b> is preemptive comparing to the emission of low <b>priority</b> <b>messages.</b> Service messages are sent {{only when there}} is no any control message in the queue of the control channel.|$|R
40|$|International audienceThe {{existing}} schedulability {{analysis for}} the Controller Area Network (CAN) {{does not take into}} account that a CAN controller has finite buffer space to store outgoing <b>messages</b> and high <b>priority</b> <b>messages</b> may suffer from priority inversion if the buffers are already occupied by low <b>priority</b> <b>messages.</b> This gives rise to an additional delay for high <b>priority</b> <b>messages,</b> which, if not considered, may result in a deadline violation. In this paper, we explain the cause of this additional delay and extend the existing CAN schedulability analysis to integrate it. Finally,we suggest implementation guidelines that minimizes both the run-time CPU overhead and the additional delay due to priority inversion...|$|R
5000|$|The {{winner in}} the Enterprise {{category}} of the 2011 Clickatell Personalised <b>Priority</b> <b>Messaging</b> (PPM)Awards ...|$|R
50|$|Civil Emergency Message (SAME CODE: CEM) is {{a warning}} created by the National Weather Service meant to warn of an in-progress or {{imminent}} significant threat(s) to public safety and/or property. The CEM is a higher <b>priority</b> <b>message</b> than the Local Area Emergency (LAE), but the hazard is less specific than the Civil Danger Warning (CDW). For example, the CEM {{could be used to}} describe an alert issued by the National Terrorism Advisory System.|$|E
5000|$|On arrival, {{a chaotic}} scene greeted the senior officer, a serious fire in {{progress}} and numerous persons needing rescue. A <b>priority</b> <b>message</b> {{was made to}} control and a [...] "Make pumps 8" [...] message was sent (requesting a further 4 pumping appliances {{in addition to the}} original 4) within minutes of first arriving, whilst rescues (the priority) were being made from both the front and rear of the building. Access was impeded by parked cars. Further reinforcements were requested, first to 15 pumps, and then 20, and finally 30 with a further 2 turntable ladders requested.|$|E
50|$|The older tape {{stations}} (and perhaps newer ones) {{also included}} a bell that could be rung by using a set character code. The purpose of the bell was to allow the sender to alert the receiving operator of a high <b>priority</b> <b>message</b> such as an SS message. It was also possible to insert spacing between bell rings. With care and persistence, one could compose a musical tune to play to far distant stations. Jingle bells was a favourite. A particularly clever 'author' could combine the tune with an image such as a Christmas tree. The skill for this was often learnt on those long night watches when little traffic was in the air.|$|E
5000|$|Predictability and Reliability: {{allows the}} {{deterministic}} delivery of highest <b>priority</b> <b>messages</b> by using Class of service.|$|R
30|$|When a node meets another node, {{it sends}} the highest <b>priority</b> <b>messages</b> in the buffer during the contact.|$|R
30|$|CAN {{does not}} prevent {{babbling}} idiot failures. A node can continuously send highest <b>priority</b> <b>messages</b> and thereby prevent communication of other nodes.|$|R
5000|$|The CAN {{specifications}} use {{the terms}} [...] "dominant" [...] bits and [...] "recessive" [...] bits where dominant {{is a logical}} 0 (actively driven to a voltage by the transmitter) and recessive is a logical 1 (passively returned to a voltage by a resistor). The idle state {{is represented by the}} recessive level (Logical 1). If one node transmits a dominant bit and another node transmits a recessive bit then there is a collision and the dominant bit [...] "wins". This means there is no delay to the higher-priority message, and the node transmitting the lower <b>priority</b> <b>message</b> automatically attempts to re-transmit six bit clocks {{after the end of the}} dominant message. This makes CAN very suitable as a real time prioritized communications system.|$|E
3000|$|... {{state after}} adding the high <b>priority</b> <b>message</b> to the {{appropriate}} queue. The addition of a low <b>priority</b> <b>message</b> follows the same process, with the difference that the congestion control module can deny sending a message if the service channel is overloaded (number of low priority messages [...]...|$|E
30|$|If U = ∅, {{then send}} the highest <b>priority</b> <b>message</b> s ∈ S.|$|E
50|$|The Priority Indicator {{is used to}} {{transmit}} AFTN messages according to their Order of <b>Priority.</b> So <b>messages</b> with <b>Priority</b> Indicator SS have the highest transmission <b>priority.</b> <b>Messages</b> with <b>Priority</b> Indicator DD and FF have the second highest transmission priority and the remaining <b>messages</b> with <b>Priority</b> Indicator GG and KK the lowest.|$|R
30|$|All {{the high}} <b>priority</b> <b>messages</b> are {{effectively}} sent {{on the control}} channel. However, some low priority packets can be deleted, due to service channel congestion (bounded service messages queue).|$|R
30|$|The {{control channel}} is {{primarily}} used to transmit beacons and high/first hop <b>priority</b> traffic. All <b>messages</b> {{that are necessary}} to maintain the VANET are transmitted on this channel, especially the network layer beacons. Furthermore, high <b>priority</b> <b>messages</b> (emergency notifications) are sent on this channel. Normally, such messages occur on an event basis. With multihop communications, only the first hop will require high priority.|$|R
30|$|If U ≠ ∅, {{then send}} the highest <b>priority</b> <b>message</b> u ∈ U and update U and S as follows: U ← U{u, S ← S∪u.|$|E
30|$|In addition, the {{emission}} {{of a high}} <b>priority</b> <b>message</b> is carried out without delay. All the high priority messages are considered as emergency, requiring thus to freeze {{the emission}} of lower priority messages.|$|E
3000|$|... [...]). Note {{that when}} the service channel is {{overloaded}} {{and there is no}} high priority packets to send, a low <b>priority</b> <b>message</b> can be sent via the control channel. This message is thus dequeued from the service queue list and enqueued in the control channel one.|$|E
40|$|This paper {{addresses}} {{the problem of}} having real-time group communication in systems that are not completely synchronous (quasi-synchronous). This situation can happen when load is not completely controlled thus not ruling out overload scenarios. This is usually related to dynamic characteristics of the application and/or environment. Usually, in such systems, temporal guarantees can only {{be made to the}} highest <b>priority</b> <b>messages.</b> In such scenario we propose to use the highest <b>priority</b> <b>messages</b> (or a dedicated synchronous channel if available) to implement a timing failure detection service. By using this service together with the communication protocols, we are able to provide safety in a timely fashion, which is of utmost importance for distributed fault-tolerant real-time applications...|$|R
5000|$|The classic ukiyoe print by Ando Hiroshige (Hoeido edition) from 1831-1834 {{depicts the}} actual {{business}} of the shukuba as a relay station to change horses and coolies to permit the rapid transmission of high <b>priority</b> <b>messages</b> and goods between Edo and Kyoto.|$|R
50|$|Each {{resource}} {{may have}} specified a numerical value called <b>priority.</b> <b>Messages</b> simply sent to username@example.com {{will go to}} the client with highest priority, but those sent to username@example.com/mobile will go only to the mobile client. The highest priority is the one with largest numerical value.|$|R
30|$|In {{a traffic}} {{accident}} situation, however, {{the population of}} the nodes broadcasting the warning message increases rapidly, and network traffic will be dominated by the warning messages, all with the same high priority. Thus, every node in the transmission range may compete to transmit the same <b>priority</b> <b>message</b> which causes the broadcast storm problem again.|$|E
30|$|The {{application}} includes mobile DTN networking software {{including a}} bundle routing protocol (e.g., (Schildt et al. 2011)) and our <b>priority</b> <b>message</b> forwarding mechanism (proposed in Sect. 4). We also assume that hospitals have network infrastructure {{such as an}} Emergency Medical Network or Wi-Fi network through which ambulance drivers can send messages stored in their phones to specialists in the hospital.|$|E
40|$|Abstract — FrameComm is a {{contention}} based, Duty Cycled, MAC protocol {{that ensures}} a message will be transmitted during the receiver’s listen phase {{by sending a}} packet, followed by a short gap, repeatedly for a precalculated number of times or until an acknowledgment is received. While introducing duty cycled communications can yield large power savings it does so {{at the cost of}} increased delay and decreased throughput. Many WSNs may incorporate several distinct message types of varying priority. A node with a high <b>priority</b> <b>message</b> to send may find the channel to be busy with a lesser <b>priority</b> <b>message</b> from another node and must therefore ‘back-off ’ leading to further delays. In a multi-hop environment, these delays are compounded and may become unacceptably large. This paper proposes adding a high priority interrupt message to FrameComm that allows a node with important data to send to interrupt another node’s lesser priority transmission giving immediate access to the channel. The priority interrupt mechanism is evaluated using an implementation in TinyOS 2 on a small laboratory testbed. I...|$|E
50|$|Tatsuta (龍田) was an {{unprotected}} cruiser of the Imperial Japanese Navy. The name Tatsuta {{comes from}} the Tatsuta River, near Nara. Tatsuta {{was used by the}} Imperial Japanese Navy primarily as an aviso (dispatch boat) used for scouting, reconnaissance and delivery of <b>priority</b> <b>messages.</b>|$|R
40|$|FlexRay, {{developed}} by a consortium of over hundred automotive companies, is a real-time in-vehicle communication protocol for automotive networks. It is {{being used as a}} higher-performance, time-triggered, and deterministic serial bus in automobiles for many safety-critical and x-by-wire systems. In x-by-wire systems the hydraulic parts of systems such as steering and braking are replaced with electronics. As x-by-wire systems are safety-critical, they must be fault-tolerant, deterministic, and should have synchronized time base (global time). FlexRay fulfils all these requirements as it is a deterministic and fault-tolerant serial bus system with data rates of 10 Mbps for extremely safety- and time-critical applications. As, FlexRay has become the de-facto standard for high speed safety-critical communications in automotive domain, and timing analysis of FlexRay still continues to generate significant research interest. The FlexRay allows both time-triggered and event-triggered messages. The static (ST) segment allows time-triggered transmission, while dynamic (DYN) segment allows event-triggered transmission. As the DYN segment transmits messages based on their priorities; so the delay suffered by a message depends on the interferences by its higher <b>priority</b> <b>messages.</b> Computing interferences of the higher <b>priority</b> <b>messages</b> is a challenging problem for the DYN segment of FlexRay [32]. So, in order to compute interferences of the higher <b>priority</b> <b>messages</b> one way is to use simulation technique. The SystemC simulator proposed in this thesis is used to model and simulate the behaviour of the DYN segment of the FlexRay protocol. This modelling and simulation is done on system level using the system description language SystemC. The simulator estimates the delay suffered by a message instances because of the interferences of higher <b>priority</b> <b>messages.</b> This estimation of delay is done by taking no-jitter/jitter into consideration. Finally, in both the cases the delay suffered by each and every message instance is plotted. ...|$|R
40|$|Wireless sensor {{networks}} are rapidly becoming {{a platform for}} applications such as battlefield monitoring, intelligence gathering, environmental monitoring, and emergency response. Inherent in these applications is a priority and urgency of the information or messages. This means the messages must be delivered {{in a timely manner}} for them to be useful. This research assigns a <b>message</b> <b>priority</b> level and provides high <b>priority</b> <b>messages</b> quicker access to the channel. Using MICA 2 sensors and a modified Media Access Control (MAC) layer, real-time message End-to-End (ETE) delay was reduced by 50 percent. Coupled with this decrease in delay, these same real-time messages also had a significantly higher on-time delivery rate compared to an unmodified system. At the highest loading levels, high <b>priority</b> <b>messages</b> experienced a 45 percent higher on-time delivery rate than the baseline system. These performance improvements were obtained without any impact on throughput for other message types and without the added overhead of channel reservation or system synchronization required by other protocols. i...|$|R
30|$|In a priority-based scheme, {{a message}} is {{categorized}} {{into one of}} multiple classes depending {{on the degree of}} importance or priority. According to the assigned priorities, the messages are differently scheduled so that more important or higher priority messages are transmitted first rather than less important or lower priority messages [14 – 18]. Along with this context, a warning message is classified as the highest <b>priority</b> <b>message,</b> to be transmitted earlier than any other messages.|$|E
40|$|The {{majority}} of research into schedulability analysis for CAN {{is based on}} the assumption that the highest <b>priority</b> <b>message</b> ready for transmission at each node on the network will be entered into arbitration on the bus. In practice; however, some CAN device drivers and communications stacks implement queuing policies that are not strictly priority-based, invalidating this assumption. In this paper, we introduce response time analysis for work conserving and FIFO queuing policies for messages with arbitrary deadlines. 1...|$|E
30|$|In {{addition}} to the containment of errors detected by the CAN controller at a CAN port, the CAN router blocks messages with invalid message identifiers and messages that violate the minimum interarrival time. The experiments show the impact of timing failures on messages on the same CAN segment and messages from other CAN segments. In the same CAN segment, message timing failures with a given priority affect all messages with lower priorities (cf. Figure 7). In contrast, the effect on messages from other CAN segments is bounded by the minimum interarrival times. The worst-case delay for a given message occurs when the bus of a CAN segment is not idle {{at the time of}} the transmission request and all higher priority messages are sent according to their minimum interarrival times. The experiments show that even lower priority CAN messages can introduce additional latencies for higher-priority ones (i.e., when a high <b>priority</b> <b>message</b> is queued for sending, but a lower <b>priority</b> <b>message</b> is currently being transmitted on the non-preemptive bus). The additional delay, regardless whether caused by a lower or higher <b>priority</b> <b>message,</b> can push two messages with the same CAN ID from a sender closer together. This behavior occurs when the last CAN message was delayed and the current one is not. In case those messages come too close, a minimum interarrival time violation occurs, even though the actual message rate (assuming a sufficiently large observation time) is not violated. For example, Figure 8 a shows this behavior for messages sent by CTN 2, where violations of the minimum interarrival time occur before CTN 2 actually exceeds its allotted message rate. Consequently, the worst case delay (beside message size and CAN bus bitrate) must also be considered for the minimum interarrival time, if a maximum message rate should be guaranteed. This worst case delay can be computed using existing approaches for response time analysis in CAN [28].|$|E
5000|$|Chishima (Chishima [...] ) was an {{unprotected}} cruiser of the Imperial Japanese Navy. The name Chishima (lit. [...] "Thousand Islands") is the Japanese {{name for}} the Kurile Islands. Chishima {{was used by the}} Imperial Japanese Navy as an aviso (dispatch boat) for scouting, reconnaissance and delivery of high <b>priority</b> <b>messages.</b>|$|R
50|$|In the Avatar continuity, faster-than-light {{communication}} via {{a subtle}} {{control over the}} state of entangled particles is possible, but for practical purposes extremely slow and expensive: at a transmission rate of three bits of information per hour and a cost of $7,500 per bit, it is used for only the highest <b>priority</b> <b>messages.</b>|$|R
50|$|MCAPI {{is focused}} purely on {{embedded}} communications, and adds {{the ideas of}} messages, packets, and scalars + connected channels. This allows MCAPI to support various quality of service, where connected channels may exploit underlying embedded hardware. Furthermore MCAPI supports various kinds of <b>priorities,</b> <b>messages</b> can have a per <b>message</b> <b>priority</b> and channels can be treated as having different priorities as well, allowing implementations to map some or all channels to dedicated hardware. MCAPI can also support zero-copy via assigning attributes to connected channels.|$|R
