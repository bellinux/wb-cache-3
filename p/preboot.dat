51|0|Public
25|$|Today in a PXE {{environment}} {{the client}} architecture detection is rarely {{based on the}} identifiers originally included with the PXE v2.1 specification, instead each computer that will be booting from the network should have set DHCP option 93 to indicate the client’s architecture. This enables a PXE server to know (at boot time) the exact architecture of the client from the first network boot packet. The client system architecture values are listed (among other PXE parameters) within the 2006 published RFC 4578 (Dynamic Host Configuration Protocol (DHCP) Options for the Intel <b>Preboot</b> eXecution Environment (PXE)).|$|E
2500|$|The <b>Preboot</b> Execution Environment {{specification}} v2.1 {{published by}} Intel & SystemSoft ...|$|E
2500|$|In computing, the <b>Preboot</b> eXecution Environment (PXE, {{sometimes}} pronounced as pixie) specification {{describes a}} standardized client-server environment that boots a software assembly, retrieved from a network, on PXE-enabled clients. [...] On the client side it requires only a PXE-capable {{network interface controller}} (NIC), and uses a small set of industry-standard network protocols such as DHCP and TFTP.|$|E
2500|$|The <b>Preboot</b> Execution Environment (PXE) was {{introduced}} {{as part of}} the Wired for Management framework by Intel and is described in the specification published by Intel and SystemSoft. PXE version 2.0 was released in December 1998, and the update 2.1 was made public in September 1999. The PXE environment makes use of several standard client‑server protocols like DHCP and TFTP (now defined by the 1992 published RFC 1350). Within the PXE schema the client [...] side of the provisioning equation is now {{an integral part of the}} PXE standard and it is implemented either as a Network Interface Card (NIC) BIOS extension or today in modern devices as UEFI code. This distinctive firmware layer makes available at the client the functions of a basic Universal Network Driver Interface (UNDI), a minimalistic UDP/IP stack, a <b>Preboot</b> (DHCP) client module and a TFTP client module, together forming the PXE application programming interfaces (APIs) used by the NBP when needing to interact with the services offered by the server counterpart of the PXE environment. TFTP's low throughput, especially when used over high-latency links, has been initially mitigated by the TFTP Blocksize Option RFC 2348 published in May 1998, and later by the TFTP Windowsize Option RFC 7440 published in January 2015.|$|E
2500|$|Once {{the code}} is complete, {{it may be}} {{compiled}} using [...]NET compiler. This converts the application from the original source code (C# or otherwise) into Common Intermediate Language (CIL), the native language of [...]NET Framework. Next the application is run, showing the Cosmos Builder Window, which presents the developer with options which determine exactly how the project is compiled. These options include how to boot the project - via emulators such as Quick Emulator (QEMU), Virtual PC, and VMWare, writing to a disk image (ISO) file that can later be written to a CD-ROM, or via <b>Preboot</b> Execution Environment (PXE) network booting - as well as debug options using Cosmos' built-in debugger, and other options.|$|E
2500|$|Cosmos {{encompasses}} an AOT compiler named IL2CPU {{to translate}} Common Intermediate Language (CIL) into native instructions. [...] Cosmos compiles user-made programs and associated libraries using IL2CPU {{to create a}} bootable native executable that can be run with no support. [...] The resulting output can be booted from a USB flash drive, CD-ROM, over a network via <b>Preboot</b> Execution Environment (PXE), or inside a virtual machine. Recent releases also allow deploying to certain x86 embedded devices over Universal Serial Bus (USB). [...] While C# is the primary language used by developers (both on the backend and by end users of Cosmos), many CLI languages can be used, provided they compile to pure CIL {{without the use of}} Platform Invocation Services (P/Invokes). [...] Cosmos is mainly intended for use with [...]NET Framework, with Mono support in the works.|$|E
2500|$|TFTP {{has always}} been {{associated}} to network booting. One of the first attempts in this regard was the Bootstrap Loading using TFTP standard RFC 906, published in 1984, which established the 1981 published Trivial File Transfer Protocol standard RFC 783 {{to be used as}} the standard file transfer protocol for bootstrap loading. It was [...] followed shortly after by the Bootstrap Protocol standard RFC 951 (BOOTP), published in 1985, which allowed a disk-less client machine to discover its own IP address, the address of a TFTP server, and the name of a Network Bootstrap Program (NBP) to be TFTP transferred, loaded into memory, and executed. Dynamic Host Configuration Protocol standard RFC 2131 (DHCP) published in 1997 improved BOOTP capabilities. Finally, the <b>Preboot</b> Execution Environment (PXE) version 2.0 was released in December 1998, and the update 2.1 was made public in September 1999 counting on TFTP as its file transfer protocol. Intel has recently decided to widely support PXE within the new UEFI specification extending the TFTP support to all EFI/UEFI environments.|$|E
5000|$|Access (<b>preboot)</b> the PC's {{universal}} {{unique identifier}} (UUID).|$|E
5000|$|<b>Preboot</b> Execution Environment - {{network boot}} by Intel, {{widespread}} ...|$|E
50|$|WfM {{included}} the <b>Preboot</b> Execution Environment (PXE) and Wake-on-LAN (WOL) standards.|$|E
5000|$|PXELINUX, {{used for}} booting from a network server using the <b>Preboot</b> Execution Environment (PXE) system.|$|E
50|$|RIPL {{is similar}} to <b>Preboot</b> Execution Environment (PXE), but it uses the Novell NetWare based boot method. It was {{originally}} developed by IBM.|$|E
5000|$|Access (<b>preboot)</b> {{hardware}} asset information, {{such as a}} component's {{manufacturer and}} model, which is updated every time the system goes through power-on self-test (POST).|$|E
50|$|Universal Network Device Interface (UNDI) is an {{application}} programming interface (API) for network interface cards (NIC) used by the <b>Preboot</b> Execution Environment (PXE) protocol.|$|E
5000|$|Access (<b>preboot)</b> to {{third-party}} {{data store}} (TPDS), a protected memory area that software vendors can use, {{in which to}} version information, [...]DAT files, and other information.|$|E
5000|$|Support for IEEE 802.1x, <b>Preboot</b> Execution Environment (PXE), and Cisco Self Defending Network (SDN) in desktop PCs, and {{additionally}} Microsoft Network Access Protection (NAP) in laptops ...|$|E
50|$|Modern {{security}} {{technologies and}} hardware designs allow remote management even in more secure environments. For example, Intel AMT supports IEEE 802.1x, <b>Preboot</b> Execution Environment (PXE), Cisco SDN, and Microsoft NAP.|$|E
50|$|The UEFI {{specification}} includes {{support for}} booting over network via the <b>Preboot</b> eXecution Environment (PXE). PXE booting use network protocols include Internet Protocol (IPv4 and IPv6), User Datagram Protocol (UDP), Dynamic Host Configuration Protocol (DHCP) and Trivial File Transfer Protocol (TFTP).|$|E
5000|$|Discover an AMT system {{independently}} of the PC's power state or OS state. Discovery (<b>preboot</b> access to the UUID) is available if the system is powered down, its OS is compromised or down, hardware (such as a hard drive or memory) has failed, or management agents are missing.|$|E
5000|$|... iPXE is an {{open-source}} {{implementation of}} the <b>Preboot</b> eXecution Environment (PXE) client firmware and bootloader, created in 2010 as a fork of gPXE. It {{can be used to}} enable computers without built-in PXE support to boot from the network, or to extend an existing PXE client implementation so it supports additional protocols.|$|E
50|$|In computing, the <b>Preboot</b> eXecution Environment (PXE, {{sometimes}} pronounced as pixie) specification {{describes a}} standardized client-server environment that boots a software assembly, retrieved from a network, on PXE-enabled clients. On the client side it requires only a PXE-capable {{network interface controller}} (NIC), and uses a small set of industry-standard network protocols such as DHCP and TFTP.|$|E
50|$|NetInstall is {{a similar}} feature of macOS Server which {{utilizes}} NetBoot and ASR to deliver installation images to network clients (typically on first boot). Like NetBoot, NetInstall images can be created using the System Image Utility. NetInstall performs a function for macOS similar to Windows Deployment Services for Microsoft clients, which depend on the <b>Preboot</b> Execution Environment.|$|E
50|$|WDS {{functions}} {{in conjunction with}} the <b>Preboot</b> Execution Environment (PXE) to load a miniature edition of Windows known as Windows PE for installation and maintenance tasks. WDS functions as both a storage repository for the PXE network boot images as well as a repository for the actual operating system images to be installed on the target computer.|$|E
5000|$|Contemporary desktop {{personal}} computers generally provide {{an option to}} boot from the network in their BIOS via the <b>Preboot</b> Execution Environment (PXE). Post-1998 PowerPC (G3 - G5) Mac systems can also boot from their firmware to a network disk via NetBoot. [...] Old {{personal computers}} without network boot firmware support can utilize a floppy disk or flash drive containing software to boot from the network.|$|E
5000|$|The 1958 {{version of}} the Legion of Super-Heroes (also called the {{original}} or <b>Preboot</b> Legion) is a fictional superhero team in the 31st century of the [...] The team is the first incarnation of the Legion of Super-Heroes, and {{was followed by the}} 1994 and 2004 rebooted versions. It first appeared in Adventure Comics #247 (April 1958) and was created by Otto Binder and Al Plastino.|$|E
5000|$|Sensor's first name, Jeka, is a {{reference}} to her <b>preboot</b> counterpart's nickname [...] "Jeckie" [...] (short for [...] "Projectra"). Her surname, Wynzorr, is {{a reference}} to the House of Windsor, the current British royal family. In keeping with this, her father is King Charlz, and she has a brother named Willum, a play on the current heir-apparent Charles, Prince of Wales and his son Prince William, Duke of Cambridge.|$|E
5000|$|When {{running on}} {{dedicated}} hardware, Container Linux {{can be either}} permanently installed to local storage, such as a hard disk drive (HDD) or solid-state drive (SSD), or booted remotely over a network using <b>Preboot</b> Execution Environment (PXE) in general, or iPXE {{as one of its}} implementations. [...] CoreOS also supports deployments on various hardware virtualization platforms, including Amazon EC2, DigitalOcean, Google Compute Engine, Microsoft Azure, OpenStack, QEMU/KVM, Vagrant and VMware.|$|E
5000|$|The vPro {{technology}} {{built into}} the chipset adds management, security, and remote-deployment features for: monitoring laptops (protected event logs, access to BIOS settings, out-of-band alerting, protected data storage), maintaining and updating systems (access to protected system information, remote power up, console redirection), repairing systems (remote boot, console redirection, <b>preboot</b> access to BIOS settings, protected events logs), and securing systems (remote power up, hardware filters for network traffic, agent presence checks/triggers, out-of-band alerting).|$|E
50|$|Standard PC BIOS {{is limited}} to a 16-bit {{processor}} mode and 1 MB of addressable memory space, resulting from the design based on the IBM 5150 that used a 16-bit Intel 8088 processor. In comparison, the processor mode in a UEFI environment can be either 32-bit (x86-32, AArch32) or 64-bit (x86-64, Itanium, and AArch64). 64-bit UEFI firmware implementations support long mode, which allows applications in the <b>preboot</b> execution environment to use 64-bit addressing to get direct access to all of the machine's memory.|$|E
5000|$|The System Deployment Image (SDI) {{file format}} {{is often used}} to allow the use of a virtual disk for startup or booting. Some {{versions}} of Microsoft Windows allow for [...] "RAM booting", which is essentially the ability to load an SDI file into memory and then boot from it. The SDI file format also lends itself to network booting using the <b>Preboot</b> Execution Environment (PXE). Another usage is hard disk imaging.The SDI file itself is partitioned into the following sections: ...|$|E
50|$|As {{with the}} second-stage boot loader, network booting begins by using generic network access methods {{provided}} by the network interface's boot ROM, which typically contains a <b>Preboot</b> Execution Environment (PXE) image. No drivers are required, but the system functionality is limited until the operating system kernel and drivers are transferred and started. As a result, once the ROM-based booting has completed {{it is entirely possible}} to network boot into an operating system that itself does not have the ability to use the network interface.|$|E
5000|$|... gPXE is an {{open-source}} <b>Preboot</b> eXecution Environment (PXE) client firmware {{implementation and}} bootloader derived from Etherboot. It {{can be used}} to enable computers without built-in PXE support to boot from the network, or to extend an existing client PXE implementation with support for additional protocols. While standard PXE clients use TFTP to transfer data, gPXE client firmware adds the ability to retrieve data through other protocols like HTTP, iSCSI and ATA over Ethernet (AoE), and can work with Wi-Fi rather than requiring a wired connection.|$|E
50|$|The <b>Preboot</b> Execution Environment (PXE) was {{introduced}} {{as part of}} the Wired for Management framework by Intel and is described in the specification published by Intel and SystemSoft. PXE version 2.0 was released in December 1998, and the update 2.1 was made public in September 1999. The PXE environment makes use of several standard client‑server protocols like DHCP and TFTP (now defined by the 1992 published RFC 1350). Within the PXE schema the client side of the provisioning equation is now {{an integral part of the}} PXE standard and it is implemented either as a Network Interface Card (NIC) BIOS extension or today in modern devices as UEFI code. This distinctive firmware layer makes available at the client the functions of a basic Universal Network Driver Interface (UNDI), a minimalistic UDP/IP stack, a <b>Preboot</b> (DHCP) client module and a TFTP client module, together forming the PXE application programming interfaces (APIs) used by the NBP when needing to interact with the services offered by the server counterpart of the PXE environment. TFTP's low throughput, especially when used over high-latency links, has been initially mitigated by the TFTP Blocksize Option RFC 2348 published in May 1998, and later by the TFTP Windowsize Option RFC 7440 published in January 2015.|$|E
50|$|For network auto-booting, the <b>Preboot</b> Execution Environment (PXE) or Bootstrap Protocol (BOOTP) network {{protocols}} {{are commonly}} used to find a server with files for booting the device. Standard full-size desktop PCs are able to be network-booted in this manner with an add-on network card that includes a UNDI boot ROM. Diskless network booting is commonly a built-in feature of desktop and laptop PCs intended for business use, since {{it can be used}} on an otherwise disk-booted standard desktop computer to remotely run diagnostics, to install software, or to apply a disk image to the local hard drive.|$|E
50|$|The {{system allows}} {{installations}} via the <b>Preboot</b> Execution Environment (PXE), and supports both an “all servers that boot on this network” and an “all servers in this spreadsheet” method of installations. So if the servers {{to be installed}} are on an isolated network, a Stacki tool called insert-ethers can be run to grab each machine that boots on the network and add it to Stacki, commencing an installation if needed. If the servers to be installed are on a shared network, then loading a spreadsheet of machines to install tells Stacki which ones it should install.|$|E
50|$|NetBoot is a {{technology}} from Apple which enables Macs with capable firmware (i.e. New World ROM) to boot from a network, {{rather than a}} local hard disk or optical disc drive. NetBoot is a derived work from the Bootstrap Protocol (BOOTP), and is similar in concept to the <b>Preboot</b> Execution Environment. The technology was announced {{as a part of}} the original version of Mac OS X Server at Macworld Expo on 5 January 1999. NetBoot has continued to be a core systems management technology for Apple, and has been adapted to support modern Mac Intel machines. NetBoot, USB, and FireWire are some of the external volume options for Mac OS re-install.|$|E
