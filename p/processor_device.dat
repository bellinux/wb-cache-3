14|327|Public
50|$|A SAF-TE device (SEP) is {{represented}} as a SCSI <b>processor</b> <b>device</b> that is polled every few seconds by e.g. the RAID controller software. Due to the low overhead required, impact on bus performance is negligible. For SAS or Fibre Channel systems, SAF-TE is replaced by the more standardized SCSI Enclosure Services (SES).|$|E
50|$|The LEON family {{includes}} the first LEON1 VHSIC Hardware Description Language (VHDL) design {{that was used}} in the LEONExpress test chip developed in 0.25 μm technology to prove the fault-tolerance concept. The second LEON2 VHDL design was used in the <b>processor</b> <b>device</b> AT697 from Atmel (F) and various system-on-chip devices. These two LEON implementations were developed by ESA. Gaisler Research, now part of Cobham (before Aeroflex Gaisler), developed the third LEON3 design and has announced the availability of the fourth generation LEON, the LEON4 processor.|$|E
5000|$|On {{his fourth}} studio album 808's & Heartbreak {{and in the}} pop song [...] "Heartless", Kanye West {{utilized}} the voice audio <b>processor</b> <b>device</b> known as Auto-Tune. West had previously experimented with the technology on his debut album, The College Dropout, for the background vocals of [...] "Jesus Walks" [...] and [...] "Never Let Me Down." [...] The voice altering device created a unique sound helping West express his then feelings of his break up with fiancée Alexis Phifer months after the untimely passing of his mother. The pipe-organ sound was sampled from The Alan Parsons Project song Ammonia Avenue.|$|E
5000|$|Interactive: They may {{interact}} {{easily with}} users {{so that those}} users can define their needs comfortably. They may also interact with other <b>processors,</b> <b>devices,</b> and Cloud services, {{as well as with}} people.|$|R
5000|$|Consumer {{electronics}} {{companies have}} successfully dominated this market by designing their own media processors and integrating {{them into their}} video products. Companies such as Philips, Samsung, Matsushita, Fujitsu, Mitsubishi have their own in-house media <b>processor</b> <b>devices.</b>|$|R
5000|$|A {{scalable}} {{online transaction}} processing system or database management system is {{one that can be}} upgraded to process more transactions by adding new <b>processors,</b> <b>devices</b> and storage, and which can be upgraded easily and transparently without shutting it down.|$|R
40|$|Real-time {{scheduling}} algorithms, such as Rate Monotonic and Earliest Deadline First, {{guarantee that}} calculations are performed within a pre-defined time. As many real-time systems operate on limited battery power, these algorithms have been enhanced with power-aware properties. In this thesis, 13 power-aware real-time scheduling algorithms for <b>processor,</b> <b>device</b> and system-level use are explored...|$|E
40|$|The new {{wireless}} communication standard UMTS applies an advanced dual-mode channel coding scheme. In this contribution we investigate {{the feasibility of}} implementing the algorithm on a digital signal <b>processor</b> <b>device</b> and the implication upon the processor architecture. Starting with a base architecture which allows for scalability and customization we derive new system parameters and compare the total device to ASIC solutions...|$|E
40|$|This paper {{proposes a}} new {{technical}} approach to connect small processor devices to the Internet. The approach makes possible a connection both through the Public Switched Telephone Network (PSTN) and the Global Systems for Mobile Communications (GSM) network. The connection {{is based on}} networking software programmed in the <b>processor</b> <b>device</b> and a gateway server, which together transfer data between the PSTN and other communication networks. The data communication utilizes the Short Message Service (SMS) and the Extended Machine Interface (EMI) protocol. Besides the low cost, the proposed system has several benefits, such as uncomplicated structure and operation, standardized data transfer, {{and an ability to}} be embedded in an 8 -bit <b>processor</b> <b>device.</b> Yet, the approach does not require high-speed data communication. Thus, it is especially suitable for applications controlling slow and non-critical building processes. The proposed system was demonstrated by designing a microprocessor device interfaced to an Air Handling Unit (AHU). Sensor data from the AHU was transferred to the Internet through the PSTN and the GSM networks. In addition, a Web-user interface was created for the remote control of the AHU. The results of the pilot project were encouraging and will be used as a basis for further development of the syste...|$|E
50|$|MIPS-X {{has become}} {{important}} among DVD player firmware hackers, since many DVD players (especially low-end devices) use chips {{based on the}} IIT design (and produced by ESS Technology) as their central <b>processor.</b> <b>Devices</b> such as the ESS VideoDrive SoC also include a DSP (co-processor) for decoding MPEG audio and video streams.|$|R
40|$|A {{new method}} for {{handling}} bipolar data by twos-complement representation is detailed. This technique requires fewer bits, uses simpler optical <b>processor</b> <b>devices</b> (fewer channels), {{and provides a}} higher processing rate and throughput. It is directly extendable to more complex matrix operations because of its data flow property and requires only a modest increase in {{the complexity of the}} digital support system...|$|R
50|$|Siegel came {{to add the}} SP123 image {{processor}} to the '123 family. But having worked on ADO, Siegel saw {{the limitations of the}} single-point architecture, and had a vision of what could be done by applying pipelined real-time imaging. He came with an understanding of digital signal <b>processor</b> <b>devices</b> (DSPs), image processing, filtering, and 2D warping, and with programmable logic in hand, saw what could be done.|$|R
40|$|SIC/XE is a {{hypothetical}} computer architecture designed for teaching systems software programming. In this work, we present an educational SIC/XE computer that we implemented on an FPGA development board. The system {{consists of a}} SIC/XE <b>processor,</b> <b>device</b> controllers and other auxiliary components. In addition, we also developed a suite of system software utilities for use with our system. The suite includes assembler, linker and simulator utilities {{which can be used}} to create and test programs for the SIC/XE computer. Programs can be transferred from a personal computer to the FPGA board over a serial connection, using a provided software tool...|$|E
40|$|An {{apparatus}} {{for data}} compression employing a parallel analog processor. The apparatus includes {{an array of}} processor cells with N columns and M rows wherein the processor cells have an input device, memory device, and <b>processor</b> <b>device.</b> The input device is used for inputting a series of input vectors. Each input vector is simultaneously input into each column of the array of processor cells in a pre-determined sequential order. An input vector {{is made up of}} M components, ones of which are input into ones of M processor cells making up a column of the array. The memory device is used for providing ones of M components of a codebook vector to ones of the processor cells making up a column of the array. A different codebook vector is provided to each of the N columns of the array. The <b>processor</b> <b>device</b> is used for simultaneously comparing the components of each input vector to corresponding components of each codebook vector, and for outputting a signal representative of the closeness between the compared vector components. A combination device is used to combine the signal output from each processor cell in each column of the array and to output a combined signal. A closeness determination device is then used for determining which codebook vector is closest to an input vector from the combined signals, and for outputting a codebook vector index indicating which of the N codebook vectors was the closest to each input vector input into the array...|$|E
40|$|A {{spectrum}} analyzer based on Fast Fourier Transform (FFT) techniques was implemented using the TMS 320 C 6201 Digital Signal <b>Processor</b> <b>device</b> manufactured by Texas Instruments. Portable C programs demonstrated optimization of the FFT algorithm for maximum speed. Previously published algorithms were {{adapted to the}} unique features of this Very-Long Instruction Word (VLIW) parallel processor and application, taking into account fixed-point arithmetic, parallel operation of functional units, and a hierarchy of memory capacities and speeds. The effectiveness of the VLIW C compiler, with automatic optimization, is compared with an explicitly-scheduled assembly-language program. The resulting program was then used to demonstrate the crucial need to keep program data in the Internal Data Memory to preserve hard-won performance gains. Department of Defense (DoD) author (civilian...|$|E
5000|$|Interactive: They must {{interact}} {{easily with}} users {{so that those}} users can define their needs comfortably. They may also interact with other <b>processors,</b> <b>devices,</b> and Cloud services, {{as well as with}} people. In the Enterprise, interactions are controlled via existing workflows and UIs. Therefore, embedding best practices directly into these existing interfaces, {{in the context of a}} specific step, is critical to ensure maximum end-user adoption.|$|R
5000|$|The IP {{series of}} high {{performance}} media and Internet <b>processors.</b> These <b>devices</b> {{were designed to}} act as gateways for streaming media and data over wired and wireless links.|$|R
40|$|The {{starting}} aim of {{this project}} is to give more flexibility to the 4 th mobile generation systems. Since reconfigurable-reprogrammable systems are becoming each time more widespread in the communications system implementations, it is set out to analyze those mechanisms of the current <b>processor</b> <b>devices</b> (DSPs) that have high importance when flexibility has to be provided to the system management. This way, the ALOE middleware - used in Software Radio - is ported from its original x 86 computer running Linux to the DSP processors from Texas Instruments. Meanwhile, the Ethernet interface that the DSP provides is evaluated {{with the objective of}} its characterization in real time environments...|$|R
40|$|RE: EUI- 48 {{protocol}} ID VPD page Some SCSI command {{sets are}} so generic {{that it is}} difficult, if not impossible, to discover the protocols implemented by peripheral devices except via vendor-specific methods. The <b>processor</b> <b>device</b> model, documented in SPC, is the particular example in mind. Considerable utility may {{be made of the}} processor model’s generic SEND and RECEIVE command set were it possible to identify the message set of a device by other than vendorspecific means. A protocol identifier already in widespread use, the IEEE EUI- 48, could enable a standard method to discover message set support in a <b>processor</b> <b>device.</b> A new vital product data (VPD) page is proposed to contain one or more EUI- 48 s. By conventional usage, an EUI- 48 would uniquely identify a document or document(s) that specify peripheral device characteristics in addition to those identified by the peripheral device type and qualifier. The details of association between an EUI- 48 and one or more documents need not be within the scope of SPC. The changes that follow are proposed for inclusion in the next revision of the SPC- 4 working draft. T 10 / 02 - 075 r 0 8. 6. 1 Vital product data parameters overview and page codes This subclause describes the vital product data page structure and the vital product data pages (see table 250) that are applicable to all SCSI devices. These pages are optionally returned by the INQUIRY command (see 7. 4) and contain vendor specific product information about a target or logical unit. The vital product data may include vendor identification, product identification, unit serial numbers, device operating definitions, manufacturing data, field replaceable unit information, and other vendor specific information. This standard defines the structure of the vital product data, but not the contents. Table 250 Vital product data page codes Page code Description Reference Suppor...|$|E
40|$|A {{method of}} dynamic pricing of a {{resource}} is presented. For example, the method includes determining {{a set of}} anticipated demands for one or more users to acquire the resource according to uncertainty of {{the one or more}} users in preferring one or more certain time periods of a plurality of time periods for acquiring the resource. Prices for the resource differ between {{at least two of the}} plurality of time periods. Each anticipated demand of the set is associated with a different one of the plurality of time periods. The method further includes setting prices for the resource during each of the plurality of time periods according to the determined set of anticipated demands. The determining of the set of anticipated demands and/or the setting of prices are implemented as instruction code executed on a <b>processor</b> <b>device...</b>|$|E
40|$|International audienceEnergy {{harvesting}} is {{the capture}} of ambient energy, its conversion into a usable form, and its storage for immediate or future use. Interest in energy harvesting has increased {{over the last decade}} because of its environmental friendliness and its ability to power devices without electric wires. This term has been frequently applied in recent years in the context of small autonomous embedded devices such as wireless sensor nodes. In this paper, we address the scheduling problem for a single <b>processor</b> <b>device</b> that executes preemptable time critical tasks. Each one has a certain energy requirement and arrives at an unpredictable time. We ask the question whether the traditional task scheduling algorithm earliest deadline first (EDF) is convenient for energy harvesting environments. The paper shows that EDF has a zero competitive factor but nevertheless is optimal for online non-idling settings...|$|E
50|$|SSP ("System Support Program") was {{the only}} {{operating}} system of the S/34. It contained support for multiprogramming, multiple <b>processors,</b> 36 <b>devices,</b> job queues, printer queues, security, indexed file support, and fully installed, it was about 5 MB.|$|R
40|$|High-speed {{communications}} permeate {{nearly every}} type of advanced consumer and computerbased product. Numerous high-speed communication standards exist which aim to satisfy this ever-growing appetite for communications bandwidth among and between people, <b>processors,</b> storage <b>devices,</b> displays, and other peripheral computing equipment. These complex an...|$|R
5000|$|Cell <b>processors</b> and salvage <b>devices</b> that {{wash and}} save red blood cells, i.e. [...] "cell washers" [...] or RBC-savers ...|$|R
40|$|EUI- 48 {{software}} interface ID VPD page Some SCSI command sets are so generic {{that it is}} difficult, if not impossible, to discover the {{software interface}}s implemented by peripheral devices except via vendor-specific methods. The <b>processor</b> <b>device</b> model, documented in SPC, is the particular example in mind. Considerable utility may {{be made of the}} processor model’s generic SEND and RECEIVE command set were it possible to identify the message set of a device by other than vendorspecific means. A software interface identifier already in widespread use, the IEEE EUI- 48, could enable a standard method to discover message set support in a <b>processor</b> <b>device.</b> A new vital product data (VPD) page is proposed to contain one or more EUI- 48 s. By conventional usage, an EUI- 48 would uniquely identify a document or document(s) that specify peripheral device characteristics in addition to those identified by the peripheral device type and qualifier. The details of association between an EUI- 48 and one or more documents need not be within the scope of SPC. The changes that follow are proposed for inclusion in the next revision of the SPC- 4 working draft. NOTE- A recommended editorial change is concealed within the proposal. I suggest that Table 250 be sorted by page code. At present it appears to be sorted by the description; I think this adds little value to the table. I recognize that some tables in SCSI documents are best sorted alphabetically by description, but I think this should be considered on a table by table basis. T 10 / 02 - 075 r 1 8. 6. 1 Vital product data parameters overview and page codes This subclause describes the vital product data page structure and the vital product data pages (see table 250) that are applicable to all SCSI devices. These pages are optionally returned by the INQUIRY command (see 7. 4) and contain vendor specific product information about a target or logical unit. The vital product data may include vendor identification, product identification, unit serial numbers, device operating definitions, manufacturing data, field replaceable unit information, and other vendor specific information. This standard defines the structure of the vital product data, but not the contents. Table 250 Vital product data page code...|$|E
40|$|In this work, we {{introduce}} a novel method for recognizing a discriminative object {{at a very}} high speed. The system is based on self learning high speed parallel processing devices. The system processes video streams at speed of 1000 frames per second or more. For high speed object recognition using sequential computing from an image of a video having thousands of frames per second and each image frame consists of thousands of pixels, we need very much time for executing complicated algorithms. In the traditional way of computing and recognizing systems are very time consuming compared to our system because the traditional systems use sequential computation for recognizing, with some complicated functions. If we use other types of parallel processors like ANN for processing each pixel or group of pixels, those systems need programming and giving data to such large number of processors are practically difficult. Here we have used a self learning parallel <b>processor</b> <b>device</b> which is made for doing some kinds of particular jobs. This parallel processing devices are easy to manipulate and can be trained simultaneously. It contains memory for storing data comparators for comparing with previously stored memory etc. Training as well as functioning are in real time even if the system process thousands of image frames per second...|$|E
5000|$|It is {{important}} that the overhead of managing the Sercos III nodes not be placed upon the <b>device</b> <b>processor.</b>|$|R
50|$|An individual's exocortex {{would be}} {{composed}} of external memory modules, <b>processors,</b> IO <b>devices</b> and software systems that would interact with, and augment, a person's biological brain. Typically this interaction is described as being conducted through a direct brain-computer interface, making these extensions functionally part of the individual's mind.|$|R
50|$|The {{consortium}} {{provides a}} neutral forum for vendors and developers {{who are interested}} in, working with, and/or proliferating multicore-related products, including <b>processors,</b> infrastructure, <b>devices,</b> software, and applications. Its members represent vendors of processors, operating systems, compilers, development tools, debuggers, ESL/EDA tools, and simulators; and application and system developers.|$|R
40|$|This {{application}} report {{describes an}} interface between the Motorola MPC 860 microprocessor {{and the host}} port interface (HPI) of a Texas Instruments TMS 320 C 6000 (C 6000) digital signal <b>processor</b> (DSP) <b>device.</b> This document includes a schematic showing connections between the two devices, PAL equations, and verification that timin...|$|R
5000|$|An {{emphasis}} on power efficient <b>processor</b> and <b>device</b> design, rather than purely high processing power; {{one of the}} beneficiaries of this was ARM, a British company which had focused since the 1980s on powerful but low cost simple microprocessors. ARM architecture rapidly gained dominance {{in the market for}} mobile and embedded devices.|$|R
5000|$|<b>Processors</b> - these <b>devices</b> are {{normally}} connected in series to the signal path, so the input signal is {{replaced with the}} processed signal (e.g. equalizers).|$|R
40|$|Architectural {{advances}} have pushed general-purpose <b>processors</b> into <b>devices.</b> These " devices provide {{great opportunity for}} mitigating the I/O bottleneck. This paper presents principles that an intelligent device programming model should adhere {{to in order to}} achieve the full potential of these emerging devices. It also presents a prototype implementation of an intelligent device programming model. ...|$|R
50|$|In {{addition}} to standard <b>processor</b> architecture-specific <b>device</b> drivers, EFI {{provides for a}} processor-independent device driver stored in memory as EFI byte code or EBC. System firmware has an interpreter for EBC images. In that sense, EBC is analogous to Open Firmware, the hardware-independent firmware used in PowerPC-based Apple Macintosh and Sun Microsystems SPARC computers, among others.|$|R
40|$|Problem statement: This study {{described}} {{the design of}} a 3 -phase AC Induction Motor (ACIM) vector control drive with position encoder coupled to the motor shaft. Approach: It was based on free scale's (Motorola's) 68 k micro <b>processor</b> <b>devices.</b> Although the free scale 56 F 80 x (56800 core) and 56 F 8300 (56800 E core) families were well-suited for digital motor control and offer all things was needed, but we decided to realize a complete vector controller with a powerful 68 k processor. Results: Obviously all 680 X 0 and many 683 XX can overcome this task very easily, but we decided 68332 for time consuming because it combines high-performance data manipulation capabilities with powerful peripheral subsystems. All software and hardware was based on Peter J. Pinewski's nice research from Motorola. Conclusion: In this study the overall software algorithm and in two fellow papers the hardware schematics and performance will be described respectively...|$|R
50|$|The {{intent was}} to have a {{universal}} storable and interchangeable document structure that would not go out of date and could be used by any word processor or desktop publisher. The rapid adoption of personal computers in the late 1970s and early 1980s by consumers and small businesses and the relative ease of writing applications for the primitive early PCs had resulted in a huge number of new word processing applications that were then duking it out around the world for market dominance. At the same time, large corporations who had purchased dedicated word <b>processor</b> <b>devices</b> in the 1970s were switching over to the new PCs that could run word processing software and much more. The result was a profusion of constantly evolving proprietary file formats. It was already clear by 1985 that this confusing and often frustrating situation would get much worse before it got better, as desktop publishing and multimedia computing were already on the horizon.|$|R
