91|453|Public
50|$|Cycle bases {{have been}} used for solving <b>periodic</b> <b>scheduling</b> problems, such as the problem of {{determining}} the schedule for a public transportation system. In this application, the cycles of a cycle basis correspond to variables in an integer program for solving the problem.|$|E
50|$|Packets are {{forwarded}} from node to node {{according to}} predefined schedules, {{as shown in}} the figure below, i.e., each node forwards packets of a certain flow during predefined time frames. The time cycles define the periodic re-occurrence of the various predefined schedules. The <b>periodic</b> <b>scheduling</b> within each node results in a periodic packet forwarding across the network, which is referred to as pipeline forwarding for the ordered, step-by-step fashion with which packets travel toward their destination.|$|E
50|$|Edgerton Park Arena was {{the primary}} home of the NBA's Rochester Royals from 1945 to 1955. The Royals moved into the new Rochester Community War Memorial for the 1955-56 NBA season. But because of <b>periodic</b> <b>scheduling</b> {{conflicts}} and the two-month-long 1956 American Bowling Congress Finals scheduled for the War Memorial, the Royals returned to the Arena to play several games during the 1955-56 season. It also hosted performances by the Glenn Miller Orchestra and cowboy star Gene Autry in the 1940s. The arena held 4,200 people for basketball. The building was demolished in the late 1950s.|$|E
40|$|Abstract — In a perfectly-periodic schedule, time {{is divided}} into time-slots, and each client gets a time slot {{precisely}} every predefined number of time slots. The input to a schedule design algorithm is a frequency request for each client, and its task is to construct a perfectly <b>periodic</b> <b>schedule</b> that matches the requests as “closely ” as possible. The quality of the schedule {{is measured by the}} ratios between the requested frequency and the allocated frequency for each client (either by the weighted average or by the maximum of these ratios over all clients). <b>Periodic</b> <b>schedules</b> enjoy maximal fairness, and are very useful in many contexts of asymmetric communication, e. g., push systems and Bluetooth networks. However, finding an optimal <b>periodic</b> <b>schedule</b> is NP-hard in general. Tree scheduling is a methodology for developing perfectly <b>periodic</b> <b>schedules</b> with quality guarantees by constructing trees that correspond to <b>periodic</b> <b>schedules.</b> We explore a few aspects of tree scheduling. First, noting that a complete schedule table may be exponential in size, and that using the tree for scheduling directly may require logarithmic time on average, we give algorithms that find the next client to schedule in constant amortized time, using only polynomial space in most practical cases. Second, we present a few heuristic algorithms for generating schedules, based on analysis of optimal tree-scheduling algorithms, for both the average and maximum measures. Simulation results indicate that some of these heuristics produce excellent schedules in practice, sometimes even beating the best known non-periodic schedules. Index Terms — <b>periodic</b> <b>schedules,</b> fair scheduling, broadcast disks, Bluetooth, push systems I...|$|R
40|$|International audienceTimed event graphs (TEGs) and timed {{weighted}} event graphs (TWEGs), {{which have}} multiple arc cardinalities, {{have been widely}} used for automated production systems such as robotic work cells or embedded systems. TWEGs are useful for modeling batch flows of entities such as batch arrivals or processing of jobs. <b>Periodic</b> <b>schedules,</b> that combine an explicit description of starting times and an easy implementation, are particularly interesting, and have been proved to be optimal for ordinary timed event graphs (TEGs). In this paper, we present polynomial algorithms to check the existence of <b>periodic</b> <b>schedules</b> of bounded TWEGs and to compute their optimal throughput. These results can be considered as generalizations of those for ordinary timed event graphs. We then establish that <b>periodic</b> <b>schedules</b> are suboptimal for TWEGs and may not exist even for a live TWEG. The gap between optimal throughput and throughput of an optimal <b>periodic</b> <b>schedule</b> is experimentally investigated for a subclass of TWEGs, namely timed weighted circuits...|$|R
30|$|In this section, we derive the {{achievable}} secrecy {{rate with}} the following sequence of deterministic <b>periodic</b> <b>schedules.</b>|$|R
50|$|In November 2008, WVUA-CA {{became a}} {{part-time}} affiliate of This TV, {{while continuing to}} carry syndicated programming and local newscasts to fill certain time slots during which the station does not air the network's programs (this results in <b>periodic</b> <b>scheduling</b> issues due to the network's movie-dominant schedule, as some films run into time slots where WVUA-CD runs syndicated programs depending on their length or scheduled airtime). Since the station does not carry all of This TV's programming on its main channel nor on one of its subchannels, WVUA-CD is the largest part-time affiliate by market size that does not carry the network's full schedule.|$|E
40|$|AbstractWe {{discuss the}} {{computational}} {{complexity of the}} multidimensional <b>periodic</b> <b>scheduling</b> problem. This problem originates from the assignment of periodic tasks to processing units over time and it {{is related to the}} design of high-performance video signal processors. We present a model of multidimensional periodic operations and introduce the multidimensional <b>periodic</b> <b>scheduling</b> problem. Next, we show that this problem and two related sub-problems are NP-hard. Further-more, we identify several special cases induced by practical situations, of which some are proven to be polynomially solvable...|$|E
40|$|Abstract: This paper {{proposes a}} new {{approach}} to the well known Liu-Layland <b>periodic</b> <b>scheduling</b> problem. This approach proves that any justin-time sequence with maximum absolute deviation being less than one is in fact a periodic schedule. Consequently, periodic schedules can be obtained by any algorithm capable of generating just-in-time sequences with maximum absolute deviation being less than one, for instance, any algorithm minimizing maximum deviation or the quota methods of apportionment. Keywords: just-in-time sequencing, <b>periodic</b> <b>scheduling,</b> the Liu-Layland problem, hard real-time systems, apportionment problem...|$|E
40|$|In a perfectly-periodic schedule, time {{is divided}} into time-slots, and each client gets a time slot {{precisely}} every predefined number of time slots. The input to a schedule design algorithm is a frequency request for each client, and its task is to construct a perfectly <b>periodic</b> <b>schedule</b> that matches the requests as "closely" as possible. The quality of the schedule {{is measured by the}} ratios between the requested frequency and the allocated frequency for each client (either by the weighted average or by the maximum of these ratios over all clients). <b>Periodic</b> <b>schedules</b> enjoy maximal fairness, and are very useful in many contexts of asymmetric communication, e. g., push systems and Bluetooth networks. However, finding an optimal <b>periodic</b> <b>schedule</b> is NP-hard in general. Tree scheduling is a methodology for developing perfectly <b>periodic</b> <b>schedules</b> with quality guarantees by constructing trees that correspond to <b>periodic</b> <b>schedules.</b> We explore a few aspects of tree scheduling. First, noting that a complete schedule table may be exponential in size, and that using the tree for scheduling directly may require logarithmic time on average, we give algorithms that find the next client to schedule in constant amortized time, using only polynomial space in most practical cases. Second, we present a few heuristic algorithms for generating schedules, based on analysis of optimal tree-scheduling algorithms, for both the average and maximum measures. Simulation results indicate that some of these heuristics produce excellent schedules in practice, sometimes even beating the best known nonperiodic schedules...|$|R
40|$|Pigeons' pecks in the {{presence}} of two concurrently available initial-link stimuli occasionally produced one of two stimuli associated with mutually exclusive terminal links. Pecks during either terminal link produced food according to aperiodic (variable-interval and variable-ratio) or periodic (fixed-interval and fixed-ratio) schedules of reinforcement. Aperiodic and <b>periodic</b> <b>schedules</b> to which the pigeons were indifferent, in the sense that these schedules maintained equal responding in the initial links, often yielded different preferences in separate choice tests with a third schedule. Conversely, aperiodic and <b>periodic</b> <b>schedules</b> that were equally preferred to a third schedule often failed to generate indifference. These intransitivities imply that (1) aperiodic and <b>periodic</b> <b>schedules</b> are not functionally equivalent in their effects upon choice, and (2) efforts to find a simple method for transforming aperiodic <b>schedules</b> into their <b>periodic</b> equivalents will fail...|$|R
40|$|International audienceWe {{consider}} the computation of <b>periodic</b> cyclic <b>schedules</b> for linear precedence constraints graphs: a linear precedence constraint is defined between two tasks and induces an infinite set of usual precedence constraints between their executions {{such that the}} difference of iterations is a linear function. The objective function is the minimization of the maximal period of a task. We recall first that this problem may be modelled using linear programming. A polynomial algorithm is then developed to solve it for a particular class of linear precedence graphs called unitary graphs. We also show that a <b>periodic</b> <b>schedule</b> may not exist for unitary graphs. In the general case, a decomposition of the linear precedence graph into unitary components is computed and we assume that a <b>periodic</b> <b>schedule</b> exists {{for each of these}} components. Lower bounds on the periods are exhibited and we show that an optimal <b>periodic</b> <b>schedule</b> may not achieve them. The notion of quasi-periodic schedule is then introduced and we prove that this new class of schedules always reaches these bounds...|$|R
40|$|Given {{a set of}} n {{tasks and}} m resources, where each task x has a {{rational}} weight x:w = x:e=x:p; 0 < x:w < 1, a periodic schedule is one that allocates a resource to a task x for exactly x:e time units in each interval [x:p k; x:p (k + 1)) for all k 2 N. We de ne a notion of proportionate progress, called P-fairness, {{and use it to}} design an e cient algorithm which solves the <b>periodic</b> <b>scheduling</b> problem. Keywords: Euclid's algorithm, fairness, network ow, <b>periodic</b> <b>scheduling,</b> resource allocation...|$|E
40|$|Abstract — This paper {{looks at}} the problem of peak power demand {{reduction}} for intermittent operation of radiant systems in buildings. Uncoordinated operation of the circulation pumps of a multi-zone hydronic radiant system can cause temporally correlated electricity demand surges when multiple pumps are activated simultaneously. Under a demand-based electricity pricing policy, this uncoordinated behavior can result in high electricity costs and expensive system operation. We have previously presented Green Scheduling with the <b>periodic</b> <b>scheduling</b> approach for reducing the peak power demand of electric radiant heating systems while maintaining indoor thermal comfort. This paper develops an event-based state feedback scheduling strategy that, unlike <b>periodic</b> <b>scheduling,</b> directly {{takes into account the}} disturbances and is thus more suitable for building systems. The effectiveness of the new strategy is demonstrated through simulation in MATLAB. I...|$|E
30|$|If blank sub-frames are employed, {{even when}} such a noise level {{adjustment}} does not occur, the <b>periodic</b> <b>scheduling</b> of LTE active sub-frames collides with ongoing WiFi transmissions, which will likely experience other collisions during the LTE frames and increase the backoff counter accordingly, thus resulting in a reduction of the channel access rate.|$|E
40|$|We {{consider}} the computation of <b>periodic</b> cyclic <b>schedules</b> for linear precedence constraints graph: a linear precedence constraint is defined between two tasks and induces an infinite set of usual precedence constraints between their executions such the {{the difference of}} iterations is a linear function. The objective function is the minimization of the maximal period of a task. Firstly, we recall that this problem can be modelled using linear programming. Then, we develop a polynomial algorithm to solve it for unitary graphs, which is a particular class of linear precedence graph. We also show that a <b>periodic</b> <b>schedule</b> may not exists for this special case. In the general case, we compute a decomposition of the graph into unitary components and we suppose that a <b>periodic</b> <b>schedule</b> exists for each of them. We compute lower bounds on the periods and we show that an optimal <b>periodic</b> <b>schedule</b> may not achieve them. Then, we introduce the notion of quasi-periodic schedule, and we prove that this new class of schedule always reach these bounds...|$|R
40|$|AbstractHanen and Munier-Kordon [C. Hanen, A. Munier Kordon, <b>Periodic</b> <b>schedules</b> for linear {{precedence}} constraints, Discrete Applied Mathematics 157 (2) (2009) 280 – 291] {{have considered}} {{a problem of}} <b>scheduling</b> <b>periodic</b> tasks {{each of which has}} to be repeated with its own period. They have developed a weakly polynomial algorithm for a particular class of linear precedence graphs called unitary graphs, which generalizes the usual not-earlier precedence relations between the tasks. The purpose of this note is two-fold. First, we suggest a further generalization of the unitary relations that extends the usual not-later precedence relations; as a result, the arc lengths and heights in the underlying graph may be negative. Second, we show that, as soon as the arc heights in the graph are computed, an optimum <b>periodic</b> <b>schedule</b> can be found in strongly polynomial time...|$|R
50|$|Nearest Airport is Amausi Airport or Chaudhary Charan Singh International Airport (IATA: LKO, ICAO: VILK) having regular {{scheduled}} flight. Although Kanpur City have {{number of}} airstrips {{along with a}} full-fledged Airport {{but there have been}} only <b>periodic</b> <b>schedule</b> flights from it.|$|R
40|$|A {{number of}} {{scheduling}} and assignment problems are presented involving {{the execution of}} periodic operations in a multiprocessor environment. We consider the computational complexity of these problems and propose approximation algorithms for operations with identical periods {{as well as for}} operations with arbitrary integer periods. Keywords: <b>periodic</b> <b>scheduling,</b> periodic assignment, cyclic scheduling, nonpreemptive scheduling...|$|E
40|$|The Liu-Layland <b>periodic</b> <b>scheduling</b> {{problem can}} be solved by the house {{monotone}} quota methods of apportionment. This paper shows that staying within the quota is necessary for any apportionment divisor method to solve this problem. As a consequence no divisor method, or equivalently no population monotone method, solves the Liu-Layland problem. Scheduling Just-in-time scheduling Apportionment theory Divisor methods Hard real-time systems...|$|E
40|$|Given {{a set of}} n {{tasks and}} m resources, where each task x has a {{rational}} weight x:w = x:e=x:p; 0 ! x:w ! 1, a periodic schedule is one that allocates a resource to a task x for exactly x:e time units in each interval [x:p Δ k; x:p Δ (k + 1)) for all k 2 N. We define a notion of proportionate progress, called P-fairness, {{and use it to}} design an efficient algorithm which solves the <b>periodic</b> <b>scheduling</b> problem. Keywords: Euclid's algorithm, fairness, network flow, <b>periodic</b> <b>scheduling,</b> resource allocation. This research was supported by NSF Research Initiation Award CCR [...] 9111591, and Texas Advanced Research Program (TARP) Award # 003658480. Contact author: Prof. Greg Plaxton, Department of Computer Science, University of Texas at Austin, Taylor Hall 2. 124, Austin, Texas 78712 [...] 1188. Telephone: (512) 471 [...] 9751. FAX: (512) 471 [...] 8885. Email: plaxton@cs. utexas. edu. 1 Introduction Scheduling is the act of assigning resources to activities or tasks. Scheduling problems typicall [...] ...|$|E
50|$|Nearest International Airport is Amausi Airport or Chaudhary Charan Singh International Airport (IATA: LKO, ICAO: VILK) having regular {{scheduled}} flight.Nearest Domestic {{airport is}} at Kanpur Chakeri. Although Kanpur City have number of airstrips {{along with a}} full-fledged Airport {{but there have been}} only <b>periodic</b> <b>schedule</b> flights from it.|$|R
40|$|Abstract — This paper {{studies the}} infinite-horizon sensor {{scheduling}} problem for linear Gaussian processes with linear measurement functions. Several important {{properties of the}} optimal infinite-horizon schedules are derived. In particular, it is proved that under some mild conditions, both the optimal infinite-horizon average-per-stage cost and the corresponding optimal sensor schedules are independent of the covariance matrix of the initial state. It is also proved that the optimal estimation cost can be approximated arbitrarily close by a <b>periodic</b> <b>schedule</b> with a finite period, and moreover, the trajectory of the error covariance matrix under this <b>periodic</b> <b>schedule</b> converges exponentially to a unique limit cycle. These theoretical results provide valuable insights about the problem {{and can be used}} as general guidelines in the design and analysis of various infinite-horizon sensor scheduling algorithms. I...|$|R
40|$|Various {{theories}} of temporal control and schedule induction imply that <b>periodic</b> <b>schedules</b> temporally modulate an organism's motivational states within interreinforcement intervals. This speculation has been fueled by frequently observed multimodal activity distributions created by averaging across interreinforcement intervals. We tested this hypothesis by manipulating the cost associated with schedule-induced {{activities and the}} availability of other activities to determine the degree to which (a) the temporal distributions of activities within the interreinforcement interval are fixed or can be temporally displaced, (b) rats can reallocate activities across different interreinforcement intervals, and (c) noninduced activities can substitute for schedule-induced activities. Obtained multimodal activity distributions created by averaging across interreinforcement intervals were not representative of the transitions occurring within individual intervals, so the averaged multimodal distributions should not be assumed to represent changes in the subject's motivational states within the interval. Rather, the multimodal distributions often result from averaging across interreinforcement intervals in which only a single activity occurs. A direct influence of the <b>periodic</b> <b>schedule</b> on the motivational states implies that drinking and running should occur at different periods within the interval, but in three experiments the starting times of drinking and running within interreinforcement intervals were equal. Thus, the sequential pattern of drinking and running on <b>periodic</b> <b>schedules</b> does not result from temporal modulation of motivational states within interreinforcement intervals...|$|R
3000|$|... [...]. Note {{that the}} minimum s_n^(2) is {{achieved}} when all resource blocks {{assigned to the}} sensor n are equally distributed in time-dimension, i.e., s_n^(2)= (T/R_n)^ 2. Hence, <b>periodic</b> <b>scheduling</b> achieves the lowest mean waiting delay as shown by (6). Since one packet is delivered only in one time slot, after waiting, the packet is transmitted within one slot. Therefore, (7) holds for the lower bound of mean packet transmission delay.|$|E
40|$|International audienceWe {{present a}} new {{representation}} for the scheduling problem {{that allows a}} significant simplification for its solution, especially for the multiprocessor case. We use this representation to solve in an efficient way the <b>periodic</b> <b>scheduling</b> problem on uniform multiprocessors, which has been open for a long time. We also derive optimal multiprocessor schedulers for several other important cases, such as finite job sets and the task systems for OASIS...|$|E
40|$|International audienceWe propose an {{enhanced}} {{version of a}} original heuristic first proposed in Al Sheikh (2011) to solve a NP-hard strictly <b>periodic</b> <b>scheduling</b> prob- lem. Inspired by game theory, the heuristic reaches an equilibrium by iteratively solving best response problems. Our contribution is to greatly improve its efficiency, {{taking advantage of the}} two-dimensionality of the best response problem. The results show that the new heuristic compares favorably with MILP solutions...|$|E
40|$|We {{consider}} <b>periodic</b> sensor <b>scheduling</b> for remote {{state estimation}} under average transmission energy constraint. The sensor decides {{whether or not}} to send its data to a remote estimator {{in order to meet the}} transmission energy constraint. The transmitted data are likely to be dropped due to the imperfect communication. An optimal <b>periodic</b> <b>schedule</b> is found via the tools from the Markov chain. Furthermore, a sufficient condition of the system dynamics, energy budget, and packet drop rate, under which the remote estimator is guaranteed to be stable, is derived. Examples are provided to show the effectiveness of results...|$|R
40|$|International audienceCyclo-Static Dataflow Graphs (CSDFGs in short) is {{a static}} model {{commonly}} used to describe communications between processes. It is increasingly considered for modeling applications executed by many-core architectures; their static analysis becomes thus essential for developing efficient compile- time optimization. This paper aims to develop efficient algorithms to approxi- mately solve two main difficult problems: {{the determination of the}} maximum throughput of a CSDFG and the optimization of the buffer sizes with a minimum required throughput. They are both based on a new characterization of feasible <b>periodic</b> <b>schedules.</b> A polynomial-time algorithm is deduced to evaluate the maximum throughput of a <b>periodic</b> <b>schedule,</b> providing a lower bound of the maximum throughput of the CSDFG. A new model for the optimization of the buffer sizes with a minimum required throughput based on integer linear pro- gramming is also developed, leading to a new algorithm to solve it approximately. Our algorithms are successfully compared with other academic solutions through representative benchmarks...|$|R
40|$|International audienceWe {{consider}} {{in this paper}} a set of generic tasks constrained {{by a set of}} uniform precedence constraints corresponding to a natural generalization of the basic cyclic scheduling problem. The two parameters of any uniform constraint (namely the value and the height) between two tasks may be negative, which allows one to tackle a larger class of practical applications. We firstly study the structure and the existence of a <b>periodic</b> <b>schedule.</b> A necessary and sufficient condition for the existence of a schedule is then deduced. As there are no resource constraints, tasks following the earliest schedule have minimum average cycle times. The permanent state of the earliest schedule is characterized and we point out that the minimum average cycle times of tasks are equal for the earliest schedule and an optimal <b>periodic</b> <b>schedule.</b> An algorithm to check the existence of a schedule and to compute these minimum average cycle times using linear programming is lastly presented...|$|R
40|$|<b>Periodic</b> <b>scheduling</b> {{has many}} attractions for {{wireless}} telecommunications. It offers energy saving where equipment {{can be turned}} off between transmissions, and high-quality reception through the elimination of jitter, caused by irregularity of reception. However, perfect periodic schedules, in which each (of n) client is serviced at regular, prespecified intervals, are notoriously difficult to construct. The problem {{is known to be}} NP-hard even when service times are identical. This paper focuses on cases of up to three distinct periodicities, with unit service times. Our contribution is to derive a O (n 4) test for the existence of a feasible schedule, and a method of constructing a feasible schedule if one exists, for the given combination of client periodicities. We also indicate why schedules with a higher number of periodicities are unlikely to be useful in practice. This methodology can be used to support perfect <b>periodic</b> <b>scheduling</b> in a wide range in real world settings, including machine maintenance service, wireless mesh networks and various other telecommunication networks transmitting packet size data. © 2013 Springer Science+Business Media New York...|$|E
40|$|International audienceUsual <b>periodic</b> <b>scheduling</b> {{problems}} {{deal with}} precedence constraints having non-negative latencies. This seems a natural way for modelling scheduling problems, since task delays are generally non-negative quantities. However, in some cases, {{we need to}} consider edges latencies that do not only model task latencies, but model other precedence constraints. For instance in register optimisation problems devoted to optimising compilation, a generic machine or processor model can allow considering access delays into/from registers. Edge latencies may be then non-positive leading to a difficult scheduling problem in presence of resources constraints. This research result is related to the problem of <b>periodic</b> <b>scheduling</b> with storage requirement optimisation; its aims is to solve the practical problem of register optimisation in optimising compilation. We show that pre-conditioning a data dependence graph (DDG) to satisfy register constraints before <b>periodic</b> <b>scheduling</b> under resources constraints may create circuits with non-positive distances, resulted from the acceptance of non-positive edge latencies. As a compiler construction strategy, it is forbidden to allow the creation of circuits with non-positive distances during the compilation flow, because such DDG circuits do not guarantee the existence of a valid instruction schedule under resource constraints. We study two solutions to avoid the creation of these problematic circuits. A first solution is reactive, it tolerates the creation of non-positive circuit in a first step, and if detected in a further check step, makes a backtrack to eliminate them. A second solution is proactive, it prevents the creation of non-positive circuits in the DDG during the register optimisation process. It is based on shortest path equations which define a necessary and sufficient condition to free any DDG from these problematic circuits. Then we deduce a linear program accordingly. We have implemented our solutions and we present successful experimental results...|$|E
40|$|Given n {{periodic}} tasks, each {{characterized by}} an execution requirement and a period, and m identical copies of a resource, the <b>periodic</b> <b>scheduling</b> problem is concerned with generating a schedule for the n tasks on the m resources. We present an algorithm that schedules every feasible instance of the <b>periodic</b> <b>scheduling</b> problem, and runs in O(minfm lg n; ng) time per slot scheduled. 1 Introduction Given a set Γ of n tasks, where each task x is characterized by two integer parameters x:e and x:p, and m identical copies of a resource, a periodic schedule is one that allocates a resource to each task x in Γ for exactly x:e time units in each interval [k Δ x:p; (k + 1) Δ x:p) for all k in N, subject to the following constraints: Constraint 1 : A resource can only be allocated to a task for an entire "slot" of time, where for each i in N slot i is the unit interval from time i to time i + 1. Constraint 2 : No task may be allocated more than one copy of the resource in [...] ...|$|E
40|$|In a perfectly-periodic schedule, time {{is divided}} into time-slots, and each client gets a time slot {{precisely}} every predefined number of time slots, called the period of that client. <b>Periodic</b> <b>schedules</b> are useful in mobile communication where they can help save power in the mobile device, and they also enjoy the best possible smoothness. In this paper we study the question of dispatching in a perfectly <b>periodic</b> <b>schedule,</b> namely {{how to find the}} next item to schedule, assuming that the schedule is already given somehow. Simple dispatching algorithms suffer from either linear time complexity per slot or from exponential space requirement. We show that if the schedule is given in a natural tree representation, then there exists a way to get the best possible running time per slot for a given space parameter, or the best possible space (up to a polynomial) for a given time parameter. We show that in many practical cases, the running time is constant and the space complexity is polynomial. ...|$|R
40|$|In this {{technical}} note, {{we consider}} the problem of <b>periodic</b> sensor <b>scheduling</b> with limited resources. Two sensors are {{used to measure the}} state of a discrete-time linear process. We assume that each sensor has a maximum duty cycle and at most one sensor can communicate with a remote estimator at each time step due to the limited communication bandwidth. When a sensor is scheduled to send data, it sends the most recent measurement data to the estimator. Upon receiving the measurement data from the sensors, the estimator computes the optimal estimate {{of the state of the}} process. We first present a necessary condition for a <b>periodic</b> sensor <b>schedule</b> to be optimal. Based on this necessary condition, we construct an optimal <b>periodic</b> <b>schedule</b> that minimizes the estimation error at the estimator and at the same time satisfies the energy and communication bandwidth constraints. Examples are provided throughout the technical note to demonstrate the results developed...|$|R
40|$|AbstractWe {{show that}} there is a curious {{connection}} between circular colorings of edge-weighted digraphs and <b>periodic</b> <b>schedules</b> of timed marked graphs. Circular coloring of an edge-weighted digraph was introduced by Mohar [B. Mohar, Circular colorings of edge-weighted graphs, J. Graph Theory 43 (2003) 107 – 116]. This kind of coloring is a very natural generalization of several well-known graph coloring problems including the usual circular coloring [X. Zhu, Circular chromatic number: A survey, Discrete Math. 229 (2001) 371 – 410] and the circular coloring of vertex-weighted graphs [W. Deuber, X. Zhu, Circular coloring of weighted graphs, J. Graph Theory 23 (1996) 365 – 376]. Timed marked graphs G→ [R. M. Karp, R. E. Miller, Properties of a model for parallel computations: Determinancy, termination, queuing, SIAM J. Appl. Math. 14 (1966) 1390 – 1411] are used, in computer science, to model the data movement in parallel computations, where a vertex represents a task, an arc uv with weight cuv represents a data channel with communication cost, and tokens on arc uv represent the input data of task vertex v. Dynamically, if vertex u operates at time t, then u removes one token from each of its in-arc; if uv is an out-arc of u, then at time t+cuv vertex u places one token on arc uv. Computer scientists are interested in designing, for each vertex u, a sequence of time instants {fu(1),fu(2),fu(3),…} such that vertex u starts its kth operation at time fu(k) and each in-arc of u contains at least one token at that time. The set of functions {fu:u∈V(G→) } is called a schedule of G→. Computer scientists are particularly interested in <b>periodic</b> <b>schedules.</b> Given a timed marked graph G→, they ask if there exist a period p> 0 and real numbers xu such that G→ has a <b>periodic</b> <b>schedule</b> of the form fu(k) =xu+p(k− 1) for each vertex u and any positive integer k. In this note we demonstrate an unexpected connection between circular colorings and <b>periodic</b> <b>schedules.</b> The aim of this note is to provide a possibility of translating problems and methods from one area of graph coloring to another area of computer science...|$|R
