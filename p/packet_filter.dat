183|526|Public
25|$|OpenBSD's {{security}} enhancements, built-in cryptography, and the pf <b>packet</b> <b>filter</b> suit it {{for use in}} {{the security}} industry, such as on firewalls, intrusion-detection systems, and VPN gateways.|$|E
25|$|Because of {{licensing}} concerns, the OpenBSD {{team has}} re-implemented software from scratch or adopted suitable existing software. Of particular note is the development, after license restrictions were imposed on IPFilter, of the pf <b>packet</b> <b>filter,</b> which {{first appeared in}} OpenBSD 3.0 and is now available in other major BSDs. OpenBSD developers have also replaced GPL licensed tools (such as diff, grep and pkg-config) with BSD licensed equivalents.|$|E
2500|$|SCO's {{first public}} {{disclosure}} {{of what they}} claim is infringing code was at SCO Forum in August 2003. [...] The first, known as the Berkeley <b>Packet</b> <b>Filter,</b> was distributed under the BSD License and is freely usable by anyone. [...] The second example was related to memory allocation functions, also released under the BSD License. It {{is no longer in}} the Linux code base.|$|E
40|$|Ever-increasing {{numbers of}} IP router {{products}} are offering <b>packet</b> <b>filtering</b> {{as a tool}} for improving network security. Used properly, <b>packet</b> <b>filtering</b> is a useful tool for the security-conscious network administrator, but its effective use requires a thorough understanding of its capabilities and weaknesses, and of the quirks of the particular protocols that filters are being applied to. This paper examines the utility of IP <b>packet</b> <b>filtering</b> as a network security measure, briefly contrasts IP <b>packet</b> <b>filtering</b> to alternative network security approaches such as application-level gate-ways, describes what <b>packet</b> <b>filters</b> might examine in each packet, and describes the characteristics of common application protocols as they relate to <b>packet</b> <b>filtering.</b> The paper then identifies and examines problems common to many current <b>packet</b> <b>filtering</b> implementations, shows how these problems can easily undermine the network administrator’s intents and lead to a false sense of security, and proposes solu-tions to these problems. Finally, the paper concludes that <b>packet</b> <b>filtering</b> is currently a viable network security mechanism, but that its utility could be greatly improved with the extensions proposed in the paper. 1...|$|R
40|$|Abstract:- In Gist {{we are in}} era of Networks and a Network {{cannot be}} {{imagined}} without DTE,DSE,DCE’s. Data Terminal Equipments (DTE) are devices {{that are responsible for}} interdomain connectivity. Whether we are in Intranets or Extranets without DTE a Network cannot be imagined, here DTE imply means Routers and in this Emerging Technology Router is necessary. Even grower Networks number of outers are increasing and Ever-increasing numbers of IP router products are offering <b>packet</b> <b>filtering</b> as a ool for improving network security. Used properly, <b>packet</b> <b>filtering</b> is a useful tool for the security on scions network administrator, but its effective use requires a thorough understanding of its capabilities and weaknesses, and of the quirks of particular protocols that filters are being applied to. This paper examines he utility of IP <b>packet</b> <b>filtering</b> as a network security measure, briefly contrasts IP <b>packet</b> <b>filtering</b> to lternative network security approaches such as application-level gate- ways, describes what <b>packet</b> <b>filters</b> ight examine in each packet, and describes the characteristics of common application protocols as they relate to <b>packet</b> <b>filtering.</b> The paper then identifies and examines problems common to many current packet iltering implementations, shows how these problems can easily undermine the net- work administrator's ntents and lead to a false sense of security, and proposes solu- tions to these problems. Finally, the paper oncludes that <b>packet</b> <b>filtering</b> is currently a viable network security mechanism...|$|R
40|$|Modern Linux {{clusters}} {{are under}} increasing security threats. This paper will discuss {{various aspects of}} cluster network security, including: firewalls, ssh, Kerberos, stateful and stateless <b>packet</b> <b>filtering,</b> and newer kernel security features. A program that generates ipchains/iptables <b>packet</b> <b>filtering</b> rule sets from a simple configuration file is discussed...|$|R
2500|$|In August 2003, SCO {{presented}} {{two examples}} of what they claimed was illegal copying of copyrighted code from UNIX to Linux. One of the examples (Berkeley <b>Packet</b> <b>Filter)</b> {{was not related to}} original UNIX code at all. The other example did, however, seem to originate from the UNIX code and was apparently contributed by a UNIX vendor, Silicon Graphics. However, an analysis by the Linux community later revealed that: ...|$|E
50|$|If {{there is}} a single {{computer}} running a <b>packet</b> <b>filter,</b> and it goes down, the networks {{on either side of the}} <b>packet</b> <b>filter</b> can no longer communicate with each other, or they communicate without any packet filtering. If, however, there are two computers running a <b>packet</b> <b>filter,</b> running CARP, then if one fails, the other will take over, and computers on either side of the <b>packet</b> <b>filter</b> will not be aware of the failure, so operation will continue as normal. In order to make sure the new master operates the same as the old one, the <b>packet</b> <b>filter</b> used must support synchronization of state between the two computers.|$|E
50|$|PF (<b>Packet</b> <b>Filter,</b> {{also written}} pf) is a BSD {{licensed}} stateful <b>packet</b> <b>filter,</b> a central piece of software for firewalling. It {{is comparable to}} netfilter (iptables), ipfw and ipfilter.|$|E
40|$|Building in securityFirewall {{varieties}} Protect vulnerable machines; compensatefor {{impossibility of}} securing internal networks. 1. <b>Packet</b> <b>filters.</b> Cheap, fast, stateless. Filter based on source/dest addresses, port numbers. Built into routers. Drawbacks: prevent some protocols (plain FTP, maybeUDP), dynamicport assignment (RPC). Firewall varieties Protect vulnerable machines; compensatefor impossibility of securing internal networks. 1. <b>Packet</b> <b>filters.</b> Cheap, fast, stateless. Filter based on source/dest addresses, port numbers. Built into routers. Drawbacks: prevent some protocols (plain FTP, maybeUDP), dynamicport assignment (RPC). 2. Dynamic <b>packet</b> <b>filters.</b> Statefulfilters; allow more protocols by parsing commandstreams, portmappermessages, UDP protocols,“port knocking”. Drawback: complexity. Firewall varieties Protect vulnerable machines; compensatefor impossibility of securing internal networks. 1. <b>Packet</b> <b>filters.</b> Cheap, fast, stateless. Filter based on source/dest addresses, port numbers. Built into routers. Drawbacks: prevent some protocols (plain FTP, maybeUDP), dynamicport assignment (RPC). 2. Dynamic <b>packet</b> <b>filters.</b> Statefulfilters; allow more protocols by parsing commandstreams, portmappermessages, UDP protocols,“port knocking”. Drawback: complexity. 3. Application gateways. Each app has dedicated program at firewall which {{acts as a}} relay/proxy. SMTP and HTTP work well. Drawback: gateways for each app; bottlenecks. Firewall varieties Protect vulnerable machines; compensatefor impossibility of securing internal networks. 1. <b>Packet</b> <b>filters.</b> Cheap, fast, stateless. Filter based on source/dest addresses, port numbers. Built into routers. Drawbacks: prevent some protocols (plain FTP, maybeUDP), dynamicport assignment (RPC). 2. Dynamic <b>packet</b> <b>filters.</b> Statefulfilters; allow more protocols by parsing commandstreams, portmappermessages, UDP protocols,“port knocking”. Drawback: complexity. 3. Application gateways. Each app has dedicated program at firewall which acts as a relay/proxy. SMTP and HTTP work well. Drawback: gateways for each app; bottlenecks...|$|R
5000|$|Manage {{hardware}} <b>packet</b> <b>filters</b> in the on-board network adapter.|$|R
40|$|<b>Packet</b> <b>filtering</b> {{allows a}} network gateway {{to control the}} network traffic flows and protect the {{computer}} system. Most of the recent research works on the filtering systems mainly concern the performance, reliability and defence against common network attacks. However, since the gateway might be controlled by red an untrusted attacker, who might try to infer the identity privacy of the sender host and mount IP tracking to its data packets. IP spoofing is another problem. To avoid data <b>packets</b> to be <b>filtered</b> in the <b>packet</b> <b>filtering</b> system, the malicious sender host might use a spoofed source IP address. Therefore, to preserve the source IP privacy and provide source IP authentication simultaneously in the filtering system is an interesting and challenging problem. To deal with the problem, we construct a data <b>packet</b> <b>filtering</b> scheme, which is formally proved to be semantic secure against the chosen IP attack and IP guessing attack. Based on this filtering scheme, we propose the first privacy-preserving <b>packet</b> <b>filtering</b> system, where the data packets whose source IP addresses are at risk are filtered, {{the privacy of the}} source IP is protected and its correctness can be verified by the recipient host. The analysis shows that our protocol can fulfil the objectives of a data <b>packet</b> <b>filtering</b> system. The performance evaluation demonstrates its applicability in the current network systems. We also presented a <b>packet</b> <b>filtering</b> scheme, where the data packets from one subnet can be filtered with only one filter policy...|$|R
50|$|Administrators {{configure}} port forwarding in the gateway's operating system. In Linux kernels, this {{is achieved}} by <b>packet</b> <b>filter</b> rules in the iptables or netfilter kernel components. BSD and Mac OS X operating systems prior to Yosemite (OS 10.10.X) implement it in the Ipfirewall (ipfw) module while and Mac OS X operating systems beginning with Yosemite implement it in the <b>Packet</b> <b>Filter</b> (pf) module.|$|E
5000|$|PF (firewall), the OpenBSD <b>packet</b> <b>filter</b> {{supports}} IP version translation since version 5.1, includes NAT64 ...|$|E
5000|$|The {{following}} example shows {{a simple}} <b>packet</b> <b>filter</b> for the INPUT chain for the above described example: ...|$|E
40|$|Protect {{vulnerable}} machines; {{compensate for}} impossibility of securing internal networks. 1. <b>Packet</b> <b>filters.</b> Cheap, fast, stateless. Filter based on source/dest addresses, port numbers. Built into routers. Drawbacks: prevent some protocols (plain FTP, maybe UDP), dynamic port assignment (RPC). Firewall varieties Protect vulnerable machines; compensate for impossibility of securing internal networks. 1. <b>Packet</b> <b>filters.</b> Cheap, fast, stateless. Filter based on source/dest addresses, port numbers. Built into routers. Drawbacks: prevent some protocols (plain FTP, maybe UDP), dynamic port assignment (RPC). 2. Dynamic <b>packet</b> <b>filters.</b> Stateful filters; allow more protocols by parsing command streams, portmapper messages, UDP protocols, “port knocking”. Drawback: complexity. Firewall varietie...|$|R
40|$|Mayday is an {{architecture}} that combines overlay networks with lightweight <b>packet</b> <b>filtering</b> {{to defend against}} denial of service attacks. The overlay nodes perform client authentication and protocol verification, and then relay the requests to a protected server. The server is protected from outside attack by simple <b>packet</b> <b>filtering</b> rules that can be efficiently deployed even in backbone routers. Mayda...|$|R
40|$|Abstract-The {{wireless}} Ad hoc {{network is}} the self configuring type of network. In self configuring type of networks mobile nodes can leave or join the network when they want. In such type of networks many {{inside and outside}} attacks are possible. Inside and outside attacks are broadly classified as active and passive attacks. Attackers can perform many active and passive attacks; these attacks are channel jamming attack, black hole attack, Man-in- middle attack. <b>Packet</b> <b>filtering</b> technique is the efficient technique to prevent active and passive attacks. In this paper, we review various problems for implementing the <b>packet</b> <b>filtering</b> in MANET and propose new technique for <b>Packet</b> <b>filtering...</b>|$|R
50|$|OpenBSD's <b>packet</b> <b>filter</b> {{specifically}} avoids DPI for {{the very}} reason that it cannot be done securely with confidence.|$|E
5000|$|... libipq {{has been}} used by some widely {{deployed}} applications as their interface to the Linux kernel-space iptables <b>packet</b> <b>filter.</b>|$|E
5000|$|With the {{advanced}} <b>packet</b> <b>filter,</b> rules {{can also be}} specified for source and destination IP addresses and port ranges.|$|E
40|$|This report {{describes}} Proof-Carrying Code, {{a software}} mechanism {{that allows a}} host system to determine with certainty that {{it is safe to}} execute a program supplied by an untrusted source. For this to be possible, the untrusted code supplier must provide with the code a safety proof that attests to the code's safety properties. The code consumer can easily and quickly validate the proof without using cryptography and without consulting any external agents. In order to gain preliminary experience with proof-carrying code, we have performed a series of case studies. In one case study, we write safe assembly-language network <b>packet</b> <b>filters.</b> These filters can be executed with no run-time overhead, beyond a one-time cost of 1 to 3 milliseconds for validating the attached proofs. The net result is that our <b>packet</b> <b>filters</b> are formally guaranteed to be safe and are faster than <b>packet</b> <b>filters</b> created using Berkeley <b>Packet</b> <b>Filters,</b> Software Fault Isolation, or safe languages such as Modula- 3. In [...] ...|$|R
5000|$|Outbound <b>packet</b> <b>filtering,</b> {{reflecting}} increasing {{concerns about}} spyware and viruses {{that attempt to}} [...] "phone home".|$|R
40|$|<b>Packet</b> <b>filtering</b> plays a {{critical}} role in many of the current high speed network technologies such as firewalls and IPSec devices. The optimization of firewall policies is critically important to provide high performance <b>packet</b> <b>filtering</b> particularly for high speed network security. Current <b>packet</b> <b>filtering</b> techniques exploit the characteristics of the filtering policies, but they do not consider the traffic behavior in optimizing their search data structures. This results in impractically high space complexity, which undermines the performance gain offered by these techniques. Also, these techniques offer upper bounds for the worst case search times; nevertheless, average case scenarios are not necessarily optimized. Moreover, the types of <b>packet</b> <b>filtering</b> fields used in most of these techniques are limited to IP header fields and cannot be generalized to cover transport and application layer filtering. In this paper, we present a novel technique that utilizes Internet traffic characteristics to optimize firewall filtering policies. The proposed technique timely adapts to the traffic conditions using actively calculated statistics to dynamically optimize the ordering of <b>packet</b> <b>filtering</b> rules. The rule importance in traffic matching as well as its dependency on other rules are both considered in our optimization algorithm. Through extensive evaluation experiments using simulated and real Internet traffic traces, the proposed mechanism is shown to be efficient and easy to deploy in practical firewall implementations. 1...|$|R
5000|$|... #Caption: The Linux kernel's packet {{scheduler}} {{is part of}} {{the network}} stack, together with netfilter, nftables, and Berkeley <b>Packet</b> <b>Filter.</b>|$|E
5000|$|The kernel {{implements}} a programmable <b>packet</b> <b>filter,</b> which executes {{programs in}} a byte code language designed for easy security-checking by the kernel.|$|E
5000|$|Snort - Snort is an Intrusion Detection System {{which runs}} in user-space and uses libipq to {{interface}} with Linux's iptables <b>packet</b> <b>filter.</b>|$|E
50|$|CHAOS was {{the first}} openMosix {{distribution}} to provide IPSEC and IP <b>packet</b> <b>filtering</b> to the cluster node, enabling authentication and encryption for inter-node communications, and enabling <b>packet</b> <b>filtering</b> to prevent non-cluster devices from accessing the vulnerable openMosix communications ports. These security controls allowed the cluster builder to utilise desktop computers in semi-trusted networks with minimal risk to cluster integrity, thus {{increasing the number of}} resources available for inclusion within the cluster.|$|R
40|$|This thesis {{deals with}} {{the design of a}} {{universal}} hardware acceleration unit for <b>packet</b> <b>filtering</b> in FPGA for 10 G networks. Maximum count of rules is greatly increased by the use of external QDR-II memory. Parameters of accelerator are suitable for NAT, <b>packet</b> <b>filtering</b> and lawful interceptions. The platform uses variable number of processing units. One of them controls accelerator by USB port. The rest is used for network processing...|$|R
40|$|Firewalls are {{hardware}} and software systems that protect a network from attacks coming from the Internet. <b>Packet</b> <b>filtering</b> firewalls are efficient, fast and provide a good level of security and have withstood the test of time. Firewalls based on <b>packet</b> <b>filtering</b> provide protection through granting or denying access to passing packets. Each individual incoming or outgoing packet is inspected against a number of rules in an access list. The result of this inspection determines the decision to be made. The great expansion in communication and the increased number of users on the Internet place more pressure on firewalls to provide greater security at higher performance levels without being the bottleneck of communication. This enforces the search for better or more efficient methods of implementing firewalls. In this paper we examine the affects that ordering of the rules in access lists has {{on the performance of}} <b>packet</b> <b>filtering.</b> This is done through simulation of a network device performing <b>packet</b> <b>filtering.</b> Simulation enables more experiments to be carried out under exact repeated conditions allowing comparisons to be made which otherwise may not be possible...|$|R
5000|$|Netfilter - Firewall, <b>Packet</b> <b>Filter</b> and Stateful Packet Inspection (SPI), Layer 7 {{filter to}} block or shape the {{connections}} generated by Peer to Peer clients ...|$|E
50|$|The arptables {{computer}} software utility is a network administrator's tool {{for maintaining the}} Address Resolution Protocol (ARP) <b>packet</b> <b>filter</b> rules in the Linux kernel firewall modules.|$|E
50|$|OpenBSD's {{security}} enhancements, built-in cryptography, and the pf <b>packet</b> <b>filter</b> suit it {{for use in}} {{the security}} industry, such as on firewalls, intrusion-detection systems, and VPN gateways.|$|E
30|$|<b>Packet</b> <b>filtering</b> scheme, using p 0 f [491], {{based on}} passive TCP/IP {{fingerprinting}} to reject incorrectly formed TPC/IP packets.|$|R
50|$|Stateful packet {{inspection}} (SPI), {{also referred}} to as dynamic <b>packet</b> <b>filtering,</b> is a security feature often included in business networks.|$|R
50|$|The {{blue team}} {{must always be}} mindful of the network perimeter, {{including}} traffic flow, <b>packet</b> <b>filtering,</b> proxy firewalls, and intrusion detection systems.|$|R
