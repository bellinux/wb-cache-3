2|2184|Public
5000|$|The common switch {{interface}} (CSIX) is a <b>physical</b> <b>interface</b> <b>specification</b> between a traffic manager (network processor) and a switching fabric. It {{was developed by}} the Network Processing Forum to: ...|$|E
50|$|The Weihenstephan Standards (WS) are {{communication}} interfaces for machine data acquisition. Currently libraries have been realised for connecting bottling and packaging plants (WS Pack) and machines for food processing (WS Food) with higher-level systems, such as data acquisition systems (SCADA) or Manufacturing Execution Systems (MES). In the Weihenstephan Standards, the <b>physical</b> <b>interface</b> <b>specification,</b> specification of the interface content, recommendations for data {{evaluation and reporting}} are defined.|$|E
40|$|The {{focus of}} the Worcester Polytechnic Institute (WPI) Advanced Space Design Program was the {{preliminary}} design of the Integrated Support Structure for GASCAN II, a Get Away Special canister donated by the MITRE Corporation. Two teams of three students each worked on the support structure. There was a structural design team and a thermal design team. The structure will carry three experiments also undergoing preliminary design this year, the mu-gravity Ignition Experiment, the Rotational Flow in Low Gravity Experiment, and the Ionospheric Properties and Propagation Experiment. The structural design team {{was responsible for the}} layout of the GASCAN and the preliminary design of the structure itself. They produced the <b>physical</b> <b>interface</b> <b>specifications</b> defining the baseline weights and volumes for the equipment and produced layout drawings of the system. The team produced static and modal finite element analysis of the structure using ANSYS. The thermal design team was responsible for the power and timing requirements of the payload and for the identification and preliminary analysis of potential thermal problems. The team produced the power, timing, and energy <b>interface</b> <b>specifications</b> and assisted {{in the development of the}} specification of the battery pack. The thermal parameters of each experiment were cataloged and the experiments were subjected to worst case heat transfer scenarios...|$|R
50|$|X.21 (sometimes {{referred}} to as X21) is an <b>interface</b> <b>specification</b> for differential communications introduced in the mid-1970s by the ITU-T. X.21 was first introduced {{as a means to}} provide a digital signaling interface for telecommunications between carriers and customers' equipment. This includes <b>specifications</b> for DTE/DCE <b>physical</b> <b>interface</b> elements, alignment of call control characters and error checking, elements of the call control phase for circuit switching services, and test loops.|$|R
40|$|User <b>interface</b> <b>specification</b> {{languages}} {{are concerned with}} describing the requirements for the structure of dialogue between an interactive system and its users. The central objective for a user <b>interface</b> <b>specification</b> language is to provide the ability to construct and maintain specifications which establish {{a wide range of}} perspectives and facilitate analysis. This paper presents a number of characteristics possessed by various user <b>interface</b> <b>specification</b> languages in order to achieve this aim. 1 Introduction User <b>interface</b> <b>specification</b> {{languages are}} concerned with describing the requirements for the structure of dialogue between an interactive system and its users. In addition, a user <b>interface</b> <b>specification</b> enables developers to verify that any required constraints are maintained, and to analyse various aspects related to the usability of a user interface. A significant number of approaches to user <b>interface</b> <b>specification</b> have accumulated over the past ten years. These approaches [...] ...|$|R
5000|$|<b>Interface</b> <b>specification,</b> {{that defines}} how HLA {{compliant}} simulators {{interact with the}} run-time infrastructure (RTI). The RTI provides a programming library and an application programming interface (API) compliant to the <b>interface</b> <b>specification.</b>|$|R
40|$|<b>Interface</b> <b>specifications</b> should express program {{properties}} in a formal, declarative, and implementation-independent way. To achieve implementation-independency, <b>interface</b> <b>specifications</b> {{have to support}} data abstraction. Program verification should enable to prove implementations correct w. r. t. such <b>interface</b> <b>specifications.</b> The presented work bridges the gap between existing specification and verification techniques for object-oriented programs. The integration is done within a formal framework for <b>interface</b> <b>specifications</b> and programming language semantics. <b>Interface</b> <b>specification</b> techniques are enhanced to support the specification of data structure sharing and destructive updating of shared variables. These extensions are necessary for the specification of real life software libraries. Moreover this generalization is needed for intermediate steps in correctness proofs. For verification, Hoare logic is extended to capture recursive classes and subtyping. Based on this extended logic, techniques are presented for proving typing properties, class and method invariants. The ne...|$|R
40|$|Web {{services}} {{provide a}} promising framework for developing interoperable software components that {{interact with each}} other across organizational boundaries. For this framework to be successful, the client and the server for a service have to {{interact with each other}} based on the published service <b>interface</b> <b>specification.</b> If either the client or the server deviate from the <b>interface</b> <b>specification,</b> the client-server interaction will lead to errors. We present a framework for checking interface conformance for web services. Given an <b>interface</b> <b>specification,</b> we automatically generate web service server stubs (for client verification) and drivers (for server verification) and then use these stubs and drivers to check the conformance of the client and server to the <b>interface</b> <b>specification.</b> We implemented this framework by using interface grammars as the <b>interface</b> <b>specification</b> language. We developed an interface compiler that automatically generates a stub or a driver from a given interface grammar. We conducted a case study by applying these techniques to the Amazon E-Commerce Service...|$|R
50|$|The CAPE-OPEN project {{ended in}} 2001 and {{delivered}} <b>interface</b> <b>specifications</b> for unit operations (in steady-state) and thermodynamic components. A non-profit organisation, CO-LaN, was subsequently established {{to maintain and}} support the existing specifications and to continue the development of additional CAPE-OPEN <b>interface</b> <b>specifications.</b>|$|R
40|$|In {{this paper}} {{we present a}} method for the {{compositional}} construction of the minimal transition system that represents the semantics of a given distributed system. Our aim is to control the state explosion caused by the interleavings of actions of communicating parallel components by reduction steps that exploit global communication constraints given in terms of <b>interface</b> <b>specifications.</b> The effect of the method, which is developed for bisimulation semantics here, depends {{on the structure of}} the distributed system under consideration, and the accuracy of the <b>interface</b> <b>specifications.</b> However, its correctness does not: every "successful" construction is guaranteed to yield the desired minimal transition system, independent of the correctness of the <b>interface</b> <b>specifications</b> provided by the program designer. Keywords bisimulation, distributed system, <b>interface</b> <b>specification,</b> minimization, reduction operator, specification preorder, state explosion problem, transition system, verification [...] ...|$|R
2500|$|Requires Java Modeling Language (JML) {{behavioral}} <b>interface</b> <b>specification</b> language.|$|R
5000|$|... {{design of}} {{functional}} and <b>interface</b> <b>specifications</b> for software components ...|$|R
5000|$|The XFI {{electrical}} <b>interface</b> <b>specification</b> was a 10 gigabit {{per second}} chip-to-chip electrical <b>interface</b> <b>specification</b> defined {{as part of}} the XFP multi-source agreement. It was also developed by the XFP MSA group. XFI is sometimes pronounced as [...] "X" [...] "F" [...] "I" [...] and other times as [...] "ziffie".|$|R
50|$|Its {{standardized}} part {{is defined as}} a software <b>interface</b> <b>specification.</b>|$|R
40|$|We {{present a}} method for the {{compositional}} construction of the minimal transition system that represents the semantics of a given distributed system. Our aim is to control the state explosion caused by the interleavings of actions of communicating parallel components by reduction steps that exploit global communication constraints given in terms of <b>interface</b> <b>specifications.</b> The effect of the method, which is developed for bisimulation semantics here, depends {{on the structure of}} the distributed system under consideration, and the accuracy of the <b>interface</b> <b>specifications.</b> However, its correctness is independent of the correctness of the <b>interface</b> <b>specifications</b> provided by the program designer...|$|R
5000|$|Image and Scanner <b>Interface</b> <b>Specification</b> (ISIS) - Open {{industry}} standard interface.|$|R
40|$|An <b>interface</b> <b>specification</b> {{language}} such as JML {{provides a}} means to document precisely the behavior of program modules such as Java classes, and it is being adopted by industry. However, few practical tools exist for programmers to assure the correctness of their <b>interface</b> <b>specifications.</b> Nonetheless, the correctness of an <b>interface</b> <b>specification</b> {{is a prerequisite for}} the use of the specification, both as a precise API documentation and as a foundation for formal verification of and reasoning about the implementation. We propose automated random testing as a practical tool to assure the correctness of <b>interface</b> <b>specifications.</b> The key idea of our approach is to fully automate dynamic, random testing to detect as many inconsistencies as possible between the specification and its implementation. For this, we use a runtime assertion checker as a test oracle, and the goal of our testing is to generate as many non-duplicate test cases as possible that incur a certain type of runtime assertion violations. Our approach has been implemented for Java/JML in a prototype tool called JET, and a preliminary experiment shows that it has a potential to be a valuable testing tool for Java/JML. Our approach can be adapted for other <b>interface</b> <b>specification</b> languages...|$|R
2500|$|RenderMan <b>Interface</b> <b>Specification</b> (RISpec) – Pixar's open API for {{photorealistic}} off-line rendering ...|$|R
50|$|The <b>interface</b> <b>{{specific}}ation</b> is {{not limited}} to specific technology platforms or implementations.|$|R
5000|$|SISO-STD-004.1-2004: Dynamic Link Compatible HLA API Standard for the HLA <b>Interface</b> <b>Specification</b> ...|$|R
5000|$|Network Driver <b>Interface</b> <b>Specification</b> (NDIS) - a {{standard}} network card driver API ...|$|R
5000|$|RenderMan <b>Interface</b> <b>Specification</b> (RISpec) - Pixar's open API for {{photorealistic}} off-line rendering ...|$|R
40|$|One of {{the main}} tasks of modern {{application}} integration projects is to allow one business unit (requestor) to use services offered by another business unit (provider). When software systems of business partners are composed, an import interface of the requestor system is connected to an export interface of the provider system. Here, the import <b>interface</b> <b>specification</b> containing the requestor’s requirements for a needed service has to be matched against the export <b>interface</b> <b>specification</b> describ-ing the provided service. Usually, software engineers carry out matching of <b>interface</b> <b>specifications</b> manually; it makes the design and implementation of composite soft-ware expensive and error-prone. Therefore, the demand for instruments that would automate the matching procedure is high. In this thesis, we develop a new technique facilitating integration of software systems. To this end, we solve a {{problem of how to}} construct visual and formal <b>interface</b> <b>specifications</b> comprising semantic descriptions. Our method also include...|$|R
5000|$|Dynamic Link Compatible HLA API Standard for the HLA <b>Interface</b> <b>Specification</b> Version 1.3 ...|$|R
5000|$|Network Driver <b>Interface</b> <b>Specification</b> (NDIS) - {{developed}} by Microsoft and 3Com, free wrappers ...|$|R
5000|$|Kalra D, 2010, ISO/EN 13606 Electronic Health Record Communication Part 5: <b>Interface</b> <b>Specification</b> ...|$|R
40|$|Abstract. This paper {{introduces}} the ISpec approach to <b>interface</b> <b>specification.</b> ISpec supports {{the development of}} <b>interface</b> <b>specifications</b> at various levels of formality and detail in a way compatible with objectoriented modelling techniques (UML). The incremental nature of the levels and the underlying formal framework of ISpec allow informal <b>interface</b> <b>specifications</b> to be made formal in steps. The body of the paper consists of {{a discussion of the}} main characteristics of ISpec, which reflect the important decisions taken in the design of ISpec. The idea of component-based specifications and specification plug-ins for constructing heterogeneous specifications is discussed and a small example showing the various levels of specification supported by ISpec is presented...|$|R
5000|$|Dynamic Link Compatible HLA API Standard for the HLA <b>Interface</b> <b>Specification</b> (IEEE 1516.1 Version) ...|$|R
5000|$|IEEE 1516.1-2000 - Standard for Modeling and Simulation High Level Architecture - Federate <b>Interface</b> <b>Specification</b> ...|$|R
5000|$|CAO (Controller Access Object), {{standard}} program <b>interface</b> <b>specifications</b> : Specifications {{to facilitate}} generalization of application software ...|$|R
40|$|<b>Interface</b> <b>specifications</b> play an {{important}} role in component-based software development. An inter-face theory is a formal framework supporting composition, refinement and compatibility of <b>interface</b> <b>specifications.</b> We present different interface theories which use modal I/O-transition systems as their underlying domain for interface specifications: synchronous interface theories, which employ a synchronous communication schema, as well as a novel interface theory for asynchronous commu-nication where components communicate via FIFO-buffers. ...|$|R
40|$|In this thesis, {{we propose}} a black-box testing method that derives {{important}} test cases by including usage statistics, and enables a product manager {{to make a}} release decision with the rationale, 2 ̆ 2 the important use cases specified in the usage statistics are tested and have no error. 2 ̆ 2 First, we propose a method to specify components with Trace Function Method (TFM) module <b>interface</b> <b>specifications.</b> Then, we propose a way to associate module usage statistics with the TFM module <b>interface</b> <b>specification.</b> Finally, we propose a method to generate a prioritized list of black-box test cases for component testing and integration testing from the TFM module <b>interface</b> <b>specification</b> with usage statistics...|$|R
5000|$|The Network Driver <b>Interface</b> <b>Specification</b> (NDIS) is an {{application}} programming interface (API) for network interface cards (NICs).|$|R
40|$|Abstract. This paper {{describes}} an <b>interface</b> <b>specification</b> language {{designed in the}} LIME project (LIME ISL) and the supporting runtime monitoring tool. The <b>interface</b> <b>specification</b> language is tailored for the Java programming language and supports two kinds of specifications: (i) call specifications that specify requirements for the allowed call sequences to a Java object instance and (ii) return specifications that specify the allowed behaviors of the Java object instance. Both the call and return specifications can be expressed with Java annotations in several different ways: as past time LTL formulas, as (safety) future LTL formulas, as regular expressions, and as nondeterministic finite automata. We also describe the supporting LIME interface monitoring tool which is an open source implementation of runtime monitoring for the <b>interface</b> <b>specifications</b> implemented using AspectJ. ...|$|R
5000|$|An ICD is the {{umbrella}} document over the system interfaces; {{examples of what}} these <b>interface</b> <b>specifications</b> should describe include: ...|$|R
5000|$|DOCSIS (Data Over Cable Service <b>Interface</b> <b>Specification)</b> - {{standard}} for data over cable and details mostly the RF band ...|$|R
