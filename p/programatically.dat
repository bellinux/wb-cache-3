47|0|Public
2500|$|... the layered {{frameworks}} aid {{rapid development}} of applications by providing existing code for common tasks. Apple provides its own software development tools, most prominently an {{integrated development environment}} called Xcode. Xcode provides interfaces to compilers that support several programming languages including C, C++, Objective-C, and Swift. For the Apple–Intel transition, it was modified so that developers could build their applications as a universal binary, which provides compatibility with both the Intel-based and PowerPC-based Macintosh lines. First and third-party applications can be controlled <b>programatically</b> using the AppleScript framework, retained from the classic Mac OS, or using the newer Automator application that offers pre-written tasks {{that do not require}} programming knowledge.|$|E
5000|$|A {{collection}} of web components to build web pages <b>programatically</b> ...|$|E
50|$|As of 9 December 2008 Clipsal {{opened its}} C-Bus {{protocols}} {{to anyone who}} wants to interact with it <b>programatically.</b>|$|E
50|$|Web clients allow {{users to}} access the data <b>programatically</b> with minimal effort, and are {{available}} for perl, python, ruby, javascript, Java, and R. Data can also be queried via a native Android app.|$|E
50|$|In addition, {{there is}} a {{scripting}} interface named Connect that enables STK to act within a client/server environment (via TCP/IP) and is language independent. Users on Windows {{have the option of}} using STK <b>programatically</b> via OLE automation.|$|E
50|$|In 2016, Adobe, Google, Apple and Microsoft {{announced}} a new update to the OpenType specification, allowing variable fonts. Similar to the multiple master concept, this will allow custom styles to be generated from a single font file <b>programatically.</b>|$|E
5000|$|... novaPDF can be {{accessed}} <b>programatically</b> via an ActiveX/COM interface called novaPDF SDK. This means {{that it can be}} integrated with any C#, Delphi, Visual Basic, [...]NET, VBA, (JScript, VBScript) application and thus adding PDF generating capability to those applications.|$|E
50|$|Oloneo PhotoEngine is {{a popular}} digital image editing {{software}} application developed by Paris-based Oloneo SAS. The application produces high-dynamic-range images and tone mapped images by <b>programatically</b> combining standard-dynamic range images of different exposures. PhotoEngine supports 96-bit per pixel HDR image files in RAW and TIFF formats.|$|E
5000|$|CEEMAC was {{designed}} to be a visual composition language in which the programmer designed dynamic [...] "scores" [...] by <b>programatically</b> controlling color, shape, sound and movement. Additionally, a programmer could then [...] "perform" [...] their score through use of the Apple II keyboard or paddle input devices to introduce additional variation.|$|E
50|$|At runtime, {{all of the}} config vars {{are exposed}} as {{environment}} variables {{so they can be}} easily extracted <b>programatically.</b> A Ruby application deployed with the above config var can access it by calling ENV"ENCRYPTION_KEY". All dynos in an application will have access to exactly the same set of config vars at run-time.|$|E
50|$|A Basic Data Partition can be {{formatted}} {{with any}} filesystem format, although most commonly BDPs are formatted with the NTFS, exFAT, or FAT32 filesystem formats. To <b>programatically</b> determine which filesystem format a BDP contains, Microsoft specifies {{that one should}} inspect the BIOS Parameter Block that is contained in the BDP's Volume Boot Record.|$|E
5000|$|Performance loss: For each HTTP request, {{there are}} {{additional}} file-system accesses for parent directories when using [...]htaccess, {{to check for}} possibly existing [...]htaccess files in those parent directories which are allowed to hold [...]htaccess files. It is possible to <b>programatically</b> migrate directives from [...]htaccess to [...] if this performance loss is a concern.|$|E
50|$|Since higher-order type {{operators}} are uncommon in programming languages, in most programming practice, kinds {{are used to}} distinguish between data types {{and the types of}} constructors which are used to implement parametric polymorphism. Kinds appear, either explicitly or implicitly, in languages whose type systems account for parametric polymorphism in a <b>programatically</b> accessible way, such as Haskell and Scala.|$|E
50|$|Some Windows {{programs}} hook {{calls to}} the IDT. This involves writing a kernel mode driver that intercepts {{calls to the}} IDT and adds in its own processing. This has never been officially supported by Microsoft, but was not <b>programatically</b> prevented on its operating systems until 64-bit versions of Windows, where a driver that attempts to use a kernel mode hook will cause the machine to bug check.|$|E
5000|$|Space (though {{trailing}} {{spaces in}} either the base name or the extension {{are considered to be}} padding and {{not a part of the}} filename, also filenames with spaces in them must be enclosed in quotes to be used on a DOS command line, and if the DOS command is built <b>programatically,</b> the filename must be enclosed in quadruple quotes when viewed as a variable within the program building the DOS command.) ...|$|E
5000|$|... is {{obtained}} from the UniProt Swiss-Prot database but it is complemented by data originating from high-throughput studies {{with an emphasis on}} proteomics. neXtProt offers also an advanced search capacity based on the SPARQL technology as well as an API that allows to <b>programatically</b> extract the data stored in the resource. It is developed by the CALIPHO group directed by Amos Bairoch and Lydie Lane of the Swiss Institute of Bioinformatics (SIB).|$|E
5000|$|Lawrence wrote The Making of a Fly in 1992, which {{explains}} how the body plans of flies and higher animals, like humans, are constructed. The book received [...] "further" [...] recognition in April 2011 when fellow biologist Michael Eisen discovered two booksellers were <b>programatically</b> setting increasingly {{higher prices for}} copies of the book on Amazon.com's used book market. The sellers eventually priced copies over $23 million before the feedback loop was broken.|$|E
5000|$|Richard Taruskin {{points out}} that the {{sections}} of Les préludes [...] "correspond to the movements of a conventional symphony if not in the most conventional order". He adds that [...] "the music, whilst heavily indebted in concept to Berlioz, self-consciously advertises its descent from Beethoven even as it flaunts its freedom from the formal constraints to which Beethoven had submitted ... The standard [...] "there and back" [...] construction that had controlled musical discourse since at least the time of the old dance suite continues to impress its general shape on the sequence of <b>programatically</b> derived events." ...|$|E
50|$|The Harris School of Business {{first became}} an {{accredited}} education facility in 1978. The Danbury, CT, Upper Darby, PA and Cherry Hill, Linwood, and Hamilton, NJ campuses were formerly accredited by the Accrediting Council for Independent Colleges and Schools. However, accreditation privileges of the ACICS were revoked in December 2016. The Wilmington, DE campus is accredited by the Accrediting Council for Continuing Education & Training. Both the Dover, DE and Voorhees, NJ campuses are accredited through the Accrediting Commission of Career Schools and Colleges (ACCSC). The Surgical Technology program offered at these two campuses is <b>programatically</b> accredited by The Accrediting Bureau of Health Education Schools (ABHES).|$|E
50|$|The {{architecture}} of macOS incorporates a layered design:the layered frameworks aid rapid development of applications by providing existing code for common tasks. Apple provides its own software development tools, most prominently an {{integrated development environment}} called Xcode. Xcode provides interfaces to compilers that support several programming languages including C, C++, Objective-C, and Swift. For the Apple-Intel transition, it was modified so that developers could build their applications as a universal binary, which provides compatibility with both the Intel-based and PowerPC-based Macintosh lines. First and third-party applications can be controlled <b>programatically</b> using the AppleScript framework, retained from the classic Mac OS, or using the newer Automator application that offers pre-written tasks {{that do not require}} programming knowledge.|$|E
50|$|Truex {{has worked}} with Microsoft, Visa, Apple, Disney, Coca-Cola, Kia, Kraft, Macy's, Nestle, Procter & Gamble and Discover on online advertisements. The company {{delivers}} ad units that are self-selected by the viewer in exchange for access to online content such as videos, music, games, or more articles. The ads take over the browser of a user's computer for about 30 seconds, and require user participation for completion. The results are measured in engagement metrics, such as submitted survey forms, video views, likes, and shares. TrueX is also a source of ad inventory for text and visual ads. The company has deals in place to provide ad space with publishers such as Tribune Co., Fox, and AT&T, distributing them <b>programatically.</b> The engagement has reduced digital ad fraud.|$|E
5000|$|Cegłowski is {{particularly}} {{known for his}} conference talks on the impacts of technology, and for posting on Twitter, which he uses to joke about the failings and inflated claims of Silicon Valley companies. He has written and spoken extensively {{on the problems of}} advertising-funded services with dubious business models. He has described <b>programatically</b> generated advertising and data mining as a business model that encourages the growth of surveillance. In particular, Cegłowski has compared large stocks of data on Internet users to the archives of Communist secret police services in his native Eastern Europe, as a threat to user privacy that may increase as archives remain in existence. He has also argued in favour of simplified, more minimal web design, arguing that immersive web design can be bloated and unsuitable for consumers with a poor internet connection. Cory Doctorow has described him as a [...] "characteristically provocative" [...] writer of [...] "barn-burning speeches about the Internet's problems".|$|E
40|$|A new Python API, {{integrated}} {{within the}} NLTK suite, offers {{access to the}} FrameNet 1. 7 lexical database. The lexicon (structured in terms of frames) as well as annotated sentences can be processed <b>programatically,</b> or browsed with human-readable displays via the interactive Python prompt. Comment: EMNLP 2017 Dem...|$|E
40|$|Perform {{the setup}} and prepare WAM robots {{to use the}} the motion {{planning}} and obstacle avoid- ance facilities present at the MoveIt! framework. In particular, determine the configurations and API function calls to set {{the target of the}} robot arm with joint state and add collision objects <b>programatically,</b> without using the graphical interface. Supporting page with videos: [URL]...|$|E
40|$|Abstract. We {{present an}} {{interactive}} tool for visualization of medical imaging pipelines that are built with Nipype, a freely available tool for building pipelines <b>programatically.</b> Our tool enables researchers {{to interact with}} their pipelines, visualize the pipeline structure, and view their intermediate and final results. We also provide a video and live demonstration of our tool for a simple brain image registration pipeline. ...|$|E
40|$|Powerful, safe macro systems allow {{programs}} to be <b>programatically</b> {{constructed by the}} user at compile-time. Such systems have traditionally been largely confined to LISP-like languages and their successors. In this paper we describe and compare two modern, dynamically typed languages Converge and Metalua, which both have macro-like systems. We show how, in different ways, they build upon traditional macro systems to explore new ways of constructing programs. ...|$|E
40|$|This seminar {{will cover}} the basics of realtime sound {{synthesis}} and introduce participants to SuperCollider. Attendees will be acquainted with basic sound generators and processors (oscillators, noise generators, filters, delays) {{as well as with}} synthesis techniques such as additive and substractive synthesis and amplitude or frequency modulation. This knowledge will then be used to build synths able to be controlled <b>programatically,</b> by means of graphical user interfaces or using OpenSoundControl...|$|E
40|$|An {{adaptive}} control library {{was written in}} Java that allowed a user to <b>programatically</b> specify the dynamics of a system and performed {{adaptive control}}. Also, visualization software was written to help monitor and modify the controller in real time. The software was tested on several simulated mechanical systems and on a DC motor. by John Rebula. Thesis (S. B.) [...] Massachusetts Institute of Technology, Dept. of Mechanical Engineering, 2006. Includes bibliographical references (p. 43) ...|$|E
40|$|Phenotype ontologies are queryable classifications of phenotypes. They {{provide a}} widely-used means for annotating phenotypes {{in a form}} that is human-readable, <b>programatically</b> {{accessible}} and {{that can be used to}} group annotations in biologically meaningful ways. Accurate manual annotation requires clear textual definitions for terms. Accurate grouping and fruitful programatic usage require high-quality formal definitions that can be used to automate classification. The Drosophila phenotype ontology (DPO) has been used to annotate over 159, 000 phenotypes in FlyBase to date, but until recently lacked textual or formal definitions. publishersversionPeer reviewe...|$|E
40|$|The role of {{regulatory}} requirements {{and their impact}} on the design and implementation of high elevation coal mine reclamation programs was examined in nine mountainous western North American jurisdictions. This 'ecological audit ' {{of regulatory}} requirements revealed that several jurisdictions are similar <b>programatically</b> in objectives but dissimilar substantively in regulatory provisions such as topographic modifications, revegetation, performance standards and enforcement. Information acquisition and dissemination also varied between jurisdictions. The current command-penalty model of environmental regulation results in adversarial interactions between government and industry in many of the jurisdictions and should be replaced by a formal negotiated system of regulation based on continuing research and adaptive management...|$|E
40|$|People {{use their}} {{awareness}} of others ' temporal patterns to plan work activities and communication. This paper presents algorithms for <b>programatically</b> detecting and modeling temporal patterns from {{a record of}} online presence data. We describe analytic and end-user visualizations of rhythmic patterns and the tradeoffs between them. We conducted a design study that explored {{the accuracy of the}} derived rhythm models compared to user perceptions, user preference among the visualization alternatives, and users' privacy preferences. We also present a prototype application based on the rhythm model that detects when a person is “away ” for an extended period and predicts their return. We discuss the implications of this technology on the design of computer-mediated communication...|$|E
40|$|Conference on Improving Us e o f M e d i c i n e s {{highlighted}} {{the urgent need}} to develop strategies to improve adherence to antiretroviral treatment (ART) (www. icium. org). Accepted wisdom {{is that if the}} ART adherence rate is less than 90 – 95 %, treatment can fail, and the virus may become resistant. 1, 2 A review of adherence studies for chronic illnesses found that achieving adherence rates above 80 % is difficult, even in resource-rich countries. 3 Therefore, the ability to accurately monitor adherence rates for ART and immediately address problems is crucial. Although many countries are scaling-up ART programmes, no one has developed any practical approaches to monitor treatment adherence <b>programatically.</b> The International Network for th...|$|E
40|$|There are {{thousands}} of network protocols in active use on the internet. System administrators often need to extract information from particular fields in such protocols without having sufficient information or time to <b>programatically</b> parse the packets. We propose an active learning framework to perform this extraction in an unknown protocol, in which the user presents the system with {{a small number of}} labeled instances. Our system then automatically generates an abundance of features and negative examples; we then use a boosting approach for feature selection and classifier combination. The system then displays its results for the user to correct and/or add new examples and iterate. In our preliminary experiments on DNS queries and responses, we achieve less than 0. 1 % generalization error using only a handful of labeled examples and thus a minimum of user effort. This translates to perfect retrieval from 86 % of unlabeled packets...|$|E
40|$|When {{reengineering}} legacy systems, it {{is crucial}} to assess if the legacy behavior has been preserved or how it changed due to the reengineering effort. Ideally if a legacy system is covered by tests, running the tests on the new version can identify potential differences or discrepancies. However, writing tests for an unknown and large system is difficult {{due to the lack of}} internal knowledge. It is especially difficult to bring the system to an appropriate state. Our solution is based on the acknowledgment that one of the few trustable piece of information available when approaching a legacy system is the running system itself. Our approach reifies the execution traces and uses logic programming to express tests on them. Thereby it eliminates the need to <b>programatically</b> bring the system in a particular state, and handles the test-writer a high-level abstraction mechanism to query the trace. The resulting system, called TESTLOG, was used on several real-world case studies to validate our claims. © 2006 IEEE. SCOPUS: cp. pinfo:eu-repo/semantics/publishe...|$|E
40|$|Software-defined {{networking}} (SDN) allows {{operators to}} control {{the behavior of a}} network by <b>programatically</b> managing the forwarding rules installed on switches. However, as is common in distributed systems, {{it can be difficult to}} ensure that certain consistency properties are preserved during periods of reconfiguration. The widely-accepted notion of PER-PACKET CONSISTENCY requires every packet to be forwarded using the new configuration or the old configuration, but not a mixture of the two. If switches can be updated in some (partial) order which guarantees that per-packet consistency is preserved, we call this order a CONSISTENT ORDER UPDATE. In particular, switches that are incomparable in this order can be updated in parallel. We call a consistent order update OPTIMAL if it allows maximal parallelism. This paper presents a polynomial-time algorithm for finding an optimal consistent order update. This contrasts with other recent results in the literature, which show that for other classes of properties (e. g., loop-freedom and waypoint enforcement), the optimal update problem is NP-complete...|$|E
40|$|We present {{extensive}} experiments {{training and}} testing hidden units in deep networks that emit only a predefined, static, number of discretized values. These units provide benefits in real-world deployment in systems in which memory and/or computation may be limited. Additionally, they are particularly {{well suited for}} use in large recurrent network models that require the maintenance of large amounts of internal state in memory. Surprisingly, we find that despite {{reducing the number of}} values that can be represented in the output activations from $ 2 ^{ 32 }- 2 ^{ 64 }$ to between 64 and 256, there is little to no degradation in network performance across a variety of different settings. We investigate simple classification and regression tasks, as well as memorization and compression problems. We compare the results with more standard activations, such as tanh and relu. Unlike previous discretization studies which often concentrate only on binary units, we examine the effects of varying the number of allowed activation levels. Compared to existing approaches for discretization, the approach presented here is both conceptually and <b>programatically</b> simple, has no stochastic component, and allows the training, testing, and usage phases to be treated in exactly the same manner...|$|E
