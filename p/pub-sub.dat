64|0|Public
5000|$|... #Subtitle level 2: Coupling and typical <b>pub-sub</b> {{implementations}} ...|$|E
50|$|While request-response is {{the most}} common {{client-server}} design, there are others, such as the publish-subscribe pattern. In the publish-subscribe pattern, clients register with a <b>pub-sub</b> server, subscribing to specified types of messages; this initial registration may be done by request-response. Thereafter, the <b>pub-sub</b> server forwards matching messages to the clients without any further requests: the server pushes messages to the client, rather than the client pulling messages from the server as in request-response.|$|E
50|$|A similar {{effort is}} with the {{actively}} evolving OpenMAMA project, which aims to provide a common API, particularly to C clients. However, at the moment (August 2012) it is primarily appropriate for distributing market-oriented data (e.g. stock quotes) over <b>pub-sub</b> middleware.|$|E
5000|$|SMQ is a {{real time}} <b>pub-sub</b> {{protocol}} that bridges WoT with IoT. The protocol {{makes it easy to}} design web based user interfaces for device management and supervision. The Mako Server, which can be compiled for anything from embedded devices to enterprise Linux servers, includes a ready to use SMQ broker.|$|E
5000|$|Typically, the {{observer}} pattern is implemented with the [...] "subject" [...] (which is being [...] "observed") {{being part of}} the object whose state change is being observed, to be communicated to {{the observer}}s upon occurrence. This type of implementation is considered [...] "tightly coupled", forcing both the observers and the subject to be aware of each other and have access to their internal parts, creating possible issues of scalability, speed, message recovery and maintenance (also called event or notification loss), the lack of flexibility in conditional dispersion and possible hindrance to desired security measures. In some (non-polling) implementations of the publish-subscribe pattern (also called the <b>pub-sub</b> pattern), this is solved by creating a dedicated [...] "message queue" [...] server and at times an extra [...] "message handler" [...] object, as added stages between the observer and the observed object who's state is being checked, thus [...] "decoupling" [...] the software components. In these cases, the message queue server is accessed by the observers with the observer pattern, [...] "subscribing to certain messages" [...] knowing only about the expected message (or not, in some cases), but knowing nothing about the message sender itself, and the sender may know nothing about the receivers. Other implementations of the publish-subscribe pattern, which achieve a similar effect of notification and communication to interested parties, do not use the observer pattern altogether.|$|E
40|$|Abstract. While publish-subscribe {{systems have}} good {{engineering}} properties, they {{are difficult to}} reason about and to test. Model checking such systems is an attractive alternative. However, in practice coming up with an appropriate state model for a <b>pub-sub</b> system can be a difficult and error-prone task. In this paper we address this problem by describing a generic <b>pub-sub</b> model checking framework. The key feature of this framework is a reusable, parameterized state machine model that captures <b>pub-sub</b> run-time event management and dispatch policy. Generation of models for specific <b>pub-sub</b> systems is then handled by a translation tool that accepts as input a set of <b>pub-sub</b> component descriptions together {{with a set of}} <b>pub-sub</b> properties, and maps them into the framework where they can be checked using off-the-shelf model checking tools. ...|$|E
40|$|Abstract. Content-based publish-subscribe (<b>pub-sub)</b> {{systems are}} an {{emerging}} paradigm {{for building a}} large number of distributed systems. Access control in a <b>pub-sub</b> system refers to secure distribution of events to clients subscribing to those events without revealing its secret attributes to the unauthorized subscribers. To provide confidentiality guarantees the secret attributes in an event is encrypted so that only authorized subscribers can read them. However, in a content-based <b>pub-sub</b> system, every event can potentially have a different set of authorized subscribers. In the worst case, for NS subscribers, there are 2 NS subgroups, and each event can potentially go to a different subgroup. Hence, efficient key management is a big challenge for implementing access control in <b>pub-sub</b> systems. In this paper, we describe efficient and scalable key management algorithms for securely implementing access control rules in <b>pub-sub</b> systems. We ensure that the key management cost is linear in the number of subscriptions and completely independent of the number of subscribers NS. We present a concrete implementation of our proposal on an operational <b>pub-sub</b> system. An experimental evaluation of our prototype shows that our proposal meets the security requirements while maintaining the scalability and performance of the <b>pub-sub</b> system...|$|E
40|$|The recent {{popularity}} of publish-subscribe (<b>pub-sub)</b> system architectures {{has led to}} a desire for a refined architecture that supports the composition of <b>pub-sub</b> systems. One proposed solution links such systems using a special bridge component that acts as a mediator, passing events between the systems. The bridge appears to be an ordinary <b>pub-sub</b> component to each system, effectively serving as a surrogate for the other system. Although attractive as a lightweight <b>pub-sub</b> combinator, the notion of a <b>pub-sub</b> bridge raises a number of questions, such as whether its use introduces new sources of deadlock or inconsistency. In this paper, we show that designing such a bridge is far from trivial, and indeed requires special treatment to achieve desired properties. To make these issues concrete, we describe our results in analyzing the feasibility of a bridge for the HLA, a standardized <b>pub-sub</b> framework designed for distributed simulation applications. We identify a small set of core problem classes for <b>pub-sub</b> bridge designs. Additionally, we also classify a set of generic solution paths and show how each applies to the problem classes. Although based on the HLA, we believe that these problems and solutions are applicable to many <b>pub-sub</b> systems as well as to other architectures for loosely coupled distributed systems. Keywords Software architecture, publish-subscribe systems, High-Level Architecture, bridge component, component integration, distributed system...|$|E
40|$|Publish-subscribe is a {{communication}} paradigm that supports dynamic, many-to-many communications in a distributed environment. Content-based <b>pub-sub</b> systems are often implemented on a peer-to-peer infrastructure that enables information dissemination from information producers (publishers) to consumers (subscribers) through a subscription mechanism. In a wide-area <b>pub-sub</b> network, the <b>pub-sub</b> service must handle information dissemination across distinct authoritative domains, heterogeneous platforms and a large, dynamic population of publishers and subscribers. Such an environment raises serious security concerns. In this paper, we investigate the security i ssues and requirements {{that arise in}} an internet-scale content-based <b>pub-sub</b> system. We distinguish among those requirements {{that can be achieved}} with current technology and those that require innovative solutions. ...|$|E
40|$|Abstract. Content-based publish-subscribe (<b>pub-sub)</b> {{systems are}} an {{emerging}} paradigm for building large-scale infor-mation delivery systems. Secure event dissemination in a <b>pub-sub</b> network refers to secure distribution of events to clients subscribing to those events without revealing the secret attributes {{in the event}} to the unauthorized subscribers and the routing nodes in a <b>pub-sub</b> network. A common solution to provide confidentiality guarantees for the secret attributes in an event is to encrypt so that only authorized subscribers can read them. There are two important challenges in building a secure and scalable content-based event dissemination infrastructure: (i) How to handle complex and flexible subscription models while preserving the efficiency and scalability of key management algorithms? (ii) How to securely route events on a <b>pub-sub</b> network while preserving the confidentiality of its attributes? In this paper, we describe the design and imple-mentation of PSGuard, for secure event dissemination in <b>pub-sub</b> networks. PSGuard provides a careful combination of cryptographic and systems solutions to build an efficient and secure <b>pub-sub</b> networks. Concretely, we exploit hierarchical key derivation algorithms to encode publication-subscription matching semantics for scalable key management and develop a probabilistic multi-path event routing algorithm to minimize {{the amount of information}} that can be inferred by the routing nodes. An experimental evaluation of our prototype system shows that PSGuard meets the security requirements while maintaining the performance and scalability of a <b>pub-sub</b> network. ...|$|E
40|$|A publish-subscribe overlay {{service is}} a wide-area {{communication}} infrastructure that enables information dissemination across geographically scattered and potentially unlimited number of publishers and subscribers. A wide-area publishsubscribe (<b>pub-sub)</b> system is often implemented {{as a collection of}} spatially disparate nodes communicating on top of a peer to peer overlay network. Such a model presents many inherent benefits such as scalability and performance, as well as potential challenges such as: (i) confidentiality & integrity, (ii) authentication, and (iii) denial-of-service (DoS) attacks. In this paper we present EventGuard for securing <b>pub-sub</b> overlay services. EventGuard comprises of two components. The first component is a suite of security guards that can be seamlessly plugged-into a content-based <b>pub-sub</b> system. The second component is a resilient <b>pub-sub</b> network design that is capable of scalable routing, handling message dropping-based DoS attacks and node failures. EventGuard mechanisms aim at providing security guarantees while maintaining the system’s overall simplicity, scalability and performance metrics. We present an implementation which shows that EventGuard is easily stackable on any content-based <b>pub-sub</b> core. Finally, our experimental results show that EventGuard can secure a <b>pub-sub</b> system with minimal performance penalty...|$|E
40|$|Traditional {{authorization}} mechanisms based on requestresponse paradigm lead to point-to-point (PTP) communication between applications and the authorization server. As distributed applications increase {{in size and}} complexity, the PTP-based authorization architecture is becoming fragile and inefficient. This paper introduces {{the use of a}} publish-subscribe (<b>pub-sub)</b> paradigm for delivering authorization requests and responses between the application and authorization server. We study the design both qualitatively and quantitatively using an existing <b>pub-sub</b> system. Our evaluation results show that the use of <b>pub-sub</b> can improve the availability of authorization systems...|$|E
40|$|While publish-subscribe {{systems have}} good {{engineering}} properties, they are di#cult to reason about and to test. Model checking such systems {{is an attractive}} alternative. However, in practice coming up with an appropriate state model for a <b>pub-sub</b> system can be a difficult and error-prone task. In this paper we address this problem by describing a generic <b>pub-sub</b> model checking framework. The key feature of this framework is a reusable, parameterized state machine model that captures <b>pub-sub</b> run-time event management and dispatch policy. Generation o...|$|E
40|$|The {{content-based}} publish-subscribe (<b>pub-sub)</b> {{paradigm for}} system design {{is becoming increasingly}} popular, offering unique benefits for many data-intensive applications. Coupled with peer-to-peer technology, it {{can serve as a}} central building block for developing data-dissemination applications deployed over a large-scale network infrastructure. A key open problem in creating large-scale content-based <b>pub-sub</b> infrastructures relates to efficiently and accurately matching subscriptions with substring predicates to incoming events. This work addresses this issue...|$|E
3000|$|It {{is clear}} from Table 6 that Radiator {{does not have the}} {{limitations}} of traditional CSCW systems on how context data is aggregated since the aggregation is performed by functions defined by the programmer. Aditionally, the aggregability function (equivalent to the matching function in <b>Pub-Sub</b> systems) is also defined by the programmer, allowing Radiator to have much more flexible rules and {{to take advantage of the}} current context of its users. Unlike <b>Pub-Sub</b> systems, Radiator also introduces the notion of delayed propagation, improving the applications’ scalability. Finally, unlike generic distributed systems approaches (<b>Pub-Sub,</b> Multicast trees, DSPS), Radiator is able to extract semantic meaning from the exchanged messages thus does not need to perform costly [...] "reconfiguration" [...] operations every time the context changes.|$|E
40|$|Traditional {{authorization}} mechanisms {{based on the}} request-response model are generally supported by pointto-point communication between applications and authorization servers. As distributed applications increase in size and complexity, an authorization architecture based on point-to-point communication becomes fragile and difficult to manage. This paper presents {{the use of the}} publish-subscribe (<b>pub-sub)</b> model for delivering authorization requests and responses between the applications and the authorization servers. Our analysis suggests that using the <b>pub-sub</b> architecture improves authorization system availability and reduces system administration overhead. We evaluate our design using a prototype implementation, which confirms the improvement in availability. Although the response time is also increased, this impact can be reduced by bypassing the <b>pub-sub</b> channel when returning authorizations or by caching coupled with local inference of authorization decisions based on previously cached authorizations...|$|E
40|$|Due to its {{scale and}} dynamism, the Internet of Things (IoT) {{requires}} efficient and flexible communication support. At the network layer, IPv 6 integrates heterogeneous technologies to provide interoperability, efficient multicast group communication and a flexible address space. At the application layer, publish-subscribe (<b>pub-sub)</b> middleware implements a scalable, dynamic and loosely-coupled data dissemination scheme. The <b>pub-sub</b> paradigm {{is a natural}} use case for IPv 6 multicast but the two mechanisms are poorly integrated in the IoT. We tackle this problem by proposing a framework that enables the integration of <b>pub-sub</b> middleware and multicast to reduce communication overhead. Our solution maps application-layer subscriber groups to network-layer multicast groups. <b>Pub-sub</b> hosts can either implicitly derive the necessary multicast address or request it from a group manager. We evaluate our framework on an IoT network testbed composed of representative hardware and demonstrate improvements in bandwidth and energy consumption that scale {{with the size of}} the network: bandwidth consumption of a publishing sensor decreases by up to 54 % for 10 subscribers and 66 % for 20 subscribers. Moreover, the implementation has a minimal memory footprint, requiring only an additional 1. 3 % dynamic memory and 4. 7 % flash storage. status: accepte...|$|E
40|$|In recent years, publish-subscribe (<b>pub-sub)</b> systems {{based on}} XML {{document}} filtering have received much attention. In a typical pubsub system, subscribed users specify {{their interest in}} profiles expressed in the XPath language, and each new content is matched against the user profiles so that the content is delivered to only the interested subscribers. As the number of subscribed users and their profiles can grow very large, the scalability {{of the system is}} {{critical to the success of}} <b>pub-sub</b> services. In thi...|$|E
40|$|Content-based publish-subscribe (<b>pub-sub)</b> {{networks}} {{enable a}} group of publishers to efficiently provide content to {{a large number of}} subscribers while allowing the subscribers to remain anonymous to the publishers. To be commercially viable, we need mechanisms for collecting payments from subscribers and distributing them fairly to publishers. This paper discusses why existing payment systems are not appropriate for <b>pub-sub</b> networks and proposes a probabilistic payment mechanism through an untrusted intermediary that allows publishers to trade-off efficiency for audit precision. Keywords: digital payments, publish-subscribe systems, anonymity, auditing. 1...|$|E
40|$|Abstract. Design of {{distributed}} architectures for content-based publish-subscribe (<b>pub-sub)</b> service networks {{has been}} a challenging problem. To best support the highly dynamic and diversified content-based <b>pub-sub</b> communication, we propose a new architectural design called MEDYM-Match-Early with DYnamic Multicast. MEDYM follows the End-to-End distributed system design principle. It decouples a <b>pub-sub</b> service into two functionalities: complex, application-specific matching at network edge, and simple, generic multicast routing in the network. This architecture achieves low computation cost in event matching and high network efficiency and flexibility in event routing. For higher scalability, we describe a novel approach to extend MEDYM to a hierarchy structure called H-MEDYM, which effectively balances the trade-off between event delivery efficiency and server states maintenance. We evaluate MEDYM and H-MEDYM using detailed simulations and real-world experiments, and compare them with major existing design approaches. Results show that MEDYM and H-MEDYM achieve high event delivery efficiency and system scalability, and their advantages are most prominent when user subscriptions are highly selective and diversified...|$|E
40|$|XML-enabled publish-subscribe (<b>pub-sub)</b> {{systems have}} emerged as an {{increasingly}} important tool for e-commerce and Internet applications. In a typical <b>pub-sub</b> system, subscribed users specify their interests in a profile expressed in the XPath language. Each new data content is then matched against the user profiles so that the content is delivered only to the interested subscribers. As the number of subscribed users and their profiles can grow very large, the scalability of the service {{is critical to the}} success of <b>pub-sub</b> systems. In this article, we propose a novel scalable filtering system called iFiST that transforms user profiles of a twig pattern expressed in XPath into sequences using the Prüfer’s method. Consequently, instead of breaking a twig pattern into multiple linear paths and matching them separately, iFiST performs holistic matching of twig patterns with each incoming document in a bottom-up fashion. iFiST organizes the sequences into a dynamic hash-based index for efficient filtering, and exploits the commonality among user profiles to enable shared processing during the filtering phase. We demonstrate that the holistic matching approach reduces filtering cost and memory consumption, thereby improving the scalability of iFiST...|$|E
40|$|The {{growing amount}} of XML encoded data {{exchanged}} over the Internet increases {{the importance of}} XML based publish-subscribe (<b>pub-sub)</b> and content based routing systems. The input in such systems typically consists of a stream of XML documents {{and a set of}} user subscriptions expressed as XML queries. The <b>pub-sub</b> system then filters the published documents and passes them to the subscribers. <b>Pub-sub</b> systems are characterized by very high input ratios, therefore the processing time is critical. In this paper we propose a "pure hardware" based solution, which utilizes XPath query blocks on FPGA to solve the filtering problem. By utilizing the high throughput that an FPGA provides for parallel processing, our approach achieves drastically better throughput than the existing software or mixed (hardware/software) architectures. The XPath queries (subscriptions) are translated to regular expressions which are then mapped to FPGA devices. By introducing stacks within the FPGA we are able to express and process a wide range of path queries very efficiently, on a scalable environment. Moreover, the fact that the parser and the filter processing are performed on the same FPGA chip, eliminates expensive communication costs (that a multi-core system would need) thus enabling very fast and efficient pipelining. Our experimental evaluation reveals more than one order of magnitude improvement compared to traditional pub/sub systems. Comment: CIDR 200...|$|E
40|$|Publish-subscribe (<b>pub-sub)</b> {{systems are}} useful for many applications, {{including}} pervasive environments. In the latter context, however, great {{care must be taken}} to preserve the privacy of sensitive information, such as users ’ location and activities. Traditional access control schemes provide at best a partial solution, since they do not capture potential inference regarding sensitive data that a subscriber may make. We propose a logic-based <b>pub-sub</b> system, where inference rules are used to both derive high-level events for use in applications as well as specify potentially harmful inferences that could be made regarding data. We provide a formal definition of safety in such a system that captures the possibility of indirect information flows. We show that the safety problem is co-NP-complete; however, problems of realistic size can be reduced to a satisfiability problem that can be efficiently decided by a SAT solver...|$|E
30|$|Such contextual {{messages}} raise {{serious concerns}} {{in terms of}} scalability and delivery delay; this results not only from their huge number {{but also because the}} set of user recipients changes for each message (as their interests continuously change), preventing the use of well-known solutions such as <b>pub-sub</b> and multicast trees. This leads to the use of non-scalable broadcast based solutions or point-to-point messaging.|$|E
40|$|Existing {{distributed}} XML-based <b>pub-sub</b> systems normally targeted on filtering precision, while lacked scalability and fault-tolerance concern. In {{a large-scale}} dynamic network, nodes may join/leave/fail at times, hence a scalable yet fault-tolerant architecture is crucial. In this paper, we proposed HOPE: a hypercube overlay based <b>pub-sub</b> architecture for efficient XML dissemination in large-scale dynamic network environment. We first proposed a highly space/time efficient matching scheme for representing and filtering XML document based on XPE efficiently, utilizing bloom filter data structure. We then developed a hypercube overlay, which exploits the Key-Based Routing (KBR) mechanism, {{to provide a}} fault-tolerant and scalable publication dissemination architecture. Extended simulation experiments show proposed system can scale well, and can tolerate moderate levels of nodes failure: it works successfully in 4096 nodes system that has 25 % node's failure rate, with a replication factor of 8 (which caused link traffic overhead of only 500 Byte/Sec). Department of ComputingRefereed conference pape...|$|E
40|$|Existing stream {{processing}} systems {{are designed for}} clustered deployments, and cannot adequately meet the scalability and adaptivity requirements of Internet-scale monitoring applications. Furthermore, these systems commonly optimize for a specific QoS metric, which may limit their applicability to diverse applications and environments. This paper presents XFlow, a generic distributed data collection, processing, and dissemination system that addresses these limitations. XFlow integrates a <b>pub-sub</b> model with data flows for {{stream processing}}. The underlying <b>pub-sub</b> model decouples sources and clients, {{as well as the}} processing operators, leading to a loosely-coupled architecture that can gracefully scale, adapt to churn in system membership and workload, and facilitate sophisticated optimizations. We first provide an overview of XFlow’s architecture. We then describe XFlow’s optimization model that changes the placement and implementation of operators to meet application-specific performance goals and constraints. Finally, we demonstrate the flexibility and the effectiveness using real-world streams and experimental results obtained from our PlanetLab deployment. 1...|$|E
40|$|The {{ubiquitous}} {{adoption of}} XML {{as the standard}} of data exchange over the web has led to increased interest in building efficient and scalable XML publish-subscribe (<b>pub-sub)</b> systems. The central function of an XML-based <b>pub-sub</b> system is to perform XML filtering efficiently, i. e. identify those XPath expressions that have a match in a streaming XML document. In this paper, we propose a new sequence-based approach, which transforms both XML documents and XPath twig expressions into Node Encoded Tree Sequences (NETS). In terms of this encoding, we provide a necessary and sufficient condition for an XPath twig to represent a match in a given XML document. The proposed filtering procedure {{is based on a}} new subsequence matching algorithm devised for NETS, which identifies the set of matched queries free of false positives with a single scan of the XML document. Extensive experimental results show that the NETS method outperforms previous XML filtering approaches. 1...|$|E
40|$|Abstract. P 2 P {{systems are}} mainly used as {{distributed}} file systems; until recently no P 2 P version of newsgroups protocol existed. A DHT-based Publish-Subscribe (<b>Pub-Sub)</b> system by Aekaterinidis and Triantafillou {{is the first}} such a solution: a user interested in a particular topic subscribes it so that later he receives messages on new events on this topic once they occur. <b>Pub-Sub</b> systems as proposed cause severe privacy problems- a user who posts a new message on some subject has to fetch the list of all nodes who subscribed to this content. This in turn means that an adversary has a straightforward and legal tool to get information who is interested in a particular topic. In this paper we show how to enhance the system {{in order to protect}} user privacy. This includes anonymizing the users as well as hiding information on system dynamics and delivery of messages through anonymous paths. We also show how to protect such a system from spam activity. 1 Publish-Subscribe Systems In client-server architectures users with common interest frequently form discussio...|$|E
40|$|In recent years, publish-subscribe (<b>pub-sub)</b> systems {{based on}} XML {{document}} filtering have received much attention. In a typical pubsub system, subscribed users specify {{their interest in}} profiles expressed in the XPath language, and each new content is matched against the user profiles so that the content is delivered to only the interested subscribers. As the number of subscribed users and their profiles can grow very large, the scalability {{of the system is}} {{critical to the success of}} <b>pub-sub</b> services. In this paper, we propose a novel scalable filtering system called FiST (Filtering by Sequencing Twigs) that transforms twig patterns expressed in XPath and XML documents into sequences using Prüfer’s method. As a consequence, instead of matching linear paths of twig patterns individually and merging the matches during post-processing, FiST performs holistic matching of twig patterns with incoming documents. FiST organizes the sequences into a dynamic hash based index for efficient filtering. We demonstrate that our holistic matching approach yields lower filtering cost and good scalability under various situations...|$|E
30|$|The lookup map is disseminated {{and kept}} {{consistent}} between all runtimes either via a <b>pub-sub</b> for client runtimes or gossip scheme for actor hosting runtimes. Both these methods of synchronisation achieve eventual consistency, therefore {{there is the}} possibility that calls may be made to no longer existing endpoints or runtimes may not yet be aware of newly instantiated endpoints. Again, the circuit breaker mechanism is intended to lessen the significant of this issue.|$|E
40|$|Publish-subscribe (<b>pub-sub)</b> systems {{present the}} state of the art in {{information}} dissemination to multiple users. Current XML-based <b>pub-sub</b> systems provide users with considerable flexibility allowing the formulation of complex queries on the content as well as the structure of the streaming messages. Messages that contain one or more matches for a given user profile (query) are forwarded to the user. Recently various approaches focused on accelerating XML path query filtering using dedicated hardware architectures, like FPGAs. Despite their very high throughput, FPGAs require extensive update time while their physical resource availability is also limited. In this paper we exploit the parallelism found in XPath filtering systems using GPUs instead, which are favorable platforms due to the massive parallelism found in their hardware architecture, alongside the flexibility and programmability of software. By utilizing properties of the GPU memory hierarchy we can match thousands of user profiles at high throughput, requiring minimal update time. E cient common prefix optimizations are also applied to the query set. An extensive experimental evaluation shows an average speedup of 10 x (up to 2. 5 orders of magnitude) versus {{the state of}} the art software approaches. 1...|$|E
40|$|In recent years, energy {{efficiency}} {{has become a}} major bottleneck for sustainable development of the industrial communications network, how to achieve energy-efficient communication has become a hot topic for researchers. This paper focuses on industrial energy-efficient multi-hop wireless networks proposing a transmitting algorithm based on traffic redirecting (TRTA). The design of traditional mobile multi-hop wireless network only consider either network efficiency or minimum energy networks to maximize network efficiency. In this paper, to make up for shortcomings of previous studies, proposed an algorithm to maximize network efficiency for the novel <b>pub-sub</b> transmission mode of industrial network. The TRTA uses the technology of network flow sensing, according to the information of traffic network to get traffic load of the network. And then using the flow redirecting method to redirect the traffic on low-load path to other links with higher utilization rate but not heavy, in order to improve the whole {{energy efficiency}} of the network. Simulation in a multi-hop wireless networks with <b>pub-sub</b> transmission mode, the results show that the proposed algorithm has lower energy consumption and higher network efficiency, network performance has been significantly improved...|$|E
30|$|In this section, {{we provide}} the brief {{overview}} of benchmark suite used {{in the evaluation of}} proposed framework followed by a glimpse of experimental setups. The benchmark topologies form a data pipeline using open-source distributed <b>pub-sub</b> messaging system Apache Pulsar [11] to consume text streams generated by parallel synthetic data load generator. The input streams are the tuples which are generated using Alice’s Adventures in Wonderland 2 text file and the spout consume the data streams later emits into topology through subscription to pulsar topic.|$|E
30|$|Moreover, we {{introduce}} {{the concept of}} propagation based on a chain of recipients that, unlike <b>pub-sub</b> and application-level multicast tree approaches, can quickly react to highly dynamic ever-changing rules. In fact, as our experiments have shown, the chains of recipients can be continuously rebuilt and still achieve significant bandwidth reduction and no penalty on the average propagation time. This is only possible because of our delayed propagation mechanism that, when paired with compressed aggregated messages, makes a much more efficient use of the network bandwidth.|$|E
40|$|It’s an {{asynchronous}} push-style {{world out}} there. We communicate via email, instant messages, pagers, faxes, and voice mail, pushing messages {{to each other}} without waiting for immediate responses. This style of communication lets us prioritize, save, or ignore incoming messages, delaying responses until necessary or appropriate. If sequentially issuing and handling synchronous requests and responses were our only mode of interpersonal and inter-application communication, our business and social networks would operate at considerably lower efficiencies. Asynchronous push is also common in distributed computing systems. For example, publish–subscribe (<b>pub–sub)</b> systems let application...|$|E
30|$|While P 2 P {{systems have}} been {{successfully}} applied {{to a wide range}} of distributed applications (multicast, routing, storage, <b>pub-sub,</b> video streaming), with some highly visible successes (Skype, Bitcoin), they tend to have fallen out of fashion in favor of a much more cloud-centric vision of the current Internet. We think this is paradoxical, as cloud-based systems are themselves large-scale, highly distributed infrastructures. They reside within massive, densely interconnected datacenters, and must execute efficiently on an increasing number of machines, while dealing with growing volumes of data. Today even more than a decade ago, large-scale systems require scalable designs to deliver efficient services.|$|E
