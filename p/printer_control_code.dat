0|2142|Public
50|$|The {{program was}} not a WYSIWYG text editor. <b>Printer</b> <b>codes,</b> <b>controlling</b> the {{formatting}} of the text when printed, had to be defined via the OC command, followed by the exact string of Escape-sequence characters for the specific printer that you were using, to enable Bold, Italic, line-length, font-pitch, font size etc.|$|R
50|$|The first LaserJet was a {{high-speed}} replacement for text-only daisy wheel impact printers and dot matrix <b>printers.</b> By using <b>control</b> <b>codes</b> {{it was possible}} to change the printed text style using font patterns stored in permanent ROM in the printer. Although unsupported by HP, because the Laserjet used the same basic PCL language (PCL Level III) spoken by HP's other printers {{it was possible to}} use the Laserjet on HP 3000 multiuser systems.|$|R
50|$|HP-GL (Hewlett-Packard Graphics Language; often {{written as}} HPGL) is a <b>printer</b> <b>control</b> {{language}} created by Hewlett-Packard (HP). HP-GL {{was the primary}} <b>printer</b> <b>control</b> language used by HP plotters. It later became a standard for almost all plotters. Hewlett-Packard's printers also usually support HP-GL/2 in addition to PCL.|$|R
5000|$|<b>Printer</b> <b>Control</b> Extender - Assists {{in working}} with printer drivers.|$|R
5000|$|PCL - Printer Command Language, a <b>printer</b> <b>control</b> {{protocol}} family {{designed by}} Hewlett-Packard ...|$|R
5000|$|Formats for printed documents: PostScript, PDF, HP-GL (<b>printer</b> <b>control</b> {{language}} used by Hewlett-Packard plotters), ...|$|R
5000|$|... #Caption: The new Devices and <b>Printers</b> <b>Control</b> Pane; custom icons can be {{downloaded}} via the Internet.|$|R
50|$|HP <b>Printer</b> <b>Control</b> Language {{shares a}} common non-ANSI escape {{sequence}} grammar and common sequences with HP terminals.|$|R
5000|$|Print {{data sets}} on IBM {{mainframe}} operating systems may have either of two variants of <b>printer</b> <b>control</b> characters: ...|$|R
50|$|In 1990, printer and {{computing}} system manufacturer Hewlett-Packard adopted Intellifont scaling {{as part of}} its PCL 5 <b>printer</b> <b>control</b> protocol.|$|R
50|$|PCL is {{occasionally}} and incorrectly {{said to be}} an abbreviation for <b>Printer</b> <b>Control</b> Language which actually is another term for page description language.|$|R
5000|$|Eltron Programming Language (EPL and EPL2) is a <b>printer</b> <b>control</b> {{language}} {{used to produce}} printed paper labels for various Eltron (now Zebra) model printers.|$|R
50|$|MatterHackers is an Orange County-based company {{founded in}} 2012 that {{supplies}} 3D printing materials and tools. MatterHackers is developing their 3D <b>printer</b> <b>control</b> software, MatterControl.|$|R
50|$|The main {{difference}} between the two sets of <b>printer</b> <b>control</b> characters might be the portability of ASA control characters versus the hardware dependency of machine control characters.|$|R
25|$|Thermistors {{are often}} used in the hot ends of 3D printers; they monitor the heat {{produced}} and allow the <b>printer's</b> <b>control</b> circuitry to keep a constant temperature for melting the plastic filament.|$|R
50|$|The Harlequin Embedded SDK (EBD) {{has been}} {{optimized}} for use within home and office printers. To that end it supports several {{versions of the}} <b>Printer</b> <b>Control</b> Language (PCL), {{as well as the}} Printer Job Language (PJL) and Hewlett-Packard Graphics Language (HPGL).|$|R
50|$|Most {{printers}} {{other than}} line <b>printers</b> accept <b>control</b> characters or unique character sequences to <b>control</b> various <b>printer</b> functions. These may range from shifting from lower to upper case or from black to red ribbon on typewriter printers to switching fonts and changing character sizes and colors on raster <b>printers.</b> Early <b>printer</b> <b>controls</b> were not standardized, with each manufacturer's equipment having its own set. The IBM Personal Printer Data Stream (PPDS) became a commonly used command set for dot-matrix printers.|$|R
5000|$|... #Caption: IBM 702 system: From left to right, CRT memory, 702 CPU, 717 printer, operator's console, 757 <b>printer</b> <b>control</b> unit, 752 tape control unit, five 727 tape drives, 732 drum storage, five 727 tape drives, card reader, card punch, and reader/punch control units.|$|R
50|$|To <b>control</b> its <b>printers,</b> Epson {{introduced}} a <b>printer</b> <b>control</b> language, the Epson Standard Code for Printers or (ESC/P), {{which became a}} de facto industry standard for controlling print formatting during the era of dot matrix printers; whose popularity was initially started by the Epson MX-80.|$|R
40|$|The {{invention}} {{concerns a}} circuit protected against transitory perturbations, comprising a combinatorial logic circuit (10), having {{at least an}} output (A); a circuit (20) generating an error <b>control</b> <b>code</b> for said output, and a storage element (24) provided at said output, controlled by the circuit generating a <b>control</b> <b>code</b> to be transparent when the <b>control</b> <b>code</b> is correct, and to maintain its status when the <b>control</b> <b>code</b> is incorrect...|$|R
5000|$|C0 and C1 <b>control</b> <b>codes,</b> {{which shows}} the caret {{notation}} for all C0 <b>control</b> <b>codes</b> as well as DEL ...|$|R
40|$|General {{definitions}} {{as well as}} {{rules of}} reasoning regarding <b>control</b> <b>code</b> production, distribution, deployment, and usage are described. The role of testing, trust, confidence and risk analysis is considered. A rationale for <b>control</b> <b>code</b> testing is sought and found for the case of safety critical embedded <b>control</b> <b>code...</b>|$|R
50|$|Dot matrix {{printers}} {{also introduced}} {{the ability to}} print raster graphics. The graphics were interpreted by the computer and sent {{as a series of}} dots to the printer using a series of escape sequences. These <b>printer</b> <b>control</b> languages varied from printer to printer, requiring program authors to create numerous drivers.|$|R
50|$|Unicode {{provides}} graphic characters for representing C0 <b>control</b> <b>codes</b> {{and other}} <b>control</b> {{characters in the}} Control Pictures block. They are visual representations, not the actual <b>control</b> <b>codes</b> themselves.|$|R
2500|$|The other 9 {{units in}} ENIAC were the Initiating Unit (started {{and stopped the}} machine), the Cycling Unit (used for {{synchronizing}} the other units), the Master Programmer (controlled [...] "loop" [...] sequencing), the Reader (controlled an IBM punch-card reader), the <b>Printer</b> (<b>controlled</b> an IBM card punch), the Constant Transmitter and 3 function tables.|$|R
40|$|With the {{expected}} growth in mobile robotics {{the demand for}} expertise to develop robot <b>control</b> <b>code</b> will also increase. As end-users cannot be expected to develop this <b>control</b> <b>code</b> themselves, a more elegant solution would be to allow the end-users to teach the robot by demonstrating the task. In this paper we show how route learning tasks may be “translated ” directly into robot <b>control</b> <b>code</b> simply by observing the task. We show how automated code generation may be facilitated through system identification — which algorithmically and automatically transfers human behaviour into <b>control</b> <b>code,</b> using transparent mathematical functions. We provide two route learning examples where a mobile robot automatically obtains <b>control</b> <b>code</b> simply by observing human behaviour, identifying it using system identification, and copying the behaviour...|$|R
40|$|Abstract <b>Control</b> <b>code</b> is {{a concept}} that is closely related to a {{frequently}} occurring practitioner’s view on what is a program: code that is capable of controlling the behaviour of some machine. We present a logical approach to explain issues concerning <b>control</b> <b>codes</b> that are independent of the details of the behaviours that level. We illustrate this among other things by means of an example about the production machine models, called machine structures. We introduce a model of execution environments for the executable codes of machine structures and use it to go into portability of <b>control</b> <b>codes.</b> Keywords <b>control</b> <b>code</b> – machine structure – execution architecture – compiler fixed point – <b>control</b> <b>code</b> portability Note This paper is a substantially extended version of [7]. ...|$|R
5000|$|Some {{character}} sets provide a separate newline character code. EBCDIC, for example, provides an NL character code {{in addition to}} the CR and LF codes. Unicode, in addition to providing the ASCII CR and LF <b>control</b> <b>codes,</b> also provides a [...] "next line" [...] (NEL) <b>control</b> <b>code,</b> as well as <b>control</b> <b>codes</b> for [...] "line separator" [...] and [...] "paragraph separator" [...] markers.|$|R
5000|$|... #Caption: Windows-1252, {{sometimes}} incorrectly called [...] "ANSI" [...] or [...] "ASCII". Red indicates code {{points that}} are C1 <b>control</b> <b>codes</b> in ISO-8859-1. Blue dots indicate <b>control</b> <b>codes</b> or unused code points.|$|R
50|$|Reproducing rolls are {{the same}} as hand-played rolls but have {{additional}} <b>control</b> <b>codes</b> to operate the dynamic modifying systems specific to whichever brand of reproducing piano it is designed to be played back on. The roll plays back at a fixed constant speed to preserve the inter-relationship of these <b>control</b> <b>codes</b> and the time it takes for the pianos dynamic mechanisms to operate between sequential <b>control</b> <b>codes.</b>|$|R
40|$|The {{date of receipt}} and {{acceptance}} will be inserted by the editor Abstract <b>Control</b> <b>code</b> {{is a concept that}} is closely related to a frequently occurring practitioner’s view on what is a program: code that is capable of controlling the behaviour of some machine. We present a logical approach to explain issues concerning <b>control</b> <b>codes</b> that are independent of the details of the behaviours that level. We illustrate this among other things by means of an example about the production machine models, called machine structures. We introduce a model of systems that provide execution environments for the executable codes of machine structures and use it to go into portability of <b>control</b> <b>codes.</b> Keywords <b>control</b> <b>code</b> – machine structure – execution architecture – compiler fixed point – <b>control</b> <b>code</b> portability...|$|R
50|$|The C1 Controls {{subheading}} contains 32 supplementary <b>control</b> <b>codes</b> {{inherited from}} ISO/IEC 8859-1 {{and many other}} 8-bit character standards. The alias names for the C0 and C1 <b>control</b> <b>codes</b> are taken from ISO/IEC 6429:1992.|$|R
50|$|The Extended Binary Coded Decimal Interchange Code (EBCDIC) {{character}} set contains 65 <b>control</b> <b>codes,</b> including {{all of the}} ASCII <b>control</b> <b>codes</b> as well as additional codes which are mostly used to control IBM peripherals.|$|R
50|$|Early {{mainframe}} printers were {{so called}} line printers. Line printers provided {{only a very}} limited set of commands to control how the paper was advanced when print lines were printed. The application writing reports, list, etc. to be printed had to include those commands in the print data. These single character print commands are called <b>printer</b> <b>control</b> characters.|$|R
5000|$|The {{font size}} cannot be {{configured}} in [...]sub files, only in player, but the font {{style of the}} subtitle displayed may be changed using <b>control</b> <b>codes.</b> The available <b>control</b> <b>codes</b> and their purpose are given: ...|$|R
50|$|Sixty-five code points (U+0000-U+001F and U+007F-U+009F) are {{reserved}} as <b>control</b> <b>codes,</b> and {{correspond to the}} C0 and C1 <b>control</b> <b>codes</b> defined in ISO/IEC 6429. Of these U+0009 (Tab), U+000A (Line Feed), and U+000D (Carriage Return) are widely used in Unicode-encoded texts.|$|R
