16|7|Public
50|$|Bitwise {{operations}} are necessary particularly in lower-level programming such as device drivers, low-level graphics, communications protocol <b>packet</b> <b>assembly,</b> and decoding.|$|E
50|$|MNP 4 was {{a further}} {{improvement}} on MNP 3, adding a variable packet size system {{they referred to}} as Adaptive <b>Packet</b> <b>Assembly.</b>|$|E
50|$|<b>Packet</b> <b>Assembly</b> is the {{creation}} of the packets to be sent. Some popular programs used for <b>packet</b> <b>assembly</b> are Hping, Nemesis, Ostinato, Cat Karat packet builder, Libcrafter, libtins, PcapPlusPlus, Scapy, Wirefloss and Yersinia. Packets may be of any protocol and are designed to test specific rules or situations. For example, a TCP packet may be created with a set of erroneous flags to ensure that the target machine sends a RESET command or that the firewall blocks any response.|$|E
50|$|A packet assembler/disassembler, {{abbreviated}} PAD is {{a communications}} device which provides multiple asynchronous terminal connectivity to an X.25 (packet-switching) network or host computer. It collects {{data from a}} group of terminals and places the data into X.25 <b>packets</b> (<b>assembly).</b> A PAD also does the reverse, it takes data packets from packet-switching network or host computer and returns them into a character stream that can be sent to the terminals (disassembly). A Frame Relay Assembler/Disassembler (FRAD) is a similar device for accessing Frame Relay networks.|$|R
50|$|FRAD (Frame Relay Access Device or Frame Relay Assembler/Disassembler) is {{a device}} that turns data packets into frame relay frames that can be sent over a frame relay network and turns the {{received}} frame relay frames into data <b>packets.</b> Its <b>assembly</b> and disassembly functionality {{is similar to a}} Packet Assembler/Disassembler (PAD), which is used for accessing X.25 networks.|$|R
5000|$|This basic example {{includes}} {{the three most}} fundamental packet processing functions, packetization, routing, and <b>assembly.</b> <b>Packet</b> processing functions range from the simple to highly complex. As an example, the routing function is actually a multi-step process involving various optimization algorithms and table lookups. A basic routing function on the Internet looks something like: ...|$|R
50|$|Packet Editing is the {{modification}} of created or captured packets. This involves modifying packets in manners which are {{difficult or impossible}} {{to do in the}} <b>Packet</b> <b>Assembly</b> stage, such as modifying the payload of a packet. Programs such as Ostinato, Netdude allow a user to modify recorded packets' fields, checksums and payloads quite easily. These modified packets can be saved in packet streams which may be stored in pcap files to be replayed later.|$|E
50|$|Packet Play or Packet Replay is the act {{of sending}} a pre-generated or {{captured}} series of packets. Packets may come from <b>Packet</b> <b>Assembly</b> and Editing or from captured network attacks. This allows for testing of a given usage or attack scenario for the targeted network. Tcpreplay {{is the most common}} program for this task since it is capable of taking a stored packet stream in the pcap format and sending those packets at the original rate or a user-defined rate. Ostinato added support for pcap files in version 0.4. Some packet analyzers are also capable of packet replay.|$|E
50|$|A {{front end}} {{processor}} (FEP), or a communications processor, is a small-sized computer which interfaces to the host computer a number of networks, such as SNA, or a number of peripheral devices, such as terminals, disk units, printers and tape units. Data is transferred between the host computer and the {{front end processor}} using a high-speed parallel interface. The front end processor communicates with peripheral devices using slower serial interfaces, usually also through communication networks. The purpose is to off-load from the host computer the work of managing the peripheral devices, transmitting and receiving messages, <b>packet</b> <b>assembly</b> and disassembly, error detection, and error correction. Two examples are the IBM 3705 Communications Controller and the Burroughs Data Communications Processor.|$|E
5000|$|It is {{recommended}} that, {{among the different}} wheels available, the compatible ones must maintain {{the same size as}} those from the <b>assembly</b> <b>packet.</b> Smaller the diameter, more stable it is, as the car's center of gravity is lowered. Although one can easily assume that a larger wheel suits a faster car the best, this is not at all the case. Large wheels are for cars with high gear ratio (i.e. [...] "5:1") and weak motor; small wheels are for cars with low gear ratio and strong motor. Wider wheels allow for more stability but suffer from friction, and, thus, speed loss; thinner wheels are intended for speed, but the car could be susceptible to flipping off the track.|$|R
40|$|Abstract—For IP-over-WDM networks, optical coarse packet {{switching}} (OCPS) {{has been proposed}} to circumvent optical {{packet switching}} limitations by using in-band-controlled per-burst switching and advocating traffic control enforcement to achieve high bandwidth utilization and quality-of-service (QoS). In this paper, we first introduce the OCPS paradigm. Significantly, we present a QoS-enhanced traffic control scheme exerted during packet aggregation at ingress nodes, aiming at providing delay and loss class differentiations for OCPS networks. Serving a dual purpose, the scheme is called () -Scheduler/Shaper, where and are the maximum burst size and burst assembly time, respectively. To provide delay class differentiation, for IP packet flows designated with delay-associated weights, () -Scheduler performs <b>packet</b> scheduling and <b>assembly</b> into bursts based on their weights and a virtual window of size. The guarantee...|$|R
40|$|Abstract — A new hybrid {{signaling}} {{scheme is}} proposed that combines a two-way with an one-way reservation protocol. The key {{idea is to}} synchronize the assembly process with the reservation so as to start simultaneously and hard reserve part of the end-to-end path in two way mode for a duration equal to the burst assembly time. In this way, upon {{the arrival of the}} first <b>packet</b> in the <b>assembly</b> queue, the two-way reservation part of the signaling scheme may start simultaneously. Upon the completion of the burst assembly process, burst transmission may start immediately since the path has been successfully established for a certain number of hops. The framework that we propose benefits from the parallel execution of the signaling messages and the assembly process, and exploits the burstification delay to guarantee burst transmission for at least a part of the network path...|$|R
50|$|Packet {{crafting}} is {{a technique}} that allows network administrators to probe firewall rule-sets and find entry points into a targeted system or network. This is done by manually generating packets to test network devices and behaviour, instead of using existing network traffic. Testing may target the firewall, IDS, TCP/IP stack, router or any other component of the network. Packets are usually created by using a packet generator or packet analyzer which allows for specific options and flags to be set on the created packets. The act of packet crafting can be broken into four stages: <b>Packet</b> <b>Assembly,</b> Packet Editing, Packet Play and Packet Decoding. Tools exist {{for each of the}} stages - some tools are focussed only on one stage while others such as Ostinato try to encompass all stages.|$|E
40|$|AbstractNetwork {{protocol}} {{analysis is}} a network sniffer {{to capture data}} for further analysis {{and understanding of the}} technical means necessary packets. Network sniffing is intercepted by <b>packet</b> <b>assembly</b> binary format of the original message content. In order to obtain the information contained. Required based on TCP / IP protocol stack protocol specification. Again to restore the data packets at protocol format and content in each protocol layer. Actual data transferred, as well as the application tier...|$|E
40|$|This paper first {{describes}} {{the implementation of}} a protocol-independent self-similar traffic generator in the OPNET modeler. With the support of this traffic generator, we investigate the traffic shaping function at the edge router in optical packet-switched networks. We propose an optical <b>packet</b> <b>assembly</b> mechanism and discuss its impacts on the traffic characteristics. Our simulation results indicate that this assembly mechanism can serve as traffic shaper to reduce the traffic correlation and the degree of self-similarity. I...|$|E
40|$|The {{process of}} {{gathering}} and associating data from multiple sensors or sub-detectors {{due to a}} common physical event (the process of event-building) is used in many fields, including high-energy physics and γ-ray astronomy. Fault tolerance in event-building is a challenging problem that increases in difficulty with higher data throughput rates and increasing numbers of sub-detectors. We draw on biological self-assembly models {{in the development of}} a novel event-building paradigm that treats each packet of data from an individual sensor or sub-detector as if it were a molecule in solution. Just as molecules are capable of forming chemical bonds, "bonds" can be defined between data packets using metadata-based discriminants. A database [...] which plays the role of a beaker of solution [...] continually selects pairs of assemblies at random to test for bonds, which allows single <b>packets</b> and small <b>assemblies</b> to aggregate into larger assemblies. During this process higher-quality associations supersede spurious ones. The database thereby becomes fluid, dynamic, and self-correcting rather than static. We will describe tests of the self-assembly paradigm using our first fluid database prototype and data from the VERITAS γ-ray telescope. Comment: In Proceedings of the 34 th International Cosmic Ray Conference (ICRC 2015), The Hague, The Netherland...|$|R
40|$|Abstract-Traffic shaping at {{the edge}} router is one {{possible}} solution to mitigate the adverse effects of self-similar traffic in optical packet-switched networks. In this paper we propose an optical <b>packet</b> <b>assembly</b> mechanism and study its impacts on the traffic characteristics. In addition to the Hurst parameter, we apply new measures to describe the short-term correlation and to investigate {{the effect of the}} system parameters in the assembly mechanism. Our simulation study indicates that this assembly mechanism can reduce the traffic correlation and the degree of self-similarity at an acceptable latency in terms of the assembly delay. I...|$|E
40|$|Owing {{to a lot}} {{of short}} packets in the Fieldbus Control System (FCS) {{applications}} and high channel acquisition time in Ultra Wide Band (UWB), we proposed a special MAC protocol based on UWB for FCS. Some typical MAC Protocols for UWB are analyzed, and the design idea of special UWB MAC protocol for the FCS is proposed in this paper. At the same time, we introduce aggregating multiple upper-layer packets idea and propose a special <b>packet</b> <b>assembly</b> mechanism to adapt of UWB properties and FCS characteristics. The two acknowledgement policies are adopted for different wireless channel condition. Finally, we evaluate the performance of the proposed special UWB MAC protocol for the FCS. Simulation results show that it is more effective than traditional CSMA/CA in the FCS applications. IEE...|$|E
40|$|Much {{progress}} has been made toward interactive ray tracing, but most research has focused specifically on ray casting. A common approach is to use “packets ” of rays to amortize cost across sets of rays. Whether “packets ” can be used to speed up the cost of reflection and refraction rays is unclear. The issue is complicated since such rays do not share common origins and often have less directional coherence than viewing and shadow rays. Since the primary advantage of ray tracing over rasterization is the computation of global effects, such as accurate reflection and refraction, this lack of knowledge should be corrected. We are also interested in exploring whether distribution ray tracing, due to its stochastic properties, further erodes the effectiveness of techniques used to accelerate ray casting. This paper addresses the question of whether packet-based ray algorithms can be effectively used for more than visibility computation. We show that by choosing an appropriate data structure and a suitable <b>packet</b> <b>assembly</b> algorithm we can extend the idea of “packets” from ray casting to Whitted-style and distribution ray tracing, while maintaining efficiency...|$|E
40|$|T he UWB (Ultra Wide Band) {{technology}} {{can play an}} effective role in FCS (Fieldbus Control System). But the channel acquisition time of UWB is high, {{and a lot of}} packets are short in FCS. So the efficiency of FCS based on UWB will significantly reduce. In this paper, a CSMA/CA protocol with D-UF (Dynamic Length Mechanism for Unite Frame) is proposed. The characteristics of U W B and size of data packets in FCS are take n into account in the CSMA/CA protocol with D-UF. First, the characteristics of UWB and FCS are discuss ed, and the slot utilization of CSMA/CA protocol is analyzed in different FCS. Finally, t he <b>packet</b> <b>assembly</b> policy is designed. A t the same time, t he performance of the CSMA/CA protocol with D-UF is evaluated in FCS based on UWB by modeling and simulation. Simulation results show that the CSMA/CA protocol with D-UF is effective to increase slot utilization, and improve t hroughput, and reduce average delay i n the FCS based on UWB. It is useful to engineer for designing the FCS based on UWB. </p...|$|E
40|$|Image coding plays a {{key role}} in {{multimedia}} signal processing and communications. JPEG 2000 is the latest image coding standard, it uses the EBCOT (Embedded Block Coding with Optimal Truncation) algorithm. The EBCOT exhibits excellent compression performance, but with high complexity. The need to reduce this complexity but maintain similar performance to EBCOT has inspired a significant amount of research activity in the image coding community. Within the development of image compression techniques based on wavelet transforms, the EZW (Embedded Zerotree Wavelet) and the SPIHT (Set Partitioning in Hierarchical Trees) have played an important role. The EZW algorithm was the first breakthrough in wavelet based image coding. The SPIHT algorithm achieves similar performance to EBCOT, but with fewer features. The other very important algorithm is SBHP (Sub-band Block Hierarchical Partitioning), which attracted significant investigation during the JPEG 2000 development process. In this thesis, the history of the development of wavelet transform is reviewed, and a discussion is presented on the implementation issues for wavelet transforms. The above mentioned four main coding methods for image compression using wavelet transforms are studied in detail. More importantly the factors that affect coding efficiency are identified. The main contribution of this research is the introduction of a new low-complexity coding algorithm for image compression based on wavelet transforms. The algorithm is based on block dividing coding (BDC) with an optimised <b>packet</b> <b>assembly.</b> Our extensive simulation results show that the proposed algorithm outperforms JPEG 2000 in lossless coding, even though it still leaves a narrow gap in lossy coding situation...|$|E
40|$|The Internet is {{expanding}} rapidly and constantly adding new protocols and features. To shorten the design cycle, many companies {{have adopted a}} common hardware platform {{for a variety of}} products. In these products, specialized packet processors tailored for packet processing handle multiple protocols and feature changes. A packet processor usually incorporates multiple RISC engines that are configurable as several instances of parallel processors, working simultaneously or in a pipelined fashion. 1 - 7 In either approach, packet processors are complex and expensive. Packet processing has many levels of programmability requirements. Some tasks require only mild programmability and can’t justify the use of a full-fledged packet processor. A finite state machine (FSM), on the other hand, has high performance but cannot adapt to protocol changes. The solution is something in between: fast, programmable, but not as complicated as a packet processor. A programmable state machine (PSM) is such an idea. The case for PSM Figure 1 a shows the major components in a generic router/switch. A line card terminates a transmission link to various types of physical media. In Figure 1 b, the framer processes Published by the IEEE Computer Society the physical layer protocol, passing the packet to a packet processor, which performs processing for layers two and three. This processing includes IP table lookup and packet classification. Packets then go to the traffic manager (TM), which handles queuing. The TM normally divides incoming packets into cells for easy buffering. The TM then sends the cells to the switch fabric for forwarding. When cells return from the switch, the TM puts them back into packets. So, maintaining cell sequence in the switch fabric is important. Otherwise, the TM has to perform <b>packet</b> <b>assembly.</b> A switch fabric links the line cards, and various groups have proposed standards for interfacing between the switch fabric and the TM. One is the common switch interface or CSI...|$|E
40|$|Cortical brain-machine {{interface}} (BMI) {{systems as}} they currently exist within the research environment are {{not suitable for}} general clinical use. A clinical system must be fully implantable, requiring no chronic breaks in the skin. This work addresses the communication and processing needs of a fully implantable neural data acquisition system. Such a system is {{a key component of}} a clinically viable BMI. This work primarily focuses on the design, implementation, and testing of a data reduction scheme for 96 channels of neural data and a bidirectional telemetry link for sending data out of the body and providing commands and configuration information to the implanted portion of the system. The data reduction scheme and an interface to a one megabit per second commercial transceiver were implemented in a single programmable logic device. The data reduction scheme makes use of a voltage thresholding spike detection technique. The threshold for each channel is computed automatically based on a user-defined multiplier and an estimate of the noise level. The interface to the transceiver performs all necessary serial encoding and decoding, queuing, and <b>packet</b> <b>assembly</b> and disassembly. The data reduction portion of the system was tested using simulated neural signals. Spike detection performance was evaluated using thirty different multiplier values over a wide range of signal-to-noise ratios. Spike extraction tests showed that the system could output up to 2000 extracted spikes per second with latencies suitable for a BMI application. The circumstances under which some spikes would not be transmitted by the system were also characterized. Finally, an investigation of automatic threshold selection methods suitable for a BMI application was conducted. The results suggest that the spike detection technique used in the data reduction scheme is appropriate for this application. The neural data acquisition system has been fully implanted in several sheep and has successfully recorded, processed, and transmitted neural data during these experiments. The system is also shown to interface well with commercial spike sorting software and with all of the necessary components of a BMI setup, demonstrating suitability for integration into systems that have already been shown to be effective in the laboratory environment. Dissertatio...|$|E

