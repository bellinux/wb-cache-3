8671|2033|Public
25|$|The data {{transfer}} protocol, RTP, facilitates {{the transfer of}} real-time data. Information provided by this protocol include timestamps (for synchronization), sequence numbers (for <b>packet</b> <b>loss</b> and reordering detection) and the payload format which indicates the encoded format of the data.|$|E
25|$|Real-time {{multimedia}} streaming applications require timely {{delivery of}} information and often can tolerate some <b>packet</b> <b>loss</b> to achieve this goal. For example, loss of a packet in audio application may result in loss of {{a fraction of a}} second of audio data, which can be made unnoticeable with suitable error concealment algorithms. The Transmission Control Protocol (TCP), although standardized for RTP use, is not normally used in RTP applications because TCP favors reliability over timeliness. Instead the majority of the RTP implementations are built on the User Datagram Protocol (UDP). Other transport protocols specifically designed for multimedia sessions are SCTP and DCCP, although, , they are not in widespread use.|$|E
25|$|Sequence number: (16 bits) The {{sequence}} number is incremented by {{one for each}} RTP data packet sent and {{is to be used}} by the receiver to detect <b>packet</b> <b>loss</b> and to restore packet sequence. The RTP does not specify any action on packet loss; it is left to the application to take appropriate action. For example, video applications may play the last known frame in place of the missing frame. According to , the initial value of the {{sequence number}} should be random to make known-plaintext attacks on encryption more difficult. RTP provides no guarantee of delivery, but the presence of sequence numbers makes it possible to detect missing packets.|$|E
40|$|International audienceThis paper {{deals with}} the {{co-design}} of a Network Control System (NCS) and its diagnosis. Residuals are shown {{to be affected by}} network <b>packet</b> <b>losses.</b> A new indicator, sensitive to <b>packet</b> <b>losses</b> is proposed and thus changes in the residuals due to faults or to <b>packet</b> <b>losses</b> can be differentiated. Results are exemplified through the simulation of a 4 -rotor helicopter using the Matlab/Simulink standard. The network is simulated thanks to the TrueTime toolbox...|$|R
30|$|The loss {{differentiation}} schemes differentiate congestion {{losses from}} wireless losses [6, 7]. These schemes improve TCP throughput over wireless losses by classifying {{the cause of}} <b>packet</b> <b>losses.</b> However, they also classify packet-reordering into <b>packet</b> <b>losses,</b> and therefore retransmit unnecessary packets.|$|R
40|$|International audienceThe Transmission Control Protocol (TCP) was {{designed}} to provide reliable transport services in wired networks. In such networks, <b>packet</b> <b>losses</b> mainly occur due to congestion. Hence, TCP {{was designed}} to apply congestion avoidance techniques to cope with <b>packet</b> <b>losses.</b> Nowadays, TCP is also utilized in wireless networks where, besides congestion, numerous other reasons for <b>packet</b> <b>losses</b> exist. This results in reduced throughput and increased transmission round-trip time when {{the state of the}} wireless channel is bad. We propose a new network layer, that transparently sits below the transport layer and hides non congestion-imposed <b>packet</b> <b>losses</b> from TCP. The network coding in this new layer is based on the well-known class of Maximum Distance Separable (MDS) codes...|$|R
2500|$|STEP 4: Deliver data {{directly}} from the source to the mediation device without any human intervention or <b>packet</b> <b>loss</b> ...|$|E
50|$|<b>Packet</b> <b>loss</b> {{occurs when}} {{one or more}} packets of data {{travelling}} across a computer network fail to reach their destination. <b>Packet</b> <b>loss</b> is typically caused by network congestion. <b>Packet</b> <b>loss</b> is measured {{as a percentage of}} packets lost with respect to packets sent.|$|E
50|$|The Transmission Control Protocol (TCP) detects <b>packet</b> <b>loss</b> and {{performs}} retransmissions {{to ensure}} reliable messaging. <b>Packet</b> <b>loss</b> in a TCP connection {{is also used}} to avoid congestion and reduces throughput of the connection.|$|E
30|$|A combination {{of random}} and {{malicious}} <b>packet</b> <b>losses</b> (dependent case).|$|R
40|$|Abstract — In {{this paper}} we analyze more than 100 hours of packet traces from Planet-Lab {{measurements}} {{to study the}} correlation of Internet <b>packet</b> <b>losses.</b> We first apply statistical tests to identify the correlation timescale of the binary loss data. We find that in half of the traces <b>packet</b> <b>losses</b> are far from independent. More significantly, the correlation timescale of <b>packet</b> <b>losses</b> is correlated with the network load. We then examine the loss runs and the success runs of <b>packets.</b> The <b>loss</b> runs are typically short, regardless of the network load. We find that the success runs {{in the majority of}} our traces are also uncorrelated. Furthermore, their correlation timescale also does not depend on the network load. All of these results show that the impact of network load on the correlation of <b>packet</b> <b>losses</b> is nontrivial and that loss runs and success runs are better modelled as being independent than the binary losses themselves. I...|$|R
30|$|Minimize the {{occurrence}} of <b>packets</b> <b>loss</b> and minimize <b>packet</b> retransmissions.|$|R
5000|$|... where MSS is {{the maximum}} segment size and Ploss is the {{probability}} of <b>packet</b> <b>loss.</b> If <b>packet</b> <b>loss</b> is so rare that the TCP window becomes regularly fully extended, this formula doesn't apply.|$|E
50|$|Most QoS {{approaches}} tend {{to focus}} on only one QoS parameter (e.g., <b>packet</b> <b>loss,</b> end-to-end delay, and bandwidth). For example, while many of the QoS-related schemes are successful in reducing <b>packet</b> <b>loss</b> by adding redundancy in the packet, they do this at the expense of end-to-end delay. Because <b>packet</b> <b>loss</b> and end-to-end delay are inversely related, it may not be possible to find a path that simultaneously satisfies the delay, <b>packet</b> <b>loss,</b> and bandwidth constraints. Some proposed QoS routing algorithms do consider multiple metrics, but without considering cross-layer cooperation. Multipath routing is another type of QoS routing that has received much attention, since it can provide load balancing, fault tolerance, and higher aggregate bandwidth. Although this approach decreases <b>packet</b> <b>loss</b> and end-to-end delay, it is only efficient and reliable if a relationship can be found between the number of paths and QoS constraints.|$|E
50|$|Radio Link Protocol (RLP) is an {{automatic}} repeat request (ARQ) fragmentation protocol used over a wireless (typically cellular) air interface. Most wireless air interfaces are tuned to provide 1% <b>packet</b> <b>loss,</b> and most Vocoders are mutually tuned to sacrifice very little voice quality at 1% <b>packet</b> <b>loss.</b> However, 1% <b>packet</b> <b>loss</b> is intolerable to all variants of TCP, and so {{something must be}} done to improve reliability for voice networks carrying TCP/IP data.|$|E
40|$|The Transmission Control Protocol (TCP) was {{designed}} to provide reliable transport services in wired networks. In such networks, <b>packet</b> <b>losses</b> mainly occur due to congestion. Hence, TCP {{was designed}} to apply congestion avoidance techniques to cope with <b>packet</b> <b>losses.</b> Nowadays, TCP is also utilized in wireless networks where, besides congestion, numerous other reasons for <b>packet</b> <b>losses</b> exist. This results in reduced throughput and increased transmission round-trip time when {{the state of the}} wireless channel is bad. We propose a new network layer, that transparently sits below the transport layer and hides non congestion-imposed <b>packet</b> <b>losses</b> from TCP. The network coding in this new layer is based on the well-known class of Maximum Distance Separable (MDS) codes. Comment: Accepted for the 17 th International Conference on Telecommunications 2010 (ICT 2010), Doha, Qatar, April 4 - 7, 2010. 6 pages, 7 figure...|$|R
40|$|This paper {{presents}} a distributed event-based control approach {{to cope with}} communication delays and <b>packet</b> <b>losses</b> affecting a networked dynamical system consisting of N linear time-invariant coupled systems. Two communication protocols are proposed {{to deal with these}} communication effects. It is shown that both protocols preserve the system stability {{in the sense that the}} state of every subsystem converges to a small region around the origin if the delay and the number of <b>packet</b> <b>losses</b> are bounded. Analytical expressions for the delay bound and the maximum number of consecutive <b>packet</b> <b>losses</b> are derived. Simulations illustrate the results. QC 20130116 </p...|$|R
40|$|Transmission Control Protocol (TCP) {{is known}} to suffer from {{performance}} degradation in mobile wireless environments. This is because such environments are prone to <b>packet</b> <b>losses</b> due to high bit error rates and mobility induced disconnections. TCP interprets <b>packet</b> <b>losses</b> {{as an indication of}} congestion and inappropriately invokes congestion control mechanisms, leading to degraded performance...|$|R
5000|$|When <b>packet</b> <b>loss</b> {{occurs in}} the network, an {{additional}} limit is imposed on the connection. In the case of light to moderate <b>packet</b> <b>loss</b> when the TCP rate {{is limited by the}} congestion avoidance algorithm, the limit can be calculated according to the formula (Mathis, et al.): ...|$|E
50|$|SVOPC (Sinusoidal Voice Over Packet Coder) is a {{compression}} method for audio {{which is used}} by VOIP applications. It is a lossy speech compression codec designed specifically towards communication channels suffering from <b>packet</b> <b>loss.</b> It uses more bandwidth than best bandwidth-optimised codecs, but it is <b>packet</b> <b>loss</b> resistant instead.|$|E
50|$|The T.38 {{recommendation}} {{defines the}} use of both TCP and UDP to transport T.38 packets. Implementations tend to use UDP, due to TCP's requirement for acknowledgement packets and resulting retransmission during <b>packet</b> <b>loss,</b> which introduces delays. When using UDP, T.38 copes with <b>packet</b> <b>loss</b> by using redundant data packets.|$|E
30|$|Notice that, if the inter-IR tunnel had {{not been}} created, <b>packet</b> <b>losses</b> would take place during the inter-VHO {{execution}} until the BB was informed to switch the CN MPLS tunnel from the old IR to the new IR. On the other hand, the HO preparation mechanism described in this section allows harmful <b>packet</b> <b>losses</b> to be minimized.|$|R
40|$|This paper {{presents}} the unbiased H∞ filter design for stochastic systems with data <b>packet</b> <b>losses.</b> By constructing unbiased filter, {{the complexity and}} computational burden of the real-time filtering process are reduced greatly. Delay-dependent sufficient conditions for stochastic system with data <b>packet</b> <b>losses</b> are proposed in terms of linear matrix inequalities (LMIs). Numerical example demonstrates the proposed approaches are effective...|$|R
40|$|Linear Increase/Multiplicative Decrease (LIMD) has {{typically}} {{been the}} congestion control paradigm {{of choice in}} the Internet. However, a major drawback of LIMD is that it reacts identically (and aggressively) to all <b>packet</b> <b>losses,</b> irrespective of the cause of loss. In this paper, we try to augment the basic LIMD congestion control with additional mechanisms to predict the cause of <b>packet</b> <b>losses</b> and react accordingly. To this end, we present the LIMD/H algorithm, which has the following features: (a) LIMD/H uses the "history" of <b>packet</b> <b>losses</b> {{and the evolution of}} transmission rate for a connection in order to distinguish between congestion-induced and non-congestion-induced <b>packet</b> <b>losses.</b> (b) LIMD/H reacts gently to non-congestion-induced losses and aggressively to congestion-induced losses, thereby achieving high efficiency, fairness, as well as quick reaction to the onset of congestion. We present an initial performance evaluation of LIMD/H using simulations and analysis. I. INTRO [...] ...|$|R
5000|$|Comcast has {{implemented}} {{traffic shaping}} measures using Sandvine hardware which sends forged RST packets, disrupting the BitTorrent protocol. This has prevented some Comcast users from uploading, or [...] "seeding" [...] files they have downloaded via BitTorrent. Some Comcast users also may experience <b>packet</b> <b>loss</b> and latency, resulting in lag. This effect {{is most often}} noticed when dealing with time critical traffic in online gaming, and especially pronounced when such users host online games on ad-hoc networks (such as in Halo 3). This practice is becoming an increasingly common trend. The effects of <b>packet</b> <b>loss</b> and latency vary greatly depending on locale and {{the conditions of the}} local plant. Some Comcast customers may experience severe <b>packet</b> <b>loss,</b> while others may see no <b>packet</b> <b>loss.</b> The issues resulting from local variables affect all Internet Service Providers.|$|E
5000|$|<b>Packet</b> <b>loss</b> rate is {{normally}} low; retransmission is infrequent.|$|E
5000|$|NeoLoad emulates Network {{conditions}} (latency, <b>packet</b> <b>loss</b> and bandwidth).|$|E
30|$|The buffer-based {{congestion}} judgement is {{more accurate}} than the inference from <b>packet</b> <b>losses.</b>|$|R
40|$|Reliable {{transport}} protocols {{like the}} {{transmission control protocol}} (TCP) are tuned to perform well in traditional wireline networks where <b>packet</b> <b>losses</b> occur mostly because of congestion. However, networks with wireless and lossy links also suffer from significant <b>packet</b> <b>losses</b> due to random losses and handoffs. TCP responds to all the <b>packet</b> <b>losses</b> by invoking a congestion control algorithm and this results in degraded end-to-end performance in wireless and lossy links. In this paper, we suggest a strategy to {{determine the cause of}} packet drops in a wireless network running the TCP protocol. Our method is based on modification of explicit congestion notification (ECN) in TCP for wireless networks. © IEE...|$|R
40|$|International audienceThis paper {{deals with}} the {{co-design}} of a networked control system (NCS) and its diagnosis. The residual generation is shown {{to be affected by}} network induced delays and <b>packet</b> <b>losses</b> and must be modified to ensure data synchronism. A comparison is made between two ways of running the residual generation. The first one uses non synchronous data whereas the second one takes care of the synchronism. This comparison is realized through the simulation of a DC motor, its control and its diagnosis with Matlab/Simulink and True Time. Moreover, an additional residual related to the network <b>packet</b> <b>losses</b> is proposed. Finally a reconfiguration procedure is suggested to tolerate <b>packet</b> <b>losses...</b>|$|R
50|$|Error {{concealment}} is {{a technique}} used in signal processing that aims to minimize the deterioration of signals caused by missing data, called <b>packet</b> <b>loss.</b> A signal is a message sent from a transmitter to a receiver in multiple small packets. <b>Packet</b> <b>loss</b> occurs when these packets are misdirected, delayed, resequenced, or corrupted.|$|E
50|$|<b>Packet</b> <b>loss</b> {{can also}} {{be caused by a}} packet drop attack.|$|E
50|$|<b>Packet</b> <b>loss</b> is {{detected}} by application protocols such as TCP, {{but when a}} person such as a network administrator needs to detect and diagnose <b>packet</b> <b>loss,</b> they typically use a purpose-built tool. Many routers have status pages or logs, where the owner can find the number or percentage of packets dropped over a particular period.|$|E
40|$|Abstract. TCP {{performs}} {{reasonably well}} over the Internet where <b>packet</b> <b>losses</b> are mainly due to network congestion. However, TCP suffers significant throughput degradation over hybrid wireless/IP networks where <b>packet</b> <b>losses</b> are also due to transmission errors in wireless segments and during mobile host handovers. In this paper, the micro-scale behavior and packet-level performance of four popular TCP variants over wireless links are assessed, and a heuristic Segment-in-Flight Estimation algorithm for TCP senders is proposed and evaluated. Extensive simulations confirm that the enhanced TCP is more robust against <b>packet</b> <b>losses,</b> can achieve better end-to-end performance, and still keeps the fairness and compatibility with ordinary TCP variants...|$|R
30|$|The IS {{workload}} also {{suffers from}} high <b>packet</b> <b>losses,</b> {{as a consequence}} of transmissions pertaining to the N: 1 collective pattern, as evidenced by Fig. 5. For this workload, the increase in communication incurs a loss, albeit discrete, of broadcast-derived <b>packets.</b> <b>Packet</b> <b>losses</b> for the single-hop WiNoCs were smaller for both unicast and broadcast communication when compared to the multi-hop networks.|$|R
30|$|We obtain two conclusions, before {{proving that}} Assumption  1 {{includes}} random <b>packet</b> <b>losses</b> {{as a special}} case.|$|R
