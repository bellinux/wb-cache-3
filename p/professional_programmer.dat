30|251|Public
500|$|Jean Sammet, a {{short-range}} committee member, {{noted that}} [...] "little {{attempt was made}} to cater to the <b>professional</b> <b>programmer,</b> in fact people whose main interest is programming tend to be very unhappy with COBOL" [...] which she attributed to COBOL's verbose syntax.|$|E
50|$|Yu {{attended}} California State Polytechnic University, Pomona {{to study}} electrical engineering before beginning {{her career as}} a <b>professional</b> <b>programmer.</b>|$|E
50|$|The {{generated}} Java or JavaScript code can, {{in terms}} of efficiency and sophistication, be taken as {{the creation of a}} <b>professional</b> <b>programmer.</b>|$|E
5000|$|Wing Pro - a full-featured {{commercial}} version, for <b>professional</b> <b>programmers</b> ...|$|R
40|$|It is {{estimated}} that by 2005, there will be 55 million end-user programmers compared to 2. 75 million <b>professional</b> <b>programmers.</b> Even though end-user programs have the same reliability problems, software engineering research has largely ignored the end-user community. Because end users are different from <b>professional</b> <b>programmers</b> in motivation, background, and interests, the end-user community cannot be served by repacking tools and techniques developed for <b>professional</b> <b>programmers.</b> This article describes our work in developing software engineering devices for spreadsheet developers, {{one of the largest}} classes of end-user programmers. Software engineering research has focused on aiding programmers throughout the software development and maintenance process. However, this focus has been on <b>professional</b> <b>programmers</b> and has largely ignored the sizeable end-user programmer community. It is predicted that by 2005 in the United States alone there will be 55 million enduse...|$|R
5000|$|... #Caption: Open Cobalt's {{programming}} environment. A complete <b>professional</b> <b>programmer’s</b> language (Smalltalk/Squeak), IDE, {{and class}} library {{is present in}} every distributed, running participant’s copy.|$|R
50|$|A very {{high-level}} {{programming language}} (VHLL) is {{a programming language}} with {{a very high level}} of abstraction, used primarily as a <b>professional</b> <b>programmer</b> productivity tool.|$|E
5000|$|Kilobaud Microcomputing {{stated that}} [...] "If {{you intend to}} write {{programs}} {{to be used by}} other people, then you should read this book. If you expect to become a <b>professional</b> <b>programmer,</b> this book is mandatory reading".|$|E
5000|$|Jean Sammet, a {{short-range}} committee member, {{noted that}} [...] "little {{attempt was made}} to cater to the <b>professional</b> <b>programmer,</b> in fact people whose main interest is programming tend to be very unhappy with COBOL" [...] which she attributed to COBOL's verbose syntax.|$|E
50|$|November 1986 issue {{seems to}} be a letters page for <b>professional</b> <b>programmers</b> as Graham Blighe, Andrew and Philip Oliver write in to comment on recent ACU games reviews.|$|R
5000|$|It {{provides}} a complete <b>professional</b> <b>programmer's</b> language (Smalltalk/Squeak, IDE, and class library in every distributed, running participant's copy (with the programming environment itself being simultaneously shareable and extensible) ...|$|R
40|$|The {{phenomenon}} we call "programming " is {{not limited}} to regular <b>professional</b> <b>programmers.</b> Farthest away are end user programmers, who program just as {{a means to an end}} in their own professions. In between are people with very diverse backgrounds, general education, and programming knowledge. Like <b>professional</b> <b>programmers,</b> they write pro-grams for others as their major job activity. Yet they also share characteristics of end user programmers, such as a strong specialization in one application area. All these "informal programmers " need more study and support to help them maximize their contributions...|$|R
5000|$|One way to {{consider}} if a {{language is not}} a toy is {{to consider}} the question, [...] "Would a <b>professional</b> <b>programmer</b> with several years of experience seriously consider using the language {{as a means to}} provide a reasonable, cost effective solution for a customer's problem?" ...|$|E
5000|$|Development {{started in}} 2002, when Dan Verssen - {{creator of the}} {{original}} tabletop version of Down in Flames - met Brian Marrs, a <b>professional</b> <b>programmer</b> who created a self-made computer rendition of the game. Verssen thought it had [...] "commercial possibilities" [...] and in November 2002, together with Marrs started working on [...] "polishing" [...] the game.|$|E
50|$|The CDD IDE was {{completely}} new {{and based on}} the JPI IDE. It included many <b>professional</b> <b>programmer</b> quality tools: editor, project system, compiler, linker, visual debugger. Gone was the p-code of CPD. The JPI compiler for the Clarion language produced true machine code EXEs, LIBs and DLLs. Binaries could be compiled for Protected Mode allowing DOS programs to use extended memory breaking the 640KB barrier.|$|E
50|$|OnlineHPC {{was started}} at the Institute for Information Transmission Problems in 2012 as a project for the institute’s {{researchers}} whose work need access to computer clusters and who are not <b>professional</b> <b>programmers.</b>|$|R
5000|$|It {{provides}} a complete <b>professional</b> <b>programmer’s</b> language (Squeak Smalltalk), {{integrated development environment}} (IDE), and class library in every distributed, running participant’s copy; the programming development environment itself is simultaneously shareable and extensible ...|$|R
5000|$|Byte {{recommended}} SICP [...] "for <b>professional</b> <b>programmers</b> who {{are really}} interested in their profession". The magazine stated that the book {{was not easy to}} read, but that it would expose experienced programmers to both old and new topics.|$|R
50|$|Jonathan {{revealed}} in May 1998 that progress had slowed on the project, {{due to the}} lack of a <b>professional</b> <b>programmer</b> (Juri was unavailable to offer his full services to the project at this time). The project was suspended until they could find a suitable person, who they advertised for on the internet. Apparently they found an unnamed programmer. Since then, nothing has been heard of the Avara 2.0 project.|$|E
5000|$|Marc Fest (born 1966, in Münster, Germany) is a German-American {{communications}} <b>professional,</b> <b>programmer</b> and entrepreneur. He {{is notable}} as {{the creator of}} multiple web-based information management tools and a pioneer in this technology. He is a former journalist and self-taught programmer. His most recognized achievement is originating the concept known as [...] "metabrowsing" [...] through his creation of Quickbrowse.com in 1999. This is a Web-based subscription service that enables users to browse multiple web pages by combining them vertically into a single web page. This concept was an outgrowth of a tool which Fest had conceived {{as an aid to}} his journalistic research.|$|E
50|$|The film {{opens with}} Danila Bagrov (Sergei Bodrov Jr.) {{appearing}} {{on a television}} show with his two friends from the army. It is immediately known, that unlike the prequel's subplot, where Danila was an HQ clerk, he was {{is in fact a}} combat veteran from the First Chechen war (which immediately explains his non-amateur performance and skill in the first film). All three comrades now live in Moscow, where Ilya Setevoy (Kirill Pirogov) is a <b>professional</b> <b>programmer</b> who works for the State Historical Museum on Red Square whilst Konstantin (Kostya) Gromov (Alexander Dyachenko) works in the security department for the Nikolayevsky Bank. Danila himself reveals his ambition to enrol in medicine at the university.|$|E
50|$|ObjectARX is {{the most}} {{powerful}} of the various AutoCAD APIs, and the most difficult to master. The typical audience for the ObjectARX SDK includes <b>professional</b> <b>programmers</b> working either as commercial application developers or as in-house developers at companies using AutoCAD.|$|R
50|$|There are {{thousands}} of programming languages and new ones are created every year. Few languages ever become sufficiently popular that they are used {{by more than a}} few people, but <b>professional</b> <b>programmers</b> may use dozens of languages in a career.|$|R
5000|$|Referring to a {{team working}} on a {{computer}} programming project, Alan F. Blackwell once wrote: [...] "Many sub-goals can be deferred {{to the degree that}} they become what is known amongst <b>professional</b> <b>programmers</b> as an 'S.E.P.' [...] - [...] somebody else's problem." ...|$|R
40|$|This book is an {{excellent}} start for the <b>professional</b> <b>programmer</b> who wants to master C++ for use in an object-oriented environment. No knowledge of C is required. The author completes instruction in C++ {{in the first four}} chapters before moving on to a demonstration of its outstanding contributions to object-oriented methodology...|$|E
40|$|Keywords: POP-I. A. social {{organisation}} and work, POP-I. C. health records POP-II. A. end-users This paper reports {{a case study}} of a specific end-user programming context, in which an electronic patient record system was being customised by a healthcare professional. Our research involved making an unusual intervention, employing a <b>professional</b> <b>programmer</b> as a quasi-experimental participant, in order to explore and contrast the different ways that the same situation was conceived by an end-user programmer and by a <b>professional</b> <b>programmer.</b> We found a range of pragmatic strategies that were employed by the end-user, causing her to resist some conventional views of how programs and source code should be interpreted. Rather than different ‘cognitive styles’, we believe these differing mental models can be accounted for by the context of the practical work the two need to achieve, and the organisational contexts within which they work. We make some observations and recommendations about the design of tools for end-user programmers, extrapolating from our in-depth observation of one particular product. 1...|$|E
40|$|The Interactive Data Language (IDL) is used {{to analyze}} high {{resolution}} spectra from the IUE. Like other interactive languages, IDL is designed {{for use by the}} scientist rather than the <b>professional</b> <b>programmer,</b> allowing him to conceive of his data as simple entities and to operate on this data with minimal difficulty. A package of programs created to analyze interstellar absorption lines is presented {{as an example of the}} graphical power of IDL...|$|E
50|$|Conversely, {{the ease}} and {{simplicity}} of dBase presented a challenge as its users became more expert and as <b>professional</b> <b>programmers</b> {{were drawn to}} it. More complex and more critical applications demanded professional programming features for greater reliability and performance, as well as greater developer productivity.|$|R
40|$|In this guide, Zandstra {{demonstrates}} how to meld {{the power of}} PHP with the sound enterprise development techniques embraced by <b>professional</b> <b>programmers.</b> Going well beyond the basics of object-oriented development, he discusses working with static methods and properties, abstract classes, interfaces, design patterns, exception handling, and more...|$|R
50|$|The Problem Solving Environment (PSE) {{released}} {{a few years}} after the release of Fortran and Algol 60, people thought that this system with high-level language would cause elimination of <b>professional</b> <b>programmers.</b> However, surprisingly, PSE has been accepted and even though scientists used it to write programs.|$|R
40|$|International audienceOne {{of the two}} panels {{held this}} year at ATAL was to address the topic of agent-oriented languages, and {{particularly}} their relationship with other (i. e. traditional) programming paradigms. What triggered this panel is the observation that while {{there have been several}} proposals for agent-oriented languages the <b>professional</b> <b>programmer</b> has not really picked these up, and continues to employ familiar and more traditional paradigms and languages such as Java, C++, relational and object-oriented databases, and CORBA. So it seemed a good idea to reflect a bit on the position of agent-oriented programming as opposed to well-established paradigms such as object-oriented programming, distributed programming and logic programming...|$|E
40|$|Motion picture films {{generated}} by computers {{have now been}} produced {{by a number of}} groups across the country. We wish to report here on the design and implementation of the REL Animated Film Language (AFL), designed primarily for use by artists interested in the aesthetics of abstract motion graphics. The language is simple enough to be used by the artist directly, rather than by a <b>professional</b> <b>programmer</b> acting for the artist. It provides convenient means of expressing spatial and temporal changes in the shape and location of the objects with which the artist constructs his compositions. The artist uses the language to express the inter-object relationships which embody the aesthetic content of the work...|$|E
40|$|In my PhD thesis [34] I {{described}} novel ways {{to improve}} the automation in current interactive theorem provers. I also addressed the application of theorem provers to other areas of research, in particular, to the formalisation and mechanisation of proofs about distributed algorithms. I proved several key properties of algorithms that, for example, allow streaming of television over the internet. I give more details below. As an undergraduate, I studied mathematics, and later gained a distinction in the Computer Science Diploma. After several years as a <b>professional</b> <b>programmer,</b> I returned to academia and completed a PhD at the Laboratory for the Foundations of Computer Science, Edinburgh, under the supervision of Dr Pau...|$|E
40|$|In its {{ultimate}} form, declarative programming provides {{solutions to problems}} using only a statement of the problem as the program. Historically this level of abstraction {{has been associated with}} specialized programming languages, but it is now routinely used by both students and <b>professional</b> <b>programmers</b> in a variety of contexts, programming languages, and courses...|$|R
40|$|Spreadsheets {{are widely}} used by non-professional programmers, the {{so-called}} end-users, to perform simple calculations, but also by <b>professional</b> <b>programmers</b> in large software organizations, where spreadsheets are used to collect information from different systems, to transform data coming from one system to the format required by another, or to present data in human-friendly form...|$|R
40|$|Graduation date: 1992 Guidelines {{for using}} style to improve {{computer}} program comprehension {{have often been}} proposed without empirical testing. This thesis reports {{on the results of}} three controlled experiments that investigated ways program style may be used to aid comprehension of source code listings. Experiments 1 and 2 were conducted using advanced computer science students as subjects and short Pascal programs. Results showed that student programmers used meaningful identifier names as important sources of information during comprehension of short programs. A review of the literature showed the need for the thesis' proposed methodology for designing controlled experiments on program comprehension that produce results which generalize well to situations involving <b>professional</b> <b>programmers</b> working on real world tasks. This methodology was used to design Experiment 3. Text comprehension researchers have investigated the use of signaling, or the placement of non-content information, in a text in order to emphasize certain ideas and/or clarify the organization. Experiment 3 investigated the role of signaling in another domain, that of computer program source code listings. The experiment had <b>professional</b> <b>programmers</b> study a 913 -line C program. Three types of signals were investigated: preview statements, headings, and typographic cueing. The major results were (a) meaningful module names served as headings in the source code listing and helped <b>professional</b> <b>programmers</b> understand and locate information in the program; (b) header comments, when written as preview statements, helped <b>professional</b> <b>programmers</b> understand and locate information in the program; (c) typographic cueing, designed to provide emphasis and segmentation cues, helped programmers understand the program; and (d) the effects of meaningful names, header comments, and typographic cueing were additive. No significant interactions of effects were observed. Based on these results, guidelines are proposed for ways programmers may use comments and module names in source code to act as signals that aid future readers. In addition, guidelines are suggested for adding typographic signaling to provide emphasis to the comments and names...|$|R
