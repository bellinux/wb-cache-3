12|148|Public
5000|$|<b>Package</b> <b>Build</b> - The {{process of}} {{building}} and deploying object changes ...|$|E
50|$|Completed media <b>package</b> (<b>build,</b> {{service or}} application) is lodged {{back in the}} DML as {{authorised}} media ready for deployment.|$|E
50|$|There are {{a number}} of third party {{applications}} that add functionality and programability to the JDE Scheduler. They include Cisco Tidal Enterprise Scheduler which is a JDE client-based product and Appworx, a third party server-based scheduler in which scripting and work-flow product have been customized for JDE support addressing adding to the vanilla scheduler that comes with JDE. AutoDeploy, a third party bolt on, fully automates the <b>package</b> <b>build</b> and deploy process for JD Edwards EnterpriseOne reducing the complexity of pre project, in project and post project code base maintenance.|$|E
5000|$|Building and {{deploying}} {{changes to}} the business applications called <b>package</b> <b>builds</b> ...|$|R
5000|$|Procter & Gamble {{have claimed}} the <b>package</b> <b>builds</b> {{critical}} thinking skills ...|$|R
50|$|The Conary toolchain {{includes}} rmake, a build server for conary <b>packages,</b> which <b>builds</b> <b>packages</b> inside chroot environments containing {{only the}} <b>package's</b> explicitly listed <b>build</b> requirements {{and some other}} fundamental packages. This is very useful for packagers, because it means that <b>package</b> <b>builds</b> can be done inside a reproducible environment, and packagers cannot accidentally introduce dependencies on peculiarities of their machine's environment (such as custom configuration files, or undocumented extra packages).|$|R
5000|$|RedSleeve aims to {{maintain}} equal versioning with the upstream distribution, {{both in terms}} of distribution release numbering and the individual package release numbering. The only exception is with the packages that had to be modified from the upstream release. This is only done in order to either remove upstream branding as required by the upstream distributions terms and conditions, or in order to apply additional patches required to make the <b>package</b> <b>build</b> and work on the ARM architecture which at the time of writing the upstream distribution does not support. In such cases, [...]0 is appended to the package version after the distribution tag.|$|E
40|$|Winding {{movement}} of twisting machine {{is closely related}} to the <b>package</b> <b>build,</b> package density and yarn quality. The requirements are that the <b>package</b> <b>build</b> is good shaped and the winding tension is proper technically. Namely the angle of winding is fine and there is no overlapping and convex, hard edge on the package. The winding density is same and reasonable on the whole <b>package</b> <b>build.</b> And the fluctuation of winding tension is small. It is becoming development trend that driving of multiple-motors is used on twisting machine. There are many parameters to be controlled such as degree of twist, direction of twist, winding angle and spindle speed and so on. Therefore it is essential to set up reasonable mathematical model of yarn for winding movement...|$|E
40|$|An {{algorithm}} for automatic parallel {{generation of}} three-dimensional unstructured computational meshes based on geometrical domain decomposition is proposed in this paper. Software <b>package</b> <b>build</b> upon proposed algorithm is described. Several practical examples of mesh generation on multiprocessor computational systems are given. It is shown that developed parallel algorithm {{enables us to}} reduce mesh generation time significantly (dozens of times). Moreover, it easily produces meshes with number of elements of order 5 · 107, construction of those on a single CPU is problematic. Questions of time consumption, efficiency of computations and quality of generated meshes are also considered...|$|E
50|$|It lists (among others) {{such things}} as the package name, maintainer, target {{architectures}} (for binary <b>packages),</b> <b>build</b> dependencies (<b>packages</b> that must be installed for the <b>package</b> to successfully <b>build)</b> and dependencies (<b>packages</b> that must be installed for the package to function properly when installed).|$|R
5000|$|To {{verify that}} a <b>package</b> <b>builds</b> on any system, and to exclude any {{external}} factors, tools to create isolated build environments are used. These are [...] (Personal Builder) and [...]|$|R
40|$|Resolution) for {{analytical}} chemical data, {{in particular}} hyphenated data {{where the first}} direction is a retention time axis, and the second a spectral axis. <b>Package</b> <b>builds</b> on the basic als function from the ALS package and adds functionality for high-throughput analysis, including definition of time windows, clustering of profiles, retention time correction, etcetera...|$|R
40|$|There {{are many}} tools to support {{continuous}} integration (the process of automatically and continuously building a project from a version management repository). However, {{they do not}} have good support for variability in the build environment: dependencies such as compilers, libraries or testing tools must typically be installed manually on all machines on which automated builds are performed. The Nix package manager solves this problem: it has a purely functional language for describing <b>package</b> <b>build</b> actions and their dependencies, allowing the build environment for projects to be produced automatically and deterministically. We have used Nix to build a continuous integration tool, the Nix build farm, that is in use to continuously build and release a large set of projects. 1...|$|E
40|$|International audienceGNU Guix is a “functional” {{package manager}} that builds upon earlier work on Nix. Guix {{implements}} high-level abstractions such as packages and operating system services as domain-specic languages (DSLs) embedded in Scheme. It also implements build actions and operating system orchestration in Scheme. This {{leads to a}} multi-tier programming environment where embedded code snippets are staged for eventual execution. This paper presents G-expressions or “gexps”, the staging mechanism we devised for Guix. We explain our journey from traditional Lisp S-expressions to G-expressions, which augment the former with contextual information and ensure hygienic code staging. We discuss the implementation of gexps and report on our experience using them {{in a variety of}} operating system use cases—from <b>package</b> <b>build</b> processes to system services. Gexps provide a novel way to cover many aspects of OS configuration in a single, multi-tier language, while facilitating code reuse and code sharing...|$|E
40|$|International audienceIn this paper, we {{consider}} the problem of schedul- ing {{a special kind of}} mixed data-parallel applications arising in the context of continuous integration. Continuous integration (CI) is a software engineering technique, which consists in re- building and testing interdependent software components as soon as developers modify them. The CI tool is able to provide quick feedback to the developers, which allows them to fix the bug soon after it has been introduced. The CI process can be described as a DAG where nodes represent <b>package</b> <b>build</b> tasks, and edges represent dependencies among these packages; build tasks themselves can in turn be run in parallel. Thus, CI {{can be viewed as a}} mixed data-parallel application. A crucial point for a successful CI process is its ability to provide quick feedback. Thus, makespan minimization is the main goal. Our contribution is twofold. First we provide and analyze a large dataset corresponding to a build DAG. Second, we compare the performance of several scheduling heuristics on this dataset...|$|E
50|$|For the 2017 model year, the 1LE {{performance}} package {{returns to}} the Camaro. The <b>package</b> <b>builds</b> off {{the success of the}} previous-generation 1LE, offering increased handling and track performance. In response to customer demand, Chevrolet offers two distinct 1LE packages, for both V6 and V8 models, each visually distinguished with a satin black hood, specific wheels and more.|$|R
50|$|PhyloNet, A java based {{software}} <b>package</b> that <b>build</b> phylogenetic networks taking ILS, HGT etc. into consideration.|$|R
5000|$|Installation is {{relatively}} easy and {{can be done in}} two ways: from <b>packages</b> or <b>build</b> from source on the following supported platforms: ...|$|R
40|$|GNU Guix is a " {{functional}} " {{package manager}} that builds upon earlier work on Nix. Guix implements high-level abstractions such as packages and operating system services as domain-specic languages (DSLs) embedded in Scheme. It also implements build actions and operating system orchestration in Scheme. This {{leads to a}} multi-tier programming environment where embedded code snippets are staged for eventual execution. This paper presents G-expressions or " gexps ", the staging mechanism we devised for Guix. We explain our journey from traditional Lisp S-expressions to G-expressions, which augment the former with contextual information and ensure hygienic code staging. We discuss the implementation of gexps and report on our experience using them {{in a variety of}} operating system use cases-from <b>package</b> <b>build</b> processes to system services. Gexps provide a novel way to cover many aspects of OS connguration in a single, multi-tier language, while facilitating code reuse and code sharing. Comment: 16 th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences (GPCE' 17), Oct 2017, Vancouver, Canad...|$|E
40|$|The Mobile Asteroid Surface Scout (MASCOT) {{is a small}} landing <b>package</b> <b>build</b> by the German Aerospace Center (DLR) {{jointly with}} the French Space Agency (CNES). MASCOT will fly onboard the Japanese space probe Hayabusa-II, built by the Japan Aerospace Exploration Agency (JAXA) and is {{scheduled}} to be launched in late 2014 on a 5 -year sample return mission to the Near-Earth Asteroid 1999 JU 3. The lander is equipped with four science instruments which will take detailed close-up pictures and make a variety of in-situ measurements. MASCOT has a cubic shape roughly 29 cm x 27, 5 cm x 20 cm and weighs about 10 kg. An internal mechanism with an eccentric tappet can be used to reorient MASCOT if needed and relocate to a different site to increase its investigation area. After the arrival and a characterization of the asteroid, MASCOT will be dropped from the Hayabusa-II mothership and will land passively on the asteroid surface. Before starting science measurements MASCOT must lie on the correct side. The attitude determination system consists of 2 types of sensors: solar cell based sun sensors on each side of MASCOT as well as 5 optical proximity sensors (OPS). The latter consists of an LED and a photodiode which can detect the reflected LED light when MASCOT is in proximity to the surface. A histogram filter is used for attitude determination and multi sensor data fusion. It is a bayesian filter used to estimate states which can be divided in a finite number of possible values. This is useful for MASCOT since all that is needed is an estimation of the side on which it is lying. This paper focuses on the attitude determination system of MASCOT. It describes the attitude determination sensors and the details of the filter algorithm. It also presents simulation results for system verification, as well as planned Monte-Carlo simulation and Hardware-in-the-Loop tests...|$|E
50|$|Until pacman version 4.0.0 Arch Linux's {{package manager}} lacked support for signed packages. Packages and {{metadata}} were not verified for authenticity by pacman during the download-install process. Without package authentication checking, tampered-with or malicious repository mirrors can compromise {{the integrity of}} a system. Pacman 4 allowed verification of the package database and packages, but it was disabled by default. In November 2011 package signing became mandatory for new <b>package</b> <b>builds,</b> and as of 21 March 2012 every official package is signed.|$|R
5000|$|<b>Build</b> <b>package</b> {{represents}} the engineering {{view of the}} software system ...|$|R
50|$|Tellabs Optical LAN {{solution}} {{is designed to}} improvex LAN availability uptime, increases operational efficiencies and network security. Tellabs offers multiple packages; Advanced Availability Software <b>Package</b> <b>builds</b> LANs that minimize annual network downtime while lowering costs, reducing human error, and improving security, Tellabs Advanced Operational Software Package improves IT efficiencies by increasing the speed of LAN configurations, monitoring, troubleshooting and MACs while once again reducing human error and network security risks, and Tellabs Advanced Security Software Package enhances physical LAN defensibility, enabling consistent protection policies that are centrally managed while continuing to reduce human error and increasing network stability.|$|R
50|$|On March 11, 2015, Radio Centro won {{one of two}} {{concession}} <b>packages</b> to <b>build</b> {{and operate}} a national television network. However, Radio Centro ended up not paying the 3 billion pesos to secure the concession.|$|R
5000|$|FuseSoC is an {{open source}} <b>package</b> manager and <b>build</b> system for HDL designs ...|$|R
40|$|Description cosmiq is a {{tool for}} the {{preprocessing}} of liquid- or gas-chromatography mass spectrometry (LCMS/GCMS) data {{with a focus on}} metabolomics or lipidomics applications. To improve the detection of low abundant signals, cosmiq generates master maps of the mZ/RT space from all acquired runs before a peak detection algorithm is applied. The result is a more robust identification and quantification of low-intensity MS signals compared to conventional approaches where peak picking is performed in each LCMS/GCMS file separately. The cosmiq <b>package</b> <b>builds</b> on the xcmsSet object structure and can be therefore integrated well with the package xcms as an alternative preprocessing step. License GPL-...|$|R
50|$|Dyson {{is built}} from scratch {{to be as}} similar to Debian as possible, i.e. most of Debian <b>{{packages}}</b> should <b>build</b> on Dyson without changes, and architecture-independent packages (arch all in Debian terms) should be installable without modification.|$|R
5000|$|Deployment and {{operation}} of the D-Grid infrastructure: Work <b>package</b> 2 <b>builds</b> up a Core-D-Grid. It {{was used as a}} prototype to test the operational functionality of the system. This work package also deals with monitoring, accounting and billing.|$|R
50|$|The {{development}} environment included support for C, C++ and Fortran. Threading was supported using the Pthreads model.Additional languages {{could be obtained}} (Python, Ruby, Tcl, etc.). Unix-based software <b>packaging</b> and <b>build</b> tools were available for installing or creating pre-build software packages.|$|R
50|$|TclOO was {{not only}} added to build a strong object {{oriented}} system, but also to enable extension <b>packages</b> to <b>build</b> object oriented abstractions {{using it as a}} foundation. After the release of TclOO incr Tcl was updated to use TclOO as its foundation.|$|R
40|$|Microarray {{technology}} {{has become an}} integral part of biomedical research and increasing amounts of datasets become available through public repositories. However, re-use of these datasets is severely hindered by unstructured, missing or incorrect biological samples information; as well as the wide variety of preprocessing methods in use. The inSilicoDb R/Bioconductor package is a command-line front-end to the InSilico DB, a web-based database currently containing 86 104 expert-curated human Affymetrix expression profiles compiled from 1937 GEO repository series. The use of this <b>package</b> <b>builds</b> on the Bioconductor project's focus on reproducibility by enabling a clear workflow in which not only analysis, but also the retrieval of verified data is supported. © The Author 2011. Published by Oxford University Press. All rights reserved. SCOPUS: ar. jinfo:eu-repo/semantics/publishe...|$|R
50|$|BuildAMation {{provides}} a command line utility called bam. This executable should be invoked in any <b>package</b> directory to <b>build</b> that <b>package.</b>|$|R
5000|$|<b>Build</b> <b>packaging</b> {{uses the}} GNU Build System. Standard tests with [...] use Autoconf, ANSI85 testsuite run by [...] use Perl scripts.|$|R
5000|$|Users {{must have}} GTK+version greater than 1.2.0 {{installed}} and {{also need to}} gtk-devel rpms, or <b>packages</b> installed to <b>build</b> from source.|$|R
40|$|The data {{structures}} and algorithms in this package work on align-gaps which {{are found in}} alignments of RNA-seq data. The analysis starts by reading BAMfiles [2], so this package assumes that the sequenced RNA is already aligned by external alignment software (e. g. tophat [3]). This <b>package</b> technically <b>build...</b>|$|R
50|$|Their {{independent}} developer had vested time decoding and decrypting {{the original}} <b>package</b> to <b>build</b> a legal case. When DataCorp {{realized they were}} in an untenable position, Lundin proposed building decryption tools to reconstruct the packages. Within months, he had re-engineered the package and begun development of new versions.|$|R
