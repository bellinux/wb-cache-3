0|268|Public
40|$|The massive size of {{the data}} in large graph {{processing}} requires distributed processing. However, conventional frameworks for distributed graph processing, such as <b>Pregel,</b> use programming models that are well-suited for scalability but inconvenient for programming graph algorithms. In this paper, we use Green-Marl, a Domain-Specific Language for graph analysis, to describe graph algorithms intuitively and extend its compiler to generate equivalent <b>Pregel</b> programs. Using the semantic information exposed by Green-Marl, the compiler applies {{the same kinds of}} transformation rules that programmers apply when manually implementing graph algorithms with <b>Pregel.</b> Our experiments show that the <b>Pregel</b> programs generated by Green-Marl compiler perform similarly to native <b>Pregel</b> implementations of the same algorithms. The compiler is even able to generate a <b>Pregel</b> implementation of a complicated graph algorithm whose native <b>Pregel</b> implementation is very challening...|$|R
40|$|Large-scale graph processing, {{with its}} massive data sets, {{requires}} distributed processing. However, conventional frameworks for dis-tributed graph processing, such as <b>Pregel,</b> use non-traditional pro-gramming models that are well-suited for parallelism and scalabil-ity but inconvenient for implementing non-trivial graph algorithms. In this paper, we use Green-Marl, a Domain-Specific Language for graph analysis, to intuitively describe graph algorithms and extend its compiler to generate equivalent <b>Pregel</b> implementations. Us-ing the semantic information captured by Green-Marl, the com-piler applies {{a set of}} transformation rules that convert imperative graph algorithms into <b>Pregel’s</b> programming model. Our experi-ments show that the <b>Pregel</b> programs generated by the Green-Marl compiler perform similarly to manually coded <b>Pregel</b> implementa-tions of the same algorithms. The compiler is even able to gener-ate a <b>Pregel</b> implementation of a complicated graph algorithm for which a manual <b>Pregel</b> implementation is very challenging...|$|R
50|$|In March 1945 the Canadian Foreign Exchange Control Board began formal {{hearings}} into <b>Pregel's</b> financial dealings. The {{case was}} {{settled out of}} court but <b>Pregel</b> and the other defendants paid over $1million in cash and other assets to settle. Furthermore, <b>Pregel</b> agreed to terminate his agency agreement between Eldorado and the Canadian Radium & Uranium Corp.|$|R
5000|$|Medieval {{variations}} of Kneiphof included Knipaw, Knipab, and Knypabe. The name was of Old Prussian origin, {{referring to a}} swampy land or area flushed by water; the island was bounded to the north by the [...] Neue <b>Pregel</b> and to the south by the Alte <b>Pregel</b> (or Natangische <b>Pregel),</b> branches of the <b>Pregel</b> River. At {{the start of the}} 14th century the island was known in German as Vogtswerder (Vogt's ait), because it was used by a vogt of the Teutonic Knights. The name Pregelmünde (mouth of the <b>Pregel)</b> was encouraged in 1333, but the German townspeople instead used the Prussian name used in the 1327 charter. A town seal from 1383 and a 15th-century signet name the town as nova civitas, or new town, but this designation was not used in documents.|$|R
50|$|North of Mühlenhof was the <b>Pregel</b> River and Lomse Island, while Haberberg {{was to the}} northwest. The stadium Sportplatz am Friedländer Tor {{was located}} to the southwest, {{followed}} by Rosenau to the south. Farther east along the <b>Pregel</b> was the estate Jerusalem.|$|R
5000|$|Alexandra <b>Pregel</b> (née Avksentiev; Александра Николаевна Прегель, Aleksandra Nikolayevna <b>Pregel)</b> (15 December 1907 - 28 May 1984, New York City) was a Russian artist. She {{was born}} in Helsinki, Finland, where her parents lived in {{political}} exile from the Czarist régime. Her father was Socialist poltitical figure Nikolai Avksentiev ...|$|R
30|$|<b>Pregel</b> [14] is {{a concept}} similar to MapReduce. The {{difference}} is that it provides a natural API for distributed programming framework aimed at graph algorithms. It also supports iterative computations over the graph. This is an attribute which MapReduce lacks. In <b>Pregel</b> computations, supersteps, a sequence of iterations is adopted. With supersteps, a vertex can receive information from the previous iteration and also send information to other vertices that will be received at a next superstep. However, <b>Pregel</b> focuses on graph mining algorithms, while {{we are interested in}} more general applications.|$|R
50|$|After {{his arrival}} in the USA he established, with his brother Alexander, the Canadian Radium and Uranium Corp of New York and became its {{president}} to sell the newly discovered rich ores in northern Canada, and later also in Colorado. George B. Pegram and his associates at Columbia University, who {{did some of the}} initial work on the Manhattan Project, sought <b>Pregel's</b> assistance because they did not have sufficient money to buy the uranium. <b>Pregel</b> gave them the first uranium used in the experiments. <b>Pregel's</b> company also built radioactive neutron sources and radioactive luminescent signs.|$|R
5000|$|Auf großer Fahrt. Wanderungen zwischen <b>Pregel</b> und Beskiden, Freiburg 1966 ...|$|R
50|$|The {{district}} was {{located on the}} western end of Lomse Island in the <b>Pregel</b> River; the large island is now known as October Island (Октябрьский остров) in Kaliningrad. The Neuer <b>Pregel,</b> the northern branch of the river, separated Lomse from Kneiphof to the west, Altstadt to the northwest, and Löbenicht to the north.|$|R
5000|$|... #Caption: View {{from the}} <b>Pregel,</b> {{including}} the church, gymnasium, and Propsteikirche ...|$|R
5000|$|... #Caption: View of Sackheim, the Propsteikirche, and the <b>Pregel</b> from Löbenicht ...|$|R
5000|$|New York Academy of Sciences Boris <b>Pregel</b> Award in Chemical Physics ...|$|R
5000|$|M. Biolik, Zuflüsse zur Ostsee zwischen unterer Weichsel und <b>Pregel,</b> Stuttgart, 1989.|$|R
5000|$|On 12 March 1811, she and <b>Prégel</b> {{captured}} the British sloop [...]|$|R
5000|$|M. Biolik, Die Namen der fließenden Gewässer im Flussgebiet des <b>Pregel,</b> Stuttgart, 1996.|$|R
5000|$|M. Biolik, Die Namen der stehenden Gewässer im Zuflussgebiet des <b>Pregel,</b> Stuttgart, 1993.|$|R
50|$|The Teutonic Order used Königsberg {{to fortify}} their conquests in Samland {{and as a}} base for campaigns against pagan Lithuania. Because the initial northwestern {{settlement}} was destroyed by the Prussians during the rebellion, rebuilding occurred in the southern valley between the castle hill and the <b>Pregel</b> River. This new settlement, Altstadt, received Culm rights in 1286. Löbenicht, a new town directly east of Altstadt between the <b>Pregel</b> and the Schlossteich, received its own rights in 1300. Medieval Königsberg's third town was Kneiphof, which received town rights in 1327 and was located on an island of the same name in the <b>Pregel</b> south of Altstadt.|$|R
5000|$|... #Caption: View {{from the}} <b>Pregel</b> of Löbenicht, with the gymasium, Löbenicht Church, and Propsteikirche ...|$|R
40|$|<b>Pregel</b> is {{a popular}} {{distributed}} computing model for dealing with large-scale graphs. However, it can be tricky to implement graph algorithms correctly and efficiently in <b>Pregel's</b> vertex-centric model, especially when the algorithm has multiple computation stages, complicated data dependencies, or even communication over dynamic internal data structures. Some domain-specific languages (DSLs) have been proposed to provide more intuitive ways to implement graph algorithms, but {{due to the lack}} of support for remote access [...] - reading or writing attributes of other vertices through references [...] - they cannot handle the above mentioned dynamic communication, causing a class of <b>Pregel</b> algorithms with fast convergence impossible to implement. To address this problem, we design and implement Palgol, a more declarative and powerful DSL which supports remote access. In particular, programmers can use a more declarative syntax called chain access to naturally specify dynamic communication as if directly reading data on arbitrary remote vertices. By analyzing the logic patterns of chain access, we provide a novel algorithm for compiling Palgol programs to efficient <b>Pregel</b> code. We demonstrate the power of Palgol by using it to implement several practical <b>Pregel</b> algorithms, and the evaluation result shows that the efficiency of Palgol is comparable with that of hand-written code. Comment: 12 pages, 10 figures, extended version of APLAS 2017 pape...|$|R
5000|$|... #Caption: Friedrichsburg is {{situated}} in the western <b>Pregel</b> in this map of Königsberg from 1905.|$|R
50|$|He {{served as}} {{president}} and board chairman of the New York Academy of Sciences, as presidentof the French University (Ecole Libre) in New York, as trustee of the New School for Social Research and as vice-president of the American Geographical Society. He received several honorary degrees and foreign decorations. <b>Pregel</b> founded the Boris <b>Pregel</b> Awards for science, awarded by the New York Academy of Sciences.|$|R
40|$|Two type of {{nitrogen}} containing <b>pregelled</b> starch derivatives having amide groups (CONH 2) {{were used in}} heavy metal ions removal from its solutions. These <b>pregelled</b> starch derivatives were carbamated <b>pregelled</b> starch (CPS) and poly (methacrylamide) -pregelled starch graft copolymer (PMamPSGC). Different factors affecting adsorption of metal ions onto these substrates such as metal ion concentration, pH, treatment time and temperature as well as type of starch derivatives were studied. Results obtained reflect the following findings: (a) the adsorption values of both nitrogen containing starch derivatives in question increase by increasing the metal ion concentration up to 50 mmol L - 1 then levels off, (b) poly (methacrylamide) -pregelled starch graft copolymer was selective adsorbent for Hg 2 + at pH 0. 5 - 1, (c) The adsorption values on these <b>pregelled</b> starch derivatives at different metal ions follow the order: Hg 2 + > Cu 2 + > Zn 2 + > Pb 2 +, (d) The adsorption efficiency % of metal ions in case of poly (methacrylamide) -pregelled starch graft copolymer is higher than that in case of carbamated <b>pregelled</b> starch irrespective of the metal ion used, (e) The adsorption values is higher at 30 �C then decreases by raising the temperature to 50 and 70 �C and (f) The adsorption values increase by increasing the treatment time up to 5 h then levels off...|$|R
5000|$|... #Caption: View of Löbenicht {{from the}} <b>Pregel,</b> {{including}} its church and gymnasium, {{as well as}} the nearby Propsteikirche ...|$|R
5000|$|Documented in 1339, the new Lastadie docks {{were built}} to the {{southwest}} outside of Altstadt's original walls. This new warehouse district was eventually bounded by the roads Neuer Graben and Reifschlägerstraße {{to the west and}} north, respectively, and the <b>Pregel</b> to the east and south. In 1804 Ludwig von Baczko described Lastadie as being bounded by Altstadt, Laak, the <b>Pregel,</b> the 17th century city walls, and Holländer Baum.|$|R
40|$|<b>Pregel</b> [23] was {{recently}} introduced as a scalable graph mining {{system that can}} provide significant performance improvements over traditional MapReduce implementations. Existing implementations focus primarily on graph partitioning as a preprocessing step to balance computation across compute nodes. In this paper, we examine the runtime characteristics of a <b>Pregel</b> system. We show that graph partitioning alone is insufficient for minimizing end-to-end computation. Especially where data is very large or the runtime behavior of the algorithm is unknown, an adaptive approach is needed. To this end, we introduce Mizan, a <b>Pregel</b> system that achieves efficient load balancing to better adapt to changes in computing needs. Unlike known implementations of <b>Pregel,</b> Mizan does not assume any a priori knowledge {{of the structure of}} the graph or behavior of the algorithm. Instead, it monitors the runtime characteristics of the system. Mizan then performs efficient fine-grained vertex migration to balance computation and communication. We have fully implemented Mizan; using extensive evaluation we show that - especially for highly-dynamic workloads - Mizan provides up to 84 % improvement over techniques leveraging static graph pre-partitioning. © 2013 ACM...|$|R
25|$|The Teutonic Order used Königsberg {{to fortify}} their conquests in Samland {{and as a}} base for campaigns against pagan Lithuania. Under siege during the Prussian uprisings in 1262–63, Königsberg Castle was {{relieved}} by the Master of the Livonian Order. Because the initial northwestern settlement was destroyed by the Prussians during the rebellion, rebuilding occurred in the southern valley between the castle hill and the <b>Pregel</b> River. This new settlement, Altstadt, received Culm rights in 1286. Löbenicht, a new town directly east of Altstadt between the <b>Pregel</b> and the Schlossteich, received its own rights in 1300. Medieval Königsberg's third town was Kneiphof, which received town rights in 1327 and was located on an island of the same name in the <b>Pregel</b> south of Altstadt.|$|R
25|$|Duke, Donald. Fred Harvey, civilizer of the American Southwest (<b>Pregel</b> Press, 1995); The {{passenger}} trains stopped for meals at Fred Harvey restaurants.|$|R
5000|$|... #Caption: Map of Königsberg in Euler's time {{showing the}} actual {{layout of the}} seven bridges, {{highlighting}} the river <b>Pregel</b> and the bridges ...|$|R
40|$|Abstract Graphs are {{flexible}} in modelling {{many kinds of}} data from tradi-tional datasets to social networks or semi-structured datasets. To process large graphs, many systems have been proposed in which <b>Pregel</b> programming model is popular thanks to its scalability. Although <b>Pregel</b> is simple to understand and use, it is of low-level in programming and requires developers to write programs {{that are hard to}} maintain and need to be carefully optimized. On the other hand, structural recursion is a high-level tool to systematically con-struct efficient parallel programs on lists, arrays and trees, but it is still not scalable for graphs. In this paper, we propose an efficient parallel evaluation to the structural recursion on graphs, which is suitable for <b>Pregel.</b> As a result, we design and implement a high-level parallel programming framework where a domain-specific language (DSL) is provided to ease the programing burden for users, and programs written in our DSL are automatically compiled into <b>Pregel</b> programs that are scalable for large graphs. Experimental results show that our framework outperforms the original evaluation of structural recursion and achieves good scalability and speedup for real datasets...|$|R
40|$|Graphs in {{real life}} {{applications}} are often huge, such as the Web graph and various social networks. These massive graphs are often stored and processed in distributed sites. In this paper, we study graph algorithms that adopt Google’s <b>Pregel,</b> an iterative vertex-centric framework for graph processing in the Cloud. We first iden-tify a set of desirable properties of an efficient <b>Pregel</b> algorithm, such as linear space, communication and computation cost per it-eration, and logarithmic number of iterations. We define such an algorithm as a practical <b>Pregel</b> algorithm (PPA). We then propose PPAs for computing connected components (CCs), biconnected com-ponents (BCCs) and strongly connected components (SCCs). The PPAs for computing BCCs and SCCs use the PPAs of many funda-mental graph problems as building blocks, which are of interest by themselves. Extensive experiments over large real graphs verified the efficiency of our algorithms. 1...|$|R
40|$|The graph {{partitioning}} strategy plays a {{vital role}} in the overall execution of an algorithm in a distributed graph processing system. Choosing the best strategy is very challenging, as no one strategy is always the best fit for all kinds of graphs or algorithms. In this paper, we help users choosing a suitable partitioning strategy for algorithms based on the <b>Pregel</b> model by providing a cost model for the <b>Pregel</b> implementation in Spark-GraphX. The cost model shows the relationship between four major parameters: (1) input graph (2) cluster configuration (3) algorithm properties and (4) partitioning strategy. We validate the accuracy of the cost model on 17 different combinations of input graph, algorithm, and partition strategy. As such, the cost model can serve as a basis for yet to be developed optimizers for <b>Pregel.</b> Peer ReviewedPostprint (author's final draft...|$|R
50|$|The Pissa, Inster and Angerapp (Angrapa) are tributaries to the <b>Pregel</b> river. These names, of Old Prussian origin, {{were used}} by Germans of East Prussia until 1945.|$|R
50|$|Königsberg's stock exchange, the Börse, {{was located}} by the <b>Pregel</b> between the bridges Grüne Brücke and Köttelbrücke. Fort Friedrichsburg existed {{just west of}} Vordere Vorstadt from 1657-1910.|$|R
5000|$|... #Caption: View of the <b>Pregel</b> {{from the}} west. Ratshof {{is in the}} lower left, Contienen in the lower right, and the 1920s-era docks are the upper right ...|$|R
50|$|Aweiden was {{incorporated}} into Königsberg in 1939. The road Aweider Allee led from Mühlenhof at the <b>Pregel</b> south through Rosenau, Speichersdorf, and Aweiden to Königsberg's southern city limit.|$|R
