3|4076|Public
40|$|Many Built-In Self Test pattern {{generators}} use Linear Feedback Shift Registers (LFSR) {{to generate}} test sequences. In this paper, we address {{the generation of}} deterministic pairs of patterns for delay faults testing with LFSRs. A new synthesis procedure for a n-size LFSR is given and guarantees that a deterministic set of n precomputed test pairs {{is embedded in the}} maximal length <b>pseudo-random</b> <b>test</b> <b>sequence</b> of the LFSR. Sufficient and necessary conditions for the synthesis of this pseudodeterministic LFSR are provided and show that at-speed delay faults testing becomes a reality without any additional cost for the LFSR. Moreover, since the theoretical properties of LFSRs are preserved, our method could be beneficially used in conjunction with any other technique proposed so far...|$|E
40|$|When using Built-In Self Test (BIST) {{for testing}} VLSI circuits, {{a major concern}} is the {{generation}} of proper test patterns that detect the faults of interest. Usually a linear feedback shift register (LFSR) is used to generate test patterns. We first analyze the probability that an arbitrary <b>pseudo-random</b> <b>test</b> <b>sequence</b> of short length detects all faults. The term short is relative to the probability of detecting the fault with the fewest test patterns. We then show how to guide the search for an initial state (seed) for a LFSR with a given primitive feedback polynomial {{so that all the}} faults of interest are detected by a minimum length test sequence. Our algorithm is based on finding the location of test patterns in the sequence generated by this LFSR. This is accomplished using the theory of discrete logarithms. We then select the shortest subsequence that includes test patterns for all the faults of interest, hence resulting in 100 % fault coverage...|$|E
40|$|Abstract ： In {{order to}} provide low power {{consumption}} LFSR seed for BIST structure，this paper proposed a seed calculation Methods of dynamic-pseudo-random test sequence, it can reseed for LFSR and cut off test sequence of the low fault coverage effectively. The seed can generation fixed length <b>pseudo-random</b> <b>test</b> <b>sequence,</b> the sequence reduce test time and number of test vectors mostly. Experimental results that this technique can reduce the length of vectors, shorten test time and low power consumption based on without reduce the fault coverage RESEARCH BACKGROUND BIST is composed of Test Pattern Generator (TPG) [1, 2], Circuit Under Test (CUT) and Test Result Evaluator (TRE). Most of TPG is use of the Linear Feedback Shift Register (LFSR), it {{has the advantage of}} simple structure and hardware overhead, but it has the disadvantage of long test sequence, lot of redundant test vectors and to meet fault coverage, the test time is maybe beyond the practical limits. To solve this problem, many papers have proposed the improved method that reduce the length of test sequence and shorten the test time. In the Ref. [2],using the reseed technique can compression the test vector maximum and improve the fault coverage, but it’s encoding would cost much time. In the Ref. [3],using the test vectors of random and unpredictabl...|$|E
40|$|International audienceThe massive {{integration}} of several functionalities leads to increased test times/test data volume. Additionally, test content for more advanced fault models increase the tester memory requirements. On the positive side, {{the presence of}} many cores in a system provides the opportunity of core testing each other. In this paper we evaluate the opportunity to use AES crypto- processors as test pattern generators. Several experiences are conducted on LFSRs and AES cores in order to compare their ability to generate <b>pseudo-random</b> <b>test</b> <b>sequences...</b>|$|R
40|$|For non-real time {{multimedia}} systems, {{we present}} a fuzzy approach to replacing the faulty module. After analyzing {{the nature of the}} random and <b>pseudo-random</b> <b>test</b> <b>sequences</b> applied to a module under test, we obtain the aliasing fault coverage between the random and pseudo-random sequences. The activity probability features of intermittent faults in the module under test are discussed based on the Markov chain model. Results on real examples are presented to demonstrate the effectiveness of the proposed fuzzy replacement approac...|$|R
40|$|Detection {{of delay}} and {{transistor}} stuck-open faults requires two-pattern tests. BIST provides a low-cost test solution. This paper exploits BIST approach for two-pattern testing. The generation of pseudo-deterministic test-pair sequence with LFSR was exploited. A three-step approach is proposed. First, {{a set of}} deterministic test-pair is generated to detect all robust path delay faults. Second, LFSR-based TPG configurations is calculated to have pre-generated test-pair embedded {{in a set of}} maximal length <b>pseudo-random</b> <b>test</b> <b>sequences.</b> Third, a global cost-optimal BIST solution for data path (using pseudo-deterministic TPGs) is proposed. The second step is formulated as a cluster-covering problem. The third step is formulated as an 0 - 1 ILP. Experimental results are presented to demonstrate the effectiveness of the proposed approach. link_to_subscribed_fulltex...|$|R
40|$|The BIST {{approach}} {{discussed in}} this paper {{is based on the}} modification of pre-existing registers to perform test pattern generation (TPG). We present a new TPG structure particularly well-suited for datapath like cores. Generated <b>test</b> <b>sequences</b> are short and lead to high fault coverage for the most common modules in a datapath. We compare the proposed TPG with related structures. 1. Introduction BIST advantages are well known, it allows production testing as well as maintenance testing, it doesn't need expensive Automatic Test Equipment and allows at speed testing. Per contra, BIST involves additional cost in terms of extra hardware for test pattern generation (TPG) and signature analysis (SA). Consequently, a BIST implementation is evaluated in terms of area overhead, achievable faultcoverage and test length resulting from the generated <b>test</b> <b>sequence.</b> These characteristics depend on the targeted <b>test</b> approach. In <b>pseudo-random</b> <b>testing</b> for example, <b>test</b> <b>sequences</b> can be easily genera [...] ...|$|R
25|$|LFSRs {{are used}} in circuit testing for test-pattern {{generation}} (for exhaustive <b>testing,</b> <b>pseudo-random</b> <b>testing</b> or pseudo-exhaustive testing) and for signature analysis.|$|R
40|$|International audienceThis paper {{describes}} a generic BIST strategy for devices implementing symmetric encryption algorithms. Taking {{advantage of the}} inner iterative structures of crypto-cores, test facilities are easily set-up for circular self-test of the crypto-cores, built-in <b>pseudo-random</b> <b>test</b> generation and response analysis for other cores in the host device. Main advantages of the proposed test implementation are an architecture with no visible scan chain, 100 % fault coverage on crypto-cores with negligible area overhead, availability of <b>pseudo-random</b> <b>test</b> sources and very low aliasing response compaction for other cores...|$|R
40|$|Most BIST {{architectures}} use <b>pseudo-random</b> <b>test</b> pattern generators. However, whenever {{this technique}} {{has been applied}} to on-chip interconnection networks, overly large testing latencies have been reported. On the other hand, alternative approaches either suffer from large area penalties (like scan-based testing or the use of deterministic test patterns) or poor coverage of faults in the control path (functional testing). This paper presents the optimization of a built-in self-testing framework based on <b>pseudo-random</b> <b>test</b> patterns to the microarchitecture of network-on-chip switches. As a result, fault coverage and testing latency approach those achievable with deterministic test patterns while materializing relevant area savings and enhanced flexibility...|$|R
25|$|Complete LFSR are {{commonly}} used as pattern generators for exhaustive testing, since they cover all possible inputs for an n-input circuit. Maximal-length LFSRs and weighted LFSRs are widely used as pseudo-random test-pattern generators for <b>pseudo-random</b> <b>test</b> applications.|$|R
40|$|Low cost Integrated Circuit (IC) {{testing is}} now a burning issue in {{semiconductor}} technology. Conventional IC tester, Automatic Test Equipment (ATE), cannot cope with the today&# 8217;s continuously increasing complexities in IC technology. Deterministic algorithm, which is an idea of 1960 &# 8217;s, is adopted in the ATE. Recently <b>pseudo-random</b> <b>testing</b> approach of IC testing has been emerged as an economically viable alternative to the expensive deterministic testing approach. This study introduces {{the design of a}} System-on-a-chip (Soc) implementing <b>pseudo-random</b> <b>test</b> technique for low cost IC testing with reliable performance. It is capable of testing combinational circuits as well as sequential circuits with scan-port facilities efficiently. It can also be used for testing Printed Circuit Board (PCB) interconnection faults...|$|R
40|$|International audienceThe {{combination}} of higher quality requirements and sensitivity of high performance circuits to delay defects {{has led to}} an increasing emphasis on delay testing of VLSI circuits. As delay testing using external testers requires expensive ATE, built-in self test (BIST) is an alternative technique that can significantly reduce the test cost. The generation of test patterns in this case is usually pseudo-random (produced from an LFSR), and it has been proven that Single Input Change (SIC) <b>test</b> <b>sequences</b> are more effective than classical Multiple Input Change (MIC) <b>test</b> <b>sequences</b> when a high robust delay fault coverage is targeted. In this paper, we first question the use of a pseudo-random generation to produce effective delay test pairs. We demonstrate that using truly random test pairs (produced from a software generation) to test path delay faults in a given circuit produces higher delay fault coverage than that obtained with <b>pseudo-random</b> <b>test</b> pairs obtained from a classical primitive LFSR. Next, we show that the same conclusion can be drawn when stuck-at or bridging fault coverage is targeted rather delay fault coverage. A modified hardware TPG structure allowing the generation of truly random test patterns is introduced {{at the end of the}} paper...|$|R
40|$|Most {{built-in}} self-test architectures use <b>pseudo-random</b> <b>test</b> pattern generators. However, whenever {{this technique}} {{has been applied}} to on-chip interconnection networks, overly large testing latencies have been reported. On the other hand, alternative approaches either suffer from large area penalties (like scan-based testing or the use of deterministic test patterns) or poor fault coverage in the control path (functional testing). Moreover, the recent proliferation of clock domains on a chip makes testing overly challenging. This manuscript presents the optimisation of a built-in self-testing framework based on <b>pseudo-random</b> <b>test</b> patterns to the microarchitecture of network-on-chip switches. As a result, fault coverage and testing latency approach those achievable with deterministic test patterns while materialising relevant area savings and enhanced flexibility. Finally, the authors implement the extension of the proposed testing methodology to multisynchronous systems, thus making it compliant with the relaxation of synchronisation assumptions in nanoscale designs...|$|R
40|$|While {{high-quality}} BIST (Built-In Self Test) {{based on}} deterministic vectors often has a prohibitive cost, pseudorandom based BIST {{may lead to}} low DC (Defects Coverage) values, requiring however very long <b>test</b> <b>sequences</b> with the corresponding energy waste and possible overheating due to extra switching activity caused by test vectors. The {{purpose of this paper}} is to discuss how a recently proposed RTL (Register Transfer Level) test preparation methodology can be reused to drive innovative, high-quality / low-energy / low-power BIST solutions. RTL test generation is carried out through the definition of partially defined test vectors (masks) that, while targeting multiple detection of RTL faults lead to high DC values. An energy / power model is proposed to optimize the energy / power consumption of the test at RTL level. It is shown that the proposed method achieves better DC values with low-energy and low-power consumption, when compared to <b>pseudo-random</b> <b>test</b> excitation. The usefulness of the methodology is ascertained using the ####### simulation environment in modules of the CMUDSP and TORCH ITC' 99 benchmark circuits...|$|R
40|$|The move to deep-sub-micron {{processing}} {{technology and}} the increasing complexity of a single chip makes testability a key problem in VLSI design and scan insertion a broadly accepted solution in the industry. However, scan-based designs pose their own challenges to external testing via an automated test equipment (ATE) because of the ATE 2 ̆ 7 s limitations of memory depth, test channels and clock frequency. In this context, built-in self-test (BIST) design technique, with on-chip test generation and response analysis, becomes a viable alternative and {{is the focus of}} our work. For scan-based BIST designs, the most important parameters that must be optimized are fault coverage, test application time, area overhead, and power dissipation. ^ Typically, an on-chip linear feedback shift register (LFSR) is employed for <b>pseudo-random</b> <b>test</b> pattern generation in BIST design. Although, with the LFSR it becomes possible to test the circuit with a large number of <b>pseudo-random</b> patterns, <b>testing</b> for random-pattern resistant faults can still take unacceptably long time. This dissertation presents a <b>pseudo-random</b> <b>test</b> compaction method to optimize test application time. Experimental results show that our method outperforms others in test length. ^ Excessive amount of power is wasted during scan shifting in scan-based circuits. The proposed double-tree scan (DTS) architecture saves power by activating only Ologf+ 2 3 scan flip-flops at each clock cycle, compared with O(f) for the traditional scan, where f is the total number of scan flip flops. The proposed DTS architecture with distributed control overcomes the clock-skew and routing problems associated with the centralized control. ^ Usually, many <b>pseudo-random</b> <b>test</b> patterns generated by the LFSR may not contribute to fault coverage. Bypassing the LFSR states that produce these useless patterns can save up to 99...|$|R
40|$|This paper {{presents}} a new algorithm for the automated synthesis of <b>pseudo-random</b> <b>test</b> patterns generators for Built-In Self Test schemes with a mixed test mode. The experimental results show an opportunity {{of using the}} given method on a design stage of circuits producing. In this paper it is shown that an appropriate selection of test pattern generator can significantly reduce the hardware requirements of deterministic part. 1...|$|R
40|$|This paper {{describes}} the verification of {{two versions of}} a bridge between two on-chip buses. The verification was performed just as the Infineon Technologies Design Centre in Bristol was introducing <b>pseudo-random</b> <b>testing</b> (using Specman) and property checking (using GateProp) into their verification flows and thus provides {{a good opportunity to}} compare these two techniques with the existing strategy of directed testing using VHDL bus functional models...|$|R
40|$|The {{topic of}} this thesis {{is related to}} testing of very large scale {{integration}} circuits. The thesis presents the idea of optimizing mixed-mode built-in self-test (BIST) scheme. Mixed-mode BIST consists of two phases. The first phase is <b>pseudo-random</b> <b>testing</b> or partial pseudo-exhaustive testing (P-PET). For the faults not detected by the first phase, deterministic test patterns are generated and applied in the second phase. Hence, the defect coverage of the first phase influences the number of patterns to be generated and stored. The advantages of P-PET in comparison with usual <b>pseudo-random</b> <b>test</b> are in obtaining higher fault coverage and {{reducing the number of}} deterministic patterns in the second phase of mixed-mode BIST. Test pattern generation for P-PET is achieved by selecting characteristic polynomials of multiple-polynomial linear feedback shift register (MP-LFSR). In this thesis, the mixed-mode BIST scheme with P-PET in the first phase is further improved in terms of the fault coverage of the first phase. This is achieved by optimization of polynomial selection of P-PET. In usual mixed-mode BIST, the set of undetected by the first phase faults is handled in the second phase by generating deterministic test patterns for them. The method in the thesis is based on consideration of these patterns during polynomial selection. In other words, we are embedding deterministic test patterns in P-PET. In order to solve the problem, the algorithm for the selection of characteristic polynomials covering the pre-generated patterns is developed. The advantages of the proposed approach in terms of the defect coverage and the number of faults left after the first phase are presented using contemporary industrial circuits. A comparison with usual <b>pseudo-random</b> <b>testing</b> is also performed. The results prove the benefits of P-PET with embedded test patterns in terms of the fault coverage, while maintaining comparable test length and time...|$|R
40|$|The various test {{structures}} are proposed for BIST techniques [1], [2]. A typical structure used for gene-ration of <b>pseudo-random</b> <b>test</b> sets is the linear feedback shift register (LFSR). The BIST techniques have wide application in testing whole devices and embedded components. We {{focus on the}} analysis of the state coverage, fault coverage, and optimal structure of BIST schemes. Keywords Linear feedback shift register (LFSR), cellular auto-mata (CA), middle grain FPGA structure, VHDL modelling, BIST structure optimal implementation 1...|$|R
40|$|Snehal Udar, for the Doctor of Philosophy {{degree in}} Electrical and Computer Engineering, {{presented}} on May 4, of 2011, at Southern Illinois University Carbondale. TITLE: BUILT-IN SCHEMES FOR TEST PATTERN GENERATION AND FAULT LOCATION MAJOR PROFESSOR: Dr. D. Kagaris In this dissertation, we studied {{the areas of}} test pattern generation and fault location for detecting and diagnosing the faults in today 2 ̆ 7 s complex chips. In the first problem, a novel reseeding based test pattern generation scheme is analyzed by proposing a hardware efficient technique that uses irreducible polynomial-primitive element pair to generate distinct subsequences of test patterns. It is shown that for the given characteristic polynomial the hardware cost remains the same irrespective {{of the number of}} seeds required to generate the <b>test</b> <b>sequence</b> of given length. This scheme is targeted at generating <b>pseudo-random</b> <b>test</b> patterns that detect easy-to-detect faults. A counter based reseeding scheme is further analyzed that embeds a given set of fully specified test patterns in minimum number of clock cycles. Second problem investigates the effectiveness of inserting observation points on the circuit lines that along with primary output lines distinguish a given set of faults. Three hardware based approaches are proposed that aim at inserting minimum observation points, and are compared with each other for different diagnostic resolutions...|$|R
40|$|International audienceRe-using {{embedded}} {{resources for}} implementing {{built-in self test}} mechanisms allows test cost reduction. In this paper we demonstrate how to implement cost-efficient built-in self test functions from the AES cryptoalgorithm hardware implementation in a secure system. Self-test of the proposed implementation is also presented. A statistical test suite and fault-simulation are used for evaluating {{the efficiency of the}} corresponding cryptocore as <b>pseudo-random</b> <b>test</b> pattern generator; an analytical approach demonstrates the low probability of aliasing when used for test response compaction...|$|R
40|$|In {{simulation}} based design verification, deterministic or <b>pseudo-random</b> <b>tests</b> {{are used}} to check functional correctness of a design. In this paper we present a technique generating tests by specifying the don’t care inputs in the functional specifications so as to improve their coverage of both design errors and manufacturing faults. The don’t cares are chosen to maximize sensitization of signals in the circuit. The tests generated in this way require {{only a fraction of}} pseudo-exhaustive test patterns to achieve a high multiplicity of fault coverage...|$|R
40|$|Abstract. The {{testing of}} a {{state-based}} system may involve the applica-tion {{of a number}} of adaptive <b>test</b> <b>sequences.</b> Where the implementation under test (IUT) is deterministic, the response of the IUT to some adap-tive <b>test</b> <b>sequence</b> γ 1 may be capable of determining the response of the IUT to some other adaptive <b>test</b> <b>sequence</b> γ 2. Thus, the expected cost of applying a set of adaptive <b>test</b> <b>sequences</b> depends upon the order in which they are applied. This paper explores properties of adaptive <b>test</b> <b>sequences</b> and the problem of finding an order of application, of the el-ements from some set of adaptive <b>test</b> <b>sequences,</b> that minimises the expected cost of testing. ...|$|R
40|$|An {{important}} issue in protocol conformance testing {{is how to}} generate <b>test</b> <b>sequences</b> in an efficient and effective way that achieves the required fault detection coverage. We proposed an approach for finding shorter <b>test</b> <b>sequences</b> for protocol conformance testing based on the Wp method in our previous work. While the method generated good quality <b>test</b> <b>sequences,</b> an extra leading sequence {{may have to be}} added if the final <b>test</b> <b>sequence</b> generated was not started from the same starting state of the given FSM. A new approach is proposed in this paper to overcome this problem thus {{to improve the quality of}} the final <b>test</b> <b>sequence.</b> The new <b>test</b> <b>sequence</b> generated always starts from the same starting state of the given FSM. This effectively reduces the length of generated <b>test</b> <b>sequence...</b>|$|R
40|$|Built-in {{self-test}} #BIST# techniques modify functional {{hardware to}} give a data path the capability to test itself. The modi#cation of data path registers into registers #BIST resources# that can generate <b>pseudo-random</b> <b>test</b> patterns and#or compress test responses, incurs an area overhead penalty. We show how scheduling and module assignment in high-level synthesis a#ect BIST resourcerequirements of a data path. A scheduling and module assignment procedureis presented that produces schedules which, when usedto synthesize data paths, result in a signi#cant reduction in BIST area overhead and hence total area...|$|R
40|$|Testing complex systems, {{such as the}} ASML TWINSCAN lithographic machine, is {{expensive}} and time consuming. In a previous work, a <b>test</b> <b>sequencing</b> method to calculate time-optimal <b>test</b> <b>sequences</b> has been developed. Because complex systems are composed of several subsystems, which are again composed of several modules, there exists a need to hierarchically model <b>test</b> <b>sequencing</b> problems. Such a hierarchical <b>test</b> <b>sequencing</b> problem consists of a high-level model that describes a <b>test</b> <b>sequencing</b> problem at the system level, and one or more low-level models that describe the <b>test</b> <b>sequencing</b> problems at the subsystem or module level. The tests at the system level correspond to the solutions of low-level problems. This paper describes a hierarchical <b>test</b> <b>sequencing</b> model and proposes two algorithms to compute an optimal <b>test</b> <b>sequence.</b> The benefits of hierarchically modeling a problem are less computational effort and less modeling effort, because not all relations are needed. This is illustrated by a small example. The industrial relevance of this method is illustrated on a case study related to a manufacturing testing phase of a lithographic machine...|$|R
40|$|In {{this paper}} output space {{compaction}} for sequential circuits is {{considered for the}} first time. Based on simple estimates for the probabilities {{of the existence of}} sensitized paths from the signal lines to the circuit outputs, optimal output partitions can be determined without fault simulation. The outputs are partitioned {{in such a way that}} internal stuck-at faults influence at most one of the outputs of a group with high probability. The proposed method is primarily developed for concurrent checking. On average with less than 4 compacted groups of outputs an error detection probability of 98 % can be achieved. As the experimental results show, the method is also effectively applicable in <b>pseudo-random</b> <b>test</b> mode. On average for three groups of compacted outputs there is no reduction of the fault coverage for a <b>pseudo-random</b> off-line <b>test.</b> Since the proposed algorithm is of linear complexity with respect to the number of circuit lines and of quadratic complexity with resp [...] ...|$|R
40|$|Conformance <b>testing</b> using <b>test</b> <b>sequences</b> is {{the main}} means {{to ensure that a}} {{protocol}} implementation conforms to its specification. For systems which are specified by nondeterministic finite state machines, a commonly used technique to generate <b>test</b> <b>sequences</b> is the generalized Wp-method with reset which often yields long <b>test</b> <b>sequences</b> if no reliable reset function exists in the system. In this paper, we propose a bipartite graph matching approach to optimize <b>test</b> <b>sequences</b> generated using the generalized Wp-method for protocol conformance testing. Our approach significantly reduces the length of the <b>test</b> <b>sequences</b> required for conformance testing while maintaining the same fault detection capability...|$|R
40|$|Abstract-Protocol {{testing for}} the purpose of {{certifying}} the imple-mentation’s adherence to the protocol specification can be done with a test architecture consisting of remote tester and local responder proc-esses generating specific input stimuli, called <b>test</b> <b>sequences,</b> and observing the output produced by the implementation under test. It is possible to adapt <b>test</b> <b>sequence</b> generation techniques for finite state machines, such as transition tour, characterization, and checking sequence methods, to generate <b>test</b> <b>sequences</b> for protocols specified as incomplete finite state machines. For certain <b>test</b> <b>sequences,</b> the tester or responder processes are forced to consider the timing of an interaction in which they have not taken part; these <b>test</b> <b>sequences</b> are called nonsynchronizahle. The three <b>test</b> <b>sequence</b> generation algo-rithms are modified to obtain synchronizable <b>test</b> <b>sequences.</b> The checking of a given protocol for intrinsic synchronization problems is also discussed. Complexities of synchronizable <b>test</b> <b>sequence</b> genera-tion algorithms are given and complete testing of a protocol is shown to he infeasible. To extend the applicability of the characterization and checking sequences, different methods are proposed to enhance the protocol specifications: special test input interactions are defined and a metho-dology is developed to complete the protocol specifications. P I...|$|R
40|$|This paper investigates {{problems}} of the form: produce a <b>test</b> <b>sequence</b> p, that contains each element of some non-empty set T of sequences, such that there does not exist a <b>test</b> <b>sequence</b> p # that contains each element of T and has fewer resets than p. The proposed (polynomial time) algorithm is guaranteed to produce a <b>test</b> <b>sequence</b> that has the minimum number of resets when considering <b>test</b> <b>sequences</b> that connect the sequences from T but do not utilize overla...|$|R
40|$|We {{present a}} {{procedure}} to generate short <b>test</b> <b>sequences</b> for syn-chronous sequential circuits described {{at the gate}} level. Short <b>test</b> <b>sequences</b> are important in reducing test application time and memory requirements. The proposed procedure constructs a <b>test</b> <b>sequence</b> {{using a combination of}} fault-independent and fault-oriented criteria. Experimental results are presented to demon-strate its effectiveness. 1...|$|R
40|$|Bounds on <b>test</b> <b>sequence</b> length {{can be used}} as a {{testability}} measure. We give {{a procedure}} to compute the upper bound on <b>test</b> <b>sequence</b> length for an arbitrary sequential circuit. We prove that the bound is exact for a certain class of circuits. Three design rules are specified to yield circuits with lower <b>test</b> <b>sequence</b> bounds. ...|$|R
40|$|We {{describe}} {{a method for}} on-chip generation of weighted <b>test</b> <b>sequences</b> for synchronous sequential circuits. For combinational circuits, three weights, 0, 0. 5 and 1, are sufficient to achieve complete coverage of stuck-at faults, since these weights are sufficient to reproduce any specific test pattern. For sequential circuits, the weights we use are defined based on subsequences of a deterministic <b>test</b> <b>sequence.</b> Such weights allow us to reproduce parts of the <b>test</b> <b>sequence,</b> and help ensure that complete fault coverage would be obtained by the weighted <b>test</b> <b>sequences</b> generated...|$|R
40|$|Properly {{generated}} test suites may {{not only}} locate the defects in software systems, but also help {{in reducing the}} high cost associated with software testing, ft is often desired that <b>test</b> <b>sequences</b> in a <b>test</b> suite can be automatically generated to achieve required test coverage. However, automatic <b>test</b> <b>sequence</b> generation remains {{a major problem in}} software testing. This paper proposes an ant colony optimization approach to automatic <b>test</b> <b>sequence</b> generation for state-based software testing. The proposed approach can directly use UML artifacts to automatically generate <b>test</b> <b>sequences</b> to achieve required test coverage...|$|R
40|$|This paper {{presents}} {{a method for}} the selection of <b>test</b> <b>sequences</b> from statecharts. It is shown that a statechart can {{be transformed into a}} flow graph modeling the flow of both control and data in the statechart. The transformation enables the application of conventional control and data flow analysis techniques to the <b>test</b> <b>sequence</b> selection from statecharts. The resulting set of <b>test</b> <b>sequences</b> provides the capability of determining whether an implementation establishes the desired flow of controlanddataexpressedinstatecharts. Keywords: software testing and analysis, specification-based <b>testing,</b> <b>test</b> <b>sequence</b> selection, statecharts, data flow analysis...|$|R
