177|1144|Public
25|$|Often, an {{infinite}} loop is unintentionally {{created by a}} <b>programming</b> <b>error</b> in a condition-controlled loop, wherein the loop condition uses variables that never change within the loop.|$|E
25|$|The Federal Communications Commission ordered CenturyLink to pay {{a record}} $16 million for failing to alert {{authorities}} of a preventable <b>programming</b> <b>error</b> that left nearly 11 million people in seven states without access to emergency services for six hours in 2014.|$|E
25|$|On 11 March 2009, {{the ride}} was {{scheduled}} to be launched by a group of invited celebrities, including the director of Saw II, Saw III and Saw IV, Darren Lynn Bousman, who posted an account of his experience on his Facebook profile. The ride experienced a delay, a barrier shut-down and a subsequent stop, blamed by park officials on a computer <b>programming</b> <b>error.</b> An ambulance was called when one woman suffered a panic attack.|$|E
5000|$|When a <b>program</b> <b>error</b> {{occurs in}} Windows, the system {{searches}} for a <b>program</b> <b>error</b> handler. A <b>program</b> <b>error</b> handler deals with errors as they arise during {{the running of}} a program. If the system does not find a <b>program</b> <b>error</b> handler, the system verifies that the program is not currently being debugged and considers the error to be unhandled. The system then processes unhandled errors by looking in the registry for a <b>program</b> <b>error</b> debugger for which Dr. Watson is the default. A third-party debugger {{can also be used}} in place of Dr. Watson. The Watcom C Compiler includes a similar crash-analysis tool named [...] "Dr. Watcom".|$|R
40|$|One of {{the largest}} {{challenges}} in software development {{is to ensure that}} the software is correct. Almost all software that is complex enough to accomplish a useful task contains <b>programming</b> <b>errors.</b> Unfortunately, developers must allocate their time to various activities and often, they do not have enough time for searching <b>programming</b> <b>errors.</b> The goal of this dissertation is to support developers in finding <b>programming</b> <b>errors</b> despite a limited time budget. Therefore, we focus on program analyses with three properties. First, the analyses are automatic, that is, the only input required to analyze a program is the source code (or byte code) of the program itself. In particular, an automatic analysis does not rely on formal specifications or manually written test suites. Second, the analyses are precise, that is, they report warnings that are guaranteed to point to <b>programming</b> <b>errors</b> or that have a high chance of pointing to <b>programming</b> <b>errors,</b> instead of false positives. Third, the analyses can be applied to real-world software with low human and computational effort, that is, they provide developers a push button approach for existing code. Thi...|$|R
40|$|The 2010 CWE/SANS Top 25 Most Dangerous <b>Programming</b> <b>Errors</b> {{is a list}} of {{the most}} {{widespread}} and critical <b>programming</b> <b>errors</b> that can lead to serious software vulnerabilities. They are often easy to find, and easy to exploit. They are dangerous because they will frequently allow attackers to completely take ove...|$|R
25|$|In August 2017, the {{financial}} intelligence agency Australian Transaction Reports and Analysis Centre (AUSTRAC) launched civil proceedings in the Federal Court of Australia, alleging that CBA had breached money laundering and terrorism financing laws on 53,700 occasions. The breaches {{related to the}} bank's use of intelligent deposit machines (IDMs) between November 2012 and September 2015â€”the bank claimed that a <b>programming</b> <b>error</b> allowed depositors to instantly credit cash deposits to their accounts, whilst failing to report amounts over $10,000 to AUSTRAC, and not enforcing any limits {{to the number of}} transactions.|$|E
25|$|In a 1997 {{paper on}} the effect of police hiring on crime rates, Levitt used the timing of mayoral and gubernatorial {{elections}} as an instrumental variable to identify a causal effect of police on crime. Past studies had been inconclusive because of the simultaneity inherent in police hiring (when crime increases, more police are hired to combat crime). The findings of this paper were found {{to be the result of}} a <b>programming</b> <b>error.</b> This was pointed out in a comment by Justin McCrary published in the American Economic Review in 2002. In a response published with McCrary's comment Levitt admits to the error and then goes on to offer alternative evidence to support his original conclusions.|$|E
500|$|Asteroids {{contains}} several bugs. The game {{slows down}} as the player gains 50-100 lives, due to a <b>programming</b> <b>error</b> in {{that there is no}} limit for the permitted number of lives. The player can [...] "lose" [...] the game after more than 250 lives are collected.|$|E
50|$|If the {{business}} application error occurred due to <b>programming</b> <b>errors,</b> then a request is {{created for the}} application development team to correct <b>programming</b> <b>errors.</b> If {{the business}} user needs new features or functions in the business application, then the required analysis/design/programming/testing/release is planned and {{a new version of}} the business software is deployed.|$|R
50|$|Most {{assembly}} languages {{will have}} a macro instruction or an interrupt address available for the particular system to intercept events such as illegal op codes, <b>program</b> check, data <b>errors,</b> overflow, divide by zero, and other such. IBM and Univac mainframes had the STXIT macro. Digital Equipment Corporation RT11 systems had trap vectors for <b>program</b> <b>errors,</b> i/o interrupts, and such. DOS has certain interrupt addresses. Microsoft Windows has specific module calls to trap <b>program</b> <b>errors.</b>|$|R
2500|$|Critical <b>Programming</b> <b>Errors</b> {{can also}} be {{classified}} per CISQ Characteristics. Basic example below: ...|$|R
500|$|Apollo 5 (AS-204) was {{the first}} {{unmanned}} test flight of LM in Earth orbit, launched from pad 37 on January 22, 1968, by the Saturn IB {{that would have been}} used for Apollo 1. The LM engines were successfully test-fired and restarted, despite a computer <b>programming</b> <b>error</b> which cut short the first descent stage firing. The ascent engine was fired in abort mode, known as a [...] "fire-in-the-hole" [...] test, where it was lit simultaneously with jettison of the descent stage. Although Grumman wanted a second unmanned test, George Low decided the next LM flight would be manned.|$|E
2500|$|Dawn {{made its}} closest {{approach}} (549km) to Mars on February 17, 2009 during a successful gravity assist. This flyby slowed Mars' orbital velocity by about [...] per 180 million years. On this day, the spacecraft placed itself in safe mode, resulting in some data acquisition loss. The spacecraft {{was reported to}} be back in full operation two days later, with no impact on the subsequent mission identified. The root cause of the event {{was reported to be}} a software <b>programming</b> <b>error.</b>|$|E
2500|$|The {{epidemic}} began on September 13, 2005, when Blizzard {{introduced a new}} raid called Zul'Gurub into the game {{as part of a}} new update. Its end boss, Hakkar, could affect players by using a debuff called Corrupted Blood, a disease that damages players over time; this one specifically doing significant damage. The disease could be passed on between any nearby characters, and would kill characters with lower levels in a few seconds, while higher level characters could keep themselves alive. It would disappear as time passed or when the character died. Due to a <b>programming</b> <b>error,</b> when hunters dismissed their pets, those pets would keep any active debuffs when summoned again.|$|E
5000|$|Memory {{corruption}} {{is one of}} the most intractable class of <b>programming</b> <b>errors,</b> for two reasons: ...|$|R
5000|$|While {{they are}} powerful, {{it is easy}} to make <b>programming</b> <b>errors</b> that damage the database.|$|R
5000|$|These in turn {{are often}} caused by <b>programming</b> <b>errors</b> {{that result in}} invalid memory access: ...|$|R
2500|$|The worm was {{at first}} {{identified}} by the security company VirusBlokAda in mid-June 2010. Journalist Brian Krebs's blog posting on 15 July 2010 was the first widely read report on the worm. The original name given by VirusBlokAda was [...] "Rootkit.Tmphider"; Symantec however called it [...] "W32.Temphid", later changing to [...] "W32.Stuxnet". Its current name is derived {{from a combination of}} some keywords in the software (".stub" [...] and [...] "mrxnet.sys"). The reason for the discovery at this time is attributed to the virus accidentally spreading beyond its intended target (the Natanz plant) due to a <b>programming</b> <b>error</b> introduced in an update; this led to the worm spreading to an engineer's computer that had been connected to the centrifuges, and spreading further when the engineer returned home and connected his computer to the internet.|$|E
2500|$|The {{problem was}} not a <b>programming</b> <b>error</b> in the AGC, nor was it pilot error. It was a {{peripheral}} hardware design bug that was already known and documented by Apollo 5 engineers. However, because the problem had only occurred once during testing, they concluded that it was safer to fly with the existing hardware that they had already tested, than to fly with a newer but largely untested radar system. In the actual hardware, {{the position of the}} rendezvous radar was encoded with synchros excited by a different source of 800Hz AC than the one used by the computer as a timing reference. The two 800Hz sources were frequency locked but not phase locked, and the small random phase variations made it appear as though the antenna was rapidly [...] "dithering" [...] in position, even though it was completely stationary. These phantom movements generated the rapid series of cycle steals.|$|E
2500|$|Risk Management: Software failure {{has caused}} more than inconvenience. Software errors have caused human fatalities. The causes {{have ranged from}} poorly {{designed}} user interfaces to direct programming errors. An example of a <b>programming</b> <b>error</b> that led to multiple deaths is discussed in Dr. Leveson's paper. This resulted in requirements {{for the development of}} some types of software, particularly and historically for software embedded in medical and other devices that regulate critical infrastructures: [...] " [...] see Java programs stalling for one third of a second to perform garbage collection and update the user interface, and they envision airplanes falling out of the sky.". In the United States, within the Federal Aviation Administration (FAA), the FAA Aircraft Certification Service provides software programs, policy, guidance and training, focus on software and Complex Electronic Hardware that has an effect on the airborne product (a [...] "product" [...] is an aircraft, an engine, or a propeller).|$|E
40|$|Advanced static-analysis {{tools for}} finding <b>programming</b> <b>errors</b> {{have become very}} popular recently. These detect many common generic <b>programming</b> <b>errors</b> such as null pointer dereferences, buffer overruns, and race conditions. Most major static-analysis tools also provide an {{interface}} {{that can be used}} to find domain-specific errors. This paper describes how custom domain-specific checkers can be used to improve software quality in complex embedded systems. 1...|$|R
5000|$|Eliminating {{opportunities}} for <b>programming</b> <b>errors</b> and divergent {{interpretations of the}} specification, esp. between IP and SoC teams ...|$|R
5000|$|Debugging and (structured) {{exception}} handling - tracking down and fixing <b>programming</b> <b>errors</b> in an application under development.|$|R
2500|$|In April 2011, Nissan {{announced}} that {{customers in the}} United States and Japan reported problems in restarting their Leaf vehicles after switching the motor off. Nissan said the problem does not pose any accident risk. On April 15. Nissan {{announced that}} the problem only affected {{a small proportion of}} Leafs. Nissan engineers identified a <b>programming</b> <b>error</b> in an air conditioning system sensor that sometimes triggers an erroneous high voltage alert when the air conditioning unit is switched on, due to the increased demand for power. The system issues an Inhibit Restart command, which does not prevent driving the vehicle, but does prevent it restarting after it is turned off. [...] The solution requires reprogramming of the Vehicle Control Module by a Nissan dealer. Nissan announced a [...] "service campaign" [...] to apply the software fix to all 5,300 Nissan Leafs in operation around the world, but it was not an official recall because it was not a safety issue. The applied software update also improves the carâ€™s on-board range calculation system, which several Leaf owners reported was overestimating the number of miles left. In addition, the update changes the state-of-charge bars display to provide a true reserve capacity; the driver now has up to five miles to find a charging spot after the car reaches the zero miles remaining mark.|$|E
5000|$|Cross-application {{scripting}} exploits {{a similar}} kind of <b>programming</b> <b>error</b> ...|$|E
5000|$|Dawn entered {{safe mode}} {{due to a}} <b>programming</b> <b>error</b> during its February 17, 2009 Mars flyby.|$|E
40|$|International audienceFinding {{and fixing}} <b>programming</b> <b>errors</b> in {{deployed}} software {{is often a}} slow, painstaking, and expensive process. In order to minimise this problem, static analysis is increasingly being adopted {{as a way to}} find <b>programming</b> <b>errors</b> before the software application is released. Coccinelle is a program matching and transfor-mation tool that makes it easy for developers to express static analysis-based software defect-finding rules and scan software source code for potential defects...|$|R
50|$|Program {{analysis}} {{is the general}} problem of examining a program and determining key characteristics (such as the absence of classes of <b>program</b> <b>errors).</b> <b>Program</b> transformation {{is the process of}} transforming a program in one form (language) to another form.|$|R
40|$|As {{evidenced}} by the popularity of MPI (Message Passing Interface), message passing is an effective programming technique for managing coarse-grained concurrency on distributed computers. Unfortunately, debugging message-passing applications can be difficult. Software complexity, data races, and scheduling dependencies can make <b>programming</b> <b>errors</b> challenging to locate with manual, interactive debugging techniques. This article describes Umpire, a new tool for detecting <b>programming</b> <b>errors</b> at runtime in message passing applications. Umpire monitors the MPI operations of an application by interposing itself between the application and the MPI runtime system using the MPI profiling layer. Umpire then checks the application's MPI behavior for specific errors. Our initial collection of <b>programming</b> <b>errors</b> includes deadlock detection, mismatched collective operations, and resource exhaustion. We present an evaluation {{on a variety of}} applications that demonstrates the effectiveness of t [...] ...|$|R
5000|$|Finalizers {{may result}} in object resurrection, which is often a <b>programming</b> <b>error</b> and whose very {{possibility}} significantly slows down and complicates garbage collection.|$|E
5000|$|A <b>programming</b> <b>error</b> in [...] "the bug" [...] {{caused it}} to spread to {{computers}} outside of Natanz. When an engineer [...] "left Natanz and connected his computer to the Internet, the American- and Israeli-made bug failed to recognize that its environment had changed." [...] The code replicated on the Internet and was subsequently exposed for public dissemination. IT security firms Symantec and Kaspersky Lab have since examined Stuxnet. It is unclear whether the Americans or Israelis introduced the <b>programming</b> <b>error.</b>|$|E
50|$|Often, an {{infinite}} loop is unintentionally {{created by a}} <b>programming</b> <b>error</b> in a condition-controlled loop, wherein the loop condition uses variables that never change within the loop.|$|E
25|$|Critical <b>Programming</b> <b>Errors</b> are {{specific}} architectural and/or coding bad practices {{that result in}} the highest, immediate or long term, business disruption risk.|$|R
5000|$|A {{disadvantage}} is {{that changing}} {{the value of}} an instance then requires an assignment, which is inconvenient and prone to <b>programming</b> <b>errors,</b> e.g., ...|$|R
5000|$|Without static type-checking, {{which is}} usually {{performed}} by a compiler, programs can be less reliable, because type checking eliminates a class of <b>programming</b> <b>errors.</b>|$|R
