151|365|Public
5000|$|Pattern {{matching}} - {{the ability}} to find specific patterns of bits or bytes within packets in a <b>packet</b> <b>stream.</b>|$|E
50|$|The {{points to}} note {{are that the}} leaky bucket algorithm, when used as a meter, can allow a {{conforming}} output <b>packet</b> <b>stream</b> with jitter or burstiness, {{can be used in}} traffic policing as well as shaping, and can be implemented for variable length packets.|$|E
50|$|The basic {{assumption}} behind dense mode is {{that the}} multicast <b>packet</b> <b>stream</b> has receivers at most locations. Sparse mode assumes relatively fewer receivers. Dense mode is ideal for groups {{where many of the}} nodes will subscribe to receive the multicast packets, so that most of the routers must receive and forward these packets (groups of a high density).|$|E
40|$|This paper {{describes}} how Dynamic Window-Constrained Scheduling (DWCS) can guarantee real-time service to <b>packets</b> from multiple <b>streams</b> with different performance objectives. We show that: (1) DWCS can guarantee {{that no more}} than x packets miss their deadlines for every y consecutive packets requiring service, (2) using DWCS, the delay of service to real-time <b>packet</b> <b>streams</b> is bounded even when the scheduler is overloaded, (3) DWCS can ensure the delay bound of any given stream is independent of other streams, and (4) a fast response time for best-effort <b>packet</b> <b>streams,</b> {{in the presence of}} real-time <b>packet</b> <b>streams,</b> is possible. As long as the minimum aggregate bandwidth requirement of all real-time <b>packet</b> <b>streams</b> does not exceed the available bandwidth, DWCS can guarantee that each such stream does not miss more than x deadlines for every y requests. Furthermore, if a feasible schedule exists, each stream is guaranteed a minimum fraction of available bandwidth over a finite window of tim [...] ...|$|R
50|$|Deep Packet Inspection is {{currently}} the predominant inspection tool used to analyze data packets passing through the network, including the headers and the data protocol structures. These technologies scan <b>packet</b> <b>streams</b> and look for offending patterns.|$|R
40|$|We {{introduce}} a task model for embedded systems operating on <b>packet</b> <b>streams,</b> such as network processors. This model {{along with a}} calculus meant for reasoning about <b>packet</b> <b>streams</b> allows a unified treatment of several problems arising in the network packet processing domain such as packet scheduling, task scheduling and architecture/algorithm explorations {{in the design of}} network processors. The model can take into account quality of service constraints such as data throughput and deadlines associated with packets. To illustrate its potential, we provide two applications: (a) a new task scheduling algorithm for network processors to support a mix of real-time and non-real-time flows, (b) a scheme for design space exploration of network processors...|$|R
50|$|One basic {{technique}} is {{to split the}} attack payload into multiple small packets, so that the IDS must reassemble the <b>packet</b> <b>stream</b> to detect the attack. A simple way of splitting packets is by fragmenting them, but an adversary can also simply craft packets with small payloads. The 'whisker' evasion tool calls crafting packets with small payloads 'session splicing'.|$|E
5000|$|The Failure packet {{allows the}} sender to {{indicate}} various problems inside the <b>packet</b> <b>stream.</b> The packet normally contains a single [...] "known" [...] character, {{but can also}} include an informational message following this character. The most common Failure packet is the A(bort), allowing the user to terminate transfers on request. Other failures included (C)apacity failure (out of disk space) and (M)issing file, among others.|$|E
50|$|There is, however, {{another version}} of the leaky bucket algorithm, {{described}} on the relevant Wikipedia page as the leaky bucket algorithm as a queue. This is a special case of the leaky bucket as a meter, which can be described by the conforming packets passing through the bucket. The leaky bucket as a queue is therefore applicable only to traffic shaping, and does not, in general, allow the output <b>packet</b> <b>stream</b> to be bursty, i.e. it is jitter free. It is therefore {{significantly different from the}} token bucket algorithm.|$|E
50|$|More {{advanced}} audio codecs {{are capable}} of sending audio over unmanaged IP networks like the internet using automated jitter buffering, forward error correction and error concealment to minimise latency and maximise <b>packet</b> <b>streaming</b> stability in live broadcast situations over unmanaged IP networks.|$|R
50|$|An {{attacker}} {{may also}} look into other timing attacks other than inter-packet intervals. The attacker can actively modify <b>packet</b> <b>streams</b> {{to observe the}} changes caused in the network's behavior. Packets can be corrupted to force re-transmission of TCP packets, which the behavior is easily observable to reveal information.|$|R
50|$|ICMP hole {{punching}} is {{a technique}} employed in network address translator (NAT) applications for maintaining Internet Control Message Protocol (ICMP) <b>packet</b> <b>streams</b> that traverse the NAT. NAT traversal techniques are typically required for client-to-client networking applications on the Internet involving hosts connected in private networks, especially in peer-to-peer and Voice over Internet Protocol (VoIP) deployments.|$|R
50|$|Packet Play or Packet Replay is the act {{of sending}} a pre-generated or {{captured}} series of packets. Packets may come from Packet Assembly and Editing or from captured network attacks. This allows for testing of a given usage or attack scenario for the targeted network. Tcpreplay {{is the most common}} program for this task since it is capable of taking a stored <b>packet</b> <b>stream</b> in the pcap format and sending those packets at the original rate or a user-defined rate. Ostinato added support for pcap files in version 0.4. Some packet analyzers are also capable of packet replay.|$|E
5000|$|The {{amount of}} packet loss that is {{acceptable}} {{depends on the}} type of data being sent. For example, for Voice over IP traffic, one commentator reckoned that [...] "missing one or two packets every now and then will not affect the quality of the conversation. Losses between 5% and 10% of the total <b>packet</b> <b>stream</b> will affect the quality significantly." [...] Another described less than 1% packet loss as [...] "good" [...] for streaming audio or video, and 1-2.5% as [...] "acceptable". [...] On the other hand, when transmitting a text document or web page, a single dropped packet could result in losing part of the file, which is why a reliable delivery protocol would be used for this purpose (to retransmit dropped packets).|$|E
50|$|A further {{restriction}} is {{that the}} leaky bucket as a queue traffic shaping function only transmits packets on the ticks; hence, if it is used within a network, equivalent to UPC and NPC, it also imposes a fixed phase on the onward transmission of packets. Whereas, when using a leaky bucket meter to control onward transmission, a packet is transmitted {{as soon as it}} conforms, i.e. relative to the previous one or, if it already conforms, its arrival time; not according to some arbitrary local clock. Perversely, {{in the context of the}} transfer delay, this imposition of a fixed phase that may, over time, differ from that of an otherwise conforming input <b>packet</b> <b>stream,</b> constitutes a delay variation and hence a jitter. Jitter caused in this particular way could only be observed where the delay is measured as the transit time between two separate measurement points, one either side of the leaky bucket as a queue shaping function. However, in the context of real-time data transmissions, it is this end-to-end delay that determines the latency of received data. Hence, the leaky bucket as a queue is unsuitable for traffic shaping real-time transmissions.|$|E
40|$|An {{approach}} to facilitate information recovery from optical <b>packet</b> <b>streams</b> {{with a view}} to subsequent conversion into the electronic domain is presented. The technique is amenable to easy implementation and more importantly, helps to limit the widespread use of 3 R regeneration at nodes within an extensive optical network, thereby easing node complexity and cost...|$|R
40|$|We {{present an}} {{efficient}} algorithm for regular expression matching on streams with {{out of order}} data, while maintaining a small state and without complete stream reconstruction. We have implemented three versions of the algorithm-sequential, parallel and mixed- and show by experimental study that the algorithms are highly effective in matching regular expressions on IP <b>packet</b> <b>streams.</b> ...|$|R
50|$|UDP hole {{punching}} is {{a commonly}} used technique employed in network address translator (NAT) applications for maintaining User Datagram Protocol (UDP) <b>packet</b> <b>streams</b> that traverse the NAT. NAT traversal techniques are typically required for client-to-client networking applications on the Internet involving hosts connected in private networks, especially in peer-to-peer, Direct Client-to-Client (DCC) and Voice over Internet Protocol (VoIP) deployments.|$|R
5000|$|Argus is {{composed}} of an advanced comprehensive network flow data generator, the Argus monitor, which processes packets (either capture files or live packet data) and generates detailed network traffic flow status reports of all the flows in the <b>packet</b> <b>stream.</b> Argus monitors all network traffic, data plane, control plane and management plane, not just Internet Protocol (IP) traffic. Argus captures much of the packet dynamics and semantics of each flow, {{with a great deal}} of data reduction, so you can store, process, inspect and analyze large amounts of network data efficiently. Argus provides reachability, availability, connectivity, duration, rate, load, good-put, loss, jitter, retransmission (data networks), and delay metrics for all network flows, and captures most attributes that are available from the packet contents, such as Layer 2 addresses, tunnel identifiers (MPLS, GRE, IPsec, etc...), protocol ids, SAP's, hop-count, options, L4 transport identification (RTP detection), host flow control indications, etc... Argus has implemented a number of packet dynamics metrics specifically designed for cyber security. Argus detects human typing behavior in any flow, but of particular interest is key-stroke detection in encrypted SSH tunnels. [...] and Argus generates the Producer Consumer Ratio (PCR) which indicates whether a network entity is a data producer and/or consumer, an important property when evaluating the potential for a node to be involved in an Advanced persistent threat (APT) mediated exfiltration.|$|E
40|$|Many {{applications}} {{want to use}} TCP {{congestion control}} to regulate the transmission rate of a data <b>packet</b> <b>stream.</b> A natural way {{to achieve this goal}} is to transport the data <b>packet</b> <b>stream</b> on a TCP connection. However, because TCP implements both congestion and error control, transporting a data <b>packet</b> <b>stream</b> directly using a TCP connection forces the data <b>packet</b> <b>stream</b> to be subject to TCP’s other properties caused by TCP error control, which may be inappropriate for these applications. The TCP decoupling approach proposed in this thesis is a novel way of applying TCP congestion control to a data <b>packet</b> <b>stream</b> without actually transporting the data <b>packet</b> <b>stream</b> on a TCP connection. Instead, a TCP connection using the same network path as the data <b>packet</b> <b>stream</b> is set up separately and the transmission rate of the data <b>packet</b> <b>stream</b> is then associated with that of the TCP packets. Since the transmission rate of these TCP packets is under TCP congestion control, so is that of the data <b>packet</b> <b>stream.</b> Furthermore, since the data <b>packet</b> <b>stream</b> is not transported on a TCP connection, the regulated data <b>packet</b> <b>stream</b> is not subject to TCP error control...|$|E
40|$|Many {{applications}} {{want to use}} TCP {{congestion control}} to regulate the transmission rate of a data <b>packet</b> <b>stream.</b> A natural way {{to achieve this goal}} is to transport the data <b>packet</b> <b>stream</b> on a TCP connection. However, because TCP implements both congestion and error control, transporting a data <b>packet</b> <b>stream</b> directly using a TCP connection forces the data <b>packet</b> <b>stream</b> to be subject to TCP's other properties caused by TCP error control, which may be inappropriate for these applications. The TCP decoupling approach proposed in this thesis is a novel way of applying TCP congestion control to a data <b>packet</b> <b>stream</b> without actually transporting the data <b>packet</b> <b>stream</b> on a TCP connection. Instead, a TCP connection using the same network path as the data <b>packet</b> <b>stream</b> is set up separately and the transmission rate of the data <b>packet</b> <b>stream</b> is then associated with that of the TCP packets. Since the transmission rate of these TCP packets is under TCP congestion control, so is that of the data <b>packet</b> <b>stream.</b> Furthermore, since the data <b>packet</b> <b>stream</b> is not transported on a TCP connection, the regulated data <b>packet</b> <b>stream</b> is not subject to TCP error control. Because of this flexibility, the TCP decoupling approach opens up many new opportunities, solves old problems, and improves the performance of some existing applications. All of these advantages will be demonstrated in the thesis. This thesis presents the design, implementation, and analysis of the TCP decoupling approach, and its successful applications in TCP trunking, wireless communication, and multimedia streaming. Comment: Ph. D. Thesis, Harvard University, September 1999. This thesis's Chapter 3 about "TCP Trunking" will be published in IEEE ICNP' 99 Proceedings. A condensed version of this thesis is currently submitted to a conferenc...|$|E
40|$|Internet traffic {{patterns}} {{are believed to}} obey the power law, implying {{that most of the}} bandwidth is consumed by a small set of heavy users. Hence, queries that return a list of frequently occurring items are important in the analysis of realtime Internet <b>packet</b> <b>streams.</b> While several results exist for computing frequent item queries using limited memory in the infinite stream model, in this paper we consider the limited-memory sliding window model. This model maintains the last N items that have arrived at any given time and forbids the storage of the entire window in memory. We present a deterministic algorithm for identifying frequent items in sliding windows defined over real-time <b>packet</b> <b>streams.</b> The algorithm uses limited memory, requires constant processing time per packet (amortized), makes only one pass over the data, and is shown to work well when tested on TCP traffic logs...|$|R
40|$|Copyright © 2013 Saleh Alomar et al. This is an {{open access}} article {{distributed}} under the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited. The method of loading increase of package networks is considered. This method {{is based on the}} dynamic redistribution of the throughput of switch equipment among carrying capacities (bandwidths) of its ports. Redistribution is fulfilled synchronously with the pulsations of <b>packet</b> <b>streams,</b> which move over the entrances of these ports. In the complement of switch equipment, it entered the adaptive mechanism of automatic real time redistribution of the throughput of switch equipment among the bandwidths of ports. This mechanism allows to decrease the quantity of time intervals, when in-tensities of <b>packet</b> <b>streams</b> are exceeded by the set bandwidths of ports, and, thus to increase the load of equipment by useful traffic...|$|R
40|$|ABSTRACT Internet traffic {{patterns}} {{are believed to}} obey the power law, implying {{that most of the}} bandwidth is consumed by a small set of heavy users. Hence, queries that return a list of frequently occurring items are important in the analysis of realtime Internet <b>packet</b> <b>streams.</b> While several results exist for computing frequent item queries using limited memory in the infinite stream model, in this paper we consider the limited-memory sliding window model. This model maintains the last N items that have arrived at any given time and forbids the storage of the entire window in memory. We present a deterministic algorithm for identifying frequent items in sliding windows defined over real-time <b>packet</b> <b>streams.</b> The algorithm uses limited memory, requires constant processing time per packet (amortized), makes only one pass over the data, and is shown to work well when tested on TCP traffic logs. Categories and Subject Descriptors C. 2. 3 [Communication Networks]: Network Operations [...] Network monitorin...|$|R
40|$|While {{designing}} network applications, one has {{to check}} their performance on a network that is loaded by realistic background traffic. For this purpose, a <b>packet</b> <b>stream</b> can be captured on a network to obtain real background traffic. When the application has to be tested under various network loads, one can use straightforward techniques to alter the original captured traffic trace; for example faster replay of the <b>packet</b> <b>stream.</b> The problem with these simple techniques is that the <b>packet</b> <b>stream</b> will be altered in many ways, and thus a simple multiplication of the load inflicted by the <b>packet</b> <b>stream</b> on a network cannot be guaranteed. In this paper we will first describe a few simple techniques. Then, more complex techniques that better approach the goal of multiplying the traffic load by a known factor will be presented. Every day work is done on designing software for new interne...|$|E
40|$|Performance {{testing on}} a network that is loaded by {{realistic}} background traffic, {{is an important issue}} in the design of network applications. To obtain this background traffic, a <b>packet</b> <b>stream</b> can be captured on a real network. For testing the application under varying network loads, straightforward techniques can be applied to alter the originally captured traffic trace. An example thereof is faster replay of the <b>packet</b> <b>stream.</b> The drawback of these simple techniques is that the <b>packet</b> <b>stream</b> will be altered in many ways, and thus a simple multiplication of the load that is inflicted by the <b>packet</b> <b>stream</b> {{on a network}} cannot be guaranteed. This paper presents and analyzes some frequently used load scaling methods. Next to the computationally more demanding use of traffic models, a novel technique is introduced based on the rotation of the bin vector, that combines better accuracy with computational simplicity. (C) 2007 Elsevier B. V. All rights reserved. status: publishe...|$|E
30|$|Let us {{assume that}} an Iub {{interface}} is offered {{a mixture of}} different packet streams. Analytical traffic models are constructed based on the internal structure of the <b>packet</b> <b>stream</b> or the so-called call stream in which a <b>packet</b> <b>stream</b> with a variable bit rate is treated as a single call that {{is characterized by a}} constant bit rate and appropriate service time. The term “call” is then meant to be understood as a <b>packet</b> <b>stream</b> or its section, which is related to a given service [2, 35]. It has been proved, on the basis of simulation experiments and measurements carried out in networks, that thus defined calls can be described by the Poisson streams characteristics [2, 35, 36] in which variable bit rates of packet streams are replaced by constant bit rates called the equivalent bandwidth [37]. The equivalent bandwidth is determined depending on and in relation to the capacity of the system, the maximum and the average bit rate of the <b>packet</b> <b>stream,</b> the variance of the bit rate, packet delay, and other important and relevant parameters for a given service [38, 39].|$|E
40|$|Abstract—We {{consider}} {{congestion control}} for transport layer <b>packet</b> <b>streams</b> which use error-correction coding {{to recover from}} packet loss. We introduce a modified AIMD approach, develop an approximate mathematic model suited to performance analysis, and present extensive experimental measurements both in the lab and in the “wild ” to evaluate performance. Our measurements highlight the potential for remarkable performance gains when using coded transports. I...|$|R
50|$|Resource Reservation Protocol - Traffic Engineering is an {{extension}} of the resource reservation protocol (RSVP) for traffic engineering. It supports the reservation of resources across an IP network. Applications running on IP end systems can use RSVP to indicate to other nodes the nature (bandwidth, jitter, maximum burst, and so forth) of the <b>packet</b> <b>streams</b> they want to receive. RSVP runs on both IPv4 and IPv6.|$|R
40|$|Abstract—We study <b>packet</b> <b>streaming</b> over an erasure channel with delayed feedback. We {{consider}} the lag in playback between the sender and the receiver as the performance criterion and propose and analyze schemes {{to minimize the}} lag. We show that at lower delays in feedback, purely retransmission based schemes are better than random linear coding schemes and also analyze the tradeoff of the lag with the delay in feedback...|$|R
40|$|In {{this paper}} we {{construct}} a coalgebra for an {{intrusion detection system}} todescribe the behaviour of a <b>packet</b> <b>stream</b> together with selected actions in the case ofintrusions. We start with {{an extension of the}} notion of the many-typed signature to thegeneralised signature and we construct the category of packets as a basic structure of ourapproach. A defined endofunctor captures the expected behaviour of the <b>packet</b> <b>stream.</b> Theconstructed coalgebra enables the description of the behaviour of the packet streamtogether with the reaction to intrusions...|$|E
40|$|Primary user (PU) {{activities}} can significantly {{impact on the}} quality of service of secondary user (SU) sharing a common channel. Expressions of forced termination and blocking probabilities for the SU packets with a fixed length header and exponentially distributed payload length are derived. The optimal mean payload length which maximizes packet throughput is also investigated. Numerical results are given which compare exponentially distributed payload length with fixed size payload length. The results show that although exponentially distributed payload has both lower blocking and forced termination probability, this type of <b>packet</b> <b>stream</b> actually has lower throughput than the fixed size <b>packet</b> <b>stream,</b> given the same payload intensity. Simulation results are also included. ...|$|E
3000|$|In {{order to}} adapt the H. 264 /AVC <b>packet</b> <b>stream</b> to the {{requirements}} of our IEEE 802.11 p transceiver, it was necessary to configure the following parameters of the encoder properly in order to extract the video stream: [...]...|$|E
50|$|By itself, small packets {{will not}} evade any IDS that reassembles <b>packet</b> <b>streams.</b> However, small <b>packets</b> {{can be further}} {{modified}} in order to complicate reassembly and detection. One evasion technique is to pause between sending parts of the attack, hoping that the IDS will time out before the target computer does. A second evasion technique is to send the packets out of order, confusing simple packet re-assemblers but not the target computer.|$|R
50|$|Packet Editing is the {{modification}} of created or captured packets. This involves modifying packets in manners which are {{difficult or impossible}} {{to do in the}} Packet Assembly stage, such as modifying the payload of a packet. Programs such as Ostinato, Netdude allow a user to modify recorded packets' fields, checksums and payloads quite easily. These modified packets can be saved in <b>packet</b> <b>streams</b> which may be stored in pcap files to be replayed later.|$|R
40|$|We {{consider}} {{the problem of}} approximating the frequency of frequently occurring elements in a stream of length n using only a memory of size n. This models the process of gathering statistics on Internet <b>packet</b> <b>streaming</b> using a memory that is small relative {{to the number of}} classes (e. g. IP addresses) of packets. We show that when some data item a occurs an times in a stream of length n, the FREQUENT algorithm of Demaine et al...|$|R
