354|1864|Public
25|$|In minimal {{microkernel}} {{just some}} very basic policies are included, and its mechanisms allows what is running {{on top of}} the kernel (the remaining part of the operating system and the other applications) to decide which policies to adopt (as memory management, high level <b>process</b> <b>scheduling,</b> file system management, etc.). A monolithic kernel instead tends to include many policies, therefore restricting the rest of the system to rely on them.|$|E
2500|$|... sys {{operating}} system [...] "kernel", handling memory management, <b>process</b> <b>scheduling,</b> system calls, etc.|$|E
50|$|<b>Process</b> <b>scheduling</b> is preemptive. The {{scheduler}} {{is called}} either by a timer or by API services.|$|E
5000|$|Consider 3 {{periodic}} <b>processes</b> <b>scheduled</b> on {{a preemptive}} uniprocessor. The execution times and periods are {{as shown in}} the following table: ...|$|R
40|$|<b>Process</b> flow <b>{{scheduling}}</b> is {{a concept}} that refers to the scheduling of flow shop <b>process</b> plants, whose <b>scheduling</b> calculations are guided by the process structure. In a wide variety of high-volume process industries, the <b>process</b> flow <b>scheduling</b> concept implies an integrated structure for planning and scheduling. This integrated vision of the planning function and the very particular characteristics of the process industry production environment challenge the application of the most traditional approaches to support planning/scheduling activities. We are working with the aim of developing a conceptual system foundation to support <b>process</b> flow <b>scheduling.</b> We started from a grass roots study of the current process flow planning/scheduling practices and we applied an object oriented analysis and design methodology to design a system to support <b>process</b> flow <b>scheduling.</b> Essentially, the system supports a <b>process</b> flow <b>scheduling</b> model {{that can be used to}} instantiate production resources of a particular industry, the plant structure and the products with their respective production processes. In this way, the particular scheduling problem of a production order set will be instantiated. In this work we describe the <b>process</b> flow <b>scheduling</b> problem, a <b>process</b> flow <b>scheduling</b> support system architecture, a general ontology of the <b>process</b> flow <b>scheduling,</b> an object oriented design of the system and some implementation details. Eje: Sistemas operativo...|$|R
40|$|With {{the spread}} of the Internet, {{services}} that communicate to other services are increasing. Multimedia applications such as video on demand also ask for network Quality of Service (QoS). Thus, operating systems have to guarantee the allocation of computer resources to services. The computer resources are CPU, disk, network devices and so on. We suppose that the communications have to be controlled well, because services using network are increasing. This paper proposes the communication bandwidth control mechanism by regulating program execution speed. Our proposed mechanism is based on the <b>process</b> <b>schedule</b> method for regulating program execution speed. In the <b>process</b> <b>schedule</b> method, the operating system reserves the amount of CPU time of target processes and guarantees the allocation of CPU time on a sending host. Our proposed mechanism can guarantee a required data rate of target processes by allocating enough CPU time for communications. Because operating systems manage computer resources, they guarantee the allocation of CPU time if the <b>process</b> <b>schedule</b> method is implemented. The allocation of CPU time is not almost affected by non-target processes. This paper introduces the <b>process</b> <b>schedule</b> method and the implementation of it. This paper also shows how to control the communication bandwidth of target processes. Then this paper describes about an evaluation of our proposed mechanism...|$|R
5000|$|SAP Central <b>Process</b> <b>Scheduling</b> by Redwood (SAP CPS), is an {{event-driven}} process scheduler {{incorporated into}} SAP ERP components.|$|E
5000|$|Two-level {{scheduling}} is {{a computer}} science term to describe a method to more efficiently perform <b>process</b> <b>scheduling</b> that involves swapped out processes.|$|E
50|$|Job {{scheduling}} {{should not}} be confused with <b>process</b> <b>scheduling,</b> which is the assignment of currently running processes to CPUs by the operating system.|$|E
5000|$|<b>Process</b> operations: <b>scheduling</b> <b>process</b> networks, multiperiod {{planning}} and optimization, data reconciliation, real-time optimization, flexibility measures, fault diagnosis ...|$|R
5000|$|The {{agreement}} {{does not}} contain formal mechanisms for re-negotiation. Trends in international law regarding public participation and access to information should inform the re-negotiation <b>process,</b> <b>scheduled</b> for 2004.|$|R
50|$|The first <b>process</b> <b>scheduled</b> by EDF is P2, {{because its}} period is shortest, and {{therefore}} it has the earliest deadline. Likewise, when P2 completes, P1 is scheduled, followed by P3.|$|R
50|$|The {{software}} (OpenVPN clients) {{can be used}} also, {{that provides}} the protocol stack, file system, and <b>process</b> <b>scheduling.</b> OpenVPN uses SSL protocol which is generally more secure than Layer 2 Tunnel Protocol's PPTP.|$|E
50|$|Scheduling is {{the process}} of arranging, {{controlling}} and optimizing work and workloads in a production process or manufacturing <b>process.</b> <b>Scheduling</b> is used to allocate plant and machinery resources, plan human resources, plan production processes and purchase materials.|$|E
50|$|A {{wide variety}} of {{algorithms}} and approaches have been applied to batch <b>process</b> <b>scheduling.</b> Early methods, which were implemented in some MRP systems assumed infinite capacity and depended only on the batch time. Such methods did not account for any resources, and would produce infeasible schedules.|$|E
5|$|The {{modernisation}} {{and integration}} of the eastern German economy is a long-term <b>process</b> <b>scheduled</b> to last until the year 2019, with annual transfers from west to east amounting to roughly $80billion.|$|R
40|$|Variant task {{solution}} of getting optimal <b>process</b> <b>schedule</b> in agriculture {{is offered by}} game approach. Agriculture business process feature is presence allow set of time interval doing operation and alternative strings of operations. ? ??????? ???????? ??????? ????????? ??????? ??????? ?????? ??????????? ???????????? ?????????? ??? ??????? ??????-????????? ? ?????????? ????? ????????? ????????????. ???????????? ????????? ???? ????? ???????? ??????? ????????? ??????????? ?????????? ??????? ?????????? ???????? ? ??????? ?????????????? ??????? ????????...|$|R
50|$|Similarly, when {{referring}} to CPU scheduling, i.e., threads or <b>processes</b> <b>scheduled</b> over one or more available processors or cores, a work-conserving scheduler ensures that processors/cores are not idle if there are processes/threads ready for execution.|$|R
50|$|The S-graph {{framework}} is {{an approach to}} solving batch <b>process</b> <b>scheduling</b> problems in chemical plants. S-graph is suited for the problems with a non-intermediate storage (NIS) policy, which often appears in chemical productions, {{but it is also}} capable of solving problems with an unlimited intermediate storage (UIS) policy.|$|E
50|$|The VPN-1 {{software}} is installed {{on a separate}} operating system, which provides the protocol stack, file system, <b>process</b> <b>scheduling</b> and other features needed by the product. This is different from most other commercial firewall products like Cisco PIX and Juniper firewalls where the firewall {{software is}} part of a proprietary operating system.|$|E
50|$|In {{real-time}} computing, priority inheritance is {{a method}} for eliminating unbounded priority inversion. Using this programming method, a <b>process</b> <b>scheduling</b> algorithm increases the priority of a process (A) to the maximum priority of any other process waiting for any resource on which A has a resource lock (if it {{is higher than the}} original priority of A).|$|E
40|$|This {{presentation}} {{discusses the}} use of unique special provisions in the Contract Information Book (CIB). New reporting requirements, formatting for local agenciesâ€™ unique special provisions as well as utility special provisions will be discussed. <b>Processes,</b> <b>schedules</b> and risks associated with the process will be covered...|$|R
40|$|Abstract. This paper explores how <b>process</b> {{pipeline}} <b>scheduling</b> {{may become}} a viable strategy for executing workflows. It first details a workflow optimization and execution algorithm that reduces runtime space. The optimization strategy pipelines the communication between as many processes as possible, {{within the bounds of}} the storage space available, and depends on generic properties of datasets and processes. Then, the paper proves that the <b>process</b> pipeline <b>scheduling</b> problem is NP-Complete. Finally, it presents a greedy <b>process</b> pipeline <b>scheduling</b> algorithm which has a viable performance. 1...|$|R
50|$|Lastly, instructor-led {{training}} {{back office}} management can be optimized through dedicated software which streamline all <b>processes</b> (<b>scheduling,</b> logistics, costs and budget management, administration, reporting, etc.) {{such as a}} training management system. This allows training organizations to improve the efficiency of their ILT and optimize their training budget.|$|R
50|$|Many {{operating}} systems support multitasking which enables many computer programs {{to appear to}} run simultaneously on one computer. Operating systems may run multiple programs through <b>process</b> <b>scheduling</b> - a software mechanism to switch the CPU among processes often so users can interact with each program while it runs. Within hardware, modern day multiprocessor computers or computers with multicore processors may run multiple programs.|$|E
50|$|OS4000 {{supports}} a fully mixed set of <b>process</b> <b>scheduling</b> {{within the same}} system, from hard real-time processes, through soft real-time, time-shared, and background. Given that OS4000 also includes full program development and test/debug facilities, this made OS4000 ideal for developing and deploying real-time applications such as process control and high speed (at the time) data communications all within one system.|$|E
5000|$|The <b>process</b> <b>{{scheduling}}</b> state, e.g. {{in terms}} of [...] "ready", [...] "suspended", etc., and other scheduling information as well, like a priority value, {{the amount of time}} elapsed since the process gained control of the CPU or since it was suspended. Also, in case of a suspended process, event identification data must be recorded for the event the process is waiting for.|$|E
50|$|Principal {{photography}} for {{the first}} film was confirmed to have begun in New York City with an original shooting schedule meant to have occurred from September 25 to December 5. with the filming <b>process</b> <b>scheduled</b> to continue in and around New York City and greater New York area.|$|R
40|$|The article {{deals with}} the problem of traffic control at a large {{railroad}} station. We offer the approach and solutions to automate several tasks of operational control at the station. Methods: We studied the problem of planning the shunting work, the design of daily <b>process</b> <b>schedule</b> of station, selection and assembling the routes. Results: The algorithmic solution for design of daily <b>process</b> <b>schedule</b> of the station was developed. Through this, the design process is user friendly and easy, as well as a decision on the handling of trains in complex situations and exceptions is flexible and efficient. Practical implications: Algorithmic solution and results of research were implemented in software for train dispatcher's workstation. This software makes the control work simple, reduces the human errors and improves the safety of control...|$|R
5000|$|Initial patches for the autogroup feature tied {{grouping}} to a tty (terminal), but the eventually merged patch {{settled on}} an implementation that tied groups to sessions created via the [...] system call. The autogroup feature implements task group creation only for fair class tasks (that is, <b>processes</b> <b>scheduled</b> {{according to the}} default SCHED_OTHER policy, but not, for example, <b>processes</b> <b>scheduled</b> under realtime policies) and, as such, leaves the way open for enhancement. Even at this basic implementation this patch can make Linux on the desktop a reality {{for all those who}} have found desktop performance to be less than desired.As Linus Torvalds put it: So I think this is firmly one of those [...] "real improvement" [...] patches.Good job. Group scheduling goes from [...] "useful for some specific server loads" [...] to [...] "that's a killer feature".|$|R
5000|$|The Resource-Task Network (RTN) is {{a unified}} {{framework}} for the description and solution {{of a variety of}} <b>process</b> <b>scheduling</b> problems. It was developed by Prof. Costas Pantelides [...] at the Centre for Process Systems Engineering, Imperial College of Science, Technology and Medicine in London, U.K. The RTN allows the development of simple mathematical programming formulations based on the uniform characterisation of all available resources.|$|E
5000|$|The VAX 11/782, code-named [...] "Atlas", is a dual-processor VAX-11/780 {{introduced}} in 1982. Both processors {{share the same}} MA780 multiport memory bus and the system operates asymmetrically, with the primary CPU performing all I/O operations and <b>process</b> <b>scheduling</b> with the second, attached processor only used for additional computationally-intensive work. For multistream computation-intensive tasks the system delivers up to 1.8 times {{the performance of a}} VAX 11/780.|$|E
50|$|In minimal {{microkernel}} {{just some}} very basic policies are included, and its mechanisms allows what is running {{on top of}} the kernel (the remaining part of the operating system and the other applications) to decide which policies to adopt (as memory management, high level <b>process</b> <b>scheduling,</b> file system management, etc.). A monolithic kernel instead tends to include many policies, therefore restricting the rest of the system to rely on them.|$|E
50|$|Cron <b>process</b> for <b>scheduling</b> jobs {{to run at}} a {{particular}} time.|$|R
5000|$|Cron <b>process</b> for <b>scheduling</b> jobs {{to run on}} a {{particular}} date.|$|R
40|$|Designing System-on-a-Chip (SoC) using {{system-level}} languages {{is becoming}} a standard in industry. However, the non-deterministic semantics of such parallel languages could yield failures {{that are hard to}} debug. In this paper, we present a new approach that facilitates debugging of SoC designs written in SystemC using a method that automatically isolates failure-inducing <b>process</b> <b>schedules...</b>|$|R
