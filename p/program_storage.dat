80|362|Public
25|$|The {{competitive}} edge for Dorsey's Micom 2000 was that, {{unlike many other}} machines, it was truly programmable. The Micom machine countered the problem of obsolescence by avoiding the limitations of a hard-wired system of <b>program</b> <b>storage.</b> The Micom 2000 utilized RAM, which was mass-produced and totally programmable. The Micom 2000 {{was said to be}} a year ahead of its time when it was introduced into a marketplace that represented some pretty serious competition such as IBM, Xerox and Wang Laboratories.|$|E
5000|$|The HP-65 added programmability, with <b>program</b> <b>storage</b> on {{magnetic}} cards.|$|E
50|$|However, many early {{computers}} did {{not support}} such a flat memory model — in particular, Harvard architecture machines force <b>program</b> <b>storage</b> to be completely separate from data storage.Many modern DSPs (such as the Motorola 56000) have three separate storage areas — <b>program</b> <b>storage,</b> coefficient storage, and data storage. Some commonly used instructions fetch from all three areas simultaneously — fewer storage areas (even if there were the same total bytes of storage) would make those instructions run slower.|$|E
5000|$|OLD - to copy a {{previously}} named <b>program</b> from <b>storage</b> to memory ...|$|R
40|$|This paper {{describes}} a lightweight software library {{to solve the}} challenges [6], [3], [1], [5], [2] of <b>programming</b> <b>storage</b> class memory (SCM). It provides primitives to demarcate failure-atomic code regions. SCM loads and stores within each demarcated code region (called a “wrap”) are routed through the library, which buffers updates and transmits them to SCM locations asynchronously while allowing their speedy propagation from writers to readers through CPU caches...|$|R
40|$|Previous {{reports have}} {{established}} that a {{program can be}} written in the Ada language such that the <b>program's</b> <b>storage</b> management requirements are determinable prior to its execution. Specific guidelines for ensuring such deterministic usage of Ada dynamic storage requirements are described. Because requirements may vary from one application to another, guidelines are presented in a most-restrictive to least-restrictive fashion to allow the reader to match appropriate restrictions to the particular application area under investigation...|$|R
50|$|Early {{models of}} PIC had {{read-only}} memory (ROM) or field-programmable EPROM for <b>program</b> <b>storage,</b> some with provision for erasing memory. All current models use flash memory for <b>program</b> <b>storage,</b> and newer models allow the PIC to reprogram itself. Program memory and data memory are separated. Data memory is 8-bit, 16-bit, and, in latest models, 32-bit wide. Program instructions vary in bit-count by family of PIC, {{and may be}} 12, 14, 16, or 24 bits long. The instruction set also varies by model, with more powerful chips adding instructions for digital signal processing functions.|$|E
50|$|Some {{computers}} have several identical memory banks of RAM, and use bank switching to switch between them. Harvard architecture {{computers have}} (at least) {{two very different}} banks of memory, one for <b>program</b> <b>storage</b> and other for data storage.|$|E
5000|$|The Texas Instruments TI-58/TI-58C/TI-59 calculators were programmable, and <b>program</b> <b>storage</b> {{took the}} form of a {{sequence}} of codes which (mostly) corresponded to the position of keys on the calculator keypad. Here is a simplified diagram of the basic key layout: ...|$|E
5000|$|... {{argues for}} lazy {{evaluation}} {{as a mechanism}} for improving program modularity through separation of concerns, by easing independent implementation of producers and consumers of data streams. Launchbury 1993 [...] describes some difficulties that lazy evaluation introduces, particularly in analyzing a <b>program's</b> <b>storage</b> requirements, and proposes an operational semantics to aid in such analysis. Harper 2009 proposes including both strict and lazy evaluation in the same language, using the language's type system to distinguish them.|$|R
5000|$|... [...] {{retrieve}} a previously named <b>program</b> from permanent <b>storage</b> ...|$|R
5000|$|... #Subtitle level 2: Channel <b>programs</b> {{in virtual}} <b>storage</b> systems ...|$|R
50|$|Many early computers, {{such as the}} Atanasoff-Berry computer, {{were not}} reprogrammable. They {{executed}} a single hardwired program. As there were no program instructions, no <b>program</b> <b>storage</b> was necessary. Other computers, though programmable, stored their programs on punched tape, which was physically fed into the machine as needed.|$|E
50|$|The Atmel AVR {{instruction}} set is the machine language for the Atmel AVR, a modified Harvard architecture 8-bit RISC single chip microcontroller which {{was developed by}} Atmel in 1996. The AVR {{was one of the}} first microcontroller families to use on-chip flash memory for <b>program</b> <b>storage.</b>|$|E
50|$|This {{technique}} may be {{more difficult}} to implement in multitasking systems using shared <b>program</b> <b>storage</b> (the interrupt may occur on a different thread, requiring resurrection of the original instruction for that thread). Also, if the program resides in protected memory, overwriting of instructions may be prevented.|$|E
40|$|Concurrent {{processes}} can be {{used both}} for programming computation and for <b>programming</b> <b>storage.</b> Previous implementations of Flat GHC, however, have been tuned for computation-intensive programs, and perform poorly for storage-intensive programs (such as programs implementing reconfigurable data structures using processes and streams) and demand-driven programs. This paper proposes an optimization technique for programs in which processes are almost always suspended. The technique compiles unification for data transfer into message passing. Instead of {{reducing the number of}} process switching operations, the technique optimizes the cost of each process switching operation and reduces the number of cons operations for data buffering...|$|R
40|$|Estimating {{the fault}} rate {{function}} Paging activity {{can be a}} major factor in determining whether a software workload will run on a given computer system. A program’s paging behavior is difficult to predict because it depends not only on the workload processed by the program, but also on the level of storage contention of the processor. A program’s fault rate function relates storage allocation to the page fault rate experienced while processing a given workload. Thus, with the workload defined, the fault rate function can be used to see how the <b>program’s</b> <b>storage</b> allocation is affected by varying levels of storage contention, represente...|$|R
40|$|This {{document}} {{consists of}} viewgraphs from the presentations at the conference. Topics included are: DOE records management overview, NIRMA and ARMA resources, NARA records management training, potential quality assurance records, filing systems, organizing and indexing technical records, DOE-HQ initiatives, IRM reviews, status of epidemiologic inventory, disposition of records and personal papers, inactive records storage, establishing administrative records, managing records at Hanford, electronic mail [...] legal and records issues, NARA-GAO reports status, consultive selling, automated indexing, decentralized approach to scheduling at a DOE office, developing specific records management <b>programs,</b> <b>storage</b> and retrieval at Savannah River Plant, an optical disk case study, and {{special interest group}} reports...|$|R
50|$|General eXchange Format (GXF), is a file {{exchange}} format for thetransfer of simple and compound clips between television <b>program</b> <b>storage</b> systems. It is a container format that can contain Motion JPEG (M-JPEG), MPEG, or DV-based video compression standards, with associated audio, time code, and user data that may include user-defined metadata.|$|E
50|$|With the {{availability}} and reference to a compiler listing of the program together with a branch trace, the full path of executed instructions can be reconstructed. With a lot more effort, the full path can even be reconstructed with a memory dump (containing the <b>program</b> <b>storage)</b> and a branch trace.|$|E
5000|$|Introduced at the 1965 New York Worlds Fair, the Programma 101 was a {{printing}} programmable calculator described in advertisements as a [...] "desktop computer". It was manufactured by the Italian company Olivetti and invented by the Italian engineer Pier Giorgio Perotto, {{inventor of the}} magnetic card system for <b>program</b> <b>storage.</b>|$|E
50|$|Cohen {{has acted}} as a {{consultant}} to the EPA’s Superfund <b>program,</b> underground <b>storage</b> tank <b>program</b> and Region II management. Along with William Eimicke he has undertaken management consulting and training for a number of government and nonprofit organizations.|$|R
50|$|Synchronization <b>programs</b> for {{distributed}} <b>storage</b> models, however, {{are only}} useful once record standardization has occurred.|$|R
40|$|Cloud {{computing}} is a {{model for}} enabling convenient, on-demand network access to a shared pool of configurable computing resources (eg networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction. It has become a significant technology trend, and many experts expect that cloud computing will reshape information technology (IT) processes and the IT marketplace. With the cloud computing technology, users {{use a variety of}} devices, including PCs, laptops, smart phones, and PDAs to access <b>programs,</b> <b>storage,</b> and application-development platforms over the Internet, via services offered by cloud computing providers. This paper presents an overview of cloud computing technology- deployment models, classes and characteristics...|$|R
50|$|AVR is {{a family}} of {{microcontrollers}} developed by Atmel beginning in 1996. These are modified Harvard architecture 8-bit RISC single-chip microcontrollers. AVR {{was one of the}} first microcontroller families to use on-chip flash memory for <b>program</b> <b>storage,</b> as opposed to one-time programmable ROM, EPROM, or EEPROM used by other microcontrollers at the time.|$|E
50|$|Xtreme MP3 Player: The MP3 player {{plugs into}} the back of the Cybiko Xtreme. It has a slot for one MMC memory card. The MP3 player can only be {{controlled}} from the Cybiko. Memory from the MP3 player can also be addressed from the Cybiko and used for data and <b>program</b> <b>storage.</b>|$|E
50|$|Programmable calculators are calculators {{that can}} {{automatically}} {{carry out a}} sequence of operations under control of a stored program, much like a computer. The first programmable calculators such as the IBM CPC used punched cards or other media for <b>program</b> <b>storage.</b> Hand-held electronic calculators store programs on magnetic strips, removable read-only memory cartridges, or in battery-backed read/write memory.|$|E
5000|$|In 1993, Launchbury {{provided}} a formal description of lazy evaluation, addressing challenges in analyzing a <b>program’s</b> <b>storage</b> requirements. The operational semantics is widely cited in later research on Haskell. In {{the context of}} the Glasgow Haskell Compiler team, Launchbury established an effective partnership with Simon L. Peyton Jones to write a number of papers that dramatically influenced the design of Haskell. Their 1995 paper on State in Haskell introduced the “IO monad” as a mathematically-clean practical way of expressing effects on the external world, and solidified the “do-notation” Launchbury had introduced earlier. Their papers on unboxed values and removal of intermediate data structures [...] addressed many of the efficiency challenges inherent in lazy evaluation.|$|R
5000|$|Perform [...] {{and output}} the {{resulting}} source data block [...] to a viewer <b>program</b> or to <b>storage.</b>|$|R
5000|$|Kansas {{has failed}} {{to prove that the}} {{operation}} of Colorado’s Winter Water <b>Storage</b> <b>Program</b> violates the Compact; and ...|$|R
5000|$|Central Processing Unit (CPU) with an Intel 8080 chip, and an 8251 USART for serial {{communication}} to a modem, printer, or cassette tape interface. The cassette tape interface supported <b>program</b> <b>storage</b> and loading from consumer-grade cassette tape recorders, using either Kansas City standard or higher speed Manchester encoded signals. The board contained 512 bytes of RAM and one 1024-byte ROM.|$|E
50|$|Development of the 2600 was {{strictly}} a paper project until September 1975, when the MOS Technology 6502 processor was released. The 6502 offered the right combinations of features, performance and price {{that made a}} console using ROM cartridges for <b>program</b> <b>storage</b> practical for the first time. Now that such a machine seemed like a real possibility, the design team at Cyan Engineering began serious development.|$|E
5000|$|The most {{noticeable}} {{difference between a}} large CPLD and a small FPGA {{is the presence of}} on-chip non-volatile memory in the CPLD, which allows CPLDs to be used for [...] "boot loader" [...] functions, before handing over control to other devices not having their own permanent <b>program</b> <b>storage.</b> A good example is where a CPLD is used to load configuration data for an FPGA from non-volatile memory.|$|E
50|$|The IBM Storage and Information Retrieval System, {{better known}} by the acronym STAIRS was a <b>program</b> {{providing}} <b>storage</b> and online free-text search of text data. STAIRS ran under the OS/360 operating system under the CICS or IMS transaction monitors, and supported IBM 3270 display terminals.|$|R
40|$|In {{support of}} the DOE thermal and {{chemical}} energy <b>storage</b> <b>program,</b> the solar energy <b>storage</b> <b>program</b> (SERI) provides research on advanced technologies, systems analyses, and assessments of thermal energy storage for solar applications in {{support of the}} Thermal and Chemical Energy <b>Storage</b> <b>Program</b> of the DOE Division of Energy Storage Systems. Currently, research is in progress on direct contact latent heat storage and thermochemical energy storage and transport. Systems analyses are being performed of thermal energy storage for solar thermal applications, and surveys and assessments are being prepared of thermal energy storage in solar applications. A ranking methodology for comparing thermal storage systems (performance and cost) is presented. Research in latent heat storage and thermochemical storage and transport is reported...|$|R
40|$|The common {{features}} of third generation operating systems are surveyed from a general view, {{with emphasis on}} the common abstractions that constitute at least {{the basis for a}} &quot;theory &quot; of operating systems. Properties of specific systems are not discussed except where examples are useful. The technical aspects of issues and concepts are stressed, the nontechnical aspects mentioned only briefly. A perfunctory knowledge of third generation systems is presumed. Key words and phrases: multiprogramming systems, operating systems, supervisory systems, time-sharing systems, <b>programming,</b> <b>storage</b> allocation, memory allocation, processes, concurrency, parallelism, resource allocation, protection CR categories: 1. 3, 4. 0, 4. 30, 6. 20 It has been the custom to divide the era of electronic computing into &quot;generations&quot; whose approximate dates are...|$|R
