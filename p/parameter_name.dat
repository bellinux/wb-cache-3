30|433|Public
25|$|Positional {{parameters}} are the typical ordered {{list of parameters}} that most programming languages use. All parameters may also be passed by using their name in an unordered way. A named-only parameter can only be passed by specifying its name (that is, it never captures a positional argument), and are indicated with a leading : character. Slurpy parameters (indicated by an * before the <b>parameter</b> <b>name)</b> are Perl 6's tool for creating variadic functions. A slurpy hash will capture remaining passed-by-name parameters, whereas a slurpy array will capture remaining passed-by-position parameters.|$|E
2500|$|The {{standard}} {{also allows}} for multiple parameters of the same type {{to be used by}} appending [...] ".1", [...] ".2", etc. to the <b>parameter</b> <b>name,</b> e.g.: ...|$|E
5000|$|Metadata Commands (aIM!) {{which provide}} meta data {{information}} about the measurement, such as the <b>parameter</b> <b>name</b> and units.|$|E
5000|$|As you can see, this {{decreases}} the code readability by rendering Objective-C <b>parameter</b> <b>naming</b> useless. So, {{there is another}} convenient way to write the method calls — the [...] method, which accepts Ruby symbols as <b>parameter</b> <b>names.</b> For example, the previous code can also be written as: ...|$|R
3000|$|Standardized {{vocabulary}} for <b>parameter</b> <b>names.</b> <b>Parameter</b> <b>names</b> {{supplied by}} data providers are mapped {{to the appropriate}} name in the Substance Registry Service, which is EPA’s “authoritative resource for basic information about chemicals, biological organisms, and other substances of interest to EPA and its state and tribal partners.” [6] [...]...|$|R
2500|$|In addition, to {{complement}} optional parameters, {{it is possible}} to explicitly specify <b>parameter</b> <b>names</b> in method calls, allowing to selectively pass any given subset of optional parameters for a method. The only restriction is that <b>named</b> <b>parameters</b> must be placed after the unnamed <b>parameters.</b> <b>Parameter</b> <b>names</b> can be specified for both optional and required parameters, and can be used to improve readability or arbitrarily reorder arguments in a call. For example: ...|$|R
5000|$|In Transact-SQL, [...] "" [...] precedes a local {{variable}} or <b>parameter</b> <b>name.</b> System variables (known as global variables) are distinguished by a [...] "" [...] prefix.|$|E
5000|$|The {{standard}} {{also allows}} for multiple parameters of the same type {{to be used by}} appending [...] ".1", [...] ".2", etc. to the <b>parameter</b> <b>name,</b> e.g.: ...|$|E
50|$|Notice {{that these}} {{characters}} have different meanings than when used {{directly in the}} shell. Angle brackets may be omitted when confusing the <b>parameter</b> <b>name</b> with a literal string is not likely.|$|E
50|$|All commands, <b>parameter</b> <b>names</b> {{and values}} {{have to be}} in capitals, except for USS filenames.|$|R
50|$|For consistency, this usage is also {{permitted}} in non-public settings such as local variables, <b>parameter</b> <b>names,</b> and private members.|$|R
50|$|Some servers support seeking via {{additional}} modules only, {{they are}} specified below. Seeking <b>parameter</b> <b>names</b> {{are written in}} italic.|$|R
5000|$|... ${request.{{parameters}}.id}. The keyword request {{refers to}} the HTTP Servlet Request. parameters {{refers to the}} Request parameters. id refers to the <b>parameter</b> <b>name.</b> HTTP Servlet Request attributes can be also accessed as ${request.attributes.id}.|$|E
50|$|A {{function}} call using named parameters differs from a regular {{function call}} {{in that the}} values are passed by associating each one with a <b>parameter</b> <b>name,</b> instead of providing an ordered list of values.|$|E
50|$|For {{other types}} of media files such as MP4 or MKV, web servers must be capable of {{handling}} a special offset parameter. The offset <b>parameter</b> <b>name</b> differs for various servers {{so it must be}} specified in player settings.|$|E
5000|$|This {{provides}} mnemonic <b>parameter</b> <b>names</b> and implements pass-by-value semantics. The [...] keyword {{indicates that}} the following variables are lexically scoped to the containing block.|$|R
5000|$|Some {{drawings}} {{call out}} dimensions with <b>parameter</b> <b>names</b> (that is, variables, such a [...] "A", [...] "B", [...] "C"), then tabulate rows of parameter values for each part number.|$|R
5000|$|Finally, {{there are}} CertainTrust [...] and CertainLogic. Both {{share a common}} representation, which is {{compatible}} with subjective logic, but based on three independent <b>parameters</b> <b>named</b> 'average rating', 'certainty', and 'initial expectation'.|$|R
50|$|An infobox {{may be used}} {{to improve}} the {{appearance}} of an article on Wikipedia; They are used on similar articles to ensure consistency of presentation by using a common format. Originally, infoboxes (and templates in general) were used for page layout purposes. The guideline Wikipedia:Manual of Style/Infoboxes has details of infoboxes. An infobox may be transcluded into an article by specifying the value for some or all of its parameters. The <b>parameter</b> <b>name</b> used must be the same as that specified in the infobox template, but any value may be associated to it. The name is delimited from the value by an equals sign. The <b>parameter</b> <b>name</b> may be regarded as an attribute of the article's subject.|$|E
50|$|For each {{abstraction}} {{that defines}} a function, build the information {{required to make}} decisions on dropping names. This information describes each parameter; the <b>parameter</b> <b>name,</b> the expression for the actual value, and an indication that all the expressions have the same value.|$|E
50|$|Retrieve the {{parameter}} {{lists for}} the expression, and the parameter. Retrieve a parameter record from the parameter list from the expression, and {{check that the}} current parameter value matches this parameter. Record the value for the <b>parameter</b> <b>name</b> for use later in checking.|$|E
5000|$|In addition, to {{complement}} optional parameters, {{it is possible}} to explicitly specify <b>parameter</b> <b>names</b> in method calls, allowing to selectively pass any given subset of optional parameters for a method. The only restriction is that <b>named</b> <b>parameters</b> must be placed after the unnamed <b>parameters.</b> <b>Parameter</b> <b>names</b> can be specified for both optional and required parameters, and can be used to improve readability or arbitrarily reorder arguments in a call. For example:Stream OpenFile(string name, FileMode mode = FileMode.Open,FileAccess access = FileAccess.Read) { ... }OpenFile("file.txt"); // use default values for both [...] "mode" [...] and [...] "access"OpenFile("file.txt", mode: FileMode.Create); // use default value for [...] "access"OpenFile("file.txt", access: FileAccess.Read); // use default value for [...] "mode"OpenFile(name: [...] "file.txt", access: FileAccess.Read, mode: FileMode.Create);// <b>name</b> all <b>parameters</b> for extra readability,// and use order different from method declaration ...|$|R
30|$|Conventionally the {{parameters}} {{in this model}} are J_ 1 (instead of J^ 0) and J_ 2 (instead of K^ 0), and hence the name for the model. However, to simplify notation, we use the above <b>parameter</b> <b>names.</b>|$|R
5000|$|The Sommerfeld <b>parameter</b> , <b>named</b> after Arnold Sommerfeld, is a {{dimensionless}} quantity used in nuclear astrophysics in {{the calculation of}} reaction rates between two nuclei and also appears {{in the definition of}} the astrophysical S-factor. It is defined as ...|$|R
50|$|In {{the example}} above, the call is {{ambiguous}} {{because it could}} correspond to either Ada.Text_IO.New_Line or A.New_Line with the default parameter value. There {{are two ways to}} resolve the ambiguity. One is to specify the package name, and the other is to specify the <b>parameter</b> <b>name</b> explicitly, if the subprogram to call has parameters. The four examples below all resolve the ambiguity.|$|E
50|$|The AS/400 developer's {{solution}} to this problem was the command object (*CMD). While the parameters on the command can be specified in any order, each parameter is defined to be passed in a specific order to the program. The programmer can also define, among other things, the parameter's data type, unique <b>parameter</b> <b>name,</b> descriptive text (for prompting), default value (used only if the parameter isn't specified during execution), if the values are restricted to a certain set or range, if the data entered should be changed to another value before calling the program, etc.|$|E
5000|$|The {{semantic}} {{relationship between the}} subject and object is established by the predicate. In the example infobox, the triple ("crostata", type, [...] "tart") indicates that a crostata {{is a type of}} tart. The article's topic is used as the subject, the <b>parameter</b> <b>name</b> is used as the predicate, and the parameter's value as the object. Each type of infobox is mapped to an ontology class, and each property (parameter) within an infobox is mapped to an ontology property. These mappings are used when parsing a Wikipedia article to extract data.|$|E
5000|$|Locate {{the name}} and start {{building}} the parameter list for the name, filling in the formal <b>parameter</b> <b>names.</b> Also receive any actual parameter list {{from the body of}} the expression, and return it as the actual parameter list from this expression ...|$|R
50|$|Rust {{provides}} string interpolation via the std::fmt module, {{which is}} interfaced with through various macros such as format!, write!, and print!. These macros are converted into Rust source code at compile-time, whereby each argument interacts with a formatter. The formatter supports positional <b>parameters,</b> <b>named</b> <b>parameters,</b> argument types, and defining various formatting traits.The output {{of each of}} these will be: There are 4 apples and 3 bananas.|$|R
3000|$|Reduced-dimension STAP is {{frequently}} employed in airborne radar systems to detect moving {{targets in the}} presence of fixed clutter, which is widely used in practical engineering application. In this paper, we proposed a novel RD STAP methodology. A <b>parameter</b> <b>named</b> ADC [...]...|$|R
5000|$|Positional {{parameters}} are the typical ordered {{list of parameters}} that most programming languages use. All parameters may also be passed by using their name in an unordered way. A named-only parameter can only be passed by specifying its name (that is, it never captures a positional argument), and are indicated with a leading [...] character. Slurpy parameters (indicated by an [...] before the <b>parameter</b> <b>name)</b> are Perl 6's tool for creating variadic functions. A slurpy hash will capture remaining passed-by-name parameters, whereas a slurpy array will capture remaining passed-by-position parameters.|$|E
50|$|Bash, zsh {{and fish}} offer <b>parameter</b> <b>name</b> {{completion}} through a definition {{external to the}} command, distributed in a separate completion definition file. For command parameter name/value completions, these shells assume path/filename completion if no completion is defined for the command. Completion {{can be set up}} to suggest completions by calling a shell function. The fish shell additionally supports parsing of man pages to extract parameter information {{that can be used to}} improve completions/suggestions. In PowerShell, all types of commands (cmdlets, functions, script files) inherently expose data about the names, types and valid value ranges/lists for each argument. This metadata is used by PowerShell to automatically support argument name and value completion for built-in commands/functions, user-defined commands/functions as well as for script files. Individual cmdlets can also define dynamic completion of argument values where the completion values are computed dynamically on the running system.|$|E
40|$|NBACK=number of back-forecasted residuals,NDIFF=degree of differencing, NLAG=number of autocorrelations,NMA=number of MA parameters, NSAR=number of {{seasonal}} AR params, NSDIFF=degree {{of seasonal}} differencing, NSMA=number of seasonal MA parameters, NSPAN=span of seasonal, PLOT, RELAX, ROOTS, START, nonlinear options) [series name] [START <b>parameter</b> <b>name</b> parameter value [...] ] [FIX <b>parameter</b> <b>name</b> parameter value [...] ] [ZERO parameter names [...] . ] [ZFIX parameter names [...] . ]...|$|E
50|$|In a prototype, <b>parameter</b> <b>names</b> are {{optional}} (and in C/C++ have function prototype scope, meaning their scope {{ends at the}} end of the prototype), {{however, the}} type is necessary along with all modifiers (e.g. if it is a pointer or a const parameter).|$|R
50|$|Variable {{completion}} is {{the completion}} of the name of a variable name (environment variable or shell variable).Bash, zsh, and fish have completion for all variable names. PowerShell has completions for environment variable names, shell variable names and — from within user-defined functions — <b>parameter</b> <b>names.</b>|$|R
50|$|The Grüneisen <b>Parameter</b> was <b>named</b> after him.|$|R
