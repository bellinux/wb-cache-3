4|75|Public
5000|$|... 2. MountingFor every colour to be printed, a {{plate is}} made and {{eventually}} {{put on a}} cylinder which {{is placed in the}} printing press. To make a complete picture, regardless of printing on flexible film or corrugated paper, the image transferred from each plate has to register exactly with the images transferred from the other colors. To ensure an accurate picture is made, mounting marks are made on the flexographic plates. These mounting marks can be microdots (down to 0.3 mm) and/or crosses. Special machinery is made for mounting these plates on the printing cylinders to maintain registration. Earle L. Harley invented and patent the Opti-Chek Mounting and <b>Proofing</b> <b>machine</b> enabling the operator to check the registration before going to the press.|$|E
40|$|The {{development}} of a Solar- Photo-Mechanical <b>Proofing</b> <b>Machine</b> has been presented in this paper. Based on the fabrication and operational principles, the device is cheaper to operate, since an energy for its operation is sourced freely from the sun. It is envisaged that the machine will find wide applications in rural areas lacking electricity supplies {{due to the fact}} that the copies produced compared favourably with those printed with the conventional machine...|$|E
40|$|Besides the {{ingredient}} composition, another {{important thing in}} the process of making dough is proofing, ie. dough rising process prior to roasting process. Proofing process requires a stable temperature to ensure that the dough is well rising. The purpose of this research is to make a <b>proofing</b> <b>machine</b> that uses DHT 11 as a temperature sensor. P roportional-Integral-Derivative (PID) controller is implemented to guarantee that the machine remains at the temperature of 35 0 Celcius, in which the fermentation process would success. PID control has been implemented in fluorescent lamp which been set its dim light to generate heat until it reach a predetermined set point value. The temperature was monitored using LCD and set to remain stable with the help of fan. The proofing process will last for 15 minutes which ended by the sound of the buzzer. The testing result shows that the value of,, will reach set point value within 120 seconds. </div...|$|E
5000|$|... 1934: IBM 801The IBM 801 Bank <b>Proof</b> <b>machine</b> {{to clear}} bank checks is introduced. A {{new type of}} <b>proof</b> <b>machine,</b> the 801 lists and {{separates}} checks, endorses them, and records totals. It dramatically improves {{the efficiency of the}} check clearing process.|$|R
5|$|His {{question}} was answered by Gödel's incompleteness <b>proof,</b> Turing's <b>machine</b> and Church's Lambda calculus.|$|R
40|$|Contents Foreword vii AQuickStart [...] . ix I Background 1 1 <b>Proof</b> <b>Machines</b> 3 1. 1 Evolutionoftheprovinceofhumanthought [...] 3 1. 2 Canonicalandnormalforms [...] . 7 1. 3 Polynomialidentities [...] . 8 1. 4 Proofsbyexample? [...] 9 1. 5 Trigonometricidentities [...] . 11 1. 6 Fibonacciidentities [...] 12 1. 7 Symmetric{{function}}identities [...] 12 1. 8 Elliptic function identities [...] 13 2 Tightening the Target 17 2. 1 Introduction [...] 17 2. 2 Identities [...] 21 2. 3 Humanandcomputerproofs;anexample [...] 23 2. 4 AMathematicasession [...] 27 2. 5 AMaplesession [...] 29 2. 6 Whereweareandwhathappensnext [...] 30 2. 7 Exercises [...] 31 3 The Hype...|$|R
40|$|Recently, {{water-based}} inks {{have been}} of more and more interest to the printing and ink industry, because of their environmental benefits. Compared with solvent-based inks, water-based inks have more complex formulations because of their higher surface tensions, lower drying speed, foaming problems, pH balance, and different rheological properties. The transition from solvent-based to waterborne inks has been facilitated by advances in both the chemistry and the printing technologies employed. With the new development in rheology modifiers and their increasing application in water-based gravure inks, a more complete investigation of their chemistry, thickening mechanism and effects on water-based gravure ink systems is necessary. This paper explores the significant effects of various rheology modifiers, including non-associative and associative thickeners, on the rheological properties of a water-based rotogravure ink system. Particular emphasis is given to thickening efficiency (viscosity profiles of each rheology modifier in a model system), pH stability, particle size, system compatibility, temperature stability, and printability on vinyl substrates. Wire-wound lab rods and a Moser Sheet-fed Gravure <b>Proofing</b> <b>Machine</b> were employed to produce printed samples for characterizing {{the performance of the}} formulated inks. The purpose of these investigations is to acquire a complete understanding of rheology modifiers ’ effects on the water-based ink system, as well as to help select appropriate rheology modifiers for water-based ink systems in order to achieve better print quality...|$|E
40|$|We {{will present}} a {{formalization}} of pointfree topology in Martin-Löf's type theory. A notion of point will be introduced and we will show that the points of a Scott topology form a Scott domain. This work follows closely the intuitionistic approach to pointfree topology and domain theory, developed mainly by Martin-Löf and Sambin. The important {{difference is that the}} definitions and <b>proofs</b> are <b>machine</b> checked by the proof assistant ALF...|$|R
50|$|Fine art digital inkjet {{printing}} is printing {{from a computer}} image file directly to an inkjet printer as a final output. It evolved from digital proofing technology from Kodak, 3M, and other major manufacturers, with artists and other printers trying to adapt these dedicated prepress <b>proofing</b> <b>machines</b> to fine-art printing. There was experimentation with many {{of these types of}} printers, the most notable being the IRIS printer, initially adapted to fine-art printing by programmer David Coons, and adopted for fine-art work by Graham Nash at his Nash Editions printing company in 1991. Initially, these printers were limited to glossy papers, but the IRIS Graphics printer allowed the use of a variety of papers that included traditional and non-traditional media. The IRIS printer was the standard for fine art digital printmaking for many years, and is still in use today, but has been superseded by large-format printers from other manufacturers such as Epson and HP that use fade-resistant, archival inks (pigment-based, as well as newer solvent-based inks), and archival substrates specifically designed for fine-art printing.|$|R
50|$|William McCune {{proved the}} {{conjecture}} in 1996, using the automated theorem prover EQP. For a complete {{proof of the}} Robbins conjecture in one consistent notation and following McCune closely, see Mann (2003). Dahn (1998) simplified McCune's <b>machine</b> <b>proof.</b>|$|R
40|$|Article dans revue scientifique avec comité de lecture. International audienceThis article {{presents}} one human <b>proof</b> and three <b>machine</b> <b>proofs</b> of a challenging geometric theorem {{that gives a}} beautiful representation of the area of an arbitrary quadrilateral {{in terms of its}} four sides and four internal angles. These proofs demonstrate the power, capability and features of automated deduction methods and tools, which reduce qualitative difficulty to quantitative complexity versus traditional methods with individual ingenious ideas, for mathematical theorem proving. The present case study not only results in four probably new proofs of a hard theorem but also contributes to understanding the significance of developing effective algorithms and software tools for automated theorem proving in mathematics using advanced computing technology...|$|R
40|$|Abstract. We {{prove that}} the seL 4 {{microkernel}} enforces two high-level access control properties: integrity and authority confinement. Integrity provides an upper bound on write operations. Authority confinement provides an upper bound on how authority may change. Apart from being a desirable security property in its own right, integrity {{can be used as}} a general framing property for the verification of user-level system composition. The <b>proof</b> is <b>machine</b> checked in Isabelle/HOL and the results hold via refinement for the C implementation of the kernel. ...|$|R
5000|$|BOPP is a non-fibrous and non-porous polymer. Compared {{with paper}} {{banknotes}}, banknotes made using BOPP {{are harder to}} tear, more resistant to folding, more resistant to soil, waterproof (and washing <b>machine</b> <b>proof),</b> harder to burn, easier to machine process, and are shreddable and recyclable {{at the end of}} their lives.|$|R
40|$|We define {{physical}} machines as processors {{with physical}} memory and swap memory; in user mode physical machines support address translation. We {{report about the}} formal verification of a complex processor supporting address translation {{by means of a}} memory management unit (MMU). We give a paper and pencil <b>proof</b> that physical <b>machines</b> togethe...|$|R
40|$|In {{this thesis}} we {{consider}} the anti-ferromagnetic Potts model on lattice graphs. A spin system under this model is characterised by an underlying connected graph and two parameters: q, the number of spins, and), = exp(-f 3), where f 3 is the 'inverse temperature'. 1 questions of interest are {{to determine if a}} spin system has strong spatial mixing and if the Glauber dynamics is rapidly mixing on the configuration space. These two properties are closely related, in particular it is known that strong spatial mixing often implies that the Glauber dynamics is rapidly mixing. Rapidly mixing Glauber dynamics implies that there is a fully-polynomial randomised approximation scheme for the partition function. For graphs in which the distance-d neighbourhood of a vertex grows sub-exponentially in d, strong spatial mixing implies that there is a unique infinite-volume Gibbs distribution. We use recursively-constructed couplings to derive mixing bounds for any graph and any temperature. The result improves previously known general mixing bounds. Our main objective is to have results which are applicable to the lattices studied in statistical physics. In this thesis we focus on the square lattice (Z 2), the triangular lattice and the kagome lattice. By considering the geometry of the lattice we are able to achieve better mixing bounds. Rather than constructing recursive couplings from a single recurrence, we use a system of recurrences, which is highly dependent on the geometry of the lattice. For the square lattice we give a proof of strong spatial mixing and rapid mixing for q 2 : 6 and any) [...] We also show that mixing occurs for a larger range of). than was previously known for q = 3, 4 and 5. Certain probabilities that are used in the proof are obtained with computer assistance which makes the <b>proof</b> <b>machine</b> assisted. The anti-ferromagnetic Potts model corresponds to proper colourings when the temperature is zero. By refining the technique of recursively constructing couplings, we provide proofs of mixing for the triangular lattice with q = 9 and). = 0, and the kagome lattice with q = 5 and), = o. This improves previously known mixing bounds. The systems of recurrences we use here are rather large and require a computer to be constructed. This makes the <b>proofs</b> <b>machine</b> assisted. The Glauber dynamics is not necessarily irreducible on the kagome lattice with q = 5 and), = 0 if we impose a boundary condition. However, we show rapid mixing under the free boundary. We also study the mixing time of a systematic scan Markov chain for sampling from the uniform distribution on proper 7 -colourings of a finite rectangular sub-grid of the square lattice. Asystematic scan Markov chain updates finite-size subsets ofvertices in a deterministic order. We use a heuristic-based computation in order to establish a rigorous result about the mixing time. The proof is computer assisted and improves previously known mixing bounds for systematic scan on the square lattice. EThOS - Electronic Theses Online ServiceGBUnited Kingdo...|$|R
40|$|A {{successful}} {{natural language}} interface (NLI) would {{carry on a conversation}} with a user {{in much the same way}} that a human being would [...] -in other words, it would constitute a <b>proof</b> of <b>machine</b> intelligence of the sort required in the Turing test. NLIs have been excellent research vehicles but impractical in application. Too many applications and application plans assume an approximation of the Turing test level of performance, even though it remains quite remote. NLIs with more modest goals, and especially those which aim to supplement, rather than replace alternative interfaces, may nonetheless be useful...|$|R
40|$|We {{present a}} {{solution}} to the verification problem of high-level synthesis. The high-level synthesis system CALLAS takes as input an algorithmic specification, in VHDL, and produces as output an EDIF netlist. Both, the specification and the generated netlist can be interpreted as finite state machine descriptions. Then, in this context, the verification problem is reduced to proving the behavioral equivalence of both machines. For this equivalence proof we use the symbolic verifier of the CVE System (CVE = Circuit Verification Environment). Recent improvements of the verifier allowed equivalence <b>proofs</b> of <b>machines</b> with up to 260 binary state variables...|$|R
5000|$|In the 20th century, {{the study}} of {{mathematical}} logic provided the essential breakthrough that made artificial intelligence seem plausible. The foundations had been set by such works as Boole's The Laws of Thought and Frege's Begriffsschrift. Building on Frege's system, Russell and Whitehead presented a formal treatment of the foundations of mathematics in their masterpiece, the Principia Mathematica in 1913. Inspired by Russell's success, David Hilbert challenged mathematicians of the 1920s and 30s to answer this fundamental question: [...] "can all of mathematical reasoning be formalized?"His question was answered by Gödel's incompleteness <b>proof,</b> Turing's <b>machine</b> and Church's Lambda calculus.|$|R
5000|$|As [...] "Smullyan's ‘Drinkers’ principle" [...] or just [...] "Drinkers' principle" [...] {{it appears}} in H.P. Barendregt's [...] "The quest for correctness" [...] (1996), {{accompanied}} by some <b>machine</b> <b>proofs.</b> Since then it has made regular appearance as an example in publications about automated reasoning; it is sometimes used to contrast the expressiveness of proof assistants.|$|R
40|$|This paper {{presents}} how {{to generate}} {{the implementation of a}} pipelined microprocessor from an arbitrary sequential specification. All necessary forwarding and stalling logic is created automatically. The implementation is provided {{in the language of the}} theorem proving system (PVS). This implementation is translated to the Verilog hardware description language. Furthermore, a mathematical correctness <b>proof</b> for the <b>machine</b> is supplied. This proof is verified by the theorem proving system. ...|$|R
40|$|The paper {{presents}} a formal <b>proof</b> of a <b>machine</b> closed theorem of TLA+ in the theorem proving system Coq. A shallow embedding scheme is employed for the proof which {{is independent of}} concrete syntax. Fundamental concepts need to state that the machine closed theorems are addressed in the proof platform. A useful proof pattern of constructing a trace with desired properties is devised. A number of Coq reusable libraries are established...|$|R
50|$|Nuprl {{was first}} {{released}} in 1984, and was first {{described in detail}} in the book Implementing Mathematics with the Nuprl Proof Development System, published in 1986. Nuprl 2 was the first Unix version. Nuprl 3 provided <b>machine</b> <b>proof</b> for mathematical problems related to Girard's Paradox and Higman's lemma. Nuprl 4, the first version developed for the World Wide Web, was used to verify cache coherency protocols and other computer systems.|$|R
5000|$|In set theory, Jensen's {{covering}} theorem {{states that}} if 0# {{does not exist}} then every uncountable set of ordinals is contained in a constructible set of the same cardinality. Informally this conclusion says that the constructible universe {{is close to the}} universe of all sets. The first proof appeared in [...] Silver later gave a fine structure free <b>proof</b> using his <b>machines</b> and finally [...] gave an even simpler proof.|$|R
50|$|In cryptography, a {{proof of}} {{knowledge}} is an interactive proof in which the prover succeeds in 'convincing' a verifier that the prover knows something. What it means for a machine to 'know something' is {{defined in terms of}} computation. A machine 'knows something', if this something can be computed, given the machine as an input. As the program of the prover does not necessarily spit out the knowledge itself (as is the case for zero-knowledge <b>proofs)</b> a <b>machine</b> with a different program, called the knowledge extractor is introduced to capture this idea. We are mostly interested in what can be proven by polynomial time bounded machines. In this case the set of knowledge elements is limited to a set of witnesses of some language in NP.|$|R
40|$|One can {{construct}} any finite-state machine as {{a cascade}} interconnection of machines whose inputs either permute the states or reset {{them all to}} one state. Each permutation group needed in the construction is a homomorphic image of a group generated {{by the action of}} a set of input sequences on a state subset of the original <b>machine.</b> <b>Proofs</b> of these facts will be given and their application to the Krohn-Rhodes theory described...|$|R
40|$|In this paper, we {{describe}} {{the application of the}} interactive theorem prover Coq to the security analysis of bytecode as used in Java. We provide a generic specification and proof of non-interference for bytecode languages using the Coq module system. We illustrate the use of this formalization by applying it to a small subset of Java bytecode. The emphasis of the paper is on modularity of a language formalization and its analysis in a <b>machine</b> <b>proof...</b>|$|R
40|$|We {{present a}} logical <b>proof</b> that {{computing}} <b>machines,</b> {{and by extension}} physical systems, can never be certain if they possess conscious awareness. This implies that human consciousness {{is associated with a}} violation of energy conservation. We examine the significance that a particular interpretation of quantum mechanics, known as single mind Q (Barrett 1999), might have for the detection of such a violation. Finally we apply single mind Q to the problem of free will as it arises in some celebrated experiments by the neurophysiologist Benjamin Libet...|$|R
40|$|AbstractStructured types, such as C's arrays and structs, present {{additional}} {{challenges in}} pointer program verification. The conventional proof abstractions, multiple independent typed heaps and separation logic, which in previous work {{have been built}} on a low-level memory model for C and shown to be sound, are not directly applicable in verifications. This {{is due to the}} non-monotonic nature of pointer and lvalue validity {{in the presence of the}} unary &-operator. For example, type-safe updates through pointers to fields of a struct break the independence of updates across typed heaps or ∧∗-conjuncts. In this paper we present a generalisation of our earlier formal memory model that captured the low-level features of C's pointers and memory and formed the basis for an expressive implementation of separation logic, with new features providing explicit support for C's structured types. We implement this framework in the theorem prover Isabelle/HOL and all <b>proofs</b> are <b>machine</b> checked...|$|R
40|$|Abstract. Typed Assembly Languages (TALs) {{can be used}} to {{validate}} the safety of assembly-language programs. However, typing rules are usually trusted as axioms. In this paper, we show how to build semantic models for typing judgments in TALs based on an induction technique, so that both the type-safety theorem and the typing rules can be proved as lemmas in a simple logic. We demonstrate this technique by giving a complete model to a sample TAL. This model allows a typing derivation to be interpreted as a machine-checkable safety <b>proof</b> at the <b>machine</b> level. ...|$|R
40|$|Abstract. Origami constructions have {{interesting}} {{properties that}} {{are not covered by}} standard euclidean geometry. Such properties have been shown with the help of computer algebra systems. Proofs performed with computer algebra systems can be accompanied by proof documents, still they lack complete mathematical rigorousity, like the one provided by proof assistant checked proofs. Transforming such <b>proofs</b> to <b>machine</b> checkable <b>proof</b> scripts poses a number of challenges. In this paper we describe issues that arise when proving properties of origami constructions using proof assistant decision procedures. We ex-amine the strength of Gröbner Bases implementations comparing proof assistants {{with each other and with}} the implementations provided in computer algebra systems. We show ad-hoc decision procedures that can be used to optimize the proofs. We show how maximum equilateral triangle inscribed in a square construction can be formalized. We show how a equation system solving mechanism can be embedded in a CAS decision procedure of a proof assistant...|$|R
40|$|The {{existing}} readable machine proving methods {{deal with}} geometry problems using some geometric quantities. In this paper, {{we focus on}} the mass point method which directly deals with the geometric points rather than the geometric quantities. We propose two algorithms, Mass Point Method and Complex Mass Point Method, which can deal with the Hilbert intersection point statements in affine geometry and the linear constructive geometry statements in metric geometry respectively. The two algorithms are implemented in Maple as provers. The results of hundreds of non-trivial geometry statements run by our provers show that the mass point method is efficient and the <b>machine</b> <b>proofs</b> are human-readable. © 2011 Springer-Verlag. The existing readable machine proving methods deal with geometry problems using some geometric quantities. In this paper, {{we focus on the}} mass point method which directly deals with the geometric points rather than the geometric quantities. We propose two algorithms, Mass Point Method and Complex Mass Point Method, which can deal with the Hilbert intersection point statements in affine geometry and the linear constructive geometry statements in metric geometry respectively. The two algorithms are implemented in Maple as provers. The results of hundreds of non-trivial geometry statements run by our provers show that the mass point method is efficient and the <b>machine</b> <b>proofs</b> are human-readable. © 2011 Springer-Verlag...|$|R
60|$|The {{situation}} was growing somewhat strained by this time, and Rob {{did not know}} what the savages would decide to do next; so he thought it best to move away from them, since he was unable to rise to a greater height. He turned the indicator towards the south, where a level space appeared between the trees; but instead of taking that direction he moved towards the northeast, a <b>proof</b> that his <b>machine</b> had now become absolutely unreliable. Moreover, he was slowly approaching the fire, which, although it had ceased blazing, was a mass of glowing red embers.|$|R
40|$|Abstract. We {{outline the}} {{linguistic}} problem of word-sense ambiguity and demonstrate its relevance to current computer security {{applications in the}} context of Human Interactive Proofs (HIPs). Such <b>proofs</b> enable a <b>machine</b> to automatically determine whether it is interacting with another machine or a human. HIPs were recently proposed to fight abuse of web services, denial-of-service attacks and spam. We describe the construction of an HIP that relies solely on natural language and draws its security from the problem of word-sense ambiguity, i. e., the linguistic phenomenon that a word can have different meanings dependent on the context it is used in...|$|R
40|$|To {{be sure of}} {{the meaning}} of a {{programming}} language, we need to have its formal semantics. But semantic specifications are hard to write, {{and it is difficult to}} be convinced that they are correct. Having an executable semantics helps, since this allows the semantics to be tested on real programs which tends to expose many mistakes. But ultimately the correctness of the semantics has to be proved and then preferably by means of a computerized proof assistant to avoid mistakes in the proof. This is why we are working towards <b>machine</b> <b>proofs</b> with executable formal specifications. The extended abstract that follows is a step towards that goal...|$|R
40|$|When mathematicians present proofs {{they usually}} adapt their {{explanations}} to their didactic goals {{and to the}} (assumed) knowledge of their addressees. Modern automated theorem provers, in contrast, present proofs usually at a fixed level of detail (also called granularity). Often these presentations are neither intended nor suitable for human use. A challenge therefore is to develop user- and goal-adaptive proof presentation techniques that obey common mathematical practice. We present a flexible and adaptive approach to proof presentation based on classification. Expert knowledge for the classification task can be handauthored or extracted from annotated <b>proof</b> examples via <b>machine</b> learning techniques. The obtained models are employed for the automated generation of further proofs at an adapted level of granularity...|$|R
5000|$|Turing (1936) {{does not}} {{elaborate}} further {{except in a}} footnote in which he describes how to use an a-machine to [...] "find all the provable formulae of the Hilbert calculus" [...] rather than use a choice machine. He [...] "supposes that the choices are always between two possibilities 0 and 1. Each proof will then be determined by a sequence of choices i1, i2, ..., in (i1 = 0 or 1, i2 = 0 or 1, ..., in = 0 or 1), and hence the number 2n + i12n-1 + i22n-2 + ... +in completely determines the <b>proof.</b> The automatic <b>machine</b> carries out successively proof 1, proof 2, proof 3, ..." [...] (Footnote ‡, The Undecidable, p. 138) ...|$|R
