4|0|Public
5000|$|Bernstein's second Mahler cycle {{recorded}} for Deutsche Grammophon {{took advantage of}} the newly developed digital recording technologies of the 1980s. The new cycle also involved recordings by orchestras closely linked to Mahler's compositional and conductorial output, including the New York Philharmonic, the Vienna Philharmonic, and the Amsterdam Concertgebouw. Bernstein utilized his preferred latter-day technique of recording several live performances with <b>patchup</b> sessions to correct minor mistakes, believing it to be more satisfactory than a full studio recording. [...] The 8th symphony was still to be recorded at the time of Bernstein's death, and a 1975 radio tape of a Salzburg Festival performance was used to complete the cycle. The performances of the fifth and first symphonies are often seen by critics as an improvement over the first cycle, as well as the recording of the fourth, despite sharp criticism of Bernstein's use of a boy soprano in the fourth movement. Although there are many similarities between the two cycles, Bernstein's later conducting style is often slower and more heavily expressive that his more youthful approach in the 1960s.|$|E
40|$|Bandwidth {{allocation}} for multimedia {{applications in}} case of network congestion and failure poses technical challenges due to bursty and delay sensitive nature of the applications. The growth of multimedia services on Internet {{and the development of}} agent technology have made us to investigate new techniques for resolving the bandwidth issues in multimedia communications. Agent technology is emerging as a flexible promising solution for network resource management and QoS (Quality of Service) control in a distributed environment. In this paper, we propose an adaptive bandwidth allocation scheme for multimedia applications by deploying the static and mobile agents. It is a run-time allocation scheme that functions at the network nodes. This technique adaptively finds an alternate <b>patchup</b> route for every congested/failed link and reallocates the bandwidth for the affected multimedia applications. The designed method has been tested (analytical and simulation) with various network sizes and conditions. The results are presented to assess the performance and effectiveness of the approach. This work also demonstrates some of the benefits of the agent based schemes in providing flexibility, adaptability, software reusability, and maintainability. (C) 2004 Elsevier Inc. All rights reserved...|$|E
40|$|Value {{speculation}} has {{the potential}} of extending instruction level parallelism by breaking the barrier caused by chains of pure dependencies. To date, the literature has focused primarily on implicitly parallel architectures with superscalar cores. This paper presents a scheme for integrating value speculation into an explictly parallel instruction computer ISA, such as IA- 64 or HPL-PD. It presents a novel approach to recovering from incorrect speculation via the CHECKPRED instruction semantics. This technique can be coupled with interrupt handling mechanisms or register renaming techniques. The total effect is to eliminate the need for the <b>patchup</b> code. In addition, the paper addresses the selection of operations to value speculate. Using an optimizing compiler of the authors ’ construction, the critical paths of the SPECint 95 benchmarks are analyzed. The interesting and non-intuitive result is that, although slicing a dependence chain in half should yield the highest speedup due to overlapped execution, in practice it doesn’t. Results for the maximal speedup resulting from various operation selection alternatives show that the predictability of an operation is also an important criterion for selection. The paper closes with recommendations for compiler-guided value selection decisions in EPIC architectures. 1...|$|E
40|$|This paper {{presents}} a scheme for integrating value speculation into an explictly parallel instruction computer ISA, such as IA- 64 or HPL-PD. It {{presents a}} novel approach to recovering from incorrect speculation via the CHECKPRED instruction semantics. This technique can be coupled with interrupt handling mechanisms or register renaming techniques. The total effect is to {{eliminate the need for}} the <b>patchup</b> code. In addition, the paper addresses the selection of operations to value speculate. Using an optimizing compiler of the authors' construction, the critical paths of the SPECint 95 benchmarks are analyzed. The interesting and non-intuitive result is that, although slicing a dependence chain in half should yield the highest speedup due to overlapped execution, in practice it doesn't. Results for the maximal speedup resulting from various operation selection alternatives show that the predictability of an operation is also an important criterion for selection. The paper closes with recommendations for compiler-guided value selection decisions in EPIC architectures. 1. Introduction Chains of pure dependencies are a significant limit to higher levels of instruction level parallelism (ILP). Value speculation {{has been shown to be}} a promising approach for breaking this data dependence barrier to higher ILP [1],[2],[3],[4]. To date, the literature has focused primarily on implicitly parallel architectures with superscalar cores. This paper discusses...|$|E

