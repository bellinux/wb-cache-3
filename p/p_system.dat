1306|5699|Public
2500|$|The present copula (...) {{seems not}} to follow {{along the lines of}} the regular <b>P</b> <b>system</b> of terminations; while the subjunctive copula (...) is {{thoroughly}} irregular. So here are all of their forms.|$|E
50|$|Because of the {{non-deterministic}} {{nature of}} P systems, {{there are many}} different paths of computation a single <b>P</b> <b>system</b> is capable of, leading to different results. The following is one possible path of computation for the <b>P</b> <b>system</b> depicted.|$|E
5000|$|... #Caption: The {{graphical}} {{representation of a}} <b>P</b> <b>system</b> which outputs square numbers ...|$|E
40|$|Summary. Spiking neural <b>P</b> <b>systems</b> (in short, SN <b>P</b> <b>systems)</b> {{and their}} variants, {{including}} fuzzy spiking neural <b>P</b> <b>systems</b> (in short, FSN <b>P</b> <b>systems),</b> generally lack learning ability so far. Aiming at this problem, {{a class of}} modified FSN <b>P</b> <b>systems</b> are proposed in this paper, called adaptive fuzzy spiking neural <b>P</b> <b>systems</b> (in short, AFSN <b>P</b> <b>systems).</b> The AFSN <b>P</b> <b>systems</b> not only can model weighted fuzzy production rules in fuzzy knowledge base but also can perform dynamically fuzzy reasoning. It is more important that the AFSN <b>P</b> <b>systems</b> have learning ability like neural networks. Based on neuron’s firing mechanisms, a fuzzy reasoning algorithm and a learning algorithm are developed. An example is included to illustrate the learning ability of the AFSN <b>P</b> <b>systems...</b>|$|R
40|$|Spiking neural <b>P</b> <b>systems</b> (SN <b>P</b> <b>systems)</b> are a {{new class}} of {{computing}} models inspired by the neurophysiological behavior of biological spiking neurons. In order to make SN <b>P</b> <b>systems</b> capable of representing and processing fuzzy and uncertain knowledge, we propose {{a new class of}} spiking neural <b>P</b> <b>systems</b> in this paper called weighted fuzzy spiking neural <b>P</b> <b>systems</b> (WFSN <b>P</b> <b>systems).</b> New elements, including fuzzy truth value, certain factor, weighted fuzzy logic, output weight, threshold, new firing rule, and two types of neurons, are added to the original definition of SN <b>P</b> <b>systems.</b> This allows WFSN <b>P</b> <b>systems</b> to adequately characterize the features of weighted fuzzy production rules in a fuzzy rule-based system. Furthermore, a weighted fuzzy backward reasoning algorithm, based on WFSN <b>P</b> <b>systems,</b> is developed, which can accomplish dynamic fuzzy reasoning of a rule-based system more flexibly and intelligently. In addition, we compare the proposed WFSN <b>P</b> <b>systems</b> with other knowledge representation methods, such as fuzzy production rule, conceptual graph, and Petri nets, to demonstrate the features and advantages of the proposed techniques...|$|R
40|$|Abstract. Spiking neural <b>P</b> <b>systems</b> are a {{new class}} of {{bio-inspired}} computing devices incorporating the ideas of spiking neural networks into <b>P</b> <b>systems.</b> Homogeneous spiking neural <b>P</b> <b>systems</b> are a variant of spiking neural <b>P</b> <b>systems,</b> where each neuron has the same set of rules. The universality of homogeneous spiking neural <b>P</b> <b>systems</b> without delays is investigated and proved. This paper provides an answer to an open problem formulated by Zeng Xiangxiang, etal...|$|R
5000|$|The {{environment}} is the surroundings of the <b>P</b> <b>system.</b> In the initial state of a <b>P</b> <b>system</b> it contains only the container-membrane, {{and while the}} environment can never hold rules, it may have objects passed into it during the computation. The objects found within the environment {{at the end of}} the computation constitute all or part of its “result.” ...|$|E
50|$|As a {{model for}} computation, P systems offer the {{attractive}} possibility of solving NP-complete problems in less-than exponential time. Some <b>P</b> <b>system</b> variants {{are known to be}} capable of solving the SAT (boolean satisfiability) problem in linear time and, owing to all NP-complete problems being equivalent, this capability then applies to all such problems. As there is no current method of directly implementing a <b>P</b> <b>system</b> in its own right, their functionality is instead emulated and therefore solving NP-complete problems in linear time remains theoretical. However, it has also been proven that any deterministic <b>P</b> <b>system</b> may be simulated on a Turing Machine in polynomial time.|$|E
50|$|Some <b>P</b> <b>system</b> {{variants}} {{allow for}} a membrane to divide, possess a charge or have varying permeability by changing membrane thickness.|$|E
40|$|Abstract—The {{utility of}} Peer-to-Peer (<b>P</b> 2 <b>P)</b> <b>systems</b> extends far beyond {{traditional}} file sharing. This paper {{provides an overview}} of how <b>P</b> 2 <b>P</b> <b>systems</b> are capable of providing robust command and control for Distributed Multi-Agent Systems (DMASs). Specifically, this article presents the evolution of P 2 P architectures to date by discussing supporting technologies and applicability of each generation of <b>P</b> 2 <b>P</b> <b>systems.</b> It provides a de-tailed survey of fundamental design approaches found in modern large-scale <b>P</b> 2 <b>P</b> <b>systems</b> highlighting design considerations for building and deploying scalable P 2 P applications. The survey includes unstructured <b>P</b> 2 <b>P</b> <b>systems,</b> content retrieval <b>systems,</b> communications structured <b>P</b> 2 <b>P</b> <b>systems,</b> flat structured <b>P</b> 2 <b>P</b> <b>systems</b> and finally Hierarchical Peer-to-Peer (HP 2 P) overlays. It concludes with a presentation of design tradeoffs and oppor-tunities for future research into P 2 <b>P</b> overlay <b>systems.</b> I...|$|R
40|$|Peer-to-Peer (<b>P</b> 2 <b>P)</b> <b>systems</b> {{provide a}} {{decentralized}} infrastructure for resource sharing. In particular, file sharing was the initial motivation behind {{many of the}} first successful <b>P</b> 2 <b>P</b> <b>systems.</b> As <b>P</b> 2 <b>P</b> <b>systems</b> evolve to support sharing of structured and semantically rich data, several data management issues must be addressed. Specifically, <b>P</b> 2 <b>P</b> <b>systems</b> {{need to deal with}} data location, data integration, data querying, and data consistency issues. Data management is further complicated in <b>P</b> 2 <b>P</b> <b>systems</b> due to the volatility and scale of these systems. In this survey we propose a reference architecture for <b>P</b> 2 <b>P</b> <b>systems</b> that focuses on the data management activities required to support sharing of structured data. Based on this reference architecture, we present and classify technologies that have been proposed to solve the data management issues particular to <b>P</b> 2 <b>P</b> <b>systems...</b>|$|R
40|$|This work {{presents}} a new computational approach, {{based on the}} formalism of <b>P</b> <b>systems,</b> for modelling and running simulations of animal population dynamics phenomena. The three formalisms proposed are: MPP <b>systems</b> (Minimal Probabilistic <b>P</b> <b>systems),</b> APP <b>systems</b> (Attributed Probabilistic <b>P</b> <b>systems)</b> and MAPP systems (Multilevel Attributed Probabilistic <b>P</b> <b>systems).</b> All of them are formally defined by providing their syntax notations and formal semantics as inference rules. Case study are provided with examples for all three formalism...|$|R
50|$|There {{are three}} (in the basic <b>P</b> <b>system</b> model) {{distinct}} ways in a rule may handle its output objects. Usually the output objects are {{passed into the}} current membrane (the same membrane in which the rule and the inputs reside), known as a here rule. However there are two modifiers which can be specified upon output objects when rules are defined, in and out. The in modifier causes the object to be passed {{to one of the}} current membrane’s children (travelling inwards relative to the structure of the <b>P</b> <b>system),</b> chosen at random during the computation. The out modifier causes the object to be passed out of the current membrane and into either its parent membrane or to a sibling membrane, specified during specification of the <b>P</b> <b>system.</b>|$|E
5000|$|Gheorghe Păun ( [...] ; born December 6, 1950 in Cicănești, Argeș County) is a {{computer}} scientist from Romania, prominent for work on membrane computing and the <b>P</b> <b>system.</b>|$|E
5000|$|A <b>P</b> <b>system</b> is a {{computational}} {{model in the}} field of computer science that performs calculations using a biologically-inspired process. They are based upon the structure of biological cells, abstracting from the way in which chemicals interact and cross cell membranes. The concept was first introduced in a 1998 report by the computer scientist Gheorghe Păun, whose last name is the origin of the letter P in 'P Systems'. Variations on the <b>P</b> <b>system</b> model {{led to the formation of}} a branch of research known as 'membrane computing.' ...|$|E
40|$|Peer-to-Peer (<b>P</b> 2 <b>P)</b> <b>systems</b> {{attempt to}} provide a {{decentralized}} infrastructure for resource sharing. In particular, file sharing was the initial motivation behind many of the first successful <b>P</b> 2 <b>P</b> <b>systems.</b> As <b>P</b> 2 <b>P</b> <b>systems</b> evolve to support sharing of structured and semantically rich data, several data management issues must be addressed. Specifically, <b>P</b> 2 <b>P</b> <b>systems</b> {{need to deal with}} data location, data integration, data querying, and data consistency issues. Data management is further complicated in <b>P</b> 2 <b>P</b> <b>systems</b> due to the volatility and scale of these systems. In this survey we propose a reference architecture for <b>P</b> 2 <b>P</b> <b>systems</b> that focuses on the data management activities required to support sharing of structured data. Based on this reference architecture, we present and classify technologies that have been proposed to solve the data management issues particular to <b>P</b> 2 <b>P</b> <b>systems...</b>|$|R
40|$|Membrane {{computing}} is a (biologically motivated) {{theoretical framework}} of distributed parallel computing. If symbol-objects are considered, then membrane sys- tems (also called <b>P</b> <b>systems)</b> are distributed multiset processing systems. In evolution- communication (EC) <b>P</b> <b>systems</b> the computation {{is carried out}} {{with the use of}} non- cooperative rewriting rules and with (usually the minimally cooperative) transport rules. The goal {{of this article is to}} improve the existing results on evolution-communication <b>P</b> <b>systems.</b> It is known that EC <b>P</b> <b>systems</b> with 2 membranes are universal, and so are time-free EC <b>P</b> <b>systems</b> with targets with 3 membranes. We prove that any recursively enumerable set of vectors of nonnegative integers can be generated by time-free EC <b>P</b> <b>systems</b> (without targets) with 2 membranes, thus improving both results...|$|R
40|$|<b>P</b> <b>systems</b> are a biologically {{inspired}} model {{introduced by}} Gheorghe P¸aun {{with the aim}} of representing the structure and the functioning of the cell. Since their introduction, several variants of <b>P</b> <b>systems</b> have been proposed and explored. We concentrate on the class of catalytic <b>P</b> <b>systems</b> without priorities associated to the rules. We show that the divergence problem (i. e., checking for the existence of an infinite computation) is decidable in such a class of <b>P</b> <b>systems.</b> As a corollary, we obtain an alternative proof of the nonuniversality of deterministic catalytic <b>P</b> <b>systems,</b> an open problem recently solved by Ibarra and Yen...|$|R
5000|$|The present copula (...) {{seems not}} to follow {{along the lines of}} the regular <b>P</b> <b>system</b> of terminations; while the subjunctive copula (...) is {{thoroughly}} irregular. So here are all of their forms.|$|E
50|$|Although many {{varieties}} of <b>P</b> <b>system</b> exist, most {{share the same}} basic components. Each element has a specific role to play, and each has a founding in the biological cell architecture upon which P systems are based.|$|E
50|$|The image shown {{depicts the}} initial state of a <b>P</b> <b>system</b> with three membranes. Because of their {{hierarchical}} nature, P systems are often depicted graphically with drawings that resemble Venn diagrams or David Harel's Higraph (see Statechart).|$|E
40|$|<b>P</b> <b>systems</b> can be classi ed in {{two main}} groups: <b>P</b> <b>systems</b> with the {{membrane}} structure {{described by a}} tree, and tissue <b>P</b> <b>systems</b> with the membranes placed in the nodes of an arbitrary graph. NP-complete problems have been solved in linear time by trading space for time {{in the framework of}} recognizing tissue <b>P</b> <b>systems</b> with cell division. The design of this kind of systems is not an easy task to understand. In this paper we present a software application to help the design of solutions to NP-complete problems in the framework of recognizing tissue <b>P</b> <b>systems</b> with cell division...|$|R
40|$|Abstract. We {{prove that}} any set of numbers {{containing}} zero generated by symport/antiport <b>P</b> <b>systems</b> with two membranes and minimal cooperation is finite (for both symport/antiport <b>P</b> <b>systems</b> and for purely symport <b>P</b> <b>systems).</b> On the other hand, one additional {{object in the}} output membrane allows symport/antiport <b>P</b> <b>systems</b> with two membranes and minimal cooperation generate any recursively enumerable sets of natural numbers without zero. The same question for symport <b>P</b> <b>systems</b> with two membranes and minimal cooperation (is only one additional object in the output membrane sufficient {{in order to get}} universality?) is still open. ...|$|R
40|$|Summary. <b>P</b> <b>systems</b> are a biologically {{inspired}} model {{introduced by}} Gheorghe Păun {{with the aim}} of representing the structure and the functioning of the cell. Since their introduction, several variants of <b>P</b> <b>systems</b> have been proposed and explored. We concentrate on the class of catalytic <b>P</b> <b>systems</b> without priorities associated to the rules. We show that the divergence problem (i. e., checking for the existence of an infinite computation) is decidable in such a class of <b>P</b> <b>systems.</b> As a corollary, we obtain an alternative proof of the nonuniversality of deterministic catalytic <b>P</b> <b>systems,</b> an open problem recently solved by Ibarra and Yen. ...|$|R
5000|$|... AIX runs on IBM Power, System <b>p,</b> <b>System</b> i, System p5, System i5, eServer p5, eServer pSeries and eServer i5 server product lines, {{as well as}} IBM BladeCenter {{blades and}} IBM PureFlex compute nodes based on Power Architecture technology.|$|E
50|$|A <b>P</b> <b>system</b> {{continues}} {{until it}} reaches a state where no further reactions are possible. At this point {{the result of the}} computation is all those chemicals that have been passed outside of the outermost membrane, or otherwise those passed into a designated 'result' membrane.|$|E
50|$|A {{computation}} {{works from}} an initial starting state towards an end state {{through a number}} of discrete steps. Each step involves iterating through all membranes in the <b>P</b> <b>system</b> and the application of rules, which occurs in both a maximally parallel and non-deterministic manner.|$|E
40|$|Multisets are the {{fundamental}} data structure of <b>P</b> <b>systems</b> [12]. In this paper we relate <b>P</b> <b>systems</b> {{with the language}} and theory for multisets presented in [5]. This allows us, on the one hand, to define and implement <b>P</b> <b>systems</b> using multiset constraints in a constraint logic programming framework, and, on the other hand, to define and implement constraint solving procedures used to test multiset constraint satisfiability in terms of <b>P</b> <b>systems</b> with active membranes. Whil...|$|R
40|$|Abstract: Axon <b>P</b> <b>systems</b> are a {{class of}} spiking neural <b>P</b> <b>systems.</b> In this paper, the axon <b>P</b> <b>systems</b> are used as number {{generators}} and language generators. As a language generator, the relationships of the families of languages generated by axon <b>P</b> <b>systems</b> with finite and context-free languages are considered. As a number gen-erator, a characterization {{of the family of}} finite sets can be obtained by axon P sys-tems with only one node. The relationships of sets of numbers generated by axon <b>P</b> <b>systems</b> with semilinear sets of numbers are also investigated. This paper partially answers some open problems formulated by H. Chen, T. -O. Ishdorj and Gh. Păun...|$|R
40|$|Clock-free <b>P</b> <b>systems</b> were {{introduced}} in [7] as a natural extension to transitional membrane systems. The idea sparks from the observation of the fundamental dif-ference between how transitional <b>P</b> <b>systems</b> evolve and how processes take place in biological cells: transitional <b>P</b> <b>systems</b> evolve {{in a series of}} crisp evolution steps...|$|R
5000|$|<b>P</b> <b>system</b> {{extension}}: The [...] "first {{extension of}} the <b>P</b> <b>system</b> into Canada" [...] (“Canadian extensions”) for the Pinetree Line was planned by the [...] "Radar Extension Program" [...] for 33 stations and was agreed by the US and Canada in November 1950. The plan [...] "was submitted to the Permanent Joint Board on Defense on February 6, 1951, and" [...] was subsequently approved by both nations, but by [...] "April 1951 the United States still had not contributed to the Radar Extension Program". On June 13, 1951, the US released $20 million for the stations and by June 1952, the joint Canadian-American committee on the Radar Extension Program was replaced with the [...] "Project Pinetree Office" [...] in Ottawa, Ontario.|$|E
5000|$|A <b>P</b> <b>system</b> {{is defined}} as a series of {{membranes}} containing chemicals (in [...] quantities), catalysts and rules which determine possible ways in which chemicals may react with one another to form products. Rules may also cause chemicals to pass through membranes or even cause membranes to dissolve.|$|E
50|$|An {{essential}} {{ingredient of}} a <b>P</b> <b>system</b> is its membrane structure, {{which can be}} a hierarchical arrangement of membranes, as in a cell, or a net of membranes (placed in the nodes of a graph), as in a tissue or a neural net. P systems are often depicted graphically with drawings.|$|E
40|$|AbstractIn this paper, we {{investigate}} the languages generated by asynchronous spiking neural <b>P</b> <b>systems.</b> Characterizations of finite languages and recursively enumerable languages are obtained by asynchronous spiking neural <b>P</b> <b>systems</b> with extended rules. The relationships of the languages generated by asynchronous spiking neural <b>P</b> <b>systems</b> with regular and non-semilinear languages are also investigated...|$|R
40|$|Dual-processor (2 <b>P)</b> <b>systems</b> are the {{preferred}} building blocks in commodity Linux clusters {{because of their}} greater peak performance-to-price ratio relative to single-processor (1 <b>P)</b> <b>systems.</b> However, running memory-intensive applications on 2 <b>P</b> <b>systems</b> can lead to performance degradation if the memory subsystem cannot fulfill the increased demand from the second processor...|$|R
40|$|In {{this paper}} {{we focus on}} two weak forms of {{cooperation}} in <b>P</b> <b>systems,</b> namely, catalytic rules and matter/anti-matter annihilation rules. These variants of <b>P</b> <b>systems</b> both are computationally complete, while the corresponding rule complexity {{turns out to be}} of special interest. For establishing considerably small universal <b>P</b> <b>systems</b> in both cases, we found two suitable tools: generalized register machines and generalized counter automata. Depending on the features used in the different variants, we construct several small universal <b>P</b> <b>systems...</b>|$|R
