0|237|Public
25|$|While {{deciding}} whether these <b>programs</b> <b>halt</b> is simple, more complex programs prove problematic.|$|R
5000|$|Concerns {{regarding}} subsidence increased until Operation [...] "Big Squirt," [...] a {{water injection}} <b>program,</b> <b>halted</b> any progression of sinking land in 1960.|$|R
5000|$|The <b>program</b> <b>HALTs</b> {{with the}} {{contents}} of register #2 at its original count and {{the contents of}} register #3 equal to the original contents of register #2, i.e., ...|$|R
2500|$|There are {{programs}} (interpreters) that {{simulate the}} execution of whatever source code they are given. Such programs can demonstrate that a <b>program</b> does <b>halt</b> {{if this is the}} case: the interpreter itself will eventually halt its simulation, which shows that the original <b>program</b> <b>halted.</b> However, an interpreter will not halt if its input <b>program</b> does not <b>halt,</b> so this approach cannot solve the halting problem as stated; it does not successfully answer [...] "doesn't halt" [...] for programs that do not halt.|$|R
40|$|This paper {{concerns}} {{the relationship between}} the execution behavior of a program and the execution behavior of its slices. Our main results are those stated as the Slicing Theorem and the Termination Theorem. The Slicing Theorem demonstrates that a slice captures a portion of a program's behavior in the sense that, for any initial state on which the <b>program</b> <b>halts,</b> the <b>program</b> and the slice compute the same sequence of values for each element of the slice. The Termination Theorem demonstrates that if a program is decomposed into (two or more) slices, the <b>program</b> <b>halts</b> on any state for which all the slices halt. Thes...|$|R
50|$|The town of Whistler in British Columbia, Canada {{owned and}} {{operated}} the largest fuel-cell bus fleet in the world, having been put in operation for the 2010 Winter Olympics. However, the costs were too high and the <b>program</b> <b>halted</b> in 2015.|$|R
5000|$|... "The City", {{examines}} the advances futuristic technology will {{bring to the}} home such as humanoid robots and holographic pets. The storyline has Paul, a thirteen-year-old boy accidentally releasing his holographic shark friend into the city's computer <b>program,</b> <b>halting</b> major city functions and electronics...|$|R
5000|$|Ferdy and his programmers {{are also}} {{somewhat}} playful, inserting whimsical error codes into the computer's software. An example given is [...] "I'm only a bloody machine but I {{know how to}} print a label once only" [...] for a specific <b>program</b> <b>halt.</b>|$|R
25|$|Turing proved no {{algorithm}} {{exists that}} always correctly decides whether, {{for a given}} arbitrary program and input, the <b>program</b> <b>halts</b> when run with that input. The essence of Turing's proof is that any such algorithm {{can be made to}} contradict itself and therefore cannot be correct.|$|R
40|$|Although the halting {{problem is}} undecidable, {{imperfect}} testers that fail on some instances are possible. Such instances are called {{hard for the}} tester. One variant of imperfect testers replies "I don't know" on hard instances, another variant fails to halt, and yet another replies incorrectly "yes" or "no". Also the halting problem has three variants: does a given <b>program</b> <b>halt</b> on the empty input, does a given <b>program</b> <b>halt</b> when given itself as its input, or does a given <b>program</b> <b>halt</b> on a given input. The failure rate of a tester for some size is the proportion of hard instances among all instances of that size. This publication investigates the behaviour of the failure rate as the size grows without limit. Earlier results are surveyed and new results are proven. Some of them use C++ on Linux as the computational model. It {{turns out that the}} behaviour is sensitive to the details of the programming language or computational model, but in many cases it is possible to prove that the proportion of hard instances does not vanish. Comment: 18 pages. The differences between this version and arXiv: 1307. 7066 v 1 are significant. They have been listed in the last paragraph of Section 1. Excluding layout, this arXiv version is essentially identical to the Acta Cybernetica versio...|$|R
2500|$|Informally, for {{any program}} f that might {{determine}} if <b>programs</b> <b>halt,</b> a [...] "pathological" [...] program g called with an input can pass its own source and its input to f and then specifically {{do the opposite}} of what f predicts g will do. [...] No f can exist that handles this case.|$|R
5000|$|It is algorithmically random. This {{means that}} the {{shortest}} program to output the first n bits of Ω must be of size at least n-O(1). This is because, as in the Goldbach example, those n bits enable us {{to find out exactly}} which <b>programs</b> <b>halt</b> among all those of length at most n.|$|R
5000|$|Informally, for {{any program}} f that might {{determine}} if <b>programs</b> <b>halt,</b> a [...] "pathological" [...] program g called with an input can pass its own source and the input to f and then specifically {{do the opposite}} of what f predicts g will do. No f can exist that handles this case.|$|R
5000|$|Breakpoints ... <b>Programs</b> <b>halt</b> when a {{specified}} event, a breakpoint, has occurred. The event {{can be specified}} as a code execution address, or as a data access (read or write) to an address with {{a specified}} value. Nexus breakpoints can be set at any address, including flash or ROM memory; CPUs may also provide special breakpoint instructions.|$|R
25|$|For example, {{one such}} {{consequence}} of the halting problem's undecidability is that there cannot be a general algorithm that decides whether a given statement about natural numbers is true or not. The {{reason for this is}} that the proposition stating that a certain <b>program</b> will <b>halt</b> given a certain input can be converted into an equivalent statement about natural numbers. If we had an algorithm that could find the truth value of every statement about natural numbers, it could certainly find the truth value of this one; but that would determine whether the original <b>program</b> <b>halts,</b> which is impossible, since the halting problem is undecidable.|$|R
40|$|Abstract Either {{we leave}} the {{definition}} of the halting function incomplete, not saying its result when applied to its own program, or we suffer inconsistency. If we choose incompleteness, we cannot require a <b>halting</b> <b>program</b> to apply to programs that invoke the <b>halting</b> <b>program,</b> and we cannot conclude that it is incomputable. If we choose inconsistency, then {{it makes no sense to}} propose a <b>halting</b> <b>program.</b> Either way, the incomputability argument is lost...|$|R
5000|$|... f(e,e) = 0 and so g(e) = 0. In {{this case}} h(e,e) = 1, because <b>program</b> e <b>halts</b> on input e.|$|R
25|$|One {{approach}} to the problem might be to run the program for some number of steps and check if it halts. But if the <b>program</b> does not <b>halt,</b> it is unknown whether the <b>program</b> will eventually <b>halt</b> or run forever.|$|R
50|$|A FRACTRAN {{program is}} an ordered list of {{positive}} fractions {{together with an}} initial positive integer input n. The program is run by multiplying the integer n by the first fraction f in the list for which nf is an integer. The integer n is then replaced by nf and the rule is repeated. If no fraction in the list produces an integer when multiplied by n then the <b>program</b> <b>halts.</b> FRACTRAN was invented by mathematician John Conway.|$|R
40|$|It is {{well-known}} {{that in general}} the problem of deciding whether a <b>program</b> <b>halts</b> (or can deadlock) is undecidable. Model checkers, therefore, {{cannot be applied to}} arbitrary programs, but work with well-defined abstractions of programs. The feasibility of a verification often depends on the type of abstraction that is made. Abstraction is indeed the most powerful tool that the user of a model checking tool can apply, yet it is often perceived as a temporary inconvenience...|$|R
2500|$|Consider any {{conjecture}} {{that could}} be disproven via a counterexample among a countable number of cases (e.g. Goldbach's conjecture). [...] Write a computer program that sequentially tests this conjecture for increasing values. In the case of Goldbach's conjecture, we would consider every even number ≥ 4 sequentially and test {{whether or not it}} is the sum of two prime numbers. Suppose this program is simulated on an n-state Turing machine. If it finds a counterexample (an even number ≥ 4 that is not the sum of 2 primes in our example), it halts and notifies us. However, if the conjecture is true, then our <b>program</b> will never <b>halt.</b> (This <b>program</b> <b>halts</b> only if it finds a counterexample.) ...|$|R
25|$|To {{test whether}} input <b>program</b> x <b>halts</b> on y, {{construct}} a program p that on input (x,y) reports true and diverges on all other inputs.|$|R
2500|$|Gregory Chaitin {{has defined}} a halting probability, {{represented}} by the symbol Ω, a type of real number that informally is said to represent {{the probability that a}} randomly produced <b>program</b> <b>halts.</b> [...] These numbers have the same Turing degree as the halting problem. It is a normal and transcendental number which can be defined but cannot be completely computed. This means one can prove that there is no algorithm which produces the digits of Ω, although its first few digits can be calculated in simple cases.|$|R
50|$|Then {{a random}} variate {{generation}} algorithm is any <b>program</b> that <b>halts</b> almost surely and exits {{with a real}} number x. This x is called a random variate.|$|R
50|$|In computability theory, the T predicate, first {{studied by}} {{mathematician}} Stephen Cole Kleene, {{is a particular}} set of triples of natural numbers that is used to represent computable functions within formal theories of arithmetic. Informally, the T predicate tells whether a particular computer <b>program</b> will <b>halt</b> when run with a particular input, and the corresponding U function is used to obtain the results of the computation if the <b>program</b> does <b>halt.</b> As with the smn theorem, the original notation used by Kleene has become standard terminology for the concept.|$|R
50|$|On October 28, 1864, Stephen G. Burbridge, the {{military}} commander of Kentucky, issued a proclamation {{that was designed}} to get Kentuckians to sell their surplus hogs to the Union government at lower than prevailing prices. Interstate hog shipments were prohibited, permits were required for farmers to drive hogs to market, and other regulations were enforced. The scheme cost Kentucky farmers an estimated $300,000. President Abraham Lincoln ordered the <b>program</b> <b>halted</b> after one month, because it was widely reviled in a state that was at best a hesitant ally of the Union.|$|R
50|$|At one time, the Institute of Design {{offered a}} Bachelor of Science in Design degree, with {{specialties}} in Photography, Product Design and Communication Design. The Bachelor's <b>program</b> was <b>halted</b> in 1998.|$|R
2500|$|The proof shows {{there is}} no total computable {{function}} that decides whether an arbitrary <b>program</b> i <b>halts</b> on arbitrary input x; that is, the following function h is not computable (Penrose 1990, p.5763): ...|$|R
50|$|The E86 {{cluster bomb}} was an American {{biological}} cluster bomb first developed in 1951. Though the U.S. military intended to procure 6,000 E86s, the <b>program</b> was <b>halted</b> {{in the first}} half of the 1950s.|$|R
5000|$|The proof shows {{there is}} no total computable {{function}} that decides whether an arbitrary <b>program</b> i <b>halts</b> on arbitrary input x; that is, the following function h is not computable (Penrose 1990, p. 57 - 63): ...|$|R
50|$|Centenary fielded college {{football}} teams until 1941. The Centenary football team was discontinued {{for the duration}} of World War II due to budget deficits, and declining fan interest. An attempt to reinstate the football <b>program</b> was <b>halted</b> in 1947.|$|R
25|$|E2: : EITHER (i) {{the last}} measure was exact, the {{remainder}} in R is zero, and the <b>program</b> can <b>halt,</b> OR (ii) the algorithm must continue: the last measure left a remainder in R less than measuring number in S.|$|R
25|$|The {{universal}} halting problem, {{also known}} (in recursion theory) as totality, {{is the problem}} of determining, whether a given computer <b>program</b> will <b>halt</b> for every input (the name totality comes from the equivalent question of whether the computed function is total).|$|R
50|$|Firstly, the {{government}} of Thailand has approved the establishment of 'Army Medic School' in 1939. The Army Medic School produced doctors serving Royal Thai Army until 1947 when the <b>program</b> was <b>halted</b> resulted {{from the lack of}} equipment and educators.|$|R
50|$|The {{claim is}} that we can convert our {{algorithm}} for identifying squaring programs into one that identifies functions that halt. We will describe an algorithm that takes inputs a and i and determines whether <b>program</b> a <b>halts</b> when given input i.|$|R
50|$|Chaitin {{has defined}} Chaitin's {{constant}} Ω, a real number whose digits are equidistributed {{and which is}} sometimes informally described {{as an expression of}} the probability that a random <b>program</b> will <b>halt.</b> Ω has the mathematical property that it is definable but not computable.|$|R
