10000|10000|Public
5|$|All RICO predicates {{are also}} money {{laundering}} predicates. Federal program bribery, while not a RICO <b>predicate,</b> is a money laundering <b>predicate.</b>|$|E
5|$|A {{complete}} Khmer sentence {{consists of}} four basic elements which include an optional topic, an optional subject, an obligatory <b>predicate</b> and various adverbials and particles. The topic and subject are noun phrases, predicates are verb phrases and another noun phrase acting as an object or verbal attribute often follows the <b>predicate.</b>|$|E
5|$|In this clause the adverbial, helehgüjgeer 'without saying ' must {{precede the}} predicate's complement, üünijg 'it-' {{in order to}} avoid {{syntactic}} ambiguity, since helehgüjgeer is itself derived from a verb and hence an üünijg preceding it could be construed as its complement. If the adverbial was an adjective such as hurdan 'fast', it could optionally immediately precede the <b>predicate.</b> There are also cases in which the adverb must immediately precede the <b>predicate.</b>|$|E
40|$|In {{the paper}} we {{investigate}} semantic properties of program-oriented algebras and logics defined for classes of quasiary <b>predicates.</b> Informally speaking, such <b>predicates</b> are partial <b>predicates</b> defined over partial states (partial assignments) of variables. Conventional n-ary <b>predicates</b> {{can be considered}} as a special case of quasiary <b>predicates.</b> We define first-order logics of quasiary non-deterministic <b>predicates</b> and investigate semantic properties of $T$-consequence relation for such logics. Specific properties of $T$-consequence relation for the class of deterministic <b>predicates</b> are also considered. Obtained results can be used to prove logic validity and completeness...|$|R
5000|$|Prosleptic syllogisms are {{classified}} in three figures, or potential arrangements {{of the terms}} according to {{the figure of the}} prosleptic proposition used.First figure: [...] "A is universally <b>predicated</b> of everything that is universally <b>predicated</b> of G"Second figure: [...] "Everything <b>predicated</b> universally of A is <b>predicated</b> universally of G"Third figure: [...] "A is universally <b>predicated</b> of everything of which G is universally predicated" ...|$|R
40|$|In {{this paper}} I examine the aspectual {{behavior}} of dynamic <b>predicates,</b> i. e. <b>predicates</b> that involve some “change ” or potential change in one participant, including change-of-state, motion, and consumption/destruction <b>predicates.</b> I {{focus on the}} factors governing durativity in dynamic <b>predicates,</b> which...|$|R
5|$|Coverbs however, cannot inflect for {{person and}} cannot, in themselves, head finite clauses. If {{they are to}} act {{as the head of}} a clause, they must combine with a verb, thereby forming a bipartite verbal compound, {{commonly}} called a complex <b>predicate.</b>|$|E
5|$|In {{order to}} {{constrain}} a column to reject Nulls, the NOT NULL constraint can be applied, {{as shown in}} the example below. The NOT NULL constraint is semantically equivalent to a check constraint with an IS NOT NULL <b>predicate.</b>|$|E
5|$|A complex <b>predicate</b> is the {{combination}} {{of more than one}} element, more than one individual word, to convey the information involved in a single event. For instance, the event swim is conveyed in Wagiman using a combination of a verb ya- 'go' and a coverb liri-ma 'swimming'. There is no verb in Wagiman that, on its own, conveys the event of swimming.|$|E
40|$|Most {{existing}} join ordering algorithms {{concentrate on}} join queries with simple join <b>predicates</b> and inner joins only, where simple <b>predicates</b> {{are those that}} involve exactly two relations. However, real queries may contain complex join <b>predicates,</b> i. e. <b>predicates</b> involving more than two relations. We show how to handle complex join <b>predicates</b> efficiently, by modeling the query graph as a hypergraph and reasoning about its connected subgraphs...|$|R
40|$|Increases in {{instruction}} level parallelism {{are needed}} to exploit the potential parallelism available in future wide issue architectures. <b>Predicated</b> execution is an architectural mechanism that increases instruction level parallelism by removing branches and allowing simultaneous execution of multiple paths of control, only committing instructions from the correct path. In order for the compiler to expose and use such parallelism, traditional compiler data-flow and path analysis needs to be extended to <b>predicated</b> code. In this paper, we motivate the need for renaming and for <b>predicates</b> that reflect path information. We present <b>Predicated</b> Static Single Assignment (PSSA) which uses renaming and introduces Full-Path <b>Predicates</b> to remove false dependences and enable aggressive <b>predicated</b> optimization and instruction scheduling. We demonstrate the usefulness of PSSA for <b>Predicated</b> Speculation and Control Height Reduction. These two <b>predicated</b> code optimizations used during instruction sche [...] ...|$|R
40|$|In {{this paper}} we {{formulate}} the job-shop scheduling {{problem in the}} theorem-proving framework described in [12, 5]. In the theorem-proving framework two kinds of <b>predicates</b> are allowed: ordinary <b>predicates,</b> defined by if-and-only-if-definitions [3], and primitive <b>predicates,</b> "defined" by axioms that {{can be thought of}} as integrity constraints. The framework seeks to unify constraint logic programming (CLP) and abductive logic programming (ALP). The class of the primitive <b>predicates</b> includes constraint <b>predicates</b> like equality and inequality as well as abducible <b>predicates.</b> The "integrity constraints" defining the primitive <b>predicates</b> consist of axioms for equality and inequality in the case of constraint <b>predicates</b> and more conventional integrity constraints in the case of abducibles. The framework differs from conventional CLP primarily in the fact that constraint handling is performed by explicit execution of integrity constraints written in logical form. In the theorem-proving framewor [...] ...|$|R
5|$|For example, between 1985 and 1991, over 75 public {{officials}} {{were convicted of}} corruption offenses in the Southern District of West Virginia alone. By comparison, the only appellate court decision citing West Virginia's Bribery and Corrupt Practices Act, in 1991, was a federal court decision involving the state statute as a federal RICO <b>predicate.</b>|$|E
5|$|In {{view of the}} above, {{observe that}} for SQL's WHERE clause a {{tautology}} similar {{to the law of}} excluded middle can be written. Assuming the IS UNKNOWN operator is present, p OR (NOT p) OR (p IS UNKNOWN) is true for every <b>predicate</b> p. Among logicians, this is called law of excluded fourth.|$|E
5|$|There are few {{compound}} words, {{but lots}} of derivations. The grammar employs a mixture of head and dependent marking: both agent and patient are marked on the <b>predicate</b> and the possessor is marked on nouns, while dependent noun phrases inflect for case. The morphosyntactic alignment of Kalaallisut is ergative.|$|E
50|$|The control <b>predicates</b> cannot take expletive {{there because}} {{there does not}} fulfill the {{semantic}} requirements of the control <b>predicates.</b> Since the raising-to-object <b>predicates</b> do not select their objects, they can easily take expletive there.|$|R
40|$|This paper {{presents}} a backward type analysis for logic programs. Given type signatures for {{a collection of}} selected <b>predicates</b> such as builtin or library <b>predicates,</b> the analysis infers type signatures for other <b>predicates</b> such that the execution of any query satisfying the inferred type signatures will not violate the type signatures for the selected <b>predicates.</b> Thus, the backward type analysis generalises type checking in which the programmer manually specifies type signatures for all <b>predicates</b> that are checked for consistency by a type checker...|$|R
5000|$|The {{distinction}} between raising-to-object and control <b>predicates</b> is identified using the there-insertion diagnostic. Expletive there can appear {{as the object}} (or subject) of raising <b>predicates,</b> but it cannot appear {{as the object of}} control <b>predicates,</b> e.g.: ...|$|R
5|$|A classic {{error is}} {{the attempt to}} use the equals {{operator}} = {{in combination with the}} keyword NULL to find rows with Nulls. According to the SQL standard this is an invalid syntax and shall lead to an error message or an exception. But most implementations accept the syntax and evaluate such expressions to UNKNOWN. The consequence is that no rows are found - regardless of whether rows with Nulls exist or not. The proposed way to retrieve rows with Nulls is the use of the <b>predicate</b> IS NULL instead of = NULL.|$|E
5|$|All of the Peano axioms {{except the}} ninth axiom (the {{induction}} axiom) are statements in first-order logic. The arithmetical operations of addition and multiplication {{and the order}} relation can also be defined using first-order axioms. The axiom of induction is in second-order, since it quantifies over predicates (equivalently, sets of natural numbers rather than natural numbers), {{but it can be}} transformed into a first-order axiom schema of induction. Such a schema includes one axiom per <b>predicate</b> definable in the first-order language of Peano arithmetic, making it weaker than the second-order axiom.|$|E
5|$|Descartes {{argued that}} God's {{existence}} can be deduced from his nature, just as geometric ideas can be deduced {{from the nature}} of shapes—he used the deduction of the sizes of angles in a triangle as an example. He suggested {{that the concept of}} God is that of a supremely perfect being, holding all perfections. He seems to have assumed that existence is a <b>predicate</b> of a perfection. Thus, if the notion of God did not include existence, it would not be supremely perfect, as it would be lacking a perfection. Consequently, the notion of a supremely perfect God who does not exist, Descartes argues, is unintelligible. Therefore, according to his nature, God must exist.|$|E
40|$|Increases in {{instruction}} level parallelism {{are needed}} to exploit the potential parallelism available in future wide issue architectures. <b>Predicated</b> execution is an architectural mechanism that increases instruction level parallelism by removing branches and allowing simultaneous execution of multiple paths of control, only committing instructions from the correct path. In order for the compiler to expose such parallelism, traditional compiler data-flow analysis needs to be extended to <b>predicated</b> code. In this paper, we present <b>Predicated</b> Static Single Assignment (PSSA) to enable aggressive <b>predicated</b> optimization and instruction scheduling. PSSA removes false dependences by exploiting renaming and information about the multiple control paths. We demonstrate the usefulness of PSSA for <b>Predicated</b> Speculation and Control Height Reduction. These two <b>predicated</b> code optimizations used during instruction scheduling reduce the dependence length of the critical paths through a <b>predicated</b> regi [...] ...|$|R
5000|$|A Negative Range Concatenation Grammar (NRCG) {{is defined}} like a PRCG, {{but with the}} {{addition}} that some <b>predicates</b> occurring in {{the right-hand side of}} a clause can have the form [...] Such <b>predicates</b> are called negative <b>predicates.</b>|$|R
40|$|Abstract. This paper {{presents}} a backward type analysis for logic programs. Given type signatures for {{a collection of}} selected <b>predicates</b> such as builtin or library <b>predicates,</b> the analysis infers type signatures for other <b>predicates</b> such that the execution of any query satisfying the inferred type signatures will not violate the type signatures for the selected <b>predicates.</b> Thus, the backward type analysis generalises type checking in which the programmer manually specifies type signatures for all <b>predicates</b> that are checked for consistency by a type checker. ...|$|R
5|$|Grammar can be {{described}} as a system of categories and a set of rules that determine how categories combine to form different aspects of meaning. Languages differ widely in whether they are encoded through the use of categories or lexical units. However, several categories are so common as to be nearly universal. Such universal categories include the encoding of the grammatical relations of participants and predicates by grammatically distinguishing between their relations to a <b>predicate,</b> the encoding of temporal and spatial relations on predicates, and a system of grammatical person governing reference to and distinction between speakers and addressees and those about whom they are speaking.|$|E
5|$|The Court {{concluded}} that the conflict of interest materialized in a few ways. First, Stewart declined to cross-examine one of the witnesses, who could implicate Kretske but not Glasser, for fear that it would strengthen the case against Kretske. Stewart also failed to object to the testimony of other witnesses regarding prior statements of Kretske; under the rules of hearsay, these statements were obviously admissible against Kretske, but less obviously admissible against Glasser without a <b>predicate</b> showing that Glasser was a co-conspirator. Stewart feared that an objection only on behalf of Glasser would highlight the admissibility of the statements against Kretske.|$|E
5|$|Unmarked phrase {{order is}} subject–object–predicate. While the <b>predicate</b> {{generally}} has {{to remain in}} clause-final position, the other phrases are free to change order or to wholly disappear. The topic tends to be placed clause-initially, new information rather {{at the end of}} the clause. Topic can be overtly marked with bol, which can also mark contrastive focus, overt additive focus ('even, also') can be marked with the clitic č, and overt restrictive focus with the clitic l ('only').|$|E
40|$|This paper {{deals with}} a class of {{unstable}} non-monotonic global <b>predicates,</b> called herein atomic sequences of <b>predicates.</b> Such global <b>predicates</b> are defined for distributed programs built with message-passing communication only (no shared memory) and they describe global properties by causal composition of local <b>predicates</b> augmented with atomicity constraints. These constraints specify forbidden properties, whose occurrence invalidate causal sequences. This paper defines formally these atomic sequences of <b>predicates,</b> proposes a distributed algorithm to detect their occurences and gives a sketch of a proof of correctness of this algorithm...|$|R
5000|$|Substance ( [...] , ousia, essence or substance). [...] Substance is {{that which}} cannot be <b>predicated</b> of {{anything}} or {{be said to be}} in anything. Hence, this particular man or that particular tree are substances. Later in the text, Aristotle calls these particulars “primary substances”, to distinguish them from secondary substances, which are universals and can be <b>predicated.</b> Hence, Socrates is a primary substance, while man is a secondary substance. Man is <b>predicated</b> of Socrates, and therefore all that is <b>predicated</b> of man is <b>predicated</b> of Socrates.|$|R
50|$|FOLFP and FOPFP are two logics {{without any}} <b>predicates,</b> {{apart from the}} {{equality}} <b>predicates</b> between variables and the letters <b>predicates.</b> They are equal respectively to relational-P and FO(PFP) is relational-PSPACE, the classes P and PSPACE over relational machines.|$|R
5|$|Gasking {{asserted}} {{that the creation of}} the world is the most marvellous achievement imaginable. The merit of such an achievement is the product of its quality and the creator's disability: the greater the disability of the creator, the more impressive the achievement. Non-existence, Gasking asserts, would be the greatest handicap. Therefore, if the universe is the product of an existent creator, we could conceive of a greater being—one which does not exist. A non-existent creator is greater than one which exists, so God does not exist. Gasking's proposition that the greatest disability would be non-existence is a response to Anselm's assumption that existence is a <b>predicate</b> and perfection. Gasking uses this logic to assume that non-existence must be a disability.|$|E
5|$|Most often, of course, the <b>predicate</b> {{consists}} of a verb. However, there are several types of nominal predicative constructions, {{with or without a}} copula. Auxiliaries that express direction and aktionsart (among other meanings) can with the assistance of a linking converb occupy the immediate postverbal position, e.g. uuž orhison drink- leave- 'drank up'. The next position is filled by converb suffixes in connection with the auxiliary, baj- 'to be', e.g. ter güjž bajna s/he run- be- 'she is running'. Suffixes occupying this position express grammatical aspect, e.g., progressive and resultative. In the next position, participles followed by baj- may follow, e.g., ter irsen bajna s/he come- be- 'he has come'. Here, an explicit perfect and habituality can be marked, which is aspectual in meaning as well. This position may be occupied by multiple suffixes in a single predication, and it can still be followed by a converbal Progressive. The last position is occupied by suffixes that express tense, evidentiality, modality, and aspect.|$|E
25|$|The {{interpretation}} of an n-ary <b>predicate</b> symbol {{is a set}} of n-tuples of elements of the domain of discourse. This means that, given an interpretation, a <b>predicate</b> symbol, and n elements of the domain of discourse, one can tell whether the <b>predicate</b> is true of those elements according to the given interpretation. For example, an interpretation I(P) of a binary <b>predicate</b> symbol P may be the set of pairs of integers such that the first one is less than the second. According to this interpretation, the <b>predicate</b> P would be true if its first argument is less than the second.|$|E
25|$|Stage-level <b>predicates</b> allow {{modification}} by manner adverbs {{and other}} adverbial modifiers. Individual-level <b>predicates</b> do not, e.g.|$|R
30|$|The {{relations}} directly {{stored in}} the knowledge base are called atomic relations. Some relations are inferred during the question generation process, and those are called secondary relations. Similarly, the pre-existed <b>predicates</b> in the knowledge base are called as atomic <b>predicates,</b> {{and those that are}} introduced by reasoning only are called secondary <b>predicates.</b> The meanings of atomic <b>predicates</b> are defined in KM (Clark et al. 2004).|$|R
40|$|Abstract. The {{problem of}} finding palindromes in strings appears in many variants: find exact palindromes, ignore {{punctuation}} in palindromes, require space around palindromes, etc. This paper introduces several <b>predicates</b> that represent variants {{of the problem}} of finding palindromes in strings. It also introduces properties for palindrome <b>predicates,</b> and shows which <b>predicates</b> satisfy which properties. The paper connects the properties for palindrome <b>predicates</b> to two algorithms for finding palindromes in strings, and shows how we can extend some of the <b>predicates</b> to satisfy the properties that allow us to use an algorithm for finding palindromes. ...|$|R
