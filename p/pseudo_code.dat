268|108|Public
50|$|The {{following}} <b>pseudo</b> <b>code</b> {{assumes that}} these classes exist.|$|E
5000|$|... #Caption: Fig 3: <b>Pseudo</b> <b>code</b> for {{implementing}} critical section ...|$|E
5000|$|The <b>pseudo</b> <b>code</b> {{that adds}} {{transposition}} table functions to negamax with alpha/beta pruning is given as follows: ...|$|E
3000|$|Using 900 samples {{generated}} in each milling cycle, the estimated model parameter are adopted for RUL assessment. The <b>pseudo</b> <b>codes</b> for PF and RUL online assessment in Matlab is shown as follows: [...]...|$|R
30|$|II. In {{the network}} with {{partition}} P’ of a following time slice t’, find the community {{with the most}} nodes in C, {{and that is the}} mapped community C’ of C. The change of C from t to t’ is considered the change between C and C’. This step can be illustrated by the <b>pseudo</b> <b>codes</b> in Algorithm 1.|$|R
40|$|This {{technical}} report {{is meant to}} be a supplement to the work presented in [1]. All of the definitions, lemmas, theorems and proofs of each section are included, as well as several algorithm <b>pseudo</b> <b>codes</b> that were omitted due to the page limit. Where necessary for clarity, additional definitions and lemmas have been added. For th...|$|R
5000|$|The MaxClique {{algorithm}} [...] is {{the basic}} algorithm of MaxCliqueDyn algorithm. The <b>pseudo</b> <b>code</b> of the algorithm is: ...|$|E
5000|$|Given a list {{of symbols}} sorted by bit-length, the {{following}} <b>pseudo</b> <b>code</b> will print a canonical Huffman code book: ...|$|E
50|$|The {{following}} example, using {{a simplified}} <b>pseudo</b> <b>code,</b> shows how a loop might be parallelized to execute each iteration independently.|$|E
40|$|Design {{patterns}} are abstract software components for system structures and functions used in OOA/OOD. A pattern has a structure in its semantics, {{however it is}} described currently in an informal way with plain texts, figures, and <b>pseudo</b> <b>codes.</b> Towards cataloging design patterns on computers, wehave designed a structured document framework for patterns which reflects the semantic structure. This framework is based on SGML (Standard General Markup Language), and describes plain texts, configuration information for chart generation and <b>code</b> generation, and <b>pseudo</b> <b>codes</b> in a unified and integrated form. Our prototype of the design pattern catalog system is for Java software, and written in Java. It has three components: SGML DB, Browser, and Class Code Generator. This paper focuses on the browser, and the code generator. The browser converts a requested part of an SGML-based pattern document into HTML for browsing, generating anchors automatically to link to other HTML pages of patterns [...] ...|$|R
50|$|All of the {{following}} <b>code</b> is <b>pseudo</b> matlab <b>code.</b> First, read Data from video sequences.|$|R
50|$|A <b>pseudo</b> noise <b>code</b> (PN <b>code)</b> or <b>pseudo</b> {{random noise}} <b>code</b> (PRN code) {{is one that}} has a {{spectrum}} similar to a random sequence of bits but is deterministically generated. The most commonly used sequences in direct-sequence spread spectrum systems are maximal length sequences, Gold codes, Kasami codes, and Barker codes.|$|R
50|$|The {{following}} <b>pseudo</b> <b>code</b> shows {{one means}} of implementing a quadtree which handles only points. There are other approaches available.|$|E
5000|$|Below is the <b>Pseudo</b> <b>code</b> of the implementation. Step1.Compute [...] loop{ Step2.Computefor [...] Step3.Move to Step4.Multiply Step2 and Step3 [...] Step5.IDFT (...) [...] Repeat.} ...|$|E
5000|$|The {{following}} <b>pseudo</b> <b>code</b> {{shows how}} to find the element of rank [...] in [...] an unsorted array of distinct elements, to find the range medians we set [...]|$|E
30|$|VI. The more {{significant}} this node k is, {{the more likely}} it is to be found in the mapped communities. Each node will have a number W k (W k ≤n) of how many times it is included in the mapped communities throughout the time window. The group of nodes with the largest W k will become the central sets in this time window. Step III and VI can be illustrated by the <b>pseudo</b> <b>codes</b> in Algorithm 2.|$|R
30|$|Sultana et al. {{proposed}} the PN (<b>Pseudo</b> Noise <b>Code)</b> provenance scheme [24] which encodes a large provenance {{into a series}} of smaller binary blocks through <b>pseudo</b> noise <b>code</b> and then transmits these binary blocks via inter-packet delay channels. Moreover, the direct sequence spread spectrum (DSSS) technique, an approach used for enabling multiple users to transmit simultaneously on the same frequency range by utilizing distinct PN [18], is used to encode the node IDs along the packet path into the provenance.|$|R
40|$|Abstract Caustics {{are crucial}} in water rendering, {{yet they are}} often {{neglected}} in real-time applications due to the demanding computational requirements of the general purpose caustics computation methods. In this paper we present a two-pass algorithm for caustics computation that is extremely fast and produces high quality results. Our algorithm is targeted for commonly used height field representations of water and a planar caustic-receiving surface. The underlying theory of our approach is presented along with implementation details and <b>pseudo</b> <b>codes...</b>|$|R
5000|$|The <b>pseudo</b> <b>code</b> can be {{obtained}} simply from the one of FQ by replacing the computation of the virtual departure time by [...] packet.virFinish= virStart + packet.size / Riwith [...]|$|E
5000|$|The {{unit of time}} {{is defined}} such that one step of the <b>pseudo</b> <b>code</b> {{corresponds}} to one unit. To execute the loop, in its entirety, requires four units of time. [...] is defined to be four.|$|E
50|$|P-Code is a {{name for}} several of Microsoft's {{proprietary}} intermediate languages. They provided an alternate binary format to machine code. At various times, Microsoft have said p-code is an abbreviation for either packed code or <b>pseudo</b> <b>code.</b>|$|E
40|$|Abstract. A novel {{method to}} {{fingerprint}} classification, {{in which the}} naïve Bayes classifier (NB) and OVA SVMs are integrated, is presented. In order to solve the tie problem of combing OVA SVMs, we propose a subsumption ar-chitecture dynamically organized by the probability of classes. NB calculates the probability using singularities and <b>pseudo</b> <b>codes,</b> while OVA SVMs are trained on FingerCode. The proposed method not only tolerates ambiguous fin-gerprint images by combining different fingerprint features, but produces a classification accuracy of 90. 8 % for 5 -class classification on the NIST 4 data-base, that is higher than conventional methods. ...|$|R
40|$|This paper {{presents}} {{an overview of}} low level parallel image processing algorithms and their implementation for active vision systems. Authors have demonstrated novel low level image processing algorithms for point operators, local operators, dithering, smoothing, edge detection, morphological operators, image segmentation and image compression. The algorithms have been prepared & described as <b>pseudo</b> <b>codes.</b> These algorithms have been simulated using Parallel Computing Toolboxtrade (PCT) of MATLAB. The PCT provides parallel constructs in the MATLAB language, such as parallel for loops, distributed arrays and message passing & enables rapid prototyping of parallel code through an interactive parallel MATLAB session...|$|R
40|$|A {{continuous}} {{genetic algorithm}} for flux calibration in scalar conservation laws Aníbal Coronel, Natanael Guerrero, Richard Lagos, and Esperanza Lozada Abstract — In this paper, we introduce a continuous genetic algorithm for {{the solution of}} the flux identification problem in scalar conservation laws. The parameter identification is formulated as an optimization problem, were the model is considered as a constraint. We discretize the direct problem by a monotone finite volume method and we consider the least squares cost function. We write complete <b>pseudo</b> <b>codes</b> of each step of the algorithm. In addition, we test the algorithm with two numerical examples and make some conclusions 1. Key Words — Inverse problems; continuous genetic algorithms...|$|R
5000|$|A {{compression}} {{virus is}} an example of a benevolent computer virus, invented by Fred Cohen. It searches for an uninfected executable file, compresses the file and prepends itself to it. The virus can be described in <b>pseudo</b> <b>code</b> ...|$|E
50|$|Initially, all {{adjacency}} {{lists are}} in level h. Over time the query procedure GETEDGELISTS moves the adjacency list of each node from higher numbered to lower numbered levels, until the adjacency list finally reaches level G1 and is removed. The <b>pseudo</b> <b>code</b> is as following.|$|E
50|$|Programs in {{the book}} are {{presented}} in <b>pseudo</b> <b>code</b> with implementations in Java, Python, and Lisp available online. There are also unsupported implementations in Prolog, C++, C#, and several other languages. A github repository exists that is dedicated to implementations of the subject material.|$|E
40|$|An {{encryption}} technique {{is widely used}} to keep data confidential. Most of the block symmetric algorithms use substitution functions. Often this functions use so called S-BOX matrix. In this paper author presents one software tool for testing and measuring square s-boxes. Based of information theory functions for testing static and dynamic criteria are presented. These criteria are mathematically defined for square s-boxes. Two new criteria "private criteria" a proposed and <b>pseudo</b> <b>codes</b> for they creation and testing are presented. Comment: Acknowledgment-The work {{presented in this paper}} has been performed in the framework of the EU Project INDECT [...] grant agreement number: 218086. 12 th International Conference on Research in Telecommunication Technologies RTT 2010 (September 8 - 10), Ostrava, Czech Republi...|$|R
40|$|As {{the core}} data {{structure}} of FCA (Formal Concept Analysis), concept lattice {{has been widely}} used {{in the field of}} machine learning and data mining. It is useful to study algorithms of building concept lattice in practical applications. There are several of algorithms of building concept lattice which have been developed. This paper presents an efficient algorithm named CMCG (Concept-Matrix based Concepts Generation) for building concept lattice and corresponding Hasse graph based on concept-matrix which is a novel notion. The Algorithm CMCG finds all lower neighbors of concept by using the rank of attribute in concept-matrix and generate corresponding Hasse graph. The validity of the algorithm was proved in theory and by experiment. The <b>pseudo</b> <b>codes</b> of CMCG Algorithm are given and that performance of CMCG is superior to one of Lattice Algorithm is proved at end...|$|R
40|$|The {{hierarchical}} abstract simulator is a multicomponent, multilevel discrete event model {{where each}} processor communicates with other processors by message passing. A methodology {{was developed to}} map the hierarchical abstract simulator onto distributed simulator architectures. The Intel's Personal Super Computer (iPSC) family with a concurrent-processing architecture is well suited for such simulation implementation. This thesis presents an alternative mapping realization of the hierarchical abstract simulator by using Intel's FORTRAN 286, FORTRAN 77 with extensions, on the iPSC computer (Hypercube). Algorithms for the hierarchical abstract simulator are provided in high level <b>pseudo</b> <b>codes.</b> A summary of iPSC system overview and programming concepts is described. Also, two examples are given for the illustration of our hypercube implementation. Finally, some experimental runs were made on the implementation, and comparisons of the performance (execution time) between sequential and parallel processor assignment are made...|$|R
50|$|This {{means that}} the first symbol B is of length 1, then the A of length 2, and remains of 3. Since the symbols are sorted by bit-length, we can {{efficiently}} reconstruct the codebook. A <b>pseudo</b> <b>code</b> describing the reconstruction is introduced on the next section.|$|E
5000|$|When {{implementing}} the <b>pseudo</b> <b>code</b> {{in a single}} process system or under cooperative multitasking, {{it is better to}} replace the [...] "do nothing" [...] sections with code that notifies the operating system to immediately switch to the next thread. This primitive {{is often referred to as}} [...]|$|E
50|$|For {{traditional}} computer models, both {{requirements are}} easy to solve. Here is some Python code (kind of <b>pseudo</b> <b>code</b> but works) where the function nextOutput gets one single number/letter as input and returns either a letter or nothing. nextOutputs is there for convenience to operate on a whole sequence.|$|E
40|$|Over {{the past}} few years, the {{presence}} of game-based learning in Slovenian education has increased significantly. To further such utilization, an educational computer game was made, {{as a part of}} project within a computer science didactics class in the 4 th year of studies at Faculty of Education, University of Ljubljana, to help pupils learn and understand sorting algorithms, specifically bubble and selection sort. Both algorithms are introduced to pupils through an entertaining story, that later requires a construction of <b>pseudo</b> <b>codes</b> and tests the pupil’s newly acquired knowledge. The game doesn’t require any prior programming knowledge, which increases its usability and eases the teacher’s incorporation of the game into a structured lesson. This paper presents the production and conceptual development of the game, with a focus on representation of algorithms in a pupil friendly, logical, explanatory and motivational way, {{as well as on the}} game itself...|$|R
40|$|The main aim of master's {{thesis is}} usage of new {{instructions}} from instruction set called Intel® Advanced Encryption Standard New Instructions (AES-NI), {{which is available}} on processors with code name Westmere and newer. In theoretical part, there are described symmetric block ciphers and their operational modes. Cipher AES is described in details, especially used block transformations, key expansion and equivalent inverse cipher. Next topic is description of instructions of AES-NI instruction set – their function is explained using <b>pseudo</b> <b>codes</b> of instructions and there are examples of their usage in code. Further in work, dynamic-link library is created, which implements cipher AES with key sizes 128, 192 and 256 bites and implements operational modes described in theoretical part. Library functions are called from Matlab by scripts and their functionality is proved by checking test vectors values, which are provided in publications of National Institute of Standards and Technology...|$|R
40|$|As a {{dedicated}} solar radio interferometer, the MingantU SpEctral RadioHeliograph (MUSER) generates massive observational {{data in the}} frequency range of 400 MHz [...] 15 GHz. High-performance imaging forms a significantly important aspect of MUSER's massive data processing requirements. In this study, we implement a practical high-performance imaging pipeline for MUSER data processing. At first, the specifications of the MUSER are introduced and its imaging requirements are analyzed. Referring to {{the most commonly used}} radio astronomy software such as CASA and MIRIAD, we then implement a high-performance imaging pipeline based on the Graphics Processing Unit (GPU) technology with respect to the current operational status of the MUSER. A series of critical algorithms and their <b>pseudo</b> <b>codes,</b> i. e., detection of the solar disk and sky brightness, automatic centering of the solar disk and estimation of the number of iterations for clean algorithms, are proposed in detail. The preliminary experimental results indicate that the proposed imaging approach significantly increases the processing performance of MUSER and generates images with high-quality, which can meet the requirements of the MUSER data processing...|$|R
