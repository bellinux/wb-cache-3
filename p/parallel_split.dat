21|154|Public
25|$|The {{split in}} the Irish Republican Army, soon {{followed}} by a <b>parallel</b> <b>split</b> in Sinn Féin, {{was the result of}} the dissatisfaction of more traditional and militant republicans at the political direction taken by the leadership. The particular object of their discontent was Sinn Féin's ending of its policy of abstentionism in the Republic of Ireland. This issue is a key one in republican ideology, as traditional republicans regarded the Irish state as illegitimate and maintained that their loyalty was due only to the Irish Republic declared in 1916 and in their view, represented by the IRA Army Council.|$|E
5000|$|<b>Parallel</b> <b>Split</b> - execute {{two or more}} {{activities}} in any order or in parallel ...|$|E
5000|$|Split pattern (<b>{{parallel}}</b> <b>split)</b> : perform several {{tasks in}} parallel {{at the same}} time (e.g. Map reduce).|$|E
30|$|The {{fact that}} many {{practical}} optimization problems naturally have multiple blocks of variables motivates {{the development of a}} class of multi-block ADMs, such as the one with <b>parallel</b> <b>splitting</b> [29], with prediction-correction [30], and with Gaussian back substitution [31]. Due {{to the nature of the}} decentralized consensus optimization problem (2) and the need of parallelization, we choose the multi-block ADM with <b>parallel</b> <b>splitting</b> in [29].|$|R
30|$|It {{is obvious}} that our {{proposed}} algorithm falls into the <b>parallel</b> <b>splitting</b> method since all the subproblems (3.1) can be solved in parallel by many existing efficient algorithms. Moreover, the proposed algorithm makes {{the best of the}} separable characteristic of the concerned problem (1.1)-(1.2) since only one function is involved in each subproblem. In addition, the proposed algorithm is a prediction-correction <b>parallel</b> <b>splitting</b> method. But the most significant difference from others is that only λ is corrected, which leads to less computational cost.|$|R
30|$|The {{convergence}} {{property of}} our <b>parallel</b> <b>splitting</b> algorithm {{is given in}} this section. First, we give a lemma that is useful for the convergence result.|$|R
5000|$|The OB•12 has two VCF, {{each one}} being a 12db (2 pole) filter. For each filter, mode can be chosen between high-pass, low pass, band-pass and off. Filters routing can be <b>parallel,</b> <b>split</b> or serial, the latter {{resulting}} in a 24db (4 pole) filter. Cutoff, resonance, modulators and keyboard tracking affect both VCFs.|$|E
50|$|Testing can be {{conducted}} sequentially or in parallel. In sequential testing, often {{the easiest to}} implement, the various versions of the webpages are made available online for a specified time period. In <b>parallel</b> (<b>split)</b> testing, both versions are made available, and the traffic is divided between the two. The results of sequential split testing can be skewed by differing time periods and traffic patterns in which the different tests are run.|$|E
50|$|The {{split in}} the Irish Republican Army, soon {{followed}} by a <b>parallel</b> <b>split</b> in Sinn Féin, {{was the result of}} the dissatisfaction of more traditional and militant republicans at the political direction taken by the leadership. The particular object of their discontent was Sinn Féin's ending of its policy of abstentionism in the Republic of Ireland. This issue is a key one in republican ideology, as traditional republicans regarded the Irish state as illegitimate and maintained that their loyalty was due only to the Irish Republic declared in 1916 and in their view, represented by the IRA Army Council.|$|E
30|$|In this section, we {{formally}} {{state the}} procedure {{of the new}} <b>parallel</b> <b>splitting</b> method for solving the problem (1.1)-(1.2) and provide some insights on the method’s properties.|$|R
50|$|There were <b>parallel</b> <b>splits</b> in {{the republican}} {{movement}} in the period 1969 to 1970; one in December 1969 in the IRA, {{and the other in}} Sinn Féin in January 1970.|$|R
40|$|A partial <b>parallel</b> <b>splitting</b> {{augmented}} Lagrangian {{method for}} solving constrained matrix optimization problems. (English summary) Comput. Math. Appl. 60 (2010), no. 6, 1515 – 1524. Summary: “Alternating directions methods (ADMs) are very effective for solving convex optimization problems with separable structure. However, when these methods {{are applied to}} solve convex optimization problems with three separable operators, their convergence results have not been established as yet. In this paper, we consider a class of constrained matrix optimization problems. The problem is first reformulated into a convex optimization problem with three separable operators, then it is solved by a proposed partial <b>parallel</b> <b>splitting</b> method. The proposed method combines the <b>parallel</b> <b>splitting</b> (augmented Lagrangian) method (PSALM) and the alternating directions method (ADM), and it {{is referred to as}} PADALM in short. The main difference between PADALM and PSALM is that in PADALM, two operators are handled first by a parallel method, then the third operator and the former two are dealt with by an alternating method. Finally, the convergence result for PADALM is established and numerical results are provided to show the efficacy of PADALM and its superiority over PSALM. ” References 1. N. J. Higham, Computing the nearest correlation matrix—a problem from finance, IMA Journa...|$|R
40|$|We {{show that}} the class of perfect graphs known as split graphs can be {{efficiently}} recognized in a parallel process environment. Given an undirected graph G = (V, E) with n vertices we define a subgraph G, = (AV, AE) and we prove some properties on G, leading to a constant-time <b>parallel</b> <b>split</b> graph recognition algorithm...|$|E
30|$|That {{more and}} deeper studies of {{integration}} are required {{across a wide}} range of countries, including low income countries. It would also be of interest to include in these studies countries, such as Australia, Korea and Japan, that not only practise split systems but have also <b>parallel</b> <b>split</b> systems for children from 3 or 4 years up to school age.|$|E
40|$|Using (a,b) -trees as an example, we {{show how}} to perform a <b>parallel</b> <b>split</b> with {{logarithmic}} latency and parallel join, bulk updates, intersection, union (or merge), and (symmetric) set difference with logarithmic latency and with information theoretically optimal work. We present both asymptotically optimal solutions and simplified versions that perform well in practice - they are several times faster than previous implementations...|$|E
30|$|Applying the {{multi-block}} ADM in (2) directly gets a decentralized algorithm, {{and does}} not need to introduce a new block of auxiliary variables and eliminate them, as we have done in the two-block ADM. We provide the algorithm to solve (2) based on the multi-block ADM with <b>parallel</b> <b>splitting,</b> denoted as MB-ADM. Detailed derivation of MB-ADM is given in Appendix Appendix 1.|$|R
40|$|AbstractAlternating {{directions}} methods (ADMs) {{are very}} effective for solving convex optimization problems with separable structure. However, when these methods {{are applied to}} solve convex optimization problems with three separable operators, their convergence results have not been established as yet. In this paper, we consider a class of constrained matrix optimization problems. The problem is first reformulated into a convex optimization problem with three separable operators, then it is solved by a proposed partial <b>parallel</b> <b>splitting</b> method. The proposed method combines the <b>parallel</b> <b>splitting</b> (augmented Lagrangian) method (PSALM) and the alternating directions method (ADM), and it {{is referred to as}} PADALM in short. The main difference between PADALM and PSALM is that in PADALM, two operators are handled first by a parallel method, then the third operator and the former two are dealt with by an alternating method. Finally, the convergence result for PADALM is established and numerical results are provided to show the efficacy of PADALM and its superiority over PSALM...|$|R
40|$|Extrapolation with a <b>parallel</b> <b>splitting</b> {{method is}} discussed. The <b>parallel</b> <b>splitting</b> method reduces a multidimensional problem into {{independent}} one dimensional problems and {{can improve the}} convergence order of space variables to an order {{as high as the}} regularity of the solution permits. Therefore, in order to match the convergence order of the space variables, a high order method should be also used for the time integration. Second and third order extrapolation methods are used to improve the time convergence and {{it was found that the}} higher order extrapolation method can produce a more accurate solution than the lower order extrapolation method, but the convergence order of higher order extrapolation may be less than the actual order of the extrapolation. We also try to show a fact that has not been studied in the literature, i. e. when the extrapolation is used, it may decrease the convergence of the space variables. The higher the order of the extrapolation method, the more it decr [...] ...|$|R
40|$|The use of {{parallel}} computers for numerically solving flow fields has gained much importance in recent years. This paper introduces {{a new high}} order numerical scheme for computational fluid dynamics (CFD) specifically designed for parallel computational environments. A distributed MIMD system gives the flexibility of treating different elements of the governing equations with totally different numerical schemes in {{different regions of the}} flow field. The parallel decomposition of the governing operator to be solved is the primary <b>parallel</b> <b>split.</b> The primary <b>parallel</b> <b>split</b> was studied using a hypercube like architecture having clusters of shared memory processors at each node. The approach is demonstrated using examples of simple steady state incompressible flows. Future studies should investigate the secondary split because, depending on the numerical scheme that each of the processors applies {{and the nature of the}} flow in the specific subdomain, it may be possible for a processor to seek better, or higher order, schemes for its particular subcase...|$|E
40|$|We present {{efficient}} (parallel) algorithms for two hierarchical clustering heuristics. We {{point out}} that these heuristics can also be applied to solve some algorithmic problems in graphs. This includes split decomposition. We show that efficient <b>parallel</b> <b>split</b> decomposition induces an efficient parallel parity graph recognition algorithm. This {{is a consequence of}} the result of [7] that parity graphs are exactly those graphs that can be split decomposed into cliques and bipartite graphs...|$|E
40|$|In this paper, {{we present}} a new MapReduce framework, called Grex, {{designed}} to leverage general purpose graphics processing units (GPUs) for parallel data processing. Grex provides several new features. First, it supports a <b>parallel</b> <b>split</b> method to tokenize input data of variable sizes, such as words in e-books or URLs in web documents, in parallel using GPU threads. Second, Grex evenly distributes data to map/reduce tasks to avoid data partitioning skews. In addition, Grex provides a new memory management scheme to enhance the performance by exploiting the GPU memory hierarchy. Notably, all these capabilities are supported via careful system design without requiring any locks or atomic operations for thread synchronization. The experimental results show that our system is up to 12. 4 x and 4. 1 x faster than two state-of-the-art GPU-based MapReduce frameworks for the tested applications. 1...|$|E
30|$|Previous studies, such as {{model of}} crack {{propagation}} or micro crack (Dias-da-Costa et al. 2011; Yerramalli and Waas 2001; Nie et al. 2015; Haeri et al. 2014) {{were no longer}} applicable when the micro-cracks in the rock masses propagated (Haeri et al. 2015) and became large <b>parallel</b> <b>splitting</b> crack groups. Therefore, {{it is necessary to}} find a more suitable constitutive model which can determine the effectiveness of the research results.|$|R
30|$|In this section, we {{illustrate}} {{the effectiveness of}} our algorithm by comparing with some existing algorithms. We denote the proposed method in this paper as ‘NEW’, the alternating projection-based prediction-correction method in [15] as ‘HLQ’, the inexact <b>parallel</b> <b>splitting</b> augmented Lagrangian method in [12] as ‘TY’ and the simultaneous method in [13] as ‘ZHY’. All codes are written in Matlab and run on i 3 - 2100 CPU 3.1 GHZ and 3 GB memory.|$|R
5000|$|Disjointed <b>Parallels</b> is <b>split</b> 7" [...] EP by Man or Astro-man? and Anachronauts. It was {{released}} by Eerie Materials in 1995.|$|R
40|$|A general formula (a) {{of which}} a special case is the Kuder-Richardson {{coefficient}} of equivalence is shown to be the mean of all split-half coefficients resulting from different splittings of a test. is therefore {{an estimate of the}} correlation between two random sam-ples of items from a universe of items like those in the test. ~ is found to be an appropriate index of equivalence and, except for very short tests, of the first-factor concentration i the test. Tests di-visible into distinct subtests hould be so divided before using the formula. The index ~ j, derived from a, is shown to be an index of inter-item homogeneity. Comparison is made to the Guttmau and Loevinger approaches. <b>Parallel</b> <b>split</b> coefficients are shown to be un-necessary for tests of common types. In designing tests, maximum interpretability of scores is obtained by increasing the firat-facter concentration in any separately-scored subtest and avoiding sub-stantial group-factor clusters within a subtest. Scalability is not...|$|E
40|$|Abstract—In {{order to}} assist {{companies}} dealing with data preparation problems, different approaches are developed {{to handle the}} dirty data. However, these firms {{are not able to}} predict the final outcome from the customer data, before running all the business process. This gives rise to an extra cost for the company at the end, if the data is highly corrupted. Therefore, in this paper; we propose a framework to estimate the propagation of the error through a data quality tool. Since data quality tools are a variation of the workflows, we have based our modeling on workflow schema. The reliability and the risk propagation parameters are introduced for the sequence, <b>parallel</b> <b>split</b> and conditional type of control properties that can be seen in a data quality tool. At the end, a business model is introduced and an experiment with the proposed model is given as a proof-of-concept. Index Terms—business process, data cleansing, data quality, risk propagation, workflow I...|$|E
40|$|Abstract: Traditionally, {{workflow}} modeling {{is typically}} done by interviews or questionnaires which stay quite limited for {{the acquisition of}} workflow models and their adaptation to changing requirements. In order to build such model, this paper proposes to “reverse the process”. The approach, we propose, is able to acquire workflow model from workflow log, which contains information about execution events. This paper presents a mining technique to discover workflows patterns (e. g. Sequence, <b>Parallel</b> <b>split,</b> Exclusive choice, etc.) from workflow event log in the objective to build a global workflow model. An event log is a view of a workflow execution at a given instant. The mining of workflow patterns {{is done by the}} combination of two complementary techniques: an algorithmic technique and a statistical analysis. The building of the global workflow model is done with bottom-up approach. The discovering technique proposed can deal with some ambiguities where the single use of an algorithmic technique method cannot resolve. ...|$|E
30|$|Decentralized {{optimization}} {{has attracted}} much research interest for resource-limited networked multi-agent systems in recent years. Decentralized Tconsensus optimization, {{which is one}} of the decentralized optimization problems of great practical importance, minimizes an objective function that is the sum of the terms from individual agents over a set of variables on which all the agents should reach a consensus. This problem can be reformulated into an equivalent model with two blocks of variables, which can then be solved by the alternating direction method (ADM) with only communications between neighbor nodes. Motivated by a recently emerged class of so-called multi-block ADMs, this article demonstrates that it is more natural to reformulate a decentralized consensus optimization problem to one with multiple blocks of variables and solve it by a multi-block ADM. In particular, we focus on the multi-block ADM with <b>parallel</b> <b>splitting,</b> which has easy decentralized implementation. Convergence rate is analyzed in the setting of average consensus, and the relation between two-block and multi-block ADMs are studied. Numerical experiments demonstrate the effectiveness of the multi-block ADM with <b>parallel</b> <b>splitting</b> in terms of speed and communication cost and show that it has better network scalability.|$|R
40|$|A <b>parallel</b> <b>splitting</b> {{method is}} {{proposed}} for solving systems of coupled monotone inclusions in Hilbert spaces, and its convergence is established {{under the assumption}} that solutions exist. Unlike existing alternating algorithms, which are limited to two variables and linear coupling, our parallel method can handle an arbitrary number of variables as well as nonlinear coupling schemes. The breadth and flexibility of the proposed framework is illustrated through applications in the areas of evolution inclusions, variational problems, best approximation, and network flows...|$|R
40|$|Decision {{trees are}} a popular {{technique}} in statistical data classification. They recursively partition the feature space into disjoint sub-regions until each sub-region becomes homogeneous {{with respect to}} a particular class. The basic Classification and Regression Tree (CART) algorithm partitions the feature space using axis <b>parallel</b> <b>splits.</b> When the true decision boundaries are not aligned with the feature axes, this approach can produce a complicated boundary structure. Oblique decision trees use oblique decision boundaries to potentially simplify the boundary structure. The major limitation of this approach is that the tree induction algorithm is computationally expensive. In this article we present a new decision tree algorithm, called HHCART. The method utilizes a series of Householder matrices to reflect the training data at each node during the tree construction. Each reflection is based on the directions of the eigenvectors from each classes' covariance matrix. Considering axis <b>parallel</b> <b>splits</b> in the reflected training data provides an efficient way of finding oblique splits in the unreflected training data. Experimental results show that the accuracy and size of the HHCART trees are comparable with some benchmark methods in the literature. The appealing feature of HHCART is that it can handle both qualitative and quantitative features in the same oblique split. Comment: 13 Pages, 1 Figure, 4 Tables, 1 Algorith...|$|R
40|$|Business process {{modeling}} {{is the first}} and the most important task in business process management (BPM). Business process models are implicitly composed of a set of control flow patterns, such as the <b>Parallel</b> <b>Split,</b> Synchronization, Exclusive Choice, and Simple Merge, etc. Several studies have proposed the concepts and definitions of control flow patterns. But, few analyzed the structure of process models to identify the constituent control flow patterns. This research proposes a three-phased framework to recognize the constituent control flow patterns and their interrelationship for a Business Process Modeling Notation (BPMN) process model. The conceptual phase first describes the conceptual process for identifying the control flow patterns from a process model. The design phase then develops the detailed procedure and methods based on the proposed conceptual process to recognize the control flow patterns for a BPMN process model. Finally, the implementation phase carries out the proposed procedure and methods by developing a workflow pattern representation system for BPMN process models...|$|E
40|$|Traditionally, {{workflow}} modeling {{is typically}} done by interviews or questionnaires which stay quite limited for {{the acquisition of}} workflow models and their adaptation to changing requirements. In order to build such model, this paper proposes to “reverse the process”. The approach, we propose, is able to acquire workflow model from workflow log, which contains information about execution events. This paper presents a mining technique to discover workflows patterns (e. g. Sequence, <b>Parallel</b> <b>split,</b> Exclusive choice, etc.) from workflow event log in the objective to build a global workflow model. An event log is a view of a workflow execution at a given instant. The mining of workflow patterns {{is done by the}} combination of two complementary techniques: an algorithmic technique and a statistical analysis. The building of the global workflow model is done with bottom-up approach. The discovering technique proposed can deal with some ambiguities where the single use of an algorithmic technique method cannot resolve...|$|E
40|$|Process {{modeling}} grammars {{are used}} to create scripts of a business domain that a process-aware information system is intended to support. A key grammatical construct of such grammars {{is known as a}} Gateway. A Gateway construct is used to describe scenarios in which the workflow of a process diverges or converges according to relevant conditions. Gateway constructs have been subjected to much academic discussion about their meaning, role and usefulness, and have been linked to both process-modeling errors and process-model understandability. This paper examines perceptual discriminability effects of Gateway constructs on an individual's abilities to interpret process models. We compare two ways of expressing two convergence and divergence patterns – <b>Parallel</b> <b>Split</b> and Simple Merge – implemented in a process modeling grammar. On the basis of an experiment with 98 students, we provide empirical evidence that Gateway constructs aid the interpretation of process models due to a perceptual discriminability effect, especially when models are complex. We discuss the emerging implications for research and practice, in terms of revisions to grammar specifications, guideline development and design choices in process modeling...|$|E
30|$|In this section, we {{demonstrate}} the practical efficiency of MHD-ALM by applying it to recover low-rank and sparse components of matrices from incomplete and noisy observation. Furthermore, {{to give more}} insight into the behavior of MHD-ALM, we compare it with the full Jacobian decomposition of the augmented Lagrangian method (FJD-ALM) [12] and the proximal partially <b>parallel</b> <b>splitting</b> method with constant step size (PPPSM) [25]. All experiments are performed on a Pentium(R) Dual-Core CPU T 4400 @ 2.2  GHz PC with 4  GB of RAM running on 64 -bit Windows operating system.|$|R
30|$|Indeed, {{there are}} many methods for solving the problem (1.4) in the literature. Among these methods, the <b>parallel</b> <b>splitting</b> {{augmented}} Lagrangian method and the alternating direction method of multipliers are two power tools. The recent research indicates that, due to the separable convex optimization with three block variables, the direct extension of the alternating direction method of multipliers is not necessarily convergent [10]. Thus, some hybrid splitting methods {{can be found in}} the literature. For example, see He [11], Peng and Wu [12], and Glowinski and Le Tallec [13].|$|R
30|$|The system (1.1)-(1.2) can be {{considered}} as a mathematical formulation of a one-leader-m-follower Stackelberg game in which the leader constantly improves his strategy by determining the value of λ from strategy set R^l while the ith follower determines his plan x_i from set X_i based on the value of λ. Based on the characteristic, we design an augmented Lagrangian-based <b>parallel</b> <b>splitting</b> method to solve the system. In the method, each player can only control and improve his own decision. We establish the global convergence of the method under some suitable conditions. Finally, we conduct a computational study to demonstrate the validity and efficiency of our algorithm.|$|R
