0|168|Public
5000|$|The <b>half</b> <b>adder</b> adds two single {{binary digits}} A and B. It has two outputs, sum (S) and carry (C). The carry signal {{represents}} an overflow {{into the next}} digit of a multi-digit addition. The value of the sum in decimal system is [...] The simplest half-adder design, pictured on the right, incorporates an XOR gate for S and an AND gate for C. The Boolean logic for the sum (in this case S) will be AB+AB whereas for carry (C) will be AB. With the addition of an OR gate to combine their carry outputs, two <b>half</b> <b>adders</b> can be combined to make a full adder.The <b>half</b> <b>adder</b> adds two input bits and generates a carry and sum, which are the two outputs of a <b>half</b> <b>adder.</b> The input variables of a <b>half</b> <b>adder</b> are called the augend and addend bits. The output variables are the sum and carry. The truth table for the <b>half</b> <b>adder</b> is: ...|$|R
30|$|The only {{situation}} which cannot {{be resolved by}} the word-voter is the scenario when a majority of function modules in the TMR system become faulty and agree to produce similar incorrect outputs, which would not be signalled as an error because the word-voter would view this as incorrect outputs produced by just one faulty function module. Under the above assumption of the fault-free <b>half</b> <b>adder</b> 2 (i.e. Sum 2  =  1 and Cout 2  =  1) and faulty <b>half</b> <b>adders</b> 1 and 3, let us now assume that the outputs of <b>half</b> <b>adders</b> 1 and 3 are Sum 1  = Sum 3  =  0 and Cout 1  = Cout 3  =  0, instead. Given this, W 12  = W 23  =  0, but W 13  =  1 since the outputs of the faulty <b>half</b> <b>adders</b> 1 and 3 match. As a consequence, ErrorWV evaluates to 0, indicating no error, which is incorrect. Moreover, since W 13  =  1, the outputs of <b>half</b> <b>adder</b> 1 (i.e. Sum 1  = Cout 1  =  0) are selected and forwarded to the primary outputs viz. Sum and Cout, which is also incorrect.|$|R
5000|$|Add a <b>half</b> <b>adder</b> {{for weight}} 2, outputs: 1 weight-2 wire, 1 weight-4 wire ...|$|R
5000|$|Add a <b>half</b> <b>adder</b> {{for weight}} 32, outputs: 1 weight-32 wire, 1 weight-64 wire ...|$|R
5000|$|... #Caption: Decimal 4-digit ripple carry adder. FA = full <b>adder,</b> HA = <b>half</b> <b>adder.</b>|$|R
5000|$|Reduce {{the number}} of partial {{products}} to two by layers of full and <b>half</b> <b>adders.</b>|$|R
5000|$|Add a {{full adder}} for weight 8, and <b>half</b> <b>adders</b> for weights 4, 16, 32, 64 ...|$|R
5000|$|If {{there are}} two wires of the same weight left, input them into a <b>half</b> <b>adder.</b>|$|R
40|$|As we {{are aware}} that carry select adder is the fastest one amongdata {{processing}} element, {{on the other hand}} due to having pairs of ripple carry adder structure traditional carry select adder consumes more area. So proposed scheme is to developa low power and low area <b>half</b> <b>adder</b> based (CSLA) using simple using common Boolean logic (CBL), where it employs one <b>half</b> <b>adders</b> to perform the summation operation for the common Boolean logic (CBL) and carry zero respectively. <b>Half</b> <b>adder</b> and CBL have to be designed where <b>half</b> <b>adder</b> requires one XOR gate, one AND gate where CBL requires only one NOT as well as one OR gate. Here also architecures like 8 -bit, 16 -bit, 32 -bit, 64 -bit square root carry select adder (SQRT CSLA) is compared with regular one and modified also. The results show there is a great reduction in area and power consumption. Our work shows the better performance in case of minimized delay, less area and low power. The obtained results from the simulation clearly proves our proposed CSLAscheme is dominates the regular SQRT CSLA...|$|R
40|$|We gratefully {{acknowledge}} nancial {{support from the}} European Union (FPVII, 2007 - 2013) under grant agreement no 256959 NANOPOWER and grant agreement no 318287 LANDAUER {{as well as from}} the state of Bavaria. In this paper we demonstrate two realizations of a <b>half</b> <b>adder</b> based on a voltage-rectifying mechanism involving two Coulomb-coupled quantum dots. First, we examine the ranges of operation of the <b>half</b> <b>adder's</b> individual elements, the AND and XOR gates, for a single rectifying device. It allows a switching between the two gates by a control voltage and thus enables a clocked <b>half</b> <b>adder</b> operation. The logic gates are shown to be reliably operative in a broad noise amplitude range with negligible error probabilities. Subsequently, we study the implementation of the <b>half</b> <b>adder</b> in a combined double-device consisting of two individually tunable rectifiers. We show that this double device allows a simultaneous operation of both relevant gates at once. The presented devices draw their power solely from electronic fluctuations and are therefore an advancement in the field of energy efficient and autonomous electronics. PostprintPeer reviewe...|$|R
40|$|Multipliers plays a {{vital role}} in the field of digital {{processing}} of information especially signal and image. The key benefit of 64 bit multiplier is high precision computation {{but it has to be}} faster aswell. In this paper, we have designed a modified 64 bit Wallace multiplier. The designed multiplier reduces the number of <b>half</b> <b>adders</b> which are mainly used in the reduction phase of multiplier and alsothey do not contribute in the reduction of partial products. For the entire multiplication process we have used only 38 <b>half</b> <b>adders.</b> The multiplier is designed using Verilog-HDL and implemented using TSMC 45 nm technology. It is found that the designed multiplier has reduced number of <b>half</b> <b>adder</b> in each stage and it consumes 15. 22 mW at 166 MHz...|$|R
5000|$|... #Caption: The {{circuit diagram}} for a binary <b>half</b> <b>adder,</b> which adds two bits together, {{producing}} sum and carry bits.|$|R
40|$|Abstract—Multipliers plays a {{vital role}} in the field of digital {{processing}} of information especially signal and image. The key benefit of 64 bit multiplier is high precision computation {{but it has to be}} faster as well. In this paper, we have designed a modified 64 bit Wallace multiplier. The designed multiplier reduces the number of <b>half</b> <b>adders</b> which are mainly used in the reduction phase of multiplier and also they do not contribute in the reduction of partial products. For the entire multiplication process we have used only 38 <b>half</b> <b>adders.</b> The multiplier is designed using Verilog-HDL and implemented using TSMC 45 nm technology. It is found that the designed multiplier has reduced number of <b>half</b> <b>adder</b> in each stage and it consumes 15. 22 mW at 166 MHz...|$|R
40|$|ABSTRACT: As we {{are aware}} that carry select adder is the fastest one amongdata {{processing}} element, {{on the other hand}} due to having pairs of ripple carry adder structure traditional carry select adder consumes more area. So proposed scheme is to developa low power and low area <b>half</b> <b>adder</b> based (CSLA) using simple using common Boolean logic (CBL), where it employs one <b>half</b> <b>adders</b> to perform the summation operation for the common Boolean logic (CBL) and carry zero respectively. <b>Half</b> <b>adder</b> and CBL have to be designed where <b>half</b> <b>adder</b> requires one XOR gate, one AND gate where CBL requires only one NOT as well as one OR gate. Here also architecures like 8 -bit, 16 -bit, 32 -bit, 64 -bit square root carry select adder (SQRT CSLA) is compared with regular one and modified also. The results show there is a great reduction in area and power consumption. Our work shows the better performance in case of minimized delay, less area and low power. The obtained results from the simulation clearly proves our proposed CSLA scheme is dominates the regular SQRT CSLA. Keywords:ASIC, Power, area and delay efficient, BEC, SQRT CSLA. I...|$|R
5000|$|Reduce {{the number}} of partial {{products}} by stages of full and <b>half</b> <b>adders</b> until {{we are left with}} at most two bits of each weight.|$|R
40|$|Abstract — In {{high speed}} applications, {{multipliers}} and their associated circuits like accumulators, <b>half</b> <b>adders,</b> and full adders consume a significant portion. Therefore, {{it is necessary}} to increase their performance as well as size efficiency. In order to reduce the hardware complexity which ultimately reduces an area and power, energy efficient full adders plays crucial role in Wallace tree multiplier. Reduced Complexity Wallace multiplier (RCWM) will have fewer adders than Standard Wallace multiplier (SWM). The Reduced complexity reduction method greatly reduces the number of <b>half</b> <b>adders</b> with 75 - 80 % reduction in an area of <b>half</b> <b>adders</b> than standard Wallace multipliers. In RCWM and SWM, at the last stage Carry Propagating Adder (CPA) is used. This paper proposes use of high speed, low power full adder based on Carbon Nanotube technology in reduced complexity Wallace Multiplier at the place of Conventional Full adder in order to reduce power, area and improvement in speed...|$|R
40|$|We {{have already}} {{proposed}} SFQ with Resettable Latch (SFQ-RL). SFQ-RL was proposed {{as a new}} SFQ logic, which consists of “L-gate”, “Confluence buffer”, and “Splitter”. We can realize the pipelined circuits easily using SFQ-RL, because the pipelined circuits are constructed by connecting L-gates in series. As the application of SFQ-RL to the complicated circuits with a pipelined structure, we have designed pipelined <b>Half</b> <b>Adder</b> and pipelined Carry Save Serial Adder. We have confirmed the full operation of <b>Half</b> <b>Adder.</b> The obtained bias margin was ± 15 %. We have also confirmed the partial operation of Carry Save Serial Adder...|$|R
40|$|This paper {{presents}} the novel design of <b>half</b> <b>adder</b> and full adder us-ing reduced number of QCA gates. This design utilizes the unique characteristics of QCA {{to design a}} half and a full adder. The basic component of QCA is a cell consisting of two electrons and four logically interacting quantum dots. Simulation indicates a fast,efficient and very attractive performance(i. e. complexity,area and delay) Keywords: QCA, <b>half</b> adder,full <b>adder</b> 1...|$|R
30|$|The word-voter {{is meant}} to handle common mode {{multiple}} function module faults only in the TMR system. Let us now presume that after the application of specific inputs, the correct outputs of <b>half</b> <b>adder</b> 2 are Sum 2  =  1 and Cout 2  =  1. Assuming that <b>half</b> <b>adders</b> 1 and 3 have become faulty, let their outputs be assumed as Sum 1  =  0, Cout 1  =  1; and Sum 3  =  1, Cout 3  =  0. As a result, the internal word-voter outputs viz. W 12, W 23 and W 13, which govern the matching/non-matching of the pairs of function module outputs will evaluate to 0. Hence, the error output (ErrorWV) produced by the word-voter would be 1, which is correct, indicating that the TMR system is experiencing multiple function module faults, thus suggesting a repair is necessary. Since W 13 equals 0, the outputs of <b>half</b> <b>adder</b> 2 viz. Sum 2 and Cout 2 are reflected as the TMR system outputs i.e. Sum =  1 and Cout =  1, which is also correct.|$|R
30|$|No {{function}} module fault: Let us {{assume that}} <b>half</b> <b>adders</b> 1, 2 and 3 are fault-free. Hence the respective outputs of the <b>half</b> <b>adders</b> are equivalent, i.e. Sum 1  = Sum 2  = Sum 3 and Cout 1  = Cout 2  = Cout 3. Given this, NR 1  = NR 2  =  1 / 0 and AD 1  = AD 2  =  0 / 1 respectively. As a result, NR 3  = NR 4  =  0, {{which leads to}} EFW =  0. Also, XR 1 up to XR 6 would equate to 1, and hence MD 1  = MD 2  = MD 3  =  1, resulting in ERROR =  0. Thus, EFW = ERROR =  0 which reflects the perfect healthy state of the TMR system.|$|R
50|$|XOR {{can also}} be viewed as {{addition}} modulo 2. As a result, XOR gates are used to implement binary addition in computers. A <b>half</b> <b>adder</b> consists of an XOR gate and an AND gate. Other uses include subtractors, comparators, and controlled inverters.|$|R
5000|$|A {{full adder}} can be {{constructed}} from two <b>half</b> <b>adders</b> by connecting A and B to the input of one <b>half</b> <b>adder,</b> connecting the sum from that to an input to the second adder, connecting Ci to the other input and OR the two carry outputs.The critical path of a full adder runs through both XOR-gates and ends at the sum bit [...] Assumed that an XOR-gate takes 1 delays to complete, the delay imposed by the critical path of a full adder is equal toThe critical path of a carry runs through 1 XOR-gate in adder and through 2 gates (AND and OR) in carry-block and therefore, if AND- or OR-gates takes 1 delay to complete, has a delay of ...|$|R
40|$|Abstract- The {{difference}} between look ahead carry adder and ripple carry adder is proposed in this paper. Both these adders {{have been designed}} using a VHDL (very high speed integrated circuit hardware description language) tool named Xilinx ISE Design Suite 12. 4 _ 1. In VHDL tool, structural modeling is implemented on the above mentioned adders. This paper is focusing on {{difference between}} these adders based on their performance (fastness). adder can {{be replaced by a}} full adder. To design n-bit RCA using full adder only n-full adders are required. Ripple carry adder can be designed by using <b>half</b> <b>adders</b> only. To design n-bit RCA, (2 n- 1) <b>half</b> <b>adder</b> with (n- 1) extra or fate is required [2]. 1) Structure of a 4 -bit ripple carry adde...|$|R
50|$|Combinational {{logic is}} used in {{computer}} circuits to perform Boolean algebra on input signals and on stored data. Practical computer circuits normally contain a mixture of combinational and sequential logic. For example, the part of an arithmetic logic unit, or ALU, that does mathematical calculations is constructed using combinational logic. Other circuits used in computers, such as <b>half</b> <b>adders,</b> full <b>adders,</b> <b>half</b> subtractors, full subtractors, multiplexers, demultiplexers, encoders and decoders are also made by using combinational logic.|$|R
50|$|A {{conditional}} sum adder is a recursive structure {{based on}} the carry-select adder. In the conditional sum adder, the MUX level chooses between two n/2-bit inputs that are themselves built as conditional-sum adder. The bottom level of the tree consists of pairs of 2-bit <b>adders</b> (1 <b>half</b> <b>adder</b> and 3 full adders) plus 2 single-bit multiplexers.|$|R
40|$|Feasibility {{of a novel}} {{hexagonal}} {{binary decision}} diagram (BDD) quantum circuit approach based on Schottky wrap gate (WPG) control of GaAs/AlGaAs hexagonal nanowire network has been demonstrated through fabrication of <b>half</b> <b>adders</b> and full adders. Quantum BDD node devices were designed and realized utilizing WPG-controlled quantum wire (QWR) and single electron (SE) switches. BDD half sum and carry elements of a <b>half</b> <b>adder</b> were fabricated by integrating the WPG BDD node devices and they operated correctly through either quantum transport at low temperature or many electron classical transport at room temperature. Successful design of hexagonal BDD full adders for arbitrary bits on a hexagonal network without nanowire crossover and fabrication of QWR-based BDD 2 -bit full adder on the AlGaAs/GaAs etched hexagonal nanowire network with node density of 10 ^ 7 cm^- 2 clearly indicated the capability of the present approach for large scale quantum device integration. [URL]...|$|R
40|$|Reversible logic {{has emerged}} as one of the most {{important}} approaches for power optimization with its application in low power VLSI design. Reversible or information lossless circuits have applications in nanotechnology, digital signal processing, communication, computer graphics and cryptography. They are also a fundamental requirement in the emerging field of quantum computing. In this paper, two newoptimized universal gates are proposed. One of them has an ability to operate as a reversible <b>half</b> <b>adder</b> and <b>half</b> subtractor imultaneously. Another one acts only as <b>half</b> <b>adder</b> with minimum transistor count. The reversible gates are evaluated in terms of number of transistor count, critical path, garbage outputs and one to one mapping. Here transistor implementation of the proposed gates is done by using Virtuoso tool of cadence. Based on the results of the analysis, some of the trade-offs are made in the design to improve the efficiency...|$|R
40|$|Three valued logic {{which is}} also called as a ternary logic is a best {{alternative}} to conventional binary logic. Ternary logic has got its own importance due to its energy efficiency resulting from reduced complexity of interconnect and chip area. This paper presents a methodology {{for the design of}} ternary multiplexer circuit and also the design of ternary logic circuits based on CMOS. Designing of ternary multiplexer is presented first. Later the proposed methodology for the design of ternary logic circuits is presented. This proposed design methodology is used to implement 1 -bit <b>half</b> <b>adder</b> circuit using SPICE model. These new proposed implementations are compared with the old existing designs for the parameters like delay, power, number of transistors, power delay product etc. Simulation results indicate that the mux based 1 -bit <b>half</b> <b>adder</b> design has reduced number of transistors, delay and power delay product when compared to the existing binary logic design...|$|R
40|$|This {{paper we}} design 4 -bit CMOS layout for 4 -bit full adder {{with the help}} of <b>half</b> <b>adder</b> and other logic gates. In this paper we {{calculate}} power dissipation of gates and modules which we used in designing and also calculate the no. of transistors which were used in designing of gates. The result of simulation of adder layout is in Microwind 2...|$|R
30|$|Single {{function}} module fault: Let <b>half</b> <b>adders</b> 1 and 2 are fault-free, and <b>half</b> <b>adder</b> 3 {{is alone}} faulty. Let Sum 1  = Sum 2  = Cout 1  = Cout 2  =  1 and Sum 3  = Cout 3  =  0. Therefore, in the fault warning logic, NR 1  = NR 2  =  0; AD 1  = AD 2  =  0 and NR 3  = NR 4  =  1, {{which results in}} EFW =  1. With regard to the error signalling logic, XR 1  = XR 2  =  1 and XR 3  = XR 4  = XR 5  = XR 6  =  0. Thus MD 1  =  1, while MD 2 and MD 3 are 0  s. Hence, ERROR =  0. The output of the system health monitor is given by EFW =  1 and ERROR =  0, which is indicative {{of at least one}} function module fault in the TMR system although the system is said to be operationally healthy, i.e. the TMR system outputs are correct and reliable. The system outputs are Sum =  1 and Cout =  1, since the majority of the function modules’ outputs is 1.|$|R
5000|$|It is {{possible}} to create a logical circuit using multiple full adders to add N-bit numbers. Each full adder inputs a Cin, which is the Cout of the previous adder. This kind of adder is called a ripple-carry adder, since each carry bit [...] "ripples" [...] to the next full adder. Note that the first (and only the first) full adder may {{be replaced by a}} <b>half</b> <b>adder</b> (under the assumption that Cin = 0).|$|R
40|$|One of {{the most}} severe short-comings of {{currently}} available equiva-lence checkers is their inability to verify integer multipliers. In this paper, we present a bit level reverse-engineering technique that can be integrated into standard equivalence checking flows. We propose a Boolean mapping algorithm that extracts a network of <b>half</b> <b>adders</b> from the gate netlist of an addition circuit. Once the arithmetic bit level representation of the circuit is obtained, equivalence checking can be performed using simple arithmetic operations. Experimental results show the promise of our approach. ...|$|R
40|$|All optical {{processing}} deals with realizing digital circuits using optical elements only. To achieve higher bit rates and reduced cost efficiency all- {{optical processing}} became {{the need of}} the hour. All- optical logic gates are the key components in the all-optical processing systems. In this paper an all-optical <b>Half</b> <b>Adder</b> using dispersion managed solitons as input pulses and employing cross gain modulation of Semiconductor amplifier is simulated at 100 Gb/s. The circuit employs two all-optical XOR and AND gate. General Terms Dispersion managed solitons, Semiconductor optica...|$|R
40|$|This paper {{proposes a}} new theory of adder and its basic structure. The new adder of {{asynchronous}} structure constructed by <b>half</b> <b>adders,</b> called <b>Parallel</b> Feedback Carry Adder (PFCA) as its carry mode is parallel feedback. In theory, the area consumption of n-bit PFCA is close to O(n) and {{the average length of}} carry chain is O(log n). A CMOS gate implementation scheme is implemented. HSPICE simulation results show that PFCA has obvious advantages over RCA, CLA, CSeA in speed and area, especially when n is bigger...|$|R
5000|$|We {{can view}} a full adder as a 3:2 lossy compressor: it sums three one-bit inputs and returns the result {{as a single}} two-bit number; that is, it maps 8 input values to 4 output values. Thus, for example, a binary input of 101 results in an output of [...] (decimal number 2). The {{carry-out}} represents bit one of the result, while the sum represents bit zero. Likewise, a <b>half</b> <b>adder</b> {{can be used as}} a 2:2 lossy compressor, compressing four possible inputs into three possible outputs.|$|R
30|$|Multiple {{function}} module faults: Assume that <b>half</b> <b>adder</b> 1 {{is alone}} fault-free, and <b>half</b> <b>adders</b> 2 and 3 have become faulty. Let Sum 1  =  1, Cout 1  =  0; Sum 2  =  1, Cout 2  =  1; and Sum 3  =  0; Cout 3  =  1. Therefore, NR 1  = NR 2  = AD 1  = AD 2  =  0; NR 3  = NR 4  =  1 and hence EFW =  1. In the error signalling logic, XR 1  =  1 and XR 3  = XR 5  =  0 since Sum 1  = Sum 2  =  1 and Sum 3  =  0. Moreover, XR 2  = XR 6  =  0, while XR 4  =  1. Consequently, MD 1  = MD 2  = MD 3  =  0 {{which results in}} the issuance of an error signal, viz. ERROR =  1. Thus the system health monitor outputs are EFW =  1 and ERROR =  1, which are correct. The primary system outputs evaluate as Sum =  1 and Cout =  1, which is incorrect since the correct system outputs should have been Sum = Sum 1  =  1 and Cout = Cout 1  =  0. This shows that when both the fault warning logic and the error signalling logic are activated (i.e. EFW = ERROR =  1), {{the state of the}} system health monitor outputs indicates that the system outputs are not correct/reliable.|$|R
