12|58|Public
40|$|We {{describe}} {{the application of}} a recongurable computing platform to problems in communications security. Specically, we {{describe the}} im-plementation of a set of library routines for implementing the kernels of certain NIST cryptographic standards on the Star Bridge Systems Hy-percomputer. By converting what would have been software routines into synthesized logic for the <b>programmable</b> <b>resources</b> of the Hypercomputer, signi cant speedups can be obtained in execution time. ...|$|E
40|$|In this paper, a new thermal {{monitoring}} strategy suitable for field {{programmable logic array}} (FPGA) -based systems is developed. The main idea is that a fully digital temperature transducer can be dynamically inserted, operated, and eliminated from the circuit under test using run-time reconfiguration. A ring-oscillator together with its auxiliary blocks (basically counting and control stages) is first placed in the design. After the actual temperature of the die is captured, the value is read back via the FPGA configuration port. Then, the sensor is eliminated from the chip in order to release <b>programmable</b> <b>resources</b> and avoid self-heating. All the hardware of the sensor is written in Java, using the JBits API provided by the chip manufacturer...|$|E
40|$|This paper {{presents}} a methodology to perform online self-testing for analog circuits implemented on field-programmable analog arrays (FPAAs). It proposes to partition the FPAA circuit under test into subcircuits. Each subcircuit is tested by replicating the subcircuit with <b>programmable</b> <b>resources</b> on the FPAA chip, and comparing the outputs of the subcircuit and its replication. To effectively implement the proposed methodology, this paper proposes a simple circuit partition method and develops techniques to address circuit stability {{problems that are}} often encountered in the proposed testing method. Furthermore, error sources in the proposed testing circuit are studied and methods to improve the accuracy of testing results are presented. Finally, experimental results are presented {{to demonstrate the validity}} of the proposed methodology...|$|E
40|$|This thesis {{details the}} engineering, design and {{implementation}} of a real-time, distributed, application emulator system (AE system). The project had two main goals for the tool: emulation of real-time distributed systems, and as a <b>programmable</b> <b>resource</b> consumer. The AE system is currently {{being used in the}} HiPer-D test bed to activate a resource leveling tool that monitors several software components for real-time response. The AE system is highly flexible and can be used {{in the context of a}} variety of network topologies and system loading options. The results presented show that the AE system can also emulate distributed systems...|$|R
40|$|Abstract. In {{this paper}} we propose DRMI, a fully decentralized, highly {{scalable}} and efficient resource management infrastructure, which is built on top of prefix-based DHT. DRMI provides large-scale resource monitoring and management for arbitrary metadata in variational Grid and peer-to-peer environment. DRMI monitors resources with their natural organizations and can trace them in a wide scope from large aggregations to a single resource. Based on DRMI we also propose “gradual-decision ” principle and algorithm, {{which is consistent with}} requirement of self-organizing or autonomy in distributed system management. Using gradual-decision we can accomplish variety of and <b>programmable</b> <b>resource</b> management, e. g. the balanced load assignment. 1...|$|R
40|$|This paper {{describes}} a fast text to Braille translator based on Field Programmable Gate Arrays (FPGAs). Compared with most commercial methods, this translator {{is able to}} carry out the translation in hardware instead of using software. To achieve the fast translation, a FPGA with big <b>programmable</b> <b>resource</b> has been utilized, and an algorithm, proposed by Paul Blenkhorn, has been revised to perform the fast translation. The translator has been described using Very high speed integrated circuit Hardware Description Language (VHDL). The test results indicate that the hardware-based translator achieves the same results as software-based commercial translators, and moreover, this system achieves superior throughput compared to Blenkhorn's original algorithm...|$|R
40|$|In this paper, {{a design}} of general purpose {{processor}} with a 5 stage pipeline, to incorporate <b>programmable</b> <b>resources</b> in to a processor. RISC processors have a CPI (clock per instruction) of one cycle. This {{is due to}} the optimization of each instruction on the CPU and a technique called pipelining. This technique allows each instruction to be processed in a set number of stages. This in turn allows for the simultaneous execution of a number of different instructions, each instruction being at a different stage in pipeline. The development approach of the overall system design depends on the design specification, analysis and simulation. The RISC Processor core is high performance 32 bit microprocessor. This processor make it especially suited to embedded control applications...|$|E
40|$|Programmable {{capacitor}} arrays (PCA) {{are frequently}} used in reconfigurable analog circuits. Since PCA can {{be programmed to}} numerous values, testing PCA by exhaustively examining all PCA values can lead to lengthy testing processes. To address this problem, we present an efficient built-in-self-testing (BIST) method for PCA used in reconfigurable analog circuits. The proposed BIST method takes advantage of existing <b>programmable</b> <b>resources</b> and, hence, introduces very small hardware overhead. Additionally, we present two simple and effective capacitor comparison techniques for implementing the proposed BIST method. The accuracy of the proposed circuit techniques is investigated and closed-form equations are derived for estimating comparison accuracy {{that can be achieved}} by the proposed techniques. Finally, circuit simulations are performed to validate the proposed techniques...|$|E
40|$|This paper {{presents}} an efficient methodology to on-line test field programmable analog array (FPAA) circuits. It proposes to partition the FPAA circuit under test into sub circuits. Each sub circuit is tested by replicating the sub circuit with <b>programmable</b> <b>resources</b> on FPAAs, and comparing the outputs {{of the the}} original partitioned sub circuit and its replicaton. The advantages of this approach includes: low implementation cost, enhanced testability, and flexible testing schedules. This paper also presents circuit techniques to address stability problems which are often encountered in the proposed on-line testing approach. In addition, the impact of performing circuit partition on testability is investigated in this work. It shows that testability is generally improved in partitioned circuits. Finally, experimental results are presented to demonstrate the feasibility and effectiveness of the proposed techniques. ...|$|E
30|$|The {{introduction}} of System-on-Chip FPGA devices with integrated ARM processors [6], allows {{to benefit from}} high amount of <b>programmable</b> logic <b>resources</b> for real-time 2.1. 1.2.processing of the raw detector data and run high-level data analysis {{in the same time}} and in the same chip.|$|R
40|$|Reconfigurable Field-Programmable Gate Arrays (FPGAs) {{provide an}} {{effective}} <b>programmable</b> <b>resource</b> for implementing hardware-based Artificial Neural Networks (ANNs). They are low cost, readily available and reconfigurable [...] all important advantages for ANN applications. However, FPGAs lack the circuit density necessary to implement large parallel ANNs with {{many thousands of}} synapses. This paper presents an architecture that makes it feasible to implement large ANNs with FPGAs. The architecture combines stochastic computation techniques with a novel lookup-table-based architecture that fully exploits the lookup-table structure of many FPGAs. This lookup-table-based architecture is extremely efficient: {{it is capable of}} supporting up to two synapses per Configurable Logic Block (CLB). In addition, the architecture is simple to implement, self-contained (weights are stored directly in the synapse), and scales easily across multiple chips. 1 Introduction Reconfigurable Field-Programmable Gat [...] ...|$|R
3000|$|HW_ComputingResource is {{a generic}} MARTE {{stereotype}} {{that is used}} to represent elements in the HW platform which can execute application functionality. It can be specialized to, for example, HW_Processor to indicate its properties as a <b>programmable</b> computing <b>resource.</b> This stereotype or any of its inherited stereotypes is used to represent processing element [...]...|$|R
40|$|Abstract. Software {{development}} productivity for {{embedded systems}} is greatly {{limited by the}} high fragmentation of platforms and their associ-ated development tools. Platform virtualization environments, like Java and Microsoft. NET, help to alleviate the problem, but because of their advanced run-time features and libraries, they are limited to host func-tionalities running on the system microcontroller {{and on top of}} the op-erating system. Due to the ever increasing demand for processing power, it is highly desirable to extend the benefits of platform virtualization {{to the rest of the}} system <b>programmable</b> <b>resources,</b> media processors in par-ticular, that can boost performance to a great extent. To this aim we are developing a virtualization framework targeting high performance me-dia applications running on deeply embedded media processors, which we combine with traditional host virtualization environments in order to offer a system-wide virtualization solution. In this paper we present an experimental framework based on GCC that allowed us to validat...|$|E
40|$|A {{distinctive}} feature of run-time reconfigurable systems {{is the ability}} to change the configuration of <b>programmable</b> <b>resources</b> during execution. This opens a number of possibilities such as virtualisation of computational resources, simplified routing and in certain applications lower power. Seamless run-time reconfiguration requires rapid configuration. Commodity programmable devices have relatively long configuration time, which makes them poor candidates for run-time reconfigurable systems. Reducing this reconfiguration time to the order of nano seconds will enable rapid run-time reconfiguration. Having multiple configuration planes and switching between them while processing data is one approach towards achieving rapid reconfiguration. An experimental context switching programmable device, called the Context Switching Reconfigurable Computer (CSRC), has been created by BAE Systems, which provided opportunities to explore context-switching strategies for run-time reconfigurable systems. The work presented here studies this approach for run-time reconfiguration, by applying the concepts to develop applications on a context switching reconfigurable system. The work also discusses {{the advantages and disadvantages of}} such an approach and ways of leveraging the concept for e#cient computing...|$|E
40|$|This {{research}} {{develops a}} built-in self-testing (BIST) and online testing techniques for switched capacitor (SC) based Field Programmable Analog Arrays (FPAAs). Particularly, a BIST technique for programmable capacitor arrays (PCAs), which are essential building {{blocks in the}} SC based FPAAs, is developed and its efficiency is analyzed. The proposed BIST technique results in very little hardware overhead and can be easily implemented on FPAAs. Techniques to model the impact of parametric faults {{on the performance of}} programmable capacitor arrays are also developed. Closed-form equations are derived for estimating ranges of parametric faults that can be detected by the proposed PCA testing circuits and methods to improve PCA testing efficiency are also discussed. Secondly, a comprehensive methodology is developed to perform online testing of SC based FPAA circuits. By taking advantage of the <b>programmable</b> <b>resources,</b> the proposed method can effectively test various sections of the FPAA circuits. Techniques to effectively partition FPAA circuits for online testing as well as methods to address circuit stability issues are presented. Factors that affect the testing accuracy of the proposed method are also studied. Error sources in the proposed testing circuit are investigated and methods to improve the accuracy of testing results are presented. Furthermore a novel programmable analog comparator is developed whose error threshold can be adaptively adjusted according to its input signal levels. It is ideal for analog online testing applications for enhanced testing accuracy {{due to the fact that}} its programmability allows the end user to adapt the error threshold to the testing needs. Analytical equations for guiding the design of proposed comparator circuitry are derived. The proposed comparator circuit has been designed and fabricated using a CMOS 0. 18 micro-meter technology. Measurement results of the fabricated chip are presented...|$|E
40|$|Field Programmable Gate Arrays (FPGAs) {{consist of}} eld {{programmable}} logic cells con-nected by eld <b>programmable</b> routing <b>resources.</b> Logic cells typically consist of SRAM based look-up tables (LUTs), {{but they also}} can be based on other technologies like multiplexers. In this study, we will focus on LUT based FPGAs. FPGA routing resources typically ar...|$|R
40|$|Abstract: We present stuck-at and {{bridging}} fault simu-lation {{results for}} previously proposed Built-In Self-Test (BIST) approaches for the <b>programmable</b> interconnect <b>resources</b> in Field <b>Programmable</b> Gate Arrays (FPGAs). In addition, new BIST approaches are proposed and analyzed via fault simulation. The fault simulation re-sults {{are used to}} compare and evaluate the fault detec-tion capabilities and effectiveness of these BIST ap-proaches for testing routing resources in FPGAs. 1 1...|$|R
40|$|The {{advantages}} of field-programmable gate ar-rays (FPGAs) are sometimes eclipsed by a substan-tial performance penalty due to signal delay through the <b>programmable</b> routing <b>resources.</b> We propose Q new FPGA routing construction that directly mini-mizes source-sink signal propagation delay {{based on a}} graph generalization of rectilinear Steiner arbores-cences (i. e., shortest-paths trees with minimum wire-length). Experimental results indicate that our new heuristic significantly reduces maximum source-to-sink pathlengths while using wirelength competitive with that of Steiner routing. ...|$|R
40|$|The {{amount of}} {{resources}} available on reconfigurable logic devices like FPGAs {{has seen a}} tremendous growth over the last thirty years. During this period, the amount of <b>programmable</b> <b>resources</b> (CLBs and RAMs) has {{increased by more than}} three orders of magnitude. Programming these reconfigurable architectures has been dominated by the hardware description languages VHDL and Verilog. However, it has become generally accepted that these languages do not provide adequate abstraction mechanisms to deliver the design productivity for designing more and more complex applications. To raise the abstraction level, techniques to translate high-level languages to hardware have been developed based on imperative languages like C. Parallelism is achieved by parallelization of for-loops. Whether parallelization of loops is possible, is determined using dependency analysis which is a very hard problem. To mitigate this problem, other abstractions are needed to express parallelism. In this thesis, parallelism is expressed using higher-order functions, an abstraction commonly used in functional programming languages. The main contribution of this thesis is a design methodology based on exploiting regularity of higher-order functions. A mathematical formula, e. g., a DSP algorithm, is first formulated using higher-order functions. Then, transformation rules are applied to these higher-order functions to distribute computations over space and time. Using these transformations, an optimal trade-off can be made between space and time. Finally, hardware is generated using the CLaSH compiler by translating the result of the transformation to VHDL. In this thesis, we derive transformation rules for several higher-order functions and prove that the transformations are meaning-preserving. After transformation, a mathematically equivalent description is derived in which the computations are distributed over space and time. The designer can control the amount of parallelism using a parameter that is introduced by the transformation. Transformation rules for both one-dimensional higher-order functions and two-dimensional higher- order functions have been derived and applied to several case studies: a dot product, a particle filter and stencil computations...|$|E
40|$|Embedded test within {{integrated}} systems allows to overcome {{some of the}} difficulties found when testing using only an external tester. The reutilization of a reconfigurable FPGA-like block that may exist in certain SoC systems, enables the implementation of on-chip test processors highly optimized to meet the specific requirements of the test procedure for each block. The fast reconfiguration of SRAM-based FPGA blocks allows sharing the same physical area among the set of different circuits that {{may be necessary to}} implement the on-chip test suite of the whole system. This paper addresses the high level generation of specific programmable processors for testing different blocks within {{integrated systems}}, taking advantage of such existing <b>programmable</b> <b>resources.</b> The work presented herein proposes a methodology and a set of automation tools to enable the automatic generation of dedicated custom processor architectures for specific test operations, as well as the corresponding test programs. This facility can be seen as disposing of a highly flexible and optimised embedded tester, supplied as an intellectual property (IP) module and its software. The approach being proposed is based in the implementation of a test processor as an Application Specific Instruction-Set Processor (ASIP), whose set of conventional and dedicated instructions are automatically derived from a software specification of the test operation to be implemented. The actual configuration of the test processor is determined by the type of instructions the test designer uses in the test program. The processor¿s instruction set is configured automatically from the source code of the program to be run, in order to include only the exact instructions required for that task. The generation of a test processor starts with a software specification of the test operation to be performed. Presently, this specification is done using a program written in an assembly level language whose instruction set comprises all the general purpose instructions supported by the processor core, plus an extra set of complex instructions that are responsible for the operation of the peripheral specific blocks. From this specification, a custom programmable processor is generated as a set of synthesisable HDL modules, including the identification of peripheral blocks associated to specific instructions, and the set of constrains and assignments required to instantiate and map these modules onto the FPGA. These descriptions are then forwarded to the specific FPGA technology mapping and implementation tools, to create an application-specific processor that includes only the instructions referred in the source code...|$|E
40|$|This diploma thesis {{deals with}} {{implementation}} of fast serial bus and SATA controler in the FPGA chip. The work {{is divided into}} two parts. In the first part the circuit for communication between the FPGAs is designed and in the second part the circuit for direct connection of SATA hard disk to a gate array is created. The circuit for communication between the FPGA is designed according to SATA specification. Link layer and physical layers are implemented in VHDL with <b>programmable</b> logic <b>resources...</b>|$|R
5000|$|Aculab Rapide is a {{telephony}} media resource server, {{presenting a}} range of <b>programmable,</b> software-based telephony <b>resources,</b> in a 1U platform, for the rapid application development of telecommunications solutions. It presents simple telephony APIs, written in high-level, general-purpose programming languages - MS.NET (C#, C++, VB, F#), Python and Java.|$|R
40|$|Current {{networking}} research efforts, such as Active Networks and high-performance router development, rely on emerging high-speed switching technology, but {{can also}} require <b>programmable</b> processing <b>resources</b> that switches lack. Here we present our vision of a board for realizing this resource for switches, such as ATM. The BRAIN board is a switch- and link- independent processor that provides a pipelined CPU {{as well as a}} prototyping area for custom hardware. It takes advantage of recent commodity workstation bus architecture together with existing network interfaces to provide a port processor independent of the underlying networking technology. ...|$|R
40|$|We {{propose the}} use of <b>programmable</b> Grid <b>resource</b> {{partitioning}} heuristics {{in the context of}} a distributed service Grid management architecture. The architecture is capable of performing automated and exclusive resource-to-service assignations based on Grid resource status /properties and monitored service demand. We present two distinct approaches for the partitioning problem, the first based on Divisible Load Theory and the second built on Genetic Algorithms. Advantages and drawbacks of each approach are discussed and their performance is evaluated using NSGrid. Results show that automated resource-to-service partitioning simplifies scheduling decisions, improves service QoS support and allows efficient computational/network resource usage...|$|R
40|$|As {{integration}} {{levels in}} FPGA devices have {{increased over the}} past decade, the structure of <b>programmable</b> logic <b>resources</b> has become more diversied. Recently, Altera Corporation has introduced a new family of LUT-based FPGAs that have been augmented with usercon gurable programmable logic array blocks (PLAs). In this paper a novel FPGA technology mapping approach is described that automatically partitions user designs into netlist subgraphs appropriately-sized for implementation on both types of available user resources. The subgraphs are subsequently mapped to assigned target resources. It is shown that fast estimation of post-minimization product term counts plays an especially {{important role in the}} mapping of designs to PLAs...|$|R
40|$|A {{device is}} {{disclosed}} {{in one embodiment}} that has multiple identical sets of programmable functional elements, <b>programmable</b> routing <b>resources,</b> and majority voters that correct errors. The voters accept a mode input for a redundancy mode and a split mode. In the redundancy mode, the programmable functional elements are identical and are programmed identically so the voters produce an output corresponding {{to the majority of}} inputs that agree. In a split mode, each voter selects a particular programmable functional element output as the output of the voter. Therefore, in the split mode, the programmable functional elements can perform different functions, operate independently, and/or be connected together to process different parts of the same problem...|$|R
40|$|We {{present the}} first on-line Built-In Self-Test (BIST) and BIST-based {{diagnosis}} of <b>programmable</b> logic <b>resources</b> in Field <b>Programmable</b> Gate Arrays (FPGAs). These techniques were implemented {{and used in}} a roving Self-Testing AReas (STARs) approach to testing and reconfiguration of FPGAs for fault-tolerant applications. The BIST approach provides complete testing of the programmable logic blocks (PLBs) in the FPGA during normal system operation. The BIST-based diagnosis can identify any group of faulty PLBs, then applies additional diagnostic configurations to identify the faulty look-up table (LUT) or flipflop within a faulty PLB. The ability to locate defective modules inside a PLB enables {{a new form of}} fault-tolerance that reuses partially defective PLBs in their fault-free modes of operation...|$|R
40|$|FPGA {{architectures}} employ RRAMs {{not only}} as memories to store the configuration but embed them in the datapaths of <b>programmable</b> routing <b>resources</b> to propagate signals with improved performances. Sources of power consumption have been intensively studied for conventional Static Random Ac-cess Memories (SRAM) -based FPGAs. However, very limited works focused so far on studying the power characteristics of RRAM-based FPGAs. In this paper, we first analyze the power characteristics of RRAM-based multiplexer at circuit level and then use electrical simulations to study power consumption of RRAM-based FPGA architectures. Experimental results show that RRAM-based FPGAs achieve a Power-Delay Product reduced by 50 % compared to SRAM-based FPGA at nominal voltage and 20 % compared to near-Vt SRAM-based FPGA, respectively...|$|R
40|$|The paper {{presents}} one {{concept of}} decomposition methods dedicated to PAL-based CPLDs. The proposed approach {{is an alternative}} to the classical one, which is based on two-level minimization of separate single-output functions. The key idea of the algorithm is to search for free blocks that could be implemented in PAL-based logic blocks containing a limited number of product terms. In order to better exploit the number of product terms, two-stage decomposition and BDD-based decomposition are to be used. In BDD-based decomposition methods, functions are represented by Reduced Ordered Binary Decision Diagrams (ROBDDs). The results of experiments prove that the proposed solution is more effective, in terms of the usage of <b>programmable</b> device <b>resources,</b> compared with the classical ones...|$|R
40|$|The <b>programmable</b> {{interconnection}} <b>resources</b> are {{one aspect}} that distinguishes FPGAs from other devices. The abundance {{of these resources}} in modern devices almost always assures us that the most complex design can be routed. This underutilized resource {{can be used for}} other unintendedpurposes. One such use, explored here, is to concatenate large networks together to form pseudo-equipotential geometric shapes. These shapes can thenbe evaluatedin terms of their abilitytoradiate(modulated) energyoffthechiptoanearby receiver. In this paper, an unconventional method of building such transmitters on an FPGA is proposed. Arbitrary shaped antennas are created using a unique flow involving an experimental router and binary images. An experiment setup is used to measure the performance of the antennas created...|$|R
40|$|Portable {{software}} defined radio solutions for the consumer market {{will be based on}} mobile devices employing multiple <b>programmable</b> processing <b>resources,</b> as low power consumption needs to be maintained for an acceptable battery life. Therefore the designer needs to orchestrate the given system functions of the waveform efficiently onto the dis-tributed processing resources. For the automation or at least a substantial machine support of that process an explicit and platform independent representation of parallelism is a prerequisite. This article is focusing on the basic concepts to model waveforms for parallel hardware systems not directly related to the software communication architecture (SCA) [1]. Nevertheless we discuss the implications for the SCA along with the changes we expect for the value chain. 1...|$|R
40|$|The paper {{describes}} a joint university-industry project aimed at defining {{hardware and software}} requirements {{for the development of}} a prototypical microgrid platform on existing sites able to manage generation resources and load. The paper {{describes a}}n architecture developed for integrating existing software tools for on-line load monitoring and control and for management of in-site generation. The system acquires data from field and stores information on a server, from which an optimization tool gets data in order to perform its calculations and give the optimal set points to the <b>programmable</b> generation <b>resources.</b> Results are reported about experimentation at test sites with different generating units, such as cogeneration of heat and power (CHP) and/or renewable power generating units equipped with a real-time monitoring tool...|$|R
30|$|Nowadays, most {{cloud service}} {{providers}} also release native service API libraries and/or complete SDKs as customized service and resource control interfaces. Meanwhile, a series third-party service APIs {{are also available}} as an alternative <b>programmable</b> service and <b>resource</b> entrance. In fact, these service API call/respond operations often enable more effective service access and enhanced service function manipulation, since they allow users to control services and relevant resources from a much lower level [25].|$|R
30|$|It {{should also}} be noted that the {{particular}} Virtex 5 device used did not contain a hardcore processor or memory controller, thus the MicroBlaze softcore and its required IP peripherals needed to consume <b>programmable</b> fabric <b>resources</b> in order to be implemented. This, however, is not the case with all of the modern FPGA devices on the market today. FPGA vendors have adopted the System-on-Chip model, where a hardened processor and memory-controller are well integrated with the programmable logic by default. Furthermore, volume of sales does not necessarily place such devices at higher price points either. In the case of such devices, the programmable logic overhead cost of 20 % reported here would not exist, and the reduction in development time and effort could be gained without incurring the increased logic area penalty.|$|R
40|$|Abstract — A Built-In Self-Test (BIST) {{approach}} is presented for the logic <b>resources</b> in the <b>programmable</b> input/output (I/O) tiles in Virtex- 5 field programmable gate arrays (FPGAs). A total of 15 BIST configurations {{were developed to}} test the I/O cell <b>programmable</b> logic <b>resources</b> in all modes of operation. The approach utilizes dedicated I/O buffer bypass routing in the I/O tile such that the BIST is package independent and applicable to all levels of testing from wafer-level to system-level. The approach offers control of BIST execution and maximal diagnostic resolution of faulty I/O tiles for device and package independent testing. Either the Boundary Scan interface or a simple system-level interface {{may be used for}} BIST execution, control, and diagnosis independent of the configuration interface. Experimental results are presented including fault detection capabilities...|$|R
40|$|FPGAs have an {{important}} role to play in System-on-a-Chip (SoC) designs by providing <b>programmable</b> hardware <b>resources</b> within complex ASIC designs. However, because the FPGA logic is custom-fabricated with the overall SoC, {{we have an opportunity to}} optimize that logic to the SoC’s specific needs. This gave rise to the Totem Project, which automates the creation of domain-specific reconfigurable logic. In this paper we present the lessons learned from the Totem Project, including how best to create domain-specific architectures, how to instantiate that logic into silicon, and how to create CAD tools to support these architectures. We also quantify how much improvement these optimizations provide over standard cells and tile-based FPGA logic. Finally, we consider the role of flexibility in domain-specific reconfigurable logic, and present strategies on how best to provide the right amount of flexibility...|$|R
