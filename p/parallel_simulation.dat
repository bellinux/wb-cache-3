821|1650|Public
5000|$|... {{simplification}} of {{the column}} simulation to allow for <b>parallel</b> <b>simulation</b> {{of large numbers of}} connected columns, with the ultimate goal of simulating a whole neocortex (which in humans consists of about 1 million cortical columns).|$|E
50|$|Dr. Bagrodia has {{continued}} to conduct a prolific amount of research. He has published over 150 research papers in Computer Science journals and spoken at international conferences on high performance computing, wireless networking, and <b>parallel</b> <b>simulation.</b> He has also provided commentary on issues relating to cyberwarfare and warfighter training.|$|E
50|$|Lin {{entered the}} National Cheng Kung University in 1980 and {{graduated}} with a Bachelor of Science in Electrical Engineering (BSEE) in 1983. In 1985, he undertook a doctorate program at the University of Washington (Advisor: Ed Lazowska), and {{graduated with a}} Ph.D. in Computer Science in 1990. His research interests include personal communications, mobile computing, intelligent network signaling, computer telephony integration, and <b>parallel</b> <b>simulation.</b>|$|E
5000|$|CloudSimEx extends CloudSim {{by adding}} MapReduce <b>simulation</b> {{capabilities}} and <b>parallel</b> <b>simulations.</b>|$|R
40|$|AbstractOperational Plan <b>Paralleling</b> <b>Simulation</b> Based on Decision Point Controlling (P 2 SDPC) can {{realize the}} {{operational}} plan's dynamic adjusting and cutting impossible branch based on decision point controlling technology. From then on, {{we can improve}} the efficiency of operational plan's simulation by the way of <b>paralleling</b> <b>simulation.</b> Thus we can overcome {{the problem of the}} simulation's higher complex and lower efficiency cause of multi-factor combination explosion. This provide a road to commander's decision efficiently based on computer aid...|$|R
40|$|In the DLR-TAU Code {{a linear}} {{frequency}} domain solver (LFD) {{based on the}} RANS equations was implemented to efficiently predict dynamic derivatives. A Krylov-GMRES (GMRES) method was combined with a modified incomplete LU (ILU(p)) preconditioner to accelerate and stabilize the solution algorithm for sequential and <b>parallel</b> <b>simulations.</b> Results are presented for the generic transport aircraft FERMAT for the first bending mode at two different steady mean states, an attached and a detached case. Time-reduction factors beyond one order of magnitude compared to its time domain counterpart are obtained even in <b>parallel</b> <b>simulations...</b>|$|R
50|$|The LSA was a {{by-product}} {{of an attempt to}} find a fair measure of speedup in parallel simulations. The Time Warp <b>parallel</b> <b>simulation</b> algorithm by David Jefferson was advanced as a method to simulate asynchronous spatial interactions of fighting units in combat models on a parallel computer. Colliding particles models offered similar simulation tasks with spatial interactions of particles but clear of the details that are non-essential for exposing the simulation techniques. The speedup was presented as the ratio of the execution time on a uniprocessor over that on a multiprocessor, when executing the same parallel Time Warp algorithm. Boris D. Lubachevsky noticed that such a speedup assessment might be faulty because executing a parallel algorithm for a task on a uniprocessor is not necessarily the fastest way to perform the task on such a machine. The LSA was created in an attempt to produce a faster uniprocessor simulation and hence to have a more fair assessment of the parallel speedup. Later on, a <b>parallel</b> <b>simulation</b> algorithm,different from the Time Warp, was also proposed, that, when run on a uniprocessor, reduces to the LSA.|$|E
5000|$|The second {{option is}} using the Message Passing Interface (MPI) API. MPI can treat each core of the {{multi-core}} machines as separate execution host, so a cluster of, let's say, 10 compute nodes with dual-core processors will appear as 20 compute nodes, on which the MPI application can be distributed. MPI offers the user {{more control over the}} way the program is parallelized. The drawback of MPI is that is not very easy to implement and the programmer has to have a certain understanding of <b>parallel</b> <b>simulation</b> systems.|$|E
5000|$|PAM-CRASH {{is used on}} High Performance Computers {{including}} {{massively parallel}} systems. One of the most time-critical aspects of <b>parallel</b> <b>simulation</b> is the contact handling. Results with a 128-processor computer demonstrated that a contact search algorithm leads to a better scalability. Engineers utilize crash simulation not only to determine {{the end result of}} the crash but also to view the step by step time history. Observing factors such as how the bumper is folded in the impact and what is the effect of rib thickness on body deformation in the initial stages of the simulation gives insights that improve crashworthiness of the design.|$|E
30|$|In [10], a mixed {{simulation}} {{is introduced}} to coordinate several <b>parallel</b> <b>simulations</b> as a distributed <b>simulation</b> system. The <b>parallel</b> <b>simulations</b> are conducted according to HLA. The HLA {{has been used}} as co-simulation bridge. The work exposed by [11] uses HLA to run a fight simulation of aircraft attacking air defense units. In [12] HLA is applied for real time aircraft simulation, to validate real time behavior on target computing platform. None of these works deals with the problem of integrating heterogeneous architectures in a unique computing platform. Their focus is on simulation, while our work focuses on heterogeneous distributed computing.|$|R
40|$|International audienceThe on-line {{visualization}} and the computational steering of <b>parallel</b> <b>simulations</b> come {{up against}} a serious coherence problem. Indeed, data distributed over parallel processes must be accessed carefully to ensure they are presented to the visualization system in a meaningful way. In this paper, we present {{a solution to the}} coherence problem for structured <b>parallel</b> <b>simulations.</b> We introduce a hierarchical task model that allows to better grasp the complexity of simulations, too often considered as "single-loop" applications. Thanks to this representation, we can schedule in parallel the request treatments on the simulation processes and satisfy the temporal coherence...|$|R
5000|$|Krause, Mathias J., Thomas Gengenbach, and Vincent Heuveline. [...] "Hybrid <b>parallel</b> <b>simulations</b> {{of fluid}} flows in complex geometries: Application {{to the human}} lungs." [...] European Conference on Parallel Processing. Springer Berlin Heidelberg, 2010.|$|R
5000|$|Srinidhi Varadarajan is the {{director}} of the Terascale Computing Facility and an Associate Professor in the Department of Computer Science at Virginia Tech. He joined the Department of Computer Science in August 1999. His research interests are in the area of high performance computer systems. In particular, fault tolerance in large-scale distributed systems, network emulation, network routing algorithms, compiler directed frameworks and <b>parallel</b> <b>simulation</b> algorithms. He currently heads the Computing Systems Research Laboratory and serves as a core faculty member in the Laboratory for Advanced Scientific Computing and Applications. He is also the architect of System X, one of the world's fastest and least expensive supercomputers. In 2004, he was named to the MIT Technology Review TR100 as one of the top 100 innovators in the world under the age of 35. He holds a bachelor's degree in Electronics And Communication Engineering from NIT Warangal ...|$|E
40|$|<b>Parallel</b> <b>simulation</b> has {{not been}} widely {{accepted}} by the simulation practitioners {{due to the lack}} of language support and tools necessary for developing efficient parallel simulators. This paper describes the design of SPaDES (Structured Parallel Discrete-Event Simulation), a structured <b>parallel</b> <b>simulation</b> workbench for developing portable simulation models, and a platform for designing experimentation of <b>parallel</b> <b>simulation</b> synchronization protocols. It consists of a C++ based <b>parallel</b> <b>simulation</b> language called SPaDES/C++ that allow the users to focus on modeling the systems to be simulated and not on the details of parallelization, i. e., independent of parallel programming and <b>parallel</b> <b>simulation</b> mechanism. SPaDES is distinguished from other <b>parallel</b> <b>simulation</b> languages because it integrates a process-oriented modeling methodology with object-oriented programming. A comparison of SPaDES/C++ with CSIM and Simscript using an example application is discussed. 1 Introduction Parallel [...] ...|$|E
40|$|This {{research}} {{investigates the}} feasibility of developing low-cost, personal computer-based parallel processing procedures that can be applicable to real time simulation of freeway flows. Specific objectives include, * Development of a framework for PC-based <b>parallel</b> <b>simulation</b> system * Enhancements of existing freeway traffic models for <b>parallel</b> <b>simulation</b> * Development of a PC-based, <b>parallel</b> <b>simulation</b> algorithm for freeway flows. * Development of a prototype version of a PC-based <b>parallel</b> <b>simulation</b> system Performance evaluation of the PC-based parallel freeway simulation system. Center for Transportation Studie...|$|E
50|$|By {{a careful}} choice of {{temperatures}} {{and number of}} systems one can achieve an improvement in the mixing properties {{of a set of}} Monte Carlo simulations that exceeds the extra computational cost of running <b>parallel</b> <b>simulations.</b>|$|R
40|$|A {{computation}} {{method for}} <b>parallel</b> <b>simulations</b> of ceramic grain growth at an atomic scale in a PC cluster is proposed, {{by combining the}} Message Passing Interface (MPI) with the serial simulation of grain growth. A parallel platform is constructed for the simulation of grain growth with program modules of grain assignments, grain growth, data exchanges and boundary settlements, which are coded with Microsoft Visual C++ 6. 0 and MPICH. Quantitative {{results show that the}} computing speed of <b>parallel</b> <b>simulations</b> with this platform is obviously increased compared with that of serial simulations. Such a computing mode of grain growth is in good agreement with practical situations of ceramic grain growth...|$|R
40|$|Component-based environments provide {{opportunities}} {{to improve the}} performance, numerical accuracy, and other characteristics of <b>parallel</b> <b>simulations</b> in computational fluid dynamics (CFD). Because component-based software engineering combines object-oriented design with the powerful features of well-defined interfaces, programming language interoperability, an...|$|R
40|$|Abstract – <b>Parallel</b> <b>simulation</b> methods {{suffer from}} serious {{communication}} and synchronization overhead, which significantly reduces or negates the potential performance gain offered by <b>parallel</b> <b>simulation.</b> This paper introduces a new, possibly controversial, approach to distributed <b>parallel</b> <b>simulation,</b> based on temporal <b>parallel</b> <b>simulation,</b> aimed at completely eliminating the communication and synchronization overhead between processors. In contrast to traditional (spatial) distributed simulation, which partitions the design into multiple modules and simulates all modules in parallel, the proposed multi-threaded simulation partitions single simulation into multiple simulation runs in temporal domain. ...|$|E
40|$|This paper surveys {{topics that}} {{presently}} define {{the state of}} the art in <b>parallel</b> <b>simulation.</b> Included in the tutorial are discussions on new protocols, mathematical performance analysis, time parallelism, hardware support for <b>parallel</b> <b>simulation,</b> load balancing algorithms, and dynamic memory management for optimistic synchronization...|$|E
40|$|The paper {{describes}} {{techniques used}} to obtain stable high performance from <b>parallel</b> <b>simulation</b> of large telecommunication networks. A basic <b>parallel</b> <b>simulation</b> model of a telecommunication network and the conservative implementation of the model are discussed and the experimental results {{on the performance of}} the simulator are examined...|$|E
40|$|Spatial {{stochastic}} molecular simulations {{in biology}} {{are limited by}} the intense computation required to track molecules in space either in a discrete time or discrete space framework, meaning that the serial limit has already been reached in sub-cellular models. This calls for <b>parallel</b> <b>simulations</b> that {{can take advantage of}} the power of modern supercomputers; however exact methods are known to be inherently serial. We introduce an operator splitting implementation for irregular grids with a novel method to improve accuracy, and demonstrate potential for scalable <b>parallel</b> <b>simulations</b> in an initial MPI version. We foresee that this groundwork will enable larger scale, whole-cell stochastic simulations in the near future. Comment: 33 pages, 10 figure...|$|R
40|$|For a {{class of}} {{stationary}} Gaussian processes and for large correlation times, the asymptotic behavior of the upcrossing first passage time probability densities is investigated. <b>Parallel</b> <b>simulations</b> of sample paths of special stationary Gaussian processes for large correlations times provide a statistical validation of the theoretical results...|$|R
5000|$|The {{aim is to}} {{construct}} <b>parallel</b> <b>simulations</b> consisting of computational devices, referred to as agents, with given properties, in order to model the target phenomena. The subject {{is the process of}} emergence from the lower (micro) level of a social system to the higher (or macro) level.|$|R
40|$|<b>Parallel</b> <b>simulation</b> is an {{efficient}} way to cope with long runtimes and high computational requirements in simulations of modern complex integrated electronic circuits and systems. This paper presents an algorithm for <b>parallel</b> <b>simulation</b> based on parallelization in equation formulation and simultaneous calculation of matrix contributions for nonlinear analog elements. In addition, the paper describes the development of a grid interface for a parallel simulator that enables a designer to perform simulations on distant computer clusters. Performances of the developed <b>parallel</b> <b>simulation</b> algorithm are evaluated by simulation of a microelectromechanical system...|$|E
40|$|Research in <b>parallel</b> <b>simulation</b> {{has been}} around for more than two decades. However, the number of papers {{reporting}} on its application to real world problems is limited. At the 2002 PADS conference, researchers discussed the need to go beyond synchronization and performance issues and, in particular, to demonstrate that <b>parallel</b> <b>simulation</b> could be used in real world applications outside military and network simulations. Since then, we have seen {{an increase in the number}} of papers on <b>parallel</b> <b>simulation</b> applications in areas such as operations management and the physical sciences. This paper presents a parallel discrete-event demographic simulation tool which has been developed using �sik <b>parallel</b> <b>simulation</b> library. A number of experiments have been conducted to evaluate the simulation performance. The result shows that good event parallelism can be achieved...|$|E
40|$|This paper extends {{work done}} by Abrams and Richardson {{on the topic of}} {{implementing}} global termination conditions and collecting output measures in <b>parallel</b> <b>simulation.</b> Concentrating on the Time Warp method for <b>parallel</b> <b>simulation,</b> an improved categorization scheme for termination conditions is presented, as well as algorithms written in UNITY notation to implement each category...|$|E
40|$|Summary. A {{three-dimensional}} Particle In Cell {{scheme for}} unstructured grids is presented. Since simulations {{of this kind}} require large computational resources, the solver was parallelized. The scalability of two <b>parallel</b> <b>simulations</b> is shown and an engineering application {{as well as two}} validation test cases for the scheme are presented. ...|$|R
40|$|This {{presentation}} {{provides an}} overview of CORSAIR, a three dimensional computational fluid dynamics software code for the analysis of turbomachinery components available from NASA, and discusses its potential use in the design of these parts. Topics covered include: time-dependent equations of motion, grid topology, turbulence models, boundary conditions, <b>parallel</b> <b>simulations</b> and miscellaneous capabilities...|$|R
40|$|A Python {{language}} scripting interface for optimised numerical software {{written in}} C/C++ {{has been designed}} to facilitate the rapid development of 3 D <b>parallel</b> <b>simulations</b> on the Altix 3700. A recent advance focusing on the extensions implemented within a high performance finite element kernel module is described. Performance issues, measurements and results on the Altix 3700 are presented. 1...|$|R
40|$|This paper {{presents}} an analytical model {{to evaluate the}} performance of <b>parallel</b> <b>simulation</b> on distributed computing platforms. The proposed model is formalized by two important time components in parallel and distributed processing: computation time and communication time. A conservative <b>parallel</b> <b>simulation</b> of multistage interconnection networks is used as an example in our analytical model...|$|E
40|$|This paper {{describes}} {{techniques used}} to optimise {{the performance of}} <b>parallel</b> <b>simulation</b> of SS 7 telecommunication networks. A basic <b>parallel</b> <b>simulation</b> model of an SS 7 network and the conservative implementation of the model are discussed and experimental results {{on the performance of}} the simulator are examined. A technique for achieving further optimisation is proposed...|$|E
40|$|Abstract—GPU {{computing}} is at {{the forefront}} of high-performance computing, and it has greatly affected current studies on parallel software and hardware design because of its massively parallel architecture. Therefore, numerous studies have focused on the utilization of GPUs in various fields. However, studies of GPU architectures are constrained by the lack of a suitable GPU simulator. Previously proposed GPU simulators do not have sufficient simulation speed for advanced software and architecture studies. In this paper, we propose a new <b>parallel</b> <b>simulation</b> framework and a <b>parallel</b> <b>simulation</b> technique called work-group <b>parallel</b> <b>simulation</b> in order to improve the simulation speed for modern many-core GPUs. The proposed framework divides the GPU architecture into parallel and shared compo-nents, and it determines which GPU component can be effectively parallelized and can work correctly in multithreaded simulation. In addition, the work-group <b>parallel</b> <b>simulation</b> technique effec-tively boosts the performance of parallelized GPU simulation by eliminating the synchronization overhead. Experimental results obtained using a simulator with the proposed framework show that the proposed <b>parallel</b> <b>simulation</b> technique has a speed-up of up to 4. 15 as compared to an existing sequential GPU simulator on an 8 -core machine providing minimized cycle errors. I...|$|E
40|$|We {{present some}} {{original}} automatic partitioning techniques for irregular sparse matrices arising from Finite-Element discretizations of PDE. We discuss their efficiency {{in terms of}} parallel computation, especially {{from the point of}} view of adaptive applications, that need rebalancing after small changes on the grid. Some <b>parallel</b> <b>simulations</b> are presented, along with practical experiments on a KSR and a SGI-Challenger...|$|R
5000|$|Avery Design Systems: SimCluster (for <b>parallel</b> logic <b>simulation)</b> and Insight (for formal verification) ...|$|R
40|$|International audienceUsual Parallel Discrete Event System Specification (P-DEVS) allows specifying {{systems from}} {{modeling}} to simulation. However, the framework does not incorporate <b>parallel</b> and stochastic <b>simulations.</b> This work intends to extend P-DEVS to <b>parallel</b> <b>simulations</b> and pseudorandom number generators {{in the context}} of a spiking neural network. The discrete event specification presented here makes explicit and centralized the parallel computation of events as well as their routing, making further implementations more easy. It is then expected to dispose of a well defined mathematical and computational framework to deal with networks of spiking neurons...|$|R
