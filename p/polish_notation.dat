175|5|Public
25|$|The first Soviet {{programmable}} desktop calculator ISKRA 123, {{powered by}} the power grid, was released {{at the start of}} the 1970s. The first Soviet pocket battery-powered programmable calculator, Elektronika B3-21, was developed by the end of 1977 and released at the start of 1978. The successor of B3-21, the Elektronika B3-34 wasn't backward compatible with B3-21, even if it kept the reverse <b>Polish</b> <b>notation</b> (RPN). Thus B3-34 defined a new command set, which later was used in a series of later programmable Soviet calculators. Despite very limited abilities (98 bytes of instruction memory and about 19 stack and addressable registers), people managed to write all kinds of programs for them, including adventure games and libraries of calculus-related functions for engineers. Hundreds, perhaps thousands, of programs were written for these machines, from practical scientific and business software, which were used in real-life offices and labs, to fun games for children. The Elektronika MK-52 calculator (using the extended B3-34 command set, and featuring internal EEPROM memory for storing programs and external interface for EEPROM cards and other periphery) was used in Soviet spacecraft program (for Soyuz TM-7 flight) as a backup of the board computer.|$|E
500|$|The Sinclair used a {{slightly}} different Reverse <b>Polish</b> <b>Notation</b> method; lacking an enter key, the operation keys enter a number into the appropriate register and the calculation is performed. [...] For example, [...] "(1+2) * 3" [...] could be calculated as: C 1 + 2 + 3 × to give the result of 9.0000 00 ( [...] , or 9). [...] The [...] "C" [...] key performs a [...] clear; pressing it sets the calculator to a state with zero in the internal registers. [...] Pressing [...] "C" [...] followed by number keys then [...] "+" [...] effectively adds the number entered to the zero and stores it internally {{to be worked on}} in subsequent calculations. [...] If the [...] "-" [...] key is pressed instead, the number is subtracted from zero, effectively entering a negative number.|$|E
500|$|It {{displays}} only {{in scientific}} notation, with a five digit mantissa and a two digit exponent, although a sixth digit of the mantissa was stored internally. Because {{of the way}} the processor was designed, it uses Reverse <b>Polish</b> <b>notation</b> (RPN) for inputting calculations. RPN meant that the difficult implementation of brackets, and the associated recursive logic, was not necessary to implement in the hardware, but the effort was instead offloaded to the user. Instead of an [...] "Equals" [...] button, there is an [...] "Enter" [...] button that tells the calculator when a value has been entered, and then the operators are entered in after the operands. For example, on some devices to evaluate [...] "(1+2) x 3", the sequence entered would be [...] "3 enter 2 enter 1 + x." [...] The Sinclair Scientific entry procedure is slightly different as it lacks an enter key and has a limited number of internal registers.|$|E
40|$|We {{define a}} class of random measures, {{spatially}} independent martingales, which we view as a natural generalisation of the canonical random discrete set, and which includes as special cases many variants of fractal percolation and Poissonian cut-outs. We pair the random measures with deterministic families of parametrised measures {η_t}_t, and show that under some natural checkable conditions, a. s. the total measure of the intersections is Hölder continuous {{as a function of}} t. This continuity phenomenon turns out to underpin a large amount of geometric information about these measures, allowing us to unify and substantially generalize a large number of existing results on the geometry of random Cantor sets and measures, as well as obtaining many new ones. Among other things, for large classes of random fractals we establish (a) very strong versions of the Marstrand-Mattila projection and slicing results, as well as dimension conservation, (b) slicing results with respect to algebraic curves and self-similar sets, (c) smoothness of convolutions of measures, including self-convolutions, and nonempty interior for sumsets, (d) rapid Fourier decay. Among other applications, we obtain an answer to a question of I. Łaba in connection to the restriction problem for fractal measures. Comment: 96 pages, 5 figures. v 4 : The definition of the metric changed in Section 8. <b>Polishing</b> <b>notation</b> and other small changes. All main results unchange...|$|R
40|$|The paper {{develops}} general, discrete, non-probabilistic market {{models and}} minmax price bounds leading to price intervals for European options. The approach provides the trajectory based analogue of martingale-like properties {{as well as}} a generalization that allows a limited notion of arbitrage in the market while still providing coherent option prices. Several properties of the price bounds are obtained, in particular a connection with risk neutral pricing is established for trajectory markets associated to a continuous-time martingale model. Comment: Version 2, from June 12, 2015, supersedes the version of July 7 2014. The changes are numerous and substantial. Version 3, November 4, 2015, much <b>polished</b> version, <b>notation</b> and notions consistent with sequel paper (appearing as reference [12] in this version...|$|R
50|$|Several authors {{simply say}} formula. Modern usages (especially {{in the context}} of {{computer}} science with mathematical software such as model checkers, automated theorem provers, interactive theorem provers) tend to retain of the notion of formula only the algebraic concept and to leave the question of well-formedness, i.e. of the concrete string representation of formulas (using this or that symbol for connectives and quantifiers, using this or that parenthesizing convention, using <b>Polish</b> or infix <b>notation,</b> etc.) as a mere notational problem.|$|R
2500|$|The {{definitions}} above use {{infix notation}} for binary connectives such as [...] A less common convention is <b>Polish</b> <b>notation,</b> {{in which one}} writes , , and so on {{in front of their}} arguments rather than between them. This convention allows all punctuation symbols to be discarded. <b>Polish</b> <b>notation</b> is compact and elegant, but rarely used in practice because it is hard for humans to read it. In <b>Polish</b> <b>notation,</b> the formula ...|$|E
2500|$|In 1961 Dijkstra first {{described}} the shunting-yard algorithm, {{a method for}} parsing mathematical expressions specified in infix notation, in the Mathematisch Centrum report. It {{can be used to}} produce output in Reverse <b>Polish</b> <b>notation</b> (RPN) or as an abstract syntax tree (AST). The algorithm was named the [...] "shunting yard" [...] algorithm because its operation resembles that of a railroad shunting yard. The shunting-yard algorithm is commonly used to implement operator-precedence parsers.|$|E
2500|$|The HP 12c {{financial}} calculator {{is still}} produced. It {{was introduced in}} 1981 and is still being made with few changes. The HP 12c featured the reverse <b>Polish</b> <b>notation</b> mode of data entry. In 2003 several new models were released, including an improved version of the HP 12c, the [...] "HP 12c platinum edition" [...] which added more memory, more built-in functions, {{and the addition of}} the algebraic mode of data entry.|$|E
40|$|We study {{properties}} of solutions of $Q$-systems in the WZW fusion ring {{obtained by the}} Kirillov-Reshetikhin modules. We make a conjecture about their positivity and periodicity and give a proof of it in some cases. We also construct a positive solution of the level $k$ restricted $Q$-system of classical types in the fusion rings. As an application, we prove some conjectures of Kirillov and Kuniba-Nakanishi-Suzuki on the level $k$ restricted $Q$-systems. Comment: 29 pages;Table 1 reproduced from arXiv:math/ 9812022 [math. QA]; v 2 : no changes in main results, paper reorganized, introduction rewritten, <b>notations</b> <b>polished,</b> typos corrected, references added; v 3 : typos corrected; v 4 : minor change...|$|R
40|$|Today's {{most popular}} {{techniques}} for accurately calculating {{the dynamics of}} the reduced density operator in an open quantum system, either require, or gain great computational benefits, from representing the bath response function a(t) in the form a(t) =Σ_k^K p_k e^O_k t. For some of these techniques, the number of terms in the series K plays the lead role in the computational cost of the calculation, and is therefore often a limiting factor in simulating open quantum system dynamics. We present an open source MATLAB program called BATHFIT 1, whose input is any spectral distribution functions J(w) or bath response function, and whose output attempts to be the set of parameters p_k,w_k_k= 1 ^K such that for a given value of K, the series Σ_k^k p_k e^O_k t is {{as close as possible to}} a(t). This should allow the user to represent a(t) as accurately as possible with as few parameters as possible. The program executes non-linear least squares fitting, and for a very wide variety of spectral distribution functions, competent starting parameters are used for these fits. For most forms of J(w), these starting parameters, and the exact a(t) corresponding to the given J(w), are calculated using the recent Pade decomposition technique - therefore this program can also be used to merely implement the Pade decomposition for these spectral distribution functions; and it can also be used just to efficiently and accurately calculate a(t) for any given J(w). The program also gives the J(w) corresponding to a given a(t), which may allow one to assess the quality (in the w-domain) of a representation of a(t) being used. Finally, the program can calculate the discretized influence functional coefficients for any J(w), and this is computed very efficiently for most forms of J(w) by implementing the recent technique published in [Quantum Physics Letters (2012) 1 (1) pg. 35]. Comment: Changes in this version: references added, table 1 added, other tables were <b>polished</b> and <b>notation</b> was changed, significant changes made to section on choosing starting parameters for cases where Pade-like decomposition is unavailable, additions made to influence functionals section including more detailed description of QUAPI section, some typos were corrected to...|$|R
2500|$|The world's first all-electronic desktop {{calculator}} was the British Bell Punch ANITA, {{released in}} 1961. It used vacuum tubes, cold-cathode tubes and Dekatrons in its circuits, with 12 cold-cathode [...] "Nixie" [...] tubes for its display. The ANITA sold well {{since it was}} the only electronic desktop calculator available, and was silent and quick. The tube technology was superseded in June 1963 by the U.S. manufactured Friden EC-130, which had an all-transistor design, a stack of four 13-digit numbers displayed on a [...] CRT, and introduced reverse <b>Polish</b> <b>notation</b> (RPN).|$|E
2500|$|Calculated Industries {{competed with}} the HP 12c in the {{mortgage}} {{and real estate}} markets by differentiating the key labeling; changing the “I”, “PV”, “FV” to easier labeling terms such as [...] "Int", [...] "Term", [...] "Pmt", and not using the reverse <b>Polish</b> <b>notation.</b> However, CI's more successful calculators involved a line of construction calculators, which evolved and expanded in the 1990s to present. According to Mark Bollman, a mathematics and calculator historian and associate professor of mathematics at Albion College, the [...] "Construction Master {{is the first in}} a long and profitable line of CI construction calculators" [...] which carried them through the 1980s, 1990s, and to the present.|$|E
2500|$|Meanwhile, Hewlett-Packard (HP) {{had been}} {{developing}} a pocket calculator. Launched in early 1972, it was {{unlike the other}} basic four-function pocket calculators then available {{in that it was}} the first pocket calculator with scientific functions that could replace a slide rule. The $395 HP-35, along with nearly all later HP engineering calculators, used reverse <b>Polish</b> <b>notation</b> (RPN), also called postfix notation. A calculation like [...] "8 plus 5" [...] is, using RPN, performed by pressing [...] "8", [...] "Enter↑", [...] "5", and [...] "+"; instead of the algebraic infix notation: [...] "8", [...] "+", [...] "5", [...] "=". It had 35 buttons and was based on Mostek Mk6020 chip.|$|E
2500|$|The logical {{connective}}s: ∧ for conjunction, ∨ for disjunction, [...] → for implication, ↔ for biconditional, ¬ for negation. [...] Occasionally other {{logical connective}} symbols are included. [...] Some authors use Cpq, instead of →, and Epq, instead of ↔, especially in contexts where → {{is used for}} other purposes. Moreover, the horseshoe ⊃ may replace →; the triple-bar ≡ may replace ↔; a tilde (~), Np, or Fpq, may replace ¬; ||, or Apq may replace ∨; and &, Kpq, or the middle dot, ⋅, may replace ∧, especially if these symbols are not available for technical reasons. (Note: the aforementioned symbols Cpq, Epq, Np, Apq, and Kpq are used in <b>Polish</b> <b>notation.)</b> ...|$|E
2500|$|The tube {{technology}} of the ANITA was superseded in June 1963 by the U.S. manufactured Friden EC-130, which had an all-transistor design, a stack of four 13-digit numbers displayed on a [...] cathode ray tube (CRT), and introduced Reverse <b>Polish</b> <b>Notation</b> (RPN) to the calculator market for a price of $2200, which was about three times {{the cost of an}} electromechanical calculator of the time. Like Bell Punch, Friden was a manufacturer of mechanical calculators that had decided that the future lay in electronics. In 1964 more all-transistor electronic calculators were introduced: Sharp introduced the CS-10A, which weighed [...] and cost 500,000 yen ($), and Industria Macchine Elettroniche of Italy introduced the IME 84, to which several extra keyboard and display units could be connected so that several people could make use of it (but apparently not at the same time).|$|E
50|$|The term <b>Polish</b> <b>notation</b> is {{sometimes}} taken (as {{the opposite of}} infix notation) to also include reverse <b>Polish</b> <b>notation.</b>|$|E
5000|$|As of 2011, Hewlett-Packard was {{offering}} the calculator models 12C, 12C Platinum, 17bII+, 20b, 30b, 33s, 35s, 48gII (RPL) and 50g (RPL) which support reverse <b>Polish</b> <b>notation.</b> While calculators emulating classical models {{continue to support}} classical reverse <b>Polish</b> <b>notation,</b> new reverse <b>Polish</b> <b>notation</b> models feature a variant of reverse <b>Polish</b> <b>notation,</b> where the [...] key behaves as in RPL. This latter variant is sometimes known as entry RPN. In 2013, the HP Prime introduced a 128-level form of entry RPN called advanced RPN. By early 2016, only the 12C, 12C Platinum, 17bii+, 35s and Prime remain active HP models supporting reverse <b>Polish</b> <b>notation.</b>|$|E
5000|$|<b>Polish</b> <b>{{notation}}</b> (PN), {{also known}} as normal <b>Polish</b> <b>notation</b> (NPN), Łukasiewicz notation, Warsaw notation, Polish prefix notation or simply prefix notation, is a mathematical notation in which operators precede their operands, in contrast to reverse <b>Polish</b> <b>notation</b> (RPN) in which operators follow their operands. It does not need any parentheses as long as each operator has a fixed number of operands. The description [...] "Polish" [...] refers to the nationality of logician Jan Łukasiewicz, who invented <b>Polish</b> <b>notation</b> in 1924.|$|E
50|$|Later LCD-based calculators in {{the early}} 1980s such as the HP-10C, HP-11C, HP-15C, HP-16C, and the {{financial}} calculator, the HP-12C also used reverse <b>Polish</b> <b>notation.</b> In 1988 Hewlett-Packard introduced a business calculator, the HP-19B, without reverse <b>Polish</b> <b>notation,</b> but its 1990 successor, the HP-19BII, gave users the option of using algebraic notation or reverse <b>Polish</b> <b>notation.</b>|$|E
50|$|Binary {{operations}} sometimes use prefix or (probably more often) postfix notation, both {{of which}} dispense with parentheses. They are also called, respectively, <b>Polish</b> <b>notation</b> and reverse <b>Polish</b> <b>notation.</b>|$|E
50|$|Hewlett-Packard {{engineers}} {{designed the}} 9100A Desktop Calculator in 1968 with reverse <b>Polish</b> <b>notation</b> {{with only three}} stack levels, a reverse <b>Polish</b> <b>notation</b> variant later referred to as three-level RPN. This calculator popularized reverse <b>Polish</b> <b>notation</b> among the scientific and engineering communities. The HP-35, the world's first handheld scientific calculator, introduced the classical four-level RPN in 1972. HP used reverse <b>Polish</b> <b>notation</b> on every handheld calculator it sold, whether scientific, financial, or programmable, until it introduced the HP-10 adding machine calculator in 1977. By this time HP was the leading manufacturer of calculators for professionals, including engineers and accountants.|$|E
5000|$|Main relevance: Abuse of {{notation}}, Well-formed formula, Big O notation (L-notation), Dowker notation, Hungarian notation, Infix notation, Positional notation, <b>Polish</b> <b>notation</b> (Reverse <b>Polish</b> <b>notation),</b> Sign-value notation, Subtractive notation, infix notation, History {{of writing}} numbers ...|$|E
5000|$|The {{definitions}} above use {{infix notation}} for binary connectives such as [...] A less common convention is <b>Polish</b> <b>notation,</b> {{in which one}} writes , , and so on {{in front of their}} arguments rather than between them. This convention allows all punctuation symbols to be discarded. <b>Polish</b> <b>notation</b> is compact and elegant, but rarely used in practice because it is hard for humans to read it. In <b>Polish</b> <b>notation,</b> the formulabecomes [...] "∀x∀y→Pfx¬→ PxQfyxz".|$|E
5000|$|Reverse <b>Polish</b> <b>{{notation}}</b> (RPN), {{also known}} as Polish postfix notation or simply postfix notation, is a mathematical notation in which operators follow their operands, in contrast to <b>Polish</b> <b>notation</b> (PN), in which operators precede their operands. It does not need any parentheses as long as each operator has a fixed number of operands. The description [...] "Polish" [...] refers to the nationality of logician Jan Łukasiewicz, who invented <b>Polish</b> <b>notation</b> in 1924.|$|E
5000|$|Existing {{implementations}} using reverse <b>Polish</b> <b>notation</b> include: ...|$|E
5000|$|Full BASIC (floating point BASIC using Reverse <b>Polish</b> <b>Notation)</b> ...|$|E
5000|$|... #Subtitle level 2: Reverse <b>Polish</b> <b>notation</b> (RPN) (postfix notation) ...|$|E
5000|$|Several Apple iPhone {{applications}} e.g. [...] "reverse <b>polish</b> <b>notation</b> calculator" ...|$|E
50|$|Soviet {{programmable}} calculators (MK-52, MK-61, B3-34 {{and earlier}} B3-21 models) used reverse <b>Polish</b> <b>notation</b> for both automatic mode and programming. Modern Russian calculators MK-161 and MK-152, designed and manufactured in Novosibirsk since 2007 and offered by Semico, are backward compatible with them. Their extended architecture is {{also based on}} reverse <b>Polish</b> <b>notation.</b>|$|E
50|$|Poland's mathematicians {{provided}} {{a name to}} <b>Polish</b> <b>notation</b> and Polish space.|$|E
5000|$|Reverse <b>Polish</b> <b>notation</b> - Allows Stack based {{algorithms}} {{to evaluate}} expressions ...|$|E
50|$|Prefix {{notation}} {{has seen}} wide application in Lisp s-expressions, where the brackets are required since the operators {{in the language}} are themselves data (first-class functions). Lisp functions may also be variadic. The Tcl programming language, much like Lisp also uses <b>Polish</b> <b>notation</b> through the mathop library. The Ambi programming language uses <b>Polish</b> <b>notation</b> for arithmetic operations and program construction.|$|E
50|$|HP calculators {{are well}} known for their use of Reverse <b>Polish</b> <b>Notation</b> (RPN).|$|E
50|$|Among {{these was}} the PROGRAM Programmable Scientific Calculator which {{featured}} reverse <b>Polish</b> <b>notation.</b>|$|E
50|$|C. L. Hamblin 1962: Translation to {{and from}} <b>Polish</b> <b>notation.</b> Computer Journal, 5: 210-213.|$|E
