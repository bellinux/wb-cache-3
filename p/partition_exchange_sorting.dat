0|106|Public
25|$|General method: insertion, exchange, selection, merging, etc. <b>Exchange</b> <b>sorts</b> include {{bubble sort}} and quicksort. Selection sorts include shaker sort and heapsort. Also whether the {{algorithm}} is serial or parallel. The {{remainder of this}} discussion almost exclusively concentrates upon serial algorithms and assumes serial operation.|$|R
40|$|Multikey Sorting „ is {{arranging}} a {{sequential file}} according to ascending or descending {{on more than}} one keys or one columns. This paper considers a modified version of Binary Insertion Tree to sort records on several keys with the possibility of mixing the order of keys. I. e. ascending on some keys and descending on some keys. Existing techniques consider sorting directly on all the keys either in ascending or descending order. The proposed method overcomes this limitations, and use dynamic variables to allow sorting of files with sizes comparable to the memory available to the user. It achieves an average number of comparisons comparable to the best known sorting algorithms, since inserting N records into an initially empty tree needs the same average number of comparisons between records. This paper compares its execution with <b>Exchange</b> <b>Sort,</b> Selection Sort and Quick Sort and shows a big difference in speed, execution and storage. The algorithms for multikey <b>sorting</b> by <b>Exchange</b> <b>sort</b> technique, Selection sort technique, Quick sort technique and the proposed method are studied and implemented in Pascal Language...|$|R
40|$|Includes bibliographical {{references}} (pages 87 - 88) This Computer Aided Instruction {{package is}} a prototype system. It includes four internal <b>sorting</b> algorithm: <b>exchange</b> <b>sort,</b> select sort, bubble sort, and shell sort. This report briefly reviews {{the history and}} the development of CAI. Also, the report reviews the evaluative studies of CAI and examines CAI developments in computer science. A walkthrough of a sorting lesson presents the major phases within a lesson. They are: introduction, menu, tutor, simulation/drill, and conclusion. The description of the program design gives detailed insights into the package from a programmer's standpoint. Finally, evaluations and possible future enhancements are enumerated...|$|R
40|$|Part 10 : Big Data and Text MiningInternational audienceWe {{propose a}} novel Distributed Column-Oriented Database Engine (DCODE) for {{efficient}} analytic query processing that combines advantages of both column storage and parallel processing. In DCODE, we enhance an existing open-source columnar database engine {{by adding the}} capability for handling queries over a cluster. Specifically, we studied parallel query execution and optimization techniques such as horizontal <b>partitioning,</b> <b>exchange</b> operator allocation, query operator scheduling, operator push-down, and materialization strategies, etc. The experiments over the TPC-H dataset verified the effectiveness of our system...|$|R
40|$|AbstractIn {{this paper}} {{we present a}} {{distributed}} sorting algorithm, which is a variation on <b>exchange</b> <b>sort,</b> i. e., neighboring elements {{that are out of}} order are exchanged. We derive the algorithm by transforming a sequential algorithm into a distributed one. The transformation is guided by the distribution of the data over processes. First we discuss the case of two processes, and then the general case of one or more processes. Finally we propose a more efficient solution for the general case...|$|R
60|$|They {{looked at}} each other, but <b>exchanged</b> no <b>sort</b> of greeting, as Bartley, unbidden, took a chair on the {{opposite}} side of the stove; the Squire did not put down the book he had been reading.|$|R
40|$|Abstract—Conventional sorting {{algorithms}} {{make use}} of such data structures as array, file and list which define access methods of the items to be sorted. These traditional methods – <b>exchange</b> <b>sort,</b> divide and conquer sort, selection sort and insertion sort – require supervisory control program. The supervisory control program {{has access to the}} items and is responsible for arranging them in the proper order. This paper presents a different sorting algorithm that does not require supervisory control program. The objects sort themselves and they are able to terminate when sorting is completed. The algorithm also employs parallel processing mechanisms to increase its efficiency and effectiveness. The paper makes a review of the traditional sorting methods, identifying their pros and cons and proposes a different design based on conceptual combination of these algorithms. Algorithms designed were implemented and tested in Java desktop application...|$|R
40|$|Distributed {{simulations}} require partitioning {{mechanisms to}} operate, {{and the best}} partitioning algorithms try to load-balance the partitions. Dynamic load-balancing, i. e. re-partitioning simulation environments at run-time, becomes essential when the load in the partitions change. In decentralised distributed simulation the information needed to dynamically load-balance seems difficult to collect and to our knowledge, all solutions apply a local dynamic load balancing: <b>partitions</b> <b>exchange</b> load only with their neighbours (more loaded partitions to less loaded ones). This limits {{the effect of the}} load-balancing. In this paper, we present a global dynamic load-balancing of decentralised distributed simulations. Our algorithm collects information in a decentralised fashion and makes re-balancing decisions based on the load processed by every logical processes. While our algorithm has similar results to others in most cases, we show an improvement of the load-balancing up to 30 % in some challenging scenarios against only 12. 5 % for a local dynamic load-balancing...|$|R
50|$|A Ghost Leg can be {{constructed}} arbitrarily, but such a Ghost Leg is not necessarily prime. It can be proven that only those Ghost Legs constructed by bubble sort contains the least number of legs, and hence is prime. This is equivalent to saying that bubble sort performs the minimum number of adjacent <b>exchanges</b> to <b>sort</b> a sequence.|$|R
40|$|Conventional sorting {{algorithms}} {{make use}} of such data structures as array, file and list which define access methods of the items to be sorted. Such traditional methods as <b>exchange</b> <b>sort,</b> divide and conquer sort, selection sort and insertion sort require supervisory control program. The supervisory control program {{has access to the}} items and is responsible for arranging them in the proper order. This paper presents a different sorting algorithm that does not require supervisory control program. The objects sort themselves and they are able to terminate when sorting is completed. The algorithm also employs parallel processing mechanisms to increase its efficiency and effectiveness. The paper makes a review of the traditional sorting methods, identifying their pros and cons and proposes a different design based on conceptual combination of these algorithms. Algorithms designed were implemented and tested in Java desktop applicationComment: 8 pages, 13 figure...|$|R
40|$|Abstract. A {{large number}} of results in {{analysis}} of algorithms con-tain fluctuations. A typical result might read “The expected number of [...] . for large n behaves like log 2 n + constant + δ(log 2 n), where δ(x) is a periodic function of period one and mean zero. ” Examples include various trie parameters, approximate counting, probabilistic counting, radix <b>exchange</b> <b>sort,</b> leader election, skip lists, adaptive sampling. Often, there are huge cancellations to be noted, espe-cially if one wants to compute variances. In order to see this, one needs identities for the Fourier coefficients of the periodic functions involved. There are several methods to derive such identities, which belong {{to the realm of}} modular functions. The most flexible method seems to be the calculus of residues. In some situations, Mellin trans-forms help. Often, known identities can be employed. This survey shows the various techniques by elaborating on the most important examples from the literature...|$|R
40|$|In {{this paper}} {{we present a}} {{distributed}} sorting algorithm, which is a variation on <b>exchange</b> <b>sort,</b> i. e., neighboring elements {{that are out of}} order are exchanged. We derive the algorithm by transforming a sequential algorithm into a distributed one. The transformation is guided by the distribution of the data over processes. First we discuss the case of two processes, and then the general case of one or more processes. Finally we propose a more efficient solution for the general case. 1. 1 Program notation For the sequential part of the algorithms, we use a subset of Edsger W. Dijkstra's guarded command language [1]. For (sequential) statements S 0 and S 1, statement S 0 kS 1 denotes their concurrent execution. The constituents S 0 and S 1 are then called processes. The statements may share variables (cf. [6]). We transform our algorithms in such a way, however, that the final code contains no shared variables and all synchronization and communication is performed by message passing. [...] ...|$|R
5000|$|It {{currently}} {{is made up}} of 19 commodities as quoted on the NYMEX, CBOT, LME, CME and COMEX <b>exchanges.</b> These are <b>sorted</b> into 4 groups, each with different weightings. These groups are: ...|$|R
6000|$|... "Providence {{itself has}} led the wretch {{in a moment of}} mental {{aberration}} to seek Mr. Razumov on the strength of some old, utterly misinterpreted <b>exchange</b> of ideas--some <b>sort</b> of idle speculative conversation--months ago--I am told--and completely forgotten till now by Mr. Razumov." ...|$|R
40|$|In this paper, {{we present}} a new {{approach}} towards a parallel resolution procedure which explores another dimension of parallelism {{in addition to the}} AND/OR formulation and special hardware constructs. The approach organizes the input clauses of a problem domain into a connection graph. The connection graph is then partitioned and each partition is worked on by a different processor of a multiprocessor system. These processors execute the resolution procedure independently on its <b>partition,</b> and <b>exchange</b> intermediate results via clause migrations. Preliminary test results and qualitative assessments of this procedure are also given. 1...|$|R
40|$|This paper {{describes}} {{the design and}} implementation on MIMD parallel machines of P-AutoClass, a parallel version of the AutoClass system based upon the Bayesian method for determining optimal classes in large datasets. The P-AutoClass implementation divides the clustering task among the processors of a multicomputer so that they work on their own <b>partition</b> and <b>exchange</b> their intermediate results. The system architecture, its implementation and experimental performance results on different processor numbers and dataset sizes are presented and discussed. In particular, efficiency and scalability of P-AutoClass versus the sequential AutoClass system are evaluated and compared. ...|$|R
40|$|This paper {{investigates the}} market {{consequences}} of alliance formation among stock exchanges. These alliances enable brokers to match investors internationally at their local market, thereby {{eliminating the need}} for brokers to maintain memberships in foreign stock <b>exchanges.</b> We <b>sort</b> out the conditions under which alliance formation increases profits for stock exchanges and brokers, and how changes in fee structures affect investors’ participation rates and welfare. Finally, we examine several methods for implementing access fees and their welfare implications. stock exchange alliances; access fees; competition among stock exchanges...|$|R
50|$|Promotion ads {{for this}} event likened this to an alien {{abduction}} because the Philippine housemates were not aware that Bruce will trade places with Tina, a foreigner, until Tina entered the Philippine House. On the other hand, the Slovenian housemates already knew of the Swap and prepared {{for this event}}, which {{was expected to be}} a cultural <b>exchange</b> of <b>sorts</b> for both sides. The swap took place starting Day 36 (April 21) and ended on Day 41 (April 26), when the swapped housemates returned to their respective Houses.|$|R
40|$|AbstractA pointed {{partition}} of n {{is a pair}} (λ,v), where λ is a {{partition of}} n and v is a cell in its Ferrers diagram. In this paper, an involution on pointed <b>partitions</b> of n <b>exchanging</b> hook length and part length is constructed. This gives a bijective proof of a recent result of Bessenrodt and Han (2009) [4]...|$|R
40|$|Preparations of {{poliovirus}} I and echovirus 7, purified by {{density gradient}} centrifugation, liquid-phase <b>partition,</b> and anion <b>exchange</b> (diethylaminoethyl) chromatography, {{have been shown}} to evoke high antibody levels of substantial specificity in the complement-fixation assay. Certain practical aspects of the three purification methods are discussed. These results argue for the use of purified viral antigens, particularly in view of the simplicity of the purification methods now available...|$|R
40|$|Introduction to {{momentum}} and scalar transport in environmental flows, with emphasis given to river and lake systems. Derivation and {{solutions to the}} differential form of mass conservation equations. Topics include: molecular and turbulent diffusion, boundary layers, dissolution, phase <b>partitioning,</b> bed-water <b>exchange,</b> air-water exchange, settling and coagulation, buoyancy-driven flows, and stratification in lakes. From the course home page: Course Description This class serves as an introduction to mass transport in environmental flows, with emphasis given to river and lake systems. The class will cover the derivation and solutions to the differential form of mass conservation equations. Class topics to be covered will include: molecular and turbulent diffusion, boundary layers, dissolution, bed-water exchange, air-water exchange and particle transport...|$|R
40|$|This {{volume of}} the series “Advances in Parallel Computing” {{contains}} {{the proceedings of the}} International Conference on Parallel Programming – ParCo 2013 – held from 10 to 13 September 2013 in Garching, Germany. The conference was hosted by the Technische Universität München (Department of Informatics) and the Leibniz Supercomputing Centre. The present paper studies two adaptive mesh refinement (AMR) codes whose grids rely on recursive subdivison in combination with space-filling curves (SFCs). A non-overlapping domain decomposition based upon these SFCs yields several well-known advantageous properties with respect to communication demands, balancing, and partition connectivity. However, the administration of the meta data, i. e. to track which <b>partitions</b> <b>exchange</b> data in which cardinality, is nontrivial due to the SFC’s fractal meandering and the dynamic adaptivity. We introduce an analysed tree grammar for the meta data that restricts it without loss of information hierarchically along the subdivision tree and applies run length encoding. Hence, its meta data memory footprint is very small, and it can be computed and maintained on-the-fly even for permanently changing grids. It facilitates a forkjoin pattern for shared data parallelism. And it facilitates replicated data parallelism tackling latency and bandwidth constraints respectively due to communication in the background and reduces memory requirements by avoiding adjacency information stored per element. We demonstrate this at hands of shared and distributed parallelized domain decompositions. This work was supported by the German Research Foundation (DFG) as part of the Transregional Collaborative Research Centre “Invasive Computing (SFB/TR 89). It is partially based on work supported by Award No. UK-c 0020, made by the King Abdullah University of Science and Technology (KAUST) ...|$|R
3000|$|... is {{computed}} employing Algorithm 2. Analyzing the Algorithm 2, it is trivial to {{find out}} that the image similarity operation (step 2) takes time O(n), where n is the number of images in the data set. Step 3 is O(n logn) – time for sorting the similarity values of n images. However, the image similarity operation takes significantly larger computational time than value comparisons and <b>exchanges</b> of <b>sorting</b> algorithms, even for considered unthinkably large image data sets today (containing several million or more elements). Thus, we consider as the main operation of Algorithm 2, i.e. the time unit, the number of operations performed by the similarity query process that increases in O(n).|$|R
40|$|The {{notion of}} network {{structure}} for social relations dates back half a century. Nowadays people form social networks offline {{as well as}} online. At an online community people are connected trough information <b>exchange</b> of <b>sorts.</b> Interest groups form often forums to aid each other and discuss things. Programmers are no exception and a question and answer site called Stack Overflow has been up and running since 2008. Our focus is to find patterns of how people interact on this online community {{and see if we}} can find expert users. We find 4 different ways to categorize experts, which result in different rankings. We also investigate how expertise is divided among topics, and find some overlap with the global ranking. ...|$|R
50|$|Shellsort, {{also known}} as Shell sort or Shell's method, is an in-place {{comparison}} sort. It {{can be seen as}} either a generalization of <b>sorting</b> by <b>exchange</b> (bubble <b>sort)</b> or sorting by insertion (insertion sort). The method starts by sorting pairs of elements far apart from each other, then progressively reducing the gap between elements to be compared. Starting with far apart elements, it can move some out-of-place elements into position faster than a simple nearest neighbor exchange. Donald Shell published the first version of this sort in 1959. The running time of Shellsort is heavily dependent on the gap sequence it uses. For many practical variants, determining their time complexity remains an open problem.|$|R
40|$|A lot of {{performance}} indicators {{for the evaluation}} of manufacturing and logistics systems {{can be found in the}} literature, industrial instructions as well as in several standards. For the simulation experts the difficulties start when they have to deliver precise values, because a lot {{of performance}} indicators are not defined clearly enough or have different meaning, depending of industrial domain. Therefore an open discussion platform is necessary where simulation experts as well as the industrial users collect, <b>exchange</b> and <b>sort</b> their views and experiences. To facilitate this discussion we set up a wiki of terms and performance indicators which can be used to start the process of collecting and fostering terms and their definitions in the area of performance indicators...|$|R
40|$|All {{types of}} media {{influence}} our opinions,feelings, and mood. We consume {{it because it}} reinforces our behavior and we identify with roles and values in it. It educates, informs, and entertains us through both escapism and emo-tional release. In short, it shapes our lives. Today, however, we’re bombarded by media as we surround ourselves with tools that let us consume as well as produce and <b>exchange</b> any <b>sort</b> of medium, at nearly any time and place. Much of this media is pre-prepared and pushed toward us, such as local information via PDAs and mobile phones, high-definition advertise-ment clips, and music that’s so common that we realize its permanence only once it’s absent. And at home, we really enter the game wit...|$|R
5000|$|Other {{measures}} of (pre-)sortedness include the {{minimum number of}} elements that can be deleted from the sequence to yield a fully sorted sequence, the number and lengths of sorted [...] "runs" [...] within the sequence, the Spearman footrule (sum of distances of each element from its sorted position), and the smallest number of <b>exchanges</b> needed to <b>sort</b> the sequence. Standard comparison sorting algorithms {{can be adapted to}} compute the inversion number in time [...]|$|R
40|$|In {{a seminal}} paper (An ecient {{heuristic}} procedure for partitioning graphs, Bell System Technical Journal, 49 (1970), pp. 291 - 307), Kernighan and Lin propose a pair exchange algorithm for approximating {{the solution to}} min-cut graph partitioning problems. In their algorithm, a vertex from one set in the current <b>partition</b> is <b>exchanged</b> with a vertex in the other set to reduce {{the sum of the}} weights of cut edges. The exchanges continue until the total weight of the cut edges is no longer reduced. In this paper, we consider a block exchange algorithm in which a group of vertices from one set is exchanged with a group of vertices from the other set in order to minimize the sum of the weights of cut edges. An optimal choice for the exchanged vertices is the solution to a quadratic programming problem...|$|R
30|$|However, the {{expansion}} of the range of educational opportunities has increasingly required teachers to teach learners with various levels of background knowledge. Depending on learners’ prior knowledge, a teacher would have to adjust the content or intent of instructions, such as the point where the learners should focus on the algorithm or program, or the abstraction or generalization degree of instruction. Almost all of the existing systems disallow these variations of the teacher’s intent and visualize the world of the target domain with a fixed visualization policy. Moreover, although existing systems tend to focus on reproducing the entire flow of algorithm behavior, knowledge related to the algorithm is also important in algorithm education. For example, properties of an algorithm such as the number of comparisons or <b>exchanges</b> in <b>sorting</b> tasks are an important learning target.|$|R
40|$|This diploma thesis {{deals with}} {{the topic of the}} {{accounting}} solution on bills of exchange. It solves this topic both {{from the point of view}} of the Czech accounting and the International accounting represented in IFRS. The first part concentrates on the legal aspects of the bills of <b>exchange,</b> like <b>sorts</b> of the bills of exchange, their requirements, expression of the amount. The second part {{deals with the}} development of the Czech accounting rules related to bills of exchange from 1993 till the present time. The source for this are the Czech accounting manuals, which were valid between the years 1993 - 2003. The thesis documents the development of their comprehension and their accounting solution. The third part concentrates on the current accounting rules represented in Czech accounting standards (CAS) and International Financial Reporting Standards...|$|R
40|$|We {{test the}} {{hypothesis}} that the dispositon effect is a behavioral bias that drives stock price momentum. Using data from a large Shanghai brokerage firm, we estimate the magnitude of the disposition effect for a sample of 13, 460 Chinese investors and firms. We find that a large majority of Chinese investors exhibit the disposition effect. An investor’s disposition coefficient estimated with one year of data forecasts that investor’s disposition effect and investment per-formance in subsequent years. More disposition-prone investors tend to trade less frequently and in smaller sizes than other investors. While past returns do not forecast future returns in our relatively short sample of Shanghai Stock <b>Exchange</b> stocks, <b>sorting</b> stocks by the net unrealized gains or losses of disposition-prone investors generates a statistically significant win-ner/loser spread of seven percent per year. Our results suggest that disposition does indeed drive momentum...|$|R
40|$|International audienceIn recent years, {{metal oxides}} such as titania have been commercially {{available}} as chromatographic beds that can potentially {{be used to}} achieve novel separations of polar compounds. For example beta blockers, which are more often encountered in environmental sciences, have {{a wide range of}} polarity, and their basic character leads to difficult sample treatment and separation on conventional silica-based sorbents. The contribution of titania to the selective analysis of nine beta blockers was evaluated in terms of retention mechanisms observed in hydrophilic interaction LC using acetonitrile/water mobile phases with various additives. The mobile phase additives enabled to control the beta blocker charge as well as the titania surface charge. Depending on their respective ionic state, various retention mechanisms were identified at low water contents (< 40 %), including mainly adsorption mixed with hydrophilic interaction LC <b>partition,</b> ion <b>exchange</b> and ion exclusion. An unexpected retention was also observed for high water content and high pH, changing the selectivity of the support...|$|R
40|$|The {{availability}} of large and complex data sets has shifted {{the focus of}} pattern recognition towards developing techniques that can efficiently handle these types of data sets. For example, Multiple Classifier Systems claim their ability in reducing the error and complexity of classification by partitioning the data space and combining classifiers predictions. However, {{it is not an}} easy task to generate several partitions and moreover to use them in an efficient manner. Another difficult aspect is related to the exchange of training data in different formats among systems to combine classifiers of different and heterogeneous systems. This paper presents a model and structure of training samples based on XML (eXtensible Markup Language) to facilitate the <b>partitioning</b> and <b>exchange</b> among different image classification system. The main contribution is to apply the flexibility of XML that addresses interoperability and communication among heterogeneous systems in partitioning data sets as well as to facilitate interchange of such sets among image processing and pattern recognition systems. Pages: 13 - 3...|$|R
50|$|Further {{expansion}} of the sugar industry faced serious deeprooted obstacles. For example, the production cost of Haitian sugar was three {{times more than the}} world price in the 1980s. Shifts in the world sugar market, caused mainly by the international substitution of corn-based fructose for sugarcane, exerted further pressure on Haitian producers. One result of this situation was the practice of importing sugar, which was then reexported to the United States under the Haitian sugar quota. Reductions in Haiti's quota during the 1980s, however, limited <b>exchanges</b> of this <b>sort.</b>|$|R
40|$|Abstract. Using {{personal}} data of users from profile and retrieve {{the results that}} are much like the user’s preferences. We use xml, it power to represent the quality style of information and it'll <b>exchange</b> this <b>sort</b> of information. We tend {{to concentrate on the}} personalization techniques that are terribly effective to look keyword victimization it that may recommend question to users and generate some queries here. once we produce users profile, we tend to build profile of user’s interest on server, distinguishing the user’s interest supported the previous web search or previously websites visited by users. distinguishing the user’s interest on the premise of his/her education and background of users so given result search quick and simple to indicate the results. we tend to are use feedback based mostly personalization so system are re-ranking the search result supported product average rating/feedback keep in xml. Company and class wise feedback are half-tracked in info moreover as in xml document...|$|R
