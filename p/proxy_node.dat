25|55|Public
40|$|A new protocol, named Proxy-Assisted Routing for {{efficient}} data Transmission (PART), {{that uses}} a cross layer approach is proposed to route packets to a destination efficiently in Mobile Ad Hoc Networks (MANETs). PART limits the number of control packets {{with the aid of}} proxy nodes, adapts to route failures and avoids congestion quickly by broadcasting routing information within a predefined zone. It utilizes the address information of the Medium Access Control (MAC) layer to transmit unicast control messages and limit the broadcast zone. Only mobile nodes that are in this zone are allowed to broadcast routing information to reduce the control overhead and packet collision. A middle node is selected to perform proxy duty for a TCP connection. The responsibility of a <b>proxy</b> <b>node</b> is to reply to a new route request from a source node and to request a new route to the destination when there is a link break. In order to reduce the extra routing overhead of assigning a <b>proxy</b> <b>node,</b> a unicast route reply packet is modified by adding a proxy address and a proxy hop count field in the packet header. A destination node determines whether a <b>proxy</b> <b>node</b> is needed based on the hop count. If the hop count to the source node is longer than a pre-defined value, it initiates a procedure to appoint a <b>proxy</b> <b>node.</b> Otherwise, a <b>proxy</b> <b>node</b> is not appointed. Whenever a route failure occurs between a source and <b>proxy</b> <b>node,</b> the source node takes the responsibility of searching for a new route to the <b>proxy</b> <b>node.</b> The <b>proxy</b> <b>node</b> also does the same thing, as long as the <b>proxy</b> <b>node</b> is available. In order to ensure the reliability of TCP, a <b>proxy</b> <b>node</b> acknowledgement (PACK) is introduced to check the correctness of data packets and informing the source node of missing packets by sending an acknowledgement to the source node in advance. By doing so, the source node does not have to wait for an end-to-end acknowledgement from a destination, resulting in increased throughput and decreased delay. For the purpose of performance analysis, an analytical framework is proposed to compare the robustness and efficiency of PART to other routing protocols. The comparisons were done across the mobility models that are intended for MANETs. The simulation results show that PART improves the overall network performance in terms of throughput, control overhead, delay, packet losses and packet collisions at the MAC layer. Among the contributions of this research are to limit the broadcast region by using a <b>proxy</b> <b>node,</b> to repair broken routes between source-proxy and proxy-destination nodes, and the use of local acknowledgement from a proxy to a source to ensure the reliability and correctness of TCP packets...|$|E
30|$|There are {{two kinds}} of nodes in the entire OBC network, validating peer and non-validation peer. The former is a full-featured node and forms a fully {{connected}} topology. The latter is a <b>proxy</b> <b>node</b> and is attached to a neighboring authentication node. An application program can be connected to a verification node or a non-authentication node.|$|E
40|$|We {{propose a}} secure Internet Protocol version 6 (IPv 6) address {{configuration}} scheme for a Mobile Ad Hoc Network. The scheme presents the architecture for a Mobile Ad Hoc Network and the hierarchical IPv 6 address structure. In the architecture, a new node can acquire a unique IPv 6 address from a <b>proxy</b> <b>node</b> within one-hop scope without performing a duplicate address detection process, and the IP addresses occupied by failed nodes can be recovered automatically for reuse. On {{the basis of}} the hierarchical IPv 6 address structure, each <b>proxy</b> <b>node</b> can acquire a unique address scope for assignment and assign a unique IP address for new nodes, so the address configuration task is distributed around proxy nodes. In addition, the transmission scope of the control packets for address configuration is controlled within one-hop scope, so the address configuration cost is reduced, and the delay is shortened. The security of the proposed address configuration scheme is achieved through authentication. The paper analyzes the performance parameters of the proposed scheme and the existing schemes, and the analytical results show that the address configuration cost of the proposed scheme is lower and the delay is shorter...|$|E
40|$|Many {{anonymous}} communication (AC) networks rely on routing traffic through <b>proxy</b> <b>nodes</b> to obfuscate the originator of the traffic. Without an accountability mechanism, exit <b>proxy</b> <b>nodes</b> risk sanctions by {{law enforcement}} if users commit illegal actions through the AC network. We present BackRef, a generic mechanism for AC networks that provides practical repudiation for the <b>proxy</b> <b>nodes</b> by tracing back the selected outbound traffic to the predecessor node (but not in the forward direction) through a cryptographically verifiable chain. It also provides an option for full (or partial) traceability back to the entry node or even to the corresponding user when all intermediate nodes are cooperating. Moreover, to maintain a good balance between anonymity and accountability, the protocol incorporates whitelist directories at exit <b>proxy</b> <b>nodes.</b> BackRef offers improved deployability over the related work, and introduces a novel concept of pseudonymous signatures that may be of independent interest. We exemplify the utility of BackRef by integrating it into the onion routing (OR) protocol, and examine its deployability by considering several system-level aspects. We also present the security definitions for the BackRef system (namely, anonymity, backward traceability, no forward traceability, and no false accusation) and conduct a formal security analysis of the OR protocol with BackRef using ProVerif, an automated cryptographic protocol verifier, establishing the aforementioned security properties against a strong adversarial model...|$|R
50|$|Because the Great Firewall blocks {{destination}} IP {{addresses and}} domain names and inspects the data being sent or received, a basic censorship circumvention {{strategy is to}} use <b>proxy</b> <b>nodes</b> and encrypt the data. Most circumvention tools combine these two mechanisms.|$|R
40|$|The {{need for}} {{certificate}} management in mobile ad hoc networks (MANET) is the background for this report. A prototype {{implementation of a}} distributed certificate validation service is presented and evaluated. The proposed design {{is based on an}} overlay network of <b>proxy</b> <b>nodes</b> offering certificate validation over the XKMS protocol. The <b>proxy</b> <b>nodes</b> employ cooperative caching in order to offer certificate validation even when the central validation authority is out of reach. The cache will also contribute to lower network traffic in the area around the validation authority. The conclusion from the experimental evaluation shows that the availability of the validation service does increase {{as a result of the}} overlay proxy network, but is quite dependent on the mobility scenario in use. The observed traffic around the validation authority is reduced with a considerable margin...|$|R
40|$|Many {{computing}} related tasks today {{require a}} lot of hardware infrastructure to fulfill requirements and expectations of its users. Physical infrastructure used to serve systems are often organized in several geographically separate computer clusters. In this thesis, we have investigated and developed a working prototype which enables nodes in a PCI Express based computer cluster to connect with, and transfer data a node in remote PCI Express based cluster. Central to our design is the cluster gateway, or <b>proxy</b> <b>node.</b> Each cluster consists of endpoint nodes and one <b>proxy</b> <b>node.</b> The proxy acts as a gateway for incoming and outgoing data traffic to and from nodes in the local cluster. Every data transfer is relayed via the proxies which carries the responsibility of forwarding outgoing data to a destination remote cluster, and forwarding incoming data to the recipient node. The system is implemented on PCI Express based clusters using Ethernet as the medium connecting remote clusters together. The cluster interconnect technology enables nodes to connect to memory segments in a node within the cluster and perform read and write operations on it using either programmed I/O or Remote Direct Memory Access. We have implemented functionality intended to supplement an already existing API, {{that can be used to}} execute inter-cluster data transmissions...|$|E
40|$|Abstract. Serialisation {{can occur}} when many {{simultaneous}} accesses {{are made to}} a single node in a distributed shared-memory multiprocessor. In this paper we investigate routing read requests via an intermediate <b>proxy</b> <b>node</b> (where combining is used to reduce contention) {{in the presence of}} nite message bu ers. We present a reactive approach, which invokes proxying only when contention occurs, and does not require the programmer or compiler to mark widely-shared data. Simulation results show that the hot-spot contention which occurs in pathological examples can be dramatically reduced, while performance on well-behaved applications is una ected. ...|$|E
30|$|Partial Cache: It {{is also a}} chunk based caching {{policy in}} NDN. In partial cache policy, the {{requested}} content is divided into several data chunks and transmitted along the routing path, and when a user requests a multimedia named content published by a provider, the multimedia content can be partially cached in an intermediate node or a <b>proxy</b> <b>node.</b> That is to say, each neighboring node partially caches different chunks of named multimedia content. In fact, the grouped neighboring NDN nodes will keep a whole cache of named multimedia content in order to serve the next same content request from the neighboring region.|$|E
40|$|IEEE International Conference on Trust, Security and Privacy in Computing and Communications, Tianjin, August 23 - 26, 2016 Deep packet {{inspection}} (DPI) {{is important}} for network security. In this paper, we consider a software-defined network where several DPI <b>proxy</b> <b>nodes</b> are available for serving flows from ingress switches. These DPI <b>proxy</b> <b>nodes</b> can be implemented in either software or hardware. We study an integrated proxy allocation and routing determining problem {{with the objective of}} minimizing the total delay of flows from ingress switches to DPI proxies. This problem is formulated as an integer linear programming problem that is NP-hard in general. To solve this problem, we design a 2 -phase algorithm that can quickly select proxy and find routing paths for incoming flows. Finally, extensive simulations are conducted to evaluate the performance of our proposed algorithm. Some useful parameter setting insights are obtained. Department of Computing 2016 - 2017 > Academic research: refereed > Refereed conference paperbcw...|$|R
3000|$|... propagates {{through the}} network and reaches the <b>proxy</b> source <b>nodes</b> to {{indicate}} that the network is ready for CRTI-M.|$|R
40|$|We propose Proxy Certificate Trust List (PCTL) to {{efficiently}} record delegation traces for grid computing. Our security solution {{based on}} PCTL provides functions as follows: (1) On-demand inquiries about real time delegation information of grid computing underway; (2) Lightweight mutual authentication that is beneficial for <b>proxy</b> <b>nodes</b> with limited computation power as wireless devices in mobile computing; (3) A kind of revocation mechanism for proxy certificates {{to improve the}} security and availability of grid computing...|$|R
30|$|Our TCP {{acceleration}} approach breaks TCP end-to-end design {{philosophy and}} creates multiple short TCP connections {{as many as}} number of hops in the Urban-X. Split TCP connections by the TCP-ACCs can lead to higher overall throughput by reducing the round-trip time. In addition, the TCP-ACC can relieve {{the rest of the}} path from having to carry end-to-end retransmissions as well. Previously, multiple TCP proxies along the route for the wireless ad hoc networks were considered in order to improve throughput in [22 – 24]. The TCP split scheme was originally designed to separate the different mediums of wire and wireless in wireless cellular networks. For the multi-hop ad hoc networks (MANETs), Kopparty et al. [22] divided an original long route into a sequence of short TCP connections by locating TCP proxies every three nodes along the original route to improve the throughput of end-to-end TCP connection. Ouyang et al. [25] proposed more efficient TCP proxy placement based on link status information since processing packets at the higher layer by proxies causes overhead. For this, cross-layer approach between network and transport layers is considered to find optimal nodes to place the TCP proxy. In detail, source routing protocols collect queued packets and retransmission counts of links along the route and select TCP proxy nodes. Then, a sender piggybacks a TCP <b>proxy</b> <b>node</b> list on TCP SYN, and each <b>proxy</b> <b>node</b> responses SYN-ACK to establish segmented TCP connection.|$|E
30|$|Typical {{methodology}} on load forecasting are BP {{neural network}} algorithm (Xiao et al. 2009) and the prediction algorithm based on filtering theory (Xu et al. 2000). However, {{it is very}} difficult to establish a common prediction method for all applications. Due to the differences of nature, different applications need corresponding and appropriate prediction methods for load predictions. Taking the virtual cluster OpenStack as the study object, this paper uses <b>Proxy</b> <b>Node</b> to monitor the load of Cloud computing nodes regularly, and puts forward that OpenStack cloud load prediction method of RBF neural networks combined with AHP and hybrid hierarchy genetic training. Simulation experiment results have shown that the prediction accuracy of the method is relatively good and it is feasible to provide services for the load balancing algorithm.|$|E
40|$|AbstractAd hoc {{networks}} are an exciting approach to network design. Not relying on complex and expensive infrastructure, which {{is required by}} their counterparts, ad hoc network can operate in scenarios where traditional networks fails such as disaster relief and military applications. Mobile ad hoc network is a self-organizing and self-configuring network in which, mobile host moved freely, due to this disconnection is often occurred between mobile hosts. In mobile ad hoc network location of mobile nodes are frequently changed. Location management is a crucial issue in Manet due to dynamic topologies. In this paper we propose the implementation of new location management scheme using quadrant routing scheme. In this strategy we determine parameters of node e. g. x-coordinate, y-coordinate, quadrant number, distance and angle from <b>proxy</b> <b>node...</b>|$|E
40|$|Abstract—Notwithstanding IP anycast’s {{introduction}} in Internet standards {{dates back}} to 1993 and its more recent adoption in IPv 6 standards, its use in production environments is limited to date. This is mainly because native IP anycast lacks routing scalability and does not support session-based communications, thereby limiting its applicability to single request-response services such as DNS. For this reason, we propose a transparent anycast overlay architecture that retains the strengths of native anycast and neutralizes above-mentioned limitations. The resulting proxy infrastructure unleashes the power of anycast by opening up new opportunities for transparent distributed service provisioning. Taking into account user demands, available resources, network overhead and anycast infrastructure costs, we provide nearoptimal heuristics for the placement of <b>proxy</b> <b>nodes</b> and dimensioning the infrastructure in large networks. We show that even modest overlay infrastructures, consisting of {{a small number of}} proxy routers, provide an effective stateful anycast solution where the detour via the proxy routers is negligible in terms of extra network load. Furthermore, simulation results illustrate that server state aggregation in the <b>proxy</b> <b>nodes</b> lessens control plane overhead, which contributes significantly to service robustness. I...|$|R
30|$|We also {{implemented}} a proof-of-concept prototype of our our wide area sensor and actuator network and tested the prototype on real networks and hardware. In these measurements, {{we focused on}} observing the end-to-end communication delay between two sensor and actuator devices. Among other things, we discovered that the dominant part of the end-to-end delay associated with one device accessing a resource of another device is communication between the <b>proxy</b> <b>nodes</b> across the overlay. We aim to further analyze the performance of our proof-of-concept prototype in future study.|$|R
3000|$|... c. In the TCP Reno, less {{frequent}} switching leads to decrease throughput since a node cannot switch fast transmission channels between a forward and a reverse node for data or acknowledgement which causes long RTT or RTO. However, the TCP-ACC does not suffer from such long RTT due to short sub-TCP path. Although long switching interval does not degrade throughput {{with the long}} RTT, it can increase packet buffering in intermediate TCP <b>proxy</b> <b>nodes,</b> {{which may not be}} a preferable situation for real-time applications.|$|R
40|$|This paper {{presents}} an analytical model of an optical burst switching  ring network {{capable of handling}} WDM traffic intelligently. The network protocol and efficient architecture increases the data transport capability of a congested network. Here we propose an architecture to ease the traffic congestion in a ring network. The backbone of the proposed model {{is the use of}} a <b>proxy</b> <b>node</b> which is connected to a particular number of nodes, depending upon the traffic, then diverting their traffic and thereby increasing throughput. A probabilistic model for the proposed network architecture is developed employing packet queuing control to estimate the average waiting time of packets in the buffer and the average number of packets in the buffer for different incoming traffic arrival rate...|$|E
40|$|Effective {{management}} of battlefield networks requires a hierarchical network management architecture wherein managers can dyanmically delegate management tasks to intermediate managers. In this report we describe a novel paradigm called the spreadsheet paradigm which extends the traditional flat SNMP management model to a hierarchical architecture. We present a spreadsheet MIB, language, and event model that {{is located at}} a <b>proxy</b> <b>node</b> acting {{in the role of}} an intermediate manager and controllable by a manager. An important feature of the spreadsheet-based proxy is that it permits managers to configure dynamic MIB views based on application requirements that can be quite different from the underlying MIB structures at the agents. The spreadsheet-based proxy architecture presents an easy to use and comprehend abstraction and interface to extend a standard management framework. Keywords: Network Management, Hierarchical Management, Proxy Agents, Spreadsheet Paradigm, SNMP. INTRODUCTION [...] ...|$|E
40|$|Serialisation {{can occur}} when many {{simultaneous}} accesses {{are made to}} a single node in a distributed shared-memory multiprocessor. In this paper we investigate routing read requests via an intermediate <b>proxy</b> <b>node</b> (where combining is used to reduce contention) {{in the presence of}} finite message buffers. We present a reactive approach, which invokes proxying only when contention occurs, and does not require the programmer or compiler to mark widely-shared data. Simulation results show that the hot-spot contention which occurs in pathological examples can be dramatically reduced, while performance on well-behaved applications is unaffected. 1 Introduction Unpredictable performance anomalies have hampered the acceptance of cachecoherent non-uniform memory access (ccnuma) architectures. Our aim is to improve performance in certain pathological cases, without reducing performance on well-behaved applications, by reducing the bottlenecks associated with widely-shared data. This paper moves on [...] ...|$|E
30|$|In MANETs, {{it is very}} {{important}} that DCA schemes be self-initialized and the system authority exists only at the beginning of the network startup. So, a number of schemes have been proposed that support this property, for example, Ge and Lam [14] present a self-initialized DCA or SDCA that combine the advantages of the DCA and certificate chain schemes. They claim that this scheme addresses the scalability of certificate chain and has low cost, high availability, and security. In this scheme, the participating nodes initialize CA with the self-initializing protocol (SIP). With this protocol, the fundamental parameters of the DCA, such as the total number of DCA members, threshold value, and list of DCA members, will be negotiated and agreed among a certain number of nodes. With these parameters, the DCA is then constructed collaboratively by the involving nodes and without a trusted dealer. Another scheme for self-initialized DCA in ad hoc network is introduced by Kang et al. [15]. Their scheme uses proxy and threshold signatures. In this scheme, chair nodes that can distribute partial proxy keys for <b>proxy</b> <b>nodes</b> are authenticated by the system authority. In addition, <b>proxy</b> <b>nodes</b> that can issue certificates for other nodes are authenticated and initialized by the system authority or the chair nodes.|$|R
40|$|In {{wireless}} sensor networks (WSNs) {{contextual information}} such as the information regarding whether, when, and where the data is collected cannot be protected using only traditional measures (e. g., encryption). Contextual information can be protected against global eavesdroppers by periodic packet transmission combined with dummy traffic filtering at <b>proxy</b> <b>nodes.</b> In this paper, through a Linear Programming (LP) framework, we analyze lifetime limits of WSNs preserving event-unobservability with different proxy assignment methodologies. We show that to maximize the network lifetime data flow should pass through multiple proxies that are organized as a general directed graph {{rather than as a}} tree...|$|R
40|$|We {{devise a}} scheme which can provide {{reliable}} transport services in sensor networks and give an algorithm which minimizes the energy {{use of our}} scheme. We use a distributed sink where information arrives at the sink via multiple <b>proxy</b> <b>nodes,</b> called "prongs" in this paper. The sender node uses Forward Error Correction (FEC) erasure coding to encode each packet into multiple fragments and transmits the fragments {{to each of the}} prongs over a path which is disjoint from the paths to the other prongs. The erasure coding allows the sink to reconstruct the original packet even if some of the fragments are lost...|$|R
40|$|Abstract. TCP {{performance}} degrades {{with increasing}} {{round trip time}} (rtt) due to longer slow start periods and slower rate of increase of the congestion window. The proposed, PTS (proxy transport service) is an active network based service, that can improve the end-to-end performance of TCP connections with large rtt’s. PTS also reduces the response time of TCP to congestion {{and can be used}} by other active services. A PTS session consists of two separate TCP connections, one between the source host and a designated intermediate node (the PTS node), and another between the PTS node and the destination host. PTS complements TCP without compromising reliability. Simulation studies show the effect of PTS node location, buffer size and node service time on the performance of PTS. Performance can be significantly improved by deploying an interactive distributed service that allows the host to choose the <b>proxy</b> <b>node.</b> ...|$|E
40|$|The Diameter {{protocol}} {{includes a}} capability for message redirection, controlled by an application-independent "redirect agent". In some circumstances, an operator {{may wish to}} redirect messages to an alternate domain without specifying individual hosts. This document specifies an application-specific mechanism by which a Diameter server or <b>proxy</b> (<b>node)</b> can perform such a redirection when the Straightforward-Naming Authority Pointer (S-NAPTR) is not used for dynamic peer discovery. A node performing this new function {{is referred to as}} a "Realm-based Redirect Server". This memo updates Sections 6. 13 and 6. 14 of RFC 6733 with respect to the usage of the Redirect-Host-Usage and Redirect-Max-Cache-Time Attribute-Value Pairs (AVPs). Status of This Memo This is an Internet Standards Track document. This document {{is a product of the}} Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by th...|$|E
40|$|The {{existing}} SNMP management framework {{does not}} effectively support a hierarchical management strategy. Further, existing MIBs have a static structure {{and do not}} permit dynamic user organization of management information. This paper presents a spreadsheet paradigm that allows users to dynamically configure management information and set up control at an intermediate manager. This paradigm augments the basic SNMP framework by providing value added functionality at a <b>proxy</b> <b>node</b> {{so that it can}} function as an intermediate manager. The design of a proxy MIB, a scripting language, and event model that form {{an integral part of the}} paradigm are presented with future research directions. Keywords: Spreadsheet Paradigm, Scripting Language, Event Model, SNMP, Proxy Agent, Intermediate Manager 1 INTRODUCTION A hierarchical management strategy is an effective means of managing the large and complex internetworks that are in use today. However, the most popular management framework, the SNMP frame [...] ...|$|E
30|$|<b>Proxy</b> <b>Nodes</b> (PNs) {{are located}} {{at the edge of}} a WSN. In the rest of this section, we will assume that the WSN is a 6 LoWPAN, {{although}} legacy LNs can also be supported as described in Section 5.2. The PNs act as gateways between the 6 LoWPAN and the Internet. Each 6 LoWPAN is assumed to have its own domain in CoAP URIs to distinguish it from other 6 LoWPANs. PNs use IEEE 802.15. 4 on the 6 LoWPAN side and connect to the Internet using a cellular radio interface. Like WNs, also PNs act as RELOAD peers or clients and thus participate in the RELOAD overlay. The difference between WNs and PNs is that since PNs have an interface towards a 6 LoWPAN, they can connect LNs to the RELOAD overlay network. Since a PN sits at the boundary of the 6 LoWPAN and the Internet, it acts as a 6 LoWPAN border router (6 LBR) [24]. The PNs also act as CoAP endpoints and as CoAP <b>proxies</b> for CoAP <b>nodes</b> in the 6 LoWPAN.|$|R
40|$|Real-time {{multimedia}} transport has stringent bandwidth, delay, {{and loss}} requirements. It {{is a great}} challenge to support such applications in wireless ad hoc networks, which are characterized by frequent link failures and congestion. Using multiple paths in parallel for a real-time multimedia session (called multipath transport) provides a new degree of freedom in designing robust multimedia transport systems. In this article, we describe a novel schema for multipath video transport over wireless ad hoc networks. The main idea of this work is based on transferring video through two disjoint paths using AOMDV. In each of these paths we use video <b>proxy</b> <b>nodes</b> as video caches. The duty of these nodes is to receiving and recognizing video streams, buffering of favorite streams and if possible managing errors locally...|$|R
40|$|Abstract. We {{introduce}} Xeek, {{a method}} for managing XML documents using relational databases. Most previous proposals in which the XPath axes are evaluated using only the pre- and postorder numbers of the nodes have quite convincingly been shown to suffer from scalability problems. Thus, Xeek stores some redundant structural information {{which can be used}} speed up XPath evaluation even when a large set of context nodes is used. Our idea is to select a set of inner nodes to act as <b>proxy</b> <b>nodes</b> and store the ancestor information only for the proxies. To demonstrate the effectiveness of our method, we present the results of our experiments in which Xeek outperformed the previous methods based on relational databases as well as an established commercial XML database product. ...|$|R
40|$|Security {{in mobile}} adhoc {{networks}} {{is difficult to}} achieve, notably because of the vulnerability of wireless links, the limited physical protection of nodes, the dynamically changing topology, {{the absence of a}} certification authority, and the lack of a centralized monitoring or management point. The major difficulty in adhoc network occurs when a new node join network but not having any trust based relation with other nodes of network. We have proposed a new mechanism that provides trust conscious secure route data communication between the Mobile nodes. In this mechanism we will dynamically increase the trust from (Low to High) between the mobile nodes using <b>proxy</b> <b>node.</b> When mobile node needs secure data communication, it will generate a dynamic secret session key with the desired destination mobile node directly or via proxy mobile nodes. These dynamic secret session keys are generated using message digest and Diffie-Hellman protocol...|$|E
30|$|With the {{extensive}} applications of cloud computing, open-source projects of cloud computing platform construction such as Hadoop, Eucalyptus, CloudStack, and OpenStack are also increasing (Peng et al. 2009). For now, OpenStack (Pepple 2011) {{is one of}} the most popular open source projects (Sefraoui et al. 2012). Many large companies at home and abroad such as Intel, IBM, Cisco, and HP regard OpenStack as promising open source project. The main reasons include its fully open source, good design and high community vitality. OpenStack Swift (2012) is a storage system aiming at objects which have multi-tenant, powerful extensibility, redundancy and persistency, which can store large amounts of unstructured data through HTTP-based RESTful APIs at a low cost, and also has the advantage of no single point of failure. Using OpenStack Swift to construct cloud storage platform applications under production environments needs a load balancer to distribute access requests to <b>Proxy</b> <b>Node</b> (Pepple 2011). Therefore, load balancing is still needed for optimization.|$|E
40|$|Abstract – A {{method for}} federating {{multiple}} networkvirtualization platforms by creating and managing slices (virtual networks) is proposed. A cross-domain slice can be created, deleted, or modified {{by sending a}} slice specification to the domain controller (network manager) of one domain. The specification is then propagated to other domains. Two challenges were addressed while this method was developed. The first challenge is to enable federation among multiple domains that do not support federation functions by only adding a few components without modification of the existing networkvirtualization-platform architecture. A domain-dependent specification of a slice, containing a pseudo virtual node that encloses {{a part of the}} slice specification in the other domains, is used, and this part is handled by a <b>proxy</b> <b>node</b> that represents another domain and a control component that implements a federation API to create a cross-domain slice. The second challenge is to enable manageable non-IP (arbitrary-format) data communication on a cross-domain slice. For an interdomain communication, underlay VLAN parameters including MAC addresses are negotiated in advance and data packets on a slice are tunneled between gateways in these domains. The proposed federation method was implemented on two networkvirtualization platforms, federation between two homogeneous domains was successfully demonstrated, federation performance was measured, and several issues on functional restrictions and implementation difficulty were found. I...|$|E
40|$|In this paper, {{we propose}} a novel P 2 P {{cooperative}} proxy cache system using an individual-based model. We borrow the idea from an ecological {{system as well}} as economic systems to manage the cooperative proxies through data and information exchange among individual proxies. The data flow among <b>proxy</b> <b>nodes</b> creates artificial life for the cooperative proxies. The proxy servers with artificial life can automatically configure themselves into a Virtual Proxy Graph. The aggregate effect of caching actions by individual peer proxies automatically distributes the Web document closer to the clients and balances the workload. Our simulation results show that the proposed proxy caching scheme tremendously improves the system performance. In addition, the individual-based design model ensures the simplicity and scalability of the cache system. 1...|$|R
40|$|TCP Westwood (TCPW) is a sender-side {{modification}} of the TCP congestion window algorithm that improves upon the performance of TCP Reno in wired as well as wireless networks. The improvement is most significant in wireless networks with lossy links, since TCP Westwood relies on endto-end bandwidth estimation to discriminate the cause of packet loss (congestion or wireless channel effect) which {{is a major problem}} in TCP Reno. An important distinguishing feature of TCP Westwood with respect to previous wireless TCP “extensions ” {{is that it does not}} require inspection and/or interception of TCP packets at intermediate (<b>proxy)</b> <b>nodes.</b> Rather, it fully complies with the end-to-end TCP design principle. The key innovative idea is to continuously measure at the TCP source the rate of the connection by monitoring th...|$|R
40|$|This paper {{introduces}} a novel technique {{to maximize the}} lifetime of fault tolerant sensor networks. The proposed architecture uses multipath diversity in the network layer and erasure codes. We use a distributed sink where information arrives at the sink via multiple <b>proxy</b> <b>nodes,</b> called "prongs" in this paper. The sender node uses erasure coding and splits each packet into multiple fragments and transmits the fragments over multiple parallel paths. The erasure coding allows the sink to reconstruct the original packet even {{if some of the}} fragments are lost. Occasionally, the sink broadcasts a query to awaken the sensors and to allow them to collect information about probability of packet loss and energy consumption in the network. The awakened sensors then use the collected information to distribute their data among different prongs so as to maximize the network lifetime, while keeping reliability in the network above a certain level...|$|R
