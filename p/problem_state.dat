145|7367|Public
50|$|All CLSs {{except for}} the USER CLS execute in system mode in <b>problem</b> <b>state.</b>|$|E
50|$|MTS has {{a strong}} {{protection}} model that uses the virtual memory hardware and the S/360 and S/370 hardware's supervisor and problem states and via software divides <b>problem</b> <b>state</b> execution into system (privileged or unprotected) and user (protected or unprivileged) modes. Relatively little code runs in supervisor state. For example, Device Support Routines (DSRs, aka device drivers) {{are not part of}} the supervisor and run in system mode in <b>problem</b> <b>state</b> rather than in supervisor state.|$|E
5000|$|A privileged {{operation}} exceptionPoOps is recognized when a program attempts {{to execute a}} privileged instruction when the <b>problem</b> <b>state</b> bit in the PSW is 1.|$|E
25|$|This {{raised the}} {{following}} <b>problem,</b> <b>stated</b> {{in the same}} paper.|$|R
50|$|<b>State</b> <b>problems</b> {{are easier}} to measure than process <b>problems.</b> <b>State</b> <b>problems</b> just require one {{measurement}} of the phenomena of interest, while process problems always require multiple measurements. Research designs such as repeated measurements and longitudinal study are needed to address process problems.|$|R
30|$|Analysis of the {{attributes}} {{and importance of}} {{the attributes}} on the <b>problem</b> <b>stated.</b>|$|R
50|$|Benefits include {{challenges}} to preconceived notions and clarifying the <b>problem</b> <b>state</b> that planners {{are attempting to}} mitigate. More accurate understanding can be developed of how sensitive information is externalized and of exploitable patterns and instances of bias.|$|E
5000|$|Materials: Atoms and atomic spheres (kissing number <b>problem),</b> <b>state</b> {{of matter}} (chemical state), {{particles}} (neutral particle), glazed zinc (Zinc oxide), maghemite, awaruite, oxygen, liquids, ponderable matter, pole figure, chemical polarity, molecular substance, copper-antimony (copper, antimony, alloys list), germanium ...|$|E
50|$|The {{architecture}} maintains <b>problem</b> <b>state</b> {{backward compatibility}} with the 24-bit-address/32-bit-data System/360 (1964) and all intermediate large system 24/31-bit-address/32-bit-data architectures (System/370, System/370-XA, and ESA/370). However, the I/O subsystem {{is based on}} System/370 Extended Architecture (S/370-XA), not on the original S/370 I/O instructions.|$|E
30|$|Identify the {{complicated}} decision <b>problem</b> <b>stated</b> and {{presented in the}} topmost level of a hierarchical structure.|$|R
5000|$|Also, a quadratic-programming <b>problem</b> <b>stated</b> as {{minimize}} [...] {{subject to}} [...] {{as well as}} [...] with Q symmetric ...|$|R
5000|$|A {{design process}} generates a {{conceptual}} solution for a <b>problem</b> <b>stated</b> {{in the form}} of requirements. Examples include: ...|$|R
50|$|The {{unrestricted}} mode {{is often}} called kernel mode, but many other designations exist (master mode, supervisor mode, privileged mode, etc.). Restricted modes are usually referred to as user modes, but are also known by many other names (slave mode, <b>problem</b> <b>state,</b> etc.).|$|E
50|$|IBM {{mainframes}} in the System/360 and successor families {{operate in}} one of two states: <b>problem</b> <b>state</b> or supervisor state. In <b>problem</b> <b>state,</b> a large set of general purpose non-privileged instructions are available to a user program. In supervisor state, system programs are additionally able to use a small set of privileged instructions which are generally intended for supervisory functions. These functions may affect other users, other processors, or the entire computer system. A program is only allowed to access specific supervisory functions after thorough authorization checking by the operating system: DEBCHK (SVC 117), TESTAUTH (SVC 119), and possibly additional tests. Programs which fail any of these tests are ABENDed, that is abnormally terminated and immediately cease processing. Some of these tests were not available in OS/360, but were added in SVS or MVS/370, but all were available in MVS/370 or subsequent releases, and are still available to this day.|$|E
50|$|However, {{not all of}} the {{interfaces}} {{can remain}} compatible. Emphasis was put on having non control programs (called <b>problem</b> <b>state</b> programs) remain compatible. Thus, operating systems have to be ported to the new architecture because the control interfaces can (and were) redefined in an incompatible way. For example, the I/O interface was redesigned in S/370-XA making S/370 program issuing I/O operations unusable as-is.|$|E
2500|$|In November 2007, {{a public}} {{consultation}} exercise into the ‘A55 Britannia Bridge Improvement’ commenced. The perceived <b>problems</b> <b>stated</b> include: ...|$|R
3000|$|Of key {{importance}} in the optimization <b>problem</b> <b>stated</b> in (3) {{is the definition of}} the link cost functions [...]...|$|R
5000|$|In November 2007, {{a public}} {{consultation}} exercise into the ‘A55 Britannia Bridge Improvement’ commenced. The perceived <b>problems</b> <b>stated</b> include: ...|$|R
50|$|All job {{programs}} run in S/360 <b>problem</b> <b>state,</b> may {{run with}} virtual addressing enabled or disabled, and {{may or may}} not be reentrant (more than one instance of the job program {{may or may not}} be allowed to execute). With multiprocessor configurations a single job will only execute on a single processor at a time, but the supervisor may assign a job to different processors at different times.|$|E
50|$|The well-founded {{semantics}} {{is also a}} way {{of making}} safe inferences in the presence of contradictory data such as noisy data, or data acquired from different experts who may posit differing opinions. Many two-valued semantics simply won't consider such a <b>problem</b> <b>state</b> workable. The well-founded semantics, however, has a built-in mechanism to circumvent the presence of the contradictions and proceeds to derive as many two-valued facts as possible, even though some consequences may remain unknown.|$|E
50|$|The System/360 was {{designed}} to separate the system state from the <b>problem</b> <b>state.</b> This provided a basic level of security and recoverability from programming errors. Problem (user) programs could not modify data or program storage associated with the system state. Addressing, data, or operation exception errors made the machine enter the system state through a controlled routine so the operating system could try to correct or terminate the program in error. Similarly, it could recover certain processor hardware errors through the machine check routines.|$|E
5000|$|On 13 September 2006, the Council of Europe (CoE) Secretary General Terry Davis {{commented on}} the <b>problem,</b> <b>stating</b> that: ...|$|R
30|$|Obviously, this is {{a typical}} Dirichlet <b>problem</b> <b>stated</b> on a special region for an {{elliptic}} equation. Generally, it admits a unique classical solution.|$|R
5000|$|Constraints can be {{incorporated}} explicitly in the maximin models. For instance, {{the following is a}} constrained maximin <b>problem</b> <b>stated</b> in the classic format ...|$|R
5000|$|CP-40 design: Pugh et al. write that: [...] "In 1964...IBM Research were recommending {{the use of}} virtual-machine {{principles}} to time-sharing planners...were {{picked up by the}} Cambridge CSC team, who wanted, among other things, a system capable of testing operating systems." [...] A key design decision, made by Creasy and Comeau at the end of 1964, was to base CP-40 not just on virtual memory but on virtual machines (at first called pseudo-machines, until the later term was appropriated from the IBM M44/44X project - which Creasy describes as having [...] "similar but independent ideas." [...] Creasy provides a clear description of CP's virtualization strategy, based on the S/360 instruction set, which consisted of privileged 'supervisor state' instructions distinct from normal 'problem state' instructions: [...] "Each CP virtual machine program is actually executed entirely in <b>problem</b> <b>state....</b> Privileged instructions...are reproduced by CP within the virtual machines...." [...] By running an OS in <b>problem</b> <b>state,</b> all the 'tricky' instructions would automatically be intercepted by the hardware. This left just one main virtualization problem: memory references. [...] "Experience CTSS...suggested the need for dynamic program relocation...to break programs into pieces which could be moved into, out of, and within the memory independently of each other." ...|$|E
50|$|There {{might be}} {{multiple}} heuristics from {{which one can}} choose for solving a problem, and each heuristic has its own strength and weakness. The idea is to automatically devise algorithms by combining the strength and compensating for the weakness of known heuristics. In a typical hyper-heuristic framework there is a high-level methodology {{and a set of}} low-level heuristics (either constructive or perturbative heuristics). Given a problem instance, the high-level method selects which low-level heuristic should be applied at any given time, depending upon the current <b>problem</b> <b>state,</b> or search stage.|$|E
50|$|By default user {{programs}} execute in {{user mode}} in <b>problem</b> <b>state.</b> User mode {{programs do not}} have access to the system virtual memory segment and therefore have no access to system control blocks, may not call privileged system subroutines, and may not issue privileged supervisor calls (SVCs). User mode programs can issue non-privileged SVCs, but few programs do so directly and instead call system subroutines to obtain system services. User mode programs may call system subroutines that switch to system mode after checking that the protected service is allowed for the particular caller, there is a return to user mode when the system subroutine returns.|$|E
5000|$|In number theory, Goldbach's weak conjecture, {{also known}} as the odd Goldbach conjecture, the ternary Goldbach problem, or the 3-primes <b>problem,</b> <b>states</b> that ...|$|R
50|$|Immediately {{the owners}} issued {{complaints}} about inch wide {{cracks in the}} walls, but masons underplayed the <b>problem,</b> <b>stating</b> that those were normal settlement movements.|$|R
5000|$|... and {{building}} up nonprofit organization's abilities to tackle economic <b>problems.</b> <b>State,</b> Local and Tribal governments can receive up to $250,000 in two year grants ...|$|R
50|$|The {{most serious}} {{security}} problems with software-based systems {{are those that}} develop when the software requirements are incorrect, inappropriate, or incomplete for the system situation. Unfortunately, errors or omissions in requirements {{are more difficult to}} identify. For example, the software may perform exactly as required under normal use, but the requirements may not correctly deal with some system state. When the system enters this <b>problem</b> <b>state,</b> unexpected and undesirable behavior may result. This type of problem cannot be handled within the software discipline; it results from a failure of the system and software engineering processes which developed and allocated the system requirements to the software.|$|E
5000|$|IBM {{released}} z/VSE 3.1 in 2005. This {{change in}} naming reflected the new [...] "System z" [...] branding for IBM's mainframe product line, {{but did not}} represent {{a fundamental change in}} architecture from VSE/ESA 2.7 which preceded it. In particular, it did not support the new 64-bit z/Architecture, running only in 31-bit mode even on 64-bit capable machines. z/VSE 4.1 released in 2007 introduced support for 64-bit real addressing, with up to 8GB of memory. However, while parts of the supervisor run in 64-bit mode, it only provides 31-bit virtual address spaces to <b>problem</b> <b>state</b> applications. As of 2011 one estimate placed the number of sites using z/VSE at around 4000.|$|E
5000|$|SIT is a {{descendant}} {{of the work of}} Genrich Altshuller, a Russian engineer who analyzed over 200,000 patents to identify the 40 common inventive principles of his unique formula, named TRIZ. Altshuller’s main discovery was that creative solutions incorporate an elimination of a conflict in the <b>problem</b> <b>state.</b> A conflict is a state where one parameter must be changed, in order to get some benefit, but changing that parameter causes a deterioration of another important parameter. Routine engineering design deals with this situation by searching for the [...] "best fit" [...] compromise, a trade off that maximized the utility and minimizes the negative impact of a specific configuration of the variance of the available input parameters.|$|E
50|$|Many {{algorithmic}} <b>problems</b> <b>stated</b> {{in terms}} of fixed input data (called static problems in this context and solved by static algorithms) have meaningful dynamic versions.|$|R
40|$|We {{show that}} the {{computational}} effort for the numerical solution of fermionic quantum systems, occurring e. g., in quantum chemistry, solid state physics, field theory in principle grows with less than {{the square of the}} particle number for <b>problems</b> <b>stated</b> in one space dimension and with less than the cube of the particle number for <b>problems</b> <b>stated</b> in three space dimensions. This is proven by representation of effective algorithms for fermion systems in the framework of the Feynman Path Integral. Comment: 7 pages, uses revtex. st...|$|R
3000|$|... (n), where k[*]=[*] 1, 2, 3, one {{of which}} {{did not exist in}} the {{optimization}} <b>problem</b> <b>stated</b> in Section 2.1, and this new desired signal, d [...]...|$|R
