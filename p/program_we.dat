6589|10000|Public
25|$|After ending {{domestic}} promotions for {{its fifth}} mini-album Can't Stop (2014), CNBLUE pursued individual activities. Frontman Jung Yong-hwa released his debut solo studio album One Fine Day (2015) in January and {{embarked on an}} Asian tour. Guitarist Lee Jong-hyun {{played the role of}} a lead character in KBS2's Orange Marmalade and participated on MBC's reality variety <b>program</b> <b>We</b> Got Married. Drummer Kang Min-hyuk took part in MBC's I Live Alone and KBS2's sports variety show Our Neighborhood Arts and Physical Education. Bassist Lee Jung-shin was an MC for SBS Plus's Fashion King: Secret Box and Mnet's music chart show M Countdown.|$|E
500|$|Neither {{the police}} nor the fire {{department}} officially supported the project. The Uniformed Firefighters Association initially supported it, but withdrew when the connection to the Church of Scientology was revealed. Firefighter Union President Patrick Bahnken said his members' lives had benefited from the program, {{and that it had}} involved no religious rhetoric. Deputy Fire Commissioner Frank Gribbon of the FDNY told The New York Times, [...] "while we are aware some members of the department have availed themselves of the <b>program,</b> <b>we</b> in no way endorse it." [...] Officials at the department raised concerns that firefighters were giving up existing medications in order to take part. The department's deputy chief medical officer Dr. David Prezant said, [...] "It's not our job to say you can't go. All we can do is say there's no proven evidence it works." ...|$|E
500|$|In 1981 Daniel Dennett had {{formulated}} another {{argument against}} the LOT. Dennett suggested that it would seem, {{on the basis of}} the evidence of our behavior toward computers but also with regard to some of our own unconscious behavior, that explicit representation is not necessary for the explanation of propositional attitudes. During a game of chess with a computer <b>program,</b> <b>we</b> often attribute such attitudes to the computer, saying such things as [...] "It thinks that the queen should be moved to the left." [...] We attribute propositional attitudes to the computer and this helps us to explain and predict its behavior in various contexts. Yet no one would suggest that the computer is actually thinking or believing somewhere inside its circuits the equivalent of the propositional attitude [...] "I believe I can kick this guy's butt" [...] in Mentalese. The same is obviously true, suggests Dennett, of many of our everyday automatic behaviors such as [...] "desiring to breathe clear air" [...] in a stuffy environment.|$|E
40|$|JoCaml is a {{language}} for concurrent and distributed <b>programming.</b> <b>We</b> here present a non-trival distributed application written in JoCaml: a ray~tracer. Thereby, we show how to program {{the coordination of}} multiple cooperating agents in a concise manner, {{in the spirit of}} functional <b>programming.</b> <b>We</b> also adress the issue of agent failure...|$|R
40|$|Abstract. This paper {{provides}} an introductory survey {{of a class}} of optimization problems known as bilevel <b>programming.</b> <b>We</b> motivate this class through a simple application, and then proceed with the general formulation of bilevel <b>programs.</b> <b>We</b> consider various cases (linear, linear-quadratic, nonlinear), describe their main properties and give an overview of solution approaches...|$|R
40|$|Abstract. We present here impulse {{control theory}} in {{discrete}} time. We show {{the connection between}} quasi-variational inequalities (QVI) in this context, with the standard formulation of dynamic <b>programming.</b> <b>We</b> show that the QVI formulation brings many interesting features, completing the standard formulation of dynamic <b>programming.</b> <b>We</b> study applications to inventory control in discrete time...|$|R
2500|$|In this section, {{as in the}} {{definition}} of a stable model above, by a logic <b>program</b> <b>we</b> mean a set of rules of the form ...|$|E
2500|$|For example, to {{form the}} {{deterministic}} equivalent to the above stochastic linear <b>program,</b> <b>we</b> assign a probability [...] to each scenario [...] Then we can minimize the expected value of the objective, subject to the constraints from all scenarios: ...|$|E
2500|$|Vincent Geraci (who {{became chief}} of product design and product {{identity}} at Chrysler after AMC's buyout), viewed the Marlin as [...] "an exciting <b>program</b> ... <b>We</b> took a 1965 body design {{and turned it}} into a sportier version. But enlarging the car from its original concept [...] and raising the roof produced an adverse effect on overall appearance." ...|$|E
3000|$|... [...]. Thus the new {{programming}} {{is still a}} mixed integer linear <b>programming.</b> <b>We</b> call the modified programming MILP- 2.|$|R
40|$|We {{propose a}} modular {{approach}} to termination proofs of logic programs with negation (i. e., general <b>programs).</b> <b>We</b> consider <b>programs</b> {{consisting of a}} hierarchy of modules and supply a general method for proving termination by dealing with each module separately. For programs which exhibit a well-behaviour, namely well-moded or well-typed <b>programs,</b> <b>we</b> derive both a simple verification technique and an iterative proof method. Some examples show how our system allows for greatly simplified proofs...|$|R
40|$|Abstract. We {{present a}} partial {{evaluator}} for functional logic programs written in Curry. In contrast to previous {{approaches to the}} partial evaluation of functional logic <b>programs,</b> <b>we</b> {{take into account the}} features used in contemporary Curry programs, in particular, non-deterministic operations and recursive let expres-sions. For this purpose, we base our partial evaluator on FlatCurry, an intermedi-ate language for the representation of Curry <b>programs.</b> <b>We</b> sketch our approach and present initial benchmarks of our implementation. ...|$|R
2500|$|Robot reply:Suppose {{that instead}} of a room, the program was placed into a robot that could wander around and {{interact}} with its environment. This would allow a [...] "causal connection" [...] between the symbols and things they represent. Hans Moravec comments: [...] "If we could graft a robot to a reasoning <b>program,</b> <b>we</b> wouldn't need a person to provide the meaning anymore: it would come from the physical world." ...|$|E
2500|$|Betsy Chasse, {{one of the}} producers, directors, and screenwriters for What the Bleep Do We Know!? interviewed Paul Harrington, the co-producer of The Secret. In the interview, Harrington {{gave this}} {{description}} of Byrne's production methods: [...] "We used the law of attraction during {{the making of the}} <b>program.</b> <b>We</b> went very unconventional, in terms of scheduling and budgeting. We allowed things to come to us... We just had faith that things would come to us." ...|$|E
2500|$|On 16 March 2016, ABC news {{reported}} that a Liberal Nationals MP, George Christensen, had used parliamentary privilege to accuse the Safe Schools program of being linked to a [...] "paedophilia advocate", referring to a professor, Gary Dowsett, and a report he published in 1982. A spokesman for La Trobe University stated: [...] "We are appalled that a respected academic has been attacked using parliamentary privilege. This is a blatant attempt to distract attention from the independent endorsement of the highly effective Safe Schools <b>program.</b> <b>We</b> stand by the important work of Professor Dowsett and his team." ...|$|E
40|$|The main {{difficulty}} for the user of an automatic programming {{system is to}} write a specification that the system can employ to synthesize desirable <b>programs.</b> <b>We</b> discuss how to write specifications for the ADATE system and present examples of specifications and the corresponding synthesized <b>programs.</b> <b>We</b> show how ADATE {{can be used to}} synthesize parts of specifications as well as desirable programs and argue that multi-stage inferences are useful when specifying quite complex problems suc...|$|R
5000|$|A {{variety of}} models and {{semantics}} govern {{the family of}} reactive <b>programming.</b> <b>We</b> can loosely split them along the following dimensions: ...|$|R
40|$|Abstract. The component-as-array {{model is}} a widely used {{technique}} for modeling heap memory in Weakest Precondition-based deductive verification of pointer <b>programs.</b> <b>We</b> propose a separation analysis which can be integrated {{in the core of}} this model. This allows to greatly simplify the verification conditions generated, and thus greatly helps in proving such pointer <b>programs.</b> <b>We</b> illustrate the improvements both in term of scaling up for codes of large size, and in term of simplification of the reasoning for establishing advanced behaviors. ...|$|R
2500|$|Ray's uncompromising {{belief in}} the {{correctness}} of her views occasionally spilled over state lines. During {{what was supposed to}} be a routine joint press conference in Boise, Idaho by the governors of Washington, Oregon, and Idaho in which the three touted the benefits of energy conservation, Ray reacted with barely concealed disdain to Oregon governor Robert W. Straub's call for legislation to encourage the installation of home insulation. [...] "I don't believe our citizens are lax, or lazy, or indifferent," [...] Ray fired. [...] "In Washington we have a strong voluntary energy conservation <b>program.</b> <b>We</b> don't need legislative incentives." ...|$|E
2500|$|Tytla did try {{to return}} to Disney. In a letter dated August 27, 1968, Disney {{productions}} vice president W.H. Anderson rejected his offer to do [...] "trial animation", saying, [...] "We really have only enough animation for our present staff." [...] And as late as October 11, 1968, {{less than three months}} before Tytla's death, Disney director Wolfgang Reitherman responded to story material Tytla submitted explaining [...] "...I'm sorry to say that your story ideas don't fit into our present <b>program..</b> <b>We</b> have not forgotten that you are anxious to animate here at the studio, but...So far, we can just barely keep our present crew of animators busy...rest assured you have many friends here at the studio who are pulling for you." ...|$|E
2500|$|As {{part of a}} {{response}} to excesses in Northern land reform, for which Ho dismissed Truong Chinh {{as head of the}} program, Võ Nguyên Giáp, in the fall of 1956, offered the self-criticism for the Party:We made too many deviations and executed too many honest people. We attacked on too large a front and, seeing enemies everywhere, resorted to terror, which became far too widespread[...] [...] [...] Whilst carrying out our land reform <b>program</b> <b>we</b> failed to respect the principles of freedom of faith and worship in many areas [...] [...] [...] in regions inhabited by minority tribes we have attacked tribal chiefs too strongly, thus injuring, instead of respecting, local customs and manners[...] [...] [...] When reorganizing the party, we paid too much importance to the notion of social class instead of adhering firmly to political qualifications alone. Instead of recognizing education to be the first essential, we resorted exclusively to organizational measures [...]|$|E
30|$|Now, {{by using}} MATLAB <b>programs,</b> <b>we</b> present {{numerical}} results for this example (4.1). The numerical solutions are recorded for different values of N and M.|$|R
40|$|The {{reduction}} of nondeterminism can increase efficiency when specializing <b>programs.</b> <b>We</b> consider constraint logic <b>programs</b> and <b>we</b> propose a technique which by {{making use of}} a new transformation rule, called clause splitting, allows us to generate efficient, specialized programs which are deterministic. We have applied our technique to the specialization of pattern matching programs...|$|R
40|$|In recent years, federal, state, {{and local}} govern-ments and other funding {{organizations}} have increased pressure for greater effectiveness and accountability of prevention programs, includ-ing those oriented toward families. This rising demand for program accountability has fueled a {{growing interest in}} evidence-based programs. Drawing on {{what is known about}} evidence-based prevention <b>programs,</b> <b>we</b> discuss some common principles of effective programs and present a process for how practitioners can use these principles to improve the quality and impact of existing family <b>programs.</b> <b>We</b> term this approach evidence-informed program improvement...|$|R
2500|$|Chevrolet {{designer}} Clare MacKichan recalled {{about creating}} the Chevy II: [...] "There {{was no time}} for experimentation or doodling around with new ideas from either the engineers or from us in design; And {{it had to be a}} basic-type car." [...] The 1962 Chevy II rode a 110-inch wheelbase, compared to 109.5 for the Ford Falcon, at which Chevy's new compact was aimed. [...] "I think that was the quickest <b>program</b> <b>we</b> ever did at any time," [...] he continued. [...] "We worked night and day on that car, and it didn't take very long to run it through our shop because we had a deadline." [...] And that's what made the Chevy II one of the fastest new-car development programs in GM history – just 18 months after the designers got the green light, the first production Chevy II rolled off the Willow Run, Michigan, assembly line in August 1961, in time for its September 29 introduction. Unlike the Corvair, the 1962 Chevy II was deliberately never intended to be revolutionary in concept or execution; its mission was to give Chevrolet buyers a simple, back-to-the-basics compact car. When he announced the Chevy II to the press, Chevrolet General Manager Ed Cole described the car as offering [...] "maximum functionalism with thrift." ...|$|E
2500|$|McKenna's term {{in office}} was viewed mostly as a success. His key {{priority}} throughout his term was job creation and {{he was known to}} say that the [...] "best social <b>program</b> <b>we</b> have is a job." [...] He encouraged small business growth and tried to entice large companies to invest in the province with tax incentives, often directly calling individual professionals to urge them to bring their talents to New Brunswick. Another of his strategies was to raise the collective self confidence of New Brunswickers, which he believed would increase productivity. He introduced a sophisticated public relations operation which included the use of controversial video news releases. He was criticized for increasing the number of communications personnel on the government payroll but countered this complaint by pointing out that the primary government communications agency, Communications New Brunswick, had been depoliticized. Communications New Brunswick had been responsible to the Premier's chief of staff in past governments and McKenna made it report {{to the head of the}} civil service. He was also criticized for creating a toll free telephone number to the premier's office which had the number 1-800-MCKENNA, the number was functional throughout North America and was used for both New Brunswick constituents and business interests that were considering moving to the province.|$|E
2500|$|On July 27, 2007, both White House Press Secretary Tony Snow and White House {{spokeswoman}} Dana Perino defended Gonzales's Senate Judiciary Committee testimony {{regarding the}} events of March 10, 2004, saying {{that it did not}} contradict the sworn House Judiciary Committee account of FBI director Robert S. Mueller III, because Gonzales had been constrained in what he could say because there was a danger he would divulge classified material. Lee Casey, a former Justice Department lawyer during the Ronald Reagan and George H. W. Bush administrations, told The NewsHour with Jim Lehrer that {{it is likely that the}} apparent discrepancy can be traced to the fact that there are two separate Domestic Surveillance programs. [...] "The program that was leaked in December 2005 is the Comey program. It is not the program that was discussed in the evening when they went to Attorney General Ashcroft's hospital room. That <b>program</b> <b>we</b> know almost nothing about. We can speculate about it. …The program about which he said there was no dispute is a program that was created after the original program died, when Mr. Comey refused to reauthorize it, in March 2004. Mr. Comey then essentially redid the program to suit his legal concerns. And about that program, there was no dispute. There was clearly a dispute about the earlier form or version of the program. The attorney general has not talked about that program. He refers to it as [...] "other intelligence activities" [...] because it is, in fact, still classified." ...|$|E
40|$|Abstract — The {{reduction}} of nondeterminism can increase efficiency when specializing <b>programs.</b> <b>We</b> consider constraint logic <b>programs</b> and <b>we</b> propose a technique which by {{making use of}} a new transforma-tion rule, called clause splitting, allows us to generate efficient, specialized programs which are determinis-tic. We have applied our technique to the specializa-tion of pattern matching programs...|$|R
40|$|We {{present an}} {{approach}} for describing tests using nondeterministic test generation programs. To write such <b>programs,</b> <b>we</b> introduce UDITA, a Java-based language with non-deterministic choice operators and an interface for generating linked structures. We also describe new algorithms that generate concrete tests by efficiently exploring {{the space of}} all executions of non-deterministic UDITA <b>programs.</b> <b>We</b> implemented our approach and incorporated it into the official, publicly available repository of Java PathFinder (JPF), a popular tool for verifying Java <b>programs.</b> <b>We</b> evaluate our technique by generating tests for data structures, refactoring engines, and JPF itself. Our experiments show that test generation using UDITA is faster and leads to test descriptions that are easier to write than in previous frameworks. Moreover, the novel execution mechanism of UDITA is essential for making test generation feasible. Using UDITA, we have discovered a number of bugs in Eclipse, NetBeans, Sun javac, and JPF...|$|R
30|$|In this section, we prove strong {{convergence}} of an iterative sequence {{generated by the}} hybrid method in mathematical <b>programming.</b> <b>We</b> start with the following useful common tools.|$|R
6000|$|... "That," [...] said Psmith, {{looking at}} himself earnestly in the mirror, and {{straightening}} his tie, [...] "is the exact <b>program.</b> <b>We</b> must stake out our claims. This is practical socialism." ...|$|E
5000|$|Applying this to {{the simple}} <b>program</b> <b>we</b> {{introduced}} above, we get: ...|$|E
50|$|At {{the end of}} this <b>program,</b> <b>we</b> {{have the}} minimum cost for the full sequence.|$|E
40|$|AbstractThis {{paper is}} {{concerned}} with the issue of parallel evaluation of logic <b>programs.</b> <b>We</b> define the concept of program decomposability, which means that the load of evaluation can be partitioned among a number of processors, without a need for communication among them. This in turn results in a very significant speedup of the evaluation process. Some programs are decomposable, whereas others are not. We completely syntactically characterize three classes of single-rule programs with respect to decomposability: nonrecursive, simple linear, and simple chain <b>programs.</b> <b>We</b> also establish two sufficient conditions for decomposability...|$|R
40|$|AbstractWe {{elaborate}} our {{relational model}} of non-strict, imperative computations. The theory is extended to support infinite data structures. To facilitate {{their use in}} <b>programs,</b> <b>we</b> extend the <b>programming</b> language by concepts such as procedures, parameters, partial application, algebraic data types, pattern matching and list comprehensions. For each concept, we provide a relational semantics. Abstraction is further improved by programming patterns such as fold, unfold and divide-and-conquer. To support <b>program</b> reasoning, <b>we</b> prove laws such as fold–map fusion, otherwise known from functional <b>programming</b> languages. <b>We</b> give examples to show the use of our concepts in programs...|$|R
40|$|This {{paper is}} {{concerned}} with the issue of parallel evaluation of logic <b>programs.</b> <b>We</b> define the concept of program decomposability, which means that the load of evaluation can be partitioned among a number of processors, without a need for communication among them. This in turn results in a very significant speed-up of the evaluation process. Some programs are decomposable, whereas others are not. We completely syntactically characterize three classes of single rule programs with respect to decomposability: nonrecursive, simple linear, and simple chain <b>programs.</b> <b>We</b> also establish two sufficient conditions for decomposability...|$|R
