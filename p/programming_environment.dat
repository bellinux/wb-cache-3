3779|3291|Public
5|$|NeXT later {{released}} {{much of the}} NeXTSTEP {{system as}} a <b>programming</b> <b>environment</b> standard called OpenStep. NeXT withdrew from the hardware business in 1993 to concentrate on marketing OPENSTEP for Mach, its own OpenStep implementation, for several OEMs. NeXT also developed WebObjects, {{one of the first}} enterprise Web application frameworks. WebObjects never became very popular because of its initial high price of $50,000, but it remains a prominent early example of a Web server based on dynamic page generation rather than on static content.|$|E
25|$|For end-users, Cocoa {{applications}} are those written using the Cocoa <b>programming</b> <b>environment.</b> Such applications {{usually have a}} distinctive feel, since the Cocoa <b>programming</b> <b>environment</b> automates many aspects of an application to comply with Apple's human interface guidelines.|$|E
25|$|C++ {{should work}} {{alongside}} other existing programming languages, rather than fostering its own separate and incompatible <b>programming</b> <b>environment.</b>|$|E
40|$|<b>Programming</b> <b>environments</b> are {{typically}} based on {{concepts such as}} syntax and semantics and they provide functionalities such as parsing, editing, type-checking and compilation. But most existing <b>programming</b> <b>environments</b> are designed in a rather integrated manner where parsers, editors and semantic tools are tightly coupled. This leads to systems that are {{the sum of all}} their components with obvious implications in terms of size, of reusability and of maintainability. In this paper, we present a proposal for a distributed architecture for <b>programming</b> <b>environments...</b>|$|R
40|$|Genericity of {{parallel}} <b>programming</b> <b>environments,</b> enabling development of portable parallel programs, {{is expected to}} result in performance penalties. Furthermore, programmability and tool support of <b>programming</b> <b>environments</b> are important issues if a choice between <b>programming</b> <b>environments</b> has to be made. We propose a methodology to compare native and generic parallel <b>programming</b> <b>environments,</b> taking into account such competing issues as portability and performance. As a case study, this paper compares the Parix and PVM parallel <b>programming</b> <b>environments</b> on a 512 node Parsytec GCel. Furthermore, we apply our methodology to compare Parix and PVM on a new architecture, a 32 node Parsytec PowerXplorer, {{which is based on}} the PowerPC chip. In our approach we start with a representative application and isolate the basic (environment) dependent building blocks. These basic building blocks, which depend on floating point performance and communication capabilities of the environments, are analysed independently. We have measured point to point communication times, global communication times and floating point performance. All information is combined into a time complexity analysis, allowing the comparison of the environments on different degrees of functionality. 1...|$|R
5000|$|Incremental compilers in {{interactive}} <b>programming</b> <b>environments</b> and runtime systems: ...|$|R
25|$|The ILE (Integrated Language Environment) <b>programming</b> <b>environment</b> allows {{programs}} from ILE compatible languages (C, C++, COBOL, RPG, Fortran, and CL), {{to be bound}} into the same executable and call procedures written {{in any of the}} other ILE languages.|$|E
25|$|Used {{inside an}} instance, <b>programming</b> <b>environment.</b> For cross-instance applications, Service Broker {{communicates}} over TCP/IP {{and allows the}} different components to be synchronized, via exchange of messages. The Service Broker, which runs {{as a part of}} the database engine, provides a reliable messaging and message queuing platform for SQL Server applications.|$|E
25|$|Some Java {{applications}} are in fairly widespread desktop use, including the NetBeans and Eclipse integrated development environments, and file sharing clients such as LimeWire and Vuze. Java {{is also used}} in the MATLAB mathematics <b>programming</b> <b>environment,</b> both for rendering the user interface {{and as part of}} the core system. Java provides cross platform user interface for some high end collaborative applications such as Lotus Notes.|$|E
40|$|An {{evaluation}} of the FEW <b>Programming</b> Support <b>Environment</b> This paper gives a personal reaction to the Flex <b>Programming</b> support <b>environment,</b> developed at RSRE, Malvern. It discusses the new approach to program development necessary {{to take advantage of}} the environment, and evaluates the environment against some criteria for <b>programming</b> <b>environments</b> in general...|$|R
5000|$|... #Subtitle level 2: Data mining of PubMed from <b>programming</b> <b>environments</b> ...|$|R
5000|$|<b>Programming</b> <b>environments</b> for Ruby Lua, Vala, C, C++, Python and Perl ...|$|R
25|$|In computing, {{a program}} error {{may result from}} an attempt to divide by zero. Depending on the <b>programming</b> <b>environment</b> {{and the type of}} number (e.g. {{floating}} point, integer) being divided by zero, it may generate positive or negative infinity by the IEEE 754 floating point standard, generate an exception, generate an error message, cause the program to terminate, result in a special not-a-number value, a freeze via infinite loop, or a crash.|$|E
25|$|The Atari 2600 is {{generally}} considered to be a very demanding <b>programming</b> <b>environment,</b> with a mere 128 bytes of RAM available without additional hardware, and no video frame buffer at all. The programmer must prepare each line of video output one at a time as it is being sent to the television. The only sprite capabilities the 2600 offers are one-dimensional 1-bit and 8-bit patterns; creating a two-dimensional object requires changing the pattern between each line of video.|$|E
25|$|Visual FoxPro: Visual FoxPro is a {{data-centric}} object-oriented {{and procedural}} programming language produced by Microsoft. It derives from FoxPro (originally known as FoxBASE) which {{was developed by}} Fox Software beginning in 1984. Visual FoxPro is tightly integrated with its own relational database engine, which extends FoxPro's xBase capabilities to support SQL queries and data manipulation. Visual FoxPro is a full-featured, dynamic programming language that {{does not require the}} use of an additional general-purpose <b>programming</b> <b>environment.</b> In 2007, Visual FoxPro was discontinued after version 9 Service Pack 2. It was supported until 2015.|$|E
5000|$|To {{support these}} two {{distribution}} models, ToolBook contains two different <b>programming</b> <b>environments.</b>|$|R
40|$|This is {{the third}} {{in a series of}} papers on aspects of modern {{computing}} environments that are relevant to statistical data analysis. In this paper, we discuss <b>programming</b> <b>environments.</b> In particular, we argue that integrated <b>programming</b> <b>environments</b> (for example, Lisp and Smalltalk environments) are more appropriate as a base for data analysis than conventional operating systems (for example Unix) ...|$|R
5000|$|Impact of Energy <b>Programs,</b> <b>Environment,</b> Safety Requirements and Government Research on Small Business ...|$|R
25|$|Simulations in {{education}} are somewhat like training simulations. They focus on specific tasks. The term 'microworld' {{is used to}} refer to educational simulations which model some abstract concept rather than simulating a realistic object or environment, or in some cases model a real world environment in a simplistic way so as to help a learner develop an understanding of the key concepts. Normally, a user can create some sort of construction within the microworld that will behave in a way consistent with the concepts being modeled. Seymour Papert {{was one of the first}} to advocate the value of microworlds, and the Logo <b>programming</b> <b>environment</b> developed by Papert is one of the most famous microworlds. As another example, the Global Challenge Award online STEM learning web site uses microworld simulations to teach science concepts related to global warming and the future of energy. Other projects for simulations {{in education}}s are Open Source Physics, NetSim etc.|$|E
2500|$|Certain languages, {{for example}} Clojure, Common Lisp, or Cython are {{dynamically}} type-checked by default, but allow programs to opt into static type checking by providing optional annotations. One reason {{to use such}} hints would be to optimize the performance of critical sections of a program. This is formalized by gradual typing. The <b>programming</b> <b>environment</b> DrScheme, a [...] pedagogic environment based on Lisp, and a precursor of the language Racket was also soft-typed.|$|E
2500|$|Unix was {{designed}} to be portable, multi-tasking and multi-user in a time-sharing configuration. Unix systems are characterized by various concepts: the use of plain text for storing data; a hierarchical file system; treating devices and certain types of inter-process communication (IPC) as files; and the use {{of a large number of}} software tools, small programs that can be strung together through a command-line interpreter using pipes, as opposed to using a single monolithic program that includes all of the same functionality. These concepts are collectively known as the [...] "Unix philosophy". Brian Kernighan and Rob Pike summarize this in The Unix <b>Programming</b> <b>Environment</b> as [...] "the idea that the power of a system comes more from the relationships among programs than from the programs themselves".|$|E
40|$|Novice programmers {{generally}} have difficulty learning to program {{and one of}} the problems contributing towards this is the <b>program</b> development <b>environment</b> used at tertiary institutions. A number of pedagogical <b>program</b> development <b>environments</b> have been developed specifically for novice programmers, but these have not been compared experimentally with professional <b>program</b> development <b>environments.</b> A study was conducted that compared the perceptions of novice programmers using a representative professional <b>program</b> development <b>environment</b> to a pedagogical <b>program</b> development <b>environment</b> during an Introductory Programming module at a tertiary institution. It was found that the use of a pedagogical <b>program</b> development <b>environment</b> had a positive effect on the feelings of achievement and learning while learning to program, while the perceived ease of using the <b>program</b> development <b>environment</b> and the perceived difficulty of practical assignments were not affected...|$|R
50|$|Implementations of {{the concept}} {{can be found in}} various {{frameworks}} for many <b>programming</b> <b>environments.</b>|$|R
5000|$|Judging will be {{from the}} command line and not from any {{integrated}} <b>program</b> <b>environment.</b>|$|R
2500|$|Cocoa {{applications}} are typically developed using the development tools provided by Apple, specifically Xcode (formerly Project Builder) and Interface Builder, using the languages Objective-C or Swift. However, the Cocoa <b>programming</b> <b>environment</b> {{can be accessed}} using other tools, such as Clozure CL, LispWorks, Object Pascal, Python, Perl, Ruby, and AppleScript {{with the aid of}} bridge mechanisms such as PasCocoa, PyObjC, CamelBones, RubyCocoa, and a D/Objective-C Bridge. A Ruby language implementation named MacRuby, which removes the need for a bridge mechanism, was formerly developed by Apple, while Nu is a Lisp-like language that can be used with Cocoa with no bridge. [...] It is also possible to write Objective-C Cocoa programs in a simple text editor and build it manually with GNU Compiler Collection (GCC) or clang from the command line or from a makefile.|$|E
2500|$|ArcGIS 9 was {{released}} in May 2004, which included ArcGIS Server and ArcGIS Engine for developers. The ArcGIS 9 release includes a geoprocessing environment that allows execution of traditional GIS processing tools (such as clipping, overlay, and spatial analysis) interactively or from any scripting language that supports COM standards. [...] Although {{the most popular of}} these is Python, others have been used, especially Perl and VBScript. [...] ArcGIS 9 includes a visual <b>programming</b> <b>environment,</b> similar to ERDAS IMAGINE's Model Maker (released in 1994, v8.0.2). The Esri version is called ModelBuilder and as does the ERDAS IMAGINE version allows users to graphically link geoprocessing tools into new tools called models. [...] These models can be executed directly or exported to scripting languages which can then execute in batch mode (launched from a command line), or they can undergo further editing to add branching or looping.|$|E
5000|$|An {{experimental}} {{version of}} Etoys, a <b>programming</b> <b>environment</b> for children, used Tweak instead of Morphic. Etoys {{was a major}} influence on a similar Squeak-based <b>programming</b> <b>environment</b> known as Scratch.|$|E
5000|$|A {{variety of}} data {{parallel}} <b>programming</b> <b>environments</b> are available today, {{most widely used}} of which are: ...|$|R
50|$|The syntax and {{conventions}} {{used in these}} examples coincide with that of other <b>programming</b> <b>environments</b> as well.|$|R
40|$|This {{document}} and The <b>Programming</b> <b>Environments</b> Manual {{distinguish between the}} three levels, or <b>programming</b> <b>environments,</b> of the PowerPC architecture, which are as follows:. PowerPC user instruction set architecture (UISA) [...] -The UISA defines {{the level of the}} architecture to which user-level software should conform. The UISA defines the base user-level instruction set, user-level registers, data types, memory conventions, and the memory and programming models seen by application programmer...|$|R
50|$|For end-users, Cocoa {{applications}} are those written using the Cocoa <b>programming</b> <b>environment.</b> Such applications {{usually have a}} distinctive feel, since the Cocoa <b>programming</b> <b>environment</b> automates many aspects of an application to comply with Apple's human interface guidelines.|$|E
50|$|Lava is an experimental, visual object-oriented, interpreter-based {{programming}} language with an associated <b>programming</b> <b>environment</b> (Lava <b>Programming</b> <b>Environment</b> or LavaPE) that uses structure editors instead of text editors. Only comments, constants, and new identifiers may be entered as text.|$|E
5000|$|GNU Radio is a Free/Libre toolkit {{that can}} be used to develop {{software-defined}} radios. This framework uses a combination of C++ and Python to optimize DSP performance while providing an easy-to-use application <b>programming</b> <b>environment.</b> GNU Radio Companion is a graphical <b>programming</b> <b>environment</b> provided with GNU Radio.|$|E
50|$|While some {{generative}} art {{exists as}} static artifacts produced by previous unseen processes, {{it can also}} be viewed developing in real-time. Typically such works are never displayed the same way twice. For example, graphical <b>programming</b> <b>environments</b> (e.g. Max/Msp, Pure Data or vvvv) as well as classic yet user-friendly <b>programming</b> <b>environments</b> such as Processing or openFrameworks are used to create real-time generative audiovisual artistic expressions in the Demoscene and in VJ-culture.|$|R
2500|$|In linear text systems, such {{as those}} used in most {{computer}} <b>programming</b> <b>environments,</b> {{a variety of methods}} have arisen: ...|$|R
50|$|Microsoft Analysis Services {{supports}} {{different sets}} of APIs and object models for different operations and in different <b>programming</b> <b>environments.</b>|$|R
