99|301|Public
5000|$|Pull: {{the target}} that is {{immediately}} downstream from the source, prepares {{a request for}} data from the source. The downstream target delivers the snapshot to the next target, as in the <b>push</b> <b>model.</b>|$|E
5000|$|Neglect {{of methods}} of production: Rather than capital formation, it is {{productive}} techniques which determine {{the success of}} a country in economic development. The big <b>push</b> <b>model</b> ignores productive techniques in its support for capital formation and industrialisation.|$|E
50|$|The big <b>push</b> <b>model</b> is {{a concept}} in {{development}} economics or welfare economics that emphasizes that a firm's decision whether to industrialize or not depends on its expectation of what other firms will do. It assumes economies of scale and oligopolistic market structure and explains when industrialization would happen.|$|E
40|$|A {{user-controlled}} breath-first {{search method}} is discussed for generating {{qualitative and quantitative}} advice in tactical and strategic state-oriented planning situations that are modelled with a network structure. An application within the Manpower Planning System FORMASY is demonstrated. Keywords: Decision support systems, Manpower planning, <b>Push</b> <b>models,</b> Pull models...|$|R
40|$|We {{consider}} the collective quantization of translational {{degrees of freedom}} of the hedgehog soliton in the Nambu-Iona-Lasinio Model, We show explicitly that for an O(4) -invariant regularization scheme in Euclidean space-time the translational mas obtained in the penurbative <b>pushing</b> <b>model</b> coincides with the static mas. Zeropoint energies for translation and rotation are evaluated numerically. The nucleon mass appears to be around 900 MeV...|$|R
40|$|Humans often push when {{grasping}} or lifting is inconvenient or infeasible, because pushing requires fewer {{contacts and}} fights against {{only a fraction}} of the object's weight. However, pushing results are hard to predict, because the physical parameters that govern the pushing motion are difficult to measure. We derived a physics-based box <b>pushing</b> <b>model</b> and implemented a feedback-based pushing pipeline using the model. Experimental results show that our <b>pushing</b> <b>model</b> has fair predictive power and our pushing pipeline can reliably push the target to the goal. We compared our physics-based method to a minimalistic baseline pushing method and showed that our method is more accurate and reliable. by Huan Liu. Thesis (M. Eng.) [...] Massachusetts Institute of Technology, Dept. of Electrical Engineering and Computer Science, 2011. Page numbering occurs only at the beginning of each chapter, the contents and the bibliography. Cataloged from PDF version of thesis. Includes bibliographical references (p. 67 -[70]) ...|$|R
50|$|With {{the release}} of ERDAS Imagine 2013 in December 2012, the Model Maker’s {{graphical}} user interface was changed and its architecture was rewritten from a <b>push</b> <b>model</b> to a pull model. This re-architecture allows many complex models to be processed directly to a viewer in near-real time. A Python capability was added at this time.|$|E
50|$|Forget the Rules was an Australian {{short form}} episodic comedy-drama, which ran for two seasons from 2005 to 2007. It {{was the first}} scripted drama {{in the world to}} {{simultaneously}} broadcast over broadband, mobile phones and television. It employed the <b>push</b> <b>model</b> of crossmedia, {{and was one of the}} more successful models of an often failed interactive format that included audience input into the script and submitting visual elements as part of a tight weekly production cycle. It was conceived and piloted in Australia during 2004. In Canada, Season 1 has been broadcast on Movieola.|$|E
5000|$|Content {{awareness}} (or [...] "content collection") {{is usually}} either a push or pull model. In the <b>push</b> <b>model,</b> a source system is {{integrated with the}} search engine {{in such a way}} that it connects to it and pushes new content directly to its APIs. This model is used when realtime indexing is important. In the pull model, the software gathers content from sources using a connector such as a web crawler or a database connector. The connector typically polls the source with certain intervals to look for new, updated or deleted content.|$|E
40|$|Abslracl. We {{consider}} the collective quanlization of translational {{degrees of freedom}} of the hedgehog soliton in the Nambu-Iona-Lasinio Model, We show explicitly thal for an O(4) -invariant regularization scheme in Euclidean space-time the translational mas obtained in the penurbative <b>pushing</b> <b>model</b> coincides with the static mas. Zeropoint energies for translation and rotation are evaluated numerically. The nucleon mass appears to be around 900 MeV. 1...|$|R
40|$|A simple {{application}} of big-push reasoning suggests that natural resource booms can be important catalysts for development in poorer countries. In this paper we present evidence from seven Latin Amer-ican countries that natural resource booms are sometimes accompa-nied by declining per-capita GDP. We present a model with natual resources, increasing returns {{in the spirit}} of big <b>push</b> <b>models,</b> and expectations to clarify some of the reasons this may happen. ...|$|R
50|$|Traditional KM mainly {{undertake}} a <b>pushing</b> <b>model</b> which sets the users in a passive way by simply providing content and expecting {{the learning process}} will happen. This model {{is not sufficient to}} improve learners' motivation. Considering the dynamic and flexible nature of learning process, LM and KM approaches require a shift in emphasis from a knowledge-push to a knowledge-pull model. PKN provides a more attractive platform, where users could locate content only with their needs from information repositories.|$|R
50|$|As an {{alternative}} to the TCP transport, the XMPP community has also developed an HTTP transport for web clients as well as users behind restricted firewalls. In the original specification, XMPP could use HTTP in two ways: polling and binding. The polling method, now deprecated, essentially implies messages stored on a server-side database are being fetched (and posted) regularly by an XMPP client by way of HTTP 'GET' and 'POST' requests. The binding method, implemented using Bidirectional-streams Over Synchronous HTTP (BOSH), allows servers to push messages to clients as soon as they are sent. This <b>push</b> <b>model</b> of notification is more efficient than polling, where many of the polls return no new data.|$|E
50|$|Economic {{modernization}} theories such as Rostow's stages model {{have been}} heavily {{inspired by the}} Harrod-Domar model which explains in a mathematical way {{the growth rate of}} a country in terms of the savings rate and the productivity of capital. Heavy state involvement has often been considered necessary for successful development in economic modernization theory; Paul Rosenstein-Rodan, Ragnar Nurkse and Kurt Mandelbaum argued that a big <b>push</b> <b>model</b> in infrastructure investment and planning was necessary for the stimulation of industrialization, and that the private sector {{would not be able to}} provide the resources for this on its own.Another influential theory of modernization is the dual-sector model by Arthur Lewis. In this model Lewis explained how the traditional stagnant rural sector is gradually replaced by a growing modern and dynamic manufacturing and service economy.|$|E
40|$|In this paper, {{we study}} the service request (ticket) allo-cation problem which arises in every IT service {{delivery}} or-ganization. We {{refer to this}} problem as Ticket Allocation Problem (TAP). We first show that TAP is an instance of the online scheduling problem on unrelated machines, which {{is known to be}} a hard problem. Next, we describe a base-line model, namely <b>push</b> <b>model,</b> that deals with the TAP. The <b>push</b> <b>model</b> is an industry wide standard and can be used with any known online scheduling algorithm for unre-lated machines. To elaborate this further, we discuss a well known Generalized List Scheduling algorithm which can be used by the <b>push</b> <b>model.</b> We prove a bound for this algo-rithm’s competitive ratio which beats all the known bounds. We show that <b>push</b> <b>model</b> suffers from an inherent ineffi-ciency due to scheduler having incomplete and imprecise information regarding agents ’ proficiency. Finally, we show that if the scheduling algorithm used by the <b>push</b> <b>model</b> can be converted into a truthful auction mechanism then all the inefficiencies of the <b>push</b> <b>model</b> can be overcome. We re-fer to the resulting model as the pull model. To illustrate the idea, we map the Generalized List Scheduling algorithm into a truthful auction mechanism. Through simulation ex-periments, we show that the auction based pull model re-sults in higher efficiency than the <b>push</b> <b>model.</b> 1...|$|E
5000|$|Resurfice Corporation is a {{manufacturer}} of ice resurfacing equipment based in Elmira, Ontario, Canada. Their Olympia brand product line includes <b>push</b> <b>models</b> through full size models built on a Chevy Powertrain. [...] In early 2009, Don Schlupp, the company's director of sales and marketing, said {{that the company had}} about a 70% share of the market in North America, but later that year the company said it produces about the same number of machines as Zamboni.|$|R
40|$|Abstract—Dynamic {{information}} management via Distributed Hash Tables (DHT) {{is an important}} problem which revolves around the trade-off between data freshness and the overhead due to information updates. We propose two different algorithms based on information pull and information <b>push</b> <b>models,</b> that enable dynamic information dissemination with low overhead over a DHT. We exploit the concept of popularity of specific items, which is evaluated by performing a real-time analysis of the query distribution, and allows to decrease a significant fraction of messages without impairing the query resolution process. We have measured the overhead savings and compared {{the performance of the}} two approaches by extensive simulations using real workload traces. I...|$|R
40|$|Supply chain {{management}} {{is a topic}} that many practitioners and students generally find difficult to understand (Boudette, 2005). The authors present a supply chain game that they have found {{to be an effective}} tool to increase student interest in and comprehension of supply {{chain management}}. The supply chain game literature is briefly reviewed. The poker chip game is discussed with respect to the well-known Beer Game. The poker chip game is a multi-product, multi-customer, multi-echelon, stochastic supply chain game used to teach the problems of traditional <b>push</b> <b>models</b> (economic order quantity/reorder point and Min-Max inventory models) and the ele-ments of the new pull models (Just inTime and Theory of Constraints). 1...|$|R
40|$|We {{study the}} {{relation}} between the performance of the randomized rumor spreading (<b>push</b> <b>model)</b> in a d-regular graph G and the performance of the same algorithm in the percolated graph G_p. We show that if the <b>push</b> <b>model</b> successfully broadcast the rumor within T rounds in the graph G then only (1 + ϵ) T rounds are needed to spread the rumor in the graph G_p when T = o(pd) ...|$|E
40|$|This paper {{addresses}} the following fundamental problem: Suppose {{that in a}} group of n people, where each person knows all other group members, a single person holds a piece of information that must be disseminated to everybody within the group. How should the people propagate the information so that after short time everyone is informed? The classical approach, known as the <b>push</b> <b>model,</b> requires that in each round, every informed person selects some other person in the group at random, whom it then informs. In a different model, known as the quasirandom <b>push</b> <b>model,</b> each person maintains a cyclic list, i. e., permutation, of all members in the group (for instance, a contact list of persons). Once a person is informed, it chooses a random member in its own list, and from that point onwards, it informs a new person per round, in the order dictated by the list. In this paper we show that with probability 1 − o(1) the quasirandom protocol informs everybody in (1 ± o(1)) log 2 n + ln n rounds; furthermore we also show that this bound is tight. This result, together with previous work on the randomized <b>push</b> <b>model,</b> demonstrates that irrespectively of the choice of lists, quasirandom broadcasting is as fast as broadcasting in the randomized <b>push</b> <b>model,</b> up to lower order terms. At the same time it reduces the number of random bits from O(log 2 n) to only ⌈log 2 n ⌉ per person. ...|$|E
40|$|MapReduce {{has become}} an {{important}} distributed processing model for large-scale data-intensive applications like data mining and web indexing. Hadoop–an open-source implementation of MapReduce is widely used for short jobs requiring low response time. In this paper, we proposed a new preshuffling strategy in Hadoop to reduce high network loads imposed by shuffle-intensive applications. Designing new shuffling strategies is very appealing for Hadoop clusters where network interconnects are performance bottleneck when the clusters are shared among {{a large number of}} applications. The network interconnects are likely to become scarce resource when many shuffle-intensive applications are sharing a Hadoop cluster. We implemented the <b>push</b> <b>model</b> along with the preshuffling scheme in the Hadoop system, where the 2 -stage pipeline was incorporated with the preshuffling scheme. We implemented the <b>push</b> <b>model</b> and a pipeline along with the preshuffling scheme in the Hadoop system. Using two Hadoop benchmarks running on the 10 -node cluster, we conducted experiments to show that preshuffling-enabled Hadoop clusters are faster than native Hadoop clusters. For example, the <b>push</b> <b>model</b> and the preshuffling scheme powered by the 2 -stage pipeline can shorten the execution times of the WordCount and Sort Hadoop applications by an average of 10 % and 14 %, respectively...|$|E
50|$|As an {{alternative}} to analysis/forecast cycles, data assimilation can proceed by some sort of continuous process such as nudging, where the model equations themselves are modified to add terms that continuously <b>push</b> the <b>model</b> towards the observations.|$|R
50|$|For instance, if Othismos were to {{accurately}} describe a physical pushing match, {{it would be}} logical to state that the deeper phalanx would always win an engagement since the physical strength of individuals would not compensate for even one additional rank on the enemy side. However, there are numerous examples of shallow phalanxes holding off an opponent. For instance, at Delium in 424 the Athenian left flank, a formation eight men deep, held off a formation of Thebans twenty-five deep without immediate collapse. It is difficult with the physical <b>pushing</b> <b>model</b> to imagine eight men withstanding the pushing force of twenty-five opponents for a matter of seconds, let alone half the battle.|$|R
25|$|Ford <b>pushed</b> another 800 <b>models</b> on Hertz {{with black}} paint, gold stripes and black interior, {{as well as}} {{automatic}} transmissions.|$|R
40|$|Open {{innovation}} is increasingly being adopted {{in business and}} describes {{a situation in which}} firms exchange ideas and knowledge with external participants, such as customers, suppliers, partner firms, and universities. This article extends the concept of open innovation with a <b>push</b> <b>model</b> of open innovation: knowledge is voluntarily created outside a firm by individuals and organisations who proceed to push knowledge into a firm’s open innovation project. For empirical analysis, we examine source code and newsgroup data on the Eclipse Development Platform. We find that outsiders invest as much in the firm’s project as the founding firm itself. Based on the insights from Eclipse, we develop four propositions: ‘preemptive generosity’ of a firm, ‘continuous commitment’, ‘adaptive governance structure’, and ‘low entry barrier’ are contexts that enable the <b>push</b> <b>model</b> of open innovation...|$|E
40|$|We {{present the}} {{architecture}} of UbiData an adaptable framework for mobile computing information dissemination systems. Applications built upon this framework communicate using dynamic channels, an information <b>push</b> <b>model</b> with extensions to capture mobilityspecific requirements. We also introduce the development process for UbiData's applications. Keywords: Mobile computing applications, Information-push, Object-oriented development. 1...|$|E
3000|$|... n-tier <b>Push</b> <b>Model.</b> This {{is similar}} to the {{architecture}} employed by Collectd and an extension of the 2 -tier <b>push</b> <b>model.</b> Rather than pushing directly to the top level server monitored VMs push state to an intermediate monitoring server. The intermediary, performs analysis on the monitoring state and in turn transmits the outcome of the analysis to the top level monitoring server. This forms a three level tree. In real world implementations of this architecture the tree can have arbitrary depth, with several levels of intermediary monitoring servers. This is not, however, common and thus our implementation is of the typical 3 -tier variety. This design is a more scalable variant of the 2 -tier <b>push</b> <b>model</b> and alleviates much of the pressure on the top level monitoring server. The top level server is however still responsible for assigning monitoring servers to clients, aggregating state from monitoring servers and still receives significant volumes of messages. We evaluate two variants of this scheme: a fixed and a variable version. The fixed version uses 11 VMs, 1 as the root monitoring server and 10 as intermediaries. This variant is still quite common in real world tools, {{despite the fact that it}} has no way to accommodate for elasticity. The second variant, instantiates additional VMs as is necessary; doing so when the current pool of monitoring servers is overloaded.|$|E
40|$|PRELIMINARY AND INCOMPLETE: PLEASE DO NOT CITE Big <b>Push</b> <b>models</b> {{suggest that}} local product demand can create {{multiple}} labor market equilibria: one featuring high wages, formalization, and high demand {{and one with}} low wages, informality, and low demand. I demonstrate that minimum wages may coordinate development at the high wage equilibrium. Using data from 1990 s Indonesia, where minimum wages increased in a varied way, I develop a difference in spatial differences estimator which weakens the common trend assumption of difference in differences. Estimation reveals strong trends {{in support of a}} big push: formal employment increases and informal employment decreases in response to the minimum wage. Local product demand also increases, and this formalization occurs only in the non-tradable, industrializable industries suggested by the model (while employment in tradable and non-industrializable industry also conform to model predictions). ...|$|R
40|$|The {{results of}} wind tunnel tests of two {{propeller}} driven canard general aviation aircraft models at high angles of attack are reported. Both tractor and pusher prop configurations were examined. Angles of attack of - 6 to 40 deg were {{used with the}} <b>pusher</b> <b>model</b> at Re of 1, 600, 000, and from - 30 to 90 deg and Re of 550, 000 for the tractor model. The tests showed that the canard would stall long before the wing and produce a nose-down tendency, thus effectively keeping the aircraft out of the stall regime. However, a sequence of pilot actions or design {{factors such as the}} airfoils, relative geometry of the canard and wing, the propeller location and the center of gravity location could introduce a wide variance in stall characteristics from one aircraft to another...|$|R
40|$|While recent {{developments}} {{in the field of}} ventricular blood flow simulations have <b>pushed</b> <b>modeling</b> to increasingly high levels of accuracy, there has been a steep cost in computation time. Current state-of-the-art simulators take days to run, which is impractical for use in a clinical setting. In this paper, we describe novel adaptations of the SPH algorithm to this problem to achieve an order of magnitude faster performance, while maintaining accuracy in the flow. By constructing appropriate boundary particles and wall motion and adding a fast collision detection component to an existing SPH architecture, our system is able to simulate a cardiac cycle in as little as 30 minutes. This breakthrough will, in the near future, allow the useful simulation of blood flow and its related characterization for clinically useful applications. Index Terms — Blood flow, CT, cardiac, SPH 1. INTRODUCTION AND RELATE...|$|R
40|$|Broadcasting {{algorithms}} {{are important}} {{building blocks of}} distributed systems. In this work we investigate the typical performance of the classical and well-studied <b>push</b> <b>model.</b> Assume that initially one node in a given network holds some piece of information. In each round, {{every one of the}} informed nodes chooses independently a neighbor uniformly at random and transmits the message to it. In this paper we consider random networks where each vertex has degree d, which is at least 3, i. e., the underlying graph is drawn uniformly at random from the set of all d-regular graphs with n vertices. We show that with probability 1 - o(1) the <b>push</b> <b>model</b> broadcasts the message to all nodes within (1 + o(1)) C_d ln n rounds, where C_d = 1 / ln(2 (1 - 1 /d)) - 1 /(d ln(1 - 1 /d)). In particular, we can characterize precisely the effect of the node degree to the typical broadcast time of the <b>push</b> <b>model.</b> Moreover, we consider pseudo-random regular networks, where we assume that the degree of each node is very large. There we show that the broadcast time is (1 +o(1)) C ln n with probability 1 - o(1), where C= 1 / ln 2 + 1, is the limit of C_d as d grows. Comment: 18 page...|$|E
40|$|We {{consider}} the popular and well-studied <b>push</b> <b>model,</b> {{which is used}} to spread information in a given network with n vertices. Initially, some vertex owns a rumour and passes it to one of its neighbours, which is chosen randomly. In each of the succeeding rounds, every vertex that knows the rumour informs a random neighbour. It has been shown on various network topologies that this algorithm succeeds in spreading the rumour within O(log n) rounds. However, many studies are quite coarse and involve huge constants that do not allow for a direct comparison between different network topologies. In this paper, we analyse the <b>push</b> <b>model</b> on several important families of graphs, and obtain tight runtime estimates. We first show that, for any almost-regular graph on n vertices with small spectral expansion, rumour spreading completes after log(2) n + logn + o(log n) rounds with high probability. This is the first result that exhibits a general graph class for which rumour spreading is essentially as fast as on complete graphs. Moreover, for the random graph G(n, p) with p = c log n/n, where c > 1, we determine the runtime of rumour spreading to be log(2) n + gamma(c) log n with high probability, where gamma(c) = c log(c/(c - 1)). In particular, this shows that the assumption of almost regularity in our first result is necessary. Finally, for a hypercube on n = 2 (d) vertices, the runtime is with high probability at least (1 + beta). (log(2) n + log n), where beta > 0. This reveals that the <b>push</b> <b>model</b> on hypercubes is slower than on complete graphs, and thus shows that the assumption of small spectral expansion in our first result is also necessary. In addition, our results combined with the upper bound of O(log n) for the hypercube see [11]) imply that the <b>push</b> <b>model</b> is faster on hypercubes than on a random graph G(n, c log n/n), where c is sufficiently close to 1...|$|E
3000|$|... 2 -tier <b>push</b> <b>model.</b> This is the {{architecture}} employed by collectd, statsD and many monitoring {{as a service}} tools. Monitored clients are provided the address of a monitoring server to which they push monitoring state at their own prerogative. The single central monitoring server acts as a sink; receiving monitoring state and analysing the incoming data.|$|E
40|$|Language {{recognition}} {{with support}} vector machines and shifteddelta cepstral features {{has been an}} excellent performer in NISTsponsored language evaluation for many years. A novel improvement of this method has been the introduction of hybrid SVM/GMM systems. These systems use GMM supervectors as an SVM expansion for classification. In prior work, methods for scoring SVM/GMM systems have been introduced based upon either standard SVM scoring or GMM scoring with a <b>pushed</b> <b>model.</b> Although prior work showed experimentally that GMM scoring yielded better results, no framework was available to explain the connection between SVM scoring and GMM scoring. In this paper, we show that there are interesting connections between SVM scoring and GMM scoring. We provide a framework both theoretically and experimentally that connects the two scoring techniques. This connection should {{provide the basis for}} further research in SVM discriminative training for GMM models. Index Terms — language recognition, support vector machines 1...|$|R
40|$|The {{nonlinear}} {{distribution and}} market share curve {{as well as}} the <b>push</b> and pull <b>model</b> developed by Farris et at. (1989) have been investigated in the Dutch detergent market. The total detergent market {{as well as some of}} its market segments were studied: the data supported the <b>push</b> and pull <b>model.</b> The data also revealed that the detergent market is characterized by a specific market share configuration: extensions of the top brands quickly gain maximum distribution which might explain their higher market share. Implications for marketing management and marketing theory are discussed...|$|R
50|$|Honeywell {{was chosen}} for several reasons, but {{the ability to get}} to market the quickest as well as their more {{attractive}} financial <b>model</b> <b>pushed</b> the decision in their favor.|$|R
