7|3525|Public
50|$|Although antifuse-based PROM {{has been}} {{available}} for decades, it wasn’t available in standard CMOS until 2001 when Kilopass Technology Inc. patented 1T, 2T, and 3.5T antifuse bit cell technologies using a standard CMOS process, enabling integration of PROM into logic CMOS chips. The first process node antifuse can be implemented in standard CMOS is 0.18 um. Since the gate oxide breakdown {{is less than the}} junction breakdown, special diffusion steps were not required to create the antifuse <b>programming</b> <b>element.</b> In 2005, a split channel antifuse device was introduced by Sidense. This split channel bit cell combines the thick (IO) and thin (gate) oxide devices into one transistor (1T) with a common polysilicon gate.|$|E
5000|$|WHUD {{is one of}} the few {{stations}} in the Hudson Valley (along with co-owned WSPK) that is live 24/7. This allows the station to maintain a local <b>programming</b> <b>element</b> including breaking news, traffic and weather updates that voice tracked/automated station cannot. WHUD serves as the primary (LP-1) Emergency Alert System (EAS) station for Westchester, Rockland, Putnam, and Orange Counties. [...] As such it is the first media outlet in the Indian Point Nuclear Power Plant public warning system. [...] Prior to the studio move to Fishkill, New York these duties fell to WABC (AM) in New York City because WHUD's studio was located within the 10 mile Emergency Planning Zone around the Indian Point Energy Center. [...] In July 2007 Pamal spent approximately $500,000 to upgrade WHUD's transmitter site and add redundancies to its technical facility to ensure that the station could meet its public warning responsibilities.|$|E
5000|$|On June 27, 2012 Sevendust {{announced}} that they would enter the studio for their next album on September 5, 2012. They entered Architekt Music studios in Butler, New Jersey with engineer Mike Ferretti. Sevendust has completed recording its ninth album for an early 2013 release. In October 2012 interview, Lowery described the album as [...] "...a basic Sevendust record", stating [...] "There's nothing, like, too completely different than anything we've done before. It's got a darker vibe to it. We've got {{a good amount of}} the <b>programming</b> <b>element</b> in there. It's {{a lot of what we}} do. it's heavy and it's got its melodic element in it". Additionally, he discussed the possibility of touring in early 2013 with Lacuna Coil.Lowery later confirmed the album's title to be Black Out the Sun as well. Sevendust announced they will release the album on their own 7Bros. Records label (through Warner Music Group's Independent Label Group) on March 26, 2013. The album's debut single, [...] "Decay" [...] was released to radio and retail outlets on January 22, 2013. Sevendust and Coal Chamber have announced a co-headlining tour around the United States that begins on March 28 and runs through April 28, 2013.|$|E
40|$|The large space {{telescope}} (LST) pointing control system (PCS) advanced technical development (ATD) program is described. The approach used {{is to describe}} the overall PCS development effort, showing how the analytical ATD <b>program</b> <b>elements</b> fit into it. Then the analytical ATD <b>program</b> <b>elements</b> are summarized...|$|R
5000|$|Establishing {{advanced}} {{modeling and}} simulation <b>program</b> <b>elements</b> ...|$|R
5000|$|Additional <b>program</b> <b>elements</b> include experiential {{learning}} opportunities such as: ...|$|R
40|$|Presented at the 2 nd Web Audio Conference (WAC), April 4 - 6, 2016, Atlanta, Georgia. This paper {{presents}} an interactive graphical programming environment for EarSketch, using Blockly and Web Audio API. This visual <b>programming</b> <b>element</b> sidesteps syntac- tical challenges common to learning text-based languages, thereby targeting {{a wider range}} of users in both informal and academic settings. The implementation allows seamless integration with the existing EarSketch web environment, saving block-based code to the cloud as well as exporting it to Python and JavaScript...|$|E
40|$|Abstract—Boolean {{expression}} {{is a basic}} <b>programming</b> <b>element</b> {{used to evaluate the}} truth-values of conditions or their combinations. While Boolean expressions may have complicated logical structures, instrumenting them often needs heavyweight transformation to source code or work with low-level program implementation, which results in cumbersome code and great difficulties to maintenance. As a result, previous instrumentation is often conducted using automatic mechanism, left as the last integration step, and needs to be redone once the source code has changes. It is inflexible and not interactivable for collaborative work. In this paper, we compare several existing popular instrumentation methods and propose a friendly approach, which adds least prefix and postfix to Boolean expressions, simply wraps all conditions, and preserves all Boolean operators if any. Our method works at source-code level yet has a macro-like grammar. It is human maintainable so that programmers may manually and cooperatively modify code by instrumenting interested Boolean expressions like operating macros. We elaborate on the grammar of our method and give empirical evaluation to its performance. Our method has been used in some realistic industrial and research projects successfully. Key words-Boolean expression, instrumentatio...|$|E
40|$|IEEE Wuhan Section; Wuhan University; James Madison University; University of Wisconsin-La Crosse; Microsoft Research AsiaBoolean {{expression}} {{is a basic}} <b>programming</b> <b>element</b> {{used to evaluate the}} truth-values of conditions or their combinations. While Boolean expressions may have complicated logical structures, instrumenting them often needs heavyweight transformation to source code or work with low-level program implementation, which results in cumbersome code and great difficulties to maintenance. As a result, previous instrumentation is often conducted using automatic mechanism, left as the last integration step, and needs to be redone once the source code has changes. It is inflexible and not interactivable for collaborative work. In this paper, we compare several existing popular instrumentation methods and propose a friendly approach, which adds least prefix and postfix to Boolean expressions, simply wraps all conditions, and preserves all Boolean operators if any. Our method works at source-code level yet has a macro-like grammar. It is human maintainable so that programmers may manually and cooperatively modify code by instrumenting interested Boolean expressions like operating macros. We elaborate on the grammar of our method and give empirical evaluation to its performance. Our method has been used in some realistic industrial and research projects successfully. © 2010 IEEE...|$|E
5000|$|Playing music, {{commercials}} and <b>programming</b> <b>elements</b> at appropriate times ...|$|R
40|$|Directive and Handbook 5. 9 {{are being}} issued to {{establish}} the process NRC staff will follow to determine when a proposed or final <b>program</b> <b>element</b> is required for compatibility or health and safety, and to identify Commission <b>program</b> <b>elements</b> needed for compatibility or health and safety. Office of State Program...|$|R
5000|$|... #Subtitle level 3: By account, program {{area and}} <b>program</b> <b>element</b> ...|$|R
40|$|CMOS analog {{multiplier}} {{is a very}} important building block and <b>programming</b> <b>element</b> in analog signal processing. Although high-performance multipliers using bipolar transistors have been available for 40 years, CMOS multiplier implementation is still a challenging subject especially for low-power and low-noise circuit design. Since the supply voltage is normally fixed for {{analog multiplier}} structures, we use the total current to represent the power dissipation. Our basic idea for low power design of analog multipliers is to fit most of the transistors into the linear region, {{while at the same time}} keeping the drain-to-source voltage as low as possible to decease the drain current. And also, we use PMOS transistors for the devices working in the saturation region to further decrease the drain current and improve the linearity performance. Two low power CMOS analog multiplier designs have been proposed in this thesis. We gave detailed performance analysis and some design considerations for these structures. Cadence Hspice simulation verified our analysis. To ensure a fair comparison, we also simulated the performance of a previous multiplier structure, which was considered to be one of the best multiplier structures with low power and low noise performance. Extensive experiments and comparison for these structures show that the proposed CMOS analog multipliers have much less power dissipation than that of previous structures, while at the same time, satisfying other performance requirements. The proposed analog multipliers would be good choices in the applications where low power dissipation is an important consideration. Dept. of Electrical and Computer Engineering. Paper copy at Leddy Library: Theses 2 ̆ 6 Major Papers - Basement, West Bldg. / Call Number: Thesis 2004. L 5. Source: Masters Abstracts International, Volume: 43 - 01, page: 0280. Adviser: Chunhong Chen. Thesis (M. A. Sc.) [...] University of Windsor (Canada), 2004...|$|E
50|$|The <b>Program</b> <b>Elements</b> Layer {{consists}} of the Code and Action packages.|$|R
5000|$|The {{allocation}} of FMF by account, program area and <b>program</b> <b>element</b> is: ...|$|R
40|$|A {{letter report}} {{issued by the}} Government Accountability Office with an {{abstract}} that begins "The Department of Defense (DOD) asked Congress for $ 73. 2 billion in fiscal year 2007 for research, development, testing, and evaluation (RDT&E). DOD organized this request using <b>program</b> <b>element</b> (PE) codes, which are designed to convey key information about the budget request. DOD also provides documents called budget exhibits detailing the activities for which funds are being requested. The National Defense Authorization Act for Fiscal Year 2006 mandated that GAO examine the <b>program</b> <b>elements</b> and budget exhibits. GAO assessed (1) whether the RDT&E <b>program</b> <b>element</b> code structure and the associated budget exhibits provide accurate, consistent, complete, and clear information, and (2) what factors contribute to any problems found. In conducting this review GAO analyzed all {{of the fiscal year}} 2007 <b>program</b> <b>element</b> codes and 47 budget exhibits. GAO also interviewed key DOD officials. ...|$|R
40|$|Abstract. Combining {{software-based}} and human-based {{services is}} crucial for several complex problems that cannot be solved using software-based services alone. In this paper, we present novel methods for modeling and developing hybrid compute units of software-based and human-based services. We discuss high-level <b>programming</b> <b>elements</b> for different types of software- and human-based service units and their relationships. In particular, we focus on novel <b>programming</b> <b>elements</b> reflecting hybridity, collectiveness and adaptiveness prop-erties, such as elasticity and social connection dependencies, and on-demand and pay-per-use economic properties, such as cost, quality and benefits, for com-plex problem solving. Based on these <b>programming</b> <b>elements,</b> we present pro-gramming constructs and patterns for building complex applications using hybrid services. ...|$|R
40|$|This report {{describes}} NASA's metric {{transition in}} terms of seven major <b>program</b> <b>elements.</b> Six are technical areas involving research, technology development, and operations; they are managed by specific Program Offices at NASA Headquarters. The final <b>program</b> <b>element,</b> Institutional Management, covers both NASA-wide functional management under control of NASA Headquarters and metric capability development at the individual NASA Field Installations. This area addresses issues common to all NASA <b>program</b> <b>elements,</b> including: Federal, state, and local coordination; standards; private industry initiatives; public-awareness initiatives; and employee training. The concluding section identifies current barriers and impediments to metric transition; NASA has no specific recommendations for consideration by the Congress...|$|R
5000|$|Keeping {{the show}} on time, and timing out to news and other <b>programming</b> <b>elements</b> ...|$|R
40|$|<b>Program</b> <b>Elements.</b> Contents: Draft {{revision}} showing mark-up of FSME Procedure SA- 200. Background: This procedure {{establishes the}} compatibility {{and health and}} safety components assigned to U. S. Nuclear Regulatory Commission (NRC) regulations and <b>program</b> <b>elements</b> as determined in accordance with Management Directive and Handbook (MD) 5. 9, Adequacy and Compatibility of Agreement State Programs. This procedure is being updated to reflec...|$|R
50|$|Security - {{rules that}} detect <b>programming</b> <b>elements</b> that leave your {{assemblies}} vulnerable to malicious users or code.|$|R
5000|$|Soviet Cybernetics Technology: III, <b>Programming</b> <b>Elements</b> of the BESM, STRELA, Ural, M-3, and Kiev Computers. - 1963 ...|$|R
3000|$|... (direct {{correspondence}}): {{is there}} any correspondence between static location of warnings and <b>program</b> <b>elements</b> with mutations’ concentration? [...]...|$|R
5000|$|The Fatality Assessment and Control Evaluation (FACE) program's goal is the {{prevention}} of occupational fatality. <b>Program</b> <b>elements</b> include: ...|$|R
40|$|The {{availability}} of real-time information on sea ice conditions in ice covered seas {{has always been}} important, not only to strategic military operations, but to the economies of those countries that border the Arctic and its marginal seas. Knowledge of the thickness and movement of sea ice {{as well as the}} locations of open water is required for traversing the Arctic whether in a drill ship, in a cargo vessel or in an ice strengthened ship such as a Coast Guard ice breaker. This work has been funded through the Office of Naval Research’s Navy Ocean Modeling and Prediction <b>Program</b> (<b>program</b> <b>element</b> 602435), the Office of Naval Research’s High Latitude Dynamics <b>Program</b> (<b>program</b> <b>element</b> 61153) and the Naval Space and Warfare Systems Command (<b>program</b> <b>element</b> 603207 N) ...|$|R
50|$|July 1974 - April 1975, <b>Program</b> <b>Element</b> Monitor for the Short-Range Attack Missile, Headquarters U.S. Air Force, Washington, D.C.|$|R
50|$|July 1987 - July 1990, <b>program</b> <b>element</b> monitor, F-117 and Tri-Service Standoff Attack Missile programs, the Pentagon, Washington, D.C.|$|R
5000|$|Visual {{programming}} - manipulating <b>program</b> <b>elements</b> graphically {{rather than}} by specifying them textually (e.g. Simulink); also termed diagrammatic programming ...|$|R
50|$|The {{following}} are the main <b>program</b> <b>elements</b> identified by the Coordination Committee and Biology Committee, which make up the SJRIP.|$|R
40|$|This {{document}} defines, documents, and allocates the Human Research Program (HRP) {{requirements to}} the HRP <b>Program</b> <b>Elements.</b> It also establishes {{the flow of}} requirements from the Human Exploration and Operations Mission Directorate (HEOMD) and the Office of the Chief Health and Medical Officer (OCHMO) down to the various HRP <b>Program</b> <b>Elements</b> to ensure that human research and technology countermeasure investments support the delivery of countermeasures and technologies that satisfy HEOMD's and OCHMO's exploration mission requirements...|$|R
40|$|During {{software}} development and maintenance stages, programmers have to frequently debug the software. One {{of the most}} difficult and complex tasks in the debugging activity is software fault localization. A commonly-used method to fix software fault is computing suspiciousness of <b>program</b> <b>elements</b> according to failed test executions and passed test executions. However, this technique does not give full consideration to dependences between <b>program</b> <b>elements,</b> thus its capacity for efficient fault localization is limited. Our research intends to introduce program slicing technique and statistical method which extracts dependencies between <b>program</b> <b>elements</b> and refines execution history, then builds program slicing spectra to rank suspicious elements by a statistical metric. We expect that our method will contribute directly to the improvement of the effectiveness and the accuracy of software fault localization and reduce the {{software development}} and maintenance effort and cost. © 2012 IEEE. IEEE Computer Society; ACM; University of Zurich (UZH), Department of Informatics; Technical Council on Software Engineering (TCSE); Special Interest Group on Software Engineering (SIGSOFT); SI-SEDuring software development and maintenance stages, programmers have to frequently debug the software. One {{of the most difficult}} and complex tasks in the debugging activity is software fault localization. A commonly-used method to fix software fault is computing suspiciousness of <b>program</b> <b>elements</b> according to failed test executions and passed test executions. However, this technique does not give full consideration to dependences between <b>program</b> <b>elements,</b> thus its capacity for efficient fault localization is limited. Our research intends to introduce program slicing technique and statistical method which extracts dependencies between <b>program</b> <b>elements</b> and refines execution history, then builds program slicing spectra to rank suspicious elements by a statistical metric. We expect that our method will contribute directly to the improvement of the effectiveness and the accuracy of software fault localization and reduce the software development and maintenance effort and cost. © 2012 IEEE...|$|R
3000|$|... [...]. Based on this {{notation}} {{we use our}} formalism {{to describe}} by a graph the coverage relations between different <b>program</b> <b>elements.</b>|$|R
50|$|March 1980 - October 1980, Operational Support Aircraft <b>Program</b> <b>Element</b> Monitor, Air Staff Training Program, Headquarters U.S. Air Force, Washington, D.C.|$|R
50|$|July 1991 - August 1992, KC-10 <b>program</b> <b>element</b> monitor, Directorate for Requirements and Test, Headquarters Strategic Air Command, Offutt AFB, Neb.|$|R
50|$|A {{mapping of}} {{programs}} and projects to capabilities {{to show how the}} specific projects and <b>program</b> <b>elements</b> help to achieve a capability.|$|R
5000|$|May 1992 - July 1993, <b>Program</b> <b>Element</b> Monitor, Advanced Technology Programs, Assistant Secretary of the Air Force (Acquisition), the Pentagon, Washington, D.C.|$|R
