2226|1306|Public
25|$|Newton's {{theory of}} {{gravitation}} {{requires that the}} gravitational force be transmitted instantaneously. Given the classical assumptions {{of the nature of}} space and time before the development of General Relativity, a significant <b>propagation</b> <b>delay</b> in gravity leads to unstable planetary and stellar orbits.|$|E
2500|$|Simulation is an {{important}} feature in engineering systems or any system that involves many processes. [...] For example, in electrical engineering, delay lines {{may be used to}} simulate <b>propagation</b> <b>delay</b> and phase shift caused by an actual transmission line. [...] Similarly, dummy loads may be used to simulate impedance without simulating propagation, and is used in situations where propagation is unwanted. [...] A simulator may imitate {{only a few of the}} operations and functions of the unit it simulates. Contrast with: emulate.|$|E
2500|$|While {{in general}} {{comparators}} are [...] "fast," [...] their circuits {{are not immune}} to the classic speed-power tradeoff. High speed comparators use transistors with larger aspect ratios and hence also consume more power. Depending on the application, select either a comparator with high speed or one that saves power. For example, nano-powered comparators in space-saving chip-scale packages (UCSP), DFN or SC70 packages such as , , , [...] and [...] are ideal for ultra-low-power, portable applications. Likewise if a comparator is needed to implement a relaxation oscillator circuit to create a high speed clock signal then comparators having few nano seconds of <b>propagation</b> <b>delay</b> may be suitable. [...] (CML output), [...] (LVDS Output), [...] (CMOS output / TTL output), [...] (CMOS output / TTL output), [...] (TTL output), and [...] (PECL output) are examples of some good high speed comparators.|$|E
3000|$|... periods. In {{large-scale}} networks where <b>propagation</b> <b>delays</b> {{are typically}} non-negligible, the timing advance procedure, common in current cellular networks, was combined with CelFSync {{to combat the}} effect of <b>propagation</b> <b>delays.</b> By compensating intra-cell <b>propagation</b> <b>delays</b> with timing advance together with selecting cell edge users to participate in CelFSync, the detrimental effects of large <b>propagation</b> <b>delays</b> are substantially reduced. Simulation results demonstrated that the achieved inter-BS timing accuracy is always below [...]...|$|R
30|$|The {{accuracy}} of CelFSync {{is limited by}} <b>propagation</b> <b>delays,</b> similarly to the PCO model discussed in Section 2. In an indoor environment where distances between nodes are typically small, <b>propagation</b> <b>delays</b> are negligible. However, for cellular systems where the inter-BS distance is up to a few kilometers, Section 4.1 reveals that <b>propagation</b> <b>delays</b> cannot be ignored. A common procedure to align uplink transmissions is the timing advance procedure, described in Section 4.2. Timing advance is combined with CelFSync in Section 4.3 to achieve a timing accuracy within {{a fraction of the}} inter-BS <b>propagation</b> <b>delays.</b>|$|R
40|$|Abstract — The {{verification}} of timed digital circuits {{is an important}} issue. These circuits are composed by logical gates, each of them being associated with <b>propagation</b> <b>delays.</b> The analysis of such circuits is necessary to identify critical path and adjust the clock period of the circuit or to determine the stability period of input/ouput signals. These circuits are represented by a functional model described in VHDL and a timing model associating <b>propagation</b> <b>delays</b> to each functional block. This model is translated into timed automata formalism upon which classical simulation or model checking verification can be performed. This method rises two problems: 1) <b>Propagation</b> <b>delays</b> as-sociated to a gate depend on the transistor assembly and the manufacturer’s technology. How do we associate <b>propagation</b> <b>delays</b> to a logical gate? 2) How to automatically translate a VHDL functional description, combined with <b>propagation</b> <b>delays,</b> into timed automata? This paper addresses these two problems. It presents a method automating the {{verification of}} VHDL de-scriptions, augmented with interval bounded <b>propagation</b> <b>delays,</b> obtained by electrical simulation of the transistor model of the gates. I...|$|R
2500|$|In typical installations, subwoofers are {{physically}} {{separated from the}} rest of the speaker cabinets. [...] Because of <b>propagation</b> <b>delay,</b> their output may be somewhat out of phase from another subwoofer (on another channel) or slightly out of phase with the rest of the sound. [...] Consequently, a subwoofer's power amp often has a phase-delay adjustment (approximately 1 ms of delay is required for each additional foot of separation from the listener) which may improve performance of the system as a whole at subwoofer frequencies (and perhaps an octave or so above the crossover point). [...] However, the influence of room resonances (sometimes called standing waves) is typically so large that such issues are secondary in practice. Subwoofers are widely used in large concert and mid-sized venue sound reinforcement systems. Subwoofer cabinets are often built with a bass reflex port (i.e., a hole cut into the cabinet with a tube attached to it), a design feature which if properly engineered improves bass performance and increases efficiency.|$|E
5000|$|<b>Propagation</b> <b>delay</b> (distance {{divided by}} wave {{propagation}} speed) ...|$|E
5000|$|<b>Propagation</b> <b>delay</b> {{increases}} with operating temperature, as resistance of conductive materials tends to increase with temperature. Marginal increases in supply voltage can increase <b>propagation</b> <b>delay</b> since the upper switching threshold voltage, VIH (often {{expressed as a}} percentage of the high-voltage supply rail), naturally increases proportionately. [...] Increases in output load capacitance, often from placing increased fan-out loads on a wire, will also increase <b>propagation</b> <b>delay.</b> All of these factors influence each other through an RC time constant: any increase in load capacitance increases C, heat-induced resistance the R factor, and supply threshold voltage increases will affect whether more than one time constants are required to reach the threshold. If the output of a logic gate is connected to a long trace or used to drive many other gates (high fanout) the <b>propagation</b> <b>delay</b> increases substantially.|$|E
40|$|Abstract — Many of the {{distributed}} {{power control}} algorithms for wireless {{networks in the}} literature {{ignore the fact that}} while the algorithms necessitate communication among users, <b>propagation</b> <b>delays</b> exist in the network. This problem is of vital importance, since <b>propagation</b> <b>delays</b> are omnipresent in wireless networks. The Foschini-Miljanic algorithm is provably stable if there are no time-delays in the execution of the algorithm. However, since the interference measurements are fed back to the transmitter by its corresponding receiver, timedelays are inevitably introduced into the system. This work presents a more realistic version of the well known Foschini-Miljanic algorithm for Distributed Power Control since it considers the time-delays introduced to the system due to <b>propagation</b> <b>delays.</b> In both the continuous and discrete time cases we prove global stability of the system in the presence of <b>propagation</b> <b>delays.</b> I...|$|R
40|$|Based on 50 nm {{experimental}} n-pMOSFETs processed with 1. 4 nm oxide thickness, simulated raised source/drain {{have been}} evaluated in terms of <b>propagation</b> <b>delays</b> and dynamic power consumptions. Circuit simulations were carried out with BSIM 4. 1 model putting forward that a special care has {{to be paid to}} parasitic capacitances to keep reasonable dynamic consumptions while improving <b>propagation</b> <b>delays.</b> 1...|$|R
50|$|The {{principle}} of logical effort utilizes <b>propagation</b> <b>delays</b> to compare designs implementing the same logical statement.|$|R
5000|$|... delay1 is a <b>propagation</b> <b>delay</b> from node 1 via {{environment}} to node 3 ...|$|E
5000|$|Maximum link <b>propagation</b> <b>delay</b> ≈ 100 m / (200 000 000 m/s) = 0.5 μs ...|$|E
5000|$|Link {{roundtrip}} time ≈ {{packet transmission}} time + 2 × <b>propagation</b> <b>delay</b> + processing delay ...|$|E
3000|$|In {{order to}} combat <b>propagation</b> <b>delays,</b> we propose to combine CelFSync with the timing advance procedure. If [...]...|$|R
30|$|Therefore {{combining}} {{timing advance}} with CelFSync always achieves an accuracy, that is, bounded by {{the difference of}} UT-BS <b>propagation</b> <b>delays.</b>|$|R
30|$|When {{considering}} a scenario where BSs {{are separated by}} several hundred meters up to a few kilometers, <b>propagation</b> <b>delays</b> severely affect the attainable timing accuracy. We propose to combine CelFSync with the timing advance procedure, which ensures that UT uplink transmissions arrive simultaneously at the BS. Compensating intracell <b>propagation</b> <b>delays</b> with the timing advance procedure, as well as selecting cell edge users to participate in CelFSync, are effective means to substantially improve the achieved interbase station timing accuracy.|$|R
5000|$|ALVC - Low-voltage - 1.8-3.3 V, time <b>Propagation</b> <b>Delay</b> (TPD) < 3 ns at 3.3 V.|$|E
50|$|The {{acknowledgement}} {{sent back}} to station A includes in its header those two delay values - the signal <b>propagation</b> <b>delay</b> and the processing delay. A further signal <b>propagation</b> <b>delay</b> can be calculated by Station A on the received acknowledgement, even as this delay was calculated on the test packet. These three values can then be used by an algorithm to calculate the range between these two stations.|$|E
5000|$|Link {{roundtrip}} time = 2 × {{packet transmission}} time + 2 × <b>propagation</b> <b>delay</b> + processing delay ...|$|E
40|$|A {{fundamental}} {{timing analysis}} {{problem in the}} verification and synthesis of interface logic circuitry is the determination of allowable time separations, or skews between interface events, given timing constraints and circuit <b>propagation</b> <b>delays.</b> These skews are used to verify timing properties and determine allowable <b>propagation</b> <b>delays</b> for logic synthesis. This paper presents an algorithm that provides tighter skew bounds with better asymptotic running time than previous methods, and shows how to apply the method to synthesis tasks...|$|R
50|$|The {{difference}} in <b>propagation</b> <b>delays</b> of logic elements {{is the major}} contributor to glitches in asynchronous circuits {{as a result of}} race conditions.|$|R
30|$|Nonetheless, C++ {{does not}} support {{concurrency}} which is an essential aspect of systems modelling. Furthermore, timing and <b>propagation</b> <b>delays</b> cannot easily expressed in C++.|$|R
5000|$|<b>Propagation</b> <b>delay</b> (amount of time {{it takes}} the signal’s header to travel from the sender to the receiver) ...|$|E
5000|$|... 3. Signal {{timescales}} {{of interest}} are {{much larger than}} <b>propagation</b> <b>delay</b> of electromagnetic waves across the lumped element.|$|E
5000|$|... τi(θk): is the <b>propagation</b> <b>delay</b> {{between the}} first and the ith sensor for a {{waveform}} coming from direction (θk), ...|$|E
50|$|The {{purpose of}} the guard {{interval}} is to introduce immunity to <b>propagation</b> <b>delays,</b> echoes and reflections, to which digital data is normally very sensitive.|$|R
3000|$|For {{the sake}} of generality, the <b>propagation</b> <b>delays</b> are not assumed to be {{identical}} for all populations, hence they are described by a matrix [...]...|$|R
50|$|Deciding {{the group}} size {{to be governed}} by {{lookahead}} carry logic requires {{a detailed analysis of}} gate and <b>propagation</b> <b>delays</b> for the particular technology being used.|$|R
5000|$|AHCT {{stands for}} {{advanced}} high-speed CMOS with TTL inputs. Typical <b>propagation</b> <b>delay</b> time is between 5 ns and 6 ns.|$|E
50|$|<b>Propagation</b> <b>delay</b> {{is used in}} the FAST window control algorithm. In a clean network, the {{queueing}} delay {{maintained by}} existing FAST flows may be mistaken as part of the <b>propagation</b> <b>delay</b> by new flows that join later, as shown in ns-2 simulations in. The effect of this estimation error is equivalent to modifying the underlying utility functions to favor new flows over existing flows. Method to eliminate this error is suggested in.|$|E
50|$|Some trigonometrical {{stations}} use the Global Positioning System for convenience; {{however, the}} accuracy depends on {{factors such as}} ionospheric and tropospheric <b>propagation</b> <b>delay</b> errors.|$|E
50|$|Hazard {{filtering}} {{is another}} way to remove glitching. In hazard filtering gate <b>propagation</b> <b>delays</b> are adjusted. This results in balancing all path delays at the output.|$|R
40|$|A {{fundamental}} {{timing analysis}} {{problem in the}} verification and synthesis of interface logic circuitry is the determination of allowable time separations, or skews between interface events, given timing constraints and circuit <b>propagation</b> <b>delays.</b> These skews are used to verify timing properties and determine allowable <b>propagation</b> <b>delays</b> for logic synthesis. This paper presents an algorithm that provides tighter skew bounds with better asymptotic running time than previous methods, and shows how to apply the method to synthesis tasks. I Introduction Temporal behavior of interface circuitry is frequently described using event-based representations that relate the occurrence times of events with timing constraints and <b>propagation</b> <b>delays</b> [1, 2, 3, 4, 5, 6]. In this paper, we present an efficient solution to a key problem in the verification and synthesis of interface glue logic, namely, the determination of tight bounds on the temporal separations between events. To verify a synthesized cir [...] ...|$|R
40|$|Abstract — This paper investigates fair, scalable, stable {{congestion}} controls which achieve {{high bandwidth}} utilisation over networks operating multi-path routing. The {{aim is to}} take advantage of path diversity to achieve efficient bandwidth allocation without causing instability. Two multi-path extensions to the class of dual algorithms are considered. The first is a natural extension previously proposed in the literature, which we show to be similar to a continuous time sub-gradient method for solving a networkwide optimisation problem. We establish that the continuous time fluid model possesses a weak stability property. This analysis assumes the absence of <b>propagation</b> <b>delays.</b> We then show that when <b>propagation</b> <b>delays</b> are present, even the weak stability property disappears We develop an alternative multi-path extension of the dual algorithm, which takes into consideration path diversity when evaluating fairness. This algorithm is shown to be globally stable in the absence of <b>propagation</b> <b>delays</b> and a sufficient condition for local stability, when heterogeneous <b>propagation</b> <b>delays</b> are present, is found. The sufficient condition we present is decentralised in the following sense: the gain parameter for each dynamic variable is restricted by the average round-trip time of packets passing through the link or source it represents, but not by the round-trip times of any other packets. The delay stability analysis is an extension of results for single-path congestion control. It is obtained by treating possible routes that belong to a given origin-destination pair as behaving as separate sources which pass through a virtual link located at the origin. The models considered apply to networks consisting of arbitrary interconnections of sources and links with arbitrary heterogeneous <b>propagation</b> <b>delays...</b>|$|R
