1205|566|Public
5|$|In 1968, the Hungarian {{theoretical}} biologist Aristid Lindenmayer (1925–1989) {{developed the}} L-system, a formal grammar {{which can be}} used to model plant growth patterns in the style of fractals. L-systems have an alphabet of symbols that can be combined using <b>production</b> <b>rules</b> to build larger strings of symbols, and a mechanism for translating the generated strings into geometric structures. In 1975, after centuries of slow development of the mathematics of patterns by Gottfried Leibniz, Georg Cantor, Helge von Koch, Wacław Sierpiński and others, Benoît Mandelbrot wrote a famous paper, How Long Is the Coast of Britain? Statistical Self-Similarity and Fractional Dimension, crystallising mathematical thought into the concept of the fractal.|$|E
25|$|Generate <b>production</b> <b>rules</b> for the sequences.|$|E
25|$|A finite set P of <b>production</b> <b>rules,</b> that map {{from one}} string of symbols to another.|$|E
5000|$|OMG <b>Production</b> <b>Rule</b> Representation (PRR): Represents <b>rules</b> for <b>production</b> <b>rule</b> {{systems that}} make up most BRMS' {{execution}} targets ...|$|R
5000|$|<b>Production</b> <b>Rule</b> Representation - {{comparable}} to the dialect of RIF called <b>Production</b> <b>Rule</b> Dialect, although targeting modeling not run-time interchange.|$|R
5000|$|In the {{transformation}} {{portion of the}} <b>production</b> <b>rule,</b> the parameters as well as entire modules can be affected. In the above example, the module b(x,y) {{is added to the}} string, with initial parameters (2,3). Also, the parameters of the already existing module are transformed. Under the above <b>production</b> <b>rule,</b> ...|$|R
25|$|An {{extended}} {{context-free grammar}} (or regular right part grammar) {{is one in}} which the right-hand side of the <b>production</b> <b>rules</b> is allowed to be a regular expression over the grammar's terminals and nonterminals. Extended context-free grammars describe exactly the context-free languages.|$|E
25|$|A {{probabilistic}} context free grammar {{consists of}} terminal and nonterminal variables. Each feature to be modeled has a production rule that is assigned a probability estimated from a training set of RNA structures. <b>Production</b> <b>rules</b> are recursively applied until only terminal residues are left.|$|E
25|$|The {{especially}} simple form of <b>production</b> <b>rules</b> in Chomsky {{normal form}} grammars has both {{theoretical and practical}} implications. For instance, given a context-free grammar, one can use the Chomsky normal form to construct a polynomial-time algorithm that decides whether a given string is in the language represented by that grammar or not (the CYK algorithm).|$|E
40|$|<b>Production</b> <b>Rule</b> Sets (PRS) are {{a digital}} event-based model for CMOS circuits; stable <b>production</b> <b>rule</b> sets {{are those in}} which in every execution, every enabled rule remains enabled until it is executed. It has been conjectured that stable <b>production</b> <b>rule</b> sets are determinstic, meaning in {{particular}} that they cannot implement arbiters, and that the sequence of values sent on any channel is independent of the execution. In this paper, we prove these facts rigorously, directly from first principles. We also propose improvements to PRS testing tools based on the resulting theory...|$|R
40|$|This note {{presents}} {{a model of}} an acyclic assembly system that faces yield loss and uncertain demand. While there is no known <b>production</b> <b>rule</b> for managing acyclic systems, we develop a <b>production</b> <b>rule</b> whose operating characteristics could be measured analytically. Thus, the operating characteristics {{can be used as}} a benchmark for future comparison. To facilitate our analysis, we extend the model for a serial production system that produces a single product (Tang 1990). This extension entails a modification of the <b>production</b> <b>rule</b> and the analysis of a decomposition scheme. assembly systems, system analysis, production planning, inventory control, decomposition, approximation...|$|R
5000|$|... {{a finite}} set of {{terminal}} symbols (indicating that no <b>production</b> <b>rule</b> can be applied) ...|$|R
25|$|The {{application}} of PCFGs in predicting structures is a multi-step process. In addition, the PCFG {{itself can be}} incorporated into probabilistic models that consider RNA evolutionary history or search homologous sequences in databases. In an evolutionary history context inclusion of prior distributions of RNA structures of a structural alignment in the <b>production</b> <b>rules</b> of the PCFG facilitates good prediction accuracy.|$|E
25|$|P {{is a set}} of <b>production</b> <b>rules</b> or {{productions}} {{defining the}} way variables can be replaced with combinations of constants and other variables. A production consists of two strings, the predecessor and the successor. For any symbol A which {{is a member of the}} set V which does not appear on the left hand side of a production in P, the identity production A → A is assumed; these symbols are called constants or terminals. (See Law of identity).|$|E
25|$|A more {{complicated}} example {{is given by}} recursive descent parsers, which can be naturally implemented by having one function for each production rule of a grammar, which then mutually recurse; this will in general be multiple recursion, as <b>production</b> <b>rules</b> generally combine multiple parts. This can also be done without mutual recursion, for example by still having separate functions for each production rule, but having them called by a single controller function, or by putting all the grammar in a single function.|$|E
5000|$|In many contexts, each <b>production</b> <b>rule</b> {{has only}} one antecedent, thus taking the simpler form ...|$|R
5000|$|... {{a finite}} set of nonterminal symbols (indicating that some <b>production</b> <b>rule</b> can yet be applied) ...|$|R
5000|$|A <b>production</b> <b>rule</b> {{can also}} include a {{sequence}} of terminals or nonterminals, each separated by a comma: ...|$|R
25|$|The {{rules of}} the L-system grammar are applied iteratively {{starting}} from the initial state. As many rules as possible are applied simultaneously, per iteration. The fact that each iteration employs as many rules as possible differentiates an L-system from a formal language generated by a formal grammar, which applies only one rule per iteration. If the <b>production</b> <b>rules</b> were to be applied only one at a time, one would quite simply generate a language, rather than an L-system. Thus, L-systems are strict subsets of languages.|$|E
25|$|With Allen Newell, Simon {{developed}} a theory for the simulation of human problem solving behavior using <b>production</b> <b>rules.</b> The {{study of human}} problem solving required new kinds of human measurements and, with Anders Ericsson, Simon developed the experimental technique of verbal protocol analysis. Simon {{was interested in the}} role of knowledge in expertise. He said that to become an expert on a topic required about ten years of experience and he and colleagues estimated that expertise was the result of learning roughly 50,000 chunks of information. A chess expert was said to have learned about 50,000 chunks or chess position patterns.|$|E
25|$|The LALR(1) parser is less {{powerful}} than the LR(1) parser, and more {{powerful than the}} SLR(1) parser, though they all use the same <b>production</b> <b>rules.</b> The simplification that the LALR parser introduces consists in merging rules that have identical kernel item sets, because during the LR(0) state-construction process the lookaheads are not known. This reduces the power of the parser because not knowing the lookahead symbols can confuse the parser as to which grammar rule to pick next, resulting in reduce/reduce conflicts. All conflicts that arise in applying a LALR(1) parser to an unambiguous LR(1) grammar are reduce/reduce conflicts. The SLR(1) parser performs further merging, which introduces additional conflicts.|$|E
5000|$|Rule Interchange Format by W3C {{especially}} its <b>Production</b> <b>Rule</b> Dialect, which is nominally {{compatible with the}} PRR metamodel.|$|R
5000|$|Note that in {{the case}} of a <b>production</b> <b>rule</b> like this (where the {{operator}} can only appear once): ...|$|R
5000|$|For example, the {{assignment}} [...] {{is only valid}} if the variable x can contain an integer. Therefore, the context-free syntax [...] is incomplete. In a two-level grammar, this might be specified in a context-sensitive manner as [...] Then [...] could be a <b>production</b> <b>rule</b> but [...] is not a possible <b>production</b> <b>rule.</b> This also means that assigning with incompatible types becomes a syntax error which can be caught at compile-time. Similarly, ...|$|R
25|$|After the songwriting trio Holland–Dozier–Holland {{left the}} label in 1967 over royalty-payment disputes, Norman Whitfield became the company's top producer, turning out hits for The Temptations, Marvin Gaye, Gladys Knight & the Pips and Rare Earth. In the {{meantime}} Berry Gordy established Motown Productions, a television subsidiary which produced TV specials for the Motown artists, including TCB, with Diana Ross & the Supremes and the Temptations, Diana! with Diana Ross, and Goin' Back to Indiana with the Jackson 5. The company loosened its <b>production</b> <b>rules,</b> allowing {{some of its}} longtime artists the opportunity to write and produce more of their own material. This resulted in the recordings of successful and critically acclaimed albums such as Marvin Gaye's What's Going On (1971) and Let's Get it On (1973), and Stevie Wonder's Music of My Mind (1972), Talking Book (1972), and Innervisions (1973).|$|E
500|$|Bad Girls Club airs {{in three}} nations besides the United States; MTV Australia, RTL 5 in The Netherlands, and TV11 in Sweden. Bunim-Murray has never {{licensed}} the show's format to a broadcaster in another nation {{for a local}} version of the series. The format of the show has changed from earlier seasons. If a cast member violates <b>production</b> <b>rules,</b> she is evicted from the show and, if it is early in the season, replaced by a new cast member. The fourth season is considered the series' [...] "breakthrough season", becoming Oxygen's first series ever to average over one million viewers per episode.|$|E
2500|$|In formal {{language}} theory, a context-free grammar (CFG) {{is a certain}} type of formal grammar: [...] a set of <b>production</b> <b>rules</b> that describe all possible strings in a given {{formal language}}. <b>Production</b> <b>rules</b> are simple replacements. For example, the rule ...|$|E
40|$|This paper {{presents}} a discrete time {{model of a}} multi-stage production system that faces two major types of uncertainties: the output rate at each production stage {{and the demand for}} the finished product. Our goal is to analyze the impact of these uncertainties on the production level and on the inventory level at each stage in order to provide insights for production planning, inventory control, quality improvement, and capacity planning. We propose a scheme in which a complex <b>production</b> <b>rule</b> is approximated by a linear <b>production</b> <b>rule</b> (that follows the "restoration" concept introduced by Denardo and Tang 1988). This linear <b>production</b> <b>rule</b> leads the system to steady state in which the means and the variances of the production and inventory levels can be expressed in closed form. These closed form expressions enable us to develop a simple approach for determining a "good" <b>production</b> <b>rule</b> and for analyzing the impact of increasing the yield rates and reducing the variance of the demand. The goodness of this approximation scheme is illustrated by an example. stochastic system, production control, inventory control, approximation, pull systems...|$|R
5000|$|... 1. {{for every}} non-terminal N, {{there is at}} most one <b>production</b> <b>rule</b> that has N as its {{left-hand}} side, and ...|$|R
5000|$|... {{with the}} same set of {{terminal}} symbols, thesame start symbol, with variables some (not all) types,and with a <b>production</b> <b>rule</b> ...|$|R
2500|$|Context-free grammars are {{represented}} {{as a set of}} rules inspired from attempts to model natural languages. The rules are absolute and have a typical syntax representation known as Backus–Naur form. The <b>production</b> <b>rules</b> consist of terminal [...] and non-terminal [...] symbols and a blank [...] may also be used as an end point. [...] In the <b>production</b> <b>rules</b> of CFG and PCFG the left side has only one nonterminal whereas the right side can be any string of terminal or nonterminals. In PCFG nulls are excluded. An example of a grammar: ...|$|E
2500|$|The {{canonical}} {{example of}} a context-free grammar is parenthesis matching, which {{is representative of the}} general case. There are two terminal symbols [...] "(" [...] and [...] ")" [...] and one nonterminal symbol S. The <b>production</b> <b>rules</b> are ...|$|E
2500|$|In {{computer}} science, an LALR parser or Look-Ahead LR parser is {{a simplified}} {{version of a}} canonical LR parser, to parse (separate and analyze) a text according {{to a set of}} <b>production</b> <b>rules</b> specified by a formal grammar for a computer language. ("LR" [...] means left-to-right, rightmost derivation.) ...|$|E
5000|$|The grammar model we have {{discussed}} thus far has been deterministic—that is, given any symbol in the grammar's alphabet, there has been exactly one <b>production</b> <b>rule,</b> which is always chosen, and always performs the same conversion. One alternative is to specify more than one <b>production</b> <b>rule</b> for a symbol, giving each a probability of occurring. For example, in the grammar of Example 2, we could change the rule for rewriting [...] "0" [...] from: ...|$|R
50|$|RIF {{includes}} three dialects, a Core dialect which is extended into a Basic Logic Dialect (BLD) and <b>Production</b> <b>Rule</b> Dialect (PRD).|$|R
50|$|If, on {{the other}} hand, the symbol in the string was a 1, the rule {{separator}} changes into a new structure which admits the incoming <b>production</b> <b>rule.</b> Although the new structure is again destroyed when it encounters the next rule separator, it first allows a series of structures to pass through towards the left. These structures are then made to append themselves {{to the end of}} the cyclic tag system's data string. This final transformation is accomplished by means of a series of infinitely repeating, right-moving clock pulses, in the right-moving pattern shown above. The clock pulses transform incoming left-moving 1 symbols from a <b>production</b> <b>rule</b> into stationary 1 symbols of the data string, and incoming 0 symbols from a <b>production</b> <b>rule</b> into stationary 0 symbols of the data string.|$|R
