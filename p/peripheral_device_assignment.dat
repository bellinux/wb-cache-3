0|1052|Public
50|$|The SCSI {{protocol}} defines {{communication from}} host to host, host to a <b>peripheral</b> <b>device,</b> <b>peripheral</b> <b>device</b> to a <b>peripheral</b> <b>device.</b> However most <b>peripheral</b> <b>devices</b> are exclusively SCSI targets, incapable of acting as SCSI initiators—unable to initiate SCSI transactions themselves. Therefore, peripheral-to-peripheral communications are uncommon, but possible in most SCSI applications. The Symbios Logic 53C810 chip {{is an example}} of a PCI host interface that can act as a SCSI target.|$|R
40|$|A {{method for}} {{communicating}} data between <b>peripheral</b> <b>devices</b> and an embedded processor that includes receiving, at a data buffer {{unit of the}} embedded processor, the data from a <b>peripheral</b> <b>device.</b> The method also includes copying data from the data buffer unit into the bridge buffer of the embedded processor as a bridge buffer message. Additionally, the method includes creating, after storing the data as a bridge buffer message, a <b>peripheral</b> <b>device</b> message comprising the bridge buffer message, and sending the <b>peripheral</b> <b>device</b> message to a thread message queue of a subscriber...|$|R
50|$|For input or output, each {{peripheral}} processor accesses a <b>peripheral</b> <b>device</b> over a communication link called a data channel. One <b>peripheral</b> <b>device</b> can {{be connected to}} each data channel; however, a channel can be modified with hardware to service more than one device.|$|R
40|$|The {{object of}} investigation: the {{integral}} circuits on the PZS with the built-in <b>peripheral</b> <b>devices.</b> Given {{have been the}} results of the theoretical analysis of the accuracy of the spatial-time conversion of signals in PZS, confirmed by experiment theoretical model for evaluation of the thermal limitations of the matrix FPZS with the built-in <b>peripheral</b> <b>devices.</b> The library of the standard functional elements of the <b>peripheral</b> <b>devices</b> has been created, the display transmitter and the delay lines in PZS with the buil-in <b>peripheral</b> <b>devices</b> have been developed. The efficiency of the delay lines application in PZS in PAL/SECAM-decoders of coloring. The field of application: the development of the element base and measuring devices on the base of PZSAvailable from VNTIC / VNTIC - Scientific & Technical Information Centre of RussiaSIGLERURussian Federatio...|$|R
5000|$|Information technologies: computers, terminals, <b>peripheral</b> <b>devices,</b> components, consumables, audiovisuals, {{electronics}} ...|$|R
5000|$|Computers may {{transfer}} {{files to}} <b>peripheral</b> <b>devices</b> such as USB flash drives ...|$|R
5000|$|... <b>peripheral</b> <b>devices</b> (teleprinters, {{punched tape}} reader/punchers, {{parallel}} printers and punched card readers).|$|R
50|$|These devices include {{personal}} computers and <b>peripheral</b> <b>devices,</b> and electrical ballasts for fluorescent lights.|$|R
5000|$|... 4468737 Circuit for {{extending}} a multiplexed address and data bus to distant <b>peripheral</b> <b>devices</b> ...|$|R
5000|$|Zeidman, Robert M. “Use of {{hardware}} <b>peripheral</b> <b>devices</b> with software simulations,” U.S. Patent 8,195,442.|$|R
50|$|Protocols used by I/O {{channels}} {{to communicate with}} <b>peripheral</b> <b>devices</b> include ESCON and newer FICON.|$|R
5000|$|<b>Peripheral</b> <b>device</b> {{configuration}} {{was fixed}} during boot time. Configuration {{changes were made}} using the [...] command.|$|R
50|$|A {{front end}} {{processor}} (FEP), or a communications processor, is a small-sized computer which interfaces to the host computer a number of networks, such as SNA, or a number of <b>peripheral</b> <b>devices,</b> such as terminals, disk units, printers and tape units. Data is transferred between the host computer and the {{front end processor}} using a high-speed parallel interface. The front end processor communicates with <b>peripheral</b> <b>devices</b> using slower serial interfaces, usually also through communication networks. The purpose is to off-load from the host computer the work of managing the <b>peripheral</b> <b>devices,</b> transmitting and receiving messages, packet assembly and disassembly, error detection, and error correction. Two examples are the IBM 3705 Communications Controller and the Burroughs Data Communications Processor.|$|R
50|$|The W65C21S {{provides}} programmed {{microprocessor control}} {{of up to}} two <b>peripheral</b> <b>devices</b> (Port A and Port B). <b>Peripheral</b> <b>device</b> control is accomplished through two 8-bit bidirectional I/O Ports, with individually designed Data Direction Registers. The Data Direction Registers provide selection of data flow direction (input or output) at each respective I/O Port. Data flow direction may be selected on a line-by-line basis with intermixed input and output lines within the same port. The “handshake” interrupt control feature is provided by four peripheral control lines. This capability provides enhanced control over data transfer functions between the microprocessor and <b>peripheral</b> <b>devices,</b> as well as bidirectional data transfer between W65C21S Peripheral Interface Adapters in multiprocessor systems.|$|R
5000|$|<b>Peripheral</b> <b>device</b> access: IN# and PR# (although IN without [...] "#" [...] {{is listed}} among {{reserved}} words) ...|$|R
5000|$|In modern {{personal}} computer, {{almost every}} <b>peripheral</b> <b>device</b> uses an adapter {{to communicate with}} system bus, for example: ...|$|R
5000|$|... 6: The model {{within the}} generation. This {{indicates}} {{the mixture of}} on-board <b>peripheral</b> <b>devices</b> and number of pins.|$|R
50|$|Many IBM <b>peripheral</b> <b>devices</b> {{that were}} part of System/360, but were adapted from second-generation designs, {{continued}} to use SMS circuitry instead of the newer SLT. These included the 240x-series tape drives and controllers, the 2540 card reader/punch and 1403N1 printer, and the 2821 Integrated Control Unit for the 1403 and 2540. A few SMS cards used in System/360 <b>peripheral</b> <b>devices</b> even had SLT-type hybrid ICs mounted on them.|$|R
40|$|A modular and {{reconfigurable}} {{embedded computer}} system for designing and prototyping electronic musical interfaces is presented. The system {{is based on an}} ARM 7 microcontroller that configures <b>peripheral</b> <b>devices,</b> collates input signals, and processes/synthesizes audio. <b>Peripheral</b> <b>devices,</b> each equipped with its own processor, are fully reconfigurable enabling processing and conversion of both analog and digital signals. Communication between the ARM and the <b>peripheral</b> <b>devices</b> is accomplished using the I 2 C protocol, allowing for multi-master-slave operation. Although the system operates without the use of a personal computer, a serial interface was implemented to facilitate prototyping with a computer terminal running a text or graphicsbased user interface. Applications for this platform include a standalone electronic musical instrument and an augmented acoustic trumpet. 1...|$|R
30|$|Moreover, the learners’ {{engagement}} can {{be strengthened}} through low-cost <b>peripheral</b> <b>devices</b> such as headphones, smart glasses and data gloves.|$|R
50|$|Various {{aftermarket}} USB or Bluetooth <b>peripheral</b> <b>devices,</b> such as keyboards {{and mice}} can {{be connected to}} the Surface 3.|$|R
5000|$|Microcontrollers {{integrate}} {{a microprocessor}} with <b>peripheral</b> <b>devices</b> in embedded systems. These {{tend to have}} different tradeoffs compared to CPUs.|$|R
2500|$|Full USB 3.0 {{support for}} faster {{connections}} to <b>peripheral</b> <b>devices</b> for Virtual Machines starting from Parallels Desktop 8.0.18305 (see http://kb.parallels.com/en/115008) ...|$|R
50|$|The CPU then issues an RD {{signal to}} read {{the data from the}} {{external}} <b>peripheral</b> <b>device</b> via the system data bus.|$|R
5000|$|Embedded system {{implementations}} {{intended for}} use in devices where resources are limited and demands are lower, such as Bluetooth <b>peripheral</b> <b>devices.</b>|$|R
25|$|A {{number of}} <b>peripheral</b> <b>devices</b> and {{software}} packages were released for the Famicom. Few {{of these devices}} were ever released outside Japan.|$|R
50|$|Chip Support Package (CSP) is a {{software}} set that contains chip-specific software. A CSP usually includes <b>peripheral</b> <b>device</b> drivers and definition files.|$|R
40|$|As {{personal}} computing becomes more popular and affordable, {{the availability of}} <b>peripheral</b> <b>devices</b> is also increasing rapidly. However, these <b>peripheral</b> <b>devices</b> can usually only be connected to a single machine at time. The ability to share <b>peripheral</b> <b>devices</b> between computers without any modification of existing computing environments is, consequently, a highly desirable goal, as it improves the efficiency and usability of such devices. Existing device sharing technologies in the pervasive computing area are not sufficient for <b>peripheral</b> <b>devices</b> designed for personal computers, because these technologies do not provide the degree of networktransparency necessary for both applications and device drivers. In this paper, we propose USB/IP as a peripheral bus extension over an Internet Protocol (IP) network. This novel device sharing approach {{is based on the}} sophisticated peripheral interfaces that are supported in most modern operating systems. Using a virtual peripheral bus driver, users can share a diverse range of devices over networks without any modification in existing operating systems and applications. Our experiments show that USB/IP has sufficient I/O performance for many USB devices, including isochronous ones. We also describe performance optimization criteria {{that can be used to}} achieve further performance improvements. ...|$|R
5000|$|In SCSI {{standards}} for transferring data between computers and <b>peripheral</b> <b>devices,</b> often computer storage, commands are sent in a Command Descriptor Block (CDB).|$|R
5000|$|UniPort-M (UniPro with M-PHY): Enables {{general purpose}} {{extension}} interface to connect <b>peripheral</b> <b>devices</b> such as graphic accelerators, modules such as Google's ARA Project ...|$|R
50|$|A stick PC can be {{connected}} to a <b>peripheral</b> <b>device</b> such as a monitor, TV, or kiosk display to produce visual or audio output.|$|R
50|$|A <b>peripheral</b> <b>device</b> is {{generally}} defined as any auxiliary device {{such as a}} computer mouse or keyboard that connects to and works with the computer in some way. Other examples of peripherals are image scanners, tape drives, microphones, loudspeakers, webcams, and digital cameras. Many modern devices, such as digital watches, smartphones and tablet computers, have interfaces {{that allow them to}} be used as a peripheral by desktop computers, although they are not host-dependent in the same way as other <b>peripheral</b> <b>devices.</b>|$|R
40|$|Embedded <b>peripheral</b> <b>devices</b> such as memories, {{sensors and}} {{communications}} interfaces {{are used to}} perform a function external to a host microcontroller. The device manufacturer typically specifies worst-case current consumption and latency estimates {{for each of these}} peripheral actions. Peripheral Activity Completion, Estimation and Recognition (PACER) is introduced as a suite of algorithms that can be applied to detect completed peripheral operations in real-time. By detecting activity completion, PACER enables the host to exploit slack between the worst-case estimate and the actual response time. These methods were tested independently and in conjunction with IODVS on multiple common <b>peripheral</b> <b>devices.</b> For the <b>peripheral</b> <b>devices</b> under test, the test fixture confirmed decreases in energy expenditures of up to 80 % and latency reductions of up to 67 %. Comment: 8 pages, 12 figures, Presented at HIP 3 ES, 201...|$|R
40|$|In this paper, an open {{framework}} based {{smart energy}} storage system (ESS) profile for photovoltaic (PV) -ESS and uninterruptible power supply (UPS) -ESS is proposed and designed. An open framework based smart ESS is designed and developed for unifying the different interfaces among manufacturers. The smart ESS operates under the profile which provides the specifications of <b>peripheral</b> <b>devices</b> such as different interfaces and to the open framework. The profile requires well systemicity and expandability for addible <b>peripheral</b> <b>devices.</b> Especially, the smart ESS should provide the expansion with existing systems such as UPS and the linkage with new renewable energy technology such as PV. This paper proposes and designs an open framework based smart ESS profile for PV-ESS and UPS-ESS. The designed profile provides the existing smart ESS and also the expandability of additional <b>peripheral</b> <b>devices</b> on smart ESS such as PV and UPS...|$|R
5000|$|Some {{computer}} systems, upon {{receiving a}} boot signal {{from a human}} operator or a <b>peripheral</b> <b>device,</b> may load {{a very small number}} of fixed instructions into memory at a specific location, initialize at least one CPU, and then point the CPU to the instructions and start their execution. These instructions typically start an input operation from some <b>peripheral</b> <b>device</b> (which may be switch-selectable by the operator). Other systems may send hardware commands directly to <b>peripheral</b> <b>devices</b> or I/O controllers that cause an extremely simple input operation (such as [...] "read sector zero of the system device into memory starting at location 1000") to be carried out, effectively loading a small number of boot loader instructions into memory; a completion signal from the I/O device may then be used to start execution of the instructions by the CPU.|$|R
40|$|Design {{collaboration}} {{relies on}} cognitive {{tools such as}} analog media and digital <b>peripheral</b> <b>devices,</b> and shows the characteristics of distributed cognition. It is a social and complex activity involving multiple agents communicating and using external cognitive tools to encode, decode, and share information {{in the process of}} collaborative task completion. The systems supporting this activity should meet the “principle of least collaboration effort” [4] that proposes that agents in collaboration minimize their effort in presentation and acceptance of information. Yet, current collaboration systems are dispersed mixed media that is often overloaded with representations and functionality, thus preventing seam- less information sharing. Designers are required to spend extra effort collecting information using <b>peripheral</b> <b>devices</b> and in system management when sharing information. The goal {{of this study is to}} understand these overheads in infor- mation collection and sharing using <b>peripheral</b> <b>devices,</b> and to provide designers with a supportive platform to enhance collaboration using both analog and digital media. In this paper, we first review available <b>peripheral</b> <b>devices</b> such as smart pens, digital cameras, and voice recorders, as well as existing collaboration sup- porting software systems for their benefits and deficiencies in collaboration. We then present “DiNa”, a collaboration platform that is envisioned to improve pro- ductivity and reduce redundant work by integrating <b>peripheral</b> <b>devices</b> into the collaboration workflow. We demonstrate a possible workflow using this system through several scenarios where designers collaborate in performing a series of design tasks. We hope to bring attention to the importance least collaborative effort in designing systems to support real-world collaboration...|$|R
