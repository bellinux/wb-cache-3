0|1712|Public
50|$|The PROM {{was invented}} in 1956 by Wen Tsing Chow, working for the Arma Division of the American Bosch Arma Corporation in Garden City, New York. The {{invention}} was conceived {{at the request of}} the United States Air Force to come up with a more flexible and secure way of storing the targeting constants in the Atlas E/F ICBM's airborne digital computer. The patent and associated technology were held under secrecy order for several years while the Atlas E/F was the main operational missile of the United States ICBM force. The term burn, referring to the process of <b>programming</b> a <b>PROM,</b> is also in the original patent, as one of the original implementations was to literally burn the internal whiskers of diodes with a current overload to produce a circuit discontinuity. The first <b>PROM</b> <b>programming</b> <b>machines</b> were also developed by Arma engineers under Mr. Chow's direction and were located in Arma's Garden City lab and Air Force Strategic Air Command (SAC) headquarters.|$|R
5000|$|Music by, keyboards, drum <b>programming</b> <b>machine</b> <b>programming</b> - Thomas McElroy, Denzil Foster ...|$|R
5000|$|A second unique {{feature is}} a {{dedicated}} 13 bit address and 16 bit databus to access program memory, allowing 8192 16-bit program words {{to be directly}} addressed. This allowed ROM / <b>PROM</b> <b>program</b> memories to be directly connected without further hardware.A second combined 8-bit address/data bus- the interface vector (IV) bus, was used for data and I/O. Two control signals - WC (write command) and SC (select command) determined {{the state of the}} IV bus as follows: ...|$|R
5000|$|Programming: {{holes in}} 35mm film stock, punched on a <b>programming</b> <b>machine</b> ...|$|R
5000|$|K. L. Clark, D. Cowell, <b>Programs,</b> <b>Machines</b> and Computation, McGraw-Hill, London, 1976.|$|R
40|$|An online {{simulation}} {{technique for}} <b>programmed</b> <b>machine</b> training is described. Similarity of data structures with a <b>programmed</b> <b>machine</b> and online simulation software {{are considered to}} be an advantage for implementing online learning of the <b>machine</b> <b>programming.</b> JavaScript and Flash script are used to implement the simulation. In this article, it is shown how these scripts can communicate with each other to perform the functions as input, calculation and animation. Highlighted work based on a computer numerical control (CNC) milling machine is given to illustrate the working principles...|$|R
5000|$|Steve Winwood - vocals, synthesizer, {{sequencer}} <b>programming,</b> drum <b>machine</b> <b>programming</b> ...|$|R
5000|$|In his section 11.5 [...] "The {{equivalence}} of <b>Program</b> <b>Machines</b> with General-recursive functions" [...] he introduces two new subroutines: ...|$|R
5000|$|... #Caption: Maurizio Bolognini's <b>Programmed</b> <b>Machines</b> (Sealed) {{hundreds}} of computers are programmed to generate endless flows of random images which nobody would see.|$|R
40|$|Microprocessors: Principles and Applications {{deals with}} the {{principles}} and applications of microprocessors and covers topics ranging from computer architecture and <b>programmed</b> <b>machines</b> to microprocessor <b>programming,</b> support systems and software, and system design. A number of microprocessor applications are considered, including data processing, process control, and telephone switching. This book is comprised of 10 chapters and begins with a historical overview of computers and computing, followed by a discussion on computer architecture and <b>programmed</b> <b>machines,</b> paying particular attention to...|$|R
50|$|Peter Nordin is a Swedish {{computer}} scientist, entrepreneur {{and author}} who {{has contributed to}} artificial intelligence, automatic <b>programming,</b> <b>machine</b> learning, and evolutionary robotics.|$|R
5000|$|Pointer machine:Reference model (or RAMrefModel): {{augment the}} {{indirect}} addressing and the RefLib for it. Is used {{also on the}} Random access <b>program</b> <b>machine.</b>|$|R
5000|$|Automation & Controls, Mechanical Engineering Tech, CAD/CAM, Plastics Engineering Tech, Industrial Mgmt, Quality Control, HVAC-R Certification, PLC Certification, Industrial Electric, Mechatronics, Millwright, CNC <b>Programming,</b> <b>Machining</b> ...|$|R
5000|$|... #Caption: Maurizio Bolognini, <b>Programmed</b> <b>Machines,</b> Nice, France, 1992-97: {{hundreds}} of computers are programmed to generate an inexhaustible flux of random images which nobody would see ...|$|R
5000|$|<b>Program</b> <b>machine,</b> <b>Program</b> {{computer}}, {{the names}} Minsky (1967) gave the model because, like a computer its instructions proceed sequentially unless a conditional jump is successful. Uses (usually) instruction set (1) {{but may be}} augmented similar to the Shepherson-Sturgis model. JZDEC is often split apart: ...|$|R
50|$|The DC-130 {{was used}} in both the {{development}} and proposed employment of the AQM-91A Compass Arrow in the late 1960s and early 1970s, as well as Senior <b>Prom,</b> a <b>program</b> to develop stealthy cruise missiles in 1978.|$|R
50|$|The Casio models {{included}} lower-case characters. These {{were only}} {{for use in}} PRINT statements, as lower-case commands and variables were not accepted as with almost all BASIC <b>programming</b> <b>machines.</b>|$|R
40|$|The INTEL 8080 {{has become}} one of the two most widely used {{microprocessors}} (mu P's) at CERN, the other being the MOTOROLA 6800. Even though this is the case, there has been up to date only rudimentary facilities available for aiding the development of application programs fro this mu P. An ideal development system is one which has a sophisticated editing and filing capability, an assembler /compiler, and access to the mu P application. In many instances one also requires access to a PROM programmer as the application may utilized only <b>PROMs</b> for <b>program</b> storage. An INTEL 8080 mu P development system was implemented in the PS Division at CERN. While any other minicomputer would be suitable, this system utilizes a PDP- 11 / 45 minicomputer as the editing and file-handling machine, and an MCS 8 /MOD 80 mu P development system for assembling, <b>PROM</b> <b>programming,</b> and debugging user programs at run time. The two computers are linked by a CAMAC crate system, which provides the means of access to mu P applications in CAMAC and the interface of the development system to other applications. (11 refs) ...|$|R
5000|$|... #Caption: Maurizio Bolognini, <b>Programmed</b> <b>Machines</b> (Nice, France, 1992-97). An {{installation}} at {{the intersection}} of digital art and conceptual art (computers are programmed to generate flows of random images which nobody would see).|$|R
5000|$|Joe Hisaishi - Synthesizer programming, {{sequencer}} <b>programming</b> {{and drum}} <b>machine</b> <b>programming</b> ...|$|R
5000|$|Motoki Funayama - Synthesizer programming, {{sequencer}} <b>programming</b> {{and drum}} <b>machine</b> <b>programming</b> ...|$|R
5000|$|Kazuo Shiina - Synthesizer programming, {{sequencer}} <b>programming</b> {{and drum}} <b>machine</b> <b>programming</b> ...|$|R
40|$|The {{introduction}} of this thesis describes the methods for <b>programming</b> CNC <b>machines</b> and their usage in the industry. The next section compares the CNC machine control systems, general programming principles {{and the current}} use of shop-oriented programming WOP (workshop oriented <b>programming)</b> <b>machining.</b> Then the thesis describes a TMV 510 CII machine and its operation, setting, practical advices and examples of the Fanuc Guide-i control system by Fanuc company. In the final part a practical demonstration of the CNC <b>machining</b> <b>program</b> {{for the production of}} the sample parts on the above machine is given...|$|R
40|$|Linear and quadratic-programming perceptrons for {{regression}} are new {{potential function}} methods for nonlinear function approximation. Potential function perceptrons, {{which have been}} proposed by Aizerman and colleagues in the early 1960 's work in the following way: {{in the first stage}} patterns from the training set are mapped into a very high dimensional linearisation space by performing a high dimensional non-linear expansion of training vectors into the so-called linearisation space. In this space the perceptron's design function is determined. In the algorithms proposed in this work a non-linear prediction function is constructed using linear-or quadratic-programming routines to optimize the convex cost function. In Linear <b>Programming</b> <b>Machines</b> the L 1 loss function is minimised, while Quadratic <b>Programming</b> <b>Machines</b> allow the minimisation of the L 2 cost function, or a mixture of both the L 1 and L 2 noise models. Regularisation is implicitly performed by the expansion into linearisation space by choosing a suitable kernel function), additionally weight decay regularisation is available. First experimental results for one-dimensional curve-fitting using linear <b>programming</b> <b>machines</b> demonstrate the performance of the new method...|$|R
40|$|The {{high level}} {{language}} FORTH {{is used for}} the electronic control of the Space Shuttle-based Ultraviolet Imaging Telescope, in a flight computer system which minimizes costs. The greater part of the breadboard version of the flight computer is assembled from commercially available components, reducing novel circuit design features and permitting simultaneous development of both hardware and software. The commercial boards are then refabricated on aluminum core heat conducting stock, using high reliability parts to produce the flight versions of the system. The system's ground support equipment employs a MINC- 25 minicomputer which performs such functions as flight computer software development, <b>PROM</b> <b>programming,</b> test and integration support, and flight operations support. The implementation of these concepts in flight computer telescope controls is described...|$|R
50|$|Run {{time is the}} {{execution}} phase, when the central processing unit executes the <b>program's</b> <b>machine</b> code instructions. <b>Programs</b> may run indefinitely. If execution terminates it will either be normal, expected behavior or an abnormality such as a crash.|$|R
5000|$|... #Caption: [...] Maurizio Bolognini, <b>Programmed</b> <b>Machines</b> (Nice, France, 1992-97). This {{installation}} uses computer {{codes to}} create endless flows of random images {{that nobody would}} see. Images are continuously generated but they are prevented from becoming a physical artwork.|$|R
50|$|For the blind, {{there are}} books in braille, audio-books, and text-to-speech {{computer}} <b>programs,</b> <b>machines</b> and e-book readers. Low vision {{people can make}} use of these tools as well as large-print reading materials and e-book readers that provide large font sizes.|$|R
5000|$|In {{higher level}} <b>programming,</b> <b>machine</b> data types are often hidden or {{abstracted}} as an implementation detail that would render code less portable if exposed. For instance, a generic [...] type might be supplied instead of integers of some specific bit-width.|$|R
50|$|Each {{magazine}} had various colour-coded sections which denoted {{the main}} {{subject of the}} article. These subjects included BASIC <b>Programming,</b> <b>Machine</b> Code, Applications, Games Programming, with occasional sections on Peripherals. Later issues included introductions to other computer languages: LOGO, PASCAL, LISP, and FORTH.|$|R
5000|$|Instruction Set Simulator This {{technique}} {{treats the}} compiled <b>programs</b> <b>machine</b> code as its input 'data' and fully simulates the host machine instructions, monitors the code for conditional or unconditional breakpoints or programmer requested [...] "single cycle" [...] animation requests between every step.|$|R
40|$|In {{this paper}} we analyze the {{national}} education reforms undertaken in Brazil from 1995 to 2002, particularly {{the national education}} policies for secondary and professional teaching, with IDB (Interamerican Development Bank) external financing, especially dedicated to the following national programs: Proep Program of Expansion of the Professional Education, regulated by the Ministry of Education jointly with the Ministry for Work and Employment and with an approximate 250 million dollars external loan acquired at IDB and with a 250 million dollars national compensation, totaled up 500 million dollars, approved in November 1997, and <b>Promed</b> <b>Program</b> of Improvement and Expansion of the Secondary Teaching Project Young School, regulated by MEC (Ministry of Education), with a 1 billion dollars resource, being 500 million dollars originated from an external loan with IDB plus a national compensation for other 500 million dollars approved in November 1999...|$|R
2500|$|In {{particular}} see chapter 11: Models Similar to Digital Computers and chapter 14: Very Simple Bases for Computability. In {{the former}} chapter he defines [...] "Program machines" [...] {{and in the}} later chapter he discusses [...] "Universal <b>Program</b> <b>machines</b> with Two Registers" [...] and [...] "...with one register", etc.|$|R
40|$|Abstract—A {{branching}} <b>program</b> <b>machine</b> (BM) is {{a special}} purpose processor that uses only two kinds of instructions: Branch and output instructions. Thus, the architecture for the BM is much simpler than that for a general purpose proces-sor (MPU). Since the BM uses the dedicated instructions for a special purpose application, it is faster than the MPU. This paper presents a packet classifier using a parallel branching <b>program</b> <b>machine</b> (PBM). To reduce computation time and code size, first, {{a set of rules}} for the packet classifier is partitioned into groups. Then, they are evaluated by the PBM in parallel. Also, this paper shows a method to estimate the number of necessary BMs to realize the packet classifier. The PBM 32 consisting of 32 BMs has been implemented on an FPGA, and compared with the Intel’...|$|R
5000|$|... 1994. C4.5: <b>Programs</b> for <b>Machine</b> Learning. Morgan Kaufmann Publishers[...]|$|R
40|$|Semiparametric {{models are}} useful {{tools in the}} case where domain {{knowledge}} exists about the function to be estimated or emphasis is put onto understandability of the model. We extend two learning algorithms - Support Vector <b>machines</b> and Linear <b>Programming</b> <b>machines</b> to this case and give experimental results for SV machines...|$|R
