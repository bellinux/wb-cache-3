247|141|Public
2500|$|Polish success {{continued}} until early 1920. Sporadic battles erupted between Polish {{forces and the}} Red Army, but the latter was preoccupied with the White counter-revolutionary forces and was steadily retreating on the entire western frontline, from Latvia in the north to Ukraine in the south. In early summer 1919, the White movement had gained the initiative, and its forces {{under the command of}} Anton Denikin were marching on Moscow. Piłsudski was aware that the Soviets were not friends of independent Poland, and considered war with Soviet Russia inevitable. He viewed their westward advance as a major issue, but also thought that he could get a better deal for Poland from the Bolsheviks than their Russian civil war contenders, as the White Russians – representatives of the old Russian Empire, <b>partitioner</b> of Poland – were willing to accept only limited independence of Poland, likely in the borders similar to that of Congress Poland, and clearly objected to Ukrainian independence, crucial for Piłsudski's Międzymorze, while the Bolsheviks did proclaim the partitions null and void. Piłsudski thus speculated that Poland would be better off with the Bolsheviks, alienated from the Western powers, than with the restored Russian Empire. By his refusal to join the attack on Lenin's struggling government, ignoring the strong pressure from the Entente, Piłsudski had possibly saved the Bolshevik government in summer–fall 1919, although a full-scale attack by the Poles in support of Denikin was not possible. He later wrote that in case of a White victory, in the east Poland could only gain the [...] "ethnic border" [...] at best (the Curzon line). At the same time, Lenin offered Poles the territories of Minsk, Zhytomyr, Khmelnytskyi, in what was described as mini [...] "Brest"; Polish military leader Kazimierz Sosnkowski wrote that the territorial proposals of the Bolsheviks were much better than what the Poles had wanted to achieve.|$|E
5000|$|When {{the cluster}} for Apache Cassandra is designed, an {{important}} point is to select the right <b>partitioner.</b> Two partitioners exist: ...|$|E
50|$|Jostle is a {{sequential}} {{and parallel}} graph partitioning solver developed by Chris Walshaw. The commercialized {{version of this}} <b>partitioner</b> is known as NetWorks.|$|E
50|$|In the meantime, Piłsudski had {{correctly}} {{predicted that}} the war would ruin {{all three of the}} <b>partitioners,</b> a conclusion most people thought highly unlikely before 1918. Piłsudski, in addition to his Legions, would also form the Polish Military Organization, a secret counterpart to the officially pro-Austrian Legions. PMO, clearly tasked with regaining Polish independence, would increasingly work against all three <b>partitioners.</b>|$|R
50|$|It was {{the only}} First World War Polish {{formation}} that fought against all three <b>partitioners</b> of Poland (Austria, Germany and Russia).|$|R
40|$|The {{realization}} of efficient parallel graph <b>partitioners</b> requires the parallelization of the multi-level framework which {{is commonly used}} in sequential <b>partitioners</b> to improve quality and speed. While parallel matching algorithms are now efficient and un-biased enough to yield coarsened graphs of good quality, the local optimization algorithms used in the refinement step during uncoarsening are still an issue. This talk will address this problem and present scalable parallel diffusive methods which can advantageously replace classical Fiduccia-Mattheyses-like algorithms for this purpose...|$|R
5000|$|A {{multi-level}} graph partitioning algorithm {{works by}} applying {{one or more}} stages. Each stage reduces the size ofthe graph by collapsing vertices and edges, partitions the smaller graph, then maps back and refines this partition of the original graph. [...] A wide variety of partitioning and refinement methods can be applied within the overall multi-level scheme. In many cases, this approach can give both fast execution times and very high quality results. One widely used example of such an approach is METIS, a graph <b>partitioner,</b> and hMETIS, the corresponding <b>partitioner</b> for hypergraphs.|$|E
5000|$|RandomPartitioner (RP): This <b>partitioner</b> {{randomly}} distributes the key-value pairs {{over the}} network, {{resulting in a}} good load balancing. Compared to OPP, more nodes have to be accessed to get a number of keys.|$|E
5000|$|OrderPreservingPartitioner (OPP): This <b>partitioner</b> {{distributes}} the key-value pairs in {{a natural}} way so that similar keys are not far apart. The advantage is that fewer nodes have to be accessed. The drawback is the uneven distribution of the key-value pairs.|$|E
40|$|A {{parallel}} method for the dynamic partitioning of unstructured meshes is described. The method introduces a new iterative optimisation technique known as relative gain optimisation which both balances the workload {{and attempts to}} minimise the interprocessor communications overhead. Experiments {{on a series of}} adaptively refined meshes indicate that the algorithm provides partitions of an equivalent or higher quality to static <b>partitioners</b> (which do not reuse the existing partition) and much more rapidly. Perhaps more importantly, the algorithm results in {{only a small fraction of}} the amount of data migration compared to the static <b>partitioners...</b>|$|R
40|$|A {{number of}} {{techniques}} are described for solving sparse linear systems on parallel platforms. The general approach used is a domain decomposition type method {{in which a}} processor is assigned {{a certain number of}} rows of the linear system to be solved. Strategies that are discussed include non-standard graph <b>partitioners,</b> and a forced load-balance technique for the local iterations. A common practice when partitioning a graph is to seek to minimize the number of cut-edges and to have an equal number of equations per processor. It is shown that <b>partitioners</b> that takeinto account the values of the matrix entries may be more effective...|$|R
40|$|Abstract. To {{efficiently}} {{execute a}} finite element application program on a distributed memory multicomputer, {{we need to}} distribute nodes of a finite element graph to processors of a distributed memory multicomputer as evenly as possible and minimize the communication cost of processors. This partitioning problem {{is known to be}} NP-complete. Therefore, many heuristics have been proposed to find satisfactory sub-optimal solutions. Based on these heuristics, many graph <b>partitioners</b> have been developed. Among them, Jostle, Metis, and Party are considered as the best graph <b>partitioners</b> available up-to-date. For these three graph <b>partitioners,</b> in order to minimize the total cut-edges, in general, they allow 3 % to 5 % load imbalance among processors. This is a tradeoff between the communication cost and the computation cost of the partitioning problem. In this paper, we propose an optimization method, the dynamic diffusion method (DDM), to balance the 3 % to 5 % load imbalance allowed by these three graph <b>partitioners</b> while minimizing the total cut-edges among partitioned modules. To evaluate the proposed method, we compare the performance of the dynamic diffusion method with the directed diffusion method and the multilevel diffusion method on an IBM SP 2 parallel machine. Three 2 D and two 3 D irregular finite element graphs are used as test samples. For each test sample, 3 % and 5 % load imbalance situations are tested. From the experimental results, we have the following conclusions. (1) Th...|$|R
50|$|Software/Configware Co-Compilation is {{used for}} {{reconfigurable}} computing to generate the code for both, an instruction-stream-based microprocessor and a reconfigurable accelerator interfaced to it. Such a co-compiler (see figure) has a <b>partitioner</b> which accepts input from a high level language source, such as, for instance a programming language, or the output from tools like MATLAB, and automatically partitions it into parallelizable parts suitable for the reconfigurable accelerator and the rest for running on the microprocessor. By loop transformations the <b>partitioner</b> converts the parallelizable parts into a configware source, which is compiled by a Configware Compiler generating configware code for {{the configuration of the}} reconfigurable accelerator like, for instance an FPGA, or a coarse-grained reconfigurable array, and flowware code for organizing the data streams going from and to the accelerator.|$|E
50|$|Later on, United Artists Holding Europe {{stepped in}} as part owner, and that {{ownership}} {{eventually became a}} part of Flextech, which was controlled by the US cable company Tele-Communications Inc. (TCI). In 1993, Flextech gained its first stake in the station after acquiring TCI's TV interests in Europe. In 1996, it started discussions about increasing its stake to gain full control; at that point Flextech held 27% with Cox (38%), BBC (20%) and Pearson (15%). By the Autumn, Flextech held 80% of UK Gold. Flextech's main reason for increasing its stake in UK Gold was in <b>partitioner</b> of new talks with the BBC.|$|E
50|$|She {{graduated}} as a National Public Accountant and Expert <b>Partitioner</b> (National University of the Littoral, 1960). Her academic expertise lies in {{the economic}} and social development of Latin America (Santiago, ESCOLATINA, University of Chile, Santiago,1963-4), and she received her D.Phil in Development Studies (Institute of Development Studies, IDS, Sussex University, 1989). Her early feminist and humanitarian vocation earned her imprisonment by the military regimes of General Juan Domingo Perón (1954) in Argentina and General Augusto Pinochet (1973) in Chile. Repatriated by a decree of the President of Argentina, in 1973, she was expelled by the de facto government of Jorge Rafael Videla (1976), destined for the United Kingdom.|$|E
40|$|We {{develop a}} new multi-way, hybrid spectral/iterative {{hypergraph}} partitioning algorithm that combines the strengths of spectral <b>partitioners</b> and iterative improvement algorithms {{to create a new}} class of <b>partitioners.</b> We use spectral information (the eigenvectors of a graph) to generate initial partitions, in uence the selection of iterative improvement moves, and break out of local minima. Our 3 -way and 4 way partitioning results exhibit signi cant improvement over current published results, demonstrating the effectiveness of our new method. Our hybrid algorithm produces an improvement of 25 % over GFM for 3 way partitions, 41 % improvement over GFM for 4 -way partitions, and 58 % improvement over MLF for 4 -way partitions...|$|R
50|$|In the {{aftermath}} of World War I, Poland fought to preserve its newly regained independence, lost in the 1795 partitions of Poland, and to carve out the borders of a new multinational federation (Intermarium) from the territories of their former <b>partitioners,</b> Russia, Germany, and Austria-Hungary.|$|R
40|$|The {{study of}} supply chains and {{networks}} has grown rapidly {{as an area}} of academic interest from the early 1990 s onwards. Economic, sociologists and management scholars acknowledged that studying firms individually could not sufficiently explain real life phenomena and {{did not lead to}} useful recommendation for <b>partitioners...</b>|$|R
5000|$|Other {{operating}} systems (perhaps DOS programs used by backup or recovery software), boot loaders, or partitioners may have problems viewing or editing partitions {{that do not}} follow a CHS alignment. (Generally, unpredictable results may come from using more than one <b>partitioner</b> on the same partition table without checking the alignments with tools such as Ranish Partition Manager. For example, operating system installers usually start with a partition editor {{so it may be}} important that this uses the same alignments as the previous partition editors, if all partitions are not deleted (and the computer reset) before installing the operating system. The variation in CHS geometry is almost always a different number of heads per cylinder, for example, 240 instead of 255. However, partition editors may seem to ignore this sort of geometry in some situations. [...] "Head" [...] and [...] "track" [...] mean the same thing in this context.) ...|$|E
5000|$|Polish success {{continued}} until early 1920. Sporadic battles erupted between Polish {{forces and the}} Red Army, but the latter was preoccupied with the White counter-revolutionary forces and was steadily retreating on the entire western frontline, from Latvia in the north to Ukraine in the south. In early summer 1919, the White movement had gained the initiative, and its forces {{under the command of}} Anton Denikin were marching on Moscow. Piłsudski was aware that the Soviets were not friends of independent Poland, and considered war with Soviet Russia inevitable. He viewed their westward advance as a major issue, but also thought that he could get a better deal for Poland from the Bolsheviks than their Russian civil war contenders, as the White Russians - representatives of the old Russian Empire, <b>partitioner</b> of Poland - were willing to accept only limited independence of Poland, likely in the borders similar to that of Congress Poland, and clearly objected to Ukrainian independence, crucial for Piłsudski's Międzymorze, while the Bolsheviks did proclaim the partitions null and void. Piłsudski thus speculated that Poland would be better off with the Bolsheviks, alienated from the Western powers, than with the restored Russian Empire. By his refusal to join the attack on Lenin's struggling government, ignoring the strong pressure from the Entente, Piłsudski had possibly saved the Bolshevik government in summer-fall 1919, although a full-scale attack by the Poles in support of Denikin was not possible. He later wrote that in case of a White victory, in the east Poland could only gain the [...] "ethnic border" [...] at best (the Curzon line). At the same time, Lenin offered Poles the territories of Minsk, Zhytomyr, Khmelnytskyi, in what was described as mini [...] "Brest"; Polish military leader Kazimierz Sosnkowski wrote that the territorial proposals of the Bolsheviks were much better than what the Poles had wanted to achieve.|$|E
5000|$|Vista's partitioners {{may not be}} {{compatible}} withXP/2000 (see Logical disk manager#Compatibility problems). If you use Windows 2000/XP, probably the safest approach (for disks under 2 TiB) {{is to use a}} CHS partition table alignment that is chosen by Windows XP/2000 (not Vista or Windows 7). If starting with a disk with nothing important on it, delete all partitions, unplug the disk or reboot, create at least one partition with Windows XP/2000 Disk Management or the XP/2000 installer, and format all FAT partitions. The alignment can be checked with Ranish Partition Manager: All partitions (including EBR extended partitions—type 05) should start {{at the beginning of a}} head, and end at the end of a cylinder. If nothing is shown in red (with error messages when you highlight them) you probably have a disk with a standard CHS partition table alignment. If you wish to edit the partition table with Linux, first run sfdisk with [...] "--show-geometry" [...] and [...] "--show-pt-geometry". If these return the same geometry, it should be safe to use GParted, so long as it is set to round to cylinders, and you only add partitions to the end of the partition table. If you add a partition to the middle of the extended partition table, GParted will not put them in the order they are on the disk (so that hda7 will follow hda9 instead of hda6). The order can be fixed with a Linux fdisk advanced function. Most Linux partitioners that don't use parted, may not end EBR extended partitions (type 05) on the same sector as their logical drives. When GParted or parted edit these [...] "nonstandard" [...] partition tables, they will [...] "fix" [...] all these EBRs, so that the extended partitions end on the same sector as their logical drives. The <b>partitioner</b> then may show these partitions as having no [...] "errors". This can also be checked using (for example) sfdisk -l -x -us /dev/hda.|$|E
40|$|Abstract | Under the interconnect-centric design paradigm, {{partitioning}} {{is seen as}} {{the crucial}} step that de nes the interconnect [1]. To meet the performance requirement of today's complex design, performance driven <b>partitioners</b> must consider the amount of interconnect induced by partitioning as well as its impact on performance. In this paper, we provide new performance driven formulation for cell move based top-down multiway partitioning algorithms with consideration of the local and global interconnect delay. In our acyclic partitioning " formulation, cell moves are restricted to maintain acyclicity in partitioning solution to prevent cyclic dependency among cells in di erent partitions. In our acyclic partitioning " formulation, acyclic constraints are relaxed to give <b>partitioners</b> capability of minimizing cutsize and delay. Our new acyclic constraint based performance driven multiway partitioning algorithm FLARE obtains (i) 4...|$|R
5|$|In World War I, the <b>partitioners</b> of Poland fought each other, {{with the}} German Empire and Austro-Hungarian Empire aligned against the Russian Empire. The Polish Legions in Austro-Hungary {{were created by}} Józef Piłsudski in order to exploit these divisions, serving {{as one of his}} primary tools for {{restoring}} Polish independence.|$|R
40|$|The {{top-down}} “quadratic placement” methodology {{is rooted}} in such works as [36, 9, 32] and is reputedly the basis of commercial and in-house VLSI placement tools. This methodology iterates between two basic steps: solving sparse systems of linear equations to achieve a continuous placement solution, and “legalization” of the placement by transportation or partitioning. Our work, which extends [5], studies implementation choices and underlying motivations for the quadratic placement methodology. We first recall some observations from [5], e. g., that (i) Krylov subspace engines for solving sparse linear systems are more effective than traditional successive over-relaxation (SOR) engines [33] and (ii) that correlation convergence criteria can maintain solution quality while using substantially fewer solver iterations. The focus of our investigation is the coupling of numerical solvers to iterative <b>partitioners</b> that is {{a hallmark of the}} quadratic placement methodology. We provide evidence that this coupling may have historically been motivated by the pre- 1990 ’s weakness of min-cut <b>partitioners,</b> i. e., numerical engines were needed to provide helpful hints to weak min-cut <b>partitioners.</b> In particular, we show that a modern multilevel FM implementation [2] derives no benefit from such coupling. We also show that most insights obtained from study of individual min-cut partitioning instances (within the top-down placement) also hold within the overall context of a complete top-down placer implementation...|$|R
40|$|A {{parallel}} <b>partitioner</b> for partitioning unstructured {{finite element}} meshes on distributed memory architectures is developed. The element based <b>partitioner</b> can handle mixtures of different element types. All algorithms {{adopted in the}} <b>partitioner</b> are scalable, including a communication template for unpredictable incoming messages, as shown in actual timing measurements...|$|E
40|$|To achieve good {{parallel}} efficiency, applications using structured adaptive mesh refinement (SAMR) need to repeatedly repartition and redistribute {{the underlying}} dynamic grid hierarchy. However, no single <b>partitioner</b> {{works well for}} all application and computer states. This paper presents the implementation and evaluation of a patch-based <b>partitioner</b> for SAMR grid hierarchies. The <b>partitioner</b> results in a good and stable load balance, on average 3. 1 %. Space-filling curves are used to reduce the high communication volumes that are inherent {{in this type of}} <b>partitioner.</b> The <b>partitioner</b> will {{be a part of the}} Meta-Partitioner, a partitioning framework that automatically selects, configures and invokes good-performing partitioners for general SAMR applications. Access to a large number of complementing partitioners is essential for the Meta-Partitioner. The presented <b>partitioner</b> will help to significantly decrease run-times for SAMR applications where load balance is the main priority...|$|E
40|$|A {{concurrent}} <b>partitioner</b> for partitioning unstructured {{finite element}} meshes on distributed memory architectures is developed. The <b>partitioner</b> uses an element-based partitioning strategy. Its main {{advantage over the}} more conventional node-based partitioning strategy is its modular programming approach {{to the development of}} parallel applications. The <b>partitioner</b> first partitions element centroids using a recursive inertial bisection algorithm. Elements and nodes then migrate according to the partitioned centroids, using a data request communication template for unpredictable incoming messages. Our scalable implementation is contrasted to a non-scalable implementation which is a straightforward parallelization of a sequential <b>partitioner...</b>|$|E
40|$|A {{parallel}} method for dynamic partitioning of unstructured meshes is described. The method employs a new iterative optimisation technique which both balances the workload {{and attempts to}} minimise the interprocessor communications overhead. Experiments {{on a series of}} adaptively refined meshes indicate that the algorithm provides partitions of an equivalent or higher quality to static <b>partitioners</b> (which do not reuse the existing partition) and much more quickly. Perhaps more importantly, the algorithm results in {{only a small fraction of}} the amount of data migration compared to the static <b>partitioners.</b> Key words. graph-partitioning, adaptive unstructured meshes, load-balancing, parallel scientific computation. 1 Introduction The use of unstructured mesh codes on parallel machines can be one of the most efficient ways to solve large Computational Fluid Dynamics (CFD) and Computational Mechanics (CM) problems. Completely general geometries and complex behaviour can be readily modelled an [...] ...|$|R
40|$|A {{parallel}} method for the dynamic partitioning of unstructured meshes is outlined. The method includes diffusive load-balancing techniques and an iterative optimisation technique known as relative gain optimisation which both balances the workload {{and attempts to}} minimise the interprocessor communications overhead. It can also optionally include a multilevel strategy. Experiments {{on a series of}} adaptively refined meshes indicate that the algorithm provides partitions of an equivalent or higher quality to static <b>partitioners</b> (which do not reuse the existing partition) and much more rapidly. Perhaps more importantly, the algorithm results in {{only a small fraction of}} the amount of data migration compared to the static <b>partitioners.</b> Key words. graph-partitioning, adaptive unstructured meshes, load-balancing, parallel computing. 1 Introduction The need for mesh partitioning arises naturally in many finite element (FE) and finite volume (FV) applications. Meshes composed of elements such a [...] ...|$|R
40|$|We study {{alternatives}} to FM-based partitioning {{in the context}} of end-case processing for top-down standard-cell placement. The primary motivation is that small partitioning instances frequently contain multiple cells larger than the prescribed partitioning tolerance (balance constraint) and cannot be moved while preserving the legality of a solution. We focus on optimal partitioning and placement algorithms, based on either enumeration or branch-and-bound, that are invoked for instances below prescribed size thresholds, e. g., ! 10 cells for placement and ! 30 cells for partitioning. Such <b>partitioners</b> transparently handle tight balance constraints and uneven cell sizes while typically achieving 40 % smaller cuts than the best of several FM starts for instances between 10 and 35 movable nodes. On such instances, branch-and-bound codes also achieve surprising speedups, on average, over single FM starts. Enumeration-based <b>partitioners</b> relying on Gray codes, while easier to implement and t [...] ...|$|R
30|$|In most {{comprehensive}} SPICE and fast-SPICE acceleration approaches, the static or dynamic <b>partitioner</b> plays a central role. In our approach, since {{we keep the}} single-rate principle of the simulation and also for sake of simplicity, we only considered a static <b>partitioner</b> that divides the circuit in an early setup phase into a predefined number of partitions. In contrast to a static <b>partitioner,</b> dynamic partitioners re-partition the circuit during the transient analysis based on the current state and activity of each circuit part [15].|$|E
30|$|The {{starting}} point of our approach is a circuit <b>partitioner.</b> Our approach of partitioning uses, extends, and combines existing partitioning approaches. Similar to other domain decomposition approaches [6, 28] our <b>partitioner</b> minimizes the number of connection nodes between the partitions, but in addition it also makes sure that the fill-in rate of the resulting coupling system is limited [24] and that all partitions can be evaluated and solved in a fully parallel way [6]. This <b>partitioner</b> {{is presented in the}} first section of this paper.|$|E
40|$|The SPRI {{infrastructure}} is currently under construction. The status {{on the development}} of these three SPRI blocks— <b>partitioner,</b> API generator and synthesizer are discussed below. The <b>partitioner</b> is capable of reading the partitioning specification and extracting the structural information from the simulation database for the API generator. The <b>partitioner</b> is also capable of revising the software model and interfacing with the API generator. The hardware portion has been separated and we are currently in the process of interfacing these portions with the Trident synthesizer. It is planned that the <b>partitioner</b> will support different-level partitioning tasks including instance level, process level, function level and datalayout level, even though it only supports instance-level and process-level partitioning presently. For instance, if inputting such partitioning description as (1) ...|$|E
40|$|Under the interconnect-centric design paradigm, {{partitioning}} {{is seen as}} {{the crucial}} step that defines the interconnect [1]. To meet the performance requirement of today's complex design, performance driven <b>partitioners</b> must consider the amount of interconnect induced by partitioning as well as its impact on performance. In this paper, we provide new performance driven formulation for cell move based top-down multiway partitioning algorithms with consideration of the local and global interconnect delay. In our "constrained acyclic partitioning" formulation, cell moves are restricted to maintain acyclicity in partitioning solution to prevent cyclic dependency among cells in different partitions. In our "relaxed acyclic partitioning" formulation, acyclic constraints are relaxed to give <b>partitioners</b> capability of minimizing cutsize and delay. Our new acyclic constraint based performance driven multiway partitioning algorithm FLARE obtains (i) 4 % to 13 % better delay compared to the state-of [...] ...|$|R
25|$|With {{the success}} of the Greater Poland Uprising (1918–19), Poland had re-established its {{statehood}} {{for the first time since}} the 1795 partition. Forming the Second Polish Republic, it proceeded to carve out its borders from the territories of its former <b>partitioners.</b> Many of these territories had long been the object of conflict between Russia and Poland.|$|R
5000|$|Historically, {{the source}} of Poland [...] "A" [...] and [...] "B" [...] {{can be traced to}} the period of the {{partitions}} of Poland, and different policies of the <b>partitioners,</b> which resulted in a much larger industrial development of the Prussian partition, compared to the Austrian and Russian partitions (including the so-called eastern Kresy) where the imperial exploitation policies were rampant.|$|R
