116|293|Public
5|$|DragonFly's kernel is a hybrid, {{containing}} {{features of}} both monolithic and microkernels, {{such as the}} message passing capability of microkernels enabling larger portions of the OS to benefit from <b>protected</b> <b>memory,</b> as well as retaining the speed of monolithic kernels for certain critical tasks. The messaging subsystem being developed is {{similar to those found}} in microkernels such as Mach, though it is less complex by design. DragonFly's messaging subsystem has the ability to act in either a synchronous or asynchronous fashion, and attempts to use this capability to achieve the best performance possible in any given situation.|$|E
25|$|Copland is an {{unreleased}} {{operating system}} prototype for Apple Macintosh computers {{of the late}} 1990s, intended to be released as the modern System 8 successor to the aging but venerable System 7. It introduced <b>protected</b> <b>memory,</b> preemptive multitasking, {{and a number of}} new underlying operating system features, while retaining compatibility with existing Mac applications. Copland's planned successor, codenamed Gershwin, was intended to add advanced features such as application-level multithreading.|$|E
25|$|Windows NT {{kernel mode}} has {{full access to}} the {{hardware}} and system resources of the computer and runs code in a <b>protected</b> <b>memory</b> area. It controls access to scheduling, thread prioritization, memory management and the interaction with hardware. The kernel mode stops user mode services and applications from accessing critical areas of the operating system {{that they should not}} have access to; user mode processes must ask the kernel mode to perform such operations on their behalf.|$|E
50|$|This {{technique}} <b>protects</b> <b>memory</b> used by one process against access or modification by another. By itself it {{does not}} <b>protect</b> <b>memory</b> from erroneous access by the owning process. It also allows programs to be easily relocated in memory, since only the base and bounds registers have to be modified when the program is moved.|$|R
40|$|The {{need for}} {{fault-tolerant}} computing is addressed from the viewpoints of (1) {{why it is}} needed, (2) how to apply it in {{the current state of}} technology, and (3) what it means {{in the context of the}} Phoenix computer system and other related systems. To this end, the value of concurrent error detection and correction is described. User protection, program retry, and repair are among the factors considered. The technology of algebraic codes to <b>protect</b> <b>memory</b> systems and arithmetic codes to <b>protect</b> <b>memory</b> systems and arithmetic codes to protect arithmetic operations is discussed...|$|R
25|$|Cognitive {{inhibition}} is {{the suppression}} of unwanted or irrelevant thoughts to <b>protect</b> working <b>memory</b> and attention resources.|$|R
25|$|DOS allowed {{direct access}} to video cards, keyboards, mice, sound devices, and all {{other parts of the}} system, while Windows 95– with its <b>protected</b> <b>memory</b> model– {{restricted}} access to all of these, working on a much more standardized model. Microsoft needed a quick solution for programmers; the operating system was only months away from being released. Eisler (development lead), St. John, and Engstrom (program manager) worked together to fix this problem, with a solution that they eventually named DirectX.|$|E
25|$|Mac OS is {{characterized}} by its monolithic system. From its original release through System 4, it ran only one application at a time. Even so, it was noted for its ease of use. Mac OS gained cooperative multitasking with System 5, which ran on the Macintosh SE and Macintosh II. It was criticized for its very limited memory management, lack of <b>protected</b> <b>memory,</b> no access controls, and susceptibility to conflicts among extensions that provide additional functionality such as networking or support for a particular device.|$|E
25|$|As the {{stability}} of the operating system collapsed, the ready answer was that Taligent would fix this—it was fully reentrant, truly multitasking, and made heavy use of <b>protected</b> <b>memory.</b> When the Taligent efforts collapsed, Apple was left with an aging OS and no designated solutions. By 1994 the press buzz surrounding the upcoming release of Windows 95 started to grow to a crescendo, often questioning Apple's ability to respond to the challenge it presented. The press turned on the company, often introducing Apple's new projects as failures in the making.|$|E
5000|$|... #Caption: Three {{segments}} in <b>protected</b> mode <b>memory</b> (click on image to enlarge), {{with the local}} descriptor table.|$|R
50|$|As of 2009, {{the most}} common error-{{correction}} codes use Hamming or Hsiao codes that provide single bit error correction and double bit error detection (SEC-DED). Other error-correction codes have been proposed for <b>protecting</b> <b>memory</b> double-bit error correcting and triple-bit error detecting (DEC-TED) codes, single-nibble error correcting and double-nibble error detecting (SNC-DND) codes, Reed-Solomon error correction codes, etc. However, in practice multi-bit correction is usually implemented by interleaving multiple SEC-DED codes.|$|R
40|$|It has {{previously}} been shown that expression of memory of maze-learning in mice is blocked by puromycin injected intracerebrally one or more days after the training experience. Bilateral adrenalectomy before training has now been found to <b>protect</b> <b>memory</b> against the effects of puromycin. This protection is absent when adrenalectomy follows training. In view of control experiments, we conclude that adrenalectomy before training modifies factors necessary {{for the expression of}} memory and that this alteration makes puromycin ineffective in blocking memory...|$|R
25|$|Generally {{considered}} a failure, the Lisa nevertheless introduced {{a number of}} advanced features that would not re-appear on the Macintosh {{for a number of}} years. Among these was an operating system which featured <b>protected</b> <b>memory</b> and preemptive multitasking, and a more document-oriented workflow. The hardware itself was also much more advanced than the Macintosh, with a hard drive and support for up to 2megabytes (MB) of RAM, expansion slots and a larger higher-resolution display. The main exception being that while the Macintosh also used the 68000 processor, the Macintosh initially used a version clocked at 7.89Mhz, compared to the 5Mhz version used in the Lisa. The complexity of the Lisa operating system and its associated programs overtaxed the slower processor enough that users perceived it to be sluggish, particularly when scrolling in documents.|$|E
2500|$|New {{applications}} {{written with}} Copland in mind, {{are able to}} directly communicate with the system servers and thereby gain many advantages in terms of performance and scalability. They can also communicate with the kernel to launch separate applications or threads, which run as separate processes in <b>protected</b> <b>memory,</b> as in most modern operating systems. However, these separate applications can not use non-reentrant calls like QuickDraw, and thus could have no user interface. Apple suggested that larger programs could place their user interface in a normal Macintosh application, which would then start [...] "worker threads" [...] externally.|$|E
2500|$|In {{the first}} stage, the {{existing}} system would be moved {{on top of a}} new kernel-based OS with built-in support for multitasking and <b>protected</b> <b>memory.</b> The existing libraries, like QuickDraw, would take too long to be rewritten for the new system and would not be converted to be reentrant. Instead, a single paravirtualized operating system, the [...] "Blue Box", keeps applications and older code like QuickDraw in a single memory block so they continue to run as they had in the past. The Blue Box operating system itself runs in a separate memory space, so crashing applications or extensions within Blue Box can not crash the entire machine.|$|E
40|$|Abstract—A {{mathematical}} {{bit error}} rate (BER) model for upsets in <b>memories</b> <b>protected</b> by error-correcting codes (ECCs) and scrubbing is derived. This model is compared with expected upset rates for sub- 100 -nm SRAM memories in space environments. Because sub- 100 -nm SRAM memory cells can be upset by a critical charge (crit) of 1. 1 fC or less, they may exhibit significantly higher upset rates than those reported in earlier technologies. Because of this, single-bit-correcting ECCs may become impractical due to memory scrubbing rate limitations. The overhead needed for <b>protecting</b> <b>memories</b> with a triple-bit-correcting ECC is examined relative to an approximate 2 X “process generation” scaling penalty in area, speed, and power. Index Terms—Error correction coding, memory fault tolerance, radiation effects. I...|$|R
5000|$|... "The {{house will}} <b>protect</b> the <b>memory</b> of the 69 {{who were killed}} at Utøya", a father (of one of the massacre's survivors) wrote in a news article.|$|R
40|$|Elevated {{levels of}} {{radiation}} in Low Earth Orbit (LEO) can cause several unexpected behaviors in digital logic. These behaviors, known as Single Event Effects (SEEs), manifest themselves in two ways: unexpected short circuits (Single Event Latch Ups), and erroneous bit flips (Single Event Upsets). <b>Protecting</b> <b>memory</b> from SEEs is usually done via {{some type of}} SECDEC controller, and protecting IO {{can be done in}} a number of ways [...] the simplest of which entails using upper level protocols to verify data integrity. Several techniques are currently employed to deal with SEEs in microprocessors includin...|$|R
2500|$|The Lisa {{operating}} system featured preemptive multitasking and <b>protected</b> <b>memory,</b> then extremely advanced features {{for a personal}} computer. Based in part on advanced elements from the failed Apple III SOS {{operating system}} released three years earlier, the Lisa also organized its files in hierarchal directories, making the use of large hard drives practical. The Macintosh would eventually adopt this disk organizational design as well for its HFS filing system. Conceptually, the Lisa resembles the Xerox Star {{in the sense that}} it was envisioned as an office computing system; consequently, Lisa has two main user modes: the Lisa Office System and the Workshop. The Lisa Office System is the GUI environment for end users. The Workshop was a program development environment, and was almost entirely text-based, though it used a GUI text editor. The Lisa Office System was eventually renamed [...] "7/7", in reference to the seven supplied application programs: LisaWrite, LisaCalc, LisaDraw, LisaGraph, LisaProject, LisaList, and LisaTerminal.|$|E
2500|$|Mac OS {{continued}} to evolve up to version 9.2.2, including retrofits {{such as the}} addition of a nanokernel and support for Multiprocessing Services 2.0 in Mac OS 8.6, though its dated architecture made replacement necessary. Initially developed in the Pascal programming language, it was substantially rewritten in C++ for System 7. From its beginnings on an 8MHz machine with 128KB of RAM, it had grown to support Apple's latest 1GHz G4-equipped Macs. Since its architecture was laid down, features that were already common on Apple's competition, like preemptive multitasking and <b>protected</b> <b>memory,</b> had become feasible on the kind of hardware Apple manufactured. As such, Apple introduced Mac OS X, a fully overhauled Unix-based successor to Mac OS 9. OS X uses Darwin, XNU, and Mach as foundations, and is based on NeXTSTEP. It was released to the public in September 2000, as the Mac OS X Public Beta, featuring a revamped user interface called [...] "Aqua". At US$29.99, it allowed adventurous Mac users to sample Apple's new operating system and provide feedback for the actual release. The initial version of Mac OS X, 10.0 [...] "Cheetah", was released on March 24, 2001. Older Mac OS applications could still run under early Mac OS X versions, using an environment called [...] "Classic". Subsequent releases of Mac OS X included 10.1 [...] "Puma" [...] (2001), 10.2 [...] "Jaguar" [...] (2002), 10.3 [...] "Panther" [...] (2003) and 10.4 [...] "Tiger" [...] (2005).|$|E
50|$|<b>Protected</b> <b>memory</b> is {{a system}} where each program is given an area of memory to use and is not {{permitted}} to go outside that range. Use of <b>protected</b> <b>memory</b> greatly enhances both the reliability and security of a computer system.|$|E
40|$|It has {{previously}} been shown that the expression of memory of maze-learning in mice is blocked by intracerebrally-injected puromycin one or more days after the training experience, and that bilateral adrenalectomy before training <b>protects</b> <b>memory</b> against this effect of puromycin. Purified cortrophin gel, injected subcutaneously up to 3 days before training, has now been found to give results like those obtained with adrenalectomy and, additionally, to provide {{a high degree of}} protection when injected up to 16 hr after training. Several possible explanations for these effects have been considered and found to be inadequate...|$|R
5000|$|... {{providing}} <b>protected</b> or read-only <b>memory</b> {{by setting}} storage keys, ...|$|R
25|$|Internet Explorer 9 uses layered {{protection}} against malware. It uses technical measures to <b>protect</b> its <b>memory</b> like the DEP/NSX protection, Safe Exception handlers (SafeSEH) and ASLR protection used in Internet Explorer 8.|$|R
50|$|To {{further reduce}} the cost of manufacture, as {{compared}} with its predecessor, the Lisa, Apple did not choose to give the Macintosh <b>protected</b> <b>memory.</b> <b>Protected</b> <b>memory</b> came to the Macintosh platform in 2001 with the Mac OS X operating system.|$|E
50|$|<b>Protected</b> <b>memory</b> systems {{almost always}} include virtual memory as well.|$|E
5000|$|Persistent event log, {{stored in}} <b>protected</b> <b>memory</b> (not {{on the hard}} drive).|$|E
5000|$|July 3, 1973 - Patent No. 3744042 - <b>Memory</b> <b>Protect</b> for Magnetic Bubble Memory ...|$|R
25|$|In 2010, the French-based NGO Reporters Without Borders {{objected to}} the Turkish laws to <b>protect</b> the <b>memory</b> of Kemal Atatürk, saying they are in contradiction with the current European Union {{standards}} {{of freedom of speech}} in news media.|$|R
40|$|ISBN 978 - 1 - 61284 - 208 - 0 International audienceDrastic device shrinking, {{power supply}} reduction, {{increasing}} complexity and increasing operating speeds that accompanying technology scaling {{have reduced the}} reliability of nowadays ICs. The reliability of embedded memories is affected by particle strikes (soft errors), very low voltage operating modes, PVT variability, EMI and accelerated circuit aging. Error correcting codes (ECC) is an efficient mean for <b>protecting</b> <b>memories</b> against failures. A major issue with ECC is the speed penalty induced by the encoding and decoding circuits. In this paper we present an effective approach for eliminating this penalty and we demonstrate its efficiency {{in the case of}} an advanced reconfigurable OFDM modulator) ...|$|R
50|$|Virtual memory systems usually include <b>protected</b> <b>memory,</b> {{but this}} is not always the case.|$|E
5000|$|Memory {{protection}} (tasks {{are allowed}} to allocate to <b>protected</b> <b>memory</b> areas if need be) ...|$|E
50|$|<b>Protected</b> <b>memory</b> — memory {{protection}} {{so that if}} an application corrupts its memory, the memory of other applications will not be corrupted.|$|E
40|$|Due {{to advance}} {{technologies}} transistor size shrinks {{which makes the}} devices more vulnerable to noise and radiation effect. This affects the reliability of memories. Built-in current sensors (BICS) have been success {{in the case of}} single event upset (SEC). The process is taken one step further by proposing specific error correction codes to <b>protect</b> <b>memories</b> against multiple-bit upsets and to improve yield have been proposed. The method is evaluated using fault injection experiments. The results are compared with Hamming codes. The proposed codes provide a better performance compared to that of the hamming codes in terms of Single Event Upset. In the case of the Multi Bit Upset it provides better coverage in error deduction and correction...|$|R
40|$|This paper aims {{to study}} amateur films, {{made in a}} private context, as a {{powerful}} way of creating memory. To do so, we first present a theoretical analisys {{on the idea of}} “sites os memory” (Nora 1984) and also on the desire to <b>protect</b> <b>memory,</b> that calls to action the amateur filmmaker. At least, we analyze two Super- 8 amateur films produced in Fortaleza (Brazil), in 1978, which were re-edited in the short movie Supermemorias (Danilo Carvalho, 2010). This analysis evidences to us the editing process as a way of constructing new sites of memory and also allow us to reafirm that the amateur film production can instigate interesting and relevant contemporary investigations. </p...|$|R
40|$|Objectives. We tested whether social {{integration}} <b>protects</b> against <b>memory</b> loss and other cognitive disorders in late {{life in a}} nationally representative US sample of elderly adults, whether effects were stronger among disadvantaged individuals, and whether earlier cognitive losses explained the association (reverse causation) ...|$|R
