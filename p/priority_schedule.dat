14|1099|Public
30|$|It is {{important}} to note that in actual practice of ESGD, units are not dispatched corresponding to this table in a strict way, as there are long-term contracts that were signed before the policy came into practice. In this paper, in order to highlight the effect of ESGD, all units are dispatched strictly in accordance to the <b>priority</b> <b>schedule</b> order.|$|E
30|$|The average {{carbon price}} in the seven pilot ETSs in China was 43 ¥/ton {{by the end of}} October 2014. To provide a context for this figure, under ED, the <b>priority</b> <b>schedule</b> order of units may be changed by the {{emission}} cost when the carbon price level reaches threshold values that depend on the parameters of GenCos. Three threshold prices calculated from the data in Table  2 are 220, 347, 427 ¥/ton.|$|E
40|$|Abstract 130 patient {{bathroom}} and toilet door locksets in an acute hospital was surveyed {{to evaluate the}} design features that would satisfy the criteria of universal design, patient human factors, operating requirement of healthcare workers, and ease of emergency rescue. The data collected was categorized according to door handle type; latch and lock bolts; “in-use’ indicator; and external lock release mechanism. The results were used by Workplace Safety, Nursing and Facilities Maintenance departments to develop a <b>priority</b> <b>schedule</b> for improvement on the patient bathroom door locksets...|$|E
40|$|Abstract — Ad hoc {{networks}} formed {{without the}} aid of any established infrastructure are typically multi-hop networks. Location dependent contention and “hidden terminal” problem make <b>priority</b> <b>scheduling</b> in multi-hop networks significantly different from that in wireless LANs. Most of the prior work related to <b>priority</b> <b>scheduling</b> addresses issues in wireless LANs. In this paper, <b>priority</b> <b>scheduling</b> in multi-hop networks is discussed. We propose a scheme using two narrow-band busy tone signals to ensure medium access for high priority source stations. The simulation results demonstrate the effectiveness of the proposed scheme. Keywords—Ad hoc network, medium access control, <b>priority</b> <b>scheduling,</b> busy tone...|$|R
40|$|WiMAX {{is one of}} {{the most}} {{prevailing}} networks in the world. There are many concerning issues regarding WiMAX and scheduling of resources {{is one of the}}m. In this paper, we have evaluated and compared various WiMAX scheduling algorithms such as CAC, MWRR, Modified <b>Priority</b> <b>scheduling</b> algorithm and Proportional Fair scheduling algorithm. We have implemented and simulated these scheduling algorithms using OPNET Modeler. From the results it is concluded that Modified <b>Priority</b> <b>scheduling</b> algorithm is having maximum delay in the network. MWRR and Modified <b>Priority</b> <b>scheduling</b> algorithm are having maximum and minimum load respectively. CAC and Modified <b>Priority</b> <b>scheduling</b> algorithm have high throughput...|$|R
40|$|In {{this paper}} we {{introduce}} Causeway, operating system support facilitating {{the development of}} metaapplications, like <b>priority</b> <b>scheduling</b> and performance debugging, that control and analyze the execution of distributed programs. Meta-applications use Causeway to inject and access metadata on application execution paths to implement their specific goals. Causeway has two components: (1) interfaces to inject and access metadata and (2) mechanisms to automate propagation of metadata. Using Causeway we could rapidly implement a distributed <b>priority</b> <b>scheduling</b> system where <b>priority</b> of a task is injected and propagated as metadata, and accessed to implement global <b>priority</b> <b>scheduling.</b> This required writing only about 150 lines of code on top of Causeway. With this system we demonstrate global <b>priority</b> <b>scheduling</b> on an implementation of the TPC-W benchmark. ...|$|R
40|$|In multi-resolution source coding, {{a single}} code {{is used to}} give an {{embedded}} data description that may be decoded {{at a variety of}} rates. Recent work in practical multi-resolution coding treats the optimal design of fixed- and variable-rate tree-structured vector quantizers for multi-resolution coding. In that work the codes are optimized for a designer-specified <b>priority</b> <b>schedule</b> over the system rates, distortions, or slopes. The method relies on a collection of parameters, which may be difficult to choose. This paper explores the meaning and choice of the multi-resolution source coding parameters...|$|E
30|$|China’s current {{primary power}} {{dispatching}} model is PD, {{and a national}} ETS {{is yet to be}} implemented. Therefore, PD without emission trading (ET) is set as the BaU scenario, from which the simulation results are used as basic data for two allocation methods in other scenarios. The impact of different allowance allocation methods is studied in the PD with ET scenario, the ESDG with ET scenario and the ED with ET scenario. Under ED, as the carbon price may change the <b>priority</b> <b>schedule</b> order in the electricity market, the effects of different carbon price levels can be analyzed.|$|E
40|$|This paper obtains a new {{accurate}} {{model for}} sensitivity in power systems and uses it {{in conjunction with}} linear programming for the solution of load-shedding problems with a minimum loss of loads. For cases where the error in the sensitivity model increases, other linear programming and quadratic programming models have been developed, assuming currents at load buses as variables and not load powers. A weighted error criterion {{has been used to}} take <b>priority</b> <b>schedule</b> into account; it can be either a linear or a quadratic function of the errors, and depending upon the function appropriate programming techniques are to be employed...|$|E
40|$|Ad hoc {{networks}} formed {{without the}} aid of any established infrastructure are typically multi-hop networks. Location dependent contention and "hidden terminal" problem make <b>priority</b> <b>scheduling</b> in multi-hop networks significantly different from that in wireless LANs. Most of the prior work related to <b>priority</b> <b>scheduling</b> addresses issues in wireless LANs. In this paper, <b>priority</b> <b>scheduling</b> in multi-hop networks is discussed. We propose a scheme using two narrowband busy tone signals to ensure medium access for high priority source stations. The simulation results demonstrate the e#ectiveness of the proposed scheme...|$|R
40|$|Abstract. Builders of {{real-time}} systems {{often use}} <b>priority</b> <b>scheduling</b> in their systems without considering alternatives. This paper examines one alternative, pre-run-time scheduling, {{and show that}} when it can be applied it has significant advantages when compared to <b>priority</b> <b>scheduling</b> schemes. Keywords: Real-time systems; pre-run-time scheduling; priority scheduling; application constraints; processor utilization; system overhead; schedulability. 1...|$|R
40|$|In this paper, we {{investigate}} a simplified head-of-the-line with <b>priority</b> jumps (HOL-PJ) <b>scheduling</b> discipline. Therefore, we consider a discrete-time single-server queueing system with two priority queues of infinite capacity {{and with a}} newly introduced HOL-PJ priority scheme. We derive expressions for the probability generating function of the system contents and the packet delay. Some performance measures (such as mean and variance) of these quantities are derived and are used to illustrate the impact and significance of the HOL-PJ <b>priority</b> <b>scheduling</b> discipline in an output queueing switch. We compare this dynamic <b>priority</b> <b>scheduling</b> discipline with a FIFO scheduling and a static <b>priority</b> <b>scheduling</b> (HOL) and {{we investigate}} {{the influence of the}} different parameters of the simplified HOL-PJ scheduling discipline...|$|R
30|$|The {{simulation}} results in scenario 4 illustrate the carbon price incentives for technological innovation. For the generation mix considered in this paper, {{only when the}} carbon price is higher than 220 ¥/ton can the <b>priority</b> <b>schedule</b> order of power units be changed. The average price of China’s pilot emission market (43 ¥/ton) and the recent EU ETS carbon price (about 58 ¥/ton) are both inadequate to motivate emission reduction. The maximum carbon price in the EU ETS was 32 €/ton in 2006, equivalent to 319.36 ¥/ton (according to the 2006 exchange rate 9.98 ¥/€), and this could be sufficient to provide a substantial incentive.|$|E
40|$|This paper {{presents}} an empirical criterion for establishing privatization priorities for state owned enterprises. The approach uses firm {{performance as the}} basis for deciding the sequence in which firms are privatized. Sequencing is relevant because the order in which a group of state enterprises are taken up for privatization has efficiency implications, and an appropriate sequence based on efficiency considerations can be beneficial. Privatizing inefficient enterprises before efficient ones is a superior sequence as compared to one which reverses this order, {{and the size of the}} firms to be privatized is an important contingency. An improvement index is constructed for individual firms, and the index makes possible a comparison of multiple firms, thus, facilitating the construction of a <b>priority</b> <b>schedule.</b> This approach is demonstrated using a sample of Indian service sector firms, and the approach can aid policy-makers in transition economies as they undertake the privatization of state-owned enterprises. ...|$|E
40|$|This paper {{deals with}} a {{scheduling}} problem with alternative process plans that was motivated by a production of wire harnesses where certain parts can be processed manually or automatically by different types of machines. Only a subset of all the given activities will form the solution, so the decision whether the activity {{will appear in the}} schedule has to be made during the scheduling process. The problem considered is an extension of the resource constrained project scheduling problem with unary resources, positive and negative time-lags and sequence dependent setup times. We have proposed the problem representation by a special graph allowing to define alternative process plans. For this representation of the problem, an integer linear programming model is formulated. Finally a heuristic algorithm based on <b>priority</b> <b>schedule</b> construction with an unscheduling step is proposed and used to solve the case study of the wire harnesses production...|$|E
40|$|The fixed <b>priority</b> <b>scheduling</b> {{policies}} {{defined in}} {{the current version of}} the Real-Time POSIX standard provide a nice combination of simplicity, predictability, and efficiency, that make them suitable for most real-time applications. However, {{it is well known that}} with dynamic <b>priority</b> <b>scheduling</b> policies it is possible to achieve higher utilization levels of the system resources tha...|$|R
50|$|Dynamic <b>priority</b> <b>{{scheduling}}</b> {{is a type}} of scheduling algorithm {{in which}} the priorities are calculated during the execution of the system. The goal of dynamic <b>priority</b> <b>scheduling</b> is to adapt to dynamically changing progress and form an optimal configuration in self-sustained manner. It can be very hard to produce well-defined policies to achieve the goal depending on the difficulty of a given problem.|$|R
50|$|Earliest {{deadline}} first {{scheduling and}} Least slack time scheduling {{are examples of}} Dynamic <b>priority</b> <b>scheduling</b> algorithms.|$|R
40|$|This article {{shows that}} the same ray tracing program {{can be used for}} {{performing}} a fast previewing during scene composition as well as for calculating the final antialiased high quality image. The described algorithm controls a strong undersampling so that a rough approximation can be shown within a few seconds. Then this approximating image will be adaptively refined improving its quality continuously until the final error-free antialiased image is reached. Small changes in the scene will be rendered quite fast because our algorithm additionally exploits similarities to a preceding image. It is based on a recursive image subdivision algorithm which uses a sophisticated heuristic priority calculation to detect nonhomogenous or changed regions and to prefer them in adaptive refinement. Other regions are preliminary treated by interpolation or copied from the preceding image until the <b>priority</b> <b>schedule</b> opens them for more accurate calculation. Our algorithm is very efficient concerning [...] ...|$|E
40|$|The {{purpose of}} this paper is to {{investigate}} the issues related to task attribute assignment on an individual processor. The majority of papers on fixed priority scheduling make the assumption that tasks have their attributes (deadline, period, offset and priority) pre-assigned. This makes priority assignment trivial. However in practice, the system 's timing requirements are specified and it is expected that the task attributes are synthesised from these. This paper is to present work that has been developed to solve this problem. 1 Introduction A significant challenge is to derive task attributes for a fixed <b>priority</b> <b>schedule</b> that meet the system's timing requirements in a way that can be understood by a nonspecialist. An approach is proposed for task attribute assignment that caters for all the likely timing requirements of complex control systems imposed on the scheduler. The issue of task attribute assignment for fixed priority scheduled systems is a subject that has received co [...] ...|$|E
40|$|A network {{source code}} is an optimal source code for a network. To design network source codes, we require each node {{to have a}} single encoder, which jointly encodes all {{messages}} transmitted by that node, and a single decoder, which jointly decodes all messages arriving at that node. Given a distribution over the sources, {{the design of the}} network source code jointly optimizes all encoders and decoders to obtain the best performance with respect to a user-defined <b>priority</b> <b>schedule</b> over the rates and distortions of the system. In this paper we focus on fixed-rate codes and address the implementation of an existing design algorithm for optimal network vector quantizers. Implementing the design algorithm is not straightforward since each encoder must choose its reproduction based on the expected behavior of sources that are unknown to it. We describe a new implementation approach and demonstrate its performance on a three-node network. In addition, we extend the design algorithm to allow the decoder at each node to use side information (specifically, the messages that are to be encoded by the encoder at the same node) ...|$|E
40|$|Integrating {{soft and}} hard {{activities}} in a real-time environment {{has been an}} active area of research both under xed <b>priority</b> <b>scheduling</b> and dynamic <b>priority</b> <b>scheduling.</b> Most of the existing work, however, has been done {{under the assumption that}} soft real-time tasks and hard real-time tasks are independent. The paper presents an ecient method that allows soft realtime aperiodic tasks and hard real-time tasks to share resources...|$|R
40|$|In this paper, {{we address}} the problem of <b>priority</b> <b>scheduling</b> in a {{database}} management system. We start by investigating the architectural consequences of adding priority to a DBMS. Specific priority-based schemes are then proposed for managing DBMS resources, including a priority-based disk scheduling algorithm and two approaches to adding priority to the buffer manager of a DBMS. We study the performance of our proposals through simulation, both individually and in combination. Our simulation results indicate that the objectives of <b>priority</b> <b>scheduling</b> cannot be met by a single priority-based scheduler. They show that, regardless of whether the system bottleneck is the CPU or the disk, <b>priority</b> <b>scheduling</b> on the critical resource must be complemented by a priority-based buffer management policy...|$|R
40|$|Abstract Integrating {{soft and}} hard {{activities}} in a real-time environment {{has been an}} active area of research both under fixed <b>priority</b> <b>scheduling</b> and dynamic <b>priority</b> <b>scheduling.</b> Most of the existing work, however, has been done {{under the assumption that}} soft real-time tasks and hard real-time tasks are independent. The paper presents an efficient method that allows soft realtime aperiodic tasks and hard real-time tasks to share resources. 1...|$|R
40|$|In {{the recent}} {{development}} of avionics systems, Integrated Modular Avionics (IMA) is advocated for next generation architecture that needs integration of mixedcriticality real-time applications. These integrated applications meet their own timing constraints while sharing avionics computer resources. To guarantee timing constraints and dependability of each application, an IMA-based system {{is equipped with}} the schemes for spatial and temporal partitioning. We refer the model as SP-RTS (Strongly Partitioned Real-Time System), which deals with processor partitions and communication channels as its basic scheduling entities. This paper presents a partition and channelscheduling algorithm for the SP-RTS. The basic idea of the algorithm {{is to use a}} two-level hierarchical schedule that activates partitions (or channels) following a distance-constraints guaranteed cyclic schedule and then dispatches tasks (or messages) according to a fixed <b>priority</b> <b>schedule.</b> To enhance schedulability, we devised heuristic algorithms for deadline decomposition and channel combining. The simulation results show the schedulability analysis of the two-level scheduling algorithm and the beneficial characteristics of the proposed deadline decomposition and channel combining algorithms. 1...|$|E
40|$|UnrestrictedThe {{design of}} {{hardware}} and software for embedded systems is well understood. But the compatibility problems between the two parts increases {{the time and effort}} of exploring the system design space. This research lies at the interface between the {{hardware and software}} design to reduce incompatibilities. This research has contributions in hardware verification and automatically retargetable software.; This research is unique because the microarchitecture of the embedded system is an input to the methodology rather than a fixed structure. The semantics of the instruction set architecture are described as an ISA extension language added to the architectural description. The extensions are considered assertions, are verified in the microprocessor hardware and are constraints in the automatic retargeting of the software.; The architectural verification portion of this research considers both the structure and timing of data and control in the microprocessor datapath. A technique named structural correctness verifies the structure of the datapath has the required number and types of operand paths, execution units and control signals. Structural correctness is based on a path searching technique. Another technique named Hardware Token Graph (HTG) semantic model and simulation rules verifies the timing synchronization of data and control. The microprocessor states represent the location of data and control passing through the datapath at clock edges. The semantic model is analyzed using a simulation reachability analysis. The generated reachability tree is examined for the desired states which correspond to the correct operation of the microprocessor.; The software portion of this research describes an automatically retargetable optimizing assembler. A novel technique for software optimizations performs integrated instruction scheduling and register allocation under resource-conflict and data-dependency constraints. The software instruction scheduling is based on a <b>priority</b> <b>schedule</b> technique, and the register allocation is based on a linear scan allocation.; An implementation of this methodology has been developed named RAVE (Retargetable optimizing Assembler with architectural VErification). RAVE has been applied to instruction set trade-off analysis for edge detection and DNA sequencing applications to demonstrate its utility with promising results...|$|E
50|$|The idea of {{real-time}} scheduling is {{to confine}} processor utilization under schedulable utilization {{of a certain}} scheduling algorithm, which is scaled from 0 to 1. Higher schedulable utilization means higher utilization of resource and the better the algorithm. In preemptible <b>scheduling,</b> dynamic <b>priority</b> <b>scheduling</b> such as earliest deadline first (EDF) provides the optimal schedulable utilization of 1 in contrast to less than 0.69 with fixed <b>priority</b> <b>scheduling</b> such as rate-monotonic (RM).|$|R
40|$|Abstract—It {{is common}} {{nowadays}} to architect and design scaled-out systems with off-the-shelf computing components operated and managed by off-the-shelf open-source tools. While web services represent the critical set of services offered at scale, big data analytics {{is emerging as}} a preferred service to be colocated with cloud web services at a lower priority raising the need for off-the-shelf <b>priority</b> <b>scheduling.</b> In this paper {{we report on the}} perils of Linux <b>priority</b> <b>scheduling</b> tools when used to differentiate between such complex services. We demonstrate that simple <b>priority</b> <b>scheduling</b> utilities such as nice and ionice can result in dramatically erratic behavior. We provide a remedy by proposing an autonomic <b>priority</b> <b>scheduling</b> algorithm that adjusts its execution parameters based on on-line measurements of the current resource usage of critical applications. Detailed experimentation with a user-space prototype of the algorithm on a Linux system using popular benchmarks such as SPEC and TPC-W illustrate the robustness and versatility of the proposed technique, as it provides consistency to the expected performance of a high-priority application when running simultaneously with multiple low priority jobs. I...|$|R
40|$|ABSTRACT- In this paper, {{we address}} the problem of <b>priority</b> <b>scheduling</b> in a {{database}} management system. We start by inves-tigating the architectural consequences of adding priority to a DBMS. Specific priority-based schemes are then proposed for managing DBMS resources. including a priority-based diik scheduling algorithm and two approaches to adding priority to the buffer manager of a DBMS. We study the performance of our proposals through simulation, both individually and in com-bination. Our simulation results indicate that the objectives of <b>priority</b> <b>scheduling</b> cannot be met by a single priority-based scheduler. They show that, regardless of whether the system bottleneck is the CPU or the diik, <b>priority</b> <b>scheduling</b> on the criti-cal re. som must be complemented by a priority-based buffer management policy...|$|R
40|$|This text is {{a summary}} of the author’s PhD thesis {{supervised}} by Herwig Bruneel and Joris Walraevens, and defended on 5 March 2009 at Ghent University. The thesis is written in English and is available from the author upon request. The work deals with several <b>priority</b> <b>scheduling</b> disciplines with so-called priority jumps. An efficient <b>priority</b> <b>scheduling</b> discipline is of great importance in modern telecommunication devices. Static <b>priority</b> <b>scheduling</b> achieves maximum service differentiation between different types of traffic, but may have a too severe impact on the performance of lower-priority traffic. Introducing priority jumps aims for a more gradual service differentiation. In the thesis, we propose several (types of) jumping mechanisms, and we analyse their effect on the performance of a discrete-time queueing system...|$|R
5000|$|Event-driven - {{switches}} tasks {{only when}} {{an event of}} higher priority needs servicing; called preemptive <b>priority,</b> or <b>priority</b> <b>scheduling.</b>|$|R
5000|$|<b>Priority</b> <b>Scheduling.</b> One actor places time {{priority}} on its goal, achieving {{it before the}} other actor realizes its goal.|$|R
40|$|In {{this paper}} we present an {{approximate}} but efficient analytical method {{to compute the}} asymptotic loss of buffer <b>priority</b> <b>scheduling</b> policies in closed re-entrant lines. For simple two-station closed re-entrant lines, this enables the verification of Harrison-Wein conjectures and Jin-Ou-Kumar results. For multi-station re-entrant lines, this provides an efficient way of comparing different buffer <b>priority</b> <b>scheduling</b> policies. We also use the method to evaluate the effect of high priority jobs in re-entrant lines...|$|R
40|$|Procrastination {{scheduling}} {{has gained}} importance for energy efficiency {{due to the}} rapid increase in the leakage power consumption. Under procrastination scheduling, task executions are delayed to extend processor shutdown intervals, thereby reducing the idle energy consumption. We propose algorithms to compute the maximum procrastination intervals for tasks scheduled by either the fixed priority or the dual <b>priority</b> <b>scheduling</b> policy. We show that dual <b>priority</b> <b>scheduling</b> always guarantees longer shutdown intervals than fixed <b>priority</b> <b>scheduling.</b> We further combine procrastination scheduling with dynamic voltage scaling to minimize the total static and dynamic energy consumption of the system. Our simulation experiments show that the proposed algorithms can extend the sleep intervals up to 5 times while meeting the timing requirements. The results show up to 18 % energy gains over dynamic voltage scaling...|$|R
40|$|Abstract. Run-time {{executives}} and operating system kernels for embedded systems have long relied exclusively on static <b>priority</b> <b>scheduling</b> of tasks to ensure timing constraints and other correctness conditions are met. Static <b>priority</b> <b>scheduling</b> {{is easy to}} understand and support but it suffers from a number of significant shortcomings such as the complexity of simultaneously mapping timing and importance constraints onto priority values. Rate-based resource allocation schemes offer an attractive alternative to traditional static <b>priority</b> <b>scheduling</b> as they offer flexibility in specifying and managing timing and criticality constraints. This paper presents a taxonomy of rate-based resource allocation and summarizes the results of some recent experiments evaluating the real-time performance of three allocation schemes for a suite of intra-kernel and application-level scheduling problems encountered is supporting a multimedia workload on FreeBSD UNIX. 1...|$|R
40|$|Abstract — This paper {{introduces}} schedulability {{analysis for}} global fixed <b>priority</b> <b>scheduling</b> with deferred pre-emption (gFPDS) for homogeneous multiprocessor systems. gFPDS is a superset of global fixed <b>priority</b> pre-emptive <b>scheduling</b> (gFPPS) and global fixed <b>priority</b> non-pre-emptive <b>scheduling</b> (gFPNS). We show how schedulability {{can be improved}} via appropriate choice of priority assignment and final non-pre-emptive region lengths, and we provide algorithms which optimize schedulability in this way. An experimental evaluation shows that gFPDS significantly outperforms both gFPPS and gFPNS. I...|$|R
