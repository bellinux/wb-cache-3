646|10000|Public
5|$|There was no {{assembly}} language defined for the Mark 1. Programs {{had to be}} written and submitted in binary form, encoded as eight 5-bit characters for each 40-bit word; programmers were encouraged to memorize the modified ITA2 coding scheme to make their job easier. Data was read and written from the papertape punch under <b>program</b> <b>control.</b> The Mark 1 had no system of hardware interrupts; the program continued after a read or write operation had been initiated until another input/output instruction was encountered, {{at which point the}} machine waited for the first to complete.|$|E
25|$|Electronic {{switching}} systems gradually evolved in stages from electromechanical hybrids with stored <b>program</b> <b>control</b> to the fully digital systems. Early systems used reed relay-switched metallic paths under digital control. Equipment testing, phone numbers reassignments, circuit lockouts and similar tasks were accomplished by data entry on a terminal.|$|E
25|$|Bell System {{installations}} typically had alarm bells, gongs, or chimes {{to announce}} alarms {{calling attention to}} a failed switch element. A trouble reporting card system was connected to switch common control elements. These trouble reporting systems punctured cardboard cards with a code that logged {{the nature of a}} failure. Reed relay technology in stored <b>program</b> <b>control</b> exchange finally quieted the environment.|$|E
5000|$|... "Coupe Canada 1976 Canada Cup" [...] Official Match <b>Program,</b> <b>Controlled</b> Media Corp.,1976 ...|$|R
5000|$|Exposure: <b>Program</b> <b>controlled</b> mode, manual mode, {{aperture}} priority or shutter priority mode ...|$|R
40|$|Automated {{ultrasonic}} inspection system includes dry couplant pad attached to ultrasonic transducer. Designed to be mounted on robot arm in automated manufacturing (robotic welding) work cell. Between, during, or after manufacturing operations, robot scans ultrasonic transducer along workpiece. Workpiece reworked in place, if necessary. In principle, computer <b>program</b> <b>controlling</b> inspection overlaid on <b>program</b> <b>controlling</b> welding operations...|$|R
25|$|In 1940, the German {{government}} began funding {{him through the}} Aerodynamische Versuchsanstalt (AVA, Aerodynamic Research Institute, forerunner of the DLR), which used his work {{for the production of}} glide bombs. Zuse built the S1 and S2 computing machines, which were special purpose devices which computed aerodynamic corrections to the wings of radio-controlled flying bombs. The S2 featured an integrated analog-to-digital converter under <b>program</b> <b>control,</b> making it the first process-controlled computer.|$|E
25|$|Lavelle {{attended}} the Air War College in 1956–57 and then {{spent the next}} five years at Headquarters U.S. Air Force as deputy director of requirements; secretary of the Weapons Board; and deputy director of programs. While in the Pentagon, he was principally responsible for the reorganization of the Air Force Board system and the establishment of <b>program</b> <b>control</b> through the Program Review Committee and the Weapons Board. He was awarded an oak leaf cluster to his Legion of Merit {{at the end of this}} tour of duty.|$|E
500|$|In general, USB cables {{have only}} plugs on their ends, while hosts and devices have only receptacles. Hosts almost universally have Type-A receptacles, while devices {{have one or}} another Type-B variety. Type-A plugs mate only with Type-A receptacles, and {{the same applies to}} their Type-B counterparts; they are {{deliberately}} physically incompatible. However, an extension to the USB standard specification called USB On-The-Go (OTG) allows a single port to act as either a host or a device, which is selectable {{by the end of the}} cable that plugs into the receptacle on the OTG-enabled unit. Even after the cable is hooked up and the units are communicating, the two units may [...] "swap" [...] ends under <b>program</b> <b>control.</b> This capability is meant for units such as PDAs in which the USB link might connect to a PC's host port as a device in one instance, yet connect as a host itself to a keyboard and mouse device in another instance.|$|E
40|$|This paper explores a {{representational}} technique which, {{through direct}} code analysis, maps the <b>program's</b> <b>control</b> component into a canonical database, a reduced ordered binary decision diagram (ROBDD), which fully enables the compiler to utilize and manipulate predication. This abstraction is then applied {{to optimize the}} <b>program's</b> <b>control</b> component, transforming it into a form more amenable to instruction level parallel (ILP) executio...|$|R
50|$|FAA FTD Level 6 - Aircraft-model-specific {{aerodynamic}} <b>programming,</b> <b>control</b> feel, {{and physical}} cockpit are required.|$|R
40|$|This paper {{proposes a}} method to improve the {{robustness}} of a robot arm <b>control</b> <b>program.</b> The <b>control</b> <b>program</b> is generated in simulation by genetic programming. The robustness is measured in the real world. To improve the robustness, the <b>control</b> <b>program</b> is evolved with multiple robot arm configurations. The result shows that the robustness of a <b>control</b> <b>program</b> is improved by 10 % compared to a <b>control</b> <b>program</b> evolved with a single configuration...|$|R
2500|$|Zuse, Konrad. Direction-bound {{engraving}} tool with <b>program</b> <b>control.</b> U.S. Patent 3,163,936 ...|$|E
2500|$|Yielding {{the flow}} of <b>program</b> <b>control</b> to a block that was {{provided}} at calling time: ...|$|E
2500|$|AIDS II then spawns to the EXE {{file that}} was {{attempting}} to be executed in the first place, and the program runs without problem. After completion of the <b>program,</b> <b>control</b> returns to the virus. The loud note is played again with the following message displayed ...|$|E
5000|$|CMS runs as a [...] "guest" [...] {{operating}} {{system in a}} private virtual machine created by the VM <b>control</b> <b>program.</b> The <b>control</b> <b>program</b> plus CMS together create a multi-user time-sharing {{operating system}}.|$|R
50|$|The {{features}} of toll-free services have evolved as telephone networks {{have moved from}} electro-mechanical call switching to fully computerized stored <b>program</b> <b>controlled</b> networks.|$|R
25|$|From the {{processing}} point of view, hardware interrupts {{are similar to}} resumable exceptions, though they are typically unrelated to the user <b>program's</b> <b>control</b> flow.|$|R
2500|$|Early APL {{implementations}} (circa 1970 or so) did {{not have}} programming loop-flow control structures, such as [...] "do" [...] or [...] "while" [...] loops, and [...] "if-then-else" [...] constructions. Instead, they used array operations, and use of structured programming constructs was often not necessary, since an operation could be carried out on an entire array in a single statement. For example, the iota function (ι) can replace for-loop iteration: ιN when applied to a scalar positive integer yields a one-dimensional array (vector), 1 2 3 ... N. More recent implementations of APL generally include comprehensive control structures, so that data structure and <b>program</b> <b>control</b> flow can be clearly and cleanly separated.|$|E
2500|$|Amdahl Corporation's {{hardware}} {{implementation of}} System/370 compatible channels was quite different. A single internal unit, called the [...] "C-Unit", supported up to sixteen channels using {{the very same}} hardware for all supported channels. Two internal [...] "C-Units" [...] were possible, supporting up to 32 total channels. Each [...] "C-Unit" [...] independently performed a process generally called a [...] "shifting channel state processor" [...] (a type of [...] "barrel processor"), which implemented a specialized type of finite state machine (FSM). Each CPU cycle, every 32 nanoseconds in the 470/V6 and /V5 and every 26 nanoseconds in the 470/V7 and /V8, the [...] "C-unit" [...] read the complete status of next channel in priority sequence and its I/O Channel in-tags. The necessary actions defined by that channel's last state and its in-tags were performed: data was read from or written to main storage, the operating system program was interrupted if such interruption was specified by the channel program's <b>Program</b> <b>Control</b> Interrupt flag, and the [...] "C-Unit" [...] finally stored that channel's next state and set its I/O Channel out-tags, {{and then went on}} to the next lower priority channel. Preemption was possible, in some instances. Sufficient FIFO storage was provided within the [...] "C-Unit" [...] for all channels which were emulated by this FSM. Channels could be easily reconfigured to the customer's choice of IBM 2860 (selector) emulation, IBM 2870 (byte multiplexor) emulation or IBM 2880 (block multiplexor) emulation without any significant restrictions by using maintenance console commands. [...] "Two-byte interface" [...] was also supported as was [...] "Data-In/Data-Out" [...] and other high-performance IBM channel options. Built-in channel-to-channel adapters were also offered, called CCAs in Amdahl-speak, but called CTCs in IBM-speak. A real game-changer, and this forced IBM to redesign its mainframes to provide similar channel capability and flexibility. IBM's initial response was to include stripped-down Model 158s, operating in [...] "Channel Mode", only, as the Model 303x channel units. In the Amdahl [...] "C-unit" [...] any channel could be any type, 2860, 2870 or 2880, without reserving channels 0 and 4 for 2870s, as on some IBM models.|$|E
2500|$|The default IEEE 754 {{exception}} handling behaviour of resumption following pre-substitution of a default value avoids the risks inherent in changing flow of <b>program</b> <b>control</b> on numerical exceptions. For example, in 1996 the maiden {{flight of the}} Ariane 5 (Flight 501) ended in a catastrophic explosion {{due in part to}} the Ada programming language {{exception handling}} policy of aborting computation on arithmetic error, which in this case was a 64-bit floating point to 16-bit integer conversion overflow. In the Ariane Flight 501 case, the programmers protected only four out of seven critical variables against overflow due to concerns about the computational constraints of the on-board computer and relied on what turned out to be incorrect assumptions about the possible range of values for the three unprotected variables because they reused code from the Ariane 4, for which their assumptions were correct. According to William Kahan, the loss of Flight 501 would have been avoided if the IEEE 754 exception-handling policy of default substitution had been used because the overflowing 64-bit to 16-bit conversion that caused the software to abort occurred in a piece of code that turned out to be completely unnecessary on the Ariane 5. The official report on the crash (conducted by an inquiry board headed by Jacques-Louis Lions) noted that [...] "An underlying theme in the development of Ariane 5 is the bias towards the mitigation of random failure. The supplier of the inertial navigation system (SRI) was only following the specification given to it, which stipulated that in the event of any detected exception the processor was to be stopped. The exception which occurred was not due to random failure but a design error. The exception was detected, but inappropriately handled because the view had been taken that software should be considered correct until it is shown to be at fault. [...] Although the failure was due to a systematic software design error, mechanisms can be introduced to mitigate this type of problem. For example the computers within the SRIs could have continued to provide their best estimates of the required attitude information. There is reason for concern that a software exception should be allowed, or even required, to cause a processor to halt while handling mission-critical equipment. Indeed, the loss of a proper software function is hazardous because the same software runs in both SRI units. In the case of Ariane 501, this resulted in the switch-off of two still healthy critical units of equipment." ...|$|E
5000|$|A {{statement}} might assign {{an expression}} to a variable {{or use the}} value of a variable to alter the <b>program's</b> <b>control</b> flow - for example: ...|$|R
50|$|Today, Four Star International is {{now owned}} by Rupert Murdoch's 21st Century Fox, with most of its library of <b>programs</b> <b>controlled</b> by 20th Century Fox Television.|$|R
40|$|We study {{a method}} for synthesizing <b>control</b> <b>programs.</b> The method merges an {{existing}} <b>control</b> <b>program</b> with a <b>control</b> automaton. We have used monadic second order logic over strings to specify the control automata. Specifications are translated into automata by the Mona tool. This yields a new <b>control</b> <b>program</b> restricting {{the behavior of the}} old <b>control</b> <b>program</b> such that the specifications are satisfied. The method is presented through a concrete example...|$|R
5000|$|OUTPUT -Medium- -Speed- Printer Character 78.5-2,433 ms (<b>Program</b> <b>Control)</b> Phase - Voltage (<b>Program</b> <b>Control)</b> ...|$|E
50|$|As {{the picture}} illustrates, the {{asynchronous}} mode allows the non-Java program {{to get control}} and do other processing. That implies checking for a response at some future point. BBOA1RCL is used for that purpose. In this example BBOA1RCL is issued synchronously (parameter async=0). If a response is available BBOA1RCL will provide the length and <b>program</b> <b>control</b> returns to the program. If no response is available BBOA1RCL holds <b>program</b> <b>control</b> until one is available. BBOA1RCL with async=1 will return x'FFFFFFFF' if no response is available; <b>program</b> <b>control</b> is returned immediately.|$|E
5000|$|Forms {{skipping}} under <b>program</b> <b>control</b> through automatic, paper-tape-controlled carriage.|$|E
5000|$|In {{the days}} leading up to the event, MTV2 insisted that Love would have full <b>programming</b> <b>control.</b> The {{official}} Viacom press release to the Associated Press read as follows: ...|$|R
40|$|This paper {{presents}} a generic programming paradigm, called the control plan paradigm, based on Nested Finite State Machines (NFSMs) and event-driven mechanisms. In this paradigm, a <b>control</b> <b>program</b> {{can be divided}} into two non-overlapping parts: behavior and operation specifications. This division allows machine-dependent and machineindependent <b>control</b> <b>programs</b> to be designed and implemented independently of each other, and integrated when an application program is constructed. Our evaluation on an open-architecture machine controller testbed shows that such programming paradigm improves significantly the reconfigurability and reusability of <b>control</b> <b>programs.</b> KEYWORDS: Open-architecture <b>control,</b> <b>programming</b> paradigm, software integration. INTRODUCTION An open-architecture controller (OAC) requires <b>control</b> <b>programs</b> to be reusable and reconfigurable [3, 6]. However, <b>control</b> <b>programs</b> developed using current <b>control</b> <b>programming</b> paradigm are difficult to meet this requirement due to their hard-coded machine-dependent information that cannot be applied to different configurations. As a result, significant time and costs are required to design, implement and test <b>control</b> <b>programs.</b> In this paper, we propose a generic programming paradigm, called the control plan paradigm, which is based on Nested Finite State Machines (NFSMs) and event-driven mechanisms. This programming paradigm distinguishes machine-dependent specifications and machine-independent specifications in <b>control</b> <b>programs,</b> and localizes the machinedependent behaviors and operations. Such machine-dependent programs can be reused when a new application requires the same configuration, while the machine-independent programs can be reused when an application requires the same high-level behaviors. Localization of machine-dependent programs further enables integration of vendor-neutral products. A <b>control</b> <b>program</b> in the <b>control</b> plan paradigm can also be constructed bottomup by integrating the <b>control</b> <b>programs</b> of different subsystems. The NFSM model, as an extended formal method, facilitates the verification of <b>control</b> <b>programs...</b>|$|R
50|$|As {{with the}} NMOS 6522, the W65C22 {{includes}} functions for <b>programmed</b> <b>control</b> of two peripheral ports (ports A and B). Two <b>program</b> - <b>controlled</b> 8-bit bi-directional peripheral I/O ports allow direct interfacing between the microprocessor and selected peripheral units. Each port has input data latching capability. Two programmable data direction registers (A and B) allow selection of data direction (input or output) {{on an individual}} I/O line basis.|$|R
5000|$|Zuse, Konrad. Direction-bound {{engraving}} tool with <b>program</b> <b>control.</b> U.S. Patent 3,163,936 ...|$|E
5000|$|Polling {{is where}} the CPU {{examines}} {{the status of the}} peripheral under <b>program</b> <b>control.</b>|$|E
5000|$|Yielding {{the flow}} of <b>program</b> <b>control</b> to a block that was {{provided}} at calling time: ...|$|E
2500|$|A {{statement}} might assign {{an expression}} to a variable {{or use the}} value of a variable to alter the <b>program's</b> <b>control</b> flow – for example: x := 2 + 2; if x = 4 then do_something (...) ...|$|R
50|$|The ACIA is {{designed}} for maximum <b>programmed</b> <b>control</b> from the microprocessor (MPU) to simplify hardware implementation. Three separate registers permit an MPU to easily select the W65C51N operating modes, data checking parameters and determine operational status.|$|R
5000|$|Computer files: {{computer}} <b>program</b> <b>controls</b> {{location of}} each component on the PWB (X, Y and angular theta), feeder inventory levels, placement machine vacuum holder capability, automatic component realignment, placement accuracy, vision systems, and transportation of PCBs through the lime.|$|R
