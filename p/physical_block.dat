48|307|Public
5|$|Over {{elevated}} surfaces, heating of {{the ground}} exceeds the heating of the surrounding air at the same altitude above sea level, creating an associated thermal low over the terrain and enhancing any thermal lows that would have otherwise existed, and changing the wind circulation of the region. In areas where there is rugged topography that significantly interrupts the environmental wind flow, the wind circulation between mountains and valleys {{is the most important}} contributor to the prevailing winds. Hills and valleys substantially distort the airflow by increasing friction between the atmosphere and landmass by acting as a <b>physical</b> <b>block</b> to the flow, deflecting the wind parallel to the range just upstream of the topography, which is known as a barrier jet. This barrier jet can increase the low level wind by 45%. Wind direction also changes because of the contour of the land.|$|E
25|$|NAND devices {{also require}} bad block {{management}} by the device driver software, or by a separate controller chip. SDcards, for example, include controller circuitry to perform bad block management and wear leveling. When a logical block is accessed by high-level software, it is mapped to a <b>physical</b> <b>block</b> by the device driver or controller. A number of blocks on the flash chip may {{be set aside}} for storing mapping tables to deal with bad blocks, or the system may simply check each block at power-up to create a bad block map in RAM. The overall memory capacity gradually shrinks as more blocks are marked as bad.|$|E
5000|$|Changing the <b>physical</b> <b>block</b> size or {{logical record}} length of a {{sequential}} data set.|$|E
50|$|QSAM is—as {{its name}} says—queued, in this {{specific}} context meaning buffered with deblocking of reads and blocking of writes. It allows programs {{to read and}} write logical records within <b>physical</b> <b>blocks</b> of data, as opposed to the less advanced basic sequential access method (BSAM) which allows programs to access <b>physical</b> <b>blocks</b> of data, but provides no support for accessing logical records within blocks.|$|R
5000|$|Manned checkpoints usually {{consist of}} a barrier with {{observation}} towers and other <b>physical</b> <b>blocks</b> used to control pedestrian and vehicular access.|$|R
25|$|Other {{operating}} systems allow a file to grow. The resulting disk blocks {{may not be}} contiguous, so mapping logical <b>blocks</b> to <b>physical</b> <b>blocks</b> is more involved.|$|R
50|$|Cylinder-head-sector (CHS) is {{an early}} method for giving {{addresses}} to each <b>physical</b> <b>block</b> of data on a hard disk drive.|$|E
5000|$|CONTIG {{indicates}} that the file is stored contiguously on disk; that is, each virtual block [...] is mapped to the logical (<b>physical)</b> <b>block</b> , for some constant [...]|$|E
50|$|Write Ahead <b>Physical</b> <b>Block</b> Logging (WAPBL) {{provides}} {{meta data}} journaling for file systems {{in conjunction with}} Fast File System (FFS) to accomplish rapid filesystem consistency after an unclean shutdown of the filesystem and better general use performance over regular FFS.|$|E
50|$|BSAM allows {{programs}} {{to read and}} write <b>physical</b> <b>blocks</b> of data, as opposed to the more powerful but less flexible Queued Sequential Access Method (QSAM) which allows {{programs to}} access logical records within <b>physical</b> <b>blocks</b> of data.The BSAM user must be aware of the possibility of encountering short (truncated) blocks (blocks within a dataset which are shorter than the BLKSIZE of the dataset), particularly {{at the end of a}} dataset, but also in many cases within a dataset. QSAM has none of these limitations.|$|R
30|$|<b>Physical</b> Resource <b>Block.</b>|$|R
50|$|IDMS organizes its {{databases}} as {{a series}} of files. These files are mapped and pre-formatted into so-called areas. The areas are subdivided into pages which correspond to <b>physical</b> <b>blocks</b> on the disk. The database records are stored within these blocks.|$|R
50|$|The device mapper is a {{framework}} {{provided by the}} Linux kernel for mapping <b>physical</b> <b>block</b> devices onto higher-level virtual block devices. It forms the foundation of LVM2, software RAIDs and dm-crypt disk encryption, and offers additional features such as file system snapshots.|$|E
50|$|Physical {{memory was}} divided into {{sections}} reserved for each size so a 1055 byte block always came from a section and returned there, the only overhead needed was to add its address to the appropriate <b>physical</b> <b>block</b> table's list. No compaction or data collection was required.|$|E
5000|$|If the dataset is unblocked, that is, {{the logical}} record length (LRECL) {{is equal to the}} <b>physical</b> <b>block</b> size (BLKSIZE), BSAM may be {{utilized}} to simulate a directly accessed dataset using [...] and [...] on any supported direct access device type (DEVD=DA), and some primitive applications were designed in this way.|$|E
50|$|The third {{layer is}} the {{physical}} file system. This layer {{is concerned with}} the physical operation of the storage device (e.g.disk). It processes <b>physical</b> <b>blocks</b> being read or written. It handles buffering and memory management and is responsible for the <b>physical</b> placement of <b>blocks</b> in specific locations on the storage medium. The physical file system interacts with the device drivers or with the channel to drive the storage device.|$|R
5000|$|Basic, in IBM terminology, {{indicates}} a lower-level access method {{that deals with}} data sets in terms of <b>physical</b> <b>blocks</b> and does not provide either read-ahead, called anticipatory buffering, or synchronization [...] - [...] that is, the user program has to explicitly wait for completion of each input/output event.|$|R
50|$|In 2009, {{the school}} had the <b>physical</b> {{education}} <b>block</b> and dining hall refurbished.|$|R
5000|$|Still later, {{magnetic}} hard disks employed {{an evolution}} of LBA where {{the size of}} the addressable disk sectors can differ from the <b>physical</b> <b>block</b> size. For example, Advanced Format (AF) 512e HDDs use 4096-byte physical sectors, while their firmware provides emulation for a virtual sector size of 512 bytes; thus, [...] "512e" [...] stands for [...] "512-byte emulation".|$|E
50|$|In the 1970s, IBM {{introduced}} {{fixed block}} architecture (FBA) for mainframes. At the programming level, these devices {{do not use}} the traditional CHR addressing, but reference fixed-length blocks by number, much like sectors in mini-computers. More correctly, the application programmer remains unaware of the underlying storage arrangement, which stores the data in fixed <b>physical</b> <b>block</b> lengths of 512, 1024, 2048, or 4096.|$|E
50|$|It is a gate level {{model of}} a <b>physical</b> <b>block</b> where only the {{connections}} from the inputs to {{the first stage of}} flip-flops, and the connections from the last stage of flip-flops to the outputs are in the model, including the flip-flops and the clock tree driving these flip-flops. All other internal flip-flop to flip-flop paths are stripped out of the ILM.|$|E
30|$|Topobo {{establishes}} embodiment {{by providing}} <b>physical</b> <b>blocks</b> that are assembled {{into a larger}} object. This object itself can be grasped and manipulated. The intervention asks users to create an animated object and plays back that animation in the physical object. Building the object engages skills related to assembly. Animating the object engages skills related to force and motion or mechanical reasoning.|$|R
50|$|Prolonged skin {{contact with}} {{antimony}} dust may cause dermatitis. However, {{it was agreed}} at the European Union level that the skin rashes observed are not substance-specific, but most probably due to a <b>physical</b> <b>blocking</b> of sweat ducts (ECHA/PR/09/09, Helsinki, 6 July 2009). Antimony dust may also be explosive when dispersed in the air; when in a bulk solid it is not combustible.|$|R
5000|$|The map {{describes}} which <b>physical</b> disk <b>blocks</b> (extents) map to each virtual {{block of}} the file.|$|R
50|$|An {{example is}} the BLKSIZE= variable, which may be (and usually is) {{specified}} in the DCB as zero. In the DD statement, the BLKSIZE is specified as a non-zero value and this, then, results in a program-specified LRECL (logical record length) and a JCL-specified BLKSIZE (<b>physical</b> <b>block</b> size), with the merge of the two becoming the permanent definition of the dataset.|$|E
50|$|Write-once media such as DVD-R and CD-R have {{limitations}} when {{being written}} to, in that each <b>physical</b> <b>block</b> {{can only be}} written to once, and the writing must happen incrementally. Thus the plain build of UDF can only be written to CD-Rs by pre-mastering the data and then writing all data in one piece to the media, {{similar to the way}} an ISO 9660 file system gets written to CD media.|$|E
5000|$|The kernel {{identifies}} disk {{blocks to}} the application program by their <b>physical</b> <b>block</b> address, allowing the application to optimize data placement. When the program initializes its use of the disk, it provides the kernel with a function that the kernel can use to determine which blocks the program controls. The kernel uses this callback to verify that when it allocates a new block, the program claims only the block that was allocated {{in addition to those}} it already controlled.|$|E
40|$|Log-block-based FTL (Flash Translation Layer) schemes {{have been}} widely used to manage NAND flash memory storage systems in industry. In log-block-based FTLs, a few <b>physical</b> <b>blocks</b> called log blocks are used to hold all page updates from a large amount of data blocks. Frequent page updates in log blocks {{introduce}} big overhead so log blocks become the system bottleneck. Department of ComputingRefereed conference pape...|$|R
40|$|International audienceIn this paper, we {{introduce}} a new Adaptive <b>Physical</b> Resource <b>Block</b> Design for Enhancing Voice Capacity over Long- Term Evolution (LTE) Downlink in Professional Mobile Radio (PMR) Context. In this method, we reorganize {{the structure of the}} <b>Physical</b> Resource <b>Block</b> (PRB) to optimize the voice capacity of LTE downlink in the PMR Context. Available PRBs in each subframe is reorganized into a number Sub <b>Physical</b> Resource <b>Blocks.</b> The number of control symbols can be selected flexibility. The proposed method allows reducing both data overhead and control overhead issues for Voice over LTE downlink in PMR context. On average, the voice capacity gain were shown to have about 117. 2 % in comparison with the standard LT...|$|R
3000|$|The {{percentage}} of utilized <b>physical</b> resource <b>blocks</b> (PRBs) {{relative to the}} total number of PRBs, μ(c,t) [...]...|$|R
50|$|Introduced in {{the first}} version of the standard, this format can be used on any type of disk that allows random read/write access, such as hard disks, DVD+RW and DVD-RAM media. Similarly to other common file system formats, such as FAT, {{directory}} entries point directly to the block or sector numbers of their file contents. In writing to such a disk in this format, any <b>physical</b> <b>block</b> on the disk may be chosen for allocation of new or updated files.|$|E
50|$|NAND devices {{also require}} bad block {{management}} by the device driver software, or by a separate controller chip. SD cards, for example, include controller circuitry to perform bad block management and wear leveling. When a logical block is accessed by high-level software, it is mapped to a <b>physical</b> <b>block</b> by the device driver or controller. A number of blocks on the flash chip may {{be set aside}} for storing mapping tables to deal with bad blocks, or the system may simply check each block at power-up to create a bad block map in RAM. The overall memory capacity gradually shrinks as more blocks are marked as bad.|$|E
50|$|Most file {{systems are}} based on a block device, which is a level of {{abstraction}} for the hardware responsible for storing and retrieving specified blocks of data, though the block size in file systems may be a multiple of the <b>physical</b> <b>block</b> size. This leads to space inefficiency due to internal fragmentation, since file lengths are often not integer multiples of block size, and thus the last block of a file may remain partially empty. This will create slack space. Some newer file systems, such as Btrfs and FreeBSD UFS2, attempt to solve this through techniques called block suballocation and tail merging. Other file systems such as ZFS support variable block sizes.|$|E
40|$|Abstract: This paper {{reports on}} the {{evaluation}} of a novel affordable system that incorporates intelligent <b>physical</b> <b>blocks</b> to introduce illiterate children in developing countries to the logical thinking process required in computer programming. Both the usability and educational aspects are reported on. We provide a brief overview on previous work in this field. Results obtained from field studies are given. We conclude with recommendations for improvements and further research...|$|R
5000|$|A {{business}} {{may choose}} to rationalize the physical media {{to take advantage of}} more efficient storage technologies. This will result in having to move <b>physical</b> <b>blocks</b> of data from one tape or disk to another, often using virtualization techniques. The data format and content itself will not usually be changed in the process and can normally be achieved with minimal or no impact to the layers above.Hence called Storage migration ...|$|R
50|$|Two {{forms of}} Ocarina's {{post-processing}} workflow were available; ECOmax and Native Format Optimization or NFO. ECOmax utilized all available compression methods to shrink data, including on-disk structures that maximized utilization of <b>physical</b> <b>blocks.</b> The ECOmax workflow required {{the use of}} the ECOreader, which is run-anywhere software that efficiently decodes data for transparent read-back. ECOmax could be applied to any file or data types including specialized files used by various vertical industries.|$|R
