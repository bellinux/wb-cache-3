234|306|Public
50|$|Barefoot Networks is a {{computer}} networking company headquartered in Palo Alto, California. The company designs and produces <b>programmable</b> <b>network</b> switch silicon, systems and software.|$|E
50|$|Xelerated Inc., {{founded in}} 2000, was a fabless {{semiconductor}} company specializing in ASSP-based Carrier Ethernet chipsets. Xelerated carried {{a line of}} <b>programmable</b> <b>Network</b> Processing Units (NPUs) and Ethernet network switches for the Metro Ethernet, access network and high-end enterprise markets.|$|E
5000|$|In December 2013, {{the company}} {{launched}} the Pica8 SDN Starter Kit, an [...] "out-of-the-box" [...] kit that includes an open-source network controller, a <b>programmable</b> <b>network</b> tap, an open-source network intrusion detection system, and other components meant to give customers a complete SDN solution, {{which would be}} quick to implement.|$|E
40|$|NeCoMan {{middleware}} customizes dynamic {{adaptation of}} point-to-point-based <b>network</b> services in <b>programmable</b> <b>networks,</b> {{taking into account}} the properties of the network services involved as well as the reconfiguration semantics. <b>Programmable</b> <b>networks</b> let third parties dynamically reprogram the network elements. By opening the execution environment of routers, firewalls, base stations, and so on, users and service providers can adapt the behavior of these network elements to meet their own needs. <b>Programmable</b> <b>networks</b> are therefore an interesting technology for building adaptive networks as well as for supporting the evolution of networking software. 1 This article focuses on safe runtime adaptation of point-to-point-based <b>network</b> services in <b>programmable</b> <b>networks.</b> Many network services such as compression, fragmentation, reliability, and encryption conform to a point-to-point-based distributed-service model. This model represents a pair of tightly coupled components (not necessarily situated on neighboring nodes) that must cooperate to offer a distributed service. To prevent the runtime addition, replacement, or removal of these network services from jeopardizing a <b>programmable</b> <b>network's</b> correct functioning, the network programmer must coordinate the adaptation of the protocol stacks accommodating the service components. Fo...|$|R
40|$|Abstract—The idea of <b>programmable</b> <b>networks</b> has {{recently}} re-gained considerable momentum {{due to the}} emergence of the Software-Defined Networking (SDN) paradigm. SDN, often referred to as a “radical new idea in networking”, promises to dramatically simplify network management and enable in-novation through network programmability. This paper surveys the state-of-the-art in <b>programmable</b> <b>networks</b> with an emphasis on SDN. We provide a historic perspective of <b>programmable</b> <b>networks</b> from early ideas to recent developments. Then we present the SDN architecture and the OpenFlow standard in particular, discuss current alternatives for implementation and testing of SDN-based protocols and services, examine current and future SDN applications, and explore promising research directions based on the SDN paradigm. Index Terms—Software-Defined Networking, <b>programmable</b> <b>networks,</b> survey, data plane, control plane, virtualization...|$|R
30|$|The main {{contribution}} {{of this paper}} is that we provide a unified overview of the emerging field of <b>programmable</b> wireless <b>networks.</b> We demonstrate that the seemingly disparate fields of active networking, software-defined radios, cognitive radios, software-defined networking, and wireless virtualization, are in fact kindred disciplines. We develop this idea and propose new directions of future <b>programmable</b> wireless <b>networks.</b> Our paper is different from other survey papers[11, 18, 19] in its focus on wireless <b>programmable</b> <b>networks</b> while the previous papers had focused mainly on generic (wired) <b>programmable</b> <b>networks.</b>|$|R
50|$|In February 2006, {{the company}} {{agreed to buy}} the IP and {{business}} assets from Xyratex, a move which helped raise the profile of Napatech vis-à-vis <b>programmable</b> <b>network</b> accelerators. Napatech successfully integrated the Ethernet adapter business from Xyratex, subsequently generating US$4 million in revenue, while an additional US$5 million in new capital was raised from Northzone and Ferd Venture.|$|E
50|$|The {{level of}} {{heterogeneity}} in modern computing systems is gradually increasing as further scaling of fabrication technologies allows for formerly discrete components to become integrated {{parts of a}} system-on-chip, or SoC. For example, many new processors now include built-in logic for interfacing with other devices (SATA, PCI, Ethernet, USB, RFID, radios, UARTs, and memory controllers), as well as programmable functional units and hardware accelerators (GPUs, cryptography co-processors, <b>programmable</b> <b>network</b> processors, A/V encoders/decoders, etc.).|$|E
50|$|In {{addition}} to regular phoning, {{or the use}} of the interfaces listed above, SHINCOM includes two types of party lines. A PNET, or <b>Programmable</b> <b>Network,</b> is a predefined list of terminals which can join a network by pressing a single button. These are used for calls which are always made from a specific location, and include the docking network (between the bridge and all docking stations) and weapons networks (between the bridge, the operations room, and weapon positions).|$|E
40|$|We propose an {{integrated}} approach to resource management for end-to-end pervasive services, spanning over foundational models, abstract machines, runtime environments and programming languages. Our programme builds upon the extensive body of foundational work on ubiquitous (or global) computing and on existing research on <b>programmable</b> <b>networks,</b> complementing current {{activities in the}} EPSRC <b>Programmable</b> <b>Networks</b> initiative...|$|R
40|$|The idea of <b>programmable</b> <b>networks</b> has {{recently}} regained considerable momentum {{due to the}} emergence of the Software-Defined Networking (SDN) paradigm. SDN, often referred to as a “radical new idea in networking”, promises to dramatically simplify network management and enable in-novation through network programmability. This paper surveys the state-of-the-art in <b>programmable</b> <b>networks</b> with an emphasis on SDN. We provide a historic perspective of <b>programmable</b> <b>networks</b> from early ideas to recent developments. Then we present the SDN architecture and the OpenFlow standard in particular, discuss current alternatives for implementation and testing of SDN-based protocols and services, examine current and future SDN applications, and explore promising research directions based on the SDN paradigm...|$|R
40|$|Openness in {{telecommunication}} networks {{is a major}} challenge the telecom industry is experiencing. Layered architectures, the introduction of Intelligent Networks both in fixed and mobile networks, standardisation of protocols for interfaces, <b>programmable</b> <b>networks,</b> open network APIs are some approaches in this direction...|$|R
5000|$|In {{computer}} networking, the Application Session Controller (ASC) {{network element}} resides at the application layer and sits between the application layer and {{the core network}} to provide and manage connectivity to the evolving telecom network. The ASC incorporates a number of open standard APIs, plus the signaling, media between disparate networks that converged. [...] It insulates the application server farm from the network below via a <b>programmable</b> <b>network</b> abstraction engine, thereby providing the application specific call-control functions independent of each network.|$|E
5000|$|The Portals concept {{continued}} to evolve over successive generations of lightweight kernels and massively parallel systems. In 1999, an operational programming interface {{was given to}} Portals {{so that it could}} be implemented for intelligent or <b>programmable</b> <b>network</b> interfaces outside of a lightweight kernel environment. [...] This standard was designed for systems where the work required to prepare, transmit, and deliver messages is longer than the round-trip to the Portals data structures. For example, in modern systems, this work is dominated by the round-trip through the IO bus to the network interface. The standard has been revised since the initial release to make it more suited for modern high performance, massively parallel computers.The MPI library was ported from the retronymed Portals 2 to the new Portals 3.0.|$|E
50|$|Flowmon probe {{is built}} upon {{a pair of}} <b>programmable</b> <b>network</b> cards, called COMBO, and a host {{computer}} with Linux operating system. The pair of COMBO cards consists of a main card with PCI, PCI-X or PCI-Express connector for a connection to a motherboard of the host computer and of an add-on card with 2 or 4 network interfaces. Both cards contain programmable chips (FPGAs) which are able to process high amount of data at multi-gigabit speed. The flow monitoring process itself is split between the hardware (acceleration cards) and the application software running on the host computer. Following the principle of hardware/software codesign, all time-critical tasks are implemented in FPGA chips on acceleration cards while more complex operations are {{carried out by the}} application software. This concept enables monitoring of modern high-speed (1 Gbps, 10 Gbps) networks with no packet loss and with no necessity of input sampling. At the same time, a flexible and user-friendly interface is provided by software.|$|E
50|$|Mr Crosby {{chairs the}} Switch Control Working Group of the Multi-Service Switching Forum {{where he is}} active in {{promoting}} new standards for open, <b>programmable</b> <b>networks.</b>|$|R
30|$|The {{organization}} of the remaining paper is as follows. In the next section, we describe the basic device-level building blocks for building future <b>programmable</b> wireless <b>networks.</b> Thereafter, we discuss the various architectural approaches of building generic <b>programmable</b> <b>networks</b> in Section 3. We will thereafter discussing four dominant categories of <b>programmable</b> wireless <b>networks,</b> i.e., SWNs, CWNs, VWNs, and CbWNs, and highlight works belonging to each category in Sections 4.1, 4.2, 4.3, and 4.4, respectively. In Section 5, we discuss various open research issues and future directions of research. We conclude the paper in Section 6.|$|R
30|$|Programmable {{devices are}} envisioned to {{be a key}} {{component}} of future <b>programmable</b> <b>networks.</b> In this section, we discuss various techniques and architectures that have been proposed to realize the benefits associated with <b>programmable</b> wireless <b>networks.</b> In particular, we elaborate upon the trends of software-defined radio, cognitive radio, MAC programmable wireless devices, programmable wireless testbeds, and programmable radios in this particular order.|$|R
40|$|Abstract: In this paper, {{we present}} a hot {{research}} area in network, active and <b>programmable</b> <b>network.</b> Programmability added to traditional network makes network more complex, flexible and cost-efficient. An array of projects is reviewed, in order to interpret this novel networking model and its state-of-the-art. We first introduce the basics of <b>programmable</b> <b>network.</b> Also, different architectures and specific methods for <b>programmable</b> <b>network</b> are examined. At last, we conclude this paper by providing recent development and identifying the challenges in programmable networking...|$|E
40|$|The {{desire for}} {{flexible}} networking services {{has given rise}} to the concept of "active networks. " Active networks provide a general framework for designing and implementing network-embedded services, typically by means of a <b>programmable</b> <b>network</b> infrastructure. A <b>programmable</b> <b>network</b> infrastructure creates significant new challenges for securing the network infrastructure. This pape...|$|E
40|$|Programmable {{networking}} is {{an increasingly}} popular {{area of research}} in both industry and academia. Although most <b>programmable</b> <b>network</b> research projects seem {{to focus on the}} router architecture rather than on issues relating to the management of programmable networks, there are numerous research groups (discussed in [55]) that have incorporated management middleware into the <b>programmable</b> <b>network</b> router software. However, none seem to be concerned with the effective management of a large heterogeneous <b>programmable</b> <b>network.</b> The requirements of such a middleware are outlined in this paper. There are a number of fundamental middleware principals that are addressed in this paper: these include management paradigms, configuration delivery, scalability and transactions. Security, fault tolerance and usability are also discussed; although these are not essential parts of the middleware, they must be addressed if the <b>programmable</b> <b>network</b> management middleware is to be accepted by industry and adopted by other research projects...|$|E
40|$|Service and {{application}} requirements on network resilience have {{increased over the}} past few years. New online services such as e-commerce and connection-oriented interactive real-time services require higher network resilience than more traditional off-line services. <b>Programmable</b> virtual <b>networks</b> promise fast and easy provisioning of new services but no consideration to meet the diverse resilience requirements has been made. This paper discusses issues related to resilience-differentiation in <b>programmable</b> virtual <b>networks.</b> A set of general guidelines is presented that apply to resiliencedifferentiation in <b>programmable</b> virtual <b>network</b> architectures. A case study is used to illustrate how the proposed guidelines can be met by extending an existing <b>programmable</b> virtual <b>network</b> architecture...|$|R
50|$|Ratnasamy was a lead {{researcher}} at Intel Labs until 2011, {{when she began}} as {{an assistant professor at}} UC Berkeley. In recent years, Ratnasamy has focused her research on <b>programmable</b> <b>networks</b> including the RouteBricks software router and pioneering work in Network Functions Virtualization.|$|R
30|$|Over the years, {{different}} methods for instantiating virtual networks have been used. Typical approaches include VLANs (Virtual Local Area Networks) and VPNs (Virtual Private Networks). Recently, Virtual Machine Monitors and <b>programmable</b> <b>networks</b> have been employed to create virtual routers and links over physical devices and communication channels. These approaches are briefly revisited next.|$|R
40|$|Networking servers, such as web servers, {{have been}} widely {{deployed}} in recent years. While developments in the operating system and applications continue to improve server performance, <b>programmable</b> <b>network</b> interfaces with local memory provide new opportunities to improve server performance through extended network services on the network interface. However, due to their embedded nature, programmable processors on the network interface may suffer from inadequate processing power when compared to non-programmable application-specific network interfaces. This thesis first shows that exploiting a multiprocessor architecture and task-level concurrency in network interface processing enables <b>programmable</b> <b>network</b> interfaces to overcome the performance disadvantages over application-specific network interfaces that result from programmability. Then, the thesis presents a network service on a <b>programmable</b> <b>network</b> interface that exploits the storage capacity of the interfaces to alleviate the local I/O interconnect bottleneck, thereby improving server performance. Thus, these two results show that <b>programmable</b> <b>network</b> interfaces can offset the performance disadvantages due to programmability and improve networking server performance through extended network services that exploit their computation power and storage capacity...|$|E
40|$|The {{ability to}} quickly create and provide new and {{customized}} services {{in response to}} market demands will be the key factor in determining {{the success of the}} future service providers. In an effort to separate the tight coupling between network operation and services provision commonly found in the traditional networks, <b>programmable</b> <b>network</b> community pursues an approach of opening up the network to allow the deployment of third party control architectures, customized services creation and management. This project will offer a review on the <b>programmable</b> <b>network</b> research activities. Most active <b>programmable</b> <b>network</b> projects will be compared in term of their architectural model and level of programmability. The key characteristics enabling network programmability will be summarized in order to suggest a general infrastructure for programmable networks. In addition, alternative methodologies and architectures are also discussed before the project concludes with thoughts on future research and directions in programmable networks...|$|E
40|$|Abstract This article {{introduces}} the Interactive Network concept and describes {{the design and}} implementation of the first prototype. In an Interactive Network humans {{become an integral part of}} the control system to manage programmable networks and grid networks. The implementation consists of a multi-touch table that allows multiple persons to manage and monitor a <b>programmable</b> <b>network</b> si-multaneously. The amount of interactive control of the multi-touch interface is illustrated by the ability to create and manipulate paths, which are either end-to-end, multicast or paths that contain loops. First experiences with the multi-touch table show its potential for collaborative management of large-scale infrastruc-tures. Key words: <b>programmable</b> <b>network,</b> network management, multi-touch inter-faces...|$|E
5000|$|GNU Gneural Network - GNU package which {{implements}} a <b>programmable</b> neural <b>network</b> ...|$|R
40|$|In {{this paper}} we {{describe}} a new flexible and universally applicable testbed for Internet-based multimedia applications. Our approach combines {{the technology of}} <b>Programmable</b> <b>Networks</b> with emulated network environments and delivers a Virtual Programmable Testbed (VPT). In this work we show that a VPT is well suited for rapid creation and evaluation of distributed multimedia applications. There ar...|$|R
40|$|Originally, the Internet {{delivered}} best-effort service quality {{with respect}} to end-to-end delay. Recently, extensions such as RSVP have been proposed to provide guaranteed real-time services as well. Unfortunately, network resources, such as routers, do not yet fully support RSVP reservation protocols so that guarantees cannot truly be given. In this paper, we suggest to follow the paradigm of open <b>programmable</b> <b>networks</b> for a more complete QoS provisioning. Reservation gaps or tunnels are dynamically closed {{by means of a}} software-agent approach that is flexibly deployed for an application oriented QoS support. Agents are dynamically located to such tunnels in order to monitor the tunnels, to provide feed-back information in case of QoS violations, and to decide on possible compensating measures to be taken. Keywords: QoS management, RSVP, Internet, intelligent and mobile agents, open <b>programmable</b> <b>networks.</b> 1 Introduction Quality of service is an increasingly important issue for dist [...] ...|$|R
40|$|Software-Defined Networking (SDN) {{promises}} {{the vision}} of more flexible and manageable networks, but requires certain level of programmability in the data plane. Current industry insight holds that <b>programmable</b> <b>network</b> processors are of lower performance than their hard-coded counterparts, such as Ethernet chips. This represents a roadblock to SDN adoption. In this paper we argue that contrast to the common view, the overhead of programmability is relatively low. We also argue that the apparent difference between programmable and hard-coded chips today is not primarily due to programmability itself, but because the internal balance of <b>programmable</b> <b>network</b> processors is tuned to more complex use cases. These arguments are backed with calculations and real-life measurements. Categories and Subject Descriptor...|$|E
40|$|International audienceThis paper {{discusses}} {{that there}} is significant benefit in providing stronger security at lower layers of the network stack for hosts connected to a network. It claims to reduce the attack vulnerability of a networked host by providing security mechanisms in a <b>programmable</b> <b>Network</b> Interface Card (NIC). Dynamic access control mechanisms are implemented in hardware to restrict access to the services provided, only to authenticated hosts. This reduces server vulnerability to various layer 2 attacks. Also the services will be immune to zero-day vulnerabilities due to the minimal code execution paths. To this end, it presents architecture and implementation details of a <b>programmable</b> <b>network</b> interface card equipped with these measures. It works alongside, and augments, existing security protocols making deployment practical...|$|E
40|$|Abstract—The <b>programmable</b> <b>network</b> {{approach}} allows {{processing of}} passing user {{data in a}} network, which is highly suitable especially for multimedia streams processing. However, programming of complex stream processing applications for programmable nodes is not effortless since they usually do not provide sufficient flexibility (both programming flexibility and execution environment flexibility). In this paper we present the <b>programmable</b> <b>network</b> node architecture named DiProNN that is able to accept and run user-supplied programs and/or virtual machines and process them over passing data. All the DiProNN programs are described using our modular programming model based on the workflow principles that takes advantages of DiProNN virtualization and makes programming of complex streaming applications easier. As a possible application we show a sketch implementation of simple MCU (Multipoint Control Unit) used for large videoconferences that profits from DiProNN properties. I...|$|E
40|$|Abstract. Several {{projects}} {{proposed to}} use active or <b>programmable</b> <b>networks</b> to implement attack detection systems for detecting distributed {{denial of service}} attacks or worm propagation. In order to distinguish legal traffic from the attack traffic bypassing packets need to be inspected deeply which is resource consuming. Such an inspection can be realized either with additional and expensive special hardware or in software. But due to resource limitations inspection of all bypassing packets in software is not feasible if the packet rate is high. Therefore we propose to add packet selection mechanisms to the NodeOS reference architecture for <b>programmable</b> <b>networks.</b> A packet selector reduces the rate of packets which are inspected. In this paper we detail on various packet selectors and evaluate their suitability for an attack detection system. The results of our implementation show significant advantages by using packet sampling methods compared to packet filtering. ...|$|R
40|$|Abstract—Network {{protocols}} {{suffer from}} a lock dictated by the need for standardization and Metcalf’s law. Programmable middleboxes can help to relieve the effects of that lock. This paper gives game theoretic arguments that show how the option of having middleboxes can raise the quality of communication protocols. Based on this analysis, design considerations for active and <b>programmable</b> <b>networks</b> are discussed. I...|$|R
40|$|The {{interaction}} between BTExact Technologies and the Department of Computing Science at University College London {{is becoming increasingly}} beneficial for both parties. Over the last academic year, {{there has been a}} good deal of development in the area of middleware for the management <b>programmable</b> <b>networks.</b> This paper describes the work that has been done, and outlines the plans for future research...|$|R
