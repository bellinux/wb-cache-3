3|4925|Public
40|$|Abstract: This paper {{describes}} {{research on}} some methods of reducing power consumption {{to reduce the}} volume accompanying logger. For the requirement of ultra-low power consumption and miniature, the design is described separately from the hardware and software, mainly including temperature detecting module, interface of communication, low current circuit hardware, energy conservation,arouse from <b>power</b> <b>down</b> <b>state,</b> communication protocol, etc. The experimental tests for device prove that the research can achieve low power requirements...|$|E
40|$|Abstract — While Dynamic Voltage Scaling (DVS) is an {{efficient}} technique {{in reducing the}} dynamic energy consumption of a CMOS processor, methods that employ DVS without considering leakage current are quickly becoming less efficient when considering the processor’s overall energy consumption. A leakage conscious DVS voltage schedule may require the processor to run at a higher-than-necessary speed to execute a given set of real-time tasks, which {{can result in a}} large number of idle intervals. To effectively reduce the energy consumption during these idle intervals, and therefore the overall energy consumption, the DVS schedule must dictate that the processor both enter and leave the <b>power</b> <b>down</b> <b>state</b> during these idle intervals, while carefully considering the time and energy cost of doing so. In this paper, we present a scheduling technique that can effectively reduce the overall energy consumption for hard real-time systems scheduled according to a fixed priority (FP) scheme. Experimental results demonstrate that a processor using our strategy consumes as less as 15 % of the idle energy of a processor employing the conventional strategy. I...|$|E
30|$|C-states: C-states are the CPU power states C 0, C 1, C 2, and C 3. They {{denote the}} Operating State, Halt, Stop-Clock, and Sleep Mode respectively. Recently, deep <b>power</b> <b>down</b> <b>states</b> (e.g. C 4, C 5, C 6, and C 7) were {{introduced}} to define different levels of lower activity.|$|R
30|$|Static {{approach}} has a priori knowledge of different power manageable component states and stationary workload. Adaptive approach accounts for non-stationary {{nature of the}} workloads and uses policy pre-characterization, parameter learning and policy interpolation in taking the determination for <b>power</b> <b>down</b> <b>states</b> of parts [19]. Adaptive Markov Control Process for non-stationary workloads are online adaptation DPM schemes for non-stationary workloads or real-life systems [20].|$|R
30|$|Ideally, a power {{manageable}} component {{with more}} than two <b>power</b> <b>down</b> <b>states</b> and its switching to deep sleep state can reduce more power consumption. Moreover, switching from <b>power</b> <b>down</b> to <b>power</b> up <b>states</b> and vice versa, require finite transition time and overhead of storing processor state before turning the device into low power mode or off. Deeper sleep state requires larger waking up time and which in turn increases the latency. Hence, {{there is a great}} need of an optimized DPM scheme that can reduce power consumption with performance constraints and gain performance with power constraints for power source limited applications in wireless sensor networks.|$|R
40|$|AbstractThis paper {{presents}} a linear integer programming framework for effective power management in storage systems. A sample memory system with different data banks is considered for optimal energy consumption during data operations by manipulating the data among banks. The memory bank four-level power state schemes, namely, active, stand-by, nap, and <b>power</b> <b>down</b> <b>states,</b> are included for superior power {{management of the}} storage system by formulating a linear integer optimization framework that includes plausible data manipulations, energy consumption levels, data migration, and compression options. The numerical results illustrate {{the efficiency of the}} proposed framework in terms of power management of storage systems with respect to available approaches with two-level power state operations...|$|R
5000|$|Sekijishi Gundam (赤獅子頑駄無(せきじしがんだむ)) - [...] "Red Lion Gundam". A good natured, {{rough and}} ready Gundam Bancho who Kokuryu and Ryuunosuke {{encounter}} during a class {{visit to the}} Doros Ocean Primary School. Aware of Gaza Captain's evil plans to take over another beach, Sekijishi attacks the school and attempts to destroy it with a missile. Kokuryu stops him and convinces him that his friends consider him {{more important than the}} beach. Soon after he saves Kokuryu from an assassination attempt from Seirou by using the 'forbidden' attack from his head mounted cannon. Seirou abducted him, leading to Kokuryu and company heading out to save him. Upon finding him, Seirou had briefly brainwashed him in order to gain the power of Gigantic Musha Mode. After the combination wore off, Sekijishi regained his memory. Sekijishi resembles a lion, {{to the point where he}} can transform into an animal-like form for combat and his <b>powered</b> <b>down</b> <b>state</b> resembles a lion cub or even a 'shiisaa'. He will often revert to this cub state after using his head cannon. His side skirt armour converts into a personal surfboard and he is devoted to the sea and surfing, even calling himself 'a king of the land who loves the sea'. His personal symbol is a shark. Ryuunosuke and his classmates fondly call him 'Set-chan'. He is last seen returning to protecting the oceans from harm.|$|R
40|$|There is a {{trend to}} use {{computing}} resources {{in a way that}} is more removed from the technical constraints. Users buy compute time on machines that they do not control or necessarily know the specifics of. Conversely this means the providers of such resources have more freedom in allocating them amongst different tasks. They can use this freedom to provide more, or better, service by reallocating resources as demand for them changes. However deciding when to reallocate resources is not trivial. In order to make good reallocation decisions, this thesis constructs a series of models. Each of the models concerns a resource allocation problem in the presence of bursty sources. The focus of the modelling, however, varies. In its most basic form it considers several different job types competing over the allocation of a limited number of servers. The goal there is to minimize the (weighted) mean time jobs spend in the system. The weighting can reflect the relative importance of the different job types. Reallocation of servers between job types is in general considered to be neither free nor instantaneous. We then show how to find the optimal static allocation of servers over job types. Finding the optimal dynamic allocation of servers is formulated as solving a Markov decision process. We show that this is practically unfeasible for all but the most simple systems. Instead a number of heuristics are introduced. Some are fluid-approximation based and some are parameterless, i. e. do not require the a priori knowledge of parameters of the system. The performance of these heuristic policies is then explored in a series of simulations. A slightly different model is formulated next. Its goal is not to optimize allocation of servers over several job types, but rather between powered up and <b>powered</b> <b>down</b> <b>states.</b> In the <b>powered</b> up state servers can provide service for incoming jobs. In the <b>powered</b> <b>down</b> <b>state</b> servers cannot service incoming jobs but incur a profit due to power savings. Balancing power and performance is again formulated as a Markov decision process. This is not explicitly solved but instead some of the heuristics considered earlier are adapted to give dynamic policies for powering servers up and v down. Their performance is again tested in a number of simulations, including some where the arrival process is not only bursty but also non-Markovian. The third and final model considers allocation of servers over different job types again. This time the servers experience breakdowns and subsequent repairs. During a repair period the servers cannot process any incoming jobs. To reduce the complexity of this model, it is assumed that switches of servers between job types are instantaneous, albeit not necessarily free. This is modeled as a Markov decision process and we show how to find the optimal static allocation of servers. For the dynamic allocation previously considered heuristics are adapted again. Simulations then show the performance of these heuristics and the optimal static allocation in a number of scenarios. EThOS - Electronic Theses Online ServiceGBUnited Kingdo...|$|R
30|$|Wireless sensor {{networks}} (WSNs) demand {{low power}} and energy efficient hardware and software. Dynamic Power Management (DPM) technique reduces the maximum possible active states of a wireless sensor node by controlling the switching of the low power manageable components in <b>power</b> <b>down</b> or off <b>states.</b> During DPM, it is also required that the deadline of task execution and performance are not compromised. It is seen that operational level change can improve the energy efficiency of a system drastically (up to 90 %). Hence, DPM policies have drawn considerable attention. This review paper classifies different dynamic power management techniques and focuses on stochastic modeling scheme which dynamically manage wireless sensor node operations {{in order to minimize}} its power consumption. This survey paper is expected to trigger ideas for future research projects in power aware wireless sensor network arenas.|$|R
2500|$|After {{the system}} was declassified, the ten ERCS sorties were <b>powered</b> <b>down</b> and removed from their launch facilities. During these <b>power</b> <b>down</b> operations, the {{location}} of the sorties were: ...|$|R
25|$|The entire Voyager 2 scan platform, {{including}} {{all of the}} platform instruments, was <b>powered</b> <b>down</b> in 1998. All platform instruments on Voyager 1, except for the ultraviolet spectrometer (UVS) have been <b>powered</b> <b>down.</b>|$|R
5000|$|Remotely <b>power</b> up, <b>power</b> <b>down,</b> <b>power</b> cycle, {{and power}} reset the computer.|$|R
50|$|Modules—If {{additional}} {{power savings}} are needed, {{the system will}} <b>power</b> <b>down</b> modules in descending order, starting with the highest numbered slot. Slots containing supervisor engines or Switch Fabric Modules are bypassed and are not <b>powered</b> <b>down.</b>|$|R
40|$|In {{this paper}} we {{investigate}} some {{opportunities and challenges}} that arise in energy-aware computing in a cluster of servers running data-intensive workloads. We leverage the insight that servers in a cluster are often underutilized, which makes it attractive to consider <b>powering</b> <b>down</b> some servers and redistributing their load to others. Of course, <b>powering</b> <b>down</b> servers naively will render data stored only on <b>powered</b> <b>down</b> servers inaccessible. While data replication can be exploited to <b>power</b> <b>down</b> servers without losing access to data, unfortunately, {{care must be taken}} {{in the design of the}} replication and server <b>power</b> <b>down</b> schemes to avoid creating load imbalances on the remaining “live ” servers. Accordingly, in this paper we study the interaction between energy management, load balancing, and replication strategies for data-intensive cluster computing. In particular, we show that Chained Declustering – a replication strategy proposed more than 20 years ago – can support very flexible energy management schemes. ...|$|R
40|$|Abstract—Energy {{consumption}} {{is a crucial}} and rising operational cost for data-intensive computing. In this paper we investigate some opportunities and challenges that arise in energy-aware computing in a cluster of servers running data-intensive workloads. A key insight is that in most data centers, servers are underutilized, which makes it attractive to consider <b>powering</b> <b>down</b> some servers and redistributing their load to others. Of course, <b>powering</b> <b>down</b> servers naively will render data stored only on <b>powered</b> <b>down</b> servers inaccessible. While data replication can be exploited to <b>power</b> <b>down</b> servers without losing access to data, unfortunately, {{care must be taken}} {{in the design of the}} replication and server <b>power</b> <b>down</b> schemes to avoid creating load imbalances on the remaining “live ” servers. Accordingly, in this paper we study the interaction between energy management, load balancing, and replication strategies for dataintensive cluster computing. In particular, we show that Chained Declustering – a replication strategy proposed more than 20 years ago – can support very flexible energy management schemes. ...|$|R
25|$|These {{institutional}} groups retained great <b>power</b> <b>down</b> to 1959.|$|R
50|$|There {{was also}} some {{controversy}} among viewers about the <b>power</b> <b>down</b> of Steel Soldier, who many viewers felt was <b>powered</b> <b>down</b> to even out {{the number of}} girls, seeing as his track record had been {{much better than the}} two other superheroes up for powerdown, H2O Man and Gold Starlet.|$|R
50|$|The ATR core is {{designed}} to be as flexible as possible for research needs. It can be brought online and <b>powered</b> <b>down</b> safely as often as necessary to change experiments or perform maintenance. The reactor is also <b>powered</b> <b>down</b> automatically in the event of abnormal experimental conditions or power failure.|$|R
50|$|Depending on the {{intended}} application, the highest available fill power {{may not be}} necessary. A high fill power will provide more insulating ability for a given weight of down. The warmth of a down comforter depends {{not only on the}} fill power, but also on the quantity of fill. So the difference between a comforter with 550 fill <b>power</b> <b>down</b> and a comforter with 700 fill <b>power</b> <b>down</b> is that the 700 fill <b>power</b> <b>down</b> comforter will be lighter for the same warmth rating. High fill powers are most important for weight sensitive applications such as backpacking.|$|R
2500|$|CSM <b>power</b> <b>down,</b> LM <b>power</b> up: 05:23 UTC (58:10 Ground Elapsed Time) ...|$|R
50|$|Sleep: {{falls asleep}} after 5 minutes and <b>powers</b> <b>down</b> after 24 hours.|$|R
5000|$|Remote {{power up}} / <b>power</b> <b>down</b> / <b>power</b> cycle through {{encrypted}} WOL.|$|R
5000|$|System <b>powers</b> <b>down</b> {{automatically}} {{after some}} time when no button has been pressed.|$|R
5000|$|Ocean Power Technologies and Lockheed Martin take wave <b>power</b> <b>down</b> under - July ...|$|R
50|$|As of {{the morning}} of November 2, 28,600 were without <b>power,</b> <b>down</b> from 365,700.|$|R
5000|$|Sleep: the Chimpanzee will <b>power</b> <b>down</b> after a preset {{amount of}} time without activity.|$|R
40|$|Abstract—Static power {{consumption}} {{is an important}} com-ponent of the total {{power consumption}} in FPGAs built using 90 nm and smaller technology nodes. A previous study proposed <b>powering</b> <b>down</b> regions of logic blocks in an FPGA when idle to reduce the static power dissipation. This previous work did not consider <b>powering</b> <b>down</b> the switch blocks (SBs). However, the static power of SBs constitute more than 50 % of an FPGA’s static power. In this paper, we present an architecture that enables selectively <b>powering</b> <b>down</b> SBs along with the logic blocks during their idle periods. The potential power savings from this architecture depends on the proportion of SBs that can be <b>powered</b> <b>down.</b> We present modifications to our CAD flow to maximize {{the number of such}} SBs, and we experimentally estimate their proportion using a set of synthetic benchmark circuits. Our estimation results show that 53 % to 83 % of the SBs can be <b>powered</b> <b>down</b> in a functional module of size 24 × 24 tiles and an architecture power gating regions of size 4 × 4 tiles, leading to overall static power reductions of 70 % to 84 % compared to an architecture that does not support power gating. I...|$|R
25|$|The Phénix {{breeder reactor}} in France was <b>powered</b> <b>down</b> in 2009 after 36 years of operation.|$|R
50|$|The station must <b>power</b> <b>down</b> to 90 watts {{at night}} to protect clear-channel CFRB in Toronto.|$|R
50|$|The {{user manual}} {{says that when}} the phone is <b>powered</b> <b>down,</b> you should hold the <b>power</b> button <b>down</b> until the Samsung logo appears. That time seems to vary, but you {{actually}} only have to hold the button down 6.5 seconds.|$|R
50|$|The station must <b>power</b> <b>down</b> to 7 watts {{at night}} to protect clear-channel stations, {{including}} CFZM in Toronto.|$|R
5000|$|Suspend to RAM: the CPU {{could be}} <b>powered</b> <b>down</b> while the RAM {{is up and}} in Self-refresh state.|$|R
5000|$|There {{was not a}} <b>power</b> <b>down</b> in Show 1 as this {{documented}} the audition process for the series.|$|R
50|$|Computer {{components}} are usually described as cold-pluggable if {{the computer system}} must be <b>powered</b> <b>down</b> to add or remove them. The opposite term is hot-pluggable; hot-pluggable components can be added or removed without <b>powering</b> <b>down</b> the computer. Most components in computer systems, such as CPUs and memory, are only cold-pluggable. However {{it is common for}} high-end servers and mainframes to feature hotplug capability for other components, such as PCIe and SATA.|$|R
5000|$|Thiosulfates {{react with}} halogens differently, {{which can be}} {{attributed}} to the decrease of oxidizing <b>power</b> <b>down</b> the halogen group: ...|$|R
5000|$|Down (or any insulation) {{provides}} warmth by trapping a {{layer of}} air that separates the cold side from the warm side. A thicker layer of trapped air gives more insulation. This thickness is often called [...] "loft." [...] A comforter that uses 550 fill <b>power</b> <b>down,</b> for example, would have to use approximately 40%-50% greater weight of down than a similar item that uses 800 fill <b>power</b> <b>down</b> to provide the same loft.|$|R
