23|12|Public
5000|$|PCL - <b>Printer</b> <b>Command</b> Language, {{a printer}} control {{protocol}} family designed by Hewlett-Packard ...|$|E
50|$|XES is {{sometimes}} known as UDK, from User Defined Key, the character which introduces the <b>printer</b> <b>command,</b> usually the escape character (ESC).|$|E
5000|$|The Harlequin Embedded SDK also {{supports}} [...] <b>Printer</b> <b>Command</b> Language 5e, PCL 5c and PCL XL, including HPGL and Printer Job Language (PJL).|$|E
50|$|ASA control {{characters}} are logical <b>printer</b> <b>commands.</b> They tell the printer {{how far to}} advance the paper before printing the current line of text. ASA control {{characters are}} all displayable characters. Printers do not understand these characters themselves, therefore the printer driver must translate them to the corresponding <b>printer</b> <b>commands</b> when sending the print data to the printer.|$|R
25|$|A {{version of}} SpeedScript for MS-DOS {{was created in}} 1988 by Randy Thompson and {{published}} in book form by Compute! Books. This version was written in Turbo Pascal with portions written in assembly language, and added incremental new features to the word processor such as additional <b>printer</b> <b>commands,</b> full cursor-control (to {{take advantage of the}} PC's Home, End, PgUp, and PgDn keys), and a native 80-column mode.|$|R
50|$|These {{commands}} do {{not send}} any {{data to the}} <b>printer.</b> The <b>commands</b> only ask the printer to advance the paper.|$|R
50|$|The ESC code is used {{extensively}} to introduce commands to control printing and display devices, {{for instance in}} the ANSI escape codes, and <b>Printer</b> <b>Command</b> Language (PCL), the printer language from Hewlett-Packard printers and compatibles.|$|E
50|$|Eiconjet was a laser {{printing}} solution using a design and hardware similar to Eiconscript. Rather than PostScript, it executed the Hewlett-Packard PCL5 (<b>Printer</b> <b>Command</b> Language). The Eiconjet software was also developed in-house as a Clean Room design.|$|E
5000|$|A page {{description}} language (PDL), with commands which tell the printer how to format the page. Popular PDLs are PCL (<b>Printer</b> <b>Command</b> Language) from Hewlett-Packard, PostScript from Adobe Systems and PostScript clones, and Windowsâ€™ Graphics Device Interface (GDI).|$|E
50|$|IBM defined {{two sets}} of <b>printer</b> <b>commands,</b> and {{therefore}} {{two sets of}} printer control characters are available. The first set of commands did not send any data to be printed to the printer but only a paper movement instruction. These are called immediate commands. The second set of commands send data to be printed on the current line plus a paper movement instruction to the printer. Note that {{in contrast to the}} ASA control characters, the IBM machine print control characters ask the printer to firstly print the data on the current line, and then secondly advance the paper.|$|R
50|$|There {{are several}} {{variants}} of ESC/P, as not all <b>printers</b> implement all <b>commands.</b>|$|R
50|$|ASA control {{characters}} are simple printing command characters {{used to control}} the movement of paper through line <b>printers.</b> These <b>commands</b> are presented as special characters in the first column of each text line to be printed, and affect how the paper is advanced before the line is printed.|$|R
50|$|CaPSL is a <b>printer</b> <b>command</b> language/page {{description}} language used by early Canon printers including the LBP-8III series and supported on (at least) LBP-8IV printers. This language was discontinued, with later Canon printers implementing PCL. It was also called LIPS or LIPS4.|$|E
50|$|PPDS has {{different}} levels of functions that are all upward compatible. Although many laser or inkjet printers do not support PPDS, those that support binary printer languages still use the ESC syntax, which include <b>Printer</b> <b>Command</b> Language versions 1 to 5 and the Epson ESC/P command set.|$|E
50|$|Xerox Escape Sequence or XES is a page {{description}} language (PDL) developed by Xerox corporation and introduced with their 2700 laser printers in 1982. XES offers similar capabilities to Hewlett-Packard's <b>Printer</b> <b>Command</b> Language (PCL), which {{first appeared in}} 1984. XES is supported by most Xerox laser printers including the 2700. 3700, 4011, 4030, 4045, 4197, 4213, 4235, and 4700.|$|E
5000|$|...ff {{form feed}} (new page) [...]lmXX set left margin to XX {{characters}} [...]rmYY set right margin to YY characters [...]cj center justification [...]fj full justificationCharacter formatting was specified with escape-commands, which varied {{depending on the}} <b>printer.</b> Common <b>commands</b> included Esc-X to begin underlining, and Esc-Y to end underlining.|$|R
40|$|This {{reference}} summary {{is a minor}} revision {{and does}} not obsolete the previous edition. Changes include the addition of some new DASD and 3203 <b>printer</b> <b>commands,</b> the EBCPIC control characters GE and R LF, and minor editorial revisions. The card is intended primarily for use by S/ 370 assembler lan-guage application programmers. It contains basic machine in-formation on Models 115 through 168 summarized from the System/ 370 Principles of Operation (GA 22 - 7000 - 4), frequently used information from the VS and VM assembler language manual (GC 33 - 4010), command codes for various I/O devices, and a multi-code translation table. The card will be updated from time to time. However, the above manuals and others cited on the card are the authoritative reference sources and will be first to reflect changes. To distinguish them from instructions carried over from S/ 360, th...|$|R
5000|$|In {{order to}} allow simpler {{creation}} of drivers for Winprinters, the Microsoft Universal Printer Driver was created. This allows printer vendors to write Generic Printer Description (GPD) [...] "minidrivers", which describe the <b>printer's</b> capabilities and <b>command</b> set in plaintext, {{rather than having to}} do kernel mode driver development.|$|R
50|$|<b>Printer</b> <b>Command</b> Language, more {{commonly}} referred to as PCL, is a page description language (PDL) developed by Hewlett-Packard as a printer protocol and has become a de facto industry standard. Originally developed for early inkjet printers in 1984, PCL has been released in varying levels for thermal, matrix printer, and page printers. HP-GL/2 and PJL are supported by later versions of PCL.|$|E
50|$|The {{document}} to be printed is encoded in a page description language such as PostScript, <b>Printer</b> <b>Command</b> Language (PCL), or Open XML Paper Specification (OpenXPS). The {{raster image processor}} converts the page description into a bitmap which is stored in the printer's raster memory. Each horizontal strip of dots across the page {{is known as a}} raster line or scan line.|$|E
50|$|In digital {{printing}} a page description language (PDL) {{is a computer}} language that describes {{the appearance of a}} printed page in a higher level than an actual output bitmap. An overlapping term is printer control language, which includes Hewlett-Packard's <b>Printer</b> <b>Command</b> Language (PCL). PostScript {{is one of the most}} noted page description languages. The markup language adaptation of the PDL is the page description markup language.|$|E
5000|$|With its {{distribution}} in the influential AT&T Unix System V, the interface if not the implementation became the standard for users' control over <b>printers.</b> The [...] <b>command</b> was included as a requirement in the POSIX.2 standard, and a command by that name appeared in the subsequent lpr, LPRng and CUPS printing systems. (In SVR4 derivates like SCO UNIX, the [...] command was simply an alias for the [...] command used by the BSD-based [...] system.) ...|$|R
50|$|Machine control characters, in contrast, are {{the very}} {{commands}} which IBM line printers understand. This is why they are hardware dependent or hardware determined. IBM defined this set of commands for their line printers and made sure all their line printers understand them. Other (mainframe) line printer manufacturers also {{had to make sure}} their <b>printers</b> understood those <b>commands.</b> Since machine control characters are hardware commands, many of them are not displayable characters and therefore machine control characters are always specified as hexadecimal values.|$|R
50|$|Today, most {{printers}} accept {{one or more}} page description languages (PDLs). Laser printers {{with greater}} processing power frequently offer support for variants of Hewlett-Packard's <b>Printer</b> <b>Command</b> Language (PCL), PostScript or XML Paper Specification. Most inkjet devices support manufacturer proprietary PDLs such as ESC/P. The diversity in mobile platforms have led to various standardization efforts around device PDLs such as the Printer Working Group (PWG's) PWG Raster.|$|E
50|$|Biscom {{has evolved}} into a {{provider}} of multiple product lines, including Managed File Transfer solutions that enable secure and auditable delivery of files of all types and sizes, and Image Conversion solutions that convert to and from popular formats such as PCL (<b>Printer</b> <b>Command</b> Language), PostScript, PDF (Portable Document Format), and Microsoft Office, and Enterprise File Synchronization & Sharing solutions that enable full IT control of data and user manageability.|$|E
50|$|The Hewlett-Packard Raster Transfer Language (HP RTL) is {{a subset}} of the <b>Printer</b> <b>Command</b> Language (PCL) language. It is used to embed true raster images (bitmaps) into plotter files. Modern {{plotters}} (like HP DesignJets) are raster devices, so they need a raster-based language. For backward compatibility they also support the HP-GL/2 (formerly HP-GL) vector language, so the HP RTL language is designed for mixing with the HP-GL/2 language.|$|E
50|$|Printer control {{characters}} and Carriage control characters are IBM mainframe terms that denote the special meaning {{which the first}} character on a line of printable text may have. The first character of each line of text is interpreted as a control character or <b>printer</b> <b>command</b> instead of a character to be printed if a corresponding attribute is set for the print data set (data set is mainframe speak for {{what is known as}} a file on other operating systems).|$|E
50|$|Hewlett-Packard uses {{a similar}} concept in its HP-UX {{operating}} {{system and its}} <b>Printer</b> <b>Command</b> Language (PCL) protocol for printers (either for HP printers or not). The terminology, however, is different: What others call a character set, HP calls a symbol set, and what IBM or Microsoft call a code page, HP calls a symbol set code. HP developed a series of symbol sets, each with an associated symbol set code, to encode both its own character sets and other vendorsâ€™ character sets.|$|E
50|$|The first HP LaserJet and {{the first}} Apple LaserWriter used the same print engine, the Canon CX engine. HP chose to use their {{in-house}} developed <b>Printer</b> <b>Command</b> Language (PCL) as opposed to Apple, which adopted the PostScript language, as developed by Adobe Systems. The use of a less-ambitious and simpler Page description language allowed HP to deliver its LaserJet to the market about a year before Apple's CX based product, and for $1000 less. The sharing of an identical Canon engine in two competing products continued with the HP LaserJet II/III and the Apple LaserWriter II, which both used the Canon LBP-SX print engine.|$|E
50|$|Printer Job Language (PJL) is {{a method}} {{developed}} by Hewlett-Packard for switching printer languages at the job level, and for status readback between the printer and the host computer. PJL adds job level controls, such as printer language switching, job separation, environment, status readback, device attendance and file system commands. While PJL was conceived as an extension to <b>Printer</b> <b>Command</b> Language (PCL), it is now supported by most PostScript printers. Many printer vendors have extended PJL to include commands proprietary to their products. Not all PJL commands documented by HP are implemented in all HP or other vendor products. PJL resides above all the other printer languages and parses commands first. The syntax mainly uses plain English words.|$|E
50|$|In April 2013, a {{complete}} book attributed to Jonathan Gillette was digitally released via the website whytheluckystiff.net and the GitHub repository cwales. It {{was presented as}} individual files of PCL (<b>Printer</b> <b>Command</b> Language) without any instruction on how to assemble the print outs into a book. Based on timestamps from the git repository, Steve Klabnik compiled the pages in {{the order in which}} they were released into a PDF file which he titled CLOSURE since the book provides some resolution to the story. Although no authorship is claimed in either the book or the git repository, the writing style and content are remarkably comparable to that of Jonathan Gillette and the storyline references certain events and the text includes the names Jonathan Gillette and _why.|$|E
50|$|While {{competing}} printers {{and their}} associated control languages offered {{some of the}} capabilities of PostScript, they were limited {{in their ability to}} reproduce free-form layouts (as a desktop publishing application might produce), use outline fonts, or offer the level of detail and control over the page layout. HP's own LaserJet was driven by a simple page description language, known as <b>Printer</b> <b>Command</b> Language, or PCL. The version for the LaserJet, PCL4, was adapted from earlier inkjet printers with the addition of downloadable bitmapped fonts. It lacked the power and flexibility of PostScript until several upgrades provided some level of parity. It was some time before similar products became available on other platforms, by which time the Mac had ridden the desktop publishing market to success.|$|E
5000|$|The first {{versions}} of Microsoft Windows ran programs {{together in a}} single address space. Every program was meant to co-operate by yielding the CPU to other programs so that the graphical user interface (GUI) could multitask and be maximally responsive. All operating-system level operations were provided by the underlying operating system: MS-DOS. All higher-level services were provided by Windows Libraries [...] "Dynamic Link Library". The Drawing API, Graphics Device Interface (GDI), was implemented in a DLL called , the user interface in [...] These extra layers on top of DOS had to be shared across all running Windows programs, not just to enable Windows {{to work in a}} machine with less than a megabyte of RAM, but to enable the programs to co-operate with each other. The code in GDI needed to translate drawing commands to operations on specific devices. On the display, it had to manipulate pixels in the frame buffer. When drawing to a printer, the API calls had to be transformed into requests to a printer. Although it could have been possible to provide hard-coded support for a limited set of devices (like the Color Graphics Adapter display, the HP LaserJet <b>Printer</b> <b>Command</b> Language), Microsoft chose a different approach. GDI would work by loading different pieces of code, called [...] "device drivers", to work with different output devices.|$|E
40|$|The {{utilization}} of 3 D printing technology within {{the manufacturing process}} creates {{an environment that is}} potentially conducive to malicious activity. Previous research in 3 D printing focused on attack vector identification and intellectual property protection. This research develops and implements malicious code using Printrbotâ€™s branch of the open source Marlin 3 D printer firmware. Implementations of the malicious code were activated based on a specified <b>printer</b> <b>command</b> sent from a desktop application. The malicious firmware successfully ignored incoming print commands for a printed 3 D model, substituted malicious print commands for an alternate 3 D model, and manipulated extruder feed rates. The research contribution is three-fold. First, this research provides an initial assessment of potential effects malicious firmware can have on a 3 D printed object. Second, it documents a potential vulnerability that impacts 3 D product output using 3 D printer firmware. Third, it provides foundational grounding for future research in malicious 3 D printing process activities...|$|E

