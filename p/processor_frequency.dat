120|206|Public
5|$|However, power {{consumption}} P by a chip {{is given by}} the equation P = C × V 2 × F, where C is the capacitance being switched per clock cycle (proportional {{to the number of}} transistors whose inputs change), V is voltage, and F is the <b>processor</b> <b>frequency</b> (cycles per second). Increases in frequency increase the amount of power used in a processor. Increasing processor {{power consumption}} led ultimately to Intel's May 8, 2004 cancellation of its Tejas and Jayhawk processors, which is generally cited as the end of frequency scaling as the dominant computer architecture paradigm.|$|E
2500|$|At 3.2GHz, each channel flows {{at a rate}} of 25.6GB/s. Viewing the EIB in {{isolation}} from the system elements it connects, achieving twelve concurrent transactions at this flow rate works out to an abstract EIB bandwidth of 307.2GB/s. Based on this view many IBM publications depict available EIB bandwidth as [...] "greater than 300GB/s". This number reflects the peak instantaneous EIB bandwidth scaled by <b>processor</b> <b>frequency.</b>|$|E
50|$|AMD Turbo Core {{is similar}} to Intel Turbo Boost, which is another dynamic <b>processor</b> <b>frequency</b> {{adjustment}} technology used to increase performance, as well as AMD PowerNow!, {{which is used to}} dynamically adjust laptop processor's operating frequencies in order to decrease power consumption (saving battery life), reduce heat, and lower noise. AMD PowerNow! is used to decrease <b>processor</b> <b>frequency,</b> whereas AMD Turbo Core is used to increase <b>processor</b> <b>frequency.</b>|$|E
30|$|DVFS is {{a method}} used to control a <b>processor's</b> {{calculation}} <b>frequency</b> {{to reduce the amount}} of energy used for calculations. Basically, when the number of calculations is large, the voltage is amplified to increase the <b>processor's</b> <b>frequency.</b> The correlation formula can be calculated using formulas  8 and 9 as with [2, 16, 17].|$|R
5000|$|In {{computer}} architecture, {{frequency scaling}} (also known as frequency ramping) is {{the technique of}} increasing a <b>processor's</b> <b>frequency</b> so as to enhance {{the performance of the}} system containing the <b>processor</b> in question. <b>Frequency</b> ramping was the dominant force in commodity processor performance increases from the mid-1980s until roughly the end of 2004.|$|R
40|$|Power {{conservation}} {{has become}} a key design issue for many systems, including clusters deployed for embedded systems, where power availability ultimately determines system lifetime. These clusters execute {{a high rate of}} requests of highly-variable length, such as in satellite-based multiprocessor systems. The goal of power management in such systems is to minimize the aggregate energy consumption of the whole cluster while ensuring timely responses to requests. In the past, dynamic voltage scaling (DVS) and on/off schemes have been studied under the assumptions of continuously tunable <b>processor</b> <b>frequencies</b> and perfect load-balancing. In this work, we focus on the more realistic case of discrete <b>processor</b> <b>frequencies</b> and propose a new policy that adjusts the number of active nodes based on the system load, not system frequency. We also design a threshold scheme which prevents the system from reacting to short-lived temporary workload changes in the presence of unstable incoming workload. Simulation and implementation results on real hardware show that our policy is very effective in reducing the overall power consumption of clusters executing embedded applications...|$|R
5000|$|<b>Processor</b> <b>frequency</b> up to 600 MHz (LX900), 500 MHz (LX800) and 433 MHz (LX700).|$|E
5000|$|The {{effect of}} <b>processor</b> <b>frequency</b> on {{computer}} speed {{can be seen}} by looking at the equation for computer program runtime: ...|$|E
50|$|The SPARC T5 {{processor}} {{is used in}} Oracle's {{entry and}} mid-size SPARC T5-2, T5-4, and T5-8 servers. All servers are using the same <b>processor</b> <b>frequency,</b> number of cores per chip and cache configuration.|$|E
50|$|A related-but-opposite {{technique}} is overclocking, whereby processor performance is increased by ramping the <b>processor's</b> (dynamic) <b>frequency</b> beyond the manufacturer's design specifications.|$|R
25|$|The Alpha 21164 or EV5 became {{available}} in 1995 at <b>processor</b> <b>frequencies</b> {{of up to}} 333MHz. In July 1996 the line was speed bumped to 500MHz, in March 1998 to 666MHz. Also in 1998 the Alpha 21264 (EV6) was released at 450MHz, eventually reaching (in 2001 with the 21264C/EV68CB) 1.25GHz. In 2003, the Alpha 21364 or EV7 Marvel was launched, essentially an EV68 core with four 1.6 GB/s inter-processor communication links for improved multiprocessor system performance, running at 1 or 1.15GHz.|$|R
50|$|The Alpha 21164 or EV5 became {{available}} in 1995 at <b>processor</b> <b>frequencies</b> {{of up to}} 333 MHz. In July 1996 the line was speed bumped to 500 MHz, in March 1998 to 666 MHz. Also in 1998 the Alpha 21264 (EV6) was released at 450 MHz, eventually reaching (in 2001 with the 21264C/EV68CB) 1.25 GHz. In 2003, the Alpha 21364 or EV7 Marvel was launched, essentially an EV68 core with four 1.6 GB/s inter-processor communication links for improved multiprocessor system performance, running at 1 or 1.15 GHz.|$|R
5000|$|... where {{instructions}} per {{program is}} the total instructions being executed in a given program, cycles per instruction is a program-dependent, architecture-dependent average value, and time per cycle is by definition the inverse of <b>processor</b> <b>frequency.</b> An increase in frequency thus decreases runtime.|$|E
50|$|This problem occurs only on {{some models}} of the {{original}} Pentium processor. The bug only existed in some Pentium family processors with a clock speed of less than 120 MHz. On affected models, the Intel <b>Processor</b> <b>Frequency</b> ID Utility checks {{for the presence of}} this bug.|$|E
50|$|AMD Turbo Core {{and similar}} dynamic <b>processor</b> <b>frequency</b> {{adjustment}} technologies {{take advantage of}} the fact that average power consumed is less than the maximum design limits and therefore frequency (and the accompanying power and heat) is able to be increased for short amounts of time and still be within design limits.|$|E
5000|$|... 1.0 {{nanosecond}} - {{cycle time}} for a 1 GHz processor. , common <b>processors</b> have <b>frequencies</b> around 1-3.5 GHz, so the cycle time is somewhat shorter than a nanosecond.|$|R
30|$|Recent {{articles}} {{on the topic of}} integrated circuit (IC) power consumption have demonstrated that future ICs will require additional functionality to be implemented as microarchitectures. A power dissipation problem is evident in current multicore architectures. Native transistor switching speeds continue to double every two process generations, while <b>processor</b> <b>frequencies</b> are not increasing substantially. This serves {{to reduce the amount of}} utilisation necessary to justify adding custom microarchitectures. Their addition is further justified through the current desire for mobile and wearable computing devices, which demand energy efficiency to maximise finite battery lifespans.|$|R
40|$|Network links {{have more}} and more {{bandwidth}} while <b>processor</b> <b>frequencies</b> do not increase significantly and thus the best way to improve networking performance is to process packets in parallel on multicore machines. This paper describes a networking architecture where incoming network traffic is demultiplexed to user-level network protocol stacks running on different cores using a software packet lter and multiple hardware receive rings. Such architecture allows efficient use of the network interface controller, processor caches, and memory, enabling very efficient and scalable networking. This architecture has been implemented in the Osprey operating system...|$|R
5000|$|At 3.2 GHz, each channel flows {{at a rate}} of 25.6 GB/s. Viewing the EIB in {{isolation}} from the system elements it connects, achieving twelve concurrent transactions at this flow rate works out to an abstract EIB bandwidth of 307.2 GB/s. Based on this view many IBM publications depict available EIB bandwidth as [...] "greater than 300 GB/s". This number reflects the peak instantaneous EIB bandwidth scaled by <b>processor</b> <b>frequency.</b>|$|E
5000|$|... where P {{is power}} consumption, C is the {{capacitance}} being switched per clock cycle, V is voltage, and F is the <b>processor</b> <b>frequency</b> (cycles per second). Increases in frequency thus {{increase the amount}} of power used in a processor. Increasing processor power consumption led ultimately to Intel's May 2004 cancellation of its Tejas and Jayhawk processors, which is generally cited as the end of frequency scaling as the dominant computer architecture paradigm.|$|E
5000|$|The POWER7 superscalar {{symmetric}} {{multiprocessor architecture}} was a substantial evolution from the POWER6 design, focusing more on power efficiency through multiple cores and simultaneous multithreading (SMT). [...] The POWER6 architecture was built {{from the ground}} up to maximize <b>processor</b> <b>frequency</b> at the cost of power efficiency. It achieved a remarkable 5 GHz. While the POWER6 features a dual-core processor, each capable of two-way simultaneous multithreading (SMT), the IBM POWER 7 processor has up to eight cores, and four threads per core, for a total capacity of 32 simultaneous threads.|$|E
40|$|Synthetic {{aperture}} radar (SAR) imaging was {{the most}} suitable technique for achieving high resolution imagery through atmospheric cloud cover. This feature was important for planetary as well as earth orbiting satellite systems, and for military aircraft applications. Such applications require onboard data processing or wide-band data transmission systems in order to handle the large amounts of raw data produced by such systems. A number of techniques were utilized in implementing SAR <b>processors.</b> <b>Frequency</b> filtering and Fourier transform operations using both optical and digital techniques were utilized in SAR processing...|$|R
40|$|Abstract — We {{address the}} problem of using Discrete Controller Synthesis for the {{administration}} of Computing Systems, following an approach supported by a programming language. We present a mixed imperative/declarative programming language, where declarative contracts are enforced upon imperatively described behaviors. Its compilation is based on the notion of supervisory control of discrete event systems. It targets the programming of closed-loop reconfiguration controllers in computing systems. We apply our method to the problem of coordinating several administration loops in a data center (number of servers, repair, and local <b>processor</b> <b>frequencies)</b> : we formulate it as an invariance controller synthesis problem...|$|R
40|$|This paper {{describes}} {{a new approach}} to experimentally estimate the application schedulability for various <b>processor</b> <b>frequencies.</b> We use additional workload generated by an artificial high priority routine to simulate the frequency decrease of a processor. Then we estimate the schedulability of applications at different frequencies. The results of such estimation can be used to determine the frequencies and control algorithms of dynamic voltage scaling/dynamic frequency scaling (DVS/DFS) implementations. The paper presents a general problem description, the proposed schedulability estimation method, its analysis and evaluation. Comment: 6 pages, 3 figures, published in the Proceedings of the Symposium on Software Engineering at 21 th IASTED International Multi-Conference on Applied Informatics (AI 2003...|$|R
50|$|However, power {{consumption}} P by a chip {{is given by}} the equation P = C × V 2 × F, where C is the capacitance being switched per clock cycle (proportional {{to the number of}} transistors whose inputs change), V is voltage, and F is the <b>processor</b> <b>frequency</b> (cycles per second). Increases in frequency increase the amount of power used in a processor. Increasing processor {{power consumption}} led ultimately to Intel's May 8, 2004 cancellation of its Tejas and Jayhawk processors, which is generally cited as the end of frequency scaling as the dominant computer architecture paradigm.|$|E
50|$|In October 2001, Michael J. Mahon, an enthusiast who frequents the Apple II usenet {{newsgroup}} comp.sys.apple2, proposed overclocking the Apple IIc Plus. Over {{the next}} few years, newsgroup members reported speeds ranging between 8 MHz - 10 MHz simply by changing the 16 MHz crystal oscillator on the motherboard to a faster one (the Apple IIc Plus divides the oscillator frequency by four to attain the actual <b>processor</b> <b>frequency).</b> Some users with 120ns static RAM cache reported problems attaining 10 MHz while others with 100ns chips were more successful. Most were able to achieve 8 MHz.|$|E
50|$|The {{subthreshold}} swing {{is proportional}} to the transistor speed: The lower the subthreshold swing, the faster a transistor will be able to charge its fan-out (consecutive capacitive load). For a given transistor speed and a maximum acceptable subthreshold leakage, the subthreshold slope thus defines a certain minimal threshold voltage. Reducing the threshold voltage is an essential part for the idea of constant field scaling. Since 2003, the major technology developers got almost stuck in threshold voltage scaling and thus could also not scale supply voltage (which due to technical reasons has to be at least 3 times the threshold voltage for high performance devices). As a consequence, the processor speed did not develop as fast as before 2003 (see Beyond CMOS). The advent of a mass-producible TFET device with a slope far below 63 mV/decade will enable the industry to continue the scaling trends from the 1990s, where <b>processor</b> <b>frequency</b> doubled each 3 years.|$|E
40|$|Rare earth ions {{embedded}} in crystals are natural high-quality-factor resonators {{that can be}} used for processing optically-carried broadband radio-frequency signals. This chapter focuses on the radio-frequency spectrum analysis function and describes different architectures that are designed to reach tens of gigahertz instantaneous bandwidth with submegahertz resolution. Various approaches are considered. The active material may act as a spectral buffer memory. Instead one may store a processing function inside the crystal. The latter may then operate either as a frequency-to-angle converter or a frequency-to-time transformer. All those architectures have been explored experimentally. To meet the specific requirements of these <b>processors,</b> <b>frequency</b> agile lasers have been developed. These keynote devices are described in detail...|$|R
40|$|This paper {{presents}} an eco-friendly daemon that reduces {{power and energy}} consumption while better maintaining high performance via an accurate workload characterization that infers “processor stall cycles due to off-chip activities. ” The eco-friendly daemon is an interval-based, run-time algorithm that uses the workload characterization to dynamically adjust a <b>processor’s</b> <b>frequency</b> and voltage to reduce power and energy consumption with little impact on application performance. Using the NAS Parallel Benchmarks as our workload, we then evaluate our eco-friendly daemon on a cluster computer. The results indicate that our workload characterization allows the power-aware daemon to more tightly control performance (5 % loss instead of 11 %) while delivering substantial energy savings (11 % instead of 8 %). 1...|$|R
50|$|In 2000, IBM {{launched}} a refined version called IStar manufactured with a SOI fabrication process with copper interconnects, which increased the <b>processor's</b> clock <b>frequency</b> to 600 MHz. This {{was the first}} processor implemented in this process. Architecturally however, the IStar was identical to Pulsar.|$|R
30|$|In this section, {{the impact}} of <b>processor</b> <b>frequency</b> on the context switch {{overhead}} for static and dynamic frequency cases is discussed.|$|E
30|$|The voltage Vdrop {{across the}} {{processor}} increases {{with the rise}} of the <b>processor</b> <b>frequency</b> so that the power consumption increases with the frequency.|$|E
30|$|Processing time τ {{indicates}} that the <b>processor</b> <b>frequency</b> is not sufficient for the real-time processing and requires a four times more powerful processor. And {{in case of an}} even bigger matrix, a need in increased performance grows exponentially.|$|E
50|$|BogoMips is a {{value that}} can be used to verify whether the {{processor}} in question is in the proper range of similar processors, i.e. BogoMips represents a <b>processor's</b> clock <b>frequency</b> as well as the potentially present CPU cache. It is not usable for performance comparisons among different CPUs.|$|R
5000|$|... "Twin Turbo" [...] technology, which {{consists}} of dual PLLs, one set at a high clock speed, and the other set at a lower speed. This allows the <b>processor's</b> clock <b>frequency</b> to be adjusted in a single processor cycle. Lower switching latency means that more aggressive regulation can be employed.|$|R
40|$|Within-die {{parameter}} variation poses a {{major challenge}} to high-performance microprocessor design, negatively impacting a <b>processor’s</b> <b>frequency</b> and leakage power. Addressing this problem, this paper proposes a microarchitecture-aware model for process variation — including both random and systematic effects. The model is specified using {{a small number of}} highly-intuitive parameters. Using the variation model, this paper also proposes a framework to model timing errors caused by parameter variation. The model yields the failure rate of microarchitectural blocks as a function of clock frequency and the amount of variation. With the combination of the variation model and the error model, we have VARIUS, a comprehensive model that is capable of producing detailed statistics of timing errors as a function of different process parameters and operating conditions. We propose possible applications of VARIUS to microarchitectural research. ...|$|R
