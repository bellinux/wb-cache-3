117|16|Public
25|$|In {{relation}} to the game's graphics, he explained Call of Juarez was using {{a new version of}} Techland's own game engine, the Chrome Engine. The engine had last been used in Xpand Rally Xtreme, but since then, Techland had been working with nVidia to incorporate Shader Model 3.0. The enhanced version of the engine, Chrome Engine 3, also features per-pixel lighting, and rendering techniques such as normal mapping, <b>phong</b> <b>shading,</b> Blinn lighting, virtual displacement mapping, shadow mapping, HDR environment mapping, and post processing effects (such as enhanced depth-of-field, light blooms, refraction and heat distortion). The engine also facilitated multi-morph facial mimics, Shader Model 3.0-based simulation and animation of vegetation, fumes and smoke, changes in daytime and the position of global lighting, wind effects, rigid body dynamics, and alterations to object properties when interacting with liquids.|$|E
500|$|Day of Defeat: Source {{has been}} used by Valve as a {{platform}} for demonstrating several technologies in the Source engine. Day of Defeat: Source introduced a dynamic audio system that was limited to non-player characters in Half-Life 2. The sound of each weapon firing in-game is attributed with distance and occlusion variables, which are processed and then fed back to the player. Sounds far from the player lack higher frequencies and thus sound more like they naturally would, allowing for the actions of other players on a map to make up the ambient sounds for the level. The game was the first to incorporate Valve's high dynamic range rendering, predating the official demonstration, [...] Other effects were added post-release to make the game appear {{as if it were a}} World War II era film. The effects include motion blur, depth of field, film grain and color correction. <b>Phong</b> <b>shading</b> on the Source engine was added to Day of Defeat: Source with the major update in the second quarter of 2006.|$|E
2500|$|Bui Tuong Phong – {{computer}} scientist; {{inventor of}} the Phong reflection model and the <b>Phong</b> <b>shading</b> interpolation method ...|$|E
5000|$|Cyberspace by Autodesk was {{an early}} {{real-time}} 3D environment capable of producing basic <b>phong</b> <b>shaded</b> walkthroughs of DXF format models in [...] "realtime". No textures were supported, and the system was able to support a maximum DXF model size of around 35 KB. A popular demo model of the Parthenon in Greece was shown around the United States in {{a tour of the}} portable demo system - complete with virtual reality goggles.|$|R
5000|$|... #Caption: Vectors for calculating <b>Phong</b> and Blinn-Phong <b>shading</b> ...|$|R
40|$|We {{implement}} a tile based sort-middle rasterizer in CUDA and study its performance characteristics when {{used as a}} backend for adaptive tessellation down to micropolygons. Tessellation and bucketing map very well to the data-parallel paradigm of CUDA, {{and the majority of}} time is spent with rasterization. Despite this, our fastest implementation is able to reach 30 - 50 % of the hardware rasterization performance of an Nvidia GTX 280. Overall we are able to rasterize 4 M textured and <b>Phong</b> <b>shaded</b> microquads into a 1600 x 1200 framebuffer at 10 - 12 fps. Categories and Subject Descriptors (according to ACM CCS) : Generation—Graphics processors, Parallel processin...|$|R
5000|$|... #Caption: Example of {{flat shading}} vs. <b>Phong</b> <b>shading</b> interpolation. <b>Phong</b> <b>shading</b> {{is a more}} {{realistic}} shading technique, developed by Bui Tuong Phong in 1973.|$|E
50|$|<b>Phong</b> <b>shading</b> {{improves}} upon Gouraud shading {{and provides}} a better approximation of the shading of a smooth surface. <b>Phong</b> <b>shading</b> assumes a smoothly varying surface normal vector. The Phong interpolation method works better than Gouraud shading when applied to a reflection model that has small specular highlights such as the Phong reflection model.|$|E
5000|$|Phong {{reflection}} model - reflection model {{often used}} with <b>Phong</b> <b>shading</b> ...|$|E
40|$|We {{propose a}} highly {{efficient}} hierarchical representation for point sampled geometry that automatically balances sampling density and point coordinate quantization. The representation is very compact with a memory consumption of {{far less than}} 2 bits per point position which {{does not depend on}} the quantization precision. We present an efficient rendering algorithm that exploits the hierarchical structure of the representation to perform fast 3 D transformations and shading. The algorithm is extended to surface splatting which yields high quality anti-aliased and water tight surface renderings. Our pure software implementation renders up to 14 million <b>Phong</b> <b>shaded</b> and textured samples per second and about 4 million anti-aliased surface splats on a commodity PC. This is more than a factor 10 times faster than previous algorithms. 1...|$|R
40|$|This paper {{presents}} {{separation of}} specular and diffuse reflection components from an image pair. The proposed approach {{is based on}} the dichromatic reflectance model and Markov random field models. The proposed method estimates specular and diffuse components by minimizing observation color noise and prior potential of specular reflectance. The specular reflection component is modelled as an MRF and estimated in maximum a posteriori framework. This paper proposes likelihood term of specular component and the prior model of specular reflectance based on <b>Phong’s</b> <b>shading.</b> Some experiments show that the proposed approach separates the specular and diffuse reflection components effectively. The separated specular components can be utilized in image-based lighting which renders a scene with virtual lighting sources. Index Terms — color, reflection, Markov process, rendering 1...|$|R
40|$|In {{this paper}} {{we present a}} way to use OpenGL 1. 2 {{compliant}} graphics hardware for fast shading with textures containing detailed information about the normals of an object. The procedure is similar to bumpmaps and the goal is to shade a simplified mesh approximately the same way the original mesh is shaded. First, we explain how to implement a <b>Phong</b> <b>shaded</b> and lighted dot product bumpmap using a 2 D texture and special functions of graphics hardware. Secondly, we show a way to generate normal textures for the coarse mesh optimized by means of typical distances and orientations of the fine mesh. For almost regular meshes this results in smaller textures consuming less memory and bandwidth. These texture patches are then densely packed into one large texture granting fast rendering and easy use in scene graphs like Cosmo 3 d and OpenGL Optimizer. 1 Introduction In todays graphics applications like CAD and finite element (FE) visualization {{we have to deal with}} permanently increasing needs f [...] ...|$|R
5000|$|<b>Phong</b> <b>shading</b> - shading {{technique}} that interpolates normal vectors rather than intensities ...|$|E
50|$|<b>Phong</b> <b>shading</b> {{refers to}} an {{interpolation}} technique for surface shading in 3D computer graphics. It is also called Phong interpolation or normal-vector interpolation shading. Specifically, it interpolates surface normals across rasterized polygons and computes pixel colors based on the interpolated normals and a reflection model. <b>Phong</b> <b>shading</b> may also refer to the specific combination of Phong interpolation and the Phong reflection model.|$|E
5000|$|Bui Tuong Phong, Computer scientist, {{inventor}} of the Phong reflection model and the <b>Phong</b> <b>shading</b> model ...|$|E
40|$|A {{numerical}} {{method for}} solving three-dimensional free surface flows is presented. The technique {{is an extension}} of the GENSMAC code for calculating free surface flows in two dimensions. As in GENSMAC, the full Navier-Stokes equations are solved by a finite difference method; the fluid surface is represented by a piecewise linear surface composed of quadrilaterals and triangles containing marker particles on their vertices; the stress conditions on the free surface are accurately imposed; the conjugate gradient method is employed for solving the discrete Poisson equation arising from a velocity update; and an automatic time step routine is used for calculating the time step at every cycle. A program implementing these features has been interfaced with a solid modelling routine defining the flow domain. A user-friendly input data file is employed to allow almost any arbitrary three-dimensional shape to be described. The visualization of the results is performed using computer graphic structures such as <b>phong</b> <b>shade,</b> flat and parallel surfaces. Results demonstrating the applicability of this new technique for solving complex free surface flows, such as cavity filling and jet buckling, are presented...|$|R
40|$|Figure 1 : KinectFusion enables {{real-time}} detailed 3 D reconstructions {{of indoor}} scenes using only the depth {{data from a}} standard Kinect camera. A) user points Kinect at coffee table scene. B) <b>Phong</b> <b>shaded</b> reconstructed 3 D model (the wireframe frustum shows current tracked 3 D pose of Kinect). C) 3 D model texture mapped using Kinect RGB data with real-time particles simulated on the 3 D model as reconstruction occurs. D) Multi-touch interactions performed on any reconstructed surface. E) Real-time segmentation and 3 D tracking of a physical object. KinectFusion enables a user holding and moving a standard Kinect camera to rapidly create detailed 3 D reconstructions of an indoor scene. Only the depth data from Kinect is used to track the 3 D pose of the sensor and reconstruct, geometrically precise, 3 D models of the physical scene in real-time. The capabilities of KinectFusion, {{as well as the}} novel GPUbased pipeline are described in full. We show uses of the core system for low-cost handheld scanning, and geometry-aware augmented reality and physics-based interactions. Novel extension...|$|R
40|$|AbstractRecent {{growth in}} the shape-from-shading {{psychophysics}} literature has been paralleled by an increasing availability of computer graphics hardware and software, {{to the extent that}} most psychophysical studies in this area now employ computer lighting algorithms. The most widely used of these algorithms in shape-from-shading psychophysics is the Phong lighting model. This model, and other shading models of its genre, produce readily interpretable images of three-dimensional scenes. However, such algorithms are only approximations of how light interacts with real objects in the natural environment. Nevertheless, the results from psychophysical experiments using these techniques have been used to infer the processes underlying the perception of shape-from-shading in natural environments. It is important to establish whether this substitution is ever valid. We report a series of experiments investigating whether two recently reported illusions seen in computer-generated, <b>Phong</b> <b>shaded</b> images occur for solid objects under real illuminants. The two illusions investigated are three-dimensional curvature contrast and the illuminant-position effect on perceived curvature. We show that both effects do occur for solid objects, and that the magnitude of these effects are equivalent regardless of whether subjects are presented with ray traced or solid objects. Copyright © 1996 Elsevier Science Lt...|$|R
5000|$|... #Caption: A {{screenshot}} of Half-Life 2: Episode One. The high {{dynamic range}} rendering and <b>Phong</b> <b>shading</b> effects are evident.|$|E
5000|$|... #Caption: Alyx {{talks with}} the {{resistance}} leaders outside the Citadel. The new HDR rendering and <b>Phong</b> <b>shading</b> effects are visible.|$|E
50|$|Gouraud shading is {{considered}} superior to flat shading and requires significantly less processing than <b>Phong</b> <b>shading,</b> but usually {{results in a}} faceted look.|$|E
40|$|Surface splatting has {{developed}} into a valuable alternative to triangle meshes {{when it comes to}} rendering of highly detailed massive datasets. However, even highly accurate splat approximations of the given geometry may sometimes not provide a sufficient rendering quality since surface lighting mostly depends on normal vectors whose deviation is not bounded by the Hausdorff approximation error. Moreover, current point-based rendering systems usually associate a constant normal vector with each splat, leading to rendering results which are comparable to flat or Gouraud shading for polygon meshes. In contrast, we propose to base the lighting of a splat on a linearly varying normal field associated with it, and we show that the resulting Phong Splats provide a visual quality which is far superior to existing approaches. We present a simple and effective way to construct a Phong splat representation for a given set of input samples. Our surface splatting system is implemented completely based on vertex and pixel shaders of current GPUs and achieves a splat rate of up to 4 M <b>Phong</b> <b>shaded,</b> filtered, and blended splats per second. In contrast to previous work, our scan conversion is projectively correct per pixel, leading to more accurate visualization and clipping at sharp features. 1...|$|R
40|$|Abstract- The {{challenges}} in modeling 3 -D objects using facets and surface patches are investigated, and enhancement over the Gouraud’s and <b>Phong’s</b> interpolative <b>shading</b> is presented. The proposed enhancement provides means for estimating {{the depth of}} each pixel that leads to 3 -D interpolation and the calculation of range images for active sensors. Additional design issues in using Phong’s local reflection model and the ray tracing global reflection model are also discussed and suggested physics-based improvements are presented with illustrative examples. The proposed physics-based modeling requires lab and field measurements, modeling of sensor and atmospheric effects, and validation of simulated signatures against field measurements...|$|R
40|$|I {{wrote an}} {{application}} that renders {{a model of}} neck veins using OpenGL. I created a user interface for opening files containing model data, viewing the model from an arbitrary position, showing help or licencing information and choosing resolution. I implemented model rotation with a mouse as well as camera rotation and translation with a keyboard or a mouse. I wrote a parser for reading files with model's data that also calculates the distance from koordinate origin and positions the model. It also calculates the normals of the model and applies a subdivision surface algorithm when instructed to. For more efficient rendering I used buffer objects. I implemented <b>Phong</b> lighting and <b>shading</b> using shaders...|$|R
50|$|Unlike Gouraud shading, which interpolates colors across polygons, in <b>Phong</b> <b>shading</b> {{a normal}} vector is linearly {{interpolated}} {{across the surface}} of the polygon from the polygon's vertex normals. The surface normal is interpolated and normalized at each pixel and then used in a reflection model, e.g. the Phong reflection model, to obtain the final pixel color. <b>Phong</b> <b>shading</b> is more computationally expensive than Gouraud shading since the reflection model must be computed at each pixel instead of at each vertex.|$|E
5000|$|In <b>Phong</b> <b>shading,</b> {{one must}} {{continually}} recalculate the dot product [...] between a viewer (V) and the beam from a light-source (L) reflected (R) on a surface.|$|E
5000|$|... #Caption: Shaders {{are most}} {{commonly}} used to produce lighting and shadow in 3D modeling. The image above illustrates <b>Phong</b> <b>shading,</b> {{one of the first}} computer shading models ever developed.|$|E
5000|$|Utah {{was a major}} {{center for}} {{computer}} animation in this period. The computer science faculty was founded by David Evans in 1965, {{and many of the}} basic techniques of 3D computer graphics were developed here in the early 70s with ARPA funding (Advanced Research Projects Agency). Research results included Gouraud, <b>Phong,</b> and Blinn <b>shading,</b> texture mapping, hidden surface algorithms, curved surface subdivision, real-time line-drawing and raster image display hardware, and early virtual reality work. In the words of Robert Rivlin in his 1986 book The Algorithmic Image: Graphic Visions of the Computer Age, [...] "almost every influential person in the modern computer-graphics community either passed through the University of Utah or came into contact with it in some way".|$|R
40|$|The {{determination}} of characteristic cardiac parameters, such as displacement, {{stress and strain}} distribution are essential for {{an understanding of the}} mechanics of the heart. The calculation of these parameters has been limited until recently by the use of idealised mathematical representations of biventricular geometries and by applying simple material laws. On the basis of 20 short axis heart slices and in consideration of linear and nonlinear material behaviour we have developed a FE model with about 100, 000 degrees of freedom. Marching Cubes and <b>Phong's</b> incremental <b>shading</b> technique were used to visualise the three dimensional geometry. In a quasistatic FE analysis continuous distribution of regional stress and strain corresponding to the endsystolic state were calculated. Substantial regional variation of the Von Mises stress and the total strain energy were observed {{at all levels of the}} heart model. The results of both the linear elastic model and the model with a nonlinear material description (Mooney-Rivlin) were compared. While the stress distribution and peak stress values were found to be comparable, the displacement vectors obtained with the nonlinear model were generally higher in comparison with the linear elastic case indicating the need to include nonlinear effects...|$|R
40|$|Three {{dimensional}} (3 D) {{reconstruction of}} the tumor from medical images is an important operation in the medical field as it helps the radiologist in the diagnosis, surgical planning and biological research. Thus in this paper, we propose an effective and efficient approach to 3 D reconstruction of brain tumor and estimation of its volume from a set of two dimensional (2 D) cross sectional magnetic resonance (MR) images of the brain. In the first step, MR images are preprocessed {{to improve the quality}} of the image. Next, abnormal slices are identified based on histogram analysis and tumor on those slices is segmented using modified fuzzy c-means (MFCM) clustering algorithm. Next, the proposed enhanced shape based interpolation technique is applied to estimate the missing slices accurately and efficiently. Then, the surface mesh of the tumor is reconstructed by applying the marching cubes (MC) algorithm on a set of abnormal slices. The large number of triangles generated by the MC algorithm was reduced by our proposed mesh simplification algorithm to accelerate the rendering phase. Finally, rendering was performed by applying <b>Phong</b> lighting and <b>shading</b> model on the reconstructed mesh to add realism to the 3 D model of the tumor. The volume of the tumor was also computed to assist the radiologist in estimating the stage of the cancer. All experiments were carried out on MR image datasets of brain tumor patients and satisfactory results were achieved. Thus, our proposed method can be incorporated into the computer aided diagnosis (CAD) system to assist the radiologist in finding the tumor location, volume and 3 D information...|$|R
50|$|The School of Computing {{has made}} {{important}} contributions to computer graphics and computer animation. These contributions include: Gouraud shading, the Phong reflection model, the <b>Phong</b> <b>shading</b> method, and the rendering equation.|$|E
50|$|Before {{the advent}} of mass-marketed 3D {{acceleration}} hardware, democoders often focused on lighting and shading techniques in software 3D engines, including Gouraud shading, <b>Phong</b> <b>shading,</b> texture mapping, bump mapping, environment mapping, radiosity and even real-time ray tracing.|$|E
50|$|Phong was the {{inventor}} of the Phong reflection model and the <b>Phong</b> <b>shading</b> interpolation method, techniques widely used in computer graphics. He published the description of the algorithms in his 1973 PhD dissertation and a 1975 paper.|$|E
40|$|Diffraction and {{interference}} are optical {{phenomena that}} split light into its component wavelengths, hence producing a {{full spectrum of}} iridescent colors. This thesis develops computer graphics models for iridescent colors produced by diffractive media. ^ One of the requirements for diffraction is a surface that has periodically spaced grooves or obstructions; hence diffractive media tend to be manufactured parts such as diffraction gratings. A variety of apertures are known including rectangular and circular ones of both reflective and transmissive types. Certain animal skins and the crystal structure of some precious stones are also known to produce diffraction. ^ Diffraction is distinguished from a related phenomenon of interference that produces colorful effects due to the phase difference caused by a wave traversing thin media of different indices of refraction. Examples of interference are the soap bubble and oil slicks. Interference, unlike diffraction is more easily modeled using the ray theory of light. ^ In the optics literature, diffraction theory is treated under geometrical optics. Several techniques can be employed to derive solutions to this problem including: (1) Solutions derived by applying boundary value methods and consideration of the electromagnetic boundary conditions; (2) Solutions based on Huygens-Fresnel principle; (3) Kirchoff-Fresnel based solutions; (4) Solutions using fourier optics. ^ Thorman [53] first attempted to develop a simple computer graphics model for diffraction in 2 D by using the grating equation derived by applying electromagnetic boundary value methods. Stam [49] first attempted to develop a simple computer graphics model for diffraction in 2 D by using the grating equation derived by applying electromagnetic boundary value methods. Stam [49 has published work using Fourier optics solutions. Fourier optics solutions are believed to give the most accurate but also most complex solutions. No models using Huygens-Fresnel principle have been published. ^ This thesis derives a set of solutions based on the Huygens-Fresnel principle. The diffraction models developed extend well-known illumination models (such as <b>Phong</b> and Cook-Torrance <b>shading</b> models) and are incorporated into a ray tracer. A thorough discussion of ray tracing, our chosen rendering technique, as well as issues which arise in rendering our models, is also included. Extensive literature surveys and our results are presented. ...|$|R
50|$|The normal {{is often}} used in {{computer}} graphics to determine a surface's orientation toward a light source for flat shading, or the orientation {{of each of the}} corners (vertices) to mimic a curved surface with <b>Phong</b> <b>shading.</b>|$|E
5000|$|<b>Phong</b> <b>shading</b> {{is similar}} to Gouraud shading, except that instead of interpolating the light intensities, the normals are {{interpolated}} between the vertices. Thus, the specular highlights are computed much more precisely than in the Gouraud shading model: ...|$|E
