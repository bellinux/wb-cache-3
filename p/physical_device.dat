586|1603|Public
25|$|Each vdev {{that the}} user defines, is {{completely}} independent from every other vdev, so {{different types of}} vdev can be mixed arbitrarily in a single ZFS system. If data redundancy is required (so that data is protected against <b>physical</b> <b>device</b> failure), then this is ensured by the user when they organize devices into vdevs, either by using a mirrored vdev or a RaidZ vdev. Data on a single device vdev may be lost if the device develops a fault. Data on a mirrored or RaidZ vdev will only be lost if enough disks fail {{at the same time}} (or before the system has resilvered any replacements due to recent disk failures). A ZFS vdev will continue to function in service if it is capable of providing at least one copy of the data stored on it, although it may become slower due to error fixing and resilvering, as part of its self-repair and data integrity processes. However ZFS is designed to not become unreasonably slow due to self-repair (unless directed to do so by an administrator) since one of its goals is to be capable of uninterrupted continual use even during self checking and self repair.|$|E
500|$|Many copiers—utilities to copy {{programs}} from audio tape to another tape, microdrive tapes, {{and later on}} diskettes—were available for the Spectrum. As a response to this, publishers introduced copy protection measures to their software, including different loading schemes. [...] Other methods for copy prevention were also used including asking for a particular word from the documentation included with the game—often a novella such as the Silicon Dreams trilogy—or another <b>physical</b> <b>device</b> distributed with the software—e.g. Lenslok as used in Elite, or the colour-code chart included with Jet Set Willy. Special hardware, such as Romantic Robot's Multiface, was able to dump {{a copy of the}} ZX Spectrum RAM to disk/tape at the press of a button, entirely circumventing the copy protection systems.|$|E
2500|$|... monitor: A <b>physical</b> <b>device</b> {{such as a}} CRT or a {{flat screen}} {{computer}} display.|$|E
5000|$|... {{channels}} {{correspond to}} <b>physical</b> <b>devices.</b> e.g. card punches and printers.|$|R
5000|$|There {{are many}} types of <b>physical</b> <b>devices</b> that can act as inertia dampers: ...|$|R
30|$|Notification {{events from}} <b>physical</b> <b>devices</b> or context {{providers}} {{are involved in}} the application flow.|$|R
2500|$|The {{physical}} devices used by ZFS (such as {{hard drives}} (HDDs) and SSDs) are organized into vdevs ("virtual devices") before {{being used to}} store data. [...] The vdev {{is an essential part}} of ZFS resilience, since it provides redundancy against <b>physical</b> <b>device</b> failure within ZFS. Therefore, it is easiest to describe ZFS physical storage by first looking at vdevs.|$|E
2500|$|Despite {{superficial}} {{similarities to}} software licenses, most hardware licenses are fundamentally different: by nature, they typically rely {{more heavily on}} patent law than on copyright law, as many hardware designs are not copyrightable. Whereas a copyright license may control {{the distribution of the}} source code or design documents, a patent license may control the use and manufacturing of the <b>physical</b> <b>device</b> built from the design documents. This distinction is explicitly mentioned in the preamble of the TAPR Open Hardware License: ...|$|E
2500|$|In November 2010, Adafruit Industries {{offered a}} bounty for an {{open-source}} driver for Kinect. Microsoft initially voiced its disapproval of the bounty, stating that it [...] "does not condone the modification of its products" [...] {{and that it}} had [...] "built in numerous hardware and software safeguards designed to reduce the chances of product tampering". This reaction, however, was caused by a misunderstanding within Microsoft, and the company later clarified its position, claiming that while it does not condone hacking of either the <b>physical</b> <b>device</b> or the console, the USB connection was left open by design.|$|E
5000|$|Possible to {{integrate}} with different <b>physical</b> <b>devices</b> - proximity sensors, speakers, printers and others; ...|$|R
5000|$|... how {{algorithms}} can be {{boosted by}} special purpose <b>physical</b> <b>devices</b> acting as [...] "oracles"; ...|$|R
50|$|Controlling {{sound or}} music {{features}} of <b>physical</b> <b>devices</b> (CD-players, PC-based systems, microwave ovens, doorbells, etc.).|$|R
2500|$|Before {{the advent}} of the {{microprocessor}} and software based design tools, analog ICs were designed using hand calculations and process kit parts. These ICs were low complexity circuits, for example, op-amps, usually involving no more than ten transistors and few connections. An iterative trial-and-error process and [...] "overengineering" [...] of device size was often necessary to achieve a manufacturable IC. Reuse of proven designs allowed progressively more complicated ICs to be built upon prior knowledge. When inexpensive computer processing became available in the 1970s, computer programs were written to simulate circuit designs with greater accuracy than practical by hand calculation. The first circuit simulator for analog ICs was called SPICE (Simulation Program with Integrated Circuits Emphasis). Computerized circuit simulation tools enable greater IC design complexity than hand calculations can achieve, making the design of analog ASICs practical. The computerized circuit simulators also enable mistakes to be found early in the design cycle before a <b>physical</b> <b>device</b> is fabricated. Additionally, a computerized circuit simulator can implement more sophisticated device models and circuit analysis too tedious for hand calculations, permitting Monte Carlo analysis and process sensitivity analysis to be practical. The effects of parameters such as temperature variation, doping concentration variation and statistical process variations can be simulated easily to determine if an IC design is manufacturable. Overall, computerized circuit simulation enables a higher degree of confidence that the circuit will work as expected upon manufacture.|$|E
2500|$|The Gibbs {{phenomenon}} {{was first}} noticed and analyzed by Henry Wilbraham in a 1848 paper. The paper attracted little attention until 1914 {{when it was}} mentioned in Heinrich Burkhardt's review of mathematical analysis in Klein's encyclopedia. In 1898, Albert A. Michelson developed a device that could compute and re-synthesize the Fourier series. A widespread myth says that when the Fourier coefficients for a square wave were input to the machine, the graph would oscillate at the discontinuities, and that {{because it was a}} <b>physical</b> <b>device</b> subject to manufacturing flaws, Michelson was convinced that the overshoot was caused by errors in the machine. In fact the graphs produced by the machine were not good enough to exhibit the Gibbs phenomenon clearly, and Michelson may not have noticed it as he made no mention of this effect in his paper [...] about his machine or his later letters to Nature. [...] Inspired by some correspondence in Nature between Michelson and Love about the convergence of the Fourier series of the square wave function, in 1898 J. Willard Gibbs published a short note in which he considered what today would be called a sawtooth wave and pointed out the important distinction between the limit of the graphs of the partial sums of the Fourier series, and the graph of the function that is the limit of those partial sums. [...] In his first letter Gibbs failed to notice the Gibbs phenomenon, and the limit that he described for the graphs of the partial sums was inaccurate. [...] In 1899 he published a correction in which he described the overshoot at the point of discontinuity (Nature: April 27, 1899, p.606). In 1906, Maxime Bôcher gave a detailed mathematical analysis of that overshoot, coining the term [...] "Gibbs phenomenon" [...] and bringing the term into widespread use.|$|E
50|$|The term {{doorbell}} interrupt {{is usually}} a misnomer. It's similar to an interrupt, because it causes some {{work to be done}} by the device; however, the doorbell region is sometimes implemented as a polled region, sometimes the doorbell region writes through to <b>physical</b> <b>device</b> registers, and sometimes the doorbell region is hardwired directly to <b>physical</b> <b>device</b> registers. When either writing through or directly to <b>physical</b> <b>device</b> registers, this may cause a real interrupt to occur at the device's central processor unit (CPU), if it has one.|$|E
50|$|A few prototypes of RaaS {{have been}} implemented, which include both Web {{interface}} and <b>physical</b> <b>devices.</b>|$|R
2500|$|In many <b>physical</b> <b>devices,</b> 1 {{represents}} the value for [...] "on", {{which means that}} electricity is flowing.|$|R
50|$|The Internet of things (IoT) is the inter-networking of <b>physical</b> <b>devices,</b> embedded with electronics, software, sensors, actuators, and network connectivity which enable {{these objects}} {{to collect and}} exchange data.|$|R
5000|$|One <b>physical</b> <b>device</b> may {{correspond}} to one function number, for example [...] "29 Isolating Contactor", {{or a single}} <b>physical</b> <b>device</b> may have many function numbers associated with it, such as a numerical protective relay. Suffix and prefix letters may be added to further specify the purpose and function of a device.|$|E
5000|$|... {{almost any}} system {{operation}} eventually maps to some <b>physical</b> <b>device</b> ...|$|E
5000|$|... monitor: A <b>physical</b> <b>device</b> {{such as a}} CRT or a {{flat screen}} {{computer}} display.|$|E
5000|$|In many <b>physical</b> <b>devices,</b> 1 {{represents}} the value for [...] "on", {{which means that}} electricity is flowing.|$|R
30|$|In {{the view}} of devices perspective, the {{researches}} cover two themes: (1) <b>physical</b> <b>devices</b> and (2) device interfacing.|$|R
5000|$|... striped stripes {{the data}} across <b>physical</b> <b>devices,</b> {{with the number}} of stripes and the {{striping}} chunk size as parameters ...|$|R
5000|$|Storage of the {{encryption}} keys on {{an external}} <b>physical</b> <b>device</b> (smart card) for improved security.|$|E
5000|$|For an {{electronic}} device (or other <b>physical</b> <b>device)</b> that converts a quantity to another quantity, Bertram S. Kolts writes: ...|$|E
5000|$|... thin [...] allows {{creation}} of devices {{larger than the}} underlying <b>physical</b> <b>device,</b> physical space is allocated only when written to ...|$|E
50|$|Since mental {{states are}} {{identified}} by a functional role, they {{are said to}} be realized on multiple levels; in other words, they are able to be manifested in various systems, even perhaps computers, so long as the system performs the appropriate functions. While computers are <b>physical</b> <b>devices</b> with electronic substrate that perform computations on inputs to give outputs, so brains are <b>physical</b> <b>devices</b> with neural substrate that perform computations on inputs which produce behaviors.|$|R
30|$|The <b>physical</b> <b>devices</b> {{providing}} a binary {{monitoring and control}} interface for circuit breakers and switches are called Switchgear Control Unit (SCU).|$|R
5000|$|Platform model (used {{to model}} the <b>physical</b> <b>devices</b> that are {{intended}} to host the application and how they interact with each other) ...|$|R
50|$|In electronics, a {{logic gate}} is an {{idealized}} or <b>physical</b> <b>device</b> implementing a Boolean function; that is, it performs a logical operation {{on one or}} more binary inputs and produces a single binary output. Depending on the context, the term may refer to an ideal logic gate, one that has for instance zero rise time and unlimited fan-out, or it may refer to a non-ideal <b>physical</b> <b>device</b> (see Ideal and real op-amps for comparison).|$|E
5000|$|The pointer is an onscreen {{symbol that}} {{represents}} movement of a <b>physical</b> <b>device</b> that the user controls to select icons, data elements, etc.|$|E
50|$|In reverse, the DOSBox and Fake86 emulators {{allow to}} emulate {{presence}} of Covox (as Disney Sound Source) on a machine without such <b>physical</b> <b>device</b> connected.|$|E
40|$|Most of {{the current}} {{research}} on distributed diagnosis in and for multiagent systems focuses on diagnosis of coordination failures. Proposed approaches for this problem are not efficient for diagnosing failures in <b>physical</b> <b>devices.</b> This paper proposes algorithms for distributed troubleshooting of <b>physical</b> <b>devices</b> and processes. The consequences of using distributed representation of the knowledge, ATMS, and distributed reasoning are discussed and algorithms are proposed {{to deal with the}} occurrence of conflicts and the computation of the set of candidate diagnosis...|$|R
50|$|Abandonware may be {{computer}} software or <b>physical</b> <b>devices</b> {{which are usually}} computerised in some fashion, such as personal computer games, productivity applications, utility software, or mobile phones.|$|R
50|$|In {{the context}} of Hardware Freedom Day, the term open {{hardware}} encompasses <b>physical</b> <b>devices</b> whose design can beshared in public without restriction and freely modified and re-distributed.|$|R
