18|238|Public
50|$|DPI {{may be used}} by {{enterprise}} for Data Leak Prevention (DLP). When {{an e-mail}} user tries to send a <b>protected</b> <b>file</b> the user may be given {{information on how to}} get the proper clearance to send the file.|$|E
50|$|Windows Resource Protection applies stricter {{measures}} to protect files. As a result, Windows File Protection is not available under Windows Vista. In order to replace any single <b>protected</b> <b>file,</b> Windows File Protection had to be disabled completely; Windows Resource Protection works on a per-item basis by setting ACLs. Therefore, by taking ownership of any single item, that particular item can be replaced, while other items remain protected.|$|E
50|$|Windows Home Server 2011, code named Vail, {{is a home}} server {{operating}} system by Microsoft designed for small office/home offices and homes with multiple connected PCs to offer <b>protected</b> <b>file</b> storage, file sharing, automated PC backup, remote access, and remote control of PC desktops. It was released on 6 April 2011 following the release of Power Pack 3 for its aging predecessor, Windows Home Server. Windows Home Server 2011 is the last Windows Home Server release and was succeeded by Windows Server 2012 Essentials.|$|E
2500|$|Music Playback3: MP3, WMA (non <b>protected</b> <b>files),</b> WAV, OGG, FLAC ...|$|R
5000|$|Adobe ADEPT, a hosted {{service for}} <b>protecting</b> <b>files</b> viewed with Adobe Digital Editions.|$|R
5000|$|Support of Adobe DRM, {{including}} {{the management of}} ID and password <b>protected</b> <b>files</b> ...|$|R
50|$|Functionally, {{the purpose}} of QTFairUse is to convert {{protected}} audio files (.m4p extension) purchased from Apple's iTunes Store into M4a files, without DRM. To accomplish this task it uses a rather uncommon approach: instead of removing the already present DRM, it waits for iTunes to play back the <b>protected</b> <b>file</b> and intercepts the unencrypted AAC data stream as it {{is sent to the}} sound card. During this process, it copies unencrypted data, frame-by-frame, into RAM and then inserts it into a new MP4 container that is free of any DRM.|$|E
50|$|Encryption {{solutions}} will encrypt {{the code}} instructions and typically use a multi-layered defense mechanism against any reversing or tampering attempts that target the decryption code directly. Most protection systems {{in this category}} encrypt the code and then decrypt it at the application’s startup or during runtime. This is the moment at which an attacker will breakpoint, reverse, and inject custom code. Runtime decryption may also add significant processing overhead and lower the game's framerate. Alternatively, some solutions focus on obfuscating the code by inserting jump statements and seemingly random instruction paths. The final and strongest alternative is virtualization. In this approach the encrypted code runs on a virtual CPU that can be markedly different from generic x86 and x64 CPUs as the command set can be unique for each <b>protected</b> <b>file.</b>|$|E
50|$|WRP also protects several {{critical}} folders. A folder containing only WRP-protected files may {{be locked}} {{so that only}} the trusted installer is able to create files or subfolders in the folder. A folder may be partially locked to enable administrators to create files and subfolders in the folder. Essential registry keys installed by Windows Vista are also protected. If a key is protected by WRP, all its sub-keys and values can be protected. Also, WRP copies only those files that are needed to restart Windows to the cache directory located at %WinDir%\WinSxS\Backup. Critical files that are not needed to restart Windows are not copied to the cache directory, unlike Windows File Protection which cached the entire set of <b>protected</b> <b>file</b> types in the Dllcache folder. The size of the cache directory and the list of files copied to cache cannot be modified.|$|E
5000|$|... void write_to_file (const std::string & message) { // mutex to <b>protect</b> <b>file</b> access (shared across threads) static std::mutex mutex; ...|$|R
5000|$|WMA Standard up to 384 kbit/s (DRM <b>protected</b> <b>files</b> can {{be played}} only if {{purchased}} from the Zune Marketplace) ...|$|R
5000|$|... iVolume is {{incapable}} of processing <b>protected</b> <b>files</b> purchased via the iTunes Music Store and, for these files, only the built-in iTunes Sound Check volume adjustments {{can be used by}} them.|$|R
50|$|Selective content {{poisoning}} (also {{known as}} proactive or discriminatory content poisoning) attempts to detect copyright violators while allowing legitimate users {{to continue to}} enjoy the service provided by an open P2P network. The protocol identifies a peer with its endpoint address while the file index format is changed to incorporate a digital signature. A peer authentication protocol can then establish the legitimacy of a peer when she downloads and uploads files. Using identity based signatures, the system enables each peer to identify infringing users {{without the need for}} communication with a central authority. The protocol then sends poisoned chunks to these detected users requesting a copyright <b>protected</b> <b>file</b> only. If all legitimate users simply deny download requests from known infringers, the latter can usually accumulate clean chunks from colluders (paid peers who share content with others without authorization). However, this method of content poisoning forces illegitimate users to discard even clean chunks, prolonging their download time.|$|E
5000|$|Audacity - Designed as audio editing software, Audacity {{can be used}} {{to create}} glitch art. By {{importing}} and exporting raw image data as “U-Law” or “A-Law,” one can use Audacity to manipulate an image by applying various filters and effects. The best image file types to use for this method are “.TIF” and “.RAW”, as these are uncompressed formats. Other file types normally contain data which acts as a specifier, letting the computer program know what the file is. If this data becomes corrupted the image will {{no longer be able to}} be read by the computer. If the artist wishes to use a <b>protected</b> <b>file</b> type such as “.BMP” one method to circumvent file corruption is to skip about halfway through the data and only add effects to areas past this point since protective code is always found at the beginning of the files data. The audacity method of glitching is considered to be “organic” glitching, which means the effects generate random visuals within the image. Since this is still something that is fairly unexplored, it is hard to say for sure if there is any way to control the effects but there is some aspect to it which can be controlled. For example, adding reverb will always produce color changes and using a “wah wah” effect will create a wavy visual within the image.|$|E
40|$|Abstract. Since 1998, the {{proceedings}} of Fusion Energy Conferences (FECs) are being published electronically on CD-ROM and the Internet. Therefore, for publication in {{the proceedings}}, authors must submit their papers in electronic format via our web browser based, password <b>protected</b> <b>file</b> submission system, called LIS...|$|E
50|$|An XML External Entity (XXE) {{attack is}} a type of {{computer}} security vulnerability typically found in Web applications. XXE enables attackers to disclose normally <b>protected</b> <b>files</b> from a server or connected network.|$|R
5000|$|OfficeSuite Pro is {{compatible}} {{with all of the}} above and is able to print, convert PDF to Word, Excel, ePUB, save as PDF and could create password <b>protected</b> <b>files.</b> It has track changes option.|$|R
5000|$|Access {{groups to}} <b>protect</b> <b>files</b> and {{sections}} (pages) {{are created by}} site owners, and can either be local to a particular website, or they can refer to an LDAP source (including recursive resolution of nested groups) ...|$|R
40|$|Insider {{attack is}} one of the most serious {{cybersecurity}} threats to corporate America. Among all insider threats, information theft is considered the most damaging in terms of potential financial loss. Moreover, it is also especially difficult to detect and prevent, because in many cases the attacker has the proper authority to access the stolen information. According to the 2003 CSI/FBI Computer Crime and Security Survey, theft of proprietary information was the single largest category of losses in the 2003 survey totaling $ 70. 1 million or 35 % of the total financial loss reported in that survey. In this paper, we describe the design, implementation and evaluation of an industrial-strength solution called Display-Only File Server (DOFS), which can transparently and effectively stop information theft by insiders in most cases, even if the insiders have proper authorities to read/write the protected information. The DOFS architecture ensures that bits of a <b>protected</b> <b>file</b> never leave a DOFS server after the file is checked in and users can still interact with the protected files in the same way as if it is stored locally. Essentially, DOFS decouples “display access ” from other types of accesses to a <b>protected</b> <b>file</b> by providing users only the “display image ” rather than the bits of the files, and applies the thin-client computing model on existing client-server applications...|$|E
30|$|Traditionally, the {{authentication}} process only verifies {{the identity}} of a user once at login or sign-on. Afterward, the assumption is that the system remains {{under the control of the}} same authenticated user. This authentication mechanism is fairly secure for one-time applications, such as accessing a <b>protected</b> <b>file</b> or withdrawing money from an automatic banking machine. However, there is a security threat if an unauthorized user takes over the session after the legitimate user successfully logged in. A facial presence monitoring system was developed in our previous work to verify the user's identity throughout the entire session [5].|$|E
40|$|Abstract. Since 1998, the {{proceedings}} of Fusion Energy Conferences (FECs) are being published electronically on CD-ROM and the Internet. Therefore, for publication in {{the proceedings}}, authors must submit their papers in electronic format via our web browser based, password <b>protected</b> <b>file</b> submission system, called LISA (Lightweight Interactive Storage Application for the Collection of Conference Contributions). LISA was developed in 2000 and further improved in 2002 to help authors to submit their conference contributions in appropriate electronic format. Portable Document Format (PDF) will be the required format for submission of contributions. In exceptional cases, when an author {{is not able to}} produce a usable file in PDF, Postscript (PS) format will also be accepted. No other formats will be accepted. This paper describes the required layout for the full manuscripts, gives examples of how to convert them to PDF or PS format, and tells how to submit them electronically through LISA. LISA will be operational for electronic submission of full manuscripts fro...|$|E
5000|$|The DCF {{standard}} defines {{that the}} [...] "Read Only" [...] file and directory attribute of FAT file {{systems can be}} used to <b>protect</b> <b>files</b> or directories from accidental deletion. Other existing attributes don't have any specially defined usage in DCF.|$|R
50|$|OverDrive {{has entered}} into {{partnerships}} with technology companies including Adobe Systems, Microsoft, Mobipocket, and Nokia. In 2008, Adobe and OverDrive jointly announced that OverDrive {{would be the}} co-developer and operator of Adobe ADEPT, a hosted DRM service to <b>protect</b> <b>files</b> viewed with Adobe Digital Editions.|$|R
50|$|Windows Vista {{and later}} Windows systems {{do not include}} Windows File Protection, but they include Windows Resource Protection which <b>protects</b> <b>files</b> using ACLs. Windows Resource Protection aims to protect core {{registry}} keys and values and prevent potentially damaging system configuration changes, besides operating system files.|$|R
40|$|This paper {{presents}} Keypad, an auditing {{file system}} for theftprone devices, such as laptops and USB sticks. Keypad provides two important properties. First, Keypad supports finegrained file auditing: a user can obtain explicit evidence that no files have been accessed after a device’s loss. Second, a user can disable future file access after a device’s loss, {{even in the}} absence of device network connectivity. Keypad achieves these properties by weaving together encryption and remote key storage. By encrypting files locally but storing encryption keys remotely, Keypad requires the involvement of an audit server with every <b>protected</b> <b>file</b> access. By alerting the audit server to refuse to return a particular file’s key, the user can prevent new accesses after theft. We describe the Keypad architecture, a prototype implementation on Linux, and our evaluation of Keypad’s performance and auditing fidelity. Our results show that Keypad overcomes the challenges posed by slow networks or disconnection, providing clients with usable forensics and control for their (increasingly) missing mobile devices...|$|E
30|$|The {{security}} {{and protection of}} identifiable data have been an absolute priority in this study. Collection and linkage of identifiable data are being retained within secure infrastructure, to ensure the privacy of individuals. Data for women who gave birth at CH and were diagnosed with GDM {{have been identified in}} the CHCC and exported into a password <b>protected</b> <b>file.</b> This data includes the maternal first name and surname, maternal date of birth, infant date of birth, Medicare Number and GDM ICD code. This file has been sent to the Queensland Health Statistics Unit to securely provide relevant MPDC pregnancy and birth details, and to the private laboratories to provide T 2 DM glucose screening and diagnostic data. Separate worksheets have been developed for (1) Maternal details, with one record for each mother, including GP details for follow-up, (2) Pregnancy and birth details, with one record for each pregnancy, (3) Babies details, with one record for each baby, and (4) Postpartum screening details, with one record per screening test.|$|E
40|$|Abstract—There is an {{increased}} interest, by content creators and owners, in content protection systems {{that provide the}} ability to control or restrict the content that can be shared on peer-to-peer file sharing systems. Some content protection systems have been proposed for centralized peer-to-peer systems (such as Napster) where a central authority controls all indexing and querying. These systems cannot be applied to decentralized peer-to-peer systems since they rely on a central server. Also, such systems limit the ability of end-users to effectively share content and can make the peer-topeer distribution model resemble a client-server model in many respects. In this paper, we propose CITADEL, a novel content protection architecture designed to operate in decentralized peer-to-peer systems (such as Gnutella). CITADEL enforces a range of protection policies while maintaining an open peer-to-peer distribution model. CITADEL builds a <b>protected</b> <b>file</b> sharing environment over a normal peer-to-peer network using secured content objects and file sharing software enhanced to perform protection operations. A flexible content importation system that is part of CITADEL allows all users to insert new content as well as additional copies of protected content. I...|$|E
5000|$|... File Retention: Auto-delete files {{based on}} dates or events - Version Automator: Automatically keep file {{versions}} up-to-date - Lock Box: Multiple individuals deposit files {{accessible only by}} the Virtual Vault owner - Drop Box: Deposit documents with instant notification for a group to view - Deep Freeze: Permanently <b>protect</b> <b>files</b> from being altered or removed ...|$|R
5000|$|In 2004, Microsoft {{created an}} MSN Music {{download}} store {{to compete with}} Apple's iTunes Music Store, though its sales in comparison were negligible. The store utilized Microsoft's Windows Media Player application and proprietary Windows Media Format <b>files</b> (<b>protected</b> [...]wma <b>files).</b>|$|R
5000|$|EncFS is {{probably}} safe {{as long as}} the adversary only gets one copy of the ciphertext and nothing more. EncFS is not safe if the adversary has the opportunity to see two or more snapshots of the ciphertext at different times. EncFS attempts to <b>protect</b> <b>files</b> from malicious modification, but there are serious problems with this feature.|$|R
40|$|Control {{of access}} to {{information}} based on temporal attributes has many potential applications. Examples include student user accounts set to expire upon graduation; files marked as time-sensitive so that their contents can be protected appropriately and the period {{of access to}} them controlled; and cryptographic keys configured to automatically expire and be unusable beyond a specific time. This thesis implements a prototype of the Time Interval Access Control (TIAC) model {{in the context of}} a <b>protected</b> <b>file</b> system for the popular open-source Linux operating system. The Linux Security Module framework is used for the implementation, which includes temporal attributes associated both with the files and the users. The implementation includes modifications to the file system as well as low-level information access constructs. As part of the design process, testing and performance analysis were conducted. Since the temporal access control mechanism is built into the kernel rather than the application, bypassing the mechanism becomes more difficult. Kernel level implementation also affords the same policy enforcement functionality to different applications, thus reducing human errors in their development. This thesis is relevant to the research on dynamic security services for information protection envisioned by the DoD Global Information Grid (GIG) ...|$|E
40|$|Passwords {{have the}} {{distinction}} of being the most widely-used form of authentication—and the most vulnerable. With the dramatic increase today in the number of accounts that require passwords, overwhelmed users usually resort to creating weak passwords or reusing the same password for multiple accounts, thus making passwords the weakest link in the chain of security. It has been recognized that instead of solely relying on their memory for passwords, users can take advantage of technology. One such technology is a password management application, which enables a user to create and store multiple passwords in a strongly <b>protected</b> <b>file</b> and then retrieve them as necessary, thus alleviating the need to memorize numerous passwords. However, few users have chosen to take advantage these applications. Is it because users have rejected them as poor solutions, or because they were unaware of these applications and their potential benefits? Would users be more favorable towards password management applications after they received training about these applications and then used them? And what limitations of these applications could be addressed to foster more widespread use? To date no studies have provided training to users regarding these applications prior to surveying their reactions to determine if indeed these applications are suitable for the average user. This paper describes a study regarding user’s training, use, and perceptions of a password management application...|$|E
40|$|This paper {{describes}} an efficient and elegant architecture for unifying the meta-data protection of journaling file systems {{with the data}} integrity protection of collision -resistant cryptographic hashes. Traditional file system journaling protects the ordering of meta-data operations to maintain consistency {{in the presence of}} crashes. However, journaling does not protect important system meta-data and application data from modification or misrepresentation by faulty or malicious storage devices. With the introduction of both storage-area networking and increasingly complex storage systems into server architectures, these threats become an important concern. This paper presents the <b>protected</b> <b>file</b> system (PFS), a file system that unifies the meta-data update protection of journaling with strong data integrity. PFS computes hashes from file system blocks and uses these hashes to later verify the correctness of their contents. Hashes are stored within a system log, apart from the blocks they describe, but potentially on the same storage system. The write-ahead logging (WAL) protocol and the file system buffer cache are used to aggregate hash writes and allow hash computations and writes to proceed in the background. PFS does not require the sharing of secrets between the operating system and the storage system nor the deployment of any special cryptographic firmware or hardware. PFS is an end-to-end solution and will work with any block-oriented device, from a disk drive to a monolithic RAID system, without modification. ...|$|E
5000|$|User account access {{controls}} and cryptography can <b>protect</b> systems <b>files</b> and data, respectively.|$|R
25|$|When {{music or}} video {{purchased}} through the iTunes Store is copied from an iPod, {{it will only}} play on computers that are authorized with the account {{that was used to}} purchase them. Several third party utilities can remove this limitation by stripping iTunes DRM from <b>protected</b> <b>files.</b> The legality of using such software in the United States is the subject of active debate.|$|R
5000|$|C - Copy <b>Files</b> P - <b>Protect</b> <b>Files</b> D - Duplicate Disk Q - Quit to DOS XL E - Erase Files R - Rename File F - Files on Disk S - Save Binary G - Go to Address T - To Cartridge I - Initialize Disk U - Unprotect Files L - Load Binary X - Xtended Command ...|$|R
