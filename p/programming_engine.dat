40|619|Public
5|$|To {{accomplish}} just-in-time weaving, {{a change}} to the virtual machine that executes the compiled bytecode is necessary. A proposed solution for AspectJ uses a layered approach which builds upon the existing Java Virtual Machine to add support for join point management and callbacks to a Dynamic Aspect-Oriented <b>Programming</b> <b>Engine.</b> An alternative implementation uses a weaving engine that uses breakpoints to halt execution at the pointcut, select an appropriate method, embed it into the application, and continue. The use of breakpoints in this manner {{has been shown to}} reduce performance due to {{a very large number of}} context switches.|$|E
2500|$|In 2015, the Volkswagen {{emissions}} scandal involved revelations that Volkswagen AG had deliberately falsified emission {{reports by}} <b>programming</b> <b>engine</b> management unit firmware to detect test conditions, and change emissions controls when under test. The cars thus passed the test, but {{in real world}} conditions, emitted up to forty times more [...] emissions than allowed by law. An independent report in September 2015 warned that this extended to [...] "every major car manufacturer", with BMW, and Opel named alongside Volkswagen and its sister company Audi as [...] "the worst culprits", and that approximately 90% of diesel cars [...] "breach emissions regulations". [...] Overlooking the direct responsibility of the companies involved, the authors blamed the violations {{on a number of}} factors, including [...] "unrealistic test conditions, a lack of transparency and a number of loopholes in testing protocols".|$|E
5000|$|LiveBlox Graphics <b>programming</b> <b>engine,</b> with audio, video, {{computer}} vision that can export standalone applications ...|$|E
50|$|Pratt & Whitney faced {{enormous}} {{difficulties with}} the JT9D design during the Boeing 747 test <b>program.</b> <b>Engine</b> failures during the flight test program resulted in thirty aircraft being parked outside the factory with concrete blocks {{hanging from the}} pylons, awaiting redesigned engines.|$|R
50|$|FADEC {{not only}} {{provides}} for efficient engine operation, {{it also allows}} the manufacturer to <b>program</b> <b>engine</b> limitations and receive engine health and maintenance reports. For example, to avoid exceeding a certain engine temperature, the FADEC can be programmed to automatically take the necessary measures without pilot intervention.|$|R
50|$|Following orbital insertion, Soyuz TMA-08M {{immediately}} began rendezvous operations. On the first orbit, the spacecraft executed {{its first two}} <b>programmed</b> <b>engine</b> burns. On the second orbit, actual orbital parameters were transmitted from a Russian ground site. With these parameters, Soyuz performed eight further rendezvous burns {{over the next five}} hours of flight.|$|R
50|$|The core <b>programming</b> <b>engine</b> is {{supplemented}} with hard-coded Visual Basic objects. Like JavaScript Brutus2D is object based. Almost all functions (methods) {{are part of}} a related object that does a specific task.|$|E
50|$|To {{accomplish}} just-in-time weaving, {{a change}} to the virtual machine that executes the compiled bytecode is necessary. A proposed solution for AspectJ uses a layered approach which builds upon the existing Java Virtual Machine to add support for join point management and callbacks to a Dynamic Aspect-Oriented <b>Programming</b> <b>Engine.</b> An alternative implementation uses a weaving engine that uses breakpoints to halt execution at the pointcut, select an appropriate method, embed it into the application, and continue. The use of breakpoints in this manner {{has been shown to}} reduce performance due to {{a very large number of}} context switches.|$|E
5000|$|Masters '98: Haruka Naru Augusta (...) is a {{golf game}} for the Nintendo 64. It was {{licensed}} by Augusta National Golf Club and released only in Japan in 1997. It {{is one of three}} Nintendo 64 Japanese exclusive golf releases, the others being Eik≈ç no Saint Andrews and the 64DD Japan Pro Golf Tour 64. It is a continuation of T&E Soft golf series and the first golf {{game for the}} Nintendo 64, it was followed by the release of Waialae Country Club: True Golf Classics in 1998, although each used much of the same <b>programming</b> <b>engine</b> the locations and courses themselves are completely different. T&E had previously released a game based on Augusta National as part of their New 3D Golf Simulation (True Golf Classics outside Japan) series.|$|E
50|$|On 19 December 2009, U.S. Congress {{approved}} continued {{funding for}} the F136 <b>engine</b> <b>program</b> in fiscal year 2010. The U.S. Defense Department did not request FY 2010 {{funding for the}} F136 <b>engine</b> <b>program.</b> In a report filed on 18 June 2009, the House Armed Services Committee cited Pratt & Whitney F135 <b>engine</b> <b>program</b> cost overruns of $1.872 billion as cause to continue funding the F136 engine.|$|R
50|$|In 2013-11-05, Hyundai {{announced}} {{the creation of}} a new factory crate <b>engine</b> <b>program</b> at the 2013 SEMA Show in Las Vegas, which initially included a 2.0-liter, turbocharged 4-cylinder engine. The crate <b>engine</b> <b>program</b> began in December 2013.|$|R
50|$|On 5 {{november}} 2013, Hyundai {{announced the}} creation of a new factory crate <b>engine</b> <b>program</b> at the 2013 SEMA Show in Las Vegas, which initially included a Lambda 3.8-liter, direct-injected V6 engine. The crate <b>engine</b> <b>program</b> began in December 2013.|$|R
5000|$|In 2015, the Volkswagen {{emissions}} scandal involved revelations that Volkswagen AG had deliberately falsified emission {{reports by}} <b>programming</b> <b>engine</b> management unit firmware to detect test conditions, and change emissions controls when under test. The cars thus passed the test, but {{in real world}} conditions, emitted up to forty times more [...] emissions than allowed by law. An independent report in September 2015 warned that this extended to [...] "every major car manufacturer", with BMW, and Opel named alongside Volkswagen and its sister company Audi as [...] "the worst culprits", and that approximately 90% of diesel cars [...] "breach emissions regulations". [...] Overlooking the direct responsibility of the companies involved, the authors blamed the violations {{on a number of}} factors, including [...] "unrealistic test conditions, a lack of transparency and a number of loopholes in testing protocols".|$|E
40|$|Abstract. This paper {{argues that}} genetic {{programming}} {{has not made}} good on its promise to generate computer programs automatically. It then describes an approach that would allow that promise to be fulfilled by running a genetic <b>programming</b> <b>engine</b> under human guidance. Keywords: guided genetic programming. 1...|$|E
30|$|The {{mathematical}} {{model can be}} readily solved by using constraint <b>programming</b> <b>engine</b> software, which has been proved to be very powerful in industrial control applications (Fromherz et al. 1999). The constraint <b>programming</b> <b>engine</b> software integrates multiple techniques in operations research (OR), artificial intelligence (AI) and graph theory (Rossi et al. 2006) for solving complicated scheduling problems with efficiency and cost-effectiveness (Bockmayr and Hooker 2003). Constraint programming has also been employed in addressing construction scheduling problems of practical size and complexity. Liu and Wang (2012) took advantage of constraint programming to enhance the computing efficiency for scheduling linear construction projects with multi-skilled crews. Menesi et al. (2013) demonstrated the capability of constraint programming to handle the time-cost trade-off problem for large-scale projects involving thousands of activities. In this study, IBM ILOG CPLEX Optimization Studio V 12.6 (2016) was utilized to implement constraint programming algorithm in search for the optimum solution to the {{mathematical model}}.|$|E
40|$|A {{new method}} for <b>programming</b> Maxeler's {{dataflow}} <b>engines</b> is presented. The existing tools allow programmers to <b>program</b> dataflow <b>engines</b> in Java. We belive that functional programming languages might {{provide a more}} suitable alternative. We define a new programming language called MaxHs for <b>programming</b> dataflow <b>engine</b> kernels. In addition, we present a way of interfacing MaxHs programs with programs written in Haskell. With the help of simple example programs we compare our solution with existing tools. In the last part we present a method for compiling MaxHs into a graph-based intermediate code. The elements of the intermediate code {{are based on the}} nodes supported by Maxeler's dataflow engines. We also outline how the support for interfacing with Haskell is achieved...|$|R
5000|$|Windows Workflow Foundation {{provides}} task automation {{and integrated}} transactions using workflows. It is the <b>programming</b> model, <b>engine</b> and tools for building workflow-enabled applications on Windows.|$|R
50|$|In {{the last}} years of the {{software}} house, it produced software for television programs. E.g., games for the Solletico <b>program</b> and <b>engine</b> for Processo di Biscardi.|$|R
40|$|International audienceGiven a logic {{program that}} is {{terminating}} and mode-correct in an idealized Prolog interpreter (i. e., in a top-down logic <b>programming</b> <b>engine),</b> a bottom-up logic <b>programming</b> <b>engine</b> {{can be used to}} compute exactly the same set of answers as the top-down engine for a given mode-correct query by rewriting the program and the query using the Magic Sets Transformation (MST). In previous work, we have shown that focusing can logically characterize the standard notion of bottom-up logic programming if atomic formulas are statically given a certain polarity assignment. In an analogous manner, dynamically assigning polarities can characterize the effect of MST without needing to transform the program or the query. This gives us a new proof of the completeness of MST in purely logical terms, by using the general completeness theorem for focusing. As the dynamic assignment is done in a general logic, the essence of MST can potentially be generalized to larger fragments of logic...|$|E
40|$|We {{formally}} specified {{a program}} logic for higher-order procedural variables and non-local jumps with Ott and Twelf. Moreover, the dependent type {{systems and the}} translation are both executable specifications thanks to Twelf logic <b>programming</b> <b>engine.</b> In particular, relying on Filinski‚Äôs encoding of shift/reset using callcc/throw and a global metacontinuation (simulated in state passing style), we have mechanically checked the correctness of a few examples (all source files are available on request). ...|$|E
40|$|AbstractIn this paper, we {{describe}} a proof-theoretic foundation for bottom-up logic programming based on uniform proofs {{in the setting}} of the logical framework LF. We present a forward uniform proofs calculus which is a suitable foundation for the inverse method for LF and prove its correctness. We also present some preliminary results of an implementation for the Horn Fragment as part of the logical framework Twelf, and compare its performance with the tabled logic <b>programming</b> <b>engine...</b>|$|E
40|$|The various {{propulsion}} systems technology programs are examined. The Stratospheric Cruise Emission Reduction program has the objective {{to explore and}} demonstrate advanced technology fuel preparation and combustion systems which produce very low emission levels, {{particularly with respect to}} the oxides of nitrogen, during high altitude cruising flight. Other programs considered include the Quiet, Clean, General Aviation Turbofan program, the Variable Cycle <b>Engine</b> Technology <b>program,</b> the Helicopter Transmission Technology program, the Broad Specification Fuels Technology <b>program,</b> the <b>Engine</b> Component Improvement <b>program,</b> the Advanced Turboprop Technology program, the Supersonic Cruise Propulsion Technology program, the Materials for Advanced Turbine <b>Engines</b> <b>program,</b> and the Aeroelasticity of Turbine <b>Engines</b> <b>program...</b>|$|R
40|$|Three {{turbofan}} configurations, each incorporating alternative {{noise reduction}} features, were tested under the Quiet <b>Engine</b> <b>Program.</b> Performance data for these engines are shown over {{a range of}} flight conditions. The data are presented in tabular form for standard day flight inlet conditions. Procedures for estimating nonstandard day performance are shown. Tabular data and calculation procedures to allow determination of ram recovery, customer bleed, and customer shaft power extraction effects on engine performance {{can be found in}} the original Performance Brochure titled, Experimental Quiet <b>Engine</b> <b>Program,</b> Predicted <b>Engine</b> Performance, dated April 8, 1970. Predicted engine noise levels for representative take-off and approach conditions are provided...|$|R
50|$|International Aero Engines is a Z√ºrich-registered {{joint venture}} between Pratt & Whitney, MTU Aero Engines and Japanese Aero Engine Corporation. The {{collaboration}} produced the V2500, the second most successful commercial jet <b>engine</b> <b>program</b> in production today in terms of volume, and the third most successful commercial jet <b>engine</b> <b>program</b> in aviation history.|$|R
40|$|The {{combination}} of a classifier system with an evolutionary image generation engine is explored. The framework is com-posed of an object detector and a general purpose, expression-based, genetic <b>programming</b> <b>engine.</b> Several object detec-tors are instantiated to detect faces, lips, breasts and leaves. The experimental results show {{the ability of the}} system to evolve images that are classified as the corresponding objects. A subjective analysis also reveals the unexpected nature and artistic potential of the evolved images...|$|E
40|$|Abstract. A novel Genetic Programming {{approach}} {{for the improvement}} of the performance of classifier systems through the synthesis of new training instances is presented. The approach relies on the ability of the Genetic <b>Programming</b> <b>engine</b> to identify and exploit shortcomings of classifier systems, and generate instances that are misclassified by them. The addition of these instances to the training set has the potential to improve classifier‚Äôs performance. The experimental results attained with face detection classifiers are presented and discussed. Overall they indicate the success of the approach...|$|E
40|$|XSLT is a {{powerful}} and widely used language for transforming XML documents. However its power and complexity can be overwhelming for novice or infrequent users, many of which simply give up on using this language. On the other hand, many XSLT programs of practical use are simple enough to be automatically inferred from examples of source and target documents. An inferred XSLT program is seldom adequate for production usage but {{can be used as}} a skeleton of the final program, or at least as scaffolding in the process of coding it. It should be noted that the authors do not claim that XSLT programs, in general, can be inferred from examples. The aim of Vishnu - the XSLT generator engine described in this paper ‚Äì is to produce XSLT programs for processing documents similar to the given examples and with enough readability to be easily understood by a programmer not familiar with the language. The architecture of Vishnu is composed by a graphical editor and a <b>programming</b> <b>engine.</b> In this paper we focus on the editor as a GWT web application where the programmer loads and edits document examples and pairs their content using graphical primitives. The <b>programming</b> <b>engine</b> receives the data collected by the editor and produces an XSLT program...|$|E
50|$|In 2002 he {{launched}} Affiliate Showcase.com an affiliate <b>program</b> search <b>engine</b> and directory {{system based on}} the Portalcube software which was {{ranked in the top}} 3,000 Websites on the Internet by Alexa.com.|$|R
40|$|A system {{overview}} is presented for the Space Shuttle Main Engine (SSME), and extensive performance comparisons {{are made with}} the Saturn V booster powerplant showing (1) staged-combustion turbopump pressures of 7, 500 vs 1, 100 psi for the Saturn V first stage; (2) a specific impulse of 455 vs 300; (3) power density of 100 vs 20 hp/lb; and (4) chamber pressures of 3200 vs 1000 psia. An account is then given of the SSME testing <b>program,</b> <b>engine</b> certification process and flight aboard the Space Shuttle Columbia, with attention to anomalies detected during flight in turbopump operation and mixture ratio sensor function...|$|R
50|$|In July 2007, GTRE divided Kaveri program {{into two}} {{separate}} programs. They are K9+ Program and K10 Program. K9+ Program {{is a program}} to prove concept of complete design and gain hand-on experience of aircraft engine integration and flight trials to cover a defined truncated flight envelope prior to the launch of production version of K10 Standard <b>engine.</b> While K10 <b>Program</b> is a Joint Venture (JV) partnership with a foreign <b>engine</b> manufacturer. K10 <b>program</b> <b>engine</b> will be final production standard Kaveri engine and shall have less weight and more reheat thrust along with certain other changes to meet the original design intent.|$|R
40|$|Vishnu is a {{tool for}} XSLT visual {{programming}} in Eclipse - a popular and extensible integrated development environment. Rather than writing the XSLT transformations, the programmer loads or edits two document instances, a source document and its corresponding target document, and pairs texts between then by drawing lines over the documents. This form of XSLT programming is intended for simple transformations between related document types, such as HTML formatting or conversion among similar formats. Complex XSLT programs involving, for instance, recursive templates or second order transformations {{are out of the}} scope of Vishnu. We present the architecture of Vishnu composed by a graphical editor and a <b>programming</b> <b>engine.</b> The editor is an Eclipse plug-in where the programmer loads and edits document examples and pairs their content using graphical primitives. The <b>programming</b> <b>engine</b> receives the data collected by the editor and produces an XSLT program. The design of the engine and the process of creation of an XSLT program from examples are also detailed. It starts with the generation of an initial transformation that maps source document to the target document. This transformation is fed to a rewrite process where each step produces a refined version of the transformation. Finally, the transformation is simplified before being presented to the programmer for further editing...|$|E
30|$|Differential {{evolution}} is an optimisation algorithm introduced by Storn and Price (1995). This optimisation method is an evolutionary algorithm based on population, mutation and recombination. Differential {{evolution is}} easy to implement and has only four parameters which need to be set. The parameters are: generations, NP, F and Cr. The generations parameter determines the number of generations; the NP parameter is the population size; the F parameter is the weighting factor; and the Cr parameter is the crossover probability (Storn 1996). In this research, the differential evolution is used as an analytical <b>programming</b> <b>engine.</b>|$|E
40|$|Disjunctive logic {{programs}} are {{a powerful tool}} in knowledge representation and commonsense reasoning. The recent development of an efficient disjunctive logic <b>programming</b> <b>engine,</b> named DLV, allows to exploit disjunctive logic programs for solving complex problems. However, disjunctive logic programming systems are currently missing any interface supporting the integration between commonly used software development languages (like Java or C++) and disjunctive logic programs. This paper focuses on the DLV Wrapper, a library, actually implemented in Java, that "wraps" the DLV system inside an external application, allowing to embed disjunctive logic programs inside Object-Oriented source code...|$|E
25|$|Freight Australia {{commenced}} a <b>program</b> of <b>engine</b> upgrades purchasing new engines {{for some}} of the G class, with the old engines being used to repower X class locomotives, later recoded the XR class.|$|R
5000|$|Matt Burch (born [...] ) is a {{computer}} programmer who created the computer game Escape Velocity and <b>programmed</b> the <b>engine</b> for its sequels, Escape Velocity Override and Escape Velocity Nova, published by Ambrosia Software.|$|R
5000|$|Voith Hydro tests {{models of}} the power plant turbines, {{including}} 4 main <b>program</b> parts, <b>engine</b> characteristics values, oscillation and cavitation, and transfer data from 1 program part {{to the next one}} using TDMS.|$|R
