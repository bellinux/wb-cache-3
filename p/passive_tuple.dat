2|1|Public
40|$|This report {{sets out}} {{the results of}} an {{investigation}} into the distributed implementation of tuple spaces, hence Linda. There are numerous such schemes for implementing distributed tuple spaces, and a selection of these implementations are examined. It is observed that all the implementations {{have a great deal of}} similarities. These similarities form the basis for a generalised tuple space implementation, where specific implementations are formed by the appropriate selection of options for various choice points. 1 Introduction 1. 1 Linda Linda[Gel 85, CG 89] is a coordination language providing communication via tuple space, which is a global associative memory consisting of a bag (or multi-set) of tuples. Tuples are of two sorts: <b>passive</b> (<b>tuple</b> elements are data only) and active (tuple elements are functions). When the functions of an active tuple have completed, a <b>passive</b> <b>tuple</b> replaces it. The following operations operate on tuple space: out(t) takes a (<b>passive)</b> <b>tuple,</b> t, (containing [...] ...|$|E
40|$|Several {{attempts}} have been made to produce a (generally adopted) semantics for the generative communication coordination language Linda. However, none has been universally recognised as definitive. Therefore, there are various possible interpretations regarding the semantics of Linda operations. This report presents a survey of a variety of those attempts to produce a semantics for Linda. Also, an attempt is made to identify the areas of confusion which arise, and the possibilities which selecting different choices provide. 1 Introduction 1. 1 Linda Informally, Linda [Gel 85, CG 89] is a coordination language which provides communication via tuple space, which is a global associative memory consisting of a bag (or multi-set) of tuples. Tuples are of two sorts: <b>passive</b> (<b>tuple</b> elements are data only) and active (tuple elements are processes). When the processes of an active tuple have completed, a <b>passive</b> <b>tuple</b> replaces it. The following operations operate on tuple space: out(t) takes a [...] ...|$|E
40|$|Machine. ffl POSYBL daemons run in {{background}} {{even if no}} Linda program is being executed. Due to that fact, POSYBL may be started before STRAND. STS operations will have a direct access to Linda tuple space (TS) during the whole time of computations. In contrast, the SCA Linda system runs only during the computation of some Linda program. The fact that POSYBL runs all the time may be utilized in one more way. Instead of reading the data from a disk they can be kept in STS from one STRAND session to another. Our implementation was also successfully used to provide communication between two users, each of them using STRAND. ffl POSYBL system is supplied with its C sources. We {{have taken advantage of}} this fact and changed slightly definitions of some operations to make them better suit our requirements. The last point requires some explanations. There are only three out of five Linda operations acting on <b>passive</b> <b>tuples</b> implemented in POSYBL, namely out(), in() and rd(). We have changed [...] ...|$|R

