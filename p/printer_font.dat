6|23|Public
5000|$|<b>Printer</b> <b>Font</b> Metric (PFM) is {{a binary}} version of AFM, usually {{carrying}} [...] ".PFM" [...] file name extension. It contains font metric information.|$|E
5000|$|<b>Printer</b> <b>Font</b> Binary (PFB) is {{a binary}} PostScript font format created by Adobe Systems, usually {{carrying}} [...] ".PFB" [...] file name extension. It contains a font's glyph data.|$|E
50|$|Type 4 is {{a format}} {{that was used}} to make fonts for <b>printer</b> <b>font</b> {{cartridges}} and for permanent storage on a printer's hard disk. The character descriptions are expressed in the Type 1 format. Adobe does not document this proprietary format.|$|E
5000|$|For {{high-end}} users, the LaserWriter II NTX {{also included}} a SCSI controller for storage of <b>printer</b> <b>fonts</b> on a hard drive dedicated {{for use by the}} printer.|$|R
50|$|Lexicon {{could work}} with both osnovnaya (primary) and alternativnaya (alternative) {{character}} sets. It also included its own screen and <b>printer</b> <b>fonts</b> and keyboard drivers for use with non-russified computers.|$|R
50|$|With the PostScript {{background}} {{established with}} Fontographer, Altsys developed FreeHand in 1988 as a Macintosh Postscript-based illustration program using Bézier curves for drawing and editing. In 1989, Fontographer 3.0 was released, featuring an auto-trace tool and automatic generation of hints for Postscript <b>printer</b> <b>fonts.</b>|$|R
5000|$|<b>Printer</b> <b>Font</b> ASCII (PFA) is an ASCII {{version of}} PFB, usually {{carrying}} [...] ".PFA" [...] file name extension. It contains a font's glyph data. PFA is {{the form of}} the font used by PostScript-language interpreters, and is also the preferred format for Type 1 fonts used in UNIX environments.|$|E
5000|$|In {{order to}} {{overcome}} such problems, the IBM Character Data Representation Architecture level 2 specifically reserves ranges of code page IDs for user-definable and private-use assignments. Whenever such code page IDs are used, the user must {{not assume that}} the same functionality and appearance can be reproduced in another system configuration or on another device or system unless the user takes care of this specifically.The code page range 57344-61439 (E000h-EFFFh) is officially reserved for user-definable code pages (or actually CCSIDs {{in the context of}} IBM CDRA), whereas the range 65280-65533 (FF00h-FFFDh) is reserved for any user-definable [...] "private use" [...] assignments.For example, a non-registered custom variant of code page 437 (1B5h) or 28591 (6FAF) could become 57781 (E1B5h) or 61359 (EFAFh), respectively, in order to avoid potential conflicts with other assignments and maintain the sometimes existing internal numerical logic in the assignments of the original code pages. An unregistered private code page not based on an existing code page, a device specific code page like a <b>printer</b> <b>font,</b> which just needs a logical handle to become addressable for the system, a frequently changing download font, or a code page number with a symbolic meaning in the local environment could have an assignment in the private range like 65280 (FF00h).|$|E
40|$|An {{approach}} to supervised training of document-specific character templates from sample page images and unaligned transcriptions is presented. The template estimation problem is formulated {{as one of}} constrained maximum likelihoodparameter estimation within the document image decoding (DID) framework. This leads to a two-phase iterative training algorithm consisting of transcription alignment and aligned template estimation (ATE) steps. The ATE step {{is the heart of}} the algorithm and involves assigning template pixel colors to maximize likelihoodwhile satisifying a template disjointness constraint. The training algorithm is demonstrated on a variety of English documents, including newspaper columns, 15 th century books, degraded images of 19 th century newspapers and connected text in a script-like font. Three applications enabled by the training procedure are described [...] - high-accuracy document-specific decoding, transcription error visualization and <b>printer</b> <b>font</b> generation. 1. INTRODU [...] ...|$|E
40|$|Outlines are {{becoming}} the standard way of storing character fonts. In {{the late seventies}} and early eighties, only fonts for photocomposers were stored by their outline description. Screen <b>fonts</b> and <b>printer</b> <b>fonts</b> were generally stored in bitmap form. The advent of resolution independent page description language...|$|R
50|$|In System 7.1, a {{separate}} Fonts folder {{appeared in the}} System Folder. Fonts were automatically installed when dropped on the System Folder, and became available to applications after they were restarted. Font resources were generally grouped together in suitcase files. However, rules for storing <b>printer</b> <b>fonts</b> varied greatly between different system, printer and application configurations until {{the advent of the}} new Fonts folder. Typically, they had to be stored directly in the System Folder or in the Extensions Folder.|$|R
5000|$|While the {{original}} display and <b>printer</b> <b>fonts</b> defined code point 173 as section sign ('§', U+00A7), some tools also used an inverted exclamation mark ('¡', U+00A1) instead. This variant {{is not fully}} compliant with the definition of code page 867 / 895 and should therefore not be associated with these numbers. (In lack of an official code page ID for them, user-definable code page numbers 58211 (E363h) or 58239 (E37Fh) {{could be used as}} [...] "handles" [...] to these encodings in a local or private context.) ...|$|R
50|$|In October 1992, HP {{introduced}} the LaserJet 4 featuring a Canon EX engine with native 600-dpi output and Microfine toner for US$2,199. This model also introduced TrueType fonts to LaserJets which {{ensured that the}} <b>printer</b> <b>fonts</b> exactly matched the fonts displayed on the computer screen. (TrueType fonts could print on an original LaserJet Plus or later, but they would be printed as graphics, making the printing slow and restricted to a limited page area or reduced resolution.) Some competitors also utilized the Canon EX engine, including Apple (LaserWriter Pro 600 and 630), Digital Equipment Corporation (DEClaser 5100), and Canon.|$|R
50|$|Charis SIL is a {{transitional}} serif typeface developed by SIL International based on Bitstream Charter, {{one of the}} first fonts designed for laser <b>printers.</b> The <b>font</b> offers four family members: roman, bold, italic, and bold italic.|$|R
50|$|Irving {{started his}} {{professional}} career at Xerox. In 1980 during his Junior year, {{he was asked}} to interview and took employment at Xerox Corporation where they had formed an early digital typography group called “The Font Center” as a Digital Typographer. Irving {{was a part of the}} team in the early PARC days of WYSIWIG, where he was designing early display and <b>printer</b> <b>fonts.</b> During his time at Xerox he was involved in numerous products and services including: typography, communications on the personal computer, subscription services and back end online advertising. Within Xerox, Blake transitioned from designing fonts for displays and printers to working as a PM on printers, then multimedia PCs. After receiving his MBA and receiving the Chairman’s award for innovation at Xerox, Irving took a role at Okidata in Mt Laurel New Jersey as a product manager. Blake left Okidata after receiving a strong offer from Compaq computer one year later. Blake was originally recruited to Compaq to start their printer group but a financial downturn moved Irving to their multimedia group instead.|$|R
50|$|IBM debuted two {{printers}} for the in-office publishing {{market in}} 1982: the 240-DPI 3800-3 laserxerographic printer, and the 600-DPI 4250 electro-erosion laminate typesetter. Monotype was {{under contract to}} supply bitmap <b>fonts</b> for both <b>printers.</b> The <b>fonts</b> for the 4250, delivered to IBM in 1983, included Helvetica, which Monotype sub-licensed from Linotype. For the 3800-3, Monotype replaced Helvetica with Arial. The hand-drawn Arial artwork was completed in 1982 at Monotype by a 10-person team led by Robin Nicholas and Patricia Saunders and was digitized by Monotype at 240 DPI expressly for the 3800-3.|$|R
50|$|Printing press with book binding department, another Industrial {{undertaking}} by missionaries, {{proved to}} be successful. After the Printing press started in 1841 at Mangalore, first Lithograph and later Kannada typesfonts were introduced. In 1851, a <b>printer</b> with Kannada <b>fonts</b> came from the Basel for the press at Mangalore. The press printed Christian books and books related to Literature, Science, and The arts providing employment to several souls.|$|R
5000|$|<b>Printers</b> {{used these}} <b>fonts</b> to print mailings for large companies. The print {{was made to}} look like a hand-typed {{personal}} letter. The press was covered with previously used, worn paper combined with a thin cloth silk tissue. In this way, the type did not receive equal pressure and ink on the paper. So it appeared that the letter was typed by a somewhat inexperienced secretary.|$|R
5000|$|The {{process is}} {{prevalent}} in the video field, appearing to some degree {{in the majority of}} TV broadcasts and DVDs. A modern television set's [...] "sharpness" [...] control is an example of edge enhancement. It is also widely used in computer <b>printers</b> especially for <b>font</b> or/and graphics to get a better printing quality. Most digital cameras also perform some edge enhancement, which in some cases cannot be adjusted.|$|R
50|$|NLQ {{became a}} {{standard}} feature on all dot-matrix printers. While NLQ was well {{received in the}} IBM PC market, the Apple Macintosh market did not use NLQ mode at all, as it did not rely on the <b>printer's</b> own <b>fonts.</b> Mac word-processing applications used fonts stored in the computer. For non-PostScript (raster) printers, the final raster image was produced by the computer {{and sent to the}} printer, which meant dot-matrix printers on the Mac platform exclusively used raster ("graphics") printing mode. For near-letter-quality output, the Mac would simply double the resolution used by the printer, to 144 dpi, and use a screen font twice the point size desired. Since the Mac's screen resolution (72 dpi) was exactly half of the ImageWriter's maximum, this worked perfectly, creating text at exactly the desired size.|$|R
50|$|Most {{printers}} {{other than}} line printers accept control characters or unique character sequences to control various printer functions. These may range from shifting from lower to upper case or from black to red ribbon on typewriter <b>printers</b> to switching <b>fonts</b> and changing character sizes and colors on raster printers. Early printer controls were not standardized, with each manufacturer's equipment having its own set. The IBM Personal Printer Data Stream (PPDS) became a commonly used command set for dot-matrix printers.|$|R
50|$|In {{the late}} 18th and early 19th century, when {{more and more}} German texts were printed in Roman type (Antiqua), typesetters looked for an exact Roman {{counterpart}} for the blackletter ſz ligature, which {{did not exist in}} Roman <b>fonts.</b> <b>Printers</b> experimented with various techniques, mostly replacing blackletter ß in Roman type with either sz, ss, ſs, or some combination of these. Although there are early examples in Roman type of a ſs-ligature that looks like the letter ß, it was not commonly used for sz.|$|R
5000|$|The Mazovia {{encoding}} {{was designed}} in 1984 by Jan Klimowicz of [...] It {{was designed as}} part of a project to develop and produce a Polish IBM PC clone codenamed [...] "". The code page was therefore optimized for that computer's typical peripheral devices, a graphics card with dual switchable graphics, a keyboard using US English and Russian layouts and <b>printers</b> with Polish <b>fonts.</b> In 1986, the Polish National Bank (NBP) adopted the Mazovia encoding as a standard, thereby causing its widespread acceptance and distribution in Poland. They also were instrumental in Ipaco producing compatible computers with Taiwanese components under the direction of [...] and Krzysztof Sochacki.|$|R
40|$|Expanding use of {{technology}} in endangered language documentation has increased interest {{in the development of}} digital standards for lexical information. Many digital lexica developed by linguists make use of standards like LIFT/GOLD (e. g., SIL's Toolbox, FLEX), or LMF/DCR (e. g., LEXUS -VICOS; Aristar-Dry et al 2012), but few are reported to use TEI, even though TEI is a Digital Humanities standard with a dictionary module (TEI, ch. 9; Romary and Wegstein 2012). In this paper, we outline a project for Nxa'amxcín (Salish) that uses TEI structure and markup. We argue that TEI is a useful tool for endangered language lexica. The original Nxa'amxcín print-dictionary project, begun using Lexware (Hsu 1985), WordPerfect, and DOS, was exemplary in 1991, but dependence on customized character-sets, obsolete <b>printer</b> <b>fonts,</b> macros, and a Hercules graphics card, made the data unusable by 2005. A lengthy process retrieved and converted the data to a modern format (Author and Newton 2008). In the absence of a stable non-proprietary standard (ISO 24613 was released only in 2008), and following guidelines for interoperability, portability (Bird and Simon 2003) and use of open formats (see, e. g. Good 2011), TEI seemed an obvious choice in 2005 : it is widely used for born-digital documents and provides a wide range of tags for dictionaries, linguistic analysis and corpus linguistics (chs. 15 - 18). In our paper we show that, as an open, mature standard, TEI is a useful encoding strategy for our entire project, providing a reliable archival format for Nxa'amxcín data. Its infrastructure is more than a set of schemas and encoding guidelines (ch. 23), and it enables users to tightly constrain schemas to consist only of elements and attributes required by a specific project. It provides flexibility to encode morphological relationships, which is invaluable for the complex, Salish morphology of Nxa'amxcín. TEI also generates project-specific documentation embedded directly into a RelaxNG schema, providing inline help for XML encoders, incorporates peripheral data into the same digital corpus, and links across collections easily. The XML data serves as the basis for an online digital dictionary, for print dictionaries, wordlists, the dictionary website structure and supplementary material, and teaching and practice materials. Finally, editing with a well-documented TEI schema is relatively easy, and not dependent on an externally-controlled web application for data entry. Because TEI is not widely used for endangered languages, we conclude by comparing TEI, LMF/DCR and LIFT/GOLD as they might apply in a Nxa'amxcín lexicon...|$|R
40|$|In today’s digital computers, phototypesetters and <b>printers,</b> typographic <b>fonts</b> {{are mainly}} given by their outline {{descriptions}}. Outline descriptions alone {{do not provide}} any information about character parts like stems, serifs, shoulders, and bowls. But, {{in order to produce}} the best looking characters at a given size on a specific printer, non-linear operations must be applied to parts of the character shape. At low-resolution, grid-fitting of character outlines is required for generating nice and regular raster characters. For this reason, grid-titting rules called hints are added to the character description. Grid-fitting rules require as parameters certain characteristic points within the shape outlines. In {{order to be able to}} detect these characteristic points in any given input font, a topological model representing the essence of the shapes found in typographic Iatin typefaces is proposed. This model includes sufficient information for matching existing non-fancy outline fonts to the model description. For automatic hint generation. a table of applicable hints is added into the topological model description. After matching a given inpu (shape to the model, hints which can be applied to the shape of the given font are taken and added to its outline description. Furthermore, a structural description of individual letter shape parts using characteristic model points can be added to the model. Such a description provides knowledge about typographic structure elements like stems, serifs and bowls...|$|R
5000|$|The modern digraph th {{began to}} grow in {{popularity}} during the 14th century; at the same time, the shape of thorn grew less distinctive, with the letter losing its ascender (becoming similar in appearance to the old wynn (...) , which {{had fallen out of}} use by 1300, and to ancient through modern P, p). In some hands, such as that of the scribe of the unique mid-15th-century manuscript of The Boke of Margery Kempe, it ultimately became indistinguishable from the letter Y. By this stage, th was predominant and the use of thorn was largely restricted to certain common words and abbreviations. In William Caxton's pioneering printed English, it is rare except in an abbreviated the, written with a thorn and a superscript E. This was the longest-lived use, though the substitution of Y for thorn soon became ubiquitous, leading to the common 'ye', as in 'Ye Olde Curiositie Shoppe'. One major reason for this was that Y existed in the <b>printer's</b> type <b>fonts</b> that were imported from Germany or Italy, while thorn did not. [...] The word was never pronounced with a [...] "y" [...] sound, though, even when so written. [...] The first printing of the King James Version of the Bible in 1611 used the Y form of thorn with a superscript E in places such as Job 1:9, John 15:1, and Romans 15:29. It also used a similar form with a superscript T, which was an abbreviated that, in places such as 2 Corinthians 13:7. All were replaced in later printings by the or that, respectively.|$|R
5000|$|Don't enum device fonts:This is bit #14 of the {{compatibility}} bits word, with {{hexadecimal value}} , {{known by the}} symbolic name [...] in [...] This flag causes Windows 3.1 to turn the [...] flag off in particular circumstances when an application that is wanting to print enumerates fonts. The particular circumstances are when the target printer is not either a dot matrix printer or a PostScript <b>printer,</b> and the <b>fonts</b> are TrueType fonts that are not resident in the printer itself. In such circumstances, some applications (including PageMaker and MGXDraw) misinterpret the flag and believe the font to be device-resident. (TrueType fonts can be uploaded by Windows to printers, and need not be resident on the device itself to be usable.) They then query the printer to see what sizes of the font it supports, and when that fails (because the printer doesn't know about the font until it is uploaded), they incorrectly assume that the font cannot be resized. Setting the [...] flag to false in such situations prevents the applications from going wrong, {{and that is what}} this compatibility bitflag does.|$|R
40|$|Now, {{caring for}} blind is too fews. The public {{information}} {{or the same}} kind in braille font is rarely to find. It cause made of braille font with manual methode needs a long time, beside that the creator must to learn the motif of braille font. There are the <b>printer</b> of braille <b>font,</b> but the price is tooexpensive. This fact be principle of made the electronic braille type machine basically of microcontroller ATmega 16 for easy made the general people to comunicate with the blind. Start of process to made this instrument is stake out and connect of hardware and next process is made of software. This instrument use keyboard as input and two motor stepper aslo a solenoid as output. The preparation of software for directed in microcontroller ATmega 16 use C language and software CodeVision AVR as compiler. Finishing process is to downloading the software to microcontroller ATmega 16. The hardware is succesfull made use minimum system microcontroller ATmega 16, That joined with other instrument. The software of electronic braille type machine basically of microcontroller ATmega 16 is succesfull made use CodeVision AVR in one main program. This instrument read the data from input keyboard that press, to move motor stepper and or solenoid so that can to bring outside motif braille font the suitable knot of keyboard that press at a sheet of paper. Key words : type machine, braille fon...|$|R
40|$|Effective résumés are {{summaries}} of your skills, experiences, and career interests. A résumé won’t {{get you a}} job; it should get you an interview. Content ré•su•mé | rez [...] ,ma n [F résumé, fr. pp. of résumér to resume, summarize]: a summing up: SUMMARY; specif: a short account of one’s career and qualfications prepared typically by an applicant for a position. e Write positive, factual statements that show a pattern in your skills, interests, education, and experiences, making you a fit for the opportunities you are seeking. Organize information so that the reader can easily see the pattern in your background that makes you a good candidate. The experience section of the résumé {{will be the largest}} including both paid and unpaid experiences. Be concise, use past tense verbs, avoid first person pronouns (I, me, my). Appearance Résumés are professional correspondence. Limit to one or two pages printed on 8 - 1 / 2 ” x 11 ” bond paper using high quality <b>printer</b> with familiar <b>fonts</b> (Times, Palatino, etc.) of 10 – 14 points in size. Strive for a simple, uncluttered layout using boldface or all-capital letters for headings with at least one-inch wide left and right margins. Limit underlining, graphics, lines, and shading. A résumé won’t get you a job; it should get you an interview. Q: How do I get résumé help? A: 1. Drop off for review at the Career Center and résumé will be returned by mail. 2. Come in during Quick Questions (2 – 3 : 30 pm Monday–Friday) at the Career Center. 3. Make an appointment with a career counselo...|$|R

