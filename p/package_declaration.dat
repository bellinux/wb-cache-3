7|8|Public
50|$|Note {{that if you}} do not use a <b>package</b> <b>declaration,</b> {{your class}} ends up in an unnamed package. Classes in an unnamed package cannot be {{imported}} by classes in any other package.|$|E
5000|$|In a Java source file, {{the package}} that this file's class or classes belong to is {{specified}} with the [...] keyword. This keyword {{is usually the}} first keyword in the source file. At most one <b>package</b> <b>declaration</b> can appear in a source file.|$|E
50|$|A type import {{declaration}} allows a named type {{to be referred}} to by a simple name rather than the full name that includes the package. Import declarations can be single type {{import declaration}}s or import-on-demand declarations. Import declarations must be placed {{at the top of a}} code file after the <b>package</b> <b>declaration.</b>|$|E
5000|$|CFSAN is also {{responsible}} for food labeling, specifically the [...] "Nutrition Facts" [...] panel typically seen on <b>packaged</b> foods. Ingredient <b>declarations</b> are also required, and this is important for consumers with food allergies ...|$|R
40|$|When a large VHDL {{model is}} being {{developped}} by several individuals, {{a set of}} guidelines is necessary to ensure maintainability, consistency and readability throughout. This paper presents a set of guidelines covering issues like file naming, capitalization and code layout, successfully used within BNR. Section 1. File System Structure A file shall contain one and only one library unit. This minimizes the amount of recompilation required when a library unit, on which other library units depend, is modified. It also helps in structuring the model in the host computer’s file system as described in this section. Each file shall be named according to the unit it contains as shown in Table 1. This makes identifying the file that contains a particular library unit easier and, when alphabetically sorted, each entities are grouped with its corresponding architecture and configuration, and <b>package</b> <b>declarations</b> are grouped with their corresponding body. Since certain file systems are case-insensitive, the case mix of the filename need not follow the case mix of the various library unit names it is made of. If the file system imposes a limit {{on the length of}} a filename, a different convention that yields shorter names should be used (but a convention nonetheless) in favor of keeping longer, more meaningful names for the library units. Note that a dash (-), not an underscore, separates the components of the filename since the underscore i...|$|R
5000|$|As per Legal Meteorology (Packaged Commodity) Rules [...] "Institutional Consumer" [...] means who farts or avails of the {{facilities}} or services in connection with transport , hotel , hospital or other organisation which buy Packaged Commodities directly from the manufacturer or from an importer or from a wholesale dealer for use by that institution, and the <b>package</b> shall have <b>declaration</b> 'not for retail sale'.|$|R
50|$|Finally {{after the}} year 2007, {{the test was}} again {{abandoned}} for various reasons. Editing 2008, which was to place between the two clubs into Kabyle national titles such as the JS Kabylie and JSM Bejaia was canceled due to the Kabyle but normally the <b>package</b> <b>declaration</b> the trophy returns to bougiotes despite the vain protests interested {{but it did not}} change anything.In 2009 the ES Sétif defending champions and CR Belouizdad Cup winner met the same fate because of the busy schedule of the FAF which priority was focused on possible qualification of the national team for World Cup in South Africa.|$|E
5000|$|Package {{declarations}} apply package scope {{till the}} next <b>package</b> <b>declaration</b> {{or the end}} of the block in which the declaration is made.our $mainVar = 'a';package Sp1;our $sp1aVar = 'aa';print [...] "$main::mainVar\t$sp1aVar\n"; # note mainVar needs qualifyingpackage Sp2;our $sp2aVar = 'aaa';print [...] "$main::mainVar\t$Sp1::sp1aVar\t$sp2aVar\n";# note mainVar and sp1aVar need qualifyingpackage main;print [...] "$mainVar\t$Sp1::sp1aVar\t$Sp2::sp2aVar\n"; # note sp1aVar and sp2aVar need qualifying$mainVar = 'b';{ # NOTE previously created packages and package variables still accessible package Sp1; our $sp1bVar = 'bb'; print [...] "$main::mainVar\t$sp1aVar\t$sp1bVar\n"; # note mainVar needs qualifying { package Sp2; our $sp2bVar = 'bbb'; print [...] "$main::mainVar\t$Sp1::sp1aVar$Sp1::sp1bVar\t$sp2aVar$sp2bVar\n"; } # note mainVar and sp1...Var need qualifying print [...] "$main::mainVar\t$sp1bVar$sp1aVar\t$Sp2::sp2bVar$Sp2::sp2aVar\n";} # note package Sp1 applies by default# main applies again by default; all package variables still accessible as long as qualifiedprint [...] "$mainVar\t$Sp1::sp1aVar$Sp2::sp2bVar\n"; ...|$|E
40|$|Contents 1 Introduction 1 1. 1 Motivation: IC Design Methodologies............... 1 1. 2 Contents and Structure of this Manual............... 2 2 Basic VHDL Concepts 3 2. 1 Components of a VHDL Model................... 3 2. 2 Entity Declaration.......................... 4 2. 3 Architecture.............................. 6 2. 3. 1 Concurrent Behavioral Description............. 7 2. 3. 2 Sequential Behavioral Description............. 10 2. 3. 3 Structural Description.................... 15 2. 4 Configuration Declaration...................... 17 2. 4. 1 Configuration of Behavioral Descriptions.......... 17 2. 4. 2 Configuration of Structural Descriptions.......... 18 2. 5 Packages................................ 19 2. 5. 1 <b>Package</b> <b>Declaration.....</b> ...|$|E
50|$|A {{large number}} of compile-time checks are {{supported}} to help avoid bugs {{that would not be}} detectable until run-time in some other languages or would require explicit checks {{to be added to the}} source code. For example, the syntax requires explicitly named closing of blocks to prevent errors due to mismatched end tokens. The adherence to strong typing allows detection of many common software errors (wrong parameters, range violations, invalid references, mismatched types, etc.) either during compile-time, or otherwise during run-time. As concurrency is part of the language specification, the compiler can in some cases detect potential deadlocks. Compilers also commonly check for misspelled identifiers, visibility of <b>packages,</b> redundant <b>declarations,</b> etc. and can provide warnings and useful suggestions on how to fix the error.|$|R
5000|$|Alcohol {{advertising}} in Thailand is {{regulated by the}} Alcoholic Beverage Control Act, BE 2551 (2008). Under section 32 of the law, alcoholic beverages may not be advertised in a manner which directly or indirectly claims benefits or promotes its consumption, and may not show the product or its [...] <b>packaging.</b> Under a <b>declaration</b> issued in order with the act, all [...] advertisements must also be accompanied by {{one out of five}} predefined warning messages, lasting at least two seconds for video advertisements and occupying at least 25 percent of the advertisement area for print media.|$|R
30|$|Only one out {{of seven}} survey {{participants}} stated to be well informed about the ‘SVHC right to know’ with {{nearly all of them}} having good self-reported chemical knowledge. Three quarters of the participants who are not working with chemicals or REACH at their workplace have never heard about the ‘SVHC right to know’. Every second participant declared their interest to search for more information about an SVHC in a certain article, but, in fact, not more than 4 % of all participants inquired for SVHCs with various methods. Only 1 % would buy an SVHC-containing article with no strings attached. While detailed comments by some survey participants showed a high level of understanding of the issue, many respondents were not sure what the SVHC information means for their daily life. They declared that they would inform themselves, reduce the use of the article with SVHCs, circulate this information, or throw such an article into the garbage. Most study participants suggested improvements of the ‘SVHC right to know’. The preferred suggestions were a ban of SVHCs, easily understandable information on the <b>packaging,</b> full ingredient <b>declaration</b> on the articles, or no need to inquire for every single item, while smartphone applications for SVHC requests were the least popular suggestion in all age groups.|$|R
40|$|Indirect {{competitive}} ELISA {{method for}} the detection of soya proteins in meat products was developed. The detection limit of the method is 0. 5 % of the weight of added soya protein. A total of 131 meat product samples such as salamis or sausages from the Czech Republic market were investigated for the presence of soya proteins. Soya proteins were detected in 84 % of the investigated samples without any declaration on the package of the product. The use of vegetable additives, namely soya in meat products in the market of the Czech Republic is very frequent and the restriction of its usage by legislation relates only to some kinds of durable products and ham (Act 264 / 2003 Coll.). The need for sensitive inspecting methods for soya protein detection is not only associated with the economic aspect (adulteration), but mainly with consumer health protection in case of allergy to soya proteins. Detection, immunochemical method, meat products, <b>package</b> <b>declaration</b> Addition of vegetable components to meat products is nowadays a common practice, mainly for technological and economic reasons. Plant additives participate in water absorption, emulgating properties, and the ability to form fluffy structures, temperatur...|$|E
40|$|The {{programming}} model Seuss comprises of (i) a notation {{for writing}} concurrent programs, (ii) a logic for proving program properties and (iii) an operational semantics for assigning a meaning to program exe-cutions. Seuss {{is based on}} the observation that concurrent programs typically consist of large amounts of sequential code, which are often written, understood, and reasoned about in isolation, while concurrency is made explicit only at the highest level, in deciding how to orchestrate the executions of these sequential programs. Consequently, the Seuss notation, in its most abstract form [Misra 96], describes structuring constructs for organising sequential programs written in any programming language. This document de-scribes the language Seuss for Java, which is an adaptation of the original Seuss notation for use with the programming language Java [GJS 96]. The document provides a syntax in extended Backus-Naur form (EBNF) and an operational semantics for the language. It is intended for programmers with a knowledge of Java; thus, although Seuss for Java programs contain sections of Java code, details of the Java syntax (e. g., the shape of expressions, class <b>declarations,</b> <b>packages,</b> etc.) are not described in this document, nor are the meanings of Java statements. The main body of this document describes the language in detail and the appendices provide the ful...|$|R
40|$|AbstractNowadays, {{molecular}} analyses play {{an important}} role in studies of soil dwelling animals, for example in taxonomy, phylogeography or food web analyses. The quality of the DNA, used for later molecular analyses, is an important factor and depends on collection and preservation of samples prior to DNA extraction. Ideally, DNA samples are frozen immediately upon collection, but if samples are collected in the field, suitable preservation methods might be limited due to unavailability of resources or remote field sites. Moreover, shipping samples over long distances can cause loss of DNA quality e. g. by thawing or leaking of preservation liquid. In this study we use earthworms, a key organism in soil research, to compare three different DNA preservation methods – freezing at − 20  °C, storing in 75 % ethanol, and freeze drying. Samples were shipped from the United States of America to Austria. The DNA of the samples was extracted using two different extraction methods, peqGOLD™ and Chelex® 100. The DNA amplification success was determined by amplifying four DNA fragments of different length. The PCR amplification success is significantly influenced by preservation method and extraction method and differed significantly depending on the length of the DNA fragment. Freeze drying samples was the best preservation method when samples were extracted using the silica based extraction method peqGOLD™. For samples that were extracted with Chelex® 100, storage in ethanol was the best preservation method. However, the overall amplification success was significantly lower for the extraction procedure based on Chelex® 100. The detection of the small DNA fragments was higher and independent from the extraction method, while the amplification success was significantly reduced for the longer DNA fragments. We recommend freeze drying of DNA samples, especially when they have to be shipped for longer distances. No special <b>packaging</b> or <b>declaration</b> is needed for freeze dried samples, and the risk of thawing is excluded. Storage of freeze dried samples also reduces costs because samples can be kept at room temperature in a desiccator. It should be noted, that the extraction methods showed significant differences in DNA amplification success. Thus, the extraction method should be taken into account when choosing the preservation method...|$|R

