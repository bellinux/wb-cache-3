1832|203|Public
5|$|Metaprogramming via C# {{attributes}} {{is part of}} the language. Many {{of these}} attributes duplicate the functionality of GCC's and VisualC++'s platform-dependent <b>preprocessor</b> directives.|$|E
5|$|PHP 3.0 is the {{successor}} of PHP/FI 2.0. Zeev Suraski and Andi Gutmans rewrote the parser in 1997 and formed {{the base of}} PHP 3, changing the language's name to the recursive acronym PHP: Hypertext <b>Preprocessor.</b> Afterwards, public testing of PHP 3 began, and the official launch came in June 1998. Suraski and Gutmans then started a new rewrite of PHP's core, producing the Zend Engine in 1999. They also founded Zend Technologies in Ramat Gan, Israel.|$|E
5|$|The loss of {{the ability}} to raise funds through the sale of land {{hampered}} the Company's ability to pay dividends to its shareholders, and caused its development of Southern Rhodesia to slow. Believing that membership in the union could help solve both problems, the Company now backed Southern Rhodesia's incorporation as South Africa's fifth province. However, this prospect proved largely unpopular among Southern Rhodesian settlers, most of whom wanted self-government, and came to vote for the RGA in large numbers. In the 1920 Legislative Council election, the RGA won ten of the 13 seats contested. A referendum on the colony's future was held on 27 October 1922—at the suggestion of Winston Churchill, then Britain's Colonial Secretary, continuing the initiative of his <b>preprocessor</b> Viscount Milner—and responsible government won the day by 59%. Southern Rhodesia was duly annexed by the Empire on 12 September 1923, and granted full self-government on 1 October the same year. The new Southern Rhodesian government immediately purchased the land from the British Treasury for £2million, and ten years later paid the same sum to the British South Africa Company for the country's mineral rights.|$|E
40|$|Bachelor work is thematically focused to {{problematic}} of CSS <b>preprocessors.</b> Own work is consist from creating web {{presentation in}} SASS preprocesor. Differences between each <b>preprocessors</b> SASS and LESS on real examples {{which you can}} find on web presentation. Comparing each <b>preprocessors</b> SASS and LESS with colections metods of multicriterial analyzes of variants...|$|R
50|$|Prior to FORTRAN 77, {{a number}} of <b>preprocessors</b> were {{commonly}} used to provide a friendlier language, with the advantage that the preprocessed code could be compiled on any machine with a standard FORTRAN compiler. These <b>preprocessors</b> would typically support structured programming, variable names longer than six characters, additional data types, conditional compilation, and even macro capabilities. Popular <b>preprocessors</b> included FLECS, iftran, MORTRAN, SFtran, S-Fortran, Ratfor, and Ratfiv. Ratfor and Ratfiv, for example, implemented a C-like language, outputting preprocessed code in standard FORTRAN 66. Despite advances in the Fortran language, <b>preprocessors</b> continue {{to be used for}} conditional compilation and macro substitution.|$|R
40|$|The aim of {{this thesis}} is to process and {{describe}} technology of CSS <b>preprocessors</b> in developing a web interface. Within my thesis I am going to present how to effectively create a website using these very useful tools which contains <b>preprocessors.</b> CSS <b>preprocessors</b> allows dynamic programming, this is a dynamic language DSL (Dynamic Stylesheet language), this close to more programming. The advantage beside the standard writing style rule is the benefit in writing object-oriented code. It is possible to use also binary math operations (multiplication, division, addition and subtraction) Within my thesis I will created questionnaire focused on the current extension CSS <b>preprocessors</b> to internet agencies deal with developing websites and professional community in Czech Republic...|$|R
25|$|Between {{the source}} and compile level, {{directives}} and build flags {{can be used to}} tune performance options in the source code and compiler respectively, such as using <b>preprocessor</b> defines to disable unneeded software features, optimizing for specific processor models or hardware capabilities, or predicting branching, for instance. Source-based software distribution systems such as BSD's Ports and Gentoo's Portage can take advantage of this form of optimization.|$|E
25|$|Although the {{generation}} of the CESSB signal can {{be integrated into the}} SSB modulator, it is feasible to separate {{the generation}} of the CESSB signal (e.g. in form of an external speech <b>preprocessor)</b> from a standard SSB radio. This requires that the standard SSB radio's modulator be linear-phase and have a sufficient bandwidth to pass the CESSB signal. If a standard SSB modulator meets these requirements, then the envelope control by the CESSB process is preserved.|$|E
25|$|The {{behavior}} of GCC's back end is partly specified by <b>preprocessor</b> macros and functions specific to a target architecture, for instance to define its endianness, word size, and calling conventions. The front {{part of the}} back end uses these to help decide RTL generation, so although GCC's RTL is nominally processor-independent, the initial sequence of abstract instructions is already adapted to the target. At any moment, the actual RTL instructions forming the program representation have {{to comply with the}} machine description of the target architecture.|$|E
40|$|Nonlinear <b>preprocessors,</b> {{including}} conventional clipping, blanking, joint blanking/clipping, {{and deep}} clipping, have been employed {{to mitigate the}} impulsive noise in orthogonal frequency division multiplexing-based power-line communications. Those nonlinear <b>preprocessors</b> are characterized by one or two thresholds, which are optimized to achieve an optimum output signal-to-noise ratio (SNR). In this paper, we aim to further improve the output SNR by linearly combining two nonlinear <b>preprocessors.</b> Both analytical and simulation {{results show that the}} proposed method yields better output SNR and symbol/bit error rate performance than the individual ones...|$|R
2500|$|There {{are also}} <b>preprocessors</b> used as {{server-side}} template engines. Examples: ...|$|R
50|$|Lexical <b>preprocessors</b> are the lowest-level of <b>preprocessors</b> as {{they only}} require lexical analysis, that is, they {{operate on the}} source text, prior to any parsing, by {{performing}} simple substitution of tokenized character sequences for other tokenized character sequences, according to user-defined rules. They typically perform macro substitution, textual inclusion of other files, and conditional compilation or inclusion.|$|R
25|$|In {{low-level}} languages, {{the concept}} of macros has become synonymous with textual substitution of source-code due to {{the widespread use of}} the C <b>preprocessor.</b> However, high-level languages such as Lisp pre-dated C in their use of macros that were far more powerful. It is this Lisp-like macro concept that Perl 6 will take advantage of. The power of this sort of macro {{stems from the fact that}} it operates on the program as a high-level data structure, rather than as simple text, and has the full capabilities of the programming language at its disposal.|$|E
25|$|There is {{a special}} {{notation}} called definite clause grammars (DCGs). A rule defined via -->/2 instead of :-/2 is expanded by the <b>preprocessor</b> (expand_term/2, a facility analogous to macros in other languages) according to a few straightforward rewriting rules, resulting in ordinary Prolog clauses. Most notably, the rewriting equips the predicate with two additional arguments, {{which can be used}} to implicitly thread state around, analogous to monads in other languages. DCGs are often used to write parsers or list generators, as they also provide a convenient interface to difference lists.|$|E
25|$|His first {{experience}} with actual computers was at the IBM New York Scientific Center {{when he was in}} high school. He was hired for the summer in 1970, following his senior year of high school, to write a numerical analysis program in Fortran. He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and {{spent the rest of the}} summer writing a text editor in APL and a <b>preprocessor</b> for the PL/I programming language on the IBM System/360.|$|E
5000|$|CLaMS is {{composed}} of four modules and several <b>preprocessors.</b> The four modules are ...|$|R
5000|$|Objective-C <b>preprocessors</b> have , {{which is}} like [...] but only {{includes}} the file once.|$|R
50|$|Yet more <b>preprocessors</b> {{allow the}} drawing of more complex {{pictures}} by generating output for pic.|$|R
25|$|The loss of {{this source}} of income {{hampered}} the Company's ability to pay dividends to its shareholders, and caused its development of the Rhodesias to slow. The Company now backed Southern Rhodesia's incorporation into South Africa, hoping its membership in the union could help solve both problems. However, this prospect proved largely unpopular in Southern Rhodesia, {{where most of the}} settlers wanted self-government rather than rule from Pretoria, and came to vote for the RGA in large numbers. In the 1920 Legislative Council election, the RGA won ten of the 13 seats contested. A referendum on the colony's future was held on 27 October 1922—at the suggestion of Winston Churchill, then Britain's Colonial Secretary, continuing the initiative of his <b>preprocessor</b> Lord Milner—and responsible government won the day. Just under 60% of voters backed responsible government from a turnout of 18,810; Marandellas was the only district to favour the union option, doing so by 443 votes to 433.|$|E
500|$|The {{following}} code is {{the fast}} inverse square root implementation from Quake III Arena, stripped of C <b>preprocessor</b> directives, but including the exact original comment text: ...|$|E
500|$|PHP is a {{server-side}} {{scripting language}} designed primarily for web development but also {{used as a}} general-purpose programming language. Originally created by Rasmus Lerdorf in 1994, the PHP reference implementation is now produced by The PHP Development Team. PHP originally stood for Personal Home Page, but it now stands for the [...] recursive acronym PHP: Hypertext <b>Preprocessor.</b>|$|E
50|$|Three <b>preprocessors</b> provide troff with drawing {{capabilities}} {{by defining}} a domain-specific language for describing the picture.|$|R
5000|$|Some Unix <b>preprocessors</b> {{traditionally}} provided [...] "assertions", {{which have}} little similarity to assertions used in programming.|$|R
40|$|This paper {{discusses}} {{a number}} of issues pertaining to blind identification of channels. The basics of blind identification are first discussed and a method called Vandermonde method is presented which is based on elementary linear system principles. Then some remarks are made about precoders with paraunitary antipodal <b>preprocessors.</b> It is argued that such <b>preprocessors</b> usually destroy signal richness which is a necessary feature in blind identification systems...|$|R
2500|$|C# {{features}} [...] "preprocessor directives" [...] (though it {{does not}} have an actual <b>preprocessor)</b> based on the C <b>preprocessor</b> that allow programmers to define symbols, but not macros. Conditionals such as , , and [...] are also provided.|$|E
2500|$|Attributes are {{entities}} of {{data that}} are stored as metadata in the compiled assembly. An attribute {{can be added to}} types and members like properties and methods. Attributes [...] better maintenance of <b>preprocessor</b> directives.|$|E
2500|$|The ITRANS {{transliteration}} {{scheme was}} developed for the ITRANS software package, a pre-processor for Indic scripts. [...] The user inputs in Roman letters and the ITRANS <b>preprocessor</b> converts the Roman letters into Devanāgarī (or other Indic scripts). [...] The latest version of ITRANS is version 5.30 released in July, 2001.|$|E
40|$|High-performance SAT solvers {{based on}} {{systematic}} search generally use either conflict driven clause learning (CDCL) or lookahead techniques to gain efficiency. Both styles of reasoning can gain from a preprocessing phase {{in which some}} form of deduction is used to simplify the problem. In this paper we undertake an empirical examination {{of the effects of}} several recently proposed <b>preprocessors</b> on both CDCL and lookahead-based SAT solvers. One finding is that the use of multiple <b>preprocessors</b> one after the other can be much more effective than using any one of them alone, but that the order in which they are applied is significant. We intend our results to be particularly useful to those implementing new <b>preprocessors</b> and solvers. ...|$|R
40|$|Abstract. This paper {{discusses}} {{a number}} of issues pertaining to blind identification of channels. The basics of blind identification are first discussed and a method called Vandermonde method is presented which is based on elementary linear system principles. Then some remarks are made about precoders with paraunitary antipodal <b>preprocessors.</b> It is argued that such <b>preprocessors</b> usually destroy signal richness which is a necessary feature in blind identification systems. 1 1...|$|R
40|$|Textual <b>preprocessors</b> {{similar to}} cpp might be consid-ered {{obsolete}} and ill-designed tools, {{but they are}} still widely used in practice from small to large software projects. C-like preprocessing, as described by ANSI C, and implemented by cpp, is a de facto approach for preprocessingnot only for C but also for programming languages as diverse as Fortran and Haskell. Moreover the design of sometextual <b>preprocessors</b> are similar to cpp [7, 11]...|$|R
2500|$|Only when {{receiving}} a message {{consisting of the}} atom 'code_switch' will the loop execute an external call to codeswitch/1 (?MODULE is a <b>preprocessor</b> macro for the current module). If {{there is a new}} version of the [...] "counter" [...] module in memory, then its codeswitch/1 function will be called. The practice of having a specific entry-point into a new version allows the programmer to transform state to what is required in the newer version. In our example we keep the state as an integer.|$|E
2500|$|This is because, as was {{realized}} in the 1960s, the concept of [...] "macro processing" [...] is independent {{of the concept of}} [...] "assembly", the former being in modern terms more word processing, text processing, than generating object code. The concept of macro processing appeared, and appears, in the C programming language, which supports [...] "preprocessor instructions" [...] to set variables, and make conditional tests on their values. Note that unlike certain previous macro processors inside assemblers, the C <b>preprocessor</b> is not Turing-complete because it lacks the ability to either loop or [...] "go to", the latter allowing programs to loop.|$|E
2500|$|GCC {{was first}} {{released}} March 22, 1987, available by FTP from MIT. Stallman {{was listed as}} the author but cited others for their contributions, including Jack Davidson and Christopher Fraser {{for the idea of}} using RTL as an intermediate language, Paul Rubin for writing most of the <b>preprocessor</b> and Leonard Tower for [...] "parts of the parser, RTL generator, RTL definitions, and of the Vax machine description." [...] Described as the [...] "first free software hit" [...] by Salus, the GNU compiler arrived just at the time when Sun Microsystems was unbundling its development tools from its operating system, selling them separately at a higher combined price than the previous bundle, which led many of Sun's users to buy or download GCC instead of the vendor's tools. By 1990, GCC supported thirteen computer architectures, was outperforming several vendor compilers, was shipped by Data General and NeXT with their workstations and was used by Lotus Development Corporation.|$|E
5000|$|Various libraries, <b>preprocessors</b> {{and other}} tools have been {{developed}} for existing programming languages without native Design by Contract support: ...|$|R
50|$|Both Sass and Less are CSS <b>preprocessors,</b> {{which allow}} writing clean CSS in a {{programming}} construct instead of static rules.|$|R
40|$|Abstract: Using data {{measured}} at the central station of the Hungarian baseline climate network meteorological <b>preprocessors</b> of air quality models has been determined. Calculation method of each parameter has been described in the New Hungarian Meteorological Standard. The final aim {{is to establish a}} long-term dataset with high temporal resolution for investigation of meteorological <b>preprocessors</b> for air quality dispersion models and for detecting the effects of global climate change on the local dispersion climate...|$|R
