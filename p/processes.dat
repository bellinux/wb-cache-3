10000|10000|Public
5|$|Andrei Kolmogorov {{developed}} in a 1931 paper {{a large part of}} the early theory of continuous-time Markov <b>processes.</b> Kolmogorov was partly inspired by Louis Bachelier's 1900 work on fluctuations in the stock market as well as Norbert Wiener's work on Einstein's model of Brownian movement. He introduced and studied a particular set of Markov <b>processes</b> known as diffusion <b>processes,</b> where he derived a set of differential equations describing the <b>processes.</b> Independent of Kolmgorov's work, Sydney Chapman derived in a 1928 paper an equation, now called the Chapman–Kolmogorov equation, in a less mathematically rigorous way than Kolmogorov, while studying Brownian movement. The differential equations are now called the Kolmogorov equations or the Kolmogorov–Chapman equations. Other mathematicians who contributed significantly to the foundations of Markov <b>processes</b> include William Feller, starting in the 1930s, and then later Eugene Dynkin, starting in the 1950s.|$|E
5|$|By {{complexity}} of technology: In situ technologies are usually classified either as true in situ <b>processes</b> or modified in situ <b>processes.</b> True in situ <b>processes</b> {{do not involve}} mining or crushing the oil shale. Modified in situ <b>processes</b> involve drilling and fracturing the target oil shale deposit to create voids in the deposit. The voids enable a better flow of gases and fluids through the deposit, thereby increasing the volume {{and quality of the}} shale oil produced.|$|E
5|$|Evolutionary {{developmental}} biology (informally, evo-devo) {{is a field}} of biological research that compares the developmental <b>processes</b> of different organisms to infer the ancestral relationships between them and how developmental <b>processes</b> evolved.|$|E
5000|$|The {{operating}} system kernel identifies each <b>process</b> by its <b>process</b> identifier. <b>Process</b> 0 {{is a special}} <b>process</b> that is created when the system boots; after forking a child <b>process</b> (<b>process</b> 1), <b>process</b> 0 becomes the swapper <b>process</b> (sometimes {{also known as the}} [...] "idle task"). <b>Process</b> 1, known as init, is the ancestor of every other <b>process</b> in the system.|$|R
40|$|In this article, agent based <b>process</b> {{management}} model is proposed, which {{is for the}} <b>process</b> management of knowledge worker and service workers {{in order to establish}} the basis for the new knowledge management system. In this article, we applied several methods from 6 -Sigma and personal software <b>process</b> for personal <b>process</b> definition, <b>process</b> execution and <b>process</b> measurement. This study attempts to improve the <b>process</b> execution accuracy through <b>process</b> visualisation and standardisation and to accumulate the base data to improve the <b>process</b> through measuring the <b>process</b> execution. We proposed guidelines and detail procedures for developing three advisor agents for guiding the <b>process</b> definition, <b>process</b> execution and <b>process</b> measurement. We showed the simple case study applied our guidelines. <b>Process</b> management, <b>process</b> improvement, agent, 6 -Sigma, personal software <b>process...</b>|$|R
30|$|In our case, the Gini {{coefficient}} {{measures the}} concentration of the periodic <b>process</b> demand on <b>process</b> variants and the master <b>process</b> resulting from a <b>process</b> variant profile. The Gini coefficient therefore directly depends on the assignment of <b>process</b> contexts to the master <b>process</b> and context-specific <b>process</b> variants. The more <b>process</b> contexts are served by the master <b>process,</b> the more demand concentrates on it. For complete standardization, the <b>process</b> demand concentrates on the master <b>process</b> entirely, and the corresponding Gini coefficient is G = 1 (if the master <b>process</b> fits all relevant <b>process</b> contexts). The more <b>process</b> demand concentrates on the master <b>process,</b> the stronger are the experience curve effects and, consequently, the more the <b>process</b> costs lower over time. Using the Gini coefficient is appealing because BPS can be easily measured as {{the concentration of}} the <b>process</b> demand on the master <b>process.</b> Moreover, each <b>process</b> variant profile leads to a distinct value of the (cost-weighted) Gini coefficient.|$|R
5|$|For {{a list of}} {{scattering}} <b>processes,</b> see Scattering.|$|E
5|$|Humans are {{corporeal}} beings and, as such, {{they are}} subject to examination and description by the natural sciences. Since mental <b>processes</b> are intimately related to bodily <b>processes,</b> the descriptions that the natural sciences furnish of human beings {{play an important role in}} the philosophy of mind. There are many scientific disciplines that study <b>processes</b> related to the mental. The list of such sciences includes: biology, computer science, cognitive science, cybernetics, linguistics, medicine, pharmacology, and psychology.|$|E
5|$|If a Poisson {{process is}} defined {{with a single}} {{positive}} constant, then the process is called a homogeneous Poisson process. The homogeneous Poisson process (in continuous time) {{is a member of}} important classes of stochastic <b>processes</b> such as Markov <b>processes</b> and Lévy <b>processes.</b>|$|E
40|$|Part 2 – Flexibility Issues Part 3 – Flexibility Support for Pre-specified <b>Process</b> Models Pre-specified <b>process</b> {{models and}} flexibility-by-design <b>Process</b> {{configuration}} Flexible <b>process</b> execution and handling of anticipated exceptions Handling unforeseen exceptions <b>Process</b> Evolution Part 4 – Loosely-specified <b>Process</b> Models Loosely-specified <b>process</b> models Constraint-based <b>process</b> models...|$|R
40|$|In this paper, multi-dimensional Wiener-Liu <b>process</b> is proposed. Wiener-Liu <b>process</b> {{is a type}} {{of hybrid}} <b>process,</b> it {{corresponds}} to Brownian motion (Wiener <b>process)</b> in stochastic <b>process</b> and Liu <b>process</b> in fuzzy <b>process.</b> In classical analysis, the basic operations are differential and integral. Correspondingly, Ito-Liu formula plays the role of Ito formula in stochastic <b>process</b> and Liu formula in fuzzy <b>process.</b> Meanwhile, Ito-Liu integral is the counterpart of Ito integral in stochastic <b>process</b> and Liu integral in fuzzy <b>process.</b> Based on Wiener-Liu <b>process,</b> multi-dimensional Ito-Liu formula and multi-dimensional Ito-Liu integral are discussed...|$|R
30|$|<b>Process</b> Capability {{characterizes the}} ability of a Stable Standard Software <b>Process</b> to achieve the <b>Process</b> Performance Specified for it, {{considering}} a particular Measure [4, 22]. <b>Process</b> Capability is obtained from a <b>Process</b> Performance Baseline and it is calculated in relation to a Specified <b>Process</b> Performance. A <b>Process</b> Capability is determined by applying a <b>Process</b> Capability Determination Procedure [22]. This kind of procedure defines a logical sequence of operations used to determine the capacity of a Stable Standard Software <b>Process</b> and to identify if it is a capable <b>process.</b> The following {{is an example of a}} <b>Process</b> Capability Determination Procedure: PCDP- 01 : calculate the <b>process</b> capability index using thecalculation formulaCp = (ULb-LLb)/(ULs-sLLs),where Cp = <b>process</b> capability index,ULb = processperformance baseline upper limit, LLb = <b>process</b> performancebaseline lower limit, ULs = specified <b>process</b> performanceupper limit andLLs = specified <b>process</b> performance lowerlimit. If Cp is < 1, verify if the <b>process</b> performance baselinelimits are withinthe specified <b>process</b> performance limits.In the affirmative case, the <b>process</b> is capable. Otherwise,the <b>process</b> is not capable.|$|R
5|$|In 1953 Doob {{published}} his book Stochastic <b>processes,</b> {{which had a}} strong influence on the theory of stochastic <b>processes</b> and {{stressed the importance of}} measure theory in probability.|$|E
5|$|Internal {{business}} processes: Design {{management as}} an innovation process, providing improvements in company performance and <b>processes.</b> Here, these innovations and <b>processes</b> are totally invisible to outsiders.|$|E
5|$|Like Equijubus, Probactrosaurus, Gongpoquansaurus, {{and other}} styracosternans, Eolambia has {{cervical}} vertebrae {{which are very}} opisthocoelous, meaning that their front ends are strongly convex while their back ends are strongly concave. Unusually, {{the front end of}} the third cervical is set slightly higher than the back end, which is not seen in any other cervical vertebrae. Vertebrae from further back in the neck have a greater angle between the elongate articular <b>processes</b> known as the postzygapophyses, and also more elongate transverse <b>processes.</b> On the transverse <b>processes,</b> there are further articular <b>processes</b> – the rounded parapophyses and rod-like diapophyses – are located. In the rearmost cervicals, there is also a deep depression separating the postzygapophyses, and the neural spines have steeply-angled front margins, which has the effect of creating prominent spike-like projections.|$|E
3000|$|Business <b>process</b> {{standardization}} To {{determine the}} appropriate BPS level for a distinct <b>process,</b> {{it is necessary}} to account for <b>process</b> variants and <b>process</b> contexts. Moreover, <b>process</b> variants must be split into context-specific <b>process</b> variants and a standardized master <b>process.</b>|$|R
30|$|In the literature, {{there is}} no {{consensus}} whether the master <b>process</b> fits all or only a subset of the relevant <b>process</b> contexts. Some authors refer to the unification of <b>process</b> variants against the master <b>process</b> when defining BPS (Münstermann et al. 2010), an argumentation that implicitly makes the case for the master <b>process</b> being applicable to all contexts. Other authors highlight that the master <b>process</b> may not fit all <b>process</b> contexts due to local requirements such as legislative requirements, local market imperatives, or variations in the product/service offering (Reichert et al. 2015; Tregear 2015). This argumentation poses that the master <b>process</b> does not fit all, but at least several <b>process</b> contexts. In fact, aligning <b>process</b> variants against a master <b>process</b> would not make sense if the master <b>process</b> fitted very few <b>process</b> contexts only. We define the master <b>process</b> as a particular <b>process</b> variant that fits more than one and up to all <b>process</b> contexts. Context-specific <b>process</b> variants fit only one <b>process</b> context.|$|R
30|$|What is the {{difference}} between canonical <b>process</b> and the Wiener <b>process?</b> First, canonical <b>process</b> is an uncertain <b>process</b> while the Wiener <b>process</b> is a stochastic <b>process.</b> Second, almost all sample paths of canonical <b>process</b> are Lipschitz continuous functions while almost all sample paths of the Wiener <b>process</b> are continuous but non‐Lipschitz functions. Third, canonical <b>process</b> has a variance t 2 while the Wiener <b>process</b> has a variance t at each time t.|$|R
5|$|Skorokhod {{function}} {{spaces are}} frequently {{used in the}} theory of stochastic <b>processes</b> because it often assumed that the sample functions of continuous-time stochastic <b>processes</b> belong to a Skorokhod space. Such spaces contain continuous functions, which correspond to sample functions of the Wiener process. But the space also has functions with discontinuities, which means that the sample functions of stochastic <b>processes</b> with jumps, such as the Poisson process (on the real line), are also members of this space.|$|E
5|$|The Brownian motion {{process and}} the Poisson process (in one dimension) are both {{examples}} of Markov <b>processes</b> in continuous time, while random walks on the integers and the gambler's ruin problem are examples of Markov <b>processes</b> in discrete time.|$|E
5|$|The encyclopedist Song Yingxing (1587–1666) {{documented}} a {{wide array}} of technologies, metallurgic and industrial <b>processes</b> in his Tiangong Kaiwu encyclopedia of 1637. This includes mechanical and hydraulic powered devices for agriculture and irrigation, nautical technology such as vessel types and snorkeling gear for pearl divers, the annual <b>processes</b> of sericulture and weaving with the loom, metallurgic <b>processes</b> such as the crucible technique and quenching, manufacturing <b>processes</b> such as for roasting iron pyrite in converting sulphide to oxide in sulfur used in gunpowder compositions – illustrating how ore was piled up with coal briquettes in an earthen furnace with a still-head that sent over sulfur as vapor that would solidify and crystallize – and the use of gunpowder weapons such as a naval mine ignited by use of a rip-cord and steel flint wheel.|$|E
40|$|<b>Process</b> {{models are}} an {{essential}} component of business <b>process</b> management and are found in various information systems such as workflow management systems, enterprise resource planning systems, and supply chain management systems. <b>Process</b> modeling and analysis are key steps in business <b>process</b> management. However, most existing activity-based <b>process</b> modeling paradigms found in <b>process</b> management tools lack a mathematical formalism, have limited expressive power, or have little analytical capability. Consequently, <b>process</b> modeling and analysis in the industry remain an art rather than a science. In this dissertation, we first propose a logic-based workflow verification approach by applying propositional logic with constraints to verifying the correctness of both acyclic and cyclic workflow models. We demonstrate that this approach is capable of detecting <b>process</b> anomalies in workflow models. We then propose <b>process</b> graphs as a graphical and mathematical tool for business <b>process</b> modeling and analysis. We formally define the syntax and semantics of <b>process</b> graphs and their constructs. We show that <b>process</b> graphs can not only model all types of execution order of activities, but also support multi-level abstraction, modular modeling, and analysis of the correctness of <b>process</b> models. We apply <b>process</b> graphs to defining and classifying <b>process</b> anomalies, and demonstrate that the proper use of <b>process</b> graphs can prevent certain <b>process</b> anomalies. We also propose <b>process</b> logic as a logical formalism and mathematical method to represent <b>process</b> models for the purpose of <b>process</b> verification. We formally define the syntax and semantics of <b>process</b> logic to reflect the characteristics of <b>process</b> structures in a more precise way. We establish a formal relationship between <b>process</b> logic and graphical representations of <b>process</b> models, and transform the problem of verifying the correctness of <b>process</b> models into the problem of determining the validity of <b>process</b> argument forms in <b>process</b> logic. We demonstrate that <b>process</b> logic can be used to verify completely the correctness of activity-based <b>process</b> models. <b>Process</b> graphs and <b>process</b> logic provide a theoretical foundation for the modeling, analysis, and verification of activity-based <b>process</b> models that are most widely used in the applications of business <b>process</b> management...|$|R
5000|$|In {{business}} <b>process</b> modelling {{the enterprise}} <b>process</b> model {{is often referred}} to as the business <b>process</b> model. <b>Process</b> models are core concepts in the discipline of <b>process</b> engineering. <b>Process</b> models are: ...|$|R
40|$|Rapid product {{development}} {{relies heavily on}} quick and reliable <b>process</b> planning and knowledge reuse. <b>Process</b> configuration borrows the principles of product configuration and applies them to <b>process</b> planning. It allows the reuse of hierarchical, historical and case-based manufacturing <b>process</b> knowledge to generate <b>process</b> plans efficiently and effectively. This paper presents a systematic knowledge model for manufacturing <b>process</b> cases. The model represents <b>process</b> knowledge {{at different levels of}} granularity and to facilitate <b>process</b> configuration. With this knowledge model the <b>process</b> knowledge is categorized into 6 levels: (i) core <b>process</b> skeletons, (ii) <b>process</b> networks, (iii) <b>process</b> routes, (iv) <b>process</b> segments, (v) processes/workplan, and (vi) operations/working step. Based on the systematic knowledge model, this paper also proposes an approach to achieve rapid <b>process</b> configuration by reusing the <b>process</b> knowledge and by performing the involved configuration rules so as to create an appropriate, reliable and effective <b>process</b> plan. The prototype for a graphical <b>process</b> planner based on this knowledge model is developed and an aerospace example is used to validate the proposed <b>process</b> knowledge model and <b>process</b> configuration. © 2008 Elsevier Ltd. All rights reserved...|$|R
5|$|The {{file system}} {{approach}} allows Plan 9 <b>processes</b> {{to be managed}} with simple file management tools such as ls and cat; however, the <b>processes</b> cannot be copied and moved as files.|$|E
5|$|The {{theory of}} {{stochastic}} <b>processes</b> still {{continues to be}} a focus of research, with yearly international conferences on the topic of stochastic <b>processes.</b>|$|E
5|$|This teleonomy is {{the quality}} whereby the process of natural {{selection}} creates and preserves traits that are seemingly fitted for the functional roles they perform. The <b>processes</b> by which the changes occur, {{from one generation to}} another, are called evolutionary <b>processes</b> or mechanisms. The four most widely recognised evolutionary <b>processes</b> are natural selection (including sexual selection), genetic drift, mutation and gene migration due to genetic admixture. Natural selection and genetic drift sort variation; mutation and gene migration create variation.|$|E
5000|$|The {{system call}} [...] {{is used to}} create a new session {{containing}} a single (new) <b>process</b> group, with the current <b>process</b> as both the session leader and the <b>process</b> group leader of that single <b>process</b> group. <b>Process</b> groups are identified by a positive integer, the <b>process</b> group ID, which is the <b>process</b> identifier of the <b>process</b> that is (or was) the <b>process</b> group leader. <b>Process</b> groups need not necessarily have leaders, although they always begin with one. Sessions are identified by the <b>process</b> group ID of the session leader. POSIX prohibits the change of the <b>process</b> group ID of a session leader.|$|R
5000|$|Common {{alternative}} names include: flow chart, <b>process</b> flowchart, functional flowchart, <b>process</b> map, <b>process</b> chart, functional <b>process</b> chart, business <b>process</b> model, <b>process</b> model, <b>process</b> flow diagram, {{work flow}} diagram, business flow diagram. The terms [...] "flowchart" [...] and [...] "flow chart" [...] are used interchangeably.|$|R
40|$|Abstract. <b>Process</b> {{breadth and}} depth {{completeness}} {{is an important factor}} for evaluating <b>process</b> design adequacy. Current <b>process</b> design strategies and toolsets poorly support the {{breadth and depth}} of business <b>process</b> logic resulting in incomplete business <b>process</b> designs. A framework that integrates the <b>process,</b> activity and resource viewpoints is proposed to address this inadequacy. This integrated viewpoint results from refocusing business <b>process</b> design practice from the traditional individual <b>process</b> silos towards integrated enterprise-wide <b>process</b> network design. Labeled as Value Configuration Design, enterprisewide <b>process</b> design is the next evolution towards adequate business <b>process</b> design. ...|$|R
5|$|Types of glial cell are astrocytes (including Bergmann glia), oligodendrocytes, ependymal cells (including tanycytes), radial glial {{cells and}} microglia. Astrocytes {{are the largest}} of the glial cells. They are stellate cells with many <b>processes</b> {{radiating}} from their cell bodies. Some of these <b>processes</b> end as perivascular end-feet on capillary walls. The glia limitans of the cortex is made up of astrocyte foot <b>processes</b> that serve in part to contain the cells of the brain.|$|E
25|$|While these <b>processes</b> are not primary {{metalworking}} <b>processes,</b> {{they are}} often performed before or after metalworking <b>processes.</b>|$|E
25|$|As {{the example}} shows, <b>processes</b> may be created on remote nodes, and {{communication}} {{with them is}} transparent {{in the sense that}} communication with remote <b>processes</b> works exactly as communication with local <b>processes.</b>|$|E
5000|$|...Work in <b>Process</b> - Mixing 551,000 -Work in <b>Process</b> - Finishing 629,000 -Raw Materials 1,180,000 -Work in <b>Process</b> - Mixing 230,000 -Work in <b>Process</b> - Finishing 270,000 -Wages and Salaries Payable 500,000 -Work in <b>Process</b> - Mixing 665,000 -Work in <b>Process</b> - Finishing 405,000 -Manufacturing Overhead 1,070,000 -Work in <b>Process</b> - Finishing 1,850,000 -Work in <b>Process</b> - Mixing 1,850,000 -Finished Goods 3,200,000 -Work in <b>Process</b> - Finishing 3,200,000 ...|$|R
5000|$|Conversely, a child <b>process</b> whose parent <b>process</b> terminates {{before it}} does becomes an orphan <b>process.</b> Such {{situations}} are typically handled {{with a special}} [...] "root" [...] (or [...] "init") <b>process,</b> which is assigned as the new parent of a <b>process</b> when its parent <b>process</b> exits. This special <b>process</b> detects when an orphan <b>process</b> terminates and then retrieves its exit status, allowing the system to deallocate the terminated child <b>process.</b>|$|R
50|$|Some {{operating}} systems handle a child <b>process</b> whose parent <b>process</b> has terminated {{in a special}} manner. Such an orphan <b>process</b> becomes a child of a special root <b>process,</b> which then waits for the child <b>process</b> to terminate. Likewise, a similar strategy is used {{to deal with a}} zombie <b>process,</b> which is a child <b>process</b> that has terminated but whose exit status is ignored by its parent <b>process.</b> Such a <b>process</b> becomes the child of a special parent <b>process,</b> which retrieves the child's exit status and allows the operating system to complete the termination of the dead <b>process.</b> Dealing with these special cases keeps the system <b>process</b> table in a consistent state.|$|R
