382|850|Public
500|$|The {{construction}} of the prototype at Ashford railway works {{was approved by the}} SECR management to commence in 1919. However, Ashford works was heavily engaged in tackling a backlog of repair and maintenance work caused by government restrictions during the First World War with little spare capacity for new construction projects, particularly when approval for the {{construction of}} the N1 prototype coincided with a <b>priority</b> <b>order</b> for 15 2-cylinder Nclass locomotives. In consequence, the works backlog meant that only 12 Nclass locomotives were completed between June 1920 and October 1922.|$|E
2500|$|If a given set of ordered {{numbers is}} {{assigned}} numeric priorities (distinct numbers unrelated to their values), these priorities {{may be used}} to construct a Cartesian tree for the numbers, a binary tree that has as its inorder traversal sequence the sorted sequence of the numbers and that is heap-ordered by priorities. Although more efficient construction algorithms are known, it is helpful to think of a Cartesian tree as being constructed by inserting the given numbers into a binary search tree in <b>priority</b> <b>order.</b> Thus, by choosing the priorities either to be a set of independent random real numbers in the unit interval, or by choosing them to be a random permutation of the numbers from [...] to [...] (where [...] is the number of nodes in the tree), and by maintaining the heap ordering property using tree rotations after any insertion or deletion of a node, it is possible to maintain a data structure that behaves like a random binary search tree. Such a data structure is known as a treap or a randomized binary search tree.|$|E
2500|$|Post's {{problem was}} solved with a method called the {{priority}} method; a proof using {{this method is}} called a priority argument. [...] This method is primarily used to construct recursively enumerable sets with particular properties. To use this method, the desired properties of the set to be constructed are broken up into an infinite list of goals, known as requirements, so that satisfying all the requirements will cause the set constructed to have the desired properties. [...] Each requirement is assigned to a natural number representing the priority of the requirement; so 0 is assigned to the most important priority, 1 to the second most important, and so on. [...] The set is then constructed in stages, each stage attempting to satisfy one of more of the requirements by either adding numbers to the set or banning numbers from the set so that the final set will satisfy the requirement. It may happen that satisfying one requirement will cause another to become unsatisfied; the <b>priority</b> <b>order</b> is used {{to decide what to}} do in such an event.|$|E
5000|$|... and a <b>priority</b> <b>ordering</b> {{specification}} {{to resolve}} conflicts among conflicting rules.|$|R
40|$|This paper {{focuses on}} {{priority}} assignment for real- time systems using fixed priority scheduling. It introduces and defines {{the concept of}} a "robust" priority ordering: the most appropriate <b>priority</b> <b>ordering</b> to use in a system subject to variable amounts of additional interference from sources such as interrupts, operating system overheads, exception handling, cycle stealing, and task execution time overruns. The paper describes a Robust Priority Assignment algorithm that can find the robust <b>priority</b> <b>ordering</b> {{for a wide range of}} fixed priority system models and additional interference functions. Proofs are given for a number of interesting theorems about robust priority assignment, and the circumstances under which a "Deadline minus Jitter" monotonic partial ordering forms part of the robust ordering. The paper shows that "Deadline minus Jitter" monotonic <b>priority</b> <b>ordering</b> is the robust <b>priority</b> <b>ordering</b> for a specific class of system, and that this property holds essentially independent of the additional interference function...|$|R
40|$|Abstract: This note {{deals with}} the problem of minimising the {{expected}} sum of quadratic holding and shortage inventory costs when a single, failure-prone machine produces multiple part-types. Shu and Perkins (2001) introduce the problem and, by restricting the set of control policies to the class of prioritised hedging point (PHP) policies, establish simple, analytical expressions for the optimal hedging points provided that the <b>priority</b> <b>ordering</b> of the part-types is given. However, the determination of an optimal <b>priority</b> <b>ordering</b> is left by the authors as an open question. This leaves an embedded sequencing problem which we focus on in this note. We define a lower bound for the problem, introduce a test bed for future developments, and propose three dynamic programming approaches (with or without the lower bound) for determining the optimal priority orderings for the instances of the test bed. This is an initial step in a research project aimed at solving the optimal <b>priority</b> <b>ordering</b> problem, which will allow evaluating the performance of future heuristic and metaheuristic procedures...|$|R
2500|$|The {{criterion}} for retaining tour cards {{at the end}} of the season also changed. Through 2012, the top 125 players on the money list {{at the end of}} the PGA Tour season retained their tour cards. For the 2013 season only, the top 125 players on both the money list and the FedEx Cup points list {{at the end of the}} FedEx Cup regular season in August retained their cards. The tour also said that it would decide at a later time whether to keep this aspect of the qualifying system in place in future seasons. Otherwise, the planned move by the tour to have the top 125 players on the FedEx Cup points list retain their tour cards will take effect with the 2014 season. The next 75 players on the points list, along with the top 75 on the money list of the Web.com Tour at the end of that tour's regular season, will be eligible to play a series of three tournaments in September known as the Web.com Tour Finals. The Finals field, however, is not expected to consist of all 150 players, as some of the PGA Tour players will still be exempt by other criteria, such as a tournament win in the previous two years. A total of 50 PGA Tour cards for the next season will be awarded at the end of the Finals. The 25 leading money winners during the Web.com Tour regular season will receive cards, and total money earned during the Finals will determine the remaining 25 card earners. For all 50 new card earners, their positions on the PGA Tour's <b>priority</b> <b>order</b> for purposes of tournament entry will be based on money earned in the Finals. [...] College players who turn professional can enter the series if their earnings are equivalent to a top-200 PGA Tour or top-75 Web.com Tour finish.|$|E
2500|$|The {{idea of the}} {{priority}} method for constructing a r.e. set X is to list a countable sequence of requirements that X must satisfy. For example, to construct a r.e. set X between 0 and 0prime& {{it is enough to}} satisfy the requirements Ae and Be for each natural number e, where Ae requires that the oracle machine with index e does not compute 0prime& from X and Be requires that the Turing machine with index e (and no oracle) does not compute X. [...] These requirements are put into a priority ordering, which is an explicit bijection of the requirements and the natural numbers. The proof proceeds inductively with one stage for each natural number; these stages {{can be thought of as}} steps of time during which the set X is enumerated. [...] At each stage, numbers may be put into X or forever prevented from entering X in an attempt to satisfy requirements (that is, force them to hold once all of X has been enumerated). [...] Sometimes, a number can be enumerated into X to satisfy one requirement but doing this would cause a previously satisfied requirement to become unsatisfied (that is, to be injured). [...] The <b>priority</b> <b>order</b> on requirements is used to determine which requirement to satisfy in this case. [...] The informal idea is that if a requirement is injured then it will eventually stop being injured after all higher priority requirements have stopped being injured, although not every priority argument has this property. [...] An argument must be made that the overall set X is r.e. and satisfies all the requirements. Priority arguments can be used to prove many facts about r.e. sets; the requirements used and the manner in which they are satisfied must be carefully chosen to produce the required result.|$|E
5000|$|The Service Discipline or <b>Priority</b> <b>order</b> that {{jobs in the}} queue, or waiting line, are served: ...|$|E
40|$|This paper {{addresses}} {{the problem of}} determining the most robust priority assignment for CAN messages that are subject to transmission errors due to Electromagnetic Interference. In the presence of errors on the bus, CAN messages have a non-zero probability of missing their deadlines. An appropriate choice of <b>priority</b> <b>ordering</b> can minimise the overall worst-case deadline failure probability resulting in a more robust system. This paper shows that “Deadline minus jitter” monotonic priority assignment, commonly used for priority assignment in commercial CAN systems, does not always result in the most robust <b>priority</b> <b>ordering.</b> A Robust <b>Priority</b> Assignment algorithm is presented that computes the most robust <b>priority</b> <b>ordering</b> for CAN messages subject to bit errors on the bus. This algorithm is optimal {{in the sense that}} it can be used to (i) maximise the number of errors tolerated, (ii) maximise the delay tolerated by any message, or (iii) minimise the probability of any message failing to meet its deadline. This algorithm is efficient and appropriate for use in an engineering context...|$|R
50|$|A <b>{{priority}}</b> <b>ordering</b> {{over the}} defeasible {{rules and the}} defeaters can be given. During the process of deduction, the strict rules are always applied, while a defeasible rule can be applied only if no defeater of a higher priority specifies that it should not.|$|R
40|$|Shu and Perkins {{deals with}} the problem of minimising the {{expected}} sum of quadratic buffer cost when a single, failure-prone machine produces multiple part-types. They restrict the set of control policies to the class of prioritised hedging point (PHP) policies and determine simple, analytical expressions for the optimal hedging points, provided that the <b>priority</b> <b>ordering</b> of the part-types is given. This paper addresses the determination of the optimal <b>priority</b> <b>ordering</b> for PHP policies, and reports the results of a computational experiment. The conclusions are that instances of up to approximately twenty-five part-types can be solved to optimality in short computing times, that it is worthwhile to use dominance relations and that the influence of the values of some parameters is insignifican...|$|R
50|$|Relate the {{problems}} in <b>priority</b> <b>order,</b> applying problem analysis techniques to identify and find solutions for each one of them.|$|E
50|$|The Act {{authorised}} a {{large number}} of branch connections and other lines, and these were constructed in <b>priority</b> <b>order,</b> with {{the central part of the}} through connection delayed.|$|E
5000|$|Moby Part-of-Speech {{contains}} 233,356 words fully {{described by}} part(s) of speech, listed in <b>priority</b> <b>order.</b> The {{format of the}} file is word\parts-of-speech, with the following parts of speech being identified: ...|$|E
40|$|The schedulability {{of systems}} using fixed {{priority}} pre-emptive scheduling {{can be improved}} {{by the use of}} non-pre-emptive regions {{at the end of each}} task's execution, an approach referred to as deferred pre-emption. Choosing the appropriate length for the final non-pre-emptive region of each task is a trade-off between improving the worst-case response time of the task itself and increasing the amount of blocking imposed on higher priority tasks. In this paper we present an optimal algorithm for determining both the <b>priority</b> <b>ordering</b> of tasks and the lengths of their final non-pre-emptive regions. This algorithm is optimal for fixed priority scheduling with deferred pre-emption, in the sense that it is guaranteed to find a schedulable combination of <b>priority</b> <b>ordering</b> and final non-pre-emptive region lengths if such a schedulable combination exists...|$|R
40|$|The {{deadline}} monotonic <b>priority</b> <b>ordering</b> is not optimal for schedulability when offsets {{are allowed}} in the task model. In addition, once schedulability is satisfied the maximization of system utility by schedul-ing tasks with higher values becomes important. This motivates {{the development of an}} optimal <b>priority</b> <b>ordering</b> algorithm, called UBPO, based on task utility by which higher priorities can be associated with more important tasks. The algorithm is optimal {{in the sense that it}} can find any feasible ordering whenever one exists, plus that its lexicographical distance relative to the optimal ordering is minimized, when <b>priorities</b> are <b>ordered</b> from the lowest to the highest priorities. Simulations show that the algorithm is much more efficient than another optimal algorithm in general, where although the measures being optimized are different, most of the time the final priority orderings are found to be the same. Further simulations demonstrate that the tractable schedulability test can be used with very small penalty on the priority orderings obtained. Together with previous works conducted in imprecise computation based on fixed priority scheduling, the package provides a more comprehensive set of scheduling theories and algorithms for supporting real-time AI systems. ...|$|R
40|$|Abstract — The schedulability {{of systems}} using fixed {{priority}} pre-emptive scheduling {{can be improved}} {{by the use of}} non-preemptive regions {{at the end of each}} task’s execution; an approach referred to as deferred pre-emption. Choosing the appropriate length for the final non-pre-emptive region of each task is a trade-off between improving the worst-case response time of the task itself and increasing the amount of blocking imposed on higher priority tasks. In this paper we present an optimal algorithm for determining both the <b>priority</b> <b>ordering</b> of tasks and the lengths of their final non-pre-emptive regions. This algorithm is optimal for fixed priority scheduling with deferred pre-emption, in the sense that it is guaranteed to find a schedulable combination of <b>priority</b> <b>ordering</b> and final nonpre-emptive region lengths if such a schedulable combination exists. Keywords-real-time scheduling; schedulability analysis; fixed priority; deferred pre-emption; optimal priority assignment; nonpre-emptive scheduling. I...|$|R
5000|$|... “The {{duration}} of asylum proceedings {{is dependent on}} various factors, notably possible additional investigations being done to clarify the case, but also the <b>priority</b> <b>order</b> in which cases are being treated.” ...|$|E
5000|$|The [...] {{function}} attribute allows defining global prioritized destructor functions: when [...] returns, {{these functions}} are called in <b>priority</b> <b>order</b> before the process terminates. See also: Hacking {{the art of}} exploitation.|$|E
5000|$|Parties (usually {{district}} party assemblies) {{decide on}} the nomination of candidates before the election. When co-nomination is assigned, candidates are elected according to personal votes. When <b>priority</b> <b>order</b> is assigned, only an extreme number of personal votes can change the rank.|$|E
5000|$|Proposals {{to change}} <b>priorities</b> in <b>order</b> {{to lighten the}} load of Israeli citizens.|$|R
40|$|This paper {{refers to}} a {{diagnostic}} engine based on de Kleer’s GDE. It discusses two aspects of efficient focusing: First, an ATMS is presented that combines focusing techniques with the lazy label evaluation. Second, a candidate generator is presented that prunes the search space using a preference ordering and the knowledge about the last conflict that ruled out a diagnosis. The preferred candidates are generated sequentially according to a predefined <b>priority</b> <b>ordering.</b> That ordering {{can be used to}} focus both, the ATMS and the candidate generator, on a constant number of diagnoses. ...|$|R
40|$|In a {{real-time}} database system, {{an application}} may assign a value to a transaction {{to reflect the}} return it expects to receive if the transaction commits before its deadline. Most prior research on real-time database systems has focused on systems where all transactions are assigned the same value, with the performance goal being to minimize the number of missed deadlines. When transactions may be assigned different values, {{the goal of the}} system shifts to maximizing the sum of the values of those transactions that commit by their deadlines. Minimizing the number of missed deadlines becomes a secondary concern in such systems. In this paper, we address the problem of establishing a <b>priority</b> <b>ordering</b> among transactions characterized by both values and deadlines that results in maximizing the realized value. Of particular interest is the tradeoff that needs to be established between these values and deadlines in constructing the <b>priority</b> <b>ordering.</b> Using a detailed simulation model, we ev [...] ...|$|R
5000|$|To {{determine}} the initial 2015 PGA Tour priority rank, the top 25 Web.com Tour's regular season players were [...] "zippered" [...] {{with the top}} 25 Web.com Tour Finals players. This <b>priority</b> <b>order</b> was then reshuffled {{several times during the}} 2015 season.|$|E
50|$|Applicants {{will then}} be invited to attend an {{interview}} by respective institutions. Usually only the first programme in the <b>priority</b> <b>order</b> of each institution will provide a subject-based interview but there are various exceptional cases. After the interviews applicants will receive feedbacks from the universities before they make their final choices.|$|E
50|$|This {{is a list}} of golf {{players who}} {{graduated}} from the Web.com Tour Finals in 2014. The top 25 players on the Web.com Tour's regular season money list in 2014 earned their PGA Tour card for 2015. The Finals determined the other 25 players to earn their PGA Tour cards and their <b>priority</b> <b>order.</b>|$|E
40|$|The {{theory of}} belief {{revision}} developed by Gardenfors {{and his colleagues}} characterizes the classes of reasonable belief revision operations. However, some of the assumptions made {{in the theory of}} belief revision are unrealistic from a computational point of view. We address this problem by considering revision operations that are based on a <b>priority</b> <b>ordering</b> over a set of sentences representing a belief state instead of using preference relations over all sentences that are accepted in a belief state. In addition to providing a semantic justification for such operations, we investigate also the computational complexity. We show how to generate an epistemic entrenchment ordering for a belief state from an arbitrary <b>priority</b> <b>ordering</b> over a set of sentences representing the belief state and show that the resulting revision is very efficient. Finally, we show that some schemes for generating revision operations from bases can encode the preference relations more concisely than others. 1 [...] ...|$|R
40|$|The authors present {{semantics}} for logic programs using term rewrite systems. Reading program {{lines from}} left to right (so reversing the arrows), considering the result as a rewrite system, immediately gives the usual declarative semantics (the least Herbrand model). Then the authors add a <b>priority</b> <b>ordering</b> on the rewrite rules, and obtain a procedural semantics for Prolog with depth-first search rule. This gives the authors different semantics in the same settin...|$|R
5000|$|Vietorisz {{worked in}} the field of applied and {{theoretical}} economics. An early example of his theoretical contribution is his method to quantize for <b>priority</b> <b>ordering</b> of projects in planning. Another example is his theory of [...] "Decentralization in NonConvex System" [...] that was highlighted in Econometrica. [...] The aim was to represent a two-level planning and decision making system within the traditional Edgeworth box diagram, but extended for non-convex analysis.|$|R
5000|$|Best-in-class {{marketers}} can {{be characterized}} as value creators because their primary focus is on using data to make market, customer, and product/service decisions that create value for customers and shareholders. As a result, MO organizations are actively recruiting and developing people with the following skills, in <b>priority</b> <b>order,</b> in order to create greater value: ...|$|E
50|$|This {{is a list}} {{of players}} who {{graduated}} from the Web.com Tour Finals in 2013. The top 25 players on the Web.com Tour's regular season money list in 2013 earned their PGA Tour card for 2014. The Web.com Tour Finals determined the other 25 players to earn their PGA Tour cards and the <b>priority</b> <b>order</b> of all 50.|$|E
5000|$|The <b>priority</b> <b>order</b> for the Re-Entry Draft was {{reverse order}} of finish in 2014, {{taking into account}} playoff performance. Unlike other 2014-15 offseason drafts, the 2015 {{expansion}} sides Orlando City SC and New York City FC were placed {{at the bottom of}} the selection order. Available to all teams in Stage 1 of the Re-Entry draft were: ...|$|E
40|$|Abstract In {{practice}} {{we often}} face {{the problem of}} assigning indivisible objects (e. g., schools, housing, jobs, offices) to agents (e. g., students, homeless, workers, professors) when monetary compensations are not possible. We show that a rule that satisfies consistency, strategy-proofness, and efficiency must be an efficient generalized priority rule; i. e., it must adapt to an acyclic priority structure, except – maybe – {{for up to three}} agents in each object’s <b>priority</b> <b>ordering...</b>|$|R
40|$|This paper {{presents}} sparse {{and large-scale}} data structure for mathematical information systems. A lot of　studies previously researched are discussed　from the various points of view，which mean information systems，software engineering，artificial intelligence and knowledge information systems. This paper proposes {{three kinds of}} sparse data structures，that is，a matrix with rows and columns，the spread sheets and search trees. The first structure {{is used for the}} constrained load (power) flow of practical electric power systems. This is an optimization problem which obtains a feasible solution with considering <b>priority</b> <b>orders.</b> The problem becomes large-scale in applying to real cases. The second exploits display expression of too large-scale spread sheet with sparse data structure which is impossible to show the whole sheet on one screen. The display expression of a computer only shows cells with data after automatically dropping other cells of no data. The third is for desirable constraint satisfaction in the field of artificial intelligence. The constraint satisfaction means large-scale assignment problems with <b>priority</b> <b>orders.</b> The solution technique is to search state space by using several search trees. All of the three data structures treat sparse and large-scale in searching andor its data stored...|$|R
40|$|This paper {{looks at}} deontic logic as {{resulting}} from both a betterness ordering on states (i. e., a ‘deontic preference’) and a <b>priority</b> <b>ordering</b> on properties (i. e., a ‘law’ explicitly representing {{a standard of}} behavior). The correspondence between these two orderings offers a rich perspective from which to look at deontic scenarios and puzzles, and in particular at contrary-to-duties. The framework naturally lends itself to describing dynamics involving both orderings, thereby providing a new analysis of norm change as ‘betterness change’...|$|R
