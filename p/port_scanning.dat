115|195|Public
2500|$|Because of the {{inherently}} open and decentralized {{architecture of the}} Internet, lawmakers have struggled since its creation to define legal boundaries that permit effective prosecution of cybercriminals. Cases involving <b>port</b> <b>scanning</b> activities are {{an example of the}} difficulties encountered in judging violations. Although these cases are rare, {{most of the time the}} legal process involves proving that an intent to commit a break-in or unauthorized access existed, rather than just the performance of a port scan: ...|$|E
2500|$|The {{information}} gathered by a port scan has many legitimate uses including network inventory and the verification {{of the security}} of a network. <b>Port</b> <b>scanning</b> can, however, also be used to compromise security. Many exploits rely upon port scans to find open ports and send specific data patterns in an attempt to trigger a condition known as a buffer overflow. [...] Such behavior can compromise {{the security of a}} network and the computers therein, resulting in the loss or exposure of sensitive information and the ability to do work.|$|E
2500|$|All {{forms of}} <b>port</b> <b>scanning</b> {{rely on the}} {{assumption}} that the targeted host is compliant with RFC [...] Although this is the case most of the time, there is still a chance a host might send back strange packets or even generate false positives when the TCP/IP stack of the host is non-RFC-compliant or has been altered. This is especially true for less common scan techniques that are OS-dependent (FIN scanning, for example). The TCP/IP stack fingerprinting method also relies on these types of different network responses from a specific stimulus to guess the type of the operating system the host is running.|$|E
50|$|The threat level {{caused by}} a <b>port</b> <b>scan</b> can vary greatly {{according}} to the method used to scan, the kind of <b>port</b> <b>scanned,</b> its number, {{the value of the}} targeted host and the administrator who monitors the host. But a <b>port</b> <b>scan</b> is often viewed as a first step for an attack, and is therefore taken seriously because it can disclose much sensitive information about the host.Despite this, the probability of a <b>port</b> <b>scan</b> alone followed by a real attack is small. The probability of an attack is much higher when the <b>port</b> <b>scan</b> is associated with a vulnerability scan.|$|R
40|$|<b>Port</b> <b>scans</b> {{represent}} a sizable portion of todayâ€™s Internet traffic. However, {{there has been}} little research characterizing <b>port</b> <b>scan</b> activity. The goal of this project is to analyze sample network traces to discover and classify properties of <b>port</b> <b>scans.</b> We hope that this work will help to generate better network intrusion detection systems and increase general network security. ...|$|R
25|$|The threat level {{caused by}} a <b>port</b> <b>scan</b> can vary greatly {{according}} to the method used to scan, the kind of <b>port</b> <b>scanned,</b> its number, {{the value of the}} targeted host and the administrator who monitors the host. But a <b>port</b> <b>scan</b> is often viewed as a first step for an attack, and is therefore taken seriously because it can disclose much sensitive information about the host.|$|R
50|$|In some jurisdictions, {{unauthorized}} <b>port</b> <b>scanning</b> is illegal.|$|E
5000|$|The {{following}} propagation {{methods are}} sub-modules to the <b>port</b> <b>scanning</b> engine: ...|$|E
50|$|Its list of {{features}} includes <b>port</b> <b>scanning,</b> transferring files, and port listening, {{and it can}} be used as a backdoor.|$|E
25|$|Despite this, the {{probability}} of a <b>port</b> <b>scan</b> alone followed by a real attack is small. The probability of an attack is much higher when the <b>port</b> <b>scan</b> is associated with a vulnerability scan.|$|R
40|$|<b>Port</b> <b>scans</b> are {{continuously}} used by both {{worms and}} human attackers to probe for vulnerabilities in Internet facing systems. In this paper, {{we present a}} new method to efficiently detect TCP <b>port</b> <b>scans</b> in very high-speed links. The main idea behind our approach is to early discard those handshake packets that are not strictly needed to reliably detect <b>port</b> <b>scans.</b> We show that with {{just a couple of}} Bloom filters to track active servers and TCP handshakes we can easily discard about 85...|$|R
40|$|The {{vulnerabilities}} {{existing in}} the Internet such as insecure network architectures are exploited to gain un-authorized {{access to a}} network. A launch of an attack usually begins with a deliberate process of analyzing potential victims. This attack is called scan attack. The most common scan attack type is called TCP <b>port</b> <b>scan</b> attack as TCP is a connection oriented protocol. A TCP <b>port</b> <b>scan</b> attack misuses the process of establishing connection between two hosts for communication (TCP three-way handshake) by a half open sacn type (not completing the connection). The existing TCP <b>port</b> <b>scan</b> attack detection approaches have many issues such as detection is not done in real-time, no automated mitigation approach is available and many <b>port</b> <b>scan</b> detection approaches are hardware dependent. In this thesis, based on drawbacks of the existing TCP <b>port</b> <b>scan</b> detection approaches, the requirements for a TCP <b>port</b> <b>scan</b> attack detection and mitigation algorithm are derived and the algorithm is proposed to be developed on an architecture called OrchSec SDN architecture (an orchestrator based SDN architecture). Software-Defined Networking (SDN) is a new paradigm in networking where the data plane (consisting of routers, switches) is separated from the control plane (makes decisions on traffic in the network). The architecture used is called the OrchSec SDN architecture and it separates the monitoring and control functions of the network and uses an orchestrator to coordinate the communication between them. The OrchSec SDN architecture utilizes the network monitoring and SDN control functions and hence is used to develop the TCP <b>port</b> <b>scan</b> attack detection and mitigation algorithm. Finally, {{the behavior of the}} proposed algorithm is tested and validated. The most important future work would be to extend the algorithm to detect and mitigate all the existing <b>port</b> <b>scan</b> attack types...|$|R
50|$|The {{networking}} {{segment of}} Hacking explains {{the basics of}} the OSI model and basic networking concepts, including packet sniffing, connection hijacking, denial of service and <b>port</b> <b>scanning.</b>|$|E
5000|$|An {{uncommon}} use of netcat is <b>port</b> <b>scanning.</b> Netcat is {{not considered}} the best tool for this job, {{but it can be}} sufficient (a more advanced tool is nmap) ...|$|E
5000|$|SuperScan {{is a free}} connect-based <b>port</b> <b>scanning</b> {{software}} {{designed to}} detect open TCP and UDP ports on a target computer, determine which services are running on those ports, and run queries such as whois, ping, ICMP traceroute, and Hostname lookups.|$|E
5000|$|... #Caption: Zenmap, showing {{results for}} a <b>port</b> <b>scan</b> against Wikipedia ...|$|R
30|$|In this paper, we {{designed}} a new algorithm that detects on-line <b>port</b> <b>scan</b> attacks. The proposed method is mainly {{based on the}} sliding HyperLogLog algorithm [10] that we adapted to the context of <b>port</b> <b>scan</b> detection in IP traffic. Sliding HyperLogLog is an efficient algorithm that estimates the number of distinct elements over a sliding window. It is {{able to deal with}} a massive data stream and provides an accurate estimate using a very small memory. We used sliding HyperLogLog to analyze traffic and perform an on-line counting that we completed with a decisional mechanism that identifies <b>port</b> <b>scan</b> attacks.|$|R
40|$|Along {{with the}} growth of the {{computer}} system and networks, the mysterious and malicious threats and attacks on the computer systems are also increasing exponentially. There is a need of continuous evaluation of the security of a network and enhancement of the network attack detection system, which will be able to detect different attacks along with the characteristics of the attacks. In previous work, the <b>port</b> <b>scan</b> attack is considered as precursors to an attack and the target was to provide the mitigation technique for the particular <b>port</b> <b>scan</b> attack. There have been relatively few empirical studies done for <b>port</b> <b>scan</b> related attacks and those that do exist may no longer reflect the impact of such attacks on the functionalities of the UTM/network device and on the network. To address this lack of knowledge, this experiment is carried out in fully controlled test bed environment wherein a set of varieties of attack can be simulated and impact of attack(s) is analyzed and appropriate mitigation technique is suggested to mitigate the <b>port</b> <b>scan</b> attack. The experiment result indicates that the <b>port</b> <b>scan</b> mitigation implementation on UTM helps reducing the load on the UTM device and reduces network congestion effectively...|$|R
5000|$|Malicious ("black hat") hackers (or crackers) {{commonly}} use <b>port</b> <b>scanning</b> {{software to}} find which ports are [...] "open" [...] (unfiltered) {{in a given}} computer, {{and whether or not}} an actual service is listening on that port. They can then attempt to exploit potential vulnerabilities in any services they find.|$|E
5000|$|These {{issue are}} mitigated, {{to a large}} extent, if TCPMUX is used on a secure local network; and the [...] "HELP" [...] command might also (could also) return an empty list, {{making it harder for}} attackers {{to use it as a}} <b>port</b> <b>scanning</b> tool even if the network is not secured.|$|E
50|$|The {{purpose of}} <b>port</b> <b>scanning</b> is finding the open ports on the {{computers}} {{that were found}} with a host scan. When a port scan is started on a network without making use {{of the results of}} a host scan, much time is wasted when many IP addresses in the address range are vacant.|$|E
5000|$|Hide the {{computer}} from <b>port</b> <b>scans</b> by not responding to unsolicited network traffic ...|$|R
25|$|A <b>port</b> <b>scan</b> or portscan is {{a process}} that sends client {{requests}} to a range of server port addresses on a host, with the goal of finding an active port; this is not a nefarious process in and of itself. The majority of uses of a <b>port</b> <b>scan</b> are not attacks, but rather simple probes to determine services available on a remote machine.|$|R
40|$|This paper {{describes}} an experimental approach {{to determine the}} correlation between <b>port</b> <b>scans</b> and attacks. Discussions in the security community often state that <b>port</b> <b>scans</b> {{should be considered as}} precursors to an attack. However, very few studies have been conducted to quantify the validity of this hypothesis. In this paper, attack data were collected using a test-bed dedicated to monitoring attackers. The data collected consist of <b>port</b> <b>scans,</b> ICMP scans, vulnerability scans, successful attacks and management traffic. Two experiments were performed to validate the hypothesis of linking <b>port</b> <b>scans</b> and vulnerability scans to the number of packets observed per connection. Customized scripts were then developed to filter the collected data and group them on the basis of scans and attacks between a source and destination IP address pair. The correlation of the filtered data groups was assessed. The analyzed data consists of forty-eight days of data collection for two target computers on a heavily utilized subnet. 1...|$|R
50|$|On {{computer}} networks, {{a service}} scan identifies the services {{running on a}} list of open ports. This is closely tied to <b>port</b> <b>scanning</b> and some tools (e.g. nmap, nessus) support both. A service scan is preferable to referring to a port list, as it can identify services running on non-standard ports, which is common in practice.|$|E
50|$|The {{project and}} initial Internet Draft {{specification}} was announced on 15 August 2014, following the revelations about the GCHQ project HACIENDA, which uses <b>port</b> <b>scanning</b> to find vulnerable systems for Five Eyes intelligence agencies. The draft {{was written by}} researchers from the Technische UniversitÃ¤t MÃ¼nchen, Jacob Appelbaum of the Tor Project and Holger Kenn from Microsoft.|$|E
50|$|ShieldsUp is {{an online}} <b>port</b> <b>scanning</b> service created by Steve Gibson of Gibson Research Corporation and hosted at grc.com. The {{purpose of this}} utility is to alert the users of any ports that have been opened through their {{firewalls}} or through their NAT routers. The utility can scan the most common file sharing ports, {{as well as all}} service ports (1-1056), and user defined ports, in sets of 64.|$|E
40|$|<b>Port</b> <b>scan</b> {{correlation}} aims {{to differentiate}} between benign and malicious scans. In this paper we will examine a new method of profiling <b>port</b> <b>scan</b> activity {{in an attempt to}} link different source IP addresses to being the same end user. A data mining approach DynamicWEB based upon the COBWEB conceptual clustering algorithm is shown along with some preliminary results of it functioning within the context of scan correlation...|$|R
5000|$|These packets often contain {{unsolicited}} {{commercial or}} network control messages, or {{are the result}} of <b>port</b> <b>scans</b> and worm activities.|$|R
5|$|Norton stealthed all ports, {{according}} to PC Magazine. <b>Port</b> <b>scans</b> were unsuccessful. The firewall blocked all exploit attempts by Core Impact.|$|R
50|$|To {{choose an}} exploit and payload, some {{information}} about the target system is needed, such as operating system version and installed network services. This information can be gleaned with <b>port</b> <b>scanning</b> and OS fingerprinting tools such as Nmap. Vulnerability scanners such as Nexpose, Nessus, and OpenVAS can detect target system vulnerabilities. Metasploit can import vulnerability scanner data and compare the identified vulnerabilities to existing exploit modules for accurate exploitation.|$|E
50|$|The {{practice}} {{of attempting to}} connect {{to a range of}} ports in sequence on a single computer is commonly known as <b>port</b> <b>scanning.</b> This is usually associated either with malicious cracking attempts or with network administrators looking for possible vulnerabilities to help prevent such attacks. Port connection attempts are frequently monitored and logged by computers. The technique of port knocking uses a series of port connections (knocks) from a client computer to enable a server connection.|$|E
5000|$|Because of the {{inherently}} open and decentralized {{architecture of the}} Internet, lawmakers have struggled since its creation to define legal boundaries that permit effective prosecution of cybercriminals. Cases involving <b>port</b> <b>scanning</b> activities are {{an example of the}} difficulties encountered in judging violations. Although these cases are rare, {{most of the time the}} legal process involves proving that an intent to commit a break-in or unauthorized access existed, rather than just the performance of a port scan: ...|$|E
2500|$|Teo, Lawrence (December, 2000). Network Probes Explained: [...] Understanding <b>Port</b> <b>Scans</b> and Ping Sweeps. Linux Journal, Retrieved September 5, 2009, from ...|$|R
50|$|Norton stealthed all ports, {{according}} to PC Magazine. <b>Port</b> <b>scans</b> were unsuccessful. The firewall blocked all exploit attempts by Core Impact.|$|R
30|$|IP {{networks}} are constantly targeted by new techniques of {{denial of service}} attacks (SYN flooding, <b>port</b> <b>scan,</b> UDP flooding, etc), causing service disruption and considerable financial damage. The on-line detection of DoS attacks in the current high-bit rate IP traffic is a big challenge. We propose in this paper an on-line algorithm for <b>port</b> <b>scan</b> detection. It is composed of two complementary parts: First, a probabilistic counting part, where the number of distinct destination ports is estimated by adapting a method called â€˜sliding HyperLogLogâ€™ to the context of <b>port</b> <b>scan</b> in IP traffic. Second, a decisional mechanism is performed on the estimated number of destination ports in order to detect in real time any behavior that {{could be related to}} a malicious traffic. This latter part is mainly based on the exponentially weighted moving average algorithm (EWMA) that we adapted to the context of on-line analysis by adding a learning step (supposed without attacks) and improving its update mechanism. The obtained <b>port</b> <b>scan</b> detecting method is tested against real IP traffic containing some attacks. It detects all the <b>port</b> <b>scan</b> attacks within a very short time response (of about 30 s) and without any false positive. The algorithm uses a very small total memory of less than 22 kb and has a very good accuracy on the estimation of the number of destination ports (a relative error of about 3.25 %), which is in agreement with the theoretical bounds provided by the sliding HyperLogLog algorithm.|$|R
