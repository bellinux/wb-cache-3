200|739|Public
5|$|Certain {{standards}} that exist for paper checks {{also apply to}} Image Replacement Documents. These standards include ANSX9.100-160-2 (Magnetic Ink Printing (MICR) Part 2 External <b>Processing</b> <b>Code</b> (EPC) Field Use), ANSX9.100-181 (Specifications for TIFF Image Format for Image Exchange), ANSX9.100-187 (Specifications for Electronic Exchange of Check and Image Data - Domestic), and Draft Standard for Trial Use (DSTU)X9.37 (Electronic Exchange of Check and Image Data).|$|E
25|$|When a {{hardware}} device triggers an interrupt, the operating system's kernel decides {{how to deal}} with this event, generally by running some <b>processing</b> <b>code.</b> The amount of code being run depends on the priority of the interrupt (for example: a person usually responds to a smoke detector alarm before answering the phone). The processing of hardware interrupts is a task that is usually delegated to software called a device driver, which may be part of the operating system's kernel, part of another program, or both. Device drivers may then relay information to a running program by various means.|$|E
500|$|Each {{substitute}} check processed for forward {{collection is}} encoded with a [...] "4" [...] as the External <b>Processing</b> <b>Code</b> (EPC) in position44 of the MICR line as required under ANSX9.90. An {{example of the}} forward collection process for substitute checks involves the following steps for financial institutions that process deposits through the Federal Reserve System: ...|$|E
40|$|The IAEA is {{presently}} {{engaged in a}} project {{which is designed to}} use a step-by-step approach to verifying the accuracy of neutron cross section <b>processing</b> <b>codes.</b> This report presents the results of the first step, or round, of comparisons. The first round of comparisons is intended to test the ability of <b>processing</b> <b>codes</b> to accurately produce, cold (0 Kelvin), unshielded, flat weighted multigroup cross sections; in principle this should be the simplest quantity that can be derived from evaluations. At present contributions to this project have been received from forty-two participants using thirteen different <b>processing</b> <b>codes.</b> In the initial comparisons not one participant has been able to obtain agreement with benchmark results; differences varied from 2 % to a factor of over 50. However, this project has already in its initial phase been successful in detecting and correcting problems with a number of cross section <b>processing</b> <b>codes</b> and, in particular, has led to tne practical result of identifying accurate codes and of improving the ENDF/B-V dosimetry library as distributed in 620 groups...|$|R
50|$|Dave Hale wrote {{several of}} the heavy lifting <b>processing</b> <b>codes</b> {{as well as most}} of the core {{scientific}} and graphics libraries.|$|R
30|$|To {{assess the}} {{validity}} of our method, we have compared our results with the ones obtained with robust <b>processing</b> <b>codes</b> {{from the work of}} Alan D. Chave (BIRRP, Bounded Influence Remote Reference Processing, Chave et al. 1987; Chave and Thomson 2004) and Gary Egbert (EMTF, Egbert 1997). For simplicity, we consider error bars as they were calculated by the robust <b>processing</b> <b>codes,</b> even if they can be discussed in more detail (Wawrzyniak et al. 2013; Chave 2015; Wawrzyniak et al. 2015).|$|R
50|$|The {{following}} is a table specifying the message type and <b>processing</b> <b>code</b> for each transaction type.|$|E
5000|$|This {{transaction}} links an inbound <b>processing</b> <b>code</b> {{specified in}} a partner profile to a function module.|$|E
5000|$|This {{transaction}} determines a <b>processing</b> <b>code</b> {{based on}} the partner profile identified by the control record of the IDoc.|$|E
50|$|Healthcare {{documentation}} {{serves as}} a legal document, validates the patient care provided, facilitates claims <b>processing,</b> <b>coding,</b> billing and reimbursement, and facilitates quality reviews.|$|R
30|$|We {{compared}} the MT response functions obtained {{by using the}} wavelet coefficients with those from the application of other <b>processing</b> <b>codes</b> for both datasets.|$|R
30|$|For single site processing, we {{processed}} single site MT stations {{by removing}} the remote station for all <b>processing</b> <b>codes.</b> For visual comparison, only BIRRP results are shown, but conclusions remain the same for EMTF.|$|R
5000|$|BSD-derived systems, {{including}} FreeBSD, NetBSD, OpenBSD, DragonFly BSD, and macOS (they {{also use}} the reference TZ database <b>processing</b> <b>code</b> as their TZ POSIX API implementation); ...|$|E
50|$|Halide is a {{computer}} programming language designed for writing digital image <b>processing</b> <b>code</b> that takes advantage of memory locality, vectorized computation and multi-core CPUs and GPUs. Halide is implemented as an internal DSL in C++.|$|E
50|$|The center {{provides}} {{education for}} professionals, students and youth. Classes and workshops topics focus on media literacy including video, audio, physical computing, image <b>processing,</b> <b>code</b> art and web production. Youth {{education is a}} strong focus of the organization. Current partnerships include Coyote Central and Northwest African American Museum.|$|E
40|$|Abstract—Recent {{progress}} of optical <b>code</b> <b>processing</b> technology��� � is explained. Ultra-high speed time domain, spectral domain, hybrid��� � domain, and multiple optical <b>code</b> <b>processing</b> deices and systems are shown. As {{application of these}} technologies, OCDMA-PON, OPS network, and ultra high-speed optical clock generation will be demonstrated. Index Terms—optical code and label, optical <b>processing,</b> optical <b>code</b> division multiplexing (OCDM), optical packet switching (OPS), ultra high-speed optical clock, photonic network I...|$|R
40|$|Beat {{induction}} is {{the process}} in which a regular isochronous pattern (the beat) is activated while listening to music. This beat, often tapped along by musicians, is a central issue in time keeping in music performance. But also for non-experts the process seems to be fundamental to the <b>processing,</b> <b>coding</b> and appreciation of temporal patterns. The induce...|$|R
40|$|Data <b>processing</b> <b>codes</b> {{developed}} to process ground motion at the Nevada Test Site for the Weapons Test Seismic Investigations Project are used today {{as part of}} the program to process ground motion records for the Nevada Nuclear Waste Storage Investigations Project. The work contained in this report documents and lists codes and verifies the ``PSRV`` code. 39 figs...|$|R
5000|$|Each {{substitute}} check processed for forward {{collection is}} encoded with a [...] "4" [...] as the External <b>Processing</b> <b>Code</b> (EPC) in position 44 of the MICR line as required under ANS X9.90. An {{example of the}} forward collection process for substitute checks involves the following steps for financial institutions that process deposits through the Federal Reserve System: ...|$|E
50|$|Certain {{standards}} that exist for paper checks {{also apply to}} Image Replacement Documents. These standards include ANS X9.100-160-2 (Magnetic Ink Printing (MICR) Part 2 External <b>Processing</b> <b>Code</b> (EPC) Field Use), ANS X9.100-181 (Specifications for TIFF Image Format for Image Exchange), ANS X9.100-187 (Specifications for Electronic Exchange of Check and Image Data - Domestic), and Draft Standard for Trial Use (DSTU) X9.37 (Electronic Exchange of Check and Image Data).|$|E
5000|$|Intercepting Filter is a JavaEE pattern {{which creates}} {{pluggable}} filters to process common {{services in a}} standard manner without requiring changes to core request <b>processing</b> <b>code.</b> The filters intercept incoming requests and outgoing responses, allowing preprocessing and post-processing, and these filters can be added or removed unobstrusively without changing existing code. [...] This pattern applies reusable processing transparently {{before and after the}} actual request execution by the front and page controllers.|$|E
40|$|Techniques for the {{evaluation}} of complex polynomials with one and two variables are introduced. Polynomials arise in may areas such as control systems, image and signal <b>processing,</b> <b>coding</b> theory, electrical networks, etc., and their evaluations are time consuming. This paper introduces new evaluation algorithms that are straightforward with fewer arithmetic operations. Comment: 15 pages, 0 figure...|$|R
30|$|Ping An {{received}} her B.S. and M.S. degrees from Hefei University of Technology, Hefei, China, in 1990 and 1993, respectively, and the Ph.D. degree in communication and information systems from Shanghai University, Shanghai, China, in 2002. She {{is currently a}} professor in School of Communication and Information Engineering, Shanghai University. Her research interests include stereoscopic and three-dimensional vision analysis and image and video <b>processing,</b> <b>coding,</b> and application.|$|R
40|$|A re<iew is {{presented}} of recent develop-ments in nuclear data, computational m~thods, and computer codes, especially as pertains to fusion reactor nucleonics, Important nuclear data measurements, evaluations, nuclear model c~des and <b>processing</b> <b>codes</b> are discussed. Progress in solution accel-eration and deterministic streaming methods for discrete-ordinates codes is covered, along &ith comments on recent Monte Carlo developments. Finally, sensitivity and uncertainty analysis methcds are reviewed...|$|R
50|$|Saint Dane is right. The Reality Bug {{has become}} far too realistic; {{its use of}} fears to dilute the jumps has a placebo effect on people, in that if they die in their fantasy, the death is real. Aja put Lifelight into {{suspense}} to keep the jumpers safe {{and to try to}} find a solution. Only one man can stop the rapidly evolving virus; Dr. Zetlin, who invented Lifelight and the only one to know of the origin code, the key to purging the bug from the <b>processing</b> <b>code.</b>|$|E
5000|$|In January 2006 Steve Gibson accused Microsoft of {{intentionally}} {{putting a}} backdoor into the Windows Metafile <b>processing</b> <b>code</b> in Windows 2000 and Windows XP. Gibson claimed that while reverse engineering the Windows Metafile format, {{he could run}} arbitrary code by using a [...] "nonsensical" [...] value in the metafile, and concluded Microsoft had intentionally designed Windows this way so it could run code on Windows computers without the user's knowledge. Microsoft's Stephen Toulouse responded in a Microsoft Security Response Center blog post the next day, saying the behavior was not intentional.|$|E
50|$|When a {{hardware}} device triggers an interrupt, the operating system's kernel decides {{how to deal}} with this event, generally by running some <b>processing</b> <b>code.</b> The amount of code being run depends on the priority of the interrupt (for example: a person usually responds to a smoke detector alarm before answering the phone). The processing of hardware interrupts is a task that is usually delegated to software called a device driver, which may be part of the operating system's kernel, part of another program, or both. Device drivers may then relay information to a running program by various means.|$|E
40|$|International audienceA new steganographic method called STABYLO is {{introduced}} {{in this research}} work. Its main advantage is to be much lighter than the so-called HUGO, WOW, and UNIWARD schemes, {{the state of the}} art steganographic processes. To achieve the proposed goal, famous experimented components of signal <b>processing,</b> <b>coding</b> theory, and cryptography are combined together, leading to a scheme that can reasonably face up-to-date steganalysers...|$|R
5000|$|The {{database}} engine {{also supports}} transaction <b>processing.</b> So, <b>code</b> such as: TStart (...) Set ^Capital("France")="Paris" [...] Set ^Country("Paris")="France" [...] TCommit ...|$|R
40|$|Programs that {{manipulate}} data at subword level, i. e. bit sections {{within a}} word, are common {{place in the}} embedded domain. Examples of such applications include media processing as well as network <b>processing</b> <b>codes.</b> These applications spend significant amounts of time packing and unpacking narrow width data into memory words. The execution time and memory overhead of packing and unpacking operations can be greatly reduced by providing direct instruction set support for manipulating bit sections...|$|R
50|$|In {{communications}} and information <b>processing,</b> <b>code</b> {{is a system}} of rules to convert information—such as a letter, word, sound, image, or gesture—into another form or representation, sometimes shortened or secret, for communication through a channel or storage in a medium. An early example is the invention of language which enabled a person, through speech, to communicate {{what he or she}} saw, heard, felt, or thought to others. But speech limits the range of communication to the distance a voice can carry, and limits the audience to those present when the speech is uttered. The invention of writing, which converted spoken language into visual symbols, extended the range of communication across space and time.|$|E
50|$|OSS both as API and as {{software}} {{has been}} criticized by some developers, such as Paul Davis and Lennart Poettering. Often heard arguments against OSS are: the API is practically impossible to virtualize, it lacks support for modern audio features such as timer-based scheduling or proper surround sound support, inability of its developers {{to work with the}} Linux kernel community, lack of integration with modern kernel features such as the device model, too low-level interface, as well as general rejection of its design with moving a lot of signal <b>processing</b> <b>code</b> into the kernel. Most of these criticisms were either specific to the Linux implementation and not to the OSS API itself, or have been addressed in OSS version 4.|$|E
5000|$|D version 1, {{has limited}} closure support. For example, the above code {{will not work}} correctly, because the {{variable}} a is on the stack, and after returning from test (...) , {{it is no longer}} valid to use it (most probably calling foo via dg (...) , will return a 'random' integer). This can be solved by explicitly allocating the variable 'a' on heap, or using structs or class to store all needed closed variables and construct a delegate from a method implementing the same code. Closures can be passed to other functions, {{as long as they are}} only used while the referenced values are still valid (for example calling another function with a closure as a callback parameter), and are useful for writing generic data <b>processing</b> <b>code,</b> so this limitation, in practice, is often not an issue.|$|E
40|$|Abstract — While the {{computational}} {{power of}} Field Programmable Gate Arrays (FPGA) makes them attractive as code accelerators, {{the lack of}} high-level language programming tools is a major obstacle to their wider use. Graphics Processing Units (GPUs), on the other hand, have benefitted from advanced and widely used high-level programming tools. This paper evaluates the performance, throughput and energy of both FPGAs and GPUs on image <b>processing</b> <b>codes</b> using high-level language programming tools for both. I...|$|R
30|$|In both {{frequency}} bands (Figs.  6, 7), the response functions obtained with the wavelet coefficients were {{comparable to those}} obtained with both <b>processing</b> <b>codes.</b> For response functions in the frequency band covered by geomagnetic pulsations (low-frequency band), wavelet inversion was also in agreement with robust processing even if the source was not as impulsive as sferics. Figure  5 also demonstrates {{that the use of}} robust statistics on the wavelet coefficients of only two events allowed for the recovery of the response functions with good accuracy.|$|R
40|$|Recent {{progress}} of optical <b>code</b> <b>processing</b> technology _ is explained. Ultra-high speed time domain, spectral domain, hybrid _ domain, and multiple optical <b>code</b> <b>processing</b> deices and systems are shown. As {{application of these}} technologies, OCDMA-PON, OPS network, and ultra high-speed optical clock generation will be demonstrated. </p...|$|R
