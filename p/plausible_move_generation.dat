2|197|Public
40|$|In games {{where the}} number of legal moves is too high, it is not {{possible}} to do full-width search to a depth sufficient for good play. <b>Plausible</b> <b>move</b> <b>generation</b> (PMG) is an important search alternative in such domains. In this paper we propose a method for <b>plausible</b> <b>move</b> <b>generation</b> in shogi. During move generation, Move Merit Analysis (MMA) assigns a value to each move based on the plausible move generator(s) that generated the move. PMG with MMA on average reduces {{the number of}} moves to 54 % of the total number of legal moves with 99 % accuracy. Tests show that PMG with MMA outperforms full-width search in shogi...|$|E
40|$|In games {{where the}} number of legal moves is too high, it is not {{possible}} to do full-width search to a depth sufficient for good play. <b>Plausible</b> <b>move</b> <b>generation</b> (PMG) is an important search alternative in such domains. In this paper we propose a new method for <b>plausible</b> <b>move</b> <b>generation</b> in shogi. During move generation, Move Merit Analysis (MMA) gives a value to each move based on the plausible move generator(s) that generated the move. These values can be used for different cut-off schemes. We investigate the following alternatives: 1) Keep all moves with a positive MMA value; 2) Order the moves according to their MMA value and use cut-off thresholds to keep the best N moves. PMG with MMA and cut-off thresholds can save between 46 % and 68 % of the total number of legal moves with an accuracy between 99 % and 93 %. Tests show that all versions of shogi programs using PMG with MMA outperform an equivalent shogi program using full-width search. It is also shown that MMA is vital for [...] ...|$|E
40|$|We {{describe}} {{the development of}} a Go playing computer program that combines the use of hard Artificial Intelligence (AI) techniques (alpha-beta search trees) with soft AI techniques (neural networks). The concept is based on a model of human play where selection of <b>plausible</b> <b>moves</b> is made using a gestalt process based on experience and the <b>plausible</b> <b>moves</b> are subjected to an objective analysis. The performance of the program is analysed by play against a standard computer Go program and it is shown that the use of hard AI enhances the performance of the soft AI system...|$|R
5000|$|In about 2004, {{he had an}} {{opportunity}} to tell Alan Kotok that [...] "7 7" [...] would have done better than [...] "4 3 2 2 1 1 1 1 0 0" [...] in Kotok-McCarthy's [...] subroutine which generated each player's next <b>plausible</b> <b>moves.</b>|$|R
40|$|The acceptance-probability-controlled {{simulated}} annealing with an adaptive <b>move</b> <b>generation</b> procedure, an optimization technique {{derived from the}} {{simulated annealing}} algorithm, is presented. The adaptive <b>move</b> <b>generation</b> procedure was compared against the random <b>move</b> <b>generation</b> procedure on seven multiminima test functions, {{as well as on}} the synthetic data, resembling the optical constants of a metal. In all cases the algorithm proved to have faster convergence and superior escaping from local minima. This algorithm was then applied to fit the model dielectric function to data for platinum and aluminum. link_to_subscribed_fulltex...|$|R
50|$|A {{problem with}} this {{approach}} arises during <b>move</b> <b>generation.</b> Each <b>move</b> has to be checked to ensure {{it is on the}} board, significantly slowing down the process. One solution is to use a 12x12 array instead, with the outer edges filled with, say, the value 99. During <b>move</b> <b>generation,</b> the operation to check for a piece on the destination square will also indicate whether the destination square is off the board.|$|R
50|$|Belle's final {{incarnation}} {{was completed}} in 1980. It consisted of further improvements to the speed of <b>move</b> <b>generation</b> and evaluation.|$|R
40|$|The {{popularity}} of simulated annealing comes from {{its ability to}} find close to optimal solutions for NP-hard combinatorial optimization problems. Unfortunately, current implementations of the method usually require massive computation time. This paper presents a general annealing schedule which speeds up simulated annealing significantly when compared with general schedules available in the literature. The annealing schedule, which lowers the temperature at every step and keeps the system in quasi-equilibrium at all times, is derived from a new quasi-equilibrium criterion. For a given <b>move</b> <b>generation</b> strategy, this schedule is shown to give the minimum final average cost among all schedules that maintain the system in quasi- equilibrium. An alternate form of the schedule is derived that explicitly relates <b>move</b> <b>generation</b> to temperature decrement. This leads to a control method for the <b>move</b> <b>generation</b> strategy that further minimizes the final average cost...|$|R
40|$|The {{popularity}} of simulated annealing comes from {{its ability to}} find close to optimal solutions for NP- hard combinatorial optimization problems. Unfortunately, the method has a major drawback: its massive requirement of computation time. In this dissertation, we present an efficient annealing schedule which speeds up simulated annealing {{by a factor of}} up to twenty-four when compared with general schedules currently available in the literature. The efficient annealing schedule, which lowers the temperature at every step and keeps the system in quasi-equilibrium at all times, is derived from a new quasiequilibrium criterion. For a given <b>move</b> <b>generation</b> strategy and a given number of steps, this schedule is shown to give the minimum final average cost among all schedules that maintain the system in quasi-equilibrium. Furthermore, with the introduction of two models, we derive an alternate form of this schedule that relates <b>move</b> <b>generation</b> to temperature decrement. At every step, the <b>move</b> <b>generation</b> is controlled to minimize the response time of the system to a chang...|$|R
50|$|Machine code programmers {{have another}} alternative. Using 4 bits per square, an entire row can be {{represented}} in 32 bits, and the board in 8 registers (with an additional one for remaining position information). By use of a jump table, adding the piece value to the program counter can {{go directly to the}} code to generate moves for this type of piece on this square. Although the program is longer than for a conventional <b>move</b> <b>generation</b> methods, no checks for the edge of the board are required, and no moves off the board are considered, increasing <b>move</b> <b>generation</b> speed.|$|R
40|$|Computing an {{effective}} strategy in games with incomplete information {{is much more}} difficult than in games where the status of every relevant factor is known. A weighted heuristic approach selects the move in a given position that maximizes a weighted sum of known factors, where the weights have been optimized over a large random sample of games. Probabilistic search is an alternative approach that generates a random set of scenarios, simulates how <b>plausible</b> <b>moves</b> perform under each scenario, and selects the move with the "best" overall performance. This paper compares the effectiveness of these approaches for the game of Scrabble...|$|R
50|$|Machine {{learning}} {{techniques can}} also be used in a less ambitious context to tune specific parameters of programs which rely mainly on other techniques. For example, Crazy Stone learns <b>move</b> <b>generation</b> patterns from several hundred sample games, using a generalization of the Elo rating system.|$|R
5000|$|Building on Alex Bernstein's {{landmark}} 1957 program {{created at}} IBM and on IBM 704 routines by McCarthy and Paul W. Abrahams, they added alpha-beta pruning to minmax at McCarthy's suggestion {{to improve the}} <b>plausible</b> <b>move</b> generator. They wrote in Fortran and FAP on scavenged computer time. After MIT received a 7090 from IBM, a single move took five to twenty minutes. By 1962 when they graduated, the program had completed fragments of four games at a level [...] "comparable to an amateur with about 100 games experience". Kotok, at about age 20, published their work in MIT Artificial Intelligence Memo 41 and his bachelor's thesis.|$|R
40|$|The {{separation}} game {{is different}} from the connection game, but has some similarities with it. In the game of Go, it is often useful because it helps enclosing groups and areas. An evaluation function, <b>moves</b> <b>generation</b> functions and a search algorithm for the separation game are described in this paper. ...|$|R
50|$|In {{its final}} incarnation, Belle used a LSI-11 general purpose {{computer}} to coordinate its chess hardware. There were three custom boards for <b>move</b> <b>generation,</b> four custom boards for position evaluation, and a microcode implementation of alpha-beta pruning. The computer also had one megabyte of commercial memory for storing transposition tables.|$|R
5000|$|The data {{structure}} {{used to represent}} each chess position {{is key to the}} performance of <b>move</b> <b>generation</b> and position evaluation. Methods include pieces stored in an array ("mailbox" [...] and [...] "0x88"), piece positions stored in a list ("piece list"), collections of bit-sets for piece locations ("bitboards"), and huffman coded positions for compact long-term storage.|$|R
40|$|We study {{connectivity}} {{of stones}} on a Go Board, including influence and heuristics-based soft connectivity and pattern- and search-based hard connectivity. Stone connectivity provides a Go program {{with an understanding}} of a fundamental aspect of board configurations. It is essential in positional evaluation, candidate <b>move</b> <b>generation,</b> and <b>move</b> selection. Computer Go, heuristic methods, pattern recognition, game tree search...|$|R
40|$|We present two new perfect hashing {{schemes that}} can be used for {{efficient}} bitboard <b>move</b> <b>generation</b> for sliding pieces in chess-like board games without the need to use rotated bitboards. Moreover, we show that simple variations of these schemes give minimal perfect hashing schemes. The new method is applicable provided N, the number of k-bit spaced positions that may be set to 1, is not more than k + 1. In chess, for a Rook’s movement along a file N = k = 8; for a Bishop’s movement N ≤ 8, and k = 9 for a north-east diagonal and k = 7 for a north-west diagonal. The results of computational experiments comparing the efficiency of <b>move</b> <b>generation</b> with the standard method show that using the hashing scheme gives an average improvement of approximately 40 %. The schemes we suggest are simple, efficient, and easy to understand and implement...|$|R
5000|$|The fifth alternative, 1...d5 2.e4 dxe4, {{leads to}} more open play. After 3.Nxe4, Black {{has a number of}} playable moves, {{including}} 3...e5, 3...Nc6, 3...Bf5, 3...Nd7, 3...Nf6, and even 3...Qd5!?, when 4.Nc3 transposes to the Scandinavian Defense [...] After 3...e5, White's thematic move is 4.Bc4, when several of Black's <b>plausible</b> <b>moves</b> lead to disaster, e.g. 4...Be7? 5.Qh5! and White wins at least a pawn after 5...g6 6.Qxe5 or 5...Nh6 6.d3; or 4...Nf6? 5.Ng5! Nd5 and now 6.d4!, 6.Qf3!, and 6.Nxf7!? Kxf7 7.Qf3+ are all possible, with positions similar to the line of the Two Knights Defense beginning 1.e4 e5 2.Nf3 Nc6 3.Bc4 Nf6 4.Ng5 d5 5.exd5 Nxd5?! [...] However, 3...e5 4.Bc4 Nc6! is playable [...]|$|R
40|$|The {{simplicity}} of the pen-and-paper game Sprouts hides a surprising combina- torial complexity. We describe an optimisation called boundary matching that accommodates this complexity to allow <b>move</b> <b>generation</b> for Sprouts games of arbitrary size at interactive speeds. This extended version of the paper also de- scribes methods for plotting and visualising Sprouts moves, using a conforming Delaunay triangulation of the game’s underlying geometry...|$|R
50|$|Kasparov played forcefully on moves 55-57, and the World Team responded {{each time}} with a large {{majority}} for the best <b>plausible</b> <b>move.</b> On move 58, however, there was another swirl of controversy. Both 58...Qe4 and 58...Qf5 looked reasonable, but the bulletin board had analyzed the former to a forced loss, so Krush duly recommended the latter. Due to an e-mail glitch, her recommendation and analysis were not received on time by the MSN site, and voting proceeded for some time with Bacrot and Paehtz both recommending 58...Qe4 against only Felecan favoring 58...Qf5. When the weaker move won the vote 49% to 44%, there were dismayed cries from the bulletin board that {{the result of the}} game had been invalidated by the delay of Krush's recommendation. Particularly troublesome for the board was that Kasparov has turned in several of his moves late, without punishment or even a warning, while Krush was waiting till the early morning hours and then attending high school the next day. For this move Krush could stay up no longer and hence her hurried email later in the day.|$|R
40|$|Chess {{programs}} have three major components: <b>move</b> <b>generation,</b> search, and evaluation. All components are important, although evaluation with its quiescence analysis {{is the part}} which makes each program's play unique. The speed of a chess program {{is a function of}} its <b>move</b> <b>generation</b> cost, the complexity of the position under study and the brevity of its evaluation. More important, however, is the quality of the mechanisms used to discontinue (prune) search of unprofitable continuations. The most reliable pruning method in popular use is the robust alpha-beta algorithm, and its many supporting aids. These essential parts of game-tree searching and pruning are reviewed here, and the performance of refinements, such as aspiration and principal variation search, and aids like transposition and history tables are compared. Although chess programs are noted for extensive search capability, time limits the depth of their search. These limits are extended in certain low mobility endgames through the use of transposition tables to record drawing cycles. However, absence of a planning capability makes other equally constrained endgames unsolvable. Examples of both situations are provided...|$|R
40|$|We {{introduce}} {{four new}} general optimization algorithms {{based on the}} ‘demon’ algorithm from statistical physics and the simulated annealing (SA) optimization method. These algorithms reduce the computation time per trial without {{significant effect on the}} quality of solutions found. Any SA annealing schedule or <b>move</b> <b>generation</b> function can be used. The algorithms are tested on traveling salesman problems including Grötschel’s 442 -city problem with results comparable to SA. Applications to the Boltzmann machine are considered...|$|R
50|$|The {{first two}} <b>generation</b> <b>Moves</b> were also {{exported}} to Europe, where they also {{went by the}} JDM name. Due to poor sales, Daihatsu did not export {{the third or fourth}} <b>generation</b> <b>Moves</b> to Europe, making it strictly a domestic market model.|$|R
40|$|We {{introduce}} {{four new}} general optimization algorithms {{based on the}} `demon' algorithm from statistical physics and the simulated annealing (SA) optimization method. These algorithms use a computationally simpler acceptance function, but can use any SA annealing schedule or <b>move</b> <b>generation</b> function. Computation per trial is significantly reduced. The algorithms are tested on traveling salesman problems including Grotschel's 442 -city problem {{and the results are}} comparable to those produced using SA. Applications to the Boltzmann machine are considered...|$|R
5000|$|RockCorps' {{principal}} idea is [...] "Got 2 Give to Get (U.S.), Give, Get Given (UK). Tagline: <b>Moving</b> a <b>Generation</b> to Change the World ...|$|R
40|$|The cordial {{letter of}} November 10 th from the British Prime Minister to the President of the European Council is an {{important}} document. It {{sets the stage for}} deliberations on whether the UK stays in the EU, or quits in an historic act of destructive disintegration for the EU that condemns the UK to what has fittingly been called “the spectre of geo-political irrelevance”. Overall the letter is looking like a <b>plausible</b> <b>move</b> towards settling the Brussels part of the Prime Minister’s manifest objective to keep the UK in the EU, argues Michael Emerson in this CEPS Commentary. But there is one major part of the debate that is underdeveloped so far: the clarification of the scenarios and consequences of secession. Eurosceptics have not detailed their positions on how to manage the secession, but what is becoming clearer is that all conceivable options are far more problematic than the status quo...|$|R
2500|$|In chess, a swindle is a ruse {{by which}} a player in a losing {{position}} tricks his opponent, and thereby achieves a win or draw instead of the expected loss. It may also refer more generally to obtaining a win or draw from a clearly losing position. I. A. Horowitz and Fred Reinfeld distinguish among [...] "traps", [...] "pitfalls", and [...] "swindles". In their terminology, a [...] "trap" [...] refers to a situation where a player goes wrong through his own efforts. In a [...] "pitfall", the beneficiary of the pitfall plays an active role, creating a situation where a <b>plausible</b> <b>move</b> by the opponent will turn out badly. A [...] "swindle" [...] is a pitfall adopted by a player who has a clearly lost game. Horowitz and Reinfeld observe that swindles, [...] "though ignored in virtually all chess books", [...] "play an enormously important role in over-the-board chess, and decide the fate of countless games".|$|R
40|$|Arimaa is a {{board game}} with simple rules. It is simple for human {{but at the}} same time {{difficult}} for computers. The aim of this bachelor thesis is to familiarize with game playing methods with features of the artificial intelligence. The next aim is to design and implement the program, that would be able to play against others players and programs. The most important features of the program are <b>move</b> <b>generation,</b> search and evaluation of positions. At the end, the program was tested on the game server, where played against others programs...|$|R
5000|$|Maven {{has used}} several {{algorithms}} for <b>move</b> <b>generation,</b> {{but the one}} that has stuck is the DAWG algorithm. The GADDAG algorithm is faster, but a DAWG for North American English is only 0.5 MB, compared to about 2.5 MB for a GADDAG. That makes a significant difference for download games, whereas the speed advantage is not important. (Note that unimportant {{does not mean that the}} difference is small, merely that users cannot tell the difference. The GADDAG is perhaps twice as fast, but both algorithms are fast enough.) ...|$|R
5000|$|Since I {{have lived}} a life of social and {{political}} advocacy through music, one in which I had seen songs like [...] "Blowin' In the Wind," [...] "If I Had a Hammer," [...] and [...] "We Shall Overcome" [...] become anthems that <b>moved</b> <b>generations</b> and helped solidify their commitment to efforts like the Civil Rights Movement and the Peace Movement, I knew I had just discovered a song that could become an anthem of a movement to help children find their common sensitivity to the painful effects of disrespect, intolerance, ridicule and bullying." ...|$|R
40|$|There are {{two major}} criticisms about {{simulated}} annealing as a general method for solving combinatorial optimization problems: its effectiveness when compared with other welldesigned heuristics and its excessive computation time. In this paper, we show that simulated annealing, with properly des~gned annealing schedule and <b>move</b> <b>generation</b> strategy, achieves significant speerlups for high quality solutions when compared with tailored heuristics on two well-studied problems: the traveling salesman problem and the graph partition problem. Efficient heuristics for the traveling salesman problem {{can be applied to}} power and ground routing and, for the graph partition problem, to min-cut placement and logic partitioning. 1...|$|R
40|$|In complex {{games with}} a large {{branching}} factor such as Go, programs usually use highly selective search methods, heuristically expanding just a few <b>plausible</b> <b>moves</b> in each position. As in early Chess programs, these methods have shortcomings, they often neglect good moves or overlook a refutation. We propose a safe method to select the interesting moves using game definition functions. This method has multiple advantages over basic alpha-beta search: it solves more problems, the answers it finds are always correct, it solves problems faster and with less nodes, and it is more simple to program than usual heuristic methods. The only small drawback is the requirement for an abstract analysis of the game. We give examples and experimental results for the capture game, an important sub-game of the game of Go. The principles underlying the method are not specific to the capture game. The method {{can also be used}} with different search algorithms. This algorithm is important for every Go programmer, and is likely to interest other game programmers...|$|R
50|$|The second <b>{{generation}}</b> <b>Move</b> (L900) {{used the}} same chassis as the first generation (L600).|$|R
40|$|This paper {{describes}} an approach for obtaining {{direct access to}} the attacked squares of sliding pieces without resorting to rotated bitboards. The technique involves creating four hash tables using the built in hash arrays from an interpreted, high level language. The rank, file, and diagonal occupancy are first isolated by masking the desired portion of the board. The attacked squares are then directly retrieved from the hash tables. Maintaining incrementally updated rotated bitboards becomes unnecessary as does all the updating, mapping and shifting required to access the attacked squares. Finally, rotated bitboard <b>move</b> <b>generation</b> speed is compared with that of the direct hash table lookup method. Comment: 7 pages, 1 figure, 4 listings; replaced test positions, fixed typo...|$|R
40|$|A {{knowledge-based}} {{approach to}} automated conceptual design (flowsheet synthesis) of thermal energy systems with strong interactions between heat/power/chemical transformations is presented. In Part 1, formulation of a thermal design problem is stated {{in terms of}} input/output specification, component interaction, feasibility constraints, andpenalty function. The problem is then decomposed in inner problems that deal with a set of elementary processes, and outer problems that find a network of components approximating the optimum set of elementary processes. A design state is evaluated using a special form of fimdamental equation for steadystate open thermodynamic systems based on a "temperature interval" concept. In Part 2 of this paper, an algorithm is presented. The algorithm makes use of the state evaluation function, transformation operators, and the <b>plausible</b> <b>move</b> operator to search through a space of the design states. A simple closed-cycle gas turbine is employed to illustrate the behavior of the "artificial designer" as it advances from a certain given design to more sophisticated schemes. The paper appeared in the ASME Journal of Engineering for Power, 1989, Vol. 111, pp. 734 - 739. This text was produced by OCR from a hardcopy and contains numerous errors. Please contact the authors for an accurate copy...|$|R
