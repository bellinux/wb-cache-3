2301|520|Public
5|$|Internet Connection Sharing, {{supported}} on compatible devices, allows {{the phone to}} share its Internet connection with computers via USB and Bluetooth. Windows Mobile supports virtual private networking over PPTP protocol. Most devices with mobile connectivity also have a Radio Interface Layer. The Radio Interface Layer provides the system interface between the Cell Core layer within the Windows Mobile OS and the radio <b>protocol</b> <b>stack</b> used by the wireless modem hardware. This allows OEMs to integrate a variety of modems into their equipment.|$|E
5|$|The Internet {{works in}} part because of {{protocols}} that govern how the computers and routers communicate with each other. The nature of computer network communication lends itself to a layered approach where individual protocols in the <b>protocol</b> <b>stack</b> run more-or-less independently of other protocols. This allows lower-level protocols to be customized for the network situation while not changing the way higher-level protocols operate. A practical example of why this is important is because it allows an Internet browser to run the same code regardless of whether the computer it is running on is connected to the Internet through an Ethernet or Wi-Fi connection. Protocols are often talked about in terms of their place in the OSI reference model (pictured on the right), which emerged in 1983 as the first step in an unsuccessful attempt to build a universally adopted networking protocol suite.|$|E
25|$|Apart from portability, the CSRG {{worked on}} an {{implementation}} of the OSI network <b>protocol</b> <b>stack,</b> improvements to the kernel virtual memory system and (with Van Jacobson of LBL) new TCP/IP algorithms to accommodate {{the growth of the}} Internet.|$|E
5000|$|<b>Protocol</b> <b>stacks</b> or {{families}} include multiple interacting protocols: ...|$|R
5000|$|T.123 - Network-specific data <b>protocol</b> <b>stacks</b> for {{multimedia}} conferencing ...|$|R
40|$|In {{this paper}} we propose an {{architecture}} for fully-reconfigurable, plug-and-play wireless sensor network testbed. The proposed architecture is able to reconfigure and support easy experimentation and testing of standard <b>protocol</b> <b>stacks</b> (i. e. uIPv 4 and uIPv 6) as well as non-standardized clean-slate <b>protocol</b> <b>stacks</b> (e. g. configured using RIME). The parameters of the <b>protocol</b> <b>stacks</b> can be remotely reconfigured through an easy to use RESTful API. Additionally, {{we are able to}} fully reconfigure clean-slate <b>protocol</b> <b>stacks</b> at run-time. The architecture enables easy set-up of the network - plug - by using a protocol that automatically sets up a multi-hop network (i. e. RPL protocol) and it enables reconfiguration and experimentation - play - by using a simple, RESTful interaction with each node individually. The reference implementation of the architecture uses a dual-stack Contiki OS with the ProtoStack tool for dynamic composition of services...|$|R
25|$|In its {{standard}} distribution it is a complete, albeit simple, {{display and}} interface solution which delivers a standard toolkit and <b>protocol</b> <b>stack</b> for building {{graphical user interfaces}} on most Unix-like operating systems and OpenVMS, and has been ported to many other contemporary general purpose operating systems.|$|E
25|$|The Internet {{protocol}} suite and the layered <b>protocol</b> <b>stack</b> design were in use before the OSI model was established. Since then, the TCP/IP {{model has been}} compared with the OSI model in books and classrooms, which often results in confusion because the two models use different assumptions and goals, including {{the relative importance of}} strict layering.|$|E
25|$|The Ethernet {{physical}} layer {{has evolved over}} its existence starting in 1980 and encompasses multiple physical media interfaces and several orders of magnitude of speed. The speed ranges from 1Mbit/s to 100Gbit/s, while the physical medium can range from bulky coaxial cable to twisted pair and optical fiber. In general, network <b>protocol</b> <b>stack</b> software will work similarly on all {{physical layer}}s.|$|E
5000|$|CPComm executes as a {{real time}} program in a {{background}} run. [...] CPComm implements the <b>protocol</b> <b>stacks.</b>|$|R
50|$|The {{different}} means (air, cables) {{and ways}} (<b>protocols</b> and <b>protocol</b> <b>stacks)</b> to communicate are called a communication network.|$|R
50|$|Used {{to provide}} ISO {{presentation}} services {{on top of}} TCP/IP based <b>protocol</b> <b>stacks.</b> It is defined in RFC 1085.|$|R
25|$|From an OSI model <b>protocol</b> <b>stack</b> viewpoint, the {{technologies}} used on DAB inhabit the following layers: the audio codec inhabits the presentation layer. Below {{that is the}} data link layer, in charge of statistical time division multiplexing and frame synchronization. Finally, the physical layer contains the error-correction coding, OFDM modulation, {{and dealing with the}} over-the-air transmission and reception of data. Some aspects of these are described below.|$|E
25|$|By {{the late}} 1980s {{there were several}} efforts {{underway}} to provide an abstraction layer for this purpose. Some of these were mainframe related, designed to allow programs running on those machines to translate between the variety of SQL's and provide a single common interface which could then be called by other mainframe or microcomputer programs. These solutions included IBM's Distributed Relational Database Architecture (DRDA) and Apple Computer's Data Access Language. Much more common, however, were systems that ran entirely on microcomputers, including a complete <b>protocol</b> <b>stack</b> that included any required networking or file translation support.|$|E
25|$|This is {{also the}} layer where packets may be {{selected}} to be sent over a virtual private network or other networking tunnel. In this scenario, the link layer data may be considered application data which traverses another instantiation of the IP stack for transmission or reception over another IP connection. Such a connection, or virtual link, may be established with a transport protocol or even an application scope protocol {{that serves as a}} tunnel in the link layer of the <b>protocol</b> <b>stack.</b> Thus, the TCP/IP model does not dictate a strict hierarchical encapsulation sequence.|$|E
40|$|A {{communication}} subsystem consists of protocol tasks and operating system mechanisms {{that support the}} configuration and execution of <b>protocol</b> <b>stacks</b> composed of <b>protocol</b> tasks. To parallelize a {{communication subsystem}} effectively, careful consideration {{must be given to}} the threading architecture. The threading architecture binds processing elements with the protocol tasks and the messages associated with <b>protocol</b> <b>stacks</b> in a communication subsystem. This paper makes two contributions to the study and application of threading architectures. First, it reports performance results from empirical comparisons of two <b>protocol</b> <b>stacks</b> (based on the connectionless and connection-oriented transport protocols UDP and TCP) using different threading architectures on a 20 CPU multi-processor platform. The results demonstrate how andwhy different threading architectures affect performance. Second, the paper provides guidelines based on these results that indicate when and how to apply appropriate thre [...] ...|$|R
40|$|Maestro is a {{tool for}} {{managing}} sets of <b>protocol</b> <b>stacks</b> that satisfy varied quality of service or security requirements. Intended primarily for multimedia groupware settings, it permits a single application to efficiently operate over multiple side-by-side <b>protocol</b> <b>stacks,</b> each specialized to a different communication stream. Maestro {{can also be used}} to manage other sorts of external <b>protocol</b> <b>stacks,</b> for example to orchestrate connection setups that require coordinated actions at all endpoints in a multicast group. Our tools are fault-tolerant and secure; they can safely distribute session keys or handle delicate synchronization tasks that would otherwise complicate the managed stacks and potentially interfere with their quality-of-service objectives. Moreover, Maestro can automatically track subgroup membership on the basis of "properties", facilitating its use by developers who prefer not to work directly with multicast communication interfaces...|$|R
5000|$|Data Connection Ltd of Enfield, Middlesex for {{communications}} and telephony systems including <b>protocol</b> <b>stacks,</b> unified messaging, conferencing and VoIP Class 5 switch ...|$|R
25|$|Each Net-Lib {{supported}} {{network protocol}} has a separate driver (not {{to be confused}} with a device driver), and has support for a session layer in its <b>protocol</b> <b>stack.</b> There are two general types of Net-Lib: the primary and the secondary. The primary Net-Lib consists of a Super Socket Net-Lib and the Shared Memory Net-Lib, while there are numerous secondary Net-Libs, including TCP/IP and named pipes network libraries (named pipes are a method of communicating with other processes via a system-persistent pipeline that is given an identity). The Microsoft OLE DB Provider for SQL Server (SQLOLEDB) communicates via primary Net-Libs.|$|E
25|$|The {{three top}} layers in the OSI model, i.e. the {{application}} layer, the presentation layer and the session layer, are not distinguished separately in the TCP/IP model which only has an application layer above the transport layer. While some pure OSI protocol applications, such as X.400, also combined them, {{there is no}} requirement that a TCP/IP <b>protocol</b> <b>stack</b> must impose monolithic architecture above the transport layer. For example, the NFS application protocol runs over the eXternal Data Representation (XDR) presentation protocol, which, in turn, runs over a protocol called Remote Procedure Call (RPC). RPC provides reliable record transmission, so it can safely use the best-effort UDP transport.|$|E
25|$|Onion routing is {{implemented}} by encryption {{in the application}} layer of a communication <b>protocol</b> <b>stack,</b> nested like the layers of an onion. Tor encrypts the data, including the next node destination IP address, multiple times and sends it through a virtual circuit comprising successive, randomly selected Tor relays. Each relay decrypts a layer of encryption to reveal only the next relay in the circuit in order to pass the remaining encrypted data on to it. The final relay decrypts the innermost layer of encryption and sends the original data to its destination without revealing, or even knowing, the source IP address. Because the routing of the communication is partly concealed at every hop in the Tor circuit, this method eliminates any single {{point at which the}} communicating peers can be determined through network surveillance that relies upon knowing its source and destination.|$|E
50|$|Clarinox Technologies {{provides}} standardized software {{libraries and}} tools to enable faster time-to-market for wireless device developers. Their middleware framework, ClarinoxSoftFrame, forms the backbone for the <b>protocol</b> <b>stacks</b> and their wireless development board, Koala EVM. The ClarinoxBlue and ClarinoxWiFi <b>protocol</b> <b>stacks</b> have since become integral {{products in the}} embedded market, enabling wireless development on many embedded platforms. Clarinox also provides extensive wireless product development services including participation in design reviews to {{the full range of}} design, development and testing phases.|$|R
40|$|STREAMS-based <b>protocol</b> <b>stacks</b> {{have become}} {{integral}} components of many desktop operating systems. STREAMS allows {{the use of}} different communication Application Programming Interfaces (APIs) with dynamically configurable <b>protocol</b> <b>stacks.</b> This work compares these APIs and <b>protocol</b> <b>stacks</b> using connectionless datagrams over Fast Ethernet and Gigabit Ethernet networks. In recent years, STREAMS implementations have evolved to overcome the limitations of predecessors {{in order to provide}} better performance with emerging high-speed networking technologies. Our performance analyses demonstrate the maximum performance that can be delivered to end-user applications using two of the most recent STREAMS implementations. In addition, our experimental results demonstrate the suitability of STREAMS as a promising framework for supporting applications running over high-speed networks. We hope that our experiences will give network designers and developers useful insights into STREAMS performance capabilities for supporting fast networks emerging on the market today...|$|R
50|$|Etherstack {{produces}} SCA Software-defined radio (SDR) waveforms, Land Mobile Radio (LMR) <b>protocol</b> <b>stacks,</b> test platforms, and encryption {{solutions for}} the P25, TETRA, and MPT-1327 protocols.|$|R
2500|$|In 1992 and 1993, Microsoft {{released}} Windows for Workgroups (WfW), {{which was}} available {{both as an}} add-on for existing Windows 3.1 installations and in a version that included the base Windows environment and the networking extensions all in one package. Windows for Workgroups included improved network drivers and protocol stacks, and support for peer-to-peer networking. [...] There were two versions of Windows for Workgroups, WfW 3.1 and WfW 3.11. Unlike prior versions, Windows for Workgroups 3.11 ran in 386 Enhanced Mode only, and needed at least an 80386SX processor. One optional download for WfW was the [...] "Wolverine" [...] TCP/IP <b>protocol</b> <b>stack,</b> which allowed for {{easy access to the}} Internet through corporate networks.|$|E
5000|$|Etherstack licensing: Mobile <b>Protocol</b> <b>Stack</b> (DMR Tier II/III), Base <b>Protocol</b> <b>Stack</b> (DMR Tier II/III), AIS ...|$|E
50|$|Derivatives {{have since}} {{appeared}} in innumerable standards. It was adopted into the X.25 <b>protocol</b> <b>stack</b> as LAPB, into the V.42 protocol as LAPM, into the Frame Relay <b>protocol</b> <b>stack</b> as LAPF {{and into the}} ISDN <b>protocol</b> <b>stack</b> as LAPD.|$|E
50|$|Major {{standardization}} of VANET <b>protocol</b> <b>stacks</b> {{is taking place}} in the U.S., in Europe, and in Japan, corresponding to their dominance in the automotive industry.|$|R
5000|$|... ccTalk <b>protocol</b> <b>stacks</b> {{have been}} {{implemented}} {{on a range of}} devices from tiny Microchip microcontrollers with 512 bytes of ROM to powerful ARM7 32-bit processors.|$|R
40|$|In {{this paper}} we address the design of network {{architectures}} for the Internet of Things by proposing practical algorithms to augment IETF CoAP/ 6 LoWPAN <b>protocol</b> <b>stacks</b> with congestion control functionalities. Our design is inspired by previous theoretical work on back pressure routing and is targeted toward Web-based architectures featuring bidirectional data flows made up of CoAP request/response pairs. Here, we present three different cross-layer and fully decentralized congestion control schemes and compare them against ideal back pressure and current UDP-based <b>protocol</b> <b>stacks.</b> Hence, we discuss results obtained using ns- 3 through an extensive simulation campaign for two different scenarios: unidirectional and upstream flows and bidirectional Web-based CoAP flows. Our results confirm that the proposed congestion control algorithms perform satisfactorily in both scenarios {{for a wide range}} of values of their configuration parameters, and are amenable to the implementation onto existing <b>protocol</b> <b>stacks</b> for embedded sensor devices...|$|R
5000|$|A {{web service}} <b>protocol</b> <b>stack</b> is a <b>protocol</b> <b>stack</b> (a stack of {{computer}} networking protocols) {{that is used}} to define, locate, implement, and make Web services interact with each other. A Web service <b>protocol</b> <b>stack</b> typically stacks four protocols: ...|$|E
5000|$|... lwBT is an {{open source}} {{lightweight}} Bluetooth <b>protocol</b> <b>stack</b> for embedded systems by blue-machines. It acts as a network interface for the lwIP <b>protocol</b> <b>stack.</b>|$|E
50|$|ISO/IEC 14908-1: Information technology—Control network protocol—Part 1: <b>Protocol</b> <b>stack.</b> Published through ISO/IEC JTC 1/SC 6, this {{standard}} specifies a multi-purpose control network <b>protocol</b> <b>stack</b> optimized for smart grid, smart building, and smart city applications.|$|E
40|$|A {{communication}} subsystem consists of protocol functions and operating system mechanisms {{that support the}} implementation and execution of <b>protocol</b> <b>stacks.</b> To effectively parallelize a {{communication subsystem}}, careful consideration {{must be given to}} the process architecture used to structure multiple processing elements. A process architecture binds one or more processing elements with the protocol tasks and messages associated with <b>protocol</b> <b>stacks</b> in a communication subsystem. This paper outlines the two fundamental types of process architectures (task-based and message-based) and describes performance experiments conducted on three representative examples of these two types of process architectures – Layer Parallelism, which is a task-based process architecture, and Message-Parallelism and Connectional Parallelism, which are message-based process architectures. These experiments measure the impact of the process architecture on connectionless and connection-oriented <b>protocol</b> <b>stacks</b> (based upon UDP and TCP) in a shared-memory multi-processor operating system. The results from these experiments indicate that the choice of process architecture significantly affects communication subsystem performance. ...|$|R
30|$|A similar {{approach}} as proposed {{in this paper}} was proposed in [10], which is a real-time 802.11 g PHY and MAC implementation on FPGA. The design focuses on design reusability, {{and many of the}} relevant parameters were chosen to be easily configurable. By using Bluespec, user-friendly hardware programming is achieved. A CSMA/CA MAC is implemented on the FGPA, as well as a soft processor that can possibly run higher layer <b>protocol</b> <b>stacks.</b> While this design is in principle very similar to the method we propose here, they never verified that their design can work with off-the-shelf radios and never ported higher layer <b>protocol</b> <b>stacks</b> on the SDR. In this paper, we provide a full 802.15. 4 PHY and MAC layer and also a hardware abstraction layer that allows porting most OS or <b>protocol</b> <b>stacks</b> on our PHY. In addition, we benchmark our design with off-the-shelf radios and realize a relevant cross-layer improvement to illustrate the key benefits of the proposed approach.|$|R
40|$|In both {{research}} and business enterprises dealing with sensor networks, {{the implementation of}} communication <b>protocol</b> <b>stacks</b> is a central issue. It {{has an impact on}} time-to-market, scalability, maintainability and on the possibility of making fair comparisons. Network software, in particular for small embedded systems with strict non-functional requirements, is complex, error-prone and with many possible bottlenecks. Our work addresses these issues using a language based approach. It aims at a programming language supporting abstractions suitable for the implementation of <b>protocol</b> <b>stacks.</b> Language technology in the form of runtime system, type system and compiler transformations can then be used to generate efficient implementations...|$|R
