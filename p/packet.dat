10000|10000|Public
5|$|An {{endpoint}} of a pipe is addressable with a tuple (device_address, endpoint_number) as {{specified in}} a TOKEN <b>packet</b> that the host sends when {{it wants to}} start a data transfer session. If {{the direction of the}} data transfer is from the host to the endpoint, an OUT <b>packet</b> (a specialization of a TOKEN <b>packet)</b> having the desired device address and endpoint number is sent by the host. If the direction of the data transfer is from the device to the host, the host sends an IN <b>packet</b> instead. If the destination endpoint is a uni-directional endpoint whose manufacturer's designated direction does not match the TOKEN <b>packet</b> (e.g. the manufacturer's designated direction is IN while the TOKEN <b>packet</b> is an OUT <b>packet),</b> the TOKEN <b>packet</b> is ignored. Otherwise, it is accepted and the data transaction can start. A bi-directional endpoint, on the other hand, accepts both IN and OUT packets.|$|E
5|$|When {{a device}} is reset with a SETUP <b>packet,</b> it expects an 8-byte DATA0 <b>packet</b> next.|$|E
5|$|Both HDMI and DVI use TMDS to send 10-bit {{characters}} that are encoded using 8b/10b encoding that {{differs from the}} original IBM form for the Video Data Period and 2b/10b encoding for the Control Period. HDMI adds the ability to send audio and auxiliary data using 4b/10b encoding for the Data Island Period. Each Data Island Period is 32 pixels in size and contains a 32-bit <b>Packet</b> Header, which includes 8 bits of BCH ECC parity data for error correction and describes {{the contents of the}} <b>packet.</b> Each <b>packet</b> contains four subpackets, and each subpacket is 64 bits in size, including 8 bits of BCH ECC parity data, allowing for each <b>packet</b> to carry up to 224 bits of audio data. Each Data Island Period can contain up to 18 packets. Seven of the 15 <b>packet</b> types described in the HDMI 1.3a specifications deal with audio data, while the other 8 types deal with auxiliary data. Among these are the General Control <b>Packet</b> and the Gamut Metadata <b>Packet.</b> The General Control <b>Packet</b> carries information on AVMUTE (which mutes the audio during changes that may cause audio noise) and Color Depth (which sends the bit depth of the current video stream and is required for deep color). The Gamut Metadata <b>Packet</b> carries information on the color space being used for the current video stream and is required for xvYCC.|$|E
30|$|We {{consider}} {{two types}} of packets: native <b>packets</b> and coded <b>packets.</b> Native <b>packets</b> are <b>packets</b> generated at the source node. On the other hand, coded <b>packets</b> are <b>packets</b> which are encoded and recoded at the source and intermediate nodes. However, for simplicity, we call them as <b>packets</b> {{when it is not}} required to distinguish them to native and coded <b>packets.</b> At the setup phase and according to the assumption made by the most existing schemes [28, 29], the source divides each message into a sequence of native <b>packets</b> and partitions them into generations.|$|R
40|$|A {{cognitive}} radio network with classified Secondary Users (SUs) is considered. There {{are two types}} of SU <b>packets,</b> namely, SU 1 <b>packets</b> and SU 2 <b>packets,</b> in the system. The SU 1 <b>packets</b> have higher priority than the SU 2 <b>packets.</b> Considering the diversity of the SU <b>packets</b> and the real-time need of the interrupted SU <b>packets,</b> a novel spectrum allocation strategy with classified SUs and impatient <b>packets</b> is proposed. Based on the number of PU <b>packets,</b> SU 1 <b>packets,</b> and SU 2 <b>packets</b> in the system, by modeling the queue dynamics of the networks users as a three-dimensional discrete-time Markov chain, the transition probability matrix of the Markov chain is given. Then with the steady-state analysis, some important performance measures of the SU 2 <b>packets</b> are derived to show the system performance with numerical results. Specially, in order to optimize the system actions of the SU 2 <b>packets,</b> the individually optimal strategy and the socially optimal strategy for the SU 2 <b>packets</b> are demonstrated. Finally, a pricing mechanism is provided to oblige the SU 2 <b>packets</b> to follow the socially optimal strategy...|$|R
3000|$|... native <b>packets</b> are {{received}} by all sensors in the cluster, the cluster head proceeds to transmit the following batch of <b>packets.</b> The data dissemination is accomplished when all batches of <b>packets</b> are obtained by all sensor nodes in the network. In Figure 2 (e), we send two native <b>packets</b> at first, followed by sending encoded <b>packets</b> to recover [...] "wanted" [...] <b>packets</b> {{of the first}} batch at sensors, then send the last two native <b>packets</b> followed by sending encoded <b>packets</b> to recover [...] "wanted" [...] <b>packets</b> of the second batch at sensors. It takes 9 time slots to finish the data dissemination process.|$|R
5|$|Depending on {{the setup}} <b>packet,</b> an {{optional}} data <b>packet</b> from device to host or host to device may occur.|$|E
5|$|For {{low-speed}} (1.5Mbit/s) and full-speed (12Mbit/s) devices {{the shortest}} {{time for a}} transaction in one direction is 1ms. High-speed (480Mbit/s) uses transactions within each micro frame (125µs) where using 1-byte interrupt <b>packet</b> results in a minimal response time of 940ns. 4-byte interrupt <b>packet</b> results in 984ns.|$|E
5|$|Since all PID bytes include four 0bits, {{they leave}} the bus in the full-bandwidth Kstate, {{which is the same}} as the low-bandwidth Jstate. It is {{followed}} by a brief pause, during which hubs enable their low-bandwidth outputs, already idling in the Jstate. Then a low-bandwidth <b>packet</b> follows, beginning with a sync sequence and PID byte, and ending with a brief period of SE0. Full-bandwidth devices other than hubs can simply ignore the PRE <b>packet</b> and its low-bandwidth contents, until the final SE0 indicates that a new <b>packet</b> follows.|$|E
30|$|With {{the above}} scheme, prime <b>packets</b> have higher {{priorities}} than ordinary <b>packets.</b> Nodes keep prime <b>packets</b> longer than ordinary <b>packets</b> and keep <b>packets</b> with high qualities longer {{than those with}} low qualities when the buffer space is not sufficient. This mechanism can exploit the buffer more efficiently since <b>packets</b> that are more worth keeping are dropped with a lower probability.|$|R
40|$|AbstractWe {{introduce}} {{a new class of}} basic wavelet <b>packets,</b> called highly nonstationary wavelet <b>packets,</b> that generalize the class of nonstationary wavelet <b>packets.</b> We define the periodic Shannon wavelet <b>packets</b> and show how to obtain perturbations of this system using periodic highly nonstationary wavelet <b>packets.</b> Such perturbations provide examples of periodic wavelet <b>packets</b> that do form a Schauder basis for Lp[0, 1) for 1 <p<∞. We also consider the representation of the differentiation operator in such periodic wavelet <b>packets...</b>|$|R
3000|$|... [...]. These <b>packets</b> are {{classified}} as Type-II <b>packets.</b> Obviously, the relay has no way to resend such <b>packets,</b> and thus the sources must resend these <b>packets.</b> In the example, [...]...|$|R
5|$|Sourcefire has {{released}} Snort rules to detect Heartbleed attack traffic and possible Heartbleed response traffic. Open source <b>packet</b> analysis software such as Wireshark and tcpdump can identify Heartbleed packets using specific BPF <b>packet</b> filters {{that can be}} used on stored <b>packet</b> captures or live traffic.|$|E
5|$|To {{become a}} member of the Arts Club of Chicago, a {{currently}} established member of the club must request an application for membership on their behalf. The membership application <b>packet</b> is only made available to current members. Within the <b>packet</b> are details describing the application process for potential inductees.|$|E
5|$|To {{eliminate}} this danger, if a USB hub detects {{a mix of}} {{high speed}} or full speed and low speed devices, it will by default disable communication to low speed device unless requested to switch to low speed mode. On reception of a PRE <b>packet</b> however, it will temporarily re-enable the output port to all low speed devices, to allow the host to send a single low speed <b>packet</b> to low speed devices. After the low speed <b>packet</b> is sent, an end of <b>packet</b> (EOP) signal will tell the hub to disable all outputs to low speed devices again.|$|E
50|$|The <b>packets</b> {{exchanged}} {{within an}} L2TP tunnel are categorized as either control <b>packets</b> or data <b>packets.</b> L2TP provides reliability features {{for the control}} <b>packets,</b> but no reliability for data <b>packets.</b> Reliability, if desired, must be provided by the nested protocols running within each session of the L2TP tunnel.|$|R
5000|$|The {{most common}} kinds of sugar <b>packets</b> {{that can be}} found are white sugar, brown sugar or {{demerara}} sugar and sweeteners. In many countries, the <b>packets</b> are color coded; white sugar in white <b>packets,</b> demerara sugar in brown <b>packets,</b> sweeteners come in blue, pink, yellow or green <b>packets.</b>|$|R
40|$|An optimal {{approach}} to mitigation of flooding {{denial of service}} attacks is presented. The objective is to minimize effect of the mitigation while protecting the server. The approach relies on routers filtering enough <b>packets</b> so that the server is not overwhelmed while ensuring that as little filtering is performed as possible. The optimal solution is to filter <b>packets</b> at routers through which the “attack <b>packets</b> ” are passing. The identification of which router the <b>packets</b> are passing is carried out by routers filtering a small but time varying fraction of the <b>packets.</b> The arrival of <b>packets</b> at the server is correlated to router filtering providing an indication through which routers the attack <b>packets</b> are passing. Once sufficient confidence in the identification is achieved, the routers that forward more attack <b>packets</b> filter more <b>packets</b> than router that forward less attack <b>packets.</b> ...|$|R
5|$|To {{solve this}} problem, the device {{keeps track of}} the type of DATAx <b>packet</b> it last accepted. If it {{receives}} another DATAx <b>packet</b> of the same type, it is acknowledged but ignored as a duplicate. Only a DATAx <b>packet</b> of the opposite type is actually received.|$|E
5|$|USB2.0 {{added two}} {{additional}} handshake packets: NYET and ERR. NYET {{indicates that a}} split transaction is not yet complete, while ERR handshake indicates that a split transaction failed. A second use for a NYET <b>packet</b> is to tell the host that the device has accepted a data <b>packet,</b> but cannot accept any more due to full buffers. This allows a host to switch to sending small PING tokens to inquire about the device's readiness, rather than sending an entire unwanted DATA <b>packet</b> just to elicit a NAK.|$|E
5|$|PING asks {{a device}} {{if it is}} ready to receive an OUT/DATA <b>packet</b> pair. PING is usually sent by a host when polling a device that most {{recently}} responded with NAK or NYET. This avoids the need to send a large data <b>packet</b> to a device that the host suspects to be unwilling to accept it. The device responds with ACK, NAK, or STALL, as appropriate.|$|E
3000|$|... 1 to T_ 2 = (M_ 1 /R_ 1,M_ 2 /R_ 2), one of {{the paths}} will be {{transmitting}} RLNC <b>packets</b> coded over the M source <b>packets</b> while {{the other one is}} transmitting uncoded <b>packets.</b> Without loss of generality, we assume that S-A is the one transmitting RLNC <b>packets,</b> i.e., M_ 1 /R_ 1 <M_ 2 /R_ 2. Now, the proof reduces to showing that transmitting uncoded <b>packets</b> on S-B while transmitting RLNC-coded <b>packets</b> on S-A is indeed beneficial compared to transmitting RLNC-coded <b>packets</b> on both S-B and S-A.|$|R
3000|$|The key to {{realizing the}} above {{scheduling}} concept is to represent <b>packets</b> from remote stations (i.e., uplink <b>packets)</b> by [...] "virtual packets" [...] in the AP, {{then use a}} single unified scheduler to schedule virtual <b>packets</b> along with real <b>packets</b> (downlink <b>packets).</b> When scheduling virtual <b>packets,</b> the AP issues poll messages in an appropriate sequence to generate transmission opportunities for uplink <b>packets.</b> This hybrid scheduling scheme combines uplink and downlink scheduling in one discipline and allows {{the use of a}} centralized single server scheduler design as shown in Figure 2.|$|R
30|$|Protocol {{operation}} overhead {{is measured}} as {{the ratio of}} the average number of control <b>packets</b> transmitted by the APs during the simulation period and network throughput. The control <b>packets</b> include hello <b>packets,</b> free-to-transmit message, clock synchronization <b>packets,</b> etc.|$|R
5|$|Synchronization Pattern: A USB <b>packet</b> {{begins with}} an 8-bit {{synchronization}} sequence, 00000001₂. That is, after the initial idle state J, the data lines toggle KJKJKJKK. The final 1bit (repeated Kstate) {{marks the end of}} the sync pattern {{and the beginning of the}} USB frame. For high-bandwidth USB, the <b>packet</b> begins with a 32-bit synchronization sequence.|$|E
5|$|The only {{handshake}} <b>packet</b> the USB host may generate is ACK. If it is {{not ready}} to receive data, it should not instruct a device to send.|$|E
5|$|There are {{two basic}} forms of data <b>packet,</b> DATA0 and DATA1. A data <b>packet</b> must always be preceded by an address token, and is usually {{followed}} by a handshake token from the receiver back to the transmitter. The two <b>packet</b> types provide the 1-bit sequence number required by stop-and-wait ARQ. If a USB host does not receive a response (such as an ACK) for data it has transmitted, it does not know if the data was received or not; the data might have been lost in transit or {{it might have been}} received but the handshake response was lost.|$|E
5|$|During USB communication, data is {{transmitted}} as <b>packets.</b> Initially, all <b>packets</b> are sent from the host via the root hub, and possibly more hubs, to devices. Some of those <b>packets</b> direct {{a device to}} send some <b>packets</b> in reply.|$|R
40|$|Existing <b>packets</b> {{scheduling}} algorithms {{designed for}} energy-efficient wireless networks ignore important features of periodic <b>packets,</b> thereby being inadequate for periodic <b>packets</b> with energy constraints. To remedy this problem, we present {{in this paper}} an approach to scheduling periodic <b>packets</b> in wireless networks subject to both timing and energy constraints. We propose a necessary and sufficient feasibility check {{for a set of}} periodic <b>packets</b> to be transmitted over a wireless link. Next, we develop an algorithm to schedule periodic <b>packets</b> (or ESPP for short) over a wireless link. The ESPP algorithm aims at minimizing energy dissipation of periodic <b>packets</b> without missing deadlines of periodic <b>packets.</b> We show through simulation studies that ESPP can significantly reduce energy consumption of wireless networks by an average of 46. 4 % while guaranteeing timing constraints of periodic <b>packets.</b> 1...|$|R
40|$|Gift giving is a {{ubiquitous}} social phenomenon, and red <b>packets</b> {{have been}} used as monetary gifts in Asian countries for thousands of years. In recent years, online red <b>packets</b> have become widespread in China through the WeChat platform. Exploiting a unique dataset consisting of 61 million group red <b>packets</b> and seven million users, we conduct a large-scale, data-driven study to understand the spread of red <b>packets</b> and the effect of red <b>packets</b> on group activity. We find that the cash flows between provinces are largely consistent with provincial GDP rankings, e. g., red <b>packets</b> are sent from users in the south to those in the north. By distinguishing spontaneous from reciprocal red <b>packets,</b> we reveal the behavioral patterns in sending red packets: males, seniors, and people with more in-group friends are more inclined to spontaneously send red <b>packets,</b> while red <b>packets</b> from females, youths, and people with less in-group friends are more reciprocal. Furthermore, we use propensity score matching to study the external effects of red <b>packets</b> on group dynamics. We show that red <b>packets</b> increase group participation and strengthen in-group relationships, which partly explain the benefits and motivations for sending red <b>packets.</b> Comment: 20 pages, 7 figure...|$|R
25|$|Audio packets– {{also known}} as {{isochronous}} data packets, these packets are sent out by all CobraNet devices after they receive a beat <b>packet.</b> At standard latency settings, one audio <b>packet</b> is sent for each beat <b>packet</b> received, and each audio <b>packet</b> includes 64 samples of audio data per channel. At lower latency settings, audio packets may be sent twice or four times for each beat <b>packet</b> received. Bundles do not share packets; separate packets are sent in sequence for each bundle transmitted from the same device.|$|E
25|$|Rarely {{used because}} of its {{outdated}} nature, window scanning is fairly untrustworthy in determining whether a port is opened or closed. It generates the same <b>packet</b> as an ACK scan, but checks whether the window field of the <b>packet</b> has been modified. When the <b>packet</b> reaches its destination, a design flaw attempts to create a window size for the <b>packet</b> if the port is open, flagging the window field of the <b>packet</b> with 1's before it returns to the sender. Using this scanning technique with systems that no longer support this implementation returns 0's for the window field, labeling open ports as closed.|$|E
25|$|S replies with {{an option}} ACK if options were used, and an ACK (acknowledgement) <b>packet</b> to WRQ and {{directly}} with a DATA <b>packet</b> to RRQ. <b>Packet</b> is sent from a randomly allocated ephemeral port, and all future packets to host S {{should be directed}} to this port.|$|E
50|$|Sequence numbers allow {{receivers}} {{to discard}} duplicate <b>packets</b> and properly sequence reordered <b>packets.</b> Acknowledgments allow senders {{to determine when}} to retransmit lost <b>packets.</b>|$|R
40|$|We {{examine the}} revival {{structure}} of Rydberg wave <b>packets.</b> These wave <b>packets</b> exhibit initial classical periodic motion {{followed by a}} sequence of collapse, fractional/full revivals, and fractional/full superrevivals. The effects of quantum defects on wave <b>packets</b> in alkali-metal atoms and a squeezed-state description of the initial wave <b>packets</b> are also described. We then examine the revival structure of Rydberg wave <b>packets</b> {{in the presence of}} an external electric field, i. e., the revival structure of Stark wave <b>packets.</b> These wave <b>packets</b> have energies that depend on two quantum numbers and exhibit new types of interference behavior. ...|$|R
3000|$|... <b>packets</b> {{are stored}} in the {{transmission}} buffer. The remaining <b>packets</b> are lost. In the next time slot, the <b>packets</b> stored in the buffer are transmitted through the channel. These <b>packets</b> face a delay in reaching the destination. The same process as above {{is applied to the}} rest of the new <b>packets</b> to be transmitted, but now the effective channel capacity is R [...]...|$|R
