10000|10000|Public
5|$|The {{interior}} is decorated in Greek Revival. style. Immediately inside the entrance is a hall laid with a stone and marble <b>patterned</b> floor. The ceiling has a saucer dome supported by eight marble Ionic columns in a circle. In addition it contains decorative anthemion friezes and a stone and marble <b>patterned</b> floor. The morning {{room in the}} east corner is in a late 19th century Adam/Wyatt style.|$|E
5|$|At Westover {{the north}} and south entrances, made of {{imported}} Portland stone, were <b>patterned</b> after a plate in William Salmon's Palladio Londinensis (1734).|$|E
5|$|Coastal patrol boats such {{as those}} of the Norwegian, Swedish and Indonesian navies {{continue}} to use terrestrial style disruptively <b>patterned</b> camouflage.|$|E
5000|$|Behavioral <b>patterns</b> (11): Chain-of-responsibility <b>pattern,</b> Command <b>pattern,</b> Interpreter <b>pattern,</b> Iterator <b>pattern,</b> Mediator <b>pattern,</b> Memento <b>pattern,</b> Observer <b>pattern,</b> State <b>pattern,</b> Strategy <b>pattern,</b> Template method <b>pattern,</b> Visitor <b>pattern</b> ...|$|R
5000|$|Structural <b>patterns</b> (7): Adapter <b>pattern,</b> Bridge <b>pattern,</b> Composite <b>pattern,</b> Decorator <b>pattern,</b> Facade <b>pattern,</b> Flyweight <b>pattern,</b> Proxy <b>pattern</b> ...|$|R
5000|$|Single piece <b>pattern</b> :-it {{is simply}} the replica of the desired casting.it is {{slightly}} larger than the casting [...] these <b>pattern</b> may be of wood, metal or plastic ( [...] hard plastic).Match plate <b>pattern,</b> Cope & drag <b>pattern,</b> lagged-up <b>pattern,</b> Built up <b>pattern,</b> Multi-piece <b>pattern,</b> Gated <b>pattern,</b> Sweep <b>pattern,</b> Skeleton <b>pattern,</b> Shell <b>pattern</b> and loose piece <b>pattern,</b> Left and right hand <b>pattern,</b> Follow board <b>pattern,</b> Segmental <b>patterns</b> {{are some of the}} types of <b>patterns.</b>|$|R
5|$|File:Lady Anne Pope Robert Peake c 1615 Tate.jpg|Lady Anne Pope, {{sister-in-law}} of Elizabeth Pope, 1615. Her {{dress is}} <b>patterned</b> with carnations, roses and strawberries; the cherries {{on the tree}} symbolise virtue.|$|E
5|$|Red-pink in colour, {{the timber}} resembles English oak. It {{has been used}} in boatbuilding and is strong, durable and distinctively <b>patterned.</b>|$|E
5|$|The two lions have a male mane, <b>patterned</b> with dense, short lines; the manes {{continue}} {{beneath the}} body. Distinctly <b>patterned</b> tufts of hair grow from the lion's ears {{and on their}} shoulders, emanating from a central disk-shaped whorl. They lie prone, their heads are sculpted with attention to detail, but {{with a degree of}} artistic liberty in their form, e.g., regarding their rounded shapes. Both lions look towards the viewer, and both have their mouths closed.|$|E
5000|$|Creational <b>patterns</b> (5): Factory method <b>pattern,</b> Abstract factory <b>pattern,</b> Singleton <b>pattern,</b> Builder <b>pattern,</b> Prototype <b>pattern</b> ...|$|R
40|$|This <b>pattern</b> {{language}} captures "best practices" of <b>pattern</b> {{writing as}} observed at PLoP- 95. It describes, in <b>pattern</b> form, the characteristics which {{the authors and}} other reviewers in their review groups found most appealing about the <b>patterns</b> and <b>pattern</b> languages they reviewed. The <b>patterns</b> in this language fall into two broad categories: <b>patterns</b> which apply to all <b>patterns,</b> and <b>patterns</b> which apply to <b>patterns</b> within a <b>pattern</b> language. This language attempts to be an exemplar of the practices it proposes...|$|R
40|$|Abstract: <b>Patterns</b> allow {{division}} of knowledge into manageable pieces. It {{is necessary to}} develop <b>Pattern</b> Management System (PMS) in order to effectively use <b>patterns.</b> In this article components of PMS are proposed. PMS uses metadata about <b>patterns</b> and database of <b>patterns</b> to guide management of <b>patterns.</b> Textual descriptions of <b>patterns</b> and models what specify <b>pattern</b> are stored in the database of <b>patterns.</b> ...|$|R
5|$|Animals such as frogs are <b>patterned</b> so {{that when}} they are at rest with legs tucked in, their outline is powerfully {{disrupted}} with markings that seem to flow across body and leg boundaries. Eyes too are often hidden in stripes.|$|E
5|$|Banksia menziesii {{has several}} horticultural {{features}} including <b>patterned</b> buds and follicles, attractive pinkish new growth, and showy flowerheads. A dwarf form is commonly sold in nurseries. Byron Lamont has observed that dwarf plants may grow into taller single-trunked plants in cultivation.|$|E
5|$|By 2008 many Democrats were {{considering}} this approach {{as the basis}} for healthcare reform. Experts said that the legislation that eventually emerged from Congress in 2009 and 2010 bore similarities to the 2007 bill and that it was deliberately <b>patterned</b> after Romney's state healthcare plan.|$|E
30|$|The {{continuous}} <b>pattern</b> {{develops in}} two or four directions with a simple <b>pattern</b> unit, becoming a strip-shaped <b>pattern</b> or a <b>pattern</b> surface with a certain length. The biggest characteristic of continuous <b>patterns</b> is the continuity of <b>patterns,</b> with rhythm and rhythm beauty. Continuous <b>patterns</b> have {{a wide range of}} applications, such as architecture, decoration, textile, clothing, ceramics, and other design fields. The continuous <b>pattern</b> of the <b>pattern</b> is mainly two-dimension series <b>pattern</b> [24].|$|R
40|$|A unified {{theory of}} {{software}} <b>patterns</b> is presented through {{the unification of}} other existing <b>pattern</b> theories. The theories considered are: 1) the General <b>Pattern</b> Theory from Grenander, 2) the Lepus software <b>patterns</b> theory by Eden and co-workers, and 3) the Alexanderian <b>pattern</b> theory. This unified theory defines commonalities for 1) <b>pattern</b> structure, 2) invariance of relationships on structural components within a <b>pattern</b> and <b>pattern</b> instances, 3) comparative measurements on candidate <b>patterns,</b> and 4) <b>pattern</b> composition...|$|R
40|$|Abstract:- Design <b>pattern</b> {{selection}} {{is a difficult}} task. Evaluating the text based problem statement and finding the <b>pattern</b> is a challenging task. Improper text evaluation leads to incorrect <b>pattern</b> selection. The current paper describes a text support model (XML) for design <b>pattern</b> organization called Unified <b>Pattern</b> Document Repository (UPDR), related work of <b>pattern</b> repositories, <b>pattern</b> indexing process, and <b>pattern</b> retrieval. Keywords:- Design <b>pattern,</b> Inverted Index, Lucene index, JAXB, Document and <b>pattern</b> retrieval, an...|$|R
5|$|Despite {{rumors that}} Killebrew was the player {{depicted}} in the Major League Baseball logo, according to the creator, Jerry Dior, it was not <b>patterned</b> after Killebrew or any other specific player. Killebrew is {{the model for the}} Major League Baseball Players Alumni Association, an organization which Killebrew helped found in 1982.|$|E
5|$|In July 2014, a brass {{memorial}} plaque {{was unveiled}} in St Stephen's Hall, Houses of Parliament, {{close to the}} place where Perceval was killed. Michael Ellis, Conservative MP for Northampton North (part of Perceval's old Northampton constituency) had campaigned for the plaque after four <b>patterned</b> floor tiles that were said to mark the spot had been removed by workmen in a recent renovation.|$|E
5|$|In the US in the 1960s, {{military}} clothing {{became increasingly}} common (mostly olive drab rather than <b>patterned</b> camouflage); {{it was often}} found worn by anti-war protestors, initially within groups such as Vietnam Veterans Against the War but then increasingly widely {{as a symbol of}} political protest.|$|E
40|$|This paper {{explains}} how <b>patterns</b> {{can be used}} to describe the implementation of other <b>patterns.</b> It is demonstrated how certain design <b>patterns</b> can describe their own design. This is a fundamental reflexive relationship in <b>pattern</b> relationships. The process of assembling <b>patterns</b> by other <b>patterns</b> is named <b>pattern</b> tiling. Tiling enables us to interweave simple understood concepts of <b>patterns</b> into their complex real-life implementation. Several <b>pattern</b> tilings for the Interpreter design <b>pattern</b> are illustrated. ...|$|R
40|$|Class or object {{interactions}} {{form the}} basis of object-oriented design. However, design <b>pattern</b> interaction {{can be viewed as a}} higher level of abstraction for system design. The typical interactions among the <b>patterns</b> are a <b>pattern</b> uses another <b>pattern</b> to solve one of its sub problem, and a <b>pattern</b> com-bines with another <b>pattern</b> for completeness. This paper pro-poses a mechanism called <b>pattern</b> hybridization for breeding new <b>patterns</b> from the <b>pattern</b> interactions which solve more specialized problems than the original <b>patterns</b> do. Rules for generating hybrid <b>patterns</b> are also mentioned in the paper. This paper also views design <b>pattern</b> interactions for system design...|$|R
40|$|The <b>patterns</b> {{that are}} here {{are part of the}} larger {{collection}} of <b>patterns</b> by many authors on <b>Pattern</b> Mining. These are <b>patterns</b> that I’ve used repeatedly. They include <b>Patterns</b> for <b>Pattern</b> Writing by Meszaros and Doble [MD 96] and <b>Pattern</b> Mining by DeLano [DeL 98] I’d like to acknowledge Jim Coplien who got me started looking at <b>patterns,</b> first as an “expert ” that he mined <b>patterns</b> from and then guiding me as I started writing <b>patterns</b> for my own project. Also thanks to Michael Weiss for shepherding these <b>patterns.</b> Background Many of the <b>patterns</b> here are related to building a “language”. What I mean in this paper by “language ” is a group of <b>patterns</b> that work together to solve a larger problem. They work together by a <b>pattern</b> B resolving the new problems introduced by applying the solution to problem A. For example the <b>patterns</b> from <b>Patterns</b> for Fault Tolerant Software [Han 07] Riding over Transients and Leaky Bucket Counter work together {{to solve the problem of}} dealing with transient faults. Riding Over Transients offers the general strategy but leaves the problem “how do I implement that ” which Leaky Bucket counter then solves. Because many of the <b>patterns</b> here talk about the relationship between <b>patterns,</b> I find it useful to talk about the upper <b>pattern</b> and the lower <b>pattern.</b> An upper <b>pattern</b> will have a lower letter (A<B<…<Z) than the lower <b>pattern.</b> The upper <b>pattern</b> is the first <b>pattern</b> that you encounter when using the set of <b>patterns,</b> ultimately it leaves some force unresolved which leads to the need for the lower <b>pattern.</b> Lower <b>patterns</b> resolve issues left by the upper <b>patterns.</b> The lower <b>pattern</b> “follows ” the upper <b>pattern.</b> I’ll draw this relationship like this: At the boundaries of the language there are <b>patterns</b> that are one sided. The topmost problem introduces lots of forces/tradeoffs/considerations that lower <b>pattern...</b>|$|R
5|$|Later in the 20th century, as disruptively <b>patterned</b> uniforms became widespread, winter {{variants}} of patterns such as Flecktarn were developed, the background colour (such as green) being replaced with white {{to form a}} Schneetarn (snow camouflage pattern). Aircraft deployed in winter have sometimes been snow camouflaged, as with Sepecat Jaguars on exercise in Norway.|$|E
5|$|Noting {{some of its}} {{architectural}} similarities, it {{is often}} stated that Delhi's Parliament House which {{was built in the}} 1920s has been <b>patterned</b> on the lines of this circular-shaped temple. There is, however, no reliable basis for this.|$|E
5|$|Playing minor hockey in Sault Ste. Marie, Cloutier was at {{one time}} on the same bantam team as another future NHL goaltender, Marty Turco. Like many Quebec-born goaltenders of his time, Cloutier <b>patterned</b> the {{butterfly}} elements of his playing style after Hall of Fame goaltender Patrick Roy.|$|E
30|$|Figure 1 a shows four data trees {{corresponding}} to different schemas {{to be integrated}} through the mining of large tree <b>patterns.</b> The frequency threshold is set to three. Figure  1 b shows induced mined tree <b>patterns,</b> embedded <b>patterns</b> and non-redundant homomorphic <b>patterns.</b> Figure  1 b includes the largest <b>patterns</b> that can be mined in each category. As one can see, the shown embedded <b>patterns</b> are not induced <b>patterns,</b> and the shown homomorphic <b>patterns</b> are neither embedded nor induced <b>patterns.</b> Further, the homomorphic <b>patterns</b> are larger {{than all the other}} <b>patterns.</b>|$|R
3000|$|Enterprise Application Architecture <b>Patterns</b> hasSubcategories Data Source Architectural <b>Patterns,</b> Object Relational Behavioural <b>Patterns,</b> Object Relational Metadata Mapping <b>Patterns,</b> Object Relational Structural <b>Patterns</b> [...]...|$|R
40|$|In this paper, we {{developed}} an approach for extracting commerce design <b>patterns</b> for B 2 C e-commerce to improve business-based systems. This approach is called an Agent <b>Pattern</b> Driven Business Engineering (APDBE). Based on this approach, we derived an agent-based commerce design <b>pattern,</b> called the Dynamic Design <b>Pattern</b> (DynDP). This <b>pattern</b> uses to support selling/buying business processes in ecommerce domain. The developed approach uses the Agent <b>Pattern</b> Driven Business Engineering Life (APDBEL) cycle, which addresses the following steps: (i) identify of business models, processes, and partners, (ii) assemble business <b>patterns</b> of business models, (iii) identify agent clusters of business <b>patterns,</b> (iv) address Agent Design <b>Patterns</b> (ADP) or Object Design <b>Patterns</b> (ODP) for the reuse with business <b>patterns</b> agent clusters, (v) combine agent or object design <b>patterns</b> with business <b>patterns</b> to create Business Application <b>Patterns</b> (BAP), and (vi) document and analyze agent commerce <b>patterns.</b> Based on APDBE approach, {{we developed}} the Dynamic Design <b>Pattern</b> (DynDP), which uses the Master-Slave <b>pattern</b> for mobile agent with Selling/Buying Business <b>Pattern</b> (SBBP) agent cluster (i. e., selling agent, buying agent, and facilitator agent). DynDP supports the Facilitator-Shopping <b>pattern</b> for B 2 C selling/buying systems...|$|R
5|$|Snow {{camouflage}} {{is the use}} of a coloration or {{pattern for}} effective camouflage in winter, often combined with a different summer camouflage. Summer patterns are typically disruptively <b>patterned</b> combinations of shades of browns and greys, up to black, while winter patterns are dominated by white to match snowy landscapes.|$|E
5|$|The {{existence}} of aposematism in marine ecosystems is controversial. Many marine organisms, particularly those on coral reefs, are brightly coloured or <b>patterned,</b> including sponges, corals, molluscs and fishes, {{with little or}} no connection to chemical or physical defenses. Caribbean reef sponges are brightly coloured, {{and many of them are}} chemically defended, but there is no relationship between the two factors.|$|E
5|$|Arsenal {{reworked}} Type 26s {{lack the}} bright charcoal blue finish or standard checked <b>patterned</b> grip panels. Serrated grip panels are common among reworked Type 26s and the marking of the Nagoya Arsenal indicate repairing of the Type 26 past its {{production at the}} Koshikawa Arsenal. Two existing arsenal reworked Type 26s show stampings of Siamese numerals on the front grips indicating official procurement by the Thai government. Two additional reworked Type 26s have a five-pointed star stamped on the side plate of the revolver indicating Indonesian service after World War II.|$|E
50|$|Creational design <b>patterns</b> {{are further}} {{categorized}} into Object-creational <b>patterns</b> and Class-creational <b>patterns,</b> where Object-creational <b>patterns</b> deal with Object creation and Class-creational <b>patterns</b> deal with Class-instantiation. In greater details, Object-creational <b>patterns</b> defer {{part of its}} object creation to another object, while Class-creational <b>patterns</b> defer its object creation to subclasses.|$|R
40|$|We {{propose a}} new method, called closed multidimensional {{sequential}} <b>pattern</b> mining, for mining multidimensional sequential <b>patterns.</b> The new method is an integration of closed sequential <b>pattern</b> mining and closed itemset <b>pattern</b> mining. Based on this method, {{we show that}} (1) the number of complete closed multidimensional sequential <b>patterns</b> is not larger {{than the number of}} complete multidimensional sequential <b>patterns</b> (2) the set of complete closed multidimensional sequential <b>patterns</b> covers the complete resulting set of multidimensional sequential <b>patterns.</b> In addition, mining using closed itemset <b>pattern</b> mining on multidimensional information would mine only multidimensional information associated with mined closed sequential <b>patterns,</b> and mining using closed sequential <b>pattern</b> mining on sequences would mine only sequences associated with mined closed itemset <b>patterns.</b> Key-Words: multidimensional <b>pattern</b> mining, closed <b>pattern</b> mining, data mining. 1...|$|R
40|$|<b>Pattern</b> {{matching}} {{is a great}} convenience in programming. However, <b>pattern</b> matching has its problems: it conicts {{with data}} abstraction; it is complex (at least in Haskell, which has <b>pattern</b> guards, irrefutable <b>patterns,</b> n+k <b>patterns,</b> as <b>patterns,</b> etc.); it {{is a source of}} runtime errors; and lastly, one cannot abstract over <b>patterns</b> as they are not a rst class language construct. This paper proposes a simplication of <b>pattern</b> matching that makes <b>patterns</b> rst class. The key idea is to treat <b>patterns</b> as functions of type a!Maybe bi. e., a!(Nothing|Just b); thus, <b>patterns</b> and <b>pattern</b> combinators can be written as functions in the language. 1 Introduction A hotly debated issue in the language Haskell [HJW 92] has been <b>patterns.</b> What are their semantics? Do we want n+ 1 <b>patterns?</b> Do we need @-patterns? When do we match lazily and when do we match strictly? Do we need to extend <b>patterns</b> with <b>pattern</b> guards? And etc. In this paper I will propose, not another extension, but a simplicat [...] ...|$|R
