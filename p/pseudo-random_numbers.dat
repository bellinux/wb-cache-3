248|520|Public
25|$|Applications of LFSRs include {{generating}} <b>pseudo-random</b> <b>numbers,</b> pseudo-noise sequences, fast digital counters, and whitening sequences. Both {{hardware and}} software implementations of LFSRs are common.|$|E
25|$|Pseudo-random number {{sampling}} algorithms {{are used}} to transform uniformly distributed <b>pseudo-random</b> <b>numbers</b> into numbers that are distributed according to a given probability distribution.|$|E
25|$|There {{are many}} {{applications}} {{in which it}} is useful to run simulation experiments. Many programming languages have the ability to generate <b>pseudo-random</b> <b>numbers</b> which are effectively distributed according to the standard uniform distribution.|$|E
50|$|A cryptographically secure <b>pseudo-random</b> <b>number</b> {{generator}} (CSPRNG) or cryptographic <b>pseudo-random</b> <b>number</b> generator (CPRNG) is a <b>pseudo-random</b> <b>number</b> generator (PRNG) with {{properties that}} make it suitable for use in cryptography.|$|R
40|$|Abstract. Random {{number is}} widely used in {{computer}} application. What is used commonly in practice is <b>pseudo-random</b> <b>number</b> generated by mathematical algorithm. Several useful <b>pseudo-random</b> <b>number</b> generating algorithm and random testing methods are discussed. And according to the disadvantage of traditional algorithm, improvement of <b>pseudo-random</b> <b>number</b> generating algorithm and some new methods to generate real-random number are summarized and analyzed...|$|R
40|$|There {{exist today}} many 'good' <b>pseudo-random</b> <b>number</b> generators; {{the problem is}} to {{retrieve}} them. This document discusses three commonly used pseudo- random number generators, the first being RANDU, a notoriously bad generator, but one which is still occasionally used. The next is the widely used prime modulus, multiplicative congruential generator used in LL-RANDOMII, the Naval Postgraduate School random number package, and the last is the random number generator provided for microcomputers with the DOS operating system. This latter <b>pseudo-random</b> <b>number</b> generator is completely defective. Simple graphical methods for initial screening of <b>pseudo-random</b> <b>number</b> generators are given, and the problems which arise with bad <b>pseudo-random</b> <b>number</b> generators are detailed with graphics. Finally, recent work on obtaining even better <b>pseudo-random</b> <b>number</b> generators is discussedPrepared for: Naval Postgraduate School Monterey, CA[URL]...|$|R
2500|$|A {{frequent}} {{problem in}} statistical simulations (the Monte Carlo method) is {{the generation of}} <b>pseudo-random</b> <b>numbers</b> that are distributed in a given way. Most algorithms {{are based on a}} pseudorandom number generator that produces numbers X that are uniformly distributed in the interval [...] These random variates X are then transformed via some algorithm to create a new random variate having the required probability distribution.|$|E
50|$|The CLCG {{provides}} an {{efficient way to}} calculate <b>pseudo-random</b> <b>numbers.</b> The LCG algorithm is computationally inexpensive to use. The results of multiple LCG algorithms are combined through the CLCG algorithm to create <b>pseudo-random</b> <b>numbers</b> with a longer period than is achievable with the LCG method by itself.|$|E
50|$|The {{generation}} of <b>pseudo-random</b> <b>numbers</b> having an approximately normal distribution is sometimes accomplished by computing {{the sum of}} a number of <b>pseudo-random</b> <b>numbers</b> having a uniform distribution; usually for the sake of simplicity of programming. Rescaling the Irwin-Hall distribution provides the exact distribution of the random variates being generated.|$|E
40|$|An {{algorithm}} and coding {{technique is}} presented for quick {{evaluation of the}} Lehmer <b>pseudo-random</b> <b>number</b> generator modulo 2 * * 31 [...] 1, a prime Mersenne number which pro-duces 2 * * 31 [...] 2 numbers, on a p-bit (greater than 31) computer. The computation method is extendible to limited problems in modular arithmetic. Prime factorization for 2 * * 61 [...] 2 and a primitive root for 2 * * 61 [...] 1, the next largest prime Mersenne number, are given for possible con-struction of a <b>pseudo-random</b> <b>number</b> generator of increased cycle length. KEY WORDS AND PHRASES: <b>pseudo-random</b> <b>number,</b> random number, modular arithmetic, uniform probability density, uniform frequency function, simulation, prime factorizatlon, primitive roots CR CATEGORIES: Most <b>pseudo-random</b> <b>number</b> generators are of the typ...|$|R
5000|$|<b>Pseudo-random</b> <b>number</b> generation, {{including}} Mersenne Twister MT19937.|$|R
5000|$|<b>Pseudo-random</b> <b>number</b> {{generator}} (PRNG) which generates {{session keys}} ...|$|R
5000|$|... and [...] {{they produce}} a variable-length stream of <b>pseudo-random</b> <b>numbers.</b>|$|E
5000|$|The {{expansion}} of the reciprocal 1/q in any base can also act [...] {{as a source of}} <b>pseudo-random</b> <b>numbers,</b> if q is a [...] "suitable" [...] safe prime, a prime of the form 2p + 1 where p is also a prime. A sequence of <b>pseudo-random</b> <b>numbers</b> of length q &minus; 1 will be produced by the expansion.|$|E
50|$|The {{following}} program generates <b>pseudo-random</b> <b>numbers</b> {{within the}} range of 1 to 6.|$|E
50|$|This <b>pseudo-random</b> <b>number</b> {{system is}} much weaker {{than the usual}} system of {{superencipherment}} but as an emergency backup system {{it would have been}} adequate and certainly better than using a transposition or simple substitution cipher. Like any other cipher system, breaking a <b>pseudo-random</b> <b>number</b> system just requires a sufficient amount of intercepted ciphertext.|$|R
2500|$|... the (<b>pseudo-random)</b> <b>number</b> {{generator}} produces {{values that}} pass tests for randomness ...|$|R
50|$|For the {{generation}} of non-uniform random variates, see <b>Pseudo-random</b> <b>number</b> sampling.|$|R
50|$|Safe primes obeying certain congruences {{can be used}} to {{generate}} <b>pseudo-random</b> <b>numbers</b> of use in Monte Carlo simulation.|$|E
50|$|Pseudo-random number {{sampling}} algorithms {{are used}} to transform uniformly distributed <b>pseudo-random</b> <b>numbers</b> into numbers that are distributed according to a given probability distribution.|$|E
50|$|Applications of LFSRs include {{generating}} <b>pseudo-random</b> <b>numbers,</b> pseudo-noise sequences, fast digital counters, and whitening sequences. Both {{hardware and}} software implementations of LFSRs are common.|$|E
5000|$|... the (<b>pseudo-random)</b> <b>number</b> {{generator}} produces {{values that}} pass tests for randomness ...|$|R
5000|$|It can {{be shown}} that if [...] is a <b>pseudo-random</b> <b>number</b> {{generator}} for the uniform distribution on [...] and if [...] is the CDF of some given probability distribution , then [...] is a <b>pseudo-random</b> <b>number</b> generator for , where [...] is the percentile of , i.e[...] Intuitively, an arbitrary distribution can be simulated from a simulation of the standard uniform distribution.|$|R
3000|$|... -distributed {{independent}} random variables, {{which can}} be generated numerically by <b>pseudo-random</b> <b>number</b> generators.|$|R
50|$|Pseudo-random number {{sampling}} or non-uniform pseudo-random variate {{generation is}} the numerical practice of generating <b>pseudo-random</b> <b>numbers</b> that are distributed {{according to a}} given probability distribution.|$|E
50|$|Common Lisp has a {{built-in}} pseudo-random number generator (PRNG). Random state objects represent reusable sources of <b>pseudo-random</b> <b>numbers,</b> allowing the user to seed the PRNG or cause it to replay a sequence.|$|E
50|$|For {{an image}} of {{reasonable}} size, even the simplest algorithms require too much calculation for manual execution to be practical, and they are thus executed on either a single computer or on a cluster of computers. The final output is typically displayed on a computer monitor, printed with a -type printer, or drawn using a plotter. Variability can be introduced by using <b>pseudo-random</b> <b>numbers.</b> There is no consensus {{as to whether the}} product of an algorithm that operates on an existing image (or on any input other than <b>pseudo-random</b> <b>numbers)</b> can still be considered computer-generated art, as opposed to computer-assisted art.|$|E
2500|$|Inversive congruential {{generator}} - a <b>pseudo-random</b> <b>number</b> generator {{that uses}} modular multiplicative inverses ...|$|R
2500|$|... the (<b>pseudo-random)</b> <b>number</b> {{generator}} {{has certain}} characteristics (e.g., a long [...] "period" [...] before the sequence repeats) ...|$|R
5000|$|Bob {{uses the}} BBS <b>pseudo-random</b> <b>number</b> {{generator}} to generate [...] random bits [...] (the keystream), as follows: ...|$|R
50|$|There {{are many}} {{applications}} {{in which it}} is useful to run simulation experiments. Many programming languages have the ability to generate <b>pseudo-random</b> <b>numbers</b> which are effectively distributed according to the standard uniform distribution.|$|E
50|$|As most systems involve {{stochastic}} processes, simulations frequently {{make use}} of random number generators to create input data which approximates the random nature of real-world events. Computer generated numbers are usually not random in the strictest sense, as they are calculated using a set of equations. Such numbers are known as <b>pseudo-random</b> <b>numbers.</b> When making use of <b>pseudo-random</b> <b>numbers</b> the analyst must make certain that the true randomness of the numbers is checked. If the numbers are found not to behave in a sufficiently random fashion, another generation technique must be found. Random numbers for the simulation are created by a random number generator.|$|E
5000|$|Computational and {{hardware}} random number generators are sometimes combined {{to reflect the}} benefits of both kinds. Computational random number generators can typically generate <b>pseudo-random</b> <b>numbers</b> much faster than physical generators, while physical generators can generate [...] "true randomness." ...|$|E
5000|$|... the (<b>pseudo-random)</b> <b>number</b> {{generator}} {{has certain}} characteristics (e.g., a long [...] "period" [...] before the sequence repeats) ...|$|R
50|$|The Monte Carlo Algorithm with a <b>Pseudo-Random</b> <b>Number</b> Generator, Mathematics of Computation 58, 199, 303-339 (with H. Woźniakowski).|$|R
2500|$|A simple {{algorithm}} {{to generate}} random Poisson-distributed <b>numbers</b> (<b>pseudo-random</b> <b>number</b> sampling) {{has been given}} by Knuth (see References below): ...|$|R
