4|2|Public
40|$|Abstract—Stream {{processing}} {{is widely}} used by today’s applications such as financial data analysis and disaster response. In distributed stream processing systems, machine fail-stop events are handled by either active standby or <b>passive</b> <b>standby.</b> However, existing high availability (HA) schemes have not sufficiently addressed the situation when a machine becomes temporarily unavailable due to data rate spikes, intensive analysis or job sharing, which happens frequently but lasts for short time. It {{is not clear how}} well active and <b>passive</b> <b>standby</b> fare against such transient unavailability. In this paper, we first critically examine the suitability of active and <b>passive</b> <b>standby</b> against transient unavailability in a real testbed environment. We find that both approaches have advantages and drawbacks, but neither is ideal to provide fast recovery at low overhead as required to handle transient unavailability. Based on the insights gained, we propose a novel hybrid HA method that switches between active and <b>passive</b> <b>standby</b> modes depending on the occurrence of failure events. It presents a desirable tradeoff that is different from existing HA approaches: low overhead during normal conditions and fast recovery upon transient or permanent failure events. We have implemented our hybrid method and compared it with existing HA designs with comprehensive evaluation. The results show that our hybrid method can reduce two-thirds of the recovery time compared to <b>passive</b> <b>standby</b> and 80 % message overhead compared to active standby, allowing applications to enjoy uninterrupted processing without paying a high premium. I...|$|E
40|$|High {{availability}} (HA) {{is critical}} for many stream processing applications such as financial data analysis and disaster response. Existing HA schemes use either active standby or <b>passive</b> <b>standby</b> to guard the system against unexpected failures such as machine crash. Despite previous efforts of simulation-based studies that report active standby is superior, {{there is a lack}} of in-depth understanding of the tradeoff between different HA approaches under practical settings. In this paper, we propose a novel sweeping checkpointing method that can reduce the overhead by one order of magnitude. Whereas most previous work addresses single failures, we prove that the sweeping checkpointing method ensures no loss of data even against multiple concurrent failures. We then implement and compare the resulting <b>passive</b> <b>standby</b> variant against active standby using a real stream processing system. We find that <b>passive</b> <b>standby</b> presents a different tradeoff from active standby: longer recovery time, but 90 % less overhead. Thus each approach has its suitable scenarios...|$|E
40|$|Reliability {{issues for}} various {{technical}} systems are discussed and focus is directed towards distributed systems, where com-munication facilities {{are vital to}} maintain system functional-ity. Reliability in communication subsystems is considered as a resource to be shared {{among a number of}} logical connec-tions and a reliability management framework is suggested. We suggest a network layer level reliability management pro-tocol RRSVP (Reliability Resource Reservation Protocol) as a counterpart of the RSVP for bandwidth and time resource management. Active and <b>passive</b> <b>standby</b> is discussed as well as utilization of <b>passive</b> <b>standby</b> redundancy by background applications residing on alternative routes. Details are pro-vided for the operation of RRSVP based on reliability slack calculus. Conclusions summarize the considerations and give directions for future research. 1...|$|E
50|$|The example {{shown in}} the figure on the right {{illustrates}} a model-based FDI technique for an aircraft elevator reactive controller {{through the use of}} a truth table and a state chart. The truth table defines how the controller reacts to detected faults, and the state chart defines how the controller switches between the different modes of operation (<b>passive,</b> active, <b>standby,</b> off, and isolated) of each actuator. For example, if a fault is detected in hydraulic system 1, then the truth table sends an event to the state chart that the left inner actuator should be turned off. One of the benefits of this model-based FDI technique is that this reactive controller can also be connected to a continuous-time model of the actuator hydraulics, allowing the study of switching transients.|$|R
40|$|Frederic Pelliccia Frederic_P el li ccia s o freten. fr Among the {{different}} r/n redundancies, {{it is necessary}} to distinguish between the (classic) case of active redundancies (hot standby) and the case of <b>passive</b> redundancies (cold <b>standby)</b> presenting failures at calling instant. This paper deals with passive redundancy including such solicitation failures: redundancy elements only operate in case of the failure of initial elements and have a non negligible probability of failing at the instant of solicitation. In this paper we propose some heuristics in order to integrate their computations in large optimization software using iterative schemes...|$|R
40|$|While {{distributed}} query processing {{has many}} advantages, {{the use of}} many independent, physically widespread computers almost universally leads to reliability issues. Several techniques {{have been developed to}} provide redundancy and the ability to recover from node failure during query processing. In this survey, we examine three techniques [...] upstream backup, active standby, and <b>passive</b> <b>standby</b> [...] that have been used in both distributed stream data processing and the distributed processing of static data. We also compare several recent systems that use these techniques, and explore which recovery techniques work well under various conditions...|$|E

