0|119|Public
50|$|A {{programmable}} logic <b>array</b> (<b>PLA)</b> has a programmable AND gate array, which links to a programmable OR gate array, which {{can then be}} conditionally complemented to produce an output.|$|R
40|$|The Algorithmic State Machine (ASM) is {{a method}} used to solve more complex {{industrial}} problems. The basic advantage of this method is to convert these problems to simpler circuits which consist only from the basic elements which are AND, OR and NOT gates, which can be implemented easily by using the Programmable Logic <b>Array</b> (<b>PLA)</b> circuits. The entry variables (number of inputs and states) for such problems are large, this made the theoretical (manual) solution is hard to solve. This research constructs a computer package called (ASM-CAD) to make the entire design using C++ and TC++ programming languages. Key Words: Algorithmic State Machine (ASM) method. Programmable Logic <b>Array</b> (<b>PLA)</b> circuit. Quine-McCluskey is a programmable method. 1...|$|R
40|$|Multiple-valued logic {{minimization}} is {{an important}} technique for reducing the area required by a Programmable Logic <b>Array</b> (<b>PLA).</b> This report describes both heuristic and exact algorithms for solving the multiple-valued logic minimization probleb. These algorithms have been implemented in a C program called Espresso-MV. ...|$|R
40|$|Abstract — The paper {{deals with}} {{designing}} fault tolerant finite state machines (FSMs) by nanoelectronic programmable logic <b>arrays</b> (<b>PLAs).</b> Two main critical {{parameters of the}} fault tolerant nano-PLAs, the area {{and the number of}} crosspoint devices, are considered as optimization criteria for the synthesis. The paper introduces a method for synthesizing fault tolerant nano-PLA based FSMs. The method is based on decomposing an initial PLA description of the FSM into a three interacting portions. The proposed solution provides significant reduction of the area without meaningful increasing of a number of crosspoint devices in comparison with known solutions and provides a trade-off between the area and the number of devices in designing FSMs by <b>PLAs.</b> Programmable logic <b>arrays</b> (<b>PLAs)</b> have a bright history i...|$|R
40|$|Considered a "manual" {{method of}} design {{automation}} systems using programmable logic <b>arrays</b> (<b>PLA),</b> {{which is based}} on the six stages of designing (on the algorithm of the system before its construction and programming), using automata theory and computer logic. Application of the method is demonstrated on a concrete example. ?????????? ???? "??????" ????? ?????????????? ?????? ?????????? ? ??????????? ??????????????? ?????????? ?????? (???), ?????????? ?? ????? ?????? ?????????????? (?? ????????? ?????? ??????? ? ?? ?????????? ? ????????????????), ????????? ?????? ????????? ? ???????????? ??????. ?????????? ?????? ?????????????????? ?? ?????????? ???????...|$|R
40|$|Magnitude-and-sign counter {{includes}} conventional up/down counter for magnitude {{part and}} special additional circuitry for sign part. Negative numbers indicated more directly. Counter implemented by programming erasable {{programmable logic device}} (EPLD) or programmable logic <b>array</b> (<b>PLA).</b> Used in place of conventional up/down counter to provide sign and magnitude values directly to other circuits...|$|R
40|$|The letter {{reports a}} new concept for {{transverse}} folding of programmable logic <b>arrays</b> (<b>PLAs).</b> With the new definitions for the compatibility and foldability of rows (columns) of a column-folded (row-folded) PLA, the transverse compatibility-cum-foldability matrix (TCFM) is plotted. From the TCFM, a transverse folding matrix (TFM) is found, from which the row (column) folding pairs and the resulting ordering of rows and columns are obtained...|$|R
50|$|Stored {{program control}} {{implementations}} may be organized into centralized and distributed approaches. Early electronic switching systems (ESS) {{developed in the}} 1960s and 1970s almost invariably used centralized control. Although many present day exchange design continue to use centralized SPC, with advent of low cost powerful microprocessors and VLSI chips such as programmable logic <b>array</b> (<b>PLA)</b> and programmable logic controllers (PLC), distributed SPC became widespread by the early 21st century.|$|R
40|$|This paper {{describes}} a synchronising and scheduling system for wide area synchronised data acquisition applications and fault location in power systems, using Global Positioning System (GPS) technology. The system hardware features a commercial GPS receiver, serial communications link {{for a host}} computer, and a dedicated programmable real time clock with programmable trigger features. Details are given of the design and implementation of these features using Programmable Logic <b>Array</b> (<b>PLA)</b> technology. Conference Pape...|$|R
40|$|We {{describe}} {{two techniques}} for the minimization {{of the area}} of a Programmable Logic <b>Array</b> (<b>PLA).</b> Based on the logic functions to be implemented an assignment of the inputs and outputs to the columns of a PLA is determined that is especially suited for row segmentation. An upper bound and a lower bound {{for the number of}} rows in the segmented PLA are derived. Furthermore, it is shown how the result can be improved upon by the duplication of some of the inputs...|$|R
40|$|The {{problem of}} {{determining}} a minimal number of control inputs for converting a programmable logic <b>array</b> (<b>PLA)</b> with undetectable faults to crosspoint-irredundant PLA for testing has been formulated as a nonstandard set covering problem. By representing subsets of sets as cubes, this {{problem has been}} reformulated as familiar problems. It is noted that this result has significance because a crosspoint-irredundant PLA {{can be converted to}} a completely testable PLA in a straightforward fashion, thus achieving very good fault coverage and easy testability...|$|R
40|$|Recently, it was {{demonstrated}} that the polarity of carbon nanotube eld effect transistors can be electrically controlled. In this paper we show how Programmable Logic <b>Arrays</b> (<b>PLA)</b> can be built out of these devices, and we illustrate how they outperform usual PLA by internal signal inversion. The simulations show an area sav-ing up to 21 % and decrease of the delay in PLA-based FPGA by 50 %. We also show that this architecture is suitable for high-performance design tools and defect-tolerance approaches...|$|R
50|$|Known {{applications}} of many-valued logic can be roughly classified into two groups. The first group uses many-valued logic domain to solve binary problems more efficiently. For example, a well-known approach {{to represent a}} multiple-output Boolean function is to treat its output part as a single many-valued variable and convert it to a single-output characteristic function (specifically, the indicator function). Other {{applications of}} many-valued logic include design of programmable logic <b>arrays</b> (<b>PLAs)</b> with input decoders, optimization of finite state machines, testing, and verification.|$|R
40|$|Abstract — The {{proposed}} {{method is}} targeted on reduction of hardware amount in logic circuit of Moore finite-state machine implemented with programmable logic <b>arrays</b> (<b>PLA).</b> The method {{is based on}} using more than minimal amount of variables in codes of FSM internal states. The method includes two stages of state encoding. The second stage is connected with recoding of states inside each class of pseudoequivalent states. An example is given for proposed method application. Keywords- Moore FSM, graph-scheme of algorithm, pseudoequivalent states, PLA, logic circui...|$|R
40|$|Programmable logic <b>arrays</b> (<b>PLAs)</b> {{present an}} {{alternative}} to logic-gate based design. We propose the transistor level structure of a PLA for single-rail asynchronous applications. The geometrically regular layout together with the deployment of dynamic logic help us fine-tune the PLA to enhance its resistance to side-channel attacks, while parity prediction and checking is employed to protect against malicious fault injection. Finally, we demonstrate how our PLAs {{can be used as}} building blocks of large-scale systems with good security characteristics, when combined with special return-to-zero asynchronous latches. 1...|$|R
40|$|Abstract — Research in {{the fields}} of physics, {{chemistry}} and elec-tronics has demonstrated that Quantum-dot Cellular Automata (QCA) is a viable alternative for nano-scale computing. However, little work on QCA has studied designing implementation-friendly programmable QCA circuits. This paper fills this gap by presenting a novel QCA-based Programmable Logic <b>Array</b> (<b>PLA)</b> structure. In addition to being compact, the proposed PLA structure exploits some unique properties of QCA cells to achieve ease of implementation, programming and defect detection. These features are indispensable to the successful adoption of any nano-scale circuits. I...|$|R
40|$|Weinberger arrays (WAs) are an {{alternative}} to progammable logic <b>arrays</b> (<b>PLAs)</b> {{as a method of}} implementing combinatorial logic circuits. Column folding is a technique generally employed in PLAs to save the silicon area by implementing the circuit of two column in the area of one. THis paper describes an algorithm for folding weinberger arrays. The algorithm performs column and row ordering and tehn column folding. The complexity of the algorithm is 0 (n-squared). The algorithm has been tested extensively on WAs that were generated circuits. Experimental results are discussed...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThe {{goal of this}} thesis {{is the development of}} a programmable logic <b>array</b> (<b>PLA)</b> that accepts multiple-valued inputs and produces multiple valued outputs. The PLA is implemented in CMOS and multiple levels are encoded as current. It is programmed by choosing transistor geometries which control the current level at which the PLA reacts to inputs. An example of a 4 -valued PLA is shown. As part of this research, a C program was written that produces a PLA layout. [URL] Republic of Korea Air Forc...|$|R
40|$|The article {{presents}} an optical displacement transducer with tilt self-correction capabilities. As the transducer components {{it can be}} mentioned a pixel linear <b>array</b> (<b>PLA)</b> circuit, a reflective surface and two laser diodes. A data acquisition board performs the control and acquisition tasks, which control the laser diode drivers (LDD) and PLA. Acquiring the digital output signal from the PLA the reflective surface displacement is evaluated. Several processing blocks developed in LabVIEW extract the measurement information avoiding the reflective surface tilt effects. Simulation and experimental results are presented. I...|$|R
40|$|Abstract: The {{programmable}} logic <b>array</b> (<b>PLA)</b> {{is a basic}} and important building circuit for VLSI chips. After recent improvement techniques on PLA, PLA becomes more attractive for designers especially in GHz technology with deep sub-micron sizing. In this paper {{we will try to}} introduce the cross-talk problem solution in DSM, in PLA Network and also try to give the usage of PLA in GHz technology and the advantage of PLA as a solution of Timing Closure. Since their introduction in 1970, {{programmable logic}} arrays have been used in large-scale integration and very large-scale integration (LSI/VLSI) chips. Because its regularity and programmability. Th...|$|R
40|$|In this paper, the {{validity}} of'single fault assumption in deriving diagnostic test sets is examined {{with respect to}} crosspoint faults in programmable logic <b>arrays</b> (<b>PLA's).</b> The control input procedure developed here {{can be used to}} convert PLA's having undetectable crosspoint faults to crosspoint-irredundant PLA's for testing purposes. All crosspoints will be testable in crosspoint-irredundant PLA's. The control inputs are used as extra variables during testing. They are maintained at logic I during normal operation. A useful heuristic for obtaining a near-minimal number of control inputs is suggested. Expressions for calculating bounds on the number of control inputs have also been obtained...|$|R
40|$|This paper {{presents}} {{a way to}} optimize design of large built-in self-test (BIST) programmable logic <b>arrays</b> (<b>PLAs).</b> These PLAs can be tested at clock speed with function independent test set. Hardware overhead of the design is low compared to other techniques. In the design, test pattern generators are simple shift registers connected in ring counter form. Response evaluator circuit is a signature analyzer. A two bit binary counter and two D flip-flops automate the design process and {{reduce the number of}} test control pins. The PLA can detect all stuck-at, crosspoint, bridging as well as stuck-open fault...|$|R
40|$|This paper {{considers}} an optimization {{method of}} programmable logic <b>arrays</b> (<b>PLAs),</b> which have two-input EXOR {{gate at the}} outputs. The PLA realizes an EXOR of two sum-of-products expressions (EX-SOP) for multiple-valued input two-valued output functions. We present techniques to minimize EX-SOPs, which {{is an extension of}} Dubrova-Miller-Muzio's AOXMIN algorithm. We conjecture that, when n is sufficiently large, an EX-SOP for n-bit adder requires at most 2 n products while an ordinary sumof -products expression (SOP) requires 6 Δ 2 n; 4 n; 5 products. Experimental results for two- and four-valued benchmark functions show that the proposed method produces better EX-SOPs than existing methods...|$|R
40|$|To {{compose the}} {{complicated}} systems using algorithmically specialized logic circuits or processors, one {{solution is to}} perform relational computations such as union, division and intersection directly on hardware. These relations can be pipelined efficiently on a network of processors having an array configuration. These processors can be designed and implemented with a few simple cells. In {{order to determine the}} state-of-the-art in Electrically Reconfigurable Logic Array (ERLA), a survey of the available programmable logic <b>array</b> (<b>PLA)</b> and the logic circuit elements used in such arrays was conducted. Based on this survey some recommendations are made for ERLA devices...|$|R
5000|$|A [...] {{programmable}} logic <b>array</b> (<b>PLA)</b> {{is a kind}} of {{programmable logic}} device used to implement combinational logic circuits. The PLA has a set of programmable AND gate planes, which link to a set of programmable OR gate planes, which can then be conditionally complemented to produce an output. It has 2^N AND Gates for N input variables and for M outputs from PLA, there should be M OR Gates, each with programmable inputs from all of the AND gates. This layout allows for a large number of logic functions to be synthesized in the sum of products [...] canonical forms.|$|R
50|$|Engineers {{normally}} {{write the}} microcode during the design {{phase of a}} processor, storing it in a read-only memory (ROM) or programmable logic <b>array</b> (<b>PLA)</b> structure, or in a combination of both. However, machines also exist that have some or all microcode stored in SRAM or flash memory. This is traditionally denoted as writeable control store {{in the context of}} computers, which can be either read-only or read-write memory. In the latter case, the CPU initialization process loads microcode into the control store from another storage medium, with the possibility of altering the microcode to correct bugs in the instruction set, or to implement new machine instructions.|$|R
40|$|ISBN: 0818622709 Self-checking {{circuits}} ensure concurrent {{error detection}} {{by means of}} hardware redundancy. An important drawback of self-checking circuits is that they involve a significant increasing of the circuit area. Recent experiments on Berger code encoded programmable logic <b>arrays</b> (<b>PLAs)</b> result in 46. 9 % average area overhead. In order to decrease this overhead, some other self-checking PLA implementations based on the Berger code are proposed. The tool allowing the generation of the conventional Berger code coded PLAs is modified to perform the new implementations. Experiments on {{the same set of}} PLAs show that the new implementations reduce the average area overhead from 46. 9 % to 20. 1 %...|$|R
40|$|Abstract—Two regular circuit {{structures}} {{based on}} the programmable logic <b>array</b> (<b>PLA)</b> are proposed. They provide alternatives to the widely used standard-cell structure and have better predictability and simpler design methodologies. A whirlpool PLA is a cyclic four-level structure, which has a compact layout. Doppio-ESPRESSO, a four-level logic minimization algorithm, is developed for the synthesis of Whirlpool PLAs. A river PLA is a stack of multiple output PLAs, which uses river routing for the interconnections of the adjacent PLAs. A synthesis algorithm for river PLAs uses multilevel logic synthesis, simulated-annealing, and ESPRESSO targeting a combination of minimal area and delay. Index Terms—Programmable logic array. I...|$|R
40|$|A regular {{structure}} and capability to implement arbitrary logic functions in a two-level logic form have placed crossbar-based Programmable Logic <b>Arrays</b> (<b>PLAs)</b> as promising implementation architectures {{in the emerging}} nanoelectronics environment. Yet reliability constitutes an important concern in the nanoelectronics environment, necessitating a thorough investigation and its effective augmentation for crossbar-based PLAs. We investigate in this paper fault masking for crossbar-based nanoelectronics PLAs. Missing nanoelectronics devices at the crosspoints have been observed as {{a major source of}} faults in nanoelectronics crossbars. Based on this observation, we present a class of fault masking approaches exploiting logic tautology in two-level PLAs. The proposed approaches enhance the reliability of nanoelectronics PLAs significantly at low hardware cost. 1...|$|R
40|$|A {{universal}} literal is a single-variable {{function and}} has an ability to manipulate more information than a set lateral. The array size therefore could be elimi-nated by using universal literal generators (ULGs for short) in programmable logic <b>arrays</b> (<b>PLAs),</b> compared to PLAs with set literals. This paper discusses what op-erator is the most suitable in the term of eliminating the array size. We find four solutions as the good operator structures to eliminate the array size. A speculation of the upper bound of the array sizes is shown. Experi-ments are also done for randomly generated functions and some arithmetic functions. The experimental re-sults show that the MAX-of-TPRODUCT form PLAs require the smallest array size. ...|$|R
40|$|Abstract — Various {{implementations}} of the Quantum-dot Cellular Automata (QCA) {{device architecture}} may help many performance scaling trends continue {{as we approach}} the nanoscale. Experimental success has led to the evolution of a research track that looks at QCA-based design. The work presented in this paper follows that track and looks at implementation friendly, programmable QCA circuits. Specifically, we present a novel, QCA-based, Programmable Logic <b>Array</b> (<b>PLA)</b> structure. Our PLA is capable of providing defect tolerance at both the device and architectural level, and limits the amount of determinism required in any fabrication process. The design is compact, exploits properties unique to QCA devices in order to ease programmability, and is relevant to all implementations of QCA. I...|$|R
40|$|We {{present a}} novel {{technique}} for the automatic correction of open {{exercises in the}} area of technical science. The task is not solvable in general, and thus we restrict ourselves to exercises whose solutions are represented through data structures that can be automatically analyzed. Example of such data structures are: undirected and directed graphs; finite state automata; truth tables, programmable logic <b>arrays</b> (<b>PLAs),</b> and Boolean functions; and stacks, trees and lists. Restricting the task to such data-structures has the added advantage that the answers can be encoded through web-forms or through cheaper paper-forms to be read through optical mark readers. This allows the delivery of such exercises both as a self-assessment tool through the web and as formal exams...|$|R
40|$|Abstract—The {{minimization}} {{of logic}} gates {{is needed to}} simplify the hardware design area of programmable logic <b>arrays</b> (<b>PLAs)</b> and {{to speed up the}} circuits. The VLSI designers can use minimization methods to produce high speed, inexpensive and energy-efficient integrated circuits with increased complexity. Quine-McCluskey (Q-M) is an attractive algorithm for simplifying Boolean expressions because it can handle any number of variables. This paper describes a new model for the estimation of circuit complexity, based on Quine-McCluskey simplification method. The proposed method utilizes data derived from Monte-Carlo simulations for any Boolean function with different count of variables and product term complexities. The model allows design feasibility and performance analysis prior to the circuit realization. I...|$|R
40|$|Highly regular, {{nanodevice}} based architectures {{have been}} proposed to replace pure CMOS based architectures in the emerging post CMOS era. Since bottom-up self-assembly is used to build these architectures, regular nanowire crossbars are emerging as a promising candidate. While these regular structures resemble CMOS programmable logic <b>arrays</b> (<b>PLAs),</b> PLA logic synthesis methodologies fail to solve the associated problems since the length and connectivity constraints imposed by individual nanowires in these crossbars translate into challenges hitherto not considered. These strict topological constraints should be considered while mapping Boolean functions onto nanowire crossbars during logic synthesis. We develop a mathematical model for this problem, an algorithm to solve it and three heuristics to improve the algorithm runtime...|$|R
40|$|The key {{characteristics}} {{of the next generation}} of ICs for wearable applications include high integration density, small area, low power consumption, high energy-efficiency, reliability and enhanced mechanical properties like stretchability and transparency. The proper mix of new materials and novel integration strategies is the enabling factor to achieve those design specifications. Moving toward this goal, we introduce a graphene-based regular logic-array structure for energy efficient digital computing. It consists of graphene p-n junctions arranged into a regular mesh. The obtained structure resembles that of Programmable Logic <b>Arrays</b> (<b>PLAs),</b> hence the name Graphene-PLAs (GPLAs); the high expressive power of graphene p-n junctions and their resistive nature enables the implementation of ultra-low power adiabatic logic circuit...|$|R
40|$|Since the Programmable Logic <b>Arrays</b> (<b>PLAs)</b> can {{implement}} {{almost any}} Boolean function, {{they have become}} popular devices in realization of both combinational and sequential circuits. We present a power-saving fast half swing CMOS circuit implementation for NOR–NOR PLA implementation. An additional 1 / 2 VDD voltage source and buffering transmission gates are inserted between the NOR planes to erase the racing problem and shorten the rise delay {{as well as the}} fall delay of the output response such that the speed is enhanced and the dynamic power is reduced. Detailed simulation results reveal appropriate L/W guidelines. The analysis of effects of the 1 / 2 VDD on power and speed is also provided in this work...|$|R
