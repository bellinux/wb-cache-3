4|8|Public
40|$|In {{order to}} build a secure {{computing}} environment, persons responsible for data security need tools which allow them to test the security of data being protected. Research of passwords, used in usual computing environments, showed that easy to remember non-dictionary passwords are widely used. So it should be useful to build a statistical model,which can then {{be used to create}} very effective password lists for testing the security of a given protected data object. The problem is that the society from specified location is using also foreign words,from languages widely used. This article describes a comparison of different language models used for this new statistical candidates generation method. This generator could be then used to test the strength of passwords used to protect wireless networks which useWPA-PSK as its data encryption standard. The <b>password</b> <b>candidates</b> passed to tools which perform the security audit. This method could be described also as sorting of Brute-force <b>password</b> <b>candidates</b> usingknowledge about languages used by the users. The tests showed that using combination of language models (MIX) of specified language group for the password candidates’ generator could improve thespeed of the security procedure by 37 % relatively in average (60 % speedup when finding 50 % of passwords – in 0. 69 % vs 1. 715 % of Bruteforce combinations) comparing to mother language model (SK) and 20 times average absolute speedup comparing to Bruteforce...|$|E
40|$|International audiencePasswords {{are widely}} used for user authentication, and will likely remain in use in the {{foreseeable}} future, despite several weaknesses. One important weakness is that human-generated passwords are far from being random, which makes them susceptible to guessing attacks. Under-standing the adversaries capabilities for guessing attacks is a fundamental necessity for estimating their impact and advising countermeasures. This paper presents OMEN, a new Markov model-based password cracker that extends ideas proposed by Narayanan and Shmatikov (CCS 2005). The main novelty of our tool is that it generates <b>password</b> <b>candidates</b> according to their occurrence probabilities, i. e., it outputs most likely passwords first. As shown by our extensive experiments, OMEN signifi-cantly improves guessing speed over existing proposals. In particular, we compare the performance of OMEN with the Markov mode of John the Ripper, which implements the password indexing func-tion by Narayanan and Shmatikov. OMEN guesses more than 40 % of passwords correctly with the first 90 million guesses, while JtR-Markov (for T = 1 billion) needs at least eight times as many guesses to reach the same goal, and OMEN guesses more than 80 % of passwords correctly at 10 billion guesses, more than all probabilistic password crackers we compared against...|$|E
40|$|While {{trawling}} online/offline password guessing {{has been}} intensively studied, {{only a few}} studies have examined targeted online guessing, where an attacker guesses a specific victim's password for a service, by exploiting the victim's personal information such as one sister password leaked from her another account and some personally identifiable information (PII). A key challenge for targeted online guessing is to choose the most effective <b>password</b> <b>candidates,</b> while the number of guess attempts allowed by a server's lockout or throttling mechanisms is typically very small. We propose TarGuess, a framework that systematically characterizes typical targeted guessing scenarios with seven sound mathematical models, each of which is based on varied kinds of data available to an attacker. These models allow us to design novel and efficient guessing algorithms. Extensive experiments on 10 large real-world password datasets show the effectiveness of TarGuess. Particularly, TarGuess I~IV capture the four most representative scenarios and within 100 guesses: (1) TarGuess-I outperforms its foremost counterpart by 142 % against security-savvy users and by 46 % against normal users; (2) TarGuess-II outperforms its foremost counterpart by 169 % on security-savvy users and by 72 % against normal users; and (3) Both TarGuess-III and IV gain success rates over 73 % against normal users and over 32 % against security-savvy users. TarGuess-III and IV, for the first time, address the issue of cross-site online guessing when given the victim's one sister password and some PII...|$|E
50|$|The time {{to crack}} a {{password}} {{is related to}} bit strength (see password strength), which {{is a measure of}} the password's entropy, and the details of how the password is stored. Most methods of password cracking require the computer to produce many <b>candidate</b> <b>passwords,</b> each of which is checked. One example is brute-force cracking, in which a computer tries every possible key or password until it succeeds. More common methods of password cracking, such as dictionary attacks, pattern checking, word list substitution, etc. attempt to reduce the number of trials required and will usually be attempted before brute force. Higher password bit strength exponentially increases the number of <b>candidate</b> <b>passwords</b> that must be checked, on average, to recover the password and reduces the likelihood that the password will be found in any cracking dictionary.|$|R
50|$|Many systems store a {{cryptographic}} hash of the password. If an attacker gets {{access to the}} file of hashed passwords guessing can be done off-line, rapidly testing <b>candidate</b> <b>passwords</b> against the true password's hash value. In {{the example of a}} web-server, an online attacker can guess only at {{the rate at which the}} server will respond, while an off-line attacker (who gains access to the file) can guess at a rate limited only by the hardware that is brought to bear.|$|R
40|$|Abstract—For authentication, {{generally}} text (alphanumeric) is used. It is well-known, however, that passwords {{are susceptible}} to attack: users tend to choose passwords {{that are easy to}} remember, and often this means that they are also easy for an attacker to obtain by searching for <b>candidate</b> <b>passwords.</b> Internet banking passwords, Email id passwords, server passwords and serial keys, which is used for authentication are no more safer. In this paper I have updated the way of representing passwords and serial keys. In this paper, I have introduced Bold, Italic, Different font sizes and colours to passwords. This makes fully secure password and serial keys...|$|R
40|$|Hash {{functions}} are {{a type of}} mathematical function that takes an input of arbitrary length and gives an output of fixed length, called a hash value. Many consider hash values {{to be sort of}} a “fingerprint” of some data, since they can be assumed to have unique outputs for any possible input. This assumption does not make a lot of sense, because the size of the input space is infinite while the size of the output space remains finite! It is, nevertheless, defensible because of the infeasibility of finding two inputs that yield the same hash value. Hash {{functions are}} often used to store passwords in databases since it is not feasible either to go from a hash value to a preimage. By saving the hash value rather than the password and checking the hash value of the user’s input it is possible to check passwords without the need to store them, which is an advantage if one wants to control the damage of a possible data leakage. This work researches different cryptanalytic techniques for searching for preimages to hash values in a password-cracking context. A 27 % increase in performance is gained using a time/memory tradeoff instead of naively iterating through <b>password</b> <b>candidates.</b> The attack is also demonstrated in practice, where it attains a 50 % improvement. The data is then analyzed and discussed for the purpose of assessing the implementability of the attacks in already existing cracking implementations. ...|$|E
50|$|A {{large number}} of {{password}} generator programs and websites {{are available on the}} Internet. Their quality varies and can be hard to assess if there is no clear description of the source of randomness that is used, and if source code is not provided to allow claims to be checked. Furthermore, and probably most importantly, transmitting <b>candidate</b> <b>passwords</b> over the Internet raises obvious security concerns, particularly if the connection to the password generation site's program is not properly secured or if the site is compromised in some way. Without a secure channel, {{it is not possible to}} prevent eavesdropping, especially over public networks such as the Internet. A possible solution to this issue is to generate the password using a client-side programming language such as JavaScript. The advantage of this approach is that the generated password stays in the client computer and is not transmitted to or from an external server.|$|R
40|$|John the Ripper (JtR) is an {{open source}} {{software}} package commonly used by system administrators to enforce password policy. JtR is designed to attack (i. e., crack) passwords encrypted {{in a wide variety}} of commonly used formats. While parallel implementations of JtR exist, there are several limitations to them. This research reports on two distinct algorithms that enhance this password cracking tool using the Message Passing Interface. The first algorithm is a novel approach that uses numerous processors to crack one password by using an innovative approach to workload distribution. In this algorithm the <b>candidate</b> <b>password</b> is distributed to all participating processors and the word list is divided based on probability so that each processor has the same likelihood of cracking the password while eliminating overlapping operations. The second algorithm developed in this research involves dividing the passwords within a password file equally amongst available processors while ensuring load-balanced and fault tolerant behavior. This paper describes John the Ripper, the design of these two algorithms and preliminary results. Given the same amount of time, the original JtR can crack 29 passwords, whereas our algorithms 1 and 2 can crack an additional 35 and 45 passwords respectively...|$|R
40|$|For {{the vast}} {{majority}} of computer systems, passwords are the method of choice for authenticating users. The most widely and commonly used authentication is traditional “Username ” and “Password”. For such authentication generally text (alphanumeric) is used. It is well-known, however, that passwords are susceptible to attack: users tend to choose passwords that are easy to remember, and often this means that they are also easy for an attacker to obtain by searching for <b>candidate</b> <b>passwords.</b> On the other hand, if a password is hard, then it is often hard to remember. Keeping these things in mind we propose a novel, innovative and more secure way of selecting passwords: Graphical Passwords. In this paper we explore an approach to user authentication that generalizes the notion of a textual password and that, in many cases, improves the security of user authentication over that provided by textual passwords. We design and analyze graphical passwords, which can be input by the user to any device with a graphical input interface. We also try to answer two most important questions: “Are graphical passwords as secure and easy to use as text-based passwords”? “Major design and implementation issues for graphical passwords”? Patrick, et al. [1] pointed out that there are three major areas where human computer interaction is important: authentication, securit...|$|R
40|$|Now a days {{majority}} of computer systems, passwords are {{the method of}} choice for authenticating users. A process by which a systemverifies {{the identity of a}} user is known as ‘Authentication’. Authentication may also be generalized by saying that “to authenticate” means “to authorize”. Authentication is {{the first line of defense}} against compromising confidentiality and integrity. The most widely and commonly used authentication is traditional “Username” and “Password”. For such authentication generally text (alphanumeric) is used. It is well-known, however, that passwords are susceptible to attack: users tend to choose passwords that are easy to remember, and often this means that they are also easy for anattacker to obtain by searching for <b>candidate</b> <b>passwords.</b> Token and biometric based authentication systems were introduced as an alternative for that schemes. However, these schemes are very costy. Thus, Graphical scheme was introduced as a variation to the login/password scheme. In this paper we explore an approach to user authentication that generalizes the notion of a textual password and that, in many cases, improves the security of user authentication over that provided by textual passwords. In this proposed system we have used a new technique for authentication. It is a variation tothe login/password scheme using graphical password used in an graphical manner. We have introduced a framework of our proposed Graphical Password Authentication System (GPAS), which is immune to the common attacks suffered by other authentication schemes. We try to answer most important question “Are graphical passwords as secure and easy to use as text-based passwords”? Nowadays with the use of mobile phones, users can access any information including banking and corporate database. In this proposed work, we specifically target the mobile banking domain and propose a new and intelligent authentication scheme. However, our proposal can also be used in other domains where confidentiality and integrity arethe major security requirements...|$|R
40|$|Despite {{decades of}} {{research}} into developing abstract security advice and improving interfaces, users still struggle to make passwords. Users frequently create passwords that are predictable for attackers or make other decisions (e. g., reusing the same password across accounts) that harm their security. In this thesis, I use data-driven methods to better understand how users choose passwords and how attackers guess passwords. I then combine these insights into a better password-strength meter that provides real-time, data-driven feedback about the user’s <b>candidate</b> <b>password.</b> I first quantify the impact on password security and usability of showing users different passwordstrength meters that score passwords using basic heuristics. I find in a 2, 931 -participant online study that meters that score passwords stringently and present their strength estimates visually lead users to create stronger passwords without significantly impacting password memorability. Second, to better understand how attackers guess passwords, I perform comprehensive experiments on password-cracking approaches. I find that simply running these approaches in their default configuration is insufficient, but considering multiple well-configured approaches in parallel {{can serve as a}} proxy for guessing by an expert in password forensics. The third and fourth sections of this thesis delve further into how users choose passwords. Through a series of analyses, I pinpoint ways in which users structure semantically significant content in their passwords. I also examine the relationship between users’ perceptions of password security and passwords’ actual security, finding that while users often correctly judge the security impact of individual password characteristics, wide variance in their understanding of attackers may lead users to judge predictable passwords as sufficiently strong. Finally, I integrate these insights into an open-source password-strength meter that gives users data-driven feedback about their specific password. I evaluate this meter through a ten-participant laboratory study and 4, 509 -participant online study...|$|R

