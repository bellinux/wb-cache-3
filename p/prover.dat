5002|1638|Public
5|$|Christoph Benzmuller and Bruno Woltzenlogel Paleo used an {{automated}} theorem <b>prover</b> to validate Scott's version of Gödel's ontological argument. It {{has been shown}} by the same researchers that Gödel's ontological argument is inconsistent. However, Scott's version of Gödel's ontological argument is consistent and thus valid.|$|E
25|$|McCarthy's advice-taker {{proposal}} of 1958 represents an early proposal to use logic for representing common-sense knowledge in mathematical logic and using an automated theorem <b>prover</b> to derive {{answers to questions}} expressed in logical form. Compare Leibniz's calculus ratiocinator and characteristica universalis.|$|E
25|$|Despite the {{simplicity}} of the above proof, it is rather difficult for an automated theorem <b>prover</b> to produce it. The main difficulty lies in an automated discovery of the Cantor diagonal set. Lawrence Paulson noted in 1992 that Otter could not do it, whereas Isabelle could, albeit {{with a certain amount of}} direction in terms of tactics that might perhaps be considered cheating.|$|E
40|$|Abstract. Automatic theorem <b>provers</b> {{struggle}} to discharge proof obligations of interactive theorem <b>provers.</b> This is {{partly due to}} the large number of background facts that are passed to the automatic <b>provers</b> as axioms. Axiom selection algo-rithms predict the relevance of facts, thereby helping to reduce the search space of automatic <b>provers.</b> This paper presents an introduction to axiom selection as a machine learning problem and describes the challenges that distinguish it from other applications of machine learning. ...|$|R
40|$|Most theorem <b>provers</b> {{are either}} hard to trust {{because they are}} large {{programs}} or hard to use {{due to a lack}} of automation. They are thus used by two different communities depending on the property one needs most: the ability to prove quickly a large amount of theorems or a high level of safety. My thesis studies a communication between these different kinds of tools, by asking for proof witnesses in addition to yes/no answers from automated <b>provers,</b> and checking them in safe <b>provers.</b> It offers both a way to safely combine proofs coming from all these <b>provers</b> in order to benefit from the advantages of all of them and guaranties to automated theorem <b>provers...</b>|$|R
40|$|The {{interface}} between the Theorema system and external automated deduction systems is described. It provides {{a tool to}} access external <b>provers</b> within a Theorema session {{in the same way}} as " Theorema <b>provers.</b> Currently 11 external systems are supported. The design of the interface allows combining external systems with each other as well as with " Theorema <b>provers...</b>|$|R
25|$|In 2005, Avigad et al. {{employed}} the Isabelle theorem <b>prover</b> {{to devise a}} computer-verified variant of the Erdős–Selberg proof of the PNT. This was the first machine-verified proof of the PNT. Avigad chose to formalize the Erdős–Selberg proof rather than an analytic one because while Isabelle's library at the time could implement the notions of limit, derivative, and transcendental function, it had almost no theory of integration to speak of.|$|E
25|$|Hayes and Kowalski in Edinburgh {{tried to}} {{reconcile}} the logic-based declarative approach to knowledge representation with Planner's procedural approach. Hayes (1973) developed an equational language, Golux, in which different procedures could be obtained by altering {{the behavior of the}} theorem <b>prover.</b> Kowalski, on the other hand, developed SLD resolution, a variant of SL-resolution, and showed how it treats implications as goal-reduction procedures. Kowalski collaborated with Colmerauer in Marseille, who developed these ideas in the design and implementation of the programming language Prolog.|$|E
500|$|Newell and Simon {{tried to}} capture a general version of this {{algorithm}} in a program called the [...] "General Problem Solver". Other [...] "searching" [...] programs were able to accomplish impressive tasks like solving problems in geometry and algebra, such as Herbert Gelernter's Geometry Theorem <b>Prover</b> (1958) and SAINT, written by Minsky's student James Slagle (1961). Other programs searched through goals and subgoals to plan actions, like the STRIPS system developed at Stanford to control the behavior of their robot Shakey.|$|E
40|$|Abstract: This note {{considers}} {{the design of}} user interfaces for interactive theorem <b>provers.</b> The basic rules of interface design are reviewed, and their applicability to theorem <b>provers</b> is discussed, leading to considerations about the particular chal-lenges of interface design for theorem <b>provers.</b> A short overview and classification of existing interfaces is given, followed by suggestions of possible future work in the area...|$|R
40|$|In two-prover one-round {{interactive}} proof systems, no-signaling <b>provers</b> {{are those}} who are allowed to use arbitrary strategies, not limited to local operations, as long as their strategies cannot be used for communication between them. Study of multi-prover interactive proof systems with no-signaling <b>provers</b> is motivated by study of those with <b>provers</b> sharing quantum states. The relation between them is that no-signaling strategies include all the strategies realizable by <b>provers</b> sharing arbitrary entangled quantum states, and more. This paper shows that two-prover one-round interactive proof systems with no-signaling <b>provers</b> only accept languages in PSPACE. Combined with the protocol for PSPACE by Ito, Kobayashi and Matsumoto (CCC 2009), this implies MIP ns (2, 1) = PSPACE, where MIP ns (2, 1) is the class of languages having a two-prover one-round interactive proof system with no-signaling <b>provers.</b> The proof uses the fast parallel algorithm for the mixed packing and covering problem by Young (FOCS 2001). ...|$|R
40|$|Theorem <b>provers</b> are {{computer}} programs capable of finding proofs for theorems within mathematical theories. Theorem <b>provers</b> {{have been an}} important part of the computer science field. The birth of theorem <b>provers</b> could be traced to the 50 's with the introduction of the electronic computer to the universities. This paper presents the actual classification of theorem <b>provers,</b> and present an evaluation of an application of theorem <b>provers</b> to an specific problem. 1 Introduction Theorem <b>provers</b> are {{computer programs}} that automate the reasoning of finding proofs within a mathematical theory [3]. To understand what automated reasoning is, we must first understand what reasoning is. Reasoning is the process of drawing conclusions from facts. These conclusions must follow inevitably from the facts from which they are drawn. In other words, reasoning is not concerned with some conclusion that has a good chance of being true when the facts are true. Indeed, reasoning refers to logical reason [...] ...|$|R
500|$|This {{definition}} has {{the conceptual}} advantage of relying {{only on the}} minimal foundations of the natural numbers: the existence of 0 and of successors. As such, it is useful for computer logic systems such as LF and the Isabelle theorem <b>prover.</b> With this definition, the evenness of zero is not a theorem but an axiom. Indeed, [...] "zero is an even number" [...] may be interpreted {{as one of the}} Peano axioms, of which the even natural numbers are a model. A similar construction extends the definition of parity to transfinite ordinal numbers: every limit ordinal is even, including zero, and successors of even ordinals are odd.|$|E
500|$|The first ontological {{argument}} in the Western Christian tradition was proposed by Anselm of Canterbury in his 1078 work Proslogion. Anselm defined God as [...] "that than which nothing greater can be thought", and argued that this being must exist in the mind, even {{in the mind of}} the person who denies the existence of God. He suggested that, if the greatest possible being exists in the mind, it must also exist in reality. If it only exists in the mind, then an even greater being must be possible—one which exists both in the mind and in reality. Therefore, this greatest possible being must exist in reality. Seventeenth century French philosopher René Descartes deployed a similar argument. Descartes published several variations of his argument, each of which centred on the idea that God's existence is immediately inferable from a [...] "clear and distinct" [...] idea of a supremely perfect being. In the early eighteenth century, Gottfried Leibniz augmented Descartes' ideas in an attempt to prove that a [...] "supremely perfect" [...] being is a coherent concept. A more recent ontological argument came from Kurt Gödel, who proposed a formal argument for God's existence. Norman Malcolm revived the ontological {{argument in}} 1960 when he located a second, stronger ontological argument in Anselm's work; Alvin Plantinga challenged this argument and proposed an alternative, based on modal logic. Attempts have also been made to validate Anselm's proof using an automated theorem <b>prover.</b> Other arguments have been categorised as ontological, including those made by Islamic philosophers Mulla Sadra and Allama Tabatabai.|$|E
2500|$|... : an {{interactive}} <b>prover</b> for propositional and first-order logic using tableaux.|$|E
40|$|Background: Homoeopathic drug proving {{being the}} first step in finding the pathogenetic powers of a drug is an {{integral}} part of Homoeopathic system of medicine. Objective: To elicit the pathogenetic response of Withania somnifera in homoeopathic potencies on healthy human <b>provers.</b> Materials and Methods: A multicentre, randomised, double-blind, placebo-controlled trial was conducted at four centres under Central Council for Research in Homoeopathy. Proving was conducted on 63 relatively healthy <b>provers.</b> All the <b>provers</b> were given 12 doses of placebo divided into 4 doses/day for 3 days during the first phase of the trial. After randomisation, 43 <b>provers</b> in the intervention group were given W. somnifera in 6 C and 30 C potencies in two phases. In the placebo group, 20 <b>provers</b> were administered unmedicated globules. The symptoms and signs manifested during the trial were noted down by the <b>provers,</b> elaborated by the proving masters and the data compilation on W. somnifera was done at proving-cum-data processing cell. Results: Out of 43 <b>provers</b> who were on actual drug trial, only 15 <b>provers</b> manifested 39 symptoms. The symptoms have been manifested predominantly in 30 C potency. Among the objective findings, the drug has shown its effect on kidney, ovaries and helminthic infestation. Conclusion: The pathogenetic response elicited during this trial expands the scope of the use of W. somnifera and needs to be further validated by clinical verification study...|$|R
40|$|Theorem <b>provers</b> for higher-order logics {{often use}} tactics to {{implement}} automated proof search. Tactics use a general-purpose meta-language to implement both general-purpose reasoning and computationally intensive domain-specific proof procedures. The generality of tactic <b>provers</b> has a performance penalty; {{the speed of}} proof search lags far behind special-purpose <b>provers.</b> We present a new modular proving architecture that significantly increases {{the speed of the}} core logic engine...|$|R
40|$|This paper {{describes}} our {{collection of}} benchmarks for inductive theorem <b>provers.</b> The recent spur {{of interest in}} automated inductive theorem proving has increased the demands for evaluation and comparison between systems. We expect the benchmark suite to continually grow as more problems are submitted by the community. New challenge problems will promote further development of <b>provers</b> which will greatly benefit both developers and users of inductive theorem <b>provers...</b>|$|R
2500|$|A generic tableaux-based <b>prover</b> for modal logics [...] from IRIT/Toulouse University ...|$|E
2500|$|... : {{a simple}} theorem <b>prover</b> written in Haskell that uses {{analytic}} tableaux for propositional logic.|$|E
2500|$|Pure Prolog was {{originally}} {{restricted to the}} use of a resolution theorem <b>prover</b> with Horn clauses of the form: ...|$|E
40|$|This paper {{investigates the}} {{performance}} of automated first-order theorem <b>provers</b> in formal software verification. We used the software verification tool, KIV ([5], [6]) as a test environment, and did comparative experiments with five automated theorem <b>provers</b> as dedicated subsystems for the non-inductive first-order theorems that showed up during proofs of specification- and program properties in KIV. The five <b>provers</b> were Otter ([11]), Protein ([1]), Setheo ([3]), Spass ([9]) and 3 T A P ([2]) ...|$|R
40|$|Theorem <b>provers</b> for higher-order logics {{often use}} tactics to {{implement}} automated proof search. Tactics use a general-purpose meta-language to implement both general-purpose reasoning and computationally intensive domain-specific proof procedures. The generality of tactic <b>provers</b> has a performance penalt...|$|R
40|$|Background: Homoeopathic drug proving is an {{integral}} part of Homoeopathic System of Medicine. It is the first step in finding out the pathogenetic powers of a drug. Objective: To elicit the pathogenetic response to Allium sativum in homoeopathic potencies on healthy human <b>provers.</b> Materials and Methods: A multi-center randomized, placebo-controlled, double-blind trial was conducted at two centers of the Central Council for Research in Homoeopathy (CCRH). Proving was conducted on 33 healthy <b>provers</b> after the pretrial medical examination. All the <b>provers</b> were given 12 doses of placebo divided in 4 doses/day for 3 days during the first phase of the trial. After randomization, in the intervention group (21 <b>provers),</b> Allium sativum (A. sativum) was proved in 6 C and 30 C potencies, in two phases. In the placebo group, 12 <b>provers</b> were administered placebo in the same manner. The symptoms manifested during the trial period were noted down by the <b>provers</b> and then elaborated by the proving masters. The generated data on A. sativum were then compiled and analyzed at proving-cum-data processing cell at CCRH headquarters. Results: Out of 21 <b>provers</b> who were on actual drug trial, only nine <b>provers</b> manifested symptoms. Drug was able to manifest symptoms in both the potencies, in more or less every part of the body. Conclusion: The pathogenetic response elicited during the proving trial expands the scope of use of the drug A. sativum and will benefit the research scholars and clinicians. The generated symptoms of this drug will carry more value when verified clinically...|$|R
50|$|Nqthm is a theorem <b>prover</b> {{sometimes}} referred to as the Boyer-Moore theorem <b>prover.</b> It was a precursor to ACL2.|$|E
50|$|Prover9 is an {{automated}} theorem <b>prover</b> for First-order and equational logic developed by William McCune. Prover9 is the successor of the Otter theorem <b>prover.</b>|$|E
5000|$|Validity: Validity {{requires}} that the success probability of a knowledge extractor [...] in extracting the witness, given oracle access to a possibly malicious <b>prover</b> , {{must be at least}} as high as the success probability of the <b>prover</b> [...] in convincing the verifier. This Property guarantees that no <b>prover</b> that doesn't know the witness can succeed in convincing the verifier.|$|E
50|$|Since the proofs {{generated}} by automated theorem <b>provers</b> are typically very large, {{the problem of}} proof compression is crucial and various techniques aiming at making the <b>prover's</b> output smaller, and consequently more easily understandable and checkable, have been developed.|$|R
50|$|Under the hood, GNATprove {{uses the}} Why3 {{intermediate}} language and VC Generator, and the CVC4, Z3, and Alt-Ergo theorem <b>provers</b> to discharge VCs. Use of other <b>provers</b> (including interactive proof checkers) {{is also possible}} through other components of the Why3 toolset.|$|R
50|$|While {{somewhat}} {{eclipsed by}} attention to and progress in Resolutiontheorem <b>provers,</b> Model Elimination {{has continued to}} attract theattention of researchers and software developers. Today there are several theorem <b>provers</b> under active development {{that are based on}} the Model Elimination procedure.|$|R
50|$|The {{cognitive}} trapdoor {{game has}} three groups involved in it: a machine verifier, a human <b>prover,</b> and a human observer. The goal {{of each group}} is, human <b>prover</b> has to input the PIN by answering the questions posed by the machine verifier while the observer tries to observe {{the interaction between the}} machine verifier and the human <b>prover</b> to know the PIN. A token is assigned to the <b>prover</b> as a unique identification by an authentic channel to prove his/her own identity. As the <b>prover</b> needs to authenticate themself in it is not easy for the observer to remember the whole login process unless the observer had a recording device. The cognitive trapdoor mechanism is resistant to direct shoulder surfing but not against the recording shoulder surfing.|$|E
50|$|The Isabelle theorem <b>prover</b> is an {{interactive}} theorem <b>prover,</b> a Higher Order Logic (HOL) theorem <b>prover.</b> It is an LCF-style theorem <b>prover</b> (written in Standard ML), {{so it is}} based on a small logical core to ease logical correctness. Isabelle is generic: it provides a meta-logic (a weak type theory), which is used to encode object logics like first-order logic (FOL), higher-order logic (HOL) or Zermelo-Fraenkel set theory (ZFC). Isabelle's main proof method is a higher-order version of resolution, based on higher-order unification. Though interactive, Isabelle also features efficient automatic reasoning tools, such as a term rewriting engine and a tableaux <b>prover,</b> as well as various decision procedures. Isabelle has been used to formalize numerous theorems from mathematics and computer science, like Gödel's completeness theorem, Gödel's theorem about the consistency of the axiom of choice, the prime number theorem, correctness of security protocols, and properties of programming language semantics. The Isabelle theorem <b>prover</b> is free software, released under the revised BSD license.|$|E
50|$|Thus, a {{cheating}} <b>prover</b> has a 0.5 {{probability of}} successfully cheating in one round. By executing {{a large enough}} number of rounds, {{the probability of a}} cheating <b>prover</b> succeeding can be made arbitrarily low.|$|E
40|$|Assume we {{have the}} {{following}} game. A verifier V interacts with two <b>provers</b> P 1 and P 2. The verifier is probabilistic and acts honestly according to its (known) strategy. The goal of the <b>provers</b> is to convince the verifier of a certain fact. The <b>provers</b> may collaborate {{to set up a}} strategy to maximize their chances of success. However,they are not allowed to exchange information once they received their respective question from the verifier. q...|$|R
40|$|Suppose two <b>provers</b> {{agree in}} a {{polynomial}} p {{and want to}} reveal a single value y = p(x) to a verifier where x is chosen arbitrarily by the verifier. Whereas honest <b>provers</b> {{should be able to}} agree on any polynomial p the verifier wants to be sure that with any (cheating) pair of <b>provers</b> the value y he receives is a polynomial function of x. We formalize this question and introduce multi-prover (quasi-) encoding schemes to solve it...|$|R
40|$|Background: A double-blind, randomized, {{placebo-controlled}} Homoeopathic Pathogenetic Trial (HPT) of Nanocurcumin {{was conducted}} using the accepted guidelines, Ethical Committee approval, and scientific documentation. The standardized potentization method was adopted {{to enhance the}} quality of the pathogenetic trial. Various statistical calculations were used for evaluation of the symptoms. Aim: The aim {{of the study was to}} conduct an HPT of Nanocurcumin 6 X, a nano-substance in dilution. Materials and Methods: The drug Nanocurcumin 6 X was proved through double-blind, placebo-controlled method. The trial was done in 6 X potency on 30 healthy  <b>provers</b> who were screened by their pretrial medical examinations and routine laboratory investigations. Of 30 <b>provers,</b> 7 were on placebo and 23 were on drug. Medicine was prepared according to the principles of trituration given in Homoeopathic Pharmacopeia of India. The signs and symptoms generated during the trial period were noted by the <b>provers</b> and decoded and compiled afterwards. Results: Of 23 <b>provers</b> who were on verum 17 <b>provers</b> manifested symptoms and out of 7 <b>provers</b> who were on placebo 2 manifested symptoms. Conclusion: The drug pathogenesis evolved indicates its therapeutic use in sinusitis, migraine, dyspepsia, constipation, diarrhoea, dysmenorrhoea, pharyngitis, bronchitis, etc...|$|R
