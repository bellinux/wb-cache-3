10000|10000|Public
5|$|Izabella Scorupco as Natalya Simonova: The only {{survivor}} and eyewitness of {{the attack}} of GoldenEye on its own control centre at Severnaya. A skilled <b>programmer,</b> she helps Bond in his mission.|$|E
5|$|Larry Wall {{began work}} on Perl in 1987, {{while working as a}} <b>programmer</b> at Unisys, and {{released}} version 1.0 to the comp.sources.misc newsgroup on December 18, 1987. The language expanded rapidly over the next few years.|$|E
5|$|Managed memory {{cannot be}} {{explicitly}} freed; instead, it is automatically garbage collected. Garbage collection addresses {{the problem of}} memory leaks by freeing the <b>programmer</b> of responsibility for releasing memory {{that is no longer}} needed.|$|E
50|$|There {{are four}} general types of device programmers: Gang <b>programmers</b> (multi-programming sites) for mass production, {{development}} <b>programmers</b> (usually single-programming site) for development and small-series production, pocket <b>programmers</b> for development and field service, and specialized <b>programmers</b> for certain circuit types only, e.g. EPROM <b>programmers.</b> Early device <b>programmers</b> had {{the size of}} a shoe box and a weight of up to 4 kg; the latest generation device <b>programmers</b> are pocket sized, weigh less than 200 g and require no external power supply. These types of <b>programmers</b> can be used in field service for maintenance or setup of machinery that contains programmable circuits.|$|R
50|$|In 2016, Mellanox Technologies {{began to}} employ <b>programmers</b> in the Gaza Strip, in {{addition}} to its team of Israeli Arab <b>programmers</b> and <b>programmers</b> in Ramallah and Nablus.|$|R
5000|$|Freelance <b>Programmers</b> was {{established}} in 1962 by Stephanie [...] "Steve" [...] Shirley. Two years after founding Freelance <b>Programmers,</b> Steve Shirley incorporated the company as Freelance <b>Programmers</b> Limited.|$|R
5|$|Nominated Outstanding Lighting Design/Lighting Direction for a Variety Special. The nominees were Patrick Woodroffe (Lighting Designer), Adam Bassett (Lighting Director), Al Gurdon (Director of Photography) and Tim Routledge (Moving Light <b>Programmer).</b>|$|E
5|$|Perl {{does not}} enforce any {{particular}} programming paradigm (procedural, object-oriented, functional, or others) or even require the <b>programmer</b> {{to choose among}} them.|$|E
5|$|Shutaro Iida, {{who worked}} on the game as a <b>programmer,</b> cites Portrait of Ruin as his {{favorite}} Castelvania game out of the ones he worked on.|$|E
50|$|<b>Programmer's</b> File Editor (PFE) is a {{freeware}} {{text editor}} targeted {{particularly to the}} needs of software <b>programmers.</b> It was written by Alan Phillips of Lancaster University in the north of England. Development of <b>Programmer's</b> File Editor ceased in 1999, but the program is still in use by some <b>programmers.</b>|$|R
40|$|Current JDK Java {{compiler}} relies {{too much}} on <b>programmer's</b> specification for checking against uncaught exceptions of the input program. It is not elaborate enough to remove <b>programmer's</b> unnecessary handlers (when <b>programmer's</b> specifications are too many) nor suggest to <b>programmers</b> for specialized handlings (when <b>programmer's</b> specifications are too general). We propose a static analysis of Java programs that estimates their exception flows independently of the <b>programmer's</b> specifications. This analysis {{is an extension of}} a class analysis to Java's exception mechanism. Its cost-effectiveness balance is suggested by sparsely analyzing the program at method-level (hence reducing the number of unknowns in the flow equations). 1 Introduction The current Java compiler relies on the <b>programmer's</b> specifications to check that the input program will have no uncaught exceptions at run-time. The <b>programmers</b> have to declare in a method definition any exception class whose exceptions ma [...] ...|$|R
50|$|Generally, lead <b>programmers</b> are {{the most}} well compensated, though some 3D {{graphics}} <b>programmers</b> may challenge or surpass their salaries. According to the same survey above, lead <b>programmers</b> on average earn $127,900 annually.|$|R
5|$|The <b>Programmer</b> {{accessory}} {{had been}} {{mentioned in the}} earliest advertisement {{but it was not}} featured until March 1974. This was the same size as a desktop calculator and could hold 256 programming steps. (It could be expanded to 512 steps.) It was limited to emulating calculator key presses and simple sequence branching. The programming was done by entering hexadecimal key codes. The combination of the MITS 7440 calculator and the <b>programmer</b> was not nearly as sophisticated as the HP 9830 calculator but $400 for both kits was a fraction of the HP price.|$|E
5|$|The language, and {{implementations}} thereof, {{should provide}} support for software engineering principles such as strong type checking, array bounds checking, detection of attempts to use uninitialized variables, and automatic garbage collection. Software robustness, durability, and <b>programmer</b> productivity are important.|$|E
5|$|After {{earning a}} diploma in Recreation Facilities Management from Seneca College, James {{was hired by}} the school as a sports <b>programmer</b> in 1985. She {{continues}} to work for Seneca and is now a senior sports coordinator at its King campus.|$|E
50|$|Many <b>programmers</b> {{were slow}} to move from COBOL or Fortran due to a {{perceived}} complexity of the language and immaturity of the PL/I F compiler. <b>Programmers</b> were sharply divided into scientific <b>programmers</b> (who used Fortran) and business <b>programmers</b> (who used COBOL), with significant tension and even dislike between the groups. PL/I syntax borrowed from both COBOL and Fortran syntax. So instead of noticing features that would make their job easier, Fortran <b>programmers</b> of the time noticed COBOL syntax and had the opinion {{that it was a}} business language, while COBOL <b>programmers</b> noticed Fortran syntax and looked upon it as a scientific language.|$|R
40|$|In {{this paper}} we discuss how <b>programmers</b> {{maintain}} and develop code {{as part of a}} large code base. We discuss instances of how <b>programmers</b> reason about interdependencies in code, how <b>programmers</b> decide the location of the particular code to be changed in improving software functionality, and how <b>programmers</b> reason about what code can form the basis for a new piece of code. All three examples are of occasions where <b>programmers,</b> for one reason or another, have discussed with other <b>programmers</b> the issues to do with their code. Such talk makes reasoning, which might otherwise be done privately ‘in the <b>programmers</b> head’, observable. Through our analysis of the examples of observed reasoning we wish to draw attention to how knowledge is produced, exhibited, demonstrated and deployed in maintaining and developing the code base...|$|R
40|$|The {{phenomenon}} we call "programming " is {{not limited}} to regular professional <b>programmers.</b> Farthest away are end user <b>programmers,</b> who program just as {{a means to an end}} in their own professions. In between are people with very diverse backgrounds, general education, and programming knowledge. Like professional <b>programmers,</b> they write pro-grams for others as their major job activity. Yet they also share characteristics of end user <b>programmers,</b> such as a strong specialization in one application area. All these "informal <b>programmers</b> " need more study and support to help them maximize their contributions...|$|R
5|$|Although {{sales for}} Mega Man were unimpressive, Capcom allowed the Rockman team {{to create a}} sequel. They worked {{concurrently}} on other Capcom projects, using their free time to develop the game. Unused content from the previous title was integrated into Mega Man 2. Takashi Tateishi composed the soundtrack, with Yoshihiro Sakaguchi serving as a sound <b>programmer.</b>|$|E
5|$|Curious, the {{researchers}} explore {{the room and}} {{hear the sounds of}} a woman running followed by a gut-wrenching scream. Jill Greeley (Jane Asher), an emotionally sensitive computer <b>programmer,</b> has a vision of a woman running up the steps in the room and falling, apparently to her death.|$|E
5|$|Defender is an arcade {{video game}} {{developed}} and released by Williams Electronics in February 1981. A horizontally scrolling shoot 'em up, {{the game is}} set on an unnamed planet where the player must defeat waves of invading aliens while protecting astronauts. Development was led by Eugene Jarvis, a pinball <b>programmer</b> at Williams; Defender was Jarvis' first video game project and drew inspiration from Space Invaders and Asteroids.|$|E
40|$|This study {{examines}} {{the direction and}} scope of comprehension-related activities of professional <b>programmers</b> carrying out several comprehension and maintenance activities over time. Procedural and object-oriented (OO) <b>programmers</b> studied a program and subsequently performed modifications during two sessions. Results showed that the OO <b>programmers</b> tended to use a strongly top-down approach to program understanding during an early phase of study of the program but increasingly used a bottom-up approach during the maintenance tasks. The procedural <b>programmers</b> used a more bottom-up orientation throughout all activities. The scope of the activities was greater for the procedural than for the OO <b>programmers.</b> However, regardless of paradigm, the <b>programmers</b> over time built a broad, rather than a localized, view of the program. 1...|$|R
5000|$|In {{order to}} permit all users {{who are members}} of the <b>programmers</b> group to update a file$ ls -l sharedFile-rw-r--r-- 1 jsmith <b>programmers</b> 57 Jul 3 10:13 sharedFile$ chmod 664 sharedFile$ ls -l sharedFile-rw-rw-r-- 1 jsmith <b>programmers</b> 57 Jul 3 10:13 sharedFile ...|$|R
25|$|There is {{evidence}} that gender does impact a <b>programmer’s</b> perceived merit in the community. A 2016 study identified the gender of over one million <b>programmers</b> on GitHub, by linking the <b>programmer’s</b> GitHub account to their other social media accounts. Between male and female <b>programmers,</b> {{the researchers found that}} female <b>programmers</b> were actually more likely to have their pull requests accepted into the project than male <b>programmers,</b> however only when the female had a gender-neutral profile. When females had profiles with a name or image that identified them as female, they were less likely than male <b>programmers</b> to have their pull requests accepted. Another study in 2015 found that of open source projects on GitHub, gender diversity was a significant positive predictor of a team's productivity, meaning that open source teams with a more even mix of different genders tended to be more highly productive.|$|R
5|$|Device Firmware Upgrade (DFU) is a vendor- and device-independent {{mechanism}} for upgrading the firmware of USB devices with improved versions provided by their manufacturers, offering (for example) {{a way for}} firmware bugfixes to be deployed. During the firmware upgrade operation, USB devices change their operating mode effectively becoming a PROM <b>programmer.</b> Any class of USB device can implement this capability by following the official DFU specifications.|$|E
5|$|Hamauzu {{was hired}} by Square as a trainee, and his debut as a solo {{composer}} came the following year when he scored Chocobo no Fushigina Dungeon. He has collaborated with his friend and fellow composer Junya Nakano on several games, and has worked closely with synthesizer <b>programmer</b> Ryo Yamazaki on most titles since SaGa Frontier 2.|$|E
5|$|Initial {{development}} {{began in}} November 2008 when Urban Squall met in San Diego for their annual meeting, 2008's theme was 'a {{game in a}} week'. The team consisted of designer and <b>programmer</b> Andrew Pellerano, <b>programmer</b> Panayoti Haritatos, graphic designer Tim Wendorf and musician Nick Esposito. The developers hired two adjoining hotel rooms and opened the connecting door, allowing them to concentrate solely on creating the game {{over a period of}} five days, resulting in a demo. Pellerano spent further weeks updating the game during his spare time after which it was released to the public. During the weeks between the initial demo version and the game's release, Wendorf playtested the game and provided feedback on the number of souls needed to allow special abilities to be activated. The music track was created one night when Pellerano met Esposito in the latter's studio, during which Pellerano also voiced the sound effects resulting from Cuties being killed.|$|E
50|$|The {{personalities of}} {{software}} <b>programmers</b> influence the used coding styles which, in turn, influence {{the productivity of}} the <b>programmers.</b>|$|R
50|$|DigitalNZ also {{provides}} API access to computer <b>programmers</b> so the <b>programmers</b> {{can use the}} metadata {{to create their own}} applications.|$|R
40|$|Faced with {{a chronic}} {{shortage}} of skilled object-oriented <b>programmers,</b> and burdened with an oversupply of procedural <b>programmers</b> leaving Y 2 K projects, organizations must {{find ways of}} retraining existing <b>programmers</b> in the new tricks of object technology. However, traditional methods of training do not address the difficulties of making the mind shift from one paradigm to another. This paper describes an effort to develop a course that shifts experienced procedural <b>programmers</b> into “object thinking, ” thus making subsequent traditional OO training more efficient and effective. We describe a long-term exploratory field study that follows students over two years and compare their OO thinking to that of expert OO <b>programmers</b> and to <b>programmers</b> who underwent traditional OO training. This research {{is supported by a}} grant from The Boeing Company...|$|R
5|$|Mainstream {{parallel}} programming languages remain either explicitly parallel or (at best) partially implicit, {{in which a}} <b>programmer</b> gives the compiler directives for parallelization. A few fully implicit {{parallel programming}} languages exist—SISAL, Parallel Haskell, SequenceL, System C (for FPGAs), Mitrion-C, VHDL, and Verilog.|$|E
5|$|Mullen {{left school}} in 1978, having taken his Intermediate Certificate exams. The school offered him {{the chance to}} {{complete}} his Leaving Certificate exams. He and his sister Cecelia worked for an American company in Dublin, involved in oil exploration {{off the coast of}} Ireland. Mullen worked there for a year in the purchasing department, with the prospect of becoming a computer <b>programmer</b> in their geology section.|$|E
5|$|<b>Programmer</b> Ed Salvo was {{inspired}} to make Lost Luggage when {{he was waiting for}} his luggage at the Dallas/Fort Worth International Airport, and the game took around four weeks to produce. Reviewers criticized the game's similarity to Activision's Kaboom!which itself is based on Avalanchebelieving Lost Luggage to be an inferior clone.|$|E
40|$|Modern {{software}} engineering environments provide <b>programmers</b> with contextual information on methods and classes in their software system. However, <b>programmers</b> increasingly encounter frameworks such as Microsoft Foundation Classes or Enterprise Java Beans whose required plug-in mechanisms cannot be adequately described with method or class documentation. The needs of <b>programmers</b> using frameworks {{are different from}} the needs when using libraries. Software engineering environments should be augmented with tools to aid <b>programmers</b> in understanding the demands of using frameworks. 1...|$|R
40|$|Wrox Professional guides {{are planned}} and written by working <b>programmers</b> {{to meet the}} {{real-world}} needs of <b>programmers,</b> developers, and IT professionals. Focused and relevant, they address the issues technology professionals face every day. They provide examples, practical solutions, and expert education in new technologies, all designed to help <b>programmers</b> do a better job...|$|R
40|$|This study {{examines}} the problem solving strategies used by expert <b>programmers.</b> Past {{studies of the}} cognitive processes of expert <b>programmers</b> suggest the existence of plans that describe the problem solving strategies held by these <b>programmers.</b> To date such strategies, which are relevant to novice <b>programmers,</b> have not been explicitly incorporated into the curricula of introductory programming courses. In revisiting these earlier studies and confirming {{the existence of the}} strategies held by experts, this study argues for inclusion of explicit strategy instruction. ...|$|R
