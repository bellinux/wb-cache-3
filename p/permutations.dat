10000|10000|Public
5|$|Each triplet has 3! = 6 <b>permutations.</b> The 6 {{triplets}} contribute 66 <b>permutations.</b>|$|E
5|$|The Band1 (65) symmetries {{divide the}} (56×66) Band1 valid <b>permutations</b> into (not less than) 336 (56×6) {{equivalence}} classes with (up to) 6^5 <b>permutations</b> each.|$|E
5|$|Choose a {{canonical}} {{labeling of}} the digits by assigning values for B1 (see grid), and compute {{the rest of}} the Band1 <b>permutations</b> relative B1.|$|E
50|$|Every <b>permutation</b> {{defines a}} <b>permutation</b> graph, a graph whose {{vertices}} are {{the elements of}} the <b>permutation</b> and whose edges connect pairs of elements that are inverted by the <b>permutation.</b> The <b>permutation</b> graphs of stack-sortable graphs are trivially perfect.|$|R
5000|$|<b>Permutation</b> pattern, a <b>permutation</b> that is order-isomorphic to a {{subsequence}} {{of another}} <b>permutation</b> ...|$|R
5000|$|Superpattern, a <b>permutation</b> that {{contains}} each <b>permutation</b> of n symbols as a <b>permutation</b> pattern ...|$|R
5|$|Circular <b>permutations</b> are {{routinely}} engineered {{in the laboratory}} to improve their catalytic activity or thermostability, or to investigate properties of the original protein.|$|E
5|$|Combined, the symmetries give 9! × 65 = 362880 × 7776 {{equivalent}} <b>permutations</b> {{for each}} Band1 solution.|$|E
5|$|Each of the valid Band1 <b>permutations</b> can be {{expanded}} (completed) into a specific number of solutions with the Band2,3 <b>permutations.</b> By {{virtue of their}} similarity, each member of an equivalence class {{will have the same}} number of completions. Consequently, we only need to construct the solutions for one member of each equivalence class and then multiply the number of solutions {{by the size of the}} equivalence class. We are still left with the task of identifying and calculating the size of each equivalence class. Further progress requires the dexterous application of computational techniques to catalogue (classify and count) the <b>permutations</b> into equivalence classes.|$|E
50|$|Several points {{should be}} {{considered}} using <b>permutation</b> method. <b>Permutation</b> methods are not suitable for correlated sampling units, since the sampling process of <b>permutation</b> implies independence and requires i.i.d. assumptions. Furthermore, literature showed that the <b>permutation</b> distribution converges to N(0,1) quickly as n becomes large. In some cases, <b>permutation</b> techniques and empirical methods can be combined by using <b>permutation</b> null replace N(0,1) in the empirical algorithm.|$|R
40|$|We {{introduce}} twisted <b>permutation</b> codes, {{which are}} frequency <b>permutation</b> arrays analogous to repetition <b>permutation</b> codes, namely, codes {{obtained from the}} repetition construction applied to a <b>permutation</b> code. In particular, we show that a lower bound for the minimum distance of a twisted <b>permutation</b> code is the minimum distance of a repetition <b>permutation</b> code. We give examples where this bound is tight, but more importantly, we give examples of twisted <b>permutation</b> codes with minimum distance strictly greater than this lower bound. Comment: 20 page...|$|R
25|$|The {{following}} algorithm {{generates the}} next <b>permutation</b> lexicographically after a given <b>permutation.</b> It changes the given <b>permutation</b> in-place.|$|R
5|$|Many {{proteins}} {{have their}} termini located close together in 3D space. Because of this, {{it is often}} possible to design circular <b>permutations</b> of proteins. Today, circular <b>permutations</b> are generated routinely in the lab using standard genetics techniques. Although some permutation sites prevent the protein from folding correctly, many permutants have been created with nearly identical structure and function to the original protein.|$|E
5|$|The {{choices for}} B3 {{triplets}} are row-wise {{determined by the}} B1 B2 row triplets. B3 always contributes 63 <b>permutations.</b>|$|E
5|$|The {{number of}} <b>permutations</b> is again 66 (Felgenhauer/Jarvis). Call the cases 0 and 3 the pure match case.|$|E
50|$|The parity of a <b>permutation</b> {{refers to}} whether that <b>permutation</b> is even or odd. An even <b>permutation</b> {{is one that}} can be {{represented}} by an even number of swaps while an odd <b>permutation</b> is {{one that can be}} represented by an odd number of swaps. An odd <b>permutation</b> followed by an odd <b>permutation</b> will represent an overall even <b>permutation</b> (adding two odd numbers always returns an even number). Since a quarter turn is made up of a number of 4-cycles each involving three swaps, if the number of 4-cycles is odd, overall parity of the quarter turn <b>permutation</b> will be odd and vice versa.|$|R
40|$|Twisted <b>permutation</b> codes, {{introduced}} {{recently by}} {{the second and third}} authors, are frequency <b>permutation</b> arrays. They are similar to repetition <b>permutation</b> codes, in that they are obtained by a repetition construction applied to a smaller code. It was previously shown that the minimum distance of a twisted <b>permutation</b> code is at least the minimum distance of a corresponding repetition <b>permutation</b> code, but in some instances can be larger. We construct two new infinite families of twisted <b>permutation</b> codes with minimum distances strictly greater than those for the corresponding repetition <b>permutation</b> codes. Comment: 15 page...|$|R
40|$|A <b>permutation</b> polytope is the {{convex hull}} {{of a group}} of <b>permutation</b> matrices. In this paper we {{investigate}} the combinatorics of <b>permutation</b> polytopes and their faces. As applications we completely classify <b>permutation</b> polytopes in dimensions 2, 3, 4, and the corresponding <b>permutation</b> groups up to a suitable notion of equivalence. We also provide a list of combinatorial types of possibly occuring faces of <b>permutation</b> polytopes up to dimension four. Comment: AMS-LaTeX, 22 page...|$|R
5|$|Within each block, the 3 columns may be interchanged, giving 3!3 = 63 <b>permutations.</b>|$|E
5|$|A uniform {{honeycomb}} in hyperbolic {{space is}} a uniform tessellation of uniform polyhedral cells. In 3-dimensional hyperbolic space {{there are nine}} Coxeter group families of compact convex uniform honeycombs, generated as Wythoff constructions, and represented by <b>permutations</b> of rings of the Coxeter diagrams for each family.|$|E
5|$|After the {{discovery}} of a natural circularly permuted protein, researchers looked for a way to emulate this process. In 1983, David Goldenberg and Thomas Creighton were able to create a circularly permuted version of a protein by chemically ligating the termini to create a cyclic protein, then introducing new termini elsewhere using trypsin. In 1989, Karolin Luger and her colleagues introduced a genetic method for making circular <b>permutations</b> by carefully fragmenting and ligating DNA. This method allowed for <b>permutations</b> to be introduced at arbitrary sites.|$|E
5000|$|The {{sign of a}} <b>permutation</b> {{is defined}} to be {{positive}} if the <b>permutation</b> is even, and negative if the <b>permutation</b> is odd.|$|R
40|$|If i, j {{belongs to}} a <b>permutation</b> on n symbols { 1, 2, …, p} and i is less than j then there is an edge between i and j in the <b>permutation</b> graph if i appears after j. (i. e) inverse of i {{is greater than the}} inverse of j. So the line of i crosses the line of j in the <b>permutation.</b> So there is a one to one {{correspondence}} between crossing of lines in the <b>permutation</b> and the edges of the corresponding <b>permutation</b> graph. In this paper we found the conditions for a <b>permutation</b> to realize paths and cycles and also derived the domination number of <b>permutation</b> graph through the <b>permutation.</b> AM...|$|R
40|$|In {{this thesis}} we {{investigate}} some interesting {{properties of the}} family of <b>permutation</b> languages and its subclasses. <b>Permutation</b> grammars are context-free grammars extended with special non-context-free rules: <b>permutation</b> rules. <b>Permutation</b> rules have a sequence of nonterminal symbols on the left-hand side and a <b>permutation</b> of that sequence on the right-hand side. The simplest <b>permutation</b> rules are of the form AB -> BA, more complex <b>permutation</b> rules can be obtained by length increase, for instance ABC -> CAB. We discuss some of the subclasses of <b>permutation</b> grammars. We also introduce a modification to Earley's parser algorithm for context-free grammars in order to handle Perm(2, 1) grammars and discuss an efficient implementation. MSc/MAprogramtervező informatiku...|$|R
5|$|Case 2: 2 Matches for r21 from r12. The same logic as case 1 applies, {{but with}} the B2 option count column groupings reversed. Case 3 also {{contributes}} 33×66 <b>permutations.</b>|$|E
5|$|Enumerating the Sudoku {{solutions}} {{breaks into}} an initial setup stage {{and then into}} two nested loops. Initially all the valid Band1 <b>permutations</b> are grouped into equivalence classes, who each impose a common constraint on the Band2,3 completions.|$|E
5|$|Felgenhauer/Jarvis catalogued the Band1 <b>permutations</b> using {{lexicographical}} ordered IDs {{based on}} the ordered digits from blocks B2,3. Block 1 uses a canonical digit assignment and is not needed for a unique ID. Equivalence class identification and linkage uses the lowest ID within the class.|$|E
40|$|Abstract. In {{this paper}} a new <b>permutation</b> {{generator}} is proposed. Each subsequent <b>permutation</b> is generated in a cellular <b>permutation</b> network by reversing a suffix/prefix {{of the preceding}} <b>permutation.</b> The sequence of suffix/prefix sizes is computed by a complex parallel counter in O(1) time per generated object. Suffix/prefix reversing operations are performed {{at the same time}} when the <b>permutation</b> is actually produced. ...|$|R
50|$|A signed <b>permutation</b> matrix is a {{generalized}} <b>permutation</b> matrix whose nonzero entries are ±1, {{and are the}} integer generalized <b>permutation</b> matrices with integer inverse.|$|R
30|$|Reference [33] has {{proposed}} a <b>permutation</b> alignment approach based on the power ratio measure. Binwise <b>permutation</b> alignment is applied first across all frequency bins, using the correlation of separated signal powers; then the full frequency band is partitioned into small regions based on the binwise <b>permutation</b> alignment result. Finally, regionwise <b>permutation</b> alignment is performed, which can prevent the spreading of the misalignment at isolated frequency bins to others and thus improves <b>permutation.</b> This <b>permutation</b> alignment approach is employed in the proposed method.|$|R
5|$|The <b>permutations</b> of B1 are {{the number}} of ways to relabel the 9 digits, 9! = 362880. Counting the <b>permutations</b> for B2 is more complicated, because the choices for B2 depend on the values in B1. (This is a visual {{representation}} of the expression given above.) The conditional calculation needs a branch (sub-calculation) for each alternative. Fortunately, there are just 4 cases for the top B2 triplet (r21): it contains either 0, 1, 2, or 3 of the digits from the B1 middle row triplet(r12). Once this B2 top row choice is made, {{the rest of the}} B2 combinations are fixed. The Band1 row triplet labels are shown on the right.|$|E
5|$|Traditional {{algorithms}} for sequence alignment {{and structure}} alignment {{are not able}} to detect circular <b>permutations</b> between proteins. New non-linear approaches have been developed that overcome this and are able to detect topology-independent similarities.|$|E
5|$|An {{enumeration}} technique {{based on}} band generation was developed that is significantly less computationally intensive. The strategy begins {{by analyzing the}} <b>permutations</b> of the top band used in valid solutions. Once the Band1 symmetries and equivalence class for the partial solutions are identified, the completions of the lower two bands are constructed and counted for each equivalence class.|$|E
40|$|A <b>permutation</b> graph is a graph {{that can}} be derived from a <b>permutation,</b> where the {{vertices}} correspond to letters of the <b>permutation,</b> and the edges represent inversions. We provide a construction to show that there are infinitely many connected r-regular <b>permutation</b> graphs for r ≥ 3. We prove that all 3 -regular <b>permutation</b> graphs arise from a similar construction. Finally, we enumerate all 3 -regular <b>permutation</b> graphs on n vertices. Comment: 12 pages, 12 figures, included acknowledgement of IMA suppor...|$|R
40|$|Four {{recursive}} {{constructions of}} <b>permutation</b> polynomials over (q^ 2) with those over (q) are developed {{and applied to}} a few famous classes of <b>permutation</b> polynomials. They produce infinitely many new <b>permutation</b> polynomials over (q^ 2 ^ℓ) for any positive integer ℓ with any given <b>permutation</b> polynomial over (q). A generic construction of <b>permutation</b> polynomials over (2 ^ 2 m) with o-polynomials over (2 ^m) is also presented, {{and a number of}} new classes of <b>permutation</b> polynomials over (2 ^ 2 m) are obtained...|$|R
5000|$|<b>Permutation</b> of Last Layer (PLL) - The {{final stage}} {{involves}} moving {{the pieces of}} the top layer while preserving their orientation. There are a total of 21 algorithms for this stage. They are distinguished by letter names, usually based on what they look like with arrows representing what pieces are swapped around (e.g. A <b>permutation,</b> F <b>permutation,</b> T <b>permutation,</b> etc.). [...] "Two-look" [...] PLL solves the corners and edges separately. It uses five algorithms, four for edge <b>permutation</b> and one for corner <b>permutation.</b>|$|R
