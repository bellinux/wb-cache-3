0|3208|Public
40|$|Copyright IEEE. Personal {{use of this}} {{material}} is permitted. However, permission to reprint/republish {{this material}} for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must {{be obtained from the}} IEEE. High splitting, optically amplified, passive optical networks (SuperPONs) are investigated in terms of redundancy provision and <b>protection</b> <b>mechanisms.</b> Options for redundancy, including the important special case of dual homing, are detailed, and it is determined as to which of these options (duplication of the feeder and first distribution section, and N+ 1 protection of the optical amplifiers in the amplified splitter) would be required to be provided to all attached users to facilitate appropriate availability of the basic telephony service. The distributed amplified splitter dual homing solution is found to outperform the single amplified splitter solution in terms of its survivability. The <b>protection</b> <b>mechanisms</b> necessary to automatically switch to the redundant provision are discussed and it is seen that with the aid of suitable regular precautionary <b>procedures</b> <b>protection</b> switching can generally be provided rapidly (< 50 ms). Finally, an availability, and cost versus availability, study confirms the aforementioned redundancy assessment for fiber-to-the-home (FTTH) implementations, but shows fiber-to-the-curb (FTTC) as needing additional redundanc...|$|R
40|$|The paper {{outlines}} a bioinspired approach named “network nervous system" {{and methods}} of simulation of infrastructure attacks and <b>protection</b> <b>mechanisms</b> based on this approach. The <b>protection</b> <b>mechanisms</b> based on this approach consist of distributed prosedures of information collection and processing, which coordinate {{the activities of the}} main devices of a computer network, identify attacks, and determine nessesary countermeasures. Attacks and <b>protection</b> <b>mechanisms</b> are specified as structural models using a set-theoretic approach. An environment for simulation of <b>protection</b> <b>mechanisms</b> based on the biological metaphor is considered; the experiments demonstrating the effectiveness of the <b>protection</b> <b>mechanisms</b> are described...|$|R
40|$|AbstractSecurity {{policies}} define who may {{use what}} {{information in a}} computer system. <b>Protection</b> <b>mechanisms</b> are built into a system to enforce security policies. In most systems, however, it is quite unclear what policies a mechanism can or does enforce. This paper defines security policies and <b>protection</b> <b>mechanisms</b> precisely and bridges the gap between them {{with the concept of}} soundness: whether a <b>protection</b> <b>mechanism</b> enforces a policy. Different sound <b>protection</b> <b>mechanisms</b> for the same policy can then be compared. We also show that the “union” of mechanisms for the same program produces a more “complete” mechanism. Although a “maximal” mechanism exists, it cannot necessarily be constructed...|$|R
40|$|The {{properties}} of a capability-based <b>protection</b> <b>mechanism</b> to be incorporated {{in a language}} for concurrent programming are presented. The <b>protection</b> <b>mechanism</b> is first abstractly characterized {{in terms of a}} protection model; the components of the <b>protection</b> <b>mechanism,</b> that is objects, subjects and protection rules which govern the accessing to the objects by the subjects, are defined. The paper then concentrates on appropriate programming language features to specify how the <b>protection</b> <b>mechanism</b> may be embedded in an object oriented programming language which allows abstract data type definition. In particular it is shown how the protection rules can be implemented in the language so that a completely static access control to objects is obtained...|$|R
40|$|The {{blooming}} of location-sharing {{services has}} led to serious privacy concerns, particularly location privacy concerns. In this paper, we first discuss the definition of location privacy and then review several location privacy <b>protection</b> <b>mechanisms.</b> After that, we classify location privacy <b>protection</b> <b>mechanisms</b> into four categories: legislation & regulatory, anonymity & obfuscation, protocol and policy-based protection. We explain each privacy <b>protection</b> <b>mechanism</b> category in detail and discuss {{if it can be}} used in particular kind of locationsharing services along with their advantages and disadvantages...|$|R
40|$|International audienceIn the {{framework}} of a geographic application displaying maps, there are several solutions for protecting a sensitive object. Sensitive objects can be hidden, masked, blurred or even replaced by fake objects. In this paper we suggest a framework to specify <b>protection</b> <b>mechanisms</b> to enforce whenever a prohibition is derived from the security policy. This framework includes (i) logical rules allowing us to derive <b>protection</b> <b>mechanisms</b> from prohibitions, and (ii) an algorithm which builds the map to display, according to the derived <b>protection</b> <b>mechanisms...</b>|$|R
5000|$|... greater {{consistency}} with existing social <b>protection</b> <b>mechanism</b> ...|$|R
5000|$|Access rights byte {{containing}} the <b>protection</b> <b>mechanism</b> information ...|$|R
50|$|The EU Civil <b>Protection</b> <b>Mechanism</b> also {{established}} {{the opening of}} the new Emergency Response Coordination Centre (ERCC), a civil protection 'hub' for monitoring disasters and enhancing preparedness and resilience of disaster-prone countries. The most recent use of the Civil <b>Protection</b> <b>mechanism</b> occurred during flooding in Bosnia Herzegovina and Serbia.|$|R
40|$|We propose an {{approach}} for reasoning about message integrity protection in cryptographic protocols. The set of axioms presented herein relate design parameters and assumptions of message integrity <b>protection</b> <b>mechanisms</b> to generic message integrity threats. Comparison of threat properties derived using these axioms {{with the policy}} goals for integrity protection aids in assessing the strength (or lack thereof) of message integrity <b>protection</b> <b>mechanisms.</b> We provide examples to illustrate the use of our approach in examining the weaknesses of message integrity <b>protection</b> <b>mechanisms,</b> and also in suggesting modifications in their design parameters...|$|R
40|$|Type-based <b>protection</b> <b>mechanisms</b> in a JVM-like {{environment}} must be administrated by {{the code}} consumer at the bytecode level. Unfortunately, formulating a sound static type {{system for the}} full JVM bytecode language can be a daunting task. It is therefore counter-productive for the designer of a bytecode-level type system to address the full complexity of the VM environment in the early stage of design. In this work, a lightweight modeling tool, Featherweight JVM, is proposed to facilitate the early evaluation of bytecode-level, type-based <b>protection</b> <b>mechanisms.</b> In the style of Security Automata, Featherweight JVM is an event model that tracks interprocedural access events generated by a JVM-like environment. The effect of deploying a typebased <b>protection</b> <b>mechanism</b> can be modeled by a safety policy that restricts the event sequences produced by the VM model. To {{evaluate the effectiveness of}} the <b>protection</b> <b>mechanism,</b> security theorems in the form of state invariants can then be proven in the policy-guarded VM model. This paper provides first evidence on the utility of this approach in providing early feedback to the designer of type-based <b>protection</b> <b>mechanisms</b> for JVM-like environments. 1...|$|R
40|$|Over {{the past}} several years, Microsoft has {{implemented}} a number of memory <b>protection</b> <b>mechanisms</b> {{with the goal of}} preventing the reliable exploitation of common software vulnerabilities on the Windows platform. <b>Protection</b> <b>mechanisms</b> such as GS, SafeSEH, DEP and ASLR complicate the exploitation of many memory corruption vulnerabilities and at first sigh...|$|R
5000|$|Biometric {{passports}} have <b>protection</b> <b>mechanisms</b> {{to avoid}} and/or detect attacks: ...|$|R
40|$|The aim of {{this paper}} is to provide a link between {{research}} on innovation and some contributions on knowledge <b>protection</b> <b>mechanisms,</b> and to develop a framework for the study of knowledge <b>protection</b> <b>mechanisms</b> within industrial districts (form now ID). On one hand, a number of both empirical researches and theoretical studies have bee...|$|R
40|$|Abstract — Due to the pre-computed spare {{capacity}} of conventional WDM <b>protection</b> <b>mechanism,</b> network resource is inefficiently used. Nevertheless, fault recovery mechanisms {{can not be}} neglected during network design, since a single fiber failure may causes a huge date loss. This work evaluates different <b>protection</b> <b>mechanisms</b> and their performance-specific characteristics. Then, it presents a novel mechanism, which reduce resource interference in connection establishment. The blocking probability and the connections availability are examined as performance metrics of the <b>protection</b> <b>mechanisms.</b> Our simulations employ conventional mechanisms {{as well as the}} proposed one in two network topologies, handling multiple-failure scenarios. I...|$|R
40|$|This {{document}} provides common terminology and metrics for benchmarking {{the performance}} of sub-IP layer <b>protection</b> <b>mechanisms.</b> The performance benchmarks are measured at the IP layer; protection may be provided at the sub-IP layer. The benchmarks and terminology can be applied in methodology documents for different sub-IP layer <b>protection</b> <b>mechanisms</b> such as Automatic Protection Switching (APS) ...|$|R
30|$|Existing <b>Protection</b> <b>Mechanism</b> and Defects of Android System (refer to Appendix A).|$|R
40|$|Persistent {{systems support}} a single storage {{abstraction}} {{in which all}} data may be created and manipulated in a uniform manner, regardless of its longevity. In such systems a <b>protection</b> <b>mechanism</b> is required to ensure that programs can access precisely those objects {{they are supposed to}} access and no others. In a monolingual system this protection can be provided by the type system of the programming language; in systems which support multiple persistent languages a separate <b>protection</b> <b>mechanism</b> must be supported. This paper describes the capability-based <b>protection</b> <b>mechanism</b> employed in Grasshopper, a new operating system specifically designed to support persistent systems on a conventional workstation platform. We show that this mechanism provides sufficient power and flexibility to handle a wide variety of protection scenarios. 1. Introduction In this paper we describe the <b>protection</b> <b>mechanism</b> in Grasshopper, an operating system designed to support orthogonal persistence. The two ba [...] ...|$|R
5000|$|Extensive file {{processing}} including file sharing, <b>protection</b> <b>mechanisms,</b> and virtual (memory) disk support.|$|R
40|$|As more {{business}} activities are being automated {{and an increasing}} number of computers are being used to store vital and sensitive information the need for secure computer systems becomes more apparent. These systems can be achieved only through systematic design; they cannot be achieved through haphazard seat-of-the-pants methods. This paper introduces some known threats to the computer security, categorizes the threats, and analyses <b>protection</b> <b>mechanisms</b> and techniques for countering the threats. The threats have been classified more so as definitions and then followed by the classifications of these threats. Also mentioned are the <b>protection</b> <b>mechanisms.</b> Comment: 11 pages,PDF, Comments about threats to the computer security and their <b>protection</b> <b>mechanism...</b>|$|R
40|$|Executable content poses {{a threat}} of {{unauthorized}} access because it contains program code running on the user's machine. Protecting against executable content is difficult because of the inevitable flaws {{in the implementation of}} <b>protection</b> <b>mechanisms.</b> This paper introduces a hierarchical protection model to tolerate flaws in <b>protection</b> <b>mechanisms.</b> This model improves both the granularity and the robustness of <b>protection</b> <b>mechanisms</b> by nesting two protection domains: a level- 1 protection domain to provide fine-grained access control on executable content, and a level- 2 protection domain to act as a fail-safe mechanism. We achieved an efficient implementation of the hierarchical protection model that incorporated the fine-grained protection domains proposed in our previous paper...|$|R
40|$|Abstract—Mobile Agents {{is a new}} {{paradigm}} for distributed computing where security is very essential to the acceptance of this paradigm {{in a large scale}} distributed environment. In this paper, we propose <b>protection</b> <b>mechanisms</b> for mobile agents. In these mechanisms, the authentication of mobile agents and the access control to the system resources are controlled by the mobile-agents platform. Each agent defines its own access control policy with regard to other agents using an Interface Definition Language (IDL), thus enforcing modularity and easing programming task. An evaluation of these mechanisms has been conducted. The measurements give the overhead involved by the proposed <b>protection</b> <b>mechanisms</b> to the performance of mobile agents. An important advantage of our <b>protection</b> <b>mechanisms</b> are transparency to agents and the portability of nonsecure applications onto a secure environment. A mobile agent system and the <b>protection</b> <b>mechanisms</b> have been implemented. Our experiments have shown the feasibility and the advantages of our mechanisms. Index Terms—Mobile agents, security, authentication, access control I...|$|R
50|$|The EUTAC {{project was}} co-funded by the European Commission, Civil <b>Protection</b> <b>Mechanism,</b> Preparatory Action 2008.|$|R
5000|$|Model 39 was {{designed}} to circumvent the <b>protection</b> <b>mechanism</b> placed by Chamberlain's rolling code (infringing §1201(a)(2)(A)).|$|R
25|$|Microsoft {{also noted}} that content <b>protection</b> <b>mechanisms</b> have existed in Windows {{as far back as}} Windows ME.|$|R
25|$|<b>Protection</b> <b>mechanisms,</b> such as {{disabling}} or degrading outputs, may {{be triggered}} erroneously or maliciously, motivating denial-of-service attacks.|$|R
50|$|The {{access matrix}} model, first {{introduced}} in 1971, is a generalized description of operating system <b>protection</b> <b>mechanisms.</b>|$|R
50|$|Microsoft {{also noted}} that content <b>protection</b> <b>mechanisms</b> have existed in Windows {{as far back as}} Windows ME.|$|R
5000|$|<b>Protection</b> <b>mechanisms,</b> such as {{disabling}} or degrading outputs, may {{be triggered}} erroneously or maliciously, motivating denial-of-service attacks.|$|R
5000|$|Undertake need based {{innovative}} projects {{aimed at}} bringing efficiency in child <b>protection</b> <b>mechanism</b> {{in the state}} of Odisha.|$|R
30|$|Blockchain {{technology}} {{ensures that}} data is tamper-proof, traceable, and trustworthy. This article introduces a well-known blockchain technology implementation—Hyperledger Fabric. The basic framework and privacy <b>protection</b> <b>mechanisms</b> of Hyperledger Fabric such as certificate authority, channel, Private Data Collection, etc. are described. As an example, a specific business scenario of supply chain finance is figured out. And accordingly, some design details {{about how to}} apply these privacy <b>protection</b> <b>mechanisms</b> are described.|$|R
5000|$|User-mode {{applications}} ("Real-Time Processes", or RTP) {{isolated from}} other user-mode applications {{as well as}} the kernel via memory <b>protection</b> <b>mechanisms.</b>|$|R
5000|$|Vulnerabilities in the <b>protection</b> <b>mechanisms</b> {{provided}} by the hardware or operating system which the application relies upon for its security ...|$|R
40|$|The {{computing}} {{demands of}} applications {{coupled with the}} power wall problem in modern processors are expected {{to pave the way}} for heterogeneous computing platforms that are composed of a variety of processors and hardware accelerators. While current heterogeneous platform design analyses assess area, performance, and power, the tremendous increase in transient fault rates requires that reliability analyses also be included, especially since fault <b>protection</b> <b>mechanisms</b> can directly affect the aforementioned area, performance, and power analyses – and they affect these metrics differently when implemented on different processing components. Heterogeneous platform design therefore requires accurate characterization of fault <b>protection</b> <b>mechanisms</b> when used in different processing components. This work-inprogress report details the first step in this direction, providing a characterization of various transient fault <b>protection</b> <b>mechanisms</b> in ASICs and FPGAs. 1...|$|R
40|$|This paper {{discusses}} compact node-link formulations for MPLS fast reroute optimal {{single path}} layout. We propose mathematical formulations for MPLS fast reroute local <b>protection</b> <b>mechanisms.</b> In fact, we compare one-to-one (also called detour) local protection and many-to-one (also called facility backup) local <b>protection</b> <b>mechanisms</b> {{with respect to}} minimized maximum link utilization. The optimal results provided by the node-links are compared with the suboptimal results provided by algorithms based on non-compact linear programming (path generation) approach and IP-based approach...|$|R
50|$|In telecommunications, {{subnetwork}} connection protection (SNCP), {{is a type}} of <b>protection</b> <b>mechanism</b> associated with synchronous optical networks such as synchronous digital hierarchy (SDH).|$|R
