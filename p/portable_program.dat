26|350|Public
50|$|It is now {{possible}} (and relatively easy) to write an entirely <b>portable</b> <b>program</b> in Fortran, even without recourse to a preprocessor.|$|E
5000|$|Some {{applications}} {{which are}} not portable by default do support optional portability through other mechanisms, the most common being command-line arguments. Examples might include [...] to simply instruct the program to behave as a <b>portable</b> <b>program,</b> or [...] to specify the configuration file location.|$|E
5000|$|Even with {{seemingly}} portable languages like C and C++ {{the effort}} to port source code can vary considerably. The authors of UNIX/32V (1979) reported that [...] "the (Bourne) shell ... required {{by far the largest}} conversion effort of any supposedly <b>portable</b> <b>program,</b> {{for the simple reason that}} it is not portable." ...|$|E
40|$|Programming {{even in a}} folly {{standardized}} {{high-level language}} requires great care if <b>portable</b> <b>programs</b> are to result. We review two recent attempts at producing guidelines for <b>portable</b> <b>programming</b> in high-level languages. Areas of particular difficulty, software aids to monitor compliance with projected guidelines, the prospects for enhanced portability of future languages and the form of published guidelines are separately discussed...|$|R
50|$|To {{facilitate}} {{the creation of}} <b>portable</b> <b>programs,</b> programming languages provide some abstractions {{to deal with the}} different types of newline sequences used in different environments.|$|R
40|$|<b>Portable</b> {{parallel}} <b>programming</b> environments, such as PVM, MPI, and Express, offer {{a message}} passing interface that significantly differs in functionality provided by native parallel operating {{systems such as}} PARIX. The implementation of such a <b>portable</b> <b>programming</b> environment {{on top of the}} native operating system requires a considerable effort. To ease the porting effort, we have designed a Communication Kernel that offers a common base for the implementation of these environments. The functionality of the Communication Kernel is close to the <b>portable</b> <b>programming</b> environments, and it is optimized to work efficiently with the underlying PARIX operating system. The current implementation of PVM profits from the efficient Communication Kernel as may future implementations of MPI and Express. ...|$|R
5000|$|Info-ZIP's Zip and UnZip {{have been}} ported {{to dozens of}} {{computing}} platforms. The UnZip web page describes UnZip as [...] "The Third Most <b>Portable</b> <b>Program</b> in the World", surpassed by Hello World, C-Kermit, and possibly the Linux kernel. [...] The [...] "zip" [...] and [...] "unzip" [...] programs included with most Linux and Unix distributions are Info-ZIP's Zip and UnZip.|$|E
50|$|Portable {{applications}} can {{be stored}} on any data storage device, including internal mass storage, a file share, cloud storage or external storage such as USB drives and floppy disksâ€”storing its program files and any configuration information and data on the storage medium alone. If no configuration information is required a <b>portable</b> <b>program</b> can be run from read-only storage such as CD-ROMs and DVD-ROMs. Some applications are available in both installable and portable versions.|$|E
5000|$|Most dynamic recompilers {{are used}} to convert machine code between {{architectures}} at runtime. This is a task often needed in the emulation of legacy gaming platforms. In other cases, a system may employ dynamic recompilation {{as part of an}} adaptive optimization strategy to execute a <b>portable</b> <b>program</b> representation such as Java or [...]NET Common Language Runtime bytecodes. Full-speed debuggers also utilize dynamic recompilation to reduce the space overhead incurred in most deoptimization techniques, and other features such as dynamic thread migration.|$|E
50|$|In digital {{computing}} systems, the rules {{can be expressed}} by algorithms and data structures. Expressing the algorithms in a <b>portable</b> <b>programming</b> language makes the protocol software operating-system independent.|$|R
50|$|VIDIX (video {{interface}} for *nix) is a <b>portable</b> <b>programming</b> interface for Unix-like {{operating systems}} that allows video card drivers running in user space to directly access the framebuffer through Direct Graphics Access extension to the X Window System.|$|R
50|$|In {{the early}} 1990s PGI was deeply {{involved}} in the development of High Performance Fortran, or HPF, a data parallel language extension to Fortran 90 which provides a <b>portable</b> <b>programming</b> interface {{for a wide variety of}} architectures. PGI produced an HPF compiler which continues to be available today.|$|R
5000|$|Performed by Tom London and John F. Reiser, porting Unix {{was made}} {{possible}} due to work done between the Sixth and Seventh Editions of the operating system to decouple it from its [...] "native" [...] PDP-11 environment. The 32V team first ported the C compiler (Johnson's pcc), adapting an assembler and loader written for the Interdata 8/32 version of Unix to the VAX. They then ported the April 15, 1978 version of Unix, finding in the process that [...] "the (Bourne) shell ... required {{by far the largest}} conversion effort of any supposedly <b>portable</b> <b>program,</b> {{for the simple reason that}} it is not portable." ...|$|E
40|$|Virtual {{machines}} face significant performance challenges {{beyond those}} confronted by traditional static optimizers. First, <b>portable</b> <b>program</b> representations and dynamic language features, such as dynamic class loading, force the deferral of most optimizations until runtime, inducing runtime optimization overhead. Second, modula...|$|E
40|$|International audienceIn {{this paper}} the program LISA is presented. LISA is a {{flexible}} and <b>portable</b> <b>program</b> {{which has been}} developed to analyse structural properties of large scale linear and bilinear structured systems. More precisely, the program LISA contains programmed algorithms which allow us to apply recent results {{in the analysis of}} structured systems to some particular cases...|$|E
40|$|We {{present an}} {{overview}} {{of research at the}} CRPC designed to provide an efficient, <b>portable</b> <b>programming</b> model for scientific applications possessing both task and data parallelism. Fortran M programs exploit task parallelism by providing language extensions for user-defined process management and typed communication channels. A combination of compiler and run-time system support ensures modularity, safety, portability, and efficiency. Fortran D and High Performance Fortran programs exploit data parallelism by providing language extensions for user-defined data decomposition specifications, parallel loops, and parallel array operations. Compile-time analysis and optimization yield efficient, <b>portable</b> <b>programs.</b> We design an interface for using a task-parallel language to coordinate concurrent data-parallel computations. The interface permits concurrently executing data-parallel computations to interact through messages. A key notion underlying the proposed interface is the integration of F [...] ...|$|R
5000|$|Disk Archive - <b>portable</b> robust <b>program</b> for {{archiving}} and backup ...|$|R
5|$|The {{specifications}} {{were approved}} by the Executive Committee on January 3, 1960, {{and sent to the}} government printing office, which printed these as COBOL 60. The language's stated objectives were to allow efficient, <b>portable</b> <b>programs</b> to be easily written, to allow users to move to new systems with minimal effort and cost, and to be suitable for inexperienced programmers.|$|R
40|$|Transportable Applications Environment Plus (TAE+) is integrated, <b>portable</b> <b>program</b> {{providing}} {{environment for}} developing and running interactive window, text, and graphical object-based application software systems. Enables construction of custom application interface and moving applications to different computers. Components are WorkBench, tool for design of user interface; WPT's (Window Programming Tools) package, set of callable subroutines controlling user interface; and TAE Command Language (TCL), providing ways to develop executable application prototype with run-time-interpreted language. Uses MIT X-Window System, WorkBench and WPT's written in C++, remaining code in C...|$|E
40|$|AbstractResource {{management}} {{is essential to}} build reliable middleware and to host potentially untrusted software components. Resource accounting allows to study and optimize program performance and to charge users for the resource consumption of their deployed components, while resource control can limit the resource consumption of components {{in order to prevent}} denial-of-service attacks. In the approach presented here, program transformations enable resource management in Java-based environments, even though the underlying runtime system may not expose information concerning the resource consumption of applications. We present a fully <b>portable</b> <b>program</b> transformation scheme to enhance standard Java runtime systems with mechanisms for CPU management. We implemented several optimizations {{in order to reduce the}} overhead of our CPU accounting scheme. Detailed performance measurements quantify this overhead and show the impact of various optimizations...|$|E
40|$|Virtual {{machines}} face significant performance challenges {{beyond those}} confronted by traditional static optimizers. First, <b>portable</b> <b>program</b> representations and dynamic language features, such as dynamic class loading, force the deferral of most optimizations until runtime, inducing runtime optimization overhead. Second, modular program representations preclude {{many forms of}} whole-program interprocedural optimization. Third, virtual machines incur additional costs for runtime services such as security guarantees and automatic memory management. To address these challenges, vendors have invested considerable resources into adaptive optimization systems in production virtual machines. Today, mainstream virtual machine implementations include substantial infrastructure for online monitoring and profiling, runtime compilation, and feedback-directed optimization. As a result, adaptive optimization has begun to mature as a widespread production-level technology. This paper surveys the evolution and current state of adaptive optimization technology in virtual machines. Keywordsâ€”Adaptive optimization, dynamic optimization, feedback-directed optimization (FDO), virtual machines. I...|$|E
50|$|For <b>portable</b> shell <b>programming</b> use of {{the length}} and substr {{commands}} is not recommended.|$|R
30|$|Another {{direction}} of HPRC {{research has been}} the development of libraries of small kernels that are useful as building blocks for larger applications. The Vforce framework [18] allows for <b>portable</b> <b>programming</b> of RC systems using a library of kernels. Other developments include libraries of floating-point arithmetic units [19], work on FFTs [20], and linear algebra kernels such as BLAS [21, 22].|$|R
50|$|SPEC {{benchmarks}} {{are written}} in a <b>portable</b> <b>programming</b> language (usually C, C#, Java or Fortran), and the interested parties may compile the code using whatever compiler they prefer for their platform, but may not change the code. Manufacturers {{have been known to}} optimize their compilers to improve performance of the various SPEC benchmarks. SPEC has rules that attempt to limit such optimizations.|$|R
40|$|A simple {{procedure}} for the real-time {{estimation of the}} average areal rainfall over a 4 km by 4 km grid was developed. The method proposed here was obtained by a straightforward extension of the well-known block Kriging approach. In order {{to take into account}} the seasonal influences, the monthly variogram models were built by least square fit for a ten-year period of rainfall data collected at USDA-ARS Walnut Gulch Experimental watershed. To investigate the rainfall spatial variability on a small scale, a small scale experiment was conducted within the watershed. Sensitivity analysis was also applied between the raingage densities and the relative estimated errors. A <b>portable</b> <b>program</b> MATCORS, for correspondence analysis was developed. A series of graphs and various diagnostic results generated by this program are provided to aid in interpreting the results. It was applied to a monthly rainfall data set recorded statewide in Arizona...|$|E
40|$|A <b>portable</b> <b>program</b> executes on {{different}} platforms and yields consistent performance. With {{the focus on}} portability, this paper presents an in-depth study {{of the performance of}} three NAS benchmarks (EP, MG, FT) compiled with three commercial HPF compilers (APR, PGI, IBM) on the IBM SP 2. Each benchmark is evaluated in two versions: using DO loops and using F 90 constructs and/or HPF's Forall statement. Base-line comparison is provided by versions of the benchmarks written in Fortran/MPI and ZPL, a data parallel language developed at the University of Washington. While some F 90 /Forall programs achieve scalable performance with some compilers, the results indicate a considerable portability problem in HPF programs. Two sources for the problem are identified. First, Fortran's semantics require extensive analysis and optimization to arrive at a parallel program; therefore relying on the compiler's capability alone leads to unpredictable performance. Second, the wide differences in the par [...] ...|$|E
40|$|Computers {{equipped}} with a Graphical User Interface (GUI) and connected to the Internet are common in both the business and educational communities. These computers, using a web browser, easily share programs written in the Java programming language {{that are able to}} execute on a variety of heterogeneous machines. While programs written in many languages will not execute unmodified on different computing platforms because of portability restrictions, Java has overcome these limitations and provides a platform independent language. However, every programming language is limited, and no language provides all the features required for every program. Therefore, creation of any <b>portable</b> <b>program</b> must consider not only the language, but also the architecture and operating system constraints of the target machines. A desktop manager program was developed using the Java programming language. This program provides a uniform user interface to manage other programs and executes on multiple computer platforms...|$|E
50|$|For {{communication}} to take place, protocols {{have to be}} agreed upon. Recall that in digital computing systems, the rules can be expressed by algorithms and datastructures, raising the opportunity for hardware independence. Expressing the algorithms in a <b>portable</b> <b>programming</b> language, makes the protocol software operating system independent. The source code {{could be considered a}} protocol specification. This form of specification, however is not suitable for the parties involved.|$|R
50|$|The project {{started out}} of a {{portable}} version of Mozilla Firefox in March 2004. John T. Haller then expanded the project to include Mozilla Thunderbird and OpenOffice.org. Soon the open source group of <b>portable</b> <b>programs</b> outgrew Haller's personal website and he moved it to a community site, PortableApps.com. The site currently hosts various projects created by forum members. The site is also used for bug reporting and suggestions.Some PortableApps distributions are hosted on SourceForge.|$|R
500|$|The group {{asked the}} Department of Defense (DoD) to sponsor {{an effort to}} create a common {{business}} language. The delegation impressed Charles A. Phillips, director of the Data System Research Staff at the DoD, who thought that they [...] "thoroughly understood" [...] the DoD's problems. The DoD operated 225 computers, had a further 175 on order and had spent over $200 million on implementing programs to run on them. <b>Portable</b> <b>programs</b> would save time, reduce costs and ease modernization.|$|R
40|$|In this paper, {{we discuss}} Ã¸ (TAU, Tuning and Analysis Utilities), the first {{prototype}} {{of an integrated}} and <b>portable</b> <b>program</b> analysis environment for pC++, a parallel object-oriented language system. Ã¸ is unique {{in that it was}} developed specifically for pC++ and relies heavily on pC++ 's compiler and transformation tools (specifically, the Sage ++ toolkit) for its implementation. This tight integration allows Ã¸ to achieve a combination of portability, functionality, and usability not commonly found in high-level language environments. The paper describes the design and functionality of Ã¸, using a new tool for breakpoint-based program analysis as an example of Ã¸ 's capabilities. 1 Introduction The trend towards using high-level parallel language systems to program scalable parallel computers must be accompanied by advances in the tools and environments for program analysis and tuning. The language system concerns are achieving programmability through parallel programming abstractions [...] ...|$|E
40|$|OBJECTIVE: As {{the first}} step toward finding noninvasive {{alternatives}} to the traditional methods of surgical training, we have developed a small, stand-alone computer program that simulates insertion of pedicle screws in different spinal vertebrae (T 10 -L 5). METHODS: We used Delphi 5. 0 and DirectX 7. 0 extension for Microsoft Windows. This is a stand-alone and <b>portable</b> <b>program.</b> RESULTS: The program can run on most personal computers. It provides the trainee with visual feedback during practice of the technique. At present, it uses predefined three-dimensional images of the vertebrae, but we are attempting to adapt the program to three-dimensional objects based on real computed tomographic scans of the patients. The program can be downloaded at no cost from the web site: www. tums. ac. ir/downloads CONCLUSION: As a preliminary work, it requires further development, particularly toward better visual, auditory, and even proprioceptive feedback and use of the individual patient's data. 3 page(s...|$|E
40|$|The {{design and}} {{performance}} of the implicit flow solver RANS-MP are discussed. The efficient bi-directional multi-partition solver algorithm, {{in conjunction with the}} MPI and newly developed MPI I/O libraries, leads to truly <b>portable</b> <b>program</b> text and performance. Computational results are presented for cache-based distributed-memory systems [...] -an MPP (IBM SP 2) and a LAN (SGI cluster) [...] -and a vector machine (Cray C 90). We also report good parallel I/O on the SP 2 and SGI cluster. 1 Introduction Although tools such as message passing, compiler directives, and auto-parallelizing compilers have reached a certain level of maturity, much of the debate on {{what is the best way}} of achieving high performance on current supercomputers at an acceptable cost is still as much alive today as it was a decade ago. But the discussion now focuses largely on software, with the underlying hardware fixed mainly on two architectures: cache-based distributed or distributed/shared memory machines on the one [...] ...|$|E
40|$|ASC legacy {{software}} must be ported {{to emerging}} hardware architectures. This paper notes that many programming models used by DOE applications are similar, {{and suggests that}} constructing a common terminology across these models could reveal a performance <b>portable</b> <b>programming</b> model. The paper then highlights how the LULESH mini-app is used to explore new programming models with outside solution providers. Finally, we suggest better tools to identify parallelism in software, and give suggestions for enhancing the co-design process with vendors...|$|R
5000|$|The group {{asked the}} Department of Defense (DoD) to sponsor {{an effort to}} create a common {{business}} language. The delegation impressed Charles A. Phillips, director of the Data System Research Staff at the DoD, who thought that they [...] "thoroughly understood" [...] the DoD's problems. The DoD operated 225 computers, had a further 175 on order and had spent over $200 million on implementing programs to run on them. <b>Portable</b> <b>programs</b> would save time, reduce costs and ease modernization.|$|R
40|$|The {{lack of a}} <b>portable</b> <b>programming</b> {{interface}} for {{parallel computers}} has inhibited the development of applications for such systems, and thus restricted the exploitation of this technology. In this paper we discuss various efforts to provide a portable interface to parallel computers, and present the Edinburgh CHIMP (Common High-level Interface to Message-Passing), and PUL (Parallel Utilities Library) activities in this context. The concepts behind these projects are described, with details {{of the range of}} parallel systems on which they are available...|$|R
