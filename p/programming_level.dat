134|4001|Public
50|$|At a <b>programming</b> <b>level,</b> {{software}} may {{be implemented}} using constructs generally represented or understood as tabular, whether to store data (perhaps to memoize earlier results), for example, in arrays or hash tables, or control tables determining {{the flow of}} program execution in response to various events or inputs.|$|E
5000|$|Single-board [...] "keypad and {{calculator}} display" [...] microcontrollers of {{this type}} were very similar to some low-end microcomputers of the time, such as the KIM-1 or the Microprofessor I. Some of these microprocessor [...] "trainer" [...] systems are still in production today, used as very low-cost introductions to microprocessors at the hardware <b>programming</b> <b>level.</b>|$|E
50|$|In the 1970s, IBM {{introduced}} {{fixed block}} architecture (FBA) for mainframes. At the <b>programming</b> <b>level,</b> these devices {{do not use}} the traditional CHR addressing, but reference fixed-length blocks by number, much like sectors in mini-computers. More correctly, the application programmer remains unaware of the underlying storage arrangement, which stores the data in fixed physical block lengths of 512, 1024, 2048, or 4096.|$|E
40|$|The Positive Parenting Program (Triple P) is a {{comprehensive}} multilevel system of family intervention for parents whose young children {{are at risk of}} developing disruptive behaviour disorders. The program aims to increase parenting skills, parent’s sense of competence, improve marital communication about parenting, and reduce parenting stress. The Triple P model offers differing levels of support for differing needs of parents. The five levels of Triple P intervention range from low-cost self-help <b>programs</b> (<b>Level</b> 1) to brief supported interventions (Level 2), parent training <b>programs</b> (<b>Level</b> 3 and 4) and intensive behavioural family intervention <b>programs</b> (<b>Level</b> 5), which address additional family problems...|$|R
5000|$|San Francisco Arts Commission, Cultural Equity Initiatives <b>program,</b> <b>Level</b> 2 panel ...|$|R
5000|$|... $80 {{million for}} Oklahoma Health Care Authority to {{maintain}} <b>program</b> <b>levels</b> ...|$|R
50|$|This {{is similar}} in concept to the virtual {{machines}} {{at the heart of}} the Java programming language and the Ada programming language, but existing at analysis level rather than at <b>programming</b> <b>level.</b> Once designed and implemented, such a virtual machine is re-usable across a range of applications. Shlaer-Mellor virtual machines are available commercially from a number of tool vendors, notably Abstract Solutions, Mentor Graphics and Pathfinder Solutions.|$|E
5000|$|Branch trace is a {{computer}} program debugging tool or analysis technique. It is an abbreviated instruction trace in which only the successful branch instructions are recorded. On IBM System/360 this was implemented as part of Program-Event Recording (PER) but was seldom used at the application <b>programming</b> <b>level.</b> Program Event Recording hardware was used and due to the overhead of this tool, it was removed from customer-available MVS systems.|$|E
50|$|Sequential {{consistency}} can {{be achieved}} simply by hardware implementation, while release consistency is also based on an observation {{that most of the}} parallel programs are properly synchronized. In <b>programming</b> <b>level,</b> synchronization is applied to clearly schedule a certain memory access in one thread to occur after another. When a synchronized variable is accessed, hardware would make sure that all writes local to a processor have been propagated to all other processors and all writes from other processors are seen and gathered. In release consistency model, the action of entering and leaving a critical section are classified as acquire and release and for either case, explicit code should be put in the program showing when to do these operations.|$|E
5000|$|At the <b>program</b> <b>level,</b> a {{business}} architect translates strategic initiatives into delivery-focused change initiatives.|$|R
40|$|Memory {{devices and}} methods for {{operating}} a memory cell are disclosed, {{such as a}} method that uses two <b>program</b> verify <b>levels</b> (e. g., low <b>program</b> verify <b>level</b> and <b>program</b> verify <b>level)</b> to determine how a data line voltage should be increased. A threshold voltage of a memory cell that has been biased with a programming voltage is determined and {{its relationship with the}} two <b>program</b> verify <b>levels</b> is determined. If the threshold voltage is less than the low <b>program</b> verify <b>level,</b> the data line can be biased at a ground voltage (e. g., 0 V) for a subsequent programming pulse. If the threshold voltage is greater than the <b>program</b> verify <b>level,</b> the data line can be biased at an inhibit voltage for a subsequent programming pulse. If the threshold voltage is between the two <b>program</b> verify <b>levels,</b> the data line voltage can be increased for each subsequent programming pulse in which the threshold voltage is between the two <b>program</b> verify <b>levels...</b>|$|R
5000|$|User <b>program</b> <b>level</b> {{components}} that are stand-alone programs and read/write data from files or pipes.|$|R
50|$|Final {{development}} of Astropulse {{has been a}} two-part endeavor. The {{first step was to}} complete the Astropulse C++ core that can successfully identify a target pulse. Upon completion of that program, the team created a trial dataset that contained a hidden pulse, which the completed program successfully found, thus confirming the ability of the Astropulse core to successfully identify target pulses. Since July 2008, research has focused on a series of refinements to the Beta version which are then rolled out to the full universe of SETI participants. At the <b>programming</b> <b>level,</b> developers first seek to assure that new versions are compatible with a variety of platforms, after which the refined version is optimized for greater speed. As of April, 2009, Astropulse is testing Beta version 5.05.|$|E
5000|$|The {{environmental}} subsystems are {{one part}} of the strategy Microsoft developed for making the Windows NT stream of operating systems a hub for multi-platform computing [...] Others include four Hardware Abstraction layers, one for Intel processors, three for RISC processors (DEC Alpha, PowerPC, Mips), and a driver for the HPFS, the standard for OS/2. Since Windows 2000, the FAT32 file system first introduced with Windows 95 has also been present, with HPFS deprecated then being omitted in later systems. [...] A third-party driver for FAT32 can be used on the earlier NT operating systems. Therefore, Windows NT as of version 4.0 had a default of four file systems (NTFS, HPFS, FAT12, and FAT16), and installations of the system with a driver allowing access to a fifth FAT32) are very common, and tools allowing access to Unix file systems are also in existence. Interoperability with Novell Netware is generally implemented at the applications and systems <b>programming</b> <b>level</b> rather than at the kernel and data link layer and therefore further from the physical hardware.|$|E
50|$|Memory {{fragmentation}} is a kernel <b>programming</b> <b>level</b> problem. During real-time computing of applications, fragmentation {{levels can}} reach {{as high as}} 99%, and may lead to system crashes or other instabilities. This type of system crash {{can be difficult to}} avoid, as it is impossible to anticipate the critical rise in levels of memory fragmentation. However, while it may not be possible for a system to continue running all programs in the case of excessive memory fragmentation, a well-designed system should be able to recover from the critical fragmentation condition by moving in memory some memory blocks used by the system itself in order to enable consolidation of free memory into fewer, larger blocks, or, in the worst case, by terminating some programs to free their memory and then defragmenting the resulting sum total of free memory. This will at least avoid a true crash in the sense of system failure and allow the system to continue running some programs, save program data, etc. It is also important to note that fragmentation is a phenomenon of system software design; different software will be susceptible to fragmentation to different degrees, and it is possible to design a system that will never be forced to shut down or kill processes as a result of memory fragmentation.|$|E
5000|$|All graduating {{students}} earning CGPA ≥ 3.8 considering {{results of}} entire <b>program</b> (<b>level</b> 1 to 4) ...|$|R
50|$|Always {{aware of}} the {{inconsistencies}} in the metering of <b>program</b> <b>levels,</b> he realized that to maintain consistent listening levels {{that there must be}} a relationship between the peak and the average content, and that both should be displayed on a common scale. His development of a LED meter displaying both peak and average ballistics with dual reference points is used for audio <b>program</b> <b>level</b> indications throughout the world.|$|R
5000|$|The AN-GYK-12 CPU {{features}} 64 hardware priority <b>program</b> <b>levels,</b> numbered from 0 (highest) to 63 (lowest). One task can run at each level. Level 0 {{is reserved}} for [...] "power off". Level 1 is power-on restart. Level 2 handles hardware and <b>program</b> errors. <b>Level</b> 63 is entered after completion of a boot load. Therefore the system can support a maximum of 60 user tasks. Tasks are scheduled preemptively—a task will run until an error occurs, until it gives up control to another task, or until successful completion of an input/output operation transfers control to the so-called normal <b>program</b> <b>level.</b>|$|R
40|$|Abstract- The {{notion of}} {{associations}} as abstractions over collaborations {{is motivated and}} explored. This kind of association is seen as first class a concept at both modeling and <b>programming</b> <b>level.</b> Associations are seen as concepts/phenomena and possess properties. Properties of associations are characterized. A general event-based information sending and receiving mechanism is investigated {{as an example of}} a concrete form of property at the <b>programming</b> <b>level...</b>|$|E
40|$|Donor {{support for}} {{decentralization}} comes in two main categories: recommendations at the policy level and project {{activities at the}} <b>programming</b> <b>level.</b> At the policy level, donors promote decentralization by recommending greater autonomy for subnational actors. That is, they advocate for reforms that increase the extent (or ‘quantity’) of decentralization. At the <b>programming</b> <b>level,</b> donors implement projects intended to improve the capacity and accountability (or ‘quality’) of decentralized governance. This paper’s argument is twofold. First, donors have had modest impacts on the quantity of decentralization where they have engaged in policy reform because the variables that shape the extent of decentralization …...|$|E
40|$|The {{notion of}} {{associations}} {{is motivated and}} presented. This kind of association is seen as first class a concept in notations at both modeling and <b>programming</b> <b>level.</b> Among others the association support evolution of systems by adding descriptions and instantiations of associations to executing systems...|$|E
40|$|With {{the growing}} focus on {{assessment}} and accountability, programs at many universities are now expected to define learning {{goals and objectives}} at the <b>program</b> <b>level</b> (as opposed to the course level) and to devise strategies for assessing whether these goals and objectives are being met. This paper {{will look at the}} role of assessment at the <b>program</b> <b>level</b> and how the resulting information about student learning {{can be used to make}} informed decisions about curriculum...|$|R
3000|$|Solution architecture, {{as a part}} of {{enterprise}} architecture, guides the projects at <b>program</b> <b>levels</b> and project levels in GDAD (AEA 5) [...]...|$|R
50|$|After School <b>Program</b> (<b>Levels</b> 1-3), for {{students}} between 10 and 13 years of age. Classes take place after school hours and on Saturdays.|$|R
40|$|Aspect-orientation {{provides}} {{a new way}} of modularization by clearly separating crosscutting concerns from non-crosscutting ones. Although originally emerged at the <b>programming</b> <b>level,</b> aspect-orientation meanwhile stretches also over other development phases. Not only due to the rise of model-driven engineering, some approaches already exist for dealing with aspect-orientation at the modeling level. Nevertheless, concepts from the <b>programming</b> <b>level</b> are often simply reused without proper adaptation. Consequently, such approaches fall short in considering the full spectrum of modeling concepts. This paper takes a first step towards a consolidated and more comprehensive view on aspect-orientation by discussing a common reference architecture for aspect-oriented modeling. This reference architecture identifies the basic ingredients of aspect-orientation which in turn are abstracted from specific aspect-oriented programming languages and modeling approaches...|$|E
40|$|International audienceA Web service always evolves {{during its}} {{lifecycle}} through continuously publishing new versions. Web service evolution is theoretically modeled {{in the community}} to help Web service stakeholders trigger and react to Web service evolution in a better way. From a technical perspective, the tasks in Web service evolution such as design, detection, execution, and adaptation to the Web service changes are undertaken by Web service developers. Unfortunately, few of the works, especially tools and methodologies, were specially taken to help the developers deal with dynamic evolutionary changes at <b>programming</b> <b>level.</b> In this article, we propose a framework based on our previous change-centric model to facilitate the developers to treat with Web service evolution. The framework supports the developers to execute, detect, and react to Web service changes at <b>programming</b> <b>level...</b>|$|E
30|$|Software {{systems are}} {{becoming}} increasingly complex as customers demand richer functionality be delivered in shorter timescales (Clark et al. 2004). In this context, Model-Driven Development (MDD) {{can be used to}} speed up the software development and to manage its complexity in a better way by shifting the focus from the <b>programming</b> <b>level</b> to the solution-space.|$|E
40|$|We {{analyzed}} floating-gate upsets in 25 -nm multilevel cell NAND Flash memories irradiated {{with heavy}} ions, including alpha particles. Compared to multilevel cell memories of previous generations, these devices show no apparent error {{dependence on the}} <b>program</b> <b>level,</b> adherence to the cosine law, {{and a large number}} of multiple cell upsets (MCUs). Floating-gate errors were mapped to their physical location, and MCUs were studied as a function of their multiplicity, direction, particle linear energy transfer, irradiation angle, and <b>program</b> <b>level...</b>|$|R
50|$|Each task {{also has}} a {{privilege}} level, which controls the operations it is allowed to perform. Level '00'b is used for non-privileged <b>programs.</b> <b>Level</b> '01'b <b>programs</b> are semi-privileged. <b>Level</b> '10'b <b>programs</b> are privileged and can execute all instructions and I/O operations. Level '11'b is unused.|$|R
5000|$|... (Sec. 729) Authorizes the Secretary to {{increase}} by up to 25% the <b>program</b> <b>level</b> for certain loans and loan guarantees {{that do not require}} budget authority.|$|R
40|$|A neurogenic {{disorder}} {{of the association}} or conceptual <b>programming</b> <b>level</b> of motor function, occurring without paralysis of the muscles it affects, affecting planning and programming of volitional,sequential acts (W. Culbertson, 1999) 3 Apraxia of Speech zDisturbed motor planning directly due to impairment of motor asociation systems, manifested in disturbances in initiation,transitionalization, repertoire, and selection of articulatory gestures/movements. (Kent, 1976...|$|E
40|$|It {{is shown}} how the {{performance}} of Zeilberger’s algorithm and its q-version for proving (q-) hypergeometric summation identities can be dramatically improved by a frequently missed optimization on the <b>programming</b> <b>level</b> and by applying certain kinds of substitutions to the summand. These methods lead to computer proofs of identities for which all existing programs have failed so far...|$|E
40|$|International audienceThe Foc project aims at supporting, {{within a}} {{coherent}} software system, {{the entire process}} of mathematical computation, starting with proved theories, ending with certified implementations of algorithms. In this paper, we explain our design requirements for the implementation, using polynomials as a running example. Indeed, proving correctness of implementations depends heavily on the way this design allows mathematical properties to be truly handled at the <b>programming</b> <b>level...</b>|$|E
50|$|Set up in 2000, the International College of Business and Technology (ICBT) {{is one of}} {{the leading}} {{tertiary}} education providers in Sri Lanka. Popularly known as ICBT Campus, it delivers Certificate, Diplomas, pre University programs, Undergraduate <b>programs,</b> Masters <b>level</b> <b>programs</b> including Doctorate <b>level</b> <b>programs</b> in association with some of the best Universities and educational service providers in UK, Australia, Thailand, India and Sweden.|$|R
40|$|We {{introduce}} metaprogramming facilities {{into the}} Oberon V 4 system. Metaprogramming {{means that a}} module can access the structure of other modules (i. e., procedures, types, run-time data) at run time. We discuss how type safety can be enforced in an environment with strong typing. Finally we show how metaprogramming {{can be used to}} implement an easy-to-use database interface and conclude with a comparison with other metaprogramming systems for statically-typed programming languages. 1 Introduction In programs we distinguish between the data <b>level</b> and the <b>program</b> <b>level.</b> Variables are at the data level and can be accessed by the statements of a program. Modules, types and procedures are at the <b>program</b> <b>level.</b> They serve to structure a program but they are usually not viewed as data. Sometimes, however, programs want to inspect the components of other programs at the <b>program</b> <b>level,</b> for example, in order to answer the following questions: 1. What are the field names of a record type T decla [...] ...|$|R
40|$|The {{following}} essay {{lays out}} {{an argument for}} <b>program</b> <b>level</b> accreditation in academic homeland security (HS) programs. Admittedly, neither the practice nor the educational components of the HS discipline are standardized. Indeed, a recent analysis by the Congressional Research Service indicates that there remain several operational definitions of HS in practice. Regardless, this paper provides rationale which argues that after roughly eight years, academic HS has developed {{enough to be able}} to identify and support a distinct set of student learning outcomes— knowledge, skills and attitudes—that can both characterize and define the discipline. Generally, <b>program</b> <b>level</b> academic accreditation requires a discipline to have identified and vetted a set of student learning outcomes. Academic programs, in turn, integrate this set of outcomes into their core curriculum and students of a given discipline acquire a common set of knowledge, skills and attitudes deemed central to their discipline regardless of where they are educated. Hence <b>program</b> <b>level</b> accreditation works proactively and continuously to address questions abou...|$|R
