10|3276|Public
40|$|A {{study of}} {{computer}} engineering tool integration using the <b>Portable</b> <b>Common</b> <b>Tool</b> Environment (PCTE) Public Interface Standard is presented. Over a 10 -week time frame, three existing software products were encapsulated {{to work in}} the Emeraude environment, an implementation of the PCTE version 1. 5 standard. The software products used were a computer-aided software engineering (CASE) design tool, a software reuse tool, and a computer architecture design and analysis tool. The tool set was then demonstrated to work in a coordinated design process in the Emeraude environment. The project and the features of PCTE used are described, experience with the use of Emeraude environment over the project time frame is summarized, and several related areas for future research are summarized...|$|E
40|$|Investigations on object {{management}} for software development environments {{have shown that}} object-orientation is a promising way to overcome the problems of highly integrated software development environments. In this paper we present an object-oriented extension to the well-known and internationally standardized PCTE (<b>Portable</b> <b>Common</b> <b>Tool</b> Environment) object management system (OMS). This way the current PCTE OMS, which belongs to the class of structurally object-oriented database systems, is enhanced to adopt a fully object-oriented data model. Our approach is focused on modelling behavior of objects and providing high-level types for supporting fine grained objects. We also investigate the {{solutions to the problems}} that result from the special characteristics of PCTE and discuss the mappings from the high-level types to the PCTE data model. (orig.) Available from TIB Hannover: RR 9963 (11) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekSIGLEDEGerman...|$|E
40|$|PCTE, <b>Portable</b> <b>Common</b> <b>Tool</b> Environment, is an {{interface}} standard. The interface {{is designed}} to support program portability Specification (Standard ECMA- 149), are designed particularly to provide an infrastructure for programs which {{may be part of}} environments supporting systems engineering projects. Such programs, which are used as aids to systems development, are often referred to as tools. CDIF, CASE Data Interchange Format, is a standard of the Electronic Industries Association. CDIF was defined primarily as a standard for exchanging models between CASE tools. Since it is necessary for parties that exchange models to have a common understanding of them, CDIF is not just a standard for a transfer format, but also for an integrated meta-model (schema) of the data and process models that can be exchanged. This harmonises the concepts of different methods and viewpoints, making CDIF independent of particular methods and tools...|$|E
40|$|The NATO Special Working Group on Ada Programming Support Environments {{established}} the PCIS (<b>Portable</b> <b>Common</b> Interface Set) Programme {{to identify a}} software engineering environment framework. The PCIS framework responds {{to the requirements of}} IRAC (International Requirements and Design Criteria), and is based on PCTE as well as other available standards. This document defines the PCIS framework service areas. The document presents concepts and rationale for each area, and it includes initial design material. Keywords: Software Engineering Framework, PCTE, Object-Orientation, FineGrained Information, Life-Cycle Process, Tool Coordination. - NATO Unclassified - PCIS FRAMEWORK DEFINITION AND RATIONALE - NATO Unclassified - - NATO Unclassified - - NATO Unclassified - Forward Foreword The <b>Portable</b> <b>Common</b> Interface Set Programme was conducted under the NATO Special Working Group (SWG) on Ada Programming Support Environments (APSE), Tri-Service Group on Communications and Electronics [...] . ...|$|R
50|$|CommonLoops was the {{successor}} of LOOPS (from Xerox Interlisp-D). CommonLoops was implemented for <b>Common</b> Lisp. A <b>portable</b> implementation called Portable CommonLoops (PCL) {{was the first}} implementation of CLOS. PCL is widely ported and still provides the base for the CLOS implementation of several Common Lisp implementations. PCL is implemented mostly in <b>portable</b> <b>Common</b> Lisp {{with only a few}} system dependent parts.|$|R
5000|$|The most <b>common</b> <b>tools</b> (found on most {{operating}} systems) include: ...|$|R
40|$|The {{integration}} of a legacy {{system and a}} standard Object Management System (OMS) is often a very challenging task. This paper details a case study, our experiment in interfacing Oz with the PCTE (<b>Portable</b> <b>Common</b> <b>Tool</b> Environment) Object Management System. Oz is a multiuser process-centered software development environment that has been under development in our lab since 1987, originally under the name Marvel. PCTE is a specification that defines a language-independent interface providing support mechanisms for software engineering environments (SEE). One of the premises of PCTE is that, in theory, an SEE such as Oz can be built (or extended) using the services provided by PCTE. The purpose of our experiment was to study how a legacy system such as Oz can be integrated into a new environment framework, e. g., PCTE. The architecture of the legacy system and the services of the framework are the key factors in the integration approach. Because Oz historically has included a native OMS, our [...] ...|$|E
40|$|The {{standard}} for the architecture of an Information Resource Dictionary System (IRDS), proposed by the ANSI X 3 H 2 and the ISO/IEC/JTCI/SC 21 /WG 3 is in process of being developed. After a first phase of common work the two proposals have developed towards different directions. In this article a project, currently under development, is presented, which implements an IRDS prototype {{as an example of}} centralized management of information required for both/either software development documentation and software design. In order to allow for the interchange and/or sharing of information between different standard software, a prototype was implemented based on OMS (Object Management System), the PCTE's (<b>Portable</b> <b>Common</b> <b>Tool</b> Environment) database management system which has been defined as a goal of the EEC's ESPRIT project. A parallel prototype based on SQL, the standard database query language for relational data model, was realized to better evaluate the OMS implementation by comparison. On the ground of this experience some preliminary considerations on the different IRDS standard proposals and implementation types are drawn...|$|E
40|$|The {{relationship}} between the <b>Portable</b> <b>Common</b> <b>Tool</b> Environment (PCTE) and the Object Management Group’s Object Management Architecture (OMA) including the Common Object Request Broker Architecture (CORBA) specification {{can be viewed as}} a complementary one. The PCTE specification addresses the area of large to medium grain data integration for distributed Computer Aided Software Engineering environments. OMA is a set of specifications designed to promote interoperability between independently developed applications across distributed possibly heterogeneous environments based on the object oriented paradigm. CORBA is the communications heart of OMA. implicitly defining "distributed and secure execution and interprocess communication services". The current PCTE standard is largely object oriented. However it is not fully object oriented because it does not define behaviour for PCTE objects. By using OMA to provide object behaviour for PCTE objects as well as making them fully object oriented greater control integration between PCTE objects could also be achieved. PCTE’s Object Management System has a rich data modelling mechanism because it was designed to integrate complex data and relationships, therefore being suitable for use as a persistent store for OMA objects. Thu. s the convergence of PCTE and OMA into a single standard is attractive; work is currently underway on this by the OMG PCTE Special Interest Group. However it will be sometime before a specification converging PCTE and CORBA is available. The purpose of this thesis is to find an interim integration strategy which can be used while waiting for their eventual convergence, since both specifications have much to offer each other. This thesis discusses the language mapping of DDL to DDL (and vice versa) and the definition of IDL interfaces for PCTE tools as strategies for the interim integration of PCTE and CORBA...|$|E
50|$|Other <b>common</b> <b>tools</b> include stamp catalogues, stamp stock {{books and}} stamp hinges.|$|R
5000|$|... #Caption: Wireshark, a <b>common</b> <b>tool</b> used {{to monitor}} and record network traffic ...|$|R
5000|$|... #Caption: An {{aerosol paint}} can, a <b>common</b> <b>tool</b> used in modern {{graffiti}} ...|$|R
40|$|This paper details a case study, our {{experiment}} interfacing between Oz and a PCTE (<b>Portable</b> <b>Common</b> <b>Tool</b> Environment) Object Management System. Oz is a multi-user process-centered {{software development}} environment {{that has been}} under development in our lab since 1987, originally under the name Marvel. PCTE is a specification that defines a language-independent interface providing support mechanisms for software engineering environments (SEE). One of the premises of PCTE is that, in theory, an SEE such as Oz can be built (or extended) using the services provided by PCTE. The purpose of our experiment was to study how a legacy system such as Oz can be integrated into a new environment framework, e. g., PCTE. The architecture of the legacy system and the services of the framework are the key factors in the integration approach. Because Oz historically has included a native OMS, our experiment focused on modifying Oz to use the PCTE OMS, which has an open and standard API. This paper describes how several Oz components were changed to interface to the PCTE OMS. The resulting proof-ofconcept hybrid system has process control and integration services provided by Oz, and data integration services provided in part by PCTE. We discuss in depth the solutions to the concurrency control problems that arise in such an environment, where Oz and PCTE use different approaches to transaction management (i. e., {{each has its own}} transaction manager). The PCTE implementation used in our *This paper is based on work sponsored in part by Advanced Research Project Agency under ARPA Order B 128 monitored by Air Force Rome Lab F 30602 - 94 -C- 0197, in part by National Science Foundation CCR- 9301092, and in part by the New York State Science and Technology Foundation Center for Advanced Technology in Hig [...] ...|$|E
40|$|The {{whole area}} of {{software}} engineering environments is an emerging one. Such environments have become necessary {{due to the}} rapid changes which {{have occurred in the}} software industry in the last twenty years. The desire is to produce products of high quality and at a reasonable cost. Unfortunately history shows that, in general, software systems rarely met the specific need for which they were developed and were often unreliable, inefficient, poorly documented and required considerable maintenance. One of the main areas of research into increasing both the productivity and the quality of software has been the use of software engineering environments. The area of software engineering environments is a changing one with evolving definitions. What can be stated is that a key objective of software engineering environments is the support of software process from requirements definition through to system maintenance. Such support can only be provided through the development of integrated sets of tools each supporting various aspects of the software development process. In order for tools to be fully integrated and have the same ’look and feel’ it is necessary that they are developed on a common platform, providing all the facilities needed for tool development and integration. Such a platform is the Eclipse tool builder’s kit based on the <b>Portable</b> <b>Common</b> <b>Tool</b> Environment (PCTE). The work in this thesis was based on an evaluation of this development platform for developing and integrating software tools, particularly real-time telecommunications software tools. The work in this thesis was carried out as part of the European Community’s RACE programme. The project was called SPECS 1. The SPECS project is outlined in chapter one of this thesis along with a brief history of the research into software engineering environments to date. The work which I was responsible for involved both the integration of existing toolsets and tools, developed by other partners in the SPECS project, as well as the development of new "native" tools within Eclipse/PCTE. This work was necessary so that the SPECS project could produce an integrated set of tools {{at the end of its}} research. It was my job to evaluate the potential of Eclipse/PCTE as a basis for this integration...|$|E
40|$|Business Process Re-Engineering is a challenging, complex task {{requiring}} a carefully orchestrated environment of visionary leadership, skillful management and facilitation techniques which {{are supported by}} powerful enabling technologies. Taken together, these constitute a Business Process Re-Engineering Environment (BPRE). This dissertation explores {{a case of the}} development of a standards-based prototype repository (Pro Rep) to support a Business Process Reengineering Environment (BPRE). It is a case study of the part standards-based repository technologies play In the on-going evolution of a BPRE at the University of Arizona. Standards-based repositories are juxtaposed to proprietary technologies or other defacto repository paradigms such as Object Oriented Data Bases (OODBs) and Relational Data Base Management Systems (RDBMSs). Repositories are the integration framework which supports various BPRE tools used in a Business Process Reengineering methodology which is evolving in parallel at the University. The research approach is an amalgam of case study and systems development research methodologies. Data sources for the case study are the Pro Rep development, questionnaires and interviews from key informants in the repository community. The questionnaires and interview data help explain the technical and business context for ProRep. These three data sources are analyzed to help answer the research question, "how do standards-based repository frameworks support the creation, function, and maintenance of Business Process Re-Engineering Environments (BPREs) ?" The two repository standards explored during this case are the Information Resources Dictionary (lRDS) and the <b>Portable</b> <b>Common</b> <b>Tool</b> Environment (PCTE). The former is the U. S. Federal Information Processing Standard (FIPS) 156 while the later is an International Standards Organization (ISO) 13719. Repository-based integration represents only one approach to integration. It assumes {{that there will be a}} central concern for data sharing and compatibility among tools and users. There is very little published on the business implications of standards-based repository technologies compared to other integration technologies. Even the term "repository" has become a confusing and overloaded term in MIS. This case study shows how a PCTE-based model repository offers some unique advantages over proprietary and other defacto repository standards. Because of its unique architecture, PCTE provides tool messaging features, data integration, and security features that rival technologies are not designed to address. While cost and complexity are the potential downside of PCTE, the robustness and completeness of its approach make it the most full-featured of repository technologies currently available. Its value and success will be largely dependent on the support and diffusion that the technology experiences within the CASE and Business Process Re-Engineering Community...|$|E
5000|$|Clinometer - <b>common</b> <b>tool</b> used {{to measure}} changes in {{elevation}} and tree height ...|$|R
5000|$|... #Caption: Mohr's circle, a <b>common</b> <b>tool</b> {{to study}} {{stresses}} in a mechanical element ...|$|R
50|$|A 'Picaroon' was a <b>common</b> <b>tool</b> used in {{the logging}} {{industry}} in New Brunswick.|$|R
40|$|Resumo: Grande número de ferramentas CASE (Computer-Aided Software Engineering) tem chegado ao mercado. Em geral, essas ferramentas são projetadas para trabalhar de forma isolada, bem como não suportam todas as fases do processo de {{software}}. Entretanto, ambientes de engenharia de software abertos oferecem facilidades para que ferramentas possam ser utilizadas de forma integrada e cooperativa. Para integrar ferramentas em um ambiente de engenharia de software aberto, é necessário analisar as dimensões principais de integração: apresentação, controle e dados, tanto do ponto de vista da ferramenta quanto da interface pública de ferramentas utilizada como base do ambiente. Este trabalho tem como objetivo a integração da ferramenta de teste POKETOOL (Potential Uses Criteria Tool for Programing Testing) em um ambiente de engenharia de software baseado em PCTE (<b>Portable</b> <b>Common</b> <b>Tool</b> Environment). A integração dos dados da POKE-TOOL foi orientada pelo método proposto por Bremeau para projeto de esquemas de dados compartilháveis, baseado nos tipos e nas estruturas de gerenciamento de objetos do PCTE. Uma análise da POKE-TOOL foi realizada para explicitação de seus dados, relacionamentos e processos. Através dessa análise, foram obtidos: um diagrama genérico das atividades do processo de teste mais o diagrama entidade-relacionamento, o diagrama de fluxo de dados e o diagrama de estados da POKE-TOOL. [...] . Observação: O resumo, na íntegra, poderá ser visualizado no texto completo da tese digitalAbstract: A {{great number}} of CASE tools is reaching the market. These tools are usually designed to work isolatedly, in which case they do not support all the phases of the software process. Open software engineering environments provide such facilities that tools {{can be used in}} an integrated and cooperative way. In order to integrate a tool into an open software engineering environment, it is necessary to analyse the integration dimensions: presentation, control and data, both {{from the point of view}} of the tool and of the public interface used as the basis of the environment. This work aims at integrating a tool for software testing, called POKE-TOOL, into a software engineering environment based on the PCTE standard. The data integration of the POKE-TOOL followed the method proposed by Bremeau for the design of sharable data schemas based on the types and structures of the object management system of PCTE. An analysis of the POKE-TOOL was carried out to elicit its data, relationships and processes. The analysis resulted in: a generic diagram representing the activities of the testing process and the entity-relationship diagram, the data flow diagram and state diagram of the POKE-TOOL. Based on these diagrams, on the object management system of PCTE and on the need to achieve an efficient data sharing (medium granularity), the data of the POKETOOL were mapped to SDSs, which are the main structures for the integration of tools into environments based on PCTE. [...] . Note: The complete abstract is available with the full electronic digital thesis or dissertation...|$|E
50|$|In France {{there is}} now four CRNH having <b>common</b> <b>tools</b> and {{complementary}} scientific skills.|$|R
50|$|IGRhCellID is a {{database}} of cell lines using some <b>common</b> <b>tools</b> to reduce cell lines misidentification.|$|R
5000|$|Graphical models: {{for each}} partner, {{there is a}} graph that {{represents}} the dependencies between different items. In the cardinal approach, a <b>common</b> <b>tool</b> is the GAI net (Generalized Additive Independence). In the ordinal approach, a <b>common</b> <b>tool</b> is the CP net (Conditional Preferences) and its extensions: TCP net, UCP net, CP theory, CI net (Conditional Importance) and SCI net (a simplification of CI net).|$|R
50|$|Non-photo blue (or non-repro blue) is a <b>common</b> <b>tool</b> used in {{the graphic}} design and print industry.|$|R
50|$|FRET and BRET {{are also}} the <b>common</b> <b>tools</b> {{in the study of}} {{biochemical}} reaction kinetics and molecular motors.|$|R
50|$|<b>Common</b> <b>tools</b> {{used in the}} {{probabilistic}} method include Markov's inequality, the Chernoff bound, and the Lovász local lemma.|$|R
40|$|We {{examine the}} use of read-time feature conditionals, with {{particular}} emphasis on writing <b>portable</b> <b>Common</b> Lisp code which aspires to both forwards- and backwards-compatibility. We examine cases from real libraries which demonstrate the various pitfalls, and propose a scheme for robust treatment of implementation-specific functionality by performing pro-grammatic tests at the appropriate time. We discuss the additional difficulties in dealing with differences in the operating environment, and suggest that agreements between Lisp distributors would alleviate these difficulties. ...|$|R
30|$|We {{start with}} some propositions which are <b>common</b> <b>tools</b> for proving the main {{results in the}} next two subsections.|$|R
5000|$|... #Caption: A Halligan {{tool and}} an axe, both <b>common</b> <b>tools</b> used by firefighters to breach doors {{to fight a}} fire ...|$|R
2500|$|The {{two most}} <b>common</b> <b>tools</b> are Decision Tree Analysis (DTA) and Real options {{valuation}} (ROV); they may often be used interchangeably: ...|$|R
5000|$|... #Caption: An example {{histogram}} of {{the heights}} of 31 Black Cherry trees. Histograms are a <b>common</b> <b>tool</b> used to represent data.|$|R
5000|$|The {{two most}} <b>common</b> <b>tools</b> are Decision Tree Analysis (DTA) and Real options {{valuation}} (ROV); they may often be used interchangeably: ...|$|R
50|$|The most <b>common</b> <b>tool</b> of that Court is the Extraordinary Appeal (Recurso Extraordinário), granted when judgements {{of second}} {{instance}} courts violate the Constitution.|$|R
5000|$|Beacons are a <b>common</b> <b>tool</b> {{used when}} {{creating}} a smart and connected system. Connecthings utilizes {{three types of}} ICT standards for its beacons: ...|$|R
5000|$|Managing {{nutrient}} concentrations and pH values within acceptable ranges {{is essential}} for successful hydroponic horticulture. <b>Common</b> <b>tools</b> used to manage hydroponic solutions include: ...|$|R
50|$|Caboose #0540 {{was built}} in 1881 and is a mini-warehouse, {{carrying}} the most <b>common</b> <b>tools</b> and supplies. It is used by Maintenance of Way.|$|R
50|$|The design {{philosophy}} encourages {{low cost}} development and assembly by hobbyist amateurs using <b>common</b> <b>tools</b> such as 25 watt soldering iron, multimeter, logic probe (optional), and <b>common</b> hand <b>tools.</b> An oscilloscope is recommended but not required. Some basic electronic skills are helpful although the {{printed circuit boards}} are designed for relative beginners.|$|R
