2297|998|Public
5|$|Encrypting {{ransomware}} reappeared in September 2013 with a Trojan {{known as}} CryptoLocker, which generated a 2048-bit RSA key pair and uploaded {{in turn to}} a command-and-control server, and used to encrypt files using a whitelist of specific file extensions. The malware threatened to delete the <b>private</b> <b>key</b> if a payment of Bitcoin or a pre-paid cash voucher was not made within 3 days of the infection. Due to the extremely large key size it uses, analysts and those affected by the Trojan considered CryptoLocker extremely difficult to repair. Even after the deadline passed, the <b>private</b> <b>key</b> could still be obtained using an online tool, but the price would increase to 10 BTC—which cost approximately US$2300 as of November 2013.|$|E
5|$|The {{symmetric}} key is randomly generated {{and will not}} assist other victims. At no point is the attacker's <b>private</b> <b>key</b> exposed to victims and the victim need only send a very small ciphertext (the encrypted symmetric-cipher key) to the attacker.|$|E
5|$|An {{attacker}} having gained authentication material may impersonate the material's owner {{after the}} victim has patched Heartbleed, {{as long as}} the material is accepted (for example, until the password is changed or the <b>private</b> <b>key</b> revoked). Heartbleed therefore constitutes a critical threat to confidentiality. However, an attacker impersonating a victim may also alter data. Indirectly, Heartbleed's consequences may thus go far beyond a confidentiality breach for many systems.|$|E
5000|$|<b>Private</b> static <b>key</b> {{agreement}} key: <b>Private</b> static <b>key</b> agreement <b>keys</b> are the <b>private</b> <b>keys</b> of {{asymmetric key}} pairs {{that are used}} to establish keys (e.g., key wrapping keys, data encryption keys, or MAC keys) and, optionally, other keying material (e.g., Initialization Vectors).|$|R
5000|$|Private {{signature}} key: <b>Private</b> signature <b>keys</b> are the <b>private</b> <b>keys</b> of asymmetric (public) key pairs {{that are}} used by public key algorithms to generate digital signatures with possible long-term implications. When properly handled, <b>private</b> signature <b>keys</b> {{can be used to}} provide authentication, integrity and non-repudiation.|$|R
40|$|We {{propose a}} simple {{server-based}} electronic signature {{system in which}} {{a small number of}} common <b>private</b> <b>keys</b> are used. The motivation of such a system is to escape the scalability and complexity problems that arise if a large-scale Public Key Infrastructure (PKI) is used. We argue that the assumption of personal <b>private</b> <b>keys</b> is the main reason for those problems and high cost of electronic signature systems. We conclude that elimination of personal <b>private</b> <b>keys</b> is justified and further argue that this does not reduce the security...|$|R
5|$|Encrypting {{ransomware}} {{returned to}} prominence in late 2013 with {{the propagation of}} CryptoLocker—using the Bitcoin digital currency platform to collect ransom money. In December 2013, ZDNet estimated based on Bitcoin transaction information that between 15 October and 18 December, the operators of CryptoLocker had procured about US$27 million from infected users. The CryptoLocker technique was widely copied in the months following, including CryptoLocker 2.0 (though not {{to be related to}} CryptoLocker), CryptoDefense (which initially contained a major design flaw that stored the <b>private</b> <b>key</b> on the infected system in a user-retrievable location, due to its use of Windows' built-in encryption APIs), and the August 2014 discovery of a Trojan specifically targeting network-attached storage devices produced by Synology. In January 2015, it was reported that ransomware-styled attacks have occurred against individual websites via hacking, and through ransomware designed to target Linux-based web servers.|$|E
25|$|A <b>private</b> <b>key</b> {{can also}} be used by the creator of the {{assembly}} for strong naming. The public key token identifies which <b>private</b> <b>key</b> an assembly is signed with. Only the creator of the key pair (typically the person signing the assembly) can sign assemblies that have the same strong name as a prior version assembly, since the creator possesses the <b>private</b> <b>key.</b> Strong naming is required to add assemblies to Global Assembly Cache.|$|E
25|$|The client sends a CertificateVerify message, {{which is}} a {{signature}} over the previous handshake messages using the client's certificate's <b>private</b> <b>key.</b> This signature can be verified by using the client's certificate's public key. This lets the server know that the client {{has access to the}} <b>private</b> <b>key</b> of the certificate and thus owns the certificate.|$|E
5000|$|... #Subtitle level 3: Predictable <b>private</b> <b>keys</b> (Debian-specific) ...|$|R
50|$|<b>Private</b> ephemeral <b>key</b> {{agreement}} key: <b>Private</b> ephemeral <b>key</b> agreement <b>keys</b> are the <b>private</b> <b>keys</b> of {{asymmetric key}} pairs {{that are used}} only once to establish one or more keys (e.g., key wrapping keys, data encryption keys, or MAC keys) and, optionally, other keying material (e.g., Initialization Vectors).|$|R
30|$|Create the {{asymmetric}} <b>keys</b> (public and <b>private</b> <b>keys).</b>|$|R
25|$|In Windows 2000, XP or later, the user's RSA <b>private</b> <b>key</b> is {{encrypted}} using a hash of the user's NTLM password hash {{plus the}} user name – {{use of a}} salted hash makes it extremely difficult to reverse the process and recover the <b>private</b> <b>key</b> without knowing the user's passphrase. Also, again, setting Syskey to mode 2 or 3 (Syskey typed in during bootup or stored on a floppy disk) will mitigate this attack, since the local user's password hash will be stored encrypted in the SAM file.|$|E
25|$|Starting with Windows Vista, a user's <b>private</b> <b>key</b> can {{be stored}} on a smart card; Data Recovery Agent (DRA) keys can also be stored on a smart card.|$|E
25|$|The Wiener's attack, {{named after}} {{cryptologist}} Michael J. Wiener, {{is a type}} of cryptographic attack against RSA. The attack uses the continued fraction method to expose the <b>private</b> <b>key</b> d when d is small.|$|E
50|$|Notice {{that all}} of the {{operations}} involving the sender's <b>private</b> <b>keys</b> s and t are performed by the sender, and all of the operations involving the receiver's <b>private</b> <b>keys</b> r and q are performed by the receiver, so that neither party needs to know the other party's keys.|$|R
40|$|In {{this paper}} we propose two public-key BE schemes that have {{efficient}} complexity measures. The first scheme, called the BE-PI scheme, has O(r) header size, O(1) public keys and O(log N) <b>private</b> <b>keys,</b> where r {{is the number of}} revoked users. This is the first public-key BE scheme that has both public and <b>private</b> <b>keys</b> under O(log N) while the header size is O(r). These complexity measures of the header size and <b>private</b> <b>keys</b> also match those of efficient secret-key broadcast encryption schemes. Our second scheme, called the PK-SD-PI scheme, has O(r) header size, O(1) public key and O(log 2 N) <b>private</b> <b>keys.</b> They are the same as those of the SD scheme. Nevertheless, the decryption time is remarkably O(1). This is the first public-key BE scheme that has O(1) decryption time while other complexity measures are kept low. The PK-LSD-PI scheme can be constructed in the same way. It has O(r/ǫ) ciphertext size and O(log 1 +ǫ N) <b>private</b> <b>keys,</b> where 0 < ǫ < 1. The decryption time is also O(1). Our basic schemes are one-way secure against full collusion of revoked users. With a slight modification, we make both schemes indistinguishably secure against the adaptive chosen ciphertext attack. The BE-PI scheme has the capability of tracing traitors. It is able to find out what <b>private</b> <b>keys</b> are used in a confiscated decoding box...|$|R
2500|$|DPAPI Master Key: used to decrypt the user's RSA <b>private</b> <b>key(s)</b> ...|$|R
25|$|If EFS is {{configured}} to use keys {{issued by}} a Public Key Infrastructure and the PKI is configured to enable Key Archival and Recovery, encrypted files can be recovered by recovering the <b>private</b> <b>key</b> first.|$|E
25|$|PGP {{versions}} {{have always}} included {{a way to}} cancel ('revoke') identity certificates. A lost or compromised <b>private</b> <b>key</b> will require this if communication security is to be retained by that user. This is, more or less, equivalent to the certificate revocation lists of centralised PKI schemes. Recent PGP versions have also supported certificate expiration dates.|$|E
25|$|In public-key cryptosystems, {{the public}} key may be freely distributed, while its paired <b>private</b> <b>key</b> must remain secret. In a public-key {{encryption}} system, the public key {{is used for}} encryption, while the private or secret key is used for decryption. While Diffie and Hellman could not find such a system, they showed that public-key cryptography was indeed possible by presenting the Diffie–Hellman key exchange protocol, a solution that is now widely used in secure communications to allow two parties to secretly agree on a shared encryption key.|$|E
5000|$|...p12 - PKCS#12, {{may contain}} certificate(s) (public) and <b>private</b> <b>keys</b> (password protected) ...|$|R
5000|$|To decode the ciphertext, the <b>private</b> <b>keys</b> are necessary. The process follows: ...|$|R
5000|$|PKCS #8. RSA {{standard}} that governs the storage and encryption of <b>private</b> <b>keys.</b>|$|R
25|$|In February 2008, the Dutch {{government}} {{issued a}} {{warning about the}} security of access keys based on the ubiquitous MiFare Classic RFID chip (the same chip used in the SmartRider system) after some students from The University of Virginia demonstrated a theoretical attack which could retrieve the <b>private</b> <b>key</b> from the card within minutes on a standard desktop pc. It {{has been estimated that}} the security of the cards will hold up until early 2010 before it becomes a trivial matter to exploit the inherent security vulnerabilities of the RFID based card system.|$|E
25|$|PGP {{can be used}} to send {{messages}} confidentially. For this, PGP combines symmetric-key encryption and public-key encryption. The message is encrypted using a symmetric encryption algorithm, which requires a symmetric key. Each symmetric key is used only once and is also called a session key. The message and its session key are sent to the receiver. The session key must be sent to the receiver so they know how to decrypt the message, but to protect it during transmission it is encrypted with the receiver's public key. Only the <b>private</b> <b>key</b> belonging to the receiver can decrypt the session key.|$|E
25|$|PGP {{supports}} {{message authentication}} and integrity checking. The latter {{is used to}} detect whether a message has been altered since it was completed (the message integrity property) and the former {{to determine whether it}} was actually sent by the person or entity claimed to be the sender (a digital signature). Because the content is encrypted, any changes in the message will result in failure of the decryption with the appropriate key. The sender uses PGP to create a digital signature for the message with either the RSA or DSA algorithms. To do so, PGP computes a hash (also called a message digest) from the plaintext and then creates the digital signature from that hash using the sender's <b>private</b> <b>key.</b>|$|E
30|$|As a result, an {{administrator}} knows {{the information about}} the <b>private</b> <b>keys</b> of an observation system in Identity Based Encryption system, and the validating procedure for the public keys is not required. Therefore, in an emergency situation, replacing the <b>private</b> <b>keys</b> or restoring the system, it does not require the validating procedure, thus making the creating of new <b>private</b> <b>keys</b> in the key management center and restoration of the system parameter by transmitting to safe channel easier. Likewise, it is possible to construct the system reinforcing the security with the application of an Identity Based Encryption for transmitting the observed data in a metrological observation environment.|$|R
40|$|We model a <b>private</b> <b>key's</b> {{life cycle}} as a finite state machine. The states are the key's phases {{of life and}} the {{transition}} functions describe tasks to be done with the key. Based on this we define and describe the key authority, a trust center module, which potentiates the easy enforcement of secure management of <b>private</b> <b>keys</b> in hierarchical public key infrastructures. This is done by assembling all trust center tasks concerning the crucial handling of <b>private</b> <b>keys</b> within one centralized module. As this module resides under full control of the trust center's carrier it can easily be protected by well-known organizational and technical measures...|$|R
2500|$|Support {{for storing}} (user or DRA) RSA <b>private</b> <b>keys</b> on a PC/SC smart card ...|$|R
25|$|When {{the user}} encrypts files {{after the first}} stage of such an attack, the FEKs are {{automatically}} encrypted with the designated DRA's public key. The attacker only needs to access the computer once more as Administrator to gain full access to all those subsequently EFS-encrypted files. Even using Syskey mode 2 or 3 does not protect against this attack, because the attacker could back up the encrypted files offline, restore them elsewhere and use the DRA's <b>private</b> <b>key</b> to decrypt the files. Of course, if such a malicious insider can gain physical access to the computer, you might consider all security features to be irrelevant, because they could also install rootkits, software or even hardware keyloggers etc. on the computer – which is potentially much more interesting and effective than overwriting DRA policy.|$|E
25|$|It is {{important}} to note that while technology such as cryptographic systems can assist in non-repudiation efforts, the concept is at its core a legal concept transcending the realm of technology. It is not, for instance, sufficient to show that the message matches a digital signature signed with the sender's <b>private</b> <b>key,</b> and thus only the sender could have sent the message and nobody else could have altered it in transit (data integrity). The alleged sender could in return demonstrate that the digital signature algorithm is vulnerable or flawed, or allege or prove that his signing key has been compromised. The fault for these violations may or may not lie with the sender himself, and such assertions may or may not relieve the sender of liability, but the assertion would invalidate the claim that the signature necessarily proves authenticity and integrity; and, therefore, the sender may repudiate the message (because authenticity and integrity are pre-requisites for non-repudiation).|$|E
25|$|Forward secrecy is a {{property}} of cryptographic systems which ensures that a session key {{derived from a}} set {{of public and private}} keys will not be compromised if one of the private keys is compromised in the future. Without forward secrecy, if the server's <b>private</b> <b>key</b> is compromised, not only will all future TLS-encrypted sessions using that server certificate be compromised, but also any past sessions that used it as well (provided of course that these past sessions were intercepted and stored at the time of transmission). An implementation of TLS can provide forward secrecy by requiring the use of ephemeral Diffie-Hellman key exchange to establish session keys, and some notable TLS implementations do so exclusively: e.g., Gmail and other Google HTTPS services that use OpenSSL. However, many clients and servers supporting TLS (including browsers and web servers) are not configured to implement such restrictions. In practice, unless a web service uses Diffie-Hellman key exchange to implement forward secrecy, all of the encrypted web traffic to and from that service can be decrypted by a third party if it obtains the server's master (private) key; e.g., by means of a court order.|$|E
5000|$|PKCS #8 <b>private</b> <b>keys</b> are {{typically}} exchanged in the PEM base64-encoded format, for example: ...|$|R
30|$|B is a vector {{with the}} size of 20, part of <b>private</b> <b>keys</b> of enTTS.|$|R
5000|$|PKCS #12, {{an archive}} file format for storing {{cryptographic}} objects like <b>private</b> <b>keys</b> and certificates ...|$|R
