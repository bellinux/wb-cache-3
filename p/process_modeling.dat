3377|10000|Public
5|$|The High-Performance Materials Institute (HPMI) is a {{multidisciplinary}} research institute at Florida State University. Its {{mission is to}} strive to recruit, develop and retain top quality faculty and staff who will develop HPMI into a leader of excellence for research and education {{in the field of}} advanced materials. Currently, HPMI is involved in four primary technology areas: High-Performance Composite and Nanomaterials, Structural Health Monitoring, Multifunctional Nanomaterials Advanced Manufacturing and <b>Process</b> <b>Modeling.</b>|$|E
25|$|As a {{response}} to these problems, software has been developed that enables the full business process (as developed in the process design activity) to be defined in a computer language which can be directly executed by the computer. The process models can be run through execution engines that automate the processes directly from the model (e.g. calculating a repayment plan for a loan) or, when a step is too complex to automate, Business <b>Process</b> <b>Modeling</b> Notation (BPMN) provides front-end capability for human input. Compared to either of the previous approaches, directly executing a process definition can be more straightforward and therefore easier to improve. However, automating a process definition requires flexible and comprehensive infrastructure, which typically rules out implementing these systems in a legacy IT environment.|$|E
2500|$|The <b>Process</b> <b>Modeling</b> Library is {{designed}} to support [...] DE simulation in Manufacturing, Supply Chain, Logistics and Healthcare areas. [...] Using the <b>Process</b> <b>Modeling</b> Library objects you can model real-world systems in terms of entities (transactions, customers, products, parts, vehicles, etc.), processes (sequences of operations typically involving queues, delays, resource utilization), and resources. [...] The processes are specified {{in the form of}} flowcharts. The <b>Process</b> <b>Modeling</b> Library is a successor of the Enterprise Library from AnyLogic 6, which is also available in AnyLogic 7.|$|E
5000|$|In {{business}} <b>process</b> <b>modelling</b> {{the enterprise}} <b>process</b> <b>model</b> {{is often referred}} to as the business <b>process</b> <b>model.</b> <b>Process</b> <b>models</b> are core concepts in the discipline of <b>process</b> engineering. <b>Process</b> <b>models</b> are: ...|$|R
40|$|Abstract. As {{business}} process management technology matures, organ-isations acquire {{more and more}} business <b>process</b> <b>models.</b> The manage-ment of the resulting collections of <b>process</b> <b>models</b> poses real challenges. One of these challenges concerns model retrieval where support should be provided for the formulation and efficient execution of business <b>process</b> <b>model</b> queries. As queries based on only structural information cannot deal with all querying requirements in practice, there should be support for queries that require knowledge of <b>process</b> <b>model</b> semantics. In this paper we formally define a <b>process</b> <b>model</b> query language {{that is based on}} semantic relationships between tasks in <b>process</b> <b>models</b> and is inde-pendent of any particular <b>process</b> <b>modelling</b> notation. Key words: business <b>process</b> <b>model,</b> <b>process</b> <b>model</b> collection, business <b>process</b> <b>model</b> query, query language...|$|R
40|$|Part 2 – Flexibility Issues Part 3 – Flexibility Support for Pre-specified <b>Process</b> <b>Models</b> Pre-specified <b>process</b> <b>models</b> and flexibility-by-design <b>Process</b> {{configuration}} Flexible process {{execution and}} handling of anticipated exceptions Handling unforeseen exceptions Process Evolution Part 4 – Loosely-specified <b>Process</b> <b>Models</b> Loosely-specified <b>process</b> <b>models</b> Constraint-based <b>process</b> <b>models...</b>|$|R
2500|$|The {{concept of}} {{business}} process {{may be as}} traditional as concepts of tasks, department, production, and outputs, arising from job shop scheduling problems in the early 20th Century. The management and improvement approach , with formal definitions and technical modeling, {{has been around since}} the early 1990s (see business <b>process</b> <b>modeling).</b> Note that the term [...] "business process" [...] is sometimes used by IT practitioners as synonymous with the management of middleware processes or with integrating application software tasks.|$|E
2500|$|Reactive flows {{can involve}} gases, liquids, and solids, or {{combinations}} thereof. [...] As these move through space and over time, they may change chemically. Reactive flow problems often involve multiple processes interacting simultaneously. [...] Identifying the boundary conditions where states of matter react, {{and the ways}} in which they interact, is important in modelling reactive flows. Physical processes involved in reactive flows include species reactions, diffusive transport, radiative transport, convection, and wave-like properties, some or all of which may be modeled to address a particular problem. [...] Modelling of complex reactive flows has applications in a wide variety of areas including aerodynamics, [...] hydrodynamics, [...] microfluidics, [...] chemical kinetics, [...] chemical <b>process</b> <b>modeling</b> (involving advective and diffusive transport processes as well as chemical kinetics) and combustion-related flame and detonation phenomena.|$|E
5000|$|Business <b>Process</b> <b>Modeling</b> Notation (BPMN) is {{an example}} of a <b>Process</b> <b>Modeling</b> language.|$|E
40|$|Abstract. Reference <b>process</b> <b>models</b> capture {{recurrent}} business opera-tions {{in a given}} domain such as procurement or logistics. These {{models are}} intended to be configured to fit the requirements of specific orga-nizations or projects, leading to individualized <b>process</b> <b>models</b> that are subsequently used for domain analysis or solution design. Although the advantages of reusing reference <b>process</b> <b>models</b> compared to designing <b>process</b> <b>models</b> from scratch are widely accepted, the methods employed to configure reference <b>process</b> <b>models</b> are manual and error-prone. In par-ticular, analysts are left with the burden of ensuring the correctness of the individualized <b>process</b> <b>models</b> and to manually fix errors. This paper proposes a foundation for configuring reference <b>process</b> <b>models</b> incre-mentally {{and in a way}} that ensures the correctness of the individualized <b>process</b> <b>models,</b> both with respect to syntax and behavioral semantics. Specifically, assuming the reference <b>process</b> <b>model</b> is behaviorally sound, the individualized <b>process</b> <b>models</b> are guaranteed to be sound. Key words: Reference <b>process</b> <b>model,</b> model configuration, Petri net. ...|$|R
40|$|Abstract. <b>Process</b> <b>models</b> are {{a widely}} {{established}} means to capture business processes. Large organizations maintain <b>process</b> <b>model</b> collections {{with hundreds of}} <b>process</b> <b>models.</b> Maintenance of these collections can be supported by business <b>process</b> <b>model</b> abstraction. Given a detailed model, an abstraction technique derives a coarse grained <b>process</b> <b>model</b> that preserves the essential process properties. In this paper, we introduce Flexab, a tool that realizes flexible <b>process</b> <b>model</b> abstraction. Arbitrary groups of activities may be selected for abstraction. Flexab is realized in a mashup environment, which allows for creating different abstracted versions of a <b>process</b> <b>model</b> and comparing them on a single screen. Keywords: <b>Process</b> <b>Model</b> Abstraction, Model Synthesis. ...|$|R
40|$|Reference <b>process</b> <b>models</b> capture {{recurrent}} {{business operations}} {{in a given}} domain such as procurement or logistics. These models are intended to be configured to fit the requirements of specific organizations or projects, leading to individualized <b>process</b> <b>models</b> that are subsequently used for domain analysis or solution design. Although the advantages of reusing reference <b>process</b> <b>models</b> compared to designing <b>process</b> <b>models</b> from scratch are widely accepted, the methods employed to configure reference <b>process</b> <b>models</b> are manual and error-prone. In particular, analysts are left with the burden of ensuring the correctness of the individualized <b>process</b> <b>models</b> and to manually fix errors. This paper proposes a foundation for configuring reference <b>process</b> <b>models</b> incrementally {{and in a way}} that ensures the correctness of the individualized <b>process</b> <b>models,</b> both with respect to syntax and behavioral semantics. Specifically, assuming the reference <b>process</b> <b>model</b> is behaviorally sound, the individualized <b>process</b> <b>models</b> are guaranteed to be sound...|$|R
5000|$|Business <b>process</b> <b>modeling</b> and notations beyond {{business}} <b>process</b> <b>modeling</b> {{leading to}} database management foundations, and ...|$|E
50|$|Business <b>Process</b> <b>Modeling</b> Notation (BPMN, and the XML form BPML) is {{an example}} of a <b>process</b> <b>modeling</b> language.|$|E
50|$|This entry {{focuses on}} the <b>process</b> <b>modeling</b> (<b>Process</b> <b>Modeling)</b> side of the {{implementation}} of “large” (explained in complexity differences) product software, using the implementation of Enterprise Resource Planning systems as the main example to elaborate on.|$|E
40|$|Software {{development}} {{life cycle}} (SDLC) is a <b>process</b> <b>model</b> adopted and followed {{during the development}} of software [...] Software Engineering encompasses software engineering <b>process</b> <b>models,</b> project planning, management, and Software Development Life Cycle activities. In this paper, we are proposing a software <b>process</b> <b>model</b> for architecture-based software development from the conventional models by taking spiral <b>process</b> <b>model.</b> This <b>process</b> <b>model</b> is coined a...|$|R
40|$|Process {{discovery}} algorithms typically aim at {{discovering a}} <b>process</b> <b>model</b> from an event log that best describes the recorded behavior. However, multiple quality dimensions {{can be used}} to evaluate a <b>process</b> <b>model.</b> In previous work we showed that there often is not one single <b>process</b> <b>model</b> that describes the observed behavior best in all quality dimensions. Therefore, we present an extension to our flexible ETM algorithm that does not result in a single best <b>process</b> <b>model</b> but in a collection of mutually non-dominating <b>process</b> <b>models.</b> This is achieved by constructing a Pareto front of <b>process</b> <b>models.</b> We show by applying our approach on a real life event log that the resulting collection of <b>process</b> <b>models</b> indeed contains several good candidates. Furthermore, by presenting a collection of <b>process</b> <b>models,</b> we show that it allows the user to investigate the different trade-offs between different quality dimensions. Keywords: <b>Process</b> mining; <b>Process</b> <b>model</b> quality; <b>Process</b> <b>model</b> collectio...|$|R
40|$|Business <b>process</b> <b>modelling</b> {{has gained}} {{widespread}} acceptance {{as a valuable}} design and management technique {{for a variety of}} purposes. While there has been much research on <b>process</b> <b>modelling</b> techniques and corresponding tools, there has been little empirical research into the success factors of effective <b>process</b> <b>modelling,</b> and the post hoc evaluation of <b>process</b> <b>modelling</b> success. This paper reports on the first attempt to identify <b>process</b> <b>modelling</b> success factors and measures, as empirically evidenced in case studies of nine <b>process</b> <b>modelling</b> projects in three leading Australian organizations...|$|R
50|$|Business Processes can {{be modeled}} {{through a large}} number of methods and {{technique}}s. For instance, the Business <b>Process</b> <b>Modeling</b> Notation is a Business <b>Process</b> <b>Modeling</b> technique {{that can be used for}} drawing business processes in a workflow.|$|E
50|$|The 1970s-1980s saw the {{development}} of data-driven approaches, as data storage and retrieval technologies improved. Data modeling rather than <b>process</b> <b>modeling</b> was {{the starting point for}} building an information system. Business processes had to adapt to information technology because <b>process</b> <b>modeling</b> was neglected.|$|E
5000|$|The <b>Process</b> <b>Modeling</b> Library is {{designed}} to support DE simulation in Manufacturing, Supply Chain, Logistics and Healthcare areas. Using the <b>Process</b> <b>Modeling</b> Library objects you can model real-world systems in terms of entities (transactions, customers, products, parts, vehicles, etc.), processes (sequences of operations typically involving queues, delays, resource utilization), and resources. The processes are specified {{in the form of}} flowcharts. The <b>Process</b> <b>Modeling</b> Library is a successor of the Enterprise Library from AnyLogic 6, which is also available in AnyLogic 7.|$|E
40|$|As {{business}} process management technology matures, organisations acquire {{more and more}} business <b>process</b> <b>models.</b> The management of the resulting collections of <b>process</b> <b>models</b> poses real challenges. One of these challenges concerns model retrieval where support should be provided for the formulation and efficient execution of business <b>process</b> <b>model</b> queries. As queries based on only structural information cannot deal with all querying requirements in practice, there should be support for queries that require knowledge of <b>process</b> <b>model</b> semantics. In this paper we formally define a <b>process</b> <b>model</b> query language {{that is based on}} semantic relationships between tasks in <b>process</b> <b>models</b> and is independent of any particular <b>process</b> <b>modelling</b> notation...|$|R
40|$|Abstract. This paper {{addresses}} the following problem: given two busi-ness <b>process</b> <b>models,</b> create a <b>process</b> <b>model</b> {{that is the}} union of the <b>process</b> <b>models</b> given as input. In other words, {{the behavior of the}} pro-duced <b>process</b> <b>model</b> should encompass that of the input models. The paper describes an algorithm that produces a single configurable <b>process</b> <b>model</b> from a pair of <b>process</b> <b>models.</b> The algorithm works by extracting the common parts of the input <b>process</b> <b>models,</b> creating a single copy of them, and appending the differences as branches of configurable connec-tors. This way, the merged <b>process</b> <b>model</b> is kept as small as possible, while still capturing all the behavior of the input models. Moreover, ana-lysts are able to trace back which model(s) a given element in the merged model originates from. The algorithm has been prototyped and tested against <b>process</b> <b>models</b> taken from several application domains. ...|$|R
40|$|This article {{studies the}} problem of {{transforming}} a <b>process</b> <b>model</b> with an arbitrary topology into an equivalent well-structured <b>process</b> <b>model.</b> While this problem has received significant attention, {{there is still no}} full characterization of the class of unstructured <b>process</b> <b>models</b> that can be transformed into well-structured ones, nor an automated method for structuring any <b>process</b> <b>model</b> that belongs to this class. This article fills this gap in the context of acyclic <b>process</b> <b>models.</b> The article defines a necessary and sufficient condition for an unstructured acyclic <b>process</b> <b>model</b> to have an equivalent well-structured <b>process</b> <b>model</b> under fully concurrent bisimulation, as well as a complete structuring method. The method has been implemented as a tool that takes <b>process</b> <b>models</b> captured in the BPMN and EPC notations as input. The article also reports on an empirical evaluation of the structuring method using a repository of <b>process</b> <b>models</b> from commercial practice...|$|R
50|$|Many <b>process</b> <b>modeling</b> methodologies {{utilize the}} concept of swimlanes, as a {{mechanism}} to organize activities into separate visual categories in order to illustrate different functional capabilities or responsibilities (organisational roles). Swimlanes are used in Business <b>Process</b> <b>Modeling</b> Notation (BPMN) and Unified Modeling Language activity diagram modeling methodologies.|$|E
5000|$|... #Article: Comparison of Business <b>Process</b> <b>Modeling</b> Notation tools ...|$|E
5000|$|... #Caption: Example of EEML Goal {{modeling}} and <b>process</b> <b>modeling.</b>|$|E
40|$|This paper {{addresses}} the following problem: given two business <b>process</b> <b>models,</b> create a <b>process</b> <b>model</b> {{that is the}} union of the <b>process</b> <b>models</b> given as input. In other words, {{the behavior of the}} produced <b>process</b> <b>model</b> should encompass that of the input models. The paper describes an algorithm that produces a single configurable <b>process</b> <b>model</b> from a pair of <b>process</b> <b>models.</b> The algorithm works by extracting the common parts of the input <b>process</b> <b>models,</b> creating a single copy of them, and appending the differences as branches of configurable connectors. This way, the merged <b>process</b> <b>model</b> is kept as small as possible, while still capturing all the behavior of the input models. Moreover, analysts are able to trace back which model(s) a given element in the merged model originates from. The algorithm has been prototyped and tested against <b>process</b> <b>models</b> taken from several application domains...|$|R
40|$|Real world {{business}} <b>process</b> <b>models</b> may {{consist of}} hundreds of elements and have sophisticated structure. Although there are tasks where such models are valuable and appreciated, in general complexity has a negative influence on model comprehension and analysis. Thus, means for managing the complexity of <b>process</b> <b>models</b> are needed. One approach is abstraction of business process models-creation of a <b>process</b> <b>model</b> which preserves the main features of the initial elaborate <b>process</b> <b>model,</b> but leaves out insignificant details. In this paper we study the structural aspects of <b>process</b> <b>model</b> abstraction and introduce an abstraction approach based on process structure trees (PST). The developed approach assures that the abstracted <b>process</b> <b>model</b> preserves the ordering constraints of the initial model. It surpasses pattern-based <b>process</b> <b>model</b> abstraction approaches, allowing to handle graph-structured <b>process</b> <b>models</b> of arbitrary structure. We also provide {{an evaluation of the}} proposed approach...|$|R
40|$|Business <b>process</b> <b>modelling</b> as a {{practice}} and research field has received great attention over recent years. Organizations invest significantly into <b>process</b> <b>modelling</b> {{in terms of}} training, tools, capabilities and resources. The return on this investment {{is a function of}} <b>process</b> <b>model</b> re-use, which we define as the recurring use of <b>process</b> <b>models</b> to support organizational work tasks. While prior research has examined re-use as a design principle, we explore re-use as a behaviour, because evidence suggest that analysts’ re-use of <b>process</b> <b>models</b> is indeed limited. In this paper we develop a two-stage conceptualization of the key object-, behaviour- and socioorganization-centric factors explaining <b>process</b> <b>model</b> re-use behaviour. We propose a theoretical model and detail implications for its operationalization and measurement. Our study can provide significant benefits to our understanding of <b>process</b> <b>modelling</b> and <b>process</b> <b>model</b> use as key practices in analysis and design...|$|R
5000|$|Modeling: {{involves}} business modeling, data modeling, and <b>process</b> <b>modeling.</b>|$|E
5000|$|Module 2: Gaussian <b>process</b> <b>modeling</b> for the {{discrepancy}} function ...|$|E
50|$|Soft systems {{methodology}} (SSM) is {{an approach}} to organizational <b>process</b> <b>modeling</b> (business <b>process</b> <b>modeling)</b> {{and it can be}} used both for general problem solving and in the management of change. It was developed in England by academics at the University of Lancaster Systems Department through a ten-year action research program.|$|E
40|$|Abstract: Real world {{business}} <b>process</b> <b>models</b> may {{consist of}} hundreds of elements and have sophisticated structure. Although there are tasks where such models are valu-able and appreciated, in general complexity has a negative influence on model compre-hension and analysis. Thus, means for managing the complexity of <b>process</b> <b>models</b> are needed. One approach is abstraction of business process models—creation of a <b>process</b> <b>model</b> which preserves the main features of the initial elaborate <b>process</b> <b>model,</b> but leaves out insignificant details. In this paper we study the structural aspects of <b>process</b> <b>model</b> abstraction and introduce an abstraction approach based on process structure trees (PST). The developed approach assures that the abstracted <b>process</b> <b>model</b> pre-serves the ordering constraints of the initial model. It surpasses pattern-based <b>process</b> <b>model</b> abstraction approaches, allowing to handle graph-structured <b>process</b> <b>models</b> of arbitrary structure. We also provide {{an evaluation of the}} proposed approach. ...|$|R
30|$|Taking {{the large}} number of models together, we find that two main <b>process</b> <b>models</b> have emerged: (1) {{innovation}} management <b>process</b> <b>models</b> and (2) conceptual <b>process</b> <b>models.</b> These are described in the following.|$|R
40|$|International audienceThe {{importance}} {{gained by}} <b>process</b> <b>models</b> in modern information systems leaded to {{the proliferation of}} <b>process</b> <b>model</b> repositories. Retrieving <b>process</b> <b>models</b> within such repositories is a critical functionality. Recent works propose metrics that rank <b>process</b> <b>models</b> of a repository according to their similarity to a given query. However, these methods sequentially browse all the processes of the repository and compare each one against the query, which is computationally expensive. This paper presents a technique for quickly retrieving <b>process</b> <b>models</b> similar to a given query that relies on an index built on behavioral characteristics of <b>process</b> <b>models...</b>|$|R
