496|1379|Public
5|$|Allocators {{were invented}} by Alexander Stepanov {{as part of}} the Standard Template Library (STL). They were {{originally}} intended as a means to make the library more flexible and independent of the underlying memory model, allowing programmers to utilize custom pointer and reference types with the library. However, in the process of adopting STL into the C++ standard, the C++ standardization committee realized that a complete abstraction of the memory model would incur unacceptable <b>performance</b> <b>penalties.</b> To remedy this, the requirements of allocators were made more restrictive. As a result, the level of customization provided by allocators is more limited than was originally envisioned by Stepanov.|$|E
25|$|Regardless of {{the product}} used, there are {{inherent}} limitations and <b>performance</b> <b>penalties</b> in using a virtualized guest OS versus the native Mac OS or booting an alternative OS solution offered via Boot Camp.|$|E
25|$|Other file systems, e.g., HPFS or exFAT, use {{free space}} bitmaps that {{indicate}} used and available clusters, which {{could then be}} quickly looked up {{in order to find}} free contiguous areas. Another solution is the linkage of all free clusters into one or more lists (as is done in Unix file systems). Instead, the FAT has to be scanned as an array to find free clusters, which can lead to <b>performance</b> <b>penalties</b> with large disks.|$|E
50|$|Detecting {{possible}} attacks via regular expressions has {{a slight}} <b>performance</b> <b>penalty</b> on the application.|$|R
5000|$|Simpler {{instruction}} sets allow direct execution by hardware, {{avoiding the}} <b>performance</b> <b>penalty</b> of microcoded execution.|$|R
2500|$|... 32-bit barrel shifter {{can be used}} without <b>performance</b> <b>penalty</b> {{with most}} {{arithmetic}} instructions and address calculations.|$|R
25|$|One {{potential}} workaround to licensing incompatibility was trialed in 2006, with {{an experimental}} port of the ZFS code to Linux's FUSE system. The filesystem ran entirely in userspace {{instead of being}} integrated into the Linux kernel, and was therefore not considered a derivative work of the kernel. This approach was functional, but suffered from significant <b>performance</b> <b>penalties</b> when compared with integrating the filesystem as a native kernel module running in kernel space. As of 2016, the ZFS on FUSE project appears to be defunct.|$|E
25|$|Based upon {{experience}} with the XF5F-1 and the XP-50, Grumman had begun work on a more advanced fighter, designated model G-51. Thus, the USAAC decided to replace the XP-50 with the newer design and recommended procurement of two G-51s, designated XP-65, using the original XP-50 expenditure order to cover the development. Consideration was given to combining the Air Corps and Navy requirements into a common design, but the weight and <b>performance</b> <b>penalties</b> inherent in conflicting requirements were considered great enough that separate designs would be needed. Since the U.S. Navy considered Grumman one of its major production sources and that producing two different model aircraft by Grumman would impede manufacture of aircraft types the U.S. Navy needed, {{it was decided that}} development of the XF7F-1 would continue, and the XP-65 as a parallel development was abandoned.|$|E
5000|$|It {{can result}} in {{significant}} <b>performance</b> <b>penalties,</b> in part because any compiled query plans that use this table are automatically invalidated.|$|E
2500|$|... way {{to explain}} the <b>performance</b> <b>penalty</b> {{associated}} with establishing the safe perigee of a parking orbit.|$|R
5000|$|... 32-bit barrel shifter {{can be used}} without <b>performance</b> <b>penalty</b> {{with most}} {{arithmetic}} instructions and address calculations.|$|R
40|$|Dynamic voltage and {{frequency}} scaling of the CPU {{has been identified as}} one of the most e#ective ways to reduce energy consumption of a program. This paper discusses a compilation strategy that identifies scaling opportunities without significant overall <b>performance</b> <b>penalty.</b> Simulation results show CPU energy savings of 3. 97 %- 23. 75 % for the SPECfp 95 benchmark suite with a <b>performance</b> <b>penalty</b> of at most 2. 53 %. ...|$|R
50|$|MLton aims {{to produce}} fast executables, and to {{encourage}} rapid prototyping and modular programming by eliminating <b>performance</b> <b>penalties</b> often {{associated with the use}} of high-level language features.|$|E
50|$|Virtualization often exacts <b>performance</b> <b>penalties,</b> both in {{resources}} {{required to}} run the hypervisor, and {{as well as in}} reduced performance on the virtual machine compared to running native on the physical machine.|$|E
50|$|Regardless of {{the product}} used, there are {{inherent}} limitations and <b>performance</b> <b>penalties</b> in using a virtualized guest OS versus the native Mac OS or booting an alternative OS solution offered via Boot Camp.|$|E
50|$|RAID 6 {{does not}} have a <b>performance</b> <b>penalty</b> for read {{operations}}, but it does have a <b>performance</b> <b>penalty</b> on write operations because of the overhead associated with parity calculations. Performance varies greatly depending on how RAID 6 is implemented in the manufacturer's storage architecture—in software, firmware, or by using firmware and specialized ASICs for intensive parity calculations. RAID 6 can read up to the same speed as RAID 5 with the same number of physical drives.|$|R
50|$|The CO {{solution}} scales up with network {{size and}} the number of databases without <b>performance</b> <b>penalty</b> when it utilizes common distributed atomic commitment architecture.|$|R
40|$|This paper {{describes}} {{results on}} Built-In Current Sensors destined {{to overcome the}} limitations of IDDQ testing in deep submicron circuits. The problems of <b>performance</b> <b>penalty,</b> test accuracy and test speed are addressed. A new sensor composed of a source-controlled comparator operating at low supply voltages and bias currents is used. Gradual sensor activation ensures reliable low noise operation. It is combined with large bypass MOS switches avoiding <b>performance</b> <b>penalty,</b> {{as well as a}} second bypass and compensation logic to increase test speed...|$|R
5000|$|Typical Suitability {{reports are}} shown on [...] {{on the right}} side. Advisor Suitability {{provides}} dataset size (iteration space) modeling capabilities and <b>performance</b> <b>penalties</b> break-downn (exposing negative impact caused by Load Imbalance, Parallel Runtimes Overhead and Lock Contention).|$|E
50|$|In 2006, second {{generation}} flat LEI kites were developed which combine near total depower and easy, safe relaunch with higher performance, no <b>performance</b> <b>penalties</b> and reduced bar pressure. Called Hybrid or SLE kites (Supported Leading Edge), these kites {{are suitable for}} both beginners and experts.|$|E
50|$|The aircraft, {{serial number}} K5925, {{was used for}} thick-wing {{research}} by the Royal Aircraft Establishment. It had four interchangeable wings of different thickness. The aim {{was to investigate the}} <b>performance</b> <b>penalties</b> of thicker wings, which had structural advantages (lower weight for the same strength) and provided space for fuel etc.|$|E
25|$|Microsoft {{has issued}} update KB936357 {{to address the}} errata by {{microcode}} update, with no <b>performance</b> <b>penalty.</b> BIOS updates are also available to fix the issue.|$|R
30|$|Due to {{the high}} {{efficiency}} of the initial convex solution, the GD step could be omitted {{in order to reduce}} computation without significant <b>performance</b> <b>penalty.</b>|$|R
3000|$|As expected, {{optimization}} {{based on}} long-term statistics results in lower efficiency. However, the <b>performance</b> <b>penalty</b> is moderate since ε __CRS remains at above 90 [...]...|$|R
50|$|High-level {{programming}} languages {{can suffer}} from <b>performance</b> <b>penalties</b> because glue code must {{run through the}} language interpreter, even when connecting high-performance subsystems. If performance is crucial, using configuration scripting is often preferred to directly connecting binary interfaces of components. In object-oriented scripting languages, glue code often {{eliminates the need for}} class hierarchies and large numbers of classes.|$|E
5000|$|Individual file {{fragmentation}} {{occurs when a}} single file has been broken into multiple pieces (called extents on extent-based file systems). While disk file systems attempt to keep individual files contiguous, this is not often possible without significant <b>performance</b> <b>penalties.</b> File system check and defragmentation tools typically only account for {{file fragmentation}} in their [...] "fragmentation percentage" [...] statistic.|$|E
50|$|Write-back {{policy with}} batched writes to HDDs {{provides}} additional benefits to write-sensitive redundant array of independent disks (RAID) layouts such as RAID 5 and RAID 6, which perform actual write operations as atomic read-modify-write sequences. That way, <b>performance</b> <b>penalties</b> of small random writes are reduced or avoided for such RAID layouts, by grouping {{them together and}} performing as batched sequential writes.|$|E
50|$|Clang {{supports}} three {{buffer overflow}} detectors, namelyAddressSanitizer (-fsanitize=address),-fsanitize=bounds,and SafeCode.These systems have different tradeoffs {{in terms of}} <b>performance</b> <b>penalty,</b> memory overhead, and classes of detected bugs.|$|R
50|$|Microsoft {{has issued}} update KB936357 {{to address the}} errata by {{microcode}} update, with no <b>performance</b> <b>penalty.</b> BIOS updates are also available to fix the issue.|$|R
5000|$|A lot of {{run-time}} casting required even using standard containers induces a <b>performance</b> <b>penalty.</b> However, most {{of these}} casts are statically eliminated by the JIT compiler.|$|R
5000|$|... target makes {{handling}} of large SYN floods possible without the large <b>performance</b> <b>penalties</b> {{imposed by the}} connection tracking in such cases. By redirecting initial [...] requests to the [...] target, connections are not registered within the connection tracking until they reach a validated final [...] state, freeing up connection tracking from accounting large numbers of potentially invalid connections. This way, huge [...] floods can be handled in an effective way.|$|E
50|$|Other file systems, e.g., HPFS or exFAT, use {{free space}} bitmaps that {{indicate}} used and available clusters, which {{could then be}} quickly looked up {{in order to find}} free contiguous areas. Another solution is the linkage of all free clusters into one or more lists (as is done in Unix file systems). Instead, the FAT has to be scanned as an array to find free clusters, which can lead to <b>performance</b> <b>penalties</b> with large disks.|$|E
50|$|In addition, {{businesses}} {{found that}} using EJBs to encapsulate business logic brought a performance penalty. This {{is because the}} original specification only allowed for remote method invocation through CORBA (and optionally other protocols), even though {{the large majority of}} business applications actually do not require this distributed computing functionality. The EJB 2.0 specification addressed this concern by adding the concept of local interfaces which could be called directly without <b>performance</b> <b>penalties</b> by applications that were not distributed over multiple servers.|$|E
2500|$|Production P-36A {{fitted with}} two [...] Madsen autocannons under the wings, reverted to P-36A because guns imposed an {{unacceptable}} <b>performance</b> <b>penalty</b> with {{top speed of}} only [...]|$|R
50|$|Physical {{journals}} {{impose a}} significant <b>performance</b> <b>penalty</b> because every changed block must be committed twice to storage, {{but may be}} acceptable when absolute fault protection is required.|$|R
40|$|A Mach 0. 93 Blended-Wing-Body (BWB) {{configuration}} {{was developed}} using CFL 3 DV 6, a Navier-Stokes {{computational fluid dynamics}} (CFD) code, {{in conjunction with the}} Wing Multidisciplinary Optimization Design (WingMOD) code, to determine the feasibility of BWB aircraft at high subsonic speeds. Excluding an assessment of propulsion airframe interference, the results show that a Mach 0. 93 BWB is feasible, although it pays a <b>performance</b> <b>penalty</b> relative to Mach 0. 85 designs. A Mach 0. 90 BWB may be the best solution in terms of offering improved speed with minimal <b>performance</b> <b>penalty...</b>|$|R
