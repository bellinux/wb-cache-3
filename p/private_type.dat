43|276|Public
50|$|John Gunnarson Helland: Felemakerslekten Helland (Helland, the fiddlemaker maker family). <b>Private,</b> <b>type</b> written paper.|$|E
5000|$|Opaque pointer: a pointer to an {{undeclared}} or <b>private</b> <b>type,</b> to hide implementation details ...|$|E
5000|$|Centaur (1914, ATF), a <b>private</b> <b>type</b> for the Museum Press of the Metropolitan Museum of Art {{designed}} by Bruce Rogers.|$|E
5000|$|PUBLIC <b>types</b> with <b>PRIVATE</b> {{components}} and <b>PRIVATE</b> <b>types</b> with PUBLIC components ...|$|R
50|$|Types {{can have}} {{modifiers}} such as limited, abstract, <b>private</b> etc. <b>Private</b> <b>types</b> {{can only be}} accessed and limited types can only be modified or copied {{within the scope of}} the package that defines them.Ada 95 adds additional features for object-oriented extension of types.|$|R
50|$|VPN (Virtual <b>Private</b> Network) <b>Types</b> are: PPTP, L2TP, MPLS, IPsec, SSL/SSH.|$|R
5000|$|Saks Goudy + Italic + Bold Caps (1934), a <b>private</b> <b>type</b> {{cast for}} Saks Fifth Avenue {{department}} store. Saks Goudy Bold Caps actually {{consists of the}} small capitals of larger sizes cast on larger bodies.|$|E
50|$|In 1972, the Dunstan Labor {{government}} {{introduced a}} consenting adults in <b>private</b> <b>type</b> defence in South Australia. This defence was later introduced as a bill by Murray Hill, father of former Defence Minister Robert Hill, In 1975, South Australia {{became the first}} state or territory to legalise sexual conduct between males.|$|E
50|$|Following the Wolfenden report, the Dunstan Labor {{government}} {{introduced a}} consenting adults in <b>private</b> <b>type</b> legal defence in South Australia in 1972. This defence was initiated as a bill by Murray Hill, father of former Defence Minister Robert Hill, and repealed the state's sodomy law in 1975. The Campaign Against Moral Persecution during the 1970s raised the profile {{and acceptance of}} Australia's gay and lesbian communities, and other states and territories repealed their laws between 1976 and 1990. The exception was Tasmania, which retained its laws until the Federal Government and the United Nations Human Rights Committee forced their repeal in 1997.|$|E
40|$|It {{is nearly}} axiomatic, that {{to take the}} {{greatest}} advantage of the useful features available in a development system, and to avoid the negative interactions of those features, requires the exercise of a design methodology which constrains their use. A major design support feature of the Ada language is abstraction: for data, functions processes, resources, and system elements in general. Atomic abstract types can be created in packages defining those <b>private</b> <b>types</b> {{and all of the}} overloaded operators, functions, and hidden data required for their use in an application. Generically structured abstract types can be created in generic packages defining those structured <b>private</b> <b>types,</b> as buildups from the user-defined data types which are input as parameters. A study is made of the design constraints required for software incorporating either atomic or generically structured abstract types, if the integration of software components based on them is to be subsequently performed. The impact of these techniques on the reusability of software and the creation of project-specific software support environments is also discussed...|$|R
30|$|Auctions {{are widely}} used in {{competitive}} electricity markets that take place day-ahead (Contreras et al. 2001), and they are known to yield efficient allocations even in cases there is uncertainty about buyersâ€™ valuations for items to be sold (Krishna 2010). We consider auctions as the method to allocate SLAs among buyers with varying <b>private</b> <b>types,</b> {{with regards to the}} value of their demand and their flexibility under the presence of uncertainty in the electricity market. Here, we assume no agency for the seller, who only serves as the mechanism to allocate SLAs to the buyers.|$|R
40|$|Consider a {{symmetric}} 2 -player game {{of complete}} information. Consider an arbitrary Bayesian extension of that game with payoff-irrelevant types, independent random matching, and anonymity (<b>private</b> <b>types).</b> We show that, in this setting, while strategies in a Bayesian Nash equilibrium of that game can differ across types, aggregate play in any such equilibrium must coincide with a symmetric Nash equilibrium {{of the complete}} information game. This justifies the interpretation of certain data, including many laboratory experiments, as arising from a symmetric equilibrium, even when asymmetric equilibria exist and, in addition, subjects may be heterogeneous...|$|R
50|$|The {{earliest}} appearing libraries in Rome {{were of the}} <b>private</b> <b>type</b> {{and were}} most often procured as spoils in times of war. For example, when the Roman general Aemilius defeated the Macedonian king Perseus in 168 BC the only plunder he wished to possess was the king's private library. Likewise, in 86 BC, Roman general Sulla appropriated the library of the infamous Greek bibliophile and kleptobibliophile Apellicon of Teos. Finally; around 73 BC, Lucullus removed and brought back to Rome the private library of King Mithridates VI of the Pontus region.Nearly every house of nobility had a library and virtually every one was split into two rooms: one for Latin texts and one for Greek texts. Rome {{may very well have}} been the birthplace of specialized libraries, with evidence of early medical and legal libraries. In Rome one can see the beginnings of book preservation. One author proposed that a library is better suited if it meets the rising sun in the east {{in order to ensure that}} it does not succumb to bookworms and decomposition. Some examples of Roman-period private libraries include the Villa of the Papyri, the House of Menander, the House of Augustus, and the Domus Aurea.|$|E
5000|$|... object ExprParser { <b>private</b> <b>type</b> Result = (NonTerminal, Int) [...] private sealed trait NonTerminal { val v: Int } [...] private case class NTexpr(v: Int, in: StreamChar) extends NonTerminal private case class NTterm(v: Int, in: StreamChar) extends NonTerminal private case class NTnum(v: Int, in: StreamChar) extends NonTerminal [...] class ParseException(msg: String) extends RuntimeException(msg) { def this (...) = this("") [...] def this(c: Char) = this(c.toString) } [...] def parse(in: StreamChar) = state0(in)._1.v [...] /* * 0 $accept: [...] expr $end * * '(' shift, and go {{to state}} 1 * '0' shift, {{and go to}} state 2 * '1' shift, and go to state 3 * * expr go to state 4 * term go to state 5 * num go to state 6 */ private def state0(in: StreamChar) = in match { case cur #:: tail => { def loop(tuple: Result): Result = { val (res, goto) = tuple [...] if (goto == 0) { loop(res match { case NTexpr(v, in) => state4(in, v) case NTterm(v, in) => state5(in, v) case NTnum(v, in) => state6(in, v) }) } else (res, goto - 1) } [...] loop(cur match { case '(' => state1(tail) case '0' => state2(tail) case '1' => state3(tail) case c => throw new ParseException(c) }) } [...] case Stream (...) => throw new ParseException } [...] /* * 4 term: '(' [...] expr ')' * * '(' shift, and go to state 1 * '0' shift, and go to state 2 * '1' shift, and go to state 3 * * expr go to state 7 * term go to state 5 * num go to state 6 */ private def state1(in: StreamChar): Result = in match { case cur #:: tail => { def loop(tuple: Result): Result = { val (res, goto) = tuple [...] if (goto == 0) { loop(res match { case NTexpr(v, in) => state7(in, v) case NTterm(v, in) => state5(in, v) case NTnum(v, in) => state6(in, v) }) } else (res, goto - 1) } [...] loop(cur match { case '(' => state1(tail) case '0' => state2(tail) case '1' => state3(tail) case c => throw new ParseException(c) }) } [...] case Stream (...) => throw new ParseException } [...] /* * 6 num: '0' [...] * * $default reduce using rule 6 (num) */ private def state2(in: StreamChar) = (NTnum(0, in), 0) [...] /* * 7 num: '1' [...] * * $default reduce using rule 7 (num) */ private def state3(in: StreamChar) = (NTnum(1, in), 0) [...] /* * 0 $accept: expr [...] $end * 1 expr: expr [...] '+' term * 2 | expr [...] '-' term * * $end shift, and go to state 8 * '+' shift, and go to state 9 * '-' shift, and go to state 10 */ private def state4(in: StreamChar, arg1: Int): Result = in match { case cur #:: tail => { decrement(cur match { case '+' => state9(tail, arg1) case '-' => state10(tail, arg1) case c => throw new ParseException(c) }) } [...] case Stream (...) => state8(arg1) } [...] /* * 3 expr: term [...] * * $default reduce using rule 3 (expr) */ private def state5(in: StreamChar, arg1: Int) = (NTexpr(arg1, in), 0) [...] /* * 5 term: num [...] * * $default reduce using rule 5 (term) */ private def state6(in: StreamChar, arg1: Int) = (NTterm(arg1, in), 0) [...] /* * 1 expr: expr [...] '+' term * 2 | expr [...] '-' term * 4 term: '(' expr [...] ')' * * '+' shift, and go to state 9 * '-' shift, and go to state 10 * ')' shift, and go to state 11 */ private def state7(in: StreamChar, arg1: Int): Result = in match { case cur #:: tail => { decrement(cur match { case '+' => state9(tail, arg1) case '-' => state10(tail, arg1) case ')' => state11(tail, arg1) case c => throw new ParseException(c) }) } [...] case Stream (...) => throw new ParseException } [...] /* * 0 $accept: expr $end [...] * * $default accept */ private def state8(arg1: Int) = (NTexpr(arg1, Stream (...) [...] ), 1) [...] /* * 1 expr: expr '+' [...] term * * '(' shift, and go to state 1 * '0' shift, and go to state 2 * '1' shift, and go to state 3 * * term go to state 12 * num go to state 6 */ private def state9(in: StreamChar, arg1: Int) = in match { case cur #:: tail => { def loop(tuple: Result): Result = { val (res, goto) = tuple [...] if (goto == 0) { loop(res match { case NTterm(v, in) => state12(in, arg1, v) case NTnum(v, in) => state6(in, v) case _ => throw new AssertionError }) } else (res, goto - 1) } [...] loop(cur match { case '(' => state1(tail) case '0' => state2(tail) case '1' => state3(tail) case c => throw new ParseException(c) }) } [...] case Stream (...) => throw new ParseException } [...] /* * 2 expr: expr '-' [...] term * * '(' shift, and go to state 1 * '0' shift, and go to state 2 * '1' shift, and go to state 3 * * term go to state 13 * num go to state 6 */ private def state10(in: StreamChar, arg1: Int) = in match { case cur #:: tail => { def loop(tuple: Result): Result = { val (res, goto) = tuple [...] if (goto == 0) { loop(res match { case NTterm(v, in) => state13(in, arg1, v) case NTnum(v, in) => state6(in, v) case _ => throw new AssertionError }) } else (res, goto - 1) } [...] loop(cur match { case '(' => state1(tail) case '0' => state2(tail) case '1' => state3(tail) case c => throw new ParseException(c) }) } [...] case Stream (...) => throw new ParseException } [...] /* * 4 term: '(' expr ')' [...] * * $default reduce using rule 4 (term) */ private def state11(in: StreamChar, arg1: Int) = (NTterm(arg1, in), 2) [...] /* * 1 expr: expr '+' term [...] * * $default reduce using rule 1 (expr) */ private def state12(in: StreamChar, arg1: Int, arg2: Int) = (NTexpr(arg1 + arg2, in), 2) [...] /* * 2 expr: expr '-' term [...] * * $default reduce using rule 2 (expr) */ private def state13(in: StreamChar, arg1: Int, arg2: Int) = (NTexpr(arg1 - arg2, in), 2) [...] private def decrement(tuple: Result) = { val (res, goto) = tuple assert(goto != 0) (res, goto - 1) }} ...|$|E
40|$|We {{consider}} a price discrimination problem {{in which a}} seller has a single object for sale to a potential buyer. At the time of contracting, the buyerâ€™s <b>private</b> <b>type</b> is his incomplete private information about his value, and the seller can disclose additional private information to the buyer. We study {{the question of whether}} discriminatory information disclosure can be profitable to the seller under the assumption that, for the same disclosure policy, the amount of additional private information that the buyer can learn depends on his <b>private</b> <b>type.</b> We establish sufficient conditions under which it is profit-maximizing for the seller to grant each <b>private</b> <b>type</b> of the buyer full access to all additional private information under her control. In general, however, discriminatory disclosure can be optimal, because it reduces the information rent accrued to <b>private</b> <b>type...</b>|$|E
50|$|DCCG {{has its own}} {{units and}} also makes use of defense {{resources}} (mainly from the RNLN, a ship and staff). DCCG has several <b>private</b> owned <b>types</b> of patrol boats, cutters and aircraft.|$|R
40|$|A {{monopolist}} sells a good whose value {{depends on}} the set (network) of buyers who adopt {{it as well as}} on their <b>private</b> <b>types.</b> This paper studies the sellerâ€™s revenue maximization in this problem when he coordinates the buyersâ€™ adoption decisions based on their reported types. We characterize ex post im-plementable sales schemes, and identify the conditions under which the revenue maximizing scheme has the properties that a larger network is more affordable than a smaller network, and that the network size is maximized subject to the participation constraints. Key words: adoption externalities, strategy-proof, revenue maximization...|$|R
40|$|We {{explore the}} {{relationship}} between public information and implementable outcomes in an environment characterized by random endowments and private information. We show that if public signals carry no information about <b>private</b> <b>types,</b> then an exact relationship holds: a more informative public signal structure, {{in the sense of}} Blackwell, induces a smaller set of ex-ante implementable outcomes. This holds for a large set of implementation standards, includingNash implementation, and Bayesian incentive compatibility. The result extends the notion, datingto Hirshleifer (1971), that public information can have negative value to an endowment economy under uncertainty. * We thank participants at the 2002 meetings of the Society for Economic Design. The autho...|$|R
40|$|We {{examine the}} social {{desirability}} of {{learning about the}} regulated agent in a generalized principal-agent model with incomplete information. An interesting result we obtain {{is that there are}} situations in which the agent prefers a Bayesian regulator to have more, yet incomplete, information about his <b>private</b> <b>type.</b> ...|$|E
40|$|We {{consider}} a price discrimination problem {{in which a}} seller has a single object for sale to a potential buyer. At the time of contracting, the buyerâ€™s <b>private</b> <b>type</b> is his incomplete private information about his value, and the seller can disclose, without ob-serving, additional private information to the buyer that is informative about his value and is correlated to his <b>private</b> <b>type.</b> In both discrete-type and continuous-type settings, we show that, under general conditions, discriminatory information disclosure dominates full information disclosure {{in terms of the}} sellerâ€™s revenue. A methodological contribu-tion of our analysis is that the orthogonal decomposition technique, an important tool in dynamic mechanism design, should be used with caution when information disclosure is part of the design. âˆ—We are indebted to Dirk Bergemann for his support in various stages of this project. We thank the participants of 2013 Cowles Summer Conference in Economic Theory, especially our discussant Philipp Strack...|$|E
40|$|We {{examine the}} issue of {{learning}} in a generalized principal-agent model with incomplete information. We show that there are situations in which the agent prefers a Bayesian regulator to have more information about his <b>private</b> <b>type.</b> Moreover, {{the outcome of the}} Bayesian mechanism regulating the agent is path-dependent; i. e. the convergence of the regulator's belief to the truth does not always yield the complete information outcome. ...|$|E
50|$|The college cost {{approximately}} â‚¬50 million when {{opened in}} October 2004 {{and is one}} of the first public <b>private</b> partnership <b>type</b> projects in education in the Republic of Ireland, and will result in a 25-year contract held by Focus Education Ltd.|$|R
50|$|The {{houses in}} Benstead Close were {{originally}} Council owned but are now <b>private.</b> The <b>type</b> of {{properties in the}} area are mainly large detached historical homes and cottages. Next to Hunton CEP School there are almshouses owned by the church.|$|R
40|$|In {{traditional}} mechanism design, agents only {{care about}} the utility they derive from {{the outcome of the}} mechanism. We look at a richer model where agents also assign non-negative dis-utility to the information about their <b>private</b> <b>types</b> leaked by the outcome of the mechanism. We present a new model for privacy-aware mechanism design, where we only assume an upper bound on the agents' loss due to leakage, as opposed to previous work where a full characterization of the loss was required. In this model, under a mild assumption on the distribution of how agents value their privacy, we show a generic construction of privacy-aware mechanisms and demonstrate its applicability to electronic polling and pricing of a digital good...|$|R
40|$|We {{consider}} {{the problem of}} designing auctions in social networks for goods that exhibit single-parameter submodular network externalities in which a bidderâ€™s value for an outcome is a fixed <b>private</b> <b>type</b> times a known submodular function of the allocation of his friends. Externalities pose many issues {{that are hard to}} address with traditional techniques; our work shows how to resolve these issues in a specific setting of particular interest. We operate in a Bayesian environment and so assume private values are drawn according to known distributions. We prove that the optimal auction is APX-hard. Thus we instead design auctions whose revenue approximates that of the optimal auction. Our main result considers step-function externalities in which a bidderâ€™s value for an outcome is either zero, or equal to his <b>private</b> <b>type</b> if at least one friend has the good. For these e e+ 1 settings, we provide a-approximation. We also give a 0. 25 -approximation auction for general single-parameter submodular network externalities, and discuss optimizing over a class of simple pricing strategies...|$|E
40|$|We {{consider}} a price discrimination problem {{in which a}} seller has a single object for sale to a potential buyer. At the time of contracting, the buyerâ€™s <b>private</b> <b>type</b> is his incomplete private information about his value, and the seller can disclose additional private information to the buyer. We study {{the question of whether}} discriminatory infor-mation disclosure can be profitable to the seller under the assumption that, for the same disclosure policy, the amount of additional private information that the buyer can learn depends on his <b>private</b> <b>type.</b> In both discrete-type and continuous-type setting, we show that discriminatory disclosure can be optimal because, compared to full disclosure, it re-duces the information rent accrued to private types of the buyer without much impact on the trade surplus. A complete characterization of the optimal discriminatory disclosure policy is provided in the discrete-type setting. We also establish sufficient conditions for the optimality of full information disclosure in the continuous-type setting. âˆ—We are indebted to Dirk Bergemann for his support in various stages of this project. We thank the participants of 2013 Cowles Summer Conference in Economic Theory, especially our discussant Philipp Strack, and Simon Board, Alessandro Pavan, Roland Strauss and Balazs Szentes for many helpful comments and suggestions. Shi is grateful to Social Sciences and Humanities Research Council of Canada for financial support. ...|$|E
40|$|At an {{exogenous}} deadline, Receiver {{takes an}} action, the payoff from which depends on Senderâ€™s <b>private</b> <b>type.</b> Sender privately observes {{if and when}} an opportunity arrives to start a public flow of information about her type. Upon arrival of the opportunity, she chooses when to start the information flow. Starting the information flow earlier allows for greater scrutiny, but signals credibility. We characterize the set of equilibria and show that Sender always delays the information flow, and completely withholds it with strictly positive probability. We derive comparative stat-ics and discuss implications for organizations, politics, and financial mar-kets...|$|E
5000|$|For derived types {{there are}} three possibilities: the type and its {{components}} are all PUBLIC, the type is PUBLIC and its components <b>PRIVATE</b> (the <b>type</b> only is visible and one can change its details easily), or {{all of it is}} PRIVATE (for internal use in the module only): ...|$|R
40|$|Introduction Whatever their {{original}} motivation, Ada's limited types have been extensively {{used to protect}} the integrity of various resources, e. g., the processor resources of tasks, the secondary storage resources of files, the storage resources of heap-allocated lists, the resources protected by "passwords" or unique "handles", the monetary resources of financial accounts. In other words, designers of <b>private</b> <b>types</b> {{are drawn to the}} use of a limited type when the a resource has a unique integrity that would be violated if the object were copied through the use of an assignment operation. The lack of the assignment operation for a limited type allows the designer of the type to completely control any copying operations, and therefore preserve the uniqueness of the protected resource's "object identity". Unfortunately, while the designer of a limited type can deny...|$|R
5000|$|... class Fruit <b>private</b> getter <b>type</b> : String @@types = {} of String => Fruit def initialize(@type) end def self.get_fruit_by_type(type : String) @@typestype ||= Fruit.new(type) end def self.show_all puts [...] "Number of {{instances}} made: #{@@types.size}" [...] @@types.each do |type, fruit| puts [...] "#{type}" [...] end puts end def self.size @@types.size endendFruit.get_fruit_by_type("Banana")Fruit.show_allFruit.get_fruit_by_type("Apple")Fruit.show_allFruit.get_fruit_by_type("Banana")Fruit.show_all ...|$|R
40|$|An {{automated}} method {{utilized to}} test the software components of COMPASS, an interactive computer aided scheduling system, is presented. Each package of this system introduces a <b>private</b> <b>type,</b> and works to construct instances of that type, along with read and write routines for that type. Generic procedures that can generate test drivers for these functions are given and show how the test drivers can read from a test data file the functions to call, the arguments for those functions, what the anticipated result should be, and whether an exception should be raised for the function given the arguments...|$|E
40|$|Kolotilin {{acknowledges}} {{financial support}} from the Australian Research Council. Zapechelnyuk acknowledges {{financial support from}} the Economic and Social Research Council (grant no. ES/N 01829 X/ 1) We study persuasion mechanisms in linear environments. A receiver has a <b>private</b> <b>type</b> and chooses between two actions. A sender designs a persuasion mechanism or an experiment to disclose information about a payoff-relevant state. A persuasion mechanism conditions information disclosure on the receiver's report about his type, whereas an experiment discloses information independent of the receiver's type. We establish the equivalence of implementation by persuasion mechanisms and by experiments, and characterize optimal persuasion mechanisms. PostprintPeer reviewe...|$|E
40|$|We provide {{efficient}} algorithms {{for finding}} approximate Bayes-Nash equilibria (BNE) in graphical, specifically tree, games of incomplete information. In such games an agentâ€™s payoff {{depends on its}} <b>private</b> <b>type</b> {{as well as on}} the actions of the agents in its local neighborhood in the graph. We consider two classes of such games: (1) arbitrary tree-games with discrete types, and (2) tree-games with continuous types but with constraints on the effect of type on payoffs. For each class we present a message passing on the game-tree algorithm that computes an É›-BNE in time polynomial in the number of agents and the approximation parameter 1 É›...|$|E
50|$|Through {{a partner}} program, XOJET {{has access to}} about 1,000 on-demand <b>private</b> aircraft; {{available}} <b>types</b> include the Hawker 400XP, Hawker 800XP and Gulfstream V.|$|R
40|$|The aim of {{this work}} is to map out the general {{requirements}} for content and types of internal directives for <b>private</b> non-profit <b>type</b> of organization - civic associations. After analyzing the use of directives {{in this type of}} organization dedicated to the work of drawing up the specific requirements in various civic-oriented organizations...|$|R
40|$|International audiencePsyche is a modular proof-search engine {{designed}} for either interactive or automated theorem proving, and aiming at two things: {{a high level}} of confidence about the output of the theorem proving process and the ability to apply and combine a wide range of techniques. It ad- dresses the first aim by adopting and extending the LCF architecture to guarantee, using <b>private</b> <b>types,</b> not only the correctness but also the com- pleteness of proof search. It addresses the second by offering a much more appropriate API than just the primitives corresponding to the inference rules of the logic in natural deduction: it uses instead a focused sequent calculus for polarised classical logic. Finally, Psyche features the ability to call decision procedures such as those used in Sat-Modulo-Theories solvers. We therefore illustrate Psyche by using it for SMT-solving...|$|R
