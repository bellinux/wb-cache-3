4714|5526|Public
25|$|In {{the diagram}} of a <b>Petri</b> <b>net</b> (see top figure right), places are {{conventionally}} depicted with circles, transitions with long narrow rectangles and arcs as one-way arrows that show connections {{of places to}} transitions or transitions to places. If the diagram were of an elementary net, then those places in a configuration would be conventionally depicted as circles, where each circle encompasses a single dot called a token. In the given diagram of a <b>Petri</b> <b>net</b> (see right), the place circles may encompass more than one token to show {{the number of times}} a place appears in a configuration. The configuration of tokens distributed over an entire <b>Petri</b> <b>net</b> diagram is called a marking.|$|E
25|$|A (marked) <b>Petri</b> <b>net</b> {{is called}} k-bounded, safe, or bounded {{when all of}} its places are.|$|E
25|$|Note that a <b>Petri</b> <b>net</b> is bounded if {{and only}} if its {{reachability}} graph is finite.|$|E
40|$|<b>Petri</b> <b>nets</b> are {{graphical}} {{and mathematical}} tools for studying discrete event systems. <b>Petri</b> <b>nets</b> {{have been under}} extensive development since Petri defined the language in 1962. Various extensions of <b>Petri</b> <b>nets</b> {{have been developed to}} study concurrent, asynchronous, distributed, parallel, deterministic, and stochastic system behavior. This paper provides a quick tutorial to learn the basic terminology, concepts, and applications of <b>Petri</b> <b>nets.</b> We introduce the fundamentals of <b>Petri</b> <b>nets</b> and black-and-white <b>Petri</b> <b>nets.</b> We show how to use <b>Petri</b> <b>nets</b> to model and analyze discrete event systems. We also describe some extensions of <b>Petri</b> <b>nets</b> and their applications. We provide a list of references for further reading. 1...|$|R
50|$|CPN Tools is a {{tool for}} editing, simulating, and {{analyzing}} high level <b>Petri</b> <b>nets.</b> It supports basic <b>Petri</b> <b>nets</b> plus timed <b>Petri</b> <b>nets</b> and Colored <b>Petri</b> <b>nets.</b> It has a simulator and a state space analysis tool is included.|$|R
40|$|Abstract. Algebraic <b>Petri</b> <b>nets</b> is a {{well suited}} {{formalism}} to represent the behavior of concurrent and distributed systems by handling complex data. For the analysis of systems modelled in Algebraic <b>Petri</b> <b>nets,</b> model checking and testing are used commonly. <b>Petri</b> <b>nets</b> slicing is getting an attention recently to improve the analysis of systems modelled in <b>Petri</b> <b>nets</b> or Algebraic <b>Petri</b> <b>nets.</b> This work is oriented to define Algebraic <b>Petri</b> <b>nets</b> slicing and implement it in a verification tool. ...|$|R
25|$|Extended {{free choice}} (EFC) – a <b>Petri</b> <b>net</b> {{that can be}} {{transformed}} into an FC.|$|E
25|$|A <b>Petri</b> <b>net</b> (graph) {{is called}} (structurally) bounded {{if it is}} bounded for every {{possible}} initial marking.|$|E
25|$|If a <b>Petri</b> <b>net</b> is {{equivalent}} to an elementary net, then Z can be the countable set {0,1} and those elements in P that map to 1 under M form a configuration. Similarly, if a <b>Petri</b> <b>net</b> is not an elementary net, then the multiset M {{can be interpreted as}} representing a non-singleton set of configurations. In this respect, M extends the concept of configuration for elementary nets to Petri nets.|$|E
40|$|This article {{presents}} several {{different kinds of}} <b>Petri</b> <b>nets,</b> together with computer tools based on them, and compares possibilities of their application {{in the area of}} simulation and modelling. Place/transition <b>Petri</b> <b>nets,</b> stochastic <b>Petri</b> <b>nets,</b> hierarchical coloured <b>Petri</b> <b>nets</b> and finally object oriented <b>Petri</b> <b>nets</b> are mentioned here. As for the tools, Design/CPN, TimeNET, LOOPN++ and PNtalk are briefly described and compared. The advantages and disadvantages of object orientation in <b>Petri</b> <b>nets</b> in connection to the system PNtalk are especially emphasized...|$|R
30|$|In {{elementary}} <b>Petri</b> <b>Nets,</b> tokens {{cannot be}} distinguished. However, modeling real complex systems requires {{the possibility of}} transforming the nature of tokens through a transition. Thereby, {{a new type of}} <b>Petri</b> <b>Nets</b> handling tokens transformation and labeled by a first-order language was born, called High-Level <b>Petri</b> <b>Nets.</b> The first interesting class of High Level <b>Petri</b> <b>Nets</b> was the “predicate/transition” nets developed by Hartmann Genrich [8]. The next step forward was achieved by the development of Algebraic <b>Petri</b> <b>Nets</b> [9], and later the development of Colored <b>Petri</b> <b>Nets</b> introduced by Kurt Jensen [10]. In the PERFECT project, Colored <b>Petri</b> <b>Nets</b> are considered rather than the other High-Level <b>Petri</b> <b>Nets</b> forms especially for their bigger modeling power in the case of complex railway systems.|$|R
40|$|Level <b>Petri</b> <b>Nets</b> are {{formalism}} for modeling hierarchical multi-agent system. They are a <b>Petri</b> <b>nets</b> extension, allowing tokens to be nets themselves. This {{paper is}} inspired by two classes of level Petri nets: object <b>Petri</b> <b>nets</b> and nested <b>Petri</b> <b>nets.</b> We present some concepts from the artificial intelligence field and we use them to illustrate the modeling power of <b>Petri</b> <b>nets</b> with multi levels...|$|R
25|$|There {{are many}} {{extensions}} to Petri nets. Some {{of them are}} completely backwards-compatible (e.g. coloured Petri nets) with the original <b>Petri</b> <b>net,</b> some add properties that cannot be modelled in the original <b>Petri</b> <b>net</b> formalism (e.g. timed Petri nets). Although backwards-compatible models do not extend the computational power of Petri nets, they may have more succinct representations and may be more convenient for modeling. Extensions that cannot be transformed into Petri nets are sometimes very powerful, but usually lack {{the full range of}} mathematical tools available to analyse ordinary Petri nets.|$|E
25|$|For example, {{if in the}} net N, {{both places}} are {{assigned}} capacity 2, we obtain a <b>Petri</b> <b>net</b> with place capacities, say N2; its reachability graph is displayed on the right.|$|E
25|$|A {{directed}} {{path in the}} <b>Petri</b> <b>net</b> {{is defined as the}} sequence of nodes (places and transitions) linked by the directed arcs. An elementary path includes every node in the sequence only once.|$|E
40|$|This paper {{deals with}} {{structuring}} mechanisms in <b>Petri</b> <b>nets,</b> with {{special emphasis on}} object orientation. Merging <b>Petri</b> <b>nets</b> and objects can bring some important benefits. It can solve both lack of modularity in <b>Petri</b> <b>nets</b> and lack of formality in object oriented paradigm. Proposed solution emphases simplicity and clarity of object oriented <b>Petri</b> <b>nets</b> definition. A language and system based on object oriented <b>Petri</b> <b>nets</b> is called PNtalk (right pronounciation is "pee-an-talk") {{and it can be}} used as a tool for modeling and simulation. Motivations to merging <b>Petri</b> <b>nets</b> and objects, used approach, and a brief description of PNtalk is presented in the paper. MOTIVATIONS <b>Petri</b> <b>nets,</b> especially high-level ones (Colored <b>Petri</b> <b>Nets,</b> CPN), are popular formalism for modeling of concurrent systems (Peterson 1981; Jensen 1991; Reisig 1992). <b>Petri</b> <b>nets</b> have some interesting features, such as intuitive understanding, graphical representation and simplicity, besides their rigorous formal nature whic [...] ...|$|R
40|$|This paper {{presents}} a new method of deadlock detection of protocols with non-FIFO channels using <b>Petri</b> <b>nets.</b> The protocols are translated into <b>Petri</b> <b>nets,</b> and {{the properties of}} these <b>Petri</b> <b>nets</b> are used. A efficient algorithm is given for detecting deadlocks by solving matrix equations of <b>Petri</b> <b>nets.</b> ...|$|R
50|$|His later {{career was}} devoted to his brainchild Object <b>Petri</b> <b>Nets</b> and the Nets within Nets paradigm; i.e., {{the idea of using}} <b>Petri</b> <b>nets</b> as tokens within <b>Petri</b> <b>nets.</b>|$|R
25|$|M : P → Z {{is a place}} multiset, where Z is a {{countable}} set. M {{extends the}} concept of configuration and is commonly described with reference to <b>Petri</b> <b>net</b> diagrams as a marking.|$|E
25|$|A Well-handled <b>Petri</b> <b>net</b> is a net {{in which}} there are no fully {{distinct}} elementary paths between a place and a transition (or transition and a place), i.e., if there are two paths between the pair of node then these paths share a node.|$|E
25|$|A {{place in}} a <b>Petri</b> <b>net</b> is called k-bounded {{if it does not}} contain more than k tokens in all {{reachable}} markings, including the initial marking; it is said to be safe if it is 1-bounded; it is bounded if it is k-bounded for some k.|$|E
30|$|<b>Petri</b> <b>nets.</b> It {{has long}} been {{recognized}} the suitability of <b>Petri</b> <b>nets</b> for performance and dependability of computer systems. <b>Petri</b> <b>nets</b> have been extended to consider stochastic transitions, in stochastic <b>Petri</b> <b>nets</b> (SPNs) and generalized SPNs (GSPNs). They have recently enjoyed a resurgence of interest in service-oriented systems to describe service orchestrations [67].|$|R
40|$|<b>Petri</b> <b>nets</b> is a {{very useful}} {{language}} to analyze and model system formally. Recently, many <b>Petri</b> <b>nets</b> mania devote their efforts to enhance and/or extend the expressive power of <b>Petri</b> <b>nets.</b> One of these efforts is to extend <b>Petri</b> <b>nets</b> with object-oriented concepts. Object-oriented paradigm provides very excellent concepts to model real-world problems. Object-oriented concepts can make us to build software system easily, intuitively, and naturaly. Several high-level <b>Petri</b> <b>nets</b> with the concepts of objects were suggested. These nets do not fully support the object-oriented concept, thus can not be called object-oriented <b>Petri</b> <b>nets.</b> Through our research, we propose a hierarchical object-oriented <b>Petri</b> <b>nets,</b> called HOONets (Hierarchical Object-Oriented <b>Petri</b> <b>Nets).</b> The formal syntax and semantics of HOONets are explained in detail. HOONets support wide range of object-oriented features including abstract, encapsulated and modularized object, object interaction by message passing, and inheri [...] ...|$|R
40|$|Abstract-This is a {{tutorial}} {{paper on}} <b>Petri</b> <b>nets.</b> <b>Petri</b> <b>nets,</b> as a graphical and mathematical tool, provide a uniform environment for modelling, formal analysis, {{and design of}} discrete event systems. The main objective {{of this paper is}} to introduce the fundamen-tal concepts of <b>Petri</b> <b>nets</b> to the researchers and practitioners, both from academia and industry, who are involved in the work in the areas of modelling and analysis of industrial types of systems, as well as those who may potentially be involved in these areas. The paper begins with an overview of applications of <b>Petri</b> <b>nets,</b> mostly industrial ones. Then, it proceeds with a description of <b>Petri</b> <b>nets,</b> properties, and analysis methods. The discussion of properties is put in the context of industrial applications. The analysis methods are illustrated using an example of a simple robotic assembly system. The performance analysis, using <b>Petri</b> <b>nets,</b> is discussed for deterministic and stochastic <b>Petri</b> <b>nets.</b> The presented techniques are illustrated by examples representing simple production systems. In addition, the paper introduces high-level <b>Petri</b> <b>nets,</b> fuzzy <b>Petri</b> <b>nets,</b> and temporal <b>Petri</b> <b>nets.</b> This is done in the context of application prospects. The paper also briefly discusses some of the reasons restricting the use of <b>Petri</b> <b>nets,</b> mostly, to academic institutions. I...|$|R
2500|$|A <b>Petri</b> <b>net</b> (called marked <b>Petri</b> <b>net</b> by some, see above) is a 4-tuple , where ...|$|E
2500|$|A <b>Petri</b> <b>net</b> graph (called <b>Petri</b> <b>net</b> by some, but see below) is a 3-tuple , where ...|$|E
2500|$|A vector {{addition}} {{system with}} states (VASS) is an equivalent formalism to Petri nets. [...] However, {{it can be}} superficially viewed as a generalisation of Petri nets. Consider a finite state automaton where each transition is labelled by a transition from the <b>Petri</b> <b>net.</b> The <b>Petri</b> <b>net</b> is then synchronised with the finite state automaton, i.e., a transition in the automaton is taken {{at the same time}} as the corresponding transition in the <b>Petri</b> <b>net.</b> It is only possible to take a transition in the automaton if the corresponding transition in the <b>Petri</b> <b>net</b> is enabled, and it is only possible to fire a transition in the <b>Petri</b> <b>net</b> if there is a transition from the current state in the automaton labelled by it. (The definition of VASS is usually formulated slightly differently.) ...|$|E
40|$|<b>Petri</b> <b>nets</b> {{are used}} as models {{in the study of}} {{networks}} involving information flows. <b>Petri</b> <b>nets</b> have also turned out to be useful in the study of many asynchronous concurrent systems. In this thesis, the notions of deadlocks, traps, and liveness are considered from a graph theoretic viewpointA characterization of minimal deadlocks and traps in <b>Petri</b> <b>nets</b> is obtained. For the complete <b>Petri</b> <b>nets,</b> alternative characterizations of deadlocks and traps are obtained. Necessary and sufficient conditions are obtained for complete <b>Petri</b> <b>nets</b> to be deadlock free. Similar conditions for trap free complete <b>Petri</b> <b>nets</b> are also determined. Department of Computer ScienceThesis (M. S. ...|$|R
40|$|Higher-order <b>Petri</b> <b>nets</b> are a {{class of}} {{high-level}} <b>Petri</b> <b>nets,</b> in which <b>Petri</b> <b>nets</b> themselves are first-class objects. Here tokens may represent <b>Petri</b> <b>nets</b> and <b>Petri</b> <b>nets</b> may be the values of parameters and variables, {{as well as the}} result of computations performed during the occurrence of transitions. These features facilitate a number of very powerful higher-order modelling techniques, making <b>Petri</b> <b>nets</b> much more flexible, compositional, and the resulting models more reusable. This work explores the usefulness of some of these techniques by looking at them from an application point of view and by illustrating them with small to medium-sized application examples...|$|R
5000|$|<b>Petri</b> <b>Nets,</b> {{for example}} Interaction <b>Petri</b> <b>Nets</b> and Open Workflow Nets ...|$|R
2500|$|Graphically, {{places in}} a <b>Petri</b> <b>net</b> may contain a {{discrete}} number of marks called tokens. [...] Any distribution of tokens over the places will represent a {{configuration of the}} net called a marking. [...] In an abstract sense relating to a <b>Petri</b> <b>net</b> diagram, a transition of a <b>Petri</b> <b>net</b> may fire if it is enabled, i.e. there are sufficient tokens {{in all of its}} input places; when the transition fires, it consumes the required input tokens, and creates tokens in its output places. [...] A firing is atomic, i.e. a single non-interruptible step.|$|E
2500|$|The term [...] {{high-level}} <b>Petri</b> <b>net</b> is {{used for}} many <b>Petri</b> <b>net</b> formalisms that extend the basic P/T net formalism; this includes coloured Petri nets, hierarchical Petri nets such as Nets within Nets, and all other extensions sketched in this section. [...] The term is also used specifically {{for the type of}} coloured nets supported by CPN Tools.|$|E
2500|$|The {{markings}} of a <b>Petri</b> <b>net</b> [...] can {{be regarded}} as vectors of nonnegative integers of length [...]|$|E
40|$|Protection schemes are {{modelled}} through <b>Petri</b> <b>Nets,</b> {{in order}} to carry out performance evaluation. Marked <b>Petri</b> <b>Nets</b> are suitable for qualitative evaluation, while Time <b>Petri</b> <b>Nets</b> and Timed <b>Petri</b> <b>Nets</b> are convenient for cycle time evaluations, and for deriving relationships between the time parameters of the primary and the secondary protection. Stochastic <b>Petri</b> <b>nets</b> are used for the modelling of the stochastic nature of protection; they enable the evaluation of probabilistic performance measures, and have advantages over simulation techniques...|$|R
40|$|We {{study the}} {{complexity}} of the reachability problem for a new subclass of <b>Petri</b> <b>nets</b> called simple-circuit <b>Petri</b> <b>nets,</b> which properly contains several well known subclasses such as conflict-free, BPP, normal <b>Petri</b> <b>nets</b> and more. A new decomposition approach is applied to developing an integer linear programming formulation for characterizing the reachability sets of such <b>Petri</b> <b>nets.</b> Consequently, the reachability problem is shown to be NP-complete. The model checking problem for some temporal logics is also investigated for simple-circuit <b>Petri</b> <b>nets...</b>|$|R
40|$|Abstract — In {{this paper}} {{we present a}} new {{approach}} to workflow analysis. There are efforts to design and verify workflow models using both Activity diagrams and <b>Petri</b> <b>nets.</b> We model the workflow using Activity diagrams, convert the Activity diagrams to <b>Petri</b> <b>nets</b> and use the theoretical results in <b>Petri</b> <b>nets</b> to analyze the equivalent <b>Petri</b> <b>nets</b> and infer properties of the original workflow. We have demonstrated the possibility by developing an Eclipse plug-in which can be used to model workflows using Activity Diagrams and then analyze these workflow models using <b>Petri</b> <b>nets.</b> Index Terms — workflow, activity diagrams, <b>Petri</b> <b>nets,</b> eclipse, workflow analysi...|$|R
