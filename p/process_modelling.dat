1918|10000|Public
25|$|In systems {{engineering}} and software engineering a function model is created with a functional modeling perspective. The functional perspective {{is one of}} the perspectives possible in business <b>process</b> <b>modelling,</b> other perspectives are for example behavioural, organisational or informational.|$|E
25|$|A {{market has}} {{developed}} for enterprise software leveraging the business process management concepts {{to organize and}} automate processes. The recent convergence of these software from distinct pieces such as business rules engine, business <b>process</b> <b>modelling,</b> business activity monitoring and Human Workflow has given birth to integrated Business Process Management Suites.|$|E
25|$|Specific Task Type: At this layer, we {{deal with}} <b>process</b> <b>modelling</b> in another scale, which is more linked to the concretisation, {{decomposition}} and specialisation phases. Here process models are expanded and elaborated to facilitate business solutions. From an integration viewpoint, this layer aims at uncovering more efficiently the dependencies between the sub-activities, with regards for the resources required for actual performance.|$|E
50|$|The term <b>process</b> <b>model</b> is used {{in various}} contexts. For example, in {{business}} <b>process</b> <b>modeling</b> the enterprise <b>process</b> <b>model</b> {{is often referred to}} as the business <b>process</b> <b>model.</b>|$|R
40|$|Part 2 – Flexibility Issues Part 3 – Flexibility Support for Pre-specified <b>Process</b> <b>Models</b> Pre-specified <b>process</b> <b>models</b> and flexibility-by-design <b>Process</b> {{configuration}} Flexible process {{execution and}} handling of anticipated exceptions Handling unforeseen exceptions Process Evolution Part 4 – Loosely-specified <b>Process</b> <b>Models</b> Loosely-specified <b>process</b> <b>models</b> Constraint-based <b>process</b> <b>models...</b>|$|R
40|$|Business <b>process</b> <b>models</b> can be {{constructed}} in different contexts and from different perspectives. Each modeling context prescribes a particular subspace of the potential business <b>process</b> <b>modeling</b> space, which can be characterized by certain business process dimensions. A normalized set of business <b>process</b> <b>modeling</b> dimensions {{may contribute to the}} clarity of business <b>process</b> <b>model</b> architectures, guide incremental business <b>process</b> <b>modeling,</b> and support business process analysis and visualization from different perspectives. Applicability of multidimensional business <b>process</b> <b>modeling</b> approach depends on the availability of appropriate business <b>process</b> <b>modeling</b> tools...|$|R
2500|$|Extended Enterprise Modeling Language (EEML) is a {{modelling}} language {{which combines}} structural modelling, business <b>process</b> <b>modelling,</b> goal modelling with goal hierarchies and resource modelling. It {{was intended to}} bridge the gap between goal modelling and other modelling approaches. According to Johannesson and Söderström (2008) [...] "the process logic in EEML is mainly expressed through nested structures of tasks and decision points. The sequencing of tasks is expressed by the flow relation between decision points. Each task has an input port and the output port being decision points for modeling process logic".|$|E
2500|$|<b>Process</b> <b>modelling</b> in EEML, {{according}} to Krogstie (2006) [...] "supports the modeling of process logic which is mainly expressed through nested structures of tasks and decision points. The sequencing {{of the tasks}} is expressed by the flow relation between decision points. Each task has minimum an input port and an output port being decision points for modeling process logic, Resource roles are used to connect resources of various kinds (persons, organisations, information, material objects, software tools and manual tools) to the tasks. In addition, data modeling (using UML class diagrams), goal modeling and competency modeling (skill requirements and skills possessed) can be integrated with the process models".|$|E
2500|$|... is a CSP {{analysis}} tool {{developed in}} the School of Computing at the National University of Singapore. PAT is able to perform refinement checking, LTL model-checking, and simulation of CSP and Timed CSP processes. The PAT process language extends CSP with support for mutable shared variables, asynchronous message passing, {{and a variety of}} fairness and quantitative time related process constructs such as deadline and waituntil. The underlying design principle of the PAT process language is to combine a high-level specification language with procedural programs (e.g. an event in PAT may be a sequential program or even an external C# library call) for greater expressiveness. Mutable shared variables and asynchronous channels provide a convenient syntactic sugar for well-known <b>process</b> <b>modelling</b> patterns used in standard CSP. The PAT syntax is similar, but not identical, to CSPM. The principal differences between the PAT syntax and standard CSPM are the use of semicolons to terminate process expressions, the inclusion of syntactic sugar for variables and assignments, and the use of slightly different syntax for internal choice and parallel composition.|$|E
40|$|Abstract. Reference <b>process</b> <b>models</b> capture {{recurrent}} business opera-tions {{in a given}} domain such as procurement or logistics. These {{models are}} intended to be configured to fit the requirements of specific orga-nizations or projects, leading to individualized <b>process</b> <b>models</b> that are subsequently used for domain analysis or solution design. Although the advantages of reusing reference <b>process</b> <b>models</b> compared to designing <b>process</b> <b>models</b> from scratch are widely accepted, the methods employed to configure reference <b>process</b> <b>models</b> are manual and error-prone. In par-ticular, analysts are left with the burden of ensuring the correctness of the individualized <b>process</b> <b>models</b> and to manually fix errors. This paper proposes a foundation for configuring reference <b>process</b> <b>models</b> incre-mentally {{and in a way}} that ensures the correctness of the individualized <b>process</b> <b>models,</b> both with respect to syntax and behavioral semantics. Specifically, assuming the reference <b>process</b> <b>model</b> is behaviorally sound, the individualized <b>process</b> <b>models</b> are guaranteed to be sound. Key words: Reference <b>process</b> <b>model,</b> model configuration, Petri net. ...|$|R
40|$|Abstract. <b>Process</b> <b>models</b> are {{a widely}} {{established}} means to capture business processes. Large organizations maintain <b>process</b> <b>model</b> collections {{with hundreds of}} <b>process</b> <b>models.</b> Maintenance of these collections can be supported by business <b>process</b> <b>model</b> abstraction. Given a detailed model, an abstraction technique derives a coarse grained <b>process</b> <b>model</b> that preserves the essential process properties. In this paper, we introduce Flexab, a tool that realizes flexible <b>process</b> <b>model</b> abstraction. Arbitrary groups of activities may be selected for abstraction. Flexab is realized in a mashup environment, which allows for creating different abstracted versions of a <b>process</b> <b>model</b> and comparing them on a single screen. Keywords: <b>Process</b> <b>Model</b> Abstraction, Model Synthesis. ...|$|R
40|$|Abstract While factors {{impacting}} <b>process</b> <b>model</b> comprehension {{are relatively}} well understood by now, little is know about <b>process</b> <b>model</b> creation and factors impacting <b>process</b> <b>model</b> quality. This paper proposes a research model to inves-tigate {{the influence of}} cognitive abilities and a continuous psycho-physiological measure of task imposed cognitive load of <b>process</b> <b>model</b> designers on <b>process</b> <b>model</b> quality. The proposed research will not only contribute a better under-standing of <b>process</b> <b>model</b> creation, but bears significant potential for improving existing modeling notations {{as well as for}} developing <b>process</b> <b>modeling</b> environments...|$|R
50|$|In {{the field}} of {{software}} engineering, the term 'business process modelling' opposed the common software <b>process</b> <b>modelling,</b> aiming {{to focus more on}} the state of the practice during software development. In that time (early 1990s) all existing and new modelling techniques to illustrate business processes were consolidated as 'business <b>process</b> <b>modelling</b> languages'. In the Object Oriented approach, it was considered to be an essential step in the specification of business application systems. Business <b>process</b> <b>modelling</b> became the base of new methodologies, for instance those that supported data collection, data flow analysis, process flow diagrams and reporting facilities. Around 1995, the first visually oriented tools for business <b>process</b> <b>modelling</b> and implementation were being presented.|$|E
50|$|ASCEND {{is an open}} source, {{mathematical}} modelling chemical <b>process</b> <b>modelling</b> system developed at Carnegie Mellon University since late 1978. ASCEND is an acronym which stands for Advanced System for Computations in Engineering Design. Its main uses {{have been in the}} field of chemical <b>process</b> <b>modelling</b> although its capabilities are general. It was a pioneering piece of software in the chemical <b>process</b> <b>modelling</b> field, with its novel modelling language conventions and powerful solver, although it has never been commercialized and remains as an open source software project.|$|E
50|$|The CAPE-OPEN Interface Standard {{consists}} {{of a series of}} specifications to expand the range of application of process simulation technologies. The CAPE-OPEN specifications comprise a set of software interfaces that allow plug and play inter-operability between a given <b>Process</b> <b>Modelling</b> Environment (PME) and a third-party <b>Process</b> <b>Modelling</b> Component (PMC).|$|E
40|$|Reference <b>process</b> <b>models</b> capture {{recurrent}} {{business operations}} {{in a given}} domain such as procurement or logistics. These models are intended to be configured to fit the requirements of specific organizations or projects, leading to individualized <b>process</b> <b>models</b> that are subsequently used for domain analysis or solution design. Although the advantages of reusing reference <b>process</b> <b>models</b> compared to designing <b>process</b> <b>models</b> from scratch are widely accepted, the methods employed to configure reference <b>process</b> <b>models</b> are manual and error-prone. In particular, analysts are left with the burden of ensuring the correctness of the individualized <b>process</b> <b>models</b> and to manually fix errors. This paper proposes a foundation for configuring reference <b>process</b> <b>models</b> incrementally {{and in a way}} that ensures the correctness of the individualized <b>process</b> <b>models,</b> both with respect to syntax and behavioral semantics. Specifically, assuming the reference <b>process</b> <b>model</b> is behaviorally sound, the individualized <b>process</b> <b>models</b> are guaranteed to be sound...|$|R
40|$|Software {{development}} {{life cycle}} (SDLC) is a <b>process</b> <b>model</b> adopted and followed {{during the development}} of software [...] Software Engineering encompasses software engineering <b>process</b> <b>models,</b> project planning, management, and Software Development Life Cycle activities. In this paper, we are proposing a software <b>process</b> <b>model</b> for architecture-based software development from the conventional models by taking spiral <b>process</b> <b>model.</b> This <b>process</b> <b>model</b> is coined a...|$|R
40|$|Process {{discovery}} algorithms typically aim at {{discovering a}} <b>process</b> <b>model</b> from an event log that best describes the recorded behavior. However, multiple quality dimensions {{can be used}} to evaluate a <b>process</b> <b>model.</b> In previous work we showed that there often is not one single <b>process</b> <b>model</b> that describes the observed behavior best in all quality dimensions. Therefore, we present an extension to our flexible ETM algorithm that does not result in a single best <b>process</b> <b>model</b> but in a collection of mutually non-dominating <b>process</b> <b>models.</b> This is achieved by constructing a Pareto front of <b>process</b> <b>models.</b> We show by applying our approach on a real life event log that the resulting collection of <b>process</b> <b>models</b> indeed contains several good candidates. Furthermore, by presenting a collection of <b>process</b> <b>models,</b> we show that it allows the user to investigate the different trade-offs between different quality dimensions. Keywords: <b>Process</b> mining; <b>Process</b> <b>model</b> quality; <b>Process</b> <b>model</b> collectio...|$|R
5000|$|Business <b>process</b> <b>modelling,</b> {{not to be}} {{confused}} with the wider Business Process Management (BPM) discipline, is the activity of representing processes of an enterprise, so that the current ("as is") process may be analyzed and improved in future ("to be"). Business <b>process</b> <b>modelling</b> is typically performed by business analysts and managers who are seeking to improve process efficiency and quality. The process improvements identified by business <b>process</b> <b>modelling</b> may or may not require Information Technology involvement, although that is a common driver for the need to model a business process, by creating a process master.|$|E
5000|$|<b>Process</b> <b>modelling</b> such as BPMN, CIMOSA, DYA, IDEF3, LOVEM, PERA, etc.|$|E
50|$|Business <b>process</b> <b>modelling</b> tools provide {{business}} {{users with}} the ability to model their business processes, implement and execute those models, and refine the models based on as-executed data. As a result, business <b>process</b> <b>modelling</b> tools can provide transparency into business processes, as well as the centralization of corporate business process models and execution metrics.|$|E
40|$|Business <b>process</b> <b>modeling</b> {{has gained}} {{widespread}} acceptance and is {{employed as a}} design and management technique {{for a wide variety}} of purposes. While there has been much research on <b>process</b> <b>modeling</b> techniques and corresponding tools, there has been little empirical research into the important factors of effective <b>process</b> <b>modeling,</b> and the post-hoc evaluation of <b>process</b> <b>modeling</b> success. This study is the first that attempts to identify <b>process</b> <b>modeling</b> success factors and measures. This paper reports on the consolidated research findings of three case studies conducted in leading Australian organizations. It reports on an empirically derived <b>Process</b> <b>Modeling</b> Success model with success factors and success measures of business <b>process</b> <b>modeling...</b>|$|R
40|$|Abstract—Modern {{business}} <b>process</b> <b>modeling</b> environments support distributed {{development by}} means of model version control, i. e. comparison and merging of two different model versions. This is a challenging task since most modeling languages support an almost arbitrary creation of <b>process</b> <b>models.</b> Thus, in multi-developer environments, <b>process</b> <b>models</b> or parts of them are often syntactically very different but semantically equivalent. Hence, the comparison of business <b>process</b> <b>models</b> must be performed on a semantic level rather then on a syntactic level. For the domain of business <b>process</b> <b>modeling,</b> this problem is yet unsolved. This paper describes an approach that allows the semantic comparison of different business <b>process</b> <b>models</b> using a normal form. For that purpose, the <b>process</b> <b>models</b> are fully automati-cally translated into <b>process</b> <b>model</b> terms and normalized usin...|$|R
40|$|Abstract. Recently, {{research}} on quality issues of business <b>process</b> <b>models</b> {{has begun to}} investigate the <b>process</b> of <b>process</b> <b>modeling,</b> i. e., {{the process of creating}} <b>process</b> <b>models.</b> In particular, it has been recognized that during this process, well-functioning communication between domain experts and system analysts is essential for understandable <b>process</b> <b>models.</b> This paper proposes the LiProMo approach to foster communication among system analysts and domain experts by flexibly interlinking textual descriptions and formal <b>process</b> <b>models.</b> The feasibility of LiProMo is shown by a prototypical implementation as well as a visionary scenario that illustrates the usage and benefits of LiProMo. The adoption of Cheetah Experimental Platform as basis for the prototye will support empirical evaluation of LiProMo, as planned for future work. Key words: business <b>process</b> <b>modeling,</b> <b>process</b> of <b>process</b> <b>modeling,</b> literate <b>process</b> <b>modeling...</b>|$|R
5000|$|... #Caption: Example of {{business}} <b>process</b> <b>modelling</b> with Business Process Model and Notation.|$|E
50|$|Other {{technologies}} {{related to}} business <b>process</b> <b>modelling</b> include model-driven architecture and service-oriented architecture.|$|E
50|$|Courses may {{focus on}} {{information}} systems development, database management, information systems architectures, business intelligence, or business <b>process</b> <b>modelling.</b>|$|E
40|$|Abstract. Research {{on quality}} issues of {{business}} <b>process</b> <b>models</b> has {{recently begun to}} explore {{the process of creating}} <b>process</b> <b>models.</b> As a consequence, the question arises whether different ways of creating <b>process</b> <b>models</b> exist. In this vein, we observed 115 students engaged in the act of modeling, recording all their interactions with the modeling environment using a specialized tool. The recordings of <b>process</b> <b>modeling</b> were subsequently clustered. Results presented in this paper suggest the existence of three distinct modeling styles, exhibiting significantly different characteristics. We believe that this finding constitutes another building block toward a more comprehensive understanding of the <b>process</b> of <b>process</b> <b>modeling</b> that will ultimately enable us to support modelers in creating better business <b>process</b> <b>models.</b> Key words: business <b>process</b> <b>modeling,</b> <b>process</b> of <b>process</b> <b>modeling,</b> modeling styles, cluster analysis...|$|R
40|$|Abstract. This paper {{addresses}} the following problem: given two busi-ness <b>process</b> <b>models,</b> create a <b>process</b> <b>model</b> {{that is the}} union of the <b>process</b> <b>models</b> given as input. In other words, {{the behavior of the}} pro-duced <b>process</b> <b>model</b> should encompass that of the input models. The paper describes an algorithm that produces a single configurable <b>process</b> <b>model</b> from a pair of <b>process</b> <b>models.</b> The algorithm works by extracting the common parts of the input <b>process</b> <b>models,</b> creating a single copy of them, and appending the differences as branches of configurable connec-tors. This way, the merged <b>process</b> <b>model</b> is kept as small as possible, while still capturing all the behavior of the input models. Moreover, ana-lysts are able to trace back which model(s) a given element in the merged model originates from. The algorithm has been prototyped and tested against <b>process</b> <b>models</b> taken from several application domains. ...|$|R
40|$|This article {{studies the}} problem of {{transforming}} a <b>process</b> <b>model</b> with an arbitrary topology into an equivalent well-structured <b>process</b> <b>model.</b> While this problem has received significant attention, {{there is still no}} full characterization of the class of unstructured <b>process</b> <b>models</b> that can be transformed into well-structured ones, nor an automated method for structuring any <b>process</b> <b>model</b> that belongs to this class. This article fills this gap in the context of acyclic <b>process</b> <b>models.</b> The article defines a necessary and sufficient condition for an unstructured acyclic <b>process</b> <b>model</b> to have an equivalent well-structured <b>process</b> <b>model</b> under fully concurrent bisimulation, as well as a complete structuring method. The method has been implemented as a tool that takes <b>process</b> <b>models</b> captured in the BPMN and EPC notations as input. The article also reports on an empirical evaluation of the structuring method using a repository of <b>process</b> <b>models</b> from commercial practice...|$|R
5000|$|... 1996. On {{engineering}} support for business <b>process</b> <b>modelling</b> and redesign. Enschede : Centre for Telematics and Information Technology ...|$|E
50|$|Process Systems Enterprise Limited of London W6 for gPROMS - {{advanced}} <b>process</b> <b>modelling</b> {{simulation software}} and optimisation and services.|$|E
5000|$|... #Caption: Example of {{business}} process modeling {{of a process}} with a normal flow with the Business <b>Process</b> <b>Modelling</b> Notation ...|$|E
40|$|This paper {{addresses}} the following problem: given two business <b>process</b> <b>models,</b> create a <b>process</b> <b>model</b> {{that is the}} union of the <b>process</b> <b>models</b> given as input. In other words, {{the behavior of the}} produced <b>process</b> <b>model</b> should encompass that of the input models. The paper describes an algorithm that produces a single configurable <b>process</b> <b>model</b> from a pair of <b>process</b> <b>models.</b> The algorithm works by extracting the common parts of the input <b>process</b> <b>models,</b> creating a single copy of them, and appending the differences as branches of configurable connectors. This way, the merged <b>process</b> <b>model</b> is kept as small as possible, while still capturing all the behavior of the input models. Moreover, analysts are able to trace back which model(s) a given element in the merged model originates from. The algorithm has been prototyped and tested against <b>process</b> <b>models</b> taken from several application domains...|$|R
40|$|In {{this paper}} we {{introduce}} an incremental approach to software process management. This approach covers the complete {{life cycle of}} software <b>process</b> <b>models,</b> i. e. it deals with software <b>process</b> <b>modeling,</b> software <b>process</b> <b>model</b> analysis, and software <b>process</b> <b>model</b> enaction. It {{is based on a}} net-based software <b>process</b> <b>modeling</b> language, called FUNSOFT nets. FUNSOFT nets are high level Petri nets adapted to the application domain of software <b>process</b> management. We <b>model</b> software <b>processes</b> by means of different views onto a software <b>process</b> <b>model.</b> Our approach is incremental inasmuch as incomplete software <b>process</b> <b>models</b> can be analyzed and inasmuch as the enaction of incomplete software <b>process</b> <b>models</b> and the modeling of missing parts can be intertwined. Our approach is implemented in a software process management environment, called MELMAC. Details about particular features of the MELMAC approach to software process management have already been described in other papers. The on-the-fly change mechanism for software <b>process</b> <b>models</b> has, for example, already been described in [8], details about the analysis of software <b>process</b> <b>models</b> have been described in [18]. Thus, this paper does not focus on particular features of individual software process management activities supported by MELMAC, but it points out how software <b>process</b> <b>modeling,</b> software <b>process</b> <b>model</b> analysis, and software <b>process</b> <b>model</b> enaction are related in MELMAC and how these activities can be interleaved. (orig.) Available from TIB Hannover: RR 9963 (2) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekSIGLEDEGerman...|$|R
40|$|One can fairly {{adopt the}} ideas of Donald E. Knuth to {{conclude}} that <b>process</b> <b>modeling</b> is both a science and an art. <b>Process</b> <b>modeling</b> does have an aesthetic sense. Similar to composing an opera or writing a novel, <b>process</b> <b>modeling</b> is carried out by humans who undergo creative practices when engineering a <b>process</b> <b>model.</b> Therefore, the very same <b>process</b> can be <b>modeled</b> in a myriad number of ways. Once <b>modeled,</b> <b>processes</b> can be analyzed by employing scientific methods. Usually, <b>process</b> <b>models</b> are formalized as directed graphs, with nodes representing tasks and decisions, and directed arcs describing temporal constraints between the nodes. Common process definition languages, such as Business <b>Process</b> <b>Model</b> and Notation (BPMN) and Event-driven Process Chain (EPC) allow process analysts to define models with arbitrary complex topologies. The absence of structural constraints supports creativity and productivity, {{as there is no}} need to force ideas into a limited amount of available structural patterns. Nevertheless, it is often preferable that models follow certain structural rules. A well-known structural property of <b>process</b> <b>models</b> is (well-) structuredness. A <b>process</b> <b>model</b> is (well-) structured if and only if every node with multiple outgoing arcs (a split) has a corresponding node with multiple incoming arcs (a join), and vice versa, such that the set of nodes between the split and the join induces a single-entry-single-exit (SESE) region; otherwise the <b>process</b> <b>model</b> is unstructured. The motivations for well-structured <b>process</b> <b>models</b> are manifold: (i) Well-structured <b>process</b> <b>models</b> are easier to layout for visual representation as their formalizations are planar graphs. (ii) Well-structured <b>process</b> <b>models</b> are easier to comprehend by humans. (iii) Well-structured <b>process</b> <b>models</b> tend to have fewer errors than unstructured ones and it is less probable to introduce new errors when modifying a well-structured <b>process</b> <b>model.</b> (iv) Well-structured <b>process</b> <b>models</b> are better suited for analysis with many existing formal techniques applicable only for well-structured <b>process</b> <b>models.</b> (v) Well-structured <b>process</b> <b>models</b> are better suited for efficient execution and optimization, e. g., when discovering independent regions of a <b>process</b> <b>model</b> that can be executed concurrently. Consequently, there are <b>process</b> <b>modeling</b> languages that encourage well-structured modeling, e. g., Business Process Execution Language (BPEL) and ADEPT. However, the well-structured <b>process</b> <b>modeling</b> implies some limitations: (i) There exist processes that cannot be formalized as well-structured <b>process</b> <b>models.</b> (ii) There exist processes that when formalized as well-structured <b>process</b> <b>models</b> require a considerable duplication of modeling constructs. Rather than expecting well-structured modeling from start, we advocate for the absence of structural constraints when modeling. Afterwards, automated methods can suggest, upon request and whenever possible, alternative formalizations that are "better" structured, preferably well-structured. In this thesis, we study the problem of automatically transforming <b>process</b> <b>models</b> into equivalent well-structured models. The developed transformations are performed under a strong notion of behavioral equivalence which preserves concurrency. The findings are implemented in a tool, which is publicly available...|$|R
