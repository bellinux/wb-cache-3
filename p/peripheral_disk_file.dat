0|738|Public
50|$|The {{architecture}} of TurboDOS {{can be viewed}} as a three-level hierarchy. The highest level of the hierarchy is the process level. TurboDOS can support many concurrent processes at this level. The intermediate level of the hierarchy is the kernel level. The kernel supports the 93 C-functions and T-functions, and controls the sharing of computer resources such as processor time, memory, <b>peripheral</b> devices, and <b>disk</b> <b>files.</b> Processes make requests of the kernel through the entrypoint module OSNTRY, which decodes each C-function and T-function by number and invokes the appropriate kernel module.|$|R
25|$|Older {{versions}} of Virtual PC (v5.0 or earlier) {{may have the}} hard disk formatted after creating the Virtual Hard <b>Disk</b> <b>file.</b> Newer versions must partition and format the Virtual Hard <b>Disk</b> <b>file</b> manually.|$|R
5000|$|<b>Disk</b> <b>File</b> Controller, {{which was}} a {{modified}} Tape Controller, connected to a Bryant <b>Disk</b> <b>File,</b> which had 25 disks that were 39" [...] in diameter, 125 read/write heads that were hydraulically actuated, and had a total capacity of 26 megabytes ...|$|R
5000|$|Virtual file system: {{abstract}} file system that transparently allows access to <b>disk</b> <b>files,</b> memory files, [...]zip files and [...]gz files.|$|R
5000|$|... 2000 Establishment of the Australian subsidiary; {{launch of}} the PocketDrive, a 2.5" [...] <b>peripheral</b> <b>disk</b> drive.|$|R
5000|$|<b>Disk</b> <b>files</b> {{primarily}} represent one of {{the following}} structures: ...|$|R
5000|$|<b>Disk</b> <b>File</b> Controller, {{which was}} a {{modified}} Tape Controller, connected to the ...|$|R
5000|$|HISTCOPY (*), to {{copy the}} System History <b>file</b> to a <b>disk</b> <b>file.</b>|$|R
5000|$|Optimize {{virtual machine}} I/O with {{adjustable}} volume, <b>disk,</b> <b>file</b> and block sizes.|$|R
50|$|The IBM 350 <b>Disk</b> <b>File</b> was {{developed}} under the code-name RAMAC by an IBM San Jose {{team led by}} Reynold Johnson. It was announced in 1956 with the then new IBM 305 RAMAC computer. A variant the IBM 355 <b>Disk</b> <b>File</b> was simultaneous announced with the IBM RAM 650 computer, an enhancement to the IBM 650.|$|R
5000|$|Block Optimization Support: Intelligent {{skipping}} of unused blocks {{within a}} virtual <b>disk</b> <b>file</b> ...|$|R
50|$|Tapes and IBM <b>disk</b> <b>files</b> were {{supported}} {{as well as}} native VPS text files.|$|R
5000|$|IBM LTFS Enterprise Edition - run {{applications}} {{designed for}} <b>disk</b> <b>files</b> from tape storage.|$|R
40|$|File {{system design}} {{has never been}} a {{straight}} forward task. Moreover, designing and developing a <b>disk</b> <b>file</b> system is a complex case of file system development. From time to time, since the inception of first magnetic disk in 1956, many <b>disk</b> <b>file</b> systems were drafted and implemented to fit the need of users and/or to cope up with the change in hardware technology. This has resulted into many objective specific <b>disk</b> <b>file</b> systems and hence, no generalized design guidelines or criteria have been developed. In this paper, we take some historical facts and current trends in digital world as a base to figure out 3 basic design parameters for designing and developing a <b>disk</b> <b>file</b> system which are affected by the change in hardware technology and user requirements. In each identified design parameter, we give a brief introduction of some novel approach to mitigate the parameter. Furthermore, we also introduce a new file system benchmarking technique to overcome problems found in existing techniques. The goal {{of this paper is to}} organize the design considerations for developing a <b>disk</b> <b>file</b> system and thus, help a file system designer to efficiently design and develop a new file system from scratch or refine or fine tune existing ones...|$|R
5000|$|Gramophone (recorded on {{underside}} of flat, transparent <b>disk),</b> <b>filed</b> November 7, 1887, issued July 1896 ...|$|R
5000|$|... "BESYS was {{a complex}} {{software}} package that provided convenient input/output and integrated <b>disk</b> <b>file</b> storage facilities." ...|$|R
50|$|IBM {{mainframes}} in the 1970s {{could share}} physical <b>disks</b> and <b>file</b> systems if each machine {{had its own}} channel connection to the drives' control units. In the 1980s, Digital Equipment Corporation's TOPS-20 and OpenVMS clusters (VAX/ALPHA/IA64) included shared <b>disk</b> <b>file</b> systems.|$|R
50|$|A valid boot sector on the floppy disk, not in {{the format}} of a normal <b>disk</b> <b>file.</b>|$|R
5000|$|<b>Disk</b> <b>file</b> and device backup {{and restore}} {{utilities}} with streaming support for streaming tape drives supported by RSTS/E.|$|R
5000|$|Virtual mode: The mapped disk is {{presented}} {{as if it is}} a logical volume, or a virtual <b>disk</b> <b>file,</b> to the guest operating system and its real hardware characteristics are hidden. In this mode, file locking provides data protection through isolation for concurrent updates; the copy on write operation enables snapshots. Virtual mode also offers portability across storage hardware because it presents the consistent behavior as a virtual <b>disk</b> <b>file.</b>|$|R
5000|$|Z-SAN is a {{proprietary}} type of {{storage area network}} licensed by Zetera corporation. Z-SAN hardware is bundled with {{a modified version of}} SAN-FS, which is a shared <b>disk</b> <b>file</b> system driver and management software product SAN File System (SFS) made by DataPlow. [...] The shared <b>disk</b> <b>file</b> system allows multiple computers to access the same volume at block level. Zetera calls their version of the file system Z-SAN.|$|R
5000|$|Btrfs, XFS, and ext4 are all {{supported}} file {{systems for}} virtual <b>disk</b> <b>files</b> {{used with the}} “vdisk_fileio” device handler.|$|R
5000|$|Some early {{operating}} systems {{were capable of}} handling only tape and <b>disk</b> <b>file</b> systems. These provided {{the most basic of}} interfaces with: ...|$|R
50|$|The above code {{defines a}} tape file on channel 1 called OUT, a {{sequential}} 1301/1302 <b>disk</b> <b>file</b> called DAFILE and a card file called CONSFILE.|$|R
5000|$|... "The OPEN command opens {{communication}} with a device, {{which can be}} a <b>disk</b> <b>file,</b> a window, a dynamic link library or a serial communications port." ...|$|R
5000|$|Note that System/34 {{files are}} not part of libraries. If a <b>disk</b> <b>file</b> is named FNF001, then an OPEN {{statement}} like this one can work: ...|$|R
50|$|Because {{mechanical}} disks {{have much}} {{longer and more}} unpredictable response times, swapping to <b>disk</b> <b>files</b> is not used {{for the same reasons}} as RAM allocation discussed above.|$|R
5000|$|Errors {{that occur}} while data {{flow in the}} {{pipeline}} can be detected by all participating programs. For example, a <b>disk</b> <b>file</b> might not be replaced in such circumstances.|$|R
50|$|The compilers were {{released}} in various versions, of increasing sophistication. Initially paper tape and cards {{were used for}} input and output, later magnetic tape and finally <b>disk</b> <b>files.</b>|$|R
5000|$|Recording and Reproducing Speech and Other Sounds (improvements include {{compliant}} cutting head, wax surface, {{and constant}} linear velocity <b>disk),</b> <b>filed</b> June 1885, issued May 1886 (with Charles Tainter) ...|$|R
50|$|MTS input/output is {{record or}} line oriented. Programs read lines from a terminal, card reader, <b>disk</b> <b>file,</b> or tape and write lines to a terminal, printer, <b>disk</b> <b>file,</b> or tape. Conversion {{to and from}} ASCII/EBCDIC and end-of-line {{processing}} is usually done by a front end processor or Device Support Routine (DSR) and so is not a concern of most programs. While {{it is possible to}} do character I/O to a terminal by reading or writing single character lines, reading or writing many such very short lines is not very efficient.|$|R
50|$|The CXFS {{file system}} (Clustered XFS) is a {{proprietary}} shared <b>disk</b> <b>file</b> system designed by Silicon Graphics (SGI) specifically {{to be used}} in a storage area network (SAN) environment.|$|R
50|$|Quarantine is a {{function}} of antivirus software that isolates infected files on a computer's hard <b>disk.</b> <b>Files</b> put in quarantine are no longer capable of infecting their hosting system.|$|R
50|$|Some {{low-cost}} peripherals {{no longer}} contain non-volatile memory for firmware, and instead {{rely on the}} host system to transfer the device control program from a <b>disk</b> <b>file</b> or CD.|$|R
50|$|Additional S-100 slots were {{required}} for cards controlling <b>peripherals,</b> <b>disk</b> drives, and I/O interfaces. Communication with the processor was normally performed through a TU-ART or other S-100 bus compatible interface card, which could run a CRT terminal or teletype.|$|R
5000|$|Bryant PH 2000 <b>Disk</b> <b>File,</b> {{which had}} 24 disks that were 39 inches in diameter, 125 read/write heads that were {{hydraulically}} actuated, {{and had a}} total capacity of 26 MB ...|$|R
