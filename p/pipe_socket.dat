3|47|Public
5000|$|The {{other major}} {{technique}} is socket fusion. It is distinguished from butt-welding by using custom-shaped and -sized heating plates {{rather than a}} basic flat surface. These heads allow for more surface contact, reducing {{the time needed to}} heat and fuse the <b>pipe.</b> <b>Socket</b> fusion joins pipe and fittings together, rather than simply joining pipe to pipe. It requires less pressure than butt-welding and is more commonly used on smaller sizes of pipe (4" [...] or less). Socket welding has additional advantages of requiring less machinery and is more portable than the heavier equipment required for butt fusion.|$|E
40|$|The {{description}} {{refers to}} a hose securing device {{which is used to}} secure a hose on a hollow cylindrical body such as a <b>pipe</b> <b>socket</b> or similar, and a process for its automatic assembly. The hose securing device consists of two parts, and in assembled state, exerts a force caused by prestressing on the hose. The invention is characterized by the hose securing device consisting of two identically shaped parts which are joined by two locking mechanisms each comprising a catch device and a catch spring. The assembly process which can also be performed manually is specially suited for automated assembly using an industrial robot, whereby the assembly of the hose onto the <b>pipe</b> <b>socket</b> is completely isolated from the following assembly of the hose securing element...|$|E
40|$|The {{description}} {{relates to}} a process and a device or a tool for the fully automatic assembly of hose locking devices, in particular worm drive hose clips which are attached by a screw connection to lock a hose to a solid or hollow body such as a <b>pipe</b> <b>socket</b> or similar. The invention {{is characterized by the}} fact that an open, unscrewed hose locking device is bent at its point of fixture about the hose in a bending and shaping operation, the tip of the hose locking device is introduced into its lock, and the screw thread in the lock is tightened to secure the hose locking device. The assembly process or the corresponding tool are particularly suitable for a fully automated assembly of hose locking devices by means of an industrial robot, whereby hose assembly on the connecting sockets is fully separated from the following assembly of the hose locking device...|$|E
50|$|Unlike named <b>pipes,</b> <b>sockets</b> {{are fully}} duplex-capable.|$|R
5000|$|Interface with servers via TCP/IP, named <b>pipes</b> (<b>sockets)</b> or a {{tunneling}} protocol (SSH) ...|$|R
5000|$|Simplify {{use with}} data {{compression}} and with non seeking storage (<b>pipes,</b> <b>sockets,</b> tape).|$|R
50|$|Most {{operating}} systems offer primitives such as <b>pipes,</b> <b>sockets</b> or shared memory {{to pass data}} among programs, but often the simplest way (especially for programs that follow the Unix philosophy) is to write data into a temporary file and inform the receiving program of {{the location of the}} temporary file.|$|R
50|$|When {{the media}} header is modified, {{either at the}} end of imagecreation or as part of later {{modifications}} to an existingimage, only some specific fields are to be updated. Thesefields exist entirely within the media header patch area.Only the media header patch area should be re-written. Thisallows more options when dealing with image container fileformats or transports with limited seeking or overwritecapability (compressed formats, <b>pipes,</b> <b>sockets).</b>|$|R
5000|$|Oracle Protocol Support: {{interfaces}} with underlying networking protocols such as TCP/IP, named <b>pipes,</b> or <b>Sockets</b> Direct Protocol (SDP).|$|R
5000|$|ObjectiveFS {{implements}} a log {{structured file}} system {{on top of}} object stores (such as Amazon S3, Google Cloud Storage and other object store devices). [...] It is a POSIX compliant file system and supports features such as dynamic file system size, soft and hard links, unix attributes, extended attributes, Unix timestamps, users and permissions, no limit on file size, atomic renames, atomic file creation, directory renames, read and write anywhere in a file, named <b>pipes,</b> <b>sockets,</b> etc.|$|R
5000|$|... {{advanced}} data access (DAO), <b>pipes,</b> Windows <b>sockets,</b> serial ports: in the Windows version, Proteus includes hundreds of system calls which are operating system-specific; ...|$|R
50|$|A {{number of}} {{programs}} also use Mailslots to communicate. Generally these are amateur chat clients and other such programs. Commercial programs usually prefer <b>pipes</b> or <b>sockets.</b>|$|R
50|$|Tools like netcat and socat {{can connect}} <b>pipes</b> to TCP/IP <b>sockets.</b>|$|R
50|$|DMTCP (Distributed MultiThreaded Checkpointing) is a {{tool for}} transparently {{checkpointing}} the state of an arbitrary group of programs spread across many machines and connected by sockets. It does not modify the user's program or the operating system. Among the applications supported by DMTCP are Open MPI, Python, Perl, and many programming languages and shell scripting languages. With the use of TightVNC, it can also checkpoint and restart X Window applications, {{as long as they}} do not use extensions (e.g. no OpenGL or video). Among the Linux features supported by DMTCP are open file descriptors, <b>pipes,</b> <b>sockets,</b> signal handlers, process id and thread id virtualization (ensure old pids and tids continue to work upon restart), ptys, fifos, process group ids, session ids, terminal attributes, and mmap/mprotect (including mmap-based shared memory). DMTCP supports the OFED API for InfiniBand on an experimental basis.|$|R
50|$|Open {{files in}} the system include disk files, named <b>pipes,</b> network <b>sockets</b> and devices opened by all processes. One use for this command is when a disk cannot be {{unmounted}} because (unspecified) files are in use. The listing of open files can be consulted (suitably filtered if necessary) to identify the process that is using the files.|$|R
40|$|Many {{applications}} involve several processes {{which have}} {{to communicate with}} each other. These communications are local if all the processes are on the same machine. And they are remote for distributed applications. Of course, in the second case, {{the most important part of}} the communications are between different systems. But, these processes need also local communications. And such local interprocess communications become important if the applications use an activity responsible of remote communications. The first purpose of this paper is to compare the local interprocess communication mechanisms in a UNIX environment. So, we measure the time for sending one message and receiving an acknowledgment with each standard mechanism (<b>pipes,</b> <b>sockets,</b> System V IPC). Our second goal is to compare the measures when we replace processes by threads. The measures have been done on different workstations running SunOS or OSF/ 1, and pthreads always offer better results whatever the conditions are. KU [...] ...|$|R
40|$|Unix-based {{operating}} systems feature several forms of Inter-Process Communication (IPC) including <b>pipes,</b> Unix domain <b>sockets,</b> TCP/IP sockets, FIFOs, semaphores, and signals. Although these mechanisms provide similar services, each is designed differently with {{varying levels of}} performance. To better understand how these mechanisms work and why they perform the way they do, their implementations were analyzed. <b>Pipes,</b> Unix domain <b>sockets,</b> and TCP/IP sockets are commonly used mechanisms and {{are the focus of}} this project. Although they allow for communication between processes on the same machine, their performance in terms of throughput can vary significantly on the same platform. The analysis of the IPC mechanisms involved examining the kernel source code of the Linux operating system and developing benchmark utilities to measure their performance. Overall, Unix domain sockets have proven to be the fastest mechanism, in many cases performing over two times faster than <b>pipes</b> and TCP/IP <b>sockets.</b> On the Intel Pentium III/ 4 /Xeon processor systems used, pipes performed better than TCP/IP sockets over loopback, but the contrary was true for systems using Sunâ€™s UltraSPARC TI processor. This paper describes the tools developed and methods used to profile the IPC mechanisms. 1...|$|R
25|$|Roman {{towns and}} garrisons in the United Kingdom between 46 BC and 400 AD had complex sewer {{networks}} sometimes constructed out of hollowed-out elm logs, which were shaped {{so that they}} butted together with the down-stream <b>pipe</b> providing a <b>socket</b> for the upstream pipe.|$|R
50|$|A Mailslot is {{a one-way}} interprocess {{communication}} mechanism, {{available on the}} Microsoft Windows operating system, that allows communication between processes both locally and over a network. The use of Mailslots is generally simpler than named <b>pipes</b> or <b>sockets</b> when {{a relatively small number}} of relatively short messages are expected to be transmitted, such as for example infrequent state-change messages, or as part of a peer-discovery protocol. The Mailslot mechanism allows for short message broadcasts ("datagrams") to all listening computers across a given network domain.|$|R
40|$|NOVELTY - The socket {{is formed}} from two half sockets. A half socket is provided, {{designed}} as {{the lower part}} of the socket, and a half socket (2) designed as the upper part of the socket. Each recess for leading empty <b>pipes</b> through the <b>socket</b> is formed by two half openings (4) located centrally opposite one another, one in the lower half socket and one in the upper half socket. DETAILED DESCRIPTION - A suitable hollow wall socket to connect with empty pipes for the construction of a pre-installation inside walls for the drawing-in of electrical conductors is described. The socket consists of two parts and is equipped with connecting devices for both parts. Furthermore it possesses empty pipe entry guide openings and fastening devices to fix the socket in the region of the hole in the wall. USE - None given ADVANTAGE - Simple manipulation of empty <b>pipes</b> into <b>socket</b> and minimal time spent in assembling socket to wall. DESCRIPTION OF DRAWING(S) - half socket 2 half opening...|$|R
40|$|Nowadays, {{submarine}} can be use in many fields including research. For current practice, RC (radio control) submarine {{can be used}} to do underwater monitoring. Current RC submarine are expensive, and {{new design}} in this project are used to build a local RC submarine with on board wireless camera. In this project,the cost will be optimum and using an easy to obtain parts. The main things in the RC submarine are controller system and watertight. Research and comparison are done to make sure the flow of the project run smoothly. The fabrication phase started with making a control system for the submarine. A controller circuit consists of two important components; relays and radio control receiver. This will control pumps and motor. The ballast tank is made from PVC (poly vinyl chloride) <b>pipes,</b> <b>sockets</b> and round shape Perspex. To make a control system for the ballast system is the tough challenge in this project. The circuit is sensitive and easy to malfunctions. To make the tank watertight, silicon adhesive applied to avoid from water to fill the dry compartment of the ballast tank. For the result, the ballast system is finish after designing and fabricating process. Despite of that, the ballast system operated not fully functionally. The controller system had some problem and only one of the pump run. ...|$|R
5000|$|What is the {{difference}} between an [...] "aggregate" [...] and other kinds of [...] "modified versions"?An [...] "aggregate" [...] consists of a number of separate programs, distributed together on the same CD-ROM or other media. The GPL permits you to create and distribute an aggregate, even when the licenses of the other software are non-free or GPL-incompatible. The only condition is that you cannot release the aggregate under a license that prohibits users from exercising rights that each program's individual license would grant them.Where's the line between two separate programs, and one program with two parts? This is a legal question, which ultimately judges will decide. We believe that a proper criterion depends both on the mechanism of communication (exec, pipes, rpc, function calls within a shared address space, etc.) and the semantics of the communication (what kinds of information are interchanged).If the modules are included in the same executable file, they are definitely combined in one program. If modules are designed to run linked together in a shared address space, that almost surely means combining them into one program.By contrast, <b>pipes,</b> <b>sockets</b> and command-line arguments are communication mechanisms normally used between two separate programs. So when they are used for communication, the modules normally are separate programs. But if the semantics of the communication are intimate enough, exchanging complex internal data structures, that too could be a basis to consider the two parts as combined into a larger program.|$|R
40|$|Streamline is a stream-based OS {{communication}} subsystem that spans from peripheral hardware to userspace processes. It improves performance of I/O-bound applications (such as webservers and streaming media applications) by constructing tailor-made I/O paths through {{the operating system}} for each application at runtime. Path optimization removes unnecessary copying, context switching and cache replacement and integrates specialized hardware. Streamline automates optimization and only presents users a clear, concise job control language based on Unix pipelines. For backward compatibility Streamline also presents well known files, <b>pipes</b> and <b>sockets</b> abstractions. Observed throughput improvement over Linux 2. 6. 24 for networking applications is up to 30 -fold, but two-fold is more typical. Â© 2011 ACM...|$|R
5000|$|In Unix-like systems, file {{descriptors}} {{can refer}} to any Unix file type named in a file system. As well as regular files, this includes directories, block and character devices (also called [...] "special files"), Unix domain <b>sockets,</b> and named <b>pipes.</b> File descriptors can also refer to other objects that do not normally exist in the file system, such as anonymous <b>pipes</b> and network <b>sockets.</b>|$|R
40|$|Key words: hybrid vision head, {{infrared}} thermovision, defect detection, {{friction welding}} Summary: The article presents the method for testing {{the propriety of}} joints between the sewage <b>pipes</b> and their <b>sockets,</b> both made of plastics. The joint is made using the friction welding method by rotating the socket and pushing it against the fixed pipe. For testing the propriety of the weld the hybrid vision method was developed, that utilises visible band and infrared band vision tracts. The main element {{of the system is}} the infrared camera equipped with uncooled microbolometric sensor. The infrared camera records the infrared radiation, whose intensity depends on the temperature and the properties of the tested object. For detection of the defects of the joint the variation of velocity of heat diffusion is used that occurs inside the material of the object in proximity of the fault, which appears as a local variation of temperature on the surface. The visible light camera is used as an auxiliary tract to assess the surface state of the coupler and to ease the interpretation of the results obtained with the infrared camera. For testing purposes the experimental stand was made to precisely rotate the welded pipe related to the hybrid vision head. The developed method finds its application for testing the joints of <b>pipes</b> and <b>sockets</b> in the production line...|$|R
50|$|The signal/slot system fits {{well with}} the way {{graphical}} user interfaces are designed. Similarly, the signal/slot system {{can be used for}} other non-GUI usages, for example asynchronous I/O (including <b>sockets,</b> <b>pipes,</b> serial devices, etc.) event notification or to associate timeout events with appropriate object instances and methods or functions. It is easy to use and no registration/deregistration/invocation code need to be written, because Qt's metaobject compiler (MOC) automatically generates the needed infrastructure.|$|R
40|$|This paper tackles {{the problem}} of {{providing}} familiar OS abstractions for I/O (such as <b>pipes,</b> network <b>sockets,</b> and a shared file system) to applications on heterogeneous cores including accelerators, co-processors, and offload en-gines. We aim to isolate the implementation of these facil-ities from {{the details of a}} platformâ€™s memory architecture, which is likely to include a combination of cache-coherent shared memory, non-cache-coherent shared memory, and non-shared memory, all in the same system. We propose coherence-oblivious sharing (Cosh), a new OS abstraction that provides inter-process sharing with clear semantics on such diverse hardware. We have im-plemented a prototype of Cosh for the Barrelfish multi-kernel. We describe how to build common OS functional-ity using Cosh, and evaluate its performance on a hetero-geneous system consisting of commodity cache-coherent CPUs and prototype Intel many-core co-processors. ...|$|R
5000|$|In Unix {{and related}} {{computer}} operating systems, a file descriptor (FD, less frequently fildes) is an abstract indicator (handle) used to access a file or other input/output resource, {{such as a}} <b>pipe</b> or network <b>socket.</b> File descriptors form part of the POSIX application programming interface. A file descriptor is a non-negative integer, generally represented in the C programming language as the type [...] (negative values being reserved to indicate [...] "no value" [...] or an error condition).|$|R
50|$|A Unix domain socket or IPC socket (inter-process {{communication}} socket) is a {{data communications}} endpoint for exchanging data between processes executing {{on the same}} host operating system. Like named <b>pipes,</b> Unix domain <b>sockets</b> support transmission of a reliable stream of bytes (SOCK_STREAM, compare to TCP). In addition, they support ordered and reliable transmission of datagrams (SOCK_SEQPACKET, compare to SCTP), or unordered and unreliable transmission of datagrams (SOCK_DGRAM, compare to UDP). The Unix domain socket facility is a standard component of POSIX operating systems.|$|R
40|$|International audienceThis paper {{presents}} a communication {{system designed to}} allow efficient process migration in a cluster. The proposed system is generic enough to allow the migration {{of any kind of}} stream: <b>socket,</b> <b>pipe,</b> char devices. Communicating processes using IP or Unix sockets are transparently migrated with our mechanisms and they can still efficiently communicate after migration. The designed communication system is implemented as part of Kerrighed, a single system image operating system for a cluster based on Linux. Preliminary performance results are presented...|$|R
5000|$|The {{advantage}} {{of this approach is}} that the same set of tools, utilities and APIs can be used {{on a wide range of}} resources. There are a number of file types. When a file is opened a file descriptor is created. The file path becoming the addressing system and the file descriptor being the byte stream I/O interface. But file descriptors are also created for things like anonymous <b>pipes</b> and network <b>sockets</b> via different methods. So it is more accurate to say [...] "Everything is a file descriptor".|$|R
50|$|Since both {{processes}} {{can access}} the shared memory area like regular working memory, {{this is a}} very fast way of communication (as opposed to other mechanisms of IPC such as named <b>pipes,</b> Unix domain <b>sockets</b> or CORBA). On the other hand, it is less scalable, as for example the communicating processes must be running on the same machine (of other IPC methods, only Internet domain socketsâ€”not Unix domain socketsâ€”can use a computer network), and care must be taken to avoid issues if processes sharing memory are running on separate CPUs and the underlying architecture is not cache coherent.|$|R
40|$|AbstractThe CODER (COmposite Document Expert/extended/effective Retrieval) {{project is}} a multi-yeare effort to {{investigate}} how best to apply artificial intelligence methods to increase the effectiveness of information retrieval systems handling collections of composite documents. To ensure system adaptability and to allow controlled experimentation, CODER has been designed as a distributed expert system. The use of individually tailored specialist experts, coupled with standardized blackboard modules for communication and control and external knowledge bases for maintenance of factual world knowledge, allows for quick prototyping, incremental development, and flexibility under change. The {{system as a whole}} is being implemented under UNIX as a set of MU-Prolog and C modules communicating through <b>pipes</b> and TCP/IP <b>sockets...</b>|$|R
40|$|Quality is {{a dynamic}} state {{associated}} with products, people, processes and tasks, and environments that meet or exceed the expectations of customers or consumers. Consumers as users increasingly critical in choosing a product or use the product so that this situation resulted in increasingly {{important role in the}} quality. CV. Tanah Aron is one of the companies engaged in the production of rubber and plastic, which is located on Jl. Abdul Kharim No [...] 76 AA Surabaya. The products produced by CV. Tanah Aron is Rubber Seal, Rubber Packing, Rubber Oring, Rubber Connection <b>pipe</b> taps, Castor, <b>Socket,</b> and many other products. Of various products produced by CV. Tanah Aron researchers focused on product type Gas Tube Rubber Seal KTG- 50 AL with disabilities prosesntase of 29, 86...|$|R
40|$|Abstract â€” The {{arrival of}} the P 2 P model has opened many new avenues for {{research}} {{within the field of}} distributed computing. This is mainly due to important practical features (such as support for volatility, high scalability). Several generic P 2 P libraries have been proposed for building higher-level services. In order to judge the appropriateness of using a generic P 2 P library for a given application type, an experimental performance evaluation of the provided functionalities is unavoidable. Very few analyses of this kind have been reported, as most evaluations are limited to complexity analyses and to simulations. Such experimental analyses are important, especially when using P 2 P software in a grid computing context, where applications may have precise efficiency requirements. In this paper, we focus on JXTA, which provides generic building blocks and protocols intended to serve as a basis for specialized P 2 P services and applications. We perform a performance evaluation of the three communication layers (endpoint, <b>pipe</b> and <b>socket)</b> over a Fast Ethernet local-area network, for recent versions of the J 2 SE and C bindings of JXTA. We provide a detailed analysis explaining the behavior of these three layers and we give hints showing how to efficiently use them. I...|$|R
40|$|Abstract. Causeway {{provides}} runtime {{support for}} the development of distributed meta-applications. These meta-applications control or analyze the behavior of multi-tier distributed applications such as multi-tier web sites or web services. Examples of meta-applications include multitier debugging, fault diagnosis, resource tracking, prioritization, and security enforcement. Efficient online implementation of these meta-applications requires meta-data to be passed between the different program components. Examples of metadata corresponding to the above meta-applications are request identifiers, priorities or security principal identifiers. Causeway provides the infrastructure for injecting, destroying, reading, and writing such metadata. The key functionality in Causeway is forwarding the metadata associated with a request at so-called transfer points, where the execution of that request gets passed from one component to another. This is done automatically for system-visible channels, such as <b>pipes</b> or <b>sockets.</b> An API is provided to implement the forwarding of metadata at system-opaque channels such as shared memory. We describe the design and implementation of Causeway, and we evaluate its usability and performance. Causewayâ€™s low overhead allows it to be present permanently in production systems. We demonstrate its usability by showing how to implement, in 150 lines of code and without modification to the application, global priority enforcement in a multitier dynamic web server. ...|$|R
