17|33|Public
5000|$|... #Caption: Screenshot of a PC-BSD 10.1.2 desktop (MATE) with {{dual monitor}} (dual head, pivot). The running {{free and open}} source (FOSS) {{programs}} are: GIMP, OpenShot, file manager, Eric <b>Python</b> <b>development</b> IDE. Also shown: Minecraft 1.8.7 (with [...] "Forge" [...] mods).|$|E
50|$|DLTK (Dynamic Languages Toolkit) — is a {{tool for}} vendors, researchers, and {{end-users}} who rely on dynamic languages. DLTK {{is a set of}} extensible frameworks designed to reduce the complexity of building full featured development environments for dynamic languages such as PHP and Perl. Besides a set of frameworks DLTK provides exemplary Tcl, Ruby, Javascript and <b>Python</b> <b>development</b> environments.|$|E
50|$|Panda3D's {{intended}} game-development {{language is}} Python. The engine itself {{is written in}} C++, and utilizes an automatic wrapper-generator to expose the complete functionality of the engine in a Python interface. This approach gives a developer the advantages of <b>Python</b> <b>development,</b> such as rapid development and advanced memory management, but keeps {{the performance of a}} compiled language in the engine core. For instance, the engine is integrated with Python's garbage collector, and engine structures are automatically managed.|$|E
50|$|It {{provides}} {{tools to}} simplify <b>Python</b> software <b>development</b> and handles {{many kinds of}} situations thanks to its rich extensibility.|$|R
50|$|PyScripter is a {{free and}} {{open-source}} software <b>Python</b> integrated <b>development</b> environment (IDE) for Windows. It is built in Object Pascal.|$|R
50|$|Despite {{the lack}} of a major release, Flask has become {{extremely}} popular among Python enthusiasts. As of mid 2016, it was the most popular <b>Python</b> web <b>development</b> framework on GitHub.|$|R
5000|$|Guido van Rossum ( [...] , born 31 January 1956) is a Dutch {{programmer}} who is {{best known}} as the author of the Python programming language. In the Python community, van Rossum is known as a [...] "Benevolent Dictator For Life" [...] (BDFL), meaning that he continues to oversee the <b>Python</b> <b>development</b> process, making decisions where necessary. He was employed by Google from 2005 until December 7th 2012, where he spent half his time developing the Python language. In January 2013, van Rossum started working for Dropbox.|$|E
5000|$|Benevolent Dictator For Life (BDFL) is a title {{given to}} {{a small number of}} {{open-source}} software development leaders, typically project founders who retain the final say in disputes or arguments within the community.The phrase originated in 1995 with reference to Guido van Rossum, creator of the Python programming language.Shortly after van Rossum joined the Corporation for National Research Initiatives, the term appeared in a follow-up mail by Ken Manheimer to a meeting trying to create a semi-formal group that would oversee <b>Python</b> <b>development</b> and workshops; this initial use included the additional joke of naming van Rossum the [...] "First Interim BDFL".|$|E
50|$|The main {{disadvantage}} {{of the global}} environment is that model files and controller files are not modules and the order of execution matters (although it can be specified using conditional models). Naming conflict {{is more likely to}} occur than in normal Python modules. Some standard <b>Python</b> <b>development</b> tools may not understand objects defined in models and controllers. Moreover, developers must be aware that code in models is executed at every request and this may cause a performance penalty. Nothing in web2py prevents developers from using and importing normal Python modules (model-less approach) and for this purpose web2py provides a thread local object (current) to facilitate access to objects associated to the current request. Yet, in this case, the developer has {{to be aware of the}} same pitfalls that other frameworks incur into: changing the state of an object defined in a module may affect other concurrent requests.|$|E
50|$|Nokia N950 {{developers}} can use tools from Nokia {{including the}} Qt SDK, or Harmattan <b>Python</b> for software <b>development.</b>|$|R
30|$|To develop agents, Smart <b>Python</b> multi-Agent <b>Development</b> Environment called SPADE {{platform}} [27] is used. SPADE {{is based}} on XMPP/Jabber technology and it offers several facilities allowing the use of existing communication channel besides its extensible communication protocol based XML. Agents in SPADE are implemented as users and the platform where the agents communicate are implemented as servers.|$|R
40|$|The {{objective}} for the Python Web Developer Appliance {{project is}} to facilitate both learning how to develop and developing web applications using Python. The Python Web Developer Appliance includes the leading <b>Python</b> web <b>development</b> frameworks and supporting libraries pre-installed and ready use, alongside a complete open-source software stack for building and deploying web applications. The appliance represents an attempt to take the ”batteries included” philosoph...|$|R
40|$|A fast, easy-to-follow {{and clear}} {{tutorial}} {{to help you}} develop Parallel computing systems using Python. Along with explaining the fundamentals, the book will also introduce you to slightly advanced concepts {{and will help you}} in implementing these techniques in the real world. If you are an experienced Python programmer and are willing to utilize the available computing resources by parallelizing applications in a simple way, then this book is for you. You are required to have a basic knowledge of <b>Python</b> <b>development</b> to get the most of this book...|$|E
40|$|Social norms {{facilitate}} {{coordination and}} cooperation among individuals, thus enable smoother functioning of social {{groups such as the}} highly distributed and diverse open source software development (OSSD) communities. In these communities, norms are mostly implicit and hidden in huge records of human-interaction information such as emails, discussions threads, bug reports, commit messages and even source code. This paper aims to introduce a new line of research on extracting social norms from the rich data available in software repositories. Initial results include a study of coding convention violations in JEdit, Argo UML and Glassfish projects. It also presents a new life-cycle model for norms in OSSD communities and demonstrates how a number of norms extracted from the <b>Python</b> <b>development</b> community follow this life-cycle model...|$|E
40|$|Python is an {{accepted}} high-level scripting language {{with a growing}} community in academia and industry. It is used in many scientific applications in many different scientific fields and {{in more and more}} industries (for example, in engineering or life science). In all fields, the use of Python for high-performance and parallel computing is increasing. Several organizations and companies are providing tools or support for <b>Python</b> <b>development.</b> This includes libraries for scientific computing, parallel computing, and MPI. Python is also used on many core architectures and GPUs, for which specific Python interpreters are being developed. Also, Python is used for Grid- and Cloud-aware applications. Many existing libraries support Python developers for that. Python especially is used by scientists and engineers. The talk describes, why Python is used, as well as the specific advantages and current drawbacks of Python for scientific applications. And predictions of future uses of Python are presented, combined with hints and best practices to the get major improvements in the development of distributed and HPC applications...|$|E
50|$|The Wing is an {{integrated}} development environment (IDE) from Wingware that is designed specifically for the programming language <b>Python,</b> to reduce <b>development</b> and debugging time, coding errors, and {{make it easier to}} understand and navigate Python code.|$|R
50|$|In 2000, the <b>Python</b> core <b>development</b> team {{moved to}} BeOpen.com {{to form the}} BeOpen PythonLabs team. CNRI {{requested}} that a version 1.6 be released, summarizing Python's development {{up to the point}} at which the development team left CNRI. Consequently, the release schedules for 1.6 and 2.0 had a significant amount of overlap. Python 2.0 was the only release from BeOpen.com. After Python 2.0 was released by BeOpen.com, Guido van Rossum and the other PythonLabs developers joined Digital Creations.|$|R
40|$|Jenkins CI, the {{continuous}} integration server, enables {{to extend its}} functionality by plug-ins. These plug-ins can be written in Java and Ruby. The support for Python language is missing although {{it is one of}} the most popular programming languages. Therefore we have implemented the SDK for <b>Python</b> plug-in <b>development</b> and this SDK has been integrated into the Jenkins CI community repository. The documentation for the plug-in <b>development</b> in <b>Python</b> has been also published. Thanks to that work, developers can now implement plug-ins in Python programming language...|$|R
40|$|Welcome to khmer: k-mer counting, {{filtering}} and graph traversal FTW! Documentation Status PyPI Package Downloads Counter License [URL] Coverity Scan Build Status The official repository is at [URL] and you {{can read}} the docs online here: [URL] There are two mailing lists dedicated to khmer, an announcements-only list and a discussion list. To search their archives and sign-up for them, please visit the following URLs: Discussion: [URL] Announcements: [URL] We chat at [URL] and the maintainers can be contacted at khmer-project@idyll. org. For getting help with please see this guide: [URL] IMPORTANT NOTE: CITE US! khmer is research software, so you should cite us when you use it in scientific publications! Please see the CITATION file for citation information. INSTALL INSTRUCTIONS: khmer requires a 64 -bit operating system and Python 2. 7. x. Linux users will need the <b>Python</b> <b>development</b> libraries and gcc. OS X users may need XCode installed. In short: pip install khmer to download, build, and install the latest stable version. For more details see doc/install. txt The use of a virtualenv is recommended, see [URL] khmer is under the BSD license; see doc/LICENSE. txt. Distribution, modification and redistribution, incorporation into other software, and pretty much everything else is allowed. MRC 2014 - 05 - 1...|$|E
40|$|As modern FPGAs evolve {{to include}} more het- erogeneous {{processing}} elements, such as ARM cores, {{it makes sense to}} consider these devices as processors first and FPGA accelerators second. As such, the conventional FPGA develop- ment environment must also adapt to support more software- like programming functionality. While high-level synthesis tools can help reduce FPGA development time, there still remains a large expertise gap in order to realize highly performing implementations. At a system-level the skill set necessary to integrate multiple custom IP hardware cores, interconnects, memory interfaces, and now heterogeneous processing elements is complex. Rather than drive FPGA development from the hardware up, we consider the impact of leveraging Python to ac- celerate application development. Python offers highly optimized libraries from an incredibly large developer community, yet is limited to the performance of the hardware system. In this work we evaluate the impact of using PYNQ, a <b>Python</b> <b>development</b> environment for application development on the Xilinx Zynq devices, the performance implications, and bottlenecks associated with it. We compare our results against existing C-based and hand-coded implementations to better understand if Python can be the glue that binds together software and hardware developers. Comment: To appear in 2017 IEEE 25 th Annual International Symposium on Field-Programmable Custom Computing Machines (FCCM' 17...|$|E
40|$|This paper {{describes}} the SpamBayes submissions {{made to the}} Spam Track of the 2005 Text Retrieval Conference (TREC). SpamBayes is briefly introduced, but the paper focuses more on how the submissions differ from the standard installation. Unlike {{in the majority of}} earlier publications evaluating the effectiveness of SpamBayes, the fundamental ‘unsure ’ range is discussed, and the method of removing the range is outlined. Finally, an analysis {{of the results of the}} running the four submissions through the Spam Track ‘jig ’ with the three private corpora and one public corpus is made. SpamBayes [1] was born on August 19 th 2002, soon after publication of A Plan for Spam [2]; Tim Peters and others involved with the <b>Python</b> <b>development</b> community developed code based on Graham’s ideas, with the initial aim of filtering python. org mailing-list traffic, although this quickly progressed to also filtering personal email streams (today, although most python. org mailing lists do use SpamBayes, the overwhelmingly most common use of SpamBayes is for personal email filtering). Although the project initially started with Graham’s original combining scheme, it currently uses the chi-squared combining scheme developed by Robinson. The SpamBayes distribution includes a plug-in for Microsoft ™ Outlook™, a generic POP 3 proxy and IMAP 4 filter, various command-line scripts, and a suite of tools for testing modifications of the tokenization/classification systems. The software is free 1, released under the Python Software Foundation Licence. A basic introduction to the distribution can be found in [3]. The testing outlined in this paper used version 1. 1 a 1; the only modifications were adjustments of the client/server architecture to improve the speed of the TREC testing...|$|E
50|$|Future <b>development,</b> <b>Python</b> 3 {{support and}} speed {{improvements}} {{have happened in}} the 2.3 branch which has seen a full rewrite of the TurboGears core while keeping it backward compatible with existing applications, since that release TurboGears had its own core instead of being based on the Pylons framework.|$|R
50|$|PyCharm is a {{cross-platform}} IDE that {{is primarily}} targeted for <b>Python</b> and web <b>development.</b> An open source version is available as PyCharm Community Edition, and a proprietary version as PyCharm Professional Edition. A special version called PyCharm Edu {{is based on}} PyCharm aimed specifically at learning programming with Python.|$|R
40|$|This book {{features}} a step-by-step approach {{that shows you}} how to program, create, and {{improve the quality of}} web applications using Django, with the help of Python. This is an ideal book for developers who want to improve the quality and maintenance of their web application, and who already have knowledge of <b>Python</b> and web <b>development...</b>|$|R
40|$|Hardware and {{software}} represent basic tools for performance of various tasks in all fields of engineering. This {{is particularly true}} today, as available technologies offer considerably more {{than they used to}} in the past. The GIS technology and engineering software namely, represent particularly expensive products, which offer an excellent start-up and support for any company knowledgeable in their use. In addition to commercial products, there is also a wide spectrum of open source solutions, which offer same quality of service and meet the professional standards of use. The situation is similar when it comes to free and open source operating systems, the Linux family systems for example. Performance of spatial analysis in a fully open source system is tested in the thesis {{from the point of view}} of algorithm content, which was carried out in Python programming language. Python has become the standard scripting language for the requirements of GIS and for designing plug-ins in programmes such as ArcGIS (ESRI, Arcpy) and QGIS. Programming language uniformity provides the link among various programming tools as well as among various system platforms. The exchange of scripts and plug-ins is thus completely compatible, including in the cases of transit and use of the same script among different operating systems and among various GIS tools. The simplicity of language enables the engineers to focus on solutions of engineering tasks without having to spend too much time on the process of programming. Focus on programming is however required by more complex programming languages such as C++ and Java. The process from the initial installation the Linux Mint operating system until installation of <b>Python</b> <b>development</b> environments and their use is described in the thesis. The thesis provides tests of selected scripts for performing spatial analysis in various operating systems (in Linux Mint 17 Qiana and in Windows 8. 1 operating systems) and gives qualitative and quantitative evaluation of the results...|$|E
40|$|In this dissertation, {{two main}} topics will be discussed. First, a novel {{approach}} to computational mechanics via a Domain Specific Language(DSL) with a syntax to facilitate new model development will be presented. Second, discrete element multiphysical models will be proposed to study powder based additive manufacturing processes. The DSL presented is a tool for computational mechanics {{which is designed to}} allow an engineer to focus more on model development and investigation by providing a syntax which makes it easier to define new discretizations and test different constitutive models. In order to achieve this, a system for managing data and specifying models is created around the <b>Python</b> <b>development</b> environment. There are three powerful features of the DSL. First, the language provides a syntax for creating objects which describe the fundamental physical objects and numerical elements in the problem and facilitates the allocation, management and modification of the data allocated for these objects. Second, all constitutive models are input using symbolic notation allowing for the language of math, rather than raw code, to be used to describe interactions. Third, low level code is automatically generated for the models and their gradients(via symbolic differentiation) for use with linear and non-linear solvers and time-stepping methods, both explicit and implicit. Also, Python wrappers are automatically generated so the high performance implementations can be used in the Python environment without additional work by the user. The discrete element method is a Lagrangian technique which uses interactions of spherical elements to model material behaviors. In the past, it has been most commonly used in the study of granular media such as sands and soils. Here, extensions to the method to model heat transfer, thermal expansion and interactions with non-spherical objects will be discussed for simulating additive manufacturing processes. The formulation, implemented with the DSL, is used to study powder packing {{in a manner that is}} physically consistent with Selective Laser Sintering/Melting machines. Also, the dynamics of powders subjected to a heat source are investigated. Additional multiphysics behavior is incorporated through a temperature dependent bonding model to create an efficient simulation for studying Laser Metal Deposition. Finally, a method for using discrete elements to enhance Eulerian finite elements to efficiently prevent advection welding is proposed...|$|E
40|$|GooFit now has working, fully {{supported}} Python bindings using PyBind 11. All PDFs have been bound (# 92). Python bindings now build by default if <b>Python</b> <b>development</b> files are found (# 93). Pythonization additions, such as supporting the same shortcuts for Variables as C++, from/to numpy converters, and more, was added in (# 99, # 109). Pip install is now supported using SciKit-Build, and source releases {{are being made}} on PyPI (# 107). The build will use CUDA if found, and OpenMP otherwise. Many examples converted (# 118, # 120, # 126) Other Python additions: Live printout in Python Notebooks (# 114) Minuit 2 wrapper started (# 115, # 128) print_goofit_info (and print_splash) added to Python (# 126) pyexamples/RunAll. sh added to run all examples, run by Travis (# 126) Major changes: Observables are now their own class, and CountingVariable is now EventNumber (# 123) Variables are now passed by copy everywhere, handling smart pointers internally (# 124) DecayInfo renamed and split (# 124) FitControl is now explicitly a std::shared_ptr (# 126) Resonances and Lineshapes are now classes instead of using enums or ordering (# 119) OpenMP now supported on macOS Apple Clang on High Sierra with Homebrew, using brew install cliutils/apple/libomp (# 126) Other changes include: New ResonancePDF types (# 114) Spline, KMatrix, FOCUS Lineshapes added, untested (# 119) TravisCI now uses Trusty (# 98), performs style checks (# 117), and runs all examples (# 114). Minuit 2 now can be missing from ROOT and GooFit will use its own copy (# 102, # 113). Eigen is now included (# 104), helper functions added (# 119) Large updates to CMake, including CUDA as a language (# 122), CMake 3. 9 FindCUDA backport, fully target-based build (# 119) Initial CMake IPO support (# 114) Better folder structure for PDF source files (# 114) fpcomplex shortcut (# 114) IDE support improvements (# 114)) Splash screen (# 114) Macros to help setup PDFs (# 119) CCache support argc, argv no longer required in GOOFIT_PARSE (# 126) The include order is now checked by the clang-format run (# 126) The ModernizeGooFit script supports 2. 1 and more (# 126). cpp is used everywhere, instead of. cc and. cpp mix CLI 11 has been updated to 1. 3 (# 130...|$|E
40|$|Large-scale agent based {{simulation}} of social networks {{is described in}} the context of the migrant crisis in Syria and the EU as well as massively multi-player on-line role playing games (MMORPG). The recipeWorld system by Terna and Fontana is proposed as a possible solution to simulating large-scale social networks. The initial system has been re-implemented using the Smart <b>Python</b> multi-Agent <b>Development</b> Environment (SPADE) and Pyinteractive was used for visualization. We present initial models of simulation that we plan to develop further in future studies. Thus this paper is research in progress that will hopefully establish a novel agent-based modelling system {{in the context of}} the ModelMMORPG project...|$|R
50|$|Shinken is {{designed}} to run under all operating systems where <b>Python</b> runs. The <b>development</b> environment is under Linux, but also runs well on other Unix variants and Windows. The reactionner process (responsible for sending notifications) can also be run under the Android OS. It is free software, licensed {{under the terms of}} the Affero General Public License as published by the Free Software Foundation.|$|R
50|$|The Web Server Gateway Interface (WSGI) is a {{specification}} {{for simple}} and universal interface between web servers and web applications or frameworks for the Python programming language. It was originally specified in PEP 333 authored by Phillip J. Eby, and published on 7 December 2003. It {{has since been}} adopted as a standard for <b>Python</b> web application <b>development.</b> The latest version of the specification is v1.0.1, also known as PEP 3333, published on 26 September 2010.|$|R
40|$|Data Analysis WorkbeNch (DAWN) is {{an eclipse}} based {{workbench}} for doing scientific data analysis. It implements sophisticated support for : (1) Visualization of data in 1 D, 2 D and 3 D (2) <b>Python</b> script <b>development,</b> debugging and execution (3) Workflows for analyzing scientific data calling Python and binary codes DAWN is {{not restricted to}} one scientific domain. It is developed by and for the synchrotron community foremost but has strong overlap with other communities like neutron scattering, photon science and any scientific communities with the above or similar needs. If {{you would like to}} know more, the DAWN project has an active mailing list which is open to subscribers Jiscmail Mailing list. Alternatively you could follow us on Twitter. Dawn is open source and available on github. And is licenced under the Apache V 2 licenc...|$|R
40|$|This thesis {{deals with}} the {{programming}} language <b>Python</b> and with <b>development</b> of the application that evaluates the similarity of the specified source codes in this programming language. In addition to comparison of comments, the program uses several comparison methods applied to a sequence of tokens that are created from the specified source codes. Namely, the Levenshtein distance, the longest common subsequence {{and the frequency of}} tokens. The thesis also includes the results of testing the program on real data. The application is designed to control the plagiarism in the source codes of the school projects written in the programming language Python...|$|R
40|$|Abstract. The ShipMo 3 D library {{has been}} {{developed}} for simulating ship motions in calm water and in waves. ShipMo 3 D {{is a set of}} object-oriented software components and related applications that can provide ship motion predictions in both the time and frequency domains. This paper describes experience using the Python programming language for development of ShipMo 3 D. Several languages were considered for developing ShipMo 3 D, including Fortran, C++, and Java. Support for mathematical operations, support for object-oriented programming, ease of programming, and computational speed were criteria in the selection of a programming language. Python was ultimately selected because of its strengths in all of the above areas, particularly in ease of programming. Experience with <b>Python</b> for <b>development</b> of ShipMo 3 D has been very positive. The Python Numeric module has greatly contributed to ease of development and execution speed. Although Python is an interpreted language, high computational performance can be achieved by writing critical portions of code in compiled C. ShipMo 3 D has been successfully applied to several naval applications requiring predictions of ship motions. 1...|$|R
30|$|This {{case has}} shown how NemoViz {{can be used}} as an {{interactive}} visualization system to support the simulation design process, in particular the design of atomistic simulations. It is important to clarify why step 5 (Coding and Testing) was not mentioned in this section. Simulations do not always require the development of new models. Nemo 5 models are developed in C++ and <b>Python.</b> Various integrated <b>development</b> environment software (IDE) are available to develop the code. Nevertheless, NemoViz includes plugins that help users to debug new models. These plugins process NEMO 5 output logs in order to extract and visualize information such as memory use, object lifetime, or time tracing.|$|R
5000|$|Socialization {{processes}} in most online communities are informal and individualistic, {{as compared with}} socialization in conventional organizations. [...] For example, lurkers in online communities typically have no opportunities for formal mentorship, because {{they are less likely}} to be known to existing members of the community. Another example is WikiProjects, the task-oriented group in Wikipedia, rarely use institutional socialization tactics to socialize new members who join them, as they rarely assign the new member a mentor or provide clear guidelines. A third example is the socialization of newcomers to the <b>Python</b> open-source software <b>development</b> community. Even though there exists clear workflows and distinct social roles, socialization process is still informal.|$|R
40|$|Several {{species of}} Australian python, Morelia spilotes variegatus, Liasis amethystinus, L. fuscus and L. childreni, were {{experimentally}} infected with eggs of Ophidascaris moreliae {{and the development}} of the larvae described. The first moult occurred in the egg, which survived and remained infective for over 7 years in moist conditions. The first moult occurred in 12 days and the second-stage larva in the egg was infective to mice in 14 - 21 days. After ingestion the larvae migrated to liver and lungs and in 21 days were mainly distributed throughout the subcutaneous tissues, particularly in the neck region and behind the ears. Growth occurred to about 8 mm; the larvae attained their infectivity for pythons after 5 weeks and retained it for more than a year. The second moult was not observed but it was assumed that the third stage was infective for <b>pythons.</b> <b>Development</b> to about the same length occurred in guinea-pigs and indigenous and laboratory rats and in the bandicoot (Isoodon obesulus). In the possum (Trichosurus sp.) a more rapid growth occurred to about the same length. No growth occurred in tadpoles. After ingestion by pythons larvae migrated to the lungs, where they remained for 3 months or more, grew to a length of 45 mm and underwent the third moult. Larvae removed from the lungs and reingested by pythons returned to the lungs if they had been in the first python for less than 60 days. After this time, they remained in the stomach of the second python. During the third moult larvae underwent a marked constriction of the anterior end, moved up the trachea and became attached in the upper oesophagus as fourth-stage larvae. In mouseinfected M. spilotes the third moult occurred at 117 days at a length of 23 - 45 mm; fourth-stage larvae measured 34 - 50 mm. The fourth moult occurred in the stomach at 318 days at a length of 37 - 55 mm. The smallest adult specimens found were a 55 mm male and a 63 mm female. Development to the adult stage was only observed in M. spilotes variegatus. In other python species only pre-adult forms were recovered. It appeared that development may be retarded at the fourth moult during the winter. The morphology of the larvae during the five stages of development is described. It is concluded that the main growth phases are the third stage in the lungs of the python and the adult stage in the stomach of the python. Encapsulated forms were found only in the tissues of intermediate hosts. The larvae from mouse tissues emerged from the capsules during putrefaction and survived for several weeks in water...|$|R
