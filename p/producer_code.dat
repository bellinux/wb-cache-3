4|91|Public
5000|$|On September 3, 2015, Joey Badass {{released}} a collaborative single with Korean hip-hop group Epik High's Tablo and <b>producer</b> <b>Code</b> Kunst called [...] "Hood". On October 6, 2015, he collaborated with British indie rock band Glass Animals, releasing a single titled [...] "Lose Control".|$|E
50|$|Egg marking {{is a form}} of egg {{labeling}} {{that includes}} an egg code stamped on the egg itself. In the EU there is a <b>producer</b> <b>code</b> regulated by law since 2004. It allows consumers to distinguish free range eggs and organic farming eggs from the industrial caged hen production.|$|E
50|$|An egg mark {{may contain}} {{a number of}} {{information}} parts - in the EU only the <b>producer</b> <b>code</b> is required. Additional information may be printed along with the date of production being the most common to find. Other information may contain the method of production especially in the non-EU world where the numbered levels do not apply.|$|E
50|$|On January 27, 2015, the show's pilot {{episode was}} green lighted by CBS. On June 4, Brett Mahoney was {{appointed}} as executive <b>producer</b> for <b>Code</b> Black.|$|R
50|$|OW2 aims at {{leveraging}} {{open source}} to foster collaborative innovation and create value by sharing expertise, experience, and opportunities. The community is positioned {{in the open}} source value chain as a platform aimed at connecting <b>producers</b> of <b>code</b> and that code's respective users.|$|R
40|$|In a {{certified}} code system, a <b>code</b> <b>producer</b> wishes {{to convince a}} code consumer that her program is safe to execute. To that end, the producer provides to the consumer a certificate — a machine-checkable proof — of safety of her program in some formal language. The code consumer no longer has to trust the <b>code</b> <b>producer,</b> instead, the consumer only needs to trust the implementer of the certificate checker and the runtime facilities. Typically, {{a certified}} code system {{does not provide a}} way for the <b>code</b> <b>producer</b> to manually allocate and deallocate memory. Instead, a garbage collector is provided as part of the trusted computing base, without proof. Recently, formal proofs of correctness for the Cheney copying collector have been tackled in separation and linear logic. Expanding on this work, I propose to reason about garbage collection in a dependent, higher order, linear logic with few unusual connectives and in the setting of a machine model that i...|$|R
50|$|There {{have been}} {{multiple}} occurrences of the <b>producer</b> <b>code</b> being forged - a common concept {{is to have}} multiple barns on the same farm with some having efficient caged hen production and one with an organic egg production code. Eggs are then silently moved to the other barn giving an egg code {{as if they were}} from organic production allowing for a higher price on the market. In Lower Saxony (Germany) the state attorney has accused 150 farmers in a year.|$|E
2500|$|Damian Taylor – drum {{programming}} (additional beats), drum programming (orchestral beats), editing, effects (clavichord treatments), effects (vocal processing), effects (vocal treatments), engineering, noises (morse <b>code),</b> <b>producer</b> {{on track}} 6, programming, tracking (drops) ...|$|R
5000|$|Duncan Zowie Jones ( [...] ; born 30 May 1971) is an English film director, film producer, and screenwriter. He is {{best known}} for {{directing}} the science fiction film Moon (2009), winning the BAFTA Award for Outstanding Debut by a British Writer, Director or <b>Producer,</b> Source <b>Code</b> (2011) and Warcraft (2016). He is the son of late English singer David Bowie and American model Angie Bowie.|$|R
50|$|On April 5, 2010, the Producers Guild of America Board of Directors officially {{approved}} its New Media Code of Credits, adding twenty-six {{major new}} credits to cover New Media <b>producers.</b> The <b>code</b> is significant {{in that it}} {{marks the first time}} the Producers Guild of America recognized New Media producer industry credits and responsibilities in Broadband, DVD/Blu-ray, Animation, Games (console and online), Mobile, Digital Visual Effects, iTV (interactive/enhanced Television), Special Venues, and Transmedia.|$|R
40|$|Code {{certification}} is {{a lightweight}} approach to formally demonstrate software quality. It concentrates on aspects of software quality {{that can be}} defined and formalized via properties, e. g., operator safety or memory safety. Its basic idea is to require <b>code</b> <b>producers</b> to provide formal proofs that their code satisfie...|$|R
40|$|Abstract. Proof-carrying code {{approaches}} aim at safe {{execution of}} un-trusted code {{by having the}} <b>code</b> <b>producer</b> attach a safety proof to the code which the code consumer only has to validate. Depending {{on the type of}} safety property, proofs can however become quite large and their validation- though faster than their construction- still time consuming. In this paper we introduce a new concept for safe execution of un-trusted code. It keeps the idea of putting the time consuming part of proving {{on the side of the}} <b>code</b> <b>producer,</b> however, attaches no proofs to code anymore but instead uses the proof to transform the program into an equivalent but more efficiently verifiable program. Code consumers thus still do proving themselves, however, on a computationally inex-pensive level only. Experimental results show that the proof effort can be reduced by several orders of magnitude, both with respect to time and space. ...|$|R
40|$|Popular language-based {{security}} {{mechanisms for}} software systems {{are based on}} verifiers that enforce a fixed and trusted type system. We live in a multi-lingual world and no system is written entirely in a single strongly-typed language. Rather than seek the absolute most general type system, we propose a sound framework for customizing the mechanism (e. g., a type system or an explicit safety proof) used to enforce a particular safety policy, enabling a <b>producer</b> of untrusted <b>code</b> to choose the most appropriate verification mechanism. In this framework, called the Open Verifier, <b>code</b> <b>producers</b> can provide untrusted verifiers for checking, for example, the well-typedness of the code. This gives a <b>code</b> <b>producer</b> the maximum of flexibility of the code generation schemes and the type system used. To ensure soundness, the untrusted verifier runs {{under the supervision of}} a trusted module that queries it about the safety of individual instructions. Each answer must be accompanied by a proof that allows the trusted module to check the correctness of the answer. We demonstrate this framework in the context of two untrusted cooperating verifiers. One handles code that is compiled from Cool, a strongly-typed, objectoriented language (roughly, a subset of Java). The other one is used for runtime support functions written in C. Furthermore, we demonstrate that through careful layering of the proof-generation effort, the cost of building such an untrusted verifier above constructing a conventional, trusted verifier is manageable. 1...|$|R
5000|$|Nicole co-{{produced}} comedy shows [...] "Funny Ladies of Color" [...] and the [...] "Hot & Spicy Mamitas", {{and also}} wrote, produced {{and starred in}} her second one-woman show, A Rose Grows in Spanish Harlem. Starting in 1985, Nicole began working alongside filmmaker Robert Townsend" [...] on the movie Hollywood Shuffle (1988). She worked with him again in 2002 on film and web series productions. She started as a basic assistant and became associate <b>producer</b> of <b>Code</b> Black Entertainment's [...] "Why We Laugh: Black Comedians on Black Comedy", [...] "Los Americans", and [...] "In the Hive". In 2015 she produced Townsend's film [...] "Playin for Love", a romantic comedy film.|$|R
40|$|Abstract: Proof-carrying code {{approaches}} aim at {{the safe}} execution of untrusted code by having the <b>code</b> <b>producer</b> attach a safety proof to the code which the code consumer only has to validate. Depending {{on the type of}} safety property, proofs can however become quite large and their validation- though faster than their construction- still time consuming. Programs from Proofs is a new concept for the safe execution of untrusted code. It keeps the idea of putting the time consuming part of proving {{on the side of the}} <b>code</b> <b>producer,</b> however, attaches no proofs to code anymore but instead uses the proof to transform the program into an equivalent but more efficiently verifiable program. Code consumers thus still do proving themselves, however, on a computationally inexpen-sive level only. In case that the initial proving effort does not yield a conclusive result (e. g., due to a timeout), the very same technique of program transformation can be used to obtain a zero overhead runtime monitoring technique. ...|$|R
40|$|Proof-Carrying Code (PCC) {{allows a}} <b>code</b> <b>producer</b> to provide {{to a host}} a program along with its formal safety proof. The proof attests a certain safety policy {{enforced}} by the code, and can be mechanically checked by the host. While this language-based approach to code certification is very general in principle, existing PCC systems have only focused on programs whose safety proofs can be automatically generated...|$|R
40|$|Aspect Oriented Programming (AOP) is a {{paradigm}} with significant potential to separate functionality and cross-cutting concerns. In particular, AOP supports an incremental development process, {{in which the}} expected functionality is provided by a baseline program, that is successively refined, possibly by third parties, with aspects that improve non-functional concerns, such as efficiency and security. Therefore, AOP is a natural enabler for Proof Carrying Code (PCC) scenarios that involve, {{in addition to the}} <b>code</b> <b>producer</b> and the <b>code</b> consumer, untrusted intermediaries that modify the code. The {{purpose of this article is}} to explore a PCC architecture that accommodates such an incremental development process. In order to support a wide range of policies, we extend our earlier work on certificate translation, and show in the context of a very simple language that it is possible to generate certificates of executable code from proofs of aspect-oriented programs. To achieve this goal, we introduce a notion of specification-preserving advice, which provides a mild generalization of the notion of harmless advice by Dantas and Walker, and provide a sound verification method for programs with specification-preserving advices. 1...|$|R
40|$|Abstract. Proof-carrying code (PCC) {{allows a}} <b>code</b> <b>producer</b> to {{associate}} {{to a program}} a machine-checkable proof of its safety. In the original approach to PCC, the safety policy includes proof rules which determine how various actions are to be proved safe. These proof rules have been {{considered part of the}} trusted code base (TCB) of the PCC system. We wish to remove the proof rules from the TCB by providing a formal proof of their soundness. This makes the PCC system more secure, by reducing the TCB; it also makes the system more flexible, by allowing <b>code</b> <b>producers</b> to provide their own safety-policy proof rules, if they can guarantee their soundness. Furthermore this security and flexibility are gained without any loss in the ability to handle large programs. In this paper we discuss how to produce the necessary formal soundness theorem given a safety policy. As an application of the framework, we have used the Coq system to prove the soundness of the proof rules for a type-based safety policy for native machine code compiled from Java. ...|$|R
5000|$|In May 2017, it was {{announced}} that Cavalera Conspiracy have entered The Platinum Underground Studios in Phoenix, Arizona with <b>producer</b> Arthur Rizk (<b>Code</b> Orange, Power Trip, Inquisition) to record their fourth studio album and follow-up to 2014's Pandemonium. They have revealed the album title as 'Psychosis', and a release date of November 17, 2017. The band also announced that a studio documentary titled 'The Conspiracy Diaries' is being produced simultaneously by Horns Up Rocks! ...|$|R
40|$|Annotations {{are often}} added to mobile code {{to reduce the}} {{optimization}} burden of just-intime compilers. However, these annotations are not checked for correctness and must be trusted [...] -incorrect or malicious annotations {{could lead to the}} generation of incorrect or insecure code. We present a time- and space efficient method for verifying the results of the large class of data flow optimizations. This allows the safe movement of computationintensive optimizations away from the code consumer towards the <b>code</b> <b>producer...</b>|$|R
50|$|Eyre Iron Pty Ltd is the {{management}} {{company for the}} Eyre Peninsula Joint Venture (EPJV) between partners Centrex Metals Ltd and Wugang Australian Resources Investment Pty Ltd (WARI). Wugang is a 100% owned subsidiary of Wuhan Iron & Steel (Group) co. (“WISCO”), China’s third largest steel <b>producer.</b> Centrex (ASX <b>code</b> CXM) was incorporated on the 23rd of March 2001 and is an emerging iron ore producer holding a range of exploration licenses for the southern Eyre Peninsula in South Australia.|$|R
50|$|Yusuke Naora (直良 有祐 Naora Yūsuke) (born January 9, 1971) is a Japanese {{video game}} art {{director}} and character designer {{who worked for}} Square Enix (formerly Square). He served as the art director for several Final Fantasy and Compilation of Final Fantasy VII titles. He also served as the <b>producer</b> of the <b>Code</b> Age franchise. On October 1, 2016 he announced on Twitter that {{he had left the}} company, but would continue to contribute to Square Enix games as a freelancer.|$|R
40|$|Weintroduce SafeTSA, a type-safe {{mobile code}} {{representation}} based on static single assignment form. We are developing SafeTSA {{as an alternative}} to the Java Virtual Machine, over which it has several advantages: # 1 # SafeTSA is better suited as input to optimizing dynamic code generators and allows CSE to be performed at the <b>code</b> <b>producer's</b> site. # 2 # SafeTSA provides incorruptible referential integrity and uses #type separation" to achieveintrinsic type safety. These properties reduce the code veri#cation e#ort at the code consumer's site considerably...|$|R
40|$|Dynamic {{compilation}} {{often comes}} {{at the price of}} reduced code quality since there is not enough time available to perform expensive optimizations. One solution to this problem has been the addition of annotations by the <b>code</b> <b>producer</b> that enable an annotation-aware dynamic code generator on the code consumer's side to shortcut certain analysis and optimization steps. However, code annotation often creates a new problem in that most annotations are unsafe [...] if they become corrupted during transit, the safety of the target system is jeopardized...|$|R
50|$|The main {{function}} of the Central Board of Film Censors is to examine suitability of films for public exhibition or otherwise under the guidelines provided by the Federal Government {{in the shape of}} film censorship <b>code.</b> <b>Producers</b> of locally produced films have the option to apply for Censorship of their films to any of the office of the Board at Islamabad, Lahore and Karachi whereas imported films areexamined by the Board only at Islamabad. Films belonging to Foreign Missions are also examined at Islamabad.|$|R
40|$|Proof-Carrying Code (PCC) is a {{technique}} {{that can be used}} for safe execution of untrusted code. In a typical instance of PCC, a code receiver establishes a set of safety rules that guarantee safe behavior of programs, and the <b>code</b> <b>producer</b> creates a formal safety proof that proves, for the untrusted code, adherence to the safety rules. Then, the receiver is able to use a simple and fast proof validator to check, with certainty that the proof is valid and hence the untrusted code is safe to execute...|$|R
40|$|Abstract: Mobile {{computation}} is characterised by {{the mobility}} of target devices (handheld PC’s, phones, wearable computers) and that of code. The design of mobile applications is constrained by several factors: devices move through a network of dynamic topology and offer limited computational resources (memory, operating time, communication bandwidth). Code is dynamically downloaded from a <b>code</b> <b>producer</b> and replaces existent code modules, but may be unsafe or corrupted during the transfer. The MRG project [1] is developing the technology for endowing mobile code with independently verifiable certificates describing its resource requirements. E...|$|R
40|$|The language-based {{approach}} to security employs programming language technologies to construct secure environments for hosting untrusted code. The recently proposed notion of confined types effectively prevents accidental reference leaks {{that could lead}} to security breaches in mobile code platforms such as Java. Enforcing a stronger notion of encapsulation than conventional object-oriented programming models, confined types may be exploited as an access control mechanism in language-based environments. Unfortunately, existing formulations of confined types target only Java-like source languages, and thus they can only be enforced by the <b>code</b> <b>producer</b> at compile time. This pape...|$|R
40|$|Abstract—Proof-carrying code (PCC) is a {{technique}} that addresses the problem of mobile code safety. It is a mechanism in which a <b>code</b> <b>producer</b> provides both <b>code</b> and a proof certifying that the code will run safely on a code consumer’s machine. The code consumer or the host system will validate the proof against a safety policy before executing the source code. Foundational proof-carrying code (FPCC) aims to minimize the amount of code that must be trusted (the “trusted computing base ” or TCB) {{with the goal of}} providing more flexibility and increased security. In both PCC and FPCC, the verificationcondition generator (VCG) constructs the statement of the safety theorem from the source code, and {{is an important part of}} the TCB. This paper presents an implementation of a VCG based on a sound set of Hoare-style rules for machine instructions in the context of FPCC. The implementation in OCaml is described and examples illustrating the approach are given. The output of our VCG is a list of verification conditions that are directly inserted into a proof script that serves as input to the Coq proof assistant, and represents an important part of the safety proofs of our programs. We also present examples showing how these verification conditions are used to complete the proofs of safety. This work represents an important step in automating proofs for PCC. I...|$|R
40|$|The {{present study}} was carried out to {{evaluate}} market yoghurt for selected chemical and microbiological properties and to compare it with the international standards regarding those quality parameters. The experiment was done at the Laboratory of the Dairy Production Department, Faculty of Animal Production in University of Khartoum. One hundred and forty-four commercially produced yoghurt samples were obtained from retail outlets in Khartoum State {{during the period from}} September to November 2005. The samples included ninetysix plain yoghurt representing local modern manufacturers coded A, B and C beside traditional <b>producers</b> <b>coded</b> T, also forty- eight fruit yoghurt samples from two manufacturers coded AF and BF. All these samples were collected from three towns in Khartoum State (Khartoum, Khartoum North and Omdurman) to assure that all manufacturers were well represented. Chemical measurements included total solids, solids non-fat, fat, protein, ash and pH. The microbiological parameters studied were total bacterial count, total coliform count and the yeast and moulds count. Results obtained revealed significant variations (P≤ 0. 001) between samples obtained from different manufacturers in their chemical composition (total solids, solids non-fat, fat, protein, ash and pH. One hundred and thirty eight of collected samples (96. 5 %) were found satisfied the international standard for solids non-fat content, and 73 yoghurt samples (50. 7 %) were found to have a lower fat content than the standard. In the microbiological parameters tested, the total bacterial count and yeast and moulds count were not significantly different between different manufacturers. The coliform count of samples varied significantly (P≤ 0. 001) between a manufacturer and another with a noticeable significance higher (P≤ 0. 05) coliform count in samples collected from traditional manufacturers than that collected from modern manufacturers. It is concluded that the commercially available yoghurt in Khartoum State has a good chemical quality when compared to the international standards. However the microbiological quality was lower than required by the international standards due to the presence of contaminants. From results obtained in this study it is recommended to assure better hygienic production of yoghurt through monitoring by the governmental organizations and to conduct detailed researches on the type of microbial hazard occurring – or could possibly occur – through the consumption of contaminated products...|$|R
40|$|Proof-Carrying Code (PCC) is {{a general}} {{framework}} for the mechanical verification of safety properties of machine-language programs. It allows a <b>code</b> <b>producer</b> to provide an executable program to a code consumer, along with a machine-checkable proof of safety such that the code consumer can check the proof before running the program. PCC {{has the advantage of}} small Trusted Computing Base (TCB), since the proof checking can be a simple mechanical procedure. A weakness of previous PCC systems is that the proof-checking infrastructure is based on some complicated logic or type system that is not necessarily sound...|$|R
40|$|Proof-carrying code is a {{framework}} for proving the safety of machine-language programs with a machine-checkable proof. Previous PCC frameworks have de-fined type-checking rules {{as part of the}} logic. We show a universal type framework for proof-carrying code that will allow a <b>code</b> <b>producer</b> to choose a programming lan-guage, prove the type rules for that language as lemmas in higher-order logic, then use those lemmas to prove the safety of a particular program. We show how to handle traversal, allocation, and initialization of values {{in a wide variety of}} types, including functions, records, unions, ex-istentials, and covariant recursive types. ...|$|R
40|$|Proof-carrying code is a {{technique}} {{that can be used}} to execute untrusted code safely. A code consumer speci es requirements and safety rules which de ne the safe behavior of a system, and a <b>code</b> <b>producer</b> packages each program with a formal proof that the program satis es the requirements. The consumer uses a fast proof validator to check that the proof is correct, and hence the program is safe. In this report, we discuss applications for which proof-carrying code is appropriate, explain the mechanics of proof-carrying code, compare it with other techniques and suggest two research directions for the method. ...|$|R
5000|$|A film {{adaptation}} of Bellamann's controversial novel, modeled {{on his home}} town of Fulton, Missouri, presented significant problems for movie industry censors, who sought to bring the film into conformity with the Hays Code. Screenwriter Casey Robinson believed the project was hopeless because of the Hays <b>Code.</b> <b>Producer</b> Hal B. Wallis said that Robinson felt [...] "I was crazy to have bought so downbeat a property." [...] Wallis urged him to reconsider, {{and it occurred to}} Robinson that he could turn this into the story of [...] "an idealistic young doctor challenged by the realities of a cruel and horrifying world." ...|$|R
40|$|Computing affects how {{scientific}} knowledge is constructed, verified, and validated. Rapid changes in hardware capability, and software flexibility, are {{coupled with a}} volatile tool and skill set, particularly in the interdisciplinary scientific contexts of oceanography. Existing research considers the role of scientists as both users and <b>producers</b> of <b>code.</b> We focus on how an intentional, individually-initiated but socially-situated, process of uptake influences code written by scientists. We present an 18 -month interview and observation study of four oceanography teams, {{with a focus on}} ethnographic shadowing of individuals undertaking code work. Through qualitative analysis, we developed a framework of deliberate individual change, which builds upon prior work on programming practices in science through the lens of sociotechnical infrastructures. We use qualitative vignettes to illustrate how our theoretical framework helps to understand changing programming practices. Our findings suggest that scientists use and produce software in a way that deliberately mitigates the potential pitfalls of their programming practice. In particular, the object and method of visualization is subject to restraint intended to prevent accidental misuse...|$|R
500|$|Conceptual work by Yusuke Naora, the <b>producer</b> of the <b>Code</b> Age franchise, {{began in}} 2002; and Code Age Commanders was officially {{announced}} in the April 2005 edition of the Japanese gaming magazine Famitsu. The development team was nicknamed [...] "Warhead" [...] and specifically assembled for the game, with its lead developers Yusuke Naora and Toshiyuki Itahana belonging to the art field rather than project management. Several connections to the mobile phone game Code Age Brawls and the manga Code Age Archives were put throughout the game, so that information learnt from {{it could be used}} by players and readers of the other installments to understand the full picture.|$|R
