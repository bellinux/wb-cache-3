34|5|Public
5000|$|If a <b>preflow</b> [...] and a valid {{labeling}} [...] for [...] exists {{then there}} is no augmenting path from [...] to [...] in the residual graph [...] This can be proven by contradiction based on inequalities which arise in the labeling function when supposing that an augmenting path does exist. If the algorithm terminates, then all nodes in [...] are not active. This means all [...] have no excess flow, and with no excess the <b>preflow</b> [...] obeys the flow conservation constraint and can be considered a normal flow. This flow is the maximum flow according to the max-flow min-cut theorem since there is no augmenting path from [...] to [...]|$|E
50|$|The {{concept of}} a <b>preflow</b> was {{originally}} designed by Alexander V. Karzanov and was published in 1974 in Soviet Mathematical Dokladi 15. This pre-flow algorithm also used a push operation; however, it used distances in the auxiliary network to determine where to push the flow instead of a labeling system.|$|E
5000|$|The {{algorithm}} is typically separated into two phases. Phase one computes a maximum pre-flow by discharging only active nodes whose labels are below [...] Phase two converts the maximum <b>preflow</b> into a maximum flow by returning excess flow that cannot reach [...] to [...] It {{can be shown}} that phase two has [...] time complexity {{regardless of the order}} of push and relabel operations and is therefore dominated by phase one. Alternatively, it can be implemented using flow decomposition.|$|E
40|$|Abstract Fujishige {{proposed}} a polynomial-time maximum flow algorithm using maximum adjacency (MA) orderings. Computational results by Fujishige and Isotani {{showed that the}} algorithm was slower in practice than Goldberg and Tarjan’s algorithm. In this paper we propose an improved version of Fujishige’s algorithm using <b>preflows.</b> Our computational {{results show that the}} improved version is much faster than the original one in practice...|$|R
40|$|Fujishige {{proposed}} a polynomial-time maximum flow algorithm using maximum adjacency (MA) orderings. Computational results by Fujishige and Isotani {{showed that the}} algorithm was slower in practice than Goldberg and Tarjan's algorithm. In this paper we propose an improved version of Fujishige 's algorithm using <b>preflows.</b> Our computational {{results show that the}} improved version is much faster than the original one and is competitive with Goldberg and Tarjan's algorithm...|$|R
40|$|A new {{algorithm}} is presented for finding maximal and maximum value flows in directed single commodity networks. The algorithm gradually converts {{a combination of}} blocking <b>preflows</b> and backflows to a maximal flow in the network. Unlike other maximal flow algorithms, the algorithm treats the network more symmetrically by attempting to increase flow on both the ForwardStep and the BackwardStep. The algorithm belongs to the so called phase algorithms, and is applied to Dinic-type layered networks. With an effort of at most O(n 3) for maximum value flow, the algorithm ties with the fastest maximum flow algorithms in dense networks, where m [approximate] n 2, and can therefore {{be seen as a}} significant alternate technique. The {{algorithm is}} based on the Karzanov [1] algorithm, and shares features with the algorithm of Tarjan [2]. The first version of this algorithm was presented by the author in [3]...|$|R
5000|$|The {{algorithm}} starts {{by creating}} a residual graph, initialising the <b>preflow</b> values to zero and performing a set of saturating push operations on residual arcs exiting the source, [...] Similarly, the labels are initialised such that the label at the source {{is the number of}} nodes in the graph, , and all other nodes are given a label of zero. Once the initialisation is complete the algorithm repeatedly performs either the push or relabel operations against active nodes until no applicable operation can be performed.|$|E
40|$|The trimethylaluminum (TMAl) <b>preflow</b> {{process has}} been widely applied on {{sapphire}} substrates prior to growing Al-polar AlN films by metalorganic chemical vapor deposition. However, it has been unclear how the TMAl <b>preflow</b> process really works. In this letter, we reported on carbon's significance in the polarity and growth mode of AlN films due to the TMAl <b>preflow.</b> Without the <b>preflow,</b> no trace of carbon was found at the AlN/sapphire interface and the films possessed mixed Al- and N-polarity. With the 5 [*]s <b>preflow,</b> carbon started to precipitate due to the decomposition of TMAl, forming scattered carbon-rich clusters which were graphitic carbon. It was discovered that the carbon attracted surrounding oxygen impurity atoms and consequently suppressed the formation of AlxOyNz and thus N-polarity. With the 40 [*]s <b>preflow,</b> the significant presence of carbon clusters at the AlN/sapphire interface was observed. While still attracting oxygen and preventing the N-polarity, the carbon clusters served as randomly distributed masks to further induce a 3 D growth mode for the AlN growth. The corresponding epitaxial growth mode change is discussed...|$|E
40|$|Algorithms for {{the maximum}} flow {{problem can be}} grouped into two categories: augmenting path {{algorithms}} [9], and <b>preflow</b> push algorithms [11]. <b>Preflow</b> push algorithms are characterized by a drawback known as ping pong effect. In this paper we present a technique that allows to avoid such an effect and {{can be considered as}} an approach combining the augmenting path and <b>preflow</b> push methods. An extended experimentation shows the effectiveness of the proposed approach...|$|E
30|$|For a network, {{there is}} one of the {{important}} problems to study the maximum flow. In the past five decades, many efficient algorithms for the maximum flow problem have emerged for a fixed network. The maximum flow algorithm was first investigated by Fulkerson and Dantzig [42] in 1955. Then, representative methods in maximum flow algorithms are based on either augmenting paths or <b>preflows.</b> Augmenting path algorithms push flow along a path from the source to the sink in the residual network and include Ford-Fulkerson’s labeling algorithm [43] and Dinic’s blocking flow algorithm [44]. Edmonds and Karp [45] also independently proposed that the Ford and Fulkerson algorithm augments flow along shortest paths. In order {{to reduce the number of}} augmentations, preflow-based algorithms push flow along edges were investigated in the residual network and include Karzanov’s blocking flow algorithms [46], which introduced the first preflow-push algorithm on layered networks, and Goldberg-Tarjan’s push-relabeling algorithm [10]; it constructed distance labels instead of layered networks to improve the running time of preflow-push algorithm. They described a very flexible generic preflow-push algorithm that performs push and relabel operations at active nodes. In short, for a classical network, the maximum flow can be calculated by above for any algorithms.|$|R
40|$|The Push-Relabel, or Preflow-Push, Maximum-Flow {{algorithm}} {{was originally}} developed by Andrew V. Goldberg and Robert E. Tarjan in the mid-to-late 1980 s, [2, 3]. This Push-Relabel algorithm is unlike the previous Ford-Fulkerson and Edmonds-Karp algorithms which use {{the concept of}} an augmenting path to determine the maximum flow. This algorithm instead uses a concept of a <b>preflow,</b> originally developed by A. V. Karzanov [4], {{in order to determine the}} maximum flow on a flow network graph G = (V,E), [3]. 1. 1. 1 Generic Push-Relabel The Push-Relabel algorithm, as described in [3], works by manipulating a <b>preflow</b> of the original flow network. In [3], Goldberg and Tarjan outline a generic version of their Push-Relabel algorithm. This generic algorithm defines the general operations required but does not specify the operation ordering or discusses implementation details. The algorithm works at converting a <b>preflow,</b> f, to a flow by pushing local flow excess starting at the source, s, along the vertices towards the sink, t. To accomplish this, the algorithm maintains a compatible vertex labeling function, d, to the <b>preflow</b> f in order to determine where to push the flow excess. The algorithm terminates once the <b>preflow</b> becomes a flow. This final flow produced at termination also turns out to be the maximum flow for the graph. <b>Preflow</b> is a real-valued function f on vertex pairs wherein the total flow into a vertex can exceed the flow out of the vertex. By definition, preflows must satisfy the capacity constraint, the skew symmetry constraint and the non-negative constraint. A <b>preflow</b> where all v ∈ V − {s, t} have a flow excess of zero, ef (v) = 0, is a normal flow. The <b>preflow</b> function is also referred to as s-t <b>preflow.</b> Non-Negative Constraint is a weakened form of the flow conservation constraint which states 1 that the flow into v ∈ V − {s} must be greater or equal to the total flow out of v. ∑ u∈V f(u, v) ≥ 0, ∀v ∈ V − {s} Flow Excess is the net flow into v where v ∈ V for some <b>preflow,</b> f. ef (v) = { ∞, v=s∑ u∈V f(u, v), ∀v ∈ V − {s}...|$|E
40|$|Abstract: In this paper, we {{describe}} the highest-label <b>preflow</b> algorithm for minimum flow. This algorithm is a special implementation of the generic <b>preflow</b> algorithm developed by Ciurea and Ciupală in [7]. It examines always an active node with the highest distance label and runs in O(n 2 √ m) time. Key–Words: Network flow; Network algorithms; Minimum flow problem...|$|E
40|$|In this study, {{with the}} NH 3 <b>preflow,</b> an AlN {{monolayer}} was initially formed {{on the surface}} of a sapphire substrate by the decomposition of the NH 3 source and Al 2 O 3 substrate. It was found that threading dislocation density significantly decreased. At an injection current of 350 and 1500 mA, the light output powers of light-emitting diodes (LEDs) with NH 3 <b>preflow</b> was increased by 2. 7 % and 12. 5 %, respectively. As the ambient temperature increased, the light output intensity decreased compared with room temperature, which could be attributed to the thermal-induced band-gap energy lowering and more thermally excited injection carriers escaping from the quantum wells without recombination. It also can be seen obviously that the hot/cold factors of LEDs with NH 3 <b>preflow</b> at different injection currents were better than those of the conventional LEDs. However, the behaviors of hot/cold factors at higher injection carriers were mainly influenced by the efficiency droop effect mechanism...|$|E
30|$|The {{problem here}} {{is to find the}} maximum flow from the dummy source node to dummy sink node. We wish to achieve that by {{manipulating}} the <b>preflow</b> f on the network satisfying constraints (1 – 3).|$|E
3000|$|... of an edge (v,[*]w) is {{the amount}} by which the flow can be increased. The push and relabel {{operations}} modify the <b>preflow</b> f and labelling d. A push from v to w increases f (v,[*]w) ande [...]...|$|E
40|$|This paper {{presents}} {{the air traffic}} Flow Balancing Model (FBM) which uses network maximum flow algorithms to accomplish air traffic flow management in the flight information regions under Brazilian control responsibility. Four maximum flow algorithms were implemented and tested in this work: Edmonds-Karp, Dinic, FIFO <b>Preflow</b> Push and Highest Label <b>Preflow</b> Push. Each algorithm has its particular method to calculate the maximum flow value, that results in different air traffic flow balancing solutions. A case study comparing the results for each algorithm is presented, and the results represent different balancing options that allow the traffic flow managers to choose which one better adapts to the tactical air traffic management scenery under analysis...|$|E
40|$|Aluminum nitride (AlN) epilayers were {{directly}} grown on (0001) -oriented sapphire substrates by metal organic {{chemical vapor deposition}} (MOCVD). Different types of initial processes of Trimethylaluminum (TMA) <b>preflow,</b> ammonia (NH(3)) <b>preflow,</b> and TMA and NH(3) pulsed flows were performed {{for the growth of}} the AlN epilayers. The surface morphology and the crystal quality were investigated on the basis of scanning electron microscopy (SEM), X-ray diffraction (XRD), and transmission electron microscopy (TEM). According to the results of comparatively flat surface, narrower full width at half maximum of (0002) and (10 - 12) rocking curves, and lower dislocations at the AlN/sapphire interface, we conclude that the crystal quality of the AlN epilayers are significantly improved by using the pulsed flows of NH(3) and TMA in the initial process...|$|E
40|$|Advanced {{topics in}} algorithms: {{bibliography}} list 2 Finger search trees {{are described in}} [3, 6]. The algorithm for shortest path inside a polygon is from [2]. The approximation of optimal seach trees is described in this book [4]. Splay tree were introduced in [5]. The <b>preflow</b> push algorithm appeared in [1]...|$|E
40|$|All {{previously}} known efficient maximum-flow algorithms work {{by finding}} augmenting paths, either one path {{at a time}} (as in the original Ford and Fulkerson algorithm) or all shortest-length augmenting paths at once (using the layered network approach of Dinic). An alternative method based on the <b>preflow</b> concept of Karzanov is introduced. A <b>preflow</b> is like a flow, except that the total amount flowing into a vertex is allowed to exceed the total amount flowing out. The method maintains a <b>preflow</b> in the original network and pushes local flow excess toward the sink along what {{are estimated to be}} shortest paths. The algorithm and its analysis are simple and intuitive, yet the algorithm runs as fast as any other known method on dense. graphs, achieving an O(n³) time bound on an n-vertex graph. By incorporating the dynamic tree data structure of Sleator and Tarjan, we obtain a version of the algorithm running in O(nm log(n²/m)) time on an n-vertex, m-edge graph. This is as fast as any known method for any graph density and faster on graphs of moderate density. The algorithm also admits efticient distributed and parallel implementations. A parallel implementation running in O(n²log n) time using n processors and O(m) space is obtained. This time bound matches that of the Shiloach-Vishkin algorithm, which also uses n processors but requires O(n²) space...|$|E
40|$|While the {{previous}} maximum-flow algorithms worked by finding augmenting paths, an alternate {{method is to}} find the maximum-flow using something called <b>preflow.</b> <b>Preflow</b> is flow that has entered a vertex but has not left yet. Two versions of the algorithm are presented; a generic version, in which the legal operations can be chosen in any order, and Relabel to Front version {{in which there is a}} specified order of the operations. The generic version achieves O(V 2 E), which is already an improvement on augmenting path algorithms. Relabel to Front gives us O(V 3) running time, which is a significant improvement on dense graphs. Many of the fastest actual implementations of the max flow algorithm are based on the push-relabel algorithm. There is an additional modification to their algorithm, using Link-Cut trees[3], that we do not cover in detail, and yet provides an upper bound of O(V E log(V 2 /E) ...|$|E
40|$|We {{present a}} novel {{algorithm}} for the integer maxflow problem. The algorithm {{is designed for}} a PRAM CREW with n 2 processing units. For almost all (in a strong sense) graphs {{of a number of}} common classes of random graphs, it finds a maxflow in O((log C + log 4 n) Δ log n= log(m=n)) time. Here C is the average edge capacity and m the (expected) number of edges. The same time bound holds for the average-case time of the algorithm. The algorithm exploits the regularity of random graphs. It saturates all edges and subsequently balances the resulting <b>preflow.</b> Keywords Algorithm, PRAM CREW, almost always, average-case analysis, pseudo-polylog, graphs, maxflow, <b>preflow,</b> balancing. 1 Introduction In this paper we present an algorithm for finding the maxflow of a directed graph with integer capacities. The problem of finding a maxflow (the MFP) has attracted many attention. To mention only some important results: algorithm number of PUs time order remark Sleator 1 n Δ m Δ lo [...] ...|$|E
40|$|The pseudoflow {{algorithm}} {{for solving}} the maximum flow and minimum cut problems was devised in Hochbaum (2008). The {{complexity of the}} algorithm was shown in (2008) to be O(nm log n). Chandran and Hochbaum, (2009) demonstrated that the pseudoflow algorithm is very efficient in practice, and that the highest label version of the algorithm tends to perform best. Here, we improve the running time of the highest label pseudoflow algorithm to O(n 3) using simple data structures and to O(nm log(n 2 /m)) using the dynamic trees data structure. Both these algorithms use {{a new form of}} Depth-First-Search implementation that is likely to be fast in practice as well. In addition, we give a new simpler description of the pseudoflow algorithm by relating it to the simplex algorithm as applied to the maximum <b>preflow</b> problem defined here. The interpretation of the generic pseudoflow algorithm as a simplex-like algorithm for the maximum <b>preflow</b> problem motivates the pseudoflow algorithm and highlights differences between the pseudoflow algorithm and the preflow-push algorithm of Goldber...|$|E
40|$|Strong {{photoluminescence}} and {{radiative recombination}} lifetimes longer than 1 ns {{at room temperature}} have been observed in GaN/Si/InGaN/GaN structures containing InGaN submicron islands. The flat islands, with a width at their base {{in the order of}} 200 nm and a height in the order of 1 — 2 nm, grow in a spiral mode around dislocations with partial or pure screw character after a passivation of the GaN surface by a <b>preflow</b> of disilane. Their surface density is comparabl...|$|E
40|$|Due to the {{character}} of the original source materials and the nature of batch digitization, quality control issues may be present in this document. Please report any quality issues you encounter to digital@library. tamu. edu, referencing the URI of the item. Includes bibliographical references: p. 41. Issued also on microfiche from Lange Micrographics. Maximum Matching Problem on Bipartite Graph (MMPBG) has attracted attentions because of its intuitive nature and its wide applicability. The best time efficiency for it is O(Vn- m) up to date, which is obtained through reducing it to Maximum Flow problem and using Dinic's Maximum Flow algorithm. There exist three popular Maximum Flow algorithms: Dinic's, Karzanov's, and Goldberg-Trajan's. Two techniques used among popular Maximum Flow algorithms are layered network and <b>preflow</b> scheme. Both Dinic's and Karzanov's algorithms use layered network technique. In contrast, GoldbergTrajan's Maximum Flow algorithm uses <b>preflow</b> technique, which has not been applied to MMPBG yet. This research is, therefore, to study the effect of applying Goldberg-Trajan to MMPBG and to explore the possibility of improving the time efficiency for MMPBG. The direct application of Goldberg-Trajan's Maximum Flow algorithm yields the time efficiency 0 (n 3) for MMPBG. Both Push and Lift operations dominate the time efficiency. A modified Goldberg-Trajan's Maximum Flow algorithm is developed to improve the time efficiency. The analysis shows that time consumed on Push operation with the new algorithm is reduced from 0 (n 2 m) to 0 (n 2). The time efficiency is dominated by Lift operation only with the new algorithm. In addition, the improvement on calls to Lift operations will improve the time efficiency for Push operations. The properties of a bipartite graph are further explored to improve the time efficiency. Some properties found in this research, such as four generic layers and maximum excess flow value of 1, are crucial to improve the algorithm on MMPBG. The results from this research show that the application of <b>preflow</b> method to NMPBG is perspective. Even though the preliminary results algorithm, it demonstrates its simplicity, and its possibility of improvement. Several aspects have been suggested for the improvement by analyzing the results of this research. The perspective time efficiency will be 0 (n 2) ...|$|E
40|$|Several pivot {{rules for}} the dual network simplex {{algorithm}} that enable it to solve a maximum flow problem on an n-node, m-arc network in at most 2 nm pivots and O(n^ 2 m) time are presented. These rules {{are based on the}} concept of a <b>preflow</b> and depend upon the use of node labels which are either the lengths of a shortest pseudoaugmenting path from those nodes to the sink node or valid underestimates of those lengths. Extended versions of our algorithms are shown to solve an important class of parametric maximum flow problems with no increase in the worst-case pivot and time bounds of these algorithms. ...|$|E
40|$|This note {{addresses}} {{a problem of}} assigning human operators to operations in a manufacturing system. The problem involves a set of operations, a work load for each operation, {{and a set of}} human operators, each skilled at a subset of the operations. The task is to assign the operators to the operations so as to maximize the capacity of the system, robustly. The problem is formulated as a network flow problem with a lexicographic objective. It is then shown how to solve this problem very efficiently as a parametric sequence of network maximum flow problems, by application of the "parametric preflow" algorithm of Gallo, Grigoriadis and Tarjan. operator assignment, parametric <b>preflow</b> algorithm, network flow, lexicographic objective, robustness...|$|E
40|$|Maximum flow {{problem is}} one of the {{fundamental}} problems in network flow theory and has been extensively investigated. In this work we describe the development of efficient algorithms for the maximum flow problem and the current situation in this area. For each algorithm, we describe the main idea, which is used to achieve a better time complexity and the relationship with previous algorithms. We did not describe algorithms in more detail, because some, especially more recent, are very complicated. Therefore, we mentioned literature where algorithms are described in more detail. The problem was first defined by Dantzig (1951) and solved by Ford and Fulkerson (1956), using the augmenting paths method. Since then has been an increasing number of algorithms. Edmonds and Karp (1968) showed that the algorithm of Ford - Fulkerson has time complexity O(nm^ 2), if the flow is increased firstly on shortest paths. Independently Dinitz (1970) demonstrated the concept of networks with the shortest paths - multi-layered networks - and reached the time complexity O(n^ 2 m). This limit was improved by Karzanov (1974), who introduced the concept of preflows in multi-layer networks. This time complexity was later improved by Goldberg and Tarjan (1986). Their algorithm sends <b>preflow</b> from the nodes that are closest to the sink. Information about the distance is better than a multi-layered network, because it is simpler to understand and easier to use in parallel algorithms. By using excess scaling Orlin and Ahuja (1988) improved Goldberg - Tarjan's algorithm. With progressive combination of blocking backflow and <b>preflow</b> Waisse (1992) showed the fastest algorithm for the maximum flow problem. With storage of the list of neighbor nodes heights for each node Pham, Lavallee, Bui and Do (2005) improved Goldberg - Tarjan's algorithm. Currently the fastest approximation algorithm is envisioned by Christiano, Kelner, Mandry and Spielman (2010) ...|$|E
40|$|Abstract. Graph cuts {{has emerged}} as a {{preferred}} method to solve a class of energy minimization problems in computer vision. It has been shown that graph cut algorithms designed keeping the structure of vision based flow graphs in mind are more efficient than known strongly polynomial time max-flow algorithms based on <b>preflow</b> push or shortest augmenting path paradigms [1]. We present here a new algorithm for graph cuts which not only exploits the structural properties inherent in image based grid graphs but also combines the basic paradigms of max-flow theory in a novel way. The algorithm has a strongly polynomial time bound. It has been bench-marked using samples from Middlebury [2] and UWO [3] database. It runs faster on all 2 D samples and is at least two to three times faster on 70 % of 2 D and 3 D samples in comparison to the algorithm reported in [1]. ...|$|E
40|$|The {{influence}} of the source gas supply sequence prior to growth and the NH 3 input partial pressure (PoNH 3) on the nucleation of InN islands during {{the initial stages of}} hydride vapor phase epitaxy on a nitrided (0001) sapphire substrate was investigated. The crystalline quality of the InN layer after subsequent lateral growth was also examined. When NH 3 was flowed prior to growth, single-crystal hexagonal InN islands formed. When InN was grown with a higher PoNH 3, the number of InN islands decreased remarkably while their diameter increased. The crystalline quality of InN grown on the hexagonal islands with a high PoNH 3 significantly improved with increasing growth time. A strong PL spectrum was observed only from InN layers grown with a high PoNH 3. It was thus revealed that an NH 3 <b>preflow</b> and a high PoNH 3 are effective for producing InN with high crystalline quality and good optical and electrical properties. Funding Agencies|Japan Society for the Promotion Science| 23760006 |International Training Program||Japan Society for the Promotion of Science||</p...|$|E
40|$|In this paper, {{we study}} network flow {{algorithms}} for bipartite networks. A network G = (V; E) is called bipartite if its vertex set V can be partitioned into two subsets V 1 and V 2 such that all edges have one endpoint in V 1 {{and the other}} in V 2. Let n = jV j, n 1 = jV 1 j, n 2 = jV 2 j, m = jEj and assume without loss of generality that n 1 n 2. We call a bipartite network unbalanced if n 1 ø n 2 and balanced otherwise. (This notion is necessarily imprecise.) We show that several maximum flow algorithms can be substantially sped up when applied to unbalanced networks. The basic idea in these improvements is a two-edge push rule that allows us to "charge" most computation to vertices in V 1, and hence develop algorithms whose running times depend on n 1 rather than n. For example, we show that the two-edge push version of Goldberg and Tarjan's FIFO <b>preflow</b> push algorithm runs in O(n 1 m + n 3 1) time and that the analogous version of Ahuja and Orlin's excess scaling algori [...] ...|$|E
40|$|The {{literature}} on network flow problems is extensive, {{and over the}} past 40 years researchers have made continuous improvements to algorithms for solving several classes of problems. However, the surge of activity on the algorithmic aspects of network flow problems {{over the past few years}} has been particularly striking. Several techniques have proven to be very successful in permitting researchers to make these recent contributions: (i) scaling of the problem data; (ii) improved analysis of algorithms, especially amortized average case performance and the use of potential functions; and (iii) enhanced data structures. In this survey, we illustrate some of these techniques and their usefulness in developing faster network flow algorithms. Our discussion focuses on the design of faster algorithms from the worst case perspective and we limit our discussion to the following fundamental problems: the shortest path problem, the maximum flow problem, and the minimum cost flow problem. We consider several representative algorithms from each problem class including the radix heap algorithm for the shortest path problem, <b>preflow</b> push algorithms for the maximum flow problem, and the pseudoflow push algorithms for the minimum cost flow problem...|$|E
40|$|Spatial {{patterns}} of scour and fill in two dryland ephemeral stream channels with sandy bed material have been measured with dense arrays of scour chains. Although {{the depth and}} areal extent of bed activity increased with discharge, active bed reworking at particular locations within the reaches resulted in downstream {{patterns of}} alternate shallower and deeper areas of scour. The variation was such that mean scour depths for individual cross sections varied about the mean for the reach {{by a factor of}} 2 – 4 while the locus of maximum scour traced a sinuous path about the channel centerline. The wavelength of the pattern of scour was about seven times the channel width. During each event, compensating fill returned the streambeds to <b>preflow</b> elevations, indicating that the streams were in approximate steady state over the period of study. Although the patterns of periodically enhanced scour along alternate sides of the channels are consistent with models of periodically reversing helical flow, further work is required to identify the causal relationships between patterns of flow and sediment transport in dryland sand bed channels. This research has been funded by the Natural Environment Research Council (grant GR 3 / 12754) ...|$|E
30|$|Several devices, such as HBTs, HEMTs, {{solar cells}} and LEDs, are {{currently}} based on InGaP/GaAs heterojunction {{because of its}} superior properties with respect to AlGaAs [1 – 4]. The InGaP/GaAs system, especially if it is grown by metal organic vapour phase deposition (MOCVD), has, however, the drawback that the interfaces between InGaP and GaAs are deteriorated, as shown by photoluminescence, X-ray diffraction and transmission electron microscopy (TEM), {{because there is no}} common group V element across the interface [5]. This mostly affects the inverted GaAs-on-InGaP interface where an unwanted extra interlayer forms, which recombines the minority carriers more efficiently than the GaAs quantum well [5 – 10]. The normal InGaP-on-GaAs interface is always good, but this is not sufficient to guarantee reliable device performance. The deterioration of the inverted GaAs-on-InGaP interface has been seen to occur in practically every MOCVD InGaP/GaAs heterostructure containing such an interface, to a more or less great extent depending on the growth conditions [5 – 10]. It could sometimes be avoided by the use of growth interruption between the layers [6], the growth on top of InGaP of a thin (1 nm) intentional interfacial layer of GaP [5, 7, 9] or GaAlAs [8], or the application of a <b>preflow</b> of trimethylgallium on the InGaP surface before switching on the AsH 3 flow [11].|$|E
40|$|This study {{aimed at}} the {{deposition}} of graphene on Si(001) via CVD by depositing Ga on Si, which was then treated with C. Ga {{has been shown to}} have a catalytic effect on the growth of graphene. This study focussed on examining the growth surface and the deposition of Ga on this. Si(001) was primarily used as substrate, but as an intermixing of Ga and Si was observed, the usage of a GaP interlayer was also studied. Finally the deposition of C on Ga-pretreated Si and on GaP was investigated. Ga deposition was examined for the Ga precursors TEGa and TMGa. The results obtained for the precursors differ from each other due to the different reaction pathways for decomposition. For all utilized conditions Ga etches into Si, forming pyramidal structures. Mounds occur on the surface above these. The pyramidal structures exhibit boundaries on the Si{ 111 } lattice planes due to the greater stability of these. The dimensions of the pyramidal structures and mounds are increased for TMGa compared to TEGa deposition. This might result from an organic layer formed by the residual groups on the Si surface for TEGa deposition. This might restrict the mobility of Ga. A preferential ordering of Ga aggregates at SB step edges was observed for low surface coverage. Like the preferential annihilation of Si vacancies at SB step edges, this might be caused by a change in the electronic structure at these particular step edges. Considerable intermixing of Ga and Si was observed for TMGa deposition, resulting in the growth of new crystalline Si structures {{at the edges of the}} Ga-containing structures during the sample cool-down. To prevent this intermixing a GaP interlayer was grown on Si(001) prior to Ga deposition. The stability of GaP at high temperatures and the GaP growth on Si(001) was examined. A GaP buffer on GaP(001) as well as a GaP layer on Si(001) remains intact during annealing in H 2 at 50 mbar and temperatures up to 800 °C, without a stabilization. Earlier studies have shown that a high-quality growth of GaP on Si(001) is possible when a TBP <b>preflow</b> is applied. The precise processes at the interface were analyzed here. The usage of a sufficient amount of TBP led to an absence of Ga-containing aggregates for both Ga precursors. GaP growth at 450 °C only occurred in combination with TEGa. TBP only decompose at 450 °C in the presence of a catalyst such as TEGa. TMGa does not have a catalytic effect. As no Ga structures appear on the Si either for TMGa when a TBP <b>preflow</b> is used, the Si surface is presumably covered by a protective layer of TBP after the <b>preflow.</b> The TBP molecules preferentially order in rows perpendicular to the dimer rows on the Si(001) surface. This is probably due to H vacancies having a stabilized position on the next-row dimer next to a TBP molecule, constituting a favored adsorption site for further TBP molecules. Ga deposition on GaP(001) substrate and GaP on Si(001) was also studied for TEGa and TMGa. Here, too, Ga etches into the crystalline substrate and mounds form above the etched formations. For thin GaP layers on Si(001), Ga etches through the GaP and reaches the Si, forming pyramidal structures there. For thicker GaP layers and GaP substrates, less Ga diffuses into the GaP and structures with boundaries on lattice planes with a higher index than { 111 } form. An annealing of Ga-pretreated samples led to a disappearance of Ga at a temperature of 800 °C. An annealing at a lower temperature results in a further intermixing of Ga with the substrate. No Ga was observed at the Si(001) surface after annealing, while on GaP metallic Ga is still present. Only samples with a GaP interlayer were therefore used for C deposition. A supply of C on Ga-pretreated samples led to etching of the initially existing Ga aggregates. This was observed for all C precursors studied, namely TBEthyne, TBEthylene and benzene, and most conditions applied. C deposition was therefore also studied on GaP surfaces without a prior deposition of Ga. Small amounts of C could be deposited at a growth temperature of 800 °C, using the C precursor ethylene and H 2 as carrier gas. Considerable amounts of material were deposited for the usage of N 2 as carrier gas. But no signal induced by ordered C was detected by Raman spectroscopy, indicating that purely amorphous material was deposited. The most successful growth of C structures was achieved by supplying TBP during a high-temperature treatment of GaP. Considerable amounts of C were detected by SIMS and graphene-induced vibrational bands were found by Raman spectroscopy. No graphene layer was detected yet. However, a C containing layer exhibiting sp²-bonds was deposited for all conditions applied for a high-temperature treatment with TBP supply. As no sp²-bonded C atoms exist in the TBP molecule, these bonds must have formed during or after deposition. This could be used as starting point for further investigations of the deposition of graphene on Si(001) ...|$|E
40|$|Prepared by Sandia Laboratories, Albuquerque, New Mexico 87185 and Livermore, California 94550 for the United States Department of Energy under Contract DE-AC 04 - 76 DP 00789. "The Hawaiian lava {{lake in the}} Kilauea Iki pit crater, {{resulting}} from the 1959 summit eruption of Kilauea volcano, {{has served as a}} natural laboratory for the continuing study of the petrology, rheology, and thermal history of ponded molten basalt flows in the field environment. During 1975 and 1976, a series of electromagnetic and seismic experiments were coordinated in an attempt to define the in-situ geophysical properties and the configuration of the molten lava core as closely as possible. Drilling and geophysical experiments in 1976 suggested that the solidified crust of the lava lake had a cool, resistive surface layer, undersaturated with water to a depth of 5 meters. A warm, wet layer containing appreciable water and/or steam was essentially isothermal (100 /sup 0 /C) to 33 meters. From 33 to 45 meters the temperature climbed rapidly (from 100 /sup 0 / to 1070 /sup 0 /C) until a thin plexus of molten sills was encountered, interbedded with solid layers. Below this (50 meters) was apparently a layer having the highest temperature, lowest viscosity, and lowest density of olivine phenocrysts. At 70 meters, a transition zone to a crystalline mush was indicated, and finally (between 80 and 95 meters), solid basalt extended down to the <b>preflow</b> surface at a depth of 115 to 120 meters. DOE Contract Number: AC 04 - 76 DP 0078...|$|E
40|$|Osteoblasts {{respond to}} both fluid shear and {{parathyroid}} hormone (PTH) with a {{rapid increase in}} intracellular calcium concentration ([Ca 2 +]i). Because both stimuli modulate the kinetics of the mechanosensitive cation channel (MSCC), we postulated PTH would enhance the [Ca 2 +]i response to fluid shear by increasing the sensitivity of MSCCs. After a 3 -minute <b>preflow</b> at 1 dyne/cm 2, MC 3 T 3 -E 1 cells were subjected to various levels of shear and changes in [Ca 2 +]i were assessed using Fura- 2. Pretreatment with 50 nM bovine PTH(1 - 34) [bPTH(1 - 34) ] significantly enhanced the shear magnitude-dependent increase in [Ca 2 +]i. Gadolinium (Gd 3 +), an MSCC blocker, significantly inhibited the mean peak [Ca 2 +]i response to shear and shear + bPTH(1 - 34). Nifedipine (Nif), an L-type voltage-sensitive Ca 2 + channel (VSCC) blocker, also significantly reduced the [Ca 2 +]i response to shear + bPTH(1 - 34), but not to shear alone, suggesting VSCC activation plays an interactive role in the action of these stimuli together. Activation of either the protein kinase C (PKC) or protein kinase A (PKA) pathways with specific agonists indicated that PKC activation did not alter the Ca 2 + response to shear, whereas PKA activation significantly increased the [Ca 2 +]i response to lower magnitudes of shear. bPTH(1 - 34), which activates both pathways, induced the greatest [Ca 2 +]i response at each level of shear, suggesting an interaction of these pathways in this response. These data indicate that PTH significantly enhances the [Ca 2 +]i response to shear primarily via PKA modulation of the MSCC and VSCC...|$|E
