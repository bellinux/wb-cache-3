454|1|Public
25|$|The <b>PCI</b> <b>bus</b> arbiter {{performs}} {{bus arbitration}} among multiple masters on the <b>PCI</b> <b>bus.</b> Any number of bus masters can reside on the <b>PCI</b> <b>bus,</b> {{as well as}} requests for the bus. One pair of request and grant signals is dedicated to each bus master.|$|E
25|$|The <b>PCI</b> <b>bus</b> {{requires}} {{that every time}} the device driving a <b>PCI</b> <b>bus</b> signal changes, one turnaround cycle must elapse between the time the one device stops driving the signal and the other device starts. Without this, {{there might be a}} period when both devices were driving the signal, which would interfere with bus operation.|$|E
25|$|Conventional PCI, often {{shortened}} to PCI, is a {{local computer}} bus for attaching hardware devices in a computer. PCI is the initialism for Peripheral Component Interconnect and {{is part of the}} PCI Local Bus standard. The <b>PCI</b> <b>bus</b> supports the functions found on a processor bus but in a standardized format that is independent of any particular processor's native bus. Devices connected to the <b>PCI</b> <b>bus</b> appear to a bus master to be connected directly to its own bus and are assigned addresses in the processor's address space. It is a parallel bus, synchronous to a single bus clock.|$|E
25|$|I/O {{addresses}} are for {{compatibility with}} the Intel x86 architecture's I/O port address space. Although the <b>PCI</b> <b>bus</b> specification allows burst transactions in any address space, most devices only support it for memory addresses and not I/O.|$|E
25|$|In 1994, DEC {{launched}} a new range of AlphaStation and AlphaServer systems. These used 21064 or 21164 processors and introduced the <b>PCI</b> <b>bus,</b> VGA-compatible frame buffers and PS/2-style keyboards and mice. The AlphaServer 8000 series superseded the DEC 7000/10000 AXP and also employed XMI and FutureBus+ buses.|$|E
25|$|The {{combination}} of this turnaround cycle and {{the requirement to}} drive a control line high for one cycle before ceasing to drive it means {{that each of the}} main control lines must be high for a minimum of two cycles when changing owners. The <b>PCI</b> <b>bus</b> protocol is designed so this is rarely a limitation; only in a few special cases (notably fast back-to-back transactions) is it necessary to insert additional delay to meet this requirement.|$|E
25|$|On 3 April 2008, DPA {{announced}} that a total of 32.71 million of DTT (ISDB-T) TV sets capable of DTT reception (excepting 1seg receivers) had been installed in Japan as {{of the end of}} March 2008. On 8 April 2008 DPA also announced guidelines for manufacturers of DTT receiving, record and replay unit which operate with personal computers. These add-on units operate on USB or <b>PCI</b> <b>BUS,</b> and went on sale on a reservation basis from late April, appearing in retail store in mid-May 2008.|$|E
25|$|During the 1990s, Intel Architecture Labs (IAL) was {{responsible}} {{for many of the}} hardware innovations for the PC, including the <b>PCI</b> <b>Bus,</b> the PCI Express (PCIe) bus, and Universal Serial Bus (USB). IAL's software efforts met with a more mixed fate; its video and graphics software was important in the development of software digital video, but later its efforts were largely overshadowed by competition from Microsoft. The competition between Intel and Microsoft was revealed in testimony by then IAL Vice-President Steven McGeady at the Microsoft antitrust trial (United States v. Microsoft Corp.).|$|E
25|$|DirectShow 6.0, {{released}} {{as part of}} DirectX Media introduced the Overlay Mixer renderer designed for DVD playback and broadcast video streams with closed captioning and subtitles. The Overlay Mixer uses DirectDraw 5 for rendering. Downstream connection with the Video Renderer is required for window management. Overlay Mixer also supports Video Port Extensions (VPE), enabling it to work with analog TV tuners with overlay capability (sending video directly to a video card via an analog link rather than via the <b>PCI</b> <b>bus).</b> Overlay Mixer also supports DXVA connections. Because it always renders in overlay, full-screen video to TV-out is always activated.|$|E
25|$|During the Mac's {{early history}} Apple {{generally}} refused to adopt prevailing industry standards for hardware, instead creating their own. This trend was largely reversed {{in the late}} 1990s, beginning with Apple's adoption of the <b>PCI</b> <b>bus</b> in the 7500/8500/9500 Power Macs. Apple has since joined the industry standards groups to influence the future direction of technology standards such as USB, AGP, HyperTransport, Wi-Fi, NVMe, PCIe and others in its products. FireWire is an Apple-originated standard that was widely adopted across the industry after it was standardized as IEEE 1394 and is a legally mandated port in all Cable TV boxes in the United States.|$|E
25|$|The {{first version}} of {{conventional}} PCI found in consumer desktop computers was a 32-bit bus using a 33MHz bus clock and 5V signalling, although the PCI 1.0 standard provided for a 64-bit variant as well. These have one locating notch in the card. Version 2.0 of the PCI standard introduced 3.3V slots, physically distinguished by a flipped physical connector to preventing accidental insertion of 5V cards. Universal cards, which can operate on either voltage, have two notches. Version 2.1 of the PCI standard introduced optional 66MHz operation. A server-oriented variant of conventional PCI, called PCI-X (PCI Extended) operated at frequencies up to 133MHz for PCI-X 1.0 and up to 533MHz for PCI-X 2.0. An internal connector for laptop cards, called Mini PCI, was introduced in version 2.2 of the PCI specification. The <b>PCI</b> <b>bus</b> was also adopted for an external laptop connector standard the CardBus. The first PCI specification was developed by Intel, but subsequent development of the standard became {{the responsibility of the}} PCI Special Interest Group (PCI-SIG).|$|E
2500|$|... the {{initiator}} {{still has}} permission (from its GNT# input) {{to use the}} <b>PCI</b> <b>bus.</b>|$|E
2500|$|In addition, {{there are}} PCI Latency Timers {{that are a}} {{mechanism}} for PCI Bus-Mastering devices to share the <b>PCI</b> <b>bus</b> fairly. [...] "Fair" [...] in this case means that devices will not use such {{a large portion of}} the available <b>PCI</b> <b>bus</b> bandwidth that other devices are not able to get needed work done. Note, this does not apply to PCI Express.|$|E
2500|$|Due to {{the need}} for a {{turnaround}} cycle between different devices driving <b>PCI</b> <b>bus</b> signals, in general it is necessary to have an idle cycle between <b>PCI</b> <b>bus</b> transactions. [...] However, in some circumstances it is permitted to skip this idle cycle, going directly from the final cycle of one transfer (IRDY# asserted, FRAME# deasserted) to the first cycle of the next (FRAME# asserted, IRDY# deasserted).|$|E
2500|$|The <b>PCI</b> <b>bus</b> detects parity errors, {{but does}} not attempt to correct them by {{retrying}} operations; it is purely a failure indication. [...] Due to this, {{there is no need}} to detect the parity error before it has happened, and the <b>PCI</b> <b>bus</b> actually detects it a few cycles later. [...] During a data phase, whichever device is driving the AD lines computes even parity over them and the C/BE# lines, and sends that out the PAR line one cycle later. [...] All access rules and turnaround cycles for the AD bus apply to the PAR line, just one cycle later. [...] The device listening on the AD bus checks the received parity and asserts the PERR# (parity error) line one cycle after that. [...] This generally generates a processor interrupt, and the processor can search the <b>PCI</b> <b>bus</b> for the device which detected the error.|$|E
2500|$|The PCI {{standard}} permits bus {{bridges to}} convert multiple bus transactions into one larger transaction under certain situations. [...] This {{can improve the}} efficiency of the <b>PCI</b> <b>bus.</b>|$|E
2500|$|<b>PCI</b> <b>bus</b> traffic {{consists}} {{of a series of}} <b>PCI</b> <b>bus</b> transactions. [...] Each transaction {{consists of}} an address phase followed by one or more data phases. [...] The direction of the data phases may be from initiator to target (write transaction) or vice versa (read transaction), but all of the data phases must be in the same direction. [...] Either party may pause or halt the data phases at any point. [...] (One common example is a low-performance PCI device that does not support burst transactions, and always halts a transaction after the first data phase.) ...|$|E
2500|$|When {{developing}} and/or troubleshooting the <b>PCI</b> <b>bus,</b> {{examination of}} hardware signals {{can be very}} important. [...] Logic analyzers and bus analyzers are tools which collect, analyze, and decode signals for users to view in useful ways.|$|E
2500|$|Devices are {{required}} to follow a protocol so that the interrupt lines can be shared. [...] The <b>PCI</b> <b>bus</b> includes four interrupt lines, {{all of which are}} available to each device. [...] However, they are not wired in parallel as are the other <b>PCI</b> <b>bus</b> lines. [...] The positions of the interrupt lines rotate between slots, so what appears to one device as the INTA# line is INTB# to the next and INTC# to the one after that. [...] Single-function devices use their INTA# for interrupt signaling, so the device load is spread fairly evenly across the four available interrupt lines. [...] This alleviates a common problem with sharing interrupts.|$|E
2500|$|<b>PCI</b> <b>bus</b> {{transactions}} {{are controlled by}} five main control signals, two driven by the initiator of a transaction (FRAME# and IRDY#), and three driven by the target (DEVSEL#, TRDY#, and STOP#). [...] There are two additional arbitration signals (REQ# and GNT#) which are used to obtain permission to initiate a transaction. [...] All are active-low, meaning that the active or asserted state is a low voltage. [...] Pull-up resistors on the motherboard ensure they will remain high (inactive or deasserted) if not driven by any device, but the <b>PCI</b> <b>bus</b> {{does not depend on}} the resistors to change the signal level; all devices drive the signals high for one cycle before ceasing to drive the signals.|$|E
2500|$|A <b>PCI</b> <b>bus</b> {{transaction}} {{begins with}} an address phase. [...] The initiator, seeing that it has GNT# and the bus is idle, drives the target address onto the AD lines, the associated command (e.g. memory read, or I/O write) on the C/BE# lines, and pulls FRAME# low.|$|E
2500|$|All <b>PCI</b> <b>bus</b> {{signals are}} sampled on the rising {{edge of the}} clock. [...] Signals {{nominally}} change on the falling edge of the clock, giving each PCI device approximately one half a clock cycle {{to decide how to}} respond to the signals it observed on the rising edge, and one half a clock cycle to transmit its response to the other device.|$|E
2500|$|On {{the sixth}} cycle, {{if there has}} been no response, the {{initiator}} may abort the transaction by deasserting FRAME#. [...] This is known as master abort termination and it is customary for <b>PCI</b> <b>bus</b> bridges to return all-ones data (0xFFFFFFFF) in this case. [...] PCI devices therefore are generally designed to avoid using the all-ones value in important status registers, so that such an error can be easily detected by software.|$|E
2500|$|Any PCI device may {{initiate}} a transaction. [...] First, it must request permission from a <b>PCI</b> <b>bus</b> arbiter on the motherboard. [...] The arbiter grants permission {{to one of}} the requesting devices. [...] The initiator begins the address phase by broadcasting a 32-bit address plus a 4-bit command code, then waits for a target to respond. [...] All other devices examine this address and one of them responds a few cycles later.|$|E
2500|$|By the mid-1990s, when PC's had {{migrated}} to the <b>PCI</b> <b>bus,</b> Cirrus had fallen behind S3 and Trident Microsystems. When the announced release date of the GD5470 [...] "Mondello" [...] came and went, Cirrus's reputation in desktop PC-graphics suffered. Mondello development took {{a back seat to}} the GD5464 which was near completion and proved to be a much faster design with the use of Rambus. (Because of this Mondello never got off the ground) ...|$|E
2500|$|This is {{a special}} form of read cycle implicitly {{addressed}} to the interrupt controller, which returns an interrupt vector. [...] The 32-bit address field is ignored. [...] One possible implementation is to generate an interrupt acknowledge cycle on an ISA bus using a PCI/ISA bus bridge. [...] This command is for IBM PC compatibility; {{if there is no}} Intel 8259 style interrupt controller on the <b>PCI</b> <b>bus,</b> this cycle need never be used.|$|E
2500|$|While the <b>PCI</b> <b>bus</b> {{transfers}} 32 bits per data phase, the initiator transmits 4 active-low byte enable signals indicating which 8-bit bytes are to {{be considered}} significant. [...] In particular, a write must affect only the enabled bytes in the target PCI device. [...] They are of little importance for memory reads, but I/O reads might have side effects. [...] The PCI standard explicitly allows a data phase with no bytes enabled, which must behave as a no-op.|$|E
2500|$|Any {{device on}} a <b>PCI</b> <b>bus</b> that {{is capable of}} acting as a bus master may {{initiate}} a transaction with any other device. [...] To ensure that only one transaction is initiated at a time, each master must first wait for a bus grant signal, GNT#, from an arbiter located on the motherboard. [...] Each device has a separate request line REQ# that requests the bus, but the arbiter may [...] "park" [...] the bus grant signal at any device if there are no current requests.|$|E
50|$|The <b>PCI</b> <b>bus</b> arbiter {{performs}} {{bus arbitration}} among multiple masters on the <b>PCI</b> <b>bus.</b> Any number of bus masters can reside on the <b>PCI</b> <b>bus,</b> {{as well as}} requests for the bus. One pair of request and grant signals is dedicated to each bus master.|$|E
5000|$|<b>PCI</b> <b>bus.</b> The <b>PCI</b> <b>bus</b> support {{includes}} the traditional PCI specification, {{but may also}} include support for PCI-X and PCI Express (PCIe).|$|E
50|$|On the <b>PCI</b> <b>bus,</b> as {{mentioned}} above, the ANS uses the Bandit PCI bridge, {{just as the}} PM9500 does. The <b>PCI</b> <b>bus</b> arbiters are also identical (343S0182). The bus arbiters receive the <b>PCI</b> <b>Bus</b> Request signals and issue the Bus Grant Signals to the PCI slots and to the PCI bridge chips (Bandit).|$|E
50|$|A TOE solution, {{located on}} the network interface, is {{located on the}} other side of the <b>PCI</b> <b>bus</b> from the CPU host so it can address this I/O {{efficiency}} issue, as the data to be sent across the TCP connection can be sent to the TOE from the CPU across the <b>PCI</b> <b>bus</b> using large data burst sizes with none of the smaller TCP packets having to traverse the <b>PCI</b> <b>bus.</b>|$|E
50|$|The PIX535 has a PCI-X 66 MHz/64 bit bus for {{expansion}} slots. This {{results in a}} much higher cleartext throughput, as the <b>PCI</b> <b>bus</b> {{is no longer the}} bottleneck (the <b>PCI</b> <b>bus</b> is 33 MHz and 32 bits, resulting in maximum throughput of 1.2 GBit without overhead taken in account). As the lower Cisco ASA models use a <b>PCI</b> <b>bus,</b> the PIX535 was faster for cleartext than its successor ASA, until the introduction of the ASA5580.|$|E
50|$|Intel {{launched}} their <b>PCI</b> <b>bus</b> chipsets {{along with the}} P5-based Pentium CPUs in 1993. The <b>PCI</b> <b>bus</b> was introduced in 1991 as replacement for ISA. The standard (now at version 3.0) is found on PC motherboards to this day. The PCI standard supports bus bridging: as many as ten daisy chained PCI buses have been tested. Cardbus, using the PCMCIA connector, is a PCI format that attaches peripherals to the Host <b>PCI</b> <b>Bus</b> via PCI to PCI Bridge. Cardbus is being supplanted by ExpressCard format.|$|E
50|$|The northbridge {{extends to}} the north of the <b>PCI</b> <b>bus</b> {{backbone}} in support of CPU, memory/cache, and other performance-critical capabilities. Likewise the southbridge {{extends to the}} south of the <b>PCI</b> <b>bus</b> backbone and bridges to less performance-critical I/O capabilities such as the disk interface, audio, etc.|$|E
5000|$|<b>PCI</b> <b>Bus</b> - The PC/104-Plus and PCI-104 {{specifications}} {{allows for}} four PCI [...] "slots". This imposes a hard limit of four PCI peripheral boards per system. All PCI peripheral modules must connect consecutively {{on one side}} of the controller due to the signaling requirements of the <b>PCI</b> <b>bus.</b>|$|E
