68|175|Public
5|$|Hermes {{agrees to}} help Bender {{in his quest}} to {{discover}} the identity of Inspector No. 5, which is locked in the Central Bureaucracy. While at the Central Bureaucracy, Hermes logs into the computer system with his ID to look up Inspector No. 5's records. However, he and Bender find that the electronic record on Inspector No. 5 has been deleted and that the <b>physical</b> <b>file</b> is also missing. Bender calls Mom's Friendly Robot Company, who created him, and tells her he is defective. Mom attempts to have Bender destroyed {{to cover up the}} existence of a defective robot. The two flee from Mom's Killbots by train and arrive in Tijuanaâ€”where Bender was manufactured.|$|E
25|$|A file has event routines. e.g. on {{logical file}} end, on <b>physical</b> <b>file</b> end, on page end, on line end, on format end, on value error, on char error.|$|E
25|$|Windows Vista and Windows Server 2008 added {{self-healing}} ability, {{turned on}} by default, {{in addition to providing}} the CHKDSK command. It detects <b>physical</b> <b>file</b> system errors and silently fixes them on the fly. Thus, many problems previously discovered on running CHKDSK never appear. It is administered by fsutil repair command.|$|E
40|$|The {{health system}} for any country {{is one of}} the top {{priorities}} to guarantee the proper development for their citizens. For the specific case of Mexico, management of medical records is still being done using <b>physical</b> <b>files</b> whether patient attends a public or private physician or hospital. This poses a potential problem for the health structure and the patient because <b>physical</b> <b>files</b> tend to deteriorate, damage, could be stolen or mishandled. One possibility is to evolve from the use of <b>physical</b> <b>files</b> and create electronic medical records. Mexico already has an official standard for medical records; this standard could serve as the foundation to devise an electronic universal record. The idea for th...|$|R
25|$|The {{frequency}} of the first letters of words or names is helpful in pre-assigning space in <b>physical</b> <b>files</b> and indexes.|$|R
40|$|The <b>physical</b> {{register}} <b>file</b> is {{an important}} component of a dynamically-scheduled processor. Increasing the amount of parallelism places increasing demands on the <b>physical</b> register <b>file,</b> calling for alternative file organization and management strategies. This paper considers the use of value locality to optimize the operation of <b>physical</b> register <b>files...</b>|$|R
25|$|The {{database}} {{features of}} the HyperCard system {{are based on the}} storage of the state of all of the objects on the cards in the <b>physical</b> <b>file</b> representing the stack. The database did not exist as a separate system within the HyperCard stack; no database engine or similar construct exists. Instead, the state of any object in the system was considered to be live and editable at any time. From the HyperCard runtime's perspective, {{there was no difference between}} moving a text field on the card and typing into it, both operations simply changed the state of the target object within the stack. Such changes are immediately saved when complete, so typing into a field caused that text to be stored to the stack's <b>physical</b> <b>file.</b> The system operates in a largely stateless fashion, with no need to save during operation. This is in common with many database-oriented systems, although somewhat different from document-based applications.|$|E
500|$|Back at Planet Express, Bender celebrates his new {{outlook on}} life with the other crew members. Meanwhile, Hermes {{secretly}} burns Inspector No. 5's file, whose cover falls away to reveal that he was Inspector No. 5. A flashback reveals that he overrode the [...] "defective" [...] assessment on Bender {{to prevent him from}} being scrapped, then resigned from the company immediately afterward. Hermes' personnel file was deleted, and he stole his own <b>physical</b> <b>file</b> from the Central Bureaucracy; the computer at the Tijuana house was his own, so {{he did not have to}} hack into it. In the present, Hermes smiles quietly over the burning file, happy in knowing he did the right thing.|$|E
2500|$|In {{order to}} comply with {{government}} regulatory requirements surrounding BioPharma clinical trials, every organization involved in regulated clinical trials must maintain and store certain 'essential documents' related to the clinical trial to ensure regulatory compliance. [...] Depending on the regulatory jurisdiction, this information is typically stored in the trial master file or TMF. [...] The TMF has historically been composed primarily of paper documents, images and media captured centrally in <b>physical</b> <b>file</b> cabinets.|$|E
30|$|Physically, column {{families}} are stored on a per-column family basis. Therefore, when accessing two column {{families in the}} same HTable, HBase will access two separate <b>physical</b> <b>files.</b>|$|R
50|$|Concatenated Files - The system {{supports}} file concatenation, {{in which two}} or more <b>physical</b> <b>files</b> are recognized as a logically contiguous set of data. These files can exist on one or more volumes.|$|R
40|$|The paper {{proposes a}} general {{framework}} {{to build a}} model for automatic Function Point Analysis (FPA) from the source code of COBOL system using program slicing technique. The COBOL system source code is scanned by the model to produce Function Point counts. The application's source files are used to define the application's boundary for the count. The model {{takes into account the}} structure of the COBOL language to identify <b>physical</b> <b>files</b> and transactions. Reserved words as FDs, file input/output statements (READ and WRITE) and user interface and data manipulation statements (ACCEPT, DISPLAY and MOVE) are used as basic information for program slicing technique to identify candidate <b>physical</b> <b>files</b> and transactions. Some heuristic rules will be proposed in order to map candidate <b>physical</b> <b>files</b> and transactions into candidate logical files and transactions. These candidate files and transactions are then assessed with regards to the IFPUG' identifying rules in order to identify data function types and transactional function types to be counted. The proposed framework helps to build models for automating Function Point Analysis from source code in compliance with the IFPUG Counting Practices Manual...|$|R
50|$|The third {{layer is}} the <b>physical</b> <b>file</b> system. This layer is {{concerned}} with the physical operation of the storage device (e.g.disk). It processes physical blocks being read or written. It handles buffering and memory management and is responsible for the physical placement of blocks in specific locations on the storage medium. The <b>physical</b> <b>file</b> system interacts with the device drivers or with the channel to drive the storage device.|$|E
50|$|By contrast, if {{a camera}} is mounted via USB MSC, the <b>physical</b> <b>file</b> system and layout {{are exposed to}} the user.|$|E
5000|$|If {{a program}} uses a {{supporting}} library enclosed in a Jar file called supportLib.jar, physically in the directory D:\myprogram\lib\ {{and the corresponding}} <b>physical</b> <b>file</b> structure is: ...|$|E
5000|$|ISO/IEC 11179 proper {{does not}} {{describe}} data {{as it is}} actually stored. It does not refer to the description of <b>physical</b> <b>files,</b> tables and columns. The ISO/IEC 11179 constructs are [...] "semantic" [...] as opposed to [...] "physical" [...] or [...] "technical".|$|R
50|$|The {{repository}} stores {{information about}} fields (or data elements) {{in the application}} including descriptions, column headings, edit codes, visualizations, default values, help text, and prompt programs. It holds information about files and application database including <b>physical</b> <b>files,</b> logical files (or views), relationships, file definition attributes, file validation rules, trigger programs, multilingual definitions, virtual fields, and predetermined join fields. Objects and components used for event-driven Windows applications also reside in the repository.|$|R
50|$|Issued {{instructions}} {{read from}} a tag-indexed <b>physical</b> register <b>file</b> (bypassing just-broadcast operands) and then execute. Execution results are written to tag-indexed <b>physical</b> register <b>file,</b> {{as well as}} broadcast to the bypass network preceding each functional unit. Graduation puts the previous tag for the written architectural register into the free queue {{so that it can}} be reused for a newly decoded instruction.|$|R
50|$|Commercially {{available}} {{products can}} manage records through all processes active, inactive, archival, retention scheduling and disposal. Some also utilize RFID {{technology for the}} tracking of the <b>physical</b> <b>file.</b>|$|E
5000|$|The second {{optional}} {{layer is}} the virtual file system. [...] "This interface allows support for multiple concurrent instances of <b>physical</b> <b>file</b> systems, {{each of which}} is called a file system implementation." ...|$|E
5000|$|Windows Vista and Windows Server 2008 added {{self-healing}} ability, {{turned on}} by default, {{in addition to providing}} the CHKDSK command. It detects <b>physical</b> <b>file</b> system errors and silently fixes them on the fly. Thus, many problems previously discovered on running CHKDSK never appear. It is administered by [...] command.|$|E
50|$|Schema objects do {{not have}} a {{one-to-one}} correspondence to <b>physical</b> <b>files</b> on disk that store their information. However, Oracle databases store schema objects logically within a tablespace of the database. The data of each object is physically contained in {{one or more of the}} tablespace's datafiles. For some objects (such as tables, indexes, and clusters) a database administrator can specify how much disk space the Oracle RDBMS allocates for the object within the tablespace's datafiles.|$|R
40|$|To {{prepare the}} {{migration}} to the new ATLAS Data Management system called Rucio, a renaming campaign of all the <b>physical</b> <b>files</b> produced by ATLAS is needed. It represents around 300 M files split between âˆ¼ 120 sites with 6 different storage technologies. It must {{be done in a}} transparent way in order not to disrupt the ongoing computing activities. An infrastructure to perform this renaming has been developed and is presented in this paper as well as its performances...|$|R
50|$|Since the {{physical}} records {{are in this}} sort order on disk, the next row item in the sequence is immediately {{before or after the}} last one, and so fewer data block reads are required. The primary feature of a clustered index is therefore the ordering of {{the physical}} data rows in accordance with the index blocks that point to them. Some databases separate the data and index blocks into separate files, others put two completely different data blocks within the same <b>physical</b> <b>file(s).</b>|$|R
50|$|Case Management Software, used properly, {{improves}} efficiency, {{provides for}} conflict checking, and enables a law office {{to not have}} {{to search for the}} <b>physical</b> <b>file</b> each time a client calls with questions, thereby helping to reduce the need for callbacks since the client can get answers on an as needed basis {{at the time of their}} inquiry.|$|E
5000|$|A special folder {{can either}} be a {{reference}} to a <b>physical</b> <b>file</b> system directory, or {{a reference to a}} [...] "virtual" [...] folder. In the former case, they are analogous to environment variables [...] - [...] in fact, many of the environment variables that are set in a user's session are defined by where the special folders are set to point to.|$|E
50|$|The name folder, {{presenting}} {{an analogy}} to the file folder used in offices, {{and used in}} a hierarchical file system design for the Electronic Recording Machine, Accounting (ERMA) Mark 1 published in 1958 {{as well as by}} Xerox Star, is used in almost all modern operating systems' desktop environments. Folders are often depicted with icons which visually resemble <b>physical</b> <b>file</b> folders.|$|E
40|$|The {{detection}} {{of opportunities for}} value reuse optimizations in memory operations require both the addresses and values associated with these operations to be available. Although the values are typically available in the <b>physical</b> register <b>file,</b> their presence cannot be exploited because no correspondence between the values and addresses is maintained. In this paper we propose the explicit management of the <b>physical</b> register <b>file</b> contents as a level in the memory hierarchy by supporting the Value Address Association Structure (VAAS). The entries in VAAS have a one-to-one correspondence with entries in the <b>physical</b> register <b>file.</b> For each value in the register file that {{is involved in a}} load or store operation, the associated information, including the memory address, are stored in the corresponding VAAS entry. Several optimization tasks can be performed using the combination of physical registers and VAAS...|$|R
40|$|The {{implementation}} of a document imaging system was considered {{as an alternative to}} using the <b>physical</b> <b>files</b> within the processing of undergraduate admission applications at a major metropolitan research university. In theory, an electronic image of the application replaces the physical record, and in turn reduces the move and queue times, and increases the utilization of resources. The {{purpose of this paper is}} to show how simulation was used to analyze the potential impact of implementing a document imaging system in processing undergraduate admission applications...|$|R
40|$|The {{objective}} {{of this study is}} to find out the form and the type of urban space in the early of Solo, one of the oldest cities in Java. The object of study was approached by rationalistic research. The method of research was carried out by a-three-archive research strategy: primary files; secondary <b>files</b> and <b>physical</b> <b>files.</b> The primary files referred to the old Javanese documentary; the secondary files referred to the document of local, national and international historian; and the <b>physical</b> <b>files</b> referred to the field research that was conducted by interviews and collecting the artefacts. The research found that Solo was firstly formed as a-water-front city. The main buildings that constructed urban space in the early of Solo were a-three-village: Sala, Laweyan and Pajang. The main land element that formed urban space in the early of Solo was River Bengawan Solo. This giant river formed the urban space in Solo until 1750 s. The type of urban space was shaped up from three figures: linear; cluster; and central. The main humans who made urban space in the early of Solo were Ki Sala; Ki Gede Pemanahan; and Sultan Hadiwijaya. This study was also finding that The Chinese, Arab and India...|$|R
50|$|Virtuoso {{provides}} an extended object-relational model, which combines {{the flexibility of}} relational access with inheritance, run time data typing, late binding, and identity-based access. Virtuoso Universal Server database includes <b>physical</b> <b>file</b> and in memory storage and operating system processes that interact with the storage. There is one main process, which has listeners on a specified port for HTTP, SOAP, and other protocols.|$|E
5000|$|ISO 10303-21 {{defines the}} {{encoding}} mechanism for representing data conforming {{to a particular}} schema in the EXPRESS data modeling language specified in ISO 10303-11. A STEP-File is also called p21-File and STEP <b>Physical</b> <b>File.</b> The file extensions [...]stp and [...]step indicate that the file contains data conforming to STEP Application Protocols while the extension [...]p21 {{should be used for}} all other purposes.|$|E
50|$|The {{database}} {{features of}} the HyperCard system {{are based on the}} storage of the state of all of the objects on the cards in the <b>physical</b> <b>file</b> representing the stack. The database did not exist as a separate system within the HyperCard stack; no database engine or similar construct exists. Instead, the state of any object in the system was considered to be live and editable at any time. From the HyperCard runtime's perspective, {{there was no difference between}} moving a text field on the card and typing into it, both operations simply changed the state of the target object within the stack. Such changes are immediately saved when complete, so typing into a field caused that text to be stored to the stack's <b>physical</b> <b>file.</b> The system operates in a largely stateless fashion, with no need to save during operation. This is in common with many database-oriented systems, although somewhat different from document-based applications.|$|E
30|$|For {{the third}} design, the issues with this pattern {{are related to}} the {{limitations}} in the design of HBase itself. In HBase, a column family is stored in a single file split across HDFS [15], which means that when accessing a row there is the potential of accessing two <b>physical</b> <b>files.</b> Considering the distributed nature of HBase, this implies that each column family file is not necessarily stored on the same server. Consequently, access time can be greatly increased if a scan needs to access both column families of the same table.|$|R
40|$|A large logical {{register}} file {{is important}} to allow effective compiler transformations or to provide a windowed space of registers to allow fast function calls. Unfortunately, a large logical register file can be slow, particularly {{in the context of}} a wide-issue processor which requires an even larger <b>physical</b> register <b>file,</b> and many read and write ports. Previous work has suggested that a register cache can be used to address this problem. This paper proposes a new register caching mechanism in which a number of good features from previous approaches are combined with existing out-of-order processor hardware to implement a register cache for a large logical register file. It does so by separating the logical register <b>file</b> from the <b>physical</b> register <b>file</b> and using a modified form of register renaming to make the cache easy to implement. The <b>physical</b> register <b>file</b> in this configuration contains fewer entries than the logical register file and is designed so that the physical register fi [...] ...|$|R
40|$|Abstract. STEP-NC {{provides}} a way for intelligent NC manufacturing and seamless connection of the computer systems in design and manufacturing industries. It also makes it a must for {{a new breed of}} CNC machines to interface directly with the new part programs in STEP format (ISO 10303 - 21). In this paper, the data model and structure of part programs based on STEP-NC (STEP AP 238) are overviewed. Available tools are discussed and a method of extracting the manufacturing information from STEP-NC <b>physical</b> <b>files</b> is presented, and corresponding software module are developed in ST-Developer TM environment. With the aid of the STI...|$|R
