199|167|Public
5000|$|Testing {{criterion}} (e.g.: <b>path</b> <b>coverage,</b> {{statement coverage}} etc.) ...|$|E
50|$|M is a {{lower bound}} {{for the number of}} paths through the control flow graph (CFG). Assuming each test case takes one path, the number of cases needed to achieve <b>path</b> <b>coverage</b> is equal to the number of paths that can {{actually}} be taken. But some paths may be impossible, so although the number of paths through the CFG is clearly an upper bound on the number of test cases needed for <b>path</b> <b>coverage,</b> this latter number (of possible paths) is sometimes less than M.|$|E
50|$|Some of the {{coverage}} criteria above are connected. For instance, <b>path</b> <b>coverage</b> implies decision, statement and entry/exit coverage. Decision coverage implies statement coverage, because every statement {{is part of a}} branch.|$|E
40|$|The thesis {{considers}} the <b>coverage</b> <b>path</b> planning CPP problem. A <b>coverage</b> <b>path</b> {{of a region}} O is a path-curve P ⊆ Q, so that for every point x ∈ O the distance between x and P is at most d. We {{are looking for a}} <b>coverage</b> <b>path</b> whose length is as small as possible. We focus on polygonal regions and also require that P is a polygonal line. We use a divide-and-conquer approach, we ﬁrst tesselate our region with smaller tiles, respective <b>coverage</b> <b>paths</b> of individual tiles are later combined in a global <b>coverage</b> <b>path.</b> We limit ourselves to two diﬀerent tesselations, a tesselation using trapeze tiles and the Boustrophedon tesselation. We optimize the length of the <b>coverage</b> <b>path</b> using diﬀerent orderings of tiles along a <b>coverage</b> <b>path</b> as well as changing the direction of our tesselation. Considering several families of polygons we can state that choosing Boustrophedon tesselation outperforms the trapeze one, and that the choice of the optimal direction of the tesselation is highly dependent on the ratio between size of O and required resolution d...|$|R
40|$|Autonomous {{underwater}} vehicles (AUVs) are unmanned {{vehicles that}} operate underwater. These vehicles {{can be used}} for various operations, including scanning the ocean floor in order to search for objects. In such operations, the AUV navigates close to the ocean floor, using its sonar systems to map this ocean floor. Before an AUV is launched on a search operation, usually very {{little is known about the}} underwater conditions at the search location. Currently, the AUV’s <b>coverage</b> <b>path</b> is often defined before the start of the operation. However, the <b>coverage</b> <b>path</b> depends on the quality of the sonar images, which in turn depend on the unknown and varying underwater conditions. Therefore, it is unlikely that the predefined <b>coverage</b> <b>path</b> is optimal. In this final thesis project a <b>coverage</b> <b>path</b> planner is developed, which autonomously adapts the AUV’s <b>coverage</b> <b>path</b> to the changing underwater conditions during an operation. Since the radio waves carrying the global positioning system (GPS) signal do not travel far in seawater, the AUV needs to keep track of its location using an inertial navigation system (INS). Unfortunately, the error on the location measurements obtained from an INS grows over time, causing the AUV’s believed trajectory to differ significantly from the AUV’s true trajectory. As a result, parts of the search area might be believed to have been covered, while these parts have in reality not been visited. Taking the AUV’s uncertain trajectory into account thus increases the complexity of the <b>coverage</b> <b>path</b> planning problem. In order to keep track of which parts of the search area have been covered, and to which extent, a coverage map of the search area is maintained during an operation. This coverage map is constructed such that it takes the uncertainty on the AUV’s location measurements into account. Three different <b>coverage</b> <b>path</b> planners have been developed that use this coverage map to autonomously plan the AUV’s <b>coverage</b> <b>path</b> during an operation. The three different <b>coverage</b> <b>path</b> planners have been implemented in MATLAB, and they have been evaluated in a simulation framework developed by TNO. The simulation results show that all three <b>coverage</b> <b>path</b> planners consistently achieve the required coverage of the search area, in a scenario where no large changes in the underwater conditions occurred. Furthermore, one of the <b>coverage</b> <b>path</b> planners has been evaluated in three scenarios where large changes during the operation did occur. Halfway during these scenarios, either the strength of the underwater currents increased, the required coverage of the search area increased, or one of the AUV’s sonar systems broke down. In all of these scenarios, the <b>coverage</b> <b>path</b> planner successfully adapted the <b>coverage</b> <b>path</b> such that the required coverage of the search area was still achieved. Systems and Contro...|$|R
5000|$|... 2010: Health systems financing: The <b>path</b> to {{universal}} <b>coverage</b> ...|$|R
5000|$|Full <b>path</b> <b>coverage,</b> of {{the type}} {{described}} above, is usually impractical or impossible. Any module with a succession of [...] decisions in it can have up to [...] paths within it; loop constructs can result in {{an infinite number of}} paths. Many paths may also be infeasible, in that there is no input to the program under test that can cause that particular path to be executed. However, a general-purpose algorithm for identifying infeasible paths has been proven to be impossible (such an algorithm could be used to solve the halting problem). Basis path testing is for instance a method of achieving complete branch coverage without achieving complete <b>path</b> <b>coverage.</b>|$|E
5000|$|Methods for {{practical}} <b>path</b> <b>coverage</b> testing instead attempt to identify classes of code paths that differ {{only in the}} number of loop executions, and to achieve [...] "basis path" [...] coverage the tester must cover all the path classes.|$|E
50|$|In this example, two {{test cases}} are {{sufficient}} {{to achieve a}} complete branch coverage, while four are necessary for complete <b>path</b> <b>coverage.</b> The cyclomatic complexity {{of the program is}} 3 (as the strongly connected graph for the program contains 9 edges, 7 nodes and 1 connected component) (9-7+1).|$|E
40|$|The {{path delay}} fault {{model is the}} most {{realistic}} model for delay faults. Testing all the paths in a circuit achieves 100 % delay fault coverage according to traditional <b>path</b> delay fault <b>coverage</b> metrics. These metrics result in unrealistically low fault coverage if only a subset of paths is tested, and the real test quality is not reflected. For example, the traditional <b>path</b> delay fault <b>coverage</b> of any practical test for circuit c 6288 is close to 0 because this circuit has an exponential number of paths. In this paper, a statistical and realistic <b>path</b> delay fault <b>coverage</b> metric is presented. Then the quality of several existing test sets (path selection methods) is evaluated in terms of local and global delay faults using this metric, {{in comparison with the}} transition fault and traditional <b>path</b> delay fault <b>coverage</b> metrics. 1...|$|R
40|$|With {{the rapid}} {{adoption}} of automatic guidance systems, automated path planning has great potential to further optimize field operations. Field operations {{should be done}} in a manner that minimizes time, travel over field surfaces and is coordinated with specific field operations, machine characteristics and topographical features of arable lands. To reach this goal, intelligent <b>coverage</b> <b>path</b> planning algorithm is key. This dissertation documents our innovative research in optimal field <b>coverage</b> <b>path</b> planning on both 2 D and 3 D surfaces. To determine the full coverage pattern of a given 2 D planar field by using boustrophedon paths, it is necessary to know whether to and how to decompose a field into sub-regions and how to determine the travel direction within each sub-region. A geometric model was developed to represent this <b>coverage</b> <b>path</b> planning problem, and a path planning algorithm was developed based on this geometric model. The search mechanism of the algorithm was guided by a customized cost function resulting from the analysis of different headland turning types and implemented with a divide-and-conquer strategy. The complexity of the algorithm was analyzed, and methods for reducing the computational time were discussed. Field examples with complexity ranging from a simple convex shape to an irregular polygonal shape that has multiple obstacles within its interior were tested with this algorithm. The results were compared with other reported approaches or farmers 2 ̆ 7 actual driving patterns. These results indicated the proposed algorithm was effective in producing optimal field decomposition and <b>coverage</b> <b>path</b> direction in each sub-region. In real world, a great proportion of farms have rolling terrains, which have considerable influences to the design of <b>coverage</b> <b>paths.</b> <b>Coverage</b> <b>path</b> planning in 3 D space has a great potential to further optimize field operations. To design optimal <b>coverage</b> <b>paths</b> on 3 D terrain surfaces, there were five important steps: terrain modeling and representation, topography impacts analysis, terrain decomposition and classification, coverage cost analysis and the development of optimal path searching algorithm. Each of the topics was investigated in this dissertation research. The developed algorithms and methods were successfully implemented in software and tested with practical 3 D terrain farm fields with various topographical features. Each field was decomposed into sub-regions based on terrain features. An optimal 2 ̆ 2 seed curve 2 ̆ 2 was found for each sub-region and parallel <b>coverage</b> <b>paths</b> were generated by offsetting the 2 ̆ 2 seed curve 2 ̆ 2 sideways until the whole sub-region was completely covered. Compared with the 2 D planning results, the experimental results of 3 D <b>coverage</b> <b>path</b> planning showed its superiority in reducing both headland turning cost and soil erosion cost...|$|R
40|$|The {{application}} of genetic algorithms in automatically {{generating test data}} has aroused broad concerns and obtained delightful achievements in recent years. However, the efficiency of genetic algorithm-based test data generation for path testing needs to be further improved. In this paper, we establish a mathematical model of generating test data for multiple <b>paths</b> <b>coverage.</b> Then, a multipopulation genetic algorithm with individual sharing is presented to solve the established model. We not only analyzed {{the performance of the}} proposed method theoretically, but also applied it to various programs under test. The experimental results show that the proposed method can improve the efficiency of generating test data for many paths’ coverage significantly...|$|R
50|$|C/C++test {{includes}} {{options for}} line coverage, meaning has the line been executed, block coverage, statement coverage, <b>path</b> <b>coverage,</b> decision coverage, branch coverage, and simple condition coverage. It also supports modified condition/decision coverage or MCDC because projects that require safe reliable software such as aircraft and cars, tend to required {{this form of}} coverage as it's {{believed to be a}} better measure of whether or the code has been thoroughly exercised.|$|E
30|$|<b>Path</b> <b>{{coverage}}</b> by {{a random}} network (or barrier coverage {{which is a}} relaxed version of the <b>path</b> <b>coverage)</b> {{has been the focus}} of some previous work [1 – 6]. In [1], assuming that a random network is deployed over an infinite area with nodes following a Poisson distribution, authors investigate the <b>path</b> <b>coverage</b> of the network. They first study the <b>path</b> <b>coverage</b> over an infinite straight line when the sensor has a random sensing range. Then, they show that in the asymptotic situation, where the sensing range of the sensors tends to 0 and the node density approaches infinity, the results are extendible to finite linear and curvilinear paths. Further, a <b>path</b> <b>coverage</b> analysis is proposed for a high-density Poisson-distributed network in [2] where sensors have a fixed sensing range. The <b>path</b> <b>coverage</b> analysis of [1, 2] is based on the Boolean model of [7], where a Poisson point process is justified.|$|E
3000|$|Full <b>path</b> <b>coverage.</b> It {{is desired}} {{to provide a}} {{complete}} coverage of the path. Since the full <b>path</b> <b>coverage</b> is identical to having no gaps, one can equivalently find [...]...|$|E
40|$|We {{propose a}} linear {{complexity}} method to estimate robust <b>path</b> delay fault <b>coverage</b> in digital circuits. We adopt a path counting scheme for a true-value simulator that uses flags for each signal line. These flags determine the new path delay faults detected by the simulated vector pair. Experimental {{results are presented}} to show {{the effectiveness of the}} method in estimating <b>path</b> delay fault <b>coverage...</b>|$|R
40|$|Coverage {{problems}} are a flourishing topic in optimization, {{thanks to the}} recent advances {{in the field of}} wireless sensor networks. The main coverage issue centres around critical conditions that require reliable monitoring and prohibit failures. This issue can be addressed by maximal-exposure paths, regarding which this article presents new results. Namely, it shows how to minimize the sensing range of a set of sensors in order to ensure the existence of a k-covered path between two points on a given region. Such a <b>path’s</b> <b>coverage</b> depends on k ≥ 2, which is fixed. The three types of regions studied are: a planar graph, the whole plane and a polygonal region. Peer ReviewedPostprint (published version...|$|R
5000|$|SPLAT! A {{software}} program for visualizing terrain and performing Longley-Rice <b>path</b> loss and <b>coverage</b> prediction using the Irregular Terrain Model.|$|R
3000|$|The second paper, [...] "Characterizing the <b>path</b> <b>coverage</b> {{of random}} {{wireless}} sensor networks" [...] by Noori et al., investigates the <b>path</b> <b>coverage</b> of a randomly deployed sensor network, {{which aims to}} monitor a circular path and discover any intruder trying to cross it. Using results from geometric probability, the authors determine the probability of full <b>path</b> <b>coverage,</b> distribution {{of the number of}} uncovered gaps over the path, and the probability of having no uncovered gaps larger than a specific size. They also derive a tight upper bound for the number of nodes guaranteeing the full <b>path</b> <b>coverage</b> with a desired reliability.|$|E
30|$|Wireless sensor {{networks}} {{are widely used}} in security monitoring applications to sense and report specific activities in a field. In <b>path</b> <b>coverage,</b> for example, the network {{is in charge of}} monitoring a path and discovering any intruder trying to cross it. In this paper, we investigate the <b>path</b> <b>coverage</b> properties of a randomly deployed wireless sensor network when the number of sensors and also the length of the path are finite. As a consequence, Boolean model, which has been widely used previously, is not applicable. Using results from geometric probability, we determine the probability of full <b>path</b> <b>coverage,</b> distribution of the number of uncovered gaps over the path, and the probability of having no uncovered gaps larger than a specific size. We also find the cumulative distribution function (cdf) of the covered part of the path. Based on our results on the probability of full <b>path</b> <b>coverage,</b> we derive a tight upper bound for the number of nodes guaranteeing the full <b>path</b> <b>coverage</b> with a desired reliability. Through computer simulations, it is verified that for networks with nonasymptotic size, our analysis is accurate where the Boolean model can be inaccurate.|$|E
30|$|<b>Path</b> <b>coverage</b> {{is one of}} the {{monitoring}} examples, where WSNs are deployed to sense a specific path and report possible efforts made by intruders to cross it. In a manual network deployment, the desired level of the <b>path</b> <b>coverage</b> can be achieved by proper placement of the sensors over the area. When {{it is not possible to}} deploy the network manually, random deployment, for example, dropping sensors from an aircraft, is used. Due to the randomness of the sensors location, network coverage expresses a stochastic behavior and the desired (full) <b>path</b> <b>coverage</b> is not guaranteed. Thus, a detailed analysis of the random network coverage can be ultimately useful in the network design stage to determine the node density for achieving the desired area/path coverage.|$|E
40|$|Abstract—Our system named GrasSmart 2 is {{designed}} {{to develop and implement}} {{a solution to the problem}} of building efficient <b>coverage</b> <b>paths</b> for a team of robots. The system generates an efficient multi robot coverage algorithm by constructing a <b>coverage</b> <b>path</b> for every robot, such that the union of all the generated paths means that the terrain is fully covered and that the total coverage time is minimized. This work modifies and improves the Create Tree for Efficient Multi-Robot Coverage algorithm and implements it in the GrasSmart 2 system. Moreover, our system finds a position for a new robot when a group of robots are constrained in a geometric position. GrasSmart 2 finds the best positioning coordinates that achieve a total minimal covering <b>path.</b> Index Terms—Terrain, <b>coverage,</b> multi robot systems, cell decomposition R I...|$|R
40|$|If {{the field}} plot shape is not {{rectangular}} {{and if it}} contains obstacles, the <b>coverage</b> <b>path</b> planning problem is hard to solve for a non-omnidirectional machine. Scientists have developed several algorithms to solve this <b>coverage</b> <b>path</b> planning problem, {{but all of them}} have pros and cons. If the machines were omnidirectional and turning times were decreased to insignificant, the problem would be quite easy to solve using known robotic path planning methods. Traditional agricultural machines, like tractors, tractor-trailer combinations, self-propelled harvesters and other man-driven machines are slow to turn at headlands. This is the most differentiating property of the problem formulation compared to traditional robotic <b>coverage</b> <b>path</b> planning, which has dealt mainly with omnidirectional kinematics. In this article two different algorithms are presented to solve the <b>coverage</b> <b>path</b> planning problem for agricultural machines. The first algorithm is a higher level algorithm to split a complex shaped field plot to smaller parts is presented. The higher level splitting algorithm is presented in detail in this article. The algorithm can handle any field, including obstacles. The algorithm is based on trapezoidal split, merge and search. The algorithm is suited to any kind of vehicle, which is described with a fe...|$|R
40|$|This {{research}} report discusses {{the problem of}} complete <b>coverage</b> <b>path</b> planning in mobile robotics. Among main solved tasks belongs environmental modeling, determining free space within the environment, <b>coverage</b> <b>path</b> planning algorithms, path cost function and coverage performance. Prior work in coverage is also discussed. The new approach called border expansion method aiming to reach complete coverage is introduced and compared to boustrophedon decomposition. Finally are presented some experiments and future research. Available from STL Prague, CZ / NTK - National Technical LibrarySIGLECZCzech Republi...|$|R
30|$|In this work, {{unlike most}} {{existing}} studies which focus on asymptotic setups, we study the <b>path</b> <b>coverage</b> of a finite random network (in {{terms of both}} network size {{and the number of}} nodes). As a result, the Boolean model is not accurate. Alternatively, the methodology of this work is based on some results from geometric probability. Our focus is on the <b>path</b> <b>coverage</b> for a circle, but extension to other path shapes is briefly discussed.|$|E
40|$|Recent {{automated}} {{software testing}} techniques concentrate on achieving <b>path</b> <b>coverage.</b> We present a complexity mea-sure that provides an upper {{bound for the}} number of paths in a program, and hence, can be used for assessing the dif-ficulty of achieving <b>path</b> <b>coverage</b> for a given method. We define the path complexity of a program as a function that takes a depth bound as input and returns the number of paths in the control flow graph that are within that bound. We show how to automatically compute the path complexity function in closed form, and the asymptotic path complexity which identifies the dominant term in the path complexity function. Our results demonstrate that path complexity can be computed efficiently, and it is a better complexity mea-sure for <b>path</b> <b>coverage</b> compared to cyclomatic complexity and NPATH complexity...|$|E
40|$|Structural {{testing is}} often the most common sought {{criteria}} for exercising aspects of control flow (i. e. such as statement, branch and <b>path</b> <b>coverage).</b> In many cases, criteria based on statement, decision and <b>path</b> <b>coverage</b> appears sufficiently effective for testing (in terms of selecting the appropriate test cases for testing consideration) the {{various parts of the}} software implementation. In other cases involving complex predicates, criteria based on statement, branch, and <b>path</b> <b>coverage</b> appear problematic owing to the problem of masking (where one variable is “masking” the effects of other variables). Addressing this issue, this paper discusses the design and implementation of an automatic test data generation called MC/DC GEN for structural testing based on Multiple Condition/Decision Coverage (MC/DC). In doing so, this paper also highlights the possible adoption of MC/DC GEN for practical use...|$|E
40|$|The {{problem of}} {{constrained}} <b>coverage</b> <b>path</b> planning involves a robot {{trying to cover}} maximum area of an environment under some constraints that appear as obstacles in the map. Out of the several <b>coverage</b> <b>path</b> planning methods, we consider augmenting the linear sweep-based coverage method to achieve minimum energy/ time optimality along with maximum area coverage. In addition, we also {{study the effects of}} variation of different parameters on the performance of the modified method. Comment: Report for AAE 568 (Applied Optimal Control) at Purdu...|$|R
40|$|The task of {{complete}} <b>coverage</b> <b>path</b> planning in complex 2 D environments {{is a classic}} NP- Hard problem that has been an active research topic for well over 30 years. A common approach to solving coverage problem in such environments is to partition, or segment, the target environment into a set of cells that have some property that allows any given cell to be covered in an optimal or near optimal manner. If each cell of an environment is visited and covered by some agent, then the entire environment {{is said to be}} covered. This work proposes a novel segmentation method, called the Constriction Decomposition Method (CDM), that works by locating constriction points in indoor, 2 D environment and then partitioning the environment based on the constriction points. When the CDM is applied to 2 D maps of office or laboratory environments, the CDM produces a segmentation that closely resembles a room based decomposition. Once the environment has been decomposed into regions, this work demonstrates that each room can be covered using a simple <b>coverage</b> <b>path</b> planning algorithm that exploits the fact that the resulting cells do not contain any constriction points. The lack of constriction points in each region means that each region, or room, can be completely covered using a series of contour following paths followed by a series of back and forth motions. Once a set of <b>coverage</b> <b>paths</b> are pro- duced for each cell, a tour between all path is found using a heuristic Traveling Salesman Problem (TSP) solver. The proposed segmentation and <b>coverage</b> <b>path</b> planning methods are tested on a set of 15 indoor environments that are derived from a set of floor plans corresponding to five office and seven laboratory environments. The quality of the segmentation produced by the CDM is directly compared to existing methods on a qualitative and quantitative basis using a series of metrics proposed by other authors. The set of <b>coverage</b> <b>paths</b> for each environment are compared to existing work based on the ratio between the total path length and the ratio between the inter-sector path and the total <b>coverage</b> <b>path</b> length. Based on these metrics it is demonstrated that the CDM and the CDM <b>coverage</b> <b>path</b> planner produces both superior segmentations and coverage plans in 2 D indoor environments...|$|R
40|$|Much of {{the focus}} of the {{research}} effort in path planning for mobile robots has centred on the problem of finding a path from a start location to a goal location, while minimising one or more parameters such as length of path, energy consumption or journey time. A <b>path</b> of complete <b>coverage</b> is a planned path in which a robot sweeps all areas of free space in an environment in a systematic and efficient manner. Possible applications for <b>paths</b> of complete <b>coverage</b> include autonomous vacuum cleaners, lawn mowers, security robots, land mine detectors etc. This paper will present a solution to this problem based upon an extension to the distance transform path planning methodology. The solution has been implemented on the self-contained autonomous mobile robot called the Yamabico. I. INTRODUCTION The problem of planning a <b>path</b> of complete <b>coverage</b> of an environment by a mobile robot has not received significant research attention. Much {{of the focus}} of the research effort to date has centre [...] ...|$|R
3000|$|... [...]. Notice {{that any}} node outside this ring does not {{contribute}} to the <b>path</b> <b>coverage.</b> For random sensing range, we choose [...]...|$|E
40|$|This thesis {{presents}} {{a new approach}} for automated test data generation of imperative programs containing integer, boolean and/or float variables. A test program (with procedure calls) is represented by an Interprocedural Control Flow Graph (ICFG). The classical testing criteria (statement, branch, and <b>path</b> <b>coverage),</b> widely used in unit testing, are extended to the ICFG. <b>Path</b> <b>coverage</b> {{is the core of}} our approach. Given a specified path of the ICFG, a path constraint is derived and solved to obtain a test case. The constraint solving is carried out based on a consistency notion. For statement (and branch) coverage, paths reaching a specified node or branch are dynamically constructed. The search for suitable paths is guided by the interprocedural control dependences of the program. The search is also pruned by our consistency filter. Finally, test data are generated by the application of the proposed <b>path</b> <b>coverage</b> algorithm. A prototype system implements our approach for C programs. Experimental results, including complex numerical programs, demonstrate the feasibility of the method and the efficiency of the system, as well as its versatility and flexibility to different classes of problems (integer and/or float variables; arrays, procedures, <b>path</b> <b>coverage,</b> statement coverage). (FSA 3) [...] UCL, 200...|$|E
3000|$|..., {{using our}} results on various {{features}} of <b>path</b> <b>coverage,</b> {{one can find}} the necessary number of sensors for a certain quality of coverage.|$|E
40|$|Spurred by declining {{costs of}} robotics, {{automation}} {{is becoming a}} prevalent area of interest for many industries. In some cases, it even makes economic sense to use a team of robots to achieve a goal faster. In this thesis we study sweep <b>coverage</b> <b>path</b> planning, in which a robot or a team of robots must cover all points in a workspace with its footprint. In many coverage applications, including cleaning and monitoring, it is beneficial to use <b>coverage</b> <b>paths</b> with minimal robot turns. In {{the first part of}} the thesis, we address this for a single robot by providing an efficient method to compute the minimum altitude of a non-convex polygonal region, which captures the number of parallel line segments, and thus turns, needed to cover the region. Then, given a non-convex polygon, we provide a method to cut the polygon into two pieces that minimizes the sum of their altitudes. Given an initial convex decomposition of a workspace, we apply this method to iteratively re-optimize and delete cuts of the decomposition. Finally, we compute a <b>coverage</b> <b>path</b> of the workspace by placing parallel line segments in each region, and then computing a tour of the segments of minimum cost. We present simulation results on several workspaces with obstacles, which demonstrate improvements in both the number of turns in the final <b>coverage</b> <b>path</b> and runtime. In the second part of the thesis, we extend the concepts developed for a single robot coverage to a multi robot case. We provide a metric χ that approximates the cost of a <b>coverage</b> <b>path,</b> which accounts for the cost of turns. Given a polygon, we provide a method for cutting a polygon into two that would minimize the maximum cost χ between the two polygons. Provided with an initial n-cell decomposition, we apply this method in the iterative manner to re-optimize cuts in order to minimize the maximum cost χ over all cells in the decomposition. For each cell in the re-optimized n-cell decomposition, a single robot <b>coverage</b> <b>path</b> is computed using the minimum altitude decomposition. We present the simulation results that demonstrate improvements in the maximum cost as well as the range of costs over all robots in the team...|$|R
40|$|Abstract — Path {{planning}} problems involve computing or {{finding a}} collision free path between two positions. A {{special kind of}} path planning is complete <b>coverage</b> <b>path</b> planning, where a robot sweeps all area of free space in an environment. There are different methods to cover the complete area; however, they are not designed to optimize the process. This paper proposes a novel method of complete <b>coverage</b> <b>path</b> planning based on genetic algorithms. In order to check the viability of this approach the optimal path is tested in a virtual environment. The simulation results confirm the feasibility of this method. I...|$|R
40|$|Abstract. To {{address the}} problem of {{planning}} complete <b>coverage</b> <b>paths</b> for mowing robots that have the greatest coverage rates and the lowest repetitive rates, we proposed an improved back propagation neural network algorithm based on priority traversal thoughts for local path planning. The algorithm based on plowing global path planning. We adopted grid method to model the environment and used Matlab 2010 a to simulate for the algorithm. Simulation results show that the proposed algorithm can make the mowing robot walk out of dead zone, the dead zone was composed of obstacle grid or the grid that had been cut around this area, and achieve the complete <b>coverage</b> <b>path</b> planning...|$|R
