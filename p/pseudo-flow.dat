16|1|Public
2500|$|A pre-flow is a <b>pseudo-flow</b> that, for all , {{satisfies}} the additional constraint: ...|$|E
2500|$|A {{feasible}} flow, {{or just a}} flow, is a <b>pseudo-flow</b> that, for all , {{satisfies the}} additional constraint: ...|$|E
2500|$|A <b>pseudo-flow</b> is a {{function}} [...] that satisfies the following two constraints for all nodes [...] and : ...|$|E
40|$|Contents Preface 7 Lecture I. The Stable Marriage and Stable Roommates Problems 8 1. The Stable Marriage Problem 8 1. 1. Definition of the Stable Marriage Problem 8 1. 2. The Gale-Shapley Algorithm 9 1. 3. Correctness 10 1. 4. Male Optimality 10 2. Introduction to Network Stability 11 2. 1. The Stable Roommates Problem 11 2. 2. Network Definitions 11 2. 3. The Stable Roommate Problem and Network Stability 13 Lecture II. The Stable Roommates Problem and Network Stability 15 1. The Stable Roommates Problem and X-Network Stability 15 2. Adjacency-Preserving Circuits and X-Networks 16 3. Network Stability and Simplification 16 Lecture III. The Maximum Flow Problem 20 1. Network Flows 20 1. 1. Flows and <b>Pseudo-flows</b> 20 1. 2. Cuts 20 1. 3. Residual Networks 21 1. 4. Augmenting Paths 22 2. The Augmenting Path Algorithm 22 CONTENTS 3 3. The Decomposition Theorem 24 4. The Capacity Scaling Algorithm 26 Lecture IV. T...|$|R
2500|$|Given a <b>pseudo-flow</b> [...] in a flow network, it {{is often}} useful to {{consider}} the net flow entering a given node , that is, {{the sum of the}} flows entering [...] The excess function [...] is defined by [...] A node [...] is said to be active if , deficient if [...] or conserving if [...]|$|E
2500|$|The {{residual}} capacity of an arc {{with respect to}} a <b>pseudo-flow</b> , denoted , is the difference between the arc's capacity and its flow. That is, [...] From this we can construct a residual network, denoted , which models the amount of available capacity on the set of arcs in [...] More formally, given a flow network , the residual network nbsp& has the node set , arc set [...] and capacity function [...]|$|E
2500|$|There {{are various}} notions of a flow {{function}} {{that can be}} defined in a flow graph. Flow functions model the net flow of units between pairs of nodes, and are useful when asking questions such as what is {{the maximum number of}} units that can be transferred from the source node s to the sink node t? The simplest example of a flow function is [...] known as a <b>pseudo-flow.</b>|$|E
5000|$|A pre-flow is a <b>pseudo-flow</b> that, for all , {{satisfies}} the additional constraint: ...|$|E
5000|$|A {{feasible}} flow, {{or just a}} flow, is a <b>pseudo-flow</b> that, for all , {{satisfies the}} additional constraint: ...|$|E
5000|$|A <b>pseudo-flow</b> is a {{function}} [...] that satisfies the following two constraints for all nodes [...] and : ...|$|E
5000|$|Given a <b>pseudo-flow</b> [...] in a flow network, it {{is often}} useful to {{consider}} the net flow entering a given node , that is, {{the sum of the}} flows entering [...] The excess function [...] is defined by [...] A node [...] is said to be active if , deficient if [...] or conserving if [...]|$|E
50|$|There {{are various}} notions of a flow {{function}} {{that can be}} defined in a flow graph. Flow functions model the net flow of units between pairs of nodes, and are useful when asking questions such as what is {{the maximum number of}} units that can be transferred from the source node s to the sink node t? The simplest example of a flow function is known as a <b>pseudo-flow.</b>|$|E
5000|$|The {{residual}} capacity of an arc {{with respect to}} a <b>pseudo-flow</b> , denoted , is the difference between the arc's capacity and its flow. That is, [...] From this we can construct a residual network, denoted , which models the amount of available capacity on the set of arcs in [...] More formally, given a flow network , the residual network [...] has the node set , arc set [...] and capacity function [...]|$|E
40|$|Given a {{differential}} equation {{on an open}} set O of an n-manifold we can associate to it a <b>pseudo-flow,</b> that is, a flow whose trajectories may not be defined in the entire real line. In this paper we prove that this <b>pseudo-flow</b> is always equivalent to a flow with its trajectories defined in all R. This result extends a similar result of Vinograd stated in the n-dimensional Euclidean space...|$|E
40|$|This {{paper is}} devoted to the {{generalization}} of a well-known result on reducible equations by Courant and Friedrichs [7] and a motivational result on compressible Euler system within the context of ideal gases by Li et al. [10]. The characteristic decomposition technique has been used to prove that any hyperbolic state, adjacent to a constant state, is simple for a pseudo-steady isentropic irrotational flow, modeled by Euler equations, in van der Waals fluids. Furthermore, this result is extended to full Euler system in self-similar coordinates provided the <b>pseudo-flow</b> characteristics are extending into a constant state. (C) 2016 Elsevier Ltd. All rights reserved...|$|E
40|$|One issue {{limiting}} the adaption of large-scale multi-region segmentation is the sometimes prohibitive memory requirements. This is especially troubling considering advances in massively parallel computing and commercial graphics processing units {{because of their}} already limited memory compared to the current random access memory used in more traditional computation. To address this issue {{in the field of}} continuous max-flow segmentation, we have developed a <b>pseudo-flow</b> framework using the theory of Bregman proximal projections and entropic distances which implicitly represents flow variables between labels and designated source and sink nodes. This reduces the memory requirements for max-flow segmentation by approximately 20 % for Potts models and approximately 30 % for hierarchical max-flow (HMF) and directed acyclic graph max-flow (DAGMF) models. This represents a great improvement in the state-of-the-art in max-flow segmentation, allowing for much larger problems to be addressed and accelerated using commercially available graphics processing hardware. Comment: 10 page...|$|E
40|$|Several {{challenging}} {{problem in}} clustering, partitioning and imaging {{have traditionally been}} solved using the "spectral technique". These problems include the normalized cut problem, the graph expander ratio problem, the Cheeger constant problem and the conductance problem. These problems share several common features: all seek a bipartition {{of a set of}} elements; the problems are formulated as a form of ratio cut; the formulation as discrete optimization is shown here to be equivalent to a quadratic ratio, sometimes referred to as the Raleigh ratio, on discrete variables and a single sum constraint which we call the balance or orthogonality constraint; when the discrete nature of the variables is disregarded, the continuous relaxation is solved by the spectral method. Indeed the spectral relaxation technique is a dominant method providing an approximate solution to these problems. We propose an algorithm for these problems which involves a relaxation of the orthogonality constraint only. This relaxation is shown here to be solved optimally, and in strongly polynomial time, in O(mn log((n^ 2) / m) for a graph on $n$ nodes and $m$ edges. The algorithm, using HPF (Hochbaum's <b>Pseudo-Flow)</b> as subroutine, is efficient enough to be used to solve these bi-partitioning problems on millions of elements and more than 300 million edges within less than 10 minutes. It is also demonstrated, via a preliminary experimental study, that the results of the combinatorial algorithm proposed often improve dramatically {{on the quality of the}} results of the spectral method. Comment: The paper was submitted to ArXiv system by autho...|$|E

