12|29|Public
50|$|The {{first known}} <b>polymorphic</b> <b>virus</b> {{was written by}} Mark Washburn. The virus, called 1260, was written in 1990. A better-known <b>polymorphic</b> <b>virus</b> was created in 1992 by the hacker Dark Avenger (a pseudonym) {{as a means of}} {{avoiding}} pattern recognition from antivirus software. A common and very virulent <b>polymorphic</b> <b>virus</b> is the file infecter Virut.|$|E
50|$|SevenDust is a <b>polymorphic</b> <b>virus,</b> {{with some}} variant also being encrypted. It spreads by users running an {{infected}} executable. Some variants of SevenDust also delete all non-application files accessed during certain times.|$|E
5000|$|Polymorphic {{code was}} the first {{technique}} that posed {{a serious threat to}} virus scanners. Just like regular encrypted viruses, a <b>polymorphic</b> <b>virus</b> infects files with an encrypted copy of itself, which is decoded by a decryption module. In the case of polymorphic viruses, however, this decryption module is also modified on each infection. A well-written <b>polymorphic</b> <b>virus</b> therefore has no parts which remain identical between infections, making it very difficult to detect directly using [...] "signatures". Antivirus software can detect it by decrypting the viruses using an emulator, or by statistical pattern analysis of the encrypted virus body. To enable polymorphic code, the virus has to have a polymorphic engine (also called [...] "mutating engine" [...] or [...] "mutation engine") somewhere in its encrypted body. See polymorphic code for technical detail on how such engines operate.|$|E
5000|$|<b>Polymorphic</b> <b>viruses</b> {{change their}} code in {{fundamental}} ways with each replication {{in order to}} avoid detection by anti-virus scanners.In WordBasic (first name of the language Visual Basic), <b>polymorphic</b> <b>viruses</b> are difficult to do.Indeed, the macro's polymorphism relies of the encryption of the document. However, the hackers have no control of the encryption key.Furthermore, the encryption isn't really efficient : the encrypted macros are just in the document, so the encryption key too and when a polymorphic macro replicates itself, the key doesn't change (the replication affects only the macro not the encryption).In addition to these difficulties, a macro can't modify itself, but another macro can.WordBasic is really a powerful language, it allows some operations to the macros : ...|$|R
2500|$|The {{firewall}} {{included in}} Kaspersky Internet Security 7.0 got a [...] "Very Good" [...] rating in Matousec's Firewall challenge, with {{a result of}} 85%. Kaspersky Anti-Virus 7.0 has achieved a 6.5 result out of 8 in the Anti Malware Labs rootkit detection test. It has also achieved a 31 out of 33 detection of <b>polymorphic</b> <b>viruses</b> and a 97% result in the self-protection test.|$|R
50|$|The {{program also}} had an anti-stealth and check sum feature {{that could be used}} to detect any changes in normal files. This {{technology}} was intended to make up for the unavailability of regular update packages. The final update of MSAV was released in June 1996 by Symantec, it added the ability to detect <b>polymorphic</b> <b>viruses</b> and the virus definitions were updated to scan for a total of 2,371 viruses.|$|R
5000|$|The virus {{may have}} {{originated}} {{as a program}} initially intended {{to be used in}} conjunction with Microsoft Word 1997. Some sources attribute the name Sam Rogers to be the identity of a programmer who may have created the virus or contributed to its creation. One source contests that Shankar's Virus has existed since internet immemorial and cites the on/off code in the eighth sub-line of the viruses main code evidence that Sam Rogers or some other individual simply awoke it from dormancy. The polymorphic nature of its code caused some programmers to believe that the virus cycles between long period of activity and inactivity, during numerous iterations of this cycle it steadily absorbed more data from modern systems becoming much harder to delete over time. Potentially the virus can wield a limitless amount of capability within a system due to it having a unique code even for a <b>polymorphic</b> <b>virus.</b> An internet meme emerged in 2014 with Shankar's Virus as the subject matter ...|$|E
40|$|Viruses and malware {{are serious}} threats to system security. There are {{different}} types of viruses today {{that it has become}} difficult to provide a precise definition [7]. Polymorphic and metamorphic viruses are two well known kinds of viruses. A <b>polymorphic</b> <b>virus</b> has the ability to change its signature every time by slightly modifying itself when it replicates, thus avoiding detection. The first <b>polymorphic</b> <b>virus</b> was developed in the year 1990 [16], and later many generator kits were developed that simplified the work of writing a computer virus. These kits enabled people with minimal knowledge to develop their own new viruses. There are also many packers and wrappers available {{that can be used to}} make viruses more difficult to detect. In this project, we analyze different polymorphic viruses and try to develop an application that will encrypt, mutate, and protect any <b>polymorphic</b> <b>virus,</b> thereby making it more difficult to detect...|$|E
40|$|This {{research}} {{proposed an}} architecture {{and a system}} which able to monitor the virus behavior and classify them as a traditional or <b>polymorphic</b> <b>virus.</b> Preliminary research was conducted to get the current virus behavior and to find the certain parameters which usually used by virus to attack the computer target. Finally, “test bed environment” is used to test our system by releasing the virus in a real environment, and try to capture their behavior, and followed by generating {{the conclusion that the}} tested or monitored virus is classified as a traditional or <b>polymorphic</b> <b>virus...</b>|$|E
40|$|As virus writers {{developed}} numerous <b>polymorphic</b> engines, <b>virus</b> scanners became {{stronger in}} their defense against them. A virus scanner which used a code emulator to detect viruses {{looked like it}} was on steroids compared to those without an emulator-based scanning engine. Nowadays, most <b>polymorphic</b> <b>viruses</b> are considered boring. Even though they can be extremely hard to detect, most of today’s products are able to deal with them relatively easily. These are the scanners that survived the DOS polymorphic days. For some of the scanners DOS <b>polymorphic</b> <b>viruses</b> meant the ‘end of days’. Other scanners died with the macro virus problem. For most products the next challenge to take is 32 -bit metamorphosis. Metamorphic viruses are nothing new. We have seen them in DOS days, though some of them, like ACG, already used 32 -bit instructions. The next step is 32 -bit metamorphosis under Windows environments. Virus writers already took the first step in that direction. In this paper the authors will examine metamorphic engines to provide a better general understanding of the problem that we are facing. The authors also provide detection examples of some of the metamorphic viruses. VIRUS BULLETIN CONFERENCE © 2001 Virus Bulletin Ltd, The Pentagon, Abingdon, Oxfordshire, OX 14 3 YP, England. Tel + 44 1235 555139. No part of this publication may be reproduced, stored in a retrieval system, or transmitted in any form, without the prior written permission of the publishers. 124 • SZÖR & FERRIE, HUNTING FOR METAMORPHIC...|$|R
50|$|Shankar's Virus (also {{known as}} W97M.Marker.o) is a <b>polymorphic</b> {{computer}} <b>virus</b> that infects Microsoft Word documents and templates. It was discovered on June 3, 1999.|$|R
40|$|PERG is {{a pattern}} {{matching}} engine designed for locating predefined byte string patterns (rules) from the ClamAV virus signature database in a data stream. This paper presents PERG-Rx, an extension of PERG that adds limited regular expression support for wildcard patterns used by rules that represent <b>polymorphic</b> <b>viruses.</b> To {{reduce the amount of}} state needed to track so many regular expressions, PERG-Rx employs a lossy scheme which increases the rate of false positives detected as the required state grows. The scalability and dynamic updatability of the PERG-Rx architecture to database updates are also evaluated...|$|R
40|$|Because writing {{computer}} programs is hard, computer programmers {{are taught to}} use encapsulation and mod-ularity to hide complexity and reduce the potential for errors. Their programs will have a high-level, hierar-chical structure that reflects their choice of internal ab-stractions. We designed and forged a system, Laika, that detects this structure in memory using Bayesian unsu-pervised learning. Because almost all programs use data structures, their memory images consist of many copies of {{a relatively small number}} of templates. Given a mem-ory image, Laika can find both the data structures and their instantiations. We then used Laika to detect three common polymor-phic botnets by comparing their data structures. Because it avoids their code polymorphism entirely, Laika is ex-tremely accurate. Finally, we argue that writing a data structure <b>polymorphic</b> <b>virus</b> is likely to be considerably harder than writing a code <b>polymorphic</b> <b>virus.</b> ...|$|E
40|$|This paper {{summarizes}} ongoing {{research on}} polymorphic viruses and their detection. Our basic {{hypothesis is that}} polymorphic viruses that use a code-substitution mutation method (e. g. the Mutation Engine), the distribution of various instruction types (moves, branches, arithmetic, etc.) changes with each succeeding generation of the virus. Hence, {{it may be possible}} to detect the existence of a <b>polymorphic</b> <b>virus</b> by detecting shifts in instruction distributions in programs stored in a computer. 1. Introduction A computer virus is a program that can replicate and infect other programs by modifying them to include a, possibly evolved, version of itself [Coh 87]. A virus infects another file by attaching a copy of itself (its replicate) onto another (uninfected) file. That replicated virus and its parent may continue to infect other files. The rate of infection may grow exponentially. A <b>polymorphic</b> <b>virus</b> employs mutation to create replicates which are different (code-wise) than itself. Virus [...] ...|$|E
40|$|Since the {{original}} implication of class I molecules of the MHC in CTL recognition of virus-infected cells (1), significant advances {{have been made}} in our understanding of such recognition of viral antigens. CTL recognition originally was assumed to involve recognition of surface viral glycoproteins on infected cells. However while anti-MHC mAbs inhibited recognition by CTL, anti-virus glycoprotein antibodies did not (2). Also, CTL for a <b>polymorphic</b> <b>virus</b> such as influenza A usually reacted with all influenza virus strains that have differing glycoproteins on the surface (3, 4). For rare murine T cell clones that distinguished between influenza virus strains, it was possible to map specificity to virus polymerase or nucleoprotein (NP) l (5, 6). The latter was confirmed by transfection and NP was shown to be a target antigen for the majority population of murine CTL that crossreact with different virus subtypes (7, 8). Epitopes were localized by transfecting fragments of NP into target cells (9), and when appropriate peptides were synthesised, they were recognized by CTL (10) ...|$|E
5000|$|The {{firewall}} {{included in}} Kaspersky Internet Security 7.0 got a [...] "Very Good" [...] rating in Matousec's Firewall challenge, with {{a result of}} 85%. Kaspersky Anti-Virus 7.0 has achieved a 6.5 result out of 8 in the Anti Malware Labs rootkit detection test. It has also achieved a 31 out of 33 detection of <b>polymorphic</b> <b>viruses</b> and a 97% result in the self-protection test.In 2007, Kaspersky Internet Security 7 received an award from the British magazine PC Pro and also won a place in its [...] "A List".|$|R
50|$|Many virus {{scanners}} use heuristic {{rules for}} detecting viruses {{and other forms}} of malware. Heuristic scanning looks for code and/or behavioral patterns indicative of a class or family of viruses, with different sets of rules for different viruses. If a file or executing process is observed to contain matching code patterns and/or to be performing that set of activities, then the scanner infers that the file is infected. The most advanced part of behavior-based heuristic scanning is that it can work against highly randomized <b>polymorphic</b> <b>viruses,</b> which simpler string scanning-only approaches cannot reliably detect. Heuristic scanning has the potential to detect many future viruses without requiring the virus to be detected somewhere, submitted to the virus scanner developer, analyzed, and a detection update for the scanner provided to the scanner's users.|$|R
40|$|Typically, {{computer}} {{viruses and}} other malware are detected by {{searching for a}} string of bits which {{is found in the}} virus or malware. Such a string {{can be viewed as a}} “fingerprint” of the virus. These “fingerprints” are not generally unique; however they can be used to make rapid malware scanning feasible. This fingerprint is often called a signature and the technique of detecting viruses using signatures is known as signaturebased detection [8]. Today, virus writers often camouflage their viruses by using code obfuscation techniques in an effort to defeat signature-based detection schemes. So-called metamorphic viruses are viruses in which each instance has the same functionality but differs in its internal structure. Metamorphic <b>viruses</b> differ from <b>polymorphic</b> <b>viruses</b> in the method they use to hide their signature. While <b>polymorphic</b> <b>viruses</b> primarily rely on encryption for signature obfuscation, metamorphic viruses hide their signature via “mutating” their own code [3]. The paper [1] provides a rigorous proof that metamorphic viruses can bypass any signature-based detection, provided the code obfuscation has been done carefully based on a set of specified rules. Specifically, according to [1], if dead code is added and the control flow is changed sufficiently by inserting jump statements, the virus cannot be detected. In this project we first developed a code obfuscation engine conforming to the rules in [1]. We then used this engine to create metamorphic variants of a seed virus (created using the PS-MPK virus creation kit [15]) and demonstrated the validity of the assertion in [1] about metamorphic viruses and signature based detectors. In the second phase of this project we validated another theory advanced in [2], namely, that machine learning based methods¾specifically ones based on Hidden Markov Model (HMM) ¾can detect metamorphic viruses. In other words, we show that a collection of metamorphic viruses which are (provably) undetectable via signature detection techniques can nevertheless be detected using an HMM approach...|$|R
40|$|Pattern-matching is a {{fundamental}} technique found in applications like a network intrusion detection system (NIDS) and antivirus. By comparing an input data stream against a set of predefined byte-string patterns, malicious activities can be detected. Due to the increasing pattern database size, hardware engines are frequently being used to accelerate pattern-matching because software-based solution can no longer keep up. This thesis presents PERG, a FPGA-based pattern-matching engine targeted for the large pattern database found in Clam AntiVirus (ClamAV). Previous hardware pattern-matching engines have targeted the Snort database used in NIDS. PERG is the first hardware pattern-matching engine designed for the ClamAV pattern database, which is several times larger than Snort in both the number of patterns {{and the range of}} pattern lengths. Among hash-based pattern-matching hardware, PERG is the first to integrate limited regular-expression support. In ClamAV, this feature is needed for <b>polymorphic</b> <b>virus</b> detection. Finally among hash-based hardware pattern-matching engines, PERG is the first to implement Bloomier filters. With Bloomier filters, the process of exact matching to verify a false positive in PERG is much simpler and faster than other hash-based pattern-matching engines which use traditional Bloom filters. To reduce hardware resources, PERG uses a pattern compiler to transform the pattern database int...|$|E
40|$|The current {{antivirus}} product {{were only}} able to detect the existence of viruses, but it built not record the activity or behavior viruses. Inability if antivirus to record the viruses. behavior made difficult certain users {{who want to know}} the behaviour of viruses as well to know the category or classification of certain viruses. Actually, there were several architectures proposed, but they still could not answer the needs of those certain users who want to know the classification of virus that they test. In this project, we studied the current types of viruses as well as current virus monitoring and analysis system. This study came up with the problem that become basic of the research. Here, we proposed an architectured adn a system, which are able to monitor the viruses’ behavior and classify thoses viruses whether as a traditional or <b>polymorphic</b> <b>virus.</b> Preliminary research was conducted to get the current virus behaviors and to find out the certain parameters, which are usually used by viruses to attack the computer target. Finnaly, we applied “test bed environment” to test our system by releasing several viruses in a real environment, and attempt to capture their behaviors. These activities were followed by generating the conclusion that the tested or monitored virus is classified as a tradional or polymorpihic virus. ...|$|E
40|$|The {{techniques}} {{employed by}} viruses to avoid detection by antivirus scanners {{are becoming increasingly}} advanced. One technique commonly used by viruses to evade detection is polymorphism. The level of polymorphism in a virus indicates its ability to create different forms of itself. The use of junk instructions is a common technique to increase the level of polymorphism in a virus. Junk instructions are machine code instructions with no other function than to alter {{the appearance of a}} virus. Junk instructions do not contribute to the function of the virus, only the form. This master thesis focuses on the problem of separating junk instructions from nonjunk instructions in computer viruses. To assail the problem, a junk instruction detection (JID) framework has been developed, capable of detecting junk in viruses created for the Intel IA- 32 Architecture R (x 86). JID relies on the static instruction information produced by a disassembler. Static instruction information describes the static information found in an instruction: the number of input/output operands and their accesses. Because JID only depends on the static instruction information, JID can possible be ported to other processor architectures. As long as there exist a disassembler for the architecture capable of producing static instruction information, JID is portable. The results of testing JID on polymorphic viruses are promising. Tests show that JID manages to detect junk instructions found in the <b>polymorphic</b> <b>virus</b> Zmist. It is believed that JID would work as a tool to detect and remove junk instructions from future polymorphic viruses, thus reducing the time spent analysing the virus. Additionally in this thesis, the virus Zmist is analysed as a case study, and a detection algorithm devised. The detection algorithm manages to detect 100 % of the polymorphic version of Zmist, although shortcomings in the disassembler algorithm reduces this number to 94 %...|$|E
40|$|For {{the last}} several years, mobile devices and {{platform}} security threats, including wireless networking technology, have been top security issues. A departure has occurred from automatic anti-virus software based on traditional PC defense: risk management (authentication and encryption), compliance, and disaster recovery following <b>polymorphic</b> <b>viruses</b> and malware as the primary activities within many organizations and government services alike. This chapter covers research in Turkey {{as a reflection of}} the current market – e-government started officially in 2008. This situation in an emerging country presents the current situation and resistances encountered while engaging with mobile and e-government interfaces. The authors contend that research is needed to understand more precisely security threats and most of all potential solutions for sustainable future intention to use m-government services. Finally, beyond m-government initiatives' success or failure, the mechanisms related to public administration mobile technical capacity building and security issues are discussed...|$|R
40|$|Computer viruses are big {{threat to}} {{computer}} world, researchers doing {{work in this}} area have made various efforts in the direction of classification and detection methods of these viruses. Graph mining and system call arrangement are some latest research activities in this field. The computability theory and the semi computable functions are quite important in our context of analyzing malicious activity. A mathematical model like random access stored program machine with the association of attached background is used by Ferenc Leitold while explaining modeling of viruses in his paper. Computer <b>viruses</b> like <b>polymorphic</b> <b>viruses</b> and metamorphic viruses use more efficient techniques for their evolution so it is required to use strong models to understand their evolution and then apply detection followed by the process of removal. Code Emulation is one the strongest way to analyze computer viruses but the anti-emulation activities made by virus designers are working against it. This paper explains the data mining techniques that are used for detection of computer viruses in better manner...|$|R
50|$|In 1995, Pile {{was imprisoned}} for 18 months after being convicted of writing two PC {{computer}} viruses known as SMEG.Pathogen and SMEG.Queeg and the <b>virus</b> <b>polymorphic</b> engine known as SMEG.|$|R
5000|$|OneHalf is a DOS-based <b>polymorphic</b> {{computer}} <b>virus</b> (hybrid {{boot and}} file infector) discovered in October 1994. [...] It {{is also known}} as Slovak Bomber, Freelove or Explosion-II. It infects the master boot record (MBR) of the hard disk, and any files with extensions [...]COM, [...]SCR and [...]EXE. However, it will not infect files that have SCAN, CLEAN, FINDVIRU, GUARD, NOD, VSAFE, MSAV or CHKDSK in the name.|$|R
40|$|Abstract—In this paper, {{we present}} a novel {{approach}} for the detection and signature extraction for a subclass of <b>polymorphic</b> computer <b>viruses.</b> Our detection scheme offers 0 false negative and a very low false positives detection rate. We use contextfree grammars as viral signatures, and design a process able to extract this signature from a single sample of a virus. Signature extraction is achieved through a light manual information gathering process, followed by an automatic static analysis of the binary code of the virus mutation engine...|$|R
40|$|Malicious {{software}} (malware) {{has become}} a prominent fixture in computing. There have been many methods developed {{over the years to}} combat the spread of malware, but these methods have inevitably been met with countermeasures. For instance, signature-based malware detection gave rise to <b>polymorphic</b> <b>viruses.</b> This “arms race” will undoubtedly continue for the foreseeable future as the incentives to develop novel malware continue to outweigh the costs. In this dissertation, I describe analysis frameworks for three important problems related to malware: classification, clustering, and phylogenetic reconstruction. The important component of my methods is that they all take into account multiple views of malware. Typically, analysis has been performed in either the static domain (e. g. the byte information of the executable) or the dynamic domain (e. g. system call traces). This dissertation develops frameworks that can easily incorporate well-studied views from both domains, as well as any new views that may become popular in the future. The only restriction that must be met is that a positive semidefinite similarity (kernel) matrix must be defined on the view, a restriction that is easily met in practice. While the classification problem can be solved with well known multiple kernel learning techniques, the clustering and phylogenetic problems required the development of novel machine learning methods, which I present in this dissertation. It {{is important to note that}} although these methods were developed in the context of the malware problem, they are applicable to a wide variety of domains. Los Alamos National LaboratoryComputer ScienceDoctoralUniversity of New Mexico. Dept. of Computer ScienceCrandall, JedidiahLane, TerranForrest, StephanieNeil, JoshuaAdams, NiallCrandall, Jedidia...|$|R
50|$|The SMEG {{engine was}} {{produced}} {{as an object}} file which non-programmers could download and trivially link into an existing virus which, in turn, would make the resulting <b>virus</b> <b>polymorphic</b> and much harder to detect using anti-virus software. SMEG {{was also the first}} polymorphic engine with the ability to generate random CALL's to randomly generated subroutines within its encryptors. This gave the generated polymorphic code a more realistic appearance. SMEG also used exclusively 8086 machine language instructions, which meant it ran cleanly on any 80x86 based PC.|$|R
40|$|Avian {{influenza}} viruses (AIV) subtype H 5 N 1 {{isolated from}} waterfowls in West Java pose the known characteristic of highly pathogenic strains, with polybasic {{amino acid sequence}} of cleavage site QRERRRKKR and QRESRRKKR. This research aimed to analyze the important domains of hemagglutinin (HA) gene of those isolates. Fragment of HA gene was amplified using RT-PCR method with specifically-designed primer pairs and sequenced using dideoxy termination method with ABI automatic sequencer (Applied Biosystems). Multiple alignment of nucleotide and deduced amino acid sequences were analyzed using ClustalW of MEGA- 3. 1 program. Some of biological domains of HA, i. e. antigenic sites, receptor binding pocket, and glycosylation sites of the isolates were <b>polymorphic.</b> The <b>viruses</b> also pose conserved glutamine (Q) and glisin (G) residues at the known receptor binding site, at the position 222 and 224 respectively. This findings clearly show that all AIV subtype H 5 N 1 isolaed from waterfowl preservesthe α- 2, 3 NeuAcGal avian receptor specificity. ...|$|R
5000|$|The macro viruses can, in some cases, {{interact}} between them. If two viruses are executed at {{the same}} time, both of them can modify the source code of each other.So, it results a new virus which can't be recognize by the anti-viruses software. But, the result is totally random : the macro virus can be more infectious or less infectious, it depends to {{what part of the}} virus has been changed.However, when the 'mating' is unintentional, the macro virus in result has more chances to be less infectious.Indeed, in order to replicate itself, it has to know the commands in the source code, but, if it's changed with a random scheme, the macro can't replicate itself.Nevertheless, it is possible to do such macros intentionally (it is different from <b>polymorphic</b> macros <b>viruses</b> which have to use another macro to change their contents) in order to increase the infectivity of the two viruses.In the example of the article, the macro virus Colors infected a document, but another infected the user's system before : the macro virus Concept.Both of these viruses use the command AutoOpen, so, at first, the macro virus Colors was detected but the command AutoOpen in it was the command of the macro virus Concept.Morever, when Concept duplicate itself, it is unencrypted, but the command in the virus Colors was encrypted (Colors encrypt its commands).So, the replicate of the macro virus Concept result of the hybridation of this macro virus (which infected the user's system first) and Colors.The [...] "hybrid" [...] could replicate itself only if AutoOpen wasn't executed, indeed this command comes from Concept, but the body of the hybrid is Colors, so that create some conflicts.This example shows the potential of mating macro viruses : if a couple of mating macro viruses is created, it will make more difficult to detect both of the macro virus (in hypothesis, there is only two which mate) by the virus-specificscanners and may reinforce the virility of the viruses.Fortunately, this type of macro virus is very rare (more than the <b>polymorphic</b> macro <b>viruses,</b> there may not exist one), indeed, create two (or more) which can interact with each other and not reduce the virlity (rather reinforce it) is complicated.|$|R
40|$|International audienceViruses are {{biological}} systems with {{high level of}} spatial organization well suited to modern physical methods of study. Viral genome is protected by a solid protein shell (capsid) made of many copies of identical subunits. Recent physical and biochemical data rise a whole number of questions concerning unconventional positional order of subunits in the shell, thermodynamics and physical mechanisms of the self-assembly, shape and mechanical stability of the shell. In the present work we develop the theory which explains and classifies the capsid structures for viruses with spherical topology and icosahedral symmetry. We develop an explicit method which predicts the positions of centers of mass for the proteins, including the capsids of unusual viruses discovered quite recently, and discuss the assembly thermodynamics. We show {{the relation between the}} protein density distributions obtained and the infectivity properties for several human viruses. To illustrate the notions of the theory and the results obtained we focus on viruses of the Flavivirus family, their herringbone-like structure, infectivity and pH-driven capsid reconstruction during the maturation process in the cellular pathway. Universal characteristics of <b>polymorphic</b> mutant <b>viruses</b> are introduced...|$|R
40|$|Background. It is important, for drug-resistance surveillance, to {{identify}} {{human immunodeficiency virus}} type 1 (HIV- 1) strains that have undergone antiretroviral drug selection. Methods. We compared the prevalence of protease and reverse-transcriptase (RT) mutations in HIV- 1 se-quences from persons with and without previous treatment with protease inhibitors (PIs), nucleoside RT inhibitors (NRTIs), and nonnucleoside RT inhibitors (NNRTIs). Treatment-associated mutations in protease isolates from 5867 persons and RT isolates from 6247 persons were categorized by whether they were polymorphic (prevalence, 10. 5 %) in untreated individuals and whether they were established drug-resistance mutations. New methods were introduced to minimize misclassification from transmitted resistance, population stratification, sequencing artifacts, and multiple hypothesis testing. Results. Some 36 established and 24 additional nonpolymorphic protease mutations at 34 positions were related to PI treatment, 21 established and 22 additional nonpolymorphic RT mutations at 24 positions with NRTI treatment, and 15 established and 11 additional nonpolymorphic RT mutations at 15 positions with NNRTI treatment. In addition, 11 PI-associated and 1 NRTI-associated established mutations were <b>polymorphic</b> in <b>viruses</b> from untreated persons. Conclusions. Established drug-resistance mutations encompass only a subset of treatment-associated muta...|$|R
40|$|The mol. wt. of the <b>polymorphic</b> Epstein-Barr <b>virus</b> (EBV) nuclear antigen (EBNA) {{molecule}} (EBNA 1) encoded by the BamHI K {{fragment of}} the EBV DNA {{has been determined}} in 14 EBV-carrying lymphoblastoid and Burkitt's lymphoma cell lines. There is no obvious correlation between {{the size of this}} polypeptide and any properties of the cells from which it is derived, other than those related to the strain of transforming virus. We confirm that the polymorphic region of this molecule is the glycine-alanine copolymer encoded by the third internal repeat of the EBV genome (IR 3) and we consider the significance of this domain. The Epstein-Barr virus (EBV) nuclear antigen (EBNA) was first demonstrated in EBV-transformed cells by a complement-enhanced immunofluorescence assay, ACIF (Reedman & Klein, 1973). Recently, {{it has been shown that}} EBNA, as demonstrated by ACIF using polyspecific human antisera, is not a single entity but rather a complex of at least two and possibly more antigenic omponents. The major component has been identified as a polypeptide encoded by the large HindlII subfragment of the BamHI K fragment of the EBV genome (Hennessy & Kieff, 1983; Fischer et al., 1984; our unpublished ata). This molecule apparentl...|$|R
40|$|With malware {{becoming}} more and more diffused {{and at the same time}} more sophisticated in its attack techniques, countermeasures need to be set up so that new kinds of threats can be identified and dismantled in the shortest possible time, before they cause harm to the system under attack. With new behaviour patterns like the one shown by <b>polymorphic</b> and metamorphic <b>viruses,</b> static analysis is not any more a reliable way to detect those threats, and behaviour analysis seems a good candidate to fight against the next-generation families of viruses. In this project, we describe a methodology to analyze and categorize binaries solely on the basis of their behaviour, in terms of their interaction with the Operating System, other processes and network. The approach can strengten host-based intrusion detection systems by a timely classification of unkown but similar malware code. It has been evaluated on a dataset from the research community and tried on a smaller data set from local companies collected at University of Mondragone...|$|R
40|$|Abstract: The {{objectives}} of this {{contribution to the}} NoAH project are to develop novel cyberattack detection techniques to provide early warning {{at the moment the}} attacks start to spread on the network and to contain or slow down the spread of the cyberattacks by automatically generating a signature that could eventually be read by firewalls or Intrusion Prevention Systems. The deliverable provides an assessment of the feasibility of this objectives for different types of cyberattacks like <b>viruses,</b> <b>polymorphic</b> worms or Denial of Service attacks with respect to the type of sensor that is used in the NoAH project: Honeypots. Based on the assessment and considerations about future threats it is explained why the focus of the detection and signature generation is laid on polymorphic remote attacks. With respect to this focus, new techniques to detect cyberattacks using honeypots are proposed (and their limitations are described). Furthermore a new method to automatically generate signatures using an extended version of the proposed detection system is presented. The requirements for the proposed attack detection and signature generation techniques are described and the integration into the NoAH architecture an...|$|R
40|$|HIV- 1 {{maturation}} inhibitors (MIs) {{disrupt the}} final step in the HIV- 1 protease-mediated cleavage of the Gag polyprotein between capsid p 24 capsid (CA) and spacer peptide 1 (SP 1), leading {{to the production of}} infectious virus. BMS- 955176 is a second generation MI with improved antiviral activity toward polymorphic Gag variants compared to a first generation MI bevirimat (BVM). The underlying mechanistic reasons for the differences in polymorphic coverage were studied using antiviral assays, an LC/MS assay that quantitatively characterizes CA/SP 1 cleavage kinetics of virus like particles (VLPs) and a radiolabel binding assay to determine VLP/MI affinities and dissociation kinetics. Antiviral assay data indicates that BVM does not achieve 100 % inhibition of certain polymorphs, even at saturating concentrations. This results in the breakthrough of infectious virus (partial antagonism) regardless of BVM concentration. Reduced maximal percent inhibition (MPI) values for BVM correlated with elevated EC 50 values, while rates of HIV- 1 protease cleavage at CA/SP 1 correlated inversely with the ability of BVM to inhibit HIV- 1 Gag polymorphic viruses: genotypes with more rapid CA/SP 1 cleavage kinetics were less sensitive to BVM. In vitro inhibition of wild type VLP CA/SP 1 cleavage by BVM was not maintained at longer cleavage times. BMS- 955176 exhibited greatly improved MPI against <b>polymorphic</b> Gag <b>viruses,</b> binds to Gag polymorphs with higher affinity/longer dissociation half-lives and exhibits greater time-independent inhibition of CA/SP 1 cleavage compared to BVM. Virological (MPI) and biochemical (CA/SP 1 cleavage rates, MI-specific Gag affinities) data were used to create an integrated semi-quantitative model that quantifies CA/SP 1 cleavage rates as a function of both MI and Gag polymorph. The model outputs are in accord with in vitro antiviral observations and correlate with observed in vivo MI efficacies. Overall, these findings may be useful to further understand antiviral profiles and clinical responses of MIs at a basic level, potentially facilitating further improvements to MI potency and coverage...|$|R
