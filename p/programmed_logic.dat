47|10000|Public
50|$|Sharapov v.M. et al. <b>Programmed</b> <b>logic</b> {{controllers}} in {{the automated}} control systems. - Stavropol: АGRUS, 2013. - 128р.|$|E
50|$|Sharapov V.M. et al. <b>Programmed</b> <b>logic</b> {{controllers}} in {{the automatic}} control systems: the manual. -2-е The edition. - Stavropol: АGRUS, 2010. - 128p.|$|E
50|$|The FERUT-based {{system was}} {{demonstrated}} in 1953 {{and was a}} qualified success; while the <b>programmed</b> <b>logic</b> and data storage/retrieval worked well, input/output was a serious bottleneck that seemed {{to make the system}} no better than the mechanical Reservisor. Furthermore the Ferut was vacuum tube based, and thus no more reliable than the Reservisor, TCA's major concern prior to the experiment.|$|E
40|$|VitalSmarts® Crucial Conversations™ {{general program}} theory {{might be a}} {{possible}} countermeasure addressing organizational culture and communication factors affecting quality and safety. This practice inquiry reports: a VitalSmarts® Crucial Conversations™ general <b>program</b> <b>logic</b> model, a major medical center's Crucial Conversations™ historical implementation <b>program</b> <b>logic</b> model, a clinical exemplar central line associated blood stream infection <b>program</b> <b>logic</b> model; and, findings that describe the fidelity of the major medical center's Crucial Conversations™ historical implementation and clinical exemplar central line associated blood stream infection <b>program</b> <b>logic</b> model to the VitalSmarts® Crucial Conversations™ general <b>program</b> <b>logic</b> model. The results demonstrated there was no fidelity between the major medical center's Crucial Conversations™ <b>program</b> <b>logic</b> model and the VitalSmarts® Crucial Conversations™ general <b>program</b> <b>logic</b> model. The clinical exemplar CLABSI <b>program</b> <b>logic</b> model and VitalSmarts® Crucial Conversations™ general <b>program</b> <b>logic</b> model fidelity differed in intended outcomes. The results might suggest that program adaptability along with program fidelity are factors that influence program strength, and these factors must be uniquely balanced within organizational dynamics to realize intended outcomes. The formative evaluation and <b>program</b> <b>logic</b> model might be a feasible methodology and applicable tool for exploring quality and safety within complex adaptive systems, such as organizational culture, where constraints possibly could exclude more rigorous scientific methodologies until factors are more understood...|$|R
50|$|<b>Logic</b> <b>programming</b> {{based on}} Resolution {{developed}} alongside functional <b>programming.</b> <b>Logic</b> <b>programming</b> {{is a form}} of relational programming that makes deductions about values. Constraint <b>logic</b> <b>programming</b> extends <b>logic</b> <b>programming,</b> by supporting constraints. Constraint <b>logic</b> <b>programming</b> languages such as ECLiPSe provide the ability to solve complex logic problems. However ECLiPSe is not lazy.|$|R
40|$|In {{this paper}} we define the rather general {{framework}} of Monotonic <b>Logic</b> <b>Programs,</b> where the main results of (definite) <b>logic</b> <b>programming</b> are validly extrapolated. Whenever defining new <b>logic</b> <b>programming</b> extensions, we can thus {{turn our attention}} to the stipulation and study of its intuitive algebraic properties within the very general setting. Then, the existence of a minimum model and of a monotonic immediate consequences operator is guaranteed, and they are related as in classical <b>logic</b> <b>programming.</b> Afterwards we study the more restricted class of residuated <b>logic</b> <b>programs</b> which is able to capture several quite distinct <b>logic</b> <b>programming</b> semantics. Namely: Generalized Annotated <b>Logic</b> <b>Programs,</b> Fuzzy <b>Logic</b> <b>Programming,</b> Hybrid Probabilistic <b>Logic</b> <b>Programs,</b> and Possibilistic <b>Logic</b> <b>Programming.</b> We provide the embedding of possibilistic <b>logic</b> <b>programming...</b>|$|R
50|$|PLATO (<b>Programmed</b> <b>Logic</b> for Automatic Teaching Operations) was {{the first}} {{generalized}} computer-assisted instruction system. Starting in 1960, it ran on the University of Illinois' ILLIAC I computer. By the late 1970s, it supported several thousand graphics terminals distributed worldwide, running on nearly a dozen different networked mainframe computers. Many modern concepts in multi-user computing were developed on PLATO, including forums, message boards, online testing, e-mail, chat rooms, picture languages, instant messaging, remote screen sharing, and multiplayer games.|$|E
5000|$|Although {{interest}} in instructional design {{continued to be}} strong in business and the military, there was little evolution of ID in schools or higher education.However, educators and researchers began to consider how the personal computer {{could be used in}} a learning environment or a learning space. PLATO (<b>Programmed</b> <b>Logic</b> for Automatic Teaching Operation) is one example of how computers began to be integrated into instruction. Many of the first uses of computers in the classroom were for [...] "drill and skill" [...] exercises. There was a growing {{interest in}} how cognitive psychology could be applied to instructional design.|$|E
50|$|The trend then {{shifted to}} video communication, {{as a result}} of which Houston University decided to hold {{telecast}} classes to their students for approximately 13-15 hours a week. The classes took place in 1953, while in 1956, Robin McKinnon Wood and Gordon Pask released the very first adaptive teaching system for corporate environments SAKI. The idea of automating teaching operations also inspired the University of Illinois experts to develop their <b>Programmed</b> <b>Logic</b> for Automated Teaching Operations (PLATO) which enabled users to exchange content regardless of their location. In the period between 1970 and 1980, educational venues were rapidly considering the idea of computerizing courses, including the Western Behavioral Sciences Institute from California that introduced the first accredited online-taught degree.|$|E
40|$|This paper surveys various {{complexity}} and expressiveness results on {{different forms of}} <b>logic</b> <b>programming.</b> The main focus is on decidable forms of <b>logic</b> <b>programming,</b> in particular, propositional <b>logic</b> <b>programming</b> and datalog, but we also mention general <b>logic</b> <b>programming</b> with function symbols. Next to classical results on plain <b>logic</b> <b>programming</b> (pure Horn clause programs), more recent results on various important extensions of <b>logic</b> <b>programming</b> are surveyed. These include <b>logic</b> <b>programming</b> with different forms of negation, disjunctive <b>logic</b> <b>programming,</b> <b>logic</b> <b>programming</b> with equality, and constraint <b>logic</b> <b>programming...</b>|$|R
40|$|In {{this paper}} we show the {{embedding}} of Hybrid Probabilistic <b>Logic</b> <b>Programs</b> into the rather general framework of Residuated <b>Logic</b> <b>Programs,</b> where the main results of (de nite) <b>logic</b> <b>programming</b> are validly extrapolated, namely {{the extension of}} the immediate consequences operator of van Emden and Kowalski. The importance of this result is that for the rst time a framework encompassing several quite distinct <b>logic</b> <b>programming</b> semantics is described, namely Generalized Annotated <b>Logic</b> <b>Programs,</b> Fuzzy <b>Logic</b> <b>Programming,</b> Hybrid Probabilistic <b>Logic</b> <b>Programs,</b> and Possibilistic <b>Logic</b> <b>Programming.</b> Moreover, the embedding provides a more general semantical structure paving the way for de ning paraconsistent probabilistic reasoning with a <b>logic</b> <b>programming</b> semantics...|$|R
40|$|<b>Program</b> <b>logics</b> are modal logics used in software/hardware {{specification}} /verification {{for sound}} reasoning about <b>programs.</b> <b>Program</b> <b>logics</b> comprised dynamic logics, temporal logics, logics of process(es), and their extensions {{by means of}} fixpoints. A more recent addition {{to the family of}} <b>program</b> <b>logics</b> are logics of knowledge and belief. The talk introduces (on an informal level) several popular <b>program</b> <b>logics</b> (including Computation Tree Logic and Mu-Calculus), surveys fundamental results and research problems for this logics. Some links to software tools and experimental systems based on <b>program</b> <b>logics</b> are included. Several well-known computer scientists and mathematicians have contributed to this research domain, ex., E. M. Clarke, D. Harel, J. Halpern, D. Kozen, L. Lamport, Z. Manna, R. Parikh, A. Pnueli, V. R. Pratt, J. Sifacis, M. Vardi, etc. Their research are well known around the world. In contrast, research of scientists from former Soviet Union are less known abroad in spite [...] ...|$|R
5000|$|PLATO (<b>Programmed</b> <b>Logic</b> for Automated Teaching Operations) system {{developed}} at the University of Illinois at Urbana-Champaign in a project led by Dr. Donald Bitzer. Some rights to PLATO, including the trademark, are now owned by Edmentum (formerly PLATO Learning), which delivers managed course content over the Internet. The PLATO system featured multiple roles, including students, who could study assigned lessons and communicate with teachers through on-line notes, instructors, who could examine student progress data, as well as communicate and take lessons themselves, and authors, who could {{do all of the}} above, plus create new lessons. There was also a fourth type of user, called a multiple, which was used for demonstrations of the PLATO system.|$|E
50|$|Originally AMR devices just {{collected}} meter readings electronically and matched {{them with}} accounts. As technology has advanced, additional data {{could then be}} captured, stored, and transmitted to the main computer, and often the metering devices could be controlled remotely. This can include events alarms such as tamper, leak detection, low battery, or reverse flow. Many AMR devices can also capture interval data, and log meter events. The logged data {{can be used to}} collect or control time of use or rate of use data {{that can be used for}} water or energy usage profiling, time of use billing, demand forecasting, demand response, rate of flow recording, leak detection, flow monitoring, water and energy conservation enforcement, remote shutoff, etc. Advanced Metering Infrastructure, or AMI is the new term coined to represent the networking technology of fixed network meter systems that go beyond AMR into remote utility management. The meters in an AMI system are often referred to as smart meters, since they often can use collected data based on <b>programmed</b> <b>logic.</b>|$|E
50|$|Technology-based {{training}} {{emerged as}} an alternative to instructor-led training in the 1960s on mainframes and mini-computers. The major advantage that blended learning offers is scale, whereas one instructor can only teach so many people. One example is PLATO (<b>Programmed</b> <b>Logic</b> for Automatic Teaching Operations), a system developed by the University of Illinois and Control Data. PLATO in particular had a long history of innovations and offered coursework from elementary to the college level. Mainframe-based training had a number of interface limitations that gave way to satellite-based live video in the 1970s. The advantage here was serving people who were not as computer literate. The major challenge was the expense required to make this work. In the early 1990s, CD-ROMs emerged as a dominant form of providing technology-based learning as bandwidth through 56k modems weren't able to support very high quality sound and video. The limitation to CD-ROMs was tracking completion of coursework, so learning management systems emerged as a way to facilitate progress tracking. The aviation industry used this heavily to track how well one did on courses, how much time was spent, and where someone left off. AICC, Aviation Industry Computer-Based Training Committee, was formed in 1988 and companies such as Boeing used CD-ROMs to provide training for personnel. Modern blended learning is delivered online, although CD-ROMs could feasibly still be used if a learning management system meets an institution's standards. Some examples of channels through which online blending learning can be delivered include webcasting (synchronous and asynchronous) and online video (live and recorded). Solutions such as Khan Academy have been used in classrooms to serve as platforms for blended learning.|$|E
40|$|<b>Program</b> <b>logics</b> are formal {{systems for}} specifying and {{reasoning}} about software <b>programs.</b> Most <b>program</b> <b>logics</b> make the strong assumption that all threads {{agree on the}} value of shared memory at all times. This assumption can be unsound though for programs with races, like many concurrent data structures. Verification of these difficult programs must take into account the weaker models of memory provided by the architectures on which they execute. In this paper, we describe progress toward a <b>program</b> <b>logic</b> for local reasoning about racy concurrent programs executing on a weak, x 86 -like memory model. ...|$|R
40|$|Inductive <b>Logic</b> <b>Programming</b> (ILP) {{combines}} both Machine Learning and <b>Logic</b> <b>Programming</b> techniques. ILP uses first-order {{predicate logic}} restricted to Horn clauses as an underlying language. Thus, programs induced by an ILP system inherit the classical limitations of PROLOG <b>programs.</b> Constraint <b>Logic</b> <b>Programming</b> avoids some {{of the limitations of}} <b>Logic</b> <b>Programming</b> and so ILP aims to induce programs that employ this paradigm. Current ILP systems which induce constrained <b>logic</b> <b>programs</b> extend systems based on the normal semantics of ILP. In this paper we introduce ICLog, a new system which induces constrained <b>logic</b> <b>programs</b> and relies on an extension of a non-monotonic semantics-based system. We then present an application of IC-Log in the field of Computer-Aided Publishing. Keywords Machine Learning, Inductive <b>Logic</b> <b>Programming,</b> Inductive Constraint <b>Logic</b> <b>Programming.</b> 1 Introduction Inductive <b>Logic</b> <b>Programming</b> (ILP) combines both Machine Learning and <b>Logic</b> <b>Programming</b> techniq [...] ...|$|R
5000|$|... writing {{graphical}} {{flow and}} java services (the <b>programming</b> <b>logic)</b> ...|$|R
5000|$|A {{few seconds}} into launch, a {{transient}} voltage caused the KORD {{to shut down}} Engine #12. After this happened, the KORD shut off Engine #24 to maintain symmetrical thrust. At T+6 seconds, pogo oscillation in the #2 engine tore several components off their mounts and started a propellant leak. At T+25 seconds, further vibrations ruptured a fuel line and caused RP-1 to spill into the aft section of the booster. When it {{came into contact with}} the leaking gas, a fire started. The fire then burned through wiring in the power supply, causing electrical arcing which was picked up by sensors and interpreted by the KORD as a pressurization problem in the turbopumps. The KORD responded by issuing a general command to shut down the entire first stage at T+68 seconds into launch. This signal was also transmitted up to the second and third stages, [...] "locking" [...] them and preventing a manual ground command from being sent to start their engines. Telemetry also showed that the power generators in the N-1 continued functioning until impact with the ground at T+183 seconds. Investigators discovered the remains of the rocket 32 miles (52 kilometers) from the launch pad. Vasily Mishin had initially blamed the generators for the failure, as he could not think of any other reason why all 30 engines would shut down at once, but this was quickly disproven by telemetry data and the recovery of the generators from the crash site. They had survived in good condition and were shipped back to the Istra plant, where they were refurbished and worked without any problems under bench testing. The investigative team did not speculate as to whether the burning first stage could have continued flying if the KORD system had not shut it down. The KORD was found to have a number of serious design flaws and poorly <b>programmed</b> <b>logic.</b> One unforeseen flaw was that its operating frequency, 1000Hz, happened to perfectly coincide with vibration generated by the propulsion system, and the shutdown of Engine #12 at liftoff was believed to have been caused by pyrotechnic devices opening a valve, which produced a high frequency oscillation that went into adjacent wiring and was assumed by the KORD to be an overspeed condition in the engine's turbopump. The wiring in Engine #12 was believed to be particularly vulnerable to this effect due to its length, however other engines had similar wiring and were unaffected. Also, the system ended up drawing 25V instead of its designed 15V due to the ruptured power lines. The control wiring was relocated and coated with asbestos for fireproofing and the operating frequency changed. [...] The launch escape system was activated and did its job properly, saving the mockup of the spacecraft. All subsequent flights had freon fire extinguishers installed next to every engine. According to Sergei Afanasiev, the logic of the command to shut down the entire cluster of 30 engines in Block A was incorrect in that instance, as the subsequent investigation revealed.|$|E
40|$|This {{article is}} about the {{weaknesses}} of part 3 of the IEC 1131 standard and in particular {{of one of the}} languages it defines called Instruction List. It will also propose ways to improve the standard {{so that it can be}} used to create high quality software. 1 Introduction Traditionally when some control circuit was needed in for example a chemical plant, it would be implemented using hardwired logic, i. e. a hardware circuit consisting of AND and NAND gates. Unfortunately hardware circuits are inherently inflexible. The software implementation of Boolean functions, called <b>programmed</b> <b>logic,</b> is much more flexible. <b>Programmed</b> <b>logic</b> uses a processor with memory for a program, memory for data and I/O interfaces, also called a Programmable Logic Controller (PLC). Simply put a PLC reads its input, applies certain functions and finally writes the output. Figure 1 : PLC architecture Over the last twenty years, the use of PLC's has increased immensely; PLC's can nowadays be found in, among other t [...] ...|$|E
40|$|A {{temporary}} {{installation of}} Transtek's in-mine communications {{system in the}} Lake Lynn mine {{was used in the}} mine rescue training programs offered by NIOSH in April and May 2002. We developed and implemented a software program that permits point-to-point data transmission through our in-mine system. We also developed a wireless data transceiver for use in a PLC (<b>programmed</b> <b>logic</b> controller) to remotely control long-wall mining equipment...|$|E
40|$|Abstract. Nested <b>logic</b> <b>programs</b> and epistemic <b>logic</b> <b>programs</b> are two {{important}} extensions of answer set programming. However, {{the relationship between}} these two formalisms is rarely explored. In this paper we first introduce the epistemic HT-logic, and then propose a more general extension of <b>logic</b> <b>programs</b> called nested epistemic <b>logic</b> <b>programs.</b> The semantics of this extension- named equilibrium views- is defined {{on the basis of the}} epistemic HT-logic. We prove that equilibrium view semantics extends both the answer sets of nested <b>logic</b> <b>programs</b> and the world views of epistemic <b>logic</b> <b>programs.</b> Therefore, our work establishes a unifying framework for both nested <b>logic</b> <b>programs</b> and epistemic <b>logic</b> <b>programs.</b> Furthermore, we also provide a characterization of the strong equivalence of two nested epistemic <b>logic</b> <b>programs.</b> ...|$|R
40|$|In {{this paper}} we {{describe}} {{some of our}} progress towards an operational implementation of a modern <b>programming</b> <b>logic.</b> The logic is inspired by the variable type systems of Feferman, and is designed for reasoning about imperative functional <b>programs.</b> The <b>logic</b> goes well beyond traditional <b>programming</b> <b>logics,</b> such as Hoare’s logic and Dynamic logic in its expressibility, yet is less problematic to encode into higher order logics. The main focus of the paper is to...|$|R
40|$|We {{describe}} a derived <b>programming</b> <b>logic</b> for a generic structured assembly language. It has been {{combined with a}} compiler correctness theorem. This allows us to deduce correctness properties of object code from corresponding properties of the source code proved with the <b>programming</b> <b>logic.</b> All proofs {{have been carried out}} using the HOL system...|$|R
40|$|We {{introduce}} radial encoding of nanowires (NWs), a {{new method}} of differentiating and controlling NWs {{by a small}} set of meso-scale wires. Such NWs {{can be used in}} crossbars as memories or <b>programmed</b> <b>logic</b> arrays. Methods of controlling (decoding) radially addressed NWs and efficient shell etching algorithms for this purpose are given. The new encoding and decoding methods are shown to be comparable in effective pitch with axially encoded NWs but not to suffer from misalignment that is charateristic of such NWs. We also introduce and analyze hybrid axial/radial NW encodings. ...|$|E
40|$|We {{describe}} {{the operation of}} a silicon optical nanocrystal memory device. The <b>programmed</b> <b>logic</b> state of the device is read optically by the detection of high or low photoluminescence intensity. The suppression of excitonic photoluminescence is attributed to the onset of fast nonradiative Auger recombination {{in the presence of}} an excess charge carrier. The device can be programmed and erased electrically via charge injection and optically via internal photoemission. Photoluminescence suppression of up to 80 % is demonstrated with data retention times of up to several minutes at room temperature...|$|E
40|$|A field-programmable {{gate array}} (FPGA) can {{implement}} arbitrary logic circuits in the field. In this paper, we consider universal test such that when applied to an unprogrammed FPGA, it ensures that all the corresponding <b>programmed</b> <b>logic</b> circuits on the FPGA are fault-free. We focus on testing for look-up tables in FPGAs, and present two types of programming schemes; sequential loading and random access loading. Then we show test procedures for the FPGAs with these programming schemes and their test complexities. In {{order to make the}} test complexity for FPGAs independent of the array size of the FPGAs, we propose a programming scheme called block-sliced loading, which makes FPGAs C-testable. [URL]...|$|E
40|$|Abstract: We {{present a}} resource-aware <b>program</b> <b>logic</b> for a JVM-like {{language}} and prove its soundness and completeness. We first define Grail, an abstraction over {{a subset of}} the JVM bytecode language to facilitate formalisation while re-taining a close correspondence to JVM’s cost model. For Grail we then define an operational semantics, {{and on top of that}} a VDM-style <b>program</b> <b>logic</b> that addi-tionally tracks resource consumption such as execution time and heap allocation. Finally, we prove soundness and completeness of this <b>program</b> <b>logic,</b> with respect to the operational semantics. All formalisations and proofs have been done in the Isabelle theorem prover. 1. ...|$|R
5000|$|Declarative {{programming}} - defines <b>program</b> <b>logic,</b> but not detailed control flow.|$|R
40|$|AbstractThis paper {{presents}} {{a method for}} mechanically proving the soundness of a <b>programming</b> <b>logic</b> for a distributed programming language, {{in support of the}} development of verified program verification tools. We focus on: 1. (1) how to formalize the operational semantics of a distributed programming language; 2. (2) how to formalize the concept of program correctness for distributed programs; 3. (3) how to mechanically prove the soundness of a <b>programming</b> <b>logic</b> with respect to the formal semantics of the language; 4. (4) how to use the mechanized and sound logic to develop verification tools with soundness guaranteed; and 5. (5) how to accomplish all above in the same formalism. Our <b>programming</b> <b>logic</b> permits the verification of single processes executing in isolation and, also, the verification of the composition of concurrently executing processes. Our method demonstrates that structuring the specification of operational semantics can ease the creation of a sound and mechanized <b>programming</b> <b>logic</b> for distributed <b>programming</b> languages. We believe that our method can be scaled up to larger distributed programming languages and their <b>programming</b> <b>logics.</b> The Cambridge HOL theorem proving system is used in our research...|$|R
40|$|Gives {{a summary}} of the major ideas which affect the design of circuit boards. It {{includes}} available technologies, and their external characteristics, both indispensible to a circuit designer. The different integration levels and corresponding logic functions, and the production of combination and sequential types of circuit are also covered. Various technology families are outlined and some details are given of their power and speed capabilities and a table illustrates the different integration levels. Logic methods are discussed, with some typical circuits and there is brief discussion of programmable circuits and various available forms of logic. <b>Programmed</b> <b>logic</b> is discussed further, together with microprogramming and the general principles governing electronic circuit design are outlined. Francai...|$|E
40|$|In modern life, {{there are}} means for {{automation}} of various processes which allow one to provide high quality standards of released products {{and to raise}} labour efficiency. In the given paper, the data on the automation of the test process of the ELSY-TMK controller [1] is presented. The ELSY-TMK <b>programmed</b> <b>logic</b> controller is an effective modular platform for construction of automation systems for small and average branches of industrial production. The modern and functional standard of communication and open environment of the logic controller give a powerful tool of wide spectrum applications for industrial automation. The algorithm allows one to test controller modules by operating the switching system and external devices faster and {{at a higher level}} of quality than a human without such means does...|$|E
40|$|The {{methods for}} {{analysis}} and {{synthesis of the}} finite automatic devices to be programmed has been widened. The new dynamically stable mathematic and scheme models of the automatic devices with the different criteria of optimization have been developed. The new control devices with the <b>programmed</b> <b>logic</b> structure, protected by the Authorized Certificates, have been developed and introduced in the SPA "Hydrotruboprovod". The control device by the transport systems with the conveyor trains has been introduced in the Ramensk GOK (Moscow region). The field of application: the control systems by the transport and other systems electric drives, the algorithm of control of which is expressed by {{the functions of the}} Boolean algebraAvailable from VNTIC / VNTIC - Scientific & Technical Information Centre of RussiaSIGLERURussian Federatio...|$|E
40|$|<b>Logic</b> <b>programs</b> are an {{important}} knowledge representation tool. In many cases, definite <b>logic</b> <b>programs</b> are too restricted to formalize problems intuitively. Therefore definite <b>logic</b> <b>programs</b> have been extended in several ways by additional syntactic constructs such as negation and disjunction. A very expressive program class are generalized <b>logic</b> <b>programs.</b> Their rules may contain any quantifier free formula in both their body and head. Definite, normal and disjunctive <b>logic</b> <b>programs</b> are special cases of generalized <b>logic</b> <b>programs.</b> Constraint <b>logic</b> <b>programming,</b> defined in [4], extends definite <b>logic</b> <b>programs</b> by constraints: logical expressions that describe special properties of the problem domain. The combination of these two extensions defines the syntax of generalized <b>logic</b> <b>programs</b> with constraints (�ÄÈ �). Declarative semantics provides a mathematically precis...|$|R
40|$|In a {{previous}} work we have de ned Monotonic <b>Logic</b> <b>Programs</b> which extend de nite <b>logic</b> <b>programming</b> to arbitrary complete lattices of truth-values with an appropriate notion of implication. We {{have shown that}} this framework is general enough to capture Possibilistic <b>Logic</b> <b>Programming,</b> Hybrid Probabilistic <b>Logic</b> <b>Programs,</b> Fuzzy <b>Logic</b> <b>Programming,</b> Probabilistic Deductive Databases, and Generalized Annotated <b>Logic</b> <b>Programs.</b> However, none of these semantics de ne a form of non-monotonic negation, which is fundamental for several knowledge representation applications. In the spirit of our previous work, we generalise our framework of Monotonic <b>Logic</b> <b>Programs</b> to allow for rules with arbitrary antitonic bodies over general complete lattices, of which normal programs are a special case. We then show that all the standard <b>logic</b> <b>programming</b> theoretical results carry over to Antitonic <b>Logic</b> <b>Programs,</b> de ning Stable Model and Well-founded Model alike semantics...|$|R
25|$|Concurrent {{constraint}} <b>logic</b> <b>programming</b> combines concurrent <b>logic</b> <b>programming</b> and constraint <b>logic</b> <b>programming,</b> using constraints {{to control}} concurrency. A clause can contain a guard, {{which is a}} set of constraints that may block the applicability of the clause. When the guards of several clauses are satisfied, concurrent constraint <b>logic</b> <b>programming</b> makes a committed choice to the use of only one.|$|R
