15|64|Public
5000|$|<b>Program</b> <b>flowchart,</b> {{showing the}} {{controls}} {{in a program}} within a system ...|$|E
40|$|This thesis dwells on program {{creating}} {{in program}} environment Excel, {{in accordance with}} submission from submitter. Program {{is going to be}} able solve all required values. This thesis has four parts. First part is oriented on problems of urban mass transportation a methods of specific energy consumption. Second part contains <b>program</b> <b>flowchart</b> and program description. Third part contains theoretical solution of specific energy consumption and theoretical comparison of computing methods. Last part contains numerical substitution in an equations and calculating of their values...|$|E
40|$|The systematization of glossarial indexes is very {{important}} for teaching and studying Japanese language and literature. It is well-known that the computer system is an effective measure to compile a glossarial index with the context. So I purposed to compose a program package for it by personal computer. As the first step, I attempted to compile a glossarial index to the part of the colloquial translation of Hyakunin-isshu Minenokakehashi. The present paper includes: 1. <b>program</b> <b>flowchart</b> for compiling a glossarial index, 2. operating procedures, 3. testing results, and 4. unsettled problems...|$|E
5000|$|In Huang's 1975 paper, a decision-to-decision path {{is defined}} as path in a <b>program's</b> <b>flowchart</b> such that all the {{following}} hold (quoting from the paper): ...|$|R
40|$|This {{appendix}} {{is divided}} into three sections. The first section contains abstracts of each of the eight computer programs in the system, instructions for keypunching the three input documents, and computer operating instructions pertaining to each program. The second section contains system flowcharts for the entire system as well as <b>program</b> <b>flowcharts</b> for each <b>program.</b> The last section contains PL/l program listings of each program...|$|R
50|$|Flowgorithm is a {{graphical}} {{authoring tool}} which {{allows users to}} write and execute <b>programs</b> using <b>flowcharts.</b> The approach is designed to emphasize the algorithm rather than the syntax of a specific <b>programming</b> language. The <b>flowchart</b> {{can be converted to}} several major programming languages. Flowgorithm was created at Sacramento State University.|$|R
40|$|Abstract. This work {{describes}} {{the development of}} a novel equipment support training system. Differing from the traditional teaching panel method, the proposed method does not require any complex computations for coordinate transformation and is a simpler scheme. The proposed equipment support training system includes small equipment support training robots. The system specification phase determines the basic functionalities of the system, which can be described as a series of multi ‐ level goals. Interface analysis is used to understand the input and output interactions between the system and the environment. The equipment support training system architecture, control board design and <b>program</b> <b>flowchart</b> are described and implemented...|$|E
40|$|Abstract—This work {{describes}} {{the development of}} a novel equipment support training system. Differing from the traditional teaching panel method, the proposed method does not require any complex computations for coordinate transformation and is a simpler scheme. The proposed equipment support training system includes small equipment support training robots. The system specification phase determines the basic functionalities of the system, which can be described as a series of multi ‐ level goals. Interface analysis is used to understand the input and output interactions between the system and the environment. The equipment support training system architecture, control board design and <b>program</b> <b>flowchart</b> are described and implemented. Keywords-support training system; system architecture; embedded system I...|$|E
40|$|Background An {{individual}} has {{alleged that the}} visna virus, which caused illness and death in Icelandic sheep, {{was used by the}} National Cancer Institute’s (NCI) Special Virus Cancer Program (SVCP) to develop HIV- 1, the virus that has caused the global AIDS pandemic. • This individual cited a SVCP research <b>program</b> <b>flowchart</b> as evidence that HIV- 1 was developed intentionally in its laboratories. Objectives • Identify overall stated purposes and outcomes of SVCP. • Describe scientific assessments of the origins of the AIDS virus and any possible evidence regarding the origin of the AIDS virus at SVCP. • Describe outcome of recent litigation involving the individual’s allegations of federal government involvement in the origins of the AIDS virus...|$|E
40|$|Abstract. Through the {{assembling}} {{process analysis}} of the switch functional parts, the physical structure of the assembling equipment was designed and modeled, moreover, the schematic diagram of the pneumatic drive system was also designed {{on the basis of}} the motion requirements of the equipment, and finally, the I/O allocation and the electric control diagram were designed accordingly, together with the PLC <b>programming</b> <b>flowchart</b> plotted. Eventually, remarkable benefit has been exhibited after putting into production...|$|R
50|$|The {{software}} {{allows students}} to write and execute <b>programs</b> using <b>flowcharts.</b> It is typically used in academics to teach introductory programming concepts.|$|R
5000|$|Douglas Hartree in 1949 {{explained}} that Herman Goldstine and John von Neumann {{had developed a}} flowchart (originally, diagram) to plan computer programs. His contemporary account is endorsed by IBM engineers and by Goldstine's personal recollections. The original <b>programming</b> <b>flowcharts</b> of Goldstine and von Neumann {{can be seen in}} their unpublished report, [...] "Planning and coding of problems for an electronic computing instrument, Part II, Volume 1" [...] (1947), which is reproduced in von Neumann's collected works.|$|R
40|$|The paper {{describes}} {{a joint effort}} by the Easter Seal Society and the Arkansas State Department of Education to help rural districts provide appropriate services to orthopedically impaired students. The resulting outreach program provided on-site (school or:some) evaluation of students ' needs and practical guidelines in non-technical terms to meet those needs. Evaluation covered the psychological, therapy, special educational, and adapted physical education domains. Consultation was offered in both direct services (such as equipment loan, instruction in therapeutic handling and facilitation, and adaptation of games and activities) and indirect services (including help in finding funding sources for equipment and providing inservice training for staff). Proaram impact over a 7 -year period is analyzed and ongoing challenges are noted. A <b>program</b> <b>flowchart</b> and an equipment list are appended. (CL) * Reproductions supplied by EDRS are the best {{that can be made}} * * from the original document. ...|$|E
40|$|Considering the {{characteristics}} of spatial straightness error, this paper puts forward a kind of evaluation method of spa-tial straightness error using Geometric Approximation Searching Algorithm (GASA). According to the minimum con-dition principle of form error evaluation, the mathematic model and optimization objective of the GASA are given. The algorithm avoids the optimization and linearization, and can be fulfilled in three steps. First construct two parallel quadrates based on the preset two reference points of the spatial line respectively; second construct centerlines by con-necting one quadrate each vertices to another quadrate each vertices; after that, calculate the distances between mea-sured points and the constructed centerlines. The minimum zone straightness error is obtained by repeating comparing and reconstructing quadrates. The principle and steps of the algorithm to evaluate spatial straightness error is described in detail, and the mathematical formula and <b>program</b> <b>flowchart</b> are given also. Results show that this algorithm can evaluate spatial straightness error more effectively and exactly...|$|E
40|$|This work {{describes}} {{the development of}} a novel embedded teaching system for multi-jointed robots. Differing from the traditional teaching panel method, the proposed method does not require any complex computations for coordinate transformation and is a simpler scheme. The proposed teaching system includes a small teaching robot, which is scaled to the real jointed robot, however, joints are replaced with potentiometers. An embedded electrical control system contains the main control board and joint control cards. The main control board receives voltage signals from the teaching robot and transforms them into position commands for the motion of each joint. All the position commands are recorded on the main control board using the desired sample rate. In trajectory planning mode, the operator drags the teaching robot to generate the desired motion. The electrical control system drives the real jointed robot in response to the received voltage signals from the teaching robot. Trajectory teaching can be done naturally without expertise. The teaching system architecture, control board design and <b>program</b> <b>flowchart</b> are described and implemented...|$|E
40|$|Spreadsheets {{are widely}} used in various areas by end users because {{they are easy to}} use. However, {{due to the lack of}} the {{methodology}} for analysis and design for spreadsheet applications, users suffer with problems such as high error rates, low reusability, and maintenance difficulties. To mitigate these problems, we introduce a multi-paradigm spreadsheet that allows end users to analyze their problems and design for the solutions. Our multi-paradigm spreadsheet supports object-oriented <b>programming,</b> <b>flowchart,</b> XML, and spreadsheet. While writing the XML document, they analyze the problems by grouping similar things into one concept, and the concept develops into a class in object-oriented <b>programming.</b> The <b>flowchart</b> and spreadsheet are used for describing operations or methods of the class. Our multi-paradigm spreadsheet is so simple that even end users can analyze and design for their applications. Key words: Multi-Paradigm, Spreadsheet, End Users, OO...|$|R
50|$|Visual Logic is a {{graphical}} {{authoring tool}} which {{allows students to}} write and execute <b>programs</b> using <b>flowcharts.</b> It is typically used in academics to teach introductory programming concepts.|$|R
50|$|<b>Flowchart</b> <b>programming</b> {{interface}} for PICs and PICAXE chips, including exporting {{programs to}} a physical PIC or PICAXE.|$|R
40|$|The LHC {{cryogenic}} {{system is}} based on a five-point feed scheme with eight refrigerators serving the eight sectors of the LHC machine. The paper presents the simplified flow scheme of the eight sectors and the mathematical methods including the <b>program</b> <b>flowchart</b> and the boundary conditions to simulate the cooldown and warmup of these sectors. The methods take into account the effect of the pressure drop across the valves as well as the pressure evolution in the different headers of the cryogenic distribution line. The simulated pressure and temperature profiles of headers of the LHC sector during the cooldown and warmup are given and the temperature evolutions of entire processes of cooldown and warmup are presented. As a conclusion, the functions of the input temperature for the normal and fast cooldown and warmup, the cooldown and warmup time of each sector and the distributions of mass flow rates in each sector are summarized. The results indicate {{that it is possible to}} cool down any of the LHC sector within 12. 7 days in normal operation and 6. 8 days in case of fast operation...|$|E
40|$|This article {{explains}} how {{to construct a}} ranking function for any program that is proved terminating by size-change analysis. The “principle of size-change termination ” for a first-order functional language with wellordered data is intuitive: A program terminates on all inputs, if every infinite call sequence (following program control flow) would imply an infinite descent in some data values. Size-change analysis is based on information associated with the subject program’s call-sites. This information indicates, for each call-site, strict or weak data decreases observed as a computation traverses the call-site. The set DESC of call-site sequences for which the size-changes imply infinite descent is ω-regular, as is the set FLOW of infinite call-site sequences following the <b>program</b> <b>flowchart.</b> If FLOW ⊆ DESC (a decidable problem), every infinite call sequence would imply infinite descent in a well-ordering — an impossibility — so the program must terminate. This analysis accounts for the termination arguments applicable to different call-site sequences, without indicating a ranking function for the program’s termination. In this article, it is explained how one can be constructed whenever size-change analysis succeeds. The constructed function has an unexpectedly simple form; it is expressed using only min, max, and lexicographic tuples o...|$|E
40|$|ABSTRACT Objective: {{to verify}} causes of {{inactivity}} in the Home Delivery Medicament Program, as referred by users from a Primary Health Care Service in São Paulo, comparing {{them to the}} causes registered in the program and analyzing them in the theoretical model Concept of Access to Health. Methods: cross-sectional study, interviewing 111 inactive users; and documentary study in the program records. Results: half of the users {{did not know the}} condition of inactivity. Discrepancies were found between the user's and the program's information, observing different levels of agreement: Absence of physician and administrative staff member 0 %; Transfer to other service 25 %; Death 50 %; Option to quit 50 %; Address change 57 % and Change in therapeutic schedule 80 %. The users' feeling of accepting the program was observed. In the health access concept, inactivity can be explained in the information dimension, in the degree of asymmetry between the patient's and the health professional's knowledge, identified through the indicators: education, knowledge and information sources. Conclusions: due to the low education level, the user does not assimilate the information {{on the steps of the}} <b>program</b> <b>flowchart,</b> does not return for the assessment that guarantees its continuity. Consequently, (s) he stops receiving the medication and spends a long time without treatment, increasing the cardiovascular risk of hypertensive (92 % of the sample), diabetic (44 %) and dyslipidemic patients (31 %) ...|$|E
40|$|Abstract. The {{electronic}} {{white board}} and the tablet PC are bringing new technologies to modern education. This paper presents a hybrid SVM-HMM algorithm for sketch recognition. In this algorithm, ICA is used to reduce the dimension of features, a set of fuzzy SVMs are used as preliminary feature classifiers to produce fix length feature vector, which acts as a probability evaluator in the hidden states of Hidden Markov Models, and HMMs are employed as finally classifiers to recognize the unknown pattern. Experiment results show the hybrid algorithm has good learning and recognition ability. And based on this algorithm, a programming teaching system is designed to identify the sketches to the <b>programming</b> <b>flowchart,</b> and converts it to C language programs finally...|$|R
40|$|When people write {{a report}} that {{involves}} a complex argument towards a conclusion, they can use a design tool called the inference tree, which enables them to outline the argument, and quickly detect reasoning errors in the outline. Yet when the argument is very complex, the inference tree may spread over several pages, so that writers may often have to flip {{back and forth between}} those pages. To prevent unnecessary flipping, they can draw the tree as a hierarchy of modules, similar to a modular hierarchy of <b>program</b> <b>flowcharts</b> or structure charts, where a major module controls several minor modules. In drawing the tree, writers can adopt four principles of Computing: modularity, the criterion of minimal coupling between modules, and the methods of forward and backward chaining to draw all the modules...|$|R
40|$|Abstract- Teaching {{computer}} programming to novices has always posed {{a major challenge}} to educators. Many novices acquire basic programming skills but {{they are unable to}} utilize them in a meaningful way to solve non-routine problems. As a result, they do not achieve any level of programming fluency. Collaboration has been identified as a useful tool to help overcome this problem if utilized at the right times during the programming/problem solving process. This paper presents a model for a synchronous gaming CSCL (Computer Supported Collaborative Learning) application aimed at improving problem-solving skill. The model addresses some major issues in CSCL such as unequal participation among group members, increasing argumentative discussion and promoting positive interdependence and individual accountability. A game, Collaborative Online Problem Solving (COPS), which was developed using this model, is presented. COPS aims to improve the problem-solving skill of novice programmers, by requiring them to collaboratively build <b>program</b> <b>flowcharts...</b>|$|R
40|$|This {{study is}} devoted to the trees and shrubs of Abu Gieli forest that located on East bank of Blue Nile, Sennar State, Sudan, to which ten field trips were carried out for sample {{collection}} and photography. Using herbaria manuals and internet facilities, fifty nine tree and shrub species were investigated and identified. For speedy and reliable identification, two keys were developed; the first is for all species described when they are leafy, flowery or fruity; while the other is for trees when deciduous, this is based entirely on characters which can be seen the whole year round i. e. those of buds, leaf- scars, twigs and bark. The process of recognizing plants passes through the families, genera and then the species in a form of a key that constructed and developed in a way liable to computerization. First, all tree species, classified to families, and arranged in an overall structure, then a flowchart has been constructed. The flowchart shows the overall program and the choice the user makes to go through the <b>program.</b> <b>Flowchart</b> is used to create the program using one of the object oriented programming visual basic language. The keys were computerized by using Microsoft Visual Basic version 6 program. The interactive nature of the key enables the user to interact with the program by responding to prompt order depending on the choice he or she takes. The program will guide the user according to his or her choice step by step until the right species is given. The present program makes provision for (26) families, (46) genera and (59) species, in addition to these groups which can be made according to the choice. In addition, Illustrations are given, the photograph folder can be resident in C drive and the program can be put in the desktop...|$|E
40|$|The project {{seeks to}} {{investigate}} the possibility of efficient water use in irrigation scheduling systems {{through the use of}} a designed flexible computer based irrigation control system. One of the specific objectives of the project was, to develop an irrigation control software program for a drip irrigation system, which will monitor and manage irrigation in the greenhouse. The other specific objectives of the project are to experimental determine the control parameter such as leaf area index, thermal conductance constant Ksh, which are inputs to the developed control program. The final objective of the project was to test the designed control system in a greenhouse. The designed irrigation control system consisted of a combination of hardware, software and electric devices that monitored the plant sap flow variations in a plant via a sap flow gauge, data logger and an interface card. Four voltage signals from the sap flow gauge were sent to the computer via the interface board for computations and control purposes. The processed signals were sent back to the relay card via the same interface board for the actual control of irrigation scheduling. In the control program development phase a software <b>program</b> <b>flowchart</b> was developed followed by the development of actual irrigation control program using Visual Basic 6 enterprise edition (VB 6. 0) complier. The control program parameters were determined with relative errors as follows, average stem diameter of the rose plant (11. 37 0. 04 mm), the averaged total leaf area (29. 25 0. 06), leaf area index (2. 58 0. 19), thermal conductance constant (0. 846 0. 002). The peak stem sap flow rate during the field testing (implementation) period was found to be in the range of 16 - 18 g h- 1, corresponding to crop transpiration rates of 0. 01 - 0. 03 kg s- 1. The current grower system applied 337. 4 litres of water for 24 minutes each day of the two field testing days. It was also observed that the designed control system applied less water on both days of implementation, supplying 323. 8 and 326. 7 litres respectively. The project also reviews the relative suitability of different plant water deficit indicators for specific crop and climatic situations...|$|E
40|$|The {{study of}} program schemata {{and the study}} of subrecursive {{programming}} languages are both concerned with limiting program structure in order to permit a more complete analysis of algorithms while retaining sufficiently rich computing power to allow interesting algorithms. In this paper we combine these approaches by defining classes of subrecursive program schemata and investigating their equivalence problems. Since the languages are all subrecursive, any scheme written in any one of them must halt (as long as we assume the basic functions and predicates are all total). Hence equivalence of schemes is the first question of interest we can ask about these languages. We consider schematic versions of various subrecursive programming languages similar to the Loop language. We distinguish between Pre-Loop and Post-Loop languages on the basis of whether the exit condition in an iteration loop is tested before iteration, an in Algol (Pre-), or after iteration, as in FORTRAN (Post-). We slow that at the program level all these languages have the same computing power (the primitive recursive functions) and all have unsolvable equivalence problems (of arithmetic degree II 10). But at the level of schemes, Pre-Loop has an unsolvable equivalence problem, while at least one formulation of Post-Loop has a solvable equivalence problem. If L is a programming language or scheme language, the we denote by E(L) the equivalence problem in L. The basic languages considered are: Loop (≡Pre-Loop) Loop language for primitive recursive functions Post-Loop Post-Loop language for primitive recursive functions Loop◊ Loop language with restricted conditionals L[D,() ] Loop schemata over D with identity L◊[D,() ] Loop schemata with conditionals PL[D,() ] Post-Loop schemata over D PL◊[D,() ] Post-Loop schemata with conditionals P <b>Program</b> (<b>flowchart)</b> schemata Pd Program schemata with DO-statementsIn contrast to (pure) Loop schemata studied previously by the first author, some of these schemata languages contain the identity function so that a pure data transfer, X ← Y, is possible. Moreover, the equivalence algorithms given here are for the special case of linear schemes (to be defined below) with monadic function variables. Linear schemes are designated by placing L before the name of the more general class, thus LL for linear Loop, LPL for linear Post-Loop, etc. In all schemes considered here the functions are monadic, so no special designation of function rank is provided. It is well known that E(P) is recursively unsolvable and E(P) ∈II 20. We show that E(Loop), E(Post-Loop), E(L◊) (both with and without the pure data transfer), and E(L) are recursively unsolvable, while E(LPL) is recursively solvable. The extension of the equivalence algorithm for LPL to polyadic functions appears at present to be a tedious but straightforward modification to the monadic algorithm. We are hopeful that a simpler and more generally applicable technique will emerge for demonstrating solvability or unsolvability of this class of equivalence problems. The algorithm and proofs given here are but a crude first step in delimiting this problem...|$|E
50|$|Logicator {{is an easy}} to use {{shareware}} <b>flowcharting</b> <b>program.</b> The Logicator {{web page}} is out of date as the free version does support all commands but shows nag screens.|$|R
50|$|ABC FlowCharter is a <b>flowchart</b> <b>program</b> {{originally}} from Micrografx, Inc. The trademark for this software was filed on August 25, 1989, and registered January 1991. It {{is also known}} as Micrografx FlowCharterand iGrafx FlowCharter.|$|R
5000|$|Flowgorithm can interactively {{translate}} <b>flowchart</b> <b>programs</b> into {{source code}} written in other programming languages. As the user steps through their flowchart, the related code in the translated program is automatically highlighted. The following programming languages are supported: ...|$|R
40|$|Sistema UNIDEK na automação de bibliografias classificadas pela CDU; formato e etapas para o processamento de bibliografias, tendo em vista o Sistema; equipamento e material, bem como rotina de trabalho e programas necessários. Inclui fluxogramas, modelos etc. [en] The Unidek System {{applied to}} UDC {{classified}} bibliographies. Formatting and steps {{necessary to the}} processing of data, arming at the whole system; equipment, material, routine of work and <b>programming</b> required. <b>Flowcharts,</b> working sheets, models etc. are included...|$|R
40|$|Although {{enormous}} {{capacity of}} the human brain, we only use {{an average of two}} per cent of our potential brain power, we therefore have the potential to expand our brainpower and testing (testing) on a regular basis as a key method of brain power. Psychometric tests covering subjects such as personality tests which includes lateralitas tests, creativity tests which refers to the patterns of thoughts, feelings, behaviors and knowledge as well as measuring the range of human aspects. Intelligence test a test used to measure the level of one 2 ̆ 7 s thinking ability. One of the problems that arise in every human being has a personality that has different capabilities, including lateralitas, creativity and intelligence. In this case the characteristics that distinguish ourselves with others. Based on these issues raised and the author tries to find solutions to give a practical through the questions will be answered in psychometric tests. In the scientific writing is demonstrated several ways to solve these malasah, including using application analysis, design programs, ie algorithms programs, menu structure, <b>program</b> <b>flowcharts,</b> input and output design and configuration of the computer, and discussion about these issues...|$|R
40|$|This paper {{presents}} and evaluates {{a new approach}} of energy estimation for single software components based on <b>program</b> <b>flowcharts.</b> This estimation {{is designed to be}} applicable early in the design process, which enables system designer to evaluate different design variants with respect to the energy consumption of the later system. The energy estimation model is based on individual flowchart elements and execution probabilities for branches and iterations. The used flowchart elements are for arithmetical calculations, flow control and reads / writes, which are a selection of possible elements used to show the feasibility of the approach. The estimation model is verified in a first step by using three commercially available benchmarks. The flowcharts of these are utilized to estimate the energy consumption by using the presented model. The comparison between estimated and measured energy consumption of an exemplary embedded system results in an estimation error bandwidth between - 11. 9 % and + 6. 9 %. The main benefit of the presented approach is the applicability within the development phase “System Design”, i. e. previous to any software implementation. This is realized by using only available information of that development phase and generic elements to estimate the energy consumption...|$|R
50|$|In 1965, Applied Data Research was one {{of those}} custom {{software}} development firms. It wrote a software program for RCA mainframes called Autoflow, designed to create flowcharts documenting the structure of other computer <b>programs</b> (such <b>flowcharts</b> were an important tool for documenting and maintaining software). RCA decided not to license the product. Other computer manufacturers also refused to license Autoflow, so in 1965 Goetz decided to market it directly to RCA mainframe users. This is generally cited as {{the first time that a}} software program was marketed and sold as a standalone product.|$|R
40|$|AbstractIn this paper, {{we study}} {{some aspects of}} the {{semantics}} of nondeterministic <b>flowchart</b> <b>programs</b> with recursive procedures. In {{the first part of this}} work we provide the operational semantics of programs using the concept of an execution tree. We propose a new definition of the semantics of a non-deterministic recursive program as a mapping from the input domain to the set of execution trees determined by the program. Using this new concept, we prove that every nondeterministic <b>flowchart</b> <b>program</b> with recursive procedures can be unfolded into a semantically equivalent infinite pure flowchart (without procedures). This result is applied in the second part of this work to prove the soundness of an inductive assertion method which is also complete with a finite number of assertions (contrary to De Bakker and Meertens's method [11]) ...|$|R
40|$|We {{present a}} {{methodology}} based on Fifo nets, for {{the transformation of}} <b>flowcharts</b> modeling sequential <b>programs</b> into <b>flowcharts</b> integrating all semantically equivalent behaviours, both sequential and parallel. The model of fifo nets is appropriate since fifo nets model the test to zero problem (required for the modeling of loops of not predined size), and integrate scheduling (required since some actions must occur in a given order). We describe the complete transformation, and show that the fifo nets got provides a concise representation of {{the set of the}} behaviours semantically equivalent to the behaviours of the sequential flowchart. Proc. of 15 th International Conference on Computing and Informatio...|$|R
