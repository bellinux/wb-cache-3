221|2128|Public
25|$|Since an RMS value can be {{calculated}} for any waveform, apparent power can {{be calculated}} from this. For active power it would at first appear {{that we would have}} to calculate many <b>product</b> <b>terms</b> and average all of them. However, if we look at one of these <b>product</b> <b>terms</b> in more detail we come to a very interesting result.|$|E
25|$|Transaction {{specific}} {{factors like}} {{the nature of}} the <b>product,</b> <b>terms</b> of repayment, collateral, etc.|$|E
25|$|However, {{the time}} average of a {{function}} of the form cos(ωt+k) is zero provided that ω is nonzero. Therefore, the only <b>product</b> <b>terms</b> that have a nonzero average are those where the frequency of voltage and current match. In other words, it is possible to calculate active (average) power by simply treating each frequency separately and adding up the answers. Furthermore, if we assume the voltage of the mains supply is a single frequency (which it usually is), this shows that harmonic currents are a bad thing. They will increase the rms current (since there will be non-zero terms added) and therefore apparent power, but they will have no effect on the active power transferred. Hence, harmonic currents will reduce the power factor. Harmonic currents can be reduced by a filter placed at the input of the device. Typically this will consist of either just a capacitor (relying on parasitic resistance and inductance in the supply) or a capacitor-inductor network. An active power factor correction circuit at the input would generally reduce the harmonic currents further and maintain the power factor closer to unity.|$|E
40|$|We examine ways to {{increase}} <b>product</b> <b>term</b> usage e#ciency and propose several new sharing architectures that addresses this problem. We also present a technology mapping algorithm for <b>product</b> <b>term</b> based FPGA embedded memory arrays. Our algorithm, pMapster, is used to investigate the e#ects of macrocell granularity and macrocell sharing {{on the amount of}} logic that can be packed into a <b>product</b> <b>term</b> embedded memory array. ...|$|R
5000|$|In Boolean logic, an implicant is a [...] "covering" [...] (sum <b>term</b> or <b>product</b> <b>term)</b> {{of one or}} more minterms in a sum of {{products}} (or maxterms in product of sums) of a Boolean function. Formally, a <b>product</b> <b>term</b> P in a sum {{of products}} is an implicant of the Boolean function F if P implies F. More precisely: ...|$|R
5000|$|Decide {{the input}} {{connection}} of the AND matrix for generating the required <b>product</b> <b>term.</b>|$|R
5000|$|It {{is often}} the case that the {{canonical}} minterm form can be simplified to an equivalent SoP form.This simplified form would still consist of a sum of <b>product</b> <b>terms.</b> However, in the simplified form,it is possible to have fewer <b>product</b> <b>terms</b> and/or <b>product</b> <b>terms</b> that contain fewer variables.For example, the following 3-variable function: ...|$|E
50|$|Since an RMS value can be {{calculated}} for any waveform, apparent power can {{be calculated}} from this. For active power it would at first appear {{that we would have}} to calculate many <b>product</b> <b>terms</b> and average all of them. However, if we look at one of these <b>product</b> <b>terms</b> in more detail we come to a very interesting result.|$|E
50|$|The above 2-level {{representation}} takes six <b>product</b> <b>terms</b> and 24 transistors in CMOS Rep.|$|E
3000|$|... are available, {{while the}} second <b>product</b> <b>term</b> {{describes}} {{the probability that the}} remaining channels are busy.|$|R
40|$|This work {{presents}} theoretical {{results and}} an efficient heuristic algorithm for minimizing single - output exclusive - or sum-of-products expressions, {{based on an}} iterative <b>product</b> <b>term</b> transformation paradigm. Experimental results verify {{the efficiency of the}} algorithm in terms of execution times and <b>product</b> <b>term</b> count of the produced expression, when compared to a state-of-the-art heuristic ESOP minimizer for single-output benchmark and randomly generated functions...|$|R
25|$|Note that <b>product</b> <b>term</b> in {{parentheses}} {{is just the}} distribution of the mean for a circular uniform distribution.|$|R
50|$|Transaction {{specific}} {{factors like}} {{the nature of}} the <b>product,</b> <b>terms</b> of repayment, collateral, etc.|$|E
5000|$|Obtain {{the minimum}} SOP form {{to reduce the}} number of <b>product</b> <b>terms</b> to a minimum.|$|E
5000|$|While {{the number}} of levels here is 3, {{the total number of}} <b>product</b> <b>terms</b> and literals reduce [...] because of the sharing of the term B + C.|$|E
50|$|In Boolean logic, a <b>product</b> <b>term</b> is a {{conjunction}} of literals, where each literal iseither a variable or its negation.|$|R
3000|$|... {{represents}} one {{particular set of}} available channels. The first <b>product</b> <b>term</b> in (31) denotes the probability that all channels in [...]...|$|R
3000|$|... {{where the}} <b>product</b> <b>term</b> S 1 (fm)/|S 1 (fm)| 2 denotes the inverse MF {{processing}} contrary to multiplying S_ 1 ^*(f_m).|$|R
5000|$|The above array {{multiplier}} can {{be modified}} to support two's complement notation signed numbers by inverting several of the <b>product</b> <b>terms</b> and inserting a one {{to the left of}} the first partial product term: ...|$|E
5000|$|... #Caption: The {{programmable}} elements (shown as a fuse) connect {{both the}} true and complemented inputs to the AND gates. These AND gates, {{also known as}} <b>product</b> <b>terms,</b> are ORed {{together to form a}} sum-of-products logic array.|$|E
5000|$|But, {{from above}} {{we know that}} the energy of vi is {{constant}} (equal to (normalized) value of 2), and the energy of vr is the same in both cases. This reduces the comparison to a minima function between the 2 (middle) dot <b>product</b> <b>terms,</b> ...|$|E
2500|$|... where Einstein {{notation}} {{has been}} used for the tensors, {{in which there is a}} summation over all repeated indices in the <b>product</b> <b>term.</b>|$|R
3000|$|... is {{a typical}} one. Similarly, the first <b>product</b> <b>term</b> in (33) is the {{probability}} that the sensing outcomes of all SUs in [...]...|$|R
3000|$|... denotes {{one such}} typical set. Again, the first <b>product</b> <b>term</b> in (32) is the {{probability}} that the sensing outcomes of all SUs in [...]...|$|R
5000|$|A radically {{different}} approach to this issue is followed in the ESPRESSO algorithm, developed by Brayton et al. at the University of California, Berkeley. Rather than expanding a logic function into minterms, the program manipulates [...] "cubes", representing the <b>product</b> <b>terms</b> in the ON-, DC- and OFF-covers iteratively. Although the minimization result is not guaranteed to be the global minimum, in practice this is very closely approximated, while the solution is always free from redundancy. Compared to the other methods, this one is essentially more efficient, reducing memory usage and computation time by several orders of magnitude. Its name reflects the way of instantly making a cup of fresh coffee. There is hardly any restriction {{to the number of}} variables, output functions and <b>product</b> <b>terms</b> of a combinational function block. In general, e.g. tens of variables with tens of output functions are readily dealt with.|$|E
50|$|Logic {{redundancy}} {{occurs in}} a digital gate network containing circuitry that {{does not affect the}} static logic function. There are several reasons why logic redundancy may exist. One reason is that it may have been added deliberately to suppress transient glitches (thus causing a race condition) in the output signals by having two or more <b>product</b> <b>terms</b> overlap with a third one.|$|E
5000|$|The 20-pin PALs had 10 {{inputs and}} 8 outputs. The outputs were active low {{and could be}} {{registered}} or combinational. Members of the PAL family were available with various output structures called [...] "output logic macrocells" [...] or OLMCs. Prior {{to the introduction of}} the [...] "V" [...] (for [...] "variable") series, the types of OLMCs available in each L were fixed at the time of manufacture. (The PAL16L8 had 8 combinational outputs and the PAL16R8 had 8 registered outputs. The PAL16R6 had 6 registered and 2 combinational while the PAL16R4 had 4 of each.) Each output could have up to 8 <b>product</b> <b>terms</b> (effectively AND gates), however the combinational outputs used one of the terms to control a bidirectional output buffer. There were other combinations that had fewer outputs with more <b>product</b> <b>terms</b> per output and were available with active high outputs. The 16X8 family or registered devices had an XOR gate before the register. There were also similar 24-pin versions of these PALs.|$|E
5000|$|In {{the case}} of equally spaced {{interpolation}} nodes where [...] and , for [...] where [...] the <b>product</b> <b>term</b> in the interpolation error formula can be bound as ...|$|R
50|$|In {{the real}} world of over 200 nations trading {{hundreds}} of thousands of <b>products,</b> <b>terms</b> of trade calculations can get very complex. Thus, the possibility of errors is significant.|$|R
5000|$|... where Einstein {{notation}} {{has been}} used for the tensors, {{in which there is a}} summation over all repeated indices in the <b>product</b> <b>term.</b> The Euler theorem yields for the internal energy: ...|$|R
50|$|In {{cases where}} the White test {{statistic}} is statistically significant, heteroskedasticity {{may not necessarily be}} the cause; instead the problem could be a specification error. In other words, the White test can be a test of heteroskedasticity or specification error or both. If no cross <b>product</b> <b>terms</b> are introduced in the White test procedure, then this is a test of pure heteroskedasticity.If cross products are introduced in the model, then it is a test of both heteroskedasticity and specification bias.|$|E
50|$|The input for ESPRESSO is a {{function}} table of the desired functionality; {{the result is a}} minimized table, describing either the ON-cover or the OFF-cover of the function, depending on the selected options. By default, the <b>product</b> <b>terms</b> will be shared as much as possible by the several output functions, but the program can be instructed to handle each of the output functions separately. This allows for efficient implementation in two-level logic arrays such as a PLA (Programmable Logic Array) or a PAL (Programmable Array Logic).|$|E
50|$|The {{four points}} {{can be ordered}} in any of three {{distinct}} ways (counting reversals as not distinct) to form three different quadrilaterals, for each of which {{the sum of the}} products of opposite sides is at least as large as the product of the diagonals. Thus the three <b>product</b> <b>terms</b> in the inequality can be additively permuted to put any one of them {{on the right side of}} the inequality, so the three products of opposite sides or of diagonals of any one of the quadrilaterals must obey the triangle inequality.|$|E
5000|$|... {{where each}} <b>product</b> <b>term</b> {{represents}} one factorization symbolically and implicitly includes a sum over all factorizations within {{the class of}} terms identified. The purely correlated part is denoted by [...] From these, the two-particle correlations [...] determine doublets while the three-particle correlations [...] are called triplets.|$|R
50|$|Therefore, if we {{know the}} particle's motion, cross <b>products</b> <b>term,</b> and phase factor, we could {{calculate}} the radiation integral. However, calculations are generally quite lengthy (even for simple cases as for the radiation emitted by an electron in a bending magnet, they require Airy function or the modified Bessel functions).|$|R
5000|$|For a boolean {{function}} of [...] variables , a <b>product</b> <b>term</b> {{in which each}} of the [...] variables appears once (in either its complemented or uncomplemented form) is called a minterm. Thus, a minterm is a logical expression of n variables that employs only the complement operator and the conjunction operator.|$|R
