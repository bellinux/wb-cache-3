0|6370|Public
5000|$|FMVSS No. 118: <b>Power-operated</b> <b>window,</b> partition, {{and roof}} panel systems ...|$|R
50|$|In {{automotive}} design terminology, {{the name}} breezeway {{has been used}} to describe the reverse-slanted, <b>power-operated</b> rear <b>window</b> ("backlite") which, when opened even slightly, provided through ventilation. Typical models with this feature are late-1950s Mercury Turnpike Cruisers and Park Lanes.|$|R
50|$|Using the new larger General Motors C-body, with {{vertical}} windshield pillars {{and the new}} Panoramic windshield, the Super for 1954 was a big Buick for {{the budget}} minded buyer. Identified by its three VentiPorts per fender, the Super script on the quarters and the series designation within the deck ornament, the Super shared other brightwork with the Roadmaster. Interiors were nylon and were plainer than in the Roadmaster. The Super did have the more expensive car's horizontal speedometer instrument panel. The convertible was upholstered in leather and had <b>power-operated</b> <b>windows,</b> seat and top, along with an outside rearview mirror on the left, as standard equipment. New features included a lighted ignition key slot, electric windows, and a roof rail cover. The Estate wagon was discontinued. Total sales fell to 118,630.|$|R
50|$|The W <b>window</b> <b>system</b> is a {{discontinued}} <b>windowing</b> <b>system</b> and precursor in {{name and}} concept {{to the modern}} X <b>window</b> <b>system.</b>|$|R
50|$|The X <b>Window</b> <b>System</b> core {{protocol}} is {{the base}} protocol of the X <b>Window</b> <b>System,</b> {{which is a}} networked <b>windowing</b> <b>system</b> for bitmap displays used to build graphical user interfaces on Unix, Unix-like, and other operating <b>systems.</b> The X <b>Window</b> <b>System</b> {{is based on a}} client-server model: a single server controls the input/output hardware, such as the screen, the keyboard, and the mouse; all application programs act as clients, interacting with the user and with the other clients via the server. This interaction is regulated by the X <b>Window</b> <b>System</b> core protocol. Other protocols related to the X <b>Window</b> <b>System</b> exist, both built {{at the top of the}} X <b>Window</b> <b>System</b> core protocol or as separate protocols.|$|R
40|$|The X <b>Window</b> <b>System</b> is a portable, network-transparent and {{flexible}} <b>window</b> <b>system.</b> It {{was developed by}} MIT’s Project Athena in 1984, and subsequently released as open-source software, greatly accelerating its adoption in the unix world. It is now the standard <b>window</b> <b>system</b> for most unix-like platforms, such as Solaris, the BSDs, Linux, and Minix. A notable exception is Apple’s Mac OS, a BSD-derived system, which uses a proprietary <b>window</b> <b>system.</b> Another competing <b>window</b> <b>system</b> is integrated in Microsoft Windows, the leading desktop and server operating system. Although X is not native to those platforms, it has been ported to them, making X the only <b>window</b> <b>system</b> implemented on all modern platforms, and therefore {{the best choice for}} an application which needs to be ported to all major modern platforms. In this paper, {{the advantages and disadvantages of}} the X <b>Window</b> <b>System</b> relative to other modern <b>window</b> <b>systems</b> will be discussed. c© 2008 David R. Hoski...|$|R
50|$|A <b>windowing</b> <b>system</b> of {{some sort}} {{generally}} interfaces directly with the underlying operating system and libraries. This provides support for graphical hardware, pointing devices, and keyboards. The window manager generally runs {{on top of this}} <b>windowing</b> <b>system.</b> While the <b>windowing</b> <b>system</b> may provide some window management functionality, this functionality is still considered {{to be part of the}} window manager, which simply happens to have been provided by the <b>windowing</b> <b>system.</b>|$|R
50|$|RunScanner is a {{freeware}} Microsoft <b>Windows</b> <b>system</b> utility which scans a <b>windows</b> <b>system</b> for all configured running {{programs and}} autostart locations.|$|R
50|$|MiniGLX is a {{specification}} for {{an application}} programming interface which facilitates OpenGL rendering on <b>systems</b> without <b>windowing</b> <b>systems,</b> e.g. Linux without an X <b>Window</b> <b>System</b> or embedded <b>systems</b> without a <b>windowing</b> <b>system.</b> The interface is {{a subset of the}} GLX interface, plus a minimal set of Xlib-like functions.|$|R
50|$|The PostScript-based NeWS (Network {{extensible}} <b>Window</b> <b>System)</b> {{was developed}} by Sun Microsystems in the mid-1980s. For several years SunOS included a <b>window</b> <b>system</b> combining NeWS and the X <b>Window</b> <b>System.</b> Although NeWS was considered technically elegant by some commentators, Sun eventually dropped the product. Unlike X, NeWS was always proprietary software.|$|R
25|$|The X <b>Window</b> <b>System</b> (X11, or {{shortened}} {{to simply}} X) is a <b>windowing</b> <b>system</b> for bitmap displays, common on UNIX-like computer operating systems.|$|R
50|$|An X {{window manager}} {{is a window}} manager which runs {{on top of the}} X <b>Window</b> <b>System,</b> a <b>windowing</b> <b>system</b> mainly used on Unix-like systems.|$|R
50|$|Wayland {{is a new}} <b>windowing</b> <b>system</b> {{with the}} aim of {{replacing}} the X <b>Window</b> <b>System.</b> There is only a few tiling managers that supports Wayland natively.|$|R
50|$|In computing, the X <b>Window</b> <b>System</b> (commonly: X11, or X) is a network-transparent <b>windowing</b> <b>system</b> for bitmap displays. This article {{details the}} {{protocols}} and technical structure of X11.|$|R
40|$|Abstract: Shared <b>window</b> <b>systems</b> {{have become}} a popular vehicle for {{supporting}} distributed, synchronous collaboration. At present they are difficult to build and they support limited paradigms of multi-user interaction with shared applications. We believe this difficulty {{is largely due to}} the inverted nature of the client/server architecture of most distributed <b>window</b> <b>systems.</b> The architecture is inverted {{in the sense that the}} user is nearer the server than the client; this hampers attempts to share windows. By comparing the traditional client/server architecture of distributed file systems with the inverted architecture of distributed <b>window</b> <b>systems</b> we argue that it is possible to develop <b>window</b> <b>systems</b> where the user is nearer <b>window</b> <b>system</b> clients than servers, and that this architecture greatly facilitates the sharing of windows among users...|$|R
50|$|In computing, Microwindows is a <b>windowing</b> <b>system</b> {{which is}} full {{featured}} {{enough to be}} used on a PC or a PDA. The Nano-X <b>Window</b> <b>System</b> is an Open Source project aimed at bringing the features of modern graphical windowing environments to smaller devices and platforms. The project was renamed to Nano-X <b>Window</b> <b>System,</b> due to legal threats from Microsoft regarding the Windows trademark.|$|R
5000|$|It emulates the Windows runtime {{environment}} by translating <b>Windows</b> <b>system</b> calls into POSIX-compliant system calls, recreating the directory structure of <b>Windows</b> <b>systems,</b> and providing alternative implementations of <b>Windows</b> <b>system</b> libraries, system services through [...] {{and various other}} components (such as Internet Explorer, the Windows Registry Editor, and msiexec). Wine is predominantly written using black-box testing reverse-engineering, to avoid copyright issues.|$|R
40|$|This paper {{describes}} the salient problems that face the designers of X-based shared <b>window</b> <b>systems</b> and provides solutions and implementation principles {{for addressing the}} problems. The enumeration of issues and solutions is based on our experiences with XTV [...] - an X-based shared <b>window</b> <b>system</b> we have developed. KEY WORDS X protocol, Computer Conferencing, Computer Supported Collaborative Work, Internet Protocols, UNIX Network Programming, Client/Server Model, Distributed <b>Systems.</b> SHARED <b>WINDOW</b> SYSTEMS Growing interest in concurrent engineering and computer-supported cooperative work {{has led to the}} development of a number of computer conferencing systems that allow geographically distributed groups of individuals to (simultaneously) view and manipulate shared images, documents, or programs, while they communicate via audio and possibly video links [1 - 6]. There are two basic approaches to supporting such conferences. The first involves the development of so-called collaboration-aware applications [...] - specialpurpose applications, that directly support multiple, simultaneously active users. Alternatively, one can leverage the large base of existing single-user applications by augmenting a <b>window</b> <b>system</b> to support the sharing of application interfaces (e. g., windows) across multiple, distributed users. The resulting <b>window</b> <b>system</b> is typically called a shared <b>window</b> <b>system.</b> The X <b>Window</b> <b>System</b> has been a particularly popular vehicle for experimentation with, and development of, shared <b>window</b> <b>systems</b> [1, 4, 5]. Indeed, we have developed, and placed in the public domain, a shared <b>window</b> <b>system,</b> called XTV (X Teleconferencing and Viewing [1, 2]), based on the X <b>Window</b> <b>System.</b> XTV allows a conference to be created around one or more arbitrary X applications. Conferees have the same [...] ...|$|R
2500|$|Linda Mui and Eric Pearce, X <b>Window</b> <b>System</b> Volume 8: X <b>Window</b> <b>System</b> Administrator's Guide for X11 Release 4 and Release 5, 3rd edition (O'Reilly and Associates, July 1993; softcover [...] ) ...|$|R
50|$|For JOGL, GlueGen {{is used to}} bind OpenGL to Java, and to the {{low-level}} <b>windowing</b> <b>system</b> application programming interface (APIs) on the Microsoft <b>Windows,</b> X <b>Window</b> <b>System</b> and Mac OS X platforms.|$|R
50|$|Additionally, while Technical Director of Project Athena, he was {{supportive}} {{of the development of}} the X <b>Window</b> <b>System,</b> an open-source <b>windowing</b> <b>system,</b> still used and developed to this day on Unix-like systems.|$|R
50|$|OpenVMS {{uses the}} DECwindows Motif user {{interface}} (based on CDE) layered {{on top of}} OpenVMS's X11 compliant <b>windowing</b> <b>system.</b> Older versions of VMS instead used a proprietary <b>window</b> <b>system</b> known as VWS/UIS.|$|R
5000|$|Non-silent <b>Windows</b> <b>system</b> {{software}} installations, including driver installations, OS {{patches and}} <b>Windows</b> <b>system</b> tools, cannot {{be converted into}} MSI packages. This technological limitation is common {{for all types of}} installation repackaging solutions.|$|R
5000|$|GLX (initialism for [...] "OpenGL Extension to the X Window System") is an {{extension}} to the X <b>Window</b> <b>System</b> core protocol providing an interface between OpenGL and the X <b>Window</b> <b>System</b> as well as extensions to OpenGL itself. It enables programs wishing to use OpenGL to do so within a window provided by the X <b>Window</b> <b>System.</b> GLX distinguishes two [...] "states": indirect state and direct state.|$|R
5000|$|... and [...] {{refer to}} the same program, though [...] invokes the text-based version, while [...] will invoke an X <b>Window</b> <b>System</b> based {{interface}} if possible; however, if [...] determines that X <b>Window</b> <b>System</b> capabilities are not present, it will present the text-based version instead of failing. Determination of X <b>Window</b> <b>System</b> capabilities is typically performed by checking {{for the existence of}} the [...] variable.|$|R
5000|$|In January 1997, the {{responsibility}} for the X <b>Window</b> <b>System</b> was transferred to The Open Group from the defunct X Consortium. In 1999, X.Org was formed to manage the X <b>Window</b> <b>System,</b> with management services provided by The Open Group. The X.Org members made a number of releases up to and including X11R6.8 while The Open Group provided management services. In 2004, X.Org and The Open Group worked together to establish the newly formed X.Org Foundation who then took control of the x.org domain name, and the stewardship of the X <b>Window</b> <b>System.</b> (See the history of the X <b>Window</b> <b>System.)</b> ...|$|R
50|$|CLIM {{has been}} {{designed}} to be portable across different Common Lisp implementations and different <b>window</b> <b>systems.</b> It uses a reflective architecture for its <b>window</b> <b>system</b> interface. CLIM supports, like Dynamic Windows, so-called Presentations.|$|R
5000|$|... xbiff {{is a small}} utility for the X <b>Window</b> <b>System</b> {{that shows}} a mailbox with its flag raised {{whenever}} the user has new e-mail. It is included in almost every X <b>Window</b> <b>System.</b>|$|R
50|$|XEmbed {{allows the}} nesting of one {{application}} inside another application's <b>window</b> on <b>systems</b> using X <b>Window</b> <b>System.</b>|$|R
50|$|Mike McMahon {{designed}} and implemented the New <b>Window</b> <b>System</b> for the MIT Lisp Machine in 1980 together with Howard Cannon. The <b>window</b> <b>system</b> was implemented using the Flavors object-oriented extension to Lisp Machine Lisp.|$|R
50|$|Traditionally, the X <b>Window</b> <b>System</b> has {{lagged behind}} other <b>windowing</b> <b>systems</b> in adding purely eye candy or {{aesthetic}} features, such as window translucency. This has encouraged developers to develop kludges {{to overcome this}} limitation.|$|R
40|$|Multimedia and {{advanced}} real-time systems integrate {{a variety of}} applications and media types in one environment, {{many of which have}} timing properties which are not supported by current <b>window</b> <b>systems</b> running in multitasking environments. This paper discusses several key aspects to designing <b>window</b> <b>systems</b> which support continuous media and other real-time applications. These design considerations were used to construct ARTIFACT, a <b>window</b> <b>system</b> designed to investigate issues in building real-time <b>window</b> <b>systems.</b> Several of the behaviors of a prototype implementation of ARTIFACT are described, along with preliminary scheduling models and avenues for further research. Keywords: real-time systems, operating <b>system</b> support, <b>window</b> <b>systems,</b> multimedia support, scheduling theory 1. Introduction Multimedia systems integrate a variety of media types into a unified display environment. Some media types, such as text and static graphics, have been in use for quite some time. Other types, su [...] ...|$|R
50|$|In computing, Fresco (formerly {{known as}} Berlin) was a <b>windowing</b> <b>system</b> {{intended}} {{as a replacement for}} the X <b>Window</b> <b>System.</b> It was free software, licensed {{under the terms of the}} GNU Lesser General Public License (LGPL).|$|R
50|$|In {{computer}} <b>windowing</b> <b>systems,</b> {{the painting}} of information to the screen is driven by expose events which drive the display code at the last possible moment. By doing this, <b>windowing</b> <b>systems</b> avoid computing unnecessary display content updates.|$|R
5000|$|... wmgr (window manager) was {{the default}} window manager for Apollo Computers AEGIS and Domain/OS. Unlike window {{managers}} for the X <b>Window</b> <b>System</b> wmgr is {{integrated with the}} operating <b>systems</b> own <b>windowing</b> <b>system</b> known as DM (Display Manager).|$|R
40|$|Shared <b>window</b> <b>systems</b> {{have become}} a popular vehicle for {{supporting}} distributed, synchronous collaboration. At present they are difficult to build and they support limited paradigms of multi-user interaction with shared applications. We believe this difficulty {{is largely due to}} the inverted nature of the client/server architecture of most distributed <b>window</b> <b>systems.</b> The architecture is inverted {{in the sense that the}} user is nearer the server than the client; this hampers attempts to share windows. By comparing the traditional client/server architecture of distributed file systems with the inverted architecture of distributed <b>window</b> <b>systems</b> we argue that it is possible to develop <b>window</b> <b>systems</b> where the user is nearer <b>window</b> <b>system</b> clients than servers, and that this architecture greatly facilitates the sharing of windows among users. Introduction A cursory comparison of the architecture of a typical distributed file system (DFS) (Figure 1) with the architecture of a typical distribut [...] ...|$|R
