37|10000|Public
50|$|The {{technical}} specification is {{designed so that}} implementations can meet the stringent requirements of communications applications, like high throughput, low latency, scalability, availability and software portability. Furthermore, it allows software developers to write robust components as it integrates the ACID <b>properties</b> <b>of</b> <b>transactions</b> into the programming model.|$|E
50|$|Autocommit mode, in theory, incurs per-statement {{transaction}} overhead, having often undesirable {{performance or}} resource utilization impact. Nonetheless, in {{systems such as}} Microsoft SQL Server, as well as connection technologies such as ODBC and Microsoft OLE DB, autocommit mode is the default for all statements that change data, {{in order to ensure}} that individual statements will conform to the ACID (atomicity-consistency-isolation-durability) <b>properties</b> <b>of</b> <b>transactions.</b>|$|E
5000|$|Transactions are key {{operations}} in traditional databases. A typical RDBMS supports all 4 <b>properties</b> <b>of</b> <b>transactions</b> (ACID): Atomicity, Consistency, Isolation, and Durability. Transactions in Hive {{were introduced in}} Hive 0.13 but were only limited to the partition level. [...] Only in the recent version of Hive 0.14 were these functions fully added to support complete ACID properties. This is because Hadoop does not support row level updates over specific partitions. These partitioned data are immutable and a new table with updated values has to be created. Hive 0.14 and later provides different row level transactions such as INSERT, DELETE and UPDATE. Enabling INSERT, UPDATE, DELETE transactions require setting appropriate values for configuration properties such as , , and [...]|$|E
50|$|In some databases, {{changes made}} by the nested {{transaction}} are not seen by the 'host' transaction until the nested transaction is committed. According to some, this follows from the isolation <b>property</b> <b>of</b> <b>transactions.</b>|$|R
50|$|Serializability {{is used to}} {{keep the}} data in the data item in a {{consistent}} state. Serializability is a <b>property</b> <b>of</b> a <b>transaction</b> schedule (history). It relates to the isolation <b>property</b> <b>of</b> a database <b>transaction.</b>|$|R
40|$|Object-oriented {{programming}} languages provide transaction {{behavior by}} means of library classes. In enterprise level programming, transactions are provided as an external feature, not available in standalone programs. This paper introduces transactions as a first-class programming concept, using the atomicity <b>property</b> <b>of</b> <b>transactions</b> to keep the program in a consistent state. Program execution can go wrong, leading to exceptional results and leaving objects possibly in an inconsistent state and as such compromising {{the consistency of the}} entire application. In this paper we primarily focus on the atomicity <b>property</b> <b>of</b> <b>transactions</b> and show that the expressiveness of the programming language is enhanced. This results in programs that are easier to read, and moreover more robust and easier to maintain. The need for boilerplate code, now necessary to handle exceptional cases, is reduced. status: publishe...|$|R
50|$|Firebird {{inherited}} the storage architecture of Interbase. To ensure the ACID <b>properties</b> <b>of</b> <b>transactions,</b> the database engine keeps {{different versions of}} each record changed by the active users in the database. When the transactions are committed, the last version of every changed record is marked as the definitive. If transactions are rolled back, the database engine keeps the mark on the original record versions, leaving them untouched. As a result, Firebird disk writes are very reduced compared to databases that use the traditional transaction log architecture. Writing transactions does not prevent reading and vice versa, because each one sees {{its own version of}} the database. The tradeoff is that some maintenance (“sweeping”) is required {{from time to time to}} clean up old record versions and free disk space.|$|E
30|$|This section {{describes}} the fundamental concepts, definitions and <b>properties</b> <b>of</b> <b>transactions</b> which are {{implemented in the}} proposed transaction processing systems.|$|E
40|$|The {{advent of}} {{multicore}} processors has {{renewed interest in}} the idea of incorporating transactions into the programming model used to write parallel programs. This approach, known as transactional memory, offers an alternative, and hopefully better, way to coordinate concurrent threads. The ACI(atomicity, consistency, isolation) <b>properties</b> <b>of</b> <b>transactions</b> provide a foundation to ensure that concurrent reads and writes of shared data do not produce inconsistent or incorrect results. At a higher level, a computation wrapped in a transaction executes atomically - either it completes successfullyan...|$|E
40|$|We {{introduce}} different {{mobile network}} applications and show to which degree the concept <b>of</b> database <b>transactions</b> is required within the applications. We show <b>properties</b> <b>of</b> <b>transaction</b> processing and explain which properties {{are important for}} each of the mobile applications. Furthermore, we discuss open questions regarding transaction processing in mobile networks and identify open problems for further research...|$|R
5000|$|Lack {{of direct}} {{supporting}} evidence for stabilizing (volatility-reducing) <b>properties</b> <b>of</b> Tobin-style <b>transaction</b> taxes in econometric research is acknowledged {{by some of}} the Tobin tax supporters: ...|$|R
50|$|A {{database}} transaction, by definition, must be atomic, consistent, {{isolated and}} durable. Database practitioners often refer to these <b>properties</b> <b>of</b> database <b>transactions</b> using the acronym ACID.|$|R
40|$|Software Transactional Memory (STM) {{has made}} great {{advances}} towards acceptance into mainstream programming by promising a programming model that greatly reduces {{the complexity of}} writing concurrent programs. Unfortunately, the mechanisms in current STM implementations that enforce the fundamental <b>properties</b> <b>of</b> <b>transactions</b> — atomicity, consistency, and isolation — also introduce considerable performance overhead. This performance impact can be so significant that in practice, programmers are tempted to leverage their knowledge of a specific application to carefully bypass STM calls and instead access shared memory directly. While this technique can be very effective in improving performance, it breaks the consistency and isolation <b>properties</b> <b>of</b> <b>transactions,</b> which have to be handled manually by the programmer for the specific application. It also tends to break another desirable property of transactions: composability. In this paper, we identify the composability problem and propose two STM system extensions to provide transaction composability {{in the presence of}} direct shared memory reads by transactions. Our proposed extensions give the programmer a similar level of flexibility and performance when optimizing the STM application as the existing practices, while preserving composability. We evaluate our extensions on several benchmarks on a 16 -way SMP. The results show that our extensions provide performance competitive with hand-optimized non-composable techniques, while still maintaining transactional composability...|$|E
40|$|This article {{provides}} a testable theory to predict financial vertical integration for a small, but industrially important, class of vertical firm relations. The most important {{difference between this}} and earlier theories of vertical integration is that by combining two consistent theories, we predict both the types of coordination and product flow functions between two units and their financial relations. The financial integration theory is based on Williamson's theory (1975) of market failures, and the <b>properties</b> <b>of</b> <b>transactions</b> theory is based on Weitzman's theory (1975) {{of the differences between}} price and quantity controls in central planning. ...|$|E
40|$|Relaxing the {{isolation}} requirements on transactions leads to systems in which transactions can now co-operate to achieve distributed goals. However {{in the absence}} of isolation {{it is not easy to}} understand the desired behaviour of transactional systems, or the extent to which the other standard ACID <b>properties</b> <b>of</b> <b>transactions</b> can be maintained: atomicity, consistency and durability. In this talk I will give an overview of some recent work in this area, outlining semantic theories for a process calculus which has been augmented by a new construct for co-operating transactions...|$|E
50|$|There are two Procureurs {{for each}} Parish and their {{duty is to}} act as public trustees, {{maintaining}} an oversight of Parish finances and represent the Parish along with the Connétable in respect <b>of</b> <b>property</b> <b>transactions</b> <b>of</b> the Parish (if so authorised {{by a vote of}} the Parish Assembly).|$|R
50|$|ISO/IEC 7813 is an {{international}} standard codified by the International Organization for Standardization and International Electrotechnical Commission that defines <b>properties</b> <b>of</b> financial <b>transaction</b> cards, such as ATM or credit cards.|$|R
5000|$|... 1843 - Geometrical <b>properties</b> <b>of</b> certain surfaces, <b>Transactions</b> <b>of</b> the Dublin University Philosophical Society, Vol. I, pp. 57-63, 1843 ...|$|R
40|$|Conversations in service-oriented {{computation}} {{are frequently}} long running. In such a setting, traditional ACID <b>properties</b> <b>of</b> <b>transactions</b> cannot be reasonably implemented, and compensation mechanisms seem to provide convenient techniques to, at least, approximate them. In this paper, we investigate the representation {{and analysis of}} structured compensating transactions within a process calculus model, by embedding in the Conversation Calculus certain structured compensation programming abstractions inspired by the ones proposed by Butler, Ferreira, and Hoare. We prove the correctness of the embedding after developing a general notion of stateful model for structured compensations and related results, and showing that the embedding induces such a model. ...|$|E
30|$|We {{implement}} the transaction {{model in the}} MongoDB {{in such a way}} that fully enforces the ACID properties and with a strong consistency (i.e., N = W). However, implementing ACID transactions is complex as MongoDB does not provide support for such transactions. Our approach is to implement transactions as Multi-Key transactions [7] using the Snapshot Isolation technique [30]. Snapshot Isolation is an optimistic concurrency control technique which allows for higher concurrency. A multi-key transaction is an execution of a cloud application that involves multiple data key items and comprises different operations. A multi-key transaction provides transitions between consistent states of the shared data and follows the ACID <b>properties</b> <b>of</b> <b>transactions.</b>|$|E
40|$|As technololcal {{advances}} {{are made}} in software and hardware, the feasibility of accessing information "any time, anywhere" is becoming a reality. In a mobile computing environment, a potentially large number of mobile and fixed users may simultaneously access shared data; therefore, {{there is a need}} to provide a means to allow concurrent management of transactions. Specific characteristics of mobile environments make traditional transaction management techniques no longer appropriate. This is due to a fact that the ACID <b>properties</b> <b>of</b> <b>transactions</b> are not simply followed, in particular the atomicity property. Thus, transaction management models adopting weaker forms of atomicity are needed. EThOS - Electronic Theses Online ServiceGBUnited Kingdo...|$|E
40|$|We {{investigate}} the correlation <b>properties</b> <b>of</b> <b>transaction</b> {{data from the}} New York Stock Exchange. The trading activity f(t) of each stock displays a crossover from weaker to stronger correlations at time scales 60 - 390 minutes. In both regimes, the Hurst exponent H depends logarithmically on the liquidity of the stock, measured by the mean traded value per minute. All multiscaling exponents tau(q) display a similar liquidity dependence, which clearly indicates {{the lack of a}} universal form assumed by other studies. The origin of this behavior is both the long memory in the frequency and the size <b>of</b> consecutive <b>transactions.</b> ...|$|R
40|$|This paper studies obstruction-free {{software}} transactional memory systems (OFTMs). These {{systems are}} appealing, for they combine the atomicity <b>property</b> <b>of</b> <b>transactions</b> with a liveness property that ensures the commitment <b>of</b> every <b>transaction</b> that eventually encounters no contention. We precisely define OFTMs and establish two <b>of</b> their fundamental <b>properties.</b> First, we {{prove that the}} consensus number of such systems is 2. This indicates that OFTMs cannot be implemented with plain read/write shared memory, on the one hand, but, on the other hand, do not require powerful universal objects, such as compare-and-swap. Second, we prove that OFTMs cannot ensure disjoint-access-parallelism (in a strict sense). This may result in artificial “hot spots ” and thus limit the performance of OFTMs. ...|$|R
40|$|Multidatabases {{are being}} {{actively}} researched {{as a relatively}} new area in which many aspects are not yet fully understood. This area <b>of</b> <b>transaction</b> management in multidatabase systems still has many unresolved problems. The problem areas which this dissertation addresses are classification of multidatabase systems, global concurrency control, correctness criterion in a multidatabase environment, global deadlock detection, atomic commitment and crash recovery. A core group of research addressing these problems was identified and studied. The dissertation contributes to the multidatabase transaction management topic by introducing an alternative classification method for such multiple database systems; assessing existing research into transaction management schemes and based on this assessment, proposes a transaction processing model founded on the optimal <b>properties</b> <b>of</b> <b>transaction</b> management identified {{during the course of}} this research. ComputingM. Sc. (Computer Science...|$|R
40|$|Abstract. Conversations in service-oriented {{computation}} {{are frequently}} long running. In such a setting, traditional ACID <b>properties</b> <b>of</b> <b>transactions</b> cannot be reasonably implemented, and compensation mechanisms seem to provide convenient techniques to, at least, approximate them. In this paper, we investigate the representation {{and analysis of}} structured compensating transactions within a process calculus model, by embedding in the Conversation Calculus certain structured compensation programming abstractions inspired by the ones proposed by Butler, Ferreira, and Hoare. We prove the correctness of the embedding after developing a general notion of stateful model for structured compensations and related results, and showing that the embedding induces such a model. ...|$|E
40|$|Abstract: Nature-related {{transactions}} are typical for agriculture, horticulture, fishery and for-estry which interact frequently with natural systems. This interaction represents {{a source of}} enforcement problems and transaction costs {{in the context of}} governing transactions. Institu-tional analysis frameworks used in agricultural economics should consider the particular <b>properties</b> <b>of</b> <b>transactions</b> involving natural systems. For ordering nature-related transactions, we propose a heuristic framework based on two dimensions: ‘modularity and decomposabil-ity of structures ’ and ‘functional interdependence of processes’. It serves {{as a starting point for}} establishing a typology ranging from ‘atomistic-isolated transactions ’ to ‘complex-interconnected transactions’. The complex process of institutionalising such transactions is decomposed into conceptual categories by means of a ‘transaction-interdependence cycle’...|$|E
40|$|A {{distinctive}} {{property of}} relational database systems {{is the ability}} to perform data updates and queries in atomic blocks called transactions, with the well known ACID properties. To date, the ability of systems performing reasoning to maintain the ACID properties, even over data held within a relational database, has been largely ignored. This article studies an approach to reasoning over data from OWL 2 RL ontologies held in a relational database, where the ACID <b>properties</b> <b>of</b> <b>transactions</b> are maintained. Taking an incremental approach to maintaining materialised views of the result of reasoning, the approach is demonstrated to support a query and reasoning performance comparable to or better than other OWL reasoning systems, yet adding the important benefit of supporting transactions...|$|E
40|$|Current cluster {{architectures}} {{provide the}} ideal environment to run federations of main-memory database systems (FMMDBs). In FMMDBs, data {{resides in the}} main memory of the federation servers, significantly improving performance by avoiding I/O during the execution of read operations. To maximize the performance <b>of</b> update <b>transactions</b> as well, some applications recur to deferred disk writes. This means that update transactions commit before their modifications are written on stable storage and durability must be ensured outside the database. While deferred disk writes in centralized MMDBs relax the durability <b>property</b> <b>of</b> <b>transactions</b> only, in FMMDBs transaction atomicity may be also violated in case of failures. We address this issue {{from the perspective of}} log-based rollback-recovery in distributed systems and provide an efficient solution to the problem...|$|R
40|$|In {{recent years}} {{a large number}} of {{macroeconomic}} rationing models with smooth CES transaction functions have been estimated. The widely used CES transaction functions with three arguments are often claimed to be derivable (as approximate relationships) from an assumption of lognormally distributed demands and supplies. One objective {{of this paper is to}} point out that the reasoning offered in the literature for this claim is not very clear or rigorous. Another, and more constructive, objective is to analyse and discuss in detail the derivation and <b>properties</b> <b>of</b> the CES <b>transaction</b> functions. Basic assumptions under- lying the CES transaction functions are illuminated on the basis of a rather general description of the aggregation problem in models with both goods and labour markets, and general <b>properties</b> <b>of</b> <b>transaction</b> functions based on "multiplicative distributional assumptions" are analysed. Several new results concerning the exact derivation <b>of</b> the CES <b>transaction</b> functions on the basis of the Weibull distribution are shown. The quality <b>of</b> the CES <b>transaction</b> functions as approximate relationships given lognormally distributed demands and supplies is discussed. Finally it is shown that the CES transaction functions have reasonable properties. ...|$|R
50|$|Atomicity {{does not}} behave {{completely}} orthogonally {{with regard to}} the other ACID <b>properties</b> <b>of</b> the <b>transactions.</b> For example, isolation relies on atomicity to roll back changes in the event of isolation failures such as deadlock; consistency also relies on rollback {{in the event of a}} consistency-violation by an illegal transaction. Finally, atomicity itself relies on durability to ensure the atomicity <b>of</b> <b>transactions</b> even in the face of external failures.|$|R
40|$|Speed {{improvements}} in today’s processors {{have largely been}} delivered {{in the form of}} multiple cores, increasing the importance of abstractions that ease parallel programming. Software transactional memory (STM) addresses many of the complications of concurrency by providing a simple and composable model for safe access to shared data structures. Software transactions extend a language with an atomic primitive that declares that the effects of a block of code should not be interleaved with actions executing concurrently on other threads. Adding barriers to shared memory accesses provides atomicity, consistency and isolation. Strongly isolated STMs preserve the safety <b>properties</b> <b>of</b> <b>transactions</b> for all memory operations in a program, not just those inside an atomic block. Isolation barriers are added to nontransactional loads and stores in such a system to prevent thos...|$|E
40|$|The {{coordination}} of distributed {{services and the}} integration of data repositories that are maintained by autonomous distributed databases requires flexible transaction management. Recently numerous advanced transaction models have been proposed that extend traditional transaction models by releasing {{one or more of}} the classical ACID (atomicity, consistency, integrity, durability) <b>properties</b> <b>of</b> <b>transactions.</b> Advanced transaction processing requires a notation for the specification, a high-level communication mechanism to control the traffic between the different sites as well as a flexible scheduling mechanism. In previous work we have shown how our parallel logic based coordination language V PL can serve as transaction specification language and support reliable communication. The main concern of this paper is to demonstrate that the V PL control constructs for AND/OR concurrency can be employed directly for the scheduling of compensatable and non-compensatable distributed transaction [...] ...|$|E
40|$|INTRODUCTION Current {{databases}} need {{logging and}} recovery {{to maintain the}} correctness <b>properties</b> <b>of</b> <b>transactions</b> and consistency of the database under failures. Also, logging and recovery have tremendous performance implications. While {{there has been a}} lot of work that deals with logging and recovery algorithms for traditional disk resident databases ([1, 2, 3, 4, 5]) and Main Memory Databases (MMDB) ([6, 7]), researchers have not systematically explored the issue of logging and recovery in Real-Time Databases (RTDB). In fact, there is a need 109 110 REAL-TIME DATABASE SYSTEMS: ARCHITECTURE AND TECHNIQUES for designing new algorithms for logging and recovery in RTDBs because the sequential nature of logging and the lack of time and priority cognizance during recovery are not in tune with the priority oriented and preemptive nature of activities in RTDBs. This chapter motivates the need to do logging and recovery differently in Real-Time Databa...|$|E
40|$|In this article, {{we discuss}} the {{fundamentals}} of distributed DBMS technology. We address the data distribution and architectural design issues {{as well as the}} algorithms that need to be implemented to provide the basic DBMS functions such as query processing, concurrency control, reliability, and replication control. Glossary Atomicity: The <b>property</b> <b>of</b> <b>transaction</b> processing whereby either all the operations <b>of</b> a <b>transaction</b> are executed or none of them are (all-or-nothing). Client/server architecture: A distributed/parallel DBMS architecture where a set of cli-ent machines with limited functionality access a set of servers which manage data. Concurrency control algorithm: Algorithms that synchronize the operations <b>of</b> concur-rent <b>transactions</b> that execute on a shared database. Distributed database management system: A database management system that man-ages a database that is distributed across the nodes of a computer network and makes this distribution transparent to the users. ...|$|R
50|$|Clerk of Court: The {{responsibility}} of the {{clerk of the court}} is to maintain court records and supervise registration <b>of</b> <b>property</b> <b>transactions.</b>|$|R
5000|$|Jim Gray defined <b>properties</b> <b>of</b> a {{reliable}} <b>transaction</b> {{system in the}} late 1970s under the acronym ACID [...] - [...] atomicity, consistency, isolation, and durability.|$|R
