1|10000|Public
40|$|The use {{of types}} {{to control the}} {{behavior}} of processes in the pi-calculus is a long known and well established technique. The idea was first introduced by Pierce and Sangiorgi in their seminal work on the subject [9], and is best illustrated by their motivating example: S = (νs) !d〈s〉|!s(x). print〈x 〉 C = d(x). x 〈 j〉 S is a print spooler serving requests from a private channel s that it communicates to its clients via the public channel d. C is one such client, that receives s and uses it to <b>print</b> <b>the</b> <b>job</b> j. While {{the intention of the}} specification is clear, reasoning on its properties is subtler. For instance, given the initial configuration S|C, can we prove that the jobs sent by C are eventually received and printed? Stated in more formal terms: is there a proof of the following equation...|$|E
50|$|The HP ePrint Public Print Locations service {{maintains}} {{a database of}} public print providers. Each provider, upon receiving a <b>print</b> request, renders <b>the</b> <b>print</b> data accordingly and sends <b>the</b> <b>print</b> data stream (PCL or Postscript) to a destination print queue. To retrieve <b>the</b> <b>print</b> <b>job,</b> <b>the</b> user goes to the printer location kiosk and types the authorization code to release and <b>print</b> <b>the</b> <b>print</b> <b>job(s).</b>|$|R
50|$|A hellbox is a {{receptacle}} where {{cast metal}} sorts are thrown after <b>printing.</b> <b>The</b> <b>job</b> of sorting <b>the</b> type from the hellbox {{and putting it}} back into <b>the</b> <b>job</b> case {{was given to the}} apprentice, known as a printer's devil. Later, when continuous casting or hot metal typesetting machines such as the Linotype and Monotype became popular, the hellbox was used for storing discarded or broken type that were melted down and recast.|$|R
50|$|Within <b>the</b> {{commercial}} <b>printing</b> industry, <b>the</b> <b>job</b> of stripping involves arranging {{and joining}} film negatives {{as part of}} the process of preparing <b>printing</b> plates. Because <b>the</b> industry has largely moved to digital processes, <b>the</b> <b>job</b> of stripping has become rare.|$|R
50|$|Transaction print {{jobs are}} {{different}} from 'publishing' <b>print</b> <b>jobs</b> in that <b>the</b> <b>print</b> controller does not know when <b>the</b> <b>job</b> will end when it starts. A transactional print job may involve a hundred, a thousand, or a few million impressions. Many digital printing system's controllers are designed to ingest <b>the</b> entire <b>job,</b> arrange its resources according {{to the size of}} <b>the</b> <b>job</b> and then begin <b>printing</b> <b>the</b> <b>job</b> last page first so that what is produced is a 'book' with the user seeing the first page first. This 'publishing' model obviously does not work for 'transaction' printing and a controller using a different internal model for jobs must be used.|$|R
5000|$|Speed: The user has to {{wait for}} <b>the</b> <b>job</b> to be copied and {{processed}} from <b>the</b> moment <b>the</b> <b>print</b> <b>job</b> is pulled.|$|R
5000|$|Documents printed via Google Cloud Print {{are sent}} to Google's servers for {{transmission}} to the printer. Google explains, [...] "Google also keeps a copy of each document you send for printing - but only for so long as <b>the</b> <b>printing</b> <b>job</b> is active and not complete. We {{have to do this}} to make sure your document gets <b>printed.</b> Once <b>the</b> <b>job</b> is complete, <b>the</b> document is deleted from our servers...Documents you send to print are your personal information and are kept strictly confidential. Google does not access <b>the</b> documents you <b>print</b> for any purpose other than to improve printing." ...|$|R
5000|$|Strock's {{coverage}} of the Battle of Buna-Gona was initially published by Life on February 15 and 22, 1943, within a month of the battle's conclusion on January 22. It included pictures of U.S. soldiers on the battlefield and images of dead Japanese soldiers. But images that Strock took of dead American GIs on the battlefield were not published because the U.S Office of Censorship prohibited their use. Life editorialized that [...] "we think that occasional pictures of Americans who fall in action should be <b>printed.</b> <b>The</b> <b>job</b> of men like Strock is to bring the war back to us, so that we who are thousands of miles removed from the dangers {{and the smell of}} death may know what is at stake." ...|$|R
50|$|In {{commercial}} <b>printing</b> <b>the</b> term is used, in {{line with}} the meaning of the Latin word, for final approval by a customer or his agent, perhaps after review of a test printing, for carrying out <b>the</b> <b>printing</b> <b>job.</b>|$|R
50|$|Based on {{the idea}} of the sharing economy, Princh is {{building}} a global network of printers. Via a smartphone or web app, users can locate a printer nearby, get directions to go there and print and pay for <b>the</b> <b>print</b> <b>job.</b> <b>The</b> solution is available as native mobile apps for Android and iOS, as well as on web and desktop solutions for businesses and libraries. The app connects a network of printer owners and users around the world. Princh supports all types of printable files.|$|R
40|$|Distribution of <b>printed</b> {{materials}} involves <b>the</b> {{movement of}} product from the production site {{to an internal}} (e. g., warehouse) or external (e. g., customer) location. Key issues in physical distribution include cost, materials handling, storage, and safety (Cummings 2 ̆ 6 Chhita, 2004 b). Following printing and binding, printed materials are sometimes entered directly into a distribution channel to be delivered to the ultimate reader or user. Printed materials frequently are warehoused for later distribution. This traditional workflow is known as print-and-distribute (Lamparter, 1998; Cost, 2005). A new workflow reverses these steps and distributes a job in electronic format to a remotely located print site for reproduction. This workflow {{has been described as}} “print’s great paradigm shift,” or, distribute-and-print. CAP Ventures, a market research and strategic consulting firm for the digital imaging and document solutions industry, defines distribute-and-print as “electronically distributing a file and then physically <b>printing</b> <b>the</b> <b>job</b> near <b>the</b> point of final delivery” (Miley, 2003) ...|$|R
50|$|Single-sided {{printers}} {{can print}} {{both sides of}} the paper by manually removing and turning over a stack of sheets after one side is printed; however, the user has to manually turn <b>the</b> <b>print</b> <b>job</b> over and re-initialize <b>the</b> <b>printing</b> of <b>the</b> document, with care to ensure that the order and orientation is correct.|$|R
40|$|This CIP 4 JDF Interoperability Conformance Specification (ICS) {{defines the}} {{interoperability}} requirements for JDF Sheet-Fed Offset Printing. This ICS defines the Conformance Requirements for an {{implementation of a}} JDF Device that consumes Job Tickets for sheet-fed offset <b>printing,</b> and returns <b>the</b> <b>Job</b> Tickets. This ICS defines tw...|$|R
50|$|For schools, clubs, colleges, {{political}} campaigns and other short-run <b>print</b> <b>jobs,</b> <b>the</b> Risograph bridges {{the gap between}} a standard photocopier (which is cheaper up to about 50 copies) and using a commercial printer (cheaper over about 10,000 copies).|$|R
50|$|Risographs have {{typically}} had interchangeable colour inks and drums allowing for printing in different colours or using spot colour in one <b>print</b> <b>job.</b> <b>The</b> Riso MZ series models have two ink drums, thereby allowing two colours to be printed in one pass.|$|R
50|$|Reuse of {{resources}} solves {{only part of}} the problem. Ensuring that all the required resources are available on the printer is another big problem. In PPML this problem is solved by allowing references to resources via URLs (uniform resource locator). Now the printer can retrieve the resource via the URL if it doesn't have that particular resource yet. This eliminates the need to send all the needed resources along with <b>the</b> <b>print</b> <b>job.</b> <b>The</b> printer will simply retrieve those resources that it needs on the fly. If it already has the resource in its cache it does need not retrieve the resource. This works {{in the same way as}} a browser that gains speed by loading (parts of) a webpage from its cache.|$|R
50|$|The CUPS {{scheduler}} implements Internet Printing Protocol (IPP) over HTTP/1.1. A {{helper application}} (cups-lpd) converts Line Printer Daemon protocol (LPD) requests to IPP. The scheduler {{also provides a}} web-based interface for managing <b>print</b> <b>jobs,</b> <b>the</b> configuration of the server, and for documentation about CUPS itself.|$|R
50|$|Many {{machines}} now use box-like semi-enclosed {{frames of}} either laser-cut plywood, plastic or pressed steel sheet. These are cheap, rigid {{and can also}} be used as the basis for an enclosed print volume, allowing temperature control within it to control warping of <b>the</b> <b>print</b> <b>job.</b>|$|R
50|$|In 1864, the House of Representatives and the Senate {{approved}} {{the publication of}} {{an updated version of}} Lanman's Dictionary of Congress by the recently established Government <b>Printing</b> Office. In <b>the</b> late 1860s Congress offered Benjamin Perley Poore, a journalist and clerk of the Senate Committee on <b>Printing</b> and Records, <b>the</b> <b>job</b> of preparing a Congressional Directory with biographical sketches and the kind of reference information found in the Dictionary of Congress.|$|R
5000|$|Orthodox book Russians {{abroad in}} the first half of the 20th century : the history of <b>the</b> <b>printing</b> {{fraternity}} <b>Job</b> Pochaev, Volyn - Carpathians, 1903 - 1944 [...] Monograph. M [...]: Publisher [...] "Pashkov House", 2010 [...] 272 p., Ill. [...] Scientific Publication ...|$|R
40|$|Information {{technology}} holds tremendous {{potential to}} help consumers and firms make more sustainable choices by providing information at key decision points. As one example, {{there are a}} number of software programs that help calculate and summarize environmental metrics for various products and processes. Surprisingly, while many printers are moving into the IT arena, the technology has not been fully utilized. For the most part, there is a lack of knowledge on the part of the consumer on the sustainability impacts of their communication decisions. Thus, this paper outlines a decision tool, presented to the consumer as they make a print decision, which estimates the energy consumption of printing a given document by analyzing the user’s requirements for <b>the</b> <b>print</b> <b>job,</b> <b>the</b> printer selected and the corresponding life-cycle criteria for these elements...|$|R
5000|$|In early {{versions}} of DOS, printing was accomplished using the [...] command: the file to be printed was [...] "copied" [...] to the file representing <b>the</b> <b>print</b> device. Control {{returned to the}} user when <b>the</b> <b>print</b> <b>job</b> completed. [...] Beginning with DOS 2.0, the [...] command was included to allow basic <b>print</b> spooling: <b>the</b> ability to continue to use <b>the</b> computer while <b>printing</b> occurred in <b>the</b> background, {{and the ability to}} create a queue of jobs to be printed.|$|R
5000|$|After the CUPS {{system has}} {{assigned}} <b>the</b> <b>print</b> <b>job</b> to <b>the</b> scheduler, it is {{passed to the}} CUPS filter system. This converts the data to a format suitable for the printer. During start-up, the CUPS daemon loads two MIME databases: [...] that defines the known file types that CUPS can accept data for, and [...] that defines the programs that process each particular MIME type.|$|R
50|$|The design {{problem was}} that a single Job class was used by {{almost all of the}} tasks. Whenever a print job or a {{stapling}} job needed to be performed, a call was made to <b>the</b> <b>Job</b> class. This resulted in a 'fat' class with multitudes of methods specific to a variety of different clients. Because of this design, a staple job would know about all the methods of <b>the</b> <b>print</b> <b>job,</b> even though there was no use for them.|$|R
40|$|In a high-mix low-volume {{production}} environment of {{printed circuit board}} assembly, the production efficiency depends strongly on the organization of <b>the</b> <b>printing</b> <b>jobs.</b> <b>The</b> present study discusses the problem of arranging <b>the</b> <b>jobs</b> of one machine into groups {{in such a way}} that <b>the</b> <b>job</b> change costs will be minimized when the costs depend on the number of <b>the</b> <b>job</b> groups. This problem is motivated by the practical case where the group utilizes a common machine setup and the number of setup occasions is the dominating factor in the production line optimization. The problem is well-known and hard to solve to optimality. We solve a real-life problem instance by three different methods: efficient heuristics, 0 / 1 -programming, and constraint optimization. The first two of these are standard approaches in the field, whereas the constraint approach is more unknown. The heuristics approach turns out to be very efficient: algorithms are fast and produce optimal or nearly optimal groupings at least in the problem instances from a particular {{production environment}}. 0 / 1 programming gives optimal solutions to small problem instances and it therefore serves as a benchmark to approximative methods. The constraint approach is able to solve moderately large problem instances to optimality and makes it possible to easily change the problem formulation one can add new constraints or modify the details of the existing ones flexibly...|$|R
40|$|Abstract. This paper {{considers}} {{the problem of}} scheduling production activities in a real-life <b>printing</b> industry. <b>The</b> problem is modeled as a two-stage flexible flow shop problem with minimization of the makespan {{and the number of}} tardy <b>jobs</b> as <b>the</b> objective. Discrete event simulation has been performed using Extend simulation software to depict the real time model of <b>the</b> <b>print</b> industry. <b>The</b> setup time, processing time and completion time of the prioritized customers were obtained and validated with the real time industry inputs. After validation, the output of simulation data has been used to perform preliminary scheduling experiments. This paper deals with the comparison of three scheduling algorithms such as earliest completion time first (ECT), Earliest start time first (EST) and PCmax algorithm for the calculation of maximum occupancy time of various <b>printing</b> <b>jobs.</b> <b>The</b> results obtained using PC max shows the reduced make span of <b>the</b> <b>printing</b> <b>jobs</b> compared to other two algorithms with approximately 12 % improvement in minimizing the makespan. Hence the P||Cmax scheduling method can be implemented in the industry to minimize the maximum occupancy time of a particular printing machine. This motivates the actual implementation of the proposed ILP (PCmax scheduling) procedure for <b>the</b> <b>printing</b> industry...|$|R
50|$|Not {{including}} {{resources in}} a <b>print</b> <b>job</b> leads to <b>the</b> potential problem of version control. PPML solves {{this problem by}} allowing the producer of <b>the</b> <b>print</b> <b>job</b> to specify a checksum for each resource that is referenced. A checksum is a large number that is calculated from {{the contents of a}} resource. By comparing a given checksum against the checksum of the resource in the cache the printer can check that it has the correct version of the resource.|$|R
5000|$|Also, the [...] "Online" [...] button is {{actually}} a toggle switch, such that if the printer is already online, pressing Online makes the printer go offline {{and can be used}} to stop a runaway print job. Pressing Shift-Reset will then reset the printer, clearing the remainder of the unwanted document from the printer's memory, so that it will not continue to print it when brought back on line. (Before resetting the printer, it is necessary to make the computer stop sending data for <b>the</b> <b>print</b> <b>job</b> to <b>the</b> printer, if it hasn't already finished sending that <b>job,</b> through <b>the</b> computer's software. Otherwise, when the printer is put back online, it will start receiving <b>the</b> <b>job</b> from somewhere in the middle, which will likely cause the same runaway problem to recur.) ...|$|R
2500|$|Karel Marang {{approached}} Joh. Enschedé, an old {{and respected}} Dutch <b>printing</b> firm for <b>the</b> <b>job.</b> [...] Reviewing <b>the</b> attached sample notes, {{they said they were}} the work of Waterlow and Sons Limited of London, a British printer almost as old and eminent. [...] Since the contract insisted that the new notes be identical to the existing issue, the Dutch firm suggested that Marang take <b>the</b> <b>job</b> to Waterlow since they already had the plates and it was almost impossible to reproduce plates exactly. [...] On 4 December 1924, Marang approached Sir William Waterlow with a letter of introduction from the Joh. Enschedé company. [...] Marang explained that for political reasons the contract required utmost discretion and promised that Waterlow would shortly receive appropriate documentation from Lisbon.|$|R
2500|$|Google Cloud Print is a Google {{service that}} helps any {{application}} on any device to print on any printer. While the cloud provides virtually any connected device with information access, {{the task of}} [...] "developing and maintaining print subsystems for every combination of hardware and operating system—from desktops to netbooks to mobile devices—simply isn't feasible." [...] The cloud service requires installation {{of a piece of}} software called proxy, as part of the Chrome OS. The proxy registers the printer with the service, manages <b>the</b> <b>print</b> <b>jobs,</b> provides <b>the</b> printer driver functionality, and gives status alerts for each job.|$|R
50|$|It was {{required}} {{in the early part}} of the 18th century in many of the American colonies that every family have a bible. Most families went by the colony law requirements until the beginning of the American Revolutionary War. Up until this time bibles came from Europe but could no longer be supplied because of hazards of the war. The Continental Congress obtained bids from Collins for producing copies of the bible for the colony families. He published 5000 copies of a quarto edition family bible consisting of 925 pages. Collins was paid about four Spanish dollars per bible for <b>the</b> <b>printing.</b> It was <b>the</b> largest publishing <b>job</b> every done in America up to that point. Three thousand bibles were pre-sold with a 25% deposit even before <b>the</b> <b>print</b> <b>job</b> was started.|$|R
40|$|This {{research}} data set includes accelerometer sensory data collected during a print job on Ultimaker 2 3 D printer. We used ViFDAQ {{which is a}} mobile and wireless data-acquisition system developed at the VIRTUAL VEHICLE to capture the data. Sensors were installed on printer head (x,y,z achses) and on printing plate (x,y,z achses). During <b>the</b> <b>print</b> <b>job,</b> we {{conducted a series of}} events (e. g. vibrations on the printer plate, table [...] .), to influence the quality of <b>the</b> <b>printed</b> object. We then applied a series of machine learning algorithms in order to detect the disturbances. A research paper is in production. ViFDAQ Info: [URL]...|$|R
5000|$|With the Princh app, {{users will}} be able to locate their nearest printer. In Denmark, there are {{currently}} around 500 <b>printing</b> locations. Once <b>the</b> user is at the printer, the user chooses the document to be printed out and [...] "opens it" [...] (iOS) or [...] "shares it" [...] (Android) with Princh. At this point, the document will be uploaded to the Princh cloud. The user then selects the desired nearby printer entering the printer ID number or scanning the QR-code located on top of the printer, pays with their credit card or other preferred payment option and <b>the</b> <b>print</b> <b>job</b> is carried out.|$|R
50|$|CUPS {{provides}} a mechanism that allows print jobs {{to be sent}} to printers in a standard fashion. The print-data goes to a scheduler which sends jobs to a filter system that converts <b>the</b> <b>print</b> <b>job</b> into a format the printer will understand. The filter system then passes the data on to a backend—a special filter that sends print data to a device or network connection. The system makes extensive use of PostScript and rasterization of data to convert the data into a format suitable for the destination printer.|$|R
50|$|The HP ePrint Enterprise server accepts print jobs {{using two}} primary protocols: http/https and SMTP. Once the HP ePrint Enterprise private cloud {{printing}} service accepts a print job message, it converts <b>the</b> <b>print</b> <b>job</b> into an appropriate printer language (PCL or Postscript) via an internal rendering process and submits {{it to the}} printer or MFP via TCP port 9100. HP ePrint Enterprise server is capable of processing multiple print jobs simultaneously by using a message queue service {{with the ability to}} track the progress of each individual print job.|$|R
50|$|Xerox's {{printing}} language, Interpress, was a binary-formatted {{standard for}} controlling laser printers. The designers of this language, John Warnock and Chuck Geschke, later left Xerox PARC to start Adobe Systems. Before leaving, they realized {{the difficulty of}} specifying a binary print language, where functions to serialize <b>the</b> <b>print</b> <b>job</b> were cumbersome and which {{made it difficult to}} debug errant <b>printing</b> <b>jobs.</b> To realize <b>the</b> value of specifying both a programmable and easily debug-able print job in ASCII, Warnock and Geschke created the Postscript language as one of their first products at Adobe.|$|R
