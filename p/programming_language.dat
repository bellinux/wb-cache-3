10000|10000|Public
5|$|By 1970, COBOL {{had become}} {{the most widely used}} <b>programming</b> <b>language</b> in the world.|$|E
5|$|CoffeeScript is a <b>programming</b> <b>language</b> that cross-compiles to JavaScript; it has Python-inspired syntax.|$|E
5|$|Swift is a <b>programming</b> <b>language</b> {{invented by}} Apple; {{it has some}} Python-inspired syntax.|$|E
50|$|Non-English-based <b>programming</b> <b>languages</b> are {{computer}} <b>programming</b> <b>languages</b> that, unlike better-known <b>programming</b> <b>languages,</b> {{do not use}} keywords taken from, or inspired by, the English vocabulary.|$|R
40|$|Abstract This paper {{presents}} an abstract model for <b>programming</b> <b>languages</b> with algebraic approach, and proposes {{a concept of}} abstraction for <b>programming</b> <b>languages.</b> Then the paper describes the semantics of inheritance, extension and shielding of <b>programming</b> <b>languages</b> and the semantics of language family to reveal connections between <b>programming</b> <b>languages</b> in language family. ...|$|R
50|$|Fourth-generation <b>programming</b> <b>languages</b> (4GL) are a {{computer}} <b>programming</b> <b>languages</b> which aim {{to provide a}} higher level of abstraction of the internal computer hardware details than 3GLs. Fifth generation <b>programming</b> <b>languages</b> (5GL) are <b>programming</b> <b>languages</b> based on solving problems using constraints given to the program, rather than using an algorithm written by a programmer.|$|R
5|$|The <b>Programming</b> <b>Language</b> Committee also liaised with ECMA and the Japanese COBOL Standard committee.|$|E
5|$|The {{language}} {{is intended to}} be a simple, modern, general-purpose, object-oriented <b>programming</b> <b>language.</b>|$|E
5|$|A {{concurrent}} <b>programming</b> <b>language</b> called Alef {{was available}} {{in the first two}} editions, but was then dropped for maintenance reasons and replaced by a threading library for C.|$|E
5000|$|Essentials of <b>Programming</b> <b>Languages</b> (EoPL), a {{book for}} <b>Programming</b> <b>Languages</b> courses ...|$|R
50|$|Although not implemented, it {{has proved}} very {{influential}} {{in the development of}} <b>programming</b> <b>languages,</b> especially functional <b>programming</b> <b>languages</b> such as SASL, Miranda, ML, Haskell and their successors, and dataflow <b>programming</b> <b>languages</b> like Lucid.|$|R
50|$|Anarchy Golf (online): Most {{well-known}} <b>programming</b> <b>languages</b> {{including several}} esoteric <b>programming</b> <b>languages.</b>|$|R
5|$|Multiple {{versions}} of the game were created for the FOCAL and FOCAL-69 languages, but in 1973 David H. Ahl released BASIC Computer Games, a book of games written in the BASIC <b>programming</b> <b>language</b> and the first million-selling computer book, which included his version of The Sumer Game. This expanded version of the game, titled Hamurabi, quickly became the more prominent version due to the popularity of both {{the book and the}} <b>programming</b> <b>language.</b> Hamurabi influenced many later strategy and simulation games and is also an antecedent to the city-building genre.|$|E
5|$|C# is a general-purpose, {{object-oriented}} <b>programming</b> <b>language.</b> Its development team {{is led by}} Anders Hejlsberg. The {{most recent}} version is C# 7.1, which was released in 2017 along with Visual Studio 2017 Update 3.|$|E
5|$|Early PDP-1 users wrote {{programming}} software {{including an}} assembler {{translated from the}} TX-0 over one weekend in 1961. Kotok later wrote an interpreter for the Lisp <b>programming</b> <b>language</b> in TECO macros.|$|E
5000|$|Prolog {{gave rise}} to the <b>programming</b> <b>languages</b> ALF, Fril, Gödel, Mercury, Oz, Ciao, Visual Prolog, XSB, and λProlog, as well as a variety of [...] {{concurrent}} logic <b>programming</b> <b>languages,</b> constraint logic <b>programming</b> <b>languages</b> and datalog.|$|R
40|$|The {{field of}} quantum <b>programming</b> <b>languages</b> is {{developing}} rapidly {{and there is}} a surprisingly large literature. Research in this area includes the design of <b>programming</b> <b>languages</b> for quantum computing, the application of established semantic and logical techniques to the foundations of quantum mechanics, and the design of compilers for quantum <b>programming</b> <b>languages.</b> This article justifies the study of quantum <b>programming</b> <b>languages,</b> presents the basics of quantum computing, surveys the literature in quantum <b>programming</b> <b>languages,</b> and indicates directions for future research...|$|R
2500|$|Prolog {{gave rise}} to the <b>programming</b> <b>languages</b> [...] ALF, Fril, Gödel, Mercury, Oz, Ciao, Visual Prolog, XSB, and λProlog, as well as a variety of [...] {{concurrent}} logic <b>programming</b> <b>languages,</b> constraint logic <b>programming</b> <b>languages</b> and datalog.|$|R
5|$|In the C++ <b>programming</b> <b>language,</b> decltype is {{a keyword}} used to query {{the type of}} an expression. Introduced in C++11, its primary {{intended}} use is in generic programming, where it is often difficult, or even impossible, to express types that depend on template parameters.|$|E
5|$|Independently of the ANSI committee, the CODASYL <b>Programming</b> <b>Language</b> Committee {{was working}} on {{improving}} the language. They described new versions in 1968, 1969, 1970 and 1973, including changes such as new inter-program communication, debugging and file merging facilities as well as improved string-handling and library inclusion features.|$|E
5|$|Python {{has been}} awarded a TIOBE <b>Programming</b> <b>Language</b> of the Year award twice (in 2007 and 2010), which {{is given to the}} {{language}} with the greatest growth in popularity {{over the course of a}} year, as measured by the TIOBE index.|$|E
5000|$|ISO/IEC TR 24772:2013 Information {{technology}} — <b>Programming</b> <b>languages</b> — Guidance to avoiding vulnerabilities in <b>programming</b> <b>languages</b> through {{language selection}} and use ...|$|R
50|$|In broad strokes, <b>programming</b> <b>languages</b> {{divide into}} <b>programming</b> {{paradigms}} and a classification by intended domain of use, with general-purpose <b>programming</b> <b>languages</b> distinguished from domain-specific <b>programming</b> <b>languages.</b> Traditionally, <b>programming</b> <b>languages</b> have {{been regarded as}} describing computation in terms of imperative sentences, i.e. issuing commands. These are generally called imperative <b>programming</b> <b>languages.</b> A great deal of research in <b>programming</b> <b>languages</b> has been aimed at blurring the distinction between a program {{as a set of}} instructions and a program as an assertion about the desired answer, which is the main feature of declarative programming. More refined paradigms include procedural programming, object-oriented programming, functional programming, and logic programming; some languages are hybrids of paradigms or multi-paradigmatic. An assembly language {{is not so much a}} paradigm as a direct model of an underlying machine architecture. By purpose, <b>programming</b> <b>languages</b> might be considered general purpose, system <b>programming</b> <b>languages,</b> scripting languages, domain-specific languages, or concurrent/distributed languages (or a combination of these). Some general purpose languages were designed largely with educational goals.|$|R
40|$|AbstractThe {{procedure}} of systematization <b>programming</b> <b>languages</b> on the TRIZ-evolution base is {{considered in the}} report. The {{procedure of}} systematization <b>programming</b> <b>languages</b> is illustrated on {{the example of the}} <b>programming</b> <b>languages</b> paradigms development. The algorithm of presentation TRIZ-evolution map [1] of the <b>programming</b> <b>languages</b> paradigms is described. The complete analysis of programming paradigms as specified in the evolution of <b>programming</b> <b>languages</b> allowed to determinate the progressing and inheritance paradigms of <b>programming</b> <b>languages.</b> The major contradictions had been arisen in the modern <b>programming</b> <b>languages</b> is established [2]. With the using of TRIZ tools it is derived solutions of contradictions and defined set of the properties, which will be included to the new programming paradigm. The Imperative Paradigm, the Object-Oriented Paradigm, the Functional Paradigm, and the Logic Programming Paradigm are considered in the report. It is determined the principal contradictions which became the “moving force” of each new paradigm, solution of this contradictions on the base of TRIZ tools [3]. The evolution of <b>programming</b> <b>languages</b> by the criterion “from contradiction to contradiction” is formed. The TRIZ-evolutionary map on the base of TRIZ-tools which is used for transition on development programming paradigm is formed. The present approach usage allows forecast the appearance of new programming paradigms, new <b>programming</b> <b>languages</b> and new methods of programming. It becomes possible to determine the tendency of <b>programming</b> <b>languages</b> development and prediction of the next languages generations...|$|R
5|$|The <b>Programming</b> <b>Language</b> Committee was not well-known, however. The vice-president, William Rinehuls, {{complained that}} two-thirds of the COBOL {{community}} did not know of the committee's existence. It was also poor, lacking the funds to make public documents, such as minutes of meetings and change proposals, freely available.|$|E
5|$|The {{avionics}} software {{incorporates the}} concept of open architecture. Instead of the military-optimised Ada <b>programming</b> <b>language,</b> the software is written using the popular C++ <b>programming</b> <b>language,</b> enabling {{the use of the}} numerous civilian programmers available. The aircraft also includes a health and usage monitoring system, and automatic test equipment. The flight control system (FCS) comprises conventional controls with stability augmentation in the yaw and roll axis and a digital fly-by-wire (FBW) system in the pitch axis. The leading edge slats/flaps and trailing edge flaps are automatically adjusted during manoeuvring to increase turning performance. The FCS of serial production aircraft reportedly have a digital quadruplex (quad-redundant) FBW system in the pitch axis and a duplex (dual-redundant) FBW system in the roll and yaw axis.|$|E
5|$|During the 1950s, he {{programmed}} one of {{the earliest}} computers, the IBM 650, and with Ruth A. Weiss developed the L2 <b>programming</b> <b>language,</b> {{one of the}} earliest computer languages, in 1956. It was widely used within the Bell Labs, and also by external users, who knew it as Bell 2. It was superseded by Fortran when the Bell Labs' IBM 650 were replaced by the IBM 704 in 1957.|$|E
50|$|One can {{single out}} two main groups of quantum {{programming}} languages: imperative quantum <b>programming</b> <b>languages</b> and functional quantum <b>programming</b> <b>languages.</b>|$|R
50|$|The table shows a {{comparison}} of functional <b>programming</b> <b>languages</b> which compares various features and designs of different functional <b>programming</b> <b>languages.</b>|$|R
50|$|This {{comparison}} of <b>programming</b> <b>languages</b> (syntax) compares {{the features of}} language syntax (format) for over 50 various computer <b>programming</b> <b>languages.</b>|$|R
5|$|In the <b>programming</b> <b>language</b> AspectJ, pointcuts, join points, and the modularized code {{are defined}} in an aspect block {{similar to that}} of Java classes. Classes are defined using Java syntax. The weaving process {{consists}} of executing the aspect advice to produce only a set of generated classes that have the aspect implementation code woven into it.|$|E
5|$|Methods in <b>programming</b> <b>language</b> are {{the members}} of a class in a project, some methods have {{signatures}} and some don't have signatures. Methods can be void or can return something like string, integer, double, decimal, float and bool. If a method is void it means that the method does not return any data type.|$|E
5|$|Microsoft's early {{products}} were different variants of Microsoft BASIC {{which was the}} dominant <b>programming</b> <b>language</b> in late 1970s and early 1980s home computers such as Apple II (Applesoft BASIC) and Commodore 64 (Commodore BASIC), and were also provided with early versions of the IBM PC as the IBM Cassette BASIC.|$|E
50|$|Concurrent <b>programming</b> <b>{{language}}s</b> are <b>programming</b> <b>languages</b> {{that use}} language constructs for concurrency. These constructs may involve multi-threading, support for distributed computing, message passing, shared resources (including shared memory) or futures and promises. Such languages are sometimes described as Concurrency Oriented Languages or Concurrency Oriented <b>Programming</b> <b>Languages</b> (COPL).|$|R
50|$|Very {{high-level}} <b>programming</b> <b>languages</b> {{are usually}} domain-specific languages, {{limited to a}} very specific application, purpose, or type of task, and they are often scripting languages (especially extension languages), controlling a specific environment. For this reason, very high-level <b>programming</b> <b>languages</b> are {{often referred to as}} goal-oriented <b>programming</b> <b>languages.</b>|$|R
5000|$|Some {{object-oriented}} databases {{are designed}} to work well with object-oriented <b>programming</b> <b>languages</b> such as Delphi, Ruby, Python, Perl, Java, C#, Visual Basic [...]NET, C++, Objective-C and Smalltalk; others such as JADE have their own <b>programming</b> <b>languages.</b> OODBMSs use exactly the same model as object-oriented <b>programming</b> <b>languages.</b>|$|R
