3|5|Public
40|$|We {{consider}} {{in this paper}} some programming competition problems (which are near to some problems of ACM competitions) of the following subjects: we can make their solution using both Prolog and a classical <b>procedure-oriented</b> <b>language.</b> Moreover, the considered problems are selected that their solution in Prolog and in a classical <b>procedure-oriented</b> <b>language</b> are similar - i. e., in other words, they use the same working mechanism, the same approach to constructing recursive functions etc. However, the main goal {{of this paper is}} to demonstrate, that the solution of most of these problems by the students is a step to design the real problems of artificial intellegence...|$|E
40|$|Abstract. We {{consider}} {{in this paper}} some programming competition problems (which are near to some problems of ACM competitions) of the following subjects: we can make their solution using both Prolog and a classical <b>procedure-oriented</b> <b>language.</b> Moreover, the considered problems are selected that their solution in Prolog and in a classical <b>procedure-oriented</b> <b>language</b> are similar – i. e., in other words, they use the same working mechanism, the same approach to constructing recursive functions etc. However, the main goal {{of this paper is}} to demonstrate, that the solution of most of these problems by the students is a step to design the real problems of artificial intellegence. Key words: competition programming problems, prolog, procedure-oriented languages. 1...|$|E
40|$|AbstractThis paper {{describes}} a uniprocessor implementation of Flat Concurrent Prolog, {{based on an}} abstract machine and a compiler for it. The machine instruction set includes the functionality necessary to implement efficiently the parallel semantics of the language. In addition, the design includes a novel approach to the integration of a module system into a language. Both the compiler and the emulator for the abstract machine have been implemented and {{form the basis of}} Logix, a practical programming environment for Flat Concurrent Prolog. Its performance suggests that a process-oriented language need not be less efficient then a <b>procedure-oriented</b> <b>language,</b> even on a uniprocessor. In particular, it shows that a process queue and process spawning can be implemented as effectively as an activation stack and procedure calling, and thus debunks the “expensive-process-spawn myth”...|$|E
40|$|Since the {{introduction}} of Smalltalk, the object-oriented approach towards the organization of data and programs has become popular. In this paper, the possibilities of exploiting <b>procedure-oriented</b> <b>languages</b> to allow an object-oriented style of programming are analysed. Although the two approaches are apparently dissimilar, a family of <b>procedure-oriented</b> <b>languages</b> is described which allows {{a high degree of}} freedom in programming and does not appear to restrain the programmer within the <b>procedure-oriented</b> scheme. Popular <b>languages</b> of this family are ML and PS-Algol. For such languages, a technique is developed which enables an efficient implementation of object-oriented features, such as the subclassing form of inheritance provided by Smalltalk- 80 and Simula...|$|R
50|$|TRAC is, like APL or LISP, an {{expression}} oriented language (in contrast to more typical <b>procedure-oriented</b> <b>languages),</b> but unlike APL, it completely lacks operators. In most respects, it {{is a case}} of pure functional programming.|$|R
40|$|The {{creation}} of machine-readable databases and computer-based services {{has always been}} predicated {{on the availability of}} appropriate hardware and software. During the first generation (roughly 1949 to the late 1950 s), very little happened because the machines were slow, had relatively little storage capacity, and were extremely expensive. In addition, most programming was done at the machine level a tedious process. Second generation computers (from the late 1950 s through the early 1960 s) used transistors instead of vacuum tubes, which meant they were faster, more reliable, held more data, and could be afforded by institutions smaller than the federal government. To facilitate programming, a number of higher-level languages were developed during the early years. FORTRAN was designed primarily for scientific and engineering applications; ALGOL, the first of the so-called <b>procedure-oriented</b> <b>languages,</b> provided an internationally recognized structure for program documentation; LISP eventually proved valuable in studying artificial intelligence; and COMIT, the first language designed specifically for text processing, was used in computational linguistics and early studies in information retrieval. Higher-level languages greatly facilitated software development, because programs using them were shorter, easier to understand, and could be used on a variety of computers, unlike programs written at the machine level. It was also during this period, in 1958, that Hans Peter Luhn of IBM described the mechanized production of keyword indexes as well as an automated current-awareness service called SDI (Selective Dissemination of Information). published or submitted for publicatio...|$|R
40|$|A robot {{simulation}} system, {{has been}} developed to perform automation and robotics system design studies. The system uses a <b>procedure-oriented</b> solid modeling <b>language</b> to produce {{a model of the}} robotic mechanism. The simulator generates the kinematics, inverse kinematics, dynamics, control, and real-time graphic simulations needed to evaluate the performance of the model. Simulation examples are presented, including simulation of the Space Station and the design of telerobotics for the Orbital Maneuvering Vehicle...|$|R
40|$|Basic {{computer}} {{training is}} an important part of the fundamental training for engineers in each application area. The article shows that the purpose of such training has been always the formation of the basic theoretical concepts and practical skills to solve problems by programming with computers. All the formation periods and the following improvement of basic computer training were analyzed by the example of the National Research University «Moscow Power Engineering Institute» (NRU MPEI). Special role of the structured programming technology is mentioned, the use of which allows you to effectively develop easy understood algorithms and computer programs with a minimal number of errors. Particular attention is drawn to the serious methodological support in the 80 th (the last century), the basic computer training of students by the Ministry of Higher Education of the USSR and the Research Institute of Higher School Problems. The important role of methodical councils of universities on the computer technology application to coordinate in those years the basic computer training at the University is mentioned. The article shows the new teaching methods of the main discipline with generally accepted today in Russia term “Informatics”. This method was developed in the National Research University «Moscow Power Engineering Institute» at the Applied Mathematics Department, providing the basic computer training of students in 1 – 2 semesters. This new teaching method has such a «reference point» as fundamental programming concepts «task – method of this task solution – algorithm for solving the task – computer program». The main tasks of the discipline of the basic computer training were defined: – formation of students’ formal logic, algorithmic thinking; – learning of modern technology of structured programming, providing efficient development of algorithms and computer programs; – formation of practical skills of designing algorithms of any complexity; – learning of <b>procedure-oriented</b> programming <b>languages.</b> The article analyzes some negative aspects, related to basic computer training and appeared in the last 15 – 20 years in the National Research University «Moscow Power Engineering Institute» and other higher technical educational universities of Russia, including: – subjective diluting effect, changing the purpose and content of basic computer training and replacement by the other, «unconvincing» in the content subjects; – lack of a unified program of discipline «Informatics» for higher technical educational institutions of Russia; – lack of understanding of the specificity of very intensive work of lecturers, conducting such training, and the underestimation of their labor; – insufficient current level of initial computer training for the secondary school graduates; – lack of methodological interaction of higher technical educational universities of Russia among themselves and with the secondary school on basic computer training. The article emphasizes that the basic computer training in engineering education in Russia will be in perspective realized in its classic historical sense of the word, if the qualified engineers, who are able to think logically and resolve efficiently any professional tasks, will be necessary for the country as before. </p...|$|R

