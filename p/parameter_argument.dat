3|139|Public
40|$|Abstract: In {{the present}} paper {{branching}} of solutions of operator equations of the specific kind (which are applied in quantum transport theory) in complete metrizable spaces is investigated. The possibility of increasing Fredholm operator kernel dimension for post-critical values of <b>parameter</b> <b>argument</b> is analyzed. For the case of weakly continuous perturbations of this map local existence of two branches of equation which connected with summary operator is demonstrated. Note: Publication language:russia...|$|E
40|$|In {{the context}} of the Floquet theory, using a {{variation}} of <b>parameter</b> <b>argument,</b> we show that the logarithm of the monodromy of a real periodic Lie system with appropriate properties admits a splitting into two parts, called dynamic and geometric phases. The dynamic phase is intrinsic and linked to the Hamiltonian of a periodic linear Euler system on the co-algebra. The geometric phase is represented as a surface integral of the symplectic form of a co-adjoint orbit. Comment: (v 1) 15 pages. (v 2) 16 pages. Some typos corrected. References and further comments added. Final version to appear in J. Phys. A...|$|E
40|$|We propose an easy to {{implement}} method for making small sample parametric inference about {{the root of}} an estimating equation expressible as a quadratic form in normal random variables. It is based on saddlepoint approximations to {{the distribution of the}} estimating equation whose unique root is a parameter's maximum likelihood estimator (MLE), while substituting conditional MLEs for the remaining (nuisance) parameters. Monotoncity of the estimating equation in its <b>parameter</b> <b>argument</b> enables us to relate these approximations to those for the estimator of interest. The proposed method is equivalent to a parametric bootstrap percentile approach where Monte Carlo simulation is replaced by saddlepoint approximation. It finds applications in many areas of statistics including, nonlinear regression, time series analysis, inference on ratios of regression parameters in linear models and calibration. We demonstrate the method in the context of some classical examples from nonlinear regression models and ratios of regression parameter problems. Simulation results for these show that the proposed method, apart from being generally easier {{to implement}}, yields confidence intervals with lengths and coverage probabilities that compare favourably with those obtained from several competing methods proposed in the literature over the past half-century. Copyright (c) 2008 Board of the Foundation of the Scandinavian Journal of Statistics. ...|$|E
2500|$|... 3 is {{the actual}} <b>parameter</b> (the <b>argument)</b> for {{evaluation}} by the defined function; it is a given value (actual value) that is substituted for the formal parameter of the defined function. (In casual usage the terms <b>parameter</b> and <b>argument</b> might inadvertently be interchanged, and thereby used incorrectly.) ...|$|R
5000|$|SMTP Error - 501, an SMTP {{status code}} meaning Syntax error in <b>parameters</b> or <b>arguments</b> ...|$|R
50|$|Rust {{provides}} string interpolation via the std::fmt module, {{which is}} interfaced with through various macros such as format!, write!, and print!. These macros are converted into Rust source code at compile-time, whereby each argument interacts with a formatter. The formatter supports positional <b>parameters,</b> named <b>parameters,</b> <b>argument</b> types, and defining various formatting traits.The output {{of each of}} these will be: There are 4 apples and 3 bananas.|$|R
50|$|Because of the {{difference}} between <b>parameters</b> and <b>arguments,</b> it is possible to supply inappropriate arguments to a procedure. The call may supply too many or too few arguments; {{one or more of the}} arguments may be a wrong type; or arguments may be supplied in the wrong order. Any of these situations causes a mismatch between the <b>parameter</b> and <b>argument</b> lists, and the procedure will often return an unintended answer or generate a runtime error.|$|R
50|$|The exact {{mechanism}} for assigning <b>arguments</b> to <b>parameters,</b> called <b>argument</b> passing, {{depends upon the}} evaluation strategy used for that parameter (typically call by value), which may be specified using keywords.|$|R
5000|$|... the <b>arguments</b> (<b>parameter</b> values) {{passed to}} the routine (if any); ...|$|R
40|$|We {{present a}} {{computational}} model of usage-based learn-ing of verb argument structure in young children. The model integrates Bayesian classication and prediction {{to learn from}} utterances paired with appropriate seman-tic representations. The model balances item-based and class-based knowledge in language use, demonstrating appropriate word order generalizations, and recovery from overgeneralizations with no negative evidence or change in learning <b>parameters.</b> <b>Argument</b> Structure Acquisition Verb argument structure is a complex aspect of language {{for a child to}} master, as it requires learning the rela-tions of arguments to a verb, and how those arguments are mapped into valid expressions of the language. Chil...|$|R
5000|$|The <b>parameters</b> , <b>{{argument}}</b> count, and , argument vector, respectively {{give the}} number {{and values of the}} program's command-line arguments. The names of [...] and [...] may be any valid identifier in C, but it is common convention to use these names. In C++, the names are to be taken literally, and the [...] "void" [...] in the parameter list is to be omitted, if strict conformance is desired. Other platform-dependent formats are also allowed by the C and C++ standards, except that in C++ the return type must always be for example, Unix (though not POSIX.1) and Windows have a third argument giving the program's environment, otherwise accessible through [...] in : ...|$|R
50|$|This {{method is}} based on the use of {{rigidity}} constraint. Design a cost function, which considers the intrinsic <b>parameters</b> as <b>arguments</b> and the fundamental matrices as parameters. '''''' is defined as the fundamental matrix, ''''''and '''''' as intrinsic parameters matrices.|$|R
5000|$|The Jack {{function}} [...] of integer partition , <b>parameter</b> , andindefinitely many <b>arguments</b> [...] can be recursively {{defined as}} follows: ...|$|R
5000|$|Lillo-Martin, Diane (1991). Universal Grammar and American Sign Language: Setting the Null <b>Argument</b> <b>Parameters.</b> Dordrecht: Kluwer Academic Publishers.|$|R
25|$|These {{concepts}} {{are discussed in}} a more precise way in functional programming and its foundational disciplines, lambda calculus and combinatory logic. Terminology varies between languages; some computer languages such as C define <b>parameter</b> and <b>argument</b> as given here, while Eiffel uses an alternative convention.|$|R
5000|$|In the {{continuum}} limit, a→0, N→∞, while Na is held fixed. The canonical coordinates Qk devolve to the decoupled momentum modes of a scalar field, , whilst the location index [...] (not the displacement dynamical variable) becomes the <b>parameter</b> [...] <b>argument</b> of the scalar field, [...]|$|R
40|$|An Effort-length-complexity metrics {{model for}} {{software}} (Elc) based on measurement theory is introduced. The model {{is defined by}} e(p) = l(p) c(p), where p is any piece of software, e(p) the effort in developing it, l(p) its length, and c(p) its structural complexity. Rules for computing Elc for the basic structured constructs are given. These make Elc sensitive to sequencing, nesting and modularization. A Scheme function is supplied for computing e; l and c for any program or collection of programs given in form of flowgraphs. The tool may be callibrated to user's model of complexity by specifying some <b>parameters.</b> <b>Arguments</b> for the usability of Elc are supplied by deriving theoretical properties and by case studies. Keywords: Effort, length, stuctural complexity, hierarchical measure, software metrics, flowgraphs 1 Introduction One of the first software quality measures proposed is McCabe's cyclomatic complexity measure. As described by McCabe, {{the primary purpose of}} the measure is [...] ...|$|R
50|$|Uncurrying is {{the dual}} {{transformation}} to currying, {{and can be}} seen as a form of defunctionalization. It takes a function f whose return value is another function g, and yields a new function f′ that takes as <b>parameters</b> the <b>arguments</b> for both f and g, and returns, as a result, the application of f and subsequently, g, to those arguments. The process can be iterated.|$|R
50|$|Many {{languages}} in the C family (but not C itself, as of C11) allow a function to have default <b>parameters</b> or default <b>arguments,</b> {{that are used}} if the function is called with omitted parameter specifications.|$|R
2500|$|... partial {{parametrisation}} (aka Currying): {{creation of}} functions (with fewer parameters) by specification of some, {{but not all}} parameters for a call, e.g. a function logarithm of two <b>parameters,</b> base and <b>argument,</b> could be specialised to natural, binary or decadic log, ...|$|R
40|$|It {{is argued}} that, if a regular Hamiltonian is perturbed by {{a term that}} {{produces}} chaos, the onset of chaos is shifted towards larger values of the perturbation parameter if the unperturbed spectrum is degenerate and {{the lifting of the}} degeneracy is of second order in this <b>parameter.</b> The <b>argument</b> is based on the behaviour of the exceptional points of the full problem. Comment: RevTeX with 4 figs. available from the authors; to appear in Phys. Rev. ...|$|R
50|$|<b>Parameters</b> (command-line <b>arguments)</b> {{defined in}} the main {{procedures}} of all traditional AS/400 programs are hard coded lists that {{are made up of}} parameters that can be numeric, alphanumeric, boolean, etc. and the order in which parameters are passed is important. This is a stark difference from the Unix and DOS worlds where the parameter list in Unix shell scripts and C programs is a set or array of character pointers and more often than not the parameters are not positionally dependent.|$|R
30|$|However, to {{the best}} of our knowledge, no paper has {{considered}} the existence, multiplicity and nonexistence of positive solutions for fourth order impulsive differential equations with one-dimensional m-Laplacian, multiple <b>parameters</b> and deviating <b>arguments</b> till now; for example, see [26 – 30] and the references therein.|$|R
50|$|In Eiffel, {{the setup}} for type {{conversion}} {{is included in}} the class code, but then appears to happen as automatically as explicit type conversion in client code. The includes not just assignments but other types of attachments as well, such as <b>argument</b> (<b>parameter)</b> substitution.|$|R
5000|$|This {{ordinary}} {{differential equation}} (ODE) needs two initial conditions at, say, time [...] Denote the initial conditions by [...] and [...] where [...] and [...] are some <b>parameters.</b> The following <b>argument</b> {{shows that the}} isochrons for this system are here the straight lines [...]|$|R
40|$|We define an {{extension}} of the simply-typed lambda calculus where two different binding mechanisms, by position and by name, nicely coexist. In the former, as in standard lambda calculus, the matching betweeen <b>parameter</b> and <b>argument</b> is done on a positional basis, hence alpha-equivalence holds, whereas in the latter it is done on a nominal basis. The two mechanisms also respectively correspond to static binding, where the existence and type compatibility of the argument are checked at compile-time, and dynamic binding, where they are checked at runtime...|$|R
40|$|The paper {{presents}} the internal graph-constructive representation of parametrised geometry in a CAD system {{that supports the}} design of objects with variable topology. A constructive constraint solver is extended by adding two implicit constraints: ed (equal distance) and ea (equal angle). The necessity of supporting both constraints in a model with structural <b>parameters</b> is <b>argumented.</b> The basic solvable patterns involving these constraints and the forming and merging of circularly linked clusters is presented. The applicability of the constraint solving to hierarchically structured parametric objects is also shown with a practical example...|$|R
5000|$|Just as in {{standard}} mathematical usage, {{the argument is}} thus the actual input passed to a function, procedure, or routine, whereas the parameter is the variable inside {{the implementation of the}} subroutine. For example, if one defines the [...] subroutine as , then [...] are parameters, while if this is called as , then [...] are the arguments. Note that variables from the calling context can be arguments: if the subroutine is called as [...] then the variables [...] are the arguments, not only the values [...] See the <b>Parameters</b> and <b>arguments</b> section for more information.|$|R
40|$|Integral {{representations}} of hypergeometric and confluent hypergeometric functions with real <b>parameters</b> and complex <b>arguments</b> {{are used to}} approximate these functions by Gaussian quadrature. An analysis is given of the errors involved and of {{estimates of the number}} of Gauss points required to achieve any given accuracy. Numerical examples illustrate the theory...|$|R
25|$|When declaring a function, a {{programmer}} can specify {{for one or}} more parameters a default value. Doing so allows the parameters with defaults to optionally be omitted when the function is called, {{in which case the}} default arguments will be used. When a function is called with fewer arguments than there are declared <b>parameters,</b> explicit <b>arguments</b> are matched to parameters in left-to-right order, with any unmatched parameters {{at the end of the}} parameter list being assigned their default arguments. In many cases, specifying default arguments in a single function declaration is preferable to providing overloaded function definitions with different numbers of parameters.|$|R
40|$|We {{establish}} the inverse Lebedev expansion {{with respect to}} <b>parameters</b> and <b>arguments</b> of the modified Bessel functions for an arbitrary function from Hardy's space H 2,A, A> 0. This gives another version of the Fourier-integral-type theorem for the Lebedev transform. The result is generalized for a weighted Hardy space H⌢ 2,A≡H⌢ 2 ((−A,A);|Γ(1 +Rez+iτ) | 2 dτ), 0 <A< 1, of analytic functions f(z),z=Rez+iτ, in the strip |Rez|≤A. Boundedness and inversion properties of the Lebedev transformation from this space into the space L 2 (ℝ+;x− 1 dx) are considered. When Rez= 0, we derive the familiar Plancherel theorem for the Kontorovich-Lebedev transform...|$|R
50|$|When declaring a function, a {{programmer}} can specify {{for one or}} more parameters a default value. Doing so allows the parameters with defaults to optionally be omitted when the function is called, {{in which case the}} default arguments will be used. When a function is called with fewer arguments than there are declared <b>parameters,</b> explicit <b>arguments</b> are matched to parameters in left-to-right order, with any unmatched parameters {{at the end of the}} parameter list being assigned their default arguments. In many cases, specifying default arguments in a single function declaration is preferable to providing overloaded function definitions with different numbers of parameters.|$|R
5000|$|... xargs is {{a command}} on Unix and most Unix-like {{operating}} systems {{used to build}} and execute command lines from standard input. Commands such as [...] and [...] can accept the standard input as a <b>parameter,</b> or <b>argument</b> by using a pipe. However, others such as [...] and [...] disregard the standard input stream and rely solely on the arguments found after the command. Additionally, under the Linux kernel before version 2.6.23, and under many other Unix-like systems, arbitrarily long lists of parameters cannot be passed to a command, so [...] breaks the list of arguments into sublists small enough to be acceptable.|$|R
40|$|In this paper, some non{{existence}}, {{existence and}} multiplicity of positive solutions are established {{for a class}} of singular boundary value problem. The authors also obtain {{the relation between the}} existence of the solutions and the <b>parameter</b> λ. The <b>arguments</b> are based upon the fixed point index theory and the upper and lower solutions method...|$|R
40|$|ABSTRACT. Previous {{theories}} of glacier sliding {{are subject to}} the criticism that they are not properly formulated. Here we describe how the basal ice flow {{may be related to the}} bulk ice flow by means of the formal mathematical method of matched asymptotic expansions. A complete model of the basal sliding (involving coupled problems in ice, water film, and bedrock) may be rationally reduced by a dimensional analysis to a consideration of the ice flow only, and regelation may be neglected provided roughness is absent on the finest scales « c. I mm). If the viscosity is supposed to be independent of the moisture content, then complementary variational principles exist which allow bounds on the drag to be obtained. In particular, these determine the magnitude of the basal velocity in terms of two crucial dimensionless <b>parameters.</b> <b>Arguments</b> are presented as to why realistic sliding laws should be taken as continuous functions of the temperature, and a (major) consequence of this assumption is mentioned. Finally the effect of cavitation is discussed, via an (exact) leading-order solution of the ice flow in the particular case of a Newtonian fluid and a "small " bedrock slope. RESUME. Ulle approche mathtfmatique de la thtforie du glissement des glaciers. Les theories precedentes du glissement des glaciers sont sujettes a la critique de n'etre pas convenablement formulees. Nous decrivons ici comment l'ecoulement de la glace au fond peut et re relie a l'ecoulement d'ensemble de la masse de glace pa...|$|R
40|$|We {{formulate}} {{and discuss}} {{a number of}} conjectures on the ground state vectors of the XYZ-spin chains of odd length with periodic boundary conditions and a special choice of the Hamiltonian <b>parameters.</b> In particular, <b>arguments</b> for the validity of a sum rule for the components, which describes {{in a sense the}} degree of antiferromagneticity of the chain, are given. Comment: AMSLaTeX, 15 page...|$|R
