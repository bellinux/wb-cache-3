2|10000|Public
40|$|AbstractA prefix-free {{language}} is prime if it cannot be decomposed into a concatenation of two prefix-free languages. We {{show that we}} can check in polynomial time if a language generated by a simple context-free grammar is prime. Our algorithm computes a canonical representation of a simple language, converting its arbitrary simple grammar into <b>prime</b> <b>normal</b> <b>form</b> (PNF); a simple grammar is in PNF if all its nonterminals define primes. We also improve the complexity of testing the equivalence of simple grammars. The best previously known algorithm for this problem worked in O(n 13) time. We improve it to O(n 7 log 2 n) and O(n 5 polylogv) time, where n is the total size of the grammars involved, and v is {{the length of a}} shortest string derivable from a nonterminal, maximized over all nonterminals...|$|E
40|$|A prefix-free {{language}} is a prime if it cannot be decomposed into a concatenation of two prefix-free languages. We show that we can check in polynomial time if a language generated by a simple contextfree grammar is a prime. Our algorithm computes a canonical representation of a simple language, converting its arbitrary simple grammar into <b>Prime</b> <b>Normal</b> <b>Form</b> (PNF); a simple grammar is in PNF if all its nonterminals define primes. We also improve the complexity of testing the equivalence of simple grammars. The best previously known algorithm for this problem worked in O(n) time. We improve it to O(n n) and O(n polylog v) deterministic time, and O(n polylog n) randomized time, where n is the total size of the grammars involved, and v is {{the length of a}} shortest string derivable from a nonterminal, maximized over all nonterminals. Our improvement is based on a version of Caucal's algorithm from [1]...|$|E
40|$|Abstract. In this paper, {{we present}} a new <b>normal</b> <b>form</b> for concept {{expressions}} in the description logic ALC {{which is based on}} a recently introduced notion of prime implicate. We show that concepts in <b>prime</b> implicate <b>normal</b> <b>form</b> enjoy a number of desirable properties which make <b>prime</b> implicate <b>normal</b> <b>form</b> interesting from the viewpoint of knowledge compilation. In particular, we prove that subsumption between ALC concepts in <b>prime</b> implicate <b>normal</b> <b>form</b> can be carried out in polynomial time using a simple structural subsumption algorithm reminiscent of those used for less expressive description logics. We provide a sound and complete algorithm for putting concepts into <b>prime</b> implicate <b>normal</b> <b>form,</b> and we investigate the spatial complexity of this transformation, showing there to be an at most doubly-exponential blowup in concept size. At the end of the paper, we compare <b>prime</b> implicate <b>normal</b> <b>form</b> to two other <b>normal</b> <b>forms</b> for ALC that have been proposed in the literature, discussing the relative merits of the different approaches. Proofs of all results can be found in an accompanying technical report [1]. ...|$|R
40|$|In this paper, {{we present}} a <b>normal</b> <b>form</b> for concept expres-sions in the {{description}} logic ALC {{which is based on}} a re-cently introduced notion of prime implicate for the modal logic K. We show that concepts in prime implicate nor-mal form enjoy a number of desirable properties which make <b>prime</b> implicate <b>normal</b> <b>form</b> interesting from the viewpoint of knowledge compilation. In particular, we prove that sub-sumption between ALC concepts in <b>prime</b> implicate <b>normal</b> <b>form</b> can be carried out in polynomial time using a simple structural subsumption algorithm reminiscent of those used for less expressive description logics. Of course, in order to take advantage of these properties, we need a way to trans-form concepts into equivalent concepts in <b>prime</b> implicate <b>normal</b> <b>form.</b> We provide a sound and complete algorithm for putting concepts into <b>prime</b> implicate <b>normal</b> <b>form,</b> and we investigate the spatial complexity of this transformation, showing there to be an at most doubly-exponential blowup in concept length. At the end of the paper, we compare <b>prime</b> implicate <b>normal</b> <b>form</b> to two other <b>normal</b> <b>forms</b> for ALC, discussing the relative merits of the different approaches...|$|R
40|$|In this paper, {{we present}} a <b>normal</b> <b>form</b> for concept {{expressions}} in the description logic ALC {{which is based on}} a recently introduced notion of prime implicate for the modal logic K. We show that concepts in <b>prime</b> implicate <b>normal</b> <b>form</b> enjoy a number of interesting properties. For one thing, they do not contain any unnecessary atomic concepts or roles. Not only does this make the concept more readable but it also helps us to identify the parts of a concept which are relevant to a given subject matter. Another feature of concepts in <b>prime</b> implicate <b>normal</b> <b>form</b> is that they can be easily approximated over a sublanguage or up to a fixed depth. These operations may prove useful when a concept description is too large to be fully understood or when data needs to be exchanged between systems using different languages. Perhaps the most remarkable property of <b>prime</b> implicate <b>normal</b> <b>form</b> is that subsumption between ALC concepts in this form can be carried out in quadratic time using a simple structural subsumption algorithm reminiscent of those used for less expressive description logics. This property makes <b>prime</b> implicate <b>normal</b> <b>form</b> interesting for the purposes of knowledge compilation. Of course, in order to take advantage of all of these nice properties, we need a way to transform concepts into equivalent concepts in <b>prime</b> implicate <b>normal</b> <b>form.</b> We provide a sound and complete algorithm for putting concepts into <b>prime</b> implicate <b>normal</b> <b>form,</b> and we investigate the spatial complexity of this transformation, showing there to be an at most doubly-exponential blowup in concept size. At the end of the paper, we compare <b>prime</b> implicate <b>normal</b> <b>form</b> to two other <b>normal</b> <b>forms</b> for ALC concepts that have been proposed in the literature, discussing the relative merits of the different approaches. 1...|$|R
40|$|Abstract. In many applications, agents must reason {{about what}} other agents know, whether to {{coordinate}} {{with them or}} {{to come out on}} top in a competitive situation. However in general, reasoning in a multiagent epistemic logic such as Kn has high complexity. In this paper, we look at a restricted class of knowledge bases that are sets of modal literals. We call these proper epistemic knowledge bases (PEKBs). We show that after a PEKB has been put in <b>prime</b> implicate <b>normal</b> <b>form</b> (PINF), an efficient database-like query evaluation procedure can be used to check whether an arbitrary query is entailed by the PEKB. The evaluation procedure is always sound and sometimes complete. We also develop a procedure to convert a PEKB into PINF. As well, we extend our approach to deal with introspection. ...|$|R
5000|$|A head <b>normal</b> <b>form</b> is {{not always}} a <b>normal</b> <b>form,</b> because the applied {{arguments}} [...] need not be normal. However, the converse is true: any <b>normal</b> <b>form</b> is also a head <b>normal</b> <b>form.</b> In fact, the <b>normal</b> <b>forms</b> are exactly the head <b>normal</b> <b>forms</b> in which the subterms [...] are themselves <b>normal</b> <b>forms.</b> This gives an inductive syntactic description of <b>normal</b> <b>forms.</b>|$|R
50|$|The third <b>normal</b> <b>form,</b> Boyce-Codd <b>normal</b> <b>form,</b> fourth <b>normal</b> <b>form</b> {{and fifth}} <b>normal</b> <b>form</b> are special {{cases of the}} domain/key <b>normal</b> <b>form.</b> All have either functional, multi-valued or join {{dependencies}} that can be converted into (super)keys. The domains on those <b>normal</b> <b>forms</b> were unconstrained so all domain constraints are satisfied. However, transforming a higher <b>normal</b> <b>form</b> into domain/key <b>normal</b> <b>form</b> {{is not always a}} dependency-preserving transformation and therefore not always possible.|$|R
50|$|An {{arbitrary}} propositional formula {{may have}} a very complicated structure. It is often convenient to work with formulas that have simpler <b>forms,</b> known as <b>normal</b> <b>forms.</b> Some common <b>normal</b> <b>forms</b> include conjunctive <b>normal</b> <b>form</b> and disjunctive <b>normal</b> <b>form.</b> Any propositional formula {{can be reduced to}} its conjunctive or disjunctive <b>normal</b> <b>form.</b>|$|R
50|$|A formula in {{negation}} <b>normal</b> <b>form</b> can be {{put into}} the stronger conjunctive <b>normal</b> <b>form</b> or disjunctive <b>normal</b> <b>form</b> by applying distributivity.|$|R
40|$|A key {{is simple}} if it {{consists}} of a single attribute. It is shown that if a relation schema is in third <b>normal</b> <b>form</b> and every key is simple, then it is in projection-join <b>normal</b> <b>form</b> (sometimes called fifth <b>normal</b> <b>form),</b> the ultimate <b>normal</b> <b>form</b> with respect to projections and joins. Furthermore, it is shown that if a relation schema is in Boyce-Codd <b>normal</b> <b>form</b> and some key is simple, then it is in fourth <b>normal</b> <b>form</b> (but not necessarily projection-join <b>normal</b> <b>form).</b> These results give the database designer simple sufficient conditions, {{defined in terms of}} functional dependencies alone, that guarantee that the schema being designed is automatically in higher <b>normal</b> <b>forms...</b>|$|R
50|$|Relations are {{classified}} {{based upon the}} types of anomalies to which they're vulnerable. A database that's in the first <b>normal</b> <b>form</b> is vulnerable to all types of anomalies, while a database that's in the domain/key <b>normal</b> <b>form</b> has no modification anomalies. <b>Normal</b> <b>forms</b> are hierarchical in nature. That is, the lowest level is the first <b>normal</b> <b>form,</b> and the database cannot meet the requirements for higher level <b>normal</b> <b>forms</b> without first having met all {{the requirements of the}} lesser <b>normal</b> <b>forms.</b>|$|R
40|$|In {{this paper}} we {{introduce}} {{the class of}} additive <b>normal</b> <b>form</b> games, which is a subset of <b>normal</b> <b>form</b> games. In additive <b>normal</b> <b>form</b> games, the actions of each agent contribute some amount to the final payoff of all the agents. The contributions of the agents {{are assumed to be}} additive. We discuss the necessary and sufficient conditions for a <b>normal</b> <b>form</b> game to be an additive <b>normal</b> <b>form</b> game and show exactly how a <b>normal</b> <b>form</b> game may be converted to our additive representation...|$|R
50|$|It's {{much easier}} to build a {{database}} in domain/key <b>normal</b> <b>form</b> {{than it is to}} convert lesser databases which may contain numerous anomalies. However, successfully building a domain/key <b>normal</b> <b>form</b> database remains a difficult task, even for experienced database programmers. Thus, while the domain/key <b>normal</b> <b>form</b> eliminates the problems found in most databases, it tends to be the most costly <b>normal</b> <b>form</b> to achieve. However, failing to achieve the domain/key <b>normal</b> <b>form</b> may carry long-term, hidden costs due to anomalies which appear in databases adhering only to lower <b>normal</b> <b>forms</b> over time.|$|R
40|$|In logic, {{there are}} various <b>normal</b> <b>forms</b> for formulae; for example, {{disjunctive}} and conjunctive <b>normal</b> <b>form</b> for formulae of propositional logic or prenex <b>normal</b> <b>form</b> for formulae of predicate logic. There are algorithms for ‘reducing’ a given formula to a semantically equivalent formula in <b>normal</b> <b>form.</b> <b>Normal</b> <b>forms</b> are used {{in a variety of}} contexts including proofs of completeness, automated theorem proving, logic programming etc. In this paper, we develop a <b>normal</b> <b>form</b> for unitary Euler diagrams with shading. We give an algorithm for reducing a given Euler diagram to a semantically equivalent diagram in <b>normal</b> <b>form</b> and hence a decision procedure for determining whether two Euler diagrams are semantically equivalent. Potential applications of the <b>normal</b> <b>form</b> include clutter reduction and automated theorem proving in systems based on Euler diagrams...|$|R
40|$|In {{this paper}} {{the problem of}} finding a <b>normal</b> <b>form</b> of triangles and plane quadrilaterals up to {{similarity}} is considered. Several <b>normal</b> <b>forms</b> for triangles and a <b>normal</b> <b>form</b> for quadrilaterals of special case are described. <b>Normal</b> <b>forms</b> of simple plane objects such as triangles {{can be used in}} mathematics teaching...|$|R
40|$|A {{new type}} of dependency, which {{includes}} the well-known functional dependencies as a special case, is defined for relational databases. By using this concept, a new (“fourth”) <b>normal</b> <b>form</b> for relation schemata is defined. This fourth <b>normal</b> <b>form</b> is strictly stronger than Codd’s “im-proved third <b>normal</b> <b>form</b> ” (or “Boyce-Codd normal form”). It is shown that, every relation schema can be decomposed into a family of relation schemata in fourth <b>normal</b> <b>form</b> without loss of information (that is, the original relation {{can be obtained from}} the new relations by taking joins). Key words and phrases: database design, multivalued dependency, functional dependency, fourth <b>normal</b> <b>form,</b> 4 NF, third <b>normal</b> <b>form,</b> 3 NF, Boyce-Codd <b>normal</b> <b>form,</b> normalization, decomposition, relational databas...|$|R
40|$|<b>Normal</b> <b>forms</b> of Boolean {{functions}} {{allow to}} check whether two given Boolean expressions describe the same Boolean function. The disjunctive <b>normal</b> <b>form</b> (DNF) {{as well as}} the conjunctive <b>normal</b> <b>form</b> (CNF) are widely used. Sometimes an algebraic <b>normal</b> <b>form</b> is taken into account in order to compare or to evaluate given Boolean functions. The basic property of each <b>normal</b> <b>form</b> is the unique representation of the given Boolean function. The aim {{of this paper is to}} study whether there are other <b>normal</b> <b>forms</b> of Boolean functions which allow a more detailed exploration of properties of Boolean Functions. In order to do this we extend the theory of Boolean <b>normal</b> <b>forms</b> in several directions. ...|$|R
50|$|The first {{example is}} also in conjunctive <b>normal</b> <b>form</b> and the last two are in both conjunctive <b>normal</b> <b>form</b> and {{disjunctive}} <b>normal</b> <b>form,</b> but the second example is in neither.|$|R
40|$|In {{this paper}} we are {{concerned}} with the simplest <b>normal</b> <b>form</b> computation of a family of Hopf-zero vector fields without a first integral. This family of vector fields are the classical <b>normal</b> <b>forms</b> of a larger family of vector fields with Hopf-Zero singularity. Indeed, these are defined such that this family would be a Lie subalgebra for the space of all classical <b>normal</b> <b>form</b> vector fields with Hopf-Zero singularity. The simplest <b>normal</b> <b>forms</b> and simplest orbital <b>normal</b> <b>forms</b> of this family with non-zero quadratic part are computed. We also obtain the simplest parametric <b>normal</b> <b>form</b> of any non-degenerate perturbation of this family within the Lie subalgebra. The symmetry group of the simplest <b>normal</b> <b>forms</b> are also discussed. This is a part of our results in decomposing the <b>normal</b> <b>forms</b> of Hopf-Zero singular systems into systems with a first integral and nonconservative systems...|$|R
2500|$|Hermite <b>normal</b> <b>form</b> {{may also}} be used for solving systems of linear Diophantine equations. However, Hermite <b>normal</b> <b>form</b> does not {{directly}} provide the solutions; to get the solutions from the Hermite <b>normal</b> <b>form,</b> one has to successively solve several linear equations. Nevertheless, Richard Zippel wrote that the Smith <b>normal</b> <b>form</b> [...] "is somewhat more than is actually needed to solve linear diophantine equations. Instead of reducing the equation to diagonal form, we only need to make it triangular, which is called the Hermite <b>normal</b> <b>form.</b> The Hermite <b>normal</b> <b>form</b> is substantially easier to compute than the Smith normal form." ...|$|R
40|$|Abstract. Boolean {{circuits}} of polynomial {{size and}} poly-logarithmic depth are given for computing the Hermite and Smith <b>normal</b> <b>forms</b> of polynomial matrices over finite {{fields and the}} field of rational numbers. The circuits for the Smith <b>normal</b> <b>form</b> computation are probabilistic ones and also determine very efficient sequential algorithms. Furthermore, we give a polynomial-time deterministic sequential algorithm for the Smith <b>normal</b> <b>form</b> over the rationals. The Smith <b>normal</b> <b>form</b> algorithms are applied to the Rational canonical form of matrices over finite fields and the field of rational numbers. Ke ywords: Parallel algorithm, Hermite <b>normal</b> <b>form,</b> Smith <b>normal</b> <b>form,</b> polynomial-time complexity. 1...|$|R
5000|$|Hermite <b>normal</b> <b>form</b> {{may also}} be used for solving systems of linear Diophantine equations. However, Hermite <b>normal</b> <b>form</b> does not {{directly}} provide the solutions; to get the solutions from the Hermite <b>normal</b> <b>form,</b> one has to successively solve several linear equations. Nevertheless, Richard Zippel wrote that the Smith <b>normal</b> <b>form</b> [...] "is somewhat more than is actually needed to solve linear diophantine equations. Instead of reducing the equation to diagonal form, we only need to make it triangular, which is called the Hermite <b>normal</b> <b>form.</b> The Hermite <b>normal</b> <b>form</b> is substantially easier to compute than the Smith normal form." ...|$|R
40|$|We review various <b>normal</b> <b>form</b> {{representations}} of Boolean functions and outline a comparative study between them, {{which shows that}} the median <b>normal</b> <b>form</b> system provides representations that are more efficient than the classical DNF, CNF and Reed–Muller (polynomial) <b>normal</b> <b>form</b> representations. We present an algorithm for producing median <b>normal</b> <b>form</b> {{representations of}} Boolean functions...|$|R
5000|$|In Boolean algebra, the {{algebraic}} <b>normal</b> <b>form</b> (ANF), {{ring sum}} <b>normal</b> <b>form</b> (RSNF or RNF), Zhegalkin <b>normal</b> <b>form,</b> or Reed-Muller expansion {{is a way}} of writing logical formulas in one of three subforms: ...|$|R
40|$|We {{introduce}} the peak <b>normal</b> <b>form</b> for {{elements of the}} Baumslag-Solitar groups BS(p,q). This <b>normal</b> <b>form</b> {{is very close to}} the lengthlexicographical <b>normal</b> <b>form,</b> but more symmetric. Both <b>normal</b> <b>forms</b> are geodesic. This means the <b>normal</b> <b>form</b> of an element u − 1 v yields the shortest path between u and v in the Cayley graph. For horocyclic elements the peak <b>normal</b> <b>form</b> and the length-lexicographical <b>normal</b> <b>form</b> coincide. The main result of this paper is that we can compute the peak <b>normal</b> <b>form</b> in polynomial time if p divides q. As consequence we can compute geodesic lengths in this case. In particular, this gives a partial answer to Question 1 in [4]. For arbitrary p and q it is possible to compute the peak <b>normal</b> <b>form</b> (length-lexicographical <b>normal</b> <b>form</b> resp.) also the for elements in the horocyclic subgroup and, more generally, for elements which we call hills. This approach leads to a linear time reduction of the problem of computing geodesics to the problem of computing geodesics for Britton-reduced words where the t-sequence starts with t − 1 and ends with t. 1...|$|R
50|$|The Kuroda <b>normal</b> <b>form</b> is {{an actual}} <b>normal</b> <b>form</b> for non-contracting grammars.|$|R
5000|$|... #Subtitle level 2: A {{rational}} <b>normal</b> <b>form</b> generalizing the Jordan <b>normal</b> <b>form</b> ...|$|R
40|$|We {{present an}} {{algorithm}} for the computation of a shifted Popov <b>Normal</b> <b>Form</b> of a rectangular polynomial matrix. For speci c input shifts, we obtain methods for computing the matrix {{greatest common divisor}} of two matrix polynomials (in <b>normal</b> <b>form)</b> or such polynomial <b>normal</b> <b>form</b> computation as the classical Popov form and the Hermite <b>Normal</b> <b>Form...</b>|$|R
40|$|This thesis {{deals with}} issues of <b>normal</b> <b>forms</b> from theory of formal languages. Basic terms from this area are listed here, {{different}} types of grammars as well and especially <b>normal</b> <b>forms</b> and algorithms that transfer grammars into <b>normal</b> <b>forms.</b> Description of design and implementation of program {{which is used to}} transfer input grammar into entered <b>normal</b> <b>form</b> is included...|$|R
40|$|Boolean {{circuits}} of polynomial {{size and}} poly-logarithmic depth are given for computing the Hermite and Smith <b>normal</b> <b>forms</b> of polynomial matrices over finite {{fields and the}} field of rational numbers. The circuits for the Smith <b>normal</b> <b>form</b> computation are probabilistic ones and also determine very efficient sequential algorithms. Furthermore, we give a polynomial-time deterministic sequential algorithm for the Smith <b>normal</b> <b>form</b> over the rationals. The Smith <b>normal</b> <b>form</b> algorithms are applied to the Rational canonical form of matrices over finite fields and the field of rational numbers. Keywords: Parallel algorithm, Hermite <b>normal</b> <b>form,</b> Smith <b>normal</b> <b>form,</b> polynomial-time complexity. 1. Introduction The main results of this paper establish fast parallel algorithms for computing the Hermite and Smith <b>normal</b> <b>form</b> of matrices with polynomial entries. The Hermite or Smith <b>normal</b> <b>form</b> of a square matrix is generally defined for the case of entries from a principal ideal domain. For example [...] ...|$|R
5000|$|An object x in A {{is called}} {{reducible}} if there exist some other y in A and otherwise {{it is called}} irreducible or a <b>normal</b> <b>form.</b> An object y is called a <b>normal</b> <b>form</b> of x if , and y is irreducible. If x has a unique <b>normal</b> <b>form,</b> then this is usually denoted with [...] In example 1 above, c is a <b>normal</b> <b>form,</b> and [...] If every object {{has at least one}} <b>normal</b> <b>form,</b> the ARS is called normalizing.|$|R
40|$|AbstractIn {{this note}} {{an idea of}} quasi-homogeneous <b>normal</b> <b>form</b> theory using new grading {{functions}} is introduced, the definition ofNth order <b>normal</b> <b>form</b> is given and some sufficient conditions for the uniqueness of <b>normal</b> <b>forms</b> are derived. A special case of the unsolved problem in a paper of Baider and Sanders for the unique <b>normal</b> <b>form</b> of Bogdanov–Takens singularities is solved...|$|R
40|$|This paper gives a {{setup for}} <b>normal</b> <b>form</b> {{theory and the}} {{computation}} of <b>normal</b> <b>forms</b> with emphasis on the dual character of the transformation generators and the objects to be transformed into <b>normal</b> <b>form.</b> Spectral sequence techniques {{will be used to}} define unique <b>normal</b> <b>forms.</b> Theoretical estimates are given for the rate of convergence in terms of the spectral sequence. © 2005 Springer...|$|R
2500|$|There {{is another}} one-parameter <b>normal</b> <b>form</b> for the quintic equation, known as Brioschi <b>normal</b> <b>form</b> ...|$|R
50|$|Adnan Darwiche and his {{collaborators}} have shown that BDDs are one of several <b>normal</b> <b>forms</b> for Boolean functions, each induced by a different combination of requirements. Another important <b>normal</b> <b>form</b> identified by Darwiche is Decomposable Negation <b>Normal</b> <b>Form</b> or DNNF.|$|R
