86|5|Public
2500|$|AntiSniff: Identification {{of remote}} systems in <b>promiscuous</b> <b>mode,</b> May 2000 ...|$|E
50|$|As <b>promiscuous</b> <b>mode</b> {{can be used}} in a {{malicious}} way {{to sniff}} on a network, one might be interested in detecting network devices that are in <b>promiscuous</b> <b>mode.</b> In <b>promiscuous</b> <b>mode,</b> some software might send responses to frames even though they were addressed to another machine. However, experienced sniffers can prevent this (e.g., using carefully designed firewall settings).|$|E
50|$|Many {{operating}} systems require superuser privileges to enable <b>promiscuous</b> <b>mode.</b> A non-routing node in <b>promiscuous</b> <b>mode</b> can generally only monitor traffic {{to and from}} other nodes within the same broadcast domain (for Ethernet and IEEE 802.11) or ring (for token ring or FDDI). Computers attached to the same Ethernet hub satisfy this requirement, which is why network switches are used to combat malicious use of <b>promiscuous</b> <b>mode.</b> A router may monitor all traffic that it routes.|$|E
5000|$|SANA-II: a {{standardized}} API for hardware of network interfaces. It uses an inefficient buffer handling scheme, and lacks proper support for <b>promiscuous</b> and multicast <b>modes.</b>|$|R
40|$|The paper {{illustrates}} {{the design of}} MobEYE, a cooperative cache system for file transfer overMANETs. Its implementation {{is based on the}} sniffing facilities provided by the BSD Packet Filter, to process in-transit messages at the application level. MobEYE has been simulated, deriving support for the claim of saving energy and reducing latency; further possible optimizations, based on the use of <b>promiscuous</b> transmission <b>mode,</b> are discussed as well...|$|R
30|$|The selfish {{quarantine}} {{mechanism in}} TBUT, the routing, and packet forwarding operations of each wireless node {{is done in}} a fully decentralized and localized manner. Each node overhears the channel in the <b>promiscuous</b> listening <b>mode.</b> Moreover, neighboring nodes and umpiring nodes cooperate {{with each other to}} improve the monitoring accuracy. During route discovery mobile, node X announces a new routing table update toward destination D with hop count as 1, claiming that its next hop is mobile node Y. Mobile node M can readily detect this routing misbehavior, because based on the route announced by mobile node Y, it can predict the correct distance from mobile node X to D via mobile node Y to be 3. The same idea can be applied to examine other fields in the routing updates as well.|$|R
5000|$|... #Subtitle level 2: Some {{applications}} that use <b>promiscuous</b> <b>mode</b> ...|$|E
5000|$|AntiSniff: Identification {{of remote}} systems in <b>promiscuous</b> <b>mode,</b> May 2000 ...|$|E
5000|$|Optional {{support for}} <b>promiscuous</b> <b>mode</b> if {{supported}} by the physical interface.|$|E
40|$|This paper {{presents}} an Incentive-based Sharing (iShare) protocol that blends cellular and ad hoc networks for content dissemination services. With iShare, mobile users download content {{from a source}} via cellular links {{and at the same}} time form a mesh ad hoc network for peer-to-peer exchange of content data. The mesh remains robust to network dynamics, minimizes ad hoc communication overhead, and parallelizes the downloading process among mesh members. In order to counter selfish behavior, we apply an efficient and practical "tit-for-tat" incentive mechanism, which exploits proximity and mutual content interest of mobile users. This mechanism becomes particularly effective in the case of network dynamics since we utilize <b>promiscuous</b> and broadcast <b>modes</b> of the ad hoc channel. As a result, our protocol effectively helps to free resources in the cellular network and accelerates the content download for its users. Furthermore, it enables users to continuously obtain data via ad hoc connections during cellular handoff periods and provides multi-homing downloads for groups spanning adjacent cells. We evaluate the performance of iShare by means of simulations and compare it to other content dissemination schemes using cellular broadcast channels, cellular unicast channels, and tree-based protocols. The obtained results show that iShare significantly outperforms alternative approaches and creates a win-win situation by improving performance of both iShare and other mobile users...|$|R
40|$|Peer-to-Peer (P 2 P) and ad hoc {{networks}} have many points in common: both represent a decentralized self-organizing network structure. However few existing P 2 P algorithms {{are specifically designed}} to operate efficiently over ad hoc networks. And few ad hoc networks are designed to benefit from P 2 P infrastructures. We have worked on an epidemic dissemination protocol to maintain soft-state in a decentralized, peer-to-peer fashion, in ad hoc networks. This protocol is an enhancement of Passive Distributed Indexing (PDI) method proposed by Lindemann and Waldhorst. PDI is a method for distributing information in a P 2 P structure which is particularly suited to ad hoc networks, and does not involve an overlay topology. It makes use of broadcast messages to spread information via passive epidemic dissemination. We have enhanced PDI {{in order to reduce}} the number of broadcast messages when the search for an item may span several hops. Three enhancements are proposed: 1) Lazy query propagation to delay the propagation of query messages such that local responses can inhibit unnecessary search. 2) Quench waves to stop an already initiated query propagation when still possible. A decision algorithm determines whether to start a quench wave or not based solely on local information. 3) The use of Multi-Point Relay (MPR) or similar protocol and algorithm, to reduce redundant broadcast messages. This talk will present the current state of this research, and discuss several open aspects with the purpose of stimulating debate. The talk will also include an overview of related work such as epidemic models from biology, other epidemic protocols for P 2 P overlays and MANETs, including gossip (active) and <b>promiscuous</b> (passive) dissemination <b>modes.</b> Such protocols could be used for many different purposes, roughly any task requiring distributed soft-state maintenance in the ad hoc network, including DNS and identifier mappings, network monitoring and configuration, and so on. During the talk we will also exploit the possibility of using the protocol to disseminate service information for on-demand service deployment, and further, to assist in self-composing protocol structures...|$|R
50|$|Wireshark {{lets the}} user put network {{interface}} controllers that support <b>promiscuous</b> <b>mode</b> into that mode, {{so they can}} see all traffic visible on that interface, not just traffic addressed to one of the interface's configured addresses and broadcast/multicast traffic. However, when capturing with a packet analyzer in <b>promiscuous</b> <b>mode</b> on a port on a network switch, not all traffic through the switch is necessarily sent to the port where the capture is done, so capturing in <b>promiscuous</b> <b>mode</b> is not necessarily sufficient to see all network traffic. Port mirroring or various network taps extend capture to any point on the network. Simple passive taps are extremely resistant to tampering.|$|E
50|$|Another {{method to}} monitor {{networks}} is to enable <b>promiscuous</b> <b>mode</b> on the monitoring host, and connecting it to a shared segment. This {{works well with}} older LAN technologies such as 10BASE-T Ethernet, FDDI, and token ring. On such networks, any host can automatically see what all other hosts were doing by enabling <b>promiscuous</b> <b>mode.</b> However, modern switched network technologies such as those used on modern Ethernets provide, in effect, point-to-point links between pairs of devices, so {{it is hard for}} other devices to see traffic.|$|E
50|$|On wired {{broadcast}} and wireless LANs, to capture traffic other than unicast traffic {{to the machine}} running the sniffer, multicast traffic to a multicast group that machine is monitoring, or broadcast trafficâ€”the network adapter capturing the traffic must be in <b>promiscuous</b> <b>mode.</b> Some sniffers support this, but not all. On wireless LANs, even if the adapter is in <b>promiscuous</b> <b>mode,</b> packets not for the service set the adapter is configured for are usually ignored. To see those packets, the adapter must be in monitor mode.|$|E
5000|$|Support {{for network}} sniffing. This {{required}} extending the Ethernet driver {{so that a}} single event could satisfy more than one I/O request, and conditionally implementing the hardware filtering in software to support <b>promiscuous</b> <b>mode.</b>|$|E
5000|$|All WaveLAN devices {{utilize the}} same {{spreading}} code in their DSSS scheme, so a WaveLAN card in <b>promiscuous</b> <b>mode</b> {{and set to}} ignore the NWID parameter could sniff and decode any WaveLAN radio traffic it encountered.|$|E
50|$|Monitor mode, or RFMON (Radio Frequency MONitor) mode, {{allows a}} {{computer}} with a wireless network interface controller (WNIC) to monitor all traffic received from the wireless network. Unlike <b>promiscuous</b> <b>mode,</b> which is also used for packet sniffing, monitor mode allows packets to be captured without having to associate with an access point or ad hoc network first. Monitor mode only applies to wireless networks, while <b>promiscuous</b> <b>mode</b> {{can be used on}} both wired and wireless networks. Monitor mode is one of the seven modes that 802.11 wireless cards can operate in: Master (acting as an access point), Managed (client, also known as station), Ad hoc, Mesh, Repeater, Promiscuous, and Monitor mode.|$|E
5000|$|In {{computer}} networking, <b>promiscuous</b> <b>mode</b> (often shortened to [...] "promisc mode" [...] or [...] "promisc. mode") is a mode for a {{wired network}} interface controller (NIC) or wireless {{network interface controller}} (WNIC) that causes the controller to pass all traffic it receives to the central processing unit (CPU) rather than passing only the frames that the controller is intended to receive. This mode is normally used for packet sniffing that takes place on a router or on a computer connected to a hub (instead of a switch) or one {{being part of a}} WLAN. Interfaces are placed into <b>promiscuous</b> <b>mode</b> by software bridges often used with hardware virtualization.|$|E
50|$|In {{computer}} networking, promiscuous traffic, or cross-talking, describes {{situations where}} a receiver configured {{to receive a}} particular data stream receives that data stream and others. Promiscuous traffic {{should not be confused}} with the <b>promiscuous</b> <b>mode,</b> which is a network card configuration.|$|E
50|$|There was {{provision}} for broadcast transmissions, a single frame sent with its destination station and network numbers set to 255. There was also {{provision for}} <b>promiscuous</b> <b>mode</b> reception, termed wild receivein the PRM, requested by listening for station and network numbers both being zero.|$|E
50|$|Ettercap {{works by}} putting the network {{interface}} into <b>promiscuous</b> <b>mode</b> and by ARP poisoning the target machines. Thereby it {{can act as a}} 'man in the middle' and unleash various attacks on the victims. Ettercap has plugin support so that the features can be extended by adding new plugins.|$|E
50|$|The virus {{will find}} FTP clients such as FileZilla and Dreamweaver and {{download}} the clients' stored passwords. Gumblar also enables <b>promiscuous</b> <b>mode</b> {{on the network}} card, allowing it to sniff local network traffic for FTP details. It {{is one of the}} first viruses to incorporate an automated network sniffer.|$|E
5000|$|... ngrep {{is similar}} to tcpdump, but it {{has the ability to}} look for a regular {{expression}} in the payload of the packet, and show the matching packets on a screen or console. It allows users to see all unencrypted traffic being passed over the network, by putting the network interface into <b>promiscuous</b> <b>mode.</b>|$|E
50|$|The Berkeley Packet Filter (BPF) {{provides}} a raw interface to data link layers, permitting raw link-layer packets {{to be sent}} and received. It is available on most Unix-like operating systems. In addition, if the driver for the network interface supports <b>promiscuous</b> <b>mode,</b> it allows the interface {{to be put into}} that mode so that all packets on the network can be received, even those destined to other hosts.|$|E
50|$|<b>Promiscuous</b> <b>mode</b> {{is often}} used to {{diagnose}} network connectivity issues. There are programs that make use of this feature to show the user all the data being transferred over the network. Some protocols like FTP and Telnet transfer data and passwords in clear text, without encryption, and network scanners can see this data. Therefore, computer users are encouraged to stay away from insecure protocols like telnet and use more secure ones such as SSH.|$|E
50|$|In IEEE 802 {{networks}} such as Ethernet, token ring, and IEEE 802.11, and in FDDI, each frame {{includes a}} destination Media Access Control address (MAC address). In non-promiscuous mode, when a NIC receives a frame, it normally drops it unless {{the frame is}} addressed to that NIC's MAC address or is a broadcast or multicast frame. In <b>promiscuous</b> <b>mode,</b> however, the NIC allows all frames through, thus allowing the computer to read frames intended for other machines or network devices.|$|E
50|$|Older network {{technologies}} {{tended to}} be shared. Connecting a monitoring device to a shared network segment (i.e., piece of a network) was very easyâ€”just connect the monitoring device as you would any other host, and enable <b>promiscuous</b> <b>mode.</b> Modern network technologies tend to be switched, meaning that devices are connected using point-to-point links. If a monitoring device is connected to such a network, it will only see its own traffic. The network tap allows the monitoring device to view {{the contents of a}} point-to-point link.|$|E
50|$|An {{example is}} sending a ping (ICMP echo request) with the wrong MAC address but the right IP address. If an adapter is {{operating}} in normal mode, it will drop this frame, and the IP stack never sees or responds to it. If the adapter is in <b>promiscuous</b> <b>mode,</b> the frame will be passed on, and the IP stack on the machine (to which a MAC address has no meaning) will respond as it would to any other ping. The sniffer can prevent this by configuring his or her firewall to block ICMP traffic.|$|E
50|$|CommView {{puts the}} network adapter into <b>promiscuous</b> <b>mode</b> and captures network traffic. It also {{supports}} capturing packets from dial-up and virtual adapters (e.g. ADSL or 3G modems), {{as well as}} capturing loopback traffic. Captured traffic is then analyzed and the application displays network statistics and individual packets. Packets are decoded using a protocol decoder. CommView for WiFi puts Wi-Fi adapters into monitor mode, providing the functionality and user experience {{similar to that of}} CommView, with the addition of WLAN-specific features, such as displaying and decoding of management and control frames, indication of signal and noise level, and per-node and per-channel statistics.|$|E
50|$|If {{the least}} {{significant}} bit of the first octet of an address is set to 0 (zero), the frame is meant to reach only one receiving NIC. This type of transmission is called unicast. A unicast frame is transmitted to all nodes within the collision domain, which typically ends at the nearest network switch or router. A switch will forward a unicast frame through all of its ports (except for the port that originated the frame) if the switch has no knowledge of which port leads to that MAC address, or just to the proper port if it does have knowledge. Only the node with the matching hardware MAC address will accept the frame; network frames with non-matching MAC-addresses are ignored, unless the device is in <b>promiscuous</b> <b>mode.</b>|$|E
50|$|There {{are various}} methods for getting {{access to the}} network. Many tapping methods can be used, {{according}} to the network technology and the monitoring objective.The first method, when a monitoring device is installed in-line. When a monitoring device is installed in-line, the network will stop every time the device updated or rebooted. Similarly, if the device failed, the network would break down as well.Another method to monitor networks is by enabling <b>Promiscuous</b> <b>Mode</b> on the host that {{is used for the}} monitoring and attaching it to a network switch. This method works well with old LAN technologies. However, modern network are usually switched based networks, meaning the devices are communicated using Point-To-Point links. If the monitoring device is connected to such a network, it will only see its own traffic, so it is hard for other devices to see the traffic. Some of the traditional methods for gaining access to the network traffic use a SPAN port, also known as MIRROR port, in the switch. This is a software method for network tapping and places less load on the network switch. This is a low cost alternative to traditional network tap methods. However, not all routers and switches support port mirroring and, on those that do, using port mirroring can affect the performance of the router or the switch.|$|E
50|$|Consider {{a source}} node {{that does not}} have a route to the destination. When it has data packets to be sent to that destination, it initiates a RouteRequest packet. This RouteRequest is flooded {{throughout}} the network. Each node, upon receiving a RouteRequest packet, rebroadcasts the packet to its neighbors if it has not forwarded it already, provided that the node is not the destination node and that the packetâ€™s time to live (TTL) counter has not been exceeded. Each RouteRequest carries a sequence number generated by the source node and the path it has traversed. A node, upon receiving a RouteRequest packet, checks the sequence number on the packet before forwarding it. The packet is forwarded only if it is not a duplicate RouteRequest. The sequence number on the packet is used to prevent loop formations and to avoid multiple transmissions of the same RouteRequest by an intermediate node that receives it through multiple paths. Thus, all nodes except the destination forward a RouteRequest packet during the route construction phase. A destination node, after receiving the first RouteRequest packet, replies to the source node through the reverse path the RouteRequest packet had traversed. Nodes can also learn about the neighboring routes traversed by data packets if operated in the <b>promiscuous</b> <b>mode</b> (the mode of operation in which a node can receive the packets that are neither broadcast nor addressed to itself). This route cache is also used during the route construction phase.|$|E
30|$|Wireless {{interfaces}} support <b>promiscuous</b> <b>mode</b> of operation. Most of {{the existing}} IEEE 802.11 -based wireless cards support such <b>promiscuous</b> <b>mode</b> of operations, to improve routing protocol performance.|$|E
40|$|Abstractâ€”In mobile ad hoc {{networks}} (MANETs), {{there is}} frequently disconnected a route consisting of multi-hop {{from a source}} to a destination because of the dynamic nature such as the topology change caused by nodesâ€™ mobility. To overcome this situation, existing routing protocols for MANETs have performed route repair scheme to repair the disconnected route. However, existing reactive routing protocols have the problem which is that a source node unnecessarily performs re-discovers the whole path when just one node moves, even {{if the rest of}} path needs not to be re-arranged. Therefore, the time for re-discovery of the whole path may often take too long. To solve the problem, we propose a new local repair scheme using <b>promiscuous</b> <b>mode.</b> Our scheme is mainly composed of two parts: adaptive <b>promiscuous</b> <b>mode</b> and quick local repair scheme. Adaptive <b>promiscuous</b> <b>mode</b> is to repeat the switching processes between <b>promiscuous</b> <b>mode</b> and nonpromiscuous mode to overcome energy limit caused by using <b>promiscuous</b> <b>mode</b> in overall time and quick local repair scheme is to fast perform the local re-route discovery process with the information of the active connection in the local area acquired by <b>promiscuous</b> <b>mode.</b> With simulation in the various number of connection, We demonstrate the better network performances achieved with the proposed schemes as compared with AODV as reference model that do not provide local repair scheme. Index Termsâ€”Local repair schemes, mobile ad hoc networks (MANETs), <b>promiscuous</b> <b>mode.</b> I...|$|E
40|$|In mobile ad hoc {{networks}} (MANETs), {{there is}} frequently disconnected a route consisting of multi- hop {{from a source}} to a destination because of the dynamic nature such as the topology change caused by nodesâ€™ mobility. To overcome this situation, existing routing protocols for MANETs have performed route repair scheme to repair the disconnected route. However, existing reactive routing protocols have the problem which is that a source node unnecessarily performs re-discovers the whole path when just one node moves, even {{if the rest of}} path needs not to be re-arranged. Therefore, the time for re-discovery of the whole path may often take too long. To solve the problem, we propose a new local repair scheme using <b>promiscuous</b> <b>mode.</b> Our scheme is mainly composed of two parts: adaptive <b>promiscuous</b> <b>mode</b> and quick local repair scheme. Adaptive <b>promiscuous</b> <b>mode</b> is to repeat the switching processes between <b>promiscuous</b> <b>mode</b> and nonpromiscuous mode to overcome energy limit caused by using <b>promiscuous</b> <b>mode</b> in overall time and quick local repair scheme is to fast perform the local re-route discovery process with the information of the active connection in the local area acquired by <b>promiscuous</b> <b>mode.</b> With simulation in the various number of connection, We demonstrate the better network performances achieved with the proposed schemes as compared with AODV as reference model that do not provide local repair scheme. </p...|$|E
30|$|Suppose the NIC of each {{sensor node}} is in <b>promiscuous</b> <b>mode</b> {{so that it}} can overhear the data packets from its nearby neighbors.|$|E
