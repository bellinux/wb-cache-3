14|26|Public
40|$|This paper proposes Flow Permissions, an {{extension}} to the Android <b>permission</b> <b>mechanism.</b> Unlike the existing permis-sion mechanism, our <b>permission</b> <b>mechanism</b> contains seman-tic information {{based on information}} flows. Flow Permis-sions allow users to examine and grant per-app information flows within an application (e. g., a permission for reading the phone number and sending it over the network) as well as cross-app information flows across multiple applications (e. g., a permission for reading the phone number and send-ing it to another application already installed on the user’s phone). Our goal with Flow Permissions is to provide visi-bility into the holistic behavior of the applications installed on a user’s phone. In order to support Flow Permissions on Android, we have developed a static analysis engine that detects flows within an Android application. We have also modified Android’s existing <b>permission</b> <b>mechanism</b> and in-stallation procedure to support Flow Permissions. We evalu-ate our prototype with 2, 992 popular applications and 1, 047 malicious applications and show that our design is practical and effective in deriving Flow Permissions. We validate our cross-app flow generation and installation procedure on a Galaxy Nexus smartphone...|$|E
40|$|Abstract—This paper proposes Flow Permissions, an {{extension}} to the Android <b>permission</b> <b>mechanism.</b> Unlike the existing per-mission mechanism our <b>permission</b> <b>mechanism</b> contains semantic information {{based on information}} flows. Flow Permissions allow users to examine and grant explicit information flows within an application (e. g., a permission for reading the phone number and sending it over the network) as well as implicit information flows across multiple applications (e. g., a permission for reading the phone number and sending it to another application already installed on the user’s phone). Our goal with Flow Permissions is to provide visibility into the holistic behavior of the applications installed on a user’s phone. Our evaluation compares our approach to dynamic flow tracking techniques; our results with 600 popular applications and 1, 200 malicious applications show that our approach is practical and effective in deriving Flow Permissions statically. I...|$|E
40|$|AbstractAs {{increasing}} {{in number of}} Android phones there is simultaneous increase in mobile malware apps which performs malicious activities such as misusing user's private information as sending messages i. e. SMS, reading users contact information and can harm user by exploiting the user's confidential data which is stored in mobile. Malware are speeded not only infecting the user's data but also harming several organizations in term of stealing of private and confidential data. Hence Malware classification and identification is a critical issue. Android users are unaware about several apps which they are using whether they are malware infected or not. Android applications require the concept of <b>permission</b> <b>mechanism</b> to show that apps are using certain permissions {{to get access to}} information from your device. Android apps which are installed in the smart phones get access to all the required permission during installation of apps. Google assure their customer in terms of security about the apps which are available to download from there play store. Android operating system is open system and it allows users to install any applications downloaded from any unsafe site. However <b>permission</b> <b>mechanism</b> is still very diminutive defense mechanism to assure that the applications can harm to user. Therefore in this paper we propose the Malware characterization from manifest file and allows user to improve the efficiency of Android permission to inform user about the risk of Android permission and apps...|$|E
5000|$|The mass {{distribution}} of applications {{is accompanied by}} the establishment of different <b>permissions</b> <b>mechanisms</b> for each operating system. It is necessary to clarify these <b>permissions</b> <b>mechanisms</b> to users, as they differ from one system to another, and are {{not always easy to}} understand. In addition, it is rarely possible to modify a set of permissions requested by an application if the number of permissions is too great. But this last point is a source of risk because a user can grant rights to an application, far beyond the rights it needs. For example, a note taking application does not require access to the geolocation service. The user must ensure the privileges required by an application during installation and should not accept the installation if requested rights are inconsistent.|$|R
5000|$|From {{the legacy}} of Linux, there are also {{filesystem}} <b>permissions</b> <b>mechanisms.</b> They help with sandboxing: a process can not edit any files it wants. It is therefore not possible to freely corrupt files necessary for the operation of another application or system. Furthermore, in Android there is the method of locking memory permissions. It {{is not possible to}} change the permissions of files installed on the SD card from the phone, and consequently it is impossible to install applications.|$|R
40|$|Bring-Your-Own-Device (BYOD) {{implies that}} the same mobile device is used for both work and {{personal}} purposes. This poses a security concern where untrusted user-installed applications might interfere maliciously with corporate ones. Android’s exist-ing fixed <b>permissions</b> <b>mechanism</b> is not a suitable countermeasure. Malware isolation through virtualization 1 and managed device scans 2 is possible, however a complete so-lution requires a context-specific (work/personal) policy mechanism. Our proposition, BYOD-RV, uses Dynamic Binary Instrumentation (DBI) and Runtime Verification (RV). DBI (in-memory code patching) avoids Android source code changes as typically re-quired by similar approaches, e. g. [3]. RV (runtime monitoring of program correctness properties) enables expressing dynamic policy rules in Java, e. g. [2]...|$|R
40|$|The {{number of}} Android {{applications}} has increased rapidly as Android {{is becoming the}} dominant platform in the smartphone market. Security and privacy are key factors for an Android application to be successful. Android provides a <b>permission</b> <b>mechanism</b> to ensure security and privacy. This <b>permission</b> <b>mechanism</b> requires that developers declare the sensitive resources required by their applications. On installation or during runtime, users are required {{to agree with the}} permission request. However, in practice, there are numerous popular permission misuses, despite Android introducing official documents stating how to use these permissions properly. Some data mining techniques (e. g., association rule mining) have been proposed to help better recommend permissions required by an API. In this paper, based on popular techniques used to build recommendation systems, we propose two novel approaches to improve the effectiveness of the prior work. The first approach utilizes a collaborative filtering technique, which is inspired by the intuition that apps that have similar features — inferred from their APIs — usually share similar permissions. The second approach recommends permissions based on a text mining technique that uses a naive Bayes multinomial classification algorithm to build a prediction model by analyzing descriptions of apps. To evaluate these two approaches, we use 936 Android apps from F-Droid, which is a repository of free and open source Android applications. We find that our proposed approaches yield a significant improvement in terms of precision, recall, F 1 -score, and MAP of the top-kresults over the baseline approach...|$|E
40|$|The Android {{operating}} system {{was designed to}} afford users secure, but unrestricted use of their device. The crux of this solution is that the burden of system administrator has been, possibly unknowingly, placed upon each individual user. The goal {{of this paper is}} to identify the significant threats Android users are faced with, and recommend possible solutions. Through the course of this study, an Android application was developed and voluntarily downloaded, collecting a significant set of data from users. This data, combined with additional literary and product research, has identified multiple shortcomings in the existing Android security landscape. In particular, difficulty using the <b>Permission</b> <b>mechanism,</b> inconsistent communication regarding security patches and their distribution, and a general lack of usage of the user-controlled security features was identified...|$|E
40|$|Abstract—As one of {{the most}} popular mobile platforms, the Android system {{implements}} an install-time <b>permission</b> <b>mechanism</b> to provide users with an opportunity to deny potential risky permissions requested by an application. In order for both users and application vendors to make informed decisions, we designed and built Permlyzer, a general-purpose framework to automatically analyze the uses of requested permissions in Android applications. Permlyzer leverages the combination of runtime analysis and static examination to perform an accurate and in-depth analysis. The call stack-based analysis in Permlyzer can provide fine-grained information of the permission uses from various aspects include location, cause and purpose. More importantly, Permlyzer can automatically explore the functionality of an application and analyze the permission uses. Our evaluation using 51 malware/spyware families and over 110, 000 Android applications demonstrates that Permlyzer can provide detailed permission use analysis and discover the characteristics of the permission uses in both benign and malicious applications. I...|$|E
40|$|Authentication and {{authorization}} are {{an essential}} part of any system allowing for information sharing and social interaction. Especially in such social settings where mobile devices with restricted capabilities and new possibilities (e. g. screen size, ease of localization) are used, there is an increasing need for providing privacy-respecting integrity and access <b>permission</b> <b>mechanisms</b> by considering trade-offs related to usability aspects. In this paper we show how the usability of authentication and authorization related interaction can be enhanced in mobile social settings. This is carried out in our case by using proof-based anonymous credential systems such as Idemix. The requirements analysis is based on various case studies in building collaborative systems and oriented {{to the needs of the}} upcoming EU FP 7 funded project Di. Me. We also present the prototypic implementation and future work directions...|$|R
40|$|In today's mobile {{application}} marketplace, {{the ability of}} consumers to make informed choices regarding their privacy is extremely limited. Consumers largely rely on privacy policies and app <b>permission</b> <b>mechanisms,</b> but these do an inadequate job of conveying how information will be collected, used, stored, and shared. Mobile application developers go largely unrewarded for making apps more privacy conscious as {{it is difficult to}} communicate these features to consumers while they are searching for a new app. This paper provides an overview of a framework designed to help consumers make informed choices, and an incentive mechanism to encourage app developers to implement it. This framework includes machine readable privacy policies encouraged by mobile app stores and enhanced by user software agents. Such a framework would provide the foundation required for more advanced forms of privacy management to develop...|$|R
40|$|Android {{security}} {{has been a}} hot spot recently in both academic research and public concerns due to numerous instances of security attacks and privacy leakage on Android platform. Android {{security has}} been built upon a <b>permission</b> based <b>mechanism</b> which restricts accesses of third-party Android applications to critical resources on an Android device. Such <b>permission</b> based <b>mechanism</b> is widely criticized for its coarse-grained control of application permissions and difficult management of permissions by developers, marketers, and end-users. In this paper, we investigate the arising issues in Android security, including coarse granularity of permissions, incompetent permission administration, insufficient permission documentation, over-claim of permissions, permission escalation attack, and TOCTOU (Time of Check to Time of Use) attack. We illustrate the relationships among these issues, and investigate the existing countermeasures to address these issues. In particular, we provide a systematic review {{on the development of}} these countermeasures, and compare them according to their technical features. Finally, we propose several methods to further mitigate the risk in Android security...|$|R
40|$|In {{this paper}} we apply the probit model, an econometric {{technique}} {{that has been}} used in urban economics to examine nonaggregate cross-sectional data, to investigate the development control (planning application) data regarding the so-called 'small houses' in Hong Kong with respect to two classes of statutory zones, namely the 'green belt' and 'unspecified uses' zones. Four refutable hypotheses relating to the scale of the development, exogenous policies, and internal planning guidelines confronting the planning <b>permission</b> <b>mechanism</b> are tested by using a probit model adapted for the purpose. The data set with 826 individual observations over a period of 24 years from 1975 is part of the first systematically collected and unpublished planning statistics data set for Hong Kong. Although the hypotheses are specific to Hong Kong, they can be easily adapted, where nonaggregate planning statistics are available, to evaluate three general issues: rent seeking, the dependence of planning decisions on announced policies, and the spatial variation in success rates of planning applications. ...|$|E
40|$|The authors {{describe}} {{the nature of}} the planning policies relating to the container industry of Hong Kong, a major international container trade centre, at territorial and district planning levels. Informed by the concepts of transaction costs, the authors attempt to ascertain whether the planning permission system in Hong Kong is promarket, antimarket, or market-neutral with respect to the container industry, and whether the stated statutory district planning policy of permitting and concentrating open storage in specifically designated Open Storage (OS) zones has been followed. A probit model is developed to evaluate 195 sets of nonaggregate and cross-sectional data regarding planning applications to the Town Planning Board for the years 1991 to 1998. The evaluation is conducted in terms of two refutable empirical hypotheses regarding the container industry. The findings suggest that the Hong Kong planning <b>permission</b> <b>mechanism</b> is market neutral towards the container industry and that the statutory district forward planning policy for that industry has not been followed in the development control process. ...|$|E
40|$|Protecting modern {{computer}} systems and complex software stacks against the growing {{range of possible}} attacks is be-coming increasingly difficult. The architecture of modern commodity systems allows attackers to subvert privileged sys-tem software often using a single exploit. Once the system is compromised, inclusive permissions used by current archi-tectures and operating systems easily allow a compromised high-privileged software layer to perform arbitrary malicious activities, even on behalf of other software layers. This paper presents a hardware-supported page permission scheme for the physical pages {{that is based on}} the concept of non-inclusive sets of memory permissions for different layers of system software such as hypervisors, operating systems, and user-level applications. Instead of viewing privilege lev-els as an ordered hierarchy with each successive level being more privileged, we view them as distinct levels each with its own set of permissions. Such a <b>permission</b> <b>mechanism,</b> imple-mented as part of a processor architecture, provides a common framework for defending against a range of recent attacks. We demonstrate that such a protection can be achieved with neg-ligible performance overhead, low hardware complexity and minimal changes to the commodity OS and hypervisor code. 1...|$|E
5000|$|A 2012 survey paper stated, [...] "S3QL {{supports}} a <b>permission</b> control <b>mechanism</b> that {{allows users to}} specify contextual minutiae such as provenance and access control on the semantic level. The effectiveness of S3QL was illustrated through use cases of IB, such as genomic characterization of cancer and molecular epidemiology of infectious diseases. We expect S3QL or its variations to be accepted as the standard access control mechanism by the SW community".|$|R
40|$|This article shares my {{experience}} as a doctoral student researching within the domain {{of art and design}} education. This is a professional doctorate bringing together {{my experience}} as an educator and that of researcher where boundaries between education and social science research disciplines cross. My research paradigm is situated within critical theory. It is an interpretive hermeneutic study where I am cast as a participant ethnographer. At the time of writing I wanted to make known the issues and tensions that I encountered with research protocols, such as <b>permissions</b> <b>mechanisms</b> and ethical gatekeepers. These tensions I still perceive as confining, but more significantly, I realise that knowing and understanding research methodology is key to achieving creative and unpredictable research practice. This article is, therefore, focused on my journey to discover a research methodology that enables me to use a creative voice. By this I mean a method by which I can develop a writing style that articulates my practice that enables me in the construction and reporting of my research analysis to fully capitalise on my reflexive self. I have referenced papers produced by others at the time of writing their doctoral thesis and have found this enlightening. This is my contribution. © 2012 The Author. iJADE © 2012 NSEAD/Blackwell Publishing Ltd...|$|R
40|$|Click on the DOI link {{to access}} the article (may not be free). <b>Permission</b> <b>mechanisms</b> {{play a crucial role}} for {{ensuring}} privacy and security of Android mobile applications (apps). An Android app that requires access to the device resources must be granted specific permissions for its correct operation. Oftentimes, the requested permissions depend on the APIs being used, e. g., a location-based service API may need a specific permission {{to access the}} device's GPS or an API supporting data persistence may need another permission to write to the device's external storage. App developers {{need to be aware of}} this API from/to permission traceability, which is not necessarily explicitly documented, for the proper functioning of the desired app feature. This paper presents an approach, named ApMiner, which relies on association rule discovery to identify co-occurrence patterns of Android APIs and permissions. Based on the usage of APIs and permissions in other apps published in a marketplace, the approach is able to learn and help a developer of a new app to recommend the permissions to be added given the APIs being used. ApMiner has been empirically evaluated on 600 apps from F-Droid, a marketplace for free and open source apps. We compared ApMiner with the state-of-the-art approaches Androguard and PScout, which rely on traditional static and dynamic analyses to recommend permissions. Results show that ApMiner has substantial precision gains (about 1. 5 to 2 times) over the compared approaches, while keeping a similar and slightly better level of recall. Overall, our findings suggest that a mining based approach could offer much improved effectiveness in automatically recommending permissions in developing (new) Android apps...|$|R
40|$|This paper {{describes}} the IES Cities platform conceived {{to streamline the}} development of urban apps that combine heterogeneous datasets provided by diverse entities, namely, government, citizens, sensor infrastructure and other information data sources. This work pursues the challenge of achieving effective citizen collaboration by empowering them to prosume urban data across time. Particularly, this paper focuses on the query mapper; {{a key component of}} the IES Cities platform devised to democratize the development of open data-based mobile urban apps. This component allows developers not only to use available data, but also to contribute to existing datasets with the execution of SQL sentences. In addition, the component allows developers to create ad hoc storages for their applications, publishable as new datasets accessible by other consumers. As multiple users could be contributing and using a dataset, our solution also provides a data level <b>permission</b> <b>mechanism</b> to control how the platform manages the access to its datasets. We have evaluated the advantages brought forward by IES Cities from the developers' perspective by describing an exemplary urban app created on top of it. In addition, we include an evaluation of the main functionalities of the query mapper. European Union's Competitiveness and Innovation Framework Programme (ICT-PSP CIP Programme). Grant Agreement Number: 32509...|$|E
40|$|As Android {{is one of}} {{the most}} popular open source mobile platforms, {{ensuring}} security and privacy of Android applications is very important. Android provides a <b>permission</b> <b>mechanism</b> which requires developers to declare sensitive resources their applications need, and users need to agree with this request when they install (for Android API level 22 or lower) or run (for Android API level 23) these applications. Although Android provides very good official documents to explain how to properly use permissions, unfortunately misuses even for the most popular permissions have been reported. Recently, Karim et al. propose an association rule mining based approach to better infer permissions that an API needs. In this work, to improve the effectiveness of the prior work, we propose an approach which is based on collaborative filtering technique, one of popular techniques used to build recommendation systems. Our approach is designed based on the intuition that apps that have similar features - inferred from the APIs that they use - usually share similar permissions. We evaluate the proposed approaches on 936 Android apps from F-Droid, which is a repository of free and open source Android applications. The experimental results show that our proposed approaches achieve significant improvement in terms of the precision, recall, F 1 -score and MAP of the top-k results over Karim et al. 2 ̆ 7 s approach...|$|E
40|$|Thesis (M. S.) [...] Boston UniversityAndroid, as an open platform, {{dominates the}} booming mobile market. However, its <b>permission</b> <b>mechanism</b> is {{inflexible}} and {{often results in}} over-privileged applications. This in turn creates severe security issues. Aiming to support the Principle of Least Privilege, we propose a Dynamic Role Based Access Control for Android (DR BACA) model and implement the DR BACA system to address these problems. Our system offers multi-user management on Android mobile devices, comparable to traditional workstations, and provides fine-grained Role Based Access Control (RBAC) to en- hance Android security at both the application and permission level. Moreover, by leveraging context-aware capabilities of mobile devices and Near Field communication (NFC) technology, our solution supports dynamic RBAC that provides more flexible access control while still being able to mitigate {{some of the most}} serious security risks on mobile devices. The DR BACA system is highly scalable, suitable for both end- users and large business environments. It simplifies configuration and management of Android devices and can help enterprises to deal with security issues by implementing a uniform security policy. We show that our DR BACA system can be deployed and used with eet:se. With a proper security policy, our evaluation shows that DR BACA can effectively mitigate the security risks posed by both malicious and vulnerable non-malicious applications while incurring only a small overall system overhead...|$|E
40|$|The LPRng {{software}} is an enhanced, extended, and portable {{version of the}} Berkeley LPR software. While providing the same general functionality, the implementation is completely new and provides support for the following features: lightweight (no databases needed) lpr, lpc, and lprm programs; dynamic redirection of print queues; automatic job holding; highly verbose diagnostics; multiple printers serving a single queue; client programs {{do not need to}} run SUID root; greatly enhanced security checks; and a greatly improved <b>permission</b> and authorization <b>mechanism...</b>|$|R
40|$|We present {{concepts}} {{which can}} be used for the efficient implementation of Attribute Based Access Control (ABAC) in large applications using maybe several data storage technologies, including Hadoop, NoSQL and relational database systems. The ABAC authorization process takes place in two main stages. Firstly a sequence of permissions is derived which specifies permitted data to be retrieved for the user's transaction. Secondly, query modification is used to augment the user's transaction with code which implements the ABAC controls. This requires the storage technologies to support a high-level language such as SQL or similar. The modified user transactions are then optimized and processed using the full functionality of the underlying storage systems. We use an extended ABAC model (TCM 2) which handles negative permissions and overrides in a single <b>permissions</b> processing <b>mechanism.</b> We illustrate these concepts using a compelling electronic health records scenario...|$|R
40|$|Abstract — As the today's Web {{provides}} {{open communication}} environment {{for a variety}} of web resources, the Web of Things (WoT) offers new opportunity and challenges about the interoperation among the smart things. The well-known Web technologies can leverage the Web-enabled things to publish and exchange their resource information over the Web, then the Web-enabled thing should cope with the security threat regarding the information exposures over the Web, particularly, access permissions to the thing’s resource information. Thus, in this paper we analyse access <b>permission</b> control <b>mechanism</b> considering both the WoT characteristics and the REST-compliant resource-oriented Web architecture. In contrast to existing access control logics, the proposed mechanism utilizes not only the requester information such as the typical identity and the internet addresses, but also the context of the thing itself. Based on this mechanism, we present web-resource structure for access permission control, and describe an exemplary procedure in detail. This research contributes to the flexible and decentralized access permission control for WoT...|$|R
40|$|Thesis (M. S.) [...] Wichita State University, College of Engineering, Dept. of Electrical Engineering and Computer ScienceThe Android {{platform}} {{enjoys the}} largest {{market share in}} mobile applications (84 % {{at the end of}} 2014). Applications for Android are written mainly in Java and commonly referred to as 'apps'. The explicit <b>permission</b> <b>mechanism</b> imposes a few additional requirements on app developers. App developers not only need the knowledge of which APIs to use to implement the features of an app, but also of any required permissions. On one hand, a missed permission (i. e., a false negative) could result in malfunctioning of the feature (e. g., app crashes). On the other hand, unnecessary permissions (i. e., false positives) could introduce false dependencies, user confusion, marketplace rejection, or even expose risks (e. g., malware threats). Unfortunately, API from/to permission traceability is not necessarily explicitly documented. The thesis presents an approach, named ApMiner, which relies on association rule discovery to identify co-occurrence patterns of Android APIs and permissions. Based on the usage of APIs and permissions in other apps published in a marketplace, the approach is able to learn and help a developer of a new app to recommend the permissions to be added, given the APIs being used. ApMiner has been empirically evaluated on 600 apps from F-Droid, a marketplace for free and open source apps. We compared ApMiner with the state-of-the-art approaches Androguard and PScout, which rely on traditional static and dynamic analyses to recommend permissions. Results show that ApMiner has statistically significant and substantial precision gains (about 1. 5 to 2 times in reducing false positives) over the compared approaches, while keeping a similar or slightly better level of recall (i. e., a measure of false negatives). Overall, our findings suggest that a mining based approach could offer much improved effectiveness in automatically recommending permissions in developing (new) Android apps...|$|E
40|$|International audiencePermission {{systems are}} the main defense that mobile platforms, such as Android and iOS, offer to users to protect their private data from prying apps. However, due to the tension between {{usability}} and control, such systems have several limitations that often force users to overshare sensitive data. In this work, we address some of these limitations with SmarPer, an advanced <b>permission</b> <b>mechanism</b> for Android. First, to address the rigidity of current permission systems and their poor matching of users' privacy preferences, SmarPer relies on contextual information and machine learning to predict permission decisions at runtime. Using our SmarPer implementation, we collected 8, 521 runtime permission decisions from 41 participants in real conditions. Note {{that the goal of}} SmarPer is to mimic the users decisions, not to make privacy-preserving decisions per se. With this unique data set, we show that tting an efcient Bayesian linear regression model results in a mean correct classication rate of 80 % (3 %). This represents a mean relative improvement of 50 % over a user-dened static permission policy, i. e., the model used in current permission systems. Second, SmarPer also focuses on the suboptimal trade-off between privacy and utility; instead of only “allow” or “deny” decisions, SmarPer also offers an “obfuscate” option where users can still obtain utility by revealing partial information to apps. We implemented obfuscation techniques in SmarPer for different data types and evaluated them during our data collection campaign. Our results show that 73 % of the participants found obfuscation useful and it accounted for almost a third {{of the total number of}} decisions. In short, we are the first to show, using a large dataset of real in situ permission decisions, that it is possible to learn users’ unique decision patterns at runtime using contextual information while supporting data obfuscation; this an important step towards automating the management of permissions in smartphones...|$|E
40|$|AbstractThe {{widespread}} {{adoption of}} the Android operating system in a variety type of devices ranging from smart phones to smart TVs, makes it an interesting target for developers of malicious applications. One of the main flaws exploited by these developers is the <b>permissions</b> granting <b>mechanism,</b> which does not allow users to easily understand the privacy implications of the granted permissions. In this paper, we propose an approach to enforce fine-grained usage control privacy policies that enable users to control the access of applications to sensitive resources through application instrumentation. The purpose of this work is to enhance user control on privacy, confidentiality and security of their mobile devices, with regards to application intrusive behaviours. Our approach relies on instrumentation techniques and includes a refinement step where high-level resource-centric abstract policies defined by users are automatically refined to enforceable concrete policies. The abstract policies consider the resources being used and not the specific multiple concrete API methods that may allow an app to access the specific sensitive resources. For example, access to the user location may be done using multiple API methods that should be instrumented and controlled according to the user selected privacy policies. We show how our approach can be applied in Android applications and discuss performance implications under different scenarios...|$|R
40|$|In {{pervasive}} computing environments, changes in context may trigger changes in an individual's access permissions. We contend that existing access control frameworks {{do not provide}} the fine-grained revocation needed to enforce these changing authorizations. In this paper, we present an authorization framework, {{in the context of}} the Gaia OS for active spaces, which integrates context with authorization and provides fine-grained control over the enforcement of dynamically changing <b>permissions</b> using cryptographic <b>mechanisms.</b> Our design, implemented in middleware, addresses the limitations of traditional authorization frameworks and the specific access control needs of {{pervasive computing}} environments. As part of our proposed framework, we define cryptographic protocols that enforce access to the system's communication channels and provide secure delivery of messages. We also provide a proof of correctness of key agreement and freshness using the standard BAN deduction system...|$|R
40|$|Background: The {{value and}} {{usefulness}} of data increases {{when it is}} explicitly interlinked with related data. This is the core principle of Linked Data. For life sciences researchers, harnessing the power of Linked Data to improve biological discovery is still challenged by a need {{to keep pace with}} rapidly evolving domains and requirements for collaboration and control {{as well as with the}} reference semantic web ontologies and standards. Knowledge organization systems (KOSs) can provide an abstraction for publishing biological discoveries as Linked Data without complicating transactions with contextual minutia such as provenance and access control. We have previously described the Simple Sloppy Semantic Database (S 3 DB) as an efficient model for creating knowledge organization systems using Linked Data best practices with explicit distinction between domain and instantiation and support for a <b>permission</b> control <b>mechanism</b> that automatically migrates between the two. In this report we present a domain specific language, the S 3 DB query language (S 3 QL), to operate on its underlying core model and facilitate management of Linked Data. Results: Reflecting the data driven nature of our approach, S 3 QL has been implemented as an application programming interface for S 3 DB systems hosting biomedical data, and its syntax was subsequently generalized beyond the S 3 DB core model. This achievement is illustrated with the assembly of an S 3 QL query to manage entities from th...|$|R
40|$|Different uses {{of memory}} {{protection}} schemes have different needs {{in terms of}} granularity. For example, heap security can benefit from chunk separation (by using protected ”padding ” boundaries) and meta-data protection. However, such protection can be done at different granularity(eg. perword, per-block, or per-page), with different performance, cost and memory overhead tradeoffs for different applications. In this paper, we explore these tradeoffs {{for the purpose of}} heap security in order to discover whether the ”right” granularity exists and how the granularity of protection affects design decisions. We evaluate such tradeoffs based on the current heapsecurity approaches in a single address space operating system. The access control granularities we use are word, 8 -byte, 16 -byte, 32 -byte, and page. We find that none of these schemes is optimal across all applications. In some applications, excessive padding degrades caching performance for coarse-granularity schemes, while in others, large-block permission changes introduce large overheads for finer granularities. To overcome these limitations, we propose a new twogranularity scheme, which uses word- and page-granularity protection to eliminate padding but allow fast page-size permission changes for large memory blocks. On all applications, this new scheme performs as well or better than the best single-granularity scheme. It also performs on par with the more complex Mondrian Memory Protection, which uses a complex trie structure and multiple <b>permissions</b> caching <b>mechanisms</b> to support a hierarchy of protection granularities...|$|R
40|$|Abstract. In {{pervasive}} computing environments, changes in context may trigger changes in an individual’s access permissions. We contend that existing access control frameworks {{do not provide}} the fine-grained revocation needed to enforce these changing authorizations. In this pa-per, we present an authorization framework, {{in the context of}} the Gaia OS for active spaces, which integrates context with authorization and provides fine-grained control over the enforcement of dynamically chang-ing <b>permissions</b> using cryptographic <b>mechanisms.</b> Our design, imple-mented in middleware, addresses the limitations of traditional autho-rization frameworks and the specific access control needs of {{pervasive computing}} environments. As part of our proposed framework, we define cryptographic protocols that enforce access to the system’s communica-tion channels and provide secure delivery of messages. We also provide a proof of correctness of key agreement and freshness using the standard BAN deduction system. ...|$|R
40|$|Most {{normative}} systems {{make use}} of explicit representations of norms (namely, obligations, prohibi-tions, and <b>permissions)</b> and associated <b>mechanisms</b> to support the self-regulation of open societies of self-interested and autonomous agents. A key problem in research on normative systems is that of how to syn-thesise effective and efficient norms. Manually designing norms is time-consuming and error-prone. An alternative is to automatically synthesise norms. However, norm synthesis is a computationally complex problem. We present a novel on-line norm synthesis mechanism, designed to synthesise compact normative systems. It yields normative systems composed of concise (simple) norms that effectively coordinate a multi-agent system without lapsing into over-regulation. Our mechanism {{is based on a}} central authority that monitors a multi-agent system, searching for undesired states. After detecting undesirable states, the cen-tral authority then synthesises norms aimed to avoid them in the future. We demonstrate the effectiveness of our approach through experimental results...|$|R
40|$|Application {{security}} is typically coded in the application. In kernelSec, we are investigating mechanisms to implement application security in an operating system kernel. The mechanisms are oriented towards providing authorization properties, and this goal drives {{the design of}} <b>permissions</b> and protection <b>mechanisms.</b> The resulting system is dynamic, allowing the set of permissions for a program to evolve during program execution. This reduces the need for users and applications {{to be aware of}} protection mechanism, since the protection mechanism provides the user with more freedom in how they do things. We explore these properties through a number of examples. KernelSec also supports a group (role) mechanism which can define constrained groups enabling groups which only grow, only shrink, are constant, are mutually exclusive with other groups, and which allow inheritance. Moreover groups are used to regulate group membership and allow group administration by non-privileged users...|$|R
40|$|In {{the last}} decade, {{smartphones}} have gained widespread usage. Since {{the advent of}} online application stores, {{hundreds of thousands of}} applications have become instantly available to millions of smart-phone users. Within the Android ecosystem, application security is governed by digital signatures and a list of coarse-grained <b>permissions.</b> However, this <b>mechanism</b> is not fine-grained enough to provide the user with a sufficient means of control of the applications' activities. Abuse of highly sensible private information such as phone numbers without users' notice is the result. We show that there is a high frequency of privacy leaks even among widely popular applications. Together {{with the fact that the}} majority of the users are not proficient in computer security, this presents a challenge to the engineers developing security solutions for the platform. Our contribution is twofold: first, we propose a service which is able to assess Android Market applications via static analysis and provide detailed, but readable reports to the user. Second, we describe a means to mitigate security and privacy threats by automated reverse-engineering and refactoring binary application packages according to the users' security preferences...|$|R
40|$|Abstract Background The {{value and}} {{usefulness}} of data increases {{when it is}} explicitly interlinked with related data. This is the core principle of Linked Data. For life sciences researchers, harnessing the power of Linked Data to improve biological discovery is still challenged by a need {{to keep pace with}} rapidly evolving domains and requirements for collaboration and control {{as well as with the}} reference semantic web ontologies and standards. Knowledge organization systems (KOSs) can provide an abstraction for publishing biological discoveries as Linked Data without complicating transactions with contextual minutia such as provenance and access control. We have previously described the Simple Sloppy Semantic Database (S 3 DB) as an efficient model for creating knowledge organization systems using Linked Data best practices with explicit distinction between domain and instantiation and support for a <b>permission</b> control <b>mechanism</b> that automatically migrates between the two. In this report we present a domain specific language, the S 3 DB query language (S 3 QL), to operate on its underlying core model and facilitate management of Linked Data. Results Reflecting the data driven nature of our approach, S 3 QL has been implemented as an application programming interface for S 3 DB systems hosting biomedical data, and its syntax was subsequently generalized beyond the S 3 DB core model. This achievement is illustrated with the assembly of an S 3 QL query to manage entities from the Simple Knowledge Organization System. The illustrative use cases include gastrointestinal clinical trials, genomic characterization of cancer by The Cancer Genome Atlas (TCGA) and molecular epidemiology of infectious diseases. Conclusions S 3 QL was found to provide a convenient mechanism to represent context for interoperation between public and private datasets hosted at biomedical research institutions and linked data formalisms. </p...|$|R
40|$|Most {{normative}} systems {{make use}} of explicit representations of norms (namely, obligations, prohibitions, and <b>permissions)</b> and associated <b>mechanisms</b> to support the self-regulation of open societies of self-interested and autonomous agents. A key problem in research on normative systems is that of how to synthesise effective and efficient norms. Manually designing norms is time consuming and error prone. An alternative is to automatically synthesise norms. However, norm synthesis is a computationally complex problem. We present a novel online norm synthesis mechanism, designed to synthesise compact normative systems. It yields normative systems composed of concise (simple) norms that effectively coordinate a multiagent system (MAS) without lapsing into overregulation. Our mechanism {{is based on a}} central authority that monitors a MAS, searching for undesired states. After detecting undesirable states, the central authority then synthesises norms aimed to avoid them in the future. We demonstrate the effectiveness of our approach through experimental results. © 2015 ACM. This work was funded by AT (CONSOLIDER CSD 2007 - 0022), EVE (TIN 2009 - 14702 -C 02 - 01,TIN 2009 - 14702 -C 02 - 02), COR (TIN 2012 - 38876 -C 02 - 01 / 02), MECER (201250 E 053), and the Generalitat of Catalunya (2009 -SGR- 1434). Michael Wooldridge was supported by the ERC under advanced grant 291528 (“RACE”) Peer Reviewe...|$|R
