3519|0|Public
5|$|The {{hash value}} that this class {{associates}} with each object, its identityHashCode, {{is guaranteed to}} remain fixed for the lifetime of an object but is otherwise arbitrary. Because the identityHashCode is constructed only once per object, and {{is not required to}} be related to the object's address or value, its construction may involve slower computations such as the call to a random or <b>pseudorandom</b> number generator. For instance, Java 8 uses an Xorshift <b>pseudorandom</b> number generator to construct these values.|$|E
5|$|However, random or <b>pseudorandom</b> hash values may be {{used when}} hashing objects by their {{identity}} rather than by their value. For instance, this is done using linear probing by the IdentityHashMap class of the Java collections framework.|$|E
25|$|Fibonacci {{numbers are}} used by some <b>pseudorandom</b> number generators.|$|E
25|$|The MD5-SHA-1 {{combination}} in the <b>pseudorandom</b> function (PRF) {{was replaced}} with SHA-256, with an option to use cipher suite specified PRFs.|$|E
25|$|The <b>pseudorandom</b> {{function}} {{splits the}} input data {{in half and}} processes each one with a different hashing algorithm (MD5 and SHA-1), then XORs them together to create the MAC. This provides protection even if one of these algorithms {{is found to be}} vulnerable.|$|E
25|$|Uses of Monte Carlo methods require {{large amounts}} of random numbers, and it was their use that spurred the {{development}} of <b>pseudorandom</b> number generators, which were far quicker to use than the tables of random numbers that had been previously used for statistical sampling.|$|E
25|$|The {{applications}} of cycle detection include testing {{the quality of}} <b>pseudorandom</b> number generators and cryptographic hash functions, computational number theory algorithms, detection of infinite loops in computer programs and periodic configurations in cellular automata, and the automated shape analysis of linked list data structures.|$|E
25|$|In {{the field}} of <b>pseudorandom</b> number generation, a {{candidate}} generator of undetermined quality whose output sequence lies too far outside the typical set by some statistical criteria is rejected as insufficiently random. Thus, although the typical set is loosely defined, practical notions arise concerning sufficient typicality.|$|E
25|$|Low-discrepancy {{sequences}} {{are often}} used instead of random sampling from a space as they ensure even coverage and normally have a faster order of convergence than Monte Carlo simulations using random or <b>pseudorandom</b> sequences. Methods based on their use are called quasi-Monte Carlo methods.|$|E
25|$|Randomness is {{most often}} used in {{statistics}} to signify well-defined statistical properties. Monte Carlo methods, which rely on random input (such as from random number generators or <b>pseudorandom</b> number generators), are important techniques in science, as, for instance, in computational science. By analogy, quasi-Monte Carlo methods use quasirandom number generators.|$|E
25|$|SA {{errors are}} {{actually}} <b>pseudorandom,</b> {{generated by a}} cryptographic algorithm from a classified seed key available only to authorized users (the U.S. military, its allies {{and a few other}} users, mostly government) with a special military GPS receiver. Mere possession of the receiver is insufficient; it still needs the tightly controlled daily key.|$|E
25|$|Backgammon {{software}} {{has been}} developed not only to play and analyze games, but also to facilitate play between humans over the internet. Dice rolls are provided by random or <b>pseudorandom</b> number generators. Real-time online play began with the First Internet Backgammon Server in July 1992, but there are now a range of options; {{many of which are}} commercial.|$|E
25|$|In cryptography, {{a stream}} cipher is a {{symmetric}} key cipher where plaintext bits are {{combined with a}} <b>pseudorandom</b> cipher bit stream, typically by an exclusive-or (xor) operation. In a stream cipher the plaintext digits are encrypted one at a time, and the transformation of successive digits varies during the encryption. Also known as a state cipher, the stream cipher was invented in 1917 by Gilbert Sandford Vernam at Bell Labs.|$|E
25|$|Determining {{the cycle}} {{length of a}} <b>pseudorandom</b> number {{generator}} is one measure of its strength. This is the application cited by Knuth in describing Floyd's method. Brent describes the results of testing a linear congruential generator in this fashion; its period {{turned out to be}} significantly smaller than advertised. For more complex generators, the sequence of values in which the cycle is to be found may not represent the output of the generator, but rather its internal state.|$|E
25|$|One way to {{generate}} random samples from a binomial distribution {{is to use}} an inversion algorithm. To do so, one must calculate the probability that P(X=k) for all values k from 0 through n. (These probabilities should sum to a value close to one, in order to encompass the entire sample space.) Then by using a <b>pseudorandom</b> number generator {{to generate}} samples uniformly between 0 and 1, one can transform the calculated samples U into discrete numbers by using the probabilities calculated in step one.|$|E
25|$|Brent claims that, on average, his cycle finding {{algorithm}} {{runs around}} 36% {{more quickly than}} Floyd's and that it speeds up the Pollard rho algorithm by around 24%. He also performs an average case analysis for a randomized version of the algorithm in which the sequence of indices traced by the slower of the two pointers is not the powers of two themselves, but rather a randomized multiple of the powers of two. Although his main intended application was in integer factorization algorithms, Brent also discusses applications in testing <b>pseudorandom</b> number generators.|$|E
25|$|This {{is useful}} in {{computer}} science since most data structures have members with 2X possible values. For example, a byte has 256 (28) possible values (0–255). Therefore, to fill a byte or bytes with random values a random number generator which produces values 1–256 can be used, the byte taking the output value −nbsp&1. Very large Fermat primes are of particular interest in data encryption for this reason. This method produces only <b>pseudorandom</b> values as, after Pnbsp&−nbsp&1 repetitions, the sequence repeats. A poorly chosen multiplier can result in the sequence repeating sooner than Pnbsp&−nbsp&1.|$|E
25|$|Much of the {{theoretical}} work in cryptography concerns cryptographic primitives—algorithms with basic cryptographic properties—and their relationship to other cryptographic problems. More complicated cryptographic tools are then built from these basic primitives. These primitives provide fundamental properties, which are used to develop more complex tools called cryptosystems or cryptographic protocols, which guarantee one or more high-level security properties. Note however, that the distinction between cryptographic primitives and cryptosystems, is quite arbitrary; for example, the RSA algorithm is sometimes considered a cryptosystem, and sometimes a primitive. Typical examples of cryptographic primitives include <b>pseudorandom</b> functions, one-way functions, etc.|$|E
25|$|One {{approach}} to non-equilibrium statistical mechanics is to incorporate stochastic (random) behaviour into the system. Stochastic behaviour destroys {{information contained in}} the ensemble. While this is technically inaccurate (aside from hypothetical situations involving black holes, a system cannot in itself cause loss of information), the randomness is added to reflect that information of interest becomes converted over time into subtle correlations within the system, or to correlations between the system and environment. These correlations appear as chaotic or <b>pseudorandom</b> influences on the variables of interest. By replacing these correlations with randomness proper, the calculations can be made much easier.|$|E
25|$|For a long time, {{number theory}} in general, {{and the study}} of prime numbers in particular, was seen as the {{canonical}} example of pure mathematics, with no applications outside of the self-interest of studying the topic with the exception of use of prime numbered gear teeth to distribute wear evenly. In particular, number theorists such as British mathematician G. H. Hardy prided themselves on doing work that had absolutely no military significance. However, this vision was shattered in the 1970s, when it was publicly announced that prime numbers could be used {{as the basis for the}} creation of public key cryptography algorithms. Prime numbers are also used for hash tables and <b>pseudorandom</b> number generators.|$|E
25|$|Some {{retrograde}} and anterograde amnesics {{are capable}} of non-declarative memory, including implicit learning and procedural learning. For example, some patients show improvement on the <b>pseudorandom</b> sequences experiment as healthy people do. Therefore, procedural learning can proceed independently of the brain system required for declarative memory. According to fMRI studies, the acquisition of procedural memories activates the basal ganglia, the premotor cortex and the supplementary motor area, regions which are not normally associated {{with the formation of}} declarative memories. This type of dissociation between declarative and procedural memory can also be found in patients with diencephalic amnesia such as Korsakoff's syndrome. Another example demonstrated by some patients, such as K.C. and H.M, who have medial temporal damage and anterograde amnesia, still have perceptual priming. Those patients did well in the word fragment completion test.|$|E
25|$|To help users {{protect their}} Battle.net accounts, Blizzard {{implemented}} a two-factor authentication {{option for the}} service. Launched in 2008, this was initially through a separate device that could be purchased from Blizzard, encoded with the user's credentials. The device fit on a keychain and would generate <b>pseudorandom</b> numbers linked to the player's account, which they would enter when logging into Battle.net to affirm their identity. Later, Blizzard introduced the Battle.net mobile application for iOS and Android platforms in 2009, replicating the same functionality. An update during June 2016 simplified the process, allowing the user, when logging into their Battle.net account from a computer, to simply press a single button on their connected mobile device to affirm their authenticity. Though not required to use Battle.net, some game aspects require the user to enable two-factor authentication through either the device or mobile app, such as Diablo IIIs Auction House (which uses real money transactions).|$|E
25|$|To {{counter the}} virus' use of <b>pseudorandom</b> domain names, Internet Corporation for Assigned Names and Numbers (ICANN) and several TLD {{registries}} began in February 2009 a coordinated barring of transfers and registrations for these domains. Variant D counters this by generating daily {{a pool of}} 50,000 domains across 110 TLDs, from which it randomly chooses 500 to attempt for that day. The generated domain names were also shortened from 8–11 to 4–9 characters {{to make them more}} difficult to detect with heuristics. This new pull mechanism (which was disabled until April 1, 2009) is unlikely to propagate payloads to more than 1% of infected hosts per day, but is expected to function as a seeding mechanism for the virus' peer-to-peer network. The shorter generated names, however, are expected to collide with 150–200 existing domains per day, potentially causing a distributed denial-of-service attack (DDoS) on sites serving those domains. However the large number of generated domains and the fact that not every domain will be contacted for a given day will probably prevent DDoS situations.|$|E
500|$|Python {{has a large}} {{standard}} library, commonly {{cited as}} one of Python's greatest strengths, providing tools suited to many tasks. This is deliberate and {{has been described as}} a [...] "batteries included" [...] Python philosophy. For Internet-facing applications, many standard formats and protocols (such as MIME and HTTP) are supported. Modules for creating graphical user interfaces, connecting to relational databases, generating <b>pseudorandom</b> numbers, arithmetic with arbitrary precision decimals, manipulating regular expressions, and doing unit testing are also included.|$|E
500|$|Von Neumann's {{hydrogen}} bomb work was {{played out in}} the realm of computing, where he and Stanislaw Ulam developed simulations on von Neumann's digital computers for the hydrodynamic computations. During this time he contributed {{to the development of the}} Monte Carlo method, which allowed solutions to complicated problems to be approximated using random numbers. His algorithm for simulating a fair coin with a biased coin is used in the [...] "software whitening" [...] stage of some hardware random number generators. Because using lists of [...] "truly" [...] random numbers was extremely slow, von Neumann developed a form of making <b>pseudorandom</b> numbers, using the middle-square method. Though this method has been criticized as crude, von Neumann was aware of this: he justified it as being faster than any other method at his disposal, writing that [...] "Anyone who considers arithmetical methods of producing random digits is, of course, in a state of sin." [...] Von Neumann also noted that when this method went awry it did so obviously, unlike other methods which could be subtly incorrect.|$|E
500|$|For most {{applications}} of hashing, {{it is necessary}} to compute the hash function for each value every time that it is hashed, rather than once when its object is created. In such applications, random or <b>pseudorandom</b> numbers cannot be used as hash values, because then different objects with the same value would have different hashes. And cryptographic hash functions (which are designed to be computationally indistinguishable from truly random functions) are usually too slow to be used in hash tables. Instead, other methods for constructing hash functions have been devised. These methods compute the hash function quickly, and can be proven to work well with linear probing. In particular, linear probing has been analyzed from the framework of -independent hashing, a class of hash functions that are initialized from a small random seed and that are equally likely to map any -tuple of distinct keys to any -tuple of indexes. The parameter [...] {{can be thought of as}} a measure of hash function quality: the larger [...] is, the more time it will take to compute the hash function but it will behave more similarly to completely random functions.|$|E
2500|$|RC4 {{generates a}} <b>pseudorandom</b> stream of bits (a keystream). As with any stream cipher, {{these can be}} used for {{encryption}} by combining it with the plaintext using bit-wise exclusive-or; decryption is performed the same way (since exclusive-or with given data is an involution). (This is similar to the Vernam cipher except that generated <b>pseudorandom</b> bits, rather than a prepared stream, are used.) To generate the keystream, the cipher makes use of a secret internal state which consists of two parts: ...|$|E
2500|$|<b>Pseudorandom</b> number {{generators}} {{are widely}} available in computer language libraries and application programs. They are, almost universally, unsuited to cryptographic use as they do not evade the deterministic nature of modern computer equipment and software. A class of improved random number generators is termed cryptographically secure <b>pseudorandom</b> number generators, but even they require random seeds external to the software to work as intended. These can be obtained via extractors, if done carefully. The measure of [...] sufficient randomness in extractors is min-entropy, a value related to Shannon entropy through Rényi entropy; Rényi entropy is also used in evaluating randomness in cryptographic systems. [...] Although related, the distinctions among these measures mean that a random variable with high Shannon entropy is not necessarily satisfactory for use in an extractor and so for cryptography uses.|$|E
2500|$|The {{client and}} server {{then use the}} random numbers and PreMasterSecret to compute a common secret, called the [...] "master secret". All other key data for this {{connection}} is derived from this master secret (and the client- and server-generated random values), which is passed through a carefully designed <b>pseudorandom</b> function.|$|E
2500|$|A {{frequent}} {{problem in}} statistical simulations (the Monte Carlo method) is {{the generation of}} pseudo-random numbers that are distributed in a given way. Most algorithms {{are based on a}} <b>pseudorandom</b> number generator that produces numbers X that are uniformly distributed in the interval [...] These random variates X are then transformed via some algorithm to create a new random variate having the required probability distribution.|$|E
2500|$|Randomness {{intrinsically}} {{generated by}} the system. This is also called pseudorandomness and is the kind used in pseudo-random number generators. There are many algorithms (based on arithmetics or cellular automaton) to generate <b>pseudorandom</b> numbers. The behavior of the system can be determined by knowing the seed state and the algorithm used. These methods are often quicker than getting [...] "true" [...] randomness from the environment.|$|E
2500|$|Monte Carlo {{simulations}} {{are typically}} {{characterized by a}} large number of unknown parameters, many of which are difficult to obtain experimentally. Monte Carlo simulation methods do not always require truly random numbers to be useful (although, for some applications such as primality testing, unpredictability is vital). Many of the most useful techniques use deterministic, <b>pseudorandom</b> sequences, making it easy to test and re-run simulations. The only quality usually necessary to make good simulations is for the pseudo-random sequence to appear [...] "random enough" [...] in a certain sense.|$|E
2500|$|Being secret, {{the work}} of von Neumann and Ulam {{required}} a code name. A colleague of von Neumann and Ulam, Nicholas Metropolis, suggested using the name Monte Carlo, which refers to the Monte Carlo Casino in Monaco where Ulam's uncle would borrow money from relatives to gamble. Using lists of [...] "truly random" [...] random numbers was extremely slow, but von Neumann developed a way to calculate <b>pseudorandom</b> numbers, using the middle-square method. Though this method has been criticized as crude, von Neumann was aware of this: he justified it as being faster than any other method at his disposal, and also noted that when it went awry it did so obviously, unlike methods that could be subtly incorrect.|$|E
2500|$|Instead {{of using}} a rotodome, a moving radar found on some AEW aircraft, the EL/W-2085 uses an active {{electronically}} scanned array (AESA) – an active phased array radar. This radar consists of an array of transmit/receive (T/R) modules that allow a beam to be electronically steered, making a physically rotating rotodome unnecessary. AESA radars operate on a <b>pseudorandom</b> set of frequencies and also have very short scanning rates, which makes them difficult to detect and jam. [...] Up to 100 targets can be tracked simultaneously to a range of 200 nmi (370km), while at the same time, over a dozen air-to-air interceptions or air-to-ground attacks can be guided. The radar equipment of the Israeli CAEW consists of each one L-band radar left and right sides on the fuselage and each one S-band antenna in nose and tail. The phased array allows positions of aircraft on operator screens to be updated every 2–4 seconds, rather than every 20–40 seconds as is the case on the rotodome AWACS.|$|E
5000|$|A <b>pseudorandom</b> {{generator}} {{against a}} family of adversaries [...] with bias [...] is {{a family of}} <b>pseudorandom</b> generators , where [...] is a <b>pseudorandom</b> generator against [...] with bias [...] and seed length [...]|$|E
5000|$|... #Subtitle level 3: One {{additional}} <b>pseudorandom</b> bit implies polynomially more <b>pseudorandom</b> bits ...|$|E
