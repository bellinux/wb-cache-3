0|38|Public
40|$|Abstract. Accurate {{estimation}} of attributes such as effort, quality and risk is of major concern in software life cycle. Majority of the approaches available in literature for estimation {{are based on}} regression analysis and neural network techniques. In this study, Chidamber and Kemerer soft-ware metrics suite has been considered to provide requisite input data to train the artificial intelligence models. Two artificial intelligence (AI) techniques {{have been used for}} <b>predicting</b> <b>maintainability</b> viz., neural net-work and neuro-genetic algorithm (a hybrid approach of neural network and genetic algorithm). These techniques are applied for predicting main-tainability on a case study i. e., Quality Evaluation System (QUES) and User Interface System (UIMS). The performance was evaluated based on the different performance parameters available in literature such as: Mean Absolute Relative Error (MARE), Mean absolute error (MAE), Root Mean Square Error (RMSE), and Standard Error of the Mean (SEM) etc. It is observed that the hybrid approach utilizing Neuro-GA achieved better result for <b>predicting</b> <b>maintainability</b> when compared with that of neural network...|$|R
40|$|This paper {{presents}} {{a method to}} compute metrics that <b>predict</b> <b>maintainability</b> of a system with respect to its event processing. The metrics reflect the complexity of event dependencies in an object-oriented system. They can be computed from a UML design or from a program code. The maintainability factor is obtained by comparing the calculated metrics with the metrics for a design conforming to a predefined architectural framework. The framework is claimed to minimize event dependencies...|$|R
40|$|This paper {{describes}} {{the results of}} three studies on object oriented metrics and also a reusability study currently in progress. The first study investigates the maintainability of object oriented software versus procedural software. The second one examines the relationship between programmer productivity, software reuse, and the object oriented paradigm. The third study proposes and validates a new suite of object oriented metrics based on the MOOSE metrics developed by Chidamber and Kemerer [Chid 91]. These new metrics are shown to <b>predict</b> <b>maintainability</b> from object oriented designs and source code...|$|R
40|$|This {{paper will}} mainly {{focus on the}} metrics for {{maintainability}} proposed by Wei Li and Sallie Henry in their research Object-Oriented Metrics that <b>Predict</b> <b>Maintainability</b> [1]. There they suggest metrics that is relevant for <b>predicting</b> <b>maintainability</b> of an object-oriented (OO) system. We will analyze their work {{from the viewpoint of}} software metrics given by Fenton and Pfleeger in Software Metrics [2]. Metrics “You cannot control what you cannot measure”. Metrics are built up from measurement, for example the number of pupils in a class can be measured and said to be the metric Pupils in Class. In software industry metrics is useful in <b>predicting</b> cost, <b>maintainability</b> efforts etc., if we don’t have any metrics of what we are doing, it will be if not impossible at least very hard to predict the previous mentioned attributes. There are two main categories of measurements; direct and indirect. The direct ones are e. g. the number of pupils in class whilst the indirect could be the percentage of pupils absent. If we use a metric it is important that it is widely adopted and well defined, or else we have to make an unambiguous definition so that every one interprets the metric in the same way. Software metrics measure certain aspects of software [1, 112]. Maintainability Most software is exercised repeatedly, and some of us are responsible for the upkeep of delivered software [2, 354]. Maintainability is the attribute for how easy/hard and time consuming the process of maintaining the software is. For the software to be maintainable {{we want it to be}} easy to understand, enhance or correct. When analyzing maintenance we can in general terms choose between a product based or a process based approach. In this paper we will mainly focus on the product based analyzes. The research by Li and Henry Li and Henry conducted a case study with the goal to find OO metrics that correlated with maintainability. They have studied two commercial systems by validating the maintenance effort put in to them during three years. The systems they have studied are...|$|R
40|$|Quality {{enhancement}} has {{now become}} a major factor in software production. Software metrics have demonstrated their ability to predict source code complexity at design time and to <b>predict</b> <b>maintainability</b> of a software system from source code. Obviously metrics can assist software developers in the enhancement of quality. Tools which automatically generate metrics for Ada are increasing in popularity. This paper describes an existing tool which produces software metrics for Ada that may be used throughout the software development life cycle. This tool, while calculating established metrics, also calculates a new structure metric that is designed to capture communication interface complexity. Measuring designs written using Ada as a PDL allows designers early feedback on possible problem areas in addition to giving direction on testing strategies...|$|R
40|$|AbstractIn this study, empirically {{investigates the}} {{relationship}} of existing class level object-oriented metrics with a quality parameter i. e., maintainability. Here, different subset of Object-Oriented software metrics have been considered to provide requisite input data to design the models for <b>predicting</b> <b>maintainability</b> using Neuro-Genetic algorithm (hybrid approach of neural network and genetic algorithm). This technique is applied to estimate maintainability on two different case studies such as Quality Evaluation System (QUES) and User Interface System (UIMS). The performance parameters of this technique are evaluated based {{on the basis of}} Mean absolute error (MAE), Mean Absolute Relative Error (MARE), Root Mean Square Error (RMSE), and Standard Error of the Mean (SEM). The results reported that the identified subset metrics demonstrated an improved maintainability prediction with higher accuracy...|$|R
40|$|Accurate {{software}} metrics-based maintainability prediction can {{not only}} enable developers to better identify the determinants of software quality and thus help them improve design or coding, it can also provide managers with useful information to help them plan the use of valuable resources. In this paper, we employ a novel exploratory modeling technique, multiple adaptive regression splines (MARS), to build software maintainability prediction models using the metric data collected from two different object-oriented systems. The prediction accuracy of the MARS models are evaluated and compared using multivariate linear regression models, artificial neural network models, regression tree models, and support vector models. The results suggest that for one system MARS can <b>predict</b> <b>maintainability</b> more accurately than the other four typical modeling techniques, and that for the other system MARS is as accurate as the best modeling technique. Department of Computin...|$|R
40|$|Competing Interests: The {{authors have}} {{declared}} that no competing interests exist Software maintainability {{has been an}} important external quality attribute that concerns both styles of software development, the proprietary model as well as open source. As lots of open source software are predominantly built using the OO paradigm, there exists a need for empirical validation with respect to certain quality aspects especially maintainability. There are a few studies in the past which use code metrics and a few which use design metrics, much earlier in the software development life cycle to <b>predict</b> <b>maintainability.</b> In addition, there are studies which apply both code as well as design metrics to evaluate maintainability. The objective of this research is to perform an empirical comparison of two popular OO metrics suites, the Martin suite and the CK suite on four open source software systems by analysing a few key design metrics such as size, coupling, complexity, inheritance and stability. Two important observations were made with this empirical study. First, between the two OO suite of design metrics, the prediction model developed using Martin metrics scores better than the model developed using the CK suite. Second, the combination of Martin and CK suites is helpful in <b>predicting</b> the <b>maintainability</b> of OO software, with a predictive accuracy of 66. 7 %, better than that of the models constructed by either Martin metrics or by the CK metrics individually...|$|R
40|$|A {{regression}} model to <b>predict</b> the <b>maintainability</b> of wet areas was developed. The model {{was derived from}} comprehensive condition surveys, interviews with professionals and defect analysis of 96 buildings. The study showed that plumbing selection, access for fitting maintenance, material maintainability, usage and construction quality are the most significant parameters associated with the maintainability of wet areas. Maintainability, wet area, multiple regression analysis, maintenance prediction model,...|$|R
40|$|Maintainability is {{a measure}} of the ease with which a {{software}} system can be maintained. In this paper we propose a quantitative definition of maintainability, and discuss means to estimate the maintainability of a software system on the basis of a static analysis of its deliverables. Such an estimation effort is useful inasmuchas it allows us to <b>predict</b> the <b>maintainability</b> of a software system at delivery time...|$|R
40|$|Coupling Between Objects and Cyclomatic Complexity {{have long}} been used to measure {{software}} quality and <b>predict</b> <b>maintainability</b> and reliability of software systems prior to release. In particular, Coupling Between Objects {{has been shown to}} correlate with fault-proneness and maintainability of a system at the class level. We propose a new set of metrics based on a fusion of Coupling Between Objects and Cyclomatic Complexity that can be superior to Coupling Between Objects alone at predicting class quality. The new metrics use Cyclomatic Complexity to 1) augment Coupling Between Objects counting to assign a strength of a coupling between two classes and 2) determine the complexity of a method invocation chain through the transitive relation of invocations involved in a coupling. This results in a measure that identifies objects that are coupled to highly complex methods or method invocation chains. The metrics were implemented as an Eclipse Plug-in and an analysis of two industry Java projects, ConnectorJ and Hibernate, demonstrates the correlation between the new metrics and post-release defects identified in system change logs...|$|R
40|$|Estimation of {{different}} parameters for object-oriented systems development such as effort, quality, and risk is of major concern in software development life cycle.  Majority of the approaches available in literature for estimation {{are based on}} regression analysis and neural network techniques.  Also  it is observed that numerous software metrics are being used as input for estimation. In this study, object-oriented metrics have been considered to provide requisite input data to design the models for prediction of maintainability using three artificial intelligence (AI) techniques such as neural network, Neuro-Genetic (hybrid approach of neural network and genetic algorithm) and Neuro-PSO (hybrid approach of neural network and Particle Swarm Optimization). These three AI techniques are applied to <b>predict</b> <b>maintainability</b> on two case studies such as User Interface System (UIMS) and Quality Evaluation System (QUES). The performance of all three AI techniques were evaluated based on the various parameters available in literature such as mean absolute error  (MAE) and  mean Absolute Relative Error (MARE). Experimental {{results show that the}} hybrid technique utilizing Neuro-PSO technique achieved better result for prediction of maintainability when compared with the other two...|$|R
40|$|The Metrics Group of Virginia Tech {{has been}} {{studying}} the object oriented paradigm and how it relates to software maintenance and software reusability {{in an attempt to}} make programmers more productive. Software reuse is the key to increased productivity within the software development process. By reusing existing software, time and effort are saved in the testing and maintenance phases of a software product. The object oriented paradigm is designed to enhance software reusability through encapsulation and inheritance (CoxB 86, Meye 87). This paper describes the results of three studies on object oriented metrics and also a reusability study currently in progress. The first study investigates the maintainability of object oriented software versus procedural software. The second one examines the relationship between programmer productivity, software reuse, and the object oriented paradigm. The third study proposes and validates a new suite of object oriented metrics based on the MOOSE metrics developed by Chidamber and Kemerer (Chid 91). These new metrics are shown to <b>predict</b> <b>maintainability</b> from object oriented designs and source code...|$|R
40|$|Abstract. Estimation of {{different}} parameters for object-oriented systems development such as effort, quality, and risk is of major concern in software development life cycle. Majority of the approaches available in literature for estimation {{are based on}} regression analysis and neural network techniques. Also {{it is observed that}} numerous software metrics are being used as input for estimation. In this study, object-oriented metrics have been considered to provide requisite input data to design the models for prediction of maintainability using three artificial intelligence (AI) techniques such as neural network, Neuro-Genetic (hybrid approach of neural network and genetic algorithm) and Neuro-PSO (hybrid ap-proach of neural network and Particle Swarm Optimization). These three AI techniques are applied to <b>predict</b> <b>maintainability</b> on two case studies such as User Interface System (UIMS) and Quality Evalua-tion System (QUES). The performance of all three AI techniques were evaluated based on the various parameters available in literature such as mean absolute error (MAE) and mean Absolute Relative Error (MARE). Experimental results show that the hybrid technique utilizing Neuro-PSO technique achieved better result for prediction of maintainability when compared with the other two...|$|R
40|$|It is {{generally}} accepted {{that the quality}} of the information system (IS) is highly dependent on decisions made early in the IS development. Conceptual data model is a key artifact built at the early phases of the IS life cycle, therefore its quality influence on the quality of IS which is finally implemented. We focus this paper on the maintainability of conceptual data models, because {{it is one of the}} most crucial quality characteristic. As maintainability is an external quality attribute that can only be measured once an IS is finished or nearly finished, our idea is to present a set of measures for measuring the structural complexity of Entity Relationships diagram (ERD), whose values can be obtained at the early phases of the IS life cycle, and based on these metrics values we will be able to <b>predict</b> ERD <b>maintainability.</b> For building the prediction model, we have used an extension of the original Knowledge Discovery in Databases (KDD) : the Fuzzy Prototypical Knowledge Discovery (FPKD) that consists of the search for fuzzy prototypes that characterise the maintainability of an ERD. These prototypes lay the foundation of the prediction model that will lead us to <b>predict</b> ERD <b>maintainability...</b>|$|R
40|$|Evaluating {{websites}} characteristics {{can take}} several methods. Some of those methods depend on users while others {{depend on the}} websites themselves. There are many software tools and related websites that measure websites attributes such as vulnerability, performance, navigability, structure, etc. This work focuses on studying website structural and related metrics {{that can be used}} as indicators of the complexity of the websites. Websites structural metrics can be also used to <b>predict</b> <b>maintainability</b> requirements. Examples of some structural metrics evaluated in this study include: size, complexity, and speed of page loading. While results showed that structural metrics are not good indicators for the popularity of the website, they may affect indirectly on the popularity through their effect on the performance or the usability of those websites. A tool is developed to collect navigability inlink and outlink metrics. We implemented several preprocessing steps to improve the performance of the developed tool in comparison to other navigability metrics or tools. Although it is not always true, however, a popular website needs to have a high inlink or backlink number where it indicates that such website is known by many users or other websites. On the other hand, outlinks give us indications {{of the structure of the}} website and do not necessary mean less or more popular website...|$|R
40|$|Software must be well {{developed}} and maintainable {{to adapt to}} the constantly changing requirement of the competitive world. In this article, we distinct different software maintainability prediction models and techniques which can help us to <b>predict</b> the <b>maintainability</b> of software, and can lead us to minimum the effort required to fix the faults in the software and the software will be more maintainable. We have gathered our data from different studies focused on the accuracy of the prediction models as criteria. The results of our study showed that there is a little evidence on the accuracy results of the software maintainability prediction models...|$|R
40|$|Graduation date: 1997 An {{analytical}} method for <b>predicting</b> life-cycle <b>maintainability</b> labor costs is developed. The {{purpose of the}} {{analytical method}} is to allow the evaluation of products, based on life-cycle labor cost, early in the design process. The Boeing 737 - 300 / 400 / 500 Bleed Air Control System {{is used as a}} test model, and the results of the analysis are compared with historical data from this system. Four prospective design changes to the Bleed Air Control System are analyzed to demonstrate the ability of the analytical method to compare different designs or design changes...|$|R
40|$|This {{contribution}} {{presents a}} new approach, based on Fuzzy Prototypical Knowledge Discovery, to <b>predict</b> the <b>maintainability</b> of class diagrams done using the Unified Modelling Language (UML), which has great importance {{on the final}} quality of object-oriented information systems (OOIS). The prediction model is built from metrics values obtained at the early phases of OOIS life-cycle. We will start with Fuzzy Prototypical Knowledge Discovery process (FPKD) for finding Fuzzy Deformable Prototypes of class diagram maintainability, and later we will predict a real case class diagram maintainability deforming the similar prototypes using the degree of compatibility with them...|$|R
40|$|One of {{the goals}} of Service-Oriented Computing (SOC) is to design loosely coupled modules or {{services}} in the system, so that any changes or modifications to a module or service during maintainabilitywould not effect the other modules of that system because the businesses is more agile and need modifications very often. This paper provides the study of Service Oriented Architecture which is capable of designing the loosely coupled services which will make the maintainability phase much easier and different types of coupling relationships in a SOA. This paper also provides the implementation details of generating the coupling metrics and using which results in <b>predicting</b> the <b>maintainability</b> during design phase by running some statistical tests...|$|R
40|$|Maintenance is an {{important}} activity in the software life cycle. No software product can do without undergoing the process of maintenance. Estimating a software’s maintainability effort and cost {{is not an easy}} task considering the various factors that influence the proposed measurement. Hence, Artificial Intelligence (AI) techniques have been used extensively to find optimized and more accurate maintenance estimations. In this paper, we propose an Evolutionary Neural Network (NN) model to <b>predict</b> software <b>maintainability.</b> The proposed model is based on a hybrid intelligent technique wherein a neural network is trained for prediction and a genetic algorithm (GA) implementation is used for evolving the neural network topology until an optimal topology is reached. The model was applied on a popular open source program, namely, Android. The results are very promising, where the correlation between actual and predicted points reaches 0. 9...|$|R
40|$|Simulation is a {{powerful}} tool for evaluating complex systems. RAPTOR (Rapid Availability Prototyping for Testing Operational Readiness) is a generic simulation developed by the Air Force and modified by the authors that <b>predicts</b> reliability, <b>maintainability,</b> and availability (RM&A) performance of systems and components. RAPTOR is uniquely suited for evaluating communication network system relia-bility, especially systems consisting of expensive components with highly variable availability times. Systems are modeled using a modified version of RAPTOR to compare competing sparing policies to obtain an overall target system availability. The sparing strategies evaluated differ by the order point and delivery time used to populate a common resource pool. The evaluation metric is high-level system availability {{over the life of the}} communication system. Alternative options are provided to the company in determining reorder and delivery strategy. This simplified case study demonstrates a strategy selection algorithm incorporating the RAPTOR simulation model...|$|R
40|$|AbstractXSLT is {{a popular}} {{language}} for implementing both presentation templates in Web applications as well as document and message converters in enterprise applications. The widespread adoption and popularity of XSLT raises the challenge of efficiently managing the evolution of significant amounts of XSLT code. This challenge calls for guidelines and tool support for developing maintainable XSLT code. In this setting, this paper addresses the following question: Can the maintainability of XSL transformations, {{measured in terms of}} code churn in the next revision of a transformation, be predicted using a combination of simple metrics? This question is studied using a dataset extracted from open-source software project repositories. An outcome of this empirical study is a set of statistical models for <b>predicting</b> the <b>maintainability</b> of XSL transformations with relatively high accuracy. In addition, by analyzing the major influencers of code churn in these models, the paper identifies guidelines for designing XSL transformations with reduced future churn...|$|R
40|$|Context: Class {{maintainability}} is {{the likelihood}} that a class can be easily modified. Before releasing an object-oriented software system, {{it is impossible to know}} with certainty when, where, how, and how often a class will be modified. At that stage, this likelihood can be estimated using the internal quality attributes of a class, which include cohesion, coupling, and size. To reduce the future class maintenance efforts and cost, developers are encouraged to carefully test and well document low maintainability classes before releasing the object-oriented system. Objective: We empirically study the relationship between internal class quality attributes (size, cohesion, and coupling) and an external quality attribute (class maintainability). Using statistical techniques, we also construct models based on the selected internal attributes to <b>predict</b> class <b>maintainability.</b> Method: We consider classes of three open-source systems. For each class, we account for two actual maintainability indicators, the number of revised lines of code and the number of revisions in which the class was involved. Using 19 internal quality measures...|$|R
40|$|Software {{architecture}} {{appears to}} be one of the main factors affecting software maintainability. Therefore, in order to be able to <b>predict</b> and assess <b>maintainability</b> early in the development process one needs to be able to measure the high-level design characteristics that affect the change process. To this end, a measurement approach based on precise assumptions derived from the change process is proposed. The change process is based on object-oriented design principles and is partially language independent. Metrics for cohesion, coupling, and visibility are defined in order to capture the difficulty of isolating, understanding, designing and validating changes...|$|R
40|$|Many web {{applications}} {{have evolved}} from simple HTML pages to complex applications {{that are difficult}} to maintain. In order to control the maintenance of web applications quantitative metrics and models for <b>predicting</b> web applications <b>maintainability</b> must be used. This paper introduces new design metrics for measuring the maintainability of web applications from class diagrams. The metrics are based on Web Application Extension (WAE) for UML and measure the design attributes of size, complexity, and coupling. The paper describes an experiment carried out using a CVS repository from a US telecoms web application. A relationship is established between the metrics and maintenance effort measured by the number of lines of code changed...|$|R
40|$|Many web {{applications}} {{have evolved}} from simple HTML pages to complex service-oriented applications that have {{high maintenance cost}}. This high maintenance cost {{is due to the}} heterogeneity of web applications, to the fast Internet evolution and to the fast-moving market which imposes short development cycles and frequent modifications. In order to control the maintenance cost, quantitative metrics for <b>predicting</b> web applications' <b>maintainability</b> must be used. This study introduces class diagram design metrics based on Conallen Web Application Extension for UML. The study will use data from an industrial web application to show the correlation between the class diagram metrics and maintenance effort measured by the number of lines of code changed...|$|R
40|$|As {{the pace}} of {{business}} change increases, service-oriented (SO) solutions should facilitate easier maintainability as underlying business logic and rules change. To date, little effort has been dedicated to considering how the structural properties of coupling and cohesion may impact on the maintainability of SO software products. Moreover, due to the unique design characteristics of Service-Oriented Computing (SOC), existing Procedural and Object-Oriented (OO) software metrics are not sufficient for the accurate measurement of service-oriented design structures. This thesis makes {{a contribution to the}} field of SOC, and Software Engineering in general, by proposing and evaluating a suite of design-level coupling and cohesion metrics for <b>predicting</b> the <b>maintainability</b> of service-oriented software products early in the Software Development LifeCycle (SDLC). The proposed metrics can provide the following benefits: i) facilitate design decisions that could lead to the specification of quality SO designs that can be maintained more easily; ii) identify design problems that can potentially {{have a negative effect on}} the maintainability of existing service-oriented design structures; and iii) support more effective control of maintainability in the earlier stages of SDLC. More specifically, the following research was conducted as part of this thesis: - A formal mathematical model covering the structural and behavioural properties of service-oriented system design was specified. - Software metrics were defined in a precise, unambiguous, and formal manner using the above model. - The metrics were theoretically validated and empirically evaluated in order to determine the success of this thesis as follows: a. Theoretical validation was based on the property-based software engineering measurement framework. All the proposed metrics were deemed as theoretically valid. b. Empirical evaluation employed a controlled experimental study involving ten participants who performed a range of maintenance tasks on two SO systems developed (and measured using the proposed metrics) specifically for this study. The majority of the experimental outcomes compared favourably with our expectations and hypotheses. More specifically, the results indicated that most of the proposed metrics can be used to <b>predict</b> the <b>maintainability</b> of service-oriented software products early in the SDLC, thereby providing evidence for the validity and potential usefulness of the derived metrics. Nevertheless, a broader range of industrial scale experiments and analyses are required to fully demonstrate the practical applicability of the metrics. This has been left to future work...|$|R
40|$|This report {{documents}} the procedures for utilizing {{and maintaining the}} Reliability and Maintainability Model (RAM) developed by the University of Dayton for the NASA Langley Research Center (LaRC). The RAM model <b>predicts</b> reliability and <b>maintainability</b> (R&M) parameters for conceptual space vehicles using parametric relationships between vehicle design and performance characteristics and subsystem mean time between maintenance actions (MTBM) and manhours per maintenance action (MH/MA). These parametric relationships were developed using aircraft R&M data from over thirty different military aircraft of all types. This report describes the general methodology used within the model, the execution and computational sequence, the input screens and data, the output displays and reports, and study analyses and procedures. A source listing is provided...|$|R
40|$|Many web {{applications}} {{have evolved}} from simple HTML pages to complex applications {{that have a}} high maintenance cost. This high maintenance cost {{is due to the}} heterogeneity of web applications, to fast Internet evolution and the fast- moving market which imposes short development cycles and frequent modifications. In order to control the maintenance cost, quantitative metrics for <b>predicting</b> web applications <b>maintainability</b> must be used. This paper provides an exploratory study for new design metrics used for measuring the maintainability of web applications from class diagrams. The metrics are based on Web Application Extension (WAE) for UML and will measure the following design attributes: size, complexity, coupling and reusability. In this study the metrics are applied to two web applications from the telecommunications domain...|$|R
40|$|Many World Wide Web {{applications}} incorporate important {{business assets}} {{and offer a}} convenient way for businesses to promote their services through the Internet. Many of these web applications evolved from simple HTML pages to complex applications which are difficult to maintain. In order to control the maintenance of web applications quantitative metrics and models for <b>predicting</b> web applications’ <b>maintainability</b> must be used. This paper introduces new design metrics for measuring the maintainability of web applications from class diagrams. The metrics are based on Web Application Extension (WAE) for UML and will measure the following design attributes: size, complexity, coupling and reusability. The paper provides a classification of the metrics based on the measurement structure proposed by Kitchenham for theoretical metrics validation. In addition to that, an exploratory experiment {{at the university of}} Illinois is carried out in order to show the relationship between the metrics and understandability and modifiability time...|$|R
40|$|Web {{applications}} incorporate important {{business assets}} {{and offer a}} convenient way for businesses to promote their services through the internet. Many of these web applications have evolved from simple HTML pages to complex applications that have high maintenance cost. The high maintenance cost of web applications {{is due to the}} inherent characteristics of web applications, to the fast internet evolution and to the pressing market which imposes short development cycles and frequent modifications. In order to control the maintenance cost, quantitative metrics and models for <b>predicting</b> web applications' <b>maintainability</b> must be used. Since, web applications are different from traditional software systems, models and metrics for traditional systems can not be applied to web applications. The reason for that is that web applications have special features such as hypertext structure, dynamic code generation and heterogenousity that can not be captured by traditional and object-oriented metrics. In this paper, we will provide a comparative analysis of the different approaches for predicting web applications...|$|R
40|$|Abstract: Many web {{applications}} {{have evolved}} from simple HTML pages to complex applications {{that have a}} high maintenance cost. This high maintenance cost {{is due to the}} heterogeneity of web applications, to fast Internet evolution and the fast-moving market which imposes short development cycles and frequent modifications. In order to control the maintenance cost and to enhance maintainability, quantitative metrics for <b>predicting</b> web applications <b>maintainability</b> must be used. To estimate the maintenance cost and maintainability of software, many software metrics and models have been proposed in the literature. In most of these models researchers have focused on conventional software systems. Very few models are there for web based applications. In this paper we had tried to propose three primary level mathematical models of maintainability assessment for web based applications based on the studies conducted by Emad et al. [3], Heung et al. [2] and Silvia et al. [1]. &# 13; Keywords: Web applications, metrics, maintainability, quantitative, model, observation...|$|R
40|$|Abstract:-The main {{objective}} of this work is to present an application of {{an extension of the}} original Knowledge Discovery in Databases (KDD) process called Fuzzy Prototypical Knowledge Discovery (FPKD) together with a FPKD based prediction model. This technique is applied to Software Engineering measurement. In order to get quality object-oriented information systems (OOIS), it is necessary to assess their quality focusing on diagrams which are available early in the development life-cycle, such as class diagrams. It is in this context where objectoriented measures are necessary to help designers evaluate internal quality characteristics of class diagrams, such as structural complexity, and based on these evaluations, predict external quality characteristics, such as maintainability which is (and will continue to be) {{one of the most critical}} OOIS quality characteristic. Hence, by means of the FPKD process we will build a prediction model for class diagram maintainability based on class diagram structural complexity metrics. Using the FPKD process we will search for fuzzy prototypes for characterising class diagrams maintainability, and later we will use these prototypes for <b>predicting</b> class diagram <b>maintainability</b> in a real case. The data used for prediction was obtained through a controlled experiment...|$|R
40|$|With the {{increasing}} demand for energy over recent decades, the Arctic region has become an interesting area for future exploration and development for {{the oil and gas}} industry. The Arctic region is known to have a harsh climate and a sensitive environment in a remote location. The severe and complex operational conditions in the Arctic can significantly affect the lifetime of a system, the repair processes and the support activities. Hence, {{it is important to consider}} the effect of the operational conditions on the performance of the production facility/systems/equipment and machines, and the related reliability and maintainability characteristics. The aim of this thesis is to study, analyze and suggest a methodology for production performance analysis considering operational conditions. Furthermore, the study focuses on developing and modifying the available statistical approach for prediction of maintainability performance and spare part provision considering the effect of time-dependent and time-independent covariates (influence factors). In this research study, firstly a brief survey of technological and operational challenges in the Arctic region from a maintainability and reliability performance point of view is presented. Then, available statistical approaches for reliability and maintainability performance analysis considering the effect of covariates are reviewed. Thereafter, a methodology is developed and proposed for production performance analysis considering time-dependent and time-independent covariates. The methodology is based on the concept of the proportional hazard model (PHM) and the proportional repair model (PRM), as well as their extensions. A case study from the mining industry is presented to demonstrate how the proposed methodology can be applied. In the second part of this research study, the application of the extension of PHM is developed and discussed in order to <b>predict</b> the <b>maintainability</b> performance considering time-dependent covariates. Furthermore, the existing methods for calculating the number of spare parts on the basis of the reliability characteristics, without the consideration of time-dependent iv ABBAS BARABADI covariates, is modified and improved to enhance their application in the presence of time-dependent covariates. The applications of these methods are demonstrated and discussed using a case study. The result of the study shows that the operational conditions may have a significant effect on the reliability and maintainability performance of a component. This also consequently affects the number of the required spare parts for a given operational condition. The result also shows that considering time-dependent covariates as time-independent covariates may lead to wrong results in the prediction of reliability and maintainability performance as well as the required spare parts. Therefore, before any analysis, the timedependency of covariates must be checked. Thereafter, based on the result of the analysis, the appropriate statistical approach must be selected...|$|R
40|$|PhD thesis in Offshore technologyThis {{thesis is}} based on the {{following}} papers, not yet available in UiS Brage due to copyright:PAPER 1 : Barabadi, A. and Markeset, T. (2011). Reliability and maintainability performance under Arctic conditions, International Journal of Systems Assurance Engineering and Management, DOI 10. 1007 /s 13198 - 011 - 0071 - 8. PAPER 2 : Barabadi, A., Barabady, J. and Markeset, T. (2011). A methodology for throughput capacity analysis of a production facility considering environment condition, Reliability Engineering and System Safety, Vol. 96, No. 12, pp. 1637 - 1646. [URL] 3 : Barabadi, A., Barabady, J. and Markeset, T. (2011). Maintainability analysis considering time-dependent and timeindependent covariates, Reliability Engineering and System Safety, Vol. 96, No. 1, pp. 210 - 217. [URL] 4 : Kayrbekova, D., Barabadi, A. and Markeset, T. (2011). Maintenance cost evaluation of a system to be used in Arctic conditions: A case study, Journal of Quality in Maintenance Engineering, Vol. 17, No. 4, pp. 320 - 336. [URL] 5 : Barabadi, A. (2012). Reliability and spare part provision considering operational environment: A case study, To appear in International Journal of Performability Engineering, Vol. 8, No. 4, pp. 417 - 426. With the increasing demand for energy over recent decades, the Arctic region has become an interesting area for future exploration and development for the oil and gas industry. The Arctic region is known to have a harsh climate and a sensitive environment in a remote location. The severe and complex operational conditions in the Arctic can significantly affect the lifetime of a system, the repair processes and the support activities. Hence, {{it is important to consider}} the effect of the operational conditions on the performance of the production facility/systems/equipment and machines, and the related reliability and maintainability characteristics. The aim of this thesis is to study, analyze and suggest a methodology for production performance analysis considering operational conditions. Furthermore, the study focuses on developing and modifying the available statistical approach for prediction of maintainability performance and spare part provision considering the effect of time-dependent and time-independent covariates (influence factors). In this research study, firstly a brief survey of technological and operational challenges in the Arctic region from a maintainability and reliability performance point of view is presented. Then, available statistical approaches for reliability and maintainability performance analysis considering the effect of covariates are reviewed. Thereafter, a methodology is developed and proposed for production performance analysis considering time-dependent and time-independent covariates. The methodology {{is based on}} the concept of the proportional hazard model (PHM) and the proportional repair model (PRM), as well as their extensions. A case study from the mining industry is presented to demonstrate how the proposed methodology can be applied. In the second part of this research study, the application of the extension of PHM is developed and discussed in order to <b>predict</b> the <b>maintainability</b> performance considering time-dependent covariates. Furthermore, the existing methods for calculating the number of spare parts on the basis of the reliability characteristics, without the consideration of time-dependent iv ABBAS BARABADI covariates, is modified and improved to enhance their application in the presence of time-dependent covariates. The applications of these methods are demonstrated and discussed using a case study. The result of the study shows that the operational conditions may have a significant effect on the reliability and maintainability performance of a component. This also consequently affects the number of the required spare parts for a given operational condition. The result also shows that considering time-dependent covariates as time-independent covariates may lead to wrong results in the prediction of reliability and maintainability performance as well as the required spare parts. Therefore, before any analysis, the timedependency of covariates must be checked. Thereafter, based on the result of the analysis, the appropriate statistical approach must be selected...|$|R
