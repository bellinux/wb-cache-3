0|898|Public
5000|$|<b>Style</b> <b>sheets</b> {{have existed}} {{in one form}} or another since the {{beginnings}} of Standard Generalized Markup Language (SGML) in the 1980s, and CSS was developed to provide <b>style</b> <b>sheets</b> for the web. One requirement for a web <b>style</b> <b>sheet</b> language was for <b>style</b> <b>sheets</b> to come from different sources on the web. Therefore, existing <b>style</b> <b>sheet</b> languages like DSSSL and FOSI were not suitable. CSS, on the other hand, let a document's style be influenced by multiple <b>style</b> <b>sheets</b> by way of [...] "cascading" [...] styles.|$|R
5000|$|Cascading <b>Style</b> <b>Sheets,</b> XSLT, {{and other}} <b>style</b> <b>sheet</b> {{specifications}} ...|$|R
500|$|... <b>style</b> <b>sheet</b> editing. This very {{experimental}} <b>style</b> <b>sheet</b> editor {{was implemented}} using forms ...|$|R
2500|$|Keres had a minus score against Botvinnik, {{but here}} he defeats the world {{champion}} in convincing <b>positional</b> <b>style.</b>|$|R
50|$|The Accelerated Dragon {{generally}} {{features a}} more <b>positional</b> <b>style</b> of play {{than many other}} variations of the Sicilian.|$|R
50|$|Mark Bluvshtein vs Normunds Meizis, Calvia Olympiad 2004, Budapest Defence, Bluvshtein defeats Black's sharp offbeat {{opening in}} precise <b>positional</b> <b>style.</b>|$|R
50|$|In 2003, MSN.com was {{configured}} {{to present}} Opera browsers with a <b>style</b> <b>sheet</b> used for old versions of Microsoft Internet Explorer. Other browsers received either a <b>style</b> <b>sheet</b> tailored to them, {{or at least}} the latest Internet Explorer <b>style</b> <b>sheet.</b> The outdated <b>style</b> <b>sheet</b> that Opera received caused Opera to move a significant amount of MSN.com's content 30 pixels to the left of where it should be, distorting the page and making it appear as though there was a bug in Opera.|$|R
40|$|Abstract. Cascading <b>Style</b> <b>Sheets</b> (CSS) {{are used}} in the HyperText Markup Language (HTML) to {{describe}} the style, size, color, and position of elements in a document. While simple styles are easy to specify, a <b>style</b> <b>sheet</b> for a complex site can become many thousands of lines long. One problem in <b>style</b> <b>sheets</b> is that as they grow there is a tendency for increasing duplication of styles and properties, especially when the <b>style</b> <b>sheet</b> is used for many pages created by multiple authors. Formal Concept Analysis (FCA) is a technique for eliminating redundancy while identifying common concepts in a complex space of property definitions. In this work we use FCA to optimize <b>style</b> <b>sheets</b> to reduce redundancy, merge several rules together, and group the selectors with their declarations to express general formatting concepts. Two problems we solved include converting complex <b>style</b> <b>sheets</b> into a form on which FCA can be applied, and interpreting the resulting concept lattice to avoid introducing too many styles for small concepts. We evaluate the effectiveness of the solution on several <b>style</b> <b>sheets.</b> ...|$|R
50|$|Presentation {{modeling}} {{is concerned}} with the actual look and feel of the pages identified by composition modeling. WebML pages are rendered according to a <b>style</b> <b>sheet.</b> A <b>style</b> <b>sheet</b> dictates the layout of pages and the content elements to be inserted into such layout, and is independent of the actual language used for page rendition. For better reusability, two categories of <b>style</b> <b>sheets</b> are provided: untyped <b>style</b> <b>sheets</b> (also called models) describe the page layout independently of its content, and thus can be applied regardless of the mapping of the page to a given concept; typed <b>style</b> <b>sheets</b> are specified at a finer granularity and thus apply only to pages describing specific concepts.|$|R
5000|$|Finally, <b>style</b> <b>sheets</b> {{are also}} useful if a {{publication}} decides {{to make changes}} to a design - say, make the story text slightly smaller. A user with proper administrative access can make the change to the master <b>style</b> <b>sheet</b> and then [...] "send" [...] the revised <b>style</b> <b>sheets</b> to all users, so the change is automatically reflected.|$|R
5000|$|In most {{programs}} with <b>style</b> <b>sheets,</b> {{there is a}} window or menu listing the <b>style</b> <b>sheets</b> the user has associated with the document. For example, a newspaper may have a <b>style</b> <b>sheet</b> for its story text called [...] "Body copy" [...] that sets the type at 10 point Nimrod with 11 point leading and justified alignment.|$|R
50|$|Igor Platonov vs Lev Alburt, USSR Championship, Kharkov 1967, Reti Opening (A04), 1-0 Platonov {{shows off}} his new <b>positional</b> <b>style</b> {{in his first}} Soviet final.|$|R
50|$|One modern <b>style</b> <b>sheet</b> {{language}} with widespread use is Cascading <b>Style</b> <b>Sheets</b> (CSS), {{which is used}} to style documents written in HTML, XHTML, SVG, XUL, and other markup languages.|$|R
5000|$|Syntax: A <b>style</b> <b>sheet</b> {{language}} needs a syntax {{in order}} to be expressed in a machine-readable manner. For example, here is a simple <b>style</b> <b>sheet</b> written in the CSS syntax:h1 { font-size: 1.5em } ...|$|R
5000|$|The W3C's Web Content Accessibility Guidelines' {{guideline}} no. 3 states [...] "use markup and <b>style</b> <b>sheets</b> {{and do so}} properly."The guideline's checkpoint 3.3, a priority-2 checkpoint, says [...] "use <b>style</b> <b>sheets</b> {{to control}} layout and presentation." ...|$|R
40|$|<b>Style</b> <b>sheets,</b> {{which are}} used to specify the {{appearance}} of documents, are rapidly growing in their importance for the World Wide Web. Cascading <b>Style</b> <b>Sheets</b> are now in widespread use and work on a future Web standard, the Extensible Style Language (XSL), is proceeding at a rapid pace. In this paper, we show how a different <b>style</b> <b>sheet</b> language, PSL, represents an attractive midpoint between CSS and XSL in complexity and power. PSL is based on general language design principles that give it simple syntax, easily-described semantics, and considerable expressive power. Our testbed MPMosaic uses Proteus, a portable <b>style</b> <b>sheet</b> system, to support PSL...|$|R
5000|$|Formatting model: All <b>style</b> <b>sheet</b> {{languages}} support {{some kind}} of formatting model. Most <b>style</b> <b>sheet</b> languages have a visual formatting model that describes, in some detail, how text and other content is {{laid out in the}} final presentation. For example, the CSS formatting model specifies that block-level elements (of which [...] "h1" [...] is an example) extend to fill the width of the parent element. Some <b>style</b> <b>sheet</b> languages also have an aural formatting model.|$|R
40|$|Developing and {{maintaining}} cascading <b>style</b> <b>sheets</b> (CSS) {{is an important}} issue to web developers as they suffer from the lack of rigorous methods. Most existing means rely on validators that check syntactic rules, and on runtime debuggers that check the behavior of a CSS <b>style</b> <b>sheet</b> on a particular document instance. However, the aim of most <b>style</b> <b>sheets</b> is to be applied to an entire set of documents, usually defined by some schema. To this end, a CSS <b>style</b> <b>sheet</b> is usually written w. r. t. a given schema. While usual debugging tools help reducing the number of bugs, they do not ultimately allow to prove properties over the whole set of documents to which the <b>style</b> <b>sheet</b> is intended to be applied. We propose a novel approach to fill this lack. We introduce ideas borrowed from the fields of logic and compile-time verification for the analysis of CSS <b>style</b> <b>sheets.</b> We present an original tool based on recent advances in tree logics. The tool is capable of statically detecting a wide range of errors (such as empty CSS selectors and semantically equivalent selectors), as well as proving properties related to sets of documents (such as coverage of styling information), in {{the presence or absence of}} schema information. This new tool can be used in addition to existing runtime debuggers to ensure a higher level of quality of CSS <b>style</b> <b>sheets...</b>|$|R
40|$|Cascading <b>Style</b> <b>Sheets</b> (CSS) are an {{increasingly}} common way for website developers {{to control the}} look and feel of their web pages. A <b>style</b> <b>sheet</b> allows the website developer to specify the size, font and color of text for an entire website without having to code the information in each page. <b>Style</b> <b>sheets</b> separate the <b>style</b> (or look and feel) of the document from the structure (or the content and ordering of information). CSS is a powerful way for content developers to preserve the desired fonts, colors, and text sizes of HTML documents. However, students with disabilities can also benefit from sites designed using CSS. Individual users can choose to apply their own <b>style</b> <b>sheets</b> to documents, overriding any other <b>style</b> <b>sheets.</b> For example, a person with low vision could modify every CSS-enabled website to display text in yellow on a black background, if those colors enable her to read the text. However, be aware that CSS does not solve all accessibility problems. In fact, both the WC 3 and Section 508 accessibility guidelines stipulate that, for a page to be accessible, the content must be easily understood with the <b>style</b> <b>sheets</b> turned off (i. e. if the user is utilizing an earlier Web browser that doesn't support <b>style</b> <b>sheets,</b> such as Lynx). Office of Post-Secondary Education, Grant #P 333 A 02005...|$|R
30|$|Cascading <b>style</b> <b>sheets</b> (CSS).|$|R
50|$|Improving web {{presentation}} capabilities was a {{topic of}} interest to many in the web community and nine different <b>style</b> <b>sheet</b> languages were proposed on the www-style mailing list. Of these nine proposals, two were especially influential on what became CSS: Cascading HTML <b>Style</b> <b>Sheets</b> and Stream-based <b>Style</b> <b>Sheet</b> Proposal (SSP). Two browsers served as testbeds for the initial proposals; Lie worked with Yves Lafon to implement CSS in Dave Raggett's Arena browser. Bert Bos implemented his own SSP proposal in the Argo browser. Thereafter, Lie and Bos worked together to develop the CSS standard (the 'H' {{was removed from the}} name because these <b>style</b> <b>sheets</b> could also be applied to other markup languages besides HTML).|$|R
50|$|In his {{repertoire}} of openings, Segal included the Alekhine Defense, Larsen Opening and the closed Benoni, among others. He {{had a solid}} <b>positional</b> <b>style,</b> very steady game and was an excellent tactician.|$|R
50|$|Paul Keres vs Mikhail Botvinnik, Moscow 1956 (Alekhine Memorial), Sicilian, Richter-Rauzer Attack (B63), 1-0 Keres had a minus score against Botvinnik, {{but here}} he defeats the world {{champion}} in convincing <b>positional</b> <b>style.</b>|$|R
40|$|Produced in {{co-operation}} with Unipub AS. The {{thesis is}} produced by Unipub AS merely {{in connection with the}} thesis defence. Kindly direct all inquiries regarding the thesis to the copyright holder or the unit which grants the doctorate. Unipub AS is owned by The University Foundation for Student Life (SiO) The topic of this thesis is <b>style</b> <b>sheet</b> languages for structured documents on the web. Due to characteristics of the web – including a screen-centric publishing model, a multitude of output devices, uncertain delivery, strong user preferences, and the possibility for later binding between content and style – the hypothesis is that the web calls for different <b>style</b> <b>sheet</b> languages than does traditional electronic publishing. <b>Style</b> <b>sheet</b> languages that were developed and used prior to the web are analyzed and compared with <b>style</b> <b>sheet</b> proposals for the web between 1993 - 1996. The dissertation describes the design of a web-centric <b>style</b> <b>sheet</b> language known as Cascading <b>Style</b> <b>Sheets</b> (CSS). CSS has several notable features including: cascading, pseudo-classes and pseudo-elements, forward-compatible parsing rules, support for different media types, and a strong emphasis on selectors. Problems in CSS are analyzed, and recommended future research is described. ...|$|R
5000|$|... "Unlike the combinational player, the {{positional}} {{player is}} occupied, first and foremost, with {{the elaboration of}} the position that {{will allow him to}} develop in the unknown future. In playing the <b>positional</b> <b>style,</b> the player must evaluate relational and material parameters as independent variables. ... The <b>positional</b> <b>style</b> gives the player the opportunity to develop a position until it becomes pregnant with a combination. However, the combination is not the final goal of the positional playerit helps him to achieve the desirable, keeping in mind a predisposition for the future development. The pyrrhic victory is the best example of one's inability to think positionally." ...|$|R
40|$|Cascading <b>Style</b> <b>Sheets</b> {{provide a}} {{flexible}} mechanism for governing {{the appearance of}} Web pages. Cascading <b>Style</b> <b>Sheets</b> Level 2 (CSS 2) are an enhancement to the original CSS 1 specification, giving Web page designers additional control over the appearance of Web pages. However, the CSS 2 specification is written in English, leaving open the possibility of ambiguity or inconsistency. We present a formalization of {{a subset of the}} CSS 2 specification using constraints hierarchies to help ensure that potential problems in the specification are caught and corrected. We also comment on the formalization process. 1 Introduction 1. 1 Cascading <b>Style</b> <b>Sheets</b> Cascading <b>style</b> <b>sheets</b> are a mechanism suggested by the World Wide Web Consortium (W 3 C) to fix a fundamental problem with older versions of HTML [...] - their inability to separate content and appearance. By writing different <b>style</b> <b>sheets,</b> Web users can change the appearance of a document without ever having to edit the original document. The most [...] ...|$|R
50|$|A <b>style</b> <b>sheet</b> is {{a feature}} in desktop {{publishing}} programs that store and apply formatting to text. <b>Style</b> <b>sheets</b> are {{a form of}} separation of presentation and content: it creates a separate abstraction to keep the presentation isolated from the text data.|$|R
50|$|In 2007, Catlin {{created a}} <b>style</b> <b>sheet</b> {{language}} {{to expand on}} Cascading <b>Style</b> <b>Sheets</b> (CSS), used to describe presentation semantics of web pages. Catlin continued to work on Sass with co-designer Natalie Weizenbaum through 2008. Sass is now bundled as part of Rails.|$|R
50|$|For {{content in}} {{structured}} documents to be presented, {{a set of}} stylistic rules - describing, for example, colors, fonts and layout - must be applied. A collection of stylistic rules is called a <b>style</b> <b>sheet.</b> <b>Style</b> <b>sheets</b> {{in the form of}} written documents {{have a long history of}} use by editors and typographers to ensure consistency of presentation, spelling and punctuation. In electronic publishing, <b>style</b> <b>sheet</b> languages are mostly used in the context of visual presentation rather than spelling and punctuation.|$|R
40|$|Bachelor's thesis {{deals with}} the {{possibility}} to print HTML and XML documents using cascading <b>style</b> <b>sheets.</b> The first part is devoted to CSS what exactly CSS is {{and how to use}} them for printing, and the issues and the basics of XML. The second part consists of a practical side to create easily customizable Cascading <b>Style</b> <b>Sheets</b> for formatting documents in DocBook. The third and final part identifies areas where Cascading <b>Style</b> <b>Sheets</b> offer insufficient support for quality print output...|$|R
40|$|The text/css Media Type Status of this Memo This memo {{provides}} {{information for the}} Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (1998). All Rights Reserved. Cascading <b>Style</b> <b>Sheets</b> (CSS) is a <b>style</b> <b>sheet</b> language for the World Wide Web. CSS <b>style</b> <b>sheets</b> have been in use since October 1995 using the Media Type text/css without registration; this memo seeks to regularize that position...|$|R
40|$|International audienceDeveloping and {{maintaining}} cascading <b>style</b> <b>sheets</b> (CSS) {{is an important}} issue to web developers as they suffer from the lack of rigorous methods. Most existing means rely on validators that check syntactic rules, and on runtime debuggers that check the behavior of a CSS <b>style</b> <b>sheet</b> on a particular document instance. However, the aim of most <b>style</b> <b>sheets</b> is to be applied to an entire set of documents, usually defined by some schema. To this end, a CSS <b>style</b> <b>sheet</b> is usually written w. r. t. a given schema. While usual debugging tools help reducing the number of bugs, they do not ultimately allow to prove properties over the whole set of documents to which the <b>style</b> <b>sheet</b> is intended to be applied. We propose a novel approach to fill this lack. We introduce ideas borrowed from the fields of logic and compile-time verification for the analysis of CSS <b>style</b> <b>sheets.</b> We present an original tool based on recent advances in tree logics. The tool is capable of statically detecting a wide range of errors (such as empty CSS selectors and semantically equivalent selectors), as well as proving properties related to sets of documents (such as coverage of styling information), in {{the presence or absence of}} schema information. This new tool can be used in addition to existing runtime debuggers to ensure a higher level of quality of CSS <b>style</b> <b>sheets...</b>|$|R
40|$|We {{present in}} this paper a new {{interactive}} method called Imagine that automatically generates <b>style</b> <b>sheets</b> for Web sites. This method aims at satisfying the artistic or aesthetic preferences of the user. This method uses a genetic algorithm to generate <b>style</b> <b>sheets</b> and to find in a search space one or several <b>style</b> <b>sheets</b> that will maximize the user satisfaction. This genetic algorithm is interactive: it generates <b>style</b> <b>sheets,</b> it displays them, and then it asks the user to select those which look the best. In this way, the search for an optimal sheet is guided by the answers provided by the user. Also, this algorithm uses non standard genetic operators based on gene frequencies. We present examples obtained with the actual prototype...|$|R
40|$|This report {{comes out}} of the attempt to {{translate}} the HELM CIC format into OMDoc by XslT <b>style</b> <b>sheets.</b> The experiment and the resulting <b>style</b> <b>sheets</b> are covered in the companion document D 2 c of this report. These <b>style</b> <b>sheets</b> transform the the low-level XML description of the library of the Coq Proof Assistant to the version of OMDoc described in this report. Currently, the <b>style</b> <b>sheets</b> only cover a part of the ultimate transformation, covered by the original HELM format. This part consists in adding inner types (as content-MathML expressions) to the -terms exported from Coq and transforming the proof structure. The generation of natural language, line-breaking considerations, etc. will be implemented later in the task T 2. ...|$|R
50|$|After the complaints, Microsoft {{changed their}} servers {{to present the}} latest version of Opera, version 7, with the <b>style</b> <b>sheet</b> served to {{the latest version of}} Internet Explorer, which {{resolved}} the problem. However, Microsoft continued to serve the outdated <b>style</b> <b>sheet</b> to the older Opera 6.|$|R
50|$|Tableless {{web design}} (or tableless web layout) is a web design {{philosophy}} eschewing {{the use of}} HTML tables for page layout control purposes.Instead of HTML tables, <b>style</b> <b>sheet</b> languages such as Cascading <b>Style</b> <b>Sheets</b> (CSS) are used to arrange elements and text on a web page.|$|R
