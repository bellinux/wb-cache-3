149|11|Public
2500|$|Corporations are {{not allowed}} the {{personal}} deductions allowed to individuals, such as deductions for [...] and the [...] [...] However, most other deductions are allowed. [...] In addition, corporations are allowed certain deductions unique to corporate status. [...] These include a <b>partial</b> <b>deduction</b> for [...] from other corporations, deductions related to , and certain other items.|$|E
50|$|All {{states that}} impose an {{individual}} income tax allow most business deductions. However, many states impose different limits on certain deductions, especially depreciation of business assets. Most {{of the states}} allow non-business deductions {{in a manner similar}} to federal rules. Few allow a deduction for state income taxes, though some states allow a deduction for local income taxes. Eight of the states allow a full or <b>partial</b> <b>deduction</b> for federal income tax.|$|E
40|$|AbstractThis paper {{presents}} a <b>partial</b> <b>deduction</b> method in disjunctive logic programming. <b>Partial</b> <b>deduction</b> in normal logic programs {{is based on}} unfolding between normal clauses, hence it is not applicable to disjunctive logic programs in general. Then we introduce a new <b>partial</b> <b>deduction</b> technique, called disjunctive <b>partial</b> <b>deduction,</b> which preserves the minimal model semantics of positive disjunctive programs and the stable model semantics of normal disjunctive programs. From the procedural side, disjunctive <b>partial</b> <b>deduction</b> is combined with a bottom-up proof procedure of disjunctive logic programs, and top-down <b>partial</b> <b>deduction</b> is introduced for query optimization. Disjunctive <b>partial</b> <b>deduction</b> is also applied to optimizing abductive logic programs and compiling propositional disjunctive programs...|$|E
40|$|Machine (XWAM) for the well-founded {{semantics}} (cf. [Prz 93]). We {{prove that}} <b>partial</b> <b>deductions</b> based on SLS-resolution preserve the well-founded semantics of logic programs. More precisely, {{we show that}} if P is a program and if P 0 is obtained from P by an SLS-partial deduction then the well-founded semantics of the initial program P coincides with the well-founded semantics of the derived program P 0. This result proves that the declarative semantics of logic programs is preserved by SLS-partial deductions and shows that <b>partial</b> <b>deductions</b> based on SLS-resolution can be safely used without alternating in any way the original meaning of the program. Due to the soundness and completeness of SLS-resolution for well-founded semantics, we immediately obtain that SLS-partial deductions also preserve the procedural semantics of logic programs, i. e., that the set of SLS-computed answer substitutions obtained from the initial program P {{is equivalent to the}} set of SLS-computed answer subs [...] ...|$|R
40|$|In this paper, we further {{elaborate}} global {{control for}} partial deduction: For which atoms, among possibly infinitely many, should <b>partial</b> <b>deductions</b> be produced, meanwhile guaranteeing correctness {{as well as}} termination, and providing ample opportunities for finegrained polyvariance? Our solution is based on two ingredients. First, we use the wellknown concept of a characteristic tree to guide abstraction (or generalisation) and polyvariance, and aim for producing one specialised procedure per characteristic tree generated. Previous work along this line failed to provide abstraction correctly dealing with characteristic trees. We show how this can be rectified in an elegant way. Secondly, we structure combinations of atoms and associated characteristic trees in global trees registering "causal" relationships among such pairs. This {{will allow us to}} spot looming non-termination and consequently perform proper generalisation in order to avert the danger, without having to i [...] ...|$|R
50|$|A {{charitable}} gift annuity {{is a gift}} vehicle that falls {{in the category of}} planned giving. It involves a contract between a donor and a charity, whereby the donor transfers cash or property to the charity in exchange for a <b>partial</b> tax <b>deduction</b> and a lifetime stream of annual income from the charity. When the donor dies, the charity keeps the gift.|$|R
40|$|The {{relation}} between <b>partial</b> <b>deduction</b> and the unfold/fold {{approach has been}} a matter of intense discussion. In this paper we consolidate the advantages of the two approaches and provide an extended <b>partial</b> <b>deduction</b> framework in which most of the tupling and deforestation transformations of the fold/unfold approach, as well the current <b>partial</b> <b>deduction</b> transformations, can be achieved. Moreover, most of the advantages of <b>partial</b> <b>deduction,</b> e. g. lower complexity and a more detailed understanding of control issues, are preserved. We build on well-defined concepts in <b>partial</b> <b>deduction</b> and present a conceptual embedding of folding into <b>partial</b> <b>deduction,</b> called conjunctive <b>partial</b> <b>deduction.</b> Two minimal extensions to <b>partial</b> <b>deduction</b> are proposed: using conjunctions of atoms instead of atoms as the principle specialisation entity and also renaming conjunctions of atoms instead of individual atoms. Correctness results for the extended framework (with respect to computed answer semantics and finite failure semantics) are given. Experiments with a prototype implementation are presented, showing that, somewhat to our surprise, conjunctive <b>partial</b> <b>deduction</b> not only handles the removal of unnecessary variables, but also leads to substantial improvements in specialisation for standard <b>partial</b> <b>deduction</b> examples. ...|$|E
40|$|We {{introduce}} in {{this paper}} the notion of <b>partial</b> <b>deduction</b> {{in the framework of}} structural synthesis of programs (SSP). The basic principles of SSP and <b>partial</b> <b>deduction</b> for logic programs are described, and based on this, <b>partial</b> <b>deduction</b> for unconditional computability statements in SSP is defined. Completeness and correctness of <b>partial</b> <b>deduction</b> in the framework of structural synthesis of programs is proved. In addition to this, several tactics and stopping criteria are suggested, and a general algorithm for <b>partial</b> <b>deduction</b> in SSP is outlined...|$|E
40|$|This paper {{presents}} a <b>partial</b> <b>deduction</b> method for disjunctive logic programs. We first show that standard <b>partial</b> <b>deduction</b> in logic programming is not applicable {{as it is}} in the context of disjunctive logic programs. Then we introduce a new <b>partial</b> <b>deduction</b> technique for disjunctive logic programs, and show that it preserves the minimal model semantics of positive disjunctive programs, and the stable model semantics of normal disjunctive programs. Goal-oriented <b>partial</b> <b>deduction</b> is also presented for query optimization. 1 Introduction <b>Partial</b> <b>deduction</b> or partial evaluation is known as one of the optimization techniques in logic programming. Given a logic program, <b>partial</b> <b>deduction</b> derives a more specific program through performing deduction on a part of the program, while preserving the meaning of the original program. Such a specialized program is usually more efficient than the original program when executed. <b>Partial</b> <b>deduction</b> in logic programming was firstly introduced by Kom [...] ...|$|E
60|$|Nor is this all. Life, {{besides being}} thus immensely deteriorated, is also cut short. It is not true, as we {{commonly}} suppose, {{that after a}} disorder or disease from which we have recovered, we are as before. No disturbance of {{the normal course of}} the functions can pass away and leave things exactly as they were. A permanent damage is done--not immediately appreciable, it may be, but still there; and along with other such items which Nature in her strict account-keeping never drops, it will tell against us to the inevitable shortening of our days. Through the accumulation of small injuries it is that constitutions are commonly undermined, and break down, long before their time. And if we call to mind how far the average duration of life falls below the possible duration, we see how immense is the loss. When, to the numerous <b>partial</b> <b>deductions</b> which bad health entails, we add this great final deduction, it results that ordinarily one-half of life is thrown away.|$|R
2500|$|... §179D {{includes}} {{full and}} <b>partial</b> tax <b>deductions</b> for investments in energy efficient commercial building {{that are designed}} to increase the efficiency of energy-consuming functions. Up to $.60 for lighting, $.60 for HVAC and $.60 for building envelope, creating a potential deduction of $1.80 per sq/ft. Interior lighting may also be improved using the Interim Lighting Rule, which provides a simplified process to earn the Deduction, capped at $0.30-$0.60/square foot. Improvements are compared to a baseline of ASHRAE 2001 standards.|$|R
40|$|AbstractThe {{theory of}} {{algebraic}} abstract types specified by positive conditional formulas formed of equations and a definedness predicate is outlined and extended to hierarchical types with “noustrict” operations, partial and even infinite objects. Its model theory {{is based on}} the concept of <b>partial</b> interpretations. <b>Deduction</b> rules are given, too. Models of types are studied where all explicit equations have solutions. The inclusion of nigher-order types, i. e., types comprising higher-order functions leads to an algebraic (“equational”) specification of algebras including sorts with “infinite” objects and higher-order functions (“functionals”) ...|$|R
40|$|AbstractIn the {{framework}} of Lloyd and Shepherdson [16], <b>partial</b> <b>deduction</b> involves the creation of SLDNF-trees for a given program and some goals up to certain halting points. This paper identifies the relation between halting criteria for <b>partial</b> <b>deduction</b> and loop checking (as formalized in [1]). For simplicity, we consider only positive programs and SLD-resolution here. It appears that loop checks for <b>partial</b> <b>deduction</b> must be complete, whereas traditionally, the soundness of a loop check is more important. However, it is also shown that sound loop checks can contribute to improve <b>partial</b> <b>deduction.</b> Finally, a class of complete loop checks suitable for <b>partial</b> <b>deduction</b> is identified...|$|E
40|$|<b>Partial</b> <b>deduction</b> {{is known}} as an {{optimization}} technique in logic programming. In the context of abductive logic programming, however, we present in this paper that normal <b>partial</b> <b>deduction</b> does not preserve explanations for abductive reasoning. Then we provide an alternative method of <b>partial</b> <b>deduction,</b> called abductive <b>partial</b> <b>deduction,</b> which is shown to preserve the meanings of abductive logic programs. A method of partial abduction is also introduced as an optimization for abductive reasoning in logic programs. 1 Introduction <b>Partial</b> <b>deduction</b> [Kom 92] is an optimization technique in logic programming, which performs deduction {{on a part of}} a program while retaining the meaning of the original program. <b>Partial</b> <b>deduction</b> is used in various extensions of logic programming, and is known to preserve the semantics of normal logic programs [TS 84, LS 91, Seki 91, Seki 93] and disjunctive logic programs [SS 94, BD 94]. Abductive logic programming [KKT 92] is one of the extensions of logic progra [...] ...|$|E
40|$|<b>Partial</b> <b>deduction</b> within Lloyd and Shepherdson's {{framework}} transforms different {{atoms of}} a goal independently and therefore fails {{to achieve a}} number of unfold/fold transformations. A recent framework for conjunctive <b>partial</b> <b>deduction</b> allows unfold/fold transformations by specialisation of entire conjunctions, but does not give an actual algorithm for conjunctive <b>partial</b> <b>deduction,</b> and in particular does not address control issues (e. g. how to select atoms for unfolding). Focusing on novel challenges specific to local and global control, we describe a generic algorithm for conjunctive <b>partial</b> <b>deduction,</b> refine it into a fully automatic concrete algorithm, and prove termination and correctness...|$|E
40|$|Recent {{proposals}} for fundamental tax reform {{differ in their}} relative emphasis on interasset, intersectoral, interindustry, and intertemporal distortions. The model in this paper addresses these multiple issues {{in the design of}} taxes on capital incomes. It is capable of measuring the net effects of changes in statutory rates, credits, depreciation allowances, and other features such as the indexation of interest and capital gains. It can compare costs of capital for individual assets, sectors, arid industries, and it weighs these together to evaluate the impact on total investment incentives. In a fully general equilibrium system, it can simulate alternative resource allocations and associated changes in welfare. For the overall evaluation of alternative tax reform proposals, the simultaneous consideration of these multiple effects is crucial. The model is used to compare current law, the Treasury tax reform plan of November 1984, and the Presidents proposal of May 1985. Under the "new view" that dividend taxes have a small effect on investment incentives, both reforms would reduce interasset distortions and the Presidents plan would reduce intersectoral distortions, but the Treasury plan would exacerbate intertemporal distortions. Still, for most parameters, both reforms generate net welfare gains even with slight declines in the capital stock. Under the "old view" that dividend taxes {{have a significant effect on}} investment incentives, both plans reduce corporate taxation through their <b>partial</b> <b>deductions</b> for dividends paid. They thus reduce intersectoral distortions as well as differences among assets. Under this view, the Treasury plan no longer increases intertemporal distortions. Even for the least favorable set of parameters in this case, these reforms raise both the capital stock and the real value of output above their baseline values. Finally, the paper shows alternative allocations of capital among assets, sectors, and industries. ...|$|R
40|$|Public finance is {{strongly}} affected by tax evasion, which implies that public sector resources are very limited. Most {{of the analysis}} on how to fight tax evasion focused on the ways to deter evasion through incentives to people not to evade. This model has a different approach: instead of directly rewarding/punishing agents, it gives incentives to an agent to ensure that some other agents are obliged to declare their revenue. In particular, {{the idea is to}} give incentives to consumers (through itemised deductions) to declare their expenditure. This forces sellers to declare their earnings or, at least, it makes it more costly for them to convince buyers to buy on the black market. I show that under few conditions, for a given level of taxation, it is optimal to allow for <b>partial</b> itemised <b>deductions.</b> ...|$|R
40|$|Corporate finance {{management}} rules are written {{under the assumption}} that financing costs are fully deductible from taxable income. If this assumption is relaxed, such rules need to be revised. We review traditional management tools and propose a new set of guidelines for financial management. The tax reform introduced in Italy, which creates a <b>partial</b> tax <b>deduction</b> for financing costs, offers a case study to measure the impact of such rules on firm’s profitability. The general wisdom among academics and practitioners was of a further pressure on economic performance of firms due to a higher tax burden. Is this concern effective? Did Italian firms paid more taxes in the following years? We checked the effect of the new rules on a sample of 2025 large Italian firms. We did not find a deep impact. Effects are limited to one sector, characterized by operating profitability on sample mean and financial leverage below sample mean. Policy makers are now advised to fine-tune this regulation or to abandon it...|$|R
40|$|<b>Partial</b> <b>deduction</b> {{based upon}} the Lloyd and Shepherdson {{framework}} generates a specialised program given a set of atoms. Each such atom represents all its instances. This can severely limit the specialisation potential of <b>partial</b> <b>deduction.</b> We therefore extend the precision the Lloyd and Shepherdson approach by integrating ideas from constraint logic programming. We formally prove correctness of this new framework of constrained <b>partial</b> <b>deduction</b> and illustrate its potential on some examples...|$|E
40|$|We {{introduce}} in {{this paper}} the notion of <b>partial</b> <b>deduction</b> {{in the framework of}} structural synthesis of programs (SSP). The basic principles of SSP and <b>partial</b> <b>deduction</b> for logic programs are described, and based on this, <b>partial</b> <b>deduction</b> for unconditional computability statements in SSP is defined. Completeness and correctness of <b>partial</b> <b>deduction</b> in the framework of structural synthesis of programs is proved. In addition to this, several tactics and stopping criteria are suggested, and a general algorithm for <b>partial</b> <b>deduction</b> in SSP is outlined. 1 Introduction Whether you are a user of commercial information systems or a software developer, the need to dramatically improve the quality and productivity of software development has become a competitive necessity. Many technologies and techniques are vying for the status of silver bullet [5]. Among these are object orientation, reuse, formal specifications and software factories. It is likely that each one will contribute to improving [...] ...|$|E
40|$|<b>Partial</b> <b>deduction</b> in the Lloyd-Shepherdson {{framework}} cannot achieve certain optimisations {{which are}} possible by unfold/fold transformations. We introduce conjunctive <b>partial</b> <b>deduction,</b> {{an extension of}} <b>partial</b> <b>deduction</b> accommodating such optimisations, e. g., tupling and deforestation, We first present a framework for conjunctive <b>partial</b> <b>deduction,</b> extending the Lloyd-Shepherdson framework by considering conjunctions of atoms (instead of individual atoms) for specialisation and renaming. Correctness results are given for the framework with respect to computed answer semantics, least Herbrand model semantics, and finite failure semantics, Maintaining the well-known distinction between local and global control, we describe a basic algorithm for conjunctive <b>partial</b> <b>deduction,</b> and refine it into a concrete algorithm for which we prove termination, The problem of finding suitable renamings which remove redundant arguments {{turns out to be}} important, so we give an independent technique for this. A fully automatic implementation has been undertaken, which always terminates, Differences between the abstract semantics and Prolog's left-to-right execution motivate deviations from the abstract technique in the actual implementation, which we discuss. The implementation has been tested on an extensive set of benchmarks which demonstrate that conjunctive <b>partial</b> <b>deduction</b> indeed pays off, surpassing conventional <b>partial</b> <b>deduction</b> on a range of small to medium-size programs, while remaining manageable in an automatic and terminating system. (C) 1999 Elsevier Science Inc. All rights reserved. status: publishe...|$|E
5000|$|The Act {{created the}} Energy Efficient Commercial Buildings Tax Deduction, a special {{financial}} incentive {{designed to reduce}} the initial cost of investing in energy-efficient building systems via an accelerated tax deduction under section §179D of the Internal Revenue Code (IRC)http://www.capitalreviewgroup.com/energy-certification/179d-tax-deduction/ Many building owners are unaware that the Act of 2005 includes a tax deduction (§179D) for investments in [...] "energy efficient commercial building property" [...] designed to significantly reduce the heating, cooling, water heating and interior lighting cost of new or existing commercial buildings placed into service between January 1, 2006 and December 31, 2013.§179D includes full and <b>partial</b> tax <b>deductions</b> for investments in energy efficient commercial building {{that are designed to}} increase the efficiency of energy-consuming functions. Up to $.60 for lighting, $.60 for HVAC and $.60 for building envelope, creating a potential deduction of $1.80 per sq/ft. Interior lighting may also be improved using the Interim Lighting Rule, which provides a simplified process to earn the Deduction, capped at $0.30-$0.60/square foot. Improvements are compared to a baseline of ASHRAE 2001 standards.|$|R
40|$|Purpose: Corporate finance {{management}} rules are written {{under the assumption}} that financing costs aredeductible from taxable income. If this assumption is relaxed, such {{management rules}} needs to be revised. How domanagers maximise operating margins and returns if this assumption no longer holds true? We faced this issue usingboth an algebraic and a simulation approach. By defining numerical analysis models, we bypass algebraic profile andskills, which might become too complex for practitioners. Methodology/approach: The recent tax reform introduced in Italy, that creates a <b>partial</b> tax <b>deduction</b> forfinancing costs, offers a case study. We reviewed traditional management tools and we proposed an analytical modelfor a simulation approach to measure the effect of these new tax rules on the optimal financial leverage and themaximum firm leverage. Findings: We demonstrate that the new regulation might have a deep impact on not sufficiently profitablecompanies. We also outline that the regulation is not addressed to highly profitable firms which could be the target fora taxation system aimed to an excess profits redistribution. The recent tax reform ultimately did not address the keyissue for the Italian political economy: to strengthen the corporate financial structure and to reduce excess profitgeneration. Originality/value: We propose a new set of guidelines for financial management wherever financing costswould no longer be deductible from taxable income by linking a well known theoretical framework with a practitioners’approac...|$|R
40|$|Standard <b>partial</b> <b>deduction</b> {{suffers from}} several {{drawbacks}} {{when compared to}} top-down abstract interpretation schemes, Conjunctive <b>partial</b> <b>deduction,</b> an extension of standard <b>partial</b> <b>deduction,</b> remedies one of those, namely the lack of side-ways information passing. But two other problems remain: the lack of success-propagation {{as well as the}} lack of inference of global success-information. We illustrate these drawbacks and show how they can be remedied by combining conjunctive <b>partial</b> <b>deduction</b> with an abstract interpretation technique known as more specific program construction. We present a simple, as well as a more refined integration of these methods. Finally we illustrate the practical relevance of this approach for some advanced applications, where it surpasses the precision of current abstract interpretation techniques. status: publishe...|$|E
40|$|We {{show that}} {{sometimes}} <b>partial</b> <b>deduction</b> produces poor program specializations {{because of its}} limited ability in (i) dealing with conjunctions of recursively defined predicates, (ii) combining partial evaluations of alternative computations, and (iii) taking into account unification failures. We propose to extend the standard <b>partial</b> <b>deduction</b> technique by using versions of the definition rule and the folding rule which allow us to specialize predicates defined by disjunctions of conjunctions of goals. We also consider a case split rule {{to take into account}} unification failures. Moreover, in order to perform program specialization via <b>partial</b> <b>deduction</b> in an automatic way, we propose a transformation strategy which takes as parameters suitable substrategies for directing the application of every transformation rule. Finally, we show through two examples that our <b>partial</b> <b>deduction</b> technique is superior to standard <b>partial</b> <b>deduction,</b> The first example refers to the automatic derivation of the Knuth-Morris-Pratt string matching algorithm, and the second example refers to the construction of a parser for a given regular expression. In both examples, the specialized programs are derived starting from naive, non-deterministic initial programs, whereas standard <b>partial</b> <b>deduction</b> can derive similar specialized programs only when complex, deterministic initial programs are provided...|$|E
40|$|Abstract. Recently, <b>partial</b> <b>deduction</b> {{of logic}} {{programs}} {{has been extended}} to conceptually embed folding. To this end, partial deductions are no longer computed of single atoms, but rather of entire conjunctions; Hence the term “conjunctive partial deduction”. Conjunctive <b>partial</b> <b>deduction</b> aims at achieving unfold/fold-like program transformations such as tupling and deforestation within fully automated <b>partial</b> <b>deduction.</b> However, its merits greatly surpass that limited context: Also other major efficiency improvements are obtained through considerably improved side-ways information propagation. In this extended abstract, we investigate conjunctive <b>partial</b> <b>deduction</b> in practice. We describe the concrete options used in the implementation(s), look at abstraction in a practical Prolog context, include and discuss an extensive set of benchmark results. From these, we can conclude that conjunctive <b>partial</b> <b>deduction</b> indeed pays off in practice, thoroughly beating its conventional precursor {{on a wide range}} of small to medium size programs. However, controlling it in a perfect way proves far from obvious, and a range of challenging open problems remain as topics for further research. ...|$|E
40|$|AbstractPartial {{deduction}} in the Lloyd–Shepherdson framework cannot achieve certain optimisations {{which are}} possible by unfold/fold transformations. We introduce conjunctive <b>partial</b> <b>deduction,</b> {{an extension of}} <b>partial</b> <b>deduction</b> accommodating such optimisations, e. g., tupling and deforestation. We first present a framework for conjunctive <b>partial</b> <b>deduction,</b> extending the Lloyd–Shepherdson framework by considering conjunctions of atoms (instead of individual atoms) for specialisation and renaming. Correctness results are given for the framework with respect to computed answer semantics, least Herbrand model semantics, and finite failure semantics. Maintaining the well-known distinction between local and global control, we describe a basic algorithm for conjunctive <b>partial</b> <b>deduction,</b> and refine it into a concrete algorithm for which we prove termination. The problem of finding suitable renamings which remove redundant arguments {{turns out to be}} important, so we give an independent technique for this. A fully automatic implementation has been undertaken, which always terminates. Differences between the abstract semantics and Prolog's left-to-right execution motivate deviations from the abstract technique in the actual implementation, which we discuss. The implementation has been tested on an extensive set of benchmarks which demonstrate that conjunctive <b>partial</b> <b>deduction</b> indeed pays off, surpassing conventional <b>partial</b> <b>deduction</b> on a range of small to medium-size programs, while remaining manageable in an automatic and terminating system...|$|E
40|$|The {{so called}} “cogen {{approach}} ” to program specialisation, writing a compiler generator {{instead of a}} specialiser, has been used with considerable success in partial evaluation of both functional and imperative languages. This paper demonstrates that this approach is also applicable to partial evaluation of logic programming languages, also called <b>partial</b> <b>deduction.</b> Self-application {{has not been as}} much in focus in <b>partial</b> <b>deduction</b> as in partial evaluation of functional and imperative languages, and the attempts to self-apply <b>partial</b> <b>deduction</b> systems have, of yet, not been altogether that successful. So especially for <b>partial</b> <b>deduction,</b> the cogen approach could prove to have a considerable importance when it comes to practical applications. It is demonstrated that using the cogen approach one gets very efficient compiler generators which generate very efficient generatin...|$|E
40|$|Recently, <b>partial</b> <b>deduction</b> {{of logic}} {{programs}} {{has been extended}} to conceptually embed folding. To this end, partial deductions are no longer computed of single atoms, but rather of entire conjunctions; Hence the term "conjunctive partial deduction". Conjunctive <b>partial</b> <b>deduction</b> aims at achieving unfold/fold-like program transformations such as tupling and deforestation within fully automated <b>partial</b> <b>deduction.</b> However, its merits greatly surpass that limited context: Also other major efficiency improvements are obtained through considerably improved side-ways information propagation. In this extended abstract, we investigate conjunctive <b>partial</b> <b>deduction</b> in practice. We describe the concrete options used in the implementation(s), look at abstraction in a practical Prolog context, include and discuss an extensive set of benchmark results. From these, we can conclude that conjunctive <b>partial</b> <b>deduction</b> indeed pays off in practice, thoroughly beating its conventional precursor {{on a wide range}} of small to medium size programs. However, controlling it in a perfect way proves far from obvious, and a range of challenging open problems remain as topics for further research. status: publishe...|$|E
40|$|We {{present an}} {{approach}} to software verification by program inversion, exploiting recent progress {{in the field of}} automatic program transformation, <b>partial</b> <b>deduction</b> and abstract interpretation. Abstraction-based <b>partial</b> <b>deduction</b> can work on infinite state spaces and produce finite representations of infinite solution sets. We illustrate the potential of this approach for infinite mo [...] ...|$|E
40|$|The {{so called}} "cogen approach" to program specialisation, writing a {{compiler}} generator {{instead of a}} specialiser, has been used with considerable success in partial evaluation of both functional and imperative languages. This paper demonstrates that this approach is also applicable to partial evaluation of logic programming languages, also called <b>partial</b> <b>deduction.</b> Self-application {{has not been as}} much in focus in logic programming as for functional and imperative languages, and the attempts to self-apply <b>partial</b> <b>deduction</b> systems have, of yet, not been altogether that successful. So, especially for <b>partial</b> <b>deduction,</b> the cogen approach should prove to have a considerable importance when it comes to practical applications. This paper first develops a generic offline <b>partial</b> <b>deduction</b> technique for pure logic programs, notably supporting partially instantiated datastructures via binding types. From this a very efficient cogen is derived, which generates very efficient generating extensio [...] ...|$|E
40|$|Revised August 1995 Integrity {{constraints}} {{are very}} useful in many contexts, such as, for example, deductive databases, abductive and inductive logic programming. However, fully testing the integrity constraints after each update or modification {{can be very}} expensive and methods have been developed which simplify the integrity constraints. In this paper, we pursue the goal of writing this simplification procedure as a meta-program in logic programming and then using <b>partial</b> <b>deduction</b> to obtain specialised update procedures for certain update patterns. We argue that the ground representation has {{to be used to}} write this meta-program declaratively. We however also show that, contrary to what one might expect, current <b>partial</b> <b>deduction</b> techniques are then unable to specialise this meta-interpreter in an interesting way and no specialised update procedures can be obtained. In fact, we show that <b>partial</b> <b>deduction</b> is not able to perform any (sophisticated) specialisation at the object-level for meta-interpreters written in the ground representation. We present a solution which uses a novel implementation of the ground representation and an improved <b>partial</b> <b>deduction</b> strategy. With this we are able to overcome the difficulties and produce highly specialised and efficient update procedures through <b>partial</b> <b>deduction</b> of meta-interpreters. status: publishe...|$|E
40|$|Abstract. We {{present an}} {{approach}} to software verification by program inversion, exploiting recent progress {{in the field of}} automatic program transformation, <b>partial</b> <b>deduction</b> and abstract interpretation. Abstrac-tion-based <b>partial</b> <b>deduction</b> can work on infinite state spaces and pro-duce finite representations of infinite solution sets. We illustrate the po-tential of this approach for infinite model checking of safety properties. ...|$|E
40|$|Abstract. The {{so called}} “cogen {{approach}} ” to program specialisation, writing a compiler generator {{instead of a}} specialiser, has been used with considerable success in partial evaluation of both functional and imperative languages. This paper demonstrates that this approach is also applicable to partial evaluation of logic programming languages, also called <b>partial</b> <b>deduction.</b> Self-application {{has not been as}} much in focus in <b>partial</b> <b>deduction</b> as in partial evaluation of functional and imperative languages, and the attempts to self-apply <b>partial</b> <b>deduction</b> systems have, of yet, not been altogether that successful. So, especially for <b>partial</b> <b>deduction,</b> the cogen approach could prove to have a considerable importance when it comes to practical applications. It is demonstrated that using the cogen approach one gets very efficient compiler generators which generate very efficient generating extensions which in turn yield (for some examples at least) very good and non-trivial specialisation. ...|$|E
40|$|<b>Partial</b> <b>deduction</b> is a source-to-source {{technique}} for specialising logic programs. This is (mostly) {{done by a}} well-automated application of parts of the Burstall and Darlington unfold/fold transformation framework. One of the main challenges of <b>partial</b> <b>deduction</b> is automatic control, which has to ensure correctness, efficiency, and termination. In this survey and tutorial, we present the essential developments over the past 10 years, and discuss their respective merits and shortcomings. We also present {{the current state of}} the art and discuss areas where further research is needed to enable more widespread practical use of <b>partial</b> <b>deduction</b> and realise its potential as a tool for systematic program development...|$|E
40|$|In {{recent work}} {{it has been}} shown that {{infinite}} state model checking can be performed by a combination of <b>partial</b> <b>deduction</b> of logic programs and abstract interpretation. This paper characterises some classes of problems which can be decided by this approach. In particular, we show that a restricted form of <b>partial</b> <b>deduction</b> is already powerful enough to decide all coverability properties of Petri Nets. We also prove that two particular instances of <b>partial</b> <b>deduction</b> can be used to exactly compute the Karp-Miller tree as well as Finkel's minimal coverability set. We thus establish a quite surprising link between algorithms for Petri nets and logic program specialisation...|$|E
