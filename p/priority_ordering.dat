90|1138|Public
2500|$|The {{idea of the}} {{priority}} method for constructing a r.e. set X is to list a countable sequence of requirements that X must satisfy. For example, to construct a r.e. set X between 0 and 0prime& {{it is enough to}} satisfy the requirements Ae and Be for each natural number e, where Ae requires that the oracle machine with index e does not compute 0prime& from X and Be requires that the Turing machine with index e (and no oracle) does not compute X. [...] These requirements are put into a <b>priority</b> <b>ordering,</b> which is an explicit bijection of the requirements and the natural numbers. The proof proceeds inductively with one stage for each natural number; these stages {{can be thought of as}} steps of time during which the set X is enumerated. [...] At each stage, numbers may be put into X or forever prevented from entering X in an attempt to satisfy requirements (that is, force them to hold once all of X has been enumerated). [...] Sometimes, a number can be enumerated into X to satisfy one requirement but doing this would cause a previously satisfied requirement to become unsatisfied (that is, to be injured). [...] The priority order on requirements is used to determine which requirement to satisfy in this case. [...] The informal idea is that if a requirement is injured then it will eventually stop being injured after all higher priority requirements have stopped being injured, although not every priority argument has this property. [...] An argument must be made that the overall set X is r.e. and satisfies all the requirements. Priority arguments can be used to prove many facts about r.e. sets; the requirements used and the manner in which they are satisfied must be carefully chosen to produce the required result.|$|E
5000|$|... and a <b>priority</b> <b>ordering</b> {{specification}} {{to resolve}} conflicts among conflicting rules.|$|E
50|$|A <b>{{priority}}</b> <b>ordering</b> {{over the}} defeasible {{rules and the}} defeaters can be given. During the process of deduction, the strict rules are always applied, while a defeasible rule can be applied only if no defeater of a higher priority specifies that it should not.|$|E
30|$|After the <b>priority</b> <b>order</b> {{of attack}} routes is determined, attackers would choose the attack route with minimum Q from the ideal view. However, the attackers are not unconditionally blind {{to pursue the}} minimum Q. Once one attack substep is {{difficult}} to achieve (if the technique difficulties are beyond the attacker capabilities or the step can be easily detected), attackers are likely to abandon this attack route by risk avoidance consideration, and choose the second best attack route. Therefore, the suboptimal attack route in <b>priority</b> <b>order</b> still has a great probability of occurrence. To quantify the attacker choice of attack route, the <b>priority</b> <b>order</b> of attack routes is probabilistically calculated.|$|R
30|$|Change {{the initial}} load <b>priority</b> <b>order</b> if the {{convenience}} level parameters are being violated.|$|R
5000|$|The Service Discipline or <b>Priority</b> <b>order</b> that {{jobs in the}} queue, or waiting line, are served: ...|$|R
5000|$|Vietorisz {{worked in}} the field of applied and {{theoretical}} economics. An early example of his theoretical contribution is his method to quantize for <b>priority</b> <b>ordering</b> of projects in planning. Another example is his theory of [...] "Decentralization in NonConvex System" [...] that was highlighted in Econometrica. [...] The aim was to represent a two-level planning and decision making system within the traditional Edgeworth box diagram, but extended for non-convex analysis.|$|E
5000|$|The initial goal {{programming}} formulations {{ordered the}} unwanted deviations {{into a number}} of priority levels, with the minimisation of a deviation in a higher priority level being infinitely more important than any deviations in lower priority levels. This is known as lexicographic or pre-emptive goal programming. Ignizio gives an algorithm showing how a lexicographic goal programme can be solved as a series of linear programmes. Lexicographic goal programming should be used when there exists a clear <b>priority</b> <b>ordering</b> amongst the goals to be achieved.|$|E
5000|$|Abiding by {{the system}} {{advocated}} by Zero Waste International Alliance, Oakland’s Zero Waste System follows “natural cycles, where all outputs are simply an input for another process.” Moreover, Zero Waste systems place the “highest priority on conserving resources and retaining their form and function without burning, burying, or otherwise destroying their form and function. “ This calls for “eliminating discharges to land, water or air that harm natural systems,” as well as, “preventing rather than managing, waste and pollution, and recommitting to the <b>priority</b> <b>ordering</b> of the waste reduction hierarchy: first reduce consumption; next, reuse what is left; and finally, recycle anything {{that is no longer}} usable and landfill any residual.” ...|$|E
40|$|This paper {{describes}} {{a study conducted}} to develop a method to facilitate more reliable determination of the rehabilitation <b>priority</b> <b>order</b> for water pipes by {{taking into account the}} pipes’ hydraulic importance. Existing methods use only the pipeline deterioration rate to determine the rehabilitation <b>priority</b> <b>order.</b> Accordingly, the deterioration rate under normal conditions and the hydraulic importance under abnormal conditions of water distribution pipelines were classified according to two different attributes. The deterioration rate of a water distribution pipeline was calculated in terms of the deterioration rate due to pipeline information factors and the deterioration rate resulting from the installation environment/external factors. The hydraulic importance of water distribution pipelines was calculated by considering the importance of a single pipe failure caused by water leakage or an accident and that of a multiple pipe failure caused by a disaster, such as an earthquake. These four attribute factors were employed in a multi-criteria decision-making process called a weighted utopian approach, developed in this study, that determines the final rehabilitation <b>priority</b> <b>order</b> for each pipeline. The study results indicate that the rehabilitation <b>priority</b> <b>order</b> can be determined more easily using this approach than with previously-developed methods and that the model developed is easier and more convenient to apply than existing rehabilitation <b>priority</b> <b>order</b> models that require a large amount of data, as well as complex failure probabilities and mathematical models...|$|R
40|$|The {{resolution}} of conflicts between n aircraft is highly combinational and cannot be optimally solved using classical mathematical optimization techniques. Using a <b>priority</b> <b>order</b> {{to solve a}} naircraft conflict is much easier but the solution is not optimal. FACES (Free-Flight Autonomous Coordinated En route Solver) is a model for coordinated on-board sequential conflict solving. In this project, conflict-free trajectories are obtained by applying elementary maneuvers to each aircraft, sequentially, according to some <b>priority</b> <b>order.</b> In this paper, a comparative study {{on a set of}} proposed priority heuristics to provide a suitable <b>priority</b> <b>order</b> is presented, and aggregated heuristics are compared according to some criteria. The conflict solver FACES using heuristics is tested in en-route upper airspace within an air traffic simulator using real traffic data...|$|R
30|$|Step 5 According to the <b>priority</b> <b>order,</b> the inequalities are solved {{to obtain}} the {{feasible}} solution of Δx and Δy.|$|R
50|$|As {{thanks for}} their {{participation}} in the trial lease program, ActiveE drivers enjoyed <b>priority</b> <b>ordering</b> the BMW i3 and the first batch of cars was allocated to these customers with delivery scheduled for the end of April 2014, ahead of the American market launch in May. ActiveE customers were allowed to order the i3 with any option they select and they received for free the heated seats and DC quick charge options. Also, BMW created some unique features for the i3 cars of ActiveE lessees, such as embroidered front trunk liner and BMW i floor mats, and interior, exterior and door sill badging. BMW called these cars the “Electronaut Edition i3″ and could only be purchased by ActiveE customers.|$|E
5000|$|The first {{delivery}} to a retail customer in the U.S. {{took place in}} Boston on 2 May 2014. During the first three months, U.S. bounded production was restricted to a special [...] "Launch Edition" [...] i3, with the full option package and the Tera World interior. The only choices customers had at launch were the exterior paint color, the 20″ Sport wheels, and the range extender. Production of normal custom ordered models was scheduled to begin in June. As thanks for {{their participation in the}} trial lease program, ActiveE drivers enjoyed <b>priority</b> <b>ordering</b> and the first batch of i3s was allocated to these customers. ActiveE customers were also allowed to order the i3 with any option they select and received the heated seats and DC quick charge options free of charge. Also, BMW created some unique features for the i3 cars of ActiveE drivers, such as embroidered front trunk liner and BMW i floor mats, and interior, exterior and door sill badging. BMW called these cars the “Electronaut Edition i3″.|$|E
50|$|The {{idea of the}} {{priority}} method for constructing a r.e. set X is to list a countable sequence of requirements that X must satisfy. For example, to construct a r.e. set X between 0 and 0&prime; {{it is enough to}} satisfy the requirements Ae and Be for each natural number e, where Ae requires that the oracle machine with index e does not compute 0&prime; from X and Be requires that the Turing machine with index e (and no oracle) does not compute X. These requirements are put into a <b>priority</b> <b>ordering,</b> which is an explicit bijection of the requirements and the natural numbers. The proof proceeds inductively with one stage for each natural number; these stages {{can be thought of as}} steps of time during which the set X is enumerated. At each stage, numbers may be put into X or forever prevented from entering X in an attempt to satisfy requirements (that is, force them to hold once all of X has been enumerated). Sometimes, a number can be enumerated into X to satisfy one requirement but doing this would cause a previously satisfied requirement to become unsatisfied (that is, to be injured). The priority order on requirements is used to determine which requirement to satisfy in this case. The informal idea is that if a requirement is injured then it will eventually stop being injured after all higher priority requirements have stopped being injured, although not every priority argument has this property. An argument must be made that the overall set X is r.e. and satisfies all the requirements. Priority arguments can be used to prove many facts about r.e. sets; the requirements used and the manner in which they are satisfied must be carefully chosen to produce the required result.|$|E
50|$|Relate the {{problems}} in <b>priority</b> <b>order,</b> applying problem analysis techniques to identify and find solutions for each one of them.|$|R
3000|$|... da Silveira Guimarães and Salomon [18] apply ANP {{method for}} the {{evaluation}} of the <b>priority</b> <b>order</b> of reverse logistics indicators in a small company.|$|R
30|$|Matching results: the {{segmented}} face {{image from}} the current test scene is displayed, along with up to five candidate faces from the database in descending <b>priority</b> <b>order.</b>|$|R
40|$|This paper {{focuses on}} {{priority}} assignment for real- time systems using fixed priority scheduling. It introduces and defines {{the concept of}} a "robust" priority ordering: the most appropriate <b>priority</b> <b>ordering</b> to use in a system subject to variable amounts of additional interference from sources such as interrupts, operating system overheads, exception handling, cycle stealing, and task execution time overruns. The paper describes a Robust Priority Assignment algorithm that can find the robust <b>priority</b> <b>ordering</b> {{for a wide range of}} fixed priority system models and additional interference functions. Proofs are given for a number of interesting theorems about robust priority assignment, and the circumstances under which a "Deadline minus Jitter" monotonic partial ordering forms part of the robust ordering. The paper shows that "Deadline minus Jitter" monotonic <b>priority</b> <b>ordering</b> is the robust <b>priority</b> <b>ordering</b> for a specific class of system, and that this property holds essentially independent of the additional interference function...|$|E
40|$|Abstract: This note {{deals with}} the problem of minimising the {{expected}} sum of quadratic holding and shortage inventory costs when a single, failure-prone machine produces multiple part-types. Shu and Perkins (2001) introduce the problem and, by restricting the set of control policies to the class of prioritised hedging point (PHP) policies, establish simple, analytical expressions for the optimal hedging points provided that the <b>priority</b> <b>ordering</b> of the part-types is given. However, the determination of an optimal <b>priority</b> <b>ordering</b> is left by the authors as an open question. This leaves an embedded sequencing problem which we focus on in this note. We define a lower bound for the problem, introduce a test bed for future developments, and propose three dynamic programming approaches (with or without the lower bound) for determining the optimal priority orderings for the instances of the test bed. This is an initial step in a research project aimed at solving the optimal <b>priority</b> <b>ordering</b> problem, which will allow evaluating the performance of future heuristic and metaheuristic procedures...|$|E
40|$|This paper {{addresses}} {{the problem of}} determining the most robust priority assignment for CAN messages that are subject to transmission errors due to Electromagnetic Interference. In the presence of errors on the bus, CAN messages have a non-zero probability of missing their deadlines. An appropriate choice of <b>priority</b> <b>ordering</b> can minimise the overall worst-case deadline failure probability resulting in a more robust system. This paper shows that “Deadline minus jitter” monotonic priority assignment, commonly used for priority assignment in commercial CAN systems, does not always result in the most robust <b>priority</b> <b>ordering.</b> A Robust Priority Assignment algorithm is presented that computes the most robust <b>priority</b> <b>ordering</b> for CAN messages subject to bit errors on the bus. This algorithm is optimal {{in the sense that}} it can be used to (i) maximise the number of errors tolerated, (ii) maximise the delay tolerated by any message, or (iii) minimise the probability of any message failing to meet its deadline. This algorithm is efficient and appropriate for use in an engineering context...|$|E
50|$|The Act {{authorised}} a {{large number}} of branch connections and other lines, and these were constructed in <b>priority</b> <b>order,</b> with {{the central part of the}} through connection delayed.|$|R
40|$|Abstract In this paper, we {{consider}} districting problems for emergency service systems (such as ambulance systems). In such a service system, typically, N mobile service units cooperate {{in responding to}} calls from the public. The assignment of service units is determined by a <b>priority</b> <b>order</b> (such as the order of proximity) for the available service units. We divide the entire service area into several districts by considering the <b>priority</b> <b>order.</b> We give a general formulation for the districting problem and propose a model to obtain the objective for the formulation. The objective function of the formulation is the average response time computed from a stochastic model. The model assumes the continuous-time Markov chain with characteristic of random arrival of calls, assignment of a service unit considering the <b>priority</b> <b>orders,</b> service times depending {{on a combination of}} available service units and districts. We give a numerical example of an ambulance system for a city in Japan. Using actual data, we show the usefulness of our formulation and model...|$|R
40|$|In this paper, a {{new method}} of multi-objective {{optimization}} for assessment of investment decision on reactive power support in power systems is proposed. The considered objective functions include investment cost in reactive power supports, total system loss, total voltage deviation and total system operation cost. These objectives {{can be incorporated}} in one compromise objective function using the proposed <b>priority</b> <b>order</b> multipliers, which signify {{the relative importance of}} the objectives. The method is applied to the CIGRE 32 -bus test system. It has been shown that with this method, it is possible to successfully optimize four conflicting objective functions simultaneously. It is also possible to set the <b>priority</b> <b>order</b> for the each and every considered objective functions in the planning process as per the requirement of the power system operators and/or the planning authorities. The results have shown the strong reflections from the <b>priority</b> <b>orders</b> to the actual outcomes of the reactive power plan...|$|R
40|$|Decentralized {{reasoning}} is receiving increasing attention {{due to the}} distributed nature of knowledge on the Web. We {{address the problem of}} answering queries to distributed propositional reasoners which may be mutually inconsistent. This paper provides a formal characterization of a prioritized peerto-peer query answering framework that exploits a <b>priority</b> <b>ordering</b> over the peers, as well as a distributed entailment relation as an extension to established work on argumentation frameworks. We develop decentralized algorithms for computing query answers according to distributed entailment and prove their soundness and completeness. To improve the efficiency of query answering, we propose an ordering heuristic that exploits the peers ’ <b>priority</b> <b>ordering</b> and empirically evaluate its effectiveness. ...|$|E
40|$|Shu and Perkins {{deals with}} the problem of minimising the {{expected}} sum of quadratic buffer cost when a single, failure-prone machine produces multiple part-types. They restrict the set of control policies to the class of prioritised hedging point (PHP) policies and determine simple, analytical expressions for the optimal hedging points, provided that the <b>priority</b> <b>ordering</b> of the part-types is given. This paper addresses the determination of the optimal <b>priority</b> <b>ordering</b> for PHP policies, and reports the results of a computational experiment. The conclusions are that instances of up to approximately twenty-five part-types can be solved to optimality in short computing times, that it is worthwhile to use dominance relations and that the influence of the values of some parameters is insignifican...|$|E
40|$|The schedulability {{of systems}} using fixed {{priority}} pre-emptive scheduling {{can be improved}} {{by the use of}} non-pre-emptive regions {{at the end of each}} task's execution, an approach referred to as deferred pre-emption. Choosing the appropriate length for the final non-pre-emptive region of each task is a trade-off between improving the worst-case response time of the task itself and increasing the amount of blocking imposed on higher priority tasks. In this paper we present an optimal algorithm for determining both the <b>priority</b> <b>ordering</b> of tasks and the lengths of their final non-pre-emptive regions. This algorithm is optimal for fixed priority scheduling with deferred pre-emption, in the sense that it is guaranteed to find a schedulable combination of <b>priority</b> <b>ordering</b> and final non-pre-emptive region lengths if such a schedulable combination exists...|$|E
5000|$|Moby Part-of-Speech {{contains}} 233,356 words fully {{described by}} part(s) of speech, listed in <b>priority</b> <b>order.</b> The {{format of the}} file is word\parts-of-speech, with the following parts of speech being identified: ...|$|R
5000|$|... “The {{duration}} of asylum proceedings {{is dependent on}} various factors, notably possible additional investigations being done to clarify the case, but also the <b>priority</b> <b>order</b> in which cases are being treated.” ...|$|R
5000|$|The [...] {{function}} attribute allows defining global prioritized destructor functions: when [...] returns, {{these functions}} are called in <b>priority</b> <b>order</b> before the process terminates. See also: Hacking {{the art of}} exploitation.|$|R
40|$|Abstract — The schedulability {{of systems}} using fixed {{priority}} pre-emptive scheduling {{can be improved}} {{by the use of}} non-preemptive regions {{at the end of each}} task’s execution; an approach referred to as deferred pre-emption. Choosing the appropriate length for the final non-pre-emptive region of each task is a trade-off between improving the worst-case response time of the task itself and increasing the amount of blocking imposed on higher priority tasks. In this paper we present an optimal algorithm for determining both the <b>priority</b> <b>ordering</b> of tasks and the lengths of their final non-pre-emptive regions. This algorithm is optimal for fixed priority scheduling with deferred pre-emption, in the sense that it is guaranteed to find a schedulable combination of <b>priority</b> <b>ordering</b> and final nonpre-emptive region lengths if such a schedulable combination exists. Keywords-real-time scheduling; schedulability analysis; fixed priority; deferred pre-emption; optimal priority assignment; nonpre-emptive scheduling. I...|$|E
40|$|In a {{real-time}} database system, {{an application}} may assign a value to a transaction {{to reflect the}} return it expects to receive if the transaction commits before its deadline. Most prior research on real-time database systems has focused on systems where all transactions are assigned the same value, with the performance goal being to minimize the number of missed deadlines. When transactions may be assigned different values, {{the goal of the}} system shifts to maximizing the sum of the values of those transactions that commit by their deadlines. Minimizing the number of missed deadlines becomes a secondary concern in such systems. In this paper, we address the problem of establishing a <b>priority</b> <b>ordering</b> among transactions characterized by both values and deadlines that results in maximizing the realized value. Of particular interest is the tradeoff that needs to be established between these values and deadlines in constructing the <b>priority</b> <b>ordering.</b> Using a detailed simulation model, we ev [...] ...|$|E
40|$|The {{theory of}} belief {{revision}} developed by Gardenfors {{and his colleagues}} characterizes the classes of reasonable belief revision operations. However, some of the assumptions made {{in the theory of}} belief revision are unrealistic from a computational point of view. We address this problem by considering revision operations that are based on a <b>priority</b> <b>ordering</b> over a set of sentences representing a belief state instead of using preference relations over all sentences that are accepted in a belief state. In addition to providing a semantic justification for such operations, we investigate also the computational complexity. We show how to generate an epistemic entrenchment ordering for a belief state from an arbitrary <b>priority</b> <b>ordering</b> over a set of sentences representing the belief state and show that the resulting revision is very efficient. Finally, we show that some schemes for generating revision operations from bases can encode the preference relations more concisely than others. 1 [...] ...|$|E
40|$|Kojima and Ünver (2011) are {{the first}} to {{characterize}} the class of mechanisms coinciding with the Boston mechanism for some <b>priority</b> <b>order.</b> By mildly strengthening their central axiom, we are able to pin down the Boston mechanism outcome for every <b>priority</b> <b>order.</b> Our main result shows that a mechanism is outcome equivalent to the Boston mechanism at every priority if and only if it respects both preference rankings and priorities and satisfies individual rationality for schools. In environments where each student is acceptable to every school, respecting both preference rankings and priorities is enough to characterize the Boston mechanism...|$|R
40|$|Abstract. A {{distributed}} {{constraint satisfaction}} problem (Distributed CSP) is a CSP in which variables and constraints are distributed among multiple automated agents, and various application problems in Distributed Artificial Intelligence can be formalized as Distributed CSPs. We {{develop a new}} algorithm for solving Distributed CSPs called asynchronous weak-commitment search, which is inspired by the weak-commitment search algorithm for solving CSPs. This algorithm can revise a bad decision without an exhaustive search by changing the <b>priority</b> <b>order</b> of agents dynamically. Furthermore, agents can act asynchronously and concurrently based on their local knowledge without any global control, while guaranteeing the completeness of the algorithm. The experimental results on various example problems show that this algorithm is by far more efficient than the asynchronous backtracking algorithm for solving Distributed CSPs, in which the <b>priority</b> <b>order</b> is static. The <b>priority</b> <b>order</b> represents a hierarchy of agent authority, i. e., the priority of decision making. Therefore, these results imply that a flexible agent organization, in which the hierarchical order is changed dynamically, actually performs better than an organization in which the hierarchical order is static and rigid. ...|$|R
3000|$|The {{different}} {{experimental and}} processing errors thus justify weighting each data type differently. We {{do not try}} to set realistic variances to each data type, but we rather define weights with the <b>priority</b> <b>order</b> w [...]...|$|R
