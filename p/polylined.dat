3|508|Public
50|$|A flextank is a flexible/foldable storage tank, made {{of several}} layers of {{different}} materials like PVC and other <b>polylined</b> foils and are used for storage of drinking water and fuels. Flextank is a brand name in the Netherlands.|$|E
40|$|A 3 -D {{computational}} {{fluid dynamics}} (CFD) model was developed to describe and predict the temperature profiles of palletised <b>polylined</b> kiwifruit packages undergoing forced-air cooling. The geometrical configuration of the kiwifruit, polyliner and cardboard box were explicitly modelled. The model included the effects of natural convection on the airflow behaviour and heat transfer process occurring within the packed fruits inside the polyliner. The capability of the model to predict the fruit temperatures in each package was quantitatively validated against experimental data. A laboratory scaled experimental rig was used to monitor the forced-air cooling process of a half pallet of kiwifruit boxes under controlled operating conditions. The numerical model was able to predict cooling times within experimental error. Cooling within the pallet was primarily influenced by air temperature {{and to a lesser}} extent airflow distribution into each package. A maximum recommended volumetric flowrate through the pallet of 0. 34 L kg(- 1) s(- 1), far lower than flowrates recommended for the cooling of non-polylined produce, was identified. Successive increases to the flowrate, particularly beyond 0. 34 L kg(- 1) s(- 1), resulted in increasingly diminished reductions (< 12 %) to cooling rate. Within the polyliner there was a low transfer of energy between kiwifruit and kiwifruit surrounding air. Instead cooling was reliant on the air temperature flowing over the top of the polyliner. (C) 2016 Elsevier B. V. All rights reserved. status: publishe...|$|E
40|$|The Petroleum Technology Transfer Council (PTTC) and {{cooperating}} Regional Lead Organizations (RLOs) in its South Midcontinent (Oklahoma Geological Survey, Norman, Oklahoma) and West Coast (University of Southern California, Los Angeles, California) regions {{conducted a}} ''Mentor-Based Effort to Advance Implementation of Preferred Management Practices (PMPs) For Oil Producers'' (DE-FC 26 - 01 BC 15272) under an award in Phase I of Department of Energy's (DOE's) PUMP (Preferred Upstream Management Practices) program. The project's {{objective was to}} enable producers in California, Oklahoma and Arkansas to increase oil production, moderating or potentially reversing production declines and extending the life of marginal wells in the near term. PTTC identified the primary constraints inhibiting oil production through surveys and PUMPer direct contacts in both regions. The leading common constraint was excess produced water and associated factors. Approaches for addressing this common constraint were tailored for each region. For Oklahoma and Arkansas, the South Midcontinent Region developed a concise manual titled ''Produced Water And Associated Issues'' that led to multiple workshops across the region, plus workshops in several other regions. In California, the West Coast Region leveraged PUMP funding to receive an award from the California Energy Commission for $ 300, 000 to systematically evaluate water control solutions for the California geological environment. Products include still-developing remedial action templates to help producers identify underlying causes of excess water production and screen appropriate solutions. Limited field demonstrations are being implemented to build producer confidence in water control technologies. Minor leverage was also gained by providing technology transfer support to a Global Energy Partners project that demonstrated affordable approaches for reducing power consumption. PTTC leveraged PUMP project results nationally through expanding workshops to other regions, providing coverage in its newsletter, through columns and case studies in trade journals, and through coordinating presentations at association and professional society meetings. Combined, {{there were more than}} 800 participants. Applying ''application percentages'' from PTTC's total technology transfer program, more than 250 participants are likely to be applying technologies (39 % of industry participants). Polymer gel water-shutoff (WSO) treatments and wellbore management were a focus in the Midcontinent area. A major provider of polymer gel WSO treatments has experienced a significant increase in treatment activity in Oklahoma, some of which can be logically attributed to this project. A provider of <b>polylined</b> tubing, a product related to wellbore management, has noted a 280 % increase in their independent customer base and opening of a new market due to their involvement in PUMP-spinoff technology transfer. Detailed case studies on polymer gel WSO treatments and wellbore management, along with more global analyses, demonstrate the economic value of these technologies to producers. Among the many information sources that producers consider when applying technology, PTTC knows it is an important source in these technology areas...|$|E
40|$|Figure 1 : (a) <b>Polyline</b> {{extruded}} into a triangle-based wall. (b) Wall intersection with terrain. (c) Final <b>polyline</b> on terrain. A fundamental task {{in virtual}} globe and GIS applications is to render <b>polyline</b> vector data representing {{elements such as}} political borders, road networks, and rivers. Rendering <b>polylines</b> such that they precisely drape over terrain is challenging. We present an approach that extrudes the original <b>polyline,</b> forming a wall, and intersects the wall with the terrain in screen-space to find the desired <b>polyline.</b> 1 Previous Work A common approach to rendering <b>polylines</b> on terrain is to render <b>polylines</b> to a texture, then render terrain using multitexturing. Creating the texture as a preprocessing step limits the texture resolution, leading to aliasing as the viewer zooms in; generating the texture on-demand is expensive and does not prevent aliasing on steep slopes. Rendering a <b>polyline</b> on terrain by subsampling points along the <b>polyline</b> (Figures 2 a and 2 b) requires adjustment in response to terrain LOD switches (Figure 2 c) and the coplanar geometry can lead to z-fighting [Wartell et al. 2003]. Rendering a <b>polyline</b> by extruding a shadow volume (Figures 2 d- 2 f) leads to smearing on steep slopes and dashing when viewed lengthwise (Figure 3 a) [Schneide...|$|R
40|$|We {{study the}} {{double-cross}} matrix descriptions of <b>polylines</b> in the two-dimensional plane. The double-cross matrix is a qualitative description of <b>polylines</b> in which exact, quantitative information is given up {{in favour of}} directional information. First, we give an algebraic characterization of the double-cross matrix of a <b>polyline</b> and derive some properties of double-cross matrices from this characterisation. Next, we give a geometric characterization of double-cross similarity of two <b>polylines,</b> using the technique of local carrier orders of <b>polylines.</b> We also identify the transformations of the plane that leave the double-cross matrix of all <b>polylines</b> in the two-dimensional plane invariant...|$|R
40|$|There {{are many}} {{practical}} applications that require simplification of <b>polylines.</b> Some {{of the goals}} are {{to reduce the amount}} of information necessary to store, improve processing time, or simplify editing. The simplification is usually done by removing some of the vertices, making the resultant <b>polyline</b> go through a subset of the source <b>polyline</b> vertices. However, such approaches do not necessarily produce a new <b>polyline</b> with the minimum number of vertices. The approximate solution to find a <b>polyline,</b> within a specified tolerance, with the minimum number of vertices is described in this paper...|$|R
40|$|Rendering <b>polylines</b> {{such that}} they {{precisely}} drape over terrain is challenging. We present an approach that extrudes the original <b>polyline,</b> forming a wall, and intersects the wall with the terrain in screen-space to find the desired <b>polyline.</b> Previous Work Some approaches render <b>polylines</b> to a texture, then render terrain using multitexturing. Creating the texture as a preprocessing step limits the texture resolution, leading to aliasing as the viewer zooms in; generating the texture on-demand is expensive and does not prevent aliasing on steep slopes. Rendering a <b>polyline</b> on terrain by subsampling points along the <b>polyline</b> requires adjustment in response to terrain LOD switches, and the coplanar geometry can lead to z-fighting [Wartell et al. 2003]. Rendering a <b>polyline</b> by extruding a shadow volume leads to smearing on steep slopes and dashing when viewed lengthwise [Schneider and Klein 2007]...|$|R
40|$|<b>Polyline</b> glyphs are {{minimized}} thumbnails of <b>polylines</b> from parallel coordinates. Since such glyphs may {{augment the}} usability of parallel coordinates, the authors investigate {{whether there are}} benefits {{to be derived from}} using <b>polyline</b> glyphs that are dynamically linked to parallel coordinates as opposed {{to the use of the}} latter visualization technique alone. They also identify user tasks that can be effectively solved if parallel coordinates dynamically linked to <b>polyline</b> glyphs are used. This study adds to the body of previous work a discussion on the features of the <b>polyline</b> glyphs that facilitate the exploration and understanding of multivariate data. Moreover, the authors conduct an empirical study in which parallel coordinates dynamically linked to <b>polyline</b> glyphs are used to solve four tasks. The main finding is that <b>polyline</b> glyphs can facilitate a better insight into the similarities between the multivariate signatures of data items and information acquisition if visual clutter hinders the use of parallel coordinates. The study also reveals that if visual clutter does not occur in parallel coordinates and the <b>polylines</b> from the latter can be differentiated, individuals tend not to use <b>polyline</b> glyphs to study multivariate signatures...|$|R
40|$|We {{present an}} {{algorithm}} for <b>polyline</b> (and polygon) similarity testing {{that is based}} on the double-cross formalism. To determine the degree of similarity between two <b>polylines,</b> the algorithm first computes their generalized polygons, that consist of almost equally long line segments and that approximate the length of the given <b>polylines</b> within an ε-error margin. Next, the algorithm determines the double-cross matrices of the generalized <b>polylines</b> and the difference between these matrices is used as a measure of dissimilarity between the given <b>polylines.</b> We prove termination of our algorithm and show that its sequential time complexity is bounded by O (max(N 1,N 2) ε) ...|$|R
40|$|Abstract- A graph drawing {{algorithm}} for the Game of Sprouts is presented. The algorithm {{guarantees that}} the <b>polylines</b> that connect graph nodes are drawn smoothly {{and that they}} maintain reasonable distance from other graph <b>polylines.</b> Vertices of the graph are moved {{using a combination of}} repulsive forces and smoothing forces. The repulsive forces come from all other visible graph nodes and visible <b>polyline</b> line segments. The smoothing forces are calculated from neighboring vertices along a <b>polyline.</b> A Sprouts player is not allowed to draw new <b>polylines</b> that cross any existing <b>polyline,</b> and the algorithm prevents edge crossings as the graph is transformed. The distinctive features of this algorithm is the use of smoothing forces instead of traditional spring forces, and the use of line segments as repulsive elements instead of vertices...|$|R
30|$|Since {{segments}} are confirmed {{from their}} endpoints, they are implicitly interconnected forming <b>polylines.</b> These <b>polylines</b> can be {{extracted from the}} graph representation that is obtained taking endpoints as vertices and segments as edges connecting vertices. Thus, each disconnected subgraph resulting from this representation corresponds to a <b>polyline</b> in the image. In the ideal case, when each node has one or two edges, {{this is the only}} valid interpretation of the graphs. However, if there exist vertices with more than two connections, each <b>polyline</b> can be decomposed into simple pieces. In such cases, a graph partitioning technique [30] can be applied in order to obtain a more realistic <b>polyline</b> representation.|$|R
40|$|Abstract. We {{introduce}} two new related metrics, the geodesic {{width and}} the link width, {{for measuring the}} “distance ” between two nonintersecting <b>polylines</b> in the plane. If the two <b>polylines</b> have n vertices in total, we present algorithms to compute the geodesic width of the two <b>polylines</b> in O(n 2 log n) time using O(n 2) space and the link width in O(n 3 log n) time using O(n 2) working space where n is {{the total number of}} edges of the <b>polylines...</b>|$|R
40|$|We {{present an}} {{algorithm}} that deforms a given set of polygonal lines (<b>polylines)</b> defined {{on a set}} of 2 n vertices into the new set of <b>polylines</b> that results from one of the vertices moving along a straight line to a new point in the plane, creating bends in the <b>polylines</b> intersected by the line of motion. The algorithm has applications in robotics, where the moving point is one of n robots in the plane and the <b>polylines</b> are representations of taut tethers attached to the robots. The algorithm runs in O(kn 2) time, where k is the maximum number of line segments a <b>polyline</b> may have. The algorithm makes use of work presented in [8], which requires that a triangulation of the set of <b>polyline</b> vertices be maintained. When the <b>polyline</b> vertices change, so must the triangulation. Also presented here is a new triangulation algorithm and data structure that allows for easy insertion and deletion of triangle vertices. The data structure requires O(n) space and allows vertices to be inserted in [...] ...|$|R
40|$|Without taking <b>polyline</b> global {{structure}} into consideration, current <b>polyline</b> tessellation methods {{tend to make}} {{low quality}} decomposition. It makes them difficult to support vector mapping with large dataset and dynamic mapping with high update rate. This paper proposed a <b>polyline</b> momentum function and designed a monotone decomposition and tessellation method. The monotonous increasing intervals of the momentum function, as the gradient intervals of <b>polyline,</b> are divided continuously into optimized triangle strips. The monotone decreasing intervals of the momentum function, as the mutational intervals of <b>polyline,</b> are divided discretely into optimized triangle fans. The experiment {{results show that the}} decomposition quality measured by the numbers of triangulation vertices, triangles and primitives using this method are better than that based on vertex and line segment and can significantly improve the drawing efficiency for <b>polyline.</b> This method is also applicable to closed, width gradient and smooth line style...|$|R
40|$|Abstract—A video {{sequence}} {{can be represented}} as a sequence of points in a high dimensional feature space that forms a <b>polyline</b> curve. Mapping a video frame onto a point {{is based on the}} geometric features detected in the frame which provide the perceptual differences between frames. The <b>polyline</b> is then analyzed and simplified using two metrics considering the mutual relationships among the nodes. The <b>polyline</b> is recursively sim-plified and a multi-level representation is obtained. The nodes at the low level <b>polyline</b> correspond to the key frames of the video. After transforming the <b>polyline</b> from the high dimensional space into 3 D space, users can view the keyframes as well as their mutual relationships in an intuitive and easy manner. The multi-level representation of <b>polylines</b> offers a coarse-to-fine key frames for the video, and provides users a favorable experience on navigating the video. Index Terms—Key frame extraction, video abstraction, video navigation. I...|$|R
40|$|Abstract. In this paper, we firstly {{describe}} two topological configurations {{that are}} not considered by Saalfeld’s <b>polyline</b> simplification algorithm: the coincidence topology, concerning the overlapping of two <b>polylines</b> or the overlapping of a feature point and a <b>polyline,</b> and the incidence topology, concerning the incidence of two <b>polylines</b> without having the incidence point represented as a common vertex. Afterwards, we suggest a simple modification in Saalfeld’s algorithm for preserving these topologies. Finally, we give some results of our simplification procedure and compare them to the ones of Saalfeld’s algorithm. 1...|$|R
40|$|We propose an {{algorithm}} for tracing <b>polylines</b> on {{a triangle}} mesh such that: they are aligned with a N-symmetry direction field, and two such <b>polylines</b> cannot cross or merge. This property is fundamental for mesh segmentation {{and is very}} difficult to enforce with numerical integration of vector fields. We propose an alternative solution based on "stream-mesh", a new combinatorial data structure that defines, for each point of a triangle edge, where the corresponding <b>polyline</b> leaves the triangle. It makes it possible to trace <b>polylines</b> by iteratively crossing triangles. Vector field singularities and polyline/vertex crossing are characterized and consistently handled. The <b>polylines</b> inherits the cross-free property of the stream-mesh, except inside triangles where avoiding local overlaps would require higher order polycurves...|$|R
40|$|One of the formalisms to qualitatively {{describe}} <b>polylines</b> in {{the plane}} are double-cross matrices. In a double-cross ma-trix the relative position of any two line segments in a poly-line is described {{with respect to a}} double cross based on their start points. Two <b>polylines</b> are called DC-similar if their double-cross matrices are identical. Although double-cross matrices have been widely applied, a geometric interpreta-tion of the similarity they express is still lacking. In this pa-per, we provide a first step in the geometric interpretation of this qualitative definition of similarity. In particular, we give an effective characterization of what DC-similarity means for <b>polylines</b> that are drawn on a grid. We also provide algo-rithms that, given a DC-matrix, check whether it is realiz-able by a <b>polyline</b> on a grid and that construct, if possible, in quadratic time example <b>polylines</b> that satisfy this matrix. We also describe algorithms to reconstruct <b>polylines,</b> satis-fying a given double-cross matrix, in the two-dimensional plane, that is, not necessarily on a grid...|$|R
40|$|We {{introduce}} two new related metrics, the geodesic {{width and}} the link width, {{for measuring the}} “distance ” between two non-intersecting <b>polylines</b> in the plane. If the two <b>polylines</b> have n vertices in total, we present algorithms to compute the geodesic width of the two <b>polylines</b> in O(n 2 log n) time using O(n 2) space and the link width in O(n 3 log n) time using O(n 2) working space where n is {{the total number of}} edges of the <b>polylines.</b> Our computation of these metrics relies on two closelyrelated combinatorial strutures: the shortest-path diagram and the link diagram of a simple polygon. The shortest-path (resp., link) diagram encodes the Euclidean (resp., link) shortest path distance between all pairs of points on the boundary of the polygon. We use these algorithms to solve two problems: • Compute a continuous transformation that “morphs ” one <b>polyline</b> into another <b>polyline.</b> Our morphing strategies ensure that each point on a <b>polyline</b> moves ∗ Preliminary versions of this paper appeared in the Proceedings of the 11 th Annual ACM-SIAM Symposium on Discrete Algorithms [EGH + 00] and the Proceedings of the 12 th Annual ACM-SIAM Symposium o...|$|R
40|$|In {{this paper}} we discuss on planar <b>polylines</b> and their inflections. This work derives from our {{interest}} in {{the problem of the}} fairing modification of a <b>polyline</b> curve whose movement is constrained by some tolerance requirements. We are interested in finding out the minimum number of inflections in a <b>polyline</b> satisfying those requirements. We introduce some new definitions and provide some results on the subject. Postprint (published version...|$|R
40|$|The classic Douglas-Peucker line-simplification {{algorithm}} {{is recognized as}} the one that delivers the best perceptual representations of the original lines. It may, however, produce simplified <b>polyline</b> that is not topologically equivalent to the original one consisting of all vertex samples. On the basis of properties of the <b>polyline</b> hulls, Saalfeld devised a simple rule for detecting topological inconsistencies and proposed to solve them by carrying additional refinements. In this paper, we present an alternative form for the classic Douglas-Peucker to produce a simplified <b>polyline</b> which is homeomorphic to the original one. Our modified Douglas-Peucker {{algorithm is}} based on two propositions: (1) when an original <b>polyline</b> is star-shaped, its simplification from the Douglas-Peucker procedure cannot self-intersect; and (2) for any <b>polyline,</b> two of its star-shaped sub-polylines may only intersect if there is a vertex of one simplified sub-polyline inside the other’s corresponding region...|$|R
40|$|In this paper, we {{describe}} a {{hidden line removal}} scheme for 2 D cartoon images. The depths are introduced to the <b>polylines</b> of the image. The surfaces of the image are classified and their depths updated according to the depths of <b>polylines</b> forming the surfaces. The hidden lines are identified by comparing {{the depths of the}} <b>polylines</b> with the depths of the surfaces. This algorithm has been applied successfully to our cartoon development system...|$|R
40|$|An {{algorithm}} {{for finding}} a smooth, obstacle-avoiding {{curve in the}} plane can be quite complicated. The process usually involves finding one or more feasible <b>polyline</b> paths, choosing a desirable path (for example the shortest path), and smoothing the <b>polyline</b> path to give a curve that avoids the obstacles. This paper {{is concerned with the}} last stage in the process; it assumes the existence of an obstacle-avoiding <b>polyline</b> path. A method is given to replace that <b>polyline</b> path by a G 2 cubic spline curve that also avoids the obstacles. The advantages of this method are the simplicity of the smooth, obstacle-avoiding curve, and the simplicity of the algorithm that finds the obstacle-avoiding curve...|$|R
40|$|Abstract: In this paper, {{a visual}} {{solution}} is presented about virtual reality tour of Web 3 D based on VRML. After analysis of <b>polyline</b> architectural structure related to tour route, a parametric definition of <b>polyline</b> is given, and a visual editor system of <b>polyline</b> is developed. With our {{experience on the}} VR project,the automatic generation algorithm is proposed about the VR tour based on VRML. The application shows that the proposed way can efficiently improve the performance quality of the project...|$|R
40|$|International audiencePolyline curves {{which are}} {{composed}} of line segments and arcs are widely used in engineering applications. In this paper, a novel offset algorithm for <b>polyline</b> curves is proposed. The offset algorithm comprises three steps. Firstly, the offsets of all the segments of <b>polyline</b> curves are calculated. Then all the offsets are trimmed or joined to build <b>polyline</b> curves that are called untrimmed offset curves. Finally, a clipping algorithm {{is applied to the}} untrimmed offset curves to yield the final results. The offset algorithm can deal with <b>polyline</b> curves that are self-intersection, overlapping or containing small arcs. The new algorithm has been implemented in a commercial system TiOpenCAD 8. 0 and its reliability is verified by a great number of examples...|$|R
40|$|We {{introduce}} two new related metrics, the geodesic {{width and}} the link width, {{for measuring the}} " between two non-intersecting <b>polylines</b> in the plane. If the two <b>polylines</b> have n vertices in total, we present algorithms to compute the geodesic width of the two <b>polylines</b> in O(n) space and the link width) working space. Our computation of these metrics relies on two closely-related combinatorial strutures: the shortest-path diagram and the link diagram of a simple polygon. The shortest-path (resp., link) diagram encodes the Euclidean (resp., link) shortest path distance between all pairs of points on the boundary of the polygon. We use these algorithms to solve two problems: Compute a continuous transformation that " one <b>polyline</b> into another <b>polyline.</b> Our morphing strategies ensure that each point on a <b>polyline</b> moves Preliminary versions of this paper appeared in the Proceedings of the 11 th Annual ACM-SIAM Symposium on Discrete Algorithms [10] and the Proceedings of the 12 th Annual ACM-SIAM Symposium on Discrete Algorithms [11] The author did part of this research when he was aliated with Stanford University. Address: Room 747, Department of Computer Science, Gould-Simpson Building, The University of Arizona, PO Box 210077, Tucson AZ 85721 - 0077. Email: alon@cs. arizona. edu. WWW: [URL]...|$|R
40|$|In {{this paper}} {{a method for}} {{automatic}} extraction of building roof boundaries is proposed, which combines LiDAR data and highresolution aerial images. The proposed method is based on three steps. In the first step aboveground objects are extracted from LiDAR data. Initially a filtering algorithm is used to process the original LiDAR data for getting ground and non-ground points. Then, a region-growing procedure and the convex hull algorithm are sequentially used to extract <b>polylines</b> that represent aboveground objects from the non-ground point cloud. The second step consists in extracting corresponding LiDAR-derived aboveground objects from a high-resolution aerial image. In order to avoid searching for the interest objects over the whole image, the LiDAR-derived aboveground objects’ <b>polylines</b> are photogrammetrically projected onto the image space and rectangular bounding boxes (sub-images) that enclose projected <b>polylines</b> are generated. Each sub-image is processed for extracting the <b>polyline</b> that represents the interest aboveground object within the selected sub-image. Last step consists in identifying <b>polylines</b> that represent building roof boundaries. We use the Markov Random Field (MRF) model for modelling building roof characteristics and spatial configurations. <b>Polylines</b> that represent building roof boundaries are found by optimizing the resulting MRF energy function using the Genetic Algorithm. Experimental results are presented and discussed in this paper...|$|R
40|$|Abstract. We {{consider}} embeddings of planar graphs in R 2 where ver-tices map to {{points and}} edges map to <b>polylines.</b> We refer {{to such an}} embedding as a <b>polyline</b> drawing, and ask how few bends are required to form such a drawing for an arbitrary planar graph. It {{has long been known}} that even when the vertex locations are completely fixed, a pla-nar graph admits a <b>polyline</b> drawing where edges bend a total of O(n 2) times. Our results show that this number of bends is optimal. In par-ticular, we show that Ω(n 2) total bends is required to form a <b>polyline</b> drawing on any set of fixed vertex locations for almost all planar graphs. This result generalizes all previously known lower bounds, which only applied to convex point sets, and settles 2 open problems. ...|$|R
40|$|Title {{from first}} page of PDF file (viewed November 24, 2010) Includes bibliographical {{references}} (p. 43) A user can plot <b>polyline</b> and polygon using Google API's as well as using ArcGIS 9. I chose MapObjects to display the data points. A polygon can represent a property or a lake on a county map whereas a <b>polyline</b> could represent a border or a route. The thesis explores <b>polyline</b> and polygon plotting on a map using Map Objects. It enables users to plot <b>polyline</b> and polygon on a map. This thesis makes use of a recent technology which enables users to plot data without buying expensive software. Moreover using a computer simulation rather than referring to a paper map is much more engaging and better aligned {{to the interests of}} modern users. User can save the plotted polygon and <b>polyline</b> as a shape file or a text file. A user can easily load their data points from a text file and the application will plot a <b>polyline</b> or polygon based on the co-ordinates provided in the file. The application also computes the total distance of the <b>polyline</b> as well as the perimeter of the polygon plotted by the user. A customized toolbar has been added to make the GUI of the application more users friendly. Help System has been embedded into the application to guide the user. The application utilizes Map Objects Java Edition and Java programming language. ESRI provides Map Objects Java Edition for free. Every attempt has been made to present subject in depth using a user friendly interface...|$|R
40|$|Both in {{military}} and civil applications, {{there is an}} urgent need for a highly up-to-date road data, which should be ideally semantically structured (into main roads, walking paths, escape ways, etc.) with application-driven attributes, such as road width, road type, surface condition and many others. A vectorization algorithm processing aerial images recently acquired yields an up-to-date road vector data, which are, however, often represented by wriggly, noisy <b>polylines</b> without semantics. The reasons for zigzagged street courses are insufficiencies in the intermediate results of sensor data processing (orthophotos, elevation maps) and occlusions caused by trees, buildings, and others. In the current contribution, an improved computation of geometric attributes will be explained which makes a difference between straight and circular (or elliptic) <b>polylines.</b> Using improved attributes, the candidates for <b>polylines</b> having identical course and sharing a junction are determined. From such candidates, we form chains of <b>polylines.</b> These chains correspond better to the intuitive perception of the term street than the previously used road <b>polylines,</b> because, even after being interrupted by narrower side roads, a chain maintains its label. The generalization of chains with simultaneously adjusting positions of junctions is evidently performed. We apply a generalization with the purpose-based modification of a well-known <b>polyline</b> simplification algorithm once chain-wise and once polyline-wise {{in order to show}} - by means of qualitative results - the advantages of the chain-wise generalization...|$|R
40|$|We have various {{interesting}} {{time series}} data {{in our daily}} life, such as weather data (e. g., temperature and air pressure) and stock prices. <b>Polyline</b> chart {{is one of the}} most common ways to represent such time series data. We often draw multiple <b>polylines</b> in one space to compare the time variation of multiple values. However, it is often difficult to read the values if the number of <b>polylines</b> gets larger. This paper presents a technique for visualization and level-of-detail control of large number of time series data. The technique generates clusters of time series values, and selects representative values for each cluster, as a preprocessing. The technique then draws the representative values as <b>polylines.</b> It also provides a user interface so that users can interactively select interesting representatives, and explore the time series values which belong to the clusters of the representatives. ...|$|R
40|$|We {{consider}} embeddings of planar graphs in R^ 2 where vertices map to {{points and}} edges map to <b>polylines.</b> We refer {{to such an}} embedding as a <b>polyline</b> drawing, and ask how few bends are required to form such a drawing for an arbitrary planar graph. It {{has long been known}} that even when the vertex locations are completely fixed, a planar graph admits a <b>polyline</b> drawing where edges bend a total of O(n^ 2) times. Our results show that this number of bends is optimal. In particular, we show that Ω(n^ 2) total bends is required to form a <b>polyline</b> drawing on any set of fixed vertex locations for almost all planar graphs. This result generalizes all previously known lower bounds, which only applied to convex point sets, and settles 2 open problems. Comment: 12 pages, 5 figure...|$|R
50|$|Describes the {{geometry}} of the site/phase if <b>polyline</b> information is available.|$|R
40|$|We {{study the}} problem of {{continuously}} transforming or morphing two non-intersecting simple (not self-intersecting) <b>polylines</b> in the plane. Our morphing strategies have the property that every intermediate <b>polyline</b> is also simple. We also guarantee that no portion of the <b>polylines</b> to be morphed is stretched or compressed {{by more than a}} user-defined parameter during the entire morphing. Our algorithms are driven by a new metric for measuring the similarity between two <b>polylines,</b> which may have other applications. We compute morphing schemes that minimize this metric and also approximate the minimum value efficiently. Department of Computer Science, D 340 Levine Science Research Center, Duke University, Box 90129, Durham, NC 27708 - 0129, USA, sariel@cs. duke. edu [URL] y Compaq Computer Corporation, Cambridge Research Lab, One Cambridge Center, Cambridge MA 02142, murali@crl. dec. com. 1 1 Introduction In the last few years, {{the problem of}} continuously morph [...] ...|$|R
50|$|Equidistant {{is a line}} {{of equal}} {{distance}} from a given point, line, <b>polyline.</b>|$|R
5000|$|Graphic markers: For placing arrows, circles, {{squares and}} <b>polylines</b> (with {{straight}} line segments).|$|R
