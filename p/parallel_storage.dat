88|114|Public
5000|$|EXPEED's multi-processor {{system on}} a chip {{solution}} integrates an image processor in multi-core processor architecture, with each single processor-core able to compute many instructions/operations in <b>parallel.</b> <b>Storage</b> and display interfaces and other modules are added and a {{digital signal processor}} (DSP) increases the number of simultaneous computations. An on-chip 32-bit microcontroller initiates and controls the operation and data transfers of all processors, modules and interfaces and {{can be seen as the}} main control unit of the camera.|$|E
5000|$|A Mattydale lay, {{also called}} [...] "cross-lay", [...] "speedlay", and [...] "transverse lay", {{is a method}} of storing hose on a fire engine. This method of storing hose is {{designed}} for rapid deployment of a hose line to attack a fire. In this manner, the hose is stored perpendicularly across the fire apparatus, usually above or adjacent to the pump panel, {{instead of the usual}} <b>parallel</b> <b>storage</b> in the rear. This allows the firefighter to pull the hose {{in the direction of the}} fire instead of having to make a turn.|$|E
5000|$|... "The {{first part}} of our {{arithmetic}} organ ... should be a <b>parallel</b> <b>storage</b> organ which can receive a number and {{add it to the}} one already in it, which is also able to clear its contents and which can store what it contains. We will call such an organ an Accumulator. It is quite conventional in principle in past and present computing machines of the most varied types, e.g. desk multipliers, standard IBM counters, more modern relay machines, the ENIAC" [...] (Goldstine and von Neumann, 1946; p. 98 in Bell and Newell 1971).|$|E
3000|$|Proceedings of PDSW 2014 : 9 th <b>Parallel</b> Data <b>Storage</b> Workshop - Held in Conjunction with SC 2014 : The International Conference for High Performance Computing, Networking, Storage and Analysis [...]...|$|R
5000|$|... #Caption: Two red <b>parallelled</b> {{hot water}} <b>storage</b> tanks {{connected}} to a wood-fueled furnace.|$|R
40|$|The {{optical storage}} {{characteristics}} {{of a new kind}} of organic photochromic material-pyrrylfulgide were experimentally investigated in the established <b>parallel</b> optical data <b>storage</b> system. Using the pyrrylfulgide/PMMA film as a photon-mode recording medium, micro-images and encoded binary digital data were recorded, readout and erased in this <b>parallel</b> system. The <b>storage</b> density currently reaches 3 x 10 (7) bit/cm(2). The recorded information on the film can be kept for years in darkness at room temperature...|$|R
5000|$|The {{principle}} of <b>parallel</b> <b>storage</b> {{asserts that the}} encoding and storage of verbatim and gist information operate in parallel {{rather than in a}} serial fashion. For instance, suppose that a person is presented with the word [...] "apple" [...] in red color. On the one hand, according to the {{principle of}} <b>parallel</b> <b>storage</b> of verbatim and gist traces, verbatim features of the target item (e.g., the word was apple, it was presented in red, printed in boldface and italic, and all but the first letter were presented in lowercase) and gist features (e.g., the word was a type of fruit) would be encoded and stored simultaneously via distinct pathways. Conversely, if verbatim and gist traces are stored in a serial fashion, then gist features of the target item (the word was a type of fruit) would be derived from its verbatim features and, therefore, the formation of gist traces would depend on the encoding and storage of verbatim traces. Interestingly, the latter idea was often assumed by early memory models. However, despite the intuitive appeal of the serial processing approach, research suggests that the encoding and storage of gist traces do not depend on verbatim ones. Several studies have converged on the finding that the meaning of target items is encoded independently of, and even prior to, the encoding of the surface form of the same items. Ankrum and Palmer, for example, found that when participants are presented with a familiar word (e.g., apple) for a very brief period (100 milliseconds), they are able to identify the word itself ("was it apple?") better than its letters ("did it contain the letter L?").|$|E
5000|$|Similar to the {{principle}} of <b>parallel</b> <b>storage,</b> retrieval of verbatim and gist traces also occur via dissociated pathways. According to {{the principle}} of dissociated retrieval, recollective and nonrecollective retrieval processes are independent of each other. Consequently, this principle allows verbatim and gist processes to be differentially influenced by factors such as the type of retrieval cues and the availability of each form of representation. In connection with Tulving's encoding specificity principle, items that were actually presented in the past are better cues for verbatim traces than items that were not. Similarly, items that were not presented in the past but preserve the meaning of presented items are usually better cues for gist traces. Suppose, for example, that subjects of an experiment are presented with a word list containing several dog breeds, such as poodle, bulldog, greyhound, doberman, beagle, collie, boxer, mastif, husky, and terrier. During a recognition test, the words poodle, spaniel, and chair are presented. According {{to the principle}} of dissociated retrieval, retrieval of verbatim and gist traces does not depend on each other and, therefore, different types of test probes might serve as better cues to one type of trace than another. In this example, test probes such as poodle (targets, or studied items) will be better retrieval cues for verbatim traces than gist, whereas test probes such as spaniel (related distractors, non-studied items but related to targets) will be better retrieval cues for gist traces than verbatim. Chair, on the other hand, would neither be a better cue for verbatim traces nor for gist traces because it was not presented and is not related to dogs. If verbatim and gist processes were dependent, then factors that affect one process would also affect the other in the same direction. However, several experiments showing, for example, differential forgetting rates between memory for the surface details and memory for the bottom-line meaning of past events [...] favor the notion of dissociated retrieval of verbatim and gist traces. In the case of forgetting rates, those experiments have shown that, over time, verbatim traces become inaccessible at a faster rate than gist traces. Brainerd, Reyna, and Kneer, for instance, found that delay drives true recognition rates (supported by both verbatim and gist traces) and false recognition rates (supported by gist and suppressed by verbatim traces) in opposite directions, namely true memory decays over time while false memory increases.|$|E
40|$|ABSTRACT. Within {{the last}} several years, a number of {{parallel}} algorithms for the join operation have been proposed. However, {{almost all of the}} algorithms did not take advantages of the underlying <b>parallel</b> <b>storage</b> structures or data declustering methods of the operand relations. This paper introduces the concept of <b>parallel</b> <b>storage</b> structure or declustering aware parallel join algorithm. A parallel B +-tree index is presented and two classes of parallel join algorithms, which take advantages of the underlying parallel B +-tree index, are proposed and analyzed in the paper. First, the paralle...|$|E
40|$|Dataset storage, exchange, {{and access}} play a {{critical}} role in scientific applications. For such purposes netCDF serves as a portable and efficient file format and programming interface, which is popular in numerous scientific application domains. However, the original interface does not provide a efficient mechanism for <b>parallel</b> data <b>storage</b> and access...|$|R
40|$|Changes in sensory and {{instrumental}} quality parameter sand in thawing drip, cooking drip and total drip loss of frozen stored Baltic cod fillets (Gadus morhua) at different storage temperatures were investigated. Cod fillets stored at – 20 °C and – 30 °C exhibited the lowest drip losses and obtained the highest sensory scores. Drip losses {{were found to}} be highest in cod fillets stored at – 10 °C and in double frozen fillets stored at – 20 °C. These two experiments also gave the lowest sensory scores. The texture parameters increased during <b>storage</b> <b>parallel</b> with <b>storage</b> time. The waterbinding capacity was lowest at – 10 °C and almost constant at – 30 °C. There is a good correlation between the sensory scores for “tough” and the instrumental texture measurement for hardness and chewiness...|$|R
40|$|This paper {{proposes a}} {{parallel}} file system that reduces data access conflicts by enhancing {{the degree of}} flexibility in positioning the write data. This is achieved by a file updating scheme in which data is appended to the disk instead of overwriting the existing data. The following paragraphs describe the basic configuration and features of this proposed parallel file system. 2 Basic structure of the <b>parallel</b> secondary <b>storage</b> syste...|$|R
30|$|This {{simulator}} offers {{wide range}} of configurations to storage systems which include a model for remote storage system and local storage systems, for example NFS, parallel file systems, <b>parallel</b> <b>storage</b> systems, and RAID systems.|$|E
40|$|Huge energy {{consumption}} {{has become a}} critical bottleneck for further applying large-scale cluster systems to build new data centers. Among various components of a data center, storage subsystems {{are one of the}} biggest consumers of energy. In this paper, we propose a novel buffer-disk based framework for large-scale and energy-efficient <b>parallel</b> <b>storage</b> systems. To validate the efficiency of the proposed framework, a buffer-disk scheduling algorithm is designed and implemented. Our algorithm can provide more opportunities for underlying disk power management schemes to save energy by keeping a large number of idle data disks in sleeping mode as long as possible. The trace-driven simulation results based on a revised disksim simulator show that this new framework can significantly improves the energy efficiency of large-scale <b>parallel</b> <b>storage</b> systems. 1...|$|E
40|$|To {{meet the}} {{bandwidth}} needs of modern computer systems, <b>parallel</b> <b>storage</b> systems are evolving beyond RAID levels 1 through 5. The Parallel Data Lab at Carnegie Mellon University has constructed three Scotch <b>parallel</b> <b>storage</b> testbeds {{to explore and}} evaluate five directions in RAID evolution: first, {{the development of new}} RAID architec-tures to reduce the cost/performance penalty of maintain-ing redundant data; second, an extensible software framework for rapid prototyping of new architectures; third, mechanisms to reduce the complexity of and auto-mate error-handling in RAID subsystems; fourth, a file system extension that allows serial programs to exploit parallel storage; and lastly, a parallel file system that extends the RAID advantages to distributed, parallel com-puting environments. This paper describes these five RAID evolutions and the testbeds in which they are being imple-mented and evaluated. ...|$|E
40|$|This paper derives {{balanced}} job bounds and asymptotic bounds for <b>parallel</b> {{computer and}} <b>storage</b> systems. The computation of these performance bounds is so simple {{that it can}} even be performed by hand. These bounds are the parallel system counterparts to previously developed bounds for nonparallel, product-form systems. The contribution {{of this paper is}} showing how these simple bounds for non-parallel systems can be applied to parallel systems. Since these bounds are computed via single-step formulae, the performance technique is useful in the early phases of design projects or capacity planning studies when several candidate configurations must be evaluated quickly. Index Terms: performance evaluation, <b>parallel</b> computer and <b>storage</b> systems, fork-join networks, queueing systems, RAID, disk arrays...|$|R
40|$|This paper {{presents}} a quick single-step performance bounding technique for <b>parallel</b> computer and <b>storage</b> systems. The computation of these bounds is so simple {{that it can}} even be performed by hand. The bounding technique develops balanced job bounds and asymptotic bounds for parallel systems. These bounds are the parallel system counterparts to previously developed bounds for serial product-form systems. The contribution {{of this paper is}} showing how these simple bounds for serial networks can be applied to parallel networks. The performance technique is potentially useful in the early phases of design projects or capacity planning studies when several candidate configurations have to be evaluated quickly. Index Terms: performance evaluation, <b>parallel</b> computer and <b>storage</b> systems, fork-join networks, queueing systems, performance bounds...|$|R
40|$|The {{following}} {{factors are}} helping {{to change the way}} we do computing: • Internet popularity • Powerful computer workstation availability • High speed networks • High Performance Computer rareness and expensiveness. All the previous factors motivated the emerging of Grid Computation. In fact, the idea behind the Grid concept is the coupling of a wide variety of geographically distributed resources, such as <b>parallel</b> supercomputers, <b>storage</b> systems, data sources, and special devices, that can then be used as a unified resource and thus the ”Grids”. 1...|$|R
40|$|Abstract — This paper {{presents}} a new <b>parallel</b> <b>storage</b> management approach which supports {{the allocation of}} shared storage bandwidth on a per-application basis. Existing <b>parallel</b> <b>storage</b> systems are unable to differentiate I/Os from different applications and meet per-application bandwidth requirement. This limitation {{presents a}} hurdle for applications to achieve their desired performance, which {{will become even more}} challenging as high-performance computing (HPC) systems continue to scale up with respect to both the amount of available resources and the number of concurrent applications. This paper proposes a novel solution to address this challenge through the virtualization of parallel file systems (PFSes). Such PFS virtualization is achieved with user-level PFS proxies, which interpose between native PFS clients and servers and schedule the I/Os from different applications according to the resource sharing algorithm (e. g., SFQ(D)). In this way, virtual PFSes can be created on a perapplication basis, each with a specific bandwidth share allocated according to its I/O requirement. This approach is applicable to different PFS-based <b>parallel</b> <b>storage</b> systems and can be transparently integrated with existing as well as future HPC systems. A prototype of this approach is implemented upon PVFS 2, a widely used PFS, and evaluated with experiments using a typical parallel I/O benchmark (IOR). Results show that this approach’s overhead is very small and it achieves effective proportional sharing under different usage scenarios. I...|$|E
40|$|It is {{important}} to improve data reliability and data access efficiency for data-intensive applications in a data grid environment. In this paper, we propose an Information Dispersal Algorithm (IDA) -based <b>parallel</b> <b>storage</b> scheme for massive data distribution and parallel access in the Scientific Data Grid. The scheme partitions a data file into unrecognizable blocks and distributes them across many target storage nodes according to user profile and system conditions. A subset of blocks, which can be downloaded in parallel to remote clients, is required to reconstruct the data file. This scheme can be deployed {{on the top of}} current grid middleware. A demonstration and experimental analysis show that the IDA-based <b>parallel</b> <b>storage</b> scheme has better data reliability and data access performance than the existing data replication methods. Furthermore, this scheme has the potential to reduce considerably storage requirements for large-scale databases on a data grid...|$|E
40|$|The aim of {{this study}} is to {{establish}} food cloud information search architecture. Food information search engine based on cloud computing architecture can not only achieve more personalized and intelligent search, but also can solve problems of data processing and storage centralization caused by mass of food and custom information. According to design idea of mobile search engine based on cloud computing architecture, the Map/Reduce algorithm and HDFS were thoroughly analyzed and researched. The cloud <b>parallel</b> <b>storage</b> technology under cloud computing architecture was introduced into mobile search engine for design and implementation mobile search engine under open-source Hadoop framework based on cloud computing architecture. The system achieves <b>parallel</b> <b>storage</b> of mass information and mass data to overcome unbalance problem of data centralization and overhead in storage server load caused by mass food data in traditional search engine, thus achieving high efficient mobile device search result and good user satisfaction...|$|E
40|$|Volume {{holography}} {{represents a}} promising alternative to existing <b>storage</b> technologies. Its <b>parallel</b> data <b>storage</b> leads to high capacities combined with short access times and high transfer rates. The design and realization of a compact volume holographic storage demonstrator is presented. The technique of phase-coded multiplexing implemented to superimpose many data pages {{in a single}} location enables to store up to 480 holograms per storage location without any moving parts. Results of analog and digital data storage are shown and real time optical image processing is demonstrated...|$|R
40|$|International audienceIn {{this paper}} we {{address the problem of}} {{planning}} a temporary storage area in a real production system. This temporary storage area is composed of <b>parallel</b> temporary <b>storage</b> units with distinct capacities. The storage operation of a job, also called a batch, has to answer time restrictions such as release dates, due dates, restricted family dependent setup times and time lags, and also a space constraint which is the capacity of the temporary storage unit. The goal is to schedule the batches on the storage units in order to minimize the total setup times and the maximum lateness. First, we model the problem on a single storage unit as a two-machine flowshop problem with a limited buffer capacity and we show that it is NP-hard. We also show that the particular case in which no lateness is allowed is solvable in polynomial time under special conditions on the buffer capacity, both for single or <b>parallel</b> temporary <b>storage</b> units. Next we provide three heuristics: a greedy algorithm, a hybrid heuristic based on Ant Colony Optimization and Simulated Annealing and finally a dedicated heuristic. The latter strongly exploits the structural properties shown in this paper. We provide experimental results which highlight the efficiency of the dedicated heuristic in comparison with the two other heuristics...|$|R
40|$|Task: {{sequential}} {{program and}} its local <b>storage</b> <b>Parallel</b> computation: {{two or more}} tasks executing concurrently Communication channel: link between two tasks over which messages can be sent and received send is nonblocking: sending task resumes execution immediately receive is blocking: receiving task blocks execution until requested message is availabl...|$|R
40|$|Performance {{improvement}} and energy conservation are two conflicting objectives in large scale <b>parallel</b> <b>storage</b> systems. In this paper, we propose a novel solution {{to achieve the}} twin objectives of maximizing performance and minimizing energy consumption of <b>parallel</b> <b>storage</b> systems. Specifically, a buffer-disk based architecture (BUD for short) is designed to conserve energy. A heat-based dynamic data caching strategy is developed to improve performance. The BUD architecture strives to allocate as many requests as possible to buffer disks, thereby keeping {{a large number of}} idle data disks in low-power states. This can provide significant opportunities for energy conservation while making buffer disks a potential performance bottleneck. The heat-based data caching strategy aims to achieve good load balancing in buffer disks and alleviate overall performance degradation caused by unbalanced workload. Our experimental results have shown that the proposed BUD framework and dynamic data caching strategy are able to conserve energy by 84. 4 % for small reads and 78. 8 % for large reads with slightly degraded response time. 1...|$|E
40|$|Distributed storage systems {{increase}} {{performance of}} storage subsystems yet introduce performance variability which can create bottlenecks in a storage system. This paper introduces performance fault masking for network-attached storage devices to decrease performance variations in <b>parallel</b> <b>storage</b> systems. Performance fault masking key components are a global cache and a cost-aware caching policy. Trace driven simulations of synthetic workloads have shown promise with this technique. Performance variations are reduced whereas average request times increase for most workloads. 1...|$|E
40|$|Datasets up to {{terabyte}} {{size and}} petabyte capacities {{have created a}} serious imbalance between I/O and storage system performance and system functionality. One promising approach {{is the use of}} parallel data transfer techniques for client access to storage, peripheral-to-peripheral transfers, and remote file transfers. This paper describes the parallel I/O architecture and mechanisms, Parallel Transport Protocol (PTP), parallel FTP, and parallel client Application Programming Interface (API) used by the High Performance Storage System (HPSS). <b>Parallel</b> <b>storage</b> integration issues with a local parallel file system are also discussed...|$|E
40|$|Scalable Distributed Data Structures (SDDS) {{store data}} in a file of key-based records {{distributed}} over many storage sites. The number of storage sites utilized grows and shrinks with the storage needs of applications, but transparently to them. An application can search records by key or by content in <b>parallel</b> at all <b>storage</b> sites. The need for privacy of the data at the storage sites might require the encryption of the records. However, the scheme needs to preserve the capability to search in parallel. We propose a scheme that achieves this goal. We create a collection of additional SDDS indices. We encrypt these {{so that we can}} still perform string searches performed in <b>parallel</b> at the <b>storage</b> sites. We present the scheme and evaluate its strength as well as storage and access performance. 1...|$|R
40|$|Real time {{databases}} are processing {{millions and}} billions of records on daily basis. Processing and taking backups of those real time databases are highly expensive. Traditional backup methods are progressively more difficult to back up huge volume of data’s. To overcome this issue, in previous work we addressed the difficulties of the issues and provided a solution for compressing the real time database systems using HIRAC algorithm. Present research focusing on optimal multi <b>storage</b> <b>parallel</b> backup (MSPB) for real time database systems by using Parallel Multithreaded Pipeline (PMP) Algorithm to store compressed database at multiple devices in parallel. PMP allows backups to be written to multiple devices in parallel. Using multiple devices can increase throughput {{in proportion to the}} number of devices used. Index Terms: <b>parallel</b> backup, multi <b>storage</b> server, backup multi devices, and data storage 1...|$|R
40|$|A bisfurylfulgide, E, E- 3, 4 -bis[1 -(2, 5 -dimethyl- 3 -furyl) ethylidene]- 3, 4 -dihydrofuran- 2, 5 -dione, is {{synthesized}} by Stobbe condensation reaction. The {{molecular structure}} of target compound {{is confirmed by}} single crystal X-ray crystallography analysis. It shows that the distances between two possible reaction sites of molecule are 0. 3394 and 0. 3406 nm respectively, which is favorable to photocyclization. The photochromic properties of this compound in different solvents are investigated, and the result shows that the compound exhibits excellent photochromic behavior. The primary result of applied research on <b>parallel</b> image <b>storage</b> is also presented...|$|R
40|$|Switching Architectures {{deploying}} shareable parallel memory modules {{are quite}} versatile {{in their ability}} to scale to higher capacity while retaining the advantage of sharing its entire memory resource among all input and output ports. The two main classes of such architectures, namely, the Shared Multibuffer-(SMB-) based switch and the Sliding-Window-(SW-) based packet switch, both deploy parallel memory modules that are physically separate but logically connected. Inspite of their similarity in regards to using shareable parallel memory modules, they differ in switching control and scheduling of packets to parallel memory modules. SMB switch uses centralized control whereas the SW switch uses a decentralized control for switching operations. In this paper, we present a new memory assignment scheme for the Sliding-Window (SW) switch for assigning packets to parallel memory modules that maximizes the <b>parallel</b> <b>storage</b> of packets to multiple memory modules. We compare the performance of a sliding-window switch deploying this new memory assignment scheme with that of an SMB switch architecture under conditions of identical traffic type and memory resources deployed. The simulation results show that the new memory assignment scheme for the sliding window switch maximizes <b>parallel</b> <b>storage</b> of packets input in a given switch cycle, and it does not require speed-up of memory modules. Furthermore, it provides a superior performance compared to that of the SMB switch under the constraints of fixed memory-bandwidth and memory resources...|$|E
40|$|We {{present an}} {{algorithm}} {{to compute the}} cycle structure of large directed graphs where each node has exactly one outgoing edge. Such graphs appear as state diagrams of finite state machines such as pseudo-random number generators in cryptography. The size of the graphs necessitates that the adjacency list is kept on hard disks. Our algorithm uses multiple processing units, so that a <b>parallel</b> <b>storage</b> system has to be employed to store the graph. We present experimental results for randomly chosen graphs, and for the graph of the A 5 / 1 generator used in GSM mobile phones...|$|E
40|$|We havedesigned and {{implemented}} an asynchronous data-parallel scheduler for the SML/NJ ML compiler. Using this general scheduler {{we built a}} data-parallel module that provides new operators to manipulate sequences (i. e., arrays, vectors) in parallel. Parallelization concerns such as thread creation and synchronization are hidden from the application programmer by ML's module abstraction. We nd that languages with modules, higher-order functions and automatic <b>parallel</b> <b>storage</b> management can, in this manner, seamlessly support data-parallel operators. An implementation of applications using the new sequence module on an eight-processor shared-memory machine indicates {{that in some cases}} useful speedup is possible with our approach. ...|$|E
40|$|Preprints are {{presented}} {{from the recent}} 1992 Optical Data Storage meeting in San Jose. The papers are divided into the following topical areas: Magneto-optical media (Modeling/design and fabrication/characterization/testing); Optical heads (holographic optical elements); and Optical heads (integrated optics). Some representative titles are as follow: Diffraction analysis and evaluation of several focus and track error detection schemes for magneto-optical disk systems; Proposal for massively <b>parallel</b> data <b>storage</b> system; Transfer function characteristics of super resolving systems; Modeling and measurement of a micro-optic beam deflector; Oxidation processes in magneto-optic and related materials; and A modal analysis of lamellar diffraction gratings in conical mountings...|$|R
40|$|Dynamic storage {{allocation}} {{has a significant}} impact on computer performance. A dynamic storage allocator manages space for objects whose lifetimes are not known by the system {{at the time of their}} creation. A good dynamic storage allocator should utilize storage efficiently and satisfy requests in as few instructions as possible. A dynamic storage allocator on a multiprocessor should have the ability to satisfy multiple requests concurrently. This paper examines <b>parallel</b> dynamic <b>storage</b> allocation algorithms and how performancescales with increasing numbers of processors. The highest throughputs and lowest instruction counts are achieved with multiple free list fit I. The best memory utilization is achieved using a best fit system...|$|R
40|$|The optical {{properties}} and potential applications of four kinds of fulgide and fulgimide were studied. A <b>parallel</b> optical <b>storage</b> apparatus was set up, which {{could reach the}} area density of 4. 8 x 10 (7) bits/cm(2) on the fulgide/PMMA film. Fourier transform orthogonal circular polarization holographic data storage was performed with high signal-to-noise-ratio reconstruction image, which obtained the storage density of 2 X 10 (8) bits/cm(2) for single hologram. Two-photon induced micro-patterns were recorded on the fulgimide/PMMA film with 800 nm, 100 fs, 1 KHz, 50 mW femtosecond laser. Dual-wavelength (650 nm and 488 nm) optical images storage were tested on a two-color mixing fulgides/PMMA film...|$|R
