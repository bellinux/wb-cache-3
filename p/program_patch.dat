10|137|Public
2500|$|Typically, diff {{is used to}} {{show the}} changes between two {{versions}} of the same file. Modern implementations also support binary files. The output is called a [...] "diff", or a patch, since the output can be applied with the Unix <b>program</b> <b>patch.</b> [...] The output of similar file comparison utilities are also called a [...] "diff"; like {{the use of the word}} [...] "grep" [...] for describing the act of searching, the word diff became a generic term for calculating data difference and the results thereof.|$|E
40|$|The {{verification}} of {{the interface between}} the preflight prepare-to-launch and flight program, targeting load, and flight program initialization was described. This is done using the digital command system coupled with a flight <b>program</b> <b>patch</b> and a memory dump command, the 6 D/LVDC simulator, and a program trace through phase 1 initialization...|$|E
40|$|Security Patch Management <b>Program</b> <b>Patch</b> Management {{is an easy}} {{concept to}} understand, but a {{challenge}} to execute. With client-side attacks becoming prolific, implementing security updates {{in a timely manner}} is becoming even more critical to protect information systems. There are several steps necessary for effective, sustainable patch management including vendor notification tracking, risk assessment, software packaging, and deployment. The {{purpose of this paper is}} to present a patch management framework for a typical enterprise based on authoritative s [...] . Copyright SANS Institut...|$|E
5000|$|Service pack 1, a {{collection}} of computer <b>program</b> <b>patches</b> and alterations ...|$|R
50|$|In 1995, Alesis {{gave the}} Quadrasynth an upgrade with the QuadraSynth Plus. It had more ROM (24MB), plus many more <b>program</b> <b>patches.</b> The General MIDI library was added, {{as well as}} an 8MB stereo Grand Piano sample.|$|R
50|$|The M1 {{offered the}} ability to combine up to eight <b>programs</b> (<b>patches)</b> to play {{simultaneously}} on various key and velocity zones. This arrangement is called a 'Combi,' and allowed more complex sounds to be assembled and played via keyboard or MIDI.|$|R
40|$|We {{consider}} {{the problem of}} distributing potentially dangerous information {{to a number of}} competing parties. As a prime example, we focus on the issue of distributing security patches to software. These patches implicitly contain vulnerability information that may be abused to jeopardize the security of other systems. l/Vhen a vendor supplies a binary <b>program</b> <b>patch,</b> different users may receive it at different times. The differential application times of the patch create a window of vulnerability until all users have installed the patch. An abuser might analyze the binary patch before others install it. Armed with this information, {{he might be able to}} abuse another user's machine. A relate...|$|E
40|$|The UNIX diff program {{finds the}} {{difference}} between two text files using a classic algorithm for determining the longest common subsequence; however, when working with structured input (e. g. program code), we often want to find {{the difference between}} tree-like data (e. g. the abstract syntax tree). In a functional programming language such as Haskell, we can represent this data with a family of (mutually recursive) datatypes. In this paper, we describe a functional, datatype-generic implementation of diff (and the associated <b>program</b> <b>patch).</b> Our approach requires advanced type system features to preserve type safety; therefore, we present the code in Agda, a dependently-typed language well-suited to datatypegeneric programming. In order to establish the usefulness of our work, we show that its efficiency can be improved with memoization and that {{it can also be}} defined in Haskell...|$|E
40|$|Australia, was {{conducted}} to quantify the changes on the spatial extent and patterns of flooded and inundated areas in a large, ephemeral floodplain. The study employed digital image processing techniques to produce inundation maps from the 1994 and 2004 flood events captured by Landsat 5 imagery. Using a geographic information system (GIS) based landscape patterns analysis <b>program</b> (<b>Patch</b> Analyst), selected landscape metrics pertaining to patch size, shape, and connectivity were calculated and analysed. The results show not only the significant reduction (44, 658 ha corresponding to 43 % decrease) in {{the extent of the}} flooded and inundated areas, but also the changes on the configuration of these patches. They became more fragmented and isolated, particularly in the lower region of the floodplain. The use of region-based analysis, rather than focusing solely on total area, has provided more information that subsequently linked these changes with water storage developments. This study concluded that the use of landscape metrics, along with conventional mapping of inundation extent, can support the monitoring of floodplain areas...|$|E
5000|$|The GnuWin32 project {{provides}} native {{ports in}} the form of runnable computer <b>programs,</b> <b>patches,</b> and source code for various GNU and open source tools and software, much of it modified to run on the 32-bit Windows platform. The ports included in the GnuWin32 packages are: ...|$|R
5000|$|Jeff Zeigler - drum <b>programming</b> , harmonizers , <b>patch</b> bay , SPX90 ...|$|R
5000|$|... #Caption: Winner of the Space Shuttle <b>Program</b> Commemorative <b>Patch</b> Contest ...|$|R
40|$|Abstract]: A {{case study}} of the Lower Balonne {{floodplain}} in Queensland, Australia, was conducted to quantify the changes on the spatial extent and patterns of flooded and inundated areas in a large, ephemeral floodplain. The study employed digital image processing techniques to produce inundation maps from the 1994 and 2004 flood events captured by Landsat 5 imagery. Using a geographic information system (GIS) based landscape patterns analysis <b>program</b> (<b>Patch</b> Analyst), selected landscape metrics pertaining to patch size, shape, and connectivity were calculated and analysed. The results show not only the significant reduction (44, 658 ha corresponding to 43 % decrease) in {{the extent of the}} flooded and inundated areas, but also the changes on the configuration of these patches. They became more fragmented and isolated, particularly in the lower region of the floodplain. The use of region-based analysis, rather than focusing solely on total area, has provided more information that subsequently linked these changes with water storage developments. This study concluded that the use of landscape metrics, along with conventional mapping of inundation extent, can support the monitoring of floodplain areas...|$|E
40|$|Abstract]: Water storage {{infrastructure}} developments and other land use changes may impact {{the extent of}} water flows and inundation in the floodplain. This may bring negative environmental effects and conflicts between competing users of water. In {{a case study of}} the Lower Balonne floodplain in Queensland, Australia, this project was conducted to quantify the changes on the spatial extent and patterns of flooded and inundated areas in a large, ephemeral floodplain river system. The study employed digital image processing techniques to produce inundation maps from the 1994 and 2004 flood events captured by Landsat 5 imagery. Using a landscape patterns analysis <b>program</b> (<b>Patch</b> Analyst) linked with a geographic information system (GIS), selected landscape metrics pertaining to patch size, shape, and connectivity were calculated and analysed. The results show not only the significant reduction (44, 658 ha corresponding to 43 % decrease) in the extent of the flooded and inundated areas, but also the changes on the spatial configuration of these patches. They became more fragmented and isolated, particularly in the lower region of the floodplain. This study concluded that the use of landscape metrics could be valuable for floodplain monitoring...|$|E
40|$|Traditionally, compilers {{available}} to the software developer/tester have only supported two software testing techniques, statement and branch coverage. However, during compilation, sufficient syntactic and semantic information is {{available to}} provide support for additional testing techniques. ^ This dissertation presents an approach to integrate support for program mutation, a well-known and effective software testing technique, directly into a compiler. The paradigm permits the intermediate states of computation within a machine-executable program to be monitored or modified subsequent to compilation, without recompiling the program. Program mutations are performed in an efficient manner on native machine-code, and direct support is provided for effective mutant execution on MIMD architectures. As such, the paradigm provides facilities {{for the development of}} practical tools that allow support for program mutation, while improving the cost-effectiveness of both experimental and testing applications. ^ The paradigm is based upon <b>program</b> <b>patch</b> generation and application. A prototype patch-generating C compiler, and mutation-based software testing environment utilizing this paradigm, have been constructed in order to demonstrate the approach. The prototype implementation supports the manipulation of separately compiled programs and, therefore, permits potentially large software systems to be tested. A set of experimental results compares the effectiveness of the compiler-integrated approach, employed by the prototype, to that employed by existing mutation-based software testing environments in providing support for program mutation. ...|$|E
50|$|StyleXP {{works by}} {{patching}} a DLL file named uxtheme.dll. Uxtheme.dll by default prevents users from installing themes {{that are not}} digitally signed by Microsoft. By patching this DLL, StyleXP can install themes that are not digitally signed. Earlier versions of the <b>program</b> <b>patched</b> the uxtheme.dll file on disk, while newer ones do so in memory.|$|R
50|$|The Security Analyzer {{looks for}} {{operating}} system and <b>program</b> <b>patches.</b> It also looks for vulnerable system settings, presenting users {{with a list}} of recommended actions to prevent malware from gaining access to a system. However, PC World criticized the amount of computer jargon used and lack of information about how adjust settings appropriately. On the other hand, PC Magazine found the feature straightforward, and often the solution involved downloading and installing an update.|$|R
5000|$|Third-party icon [...] "engines" [...] exist, which try to {{keep the}} look of AmigaOS up to date with modern {{standards}} of other Operating Systems. These <b>programs</b> <b>patch</b> the OS routines dedicated to icon handling, replacing them with custom ones. One of such attempts, NewIcons, has become almost the new de facto standard for AmigaOS 3.x. It was so popular that the new icon system used in AmigaOS 3.5 and above, GlowIcons, is based on its icon file format.|$|R
5000|$|Patch: source upgrade, {{where the}} {{modification}} of original source {{is provided in}} a special <b>patch</b> <b>program.</b> The <b>patch</b> is released by the developer of software. Generally, this type of source upgrade focus on bug and error fixing, not on adding new features to the engine. Patches are available on sites or FTP's of application developer. They can be also obtained from various computer magazines.|$|R
50|$|The {{front panel}} has a volume knob, a master tuning knob, a data entry knob for <b>programming</b> <b>patches,</b> {{modulation}} and pitch wheels with knobs for {{the depth of}} the effect, and various buttons to switch on and off modulation destinations, enable chord memory, transpose the keyboard, or infinitely sustain notes. The case is black metal with fluorescent displays to indicate the status of different synthesis parameters (see Figure 1), and black rubberized end pieces. Other version, possible earlier may have gloss painted wood ends.|$|R
50|$|Chromel-R {{was also}} {{produced}} as a woven fabric of chromel wires. It {{was developed by}} Litton Industries for use by NASA in the Apollo <b>program.</b> <b>Patches</b> of Chromel-R formed an outer layer of the spacesuit where abrasion resistance was needed. These patches {{can be seen as}} silver-grey areas over the white Beta cloth of the main suit. The upper areas of the overshoes, the gloves and patches beneath the life support backpack were of Chromel-R. Gold-plated open-weave Chromel-R mesh has also been used as the reflecting surface for compact-folding parabolic antenna on spacecraft.|$|R
5000|$|The {{front panel}} has two volume knobs (one for each {{available}} sound), a master tuning knob, a data entry knob for <b>programming</b> <b>patches,</b> modulation and pitch wheels, various buttons for mode (layer, or [...] "double", split) and program selection, and a four by eight grid for programming (with all parameters labelled on the grid; see Figure 1). Some other functions are also {{listed on the}} panel {{as a reminder of}} which buttons to press. The case is metal with light blue graphics and lettering, red LED indicators, and black painted wooden end pieces.|$|R
50|$|In {{addition}} to the <b>program</b> and <b>patches,</b> developers and WinMX users created third party programs to either enhance the chat room function or to control uploading by other peers.|$|R
40|$|Recent work on genetic-programming-based {{approaches}} to auto-matic <b>program</b> <b>patching</b> {{have relied on}} the insight that the content of new code can often be assembled out of fragments of code that already exist in the code base. This insight has been dubbed the plastic surgery hypothesis; successful, well-known automatic repair tools such as GenProg rest on this hypothesis, but {{it has never been}} validated. We formalize and validate the plastic surgery hypothe-sis and empirically measure the extent to which raw material for changes actually already exists in projects. In this paper, we mount a large-scale study of several large Java projects, and examine a history of 15, 723 commits {{to determine the extent to}} which these commits are graftable, i. e., can be reconstituted from existing code, and find an encouraging degree of graftability, surprisingly indepen-dent of commit size and type of commit. For example, we find that changes are 43 % graftable from the exact version of the software being changed. With a view to investigating the difficulty of finding these grafts, we study the abundance of such grafts in three possible sources: the immediately previous version, prior history, and other projects. We also examine the contiguity or chunking of these grafts, and the degree to which grafts can be found in the same file. Our results are quite promising and suggest an optimistic future for au-tomatic <b>program</b> <b>patching</b> methods that search for raw material in already extant code in the project being patched...|$|R
25|$|The <b>patch</b> <b>program</b> is {{not aware}} even of an {{implementation}} specific diff output.|$|R
50|$|Numerical {{machine code}} (i.e., not {{assembly}} code) may {{be regarded as}} the lowest-level representation of a compiled or assembled computer program or as a primitive and hardware-dependent programming language. While it is possible to write programs directly in numerical machine code, it is tedious and error prone to manage individual bits and calculate numerical addresses and constants manually. For this reason, programs are almost never written directly in machine code in modern contexts. Three exceptions are: for low level debugging, <b>program</b> <b>patching,</b> and assembly language disassembly (which would be called for in the absence of assembly source code, when only the machine language object code is available).|$|R
25|$|Reliability issues {{resulting}} from multiple <b>programs</b> attempting to <b>patch</b> the same {{parts of the}} kernel.|$|R
5000|$|IBM Mainframe utility IEBUPDTE a {{mainframe}} <b>patch</b> <b>program,</b> created about 20 {{years earlier}} (circa ~1964).|$|R
5000|$|Reliability issues {{resulting}} from multiple <b>programs</b> attempting to <b>patch</b> the same {{parts of the}} kernel.|$|R
5000|$|... #Caption: The 1943 {{improvement}} <b>program</b> added <b>patches</b> of appliqué armor to {{the sides}} of the turret and hull. This Sherman also sports a Culin hedgerow cutter, a 1944 field improvisation for breaking through the thick hedgerows of the Normandy bocage.|$|R
50|$|In 2005, the Order became {{involved}} with the Thunder Over the Boardwalk airshow in Atlantic City. By selling <b>programs</b> and <b>patches</b> for the event, the Lodge was able to develop a fundraising effort that would help for years to come.|$|R
50|$|However, the <b>patch</b> <b>program</b> {{also has}} some {{facilities}} to apply the patch into a file that is not exactly similar as the origin file {{that was used to}} produce the patch. This process is called fuzzy patch application, and results in a kind of asymmetric three-way merge, where the changes in the patch are discarded if the <b>patch</b> <b>program</b> cannot find a place where to apply them.|$|R
40|$|Kennedy Space Center's Knowledge-based Autonomous Test Engineer (KATE) {{is capable}} of {{monitoring}} electromechanical systems, diagnosing their errors, and even repairing them when they crash. A survey of KATE's developer/modelers revealed that they were already using a sophisticated set of productivity enhancing tools. They did request five more, however, and those make up {{the body of the}} information presented here: (1) a transfer function code fitter; (2) a FORTRAN-Lisp translator; (3) three existing structural consistency checkers to aid in syntax checking their modeled device frames; (4) an automated procedure for calibrating knowledge base admittances to protect KATE's hardware mockups from inadvertent hand valve twiddling; and (5) three alternatives for the 'pseudo object', a <b>programming</b> <b>patch</b> that currently apprises KATE's modeling devices of their operational environments...|$|R
40|$|Abstract—Adding similar {{features}} and bug fixes often requires porting <b>program</b> <b>patches</b> from reference implementations and adapting them to target implementations. Porting errors {{may result from}} faulty adaptations or inconsistent updates. This paper investigates (1) the types of porting errors found in practice, and (2) how to detect and characterize potential porting errors. Analyzing version histories, we define five categories of porting errors, including incorrect control- and data-flow, code redun-dancy, inconsistent identifier renamings, etc. Leveraging this categorization, we design a static control- and data-dependence analysis technique, SPA, to detect and characterize porting inconsistencies. Our evaluation on code from four open-source projects shows that SPA can detect porting inconsistencies with 65 % to 73 % precision and 90 % recall, and identify inconsistenc...|$|R
5000|$|Patch the Pirate is an Evangelical Christian {{series of}} character-building, comical, musical {{recordings}} for children produced by Majesty Music. These comical capers teach Christian values to children through story and song recordings, children’s choir clubs, and radio <b>programs.</b> <b>Patch</b> the Pirate {{is played by}} Ron [...] "Patch" [...] Hamilton, who is a popular Christian singer, songwriter, composer, evangelist, and personality. Ron Hamilton has created and published 36 Patch the Pirate Adventures including the first release Patch the Pirate Goes to Space in 1982 and the latest release in 2016 Operation Artic: Viking Invasion. Over 2 million Patch the Pirate adventures have been sold since {{the release of the}} first album. The Patch the Pirate Radio Program is recognized by the National Religious Broadcasters as the third largest religious children's programming outreach.|$|R
50|$|In {{addition}} to the official recognitions offered by each faith for girls, several faiths offer <b>patch</b> <b>programs</b> for girls who complete certain requirements and/or achieve certain goals. Because these <b>patch</b> <b>programs</b> are considered unofficial by GSUSA, they do not require formal approval from the Scouting organization, nor are they worn {{on the front of}} the uniform. Like other unofficial patches, event patches, and holiday patches, they are worn on the back of the uniform sash or vest.|$|R
