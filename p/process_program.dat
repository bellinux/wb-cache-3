93|4434|Public
50|$|A dumper is {{a program}} that saves data from the computer's memory, usually from a foreign <b>process</b> (<b>program)</b> to a (*.dmp) file. Often the process's memory is dumped {{automatically}} to disk if the program crashes. So you may recover any unsaved data from this file or {{send it to the}} developer so he can investigate what caused the crash.|$|E
5000|$|Peele {{maintains}} that, {{depending on}} the person, abstinence or moderation are valid approaches to treat excessive drinking. In a Psychology Today article which compared the Life <b>Process</b> <b>Program</b> with the disease model, he also argues against the overwhelming consensus reached decades ago by modern physicians, mental health professionals, research scientists, etc. that addiction is, in fact, a true disease.|$|E
50|$|In The Truth About Addiction and Recovery (1991) and 7 Tools to Beat Addiction (2004) Peele {{laid out}} what he {{believes}} to be the elements of alternative treatment. He developed these ideas as the Life <b>Process</b> <b>Program,</b> which {{was the basis for}} a non-12 Step residential treatment program and is now offered as an online treatment resource by Dr. Peele and colleagues.|$|E
40|$|Algorithms are {{presented}} for detecting errors and anomalies in programs which use synchronization constructs to implement concurrency. The algorithms employ data flow analysis techniques. First used in compiler object code optimization, the techniques have more recently {{been used in}} the detection of variable usage errors in single <b>process</b> <b>programs.</b> By adapting these existing algorithms the same classes of variable usage error can be detected in concurrent <b>process</b> <b>programs.</b> Important classes of errors unique to concurrent <b>process</b> <b>programs</b> are also described, and algorithms for their detection {{are presented}}...|$|R
40|$|<b>Process</b> <b>programming</b> {{remains a}} {{challenging}} problem for software process technology support. The complexity of process languages {{and the effort}} of <b>process</b> <b>programming</b> using these languages has hindered both the development and adoption of <b>process</b> <b>programming</b> technology. We are addressing these problems of process language design and development through a three-part strategy: 1. Focusing on a subset of process requirements related to coordination, in particular, to the coordination of activities and agents 2. Defining appropriate abstractions (and language constructs) to capture important coordination aspects of software processes 3. Devising visual yet rigorous representations to facilitate the effective use of the language. By focussing on coordination, we address [...] ...|$|R
50|$|Languages are {{typically}} related to <b>process</b> <b>programs</b> whereas instantiation techniques {{have been used}} to construct process scripts.|$|R
5000|$|The Java Class Library is the {{standard}} library, developed to support application development in Java. It is controlled by Sun Microsystems in cooperation with others through the Java Community <b>Process</b> <b>program.</b> Companies or individuals participating in this process can influence the design {{and development of the}} APIs. This process has been a subject of controversy. The class library contains features such as: ...|$|E
50|$|The Production {{support team}} on call person {{collects}} {{all the necessary}} information about the Production error. This information is then recorded in the Production error tracking tool using the correct support request number previously assigned. All the details such as data, environment, <b>process,</b> <b>program</b> logic that failed {{is used in the}} investigation. Production batch job, program used or any tool/utility used is reviewed for any possible errors.|$|E
50|$|In the 1980s at the Software Engineering Institute (SEI) at Carnegie Mellon University Humphrey {{founded the}} Software <b>Process</b> <b>Program,</b> {{and served as}} {{director}} of that program from 1986 until the early 1990s. This program was aimed at understanding and managing the software engineering process because this is where big and small organizations or individuals encounter the most serious difficulties and where, thereafter, lies the best opportunity for significant improvement.|$|E
40|$|Described {{here are}} the Division's {{research}} goals, priorities and emphases {{for the next several}} years and an outline of longer term plans. Included are highlights of recent accomplishments, current activities in FY 1988, research emphases in FY 1989, and longer term future plans. Data and information systems, the Geodynamics <b>Program,</b> the Land <b>Processes</b> <b>Program,</b> the Oceanic <b>Processes</b> <b>Program,</b> the Atmospheric Dynamics and Radiation Program, the Atmospheric Chemistry Program, and space flight programs are among the topic covered...|$|R
30|$|The ETSI {{complaint}} Geonetworking {{protocol layer}} {{can be implemented}} using either a multi-threaded or monolithic single <b>process</b> <b>programming</b> model. Both programming models have their advantages and disadvantages, such as a multi-threaded approach can handle concurrent packets, while a single process approach is easier to implement. We based our implementation on the monolithic single <b>process</b> <b>programming</b> model, as initial tests showed that, multi-threaded extensions to the NCTUns framework were causing instability issues. We employed a modular approach and realized each module as a function.|$|R
40|$|<b>Process</b> <b>programming</b> is a {{critical}} approach in many process management related areas including workflow management, software engineering, etc. Numerous process models, languages, and systems have been developed. Comprehensive libraries for <b>process</b> <b>programming</b> are essential for the acceptance, popularity, and success of this new programming paradigm. This paper identifies four important mechanisms, i. e. inheritance, nesting, integration, and reflection, for building process libraries and presents how these mechanisms are implemented {{in the context of}} P, a process language and system for developing cooperative applications...|$|R
50|$|The {{law school}} secured its {{position}} {{as one of}} the country’s top 100 law schools for the ninth consecutive year, with its Lawyering <b>Process</b> <b>Program</b> ranked second among top legal writing programs and its Saltman Center for Conflict Resolution ranked ninth among the top dispute resolution programs, according to U.S. News & World Report’s 2016 rankings of graduate schools and specialty programs. The law school's part-time program is ranked 22nd in the country.|$|E
50|$|In 1984, the Software Engineering Institute (SEI) was {{established}} as a federally funded research and development center headquartered {{on the campus of}} Carnegie Mellon University in Pittsburgh, Pennsylvania, United States. Watts Humphrey founded the SEI Software <b>Process</b> <b>Program,</b> aimed at understanding and managing the software engineering process. His 1989 book, Managing the Software Process, asserts that the Software Development Process can and should be controlled, measured, and improved. The Process Maturity Levels introduced would become the Capability Maturity Model Integration for Development(CMMi-DEV), which has defined how the US Government evaluates the abilities of a software development team.|$|E
50|$|A typical stepper has the {{following}} subassemblies: wafer loader, wafer stage, wafer alignment system, reticle loader, reticle stage, reticle alignment system, reduction lens, and illumination system. Process programs {{for each layer}} printed on the wafer are executed by a control system centering on a computer that stores the <b>process</b> <b>program,</b> reads it, and communicates with the various subassemblies of the stepper in carrying out the program's instructions. The components of the stepper are contained in a sealed chamber that is maintained at a precise temperature to prevent distortions in the printed patterns that might be caused by expansion or contraction of the wafer due to temperature variations.|$|E
40|$|<b>Process</b> <b>programming</b> {{represents}} {{the application of}} the software engineering idiom and technology to the development of superior software processes. There is a substantial and growing body of research into software process technology in general and <b>process</b> <b>programming</b> approaches in particular. Much of this research concerns process languages. We are now in a position to draw some conclusions {{about the ways in which}} process languages may contribute to software process engineering. Furthermore, we can begin to make inferences regarding the original hypothesis that <b>process</b> <b>programming</b> is an applicable and feasible technology for software process support. We take the fundamental aim of software process research to be the production of better quality software in less time and at less cost. Thus, we emphasize issues in linguistic support for software production processes. These issues include the distinction between process requirements and process language requirements, language r [...] ...|$|R
40|$|Abstract. <b>Process</b> <b>programming</b> is {{regarded}} as a critical approach in many cooperative process related areas including software engineering, workflow management, business process management, etc. Many process models, languages, and corresponding runtime support systems have been developed. We argue that a comprehensive library for <b>process</b> <b>programming</b> is essential for the acceptance, popularity, and success of this new programming paradigm. We define an architecture of such a library and present some mechanisms on how the architecture is implemented in the context of P, a process language and system for developing integrated cooperation applications. ...|$|R
40|$|Our {{long-term}} {{research in}} <b>process</b> <b>programming</b> {{is based on}} the hypothesis that software processes can and should be captured accurately and formally, using executable formalisms to support execution, analysis, and understanding. Many process languages have been developed over the years for modeling processes formally. In this paper, we argue that for automated support, we need not a process modeling language, but a <b>process</b> <b>programming</b> language – a language with semantics sufficient to support the execution of process definitions. Specifically, we argue that invocation semantics are required for accurately describing real-world development processes. We use the common phenomenon of rework {{as an example of a}} process feature which requires invocation semantics for adequate specification. In this paper, we argue that rework can only be accurately described using invocation semantics borrowed from general purpose programming languages. We argue this in the general case and demonstrate a specific case via an example using Little-JIL, our hierarchical <b>process</b> <b>programming</b> language. 1...|$|R
5000|$|During 1983-1990 {{he founded}} the Human Interface Laboratory and later led Design Process Research at Microelectronics and Computer Technology Corporation (MCC), the American Fifth Generation Computer Research Consortium in Austin, Texas. During 1991-1992 he was the Director of the Software <b>Process</b> <b>Program</b> at the Software Engineering Institute (SEI) at Carnegie Mellon University in Pittsburgh, Pennsylvania, where he led the {{projects}} that produced the Capability Maturity Model for Software (CMM). and the People CMM [...] In 1993 he returned to Austin and co-founded TeraQuest Metrics, which provided CMM-based improvement services globally. TeraQuest was acquired by Borland Software Corporation in 2005, where he became the Chief Process Officer.|$|E
50|$|There is {{heightened}} political and public pressure {{on higher education}} institutions to explain what {{they are trying to}} do and provide evidence they are actually doing it. Faculty want students to learn. In addition, faculty love their disciplines and want to share their knowledge and enthusiasm with students. Placing emphasis on what students learn and what students do helps to effectively drive improvement in the learning <b>process,</b> <b>program</b> planning and overall institutional improvement. Assessment adds transparency to the teaching and learning process, helps to provide some evidence to the effectiveness of student learning and promotes an environment where continuous improvement is well understood and ingrained in the institutional culture.|$|E
50|$|Dr. Curtis {{initiated}} {{the project to}} create the Capability Maturity Model (CMM) in 1991 {{after he had been}} selected to succeed Watts Humphrey as the Director of the Software Engineering Institute's Software <b>Process</b> <b>Program.</b> The CMM integrated the software development best practices the SEI had been collecting into Humphrey's Process Maturity Framework. The CMM for Software Version 1.0 was released in August, 1991 and Version 1.1 in January, 1993, and the CMM was published as a book in 1995. Throughout the 1990s he promoted the CMM to companies and government agencies in the U.S, E.U., and Asia, contributing to its global adoption as a method for guiding process improvement and for evaluating the capability of software organizations.|$|E
40|$|In <b>process</b> <b>programming,</b> <b>processes</b> are modeled as {{pieces of}} software, and a <b>process</b> <b>programming</b> {{language}} {{is used to}} specify the process. Such a language resembles a conventional programming language, providing constructs such as iteration and selection. This approach allows models to be simulated and enacted easily. However, it also suffers from the same problems that plague traditional programming, such as {{the question of whether}} the program itself is semantically correct or contains errors. We present an automated approach for detecting errors in such process models. Our approach is based on static code analysis techniques. We have developed a tool to analyze processes modeled using PML and have subsequently successfully redesigned models using our tool...|$|R
5000|$|O Street Museum hosts {{educational}} programs for {{all age groups}} to learn about {{and participate in the}} creative <b>process.</b> <b>Programs</b> include artist-in-residence programs, jammin’ (live music collaboration), songwriters’ workshops, book signings, film screenings [...] and live performances.|$|R
40|$|Early {{software}} environments {{have supported}} {{a narrow range}} of activities (programming environments) or else been restricted to a single “hard-wired ” software development process. The Arca-dia research project is investigating the construction of software environments that are tightly integrated, yet flexible and extensi-ble enough to support experimentation with alternative software processes and tools. This has led us to view an environment as being composed of two distinct., cooperating parts. One is the v&ant part, consisting of <b>process</b> <b>programs</b> and the tools and objects used and defined by those programs. The other is the fixed part, or infmstructure, supporting creation, execution, and change to the constituents of the variant part. The ma-jor components of the infrastructure are a <b>process</b> <b>programming</b> language and interpreter, object management system, and user interface management system. <b>Process</b> <b>programming</b> facilitates precise definition and automated support of software develop-ment and maintenance activities. The object management sys-tem provides typing, relationships, persistence, distribution and concurrency control capabilities. The user interface management system mediates communication between human users and exe-cuting processes, providing pleasant and uniform access to all facilities of the environment. Research {{in each of these}} areas and the interaction among them is described. ...|$|R
5000|$|Although the wafer is aligned {{after it}} {{is placed on the}} wafer stage, this {{alignment}} is not sufficient to ensure that the layer of circuitry to be printed onto the wafer exactly overlays previous layers already there. Therefore each shot is aligned using special alignment marks that are located in the pattern for each final IC chip. Once this fine alignment is completed, the shot is exposed by light from the stepper's illumination system that passes through the reticle, through a reduction lens, and on {{to the surface of the}} wafer. A <b>process</b> <b>program</b> or [...] "recipe" [...] determines the length of the exposure, the reticle used, as well as other factors that affect the exposure.|$|E
50|$|A typical stepper has the {{following}} subassemblies: wafer loader, wafer stage, wafer alignment system, reticle loader, reticle stage, reticle alignment system, reduction lens, and illumination system. Process programs {{for each layer}} printed on the wafer are executed by a control system centering on a computer that stores the <b>process</b> <b>program,</b> reads it, and communicates with the various subassemblies of the stepper in carrying out the program's instructions. The components of the stepper are contained in a sealed chamber that is maintained at a precise temperature to prevent distortions in the printed patterns that might be caused by expansion or contraction of the wafer due to temperature variations. The chamber also contains other systems that support the process, such as air conditioning, power supplies, control boards for the various electrical components, and others.|$|E
30|$|In {{order to}} analyze the {{mediating}} role of (Variable) Corporate Social Responsibility (VCSR) as a mediator between CSR Communication and Firm Performance (VFP), the <b>PROCESS</b> <b>program</b> developed by Hayes (2013) was used.|$|E
40|$|The <b>Process</b> <b>Programming</b> Basics: Priorities, Heuristic or Genetic Algorithms? This paper {{analyzes}} {{methods to}} optimize <b>process</b> <b>programming,</b> {{starting with the}} heuristic algorithms, then reviewing the current method previously advanced by the authors, the quantitative priorities, and finally approaches the problem with an innovative and promissory concept: the genetic algorithms and the “total costs and risks” optimization criterion, which is an alternative to both optimization with constraints and optimization with Lagrange multipliers. This new method emulates natural systems, thus borrowing from their robustness and adaptability. The method proves particularly useful in a turbulent and changing environment, requiring a realistic simulation model and also parallel processing in a high power computing grid. operations management; aggregate programming; master scheduling; multidisciplinary optimization; genetic algorithms. ...|$|R
40|$|Abstract. Process and {{workflow}} {{technology have}} traditionally not al-lowed for the specication of, nor run-time enforcement of, real-time requirements, {{despite the fact}} that time-to-market and other real-time constraints are more stringent than ever. Without specication of timing constraints, process designers cannot eectively reason about real-time constraints on <b>process</b> <b>programs</b> and the ecacy of their process pro-grams in satisfying those constraints. Furthermore, without executable semantics for those timing specications, such reasoning might not be applicable to the process as actually executed. We seek to support rea-soning about the real-time requirements of software processes. In this paper, we describe work in which we have added real-time specications to a <b>process</b> <b>programming</b> language, and in which we have added dead-line timers and task scheduling to enforce the real-time requirements of processes. ...|$|R
5000|$|Activities and <b>processes</b> - <b>programs</b> you run, systems you employ ...|$|R
40|$|In this article, {{the authors}} {{describe}} the Lawyering <b>Process</b> <b>Program</b> at the William S. Boyd School of Law. Like their colleagues at law {{schools across the}} country, students at the Boyd School of Law spend {{the early part of}} their law school careers learning the basics of legal research and writing. Unlike many of their fellow IL 2 ̆ 7 s, however, Boyd students also learn other important concepts and skills. The Lawyering <b>Process</b> <b>Program</b> at Boyd is a unique, three-semester class that includes significant instruction and experience in four areas: (1) legal writing and analysis; (2) legal research; (3) lawyering skills; and (4) professionalism. Each semester of LP Instruction builds upon the last, so students gradually build competence - and confidence - in these areas...|$|E
40|$|This article {{presents}} a process modeling language consisting of high level UML-based diagrams {{and a low}} level process language. The high level diagrams facilitate <b>process</b> <b>program</b> development, while the low level process language models processes as process programs. Between them is a mapping to further facilitate program development. ...|$|E
40|$|Marine Corps program {{managers}} at MARCORSYSCOM have a genuine need for timely and accurate expenditure reporting information {{in order to}} achieve effective planhing and budgeting for future programs. Since expenditures are not always recorded accurately during the reporting <b>process,</b> <b>program</b> managers experience delays. NANAU. S. Marine Corps (U. S. M. C.) author...|$|E
5000|$|Department of Defense Information Assurance Certification and Accreditation <b>Process,</b> {{previous}} <b>program</b> ...|$|R
40|$|Paper {{presents}} recent {{results of}} continuing program for increasing resistance of integrated circuits to single-event upset (SEU). Results based on study of test data for heavy-ion SEU {{in more than}} 180 different types of devices. (Some devices perform identical functions but made by different <b>processes.)</b> <b>Program</b> also examines developments in mathematical models for SEU...|$|R
40|$|Utah State University (USU) {{continued}} its program of measuring and interpreting electron density and its variations {{in a variety}} of ionospheric conditions with the Experimental Studies of Ionospheric Irregularities and Related Plasma <b>Processes</b> <b>program.</b> The program represented a nearly ten year effort to provide key measurements of electron density and its fluctuations using sounding rockets. The program also involved the joint interpretation of the results in terms of ionospheric processes. A complete campaign summary and {{a brief description of the}} major rocket campaigns are also included...|$|R
