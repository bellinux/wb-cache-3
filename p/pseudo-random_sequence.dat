173|364|Public
25|$|LFSRs can be {{implemented}} in hardware, and this makes them useful in applications that require very fast generation of a <b>pseudo-random</b> <b>sequence,</b> such as direct-sequence spread spectrum radio. LFSRs have also been used for generating an approximation of white noise in various programmable sound generators.|$|E
2500|$|Monte Carlo {{simulations}} {{are typically}} {{characterized by a}} large number of unknown parameters, many of which are difficult to obtain experimentally. Monte Carlo simulation methods do not always require truly random numbers to be useful (although, for some applications such as primality testing, unpredictability is vital). Many of the most useful techniques use deterministic, pseudorandom sequences, making it easy to test and re-run simulations. The only quality usually necessary to make good simulations is for the <b>pseudo-random</b> <b>sequence</b> to appear [...] "random enough" [...] in a certain sense.|$|E
50|$|LFSRs can be {{implemented}} in hardware, and this makes them useful in applications that require very fast generation of a <b>pseudo-random</b> <b>sequence,</b> such as direct-sequence spread spectrum radio. LFSRs have also been used for generating an approximation of white noise in various programmable sound generators.|$|E
30|$|Hence, {{slight change}} in the {{starting}} seed value will generate different <b>pseudo-random</b> <b>sequences</b> of the LFSR.|$|R
30|$|In this article, we have {{proposed}} an improved diagonal queue medical image steganography for patient secret medical data transmission using chaotic standard map, linear feedback shift register, and Rabin cryptosystem, {{for improvement of}} previous technique (Jain and Lenka in Springer Brain Inform 3 : 39 – 51, 2016). The proposed algorithm comprises four stages, generation of <b>pseudo-random</b> <b>sequences</b> (<b>pseudo-random</b> <b>sequences</b> are generated by linear feedback shift register and standard chaotic map), permutation and XORing using <b>pseudo-random</b> <b>sequences,</b> encryption using Rabin cryptosystem, and steganography using the improved diagonal queues. Security analysis has been carried out. Performance analysis is observed using MSE, PSNR, maximum embedding capacity, {{as well as by}} histogram analysis between various Brain disease stego and cover images.|$|R
30|$|As we know, {{slight change}} in seed values will {{generate}} the complete different <b>pseudo-random</b> <b>sequences</b> (using chaos).|$|R
50|$|Scrambling: The Walsh {{functions}} are scrambled with a <b>pseudo-random</b> <b>sequence</b> 0xE257E6D0291574EC. The Walsh function for the 1st {{character in a}} block is scrambled with the scrambling sequence, the 2nd Walsh function is scrambled with the sequence rotated right by 13 bits, the 3rd with the sequence rotated by 26 bits, and so on.|$|E
50|$|The {{distinction}} between random variable and random variate is subtle {{and is not}} always made in the literature. It is useful when one wants to distinguish between a random variable itself with an associated probability distribution on the one hand, and random draws from that probability distribution on the other, in particular when those draws are ultimately derived by floating-point arithmetic from a <b>pseudo-random</b> <b>sequence.</b>|$|E
50|$|As in {{the case}} of the next-bit test, the {{predicting}} collection used in the above definition can be replaced by a probabilistic Turing machine, working in polynomial time. This also yields a strictly stronger definition of Yao's test (see Adleman's theorem). Indeed, One could decide undecidable properties of the <b>pseudo-random</b> <b>sequence</b> with the non-uniform circuits described above, whereas BPP machines can always be simulated by exponential-time deterministic Turing machines.|$|E
30|$|In this paper, we have {{proposed}} an improved security system {{by using the}} chaotic 2 D standard map and linear feedback shift register, as an improvement in our previous report [19]. The proposed algorithm comprises three stages, viz. (i) generation of <b>pseudo-random</b> <b>sequences</b> (<b>pseudo-random</b> <b>sequences</b> are generated by linear feedback shift register and standard chaotic map); (ii) permutation and XORing using pseudo-random sequences; and (iii) steganography using the improved diagonal queues.|$|R
30|$|Permute {{first block}} {{elements}} using <b>pseudo-random</b> <b>sequences</b> L 3 (1), second block with L 3 (2) and so on.|$|R
40|$|International audienceIn this paper, {{we explore}} the 256 {{elementary}} cellular automata rules by a Walsh transform {{in order to}} find correlation-immune rules for generating good <b>pseudo-random</b> <b>sequences.</b> We prove that, except the 8 linear rules, there is no correlation-immune rule among the 256 rules. Thus, elementary cellular automata cannot be used as a cryptographic pseudo-random generator since the generated <b>pseudo-random</b> <b>sequences</b> are susceptible of correlation attacks. We conclude with some remarks on cryptography with cellular automata...|$|R
5000|$|The system scrambles {{the picture}} using a {{technique}} known as Line Cut-and-Rotate. Each line {{that made up}} each picture (video frame) is cut at one of 256 possible [...] "cut points", and {{the two halves of}} each line are swapped around for transmission. The series of cutpoints is determined by a <b>pseudo-random</b> <b>sequence.</b> Channels were decoded using a pseudorandom number generator (PRNG) sequence stored on a smart card (aka Viewing Card).|$|E
50|$|The coding {{used for}} US {{military}} ELF transmissions employed a Reed-Solomon {{error correction code}} using 64 symbols, each represented by a very long <b>pseudo-random</b> <b>sequence.</b> The entire transmission was then encrypted. The advantages of such a technique are that by correlating multiple transmissions, a message could be completed even with very low signal-to-noise ratios, and because only a very few pseudo-random sequences represented actual message characters, {{there was a very}} high probability that if a message was successfully received, it was a valid message (anti-spoofing).|$|E
50|$|In {{practical}} systems, it is {{not possible}} to produce a perfect impulse to serve as input for testing; therefore, a brief pulse is sometimes used as an approximation of an impulse. Provided that the pulse is short enough compared to the impulse response, the result will be close to the true, theoretical, impulse response. In many systems, however, driving with a very short strong pulse may drive the system into a nonlinear regime, so instead the system is driven with a <b>pseudo-random</b> <b>sequence,</b> and the impulse response is computed from the input and output signals.|$|E
30|$|Now, {{generate}} the <b>pseudo-random</b> <b>sequences</b> using Eq. (4) {{which in turn}} used for generating the synthetic images and in {{counting the number of}} rounds [6].|$|R
30|$|Such folded attractors {{with strong}} stable {{foliation}} can easily produce deterministic {{chaos of the}} form of <b>pseudo-random</b> <b>sequences</b> of rotations, as we shall now describe.|$|R
40|$|There was checked {{statistical}} {{properties of}} <b>pseudo-random</b> <b>sequences</b> given from Fibonacci generator. There is touched {{improvement of the}} creation scheme of such sequences based on results of numerical experiments. ????????? ?????????????? ???????? ??????????????? ???????????????????, ?????????? ?? ?????????? ?????????. ???????? ????????? ????? ?????????? ????? ???????????????????, ?????????? ?? ??????????? ????????? ?????????????...|$|R
5000|$|The {{main idea}} behind {{this method is}} that the results are {{computed}} based on repeated random sampling and statistical analysis. The Monte Carlo simulation is in fact random experimentations, in the case that, {{the results of these}} experiments are not well known.Monte Carlo simulations are typically characterized by a large number of unknown parameters, many of which are difficult to obtain experimentally.Monte Carlo simulation methods do not always require truly random numbers to be useful (although, for some applications such as primality testing, unpredictability is vital). Many of the most useful techniques use deterministic, pseudorandom sequences, making it easy to test and re-run simulations. The only quality usually necessary to make good simulations is for the <b>pseudo-random</b> <b>sequence</b> to appear [...] "random enough" [...] in a certain sense.|$|E
50|$|Time-hopping (TH) is a {{communications}} signal technique {{which can be}} used to achieve anti-jamming (AJ) or low probability of intercept (LPI). It can also refer to pulse-position modulation, which in its simplest form employs 2k discrete pulses (referring to the unique positions of the pulse within the transmission window) to transmit k bit(s) per pulse. To achieve LPI, the transmission time is changed randomly by varying the period and duty cycle of the pulse (carrier) using a <b>pseudo-random</b> <b>sequence.</b> The transmitted signal will then have intermittent start and stop times. Although often used to form hybrid spread-spectrum (SS) systems, TH is strictly speaking a non-SS technique. Spreading of the spectrum is caused by other factors associated with TH, such as using pulses with low duty cycle having a wide frequency response. An example of hybrid SS is TH-FHSS or hybrid TDMA (time division multiple access).|$|E
50|$|In 100BASE-T2, {{standardized}} in IEEE 802.3y, {{the data}} is transmitted over two copper pairs, 4 bits per symbol, but these pairs are only required to be category 3 rather than the category 5 required by TX. It uses these two pairs for simultaneously transmitting and receiving on both pairs thus allowing full-duplex operation. First, a 4-bit symbol is expanded into two 3-bit symbols through a non-trivial scrambling procedure based on a linear feedback shift register; see the standard for details. This is needed to flatten the bandwidth and emission spectrum of the signal, {{as well as to}} match transmission line properties. The mapping of the original bits to the symbol codes is not constant in time and has a fairly large period (appearing as a <b>pseudo-random</b> <b>sequence).</b> The final mapping from symbols to PAM-5 line modulation levels obeys the table on the right. 100BASE-T2 was not widely adopted but the technology developed for it is used in 1000BASE-T.|$|E
30|$|We have {{proposed}} a scenario that naturally leads to <b>pseudo-random</b> <b>sequences</b> of numbers of expirations between successive inspirations, but it remains {{to explain why the}} time between inspirations is quantised.|$|R
3000|$|Generate the <b>pseudo-random</b> <b>sequences</b> (L 5 (i)) {{using the}} {{primitive}} root,f = 1 + x + x^ 4, and the seed value is (Y 1 (1)*X 1 (1))(mod 15) [...]...|$|R
30|$|Chaotic systems display {{interesting}} {{properties that}} can be used in digital communication systems. One of these properties is sensitivity to system parameter change and changes to initial conditions. Another property is the random nature of chaotic signals. Both properties can be used to increase the capacity in multiple access systems [16, 17]. Sensitivity to initial conditions and system parameters can be used to generate sequences from discrete chaotic maps. These sequences have been known to have random characteristics similar to <b>pseudo-random</b> <b>sequences</b> [16 – 18]. Chaotic sequences can be used instead of <b>pseudo-random</b> <b>sequences</b> in cryptography, spread-spectrum systems, image, and video coding.|$|R
50|$|Most {{modulation}} schemes try {{to minimize}} the bandwidth of this signal, since bandwidth is a limited resource. However, spread-spectrum techniques use a transmission bandwidth that is several orders of magnitude greater than the minimal required signal bandwidth. One of the initial reasons for doing this was military applications including guidance and communication systems. These systems were designed using spread spectrum because of its security and resistance to jamming. Asynchronous CDMA has some level of privacy built in because the signal is spread using a pseudo-random code; this code makes the spread-spectrum signals appear random or have noise-like properties. A receiver cannot demodulate this transmission without knowledge of the <b>pseudo-random</b> <b>sequence</b> used to encode the data. CDMA is also resistant to jamming. A jamming signal only has a finite amount of power available to jam the signal. The jammer can either spread its energy over the entire bandwidth of the signal or jam {{only part of the}} entire signal.|$|E
30|$|Seed values, for the LFSR, {{depend upon}} the <b>pseudo-random</b> <b>sequence</b> {{generated}} by the chaos.|$|E
30|$|As {{shown in}} Table  5, {{statistical}} features of quasi-random sequences {{are closer to}} uniform distribution [0, 1] than <b>pseudo-random</b> <b>sequence.</b> It means that quasi-random sequences are mostly representing U[0, 1] than <b>pseudo-random</b> <b>sequence.</b> As was said before, these sequences are associated with low discrepancy, their interval [0, 1] coverage is better, and are much more uniform. Also, Sobol sequence is more uniform than Halton sequence.|$|E
3000|$|... -sequences as {{building}} blocks, the proposed method {{proved to be}} an efficient and flexible approach to construct long period <b>pseudo-random</b> <b>sequences</b> with desirable properties from short period sequences. Applying the proposed method to [...]...|$|R
3000|$|Generate the <b>pseudo-random</b> <b>sequences</b> (L 2 (i)) {{using the}} {{primitive}} root,f = 1 + x^ 4 + x^ 5 + x^ 6 [...] + x^ 8, and the seed value is Y 1 (i).|$|R
3000|$|... in-band busy tones (BTs) {{transmitted}} by the slaves associated to a master. Since busy tones {{do not have}} to contain any information, they can be simple <b>pseudo-random</b> <b>sequences,</b> following the same operation as the ARS.|$|R
30|$|Self-recovering {{receivers}} for DSSS {{signals in}} multipath with unknown spreading codes {{are discussed in}} [9], wherein a zero-forcing receiver/equalizer is proposed to recover the transmitted data. In [10], a method is proposed for estimating the <b>pseudo-random</b> <b>sequence</b> without any priori knowledge about the transmitter. Only {{the duration of the}} <b>pseudo-random</b> <b>sequence</b> is assumed to have been estimated. This approach is based on eigen analysis techniques.|$|E
30|$|Permute {{first block}} {{elements}} using <b>pseudo-random</b> <b>sequence</b> L 1 (1), second block with L 1 (2), and so on.|$|E
30|$|Step 1 : The {{algorithm}} {{creates a}} two-valued <b>pseudo-random</b> <b>sequence</b> using {{the length and}} width of the host image.|$|E
3000|$|Generate the <b>pseudo-random</b> <b>sequences</b> (L 1 (i)) {{using the}} {{primitive}} root, f = 1 + x^ 4 + x^ 5 + x^ 6 [...] + x^ 8, and the seed value is X 1 (i).|$|R
30|$|As {{shown in}} Table  4, quasi-random {{sequences}} in integral evaluation perform better than <b>pseudo-random</b> <b>sequences,</b> and their estimation error is low. As was stated earlier, Sobol sequence in high dimensions {{is more efficient}} than Halton sequence.|$|R
3000|$|... [...]. The signal x(t) is {{transmitted}} through m channels {{at the same}} time, and it is multiplied with different <b>pseudo-random</b> <b>sequences</b> in each branch whose cycle is abiding and obey the same distribution. The samples y [...]...|$|R
