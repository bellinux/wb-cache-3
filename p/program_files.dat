167|952|Public
25|$|The Vision's {{operating}} system and <b>program</b> <b>files</b> are later {{used in the}} creation of Iron Lad's armor. In Mighty Avengers the original Vision is briefly separated from Iron Lad by the power of the Cosmic Cube.|$|E
25|$|The series Young Avengers, {{which ran}} 12 issues from April 2005 to August 2006, {{introduced}} a new Vision, who {{is a combination of}} the synthezoid Vision's <b>program</b> <b>files</b> and the armor and mental engrams of the hero Iron Lad.|$|E
25|$|A {{component}} {{is the basic}} unit of a product. Each {{component is}} treated by Windows Installer as a unit. The installer cannot install just part of a component. Components can contain <b>program</b> <b>files,</b> folders, COM components, registry keys, and shortcuts. The user does not directly interact with components.|$|E
50|$|Comments in a {{computer}} program often store metadata about a <b>program</b> <b>file.</b>|$|R
50|$|Other {{metadata}} includes:the name of {{the creator}} of the original version of the <b>program</b> <b>file</b> and the date when the first version was created,the {{name of the}} current maintainer of the program,the names of other people who have edited the <b>program</b> <b>file</b> so far,the URL of documentation about how to use the program,the name of the software license for this program file,etc.|$|R
5000|$|An {{electronic}} file {{such as a}} digital image, digital photo, electronic document, <b>program</b> <b>file,</b> database table, etc.|$|R
25|$|The first Microsoft Windows port of Git was {{primarily}} a Linux emulation framework that hosts the Linux version. Installing Git under Windows creates a similarly named <b>Program</b> <b>Files</b> directory containing the MinGW port of the GNU Compiler Collection, Perl 5, msys2.0 (itself a fork of Cygwin, a Unix-like emulation environment for Windows) and various other Windows ports or emulations of Linux utilities and libraries. Currently native Windows builds of Git are distributed as 32 and 64-bit installers.|$|E
25|$|The {{video game}} Portal, in an {{internet}} update of the <b>program</b> <b>files</b> {{three years after}} its original release, provided in-game radio objects, whose sound effects became part of an alternate reality game-style analysis by fans of the game hinting at a sequel of the game the effects included Morse code strings that implied the restarting of a computer system, and could be decoded as SSTV images from a grainy video. These images included further hints of a BBS phone number that when accessed, provided {{a large number of}} ANSI-based images relating to the game and its potential sequel. The sequel, Portal 2, was later confirmed.|$|E
25|$|On {{the other}} hand, these forks {{would provide a}} {{challenge}} to interoperability with other operating systems. In copying or transferring a Mac OS file to a non-Mac system, the default implementations would simply strip the file of its resource fork. Most data files contained only nonessential information in their resource fork, such as window size and location, but <b>program</b> <b>files</b> would be inoperative without their resources. This necessitated such encoding schemes as BinHex and MacBinary, which allowed a user to encode a dual-forked file into a single stream, or inversely take a single stream so-encoded and reconstitute it into a dual-forked file usable by Mac OS.|$|E
50|$|Support for editing {{files in}} archive with {{external}} <b>programs.</b> <b>Files</b> {{can also be}} deleted from the archive.|$|R
5000|$|October 2009 - Workiva completes {{software}} beta <b>program,</b> <b>filing</b> 10-Q {{reports to}} the SEC with two beta customers ...|$|R
5000|$|C to {{determine}} new process credentials based on <b>program</b> <b>file</b> rather than interpreter file (see setuid); implies O flag.|$|R
2500|$|... a modular {{distribution}} {{that was}} created in order to organize <b>program</b> <b>files</b> in a different way: [...] each has everything relating to it, in its own directory. Lightweight on resources, it uses the Awesome tiling window manager by default, does not use systemd or a daemon-based network manager.|$|E
2500|$|X# <b>program</b> <b>files</b> {{must begin}} with a {{namespace}} directive. X# lacks a namespace hierarchy, so any directive will change the current namespace until it's changed again or the file ends. Variables or constants in different namespaces may have the same name as the namespace is prefixed to the member's name on assembly output. Namespaces cannot reference each other except through [...] "cheats" [...] using native-assembly-level operations.|$|E
2500|$|Applications {{written with}} the {{assumption}} that the user will be running with administrator privileges experienced problems in earlier versions of Windows when run from limited user accounts, often because they attempted to write to machine-wide or system directories (such as <b>Program</b> <b>Files)</b> or registry keys (notably HKLM). UAC attempts to alleviate this using File and Registry Virtualization, which redirects writes (and subsequent reads) to a per-user location within the user's profile. For example, if an application attempts to write to a directory such as [...] "C:\Program Files\appname\settings.ini" [...] to which the user does not have write permission, the write will be redirected to [...] "C:\Users\username\AppData\Local\VirtualStore\Program Files\appname\settings.ini". The redirection feature is only provided for non-elevated 32-bit applications, and only if they do not include a manifest that requests specific privileges.|$|E
5000|$|XMLTV - The device {{generates a}} link to an EPG XML TV <b>program</b> <b>file</b> for {{integration}} with 3rd party applications ...|$|R
5000|$|The {{following}} {{example is}} a very simple SConstruct file that compiles the C <b>program</b> <b>file</b> hello-world.c using the default platform compiler: ...|$|R
50|$|It can {{understand}} various <b>program</b> <b>file</b> formats and version control histories like Monotone, SCCS, RCS, CVS, Subversion, Mercurial, Git, Clearcase, Perforce and Bazaar.|$|R
50|$|There are two <b>Program</b> <b>Files</b> {{directories}} each {{visible to}} both 32-bit and 64-bit applications. The directory that stores the 32 bit files is called <b>Program</b> <b>Files</b> (x86) {{to differentiate between}} the two, while the 64 bit maintains the traditional <b>Program</b> <b>Files</b> name without any additional qualifier.|$|E
50|$|Transferring {{installed}} <b>program</b> <b>files</b> {{to another}} computer of {{basically the same}} architecture.|$|E
5000|$|Create, edit, and {{maintain}} (copy, move, remove, print, rename) data and <b>program</b> <b>files</b> ...|$|E
50|$|Firstly, a Data Item {{representing}} a 'clickable' {{link to a}} Data resource - possibly a local <b>Program,</b> <b>File</b> or else a Web Link to an Internet resource.|$|R
5000|$|The Humble Guys {{later became}} a demogroup, thus {{bringing}} the [...]nfo file tradition into the demoscene. More than forty thousand demoscene productions have an NFO file next to the <b>program</b> <b>file.</b>|$|R
50|$|The icon that Windows {{displays}} for a <b>program</b> <b>file</b> {{is actually}} the first icon resource in its EXE file. If the EXE file has no icon resources, a standard icon is displayed.|$|R
50|$|<b>Program</b> <b>Files</b> is the {{directory}} {{name of a}} standard folder in Microsoft Windows operating systems in which applications that {{are not part of}} the operating system are conventionally installed. Typically, each application installed under the 'Program Files' directory will have a subdirectory for its application-specific resources. Shared resources, for example resources used by multiple applications from one company, are typically stored in the Common <b>Program</b> <b>Files</b> directory.|$|E
50|$|SpiderMonkey {{includes}} a JavaScript Shell for interactive JavaScript development and for command-line invocation of JavaScript <b>program</b> <b>files.</b>|$|E
5000|$|<b>Program</b> <b>files</b> {{facilitate}} Gosu as a scripting language. For example, Gosu's Hello, World! is {{a simple}} one-line program:print("Hello, World!") ...|$|E
5000|$|Up to 9 local {{variables}} {{for each mode}} of operation and equation, solver or <b>program</b> <b>file,</b> with user defined names. Unlike the 28 global ones, using these local variables consumes user RAM.|$|R
50|$|An object element may be {{executed}} {{if it is}} a main program or linked with other object elements including a main program. The linking may be static or dynamic. A main program may {{be executed}} without pre-linking provided all required sub-programs are in the same <b>program</b> <b>file,</b> are system libraries, or are otherwise known. Rules may be included in a <b>program</b> <b>file</b> to direct the dynamic linkerâ€™s search for unfulfilled references. The linker may also be used to statically link multiple object modules together to form a new object module containing all instructions, data, and other information in the original object modules.|$|R
50|$|There {{are several}} {{malicious}} {{programs designed to}} look like Spybot-S&D (and other anti-malware software), with similar user interfaces and <b>program</b> <b>file</b> names. Some actually install spyware. These programs are known as rogue antispyware.|$|R
50|$|Disk Defragmenter {{has been}} {{improved}} to rearrange <b>program</b> <b>files</b> that are frequently {{used to a}} hard disk region optimized for program start.|$|E
50|$|In 'Microsoft Office' folder (in <b>Program</b> <b>files)</b> one may {{found one}} or more sub-folders: 'Office14' (this is the {{internal}} name for Office 2010).|$|E
5000|$|Insulation (few {{chances to}} {{manually}} alter <b>program</b> <b>files).</b> In a way, the booter {{acted as a}} sandbox, even though the concept didn't exist yet.|$|E
5000|$|The C2NLOAD first {{provides}} a turbo tape over the standard Commodore 1530 datasette Load routine, and then automatically loads the requested <b>program</b> <b>file</b> at 38.400 bit/s. C2NLOAD {{was developed in}} 2001-2006 by Marko MÃ¤kelÃ¤.|$|R
5000|$|O to {{open the}} <b>program</b> <b>file</b> and pass its file {{descriptor}} to the interpreter so it could read an otherwise unreadable file (for which the user {{does not have the}} [...] "Read" [...] permission).|$|R
25|$|The package author {{defines the}} product features. A word processor, for example, might place the <b>program's</b> core <b>file</b> into one feature, and the <b>program's</b> help <b>files,</b> {{optional}} spelling checker and stationery modules into additional features.|$|R
