54|912|Public
25|$|The {{original}} {{reason for}} the use of one-pass assemblers was speed of assembly â€“ often a second pass would require rewinding and rereading the program source on tape or rereading a deck of cards or punched paper tape. Later computers with much larger memories (especially disc storage), had the space to perform all necessary processing without such re-reading. The advantage of the multi-pass assembler is that the absence of errata makes the linking process (or the <b>program</b> <b>load</b> if the assembler directly produces executable code) faster.|$|E
2500|$|Even {{bootstrapping}} of the system, or Initial <b>Program</b> <b>Load</b> (IPL) in IBM nomenclature, {{is carried}} out by channels, although the process is partially simulated by the CPU (through an [...] "implied" [...] Start I/O [...] instruction, an [...] "implied" [...] Channel Address Word [...] at location 0 and an [...] "implied" [...] channel program [...] , also at location 0). Command chaining is assumed, so the [...] "implied" [...] CCW at location 0 falls through to {{the continuation of the}} channel program at locations 8 and 16, and possibly elsewhere should one of those CCWs be a transfer-in-channel (TIC).|$|E
5000|$|... #Caption: IBM System/3 console {{from the}} 1970s. <b>Program</b> <b>load</b> {{selector}} switch is lower left; <b>Program</b> <b>load</b> switch is lower right.|$|E
50|$|IBM's {{strategic}} {{transaction processing}} system, CICS (1970s onwards) uses dynamic loading extensively both for its kernel and for normal application <b>program</b> <b>loading.</b> Corrections to application programs {{could be made}} offline and new copies of changed <b>programs</b> <b>loaded</b> dynamically without needing to restart CICS (which can, and frequently does, run 24/7).|$|R
5000|$|A Job Control <b>Program</b> <b>loaded</b> by {{the monitor}} between jobs handled job setup.|$|R
5000|$|Automatic Initialization. High-speed radar <b>programs</b> <b>loading</b> from ROCS computer. (Raymond Cassette is removed) ...|$|R
50|$|IBM's {{competitors}} {{also offered}} single button <b>program</b> <b>load.</b>|$|E
5000|$|A {{bootstrap}} process (a {{process called}} Initial <b>Program</b> <b>Load</b> or IPL) ...|$|E
5000|$|... #Caption: Initial <b>program</b> <b>load</b> {{punched card}} for the IBM 1130 (1965) ...|$|E
50|$|The {{following}} <b>program</b> <b>loads</b> the C POSIX {{library and}} {{uses it to}} call the standard mkdir function.|$|R
50|$|The 2922 had no disk, however {{magnetic}} core had {{the property of}} retaining <b>programs</b> <b>loaded</b> from cards thru power on-off cycles.|$|R
50|$|The Datasette's {{speed was}} very slow (about 300 baud). <b>Loading</b> a large <b>program</b> at normal speed could {{take up to}} 30 minutes in extreme cases. Many European {{software}} developers wrote their own fast tape-loaders which replaced the internal KERNAL code in the C64 and offered loading times more comparable to disk drive speeds. Novaload {{was perhaps the most}} popular tape-loader used by British and American software developers. Early versions of Novaload had the ability to play music while a <b>program</b> <b>loaded</b> into memory, and was easily recognizable by its black border and digital bleeping sounds on loading. Other fast-loaders included load screens, displaying computer artwork while the <b>program</b> <b>loaded.</b> More advanced fast-loaders included minigames for the user to play while the <b>program</b> <b>loaded</b> from cassette. One such minigame fastloader was Invade-a-Load.|$|R
5000|$|When {{launched}} with administrator privileges, the <b>program</b> <b>load</b> {{in memory}} two files containing the attackers' demands : ...|$|E
5000|$|High flexibility: the bootmanager can boot every {{operating}} system {{which can be}} booted by the Initial <b>Program</b> <b>Load.</b>|$|E
50|$|In the IBM System/360 and its successors, {{including}} the current z/Architecture machines, the boot process {{is known as}} Initial <b>Program</b> <b>Load</b> (IPL).|$|E
50|$|A <b>program</b> <b>loaded</b> onto an {{existing}} computer {{and connected to}} the phone system can allow automatic content updates interspersed with company information.|$|R
5000|$|... {{memory address}} executes the machine {{language}} program at memory address. If none specified, the execute {{address of the}} <b>program</b> <b>loaded</b> off tape is used ...|$|R
40|$|In {{traditional}} monolithic {{operating systems}} {{the constraints of}} working within the kernel have limited the sophistication of the schemes used to manage executable program images. By implementing an executable image loader as a persistent user-space program, we can extend system <b>program</b> <b>loading</b> capabilities. In this paper we present OMOS, an Object/MetaObject Server which provides <b>program</b> <b>loading</b> facilities as a special case of generic object instantiation. We discuss the architecture of OMOS, the extensible nature of that architecture, and its application {{to the problem of}} dynamic program monitoring and optimization. We present several optimization strategies and the results of applying these strategies. 1 1 Introduction Traditional <b>program</b> <b>loading</b> facilities, such as those found in Unix[11], have simple semantics, often because they are implemented within the framework of a monolithic kernel where resources tend to be constrained. Similarly they tend to use simple external structures [...] ...|$|R
50|$|Shared {{libraries}} {{were added}} to Unix in the 1980s, but initially without the ability to let a <b>program</b> <b>load</b> additional libraries after startup.|$|E
50|$|Generate outputs. In {{the case}} of {{programs}} this includes the <b>program</b> <b>LOAD</b> module/s, DBRM and source. A GENERATE is generally executed immediately following an ADD or UPDATE.|$|E
50|$|Dynamic Configuration Changes - Table size, system characteristics, and device {{configuration}} {{changes can}} be enabled and take effect after the next Initial <b>Program</b> <b>Load</b> (IPL) sequence, rather than during system generation.|$|E
5000|$|Init (event of a <b>program</b> <b>loading,</b> or {{beginning}} of work after a financial instrument has been changed, or input parameters have been altered, or the account has been switched); ...|$|R
50|$|The SMART Board {{interactive}} whiteboard works with any <b>program</b> <b>loaded</b> or {{available on the}} host computer. Some applications commonly used with the SMART Board are Microsoft PowerPoint, Excel, Word, and AutoCAD.|$|R
40|$|In {{traditional}} monolithic {{operating systems}} {{the constraints of}} working within the kernel have limitedthe sophistication of the schemes used to manage executable program images. By implementing an executable image loader as a persistent user-spaceprogram, we can extend system <b>program</b> <b>loading</b> capabilities. In this paper we present OMOS, an Object/MetaObject Server which provides <b>program</b> <b>loading</b> facilities as a special case of generic object instantiation. We discuss the architecture of OMOS, the extensible natureofthatarchitecture, and its application {{to the problem of}} dynamic program monitoring and optimization. We present several optimization strategies and the results of applying these strategies...|$|R
5000|$|Initial <b>Program</b> <b>Load</b> (IPL)PoOps is {{a process}} for loading a program when there isn't a loader {{available}} in storage, usually because the machine was just powered on or to load an alternative operating system. This process is sometimes known as Booting.|$|E
5000|$|Unlike the IBM 360, where a booting device {{could be}} {{selected}} from the system console, an IBM 1130 could only be [...] "booted" [...] (IPL'd: Initial <b>Program</b> <b>Load)</b> from an external device: a card reader or a paper tape reader.|$|E
50|$|In OS/360 load modules {{could be}} {{permanently}} loaded at Initial <b>Program</b> <b>Load</b> (IPL) time {{into an area}} of real storage known as the Link Pack Area (LPA). In SVS the LPA was split into three areas, each of which was searched in turn.|$|E
40|$|It {{is known}} that a <b>program</b> <b>loaded</b> into the User <b>Program</b> Area can <b>load,</b> via SVC 202, only {{programs}} to be allocated in the Transient Program Area and not programs to be allocated in the same User Program Area. To allow any program to use also this second type function, a procedure is proposed in this paper. ...|$|R
5000|$|Alternatively, in [...]COM <b>programs</b> <b>loaded</b> at offset 100h, one {{can address}} the PSP {{directly}} just {{by using the}} offsets listed above. Offset 000h points {{to the beginning of}} the PSP, 0FFh points to the end, etc.|$|R
5000|$|When ProDOS SYS {{programs}} were introduced (written in programming languages other than BASIC; like Assembler, C or Pascal) {{it was common}} to use [...] "page 2" [...] graphics only because SYS <b>programs</b> <b>loaded</b> at 0x2000 which conflicted with [...] "page 1".|$|R
50|$|In this case, {{decoding}} the bytecodes {{is performed}} once, during program compilation or <b>program</b> <b>load,</b> {{so it is}} not repeated each time an instruction is executed. This can save much time and space when decode and dispatch overhead is large compared to the execution cost.|$|E
50|$|Remote Initial <b>Program</b> <b>Load</b> (RIPL or RPL) is a {{protocol}} for starting {{a computer and}} loading its operating system from server via a network. Such a server runs a network operating system such as LAN Manager, LAN Server, Windows NT Server, Novell NetWare, Solaris or Linux.|$|E
50|$|DOS-VS allowed up {{to seven}} {{concurrent}} programs, although five or six was a more common number due to the smaller scale of the hardware usually hosting DOS systems. Both DOS and DOS-VS allow the number of partitions to be set at IPL (Initial <b>Program</b> <b>Load),</b> the IBM term for Boot load.|$|E
50|$|The Initial Instructions {{described}} as the Example Program above is effectively a primary bootloader which is normally used to read a secondary bootloader known as T23, prepended to all program tapes. T23 allows more flexible <b>program</b> <b>loading</b> facilities including sumchecking of the loaded code.|$|R
5000|$|Initial <b>program</b> <b>loading</b> is {{typically}} done from a tape, a card reader, or a disk drive. Generally, {{the operating system}} was loaded from a disk drive; IPL from tape or cards was used only for diagnostics or for installing an operating system on a new computer.|$|R
50|$|The linkage {{convention}} for OS/360 and its descendants {{requires that}} a program be invoked with register 14 containing the address to return control to when complete, and register 15 containing the address {{at which the}} called <b>program</b> is <b>loaded</b> into memory; at completion, the <b>program</b> <b>loads</b> a return code in register 15, and then branches to the address contained in register 14. But, initially IEFBR14 was not coded with these characteristics in mind, as IEFBR14 was initially used as a dummy control section, one which simply returned to the caller, not as an executable module.|$|R
