20|36|Public
5000|$|AJAX-based browser DOM <b>page</b> <b>refresh,</b> i.e. no {{full page}} reloads.|$|E
5000|$|Rich client UI {{development}} with API access to server state and automatic high speed DOM-based <b>page</b> <b>refresh</b> ...|$|E
50|$|An {{alternative}} {{method is to}} provide an interaction device, such as a button, to let the user choose when to refresh the content. Another option is using a technique such as Ajax to update (parts of) the Web site {{without the need for}} a complete <b>page</b> <b>refresh,</b> but this would also require that the user enable JavaScript in their browser.|$|E
50|$|E Ink Carta and Carta HD {{displays}} support Regal waveform technology, {{which reduces}} {{the need for}} <b>page</b> <b>refreshes.</b>|$|R
50|$|Because of its {{application}} nature, content was loaded dynamically, avoiding {{the need for}} <b>page</b> <b>refreshes.</b> As such, user behavior (what is searched for, what is focused on) could be tracked over a session. As a result, technology facilitating the targeting of advertising based on user actions (behavioral targeting) was also invented for the platform.|$|R
40|$|AbstractThis paper built 3 G mobile {{learning}} system using Ajax technology. Ajax technology helps overcome the mobile browser to certain restrictions, while improving the user experience. Use Ajax to avoid <b>page</b> <b>refreshes.</b> Because only the transmission {{part of the}} page, the data using Ajax to load faster and also {{reduce the amount of}} data of air transport...|$|R
5000|$|In this technique, {{the server}} takes {{advantage}} of persistent HTTP connections, leaving the response perpetually [...] "open" [...] (i.e., the server never terminates the response), effectively fooling the browser to remain in [...] "loading" [...] mode after the initial page load could be considered complete. The server then periodically sends snippets of JavaScript to update {{the content of the}} page, thereby achieving push capability. By using this technique, the client doesn't need Java applets or other plug-ins in order to keep an open connection to the server; the client is automatically notified about new events, pushed by the server. One serious drawback to this method, however, is the lack of control the server has over the browser timing out; a <b>page</b> <b>refresh</b> is always necessary if a timeout occurs on the browser end.|$|E
5000|$|... iCab has {{features}} for website developers, including an HTML validity checker, an automatic <b>page</b> <b>refresh</b> option, a Web Inspector, DOM Inspector, JavaScript debugger, and a Console. iCab's [...] "Automatic Update" [...] option, for any page it is rendering {{directly from the}} local hard disk, will automatically reload the page when changes are saved to disk. The HTML syntax validity checker displays a smiley face in the Status Bar and also, optionally, in the Toolbar. Clicking on the smiley will bring {{up a list of}} any errors on the page, as will [...] "Error Report" [...] from the Tools menu. Double clicking on an error will display the page source, with the offending syntax highlighted. The HTML syntax validator was first seen in the same author's earlier web browser, CAB.|$|E
30|$|As {{mentioned}} earlier, {{the heat}} map view provides a time slider for inspecting past data. Technically, {{this has been}} implemented using an AJAX approach (a background call to the server) which allows for an almost instant displaying of the required data without a <b>page</b> <b>refresh.</b>|$|E
40|$|No Clergy is an {{interactive}} music performance/installation {{in which the}} audience is able to shape the ongoing music. In it, members of a small acoustic ensemble read music notation from computer screens. As each <b>page</b> <b>refreshes,</b> the notation is altered and shaped by both stochastic transformations of earlier music with the same performance and audience feedback, collected via standard CGI forms...|$|R
5000|$|Attention shift {{addresses}} {{the issue of}} [...] "getting lost", or {{the experience of a}} [...] "broken flow". It is usually measured by the number of <b>page</b> <b>refreshes</b> or the amount of hand-eye coordination required to complete a task. According to attention shift, new pages cause more stress than pop-ups, and pop-ups are more [...] "expensive" [...] than things like inline-editing.|$|R
40|$|Web {{applications}} {{facilitated by}} {{technologies such as}} JavaScript, DHTML, AJAX, and Flash use {{a considerable amount of}} dynamic web content that is either inaccessible or unusable by blind people. Server side changes to web content cause whole <b>page</b> <b>refreshes,</b> but only small sections of the page update, causing blind web users to search linearly through the page to find new content. The connecting theme is the need to quickly and unobtrusively identify the segments of a web page that have changed and notify the user of them. In this paper we propose Dynamo, a system designed to unify different types of dynamic content and make dynamic content accessible to blind web users. Dynamo treats web page updates uniformly and its methods encompass both web updates enabled through dynamic content and scripting, and updates resulting from static <b>page</b> <b>refreshes,</b> form submissions, and template-based web sites. From an algorithmic and interaction perspective Dynamo detects underlying changes and provides users with a single and intuitive interface for reviewing the changes that have occurred. We report on the quantitative and qualitative results of an evaluation conducted with blind users. These results suggest that Dynamo makes access to dynamic content faster, and that blind web users like it better than existing interfaces...|$|R
40|$|We {{study the}} refresh model {{required}} to keep an up to date copy of a web page. This has applications for more efficient and frequent crawling, {{in the case of}} search engines, and for higher hit rates for proxy servers with pre-fetching. Two main models have been proposed namely the uniform refresh model (Cho and Garcia-Molina, 2000) and the adaptive <b>page</b> <b>refresh</b> model (Edwards et al., 2001), with some debate as to the relative value of each model. In this work we show that adaptive <b>page</b> <b>refresh</b> models can be further improved by careful selection of initial page-refresh rates of newly added links as indicated by our page evolution studies showing that page-change rates (and consequently page-refresh rates) are dependent on top-leve...|$|E
40|$|AbstractBased on {{the desire}} of {{aircraft}} maintenance, combined with the situation in work, this paper present the design and implementation of aircraft maintenance system based dot Net. For a partial <b>page</b> <b>refresh</b> object, AJAX is used through the system. New technology is used in a creative way and will promote innovation and transformation of the business...|$|E
40|$|This book teaches web {{developers}} how {{to quickly}} build engaging and interactive web sites and applications of professional quality using Microsoft's latest web development tools. You'll not only learn to create applications with ASP. NET 2. 0 that {{have all the}} great tricks you see on popular commercial web sites, you'll also {{learn how to use}} the new ASP. NET AJAX framework to make your application update certain information without a <b>page</b> <b>refresh.</b> And you'll accomplish all of this with minimal coding...|$|E
50|$|TM: Total {{minutes is}} a metric {{being used by}} Nielsen/NetRatings to measure total time spent on a Web page rather {{than the number of}} Web page views. On July 10, 2007, Nielsen {{announced}} that they would be relying on TM as their primary metric for measuring Web page popularity, due to changes in the way Web pages provide content through audio and video streaming and by <b>refreshing</b> the same <b>page</b> without totally reloading it. <b>Page</b> <b>refreshes</b> are one aspect of Rich Internet Applications (RIA). RIA technologies include AJAX (Asynchronous JavaScript and XML) and Microsoft Silverlight.|$|R
40|$|Abstract: Early Internet {{applications}} {{were written}} using a classic client/server model, with multiple content <b>pages</b> <b>refreshed</b> for each user action. As users continue to demand {{more sophisticated and}} increasingly interactive Internet programming, applications development is evolving to permit more efficient communication between clients and servers. Techniques such as Ajax {{are being used to}} promote this new style of Internet programming. Rich Internet Applications (RIA) offer greatly enhanced usability, and allow Internet programs to rival their desktop counterparts for functionality. This paper explores technologies deployed in creating RIA, and considers relative merits and limitations of this new style of application development...|$|R
2500|$|... (note: {{displayed}} pictures change dynamically; <b>refresh</b> <b>page</b> or switch English/Espa≈àol to see others) ...|$|R
40|$|Want to {{make your}} Ajax apps more dynamic? This Short Cut shows you how. It covers: Using the Apache 2. 2. x {{framework}} to build MVC applications incorporating design patternsBuilding custom Apache modules that handle Ajax requests using JSONSolving the <b>page</b> <b>refresh</b> problem in Ajax apps by tracking persistent sessions and using that information to reset the user interface when appropriate We walk you through, in detail and with complete code listings, how to develop the necessary Apache 2. 2. x modules. And we conclude with a comprehensive set of appendixes that cover the entire Apache developmen...|$|E
40|$|This Chapter {{describes}} how the design tool WebRatio (and its companion conceptual model WebML) have been extended to support the new requirements imposed by Rich Internet Applications (RIAs), that are recognized {{to be one of}} the main innovations that lead to the Web 2. 0 revolution. Complex interactions such as drag and drop, dynamic resizing of visual components, graphical editing of objects, partial <b>page</b> <b>refresh</b> are addressed by the RIA extensions of WebRatio. The chapter discusses what kinds of modelling primitives are required for specifying such patterns and how these primitives can be integrated in a CASE tool. Finally, a real industrial case is presented in which the novel RIA features are successfully applied...|$|E
40|$|The query of material's {{properties}} via a grid enabled Web portal plays {{a critical}} role in the MaterialsGrid project within eScience. However, developing a normal standard portlet to query material properties {{is by no means a}} perfect solution. Portal <b>page</b> <b>refresh</b> is an expensive action as one portlet refresh can result in the refreshing of other portlets. In order to address this issue in material properties queries, the AJAX technique has been adopted. In this paper, we proposed a development model of using AJAX in a JSR- 168 portlet, and discussed the integration of AJAX into the MaterialsGrid portal for chemical formula search. By using AJAX, users can handle many queries and only apply the updates to the display of table, without requiring a full page to refresh. This can improve query performance and bring a more user-friendly interface. ...|$|E
5000|$|At {{the same}} time, DW's news website {{moved from a}} [...]de URL to [...]com and added a social media stream to its front <b>page.</b> The <b>refreshed</b> DW {{services}} were launched under the tagline 'Made for Minds'.|$|R
60|$|There {{are many}} hundred pages here. I can lay {{my hand on}} my heart, and declare that every <b>page</b> has charmed, <b>refreshed,</b> delighted me.|$|R
50|$|Brichter is {{the creator}} of the Pull-to-Refresh gesture that first came out on Tweetie 2.0 for iPhone. The gesture allows a user to pull {{vertically}} downwards on a touchscreen before releasing, to allow the <b>page</b> to <b>refresh</b> as opposed to former methods of pressing on a refresh button. This gesture has since then been adopted by many apps on mobile devices, such as Mail in iOS.|$|R
40|$|Abstract. This paper {{presents}} a Rewriting Logic framework that formalizes {{the interactions between}} Web servers and Web browsers through a communicating protocol abstracting HTTP. The proposed framework includes a scripting language that is powerful enough to model the dynamics of complex Web applications by encompassing the main features {{of the most popular}} Web scripting languages (e. g. PHP, ASP, Java Servlets). We also provide a detailed characterization of browser actions (e. g. forward/backward navigation, <b>page</b> <b>refresh,</b> and new window/tab openings) via rewrite rules, and show how our models can be naturally model-checked by using the Linear Temporal Logic of Rewriting (LTLR), which is a Linear Temporal Logic specifically designed for model-checking rewrite theories. Our formalization is particularly suitable for verification purposes, since it allows one to perform in-depth analyses of many subtle aspects related to Web interaction. Finally, the framework has been completely implemented in Maude, and we report on some successful experiments that we conducted by using the Maude LTLR model-checker. ...|$|E
40|$|Abstract: Bioinformatics {{applications}} are generally multi-server dependants {{and will have}} to communicate several information repositories to carry out any analyses. These applications remain computationally intensive and time consum-ing as they engage lots of data transfer. Hence they face a major bottleneck when ported as web applications. Browser based web applications normally feature the classical request-response approach. If the response becomes late, as it is expected to happen in the case of long running Bioinformatics programs, Apache will get tired and a request timeout error might occur. Alternate approaches like ‚ÄúClient-Pull ‚Äù models that involve polling strategy with the unpredictable amount of page refreshes, only tend to intensify the network traffi c. Hence a technology that is intelligent enough to support the varied exhaustive Bioinformatics processes becomes highly essential. In this review, we propose how AJAX can afford a laconic framework within the Bioinformatics applications to completely reduce the <b>page</b> <b>refresh</b> nuisance and provide a better user experience...|$|E
40|$|This paper {{presents}} a Rewriting Logic framework that formalizes {{the interactions between}} Web servers and Web browsers through a communicating protocol abstracting HTTP. The proposed framework includes a scripting language that is powerful enough to model the dynamics of complex Web applications by encompassing the main features {{of the most popular}} Web scripting languages (e. g. PHP, ASP, Java Servlets). We also provide a detailed characterization of browser actions (e. g. forward/backward navigation, <b>page</b> <b>refresh,</b> and new win- dow/tab openings) via rewrite rules, and show how our models can be naturally model-checked by using the Linear Temporal Logic of Rewriting (LTLR), which is a Linear Temporal Logic specifically designed for model-checking rewrite theories. Our formalization is particularly suit- able for verification purposes, since it allows one to perform in-depth analyses of many subtle aspects related to Web interaction. Finally, the framework has been completely implemented in Maude, and we report on some successful experiments that we conducted by using the Maude LTLR model-checker...|$|E
25|$|While most browsers {{generate}} additional <b>page</b> hits by <b>refreshing</b> web <b>pages</b> {{when the}} user navigates back through page history, some browsers (such as Opera) reuse cached content without resending requests to the server.|$|R
500|$|In 2010, their website (www.tism.com.au) was {{altered to}} show an older-style TISM logo with TISM related mannerisms that altered when the <b>page</b> was <b>refreshed.</b> On 8 April 2011, YouTube user [...] "tismwebsite" [...] {{uploaded}} a previously unseen video of Tokin' Blackman improvising a guitar solo. It {{was added to}} the front page of tism.com.au on 29 April 2011, the third anniversary of Tokin's passing, prior to the site being revamped and relaunched.|$|R
50|$|In 2003, TWC {{went with}} a new {{business}} model for reaching Europe and Latin America, centered on the weather.com Internet property. Several of these pages have been neglected since launch, though the <b>page</b> design was <b>refreshed</b> on weather.com Latin America in 2008.|$|R
40|$|Today‚Äôs rich Web {{applications}} use {{a mix of}} Java Script and {{asynchronous communication}} with the application server. This mechanism {{is also known as}} Ajax: Asynchronous JavaScript and XML. The intent of Ajax is to exchange small pieces of data between the browser and the application server, and in doing so, use partial <b>page</b> <b>refresh</b> instead of reloading the entire Web page. AJAX (Asynchronous JavaScript and XML) is a powerful Web development model for browser-based Web applications. Technologies that form the AJAX model, such as XML, JavaScript, HTTP, and XHTML, are individually widely used and well known. However, AJAX combines these technologies to let Web pages retrieve small amounts of data from the server without having to reload the entire page. This capability makes Web pages more interactive and lets them behave like local applications. Web 2. 0 enabled by the Ajax architecture has given rise to a new level of user interactivity through web browsers. Many new and extremely popular Web applications have been introduced such as Google Maps, Google Docs, Flickr, and so on. Ajax Toolkits such as Dojo allow web developers to build Web 2. 0 applications quickly and with little effort...|$|E
40|$|Today‚Äôs rich Web {{applications}} use {{a mix of}} Java Script and {{asynchronous communication}} with the application server. This mechanism {{is also known as}} Ajax: Asynchronous JavaScript and XML. The intent of Ajax is to exchange small pieces of data between the browser and the application server, and in doing so, use partial <b>page</b> <b>refresh</b> instead of reloading the entire Web page. In recent years, information system based on browse/server architecture (namely B/S architecture) received more favor by enterprises. Ajax technology consists of five parts. They are HTML (Hyper Text Markup Language), JavaScript, DHTML (Dynamic Hyper Text Markup Language), DOM (Document Object Model) and XML (Extensible Markup Language). With the help of cooperation and collaboration of these technologies, they can optimize the conventional enterprise information system by using an asynchronous way. Meanwhile, a quickly-responded and smoother user interface was provided. Enterprise information system with Ajax can be operated in a more efficient way, which means even use the current hardware, it can provide more load capacity, be more stable and serve more clients in parallel. In this paper: we present two kinds of information system models, one use conventional B/S architecture and the other use Ajax enhanced B/S architecture...|$|E
40|$|ITC/USA 2007 Conference Proceedings / The Forty-Third Annual International Telemetering Conference and Technical Exhibition / October 22 - 25, 2007 / Riviera Hotel & Convention Center, Las Vegas, NevadaAsynchronous JavaScript and XML (AJAX) has {{improved}} web applications {{in a way}} that has enhanced performance and made the user experience more like that of a desktop application. As the performance of PCs increases and broadband Internet access is more prevalent, switching between web pages is less painful than ever. One of the biggest advantages of AJAX is the ability for a web application to update only a small piece of data without refreshing the whole page. AJAX also allows for piecewise validation of user entry as opposed to the standard form entry with which we have become so accustomed. This paper describes how AJAX enabled applications are different from classic web applications and shows the advantages and disadvantages from both client and server sides of an AJAX enabled application. AJAX is not a new technology, but rather a new approach to web applications that uses standards already in place for XHTML, CSS, DOM, XML, and JavaScript. It is this new approach that eliminates the full <b>page</b> <b>refresh</b> that was so commonplace and now gives web applications the ability to look and feel more like desktop applications...|$|E
30|$|In a {{generalized}} method of initiating a process, the buffer state {{is set to}} zero and advertises that it is unoccupied. This occurs before beginning a multicast session and also occurs when a web <b>page</b> is <b>refreshed.</b> But this algorithm uses an epic custom initialization, where each buffer state of previous multicast group is displayed {{and they can be}} manually flushed out. The pre-occupied state is then set so that the coder (encoder/decoder) does not call the transcoding process once again. This is not the case in existing systems which may use a cache memory.|$|R
50|$|In August, 2014, the Business.com website was relaunched {{expanding}} {{beyond a}} home <b>page</b> and <b>refresh</b> {{that happened in}} March 2013. The backend technology was all updated including a new content management platform, in-house analytics, and big data platform to capture every behavior of the audience to deliver contextually relevant content based on the intent and navigation path. According to the CEO, a major emphasis was also put on responsive web design, removal of pages that were not valuable to the audience, and allowing a new content platform to drive the site experience.|$|R
50|$|Server-side page changes {{typically}} {{require that}} the <b>page</b> be <b>refreshed,</b> but allow any language to be used and more computing power to be utilized. Client-side changes allow the page to be updated in small chunks which feels like a desktop application, but are limited to JavaScript and run in the user's browser, which may have limited computing power. Some mix of the two is typically used. Applications which make heavy use of JavaScript are called single-page applications and typically make use of a client-side JavaScript web framework to organize the code.|$|R
