69|29|Public
5000|$|Fixed {{priority}} <b>pre-emptive</b> <b>scheduling,</b> an {{implementation of}} preemptive time slicing ...|$|E
50|$|Deadline-monotonic {{priority}} {{assignment is}} a priority assignment policy used with fixed priority <b>pre-emptive</b> <b>scheduling.</b>|$|E
50|$|Operating systems use First-Come, First-Served queues, Shortest {{remaining}} time, Fixed priority <b>pre-emptive</b> <b>scheduling,</b> round-robin {{scheduling and}} multilevel queue scheduling.|$|E
5000|$|... #Caption: Non pre-emptive and <b>pre-emptive</b> {{multi-level}} queue <b>scheduling</b> ...|$|R
5000|$|Consider the {{following}} table with the arrival time, execute time and type of the process (foreground or background - where foreground processes are given high priority) to understand non pre-emptive and <b>pre-emptive</b> multilevel <b>scheduling</b> in depth with FCFS algorithm for both the queues: ...|$|R
40|$|Development of schedulers for {{real-time}} {{embedded systems}} is an emerging {{area of research}} as it addresses timely scheduling issues like co-operative <b>scheduling,</b> <b>pre-emptive</b> scheduling,micro-kernel based <b>scheduling,</b> etc. Use of statistical schedulers over deterministic schedulers offers the advantage of improved bandwidth utilization, better delay and resource management, higher throughputand thus higher system QoS (quality of service). We report {{here for the first}} time a novel stochastic scheduling method based on optimized Markov chains where the pre-scheduled Markov transitionprobabilities are subsequently dynamically tuned by the central scheduler to give the best system QoS...|$|R
50|$|Like most {{real-time}} operating systems, MQX RTOS {{includes a}} multitasking kernel with <b>pre-emptive</b> <b>scheduling</b> and fast interrupt response, extensive inter-process communication and synchronization facilities, and a file system.|$|E
50|$|Fixed {{priority}} <b>pre-emptive</b> <b>scheduling</b> method assigns different priorities to {{the processes}} {{based on their}} processing time and arranges them into the queue in order of their priorities. CPU server processes from higher to lower priority, and processes which have the same priority are served as First-Come, First-Served. The CPU will temporary stop serving low priority process when higher priority process coming into the queue.|$|E
50|$|The Modular Applications eXecutive {{family of}} {{operating}} systems supported these machines. MAX I was a real-time monitor for a fixed set of processes linked {{into a single}} memory image. This met the requirements of many embedded systems. MAX II was a batch disk operating system with real-time extensions. It {{could be used for}} program development in the background while foreground processes handled real-time loads. These systems used Fixed priority <b>pre-emptive</b> <b>scheduling.</b>|$|E
40|$|Recent {{advances}} in {{our approach to}} blood component therapy in traumatic hemorrhage {{have resulted in a}} reassessment of many of the tenants of management which were considered standards of therapy for many years. Indeed, despite the use of damage control techniques, the mortality from trauma induced coagulopathy has not changed significantly over the past 30 years. More specifically, a resurgence of interest in postinjury hemostasis has generated controversies in three primary areas: 1) The pathogenesis of trauma induced coagulopathy 2) The optimal ratio of blood components administered via a <b>pre-emptive</b> <b>schedule</b> for patients at risk for this condition, ("damage control resuscitation"), and 3) The appropriate use of monitoring mechanisms of coagulation function during the phase of active management of trauma induced coaguopathy, which we have previously termed "goal directed therapy". Accordingly, recent experience from both military and civilian centers have begun to address these controversies, with certain management trends emerging which appear to significantly impact the way we approach these patients...|$|R
40|$|This paper {{deals with}} several bicriteria open-shop {{scheduling}} problems where jobs are pre-emptable and their corresponding time-windows must be strictly respected. The criteria are a performance cost and the makespan. Network flow approaches {{are used in}} a lexmin procedure with a bounded makespan and the considered bicriteria problems are solved. Finally, the computational complexity of the algorithm and a numerical example are reported. 90 B 35 90 B 10 90 C 27 <b>Pre-emptive</b> open-shop <b>scheduling</b> Bicriteria optimization Network flow approach Time-windows Max-flow parametrical algorithm...|$|R
40|$|In {{this paper}} we study hard {{real-time}} systems: systems where strict time deadlines {{have to be}} met. We analyze a special case {{as well as a}} general model for hard real-time systems and study <b>pre-emptive,</b> static, <b>scheduling</b> policies for a single processor. The analysis is exact and can handle any arbitrary choice of strict deadlines. For any specification of a hard real-time system, a feasible priority assignment is one where all deadlines are met. An optimal scheduling algorithm is an algorithm that always produces a feasibile priority assignment if one exists. For both the special and general model we present an optimal scheduling algorithm...|$|R
50|$|This is {{especially}} important if the process running the critical section has a much longer time to complete and its exit from its critical section, which will delay releasing the shared resource. But the process might still be pre-empted in favour of others that have earlier deadlines but do not share the critical resource. This hazard of deadline interchange is analogous to priority inversion when using fixed priority <b>pre-emptive</b> <b>scheduling.</b>|$|E
5000|$|Cisco IOS has a [...] "monolithic" [...] architecture, {{which means}} that it runs as a single image and all {{processes}} share the same memory space. There is no memory protection between processes, {{which means that}} bugs in IOS code can potentially corrupt data used by other processes. It also has a run to completion scheduler, {{which means that the}} kernel does not pre-empt a running process â€” the process must make a kernel call before other processes get a chance to run. For Cisco products that required very high availability, such as the Cisco CRS-1, these limitations were not acceptable. In addition, competitive router operating systems that emerged 10-20 years after IOS, such as Juniper's JUNOS, were designed not to have these limitations. Cisco's response was to develop a new version of Cisco IOS called IOS XR that offered modularity and memory protection between processes, lightweight threads, <b>pre-emptive</b> <b>scheduling</b> and the ability to independently restart failed processes. IOS XR uses a 3rd party real-time operating system microkernel (QNX), and {{a large part of the}} current IOS code was re-written to take advantage of the features offered by the new kernel. But the microkernel architecture removes from the kernel all processes that are not absolutely required to run in the kernel, and executes them as processes similar to the application processes. Through this method, IOS XR is able to achieve the high availability desired for the new router platform. Thus IOS and IOS XR are very different codebases, though related in functionality and design. In 2005, Cisco introduced IOS XR on the Cisco 12000 series platform, extending the microkernel architecture from the CRS-1 to Cisco's widely deployed core router.|$|E
40|$|Although {{theoretical}} {{results have}} been established regarding the utility of <b>pre-emptive</b> <b>scheduling</b> in reducing average job turn-around time, job suspension/restart is not much used in practice at supercomputer centers for parallel job scheduling. A number of questions remain unanswered regarding the practical utility of <b>pre-emptive</b> <b>scheduling.</b> We explore this issue through a simulationbased study, using job logs from a supercomputer center. We develop a tunable selective-suspension strategy, and demonstrate its effectiveness. We also present {{new insights into the}} effect of <b>pre-emptive</b> <b>scheduling</b> on different job classes and address the impact of suspensions on worstcase slowdown...|$|E
50|$|In {{the context}} of {{multitasking}} systems the scheduling policy is normally priority driven (<b>pre-emptive</b> schedulers). Other <b>scheduling</b> algorithms include earliest deadline first, which, ignoring the overhead of context switching, is sufficient for system loads of less than 100%. New overlay scheduling systems, such as an adaptive partition scheduler assist in managing large systems {{with a mixture of}} hard real-time and non real-time applications.|$|R
40|$|Consider {{a set of}} $n$ {{periodic}} tasks $	au_ 1,ldots,	au_n$ where $	au_i$ {{is described}} by an execution time $c_i$, a (relative) deadline $d_i$ and a period $p_i$. We assume that jobs are released synchronously (i. e. at each multiple of $p_i$) and consider <b>pre-emptive,</b> uni-processor <b>schedules.</b> We show that computing the response time of a task $	au_n$ in a Rate-monotonic schedule i. e. computing [minleft{ r geq mid c_n + sum_{i= 1 }^{n- 1 } leftlceil frac{r}{p_i} ight ceil c_i leq r ight}] is (weakly) $mathbf{NP}$-hard (where $	au_n$ has the lowest priority and the deadlines are implicit, i. e. $d_i = p_i$). Furthermore we obtain that verifying EDF-schedulability, i. e. [forall Q geq 0 : sum_{i= 1 }^n left(leftlfloor frac{Q-d_i}{p_i} ight floor + 1 ight) cdot c_i leq Q] for constrained-deadline tasks ($d_i leq p_i$) is weakly $mathbf{coNP}$-hard...|$|R
40|$|RT, {{which we}} have {{developed}} for empirically evaluating multiprocessor real-time scheduling algorithms. Wealso present the results from such an evaluation, in which partitioned earliest-deadline-first (EDF) <b>scheduling,</b> <b>pre-emptive</b> and nonpreemptive global EDF scheduling, and two variants of the global PD 2 Pfair algorithm were considered. The tested algorithms were compared based on both raw performance and schedulability (with real overheads con-sidered) assuming either hard- or soft-real-time constraints. To our knowledge, this paper is the first attempt by anyoneto compare partitioned and global real-time scheduling approaches using empirical data...|$|R
40|$|In this paper, {{we present}} a {{comparative}} study on the total revenue generated with pre-emptive and non pre-emptive priority scheduler for a fairly generic problem of pricing the server's surplus capacity in a single server Markovian queue. The specific problem is to optimally price the server's surplus capacity by introducing {{a new class of}} customers (secondary class) without affecting the pre-specified service level of its current customers (primary class) when pre-emption is allowed. <b>Pre-emptive</b> <b>scheduling</b> is used in various applications. First, a finite step algorithm is proposed to obtain global optimal operating and pricing parameters for this problem. These optimal operating and pricing parameters constitute a unique Nash equilibrium in a certain two player non cooperative game. We then describe the range of service level where <b>pre-emptive</b> <b>scheduling</b> gives feasible solution and generates some revenue while non <b>pre-emptive</b> <b>scheduling</b> has infeasible solution. Further, some complementary conditions are identified to compare revenue analytically for certain range of service level where strict priority to secondary class is optimal. Our computational examples show that the complementary conditions adjust {{in such a way that}} <b>pre-emptive</b> <b>scheduling</b> always generates more revenue. Theoretical analysis is found to be intractable for the range of service level when pure dynamic policy is optimal. Hence, extensive numerical examples are presented to describe different instances. It is noted in numerical examples that <b>pre-emptive</b> <b>scheduling</b> generates at least as much revenue as non <b>pre-emptive</b> <b>scheduling.</b> A certain range of service level is identified where improvement in revenue is quite significant. (C) 2016 Elsevier Inc. All rights reserved...|$|E
40|$|This paper {{examines}} the relative effectiveness of fixed priority <b>pre-emptive</b> <b>scheduling</b> in a uniprocessor system, {{compared to an}} optimal algorithm such as Earliest Deadline First (EDF). The quantitative metric used in this comparison is the processor speedup factor, defined as the factor by which processor speed needs to increase to ensure that any taskset that is schedulable according to an optimal scheduling algorithm can be scheduled using fixed priority <b>pre-emptive</b> <b>scheduling.</b> For implicit-deadline tasksets, the speedup factor is 1 /ln(2) â‰ˆ 1. 44270. Fo...|$|E
40|$|Keywords: Real-time Uniprocessor Fixed {{priority}} <b>pre-emptive</b> <b>scheduling</b> Earliest Deadline First (EDF) Suboptimality Processor speedup factor Constrained deadline Implicit deadline Omega constant This paper {{examines the}} relative effectiveness of fixed priority <b>pre-emptive</b> <b>scheduling</b> in a uniprocessor system, {{compared to an}} optimal algorithm such as Earliest Deadline First (EDF). The quantitative metric used in this comparison is the processor speedup factor, equivalent to the factor by which processor speed needs to increase to ensure that any taskset that is schedulable according to an optimal scheduling algorithm can be scheduled using fixed priority <b>pre-emptive</b> <b>scheduling,</b> assuming an optimal priority assignment policy. For constrained-deadline tasksets where all task deadlines are {{less than or equal}} to their periods, the maximum value for the processor speedup factor is shown to be 1 / Î© â‰ˆ 1. 76322, (where Î© is the mathematical constant defined by the transcendental equation ln (1 / Î©) = Î©, hence, Î© â‰ˆ 0. 567143). Further, for implicit-deadline tasksets where all task deadlines are equal to their periods, the maximum value for the processor speedup factor is shown to be 1 /ln(2) â‰ˆ 1. 44270. The derivation of this latter result provides an alternative proof of the well-known Liu and Layland result. 1...|$|E
40|$|International audienceIn {{order to}} analyze whether timing {{requirements}} of a real-time application are met, we propose {{an extension of the}} T-time {Petri} net model which takes into account the scheduling of the software tasks distributed over a multi-processor hardware architecture. The paper is concerned with static priority <b>pre-emptive</b> based <b>scheduling.</b> This extension consists in mapping into the {Petri} net model the way the different schedulers of the system activate or suspend the tasks. This relies on the introduction of two new attributes for the places (allocation and priority). First we give the formal semantics of this extended model as a timed transition system (TTS). Then we propose a method for its analysis consisting in the computation of the state class graph. Thus the verification of timing properties can be conducted (possibly together with an observator) and comes to analyze the such obtained state class grap...|$|R
40|$|This report {{extends the}} current {{analysis}} associated with static priority <b>pre-emptive</b> based <b>scheduling</b> {{to address the}} wider problem of analysing schedulability of a distributed hard real-time system; in particular it derives analysis for a distributed system where tasks with arbitrary deadlines communicate by message passing and shared data areas. A simple TDMA protocol is assumed, and analysis developed to bound not only the communications delays, but also the delays and overheads incurred when messages are processed by the protocol stack at the destination processor. The report illustrates how a windowbased analysis technique {{can be used to}} find the worst-case response times of a distributed task set. An extended example illustrating the application of the analysis is presented. Keywords: fixed priority scheduling, schedulability analysis, hard real-time, distributed systems 1. INTRODUCTION A common way of constructing a hard real-time system is to compose the system from a number [...] ...|$|R
40|$|This {{thesis is}} {{concerned}} with the design and implementation of single-processor embedded real-time systems with highly predictable behaviour and strict constraints on resource usage. The main aim of this research is to identify the sources of unpredictable behaviour in such systems â€“ exhibited as timing jitter- when a time-triggered <b>pre-emptive</b> task <b>scheduling</b> approach is adopted, and then provide software based techniques to enhance their temporal predictability. The thesis provides a review of related previous work on predictable real-time task scheduling, as well as resource-access control methods for maintaining predictable real-time system behaviour through the prevention of priority inversion and other related problems. The design and implementation of the time-triggered hybrid (TTH), time-triggered rate-monotonic (TTRM), and time-triggered deadline-monotonic (TTDM) task schedulers is discussed in detail as they provide the most predictable behaviour within the category of pre-emptive task schedulers. For that reason, they will be use...|$|R
40|$|This paper {{examines}} the relative effectiveness of fixed priority <b>pre-emptive</b> <b>scheduling</b> in a uniprocessor system, {{compared to an}} optimal algorithm. The quantitative metric used in this comparison is the processor speedup factor, equivalent to the factor by which processor speed needs to increase to ensure that any taskset that is schedulable according to an optimal scheduling algorithm can be scheduled using fixed priority <b>pre-emptive</b> <b>scheduling.</b> The maximum value for the processor speedup factor is shown to be 1 /Omega = 1. 76322 for tasksets where all task deadlines are {{less than or equal}} to their periods, and 1 /ln(2) = 1. 44270 for tasksets where all task deadlines are equal to their periods. The derivation of this latter result provides an alternative proof of the well-know Liu and Layland result. 1...|$|E
40|$|This paper {{investigates the}} problem of optimal {{priority}} assignment in multiprocessor real-time systems using global fixed task-priority <b>pre-emptive</b> <b>scheduling.</b> Previous {{work in this area}} showed that arguably the most effective pseudo-polynomial schedulability tests for global fixed priority <b>pre-emptive</b> <b>scheduling,</b> based on response time analysis, are not compatible with Audsleyâ€™s Optimal Priority Assignment (OPA) algorithm. In this paper, we derive upper and lower bounds on these response time tests that are compatible with the OPA algorithm. We show how these bounds can be used {{to limit the number of}} priority ordering combinations that need to be examined, and thus derive an optimal priority assignment algorithm with backtracking that is compatible with response time analysis. We show that response time analysis combined with the OPA-backtracking algorithm dominates previous approaches using OPA-compatible polynomial-time schedulability tests. 1...|$|E
40|$|International audienceThis paper {{examines}} the relative effectiveness of fixed priority <b>pre-emptive</b> <b>scheduling</b> in a uniprocessor system, {{compared to an}} optimal algorithm such as Earliest Deadline First (EDF). The quantitative metric used in this comparison is the processor speedup factor, defined as the factor by which processor speed needs to increase to ensure that any taskset that is schedulable according to an optimal scheduling algorithm can be scheduled using fixed priority <b>pre-emptive</b> <b>scheduling.</b> For implicit-deadline tasksets, the speedup factor is 1 /ln(2) â‰ˆ 1. 44270. For constrained-deadline tasksets, the speedup factor is 1 /Î© â‰ˆ 1. 76322. In this paper, we show that for arbitrary-deadline tasksets, the speedup factor is lower bounded by 1 /Î© â‰ˆ 1. 76322 and upper bounded by 2. Further, when deadline monotonic priority assignment is used, we show that the speedup factor is exactly 2...|$|E
40|$|Container {{stacking}} {{rules are}} {{an important factor in}} container terminal efficiency. We build on prior research and use a discrete-event simulation model to evaluate the impact of a truck announcement system on the performance of online container stacking rules. The information that is contained in the announcement, i. e., the expected departure time for an import container, can be used to <b>schedule</b> <b>pre-emptive</b> remarshall moves. These moves can then be performed when the workload is low in order to decrease the export time and the crane workload at peak times...|$|R
40|$|Abstract â€” Android mobile {{operating}} system {{which is based on}} Linux Kernel 2. 6, has open source license and adaptability to user driven applications. As all other {{operating system}}s it has all the basic features like process scheduling, memory management, process management etc associated with it. Any mobile platform works smoothly when the process scheduling is performed in a proper way. Ideal platform is that in which no resource conflict occurs. Thus scheduling in every manner is essential for the operating system to adapt itself with the requirement of a particular application. In this paper, priority based <b>pre-emptive</b> task <b>scheduling</b> is proposed for the SMS application. The idea is to define High priority to required contacts, for ex. Contact numbers of parents or teachers will be given High priority. If in case, any SMS from these High priority contacts is received, the application would flash the SMS on the active screen and redirect this High priority SMS to the Priority Inbox...|$|R
40|$|Optimal {{deadline}} {{assignment for}} periodic real-time tasks in dynamic priority systems Real-time systems are often designed using {{a set of}} periodic tasks. Task periods are usually set by the system requirements, but deadlines and computation times can be modified {{in order to improve}} system performance. Sensitivity analysis in real-time systems has focused on changes in task computation times, using fixed priority analysis. Only a few studies deal with the modification of deadlines in dynamic-priority scheduling. The aim of this work is to provide a sensitivity analysis for task deadlines in the context of dynamic-priority, <b>pre-emptive,</b> uniprocessor <b>scheduling.</b> In this paper, we present a deadline minimisation method that achieves the maximum reduction. As undertaken in other studies concerning computation times, we also define and calculate the critical scaling factor for task deadlines. Our proposal is evaluated and compared with other works in terms of jitter. The deadline minimisation can be used to strongly reduce jitter of control tasks, in a real-time control application...|$|R
40|$|Audsleyâ€™s Optimal Priority Assignment (OPA) {{algorithm}} can {{be applied}} to multiprocessor scheduling provided that three conditions hold with respect to the schedulability tests used. In this short paper, we prove that no exact test for global fixed priority <b>pre-emptive</b> <b>scheduling</b> of sporadic tasks can be compatible with Audsleyâ€™s algorithm, and hence the OPA algorithm cannot be used to obtain an optimal priority assignment for such systems. 1...|$|E
40|$|Abstract â€” This paper {{introduces}} schedulability {{analysis for}} global fixed priority scheduling with deferred pre-emption (gFPDS) for homogeneous multiprocessor systems. gFPDS is a superset of global fixed priority <b>pre-emptive</b> <b>scheduling</b> (gFPPS) and global fixed priority non-pre-emptive scheduling (gFPNS). We show how schedulability {{can be improved}} via appropriate choice of priority assignment and final non-pre-emptive region lengths, and we provide algorithms which optimize schedulability in this way. An experimental evaluation shows that gFPDS significantly outperforms both gFPPS and gFPNS. I...|$|E
40|$|Cache-related {{pre-emption}} delays (CRPD) {{have been}} {{integrated into the}} schedulability analysis of sporadic tasks with constrained deadlines for fixed-priority <b>pre-emptive</b> <b>scheduling</b> (FPPS). This paper generalizes that work by integrating CRPD into the schedulability analysis of tasks with arbitrary deadlines for fixed-priority pre-emption threshold scheduling (FPTS). The analysis is complemented by an optimal threshold assignment algorithm that minimizes CRPD. The paper includes a comparative evaluation of the schedulability ratios of FPPS and FPTS, for constrained-deadline tasks, taking CRPD into account...|$|E
40|$|Abstract: This paper investigates {{into the}} {{transmission}} cost of web services related messages which {{is affected by}} network latency. Web services enable seamless interaction and integration of e-business applications. Web services contain a collection of operations so as to interact with outside world over the Internet through XML messaging. Though XML effectively describe message related information and is fairly human readable, it badly affects the performance of Web services in terms of transmission cost, processing cost, and so on. This paper aims to minimize network latency of message communication of Web services by employing <b>pre-emptive</b> resume <b>scheduling.</b> Fundamental principle {{of this approach is}} the provision of preferential treatment to some messages as compared to others. This approach assigns different priorities to distinct classes of messages given the fact that some messages may tolerate longer delays than others. For instance, shorter messages may be given higher priority than longer messages, or the Web service provider may give higher priority to th...|$|R
40|$|Android mobile {{operating}} system {{which is based on}} Linux Kernel 2. 6, has open source license and adaptability to user driven applications. As all other {{operating system}}s it has all the basic features like process scheduling, memory management, process management etc associated with it. Any mobile platform works smoothly when the process scheduling is performed in a proper way. Ideal platform is that in which no resource conflict occurs. Thus scheduling in every manner is essential for the operating system to adapt itself with the requirement of a particular application. In this paper, priority based <b>pre-emptive</b> task <b>scheduling</b> is proposed for the SMS application. The idea is to define High priority to required contacts, for ex. Contact numbers of parents or teachers will be given High priority. If in case, any SMS from these High priority contacts is received, the application would flash the SMS on the active screen and redirect this High priority SMS to the Priority Inbox. Comment: Pages: 5 Figures : 1...|$|R
40|$|This paper investigates {{into the}} {{transmission}} cost of web services related messages which {{is affected by}} network latency. Web services enable seamless interaction and integration of e-business applications. Web services contain a collection of operations so as to interact with outside world over the Internet through XML messaging. Though XML effectively describe message related information and is fairly human readable, it badly affects the performance of Web services in terms of transmission cost, processing cost, and so on. This paper aims to minimize network latency of message communication of Web services by employing <b>pre-emptive</b> resume <b>scheduling.</b> Fundamental principle {{of this approach is}} the provision of preferential treatment to some messages as compared to others. This approach assigns different priorities to distinct classes of messages given the fact that some messages may tolerate longer delays than others. For instance, shorter messages may be given higher priority than longer messages, or the Web service provider may give higher priority to the messages of paying subscribers...|$|R
