174|164|Public
40|$|Abstract:- Security {{communication}} {{is an important}} requirement in many sensor network applications. A new kind of <b>pairwise</b> <b>key</b> establishment scheme based on hierarchical hypercube model H(k,u,m,v,n) for clusters-deployed sensor networks distribution model is presented. Theoretic analysis and experimental figures show that the new <b>pairwise</b> <b>key</b> model has better performance and provides higher possibilities for sensor to establish <b>pairwise</b> <b>key,</b> compared with previous related works...|$|E
40|$|Existing <b>pairwise</b> <b>key</b> {{establishment}} {{schemes for}} large-scale sensor networks {{are vulnerable to}} various passive or active attacks. We classify attacks as: selective node capture attacks, node fabrication attacks, and insider attacks. In order to improve the security robustness of random key predistribution and <b>pairwise</b> <b>key</b> establishment schemes against these attacks, we propose a 5 -phase <b>pairwise</b> <b>key</b> predistribution and <b>pairwise</b> <b>key</b> establishment approach by using area partitioning and multi-group key predistribution. Our security performance studies show that our proposed approach is resilient to selective node capture and node fabrication attacks, and restricts the consequence of any insider attack to a minimal level...|$|E
3000|$|... is used {{twice in}} {{authentication}} phase and is discarded after {{the establishment of}} a <b>pairwise</b> <b>key.</b> In our scheme, each L-sensor has a different <b>pairwise</b> <b>key</b> in the cluster. Therefore, based on the property of pairwise keys, if the L-sensor [...]...|$|E
30|$|Note {{that the}} {{neighboring}} nodes {{do not have}} to acknowledge the setup of the <b>pairwise</b> <b>keys</b> because the measures taken later in the key maintenance phase will help the neighbors that failed to set up the <b>pairwise</b> <b>keys</b> successfully finish the task.|$|R
30|$|We {{assume that}} a sensor node can sense its own movement. If a sensor node moves to a new location, it will {{establish}} <b>pairwise</b> <b>keys</b> with its new neighbors following the aforementioned public-key-based node joining procedure, and its old neighbors will also revoke the <b>pairwise</b> <b>keys</b> with it.|$|R
3000|$|In the EDDK scheme, each node {{needs to}} store the <b>pairwise</b> <b>keys</b> and the local cluster keys related to its neighbors. Since in the {{mobility}} scenario, we employ the ECC-based public key mechanism to verify {{the identities of the}} nodes and to establish <b>pairwise</b> <b>keys,</b> each node still needs to store its own private and public keys, the TA's signature for it and the TA's public key. In our current research, since we use 160 -bit ECC as the underlying cryptographic foundation, the key materials related to the public key need 160 -byte storage space. The LEAP, and the OTMK schemes do not adopt the public key mechanism, however. In addition to the <b>pairwise</b> <b>keys</b> and the local cluster keys, in the LEAP protocol, each node still needs to store its own individual key that is used for computing the <b>pairwise</b> <b>keys</b> and at most [...]...|$|R
30|$|In the {{probabilistic}} key sharing schemes, if two nodes {{have to rely}} on a third node to {{help them}} establish a <b>pairwise</b> <b>key,</b> a large amount of computation (e.g., encryption and decryption) and communication will be required {{due to the fact that}} threshold cryptography-based schemes usually involve expensive operations such as modular multiplications. In contrast, in EDDK, every node can establish a <b>pairwise</b> <b>key</b> with each of its neighbors and thus does not need any additional help in <b>pairwise</b> <b>key</b> establishment.|$|E
3000|$|... [...]. This scheme {{can also}} {{establish}} <b>pairwise</b> <b>key</b> between any two neighboring sensor nodes via exchanging their own identity. Suppose node x {{is a new}} deployed sensor node, and node y is a neighboring sensor node of node x, then they can establish <b>pairwise</b> <b>key</b> K [...]...|$|E
40|$|Mobile sinks (MSs) {{are more}} {{significant}} in many {{wireless sensor network}} (WSN) applications for well-organized data gathering and for unique and revoking compromised sensors. Mobile sinks are act as intermediate node. However, in sensor networks that make use of <b>pairwise</b> <b>key</b> establishment and authentication between sensor nodes and mobile sinks. In existing describes a three-tier general structure that permits {{the use of any}} <b>pairwise</b> <b>key</b> pre-distribution scheme. It requires two separate key pools, one for the mobile sink to entrance the network, and one for <b>pairwise</b> <b>key</b> establishment between the sensors. In addition it reduces the compensation caused by stationary access node replication attacks and improved the security performance of the proposed scheme of stationary access node replication attack...|$|E
30|$|In this paper, {{we propose}} a {{distributed}} deterministic key management scheme for WSNs {{in which the}} <b>pairwise</b> <b>keys</b> and the local cluster keys are set up through the broadcast information during the network initialization phase and no further message exchange is needed afterwards. Consequently, the communication overhead is very low. Furthermore, <b>pairwise</b> <b>keys</b> are also totally decentralized. Therefore, the compromise of some sensor nodes will not affect any other noncompromised <b>pairwise</b> <b>keys.</b> For the establishment of keys for new nodes and mobile nodes, we propose a composite mechanism based on the elliptic curve digital signature algorithm (ECDSA) in which resource consumption can also be kept very low.|$|R
3000|$|... in the key-chain or <b>pairwise</b> <b>keys</b> or a node that is {{captured}} by an adversary and becomes an internal compromised node.|$|R
40|$|We {{present a}} new non-interactive key {{agreement}} and progression (NIKAP) scheme for mobile ad hoc networks (MANETs), {{which does not}} require an on-line centralized authority, can non-interactively establish and update <b>pairwise</b> <b>keys</b> between nodes, is configurable to operate synchronously or asynchronously, and supports differentiated security services w. r. t. the given security policies. NIKAP is valuable to scenarios where <b>pairwise</b> <b>keys</b> are desired to be established without explicit negotiation over insecure channels, and {{also need to be}} updated frequently...|$|R
3000|$|Huan et al.[14, 15] {{proposed}} the access control protocols in wireless sensor networks. They used ECC-based cryptography for sensor node authentication and <b>pairwise</b> <b>key</b> establishment. Any two neighboring sensor nodes can establish a <b>pairwise</b> <b>key</b> if {{each one is}} authentic. Zhu et al.[16] proposed a key management protocol called LEAP+ for sensor networks. They assumed that an adversary can not compromise a sensor node within a time interval [...]...|$|E
3000|$|... [...]. Similarly, {{according}} to (21), (22), and (23), the <b>pairwise</b> <b>key</b> between mobile node A and the existing node [...]...|$|E
3000|$|No further message exchanges are {{necessary}} during <b>pairwise</b> <b>key</b> setup beyond broadcasting the identity message {{by the new}} node [...]...|$|E
3000|$|..., {{it would}} not be able to get noncompromised <b>pairwise</b> <b>keys</b> since the random number SN {{generated}} by each node in (9) is different.|$|R
30|$|This section {{discusses}} the initialization and authentication phases in HSNs, including {{setting up the}} key-chain and setting up <b>pairwise</b> <b>keys</b> for the L-sensor nodes.|$|R
3000|$|Zhou et al. [23] {{used two}} types of sensor nodes viz. static and mobile. This scheme uses <b>pairwise</b> <b>keys</b> with each sensor within the same region. Hence, it {{requires}} high amount of memory to hold the <b>pairwise</b> <b>keys</b> {{if the number of}} sensors within a region is high enough. If there are n number of nodes within a region, then the number of keys to be stored in a node is O(n 2) under the Zhou et al. scheme; whereas, it is [...]...|$|R
3000|$|... [...]. In fact, {{only the}} <b>pairwise</b> <b>key</b> between a mobile node and an {{existing}} node would normally {{need to be}} computed.|$|E
3000|$|In {{the above}} scheme, since the same formula is always used in {{computing}} the <b>pairwise</b> <b>key,</b> should an adversary get [...]...|$|E
3000|$|... -composite key {{method that}} allows two sensor nodes {{to set the}} <b>pairwise</b> <b>key</b> only when they share at least q public keys.|$|E
3000|$|... and all {{the master}} keys of its neighbors. However, even with {{tamper-proof}} hardware, damaged or disabled nodes may still have the initial key in the flash memory. Therefore, should an adversary physically capture such a node and obtain the initial <b>key,</b> all the <b>pairwise</b> <b>keys</b> in the network could be easily computed. From (8) and (9), {{we can see that}} all <b>pairwise</b> <b>keys</b> in EDDK are decentralized and cannot be inferred uniformly based on any centralized rule. Even if the adversary could know the pseudorandom function [...]...|$|R
40|$|We {{develop a}} {{cellular}} automata (CA) based key management scheme for {{wireless sensor networks}} termed CAB. Our proposed scheme allows sensors to establish <b>pairwise</b> <b>keys</b> during any stage of the network operation using pre-loaded CAs. Additionally, CAB has the following nice properties: i) it is computationally efficient because operations {{can be as simple}} as bitwise OR and XOR; ii) it achieves quasi-perfect resilience against node compromise because the computed <b>pairwise</b> <b>keys</b> are unique with high probability; iii) it is the first scheme that inherently provides rekeying capabilities...|$|R
3000|$|Sybil attack {{involves}} {{the attack in}} which a single node appears with multiple identities. The communication between two PSs in a WBAN is done through <b>pairwise</b> <b>keys.</b> When PS [...]...|$|R
3000|$|... [...]). After verifying the {{correctness}} of the joining message, {{according to}} (9), the neighboring nodes {{can get the}} same <b>pairwise</b> <b>key</b> (e.g., [...]...|$|E
3000|$|... as {{it could}} in the LEAP protocol, any <b>pairwise</b> <b>key</b> that is {{computed}} through using the pseudorandom function should be updated in time.|$|E
3000|$|... after {{neighbor}} discovery. If adversaries compromise node x, they do {{not have}} method to establish <b>pairwise</b> <b>key</b> with other sensor nodes by manipulating node x.|$|E
40|$|An Ad-hoc Mobile Cloud (AMC) {{is a new}} {{computing}} {{model that}} allows sharing computing power of multiple mobile devices. For {{a diverse group of}} individuals that employ such computing model, in an ad-hoc manner, secure peer-to-peer communication becomes very important. Using private or <b>pairwise</b> <b>keys</b> to secure such communication is preferable to public-keys because of computation and energy requirements. With the advent of sensor enabled mobile devices, a protocol (SekGens) that uses sensor data to generate <b>pairwise</b> <b>keys</b> on demand has been proposed. To work successfully SekGens requires devices to be closely located and becomes infeasible for devices situated multiple hops away. SekGens is also expensive in computation and slow in key generation. In this thesis, we investigate how to enable devices in an AMC to establish <b>pairwise</b> <b>keys.</b> We propose an efficient solution which tries {{to reduce the number of}} executions of SekGens in the AMC, and establishes <b>pairwise</b> <b>keys</b> between mobile phones multiple hops away by distributing parts of the key on multiple routing paths. Our results show a reduction of up to 75 % in the number of SekGens required to establish keys in an AMC, when compared to a naive approach. Also the execution time to come up with the optimal pairs is within 10 s of seconds for reasonably large networks...|$|R
40|$|Key {{management}} {{is the cornerstone}} for secure communication in sensor networks. Researchers have recently developed many techniques to setup <b>pairwise</b> <b>keys</b> between sensor nodes. However, these techniques allow an attacker to compromise a few sensor nodes and learn many <b>pairwise</b> <b>keys</b> used between non-compromised nodes. The attacker can then use these keys to impersonate non-compromised nodes and mislead the sensing application. To deal with this problem, this paper proposes to detect misused keys in sensor networks. The paper introduces a hidden layer of protection, which is designed {{for the security of}} <b>pairwise</b> <b>keys</b> rather than the messages in the network. It cannot be seen and will not be used by sensor nodes during normal communication. However, it can be checked by some special nodes to identify suspicious keys. With this idea, this paper develops a serial of techniques to detect misused keys. These techniques make it particularly difficult for an attacker to actively mislead the application using the compromised keys shared between non-compromised nodes. The paper also shows the effectiveness and efficiency of these techniques through analysis and experiments. ...|$|R
30|$|The two key space {{models for}} {{establishing}} <b>pairwise</b> <b>keys,</b> one is polynomial-based [19] {{and the other}} is matrix-based [18], have been tailored for sensor networks at [7] and [5], respectively. These two models are similar in nature.|$|R
40|$|In this study, we aim {{to design}} an {{efficient}} scheme against node capture attacks using secure <b>pairwise</b> <b>key</b> in Wireless Sensor Networks (WSNs). Prior <b>pairwise</b> <b>key</b> establishment schemes based on random key pre-distribution are vulnerable to node capture attacks. In order to improve the resilience against node capture attacks, we {{are the first to}} present the Key Superset (KS) scheme. In this scheme, the entire sensor network is devided into several non-overlapping triangle cells and nodes are separated into groups, each of which is deployed in a cell and each pair of adjacent cells selects randomly a certain number of keys from the key subset which belongs to the key superset. By using deployment knowledge and KS scheme we can restrict the consequence of node capture attacks within a small range and establish <b>pairwise</b> <b>key</b> for each pair of neighboring cells efficiently. Compared to existing schemes, our proposal outperforms others in resilience against node capture attacks and achieves high local connectivity...|$|E
3000|$|... {{at regular}} intervals. Further, each L-sensor node {{can use the}} <b>pairwise</b> <b>key</b> to encrypt {{messages}} to the H-sensor. Therefore, the guessing attack {{does not have any}} effect in this environment.|$|E
40|$|A {{prerequisite}} for secure communications between two sensor nodes {{is that these}} nodes exclusively share a <b>pairwise</b> <b>key.</b> Although numerous <b>pairwise</b> <b>key</b> establishment (PKE) schemes have been proposed in recent years, {{most of them have}} no guarantee for direct key establishment, no resilience to a large number of node compromises, no resilience to dynamic network topology, or high overhead. To address these limitations, we propose a novel random perturbationbased (RPB) scheme in this paper. The scheme guarantees that any two nodes can directly establish a <b>pairwise</b> <b>key</b> without exposing any secret to other nodes. Even after a large number of nodes have been compromised, the pairwise keys shared by non-compromised nodes remain highly secure. Moreover, the scheme adapts to changes in network topology and incurs low computation and communication overhead. To the best of our knowledge, the RPB scheme {{is the only one that}} provides all these salient features without relying on public key cryptography. Through prototypebased evaluation, we show that the RPB scheme is highly efficient and practical for current generation of sensor nodes. In particular, to support a sensor network with up to 2 16 nodes, establishing a <b>pairwise</b> <b>key</b> of 80 bits between any two 8 -bit, 7. 37 -MHz MICA 2 motes only requires about 0. 13 second of CPU time, 0. 33 KB RAM space, and 15 KB ROM space per node...|$|E
3000|$|... is {{generally}} known. Moreover, the adversary can compute {{a large number}} of <b>pairwise</b> <b>keys</b> by eavesdropping on nonce and ID in the JOIN messages broadcast by other nodes so that it can overhear, forge, and alter network messages later.|$|R
3000|$|... {{to improve}} {{security}} {{as well as}} to save storage space in the node. Therefore, even if an adversary could compromise some legitimate nodes, it still could not compute the <b>pairwise</b> <b>keys</b> and the local cluster keys of noncompromised nodes.|$|R
3000|$|... [...]) {{of all the}} old {{nodes and}} {{subsequently}} deploy some malicious nodes into the network. Since it has already obtained the master key, the adversary can get <b>pairwise</b> <b>keys</b> between the new and the old nodes by performing the third step in the above protocol.|$|R
