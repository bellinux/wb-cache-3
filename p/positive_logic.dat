62|126|Public
60|$|My wife {{answered}} in her quiet way, setting forth her doctrine of a plain average {{to go through}} the whole establishment, placing parlors, chambers, kitchen, pantries, and the unseen depths of linen-closets in harmonious relations of just proportion, and showed by calm estimates how far the sum given could go towards this result. There the limits were inexorable. There is nothing so damping to the ardor of youthful economies as the hard, <b>positive</b> <b>logic</b> of figures. It is so delightful to think in some airy way that the things we like best are the cheapest, and that a sort of rigorous duty compels us to get them at any sacrifice. There is no remedy for this illusion but to show by the multiplication and addition tables what things are and are not possible. My wife's figures met Aunt Easygo's assertions, and there was a lull among the high contracting parties for a season; nevertheless, I could see Jenny was secretly uneasy. I began to hear of journeys made to far places, here and there, where expensive articles of luxury were selling at reduced prices. Now a gilded mirror was discussed, and now a velvet carpet which chance had brought down temptingly near the sphere of financial possibility. I thought of our parlor, and prayed the good fairies to avert the advent of ill-assorted articles.|$|E
5000|$|In Boolean algebra it is {{recognized}} that a <b>positive</b> <b>logic</b> OR {{is a negative}} logic AND. Similarly a <b>positive</b> <b>logic</b> AND is a negative logic OR.|$|E
5000|$|Isomorphism - NOT {{operator}} as isomorphism between <b>positive</b> <b>logic</b> {{and negative}} logic ...|$|E
40|$|The paper studies {{admissibility}} of multiple-conclusion {{rules in}} the <b>positive</b> <b>logics.</b> Using modification of a method used by M. ~Wajsberg in the proof of the separation theorem, it is shown {{that the problem of}} admissibility in <b>positive</b> <b>logics</b> is equivalent to the problem of admissibility in intermediate <b>logics</b> defined by <b>positive</b> additional axioms...|$|R
40|$|The survey [5] {{is devoted}} to paraconsistent {{extensions}} of <b>positive</b> classical <b>logics</b> (and especially to C-systems of this kind). It seems however that <b>positive</b> intuitionistic <b>logic</b> is a better starting point for investigating negation. The valid sentences of this fragment are all intuitively correct. <b>Positive</b> classical <b>logic,</b> in contrast, includes counterintuitive tautologies like (A B_C) (A B) _(A C) or ((A B) A) A. Moreover...|$|R
40|$|We {{establish}} a natural translation from word rewriting systems to strictly <b>positive</b> polymodal <b>logics.</b> Thereby, the latter {{can be considered}} as a generalization of the former. As a corollary we obtain examples of undecidable strictly <b>positive</b> normal modal <b>logics.</b> The translation has its counterpart on the level of proofs: we formulate a natural deep inference proof system for strictly <b>positive</b> <b>logics</b> generalizing derivations in word rewriting systems. We also formulate some open questions related to the theory of modal companions of superintuitionistic logics that was initiated by L. L. Maximova and V. V. Rybakov. Comment: 9 page...|$|R
5000|$|For {{illustration}} {{this discussion}} assumes idealized diodes that conduct {{in the forward}} direction with no voltage drop and do not conduct in the reverse direction. Logic design assume two distinct levels of signals that are labeled “1” or “0”. For <b>positive</b> <b>logic</b> the 1 represents the most positive level and 0 for the most negative level. For illustration in this discussion <b>positive</b> <b>logic</b> 1 is represented by +6 volts and 0 volts represents logic 0. In binary logic the exact magnitude of the signal voltage is not critical {{and it is only}} necessary that 1 and 0 states be represented by detectably different voltage levels.|$|E
50|$|The input names build virtual {{conditions}} to perform state transitions or input actions. The virtual conditions are built using the <b>positive</b> <b>logic</b> algebra. The output names trigger actions (entry actions, exit actions, input actions or transition actions).|$|E
5000|$|A {{state table}} defines all {{details of the}} {{behaviour}} {{of a state of}} a VFSM. It consists of three columns: in the first column state names are used, in the second the virtual conditions built out of input names using the <b>positive</b> <b>logic</b> algebra are placed and in the third column the output names appear: ...|$|E
40|$|A logic S has the Converse Ackermann Property (CAP) if non-necessitive propositions are not {{derivable}} in S from necessitive ones. We show in {{this paper}} how to introduce minimal negation in <b>positive</b> <b>logics</b> with the CAP. Relational ternary semantics are provided for all the logics considered {{in this paper}}...|$|R
5000|$|<b>Positive</b> emitter-coupled <b>logic,</b> {{also called}} pseudo-ECL, (PECL) {{is a further}} {{development}} of ECL using a positive 5V supply instead of a negative 5.2 V supply. [...] Low-voltage <b>positive</b> emitter-coupled <b>logic</b> (LVPECL) is a power optimized version of PECL, using a positive 3.3 V instead of 5 V supply. PECL and LVPECL are differential signaling systems, and are mainly used in high speed and clock distribution circuits.|$|R
40|$|AbstractInterpolation problem over Johansson's minimal logic J is investigated. We {{present a}} {{semantic}} method for proving interpolation {{and apply it}} to extensions of J. A modification of Kripke-style semantics for the logic J is offered and completeness theorem for a number of propositional J-logics is proved. We find a sufficient condition for interpolation in J-logics in terms of Kripke models. We propose a construction of matched product of models, which allows to prove interpolation theorem in a number of known extensions of the minimal logic. We show that the behavior of interpolation in the family of J-logics differs from that in superintuitionistic and <b>positive</b> <b>logics.</b> It is known that intersection of two incomparable superinstuitionistic or <b>positive</b> <b>logics</b> never has Craig's interpolation property CIP, and the sum of such logics with CIP always has CIP. We prove that the sum of J-logics with CIP can be without CIP and even without the restricted interpolation property IPR. On the other hand, there are examples of incomparable J-logics whose intersection has CIP. We use a classification of paraconsistent logics built by S. Odintsov in order to describe location of paraconsistent logics with CIP...|$|R
50|$|The {{positive}} voltage {{from the source}} is directed away from the output C and towards A and B via the diodes connected directed towards the inputs. When <b>positive</b> <b>logic</b> that is {{equal to or greater}} than that of the source is applied to all inputs the source voltage is directed to the output. The AND gate is capable of an arbitrary number of inputs.|$|E
50|$|In digital electronics, a {{high voltage}} usually refers to that {{representing}} a logic 1 in <b>positive</b> <b>logic</b> and a logic 0 in negative logic. It {{is not used}} to indicate a hazardous voltage and levels between ICs to TTL/CMOS standards and their modern derivatives are well below hazardous levels. The highest in mainstream use were 15V for original CMOS and 5V for TTL but modern devices use 3.3V, with 1.8V or lower used in many applications.|$|E
50|$|For devices using <b>positive</b> <b>logic,</b> a digit {{value of}} 1 (or a logical value of true) is {{represented}} by a more positive voltage relative to the representation of 0. The specific voltages are different for different logic families and variations are permitted to allow for component aging and noise immunity. For example, in transistor-transistor logic (TTL) and compatible circuits, digit values 0 and 1 at the output of a device are represented by no higher than 0.4 volts and no lower than 2.6 volts, respectively; while TTL inputs are specified to recognize 0.8 volts or below as 0 and 2.2 volts or above as 1.|$|E
40|$|ABSTRACT: The logic TW + is {{positive}} Ticket Entailment without the contraction axiom. Constructive negation is {{understood in the}} (minimal) intuitionistic sense but without paradoxes of relevance. It is shown how to introduce a constructive negation of this kind in <b>positive</b> <b>logics</b> at least as strong as TW +. Special {{attention is paid to}} the reductio axioms. Concluding remarks about relevance, modal and entailment logics are stated. Complete relational ternary semantics are provided for the logics introduced in this paper...|$|R
40|$|<b>Positive</b> Modal <b>Logic</b> is the {{restriction}} of the modal local consequence relation {{defined by the}} class of all Kripke models to the propositional negation-free modal language. The class of positive modal algebras is the one canonically associated with PML according {{to the theory of}} Abstract Algebraic Logic. In [4], a Priestley-style duality is established between the category of positive modal algebras and the category of K -spaces. In this paper, we establish a categorical equivalence between the category K -spaces and the category Coalg(V) of coalgebras of a suitable endofunctor V on the category of Priestley spaces. 2000 Mathematics Subject Classification: 06 D 22 Keywords and Phrases: <b>Positive</b> Modal <b>Logic,</b> <b>Positive</b> Modal Algebra, Priestley space, coalgebra, Vietoris space, equivalence of categories...|$|R
40|$|Every "practical" {{programming}} language supplies the programmer {{with at least}} one nonstrict construct, such as the ALGOL 60 arithmetic `ifthen -else' and the LISP `cond'. Many {{programming language}}s also enable the user to define nonstrict functions. In some languages, this is accomplished through the lazy evaluation of procedure parameters, as realized, for example, by the call-by-name devices of ALGOL 60 and SIMULA 67 and the call-by-need mechanism of Haskell. In other languages, such as Common LISP, a macro definition facility can serve a similar purpose. Programming languages that provide a mechanism for the user to define nonstrict functions are nonstrict languages, and we call the natural underlying logic of these languages nonstrict <b>positive</b> free <b>logic.</b> In this paper, we present the definition theory of nonstrict <b>positive</b> free <b>logic.</b> Suitable transformations of sentences in standard logic into sentences in nonstrict <b>positive</b> free <b>logic</b> preserve many properties of definitions in stand [...] ...|$|R
5000|$|A {{general purpose}} {{computer}} has four main components: the arithmetic logic unit (ALU), the control unit, the memory, and the input and output devices (collectively termed I/O). These parts are interconnected by buses, often made of groups of wires.Inside each of these parts are thousands to trillions of small electrical circuits which can be turned off or on {{by means of an}} electronic switch. Each circuit represents a bit (binary digit) of information so that when the circuit is on it represents a [...] "1", and when off it represents a [...] "0" [...] (in <b>positive</b> <b>logic</b> representation). The circuits are arranged in logic gates so that {{one or more of the}} circuits may control the state of one or more of the other circuits.|$|E
50|$|There are {{a couple}} of {{drawbacks}} associated with pMOS: The electron holes that are the charge (current) carriers in pMOS transistors have lower mobility than the electrons that are the charge carriers in nMOS transistors (a ratio of approximately 2.5), furthermore pMOS circuits do not interface easily with low voltage <b>positive</b> <b>logic</b> such as DTL-logic and TTL-logic (the 7400-series). However, pMOS transistors are relatively easy to make and were therefore developed first — ionic contamination of the gate oxide from etching chemicals and other sources can very easily prevent (the electron based) nMOS transistors from switching off, while the effect in (the electron-hole based) pMOS transistors is much less severe. Fabrication of nMOS transistors therefore has to be many times cleaner than bipolar processing in order to produce working devices.|$|E
5000|$|The {{machine was}} 10 ft high, 8 ft deep and 50 ft long. The power {{supplies}} for the machine were so large that it required designing a single tongue fork lift to remove and reinstall the power supply. The power supply bus bars on the machine spanned distances greater than three feet, and were octopus-like in design. Thick copper, the busses were coated in epoxy that often cracked resulting in shorts {{and a number of}} other issues. ILLIAC IV was designed by Burroughs Corporation and built in quadrants in Great Valley, PA during the years of 1967 through 1972. It had a traditional one address accumulator architecture, rather than the revolutionary stack architecture pioneered by Burroughs in the 5500/6500 machines. Illiac IV was designed in fact to be a [...] "back end processor" [...] to a B6700. The cost overruns caused by not getting the LSI chips and other design screw ups by Burroughs (the control unit was built with <b>positive</b> <b>logic</b> and the PEs with negative logic, etc.) made the project untenable.|$|E
50|$|Intuitionistic {{logic is}} {{achieved}} by adding axioms P4i and P5i to <b>positive</b> implicational <b>logic,</b> or by adding axiom P5i to minimal logic. Both P4i and P5i are theorems of classical propositional logic.|$|R
40|$|In this paper, we {{describe}} a disjunctive logic programming system, {{referred to as}} DisLoP, based on PROTEIN theorem prover. PROTEIN supports certain theorem proving calculi, such as restart model elimination and hyper tableaux, that are suitable for working with <b>positive</b> disjunctive <b>logic</b> programs. In particular, restart model elimination calculus is answer complete for postive queries. The DisLoP project started at this point {{with the aim of}} extending this further to minimal model reasoning and query processing wrt normal disjunctive logic programming too. The first phase of the project is complete and DisLoP can now perform minimal model reasoning with <b>positive</b> disjunctive <b>logic</b> programs, using both bottom-up and top-down strategies...|$|R
40|$|Abstract. <b>Positive</b> modal <b>logic</b> was {{introduced}} in an influential 1995 paper of Dunn as the positive fragment of standard modal logic. His completeness result consists of an axiomatization that derives all modal formulas that are valid on all Kripke frames and are built only from atomic propositions, conjunction, disjunction, box and diamond. In this paper, we provide a coalgebraic analysis of this theorem, which not only gives a conceptual proof based on duality theory, but also gen-eralizes Dunn’s result from Kripke frames to coalgebras of weak-pullback preserving functors. For possible application to fixed-point logics, it is note-worthy that the <b>positive</b> coalgebraic <b>logic</b> of a functor is given not by all predicate-liftings but by all monotone predicate liftings...|$|R
5000|$|The ILLIAC IV {{was one of}} {{the first}} {{attempts}} at a massively parallel computer. Key to the design as conceived by Daniel Slotnick, the director of the project, was fairly high parallelism with up to 256 processors, used to allow the machine to work on large data sets in what would later be known as array processing. The machine was to have 4 quadrants. Each quadrant had a Control Unit (CU) and 64 Processor Elements (PEs). Originally Texas Instruments made a commitment to build the Processing Elements (PEs) out of large scale integrated (LSI) circuits. Several years into the project, TI backed out and said that they could not produce the LSI chips at the contracted price. This required a complete redesign using medium scale integrated circuits,leading to large delays and greatly increasing costs. This also led to scaling the system back from four quadrants to a single quadrant, owing to the fact that the MSI version was going to be many times larger than the LSI version would have been. This led to the CU having pull out 'cards' that were on the order of two feet square. For the PEs what should have been chips about 1 inch in diameter were now roughly 6 by 10 inches. Space, power and air conditioning (not to mention budget) did not allow for a four quadrant machine. The machine was 10' high, 8' deep and 50' long. There could be 10-12 instructions being sent from the CU on the wires to the PEs at any time. The power supplies for the machine were so large that it required designing a single tongue fork lift to remove and reinstall the power supply. The power supply buss bars on the machine spanned distances greater than three feet, and were octopus-like in design. Thick copper, the busses were coated in epoxy that often cracked resulting in shorts and an array of other issues. ILLIAC IV was designed by Burroughs Corporation and built in quadrants in Great Valley, PA during the years of 1967 through 1972. It had a traditional one address accumulator architecture, rather than the revolutionary stack architecture pioneered by Burroughs in the 5500/6500 machines. Illiac IV was designed in fact to be a [...] "back end processor" [...] to a B6700. The cost overruns caused by not getting the LSI chips and other design screw ups by Burroughs (the control unit was built with <b>positive</b> <b>logic</b> and the PEs with negative logic, etc.) made the project untenable.|$|E
40|$|With {{the aim of}} {{developing}} the concepts of <b>positive</b> <b>logic</b> {{and in response to}} a question that was asked by Poizat in one of his articles, I wrote this article. The main topic is the study of compactness in the extension as a compact structure. they are based on a fundamental characterization of the compactness, which was given by Itai Ben Yacov and Poizat in section Basis of <b>positive</b> <b>logic...</b>|$|E
40|$|A b s t r a c t. Minimal Negation {{is defined}} within the basic {{positive}} relevance logic in the relational ternary semantics: B+. Thus, by defining {{a number of}} subminimal negations in the B+ context, principles of weak negation are shown to be isolable. Complete ternary semantics are offered for minimal negation in B+. Certain forms of reductio are conjectured to be undefinable (in ternary frames) without extending the <b>positive</b> <b>logic.</b> Com-plete semantics for such kinds of reductio in a properly extended <b>positive</b> <b>logic</b> are offered. Captatio benevolentiae 1...|$|E
5000|$|The axiom P1 is redundant, as {{it follows}} from P3, P2 and modus ponens. These axioms {{describe}} classical propositional logic; without axiom P4 we get <b>positive</b> implicational <b>logic.</b> Minimal logic is achieved either by adding instead the axiom P4m, or by defining [...] as [...]|$|R
5000|$|Pebble automata admit an {{interesting}} logical characterization. Let [...] denote {{the set of}} tree properties describable in transitive closure first-order logic, and [...] the same for <b>positive</b> transitive closure <b>logic,</b> i.e. a logic where the transitive closure operator is not used under the scope of negation. Then it can be proved that [...] and, in fact, [...] - the languages recognized by pebble automata are exactly those expressible in <b>positive</b> transitive closure <b>logic.</b>|$|R
40|$|This paper {{presents}} {{a fundamental difference}} between negative semantics for free <b>logics</b> and <b>positive</b> ones regarding the logical relations between existence and predication. We conclude that this difference {{is the key to}} understand why negative free logics are stronger, i. e., they prove more, than <b>positive</b> free <b>logics...</b>|$|R
40|$|Existential {{positive}} {{queries are}} logical sentences built from conjunction, disjunction, and existential quantification, {{and are also}} known as select-project-join-union queries in data-base theory, where they are recognized as a basic and fundamental class of queries. It is known {{that the number of}} variables needed to express an existential positive query is the crucial parameter determining the complexity of evaluating it on a database, and is hence a natural measure from the perspective of query optimization and rewriting. In this artcle, we study the complexity of the natural decision problem associated to this measure, which we call the expressibility problem: Given an existential positive query and a number k, can the query be expressed using k (or fewer) variables? We precisely determine the complexity of the expressibility problem, showing that it is complete for the level Πp 2 of the polynomial hierarchy. Moreover, we prove that the expressibility problem is undecidable in <b>positive</b> <b>logic</b> (that is, existential <b>positive</b> <b>logic</b> plus universal quantification), thus establishing existential <b>positive</b> <b>logic</b> as a maximal syntactic fragment where expressibility is decidable...|$|E
40|$|Minimal Negation {{is defined}} within the basic {{positive}} relevance logic in the relational ternary semantics: B+. Principles of weak negation are {{shown to be}} isolable, thus defining a number of subminimal negations in the B+ context. Complete ternary semantics are offered for minimal negation in B+. Certain forms of reductio are conjectured to be undefinable (in ternary frames) without extending the <b>positive</b> <b>logic.</b> Complete semantics for such kinds of reductio in a properly extended <b>positive</b> <b>logic</b> are offered. Captatio benevolentiae 1. Introduction. Consider any positive propositional logic L+ with the binary connectives →,∧,∨, ↔ and the propositional falsity constant F. Define ¬A=defA→F. Then negation can, in principle, be defined in L+. For instance, if L+ contains (i) (A→(B→C)) →((A∧B) →C)) as a theorem, then (ii) (A→¬B) →¬(A∧B...|$|E
40|$|We {{show that}} a {{restricted}} variant of constructive predicate logic with positive (covariant) quantification is of super-elementary complexity. The restriction is {{to limit the number}} of eigenvariables used in quantifier introductions rules to a reasonably usable level. This construction suggests that the known non-elementary decision algorithms for <b>positive</b> <b>logic</b> may actually be best possible...|$|E
5000|$|In {{mathematical}} <b>logic,</b> <b>positive</b> {{set theory}} {{is the name}} for a class of alternative set theories in which the axiom of comprehension ...|$|R
40|$|A {{programmable}} FPGA-based {{digital logic}} circuit is enhanced with high-speed, <b>positive</b> emitter-coupled <b>logic</b> (PECL) {{to create a}} standalone tester for a self routing optical packet switching network. This tester serves as a test bed for evaluating high-speed electrical to optical conversion techniques and the difficulties associated with burst packet transmissions across the switching network. The demonstration system supports a four-bit wide bus at 2. 5 - 4 Gbps per channel. With wavelength-divisionmultiplexing (WDM) the bit-parallel message width is extendible to hundreds of channels. The project uses commercially available components to keep costs low, yet achieves performance characteristics comparable to (and in some ways exceeding) more expensive ATE. A CMOS FPGA-based logic core provides flexibility, adaptability, and communication with controlling computers while <b>positive</b> emitter-coupled <b>logic</b> achieves multi-gigahertz data rates with about + 25 ps timing accuracy. 1...|$|R
40|$|We present <b>positive</b> coalgebraic <b>logic</b> in full generality, {{and show}} how {{to obtain a}} <b>positive</b> coalgebraic <b>logic</b> from a boolean one. On the model side this {{involves}} canonically computing a endofunctor T 2 ̆ 7 : Pos->Pos from an endofunctor T: Set->Set, in a procedure previously defined by the second author et alii called posetification. On the syntax side, it involves canonically computing a syntax-building functor L 2 ̆ 7 : DL->DL from a syntax-building functor L: BA->BA, in a dual procedure which we call positivication. These operations are interesting {{in their own right}} and we explicitly compute posetifications and positivications in the case of several modal logics. We show how the semantics of a boolean coalgebraic logic can be canonically lifted to define a semantics for its positive fragment, and that weak completeness transfers from the boolean case to the positive case...|$|R
