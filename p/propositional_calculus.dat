536|50|Public
25|$|This {{deduction}} theorem (DT) is {{not itself}} formulated with propositional calculus: {{it is not}} a theorem of <b>propositional</b> <b>calculus,</b> but a theorem about <b>propositional</b> <b>calculus.</b> In this sense, it is a meta-theorem, comparable to theorems about the soundness or completeness of <b>propositional</b> <b>calculus.</b>|$|E
25|$|Sequent {{calculus}} {{is related}} to other axiomatizations of <b>propositional</b> <b>calculus,</b> such as Frege's <b>propositional</b> <b>calculus</b> or Jan Łukasiewicz's axiomatization (itself {{a part of the}} standard Hilbert system): Every formula that can be proven in these has a reduction tree.|$|E
25|$|<b>Propositional</b> <b>calculus</b> restricts {{attention}} to abstract propositions, those built up from propositional variables using Boolean operations. Instantiation {{is still possible}} within <b>propositional</b> <b>calculus,</b> but only by instantiating propositional variables by abstract propositions, such as instantiating Q by Q→P in P→(Q→P) to yield the instance P→((Q→P)→P).|$|E
50|$|M. Bauer, The {{computational}} {{complexity of}} <b>propositional</b> cirquent <b>calculus.</b> Logical Methods is Computer Science 11 (2015), Issue 1, Paper 12, pages 1-16.|$|R
40|$|Abstract. It {{is shown}} that <b>propositional</b> <b>calculuses</b> of both quantum and {{classical}} logics are noncategorical. We find that quantum logic is {{in addition to}} an orthomodular lattice also modeled by a weakly orthomodular lattice and that classical logic is in addition to a Boolean algebra also modeled by a weakly distributive lattice. Both new models turn out to be non-orthomodular. We prove the soundness and completeness of the calculuses for the models. We also prove that all the operations in an orthomodular lattice are five-fold defined. In the end we discuss possible repercussions of our results to quantum computations and quantum computers...|$|R
40|$|Alexander Rabinovich Computer Science Department Sackler Faculty of Exact Sciences Tel Aviv University Tel Aviv, Israel 69978 e. mail: rabino@math. tau. ac. il Abstract This paper {{compares the}} {{expressive}} power of first-order monadic logic of order, a fundamental formalism in mathematical logic {{and the theory}} of computation, with that of two formalisms for the specification of real-time systems, the propositional versions of duration and mean value calculi. Our {{results show that the}} <b>propositional</b> mean value <b>calculus</b> is expressively complete for monadic first-order logic of order. A new semantics for the chop operator used in these real-time formalisms is also proposed, and the expressive completeness results achieved in the paper indicate that the new definition might be more natural than the original one. We provide a characterization of the expressive power of the <b>propositional</b> duration <b>calculus</b> and investigate the connections between the <b>propositional</b> duration <b>calculus</b> and star-free [...] ...|$|R
25|$|The formula F is provably true in intuitionist <b>propositional</b> <b>calculus.</b>|$|E
25|$|Syntactically, every Boolean term {{corresponds}} to a propositional formula of propositional logic. In this translation between Boolean algebra and propositional logic, Boolean variables x,y… become propositional variables (or atoms) P,Q,…, Boolean terms such as x∨y become propositional formulas P∨Q, 0 becomes false or ⊥, and 1 becomes true or T. It is convenient when referring to generic propositions to use Greek letters Φ, Ψ,… as metavariables (variables outside the language of <b>propositional</b> <b>calculus,</b> used when talking about <b>propositional</b> <b>calculus)</b> to denote propositions.|$|E
25|$|The algebra of {{binary digits}} or bits 0 and 1 under the logical {{operations}} including disjunction, conjunction, and negation. Applications include the <b>propositional</b> <b>calculus</b> {{and the theory}} of digital circuits.|$|E
40|$|AbstractThis paper {{compares the}} {{expressive}} power of first-order monadic logic of order, a fundamental formalism in mathematical logic {{and the theory}} of computation, with that of two formalisms for the specification of real-time systems, the propositional versions of duration and mean value calculi. Our {{results show that the}} <b>propositional</b> mean value <b>calculus</b> is expressively complete for monadic first-order logic of order. A new semantics for the chop operator used in these real-time formalisms is also proposed, and the expressive completeness results achieved in the paper indicate that the new definition might be more natural than the original one. We provide a characterization of the expressive power of the <b>propositional</b> duration <b>calculus</b> and investigate the connections between the <b>propositional</b> duration <b>calculus</b> and star-free regular expressions. Finally, we show that there exists at least an exponential gap between the succinctness of the propositional duration (mean value) calculus and that of monadic first-order logic of order...|$|R
40|$|It {{is shown}} that <b>propositional</b> <b>calculuses</b> of both quantum and {{classical}} logics are non-categorical. We find that quantum logic is {{in addition to}} an orthomodular lattice also modeled by a weakly orthomodular lattice and that classical logic is in addition to a Boolean algebra also modeled by a weakly distributive lattice. Both new models turn out to be non-orthomodular. We prove the soundness and completeness of the calculuses for the models. We also prove that all the operations in an orthomodular lattice are five-fold defined. In the end we discuss possible repercussions of our results to quantum computations and quantum computers. Comment: 21 pages, AMSLaTeX, to be published in Helvetica Physica Acta, a few typos corrected, Author's URL [URL]...|$|R
50|$|This section {{describes}} the <b>propositional</b> and predicate <b>calculus,</b> {{and gives the}} basic properties of classes, relations, and types.|$|R
25|$|It is {{possible}} to define another version of <b>propositional</b> <b>calculus,</b> which defines most of the syntax of the logical operators by means of axioms, and which uses only one inference rule.|$|E
25|$|One of {{the main}} uses of a <b>propositional</b> <b>calculus,</b> when {{interpreted}} for logical applications, is to determine relations of logical equivalence between propositional formulas. These relationships are determined {{by means of the}} available transformation rules, sequences of which are called derivations or proofs.|$|E
25|$|The algebra {{itself was}} built from {{a set of}} rules, or axioms, {{capturing}} the formal aspects of Cayley and Sylvester's theory of multivectors. It was thus a calculus, much like the <b>propositional</b> <b>calculus,</b> except focused exclusively {{on the task of}} formal reasoning in geometrical terms.|$|E
40|$|In this paper, {{we present}} {{valuation}} semantics for the <b>Propositional</b> Intuitionistic <b>Calculus</b> (also called Heyting Calculus) and three important subcalculi: the Implicative, the Positive and the Minimal Calculus (also known as Kolmogoroff or Johansson Calculus). Algorithms based in our definitions yields decision methods for these calculi...|$|R
40|$|We formalize the {{construction}} of Paterson’s variant of the Ajtai–Komlós–Szemerédi sorting network of logarithmic depth in the bounded arithmetical theory VNC 1 ∗ (an extension of VNC 1), under the assumption of existence of suitable expander graphs. We derive a conditional p-simulation of the <b>propositional</b> sequent <b>calculus</b> in the monotone sequent calculus MLK...|$|R
40|$|System MV is a simple, <b>propositional</b> linear <b>calculus</b> {{that deals}} with the {{commutative}} as wel l as the non-commutative composition of structures. The mul tipl icative fragment of l near l gic is a special case of MV, and the tensor rul does not su#er from unnecessary non-determinism in context partitioning {{as it does in}} the sequent calEE ofl ar l gic...|$|R
25|$|Gentzen-style {{systems have}} {{significant}} practical and theoretical advantages compared to Hilbert-style systems. For example, both natural deduction and sequent calculus systems facilitate the elimination and introduction of universal and existential quantifiers so that unquantified logical expressions {{can be manipulated}} according to the much simpler rules of <b>propositional</b> <b>calculus.</b> In a typical argument, quantifiers are eliminated, then <b>propositional</b> <b>calculus</b> is applied to unquantified expressions (which typically contain free variables), and then the quantifiers are reintroduced. This very much parallels {{the way in which}} mathematical proofs are carried out in practice by mathematicians. Predicate calculus proofs are generally much easier to discover with this approach, and are often shorter. Natural deduction systems are more suited to practical theorem-proving. Sequent calculus systems are more suited to theoretical analysis.|$|E
25|$|In the {{following}} example of a <b>propositional</b> <b>calculus,</b> the transformation rules are intended to be interpreted as the inference rules of a so-called natural deduction system. The particular system presented here has no initial points, which means that its interpretation for logical applications derives its theorems from an empty axiom set.|$|E
25|$|On {{the other}} hand, DT is so useful for {{simplifying}} the syntactical proof process {{that it can}} be considered and used as another inference rule, accompanying modus ponens. In this sense, DT corresponds to the natural conditional proof inference rule {{which is part of the}} first version of <b>propositional</b> <b>calculus</b> introduced in this article.|$|E
40|$|There is an {{exponential}} speed-up in {{the number}} of lines of the quantified <b>propositional</b> sequent <b>calculus</b> over Substitution Frege Systems, if one considers proofs as trees. Whether this is true also for the number of symbols, is still an open problem. 1 Some background The existence of a propositional proof system which has polynomial size proofs for all tautologies is equivalent to say that NP = co -NP [CR 79]. This simple observation drew the attention in recent years on the formalisms of propositional logic for the study of questions of computational complexity (for a review see [Kraj'icek 95] or [Pudl`ak 98]). A hierarchy of propositional proof systems has been defined and the relations between these systems are currently analyzed. New systems are discovered and as a consequence the computational power of old ones is better understood. In this note we show that the addition of quantifier rules to the <b>propositional</b> sequent <b>calculus</b> induces an exponential speed-up over Substitution [...] ...|$|R
40|$|We {{introduce}} new proof systems for propositional logic, simple deduction Frege systems, general deduction Frege systems and nested deduction Frege systems, which augment Frege systems with variants of the deduction rule. We give upper bounds on the lengths of proofs in these systems compared to lengths in Frege proof systems. As an application we give a near-linear simulation of the <b>propositional</b> Gentzen sequent <b>calculus</b> by Frege proofs. The {{length of a}} proof {{is the number of}} steps or lines in the proof. A general deduction Frege proof system provides at most quadratic speedup over Frege proof systems. A nested deduction Frege proof system provides at most a nearly linear speedup over Frege system where by “nearly linear ” is meant the ratio of proof lengths is O(α(n)) where α is the inverse Ackermann function. A nested deduction Frege system can linearly simulate the <b>propositional</b> sequent <b>calculus</b> and hence a Frege proof system can simulate the <b>propositional</b> sequent <b>calculus</b> with proof lengths bounded by O(n · α(n)). As a technical tool, we introduce the serial transitive closure problem: given a directed graph and a list of closure edges in the transitive closure of the graph, the problem is to derive all the closure edges. We give a nearly linear bound on the number of steps in such a derivation when the graph is tree-like. ...|$|R
40|$|Abstract. We {{establish}} {{a connection between}} the geometric methods developed in the combinatorial theory of small cancellation and the <b>propositional</b> resolution <b>calculus.</b> We define a precise correspondence between resolution proofs in logic and diagrams in small cancellation theory, and as a consequence, we derive that a resolution proof is a 2 dimensional process. The isoperimetric function defined on diagrams corresponds to the length of resolution proofs...|$|R
25|$|<b>Propositional</b> <b>calculus</b> (also called propositional logic, {{statement}} logic, sentential calculus, sentential logic, {{or sometimes}} zeroth-order logic) is {{the branch of}} logic concerned with the study of propositions (whether they are true or false) that are formed by other propositions {{with the use of}} logical connectives, and how their value depends on the truth value of their components.|$|E
25|$|This can {{be shown}} as follows: Every proof in <b>propositional</b> <b>calculus</b> uses only axioms and the {{inference}} rules. Each use of an axiom scheme yields a true logical formula, and can thus be proven in sequent calculus; examples for these are shown below. The only inference rule in the systems mentioned above is modus ponens, which is implemented by the cut rule.|$|E
25|$|Logic {{sentences}} {{that can be}} expressed in classical <b>propositional</b> <b>calculus</b> have an equivalent expression in Boolean algebra. Thus, Boolean logic is sometimes used to denote <b>propositional</b> <b>calculus</b> performed in this way. Boolean algebra {{is not sufficient to}} capture logic formulas using quantifiers, like those from first order logic. Although the development of mathematical logic did not follow Boole's program, the connection between his algebra and logic was later put on firm ground in the setting of algebraic logic, which also studies the algebraic systems of many other logics. The problem of determining whether the variables of a given Boolean (propositional) formula can be assigned {{in such a way as}} to make the formula evaluate to true is called the Boolean satisfiability problem (SAT), and is of importance to theoretical computer science, being the first problem shown to be NP-complete. The closely related model of computation known as a Boolean circuit relates time complexity (of an algorithm) to circuit complexity.|$|E
40|$|Characterization of {{computer}} science data structures and algorithms {{in terms of}} sets and relations, functions, and recurrence relations. Use of <b>propositional</b> and predicate <b>calculus</b> to describe algorithms. Proving correctness and running time bounds for algorithms by induction and structural induction. Textbooks...|$|R
40|$|AbstractThis paper {{presents}} a soundness and completeness proof for <b>propositional</b> intuitionistic <b>calculus</b> {{with respect to}} the semantics of computability logic. The latter interprets formulas as interactive computational problems, formalized as games between a machine and its environment. Intuitionistic implication is understood as algorithmic reduction in the weakest possible — and hence most natural — sense, disjunction and conjunction as deterministic-choice combinations of problems (disjunction = machine’s choice, conjunction = environment’s choice), and “absurd” as a computational problem of universal strength...|$|R
40|$|The paper Proofs Without Syntax [Annals of Mathematics, to appear] {{introduced}} {{the notion of}} a combinatorial proof for classical propositional logic. The present paper uses combinatorial proofs to define a semantics for classical <b>propositional</b> sequent <b>calculus,</b> an inductive translation from sequent proofs to combinatorial proofs. The semantics is abstract and efficient: abstract {{in the sense that it}} identifies many sequent proofs, and efficient in the sense that combinatorial proofs are polynomial-time checkable and the inductive translation is polynomial...|$|R
25|$|Boole's {{work was}} {{extended}} and refined {{by a number}} of writers, beginning with William Stanley Jevons. Augustus De Morgan had worked on the logic of relations, and Charles Sanders Peirce integrated his work with Boole's during the 1870s. Other significant figures were Platon Sergeevich Poretskii, and William Ernest Johnson. The conception of a Boolean algebra structure on equivalent statements of a <b>propositional</b> <b>calculus</b> is credited to Hugh MacColl (1877), in work surveyed 15 years later by Johnson. Surveys of these developments were published by Ernst Schröder, Louis Couturat, and Clarence Irving Lewis.|$|E
25|$|Our <b>propositional</b> <b>calculus</b> has ten {{inference}} rules. These rules {{allow us}} to derive other true formulas given a set of formulas that {{are assumed to be}} true. The first nine simply state that we can infer certain well-formed formulas from other well-formed formulas. The last rule however uses hypothetical reasoning in the sense that in the premise of the rule we temporarily assume an (unproven) hypothesis {{to be part of the}} set of inferred formulas to see if we can infer a certain other formula. Since the first nine rules don't do this they are usually described as non-hypothetical rules, and the last one as a hypothetical rule.|$|E
25|$|First, {{there are}} several cases where the NKS book {{introduces}} what was, during the book's composition, the simplest known system in some class that has a particular characteristic. Some examples include the first primitive recursive function that results in complexity, the smallest universal Turing Machine, and the shortest axiom for <b>propositional</b> <b>calculus.</b> In a similar vein, Wolfram also demonstrates many simple programs that exhibit phenomena like phase transitions, conserved quantities, continuum behavior, and thermodynamics that are familiar from traditional science. Simple computational models of natural systems like shell growth, fluid turbulence, and phyllotaxis are a final category of applications that fall in this theme.|$|E
40|$|Illative combinatory logic {{consists}} {{of the theory of}} combinators or lambda calculus extended by extra constants (and corresponding axioms and rules) intended to capture inference. The paper considers 4 systems of illative combinatory logic that are sound for first-order <b>propositional</b> and predicate <b>calculus...</b>|$|R
40|$|This paper {{presents}} a soundness and completeness proof for <b>propositional</b> intuitionistic <b>calculus</b> {{with respect to}} the semantics of computability logic. The latter interprets formulas as interactive computational problems, formalized as games between a machine and its environment. Intuitionistic implication is understood as algorithmic reduction in the weakest possible [...] and hence most natural [...] sense, disjunction and conjunction as deterministic-choice combinations of problems (disjunction = machine's choice, conjunction = environment's choice), and "absurd" as a computational problem of universal strength. See [URL] for a comprehensive online source on computability logic...|$|R
40|$|We {{introduce}} new proof systems for propositional logic, simple deduction Frege systems, general deduction Frege systems and nested deduction Frege systems, which augment Frege systems with variants of the deduction rule. We give upper bounds on the lengths of proofs in Frege proof systems compared to lengths in these new systems. As applications we give near-linear simulations of the <b>propositional</b> Gentzen sequent <b>calculus</b> {{and the natural}} deduction calculus by Frege proofs. The length of a proof {{is the number of}} lines (or formulas) in the proof. A general deduction Frege proof system provides at most quadratic speedup over Frege proof systems. A nested deduction Frege proof system provides at most a nearly linear speedup over Frege system where by “nearly linear ” is meant the ratio of proof lengths is O(α(n)) where α is the inverse Ackermann function. A nested deduction Frege system can linearly simulate the <b>propositional</b> sequent <b>calculus,</b> the tree-like general deduction Frege calculus, and the natural deduction calculus. Hence a Frege proof system can simulate all those proof systems with proof lengths bounded by O(n · α(n)). Also we sho...|$|R
