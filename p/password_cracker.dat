32|8|Public
25|$|An {{example of}} this is a <b>password</b> <b>cracker</b> that {{attempts}} to guess the password for an encrypted file (assuming that the password has a maximum possible length).|$|E
2500|$|L0pht {{was founded}} in 1992 in the Boston area as a {{location}} for its members to store their computer hardware and work on various projects. In time, the members of L0pht quit their day jobs to start a business venture named L0pht Heavy Industries, a hacker think tank. The business released several security advisories and produced widely used software tools such as L0phtCrack, a <b>password</b> <b>cracker</b> for Windows NT. On May 19, 1998, all seven members of L0pht (Brian Oblivion, Kingpin, Mudge, Space Rogue, Stefan Von Neumann, John Tan, Weld Pond) famously testified before the Congress of the United States that they could shut down the entire Internet in 30 minutes. The Washington Post referred to the response as [...] "a tragedy of missed opportunity".|$|E
2500|$|Occasionally, shell {{accounts}} {{were offered}} for low cost on the L0pht.com server to selected individuals; while these individuals {{had access to}} the L0pht.com server they were not members of L0pht. One of the first physical products sold for profit by L0pht was a POCSAG decoder kit, which was sold in both kit and assembled form. [...] Subsequently, the Whacked Mac Archives were transferred to CD-ROM for sale, soon followed by CD copies of the Black Crawling System Archives. [...] The command line version of L0phtCrack, the <b>password</b> <b>cracker</b> for Windows NT, was given away free, but the GUI version was sold as a commercial product. This was followed by the creation of the Hacker News Network website to host advertisements. However, even with these sources of income, L0pht barely broke even, and eventually began doing custom security coding for companies like NFR.|$|E
5000|$|Stockade is a TCP-layer {{blocking}} tool written in C++. It denies TCP/IP access to registered IP addresses {{by using the}} ipfw packet filter. It targets spam prevention, but may also be used against other attackers (e.g. brute force <b>password</b> <b>crackers.)</b> ...|$|R
40|$|Many {{people have}} {{accounts}} in different sites, {{and the problem}} is that hundreds of millions of passwords are being compromised by cybercriminals every year. People finally need to understand that the Internet is a very hostile place, while online service providers need to finally start taking network security seriously. One of the world’s leading <b>password</b> <b>crackers</b> just got better and is now able to crack passwords of up to 55 characters in length and algorithms such as TrueCrypt 5. 0 +, LastPass and Samsung Android Password/PIN...|$|R
5000|$|John the Ripper {{is a free}} {{password}} cracking software tool. Initially {{developed for}} the Unix operating system, it now runs on fifteen different platforms (eleven of which are architecture-specific versions of Unix, DOS, Win32, BeOS, and OpenVMS). It {{is one of the}} most popular password testing and breaking programs as it combines a number of <b>password</b> <b>crackers</b> into one package, autodetects password hash types, and includes a customizable cracker. It can be run against various encrypted password formats including several crypt password hash types most commonly found on various Unix versions (based on DES, MD5, or Blowfish), Kerberos AFS, and Windows NT/2000/XP/2003 LM hash. Additional modules have extended its ability to include MD4-based password hashes and passwords stored in LDAP, MySQL, and others.|$|R
5000|$|Alec Muffett {{announced}} Crack, {{the famous}} Unix <b>password</b> <b>cracker</b> ...|$|E
5000|$|Craig. A <b>password</b> <b>cracker,</b> often {{encountered}} in situations with stored passwords.|$|E
50|$|Ophcrack, a Microsoft Windows <b>password</b> <b>cracker</b> {{based on}} rainbow tables by Philippe Oechslin.|$|E
40|$|PyBozoCrack is a depressingly {{effective}} MD 5 <b>password</b> hash <b>cracker</b> {{with almost}} zero CPU/GPU load written in Python. Instead of rainbow tables, dictionaries, or brute force, PyBozoCrack simply finds the plaintext password. Specifically, it googles the MD 5 hash and hopes the plaintext appears {{somewhere on the}} first page of results...|$|R
50|$|BackTrack 5 - This latest {{release from}} Offensive Security {{is based on}} Ubuntu 10.04 LTS Linux. Three {{graphical}} desktop environments can be chosen from: Gnome, KDE, and Fluxbox. Over 300 application programs are included for penetration testing, such as network monitors and <b>password</b> <b>crackers,</b> but also Metasploit 3.7.0, an exploit framework. BackTrack 5 is a live distribution, {{but there is also}} an ARM version available for the Android operating system, allowing tablets and smartphones to be used for mobile penetration testing of Wi-Fi networks. BackTrack can be installed on hard disk, both alone and in dual boot configuration, on a USB flash drive, and in VMware. Metasploit's effectiveness is caused by the large number of exploits that are updated continually. In August 2011, there were 716 exploits for all usual operating systems together. Armitage is the GUI for Metasploit within BackTrack 5. This GUI can import files in XML format, and it supports Nmap, Nessus, and Metasploit-Express.|$|R
40|$|The {{requirement}} {{of creating an}} username and password serves as {{first line of defense}} against unauthorized access in Webbased services such as online banking, stock trading and e-commerce applications. Though text passwords have been around for a while, not much has been done in implementing policies so that users can satisfactorily create a strong, yet easy-to-remember password. Users prefer simple (easy to remember) passwords, but they are at the risk of being guessed by <b>password</b> <b>crackers.</b> On the contrary, service providers prefer that user’s use a strong (difficult to guess) password policy to protect their own resources. We propose a novel framework, called iPass to guide users in creating secure passwords. Our web-based application encourages user participation, which is a challenging goal when suggesting computer-assisted passwords. We suggest pareto − efficient passwords by monitoring password strength and user perception of memorizing a password. We also explore different algorithms to strengthen a given password, and examine it’s effects on the usability of the system. Our prototype can be used to implement password policies, as well as a tool to gauge the password strength. 1...|$|R
5000|$|Crack v5.0a {{released}} in 2000 did not introduce any new features, but instead concentrated on improving the code and introducing more flexibility, {{such as the}} ability to integrate other crypt (...) variants such as those needed to attack the MD5 password hashes used on more modern Unix, Linux and Windows NT systems. It also bundled Crack v6 - a minimalist <b>password</b> <b>cracker</b> and Crack v7 - a brute force <b>password</b> <b>cracker.</b>|$|E
5000|$|Steampunk <b>Password</b> <b>Cracker</b> - {{frequently}} used piece of Artie's travel bag; in this episode, Artie {{uses it to}} disable the security gate in the art gallery.|$|E
5000|$|DaveGrohl is a brute-force <b>password</b> <b>cracker</b> for Mac OS X. It was {{originally}} created in 2010 as a password hash extractor but has since {{evolved into a}} standalone or distributed <b>password</b> <b>cracker.</b> It supports all of the standard Mac OS X user password hashes (MD4, SHA-512 and PBKDF2) used since OS X Lion and also can extract them formatted for other popular password crackers like John the Ripper. [...] The latest stable release is designed specifically for Mac OS X Lion and Mountain Lion.|$|E
40|$|In commonplace textual {{password}} schemes, users choose passwords {{that are}} easy to recall. Since memorable passwords typically exhibit patterns, they are exploitable by brute-force <b>password</b> <b>crackers</b> using attack dictionaries. This leads us to ask what classes of graphical passwords users find memorable. We postulate one such class supported by a collection of cognitive studies on visual recall, which can be characterized as mirror symmetric (reflective) passwords. We assume that an attacker would put this class in an attack dictionary for graphical passwords and propose how an attacker might order such a dictionary. We extend the existing analysis of graphical passwords by analyzing the size of the mirror symmetric password space relative to the full password space of the graphical password scheme of Jermyn et al. (1999), and show it to be exponentially smaller (assuming appropriate axes of reflection). This reduction in size can be compensated for by longer passwords: the size of the space of mirror symmetric passwords of length about L + 5 exceeds that of the full password space for corresponding length L <= 14 on a 5 x 5 grid. This work could be used to help in formulating password rules for graphical password users and in creating proactive graphical password checkers...|$|R
40|$|Use of long sentence-like or phrase-like {{passwords}} such as “abiggerbetterpassword ” and “thecommunistfairy” is increasing. In this paper, {{we study}} {{the role of}} grammatical structures underlying such passwords in diminishing the security of passwords. We show {{that the results of}} the study have direct bearing on the design of secure password policies, and on <b>password</b> <b>crackers</b> used for enforcing password security. Using an analytical model based on Parts-of-Speech tagging we show that the decrease in search space due to the presence of grammatical structures can be as high as 50 %. A significant result of our work is that the strength of long passwords does not increase uniformly with length. We show that using a better dictionary e. g. Google Web Corpus, we can crack more long passwords than previously shown (20. 5 % vs. 6 %). We develop a proof-of-concept grammar-aware cracking algorithm to improve the cracking efficiency of long passwords. In a performance evaluation on a long password dataset, 10 % of the total dataset was exclusively cracked Text-based password authentication is a widely deployed user authentication mechanism. Use of text-based passwords involves a trade-off between usability and security. System assigned passwords and user-selected passwords subject to complex constraints (e. g., including mixed-case...|$|R
50|$|An {{example of}} this is a <b>password</b> <b>cracker</b> that {{attempts}} to guess the password for an encrypted file (assuming that the password has a maximum possible length).|$|E
5000|$|Steampunk <b>Password</b> <b>Cracker</b> - a brass {{cylinder}} with numeric dials, retrofitted with a USB cable. A {{frequently used}} part of Artie's travel bag; Artie uses this {{to bypass the}} security on Dickinson's computer.|$|E
5000|$|Crack is a Unix {{password}} cracking {{program designed}} to allow system administrators to locate users who may have weak passwords vulnerable to a dictionary attack. Crack was the first standalone <b>password</b> <b>cracker</b> for Unix systems and (later) the first to introduce programmable dictionary generation.|$|E
50|$|Alec David Edward Muffett (born April 22, 1968) is an Anglo-American internet-security evangelist, architect, and {{software}} engineer. He is principally {{known for his}} work on Crack, the original Unix <b>password</b> <b>cracker,</b> and for the CrackLib password-integrity testing library; he is also active in the Open Source software community. He worked as a Software Engineer for Facebook.|$|E
50|$|Attacks {{which are}} {{spread out across}} {{a long period of}} time or a large number of source IPs, such as nmap's slow scan, can be {{difficult}} to pick out of the background of benign traffic. An online <b>password</b> <b>cracker</b> which tests one password for each user every day will look nearly identical to a normal user who mistyped their password.|$|E
50|$|Rainbow {{tables are}} {{specific}} to the hash function they were created for e.g., MD5 tables can crack only MD5 hashes. The theory of this technique was invented by Philippe Oechslin as a fast form of time/memory tradeoff, which he implemented in the Windows <b>password</b> <b>cracker</b> Ophcrack. The more powerful RainbowCrack program was later developed that can generate and use rainbow tables {{for a variety of}} character sets and hashing algorithms, including LM hash, MD5, and SHA1.|$|E
5000|$|Despite their capabilities, desktop CPUs are slower at {{cracking}} passwords than purpose-built password breaking machines. In 1998, the Electronic Frontier Foundation (EFF) built {{a dedicated}} <b>password</b> <b>cracker</b> using ASICs, {{as opposed to}} general purpose CPUs. Their machine, Deep Crack, broke a DES 56-bit key in 56 hours, testing over 90 billion keys per second. [...] In 2010, the Georgia Tech Research Institute developed a method of using GPGPU to crack passwords, {{coming up with a}} minimum secure password length of 12 characters.|$|E
5000|$|By 1981 The New York Times {{described}} white hat {{activities as}} part of a [...] "mischievous but perversely positive 'hacker' tradition". When a National CSS employee revealed the existence of his <b>password</b> <b>cracker,</b> which he had used on customer accounts, the company chastised him not for writing the software but for not disclosing it sooner. The letter of reprimand stated [...] "The Company realizes the benefit to NCSS and in fact encourages the efforts of employees to identify security weaknesses to the VP, the directory, and other sensitive software in files".|$|E
5000|$|... == Development == Kali Linux {{has over}} 600 preinstalled penetration-testing programs, {{including}} Armitage (a graphical cyber attack management tool), Nmap (a port scanner), Wireshark (a packet analyzer), John the Ripper <b>password</b> <b>cracker,</b> Aircrack-ng (a software suite for penetration-testing wireless LANs), Burp suite and OWASP ZAP web application security scanners. Kali Linux can run natively when installed on a computer's hard disk, can be booted from a live CD or live USB, {{or it can}} run within a virtual machine. It is a supported platform of the Metasploit Project's Metasploit Framework, a tool for developing and executing security exploits.|$|E
50|$|IT {{personnel}} from the National Security Division's IIS Unit {{were sent to}} investigate Hanssen's desktop computer following a reported failure. NSD chief Johnnie Sullivan ordered the computer impounded after it {{appeared to have been}} tampered with. A digital investigation found that an attempted hacking had taken place using a password cracking program installed by Hanssen, which caused a security alert and lockup. Following confirmation by the FBI CART Unit, Sullivan filed a report with the Office of Professional Responsibility requesting further investigation of Hanssen's attempted hack. Hanssen claimed that he was attempting to connect a color printer to his computer, but needed the <b>password</b> <b>cracker</b> to bypass the administrative password. The FBI believed his story and Hanssen was let off with a warning.|$|E
5000|$|L0pht {{was founded}} in 1992 in the Boston area as a {{location}} for its members to store their computer hardware and work on various projects. In time, the members of L0pht quit their day jobs to start a business venture named L0pht Heavy Industries, a hacker think tank. The business released several security advisories and produced widely used software tools such as L0phtCrack, a <b>password</b> <b>cracker</b> for Windows NT. On May 19, 1998, all seven members of L0pht (Brian Oblivion, Kingpin, Mudge, Space Rogue, Stefan Von Neumann, John Tan, Weld Pond) famously testified before the Congress of the United States that they could shut down the entire Internet in 30 minutes. The Washington Post referred to the response as [...] "a tragedy of missed opportunity".|$|E
50|$|Occasionally, shell {{accounts}} {{were offered}} for low cost on the L0pht.com server to selected individuals; while these individuals {{had access to}} the L0pht.com server they were not members of L0pht. One of the first physical products sold for profit by L0pht was a POCSAG decoder kit, which was sold in both kit and assembled form. Subsequently, the Whacked Mac Archives were transferred to CD-ROM for sale, soon followed by CD copies of the Black Crawling System Archives. The command line version of L0phtCrack, the <b>password</b> <b>cracker</b> for Windows NT, was given away free, but the GUI version was sold as a commercial product. This was followed by the creation of the Hacker News Network website to host advertisements. However, even with these sources of income, L0pht barely broke even, and eventually began doing custom security coding for companies like NFR.|$|E
40|$|Abstract. Cryptanalytic time-memory {{trade-offs}} {{were introduced}} by Hellman in 1980 {{in order to}} perform key-recovery attacks on cryptosystems. A major advance was presented at Crypto 2003 by Oechslin, with the rainbow table variant that outperforms Hellman’s seminal work. This paper introduces the fingerprint tables, which drastically {{reduce the number of}} false alarms during the attack compared to the rainbow tables. The key point of our technique consists in storing in the tables the fingerprints of the chains instead of their endpoints. The fingerprint tables provide a time-memory trade-off that is about two times faster than the rainbow tables on usual problem sizes. We experimentally illustrate the performance of our technique, and demonstrate that it is faster than Ophcrack, a Windows LM Hash <b>password</b> <b>cracker</b> considered so far to be the fastest one ever implemented...|$|E
40|$|Building a {{password}} cracking server that preserves {{the privacy of}} the queries made to the server is a problem that has not yet been solved. Such a server could acquire practical relevance in the future: for instance, the tables used to crack the passwords could be calculated, stored and hosted in cloud-computing services, and could be queried from devices with limited computing power. In this paper we present a method to preserve the confidentiality of a <b>password</b> <b>cracker</b> [...] -wherein the tables used to crack the passwords are stored by a third party [...] -by combining Hellman tables and Private Information Retrieval (PIR) protocols. We provide the technical details of this method, analyze its complexity, and show the experimental results obtained with our implementation. Comment: WSegI at 41 st JAIIO, La Plata, Argentin...|$|E
40|$|This paper {{presents}} generic {{requirements for}} proactive password changer. It then examines {{two of the}} most popular, publicly-available programs to see how well they meet the requirements. Future directions are examined, as well as alternatives to such checkers. 1. Introduction The problems inherent in allowing users to choose passwords without restriction have been widely discussed [4][6]; countermeasures include random generation of passwords [8] and techniques to test the strength of the proposed password the user selects. The latter falls into two classes: reactive password checking, in which the password is reset and later tested, and proactive password checking, in which the proposed password is first tested and then made the password. The manner of testing is independent of class. Either the password is transformed into the form in which it will be stored and a program that attempts to guess the password (a <b>password</b> <b>cracker)</b> is invoked, or the password is analyzed before it is t [...] ...|$|E
40|$|We {{present a}} {{dictionary}} attack {{that is based}} on keyboard acoustic emanations. We combine signal processing and efficient data structures and algorithms, to successfully reconstruct single words of 7 - 13 characters from a recording of the clicks made when typing them on a keyboard. Our attack does not require any training, and works on an individual recording of the typed word (may be under 5 seconds of sound). The attack is very efficient, taking under 20 seconds per word on a standard PC. We demonstrate a 90 % or better success rate of finding the correct word in the top 50 candidates identified by the attack, for words of 10 or more characters, and a success rate of 73 % over all the words we tested. We show that the dominant factors affecting the attack’s success are the word length, and more importantly, the number of repeated characters within the word. Our attack can be used as an effective acoustic-based <b>password</b> <b>cracker.</b> Our attack can also be used as part of an acoustic long-text reconstruction method, that is much more efficient and requires much less text than previous approaches...|$|E
40|$|Bcrypt is a {{password}} hashing {{scheme based on}} the Blowfish block cipher. It {{was designed to be}} resistant to brute force attacks and to remain secure despite of hard-ware improvements [13]. Expensive key setup with user-defined cost setting makes this hash slow while rapid ran-dom 32 -bit lookups using Blowfish’s variable S-boxes require 4 KB of local memory per instance. This mem-ory access pattern makes bcrypt moderately unfriendly to parallel implementation on modern CPUs, where on one hand gather addressing is required in order to exploit the CPUs ’ SIMD capabilities, and on the other even when gather addressing is in fact available the L 1 data cache size becomes the limiting factor. Despite of this (and due to it), it is possible to achieve much better perfor-mance per Watt with bcrypt implementations on homo-geneous and heterogeneous multiprocessing platforms: Parallella board with 16 - or 64 -core Epiphany accelera-tor and ZedBoard with Zynq reconfigurable logic [16, 2]. Proposed implementations were integrated into John the Ripper <b>password</b> <b>cracker</b> resulting in improved energy efficiency by a factor of 35 + compared to heavily opti-mized implementations on modern CPUs. ...|$|E
40|$|International audiencePasswords {{are widely}} used for user authentication, and will likely remain in use in the {{foreseeable}} future, despite several weaknesses. One important weakness is that human-generated passwords are far from being random, which makes them susceptible to guessing attacks. Under-standing the adversaries capabilities for guessing attacks is a fundamental necessity for estimating their impact and advising countermeasures. This paper presents OMEN, a new Markov model-based <b>password</b> <b>cracker</b> that extends ideas proposed by Narayanan and Shmatikov (CCS 2005). The main novelty of our tool is that it generates password candidates according to their occurrence probabilities, i. e., it outputs most likely passwords first. As shown by our extensive experiments, OMEN signifi-cantly improves guessing speed over existing proposals. In particular, we compare the performance of OMEN with the Markov mode of John the Ripper, which implements the password indexing func-tion by Narayanan and Shmatikov. OMEN guesses more than 40 % of passwords correctly with the first 90 million guesses, while JtR-Markov (for T = 1 billion) needs at least eight times as many guesses to reach the same goal, and OMEN guesses more than 80 % of passwords correctly at 10 billion guesses, more than all probabilistic password crackers we compared against...|$|E
40|$|Passwords {{are widely}} used for user {{authentication}} and, despite their weaknesses, will likely remain in use in the foreseeable future. Human-generated passwords typically have a rich structure, which makes them susceptible to guessing attacks. In this paper, we study the effectiveness of guessing attacks based on Markov models. Our contributions are two-fold. First, we propose a novel <b>password</b> <b>cracker</b> based on Markov models, which builds upon and extends ideas used by Narayanan and Shmatikov (CCS 2005). In extensive experiments we show that it can crack up to 69 % of passwords at 10 billion guesses, more than all probabilistic password crackers we compared again t. Second, we systematically analyze the idea that additional personal information about a user helps in speeding up password guessing. We find that, on average and by carefully choosing parameters, we can guess up to 5 % more passwords, especially {{when the number of}} attempts is low. Furthermore, we show that the gain can go up to 30 % for passwords that are actually based on personal attributes. These passwords are clearly weaker and should be avoided. Our cracker could be used by an organization to detect and reject them. To the best of our knowledge, we are the first to systematically study the relationship between chosen passwords and users' personal information. We test and validate our results over a wide collection of leaked password databases...|$|E
