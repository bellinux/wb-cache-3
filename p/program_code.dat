2024|3674|Public
5|$|The {{encryption}} {{resembles the}} RSA algorithm. This algorithm encodes data in 3-byte blocks. First, the each byte is permuted through an 8-position permutation, then the bits are {{split into two}} 12-bit integers (by taking the low 4 bits of the second byte and the 8 bits of the first byte as the first 12-bit integer, and the 8 bits of the third byte and the 4 high bits of the second integer as the second 12-bit integer). Each is individually encrypted by taking them to the 3491st power, mod 4097; the bits are then reassembled into 3 bytes. The encrypted text is then stored in a string variable {{as part of the}} program. To shroud the would be visible and noticeable text it is compressed with the simple Lzw before final storage. As the Macintosh Common Lisp compiler compresses the main <b>program</b> <b>code</b> into the executable, this was not that necessary.|$|E
25|$|Video games (also termed ROM hacking), {{which is}} {{possible}} via several methods. The most widely employed method is altering <b>program</b> <b>code</b> at the assembly language level.|$|E
25|$|The {{algorithm}} (and {{therefore the}} <b>program</b> <b>code)</b> is simpler than other algorithms, especially compared to strong algorithms that ensure {{a solution to}} the most difficult puzzles.|$|E
50|$|Languages {{that lack}} {{flexibility}} in specifying string literals make it particularly cumbersome to write <b>programming</b> <b>code</b> that generates other <b>programming</b> <b>code.</b> This {{is particularly true}} when the generation language is the same or similar to the output language.|$|R
5000|$|... #Subtitle level 2: <b>Programming</b> <b>code</b> {{formatting}} and beautification ...|$|R
5000|$|On-screen editing of content, Web graphics, <b>program</b> <b>codes,</b> and simulations.|$|R
25|$|The <b>program</b> <b>code</b> for the Sinclair Spectrum {{version was}} written on an IBM AT-compatible {{computer}} using a macro assembler, while the graphics were designed on an Atari ST, then downloaded onto the IBM AT, before being downloaded to the Spectrum and debugged using a specially developed monitor.|$|E
25|$|Self-evaluating {{forms and}} quoted forms are Lisp's {{equivalent}} of literals. It {{may be possible}} to modify the values of (mutable) literals in <b>program</b> <b>code.</b> For instance, if a function returns a quoted form, and the code that calls the function modifies the form, this may alter the behavior of the function on subsequent iterations.|$|E
25|$|Besides {{physical}} resources, {{information is}} often reused, notably <b>program</b> <b>code</b> for {{the software that}} drives computers and the Internet, but also the documentation that explains how to use every modern device. And it is proposed {{as a way to}} improve education by assembling a great library of shareable learning objects that can be reused in learning management systems.|$|E
50|$|The <b>programming</b> <b>code</b> seen in {{the film}} is from Viralator 0.9.|$|R
40|$|In smart {{wireless}} {{software defined}} networks (WSDNs), sensor nodes are {{deployed in the}} monitored area to sense data. In order to increase the flexibility of WSDNs configuration, sensor nodes use programmable technology. Thus, programming and software engineering that integrate Internet of Things (IoT) lead to a smart world. Due to the large capacity of <b>program</b> <b>codes</b> and the limited energy of wireless network, only a subset of nodes is selected to spread <b>program</b> <b>codes,</b> and the remaining nodes are in sleep status to save energy. In this paper, a fast <b>program</b> <b>codes</b> dissemination (FPCD) scheme for smart wireless software defined networking is proposed; many nodes in the area far from the sink will be selected to spread program codes; those areas have much energy left, while the area near the sink chooses less number of active nodes to spread <b>program</b> <b>codes</b> to save energy. Thus, FPCD scheme can reduce delay for spreading <b>program</b> <b>codes</b> while retaining network lifetime. The theoretical analysis and experimental results show that our approach can reduce transmission delay by 10. 76 %– 105. 791 % while retaining network lifetime compares with previous broadcast schemes...|$|R
2500|$|... a large open-access {{database}} of <b>program</b> <b>codes</b> of published computational neuroscience models.|$|R
25|$|At {{the same}} time, {{computer}} programmers {{began to develop}} emulators capable of reproducing the internal workings of the NES on modern personal computers. When paired with a ROM image (a bit-for-bit copy of a NES cartridge's <b>program</b> <b>code),</b> the games can be played on a computer. Emulators also come {{with a variety of}} built-in functions that change the gaming experience, such as save states which allow the player to save and resume progress at an exact spot in the game.|$|E
25|$|GIMP {{operations}} can be automated with scripting languages. The Script-Fu is a Scheme-based language implemented using a TinyScheme interpreter {{built into}} GIMP. GIMP {{can also be}} scripted in Perl, Python (Python-Fu), or Tcl, using interpreters external to GIMP. New features {{can be added to}} GIMP not only by changing <b>program</b> <b>code</b> (GIMP core), but also by creating plug-ins. These are external programs that are executed and controlled by the main GIMP program. MathMap {{is an example of a}} plug-in written in C.|$|E
25|$|The Cell {{architecture}} {{includes a}} memory coherence architecture that emphasizes power efficiency, prioritizes bandwidth over low latency, and favors peak computational throughput over simplicity of <b>program</b> <b>code.</b> For these reasons, Cell {{is widely regarded}} as a challenging environment for software development. IBM provides a Linux-based development platform to help developers program for Cell chips. The architecture will not be widely used unless it is adopted by the software development community. However, Cell's strengths may make it useful for scientific computing regardless of its mainstream success.|$|E
30|$|The {{derivatives}} {{are calculated}} with Maple and the <b>program</b> <b>codes</b> are available.|$|R
50|$|The <b>programming</b> <b>code</b> {{required}} to interface EEPROM to the DataFlash chip is simpler.|$|R
5000|$|Through five <b>programs,</b> <b>Code</b> for America helps {{government}} work {{more like the}} Internet.|$|R
25|$|In Thumb, the 16-bit opcodes {{have less}} functionality. For example, only {{branches}} can be conditional, and many opcodes {{are restricted to}} accessing only half {{of all of the}} CPU's general-purpose registers. The shorter opcodes give improved code density overall, even though some operations require extra instructions. In situations where the memory port or bus width is constrained to less than 32bits, the shorter Thumb opcodes allow increased performance compared with 32-bit ARM code, as less <b>program</b> <b>code</b> may need to be loaded into the processor over the constrained memory bandwidth.|$|E
25|$|Also in {{some cases}} {{third-party}} companies wrote special multi-function drivers that would combine the capabilities of several standard DOS drivers and TSRs into a single very compact program that used just a few kilobytes of memory. For example, the functions of mouse driver, CDROM driver, ANSI support, DOSKEY command recall, and disk caching would all be combined together in one program, consuming just 1 - 2 kilobytes of conventional memory for normal driver/interrupt access, and storing {{the rest of the}} multi-function <b>program</b> <b>code</b> in EMS or XMS memory.|$|E
25|$|Intel Corporation saw {{the massive}} {{potential}} of the invention and introduced the first commercial NOR type flash chip in 1988. NOR-based flash has long erase and write times, but provides full address and data buses, allowing random access to any memory location. This makes it a suitable replacement for older read-only memory (ROM) chips, which are used to store <b>program</b> <b>code</b> that rarely needs to be updated, such as a computer's BIOS or the firmware of set-top boxes. Its endurance may be from as little as 100 erase cycles for an on-chip flash memory, to a more typical 10,000 or 100,000 erase cycles, up to 1,000,000 erase cycles. NOR-based flash was the basis of early flash-based removable media; CompactFlash was originally based on it, though later cards moved to less expensive NANDflash.|$|E
40|$|Secure <b>program</b> <b>coding</b> {{refers to}} how manage the risks {{determined}} by the security breaches because of the <b>program</b> source <b>code.</b> The papers reviews the best practices must be doing during the software development life cycle for secure software assurance, the methods and techniques used for a secure coding assurance, the most known and common vulnerabilities determined by a bad coding process and how the security risks are managed and mitigated. As a tool of the better secure <b>program</b> <b>coding,</b> the code review process is presented, together with objective measures for code review assurance and estimation of the effort for the code improvement...|$|R
40|$|The {{proofing}} {{mechanisms of}} object-oriented programming are proposed for tasks with mutual transformations of <b>program</b> <b>codes</b> and formal specifications. Those mechanisms {{were used for}} justification to analytical data type which maybe built into programming languages and systems. Proposed approach allows automated proofing transformations of <b>program</b> <b>codes</b> and specifications in programming and simulation system for tasks of formal verification and code synthesis...|$|R
50|$|In total {{instruction}} {{path length}} only, a <b>program</b> <b>coded</b> in an imperative style, using no subroutines, {{would have the}} lowest count. However, the binary size of such a program may be larger than the same <b>program</b> <b>coded</b> using subroutines (as in functional and procedural programming) and would reference more non-local physical instructions that may increase cache misses and instruction fetch overhead in modern processors.|$|R
25|$|The ARM2 {{featured}} a 32-bit data bus, 26-bit address space and 2732-bit registers. Eightbits {{from the program}} counter register were available for other purposes; the top sixbits (available because of the 26-bit address space) served as status flags, and the bottom twobits (available because the program counter was always word-aligned) were used for setting modes. The address bus was extended to 32bits in the ARM6, but <b>program</b> <b>code</b> still had to lie within the first 64MB of memory in 26-bit compatibility mode, due to the reserved bits for the status flags. The ARM2 had a transistor count of just 30,000, compared to Motorola's six-year-older 68000 model with around 40,000. Much of this simplicity came {{from the lack of}} microcode (which represents about one-quarter to one-third of the 68000) and from (like most CPUs of the day) not including any cache. This simplicity enabled low power consumption, yet better performance than the Intel 80286. A successor, ARM3, was produced with a 4KB cache, which further improved performance.|$|E
25|$|Produced as {{a direct}} {{competitor}} to the luxury sports sedans of the leading European luxury marques, the XE10 series Toyota Altezza and Lexus IS was designed with a greater performance emphasis than typically seen on prior Japanese luxury vehicles. The engineering work was led by Nobuaki Katayama from 1994 to 1998 under the 038T <b>program</b> <b>code,</b> {{who was responsible for}} the AE86 project. Design work by Tomoyasu Nishi was frozen in 1996 and filed under patent number 1030135 on December 5, 1996, at the Japan Patent Office. At its introduction to Japan, it was exclusive to Japanese dealerships called Toyota Netz Store, until Lexus was introduced to Japan in 2006. The Japan-sold AS200 Altezza sedan and AS300 Altezza Gita formed the basis for the Lexus IS 200 and IS 300 models respectively, sold in markets outside Japan, primarily North America, Australia, and Europe. The Altezza Gita was a hatchback-station wagon version sold in Japan and was known in the US and Europe as the Lexus IS SportCross. The AS300 Altezza Gita was the only Altezza with the 2JZ-GE engine, while in export markets, this engine was available in the sedan models as well, as the Lexus IS300 Sedan.|$|E
25|$|In 2007 a {{shipyard}} awarded Italian Avio a USD 10 {{million deal}} to provide CODAG propulsion system. In 2008 the hull was at 80% completion when financial crisis broke up. In 2009 the defence budget {{was cut by}} 5 billion PLN. This led to postpone the decision to order the combat systems worth PLN 824 million that was negotiated with Thales in 2008. The ships planned armament included RIM-162 ESSM and RIM-116 RAM surface-to-air missiles, RBS-15 Mk 3 anti-ship missiles and MU90 Impact torpedoes. On 16 September 2009 the hull already with engines, turbines, generators, line shafts and air-conditioners completed technical launching for the first time. At {{the same time the}} Ministry Of Defence decided to suspend corvette financing. In April 2011 the court declared Naval Shipyard's bankruptcy. On 24 February 2012 Gawron program was cancelled. At that time the hull was largely completed at the cost of 402 million PLN (~US$130m), but equipping it with combat systems would have cost an additional 1 billion PLN (~US$320m). On 23 September 2013 an annex to 2001 construction contract was signed to complete the sole unit as patrol vessel. Due to design changes the <b>program</b> <b>code</b> name was changed to Projekt 621M. ORP Ślązak modular design and systems allows to upgrade it to the corvette configuration in the future.|$|E
50|$|Outside of entertainment, Soling {{has written}} <b>programming</b> <b>code</b> and was {{published}} in the computer journal On Three.|$|R
40|$|Abstract:- Real-time {{application}} using MATLAB is {{very difficult}} to be implemented since the implementation requires very long and tedious <b>programming</b> <b>code.</b> This paper presents an approach to design real-time signal generator system that uses Graphical User Interface (GUI) development tools provided in MATLAB 6. 5. The real-time signal generator GUI aimed to compensate the difficulties of writing <b>programming</b> <b>code</b> that enables a beginner to use the application without having to write <b>programming</b> <b>code.</b> The system uses Humosoft AD 612 data acquisition card as the hardware part. The signals generated from the GUI are compared with the external oscilloscope to verify the reliability of the GUI. The example of application described in this paper is virtual oscilloscope with 3 independent channels display for real time signal generation...|$|R
5000|$|The {{following}} phrases {{are generated}} {{from a few}} simple rules of the automaton and <b>programming</b> <b>code</b> in pattern theory: ...|$|R
500|$|Development on fourth {{generation}} LS began in 2001 under <b>program</b> <b>code</b> [...] "250L", {{with the design}} process being done under Yo Hiruta from 2002 to late 2003, with the final production design being frozen in 2004. In October 2005, Lexus premiered a gasoline-electric hybrid concept car, the LF-Sh (Lexus Future-Sedan hybrid), at the Tokyo Motor Show, publicly previewing the next Lexus flagship with a concept version for the first time. Introduced at the January 2006 North American International Auto Show for the 2007 model year, the fourth-generation Lexus LS became the first Lexus model to be produced in both standard and long-wheelbase versions. Using an all-new platform, the LS 460 (USF40) uses the standard [...] wheelbase, while the LS 460 L (USF41) features a stretched [...] wheelbase. The fourth-generation models' technical specifications were shown in greater detail at the Geneva Motor Show in February 2006. A hybrid version, LS 600h L (UVF46), was previewed at the New York International Auto Show in April 2006. At its introduction in 2006, it won the Car of the Year Japan award for the second time.|$|E
500|$|Development of the second-generation LS 400 {{began after}} {{worldwide}} {{launch of the}} first generation under <b>program</b> <b>code</b> 250T. Given the first-generation model's successful reception and high level of customer satisfaction with its design, replicating the original LS 400's attributes with its successor was one of chief engineer Kazuo Okamoto's primary goals (he stated that [...] "a tradition cannot be founded if you reject the first generation"). Externally, the most significant change was an increase in wheelbase length of , resulting in more interior space and an additional [...] of rear-seat legroom. However, as the overall length remained the same, trunk capacity was slightly reduced. The more aerodynamic body (C'd 0.28) retained the general profile and contours of the original LS 400 and was the work of the Calty Design Research center in the U.S. Designers had evaluated 20 competing concepts, including several with a radically changed body, before selecting a winning entry in 1991 that included forms and contours similar to the original LS 400. Upon final approval in 1992, an evolutionary redesign was the ultimate result, with new design features consisting of sharper angles, curved body lines, and a beveled grille. More prominent side lines provided a reference point for parking maneuvers, and forward visibility was improved. Production development lasted from 1991 until conclusion {{in the second quarter of}} 1994.|$|E
2500|$|Security {{experts report}} a {{security}} hole, dubbed the [...] "Shellshock" [...] bug, in the Unix Bash shell internet <b>program</b> <b>code</b> that dates from version 1.13 in 1992 {{and may be}} considered more significant than the [...] "Heartbleed" [...] bug. An incomplete software patch has been made available to fix it.|$|E
3000|$|... ─ “These (unit) {{tests are}} {{performed}} {{to ensure the}} quality of the <b>programmed</b> <b>code</b> and eventually the products.” (team B).|$|R
30|$|Field {{of study}} {{categories}} are aggregated {{according to the}} first two digits of the Classification of Instructional <b>Programs</b> <b>code</b> (CIP Canada 2000).|$|R
30|$|HYR {{wrote the}} {{manuscript}} {{and carried out}} all simulation works including the <b>program</b> <b>coding,</b> the structure design, and the execution of simulations.|$|R
