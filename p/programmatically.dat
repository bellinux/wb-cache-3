1072|0|Public
5|$|Perl's text-handling {{capabilities}} can be {{used for}} generating SQL queries; arrays, hashes, and automatic memory management make it easy to collect and process the returned data. For example, in Tim Bunce's Perl DBI application programming interface (API), the arguments to the API can be the text of SQL queries; thus it is possible to program in multiple languages at the same time (e.g., for generating a Web page using HTML, JavaScript, and SQL in a here document). The use of Perl variable interpolation to <b>programmatically</b> customize each of the SQL queries, and the specification of Perl arrays or hashes as the structures to <b>programmatically</b> hold the resulting data sets from each SQL query, allows a high-level mechanism for handling large amounts of data for post-processing by a Perl subprogram.|$|E
5|$|Of the 20 bits {{allocated}} for each program instruction, 10 {{were used to}} hold the instruction code, which allowed for 1,024 (210) different instructions. The machine had 26 initially, increasing to 30 when the function codes to <b>programmatically</b> control the data transfer between the magnetic drum and the cathode ray tube (CRT) main store were added. On the Intermediary Version programs were input by key switches, and the output was displayed {{as a series of}} dots and dashes on a cathode ray tube known as the output device, just as on the SSEM from which the Mark 1 had been developed. However, the Final Specification machine, completed in October 1949, benefitted from the addition of a teleprinter with a 5-hole paper-tape reader and punch.|$|E
5|$|The SSEM {{had been}} {{designed}} by the team of Frederic C. Williams, Tom Kilburn and Geoff Tootill. To develop the Mark 1 {{they were joined by}} two research students, D.B.G.Edwards and G. E. Thomas; work began in earnest in August 1948. The project soon had the dual purpose of supplying Ferranti with a working design on which they could base a commercial machine, the Ferranti Mark 1, and of building a computer that would allow researchers to gain experience of how such a machine could be used in practice. The first of the two versions of the Manchester Mark 1– known as the Intermediary Version– was operational by April 1949. However, this first version lacked features such as the instructions necessary to <b>programmatically</b> transfer data between the main store and its newly developed magnetic backing store, which had to be done by halting the machine and manually initiating the transfer. These missing features were incorporated in the Final Specification version, which was fully working by October 1949. The machine contained 4,050 valves and had a power consumption of 25 kilowatts. To increase reliability, purpose-built CRTs made by GEC were used in the machine instead of the standard devices used in the SSEM.|$|E
25|$|Analyze changes without {{actually}} committing them. Changes {{can also be}} done and undone <b>programmatically,</b> to automate analysis of different changes.|$|E
25|$|Java Compiler API (JSR 199): an API {{allowing}} a Java program to select and invoke a Java Compiler <b>programmatically.</b>|$|E
25|$|Ruby code can <b>programmatically</b> modify, at runtime, {{aspects of}} its own {{structure}} that would be fixed in more rigid languages, such as class and method definitions. This sort of metaprogramming {{can be used to}} write more concise code and effectively extend the language.|$|E
25|$|Except in the M-profile, the 32-bit ARM {{architecture}} specifies several CPU modes, {{depending on}} the implemented architecture features. At any moment in time, the CPU can be in only one mode, but it can switch modes due to external events (interrupts) or <b>programmatically.</b>|$|E
25|$|Windows Vista {{also allows}} {{controlling}} system-wide volume or volume of individual audio devices and individual applications separately. This feature {{can be used}} from the new Volume Control windows or <b>programmatically</b> using the overhauled audio API. Different sounds can be redirected to different audio devices as well.|$|E
25|$|The Windows Vista Instant Search index {{can also}} be {{accessed}} <b>programmatically</b> using both managed as well as native code. Native code connects to the index catalog by using a Data Source Object retrieved from Windows Vista shell's Indexing Service OLE DB provider. Managed code use the MSIDXS ADO.NET provider with the index catalog name. A catalog on a remote machine {{can also be}} specified using a UNC path. The criteria for the search is specified using a SQL-like syntax.|$|E
25|$|Access to Jet {{databases}} {{is done on}} a per user-level. The {{user information}} is kept in a separate system database, and access is controlled on each object in the system (for instance by table or by query). In Jet 4, Microsoft implemented functionality that allows database administrators to set security via the SQL commands CREATE, ADD, ALTER, DROP USER and DROP GROUP. These commands are a subset of ANSI SQL 92 standard, and they also apply to the GRANT/REVOKE commands. When Jet 2 was released, security could also be set <b>programmatically</b> through DAO.|$|E
25|$|ActiveX Data Objects (ADO) is a {{high-level}} programming interface to OLE DB. It uses a hierarchical object model to allow applications to <b>programmatically</b> create, retrieve, update and delete data from sources supported by OLE DB. ADO {{consists of a}} series of hierarchical COM-based objects and collections, an object that acts as a container of many other objects. A programmer can directly access ADO objects to manipulate data, or can send an SQL query to the database via several ADO mechanisms. ADO is made up of nine objects and four collections.|$|E
25|$|Users {{can access}} the Windows Search index <b>programmatically</b> using managed {{as well as}} native code. Native code connects to the index catalog by using a Data Source Object {{retrieved}} from the Indexing Service OLE DB provider. Managed code use the MSIDXS ADO.NET provider. One can query a catalog on a remote machine by specifying a UNC path. Programmers specify the criteria for searches using SQL-like syntax. The SQL query can either be created by hand, or by using an implementation of the ISearchQueryHelper interface. Windows Search provides implementations of the interface to convert an AQS or NQS queries to their SQL counterpart.|$|E
25|$|BITS {{provides}} API {{access to}} control jobs. A job can be <b>programmatically</b> started, stopped, paused, resumed, and queried for status. Before starting a job, a priority {{has to be}} set for it to specify when the job is processed relative to other jobs in the transfer queue. By default, all jobs are of Normal priority. Jobs can optionally be set to High, Low, or Foreground priority. Background transfers are optimized by BITS, which increases and decreases (or throttles) the rate of transfer based {{on the amount of}} idle network bandwidth that is available. If a network application begins to consume more bandwidth, BITS decreases its transfer rate to preserve the user's interactive experience, except for Foreground priority downloads.|$|E
500|$|The data {{contained}} in the ENA can be accessed manually or <b>programmatically</b> via REST URL through the ENA browser. Initially limited to the Sequence Read Archive, [...] the ENA browser now also provides access to the Trace Archive and EMBL-Bank, allowing file retrieval {{in a range of}} formats including XML, HTML, FASTA and FASTQ. Individual records can be accessed using their accession numbers and other text queries are enabled through the EB-eye search engine. Additionally, sequence similarity-based searches implemented using De Bruijn graphs offer another method of retrieving records from the ENA.|$|E
500|$|More recently, Alfred Schnittke {{allowed the}} {{programmatic}} {{aspects of his}} texts to dictate the course of both his choral symphonies even when no words were being sung. Schnittke's six-movement Second Symphony, following the Ordinary of the Mass of the Roman Catholic Church, works <b>programmatically</b> on two levels simultaneously. While soloists and chorus briefly perform the mass, set to chorales taken from the Gradual, the orchestra provides an extended running commentary that can continue much longer than {{the section of the}} mass being performed. Sometimes the commentary follows a particular chorale but more often is freer and wider ranging in style. Despite the resulting stylistic disparity, biographer Alexander Ivashkin comments, [...] "musically almost all these sections blend the choral [...] tune and subsequent extensive orchestral 'commentary.'" [...] The work becomes what Schnittke called an [...] "Invisible Mass", and Ivashkin termed [...] "a symphony against a chorale backdrop".|$|E
2500|$|Early IBM APL interpreters for IBM 360 and IBM 370 {{hardware}} implemented {{their own}} multi-user management instead {{of relying on}} the host services, thus they were timesharing systems in their own right. First introduced in 1966, the APL\360 system was a multi-user interpreter. The ability to <b>programmatically</b> communicate with the operating system for information and setting interpreter system variables was done through special privileged [...] "I-beam" [...] functions, using both monadic and dyadic operations.|$|E
2500|$|Stephen Holden, {{music critic}} for The New York Times, {{said in his}} article Rock: British Culture Club, that [...] "Culture Club blends soul, rock, funk, reggae and salsa into a music that <b>programmatically</b> reconciles white, black and Latin styles", adding that, [...] "Mr. O'Dowd made the group's best songs – the Motown-flavoured Do You Really Want to Hurt Me and the Latin-inflected dance tune I'll Tumble 4 Ya – shine like jewels." ...|$|E
2500|$|John R. Schmidt, {{associate}} {{attorney general}} (1994–1997) in the Justice Department under President Bill Clinton, expressed {{a need for}} programmatic approval of technology-enabled surveillance programs. He recalled early arguments made by then-Attorney General Edward Levi to the Church Committee that foreign intelligence surveillance legislation should include provisions for <b>programmatically</b> authorizing surveillance programs because of the particular needs of foreign intelligence where [...] "virtually continuous surveillance, which by its nature does not have specifically predetermined targets" [...] may be required. In these situations, [...] "the efficiency of a warrant requirement would be minimal." ...|$|E
2500|$|Epistemologically, {{it is not}} {{impossible}} to tell whether {{we are living in}} a simulation. For example, Bostrom suggests that a window could pop up saying: [...] "You are living in a simulation. Click here for more information." [...] However, imperfections in a simulated environment might be difficult for the native inhabitants to identify and for purposes of authenticity, even the simulated memory of a blatant revelation might be purged <b>programmatically.</b> Nonetheless, should any evidence come to light, either for or against the skeptical hypothesis, it would radically alter the aforementioned probability.|$|E
2500|$|To {{think about}} social {{transformation}} <b>programmatically,</b> one must first mark the direction one wants society to move in, and then identify {{the first steps}} {{with which we can}} move in that direction. In this way we can formulate proposals at points along the trajectory, be they relatively close to how things are now or relatively far away. This provides a third way between revolution and reform. It is revolutionary reform, where one has a revolutionary vision, but acts on that vision in a sequence of piecemeal reforms. As Unger puts it, transformative politics is [...] "not about blueprints; it is about pathways. It is not architecture; it is music".|$|E
2500|$|Webern's {{earliest}} works consist {{primarily of}} lieder, the genre that most belies his roots in Romanticism, specifically German Romanticism; {{one in which}} the music yields brief but explicit, potent, and spoken meaning manifested only latently or <b>programmatically</b> in purely instrumental genres; one marked by significant intimacy and lyricism; and one which often associates nature, especially landscapes, with themes of homesickness, solace, wistful yearning, distance, utopia, and belonging. Robert Schumann's [...] "Mondnacht" [...] is an iconic example; Eichendorff, whose lyric poetry inspired it, is not far removed from the poets (e.g., Richard Dehmel, Gustav Falke, Theodor Storm) whose work inspired Webern and his contemporaries Alban Berg, Max Reger, Arnold Schoenberg, Richard Strauss, Hugo Wolf, and Alexander Zemlinsky. Wolf's Mörike-Lieder were especially influential on Webern's efforts from this period. But well beyond these lieder alone, all of Webern's music may be said to possess such concerns and qualities, as is evident from his sketches, albeit in an increasingly symbolic, abstract, spare, introverted, and idealized manner.|$|E
2500|$|Visual Studio allows {{developers}} to write extensions for Visual Studio {{to extend its}} capabilities. These extensions [...] "plug into" [...] Visual Studio and extend its functionality. Extensions {{come in the form}} of macros, add-ins, and packages. Macros represent repeatable tasks and actions that developers can record <b>programmatically</b> for saving, replaying, and distributing. Macros, however, cannot implement new commands or create tool windows. They are written using Visual Basic and are not compiled. Add-Ins provide access to the Visual Studio object model and can interact with the IDE tools. Add-Ins can be used to implement new functionality and can add new tool windows. Add-Ins are plugged into the IDE via COM and can be created in any COM-compliant languages. Packages are created using the Visual Studio SDK and provide the highest level of extensibility. They can create designers and other tools, as well as integrate other programming languages. The Visual Studio SDK provides unmanaged APIs as well as a managed API to accomplish these tasks. However, the managed API isn't as comprehensive as the unmanaged one. Extensions are supported in the Standard (and higher) versions of Visual Studio 2005. Express Editions do not support hosting extensions.|$|E
2500|$|Perhaps {{the most}} {{influential}} criticisms of P have been theory internal. [...] As in any other developing field of enquiry, research published within the P paradigm often suggests reformulations and variations of the basic P premises. Notable debates emerged within P including (a) derivationalism vs representationalism (b) the locus of morphology (e.g. lexicalism vs derived morphology) and (c) the tension between a production model and a competence model amongst others. [...] The development of head-driven phrase structure grammar (HPSG) and lexical functional grammar (LFG) reflect these debates: these are both strongly lexicalist and representational systems. [...] Nevertheless, perhaps the most coherent and substantial critique of P is the Minimalist Program, Noam Chomsky's most recent proposal. This program of research utilizes conceptions of economy to enhance the search for universal principles and parameters. Linguists in this program assume that humans use as economic a system as possible in their innate syntactic knowledge. [...] The Minimalist Program takes issue with {{the large number of}} independent postulations in P and either (a) reduces them to more fundamental principles (e.g. Merge, Move, Agree), (b) derives them from `reasonable’ interface constraints on derivations (e.g. bottom-up Merge and requirement that no derivation be counter-cyclic derives Relativized Minimality effects) or (c) <b>programmatically</b> suggests that they be either derived from more basic principles or eliminated subject to future research (e.g. Binding Principles). [...] Note that there is debate about whether the Minimalist Program is motivated by the empirical shortcomings of P or whether it is motivated by ideological concerns with `elegance’ etc. [...] (see main article on the Minimalist Program).|$|E
50|$|Next, {{create a}} method that accesses this cache. The {{properties}} of the cache {{can be stored in}} the app.config or web.config files. The cache settings can also be <b>programmatically</b> configured. The following example shows how to <b>programmatically</b> configure the cache.|$|E
5000|$|Send tempo changes, patch changes, {{and other}} MIDI events <b>programmatically.</b>|$|E
50|$|One {{can also}} load and unload parcels <b>programmatically</b> from the application.|$|E
5000|$|All admin {{settings}} configurable <b>programmatically,</b> or via editing XML config files ...|$|E
5000|$|Command line options {{can be set}} <b>programmatically</b> {{using the}} Csound API.|$|E
5000|$|YouTrack RESTful API allows {{developers}} to perform various actions <b>programmatically,</b> including: ...|$|E
50|$|Amazon Web Services {{launched}} the Amazon Elastic Compute Cloud (EC2) service in August 2006, that allowed developers to <b>programmatically</b> create and terminate instances (machines). At {{the time of}} initial launch, AWS did not offer autoscaling, but the ability to <b>programmatically</b> create and terminate instances gave developers the flexibility to write their own code for autoscaling.|$|E
5000|$|... {{is itself}} written in Java. The {{compiler}} {{can also be}} invoked <b>programmatically.</b>|$|E
5000|$|WARC Tools - for creating, reading, parsing and manipulating, WARC {{archives}} <b>programmatically</b> ...|$|E
5000|$|API: {{the ability}} to <b>programmatically</b> {{interface}} with SnapStream's software and combine third-party tools ...|$|E
50|$|A {{standard}} {{on how to}} interact with Java compilers <b>programmatically</b> was specified in JSR 199.|$|E
50|$|Clipboard access - <b>Programmatically</b> copy or paste text, bitmaps or files {{into the}} system clipboard.|$|E
50|$|Data about {{specific}} files {{can also be}} <b>programmatically</b> retrieved via a REST-style XML Web Services.|$|E
