9|4115|Public
40|$|International audienceRe-using {{embedded}} {{resources for}} implementing {{built-in self test}} mechanisms allows test cost reduction. In this paper we demonstrate how to implement cost-efficient built-in self test functions from the AES cryptoalgorithm hardware implementation in a secure system. Self-test of the proposed implementation is also presented. A statistical test suite and fault-simulation are used for evaluating {{the efficiency of the}} corresponding cryptocore as <b>pseudo-random</b> <b>test</b> <b>pattern</b> generator; an analytical approach demonstrates the low probability of aliasing when used for test response compaction...|$|E
40|$|Most BIST {{architectures}} use <b>pseudo-random</b> <b>test</b> <b>pattern</b> generators. However, whenever {{this technique}} {{has been applied}} to on-chip interconnection networks, overly large testing latencies have been reported. On the other hand, alternative approaches either suffer from large area penalties (like scan-based testing or the use of deterministic test patterns) or poor coverage of faults in the control path (functional testing). This paper presents the optimization of a built-in self-testing framework based on pseudo-random test patterns to the microarchitecture of network-on-chip switches. As a result, fault coverage and testing latency approach those achievable with deterministic test patterns while materializing relevant area savings and enhanced flexibility...|$|E
40|$|International audienceTestability {{is a major}} issue, {{particularly}} for secure chips. Design-for-Testability techniques based on scan chains {{proved to be a}} highway for potential attacks. BIST approaches appear as good alternatives since they do not rely on visible scan chains. In this paper we propose a generic BIST solution for block-cipher devices. Taking advantage of the iterative process involved in such encryption algorithms which results in structural implementation consisting of (quasi) identical round transformations executed by the same piece of hardware, self-test procedures are easily setup. Compared to classical BIST solutions based on <b>pseudo-random</b> <b>test</b> <b>pattern</b> generation and output responses compactors, its main advantages are a negligible area overhead and a very short test time, while guaranteeing 100 % of fault coverage...|$|E
40|$|This paper {{presents}} a new algorithm for the automated synthesis of <b>pseudo-random</b> <b>test</b> <b>patterns</b> generators for Built-In Self Test schemes with a mixed test mode. The experimental results show an opportunity {{of using the}} given method on a design stage of circuits producing. In this paper it is shown that an appropriate selection of <b>test</b> <b>pattern</b> generator can significantly reduce the hardware requirements of deterministic part. 1...|$|R
40|$|Built-in {{self-test}} #BIST# techniques modify functional {{hardware to}} give a data path the capability to test itself. The modi#cation of data path registers into registers #BIST resources# that can generate <b>pseudo-random</b> <b>test</b> <b>patterns</b> and#or compress <b>test</b> responses, incurs an area overhead penalty. We show how scheduling and module assignment in high-level synthesis a#ect BIST resourcerequirements of a data path. A scheduling and module assignment procedureis presented that produces schedules which, when usedto synthesize data paths, result in a signi#cant reduction in BIST area overhead and hence total area...|$|R
40|$|In this paper, {{a genetic}} {{algorithm}} (GA) approach for the weighted random testing is discussed. Analyzing optimal weights for weighted random testing {{is a very}} complicated problem. GA is applied to obtain efficient weights for random pattern generation. Simulation results show that GA is an effective method to solve the problem. 1. Introduction Testing has become a costly part in LSI fabrication processes {{because of the difficulty}} of test generation and the long time for test application. Using random or <b>pseudo-random</b> <b>test</b> <b>patterns</b> for LSI <b>testing</b> is an inexpensive approach compared with computing <b>test</b> <b>patterns</b> by deterministic algorithms. Moreover, random testing has the advantage that test application can be performed by a self-test scheme[1, 2]. However, the number of the <b>test</b> <b>patterns</b> needed to obtain a sufficient fault coverage may be too large, and all circuits are not always random testable. The tradeoff exists between test complexity and test length. A major approach to reduce [...] ...|$|R
40|$|Recently, Markov {{sources were}} shown to be {{effective}} in designing <b>pseudo-random</b> <b>test</b> <b>pattern</b> generators with low area overhead for built-in self-test of scan designs. This paper presents a new test pattern generation scheme based on a Markov source and a partial bit-fixing technique. A new method is proposed for the computation of the state transition probabilities of the Markov source based on the statistics of a deterministic test set. This is enhanced by partial bit-fixing logic, which fixes a group of consecutive inputs to all- 0 or all- 1. Experimental results show that the proposed BIST scheme can achieve 100 % fault coverage for large benchmark circuits with reduced hardware overhead and reduced pattern counts compared to the earlier method using Markov sources...|$|E
40|$|Most {{built-in}} self-test architectures use <b>pseudo-random</b> <b>test</b> <b>pattern</b> generators. However, whenever {{this technique}} {{has been applied}} to on-chip interconnection networks, overly large testing latencies have been reported. On the other hand, alternative approaches either suffer from large area penalties (like scan-based testing or the use of deterministic test patterns) or poor fault coverage in the control path (functional testing). Moreover, the recent proliferation of clock domains on a chip makes testing overly challenging. This manuscript presents the optimisation of a built-in self-testing framework based on pseudo-random test patterns to the microarchitecture of network-on-chip switches. As a result, fault coverage and testing latency approach those achievable with deterministic test patterns while materialising relevant area savings and enhanced flexibility. Finally, the authors implement the extension of the proposed testing methodology to multisynchronous systems, thus making it compliant with the relaxation of synchronisation assumptions in nanoscale designs...|$|E
40|$|The {{purpose of}} this paper is to present and discuss a novel {{modeling}} and fault simulation technique for two types of dynamic faults in digital systems: transient power supply voltage drops and transient delays in logic elements or signals paths. Techniques and tools currently used for permanent faults are reused for dynamic (permanent) and intermittent faults. For transient power supply voltage drops (V DD), two approaches are proposed: delay fault injection in all logic elements of the CUT (Circuit Under Test), or modulation of the clock and observation rate. For transient delays (e. g., SEU), single delay injection is performed at logic element level. Delay modulation is carried out by fault injection using the PLI interface of the commercial Verilog# simulation tool. Preliminary results, demonstrated by the c 7552 ISCAS' 85 benchmark circuit, show that CUTs with long critical paths are very sensitive to power supply transients. Moreover, a <b>pseudo-random</b> <b>test</b> <b>pattern</b> can be used to identify the dependence of the CUT sensitivity to delay faults on defect size, for a given clock period, o...|$|E
40|$|This paper {{proposes a}} 32 Bit Linear Feedback Shift Register which generates <b>pseudo-random</b> <b>test</b> <b>patterns</b> as the input bit is a linear {{function}} of its previous state. The {{total number of}} random state generated on LFSR depends on the feedback polynomial. As it is simple counter so it can count maximum of 2 n - 1 by using maximum feedback polynomial. Here {{in this paper we}} implemented 32 -bit LFSR on FPGA by using VHDL to study the performance and analysis the behaviour of randomness. The analysis is conceded out to find number of gates, memory and speed requirement in FPGA as the number of bits is increased. Also, the simulation problem for long bit LFSR on FPGA is presented. The design is simulated and synthesized in Xilinx 14. 5 ISE and Model Sim 10. 1 b...|$|R
40|$|Built-in {{self-test}} (BIST) techniques enable {{an integrated}} circuit (IC) to test itself. BIST reduces test and maintenance costs for an IC {{by eliminating the}} need for expensive test equipment and by allowing fast location of failed ICs in a system. BIST also allows an IC to be tested at its normal operating speed which is very important for detecting timing faults. Despite all of these advantages, BIST has seen limited use in industry because of area and performance overhead and increased design time. This dissertation presents automated techniques for implementing BIST in a way that minimizes area and performance overhead. A low-overhead approach for BIST is to use a linear feedback shift register (LFSR) to apply <b>pseudo-random</b> <b>test</b> <b>patterns</b> to the circuit-under-test. Unfortunately, many circuits contain random-pattern-resistant faults which limit the fault coverage that can be obtained for pseudo-random BIST. Several different approaches for solving this problem are presented...|$|R
40|$|Snehal Udar, for the Doctor of Philosophy {{degree in}} Electrical and Computer Engineering, {{presented}} on May 4, of 2011, at Southern Illinois University Carbondale. TITLE: BUILT-IN SCHEMES FOR <b>TEST</b> <b>PATTERN</b> GENERATION AND FAULT LOCATION MAJOR PROFESSOR: Dr. D. Kagaris In this dissertation, we studied {{the areas of}} <b>test</b> <b>pattern</b> generation and fault location for detecting and diagnosing the faults in today 2 ̆ 7 s complex chips. In the first problem, a novel reseeding based <b>test</b> <b>pattern</b> generation scheme is analyzed by proposing a hardware efficient technique that uses irreducible polynomial-primitive element pair to generate distinct subsequences of <b>test</b> <b>patterns.</b> It is shown that for the given characteristic polynomial the hardware cost remains the same irrespective {{of the number of}} seeds required to generate the test sequence of given length. This scheme is targeted at generating <b>pseudo-random</b> <b>test</b> <b>patterns</b> that detect easy-to-detect faults. A counter based reseeding scheme is further analyzed that embeds a given set of fully specified <b>test</b> <b>patterns</b> in minimum number of clock cycles. Second problem investigates the effectiveness of inserting observation points on the circuit lines that along with primary output lines distinguish a given set of faults. Three hardware based approaches are proposed that aim at inserting minimum observation points, and are compared with each other for different diagnostic resolutions...|$|R
40|$|The move to deep-sub-micron {{processing}} {{technology and}} the increasing complexity of a single chip makes testability a key problem in VLSI design and scan insertion a broadly accepted solution in the industry. However, scan-based designs pose their own challenges to external testing via an automated test equipment (ATE) because of the ATE 2 ̆ 7 s limitations of memory depth, test channels and clock frequency. In this context, built-in self-test (BIST) design technique, with on-chip test generation and response analysis, becomes a viable alternative and {{is the focus of}} our work. For scan-based BIST designs, the most important parameters that must be optimized are fault coverage, test application time, area overhead, and power dissipation. ^ Typically, an on-chip linear feedback shift register (LFSR) is employed for <b>pseudo-random</b> <b>test</b> <b>pattern</b> generation in BIST design. Although, with the LFSR it becomes possible to test the circuit with a large number of pseudo-random patterns, testing for random-pattern resistant faults can still take unacceptably long time. This dissertation presents a pseudo-random test compaction method to optimize test application time. Experimental results show that our method outperforms others in test length. ^ Excessive amount of power is wasted during scan shifting in scan-based circuits. The proposed double-tree scan (DTS) architecture saves power by activating only Ologf+ 2 3 scan flip-flops at each clock cycle, compared with O(f) for the traditional scan, where f is the total number of scan flip flops. The proposed DTS architecture with distributed control overcomes the clock-skew and routing problems associated with the centralized control. ^ Usually, many pseudo-random test patterns generated by the LFSR may not contribute to fault coverage. Bypassing the LFSR states that produce these useless patterns can save up to 99...|$|E
40|$|Programmable mixed–mode BIST schemes combine <b>pseudo–random</b> <b>pattern</b> <b>testing</b> and {{deterministic}} test. This paper {{presents a}} synthesis technique for a mixed–mode BIST scheme which {{is able to}} exploit the regularities of a deterministic <b>test</b> <b>pattern</b> set for minimizing the hardware overhead and memory requirements. The scheme saves more than 50 % hardware costs compared with the best schemes known so far while complete programmability is still preserved...|$|R
40|$|We propose an {{improved}} BIST architecture which supports on-chip comparison of signatures at no {{significant increase in}} area. The BILBO-based BIST architecture, used popularly in application-specific integrated circuits, suffers from two disadvantages. First, the initialization of the BILBO registers and the scanning out of the signatures are slow processes due to the sequential nature of these steps. Second, the test application time in a BILBO-based architecture {{does not depend on}} whether or not the circuit is faulty. It is typical to organize the testing procedure into one or more test sessions. In each test session, one or more functional modules are <b>tested</b> by applying <b>pseudo-random</b> <b>test</b> <b>patterns.</b> The responses of the functional modules are compressed into signatures which are captured into signature registers. Since the signature of the circuit is compared outside the chip, the test application must continue irrespective of whether or not a fault was detected {{in the middle of the}} testing process. More seriously, aliasing errors may result when a single signature is used and testing continues in spite of one or more faulty responses. The test architecture proposed in this paper is able to improve the above situation by performing on-chip signature check. Thus, we allow testing and signature comparison to occur concurrently. We show that such a test method can give rise to significant reduction in test application time...|$|R
40|$|A novel <b>test</b> <b>pattern</b> {{generator}} for Built-In Self-Test {{technique of}} testable combinational circuits is proposed. The presented solution {{is based on}} a hybrid <b>testing</b> reconfigurable <b>test</b> <b>pattern</b> generator, that uses a shift register reacted through two different networks: it firstly reproduces a <b>pseudo-random</b> sequence of <b>test</b> <b>patterns</b> using a linear feedback combinational network and then reproduces deterministic precalculated <b>test</b> <b>patterns,</b> useful to detect hard faults, using a non-linear feedback combinational network. For the proposed approach, a synthesis tool (based on state space heuristic search and the "selfish gene" genetic algorithm) able to determine <b>test</b> <b>pattern</b> generator for a given test set, is also proposed. Experiments to evaluate synthesis time and the test sequence length are conducted on well-known ISCAS' 85 circuits. Comparison with previous techniques shows the effectiveness of proposed solution...|$|R
40|$|This paper {{presents}} an innovative method for inserting test {{points in the}} circuit-under-test to obtain complete fault coverage for a specified set of <b>test</b> <b>patterns.</b> Rather than using probabilistic techniques for test point placement, a path tracing procedure is used to place both control and observation points. Rather than adding extra scan elements to drive the control points, {{a few of the}} existing primary inputs to the circuit are ANDed together to form signals that drive the control points. By selecting which patterns the control point is activated for, the effectiveness of each control point is maximized. A comparison is made with the best previously published results for other test point insertion methods, and it is shown that the proposed method requires fewer test points and less overhead to achieve the same or better fault coverage. 1. Introduction <b>Pseudo-random</b> <b>pattern</b> <b>testing</b> is an attractive technique for built-in self-test (BIST) because very little hardware is required f [...] ...|$|R
40|$|The {{topic of}} this thesis {{is related to}} testing of very large scale {{integration}} circuits. The thesis presents the idea of optimizing mixed-mode built-in self-test (BIST) scheme. Mixed-mode BIST consists of two phases. The first phase is <b>pseudo-random</b> <b>testing</b> or partial pseudo-exhaustive testing (P-PET). For the faults not detected by the first phase, deterministic <b>test</b> <b>patterns</b> are generated and applied in the second phase. Hence, the defect coverage of the first phase influences the number of patterns to be generated and stored. The advantages of P-PET in comparison with usual <b>pseudo-random</b> <b>test</b> are in obtaining higher fault coverage and {{reducing the number of}} deterministic patterns in the second phase of mixed-mode BIST. Test pattern generation for P-PET is achieved by selecting characteristic polynomials of multiple-polynomial linear feedback shift register (MP-LFSR). In this thesis, the mixed-mode BIST scheme with P-PET in the first phase is further improved in terms of the fault coverage of the first phase. This is achieved by optimization of polynomial selection of P-PET. In usual mixed-mode BIST, the set of undetected by the first phase faults is handled in the second phase by generating deterministic <b>test</b> <b>patterns</b> for them. The method in the thesis is based on consideration of these patterns during polynomial selection. In other words, we are embedding deterministic <b>test</b> <b>patterns</b> in P-PET. In order to solve the problem, the algorithm for the selection of characteristic polynomials covering the pre-generated patterns is developed. The advantages of the proposed approach in terms of the defect coverage and the number of faults left after the first phase are presented using contemporary industrial circuits. A comparison with usual <b>pseudo-random</b> <b>testing</b> is also performed. The results prove the benefits of P-PET with embedded <b>test</b> <b>patterns</b> in terms of the fault coverage, while maintaining comparable test length and time...|$|R
40|$|When using Built-In Self Test (BIST) {{for testing}} VLSI circuits, {{a major concern}} is the {{generation}} of proper <b>test</b> <b>patterns</b> that detect the faults of interest. Usually a linear feedback shift register (LFSR) is used to generate <b>test</b> <b>patterns.</b> We first analyze the probability that an arbitrary <b>pseudo-random</b> <b>test</b> sequence of short length detects all faults. The term short is relative to the probability of detecting the fault with the fewest <b>test</b> <b>patterns.</b> We then show how to guide the search for an initial state (seed) for a LFSR with a given primitive feedback polynomial {{so that all the}} faults of interest are detected by a minimum length test sequence. Our algorithm is based on finding the location of <b>test</b> <b>patterns</b> in the sequence generated by this LFSR. This is accomplished using the theory of discrete logarithms. We then select the shortest subsequence that includes <b>test</b> <b>patterns</b> for all the faults of interest, hence resulting in 100 % fault coverage...|$|R
40|$|International audienceThe massive {{integration}} of several functionalities leads to increased test times/test data volume. Additionally, test content for more advanced fault models increase the tester memory requirements. On the positive side, {{the presence of}} many cores in a system provides the opportunity of core testing each other. In this paper we evaluate the opportunity to use AES crypto- processors as <b>test</b> <b>pattern</b> generators. Several experiences are conducted on LFSRs and AES cores in order to compare their ability to generate <b>pseudo-random</b> <b>test</b> sequences...|$|R
40|$|In {{simulation}} based design verification, deterministic or <b>pseudo-random</b> <b>tests</b> {{are used}} to check functional correctness of a design. In this paper we present a technique generating tests by specifying the don’t care inputs in the functional specifications so as to improve their coverage of both design errors and manufacturing faults. The don’t cares are chosen to maximize sensitization of signals in the circuit. The tests generated in this way require {{only a fraction of}} pseudo-exhaustive <b>test</b> <b>patterns</b> to achieve a high multiplicity of fault coverage...|$|R
40|$|The BIST {{approach}} {{discussed in}} this paper {{is based on the}} modification of pre-existing registers to perform <b>test</b> <b>pattern</b> generation (TPG). We present a new TPG structure particularly well-suited for datapath like cores. Generated test sequences are short and lead to high fault coverage for the most common modules in a datapath. We compare the proposed TPG with related structures. 1. Introduction BIST advantages are well known, it allows production testing as well as maintenance testing, it doesn't need expensive Automatic Test Equipment and allows at speed testing. Per contra, BIST involves additional cost in terms of extra hardware for <b>test</b> <b>pattern</b> generation (TPG) and signature analysis (SA). Consequently, a BIST implementation is evaluated in terms of area overhead, achievable faultcoverage and test length resulting from the generated test sequence. These characteristics depend on the targeted <b>test</b> approach. In <b>pseudo-random</b> <b>testing</b> for example, test sequences can be easily genera [...] ...|$|R
40|$|Abstract—Pattern {{generation}} for embedded testing often con-sists of a phase generating random {{patterns and}} a second phase where deterministic patterns are applied. This paper presents a method which optimizes the first phase significantly and increases the defect coverage, while {{reducing the number of}} deterministic patterns required in the second phase. The method is based on the concept of pseudo-exhaustive testing (PET), which was proposed as a method for fault model independent testing with high defect coverage. As its test length can grow exponentially with the circuit size, an application to larger circuits is usually impractical. In this paper, partial pseudo-exhaustive testing (P-PET) is presented as a synthesis technique for multiple polynomial feedback shift registers. It scales with actual technology and is comparable with the usual <b>pseudo-random</b> (PR) <b>pattern</b> <b>testing</b> regarding test costs and test application time. The advantages with respect to the defect coverage, N-detectability for stuck-at faults and the reduction of deterministic test lengths are shown using state-of-the art industrial circuits...|$|R
25|$|LFSRs {{are used}} in circuit testing for test-pattern {{generation}} (for exhaustive <b>testing,</b> <b>pseudo-random</b> <b>testing</b> or pseudo-exhaustive testing) and for signature analysis.|$|R
40|$|The <b>test</b> <b>pattern</b> {{generator}} produces <b>test</b> vectors {{that are}} applied to the <b>tested</b> circuit during <b>pseudo-random</b> <b>testing</b> of combinational circuits. The nature of the generator thus directly influences the fault coverage achieved. In this paper we discuss {{the influence of the}} type of pseudo-random pattern generator on stuck-at fault coverage. Linear feedback shift registers (LFSRs) are mostly used as <b>test</b> <b>pattern</b> generators, and the generating polynomial is primitive to ensure the maximum period. We have shown that {{it is not necessary to}} use primitive polynomials, and moreover that their using is even undesirable in most cases. This fact is documented by statistical graphs. The necessity of the proper choice of a generating polynomial and an LFSR seed is shown here, by designing a mixed-mode BIST for the ISCAS benchmarks. An alternative to LFSRs are cellular automata (CA). We study the effectiveness of CA when used as pseudo-random pattern generators. The observations are documented by statistical results. ...|$|R
40|$|We {{propose a}} new scan BIST method for {{transition}} faults. The method uses a Markov source for <b>test</b> <b>pattern</b> generation. We develop this method for skewed-load testing {{as well as}} for broadside testing. In the design of a Markov source for transition faults, we first use statistics of deterministic tests for stuck-at faults. Then, we propose a new method for identifying subsets of stuck-at tests whose statistics are useful in detecting hard-to-detect transition faults. Finally, by using statistics of tests for transition faults, we detect all the remaining detectable transition faults. The method reported achieves complete coverage of detectable transition faults in benchmark circuits using a limited number of <b>pseudo-random</b> <b>tests.</b> 1...|$|R
40|$|International audienceThis paper {{describes}} a generic BIST strategy for devices implementing symmetric encryption algorithms. Taking {{advantage of the}} inner iterative structures of crypto-cores, test facilities are easily set-up for circular self-test of the crypto-cores, built-in <b>pseudo-random</b> <b>test</b> generation and response analysis for other cores in the host device. Main advantages of the proposed test implementation are an architecture with no visible scan chain, 100 % fault coverage on crypto-cores with negligible area overhead, availability of <b>pseudo-random</b> <b>test</b> sources and very low aliasing response compaction for other cores...|$|R
40|$|This paper studies <b>pseudo-random</b> <b>pattern</b> <b>testing</b> of {{bridging}} faults. Although bridging faults {{are generally}} more random pattern testable than stuck-at faults, examples are shown to illustrate that some bridging faults can be much less random pattern testable than stuck-at faults. A fast method for identifying these random-pattern-resistant bridging faults is described. It is shown that state-of-the-art test point insertion techniques, {{which are based on}} the stuck-at fault model, are inadequate. Data is presented which indicates that even after inserting test points that result in 100 % single stuck-at fault coverage, many bridging faults are still not detected. A test point insertion procedure that targets both single stuck-at faults and non-feedback bridging faults is presented. It is shown that by considering both types of faults when selecting the location for test points, higher fault coverage can be obtained with little or no increase in overhead. Thus, the test point insertion procedure described here is a lowcost way {{to improve the quality of}} built-in self-test. While this paper considers only non-feedback bridging faults, the techniques that are described can be applied to feedback bridging faults in a straightforward manner...|$|R
40|$|We {{propose a}} new {{built-in}} self-test (BIST) method {{based on a}} combination of a <b>pseudo-random</b> <b>test</b> method with a deterministic test. This enables us to reach a high fault coverage in a short test time and with a low area overhead. The main feature of the method is that there are no memory elements to store the deterministic test patterns; the <b>test</b> <b>patterns</b> are being produced by a transformation of the non-testing pseudo-random patterns. This transformation is being done by a purely combinational block, while we try to keep this block as small as possible. Our method can be apprehended as a generalization of a bit-fixing method. We synthesize the transformation logic by a slightly modified column-matching algorithm proposed before...|$|R
25|$|Complete LFSR are {{commonly}} used as pattern generators for exhaustive testing, since they cover all possible inputs for an n-input circuit. Maximal-length LFSRs and weighted LFSRs are widely used as pseudo-random test-pattern generators for <b>pseudo-random</b> <b>test</b> applications.|$|R
40|$|Low cost Integrated Circuit (IC) {{testing is}} now a burning issue in {{semiconductor}} technology. Conventional IC tester, Automatic Test Equipment (ATE), cannot cope with the today&# 8217;s continuously increasing complexities in IC technology. Deterministic algorithm, which is an idea of 1960 &# 8217;s, is adopted in the ATE. Recently <b>pseudo-random</b> <b>testing</b> approach of IC testing has been emerged as an economically viable alternative to the expensive deterministic testing approach. This study introduces {{the design of a}} System-on-a-chip (Soc) implementing <b>pseudo-random</b> <b>test</b> technique for low cost IC testing with reliable performance. It is capable of testing combinational circuits as well as sequential circuits with scan-port facilities efficiently. It can also be used for testing Printed Circuit Board (PCB) interconnection faults...|$|R
40|$|International audienceThe {{combination}} of higher quality requirements and sensitivity of high performance circuits to delay defects {{has led to}} an increasing emphasis on delay testing of VLSI circuits. As delay testing using external testers requires expensive ATE, built-in self test (BIST) is an alternative technique that can significantly reduce the test cost. The generation of <b>test</b> <b>patterns</b> in this case is usually pseudo-random (produced from an LFSR), and it has been proven that Single Input Change (SIC) test sequences are more effective than classical Multiple Input Change (MIC) test sequences when a high robust delay fault coverage is targeted. In this paper, we first question the use of a pseudo-random generation to produce effective delay test pairs. We demonstrate that using truly random test pairs (produced from a software generation) to test path delay faults in a given circuit produces higher delay fault coverage than that obtained with <b>pseudo-random</b> <b>test</b> pairs obtained from a classical primitive LFSR. Next, we show that the same conclusion can be drawn when stuck-at or bridging fault coverage is targeted rather delay fault coverage. A modified hardware TPG structure allowing the generation of truly random <b>test</b> <b>patterns</b> is introduced {{at the end of the}} paper...|$|R
40|$|Random {{testing is}} a well known concept that {{requires}} that each test is selected randomly regardless of the test previously applied. In actual practice it {{takes the form of}} <b>pseudo-random</b> <b>testing,</b> where each <b>test</b> <b>pattern</b> is a shifted version of the previous one with one new bit added. This paper introduces the concept of antirandom testing. In this testing strategy each test applied is chosen such that its total distance from all previous tests is maximum. This spans the test vector space to the maximum extent possible for a given number of vectors. This strategy results in a higher fault coverage when the number of vectors that are applied is limited. Algorithm for generating antirandom tests is presented. A Reed-Solomon code based test set is also introduced that results in test vectors with antirandom characteristics. Results comparing the different test strategies on ISCAS benchmarks show these strategies to be very effective when a high fault coverage needs to be achieved with a lim [...] ...|$|R
40|$|Reseeding is used {{to improve}} fault {{coverage}} of <b>pseudo-random</b> <b>testing.</b> The seed corresponds to the initial state of the PRPG before filling the scan chain. In this paper, we present a technique for encoding a given seed {{by the number of}} clock cycles that the PRPG needs to run to reach it. This encoding requires many fewer bits than the bits of the seed itself. The cost is the time to reach the intended seed. We reduce this cost using the degrees of freedom (due to don’t cares in <b>test</b> <b>patterns)</b> in solving the equations for the seeds. We show results for implementing our technique completely in on-chip hardware and for applying it from a tester. Simulations show that with low hardware overhead, the technique provides 100 % single-stuck fault coverage. Also, when compared with conventional reseeding from an external tester or on-chip ROM, the technique reduces seed storage by up to 85 %. We show how to apply the technique for both LFSRs and CA...|$|R
40|$|Abstract—A {{testable}} EXOR-Sum-of-Products (ESOP) circuit realization and a simple, universal {{test set}} which detects all single stuck-at faults {{in the internal}} lines and the primary inputs/outputs of the realization are given. Since ESOP is the most general form of AND-EXOR representations, our realization and test set are more versatile than those described by other researchers for the restricted GRM, FPRM, and PPRM forms of AND-EXOR circuits. Our circuit realization requires only two extra inputs for controllability and one extra output for observability. The cardinality of our test set for an input circuit is (+ 6). For Built-in Self Test (BIST) applications, we show that our test set can be generated internally as easily as a pseudo-random pattern, and that it provides 100 % single stuck-at fault coverage. In addition, our test set requires a much shorter test cycle than a comparable pseudo-exhaustive or <b>pseudo-random</b> <b>test</b> set. Index Terms—Universal test set, AND-EXOR realizations, Reed-Muller expressions, single stuck-at fault model, easily testable combinational networks, Design for Testing (DFT), self testable circuits, Built-in Self Test (BIST), <b>test</b> <b>pattern</b> generation. ...|$|R
40|$|This paper {{describes}} the verification of {{two versions of}} a bridge between two on-chip buses. The verification was performed just as the Infineon Technologies Design Centre in Bristol was introducing <b>pseudo-random</b> <b>testing</b> (using Specman) and property checking (using GateProp) into their verification flows and thus provides {{a good opportunity to}} compare these two techniques with the existing strategy of directed testing using VHDL bus functional models...|$|R
