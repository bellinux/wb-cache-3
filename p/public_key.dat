7275|2367|Public
5|$|Examples of extortionate {{ransomware}} became {{prominent in}} May 2005. By mid-2006, Trojans such as Gpcode, TROJ.RANSOM.A, Archiveus, Krotten, Cryzip, and MayArchive began utilizing more sophisticated RSA encryption schemes, with ever-increasing key-sizes. Gpcode.AG, which was detected in June 2006, was encrypted with a 660-bit RSA <b>public</b> <b>key.</b> In June 2008, a variant known as Gpcode.AK was detected. Using a 1024-bit RSA key, {{it was believed}} {{large enough to be}} computationally infeasible to break without a concerted distributed effort.|$|E
25|$|The client {{responds}} with a ClientKeyExchange message, which may contain a PreMasterSecret, <b>public</b> <b>key,</b> or nothing. (Again, this {{depends on the}} selected cipher.) This PreMasterSecret is encrypted using the <b>public</b> <b>key</b> of the server certificate.|$|E
25|$|In September 2014, {{a variant}} of Daniel Bleichenbacher’s PKCS#1 v1.5 RSA Signature Forgery {{vulnerability}} was announced by Intel Security Advanced Threat Research. This attack, dubbed BERserk, {{is a result of}} incomplete ASN.1 length decoding of <b>public</b> <b>key</b> signatures in some SSL implementations, and allows a man-in-the-middle attack by forging a <b>public</b> <b>key</b> signature.|$|E
40|$|Abstract — When {{asymmetric}} cryptography techniques {{are used in}} wireless networks, the <b>public</b> <b>keys</b> of the nodes need to be widely available and signed by a Certificate Authority (CA). However, {{the existence of a}} single CA in large wireless networks such as mobile ad hoc networks and wireless sensor networks can lead the hotspot problem and become a security weakness. In this work, we propose a distributed technique to cache the <b>public</b> <b>keys</b> on regular nodes. Due to the limited memory size that each node is allowed to dedicate for key caching, only some keys can be cached. In our proposed technique, each node caches the <b>public</b> <b>keys</b> of a mix of local and remote nodes. Access to the <b>public</b> <b>keys</b> of other nodes is possible based on a chain of trust. Multiple copies of <b>public</b> <b>keys</b> from different chains of trusted nodes provide fault tolerance. We explain our technique in detail and investigate its salient features in this work. An interesting observation is the need to balance caching <b>public</b> <b>keys</b> of local nodes and remote nodes. I...|$|R
40|$|In this paper, {{we present}} the novel concept of {{fractional}} <b>public</b> <b>keys</b> and an efficient zero-round multi-party Diffie-Hellman key agreement scheme {{that is based}} on fractional <b>public</b> <b>keys.</b> Shared group keys are computed highly efficiently by using the fractional <b>public</b> <b>keys</b> of multiple participants as exponents. The scheme provides therefore an efficient and elegant way of multi-party key agreement without key establishment data transmissions. The presented cryptographic scheme is collusion resistant to any number of users...|$|R
40|$|Users {{regularly}} {{experience a}} crisis of confidence on the Internet. Is that email or instant message truly originating from the claimed individual? Such doubts are commonly resolved through a leap of faith, expressing the desperation and helplessness of users. To establish a secure basis for online communication, we propose SafeSlinger, a system leveraging the proliferation of smartphones to enable people to securely and privately exchange their <b>public</b> <b>keys.</b> Through the exchanged authentic <b>public</b> <b>keys,</b> Safe- Slinger establishes a secure channel offering secrecy and authenticity, which we use to support secure messaging and file exchange. SafeSlinger also provides an API for importing applications’ <b>public</b> <b>keys</b> into a user’s contact information. By slinging entire contact entries to others, we propose secure introductions, as the contact entry includes the SafeSlinger <b>public</b> <b>keys</b> {{as well as other}} <b>public</b> <b>keys</b> that were imported. We present the design and implementation of SafeSlinger for Android and iOS, which is available from the respective app stores. An overview video of SafeSlinger is available at: [URL]...|$|R
25|$|A client {{that does}} key pinning adds an extra step beyond the normal X.509 {{certificate}} validation: After obtaining the server's certificate {{in the standard}} way, the client checks the public key(s) in the server's certificate chain against a set of (hashes of) public keys for the server name. Typically the <b>public</b> <b>key</b> hashes are bundled with the application. For example, Google Chrome includes <b>public</b> <b>key</b> hashes for the *.google.com certificate that detected fraudulent certificates in 2011. (Chromium does not enforce the hardcoded key pins.) Since then, Mozilla has introduced <b>public</b> <b>key</b> pinning to its Firefox browser.|$|E
25|$|<b>Public</b> <b>key</b> {{authentication}} (usually implemented with a HTTPS / SSL client certificate) using {{a client}} certificate.|$|E
25|$|The Simple Mail Transfer Protocol (SMTP) {{can also}} be {{protected}} by TLS. These applications use <b>public</b> <b>key</b> certificates to verify the identity of endpoints.|$|E
5000|$|<b>Public</b> static <b>key</b> {{agreement}} key: <b>Public</b> static <b>key</b> agreement <b>keys</b> are the <b>public</b> <b>keys</b> of {{asymmetric key}} pairs {{that are used}} to establish keys (e.g., key wrapping keys, data encryption keys, or MAC keys) and, optionally, other keying material (e.g., Initialization Vectors).|$|R
25|$|DNSChain {{relies on}} the {{security}} that blockchains provide to distribute <b>public</b> <b>keys.</b> It uses one pin to secure the connection to the DNSChain server itself, after which all other <b>public</b> <b>keys</b> (that are stored in a block chain) become accessible over a secure channel.|$|R
50|$|A social VPN uses online social {{networks}} to distribute <b>public</b> <b>keys</b> and advertise node address to friends. The acquired <b>public</b> <b>keys</b> {{are used to}} establish encrypted communication between two endpoints. Symmetric keys are exchanged {{during the process of}} establishing an end-to-end link by two social VPN peers.|$|R
25|$|In public-key cryptosystems, the <b>public</b> <b>key</b> may be freely distributed, {{while its}} paired private key must remain secret. In a public-key {{encryption}} system, the <b>public</b> <b>key</b> {{is used for}} encryption, while the private or secret key is used for decryption. While Diffie and Hellman could not find such a system, they showed that public-key cryptography was indeed possible by presenting the Diffie–Hellman key exchange protocol, a solution that is now widely used in secure communications to allow two parties to secretly agree on a shared encryption key.|$|E
25|$|Both when {{encrypting}} {{messages and}} when verifying signatures, {{it is critical}} that the <b>public</b> <b>key</b> used to send messages to someone or some entity actually does 'belong' to the intended recipient. Simply downloading a <b>public</b> <b>key</b> from somewhere is not an overwhelming assurance of that association; deliberate (or accidental) impersonation is possible. From its first version, PGP has always included provisions for distributing user's public keys in an 'identity certificate', which is also constructed cryptographically so that any tampering (or accidental garble) is readily detectable. However, merely making a certificate which is impossible to modify without being detected is insufficient; this can prevent corruption only after the certificate has been created, not before. Users must also ensure by some means that the <b>public</b> <b>key</b> in a certificate actually does belong to the person or entity claiming it. From its first release, PGP products have included an internal certificate 'vetting scheme' to assist with this, a trust model which has been called a web of trust. A given <b>public</b> <b>key</b> (or more specifically, information binding a user name to a key) may be digitally signed by a third party user to attest to the association between someone (actually a user name) and the key. There are several levels of confidence which can be included in such signatures. Although many programs read and write this information, few (if any) include this level of certification when calculating whether to trust a key.|$|E
25|$|If EFS is {{configured}} to use keys {{issued by}} a <b>Public</b> <b>Key</b> Infrastructure and the PKI is configured to enable Key Archival and Recovery, encrypted files can be recovered by recovering the private key first.|$|E
50|$|On 1 March 2005, Arjen Lenstra, Xiaoyun Wang, and Benne de Weger of Eindhoven University of Technology {{demonstrated}} {{construction of}} two X.509 certificates with different <b>public</b> <b>keys</b> {{and the same}} MD5 hash, a demonstrably practical hash collision. The construction included private <b>keys</b> for both <b>public</b> <b>keys.</b>|$|R
50|$|<b>Public</b> ephemeral <b>key</b> {{agreement}} key: <b>Public</b> ephemeral <b>key</b> agreement <b>keys</b> are the <b>public</b> <b>keys</b> of {{asymmetric key}} pairs {{that are used}} in a single key establishment transaction to establish one or more keys (e.g., key wrapping keys, data encryption keys, or MAC keys) and, optionally, other keying material (e.g., Initialization Vectors).|$|R
50|$|Step 2: Import remailer's <b>public</b> <b>keys</b> into PGP or GPG.|$|R
25|$|<b>Public</b> <b>key</b> {{operations}} (e.g., RSA) {{are relatively}} expensive {{in terms of}} computational power. TLS provides a secure shortcut in the handshake mechanism to avoid these operations: resumed sessions. Resumed sessions are implemented using session IDs or session tickets.|$|E
25|$|Various {{physical}} systems, such as crystals and {{the hydrogen}} atom, may be modelled by symmetry groups. Thus group {{theory and the}} closely related representation theory have many important applications in physics, chemistry, and materials science. Group theory is also central to <b>public</b> <b>key</b> cryptography.|$|E
25|$|In the Microsoft Windows {{family of}} {{operating}} systems EFS enables this measure, although on NTFS drives only, and does so {{using a combination}} of <b>public</b> <b>key</b> cryptography and symmetric key cryptography to make decrypting the files extremely difficult without the correct key.|$|E
5000|$|... role of {{national}} certificate authority in infrastructure of <b>public</b> <b>keys,</b> ...|$|R
40|$|Our {{research}} {{seeks to}} understand the current usability situation of email encryption software, particularly PGP 9 in comparison to previous studies of PGP 5. We designed a pilot study to find current problems in the following areas: create a <b>key</b> pair, get <b>public</b> <b>keys,</b> verify <b>public</b> <b>keys,</b> encrypt an email, sign an email, decrypt an email, verify a digital signature, and save a backup of <b>public</b> and private <b>keys.</b> 1...|$|R
40|$|Abstract. A {{party may}} choose to reuse ephemeral <b>public</b> <b>keys</b> in a Diffie-Hellman key {{agreement}} protocol {{in order to reduce}} its computational workload or to mitigate against denial-of-service attacks. In this note we highlight the danger of reusing ephemeral keys if domain parameters are not appropriately selected or if <b>public</b> <b>keys</b> are not appropriately validated. 1...|$|R
25|$|In cryptography, modular {{arithmetic}} directly underpins <b>public</b> <b>key</b> {{systems such}} as RSA and Diffie–Hellman, and provides finite fields which underlie elliptic curves, and is used {{in a variety of}} symmetric key algorithms including Advanced Encryption Standard (AES), International Data Encryption Algorithm (IDEA), and RC4. RSA and Diffie–Hellman use modular exponentiation.|$|E
25|$|The client sends a CertificateVerify message, {{which is}} a {{signature}} over the previous handshake messages using the client's certificate's private key. This signature can be verified by using the client's certificate's <b>public</b> <b>key.</b> This lets the server know that the client {{has access to the}} private key of the certificate and thus owns the certificate.|$|E
25|$|The web {{of trust}} {{mechanism}} has advantages over a centrally managed <b>public</b> <b>key</b> infrastructure scheme {{such as that}} used by S/MIME but has not been universally used. Users {{have been willing to}} accept certificates and check their validity manually or to simply accept them. No satisfactory solution has been found for the underlying problem.|$|E
5000|$|Anybody {{knowing the}} <b>public</b> <b>keys</b> for the {{encryption}} methods , can verify the shares.|$|R
5000|$|B {{now knows}} A wants to communicate, so B {{requests}} A's <b>public</b> <b>keys.</b>|$|R
5000|$|Publishing <b>public</b> <b>keys</b> for PGP {{authentication}} {{for being}} able to prove ones identity ...|$|R
25|$|The {{security}} of encryption that uses {{quantum key distribution}} relies on the foundations of quantum mechanics, in contrast to traditional <b>public</b> <b>key</b> cryptography, which relies on the computational difficulty of certain mathematical functions, and cannot provide any mathematical proof as to the actual complexity of reversing the one-way functions used. QKD has provable security based on information theory, and forward secrecy.|$|E
25|$|Besides {{the main}} purpose of the card as a {{validation}} tool and proof of citizenship other than the birth certificate, MyKad may also serve as a valid driver's license, an ATM card, an electronic purse, and a <b>public</b> <b>key,</b> among other applications, as part of the Malaysian Government Multipurpose Card (GMPC) initiative, if the bearer chooses to activate the functions.|$|E
25|$|Integer factorization, which underpins the {{security}} of <b>public</b> <b>key</b> cryptographic systems, {{is believed to be}} computationally infeasible with an ordinary computer for large integers if they are the product of few prime numbers (e.g., products of two 300-digit primes). By comparison, a quantum computer could efficiently solve this problem using Shor's algorithm to find its factors. This ability would allow a quantum computer to decrypt many of the cryptographic systems in use today, in the sense {{that there would be a}} polynomial time (in the number of digits of the integer) algorithm for solving the problem. In particular, most of the popular <b>public</b> <b>key</b> ciphers are based on the difficulty of factoring integers or the discrete logarithm problem, both of which can be solved by Shor's algorithm. In particular the RSA, Diffie-Hellman, and elliptic curve Diffie-Hellman algorithms could be broken. These are used to protect secure Web pages, encrypted email, and many other types of data. Breaking these would have significant ramifications for electronic privacy and security.|$|E
5000|$|Her {{level of}} {{security}} limits the number of identical <b>public</b> <b>keys</b> she can create ...|$|R
5000|$|SecSpider tracks DNSSEC deployment, {{monitors}} zones, {{and provides}} a list of observed <b>public</b> <b>keys.</b>|$|R
50|$|The {{application}} {{allows the}} user to store the <b>public</b> <b>keys</b> of other users with whom they interact, and to encrypt files such that only a specified user can decrypt them. In the same manner, if a file is received from another user and its <b>public</b> <b>keys</b> are saved, the receiver can verify the authenticity of that file and decrypt it if necessary.|$|R
