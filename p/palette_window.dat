7|16|Public
50|$|A {{inspector}} {{window is}} a type of <b>palette</b> <b>window.</b>|$|E
50|$|The {{graphical}} {{control element}} <b>palette</b> <b>window,</b> {{also known as}} utility window or floating palette, floats {{on top of all}} regular windows and offers ready access tools, commands or information for the current application.|$|E
5000|$|<b>Palette</b> <b>window</b> - {{also known}} as [...] "Utility window" [...] - a {{graphical}} control element which floats {{on top of all}} regular windows and offers ready access tools, commands or information for the current application ...|$|E
5000|$|... #Caption: The default Paint.NET {{interface}} {{makes use}} of <b>palette</b> <b>windows.</b>|$|R
50|$|The {{opposite}} of modal is modeless. Modeless windows don't block the main window, so the user can switch their focus between them, treating them as <b>palette</b> <b>windows.</b>|$|R
50|$|Applications use <b>palette</b> <b>windows</b> {{to prevent}} toolbar clutter. While {{toolbars}} and ribbons are typically horizontal, locked to window or screen borders, and of fixed length; palettes are usually scaled {{to fit their}} contents, movable, and vertical, consuming less of a computer's commonly landscape oriented screen space, and work better with multiple monitors.|$|R
50|$|Some {{palettes}} {{are standard}} and {{provided by the}} OS, reappearing in many applications, while other palettes are unique to each individual application. An example of a common application-specific <b>palette</b> <b>window</b> is an inspector window. On the Macintosh, palette windows are only visible while their parent application has focus. In a multiple document interface program, palettes are sometimes independent from the parent window.|$|E
5000|$|A tool palette, a {{rectangular}} area, called a <b>palette</b> <b>window,</b> {{of the application}} screen with buttons, icons or another GUI controls available for quick command or symbol access; if the user is able to place it anywhere by moving it through a mouse or similar pointing device, it {{is known as a}} floating palette. A palette for choosing colors can be also a floating palette.|$|E
5000|$|Classic Mac OS did not {{display a}} taskbar onscreen by default. Application {{switching}} prior to Mac OS 8.5 {{was done by}} clicking on an application's window or via a pull-down menu at the right end of the menu bar. Prior to version 8.5 the menu's title was the icon of the foreground application. Version 8.5 introduced the ability to optionally also display the application name and to [...] "tear off" [...] the menu by dragging the title with the mouse. The torn off menu was displayed as a palette. The <b>palette</b> <b>window</b> could be configured using AppleScript to appear much like a taskbar, with no title bar and fixed to one edge of the screen. No control panel was provided by Apple to access this functionality, but third-party developers quickly wrote applications that allowed users unfamiliar with AppleScript to customize their application palettes. Third party taskbars such as DragThing were a popular category of shareware on these systems.|$|E
5000|$|The NeXTstep OS for the NeXT {{machines}} would {{display a}} [...] "menu palette", by default {{at the top}} left of the screen. Clicking on the entries in the menu list would display submenus of the commands in the menu. The contents of the menu change {{depending on whether the}} user is [...] "in" [...] the Workspace Manager or an application. The menus and the sub-menus can easily be torn off and moved around the screen as individual <b>palette</b> <b>windows.</b>|$|R
50|$|To ease this requirement, some editors allow editing of the markup in more {{visually}} organized modes {{than simple}} color highlighting, but in modes not considered WYSIWYG. These editors typically include {{the option of}} using <b>palette</b> <b>windows</b> or dialog boxes to edit the text-based parameters of selected objects. These palettes allow editing parameters in individual fields, or inserting new tags by filling out an onscreen form, and may include additional widgets to present and select options when editing parameters (such as previewing an image or text styles) or an outline editor to expand and collapse HTML objects and properties.|$|R
40|$|Alpha {{blending}} {{allows the}} simultaneous display of overlapping windows [...] -such as <b>palette</b> <b>windows</b> in visual workspaces. Although alpha blending {{has been used}} in some applications, such as games, it has not been widely adopted. One reason for the limited acceptance is that in many scenarios, alpha blending compromises the readability of content. We introduce a new blending mechanism called multiblending that uses a vector of blending weights, one for each class of features, rather than a single transparency value. Multiblending can in most cases be automatically optimized to preserve the most relevant features of both the palette and the background window. We present the results of a user study in which multiblended palettes provided higher recognizability of both the background and the palette than the best participating version of alpha blending...|$|R
40|$|Most handweavers design using drafts — {{threading}} sequences, treadling sequences, tieups, and {{the resulting}} drawdown. The warp and weft threads may be assigned colors, {{and the resulting}} pattern viewed in a “color drawdown”. This process assures a weavable pattern. There {{is no way to}} produce one that is not weavable. In the previous article in this series, we described how to ensure weavability in algorithmically constructed patterns and showed transformations on weavable patterns that preserve weavability [1]. We have experimented with a different approach to constructing weavable color patterns; one in which a designer constructs color patterns “from scratch ” but not in the context of drafting. Instead, the designer uses an interactive computer application that prevents anything that would result in an unweavable pattern. This article describes that application and gives examples of its use. The Application The application displays several windows: an interface window that provides controls for the user, a design window in which the user creates designs, and a <b>palette</b> <b>window</b> that displays the colors available for design...|$|E
25|$|The Graphics Device Interface is {{responsible}} for tasks such as drawing lines and curves, rendering fonts and handling <b>palettes.</b> The <b>Windows</b> NT 3.x series of releases had placed the GDI component in the user-mode Client/Server Runtime Subsystem, but this was moved into kernel mode with Windows NT 4.0 to improve graphics performance.|$|R
40|$|Gallery 9 proudly {{presents}} ROOM, {{a series}} of paintings produced by Jelle van den Berg in and about his studios between 2006 and 2012. In his introductory text about the series, Jelle talks about his space {{as though it were}} occupied by another person, Juan, in fact the artist’s creative alter ego whom he employs to stand back and ponder his personal ideas in the third person. “There’s not enough room so to speak…” he begins, “in Juan’s (one’s) room stuff piles up…” and despite his desire to part with things, he is unable to discard his vast collection of bric-a-brac and mementos of a life of collecting the subjects of still life. And so what better to do about the situation than to set about painting every object into a still life, and at least allow their presence to be (somewhat) immortalised as it was briefly in the space. The ROOM series of oil paintings are what evolved from arranging the artists’ studios and translating them, via water colour, eventually into paint. The subjects are ordinary tables, <b>palettes,</b> <b>windows</b> and books but each painting represents a profound connection made by the artist with each object’s mystery and ascribed personality...|$|R
50|$|The {{software}} {{contains an}} integrated graphical user interface. Touch screen operations are supported for Windows 7 and 8 devices. Construction of molecules in 3D is facilitated with molecule builders (included are organic, inorganic, peptide, nucleotide, and substituent builders). 2D construction is supported for organic molecules with a 2D sketch <b>palette.</b> The <b>Windows</b> version interface can access ChemDraw; which versions 9.0 or later {{may also be}} used for molecule building in 2D. A calculations dialogue is used for specification of task and computational method. Data from calculations are displayed in dialogues, or as text output. Additional data analysis, including linear regression, is possible from an internal spreadsheet.|$|R
40|$|Allow user {{to specify}} {{interface}} language during first use. • Enlarge Controls option in General System Preferences {{for use with}} small touch screen tablets. • Job Manager’s Schedule window has been redesigned to provide more intuitive controls, and provides the option to perform a job once {{at a particular time}} in addition to repeat scheduling. • Project File Recovery provides the option to save the original file with a backup name and use the original name for the output. • Uniform Perceptual Contrast color palettes for raster objects have been added to provide uniform discrimination of local features regardless of the local brightness. • The <b>Palette</b> selection <b>window</b> provides a preview of each palette. • Color palettes can be imported from a text or CSV file...|$|R
50|$|The 640×480 16-color and 320×200 256-color modes had fully redefinable palettes, {{with each}} entry {{selectable}} from within an 18-bit (262,144-color) RGB table, although the high resolution mode is most commonly familiar from its use with a fixed <b>palette</b> under Microsoft <b>Windows.</b> The other color modes defaulted to standard EGA or CGA compatible palettes (including {{the ability for}} programs to redefine the 16-color EGA palette from a master 64-color table), but could still be redefined if desired using VGA-specific programming.|$|R
50|$|To {{build an}} interface, a {{developer}} simply drags interface {{objects from the}} <b>palette</b> onto a <b>window</b> or menu. Actions (messages) which the objects can emit are connected to targets in the application's code and outlets (pointers) declared in the application's code are connected to specific objects. In this way all initialization is done before runtime, both improving performance and streamlining the development process. When Interface Builder was a standalone application, interface designers could ship nib files to developers, who would then drop them into their projects.|$|R
40|$|Transparency {{can be used}} to {{increase}} the visibility of a user’s workspace in situations where the space is obscured by floating <b>windows</b> and tool <b>palettes.</b> Dynamic transparency takes this approach further by making components more transparent when the user’s cursor is far away. However, dynamic transparency may make <b>palettes</b> and floating <b>windows</b> more difficult to target. We carried out a study to test the effects of different types of dynamic transparency on targeting performance. We found that although targeting time does increase as targets become more transparent, the increases are small – often less than ten percent. Our study suggests reasonable maximum, minimum, and default transparency levels for designers of dynamic transparency schemes. Key words: interface transparency, dynamic transparency, tool palettes, visual workspaces [...] ...|$|R
40|$|The Xerox Star, {{the first}} {{personal}} {{computer with a}} graphical user interface, was developed about twenty-five years ago. Seminal work on graphical interfaces even {{dates back to the}} 1960 s. However, current techniques used for window management are merely variations of methods designed in the 1980 s with very little improvements. Users are more and more confronted {{to the fact that the}} direct manipulation paradigm and the desktop metaphor do not scale well to the increased number of <b>windows,</b> <b>palettes</b> and icons that we need to manage today. This document starts with a retrospective on graphical user interfaces and the concept of window manager. It then describes state-of-the-art window interfaces as well as innovative techniques that have been recently proposed by the research community. Finally, it ends with some suggestions for new research directions on window management...|$|R
40|$|Using NEXT hardware, and NEXTStep {{operating}} system I {{have created a}} user-friendly system for digitally processing audio signals. Geoff Noer and Ye He began this process by creating a visual user interface for the Acoustics Workstation program, similar to the Labview environment. The Acoustics Workstation application allows the user to drag icons, representing specific functions, from a <b>palette</b> into a <b>window</b> and connect them together with 'wires,' which represent data paths. By encapsulating functionality into separate tool bundles, signal processing modules could be developed independently. Each tool is not loaded by the main application until it is needed by the user, greatly reducing application startup time. I have developed tools to record sound from a microphone, play sounds through a speaker, and load and save sound files to and from disk. In addition to these 'utility' type tools, I have developed low-pass, high-pass, band-pass and band-stop digital, butterworth, infinite impulse response filters of up to tenth order. Since tools can be developed independently, the development of tools, {{in addition to those}} already developed by me, is greatly simplified...|$|R

