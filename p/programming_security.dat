21|2587|Public
2500|$|In August 2010, the Ninth Circuit {{stated in}} its {{decision}} that “EchoStar {{did not succeed}} 'on any significant issue' or 'achieve any of the benefit it sought in bringing suit' under the Communications Act.” The Ninth Circuit awarded NDS US$18 million and concluded that “There {{is no question that}} NDS successfully defended against all of EchoStar’s claims based on or related to its theory that NDS was responsible for the compromise of EchoStar’s satellite television <b>programming</b> <b>security</b> system.” ...|$|E
50|$|Also, {{the forum}} offered {{resources}} and courses to pen-testing, programming {{and a lot}} of IT subjects, from beginner to advanced.A lot of users was registered to learn about <b>programming,</b> <b>security,</b> software engineering.|$|E
5000|$|In August 2010, the Ninth Circuit {{stated in}} its {{decision}} that “EchoStar {{did not succeed}} 'on any significant issue' or 'achieve any of the benefit it sought in bringing suit' under the Communications Act.” The Ninth Circuit awarded NDS US$18 million and concluded that “There {{is no question that}} NDS successfully defended against all of EchoStar’s claims based on or related to its theory that NDS was responsible for the compromise of EchoStar’s satellite television <b>programming</b> <b>security</b> system.” ...|$|E
5000|$|Security Directorate The {{directorate}} manages all {{facets of}} information, personnel, industrial, and resource protection <b>security</b> <b>programs.</b> Additionally, the <b>Program</b> <b>Security</b> Office ensures all visitors to the NTTR meet security requirements, and provides security oversight for classified and special access requirements on the NTTR.|$|R
25|$|Goss, S. C. (2010). The future {{financial}} {{status of the}} Social <b>Security</b> <b>program.</b> Social <b>Security</b> Bulletin 70(3), 111-125.|$|R
5000|$|Military — Strategic Aspects of the North Korean Nuclear Program // James Clay Moltz and Alexandre Y. Mansurov (ed.). The North Korean Nuclear <b>Program.</b> <b>Security,</b> Strategy and New Perspectives from Russia. New York: Routledge, 2000, p. 101—109.|$|R
40|$|Access {{control is}} central to {{security}} in computer systems. Over the years, {{there have been many}} efforts to explain and to improve access control, sometimes with logical ideas and tools. This paper is a partial survey and discussion of the role of logic in access control. It considers logical foundations for access control and their applications, in particular in languages for <b>programming</b> <b>security</b> policies...|$|E
40|$|Programming Securely To develop codein {{a secure}} mannerso that the code {{itself is not}} a {{vulnerability}} that can be exploited by an attacker. <b>Programming</b> <b>Security</b> To develop code for security-specific functionssuch as encryption, digital signatures,firewalls, etc. In this lecture, we look at both sides: ◮ continuingprogramming securely: some web application security issues and some Java guidelines. ◮ programmingsecurity: overview of Java security APIs and current and future trust models. Outline Web security issues Java Security: Coding and Model...|$|E
40|$|Confidentiality leaks Building in security: {{design and}} {{guidelines}} The relationship between programming and security {{may be viewed}} {{in at least a}} couple of ways. Programming Securely To develop code in a secure manner so that the code itself is not a vulnerability that can be exploited by an attacker. <b>Programming</b> <b>Security</b> To develop code for security-specific functions such as encryption, digital signatures, firewalls, etc. Of course, the second may be required for the first. In this lecture, we consider Programming Securely. Choose securit...|$|E
50|$|Jackson Hole Airport {{is one of}} 16 {{airports}} {{that uses}} private screeners under contract with the Transportation Security Administration's Screening Partnership <b>Program.</b> <b>Security</b> screeners are employed by the Jackson Hole Airport Board rather than the TSA.|$|R
50|$|<b>Security</b> <b>programs</b> and {{contingency}} plans regarding any aircraft operator, airport operator, or fixed-base operator <b>security</b> <b>program.</b>|$|R
50|$|The PIC16F84/PIC16F84A is an {{improved}} {{version of the}} PIC16C84, and almost completely compatible, with better <b>program</b> <b>security</b> and using flash memory instead of EEPROM memory for program memory. The PIC16F84/PIC16F84A has 68 bytes of RAM whilst the PIC16C84 has 36 bytes.|$|R
40|$|Language futures for {{security}} Programming Securely To develop code in a secure manner {{so that the}} code itself is not a vulnerability that can be exploited by an attacker. <b>Programming</b> <b>Security</b> To develop code {{for security}}-specific functions such as encryption, digital signatures, firewalls, etc. In this lecture, we look at both sides: ◮ continuing programming securely: some web application security issues and some Java guidelines. ◮ programming security: overview of Java security APIs and current and future trust models. Web security: client-side threat...|$|E
40|$|Java {{smart cards}} are revolutionising the smart card market, mainly {{due to their}} platform-independence, ease of <b>programming,</b> <b>security,</b> multi-functionality and dynamic upload features. Performance of Java smart cards becomes {{increasingly}} important. This paper presents CardLab, an evaluation method for Java smart cards, consisting of a benchmarking and performance measurement environment and a complementing qualitative analysis. The CardLab prototype represents a powerful environment for card manufacturers to check the quality and performance of their card systems and {{to compare it to}} others, {{as well as for the}} card issuers to select a particular card system...|$|E
40|$|This thesis extends {{functional}} programming languages with aspect-oriented features, primarily to explore aspect-oriented enforcement of security policies. First, this thesis examines an aspect-oriented {{implementation of the}} Java security mechanism, which requires the security advice to be triggered by functions with diverse types. I present a new language, AspectML, that allows type-safe polymorphic advice using pointcuts constructed from a collection of polymorphic join points. I then compare my AspectML implementation of the Java security mechanism against the existing Java implementation. Second, in ordinary aspect-oriented <b>programming,</b> <b>security</b> and other advice added after-the-fact to an existing codebase can disrupt important data invariants and prevent local reasoning. Instead, this thesis shows that many common aspects, including security advice, can be implemented as harmless advice. Harmless advic...|$|E
40|$|Today’s {{programs}} are implemented {{in a variety}} of languages and contain serious vulnerabilities which can be exploited to cause security breaches. These vulnerabilities have been exploited in real life and resulted in damages to related stakeholders such as program users. As most vulnerabilities belong to program code, many techniques have been applied to mitigate vulnerabilities before and after program deployment. Unfortunately, there is no comprehensive comparative analysis of different vulnerability mitigation works. As a result, there exists an obscure mapping between the techniques, the addressed vulnerabilities, and the limitations of different approaches. This paper attempts to address these issues. The paper extensively compares and contrasts the existing <b>program</b> <b>security</b> vulnerability mitigation (testing, static analysis, and hybrid analysis) and monitoring techniques. We also discuss other techniques employed to mitigate the most common <b>program</b> <b>security</b> vulnerabilities: secure <b>programming,</b> patching, and program transformation. The survey provides a comprehensive understanding of the current program vulnerability mitigation approaches and challenges as well as their key characteristics and limitations. Moreover, our discussion highlights the open issues and future research directions in the area of <b>program</b> <b>security</b> vulnerability mitigation and monitoring. i Table of Content...|$|R
40|$|Outline for a Successful <b>Security</b> <b>Program</b> Do {{you need}} a <b>Security</b> <b>Program?</b> As {{technology}} advances, companies are finding out they require a network <b>security</b> <b>program.</b> This paper is meant to give the reader an outline and high level view of security topics to examine when creating a network <b>security</b> <b>program.</b> This paper is broken into fifteen sections related to security. It has been my experience that most <b>security</b> <b>programs</b> will have to give some attention {{to each of these}} sections in order to be successful. Some of the topics I will discuss include: security pol [...] . Copyright SANS Institut...|$|R
40|$|An {{organized}} {{record of}} actual flaws {{can be useful}} to computer system designers, programmers, analysts, administrators, and users. This survey provides a taxonomy for computer <b>program</b> <b>security</b> flaws, with an Appendix that documents 50 actual security flaws. These flaws have all been described previously in the open literature...|$|R
40|$|This paper {{presents}} the "CL/TB" programming interface for Allegro CL (an implementation of Common Lisp) and the relational {{database management system}} TransBase. The interface and its components are presently running on SUN UNIX workstations but can easily be installed on all major UNIX workstations. CL/TB supports data manipulation, data definition, and data control. The database system is called by sending SQLstatements as strings from Allegro CL. Basically, CL/TB offers the prominent services of the underlying TransBase programming interface (TBX). The services are successfully integrated into the functional environment of Lisp and enhanced by many additional features to improve ease of use, <b>programming</b> <b>security,</b> and error support. Thus operating on a database system via CL/TB is easy even for unexperienced users. Furthermore CL/TB {{is compatible with the}} relational algebra R-Lisp. Structure, design, implementation, and performance data are presented and its application is illustrated [...] ...|$|E
40|$|Abstract—As the Internet users increase, {{the need}} to protect web servers from {{malicious}} users has become a priority in many organizations and companies. Writing crosscutting functions in complex software should take advantage of the modularity offered by new software development approaches. With AspectOriented Programming (AOP), separating concerns when designing an application fosters reuse, parameterization and maintenance. In this paper, we design a security aspect called AProSec for detecting SQL injection and Cross Scripting Site (XSS), that are common attacks in web servers. We experimented this aspect with AspectJ language and JBoss AOP. By this experimentation, we show the advantage of runtime platforms such as JBoss AOP for changing security policies at runtime. Finally, we describe related work on security and AOP. Index Terms—Aspectoriented <b>programming,</b> <b>security,</b> SQL injection, cross site scripting, design of web applications, reuse of aspect, dynamic weaving. I...|$|E
40|$|In this paper, {{we develop}} a {{decision}} {{model of a}} firm's optimal strategy for investment in security process innovations (SPIs) when confronted with a sequence of malicious attacks. The model incorporates real options as a methodology to capture the flexibility embedded in such investment decisions. SPIs, when seamlessly integrated with the organization's overall business dynamics, induce organizational learning and provide the flexibility of switching to more suitable technologies as the environment of malicious attacks changes. The theoretical contribution {{of this paper is}} a mathematical model of the invest-to-learn and switching options generated upon early investment in flexible SPIs. The practical significance of the paper is the application of a binomial lattice model to approximate the continuous-time model, resulting in an easy to use decision aid for managers. Information security Investment analysis Cost-benefit analysis Real options theory Dynamic <b>programming</b> <b>Security</b> process innovations...|$|E
50|$|Wyvern is a {{computer}} programming language for development of web and mobile applications. It aims to provide a way to safely use multiple programming languages within the same program so programmers can use the language most appropriate for each function {{while at the same}} time increasing the <b>program's</b> <b>security.</b>|$|R
40|$|Important <b>programs</b> <b>security</b> {{problem is}} the {{protection}} of program from illegal use and distribution. This paper describes the method of protection program – separate program modules are encrypted. Encryption keys are generated using a hash function from a system's signature, which is composed of components of the system identification data...|$|R
50|$|Randall M. Fort (b. July 4, 1956, Richmond, Indiana) is {{currently}} Director of <b>Programs</b> <b>Security,</b> Cyberdomain Team, Raytheon Corporation. He was formerly the Assistant Secretary of State for Intelligence and Research in the United States Department of State from November 2006 through January 2009, {{as part of}} the Bush Administration.|$|R
40|$|Type-and-effect {{systems are}} a {{powerful}} tool for program construction and verification. We describe intensional effect polymorphism, a new foundation for effect systems that integrates static and dynamic effect checking. Our system allows the effect of polymorphic code to be intensionally inspected through a lightweight notion of dynamic typing. When coupled with parametric polymorphism, the powerful system utilizes runtime information to enable precise effect reasoning, {{while at the same time}} retains strong type safety guarantees. We build our ideas on top of an imperative core calculus with regions. The technical innovations of our design include a relational notion of effect checking, the use of bounded existential types to capture the subtle interactions between static typing and dynamic typing, and a differential alignment strategy to achieve effi- ciency in dynamic typing. We demonstrate the applications of intensional effect polymorphism in concurrent <b>programming,</b> <b>security,</b> graphical user interface access, and memoization...|$|E
40|$|This paper {{presents}} {{an approach to}} the verification of large Java programs. The focus lies on programs that implement a distributed communicating system e. g. in a M-or E-Commerce scenario. When trying to verify such programs, thousands of Java classes {{with tens of thousands}} of lines of code would have to be taken into consideration. That is impossible. The paper introduces a technique that dramatically reduces the amount of source code that must be considered. Additionally, a suitable method for <b>programming</b> <b>security</b> critical systems is introduced. The reduction is achieved by extracting a verification kernel from the program, which is sufficient for proving the correctness of the relevant part. An algorithm for the automatic computation of the verification kernel has been developed and is presented in the paper. The correctness of the verification kernel approach is proved on the level of the Java language semantics...|$|E
40|$|Producing secure {{software}} is extremely {{hard to do}} right. The number of security flaws and vulnerabilities discovered in software each day is increasing at high speed. According to the National Vulnerability Database the number of vulnerabilities discovered in 2005 was 4859, {{more than twice the}} number of vulnerabilities discovered the year before. One way to classify vulnerabilities is to classify them after when in the development phase they are introduced. Other phases like analysis (requirements), testing, or maintenance phase are also sometimes used. This thesis is a study of security related flaws with origin in the design phase. Such flaws are rooted {{in the design of the}} software, and exist even if the programmer implements the design perfectly making no mistakes in the <b>programming.</b> <b>Security</b> related design flaws are a lot about how security mechanisms like authentication, authorization and encryption are used and implemented, or how error handling is performed. Typical examples of design flaws include weak encryption, missing or insufficient access control...|$|E
50|$|PNWER {{has three}} <b>program</b> areas:Energy,Homeland <b>Security,</b> andPacific Northwest Innovation Network.|$|R
5000|$|... #Subtitle level 2: International Training <b>program</b> for <b>Securities</b> Market Managers ...|$|R
5000|$|... #Subtitle level 2: Some Universities with {{academic}} <b>programs</b> in <b>Security</b> Studies ...|$|R
40|$|SQL {{injection}} is {{an attack}} methodology that targets the data residing in a database. The attack takes advantage of poor input validation in code and website administration. SQL Injection Attacks occur when an attacker is able to insert a series of SQL statements into a ‘query ’ by manipulating user input data into a web-based application, an attacker can take advantages of web application <b>programming</b> <b>security</b> flaws and pass unexpected malicious SQL statements through a web application for execution by the back-end database. This paper proposes a novel specification-based methodology {{for the prevention of}} SQL injection Attacks. The two most important advantages of the new approach against existing analogous mechanisms are that, first, it prevents all forms of SQL injection attacks; second, Current technique does not allow the user to access database directly from the database server. Our proposed framework for building secure and anti-theft web applications is consisting of four stages. In each stage we analyze the inputted data taken from the user and make a decision, whether that is suspected or not...|$|E
40|$|<b>Programming</b> <b>security</b> {{vulnerabilities}} are {{the most}} common cause of software security breaches in current day computing. While these can easily be avoided by an attentive programmer, many programs still contain these kinds of vulnerabilities. This document will describe what the most commonly occuring ones are and will then explain how these can be abused to make a program do something it did not intend to do. We will then take a look at how a recent vulnerability in popular piece of software was exploited to allow an attacker to take control of the execution flow of that program. Several solutions exist to detect and prevent many, though not all, of the vulnerabilities described in this document in existing programs without requiring source code modifications, and in some cases without even requiring access to the source code to the applications. We will take an indepth look at how these solutions are implemented and what their effects are on legitimate programs, how they attempt to mitigate the restrictions they impose and what their impact is on the performance of the programs they attempt to protect. We will also describe if and how these solutions can be bypassed...|$|E
40|$|Information {{sharing in}} supply chain {{management}} can dramatically improve {{the performance of the}} supply chain. Although many such problems can be modeled and efficiently solved using linear <b>programming,</b> <b>security</b> requirements prevent their implementation in the traditional way. Companies are simply reluctant to exchange such sensitive information. Secure multi-party computation can help by realizing protocols with guaranteed security. However, efficiency is a major concern. Parallel computing presents an opportunity to improve performance utilizing inherent parallel secure operations. This work focuses on practical approaches to privacy preserving parallel protocols for collaborative linear programming. First it theoretically compares the approach of parallelizing a secure algorithm and securing a parallel algorithm. Their complexity being equal we implemented the simpler choice: parallelizing a secure algorithm. Different synchronization methods for the implementation are compared under different network conditions. Given the best implementation, the performance is almost independent of the network conditions, but parallelization, i. e. number of threads, needs to be adapted to such conditions. We present and evaluate an adaptive scheduling algorithm for the dynamic selection of the number of threads, such that it’s not necessary to statically and up-front determine the number for optimal speed-up. The algorithm can even deal with a varying network conditions...|$|E
50|$|From 1994-1999 deGraffenreid was Senior Associate {{and then}} Vice President of National Security Research, Inc., {{where he was}} {{responsible}} for national-level U.S. intelligence and counterintelligence policies and <b>programs,</b> and <b>security</b> <b>programs</b> for protecting U.S. Government and commercial strategic information and operations.|$|R
30|$|If {{some people}} wish {{to build a}} {{spontaneous}} network, they may meet in a physical space at a given moment {{in order to make}} use of services such as group communication, cooperation on running <b>programs,</b> <b>security,</b> and so forth. The members who make up this community may vary at any specific time (users may join or leave at will).|$|R
40|$|Testimony {{issued by}} the Government Accountability Office with an {{abstract}} that begins "As GAO has reported over the last decade, the Department of Energys (DOE) management of major projects and <b>programs,</b> <b>security</b> and safety at DOE sites, and reliable enterprise-wide management information, including budget and cost data, {{are among the most}} persistent management challenges the department faces. ...|$|R
