14|174|Public
2500|$|In 1993, Assange gave {{technical}} {{advice to the}} Victoria Police Child Exploitation Unit and assisted with prosecutions. In the same year, {{he was involved in}} starting one of the first public Internet service providers in Australia, Suburbia Public Access Network. He began programming in 1994, authoring or co-authoring the Transmission Control <b>Protocol</b> <b>port</b> scanner strobe.c (1995); patches to the open-source database PostgreSQL (1996); the Usenet caching software NNTPCache (1996); the Rubberhose deniable encryption system (1997), which reflected his growing interest in cryptography; and Surfraw, a command-line interface for web-based search engines (2000). During this period, he also moderated the AUCRYPTO forum; ran Best of Security, a website [...] "giving advice on computer security" [...] that had 5,000 subscribers in 1996; and contributed research to Suelette Dreyfus's Underground (1997), a book about Australian hackers, including the International Subversives. In 1998, he co-founded the company Earthmen Technology.|$|E
50|$|Another typical {{example is}} {{to use it to}} bypass an overly secure firewall: You're on a LAN with no SSH access to the Internet, but the HTTPS <b>protocol</b> (<b>port</b> 443) can get through. Using stunnel it's {{possible}} to encapsulate an SSH connection with SSL.|$|E
5000|$|BOOTP is {{implemented}} using the User Datagram Protocol (UDP) as transport <b>protocol,</b> <b>port</b> number 67 {{is used by}} the (DHCP) server to receive client requests and port number 68 {{is used by the}} client to receive (DHCP) server responses. BOOTP operates only on IPv4 networks.|$|E
25|$|In {{the case}} of a simple attack, a {{firewall}} could have a simple rule added to deny all incoming traffic from the attackers, based on <b>protocols,</b> <b>ports</b> or the originating IP addresses.|$|R
5000|$|... firewalld's command syntax {{is similar}} to but more verbose than other iptables {{front-ends}} like Ubuntu's Uncomplicated Firewall (ufw). The command-line interface allows managing firewall rulesets for <b>protocol,</b> <b>ports,</b> source and destination; or predefined services by name.|$|R
50|$|Other {{possibilities}} are UPnP Internet Gateway Device <b>Protocol,</b> NAT-PMP (NAT <b>Port</b> Mapping <b>Protocol),</b> or <b>Port</b> Control <b>Protocol</b> (PCP), but these require the NAT device to implement that protocol.|$|R
50|$|An ephemeral port is a {{short-lived}} transport <b>protocol</b> <b>port</b> for Internet Protocol (IP) communications allocated automatically from a predefined range by the IP stack software. An ephemeral port is typically {{used by the}} Transmission Control Protocol (TCP), User Datagram Protocol (UDP), or the Stream Control Transmission Protocol (SCTP) as the port assignment for the client end of a client-server communication to a well-known port on a server.|$|E
50|$|When {{operating}} over a network, syslog implements a client-server application structure {{where the}} server listens on a well-known or registered port for protocol requests from clients. Historically {{the most common}} Transport Layer protocol for network logging has been User Datagram Protocol (UDP), with the server listening on port 514. As UDP lacks congestion control mechanisms, support for Transport Layer Security is required to implement and also recommended for general use on Transmission Control <b>Protocol</b> <b>port</b> 6514.|$|E
50|$|In {{a treaty}} signed at Lima on June 3, 1929, Article 2 delimited the {{international}} boundary dividing the disputed territory of Tacna and Arica between Peru and Chile. A complementary protocol signed {{on the same}} day stated in Article I that neither government might without previous agreement with the other cede to any third state all or any part of the territory which, in accordance with the treaty, remained under their respective sovereignties. In Article 2 of the <b>protocol,</b> <b>port</b> facilities granted to Peru under Article 5 of the treaty should consist of free transit to Peruvian territory and from such across Chilean territory. The placing of pillars marking the boundary was completed the following year and a demarcation protocol was signed at Lima on August 5, 1930.|$|E
50|$|More complex digital relays {{will have}} {{metering}} and communication <b>protocol</b> <b>ports,</b> allowing the relay {{to become an}} element in a SCADA system. Communication ports may include RS232/RS485 or Ethernet (copper or fibre-optic). Communication languages may include Modbus, DNP3 or IEC61850 protocols.|$|R
5000|$|Internet Key Exchange (IKE) User Datagram <b>Protocol</b> (UDP) <b>port</b> 500 ...|$|R
50|$|The {{protocol}} it uses {{to communicate}} with other (local or remote) programs is called SSTP (Sakura Script Transfer <b>Protocol).</b> <b>Ports</b> 7743 and 9801 are officially assigned by IANA for SSTP.http://www.iana.org/assignments/port-numbers The port 7743 is not actually used for this protocol. The original Ukagaka listens to port 9801 while SSP (see below) uses the port 9821 by default.|$|R
5000|$|In 1993, Assange gave {{technical}} {{advice to the}} Victoria Police Child Exploitation Unit and assisted with prosecutions. In the same year, {{he was involved in}} starting one of the first public Internet service providers in Australia, Suburbia Public Access Network. He began programming in 1994, authoring or co-authoring the Transmission Control <b>Protocol</b> <b>port</b> scanner [...] (1995); patches to the open-source database PostgreSQL (1996); the Usenet caching software NNTPCache (1996); the Rubberhose deniable encryption system (1997), which reflected his growing interest in cryptography; and Surfraw, a command-line interface for web-based search engines (2000). During this period, he also moderated the AUCRYPTO forum; ran Best of Security, a website [...] "giving advice on computer security" [...] that had 5,000 subscribers in 1996; and contributed research to Suelette Dreyfus's Underground (1997), a book about Australian hackers, including the International Subversives. In 1998, he co-founded the company Earthmen Technology.|$|E
50|$|The Switches have an {{integrated}} time-domain reflectometer (TDR) built into every copper port, providing diagnostic monitoring and troubleshooting {{capabilities of the}} connected cables allowing for the troubleshooting of cable defects (crimped, cut, shorted or damaged cables) from the telnet, SNMP, web and console management interfaces. This test provides a very reliable test to identify if the cable is good or faulty. The Switches also include {{an integrated}} packet sniffer built into every port that can export the information on to a web page report (see the jpg to the right, an example of top 25 talkers on a switch) or export the information to an IPFIX server. The web base reports will report top 10, 25, or 50 talkers. Reports can also be created and sorted on source address, destination address, TOS, <b>protocol,</b> <b>port</b> number, source or destination ports, packet count, byte count, or first or last packet times. Multiple ports can be monitored simultaneously or individually. A license {{is not required to}} enable this function. The Management of the system is accomplished through a serial console (which presents both a menu structure and a command line interface), a web interface or with the device manager tools, which uses SNMP to communicate with the device.|$|E
40|$|This {{document}} provides {{recommendations to}} designers of application and service protocols {{on how to}} use the transport <b>protocol</b> <b>port</b> number space and when to request a port assignment from IANA. It provides designer guidance to requesters or users of port numbers on how to interact with IANA using the processes defined in RFC 6335; thus, this document complements (but does not update) that document. It provides guidelines for designers regarding how to interact with the IANA processes defined in RFC 6335, thus serving to complement (but not update) that document. Status of This Mem...|$|E
50|$|The {{remote system}} to which rsh connects runs the rsh daemon (rshd). The daemon {{typically}} uses the well-known Transmission Control <b>Protocol</b> (TCP) <b>port</b> number 514.|$|R
50|$|As {{an example}} of how port {{triggering}} operates, when connecting to IRC (Internet Relay Chat), it's common to authenticate a username with the Ident <b>protocol</b> via <b>port</b> 113.|$|R
5000|$|CompTIA Security + 2008: <b>Ports,</b> <b>Protocols,</b> and Network Security ...|$|R
40|$|In {{this paper}} we present an {{approach}} for identifying network anomalies by visualizing network flow data which {{is stored in}} weblogs. Various clustering techniques {{can be used to}} identify different anomalies in the network. Here, we present a new approach based on simple K-Means for analyzing network flow data using different attributes like IP address, <b>Protocol,</b> <b>Port</b> number etc. to detect anomalies. By using visualization, we can identify which sites are more frequently accessed by the users. In our approach we provide overview about given dataset by studying network key parameters. In this process we used preprocessing techniques to eliminate unwanted attributes from weblog data...|$|E
40|$|This thesis {{introduces}} a new framework in Erasmus which is specially designed for web application. Erasmus, {{as a typical}} process oriented language, developed by Peter Grogono at Concordia University, Canada and Brian Shearing at The Software Factory, UK, is based on communicating processes. Erasmus can easily and clearly depict multi-process scenarios based on new concepts: <b>protocol,</b> <b>port,</b> cell and processes. In this thesis, we gave detail of the language Erasmus and explained the new concepts: Cell, Process, Protocol and Port which is introduced by Erasmus. Then, we introduced the Broker which is a proxy to communicate between the processes on different machines and listen for HTTP requests. Next, we depicted the architecture and the resource management of the Erasmus Web application including database access and dynamic process creating. At the end, we gave {{an example of a}} simple web application with simple Erasmus language and with an Erasmus MVC framework. As a conclusion, Erasmus is a potential excellent Web development language which can improves the performance of the web services and also helps developers to be more productive in developing web applications. ...|$|E
40|$|Now a day`s {{each and}} every where we are using {{client-server}} communication for different information service systems. Normally client server communication can be differentiating by using IP Address and <b>Protocol</b> <b>Port</b> number from one machine to another machine. In network environment we are already having DOS/DDOS Attacks Another Subset of this attack scenario is DOS/DDOS attack is Application Denial of Service(ADOS) attack,In this the adversary attacks open Ports/Ideal ports present at server side for this the adversary Know need huge machines,zombie systems and no need sending packets of data with high bandwidth. To control this type of A-DOS attacks the existing enterprise security devices are not suitable like firewalls, anti-viruses and IDS/IPS Systems why because the adversary not using high bandwidth, spam messages, zombie`s or botnet`s for their attack scenarios. To safeguard this type of DOS/DDOS or Application denial of service attacks we are having some port hopping mechanisms i. e Port hopping by using Pseudo Random Number Generation (PRNG) based port hopping,Acknowledgement based port hopping and proactive Reinitialization based on this existing once and their disadvantages like in PRNG attackers can predict the random number generation by using pre-calculated list or based on mathemathical functions. we introduce new port hopping technique i. e True Random Number Generation based port hoppin...|$|E
2500|$|Custom [...] "svn" [...] <b>protocol</b> (default <b>port</b> 3690), using {{plain text}} or over TCP/IP. This mode uses either the svn://host/path access scheme for unencrypted {{transport}} or svn+ssh://host/path scheme for tunneling over ssh.|$|R
5000|$|Identify {{applications}} {{regardless of}} <b>port,</b> <b>protocol,</b> evasive tactic or Secure Sockets Layer ...|$|R
5000|$|Transmission Control <b>Protocol</b> (TCP) status <b>port</b> for {{monitoring}} and external call routing ...|$|R
40|$|Abstract:- Evolution of Internet {{has been}} {{accompanied}} by the development of a range of network applications which introduce many interesting, challenging and tricky problem to the network traffic monitoring. The increasing numbers of applications cause network traffic become harder to classify. Classifying internet traffic by looking at headers of packet and the transport <b>protocol</b> <b>port</b> number is no more reliable and accurate technique for the reason in today's computer world, running well-known applications on not-so-well-known ports or used others protocol as wrappers is a widespread scenario. Meanwhile, others examine packet payload in order to identify degree of reliability and accuracy of traffic classification. Yet, due to some restriction such as security, privacy and legal issues, examining the packet payload could be restrained in such cases. However, accurate and real-time methods that can dependably recognize the application that generated a flow still need to be developed without involved in neither human interventions nor offline classification to achieve efficient and effective packet verification. Hence, a common problem with many protocol analyzers is the inability to accurately identify and consequently decode a protocol that runs over a non-default port number. In order to optimize network investment; all packets should be clearly identified; nevertheless, there still no such tool in the market today is capable to analyze all network protocols. In our work, we put on our effort to advance the network monitoring system via an accurate, reliable and robust real time application. In view o...|$|E
40|$|With the {{advances}} of optical transmission {{technologies such as}} Wavelength Division Multiplexing, the data rates of the links have increased rapidly in recent years. The packet by packet processing property of router requires faster IP table lookup algorithms {{to keep pace with}} the rocking transmission speed. Each router is required to make forwarding decision-the output port number-to each packet based on the destination IP address in the packet header. The development of the Internet and the increase of the number of users make the size of the forwarding table larger and larger. This also challenges the design of the forwarding engine. In the first part of this thesis, the IP table lookup problem is analyzed. We present one fast IP table lookup algorithm which is designed for backbone routers. Besides the development of the Internet itself, the applications that run on the Internet have become more varied. These applications, such as real-time video and voice, require different service quality levels and are expected to be processed separately. Due to the traditional best-effort design of the Internet, which treats all the packets destined to the same IP address identically, it can not provide this kind of service quality level. New functions and mechanisms should be considered. Motivated by this goal, the idea of a flow-aware router emerges. The flow-aware routers are designed to provide differentiated services to different users based on their requirements and expectations of the service quality from the Internet. This requires the router to have the ability to classify the packet into pre-defined flows and treat them differently. The process is called packet classification. The high and increasing link speed of the Internet requires the decision speed of packet classification fast enough. Because the service requirements and expectations of the applications are different, the decision is made on, not only the destination IP address, but the source IP address and even the <b>protocol,</b> <b>port</b> number, link level addresses. All these make the packet classification problem a more challenge one. In the second part of this thesis, we develop a fast packet classification algorithm which is to do two-dimensional packet classification. It also can be extended to a multiple-dimension packet classification. The first algorithm we developed is for packet-by-packet IP routing. In this algorithm, we achieved about 20 - 30 % memory reduction compared with similar routing lookup algorithms. The second algorithm is developed for two-dimensional packet classification and it can be extended to multi-dimensional packet classification. By pipeling, this algorithm can be used for OC- 192 link rate. With the development of the Internet, better routing lookup and packet classification algorithms are desired. The research in this area keeps on going...|$|E
50|$|The MegaMeeting.com {{services}} {{utilize the}} Real Time Messaging <b>Protocol</b> (RTMP) over <b>port</b> 1935, {{as well as}} the Real Time Message <b>Protocol</b> (RTMPT) over <b>port</b> 80 (tunneling via http) and the Real Time Message Protocol Secured (RTMPTS) over port 443 (tunneling via https) to allow audio, video and text chat to securely be transmitted from computer to computer.|$|R
30|$|By default, all offer good {{security}} by vastly blocking inbound traffic, preventing unsecured instances {{being exposed to}} the Internet unintentionally. Nevertheless, there are subtle differences in the inbound configuration as cloud instances have to be remotely accessed anyway: Amazon EC 2 and Microsoft Azure solely opens port 22 for SSH in case of Linux instances; alternatively, port 3389 for Remote Desktop Protocol (RDP) in case of Windows instances. Google Compute Engine opens both ports independently of the respective instances. In all cases, rules {{can be added to}} allow certain transport layer <b>protocols,</b> <b>ports,</b> and <b>protocols.</b> Although it varies whether single values or (IP/port) ranges are allowed.|$|R
50|$|Voice over Internet Protocol (VoIP) {{is blocked}} {{completely}} and requires a proxy or Virtual Private Network (VPN) {{to work around}} it. However, VoIP operators that utilize non-standard Session Initiation <b>Protocol</b> (SIP) <b>ports</b> may function behind Syria's proxy.|$|R
50|$|The {{components}} {{known as}} Serial Attached SCSI Expanders (SAS Expanders) facilitate communication between {{large numbers of}} SAS devices. Expanders contain two or more external expander-ports. Each expander device contains at least one SAS Management <b>Protocol</b> target <b>port</b> for management and may contain SAS devices itself. For example, an expander may include a Serial SCSI <b>Protocol</b> target <b>port</b> for access to a peripheral device. An expander {{is not necessary to}} interface a SAS initiator and target but allows a single initiator to communicate with more SAS/SATA targets. A useful analogy: one can regard an expander as akin to a network switch in a network, which connects multiple systems using a single switch port.|$|R
50|$|A host may {{connect to}} a server that {{supports}} the Daytime Protocol on either Transmission Control Protocol (TCP) or User Datagram <b>Protocol</b> (UDP) <b>port</b> 13. The server returns an ASCII character string of the current date and time in an unspecified format.|$|R
5000|$|Connectivity: More {{physical}} connections, privileges, <b>ports,</b> <b>protocols,</b> {{and services}} and time {{each of those}} are accessible increase vulnerability ...|$|R
5000|$|A darknet is an overlay network, {{typically}} {{running on}} the internet, that is only accessible through specialized software. A darknet is an anonymizing network where connections are made only between trusted peers — sometimes called [...] "friends" [...] (F2F) — using non-standard <b>protocols</b> and <b>ports.</b>|$|R
50|$|PCP allows {{deployed}} {{equipment and}} applications to create explicit mappings between an external IP address, <b>protocol</b> and <b>port,</b> and an internal IP address, <b>protocol</b> and <b>port.</b> With such explicit mappings in place, inbound communication {{can reach the}} hosts behind a NAT or firewall, which either expands their server roles beyond boundaries of local networks, or makes use of various services simplified and less resource-consuming. Created mappings are permanent {{to the extent of}} having a known lifetime that can be extended, which is similar to the way Dynamic Host Configuration Protocol (DHCP) implements its leases. At the same time, PCP allows applications to create additional mappings dynamically as required, which reduces or eliminates the need for having ALG-enabled NAT devices and firewalls.|$|R
40|$|Abstract. Traffic {{classification}} {{has received}} increasing {{attention in the}} last years. It aims at offering the ability to automatically recognize the application that has generated a given stream of packets from the direct and passive observation of the individual packets, or stream of packets, flowing in the network. This ability is instrumental {{to a number of}} activities that are of extreme interest to carriers, Internet service providers and network administrators in general. Indeed, traffic classification is the basic block that is required to enable any traffic management operations, from differentiating traffic pricing and treatment (e. g., policing, shap-ing, etc.), to security operations (e. g., firewalling, filtering, anomaly detection, etc.). Up to few years ago, almost any Internet application was using well-known transport-layer <b>protocol</b> <b>ports</b> that easily allowed its identification. More recently, the num-ber of applications using random or non-standard ports has dramatically increased (e. g. Skype, BitTorrent, VPNs, etc.). Moreover, often network applications are configured to use well-known <b>protocol</b> <b>ports</b> assigned to other applications (e. g. TCP port 80 originally reserved for Web traffic) attempting to disguise their pres-ence. For these reasons, and for the importance of correctly classifying traffic flows, novel approaches based respectively on packet inspection, statistical and machine learning techniques, and behavioral methods have been investigated and are be-coming standard practice. In this chapter, we discuss the main trend in the field of traffic classification and we describe some of the main proposals of the research community. We complete this chapter by developing two examples of behavioral classifiers: both use supervised machine learning algorithms for classifications, but each is based on different features to describe the traffic. After presenting them, we com-pare their performance using a large dataset, showing the benefits and drawback of each approach. ...|$|R
5000|$|A darknet (or dark net) is any {{overlay network}} {{that can be}} {{accessed}} only with specific software, configurations, or authorization, often using non-standard communications <b>protocols</b> and <b>ports.</b> Two typical darknet types are friend-to-friend networks (usually used for file sharing with a peer-to-peer connection) and privacy networks such as Tor.|$|R
