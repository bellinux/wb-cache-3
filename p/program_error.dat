55|1266|Public
25|$|Cassini never {{listened to}} channel A {{because of a}} {{software}} design error. The receiver on the orbiter was never commanded to turn on, according to officials with the European Space Agency. ESA announced that the <b>program</b> <b>error</b> was a mistake on their part, the missing command {{was part of a}} software program developed by ESA for the Huygens mission, and that it was executed by Cassini as delivered.|$|E
25|$|In computing, a <b>program</b> <b>error</b> {{may result}} from an attempt to divide by zero. Depending on the {{programming}} environment {{and the type of}} number (e.g. floating point, integer) being divided by zero, it may generate positive or negative infinity by the IEEE 754 floating point standard, generate an exception, generate an error message, cause the program to terminate, result in a special not-a-number value, a freeze via infinite loop, or a crash.|$|E
5000|$|When a <b>program</b> <b>error</b> {{occurs in}} Windows, the system {{searches}} for a <b>program</b> <b>error</b> handler. A <b>program</b> <b>error</b> handler deals with errors as they arise during {{the running of}} a program. If the system does not find a <b>program</b> <b>error</b> handler, the system verifies that the program is not currently being debugged and considers the error to be unhandled. The system then processes unhandled errors by looking in the registry for a <b>program</b> <b>error</b> debugger for which Dr. Watson is the default. A third-party debugger {{can also be used}} in place of Dr. Watson. The Watcom C Compiler includes a similar crash-analysis tool named [...] "Dr. Watcom".|$|E
50|$|If the Production error {{occurred}} due to <b>programming</b> <b>errors</b> then a request is {{created for the}} Development team to correct <b>programming</b> <b>errors.</b> Problem is identified, defined and root cause analysis is performed. The <b>programming</b> <b>error</b> is fixed using normal SDLC process - analysis/design/programming/QA/testing/release. The {{new version of the}} Production job/program is deployed and verified/validated.|$|R
40|$|One of {{the largest}} {{challenges}} in software development {{is to ensure that}} the software is correct. Almost all software that is complex enough to accomplish a useful task contains <b>programming</b> <b>errors.</b> Unfortunately, developers must allocate their time to various activities and often, they do not have enough time for searching <b>programming</b> <b>errors.</b> The goal of this dissertation is to support developers in finding <b>programming</b> <b>errors</b> despite a limited time budget. Therefore, we focus on program analyses with three properties. First, the analyses are automatic, that is, the only input required to analyze a program is the source code (or byte code) of the program itself. In particular, an automatic analysis does not rely on formal specifications or manually written test suites. Second, the analyses are precise, that is, they report warnings that are guaranteed to point to <b>programming</b> <b>errors</b> or that have a high chance of pointing to <b>programming</b> <b>errors,</b> instead of false positives. Third, the analyses can be applied to real-world software with low human and computational effort, that is, they provide developers a push button approach for existing code. Thi...|$|R
5000|$|Cross-application {{scripting}} exploits {{a similar}} kind of <b>programming</b> <b>error</b> ...|$|R
5000|$|Sony's PlayStation 3 {{incorrectly}} treated 2010 as a leap year, so the non-existent February 29, 2010 {{was shown}} on March 1, 2010, and caused a <b>program</b> <b>error.</b>|$|E
50|$|On 15 December 2007, {{the company}} {{released}} {{a version of}} its automatic updater for OS X with a serious <b>program</b> <b>error.</b> The company fixed the updater on 17 December, but by then it had caused substantial data loss {{for a number of}} users.|$|E
5000|$|Because a {{very common}} <b>program</b> <b>error</b> is a null pointer dereference (a read or write through a null pointer, used in C to mean [...] "pointer to no object" [...] and as an error indicator), most {{operating}} systems map the null pointer's address such that accessing it causes a segmentation fault.|$|E
40|$|The 2010 CWE/SANS Top 25 Most Dangerous <b>Programming</b> <b>Errors</b> {{is a list}} of {{the most}} {{widespread}} and critical <b>programming</b> <b>errors</b> that can lead to serious software vulnerabilities. They are often easy to find, and easy to exploit. They are dangerous because they will frequently allow attackers to completely take ove...|$|R
50|$|If the {{business}} application error occurred due to <b>programming</b> <b>errors,</b> then a request is {{created for the}} application development team to correct <b>programming</b> <b>errors.</b> If {{the business}} user needs new features or functions in the business application, then the required analysis/design/programming/testing/release is planned and {{a new version of}} the business software is deployed.|$|R
50|$|Most {{assembly}} languages {{will have}} a macro instruction or an interrupt address available for the particular system to intercept events such as illegal op codes, <b>program</b> check, data <b>errors,</b> overflow, divide by zero, and other such. IBM and Univac mainframes had the STXIT macro. Digital Equipment Corporation RT11 systems had trap vectors for <b>program</b> <b>errors,</b> i/o interrupts, and such. DOS has certain interrupt addresses. Microsoft Windows has specific module calls to trap <b>program</b> <b>errors.</b>|$|R
50|$|Not every {{program that}} misuses {{authority}} is a confused deputy. Sometimes {{misuse of authority}} is simply {{a result of a}} <b>program</b> <b>error.</b> The confused deputy problem occurs when the designation of an object is passed from one program to another, and the associated permission changes unintentionally, without any explicit action by either party. It is insidious because neither party did anything explicit to change the authority.|$|E
50|$|The ATV was {{initially}} planned to undock from the ISS on 25 September 2012. However, a command <b>program</b> <b>error</b> during the undocking procedure delayed the release, and Edoardo Amaldi {{did not actually}} undock until 21:44 GMT on 28 September. The spacecraft finally deorbited and performed a destructive re-entry over the Pacific Ocean on 4 October 2012, taking with it a payload of station waste.|$|E
50|$|Cassini never {{listened to}} channel A {{because of a}} {{software}} design error. The receiver on the orbiter was never commanded to turn on, according to officials with the European Space Agency. ESA announced that the <b>program</b> <b>error</b> was a mistake on their part, the missing command {{was part of a}} software program developed by ESA for the Huygens mission, and that it was executed by Cassini as delivered.|$|E
2500|$|Critical <b>Programming</b> <b>Errors</b> {{can also}} be {{classified}} per CISQ Characteristics. Basic example below: ...|$|R
5000|$|Memory {{corruption}} {{is one of}} the most intractable class of <b>programming</b> <b>errors,</b> for two reasons: ...|$|R
5000|$|While {{they are}} powerful, {{it is easy}} to make <b>programming</b> <b>errors</b> that damage the database.|$|R
50|$|K731 Baek Sang Eo (White Shark) torpedo (Hangul: 백상어 어뢰) is a submarine-launched torpedo {{developed}} by the Republic of Korea Navy in 2004. Production was delayed for a year after a <b>program</b> <b>error</b> in the guidance system resulted in 2 failed tests in 2003. This glitch was fixed while developing the Blue Shark torpedo; a more lightweight variant. Production cost for each torpedo is at about 950 million won (US$790,000).|$|E
50|$|In computing, a <b>program</b> <b>error</b> {{may result}} from an attempt to divide by zero. Depending on the {{programming}} environment {{and the type of}} number (e.g. floating point, integer) being divided by zero, it may generate positive or negative infinity by the IEEE 754 floating point standard, generate an exception, generate an error message, cause the program to terminate, result in a special not-a-number value, a freeze via infinite loop, or a crash.|$|E
50|$|Menus {{generated}} object code. A menu {{is simply}} a very specific screen format with a companion message member suffixed with two pound signs ("##") to contain the {{action to be taken}} when theassociated number was chosen. System/36 menus allowed the operator to choose numbers between 1 and 24. On the System/36, a programmer could customize a menu using screen format language, but calling a customized menu that did not conform to exacting system requirements could cause a <b>program</b> <b>error.</b>|$|E
5000|$|These in turn {{are often}} caused by <b>programming</b> <b>errors</b> {{that result in}} invalid memory access: ...|$|R
5000|$|Dawn entered {{safe mode}} {{due to a}} <b>programming</b> <b>error</b> during its February 17, 2009 Mars flyby.|$|R
40|$|Advanced static-analysis {{tools for}} finding <b>programming</b> <b>errors</b> {{have become very}} popular recently. These detect many common generic <b>programming</b> <b>errors</b> such as null pointer dereferences, buffer overruns, and race conditions. Most major static-analysis tools also provide an {{interface}} {{that can be used}} to find domain-specific errors. This paper describes how custom domain-specific checkers can be used to improve software quality in complex embedded systems. 1...|$|R
50|$|If we (hypothetically) {{run this}} maxim through a {{recursive}} computer algorithm, {{it would cause}} <b>program</b> <b>error.</b> For, if Dada does not obey this rule then Dada {{would be free to}} follow any rules (a direct refutation of this maxim), but if it obeys this maxim then {{there is at least one}} rule which it is following (a contradiction). In the language of computer programming this is fatal (it prevents an exit condition from being met) but for the artist this might be the ultimate goal of his/her art.|$|E
5000|$|A {{watchdog}} timer (sometimes called a computer operating properly or COP timer, {{or simply a}} watchdog) is an electronic timer {{that is used to}} detect and recover from computer malfunctions. During normal operation, the computer regularly resets the {{watchdog timer}} to prevent it from elapsing, or [...] "timing out". If, due to a hardware fault or <b>program</b> <b>error,</b> the computer fails to reset the watchdog, the timer will elapse and generate a timeout signal. The timeout signal is used to initiate corrective action or actions. The corrective actions typically include placing the computer system in a safe state and restoring normal system operation.|$|E
5000|$|The {{information}} obtained and logged by Dr. Watson is the information needed by technical support personnel to diagnose a <b>program</b> <b>error</b> {{for a computer}} running Windows. A text file (usually [...] ) is created whenever an error is detected, and can be delivered to support personnel by the method they prefer. A crash dump file can also be created, which is a binary file that a programmer can load into a debugger. Dr. Watson {{can be made to}} generate more exacting information for debugging purposes if the appropriate symbol files are installed and the symbol search path (environment variable) is set.|$|E
5000|$|Eliminating {{opportunities}} for <b>programming</b> <b>errors</b> and divergent {{interpretations of the}} specification, esp. between IP and SoC teams ...|$|R
5000|$|Debugging and (structured) {{exception}} handling - tracking down and fixing <b>programming</b> <b>errors</b> in an application under development.|$|R
40|$|International audienceFinding {{and fixing}} <b>programming</b> <b>errors</b> in {{deployed}} software {{is often a}} slow, painstaking, and expensive process. In order to minimise this problem, static analysis is increasingly being adopted {{as a way to}} find <b>programming</b> <b>errors</b> before the software application is released. Coccinelle is a program matching and transfor-mation tool that makes it easy for developers to express static analysis-based software defect-finding rules and scan software source code for potential defects...|$|R
5000|$|Where 14 was the {{operation}} code {{for this type}} of read, 200000 was the lowest store location the data would be read to, 00 indicates that no register modification was to be done to the A or B addresses of the instruction, and 77 was the (fixed) device identifier of the paper tape reader. (Note - 77 used as a device ID for a write operation would direct the write to the operator's teleprinter. Embarrassing if this was due to a <b>program</b> <b>error,</b> and it was a large data block intended for mag tape.....) The last four octal characters (0000) were not required in this instruction, and would be ignored when the instruction was processed. Such [...] "spare" [...] characters were frequently, given the extremely limited main store available used by programmers to store constants.|$|E
50|$|The NCR 315-100 was {{the second}} version of the {{original}} 315. It too had a 6 microsecond clock cycle, and from 10,000 to 40,000 slabs of memory. The 315-100 series console I/O incorporated a Teletype printer and keyboard {{in place of the}} original 315's IBM typewriter. The primary difference between the older NCR 315 and the 315-100 was the inclusion of the Automatic Recovery Option (ARO). One of the problems with early generation of computers was that when a memory or <b>program</b> <b>error</b> occurred, the system would literally turn on a red light and halt. The normal recovery process was to copy all register and counter setting from the console light panel, and to restart the program that was running {{at the time of the}} error. Usually the restart was from the very beginning of the program.|$|E
5000|$|The {{committee}} {{referred to}} the resulting specification as a [...] "condition system" [...] rather than an [...] "error system" [...] {{in order to accommodate}} a single system for handling exceptional situations of various kinds, whether fatal or non-fatal, whether continuable or not, and whether the result of <b>program</b> <b>error</b> or mere resource limitation (such as stack overflow). [...] Conditions are [...] "signaled" [...] {{at one point in the}} code and may be handled at another point. This usage of the term [...] "signal" [...] is different from the typical operating system's notion of signals (except on Lisp machines where this variant usage of the term evolved); the operating system notion of signaling was out of scope for this committee, and consequently was not addressed in the ANSI Common Lisp standard. Asynchronous interrupts and IEEE floating point trapping was also out of scope for this committee's work and was not addressed in the standard.|$|E
50|$|Program {{analysis}} {{is the general}} problem of examining a program and determining key characteristics (such as the absence of classes of <b>program</b> <b>errors).</b> <b>Program</b> transformation {{is the process of}} transforming a program in one form (language) to another form.|$|R
40|$|As {{evidenced}} by the popularity of MPI (Message Passing Interface), message passing is an effective programming technique for managing coarse-grained concurrency on distributed computers. Unfortunately, debugging message-passing applications can be difficult. Software complexity, data races, and scheduling dependencies can make <b>programming</b> <b>errors</b> challenging to locate with manual, interactive debugging techniques. This article describes Umpire, a new tool for detecting <b>programming</b> <b>errors</b> at runtime in message passing applications. Umpire monitors the MPI operations of an application by interposing itself between the application and the MPI runtime system using the MPI profiling layer. Umpire then checks the application's MPI behavior for specific errors. Our initial collection of <b>programming</b> <b>errors</b> includes deadlock detection, mismatched collective operations, and resource exhaustion. We present an evaluation {{on a variety of}} applications that demonstrates the effectiveness of t [...] ...|$|R
25|$|Critical <b>Programming</b> <b>Errors</b> are {{specific}} architectural and/or coding bad practices {{that result in}} the highest, immediate or long term, business disruption risk.|$|R
