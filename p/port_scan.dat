86|224|Public
25|$|Despite this, the {{probability}} of a <b>port</b> <b>scan</b> alone followed by a real attack is small. The probability of an attack is much higher when the <b>port</b> <b>scan</b> is associated with a vulnerability scan.|$|E
25|$|A <b>port</b> <b>scan</b> or portscan is {{a process}} that sends client {{requests}} to a range of server port addresses on a host, with the goal of finding an active port; this is not a nefarious process in and of itself. The majority of uses of a <b>port</b> <b>scan</b> are not attacks, but rather simple probes to determine services available on a remote machine.|$|E
25|$|The threat level {{caused by}} a <b>port</b> <b>scan</b> can vary greatly {{according}} to the method used to scan, the kind of port scanned, its number, {{the value of the}} targeted host and the administrator who monitors the host. But a <b>port</b> <b>scan</b> is often viewed as a first step for an attack, and is therefore taken seriously because it can disclose much sensitive information about the host.|$|E
40|$|Most network attackers perform <b>port</b> <b>scanning</b> individually, without synchronization, to find victim hosts. Such <b>port</b> <b>scanning</b> schemes {{suffer from}} two problems: first, {{there are too}} many {{duplicate}} scannings and too much contention among different port scanners; second, a complete <b>port</b> <b>scanning</b> {{takes a long time to}} finish. In this paper, we present a fast DHT-based collaborative <b>port</b> <b>scanning</b> scheme that aims to eliminate duplicate scanning, minimize contention, and significantly increase the scanning speed. In collaborative attacks, attackers communicate and collaborate with each other to launch much more powerful attacks. In the DHT-based collaborative <b>port</b> <b>scanning</b> scheme, attackers collaborate to search the network for ports that could be exposed to attacks. We propose different collaborative scanning strategies and analyze their advantages and disadvantages. We discuss the static, dynamic, and hybrid target selection and allocation schemes. We present the algorithm details and discuss the stop and revisit policy for the collaborative port scanners. We conduct experiments to evaluate the performance and overhead of the collaborative <b>port</b> <b>scanning</b> strategies. Experimental results suggest that the proposed collaborative <b>port</b> <b>scanning</b> system significantly increases the efficiency of <b>port</b> <b>scanning</b> and provide insights into many design and implementation issues...|$|R
40|$|Abstract—Wired and {{wireless}} networks are being attacked and hacked on continuous basis. One {{of the critical}} pieces of information the attacker needs to know is the open ports on the victim’s machine, thus the attacker does what is called <b>port</b> <b>scanning.</b> <b>Port</b> <b>scanning</b> {{is considered one of}} the dangerous attacks that intrusion detection tries to detect. Snort, a famous network intrusion detection system (NIDS), detects a <b>port</b> <b>scanning</b> attack by combining and analyzing various traffic parameters. Because these parameters cannot be easily combined using a mathematical formula, fuzzy logic can be used to combine them; fuzzy logic can also reduce the number of false alarms. This paper presents a novel approach, based on fuzzy logic, to detect <b>port</b> <b>scanning</b> attacks. A fuzzy logic controller is designed and integrated with Snort in order to enhance the functionality of <b>port</b> <b>scanning</b> detection. Experiments are carried out in both wired {{and wireless}} networks. The results show that applying fuzzy logic adds to the accuracy of determining bad traffic. Moreover, it gives a level of degree for each type of <b>port</b> <b>scanning</b> attack. Index Terms—Intrusion Detection System, Fuzzy Logic, <b>Port</b> <b>Scanning,</b> Snort. I. INTRODUCTION AND RELATED WORK Nowadays, using computers and computer networks in all communities all over the world has mad...|$|R
40|$|Abstract—Intrusion {{detection}} is {{a mechanism}} {{used to detect}} various attacks on a wired or wireless network. <b>Port</b> <b>scanning</b> {{is one of the}} dangerous attacks that intrusion detection tries to detect. Snort, a famous network intrusion detection system (NIDS), detects a <b>port</b> <b>scanning</b> attack by combining and analyzing various traffic parameters. Because these parameters cannot be easily combined using a mathematical formula, fuzzy logic can be used to combine them; fuzzy logic can also reduce the number of false alarms. This paper presents a novel approach, based on fuzzy logic, to detect <b>port</b> <b>scanning</b> attacks. A fuzzy logic controller is designed and integrated with Snort in order to enhance the functionality of <b>port</b> <b>scanning</b> detection. Experiments are carried out in both wired and wireless networks. The results show that applying fuzzy logic adds to the accuracy of determining bad traffic. Moreover, it gives a level of degree for each type of <b>port</b> <b>scanning</b> attack...|$|R
2500|$|The {{information}} gathered by a <b>port</b> <b>scan</b> has many legitimate uses including network inventory and the verification {{of the security}} of a network. Port scanning can, however, also be used to compromise security. Many exploits rely upon port scans to find open ports and send specific data patterns in an attempt to trigger a condition known as a buffer overflow. [...] Such behavior can compromise {{the security of a}} network and the computers therein, resulting in the loss or exposure of sensitive information and the ability to do work.|$|E
50|$|The threat level {{caused by}} a <b>port</b> <b>scan</b> can vary greatly {{according}} to the method used to scan, the kind of port scanned, its number, {{the value of the}} targeted host and the administrator who monitors the host. But a <b>port</b> <b>scan</b> is often viewed as a first step for an attack, and is therefore taken seriously because it can disclose much sensitive information about the host.Despite this, the probability of a <b>port</b> <b>scan</b> alone followed by a real attack is small. The probability of an attack is much higher when the <b>port</b> <b>scan</b> is associated with a vulnerability scan.|$|E
5000|$|... #Caption: Zenmap, showing {{results for}} a <b>port</b> <b>scan</b> against Wikipedia ...|$|E
40|$|<b>Port</b> <b>scans</b> are {{continuously}} used by both {{worms and}} human attackers to probe for vulnerabilities in Internet facing systems. In this paper, {{we present a}} new method to efficiently detect TCP <b>port</b> <b>scans</b> in very high-speed links. The main idea behind our approach is to early discard those handshake packets that are not strictly needed to reliably detect <b>port</b> <b>scans.</b> We show that with {{just a couple of}} Bloom filters to track active servers and TCP handshakes we can easily discard about 85...|$|R
50|$|In some jurisdictions, {{unauthorized}} <b>port</b> <b>scanning</b> is illegal.|$|R
5000|$|The {{following}} propagation {{methods are}} sub-modules to the <b>port</b> <b>scanning</b> engine: ...|$|R
50|$|A <b>port</b> <b>scan</b> or portscan is {{a process}} that sends client {{requests}} to a range of server port addresses on a host, with the goal of finding an active port; this is not a nefarious process in and of itself. The majority of uses of a <b>port</b> <b>scan</b> are not attacks, but rather simple probes to determine services available on a remote machine.|$|E
5000|$|Similar to war dialing is a <b>port</b> <b>scan</b> under TCP/IP, which [...] "dials" [...] every TCP port {{of every}} IP address {{to find out}} what {{services}} are available. Unlike wardialing, however, a <b>port</b> <b>scan</b> will generally not disturb a human being when it tries an IP address, regardless of whether there is a computer responding on that address or not. Related to wardriving is warchalking, the practice of drawing chalk symbols in public places to advertise the availability of wireless networks.|$|E
5000|$|This {{technique}} {{can be used}} to <b>port</b> <b>scan</b> hosts discreetly, and {{to access}} specific ports that the attacker cannot access through a direct connection, for example with the nmap port scanner.|$|E
5000|$|Hide the {{computer}} from <b>port</b> <b>scans</b> by not responding to unsolicited network traffic ...|$|R
40|$|This paper {{describes}} an experimental approach {{to determine the}} correlation between <b>port</b> <b>scans</b> and attacks. Discussions in the security community often state that <b>port</b> <b>scans</b> {{should be considered as}} precursors to an attack. However, very few studies have been conducted to quantify the validity of this hypothesis. In this paper, attack data were collected using a test-bed dedicated to monitoring attackers. The data collected consist of <b>port</b> <b>scans,</b> ICMP scans, vulnerability scans, successful attacks and management traffic. Two experiments were performed to validate the hypothesis of linking <b>port</b> <b>scans</b> and vulnerability scans to the number of packets observed per connection. Customized scripts were then developed to filter the collected data and group them on the basis of scans and attacks between a source and destination IP address pair. The correlation of the filtered data groups was assessed. The analyzed data consists of forty-eight days of data collection for two target computers on a heavily utilized subnet. 1...|$|R
40|$|In today’s {{scenario}} due to {{advancement in}} computing power, technology, advance tools and coding techniques password cracking and finding vulnerability has become simpler. One {{of the most}} common techniques used by intruders is <b>port</b> <b>scanning,</b> by which attacker identifies running applications and makes entry in the system. In this paper the idea of random port selection is suggested to make the <b>port</b> <b>scanning</b> more difficult for intruder...|$|R
50|$|Network Utility {{uses the}} tools {{supplied}} in the unix directories {{for most of}} its functions, however for the <b>port</b> <b>scan</b> it uses a unix executable in its resources folder, stroke, found at Network Utility.app/Contents/Resources/stroke.|$|E
50|$|The {{primary purpose}} of port {{knocking}} is to prevent an attacker from scanning a system for potentially exploitable services by doing a <b>port</b> <b>scan,</b> because unless the attacker sends the correct knock sequence, the protected ports will appear closed.|$|E
50|$|The {{purpose of}} port {{scanning}} is finding the open ports on the computers {{that were found}} with a host scan. When a <b>port</b> <b>scan</b> is started on a network without making use {{of the results of}} a host scan, much time is wasted when many IP addresses in the address range are vacant.|$|E
40|$|Abstract- <b>Port</b> <b>scanning</b> {{is one of}} {{the most}} popular {{reconnaissance}} techniques that many attackers use to profile running services on a potential target before launching an attack. Many <b>port</b> <b>scanning</b> detection mechanisms have been suggested in literature. However, very little work has been done on generating <b>port</b> <b>scanning</b> benchmarks that researchers can use to test their detection methods. In this paper, we suggest a simulation framework using OMNeT++ to generate benchmarks that resemble real-life traffic. We approach the problem by dividing it into three modules (topology creation, good traffic generation, bad traffic generation), each of which we make realistic, similar to deployed and usable networks. Hence the resultant benchmark is annotated and made public...|$|R
50|$|Its list of {{features}} includes <b>port</b> <b>scanning,</b> transferring files, and port listening, {{and it can}} be used as a backdoor.|$|R
5000|$|These packets often contain {{unsolicited}} {{commercial or}} network control messages, or {{are the result}} of <b>port</b> <b>scans</b> and worm activities.|$|R
5000|$|The idle scan is a TCP <b>port</b> <b>scan</b> {{method that}} {{consists}} of sending spoofed packets to a computer {{to find out what}} services are available. This is accomplished by impersonating another computer called a [...] "zombie" [...] (that is not transmitting or receiving information) and observing the behavior of the ''zombie'' system.|$|E
5000|$|The [...] "Full Scan" [...] scans for viruses (comprehensive scan or quick scan), {{hard disk}} {{performance}} (Disk fragmentation scan and/or Desk cleanup scan) and network safety (open <b>port</b> <b>scan).</b> The [...] "Quick Scan" [...] only scans for viruses, only on specific {{areas on the}} computer. The quick scan is faster than the full scan, hence that appellation.|$|E
50|$|Nessus {{offers a}} non-{{intrusive}} scan, an intrusive scan that can harm the target, and a custom scan. A scan requires the IP addresses or domain {{names of the}} targets. Nessus begins with a <b>port</b> <b>scan</b> to identify the programs that are running and the operating systems of the targets. It ends with a report that specifies all open ports and their associated vulnerabilities.|$|E
5|$|Norton stealthed all ports, {{according}} to PC Magazine. <b>Port</b> <b>scans</b> were unsuccessful. The firewall blocked all exploit attempts by Core Impact.|$|R
2500|$|Teo, Lawrence (December, 2000). Network Probes Explained: [...] Understanding <b>Port</b> <b>Scans</b> and Ping Sweeps. Linux Journal, Retrieved September 5, 2009, from ...|$|R
50|$|Norton stealthed all ports, {{according}} to PC Magazine. <b>Port</b> <b>scans</b> were unsuccessful. The firewall blocked all exploit attempts by Core Impact.|$|R
50|$|In typical operation, Nessus {{begins by}} doing a <b>port</b> <b>scan</b> with one of its four {{internal}} portscanners (or it can optionally use AmapM or Nmap) to determine which ports are open on the target and then tries various exploits on the open ports. The vulnerability tests, available as subscriptions, are written in NASL(Nessus Attack Scripting Language), a scripting language optimized for custom network interaction.|$|E
50|$|The {{information}} gathered by a <b>port</b> <b>scan</b> has many legitimate uses including network inventory and the verification {{of the security}} of a network. Port scanning can, however, also be used to compromise security. Many exploits rely upon port scans to find open ports and send specific data patterns in an attempt to trigger a condition known as a buffer overflow. Such behavior can compromise {{the security of a}} network and the computers therein, resulting in the loss or exposure of sensitive information and the ability to do work.|$|E
50|$|Performing a <b>port</b> <b>scan</b> and OS {{identification}} (-O {{option in}} nmap) on the zombie candidate network {{rather than just}} a ping scan helps in selecting a good zombie. As long as verbose mode (-v) is enabled, OS detection will usually determine the IP ID sequence generation method and print a line such as “IP ID Sequence Generation: Incremental”. If the type is given as Incremental or Broken little-endian incremental, the machine is a good zombie candidate. That is still no guarantee that it will work, as Solaris and some other systems create a new IP ID sequence for each host they communicate with. The host could also be too busy. OS detection and the open port list can also help in identifying systems {{that are likely to}} be idle.|$|E
2500|$|Many Internet service {{providers}} restrict their customers' {{ability to perform}} <b>port</b> <b>scans</b> to destinations outside of their home networks. [...] This is usually covered {{in the terms of}} service or acceptable use policy to which the customer must agree. Some ISPs implement packet filters or transparent proxies that prevent outgoing service requests to certain ports. For example, if an ISP provides a transparent HTTP proxy on <b>port</b> 80, <b>port</b> <b>scans</b> of any address will appear to have port 80 open, regardless of the target host's actual configuration.|$|R
40|$|Neglecting network <b>port</b> <b>scans</b> {{could result}} in {{unavoidable}} consequences. Network attackers continuously monitor and check communication ports looking for any open port. To protect computers and networks, computers need to be safeguarded against applications that aren't required by any function currently in use. To accomplish this, the available ports and the applications utilizing them should be determined. This paper attempts to evaluate eight <b>port</b> <b>scanning</b> tools based on fifteen criterions. The criteria were reached after fully testing each tool. The outcomes of the evaluation process are discussed...|$|R
50|$|Many Internet service {{providers}} restrict their customers' {{ability to perform}} <b>port</b> <b>scans</b> to destinations outside of their home networks. This is usually covered {{in the terms of}} service or acceptable use policy to which the customer must agree. Some ISPs implement packet filters or transparent proxies that prevent outgoing service requests to certain ports. For example, if an ISP provides a transparent HTTP proxy on <b>port</b> 80, <b>port</b> <b>scans</b> of any address will appear to have port 80 open, regardless of the target host's actual configuration.|$|R
