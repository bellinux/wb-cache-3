1620|10000|Public
5|$|Stoppelman {{was born}} in Arlington, Virginia in 1977. His mother, Lynn, was an English teacher, and his father, John, was a {{securities}} lawyer. Stoppelman is Jewish. He attended a Reform temple {{as a child and}} had a Bar Mitzvah. As a child Stoppelman had an interest in computers and business and began investing in stocks at the age of 14. Stoppelman aspired to be a video game developer and took computer programming classes, where he learned the Turbo Pascal software <b>programming</b> <b>system.</b> He attended the University of Illinois at Urbana-Champaign and obtained a bachelor's degree in computer engineering in 1999. After graduating he took a job with @Home Network.|$|E
5|$|In April 1952, Shoup became Assistant Fiscal Director in the Office of the Fiscal Director, Headquarters Marine Corps. In this capacity, Shoup {{served under}} Major General William P. T. Hill, the Quartermaster General. Shoup was {{ordered by the}} Marine Corps Commandant General Lemuel C. Shepherd to {{establish}} a new fiscal office independent of Hill's authority. Shoup and Hill clashed frequently, but Shoup was nonetheless able {{to establish a new}}, independent Fiscal Division. He was promoted to brigadier general in April 1953, and in July he became Fiscal Director of the Marine Corps. He was involved in fiscal strategy hearings before the U.S. Congress, and established a <b>programming</b> <b>system</b> where officers researched and thought out programs before bringing them to Congress. This idea met with resistance from Marine leaders who favored going to the Hill to figure out the details of programs. While serving in this capacity, he was promoted to major general in September 1955.|$|E
5|$|Over {{the course}} of the {{construction}} of Test Track, numerous problems occurred causing delays in the ride opening. One problem that Imagineers had to overcome was that the wheels used on the ride vehicles could not stand up to the demand of the ride course and speed. This problem was resolved but a second, more severe problem caused the ride to be delayed by over a year. In order for Test Track to run with the highest hourly capacity possible, twenty-nine ride vehicles would be needed. The ride <b>programming</b> <b>system</b> could only handle operating a maximum of six cars over the layout of the ride. One by one, programmers were able to get the computer system able to run twenty-nine ride vehicles all at once. After these problems were resolved, Test Track soft-opened to the public on December 19, 1998. The ride was still prone to breakdowns and didn't officially open until March 17, 1997.|$|E
40|$|This work {{deals with}} {{building}} a <b>program</b> <b>system</b> for solving dynamic programming problems on a computer. The theoretical part describes dynamic programming {{as a tool}} used for optimizing multistage decision processes and dynamic programming problems implemented in the <b>program</b> <b>system.</b> The practical part describes the design {{and implementation of the}} <b>program</b> <b>system</b> and verification of its functionality...|$|R
5000|$|Conference on Object Oriented <b>Programming</b> <b>Systems</b> Languages and Applications archive Proceedings of the 20th annual ACM SIGPLAN {{conference on}} Object {{oriented}} <b>programming,</b> <b>systems,</b> languages, and applications http://portal.acm.org/citation.cfm?id=1094811.1094841&coll=GUIDE&dl=GUIDE&CFID=10871926&CFTOKEN=54412436 ...|$|R
40|$|The {{industrial}} robot's principal {{advantage over}} traditional automation is programmability. Robots can perform arbitrary sequences of pre-stored motions or of motions computed as functions of sensory input. This paper reviews requirements for and developments in robot <b>programming</b> <b>systems.</b> The key requirements for robot <b>programming</b> <b>systems</b> {{examined in the}} paper are {{in the areas of}} sensing, world modeling, motion specification, flow of control, and programming support. Existing and proposed robot <b>programming</b> <b>systems</b> fall into three broad categories: guiding systems in which the user leads a robot through the motions to be performed, robot-level <b>programming</b> <b>systems</b> in which the user writes a computer program specifying motion and sensing, and task-level <b>programming</b> <b>systems</b> in which the user specifies operations by their desired effect on objects. A representative sample of systems in each of these categories is surveyed in the paper...|$|R
25|$|TORRIX - a <b>programming</b> <b>system</b> for {{operations}} on vectors and matrices over arbitrary fields and of variable size by S.G. van der Meulen and M. Veldhorst.|$|E
25|$|Various {{other kinds}} of {{information}} are sent over the teletext protocol. For instance, Programme Delivery Control signals—used by video recorders for starting/stopping recording at the correct time even during changes in programming—are sent as teletext packets. A similar, but different, standard Video <b>Programming</b> <b>System</b> is also used for this purpose.|$|E
25|$|This {{combination}} of features – simple form layout, database abilities, {{and ease of}} programming – led to widespread use in many different roles. Some HyperCard users employed it as a <b>programming</b> <b>system</b> for rapid application development of applications and databases, others for building interactive applications with no database requirements, command and control systems, and many examples in the demoscene.|$|E
40|$|Theory, design, and {{implementation}} of <b>programming</b> <b>systems,</b> including languages, pro-gram logics, static and dynamic <b>program</b> analyses, runtime <b>systems,</b> and mechanized verifiers. My research focuses on <b>programming</b> <b>systems</b> that deliver greater performance and resilience by changing the underlying semantics {{of the program in}} ways that are still sound and principled...|$|R
40|$|Parallel {{programming}} is widely acknowledged {{to be more}} difficult than sequential programming. One {{reason for this is that}} parallel <b>programming</b> <b>systems</b> are more difficult to use than their sequential counterparts. In particular, few parallel <b>programming</b> <b>systems</b> can support the software engineering requirements of large applications. We intend to assess and compare the usability of a variety of parallel <b>programming</b> <b>systems</b> using a small suite of chained applications called the Cowichan Problems. 1 Introduction In their 1989 survey paper, Bal et al. listed more than 300 parallel <b>programming</b> <b>systems</b> [4]. A similar survey today could well uncover twice as many, but a poll of application programmers would probably find that the only ones in general use are data-parallel extensions to Fortran and procedural message-passing libraries of various flavours. It is therefore interesting to ask: why have so many parallel <b>programming</b> <b>systems</b> been developed, and why are most of them used so little? [...] ...|$|R
5000|$|August 1983 - July 1986, <b>System</b> <b>Program</b> Director, F-16 <b>System</b> <b>Program</b> Office, Aeronautical <b>Systems</b> Division, Wright-Patterson AFB, Ohio ...|$|R
25|$|Meta-genetic {{programming}} is the proposed meta learning technique of evolving a genetic <b>programming</b> <b>system</b> using genetic programming itself. It suggests that chromosomes, crossover, and mutation were themselves evolved, therefore like their real life counterparts {{should be allowed}} to change on their own rather than being determined by a human programmer. Meta-GP was formally proposed by Jürgen Schmidhuber in 1987. Doug Lenat's Eurisko is an earlier effort that may be the same technique. It is a recursive but terminating algorithm, allowing it to avoid infinite recursion.|$|E
25|$|Rohan Kewal Sajdeh (born 13 August 1974) is an Australian {{management}} consultant currently {{employed as a}} Senior Partner and Managing Director of the Boston Consulting Group (BCG), {{as well as a}} former first-class cricketer. Of Indian descent, and born in Darwin, Northern Territory, Sajdeh attended the University of Technology, Sydney, graduating with a bachelor's degree in business, before attending the University of Cambridge, where he received a Master of Philosophy degree, specializing in international relations. Whilst at Cambridge, he played for the Cambridge University Cricket Club in a first-class match against Kent, as well as in a friendly 50-over match against Oxford University. He also played field hockey for the university's First XI. Sajdeh later also obtained a Master of Management degree from the Kellogg School of Management at Northwestern University. Before being recruited to BCG, Sajdeh worked in positions at Enron India, Coca-Cola Amatil, and the Lend Lease Corporation. Based in Chicago, Sajdeh was a key participant in a BCG presentation to the International Cricket Council in 2009, which incorporated an overhaul of the current international <b>programming</b> <b>system.</b>|$|E
500|$|SAS sued World Programming, the {{developers}} of a competing implementation, World <b>Programming</b> <b>System,</b> alleging {{that they had}} infringed SAS's copyright in part by implementing the same functionality. This case was referred from the United Kingdom's High Court of Justice to the European Court of Justice on 11 August 2010. In May 2012, the European Court of Justice {{ruled in favor of}} World Programming, finding that [...] "the functionality of a computer program and the programming language cannot be protected by copyright." ...|$|E
40|$|An {{approach}} to the representation of structures in multilayered <b>program</b> <b>systems</b> is offered. The problem of architectural refactoring of multilayered <b>program</b> <b>system</b> {{for the purpose of}} increasing the productivity of the system is considered, while the mathematical problem definition and its decision are given...|$|R
5000|$|Object-Oriented <b>Programming,</b> <b>Systems,</b> Languages, and Applications (OOPSLA) ...|$|R
50|$|Bertrand, a {{language}} for building constraint <b>programming</b> <b>systems.</b>|$|R
2500|$|LOOPS (Lisp Object-Oriented <b>Programming</b> <b>System)</b> and {{the later}} CommonLOOPS ...|$|E
2500|$|Piaget {{also had}} a {{considerable}} effect {{in the field of}} computer science and artificial intelligence. [...] Seymour Papert used Piaget's work while developing the Logo programming language. Alan Kay used Piaget's theories {{as the basis for the}} Dynabook <b>programming</b> <b>system</b> concept, which was first discussed within the confines of the Xerox Palo Alto Research Center (Xerox PARC). These discussions led to the development of the Alto prototype, which explored for the first time all the elements of the graphical user interface (GUI), and influenced the creation of user interfaces in the 1980s and beyond.|$|E
2500|$|From August 5, 1964 to June 3, 1967, he was {{director}} of Navy program planning and scientific officer to the Center for Naval Analyses {{in the office of}} the chief of naval operations. As principal advisor to the Chief of Naval Operations on programming matters, he was recognized for his expertise on the Department of Defense <b>Programming</b> <b>System</b> and its application within the Department of the Navy. [...] "Through his extensive knowledge of the complex development of this system...Vice Admiral Holmes rendered valuable service in implementing organizational improvements in the areas of programming, planning, systems analysis, and financial management within the Department of the Navy, thereby contributing significantly to the United States mission in the Southeast Asian conflict." ...|$|E
5000|$|... 1993-1997: Vladimir Gurman, <b>Program</b> <b>Systems</b> Institute, RAS, Pereslavl-Zalessky ...|$|R
50|$|A {{spoofing}} attack involves one <b>program,</b> <b>system</b> or website that successfully masquerades as another by falsifying data and is thereby {{treated as a}} trusted system by a user or another program — usually to fool <b>programs,</b> <b>systems</b> or users into revealing confidential information, such as user names and passwords.|$|R
40|$|At {{present in}} the {{educational}} process of electrical engineering disciplines electronic learning program, providing control over reproductive educational-cognitive activity (the decision of standard problems) and universal modeling <b>program</b> <b>systems,</b> for instance Electronics Workbench, giving a chance of organizing productive, in particular research activity are basically used. However universal modeling <b>program</b> <b>systems</b> can not provide auto control over educational-cognitive activity because {{of the absence of}} the feedback with students. The combined didactic interactive <b>program</b> <b>system,</b> providing the closed directed auto control over both the reproductive and productive heuristic educational-cognitive activity of the student is offered...|$|R
2500|$|Apraxia {{of speech}} (AOS) is a neurogenic {{communication}} disorder affecting the motor <b>programming</b> <b>system</b> for speech production. Individuals with AOS demonstrate difficulty in speech production, specifically with sequencing and forming sounds. The Levelt model describes the speech production {{process in the}} following three consecutive stages: conceptualization, formulation, and articulation. According to the Levelt model, apraxia of speech would fall into the articulation region. The individual does not suffer from a language deficiency, but has difficulty {{in the production of}} language in an audible manner. Notably, this difficulty is limited to vocal speech, and does not affect sign-language production. The individual knows exactly what they want to say, but there is a disruption in {{the part of the brain}} that sends the signal to the muscle for the specific movement. [...] Individuals with acquired AOS demonstrate hallmark characteristics of articulation and prosody (rhythm, stress or intonation) errors. Coexisting characteristics may include groping and effortful speech production with self-correction, difficulty initiating speech, abnormal stress, intonation and rhythm errors, and inconsistency with articulation.|$|E
50|$|CWEB is a {{computer}} <b>programming</b> <b>system</b> created by Donald Knuth and Silvio Levy as a follow-up to Knuth's WEB literate <b>programming</b> <b>system,</b> using the C programming language (and {{to a lesser extent}} the C++ and Java programming languages) instead of Pascal.|$|E
50|$|BOOPSI (Basic Object Oriented <b>Programming</b> <b>System</b> for Intuition) is an {{object-oriented}} <b>programming</b> <b>system</b> for AmigaOS. It {{extends the}} AmigaOS windowing environment (Intuition) with an object-oriented subsystem allowing {{a hierarchy of}} object classes in which every class defines a single GUI widget or interface event.|$|E
40|$|Symbolic parser/grammar {{combinations}} can {{be viewed}} as <b>programming</b> <b>systems</b> for natural language processing applications. From this perspective, they can be compared with conventional <b>programming</b> <b>systems,</b> and seen to require more effort in the important development activities of testing and debugging. This paper describes tools associated with the RH (Retro-Hybrid) parser that facilitate these activities and are, to varying extents, more broadly applicable. The paper also suggests a new approach to improving parser efficiency using constrained inputs, based in part on one of the RH debugging tools. 1 Introduction 1 Developing general-purpose symbolic natural language parsers and grammars is difficult. One way of appreciating the difficulties is to view parser/grammar combinations as <b>programming</b> <b>systems</b> for natural language applications, and to compare them to traditional <b>programming</b> <b>systems.</b> From this perspective, it ca...|$|R
50|$|Fundamental Concepts of <b>Programming</b> <b>Systems,</b> Addison-Wesley, Reading MA, 1976.|$|R
40|$|A {{theoretical}} {{development and}} associated digital computer <b>program</b> <b>system</b> for the dynamic simulation and stability analysis of passive and actively controlled spacecraft are presented. The dynamic system (spacecraft) is modeled as an assembly of rigid and/or flexible bodies {{not necessarily in}} a topological tree configuration. The computer <b>program</b> <b>system</b> is used to investigate total system dynamic characteristics, including interaction effects between rigid and/or flexible bodies, control systems, and {{a wide range of}} environmental loadings. In addition, the <b>program</b> <b>system</b> is used for designing attitude control systems and for evaluating total dynamic system performance, including time domain response and frequency domain stability analyses...|$|R
5000|$|The IBM 1401 Symbolic <b>Programming</b> <b>System</b> (SPS) was an {{assembler}} {{that was}} developed by Gary Mokotoff, IBM Applied Programming Department, for the IBM 1401 computer, {{the first of the}} IBM 1400 series. One source indicates that [...] "This <b>programming</b> <b>system</b> was announced by IBM with the machine." ...|$|E
5000|$|MiniZinc (a {{high-level}} constraint <b>programming</b> <b>system,</b> BSD-style license) ...|$|E
5000|$|Given a {{programming}} task, if visual <b>programming</b> <b>system</b> A {{and visual}} <b>programming</b> <b>system</b> B {{may be used}} to accomplish all or parts of the task then A and B may use the same representation of the abstraction layer for the parts of the task they both can accomplish.|$|E
40|$|Robotised {{laser welding}} is an {{innovative}} joining technique which is increasingly finding applications, {{especially in the}} automotive industry. In {{order to reduce the}} time needed to prepare and programthe laser welding robot, off-line <b>programming</b> <b>systems</b> are used. The off-line <b>programming</b> <b>systems</b> currently available only allow kinematic simulations of the robot motion, which are insufficient for a proper a priori prediction of the ability to weld the seam as dynamic effects in the path tracking accuracy are not taken into account. Combining off-line <b>programming</b> <b>systems</b> and dynamic simulations of the robot motion makes it possible to predict the path tracking errors in advance...|$|R
40|$|We study {{a general}} proof-theoretical {{framework}} for logic programming, {{the so called}} uniform proofs. We consider several logic <b>programming</b> <b>systems</b> derived in a natural way from logical proof systems (namely, from classical, intuitionistic, minimal, positive, relevance, or paranormal sequent calculi). Our result is the construction of proof-theoretical logic <b>programming</b> <b>systems</b> for philosophically significant logics. ...|$|R
50|$|Employers {{generally}} seek applicants {{with strong}} <b>programming,</b> <b>systems</b> analysis and business skills.|$|R
