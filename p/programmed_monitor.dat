0|9161|Public
40|$|The {{purposes}} of this study were (I) to develop an annual <b>program</b> <b>monitoring</b> model for Cabot College of Applied Arts, Technology and Continuing Education, (2) to determine the suitability of Stufflebeam's Context Evaluation Model as the basis of the annual <b>program</b> <b>monitoring</b> model, (3) develop a set of indicators {{to be used in the}} annual <b>program</b> <b>monitoring</b> process and (4) test the model and indicators though the trial <b>monitoring</b> of two <b>programs</b> at Cabot College. [...] The indicators chosen reflected the views of individuals identified as decision makers at the College. Data were collected through questionnaires, interviews and analysis of documents to define a set of indicators for <b>program</b> <b>monitoring.</b> [...] The results indicate that Stufflebeam's Context Evaluation serves as an excellent guide for the development of an annual <b>program</b> <b>monitoring</b> process Indicators chosen have been found to be difficult to measure, but valuable information is made available when the information obtained in the monitoring process is analysed. [...] Recommendations are made for alternative data collection and analysis strategies in the monitoring process...|$|R
5000|$|Engineering {{workstation}} (EWS) for <b>programming.</b> <b>monitoring,</b> troubleshooting and updating.|$|R
50|$|Since 2004 the RAPID <b>program</b> <b>monitors</b> {{the ocean}} circulation.|$|R
40|$|<b>Program</b> <b>monitoring</b> is an {{important}} and necessary assessment practice {{within the field of}} early childhood deaf education. Effective <b>program</b> <b>monitoring</b> requires a focus on both the consistent implementation of intervention strategies (fidelity) and the assessment of children’s ongoing progress in response to interventions (progress monitoring). Teachers of the deaf and hard of hearing (TODs) who provide early intervention services need to conduct regular <b>program</b> <b>monitoring</b> to evaluate the merit of their efforts. However, progress monitoring is a practice often overlooked by practitioners within the field of early intervention. It is recommended that TODs monitor children’s progress “regularly,” but evidence of such practices by TODs is as yet unavailable. In this article, we describe how TODs can use both progress monitoring and fidelity checks to achieve the goal of effective <b>program</b> <b>monitoring</b> for young children who are deaf and hard of hearing...|$|R
5000|$|<b>Program</b> <b>monitors,</b> {{permitting}} full {{or partial}} <b>monitoring</b> of <b>program</b> code including: ...|$|R
50|$|From 1963 to 1966, he hosted {{portions}} of the NBC Radio <b>program</b> <b>Monitor.</b>|$|R
5000|$|In the 1960s, Wayne was a {{radio host}} on NBC's {{magazine}} <b>program</b> <b>Monitor.</b>|$|R
50|$|Electronic Surveillance Program (ESP): This is a jail {{diversion}} <b>program,</b> <b>monitoring</b> offenders {{under house}} arrest.|$|R
50|$|The Healthy Streams for Angelenos <b>program</b> <b>monitors</b> and {{researches}} watershed health, {{and works}} toward watershed habitat restoration.|$|R
5000|$|General Director of Evaluation and Social <b>Program</b> <b>Monitoring,</b> Secretariat of Social Development (SEDESOL), July 2002- November 2005 ...|$|R
25|$|Jones {{opened a}} {{modeling}} school, {{and she also}} began appearing regularly on NBC's weekend radio news <b>program</b> <b>Monitor.</b>|$|R
25|$|The USGS National Geomagnetism <b>Program</b> <b>monitors</b> the {{magnetic}} field at magnetic observatories and distributes magnetometer data in real time.|$|R
5000|$|... 1983-became Tribal <b>Program</b> <b>Monitor</b> {{to oversee}} and assure {{contract}} compliance of all federally funded programs {{being run by}} the tribe.|$|R
2500|$|For {{several years}} during the 1960s, he contributed [...] "Sport of Speed" [...] {{segments}} twice each weekend to the NBC Radio Network <b>program</b> <b>Monitor.</b>|$|R
40|$|<b>Program</b> <b>monitoring</b> and {{steering}} systems can provide invaluable {{insight into the}} behavior of complex parallel and distributed applications. But the traditional event-streambased approach to <b>program</b> <b>monitoring</b> does not scale well with increasing complexity. This paper introduces the Mirror Object Model, a new approach for <b>program</b> <b>monitoring</b> {{and steering}} systems. This approach provides a higher-level object-based abstraction that links the producer and the consumer of data and provides a seamless model which integrates monitoring and steering computation. We also introduce the Mirror Object Steering System (MOSS), an implementation of the Mirror Object Model based on CORBAstyle objects. This paper demonstrates the advantages of MOSS over traditional event-stream-based monitoring systems in handling complex situations. Additionally, we show that the additional functionality of MOSS can be achieved without significant performance penalty. 1 Introduction As applications have grown more com [...] ...|$|R
40|$|This guide offers educators, program managers, administrators, and {{researchers}} {{a resource for}} building capacity for <b>monitoring</b> <b>program</b> outcomes. It provides concise definitions of <b>program</b> <b>monitoring</b> components and a framework for assessing program progress. Examples demonstrate the relationships among program components: outcomes, indicators, measures (including benchmarks and baselines), and targets. Policymakers and practitioners can use the framework to better <b>monitor</b> and evaluate <b>programs</b> and thus to make better data-informed decisions. A crucial step in understanding a program’s effectiveness is to establish an ongoing plan for measuring and evaluating its progress. A <b>program</b> <b>monitoring</b> framework can provide a means to gauge whether a program has been successful. <b>Program</b> <b>monitoring</b> can be understood by its components—outcomes, indicators, measures (including benchmarks and baselines), and targets. This guide defines these components and explains how they relate {{to one another in}} program evaluation. It also provides a framework for assessing program progress. By following this <b>program</b> <b>monitoring</b> framework, educators can better <b>monitor</b> and evaluate <b>programs</b> and thus make better data-informed decisions. This guide is one of a four-part series on <b>program</b> planning and <b>monitoring</b> released by Regional Educa-tional Laboratory Pacific. 1 Other guides in this series provide information on logic models and their use in program evaluation. Logic models are useful tools to help educators identify what is being done and why. A natural follow-up might be to gauge whether program efforts have been successful. Examining outcomes, key components of logic models, is one way to do that...|$|R
5000|$|... develop {{procedures}} for approval of new <b>programs,</b> <b>monitoring</b> and evaluation, departmental review, student feedback, employer feedback, quality assurance of various degree programs, subject review, and qualification framework.|$|R
50|$|The Independent Unit for the Management of European and Development <b>Programs,</b> <b>monitoring</b> the {{execution}} of the Budget and the sound financial management of all services of the Ministry.|$|R
40|$|Abstract. We {{consider}} the enforcement powers of <b>program</b> <b>monitors,</b> which intercept security-sensitive {{actions of a}} target application at run time and take remedial steps whenever the target attempts to execute a potentially dangerous action. A common belief in the security community is that <b>program</b> <b>monitors,</b> regardless of the remedial steps available to them when detecting violations, can only enforce safety properties. We formally analyze the properties enforceable by various <b>program</b> <b>monitors</b> and find that although this belief is correct when considering monitors with simple remedial options, it is incorrect for more powerful monitors that can be modeled by edit automata. We define an interesting set of properties called infinite renewal properties and demonstrate how, when given any reasonable infinite renewal property, to construct an edit automaton that provably enforces that property. We analyze the set of infinite renewal properties and show that it includes every safety property, some liveness properties, and some properties that are neither safety nor liveness. ...|$|R
50|$|In {{the late}} 1950s, Kirkwood, {{who has a}} star on the Hollywood Walk of Fame at 1620 Vine Street, {{was one of the}} reporters on the popular NBC Radio <b>program</b> <b>Monitor.</b>|$|R
25|$|Similarly, there's a man-eating shark {{in these}} waters is nearly the {{opposite}} of there's a man eating shark at table 6; {{the first is a}} shark, and the second a man. A government-monitoring program is a <b>program</b> that <b>monitors</b> the government, whereas a government <b>monitoring</b> <b>program</b> is a government <b>program</b> that <b>monitors</b> something else.|$|R
40|$|Abstract: This {{publication}} continues {{a series}} of papers devoted to {{the description of the}} system and functional software of the package of applied programs REACTOR. A machine independent version of the <b>program</b> <b>monitor</b> is presented. This monitor supports automatic execution of a dynamic chain of program modules. Described ideas and procedures can serve as a basis for the operation of a program package of a big number of separate modules. Source codes of the monitor are written in standard C and Fortran- 77. No language mixture, non-standard tools or features are used. In this sense the <b>program</b> <b>monitor</b> is machine independent. Note: Publication language:russia...|$|R
30|$|In the {{licensing}} literature these child care benchmarks are usually {{referred to as}} key indicators (Fiene, 2013). Please see Figure 1 which delineates where within a <b>program</b> <b>monitoring</b> system these benchmarks would appear and could be utilized.|$|R
5000|$|The Oglala Sioux Tribe website reports 3 to 4 [...] "seasonal {{openings}} each year." [...] The of Dams <b>Program</b> <b>monitors</b> the Dam's {{water levels}} and flows for {{early detection of}} major dam breach/breaks or severe flood emergencies." ...|$|R
40|$|Profilers are a {{class of}} <b>program</b> <b>monitoring</b> tools which aid in tuning performance. Profiling tools which employ PC (Program Counter) {{sampling}} to <b>monitor</b> <b>program</b> dynamics are popular owing to their low overhead. However, the effec-tiveness of such profilers depends on the accuracy and coin-pletenes of the measurements made. We study the method-ology aiid effectiveness of PC sampling based software profil...|$|R
50|$|After leaving CBS in 1988, Socolow {{developed}} the Christian Science <b>Monitor</b> <b>program</b> World <b>Monitor</b> and produced programsfor the Discovery Channel, including Cronkite Reports, and for PBS.|$|R
50|$|Lingualeo offers {{training}} materials designed for fast learning progress. Users complete exercises {{that allow them}} to learn grammar, increase vocabulary, and improve reading and listening comprehension. They can also track their learning progress using the <b>program’s</b> <b>monitoring</b> tools.|$|R
50|$|The Sexual Predator Identification and Notification {{program was}} also instituted in 1999 {{to comply with}} the Florida Sexual Predator Act. The <b>program</b> <b>monitors</b> these {{offenders}} and tracks them using a sophisticated computer database and is administered by Firehouse officers.|$|R
50|$|Using load balancing, both links {{can be in}} use all the time. A device or <b>program</b> <b>monitors</b> the {{availability}} of all links and selects the path for sending packets. The use of multiple links simultaneously increases the available bandwidth.|$|R
40|$|Quality {{assurance}} program of study requires time, dedication, effort, innovative thinking and creativity. Competitive research <b>programs</b> <b>monitored</b> by {{quality assurance system}} to create the desired results {{on the relationship between}} learning and teaching methods and assessment. system assurance, university programs...|$|R
50|$|In {{the early}} 1960s, Allen hosted the three-hour Saturday morning {{segment of the}} weekend NBC Radio <b>program</b> <b>Monitor.</b> He also contributed sportscasts to the program until the late 1960s. Allen also {{provided}} voiceover narration for Fox Movietone newsreels for many years.|$|R
50|$|LICADHO {{currently}} pursues {{its activities}} through two <b>programs,</b> <b>Monitoring</b> and Protection and Promotion and Advocacy. The organization employed over 125 staff nationwide {{at the end}} of 2012.Dr. Pung Chhiv Kek is the current President of LICADHO. Naly Pilorge is the director.|$|R
40|$|This {{document}} {{provides the}} basis for the Hydrologic <b>Monitoring</b> <b>Program</b> (HMP) for the Puna Geothermal Venture. The HMP is complementary to two additional environmental compliance <b>monitoring</b> <b>programs</b> also being submitted by Puma Geothermal Venture (PGV) for their proposed activities at the site. The other two programs are the Meteorology and Air Quality <b>Monitoring</b> <b>Program</b> (MAQMP) and the Noise <b>Monitoring</b> <b>Program</b> (NMP), being submitted concurrently...|$|R
40|$|Software is {{becoming}} increasingly complex. Visualisation, which presents a high level view of a system, can assist programmers in constructing, debugging and maintaining programs, {{as well as being}} a useful teaching aid. To create visualisations of running programs, it is necessary to have access to program run-time information. Traditional means of collecting <b>program</b> <b>monitoring</b> information suffer from a range of problems, from not being able to collect a wide enough range of information, to being too intrusive by requiring modification of existing tools and source files. We present Inspect J, which is a program visualisation system that uses AspectJ to collect <b>program</b> <b>monitoring</b> information for visualisation. AspectJ is a Java-based aspect-oriented language. Its advantages are that it is non-intrusive, and therefore does not require modification of existing tools or source files, and that it is easy to use, by virtue of being Java-based. To explore and evaluate AspectJ for collecting object-oriented <b>program</b> <b>monitoring</b> information, we used AspectJ pointcuts and advice to create various visualisations in InspectJ. These visualisations include UML sequence diagrams of running programs and algorithm animations of sorting algorithms. With Inspect J, we also created domain specific visualisations for a Library system written in Java...|$|R
40|$|The {{distributed}} learning is an instructional model that allows instructor, students, and {{content to be}} located in different nodes in the global network. The authors’ main idea is to organize a {{distributed learning}} environment (DLE) based on information and communication resources of global network {{in combination with the}} technologies for virtual reality and 3 D simulation. In this reason a conceptual model of the DLE architecture and learning processes is defined, and preliminary investigation is carried out. The {{purpose of this paper is}} to present an evaluation of information servicing in DLE by using stochastic model designed on the base of the results from <b>program</b> <b>monitoring.</b> A formalization of the DLE processes is made and a stochastic model based on the apparatus of Markov’s chains and queuing theory is designed. The results obtained from <b>program</b> <b>monitoring</b> are used for determination of the values of the basic model parameters to secure high model adequacy. The <b>program</b> <b>monitoring</b> is realized by using two program applications and a preliminary statistical analysis is made. Finally, an evaluation of the information servicing in DLE is realized and the obtained assessment are presented in suitable manner...|$|R
40|$|<b>Program</b> <b>monitors</b> enforce {{security}} policies by interposing {{themselves into}} the control flow of untrusted software whenever that software attempts to execute security-relevant actions. At the point of interposition, a monitor has authority to permit or deny (perhaps conditionally) the untrusted software’s attempted action. <b>Program</b> <b>monitors</b> are common security enforcement mechanisms and integral parts of operating systems, virtual machines, firewalls, network auditors, and anti-virus and anti-spyware tools. Unfortunately, the run-time policies we require <b>program</b> <b>monitors</b> to enforce grow more complex both as the monitored software is given new capabilities and as policies are refined in response to attacks and user feedback. We propose dealing with policy complexity by organizing policies {{in such a way}} as to make them composable, so that complex policies can be specified more simply as compositions of smaller subpolicy modules. We present a fully implemented language and system called Polymer that allows security engineers to specify and enforce composable policies on Java applications. We formalize the central workings of Polymer by defining an unambiguous semantics for our language. Using this formalization, we state and prove an uncircumventability theorem, which guarantees that monitors will intercept all security-relevant actions of untrusted software...|$|R
