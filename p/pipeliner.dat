8|9|Public
50|$|Burns {{has worked}} in many fields {{including}} lumberjack, <b>pipeliner,</b> heavy equipment operator, hydrostatic tester, private investigator, Olan Mills portrait photographer, karate instructor, motorcycle racer, door installer, salesman and amusement park supervisor until he broke into the movie stunt business.|$|E
50|$|Duncan {{was born}} in 1933 in rural Shelby County, Texas. His father was a farmer. His mother died of {{tuberculosis}} when he was seven and his brother died of blood poisoning in the same year. He lived with his grandmother until he graduated from Shelbyville High School. He joined his father as a <b>pipeliner</b> and roughneck in {{the oil and gas}} fields. Soon after his father also died of leukemia. Duncan served in the U.S. Army during the Korean War and when he returned in 1955, using the G.I. Bill, he studied business, finance and accounting at Massey Business College in Houston while also working at the U.S. Post Office.|$|E
40|$|In {{optimizing}} {{the code}} for high-performance processors, software pipelining of innermost loops is of fundamental importance. In order {{to benefit from}} software pipelining, it is essential to: (i) find the rate-optimal legal schedule, and (ii) allocate registers to the found schedule (it must fit into {{the limited number of}} available machine registers). This thesis deals with the development of a software <b>pipeliner</b> that produces the best possible schedules in terms of required registers, thus, assisting register allocation. Software pipelining and register allocation can be formulated as an integer linear programming (ILP) problem, aiming to produce optimal schedules. In this thesis, we discuss the application of the integer linear programming to software pipelining and design a <b>pipeliner</b> for the MIPS R 8000 superscalar microprocessor. We extended the previously developed ILP framework to a full software pipelining implementation by: (1) establishing an ILP model for the R 8000 processor, (2) implementing the model in Modulo Scheduling ToolSet (MOST), (3) integrating it into the MIPSpro compiler, (4) successfully producing real code and gathering runtime statistics, and (5) developing and implementing a model for optimization of the memory system behavior on the R 8000 processor. The ILP-based software <b>pipeliner</b> was tested as a functional replacement for the original MIPSpro software <b>pipeliner.</b> Our results indicate a need of improving the ILP formulation and its solution: (1) the existing technique failed to produce results for loops with large instruction counts, (2) it was not able to guarantee register optimality for many interesting and important loops, for which optimal scheduling is necessary in order to avoid spilling, (3) the branching order, in which an ILP solver traverses the branch-and-bound tree, was a single significant factor that affected the ILP solution time, leading to a conclusion that exploiting scheduling problem structure is essential for improving the efficiency of the ILP problem solving in the future...|$|E
50|$|Additionally, Castillo {{served as}} the {{pitching}} coach for the South Louisiana <b>Pipeliners</b> of the Continental Baseball League during its 2009 season.|$|R
50|$|The South Louisiana <b>Pipeliners</b> were a minor-league {{baseball}} team based in Morgan City, Louisiana. The team played during the 2009 {{season in the}} Continental Baseball League.|$|R
50|$|Carney's {{contacts}} with {{the oil and gas}} industry resulted in her being commissioned to conduct a survey of local opinion about the installation of a gas pipeline along the Mackenzie River Valley. Carney organised an information tour of the valley with stops at all the river settlements where the fly-in <b>pipeliners</b> conducted workshops explaining to the local people details about the pipeline project. The <b>pipeliner's</b> tour was shadowed by the president of the Northwest Territories Indian Brotherhood president James Wah-shee and was seen in native rights circles as a demonstration of the Brotherhood's aim to be consulted before any pipeline work started. Shortly after this tour the Brotherhood applied for a development caveat to stop all development on treaty land. This caveat eventually led to the pipeline inquiry which resulted in the project being shelved.|$|R
40|$|Modulo {{scheduling}} is {{a software}} pipelining technique known for producing high quality schedules. However, besides being complex to implement, it is traditionally {{much more expensive}} to run than block scheduling, since scheduling is attempted for increasing values of the initiation interval until a valid local schedule is obtained. We show how modulo scheduling can be implemented so that the partial schedules produced for a given value of the initiation interval can be reused in the following attempts to produce a local schedule at higher values of the initiation interval. The technique is fully implemented under the simplex scheduling framework {{as part of a}} DEC Alpha 21064 software <b>pipeliner.</b> Experimental data collected from this implementation shows the practicality of our approach. R'esum'e Le modulo scheduling est une technique de pipeline logiciel connue pour produire des ordonnancements de haute qualit'e. Cependant, en plus d'etre difficile `a mettre en oeuvre, elle est tradition [...] ...|$|E
40|$|In parallelizing {{the code}} for {{high-performance}} processors, software pipelining of innermost loops is of fundamental importance. In order {{to benefit from}} software pipelining, two separate tasks need to be performed: (i) software pipelining proper (find the rate-optimal legal schedule), and (ii) register allocation (allocate registers to the found schedule). Software pipelining and register allocation can be formulated as an integer linear programming (ILP) problem, aiming to produce optimal schedules. In this paper, we discuss {{the application of the}} integer linear programming to software pipelining on the MIPS R 8000 superscalar microprocessor. Some of the results were presented in the PLDI 96 [14], where they were compared to the MIPSpro software <b>pipeliner.</b> In this paper we further extend the ILP model for the MIPS R 8000 by including memory optimization and present the entire model in detail. 1 Introduction In the recent years, the concept of instruction-level parallelism played a cen [...] ...|$|E
40|$|Software {{pipelining}} is a loop scheduling {{technique that}} extracts parallelism out of loops by overlapping {{the execution of}} several consecutive iterations. Due to the overlapping of iterations, schedules impose high register requirements during their execution. A schedule is valid if it requires at most the number of registers available in the target architecture. If not, its register requirements have to be reduced either by decreasing its execution rate or by spilling data to memory. In this paper we describe a set of heuristics to increase the quality of register [...] constrained modulo schedules. The heuristics decide between the two previous alternatives and define criteria for effectively selecting spilling candidates. The heuristics proposed for reducing the register pressure {{can be applied to}} any software pipelining technique. The proposals are evaluated using a register [...] conscious software <b>pipeliner</b> on a workbench composed of a large set of loops from the Perfect Club ben [...] ...|$|E
5000|$|Newman Field is a {{ballpark}} located in Sweetwater, TX {{and the home}} of the Sweetwater Mustangs baseball team in the UIL. The field was the site of the Sweetwater Pro Baseball Classic held from June 19 to June 21, 2009, the first occurrence of minor league baseball in 55 years since the Sweetwater Spudders. [...] The series matched the Coastal Kingfish against the South Louisiana <b>Pipeliners</b> while Sweetwater was being auditioned for future expansion in the Continental Baseball League.|$|R
50|$|Gilbert V. Rohleder (April 22, 1922 - January 30, 2016) was a 20th-century American {{pipeline}} executive, {{and one of}} {{the founding}} principals of the Mid-America Pipeline Company, founded in 1960. During his tenure, MAPCO evolved into a Fortune 500 company that was ultimately acquired by the Williams Companies in Tulsa, OK. Rohleder served in World War II as a First Lieutenant being wounded during the Normandy invasion. Rohleder holds an engineering degree from Massachusetts Institute of Technology, and was also selected in 1987 for the Massachusetts Institute of Technology Corporate Leadership Award. Rohleder also served as President of the American <b>Pipeliner's</b> Club, Director of the American Gas Processor's Association, and {{was a member of the}} business advisory council of Northwestern University. Rohleder lived in Tulsa, OK with his wife Patricia until his death in 2016.|$|R
5|$|The welders {{who worked}} on the {{pipeline}} itself came from <b>Pipeliners</b> Local 798 out of Tulsa, Oklahoma, which specialize in providing welders for large-scale pipeline projects. Members of the United Association of Journeymen and Apprentices of the Plumbing, Pipefitting and Sprinkler Fitting Industry of the United States and Canada performed all welding that was {{not a part of the}} pipeline itself, including pump stations, feeder pipelines, and work at the Valdez Marine Terminal. The welders were the highest paid of all the workers on the pipeline, with a normal rate of $18.25 per hour. To be hired on the pipeline project, welders had to go through an intensive certification process that involved a series of test welds. If a welder failed any of the test welds, he was not hired and was not allowed to try again for several weeks.|$|R
40|$|Gene Expression Profile Analysis Suite (GEPAS) {{is one of}} {{the most}} {{complete}} and extensively used web-based packages for microarray data analysis. During its more than 5 years of activity it has continuously been updated to keep pace with the state-of-the-art in the changing microarray data analysis arena. GEPAS offers diverse analysis options that include well established as well as novel algorithms for normalization, gene selection, class prediction, clustering and functional profiling of the experiment. New options for time-course (or dose-response) experiments, microarray-based class prediction, new clustering methods and new tests for differential expression have been included. The new <b>pipeliner</b> module allows automating the execution of sequential analysis steps by means of a simple but powerful graphic interface. An extensive re-engineering of GEPAS has been carried out which includes the use of web services and Web 2. 0 technology features, a new user interface with persistent sessions and a new extended database of gene identifiers. GEPAS is nowadays the most quoted web tool in its field and it is extensively used by researchers of many countries and its records indicate an average usage rate of 500 experiments per day. GEPAS, is available at [URL]...|$|E
40|$|Software {{pipelining}} is a loop scheduling {{technique that}} extracts parallelism out of loops by overlapping {{the execution of}} several consecutive iterations. Due to the overlapping of iterations, schedules impose high register requirements during their execution. A schedule is valid if it requires at most the number of registers available in the target architecture. If not, its register requirements have to be reduced either by decreasing the iteration overlapping or by spilling registers to memory. In this paper we describe a set of heuristics to increase the quality of register [...] constrained modulo schedules. The heuristics decide between the two previous alternatives and define criteria for effectively selecting spilling candidates. The heuristics proposed for reducing the register pressure {{can be applied to}} any software pipelining technique. The proposals are evaluated using a register [...] conscious software <b>pipeliner</b> on a workbench composed of a large set of loops from the Perfect Club benchmark and a set of processor configurations. Proposals in this paper are compared against a previous proposal already described in the literature. For one of these processor configurations and the set of loops that do not fit in the available registers (32), a speed [...] up of 1. 68 and a reduction of the memory traffic by a factor of 0. 57 are achieved with an affordable increase in compilation time. For all the loops, this represents a speed [...] up of 1. 38 and a reduction of the memory traffic by a factor of 0. 7...|$|E
40|$|This article {{presents}} several theoretical and fundamental results on register need in periodic schedules, {{also known as}} MAXLIVE. Our first contribution is a novel formula for computing {{the exact number of}} registers needed by a scheduled loop. This formula has two advantages: its computation can be done using a polynomial algorithm with O(nlg n) complexity (n is the number of instructions in the loop), and it allows the generalization of a previous result [13]. Second, during software pipelining, we show that the minimal number of registers needed may increase when incrementing the initiation interval (II), contrary to intuition. For the case of zero architectural delays in accessing registers, we provide a sufficient condition for keeping the minimal number of registers from increasing when incrementing the II. Third, we prove an interesting property that enables to optimally compute the minimal periodic register sufficiency of a loop for all its valid periodic schedules, irrespective of II. Fourth and last, we prove that the problem of optimal stage scheduling under register constraints is polynomially solvable for a subclass of data dependence graphs, while this problem is known to be NP-complete for arbitrary dependence graphs [7]. Our latter result generalizes a previous achievement [13] which addressed data dependence trees and forest of trees. In this study we consider cyclic data dependence graphs without taking into account any resource constraints. The aim of our theoretical results on periodic register need is to help current and future software <b>pipeliners</b> achieve significant performance improvements by making better (if not best) use of the available resources...|$|R

