0|17|Public
5000|$|... #Caption: (Top) Autocall Auto Monitor system, (Bottom) <b>Auto</b> <b>Command</b> network {{control center}} from 1978 ...|$|R
40|$|The Automatic Flight Control System (AFCS) for the SARAS {{aircraft}} {{is being}} designed {{in collaboration with}} a private partner. The AFCS provides for Flight Director Guidance function involving a three axis limited authority autopilot with <b>pitch</b> <b>auto</b> trim function. It features 13; CAT II approach capability and Control Wheel Steering (CWS). The architecture is fail-safe and extendable to a dual-dual configuration. The autopilot actuators are all electric smart brushless DC motors which engage with the all-mechanical reversible Primary Flight Control System in parallel via individual geared clutches...|$|R
5000|$|The <b>AUTO</b> <b>command</b> set an {{automatic}} command {{to be executed}} on TRSDOS boot; under MS-DOS the special, reserved file named AUTOEXEC.BAT contained a list of such commands. On UNIX a set {{of one or more}} rc files under /etc/ are a set of boot time [...] "run commands" [...] and special [...] "dot files" [...] in a user's home directory are run for each time that a given user logs into the system. UNIX supports many other [...] "dotfiles" [...] for many of its commands which are akin to the Macintosh [...] "preferences" [...] folder contents.|$|R
50|$|Starting in the mid-1960s, Autocall began {{transitioning}} all {{of their}} fire alarm systems to solid state technology. In 1970, the company produced the NA series of fire alarm systems which utilized modular components driven by printed circuit boards instead of traditional hardwired relays. In 1973, Autocall invented the first voice evacuation system, followed by a firefighter's communication system in 1974. These technologies were OEM distributed to numerous other fire alarm companies who did not yet produce their own. In 1977, Autocall introduced Auto Monitor, an entirely solid-state multiplex system that utilized remote transponders to distribute IDC's and other connections. These transponders could handle up to 8 points and remained in production for several years thereafter. A year later, the company introduced the <b>Auto</b> <b>Command,</b> a remote microprocessor-controlled command center with built-in printer. The Auto Monitor interpreted network command centers as transponders on the multiplex loop. Shortly thereafter, the company introduced custom designed rackmount systems {{which had to be}} factory programmed for each client. Due to the rapidly growing clientele and increased complexity of programs, Autocall brought field programmability to its multiplex systems in the mid-1980s. In 1987, Autocall introduced a smaller series of one-loop field-programmable addressable systems for a burgeoning market of mid-size addressable applications. In 1989, Autocall introduced the first color touchscreen graphic annunciator, known as Autograph. In 1990, the company replaced the aging <b>Auto</b> <b>Command</b> II system with the AL-1500, a modern system capable of over 4,000 points.|$|R
50|$|In B3 of the Great Tree, {{one of the}} two gates there {{takes you}} to an arena where you can battle the top 3 users who've won that day's ranking battle. You can do <b>auto</b> <b>commands,</b> AI battle tactics, and use items. The users are AIs, and their data are {{recorded}} from said day's ranking battle. You get both bonus points (for Wi-Fi Ranking Battle) and gold. The other gate there takes you to a 100 battle survival course. After 50 battles, it auto saves. If you lose between 51-100, you get to start back at battle 50. These battles can only be done once every 24 hours.|$|R
50|$|The non-programmer {{could create}} a short {{sequence}} of file and input specifications and store them as a source member. A component called Data File Utility could then be used to generate on-screen displays for creating and edit files and print reports. It was not quite the equal of say, Access 2007, but in twenty minutes a file and a report could be designed Alternatively, define the data files and have the system generate a simple report program, using the Create <b>Auto</b> Report <b>command.</b>|$|R
2500|$|The no {{operation}} command is always permitted, while the load mode register command requires that all banks be idle, and a delay afterward for {{the changes to}} take effect. [...] The <b>auto</b> refresh <b>command</b> also requires that all banks be idle, and takes a refresh cycle time tRFC to return the chip to the idle state. [...] (This time is usually equal to tRCD+tRP.) [...] The only other command that is permitted on an idle bank is the active command. [...] This takes, as mentioned above, tRCD before the row is fully open and can accept read and write commands.|$|R
2500|$|It is {{possible}} to refresh a RAM chip by opening and closing (activating and precharging) each row in each bank. However, to simplify the memory controller, SDRAM chips support an [...] "auto refresh" [...] command, which performs these operations to one row in each bank simultaneously. The SDRAM also maintains an internal counter, which iterates over all possible rows. The memory controller must simply issue {{a sufficient number of}} <b>auto</b> refresh <b>commands</b> (one per row, 4096 in the example we have been using) every refresh interval (tREF = 64 ms is a common value). All banks must be idle (closed, precharged) when this command is issued.|$|R
40|$|Abstract—Pitch {{is one of}} {{the most}} {{important}} parameters to describe the speech characteristics. The paper proposed a new pitch detection algorithm for ultra-low-bit-rate vocoder based on dynamic programming as well as frequency-time domain analysis to eliminate the multi-half pitch errors. The algorithm detected the candidate <b>pitches</b> based on <b>auto</b> correlation function firstly and then utilized the dynamic programming and frequency-time domain analysis to get the final pitch. Simulation result showed that the algorithm had a better performance and could eliminate the multi-half pitch errors efficiently. Keywords-Pitch detection, ultra-low-bit-rate, dynamic programming, frequency-time domain analysi I...|$|R
500|$|Throughout the descent, Aldrin {{had called}} out {{navigation}} data to Armstrong, who was busy piloting the LM. A few {{moments before the}} landing, a light informed Aldrin {{that at least one}} of the [...] probes hanging from Eagle footpads had touched the surface, and he said: [...] "Contact light!" [...] Three seconds later, Eagle landed and Armstrong said [...] "Shutdown." [...] Aldrin immediately said [...] "Okay, engine stop. ACA – out of detent." [...] Armstrong acknowledged [...] "Out of detent. Auto" [...] and Aldrin continued [...] "Mode control – both <b>auto.</b> Descent engine <b>command</b> override off. Engine arm – off. 413 is in." ...|$|R
2500|$|During {{the last}} few seconds, the {{aircraft}} climbed to 3,090 feet. The Captain put in 52 degrees of bank to turn the aircraft, and also made some nose down inputs. Therefore, the aircraft pitched down, speed increased and <b>auto</b> thrust <b>commanded</b> the engines to spool down to keep airspeed on the target speed. The aircraft started to descend at a high rate. Unfortunately in his panic, the Captain continued to move the heading knob without actually looking at it, but failed to pull the knob to activate it. When he did activate it, the aircraft turned towards the heading knob that had been rotated too far, to 25 degrees, and stayed on that course until end of recording. At 04:40:49 the Captain said to the First Officer [...] "Why the aircraft is not turning left?" [...] The aircraft then slammed into Margala Hills and exploded. The First Officer's last words could be heard saying to the Captain [...] "Sir we are going down! Sir we are going do—".|$|R
50|$|Later BASIC {{versions}} on Commodore {{and other}} platforms included a DELETE and RENUMBER command, {{as well as}} an <b>AUTO</b> line numbering <b>command</b> that would automatically select and insert line numbers according to a selected increment. In addition, all variables are treated as global variables. Clearly defined loops are hard to create, often causing the programmer to rely on the GOTO command (this was later rectified in BASIC 3.5 with the addition of the DO, LOOP, WHILE, UNTIL, and EXIT commands). Flag variables often needed to be created to perform certain tasks. Earlier BASICs from Commodore also lack debugging commands, meaning that bugs and unused variables are hard to trap.|$|R
5000|$|Throughout the descent, Aldrin {{had called}} out {{navigation}} data to Armstrong, who was busy piloting the LM. A few {{moments before the}} landing, a light informed Aldrin {{that at least one}} of the 67 in probes hanging from Eagle footpads had touched the surface, and he said: [...] "Contact light!" [...] Three seconds later, Eagle landed and Armstrong said [...] "Shutdown." [...] Aldrin immediately said [...] "Okay, engine stop. ACA - out of detent." [...] Armstrong acknowledged [...] "Out of detent. Auto" [...] and Aldrin continued [...] "Mode control - both <b>auto.</b> Descent engine <b>command</b> override off. Engine arm - off. 413 is in." ...|$|R
40|$|Several {{unconventional}} {{marine and}} aerodynamic propulsors are introduced. They are single oscillating foil biomechanical propulsor (SOFP), counterphase dual-foil oscillating propeller (CDOP), symmetric flapping foil propulsor (SFFP), surface piercing propeller (SPP), winglet or Kappel propeller, ducted-tip propeller (DTP), cyclic pitch propeller (CyPP) and <b>auto</b> <b>pitch</b> propeller. Practical applications of these propulsors are also discussed with their advantages for, respectively, underwater exploration vehicle/robot fish, {{micro air vehicle}} (MAV), underwater vehicle with high degree of maneuverability and low signature, fast surface boat (greater than 40 knots), energy efficient merchant ship, energy saving/low cavitation freighter, underwater vehicle of high maneuverability and speed, and low drag/load self-adjustable propeller for sailboat/underwater vehicle. The theory of operation, technical advantages and disadvantages are also discussed. In collaboration with high class scientists worldwide, the Institute for Marine Dynamics/National Research Council Canada has built both the physical and numerical modeling capabilities for the research and design of most of these innovative propulsion devices {{to meet the challenge}} of various marine operations in the 21 st century. Peer reviewed: NoNRC publication: Ye...|$|R

