0|8814|Public
40|$|Spurred by the {{sustained}} operation and new development of satellite and in-situ observing systems, global ocean state estimation efforts that gear towards climate applications have {{flourished in the}} past decade. A hierarchy of estimation methods {{is being used to}} routinely synthesize various observations with global ocean models. Many of the estimation products are available through <b>public</b> <b>data</b> <b>servers.</b> There have been an increasingly large number of applications of these products {{for a wide range of}} research topics in physical oceanography as well as other disciplines. These studies often provide important feedback for observing systems design. This white paper describes the approaches used by these estimation systems in synthesizing observations and model dynamics, highlights the applications of their products for climate research, and addresses the challenges ahead in relation to the observing systems. Additional applications to study climate variability using an ensemble of state estimation products are described also by a white paper by Stammer et al...|$|R
30|$|Without correlation: {{provided}} IP addresses are not {{correlated to}} <b>data</b> <b>server</b> locations. Proxies {{may be very}} far from <b>data</b> <b>servers.</b> Thus, their locations are without help to locate <b>data</b> <b>servers.</b>|$|R
30|$|With correlation: IP {{addresses}} {{included in}} SLA are either those of <b>data</b> <b>servers</b> {{or they are}} associated with proxies close to <b>data</b> <b>servers.</b> In other words, proxies enabling data access {{are in the same}} location than <b>data</b> <b>servers.</b> Consequently, when location verification is of concern, probing CSP’s proxy is equivalent to probing CSP’s <b>data</b> <b>server.</b>|$|R
50|$|Dimension <b>Data</b> {{provides}} both <b>public</b> {{and private}} cloud computing servers. They {{also offer a}} hybrid cloud in which customers can choose which resources are <b>public</b> or private. <b>Data</b> can be stored on a customer's own <b>servers</b> or Dimension <b>Data's</b> <b>servers.</b> The company operates locations including Johannesburg, Sydney, and London.|$|R
40|$|OAK-B 135 Tech-X Corporation {{designed}} and developed all the networking code tying together the NTCC <b>data</b> <b>server</b> with the <b>data</b> client and the physics <b>server</b> with the <b>data</b> <b>server</b> and physics client. We were also {{solely responsible for}} the data and physics clients {{and the vast majority}} of the work on the <b>data</b> <b>server.</b> We also performed a number of other tasks...|$|R
40|$|This paper {{describes}} {{the implementation of}} a Secure Interface for a Universal <b>Data</b> <b>Server</b> (SIUDS). The SIUDS's main role is to securely interface mobile agents with the database of a universal <b>data</b> <b>server.</b> Mobile agents can serve data, stored in this database, in all sorts of formats and protocols. In doing this, they implement the core of the universal <b>data</b> <b>server...</b>|$|R
50|$|In {{a cluster}} using PVFS nodes are {{designated}} as {{one or more}} of: client, <b>data</b> <b>server,</b> metadata <b>server.</b> <b>Data</b> <b>servers</b> hold file <b>data,</b> metadata <b>servers</b> hold metadata include stat-info, attributes, and datafile-handles as well as directory-entries. Clients run applications that utilize the file system by sending requests to the servers over the network.|$|R
40|$|This paper {{presents}} {{a model for}} the scalability analysis of the <b>Data</b> <b>Server</b> subsystem of the EOSDIS Core System (ECS). The goal of the model is to analyze to determine if the planned architecture of the <b>Data</b> <b>Server</b> will support an increase in the workload with the possible components upgrade. We provide a summary of the ECS's <b>Data</b> <b>Server</b> architecture and of a high level description of the Ingest and Retrieval operations in the ECS's <b>Data</b> <b>Server.</b> This description forms the basis for the development of our scalability model. Then we present details of the scalability model and the methodology used to solve it. We describe the structure of the scalability model, input parameters, expressions for computing parameters of the scalability model solver, and algorithms for solving the scalability model. The scalability model is very general and allows the modeling of <b>data</b> <b>servers</b> with numerous configurations...|$|R
30|$|The {{application}} server does not communicate directly with users. It only receives requests from the web <b>server.</b> It pulls <b>data</b> required for each analysis from the <b>data</b> <b>server.</b> The <b>data</b> <b>server</b> receives requests {{from both the}} {{application server}} and the web <b>server.</b> Besides sending <b>data</b> to the application server, it also receives and stores all analysis status data and results. The web server, therefore, retrieves all analysis informations from the <b>data</b> <b>server</b> rather than the application server.|$|R
40|$|Nowadays, we {{face the}} {{continually}} growing importance of information: it is quickly becoming our most valuable resource. The Smart <b>Data</b> <b>Server</b> improves the quality of information by combining different information-resource-pools without unnecessarily burdening the user with details. By questioning the Smart <b>Data</b> <b>Server</b> with functionrequests of installed function-modules, high-level information is created. The flow of information can be improved by routing requests through networks of Smart <b>Data</b> <b>Servers,</b> each server responsible for different kinds of requests. Keywords: Information Retrieva...|$|R
30|$|Unlike {{existing}} {{real-time monitoring}} models in which live data are saved {{on a dedicated}} <b>data</b> <b>server,</b> real-time <b>data</b> from Karnes injection site are stored on Azure (Fig.  3). This {{does not necessarily mean}} that the data must be installed on a commercial cloud to be effective. Storing Karnes injection data on a commercial cloud rather than a dedicated <b>data</b> <b>server</b> is indeed an economic decision rather than a technical decision. Note that the commercial clouds do not provide any special technique that is essential or preferable for the remote real-time monitoring. In fact, the only requirement for a <b>data</b> <b>server</b> to be suitable for remote real-time monitoring is that the <b>data</b> <b>server</b> needs to be accessible through internet at any time. Thus, the feasibility of the remote real-time monitoring is not affected if real-time data have to be stored on a dedicated <b>data</b> <b>server</b> because of <b>data</b> security or any other reasons.|$|R
40|$|Contents 1 Introduction 11 1. 1 The Need for High Performance Databases........ 11 1. 2 Conventional Databases.................. 13 1. 3 Distributed Databases................... 13 1. 4 Multidatabases....................... 14 1. 5 <b>Data</b> <b>Servers.........................</b> 14 1. 6 Parallel <b>Data</b> <b>Servers....................</b> 15 1. 7 Database Machines..................... 17 1. 8 Overview of Some <b>Data</b> <b>Servers..............</b> 18 1. 9 Current Trends....................... 21 1. 10 Conclusions......................... 21 2 Properties of Structures for Servers 23 2. 1 The Problem........................ 23 2. 2 Scalability.......................... 24 2. 3 Distribution......................... 25 2. 4 Availabili...|$|R
30|$|Then, <b>data</b> <b>server</b> accesses c <b>data</b> {{blocks and}} uses the public key to {{generate}} a proof of possession composed of a tag and a hashed value of r. Notice that the <b>data</b> <b>server</b> cannot generate a valid possession proof without accessing the data file.|$|R
30|$|Initiating a {{positioning}} area to a start position requires two factors: First, that all Anchors {{in the zone}} have run and been registered in Data Server; and second, {{that at least one}} Location Engine has run. When these requirements are met, one Location Engine is selected as the computing center. A command message containing relevant Anchor information and selected Location Engine information is then sent to the <b>Data</b> <b>server.</b> The <b>Data</b> <b>server</b> detects whether the Anchors and Location Engine are ready; once ready, the <b>Data</b> <b>server</b> runs the corresponding program and readies for location. Location results can be obtained from the Location Engine and sent to the <b>Data</b> <b>Server</b> at the same time. Figures 6 and 7 show images of the MClient interface.|$|R
40|$|Introduction Coming soon [...] . 2 The <b>Server</b> Design The <b>data</b> <b>server</b> is {{designed}} to achieve the design goals: portability, scalability, flexibility, and modularity [?]. This Section describes how the <b>data</b> <b>server</b> is constructed and implemented to meet the design goals. 2. 1 Server Architecture To achieve our goal of flexibility, we used a modular client-server design. The <b>data</b> <b>server</b> is split into two parts: the front-end server and back-end server (see Figure 1). The backend server hides the low-level details of storage system implementation and provides a uniform way to access data, no matter how it is actually stored. The front-end server provides an interface between clients and the back-end servers. Therefore, the front-end server provides the clients with a logical abstraction of the <b>data</b> <b>server</b> that is independent of the underlying stora...|$|R
5000|$|Information <b>Data</b> <b>Server</b> for {{direction}} finders {{and weather}} reports (d-ids) ...|$|R
40|$|An indoor golf {{simulator}} is an augmented game simulator. Because {{an indoor}} golf simulator {{can be easily}} installed in indoor golf centers, fitness centers, offices, and residential houses, it {{has become one of}} the hottest products on the market, allowing golfers to enjoy their games indoors. However, the existing indoor golf simulators require that a player finish his game without a break. This paper proposes an indoor golf simulator that allows a player to pause a game at any time and resume it at any place. The proposed simulator applies data synchronization techniques in ubiquitous environments. The simulator consists of PC consoles, a proxy server, and a player <b>data</b> <b>server.</b> The PC console client uses a XML-based communication protocol to send information about the game to the player <b>data</b> <b>server</b> via the proxy server. The communication protocol supports DS (Data Synchronization) operations between the PC console client and the player <b>data</b> <b>server.</b> Located between the PC console client and the player <b>data</b> <b>server,</b> the proxy server receives game information from the PC console client and sends the information to the player <b>data</b> <b>server,</b> and vice versa. When the player <b>data</b> <b>server</b> authenticates the player, the proxy server establishes a new communication session and manages the session until the game is either terminated or suspended. The player <b>data</b> <b>server</b> authenticates the player and keeps his or her latest game information for later use (e. g., to resume the game). Each component of the simulator is designed and explained in detail. By applying DS protocols, the proposed simulator allows a player to pause his or her game at any time and resume it at any place...|$|R
40|$|International audienceWith the {{characteristics}} of fast transferring speed and wide coverage of TD-LTE network, the research designs and implements the TD-LTE-based Real-time Monitoring System for Greenhouse Environment Temperature. The TD-LTE network, which is connected with the <b>data</b> <b>server</b> of the Internet, can transmit the real-time temperature data that sensor collects to the <b>data</b> <b>server.</b> The B/S mode-based <b>data</b> <b>server</b> can realize <b>data</b> query, analysis and other functions. This monitoring system solves the problems that previous monitoring systems are slow {{and can not be}} transmitted at a distance, and it can also meet the need of the real-time data acquisition that precision agriculture needs...|$|R
5000|$|DB2 pureXML Cookbook: Master the Power of IBM Hybrid <b>Data</b> <b>Server</b> ...|$|R
5000|$|Network-attached drives, NAS {{units and}} <b>data</b> <b>servers</b> visible as remote disks; ...|$|R
30|$|The {{location}} management server {{is responsible for}} storing data and managing communications with the Location Engine and Anchor devices. To facilitate server management operations, the location server was divided into two parts according to the pre-established software framework design: <b>Data</b> <b>Server</b> and MClient. <b>Data</b> <b>Server</b> is an information processing center and Mclient is an information management center.|$|R
5000|$|Ember <b>data</b> <b>server</b> {{implementations}} for PHP, Node.js, Ruby, Python, Go, [...]NET and Java.|$|R
5000|$|Homogeneous {{federation}} - only DB2, Informix <b>Data</b> <b>Server</b> and Oracle {{targets are}} supported ...|$|R
5000|$|... 1998 Shipped Virtuoso 1.0, {{including}} Virtual Database / Federated Database/Hybrid <b>Data</b> <b>Server</b> Functionality ...|$|R
40|$|Abstract. For {{the sake}} of {{achieving}} to manage and query the experimental data scientifically, as well as relevant experiment information for Neutral Beam Injection (NBI) system, NBI <b>Data</b> <b>Server</b> software is developed for data exchanging between the remote server control layer and the field measurement and control layer, data storage and querying. Experimental results show that managing data scientifically can ensure data security and making best use of data will bring data value into full play. NBI <b>Data</b> <b>Server</b> software is programmed by C language, developed with Client/Server program model and multi-threading technology, runs on linux operating system. Experiments show that NBI <b>data</b> <b>server</b> software can work steadily and reliably...|$|R
2500|$|Evolution <b>Data</b> <b>Server,</b> {{responsible}} for managing mail, calendar, address book, tasks and memo information ...|$|R
40|$|This paper {{describes}} the Bill of Materials (BOM) for the Federal Emergency Management Information System (FEMIS) for release 1. 1. FEMIS runs on two computer platforms: A UNIX platform, {{employed as a}} <b>data</b> <b>server,</b> and a personal computer (PC) using a Windows NT operating environment. FEMIS will {{support the use of}} commercial off-the-shelf software (COTS) software applications and tools. The hardware set includes a UNIX <b>data</b> <b>server,</b> a PC Communications server (at the source of MET data only), and a number of PC Client workstations, peripheral devices and network support equipment as described in this document. Servers and PCs require the operating system, utility software, communications and other internal cards also listed in the following sections. Several configuration are possible at a CSEPP Site. In this description, a Site is understood to be comprised of several installations, including the depot, surrounding Immediate Response Zone (IRZ) and Protective Action Zone (PAZ) counties, and the state EOC. In general, the main differences between possible configurations are the number of users at an installation, the location of the UNIX <b>data</b> <b>server,</b> and the WAN link between installations. Two typical installation configurations are With <b>Data</b> <b>Server</b> and Without <b>Data</b> <b>Server.</b> The number of PC workstations may vary at an installation...|$|R
3000|$|... {{of data using}} a hash {{function}} H (...) [...]. Then, tags are stored by data owner and data blocks are sent to <b>data</b> <b>server</b> to be stored. When data owner needs to verify that the <b>data</b> <b>server</b> has the <b>data,</b> it sends a PDP inquiry including a list of c randomly selected block numbers. <b>Data</b> <b>server</b> reads and sends the requested data blocks. Then, data owner computes tags for received data blocks and compares them to tags locally-stored to confirm or not the possession proof. It is worth noticing that MAC-based PDP is bandwidth consuming, depending {{on the number of}} blocks included in proof inquiries and the frequency of these inquiries. MAC-based scheme is used in [21, 26].|$|R
30|$|In {{addition}} to data location(s), SLA includes {{a list of}} IP addresses or domain names, which enable users access their data—not to verify locations. Notice that an SLA may include an IP address of a proxy located in a geographic region, which differs from the one of physical <b>data</b> <b>server.</b> When commercial CSPs are of concern, proxy IP addresses do not provide (sufficient) information to locate CSP’s <b>data</b> <b>servers.</b> Indeed, because of system virtualization and physical infrastructure protection, the IP addresses of physical <b>data</b> <b>servers</b> are not <b>public.</b> Consequently, location verification approaches targeting commercial CSPs should not rely on CSP’s IP addresses and domain names included in the SLA to verify data location.|$|R
40|$|This work {{describes}} {{the implementation of}} a plug-in that allows gOcad to do real-time well drilling monitoring. This plug-in use two other plug-ins: the Lua plug-in and the LuaOrb plug-in to exports gOcad and CORBA functionality to Lua respectively. This plug-in uses CORBA to do the communication between the <b>data</b> <b>server</b> and the gOcad client. The <b>data</b> <b>server</b> and the gOcad client do not use the CORBA API directly, but use the LuaOrb plug-in that makes the system adaptable. The adaptability of the <b>data</b> <b>server</b> is very interesting because the server can easily be configured to use different drilling acquisition systems. Finally we present an application of this new plug-in in a well drilling process. ...|$|R
40|$|International audienceWe {{developed}} a common access facility to homogeneously formatted accelerometric event data {{and to the}} corresponding sheet of ground motion parameters. This paper {{is focused on the}} description of the technical development of the accelerometric <b>data</b> <b>server</b> and the link with the accelerometric <b>data</b> explorer. The <b>server</b> is the third node of the 3 -tier architecture of the distributed archive system for accelerometric <b>data.</b> The <b>server</b> is the link between the data users and the accelero- metric <b>data</b> portal. The <b>server</b> follows three main steps: (1) Reading and analysis of the end-user request; (2) Processing and converting data; and (3) Archiving and updating the accelerometric data explorer. This paper presents the description of the <b>data</b> <b>server</b> and the <b>data</b> explorer for accessing data...|$|R
5000|$|<b>Server</b> <b>Data</b> Protection, Virtual <b>Server</b> <b>Data</b> Protection, Remote & Branch Office Data Protection, Endpoint Device Data Protection ...|$|R
5000|$|... evolution-kolab was released, {{which extends}} GNOME’s Evolution and EDS (Evolution <b>Data</b> <b>Server)</b> {{to become a}} full-featured Kolab client.|$|R
40|$|Abstract: The {{communication}} interface is at present time represented with suitable file structure. Updating possibilities are implementation of TCP/IP communication, eventually application of database system. The goal of {{communication interface}} {{is to provide}} for required transfer of measured values between acquisition application (eventually applications) and <b>data</b> <b>server</b> application. The acquisition application works as client and <b>data</b> <b>server</b> application works as server at their mutual socket based communication in nonblocking mode...|$|R
40|$|Abstract—A {{cluster of}} <b>data</b> <b>servers</b> and a {{parallel}} file system {{are often used}} to provide high-throughput I/O service to parallel programs running on a compute cluster. To exploit I/O parallelism parallel file systems stripe file data across the <b>data</b> <b>servers.</b> While this practice is effective in serving asynchronous requests, it may break individual program’s spatial locality, which can seriously degrade I/O performance when the <b>data</b> <b>servers</b> concurrently serve synchronous requests from multiple I/O-intensive programs. In this {{paper we propose a}} scheme, IOrchestrator, to improve I/O performance of multi-node storage systems by orchestrating I/O services among programs when such inter-data-server coordination is dynamically determined to be cost effective. We have implemented IOrchestrator in the PVFS 2 parallel file system. Our experiments with representative parallel benchmarks show that IOrchestrator can significantly improve I/O performance— by up to a factor of 2. 5 —delivered by a cluster of <b>data</b> <b>servers</b> servicing concurrently-running parallel programs. Notably, we have not observed any scenarios in which the use of IOrchestrator causes substantial performance degradation...|$|R
25|$|MEMS clock {{generators}} {{are useful}} in complex systems that require multiple frequencies, such as <b>data</b> <b>servers</b> and telecom switches.|$|R
