567|140|Public
25|$|Develop {{specifications}} {{that will}} enable applications to exploit local <b>persistent</b> <b>storage</b> in consumer electronics platforms.|$|E
25|$|Also in 2006, Amazon {{introduced}} Amazon Elastic Compute Cloud (Amazon EC2), {{a virtual}} site farm, allowing users {{to use the}} Amazon infrastructure to run applications ranging from running simulations to web hosting. In 2008, Amazon improved the service by adding Elastic Block Store (EBS), offering <b>persistent</b> <b>storage</b> for Amazon EC2 instances and Elastic IP addresses, and offering static IP addresses designed for dynamic cloud computing.|$|E
500|$|In {{adapting}} STL to {{be included}} in the C++ Standard Library, Stepanov worked closely with several members of the standards committee, including Andrew Koenig and Bjarne Stroustrup, who observed that custom allocators could potentially be used to implement <b>persistent</b> <b>storage</b> STL containers, which Stepanov at the time considered an [...] "important and interesting insight".|$|E
3000|$|It {{provides}} {{highly scalable}} and high-performance <b>persistent</b> <b>storages</b> accordingly as containers scale out [...]...|$|R
40|$|Abstract—It {{has been}} {{foreseen}} {{that some of}} the roles assumed by conventional rotating hard disk drives (HDDs) will migrate to solid-state drives (SSDs) and emerging <b>persistent</b> RAM <b>storages.</b> New <b>persistent</b> RAM <b>storages</b> have critical advantages over HDDs and even SSDs in terms of performance and power. Persistent RAM technologies are flexible enough to be used for both storage and main memory—in future platforms, this flexibility will allow tighter integration of a system’s memory and storage hierarchy. On the other hand, designers are faced with new technical issues to address to fully exploit the benefits of persistent RAM technologies and hide their downsides. In this paper, we introduce PRISM (<b>PeRsIstent</b> RAM <b>Storage</b> Monitor) —our novel infrastructure that enables exploring various design trade-offs of <b>persistent</b> RAM <b>storage.</b> PRISM allows designers to examine a <b>persistent</b> RAM <b>storage’s</b> lowlevel behavior and evaluate its various architectural organizations while running realistic workloads, as well as storage activities of a contemporary off-the-shelf OS. PRISM builds on kernel source code level instrumentation and the standard Linux device driver mechanism to generate <b>persistent</b> RAM <b>storage</b> traces. Moreover, PRISM includes a storage architecture simulator to faithfully model major <b>persistent</b> RAM <b>storage</b> hardware components. To illustrate how and with what PRISM can help the user, we present a case study that involves running an OLTP (on-line transaction processing) workload. PRISM successfully provides the detailed performance analysis results, while incurring acceptable overheads. Based on our experience, we believe that PRISM is a versatile tool for exploring <b>persistent</b> RAM <b>storage</b> design choices ranging from OS-level resource management policy down to chip-level storage organization. I...|$|R
5000|$|Failures of {{transactions}} should {{not affect the}} <b>persistent</b> data <b>storage</b> ...|$|R
500|$|Other {{features}} {{included an}} enhanced battery-saving capability called <b>persistent</b> <b>storage</b> capability. [...] Previously up to 50% (enough for 72 hours of storage) of battery power was reserved just to maintain data in volatile RAM. [...] This continued {{the trend of}} Windows-based devices moving from using RAM as their primary storage medium {{to the use of}} a combination of RAM and flash memory (in use, no distinction between the two is obvious to users). [...] Programs and frequently accessed data run in RAM, while most storage is in the flash memory. [...] The OS seamlessly moves data between the two as needed. [...] Everything is backed up in the flash memory, so unlike prior devices, WM5 devices lose no data if power is lost.|$|E
2500|$|Android {{has another}} {{operating}} system, Trusty OS, within it, {{as a part}} of [...] "Trusty" [...] "software components supporting a Trusted Execution Environment (TEE) on mobile devices." [...] "Trusty and the Trusty API are subject to change. [...] Applications for the Trusty OS can be written in C/C++ (C++ support is limited), and they have access to a small C library. [...] All Trusty applications are single-threaded; multithreading in Trusty userspace currently is unsupported. [...] Third-party application development is not supported in" [...] the current version, and software running on the OS and processor for it, run the [...] "DRM framework for protected content. [...] There are many other uses for a TEE such as mobile payments, secure banking, full-disk encryption, multi-factor authentication, device reset protection, replay-protected <b>persistent</b> <b>storage,</b> wireless display ("cast") of protected content, secure PIN and fingerprint processing, and even malware detection." ...|$|E
5000|$|OceanStore: an {{architecture}} for global-scale <b>persistent</b> <b>storage</b> ...|$|E
5000|$|Amazon Elastic Block Store (EBS) {{provides}} <b>persistent</b> block-level <b>storage</b> volumes for EC2.|$|R
5000|$|A generic {{household}} {{tape recorder}} {{was used for}} <b>persistent</b> data <b>storage.</b> There were 2 modulation methods used, FSK and PSK. Standard 60-minute cassette could hold: ...|$|R
40|$|This paper {{describes}} FREEDIUS, an open-source {{image understanding}} system. FREEDIUS is a Lisp-C hybrid system that exploits CLOS for rapid prototyping, flexibility of presentation in the user interface, and flexibility in <b>persistent</b> object <b>storage.</b> Applications of FREEDIUS include site modeling, video track analysis and event recognition...|$|R
5000|$|Experimental {{support for}} <b>Persistent</b> <b>Storage,</b> without LRU {{eviction}} ...|$|E
50|$|Datasets {{are also}} {{constantly}} replicated, so if a node fails, an auto-switchover mechanism guarantees data is served without interruption. To provide additional reliability, the entire dataset is constantly replicated from the nodes to <b>persistent</b> <b>storage,</b> {{and can also}} be backed up to a remote <b>persistent</b> <b>storage</b> for disaster recovery.|$|E
5000|$|Provides {{a form of}} <b>persistent</b> <b>storage</b> for Java 2 Platform, Micro Edition.|$|E
5000|$|The {{advent of}} {{databases}} introduced a further layer of abstraction for <b>persistent</b> data <b>storage.</b> Databases use meta data, and a {{structured query language}} protocol between client and server systems, communicating over a network, using a two phase commit logging system to ensure transactional completeness, when persisting data.|$|R
40|$|Ada 95 {{has been}} the first {{standardized}} language to include distribution in the core language itself. However, the set of features required by the Distributed Systems Annex of the Reference Manual is very limited and does not take in account advanced needs such as fault tolerance, code migration or <b>persistent</b> distributed <b>storage...</b>|$|R
40|$|The aim of {{this work}} is to provide <b>persistent</b> object <b>storage</b> support over an RDBMS for an {{existing}} object replicated environment called COPLA. Specifically, an object repository is viewed by an application as unique, consistent and fully available. It provides <b>persistent</b> object state <b>storage</b> under a replicated environment, granting a transactional behaviour. Object state access is performed by means of specific methods or by queries performed by final application users. Object recovery facilities on faulty nodes {{and the evolution of}} applications developed in this architecture are also provided. An object definition language and an object query language, based on the ODMG standard, have been designed so as to define applications and query objects inside COPLA respectively, and how objects are translated into the entity-relation model...|$|R
50|$|The {{configuration}} settings of a bean {{can be saved}} to <b>persistent</b> <b>storage</b> and restored.|$|E
5000|$|<b>Persistent</b> <b>storage</b> creation, to {{save all}} {{documents}} created and modifications {{made to the}} system ...|$|E
50|$|Develop {{specifications}} {{that will}} enable applications to exploit local <b>persistent</b> <b>storage</b> in consumer electronics platforms.|$|E
40|$|NAND Flash {{has become}} the most popular <b>persistent</b> data <b>storage</b> medium for mobile and {{embedded}} devices. The hardware characteristics of NAND Flash (e. g. page granularity for read/write with a block-erase-before-rewrite constraint, limited number of erase cycles) preclude in-place updates. In this paper, we propose a new indexing scheme, called PBFilter, designed from the outset to exploit the peculiarities of NAND Flash...|$|R
40|$|Abstract. The aim of {{this article}} is to explore and {{investigate}} possibilities of reuse already known techniques from object and objectoriented processing for effective processing in XML-native database systems. The article provides explanation of impedance problem, specifically impedance mismatch problem of the middleware, semi-orthogonal persistency methods, and also presents results of experiments with XML:DB API implementation over GOODS object <b>persistent</b> data <b>storage</b> an...|$|R
30|$|Replication is {{supported}} using the consistent hashing method (proposed in [61]) [10, 60]. Sharding is implemented transparently with support for adding and removing nodes in real-time (although this feature {{was not always}} easily available [62]). Data is meant to stay in RAM as much as possible, with <b>persistent</b> data <b>storage</b> using several mechanisms, such as Berkley DB [60]. Voldemort uses a Java API [52].|$|R
50|$|PAST is a large-scale, distributed, <b>persistent</b> <b>storage</b> {{system based}} on the Pastry {{peer-to-peer}} overlay network.|$|E
50|$|Provides {{a form of}} <b>persistent</b> <b>storage</b> for Java ME; a {{database}} for the mobile device.|$|E
5000|$|Languages, services, and {{protocols}} for <b>persistent</b> <b>storage,</b> concurrent {{access and}} concurrent update, and interchange of data ...|$|E
40|$|The goal of {{this work}} is {{proposal}} {{and implementation of the}} revision system that can control whole development process of a project. It shows alternatives of the implementation of its parts. The main is a <b>persistent</b> data <b>storage</b> and the system architecture. The expected result is a application that is able to present basic solved problems as are project branching and distributed data storage...|$|R
40|$|Short paperInternational audienceNAND Flash {{has become}} the most popular <b>persistent</b> data <b>storage</b> medium for mobile and {{embedded}} devices. The hardware characteristics of NAND Flash (e. g. page granularity for read/write with a block-erase-before-rewrite constraint, limited number of erase cycles) preclude in-place updates. In this paper, we propose a new indexing scheme, called PBFilter, designed from the outset to exploit the peculiarities of NAND Flash...|$|R
40|$|We {{present an}} initial {{study of the}} object {{features}} of Oracle 9 i – {{the first of the}} market-leading object-relational database systems that supports a true object model on the server side as well as an ODMG-style C++ language binding on the client side. We discuss how these features can be used to provide <b>persistent</b> object <b>storage</b> in the HEP environment. Keywords: LHC, persistency, C++ language binding, object, database, VLDB 1...|$|R
5000|$|ECO {{automatically}} {{keeps track}} of all unsaved changes to the objects and provides simple means for the programmer to propagate these changes to the <b>persistent</b> <b>storage,</b> for example using the following command:Using OCL simplifies loading objects from the <b>persistent</b> <b>storage.</b> The example code below uses the OCL expression [...] "" [...] to load all instances of the class named [...] in the UML model: ...|$|E
50|$|May require, {{depending}} on the logic implemented, a <b>persistent</b> <b>storage</b> to manage Request and Response objects info.|$|E
50|$|Midgard is an {{open source}} <b>persistent</b> <b>storage</b> framework. It {{provides}} an object-oriented and replicated environment for building data-intensive applications.|$|E
50|$|Web storage, {{sometimes}} {{known as}} DOM storage (Document Object Model storage), provides web application software {{methods and protocols}} used for storing data in a web browser. Web <b>storage</b> supports <b>persistent</b> data <b>storage,</b> similar to cookies but with a greatly enhanced capacity and no information stored in the HTTP request header. There are two main web storage types: local storage and session storage, behaving similarly to persistent cookies and session cookies respectively.|$|R
40|$|This {{thesis is}} {{concerned}} on {{the aspects of}} <b>persistent</b> data <b>storage</b> of C++ objects in the relational databases. It introduces design of transparent interface {{and implementation of the}} library optimized for currently available SQL- 92 Entry Level compliant databases, thus using classical database relations as the storage medium. Proposed query language combines operations of relational algebra with used object model. Available from STL, Prague, CZ / NTK - National Technical LibrarySIGLECZCzech Republi...|$|R
40|$|This {{application}} utilizes modern standards {{developing in}} web browsers {{to create a}} desktop-like application for managing a music library online. The server side application is written in a model-view-controller style using Python backed by a MySQL database. The client side JavaScript was designed around a modular concept interfacing several third-party frameworks and libraries. By taking advantage of developing browser features such as <b>persistent</b> local <b>storage,</b> this web application was designed to handle a large library of music...|$|R
