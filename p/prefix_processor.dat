1|4|Public
40|$|Information Retrieval or Text Classification need {{to match}} words between the user's input and the {{documents}} {{in a collection}} of texts. Matching of words is not a trivial process since words have grammatical (inflectional and derivational) variations. There are two main approaches for matching between inflected words: Stemming (removing word suffixes based on ad-hoc selected suffixes) and Lemmatizing (replacing the inflected form with the base form of a word). However, these approaches normalize the word variations in their rightmost side. We claim it will be beneficial to additionally concentrate on word normalization at the left side, by removing word prefixes. In this report, we present the architecture and functioning of a software tool that can be used as the first stage of a Statistical <b>Prefix</b> <b>Processor,</b> a system that could effectively remove prefixes from words and act as a preprocessing stage of text analysis applications. The tool we present is comprised of two stages / subtools. During the first stage, possible prefixes of words with{{in a collection of}} texts are identified. During the second stage, a number of users (native speakers) process the text collection, automatically locate words that contain each stem and characterize the prefixes used with each stemmed word. After the text collection has been processed by all users, statistical conclusions can be drawn for each stemmed word and its associated prefixes. Copyright 2012 ACM...|$|E
40|$|International audienceWe {{consider}} parallel <b>prefix</b> computation on <b>processors</b> {{of different}} and possibly changing speeds. Extending previous works on identical processors, we provide a lower bound for this problem. We {{introduce a new}} adaptive algorithm {{which is based on}} the on-line recursive coupling of an optimal sequential algorithm and a parallel one, non-optimal but recursive and fine-grain. The coupling relies on a work-stealing scheduling. Its theoretical performance is analysed on p processors of different and changing speeds. It is close to the lower bound both on identical processors and close to the lower bound for processors of changing speeds. Experiments performed on an eight-processor machine confirms this theoretical result...|$|R
40|$|AbstractIn this paper, we use {{the renewal}} theory to develop a Poisson random number {{algorithm}} without restart. A parallel Poisson random number generator is designed based on this algorithm and prefix computation. This generator iteratively produces m Poisson random numbers with mean μ in average time complexity O([mμn]f(n,p)) on EREW PRAM, where f(n,p) {{is the time for}} computing an n-element parallel <b>prefix</b> on p <b>processors</b> in each iteration, assuming that parallel uniform random numbers can be generated at the rate of one number per unit time per processor. If n is selected near mμ, it achieves linear speedup when p is small and the average time complexity is O(log(mμ)) when p is O(mμ) ...|$|R
40|$|In this paper, it {{is shown}} {{that more than}} half of the data flow buffer, due to a bit {{reversed}} FFT output and cyclic prefix in an OFDM transceiver, can be removed. To achieve this, a new pipelined FFT processor is proposed and a cyclic suffix is used instead of the more commonly used cyclic <b>prefix.</b> The FFT <b>processor</b> is used either with a forward or backward data flow, i. e. performing either a decimation in time or a decimation in frequency FFT. However, this approach precludes wordlength optimization in the processor and therefore a semi floating-point arithmetic is used to achieve high signal-to-noise ratio. Total delay through the transceiver is reduced by 25 % and for larger transceivers silicon area is reduced by as much as 25 %. In addition, the proposed scheme reduces the required amount of memory accesses to insert a cyclic extension, and has the basic properties of a simple interleave...|$|R

