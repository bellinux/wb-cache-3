83|466|Public
5000|$|... {{design by}} contract: {{operations}} support pre and <b>post</b> <b>conditions,</b> classes use invariants.|$|E
50|$|To {{alleviate}} the suffering, the Indians were over time moved to Fort Belmont and a U.S. Army post at LeRoy, Kansas (see LeRoy's <b>post).</b> <b>Conditions</b> were still harsh at Fort Belmont. A {{number of young}} Indian men were enlisted {{to fight for the}} Union from all three posts.|$|E
30|$|The {{business}} rules and processes provide the dynamic, operational side {{appearing in the}} form of pre-, <b>post</b> <b>conditions</b> of processes, including the document and data structure.|$|E
40|$|The {{effects of}} public posting on {{speeding}} behavior on an urban highway were assessed using a reversal design. During baseline {{the percentage of}} drivers speeding was measured with a concealed radar unit. During the daily <b>posting</b> <b>condition</b> a highway sign was installed which provided feedback on the percentage of drivers not speeding yesterday and the best record to date. This sign was then covered and reintroduced. Results indicated that the sign was effective in reducing speeding behavior. Furthermore, the effects were most pronounced in reducing the speeds of the faster drivers. Next, daily and weekly postings were compared with the sign alone without numerical feedback: results revealed that the weekly <b>posting</b> <b>condition</b> was {{as effective as the}} daily <b>posting</b> <b>condition,</b> but that the sign had no influence when numbers were not posted. Finally, the weekly posting procedure remained effective during a 6 -month follow-up condition...|$|R
40|$|This paper {{presents}} the initial {{results of a}} study of the evolution of students’ knowledge of software engineering from the beginning {{to the end of a}} master’s degree curriculum in software engineering. Students were presented with a problem involving the initiation of a complex new project at the beginning of the program and again at the end of the program’s formal coursework. After considering the problem each time, students were asked what questions they had as the senior software engineer, which software engineering processes need to be put into place, and to enumerate any other issues they saw. Statistical analysis indicates that their enumeration of software processes in the <b>post</b> <b>condition</b> is very significantly richer than in the pre condition. They also gave significantly more responses about requirements, design, and engineering management in the <b>post</b> <b>condition.</b> Qualitative analysis suggests that the students’ questions in these areas were also more sophisticated in the <b>post</b> <b>condition,</b> suggesting, in accordance with the theory of “transfer as preparation for future learning,” that they are moving along a trajectory towards expertise...|$|R
30|$|The searching of nearest {{hospital}} is specified {{as a function}} SearchNHospital which takes two inputs, i.e., hospitals and actor and returns the nearest hospital. In the <b>post</b> <b>condition,</b> it is stated that there exists a hospital which is closest to the actor and is selected as the nearest hospital.|$|R
40|$|Abstract—Web Services (WS) are {{the basic}} {{building}} blocks for every e-business applications. They provide efficient reusability mechanism, thereby reducing the development time and cost. Web services can be identified by Uniform Resource Identifier (URI). The interfaces and bindings of Web Services can be discovered, defined and described as XML artifacts according to Web Service Description Language (WSDL). WSDL {{can be used to}} describe web service operations including input, output and exceptions. It cannot identify pre and <b>post</b> <b>conditions</b> of web services. But Semantic WSDL (WSDL-S) identifies the pre and <b>post</b> <b>conditions</b> of web services to generate optimal number of test cases. This paper presents an approach for generating web service test cases using WSDL-S and Object Constraint Language (OCL), while the test case generation technique is Orthogonal Array Testing (OAT). We have developed a prototype namely Semantic Web Services Test Case Generator (SWSTCG) which can be viewed in the web sit...|$|E
40|$|Web Services (WS) are {{the basic}} {{building}} blocks for every e-business applications. They provide efficient reusability mechanism, thereby reducing the development time and cost. Web services can be identified by Uniform Resource Identifier (URI). The interfaces and bindings of Web Services can be discovered, defined and described as XML artifacts according to Web Service Description Language (WSDL). WSDL {{can be used to}} describe web service operations including input, output and exceptions. It cannot identify pre and <b>post</b> <b>conditions</b> of web services. But Semantic WSDL (WSDL-S) identifies the pre and <b>post</b> <b>conditions</b> of web services to generate optimal number of test cases. This paper presents an approach for generating web service test cases using WSDL-S and Object Constraint Language (OCL), while the test case generation technique is Orthogonal Array Testing (OAT). We have developed a prototype namely Semantic Web Services Test Case Generator(SWSTCG) which can be viewed in the web site [URL] have generated WSDL of web service to be tested using NetBeans IDE and converted into WSDL-S by giving OCL references, where pre and <b>post</b> <b>conditions</b> are defined. Test data, using OAT, with different factors, levels and strengths are generated and documented in XML based test files called Web Service Test Specifications (WSTS) and executed. The proposed method is compared with the Pair-Wise Testing (PWT) method. We have conducted testingon various web service applications and the results have shown that the proposed method is effective in generating minimal test cases with maximum test case effectiveness...|$|E
40|$|Abstract. Model {{checking}} {{of linear}} temporal logic (LTL) specications {{with respect to}} pushdown systems {{has been shown to}} be a useful tool for analysis of programs with potentially recursive procedures. LTL, how-ever, can specify only regular properties, and properties such as correct-ness of procedures with respect to pre and <b>post</b> <b>conditions,</b> that require matching of calls and returns, are not regular. We introduce a tempo-ral logic of calls and returns (CaRet) for specication and algorithmic veri cation of correctness requirements of structured programs. The for-mulas of CaRet are interpreted over sequences of propositional valu-ations tagged with special symbols call and ret. Besides the standard global temporal modalities, CaRet admits the abstract-next operator that allows a path to jump from a call to the matching return. This op-erator can be used to specify a variety of non-regular properties such as partial and total correctness of program blocks with respect to pre and <b>post</b> <b>conditions.</b> The abstract versions of the other temporal modalitie...|$|E
5000|$|All {{judges and}} {{officers}} approved of by Parliament shall hold their <b>posts</b> on <b>condition</b> of good behaviour.|$|R
50|$|A {{data event}} is a {{relevant}} state transition defined in an event schema. Typically, event schemata are described by pre- and <b>post</b> <b>condition</b> {{for a single}} or a set of data items. In contrast to ECA (Event condition action), which considers an event to be a signal, the data event not only refers to the change (signal), but describes specific state transitions, which are referred to in ECA as conditions.|$|R
40|$|Steering {{towards an}} object in the {{environment}} can be controlled by equalizing the time-to-closure of the heading angle between the object and the direction of locomotion, and the time-to-passage of the observer by the object. Both quantities are optically specified in units of time by the heading angle and the optical expansion of the object, but do not involve perceived object distance. Three experiments required observers to steer through a computer simulated environment towards a target, depicted as a floating cross that did not optically expand, a floating sphere that did optically expand, or a post resting on the ground plane that did optically expand. Because the heading angle was defined in all three conditions, one would expect no differences between target types if steering {{is based on the}} heading angle alone. Time-to-passage was specified in the <b>post</b> and sphere <b>conditions,</b> but not in the cross condition. Hence, if steering is based on perceived time-to-passage, then one would expect better performance in the <b>post</b> and sphere <b>conditions</b> than in the cross condition. Target distance was indicated in the <b>post</b> <b>condition</b> by the target 2 ̆ 7 s height in the visual field. Hence, if steering is influenced by perceived target distance, then one would expect more reliable performance in the <b>post</b> <b>condition</b> than in the sphere or cross conditions. Experiment 1 revealed that steering was more successful in the <b>post</b> and sphere <b>conditions</b> than in the cross condition. In Experiment 2, steering was unaffected by target size, indicating that steering is not influenced by perceived target distance based on image size. Experiment 3 revealed differences in steering behavior between target types, and confirmed the hypothesis that observers were so moving as to equalize the time-to-closure of the heading angle and the time-to-passage of the target. ...|$|R
40|$|The Unified Modeling Language is {{an attempt}} to define a unified {{notation}} for Object-Oriented technology users. Since a notation without semantics is not precise enough, succeeding versions have improved the expressive power of UML. First, Object Constraint Language, permitting the description of invariants, pre and <b>post</b> <b>conditions,</b> was included in UML. More recently, Action Semantics has been approved by the Object Management Group to describe operations...|$|E
40|$|One of {{the more}} {{surprising}} things about the UML standard {{is the lack of}} detail on the structure of use cases. The UML semantics [1] state that “A use case can be described in plain text, using operations, in activity diagrams, by a state-machine, or by other behavior description techniques, such as pre-and <b>post</b> <b>conditions.</b> The interaction between the use case and the actors can also be presented in collaboration diagrams. ...|$|E
40|$|Design by {{contract}} is a software engineering technique {{used to promote}} software reliability. In order to use design by contract the selected programming language must have built in support for pre conditions, <b>post</b> <b>conditions</b> and class invariants, collectively called contracts, or some mechanism must be devised to validate the contract. This paper proposes a way of supporting contracts in C # using Resolve Corp. ’s eXtensible C # add in...|$|E
30|$|An {{algorithm}} {{is said to}} be correct if for every input data that satisfies some conditions-called the precondition of the algorithm, the output data satisfy a certain predefined condition-called the <b>post</b> <b>condition</b> of the algorithm. A graph algorithm depends upon number of vertices and edges in a graph and inter/intra relationship between these two features. Here, we will discuss an approach based on the adjacency matrices of the given sigraph to prove or disprove the correctness of the above proposed algorithm.|$|R
40|$|AbstractExtreme {{hydrological}} {{events are}} significant for river basin management and very important input for future development. However, comparison between pre and <b>post</b> development <b>conditions</b> is often neglected in extreme events assessment. Analyses of low flow conditions {{as a significant}} hydrological parameter are of the great importance for transboundary Drina River Basin, since it {{is a source of}} clean fresh water with significant potential for hydropower development. Hydrological analyses presented here reflect low flow statistics comparison for pre and <b>post</b> development <b>conditions.</b> Evaluated time series correspond to periods prior and after development of existing dams, reservoirs and hydropower plants. Confidence intervals estimation for different scenarios underline uncertainty associated with low flow assessment. The results indicate importance of comparison for pre and <b>post</b> development <b>conditions</b> with respect to extreme events and generate recommendations for future hydrological analyses in Drina River Basin and other river basins...|$|R
40|$|We {{consider}} how the OO notion of subtyping relates to lotos testing theory. In particular, we investigate which of the standard lotos preorders is a suitable instantiation of behavioural subtyping and argue {{that each of the}} main preorders, trace preorder, trace extension, reduction and extension, is in some way deficient. Then, in the light of pre and <b>post</b> <b>condition</b> based models of OO subtyping, we re-work the basic interpretation applied to lotos behaviour descriptions. We argue that this re-interpretation enables reduction to be used as an instantiation of behavioural subtyping. ...|$|R
40|$|This paper {{presents}} the Event and Situ-ation Ontology (ESO), a resource which formalizes {{the pre and}} <b>post</b> <b>conditions</b> of events and {{the roles of the}} entities af-fected by an event. The ontology reuses and maps across existing resources such as Wordnet, SUMO and Framenet and is de-signed for extracting information from text that otherwise would have been implicit. We present the metamodel of the ontology and the procedure for building the first ver-sion of ESO. ...|$|E
40|$|Automated {{black box}} test {{generation}} {{is a useful}} tool for developers that allows them to quickly generate a large number of tests {{with a wide range of}} values tested. The current most popular tool for black box test generation in Java, JML, is lacking in a number of features. SPEST aims to improve upon existing tools, and provide a black box test generation tool that can create human readable tests from simple pre and <b>post</b> <b>conditions</b> added as comments to the Java source code...|$|E
40|$|Abstract. The Unified Modeling Language, UML, has {{for several}} years been the leading {{standard}} for modeling of software systems. OCL is the expression language for UML and lets you describe system structure by invariants and system behavior by pre and <b>post</b> <b>conditions.</b> There are tools {{that can be used}} to validate and verify aspects of formal OCL specifications. This paper aims to describe some of the tools available, and to demonstrate how one of these tools, the Dresden OCL Toolkit, can be used to validate and verify a simple model. ...|$|E
40|$|We {{replicated}} a {{study by}} Van Houten, Nau, and Marini (1980) that had revealed reductions in vehicle speeding following the posting of percentages of drivers not speeding on a sign at roadside. Our subjects were drivers entering a residential area where the speed limit changed from 90 km/hr (55. 9 mph) to 60 km/hr (37. 3 mph). A total of 4, 409 vehicle speeds were taken from two observation sessions per day for 20 consecutive weekdays. The intervention consisted of a single <b>posting</b> <b>condition,</b> in which a hypothetical daily percentage of drivers not speeding was posted on a feedback sign, followed by a double <b>posting</b> <b>condition,</b> in which a sign posting a best result was erected beyond the feedback sign. Results revealed a significant speed reduction {{from an average of}} 69. 0 km/hr (42. 9 mph) during baseline to 63. 4 km/hr (39. 4 mph) during single posting. Average speed during double posting was 62. 9 km/hr (39. 1 mph). The percentage of drivers exceeding 70 km/hr (43. 5 mph) dropped from 41. 0 during baseline to 20. 5 during single posting. The significant speed reductions add to the generality of findings of similar studies in Canada and Israel and offer possible explanations for the failure of feedback posting to reduce speed in the U. S...|$|R
5000|$|The {{trail is}} still a work in progress. To date, about 20% {{of it has been}} resurfaced, with {{trestles}} and bridges repaired and trail signs <b>posted.</b> The <b>condition</b> of the railbed varies from region to region.|$|R
40|$|Two free recall {{experiments}} were performed under three selective conditions {{to decide whether}} meaningful relation between to-be-remembered item and not-to-be-remembered item would affect the selective recall of the former. In <b>Post</b> <b>condition,</b> where the selection is possible after PM, meaningful relation affected adversely only the SM recall, but it hardly affected the recall in other two selective conditions. It also {{increased the number of}} the Intrusion-errors in all the three selective conditions. The results were thought to indicate that the selection is not performed independently of memory, and they throw some doubt on the box theory dividing strictly the memory into PM and SM...|$|R
40|$|The {{algebraic}} calculus for reasoning {{about the}} complete behavior of object types {{and the effects}} of axioms upon subtyping were analyzed. The translation of pure algebra into a piecemeal treatment in terms of variants, pre-, and <b>post</b> <b>conditions</b> was studied. The existing object subtyping rules were applied to derive subtyping rules governing the strengthening, or weakening of the assertions as there was a direct relationship between axiom strengthening, and subtyping. It was found that weaker preconditions co-existed with stronger invariants, and the same system satisfied the stronger of the two...|$|E
40|$|A {{number of}} authors {{has studied the}} design of {{distributed}} systems considering {{the existence of an}} environment over which little (if any) control is retained. Perhaps the most systematic of these studies suggest the use of rely and guarantee conditions that assert respectively what is assumed from the environment and what the system is committed to insure as long as the assumptions hold, a refinement of the pre and <b>post</b> <b>conditions</b> adopted in sequential program design. We propose a new rely-guarantee discipline based on linear time future temporal connectives and show how it can be applied in designing open distributed systems...|$|E
40|$|Abstract. In {{recent years}} {{a number of}} OO methods have been {{enhanced}} with textual, mathematical languages for specifying invariants and action contracts (pre and <b>post</b> <b>conditions).</b> This paper builds on a recent proposal for “constraint diagrams”, a diagrammatic notation allowing the expression of such assertions. Constraint diagrams essentially provide a pictorial representation of navigation expressions, specifically the sets of objects they define, and, using Venn diagrams and other techniques, constraints on the cardinalities of and relationships between those sets. The original proposal focused {{on the use of}} constraint diagrams for depicting invariants. This paper focuses on their use in depicting action contracts. ...|$|E
40|$|This study {{compared}} {{the effect of}} two training strategies differing on the weekly intensity distribution on physiological parameters and running performance in moderately trained endurance athletes. METHODS: Thirty male athletes were equally divided into three groups, one following an increasing weekly aerobic intensity distribution (EXP 1), one with constant weekly aerobic intensitydistribution (EXP 2) and a control one, following a freely chosen program (CON). Before the training intervention, athletes performed a maximal exercise treadmill test to quantify the different zones allowing training to be controlled, based on blood lactate concentration values (BLa), over a 4 - week period. Changes in exercise heart rate (HR), running velocity and rate of perceived exertion at three exercise intensities corresponding to 2. 5, 4 and 8 mmol·l- 1 of BLa were analyzed at three testing conditions: before (pre), after two (mid) and four weeks (post). RESULTS: A significant increase (p ≤ 0. 05) in running velocity at the intensity of 8 mmol·l- 1 in EXP 1 group was revealed at mid (5. 5 %) and <b>post</b> <b>condition</b> (11. 5 %), while EXP 2 group showed {{a significant decrease in}} exercise HR at 4 mmol·l- 1 between pre (6. 7 %) and <b>post</b> <b>condition</b> (9. 0 %) (p ≤ 0. 05). The rest of the examined variables showed only trivial changes in both experimental groups at all testing conditions (p > 0. 05). In addition, no changes were observed in CON group in any of the variables tested. CONCLUSION: These results demonstrate that depending on the training goal, different intensity variation strategies should be followed to induce the desired adaptations. SIN FINANCIACIÓN 1. 215 JCR (2016) Q 3, 58 / 81 Sport SciencesUE...|$|R
50|$|Winston Churchill met Daniel Serruys at the Château du Bosc Théroulde {{to discuss}} the <b>post</b> war {{economic}} <b>conditions.</b>|$|R
2500|$|Step seven {{is for the}} {{intervention}} specialist to arrange for follow-up contact with the client to evaluate his or her <b>post</b> crisis <b>condition</b> {{in order to make}} certain resolution towards progressing. The follow-up plan may include [...] "booster" [...] sessions to explore treatment gains and potential problems.|$|R
40|$|Use case size point (USP) {{method has}} been {{proposed}} to estimate object oriented software development effort in early phase of software project and used {{in a lot of}} software organizations. Intuitively, USP is measured by counting the number of actors, preconditions, <b>post</b> <b>conditions,</b> scenarios included in use case models. In this paper have presented a Adaptive fuzzy Neural Network model to estimate the effort of object oriented software using Use Case size Point approach. In our proposed system adaptive neural network fuzzy use case size point has less error and system worked more accurate and appropriative than prior methods...|$|E
40|$|One of {{the worst}} {{possible}} accident scenarios for the ITER fusion reactor is that of losing totally the cooling capacity of the complete machine. This accident {{is referred to as}} total LOCA The post-accidental thermal transient of a complete in-vessel sector of ITER was simulated: (a) assuming that every cooling loop other than those of the VV have failed and (b) under "envelope" <b>post</b> <b>conditions,</b> i. e. assuming the instantaneous and complete failure of every cooling loop of the reactor. Results confirmed past work on other designs and indicated that, with regard to the decay heat, ITER can be made passively safe with minor design intervention...|$|E
40|$|This paper {{describes}} {{a mechanism to}} analyse the dependencies among events within use case specifications. The paper presents an argument for forcing explicit consideration of dependencies, by using an augmented use case description, which forces the modeller to add pre and <b>post</b> <b>conditions</b> on events. The argument is demonstrated using an industrial case study involving the specification of real-time monitoring software. The study compares initial use case descriptions with those where dependency information has been considered. The conclusion is that consideration of dependencies helps ‘tease ’ out hidden issues regarding the problem domain and that appropriate (simple to use) tool support is vital for industrial application. 1...|$|E
50|$|It is {{also known}} for its spa. The {{therapeutic}} springs were mentioned in 1549 for the first time. Today they treat patients with disorders of the locomotor system, with rheumatic diseases, <b>post</b> traumatic <b>conditions,</b> conditions after orthopaedic disturbances of the spine of adolescents, neurological diseases and occupational diseases.|$|R
40|$|Polyhedral {{analysis}} infers invariant linear equalities and inequalities of imperative programs. However, the exponential {{complexity of}} polyhedral operations such as image computation and convex hull limits {{the applicability of}} polyhedral analysis. Weakly relational domains such as intervals and octagons address the scalability issue by considering polyhedra whose constraints are drawn from a restricted, user-specified class. On the other hand, these domains rely solely on candidate expressions provided by the user. Therefore, they often fail to produce strong invariants. We propose a polynomial time approach to strongly relational analysis. We provide efficient implementations of join and <b>post</b> <b>condition</b> operations, achieving a trade off between performance and accuracy. We have implemented a strongly relational polyhedral analyzer for {{a subset of the}} C language. Initial experimental results on benchmark examples are encouraging...|$|R
25|$|Λp is the {{absolute}} difference between pre- and <b>posttest</b> probability of <b>conditions</b> (such as diseases) that the test is expected to achieve.|$|R
