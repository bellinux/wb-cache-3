44|25|Public
50|$|A {{number of}} MathWorks and {{third-party}} tools {{can be used}} with Stateflow to validate the design and generate code. For example, Simulink Verification and Validation, a MathWorks tool, can be used to check for requirements traceability and model coverage analysis. Other add-on code generation tools can be used to automatically generate C, C++, HDL, and <b>PLC</b> <b>code</b> for implementation on embedded systems.|$|E
40|$|This paper {{illustrates}} {{a case study}} of a PLC (Programmable Logical Controller) logic simulation in the car manufacturing industry. The case study is developed in order to simulate and verify the PLC control program for an automobile panel AS/RS. Because of increasing demand, the complexity of the supply system is rising in this industry. To cope with this problem, companies use AS (automated storage) and RS (retrieval system) systems, despite inherent logical complexities. Industrial automated processes use <b>PLC</b> <b>code</b> to control the AS/RS; however, control information and the control code (<b>PLC</b> <b>code)</b> are difficult to understand. Therefore, this paper suggests a PLC simulation environment, using 3 D models and <b>PLC</b> <b>code,</b> which consists of real automobile manufacturing data. Data used in this simulation is based on 3 D and logical models, using actual size and PLC signals, respectively. The environment resembles a real factory; users can verify and test the <b>PLC</b> <b>code</b> using the simulation prior to implementation of AS/RS. The developed simulation environment can be used to run AS/RS systems to reduce time and cost. ...|$|E
40|$|Appendix D, CD content can {{be found}} with print thesis held at Turitea library, Palmerston North. Content: Empty APCG program Empty RSLogix 5000 l 5 k file Empty RSLogix 5000 ACD file Real Life project - APCG program (only partial) Real Life project - RSLogix 5000 l 5 k file (only partial) Real Life project - RSLogix 5000 ACD file (only partial) A {{competitive}} edge {{is one of the}} requirements of a successful business. Tools, which increase an engineer s productivity and minimize cost, can be considered as a competitive edge. The objective of this thesis was to design, create, and implement Automatic <b>PLC</b> <b>Code</b> Generator (APCG) software. A secondary objective was to demonstrate that the use of the APCG software will lead to improved project efficiency and enhanced profit margin. To create the APCG software, the MS Excel and Visual Basic for Applications (VBA) programs were used as the platform. MS Excel sheets were used as a user interface, while VBA creates the <b>PLC</b> <b>code</b> from the information entered by the engineer. The <b>PLC</b> <b>code,</b> created by the APCG software, follows the PLC structure of the Realcold Milmech Pty. Ltd, as well as the research Automatic generation of <b>PLC</b> <b>code</b> beyond the nominal sequence written by Guttel et al [1]. The APCG software was used to design and create a <b>PLC</b> <b>code</b> for one of the projects undertaken by Realcold Milmech Pty. Ltd. By using APCG software, time to design, create, and test the <b>PLC</b> <b>code</b> was improved when compared to the budgeted time. In addition, the project's profit margin was increased. Based on the results of this thesis it is expected that the APCG software will be useful for programmers that tend to handle a variety of projects on a regular basis, where programming in a modular way is not appropriate...|$|E
40|$|This work {{focuses on}} {{programmable}} logic controllers (PLC) made by WAGO and SCADA systems. It consists of two parts, theoretical part and a practical part. In theoretical part there are terms which explains SCADA systems, WAGO PLC and programming software e!COCKPIT made by WAGO and searches of free SCADA systems supporting communication through Modbus TCP. One of the SCADA systems was chosen as a visualization software for two task in practical part. Practical part consists of <b>PLC</b> <b>codes</b> made in programming software e!COCKPIT for two tasks, wind tunnel and controlled axis and their visualization...|$|R
50|$|The DTU {{is used in}} {{primarily}} in the manufacturing sector to allow users to connect all their shop floor systems (programmable logic controllers (<b>PLCs),</b> bar <b>code</b> scanners, marquee displays, weigh scales, torque guns, etc.) together and allow for managed communication between them.|$|R
5000|$|I/Gear, Inc. is a {{software}} and solutions {{company based in}} Louisville, Kentucky. Their main product, the Data Transport Utility (also eponymously referred to as [...] "I/Gear"), is used in manufacturing to allow users to connect all their shop floor systems (programmable logic controllers (<b>PLCs),</b> bar <b>code</b> scanners, marquee displays, weigh scales, torque guns, etc.) together and allow for managed communication between them.|$|R
40|$|Preparing an {{automatic}} production system {{takes a lot}} of time and to be able to decrease this time virtual simulation studies are used more and more frequently. However, even if more work is performed in a virtual environment a problem is still that the same work is done more than one time in different software tools due to the lack of integration between them. The present paper presents a case study that investigates how a newly developed tool called SIMATIC Automation Designer can be used in order to close the gap between the mechanical design and the electrical design. SIMATIC Automation Designer is a Siemens software that can generate <b>PLC</b> <b>code</b> and HMI screens. The result shows that by generating <b>PLC</b> <b>code</b> and HMI screens automatically, it is possible to get the same structure and naming standard in every PLC and HMI project. This will ensure a corporate standard and will be a quality assurance of the <b>PLC</b> <b>code</b> and HMI screens...|$|E
40|$|In recent years, many {{software}} engineering tools for programming, simulation and debugging <b>PLC</b> <b>code</b> {{have been developed}} in respond {{to the need to}} rapid deployment of automation systems. However, most of these tools are developed independently for the later part of program development life cycle and lack of conceptual and semantic integration. With the growing size and complexity of PLC programs, it is a natural evolution that PLC programming starts to migrate to web based so that different sets of expertise and capability can participate in the product develop life cycle. To this end, a semantic connection needs to be established so that conceptual design as well as system specification of the control systems and the systems to be controlled can be described precisely and shared. In this paper, a common model of system specification is proposed to facilitate <b>PLC</b> <b>code</b> development. It is also presented as a common base to connect commercial available programming, testing, simulation, and visualization tools...|$|E
40|$|In {{this paper}} {{we present a}} new tool for editing, vi-sualizing, and {{implementing}} Signal Interpreted Petri Nets (SIPNs). SIPNs are used to formally specify control algo-rithms for Programmable Logic Controllers (PLCs). The presented tool allows to automatically transform a graph-ically edited SIPN into <b>PLC</b> <b>code</b> using the standardized PLC language Instruction List. The tool was implemented using DiaGen, an innovative workbench for generating graphics editors. 1...|$|E
40|$|Abstract — Electric Submersible Pumps (ESP) can be in-stalled in {{oil wells}} to create {{artificial}} lift, {{in order to}} increase recovery from the reservoir, and boost the production rate. A Model Predictive Controller (MPC) for an ESP, based on linearized models, is developed and designed using SEPTIC (Statoil’s in-house software tool for MPC), and implemented on a Programmable Logic Controller (<b>PLC).</b> Automatic <b>code</b> generators have been utilized to generate an application-specific MPC controller in ANSI C code. Hardware-in-the-loop simulation results show that the control performance of the PLC implementation is comparable to the original SEPTIC controller. I...|$|R
40|$|The phylogenetic interrelationships between {{strains of}} 5 toxin types (A to E) of Clostridium {{perfringens}} were examined by analysis {{of differences in}} the nucleotide sequences of phospholipase C genes (plc genes) among 10 strains, including 3 strains for which the plc gene sequences have been previously reported. A plc gene was also cloned from a Clostridium novyi type A strain and sequenced to analyze the interspecies diversity of plc genes. Phylogenetic trees constructed by the neighbor-joining method revealed that the phylogeny of C. perfringens strains {{is not related to}} toxin typing, in agreement with the results of a comparative genome mapping study by Canard et al. (B. Canard, B. Saint-Joanis, and S. T. Cole, Mol. Microbiol. 6 : 1421 - 1429, 1992). Various C. perfringens phospholipase C enzymes were purified from cultures of Escherichia coli cells into which the encoding plc genes had been cloned. All of the enzymes showed the same specific activity. On the other hand, the level of plc transcripts differed greatly (up to 40 -fold) from one C. perfringens strain to another. No significant difference in the nucleotide sequence of the plc promoter region was observed for any of the plc genes. These results suggest that the variation in phospholipase C activity among different strains is not due to mutation in the <b>plc</b> <b>coding</b> region but to that in an extragenic region. The evolution of C. perfringens phospholipase C is discussed on the basis of similarities and differences between clostridial plc genes...|$|R
40|$|The main {{contributions}} are abstract PLC machine for modeling {{a wide range}} of binary PLCs (Programmable Logic Controllers), the new theory of transfer sets, and APLCTRANS algorithm that converts abstract PLC programs to logical formulas. The conversion runs in linear time in the size of <b>PLC</b> source <b>code,</b> at the most cases, though the converted program has an exponential complexity of its execution time. The completeness proof for modeling an abstract PLC by a Mealy's automaton is presented and APLCTRANS possibilities are demonstrate by the parallel decomposition of PLC program, by verifying absence of relay races in PLC, and by modeling PLC as a timed automata...|$|R
40|$|The {{main goal}} of this bachelor’s thesis was {{creating}} a tool for generating <b>PLC</b> <b>code</b> according to entered data. Generator works with function blocks that are assigned to each faceplate object from faceplate library provided by COMPAS Automatizace, spol s. r. o. Source file is created from generated code and program blocks in program TIA Portal V 13 are created from this source file...|$|E
40|$|Controlling a {{manufacturing}} cell {{is a complex}} task to. A manufacturing system could {{be regarded as a}} discrete event system from flow and control perspective. However,  it’s a rather intractable to model it analytically for behavior analysis and control development. It is necessary to generate a control to ensure every part of the manufacturing cell do the right activity at the right time and make sure that various operations are coordinated and with the right sequence. This is the task of cell control to which programmable logic controllers (PLC) play a role. Though much success have been achieved in simplifying the development of work of PLC’s by standardization there are still outstanding issues in interoperability of programs from different vendors and long development time particularly for code generation, validation and commissioning. So in this thesis, an attempt has been made to address these issues in a new way to create, verify and validate PLC program using Matlab/Simulink and CoDeSys. The model that generated from Stateflow environment is based on finite state machine theory. With the finite state machine model {{a manufacturing}} cell could be described as a graphical group of states and the transitions between each two states. It is clearly to show sequential relation of states and activities in Stateflow model. It also shows where the manufacturing process begins with a default transition. It is easy to alter every part of models when necessary. It is easy to translate <b>PLC</b> <b>code</b> automatically by Matlab after every altering. In this thesis it also discusses how to verify the <b>PLC</b> <b>code</b> by CoDeSys after creating <b>PLC</b> <b>code</b> from Stateflow models...|$|E
40|$|The {{numerous}} {{benefits of}} automatic application code generation are widely accepted {{within the software}} engineering community. A few of these benefits include raising the abstraction level of application programming, shorter product development time, lower maintenance costs, and increased code quality and consistency. Surprisingly, code generation concepts have not yet found wide acceptance and use {{in the field of}} programmable logic controller (PLC) software development. Software engineers at the NASA Kennedy Space Center (KSC) recognized the need for <b>PLC</b> <b>code</b> generation while developing their new ground checkout and launch processing system. They developed a process and a prototype software tool that automatically translates a high-level representation or specification of safety critical application software into ladder logic that executes on a PLC. This process and tool are expected to increase the reliability of the <b>PLC</b> <b>code</b> over that which is written manually, and may even lower life-cycle costs and shorten the development schedule of the new control system at KSC. This paper examines the problem domain and discusses the process and software tool that were prototyped by the KSC software engineers...|$|E
40|$|The Clostridium {{perfringens}} pk gene encoding phospholipase C (alpha-toxin) was cloned from type C NCIB 10662, {{a strain}} which produces {{low levels of}} phospholipase C activity. The nucleotide sequence of a cloned 3. 1 -kb HindIII fragment was determined. The same fragment was also cloned from type A NCTC 8237, a phospholipase C-overproducing strain. In this case, an open reading frame (ORF 2) truncated in the previously cloned 2 -kb fragment was also sequenced. Comparison of the nucleotide sequence between the 3. 1 -kb fragments of the two type strains shows some differences both in the pkc gene and in ORF 2. However, when the 3. 1 -kb fragment was cloned into plasmid pUC 19 and expressed in Escherichia coli, theplc genes from both type strains were similarly expressed and the toxins produced showed similar levels of activity. Northern blot analysis revealed that the type A strain produced 16 to 23 times more plc mRNA than the type C strain. These results indicate that in C. perfringens the two plc genes are transcribed at different rates, probably because of a difference in a locus lying outside of the cloned fragments. Gel retardation analysis showed that the type A strain possessed two different proteins that bound {{different regions of the}} plc gene. However, one of these proteins, which binds within the <b>plc</b> <b>coding</b> region, was not found in the type C strain, suggesting that it plays a role in the regulation of the pie gene expression. Clostridiumperfringens, the most widely occurring patho...|$|R
50|$|Stuxnet is {{typically}} {{introduced into the}} supply network via an infected USB flash drive with persons with physical access to the system. The worm then travels across the cyber network, scanning software on computers controlling a programmable logic controller (PLC). Stuxnet introduces the infected rootkit onto the <b>PLC</b> modifying the <b>codes</b> and giving unexpected commands to the PLC while returning a loop of normal operation value feedback to the users.|$|R
40|$|A uniformly {{distributed}} hopping pattern {{suitable for}} M-levelled M-ary {{frequency shift keying}} (MMFSK) and multi-tone MMFSK (M 3 FSK) modulation schemes is proposed. Compared to randomly generated and some purposely designed codes, uniformly distributed codes show better BER performance in a powerline communication (<b>PLC)</b> environment. These <b>codes</b> are also efficient in terms of spectral usage because they are designed with the requirement that they utilise all the available frequencies within the symbol period...|$|R
40|$|International audienceProgrammable logic {{controllers}} (PLCs) {{are complex}} cyber-physical systems which {{are widely used}} in industry. This paper presents a robust approach to design and implement PLC-based embedded systems. Timed automata are used to model the controller and its environment. We validate the design model with resort to model checking techniques. We propose an algorithm to generate <b>PLC</b> <b>code</b> from timed automata and implement this algorithm with a prototype tool. This method can condense the developing process and guarantee the correctness of PLC programs. A case study demonstrates {{the effectiveness of the}} method...|$|E
40|$|The paper {{deals with}} a unified {{environment}} for the design and implementation of control schemes. The widely used MATLAB-SIMULINK is used for control scheme description. The implementation hardware is from Mitsubishi PLC. The SIMULINK library was extended with target hardware blocks. After an oV-line design procedure, which can be combined with hardware-in-the-loop experiments, the control scheme is translated into <b>PLC</b> <b>code</b> in three steps. The {{results show that the}} autocoding of small, low-cost industrial controllers can be eYciently realized by integrating widely used, inexpensive and commercially available tools...|$|E
40|$|We {{developed}} an UML-State-charts Object Oriented Design Pattern for PLCs IEC 61131 - 3. This PLC UML-State-chart Design Pattern aims {{to explore the}} advantage of Object Oriented Programming by IEC 61131 - 3 in PLCs, {{and to provide a}} direct map of UML State-chart to <b>PLC</b> <b>code.</b> We illustrates the design pattern and its use through UML Class diagrams and an application example. This Design Pattern can be used to reduce the development time of State-charts in automation software. It can also lead towards further investigations in PLC Design Patterns that may improve the whole development of automation softwar...|$|E
40|$|The paper {{introduces}} a discrete-event simulation-based decision supporting system aiming at automatically mirroring {{the current state}} of a large-scale material handling system of a production system in a digital model and supporting the analysis of diverse control settings and rules. The discrete-event digital model is built in an automated way and all the data necessary for the model are taken from a manufacturing execution system (MES) and additionally directly from programmable logic controllers (PLC). Main focus is given to present the results of the <b>PLC</b> program <b>code</b> processing method (code mapping) generating a structured dataset, as well as the model-reconstruction method for the simulation software. The easy-of-use support tool is intended to be used both in planning and operation phases of an automotive manufacturing company, thus the capabilities of model reconstruction and simulation are tested on real-world data. ...|$|R
40|$|Electric Submersible Pumps (ESPs) can be {{installed}} in oil wells to create artificial lift, {{in order to increase}} recovery from the reservoir, and boost the production rate. A Model Predictive Controller (MPC) for an ESP, based on linearized models, is developed and designed using SEPTIC (Statoil's in-house software tool for MPC), and implemented on a Programmable Logic Controller (<b>PLC).</b> Automatic <b>code</b> generators have been utilized to generate an application-specific MPC controller in ANSI C code. Hardware-in-the-loop simulation results show that the control performance of the PLC implementation is comparable to the original SEPTIC controller. Preprint version. © IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other users, including reprinting/ republishing this material for advertising or promotional purposes, creating new collective works for resale or redistribution to servers or lists, or reuse of any copyrighted components of this work in other works...|$|R
40|$|Two {{different}} representative {{recombinant clones}} encoding Aeromonas hydrophila lipases were found upon screening on tributyrin (phospholipase A 1) and egg yolk agar (lecithinase-phospholipase C) plates of a cosmid-based genomic library of Aeromonas hydrophila AH- 3 (serogroup O 34) introduced into Escherichia coli DH 5 α. Subcloning, nucleotide sequencing, and in vitro-coupled transcription-translation experiments {{showed that the}} phospholipase A 1 (pla) and C (<b>plc)</b> genes <b>code</b> for an 83 -kDa putative lipoprotein and a 65 -kDa protein, respectively. Defined insertion mutants of A. hydrophila AH- 3 defective in either pla or plc genes were defective in phospholipase A 1 and C activities, respectively. Lecithinase (phospholipase C) was shown to be cytotoxic but nonhemolytic or poorly hemolytic. A. hydrophila AH- 3 plc mutants showed a more than 10 -fold increase in their 50 % lethal dose on fish and mice, and complementation of the plc single gene on these mutants abolished this effect, suggesting that Plc protein is a virulence factor in the mesophilic Aeromonas sp. serogroup O: 34 infection process...|$|R
40|$|The paper {{presents}} an approach for designing dependable {{programmable logic controller}} (PLC) programs. It starts from informal specifications and ends with the final implementation on a real PLC. The approach uses Signal InterpretedPetri Networks (SIPNs) for modeling the control algorithm, model checking for model verification and validation, and automatic Instruction List (IL) program generation. Finally, the IL program is tested on a real PLC. A simple example is used throughout the paper in order to illustrate the framework. The advantage of the approach consists in the correctness of the resulting PLC programs, which makes them much more dependable than direct implemented <b>PLC</b> <b>code...</b>|$|E
40|$|Simulation-based {{programmable}} logic controller (<b>PLC)</b> <b>code</b> verification {{is a part of}} virtual commissioning, where the control code is verified against a virtual prototype of an application. With today's general OPC interface, it is easy to connect a PLC to a simulation tool for, e. g., verification purposes. However, there are some problems with this approach that can lead to an unreliable verification result. In this paper, four major problems with the OPC interface are described, and two possible solutions to the problems are presented: a general IEC 61131 - 3 -based software solution, and a new OPC standard solution...|$|E
40|$|One of {{the most}} {{widespread}} techniques to evaluate various aspects of an existing manufacturing system is discrete-event simulation (DES). However, building a simulation model of a manufacturing system needs great resource expenditures. Automated data collection and model buildup can drastically reduce {{the time of the}} design phase as well as support model reusability. Since most of the manufacturing systems are controlled by low level controllers they store structure and control logic of the system to be modeled by a DES system. The paper introduces an ongoing research of <b>PLC</b> <b>code</b> processing method for automatic simulation model generation of a conveyor system of a leading automotive factory...|$|E
40|$|Blind {{detection}} of a desired user’s signal in a periodic long-code (<b>PLC)</b> direct sequence <b>code</b> {{division multiple access}} (DS-CDMA) system is considered. A code-constrained inverse filter criterion (IFC) -based blind detector for short-code CDMA signals to detect a desired user’s signal was recently presented by Tugnait and Li (July 2001). In PLC CDMA systems, a user signal may be treated as the superposition of several virtual short-code signals. In this paper a novel approach combining the code-constrained IFC and a penalty function is proposed to simultaneously extract all virtual users associated with a given PLC user. Global minima of the proposed cost function are analyzed. An illustrative simulation example is provided. ...|$|R
30|$|In addition, {{studies on}} the {{compliance}} of automatically generated code with safety standards were performed. Krizan et al. in [14] dealt with the usability of automatically generated C code in critical applications. Compliance with the DO- 178 C and DO- 331 standards were presented. DO- 178 C and DO- 331 address the entire software development cycle, from functional specification to software verification. The DO- 178 C and DO- 331 are documents used by certification authorities such as the Federal Aviation Administration, European Aviation Safety Agency and Transport Canada to approve software for aerospace systems. In [15], the authors used the IEC 61508 standard and investigated options for running automatically generated <b>code</b> on safety <b>PLCs.</b> Stages for <b>code</b> generation, evaluation, and conversion before the code was applied in safety systems were presented.|$|R
40|$|Qualitatively {{different}} {{heat transfer}} characteristics between a transonic blade tip and a subsonic one {{have recently been}} discovered. High-resolution experimental data can be acquired for blade-tip heat transfer research using a high-speed linear cascade. A combined experimental and computational fluid dynamics study on several high-pressure turbine blade-tip configurations is conducted to understand the flow physics in both stationary and moving casing setups. Extensive tests measuring aerodynamic loss and heat transfer have been performed on a stationary squealer tip at engine-representative aerodynamic conditions. A systematic validation of the computational fluid dynamics solver (Rolls–Royce, <b>plc.</b> HYDRA <b>code)</b> is introduced, showing good agreement with the experimental data obtained. Relative casing movement effects are then evaluated for two tip configurations at three different tip gaps. The moving casing is shown to affect the aerothermal performance considerably; the trends are consistently captured for the large and medium tip gaps, both in the stationary and moving casing instances. Presented results confirm that, even with a moving casing, the blade tips remain transonic. It is also shown that the heat transfer is not only dependent on the tip gap size but also the tip-geometry configuration. The squealer cavity is subsonic regardless of the tip gap size, whereas the local flow state over a flat tip is much more responsive to tip gap size...|$|R
40|$|The Supervisory Control Theory {{is applied}} to a {{manufacturing}} cell commanded by a programmable logic controller (PLC). By means of local modular approach a methodology that exploits modularity of the plant and of the behavioral specifications models # optimal supervisors are obtained without state-space explosion. For the purpose of simplifying the ladder diagram implementation in the PLC, reduced supervisors are implemented in a three level structure that executes the modular supervisors concurrent action and interfaces the theoretical model with the real system. The flexible and productive manufacturing cell behavior, after the control system practical implementation, and the final <b>PLC</b> <b>code</b> readability and flexibility are positive quality indicators to the applied methodology...|$|E
40|$|Model {{checking}} is {{a promising}} formal verification method to complement testing {{in order to}} improve the quality of PLC programs. However, its application typically needs deep expertise in formal methods. To overcome this problem, we introduce PLCverif, a tool that builds on our verification methodology and hides all the formal verification-related difficulties from the user, including model construction, model reduction and requirement formalisation. The goal of this tool is to make model checking accessible to the developers of the PLC programs. Currently, PLCverif supports the verification of <b>PLC</b> <b>code</b> written in ST (Structured Text), but it is open to other languages defined in IEC 61131 - 3. The tool can be easily extended by adding new model checkers...|$|E
40|$|A Computer Aided Software Engineering (CASE) tool, {{called a}} {{methodology}} companion, designed {{to support the}} development of control software for programmable logic controllers (PLCs) in batch manufacturing in the dairy industry is described. The aim of the methodology companion is address problems in the software development life cycle including the need for standardization of the control specification, maintenance of the specification, and may ultimately provide automatic generation of <b>PLC</b> <b>code</b> from the specification. It replaces a set of generic tools {{used in the past}} to develop PLC control software. These tools included a word processor for specification of the control requirements, a database system to manage the assignment of I/O addresses to plant equipment, and the PLC vendor's proprietary relay ladder logic programming environment. ...|$|E
40|$|This paper {{deals with}} a design of an {{inverted}} pendulum model and its controller in Matlab/Simulink, a conversion of the model and its controller to the ANSI C language and its implementation to B&R <b>PLC's.</b> The source <b>code</b> for B&R <b>PLC's</b> is generated automatically by the B&R Automation Studio Target for Simulink library. The first part deals with {{the design of a}} mathematical model of the inverted pendulum and its simulation in Matlab/Simulink, followed by a design of a LQ controller for this model using Matlab functions and a description of the B&R Automation Studio Target for Simulink library. The last part of this paper deals with the implementation of the model and its controller into two separate B&R PLC's, which are networked with the Ethernet Powerlink industrial fieldbus and it also describes visualizations that were designed for operating the system...|$|R
40|$|Formal {{methods for}} {{real-time}} systems {{are an important}} topic of contemporary research. The aim is {{to cope with the}} additional complexity of ``time'' in specification and verification. In [Die 99 b] we present an approach to the correct design of real-time programs implemented on ``Programmable Logic Controllers'' (PLCs). This hardware executes repeatedly an application program whereas each cycle has an upper time bound. The central device in our approach is the notion of ``PLC-Automaton'' which provides an abstract view on PLC programs. For PLC-Automata the following results are presented in [Die 99 b]: It is possible to generate <b>PLC</b> source <b>code</b> from a PLC-Automaton. Also constraints on both the speed of the PLC and on the accuracy of time measurement are derived. A logical semantics in terms of Duration Calculus is developed. Since this semantics considers the cyclic behaviour, computation speed, and timer tolerances a realistic model of the real-world behaviour is given. Several ways to compose PLC-Automata are defined and described semantically. An alternative operational semantics in terms of Timed Automata is given. It is provably consistent with the Duration Calculus semantics. Hence, model-checking PLC-Automata is possible due to this semantics. Moreover, we examine techniques for building abstractions of these Timed Automata models. A formal synthesis procedure for ``Implementables'', a sublanguage of Duration Calculus, is derived that produces a PLC-Automaton implementing the Implementables-specification if and only if there exists an implementing PLC-Automaton...|$|R
40|$|A {{suitable}} method {{supported by}} a toolset {{with a high degree}} of automation is a necessity for the successful employment of formal methods in industrial projects. The GTO toolset and method have been developed, and successfully applied, to formal methods in safety-critical control applications related to railway signalling since the mid 1990 s. The toolset and method support the entire formal methods process from writing and validating formal specifications, through modelling of the implementation to formal verification and analysis of verification results. One goal the toolset and method was to make formal methods more competitive by streamlining the process so that – at least within an established application area – individual verification tasks could be done in an “assembly line”-like fashion with minimum overhead. In line with this goal, the toolset is intended for use with configurable systems, where a generic specification is applicable to a family of systems and adapted to a specific system using configuration data. The functions carried out by the toolset include static checking and simulation of specifications, checking of configuration data, generation of implementation models from <b>PLC</b> program <b>code</b> or relay schematics, simulation of the implementation model, formal verification by refinement proof, and analysis of failed refinement proofs. Refinement proofs are automatically carried out by a satisfiability (SAT) solver of the user’s choice, which is interfaced to the main tool. We will outline the method and functions of the toolset as well as the formal notation – a simple temporal predicate logic – used by the toolset...|$|R
