54|45|Public
25|$|Research In Motion Limited {{was founded}} in March 1984 by Mike Lazaridis and Douglas Fregin. At the time, Lazaridis was an {{engineering}} student at the University of Waterloo while Fregin was an engineering student at the University of Windsor. In 1988, RIM became the first wireless data technology developer in North America and the first company outside Scandinavia to develop connectivity products for Mobitex wireless packet-switched data communications networks. In 1990, RIM introduced the DigiSync Film KeyKode Reader. In 1991, RIM introduced the first Mobitex <b>protocol</b> <b>converter.</b> In 1992, RIM introduced the first Mobitex point-of-sale solution, a <b>protocol</b> <b>converter</b> box that interfaced with existing point-of-sale terminal equipment to enable wireless communication. In 1993, RIM introduced the RIMGate, the first general purpose Mobitex X.25 gateway. In the same year, RIM launched Ericsson Mobidem AT and Intel wireless modem containing RIM modem firmware. In 1994, RIM introduced the first Mobitex mobile point-of-sale terminal. In the same year, RIM received the Emmy Award for Technical Innovation and the KPMG High Technology Award. In 1995, RIM introduced Freedom, the first Type II PCMCIA radio modem for Mobitex.|$|E
50|$|<b>Protocol</b> <b>Converter</b> {{applications}} {{vary from}} industry to industry. The <b>protocol</b> <b>converter</b> {{can be a}} software converter, hardware converter, or an integrated converter depending on the protocols.|$|E
5000|$|... 1994: OKEFORD <b>Protocol</b> <b>Converter</b> and Open Programmable Switch {{launched}} ...|$|E
5000|$|... #Subtitle level 2: Latency & {{engineering}} {{issues in}} using <b>protocol</b> <b>converters</b> ...|$|R
5|$|Various <b>protocol</b> <b>converters</b> are {{available}} that convert USB data signals {{to and from}} other communications standards.|$|R
5000|$|... 4G LTE dual-carrier and 3G {{wireless}} routers; high-gain and wideband antennas, signal amplifiers, <b>protocol</b> <b>converters,</b> {{networking equipment}} ...|$|R
50|$|During 1993, Aculab {{introduced}} Groomer, a <b>protocol</b> <b>converter</b> {{that enabled}} interconnection between disparate telephone networks running incompatible protocols. In 2002, this product was relaunched as GroomerII, a signalling and media gateway {{that can be}} used for connection between equipment and applications deployed in TDM and IP networks.|$|E
50|$|A TIF also {{contains}} 3 main processor modules and two Ethernet communications modules, but additionally has two SSI communications modules, {{which are used}} to interface to an SSI compatible data links. The TIF itself does not perform any interlocking functionality, it operates only as a <b>protocol</b> <b>converter.</b>|$|E
50|$|In this diagram, the {{scenario}} {{is the same}} as before with two exceptions: (i) A more efficient modem architecture is shown, the modem being a PPPoE-to-PPPoA <b>protocol</b> <b>converter.</b> (ii) The service provider offers a PPPoA service and does not understand PPPoE. There is no PPPoEoA in this protocol chain.|$|E
40|$|Hardware/software {{partition}} is {{a critical}} phase in hardware/software co-design. This paper proposes a hybrid partitioning framework, in which we design a set of <b>protocol</b> <b>converters</b> to construct the nterface component between the hardware and software components,and reuse the formerly well-built partitioning rules by introducing <b>protocol</b> <b>converters</b> and rewriting them for this hybrid framework. The hardware components generated by our partitioning process are coded directly in Verilog HDL, which will greatly facilitate the further compilation from it down to netlists...|$|R
50|$|The {{following}} {{types of}} applications would require or benefit from DII: browsers for CORBA services, application browsers, bridges (<b>protocol</b> <b>converters),</b> applications accessing {{huge numbers of}} different interfaces, monitoring applications.|$|R
50|$|<b>Protocol</b> <b>Converters</b> are {{generally}} used for transforming data and commands from one device or application to another. This necessarily involves transformation of data, commands, their representation, encoding and framing {{to achieve the}} conversion.|$|R
50|$|Connection to non-SNA {{networks}} was difficult. An application which needed {{access to}} some communication scheme, which was not supported in {{the current version of}} SNA, faced obstacles. Before IBM included X.25 support (NPSI) in SNA, connecting to an X.25 network would have been awkward. Conversion between X.25 and SNA protocols could have been provided either by NCP software modifications or by an external <b>protocol</b> <b>converter.</b>|$|E
50|$|Research In Motion Limited {{was founded}} in March 1984 by Mike Lazaridis and Douglas Fregin. At the time, Lazaridis was an {{engineering}} student at the University of Waterloo while Fregin was an engineering student at the University of Windsor. In 1988, RIM became the first wireless data technology developer in North America and the first company outside Scandinavia to develop connectivity products for Mobitex wireless packet-switched data communications networks. In 1990, RIM introduced the DigiSync Film KeyKode Reader. In 1991, RIM introduced the first Mobitex <b>protocol</b> <b>converter.</b> In 1992, RIM introduced the first Mobitex point-of-sale solution, a <b>protocol</b> <b>converter</b> box that interfaced with existing point-of-sale terminal equipment to enable wireless communication. In 1993, RIM introduced the RIMGate, the first general purpose Mobitex X.25 gateway. In the same year, RIM launched Ericsson Mobidem AT and Intel wireless modem containing RIM modem firmware. In 1994, RIM introduced the first Mobitex mobile point-of-sale terminal. In the same year, RIM received the Emmy Award for Technical Innovation and the KPMG High Technology Award. In 1995, RIM introduced Freedom, the first Type II PCMCIA radio modem for Mobitex.|$|E
50|$|A USB adapter {{is a type}} of <b>protocol</b> <b>converter</b> {{which is}} used for {{converting}} USB data signals to and from other communications standards. Commonly, USB adaptors are used to convert USB data to standard serial port data and vice versa. Most commonly the USB data signals are converted to either RS232, RS485, RS422, or TTL-level UART serial data. The older serial RS423 protocol is rarely used any more, so USB to RS423 adapters are less common.|$|E
50|$|Gateways, {{also called}} <b>protocol</b> <b>converters,</b> can operate at any network layer. The {{activities}} of a gateway {{are more complex}} {{than that of the}} router or switch as it communicates using more than one protocol.|$|R
50|$|Networking devices {{may include}} gateways, routers, network bridges, modems, {{wireless}} access points, networking cables, line drivers, switches, hubs, and repeaters; {{and may also}} include hybrid network devices such as multilayer switches, <b>protocol</b> <b>converters,</b> bridge routers, proxy servers, firewalls, network address translators, multiplexers, network interface controllers, wireless network interface controllers, ISDN terminal adapters and other related hardware.|$|R
50|$|A {{universal}} gateway will typically offer all protocols on {{a computer}} appliance, {{for the benefit of}} the process engineer, giving them the opportunity to pick and choose one or more protocols, and change them over time, as the application needs demand. <b>Protocol</b> <b>converters</b> are typically designed with a single purpose, to convert protocol X to Y, and are not offering the level of configurability and flexibility of a universal gateway.|$|R
50|$|The general {{architecture}} of a <b>protocol</b> <b>converter</b> includes an internal master protocol communicating {{to the external}} slave devices and the data collected is used to update the internal database of the converter. When the external master requests for data, the internal slave collects data from the database {{and send it to}} the external master. There will be different schemes for handling the spontaneous reporting of events and commands. There can be different physical medium for communication on protocol-X & Y, which include RS-232, RS-485, Ethernet, etc.|$|E
50|$|A <b>Protocol</b> <b>Converter</b> is {{a device}} used to convert {{standard}} or proprietary protocol of one device to the protocol {{suitable for the}} other device or tools to achieve the interoperability. Protocols are software installed on the routers, which convert the data formats, data rate and protocols of one network into the protocols of the network in which data is navigating. There are varieties of protocols used in different fields like Power Generation, Transmission & Distribution, Oil & Gas, Automation, Utilities, AMR, and Remote Monitoring applications. The major protocol translation messages involve conversion of data messages, events, commands, and time synchronization.|$|E
50|$|L2TP {{is often}} used by ISPs when {{internet}} service over for example ADSL or cable is being resold. From the end user, packets travel over a wholesale network service provider's network to a server called a Broadband Remote Access Server (BRAS), a <b>protocol</b> <b>converter</b> and router combined. On legacy networks the path from end user customer premises' equipment to the BRAS may be over an ATM network. From there on, over an IP network, an L2TP tunnel runs from the BRAS (acting as LAC) to an LNS which is an edge router at the boundary of the ultimate destination ISP's IP network. See example of reseller ISPs using L2TP.|$|E
50|$|The latency of {{end-to-end}} communication {{depends on}} the processing delay of the hardware and/or software being used, the protocol & conversion complexity, and the solution architecture. These latencies can vary for typical industrial and energy automation applications from 10â€”20 milliseconds to as high as 1 second. Solution architectures using <b>protocol</b> <b>converters</b> need to consider this latency {{and how it will}} impact the project for which converters are being considered.|$|R
40|$|In {{the absence}} of a single module {{interface}} standard, integration of pre-designed modules in System-on-Chip design often requires the use of <b>protocol</b> <b>converters.</b> Existing approaches to automatic synthesis of <b>protocol</b> <b>converters</b> mostly lack formal foundations and either employ abstractions that ignore crucial low level behaviors, or grossly simplify the structure of the protocols considered. We present a state-machine based formal model for bus based communication protocols, and precisely define protocol compatibility, and correct protocol conversion. Our model is expressive enough to capture features of commercial protocols such as bursts, pipelined transfers, wait state insertion, and data persistence, in cycle accurate detail. We show that the most general, correct converter for a pair of protocols, can be described as the greatest fixed point of a function for updating buffer states. This characterization yields a natural algorithm for automatic synthesis of a provably correct converter by iterative computation of the fixed point. We report our experience with automatic converter synthesis between widely used commercial bus protocols, such as AMBA AHB, ASB, APB, and OCP, considering features which are beyond the scope of current techniques...|$|R
40|$|ABSTRACT. Communications {{protocols}} re-synthesis {{involves the}} augmentation of existing synthesized protocol entities given a modified formal service definition. This process {{would reduce the}} time required for deploying enhanced and frequently modified services. In this paper, we introduce a re-synthesis technique based on a service-oriented protocol synthesis method introduced earlier [1]. Re-synthesis can be applied in various distributed systems application areas, such as discrete event distributed controllers, communications <b>protocol</b> <b>converters,</b> and distributed software agents...|$|R
5000|$|The Small Form Factor {{committee}} approached {{this problem}} by defining ATAPI, the [...] "ATA Packet Interface". ATAPI is a protocol allowing the ATA interface to carry SCSI commands and responses; therefore all ATAPI devices are [...] "speaking SCSI" [...] other than at the electrical interface. In fact, some early ATAPI devices were simply SCSI devices with an ATA/ATAPI to SCSI <b>protocol</b> <b>converter</b> added on. The SCSI commands and responses are embedded in [...] "packets" [...] (hence [...] "ATA Packet Interface")for transmission on the ATA cable. This allows any device class for which a SCSI command set has been defined to be interfaced via ATA/ATAPI.|$|E
50|$|For a {{protocol}} that began {{life in the}} 1980s, DPNSS is natively {{a long way from}} VoIP. However, many of the hybrid VoIP PBXs available from manufacturers worldwide provide on-board DPNSS trunk cards. Where they do not, a <b>protocol</b> <b>converter</b> is necessary. Commercially available equipment offers the ability to convert from DPNSS to Q.Sig. Note that it is also possible to tunnel DPNSS and its associated PCM (G711) over an IP network. This can be point to point where the IP network carries packetised voice N x 64 Kbs speech and a separate IP signalling channel to carry the notional 64 Kbs of DPNSS signalling. A more sophisticated solution uses intelligence {{on the edge of the}} IP network to route voice to the correct node. This is a Voice VPN.Note that this should not be confused with the pre-VOIP 'Voice VPN' deployed by routing calls intelligently in a TDM switching platform, often Nortel DMS100 and customers PBX nodes.|$|E
5000|$|There is {{no single}} defined {{standard}} for [...] "interoperable PTC systems". Several examples of interoperable systems illustrate this point. First, the UP and BNSF are interoperable across their systems. They are both implementing I-ETMS and will use different radio frequencies in different locations. In the second example, Amtrak is interoperable with Norfolk Southern in Michigan. Amtrak uses ITCS, while Norfolk Southern uses I-ETMS. To interoperate, two 220 MHz radios are installed in each wayside location and they both interface with a common PTC system through an interface device (similar to a network gateway or <b>protocol</b> <b>converter)</b> at each wayside location. One radio talks to freight trains using I-ETMS and one radio talks to passenger trains using ITCS. In this case interoperability stops at the wayside and {{does not include the}} wireless segment out to the rail vehicles or the onboard systems. In the third example, similar to the first, Metrolink, the commuter rail agency in Los Angeles, is implementing I-ETMS and will use the same PTC equipment as both the UP and BNSF. Metrolink is procuring their own 220 MHz spectrum so that trains on Metrolink territory (commuter and freight) will use other channels than those used by the UP and BNSF. Interoperability is achieved by directing the onboard radio to change channels depending on location. For SEPTA, the commuter operation in and around Philadelphia, Ansaldo is implementing ACSES, the Amtrak northeast corridor PTC protocol. For CSX all the ACSES PTC transactions will be handed to CSX at the SEPTA back office, and CSX will be responsible for deploying I-ETMS infrastructure that they will use to communicate with their freight trains. The SEPTA interoperability model is very {{similar to that of the}} public safety radio community wherein different radio systems that use different frequencies and protocols are cross-connected only in the back office to support system to system communications.|$|E
50|$|Axis Communications {{was founded}} in 1984 by Martin Gren, Mikael Karlsson and Keith Bloodworth in Lund, Sweden. The company {{developed}} and sold <b>protocol</b> <b>converters</b> and printer interfaces for the connection of PC printers in IBM mainframe and mini-computer environments. By {{the end of the}} 1980s, Axis Communications had opened its first U.S. sales office in Boston, Massachusetts and in the early 1990s started shifting its focus away from IBM mainframes towards networking and the TCP/IP protocol.|$|R
50|$|Later, IBM {{introduced}} the Personal/370 (aka P/370), a single slot 32-bit MCA card {{that can be}} added to a PS/2 or RS/6000 computer to run System/370 OSs (like MUSIC/SP, VM, VSE) parallel to OS/2 (in PS/2) or AIX (in RS/6000) supporting multiple concurrent users. It is a complete implementation of the S/370 Processor including a FPU co-processor and 16 MB memory. Management and standard I/O channels are provided via the host OS/hardware. An additional 370 channel card {{can be added to}} provide mainframe-specific I/O such as 3270 local control units, 3400/3480 tape drives or 7171 <b>protocol</b> <b>converters.</b>|$|R
5|$|USB {{mice and}} {{keyboards}} {{can usually be}} used with older computers that have PS/2 connectors {{with the aid of}} a small USB-to-PS/2 adapter. For mice and keyboards with dual-protocol support, an adaptor that contains no logic circuitry may be used: the hardware in the USB keyboard or mouse is designed to detect whether it is connected to a USB or PS/2 port, and communicate using the appropriate <b>protocol.</b> <b>Converters</b> also exist that connect PS/2 keyboards and mice (usually one of each) to a USB port. These devices present two HID endpoints to the system and use a microcontroller to perform bidirectional data translation between the two standards.|$|R
40|$|Abstract. Aiming at {{integrating}} Tritech Companyâ€™s Typhoon color {{zoom camera}} and Kongsberg Companyâ€™s underwater pan and tilt unit OE 10 - 102 {{to build the}} underwater monitoring system, this paper designs a method, which uses STM 32 F 103 C 8 as the core chip to design a <b>protocol</b> <b>converter.</b> The <b>protocol</b> <b>converter</b> could receives and analyses the PELCO-D data frames from RS- 485 bus, and then produces corresponding commands to control the cameras and rotator units. Besides, this paper provides a new online program update method based on RS- 485 channel, which could make full use of the existing 485 channel to complete user application program updating for the <b>protocol</b> <b>converter</b> without disassembling the deceives. Practice has proved that the methods mentioned are practical and stable...|$|E
40|$|The vehicle {{on-board}} diagnostics system (OBDII) provides a serial diagnostic link for communication with scan tools. There are 4 diagnostic interfaces: ISO 9141 - 2, KWP 2000, SAE J 1850 and ISO 15765. A PC-based scan tool {{consists of an}} interface adapter and specialized diagnostic software. This paper presents {{the implementation of a}} smart OBDII interface adapter. The adapter is build of a <b>protocol</b> <b>converter,</b> interface transceivers and protective devices. The full schematic circuit of the adapter is presented and explained in detail. The <b>protocol</b> <b>converter</b> (MCU) processes and transfers diagnostic messages. It communicates with PC via serial port using ASCII messages. The software for the <b>protocol</b> <b>converter</b> has been developed in C language. A state diagram of software is presented. The functions performed by the software for different interfaces are explained in detail. The adapter is successfully verified in practice...|$|E
40|$|Reuse of IP blocks is an {{important}} design philosophy for embedded systems. This allows shorter design cycles under tight time-to-market constraints. However, reusing IP blocks often requires designing converters (glue logic) to enable their communication. In this paper, we study the problem of automatically generating a <b>protocol</b> <b>converter</b> which enables various embedded system components (possibly with incompatible protocols) {{to talk to each}} other. Our work takes as input, a rich description of inter-component interactions described as a collection of Message Sequence Charts. We then automatically synthesize from this input a <b>protocol</b> <b>converter</b> in SystemC. Our work is not restricted to uni-directional communication and the converter can be used to broker communication among many components. We demonstrate the feasibility of our approach by modelling some simplified bus protocols that capture key features of existing System-on-Chip bus protocols. We then generate the bus controller as the <b>protocol</b> <b>converter.</b> 1...|$|E
40|$|Abstract. Through the {{comparison}} of many monitoring systemâ€™s schemes, the bus way of monitoring system was select {{which is based on}} CAN bus, using the PCI- 5110 CAN interface card which is produced by ZHOU Li-gong company as the CAN node, selecting the CAN 485 MB intelligent <b>protocol</b> <b>converters</b> as their communication bridge between the CAN interface card and AI instrument. The system adopts the OPC technology to realize the communication between Kingview and CAN bus and builds a monitoring system based on CAN bus network to realize the function of the process control experiment platform of the real-time monitoring and graphical interface. Having friendly MMI, good flexibility, the whole system is worth to popularize and publicity...|$|R
40|$|The Modular Integrated Stackable Layers (MISL) is {{a compact}} space-related {{computer}} {{system that is}} modular, scalable and reconfigurable. The original goal was to design a space environment capable instrumentation system with a flexible design so that as subsets of requirements changed, it minimized {{the need for new}} designs and maximized the reusability of the hardware and software modules. The result is a flexible, economical and small computer system that can be adapted to uses in space environment instrumentation and control. Current applications include habitat system instruments and control, dynamic flight instrumentation in rugged environments, in vehicle communication <b>protocol</b> <b>converters</b> and remote control unit for thruster jets. Future applications are limited only by the imagination...|$|R
40|$|Abstract. This paper formalizes an {{incremental}} approach to design VCI to PI <b>protocol</b> <b>converters</b> (VCI-PI wrappers) and presents {{a hierarchy of}} wrappers ranking from the simplest one up to the most complex one. In order to formally verify the correctness of a wrapper, a set of CTL properties is assigned to it. The purpose of the paper is to explore how, given a property that is true in a simple model, a new property, satisfied in a more complex model, {{can be derived from}} the first one, and reciprocaly. We propose some transformation rules to build new properties satisfied on more complex models. The properties transformation have been automated and applied in the context of non-regression analysis of VCI-PI wrappers...|$|R
