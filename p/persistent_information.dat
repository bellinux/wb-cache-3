62|91|Public
5000|$|Internet Explorer {{supports}} <b>persistent</b> <b>information</b> [...] in the browser's history, in the browser's favorites, in an XML store ("user data"), {{or directly}} within a web page saved to disk.|$|E
50|$|The logical {{database}} design technique (LDDT) {{had been}} developed in 1982 by Robert G. Brown of The Database Design Group entirely outside the IDEF program and with no knowledge of IDEF1. Nevertheless, the central goal of IDEF1 and LDDT was the same: to produce a database-neutral model of the <b>persistent</b> <b>information</b> needed by an enterprise by modeling the real-world entities involved. LDDT combined elements of the relational data model, the E-R model, and data generalization in a way specifically intended to support data modeling and {{the transformation of the}} data models into database designs.|$|E
50|$|Persistent {{browser-based}} games usually rely on {{some kind}} of server-side code; though some will use technologies like Flash, ActiveX, and Java applets to store data on the client's computer. Games relying on client-side technology are rarer due to the security aspects that must be dealt with when reading and writing from a user's local file system - the web browser doesn't want web pages to be able to destroy the user's computer, and the game designer doesn't want the game files stored in an easily accessed place where the user can edit them. The server-side code will store <b>persistent</b> <b>information</b> about players and possibly the game world in some kind of database.|$|E
5000|$|<b>Persistent,</b> {{continuous}} <b>information</b> assurance {{rather than}} perimeter, one-time security ...|$|R
5000|$|<b>Persistent</b> account <b>information</b> where {{players can}} create a [...] "character", and log in and gain ranks over {{multiple}} games.|$|R
50|$|<b>Persistent</b> Data denotes <b>information</b> that is {{infrequently}} accessed and {{not likely}} to be modified.|$|R
40|$|Introduction In {{traditional}} programming languages, {{database management}} systems, file systems and operating systems {{there are a}} number of, often conflicting, binding mechanisms for composing sub-systems, programs and data. In our experiments in designing, building and using a <b>persistent</b> <b>information</b> space architecture (PISA) [3] we have encountered these binding mechanisms and wish to report on them here. We wish to build a total system capable of providing for all programming activity. Our traditional view of the <b>persistent</b> <b>information</b> space is that it will subsume the functions of a plethora of mechanisms currently supported by components such as command languages, editors, file systems, compilers and interpreters, linkage editors and binders, debuggers, DBMS sublanguages and graphics libraries[1]. The information space is composed of objects, which may be simple or highly structured, defined by the universe of discourse of the type system 2 of the PISA arch...|$|E
40|$|A {{long time}} the {{technology}} in offices was limited to paper and ink since the first office environments. Paper is a robust, consistent and <b>persistent</b> <b>information</b> medium, that is {{easy to use and}} not fixed to a location. It is still used for communication internally inside the office building and externally with customers or other authorities. Also th...|$|E
40|$|OceanStore is {{a utility}} {{infrastructure}} designed to span {{the globe and}} provide continuous access to <b>persistent</b> <b>information.</b> Since this infrastructure is comprised of untrusted servers, data is protected through redundancy and cryptographic techniques. To improve performance, data is allowed to be cached anywhere, anytime. Additionally, monitoring of usage patterns allows adaptation to regional outages and denial of service attack...|$|E
50|$|Netrek was {{released}} in 1988, and was probably the first game to use both the TCP and UDP protocols, the first Internet-aware team game, the first Internet game to use metaservers to locate open game servers, {{and the first to}} have <b>persistent</b> user <b>information.</b>|$|R
40|$|Applications of XML {{are often}} limited to {{transient}} data exchange and messaging between systems across corporation boundaries. <b>Persistent</b> XML-based <b>information</b> models can greatly simplify the design, implementation, {{and evolution of}} highly connected eBusiness systems because the entities of such models can flow readily into enterprise systems, be viewed and edited by users, or participate in business partner message interchanges. These models are also key enablers {{to a new generation}} of electronic commerce architecture...|$|R
2500|$|In the 1990s, {{many games}} benefited from {{increasing}} internet connectivity, especially PC games. For example, the 1988 game Netrek was an Internet game {{for up to}} 16 players, written almost entirely in cross-platform open source software. Netrek was the third Internet game, the first Internet game to use metaservers to locate open game servers, {{and the first to}} have <b>persistent</b> user <b>information.</b> In 1993 it was credited by Wired Magazine as [...] "the first online sports game".|$|R
40|$|Abstract OceanStore is {{a utility}} {{infrastructure}} designed to span {{the globe and}} provide continuous access to <b>persistent</b> <b>information.</b> Since this infrastructure is comprised of untrusted servers, data is protected through redundancy and cryptographic techniques. To improve performance, data is allowed to be cached anywhere, anytime. Finally, monitoring of usage patterns allows adaptation to regional outages and denial of service attacks; monitoring also enhances performance through pro-active movement of data. A prototype implementation is currently under development. 1 Introduction The computer revolution has occurred. In the past decade we have seen astounding growth {{in the performance of}} computing devices. Even more significant has been the rapid pace of miniaturization and related reduction in power consumption. Today, globe-trotting executives routinely access information on their laptops, pagers, and cell-phones; small businesses and individuals have computers that rival the mainframes of a decade ago; cars contain sophisticated computing technology to control their timing. Based on these trends, many envision a world of ubiquitous computing devices that add intelligence and adaptability to ordinary objects such as cars, clothing, books, houses, and chairs. Before such a revolution can occur, however, computing devices must become so reliable and resilient that they are completely transparent to the user [58]. In pursuing transparency, one question immediately comes to mind: where does <b>persistent</b> <b>information</b> reside? <b>Persistent</b> <b>information</b> is necessary for transparency, since it permits the behavior of devices to be independent of the devices themselves. An embedded component can be rebooted or replaced without losing vital configuration informaΛ This paper has been submitted to Asplos- 200...|$|E
40|$|OceanStore is {{a utility}} {{infrastructure}} designedto span {{the globe and}} provide continuous access to <b>persistent</b> <b>information.</b> Since this infrastructure is comprised of untrusted servers, data is protected through redundancy and cryptographic techniques. To improve performance, data is allowedtobe cached anywhere, anytime. Finally, monitoring of usage patterns allows adaptation to regional outages and denial of service attacks; monitoring also enhances performancethrough pro-active movement of data. A prototype implementation is currently under development...|$|E
30|$|This {{layer is}} {{responsible}} for handling all aspects of execution and management of MapReduce jobs on the system. As previously mentioned, a user must define {{the parameters of the}} MapReduce job through the User Interface layer. This information is stored in the GiGi-MR server. Once all the MapReduce job characteristics have been defined, the server creates the map tasks, and stores this information in the GiGi-MR server’s database—the GiGi-MR database {{is responsible for}} holding all <b>persistent</b> <b>information</b> on tasks, clients, and applications being executed.|$|E
2500|$|However, Ketchum was <b>persistent,</b> spread <b>information</b> {{in various}} medical circles, and in October 1910 got written {{up in the}} press. [...] When a {{reporter}} contacted Cayce, he explained to the reporter that he somehow {{had the ability to}} easily go into the intuitive sleep when he wanted to, and this was different from how he went to sleep normally like everyone else. [...] When asked the mechanism of the readings via the sleep method, they were told that it happened via the capabilities of the subconscious mind.|$|R
5000|$|Access to system information, {{such as the}} PC's universally unique {{identifier}} (UUID), hardware asset <b>information,</b> <b>persistent</b> event logs, and other information that is stored in dedicated memory (not on the hard drive) where it is accessible even if the OS is down or the PC is powered off.|$|R
40|$|Marcet and Marimon (1999) {{propose a}} {{recursive}} Lagrangian-based method for solving dynamic incentive problems. We {{show that this}} method is applicable to a large class of concave contracting problems that encompass many in the literature. This class includes problems with (potentially <b>persistent)</b> private <b>information,</b> non-commitment, differential private and societal discounting and potentially unbounded returns. The dynamic programming {{problems associated with the}} method are non-standard in several respects: their state spaces may be unknown and their constraint correspondences are not continuous or compact-valued. We propose resolutions for these difficulties...|$|R
30|$|The {{parameters}} of the MapReduce job to run on top of VMR are defined by the user, and stored in the server. This includes the number of map and reduce tasks, the executable files used by map and reduce tasks, {{as well as their}} hardware and software requirements. Once all the MapReduce job characteristics have been defined, the VMR server creates the map tasks, and stores this information in its database - the VMR database is responsible for holding all <b>persistent</b> <b>information</b> on tasks, clients, and applications being run.|$|E
40|$|Object Role Modeling (ORM) {{techniques}} {{produce a}} detailed domain model {{from the perspective}} of the business owner/customer. The typical process begins with a set of simple sentences reflecting facts about the business. The output of the process is a single model representing primarily the <b>persistent</b> <b>information</b> needs of the business. This type of model contains little, if any reference to a targeted computerized implementation. It is a model of business entities not of software classes. Through well-defined procedures, an ORM model can be transformed into a high quality objector relational schema...|$|E
40|$|Abstract. Word-of-mouth is {{a persuasive}} but {{error-prone}} and unreliable mode of communicating personally relevant event {{information in a}} university environment. In this paper we present a design, early prototype, {{and the results of}} preliminary usability tests for Augmented Word-of-mouth Exchange (AWE), a portable system that models and enhances word-of-mouth communications. AWE simulates word-of-mouth exchanges by automatically transmitting accurate and <b>persistent</b> <b>information</b> about community events between physically proximate devices, and by visualizing the popularity of each event. The system uses physical proximity between mobile devices to help users filter incoming information and determine its relevance. ...|$|E
40|$|Using {{an agency}} model, we show how delegation, by {{generating}} additional private information, improves dynamic incentives under limited commitment. It circumvents ratchet effects and facilitates {{the revelation of}} <b>persistent</b> private <b>information</b> through two effects: a play-hardball effect, which mitigates an efficient agent 2 ̆ 019 s ratchet incentive, and a carrot effect which reduces an inefficient agent 2 ̆ 019 s take-the-money-and-run incentive. Although delegation entails a loss of control, it is optimal when uncertainty about operational efficiency is large. Moreover, delegation is more effective with production complementarity. We also consider different modes of commitment to yield insights into optimal organizational boundaries...|$|R
40|$|The {{integration}} of grid, data grid, digital library, and preser-vation technology {{has resulted in}} software infrastructure that is uniquely suited to the generation and management of data. Grids provide support for the organization, management, and applica-tion of processes. Data grids manage the resulting digital entities. Digital libraries provide support {{for the management of}} informa-tion associated with the digital entities. Persistent archives provide long-term preservation. We examine the synergies between these data management systems and the future evolution that is required for the generation and management of information. Keywords—Data grids, digital libraries, <b>persistent</b> archives, <b>information</b> management. I...|$|R
40|$|A visual {{application}} is an application that manipulates visual data {{as part of}} its processing. Visual applications need to represent, manipulate, store, and retrieve both raw and processed visual data. Existing relational and object-oriented database systems fail to offer satisfactory visual data management support because they lack the kinds of representations, storage structures, indices, access methods, and query mechanisms needed for visual data. We argue that extensible visual object stores offer feasible and effective means to address the data management needs of visual applications. ISR 4 is such a visual object store under development at the University of Massachusetts for the management of <b>persistent</b> visual <b>information.</b> ...|$|R
40|$|We {{develop a}} model of {{relational}} contracts with moral hazard and asymmetric <b>persistent</b> <b>information</b> about an employee's type. We find that {{the form of the}} optimal contract depends on the job characteristics as well as the distribution of employees' talent. Bonus contracts {{are more likely to be}} adopted in complex jobs and when high talent is not too common or too rare. Firms with 'normal' jobs are more likely to adopt termination contracts. In labor market equilibrium, different contracts may be adopted by ex ante identical firms. Hence, we offer an explanation for the co-existence of different employment systems within the same industry...|$|E
40|$|Artificial Intelligence Lab, Department of MIS, University of ArizonaAs {{information}} technologies and applications become more overwhelming and diverse, <b>persistent</b> <b>information</b> overload problems have become ever more urgent. 1 Fallout from this trend has most affected government, specifically criminaljustice information systems. The explosive {{growth in the}} digital information maintained in the data repositories of federal, state, and local criminal-justice entities and the spiraling need for cross-agency access to that information have made utilizing it both increasingly urgent and increasingly difficult. The Coplink system applies a concept spaceâ a statistics-based, algorithmic technique that identifies relationships between suspects, victims, and other pertinent dataâ to accelerate criminal investigations and enhance law enforcement efforts...|$|E
40|$|We propose an {{architecture}} for virtual environments that {{is aimed at}} {{the construction of a}} global, continuous, shared, and <b>persistent</b> <b>information</b> space. Such a system must support three-dimensional interaction {{of a large number of}} users and allow integration of user-developed applications. Our system is based on a client-server architecture: The server is responsible for management and maintenance of the virtual environment. Users can be present in the environment using software clients. The environmental database is composed of object-oriented units with multiple levels of autonomy. Scalability is achieved by a network of servers that cooperate by taking on responsibility for different regions within the simulated environment. We also report on the status of our ongoing prototype implementation of this architecture...|$|E
40|$|This {{paper is}} an attempt to define how a {{specific}} data structure might be used to store, in a <b>persistent</b> manner, temporal <b>information</b> during a computer simulation. In particular, it considers the sort of temporal information generated during a discrete event simulation of a system to which a relational data base exists and considers the demands this data makes on data base design. Facultad de Informátic...|$|R
50|$|Lt. Col. Frederick “F.” Lynn McNulty (1939 - 2012) was {{the first}} Director of Information Systems Security for the U.S. State Department, {{a pioneer in the}} field of cybersecurity, and has been {{characterized}} as the “father” of U.S. federal information security. His peers eulogized him as a tireless advocate for the security of the nation. He was an early and <b>persistent</b> champion of <b>information</b> security in government.|$|R
40|$|In {{situations}} where one repeatedly makes decisions under the in influence of another, {{how does the}} former react to the latter-obey or disobey-in order to change the future exertion of influence? We study a repeated game between a decision maker and an external influence in which the former's regard for the latter is <b>persistent</b> private <b>information.</b> We show that concern for the future leads to more disobedience under negative influence and more obedience under positive influence. The acts of obedience and disobedience that seem irrational from a static perspective are rationalized as costly signals of other-regarding preferences. Our stylized model analysis is applicable to power dynamics between divisions {{as well as the}} relationship between individuals. status: publishe...|$|R
40|$|Abstract. Referential integrity, which {{guarantees}} that named resources {{can be accessed}} when referenced, is an important property for reliability and security. In distributed systems, however, the attempt to provide referential integrity can itself lead to security vulnerabilities that are not currently well understood. This paper identifies three kinds of referential security vulnerabilities related to the ref-erential integrity of distributed, <b>persistent</b> <b>information.</b> Security conditions cor-responding {{to the absence of}} these vulnerabilities are formalized. A language model is used to capture the key aspects of programming distributed systems with named, persistent resources in the presence of an adversary. The referential security of distributed systems is proved to be enforced by a new type system. ...|$|E
40|$|B 2 B {{transaction}} {{information can be}} stored as XML doc-uments in RDBMS geographically distributed. In order to support fault-tolerance and <b>persistent</b> <b>information</b> storing, a deadlock free replication service is proposed in this paper. The service provides high available document retrieval against possible server failures, granting the access to the last version of the documents. It supports failures at the local manager level and at the repositories (RDBMS). The service also allows performing queries over the persistent repositories in order to recover previous commercial {{transaction information}}. Making use of this service, we propose a CORBA based centralized replication manager that ensures asynchronous passive document replication in terms of XML documents over a set of geographically distributed repositories...|$|E
40|$|We {{contend that}} the {{complexity}} of modern computer systems {{is caused by a}} dependency on a plethora of mechanisms that by their lack of coherence increase the cost of developing applications. By integrating these mechanisms we can reduce the complexity of the system and thereby achieve savings throughout product life cycles. From our experience in operating systems, programming languages and databases we identify five major areas of system design for modern systems: controlling complexity, orthogonal persistence, controlled system evolution, protection of data and concurrent computation. We are currently engaged in building a system which will achieve the simplicity above and here we describe the design issues involved in the construction of a <b>persistent</b> <b>information</b> space architecture (PISA) capable of integrating all these activities. 1...|$|E
50|$|BONDI (named after Bondi Beach) is an API {{framework}} {{aimed at}} mobile devices. OMTP launched the BONDI initiative, which defined new interfaces (Javascript APIs) and a security framework (based on XACML policy description) {{to enable the}} access to mobile phone functionality (Application Invocation, Application Settings, Camera, Communications Log, Gallery, Location, Messaging, <b>Persistent</b> Data, Personal <b>Information,</b> Phone Status, User Interaction) from browser and widget engine in a secure way.|$|R
40|$|How can we {{approach}} the truth in a society? It may depend on various factors. In this paper, using a well-established truth seeking model, we show that the <b>persistent</b> free <b>information</b> flow will bring us to the truth. Here the free information flow is modeled as the environmental random noise that could alter one's cognition. Without the random noise, the model predicts that the truth can only be captured by the truth seekers who own active perceptive ability of the truth and their believers, while the other individuals may stick to falsehood. But {{under the influence of}} the random noise, we strictly prove that even there is only one truth seeker in the group, all individuals will finally approach the truth...|$|R
30|$|Many {{approaches}} for non-rigid registration exist {{in other fields}} [14]; however, its use in microscopy is relatively recent, and few generalised methods exist. One approach is to record experimental image series (time series) from which the effects of time-varying distortions and <b>persistent</b> sample <b>information</b> can be separated. These data can be reregistered by defining the so-called control points that appear in both data and determining a transformation operator to map these to each other. However, here, manual input is generally necessary in defining the control points which can be challenging and hampers automation. Instead, an alternative ‘gradient descent’ method, where the differences between images are used to directly infer the direction of local motion [7 – 18], is well suited to automation and is what is discussed here.|$|R
