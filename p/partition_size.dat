88|420|Public
25|$|For {{physical}} storage of a table, its rows {{are divided into}} a series of partitions (numbered 1 to n). The <b>partition</b> <b>size</b> is user defined; by default all rows are in a single partition. A table is split into multiple partitions in order to spread a database over a computer cluster. Rows in each partition are stored in either B-tree or heap structure. If the table has an associated, clustered index to allow fast retrieval of rows, the rows are stored in-order according to their index values, with a B-tree providing the index. The data is in the leaf node of the leaves, and other nodes storing the index values for the leaf data reachable from the respective nodes. If the index is non-clustered, the rows are not sorted according to the index keys. An indexed view has the same storage structure as an indexed table. A table without a clustered index is stored in an unordered heap structure. However, the table may have non-clustered indices to allow fast retrieval of rows. In some situations the heap structure has performance advantages over the clustered structure. Both heaps and B-trees can span multiple allocation units.|$|E
50|$|The 64-bit {{versions}} of Windows 7 and later can boot from disks with a <b>partition</b> <b>size</b> larger than 2 TB.|$|E
50|$|It {{could also}} {{refer to the}} maximum <b>partition</b> <b>size</b> for the FAT16 file system in {{versions}} of Windows prior to XP.|$|E
5000|$|... #Caption: GNOME's {{partition}} editor uses IEC prefixes {{to display}} <b>partition</b> <b>sizes.</b> The total {{capacity of the}} 120×109-byte disk is displayed as [...] "111.79 GiB" ...|$|R
50|$|The Unix {{communities}} {{employ the}} term block {{to refer to}} a sector or group of sectors. For example, the Linux fdisk utility, before version 2.25, displayed <b>partition</b> <b>sizes</b> using 1024-byte blocks.|$|R
5000|$|Finding a domatic <b>partition</b> of <b>size</b> 1 is trivial: let [...] Finding a domatic <b>partition</b> of <b>size</b> 2 (or {{determining}} {{that it does}} not exist) is easy: check if there are isolated nodes, and if not, find a weak 2-coloring.|$|R
5000|$|GUID Partition Table (GPT) {{allows for}} a maximum disk and <b>partition</b> <b>size</b> of 7.02 zettabytes, or 5.946 zebibytes, when using 512-byte sectors.|$|E
5000|$|... {{putting into}} place custom device drivers which {{circumvented}} BIOS limitations, notably {{those related to}} maximum disk or <b>partition</b> <b>size</b> and logical block addressing ...|$|E
50|$|It handles floppy disks (double sided, {{with double}} density), hard disks, and CD-ROM. Maximum iS-DOS <b>partition</b> <b>size</b> {{on a hard}} disk is 16 MiB.|$|E
50|$|With {{the initial}} {{implementation}} of FAT16 not actually providing for larger <b>partition</b> <b>sizes</b> than FAT12, the early benefit of FAT16 was {{to enable the}} use of smaller clusters, making disk usage more efficient, particularly for large numbers of files {{only a few hundred}} bytes in size.|$|R
50|$|There are {{files in}} some Microsoft {{operating}} systems (called BOOTSECT.*) which are {{copies of the}} Boot Partition Block (BPB) used by alternate operating systems that Microsoft Windows loader (NTLDR) can load. BOOTSECT.* files {{may have to be}} altered if <b>partition</b> <b>sizes</b> or layouts are changed during the clone.|$|R
30|$|In practice, {{a number}} of {{unlikely}} CU sizes can be eliminated in advance, and it is then unnecessary to calculate the RD costs for CUs of all possible <b>partitioning</b> <b>sizes.</b> In {{order to reduce the}} computational requirements and to speed up the intra-coding process, an efficient termination and bypass strategy is desirable.|$|R
50|$|Due to the Microsoft dependence, limited <b>partition</b> <b>size,</b> {{file size}} limit of 2 GiB {{and the long}} disk check times after a crash, IBM ported the {{journaling}} file system JFS to OS/2 as a substitute.|$|E
5000|$|In 1988, the FAT16B {{improvement}} {{became more}} generally available through DR DOS 3.31, PC DOS 4.0, OS/2 1.1, and MS-DOS 4.0. The limit on <b>partition</b> <b>size</b> was {{dictated by the}} 8-bit signed count of sectors per cluster, which originally had a maximum power-of-two value of 64. With the standard hard disk sector size of 512 bytes, this gives a maximum of 32 KiB cluster size, thereby fixing the [...] "definitive" [...] limit for the FAT16 <b>partition</b> <b>size</b> at 2 GiB for sector size 512. On magneto-optical media, which can have 1 or 2 KiB sectors instead of 0.5 KiB, this size limit is proportionally larger.|$|E
50|$|Adaptive {{infrastructure}} architecture: Used by infrastructure {{engineers in}} relation to the configuration of processors. The computing resources used by applications (the <b>partition</b> <b>size,</b> or the number of servers in a cluster, or the share of a processor, or the number of processes) are configured so that they shrink or grow with demand.|$|E
40|$|All pairs {{similarity}} search, {{used in many}} {{data mining}} and information retrieval applications, is a time consuming process. Although a partition-based approach accelerates this process by simplifying parallelism management and avoiding unnecessary I/O and comparison, it is still challenging to balance the computation load among parallel machines with a distributed architecture. This is mainly due to the variation in <b>partition</b> <b>sizes</b> and irregular dissimilarity relationship in large datasets. This paper presents a two-stage heuristic algorithm to improve the load balance and shorten the overall processing time. We analyze the optimality and competitiveness of the proposed algorithm and demonstrates its effectiveness using several datasets. We also describe a static partitioning algorithm to even out the <b>partition</b> <b>sizes</b> while detecting more dissimilar pairs. The evaluation {{results show that the}} proposed scheme outperforms a previously developed solution by up to 41 % in the tested cases...|$|R
5000|$|The Kostka {{numbers for}} <b>partitions</b> of <b>size</b> at most 3 are as follows: ...|$|R
50|$|Caching {{performed}} by bcache operates at the block device level, making itself file system - agnostic {{as long as}} the file system provides an embedded universally unique identifier (UUID); this requirement is satisfied by virtually all standard Linux file systems, as well as by swap <b>partitions.</b> <b>Sizes</b> of the logical blocks used internally by bcache as caching extents can go down {{to the size of a}} single HDD sector.|$|R
50|$|The PC XT was {{the first}} PC with a hard drive from IBM, and PC DOS 2.0 {{supported}} that hard drive with FAT12 (FAT ID 0xF8). The fixed assumption of 8 sectors per clusters on hard disks practically limited the maximum <b>partition</b> <b>size</b> to 16 MiB for 512 byte sectors and 4 KiB clusters.|$|E
5000|$|Local arrays: {{variable}} names not {{beginning with}} caret (i.e. [...] "^") {{are stored in}} memory by process, are private to the creating process, and expire when the creating process terminates. The available storage depends on implementation. For those implementations using partitions, it {{is limited to the}} <b>partition</b> <b>size,</b> (A small partition might be 32K). For other implementations, it may be several megabytes.|$|E
5000|$|This {{result is}} of a {{fundamental}} importance, as it {{states that the}} finite element method {{can be used to}} approximately calculate the solution of our problem, and that the error in the computed solution decreases proportionately to the <b>partition</b> <b>size</b> [...] Céa's lemma can be applied along the same lines to derive error estimates for finite element problems in higher dimensions (here the domain of [...] was in one dimension), and while using higher order polynomials for the subspace ...|$|E
40|$|In this paper, the {{problems}} of delay-dependent robust stability analysis, robust stabilization and robust H control are investigated for uncertain discrete-time singular systems with state delay. First, by making use of the delay partitioning technique, a new delay-dependent criterion is given to ensure the nominal system to be regular, causal and stable. This new criterion is further extended to singular systems with both delay and parameter uncertainties. Then, without {{the assumption that the}} considered systems being regular and causal, robust controllers are designed for discrete-time singular time-delay systems such that the closed-loop systems have the characteristics of regularity, causality and asymptotic stability. Moreover, the problem of robust H control is solved following a similar line. The obtained results are dependent not only on the delay, but also on the <b>partitioning</b> <b>size</b> and the conservatism is non-increasing with reducing <b>partitioning</b> <b>size.</b> These results are shown, via extensive numerical examples, to be much less conservative than the existing results in the literature. © 2010 John Wiley & Sons, Ltd. link_to_subscribed_fulltex...|$|R
40|$|In this paper, {{we present}} a method to {{optimise}} rough set <b>partition</b> <b>sizes,</b> to which rule extraction is performed on HIV data. The genetic algorithm optimisation technique is {{used to determine the}} <b>partition</b> <b>sizes</b> of a rough set in order to maximise the rough sets prediction accuracy. The proposed method is tested on a set of demographic properties of individuals obtained from the South African antenatal survey. Six demographic variables were used in the analysis, these variables are; race, age of mother, education, gravidity, parity, and age of father, with the outcome or decision being either HIV positive or negative. Rough set theory is chosen {{based on the fact that}} it is easy to interpret the extracted rules. The prediction accuracy of equal width bin partitioning is 57. 7 % while the accuracy achieved after optimising the partitions is 72. 8 %. Several other methods have been used to analyse the HIV data and their results are stated and compared to that of rough set theory (RST). Comment: 10 pages, 1 figure, Update Bibliograph...|$|R
5000|$|... where [...] is {{the number}} of ways to <b>partition</b> a <b>size</b> [...] set into [...] {{non-empty}} subsets (the Stirling number of the second kind).|$|R
5000|$|In {{addition}} to the standard PC disk partition scheme that uses a master boot record (MBR), UEFI also works with a new partitioning scheme called GUID Partition Table (GPT), which is free {{from many of the}} limitations of MBR. In particular, the MBR limits on the number and size of disk partitions (up to four primary partitions per disk, and up to 2 TiB [...] per disk) are relaxed. More specifically, GPT allows for a maximum disk and <b>partition</b> <b>size</b> of 8 ZiB [...]|$|E
5000|$|SFS uses block sizes {{ranging from}} 512 (29) to 32768 (215) bytes {{with a maximum}} <b>partition</b> <b>size</b> of 128 GB.Its good performance, better than FFS, and lack of need for long [...] "validation" [...] {{in case of an}} error, is {{achieved}} by grouping multiple directory entries into a single block and by grouping meta data blocks together into clusters. [...] A bitmap is used to keep track of free space, and file data is kept track of using extents arranged into a B+ tree structure.|$|E
50|$|If {{the actual}} {{size of the}} disk exceeds the maximum <b>{{partition}}</b> <b>size</b> representable using the legacy 32-bit LBA entries in the MBR partition table, the recorded size of this partition is clipped at the maximum, thereby ignoring the rest of disk. This amounts to a maximum reported size of 2 TB, assuming a disk with 512 bytes per sector (see 512e). It would result in 16 TB with 4 KB sectors (4Kn), but since many older operating systems and tools are hard wired for a sector size of 512 bytes or are limited to 32-bit calculations, exceeding the 2 TB limit could cause compatibility problems.|$|E
40|$|Let G be an Eulerian bipartite digraph with vertex <b>partition</b> <b>sizes</b> m,n. We {{prove the}} {{following}} Turán-type result: If e(G) > 2 mn/ 3 then G contains a directed cycle of length at most 4. The result is sharp. We {{also show that}} if e(G) = 2 mn/ 3 and no directed cycle of length at most 4 exists, then G must be biregular. We apply this result {{in order to obtain}} an improved upper bound for the diameter of interchange graphs. ...|$|R
40|$|Abstract: Recurrence {{relations}} with minimization and maxi-mization, called minmax recurrence relations are commonly en-countered {{in the analysis}} of algorithms. In this paper we present the solution of one such challenging recurrence relation. We characterize the optimal <b>partition</b> <b>sizes</b> as well as derive the order of complexity of the overall recurrence relation. It is proved that ad hoc equal partitioning is never the optimal choice. We also provide a survey of three other interesting minmax recurrence relations found in the literature. 1...|$|R
30|$|In Mora’s scheme, CU depth {{limitation}} and prediction mode pre-decision are utilized. The depth video bitrate {{reduction in}} Mora et al.’s method {{mainly caused by}} the cost of transmitting split flags and <b>partition</b> <b>sizes.</b> The bitrate reduction of the proposed method is mainly contributed by the depth video processing. The depth video processing enhances the correlation and makes the depth video more smooth and consistent. In addition, the fast coding method of the proposed method mainly reduces the coding complexity in smoothing regions. Hence, both the encoding compression ratio and speed are improved.|$|R
50|$|To {{ease the}} {{addition}} of new file systems and provide a generic file API, VFS, a virtual file system layer, {{was added to the}} Linux kernel. The extended file system (ext), was released in April 1992 as the first file system using the VFS API and was included in Linux version 0.96c. The ext file system solved the two major problems in the Minix file system (maximum <b>partition</b> <b>size</b> and filename length limitation to 14 characters), and allowed 2 gigabytes of data and filenames of up to 255 characters. But it still had problems: there was no support of separate timestamps for file access, inode modification, and data modification.|$|E
50|$|Distinct {{from the}} {{division}} into transform blocks, a macroblock can be split into prediction blocks. In early standards such as H.261, MPEG-1 Part 2, and H.262/MPEG-2 Part 2, motion compensation is performed with one motion vector per macroblock. In more modern standards such as H.264/AVC, a macroblock can be split into multiple variable-sized prediction blocks, called partitions. In an inter-predicted macroblock in H.264/AVC, a separate motion vector is specified for each partition. Correspondingly, in an intra-predicted macroblock, where samples are predicted by extrapolating from {{the edges of}} neighboring blocks, the prediction direction that is specified on a per-partition basis. In H.264/AVC, prediction <b>partition</b> <b>size</b> ranges from 4×4 to 16×16 samples for both inter-prediction (motion compensation) and intra-prediction.|$|E
50|$|The size {{requirements}} for a BIOS boot partition are quite low {{so it can}} be as small as about 30 KiB; however, as future boot loaders might require more space, 1 MiB might be a reasonable BIOS boot <b>partition</b> <b>size.</b> Due to the 1 MiB partition alignment policies used by most modern disk partitioning tools to provide optimum performance with Advanced Format disks, SSD devices and certain RAID configurations, some room is left allowing the placement of a BIOS boot partition between the GPT and the first partition aligned that way. If created by utilizing that free space, the BIOS boot partition would be out of the GPT alignment specification, but that is not very important since it is written to very infrequently.|$|E
5000|$|There is a polynomial-time {{approximation}} algorithm with a logarithmic approximation guarantee, that is, it {{is possible}} to find a domatic <b>partition</b> whose <b>size</b> is within a factor [...] of the optimum.|$|R
5000|$|... {{a finite}} graph is planar if {{and only if}} it {{contains}} no subgraph homeomorphic to K5 (complete graph on five vertices) or K3,3 (complete bipartite graph on two <b>partitions</b> of <b>size</b> three).|$|R
40|$|AbstractSuppose π=π 1 π 2 ⋯πn is a <b>partition</b> of <b>size</b> n, {{represented}} in its canonical sequential form. We {{show that the}} number of <b>partitions</b> of <b>size</b> n so represented having no two adjacent letters the same and avoiding a single pattern of length five is given by the Catalan number Cn− 1 in six particular instances. In addition to supplying apparently new combinatorial structures counted by the Catalan numbers, this provides interesting examples of the more general question of enumerating how many members which belong to some class of words satisfying an adjacency requirement avoid a given subsequence pattern...|$|R
