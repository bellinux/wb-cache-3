2956|0|Public
25|$|<b>Pseudo-random</b> number {{sampling}} algorithms {{are used}} to transform uniformly distributed <b>pseudo-random</b> numbers into numbers that are distributed according to a given probability distribution.|$|E
25|$|Complete LFSR are {{commonly}} used as pattern generators for exhaustive testing, since they cover all possible inputs for an n-input circuit. Maximal-length LFSRs and weighted LFSRs are widely used as <b>pseudo-random</b> test-pattern generators for <b>pseudo-random</b> test applications.|$|E
25|$|The open standard-precision {{signal is}} {{generated}} with modulo-2 addition (XOR) of 511 kbit/s <b>pseudo-random</b> ranging code, 50 bit/s navigation message, and an auxiliary 100Hz meander sequence (Manchester code), all generated using a single time/frequency oscillator. The <b>pseudo-random</b> code is generated with a 9-stage shift register operating with {{a period of}} 1 ms.|$|E
25|$|LFSRs {{are used}} in circuit testing for test-pattern {{generation}} (for exhaustive testing, <b>pseudo-random</b> testing or pseudo-exhaustive testing) and for signature analysis.|$|E
25|$|LFSRs {{are also}} used in radio jamming systems to {{generate}} <b>pseudo-random</b> noise to raise the noise floor of a target communication system.|$|E
25|$|Applications of LFSRs include {{generating}} <b>pseudo-random</b> numbers, pseudo-noise sequences, fast digital counters, and whitening sequences. Both {{hardware and}} software implementations of LFSRs are common.|$|E
25|$|There {{are many}} {{applications}} {{in which it}} is useful to run simulation experiments. Many programming languages have the ability to generate <b>pseudo-random</b> numbers which are effectively distributed according to the standard uniform distribution.|$|E
25|$|Class 3: Nearly all initial {{patterns}} {{evolve in}} a <b>pseudo-random</b> or chaotic manner. Any stable structures that appear are quickly {{destroyed by the}} surrounding noise. Local changes to the initial pattern tend to spread indefinitely.|$|E
25|$|The {{permutation}} is initialized with {{a variable}} length key, typically between 40 and 2048 bits, using the key-scheduling algorithm (KSA). Once {{this has been}} completed, the stream of bits is generated using the <b>pseudo-random</b> generation algorithm (PRGA).|$|E
25|$|Inverse {{transform}} sampling (also {{known as}} inversion sampling, the inverse probability integral transform, the inverse transformation method, Smirnov transform, golden rule) {{is a basic}} method for <b>pseudo-random</b> number sampling, i.e. for generating sample numbers at random from any probability distribution given its cumulative distribution function.|$|E
25|$|LFSRs can be {{implemented}} in hardware, and this makes them useful in applications that require very fast generation of a <b>pseudo-random</b> sequence, such as direct-sequence spread spectrum radio. LFSRs have also been used for generating an approximation of white noise in various programmable sound generators.|$|E
25|$|Monte Carlo simulation: Drawing a {{large number}} of <b>pseudo-random</b> uniform {{variables}} from the interval , and assigning values {{less than or equal to}} 0.50 as heads and greater than 0.50 as tails, is a Monte Carlo simulation of the behavior of repeatedly tossing a coin.|$|E
25|$|Variant A {{generates a}} list of 250 domain names every day across five TLDs. The domain names are {{generated}} from a <b>pseudo-random</b> number generator (PRNG) seeded with the current date to ensure that every copy of the virus generates the same names each day. The virus then attempts an HTTP connection to each domain name in turn, expecting from any of them a signed payload.|$|E
25|$|Wyld {{diagrams}} are bookkeeping graphs {{that correspond}} to the Navier–Stokes equations via a perturbation expansion of the fundamental continuum mechanics. Similar to the Feynman diagrams in quantum field theory, these diagrams are an extension of Keldysh's technique for nonequilibrium processes in fluid dynamics. In other words, these diagrams assign graphs to the (often) turbulent phenomena in turbulent fluids by allowing correlated and interacting fluid particles to obey stochastic processes associated to <b>pseudo-random</b> functions in probability distributions.|$|E
25|$|The Box–Muller transform, by George Edward Pelham Box and Mervin Edgar Muller, is a <b>pseudo-random</b> number {{sampling}} method for generating pairs of independent, standard, normally distributed (zero expectation, unit variance) random numbers, given {{a source of}} uniformly distributed random numbers. The method was in fact first mentioned by Raymond E. A. C. Paley and Norbert Wiener in 1934, and {{it is more likely}} than not that this source was well known to Box and Muller, which, however, failed to cite it in their article of 1958.|$|E
25|$|The {{microscopic}} {{kinetic energy}} {{portion of the}} internal energy {{gives rise to the}} temperature of the system. Statistical mechanics relates the <b>pseudo-random</b> kinetic energy of individual particles to the mean kinetic energy of the entire ensemble of particles comprising a system. Furthermore, it relates the mean microscopic kinetic energy to the macroscopically observed empirical property that is expressed as temperature of the system. This energy {{is often referred to as}} the thermal energy of a system, relating this energy, like the temperature, to the human experience of hot and cold.|$|E
25|$|Fermat primes are {{particularly}} useful in generating <b>pseudo-random</b> sequences of {{numbers in the}} range 1 … N, where N is a power of 2. The most common method used is to take any seed value between 1 and Pnbsp&−nbsp&1, where P is a Fermat prime. Now multiply this by a number A, which {{is greater than the}} square root of P and is a primitive root modulo P (i.e., it is not a quadratic residue). Then take the result modulo P. The result is the new value for the RNG.|$|E
25|$|As more {{information}} about the signal became available, its purpose as a radar signal became increasingly obvious. In particular, its signal contained a clearly recognizable structure in each pulse, which was eventually identified as a 31-bit <b>pseudo-random</b> binary sequence, with a bit-width of 100 μs resulting in a 3.1 ms pulse. This sequence is usable for a 100μs chirped pulse amplification system, giving a resolution of 15km (10mi) (the distance light travels in 50μs). When a second Woodpecker appeared, this one located in eastern Russia but also pointed toward the US and covering blank spots in the first system's pattern, this conclusion became inescapable.|$|E
25|$|The {{effects of}} the {{ionosphere}} generally change slowly, and can be averaged over time. Those for any particular geographical area can be easily calculated by comparing the GPS-measured position to a known surveyed location. This correction is also valid for other receivers in the same general location. Several systems send this information over radio or other links to allow L1-only receivers to make ionospheric corrections. The ionospheric data are transmitted via satellite in Satellite Based Augmentation Systems (SBAS) such as Wide Area Augmentation System (WAAS) (available in North America and Hawaii), EGNOS (Europe and Asia) or Multi-functional Satellite Augmentation System (MSAS) (Japan), which transmits it on the GPS frequency using a special <b>pseudo-random</b> noise sequence (PRN), so only one receiver and antenna are required.|$|E
25|$|LFSRs {{have long}} been used as <b>pseudo-random</b> number {{generators}} for use in stream ciphers (especially in military cryptography), due to the ease of construction from simple electromechanical or electronic circuits, long periods, and very uniformly distributed output streams. However, an LFSR is a linear system, leading to fairly easy cryptanalysis. For example, given a stretch of known plaintext and corresponding ciphertext, an attacker can intercept and recover a stretch of LFSR output stream used in the system described, and from that stretch of the output stream can construct an LFSR of minimal size that simulates the intended receiver by using the Berlekamp-Massey algorithm. This LFSR can then be fed the intercepted stretch of output stream to recover the remaining plaintext.|$|E
25|$|Chaos {{theory has}} been used for many years in cryptography. In the past few decades, chaos and {{nonlinear}} dynamics have been used in the design of hundreds of cryptographic primitives. These algorithms include image encryption algorithms, hash functions, secure <b>pseudo-random</b> number generators, stream ciphers, watermarking and steganography. The majority of these algorithms are based on uni-modal chaotic maps and a big portion of these algorithms use the control parameters and the initial condition of the chaotic maps as their keys. From a wider perspective, without loss of generality, the similarities between the chaotic maps and the cryptographic systems is the main motivation for the design of chaos based cryptographic algorithms. One type of encryption, secret key or symmetric key, relies on diffusion and confusion, which is modeled well by chaos theory. Another type of computing, DNA computing, when paired with chaos theory, offers a way to encrypt images and other information. Many of the DNA-Chaos cryptographic algorithms are proven to be either not secure, or the technique applied is suggested to be not efficient.|$|E
500|$|Memory {{scrambling}} memory controller {{feature that}} turns user data {{written to the}} memory into <b>pseudo-random</b> patterns ...|$|E
2500|$|... the (<b>pseudo-random)</b> number {{generator}} produces {{values that}} pass tests for randomness ...|$|E
2500|$|Inversive congruential {{generator}} - a <b>pseudo-random</b> number generator {{that uses}} modular multiplicative inverses ...|$|E
2500|$|... the (<b>pseudo-random)</b> number {{generator}} {{has certain}} characteristics (e.g., a long [...] "period" [...] before the sequence repeats) ...|$|E
2500|$|A simple {{algorithm}} {{to generate}} random Poisson-distributed numbers (<b>pseudo-random</b> number sampling) {{has been given}} by Knuth (see References below): ...|$|E
2500|$|If a prime p is both full reptend prime {{and safe}} prime, then 1/p {{will produce a}} stream of p − 1 <b>pseudo-random</b> digits. Those primes are ...|$|E
2500|$|The {{number of}} points [...] in the window, denoted here by , needs to be simulated, which is done by using a (<b>pseudo)-random</b> number {{generating}} function capable of simulating Poisson random variables.|$|E
2500|$|This {{following}} immediate-mode expression {{generates a}} typical set of [...] "Pick 6" [...] lottery numbers: six <b>pseudo-random</b> integers ranging from 1 to 40, guaranteed non-repeating, and displays them sorted in ascending order: ...|$|E
2500|$|In {{the table}} above, PRN is the {{satellite}}'s actual <b>Pseudo-Random</b> Noise code. [...] NMEA is the satellite number sent by some receivers when outputting satellite information. [...] ( [...] NMEA = PRN - 87 [...] ).|$|E
2500|$|The End of Greatness is an {{observational}} scale {{discovered at}} roughly 100Mpc (roughly 300 million lightyears) where the lumpiness {{seen in the}} large-scale structure {{of the universe is}} [...] and isotropized in accordance with the Cosmological Principle. At this scale, no <b>pseudo-random</b> fractalness is apparent.|$|E
2500|$|The {{importance}} of the above is that the reverse of these steps {{can be used to}} generate <b>pseudo-random</b> samples from general classes of multivariate probability distributions. That is, given a procedure to generate a sample [...] from the copula distribution, the required sample can be constructed as ...|$|E
2500|$|Simulation: Drawing one <b>pseudo-random</b> uniform {{variable}} {{from the}} interval [...] {{can be used}} to simulate the tossing of a coin: If the value is {{less than or equal to}} 0.50 designate the outcome as heads, but if the value is greater than 0.50 designate the outcome as tails. This is a simulation, but not a Monte Carlo simulation.|$|E
2500|$|A {{frequent}} {{problem in}} statistical simulations (the Monte Carlo method) is {{the generation of}} <b>pseudo-random</b> numbers that are distributed in a given way. Most algorithms {{are based on a}} pseudorandom number generator that produces numbers X that are uniformly distributed in the interval [...] These random variates X are then transformed via some algorithm to create a new random variate having the required probability distribution.|$|E
2500|$|Randomness {{intrinsically}} {{generated by}} the system. This is also called pseudorandomness and is the kind used in <b>pseudo-random</b> number generators. There are many algorithms (based on arithmetics or cellular automaton) to generate pseudorandom numbers. The behavior of the system can be determined by knowing the seed state and the algorithm used. These methods are often quicker than getting [...] "true" [...] randomness from the environment.|$|E
2500|$|Monte Carlo {{simulations}} {{are typically}} {{characterized by a}} large number of unknown parameters, many of which are difficult to obtain experimentally. Monte Carlo simulation methods do not always require truly random numbers to be useful (although, for some applications such as primality testing, unpredictability is vital). Many of the most useful techniques use deterministic, pseudorandom sequences, making it easy to test and re-run simulations. The only quality usually necessary to make good simulations is for the <b>pseudo-random</b> sequence to appear [...] "random enough" [...] in a certain sense.|$|E
