637|611|Public
5000|$|The {{last decade}} {{has seen a}} surge of {{practical}} interest {{in the idea of}} <b>program</b> <b>synthesis</b> in the formal verification community and related fields. Armando Solar-Lezama showed {{that it is possible to}} encode <b>program</b> <b>synthesis</b> problems in Boolean logic and use algorithms for the Boolean satisfiability problem to automatically find programs. In 2013, a unified framework for <b>program</b> <b>synthesis</b> problems was proposed and since 2014 there is a yearly <b>program</b> <b>synthesis</b> competition, comparing the different algorithms for <b>program</b> <b>synthesis</b> in a competitive event (www.sygus.org). Still, the available algorithms are only able to synthesize small programs.|$|E
50|$|This {{framework}} can be also be {{contrasted with}} the family of automated <b>program</b> <b>synthesis</b> fields, including <b>program</b> <b>synthesis,</b> programming by example, and programming by demonstration. The goal in such fields {{is to find the}} best program that satisfies some constraint. In <b>program</b> <b>synthesis,</b> for instance, verification of logical constraints reduce the state space of possible programs, allowing more efficient search to find an optimal program. Bayesian <b>Program</b> <b>Synthesis</b> differs both in that the constraints are probabilistic and the output is itself a distribution over programs that can be further refined.|$|E
50|$|In {{computer}} science, <b>program</b> <b>synthesis</b> is {{the task}} to automatically construct a program that satisfies a given high-level specification. In contrast to other automatic programming techniques, the specifications are usually non-algorithmic statements of an appropriate logical calculus. Often, <b>program</b> <b>synthesis</b> employs techniques from formal verification.|$|E
40|$|Mechanics, Motion Control, Sensing and <b>Programming,</b> <b>Synthesis</b> and Design, Legged Locomotion and Biomechanical Aspects of Robots and Manipulators – {{world view}} {{of the state of}} the art. Characterization: This volume {{presents}} the latest contribution to the theory and practice of modern robotics given by the world recognized scientists from Australia, Canada, Europe, Japan, Mexico, Singapore and USA...|$|R
40|$|The {{synthesis}} of linear periodic arrays generating flat top beam patterns is a canonical problem {{which has been}} investigated adopting different algorithms. In this contribution a parametric investigation is proposed in order to appreciate how the pattern evolves {{as a function of}} different design parameters like the array dimension, the beam flatness, the beam roll-off and the sidelobe levels. The numerical results proposed are based on linear <b>programming</b> <b>synthesis</b> techniques which guarantee optimality of the solutions for the given set of parameters...|$|R
40|$|International audienceSeveral {{reported}} methods allow {{access to}} α-arylated selenophenes, whereas {{the synthesis of}} β-arylated selenophenes remains very challenging. Here, the Pd-catalysed coupling of benzenesulfonyl chlorides with selenophenes affording regiospecific β-arylated selenophenes is reported. The reaction proceeds with easily accessible catalyst, base and substrates, and tolerates a variety of substituents both on the benzene and selenophene moieties. This transformation allows the <b>programmed</b> <b>synthesis</b> of polyarylated selenophenes with potential applications in pharmaceutical and materials chemistry, as the installation of aryl groups at the desired positions can be achieved...|$|R
5000|$|Since then, various {{research}} communities {{considered the}} problem of <b>program</b> <b>synthesis.</b> Notable works include the automata-theoretic approach by Büchi and Landweber, and the works by Manna and Waldinger discussed below. Even the development of modern high-level programming languages {{can be understood as}} a form of <b>program</b> <b>synthesis.</b>|$|E
50|$|In many {{applications}} the output program must be correct {{with respect to}} the examples and partial specification, and this leads to the consideration of inductive programming as a special area inside automatic programming or <b>program</b> <b>synthesis,</b> usually opposed to 'deductive' <b>program</b> <b>synthesis,</b> where the specification is usually complete.|$|E
50|$|Automatic <b>program</b> <b>synthesis</b> {{began in}} the {{artificial}} intelligence field, with software intended for automatic problem solving. The first program synthesizer was developed by Cordell Green in 1969. At about the same time, mathematicians including R. Constable, Z. Manna, and R. Waldinger explained the possible use of formal logic for automatic <b>program</b> <b>synthesis.</b> Practically applicable program synthesizers appeared considerably later.|$|E
5000|$|... 2003: Keith A. Browning for {{leadership}} in international <b>programs</b> and <b>synthesis</b> of observations and models dealing with synoptic and mesoscale systems, and for pioneering research on short-range forecasting.|$|R
40|$|Automated <b>synthesis</b> of <b>program</b> {{fragments}} from specifications {{can make}} programs easier {{to write and}} easier to reason about. To integrate <b>synthesis</b> into <b>programming</b> languages, software <b>synthesis</b> algorithms should behave in a predictable way: they should succeed for a well-defined class of specifications. We propose to systematically generalize decision procedures into synthesis procedures, {{and use them to}} compile implicitly specified computations embedded inside functional and imperative <b>programs.</b> <b>Synthesis</b> procedures are predictable, because they are guaranteed to find code that satisfies the specification whenever such code exists. To illustrate our method, we derive synthesis procedures by extending quantifier elimination algorithms for integer arithmetic and set data structures. We then show that an implementation of such synthesis procedures can extend a compiler to support implicit value definitions and advanced pattern matching...|$|R
40|$|Cytoplasmic RNA {{extracted}} from human tissue culture cells infected with adenovirus type 2 {{was used to}} <b>program</b> protein <b>synthesis</b> in a cell-free system derived from mammalian cells. Analysis of the protein product by polyacrylamide gel electrophoresis revealed ten adenovirus-specific polypeptides. Five of these were further identified by analysis of tryptic peptides. Translation of RNA fractionated by sedimentation through sucrose gradients containing formamide demonstrated seven size classes of RNA, each of which <b>programmed</b> the <b>synthesis</b> of {{only one or two}} virus-specific polypeptides. Six of the virus-specific polypeptides were translated from RNAs much larger than expected for the size of the polypeptide...|$|R
5000|$|... {{convening}} {{lead author}} for the U.S. Climate Change Science <b>Program</b> <b>Synthesis</b> and Assessment product 1.1 ...|$|E
50|$|<b>Program</b> <b>synthesis</b> is {{one type}} of {{automatic}} programming where a procedure is created from scratch, based on mathematical requirements.|$|E
5000|$|Already {{during the}} Summer Institute of Symbolic Logic at Cornell University in 1957 Alonzo Church defined {{the problem to}} {{synthesize}} a circuit from mathematical requirements. Even though the work only refers to circuits and not programs, the work {{is considered to be}} one of the earliest descriptions of <b>program</b> <b>synthesis</b> and some researchers refer to <b>program</b> <b>synthesis</b> as [...] "Church's Problem". In the 1960s a similar idea, to build an [...] "automatic programmer", was explored by researchers in artificial intelligence.|$|E
5000|$|Otto Von Schirach (sound design - 1, 9; <b>synthesis,</b> <b>programming</b> - 5) ...|$|R
5000|$|Going {{with the}} Grain {{a review of}} 10 {{granular}} <b>synthesis</b> <b>programs</b> by Dennis Miller (2008) ...|$|R
40|$|International audienceUnderstanding the {{mechanism}} of biomolecules’ interaction with inorganic surfaces might {{pave the way for}} the design of material interfaces with controlled and highly predictable properties. Here we have focused on the adsorption mechanism of facet-specific amino acids in the sequence of peptides selected for <b>programmed</b> <b>synthesis</b> of Pt(111) and Pt(100) nanocrystals. Using the first principles calculations we have demonstrated that the specific surface recognition of amino acid side chains occurs due to the combination of multiple processes: electron exchange, partial charge transfer and/or dispersive effects providing a high binding affinity to both polar and non-polar residues against both Pt facets. Our approach points towards promising novel routes for controlled design of material-specific linkers for future materials engineering...|$|R
50|$|In machine learning, Bayesian <b>Program</b> <b>Synthesis</b> (BPS), Bayesian Programs write (synthesize) new Bayesian programs. This is in {{contrast}} to the field of probabilistic programs where humans write new probabilistic (Bayesian) programs.|$|E
50|$|Bayesian <b>Program</b> <b>Synthesis</b> can be {{compared}} to the work on Bayesian Program Learning by Lake, Salakhutdinov, and Tenenbaum's, where probabilistic program components were hand-written, pre-trained on data, and then hand assembled in order to recognize handwritten characters.|$|E
50|$|In 1994 he was {{inducted}} as a Fellow of the Association for Computing Machinery. In 2016, he shared the Herbrand Award with Richard Waldinger for his ″pioneering research and pedagogical contributions (with Richard Waldinger) to automated reasoning, <b>program</b> <b>synthesis,</b> planning, and formal methods″.|$|E
40|$|New zinc and cadmium mono- and binuclear {{complexes}} containing dioxime ligands were synthesized. Due to Zn and Cd {{affinity for}} oxygen and nitrogen atoms a high diversity of complexes containing dioxime ligands with varied composition and interesting architecture can be prepared. The use of bridging ligands offers good perspectives for assembly of bi- and polynuclear compounds, study of various components impact on synthesis and opens {{new directions for}} oriented and <b>programmed</b> <b>synthesis</b> of compounds with predictable properties. In such a way the use of some chelate ligands which coordinate with metal perpendicularly to the axis connecting metal atoms make lighter the crystalline structure and create cavities which can be embedded with small molecules...|$|R
50|$|Superior also {{published}} {{a number of}} educational and utility software titles including the speech <b>synthesis</b> <b>program</b> Speech!.|$|R
40|$|VHDL. ????????? ??????? ??????? ???????? ??? ?????????? ?????? ??????????? ?????, ???? ??????????? ? ????????????? ???????? ???????????? ????? ? ??????? ?????????? ???????????? ? ?????? ?????????? ?????????. A {{method of}} mapping of Boolean SDF graph into pipelined {{datapath}} which {{is described by}} VHDL <b>program.</b> A <b>synthesis</b> example of the complex number magnitude calculator illustrates the method. This calculator is configured in FPGA and provides both high throughput and small hardware volume...|$|R
5000|$|Vigoda is {{currently}} the CEO and Founder of Gamalon. Funded by DARPA and leading Venture Capital firms [...] to help develop a next generation of machine learning and AI technology, Vigoda is leading the development at Gamalon of Idea Learning and Bayesian <b>Program</b> <b>Synthesis,</b> with first applications to structuring unstructured data.|$|E
5000|$|Bayesian <b>Program</b> <b>Synthesis</b> (BPS) {{has been}} {{described}} as a framework related to and utilizing probabilistic programming. in BPS, probabilistic programs are generated that are themselves priors over a space of probabilistic programs. [...] This strategy allows more automatic synthesis of new programs via inference and is achieved by the composition of modular component programs.|$|E
5000|$|He {{received}} the Turing Award in 1978 [...] "for having a clear influence on methodologies {{for the creation}} of efficient and reliable software, and for helping to found the following important subfields of computer science: the theory of parsing, the semantics of programming languages, automatic program verification, automatic <b>program</b> <b>synthesis,</b> and analysis of algorithms".|$|E
40|$|Abstract. Genes {{that direct}} the <b>programmed</b> <b>synthesis</b> of flagellar a-tubulin during the {{differentiation}} of Naegleria gruberi from amebae to flagellates have been cloned, {{and found to}} be novel with respect to gene organization, sequence, and conservation. The flagellar ct-tubulin gene family is represented in the genome by about eight homologous DNA segments that are exceptionally similar and yet are neither identical nor arrayed in a short tandem repeat. The coding regions of three of these genes have been sequenced, two from cDNA clones and one from an intronless genomic gene. These three genes encode an identical a-tubulin that is conserved relative to the ~t-tubulins of other organisms except at the carboxyl terminus, where the protein is elongated by two residues an...|$|R
50|$|Spectral <b>synthesis</b> <b>programs</b> (e.g. Moog (code)) {{often use}} {{previously}} generated model photospheres {{to describe the}} physical conditions (temperature, pressure, etc...) through which photons must travel to escape the stellar atmosphere. Together {{with a list of}} absorption lines and an elemental abundance table, spectral <b>synthesis</b> <b>programs</b> generate synthetic spectra. By comparing these synthetic spectra to observed spectra of distant stars, astronomers can determine the properties (temperature, age, chemical composition, etc...) of these stars.|$|R
40|$|<b>Programming</b> Structural <b>Synthesis</b> System (PROSSS) {{provides}} structural synthesis capability {{by combining}} SPAR and CONMIN computer programs with set of interface procedures. SPAR is large general-purpose finite-element structural-analysis program, and CONMIN is large general-purpose optimization program. User supplies two small problem-dependent programs to define design variables, constraints, and objective function...|$|R
5000|$|These {{two terms}} were first undifferentiated, but PbE then {{tended to be}} mostly adopted by {{software}} development researchers while PbD tended to be adopted by robotics researchers. Today, PbE refers to an entirely different concept, supported by new programming languages {{that are similar to}} simulators. This framework can be contrasted with Bayesian <b>Program</b> <b>Synthesis.</b>|$|E
50|$|Program repair {{combines}} techniques from {{formal verification}} and <b>program</b> <b>synthesis.</b> Fault-localization techniques in formal verification {{are used to}} compute program points which might be possible bug-locations, which can be targeted by the synthesis modules. Repair systems often focus on a small pre-defined class of bugs {{in order to reduce}} the search space. Industrial use is limited owing to the computational cost of existing techniques.|$|E
50|$|Feature Oriented Programming or Feature Oriented Software Development (FOSD) is {{a general}} {{paradigm}} for <b>program</b> <b>synthesis</b> in software product lines. Please read the Feature Oriented Programming page that explains how an FOSD model of a domain is a tuple of 0-ary functions (called values) {{and a set of}} 1-ary (unary) functions called features. This page discusses multidimensional generalizations of FOSD models, which are important for compact specifications of complex programs.|$|E
50|$|Founded in 2003, the Surface Creek {{branch of}} the Delta County Vision <b>program</b> is a <b>synthesis</b> of home{{schooling}} and public schooling philosophies.|$|R
5000|$|Dr. Sbaitso is an {{artificial}} intelligence speech <b>synthesis</b> <b>program</b> released late in 1991 [...] by Creative Labs for MS DOS-based personal computers.|$|R
40|$|This paper {{presents}} a cross-platform C++ programming environment designed for rapid prototyping of music synthesis and audio processing <b>programs.</b> The <b>Synthesis</b> ToolKit offers {{an array of}} unit generators for filtering, input/output, etc., as well as examples of new and classic synthesis and effects algorithms for research, teaching, performance, and composition purposes. ...|$|R
