13|1141|Public
5|$|Samson {{wrote the}} type-justifying program known as TJ-2, an early <b>page</b> <b>layout</b> <b>program,</b> and {{implemented}} the War card game.|$|E
50|$|Like a word processor, Taste {{allowed the}} user to simply start typing and {{continue}} doing so until they were finished. There was no need, as in a typical <b>page</b> <b>layout</b> <b>program,</b> to create a box to hold the text, or manually add pages or link columns as the document grew. Like a <b>page</b> <b>layout</b> <b>program,</b> Taste also allowed {{the user to}} add these boxes if needed, as well as adjust the distance between characters (kerning) or between lines in a paragraph. Fairly complex graphics can be created within this program.|$|E
50|$|Serif PagePlus is {{a desktop}} {{publishing}} (<b>page</b> <b>layout)</b> <b>program</b> developed by Serif. The first version {{was released in}} 1991 as the first commercial sub-£100 DTP package for Microsoft Windows. Serif's latest releases all support Windows Vista, Windows 7 and Windows 8.|$|E
50|$|Also for the PDP-1 {{he wrote}} TJ-2 (Type Justifying Program), the {{predecessor}} of the troff and nroff <b>page</b> <b>layout</b> <b>programs</b> developed at Bell Labs, a War card game, and, with Alan Kotok, T-Square, a drafting program that used a Spacewar! controller for an input device.|$|R
50|$|It {{also appears}} that OpenDoc {{was a victim}} of an {{oversold}} concept, that of compound documents. Only a few specific examples are common, for instance most word processors and <b>page</b> <b>layout</b> <b>programs</b> include the ability to include graphics, and spreadsheets are expected to handle charts.|$|R
5000|$|The {{advent of}} scanners, desktop publishing, <b>page</b> <b>layout</b> <b>programs,</b> and {{advanced}} printing options make it {{relatively easy to}} create professional-looking layouts in digital form. The internet allows scrapbookers to self-publish their work. Scrapbooks that exist completely in digital image form {{are referred to as}} [...] "digital scrapbooks" [...] or [...] "computer scrapbooks." ...|$|R
50|$|PagePlus is {{a desktop}} {{publishing}} (<b>page</b> <b>layout)</b> <b>program</b> developed by Serif for Microsoft Windows. The first version {{was released in}} 1991 as the first commercial sub-£100 DTP package for Microsoft Windows. The latest release is PagePlus X9, which was released in November 2015.|$|E
5000|$|TJ-2 (Type Justifying Program) was {{published}} by Peter Samson in May 1963 and {{is thought to be}} the first <b>page</b> <b>layout</b> <b>program.</b> Although it lacks page numbering, page headers and footers, TJ-2 is the first word processor to provide a number of essential typographic alignment and automatic typesetting features: ...|$|E
50|$|The {{need for}} a {{structuring}} convention arises since PostScript is a Turing-complete programming language. There is thus no guaranteed method — short of actually printing the document — {{to do things like}} determining how many pages long a given document is or how large a given page is, or how to skip to a particular page. The addition of structure, with DSC comments exposing that structure, helps provide a way for, e.g., an intelligent print spooler {{to have the ability to}} rearrange the pages for printing, or for a <b>page</b> <b>layout</b> <b>program</b> to find the bounding box of a PostScript file used as a graphic image. Collectively, any such program that takes PostScript files as input data is called a document manager.|$|E
50|$|The pilcrow {{is used in}} desktop {{publishing}} software such as desktop word processors and <b>page</b> <b>layout</b> <b>programs</b> to mark {{the presence of a}} carriage return control character {{at the end of a}} paragraph. It is also used as the icon on a toolbar button that shows or hides the pilcrow and similar hidden characters, including tabs, whitespace, and page breaks. In typing programs, it marks a return that one must type.|$|R
50|$|Vector editors {{are closely}} related to desktop {{publishing}} software such as Adobe InDesign or Scribus, which also usually include some vector drawing tools (usually less powerful than those in standalone vector editors). Modern vector editors are capable of, and often preferable for, designing unique documents (like flyers or brochures) of up to a few pages; it's only for longer or more standardized documents that the <b>page</b> <b>layout</b> <b>programs</b> are more suitable.|$|R
50|$|Fonts - and {{therefore}} font-management programs - support {{people in a}} variety of professions: graphic designers, publishers (such as book publishers and news and periodical publishers), web-site designers, interface designers, illustrators, packaging designers, typeface designers, letterpress printers (using plates made from <b>page</b> <b>layout</b> <b>programs),</b> motion-graphic and film-title designers, advertising agencies, signage and wayfinding (environmental graphic design studios), industrial designers, and architectural firms that have in-house 2D design-staff who work with signs and typography.|$|R
40|$|The {{purpose of}} this study is to develop a {{reference}} source that integrates information on incorporating text, graphics, and images into a <b>page</b> <b>layout</b> <b>program.</b> Historically, the technical writer was only responsible for the creation of text and utilized the services of a graphic artist for the creation of images. This process is time consuming and introduces errors into the publishing process. Currently, technical publishers are becoming responsible for the complete documents graphics, text, and images using word processing, design/illustration, CAD/CAM, and photo/image manipulation programs. Thus, the user must have training in the correct use of the four programs listed above and the <b>page</b> <b>layout</b> <b>program.</b> The incorporation of text and graphics from not only different software programs, but also from different computer platforms, is a process which requires that the technical publisher have a strong understanding of the file formats available and the inherent limitations of each format. Documentation that accompanies a software program rarely addresses adequately the issue of transporting of data across multiple platforms. When a problem arises, the information necessary to solve the problem is often gained from reading several manuals. Often these sources are not adequate, and the solution is discovered by experimentation. Experimentation for a corporation with deadlines, is both cosdy and inefficient. The Software Applications Handbook will increase efficiency and reduce frustration by providing needed information in one easy-to-use reference handbook. The handbook is grouped into sections which can be referred to as needed without the need to read the entire book/The manual addresses the most commonly used programs in industry. The project consists of three major sections. The first section discusses the file formats available and includes the actual file standard where possible. The second section discusses the integration of applications into the <b>page</b> <b>layout</b> <b>program,</b> and the final section discusses hardware specific issues as applied to technical publishing; this section is not addressed in the initial version of this manual. Softwar...|$|E
40|$|This {{paper is}} divided into four sections, each of which aids future editors in {{different}} ways. The first section lists and explains each of the necessary steps an editor must take to produce the Odyssey. The second part recounts what the editors did {{in order to create}} the 2002 issue of the Odyssey, including why they did what they did and how it was accomplished. The third section is a guide for those individuals who are not familiar with QuarkXpress, the <b>page</b> <b>layout</b> <b>program</b> used to design and layout the Odyssey. The final section contains hard copies of objects used during the planning and production of the Odyssey. This includes names and numbers of useful contacts, posters used in promotions, editorial board applications, and much more. These four sections work together to create a valuable resource for future editors of the Odyssey. Honors CollegeThesis (B. ?. ...|$|E
40|$|Adobe 2 ̆ 7 s newest <b>page</b> <b>layout</b> <b>program,</b> InDesign, {{includes}} a 2 ̆ 2 multi-line composing engine. 2 ̆ 2 This feature has been highlighted in presentations and preliminary literature {{about the program}} by Adobe. The claim being made by Adobe is that the multi-line composing method will produce visible improvements over traditional line-by-line justification methods, such as that employed by the current most-popular <b>page</b> <b>layout</b> <b>program,</b> QuarkXPress. Text produced using line-by-line justification methods tends to exhibit significant variances in interword spacing from one line to the next. Text often appears too loose or too tight in parts, and visual effects such as rivers of white space running through a column are often present. A multi-line method of justification should produce markedly better results, as interword spacing should be mostly consistent throughout an entire paragraph. The idea for a multi-line justification method {{is based on the}} hand-compositor 2 ̆ 7 s practice of resetting previous lines of text when a line cannot be acceptably justified on its own. This practice became very difficult {{with the arrival of the}} Linotype in 1886 and practically impossible with the Monotype in 1887. First- and second- generation phototypesetters also did not allow any form of multi-line justification. Only with the arrival of typographical technology to desktop systems has it again become possible to employ a multi-line justification method. Two notable programs that were able to perform multi-line justification before the arrival of InDesign are Donald Knuth 2 ̆ 7 s page description language, _fX, and the /zz-program, developed by Peter Karow and Hermann Zapf. InDesign 2 ̆ 7 s multi-line composition engine is in fact based on TX and the /zz-program, and it employs similar algorithms. Although there have been comparisons done between TeX or the /tz-program and line-by-line justification methods, there have been no extensive comparisons between InDesign 2 ̆ 7 s multi-linecomposing engine and a program using a line-by-line justification method, such as QuarkXPress. The hypothesis of this thesis, then, is that InDesign 2 ̆ 7 s multi-line justification method will indeed produce a significant improvement over the line-by-line justification method used by QuarkXPress. This hypothesis is tested through flowing text into three templates that are designed to be representative of a book layout, a newspaper layout, and an magazine layout. Identical versions of these templates were created in both InDesign and QuarkXPress 3. 32. A challenging, yet not extraordinary text was flowed into all templates. Wordspacing and hyphenation are evaluated...|$|E
5000|$|The {{arrangement}} of stamps on an album page {{depends on the}} taste of the collector and the purpose of the collection. A collection with [...] "one of each" [...] stamp may have rows of stamps packed onto each page, while a specialist's page might have a dozen examples of the same type of stamp, each captioned with a description of printing details or colour shades. Traditional page creation was done by hand with pen and ink; in recent years <b>page</b> <b>layout</b> software and computer printers have become popular. AlbumEasy, available free, for both Windows and Linux, is an example of one of the many <b>page</b> <b>layout</b> <b>programs.</b>|$|R
5000|$|Nearly all of {{the popular}} and [...] "industry standard" [...] {{software}} programs used for graphic design since the early 1990s are products of Adobe Systems Incorporated. Adobe Photoshop (a raster-based program for photo editing) and Adobe Illustrator (a vector-based program for drawing) are often used in the final stage. Designers often use pre-designed raster images and vector graphics in their work from online design databases. Raster images may be edited in Adobe Photoshop, logos and illustrations in Adobe Illustrator, and the final product assembled {{in one of the}} major <b>page</b> <b>layout</b> <b>programs,</b> including Adobe InDesign. Graphic designers are expected to be proficient in these programs.|$|R
50|$|An HTML editor is a {{computer}} program for editing HTML, the markup of a webpage. Although the HTML markup of a web page can be written with any text editor, specialized HTML editors can offer convenience and added functionality. For example, many HTML editors handle not only HTML, but also related technologies such as CSS, XML and JavaScript or ECMAScript. In some cases they also manage communication with remote web servers via FTP and WebDAV, and version control systems such as Subversion or Git. Many word processing, graphic design and <b>page</b> <b>layout</b> <b>programs</b> that are not dedicated to web design, such as Microsoft Word or Quark XPress, also {{have the ability to}} function as HTML editors.|$|R
40|$|This {{article is}} an {{introduction}} to the process of making digital facsimiles of documents in a form that is suitable for publication on the Web. The term document as used here refers primarily to material that is printed on paper, although many of the same considerations apply to photographs, microfilm, xerographic copies, as well as other kinds of material, such as fabric samples. The Process There are four main steps in making a digital facsimile of a document: • Scanning the pages of the document to produce corresponding images. • Touching up the images. • Placing the images on pages with a <b>page</b> <b>layout</b> <b>program</b> to produce a digital document • Producing a Portable Document Format ® file (PDF) from this digital document. The PDF [1] is the digital facsimile. Note: Adobe Capture ® can scan directly into a PDF, but it lacks the flexibility to produce good results for all but the simplest of documents. The steps above can be performed by different individuals at different locations. For example, one person may produce the scanned images and transfer them to another person who does the page layout and produces the PDF. Each of the steps above may involve a variety of processes and decisions, depending on the document being copied. These will be covered in subsequent articles. Hardware Requirement...|$|E
40|$|The chapter, {{references}} and authors ’ biographies must be submitted on diskette. The format of your diskette must be IBM Word or RTF text or Macintosh-compatible files. Please label your disk with your last name, IBM or Macintosh, & software used. Manuscripts must be typewritten in English on white paper, one side only, double-spaced throughout, and {{include at least}} one inch (2. 5 cm) of margin on all sides. The cover page should contain the paper title, and the name, affiliation, address, phone number, fax number, and email address of each author. The second page should start with the paper title {{at the top and}} be immediately followed by the abstract. The abstract of 100 - 150 words should clearly summarize the objectives and content of the manuscript. - The text of your chapter should be edited for proper use of English language with clear, concise sentences. Proofread the copy for typographical, grammar and spelling errors or obtain the assistance of a professional copyeditor. - All text on the disk version should be double-spaced, left justified in 12 point Times or Times Roman type. Please put all primary section titles in UPPER CASE letters and subheading in both Upper and Lower Case letters. Do not number your titles (for example, 1. 0 Introduction; 2. 0 Background). Do not use the tab key to indent text such as paragraphs of quotes or lists because the <b>page</b> <b>layout</b> <b>program</b> overrides your left margin with its own, and the tabs end up in mid-sentence. - APA (American Psychological Association) style should be followed for the references. References should relate only to material cited within the manuscript and be listed in alphabetical order, includin...|$|E
40|$|The {{purpose of}} this study is to develop a {{training}} module for integrating text, artwork, and graphics into a <b>page</b> <b>layout</b> <b>program.</b> Currently, the information for successful integration must be referenced from several sources. By having the key elements of integration in one volume, users attempting to layout and/or design a publication using these programs will be able to proceed quickly with fewer technical problems. Rapid growth is predicted for computer-based tools in graphic design studios, advertising agencies, and magazines which normally use computer design stations. These computer design stations require proper training to be used cost effectively. Consequently, training is important for firms investing in them. For the types of publications produced by graphic design studios, advertising agencies, and magazines, training is recommended by the author in the following five areas: word processing, artwork, graphics, page layout, and integration of programs. The manuals available for the individual programs were found to be adequate except in the area of integration. The information was spread out over several manuals and tended to assume more than entry level knowledge of computer vocabulary. The goal of this project is to bring the integration information together into one resource. Each stage of integration will be explained for a user who is not computer literate. It is necessary to specify programs for the integration training module since different programs have different requirements for integration. Programs were selected based on popularity, extensive use, and technical competence in the graphic arts industry. This project is comprised of two components. The first and major phase of the project is the experimentation, research, and writing of the integration training module. The final product will be an integration training module in the form of a reference manual. Research and experimentation will determine the specific contents and instructions for each chapter. The second component is the evaluation and subsequent revisions. A panel of judges will be asked to use the integration training module. The judges will then evaluate the module by completing a questionnaire designed to evaluate accuracy, clarity, ease of use, and usefulness. After reading the evaluations, revisions will be made to the module...|$|E
40|$|Typefaces [...] -commonly called 'fonts' [...] -are {{essential}} to a designer's ability to communicate visually. The {{end of the twentieth}} century was the age of the desktop computer, font design software and <b>page</b> <b>layout</b> <b>programs</b> and the new digital technology removed typography from the exclusive area of the specialist type designer, type foundry and typesetting company and placed it in the hands of graphic designers and non-specialists. This democratisation also led to an exponential growth in the number of typefaces available to users of type. This paper explores the extraordinary breadth evident in the intentions behind the design of a typeface; the reasons someone decides to create a new set of letterforms;and the associations and connotations which typefaces accrue as they are used by designers as components of visual culture. Reflecting the place of typefaces within a cultural and sociological context, it is the diversity of approaches and outcomes which are discussed in this paper. It addresses the cultural significance and meaning of typefaces by showing the role of personal interpretation and a search for appropriateness in the use of the vast resource of an estimated 100, 000 Western typefaces...|$|R
50|$|As Pixar's {{technical}} specification for a standard communications protocol (or interface) between modeling programs and rendering programs {{capable of producing}} photorealistic-quality images, RISpec is a similar concept to PostScript but for describing 3D scenes rather than 2D <b>page</b> <b>layouts.</b> Thus, modelling <b>programs</b> which understand the RenderMan Interface protocol can send data to rendering software which implements the RenderMan Interface, without caring what rendering algorithms are utilized by the latter.|$|R
40|$|Electronic forms is an {{emerging}} market {{that is being}} incorporated into daily use in many corporations and small businesses. In the transition from paper forms to electronic forms many users are merely recreating the paper forms digitally to create an exact replica on screen. This is being done through the utilization of <b>page</b> <b>layout</b> <b>programs</b> such as QuarkXpress and PageMaker {{as well as through}} the aid of electronic forms software programs available today. These software programs aid the user with forms design, often providing templates of forms that are in a graphical format containing rules, logos, and other graphically embellishing elements. The electronic forms industry is also moving towards a workgroup computing environment where intelligent forms can automatically be sent electronically to other users in the workplace without ever printing onto paper. However, the graphic elements involved in the electronic forms of today can slow down networks and require many bytes of memory for storage especially in major corporations who may have thousands of forms on file. A comparison of the graphically embellished form versus a straight data-entry questions only form format needs to be researched. The purpose of this thesis project is to provide the electronic forms industry with knowledge as to {{the advantages and disadvantages of}} both a graphical form and a straight data-entry form. This research also performed a series of tests as to the timeliness, accuracy of data entered, and user 2 ̆ 7 s preference for both graphically embellished forms and straight questions-only forms...|$|R
5000|$|Roockbuilder offer 6 {{different}} Web <b>page</b> <b>layouts.</b> Web <b>page</b> <b>layouts</b> {{based on}} a width of 960 pixels.|$|R
5000|$|Xara <b>Page</b> & <b>Layout</b> Designer - {{combines}} <b>page</b> <b>layout,</b> {{word processor}} and image editing capabilities.|$|R
40|$|A major {{performance}} bottleneck for database {{systems is}} the memory hierarchy. The {{performance of the}} memory hierarchy {{is directly related to}} how the content of disk pages maps to the L 2 cache lines, i. e. to the organization of data within a disk page, called the <b>page</b> <b>layout.</b> The prevalent <b>page</b> <b>layout</b> in database systems is the N-ary Storage Model (NSM). As demonstrated in this paper, using NSM for temporal data deteriorates memory hierarchy performance for query-intensive workloads. This paper proposes two cache-conscious, read-optimized, <b>page</b> <b>layouts</b> for temporal data. Experiments show that the proposed <b>page</b> <b>layouts</b> are substantially faster than NSM...|$|R
40|$|International audienceThe {{efficient}} management of temporal data {{is crucial for}} many traditional and emerging database applications. A major performance bottleneck for database systems is the memory hierarchy. The performance of the memory hierarchy {{is directly related to}} how the content of disk pages maps to the L 2 cache lines, i. e. to the organization of data within a page or the <b>page</b> <b>layout.</b> The prevalent <b>page</b> <b>layout</b> in database systems is the N-ary Storage Model (NSM). As demonstrated in this paper, using NSM for temporal data deteriorates memory hierarchy performance for query-intensive workloads. This paper proposes, new cache-conscious, read-optimized, <b>page</b> <b>layouts</b> specifically tailored for temporal data. The proposed <b>page</b> <b>layouts</b> optimize accesses to all levels of the memory hierarchy by avoiding fetching the same data several times (as opposed to NSM). Experiments show that the proposed <b>page</b> <b>layouts</b> are substantially faster than NSM...|$|R
5000|$|Graphic design {{professionals}} favor general image {{editing software}} and <b>page</b> <b>layout</b> software {{commonly referred to}} as desktop publishing software. Graphic designers that are also image developers or multimedia developers may use a combination of <b>page</b> <b>layout</b> software with the following: ...|$|R
50|$|XSL-FO {{documents}} contain two required sections. The {{first section}} details {{a list of}} named <b>page</b> <b>layouts.</b> The second section {{is a list of}} document data, with markup, that uses the various <b>page</b> <b>layouts</b> to determine how the content fills the various pages.|$|R
5000|$|Originally, {{the project}} planned to also write a PCB <b>layout</b> <b>program.</b> However, an {{existing}} open-source <b>layout</b> <b>program,</b> [...] "PCB", was soon {{discovered by the}} project. Thereafter, the ability to target netlists to PCB was quickly built into the gEDA Project's netlister, and plans to write a new <b>layout</b> <b>program</b> from scratch were scrapped. Meanwhile, developers working on PCB became affiliates of the gEDA Project.|$|R
40|$|Expert book-and-video package {{helps you}} conquer Adobe InDesign CS 6 Whether {{you want to}} create {{sophisticated}} <b>page</b> <b>layouts</b> for print or electronic books or produce dazzling brochures and other publications, chances are Adobe InDesign is the design and <b>page</b> <b>layout</b> tool you'll call upon. Now you can enhance your creativity and discover all the ways to use Adobe InDesign with this book-and-DVD training package. Thirteen self-paced lessons {{teach you how to}} design, produce, and develop streamlined workflows for <b>page</b> <b>layout.</b> Each lesson is accompanied by a video tutorial that clearly demonstrate...|$|R
5000|$|<b>Page</b> <b>layout</b> {{options for}} {{publishing}} books, manuals and periodicals.|$|R
5000|$|... {{printing}} features: print operations, print {{panel and}} <b>page</b> <b>layout</b> ...|$|R
40|$|In this paper, we {{describe}} a flexible system for automatic <b>page</b> <b>layout</b> that {{makes use of}} genetic algorithms for albuming applications. The system {{is divided into two}} modules, a page creator module which is responsible for distributing images amongst various album pages, and an image placement module which positions images on individual <b>pages.</b> Final <b>page</b> <b>layouts</b> are specified in a textual form using XML for printing or viewing over the Internet. The system makes use of genetic algorithms, a class of search and optimization algorithms that are based on the concepts of biological evolution, for generating solutions with fitness based on graphic design preferences supplied by the user. The genetic <b>page</b> <b>layout</b> algorithm has been incorporated into a web-based prototype system for interactive <b>page</b> <b>layout</b> over the Internet. The prototype system is built using client-server architecture and is implemented in Java...|$|R
5000|$|... #Caption: The current front <b>page</b> <b>layout</b> of the Jersey Evening Post ...|$|R
