0|10000|Public
40|$|This paper {{proposes a}} method to improve the {{robustness}} of a robot arm <b>control</b> <b>program.</b> The <b>control</b> <b>program</b> is generated in simulation by genetic programming. The robustness is measured in the real world. To improve the robustness, the <b>control</b> <b>program</b> is evolved with multiple robot arm configurations. The result shows that the robustness of a <b>control</b> <b>program</b> is improved by 10 % compared to a <b>control</b> <b>program</b> evolved with a single configuration...|$|R
40|$|Long-term care {{facilities}} (LTCFs) {{may be defined}} as institutions that provide health care {{to people who are}} unable to manage independently in the community. 1 This care may be chronic care management or short-term rehabilitative services. The term nursing home is defined as a facility licensed with an organized professional staff and inpatient beds that provides continuous nursing and other services to patients who are not in the acute phase of an illness. There is considerable overlap between the 2 terms. More than 1. 5 million residents reside in United States (US) nursing homes. In recent years, the acuity of illness of nursing home residents has increased. LTCF residents have a risk of developing health care associated infection (HAI) that approaches that seen in acute care hospital patients. A great deal of information has been published concerning infections in the LTCF, and infection <b>control</b> <b>programs</b> are nearly universal in that setting. This position paper reviews the literature on infections and infection <b>control</b> <b>programs</b> in the LTCF. Recommendations are developed for long-term care (LTC) infection <b>control</b> <b>programs</b> based on interpretation of currently available evidence. The recommendations cover the structure and function of the infection <b>control</b> <b>program,</b> including surveillance, isolation precautions, outbreak <b>control,</b> <b>resident</b> care, and employee health. Infection control resources are also presented. Hospital infection <b>control</b> <b>programs</b> are well established in the US. Virtually every hospital has an infection control professional (ICP), and many larger hospitals have a consulting hospital epidemiologist. The Study on the Efficacy of Nosocomial Infection Control (SENIC) documented the effectiveness of a hospital infection <b>control</b> <b>program</b> that applies standard surveillance and control measures. ...|$|R
40|$|This paper {{presents}} a generic programming paradigm, called the control plan paradigm, based on Nested Finite State Machines (NFSMs) and event-driven mechanisms. In this paradigm, a <b>control</b> <b>program</b> {{can be divided}} into two non-overlapping parts: behavior and operation specifications. This division allows machine-dependent and machineindependent <b>control</b> <b>programs</b> to be designed and implemented independently of each other, and integrated when an application program is constructed. Our evaluation on an open-architecture machine controller testbed shows that such programming paradigm improves significantly the reconfigurability and reusability of <b>control</b> <b>programs.</b> KEYWORDS: Open-architecture <b>control,</b> <b>programming</b> paradigm, software integration. INTRODUCTION An open-architecture controller (OAC) requires <b>control</b> <b>programs</b> to be reusable and reconfigurable [3, 6]. However, <b>control</b> <b>programs</b> developed using current <b>control</b> <b>programming</b> paradigm are difficult to meet this requirement due to their hard-coded machine-dependent information that cannot be applied to different configurations. As a result, significant time and costs are required to design, implement and test <b>control</b> <b>programs.</b> In this paper, we propose a generic programming paradigm, called the control plan paradigm, which is based on Nested Finite State Machines (NFSMs) and event-driven mechanisms. This programming paradigm distinguishes machine-dependent specifications and machine-independent specifications in <b>control</b> <b>programs,</b> and localizes the machinedependent behaviors and operations. Such machine-dependent programs can be reused when a new application requires the same configuration, while the machine-independent programs can be reused when an application requires the same high-level behaviors. Localization of machine-dependent programs further enables integration of vendor-neutral products. A <b>control</b> <b>program</b> in the <b>control</b> plan paradigm can also be constructed bottomup by integrating the <b>control</b> <b>programs</b> of different subsystems. The NFSM model, as an extended formal method, facilitates the verification of <b>control</b> <b>programs...</b>|$|R
40|$|We study {{a method}} for synthesizing <b>control</b> <b>programs.</b> The method merges an {{existing}} <b>control</b> <b>program</b> with a <b>control</b> automaton. We have used monadic second order logic over strings to specify the control automata. Specifications are translated into automata by the Mona tool. This yields a new <b>control</b> <b>program</b> restricting {{the behavior of the}} old <b>control</b> <b>program</b> such that the specifications are satisfied. The method is presented through a concrete example...|$|R
40|$|The {{complexity}} of network administration can be simplified by implementing <b>control</b> <b>programs</b> that automatically configure network services. To implement this self-adaptive behaviour we implemented a {{feedback control loop}} in the control plane of a network. An architecture that implements a centralized <b>control</b> <b>program</b> is preferred over a distributed <b>control</b> <b>program,</b> {{as is the case}} in most current state of the art network protocols. OpenFlow is a new standard that supports an architecture that uses a centralized <b>control</b> <b>program</b> and also allows network operators to configure the control plane to their wishes. The programmability of the control plane makes OpenFlow well suited for the implementation of self-adaptive behaviour. We implemented a test bed based on OpenFlow to develop <b>control</b> <b>programs</b> and show how self-adaptive <b>control</b> <b>program...</b>|$|R
40|$|AbstractThe World Health Organization, World Heart Federation, {{and other}} {{organizations}} recommend comprehensive <b>control</b> <b>programs</b> for rheumatic fever (RF) and rheumatic heart disease (RHD). However, advice on components of <b>control</b> <b>programs</b> are simple lists, with little guidance on program structure or priorities. In particular, there are limited recommendations on “stepwise” implementation and few guidelines on which program components should take temporal priority. An evidence-based framework for describing, prioritizing, and implementing comprehensive RF/RHD <b>control</b> <b>programs</b> is needed. A literature review of existing RF/RHD <b>control</b> <b>program</b> recommendations generated a list of program components. Descriptions and analysis of RF/RHD <b>control</b> <b>programs</b> informed temporal prioritizing of component parts. Relevant programmatic research from other vertical disease <b>control</b> <b>programs</b> was reviewed for generalizable implementation experiences. Twenty-five individual components of comprehensive RF/RHD <b>control</b> <b>programs</b> were identified. These fell into “baseline” program requirements (including burden of disease data, treatment guidelines, and human resources) and requirements for providing primary, secondary, and tertiary interventions. Primordial prevention and research priorities were overarching themes. These components were developed into a conceptual framework schema. Existing literature contains valuable lessons on the design and implementation of comprehensive RF/RHD <b>control</b> <b>programs.</b> Fashioning these guidelines and programmatic experiences into a conceptual framework schema benefits clinicians, policy makers, and RHD advocates...|$|R
40|$|The use {{of action}} {{models for the}} {{analysis}} of agent <b>control</b> <b>programs</b> can be useful for two reasons. First, it promises to deliver better tools for the simulation, verification and synthesis of <b>control</b> <b>programs,</b> and second it presents challenging problems for theories of action and knowledge. In this paper we use a theory of actions and knowledge developed elsewhere to analyze <b>control</b> <b>programs</b> for robot navigation tasks. We model both physical and sensing actions and establish conditions under which different <b>control</b> <b>programs</b> are executable and lead the agent to the intended goal. Topics: Temporal and spatial reasoning, Knowledge Representation, Agentoriented programming, Robotics Analysis of Agent Programs using Action Models Abstract. The use of action models {{for the analysis of}} agent <b>control</b> <b>programs</b> can be useful for two reasons. First, it promises to deliver better tools for the simulation, verification and synthesis of <b>control</b> <b>programs,</b> and second it presents challen [...] ...|$|R
5000|$|On 9 August, rebel-aligned al-Manara Media {{reported}} that a private militia run by a [...] "gangster" [...] appointed by Gaddafi controlled Msallata's exits while anti-Gaddafi Msallata <b>residents</b> <b>controlled</b> most of the inner city.|$|R
5000|$|CMS runs as a [...] "guest" [...] {{operating}} {{system in a}} private virtual machine created by the VM <b>control</b> <b>program.</b> The <b>control</b> <b>program</b> plus CMS together create a multi-user time-sharing {{operating system}}.|$|R
40|$|The {{computer-aided}} design process of <b>control</b> <b>programs</b> for the industrial controllers has been investigated. The {{aim is to}} investigation and develop the effective methods and facilities in the {{computer-aided design}} of <b>control</b> <b>programs</b> for the industrial logical controllers. The new structure of <b>control</b> <b>program</b> CAD for programmed logical controllers, new formalized model of the control object, new methods for synthesis of the <b>control</b> <b>programs</b> and also the new methods for verification of the <b>control</b> <b>programs</b> have been developed. The application package "DEMOS-Oborudovanie" has been prepared. The software and methodical materials and also the materials have {{been approved by the}} Scientific-Production Association "Tsentrprogrammsistem". The results have been introduced in the Ulyanovsk Centre of Microelectronics Application. Application field: development of programmed-logical control systemsAvailable from VNTIC / VNTIC - Scientific & Technical Information Centre of RussiaSIGLERURussian Federatio...|$|R
40|$|Background: Tobacco <b>control</b> <b>programs</b> {{that have}} adapted the Centers for Disease Control and Prevention (CDC) Best Practices for a Comprehensive Tobacco <b>Control</b> <b>Program</b> (CTCP) have been {{effective}} in reducing the rates of tobacco use. This paper investigates the effectiveness that Nevada’s tobacco <b>control</b> <b>programs</b> have had on teen tobacco use and rates to date and examines changes to programs given reduced Master Settlement Agreement (MSA) funding. Methods: Aggregate data from the Nevada Department of Health and Human Services/Fund for a Healthy Nevada program was analyzed {{to determine if the}} tobacco <b>control</b> <b>programs</b> adapted the CDC’s Best Practices for a CTCP. Findings: The rates of teen tobacco use have declined steadily from the implementation of the MSA funded tobacco <b>control</b> <b>programs</b> in 2001 until the funding was reduced in 2010. Findings also show that CTCP programs have reduced their target goals due to reduced funding. Conclusions: Rates of tobacco consumption among teenage youth have shown a steady decline in Nevada since the implementation of effective tobacco <b>control</b> <b>programs,</b> but future funding practices jeopardize ongoing success of the programs...|$|R
40|$|This paper {{presents}} a model based {{method of testing}} and verification of Java concurrent <b>control</b> <b>programs</b> aimed for embedded devices. Threads of the <b>control</b> <b>program</b> are mapped onto simulation processes that can be executed using discrete model-time concept. The computer surrounding environment, including the controlled device itself, is represented by a simulation model as well. Both the <b>control</b> <b>program</b> model and the device model are written as well as executed using the J-Sim simulation tool. The method allows development of the <b>control</b> <b>program</b> even before the HW platform is developed, including tests of its behavior that {{can be difficult to}} perform using a real controlled device...|$|R
40|$|In this paper, {{we propose}} a layered control {{architecture}} called “CBR augmented GP ” to evolve robust <b>control</b> <b>programs</b> for humanoid robots. The key idea in our {{approach is to}} represent target task with abstract behaviors by Genetic Programming in simplified simulation and get a prototype of the <b>control</b> <b>program</b> then interpret it with Case-Based Reasoning (CBR) {{in the real world}} environments. Accordingly, our proposed approach consists of two stages: the evolution stage and the adaptation stage. In the first stage, the prototype of the <b>control</b> <b>program</b> is evolved based on abstract behaviors in a highly simplified simulation. In the second stage, the best <b>control</b> <b>program</b> is applied to a physical robot thereby adapting it to the real world environments by using CBR. Experimental results show that this approach can generate robust <b>control</b> <b>programs</b> that can easily overcome gaps between simplified simulation and real world...|$|R
40|$|A <b>control</b> <b>program</b> is {{understood}} as a reactive component that maintains a continuous interaction with its environment. A formal criterion for the correctness of a <b>control</b> <b>program</b> is given. This criterion can be applied in reverse for deriving a <b>control</b> <b>program</b> from properties of the whole control system. This is illustrated by an example of two conveyor belts. The formal reasoning {{is based on the}} weakest precondition calculus. Action systems are used for modeling the control system. ...|$|R
40|$|It is {{the policy}} of the Marshall Space Flight Center (MSFC) that {{employees}} {{be given the opportunity to}} develop their individual skills and realize their full potential consistent with their selected career path and with the overall Center's needs and objectives. The MSFC <b>Program</b> <b>Control</b> Development <b>Program</b> has been designed to assist individuals who have selected <b>Program</b> <b>Control</b> or <b>Program</b> Analyst <b>Program</b> <b>Control</b> as a career path to achieve their ultimate career goals. Individuals selected to participate in the MSFC <b>Program</b> <b>Control</b> Development <b>Program</b> will be provided with development training in the various <b>Program</b> <b>Control</b> functional areas identified in the NASA <b>Program</b> <b>Control</b> Model. The purpose of the MSFC <b>Program</b> <b>Control</b> Development <b>Program</b> is to develop individual skills in the various <b>Program</b> <b>Control</b> functions by on-the-job and classroom instructional training on the various systems, tools, techniques, and processes utilized in these areas...|$|R
40|$|An {{efficient}} quality <b>control</b> <b>program</b> {{should lead}} {{to the production of}} high quality seeds. Consequently, a series of technical and administrative procedures must be adopted {{in a way that does}} not compromise this objective. Considering that, in applied terms, external control becomes less important as internal <b>control</b> <b>programs</b> advance technologically, this work emphasizes the principle factors that should be considered in the implantation of a seed quality <b>control</b> <b>program,</b> such as: work groups, physical structure and procedures to initiate the program...|$|R
40|$|A {{reactive}} system {{is characterized by}} a <b>control</b> <b>program</b> that interacts with an environment (or <b>controlled</b> <b>program).</b> The <b>control</b> <b>program</b> monitors the environment and reacts to significant events by sending commands to the environment. This structure is quite general. Not only are most embedded real time systems {{reactive system}}s, but so are monitoring and debugging systems and distributed application management systems. Since reactive systems are usually long running and may control physical equipment, fault tolerance is vital. The research tries to understand the principal issues of fault tolerance in real time reactive systems and to build tools that allow a programmer to design reliable, real time reactive systems. In order to make real time reactive systems reliable, several issues must be addressed: (1) How can a <b>control</b> <b>program</b> be built to tolerate failures of sensors and actuators. To achieve this, a methodology was developed for transforming a <b>control</b> <b>program</b> that references physical value into one that tolerates sensors that can fail and can return inaccurate values; (2) How can the real time reactive system be built to tolerate failures of the <b>control</b> <b>program.</b> Towards this goal, whether the techniques presented can be extended to real time reactive systems is investigated; and (3) How can the environment be specified {{in a way that is}} useful for writing a <b>control</b> <b>program.</b> Towards this goal, whether a system with real time constraints can be expressed as an equivalent system without such constraints is also investigated...|$|R
40|$|CDC 22 ̆ 0 ac 2 ̆ 122 s Best Practices for Comprehensive Tobacco <b>Control</b> <b>Programs</b> [...] 2014 is an evidence- based {{guide to}} help states plan and {{establish}} comprehensive tobacco <b>control</b> <b>programs.</b> This edition updates Best Practices for Comprehensive Tobacco <b>Control</b> <b>Programs</b> [...] 2007. The 2014 edition describes an integrated programmatic structure for implementing interventions {{proven to be}} effective and provides the recommended level of state investment to reach these goals and to reduce tobacco use in each state. Suggested citation: Centers for Disease Control and Prevention. Best Practices for Comprehensive Tobacco <b>Control</b> <b>Programs</b> [...] 2014. Atlanta: U. S. Department of Health and Human Services, Centers for Disease Control and Prevention, National Center for Chronic Disease Prevention and Health Promotion, Office on Smoking and Health, 2014. Executive summary [...] Introduction [...] Section A: Components of a comprehensive tobacco <b>control</b> <b>program</b> [...] I. State and community interventions [...] II. Mass-reach health communication interventions [...] III. Cessation interventions [...] IV. Surveillance and evaluation [...] V. Infrastructure, administration, and management [...] Section B: Recommended funding levels for all 50 states and the District of Columbia [...] Section C: Recommended funding levels, by state [...] Appendix A: Funding recommendation formulations [...] Appendix B: Program and policy recommendations for comprehensive tobacco <b>control</b> <b>programs</b> [...] Appendix C: National prevention strategy recommendations [...] Appendix D: Guidelines for comprehensive local tobacco <b>control</b> <b>programs</b> [...] Appendix E: Data sources. Prevention and ControlChronic Diseas...|$|R
5000|$|At its launch, the 3270 PC {{used the}} 3270 PC <b>Control</b> <b>Program</b> as its {{operating}} system. PC DOS 2.0 (and later 2.1) could {{run as a}} task under the <b>Control</b> <b>Program.</b> Only one PC DOS task could be run at any given time, but in parallel with this, the <b>Control</b> <b>Program</b> could run up to four mainframe sessions. The <b>Control</b> <b>Program</b> also provided a basic windowing environment, with up to seven windows; besides the four mainframe and one DOS session, it also provided two notepads. The notepads {{could be used to}} copy text from the PC DOS session to the mainframe sessions but not vice versa. Given the small size of the character display, a review by PC Magazine concluded that the windowing features were hardly useful, and the notepads even less so. The <b>Control</b> <b>Program</b> was also described as a [...] "memory hog" [...] in this review, using about 200 KB of RAM in a typical configuration. More useful were the specialized PC DOS file transfer utilities that were available (called simply SEND and RECEIVE), which allowed files to be exchanged with the mainframe and provided ASCII/EBCDIC conversion. The list prices for the <b>Control</b> <b>Program</b> and file transfer utilities were $300 and $600, respectively. At the launch of the 3270 PC, the <b>Control</b> <b>Program</b> was the distinguishing software feature between a 3270 PC and an XT with an added 3278 board.|$|R
40|$|A {{socio-economic}} {{evaluation of}} the vampire bat <b>control</b> <b>program</b> in Latin America was completed. A stratified random sample of 178 cattleowners in Nicaragua were personally interviewed to obtain primary production data on the 117 farms involved in the <b>control</b> <b>program</b> and 61 farms which {{did not participate in}} the <b>control</b> <b>program.</b> Annual beef animal weight loss from vampire bat molesting was estimated to be 39. 7 kilograms per head, and annual milk production loss was estimated at 69 gallons per head. Sixteen known cases of people having been bitten by vampire bats on the 178 ranches were reported. No people were bitten and no cattle died from vampire bat rabies after the <b>control</b> <b>program</b> using diphacinone was implemented on these farms...|$|R
50|$|Most {{industrial}} lasers {{have the ability}} to pulse or cut CW (Continuous Wave) under NC (numerical <b>control)</b> <b>program</b> <b>control.</b>|$|R
40|$|Abstract—This paper {{presents}} the methods which make a design process of control system efficient. The Real-Time control framework makes writing Real-Time <b>control</b> <b>programs</b> easy. Real-Time <b>control</b> <b>programs</b> are generated from simulation program automatically. The {{idea of an}} object model and the Factory Method pattern are used for automatic generation of Real-Time <b>control</b> <b>program.</b> Separation of platform dependent parts makes non Real-Time parts can be independent from platform. We develop a platform integrated environment of the simulation and the Real-Time control for Control system using above methods. I...|$|R
40|$|This paper {{presents}} a generic programmingparadigm, called the control plan paradigm, based on Nested Finite State Machines (NFSMs) and event-driven mechanisms. In this paradigm, a <b>control</b> <b>program</b> {{can be divided}} into two non-overlapping parts: behavior and operation specifications. This division allows machine-dependent and machine-independent <b>control</b> <b>programs</b> to be designed and implemented independently of each other, and integrated when an application program is constructed. Our evaluation on an open-architecture machine controller testbed shows that such programming paradigm improves significantly the reconfigurability and reusability of <b>control</b> <b>programs...</b>|$|R
5000|$|It {{included}} a main program {{known as the}} <b>Control</b> <b>Program</b> which offered a menu driven interface on the assorted dumb terminals which existed at the time. The <b>Control</b> <b>Program</b> communicated with separate [...] "Services" [...] like the Mail Server, Calendar Server, File Server (for documents). There was also a Word Processor and a data management program which was also accessible from the <b>Control</b> <b>Program.</b> In 1985, DataGeneral announced a complementary product, TEO (Technical Electronic Office), focused on the office automation needs of engineering professionals.|$|R
40|$|Abstract. Cystic hydatidosis/echinococcosis is an {{important}} zoonosis caused by the tapeworm Echinococcus granulosus. Hydatidosis is a serious parasitic disease in Uruguay, and in 1991 a new national <b>control</b> <b>program</b> was implemented by the national commission against hydatidosis (CHLCH). In 1991 (before the <b>control</b> <b>program),</b> farm and town dogs were examined for the prevalence of the parasite in Tacuarembó, Uruguay, using fecal samples of farm dogs after an arecoline purgation and samples of small intestine of town dogs obtained by necropsy. The prevalence of E. granulosus was 23 and 4 % in farm and town dogs, respectively. In order to evaluate {{the impact of the}} <b>control</b> <b>program,</b> two surveys on ovine hydatidosis were carried out in Tacuarembo ́ before and during the national <b>control</b> <b>program.</b> Sheep were examined in 1991 – 1992 (before the <b>control</b> <b>program)</b> and 1999 (during the <b>control</b> <b>program).</b> Both prevalence and intensity of E. granulosus infection increased with age in both 1991 – 1992 and 1999. The prevalence of ovine hydatidosis was 41. 6 and 8. 5 % in 1991 – 1992 and 1999, respectively. The prevalence of fertile cysts in sheep more than 4 years old was 7. 3 % and 2. 3 % in 1991 – 1992 and 1999, respectively. The remarkable decrease...|$|R
5000|$|Professional education/liaison for {{community-based}} cancer <b>control</b> <b>programs</b> ...|$|R
5000|$|Ensure malaria <b>control</b> <b>programs</b> {{incorporate}} selected {{best practices}} ...|$|R
5000|$|Director, National Rabies <b>Control</b> <b>Program,</b> CDC, USPHS, 1954-64 ...|$|R
5000|$|... #Subtitle level 3: Electronic Product Radiation <b>Control</b> <b>Program</b> ...|$|R
40|$|Outline: • Available {{options for}} the Bovine TB (BTB) <b>Control</b> <b>Program</b> • Current {{measures}} and status of the USA TB <b>Control</b> <b>Program</b> • Obstacles to the eradication efforts • Research findings and their implications in the current eradication efforts • Our laboratory research activities: current and future direction...|$|R
40|$|Abstract: Present {{work is a}} part of the ACC {{autonomous}} car project. This paper will focus on the <b>control</b> <b>program</b> architecture. To design this architecture we will start from the human driver behavior model. Using this model we have constructed a three level <b>control</b> <b>program.</b> Preliminary results are presented...|$|R
40|$|Approved {{for public}} release; {{distribution}} unlimited. A system is proposed which will support computer gaming in real-time. This system will, {{when combined with}} the user's <b>Control</b> <b>Program,</b> monitor all of the functions necessary to provide real-time man/machine interaction with the game. The formal definition of a <b>programming</b> language (RTGS <b>Control</b> <b>Program</b> Commang Language) is given; this language, supplemented by Fortran IV and IBM OS/ 360 Assembler Language is used for coding the user's <b>Control</b> <b>Program.</b> Plans for implementation on an IBM System/ 360 Model 67 are discussed and a sample program is given. [URL]...|$|R
40|$|These {{mastitis}} control {{guidelines were}} prepared by UNL personnel {{based on current}} literature and experience with the Nebraska mastitis <b>control</b> <b>program,</b> the demonstration herds, and many on-site dairy farm evaluations. This information will help producers {{and others in the}} dairy industry to understand, establish and maintain a comprehensive mastitis <b>control</b> <b>program.</b> Recommendations and procedures presented in the guidelines will allow the producer to develop an effective mastitis <b>control</b> <b>program.</b> When the recommendations are coupled with a conscientious and dedicated attitude, the result will be less mastitis and more better-quality milk at a lower production cost...|$|R
40|$|This paper {{explores the}} role of public opinion in a {{landmark}} shift in the federal predator <b>control</b> <b>program.</b> In 1963, the Leopold Committee recommended extensive reform in the federal predator <b>control</b> <b>program,</b> predicting that growing {{public support for the}} environmental movement would force such a move if the government did not initiate a change. In the years following the publication of the Leopold Report, the U. S. Division of Wildlife Services reformed its predator <b>control</b> <b>program</b> and tried to improve its public image. Meanwhile, both environmentalists and ranchers fought to control public opinion about the issue. The 1972 ban on predacides (poisons for predators) in federal predator <b>control</b> <b>programs</b> resulted as much from the environmentalists’ ability to control public opinion as from the changing scientific understanding of predators...|$|R
40|$|Graduation date: 1982 A <b>control</b> <b>program</b> {{restricting the}} use of second {{generation}} cephalosporins was evaluated. A retrospective cephalosporin use review was conducted at two large teaching hospitals; the Veterans' Administration Medical Center (VAMC) and the Oregon Health Sciences University (OHSU). A <b>control</b> <b>program</b> restricting {{the use of}} second generation cephalosporins was in operation at the VAMC. Elements reviewed included the number of cephalosporin orders, number of grams used, and the total cephalosporin expenditures. The appropriateness of cephalosporin selection and dosing was assessed. The restrictiveness of the <b>control</b> <b>program</b> was assessed by examining the selection of antimicrobials based on clinical isolate data. Results showed that the <b>control</b> <b>program</b> did not prevent {{the selection of the}} most appropriate cephalosporin and was associated with appropriate selection of second generation cephalosporins. The results also showed that the more extensive use of second generation cephalosporins at the OHSU was inappropriate and therefore did not reflect a need for these agents. This study suggests that a qualitative assessment of cephalosporin use contributes significant information to the evaluation of a <b>control</b> <b>program...</b>|$|R
30|$|It {{turns out}} Las Vegas hotels and casinos are not {{responsible}} for the city’s large water use: most of it is used by <b>residents.</b> <b>Controlling</b> water use in Las Vegas is tantamount to control residential demand as retail and tourism businesses have implemented efficiency regulations.|$|R
