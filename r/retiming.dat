620|3|Public
500|$|Another VFX {{supervisor}} from Zoic Studios, Andrew Orloff, {{believed the}} episode's special effects were {{possibly the most}} difficult of the season. He wrote, [...] "Originally, {{it was supposed to be}} a practical effect but they couldn't get it to fall in a natural way, so what we had to do was shoot the practical elements in pieces and we put them all together and timed all those plates and ended up rebuilding a significant part of it and tying it all together in CG. So we took a cyberscan of the guy's body, and on top of all the practical elements we used as a base, we had a matte painting, a reveal matte painting of the cracks that ran through the body, 3D particles of large chunks of ash falling out, 3D particles of small ash bits floating down, residual dust flying off of it and, at one point, his head falls off and crashes to the ground as ash. So we had to do a full-CG head and tumble it down the body. That was pretty complicated and entailed lots of R there was 2D work in After Effects, tracking, <b>retiming,</b> we did a lot of CG lighting for the body parts in Maya/mental ray and all of the particles were a combination of Maya software, and rendered in Maya/mental ray." ...|$|E
50|$|<b>Retiming</b> is the {{technique}} of moving the structural location of latches or registers in a digital circuit to improve its performance, area, and/or power characteristics {{in such a way}} that preserves its functional behavior at its outputs. <b>Retiming</b> was first described by Charles E. Leiserson and James B. Saxe in 1983.|$|E
5000|$|... 3R (optical regenerator), {{an optical}} {{communications}} repeater that performs reamplification, reshaping, and <b>retiming</b> ...|$|E
5000|$|... 3R : in {{addition}} to reamplification and reshaping, <b>retiming</b> of data pulse is done.|$|E
50|$|For solving such problem, {{we could}} perform <b>retiming</b> on {{original}} DFG {{to let the}} every path with the delay larger than J.|$|E
50|$|Increasing {{the number}} of {{registers}} allows optimization of the circuit through <b>retiming</b> to reduce the clock period of the circuit. In the best case, the clock period can be reduced {{by a factor of}} C. Reducing the clock period of the circuit reduces latency and increases throughput. Thus, for computations that can be multi-threaded, combining C-slowing with <b>retiming</b> can increase the throughput of the circuit, with little, or in the best case, no increase in latency.|$|E
50|$|The {{most common}} use of <b>retiming</b> is to {{minimize}} the clock period. A simple technique to optimize the clock period is {{to search for the}} minimum feasible period (e.g. using binary search).|$|E
50|$|Animation tools {{include a}} {{timeline}} for applying filters, an exposure sheet, a keyframer to move images around, {{the ability to}} paint with animated brushes, a batch processor, pulldowns and <b>retiming,</b> and other items of use to animators and motion graphic artists.|$|E
50|$|In {{order to}} save power within the module, optical modules have been made that used the digital {{interface}} definition, such as the CEI, but without <b>retiming</b> the signals within the module. These modules delivered an analog {{connection between the two}} ends.|$|E
5000|$|The initial {{formulation}} of the <b>retiming</b> problem as described by Leiserson and Saxe is as follows. Given a directed graph [...] whose vertices represent logic gates or combinational delay elements in a circuit, assume there is a directed edge [...] between two elements that are connected directly or through one or more registers. Let the weight of each edge [...] be the number of registers present along edge [...] in the initial circuit. Let [...] be the propagation delay through vertex [...] The goal in <b>retiming</b> is to compute an integer lag value [...] for each vertex such that the retimed weight [...] of every edge is non-negative. There is a proof that this preserves the output functionality.|$|E
5000|$|Professor Friedman has {{published}} almost 500 papers and is co-inventor of 13 patents {{in the fields}} of high speed and low power CMOS design techniques, interconnect and substrate noise, pipelining and <b>retiming,</b> three-dimensional integration, and the theory and application of power and synchronous clock distribution networks.|$|E
50|$|Traffic shaping is the <b>retiming</b> (delaying) of packets (or frames) {{until they}} meet {{specified}} bandwidth and or burstiness limits. Since such delays involve queues that are nearly always finite and, once full, excess traffic is nearly always dropped (discarded), traffic shaping nearly always implies traffic policing as well.|$|E
50|$|The Irlen Method uses {{coloured}} overlays and tinted lenses in {{the form}} of glass or contact lenses. The method is intended to reduce or eliminate perceptual processing errors; it is claimed the resultant <b>retiming</b> of visual signals in the brain improves the reading difficulties associated with scotopic sensitivity syndrome.|$|E
50|$|In {{addition}} to combinational logic, AIGs {{have also been}} applied to sequential logic and sequential transformations. Specifically, the method of structural hashing was extended to work for AIGs with memory elements (such as D-type flip-flops with an initial state,which, in general, can be unknown) resulting in a data structure that is specifically tailored for applications related to <b>retiming.</b>|$|E
50|$|<b>Retiming</b> {{has found}} {{industrial}} use, albeit sporadic. Its primary drawback {{is that the}} state encoding of the circuit is destroyed, making debugging, testing, and verification substantially more difficult. Some retimings may also require complicated initialization logic to have the circuit start in an identical initial state. Finally, the changes in the circuit's topology have consequences in other logical and physical synthesis steps that make design closure difficult.|$|E
50|$|The digipeater {{is used in}} {{channels}} that transmit data by binary digital signals, in which the data {{is in the form}} of pulses with only two possible values, representing the binary digits 1 and 0. A digital repeater amplifies the signal, and it also may retime, resynchronize, and reshape the pulses. A repeater that performs the <b>retiming</b> or resynchronizing functions may be called a regenerator.|$|E
50|$|Clock skew {{scheduling}} is {{a related}} technique for optimizing sequential circuits. Whereas <b>retiming</b> relocates the structural {{position of the}} registers, clock skew scheduling moves their temporal position by scheduling the arrival time of the clock signals. The lower bound of the achievable minimum clock period of both techniques is the maximum mean cycle time (i.e. the total combinational delay along any path divided {{by the number of}} registers along it).|$|E
50|$|Ongoing {{research}} includes {{implementing a}} modern logic synthesis system completely based on AIGs. The prototype called ABC features an AIG package, several AIG-based synthesis and equivalence-checking techniques, {{as well as}} an experimental implementation of sequential synthesis. One such technique combines technology mapping and <b>retiming</b> in a single optimization step. These optimizations can be implemented using networks composed of arbitrary gates, but the use of AIGs makes them more scalable and easier to implement.|$|E
50|$|C-slowing is a {{technique}} {{used in conjunction with}} <b>retiming</b> to improve throughput of a digital circuit. Each register in a circuit is replaced by a set of C registers (in series). This creates a circuit with C independent threads, as if the new circuit contained C copies of the original circuit. A single computation of the original circuit takes C times as many clock cycles to compute in the new circuit. C-slowing by itself increases latency, but throughput remains the same.|$|E
5000|$|An injection-locked {{oscillator}} (ILO) {{is usually}} based on cross-coupled LC oscillator. It has been employed for frequency division [...] or jitter reduction in PLL, with {{the input of}} pure sinusoidal waveform. It was employed in continuous mode clock and data recovery (CDR) or clock recovery to perform clock restoration from the aid of either preceding pulse generation circuit to convert non-return-to-zero (NRZ) data to pseudo-return-to-zero (PRZ) format or nonideal <b>retiming</b> circuit residing at the transmitter side to couple the clock signal into the data. Recently, the ILO was employed for burst mode clock recovery scheme.|$|E
50|$|Unfolding {{transformation}} can unravel hidden concurrency {{in digital}} signal processing systems described by DFGs.Therefore, unfolding {{can be used to}} increase the throughput of the system by duplicating the functional blocks but without increasing the delay element. If we properly handle the delay on the path, such as <b>retiming,</b> we could increase the throughput as J times, which is the number of duplication on each functional block. In such transform technique, it could be applied to generate world-parallel architectures {{that can be used for}} high-speed or low-power applications. Hence, unfolding is the good technique to leverage between area, throughput, and power-consumption.|$|E
50|$|Marshgate Junction to {{the north}} of Doncaster station forms the {{junction}} of the lines from the station to the double track to Leeds, York (ECML) and Thorne (thence Hull, Scunthorpe and Grimsby). The new layout entailed considerable changes from the then existing layout and it was estimated that the junction remodelling would take nine months of weekend work. A decision was made to carry this out during five weeks' continuous work in the spring of 1979 when the operation of trains through the area was drastically reduced and the Leeds Line was closed for a period of time. Although there were some inevitable diversions and <b>retiming</b> of trains, disruption of services was kept to a minimum and the project was completed on schedule.|$|E
50|$|The {{technique}} uses a {{directed graph}} where the vertices represent asynchronous combinational blocks and the directed edges represent {{a series of}} registers or latches (the number of registers or latches can be zero). Each vertex has a value corresponding to the delay through the combinational circuit it represents. After doing this, one can attempt to optimize the circuit by pushing registers from output to input and vice versa - much like bubble pushing. Two operations can be used - deleting a register from each input of a vertex while adding a register to all outputs, and conversely adding a register to each input of vertex and deleting a register from all outputs. In all cases, if the rules are followed, the circuit {{will have the same}} functional behavior as it did before <b>retiming.</b>|$|E
50|$|Charles Eric Leiserson is a {{computer}} scientist, specializing {{in the theory of}} parallel computing and distributed computing, and particularly practical applications thereof. As part of this effort, he developed the Cilk multithreaded language. He invented the fat-tree interconnection network, a hardware-universal interconnection network used in many supercomputers, including the Connection Machine CM5, for which he was network architect. He helped pioneer the development of VLSI theory, including the <b>retiming</b> method of digital optimization with James B. Saxe and systolic arrays with H. T. Kung. He conceived of the notion of cache-oblivious algorithms, which are algorithms that have no tuning parameters for cache size or cache-line length, but nevertheless use cache near-optimally. He developed the Cilk language for multithreaded programming, which uses a provably good work-stealing algorithm for scheduling. Leiserson coauthored the standard algorithms textbook Introduction to Algorithms together with Thomas H. Cormen, Ronald L. Rivest, and Clifford Stein.|$|E
5000|$|The {{card punch}} had a maximum rate of 150 cards per minute. Timing was quite {{critical}} throughout {{the operation of}} the card punch, the card reader and the printer, all being based on electromechanical principles. The basic card punch mechanism was manufactured by Bull, a French company which owned patents on 80 column punch card machines. The machine came in two versions, the P147 and the P67, the main difference being electromagnetic clutch or a solenoid operated mechanical [...] "dog" [...] clutch to initiate a punch cycle. Since many gears, electrical contact cams were affixed to the main shaft with taper pins, the P 67 with its severe stopping dog clutch would cause timing loss more frequently than the P 147. Most emergency maintenance time was spent replacing worn and damaged taper pins and <b>retiming</b> the machine. The card punch had a preread station, a punch station and a checkread station. The machine could be quite difficult to maintain and required much skill to troubleshoot and maintain. The machine cycle was oddly divided into 420 [...] "points" [...] or [...] "Bull degrees".|$|E
50|$|Traditional {{transport}} networks {{are made of}} optical fiber-based links between telecommunications offices, where multiple wavelengths are multiplexed to increase {{the capacity of the}} fiber. The wavelengths are terminated on electronic devices called transponders, undergoing an optical-to-electrical conversion for signal Reamplification, Reshaping, and <b>Retiming</b> (3R). Inside a telecommunications office, the signals are then handled to and switched by a transport switch (aka optical cross-connect or optical switch) and either are dropped at that office, or directed to an outgoing fiber link where they are again carried as wavelengths multiplexed into that fiber link towards the next telecommunications office. The act of going through Optical-Electrical-Optical (O-E-O) conversion through a telecommunications office causes the network to be considered opaque. When the incoming wavelengths do not undergo an optical-to-electrical conversion and are switched through a telecommunications office in the optical domain using all-optical switches (also called photonic cross-connect, optical add-drop multiplexer, or Reconfigurable Optical Add-Drop Multiplexer (ROADM) systems), the network is considered to be transparent. Hybrid schemes that leverage optical bypasses and provide limited O-E-O conversions at key locations across the network, are referred to as translucent networks.|$|E
5000|$|Another VFX {{supervisor}} from Zoic Studios, Andrew Orloff, {{believed the}} episode's special effects were {{possibly the most}} difficult of the season. He wrote, [...] "Originally, {{it was supposed to be}} a practical effect but they couldn't get it to fall in a natural way, so what we had to do was shoot the practical elements in pieces and we put them all together and timed all those plates and ended up rebuilding a significant part of it and tying it all together in CG. So we took a cyberscan of the guy's body, and on top of all the practical elements we used as a base, we had a matte painting, a reveal matte painting of the cracks that ran through the body, 3D particles of large chunks of ash falling out, 3D particles of small ash bits floating down, residual dust flying off of it and, at one point, his head falls off and crashes to the ground as ash. So we had to do a full-CG head and tumble it down the body. That was pretty complicated and entailed lots of R&D: there was 2D work in After Effects, tracking, <b>retiming,</b> we did a lot of CG lighting for the body parts in Maya/mental ray and all of the particles were a combination of Maya software, and rendered in Maya/mental ray." ...|$|E
40|$|<b>Retiming,</b> {{introduced}} by Leiserson and Saxe, {{is a powerful}} transformation of circuits that preserves functionality and improves performance. The ASTRA algorithm proposed an alternative view of <b>retiming</b> using the equivalence between <b>retiming</b> and clock skew optimization and also presented a fast algorithm for minimum period (minperiod) <b>retiming.</b> Since minperiod <b>retiming</b> may significantly {{increase the number of}} flip-flops in the circuit, minimum area (minarea) <b>retiming</b> is an important problem. Minarea <b>retiming</b> is a much harder problem than minperiod <b>retiming,</b> and previous techniques were not capable of handling large circuits in a reasonable time. This work defines the relationship between the Leiserson–Saxe and the ASTRA approaches and utilizes it for efficient minarea <b>retiming</b> of large circuits. The new algorithm, Minaret, uses the same basis as the Leiserson–Saxe approach. The underlying philosophy of the ASTRA approach is incorporated {{to reduce the number of}} variables and constraints generated in the problem. This allows minarea <b>retiming</b> of circuits with over 56 000 gates in under 15 min...|$|E
40|$|A new {{approach}} for fast <b>retiming</b> of level-clocked circuits is presented here. The method {{relies on the}} relation between clock skew and <b>retiming,</b> and computes the optimal skew solution to translate it to a <b>retiming.</b> Since clock skew optimization operates on the latches (rather than the gates as in conventional <b>retiming),</b> it is much faster because of a smaller problem size; the translation to the <b>retiming</b> solution is computationallycheap. The minimumperiod <b>retiming</b> {{for each of the}} ISCAS 89 circuits was obtained within minutes by this algorithm...|$|E
40|$|<b>Retiming</b> is an {{optimization}} technique for synchronous circuits introduced by Leiserson and Saxe in 1983. Although powerful, <b>retiming</b> {{is not very}} widely used {{because it does not}} handle in a satisfying way circuits whose registers have load enable, synchronous and asynchronous set/clear inputs. We propose an extension of <b>retiming</b> whose basis is the characterization of registers into register classes. The new approach called multiple-class <b>retiming</b> handles circuits with an arbitrary number of register classes. We present results on a set of industrial FPGA designs showing the effectiveness and efficiency of multiple-class <b>retiming.</b> le a) le c) EN EN load enable transformation forward <b>retiming</b> forward <b>retiming</b> le b) le d) EN...|$|E
40|$|For {{sequential}} circuits with given initial states, new equivalent initial {{states must}} be computed for <b>retiming,</b> which unfortunately is NP-hard. In this {{paper we propose}} a novel polynomial time algorithm for optimal FPGA mapping with forward <b>retiming</b> to minimize the clock period with guaranteed initial state computation. It enables a new methodology of separating forward <b>retiming</b> from backward <b>retiming</b> to avoid time-consuming iterations between <b>retiming</b> and initial state computation. Our algorithm compares very favorably with both of the conventional approaches of separate mapping followed by <b>retiming</b> [1, 8] and the recent approaches of combined mapping with <b>retiming</b> [12, 2]. It is also applicable to circuits with partial initial state assignment. 1 Introduction <b>Retiming</b> is a well known technique to reduce the clock period by repositioning flipflops (FFs) in sequential circuits originally proposed by Leiserson and Saxe [8]. Many studies have been done on combining <b>retiming</b> with logi [...] ...|$|E
40|$|Abstract. Embedded {{systems have}} strict timing and code size requirements. <b>Retiming</b> {{is one of}} the most {{important}} optimization techniques to improve the execution time of loops by increasing the parallelism among successive loop iterations. Traditionally, <b>retiming</b> has been applied at instruction level to reduce cycle period for single loops. While multi-dimensional (MD) <b>retiming</b> can explore the outer loop parallelism, it introduces large overheads in loop index generation and code size due to loop transformation. In this paper, we propose a novel approach, that combines iterational <b>retiming</b> with instructional <b>retiming</b> to satisfy any given timing constraint by achieving full parallelism for iterations in a partition with minimal code size. The experimental results show that combining iterational <b>retiming</b> and instructional <b>retiming,</b> we can achieve 37 % code size reduction comparing to applying iteration <b>retiming</b> alone. ...|$|E
40|$|<b>Retiming</b> is a {{well known}} {{technique}} for sequential circuit optimization originally proposed by Leiserson and Saxe [LeRS 83, LeSa 91]. For designs with given initial states, however, new equivalent initial states must be computed for <b>retiming,</b> which unfortunately is NP-hard. In this {{paper we propose a}} novel polynomial time algorithm for optimal FPGA mapping with forward <b>retiming</b> to minimize the clock period with guaranteed initial state computation. It enables a new methodology of separating forward <b>retiming</b> from backward <b>retiming</b> to avoid timeconsuming iterations between <b>retiming</b> and initial state computation. Comparing with the clock period computed by our algorithm, the clock period by conventional approaches of separate mapping followed by <b>retiming</b> [CoDi 94, LeSa 91] is 20. 2 % larger, but the clock period by recent approaches of optimal mapping with <b>retiming</b> [PaLi 96, PaLi 99, CoWu 96 a] is 2. 8 % smaller. However, many of the optimal mapping with <b>retiming</b> solutions by [PaLi 96, PaLi 99, CoWu 96 a] cannot compute an equivalent initial state by SIS [SeSL 92] based on the state-of-the-art algorithm of equivalent initial state computation for <b>retiming</b> in [ToBr 93]. Our approach is also applicable to circuits with partial initial state assignment. ...|$|E
40|$|International Conference on Embedded and Ubiquitous Computing, EUC 2005, Nagasaki, 6 - 9 December 2005 Embedded {{systems have}} strict timing and code size requirements. <b>Retiming</b> {{is one of}} the most {{important}} optimization techniques to improve the execution time of loops by increasing the parallelism among successive loop iterations. Traditionally, <b>retiming,</b> has been applied at instruction level to reduce cycle period for single loops. While multi-dimensional (MD) <b>retiming</b> can explore the outer loop parallelism, it introduces large overheads in loop index generation and code size due to loop transformation. In this paper, we propose a novel approach, that combines iterational <b>retiming</b> with instructional <b>retiming</b> to satisfy any given timing constraint by achieving full parallelism for iterations in a partition with minimal code size. The experimental results show that combining iterational <b>retiming</b> and instructional <b>retiming,</b> we can achieve 37 % code size reduction comparing to applying iteration <b>retiming</b> alone. Department of Computin...|$|E
40|$|For {{sequential}} circuits with given initial states, new equivalent initial {{states must}} be computed for <b>retiming,</b> which unfortunately is NP-hard. In this paper, {{we present a}} novel polynomial time algorithm for optimal {{field programmable gate array}} (FPGA) mapping with forward <b>retiming</b> to minimize the clock period with efficient initial state computation. It considers forward <b>retiming,</b> initial state computation and mapping simultaneously. Our algorithm enables a new methodology of separating forward <b>retiming</b> from backward <b>retiming.</b> Since we guarantee to compute an optimal mapping with forward <b>retiming</b> solution, backward <b>retiming</b> can be performed as a preprocessing to try to push flip-flops (FF's) to primary inputs with consideration of only initial state computation. Thus, we can avoid the time-consuming iterations between <b>retiming</b> for clock period minimization and initial state computation. This algorithm compares very favorably to both conventional approaches of mapping followed by separate <b>retiming</b> and recent approaches of combined mapping with <b>retiming,</b> but without consideration of initial state computation [1], [2]. Our results show that our algorithm can reduce the clock period by 17. 5 % over conventional approaches of separate mapping with <b>retiming.</b> On the other hand, our algorithm can guarantee efficient initial state computation in the mapped and retimed circuits with only 2. 8 % increase in clock period over the optimal mapping with general <b>retiming</b> solutions, while the initial state computation for the latter solutions may need prohibitively long runtime for designs with over several hundred FF's...|$|E
40|$|Multi-rate {{digital signal}} {{processing}} (DSP) algorithms are often modeled with synchronous dataflow graphs (SDFGs). A lower iteration period implies a faster execution of a DSP algorithm. <b>Retiming</b> is a simple but efficient graph transformation technique for performance optimization, which can decrease the iteration period without affecting functionality. In this paper, we deal with two problems: feasible <b>retiming</b> — <b>retiming</b> an SDFG to meet a given iteration period constraint; and optimal <b>retiming</b> — <b>retiming</b> an SDFG to achieve the smallest iteration period. We present a novel algorithm for feasible <b>retiming</b> and based on that one, a new algorithm for optimal <b>retiming,</b> and prove their correctness. Both methods work directly on SDFGs, without explicitly converting them to their equivalent homogeneous SDFGs (HSDFGs). Experimental results show that our methods give a significant improvemen...|$|E
