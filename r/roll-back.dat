397|27|Public
5|$|Ousted {{from the}} CIM in 1938, and the NWP in 1947 over policy disputes, Stevens became vice {{president}} of the Lucy Stone League in 1951, of which she had been a member since the 1920s. She fought the <b>roll-back</b> of policies removing the gains women had made to enter the work force during World War II and worked to establish feminism as an academic field of study. She continued fighting for feminist causes until her death in 1963.|$|E
5|$|The most bitter {{legal battle}} began in 1809. Evans sued Samuel Robinson—a miller near Baltimore who was using Evans's {{improvements}} {{without a license}} to produce a very modest amount of flour—for damages of $2,500. That sum was deemed unjustifiably high and harsh by many, and Evans's actions rallied the Baltimore community against him, and when the case was finally heard in 1812 many appeared {{in support of the}} defendant. Evans's detractors presented evidence and witnesses at the trial to press the argument that Evans did not truly invent much of what his patents protected. Although the hopper-boy was undoubtedly original, the use of bucket chains and Archimedean screws had been used since ancient times and Evans had only modified some of their features and adapted them for use in a milling context. A now retired Thomas Jefferson weighed into the debate in letters to both Evans and his detractors, questioning the philosophy of patent law and what truly defined 'invention' and 'machine' (and to some extent the validity of his claims) but ultimately defended the purpose of patent law, which was to incentivize innovation by rewarding inventors for their development and sharing of new technology. And Jefferson noted that though Evans's designs consisted of devices that had long existed beforehand, everyone had access to these and yet only Evans had thought to modify and use them in conjunction to build an automatic mill. Ultimately the jury found in favor of Evans, but it was a pyrrhic victory as Evans had put most of the milling community offside in the process, and ultimately reduced his claim against Robinson to $1,000. In response, prominent Evans critic Isaac McPherson, made submission to Congress {{in the wake of the}} trial entitled Memorial to the Congress of Sundry Citizens of the United States, Praying Relief from the Oppressive Operations of Oliver Evans' Patent, seeking to limit the compensation Evans could seek for his patent's use or for Congress to void it altogether. Although the Senate drafted a bill that would <b>roll-back</b> some of Evans's patent rights, it did not pass, and he continued to vigorously pursue his patent fees. It would not be until the Patent Act of 1836 that many of these issues, including what constituted originality in the context of a patent, would be addressed.|$|E
25|$|The Foreign Banks in Switzerland Association {{reported}} {{that from the}} start of 2012 to the end of May 2013, the number of foreign-owned private banks operating in Switzerland declined from 145 to 129 due to the <b>roll-back</b> of bank secrecy regulations. Over the preceding five years, the foreign banks' assets under management declined by 25% to CHF870.7billion Swiss francs ($921 billion) due to their clients paying taxes or withdrawing their money. Foreign banks in Switzerland saw their pretax margin decline from 38 basis points in 2007 to 20 basis points in 2012.|$|E
40|$|In {{traditional}} optimistic distributed simulation pro-tocols, {{a logical}} process(LP) receiving a straggler rolls back and sends out anti-messages. Receiver of an anti-message may also roll back and send out more anti-messages. So a single straggler {{may result in}} a large number of anti-messages and multiple <b>roll-backs</b> of some LPs. In our protocol, an LP receiv-ing a straggler broadcasts its rollback. On receiving this announcement, other LPs may roll back but they do not announce their rollbacks. So each LP rolls back at most once in response to each straggler. Anti-messages are not used. This eliminates the need for output queues and results in simple memory manage-ment. It also eliminates the problem of cascading <b>roll-backs</b> and echoing, and results in faster simulation. All this is achieved by a scheme for maintaining tran-sitive dependency information. The cost incurred in-cludes the tagging of each message with extm depen-dency information and the increased processing time upon receiving a message. We also present the simi-larities between the two areas of distributed simulation and distributed recovery. We show how the solutions for one area {{can be applied to the}} other area. ...|$|R
40|$|The {{objective}} {{of this paper is}} to realize a configuration of today’s pension systems in the various countries member of the European Union. The authors put into discussion also the importance of private component in the supply of pensions, summarizing the debate regarding a certain harmonization between the pension systems from the member countries of European Union. In the final part of the paper, there is also brought into discussion the influence of the financial crisis on the current pension schemes, with its potential <b>roll-backs</b> of reforms made so far...|$|R
50|$|NetWare 2.x {{implemented}} {{a number of}} features inspired by mainframe and minicomputer systems that were not available in other operating systems of the day. The System Fault Tolerance (SFT) features included standard read-after-write verification (SFT-I) with on-the-fly bad block re-mapping (at the time, disks did not have that feature built in) and software RAID1 (disk mirroring, SFT-II). The Transaction Tracking System (TTS) optionally protected files against incomplete updates. For single files, this required only a file attribute to be set. Transactions over multiple files and controlled <b>roll-backs</b> were possible by programming to the TTS API.|$|R
25|$|In {{addition}} to complete <b>roll-back</b> {{of the proposed}} reservation, the striking protesters have demanded that an expert committee comprising members from non-political organisations to review the existing reservation policy and find out whether reservation for OBCs is required at all. This {{is based on the}} current confusion over actual population of OBC as various organisations have indicated various figures for the population of OBCs. This is mostly because the 1931 national census was the last time detailed population and economic data was gathered along with caste information for the OBC population. The Mandal Commission, using extrapolated 1931 Census figures, put it at 52 per cent, the National Sample Survey Organisation (NSSO) at 32 per cent and the National Family and Health Survey at 29.8 per cent. Keeping in view the fact that already 23.5% of all college seats are reserved for OBCs, the rationale of extending reservation is debated. The protesters also demand that no penal action be taken against the protesters and publication of a white paper by the government, making its stand clear on reservation.|$|E
500|$|This {{volcanism}} {{occurs in}} a setting where the collision between the Eurasian Plate and the Tisza-Dacia microplate took place. This {{is part of the}} collision between the African Plate and the Eurasian Plate; subduction may still be underway {{in the area of the}} Carpathians. The Vrancea zone, which is [...] away from Ciomadul, features ongoing earthquake activity; deep earthquakes suggest that a remnant of a slab exists beneath the Vrancea zone. This tectonic setting may also be responsible for volcanism at Ciomadul and the Persani volcanic field, [...] south of Ciomadul. Other theories on Ciomadul's volcanic activity imply delamination of the lithosphere or <b>roll-back</b> of the subduction zone.|$|E
2500|$|In 1979, {{the next}} {{iteration}} of junior leader training {{was introduced in}} the Troop Leader Training Conference. It replaced TLD and Brownsea Double-Two. It was published with the intent [...] "to eventually replace Troop Leader Development (#6544) and also provide the Scoutcraft skills experiences of Brownsea Double Two." [...] This paralleled a <b>roll-back</b> of an urban emphasis in Scouting which had removed mention of the word [...] "campfire" [...] from the 8th edition of the Boy Scout Handbook.|$|E
40|$|We {{present an}} {{overview}} of the stack-based memory management techniques that we used in our non-deterministic and-parallel Prolog systems: &-Prolog and DASWAM. We believe that the problems associated with non-deterministic and-parallel systems are more general than those encountered in or-parallel and deterministic and-parallel systems, which can be seen as subsets of this more general case. We develop on the previously proposed "marker scheme", lifting some of the restrictions associated with the selection of goals while keeping (virtual) memory consumption down. We also review some of the other problems associated with the stack-based management scheme, such as handling of forward and backward execution, cut, and <b>roll-backs...</b>|$|R
40|$|In {{this paper}} {{we present a}} support that helps {{organizing}} distributed design of products belonging to a product family. We model the product to be developed as a component-based tree of object templates, develop a logic-based language that allows expressing diverse development constraints and use these constraints to guide the design process. The main objective of our support is to save time and development effort in increasing parallel work and avoiding <b>roll-backs.</b> For that, it reasons in terms of correctness of the future, final state of the product, and verifies that the product state after each operation allows the reacheability of such a state...|$|R
40|$|We {{describe}} {{the design and}} implementation of GNU Guix, a purely functional package manager designed to support a complete GNU/Linux distribution. Guix supports transactional upgrades and <b>roll-backs,</b> unprivileged package management, per-user profiles, and garbage collection. It builds upon the low-level build and deployment layer of the Nix package manager. Guix uses Scheme as its programming interface. In particular, we devise an embedded domain-specific language (EDSL) to describe and compose packages. We demonstrate how {{it allows us to}} benefit from the host general-purpose programming language while not compromising on expressiveness. Second, we show the use of Scheme to write build programs, leading to "two-tier" programming system. Comment: European Lisp Symposium (2013...|$|R
2500|$|It is {{expected}} that these systems will incorporate other features in the future. Jaguar, Landrover, BMW, Renault, Subaru and VW already have a system where the park brake engages when the engine is stopped and is released when the gas pedal is pressed. An extension of this system, called the hill-hold function, prevents <b>roll-back</b> when stopping and starting on a hill. The OEM can easily turn off the system. Some electric park brakes function similar to [...] "park" [...] on an automatic transmission and will not engage when the vehicle is in motion, there is no emergency brake in this case.|$|E
2500|$|Conceived by Citroën Vice-President Pierre Boulanger to help motorise {{the large}} number of farmers still using horses and carts in 1930s France, the 2CV has a {{combination}} of innovative engineering and utilitarian, straightforward metal bodywork— initially corrugated for added strength without added weight. The 2CV featured low cost; simplicity of overall maintenance; an easily serviced air-cooled engine (originally offering 9hp); low fuel consumption; and an extremely long-travel suspension offering a soft ride and light off-road capability. Often called [...] "an umbrella on wheels", the fixed-profile convertible bodywork featured a full-width, canvas, <b>roll-back</b> sunroof, which accommodated oversized loads and until 1955 reached almost to the car's rear bumper. Notably, Michelin introduced and first commercialized the radial tyre with the introduction of the 2CV.|$|E
2500|$|Thus {{ended the}} life of Johan de Witt, who had in effect ruled the Republic for almost twenty years. His regime outlasted him only a few more days. Though no more people were killed, the lynching of De Witts lent renewed impetus to the mob attacks, and to help restore public order the States of Holland {{empowered}} William on August 27 [...] to purge the city councils in any way he would see fit to restore public order. The following purges {{in the early days}} of September were accompanied by large, but peaceful, Orangist demonstrations, that had a remarkable political character. The demonstrations delivered petitions that demanded certain additional reforms with a, in a sense, [...] "reactionary" [...] flavor: the [...] "ancient" [...] privileges of the guilds and civic militias (who were traditionally seen as mouthpieces of the citizenry as a whole) to curb the regent's powers were to be recognized again (as in pre-Burgundian times). The demonstrators also demanded more influence of the Calvinist preachers on the content of government policies and a <b>roll-back</b> of the toleration of Catholics and other dissenting denominations. The purges of the city governments were not everywhere equally thoroughgoing (and, of course, there was little mention of popular influence later on, as the new regents shared the abhorrence of the old ones of real democratic reforms). But as a whole, the new Orangist regime of the Stadtholder was well-entrenched during his following reign.|$|E
40|$|Although {{a cluster}} of desktop {{machines}} is a viable option as a low-cost computing platform for parallel and distributed applications, such clusters are susceptible to failures as they comprise of multiple independent machines and networking components. In this paper, we develop mechanisms {{needed to make a}} software DSM system highly available. We present protocol enhancements needed to accomplish high availability, and develop the theoretical reasoning behind why the proposed system can tolerate a single node failure. The proposed scheme results in re-starting the computation only on the failed node from a previous checkpoint, and does not induce forced <b>roll-backs</b> of non-faulty nodes. Further, the proposed protocol enhancements do not require additional messages in failure-free periods...|$|R
40|$|Abstract We {{present a}} {{cost-effective}} method for improving data availability during restart recovery of a data base management system (DBMS) after a failure. The method achieves its objective by enabling {{the processing of}} new transactions to be-gin even before restart recovery is completed by exploiting the Comnlt-rs~V concept. It supports fine-granularity (e. g., record) locking with semantically-rich lock modes and operation logging, partial <b>roll-backs,</b> write-ahead logging, and the steal and no-force buffer management policies. The over-head imposed by this method during normal trans-action processing is insignificant. We require very few changes to an existing DBMS in order to sup-port our method. Our method can be implemented with different degrees of sophistication depending on the existing features of a DBMS. 1...|$|R
40|$|Synchronizing {{access to}} shared data {{structures}} {{is a difficult}} problem for simulation programs. Frequently, synchronizing operations within and between simulation steps substantially curtails parallelism. This paper presents a general technique for performing this synchronization while sustaining parallelism. The technique combines fine-grained, exclusive locks with futures, a write-once data structure supporting producer-consumer parallelism. The combination allows multiple operations within a simulation step to run in parallel; further, successive simulation steps can overlap without compromising serializability or requiring <b>roll-backs.</b> The cumulative effect of these two sources of parallelism is dramatic: the example {{presented in this paper}} shows almost 20 -fold increase in parallelism over traditional synchronization mechanisms. 1 Introduction Simulation programs present a difficult challenge for parallel computing. Although many simulations have a large parallel component, controll [...] ...|$|R
50|$|Recovery from {{errors in}} {{fault-tolerant}} {{systems can be}} characterised as either 'roll-forward' or 'roll-back'. When the system detects that it has made an error, roll-forward recovery takes the system state {{at that time and}} corrects it, {{to be able to move}} forward. <b>Roll-back</b> recovery reverts the system state back to some earlier, correct version, for example using checkpointing, and moves forward from there. <b>Roll-back</b> recovery requires that the operations between the checkpoint and the detected erroneous state can be made idempotent. Some systems make use of both roll-forward and <b>roll-back</b> recovery for different errors or different parts of one error.|$|E
5000|$|... #Caption: Citroen 2CV circa 1975, with <b>roll-back</b> {{roof and}} rigid doors ...|$|E
5000|$|... #Caption: Citroën C3 Pluriel circa 2007, a multiconfigurable {{convertible}} with <b>roll-back</b> textile {{roof and}} removable rigid sidebars ...|$|E
40|$|In this paper, we {{introduce}} {{the concept of}} full-system Complete-and-Rollback functional simulators that make ef-ficient functional models in functional/timing partitioned simulators. Complete-and-Rollback functional simulators can efficiently drive simulators of resolutions ranging from functional-only to cycle-accurate {{for a wide range}} of simu-lated machines. Complete-and-Rollback functional models achieve their capabilities by executing instructions to com-pletion, enabling their execution to be highly optimized, but providing rollback capabilities to enable on-the-fly modifi-cations to the functional execution. We also introduce QUICK, an implementation of a full-system Complete-and-Rollback functional model that sup-ports the x 86 and PowerPC ISAs, boots unmodified Win-dows XP and Linux, and runs unmodified applications such as YouTube on Internet Explorer while fully supporting <b>roll-backs,</b> including across I/O operations. We present various case studies using QUICK and conduct performance anal-yses to demonstrate its simulation performance. 1...|$|R
40|$|Previous {{studies have}} shown that there are large diﬀerences between the {{workload}} of established JavaScript benchmarks and popular Web Applications. It has also been shown that popular optimization techniques, such as just-in-time compilation, many times degrade the performance of Web Applications. Further, since JavaScript is a sequential language it cannot take advantage of multicore processors. In this paper, we propose to use Thread-Level Speculation (TLS) as an alternative optimization technique for Web Applications written in JavaScript. Our TLS approach is based on speculation at the function level. We have implemented TLS in WebKit, a state-of-the-art web browser and JavaScript engine. Our results show speedups between 2 and 8 on eight cores for seven popular Web Applications, without any JavaScript source code changes at all. The results also show few <b>roll-backs</b> and the additional memory requirements for our speculation is up to 17. 8 MB for the studied Web Applications...|$|R
40|$|Various {{concurrency}} control algorithms {{differ in the}} time when conflicts are detected, {{and in the way}} they are resolved. In that respect, the Pessimistic and Optimistic Concurrency Control (PCC and OCC) alternatives represent two extremes. PCC locking protocols detect conflicts as soon as they occur and resolve them using blocking. OCC protocols detect conflicts at transaction commit time and resolve them using rollbacks (restarts). For real-time databases, blockages and rollbacks are hazards that increase the likelihood of transactions missing their deadlines. We propose a Speculative Concurrency Control (SCC) technique that minimizes the impact of blockages and rollbacks. SCC relies on the use of added system resources to speculate on potential serialization orders and to ensure that if such serialization orders materialize, the hazards of blockages and <b>roll-backs</b> are minimized. We present a number of SCC-based algorithms that differ in the level of speculation they introduce, and th [...] ...|$|R
5000|$|Have a {{roll back}} strategy: There {{must be a}} way to <b>roll-back</b> to a {{previous}} (working) version.|$|E
50|$|Back-arc basins form behind many {{subduction}} zones due to {{the effects}} of oceanic trench <b>roll-back</b> which leads to a zone of extension parallel to the island arc.|$|E
5000|$|Won a <b>roll-back</b> of {{numerous}} {{oil and gas}} leases made around Arches National Park and other wild Utah red rock lands during {{the end of the}} George W. Bush administration.|$|E
40|$|Consistency of a {{database}} is {{as an important}} property that must be preserved at all times. In most OODB systems today, application code can directly access and alter both the data {{as well as the}} structure of the database. As a consequence application code can potentially violate the integrity of the database, in terms of the invariants of the data model, the user-specified application constraints, and even the referential integrity of the objects themselves. A common form of consistency management in most databases today is to encode constraints at the system level (e. g., foreign keys), or at the trigger based level (e. g., user constraints) and to perform transaction rollback on discovery of any violation of these constraints. However, for programs that alter the structure as well as the objects in {{a database}}, such as an extensible schema evolution program, <b>roll-backs</b> are expensive and add to the already astronomical cost of doing schema evolution. In this paper, pre-execution [...] ...|$|R
40|$|Various {{concurrency}} control algorithms di er {{in the time}} when con icts are detected, {{and in the way}} they are resolved. Pessimistic (PCC) protocols detect con icts as soon as they occur and resolve them using blocking. Optimistic (OCC) protocols detect con icts at transaction commit time and resolve them using rollbacks. For real-time databases, blockages and rollbacks are hazards that increase the likelihood oftransactions missing their deadlines. We propose a Speculative Concurrency Control (SCC) technique that minimizes the impact of blockages and rollbacks. SCC relies on added system resources to speculate on potential serialization orders, ensuring that if such serialization orders materialize, the hazards of blockages and <b>roll-backs</b> are minimized. We present a number of SCC-based algorithms that di er in the level of speculation they introduce, and the amount of system resources (mainly memory) they require. We show the performance gains (in terms of number of satis ed timing constraints) to be expected whenarepresentative SCC algorithm (SCC- 2 S) is adopted. ...|$|R
50|$|In Wilder's absence {{he put his}} {{business}} manager August Roden in charge, a typesetter who had come {{up through the ranks}} as reporter and later associate editor. Roden adopted the aggressive brand of muckraking journalism common to periodicals {{at the start of the}} 20th century. His greatest triumph began in 1907 with his crusade against the high rates and poor quality of Madison Gas & Electric's service. Following an almost daily barage of damaging stories about the private utility, the State Journal hired an attorney to lodge a formal complaint with the state commission in charge of regulating gas and electric companies. In 1910 the paper succeeded in getting the state to force a reduction in MG&E's rates by nearly ten percent, setting a precedent that led to other rate <b>roll-backs.</b> Roden also oversaw the move of the State Journal in 1909 from a three-story limestone building at 119 East Washington Ave. to a new fireproof brick building located on South Carroll Street.|$|R
5000|$|Update Baseline - An {{incremental}} backup or snapshot is taken of monitored files and operating system configurations. Authorized administrators can compare between captured baselines and, in many cases, manually <b>roll-back</b> to prior baselines using stored authoritative files.|$|E
50|$|In January 2016, Saorview, the Irish free TV service {{announced}} it would be launching an online catch-up and on-demand TV service using the commercial version of the Freetime software, including EPG <b>roll-back</b> and remote recording, with Freesat providing a fully managed service.|$|E
5000|$|Senator Ed Markey {{states that}} [...] "President Trump may be outraged by fake {{violations}} {{of his own}} privacy, but every American should be alarmed by the very real violation of privacy that will result from the Republican <b>roll-back</b> of broadband privacy protections".|$|E
40|$|Event-driven {{automation}} of reactive functionalities {{for complex}} event processing is {{an urgent need}} in today’s distributed service-oriented architectures and Web-based event-driven environments. An important problem to be addressed is how to correctly and efficiently capture and process the event-based behavioral, reactive logic embodied in reaction rules, and combining this with other conditional decision logic embodied, e. g., in derivation rules. This paper elaborates a homogeneous integration approach that combines derivation rules, reaction rules and other rule types such as integrity constraints into the general framework of logic programming, the industrial-strength version of declarative programming. We describe syntax and semantics of the language, implement a distributed web-based middleware using enterprise service technologies and illustrate its adequacy in terms of expressiveness, efficiency and scalability through examples extracted from industrial use cases. The developed reaction rule language provides expressive features such as modular ID-based updates with support for external imports and self-updates of the intensional and extensional knowledge bases, transactions including integrity testing and <b>roll-backs</b> of update transition paths. It also supports distributed complex event processing, event messaging and event querying via efficient and scalable enterprise middleware technologies and event/action reasoning based on an event/action algebra implemented by an interval-based event calculus variant as a logic inference formalism. 1...|$|R
40|$|We {{develop new}} {{algorithms}} {{for the management}} of transactions in a page-shipping client-server database system in which the physical database is organized as a sparse B-tree index. Our starvation-free fine-grained locking protocol combines adaptive callbacks with key-range lock-ing and guarantees repeatable-read-level isolation (i. e., serializability) for transactions containing any number of record insertions, record deletions, and key-range scans. Partial and total <b>roll-backs</b> of client transactions are performed by the client. Each structure modification such as a page split or merge is defined as an atomic action that affects only two levels of the B-tree and is logged using a single redo-only log record, so that the modification never needs to be un-done during transaction rollback or restart recovery. The steal-and-no-force buffering policy is applied by the server when flushing updated pages onto disk and by the clients when shipping updated data pages to the server, while pages involved in a structure modification are forced to the server when the modification is finished. The server performs the restart recovery from client and system failures using an ARIES/CSA-based recovery protocol. Our algorithms avoid access-ing stale data but allow a data page to be updated by one client transaction and read by many other client transactions simultaneously, and updates may migrate from a data page to anothe...|$|R
40|$|The {{purpose of}} this study was to {{estimate}} the work intensity of a reining pattern and to determine hematological responses of trained Quarter Horses during a reining competition. Twelve Quarter Horses between four and eight years of age were equipped with a heart rate monitor at a National Reining Horse Association approved Horse Show. Heart rates were continuously recorded from approximately the last 30 minutes of the warm-up until two minutes after leaving the arena. The performance of each participant was video recorded and heart rates subsequently assigned to the different maneuvers. Blood samples were taken at rest and one minute after completion of the pattern. Average time needed to complete the pattern was 2 : 53 +/- 0 : 09 minutes over a distance of about 680 meters (3. 9 m/s mean average velocity). The heart rate increased continuously from the beginning of the performance until a plateau was reached during canter. Highest heart rates were induced by <b>roll-backs</b> and stopping with 181 +/- 13 bpm. One minute after completion of the pattern heart rate dropped to 86 +/- 12 bpm. During the pattern mean plasma lactate increased significantly (P< 0. 001) to 5. 1 +/- 1. 9 mmol/l. PCV increased (p< 0. 05) to 48. 6 +/- 2. 8...|$|R
