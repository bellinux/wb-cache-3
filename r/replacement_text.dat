33|34|Public
25|$|Many {{assemblers}} support predefined macros, {{and others}} support programmer-defined (and repeatedly re-definable) macros involving sequences of text lines in which variables and constants are embedded. This sequence of text lines may include opcodes or directives. Once a macro {{has been defined}} its name {{may be used in}} place of a mnemonic. When the assembler processes such a statement, it replaces the statement with the text lines associated with that macro, then processes them as if they existed in the source code file (including, in some assemblers, expansion of any macros existing in the <b>replacement</b> <b>text).</b> Macros in this sense date to IBM autocoders of the 1950s.|$|E
2500|$|In 2004 {{the second}} edition of Coping with Risk in Agriculture, co-authored by Anderson, Hardaker, Ruud B. M. Huirne, G. Lien, was published. [...] The book was {{intended}} as a <b>replacement</b> <b>text</b> for Agricultural Decision Analysis and was targeted at senior undergraduate or graduate students of farm management, agricultural researchers, farm advisors, veterinarians, farmers, and policy makers.|$|E
2500|$|TeX {{commands}} commonly {{start with}} a backslash and are grouped with curly braces. Almost all of TeX's syntactic properties can be changed on the fly, which makes TeX input hard to parse by anything but TeX itself. TeX is a macro- and token-based language: many commands, including most user-defined ones, are expanded on the fly until only unexpandable tokens remain, which are then executed. Expansion itself is practically free from side effects. Tail recursion of macros takes no memory, and if-then-else constructs are available. This makes TeX a Turing-complete language even at the expansion level. The system {{can be divided into}} four levels: in the first, characters are read from the input file and assigned a category code (sometimes called [...] "catcode", for short). Combinations of a backslash (actually, any character of category zero) followed by letters (characters of category 11) or a single other character are replaced by a control-sequence token. In this sense, this stage is like lexical analysis, although it does not form numbers from digits. In the next stage, expandable control sequences (such as conditionals or defined macros) are replaced by their <b>replacement</b> <b>text.</b> The input for the third stage is then a stream of characters (including ones with special meaning) and unexpandable control sequences (typically assignments and visual commands). Here characters get assembled into a paragraph. TeX's paragraph breaking algorithm works by optimizing breakpoints over the whole paragraph. The fourth stage breaks the vertical list of lines and other material into pages.|$|E
50|$|A common {{misconception}} {{holds that}} a non-validating XML parser {{does not have}} to read document type declarations, when in fact, the document type declarations must still be scanned for correct syntax as well as validity of declarations, and the parser must still parse all entity declarations in the internal subset, and substitute the <b>replacement</b> <b>texts</b> of internal entities occurring anywhere in the document type declaration or in the document body.|$|R
5000|$|In October 2015, McGraw-Hill Education {{was accused}} of {{whitewashing}} history after it had published a caption in a geography textbook referring to American slaves as [...] "workers." [...] The company quickly apologized, updated the digital version of the materials, and offered schools <b>replacement</b> <b>texts</b> at no charge. Since the controversy began in Houston, it {{has been linked to}} broader controversies about conservative texts at the Texas Education Agency.|$|R
50|$|ML/I accepts input in {{completely}} free form, treating data as {{a stream of}} bytes rather than a series of lines or records. It does not require any particular flagging of macro calls, which makes it particularly useful for processing arbitrary <b>text.</b> <b>Replacements</b> of <b>text</b> can be simple (e.g. PIG is {{to be replaced by}} DOG) or complex (e.g. replace the item between the third and fourth commas after the last full stop, by the contents of some counter).|$|R
50|$|For instance, in vi, {{replacing}} a word is <b>replacement</b> <b>text,</b> {{which is a}} combination of two independent commands (change and word-motion) together with a transition into and out of insert mode. Text between the cursor position {{and the end of the}} word is overwritten by the <b>replacement</b> <b>text.</b> The operation can be repeated at some other location by typing , the effect being that the word starting that location will be replaced with the same <b>replacement</b> <b>text.</b>|$|E
5000|$|... {{select the}} <b>replacement</b> <b>text</b> (try [...] to avoid lifting your hands from the keyboard) ...|$|E
5000|$|However, the [...] "title" [...] {{attribute}} of the [...] "img" [...] element specifies the internal entity [...] "example1SVGTitle" [...] whose declaration {{that does not}} define an annotation, so it is parsed by validating parsers and the entity <b>replacement</b> <b>text</b> is [...] "Title of example1.svg".|$|E
50|$|Some {{stand alone}} {{programs}} allow global <b>text</b> <b>replacement</b> across the operating system, and apply to text typed into any other application.|$|R
50|$|Scalable Inman Flash Replacement (sIFR) is an {{open source}} JavaScript and Adobe Flash dynamic web fonts implementation, {{enabling}} the <b>replacement</b> of <b>text</b> elements on HTML web pages with Flash equivalents. It was initially developed by Mike Davidson and improved by Mark Wubben. It is a scalable variety of HTML text-to-flash replacement pioneered by Shaun Inman.|$|R
5000|$|John 1:1 - 5:11 - {{mixed with}} some Alexandrian and Western readings. This text was {{added in the}} 7th century, {{probably}} for <b>replacement</b> of damaged <b>text.</b>|$|R
5000|$|In contrast, a {{character}} entity reference refers to {{a character}} {{by the name of}} an entity which has the desired character as its <b>replacement</b> <b>text.</b> The entity must either be predefined (built into the markup language) or explicitly declared in a Document Type Definition (DTD). The format is the same as for any entity reference: ...|$|E
50|$|In 2004 {{the second}} edition of Coping with Risk in Agriculture, co-authored by Anderson, Hardaker, Ruud B. M. Huirne, G. Lien, was published. The book was {{intended}} as a <b>replacement</b> <b>text</b> for Agricultural Decision Analysis and was targeted at senior undergraduate or graduate students of farm management, agricultural researchers, farm advisors, veterinarians, farmers, and policy makers.|$|E
50|$|The {{preprocessor}} operates by {{scanning the}} input text and recognizing declared preprocessor names, also called preprocessor identifiers. The text is copied to the preprocessor output with the preprocessor names replaced with their current values. The name {{may represent a}} call to a preprocessor procedure (macro). <b>Replacement</b> <b>text</b> may be rescanned by the preprocessor for possible additional replacement.|$|E
50|$|FreeArc uses LZMA, {{prediction}} by partial matching, TrueAudio, Tornado and GRzip algorithms {{with automatic}} switching by file type. Additionally, it uses filters to further improve compression, including REP (finds repetitions at separations up to 1gb), DICT (dictionary <b>replacements</b> for <b>text),</b> DELTA (improves compression of tables in binary data), BCJ (executables preproccesor) and LZP (removes repetitions in text).|$|R
5000|$|The <b>replacement</b> {{list for}} <b>text</b> <b>replacement</b> {{can also be}} {{modified}} by the user, allowing the user to use shortcuts. If, for example, the user is writing an essay on the industrial revolution, a replacement key {{can be set up}} to replace [...] "ir" [...] with [...] "industrial revolution", saving the user time whenever they want to type it. For users with the patience, this facility can even be used to create a complete keyboard shorthand system, along lines similar to those of Dutton Speedwords, but with short forms instantly replaced by full forms.|$|R
50|$|It {{is perhaps}} sounder method {{to be wary}} of <b>text</b> <b>replacements</b> except in cases where the {{existing}} text is unintelligible as Greek. Here it is not. Ptolemy's Dauciones remain to be located.|$|R
5000|$|Flash {{content is}} usually {{embedded}} using the [...] or [...] HTML element. A web browser {{that does not}} fully implement one of these elements displays the <b>replacement</b> <b>text,</b> if supplied by the web page. Often, a plugin {{is required for the}} browser to fully implement these elements, though some users cannot or will not install it.|$|E
50|$|The {{specification}} of base+increment {{means that the}} <b>replacement</b> <b>text</b> on the first line is base and is incremented on subsequent lines, so that X10+10 replaces the matched text on the first line with X10, on the second line with X20 and on the third line with X30. The {{specification of}} SUBSTRING 2/4 means columns 2-4 of the matched string; note that this is less flexible than captures.|$|E
5000|$|S - {{searches}} for given text. It {{is used in}} the same way as replace, but without the <b>replacement</b> <b>text.</b> A search for 'apple' in the first 20 lines of a file is typed [...] (no space, unless that is part of the search) followed by a press of enter. For each match, it asks if it the correct one, and accepts n or y (or Enter).|$|E
50|$|Macro {{processors}} {{have been}} used for language expansion (defining new language constructs that can be expressed in terms of existing language components), for systematic <b>text</b> <b>replacements</b> that require decision making, and for text reformatting (e.g. conditional extraction of material from an HTML file).|$|R
40|$|We {{provide a}} {{generalization}} of the algorithm of Eklund-Jost-Peterson for computing Segre classes of closed subschemes of projective k-space. The algorithm is here generalized to computing the Segre classes of closed subschemes of smooth projective toric varieties. Comment: 19 pages, 1 figure, added references, corrected typos, minor <b>text</b> <b>replacement...</b>|$|R
50|$|ENPS was {{originally}} {{developed by the}} Associated Press for use at the BBC in the United Kingdom as a <b>replacement</b> for the <b>text</b> mode system BASYS (which developed into Avid iNEWS), and the Corporation has the largest installation of the system with over 12,000 users in 300 different locations http://www.enps.com/files/marketing/ENPS%20and%20BBC.pdf.|$|R
5000|$|Note that {{reference}} to the [...] "author" [...] internal entity is not substituted in the <b>replacement</b> <b>text</b> of the [...] "signature" [...] internal entity. Instead, it is replaced only when the [...] "signature" [...] entity reference is parsed within {{the content of the}} [...] "sgml" [...] element, but only by validating parsers (non-validating parsers do not substitute entity references occurring within contents of element or within attribute values, {{in the body of the}} document.|$|E
50|$|Note {{that any}} valid SGML or XML {{document}} that references an external subset in its DTD, or whose body contains references to parsed external entities declared in its DTD (including those declared within its internal subset), {{may only be}} partially parsed but cannot be fully validated by validating SGML or XML parsers in their standalone mode (this means that these validating parsers don't attempt to retrieve these external entities, and their <b>replacement</b> <b>text</b> is not accessible).|$|E
5000|$|Internal (parsed) {{entities}} are associating a {{name with}} any arbitrary textual content defined in their declaration (which {{may be in}} the internal subset or in the external subset of the DTD declared in the document). When a named entity reference is then encountered {{in the rest of the}} document (including in the rest of the DTD), and if this entity name has effectively been defined as a parsed entity, the reference itself is replaced immediately by the textual content defined in the parsed entity, and the parsing continues within this <b>replacement</b> <b>text.</b>|$|E
5000|$|Tokens - as with strings, {{but using}} a lexer {{to convert the}} program into tokens first. This {{discards}} whitespace, comments, and identifier names, making the system more robust to simple <b>text</b> <b>replacements.</b> Most academic plagiarism detection systems work at this level, using different algorithms to measure the similarity between token sequences.|$|R
40|$|Issued in fascicles, issued also {{in bound}} volumes. Since 1963 the {{subtitle}} changed to: Kommentar zum schweizerischen Privatrecht. Since 1964 edited by A. Meier-Hayoz. Each special t. p. {{of the individual}} volumes has at head of title: Schweizerisches Zivilgesetzbuch. Kept up to date by <b>replacement</b> editions. Includes <b>text</b> of the Zivilgesetzbuch in German, French, and Italian. Meier-Hayoz, ArthurGmür, M. Becker, H...|$|R
50|$|<b>Text</b> <b>replacement,</b> replace-as-you-type or autocorrect is an {{automatic}} data validation function {{commonly found in}} word processors and text editing interfaces for smartphones and tablet computers. Its principal purpose is {{as part of the}} spell checker to correct common spelling or typing errors, saving time for the user. It is also used to automatically format text or insert special characters by recognizing particular character usage, saving the user from having to use more tedious functions.|$|R
5000|$|This is {{possible}} because the <b>replacement</b> <b>text</b> {{specified in the}} internal entity definitions permits a distinction between parameter entity references (that are introduced by the [...] "%" [...] character and whose replacement applies to the parsed DTD contents) and general entity references (that are introduced by the [...] "&" [...] character and whose replacement is delayed until they are effectively parsed and validated). The [...] "%" [...] character for introducing parameter entity references in the DTD loses its special role outside the DTD {{and it becomes a}} literal character.|$|E
50|$|Many {{assemblers}} support predefined macros, {{and others}} support programmer-defined (and repeatedly re-definable) macros involving sequences of text lines in which variables and constants are embedded. This sequence of text lines may include opcodes or directives. Once a macro {{has been defined}} its name {{may be used in}} place of a mnemonic. When the assembler processes such a statement, it replaces the statement with the text lines associated with that macro, then processes them as if they existed in the source code file (including, in some assemblers, expansion of any macros existing in the <b>replacement</b> <b>text).</b> Macros in this sense date to IBM autocoders of the 1950s.|$|E
5000|$|The {{content of}} the [...] "img" [...] element {{references}} another external entity [...] "example1SVG" [...] whose declaration also does not define an notation, so it is also parsed by validating parsers and the entity <b>replacement</b> <b>text</b> is located by its defined SYSTEM identifier [...] "example1.svg" [...] (also interpreted as a relative URI). The effective content for the [...] "img" [...] element be the content of this second external resource. The difference with the GIF image, is that the SVG image is parsed within the SGML document, according to the declarations in the DTD, where the GIF image is just referenced as an opaque external object (which is not parsable with SGML) via its [...] "data" [...] attribute (whose value type is an opaque ENTITY).|$|E
5000|$|In early 1905, Christian Michelsen {{formed a}} {{coalition}} government consisting of liberals and conservatives, whose only stated objective was to establish a separate Norwegian corps of consuls. The law {{was passed by the}} Norwegian parliament. As expected and probably as planned, King Oscar II refused to accept the laws, and the Michelsen government resigned. When the king declared himself unable to form a cabinet under the present circumstances, a constitutional crisis broke out on 7 June 1905. Later that day, the Storting voted unanimously to dissolve the union with Sweden, taking the line that Oscar had effectively abandoned his role as King of Norway by refusing to appoint a <b>replacement</b> government.The <b>text</b> of the unanimous declaration, remarkable {{for the fact that the}} declaration of the dissolution was an aside to the main clause, read: ...|$|R
5000|$|In certain situations, {{automatic}} corrections {{can cause}} problems. This is particularly so in technical and scientific writing. For example, the biochemical {{cyclic adenosine monophosphate}} is {{commonly referred to as}} [...] "cyclic AMP", which in turn is abbreviated to [...] "cAMP". A <b>text</b> <b>replacement</b> function may regard this capitalization to be erroneous, and so change it to [...] "Camp", which in the context of biochemistry is incorrect. Older automatic-correction algorithms can cause problems even in nontechnical writing; the Cupertino effect was an example: cooperation (which some dictionaries would not recognize unless hyphenated co-operation) became Cupertino.|$|R
5000|$|Misuse of <b>text</b> <b>replacement</b> {{software}} is a staple practical joke in many schools and offices. Typically, the prankster {{will set the}} victim's word processing software to replace an extremely common word with a humorous absurdity, or an incorrectly spelled version of the original word. The growing use of autocorrection on smartphones has also led to popular websites and blogs where people post and share humorous or embarrassing cases of improper autocorrections. Deliberate AutoCorrect is when people write something and sarcastically [...] "correct" [...] their Deliberate AutoCorrect with an Asterisk followed with the sarcastic [...] "correction".|$|R
