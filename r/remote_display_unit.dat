0|1534|Public
50|$|Teleprocessing {{monitors}} such as IBM's CICS and {{third-party software}} such as <b>Remote</b> DUCS (<b>display</b> <b>unit</b> control system) and Westi platforms used Bisync line control {{to communicate with}} remote devices.|$|R
50|$|The IBM 7700 Data Acquisition System was {{announced}} by IBM on December 2, 1963.It {{was capable of}} collecting data from as many as 32 sources simultaneously, process the data and transmit results to up to 16 <b>remote</b> printers, <b>display</b> <b>units</b> or plot boards.|$|R
5000|$|A {{wattmeter}} is used {{to measure}} electrical power. Inexpensive plugin wattmeters, sometimes described as energy monitors, are available from prices of around US$10. Some more expensive models for home use have <b>remote</b> <b>display</b> <b>units.</b> In the US wattmeters can often also be borrowed from local power authorities or a local public library. [...] Although accuracy of measurement of low AC current and quantities derived from it, such as power, is often poor, these devices are nevertheless indicative of standby power, if sensitive enough to register it. Some home power monitors simply specify an error figure such as 0.2%, without specifying the parameter subject to this error (e.g., voltage, easy to measure), and without qualification. Errors of measurement at the low standby powers used from about 2010 (i.e., less than a few watts) may be a very {{large percentage of the}} actual value—accuracy is poor. Modification of such meters to read standby power has been described and discussed in detail (with oscilloscope waveforms and measurements). Essentially, the meter's shunt resistor, used to generate a voltage proportional to load current, is replaced by one of value typically 100 times larger, with protective diodes. Readings of the modified meter have to be multiplied by the resistance factor (e.g. 100), and maximum measurable power is reduced by the same factor.|$|R
40|$|Abstract — This paper expresses {{about how}} to {{construct}} the peripheral interface controller (PIC) based the <b>display</b> <b>unit</b> of the <b>remote</b> <b>display</b> system. The <b>remote</b> <b>display</b> system {{can be used to}} display the token number that is to know the people. It is also intended for use in clinic, hospitals, bank, and etc. In this research, the peripheral interface controller based <b>remote</b> <b>display</b> system is used for displaying the number and the character. The <b>remote</b> <b>display</b> system consists of two portions: <b>display</b> <b>unit</b> and console <b>unit.</b> The <b>display</b> <b>unit</b> of <b>remote</b> <b>display</b> system contains the display controller, three seven-segment Light Emitting Diode (LEDs), Diode matrix, Category display LEDs and DSUB 9 connector. The display controller is controlled by the microcontroller PIC 16 F 873. It controls to display the token numbers. And then it can control at the diode matrix to display the three kinds of character such as A, B, and C. The three numbers of seven-segment LEDs will display the token number fro...|$|R
50|$|Some {{pioneering}} {{storage tube}} displays were MIT Project MAC's ARDS (Advanced <b>Remote</b> <b>Display</b> Station), the Computek 400 Series Display terminals (a commercial derivative), which both used a Tektronix type 611 storage <b>display</b> <b>unit,</b> and Tektronix's 4014 terminal, the latter becoming {{a de facto}} computer terminal standard some time after its introduction (later being emulated by other systems due to this status).|$|R
40|$|Includes bibliographical {{references}} (page 50) Modern smartphones {{are very}} capable devices. Thanks to {{the ease of}} writing and using applications, the cell phone has morphed from a device which allows its user to communicate with others into an internet connected, multi-purpose gadget. Smartphone applications exist for almost everything imaginable, but in a few cases, such as skiing or cycling, physically accessing the smartphone to use an application is not practical. As {{a solution to the}} above stated problem, this thesis presents the design and implementation of a prototype ???<b>Remote</b> <b>Display</b> for Smartphone??? device and associated Android Library. The ???<b>Remote</b> <b>Display</b> for Smartphone??? is a small embedded device which features an LCD display and wireless connectivity to a smartphone. Android applications can use this device to display data and to receive input from the user without the need for the user to physically access the phone. This project used an ???ARM Cortex-M 3 MINI STM 32 ??? Development Board with a 2. 4 " TFT LCD Touchscreen as a hardware prototype for the <b>Remote</b> <b>Display</b> for Smartphone. An RN 42 Bluetooth module was added to the development board to allow wireless connectivity to the smartphone. The firmware for the <b>Remote</b> <b>Display</b> for Smartphone was developed in C using the IAR Systems, Embedded Workbench for ARM. The ???<b>Remote</b> <b>Display</b> Device??? Android library was developed using the JAVA programming language and the Eclipse based Android SDK. As a demonstration of the capabilities of the <b>Remote</b> <b>Display</b> for Smartphone a sample Bike Map application which utilizes the <b>Remote</b> <b>Display</b> API was developed...|$|R
50|$|TigerVNC {{focuses on}} {{performance}} and on <b>remote</b> <b>display</b> functionality.|$|R
50|$|RFB was {{originally}} developed at Olivetti Research Laboratory (ORL) as a <b>remote</b> <b>display</b> technology {{to be used}} by a simple thin client with ATM connectivity called a Videotile. In order to keep the device as simple as possible, RFB was developed and used in preference to any of the existing <b>remote</b> <b>display</b> technologies.|$|R
40|$|Kennedy Space Center's Launch Pad 39 B, part of Launch Complex 39, is {{currently}} undergoing construction to prepare it for NASA's Space Launch System missions. The Environmental Control Subsystem, which provides the vehicle {{with an air}} or nitrogen gas environment, required development of its local and <b>remote</b> <b>display</b> screens. The <b>remote</b> <b>displays,</b> developed by NASA contractors and previous interns, were developed without complete functionality; the <b>remote</b> <b>displays</b> were revised, adding functionality to over 90 displays. For the local displays, multiple test procedures were developed to assess the functionality of the screens, as well as verify requirements. One local display screen was also developed...|$|R
5000|$|LDM, the (<b>remote)</b> <b>Display</b> Manager of the Linux Terminal Server Project ...|$|R
5000|$|... 3275 <b>remote</b> <b>display</b> with {{controller}} function (no additional displays {{up to one}} printer) ...|$|R
40|$|Mobile cloud {{computing}} provides {{a solution to}} meet the increasing functionality demands of end-users, as all application logic is executed on distant servers and only user interface functionalities reside on the mobile device. The mobile device acts as a <b>remote</b> <b>display,</b> capturing user input and rendering the display updates received from the distant server. Varying wireless channel conditions, short battery lifetime and interaction latency introduce major challenges for the <b>remote</b> <b>display</b> of cloud applications on mobile devices. In this paper discussed a number of adequate solutions that have recently been proposed to tackle the main issues associated with the <b>remote</b> <b>display</b> of cloud services on mobile devices. </p...|$|R
40|$|The Launch Control System (LCS) {{developed}} at NASA's Kennedy Space Center (KSC) {{will be used}} to launch future spacecraft. Two of the many components of this system are the Application Control Language (ACL) and <b>remote</b> <b>displays.</b> ACL is a high level domain specific language that is used to write remote control applications for LCS. <b>Remote</b> <b>displays</b> are graphical user interfaces (GUIs) developed to display vehicle and Ground Support Equipment (GSE) data, they also provide the ability to send commands to control GSE and the vehicle. The <b>remote</b> <b>displays</b> and the control applications have many facets and this internship experience dealt with several of them...|$|R
40|$|THINC {{is a new}} virtual and <b>remote</b> <b>display</b> {{architecture}} for desktop computing. It {{has been}} designed to address the limitations and performance shortcomings of existing <b>remote</b> <b>display</b> technology, and to provide a building block around which novel desktop architectures can be built. THINC is architected around the notion of a virtual display device driver, a software-only component that behaves like a traditional device driver, but instead of managing specific hardware, enables desktop input and output to be intercepted, manipulated, and redirected at will. On top of this architecture, THINC introduces a simple, low-level, device-independent representation of display changes, and a number of novel optimizations and techniques to perform efficient interception and redirection of display output. This dissertation presents the design and implementation of THINC. It also introduces a number of novel systems which build upon THINC's architecture to provide new and improved desktop computing services. The contributions of this dissertation are as follows: - A high performance <b>remote</b> <b>display</b> system for LAN and WAN environments. This system differs from existing <b>remote</b> <b>display</b> technologies in that it focuses on the architecture of the system as a mechanism to improve performance, and not just on the <b>remote</b> <b>display</b> protocol and compression techniques. - A novel mechanism to natively support multimedia content in a <b>remote</b> <b>display</b> system {{in a way that is}} both transparent to applications and format independent. - pTHINC, a system to deliver improved <b>remote</b> <b>display</b> support for mobile devices, both in terms of performance and usability, and provide a competitive, and in some cases superior, alternative to native mobile applications. - MobiDesk, a desktop utility computing infrastructure that enables service providers to host desktop sessions in fully virtualized environments. Hosted sessions can be remotely accessed using THINC, they can be migrated across computers to provide high-availability, and can be effectively and efficiently protected from denial of service attacks. - Moving beyond <b>remote</b> <b>display,</b> we show how THINC's architecture can be used to provide continuous, low overhead recording of a desktop. Alongside, we introduce a novel way to leverage desktop accessibility services to allow users to search their recording based on captured text content. We have implemented prototypes for these systems, and evaluated their performance in a number of scenarios, and compared it to representative alternatives whenever possible. Our results demonstrate that THINC can provide superior <b>remote</b> <b>display</b> performance, and can be successfully used as a fundamental building block for new and improved desktop applications and services...|$|R
40|$|The firing room at Kennedy Space Center (KSC) is {{responsible}} for all NASA human spaceflight launch operations, therefore {{it is vital that}} all displays within the firing room be properly tested, up-to-date, and user-friendly during a launch. The Ground Main Propulsion System (GMPS) requires a number of <b>remote</b> <b>displays</b> for Vehicle Integration and Launch (VIL) Operations at KSC. My project is to develop <b>remote</b> <b>displays</b> for the GMPS using the Display Services and Framework (DSF) editor. These <b>remote</b> <b>displays</b> will be based on model images provided by GMPS through PowerPoint. Using the DSF editor, the PowerPoint images can be recreated with active buttons associated with the correct Compact Unique Identifiers (CUIs). These displays will be documented in the Software Requirements and Design Specifications (SRDS) at the 90 % GMPS Design Review. In the future, these <b>remote</b> <b>displays</b> will be available for other developers to improve, edit, or add on to so that the display may be incorporated into the firing room to be used for launches...|$|R
5000|$|... 3276 <b>remote</b> <b>display</b> with {{controller}} function (up to {{a limited}} number of displays or printers) ...|$|R
50|$|A Counter <b>Display</b> <b>Unit</b> (CDU) is {{a retail}} <b>display</b> <b>unit</b> {{normally}} {{placed on a}} shop counter to encourage consumer impulse purchases.|$|R
5000|$|X- Win32 allows <b>remote</b> <b>display</b> of UNIX {{windows on}} Windows {{machines}} {{in a normal}} window alongside the other Windows applications ...|$|R
40|$|According to {{the thin}} client {{computing}} principle, the user interface is physically {{separated from the}} application logic. In practice only a viewer component is executed on the client device, rendering the display updates received from the distant application server and capturing the user interaction. Existing <b>remote</b> <b>display</b> frameworks are not optimized to encode the complex scenes of modern applications, which are composed of objects with very diverse graphical characteristics. In order to tackle this challenge, we propose to transfer to the client, {{in addition to the}} binary encoded objects, semantic information about the characteristics of each object. Through this semantic knowledge, the client is enabled to react autonomously on user input and does not {{have to wait for the}} display update from the server. Resulting in a reduction of the interaction latency and a mitigation of the bursty <b>remote</b> <b>display</b> traffic pattern, the presented framework is of particular interest in a wireless context, where the bandwidth is limited and expensive. In this paper, we describe a generic architecture of a semantic <b>remote</b> <b>display</b> framework. Furthermore, we have developed a prototype using the MPEG- 4 Binary Format for Scenes to convey the semantic information to the client. We experimentally compare the bandwidth consumption of MPEG- 4 BiFS with existing, non-semantic, <b>remote</b> <b>display</b> frameworks. In a text editing scenario, we realize an average reduction of 23 % of the data peaks that are observed in <b>remote</b> <b>display</b> protocol traffic...|$|R
40|$|This paper {{discusses}} about a Virtual Network Computing (VNC) based architecture for accessing {{a desktop}} of remote computer from a cellular phone. Mobile cloud computing provides {{a solution to}} meet the increasing functionality demands of end users, as all application logic is executed in distant servers and only user interface functionalities reside on the mobile device. The mobile device acts as a <b>remote</b> <b>display,</b> capturing user input and rendering the display updates received from the distant server. Varying wireless channel conditions, short battery lifetime and interaction latency introduces major challenges for the <b>remote</b> <b>display</b> of cloud application on mobile devices. In this {{paper we discuss a}} number of adequate solution that have recently been proposed to tackle the main issues associated with the <b>remote</b> <b>display</b> of cloud services on mobile devices...|$|R
50|$|Video Display's largest {{business}} segment involves designing and manufacturing digital projector <b>display</b> <b>units</b> for defense contractors, including Boeing and Lockheed Martin, {{for use in}} flight simulation and training. Video Display also makes the <b>display</b> <b>units</b> for the industrial and medical industry sectors. Its digital projector <b>display</b> <b>unit</b> operations are located at Cape Canaveral, Fla.|$|R
40|$|The {{invention}} {{relates to}} an electronic database search engine comprising an electronic memory device suitable for storing and releasing elements from the database, a <b>display</b> <b>unit,</b> a user interface for selecting and displaying {{at least one}} element from the database on the <b>display</b> <b>unit,</b> and control means for controlling the user interface, which user interface allocates icons to {{the elements of the}} database, which icons are suitable for display on the <b>display</b> <b>unit</b> at mutual distances that depend on the elements' degree of dissimilarity, wherein the user interface at initial utilization displays at least some icons on the <b>display</b> <b>unit.</b> Industrial Design Engineerin...|$|R
50|$|Sony {{produced}} a wristwatch called Sony SmartWatch {{that must be}} paired with an Android phone. Once paired, it becomes an additional <b>remote</b> <b>display</b> and notification tool.|$|R
40|$|A <b>remote</b> <b>display</b> system, {{which allows}} users to view a desktop image and to control a remote machine, can be {{valuable}} for small group communication in which each member is operating several machines. However, conventional server/client based <b>remote</b> <b>display</b> systems have not been considered for group communication or multi-machines environments. Most of these systems restrict the direction of transferring from server to client. Switching the direction of transferring may require several procedures. Moreover, the settings of the server on each host tend to be troublesome...|$|R
40|$|Abstract — Although {{advances}} in miniaturization continue, {{the desire to}} preserve the advantages mobile devices have over desktop systems in weight, size, and device autonomy will always impose intrinsic limits on processing power, storage capacity, battery lifetime, and display size. Mobile cloud computing provides a solution to meet the increasing functionality demands of end-users, as all application logic is executed on distant servers and only user interface functionalities reside on the mobile device. The mobile device acts as a <b>remote</b> <b>display,</b> capturing user input and rendering the display updates received from the distant server. Varying wireless channel conditions, short battery lifetime and interaction latency introduce major challenges for the <b>remote</b> <b>display</b> of cloud applications on mobile devices. In this paper, we discuss a number of adequate solutions that have recently been proposed to tackle the main issues associated with the <b>remote</b> <b>display</b> of cloud services on mobile devices...|$|R
40|$|The {{purpose of}} this project {{is to build a}} {{wireless}} sensor network for measuring temperature and relative humidity in hop drying facility. This is a monitoring device, consists of several sensor units and one control and <b>display</b> <b>unit.</b> <b>Display</b> <b>unit</b> coordinates a whole network and can display data on LCD or download collected data to PC. Sensor unit measures a relative humidity, temperature, battery voltage and transmits data to <b>display</b> <b>unit.</b> Units contain a transceiver which operates in ISM band 868 MHz. Circuits are driven by 8 -bits microcontroller Freescale...|$|R
40|$|This {{internship}} {{provided an}} opportunity for an intern to work with NASA's Ground Support Equipment (GSE) for the Spaceport Command and Control System (SCCS) at Kennedy Space Center as a <b>remote</b> <b>display</b> developer, under NASA mentor Kurt Leucht. The main focus was on creating <b>remote</b> <b>displays</b> for the hypergolic and high pressure helium subsystem team to help control the filling of the respective tanks. As a <b>remote</b> <b>display</b> developer for the GSE hypergolic and high pressure helium subsystem team the intern was responsible for creating and testing graphical <b>remote</b> <b>displays</b> {{to be used in}} the Launch Control Center (LCC) on the Firing Room's computer monitors. To become more familiar with the subsystem, the individual attended multiple project meetings and acquired their specific requirements regarding what needed to be included in the <b>remote</b> <b>displays.</b> After receiving the requirements, the next step was to create a display that had both visual appeal and logical order using the Display Editor, on the Virtual Machine (VM). In doing so, all Compact Unique Identifiers (CUI), which are associated with specific components within the subsystem, will need to be included in each respective display for the system to run properly. Then, once the display was created it needed to be tested to ensure that the display runs as intended by using the Test Driver, also found on the VM. This Test Driver is a specific application that checks to make sure all the CUIs in the display are running properly and returning the correct form of information. After creating and locally testing the display it will need to go through further testing and evaluation before deemed suitable for actual use. By the end of the semester long experience at NASA's Kennedy Space Center, the individual should have gained great knowledge and experience in various areas of display development and testing. They were able to demonstrate this new knowledge obtained by creating multiple successful <b>remote</b> <b>displays</b> that will one day be used by the hypergolic and high pressure helium subsystem team in one of the LCC's firing rooms to fill the new Orion spacecraft...|$|R
50|$|Charge {{controllers}} {{may also}} monitor battery temperature to prevent overheating. Some charge controller systems also display data, transmit data to <b>remote</b> <b>displays,</b> and data logging to track electric flow over time.|$|R
50|$|Compared to TightVNC, TigerVNC adds {{encryption}} for all supported {{operating systems}} (not just Linux), but it removes scaling the <b>remote</b> <b>display</b> into the client window, file transfer, and changing options while connected.|$|R
50|$|Shearwater's NERD or Near Eye <b>Remote</b> <b>Display</b> is a {{head-up display}} that places the divers {{information}} {{in front of}} their eyes. The Shearwater NERD was released at Dive 2013 in Birmingham, UK.|$|R
5000|$|... #Caption: A {{visualisation}} of an Alstom Télécité Modular <b>Display</b> <b>Unit</b> <b>displaying</b> {{the next}} station cue for station Lionel-Groulx ...|$|R
50|$|As {{many of the}} war-era systems used similar <b>display</b> <b>units,</b> the Lucero {{system was}} {{introduced}} to send the proper signals to interrogate any of these systems, allowing a single <b>display</b> <b>unit</b> of any type {{to be used for}} H2S, ASV, AI, Rebecca and BABS.|$|R
40|$|System is {{used for}} design, layout, and {{modification}} of large-scale-integrated (LSI) metal-oxide semiconductor (MOS) arrays. System is structured around small computer which provides real-time support for graphics storage <b>display</b> <b>unit</b> with keyboard, slave <b>display</b> <b>unit,</b> hard copy unit, and graphics tablet for designer/computer interface...|$|R
50|$|The PFD and {{navigation}} display (and multi-function display, where fitted) are often physically identical. The information displayed {{is determined by}} the system interfaces where the <b>display</b> <b>units</b> are fitted. Thus, spares holding is simplified: the one <b>display</b> <b>unit</b> can be fitted in any position.|$|R
50|$|Graphics - IBM 2250 Graphic <b>Display</b> <b>Unit.</b>|$|R
40|$|We propose an {{approach}} to <b>remote</b> <b>display</b> systems in which the client predicts the screen update events that the server will send and applies them to the screen immediately, thus eliminating the network round-trip time and making the system more responsive in a wide-area or high loss environment. Incorrectly predicted events are undone when the actual events arrive from the server. The approach requires no server or protocol changes, and thus can work with existing systems. Since it is core to the feasibility of such a speculative <b>remote</b> <b>display</b> system, we study the predictability {{of the events that}} occur under typical workloads in two extant systems, Windows Remote Desktop and VNC. We find that simple, statelimited Markov models are often able to correctly predict the next event. Based on these results, we design, implement, and evaluate a speculative <b>remote</b> <b>display</b> extension to the VNC client. In our implementation, the end user can trade off between the responsiveness of the display and the level of temporarily displayed incorrect predictions. We evaluate VNC/SRD with two user studies. We conclude by describing design alternatives...|$|R
