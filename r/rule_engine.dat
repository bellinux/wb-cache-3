289|446|Public
25|$|Business {{rules have}} been used by systems to provide {{definitions}} for governing behavior, and a business <b>rule</b> <b>engine</b> can be used to drive process execution and resolution.|$|E
25|$|It wasn't {{long before}} the frame {{communities}} and the rule-based researchers {{realized that there was}} synergy between their approaches. Frames were good for representing the real world, described as classes, subclasses, slots (data values) with various constraints on possible values. Rules were good for representing and utilizing complex logic such as the process to make a medical diagnosis. Integrated systems were developed that combined Frames and Rules. One of the most powerful and well known was the 1983 Knowledge Engineering Environment (KEE) from Intellicorp. KEE had a complete <b>rule</b> <b>engine</b> with forward and backward chaining. It also had a complete frame based knowledge base with triggers, slots (data values), inheritance, and message passing. Although message passing originated in the object-oriented community rather than AI it was quickly embraced by AI researchers as well in environments such as KEE and in the operating systems for Lisp machines from Symbolics, Xerox, and Texas Instruments.|$|E
5000|$|One {{common use}} case for rules engines is {{standardized}} access control to applications. OASIS defines a rules engine architecture and standard dedicated to access control called XACML (eXtensible Access Control Markup Language).One key {{difference between a}} XACML <b>rule</b> <b>engine</b> and a business <b>rule</b> <b>engine</b> {{is the fact that}} a XACML <b>rule</b> <b>engine</b> is stateless and cannot change the state of any data.The XACML <b>rule</b> <b>engine,</b> called a Policy Decision Point (PDP), expects a binary Yes/No question e.g. [...] "Can Alice view document D?" [...] and returns a decision e.g. Permit / deny.|$|E
50|$|PRR {{was mostly}} defined {{by and for}} vendors of Business <b>Rule</b> <b>Engines</b> (BREs) (sometimes termed Business <b>Rules</b> <b>Engine(s),</b> like in Wikipedia). Contributors have {{included}} all the major BRE vendors, members of RuleML, and leading UML vendors.|$|R
50|$|OpenL Tablets is a {{business}} rule management system (BRMS) and {{a business}} <b>rules</b> <b>engine</b> (BRE) based on table representation of <b>rules.</b> <b>Engine</b> implements optimized sequential algorithm. OpenL includes such table types as decision table, decision tree, spreadsheet-like calculator.|$|R
50|$|Most Java-based <b>rules</b> <b>engines</b> {{provide a}} {{technical}} call-level interface, {{based on the}} JSR-94 application programming interface (API) standard, {{in order to allow}} for integration with different applications, and many <b>rule</b> <b>engines</b> allow for service-oriented integrations through Web-based standards such as WSDL and SOAP.|$|R
50|$|Most BRMS vendors {{have evolved}} from <b>rule</b> <b>engine</b> vendors to provide business-usable {{software}} development lifecycle solutions, based on declarative definitions of business rules executed {{in their own}} <b>rule</b> <b>engine.</b>|$|E
5000|$|The {{other type}} of <b>rule</b> <b>engine</b> {{processes}} so-called reaction/Event Condition Action rules. The reactive rule engines detect and react to incoming events and process event patterns. For example, a reactive <b>rule</b> <b>engine</b> {{could be used to}} alert a manager when certain items are out of stock.|$|E
5000|$|DTRules: a Decision Table-based, open-sourced <b>rule</b> <b>engine</b> for Java.|$|E
50|$|In addition, some <b>rules</b> <b>engines</b> support {{backward}} chaining. In {{this case}} a <b>rules</b> <b>engine</b> seeks to resolve the facts to fit a particular goal. It {{is often referred to}} as being goal driven because it tries to determine if something exists based on existing information.|$|R
50|$|The NMIS {{business}} <b>rules</b> <b>engine</b> classifies {{events on}} their business impact, {{not just the}} technical nature. The <b>rules</b> <b>engine</b> is extremely powerful; however it can be configured in minutes for a network with {{a small number of}} devices to hours for networks with large numbers of devices.|$|R
50|$|Rules {{post-processed}} by statistics: Translations {{are performed}} using a <b>rules</b> based <b>engine.</b> Statistics are then {{used in an}} attempt to adjust/correct the output from the <b>rules</b> <b>engine.</b>|$|R
5000|$|Bossam, {{a forward}} {{chaining}} <b>rule</b> <b>engine</b> supports SWRL. http://bossam.wordpress.com/ ...|$|E
5000|$|The DMN {{standard}} is complementary to the BPMN standard. BPMN defines {{a special kind}} of activity, the Business Rule Task, which [...] "provides a mechanism for the process to provide input to a business <b>rule</b> <b>engine</b> and to get the output of calculations that the business <b>rule</b> <b>engine</b> might provide".|$|E
5000|$|DTRules: a {{decision}} table based, open-sourced <b>rule</b> <b>engine</b> for Java.|$|E
5000|$|Business process managementBusiness ruleBusiness <b>rules</b> approachBusiness <b>rules</b> <b>engine</b> ...|$|R
40|$|E-business {{provides}} important {{opportunities of}} trade for businesses, and the supporting business system must handle this environment efficiently. One current trend in business systems {{is to move}} business logic, such as business processes and business rules, out from the application logic and into separate support systems. The reason to make this separation {{is to increase the}} agility of the business, to make the system able to change more rapidly when the business situation changes. This report focus on business rules enforced in business <b>rule</b> <b>engines.</b> Specific interest is on how such <b>rule</b> <b>engines</b> meet the requirements of the e-business domain. The report presents an overview of business <b>rule</b> <b>engines.</b> Five general categories of characteristics are proposed. The proposed characteristics are then used in a comparison of three business <b>rule</b> <b>engines...</b>|$|R
5000|$|Benchmarking results: OpenRuleBench yearly {{open-source}} benchmark of <b>rule</b> <b>engines</b> ...|$|R
5000|$|DTRules: a Decision Table based, open-sourced <b>rule</b> <b>engine</b> for Java.|$|E
5000|$|Business {{rules engine}} (BRE). This is a Rete {{algorithm}} <b>rule</b> <b>engine.</b>|$|E
5000|$|Drools Expert (<b>rule</b> <b>engine)</b> - {{uses the}} rules to perform {{reasoning}} ...|$|E
5000|$|Oracle Business Rules, {{contains}} a JSR 94 Business <b>rules</b> <b>engine</b> ...|$|R
5000|$|... #Subtitle level 2: <b>Rules</b> <b>Engines</b> for Access Control / Authorization ...|$|R
50|$|A {{fourth class}} of <b>rules</b> <b>engine</b> {{might be called}} a {{deterministic}} <b>engine.</b> These <b>rules</b> <b>engines</b> may forgo both forward chaining and backward chaining, and instead utilize domain-specific language approaches to better describe policy. This approach is often easier to implement and maintain, and provides performance advantages over forward or backward chaining systems.|$|R
5000|$|Production {{system which}} {{describes}} the typical <b>rule</b> <b>engine</b> that executes production rules ...|$|E
50|$|In November 2007, Versata {{acquired}} Gensym. Gensym is {{a provider}} of business <b>rule</b> <b>engine</b> software.|$|E
5000|$|JESS: a <b>rule</b> <b>engine</b> for the Java {{platform}} - it is a superset of CLIPS programming language.|$|E
5000|$|Gensym G2, a {{real-time}} {{expert system}} and business <b>rules</b> <b>engine</b> (BRE) ...|$|R
5000|$|Inventory - {{multiple}} facility, multiple location, customizable <b>rules</b> <b>engine,</b> shipment consolidation ...|$|R
50|$|Corticonâ€™s {{business}} <b>rules</b> <b>engine</b> {{works with}} service oriented architectures (SOA). Traditional <b>rules</b> <b>engines</b> use a Rete algorithm to execute rules. To avoid potential issues with rule execution as data becomes more complex, Corticon uses a patented Design-Time-Interfacing (DeTI) algorithm. That algorithm {{is designed to}} scale linearly regardless {{of the number of}} rules or complexity of the data.|$|R
5000|$|Bossam (software), an RETE-based <b>rule</b> <b>engine</b> {{with native}} {{supports}} for reasoning over OWL ontologies, SWRL rules, and RuleML rules.|$|E
5000|$|... a {{distribution}} mechanism coupled {{to receive the}} set of actions from the <b>rule</b> <b>engine</b> and apply at least one action thereof to the e-mail message to control delivery of the e-mail message and which {{in response to the}} <b>rule</b> <b>engine</b> applying an action of deferring delivery of the e-mail message, the distribution engine automatically combines the email message with a new distribution list specifying at least one destination post office for receiving the e-mail message for review by an administrator associated with the destination post office, and a rule history specifying the business rules that were determined to be applicable to the e-mail message by at least one <b>rule</b> <b>engine,</b> and automatically delivers the e-mail message to a first destination post office on the distribution list instead of a specified recipient of the e-mail message ...|$|E
50|$|Business {{rules have}} been used by systems to provide {{definitions}} for governing behavior, and a business <b>rule</b> <b>engine</b> can be used to drive process execution and resolution.|$|E
50|$|<b>Rule</b> <b>engines</b> {{typically}} support <b>rules,</b> facts, priority (score), mutual exclusion, preconditions, {{and other}} functions.|$|R
5000|$|The Jess <b>rules</b> <b>engine</b> {{utilizes}} the Rete algorithm, and can {{be utilized}} to create: ...|$|R
5000|$|Data {{standardization}} - {{a business}} <b>rules</b> <b>engine</b> that ensures that data conforms to quality rules ...|$|R
