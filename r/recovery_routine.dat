19|51|Public
50|$|Thus, {{with each}} error the system {{captured}} diagnostic data, {{and attempted to}} perform a repair and keep the system up. The worst thing possible was to take down a user address space (a 'job') {{in the case of}} unrepaired errors. Though it was an initial design point, {{it was not until the}} most recent MVS version (z/OS), that recovery program was not only guaranteed its own <b>recovery</b> <b>routine,</b> but each <b>recovery</b> <b>routine</b> now has its own <b>recovery</b> <b>routine.</b> This recovery structure was embedded in the basic MVS control program, and programming facilities are available and used by application program developers and 3rd party developers.|$|E
50|$|IBM {{included}} {{additional criteria}} for a major software problem that required IBM service. If a mainline component failed to initiate software recovery, that was considered a valid reportable failure. Also, if a <b>recovery</b> <b>routine</b> failed to collect significant diagnostic data such that the original problem was solvable by data collected by that <b>recovery</b> <b>routine,</b> IBM standards dictated that this fault was reportable and required repair. Thus, IBM standards, when rigorously applied, encouraged continuous improvement.|$|E
5000|$|This design {{specified}} {{a hierarchy}} of error-handling programs, in system (kernel/'privileged') mode, called Functional Recovery Routines, and in user ('task' or 'problem program') mode, called [...] "ESTAE" [...] (Extended Specified Task Abnormal Exit routines) that were invoked in case the system detected an error (actually, hardware processor or storage error, or software error). Each <b>recovery</b> <b>routine</b> made the 'mainline' function reinvokable, captured error diagnostic data sufficient to debug the causing problem, and either 'retried' (reinvoke the mainline) or 'percolated' (escalated error processing to the next <b>recovery</b> <b>routine</b> in the hierarchy).|$|E
50|$|August 14, 2004: Canadian Arrow {{carries out}} a {{successful}} drop {{test of the}} crew cabin, to test the parachutes and <b>recovery</b> <b>routines.</b>|$|R
40|$|This chapter {{provides}} {{data and}} analysis of the dependability and fault tolerance for three operating systems: the Tandem/GUARDIAN fault-tolerant system, the VAX/VMS distributed system, and the IBM/MVS system. Based on measurements from these systems, basic software error characteristics are investigated. Fault tolerance in operating systems resulting from the use of process pairs and <b>recovery</b> <b>routines</b> is evaluated. Two levels of models are developed to analyze error and recovery processes inside an operating system and interactions among multiple instances of an operating system running in a distributed environment. The measurements show that the use of process pairs in Tandem systems, which was originally intended for tolerating hardware faults, allows the system to tolerate about 70 % of defects in system software that result in processor failures. The loose coupling between processors which results in the backup execution (the processor state and the sequence of events occurring) being different from the original execution is a major reason for the measured software fault tolerance. The IBM/MVS system fault tolerance almost doubles when <b>recovery</b> <b>routines</b> are provided, in comparison to the case in which no <b>recovery</b> <b>routines</b> are available. However, even when <b>recovery</b> <b>routines</b> are provided, there is almost a 50 % chance of system failure when critical system jobs are involved...|$|R
40|$|International audienceWe discuss {{new methods}} for the {{recovery}} of signals with block-sparse structure, based on l 1 -minimization. Our {{emphasis is on the}} efficiently computable error bounds for the <b>recovery</b> <b>routines.</b> We optimize these bounds with respect to the method parameters to construct the estimators with improved statistical properties. We justify the proposed approach with an oracle inequality which links the properties of the recovery algorithms and the best estimation performance...|$|R
5000|$|The macro was an {{abbreviation}} of {{the term}} [...] "Set Exit," [...] and was used by programs written in assembly language. It is {{used to create a}} <b>recovery</b> <b>routine</b> in the event of program errors, similar to signal handlers in C and Try/Finally blocks in C++, Java and other object oriented languages.|$|E
50|$|Digital {{fragility}} can {{be reduced}} by designing a digital system for robustness. For example, a parity bit or other error management method can be inserted into the signal path. These schemes help the system detect errors, and then either correct the errors, or at least ask for a new copy of the data. In a state-machine, the state transition logic can be designed to catch unused states and trigger a reset sequence or other error <b>recovery</b> <b>routine.</b>|$|E
50|$|By the 1930s, Zelda Fitzgerald {{had already}} {{been in and out}} of {{psychiatric}} facilities, and her husband was stalled writing his next work; he had not produced a novel since 1925's The Great Gatsby. After an episode of hysteria, Zelda was admitted to the Phipps Clinic at Johns Hopkins Hospital in Baltimore on February 12, 1932 for treatment by Dr. Adolf Meyer, an expert on schizophrenia. As part of her <b>recovery</b> <b>routine,</b> she spent at least two hours a day writing.|$|E
50|$|Practically, the MVS {{software}} recovery made problem debugging both {{easier and more}} difficult. Software recovery requires that programs leave 'tracks' of {{where they are and}} what they are doing, thus facilitating debugging—but the fact that processing progresses despite an error can overwrite the tracks. Early date capture {{at the time of the}} error maximizes debugging, and facilities exist for the <b>recovery</b> <b>routines</b> (task and system mode, both) to do this.|$|R
40|$|Undeformed superquadrics are {{volumetric}} modeling primitives with {{an extensive}} shape vocabulary that are described by only 5 parameters. Fitting these models viewpoint invariantly to range data enables classica-tion {{based on the}} superquadric parameters. However, current <b>recovery</b> <b>routines</b> show several limitations, es-pecially when the algorithms are applied to range im-ages instead of true 3 D images. In this paper problems with the common superquadric recovery procedure are identi ed and solutions are presented. ...|$|R
40|$|International audienceWe {{consider}} {{the problem of}} recovery of a sparse signal, observed the noisy environment when nuisance is present. We propose the <b>recovery</b> <b>routines</b> {{which are based on}} L 1 minimization constrained or penalized with contrasts which depend on the geometry of the nuisance sets. We show that such routines outperform some known methods, e. g. Lasso estimator and Dantzig selector. We discuss the link between the theory of linear estimation and L 1 -recovery and show how this theory allows to construct optimal contrast matrices...|$|R
40|$|Acute {{respiratory}} failure is a life-threatening complication in cancer patients. During neutropenia, patients {{are at high}} risk for bacterial pneumonia or invasive fungal infections, when neutropenia is prolonged. A high proportion of patients in whom neutropenia had been complicated by pneumonia will present with substantial respiratory deterioration during neutropenia recovery. Patients with fungal pneumonia and those receiving granulocyte colony-stimulating factor to shorten neutropenia duration may be at higher risk for this acute lung injury/acute respiratory distress syndrome during neutropenia <b>recovery.</b> <b>Routine</b> screening of patient's risk factors is crucial since first symptoms of acute respiratory distress syndrome may occur before biological leukocyte recovery...|$|E
40|$|Approved {{for public}} release; {{distribution}} in unlimited. Compiler writers continue {{to search for}} a reliable method of syntactic error recovery. Spurious error reports and confusing diagnostics are common problems confronting the programmer. Innumerable error possibilities have made recovery design a frustrating task. This thesis implements a method of syntactic error recovery using recursive calls on the error <b>recovery</b> <b>routine.</b> Parsing is accomplished by traversing transition diagrams which are created from syntax charts. Key language symbols and dynamically generated recovery positions are used in restoring the parse. High-quality error diagnostics give a clear, accurate, and thorough description of each error, providing an excellent instructional software tool. Approach and implementation issues are discussed, and sample output listings are included. [URL] Commander, United States Nav...|$|E
40|$|A {{taxonomy}} of syntax error handling techniques used in LR parsers is presented. The methods are classified {{according to the}} major features they offer. In particular, we distinguish correcting and noncorrecting techniques. The goal of the former methods is to correct an error when detected and to restart the parser. Instead, noncorrecting techniques simply signal {{the presence of an}} error and continue the analysis without attempting any correction on the source program. A finer classification of correcting approaches is given according the amount of information that is gathered around the error by the <b>recovery</b> <b>routine.</b> We distinguish phrase level, global and local techniques. Also interactive methods are considered. We report an evaluation of some techniques based on quality of the corrections, language independence, flexibility and efficiency. Finally, a glossary of technical terms is also provided...|$|E
40|$|An {{interactive}} {{programming environment}} allows the programmer to construct programs in parts, correct {{the program as}} errors are detected, and minimizes the amount of recomputation by re-analysis of the modified parts alone. This thesis focuses {{on the development of}} tools for designing incremental language processors. To build an incremental language processor, an incremental parser and an incremental translator are needed. In this work, an incremental LR(1) parser, and an incremental attribute evaluator (suitable for code generation) are presented. ^ The incremental LR(1) parser constructs the parse tree of a modified input by using some of the subtrees constructed in parsing the old input. Reparsing of the input substrings corresponding to the yield of such subtrees is therefore avoided. The parser can be supplemented with error <b>recovery</b> <b>routines</b> to allow interactive user controlled recovery as well as automatic error recovery by the <b>recovery</b> <b>routines.</b> ^ Translation (in particular, code generation) is defined via attribute evaluation. In this work, new algorithms for attribute evaluation are presented and analyzed. The evaluator follows the strategy of 2 ̆ 2 evaluation by need 2 ̆ 2, is table-driven and is applicable to any grammar in 2 ̆ 2 normal form 2 ̆ 2, circular or non-circular. The incremental version of the evaluator only computes those attributes whose values have been affected by the modifications. Hence, recomputation of unaffected attributes is avoided. The evaluator has time complexity linear in the number of attributes needed to define the meaning of a given input, and has space complexity linear {{in the size of the}} input. ...|$|R
40|$|Wediscussageneralnotionof“sparsitystructure”andassociatedrecoveries ofasparsesignal {{from its}} linear image of reduced {{dimension}} possibly corrupted with noise. Our approach allows for unified treatment of (a) the “usual sparsity ” and “usual ℓ 1 recovery, ” (b) block-sparsity with possibly overlapping blocks and associated block-ℓ 1 recovery, and (c) low-rank-oriented recovery by nuclear norm minimization. The proposed <b>recovery</b> <b>routines</b> are natural extensions of theusualℓ 1 minimization usedinCompressedSensing. Specifically, wepresent nullspace-type sufficient {{conditions for the}} recovery to be precise on sparse signals in the noiseless case. Then we derive error bounds for imperfect (nearly sparse signal, presence of observation noise, etc.) recovery under these conditions. In all of these cases, we present efficiently verifiable sufficient conditions for {{the validity of the}} associated nullspace properties. ...|$|R
30|$|<b>Routine</b> <b>recovery</b> room radiographs are {{ineffective}} {{for screening}} and unsuitable as baseline for longitudinal follow-up evaluation [6].|$|R
40|$|Methods {{have been}} {{developed}} for the quantification of low-microgram levels of the extractable organic matter contained in the atmospheric fine aerosol fraction. Extract quantification is accomplished by computer-assisted high-resolution gas chromatography (HRGC) used in conjunction with a procedural recovery mixture containing perdeuterated compounds of differing polarity and molecular weight. Recovery data for these species indicate that relative volatility rather than functional group classification is the primary factor affecting overall <b>recovery.</b> <b>Routine</b> quality control analysis is performed on a per-sample basis by high-resolution gas chromatography/mass spectrometry (HRGC/MS) for confirmation of the standard components and for identification of procedural contaminants. By the way of illustration, fine aerosol samples have been analyzed from Anaheim. California. The absolute solvent extract yields range from 49 to 346 μg of organic carbon, and demonstrate a seasonal variation with winter maximum and summer minimum concentrations...|$|E
40|$|SIC is a {{programming}} too 1 {{whose purpose}} is {{to assist in the}} developmentpf compilers by"means of a special purpose language, alao cal 1 ed SIC based on Pascal. SIC possesses facilities to specify the syntax. of programming languages and to associate semantic routines with grammarproductions. It also provides, without loss of eficiency, facilities to imp 1 ement interactive or batch compilers organized in one or more passes, where each passoperates directIy on the source code, requiring no intermediate language. From the given syntax. specification, the SIC tool produces a compres sed LALR(1) table and a parser containing a language independent error handling and <b>recovery</b> <b>routine.</b> SIC also presents facilities to explicit 1 y salve LALR(1) conflicts resu 1 ting from the use of ambiguous grammars. SIC provides compilers in C and Pascal and runs on MS-DOS and WINDOWS. Eje: Lenguajes de programació...|$|E
40|$|Abstract — When an {{operating}} system crashes and hangs, {{it leaves the}} machine in an unusable state. All currently running program state and data is lost. The usual solution is to reboot the machine and restart user programs. However, {{it is possible that}} after a crash, user program state and most operating system state is still in memory and hopefully, not corrupted. In this project, we use a watchdog timer to reset the processor on {{an operating}} system crash. We have modified the Linux kernel and added a <b>recovery</b> <b>routine</b> that is called instead of the normal boot up function when the processor is reset by a watchdog. This resumes execution of user processes after killing the process that was executing when the watchdog fired. We have implemented this on the ARM architecture and we use a periodic watchdog kick thread to detect system crashes. If this thread is not scheduled periodically, the watchdog reset initiates recovery. I...|$|E
40|$|Outer planet {{spacecraft}} have unique {{requirements that}} differentiate them from inner planet and Earth orbiter spacecraft. To meet these requirements, the Voyager and Galileo Power Management And Distribution (PMAD) architectures employed shunt regulation and {{carried on the}} Mariner tradition of AC power distribution {{to many of the}} user loads. Also, autonomous fault recovery was achieved by automatic responses in hardware and software <b>recovery</b> <b>routines.</b> Finally, power distribution switching was expanded to allow for removal of the most trivial load element as the nuclear source depleted itself. The design cycle has begun for a third generation spacecraft set named Comet Rendezvous Asteroid Flyby (CRAF) and Cassini (a saturn orbiter). In their power systems, AC power distribution, relay/fuse load switching, and fault protection will give way to the advantages of DC power and solid state load switches...|$|R
40|$|We {{discuss a}} general notion of "sparsity structure" and {{associated}} recoveries of a sparse signal from its linear image of reduced dimension possibly corrupted with noise. Our approach allows for unified treatment of (a) the "usual sparsity" and "usual ℓ_ 1 recovery," (b) block-sparsity with possibly overlapping blocks and associated block-ℓ_ 1 recovery, and (c) low-rank-oriented recovery by nuclear norm minimization. The proposed <b>recovery</b> <b>routines</b> are natural {{extensions of the}} usual ℓ_ 1 minimization used in Compressed Sensing. Specifically we present nullspace-type sufficient conditions for the recovery to be precise on sparse signals in the noiseless case. Then we derive error bounds for imperfect (nearly sparse signal, presence of observation noise, etc.) recovery under these conditions. In all of these cases, we present efficiently verifiable sufficient conditions for {{the validity of the}} associated nullspace properties...|$|R
40|$|Abstract — The {{essential}} insight {{of quantum}} error correction was that quantum {{information can be}} protected by suitably encoding this quantum information across multiple independently erred quantum systems. Recently it was realized that, since the most general method for encoding quantum information is to encode it into a subsystem, there exists a novel form of quantum error correction beyond the traditional quantum error correcting subspace codes. These new quantum error correcting subsystem codes differ from subspace codes in that their quantum correcting routines can be considerably simpler than related subspace codes. Here we present a class of quantum error correcting subsystem codes constructed from two classical linear codes. These codes are the subsystem versions of the quantum error correcting subspace codes which are generalizations of Shor’s original quantum error correcting subspace codes. For every Shor-type code, the codes we present give a considerable savings {{in the number of}} stabilizer measurements needed in their error <b>recovery</b> <b>routines.</b> I...|$|R
40|$|Galectins are {{a family}} of soluble beta-galactoside-binding lectins that play many {{important}} regulatory roles in inflammation, immunity, and cancer. Recently, a role for galectin- 3 in the pathophysiology of heart failure (HF) has been suggested. Numerous studies have demonstrated the up-regulation of galectin- 3 in hypertrophied hearts, its stimulatory effect on macrophage migration, fibroblast proliferation, {{and the development of}} fibrosis. The latter observation is particularly relevant as cardiac remodelling is an important determinant of the clinical outcome of HF and is linked to disease progression and poor prognosis. Because galectin- 3 expression is maximal at peak fibrosis and virtually absent after <b>recovery,</b> <b>routine</b> measurement in patients with HF may prove valuable to identify those patients at highest risk for readmission or death, thus enabling physicians to tailor the level of care to individual patient needs. This review summarizes the most recent advances in galectin- 3 research, with an emphasis on the role galectin- 3 plays in the development and progression of HF...|$|E
40|$|Information {{multiplexing}} {{is important}} for biomedical imaging and chemical sensing. In this paper, we report a microscopy imaging technique, termed state-multiplexed Fourier ptychography (FP), for information multiplexing and coherent-state decomposition. Similar to a typical Fourier ptychographic setting, we use an array of light sources to illuminate the sample from different incident angles and acquire corresponding low-resolution images using a monochromatic camera. In the reported technique, however, multiple light sources are lit up simultaneously for information multiplexing, and the acquired images thus represent incoherent summations of the sample transmission profiles corresponding to different coherent states. We show that, by using the state-multiplexed FP <b>recovery</b> <b>routine,</b> we can decompose the incoherent mixture of the FP acquisitions to recover a high-resolution sample image. We also show that, color-multiplexed imaging can be performed by simultaneously turning on R/G/B LEDs for data acquisition. The reported technique may provide a solution for handling the partially coherent effect of light sources used in Fourier ptychographic imaging platforms. It {{can also be used}} to replace spectral filter, gratings or other optical components for spectral multiplexing and demultiplexing. With the availability of cost-effective broadband LEDs, the reported technique may open up exciting opportunities for computational multispectral imaging. Comment: 10 pages, 7 figure...|$|E
40|$|Acute {{respiratory}} failure is a life-threatening complication in cancer patients. During neutropenia, patients {{are at high}} risk for bacterial pneumonia or invasive fungal infections, when neutropenia is prolonged. A high proportion of patients in whom neutropenia had been complicated by pneumonia will present with substantial respiratory deterioration during neutropenia recovery. Patients with fungal pneumonia and those receiving granulocyte colony-stimulating factor to shorten neutropenia duration may be at higher risk for this acute lung injury/acute respiratory distress syndrome during neutropenia <b>recovery.</b> <b>Routine</b> screening of patient’s risk factors is crucial since first symptoms of acute respiratory distress syndrome may occur before biological leukocyte recovery. Cancer chemotherapy is administered every day to numerous cancer patients, with neutropenia mostly a normally expected event [1, 2]. During neutropenia, bacterial sepsis remains a major threat [3]. Potential sources of infection include primarily the lungs, the digestive tract, and the bloodstream [4, 5]. Some of the patients with prolonged neutropenia are more likely to present with nonbacterial infections, namely acute leukemia patients and stem cell/bone marrow transplant recipients [6]. Although neutrophils are believed to have a pivotal role in the pathophysiology of acute lung injury (ALI) and acute respiratory distress syndrome (ARDS), early evidence emerged that neutropenic patients were not spared from ALI and ARDS [7]. Several hypotheses have been raised, including alveolar macrophage or monocyte deactivation [8] in relation to malignancy, cancer chemotherapy or sepsis...|$|E
40|$|Abstract: In this paper, {{we present}} {{the design and}} {{implementation}} of a multi-robot cooperation framework to collectively execute inter-dependent tasks of an overall complex mission requiring diverse capabilities. Given a heterogeneous team of robots and task dependencies, the proposed framework provides a distributed mechanism for assigning tasks to robots in an order that efficiently completes the mission. The approach is robust to unreliable communication and robot failures. It is a distributed auction-based approach, and therefore scalable. In order to obtain optimal allocations, effective bid evaluations are needed. Additionally to maintain optimality in noisy environments, dynamic re-allocations of tasks are needed as implemented in dynamic task selection and coalition maintenance scheme that we propose. Real-time contingencies are handled by <b>recovery</b> <b>routines,</b> called Plan B precautions in our framework. Here, in this paper, we present performance results of our framework for robustness in simulations that include variable message loss rates and robot failures. Experiments illustrate robustness of our approach against several contingencies. ...|$|R
40|$|Exception {{handling}} is a {{well established}} method of error recovery through the alteration of plans in situ. This method relies on <b>recovery</b> <b>routines</b> existing in advance, which - we argue - is simply shorthand for more detailed plan descriptions. However, in practice, agents rarely act alone in their environment - other agents may exist, and potentially provide help in times of need. We argue that social error recovery is a particular class of exception handling that allows agents to resolve erroneous situations that are beyond their direct control. In our opinion, agent oriented programming languages must directly provide agents with abilities like social error recovery. Consequently, we introduce revisions to the AgentFactory framework, and more specifically, the programming language (AF-APL), which facilitate the rapid development of agents with in-built social error recovery. The use of these abilities are illustrated via {{an example of a}} social error recovery scenario for a mobile robot working as an office assistant...|$|R
40|$|Abstract—Recovering from {{intrusions}} for a compromised {{computer system}} is a challenging job, especially for systems that run continuous services. Current intrusion recovery techniques often do not preserve the accumulated useful state of running applications and have very limited system availability when performing <b>recovery</b> <b>routines.</b> In this paper, we propose SHELF, an on-the-fly intrusion recovery prototype system that provides a comprehensive solution to preserve business continuity, availability and recovery accuracy. SHELF preserves accumulated clean states for infected applications and files {{so that they can}} continue with the most recent pre-infection states after recovery. Moreover, SHELF leverages OS-aware taint tracking techniques to swiftly determine the sources of intrusion and assess system-wide damages caused by the intrusion. SHELF uses quarantine methods to prevent infection propagation so that uninfected and recovered objects can provide availability during the recovery phase. We integrate SHELF prototype in a virtualization environment to achieve user transparency and protection. Our evaluation shows that SHELF can perform accurate recovery on-the-fly effectively with an acceptable performance overhead. Keywords-intrusion recovery; availability; taint tracking; virtual machines; I...|$|R
40|$|An {{efficient}} and systematic LL(1) error recovery method is presented {{that has been}} implemented for an LL (1) parser generator. Error messages which provide good diagnostic information are generated automatically. Error correction is done by discarding some input symbols and popping up some symbols from the parsing-stack in order to restore the parser to a valid configuration. Thus, symbol deletions and insertions are simulated. The choice between different possible corrections is made by comparing {{the cost of the}} inserted (popped) symbols with the reliability value of the recovery symbol (the first input symbol that is not discarded). Our concept of reliability is based on the observation that input symbols differ from each other in their ability to serve as recovery points. A high reliability value of a symbol asserts that it was probably not placed in the input by accident. So it is reasonable not to discard that symbol but to resume parsing. This is done even if a string with high insert-cost has to be inserted before that symbol in order to fit it to the part of the program that has already been analysed. The error <b>recovery</b> <b>routine</b> is invoked only when an error is detected. Thus, there is no additional time required for parsing correct programs. Error-correcting parsers for different languages, including Pascal, have been generated. Some experimental results are summarized. KEY WORDS Syntax error recovery LL (1) -parsing Parser-generator Backtrack-free correctio...|$|E
40|$|Microprocessor based {{systems for}} {{controlling}} gas supplies require {{very high levels}} of reliability for safety reasons. Non-redundant systems {{are considered to be}} inadequate, and an alternative approach is necessary. in digital systems, transient faults are as much as fifty times more common than permanent faults. Therefore mechanisms which allow for recovery from transients will provide large Improvements in reliability. However, to enable effective design of recovery mechanisms it Is necessary to understand failure modes. The results from practical interference tests, designed to simulate transient faults, are presented. They show that corruption to the correct flow of program execution is a common failure, and that subsequent instruction fetches can be performed from any of the memory locations. Under these conditions any value of operation code can be Interpreted as an instruction, including those undeclared by the manufacturers. Four commonly used microprocessors are investigated to establish the functions of the undeclared codes, and other undeclared operations are revealed. Analyses on the sequence of events following a random jump into the four main memory types of data, program, unused and input areas, are presented. Recovery from this type of execution can be achieved by the addition of restart codes into the areas, so that execution can transfer to a <b>recovery</b> <b>routine.</b> The effect of this mechanism on the recovery process is investigated. Finally, some methods of testing systems, to check the levels of reliability improvement obtained by these techniques, are considered...|$|E
40|$|The {{notion of}} {{recovery}} from mental illness {{has become a}} significant force in mental health policy, practice and literature. As a process, recovery can {{been described as the}} lived experience of personal growth and search for meaning after the onset of mental illness. The following phenomenological inquiry seeks to understand the meaning of day-to-day activities for 13 people in recovery from mental illness. In the recovery literature there has recently been a growing interest in the everyday aspects of <b>recovery.</b> <b>Routine</b> interactions between people and the human and non-human environment have been recognised as being significant in the recovery process. Additionally, there has been a call within occupational therapy literature for research focused on exploring the experience and meaning of different forms of occupation. This study aims to address and add to these areas of interest within the current literature. Recovery narratives were collected from the participants in two phases, using an open ended conversational style of interview. The first phase focused on gathering stories that reflected the lived experience of recovery for eight participants. The recorded interviews were transcribed and analysed using the hermeneutic philosophy of Martin Heidegger. In the second phase of interviewing a further five participants shared their stories. In this round the conversations were focused on some of the dynamics of activity and recovery that had emerged as broad themes in the first phase. This allowed further depth {{to be added to the}} data and subsequent analysis. The interpretation focused on descriptions of engagement in activity during different periods of the participants’ recovery journeys. It was important to dwell with the stories and allow themes of experience and meaning to emerge. Particular phrases and words were highlighted and their meaning explored if they showed something of the participants’ lived experience. Through a process of writing, reflecting and re-writing the findings were refined and clarified over time. Everyday activity was found to be an important medium for change as well as a recovery outcome in itself. Findings add to existing understandings about occupation as a medium for healing and transformation within the context of recovery from mental illness. In particular, the study highlights the dynamics at play in different modes of doing and the way in which carers can influence the experience and meaning of activity...|$|E
50|$|Traditionally, {{the first}} stages of orbital carrier rockets have been {{discarded}} {{in the ocean}} once the ascent was complete. Achieving <b>routine</b> <b>recovery</b> and reuse of the launch vehicles could dramatically {{reduce the cost of}} access to space.|$|R
40|$|AbstractThe {{algorithm}} {{we present}} here generates finite-state automata for potentially unbounded examination of lookahead and stack {{in order to}} try to discriminate the conflicting actions of an LRO collection. Furthermore, this algorithm can be considered as an overall model to extend the current LR parser generators preserving (i) : the valid prefix property and the traditional error <b>recovery</b> <b>routines</b> of the LR parser; (ii) : the LALR(1) context on the LRO collection. The power of acceptance is a subset of Cohen-Culik's LRR, with acceptation of non-LR(k) grammars, allowing a deterministic bottom-up parsing in linear time when this succeeds. The special feature of this method, compared to foregoing endeavours, consists in the use of the stack language so that a good deal of LR(k) grammars not accessible by foregoing methods now becomes acceptable. In terms of practicability, the minimization techniques allow one to get very compact automata as illustrated on the output lists. The generation of complementary tables can be done independently of the parser generator, which makes the connection of this complementary module to any LR parser generator quite easy. We also show some original results regarding LR automata...|$|R
25|$|General health {{maintenance}} {{should be the}} therapeutic emphasis in Freeman–Sheldon syndrome. The focus is on limiting exposure to infectious diseases because the musculoskeletal abnormalities make <b>recovery</b> from <b>routine</b> infections much more difficult in FSS. Pneumonitis and bronchitis often follow seemingly mild upper respiratory tract infections. Though respiratory challenges and complications faced by a patient with FSS can be numerous, the syndrome’s primary involvement {{is limited to the}} musculoskeletal systems, and satisfactory quality and length of life can be expected with proper care.|$|R
