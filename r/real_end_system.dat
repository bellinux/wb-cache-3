0|3699|Public
40|$|Abstract. Grid Replica {{systems are}} gaining {{foothold}} in <b>real</b> <b>end</b> user <b>systems,</b> {{and are used}} in {{an increasing number of}} large scale projects. As such, many of the properties of these systems are well understood. This paper how to handle some minor shortcomings of todays data replica systems, in respect to consistency management, and to their ability to handle derived data sets. We think that both features will allow replica systems to gain wider acceptance in the GIS community. ...|$|R
40|$|Abstract—We {{present a}} {{centralized}} integrated approach for (i) enhancing {{the performance of}} an IEEE 802. 11 infrastructure WLAN, and for (ii) managing the access link that connects the WLAN to the Internet. Our approach, which is implemented on a standard Linux platform, and which we call ADWISER (ADvanced Wi-fi Internet Service EnhanceR), {{is an extension of}} our previous system WM (WLAN Manager [1], [2]). ADWISER addresses several infrastructure WLAN perfor-mance anomalies such as mixed-rate inefficiency, unfair medium sharing between simultaneous TCP uploads and downloads, and inefficient utilisation of the Internet access bandwidth when Internet transfers compete with LAN-WLAN transfers, etc. The approach is via centralized queueing and scheduling, using a novel, configurable, cascaded packet queueing and scheduling architecture, with an adaptive service rate. In this paper, we describe the design of ADWISER, and report results of extensive experimentation conducted on a hybrid test-bed consisting of <b>real</b> <b>end</b> <b>systems</b> and an emulated WLAN on Qualnet. We also present results from a physical test-bed consisting of one AP and a few <b>end</b> <b>systems.</b> Index Terms—WLAN QoS management, WLAN controllers, split-MAC WLAN controllers, IEEE 802. 11 wireless networks I...|$|R
5000|$|The <b>Real</b> <b>End</b> of the Great War (Prawdziwy koniec wielkiej wojny, 1957) ...|$|R
5000|$|A {{few days}} after the reunion show was taped, Corn Fed and <b>Real</b> <b>ended</b> their relationship.|$|R
2500|$|... 2. The doing of good {{scholastic}} work in {{his chosen}} vocation, thereby accomplishing the <b>real</b> <b>end</b> of a college course ...|$|R
3000|$|... is the <b>real</b> <b>ending</b> {{sampling}} {{point during the}} valid activity segment. Otherwise, the activity segment is regarded as noise and considered invalid.|$|R
5000|$|There {{are several}} {{difficulty}} modes. Selecting easy mode {{results in the}} last few levels being skipped, and being unable to view the <b>real</b> <b>ending.</b>|$|R
25|$|As the show's {{producers}} {{needed to}} ensure that plot details of the ending would be kept a secret until the airdate, the scripts given to the crew members had their final pages removed. The final scene of these edited scripts was {{the one in which}} Tony is raking leaves outside his house, a scene that occurs 10 minutes before the <b>real</b> <b>ending</b> in the final cut. Chase received compliments for this scene from people who thought it was the <b>real</b> <b>ending.</b>|$|R
50|$|The <b>Real</b> <b>End</b> of the Great War is the English {{title for}} Prawdziwy koniec wielkiej wojny, a film {{released}} in 1957, directed by Jerzy Kawalerowicz.|$|R
50|$|In {{networking}} jargon, {{the computers}} that {{are connected to}} a computer network are {{sometimes referred to as}} <b>end</b> <b>systems.</b> They are labeled <b>end</b> <b>systems</b> because they sit {{at the edge of the}} network. The end user always interacts with the <b>end</b> <b>systems.</b> <b>End</b> <b>systems</b> are the devices that provide information or services.|$|R
25|$|If {{you read}} it, you must stop where the Nigger Jim is {{stolen from the}} boys. That is the <b>real</b> <b>end.</b> The rest is just cheating.|$|R
50|$|In the United States and Europe, only Scenario 1 was released. The <b>real</b> <b>ending</b> to {{the game}} can only be viewed by {{completing}} all the games in the series.|$|R
40|$|In an {{internet}} <b>end</b> <b>system,</b> many applications with various requirements on their data stream transmission run simultaneously. The management {{of these data}} streams in a sending <b>end</b> <b>system,</b> and particularly the flow and congestion control for the data streams (if they exist at all), is for each data stream separate and independent from all other data streams. An interesting alternative to such a separate data stream management in a sending <b>end</b> <b>system</b> might be a common data stream management for all data streams in a sending <b>end</b> <b>system.</b> This common data stream management consists of two different aspects improving the overall performance, i. e., the throughput and the fairness, of the data streams of an <b>end</b> <b>system.</b> First, reuse {{of information about the}} current network conditions for an accurate adjustment of connection parameters of other data streams in an <b>end</b> <b>system.</b> This information can be implicitly obtained by some other data streams of the <b>end</b> <b>system</b> and/or explicitly obtained by a network performance probing approach from the <b>end</b> <b>system.</b> And second, a common congestion control between all data streams of an <b>end</b> <b>system</b> including TCP and UDP traffic. In this work some existing approaches for network information reuse, network performance probing...|$|R
50|$|In that event, {{considered}} by many historians as the <b>real</b> <b>end</b> of the Caste War, a Mayan soldier and other federal originating in Juchitan, Oaxaca, hug symbolizing the end of strife occurred.|$|R
5000|$|... (The {{extended}} ending {{presented in}} the 24 Season 2 boxset has him get up and say he's all right; this was filmed to stop the extras on location from leaking the <b>real</b> <b>ending.)</b> ...|$|R
25|$|Technically, due to {{the locked}} groove at the end, this has an {{infinite}} running time. However, with the loop removed, this is the running time. The <b>real</b> <b>ending</b> is restored to the CD version.|$|R
50|$|<b>End</b> <b>systems</b> {{are usually}} {{connected}} {{to each other}} using switching devices known as routers rather than using single communication link. The path that transmitted information takes from the sending <b>end</b> <b>system,</b> {{through a series of}} communications links and routers, to the receiving <b>end</b> <b>system</b> is known as a route or path through the network.|$|R
50|$|With {{the advent}} of SAS/SATA hard drives, {{backplanes}} typically do not vary much from low to high <b>end</b> <b>systems,</b> except the addition of an extra physical port {{in the case of}} SAS. Since it is not economical for systems vendors to design separate backplanes for high and low <b>end</b> <b>systems,</b> the SGPIO standard became popular also in mid-range and higher <b>end</b> <b>systems.</b>|$|R
40|$|Internet {{telephony}} <b>end</b> <b>systems</b> {{can offer}} many services. Different services {{may interfere with}} each other, a problem which is known as feature interaction. The feature interaction problem has existed in telecommunication systems for many years. The introduction of Internet telephony helps to solve some interaction problems due to the richness of its signaling information. However, many new feature interaction problems are also introduced in Internet telephony <b>systems,</b> especially in <b>end</b> <b>systems,</b> which are usually dumb in PSTN systems, but highly functional in Internet telephony <b>systems.</b> Internet telephony <b>end</b> <b>systems,</b> such as SIP soft-agents, can run on personal computers. The soft-agents can then perform call control and many other functions, such as presence information handling, instant messaging, and network appliance control. These new functionalities make the <b>end</b> <b>system</b> feature interaction problems more complicated. In this paper, we investigate ways features interact in Internet telephony <b>end</b> <b>systems</b> and propose a potential solution for detecting and avoiding feature interactions. Our solutions {{are based on the}} Session Initiation Protocol (SIP) and the Language for <b>End</b> <b>System</b> Services (LESS), which is a markup language specifically for <b>end</b> <b>system</b> service creation. i...|$|R
40|$|<b>End</b> <b>system</b> {{multicast}} {{is regarded}} as a promising architecture for multimedia group communications over the Internet. In this paper we discuss how to integrate adaptation capability from the application and flexible multicast functionality from <b>End</b> <b>system</b> multicast for prestored video streaming applications. First we propose a generalized intelligent packetization approach to differentiate information with different priorities within or between bitstreams. Then we describe the enhanced <b>End</b> <b>system</b> multicast scheme to support adaptive applications. We als o present a fast and simple packet-level rate adaptation mechanism with simple logical and arithmetic operators for the proposed <b>End</b> <b>system</b> multicast...|$|R
50|$|Ideas from {{workshops}} {{are rapidly}} prototyped and beta-tested {{in the real}} world with a group of <b>real</b> <b>end</b> users. Their experience with and opinions of the prototypes are recorded and fed back into the workshops and development of the next prototype.|$|R
40|$|Abstract — In Internet telephony, <b>end</b> <b>systems</b> {{can take}} a much larger role in {{providing}} services than in traditional telephone systems. We analyze the importance of <b>end</b> <b>system</b> services and describe the services and the Service Logic Execution Environment (SLEE) implemented in our SIP user agent, SIPC. Since we believe that <b>end</b> <b>system</b> services differ in their requirements from network services, we define a new service creation scripting language called Language for <b>End</b> <b>System</b> Services (LESS). Compared with other service creation languages, LESS is extensible, can be easily understood by non-programmers and contains commands and events for direct user interaction and the control of media applications. I...|$|R
40|$|Abstract- With the {{development}} of high-speed backbone network, more and more traffic load is pushed to the Internet edge equipments and end hosts. Newly emerged bottleneck problems in <b>end</b> <b>systems</b> ask for deploying Quality of Service (QoS) in them. Meanwhile, the tremendous traffic brought by multimedia communications asks for End-to-End QoS. Facing these facts and challenges, a framework of deploying QoS in <b>end</b> <b>systems</b> is presented in this paper. The framework aims at both relieving bottleneck problems through utilizing limited resources efficiently and guaranteeing End-to-End QoS by integrating network QoS and <b>end</b> <b>system</b> QoS. In addition, the framework combines the functions of managing both network QoS and <b>end</b> <b>system</b> QoS...|$|R
50|$|If {{the player}} finds the firestaff and {{uses it to}} defeat Lord Chaos {{this will be the}} <b>real</b> <b>ending</b> of the game. But there is also an {{alternative}} ending if the player finds the firestaff and then leaves the dungeon without destroying Lord Chaos.|$|R
5000|$|... #Caption: A ring showing, conceptually, a {{circular}} buffer. This visually {{shows that the}} buffer has no <b>real</b> <b>end</b> and it can loop around the buffer. However, since memory is never physically created as a ring, a linear representation is generally used as is done below.|$|R
50|$|Split TCP is {{typically}} used to solve TCP problems with large round-trip delay times. A typical system uses Split TCP PEPs to improve TCP performance over a satellite link. Split TCP functions by breaking the end-to-end connection into multiple connections and using different parameters to transfer data across the different legs. The <b>end</b> <b>systems</b> use standard TCP with no modifications, {{and do not}} need to know of the existence of the PEPs in between. Split TCP intercepts TCP connections from the <b>end</b> <b>systems</b> and terminates them. This allows the <b>end</b> <b>systems</b> to run unmodified and can overcome some problems with TCP window sizes on the <b>end</b> <b>systems</b> being set too low for satellite communications.|$|R
50|$|Las Vegas Garden of Love is {{a reality}} {{television}} series that aired on ABC Family for 10 episodes {{during the summer of}} 2005. It was not given a <b>real</b> <b>ending</b> or a second season, due to very low ratings. It was re-run until Fall of 2005.|$|R
40|$|Abstract — The {{conventional}} wisdom {{has been that}} IP is the natural protocol layer for implementing multicast related functionality. However, {{more than a decade}} after its initial proposal, IP Multicast is still plagued with concerns pertaining to scalability, network management, deployment and support for higher layer functionality such as error, flow and congestion control. In this paper, we explore an alternative architecture that we term <b>End</b> <b>System</b> Multicast, where <b>end</b> <b>systems</b> implement all multicast related functionality including membership management and packet replication. This shifting of multicast support from routers to <b>end</b> <b>systems</b> has the potential to address most problems associated with IP Multicast. However, the key concern is the performance penalty associated with such a model. In particular, <b>End</b> <b>System</b> Multicast introduces duplicate packets on physical links and incurs larger end-to-end delays than IP Multicast. In this paper, we study these performance concerns {{in the context of the}} Narada protocol. In Narada, <b>end</b> <b>systems</b> selforganize into an overlay structure using a fully distributed protocol. Further, <b>end</b> <b>systems</b> attempt to optimize the efficiency of the overlay by adapting to network dynamics and by considering application level performance. We present details of Narada and evaluate it using both simulation and Internet experiments. Our results indicate that the performance penalties are low both from the application and the network perspectives. We believe the potential benefits of transferring multicast functionality from <b>end</b> <b>systems</b> to routers significantly outweigh the performance penalty incurred. I...|$|R
40|$|Abstract—The {{conventional}} wisdom {{has been that}} Internet protocol (IP) is the natural protocol layer for implementing multicast related functionality. However, {{more than a decade}} after its initial proposal, IP multicast is still plagued with concerns pertaining to scalability, network management, deployment, and support for higher layer functionality such as error, flow, and congestion control. In this paper, we explore an alternative architecture that we term <b>End</b> <b>System</b> Multicast, where <b>end</b> <b>systems</b> implement all multicast related functionality including membership management and packet replication. This shifting of multicast support from routers to <b>end</b> <b>systems</b> has the potential to address most problems associated with IP multicast. However, the key concern is the performance penalty associated with such a model. In particular, <b>End</b> <b>System</b> Multicast introduces duplicate packets on physical links and incurs larger end-to-end delays than IP multicast. In this paper, we study these performance concerns {{in the context of the}} Narada protocol. In Narada, <b>end</b> <b>systems</b> self-organize into an overlay structure using a fully distributed protocol. Further, <b>end</b> <b>systems</b> attempt to optimize the efficiency of the overlay by adapting to network dynamics and by considering application level performance. We present details of Narada and evaluate it using both simulation and Internet experiments. Our results indicate that the performance penalties are low both from the application and the network perspectives. We believe the potential benefits of transferring multicast functionality from <b>end</b> <b>systems</b> to routers significantly outweigh the performance penalty incurred. Index Terms—Multicast, overlay network, self-organizing protocol. I...|$|R
40|$|The {{conventional}} wisdom {{has been that}} IP is the natural protocol layer for implementing multicast related functionality. However, {{more than a decade}} after its initial proposal, IP Multicast is still plagued with concerns pertaining to scalability, network management, deployment and support for higher layer functionality such as error, flow and congestion control. In this paper, we explore an alternative architecture that we term <b>End</b> <b>System</b> Multicast, where <b>end</b> <b>systems</b> implement all multicast related functionality including membership management and packet replication. This shifting of multicast support from routers to <b>end</b> <b>systems</b> has the potential to address most problems associated with IP Multicast. However, the key concern is the performance penalty associated with such a model. In particular, <b>End</b> <b>System</b> Multicast introduces duplicate packets on physical links and incurs larger end-to-end delays than IP Multicast. In this paper, we study these performance concerns {{in the context of the}} Narada protocol. In Narada, <b>end</b> <b>systems</b> selforganize into an overlay structure using a fully distributed protocol. Further, <b>end</b> <b>systems</b> attempt to optimize the e#ciency of the overlay by adapting to network dynamics and by considering application level performance. We present details of Narada and evaluate it using both simulation and Internet experiments. Our results indicate that the performance penalties are low both from the application and the network perspectives. We believe the potential benefits of transferring multicast functionality from <b>end</b> <b>systems</b> to routers significantly outweigh the performance penalty incurred...|$|R
40|$|International audienceThis paper {{presents}} architecture {{design and}} performance {{evaluation of a}} back <b>end</b> <b>system</b> used to store, index, manage and visualize water quality measurements collected by sensor networks deployed in rivers, lakes and coastal regions. The embedded communications systems in each sensor node enable ad hoc network operation to relay the measurements to the back <b>end</b> <b>system</b> in charge of managing, processing and providing data to end users and large communities through web interfaces. The {{focus is on the}} back <b>end</b> <b>system</b> architecture description and on the evaluation of its performance...|$|R
6000|$|... 'Of course I have, dear Fred,' said Quilp, {{grinning}} {{to think}} how little he suspected what the <b>real</b> <b>end</b> was. 'It's retaliation perhaps; perhaps whim. I have influence, Fred, to help or oppose. Which way shall I use it? There are a pair of scales, and it goes into one.' ...|$|R
40|$|The {{objective}} of this workshop was i) to provide a forum for presenting and discussing research on awareness and reflection in TEL and ii) to provide an interactive experience that connects participants’ research, the co-organizing projects’ latest prototypes and models with <b>real</b> <b>end</b> users’ learning experiences and needs regarding reflection technology...|$|R
40|$|In current <b>end</b> <b>systems,</b> {{multiple}} flexible, {{complex and}} distributed applications concurrently share and compete both <b>end</b> <b>systems</b> resources and transmission bandwidth of heterogeneous multi-protocol networks, especially the Internet. Our {{objective is to}} enable adaptation awareness in these applications to fully cope with the dynamics in resource availability over the heterogeneous Internet, as well as fluctuations in QoS requirements of the applications themselves. In this paper, we present the theoretical and practical aspects of a Task Control Model implemented in the middleware layer, which applies control theoretical approaches to utilize measurement-based samples monitored in the network traffic, as well as resource and QoS demand dynamics observed in the <b>end</b> <b>systems.</b> In our Task Control Model, we introduce Adaptation Tasks for controlling the adaptive behavior of applications, and Observation Tasks for measurements of traffic and <b>end</b> <b>systems</b> resources. We have made several contribu [...] ...|$|R
50|$|According to Kurose-Ross, Host {{system is}} {{another word for}} <b>end</b> <b>system.</b>|$|R
40|$|This {{technical}} report investigates services suitable for <b>end</b> <b>systems.</b> We look into ITU Q. 1211 services, AT&T 5 ESS switch services, services defined in CSTA Phase III, and new services integrating other Internet services, such as presence information. We also explore {{how to use}} the Language for <b>End</b> <b>System</b> Services (LESS) to program th...|$|R
