368|369|Public
5|$|Penrose tilings, {{which use}} two {{different}} quadrilaterals, {{are the best}} known example of tiles that forcibly create non-periodic patterns. They belong to a general class of aperiodic tilings, which use tiles that cannot tessellate periodically. The <b>recursive</b> <b>process</b> of substitution tiling is a method of generating aperiodic tilings. One class that can be generated {{in this way is}} the rep-tiles; these tilings have surprising self-replicating properties. Pinwheel tilings are non-periodic, using a rep-tile construction; the tiles appear in infinitely many orientations. It might be thought that a non-periodic pattern would be entirely without symmetry, but this is not so. Aperiodic tilings, while lacking in translational symmetry, do have symmetries of other types, by infinite repetition of any bounded patch of the tiling and in certain finite groups of rotations or reflections of those patches. A substitution rule, such as can be used to generate some Penrose patterns using assemblies of tiles called rhombs, illustrates scaling symmetry. A Fibonacci word can be used to build an aperiodic tiling, and to study quasicrystals, which are structures with aperiodic order.|$|E
500|$|Bem, in {{a defense}} of his {{hypothesis}} published {{in the same issue}} of Psychological Review, wrote that in their path analysis Bell et al. engaged in [...] "an unfortunate dichotomization of the dependent variable, sexual orientation ... grouping the bisexual and homosexual respondents into the same category." [...] In his view, while this procedure [...] "might have seemed reasonable on a priori grounds ... it should have been abandoned as soon as the researchers saw the results of their own subanalyses, which {{made it clear that the}} bisexual respondents were not only very different from their exclusively homosexual counterparts but actually were more like the heterosexual respondents in theoretically critical ways." [...] Bem argued that by grouping together the bisexuals and homosexuals Bell et al. [...] "reduced many of the correlations and increased the likelihood that important antecedent variables would be erroneously eliminated during the <b>recursive</b> <b>process</b> of discarding the weaker correlates from successive iterations of the path model." ...|$|E
2500|$|Fabian Stedman in 1677 {{described}} factorials when {{explaining the}} number of permutations of bells in change ringing. Starting from two bells: [...] "first, two must be admitted to be varied in two ways" [...] which he illustrates by showing 1 2 and 2 1. [...] He then explains that with three bells there are [...] "three times two figures to be produced out of three" [...] which again is illustrated. [...] His explanation involves [...] "cast away 3, and 1.2 will remain; cast away 2, and 1.3 will remain; cast away 1, and 2.3 will remain". [...] He then moves on to four bells and repeats the casting away argument showing {{that there will be}} four different sets of three. [...] Effectively this is a <b>recursive</b> <b>process.</b> [...] He continues with five bells using the [...] "casting away" [...] method and tabulates the resulting 120 combinations. [...] At this point he gives up and remarks: ...|$|E
40|$|Human {{language}} emerged abruptly. Diverse body forms evolved suddenly. Seed-bearing plants spread rapidly. How do complex evolutionary innovations arise so quickly? Resolving alternative claims remains difficult. The great {{events of}} the past happened a long time ago. Cancer provides a model to study evolutionary innovation. A tumor must evolve many novel traits to become an aggressive cancer. I use what we know or could study about cancer to describe the key processes of innovation. In general, evolutionary systems form a hierarchy of <b>recursive</b> <b>processes.</b> Those <b>recursive</b> <b>processes</b> determine the rates at which innovations are generated, spread and transmitted. I relate the <b>recursive</b> <b>processes</b> to abrupt evolutionary innovation...|$|R
40|$|This paper studies a {{class of}} models in which agents' {{expectations}} influence the actual dynamics while the expectations themselves are the outcome of some <b>recursive</b> <b>processes</b> with bounded memory. Under the assumptions of heterogeneous expectations (or beliefs) and that the agents update their expectations by recursive L- and general aL -processes, {{the dynamics of the}} resulting expectations and recursive schemes are analyzed. It is shown that the dynamics of the system, including stability, instability and bifurcation, are affected differently by the <b>recursive</b> <b>processes...</b>|$|R
5000|$|Recursive {{procedures}} can {{be combined}} with [...] and [...] statements to create parallel <b>recursive</b> <b>processes.</b> The following example shows how a pipeline of processes can be recursively defined using a [...] statement.|$|R
5000|$|Logical {{modalities}} can {{be fully}} represented in this context, with <b>recursive</b> <b>process</b> inspired in neural models ...|$|E
5000|$|To {{make the}} <b>recursive</b> <b>process</b> more clear, the divided {{differences}} {{can be put}} in a tabular form: ...|$|E
5000|$|Wilms, Falko E. P. 1995. Entscheidungsverhalten als rekursiver Prozeß (trans. Decision-making {{behaviour}} as a <b>recursive</b> <b>process).</b> Gabler: Wiesbaden[...]|$|E
40|$|The aim of {{this paper}} is to study the aspect of {{recursion}} in the framework of the temporal semantics of action prefix (CCS-like) languages. The use of minimal and maximal fixed point temporal semantics, defined on a specific temporal logic, is proposed as a suitable tool for a deep analysis of possible semantics for guarded and unguarded recursion. This paper shows the results of this study on possible forms of guarded and unguarded recursion for a simple action language: minimal and maximal fixed point temporal semantics for guarded <b>recursive</b> <b>processes</b> differ only for infinite behaviours, while for unguarded <b>recursive</b> <b>processes</b> they differ completely...|$|R
40|$|AbstractDpi is a {{distributed}} {{version of}} the pi-calculus, in which processes are explicitly located, and a migration construct {{may be used for}} moving between locations. We argue that adding a recursion operator to the language increases significantly its descriptive power. But typing <b>recursive</b> <b>processes</b> requires the use of potentially infinite types. We show that the capability-based typing system of Dpi can be extended to co-inductive types so that <b>recursive</b> <b>processes</b> can be successfully supported. We also show that, as in the pi-calculus, recursion can be implemented via iteration. This translation improves on the standard ones by being compositional but still comes with a significant migration overhead in our distributed setting...|$|R
40|$|This article {{examines}} <b>recursive</b> <b>processes</b> in the Forest Stewardship Council (FSC), a nonstate forest standard-setting and accreditation organization. The FSC has developed numerous organizational structures and procedures that help it pool and analyze stakeholder input and feedback in standard-setting and implementation. We conceptualize <b>recursive</b> <b>processes</b> of stakeholder input and feedback and organizational responsiveness as recursivity by design. The {{article focuses on}} organizational legitimacy as a driver of <b>recursive</b> <b>processes.</b> The FSC's extensive participation procedures and structures present opportunities for incorporating stakeholder input and feedback in standard-setting {{and make it a}} responsive, legitimate, and effective governance scheme. It also enables the FSC to deal with challenges to its legitimacy and effectiveness. Whereas challenges associated with stakeholder participation and on-the-ground standard implementation are conceptualized in the literature as sources of organizational fragility and crisis, we argue that FSC's recursive structures help it accommodate criticism of and information about its performance and adjust its system to continuously emerging demands for more credibility and quality. 1 Recursivity by organizational design: A conceptualization 2 The Forest Stewardship Council 3 The FSC's recursive standard-setting structures 4 Meta-standardization: The WTO and the ISEAL Alliance 5 Recursivity in implementation and quality assurance Conclusion...|$|R
5000|$|A nonregular infinite-order {{triangular}} tiling can {{be generated}} by a <b>recursive</b> <b>process</b> from a central triangle as shown here: ...|$|E
50|$|Once the <b>recursive</b> <b>process</b> has completed, all large item sets {{with minimum}} {{coverage}} have been found, and association rule creation begins.|$|E
5000|$|... is a <b>recursive</b> <b>process</b> for {{constructing}} the descendant treeof an assigned finite p-group which {{is taken as}} {{the root of the}} tree.|$|E
30|$|The {{principles}} of calculations of Mat-CHN {{do not include}} any approximation, <b>recursive</b> <b>processes</b> with target options (e.g., percent of convergence), and need nothing more than individual data experimentally determined. This means also that Mat-CHN’s recalculated centesimal compositions must be considered as experimental results.|$|R
30|$|Two {{adjacent}} <b>recursive</b> <b>processes</b> converging to {{the mean}} {{value of a}} real-valued convex function are given. Refinements of the Hermite-Hadamard inequality are obtained. Some applications to the special means are discussed. A brief extension for convex mappings with variables in a linear space is also provided.|$|R
40|$|The {{replication}} operator {{was introduced}} by Milner for obtaining a simplified description of <b>recursive</b> <b>processes.</b> The standard interleaving semantics denotes the replication of a process P, written !P, a shorthand for its unbound parallel composition, operationally equivalent to the process P [P [ [...] ., with P repeated {{as many times as}} needed...|$|R
5000|$|A <b>recursive</b> <b>process</b> {{is applied}} to each subsets in order to select each x that could {{maximize}} the information gain. For example, at first an x is selected to partition P into Pd, Ps, Pb with the most information; then for each subset Pd, Ps, Pb, another y is selected to yield the most information gain (notice that the y could {{be the same as}} x [...] ). This <b>recursive</b> <b>process</b> ends when the entropy is zero so that either all pixels in that subset are corners or non-corners.|$|E
50|$|Lymphopoiesis can {{be viewed}} in a {{mathematical}} sense as a <b>recursive</b> <b>process</b> of cell division and also {{as a process of}} differentiation, measured by changes to the properties of cells.|$|E
50|$|Continuous {{predicate}} {{is a term}} {{coined by}} Charles Sanders Peirce (1839-1914) to describe a special type of relational predicate that results as the limit of a <b>recursive</b> <b>process</b> of hypostatic abstraction.|$|E
40|$|Many {{unintended}} and undesired {{consequences of}} Healthcare Information Technologies (HIT) flow from {{interactions between the}} HIT and the healthcare organization’s sociotechnical system—its workflows, culture, social interactions, and technologies. This paper develops and illustrates a conceptual model of these processes that we call Interactive Sociotechnical Analysis (ISTA). ISTA captures common types of interaction with special emphasis on <b>recursive</b> <b>processes,</b> i. e., feedback loops that alter the newly introduced HIT and promote second-level changes in the social system. ISTA draws on prior studies of unintended consequences, along with research in sociotechnical systems, ergonomics, social informatics, technology-in-practice, and social construction of technology. We present five types of sociotechnical interaction and illustrate each with cases from published research. The ISTA model should further research on emergent and <b>recursive</b> <b>processes</b> in HIT implementation and their unintended consequences. Familiarity with the model can also foster practitioners’ awareness of unanticipated consequences that only become evident during HIT implementation...|$|R
30|$|<b>Recursive</b> <b>processes,</b> by definition, {{can go on}} for a {{long time}} in the absence of proper {{terminating}} conditions resulting in unsuitable response times. Combining iterative mechanism wherever possible and limiting the level of recursion at the expense of search completeness can improve the response time of PolyViNE. However, the question regarding suitable response time depends on the arrival rate and the average life expectancy of VN requests.|$|R
40|$|We {{present a}} proof system for message-passing process calculi with recursion. The key {{inference}} rule {{to deal with}} <b>recursive</b> <b>processes</b> is a version of Unique Fixpoint Induction for process abstractions. We prove that the proof system is sound and also complete for guarded regular message-passing processes. We also show {{that the system is}} incomplete for unguarded processes and discuss more powerful extensions with inductive inference rules...|$|R
5000|$|Miscellaneous editors such as for JSD (process {{structure}} and network diagrams), <b>recursive</b> <b>process</b> graphs and transaction decomposition tables. These editors {{are no longer}} updated but they will remain available within TCM.|$|E
5000|$|Structuration theory: Basically {{talking about}} how the {{production}} and reproduction of social life is fundamentally a <b>recursive</b> <b>process</b> that stretches across potentially great spans of time and space. Important people: Anthony Giddens ...|$|E
5000|$|If the {{hypersphere}} {{crosses the}} plane, {{there could be}} nearer points {{on the other side}} of the plane, so the algorithm must move down the other branch of the tree from the current node looking for closer points, following the same <b>recursive</b> <b>process</b> as the entire search.|$|E
40|$|A Markov process, {{which is}} {{constructed}} recursively, arises in stochastic games with Markov strategies. In this study, we defined a special class of random <b>processes</b> called the <b>recursive</b> Markov <b>process,</b> which has infinitely many states {{but can be}} expressed in a closed form. We derive the characteristic equation which the marginal stationary distribution of an arbitrary <b>recursive</b> Markov <b>process</b> needs to satisfy. Comment: 11 pages, 1 figure, submitted to a journa...|$|R
40|$|We {{propose a}} {{graphical}} implementation for (possibly <b>recursive)</b> <b>processes</b> of the pi-calculus, encoding each process into a graph. Our implementation is sound and complete {{with respect to}} the structural congruence for the calculus: two processes are equivalent if and only if they are mapped into graphs with the same normal form. Most importantly, the encoding allows the use of standard graph rewriting mechanisms for modelling the reduction semantics of the calculus...|$|R
40|$|We study two {{refinements}} of {{the linear}} π-calculus that ensure deadlock freedom (the absence of stable states with pending linear communications) and lock freedom (the eventual completion of pending linear communications). The main feature of both type systems {{is a new}} form of channel polymorphism that affects their accuracy in a significant way: they are the first of their kind that can deal with <b>recursive</b> <b>processes</b> communicating in cyclic network topologies...|$|R
5000|$|Throughout an architect-led {{design-build}} project, {{design and}} construction considerations are inextricable from each other until each are optimized. This design-build approach allows for a dynamic, <b>recursive</b> <b>process</b> rather than a linear one, for construction expertise early and design expertise late. So, rather than designing-then-building, architect-led design-build works like this: ...|$|E
50|$|Sub-Saharan {{traditional}} divination systems display great sophistication. For example, the bamana sand divination uses {{well established}} symbolic codes {{that can be}} reproduced using four bits or marks. A binary system {{of one or two}} marks are combined. Random outcomes are generated using a fractal <b>recursive</b> <b>process.</b> It is analogous to a digital circuit but can be reproduced on any surface with one or two marks. This system is widespread in Sub-Saharan Africa.|$|E
50|$|As {{mentioned}} before {{the core of}} the Visual Turing Test is the query generator which generates a sequence of binary questions such that the answer to any question k is unpredictable given the correct answers to the previous k-1 questions. This is a <b>recursive</b> <b>process,</b> given a history of questions and their correct answers, the query generator either stops because there are no more unpredictable questions, or randomly selects an unpredictable question and adds it to the history.|$|E
40|$|Contextual locking is {{a scheme}} for {{synchronizing}} between possibly <b>recursive</b> <b>processes</b> {{that has been}} proposed by Chadha et al. recently. Contextual locking allows for arbitrary usage of locks within the same procedure call and Chadha et al. show that control-point reachability for two processes adhering to contextual locking is decidable in polynomial time. Here, we complement these results. We show that in presence of contextual locking, control-point reachability becomes PSPACEhard, already {{if the number of}} processes is increased to three. On the other hand, we show that PSPACE is both necessary and sufficient for deciding control-point reachability of k processes for k> 2, and that this upper bound remains valid even if dynamic spawning of new processes is allowed. Furthermore, we consider the problem of regular reachability, i. e., whether a configuration within a given regular set can be reached. Here, we show that this problem is decidable for <b>recursive</b> <b>processes</b> with dynamic thread creation and contextual locking. Finally, we generalize this result to processes that additionally use a form of join operations...|$|R
40|$|AbstractThis paper {{introduces}} a general framework of probabilistic and nondeterministic <b>recursive</b> <b>processes</b> that considers three complementary {{views of the}} semantics of concurrent processes: behavioural (testing semantics), denotational and axiomatic. The process algebra we present, PNAL, is a full probabilistic extension of EPL (Algebraic Theory of Processes, M. Hennessy) that maintains nondeterminism. This language allows us to consider both qualitative and quantitative aspects of concurrent systems, which are important {{in order to obtain}} more realistic models...|$|R
40|$|We {{describe}} an experience concerning the implementation {{and use of}} co-inductive types in the proof editor Coq. Co-inductive types are recursive types which, opposite to inductive ones, may be inhabited by infinite objects. In order to illustrate their use in Coq, we {{describe an}} axiomatisation of a calculus of broadcasting systems where <b>recursive</b> <b>processes</b> are represented using infinite objects. This calculus is used for developing a verification proof of the alternating bit protocol...|$|R
