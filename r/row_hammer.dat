30|10|Public
5|$|The <b>row</b> <b>hammer</b> {{effect has}} been used in some {{privilege}} escalation computer security exploits. Different hardware-based techniques exist to prevent the <b>row</b> <b>hammer</b> effect from occurring, including required support in some processors and types of DRAM memory modules.|$|E
500|$|On March 9, 2015, Google's Project Zero {{revealed}} two working privilege escalation exploits {{based on}} the <b>row</b> <b>hammer</b> effect, establishing its exploitable nature on the x86-64 architecture. [...] One of the revealed exploits targets the Google Native Client (NaCl) mechanism for running a limited subset of x86-64 machine instructions within a sandbox, exploiting the <b>row</b> <b>hammer</b> effect {{to escape from the}} sandbox and gain the ability to issue system calls directly. [...] This NaCl vulnerability, tracked as CVE-2015-0565, has been mitigated by modifying the NaCl so it does not allow execution of the clflush (cache line flush) machine instruction, which was previously believed to be required for constructing an effective <b>row</b> <b>hammer</b> attack.|$|E
500|$|The initial {{research}} into the <b>row</b> <b>hammer</b> effect, publicized {{by a group of}} authors in June 2014, described the nature of disturbance errors and indicated the potential for constructing an attack, but did not provide any examples of a working security exploit. [...] Another research paper, created by a group of authors and published in October 2014, did not imply the existence of any security-related issues arising from the <b>row</b> <b>hammer</b> effect.|$|E
40|$|Abstract—DRAM scaling {{has been}} the prime driver of {{increasing}} capacity of main memory systems. Unfortunately, lower technology nodes worsen the cell reliability as it increases the coupling between adjacent DRAM cells, thereby exacerbating different failure modes. This paper investigates the reliability problem due to <b>Row</b> <b>Hammering,</b> whereby frequent activations of a given row can cause data loss for its neighboring rows. As DRAM scales to lower technology nodes, the threshold {{for the number of}} row activations that causes data loss for the neighboring rows reduces, making <b>Row</b> <b>Hammering</b> a challenging problem for future DRAM chips. To overcome <b>Row</b> <b>Hammering,</b> we propose two architectural solutions: First, Counter-Based Row Activation (CRA), which uses a counter with each row to count the number of row activations. If the count exceeds the <b>row</b> <b>hammering</b> threshold, a dummy activation is sent to neighboring rows proactively to refresh the data. Second, Probabilistic Row Activation (PRA), which obviates storage overhead of tracking and simply allows the memory controller to proactively issue dummy activations to neighboring rows with a small probability for all memory access. Our evaluations show that these solutions are effective at mitigating <b>Row</b> <b>hammering</b> while causing negligible performance loss (< 1 %). F...|$|R
50|$|Each {{competitor}} {{completed a}} 500-meter row on a Concept-2 <b>rowing</b> machine, <b>hammered</b> a stake {{into the ground}} (4-foot for men and 3-foot for women), and then finished with another 500-meter row.|$|R
50|$|The Fatales played {{three games}} at the Beast of the East but were {{eliminated}} by the Death <b>Row</b> Dames of <b>Hammer</b> City Roller Girls.|$|R
500|$|The second exploit {{revealed}} by Project Zero runs as an unprivileged Linux process on the x86-64 architecture, exploiting the <b>row</b> <b>hammer</b> effect to gain unrestricted {{access to all}} physical memory installed in a computer. [...] By combining the disturbance errors with memory spraying, this exploit is capable of altering page table entries (PTEs) used by the virtual memory system for mapping virtual addresses to physical addresses, which results in the exploit gaining unrestricted memory access. [...] Due to its nature and {{the inability of the}} x86-64 architecture to make clflush a privileged machine instruction, this exploit can hardly be mitigated on computers that do not use hardware with built-in <b>row</b> <b>hammer</b> prevention mechanisms. [...] While testing the viability of exploits, Project Zero found that about half of the 29 tested laptops experienced disturbance errors, with some of them occurring on vulnerable laptops in less than five minutes of running row-hammer-inducing code; the tested laptops were manufactured between 2010 and 2014 and used non-ECC DDR3 memory.|$|E
500|$|Due {{to their}} {{necessity}} of {{huge numbers of}} rapidly performed DRAM row activations, <b>row</b> <b>hammer</b> exploits issue large numbers of uncached memory accesses that cause cache misses, which can be detected by monitoring the rate of cache misses for unusual peaks using hardware performance counters. [...] Version 6.0.0 of the memtest86 memory diagnostic software, released on February 13, 2015, includes a so-called hammer test that checks whether computer hardware is susceptible to disturbance errors.|$|E
500|$|<b>Row</b> <b>hammer</b> (also {{written as}} rowhammer) is an {{unintended}} side effect in {{dynamic random-access memory}} (DRAM) that causes memory cells to leak their charges and interact electrically between themselves, possibly altering the contents of nearby memory rows that were not addressed in the original memory access. [...] This circumvention of the isolation between DRAM memory cells results from the high cell density in modern DRAM, and can be triggered by specially crafted memory access patterns that rapidly activate the same memory rows numerous times.|$|E
6000|$|Wyllard laughed. [...] "I sat {{upon the}} {{steerage}} ladder, and am afraid I cheered the combatants on. It {{was really a}} glorious <b>row.</b> They <b>hammered</b> each other with tin plates, {{and some of them}} tried to use hoop-iron knives, which fortunately doubled up. They broke quite a few of the benches, and wrecked the mess table, but so far as I noticed the only one seriously hurt was a little chap who was quietly looking on." ...|$|R
40|$|The present work {{deals with}} the impact crusher energy {{efficiency}} at San Andres Zeolitic Plant. Varying the operational parameters levels (rotor velocity, <b>hammer</b> <b>row</b> number and crusher capacity) were carried up two experimental series: First series was aimed to obtain {{the influence of the}} operational parameters on the power consumed by the crusher motor; the second series evaluated the crusher specific energy consumption behavior. First series empirical model obtained describes the influence of operational parameters on power consumption. Also the relationship among specific energy consumption and crusher speed and capacity were obtained. The most efficient operational regimen corresponded to 1100 rpm of the rotor velocity, 2 <b>hammer</b> <b>row</b> numbers and 15 t/h of crusher capacity...|$|R
50|$|The countercompony (that is, {{two rows}} of squares of {{alternating}} tinctures) chief is {{a reference to the}} village’s former allegiance to the Counts of Sponheim, who for centuries ruled the “Hinder” County of Sponheim, and bore arms that were “chequy” (similar, but with more than two <b>rows),</b> while the <b>hammer</b> and anvil are canting for the first syllable in the municipality’s name (Schmiß- comes from the base of Schmiede, meaning “smithy”).|$|R
500|$|Since {{the release}} of Ivy Bridge microarchitecture, Intel Xeon {{processors}} support the so-called pseudo target row refresh (pTRR) {{that can be used}} in combination with pTRR-compliant DDR3 dual in-line memory modules (DIMMs) to mitigate the <b>row</b> <b>hammer</b> effect by automatically refreshing possible victim rows, with no negative impacts on performance or power consumption. [...] When used with DIMMs that are not pTRR-compliant, these Xeon processors by default fall back on performing DRAM refreshes at twice the usual frequency, which results in slightly higher memory access latency and may reduce the memory bandwidth by up to 24%.|$|E
500|$|In July 2015, a {{group of}} {{security}} researchers published a paper that describes an architecture- and instruction-set-independent way for exploiting the <b>row</b> <b>hammer</b> effect. [...] Instead of relying on the clflush instruction to perform cache flushes, this approach achieves uncached memory accesses by causing a very high rate of cache eviction using carefully selected memory access patterns. [...] Although the cache replacement policies differ between processors, this approach overcomes the architectural differences by employing an adaptive cache eviction strategy algorithm. [...] The proof of concept for this approach is provided both as a native code implementation, and as a pure JavaScript implementation that runs on Firefox39. [...] The JavaScript implementation, called Rowhammer.js, uses large typed arrays and relies on their internal allocation using large pages; as a result, it demonstrates a very high-level exploit of a very low-level vulnerability.|$|E
500|$|Different methods {{exist for}} {{more or less}} {{successful}} detection, prevention, correction or mitigation of the <b>row</b> <b>hammer</b> effect. [...] Tests show that simple ECC solutions, providing single-error correction and double-error detection (SECDED) capabilities, {{are not able to}} correct or detect all observed disturbance errors because some of them include more than two flipped bits per memory word. [...] A less effective solution is to introduce more frequent memory refreshing, with the refresh intervals shorter than the usual 64ms, but this technique results in higher power consumption and increased processing overhead; some vendors provide firmware updates that implement this type of mitigation. [...] One of the more complex prevention measures performs counter-based identification of frequently accessed memory rows and proactively refreshes their neighboring rows; another method issues additional infrequent random refreshes of memory rows neighboring the accessed rows regardless of their access frequency. [...] Research shows that these two prevention measures cause negligible performance impacts.|$|E
2500|$|The {{commercial}} {{opens with}} a dystopic, industrial setting in blue and grayish tones, showing a line of people (of ambiguous gender) marching in unison through a long tunnel monitored by a string of telescreens. This is {{in sharp contrast to}} the full-color shots of the nameless runner (Anya Major). She looks like a competitive track and field athlete, wearing an athletic [...] "uniform" [...] (red athletic shorts, running shoes, a white tank top with a cubist picture of Apple’s Macintosh computer, a white sweat band on her left wrist, and a red one on her right), and is carrying a large brass-headed <b>hammer.</b> <b>Rows</b> of marching minions evoke the opening scenes of Metropolis.|$|R
5000|$|Belarus used {{leftover}} {{funds from}} the Sydney Games to prepare athletes {{to compete in the}} 2004 Olympics. Belarus sent to Athens 153 athletes competing in 21 disciplines. Those athletes won 15 medals: two golds, six silvers, and nine bronzes. The gold medals were won in the 100 meter dash and in judo. The silver medals were won in weightlifting (2), boxing (2), <b>rowing</b> and the <b>hammer</b> throw. The bronzes were won in shooting, the discus throw, weightlifting, cycling, rowing (2), wrestling (Greco-Roman) and canoe/kayak (2). Ivan Tsikhan originally won the bronze in the hammer throw, but his medal was upgraded to silver after Adrian Annus of Hungary was stripped of his gold medal due to doping. Yulia Nestsiarenka, who wasn't expected to do well in the 100 meter dash, took home the gold in the event. She was clocked at 10.93 seconds, beating the second place American by [...]03 seconds. Wrestler Alexander Medved was tasked to carry the national flag during the opening ceremony.|$|R
5000|$|The {{commercial}} {{opens with}} a dystopic, industrial setting in blue and grayish tones, showing a line of people (of ambiguous gender) marching in unison through a long tunnel monitored by a string of telescreens. This is {{in sharp contrast to}} the full-color shots of the nameless runner (Anya Major). She looks like a competitive track and field athlete, wearing an athletic [...] "uniform" [...] (red athletic shorts, running shoes, a white tank top with a cubist picture of Apple’s Macintosh computer, a white sweat band on her left wrist, and a red one on her right), and is carrying a large brass-headed <b>hammer.</b> <b>Rows</b> of marching minions evoke the opening scenes of Metropolis.As she is chased by four police officers (presumably agents of the Thought Police) wearing black uniforms, protected by riot gear, helmets with visors covering their faces, and armed with large night sticks, she races towards a large screen with the image of a Big Brother-like figure (David Graham, also seen on the telescreens earlier) giving a speech: ...|$|R
500|$|Increased {{densities of}} DRAM {{integrated}} circuits (ICs) {{have led to}} physically smaller memory cells capable of storing smaller charges, resulting in lower operational noise margins, increased rates of electromagnetic interactions between memory cells, and greater possibility of data loss. [...] As a result, disturbance errors have been observed, being caused by cells interfering with each other's operation and manifesting as random changes in the values of bits stored in affected memory cells. [...] The awareness of disturbance errors {{dates back to the}} early 1970s and Intel1103 as the first commercially available DRAM IC; since then, DRAM manufacturers have employed various mitigation techniques to counteract disturbance errors, such as improving the isolation between cells and performing production testing. [...] However, researchers proved in a 2014 analysis that commercially available DDR3 DRAM chips manufactured in 2012 and 2013 are susceptible to disturbance errors, while using the term <b>row</b> <b>hammer</b> to name the associated side effect that led to observed bit flips.|$|E
500|$|The LPDDR4 memory {{standard}} {{published by}} JEDEC includes optional hardware {{support for the}} so-called target row refresh (TRR) that prevents the <b>row</b> <b>hammer</b> effect without negatively impacting performance or power consumption. [...] Additionally, some manufacturers implement TRR in their DDR4 products, {{although it is not}} part of the DDR4 memory standard published by JEDEC. [...] Internally, TRR identifies possible victim rows, by counting the number of row activations and comparing it against predefined chip-specific maximum activate count (MAC) and maximum activate window (tMAW) values, and refreshes these rows to prevent bit flips. [...] The MAC value is the maximum total number of row activations that may be encountered on a particular DRAM row within a time interval that is equal or shorter than the tMAW amount of time before its neighbouring rows are identified as victim rows; TRR may also flag a row as a victim row if the sum of row activations for its two neighboring rows reaches the MAC limit within the tMAW time window.|$|E
500|$|The {{opportunity}} for the <b>row</b> <b>hammer</b> effect to occur in DDR3 memory is primarily attributed to DDR3's high density of memory cells {{and the results of}} associated interactions between the cells, while rapid DRAM row activations have been determined as the primary cause. [...] Frequent row activations cause voltage fluctuations on the associated row selection lines, which have been observed to induce higher-than-natural discharge rates in capacitors belonging to nearby (adjacent, in most cases) memory rows, which are called victim rows; if the affected memory cells are not refreshed before they lose too much charge, disturbance errors occur. [...] Tests show that a disturbance error may be observed after performing around 139,000 subsequent memory row accesses (with cache flushes), and that up to one memory cell in every 1,700 cells may be susceptible. [...] Those tests also show that the rate of disturbance errors is not substantially affected by increased environment temperature, while it depends on the actual contents of DRAM because certain bit patterns result in significantly higher disturbance error rates.|$|E
40|$|The {{study is}} an attempt {{to assess the impact of}} {{self-evaluation}} and motivation on physical exercise. In the chapter, material and methods describe the specificity of the research methodology, their purpose being to compare the outcome of subjective evaluation after FMS with the objective outcome of FMS, self-esteem, and motivation analysis for sport, and the hypothesis that Additional activity does not affect the higher self-esteem and it can be assumed that the age range does not affect the result of external motivation. Materials and research tools such as questionnaire, FMS test and SMS scale were also defined. The research was done on a group of 30 people. The group included 14 women and 16 men. More than half of the respondents (53 %) are between 20 and 22 years of age, 27 % are between 23 and 24 years old, and 20 % are between 17 and 19 years of age. Analysis of the research revealed that as many as 19 people trained their discipline over 6 years, another 9 had a training period of 2 - 4 years, while only 2 respondents are beginners. It has also been reported that men in the research group practice up to 7 training units a week more than women. Up to half of the group, 15 people practice their amateur discipline without achieving any sports successes, 9 people are players and 2 and 3 league players, while only 6 are participating in the championship. In turn, 24 out of 30 respondents have additional physical activity. Participants in the study rated their physical fitness very high, 28 out of 30 rated it very good and good, and only 2 rated it sufficiently. The most subjectively assessed element of physical fitness was the strength that 22 people rated very good and good. This can be a testimony to the volleyballs grown by the test subjects - 43 %; Other sports 27 % (tennis, table tennis, <b>hammering,</b> <b>rowing,</b> basketball, football); Bodybuilding 17 % and combat sports 13 %. The lowest rated motor ability is flexibility, 20 respondents rated either sufficiently or badly. This can be a sign of neglect of training in terms of exercise flexibility, as evidenced by the numerous traumas reported by the persons examined. After summing up the results of subjective assessments of the seven FMS tests, the following result was obtained: Half of the subjects surveyed ranged from 10 to 13 points, another 13 assessed their trials in the range of 15 - 20, while the other two showed low self-esteem. Go for 9 and 4 points. Of the 30 people tested, only 6 of them do not take any additional physical activity. In this group, only one subjective observation can be observed after the tests have been performed. The results of 5 other people are comparable to the results of people who practice additional sports. This fact makes it possible to make a claim and to confirm the hypothesis that additional physical activity does not affect self-esteem. SMS Scale (Sport Motivation Scale) study. "SMS" gives you the opportunity to explore the level of motivation in relation to physical activity, such as internal motivation, the results of which are as follows: 13 respondents rated their internal motivation high, another 13 were sufficient, and 4 were poorly rated. Range from 6 to 10 points. Research has shown that internal motivation in the research group is very high, 26 in 30 subjects are motivated by internal motivation to exercise. Thanks to the "SMS" scale, external motivation was also assessed. Research has shown that 26 respondents questioned the impact of external factors on motivation for physical activity. For 3 people, external motivation is important and 1 person has confirmed that external factors have a significant impact on her personal motivation. After comparing these two analyzes, it can be stated that there are no external factors, but internal factors are the main motivator when it comes to practicing sport. The "FMS" study (functional movement screen) showed that the majority of the respondents had a good self-assessment. The differences between the subjective assessment and the objective evaluation of these individuals were a maximum of 4 points. In the next 6 cases, the inadequate self-esteem may be observed, as the subjects are assessed too low for the FMS test. Differences between subjective and objective ratings ranged from 5 to a maximum of 8 points. In one case, an inadequate self-assessment was observed, where the test result was lower than the one declared...|$|R
50|$|The <b>row</b> <b>hammer</b> {{effect has}} been used in some {{privilege}} escalation computer security exploits. Different hardware-based techniques exist to prevent the <b>row</b> <b>hammer</b> effect from occurring, including required support in some processors and types of DRAM memory modules.|$|E
5000|$|On March 9, 2015, Google's Project Zero {{revealed}} two working privilege escalation exploits {{based on}} the <b>row</b> <b>hammer</b> effect, establishing its exploitable nature on the x86-64 architecture. One of the revealed exploits targets the Google Native Client (NaCl) mechanism for running a limited subset of x86-64 machine instructions within a sandbox, exploiting the <b>row</b> <b>hammer</b> effect {{to escape from the}} sandbox and gain the ability to issue system calls directly. This NaCl vulnerability, tracked as CVE-2015-0565, has been mitigated by modifying the NaCl so it does not allow execution of the [...] (cache line flush) machine instruction, which was previously believed to be required for constructing an effective <b>row</b> <b>hammer</b> attack.|$|E
5000|$|Allows {{contamination}} of cryptographic resources in other virtualized guests via the memory <b>row</b> <b>hammer</b> attack ...|$|E
5000|$|The initial {{research}} into the <b>row</b> <b>hammer</b> effect, publicized {{by a group of}} authors in June 2014, described the nature of disturbance errors and indicated the potential for constructing an attack, but did not provide any examples of a working security exploit. [...] Another research paper, created by a group of authors and published in October 2014, did not imply the existence of any security-related issues arising from the <b>row</b> <b>hammer</b> effect.|$|E
5000|$|Software-initiated fault attacks [...] - [...] Currently a rare {{class of}} side-channels, <b>Row</b> <b>hammer</b> {{is an example}} in which off-limits memory can be changed by {{accessing}} adjacent memory too often (causing state retention loss).|$|E
50|$|Recent {{advances}} such as {{the discovery}} of the <b>row</b> <b>hammer</b> effect in DRAM suggests that with the right software an artificial intelligence could be constructed to utilize this inherently random effect in an existing laptop computer of sufficient memory density which represents another promising avenue of research.|$|E
5000|$|The second exploit {{revealed}} by Project Zero runs as an unprivileged Linux process on the x86-64 architecture, exploiting the <b>row</b> <b>hammer</b> effect to gain unrestricted {{access to all}} physical memory installed in a computer. By combining the disturbance errors with memory spraying, this exploit is capable of altering page table entries (PTEs) used by the virtual memory system for mapping virtual addresses to physical addresses, which results in the exploit gaining unrestricted memory access. Due to its nature and {{the inability of the}} x86-64 architecture to make [...] a privileged machine instruction, this exploit can hardly be mitigated on computers that do not use hardware with built-in <b>row</b> <b>hammer</b> prevention mechanisms. While testing the viability of exploits, Project Zero found that about half of the 29 tested laptops experienced disturbance errors, with some of them occurring on vulnerable laptops in less than five minutes of running row-hammer-inducing code; the tested laptops were manufactured between 2010 and 2014 and used non-ECC DDR3 memory.|$|E
5000|$|Due {{to their}} {{necessity}} of {{huge numbers of}} rapidly performed DRAM row activations, <b>row</b> <b>hammer</b> exploits issue large numbers of uncached memory accesses that cause cache misses, which can be detected by monitoring the rate of cache misses for unusual peaks using hardware performance counters. [...] Version 6.0.0 of the memtest86 memory diagnostic software, released on February 13, 2015, includes a so-called hammer test that checks whether computer hardware is susceptible to disturbance errors.|$|E
50|$|<b>Row</b> <b>hammer</b> (also {{written as}} rowhammer) is an {{unintended}} side effect in {{dynamic random-access memory}} (DRAM) that causes memory cells to leak their charges and interact electrically between themselves, possibly altering the contents of nearby memory rows that were not addressed in the original memory access. This circumvention of the isolation between DRAM memory cells results from the high cell density in modern DRAM, and can be triggered by specially crafted memory access patterns that rapidly activate the same memory rows numerous times.|$|E
50|$|Some tests {{conclude}} that the isolation of DRAM memory cells can be circumvented by unintended side effects of specially crafted accesses to adjacent cells. Thus, accessing data stored in DRAM causes memory cells to leak their charges and interact electrically, {{as a result of}} high cell density in modern memory, altering the content of nearby memory rows that actually were not addressed in the original memory access. This effect is known as <b>row</b> <b>hammer,</b> and it has also been used in some privilege escalation computer security exploits.|$|E
50|$|Since {{the release}} of Ivy Bridge microarchitecture, Intel Xeon {{processors}} support the so-called pseudo target row refresh (pTRR) {{that can be used}} in combination with pTRR-compliant DDR3 dual in-line memory modules (DIMMs) to mitigate the <b>row</b> <b>hammer</b> effect by automatically refreshing possible victim rows, with no negative impacts on performance or power consumption. When used with DIMMs that are not pTRR-compliant, these Xeon processors by default fall back on performing DRAM refreshes at twice the usual frequency, which results in slightly higher memory access latency and may reduce the memory bandwidth by up to 2 - 4%.|$|E
50|$|Dynamic memory, by definition, {{requires}} periodic refresh. Furthermore, reading {{dynamic memory}} is a destructive operation, requiring a recharge of the storage {{cells in the}} row that has been read. If these processes are imperfect, a read operation can cause soft errors. In particular, {{there is a risk}} that some charge can leak between nearby cells, causing the refresh or read of one row to cause a disturbance error in an adjacent or even nearby row. The awareness of disturbance errors dates back the first commercially available DRAM in the early 1970s (the Intel 1103). Despite the mitigation techniques employed by manufacturers, commercial researchers proved in a 2014 analysis that commercially available DDR3 DRAM chips manufactured in 2012 and 2013 are susceptible to disturbance errors. The associated side effect that led to observed bit flips has been dubbed <b>row</b> <b>hammer.</b>|$|E
5000|$|In July 2015, a {{group of}} {{security}} researchers published a paper that describes an architecture- and instruction-set-independent way for exploiting the <b>row</b> <b>hammer</b> effect. Instead of relying on the [...] instruction to perform cache flushes, this approach achieves uncached memory accesses by causing a very high rate of cache eviction using carefully selected memory access patterns. Although the cache replacement policies differ between processors, this approach overcomes the architectural differences by employing an adaptive cache eviction strategy algorithm. The proof of concept for this approach is provided both as a native code implementation, and as a pure JavaScript implementation that runs on Firefox 39. The JavaScript implementation, called Rowhammer.js, uses large typed arrays and relies on their internal allocation using large pages; as a result, it demonstrates a very high-level exploit of a very low-level vulnerability.|$|E
50|$|Increased {{densities of}} DRAM {{integrated}} circuits (ICs) {{have led to}} physically smaller memory cells capable of storing smaller charges, resulting in lower operational noise margins, increased rates of electromagnetic interactions between memory cells, and greater possibility of data loss. As a result, disturbance errors have been observed, being caused by cells interfering with each other's operation and manifesting as random changes in the values of bits stored in affected memory cells. The awareness of disturbance errors {{dates back to the}} early 1970s and Intel 1103 as the first commercially available DRAM IC; since then, DRAM manufacturers have employed various mitigation techniques to counteract disturbance errors, such as improving the isolation between cells and performing production testing. However, researchers proved in a 2014 analysis that commercially available DDR3 DRAM chips manufactured in 2012 and 2013 are susceptible to disturbance errors, while using the term <b>row</b> <b>hammer</b> to name the associated side effect that led to observed bit flips.|$|E
