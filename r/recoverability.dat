815|0|Public
25|$|Water-Supply Paper (WSP): Reports on {{all aspects}} of hydrology, {{including}} quality, <b>recoverability,</b> and use of water resources; statistical reports on streamflow, floods, groundwater levels, and water quality; and collections of short papers on related topics.|$|E
25|$|Because the geology of the {{subsurface}} {{cannot be}} examined directly, indirect techniques {{must be used}} to estimate the size and <b>recoverability</b> of the resource. While new technologies have increased the accuracy of these techniques, significant uncertainties still remain. In general, most early estimates of the reserves of an oil field are conservative and tend to grow with time. This phenomenon is called reserves growth.|$|E
25|$|This is {{when the}} mining company makes the {{decision}} whether to develop the mine or {{to walk away from}} the project. This includes mine planning to evaluate the economically recoverable portion of the deposit, the metallurgy and ore <b>recoverability,</b> marketability and payability of the ore concentrates, engineering concerns, milling and infrastructure costs, finance and equity requirements, and an analysis of the proposed mine from the initial excavation all the way through to reclamation. The proportion of a deposit that is economically recoverable is dependent on the enrichment factor of the ore in the area.|$|E
25|$|While local (to a {{database}} system) relaxed serializability methods compromise serializability for performance gain (and are utilized {{only when the}} application can tolerate possible resulting inaccuracies, or its integrity is unharmed), it is unclear that various proposed relaxed global serializability methods which compromise global serializability, provide any performance gain over commitment ordering which guarantees global serializability. Typically, the declared intention of such methods has not been performance gain over effective global serializability methods (which apparently have been unknown to the inventors), but rather correctness criteria alternatives {{due to lack of}} a known effective global serializability method. Oddly, some of them were introduced years after CO had been introduced, and some even quote CO without realizing that it provides an effective global serializability solution, and thus without providing any performance comparison with CO to justify them as alternatives to global serializability for some applications (e.g., Two-level serializability). Two-level serializability is even presented as a major global concurrency control method in a 2010 edition of a text-book on databases (authored by two of the original authors of Two-level serializability, where one of them, Avi Silberschatz, is also an author of the original Strong <b>recoverability</b> articles). This book neither mentions CO nor references it, and strangely, apparently does not consider CO a valid Global serializability solution.|$|E
2500|$|... ext3 lacks [...] "modern" [...] {{filesystem}} features, such as dynamic inode allocation and extents. This situation might {{sometimes be}} a disadvantage, but for <b>recoverability,</b> it {{is a significant}} advantage. The file system metadata is all in fixed, well-known locations, and data structures have some redundancy. In significant data corruption, ext2 or ext3 may be recoverable, while a tree-based file system may not.|$|E
50|$|The above (conflict) {{serializability}} {{techniques in}} their general form {{do not provide}} <b>recoverability.</b> Special enhancements are needed for adding <b>recoverability.</b>|$|E
50|$|Concurrency control {{typically}} also {{ensures the}} <b>Recoverability</b> property of schedules for maintaining correctness {{in cases of}} aborted transactions (which can always happen for many reasons). <b>Recoverability</b> (from abort) means that no committed transaction in a schedule has read data written by an aborted transaction. Such data disappear from the database (upon the abort) and are parts of an incorrect database state. Reading such data violates the consistency rule of ACID. Unlike Serializability, <b>Recoverability</b> cannot be compromised, relaxed at any case, since any relaxation results in quick database integrity violation upon aborts. The major methods listed above provide serializability mechanisms. None of them in its general form automatically provides <b>recoverability,</b> and special considerations and mechanism enhancements are needed to support <b>recoverability.</b> A commonly utilized special case of <b>recoverability</b> is Strictness, which allows efficient database recovery from failure (but excludes optimistic implementations; e.g., Strict CO (SCO) cannot have an optimistic implementation, but has semi-optimistic ones).|$|E
5000|$|The Commitment {{ordering}} (CO; Raz 1990, 1992, 1994, 2009) schedule property {{has been}} referred to also as Dynamic atomicity (since 1988), commit ordering, commit order serializability, and strong <b>recoverability</b> (since 1991). The latter is a misleading name since CO is incomparable with <b>recoverability,</b> and the term [...] "strong" [...] implies a special case. This means that a schedule with a strong <b>recoverability</b> property does not necessarily have the CO property, and vice versa.|$|E
5000|$|... #Caption: Venn diagram for {{serializability}} and <b>recoverability</b> classes ...|$|E
5000|$|A module to {{determine}} the loss-of-offsite power frequency and <b>recoverability</b> ...|$|E
5000|$|A major {{characteristic}} of a database transaction is atomicity, which means that it either commits, i.e., all its operations' results take effect in the database, or aborts (rolled-back), all its operations' results {{do not have any}} effect on the database ("all or nothing" [...] semantics of a transaction). In all real systems transactions can abort for many reasons, and serializability by itself is not sufficient for correctness. Schedules also need to possess the <b>recoverability</b> (from abort) property. <b>Recoverability</b> means that committed transactions have not read data written by aborted transactions (whose effects do not exist in the resulting database states). While serializability is currently compromised on purpose in many applications for better performance (only in cases when application's correctness is not harmed), compromising <b>recoverability</b> would quickly violate the database's integrity, {{as well as that of}} transactions' results external to the database. A schedule with the <b>recoverability</b> property (a recoverable schedule) [...] "recovers" [...] from aborts by itself, i.e., aborts do not harm the integrity of its committed transactions and resulting database. This is false without <b>recoverability,</b> where the likely integrity violations (resulting incorrect database data) need special, typically manual, corrective actions in the database.|$|E
5000|$|The {{following}} expressions {{illustrate the}} hierarachical (containment) relationships between serializability and <b>recoverability</b> classes: ...|$|E
50|$|If the {{resource}} cannot {{be provided by}} the operator, the operator can DS the task as a last resort. This is different from other systems, which automatically terminate a task when a resource such as a file is not available. The MCP provides this level of operator <b>recoverability</b> of tasks. Other systems force programmers to add code to check {{for the presence of}} files before accessing them, and thus extra code must be written in every case to provide <b>recoverability,</b> or process synchronization. Such code may be written in an MCP program when it is not desirable to have a task wait, but because of the operator-level <b>recoverability,</b> this is not forced and therefore makes programming much simpler.|$|E
50|$|Information {{about the}} <b>recoverability</b> or {{classification}} of recorded asset amounts or the amounts or classification of liabilities.|$|E
5000|$|<b>Recoverability</b> - longer-term post-hit effects, damage control, and firefighting, {{capability}} restoration, or (in extremis) {{escape and}} evacuation.|$|E
50|$|As of 14 May 2009, Continental {{models were}} {{certified}} to have 85% recyclability (or 95% <b>recoverability)</b> of materials.|$|E
50|$|CO {{enforcement}} {{by itself}} is not sufficient as a concurrency control mechanism, since CO lacks the <b>recoverability</b> property, which should be supported as well.|$|E
5000|$|Each object {{has both}} data (an uninterpreted {{sequence}} of bytes) and metadata (an extensible set of attributes describing the object); physically encapsulating both together benefits <b>recoverability.</b>|$|E
5000|$|Reduxio {{builds a}} hybrid storage {{platform}} that provides high capacity savings and data <b>recoverability</b> to any {{second in the}} past {{through a set of}} unique technologies: ...|$|E
50|$|Implementing <b>recoverability</b> in {{its general}} form {{may result in}} {{cascading}} aborts: Aborting one transaction {{may result in a}} need to abort a second transaction, and then a third, and so on. This results in a waste of already partially executed transactions, and may result also in a performance penalty. Avoiding cascading aborts (ACA, or Cascadelessness) is a special case of <b>recoverability</b> that exactly prevents such phenomenon. Often in practice a special case of ACA is utilized: Strictness. Strictness allows an efficient database recovery from failure.|$|E
50|$|In {{military}} terminology, vulnerability is {{a subset}} of survivability, the others being susceptibility and <b>recoverability.</b> Vulnerability is defined in various ways depending on the nation and service arm concerned, but in general {{it refers to the}} near-instantaneous effects of a weapon attack. In aviation it is defined as the inability of an aircraft to withstand the damage caused by the man-made hostile environment. In some definitions, <b>recoverability</b> (damage control, firefighting, restoration of capability) is included in vulnerability. Some military services develop their own concept of vulnerability.|$|E
50|$|All TimesTen data {{exists in}} RAM, however TimesTen does utilize {{non-volatile}} storage (such as a hard disk) for database persistence and <b>recoverability.</b> A TimesTen database stores all transactional data modifications in an in-memory log buffer, which is eventually persisted to disk {{in the form}} of transaction log files. In addition, TimesTen also persists snapshots of the in-memory database, called checkpoint files, to disk. The combination of checkpoint files and transaction log files allow TimesTen to provide <b>recoverability</b> {{in the event of a}} system failure. TimesTen implements a parallel log manager in order to maximize throughput on large SMP systems.|$|E
50|$|The assurance, guarantee, or {{validation}} {{that what}} was backed up is recoverable whenever it is required is critical. Data stored in the service provider's cloud must undergo regular integrity validation to ensure its <b>recoverability.</b>|$|E
50|$|Unless {{schedule}} {{classes are}} inherently blocking (i.e., they cannot be implemented without data-access operations blocking; e.g., 2PL, SS2PL and SCO above; see chart), {{they can be}} implemented also using optimistic techniques (e.g., Serializability, <b>Recoverability).</b>|$|E
50|$|Water-Supply Paper (WSP): Reports on {{all aspects}} of hydrology, {{including}} quality, <b>recoverability,</b> and use of water resources; statistical reports on streamflow, floods, groundwater levels, and water quality; and collections of short papers on related topics.|$|E
5000|$|The {{following}} theorem gives {{necessary and}} sufficient condition on the <b>recoverability</b> {{of a given}} -sparse vector in [...] The proof of the theorem is a standard one, and the proof supplied here is summarized from Holger Rauhut.|$|E
50|$|Note {{that the}} <b>recoverability</b> {{property}} is needed {{even if no}} database failure occurs and no database recovery from failure is needed. It is rather needed to correctly automatically handle aborts, which may be unrelated to database failure and recovery from failure.|$|E
50|$|TimesTen is an in-memory, {{relational}} {{database management system}} with persistence and <b>recoverability.</b> Originally designed and implemented at Hewlett-Packard labs in Palo Alto, California, TimesTen spun out into a separate startup in 1996 and was acquired by Oracle Corporation in 2005.|$|E
50|$|Comment: Note {{that the}} <b>Recoverability</b> {{property}} is needed {{even if no}} database failure occurs and no database recovery from failure is needed. It is rather needed to correctly automatically handle transaction aborts, which may be unrelated to database failure and recovery from it.|$|E
5000|$|Pessimistic: In Pessimistic {{concurrency}} control a transaction blocks data access operations of other transactions upon conflicts, and conflicts are non-materialized until blocking is removed. This {{is done to}} ensure that operations that may violate serializability (and in practice also <b>recoverability)</b> do not occur.|$|E
50|$|The {{classical}} {{definition of}} naval survivability includes three main aspects, which are susceptibility, vulnerability, and recoverability; although, <b>recoverability</b> is often subsumed within vulnerability.Susceptibility consists {{of all the}} factors that expose the ship to the weapons effects in a combat environment. These factors in general are the operating conditions, the threat, and {{the features of the}} ship itself. The operating conditions, such as sea state, weather and atmospheric conditions, vary considerably, and their influence is difficult to address (hence they are often not accounted for in survivability assessment). The threat is dependent on the weapons directed against the ship and weapon’s performance, such as the range. The features of the ship in this sense include platform signatures (radar, infrared, acoustic, magnetic), the defensive systems on board, such as surface-to-air missiles, EW and decoys, and also the tactics employed by the platform in countering the attack (aspects such as speed, maneuverability, chosen aspect presented to the threat).Vulnerability refers to the ability of the vessel to withstand the short-term effects of the threat weapon. Vulnerability is an attribute typical to the vessel and therefore heavilyaffected by the vessel’s basic characteristics such as size, subdivision, armouring, and other hardening features, and also the design of the ship's systems, in particular the location of equipment, degrees of redundancy and separation, and the presence within a system of single point failures. <b>Recoverability</b> refers to vessel’s ability to restore and maintain its functionality after sustaining damage. Thus, <b>recoverability</b> is dependent on the actions aimed to neutralize the effects of the damage. These actions include firefighting, limiting the extent of flooding, and dewatering. Besides the equipment, the crew also has a vital role in <b>recoverability.</b>|$|E
50|$|In September 2006, Borland {{announced}} {{the availability of}} InterBase 2007. Its new features include point in time recovery via journaling (which also allows <b>recoverability</b> without the performance penalty of synchronous writes), incremental backup, batch statement operations, new Unicode character encodings, and a new ODBC driver.|$|E
5000|$|Unstructured : An {{unstructured}} repository {{may simply}} be a stack of or CD-Rs or DVD-Rs with minimal information about what was backed up and when. This is the easiest to implement, but probably {{the least likely to}} achieve a high level of <b>recoverability</b> as it lacks automation.|$|E
50|$|Unlike Serializability, Distributed <b>recoverability</b> and Distributed {{strictness}} can {{be achieved}} efficiently in a straightforward way, similarly to the way Distributed CO is achieved: In each database system {{they have to be}} applied locally, and employ a vote ordering strategy for the Two-phase commit protocol (2PC; Raz 1992, page 307).|$|E
50|$|Concurrency control {{comprises}} {{the underlying mechanisms}} in a DBMS which handle isolation and guarantee related correctness. It is heavily used by the database and storage engines (see above) both to guarantee the correct execution of concurrent transactions, and (different mechanisms) the correctness of other DBMS processes. The transaction-related mechanisms typically constrain the database data access operations' timing (transaction schedules) to certain orders characterized as the serializability and <b>recoverability</b> schedule properties. Constraining database access operation execution typically means reduced performance (rates of execution), and thus concurrency control mechanisms are typically designed {{to provide the best}} performance possible under the constraints. Often, when possible without harming correctness, the serializability property is compromised for better performance. However, <b>recoverability</b> cannot be compromised, since such typically results in a quick database integrity violation.|$|E
50|$|Stress testing {{tries to}} break the system under test by {{overwhelming}} its resources or by taking resources away from it (in which case it is sometimes called negative testing). The main purpose {{of this process is}} to make sure that the system fails and recovers gracefully—a quality known as <b>recoverability.</b>|$|E
