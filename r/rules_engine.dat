112|622|Public
25|$|A {{market has}} {{developed}} for enterprise software leveraging the business process management concepts {{to organize and}} automate processes. The recent convergence of these software from distinct pieces such as business <b>rules</b> <b>engine,</b> business process modelling, business activity monitoring and Human Workflow has given birth to integrated Business Process Management Suites.|$|E
2500|$|Previously, Hasbro {{had created}} a board game version of Star Wars Monopoly, which has sold very well; 1997 was the year of a Special Edition version of the Star Wars {{original}} trilogy, so {{it was decided to}} release a video game version for the Christmas season, to build on the Monopoly franchise. Programmer Alexander G. M. Smith was in charge of software design for the <b>rules</b> <b>engine.</b> The 3D crew produced a sizzle reel to show Hasbro, and the project was approved. Anthony Daniels, who portrays the droid C3PO in the Star Wars films, contributed his writing skills to the game. During the development process, the [...] "simple but effective dialog boxes and 2D board were replaced by fancy animations, sound effects, and speech". Due to the rushed development toward the end, certain features such as a user interface for trading immunities and futures was left out, while a Japanese version of the title was postponed. The game was officially finished on October 18, 1997.|$|E
50|$|OpenL Tablets is a {{business}} rule management system (BRMS) and {{a business}} <b>rules</b> <b>engine</b> (BRE) based on table representation of <b>rules.</b> <b>Engine</b> implements optimized sequential algorithm. OpenL includes such table types as decision table, decision tree, spreadsheet-like calculator.|$|E
50|$|The biggest {{difference}} between these types is that production <b>rule</b> <b>engines</b> execute when a user or application invokes them, usually in a stateless manner. A reactive <b>rule</b> <b>engine</b> reacts automatically when events occur, usually in a stateful manner. Many (and indeed most) popular commercial <b>rule</b> <b>engines</b> have both production and reaction rule capabilities, although they might emphasize one class over another. For example, most business <b>rules</b> <b>engines</b> are primarily production <b>rules</b> <b>engines,</b> whereas complex event processing <b>rules</b> <b>engines</b> emphasize reaction <b>rules.</b>|$|R
40|$|<b>Rule</b> <b>engines</b> {{all have}} their own {{proprietary}} rule storage formats � Different application domains have different requirements and needs, for example o Finance o Healthcare Research Objectives � Examine the various <b>rule</b> <b>engines</b> {{in order to determine}} their features � Determine necessary features for <b>rule</b> <b>engines</b> � Study the specific characteristics needed of <b>rule</b> <b>engines</b> for the healthcare and finance application domains. Specifically to determine: o The features that are necessary in a <b>rule</b> <b>engine</b> o Each feature’s priority level, as in how important they are in the <b>rule</b> <b>engine</b> � Use the general and specific domain requirements as an evaluation benchmark � Develop a comparison framework {{in order to determine the}} optimal <b>rule</b> <b>engine</b> for a particular application domai...|$|R
5000|$|The {{other type}} of <b>rule</b> <b>engine</b> {{processes}} so-called reaction/Event Condition Action rules. The reactive <b>rule</b> <b>engines</b> detect and react to incoming events and process event patterns. For example, a reactive <b>rule</b> <b>engine</b> {{could be used to}} alert a manager when certain items are out of stock.|$|R
50|$|The NMIS {{business}} <b>rules</b> <b>engine</b> classifies {{events on}} their business impact, {{not just the}} technical nature. The <b>rules</b> <b>engine</b> is extremely powerful; however it can be configured in minutes for a network with {{a small number of}} devices to hours for networks with large numbers of devices.|$|E
5000|$|Business process managementBusiness ruleBusiness rules approachBusiness <b>rules</b> <b>engine</b> ...|$|E
5000|$|Oracle Business Rules, {{contains}} a JSR 94 Business <b>rules</b> <b>engine</b> ...|$|E
50|$|Most BRMS vendors {{have evolved}} from <b>rule</b> <b>engine</b> vendors to provide business-usable {{software}} development lifecycle solutions, based on declarative definitions of business rules executed {{in their own}} <b>rule</b> <b>engine.</b>|$|R
40|$|Organ {{allocation}} {{systems have}} become complex {{and difficult to}} comprehend. We introduced decision tables to specify the rules of allocation systems for different organs. A <b>rule</b> <b>engine</b> with decision tables as input was tested for the Kidney Allocation System (ETKAS). We compared this <b>rule</b> <b>engine</b> with the currently used ETKAS by running 11, 000 historical match runs and by running the <b>rule</b> <b>engine</b> in parallel with the ETKAS on our allocation system. Decision tables were easy to implement and successful in verifying correctness, completeness, and consistency. The outcomes of the 11, 000 historical matches in the <b>rule</b> <b>engine</b> and the ETKAS were exactly the same. Running the <b>rule</b> <b>engine</b> simultaneously in parallel and in real time with the ETKAS also produced no differences. Specifying organ allocation rules in decision tables is already a great step forward in enhancing {{the clarity of the}} systems. Yet, using these tables as <b>rule</b> <b>engine</b> input for matches optimizes the flexibility, simplicity and clarity of the whole process, from specification to the performed matches, and in addition this new method allows well controlled simulations...|$|R
50|$|PRR {{was mostly}} defined {{by and for}} vendors of Business <b>Rule</b> <b>Engines</b> (BREs) (sometimes termed Business <b>Rules</b> <b>Engine(s),</b> like in Wikipedia). Contributors have {{included}} all the major BRE vendors, members of RuleML, and leading UML vendors.|$|R
5000|$|Business <b>rules</b> <b>engine</b> (BRE). This is a Rete {{algorithm}} rule engine.|$|E
5000|$|Gensym G2, a {{real-time}} {{expert system}} and business <b>rules</b> <b>engine</b> (BRE) ...|$|E
5000|$|Inventory - {{multiple}} facility, multiple location, customizable <b>rules</b> <b>engine,</b> shipment consolidation ...|$|E
40|$|Abstract- Business Organization’s success {{depends on}} agility of {{organization}} {{to cope with}} the dynamic business environment. Involving a software team frequently for changing the business policies is not a good idea. Such needs can be catered using <b>rule</b> <b>engine.</b> Business <b>rules</b> can be written separately from the application code using <b>rule</b> <b>engine</b> which makes it easy for a business user to change the rules as and when needed without the help of a programmer. Traditionally, <b>rule</b> <b>engines</b> are designed to work on high-end processors, having them on a low-end processor is a big challenge. In this era we are dealing with palmtops and iPhones, which are going to replace the bulky desktops even for computational purposes. Objective {{of this paper is to}} discuss <b>rule</b> <b>engine</b> on mobile platform, the challenges and solutions while implementing <b>rule</b> <b>engine</b> on mobile platform, particularly JRuleEngine on Android as a mobile platform...|$|R
40|$|Abstract. There {{is a large}} {{literature}} concerning <b>rule</b> <b>engines</b> (forward chaining or backward chaining). During {{the last}} thirty years there were various proposals such as RETE, TREAT and the derived Gator algorithm. Significantly, RETE was embedded into various expert systems such as Clips and its successor Jess, and Drools including in a number of commercial <b>rule</b> <b>engines</b> and was extended various times including with support for ECA rules. However, none of them is able to directly process DOM Events. The goal {{of this paper is to}} present the architecture of a forward chaining Event-Condition-Action (ECA) <b>rule</b> <b>engine</b> capable to handle Document-Object-Model Events. This architecture is instantiated into a JavaScript-based <b>rule</b> <b>engine</b> working with JSON rules. ...|$|R
40|$|Businesses are {{changing}} rapidly and organizations tend to act worldwide and are increasingly becoming distributed over the continents. As a consequence, distributed software systems {{have to keep}} track with rapidly changing markets. Business rules provide support for capturing some knowledge that changes frequently. Current business rule systems manage and execute business rules, however, typically lack support for increasingly distributed software systems, in particular, with respect to flexibility and reuse of business rules across distributed <b>rule</b> <b>engines.</b> In this {{paper we propose a}} service-oriented distributed business rules system that manages and deploys business rules to various business <b>rule</b> <b>engines.</b> Furthermore, we present the design and some implementation aspects of a service-oriented business rules system based on WS-Coordination. The system supports management and deployment of business rules to various business <b>rules</b> <b>engines.</b> Furthermore, we present a framework that unifies the access to several heterogeneous business <b>rules</b> <b>engines,</b> and we propose a solution that automatically generates and provisions Web services for executing business rules managed by a business <b>rule</b> <b>engine...</b>|$|R
5000|$|The Jess <b>rules</b> <b>engine</b> {{utilizes}} the Rete algorithm, and can {{be utilized}} to create: ...|$|E
5000|$|Data {{standardization}} - {{a business}} <b>rules</b> <b>engine</b> that ensures that data conforms to quality rules ...|$|E
5000|$|Business <b>Rules</b> <b>Engine</b> - Drools Expert {{using the}} Rete {{algorithm}} and the Drools Rule Language (DRL) ...|$|E
40|$|Abstract. There exist a {{great number}} of {{business}} <b>rules</b> <b>engines</b> in the market, each one with its own rules language. As a result, the need of a standard rules definition language is obvious. In this demo paper, the application of a combination of standard business rules languages to develop a business rules management tool, K-Site Rules, is explained. The main goals of this tool are: first, to integrate the development process for business rules in the software development lifecycle and, second, to make this development independent of <b>rule</b> <b>engine</b> products. K-Site <b>Rules</b> does not include its own <b>rule</b> <b>engine</b> implementation but acts as a broker to the preferred <b>rule</b> <b>engine.</b> In this way, business rules can be reused across different <b>rule</b> <b>engines</b> (which can change because of economical issues, performance issues, etc.) and through different projects in the company. The K-Site Rules tool is part of ITECBAN, a project devoted to the definition of a new platform core for banking applications...|$|R
50|$|Most Java-based <b>rules</b> <b>engines</b> {{provide a}} {{technical}} call-level interface, {{based on the}} JSR-94 application programming interface (API) standard, {{in order to allow}} for integration with different applications, and many <b>rule</b> <b>engines</b> allow for service-oriented integrations through Web-based standards such as WSDL and SOAP.|$|R
50|$|<b>Rule</b> <b>engines</b> {{represent}} conditional logic as discrete rules. Rule sets can {{be managed}} and applied separately to other functionality. They have wide applicability across many domains. Many <b>rule</b> <b>engines</b> implement reasoning capabilities. A common approach is to implement production systems to support forward or backward chaining. Each rule (‘production’) binds a conjunction of predicate clauses {{to a list of}} executable actions. At run-time, the <b>rule</b> <b>engine</b> matches productions against facts and executes (‘fires’) the associated action list for each match. If those actions remove or modify any facts, or assert new facts, the engine immediately re-computes the set of matches. <b>Rule</b> <b>engines</b> are widely used to model and apply business rules, to control decision-making in automated processes and to enforce business and technical policies.|$|R
50|$|Corticon Technologies, Inc. is a Business Rule Management System {{software}} company that provides enterprise software products designed to automate decision management {{through use of}} a patented <b>rules</b> <b>engine</b> that does not require coding. Instead of requiring users to program, or code business logic into IT infrastructure applications, the <b>rules</b> <b>engine</b> separates the creation and management of business logic from the overall development of hard-coded applications.|$|E
50|$|KRL {{is part of}} an {{open-source}} {{project called}} KRE, for Kinetic <b>Rules</b> <b>Engine,</b> developed by Kynetx, Inc.|$|E
5000|$|Drools, a forward-chaining inference-based <b>rules</b> <b>engine</b> {{which uses}} an {{enhanced}} {{implementation of the}} Rete algorithm. (Drools, Apache license 2.0) ...|$|E
40|$|Abstract. Embedded systems {{operating}} on high data workloads are becoming pervasive. ECA <b>rule</b> <b>engines</b> provide a flexible environment {{to support the}} management, reconfiguration and execution of business rules. However, modeling {{the performance of a}} <b>rule</b> <b>engine</b> is challenging because of its reactive nature. In this work we present the performance analysis of an ECA <b>rule</b> <b>engine</b> {{in the context of a}} supply chain scenario. We compare the performance predictions against the measured results obtained from our performance tool set, and show that despite its simplicity the performance prediction model is reasonably accurate...|$|R
40|$|E-business {{provides}} important {{opportunities of}} trade for businesses, and the supporting business system must handle this environment efficiently. One current trend in business systems {{is to move}} business logic, such as business processes and business rules, out from the application logic and into separate support systems. The reason to make this separation {{is to increase the}} agility of the business, to make the system able to change more rapidly when the business situation changes. This report focus on business rules enforced in business <b>rule</b> <b>engines.</b> Specific interest is on how such <b>rule</b> <b>engines</b> meet the requirements of the e-business domain. The report presents an overview of business <b>rule</b> <b>engines.</b> Five general categories of characteristics are proposed. The proposed characteristics are then used in a comparison of three business <b>rule</b> <b>engines...</b>|$|R
40|$|This {{research}} {{explores the}} role of context-aware policy matching in an event-driven architecture (EDA). In particular, a context-aware <b>rule</b> <b>engine</b> is adopted to derive conclusions based on the current contexts and business policies. Figure 1 shows the functional modules of the rototype designed to demonstrate {{the advantages of the}} proposed approach. In the Underlying Architecture layer, standard SOA is combined with EDA. The Context-Aware <b>Rule</b> <b>Engine</b> layer consists of three distinct agents for collecting preference profiles, ambient or context information, and dynamic events. All information collected will be forwarded to the <b>Rule</b> <b>Engine,</b> augmented with the Rule Repository and Context Ontology. Results from the <b>Rule</b> <b>Engine</b> will be given to the Action Agent that performs the desired sequence of actions. The following sections contain detailed description of each module...|$|R
5000|$|A runtime environment, {{allowing}} {{applications to}} invoke decision logic managed within the BRMS and execute it using a business <b>rules</b> <b>engine</b> ...|$|E
50|$|Rules {{post-processed}} by statistics: Translations {{are performed}} using a rules based engine. Statistics are then {{used in an}} attempt to adjust/correct the output from the <b>rules</b> <b>engine.</b>|$|E
5000|$|Lightweight Business Rules Engine: Schematron {{is not a}} comprehensive, Rete <b>rules</b> <b>engine,</b> {{but it can be}} used {{to express}} rules about complex {{structures}} with an XML document.|$|E
40|$|Abstract. In this paper, we {{describe}} our {{effort to build}} an inference engine for OWL reasoning based on the <b>rule</b> <b>engine</b> paradigm. <b>Rule</b> <b>engines</b> are very practical and effective for their representational simplicity and optimized performance, but their limited expressiveness and web unfriendliness restrict their usability for OWL reasoning. We enumerate and succinctly describe extended features implemented in our <b>rule</b> <b>engine,</b> Bossam, and show that these features are necessary to promote the effectiveness of any ordinary <b>rule</b> <b>engine’s</b> OWL reasoning capability. URI referencing and URI-based procedural attachment enhance web-friendliness. OWL importing, support for classical negation and relieved range restrictedness help correctly capture the semantics of OWL. Remote binding enables collaborated reasoning among multiple Bossam engines, which enhances the engine’s usability on the distributed semantic web environment. By applying our engine to the W 3 C’s OWL test cases, we got a plausible 70 % average success rate for the three OWL species. Our contribution with {{this paper is to}} suggest a set of extended features that can enhance the reasoning capabilities of ordinary <b>rule</b> <b>engines</b> on the semantic web. ...|$|R
5000|$|DTRules: a Decision Table-based, open-sourced <b>rule</b> <b>engine</b> for Java.|$|R
5000|$|Benchmarking results: OpenRuleBench yearly {{open-source}} benchmark of <b>rule</b> <b>engines</b> ...|$|R
