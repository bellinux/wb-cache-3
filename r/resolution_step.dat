81|297|Public
500|$|In {{terms of}} the {{implication}} graph of the 2-satisfiability instance, Krom's inference rule {{can be interpreted as}} constructing the transitive closure of the graph. As [...] observes, it can also be seen as an instance of the Davis–Putnam algorithm for solving satisfiability problems using the principle of resolution. Its correctness follows from the more general correctness of the Davis–Putnam algorithm. Its polynomial time bound follows from the fact that each <b>resolution</b> <b>step</b> increases the number of clauses in the instance, which is upper bounded by a quadratic function of the number of variables.|$|E
50|$|Resolution calculi {{that include}} {{subsumption}} can model rule one by subsumption and rule two by a unit <b>resolution</b> <b>step,</b> followed by subsumption.|$|E
5000|$|At each step, the {{intermediate}} formula generated is equisatisfiable, but possibly not equivalent, {{to the original}} formula. The <b>resolution</b> <b>step</b> leads to a worst-case exponential blow-up {{in the size of}} the formula.|$|E
5000|$|Then, {{for each}} {{variable}} , a score is calculated summing the additivity {{of all the}} <b>resolution</b> <b>steps</b> in [...] with pivot [...] together {{with the number of}} these <b>resolution</b> <b>steps.</b> Denoting each score calculated this way by , each variable is selected with a probability proportional to its score: ...|$|R
40|$|Clause-K-transformations are {{faithful}} transformations between clause sets. When inferences {{are drawn}} on a clause set using resolution as inference rule, some clauses {{may be involved}} in particularly many <b>resolution</b> <b>steps.</b> Typically such a clause would express a very general property like the symmetry or transitivity of a relation. Most of these <b>resolution</b> <b>steps</b> do not contribute to inferring the empty clause. Clause-K-transformations can be used to eliminate unnecessary <b>resolution</b> <b>steps.</b> A clause set is transformed by replacing a clause that is involved in particularly many <b>resolution</b> <b>steps</b> by em instances of this clause. The more specific these instances are, the more this transformation will reduce the number of possible <b>resolution</b> <b>steps.</b> The criteria for the faithfulness of such a transformation can be tested automatically. For clauses not containing function symbols, I have described a way to enumerate candidates for clause-K-transformations. With this I have found transformations for many clauses automatically. I have also investigated eliminations for clauses containing function symbols (e. g. ~condensed detachment) and eliminations of several clauses at the same time...|$|R
50|$|If any similar {{business}} application errors {{occurred in the}} past then the issue <b>resolution</b> <b>steps</b> are retrieved from the support knowledge base and the error is resolved using those steps. If it is a new support error, then new issue <b>resolution</b> <b>steps</b> are created and the error is resolved. The new support error <b>resolution</b> <b>steps</b> are recorded in the knowledge base for future use. For major {{business application}} errors (critical infrastructure or application failures), a phone conference call is initiated and all required support persons/teams join the call and they all work together to resolve the error.|$|R
5000|$|For {{achieving}} a better compression/time ratio, a heuristic for variable selection is desirable. For this purpose, Cotton defines the [...] "additivity" [...] of a <b>resolution</b> <b>step</b> (with antecedents [...] and [...] and resolvent [...] ): ...|$|E
5000|$|The {{proof is}} now illegal because the literal [...] {{is missing from}} the {{transformed}} root clause. To reconstruct the proof, one can remove [...] together with the last <b>resolution</b> <b>step</b> (that is now redundant). The final result is the following legal (and stronger) proof: ...|$|E
5000|$|Given a {{proof of}} unsatisfiability [...] and a {{variable}} , {{it is easy}} to re-arrange (split) the proof in a proof of [...] and a proof of [...] and the recombination of these two proofs (by an additional <b>resolution</b> <b>step)</b> may result in a proof smaller than the original.|$|E
40|$|Previous resolution-based {{approaches}} to theory-guided induction of logic programs produce hypotheses {{in the form}} of a set of resolvents of a theory, where the resolvents represent allowed sequences of <b>resolution</b> <b>steps</b> for the initial theory. There are, however, many characterizations of allowed sequences of <b>resolution</b> <b>steps</b> that cannot be expressed by a set of resolvents. One approach to this problem is presented, the system merlin, which is based on an earlier technique for learning finite-state automata that represent allowed sequences of <b>resolution</b> <b>steps.</b> merlin extends the previous technique in three ways: i) negative examples are considered in addition to positive examples, ii) a new strategy for performing generalization is used, and iii) a technique for converting the learned automaton to a logic program is included. Results from experiments are presented in which merlin outperforms both a system using the old strategy for performing generalization, and a t [...] ...|$|R
50|$|If similar Production error {{occurred}} in the past then the issue <b>resolution</b> <b>steps</b> are retrieved from the support knowledge base and error is resolved using those steps. If it is a new Production error then new Production error <b>resolution</b> <b>steps</b> are created and Production error is resolved. The new Production error <b>resolution</b> <b>steps</b> are recorded in the knowledge base for the future usage. For major Production errors (critical infrastructure or application failures), a phone conference call is initiated and all required support persons/teams join the call and they all work together to resolve the error. This is also called as an Incident Management. If a problem occurs repeatedly then it is recorded and tracked using appropriate tools and processes until it is resolved permanently. This is also called as Problem Management. The issue is closed only after the customer or end user agrees that the problem is resolved.|$|R
40|$|We {{investigate}} {{the ability of}} two central encoding methods to propagate reachability and relevance information using <b>resolution</b> <b>steps.</b> More specifically, we compare the ability of unit-propagation and higher-order <b>resolution</b> <b>steps</b> to propagate reachability and relevance information {{in the context of}} the linear and GRAPHPLAN encoding schemes to the ability of a natural class of reachability and relevance algorithms that operate at the plan level. As a result of our observations and additional considerations, we experiment with a preprocessing step based on limited binary resolution that shows nice results. ...|$|R
5000|$|The {{application}} of a B rule may lead to an illegal proof (see the example below), as some literals missing in the transformed root clause {{may be involved in}} another <b>resolution</b> <b>step</b> along the path to the proof root. Therefore, the algorithm also has to [...] "reconstruct" [...] a legal proof when this happen.|$|E
5000|$|Production {{rules in}} OPS5 {{apply to all}} {{instances}} of data structures that match conditions and conform to variable bindings. In this example, should several objects be suspended from the ceiling, each with a different ladder nearby supporting an empty-handed monkey, the conflict set would contain as many production rule instances derived from the same production [...] "Holds::Object-Ceiling". The conflict <b>resolution</b> <b>step</b> would later select which production instances to fire.|$|E
5000|$|If {{the input}} proof {{is not a}} tree (in general, {{resolution}} graphs are directed acyclic graphs), then the clause [...] of a context {{may be involved in}} more than one <b>resolution</b> <b>step.</b> In this case, to ensure that an application of a rewriting rule is not going to interfere with other resolution steps, a safe solution is to create a copy of the node represented by clause [...] This solution increases proof size and some caution is needed when doing this.|$|E
30|$|In this section, {{we present}} the adopted system model and assumptions. Then, we {{formulate}} the optimization {{problem and the}} associated constraints. We finally enumerate the <b>resolution</b> <b>steps</b> in the proposed resolution algorithm.|$|R
40|$|A surface {{acoustic}} wave (SAW) motor exhibits sub-nanometer motion resolution, over centimeter-level long stroke. The determinant of the motion resolution was experimentally investigated. The experimental results indicated that amplitude of Rayleigh wave, which is utilized for friction drive, determined the motion <b>resolution.</b> The <b>stepping</b> drives by 20 -nm amplitude Rayleigh wave limited the resolution to 1 nm. However, by using 9 -nm amplitude Rayleigh wave, 0. 5 nm stepping drive was achieved. The smaller amplitude achieved the higher <b>resolution</b> <b>stepping</b> motion...|$|R
30|$|This {{paper is}} {{organized}} as follows. Section 2 describes the adopted system {{model and the}} constraints to respect, formulates the associated optimization problem, and provides the proposed resolution algorithm. Section 3 details the <b>resolution</b> <b>steps</b> of the optimization problem. Section 4 presents simulation results. Finally, Section 5 concludes the paper.|$|R
5000|$|In {{terms of}} the {{implication}} graph of the 2-satisfiability instance, Krom's inference rule {{can be interpreted as}} constructing the transitive closure of the graph. As [...] observes, it can also be seen as an instance of the Davis-Putnam algorithm for solving satisfiability problems using the principle of resolution. Its correctness follows from the more general correctness of the Davis-Putnam algorithm. Its polynomial time bound follows from the fact that each <b>resolution</b> <b>step</b> increases the number of clauses in the instance, which is upper bounded by a quadratic function of the number of variables.|$|E
5000|$|Members of a {{compartment}} {{are able}} {{and willing to}} communicate among each other according to compartment’s operational and policy rules. Conceptually a compartment maintains some form of implicit database which contains its members; that is, each entry in the database defines a member. Before one can send a data packet to a compartment member, a <b>resolution</b> <b>step</b> is required which returns a means to “address” the member. Note that the above definition does not specify whether a member is a node, a set of servers or a software module. This rather abstract definition of compartment membership permits to capture many different flavours of members and communication forms.|$|E
30|$|Step Size (ps) is the {{waveform}} scan <b>resolution</b> (<b>step</b> size between points), in picoseconds (1 bin = 3.18 pS).|$|E
50|$|ReduceAndReconstruct {{uses the}} {{function}} ReduceAndReconstructLoop, which is specified below. The {{first part of}} the algorithm does a topological ordering of the resolution graph (considering that edges goes from antecedentes to resolvents). This is done to ensure that each node is visited after its antecedents (this way, broken <b>resolution</b> <b>steps</b> are always found and fixed).|$|R
40|$|The clausal {{resolution}} method {{developed for}} discrete temporal logics involves translation {{to a normal}} form, classical resolution on formulae within states (termed <b>step</b> <b>resolution)</b> and temporal <b>resolution</b> between states. <b>Step</b> <b>resolution</b> may generate an unnecessarily large set of clauses. In addition, the most expensive part of the method is {{the application of the}} temporal resolution operation...|$|R
40|$|A {{new type}} of {{stepping}} motor, named nutation motor was developed. This motor has a reduction mechanism consisting {{of a pair of}} bevel gears, realizing high torque and high <b>resolution</b> <b>stepping</b> motion. Three prototypes, two pneumatic nutation motors and an electric nutation motor, were designed, developed, and tested. We show the basic driving principle and the experimental results in this paper. </p...|$|R
40|$|Purpose: We propose {{and compare}} {{different}} registration approaches to align small-animal PET studies and a procedure {{to validate the}} results by means of objective registration consistency measurements. Procedures: We have applied a registration algorithm based on information theory, using different approaches to mask the reference image. The registration consistency allows {{for the detection of}} incorrect registrations. This methodology has been evaluated on a test dataset (FDG-PET rat brain images). Results: The results show that a multiresolution two-step registration approach based {{on the use of the}} whole image at the low <b>resolution</b> <b>step,</b> while masking the brain at the high <b>resolution</b> <b>step,</b> provides the best robustness (87. 5 % registration success) and highest accuracy (0. 67 -mm average). Conclusions: The major advantages of our approach are minimal user interaction and automatic assessment of the registration error, avoiding visual inspection of the results, thus facilitating th...|$|E
40|$|Asymmetric bromine–lithium {{exchange}} {{has been}} successfully employed to synthesize bicoumarin chiral building blocks of (+) -isokotanin A and (−) -kotanin in good yields and with an excellent level of enantioselectivity. This is the first reported example of formal syntheses, using this direct methodology, leading to the single (M) -atropoisomer of (+) -isokotanin A and (−) -kotanin building blocks, without any <b>resolution</b> <b>step...</b>|$|E
40|$|International audienceWe {{propose a}} first-order {{presentation}} of higher-order logic based on explicit substitutions. It is intentionally {{equivalent to the}} usual presentation of higher-order logic based on λ-calculus, i. e. a proposition can be proved without the extensionality axioms in one theory {{if and only if}} it can in the other. The tiExtended Narrowing and Resolution first-order proof-search method can be applied to this theory. This allows to simulate higher-order <b>resolution</b> <b>step</b> by step and furthermore leaves room for further optimizations and extensions...|$|E
40|$|The rank/activity {{restriction}} on binary resolution is introduced. It accepts {{only a single}} derivation tree from a large equivalence class of such trees. The equivalence classes capture all trees that are {{the same size and}} differ only by reordering the <b>resolution</b> <b>steps.</b> A proof procedure that combines this restriction with the authors' minimal restriction of binary resolution computes each minimal binary resolution tree exactly once. 1 Introduction A new restriction of binary resolution is proposed in this paper. The restriction is complete in a strong sense, in that every binary resolution proof, up to reordering the <b>resolution</b> <b>steps,</b> is allowed. On the other hand, the restriction prevents multiple versions of the same proof from being constructed. If a given proof is allowed, then no other proof that can be obtained from it by reordering the steps is allowed. Consider an automated reasoning procedure that takes a set of clauses as input, and resolves pairs of clauses containing com [...] ...|$|R
40|$|We present non-clausal {{resolution}} {{systems for}} propositional modal logics whose Kripke models {{do not involve}} symmetry, and for first order versions whose Kripke models do not involve constant domains. We give systems for K, T, K 4 and S 4; other logics are also possible. Our systems do not require preliminary reduction to a normal form and, in the first order case, intermingle <b>resolution</b> <b>steps</b> with Skolemization steps...|$|R
40|$|In this {{contribution}} {{we present}} a variant of a resolution theorem prover which selects <b>resolution</b> <b>steps</b> based on the proportion of models a newly generated clause satis es compared to all models given in a reference class. This reference class is generated from {{a subset of the}} initial clause set. Since the empty clause does not satisfy any models, preference is given to such clauses which satisfy few models only...|$|R
40|$|This study {{reports a}} facile method for the {{synthesis}} {{of a variety of}} 5 - and 6 -substituted tryptophan derivatives that are difficult to prepare using alternative enzymatic approaches. Acylation of an activated amino acid, derived from serine in situ, is coupled with an enzymatic <b>resolution</b> <b>step</b> to furnish enantiopure analogues bearing a range of electron withdrawing and releasing substituents. Isolation of a dehydroalanine derivative as a by-product from some reactions provides some insights into the likely mechanism of the reaction...|$|E
40|$|We propose {{and compare}} {{different}} registration approaches to align small-animal PET studies and a procedure {{to validate the}} results by means of objective registration consistency measurements. Procedures: We have applied a registration algorithm based on information theory, using different approaches to mask the reference image. The registration consistency allows {{for the detection of}} incorrect registrations. This methodology has been evaluated on a test dataset(FDG-PET rat brain images). Results: The results show that a multiresolution two-step registration approach based {{on the use of the}} whole image at the low <b>resolution</b> <b>step,</b> while masking the brain at the high <b>resolution</b> <b>step,</b> provides the best robustness (87. 5 % registration success) and highest accuracy (0. 67 -mm average). Conclusions: The major advantages of our approach are minimal user interaction and automatic assessment of the registration error, avoiding visual inspection of the results, thus facilitating the accurate, objective, and rapid analysis of large groups of rodent PET imagesThis work was supported by projects CIBER CB 06 / 01 / 0079 (Ministerio de Sanidad y Consumo) and CDTEAM (CENIT program, Ministerio de Industria). Further support came from NIAAA Intramural Research Program (AA 11034 and AA 07574, AA 07611) and the US Department of Energy (DE-AC 02 - 98 CH 10886) Publicad...|$|E
40|$|We present ongoing {{research}} on the automatic generation of exercises for learning mathematics, in particular high-school algebra. The emphasis is on working backwards from the intended solution of the problem to obtain a sequence of steps leading to that solution. This approach not only avoids generating unsolvable exercises but also allows writing explanatory text for each <b>resolution</b> <b>step.</b> Futhermore, we show how the diculty level of the exercises can easily be ne-tuned. We discuss our prototype implementation as a CLP(FD) program and a graphical interface in Tcl/Tk. Finally, we propose directions for further research...|$|E
40|$|Red/Green/Blue/Amber (RGBA) {{color mixing}} applications. The PCA 9632 is a drop-in upgrade for the PCA 9633 with 40 � power reduction. In Individual {{brightness}} control mode, each LED output {{has its own}} 8 -bit <b>resolution</b> (256 <b>steps)</b> fixed frequency Individual PWM controller that operates at 1. 5625 kHz with a duty cycle that is adjustable from 0 % to 99. 6 % to allow the LED to be set to a specific brightness value. In group dimming mode, each LED output has its own 6 -bit <b>resolution</b> (64 <b>steps)</b> fixed frequency Individual PWM controller that operates at 6. 25 kHz with a duty cycle that is adjustable from 0 % to 98. 4 % to allow the LED to be set to a specific brightness value. A fifth 4 -bit <b>resolution</b> (16 <b>steps)</b> Group PWM controller has a fixed frequency of 190 Hz {{that is used to}} dim all the LEDs with the same value. While operating in the Blink mode, each LED output has its own 8 -bit <b>resolution</b> (256 <b>steps)</b> fixed frequency Individual PWM controller that operates at 1. 5625 kHz with a duty cycle that is adjustable from 0 % to 99. 6 % to allow the LED to be set to a specific brightness value. Blink rate is controlled by the Group frequency setting that has 8 -bit <b>resolution</b> (256 <b>steps).</b> The blink rate is adjustable between 24 Hz and once ever...|$|R
40|$|We provide {{techniques}} to integrate resolution logic with equality in type theory. The {{results may be}} rendered as follows: (1). A clausification procedure in type theory, equipped with a correctness proof, all encoded using higher-order primitive recursion. (2). A novel representation of clauses in minimal logic such that the λ -representation of <b>resolution</b> <b>steps</b> is linear {{in the size of}} the premisses. (3). Availability of the power of resolution theorem provers in interactive proof construction systems based on type theory...|$|R
40|$|Logic Programming and (Hyper-) Graph Rewriting are two {{well known}} fields of Computer Science. In this paper we show how to model logic program {{computations}} through algebraic techniques {{familiar to the}} graph rewriting community. Clauses of a logic program are represented by graph productions, goals by suitable hypergraphs (called jungles), and <b>resolution</b> <b>steps</b> by an algebraic construction involving three pushouts. The correspondence between the two formalisms is further analyzed by providing a precise algebraic characterization of specialization and unfolding of clauses...|$|R
