3|14|Public
2500|$|Lange {{thereafter}} again started touring {{and speaking}} at public rallies; {{he did not}} use a manuscript for his speeches. On 5 May, a crowd of 5,000 people turned up at Youngstorget to listen to Lange and his Danish counterpart Mogens Glistrup. On his first appearance in a political television debate, Lange showed up {{with a bottle of}} egg liqueur and a Viking sword he had received from Geirr Tveitt, and his appearance in the debate became a success. Lange was not a big drinker, but he used egg liqueur during speeches to clear his throat. His use of the drink nonetheless led sales of Advocaat to soar. Lange finally entered the Norwegian Parliament after the 1973 parliamentary election, together with three other representatives from his party. Lange set a record of speeches during his first year in parliament, speaking more than any other representative. He was elected into the Consumer and Administration Committee, which he dismissed as a <b>redundant</b> <b>entity.</b> During his time in parliament he came on good terms with politicians from all parties. Lange said he only felt hostility from Kåre Willoch, leader of the Conservative Party, whose presence he considered to [...] "fill the room with hate;" [...] Willoch had expressed little respect for Lange before the 1973 election, labeling him as a [...] "mad-man" [...] and agitator without visions.|$|E
40|$|This paper gives {{notification}} of changes approved by CRIR {{which will be}} included in the NHS Data Dictionary, the NHS Data Manual and the NHS CDS Manual in due course. Summary of change: NHS Data Dictionary classification lists, with code values where applicable, are to be associated with attributes rather than entity types. Where an entity type exists purely to hold a classification list for another entity type, the list will be associated with an attribute of the main entity type. The first stage of this rationalisation has now been completed with the movement of classification lists to code attributes. This DSCN details the entity types and attributes requiring change for the second stage of the rationalisation. This second stage involves the movement of attributes and deletion of <b>redundant</b> <b>entity</b> types...|$|E
5000|$|Mimic Escape {{refers to}} the process in which attackers make the {{heterogeneous}} <b>redundant</b> <b>entities</b> in MDB produce identical or mostly identical errors, thus breaking through the multi-mode arbitral mechanism and achieving the attack. Mimic Escape is an uncertain problem whose performance is not stable because of the DHR mechanism, and cannot be expressed by probability. More generally, “there is no second chance for a successful attack.” ...|$|R
40|$|Modeling and topological {{analysis}} of networks in biological and other complex systems, must venture beyond the limited consideration of very few network metrics like degree, betweenness or assortativity. A proper identification of informative and <b>redundant</b> <b>entities</b> {{from many different}} metrics, using recently demonstrated techniques, is essential. A holistic comparison of networks and growth models is best achieved only {{with the use of}} such methods. Comment: To appear in Systems and Synthetic Biology (Springer...|$|R
50|$|The {{fundamental}} principle of fault tolerant design {{is to provide}} the services {{by a set of}} <b>redundant</b> <b>entities</b> and therefore components {{need to be able to}} act as a standby on behalf of the CSI. The standby components maintain themselves in a state so that they are capable of taking over the service provisioning, should the component with the active assignment fail. The role of AMF is to assign active or standby workloads to the components of an application as a function of component state and system configuration.|$|R
50|$|Mimic Presentation {{refers to}} the visual {{relationship}} between the external service functions observed by attackers and the implementation structures of the object. The more complicated, less certainty and more diverse the relationship is, the more unpredictable the defensive behavior and environment of the object will be. Accordingly, the creation and maintenance of an attack chain will be more difficult, {{and the possibility of}} planning or deploying the attack will be lower. When the number and types of the heterogeneous <b>redundant</b> <b>entities</b> are determined, the levels of Mimic Presentation are strongly correlated to the scheduling and generation strategies for the set of executive entities.|$|R
50|$|Through the {{multi-mode}} policy {{ruling and}} multi-dimensional dynamic reconfiguration mechanism under {{the condition of}} “de-cooperation”, difficult and costly engineering problems of the attack surface of complex systems {{can be turned into}} reduced problems of the attack surface of soft and hard parts, which is space-independent, function-simple and within mimic bracket. Moreover, it’s able to minimize the dominant or recessive correlation among heterogeneous <b>redundant</b> <b>entities,</b> which causes the heterogeneous multi-target dynamic cooperative attack dilemma for attackers under the condition of non-cooperation. This reduces the engineering difficulty to implement “self-control, secure and trustable” strategy in cyberspace from “no security short board of the whole chain” to the guarantee of the absolute security of individual procedures or key components.|$|R
40|$|This paper {{reports on}} a series of {{introductory}} programming workshops, initially targeting female high school students, which utilised Lego Mindstorms robots. Cognitive load theory (CLT) was applied to the instructional design of the workshops, and a controlled experiment was also conducted investigating aspects of the interface. Results indicated that a truncated interface led to better learning by novice programmers as measured by test performance by participants, as well as enhanced shifts in self-efficacy and lowered perception of difficulty. There was also a transfer effect to another programming environment (Alice). It is argued that the results indicate that for novice programmers, the mere presence on-screen of additional (<b>redundant)</b> <b>entities</b> acts as a form of tacit distraction, thus impeding learning. The utility of CLT to analyse, design and deliver aspects of computer programming environments and instructional materials is discussed...|$|R
40|$|We propose {{programming}} language mechanisms to reduce redundancy in program source code. These abbreviation mechanisms, shorthands, make programs shorter {{and easier to}} write and read. In addition, we {{provide a framework for}} describing language abbreviation mechanisms. 1 Introduction Most computer programs contain redundant descriptions of similar entities. For instance, {{it is not uncommon to}} see program fragments like the following, which includes a repeated expression. foo. diffusionarray[i] = xi; foo. diffusionarray[j] = yi; foo. diffusionarray[k] = zi; Such repetition is annoying to write, and provides little benefit in terms of program readability. It is possible to eliminate some kinds of redundancy by naming <b>redundant</b> <b>entities</b> [...] -either through variable bindings or macro substitutions [...] -and then repeating that name: tmp = foo. diffusionarray; tmp[i] = xi; tmp[j] = yi; tmp[k] = zi; Names can reduce redundancy, but they are tedious to invent and are often cumbersome or impos [...] ...|$|R
50|$|Mimic defense can’t {{distinguish}} {{between right and}} wrong from the results itself, which is computed or operated by components of hardware and software. It just refers to the situation of consistency, arbitrated between responsive outputs which are produced by heterogeneous <b>redundant</b> <b>entities</b> from the same input excitation, as a basis of recognition under the condition of functional equivalence. It is usually a big probability event that most of the expressions are consistent. This is considered as the law of identification with normal or abnormal states although it is easy to prove both in theory and practice that consistent error existing in most expressions is a minimal probability event. The key of breaking through the Mimic Defense system is the solution on how to obtain the consistent errors in most entities, achieving the escape stably, under the condition of non-cooperation and DHR environment at the same time. Trustable Computing, could be considered as a technique of encryption and belongs to the category of computational complexity technology which {{is not the same as}} Mimic defense in security principles.|$|R
40|$|Materialized {{aggregate}} views {{represent a}} set of <b>redundant</b> <b>entities</b> in a data warehouse that are frequently used to accelerate On-Line Analytical Processing (OLAP). Due to the complex structure of the data warehouse and the different pro {{les of the users}} who submit queries, there is need for tools that will automate and ease the view selection and management processes. In this paper, we present DynaMat, a system that manages dynamic collections of materialized aggregate views in a data warehouse. At query time DynaMat utilizes a dedicated disk space for storing computed aggregates that are further engaged for answering new queries. Queries are executed independently, or can be bundled within a multi query expression. In the latter case we present an execution mechanism that exploits dependencies among the queries and the materialized set to further optimize their execution. During updates, DynaMat reconciles the current materialized view selection and refreshes the most beneficial subset of it within a given maintenance window. We show how to derive an efficient update plan with respect to the available maintenance window, the different update policies for the views and the dependencies that exist among them...|$|R
40|$|Nowadays, {{search on}} the Web {{goes beyond the}} {{retrieval}} of textual Web sites and increasingly {{takes advantage of the}} growing amount of structured data. Of particular interest is entity search, where the units of retrieval are structured entities instead of textual documents. These entities reside in different sources, which may provide only limited information about their content and are therefore called "uncooperative". Further, these sources capture complementary but also <b>redundant</b> information about <b>entities.</b> In this environment of uncooperative data sources, we study the problem of federated <b>entity</b> search, where <b>redundant</b> information about <b>entities</b> is reduced on-the-fly through entity consolidation performed at query time. We propose a novel method for entity consolidation that is based on using language models and completely unsupervised, hence more suitable for this on-the-fly uncooperative setting than state-of-the-art methods that require training data. Further, we apply the same language model technique to deal with the federated search problem of ranking results returned from different sources. Particular novel are the mechanisms we propose to incorporate consolidation results into this ranking. We perform experiments using real Web queries and data sources. Our experiments show that our approach for federated entity search with on-the-fly consolidation improves upon the performance of a state-of-the-art preference aggregation baseline and also benefits from consolidation. © 2013 Springer-Verlag...|$|R
40|$|With {{the ever}} growing {{popularity}} of cloud computing, the trend of deploying applications in the cloud is increasing more than ever. Cloud offers computing resources that can be provisioned as required and scaled according to the workload demand. This feature attracts service providers to deploy their applications in the cloud. As users continue to rely more on the services provided by these applications, {{it is essential to}} keep the applications running with minimal service outage. Service Availability Forum (SA Forum) has defined a framework called Availability Management Framework (AMF) which can be used to manage service availability. AMF is agnostic to the services provided by the applications. However, it manages the service availability of applications by orchestrating the <b>redundant</b> <b>entities</b> through a configuration called AMF configuration. The design of AMF configurations for a physical cluster based on the functional and non-functional requirements, such as minimum level of service availability, has been proposed in the literature. In these solutions, the number of physical hosts required to deploy an application is given as input and the resource utilization is not taken into consideration. However, for deploying applications in the cloud the number of physical hosts is not fixed and should vary depending on the workload. Therefore, the issue of minimizing the number of physical hosts while meeting the requested level of service availability arises. In particular, the service availability depends not only on the entities involved in providing the service but also on the interferences caused by the collocation of entities. To minimize these interferences, the collocated entities can be grouped into fault isolation units such as VMs. This in turn may increase the number of resources required. In this thesis, an approach to generate AMF configuration for the cloud is proposed. In this approach, a novel method is used to calculate the number of AMF entities that meets the availability and resource utilization requirements. In addition, a method to estimate service availability is proposed. It aims to predict the availability of service by considering the potential factors that affect availability, including the interferences due to collocation. Furthermore, an approach to deploy AMF applications in the cloud is proposed. As a proof of concept, a prototype that demonstrates the generation and deployment of AMF configurations in an OpenStack cloud has been developed. This prototype includes the existing Monitoring and Elasticity Engine, previously developed in the MAGIC project...|$|R
40|$|Improving energy {{efficiency}} (EE) of mobile communication systems (MCSs) {{has been considered}} a key aim in recent years, and {{has been the subject}} of intense research interest. One of the simplest yet most powerful ways to increase the EE is to turn off <b>redundant</b> communication <b>entities</b> whose operation does not greatly affect the overall performance of the MCS. In this paper, we propose a novel on–off power control scheme for femto-cell base stations (FBSs) considering cooperative transmission in which multiple FBSs collaborate on the same data transmission. In the proposed scheme, the operation of the redundant FBSs is halted in an adaptive manner. For the proper determination of redundant FBSs with low computational complexity, we propose using the level of contribution (LOC), which specifies the importance of a given FBS in the cooperative transmission. Redundant FBSs are chosen based on their LOC value, and these FBSs are turned off in order to reduce the power consumption of MCSs while minimizing the degradation of the overall throughput of cooperative transmissions. The performance of the proposed scheme is verified through extensive simulations, which shows that near-optimal performance can be achieved without excessive computations...|$|R
40|$|The {{increasing}} {{reliance on}} computing systems has greatly impacted the customers' expectations from such systems; {{for which the}} need for reliable and highly available services has become an essential requirement. This has led service providers to seek {{for new ways to}} supply robust services in order to sustain their advantage in today's highly competitive markets. A highly available system is defined as a system that is up and running 99. 999 % of the time. To gain such availability, a solution that has been widely employed is the usage of redundant components. However, solutions used in the past are proprietary and as a result applications had no portability from one platform to another. The Service Availability Forum (SAF), a consortium of several computing and telecommunication companies, promotes standardized solutions for building highly available systems in which Commercial-Off-The-Shelf (COTS) building blocks can be used. The SAF middleware has many services each of which has a specialized role so that the whole middleware can manage the redundant components within the system to fulfill the service availability. Like any other system, a SAF system may go through several upgrade and downgrade processes during its lifetime. Though due to the high availability requirement, a SAF system ought to be upgraded while ensuring minimum service interruption. Among the SAF middleware services, the Software Management Framework (SMF) is responsible for this live upgrade. In order for the SMF to perform an upgrade the road map of this migration, which is known as the Upgrade Campaign Specification, should be provided. However, due to the number of entities involved in an upgrade campaign and the complexity of the relationships among these entities, manual calculation of various steps of an upgrade campaign specification is time consuming and error prone. In this thesis, we have devised an approach for automatic generation of upgrade campaign specifications to upgrade <b>redundant</b> <b>entities</b> of SAF systems. We have categorized possible upgrade variations into three main scenarios which consist of manipulating current entities of the system, removing or adding new ones. For each scenario we have recognized different criteria that impact the service availability. For each criterion, according to the different upgrade methods introduced by SMF, we have devised solutions to minimize the service availability interruption during the course of an upgrade. Finally, we have created a prototype tool that supports the generation of upgrade campaign specification algorithms for each scenario. We have applied our approach to a case study to demonstrate its applicability...|$|R

