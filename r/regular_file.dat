54|126|Public
25|$|Closely {{coordinates}} {{with the}} Memory Manager, I/O Manager and I/O drivers {{to provide a}} common cache for <b>regular</b> <b>file</b> I/O. The Windows Cache Manager operates on file blocks (rather than device blocks), for consistent operation between local and remote files, and ensures {{a certain degree of}} coherency with memory-mapped views of files, since cache blocks are a special case of memory-mapped views and cache misses a special case of page faults.|$|E
5000|$|UnixWare {{includes}} a dynamically loadable device driver marry(7) and the utility marry(1M). [...] The marry driver allows a <b>regular</b> <b>file</b> {{to be treated}} as a device. The <b>regular</b> <b>file</b> can be accessed through either a block device, /dev/marry/regfile, or as a character device, /dev/marry/rregfile. The command marry also supports encrypting and decrypting of the <b>regular</b> <b>file.</b>|$|E
50|$|Cryptoloop {{can create}} an {{encrypted}} file system within a partition or from within a <b>regular</b> <b>file</b> in the <b>regular</b> <b>file</b> system. Once a file is encrypted, {{it can be}} moved to another storage device. This is accomplished by making use of a loop device, a pseudo device that enables a normal file to be mounted {{as if it were}} a physical device. By encrypting I/O to the loop device, any data being accessed must first be decrypted before passing through the <b>regular</b> <b>file</b> system; conversely, any data being stored will be encrypted.|$|E
50|$|In {{computer}} science, {{a synthetic}} file system or a pseudo file {{system is a}} hierarchical interface to non-file objects that appear {{as if they were}} <b>regular</b> <b>files</b> in the tree of a disk-based or long-term-storage file system. These non-file objects may be accessed with the same system calls or utility programs as <b>regular</b> <b>files</b> and directories. The common term for both <b>regular</b> <b>files</b> and the non-file objects is node.|$|R
5000|$|Short {{and search}} engine {{friendly}} URLs: documents are visible are <b>regular</b> <b>files.</b>|$|R
5000|$|GFS2 {{uses the}} same on-disk format for {{journaled}} <b>files</b> as for <b>regular</b> <b>files</b> ...|$|R
50|$|Honor Council {{records are}} {{confidential}} and not {{placed in the}} student's <b>regular</b> <b>file.</b>|$|E
5000|$|A media: media {{organization}} {{is like a}} <b>regular</b> <b>file</b> explorer. The library keeps high definition images versions and offers optimization for SEO.|$|E
5000|$|... a <b>regular</b> <b>file</b> whose {{user class}} has full permissions and whose group and others classes have only the read and execute permissions.|$|E
5000|$|... mmap/splice {{support for}} {{journaled}} files (enabled {{by using the}} same on disk format as for <b>regular</b> <b>files)</b> ...|$|R
5000|$|The POSIX {{standard}} mandates filesystem {{behavior that}} is strongly influenced by traditional UNIX filesystems. <b>Regular</b> <b>files</b> must have the following attributes: ...|$|R
5000|$|Synthetic {{file system}} a {{hierarchical}} interface to non-file objects that {{appear as if}} they were <b>regular</b> <b>files</b> in the tree of a disk-based file system ...|$|R
5000|$|Full disk {{encryption}} {{has several}} benefits compared to <b>regular</b> <b>file</b> or folder encryption, or encrypted vaults. The {{following are some}} benefits of disk encryption: ...|$|E
5000|$|Operating {{system and}} other {{critical}} documents are always cached on the SSD. Applications {{are likely to}} be handled similarly. A <b>regular</b> <b>file</b> can reside on both devices.|$|E
5000|$|The default {{data stream}} of a <b>regular</b> <b>file</b> is {{a stream of}} type $DATA but with an {{anonymous}} name, and the ADSs are similar but must be named.|$|E
5000|$|...F appends a {{character}} revealing {{the nature of}} a file, for example, * for an executable, or / for a directory. <b>Regular</b> <b>files</b> have no suffix.|$|R
5000|$|... $ find /home/weedly -name myfile -type f -printThis {{searches}} the /home/weedly directory tree for <b>regular</b> <b>files</b> named myfile. You should always specify the directory to the deepest level you can remember.|$|R
50|$|MPQ {{archives}} do {{not have}} specific structures to store metadata beyond what is absolutely necessary to access archived files. Instead, the convention is to use <b>regular</b> <b>files</b> whose filename is enclosed by parentheses.|$|R
5000|$|To perform input/output on a stream, one either {{uses the}} [...] and [...] system calls as with <b>regular</b> <b>file</b> descriptors, or {{a set of}} STREAMS-specific {{functions}} to send control messages.|$|E
5000|$|... $ find / -path excluded_path -prune -o -type f -name myfile -printThis {{searches}} every directory {{except the}} subdirectory tree excluded_path (full path including the leading /) that is pruned by the [...] action, for a <b>regular</b> <b>file</b> {{whose name is}} myfile.|$|E
5000|$|Unix does however {{have some}} special files. These special files can be {{identified}} by the [...] command which displays the type of the file in the first alphabetic letter of the file system permissions field. A normal (<b>regular)</b> <b>file</b> is indicated by a hyphen-minus [...]|$|E
50|$|Early {{implementations}} {{of symbolic}} links stored the symbolic link information as data in <b>regular</b> <b>files.</b> The file contained the textual {{reference to the}} link’s target, and an indicator denoting it as a symbolic link.|$|R
5000|$|MS-DOS {{borrowed}} {{the concept of}} special files from Unix but renamed them devices. Because early versions of MS-DOS did not support a directory hierarchy, devices were distinguished from <b>regular</b> <b>files</b> by making their names reserved words, chosen for a degree of compatibility with CP/M.|$|R
50|$|The vast {{majority}} of POSIX-compliant implementations use fast symlinks. However, the POSIX standard {{does not require the}} entire set of file status information common to <b>regular</b> <b>files</b> to be implemented for symlinks. This allows implementations to use other solutions, such as storing symlink data in directory entries.|$|R
50|$|Another {{complication}} is kernel {{support for}} hibernation, which suspends {{the computer to}} disk by dumping {{an image of the}} entire contents of memory to a swap partition or a <b>regular</b> <b>file,</b> then powering off. On next boot, this image has to be made accessible before it can be loaded back into memory.|$|E
50|$|An NTFS {{symbolic}} link {{is not the}} same as a Windows shortcut file, which is a <b>regular</b> <b>file.</b> The latter may be created on any filesystem (such as the earlier FAT32), may contain metadata (such as an icon to display when the shortcut is viewed in Windows Explorer), and is not transparent to applications.|$|E
5000|$|...i, do not {{classify}} {{the file}} further than to identify it as either: nonexistent, a block special file, a character special file, a directory, a FIFO, a socket, a symbolic link, or a <b>regular</b> <b>file.</b> Linux and BSD systems behave differently with this option and instead output an Internet media type (“MIME type”) identifying the recognized file format.|$|E
50|$|For {{performance}} reasons, each node in GFS and GFS2 {{has its own}} journal. In GFS {{the journals}} are disk extents, in GFS2 the journals are just <b>regular</b> <b>files.</b> The number of nodes which may mount the filesystem {{at any one time}} is limited by the number of available journals.|$|R
5000|$|Symbolic links: {{describes}} {{whether a}} system allows revision control of symbolic links as with <b>regular</b> <b>files.</b> Versioning symbolic links {{is considered by}} some people a feature and some people a security breach (e.g., a symbolic link to /etc/passwd). Symbolic links are only supported on select platforms, depending on the software.|$|R
5000|$|... $ find [...] -name 'my*' -type fThis {{limits the}} results of the above search to only <b>regular</b> <b>files,</b> {{therefore}} excluding directories, special files, symbolic links, etc. my* is enclosed in single quotes (apostrophes) as otherwise the shell would replace it with the list of files in the current working directory starting with my… ...|$|R
50|$|Closely {{coordinates}} {{with the}} Memory Manager, I/O Manager and I/O drivers {{to provide a}} common cache for <b>regular</b> <b>file</b> I/O. The Windows Cache Manager operates on file blocks (rather than device blocks), for consistent operation between local and remote files, and ensures {{a certain degree of}} coherency with memory-mapped views of files, since cache blocks are a special case of memory-mapped views and cache misses a special case of page faults.|$|E
50|$|Generally, a steganographic {{file system}} is {{implemented}} over a steganographic layer, which supplies just the storage mechanism. For example, the steganographic file system layer can be some existing MP3 files, each file contains {{a chunk of}} data (or {{a part of the}} file system). The final product is a file system that is hardly detected (depending on the steganographic layer) that can store any kind of file in a <b>regular</b> <b>file</b> system hierarchy.|$|E
5000|$|... $ find [...] \( [...] -name '*jsp' -o -name '*java' \) -type f -lsThe [...] {{operator}} prints extended information, and {{the example}} finds any <b>regular</b> <b>file</b> whose name ends with either 'jsp' or 'java'. Note that the parentheses are required. TIn many shells the parentheses must be escaped with a backslash ( [...] and [...] ) {{to prevent them}} from being interpreted as special shell characters. The [...] operator is not available on all versions of [...]|$|E
50|$|Most {{everyday}} {{files are}} relatively 'sparse' in an information entropy sense, and thus, most lossless algorithms a layperson {{is likely to}} apply on <b>regular</b> <b>files</b> compress them relatively well. This may, through misapplication of intuition, lead some individuals to conclude that a well-designed compression algorithm can compress any input, thus, constituting a magic compression algorithm.|$|R
5000|$|GFS2 uses <b>regular</b> (system) <b>files</b> for journals, whereas GFS uses special extents ...|$|R
5000|$|While {{there may}} seem to be no point to a file system which is {{guaranteed}} to either be grossly inefficient storage space-wise or to cause data loss and corruption either from data collisions or loss of the key (in addition to being a complex system, and for having poor read/write performance), performance was not the goal of StegFS. Rather, StegFS is intended to thwart [...] "rubberhose attacks", which usually work because encrypted files are distinguishable from <b>regular</b> <b>files,</b> and authorities can coerce the user until the user gives up the keys and all the files are distinguishable as <b>regular</b> <b>files.</b> However, since in a steganographic file system, the number of files are unknown and every byte looks like an encrypted byte, the authorities cannot know how many files (and hence, keys) are stored. The user has plausible deniability — he can say {{there are only a few}} innocuous files or none at all, and anybody without the keys cannot gainsay the user.|$|R
