391|412|Public
25|$|The XOR metric allows Kademlia {{to extend}} routing tables beyond single bits. Groups of bits {{can be placed}} in k-buckets. The group of bits are termed a prefix. For an m-bit prefix, there will be 2m-1 k-buckets. The missing k-bucket is a further {{extension}} of the <b>routing</b> <b>tree</b> that contains the node ID. An m-bit prefix reduces {{the maximum number of}} lookups from log2 n to log2m n. These are maximum values and the average value will be far less, increasing the chance of finding a node in a k-bucket that shares more bits than just the prefix with the target key.|$|E
5000|$|Core-based trees (CBT) is a {{proposal}} for making IP Multicast scalable by constructing a tree of routers. It was first proposed in a paper by Ballardie, Francis, and Crowcroft. What differentiates it from other schemes for multicasting is that the <b>routing</b> <b>tree</b> comprises multiple [...] "cores" [...] (also known as [...] "centres"). The locations of the core routers are statically configured. Other routers are added by growing [...] "branches" [...] of a tree, comprising a chain of routers, from the core routers out towards the routers directly adjacent to the multicast group members.|$|E
50|$|The XOR metric allows Kademlia {{to extend}} routing tables beyond single bits. Groups of bits {{can be placed}} in k-buckets. The group of bits are termed a prefix. For an m-bit prefix, there will be 2m-1 k-buckets. The missing k-bucket is a further {{extension}} of the <b>routing</b> <b>tree</b> that contains the node ID. An m-bit prefix reduces {{the maximum number of}} lookups from log2 n to log2m n. These are maximum values and the average value will be far less, increasing the chance of finding a node in a k-bucket that shares more bits than just the prefix with the target key.|$|E
40|$|Abstract — This paper {{studies the}} problem of energy {{efficient}} routing in a sensor network with multiple gateways. Due {{to the complexity of}} this problem, we divide it into two subproblems: {{the problem of}} constructing efficient <b>routing</b> <b>trees</b> and the problem of wake-up frequency assignment in a network with multiple <b>routing</b> <b>trees.</b> For the first problem we present an optimal algorithm and an approximation algorithm that achieves very close performance but can be more easily implemented. We prove that the second problem is NP-hard and propose a polynomial time approximation algorithm. I...|$|R
40|$|By {{spreading}} the workload across a sensor network, load balancing reduces hot {{spots in the}} sensor network and increases the energy lifetime of the sensor network. In this paper, we design a node-centric algorithm that constructs a loadbalanced tree in sensor networks of asymmetric architecture. We utilize a Chebyshev Sum metric to evaluate via simulation {{the balance of the}} <b>routing</b> <b>trees</b> produced by our algorithm. We find that our algorithm achieves <b>routing</b> <b>trees</b> that are more effectively balanced than the routing based on breadth-first search(BFS) and shortest-path obtained by Dijkstra's algorithm...|$|R
40|$|Abstract—ZigBee is the {{emerging}} industrial standard for ad hoc networks based on IEEE 802. 15. 4. Due to {{characteristics such as}} low data rate, low price, and low power consumption, ZigBee {{is expected to be}} used in wireless sensor networks for remote monitoring, home control, and industrial automation. Since {{one of the most important}} goals is to reduce the installation and running cost, ZigBee stack is embedded in small and cheap micro-controller units. Since <b>tree</b> <b>routing</b> does not require any routing tables to send the packet to the destination, it can be used in ZigBee end devices that have limited resources. However, <b>tree</b> <b>routing</b> has the problem that the packets follow the tree topology to the destination even if the destination is located nearby. We propose the shortcut <b>tree</b> <b>routing</b> protocol to reduce the routing cost of ZigBee <b>tree</b> <b>routing</b> by using the neighbor table that is originally defined in the ZigBee standard. While following the ZigBee <b>tree</b> <b>routing</b> algorithm, we suggest forwarding the packet to the neighbor node if it can reduce the routing cost to the destination. Simulation results show that the shortcut <b>tree</b> <b>routing</b> algorithm saves more than 30 percent of the hop count compared with ZigBee <b>tree</b> <b>routing.</b> Index Terms—ZigBee, <b>Tree</b> <b>routing,</b> Neighbor Table I...|$|R
40|$|Abstract — The IEEE 802. 16 mesh mode {{supports}} two scheduling mechanisms, namely centralized {{scheduling and}} distributed scheduling. Centralized scheduling {{is based on}} a <b>routing</b> <b>tree</b> to offer centralized control. As we will show, the structure of the <b>routing</b> <b>tree</b> has {{a significant impact on the}} system performance. In this paper, we propose a <b>routing</b> <b>tree</b> construction scheme for centralized scheduling to fully exploit spatial reuse. Our proposed method can be seamlessly integrated into IEEE 802. 16 without any modification to the protocol. In particular, our scheme takes into account both interference and bandwidth request during tree construction. Performance evaluation shows that the <b>routing</b> <b>tree</b> generated by the proposed scheme achieves performance close to the optimal result and significantly outperforms existing <b>routing</b> <b>tree</b> construction methods. I...|$|E
40|$|The Push Tree problem {{contains}} elements {{from both the}} Steiner Tree and Shortest Path problem. It deals with the trade-offs between the push and pull mechanism used in information distribution and retrieval. In, a two step approach for the Push Tree Problem was proposed. In the first step, a «good» spanning tree (called <b>routing</b> <b>tree)</b> is constructed and then the problem is solved in this particular tree. Finding a <b>routing</b> <b>tree</b> is NP-hard but the second step may be performed easily, thus {{the idea is to}} use the <b>routing</b> <b>tree</b> as a (semi-) stable infrastructure and to perform adaptations to changing information patterns inside the <b>routing</b> <b>tree.</b> In this paper, we study the robustness of a <b>routing</b> <b>tree</b> when the information requests disappear at some nodes...|$|E
40|$|We {{address the}} problem of <b>routing</b> <b>tree</b> {{maintenance}} in a network of embedded sensors. We compare two routing protocols. One protocol periodically discards and reconstructs the <b>routing</b> <b>tree.</b> The other uses incremental <b>routing</b> <b>tree</b> construction. We analyze their advantages and disadvantages and describe experiments to which we subjected the protocols to compare their performance. We propose a protocol that combines the best features of both original protocols...|$|E
40|$|We {{address the}} joint {{optimization}} of routing and compression for {{wireless sensor networks}} using a lifting-based 2 D transform that can be computed along arbitrary <b>routing</b> <b>trees.</b> The proposed 2 D transform allows for unidirectional computation, thereby eliminating costly backward transmissions often required by existing 2 D transforms. We also propose a framework for optimizing the transform by selecting among {{a different set of}} coding schemes (i. e., different levels in the wavelet decomposition). Since our transform can operate on arbitrary <b>routing</b> <b>trees,</b> we focus on the problem of jointly optimizing <b>routing</b> <b>trees</b> based on inter-node data correlation and inter-node distance. The two extreme solutions would be i) to route data along paths that maximize inter-node data correlation (at the risk of increasing transport costs), corresponding to a minimum spanning tree (MST), or ii) to follow shortest path <b>tree</b> (SPT) <b>routing</b> (where inter-node data correlation may not be as high). We propose an optimization technique that exhaustively searches for the optimal tree over a set of combinations of MST and SPT. We also propose a heuristic approximation algorithm that is amenable for use on larger networks and with which we observe total cost reductions close to 10 % for some of the data. ...|$|R
40|$|Multicast {{support in}} a Multiprotocol Label Switching (MPLS) network {{has yet to}} be defined. An MPLS network {{consists}} of label switching devices such as ATM. This document discusses both dense-mode and sparse-mode IP multicast within the context of MPLS networks. Unlike unicast routing, dense-mode multicast <b>routing</b> <b>trees</b> are established in a data-driven manner and {{it is not possible to}} topologically aggregate such trees, which are rooted at different sources. In sparse-mode multicast, source-specific trees may coexist with a core/shared tree, and it is not possible to assign a common label to traffic from different sources on a branch of the shared tree. This leads us to suggest a per-source traffic-driven label allocation scheme for supporting all three types of multicast (dense mode, shared <b>tree,</b> source <b>tree)</b> <b>routing</b> <b>trees</b> in a MPLS network...|$|R
40|$|As {{the core}} {{application}} of {{wireless sensor network}} technology, Data management and processing have become the research hotspot in the new database. This article studied mainly data management in wireless sensor networks, {{in connection with the}} characteristics of the data in wireless sensor networks, discussed wireless sensor network data query, integrating technology in-depth, proposed a mobile database structure based on wireless sensor network and carried out overall design and implementation for the data management system. In order to achieve the communication rules of above <b>routing</b> <b>trees,</b> network manager uses a simple maintenance algorithm of <b>routing</b> <b>trees.</b> Design ordinary node end, server end in mobile database at gathering nodes and mobile client end that can implement the system, focus on designing query manager, storage modules and synchronous module at server end in mobile database at gathering nodes. ...|$|R
40|$|The {{key issue}} of static routing {{algorithms}} {{is how to}} construct an energy efficient <b>routing</b> <b>tree</b> that is utilized during the whole network duration in order to extend network lifetime. In this paper, we have illuminated that, in applications that define network lifetime as {{the time when the}} first sensor dies, the optimal <b>routing</b> <b>tree</b> should be the <b>routing</b> <b>tree</b> with minimal maximal load of all sensors and named such trees the Minimal Maximal Load Tree (MMLT). Since the procedure of constructing a <b>routing</b> <b>tree</b> is complex and the number of possible routing trees in a network is very huge, we have proposed a genetic algorithm (GA) based algorithm to obtain approximate Minimal Maximal Load Tree (MMLT). Each individual corresponds to a <b>routing</b> <b>tree,</b> and the fitness function is defined as the maximal load of all sensors in accordance with the <b>routing</b> <b>tree</b> that the individual corresponds to. Thus, approximate MMLT is obtained and network lifetime is extended. Simulation results show that our proposed algorithm notably extends network lifetime...|$|E
30|$|Output: a <b>routing</b> <b>tree</b> T.|$|E
30|$|In our evaluation, {{we first}} {{consider}} the convergecast or to-sink traffic pattern. In this pattern, all nodes {{in the network}} send messages to a single sink node. This pattern is a representative of data collection in WSNs. Because we are considering a multihop network, a <b>routing</b> <b>tree</b> needs to be set up. To eliminate the influence of components other than the MAC protocol as much as possible, we use a fixed <b>routing</b> <b>tree</b> that we created off-line based on link quality measurements. Because different network setups have different characteristics, we use two different routing trees. The first <b>routing</b> <b>tree</b> has the sink in {{the centre of the}} network and has an average hopcount of approximately 1.86. The second <b>routing</b> <b>tree</b> has the sink {{at the edge of the}} network and has an average hopcount of approximately 2.48.|$|E
40|$|AbstractThe carving-width of a graph is {{the minimum}} {{congestion}} of <b>routing</b> <b>trees</b> for the graph. We determine the carving-width of generalized hypercubes: Hamming graphs, even grids, and tori. Our results extend {{the result of}} Chandran and Kavitha [L. S. Chandran, T. Kavitha, The carvingwidth of hypercubes, Discrete Math. 306 (2006) 2270 – 2274] that determines the carving-width of hypercubes...|$|R
40|$|We {{present the}} source-tree {{adaptive}} routing (STAR) protocol and analyze its performance in wireless networks with broadcast radio links. Routers in STAR communicate to its neighbors their source <b>routing</b> <b>trees</b> either incrementally or in atomic updates. Source <b>routing</b> <b>trees</b> are specified by stating the link parameters of each link {{belonging to the}} paths used to reach every destination. Hence, a router disseminates link-state updates to its neighbors for only those links along paths used to reach destinations. Simulation re-sults show that STAR is {{an order of magnitude}} more efficient than any topology-broadcast protocol, and four times more efficient than ALP, which was the most efficient table-driven routing protocol based on partial link-state information reported to date. The results also show that STAR is even more efficient than the Dynamic Source Routing (DSR) protocol, which {{has been shown to be}} one of the best performing on-demand routing protocols. 1...|$|R
40|$|In performance-driven {{interconnect}} design, delay estimators {{are used}} to determine both the topology and the layout of good <b>routing</b> <b>trees.</b> We address the class of moment-matching, or moment representation, methods used to simulate interconnects modeled as distributed RC or RLC lines. We provide accurate 2 - and 3 -segment equivalent circuits for the distributed RLC and distributed RC models. Our equivalent circuits approximate a distributed RLC structure accurately up to second degree terms. We have evaluated our models using the two-pole methodology for voltage response calculations. Previous approximate two-pole approaches have at least 14 % error even for small test cases. As <b>routing</b> <b>trees</b> become bigger and interconnection lines become longer, our approach has greater advantages in both accuracy and simulation complexity. 1 Overview Accurate calculation of propagation delay in VLSI interconnects {{is critical to the}} design of high speed systems. Direct simulation codes such as SPICE [...] ...|$|R
40|$|We present critical-sink <b>routing</b> <b>tree</b> (CSRT) constructions which yield {{high-performance}} routing trees {{by exploiting}} the critical-path {{information that may}} be available during timing-driven layout. Motivated by analysis of the Elmore delay formula, we propose the CS-Steiner class of heuristics and a "Global Slack Removal" algorithm; these modify traditional Steiner tree constructions to optimize signal delay at identified critical sinks. Extensive timing simulations, using industry IC and MCM technology parameters and a fast simulator based on a 2 -pole distributed RCL delay approximation [29], show that this simple approach affords very significant improvements over existing "performance-driven" <b>routing</b> <b>tree</b> constructions. Next, we observe that all existing <b>routing</b> <b>tree</b> objectives (e. g., minimum-cost Steiner [16] or bounded-radius [5]) are heuristic abstractions of the linear or Elmore delay models. We therefore propose {{a new class of}} efficient Elmore <b>routing</b> <b>tree</b> (ERT) constru [...] ...|$|E
40|$|To exploit in {{answering}} queries {{generated by the}} sink for the sensor networks, we propose an efficient routing protocol called energy-efficient dynamic <b>routing</b> <b>tree</b> (EDRT) algorithm. The idea of EDRT is to maximize in-network processing opportunities using the parent nodes and sibling nodes. In-network processing reduces the number of message transmission by partially aggregating results of an aggregate query in intermediate nodes, or merging the results in one message. This results in reduction of communication cost. Our experimental results based on simulations prove that our proposed method can reduce message transmissions more than query specific <b>routing</b> <b>tree</b> (QSRT) and flooding-based <b>routing</b> <b>tree</b> (FRT) ...|$|E
40|$|Multicast is {{the ability}} of a {{communication}} network to accept a single message from an application and to deliver copies of the message to multiple recipients at different location. With the development of Internet, Multicast is widely applied in all kinds of multimedia real-time application: distributed multimedia systems, collaborative computing, video-conferencing, distance education, etc. In order to construct a delay-constrained multicast <b>routing</b> <b>tree,</b> average distance heuristic (ADH) algorithm is analyzed firstly. Then a delay-constrained algorithm called DCADH (delay-constrained average distance heuristic) is presented. By using ADH a least cost multicast <b>routing</b> <b>tree</b> can be constructed; if the path delay can’t meet the delay upper bound, a shortest delay path which is computed by Dijkstra algorithm will be merged into the existing multicast <b>routing</b> <b>tree</b> to meet the delay upper bound. Simulation experiments show that DCADH has a good performance in achieving a low-cost multicast <b>routing</b> <b>tree...</b>|$|E
40|$|This paper {{considers}} the hop-constrained multicast route packing {{problem with a}} bandwidth reservation to build QoS-guaranteed multicast <b>routing</b> <b>trees</b> with a minimum installation cost. Given a set of multicast sessions, {{each of which has}} a hop limit constraint and a bandwidth requirement, the problem is to determine the set of multicast <b>routing</b> <b>trees</b> in an arc-capacitated network with the objective of minimizing the cost. For the problem, we propose a branch-and-cut-and-price algorithm, which {{can be viewed as a}} branch-and-bound method incorporating both the strong cutting plane algorithm and the column generation method. We implemented and tested the proposed algorithm on randomly generated problem instances with sizes up to 30 nodes, 570 arcs, and 10 multicast sessions. The test results show that the algorithm can obtain the optimal solution to practically sized problem instances within a reasonable time limit in most cases. Integer programming Multicast Optimization Column generation Cutting plane...|$|R
40|$|We {{present and}} verify the Source-Tree Routing (STR) {{protocol}} and analyze its performance in wireless networks with broadcast radio links. Routers in STR communicate to its neighbors their source <b>routing</b> <b>trees</b> incrementally. Source <b>routing</b> <b>trees</b> are specified by stating the link parameters of each link {{used in the}} path used to reach any destination. Hence, a router disseminates link-state updates incrementally to its neighbors for only those links along paths used to reach destinations. In contrast to prior protocols using partial link-state information, STR {{does not have to}} send "resets" (i. e., updates stating that particular links are no longer being used) in order to work correctly. STR is shown to converge to correct routing-table entries and to stop sending updates within a finite time after network changes. Simulation experiments illustrate that STR is well suited for wireless networks, by showing that it is an order of magnitude more efficient than forcing each node to [...] ...|$|R
40|$|A {{multihop}} progressive decentralized estimation {{scheme is}} presented for 1 -D, 2 -D, or 3 -D sensor networks where <b>routing</b> <b>trees</b> are available. The bit allocation for each sensor is optimized in a multihop setting. This new scheme {{is shown to}} be much more efficient in energy consumption than the nonprogressive decentralized estimation scheme available in the literature. The transmission energy model is based on spectrum-limited applications...|$|R
30|$|The nominal <b>routing</b> <b>tree</b> is shown, and the {{destination}} node is labelled 1.|$|E
30|$|In the <b>routing</b> <b>tree</b> concept, every node has {{a parent}} node through which it {{receives}} packets. In min-hop earliest delivery routing, the <b>routing</b> <b>tree</b> concept is different; every edge through which packets are routed has a parent edge. This method causes a node {{to appear in}} different branches of the routing tree; however, an edge can appear only on a single branch.|$|E
40|$|In {{this paper}} we propose a delay-constrained {{distributed}} multicast routing algorithm based on token passing. This algorithm is fully distributed and generates a multicast <b>routing</b> <b>tree,</b> which not only meets the real-time requirement, but also has a sub-optimal network cost. Simulations have been done and the results have shown that the multicast <b>routing</b> <b>tree</b> generated by our algorithm has better performance than previously known results...|$|E
40|$|Advances in sensor {{technology}} provide {{the opportunity for}} a wide range of applications not examined before. These advances come with the realization of many limitations, like energy constraints, communication limitations, or sensor node failures. To combat these limitations, several solutions have been proposed, most of which organize the sensor nodes into a tree-like configuration that enables innetwork aggregation. These solutions can lead to a heavy energy burden being put on nodes higher up in the tree, causing node failure and “stranded ” nodes, unable to communicate their results. One solution to this problem is to use multiple query <b>routing</b> <b>trees,</b> which leads to a more balanced network with less burden on the nodes higher in the tree. In this paper, we present a system framework for using multiple query <b>routing</b> <b>trees,</b> along with an analytical examination which enables us to determine the appropriate number of trees to be used and the proper placement of those trees. We also provide an evaluation tool for different network configurations. KEY WORDS load balancing, in-network aggregation, reliability...|$|R
40|$|Abstract—This paper {{discusses}} quality-of-service (QoS) multicast in wavelength-division multiplexing (WDM) networks. Given {{a set of}} QoS multicast requests, we are to find a set of cost suboptimal QoS <b>routing</b> <b>trees</b> and assign wavelengths to them. The {{objective is}} to minimize the number of wavelengths in the system. This is a challenging issue. It involves not only optimal QoS multicast routing, but also the optimal wavelength assignment. Existing methods consider channel setup in WDM networks in two separate steps: routing and wavelength assignment, which has limited power in minimizing the number of wavelengths. In this paper, we propose a new optimization method, which integrates routing and wavelength assignment in optimization of wavelengths. Two optimization algorithms are also proposed in minimizing the number of wavelengths. One algorithm minimizes the number of wavelengths through reducing the maximal link load in the system; while the other does it by trying to free out the least used wavelengths. Simulation results demonstrate that the proposed algorithms can produce suboptimal QoS <b>routing</b> <b>trees</b> and substantially save the number of wavelengths. Index Terms—Light-tree, QoS multicast, routing, wavelength assignment, WDM network...|$|R
40|$|Abstract—In this paper, {{we study}} the {{multicast}} routing prob-lem in Cognitive Radio Networks (CRNs). We propose a new network modeling method, where we model CRNs using a Multi-rate Multilayer Hyper-Graph (MMHG). Given a multicast {{session of the}} MMHG, {{our goal is to}} find the multicast <b>routing</b> <b>trees</b> that minimize the worst case end-to-end delay (delay), maximize the multicast rate (rate) and minimize the number of transmission links (numOfLinks) used in the multicast tree. We apply two metaheuristic algorithms (Multi-Objective Ant Colony System optimization algorithm (MOACS) [1] and A Simulated Annealing-Based Multi-objective Optimization Algo-rithm (AMOSA) [2]) in solving the problem. We also study the scheduling problem of multicast <b>routing</b> <b>trees</b> obtained using the MMHG model. Our simulation results show that within a few seconds, MOACS can find more than 60 % of the approximated Pareto Front (APF) in small CRNs, and AMOSA can find approximately 45 %. Moreover, the solutions found by MOACS and AMOSA that are not in the APF are within 10 % relative distances to solutions in the APF. I...|$|R
40|$|Abstract — To exploit in {{answering}} queries {{generated by the}} sink for the sensor networks, we propose an efficient routing protocol called energy-efficient dynamic <b>routing</b> <b>tree</b> (EDRT) algorithm. The idea of EDRT is to maximize in-network processing opportunities using the parent nodes and sibling nodes. Innetwork processing reduces the number of message transmission by partially aggregating results of an aggregate query in intermediate nodes, or merging the results in one message. This results in reduction of communication cost. Our experimental results based on simulations prove that our proposed method can reduce message transmissions more than query specific <b>routing</b> <b>tree</b> (QSRT) and flooding-based <b>routing</b> <b>tree</b> (FRT). Keywords- sensor networks; routing trees; query processing. I...|$|E
40|$|Wireless Sensor Networks (WSNs) are {{increasingly}} used in data-intensive {{applications such as}} micro-climate monitoring, precision agriculture, and audio/video surveillance. A key challenge faced by data-intensive WSNs is to transmit all the data generated within an application’s lifetime to the base station {{despite the fact that}} sensor nodes have limited power supplies. We propose using low-cost disposable mobile relays to reduce the energy consumption of data-intensive WSNs. Our approach differs from previous work in two main aspects. First, it does not require complex motion planning of mobile nodes, so it can be implemented on a number of low-cost mobile sensor platforms. Second, we integrate the energy consumption due to both mobility and wireless transmissions into a holistic optimization framework. Our framework consists of three main algorithms. The first algorithm computes an optimal <b>routing</b> <b>tree</b> assuming no nodes can move. The second algorithm improves the topology of the <b>routing</b> <b>tree</b> by greedily adding new nodes exploiting mobility of the newly added nodes. The third algorithm improves the <b>routing</b> <b>tree</b> by relocating its nodes without changing its topology. This iterative algorithm converges on the optimal position for each node given the constraint that the <b>routing</b> <b>tree</b> topology does not change. We present efficient distributed implementations for each algorithm that require only limited, localized synchronization. Because we do not necessarily compute an optimal topology, our final <b>routing</b> <b>tree</b> is not necessarily optimal. However, our simulation results show that our algorithms significantly outperform the best existing solutions...|$|E
40|$|In this paper, {{we propose}} a group {{computation}} based distributed algorithm for {{solving the problem}} of multi-constraint multicast routing. This algorithm is fully distributed and can generate within acceptable time and message complexities a multicast <b>routing</b> <b>tree,</b> which not only satisfies the required multiple QoS constraints but also has a sub-optimal network cost. The results of the simulations show that the multicast <b>routing</b> <b>tree</b> generated by our algorithm has better performance than the previous well-known results...|$|E
40|$|This paper {{discusses}} quality-of-service (QoS) multicast in wavelength-division multiplexing (WDM) networks. Given {{a set of}} QoS multicast requests, we are to find a set of cost suboptimal QoS <b>routing</b> <b>trees</b> and assign wavelengths to them. The {{objective is}} to minimize the number of wavelengths in the system. This is a challenging issue. It involves not only optimal QoS multicast routing, but also the optimal wavelength assignment. Existing methods consider channel setup in WDM networks in two separate steps: routing and wavelength assignment, which has limited power in minimizing the number of wavelengths. In this paper, we propose a new optimization method, which integrates routing and wavelength assignment in optimization of wavelengths. Two optimization algorithms are also proposed in minimizing the number of wavelengths. One algorithm minimizes the number of wavelengths through reducing the maximal link load in the system; while the other does it by trying to free out the least used wavelengths. Simulation results demonstrate that the proposed algorithms can produce suboptimal QoS <b>routing</b> <b>trees</b> and substantially save the number of wavelengths...|$|R
30|$|While the {{simulation}} uses the Routing Protocol for Low power and Lossy Networks (RPL) [40], the analytical model uses a predefined <b>tree</b> <b>routing</b> as in [41]. The PDR R_up,n and the end-to-end delay D_up,n {{are shown in}} the plot. Obviously, no confidence intervals are shown because no randomness {{is included in the}} calculation. The results show a good conformance between model and simulation and demonstrate the applicability of the analytical model for multi-hop networks as well as the validity of the Contiki simulation for the given scenario. The existing differences can be mainly traced back to the varying <b>routing</b> <b>trees</b> in {{the simulation}} runs.|$|R
40|$|The Sensor Network Application Construction Kit (SNACK) {{provides}} a new configuration language, component and service library, and compiler {{that make it}} easier to develop efficient sensor network applications. The goal is the construction of smart application service libraries: high-level libraries that implement concepts like <b>routing</b> <b>trees</b> and periodic sensing, and that combine automatically into efficient programs. Important language features include flexible control over component sharing and transitive arrow connections, which let independently-implemented services knit themselves into integrated control flow paths...|$|R
