0|10000|Public
40|$|<b>Reuse</b> <b>of</b> <b>components</b> and Component Based Development {{has become}} {{increasingly}} important concepts in Software Engineering. They are seen as way to improve the three goals for improving software development performance: Faster, Better and Cheaper. This thesis will study <b>reuse</b> <b>of</b> <b>components</b> and component based development at EDB Business Consulting. More specifically it will: • Document existing framework-components, using patterns • Systematize the experience using these components in projects • Suggest an overall reuse-process(guidelines) both for development for and with reuse, including simple metrics connected to this. The thesis will be primary be conducted at EDB-BC in Trondheim, but {{with the possibility of}} involving the Oslo- office. Oppg˚ava gjeve: 2003 / 02 / 25 Oppg˚ava leveres innen: 2003 / 07 / 23 Oppg˚ava levert: 2003 / 07 / 23 Utført ved: Institutt for datateknikk og informasjonsvitenskap Fagleg rettleiar...|$|R
40|$|In {{this paper}} we explore the <b>reuse</b> <b>of</b> <b>components</b> <b>of</b> known good {{schedules}} in new scheduling problems. This involves accumulating a case-base of good quality schedules, retrieving a case (or cases) similar to a new scheduling problem and building a new schedule from <b>components</b> <b>of</b> the retrieved cases...|$|R
40|$|Due to {{increasing}} design complexity and intensive <b>reuse</b> <b>of</b> <b>components,</b> verifying the correctness of circuits and systems becomes a {{more and more}} important factor. In the meantime, in many projects up to 80 % of the overall design costs are caused by verification and by this, checking the correct behavior becomes the dominating factor...|$|R
40|$|<b>Reuse</b> <b>of</b> {{software}} <b>components</b> {{is a must}} {{to enhance}} productivity in software engineering. Object-oriented techniques help to produce reuseable components. However, the problem of retrieval from a repository <b>of</b> reuseable <b>components</b> is difficult. CASE tools of today aid in this task, but are not sophisticated enough. <b>Reuse</b> <b>of</b> <b>components</b> by analogy {{seems to be an}} important element in the experienced software engineer's problem solving strategy. ROSA is a project that aims to use techniques from artificial intelligence, machine learning, and in particular analogical reasoning to help retrieving solutions to old software engineering projects for reuse in new projects. This report sets the context of the project and defines its content and boundaries...|$|R
40|$|A {{compositional}} {{verification method}} for multi-agent systems is presented {{and applied to}} a multi-agent system for one-to-many negotiation {{in the domain of}} load balancing of electricity use. Advantages of the method are that the complexity of the verification process is managed by compositionality, and that part of the proofs can be reused in relation to <b>reuse</b> <b>of</b> <b>components...</b>|$|R
40|$|The {{trend to}} {{multi-core}} chip designs presents new challenges for design automation, while the increased <b>reuse</b> <b>of</b> <b>components</b> may offer solutions. This paper describes {{some of the}} key challenges with attention paid to three enablers: a physical architecture to streamline chip integration, the linking of early analysis tools around shared data and an updated verification approach for multi-core designs...|$|R
40|$|The <b>reuse</b> <b>of</b> <b>components</b> {{increases}} {{the need to}} document the components in a standard way, because proper documentation assists a buyer to assess the credibility and maturity <b>of</b> a <b>component</b> and validate the functional and quality properties <b>of</b> a <b>component.</b> This document provides a general template for documenting software components in a standard way whereby the component buyer and developer views are taken into account...|$|R
5000|$|... 1969 - Started {{manufacturing}} and sales <b>of</b> <b>component</b> <b>parts</b> for medical equipment.|$|R
40|$|<b>Reuse</b> <b>of</b> large-grain {{software}} <b>components</b> {{offers the}} potential for significant savings in application development cost and time. Successful <b>reuse</b> <b>of</b> <b>components</b> and component substitutability depends both on qualities <b>of</b> the <b>components</b> <b>reused</b> {{as well as the}} software context in which the reuse is attempted. Disciplined approaches to the structure and design of software applications {{offers the potential}} of providing a hospitable setting for such reuse. We present the results of a series of experiments designed to determine how well "off-the-shelf" constraint solvers could be reused in applications designed in accordance with the C 2 software architectural style. The experiments involved the <b>reuse</b> <b>of</b> SkyBlue and Amulet's oneway formula constraint solver. We constructed numerous variations of a single application (thus an application family). The paper summarizes the style and presents the results from the experiments. The experiments were successful in a variety of dimensions [...] ...|$|R
50|$|Documenting {{software}} architecture facilitates communication between stakeholders, captures {{decisions about the}} architecture design, and allows <b>reuse</b> <b>of</b> design <b>components</b> between projects.|$|R
40|$|Information on product use {{conditions}} {{is essential for}} sound strategies of product service as well as takeback, refurbishing, <b>reuse</b> <b>of</b> <b>components,</b> or recycling. Further, it could improve design, market research and quality management. This paper describes a modular concept for life-cycle monitoring, identification of use conditions, reliability assessment and diagnosis of Insulated Gate Bipolar Transistors (IGBT) especially the wire bond interconnections...|$|R
40|$|The {{problem of}} {{recycling}} {{end of life}} automotive vehicles is serious worldwide. It {{is one of the}} most important streams of waste in developed countries. It has big importance as recycling potential of raw materials content in automotive vehicles is valuable. Different parts and assemblies after dismantling can also be reused in vehicles where replacement <b>of</b> specific <b>component</b> is necessary. <b>Reuse</b> <b>of</b> the <b>components</b> should be taken into consideration in selecting the vehicles dismantling strategy. It also complies with European Union policy concerning end of life vehicles (ELV). In the paper it is presented systematic approach to dismantling strategies including disassembly oriented on further <b>reuse</b> <b>of</b> <b>components.</b> It is focused on decision making and possible benefits calculation from economic and environmental point of view...|$|R
50|$|Documenting {{software}} architecture facilitates communication between stakeholders, captures early {{decisions about the}} high-level design, and allows <b>reuse</b> <b>of</b> design <b>components</b> between projects.|$|R
40|$|Cooperative {{software}} development in distributed environments has become common because of recent popularization of wide area network. In such a development fashion, <b>reuse</b> <b>of</b> software <b>components</b> is necessary {{as well as}} in personal or local development, and object-oriented technology is important as a basis. <b>Reuse</b> <b>of</b> object-oriented software <b>components</b> in distributed environments, however, has not become common yet as has been expected. This originates in not only difficulty in understanding characteristics <b>of</b> object-oriented software <b>components</b> whose structures are complicated, but also absence of support mechanisms for obtaining components in distributed environments. In this paper, first of all, we discuss what are to be handled as reusable object-oriented software components, then propose a management mechanism for promoting <b>reuse</b> <b>of</b> the <b>components</b> in distributed environments...|$|R
40|$|Abstract * Research on {{open source}} (OS) {{projects}} often {{focuses on the}} SourceForge collaboration platform. We argue that a GNU/Linux distribution, such as Debian, is better suited for the sampling of projects because it avoids biases and contains unique information only available in an integrated environment. Especially research on the <b>reuse</b> <b>of</b> <b>components</b> can build on dependency information inherent in the Debian GNU/Linux package tracking system. 1...|$|R
5000|$|<b>Reuse</b> <b>of</b> product <b>components</b> - it is {{possible}} to structure requirements and their linked artefacts in packages. These packages can be used for different products.|$|R
40|$|A {{software}} program requesting a resource {{that is not}} available usually raises an out-of-resource exception. Component software is software that has been assembled from standardized, reusable components which, in turn, may also composed from other components. Due to the independent development and <b>reuse</b> <b>of</b> <b>components,</b> component software has {{a high risk of}} causing out-of-resource exceptions. We present a small component language and develop a type system which can statically prevent this type of errors. This work continues our previous works by including explicit deallocation. We prove that the type system is sound with respect to safe deallocation and that sharp resource bounds can be computed statically...|$|R
40|$|Component {{technology}} {{has become a}} central focus of software engineering in research and development. Reusability is a key factor that contributes to its success. The <b>reuse</b> <b>of</b> <b>components</b> {{can lead to a}} shortening of software development cycles and savings in software development costs. However, existing component models provide no support for real-time services and some real-time extensions <b>of</b> <b>component</b> models lack <b>of</b> consideration for reusability <b>of</b> <b>components</b> in providing real-time services. In this work, we develop a real-time component-based system that maintains the reusability <b>of</b> <b>components...</b>|$|R
50|$|The Directive {{leaves the}} {{question}} <b>of</b> <b>component</b> <b>parts</b> mostly without harmonisation, given the widely varying practices between Member States.|$|R
5000|$|The {{resource}} provides comprehensive, up-to-date, evidence-derived {{information about}} Australian Indigenous health.The website {{has a number}} <b>of</b> <b>component</b> <b>parts</b> including: ...|$|R
40|$|Information on product use {{conditions}} {{is essential for}} sound strategies of product service as well as takeback, refurbishing, <b>reuse</b> <b>of</b> <b>components,</b> or recycling. Furthermore such information could improve future product design, market research and quality management. This paper describes a modular concept for life-cycle monitoring, {{as well as the}} identification of use conditions, reliability assessment and diagnosis of Insulated Gate Bipolar Transistors (IGBT) especially the wire bond interconnections...|$|R
40|$|Building {{distributed}} systems for international usage requires addressing many architectural and practical issues. Key to the efficient construction of such systems, modularity in systems and in run-time libraries allows greater <b>reuse</b> <b>of</b> <b>components</b> and thus permits incremental improvements to multilingual systems. Using safe software practices, such as banishing {{the use of}} literals and parameterizing user preferences, can help minimize {{the costs associated with}} localization, reengineering, maintenance, and design...|$|R
40|$|In {{this paper}} {{we present a}} timed {{extension}} of the AltaRica language, Timed AltaRica, and describe the architecture of a compiler from Timed AltaRica to timed automata. We present {{the features of the}} language, namely modularity, hierarchical modeling and <b>reuse</b> <b>of</b> <b>components</b> during the specification phase, on an avionics example. Then, we use the compiler from Timed AltaRica to Timed Automata to check some safety properties on the system. ...|$|R
40|$|Disassembly {{processes}} require flexible {{tools for}} loosening and handling operations. Today, disassembly processes demand {{a great deal}} of manual labour and a vast variety of tools. Partly destructive tools which generate and use new acting surfaces are able to increase the economic viability owing to their flexibility and their promotion <b>of</b> the <b>reuse</b> <b>of</b> <b>components.</b> This article describes selected methods of acting surface generation and their application for prototypical tools...|$|R
5000|$|The {{management}} and <b>reuse</b> <b>of</b> projects and <b>components</b> (openForge, CVS) ...|$|R
40|$|<b>Reuse</b> <b>of</b> {{software}} <b>components</b> {{emerged as}} an industry goal subsequent to a NATO conference in 1969 where Doug McIlroy first introduced the concept. Over the two decades since, reuse remained a topic of much discussion and some research; and, although different views exist {{on the degree of}} success enjoyed by software developers in today's industry, most students of the state of software development practice agree that McIlroy's original vision has yet to be achieved and that increased <b>reuse</b> <b>of</b> software <b>components</b> is possible and remains a goal worth pursuing...|$|R
40|$|Software <b>component</b> <b>reuse</b> {{has become}} <b>of</b> much {{interest}} in the software community due to its potential benefits, cost benefit, time saving, etc. which include increased product quality and decreased product development cost and estimated schedule. To select a component for reuse is very difficult {{because there are many}} components with approximate same name, same functionality etc. which make the <b>reuse</b> <b>of</b> <b>component</b> very time consuming. Hence there is required a technique which make the selection <b>of</b> <b>component</b> efficient and fast. For this purpose we purposed a scheme for the selection <b>of</b> <b>component</b> which will be more efficient than earlier scheme...|$|R
40|$|Abstract—The growing {{complexity}} of System-on-Chip (SoC) design {{calls for an}} increased usage of transaction-level modeling (TLM), high-level synthesis tools, and <b>reuse</b> <b>of</b> pre-designed <b>components.</b> In {{the framework of a}} compositional methodology for efficient SoC design exploration we present three main contributions: a concise library format for characterization and <b>reuse</b> <b>of</b> <b>components</b> specified in high-level languages like SystemC; an algorithm to prune alternative implementations <b>of</b> a <b>component</b> given the context of a specific SoC design; and an algorithm that explores compositionally the design space of the SoC and produces a detailed plan to run high-level synthesis on its components for the final implementation. The two algorithms are computationally efficient and enable an effective parallelization of the synthesis runs. Through a case study, we show how our methodology returns the essential properties of the design space at the system level by combining the information from the library <b>of</b> <b>components</b> and by identifying automatically those having the most critical impact on the overall design. I...|$|R
40|$|Component-based sofware {{development}} {{has become a}} popular paradigm in software engineering. From the theoretical point <b>of</b> view, <b>components</b> {{can be seen as}} coalgebras. We present a coalgebraic technique for component-based system specification and verification which is based on RSL, the wide spectrum specification language of the RAISE method. A bisimulation relationship between components is defined for <b>reuse</b> <b>of</b> <b>components</b> and used in the behavior verification of specification development. Final coalgebras are used to construct the minimal implementations of given specifications...|$|R
50|$|Fundamental to ERD is {{the concept}} of {{composing}} software systems based on the <b>reuse</b> <b>of</b> <b>components,</b> the use <b>of</b> software templates and on an architectural template. Continuous evolution of system capabilities in rapid response to changing user needs and technology is highlighted by the evolvable architecture, representing a class of solutions. The process focuses on the use of small artisan-based teams integrating software and systems engineering disciplines working multiple, often parallel short-duration timeboxes with frequent customer interaction.|$|R
40|$|International audienceOne of the {{principal}} goal of Component-Based Software Engineering (CBSE) is to allow the <b>reuse</b> <b>of</b> <b>components</b> in diverse situations without affecting their codes. To reach this goal, {{it is necessary to}} propose approaches to adapt a component with its environment when behavioural mismatches occur during their interactions. In this paper, we present a formal approach based on interface automata to adapt components in order to eliminate possible behavioural mismatches, and then insure more flexible interoperability between component...|$|R
40|$|We explore {{possibility}} of manual and automated contract extraction from Java classes and Enterprise Java Beans. Contracts are extended component interfaces that are defined using Contract Definition Language. They describe functional and non-functional properties. We examine how to extract hidden contracts and express machines, hoping to achieve increased dependability {{at the early}} phases of the software development lifecycle, and to support easy and safe <b>reuse</b> <b>of</b> <b>components</b> later. Indexed terms: contracts, components, composition, reuse, formal specification 1...|$|R
40|$|We present High-level Library Mapping (HLLM), a {{technique}} that permits <b>reuse</b> <b>of</b> complex databook <b>components</b> (speci cally ALUs) in architectural synthesis. We describe a dynamic programming formulation of HLLM, demonstrate the versatility of our approach {{on a variety of}} libraries and compare HLLM for ALUs with the traditional logic-synthesis approach. Our experiments show that HLLM for ALUs outperforms logic-synthesis in area, delay and runtime, indicating that HLLM is a promising approach for <b>reuse</b> <b>of</b> datapath <b>components</b> in architectural synthesis. ...|$|R
40|$|A {{topic in}} the field of {{knowledge}} acquisition is the <b>reuse</b> <b>of</b> <b>components</b> that are described at the knowledge level. Problems concern the description, indexing and retrieval <b>of</b> <b>components.</b> In our case there is the additional feature of integrating so called automated building blocks in a knowledge level description. This paper describes what knowledge level descriptions <b>of</b> <b>components</b> for <b>reuse</b> should look like, and proposes a way to describe assumptions and requirements that are to be made explicit. In the paper an extension of the “normal” knowledge acquisition setting is made in the direction <b>of</b> machine learning <b>components...</b>|$|R
40|$|The {{operating}} conditions of forest machines are analyzed. Transmission parts disabled {{as a result}} of intensive wear have been determined, their fracture mechanism has been established. A technique for diffuse impregnation <b>of</b> <b>component</b> <b>parts</b> with powdered mixtures containing boron, aluminum and silicon is offered. An optimal composition and temperature for diffuse impregnation <b>of</b> <b>component</b> <b>parts</b> operating under dynamic loading has been specified. Microhardness of surface and subsurface layers has been studied. Technique for abrasion testing is offered, comparative testing of carburized and borated samples has been carried out</p...|$|R
50|$|Furthermore, modules whose {{implementation}} is {{tangled with}} crosscutting concerns {{are hard to}} reuse in different contexts. Crosscutting impedes <b>reuse</b> <b>of</b> <b>components.</b> The lack <b>of</b> interfaces between crosscutting concerns and other modules {{makes it hard to}} represent and reason about the overall architecture of a system. As the concern is not modularized, the interactions between the concern and the top-level <b>components</b> <b>of</b> the system are hard to represent explicitly. Hence, these concerns become hard to reason about because the dependencies between crosscutting concerns and components are not specified.|$|R
