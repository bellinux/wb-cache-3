457|223|Public
5|$|The SecuROM {{software}} {{also caused}} some virus scanners and malware detector {{to believe the}} software was malicious. 2K Games assured players that the software installation process did not install any malicious code or <b>rootkit</b> However, players observed {{that some of the}} SecuROM software was not fully removed on uninstallation of the game.|$|E
25|$|In Italy, ALCEI (an {{association}} {{similar to}} EFF) also reported the <b>rootkit</b> to the Financial Police, {{asking for an}} investigation under various computer crime allegations, along with a technical analysis of the <b>rootkit.</b>|$|E
25|$|The behavioral-based {{approach}} to detecting rootkits attempts to infer {{the presence of}} a <b>rootkit</b> by looking for rootkit-like behavior. For example, by profiling a system, differences in the timing and frequency of API calls or in overall CPU utilization can be attributed to a <b>rootkit.</b> The method is complex and is hampered by a high incidence of false positives. Defective rootkits can sometimes introduce very obvious changes to a system: the Alureon <b>rootkit</b> crashed Windows systems after a security update exposed a design flaw in its code. Logs from a packet analyzer, firewall, or intrusion prevention system may present evidence of <b>rootkit</b> behaviour in a networked environment.|$|E
40|$|<b>Rootkits</b> {{refer to}} {{software}} {{that is used}} to hide the presence of malware from system/network administrators and permit an attacker to take control of a computer. In our previous work, we designed a system that would categorize <b>rootkits</b> based on the hooks that had been created. Focusing on <b>rootkits</b> that use inline function hooking techniques, we showed that our system could successfully categorize a sample of <b>rootkits</b> using unsupervised EM clustering. In this paper, we extend our previous work by outlining a new procedure to help system/network administrators identify the <b>rootkits</b> that have infected their machines. Using a logistic regression model for profiling families of <b>rootkits,</b> we were able to identify {{at least one of the}} <b>rootkits</b> that had infected each of the systems that we tested. Full Tex...|$|R
40|$|<b>Rootkits</b> are {{a type of}} malware {{that attempt}} to hide their {{presence}} on a system, typically by compromising the communication conduit between an Operating System and its users. In this chapter, we track the evolution of <b>rootkits</b> and the techniques used to defend against them from the earliest <b>rootkits</b> to highly advanced, present day <b>rootkits</b> capable of exploiting processor virtualization extensions and infecting the BIOS. 1...|$|R
25|$|Detecting <b>rootkits</b> {{is a major}} {{challenge}} for anti-virus programs. <b>Rootkits</b> have full administrative access to the computer and are invisible to users and hidden {{from the list of}} running processes in the task manager. <b>Rootkits</b> can modify {{the inner workings of the}} operating system and tamper with antivirus programs.|$|R
25|$|<b>Rootkit</b> {{detection}} {{is difficult}} because a <b>rootkit</b> {{may be able to}} subvert the software that is intended to find it. Detection methods include using an alternative and trusted operating system, behavioral-based methods, signature scanning, difference scanning, and memory dump analysis. Removal can be complicated or practically impossible, especially in cases where the <b>rootkit</b> resides in the kernel; reinstallation of the operating system may be the only available solution to the problem. When dealing with firmware rootkits, removal may require hardware replacement, or specialized equipment.|$|E
25|$|The first {{malicious}} <b>rootkit</b> for the Windows NT {{operating system}} appeared in 1999: a trojan called NTRootkit created by Greg Hoglund. It {{was followed by}} HackerDefender in 2003. The first <b>rootkit</b> targeting Mac OS X appeared in 2009, while the Stuxnet worm {{was the first to}} target programmable logic controllers (PLC).|$|E
25|$|During the Sony BMG CD copy {{protection}} scandal, Kaminsky used DNS cache snooping {{to find out}} whether or not servers had recently contacted any of the domains accessed by the Sony <b>rootkit.</b> He used this technique to estimate that there were at least 568,200 networks that had computers with the <b>rootkit.</b>|$|E
40|$|Smart {{phones are}} {{increasingly}} being equipped with operating systems that compare in complexity with those on desktop computers. This trend makes smart phone operating systems vulnerable {{to many of the}} same threats as desktop operating systems. In this paper, we focus on the threat posed by smart phone <b>rootkits.</b> <b>Rootkits</b> are malware that stealthily modify operating system code and data to achieve malicious goals, and have long been a problem for desktops. We use three example <b>rootkits</b> to show that smart phones are just as vulnerable to <b>rootkits</b> as desktop operating systems. However, the ubiquity of smart phones and the unique interfaces that they expose, such as voice, GPS and battery, make the social consequences of <b>rootkits</b> particularly devastating. We conclude the paper by identifying the challenges {{that need to be addressed}} to effectively detect <b>rootkits</b> on smart phones...|$|R
30|$|Advanced attacks {{which use}} higher {{privileges}} than hypervisor are not considered. Such attacks include SMM-based <b>rootkits</b> (Embleton et al. 2008), BIOS based <b>rootkits</b> or EFI based Bootkits (Kleissner 2009; Hudson and Rudolph 2015), DMA attacks through peripherals (Wojtczuk 2008) and even Chipset-based <b>rootkits</b> (Tereshkin and Wojtczuk 2009). The countermeasures need {{a combination of}} hardware architecture enhancement (Szefer and Lee 2012) and management education to prevent the attackers from accessing the hardware, which is out of our scope.|$|R
40|$|Smart {{phones are}} {{increasingly}} being equipped with operating systems that compare in complexity with those on desktop computers. This trend makes smart phone operating systems vulnerable {{to many of the}} same threats as desktop operating systems. This paper examines the threat posed by <b>rootkits</b> to smart phones. <b>Rootkits</b> are malware that stealthily achieve their goals by modifying operating system code and data, and have long been a problem for desktops. However, smart phones expose several unique interfaces, such as voice, GPS and battery, that <b>rootkits</b> can exploit in novel ways. These attacks can have serious social consequences, ranging from loss of privacy to denial of service during emergencies. This paper demonstrates the threat of smart phone <b>rootkits</b> with three novel attacks. We implemented <b>rootkits</b> that allow a remote attacker to: (1) snoop on a victim’s confidential conversations; (2) snoop on a victim’s geographical location; and (3) stealthily exhaust the battery on a victim’s phone. We also discuss the social implications of each of these attacks...|$|R
25|$|A <b>rootkit</b> can modify data {{structures}} in the Windows kernel using a method known as direct kernel object manipulation (DKOM). This method {{can be used to}} hide processes. A kernel mode <b>rootkit</b> can also hook the System Service Descriptor Table (SSDT), or modify the gates between user mode and kernel mode, in order to cloak itself. Similarly for the Linux operating system, a <b>rootkit</b> can modify the system call table to subvert kernel functionality. It's common that a <b>rootkit</b> creates a hidden, encrypted filesystem in which it can hide other malware or original copies of files it has infected. Operating systems are evolving to counter the threat of kernel-mode rootkits. For example, 64-bit editions of Microsoft Windows now implement mandatory signing of all kernel-level drivers {{in order to make it}} more difficult for untrusted code to execute with the highest privileges in a system.|$|E
25|$|A {{firmware}} <b>rootkit</b> uses device or platform firmware {{to create}} a persistent malware image in hardware, such as a router, network card, hard drive, or the system BIOS. The <b>rootkit</b> hides in firmware, because firmware is not usually inspected for code integrity. John Heasman demonstrated the viability of firmware rootkits in both ACPI firmware routines and in a PCI expansion card ROM. In October 2008, criminals tampered with European credit card-reading machines before they were installed. The devices intercepted and transmitted credit card details via a mobile phone network. In March 2009, researchers Alfredo Ortega and Anibal Sacco published details of a BIOS-level Windows <b>rootkit</b> that was able to survive disk replacement and operating system re-installation. A few months later they learned that some laptops are sold with a legitimate <b>rootkit,</b> known as Absolute CompuTrace or Absolute LoJack for Laptops, preinstalled in many BIOS images. This is an anti-theft technology system that researchers showed can be turned to malicious purposes.|$|E
25|$|The malware {{has both}} user-mode and kernel-mode <b>rootkit</b> {{capability}} under Windows, and its device drivers have been digitally {{signed with the}} private keys of two certificates that were stolen from separate well-known companies, JMicron and Realtek, both located at Hsinchu Science Park in Taiwan. The driver signing helped it install kernel-mode <b>rootkit</b> drivers successfully without users being notified, and therefore it remained undetected for a relatively long period of time. Both compromised certificates have been revoked by Verisign.|$|E
40|$|Abstract：The kernel {{system of}} Windows is more {{thoroughly}} exposed to people. So, thekernel-level <b>Rootkits</b> techniques are now laid on greater emphasis. It is very importantto maintain {{the security of}} computers and to conduct an in-depth research on theoperational mechanism by using kernel-level <b>Rootkits</b> in hiding its traces. Since theinvolved core techniques are beginning to catch on nowadays, we should analyzesome new key techniques employed for application of <b>Rootkits,</b> discuss the specificmethods and propose a set of defense strategy for computer security...|$|R
50|$|There are {{inherent}} limitations to {{the reliability of}} any program that attempts to detect compromises (such as <b>rootkits</b> and computer viruses). Newer <b>rootkits</b> may specifically attempt to detect and compromise copies of the chkrootkit programs or take other measures to evade detection by them.|$|R
50|$|Malware {{protection}} {{was mostly}} positive in detection and disinfection tests by AV-Test.org. Version 7.0 detected 100 percent of wildlist threats. Using one-month-old signatures {{and a set}} of new malware, however, detection fell to 14 percent. Files were scanned at 5.24 megabytes per second. Version 7.0 successfully identified all six actively running <b>rootkits,</b> four of six inactive <b>rootkits,</b> and was only able to remove two of six <b>rootkits.</b> The firewall correctly blocked all attempted outside connections, with a reasonable level of security when left on default settings.|$|R
25|$|He {{recognized}} the Sony BMG copy protection <b>rootkit</b> scandal to be {{a criminal act}} by Sony. Stallman supports a general boycott of Sony for its legal actions against George Hotz.|$|E
25|$|Rootkits {{employ a}} variety of {{techniques}} to gain control of a system; the type of <b>rootkit</b> influences the choice of attack vector. The most common technique leverages security vulnerabilities to achieve surreptitious privilege escalation. Another approach is to use a Trojan horse, deceiving a computer user into trusting the rootkit's installation program as benignin this case, social engineering convinces a user that the <b>rootkit</b> is beneficial. The installation task is made easier if the principle of least privilege is not applied, since the <b>rootkit</b> then does not have to explicitly request elevated (administrator-level) privileges. Other classes of rootkits can be installed only by someone with physical access to the target system. Some rootkits may also be installed intentionally by the owner of the system or somebody authorized by the owner, e.g. for the purpose of employee monitoring, rendering such subversive techniques unnecessary. The installation of malicious rootkits is commercially driven, with a pay-per-install (PPI) compensation method typical for distribution.|$|E
25|$|Anti-theft protection: Laptops {{may have}} BIOS-based <b>rootkit</b> {{software}} that will periodically report {{to a central}} authority, allowing the laptop to be monitored, disabled or wiped of information {{in the event that}} it is stolen.|$|E
50|$|<b>Rootkits</b> {{specialize}} in hiding themselves and other programs.|$|R
40|$|Dramatic {{increase}} in smartphone sales and third-party applications that users can download has significantly increased {{the possibility of}} <b>rootkits</b> and malware targeted for smartphones. This paper discusses {{the current state of}} research in detection and mitigation of propagation of malicious code, such as viruses, malware and even <b>rootkits</b> in smartphones. A new strategy is introduced that offers a solution to efficiently detect the presence of <b>rootkits</b> and malware in smartphones. A preliminary prototype based on this strategy has been built for the android dev phone. The paper discusses the design, implementation and preliminary performance of this prototype. 1...|$|R
40|$|This thesis {{deals with}} the generic {{detection}} of bootkits which are relatively {{a new kind of}} malicious sofware falling into the category of <b>rootkits.</b> The definition of malicious software is presented along with several examples. Then the attention is paid to the <b>rootkits</b> in the context of Microsoft Windows operating systems. This section lists several techniques used by <b>rootkits.</b> After that, the ways of preventing and detecting <b>rootkits</b> are mentioned. Bootkits are known for infecting hard disks Master Boot Record (MBR). The structure of the MBR is described along with the example of hard disk partitioning. Afterwards, the processor instruction set is outlined and the disassembly of Windows 7 MBR is given. The rest of the thesis is devoted to a description of the course of operating system bootkit infection, bootkit prevention, analysis of infected MBR samples, and in particular to the design, implementation and testing of the generic MBR infection detector...|$|R
25|$|Virus removal {{tools are}} {{available}} to help remove stubborn infections or certain types of infection. Examples include Trend Micro's <b>Rootkit</b> Buster, and rkhunter {{for the detection of}} rootkits, Avira's AntiVir Removal Tool, PCTools Threat Removal Tool, and AVG's Anti-Virus Free 2011.|$|E
25|$|In 2005, Sony BMG {{introduced}} new DRM technology which installed DRM {{software on}} users' computers without clearly notifying the user or requiring confirmation. Among other things, the installed software included a <b>rootkit,</b> which created a severe security vulnerability others could exploit. When {{the nature of}} the DRM involved was made public much later, Sony BMG initially minimized the significance of the vulnerabilities its software had created, but was eventually compelled to recall millions of CDs, and released several attempts to patch the surreptitiously included software to at least remove the <b>rootkit.</b> Several class action lawsuits were filed, which were ultimately settled by agreements to provide affected consumers with a cash payout or album downloads free of DRM.|$|E
25|$|There are {{at least}} five types of <b>rootkit,</b> ranging from those at the lowest level in {{firmware}} (with the highest privileges), through to the least privileged user-based variants that operate in Ring 3. Hybrid combinations of these may occur spanning, for example, user mode and kernel mode.|$|E
5000|$|Some <b>rootkits</b> {{hide in the}} HPA {{to avoid}} being {{detected}} by anti-rootkit and antivirus software.|$|R
50|$|Hooking SSDT calls {{is often}} used as a {{technique}} in both Windows <b>rootkits</b> and antivirus software.|$|R
50|$|Once a {{malicious}} program is installed on a system, {{it is essential}} that it stays concealed, to avoid detection. Software packages known as <b>rootkits</b> allow this concealment, by modifying the host's operating system so that the malware is hidden from the user. <b>Rootkits</b> can prevent a malicious process from being visible in the system's list of processes, or keep its files from being read.|$|R
25|$|Stuxnet {{has three}} modules: a worm that executes all {{routines}} {{related to the}} main payload of the attack; a link file that automatically executes the propagated copies of the worm; and a <b>rootkit</b> component responsible for hiding all malicious files and processes, preventing detection {{of the presence of}} Stuxnet. It is typically introduced to the target environment via an infected USB flash drive. The worm then propagates across the network, scanning for Siemens Step7 software on computers controlling a PLC. In the absence of either criterion, Stuxnet becomes dormant inside the computer. If both the conditions are fulfilled, Stuxnet introduces the infected <b>rootkit</b> onto the PLC and Step7 software, modifying the codes and giving unexpected commands to the PLC while returning a loop of normal operations system values feedback to the users.|$|E
25|$|Stuxnet, {{discovered}} by Sergey Ulasen, initially spread via Microsoft Windows, and targeted Siemens industrial control systems. While {{it is not}} the first time that hackers have targeted industrial systems, nor the first publicly known intentional act of cyberwarfare to be implemented, it is the first discovered malware that spies on and subverts industrial systems, and the first to include a programmable logic controller (PLC) <b>rootkit.</b>|$|E
25|$|The album debuted at No.3 on the Billboard 200 albums chart, {{an all-time}} high for the band, while bassist Tim Foreman {{attracted}} headlines by speaking out against the copy-protection used by the label and providing fans a detailed workaround on the band's message board, which was quickly deleted by Sony. This copy-protection is known as Extended Copy Protection, which has been identified by leading anti-virus companies as a trojan horse and a <b>rootkit.</b>|$|E
50|$|The suite had {{an overall}} malware {{detection}} rate of 83% {{giving it a}} total score of 7.0 out of 10. It detected 100% of <b>rootkits,</b> 93% of keyloggers and 89% of scareware.The suite had an overall malware blocking rate of 91% with an overall score of 9.0 out of 10. It detected 100% of commercial keyloggers and <b>rootkits</b> and 89% blocking rate on scareware.|$|R
40|$|Abstract—Statistics {{show that}} {{although}} malware detection techniques are detecting and preventing malware, {{they do not}} guarantee a 100 % detection and / or prevention of malware. This is especially the case {{when it comes to}} <b>rootkits</b> that can manipulate the operating system such that it can distribute other malware, hide existing malware, steal information, hide itself, disable anti-malware software etc all without the knowledge of the user. This paper will demonstrate the steps required in order to create two <b>rootkits.</b> We will demonstrate that by implementing <b>rootkits</b> or any other type of malware a researcher will be able to better understand the techniques and vulnerabilities used by an attacker. Such information could then be useful when implementing anti-malware techniques...|$|R
40|$|This paper {{presents}} {{a new approach}} to dynamically monitoring operating system kernel integrity, based on a property called state-based control-flow integrity (SBCFI). Violations of SBCFI signal a persistent, unexpected modification of the kernel’s control-flow graph. We performed a thorough analysis of 25 Linux <b>rootkits</b> and found that 24 (96 %) employ persistent control-flow modifications; an informal study of Windows <b>rootkits</b> yielded similar results. We have implemented SBCFI enforcement as part of the Xen and VMware virtual machine monitors. Our implementation detected all the control-flow modifying <b>rootkits</b> we could install, while imposing negligible overhead for both a typical web server workload and CPU-intensive workloads when operating at 1 second intervals on a multi-core machine...|$|R
