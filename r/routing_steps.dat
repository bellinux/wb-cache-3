60|64|Public
25|$|In addition, the {{placement}} and <b>routing</b> <b>steps</b> of electronic design automation (EDA) {{are similar in}} many ways to graph drawing, as {{is the problem of}} greedy embedding in distributed computing, and the graph drawing literature includes several results borrowed from the EDA literature. However, these problems also differ in several important ways: for instance, in EDA, area minimization and signal length are more important than aesthetics, and the routing problem in EDA may have more than two terminals per net while the analogous problem in graph drawing generally only involves pairs of vertices for each edge.|$|E
5000|$|The {{following}} lists common <b>routing</b> <b>steps</b> {{that are}} components of an automated attendant (any other <b>routing</b> <b>steps</b> {{would probably be}} more suitable to an IVR): ...|$|E
5000|$|First, {{determine}} {{an approximate}} course for each net, often by routing on a coarse grid. This step is called global routing, and may optionally include layer assignment. Global routing limits {{the size and}} complexity of the following detailed <b>routing</b> <b>steps,</b> which can be done grid square by grid square.|$|E
40|$|This paper {{describes}} {{an experiment in}} which parallel routing is performed on a medium grained hypercube parallel proces-sor having 64 processing elements. Each node is a complete 32 -bit computer with 128 K-bytes of memory and is con-nected to the other nodes via a direct hypercube interconnec-tion network. A new parallel routing algorithm was devel-oped to exploit this parallel structure. It is a three step algo-rithm consisting of a global <b>routing</b> <b>step,</b> a boundary crossing placement step, and a detailed <b>routing</b> <b>step.</b> All steps can be performed in parallel. When applied to a standard benchmark {{it was able to}} route 95 % of the wires. The algorithm was also executed on a large mainframe computer using the same benchmark. The execution time was compared to that for the hypercube. The hypercube was about three times as fast. ...|$|R
50|$|In {{electronic}} design, wire routing, {{commonly called}} simply <b>routing,</b> is a <b>step</b> {{in the design}} of printed circuit boards (PCBs) and integrated circuits (ICs). It builds on a preceding step, called placement, which determines the location of each active element of an IC or component on a PCB. After placement, the <b>routing</b> <b>step</b> adds wires needed to properly connect the placed components while obeying all design rules for the IC.|$|R
40|$|Abstract—In this research, a fuzzy {{multiple}} objective {{decision making}} model for solving a Multi-Depot Distribution Problem (MDDP) is proposed. This effective proposed model is applied for solving {{in the first}} step of Assignment First-Routing Second (AFRS) approach. Practically, a basic transportation model is firstly chosen to solve this kind of problem in the assignment step. After that the Vehicle Routing Problem (VRP) model is used to compute the delivery cost in the <b>routing</b> <b>step.</b> However, in the basic transportation model, only depot to customer relationship is concerned. In addition, the consideration of customer to customer relationship should also be considered since this relationship exists in the <b>routing</b> <b>step.</b> Both considerations of relationships are solved using Preemptive Fuzzy Goal Programming (P-FGP). The first fuzzy goal is set by a total transportation cost and the second fuzzy goal is set by a satisfactory level of the overall independence value. A case study is shown for describing the effectiveness of the proposed model. Results from the proposed model are compared with the basic transportation model that has previously been used in this company. The proposed model can reduce the delivery cost in the <b>routing</b> <b>step</b> owing to the better result in the assignment step. Moreover, defining fuzzy goals by membership functions are more realistic than crisps. Furthermore, flexibility to adjust goals for decision maker can also be increased...|$|R
50|$|Many auto attendants {{will have}} options {{to allow for}} time of day routing, as well as weekend and holiday routing. The {{specifics}} of these features will depend entirely on the particular automated attendant, but typically {{there would be a}} normal greeting and <b>routing</b> <b>steps</b> that would take place during normal business hours, and a different greeting and routing for non-business hours.|$|E
50|$|In addition, the {{placement}} and <b>routing</b> <b>steps</b> of electronic design automation (EDA) {{are similar in}} many ways to graph drawing, as {{is the problem of}} greedy embedding in distributed computing, and the graph drawing literature includes several results borrowed from the EDA literature. However, these problems also differ in several important ways: for instance, in EDA, area minimization and signal length are more important than aesthetics, and the routing problem in EDA may have more than two terminals per net while the analogous problem in graph drawing generally only involves pairs of vertices for each edge.|$|E
40|$|AbstractIn {{this paper}} we examine on-line heap {{construction}} and on-line permutation routing on trees under the matching model. Let T be an n-node tree of maximum degree d. By providing on-line algorithms we prove that: 1. (1) For a rooted tree of height h, on-line heap construction {{can be completed}} within (2 d − 1) h <b>routing</b> <b>steps.</b> 2. (2) For an arbitrary tree, on-line permutation routing can be completed within 4 dn <b>routing</b> <b>steps.</b> 3. (3) For a complete d-ary tree, on-line permutation routing can be completed within 2 (d − 1) n + 2 d log 2 n <b>routing</b> <b>steps...</b>|$|E
40|$|International audienceIn {{this paper}} {{we present a}} new {{clustering}} technique, based on the multilevel partitioning, for hierarchical FPGAs. The purpose of this technique is to reduce area and power by considering routability in early steps of the CAD flow. We show that this technique can reduce the needed tracks in the <b>routing</b> <b>step</b> by 15 % compared with the other packing tools...|$|R
40|$|We {{present a}} heavily {{parametrized}} tool suite {{that allows the}} modeling and exploration of heterogeneous, coarse-grained, heavily pipelined reconfigurable architectures. Our tools perform a simultaneous mapping and pipelining-aware placement, which is then followed by a congestion-avoiding router. Initial experiments show that this flow can succeed in implementing applications with smaller track count and reduced connectivity than existing commercial tools, suggesting changes to the original array architecture. The placer can reduce pipeline latency mismatches on converging paths, simplifying the problem for a pipelining-aware <b>routing</b> <b>step.</b> 1...|$|R
40|$|Based on the {{new concept}} of {{crosstalk}} immunity set (CIS), procedures to minimize capacitive cross-coupling effects are developed for domino logic circuit. The nets in a crosstalk immunity set are free from crosstalk effects for any combination of input vectors. New algorithms for CIS identification and minimization are proposed to maximize the chance of crosstalk minimization in <b>routing</b> <b>step.</b> Our <b>routing</b> algorithm augmented with CIS information searches for optimal solution to minimize maximum crosstalk the circuit would experience. Experimental {{results show that the}} reduction of maximum crosstalk is up to 30 % with CIS-augmented routing...|$|R
40|$|Abstract. We examine on-line heap {{construction}} and on-line permutation routing on trees under the matching model. Let T be and n-node tree of maximum degree d. By providing on-line algorithms we prove that: 1. For a rooted tree of height h, on-line heap construction {{can be completed}} within (2 d − 1) h <b>routing</b> <b>steps.</b> 2. For an arbitrary tree, on-line permutation routing can be completed within 4 dn <b>routing</b> <b>steps.</b> 3. For a complete d-ary tree, on-line permutation routing can be completed within 2 (d − 1) n + 2 dlog 2 n <b>routing</b> <b>steps.</b> ...|$|E
40|$|In this paper, {{we study}} the {{permutation}} packet routing problem on trees. We show that every permutation can be routed {{on a tree}} of n vertices in n - 1 <b>routing</b> <b>steps.</b> We provide an algorithm which produces in O(n²) time a schedule that needs O(n²) bits for its description. Moreover, we describe an on-line algorithm that completes the routing of any permutation in n - 1 <b>routing</b> <b>steps</b> by using at each vertex v buffering area of size at most 2 d(v), where d(v) is the degree of vertex v. Our results provide upper bounds {{on the number of}} <b>routing</b> <b>steps</b> required to route a permutation on an arbitrary connected graph G since the routing can be done by using only the edges of a spanning tree of G...|$|E
40|$|In this paper, {{we study}} the {{permutation}} packet routing problem on trees. We show that every permutation can be routed {{on a tree}} of n vertices in n - 1 <b>routing</b> <b>steps.</b> We provide two algorithms that produce such routing schedules. The first algorithm builds in O(n²) time a schedule that needs O(n²) bits for its description while the second one produces in O(n³) time a schedule that can be described with O(n log n) bits. Moreover, we describe an on-line algorithm that completes the routing of any permutation in n - 1 <b>routing</b> <b>steps</b> by using at each vertex v buffering area of size at most d²(v) where d(v) is the degree of vertex v. Our results provide upper bounds {{on the number of}} <b>routing</b> <b>steps</b> required to route a permutation on an arbitrary connected graph G since the routing can be done by using only the edges of a spanning tree of G...|$|E
40|$|We propose an {{oblivious}} algorithm {{to route}} linear-complement (LC) permutations on hypercubes in circuit switched and wormhole routing. The algorithm guarantees that N independent paths {{can be set}} up simultaneously for any LC permutation with only a comparison of two bits in one <b>routing</b> <b>step</b> for any path. An LC permutation is determined by a transformation matrix T and a constant modifier C. For all the LC permutations with the same transformation matrix T (we call them a type of permutations), an algorithm is executed to find an ordered sequence of dimensions without knowing a particular permutation. When the sequence of dimensions is used in the routing process for all the packets of a permutation of this type, a comparison of two bits is carried out in each <b>routing</b> <b>step</b> in the packet transmission process. It is guaranteed that no contention will occur between any two paths {{on the use of the}} dimensional links, thus N independent paths {{can be set up}} simultaneously for the N packets of an LC permutation. Time complexity of the algorithm for finding an ordered sequence for the use of the n dimensions is O(n 3) for any type of LC permutations (rather than one particular LC permutation), and it can be carried out off-line. The routing process itself is distributed, and oblivious. link_to_subscribed_fulltex...|$|R
50|$|The d-dimensional de Bruijn can be {{generalized}} to base k, in which case node i is connected to nodes k * i + j modulo kd, 0 ≤ j < k. The diameter is reduced to Θ(logk n). Koorde node i maintains pointers to k consecutive nodes beginning at the predecessor of k * i modulo kd. Each de Bruijn <b>routing</b> <b>step</b> can be emulated with an expected constant number of messages, so routing uses O(logk n) expected hops- For k = Θ(log n), we get Θ(log n) degree and Θ(log n/ log log n) diameter.|$|R
5000|$|Circle graphs {{arise in}} VLSI {{physical}} design as an abstract representation {{for a special}} case for wire routing, known as [...] "two-terminal switchbox routing". In this case the routing area is a rectangle, all nets are two-terminal, and the terminals are placed on {{the perimeter of the}} rectangle. It is easily seen that the intersection graph of these nets is a circle graph. [...] Among the goals of wire <b>routing</b> <b>step</b> is to ensure that different nets stay electrically disconnected, and their potential intersecting parts must be laid out in different conducting layers. Therefore circle graphs capture various aspects of this routing problem.|$|R
40|$|The {{critical}} {{problem in}} creating practical online SIMD mesh routing algorithms is to minimize both {{the number of}} communication steps and the size {{and complexity of the}} queues required at each PE (processing element). Currently, the best available algorithms for likely array sizes require 16 n <b>routing</b> <b>steps</b> with queue size 1; if priority queues of size 2 q - 1 are allowed, the number of <b>routing</b> <b>steps</b> required is reduced to 14 n/q + 2 n. We present an algorithm (the MGRA), based on wormhole routing, that has routed a large number of communication patterns (all patterns tried besides a synthetically constructed worst case) in 5 n <b>routing</b> <b>steps</b> with a FIFO queue of size 2. We also show that the MGRA can be modified for meshes with broadcast buses and reconfigurable broadcast buses to route in a similar number of <b>routing</b> <b>steps</b> but with a queue size of 1. A second algorithm (the CGRA) uses reconfigurable broadcast buses in implementing cut-through routing. Using the CGRA, sparse patterns are routed in a small constant number of communication steps. We prove that the MGRA has bad worst case performance, but also show that a randomizing preprocessing step can improve the predictability of the original result. Finally, we show how performance scales with changing inter- and intra-PE path widths...|$|E
40|$|In this paper, {{we study}} the {{permutation}} packet routing problem on trees. We show that every permutation can be routed {{on a tree}} of n vertices in n Γ 1 <b>routing</b> <b>steps.</b> We provide two algorithms that produce such routing schedules. The first algorithm builds in O(n 2) time a schedule that needs O(n 2) bits for its description while the second one produces in O(n 3) time a schedule that can be described with O(n log n) bits. Moreover, we describe an on-line algorithm that completes the routing of any permutation in n Γ 1 <b>routing</b> <b>steps</b> by using at each vertex v buffering area of size at most d 2 (v) where d(v) is the degree of vertex v. Our results provide upper bounds {{on the number of}} <b>routing</b> <b>steps</b> required to route a permutation on an arbitrary connected graph G since the routing can be done by using only the edges of a spanning tree of G. 1 Introduction The permutation packet routing problem on a connected undirected graph is the following: We are given a graph G [...] ...|$|E
40|$|In {{this paper}} we examine on-line heap {{construction}} and on-line permutation routing on trees under the matching model. Let T be and n-node tree of maximum degree d. By providing on-line algorithms we prove that: (i) For a rooted tree of height h, on-line heap construction {{can be completed}} within (2 d Γ 1) h <b>routing</b> <b>steps.</b> (ii) For an arbitrary tree, on-line permutation routing can be completed within 4 dn <b>routing</b> <b>steps.</b> (iii) For a complete d-ary tree, on-line permutation routing can be completed within 2 (d Γ 1) n+ 2 d log 2 n <b>routing</b> <b>steps.</b> Technical Report 514 Basser Department of Computer Science University of Sydney Original: 27 May 1997 1 The work of Dr Symvonis was supported by an ARC Institutional Grant. 27 May 1997 1 Introduction In packet routing problems we are given a network (usually represented by a connected, undirected graph) {{and a set of}} packets distributed over the nodes of the network. Each packet has an origin node and a destination node and our aim [...] ...|$|E
40|$|This paper {{presents}} a new method to express functional permissibilities for look-up table (LUT) based field pro-grammable gate arrays (FPGAs). The method represents functional permissibilities by using sets of pairs of func-tions, not by incompletely specified functions. It makes {{good use of}} the properties of LUTs such that their internal logics can be freely changed. The permissibilities ex-pressed by the proposed method have the desired property that at many points of a network they can be simultaneously treated. Applications of the proposed method are also pre-sented; a method to optimize networks and a method to remove connections that are obstacles at the <b>routing</b> <b>step.</b> Preliminary experimental results are given to show the effectiveness of our proposed method. ...|$|R
40|$|We {{evaluate}} an algorithm that efficiently computes short {{paths in}} social networks by exploiting their spatial component. The main idea {{is very simple}} and builds upon Milgram's seminal social experiment, where target individuals were found by having participants forward, or route, messages towards the target. Motivated by the somewhat surprising success of this experiment, Kleinberg introduced a model for spatial social networks, wherein a procedure called 'greedy routing' {{can be used to}} find short, but not necessarily shortest paths between any two individuals. We extend Klein berg's greedy routing procedure to explore k>;= 1 links at each <b>routing</b> <b>step.</b> Experimental evaluations on social networks obtained from real-world mobile and landline phone communication data demonstrate that such adaptations can efficiently compute accurate estimates for shortest-path distances...|$|R
40|$|The torus routing chip (TRC) is a self-timed {{chip that}} {{performs}} deadlock-free cut-through routing in k-ary n-cube multiprocessor interconnection networks {{using a new}} method of deadlock avoidance called virtual channels. A prototype TRC with byte wide self-timed communication channels achieved on first silicon a throughput of 64 Mbits/s in each dimension, about {{an order of magnitude}} better performance than the communication networks used by machines such as the Caltech Cosmic Cube or Intel iPSC. The latency of the cut-through routing of only 150 ns per <b>routing</b> <b>step</b> largely eliminates message locality considerations in the concurrent programs for such machines. The design and testing of the TRC as a self-timed chip was no more difficult {{than it would have been}} for a synchronous chip...|$|R
40|$|Borodin, Rabani and Schieber [3] {{presented}} an O(n p n) -step algorithm for hot-potato routing of permutations on n n meshes. They conjectured that their algorithm completes the routing of a permutation in O(n) steps. In this paper, we present worst-case partial permutations which force their algorithm to use (n p n) <b>routing</b> <b>steps...</b>|$|E
40|$|In {{this paper}} {{we present a}} CAD system for logic design using the Atmel 6000 series FPGA circuits. The design input is a textual {{description}} in the ABEL hardware description language. This description is compiled into a set of equations. From this set of equations, an internal representation of the digital circuit is generated. Then, the CAD system performs the technol-ogy mapping, placement and <b>routing</b> <b>steps,</b> and generates a file for configuring the FPGA cir-cuit. The technology mapping algorithm also tries to reduce {{the complexity of the}} placement and <b>routing</b> <b>steps.</b> We describe a bipartitioning algorithm, that not only balances the size of the two partitions, but also evenly distributes the connections among them. The routing algo-rithm implemented simultaneously treats the global and local routing. According to the sorting of the connection list, we can have two kinds of optimizations: area optimization and speed optimization...|$|E
40|$|In {{this paper}} we present an {{extensive}} study of many-to-many routing on trees under the matching routing model. Our study includes on-line and off-line algorithms. We present an asymptotically optimal on-line algorithm which routes k packets to their destination within d(k − 1) + d · dist <b>routing</b> <b>steps,</b> where d {{is the degree}} of tree T on which th...|$|E
40|$|The {{algorithms}} and {{the implementation}} of a new macro/custom cell chip-planning. placement, and global muring package arc presented. The siuudatcd-annealing-based placement algorithm m. =d. S in hvo stages. I ” the fust stage. the iuteXO”“at 8 r. X around theindividual cells is determined using B new dynamic intaconnect ~TCB estimator. The second stage consists of: (1) a channel definition step, using a new channel definition algorithm, (2) a global <b>routing</b> <b>step.</b> using a new global router algorithm. and (3) a placement refinement step. This strategy has produced placements which require very little placement modification during detailed routing. Total interco~nect~lcn~th savings of 8 to 49 percent were achieved in experiments on 9 industrml cxrcmts. Furthermore, circuit-area reductions ranged from 4 to 56 percent versus a variety of other placement methods. 1...|$|R
40|$|Copyright c○ 2005 CR-ISCI 2 The routing {{problem for}} shared path {{protection}} in multi-domain optical mesh networks is difficult {{due to the}} lack of complete and global knowledge on the network topology and bandwidth allocation. To overcome this difficulty, we propose an aggregated network modeling by overestimation with a two-step routing strategy. In the first <b>step,</b> a rough <b>routing</b> solution is sketched in a compact network which is the topology aggregation of the multi-domain network. A complete routing is then determined by solving routing problems within the original single-domain networks. Each <b>routing</b> <b>step</b> can be solved by either using an exact optimization or heuristic method. Computational results show the relevance of the aggregated network modeling. They also prove the scalability of the proposed routing for multi-domain networks and its efficiency in comparison with the optimal solution obtained by using the complete information scenario...|$|R
40|$|Parameterised {{configurations}} for FPGAs are configuration bitstreams {{of which}} some of the bits are defined as Boolean functions of parameters. By evaluating these Boolean functions using different parameter values, {{it is possible to}} quickly and efficiently derive specialised configuration bitstreams with different properties. Generating and using parameterized configurations requires a new tool flow. In this paper we propose a novel algorithm for the <b>routing</b> <b>step</b> of this tool flow. This new router, called the connection bundle router, is able to route a circuit with parameterized interconnections. It produces routing solutions in less time (up to a factor 5, 2) and with a better quality in terms of number of wires (up to 38 %) and minimum track width (up to 25 %) than its predecessors. The connection bundle router is fully automated and uses a scalable connection-based representation for the parameterized interconnections in a tunable circuit...|$|R
40|$|In this paper, {{we study}} the {{permutation}} packet routing problem on trees. We show that every permutation can be routed {{on a tree}} of n vertices in n − 1 <b>routing</b> <b>steps.</b> We provide two algorithms that produce such routing schedules. The first algorithm builds in O(n 2) time a schedule that needs O(n 2) bits for its description while the secon...|$|E
40|$|This thesis {{deals with}} routing {{processes}} of computer networks, overview of netwrok topologies and commonly used routing algorythms. It includes {{detailed description of}} created application to graphycal dysplay of networks schemes and routing. It contains transformation process of some schemes and the visualisation of all <b>routing</b> <b>steps</b> like an animation. The potency of usage and future development is commented briefly...|$|E
40|$|Routing h-relations is {{considered}} on hypercubes consisting of N processing units (PUs). In the full-port model, the randomized algorithm by Valiant and Brebner, achieves this in O(h+logN) <b>routing</b> <b>steps,</b> but requires ΩΓ h Δ log N) computation steps. This {{implies that the}} power of the full-port model cannot effectively be used for non-constant h. We present a strategy, which allows {{to reduce the number of}} computation steps required for performing an h-relation. If h = log c N, c ? 1 a constant, then the total routing time becomes O(h Δ log N= log log N+log 2 N). For h = N ffl, ffl ? 0 a constant, we achieve the optimal time order: O(h). Here the results are stated only for hypercubes, but are actually formulated for all networks for which Valiant's paradigm gives an algorithm that requires less <b>routing</b> <b>steps</b> than computation steps. We also prove that under fairly general assumptions the obtained results are optimal to within a constant factor...|$|E
40|$|A new {{broadcasting}} {{method is}} presented for hypercubes with wormhole routing mechanism. The approach {{is based on}} determination of the set of nodes (called stations) in the hypercube such that for any node in the network there is a station at distance of at most 1. Once stations are identified, parallel disjoint paths are formed from the source to all stations. The broadcasting is accomplished first by sending the message to all stations which will in turn inform {{the rest of the}} nodes of the message. To establish node-disjoint paths between the source node and all stations, we introduce a new routing strategy. We prove that multicasting can be done in one <b>routing</b> <b>step</b> as long as the number of destination nodes are fewer than or equal to n in an n-dimensional hypercube. The number of broadcasting <b>steps</b> using our <b>routing</b> is equal to or smaller than that obtained in an earlier work...|$|R
40|$|Glitches (spurious transitions) {{are common}} in {{electronic}} circuits. In this paper we present a novel approach to reduce dynamic power in FPGAs by reducing glitches during the <b>routing</b> <b>step.</b> This approach involves finding alternative routes for earlyarriving signals, so that signal arrival times at LUTs are aligned and no glitches are generated. This approach does not require additional circuitry to balance signals as done in previous work, but uses the available programmable routing resources instead. We develop an efficient algorithm to find routes with target delays. Based on this algorithm, we then build a glitch-aware router, named GlitchReroute, aiming at reducing dynamic power. To {{the best of our}} knowledge, this is the first glitch-aware routing algorithm for FPGAs. Experiments show that an average of 23 % reduction in glitch power is achieved, which translates into a 9. 8 % reduction in dynamic power, compared to the glitchunaware VPR router. Categories and Subject Descriptor...|$|R
40|$|The routing of {{messages}} {{is one of}} the basic operations any computer network needs to provide. In this thesis, we consider wireless ad hoc and sensor networks and present several routing protocols that are tailored to the limited hardware capabilities of network participants such as sensor nodes. The constraint memory and computing power as well as the limited energy of such devices requires simplified routing protocols compared to the IP based routing of the Internet. The challenge is to build light routing protocols that still find good routing paths, such as to minimize not only the number of forwarding steps but also the energy consumption. In {{the first part of this}} work we focus on the protocol design and analyze the properties of our routing algorithms under simplifying network models. In particular, we describe a location service that supports geographic routing even if the destination node is constantly moving. Such a location service is important as the geographic routing technique bases each <b>routing</b> <b>step</b> o...|$|R
