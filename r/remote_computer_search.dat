0|2721|Public
50|$|One {{limitation}} {{is that when}} connected to a <b>remote</b> <b>computer</b> the <b>remote</b> keyboard layout is always used. This means typing some characters on your local keyboard {{could result in the}} wrong character being printed on the <b>remote</b> <b>computer.</b>|$|R
50|$|EMCO Remote Deployment: This tool allows replicating {{the local}} file system and {{registry}} changes on <b>remote</b> <b>computers</b> across the local network. It tracks changes {{carried out by}} a local application installation and updates the selected <b>remote</b> <b>computers</b> accordingly to perform a remote application deployment.|$|R
40|$|This paper {{describes}} an experience {{made in a}} research project cotton properties: Inference through Data Mining Techniques, funded by Science and Technology Foundation using Data Mining Techniques and by using World Wide Web and Internet tools. This paper {{describes an}} experience made in a research project Cotton properties: Inference through Data Mining Techniques, funded by Science and Technology Foundation using Data Mining Techniques and by using World Wide Web and Internet tools. Our importance level in society arises from our capacity of using knowledge and react face to new information requirement. Our psychological and intellectual development depends on a fast access to the information and the feeling of insatiability, which characterizes us, compels us to communicate it with frequency and to change ideas constantly. Due to group communication necessity, we talk every day in a direct or indirect way, through group meetings or using traditional medias. However with Internet potentialities, group communication becomes easier, {{such as the use}} of mailing lists, chats and discussion forums. The Internet supports numerous services, including electronic mail, file transfer, fax messages, conferencing, bulletin boards, <b>remote</b> <b>computer</b> access, <b>search</b> engines, forums, chats, electronic shopping, EDI and many more. The information and services are distributed among the various individually managed networks comprising the Internet and are accessible from anywhere in the world to anyone with a valid Internet address and connection. The two main reasons for organizations use Internet are, worldwide connectivity, access to useful information, and it is cheaper than establishing and operating private networks. Internet provides a range of tools for both communication and information retrieval as show in Fig. 1. Due to vast size and scope of this network important tools have and are still being developed to aid in the access to this information. These tools go beyond the conventional e-mail, news, bulletin board and directory services and include powerful client-server and GUIs. In a project, it allows, among other things, full contact and discussion between all partners even if they are far from each other...|$|R
40|$|Abstract- The {{advancement}} in mobile technology is fast changing {{the traditional way}} of computing. Several tasks which were previously performed only on personal computers are now possible with mobile devices. This paper presents RSC, a remote system controller, which is an application to control a <b>remote</b> <b>computer</b> through java enabled mobile devices such as mobile phone. Basic computer operations such as rebooting, shutting down a <b>remote</b> <b>computer</b> and file transfer from a computer to a mobile device are implemented. Keywords-Mobile application, <b>Remote</b> <b>Computer</b> control, java networking...|$|R
40|$|International audienceOne {{has a large}} {{workload}} that is "divisible" (its constituent work's granularity can {{be adjusted}} arbitrarily) and one has access to p <b>remote</b> <b>computers</b> that can assist in computing the workload. How can one best utilize the computers toward this end? Two features complicate this question. First, the <b>remote</b> <b>computers</b> may differ from one another in speed. Second, each <b>remote</b> <b>computer</b> is subject to interruptions of known likelihood that kill all work in progress on it. One wishes to orchestrate sharing the workload with the <b>remote</b> <b>computers</b> {{in a way that}} maximizes the expected amount of work completed, given the risk of interruptions. We consider three versions of the preceding problem. Two versions envision heterogeneous computing resources: the <b>remote</b> <b>computers</b> may differ from one another in speed; one version envisions homogeneous computing resources: the <b>remote</b> <b>computers</b> are identical. One of the heterogeneous versions ignores communication costs (i. e., assumes that they are negligible); the other two versions account explicitly for communication costs. We provide exact expressions for the optimal work expectation for all three versions of the problem. For the most general version (heterogeneous resources, with communication costs), we provide a recurrence for computing this expectation; for the other two versions, we provide closed-form expressions...|$|R
40|$|International audienceOne {{has a large}} {{workload}} that is ldquodivisiblerdquo-its constituent work's granularity can {{be adjusted}} arbitrarily;-and one has access to p <b>remote</b> <b>computers</b> that can assist in computing the workload. The {{problem is that the}} <b>remote</b> <b>computers</b> are subject to interruptions of known likelihood that kill all work in progress. One wishes to orchestrate sharing the workload with the <b>remote</b> <b>computers</b> in a way that maximizes the expected amount of work completed. Strategies for achieving this goal, by balancing the desire to checkpoint often, in order to decrease the amount of vulnerable work at any point, vs. the desire to avoid the context-switching required to checkpoint, are studied. Strategies are devised that provably maximize the expected amount of work when there is only one <b>remote</b> <b>computer</b> (the case p = 1). Results suggest the intractability of such maximization for higher values of p, which motivates the development of heuristic approaches. Heuristics are developed that replicate works on several <b>remote</b> <b>computers,</b> in the hope of thereby decreasing the impact of work-killing interruptions. The quality of these heuristics is assessed through exhaustive simulations...|$|R
40|$|One {{has a large}} {{workload}} that is "divisible" (its constituent work's granularity can {{be adjusted}} arbitrarily) and one has access to p <b>remote</b> <b>computers</b> that can assist in computing the workload. How can one best utilize the computers? Two features complicate this question. First, the <b>remote</b> <b>computers</b> may differ from one another in speed. Second, each <b>remote</b> <b>computer</b> is subject to interruptions of known likelihood that kill all work in progress on it. One wishes to orchestrate sharing the workload with the <b>remote</b> <b>computers</b> {{in a way that}} maximizes the expected amount of work completed. We deal with three distinct problem instances. The simplest problem ignores communication costs, but considers a heterogeneous set of resources that may differ in speed. The other two problems account for communication costs, first with identical <b>remote</b> <b>computers,</b> and then with computers that may differ in speed. We provide exact expressions for the optimal work expectation for all three problems. For the first two problems we provide explicit, closed-form expressions; for the last (and most general) problem, we provide a recurrence for computing this optimal value...|$|R
40|$|One {{has a large}} {{workload}} that is “divisible”—its constituent work’s granularity can {{be adjusted}} arbitrarily—and one has access to p <b>remote</b> <b>computers</b> that can assist in computing the workload. The {{problem is that the}} <b>remote</b> <b>computers</b> are subject to interruptions of known likelihood that kill all work in progress. One wishes to orchestrate sharing the workload with the <b>remote</b> <b>computers</b> in a way that maximizes the expected amount of work completed. Strategies for achieving this goal, by balancing the desire to checkpoint often, in order to decrease the amount of vulnerable work at any point, vs. the desire to avoid the context-switching required to checkpoint, are studied. Strategies are devised that provably maximize the expected amount of work when there is only one <b>remote</b> <b>computer</b> (the case p = 1). Results are presented that suggest the intractability of such maximization for higher values of p, which motivates the development of heuristic approaches. Heuristics are developed that replicate work on several <b>remote</b> <b>computers,</b> in the hope of thereby decreasing the impact of work-killing interruptions...|$|R
40|$|Abstract. One {{has a large}} {{workload}} that is “divisible ” (its constituent work’s granularity can {{be adjusted}} arbitrarily) and one has access to p <b>remote</b> <b>computers</b> that can assist in computing the workload. How can one best utilize the computers? Two features complicate this question. First, the <b>remote</b> <b>computers</b> may differ from one another in speed. Second, each <b>remote</b> <b>computer</b> is subject to interruptions of known likelihood that kill all work in progress on it. One wishes to orchestrate sharing the workload with the <b>remote</b> <b>computers</b> {{in a way that}} maximizes the expected amount of work completed. We deal with three distinct problem instances. The simplest problem ignores communication costs, but considers a heterogeneous set of resources that may differ in speed. The other two problems account for communication costs, first with identical <b>remote</b> <b>computers,</b> and then with computers that may differ in speed. We provide exact expressions for the optimal work expectation for all three problems. For the first two problems we provide explicit, closed-form expressions; for the last (and most general) problem, we provide a recurrence for computing this optimal value...|$|R
5000|$|Shutdown - special {{connection}} {{to shut down}} the <b>remote</b> <b>computer.</b>|$|R
5000|$|Remote {{diagnostics}} {{to gather}} system {{information from a}} <b>remote</b> <b>computer.</b>|$|R
50|$|ICMP {{tunneling}} {{works by}} injecting arbitrary data into an echo packet {{sent to a}} <b>remote</b> <b>computer.</b> The <b>remote</b> <b>computer</b> replies in the same manner, injecting an answer into another ICMP packet and sending it back. The client performs all communication using ICMP echo request packets, while the proxy uses echo reply packets.|$|R
25|$|The <b>remote</b> <b>{{computer}}</b> and {{the local}} computer can share the clipboard.|$|R
5000|$|ISO 23950—protocol for searching and {{retrieving}} {{information from}} <b>remote</b> <b>computer</b> databases ...|$|R
5000|$|Clipboard can {{be shared}} between the <b>remote</b> <b>{{computer}}</b> and the local computer ...|$|R
40|$|Abstract. Omni remote {{procedure}} call facility, OmniRPC, is a threadsafe grid RPC facility for cluster and global computing environments. The remote libraries are implemented as executable programs in each <b>remote</b> <b>computer,</b> and OmniRPC automatically allocates remote library calls dynamically on appropriate <b>remote</b> <b>computers</b> to facilitate location transparency. We propose to use OpenMP as an easy-to-use and simple programming environment for the multi-threaded client of OmniRPC. We use the POSIX thread implementation of the Omni OpenMP compiler which allows multi-threaded execution of OpenMP programs by POSIX threads even in a single processor. Multiple outstanding requests of OmniRPC calls in OpenMP work-sharing construct are dispatched to different <b>remote</b> <b>computers</b> to exploit network-wide parallelism. ...|$|R
25|$|Save-Help: Help can now {{be saved}} for modules that are {{installed}} on <b>remote</b> <b>computers.</b>|$|R
50|$|For example, it is {{possible}} to expose a bourne shell process to <b>remote</b> <b>computers.</b>|$|R
5000|$|Display of a <b>remote</b> <b>computer's</b> desktop in a {{real time}} mode on local screen.|$|R
5000|$|Send message - sends a {{text message}} that pops up on the <b>remote</b> <b>computer.</b>|$|R
5000|$|Save-Help: Help can now {{be saved}} for modules that are {{installed}} on <b>remote</b> <b>computers.</b>|$|R
40|$|One {{has a large}} {{workload}} that is “divisible”—its constituent work’s granularity can {{be adjusted}} arbitrarily—and one has access to p <b>remote</b> <b>computers</b> that can assist in computing the workload. How can one best utilize these computers? Complicating this question {{is the fact that}} each <b>remote</b> <b>computer</b> is subject to interruptions (of known likelihood) that kill all work in progress on it. One wishes to orchestrate sharing the workload with the <b>remote</b> <b>computers</b> in a way that maximizes the expected amount of work completed. Strategies are presented for achieving this goal, by balancing the desire to checkpoint often—thereby decreasing the amount of vulnerable work at any point—vs. the desire to avoid the context-switching required to checkpoint. Schedules must also temper the desire to replicate work, because such replication diminishes the effective remote workforce. The current study demonstrates the accessibility of strategies that provably maximize the expected amount of work when there is only one <b>remote</b> <b>computer</b> (the case p = 1) and, at least in an asymptotic sense, when there are two <b>remote</b> <b>computers</b> (the case p = 2); but the study strongly suggests the intractability of exact maximization for p ≥ 2 computers, as work replication on multiple <b>remote</b> <b>computers</b> joins checkpointing as a vehicle for decreasing the impact of work-killing interruptions. We respond to that challenge by developing efficient heuristics that employ both checkpointing and work replication as mechanisms for decreasing the impact of work-killing interruptions. The quality of these heuristics, in expected amount of work completed, is assessed through exhaustive simulations that use both idealized models and actual trace data...|$|R
5000|$|File Transfer - Transfer files between <b>remote</b> <b>computers,</b> tablets or {{smartphones}} during {{remote support}} sessions ...|$|R
50|$|The 7701 could {{communicate}} with a <b>remote</b> <b>computer</b> system or with another 7701 or 7702.|$|R
5000|$|Neomedia Technologies: System {{and method}} for {{automatic}} access of a <b>remote</b> <b>computer</b> over a network ...|$|R
5000|$|SURLYSPAWN: Keystroke monitor {{technology}} {{that can be}} used on <b>remote</b> <b>computers</b> that are not internet connected.|$|R
5000|$|Simultaneous {{sessions}} allows user {{to work on}} up {{to eight}} <b>remote</b> <b>computers</b> {{at the same time}} ...|$|R
40|$|Jawa is a Java tool-kit for {{distributed}} applications development. It provides an infrastructure for automatic management of <b>remote</b> <b>computers,</b> and {{a framework for}} mobile objects applications development. The scheduling and migration of mobile objects to <b>remote</b> <b>computers</b> utilizes the parallelism and scheduling principles; in which a Jawa based application may expect performance improvements. More over, Jawa also simplifies the development cycle of its respective application...|$|R
40|$|This article proposes {{specific}} areas of computing competence and illustrates how these skills can be acquired {{as an integral part}} of the curriculum of medical genetics. Geneticists are at the forefront in the use of computers for medical care, because of the driving force of the Human Genome Project. <b>Computer</b> <b>searching</b> of international data bases is the most efficient method to keep current with the explosion in molecular genetics data and with its immediate relevance to clinical care. The use of computers in genetics education could go far beyond the use of computer-assisted instruction (CAI) to show how to use computer systems to assist with clinical decisions. The proposed basic computer skills can be obtained using genetics software. The six proposed skills include the use of (1) microcomputers, (2) productivity software, (3) CAI, patient simulations and specific application programs, (4) <b>remote</b> <b>computers,</b> (5) data bases and knowledge bases, and (6) computers to improve the clinical care of patients...|$|R
50|$|In {{addition}} to monitoring information sent over a computer network, {{there is also}} a way to examine data stored on a computer's hard drive, and to monitor the activities of a person using the computer. A surveillance program installed on a <b>computer</b> can <b>search</b> the contents of the hard drive for suspicious data, can monitor computer use, collect passwords, and/or report back activities in real-time to its operator through the Internet connection. Keylogger is an example of this type of program. Normal keylogging programs store their data on the local hard drive, but some are programmed to automatically transmit data over the network to a <b>remote</b> <b>computer</b> or Web server.|$|R
5000|$|Secure Shell Filesystem - mount {{a remote}} {{directory}} using only a ssh login on the <b>remote</b> <b>computer</b> ...|$|R
5000|$|System {{performance}} - monitors {{loads of}} central processor unit (CPU), {{random access memory}} (RAM), local or <b>remote</b> <b>computers.</b>|$|R
50|$|UltraVNC {{allows the}} use of a <b>remote</b> <b>computer</b> as if the user were in front of it. This is {{achieved}} by sending mouse movements and key-presses to the <b>remote</b> <b>computer,</b> and replicating the <b>remote</b> <b>computer's</b> display (subject to differences in resolution) locally in real time. UltraVNC bears a strong resemblance to RealVNC Free Edition. However, in addition to remote control, it adds various features, such as an encryption plugin to secure the client/server connection. It also supports file transfers, chat functionality and various authentication methods. The two computers must be able to communicate across a network, such as a local subnet, internal network, or the Internet. The software is free and distributed {{under the terms of the}} GNU General Public License.|$|R
50|$|Flingo enables {{users to}} {{instruct}} an Internet-connected TV device to acquire and playback media files located on <b>remote</b> <b>computers.</b>|$|R
5000|$|File {{transfer}} - {{lets you}} manipulate <b>remote</b> <b>computers</b> files and folders. Supports two-way file transfer with an auto-resume feature.|$|R
5000|$|View only - {{the same}} as full control mode, but only allows you to view the <b>remote</b> <b>computer</b> screen.|$|R
