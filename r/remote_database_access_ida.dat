0|3717|Public
40|$|Engineering {{applications}} {{working with}} open systems in network environments need <b>remote</b> <b>database</b> <b>access</b> as a network service. It is highly advisable {{to employ a}} <b>database</b> <b>access</b> mechanism {{which is based on}} international standards for communication interfaces. Furthermore it must take into account existing standards fordata interchange formats. Finally, remote access to distributed data in an engineering environment should be data model independent, because it deals with heterogeneous database systems. This paper explains some initial ideas and concepts for an application-oriented <b>remote</b> <b>database</b> <b>access</b> to EDIF-oriented non-standard database systems for design applications in VLSI design. The so-called Engineering <b>Remote</b> <b>Database</b> <b>Access</b> (ERDA) is being developed as a standardized mechanism for local and wide area networks. It is based on the ISO DP 9579 <b>Remote</b> <b>Database</b> Access(RDA), the ANSI RS 548 Electronic Design Interchange Format (EDIF), and the ISO 7498 Abstract Syntax Notation One (ASN- 1) ...|$|R
50|$|Furthermore, HOLMES 2 uses a two-tier {{approach}} for local <b>database</b> <b>access</b> and a 3-tier {{approach for}} <b>remote</b> <b>database</b> <b>access,</b> whereby <b>remote</b> <b>database</b> <b>access</b> is user-configurable {{from the front}} end. A freetext database allows users to ask unstructured questions and to present the results in order of relevance. Apart from that, a dual operation was adopted {{to increase the speed}} of the system. While searches themselves were tuned at the SQL (Structured Query Language) level, additional indexes on the RDBMS (relational database management system) tables were deployed.|$|R
50|$|<b>Remote</b> <b>database</b> <b>access</b> (RDA) is a {{protocol}} standard for <b>database</b> <b>access.</b> Despite early {{efforts to develop}} proof of concept implementations of RDA for major commercial RDBMSs (including Oracle, Rdb, NonStop SQL and Teradata), this standard has been largely ignored by commercial database vendors.|$|R
40|$|The report {{describes}} {{the results of}} the project ERDA: <b>Remote</b> <b>Database</b> <b>Access</b> for distributed Engineering Databases. The ERDA Network service is based on an object-oriented, system-independent data interface, called ERDA data model (EDM), which provides operations for retrieval, manipulation and transfer of remote data. Furthermore ERDA is based on the data interchange format EDIF and the future international standard RDA (Remota <b>Database</b> <b>Access,</b> ISO DP 9579) ...|$|R
50|$|Uniface Version 5 (1990):Uniface 5 enabled client/server {{deployment}} {{with the}} introduction of <b>remote</b> <b>database</b> <b>access</b> through Polyserver. It introduced graphical user interface via the Universal Presentation Interface (UPI). Database support was extended to a total of 13 databases and file systems, and it was now available on DOS, VMS, OS/2, Stratus VOS and UNIX. Japanese character support was also introduced.|$|R
40|$|In this paper, {{we design}} and {{implement}} a prototypical het-erogeneous distributed database system, named DIME (Distributed Information Management). DIME has the following salient properties. First, DIME allows both 810 -bat retrieval operations and global update operations where dzferent concurrency control schemes are used in dzfferent local database systems (LDBSs). Second, DIME imple-ments international standard protocols on the distributed transaction processing and the <b>remote</b> <b>database</b> <b>access.</b> Last, DIME pravides distribution transparency, and thus users can generate not only single site queries (including remote site queries) but also inter-site queries without con-sidering data distribution in LDBSs. ...|$|R
40|$|The BioJAKE {{program has}} been created for the visualization, {{creation}} and manipulation of metabolic pathways. It {{has been designed to}} provide a familiar and easy-to-use interface while still allowing for the input and manipulation of complex and detailed metabolic data. In recognition of the detailed and diverse sources of data available across the Internet, it also provides a mechanism by which <b>remote</b> <b>database</b> queries can be stored and performed with respect to individual molecules within a pathway. This <b>remote</b> <b>database</b> <b>access</b> functionality is offered in addition to comprehensive local database creation, management and querying capability. The {{program has been}} developed in Java so as to provide for platform independence and maximum extendibility. 1...|$|R
40|$|Many medical {{services}} {{are often not}} available to people living in remote areas {{because of the lack}} of medical specialists. This problem would be alleviated if a suitable environment was designed to allow physicians to collaborate and exchange ideas with centrally located medical specialists. This paper presents an ongoing research project to design and implement a collaborative multimedia environment to allow medical specialists to cooperate in diagnosis. The environment will support <b>remote</b> <b>database</b> <b>access</b> for medical images, the retrieval of relevant medical cases to support diagnosis and communication among participants through telepointers and image annotation by free hand drawing...|$|R
40|$|Abstract. The Data Grid {{serves as}} a data {{management}} solution widely adopted by the existent data-intensive Grid applications. However, we argue that the core Grid data management demands can be better satisfied with introduction of database. In this paper, we provide a database-oriented resource management framework, which is intended to integrate database resources with the Grid infrastructure. We start by outlining the sketch of the proposed Database Grid architecture and then focus on two base-level services: the <b>remote</b> <b>database</b> <b>access</b> and <b>database</b> discovery, which we think should be firstly settled down as a necessary foundation for other high-level database services that are more application-driven. We discuss how the design principles that apply to these base-level services can adapt to the characteristics of Grid environment {{and how they can}} be nested within the OGSA paradigm. ...|$|R
40|$|This paper {{discusses}} {{the trials and}} tribulations of three separate institutional libraries supporting one new graduate-level academic program. In January 2002, a new distance graduate program in Applied Psychology began with technical, administrative, and academic support provided by three separate institutions. While one institution was initially charged with providing the bulk of library services, in reality, libraries at all three have contributed one service or another. The lead library provides <b>remote</b> <b>database</b> <b>access</b> and document delivery, and initially provided electronic reserves. After the first semester and several glitches, electronic reserves were moved to institutional library # 2, which was also hosting the course management system. In the fall of 2002, institutional library # 3 began to contribute with an information literacy module that has been incorporated into the orientation for all new students...|$|R
40|$|This {{tutorial}} {{is devoted}} to extending an existing catalogue with data taken elsewhere, either from CDS Vizier or Simbad database. As an example, we used the so-called 'Spectroscopic Survey of Stars in the Solar Neighborhood' (aka. S 4 N, Allende Prieto et al. 2004) in order to retrieve all objects with available data for the set of fundamental stellar parameters effective temperature, surface gravity and metallicity. Then for each object in this dataset we query Simbad database to retrieve the projected rotational velocity. This combines Vizier and Simbad queries made using Python astroquery module. The tutorial covers <b>remote</b> <b>database</b> <b>access,</b> filtering tables with arbitrary criteria, creating and writing your own tables, and basics of plotting in Python. Comment: 6 pages, 2 figures + python code (tutorial corrected in 4 [remark in red]) - see also: [URL]...|$|R
40|$|Two contending {{paradigms}} {{have emerged}} in the distributed systems arena: the SQL-based <b>remote</b> <b>database</b> <b>access</b> (RDA) paradigm, and the RPC-based distributed computing paradigm. Each has unique advantages and disadvantages. Unfortunately, they are currently supported by separate and incompatible families of protocols and products, which greatly inhibits applications from realizing the joint benefits of the two paradigms. From a technical viewpoint, the fundamental problem is that RPC calls typically assume a static pre-definition of the numbers and types of parameters to a procedure call, whereas the numbers and types of the parameters to an SQL call are dynamically determined by the SQL statement itself. This paper uses the object based concepts of the ANSA architecture to show how these two paradigms may be unified in an open distributed processing framework. The unified model is equally applicable to current relational databases and SQL or to future object databases and query languages...|$|R
40|$|This paper {{describes}} an approach for enabling <b>remote</b> <b>database</b> <b>access</b> from heterogeneous thin clients. DataX is a proxy-based architecture that supports disconnected operation by replicating {{a subset of}} the database on the mobile client, using a weak consistency criterion. It adapts data replication to device characteristics, link attributes and user preferences. It employs a per-device renderer to present data in a form layout, making the application logic separate from user interface logic and independent of the device type. It offers small footprint of client-side software, rapid development of end-to-end solutions, and portability across multiple server platforms. 1. Introduction Many industries employ mobile workers who perform a significant part of their work at a customer location or away from the office. Examples of such mobile workers are insurance agents, visiting nurses and traveling salesmen. Many of the work processes in corporations have been reengineered to give workers [...] ...|$|R
50|$|Citigroup sold FAME {{to private}} investors headed by Warburg Pincus in 1994. Management focused on fixing bugs, {{developing}} <b>remote</b> <b>database</b> server <b>access</b> to FAME, and invested in expanding the FAME database engine. Emphasis was also placed on extending FAME {{by creating an}} object-oriented Java interface called TimeIQ that replicated many features of FAME 4GL in Java. This period also saw the release of accessPoint, which provides URL access to FAME objects in multiple output formats.|$|R
50|$|Bristol Standard Asynchronous/Synchronous Protocol (BSAP) is an {{industrial}} automation protocol developed by Bristol Babcock and managed by Emerson. It is a master-slave protocol suited to both synchronous high speed local networks and asynchronous low speed wide area networks. BSAP offers high message security for communication over telephone lines and radio networks by using effective error checking method (16 bit CRC-CCITT) and constantly exchanging the communication statistics. The polling scheme used by BSAP {{makes sure that}} each node in the network has an equal priority for requests and responses. BSAP also provides a mechanism of global addressing of all nodes connected for special messages like time synchronization apart from the normal individual addressing schemes. BSAP supports <b>remote</b> <b>database</b> <b>access</b> methods for reading and writing the memory in groups. It also supports multiple messaging schemes in which each node can transfer the node to other networks transparently and can transmit the responses in similar manner.|$|R
40|$|Both the <b>remote</b> <b>database</b> <b>access</b> (RDA) paradigm, {{based on}} remote query {{language}} access to data, and the {{remote procedure call}} (RPC) paradigm, based on remote calls to predefined procedures, have become increasingly important in recent years. Each has unique advantages and disadvantages. Unfortunately, they are currently supported by different protocols and different distributed computing infrastructure. There is a great need to unify these paradigms, so that a single set of infrastructure can support mixed paradigm programming and allow application developers to enjoy their combined advantages. This paper uses the object based concepts of the ANSA computational model for open distributed computing to show how these two paradigms may be aligned. The resulting model {{can be applied to}} current relational databases and SQL, and it suggests an architecturally sound approach to implementing remote SQL access in an ODP environment. It also lays a solid foundation for the remote access capabilities which will be needed by the object databases of the future...|$|R
40|$|In {{the last}} three years we have been working with {{persistence}} and distribution, in particular migration of higher-level objects (such as procedures) between autonomous persistent programs. In this paper we introduce persistence and the suitability of Napier 88 [...] - the persistent system we have used for our experiments [...] - as an agent language. We then present a few examples of opportunities and many more challenges that exist in the combination of persistence with agents. 1 Introduction The main motivation for this paper is our perception that free variables and persistence have not been properly addressed by the agent research community. Persistence is important because many of the examples presented in the agent literature include local or <b>remote</b> <b>database</b> <b>access.</b> Free variables are also of interest [...] - and unavoidable in a persistent environment [...] - because data and code are highly and strongly inter-connected in the persistent store. This paper is based on our experience with pers [...] ...|$|R
40|$|Because of the {{formidable}} obstacles to realizing the ideal distributed database, DBMS vendors {{have taken a}} step-by-step approach to databases and networking. They have focused on specific forms of network <b>database</b> <b>access,</b> data distribution, and distributed data management that are appropriate for particular application scenarios. This paper studies the remote access method {{as a component of}} the distributed databases management. Distributed <b>databases,</b> <b>Remote</b> <b>Access,</b> Oracle...|$|R
40|$|Based on the {{specific}} characteristics and requirements for an adequate electronic commerce system support, this article gives {{an overview of the}} respective distributed systems technologies which are available for open and heterogeneous electronic commerce applications. Abstracting from basic communication mechanisms such as (transactionally secure) remote procedure calls and <b>remote</b> <b>database</b> <b>access</b> mechanisms, this includes service trading and brokerage functions as well as security aspects including such as notary and non-repudiation functions. Further important elements of a system infrastructure for electronic commerce applications are: common middleware infrastructures, componentware techniques, distributed and mobile agent technologies etc. As electronic transcations enter the phase of performance, increasingly new and important functions are required. Among these are: negotiation protocols to support both the settlement and the fulfillment of electronic contracts as well as ad-hoc workflow management support for compound and distributed services in electronic commerce applications. In addition to an overview {{of the state of the}} art of the respective technology, the article briefly presents some related projects conducted by the authors jointly with international partners in order to realize some of the important new functions of a system infrastructure for open distributed electronic commerce applications...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThis thesis examines {{the recent developments}} {{in the application of}} Internet technology to the field of network management. Network management has become increasingly important and even critical for large organizations. The current solutions offered by the main network management vendors are very expensive, demand a lot of training, and have been implemented only in a centralized paradigm of management. New solutions to current network management tools problems may be found in the increasingly popular World Wide Web, Internet tools such as Java, and <b>remote</b> <b>database</b> <b>access</b> through the Internet, as well as an established user interface, which can be easily learned. The main advantage of this paradigm shift is the ability to provide any user in the organization with information about the network, as well as the ability to allow authorized users to handle a network problem from any machine or location. These new methods are examined with regards to the requirements of an ideal network management system, and the feasibility of implementing these methods, given current network configuration. A web-based network management prototype implementing a configuration management tool is described. New network management protocols are also investigated. [URL] Israeli Air Forc...|$|R
40|$|This paper {{presents}} {{the experience of}} using the Common Object Request Broker Architecture (CORBA) in the ATLAS prototype DAQ project. Many communication links in the DAQ system have been designed and implemented using the CORBA standard. A public domain package, called Inter-Language Unification (ILU) {{has been used to}} implement CORBA based communications between DAQ components in a local area network (LAN) of heterogeneous computers. The CORBA Naming Service provides the principal mechanism through which most clients of an ORE-based system locate objects that they intend to use. In our project, conventions are employed that meaningfully partition the name space of the Naming Service according to divisions in the DAQ system itself. The Inter Process Communication (IPC) package, implemented in C++ on the top of CORBA/ILU, incorporates this facility and hides the details of the naming schema is described. The development procedure and environment for <b>remote</b> <b>database</b> <b>access</b> using IPC is described. Various end-user interfaces have been implemented using the Java language that communicate with C++ servers via CORBA/ILU. To support such interfaces, a second implementation of IPC in Java has been developed. The design and implementation of such connections are described. An alternative CORBA implementation, ORBacus, has been evaluated and compared with ILU. (24 refs) ...|$|R
40|$|Periodically an {{experiment}} will reprocess data taken previously {{to take advantage}} of advances in its reconstruction code and improved understanding of the detector. Within a period of 6 months the DØ experiment has reprocessed, on the grid, a large fraction (0. 5 fb − 1) of the Run II data. This corresponds to some 1 billion events or 250 TB of data and used raw data as input, requiring <b>remote</b> <b>database</b> <b>access.</b> This is the largest HEP grid activity and has been a great success. SAM (Sequential Access to Metadata) has been in operation at DØ since the start of Run II and provides the data-grid (also enabling remote analysis). Job submission and management are provided by JIM. Together they form the middleware SAM-Grid, used for this activity. This massive task led to extensive developments in SAM-Grid, in a joint effort between the core developers and those carrying out the reprocessing at the remote sites. The resources used, corresponding to some 3500 GHz equivalent, were shared and include LCG and OSG facilities. This activity, including the development of SAM-Grid and the operational tools and procedures developed will be presented. Lessons learnt from carrying out such a task on the grid will be discussed...|$|R
40|$|There {{have been}} {{considerable}} interests in providing the state-of-the-art product design and manufacture techniques and methods accessible on the Internet from web browsers. Many {{believe that the}} development and implementation of web applications is merely a matter of programming. While programming is undoubtedly an important step, the web technology has evolved so rapidly that it becomes difficult to select the suitable features for implementing application systems. Researchers in the field of product design and manufacture would not usually have much time and efforts to investigate the web features in great detail. Instead, they have to focus on the development of the product design and manufacture methodologies. This article aims to discuss the issues that arise in the design and implementation of such web applications. The three-tier architecture for web applications is discussed. The two most popular web technologies, i. e. ActiveX and Java, are then discussed in terms of their main constructs. The methods for the deployment of web application clients and servers are highlighted. <b>Remote</b> <b>database</b> <b>access</b> and connection deserve clarification because many web applications in product design and manufacture involve product, process and resource data. It is hoped that this article will assist researchers to develop their proof-of-the-concept prototype web applications for their methodologies after considering these issues discussed in this paper. link_to_subscribed_fulltex...|$|R
40|$|This paper {{describes}} the Visible Human (VH) {{part of the}} Trans-Pacific Demonstrations of the G 7 Information Society-Global Interoperability for Broadband Network (GIBN) Projects. Aiming at a world-wide Visible Human Anatomical Co-laboratory, an application (VHP Viewer) was developed, which was used for data transmission testing (Trans-Pacific Demonstration of Visible Human) through broadband satellite links between the US and Japan. The demonstration includes (1) <b>remote</b> VH <b>database</b> <b>access</b> and (2) network multi-parallel computing access. It is shown that wide-area <b>database</b> <b>access</b> and high-speed multi-parallel computing could be effectively demonstrated via broadband satellite networks by circumventing a large time-delay by using the Mentat SkyX Gateway system and Personal File System (PFS). Elements of the demonstration verified here could be also applied to distance education and telemedicine {{as well as a}} postgenome project...|$|R
40|$|Suppose that Bob has a {{database}} � and that Alice wants {{to perform a}} search query on � (e. g., “is in �?”). Since Alice is concerned about her privacy, {{she does not want}} Bob to know the query. How could this be done? There are elegant cryptographic techniques for solving this problem under various constraints (such as “Bob should know neither nor the answer to the query ” and “Alice should learn nothing about � other than the answer to the query”), while optimizing various performance criteria (e. g., amount of communication). We consider the version of this problem where the query is of the type “is approximately in �? ” for a number of different notions of “approximate”, some of which arise in image processing and template matching, while others are of the string-edit type that arise in biological sequence comparisons. New techniques are needed in this framework of approximate searching, because each notion of “approximate equality ” introduces its own set of difficulties; using encryption is more problematic in this framework because the items that are approximately equal cease to be so after after encryption or cryptographic hashing. Practical protocols for solving such problems make possible new forms of e-commerce between proprietary database owners and customers who seek to query the database, with privacy and security. We propose four e-commerce models along with their specific <b>remote</b> <b>database</b> <b>access</b> problems and the approache...|$|R
40|$|Community bicycle {{programs}} are being implemented {{in large cities}} all over the world. These programs inspire environmentally friendly and healthy modes of transportation. Regions Bank of Shreveport, LA generously donated eight community bicycles to Centenary College of Louisiana. To facilitate use of these bicycles students have designed and constructed a prototype system for automated loan and return. The system consists of hardware including a magnetic card swipe, control circuit, lockbox with electric strike, and radio frequency identification (RFID) transmitter/receiver and key fobs. Keys with RFID fobs are stored in the lock-box {{in close proximity to}} the RFID transmitter/receiver. Software written in Python controls access to the ke ys and logs all interactions to a <b>remote</b> MySQL <b>database.</b> <b>Access</b> to keys is obtained via magnetic student ID cards. Details of the system will be described and demonstrated...|$|R
40|$|In {{this paper}} {{a system is}} {{presented}} able to acquire images from multiple indoor network cameras and extract contextual information about persons detected within the considered environment. Distributed system architecture allows one to process images from several cameras on a network of PCs. Objects tracking and posture classification techniques are used in order to extract contextual information from video. These information are stored in a <b>remote</b> <b>database</b> that is <b>accessed</b> from an higher level application that is able to interact with users' mobile phones for delivering context-based-services. In particular, proposed scene understanding techniques {{have been used for}} implementing an automatic terminal silencing service in case of a meeting and a sos-call in case of a falling person...|$|R
50|$|A similar {{complex systems}} {{approach}} {{in a completely}} different application is successfully embodied in the Eisenhower Interstate Highway System, though what is transported in NCPS is information, not cars and trucks. Network Centric Product Support, or net-centric product support, is an architectural concept, and merely connects the major avenues already existing in global communications and the internet down into the mobile product, extending maintenance and supply chain processes into an integrated product centric system with a real time feedback loop to the designers, factory and maintainers as to product performance and reliability. For example, to gain information about a particular engine on a mobile aircraft, it is most efficient to send the inquiry to the engine directly and host all information generated and relevant to that system there, as well synchronize in a twin <b>remote</b> <b>database</b> for <b>access</b> and queuing when the engine system is not in communications. Other examples where this can be applied include shipping containers, automobiles, spacecraft, appliances, human medical monitoring, or any other complex product with sensors and subsystems that require maintenance support and monitoring.|$|R
40|$|The RDA (<b>Remote</b> <b>Database</b> <b>Access)</b> {{standards}} {{support the}} interworking between an application program in one open {{system and a}} DBMS in a remote open system. The Generic RDA standard defines the common aspects of a class of RDA applications, and a Specialization standard describes a specialization for {{a particular type of}} DB in the class. The RDA model describes RDA via clienVserver relationship. The services of RDA are grouped into five categories: Dialogue Management, Transaction Management, Control, Resource Handling, Database Language. The server execution rules are defined for each service. The Basic Application Context and TP Application Contexts are used to perform the necessary set of RDA services. RDA Specialization defines any required constraints on the permissible parameter values for each service. Also, it defines additional entities and their attributes on the Dialogue State Model. For each server operation, additional constraints are defined. As the basic step of constructing prototype RDA for a subset of database languages, two RDA service user interfaces were designed and necessary functions and parameters were defined. First, to fill the gap of functionalities between the RDA client and the RDA Communications Service, one RDA Client Interface model was designed. Second, an RDA Server Interface model which contains necessary library functions and parameters to send an RDA indication and receive the response for it was designed to fill the gap of functionalities between the RDA server and the RDA Communications Service. Also, a set of Generic Object Management Library functions for the RDA server as one possible implementation model was defined and the functions for the RDA server to interface with SOL Server Interface for the RDA specialization were refined and added. The internal execution of RDA operation according to the RDA server rules were explained by using the functions of Generic Object Management Library for the RDA server. All the functions were designed by the object-oriented concept. So, this model can be modified conveniently and implemented easily to accommodate other types of database languages by the object-oriented languages because of functional modularities of library functions...|$|R
40|$|A {{growing number}} of urban GIS-based {{applications}} for the web have been developed and marketed last decade (traffic monitoring, site location and <b>remote</b> geographic <b>databases</b> <b>access,</b> ….). The development of these applications is mostly a heavy task and time consuming. To address problems related to the development and the customisation of these applications, the CASE Tool named AIGLE [3] is extended {{in order to support}} the automatic generation of two-tier and the three-tier web-based architectures. AIGLE is designed for customisation of GIS-based applications and automatic generation of programs in different languages such as MapBasic (for MapInfo) or Java. Thus, the user of AIGLE may generate easily, thanks to a user-friendly interface, a similar application for the GIS MapInfo and for the web environment in Java language. AIGLE has been marketed since July 1998 by CIRIL SA. In this paper, we will describe AIGLE and present two-tier and three-tier web-based GIS architectures. An example of generated urban application for land management will be also depicted. Finally, we conclude by highlightin...|$|R
40|$|Software Engineering 4 C 03 ProjectThe Internet is a {{collection}} of networks, in which the web servers construct autonomous systems. The data routing infrastructure corresponds to software based communication interfaces, which are executed upon physical hardware. The main software application responsible for the transmitted data is the java-based browser. The design of this application is directly responsible for the reliability of the data transmitted through the Internet. Security however is usually treated as an afterthought. Despite common sense, the security is considered {{at the bottom of a}} list that includes functionality, performance, compatibility and human interface. Good faith should not be applied when transferring private information through the Internet. The programming languages Java and JavaScript have become the power tools of choice in building web-based applications. A Web application is a dynamic extension of a web server. Its services can include <b>remote</b> <b>database</b> <b>access</b> and online purchases. Security weaknesses of web applications are often refer as holes or bugs. The exploitation of these weaknesses has severe consequences which include loss and manipulation of sensitive information. The new browsers have a considerable improvement over their predecessors when it comes to security but cannot guarantee that they are bug-free. The newest technology with a superior security system is ActiveX control by Microsoft. The downside of this technology is that it is supported only by Internet Explorer browser. Also, the ActiveX controls are written and compiled using Microsoft office visual basics programs. The Java language however needs only an editor and a free compiler. ActiveX controls use certified digital signature, but it is dangerous because it has no restrictions on the variety of its use. One disturbing example is the spy-ware software usually downloaded automatically from specific websites. Java on the other hand, achieves security by restricting the behavior of applets to a set of safe actions supervises 1. The information transmitted in the Internet and mostly web browsers may contain very sensitive. It is understandable that third parties will always be interested in acquiring this information. Unauthorized use and access of sensitive data can have unprecedented consequences. The most common threats to we...|$|R
50|$|XUDA is an Application {{programming}} interface (API) {{that enables}} programmers to develop PKI applications. XUDA is best {{seen as a}} toolkit or library of programs that isolates applications from the complexities of PKI. It encapsulates secure <b>database</b> <b>access</b> and strong authentication via public key certificates, and employs SSL - LDAP to query <b>remote</b> <b>databases</b> using certificates presented during an SSL transaction. XUDA was built to use the cryptography of other vendors. This allows to provide customers with the cryptography of their choice, including all PKCS#11 compliant smart cards and hardware tokens.|$|R
40|$|JDBC {{is one of}} the {{standard}} packages available with Java. It provides classes and interfaces that allow application program/database interaction {{with a high degree of}} database vendor independence. The features of JDBC enable an application program to connect to <b>remote</b> <b>databases,</b> execute SQL queries or stored procedures on the <b>remote</b> <b>database,</b> and process the results of queries a row at a time. The SQL statements are represented as strings in the Java program. A string representing a SQL expression can be hardcoded into the program or built during execution based on user input. JDBC also includes features that allow the program to query the database to determine metadata such as the names and structure of tables in the <b>database.</b> <b>Access</b> to metadata objects allows very flexible application programs to be created. This paper gives an overview of the features of JDBC and discusses its use in an introductory database course...|$|R
40|$|This paper details {{efforts to}} {{development}} {{a set of}} prototype, web-based geovisualisation tools. The focus is on design and implementation of lightweight tools that can run in standard web browsers and access data, stored in a <b>remote</b> <b>database.</b> The web geo-visualisation tools incorporate several standard exploratory spatial data analysis methods, including linked brushing and interactive animation. These tools are constructed using Macromedia Flash, a commercial software application that produces content for the web using a publicly available file specification called SWF. The {{advantages and disadvantages of}} Flash for geovisualisation are discussed. One advantage is that it supports links to <b>remote</b> <b>databases.</b> Accordingly, the use of XML as the communication syntax for the geovisualisation tool-to-database link is discussed. Two solutions to dynamic <b>database</b> <b>access</b> have been implemented, one using a stand-alone Java server and the other using Java servlet technology; {{the advantages and disadvantages of}} each approach are discussed...|$|R
40|$|The Health Science Library at University of Tennessee (UT), Memphis {{has taken}} {{advantage}} of a campuswide network {{for the purpose of}} providing enhanced access to library services. With a terminal or microcomputer, members of the UT Memphis community can use an electronic menu system to complete photocopy, interlibrary loan, and computer literature search request forms; leave messages or sign up for library workshops; use electronic mail to receive citations and abstracts from computer literature searches; use an electronic bulletin board to scan the library's new acquisitions lists, library hours, services, and policies; and use bibliographic retrieval software to search the library's locally mounted <b>databases.</b> <b>Remote</b> <b>access</b> to library services and electronic resources, which is available twenty-four hours a day, could potentially save users time and the institution money. Remote access, however, is intended to supplement, not to supplant or discourage, in-house library use...|$|R
40|$|A {{description}} {{of an open}} system, distributed computing environment for the Biological Sciences is presented. This system utilizes a transparent interface in a computer network using NCS to implement an application system for molecular biologists to perform various processing activities from their local workstation. This system accepts requests for {{the services of a}} <b>remote</b> <b>database</b> server, located across the network, to perform all of the database searches needed to support the activities of the user. This <b>database</b> <b>access</b> is totally transparent to the user of the system and it appears, to the user, that all activities are being carried out on the local workstation. This system is a prototype for a much more extensive system being built to support the research efforts in the Biological Sciences at UMC...|$|R
