0|2820|Public
40|$|Abstract. This paper {{presents}} {{artificial intelligence}} methods and {{their influence on}} development of intelligent integrated system for gear power transmitters design. System is based on knowledge. The development of expert and fuzzy expert systems {{has been made in}} CLIPS and FUZZY CLIPS program environment. This system supports all the <b>rules</b> of Object <b>Oriented</b> <b>Programming,</b> and enables integration of algorithmic (procedures and methods) as well as non-algorithmic programming techniques (production rules) ...|$|R
40|$|Abstract. Model {{checking}} {{provides an}} automated method for verifying concurrent systems. Correctness specifications {{are given in}} temporal logic. The method hinges on an efficient and flexible graph-theoretic reachability algorithm. At {{the time of its}} introduction in the early 1980 ’s, the prevailing paradigm for verification was a manual one of prooftheoretic reasoning using formal axioms and inference <b>rules</b> <b>oriented</b> towards sequential <b>programs.</b> The need to encompass concurrent programs, the desire to avoid the difficulties with manual deductive proofs, and the small model theorem for temporal logic motivated the development of model checking...|$|R
40|$|Abstract: Aspect <b>Oriented</b> <b>Programming</b> is {{changing}} the way software is developed in various domains of computing and software Engineering. In this project we discuss the main characteristics of Aspect <b>oriented</b> <b>program</b> (AOP) with a particular focus on distributed systems. Our experiments {{support the hypothesis that}} the use of Aspect <b>oriented</b> <b>program</b> will result in a better separation of concerns and thus in better maintainability and portability of such systems (in comparison with a classical object <b>oriented</b> <b>program</b> development approach). Classical object <b>oriented</b> <b>program</b> is not allowing the separation of concerns but here in aspect <b>oriented</b> <b>program</b> is allowing the separation of cross cutting concerns. Aspect <b>oriented</b> <b>programming</b> (AOP) is a programming paradigm that increases modularity by allowing the separation of cross-cutting concerns. Separation of concerns leads to breaking down a paradigm into distinct parts called concerns. We focus mainly, in this project, is designing the Aspect <b>oriented</b> <b>program</b> with a particular focus on distributed application. The use of Aspect <b>oriented</b> <b>program</b> will result in a better separation of concerns and thus in better maintainability and portability of distributed applications...|$|R
40|$|The {{protection}} {{landscape is}} changing and exploits {{are getting more}} and more sophisticated. Exploit generation toolkits can be used to construct exploits for specific applications using well-defined algorithms. We present such an algorithm for leveraging format strings and introduce string <b>oriented</b> <b>programming.</b> String <b>oriented</b> <b>programming</b> takes format string exploits to the next level and turns an intrusion vector that needs hand-crafted exploits into arbitrary code execution. Similar to return <b>oriented</b> <b>programming</b> or jump <b>oriented</b> <b>programming</b> sting <b>oriented</b> <b>programming</b> does not rely on existing code but concatenates gadgets in the application using static program analysis. This paper presents an algorithm and a technique that takes a vulnerable application that contains a format string exploit as a parameter and constructs a format string exploit {{that can be used to}} inject a dynamic jump <b>oriented</b> <b>programming</b> dispatcher into the running application. String <b>oriented</b> <b>programming</b> circumvents ASLR, DEP, and ProPolice. 1...|$|R
40|$|An aspect <b>oriented</b> <b>programming</b> {{is gaining}} {{a lot of}} {{popularity}} these days, {{there is a growing}} interest because of crosscutting concerns in object oriented systems. When the aspect oriented features are added into object oriented features the new program needs to be regression tested, and, to reduce the cost, Selection technique is used which eliminates the redundant test cases and thus makes them cost effective. Unfortunately the already existing approaches of object <b>oriented</b> <b>programming</b> does not work out for aspect <b>oriented</b> <b>programming</b> because of the following new features of aspects such as join points,crosscutting concerns,aspect weaving, etc. Therefore, this paper proposes the techniques used for object <b>oriented</b> <b>programs</b> and for aspect <b>oriented</b> <b>programming...</b>|$|R
5000|$|Conference on Object <b>Oriented</b> <b>Programming</b> Systems Languages and Applications archive Proceedings of the 20th annual ACM SIGPLAN {{conference on}} Object <b>oriented</b> <b>programming,</b> systems, languages, and {{applications}} http://portal.acm.org/citation.cfm?id=1094811.1094841&coll=GUIDE&dl=GUIDE&CFID=10871926&CFTOKEN=54412436 ...|$|R
40|$|Recently, several {{descriptions}} of object <b>oriented</b> <b>programming</b> languages with denotational semantics have been given. Cook presented a denotational semantics of class inheritance. This semantics abstracts from the internal state of objects, {{which is one}} of their salient characteristics. In this paper we show that Cooks denotational semantics of class inheritance is applicable to object <b>oriented</b> <b>programming</b> languages, where objects have a state. For this purpose we define a direct denotational semantics of a small object <b>oriented</b> <b>programming</b> language. We claim that the resulting denotational semantics is clear and can serve the derivation of efficient implementations of object <b>oriented</b> <b>programming</b> languages...|$|R
40|$|Abstract—Aspect <b>oriented</b> <b>{{programming}}</b> {{is a new}} programming paradigm. AOP {{is based}} on object <b>oriented</b> <b>programming.</b> Most of the researchers target this new paradigm towards the programming not for testing. Testing of aspect <b>oriented</b> <b>programs</b> is an emerging field of research as a very few research work is going on currently on ASP. In this paper, we investigate {{a new way of}} testing aspect <b>oriented</b> <b>programs.</b> Here we propose a framework of automated test data generation for evolutionary testing on AOP. On the basis of generated data we will compare evolutionary testing with random testing in terms of effort reduction and improvement of test effectiveness. We will justify our comparison with the help of empirical study on AspectJ <b>programs.</b> Index Terms—Aspect <b>oriented</b> <b>programming,</b> testing AOP, debugging, and Search based optimization techniques...|$|R
40|$|This article {{discusses}} several paradigms used {{in developing}} computer programs which is varied from the classical – goto programming, until the modern one – object <b>oriented</b> <b>programming.</b> In addition, {{the main features}} of each paradigm, {{the advantages and disadvantages}} of each paradigm and the comparation of procedural <b>programming,</b> the object <b>oriented</b> <b>programming,</b> and an additional feature like generic programming for the object <b>oriented</b> <b>programming</b> are also discussed in this article.  </p...|$|R
40|$|A {{need for}} pre-object <b>oriented</b> <b>programming</b> {{instructional}} environments is proposed and several existing possibilities are evaluated and found wanting. The design, implementation {{and operation of}} three Pre-Object <b>Oriented</b> <b>Programming</b> Learning Environments (POOPLEs) is presented; together with the outcomes of initial evaluations...|$|R
40|$|Title: Education of Object <b>Oriented</b> <b>Programming</b> Author: Marie Píchová Department: Department of Distributed and Reliable Systems Supervisor: Mgr. Pavel Ježek Supervisor's e-mail address: pavel. jezek@ dsrg. mff. cuni. cz Abstract: The goal of {{this thesis}} {{is to create a}} {{programming}} language, compiler for the language and development environment for education of object <b>oriented</b> <b>programming.</b> The thesis describes created programs from both user's and programmer's points of view. The text includes introduction into the object <b>oriented</b> <b>programming,</b> comparison of created programming language with another existing object oriented and educational languages, {{a brief description of the}} main functions of the program and also description of design and implementation of the program. Keywords: Education, object <b>oriented</b> <b>programming,</b> compiler, development environmen...|$|R
5000|$|... #Subtitle level 2: Abstraction in object <b>oriented</b> <b>programming</b> ...|$|R
5000|$|CSLA [...]NET is a {{software}} framework created by Rockford Lhotka {{that provides a}} standard way to create robust object <b>oriented</b> <b>programs</b> using business objects. Business objects are objects that abstract business entities in an object <b>oriented</b> <b>program.</b> Some examples of business entities include sales orders, employees, or invoices.|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThis thesis addresses object <b>oriented</b> <b>programming</b> languages; and a restrictive definition of object <b>oriented</b> <b>programming</b> languages is presented and defended. Differences between programming languages are discussed {{and related to}} interactive integrated programming environments. Topics related to user friendly interface to the computer system and modem programming practice are discussed. The thesis especially addresses features in object <b>oriented</b> <b>programming</b> languages that are important when a user friendly interactive integrated programming environment is designed. Some future research areas are suggested. [URL] Commander, Norwegian Nav...|$|R
5000|$|... #Article: Community <b>Oriented</b> <b>Program</b> for Control Of Rheumatic Diseases ...|$|R
5000|$|Object <b>Oriented</b> <b>Programming,</b> a {{style of}} modern {{computer}} programming ...|$|R
40|$|Typestate <b>Oriented</b> <b>programming</b> is a {{extension}} of the object ori-ented paradigm, where objects are modeled in terms of changing states. This paper propose the use of coloured petri nets as tech-nique of design typestates for Typestate <b>Oriented</b> <b>Programming.</b> Categories and Subject Descriptors D. 3. 2 [Programming lan-guages]: Language Classifications—Object-oriented languages...|$|R
40|$|In {{this paper}} we explore {{the use of a}} formal {{ontology}} as a constraining framework for the belief store of a rational agent. The static beliefs of the agent are the axioms of the ontology. The dynamic beliefs are the descriptions of the individuals that are instances of the ontology classes. The individuals all have a unique identifier, an associated set of named classes to which they are believed to belong, and a set of property values. The ontology axioms act as a schema for the dynamic beliefs. Belief updates not conforming to the axioms lead to either rejection of the update or some other revision of the dynamic belief store to maintain consistency. Partial descriptions are augmented by inferences of property values and class memberships licensed by the axioms. For concreteness we sketch how such an ontology based agent belief store could be implemented in a multi-threaded logic programming language with action <b>rules</b> and object <b>oriented</b> <b>programming</b> features called Go!. This language was specifically designed for implementing communicating rational agent applications. We shall see that its logic rules allow us to extend an ontology of classes and properties with rule defined n-ary relations and functions. Its action rules enable us to implement a consistency maintenance system that takes into account justifications for beliefs. The pragmatics of consistency maintenance is an issue not normally considered by the ontology community. The paper assumes some familiarity with ontology specification using languages such as OWL DL and its subsets, and with logic programming. ...|$|R
40|$|Computer {{programming}} paradigms aim {{to provide}} better separation of concerns. Aspect <b>oriented</b> <b>programming</b> extends object <b>oriented</b> <b>programming</b> by managing crosscutting concerns using aspects. AspectJ {{is the most}} successful aspect oriented implementation. It extends the Java programming language with constructs specific to aspect <b>oriented</b> <b>programming.</b> Two {{of the most important}} critics of aspect <b>oriented</b> <b>programming</b> and AspectJ are the “tyranny of the dominant signature ” and lack of visibility of program's flow. Metadata, in form of Java annotations, is a solution to both problems. Design patterns are the embodiments of best practices in object oriented design. Aspect <b>oriented</b> <b>programming</b> can be used to implement the most known patterns, the “Gof ” patterns, in order to analyze the benefits. This thesis presents the results of using aspect <b>oriented</b> <b>programming</b> and metadata to implement the “Gof ” patterns. The most successful implementations are the ones in which the pattern-related code crosscuts across the concerns encapsulated in the participants in the pattern. Successful implementations share a generic solution: the usage of annotation to configure and mark the participants, while the pattern's code is encapsulated in aspects. This looses the coupling between aspects and type signatures and between the code base and a specific AOP framework. Also, it increases the developer's awareness of the program's flow. The patterns are plugged/unplugged based on the presence/absence of annotations...|$|R
40|$|Almost {{no object}} <b>oriented</b> <b>programming</b> {{languages}} offer distinct language constructs for {{the definition of}} types and their implementations; instead these are united into a single class concept. Similarly object <b>oriented</b> <b>programming</b> languages do not normally distinguish between object types, which may be independently instantiated, and attribute types, which may not. The pape...|$|R
40|$|In {{this paper}} {{we argue that}} aspect <b>oriented</b> <b>programming</b> is an {{important}} technique {{that can be used}} to facilitate the implementation of the new requirements that arises when moving from internal to external services. The suggested solution is illustrated by an example where quality of service metrics is implemented by using aspect <b>oriented</b> <b>programming...</b>|$|R
40|$|This paper {{presents}} how Multistrategy Error Detection and Discovery (MEDD), {{a student}} modeling system using machine learning {{can be applied}} to the domain of Object <b>Oriented</b> <b>Programming.</b> Java is the language used in learning object <b>oriented</b> <b>programming.</b> MEDD detects the learner’s errors and discovers the misconceptions based on the presence (or absence) of errors...|$|R
40|$|The {{first part}} of this thesis {{contains}} brief description of the IEC 61131 - 3 standard and proposed extension of object <b>oriented</b> <b>programming</b> to it. There is a review of possibility using event driven programming concept in the next part. The last part shows some practical examples taking use of object <b>oriented</b> <b>programming</b> elements...|$|R
50|$|Awareness {{and action}} <b>oriented</b> <b>Programs.</b> Participation is {{compulsory}} {{for all the}} students.|$|R
5000|$|Data Structures Lab Algorithms Lab Object <b>Oriented</b> <b>Programming</b> Lab System Software Lab ...|$|R
5000|$|Nominated, Best Youth <b>Oriented</b> <b>Program</b> — 2008-2009 PMPC Star Awards for TV ...|$|R
40|$|Ethnic {{identities are}} {{becoming}} more salient {{in the field of}} international relations. Thus, it is important {{to take into account the}} effectiveness of ethnic identities in foreign policy analysis. This article claims that Nicholas Onuf’s <b>rule</b> <b>oriented</b> constructivism, one of the constructivist approaches, offers a useful framework for analyzing the impact of ethnic identities on foreign policy. It argues that <b>rule</b> <b>oriented</b> constructivism demonstrates better, compared with mainstream constructivism, the ways ethnic identities affect foreign policy through its epistemological and ontological approach. </em...|$|R
40|$|A layered object <b>oriented</b> <b>programming</b> {{language}} (OOPL) {{is defined}} using a simple functional notation {{which has been}} equipped {{with a collection of}} features common to many OOPLs. The resulting language provides a framework within which existing OOPLs can be analysed and new OOPLs can be constructed. 2 Introduction The object <b>oriented</b> <b>programming</b> paradigm has been seen as significant advance in software engineering quality. Its proponents cite features such as modularity, interfaces, polymorphism, inheritance and reuse as being characteristic of this new method for constructing software. It is, however, notoriously difficult to define exactly what is meant by the term "object <b>oriented</b> <b>programming</b> language"(OOPL); different practitioners will propose different characterising features. This fact and the lack of any formal description for the current object <b>oriented</b> <b>programming</b> languages, has meant {{that it is difficult to}} say exactly what, if any, the advances for software engineering are. [...] ...|$|R
40|$|Aliasing is endemic in object <b>oriented</b> <b>programming.</b> Because {{an object}} can be {{modified}} via any alias, object <b>oriented</b> <b>programs</b> are hard to understand, maintain, and analyse. Flexible alias protection is a conceptual model of inter-object relationships which limits the visibility of changes via aliases, allowing objects to be aliased but mitigating the undesirable e#ects of aliasing. Flexible alias protection can be checked statically using programmer supplied aliasing modes and imposes no runtime overhead. Using flexible alias protection, programs can incorporate mutable objects, immutable values, and updatable collections of shared objects, in a natural object <b>oriented</b> <b>programming</b> style, while avoiding the problems caused by aliasing. 1 Introduction I am who I am; I will be who I will be. Object identity {{is the foundation of}} object <b>oriented</b> <b>programming.</b> Objects are useful for modelling application domain abstractions precisely because an object 's identity always remains the same d [...] ...|$|R
40|$|Teaching object <b>oriented</b> <b>programming</b> {{has become}} a rapidly {{expanding}} preference at various educational environments. However, teachers usually experience problems when introducing object <b>oriented</b> concepts and <b>programming</b> to beginners. How to teach the fundamentals of object <b>oriented</b> <b>programming</b> at an introductory level course is still a common subject for debate. In this paper, an evaluation of these problems is presented and some possible approaches for improving the quality and success of such courses are discussed...|$|R
50|$|A 36-month {{clinically}} <b>oriented</b> <b>program</b> {{leading to}} a Certificate of Proficiency in Periodontology.|$|R
50|$|Proper object <b>oriented</b> <b>programming</b> {{involves}} design {{principles that}} avoid action at a distance.|$|R
5000|$|AOP (Aspect <b>Oriented</b> <b>Programming)</b> for application's event {{interception}} without {{modifying the}} source code.|$|R
5000|$|Experiential Learning: Online {{and field}} <b>oriented</b> <b>programs</b> for {{conventional}} students and mid-career professionals ...|$|R
5000|$|Nominated, Best Youth <b>Oriented</b> <b>Program</b> - 21st PMPC Star Awards for TV 2007 ...|$|R
5000|$|Winner, Best Youth <b>Oriented</b> <b>Program</b> - 22nd PMPC Star Awards for TV 2008 ...|$|R
