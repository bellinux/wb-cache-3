16|2|Public
25|$|Two's {{complement}} is {{a mathematical}} operation on binary numbers, {{as well as}} a binary signed number representation based on this operation. Its wide use in computing makes it the most important example of a <b>radix</b> <b>complement.</b>|$|E
50|$|In the decimal {{numbering}} system, the <b>radix</b> <b>complement</b> {{is called}} the ten's complement and the diminished <b>radix</b> <b>complement</b> the nines' complement. In binary, the <b>radix</b> <b>complement</b> {{is called the}} two's complement and the diminished <b>radix</b> <b>complement</b> the ones' complement. The naming of complements in other bases is similar. Some people, notably Donald Knuth, recommend using {{the placement of the}} apostrophe to distinguish between the <b>radix</b> <b>complement</b> and the diminished <b>radix</b> <b>complement.</b> In this usage, the four's complement refers to the <b>radix</b> <b>complement</b> of a number in base four while fours' complement is the diminished <b>radix</b> <b>complement</b> of a number in base 5. However, the distinction is not important when the radix is apparent (nearly always), and the subtle difference in apostrophe placement is not common practice. Most writers use one's and nine's complement, and many style manuals leave out the apostrophe, recommending ones and nines complement.|$|E
5000|$|The <b>radix</b> <b>complement</b> of an n {{digit number}} y in radix b is, by definition, [...] The <b>radix</b> <b>complement</b> is most easily {{obtained}} by adding 1 to the diminished <b>radix</b> <b>complement,</b> which is [...] Since [...] is the digit [...] repeated n times (because see also binomial numbers). The diminished <b>radix</b> <b>complement</b> {{of a number}} is found by complementing each digit with respect to [...] (that is, subtracting each digit in y from [...] ).|$|E
40|$|Computers use Complementary Subtraction {{because it}} is faster and simpler than the {{addition}} of signed numbers (numbers with a "+ " or "- " sign). This handout details radix and reduced radix subtraction problems which simulate the way computers perform subtraction operations. Note: Radix and reduced radix subtraction utilizes radix and reduced <b>radix</b> <b>complements.</b> Therefore, {{it is assumed that}} the reader understands the concepts of complements and can perform radix and reduced radix complementation. If not, it is helpful to review the SLAC handout entitled Radix and Reduced <b>Radix</b> <b>Complements</b> or the appropriate sections in the text before continuing...|$|R
40|$|AbstractLet X be a {{rearrangement}} invariant function {{space on}} [0, 1]. We consider the subspace RadiX of X {{which consists of}} all functions of the form f=∑k= 1 ∞xkrk, where xk are arbitrary independent functions from X and rk are usual Rademacher functions independent of {xk}. We prove that <b>RadiX</b> is <b>complemented</b> in X {{if and only if}} both X and its Köthe dual space X′ possess the so-called Kruglov property. As a consequence we show that the last conditions guarantee that X is isomorphic to some rearrangement invariant function space on [0,∞). This strengthens earlier results derived in different approach in [W. B. Johnson, B. Maurey, G. Schechtman, L. Tzafriri, Symmetric structures in Banach spaces, Mem. Amer. Math. Soc. 1 (217) (1979) ]...|$|R
5000|$|The {{subtraction}} of y from x may {{be performed}} as follows. Adding the diminished <b>radix</b> <b>complement</b> of x to y {{results in the}} value [...] or [...] which is the diminished <b>radix</b> <b>complement</b> of , except for possible padding digits [...] The diminished <b>radix</b> <b>complement</b> {{of this is the}} value [...] Alternatively, adding the <b>radix</b> <b>complement</b> of y to x results in the value [...] or [...] Assuming y ≤ x , the result will always be greater or equal to [...] and dropping the initial '1' is the same as subtracting , making the result [...] or just , the desired result.|$|E
5000|$|The {{following}} is Cole's {{definition of a}} reduced <b>radix</b> <b>complement.</b> Supposed = dn dn−1 ... d2 d1is a murray integer. Then the murray integere = en en−1 ... e2 e1,where ei = ri−1−di for i = 1, 2, ..., n is the reduced <b>radix</b> <b>complement</b> of d.|$|E
5000|$|Complement {{the result}} {{if there is}} no carry out of the most {{significant}} digit (an indication that x was less than y). This is easier to implement with digital circuits than comparing and swapping the operands. But since taking the <b>radix</b> <b>complement</b> requires adding 1, it is difficult to do directly. Fortunately, a trick can be used to get around this addition: Instead of always setting a carry into the least significant digit when subtracting, the carry out of the most significant digit is used as the carry input into the least significant digit (an operation called an end-around carry). So if y ≤ x, the carry from the most significant digit that would normally be ignored is added, producing the correct result. And if not, the 1 is not added and the result is one less than the <b>radix</b> <b>complement</b> of the answer, or the diminished <b>radix</b> <b>complement,</b> which does not require an addition to obtain. This method is used by computers that use sign-and-magnitude to represent signed numbers.....|$|E
50|$|Two's {{complement}} is {{a mathematical}} operation on binary numbers, {{as well as}} a binary signed number representation based on this operation. Its wide use in computing makes it the most important example of a <b>radix</b> <b>complement.</b>|$|E
5000|$|Represent {{negative}} {{numbers as}} radix complements of their positive counterparts. Numbers less than [...] are considered positive; {{the rest are}} considered negative (and their magnitude {{can be obtained by}} taking the <b>radix</b> <b>complement).</b> This works best for even radices since the sign can be determined by looking at the first digit. For example, numbers in ten's complement notation are positive if the first digit is 0, 1, 2, 3, or 4, and negative if 5, 6, 7, 8, or 9. And it works very well in binary since the first bit can be considered a sign bit: the number is positive if the sign bit is 0 and negative if it is 1. Indeed, two's complement is used in most modern computers to represent signed numbers.|$|E
40|$|Abstract. A novel {{system for}} {{representing}} the rational numbers based on Hensel's p-adic arithmetic is proposed. The new scheme uses a compact variable-length encoding {{that may be}} viewed as a generalization of <b>radix</b> <b>complement</b> notation. It allows exact arithmetic, and approximate arithmetic under programmer control. It is superior to existing coding methods because the arithmetic operations take particularly simple, consistent forms. These attributes make the new number representation attractive for use in computer hardware. Key words. number systems, number representation, rational arithmetic, p-adic numbers, <b>radix</b> <b>complement,</b> floating-poin...|$|E
40|$|International audienceDuring any {{composite}} computation {{there is}} a constant need for rounding intermediate results before they can participate in further processing. Recently a class of number representations denoted RN-Codings were introduced, allowing an un-biased rounding- to-nearest to take place by a simple truncation, with the property that problems with double-roundings are avoided. In this paper we first investigate a particular encoding of the binary representation. This encoding is generalized to any radix and digit set; however <b>radix</b> <b>complement</b> representations for even values of the radix turn out to be particularly feasible. The encoding is essentially an ordinary <b>radix</b> <b>complement</b> representation with an appended round-bit, but still allowing rounding to nearest by truncation and thus avoiding problems with double-roundings. Conversions from <b>radix</b> <b>complement</b> to these round-to-nearest representations can be performed in constant time, whereas conversion the other way in general takes at least logarithmic time. Not only is rounding-to-nearest a constant time operation, but so is also sign inversion, both of which are at best log-time operations on ordinary 2 's complement representations. Addition and multiplication on such fixed-point representations are first analyzed and defined {{in such a way that}} rounding information can be carried along in a meaningful way, at minimal cost. The analysis is carried through for a compact (canonical) encoding using 2 's complement representation, supplied with a round-bit. Based on the fixed-point encoding it is shown possible to define floating point representations, and a sketch of the implementation of an FPU is presented...|$|E
40|$|A novel {{system for}} {{representing}} the rational numbers based on Hensel`s p-adic arithmetic is proposed. The new scheme uses a compact variable-length encoding {{that may be}} viewed as a generalization of <b>radix</b> <b>complement</b> notation. It allows exact arithmetic, and approximate arithmetic under programmer control. It is superior to existing coding methods because the arithmetic operations take particularly simple, consistent forms. These attributes make the new number representation attractive for use in computer hardware. Key words. number systems, number representation, rational arithmetic, p-adic numbers, <b>radix</b> <b>complement,</b> floating-point 1. Introduction. It's very illuminating to {{think about the fact that}} some [...] -at most four hundred [...] - years ago, professors at European universities would tell the brilliant students that if they were very diligent, it was not impossible to learn how to do long division. You see, the poor guys had to do it in Roman numerals. Now, here you see in a nutsh [...] ...|$|E
40|$|Pre-print, 24 pages, {{submitted}} to IEEE Transactions on Computers. During any composite computation {{there is a}} constant need for rounding intermediate results before they can participate in further processing. Recently a class of number representations denoted RN-Codings were introduced, allowing an un-biased rounding-to-nearest to take place by a simple truncation, with the property that problems with double-roundings are avoided. In this paper we first investigate a particular encoding of the binary representation. This encoding is generalized to any radix and digit set; however <b>radix</b> <b>complement</b> representations for even values of the radix turn out to be particularly feasible. The encoding is essentially an ordinary <b>radix</b> <b>complement</b> representation with an appended round-bit, but still allowing rounding to nearest by truncation and thus avoiding problems with double-roundings. Conversions from <b>radix</b> <b>complement</b> to these round-to-nearest representations can be performed in constant time, whereas conversion the other way in general takes at least logarithmic time. Not only is rounding-to-nearest a constant time operation, but so is also sign inversion, both of which are at best log-time operations on ordinary 2 's complement representations. Addition and multiplication on such fixed-point representations are first analyzed and defined {{in such a way that}} rounding information can be carried along in a meaningful way, at minimal cost. The analysis is carried through for a compact (canonical) encoding using 2 's complement representation, supplied with a round-bit. Based on the fixed-point encoding it is shown possible to define floating point representations, and a sketch of the implementation of an FPU is presented...|$|E
40|$|In this paper, a {{new family}} of formats to deal with real number for {{applications}} requiring round to nearest is proposed. They are based on shifting the set of exactly represented numbers which are used in conventional radix-R number systems. This technique allows performing <b>radix</b> <b>complement</b> and round to nearest without carry propagation with negligible time and hardware cost. Furthermore, the proposed formats have the same storage cost and precision as standard ones. Since conversion to conventional formats simply require appending one extra-digit to the operands, standard circuits {{may be used to}} perform arithmetic operations with operands under the new format. We also extend the features of the RN-representation system and carry out a thorough comparison between both representation systems. We conclude that the proposed representation system is generally more adequate to implement systems for computation with real number under round-to-nearest. An edited version of this work was accepted in IEEE Transactions on computers, DOI 10. 1109 /TC. 2015. 2479623 Ministry of Education and Science of Spain under contracts TIN 2013 - 42253 -P...|$|E
40|$|Abstract. Product (AN) codes {{constructed}} in weighted number systems are investigated {{with the aim}} of devising error control features suitable for application in arithmetic units. The previous theoretical framework, which was derived in the hypothesis of codes defined in a virtual range M = k A, is restated for any physical interval M = bn, where b is the radix of the system and n is the number of digits. Some general properties holding for radix-b-AN codes are reconsidered and necessary and sufficient conditions for single and double error detection are derived for binary codes and for a sample non binary case. Single error correction is discussed as well and a fast error decoding procedure is suggested and implemented. Finally, modular AN codes are introduced in order to enable the use of product codes in standard ALU's representing relative integers by means of a <b>radix</b> <b>complement</b> notation. It is shown that the above properties keep their validity and that concurrent single error correction can be associated with arithmetic computation without increasing the time spent for processing. Index Terms. Arithmetic codes, arithmetic units, error detection and correction, modula...|$|E

