6|5|Public
5000|$|... (User and System) Compressed: <b>Read-only</b> <b>attribute</b> for files {{compressed}} using HFS+ Compression ...|$|E
5000|$|The <b>read-only</b> <b>attribute</b> {{of files}} and folders is {{automatically}} removed when copying files from optical media using Windows Explorer.|$|E
5000|$|The initial {{version of}} the ATTRIB command was first {{included}} in version 3.0 of PC-DOS, with functionality limited to changing the <b>read-only</b> <b>attribute.</b> Subsequent versions allowed the read-only, hidden, system and archive bits to be set. [...] MS-DOS version 3.3 added the capability of recursive searching through subdirectories to display attributes of specified files.|$|E
5000|$|Read-only: When set, {{indicates}} that a file should not be altered. Upon opening the file, file system API usually does not grant write permission to the requesting application, unless the application explicitly requests it. <b>Read-only</b> <b>attributes</b> on folders are usually ignored, being used for another purpose.|$|R
50|$|Both vi and emacs have modes, {{which are}} {{settings}} which affect {{the behavior of}} the program. vile extends the vi modes such as list, number, etc., by providing three levels of mode: global, buffer and window. The buffer modes are associated with the buffer contents, e.g., line-terminators, <b>read-only</b> <b>attributes.</b> All of those modes are predefined. vile can be customized by defining majormodes, which combine specific settings of the buffer modes with an association to the file type. These majormodes have as well special modes such as the association with a specific syntax filter.|$|R
40|$|It is well {{established}} that bitmap indices are effcient for <b>read-only</b> <b>attributes</b> with low attribute cardinalities. For an attribute with a high cardinality, {{the size of the}} bitmap index can be very large. To overcome this size problem, specialized compression schemes are used. Even though there are empirical evidences that some of these compression schemes work well, there has not been any systematic analysis of their effectiveness. In this paper, we systematically analyze the two most effcient bitmap compression techniques, the Byte-aligned Bitmap Code (BBC) and the Word-Aligned Hybrid (WAH) code. Our analyses show that both compression schemes can be optimal. We propose a novel strategy to select the appropriate algorithms so that this optimality is achieved in practice. In addition, our analyses and tests show that the compressed indices are relatively small compared with commonly used indices such as B-trees...|$|R
50|$|Another part of {{the copy}} {{protection}} involves {{an attempt by the}} program to modify the program disk itself on startup and render it unusable. On authentic game disks, this operation fails since the disks are write-protected. When playing the game using an emulator, it is advisable to set the <b>read-only</b> <b>attribute</b> for each disk image to avoid this modification.|$|E
50|$|Microsoft and IBM DOS {{variants}} (including MS-DOS, PC DOS, Windows 95, Windows 98, Windows 98 SE, and Windows ME) do {{not have}} permissions, only file attributes. There is a <b>read-only</b> <b>attribute</b> (R), which can be set or unset on a file by any user or program, and therefore does not prevent him/her/it from changing/deleting the file. There is no permission in these systems which would prevent a user from reading a file.|$|E
5000|$|Setting the {{read-only}} {{bit of a}} file provided only partial {{protection against}} inadvertent deletion: while commands such as del and erase would respect the attribute, other commands such as DELTREE did not. [...] Changing the system attribute was not possible in early versions of Windows, thus requiring use of ATTRIB. [...] Similarly, a system crash in early versions of Windows {{could lead to a}} situation where a temporary file had the read-only bit set and was additionally (and irrevocably) locked by the Windows OS; in this instance, booting into DOS (thus avoiding the Windows lock) and unsetting the <b>read-only</b> <b>attribute</b> with ATTRIB was the recommended way of deleting the file. [...] Manipulating the archive bit allowed users to control which files were backed up using the BACKUP command.|$|E
40|$|It is well {{established}} that bitmap indices are e#cient for <b>read-only</b> <b>attributes</b> with {{a small number of}} distinct values. For an attribute with a large number of distinct values, the size of the bitmap index can be very large. To overcome this size problem, specialized compression schemes are used. Even though there is empirical evidence that some of these compression schemes work well, there has not been any systematic analysis of their e#ectiveness. In this paper, we analyze the time and space complexities of the two most e#cient bitmap compression techniques known, the Byte-aligned Bitmap Code (BBC) and the Word-Aligned Hybrid (WAH) code, and study their performance on high cardinality attributes. Our analyses indicate that both compression schemes are optimal in time. The time and space required to operate on two compressed bitmaps are proportional to the total size of the two bitmaps. We demonstrate further that an in-place OR algorithm can operate on a large number of sparse bitmaps in time linear in their total size. Our analyses also show that the compressed indices are relatively small compared with commonly used indices such as B-trees. Given these facts, we conclude that bitmap index is e#cient on attributes of low cardinalities as well as on those of high cardinalities. We also verify the analytical results with extensive tests, and identify an optimal way to combine di#erent options to achieve the best performance. The test results confirm the linearity in the total size of the compressed bitmaps, and that WAH outperforms BBC by about a factor of two...|$|R

