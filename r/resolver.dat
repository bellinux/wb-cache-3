1221|313|Public
25|$|The {{client side}} of the DNS is called a DNS <b>resolver.</b> A <b>resolver</b> is {{responsible}} for initiating and sequencing the queries that ultimately lead to a full resolution (translation) of the resource sought, e.g., translation of a domain name into an IP address. An individual DNS query may be either non-recursive, recursive, or iterative, {{or a combination of}} these.|$|E
25|$|Users {{generally}} do not communicate directly with a DNS <b>resolver.</b> Instead DNS resolution takes place transparently in applications such as web browsers, e-mail clients, and other Internet applications. When an application makes a request that requires a domain name lookup, such programs send a resolution request to the DNS <b>resolver</b> in the local operating system, which in turn handles the communications required.|$|E
25|$|ZYpp (or libzypp) is a Linux {{software}} management engine {{which has a}} powerful dependency <b>resolver</b> and a convenient package management API.|$|E
25|$|Other DOI <b>resolvers</b> and HTTP Proxies include http://hdl.handle.net, http://doi.medra.org, https://doi.pangaea.de/. At the {{beginning}} of the year 2016, a new class of alternative DOI <b>resolvers</b> was started by http://doai.io. This service is unusual in that it tries to find a non-paywalled version of a title and redirects you to that instead of the publisher's version. Since then, other open-access favoring DOI <b>resolvers</b> have been created, notably https://oadoi.org/ in October 2016. While traditional DOI <b>resolvers</b> solely rely on the Handle System, alternative DOI <b>resolvers</b> first consult open access resources such as BASE (Bielefeld Academic Search Engine).|$|R
40|$|The DNS is a {{fundamental}} service that has been repeatedly attacked and abused. DNS manipulation is a prominent case: Recursive DNS <b>resolvers</b> are deployed to explicitly return manipulated answers to users' queries. While DNS manipulation is used for legitimate reasons too (e. g., parental control), rogue DNS <b>resolvers</b> support malicious activities, such as malware and viruses, exposing users to phishing and content injection. We introduce REMeDy, a system that assists operators to identify the use of rogue DNS <b>resolvers</b> in their networks. REMeDy is a completely automatic and parameter-free system that evaluates the consistency of responses across the <b>resolvers</b> active in the network. It operates by passively analyzing DNS traffic and, as such, requires no active probing of third-party servers. REMeDy is able to detect <b>resolvers</b> that manipulate answers, including <b>resolvers</b> that affect unpopular domains. We validate REMeDy using large-scale DNS traces collected in ISP networks where more than 100 <b>resolvers</b> are regularly used by customers. REMeDy automatically identifies regular <b>resolvers,</b> and pinpoint manipulated responses. Among those, we identify both legitimate services that offer additional protection to clients, and <b>resolvers</b> {{under the control of}} malwares that steer traffic with likely malicious goals...|$|R
40|$|Libraries rely on link <b>resolvers</b> {{to connect}} faculty and {{students}} to subscribed/licensed content. Having titles in link <b>resolvers</b> and in discover systems is a way people learn to find quality content. It {{is important that the}} library published titles are included in link <b>resolvers.</b> This presentation will give an overview of KBART (Knowledge Bases and Related Tools), GOKb, Knowledge Base+, and the experience of a library publisher getting titles into link revolver systems. Attendees will learn how to submit their content to link <b>resolvers...</b>|$|R
25|$|The DNS <b>resolver</b> {{will almost}} {{invariably}} have a cache (see above) containing recent lookups. If the cache {{can provide the}} answer to the request, the <b>resolver</b> will return the value in the cache to the program that made the request. If the cache does not contain the answer, the <b>resolver</b> will send the request to one or more designated DNS servers. In the case of most home users, the Internet service provider to which the machine connects will usually supply this DNS server: such a user will either have configured that server's address manually or allowed DHCP to set it; however, where systems administrators have configured systems to use their own DNS servers, their DNS resolvers point to separately maintained name servers of the organization. In any event, the name server thus queried will follow the process outlined above, until it either successfully finds a result or does not. It then returns its results to the DNS resolver; assuming it has found a result, the <b>resolver</b> duly caches that result for future use, and hands the result back to the software which initiated the request.|$|E
25|$|For the non-recursive query method, a DNS <b>resolver</b> client queries a DNS server that {{provides}} a record for a domain {{for which it is}} authoritative itself, or it provides a partial result without querying other servers. In case of a caching DNS <b>resolver,</b> the non-recursive query of its local DNS cache delivers a result and reduces the load on upstream DNS servers by caching DNS request records {{for a period of time}} after an initial response from upstream DNS servers.|$|E
25|$|Another approach, which avoids typing or cutting-and-pasting into a <b>resolver</b> is {{to include}} the DOI in a {{document}} as a URL which uses the <b>resolver</b> as an HTTP proxy, such as http://doi.org/ (preferred) or http://dx.doi.org/, both of which support HTTPS. For example, the DOI 10.1000/182 can {{be included in a}} reference or hyperlink as https://doi.org/10.1000/182. This approach allows users to click on the DOI as a normal hyperlink. Indeed, as previously mentioned, this is how CrossRef recommends that DOIs always be represented (preferring HTTPS over HTTP), so that if they are cut-and-pasted into other documents, emails, etc., they will be actionable.|$|E
40|$|Ducommunâ€™s {{variable}} reluctance <b>resolvers</b> (VRRs) {{are highly}} reliable brushless <b>resolvers</b> without rotary transformers. Unlike conventional <b>resolvers,</b> VRRs have both {{primary and secondary}} windings in the stator assembly and no windings in the rotor. This offers significant advantages in price, weight and envelope dimensions. The VRRs are mechanically and electrically compatible with traditional brushless <b>resolvers.</b> They provide accurate absolute positioning or velocity feedback and can be offered as single-speed and multi-speed designs. Since VRRs do not require rotary transformers, they are more compact and reliable than conventional brushless resolves. Ducommun offers different stator and rotor core designs depending on the required accuracies and mounting dimensions. Custom designs are available upon request. VRR 41 PS...|$|R
5000|$|AmbientTalk (including {{first-class}} <b>resolvers</b> and read-only promises) ...|$|R
40|$|Speed of {{rotation}} of shaft measured {{by use of}} two brushless shaft-angle <b>resolvers</b> aligned so electrically and mechanically in phase with each other. <b>Resolvers</b> and associated circuits generate voltage proportional to speed {{of rotation}} (omega) in both magnitude and sign. Measurement principle exploits simple trigonometric identity...|$|R
25|$|When {{performing}} a reverse lookup, the DNS client converts the address into these formats before querying {{the name for}} a PTR record following the delegation chain as for any DNS query. For example, assuming the IPv4 address 208.80.152.2 is assigned to Wikimedia, it is represented as a DNS name in reverse order: 2.152.80.208.in-addr.arpa. When the DNS <b>resolver</b> gets a pointer (PTR) request, it begins by querying the root servers, which point to the servers of American Registry for Internet Numbers (ARIN) for the 208.in-addr.arpa zone. ARIN's servers delegate 152.80.208.in-addr.arpa to Wikimedia to which the <b>resolver</b> sends another query for 2.152.80.208.in-addr.arpa, which results in an authoritative response.|$|E
25|$|For proper {{operation}} of its domain name <b>resolver,</b> a network host is configured {{with an initial}} cache (hints) of the known addresses of the root name servers. The hints are updated periodically by an administrator by retrieving a dataset from a reliable source.|$|E
25|$|Nina Gordon left Veruca Salt {{in early}} 1998. Post kept the Veruca Salt name because the pair had an {{agreement}} that {{if one of them}} ever left the band the other would get to continue using the name. <b>Resolver</b> was released in 2000, the first Gordon-less Veruca Salt album.|$|E
50|$|<b>Resolvers</b> {{can perform}} very {{accurate}} analog conversion from polar to rectangular coordinates. Shaft angle is the polar angle, and excitation voltage is the magnitude. The outputs are the x and y components. <b>Resolvers</b> with four-lead rotors can rotate x and y coordinates, with the shaft position giving the desired rotation angle.|$|R
40|$|The Domain Name System (DNS) maps domain {{names to}} IP {{addresses}} and vice versa. The Domain Name System consist of two pieces, DNS servers and <b>resolvers.</b> <b>Resolvers</b> are client applications which deliver the IP address(es) of a domain name upon request of a user application or operating system. DNS servers receives querie...|$|R
50|$|Many DNS <b>resolvers</b> {{process a}} domain name that {{contains}} a dot in any position as being fully qualified or add the final dot needed for {{the root of the}} DNS tree. <b>Resolvers</b> process a domain name without a dot as unqualified and automatically append the system's default domain name and the final dot.|$|R
25|$|In theory, {{authoritative}} {{name servers}} are {{sufficient for the}} operation of the Internet. However, with only authoritative name servers operating, every DNS query must start with recursive queries at the root zone of the Domain Name System and each user system would have to implement <b>resolver</b> software capable of recursive operation.|$|E
25|$|DNS {{primarily}} {{uses the}} User Datagram Protocol (UDP) on port number 53 to serve requests. DNS queries {{consist of a}} single UDP request from the client followed by a single UDP reply from the server. The Transmission Control Protocol (TCP) is used when the response data size exceeds 512 bytes, or for tasks such as zone transfers. Some <b>resolver</b> implementations use TCP for all queries.|$|E
25|$|A {{standard}} practice in implementing name resolution in applications {{is to reduce}} the load on the Domain Name System servers by caching results locally, or in intermediate <b>resolver</b> hosts. Results obtained from a DNS request are always associated with the time to live (TTL), an expiration time after which the results must be discarded or refreshed. The TTL is set by the administrator of the authoritative DNS server. The period of validity may vary from a few seconds to days or even weeks.|$|E
50|$|Because {{the power}} {{supplied}} to the <b>resolvers</b> produces no actual work, the voltages used are usually low (<24 VAC) for all <b>resolvers.</b> <b>Resolvers</b> designed for terrestrial use {{tend to be}} driven at 50-60 Hz (utility frequency), while those for marine or aviation use tend to operate at 400 Hz (the frequency of the on-board generator driven by the engines). Aerospace applications utilize 2,930 Hz to 10 kHz at voltages ranging from 4 VRMS to 10 VRMS. Many of the aerospace applications are {{used to determine the}} position of an actuator or torque motor position. Control systems tend to use higher frequencies (5 kHz).|$|R
5000|$|... <b>resolvers</b> {{to convert}} {{inertial}} platform angles to signals usable for servo control ...|$|R
5000|$|Deployment of DNSSEC {{implementations}} {{across a}} wide variety of DNS servers and <b>resolvers</b> (clients) ...|$|R
25|$|Fedora {{uses the}} RPM package {{management}} system, using DNF {{as a tool}} to manage the RPM packages. DNF uses libsolv, an external dependency <b>resolver.</b> Flatpak is also supported by default, and support for Ubuntu's snaps can also be added. Fedora uses Delta RPM when updating installed packages to provide Delta update. A Delta RPM contains the difference between an old and new version of a package. This means that only the changes between the installed package and the new one are downloaded reducing network traffic and bandwidth consumption.|$|E
25|$|The Domain Name System {{specifies}} a set {{of various}} types of resource records (RRs), which are the basic information elements of the domain name system. Each record has a type (name and number), an expiration time (time to live), a class, and type-specific data. Resource records of the same type are described as a resource record set (RRset). The order of resource records in a set, which is returned by a <b>resolver</b> to an application, is undefined, but often servers implement round-robin ordering to achieve load balancing. The Domain Name System Security Extensions (DNSSEC), however, work on the complete set of resource record in canonical order.|$|E
2500|$|... caching full <b>resolver</b> implementation, {{including}} both a <b>resolver</b> library and a daemon.|$|E
40|$|This paper {{presents}} an efficient semantic service discovery scheme called UbiSearch for a large-scale ubiquitous computing environment. A semantic service discovery {{network in the}} semantic vector space is proposed where services that are semantically {{close to each other}} are mapped to nearby positions so that the similar services are registered in a cluster of <b>resolvers.</b> Using this mapping technique, the search space for a query is efficiently confined within a minimized cluster region while maintaining high accuracy in comparison to the centralized scheme. The proposed semantic service discovery network provides a number of novel features to evenly distribute service indexes to the <b>resolvers</b> and reduce the number of <b>resolvers</b> to visit. Our simulation study shows that UbiSearch provides good semantic searchability as compared to the centralized indexing system. At the same time, it supports scalable semantic queries with low communication overhead, balanced load distribution among <b>resolvers</b> for service registration and query processing, and personalized semantic matching...|$|R
50|$|Receiver resolvers: These <b>resolvers</b> {{are used}} in the {{opposite}} way to transmitter <b>resolvers</b> (the type described above). The two diphased windings are energized, the ratio between the sine and the cosine representing the electrical angle. The system turns the rotor to obtain a zero voltage in the rotor winding. At this position, the mechanical angle of the rotor equals the electrical angle applied to the stator.|$|R
40|$|Lexical {{features}} {{are a major}} source of information in state-of-the-art coreference <b>resolvers.</b> Lexical features implicitly model some of the linguistic phenomena at a fine granularity level. They are especially useful for representing the context of mentions. In this paper we investigate a drawback of using many lexical features in state-of-the-art coreference <b>resolvers.</b> We show that if coreference <b>resolvers</b> mainly rely on lexical features, they can hardly generalize to unseen domains. Furthermore, we show that the current coreference resolution evaluation is clearly flawed by only evaluating on a specific split of a specific dataset {{in which there is a}} notable overlap between the training, development and test sets. Comment: 6 pages, ACL 201...|$|R
2500|$|To {{resolve a}} DOI name, {{it may be}} input to a DOI <b>resolver,</b> such as [...]|$|E
2500|$|For the {{recursive}} query approach, a DNS <b>resolver</b> client will query {{a single}} DNS server, which may then query (as a client itself) other DNS servers {{on behalf of}} the requester. For example, a simple [...] "stub resolver" [...] running on a home router will typically make a recursive query to the DNS server run by the user's ISP. A recursive query is one for which the DNS server will fully answer the query (or give an error) by querying other name servers as needed. In typical operation, a client will issue a recursive query to a caching recursive DNS server, which will then issue non-recursive queries to determine the answer and send a single answer back to the client. The <b>resolver,</b> or another DNS server acting recursively {{on behalf of the}} <b>resolver,</b> negotiates use of recursive service using bits in the query headers. DNS servers are not required to support recursive queries.|$|E
2500|$|Assuming the <b>resolver</b> has no cached {{records to}} {{accelerate}} the process, the resolution process starts with a query {{to one of the}} root servers. [...] In typical operation, the root servers do not answer directly, but respond with a referral to more authoritative servers, e.g., a query for [...] "www.wikipedia.org" [...] is referred to the org servers. [...] The <b>resolver</b> now queries the servers referred to, and iteratively repeat this process until it receives an authoritative answer. The diagram illustrates this process for the host that is named by the fully qualified domain name [...] "www.wikipedia.org".|$|E
5000|$|... #Caption: [...] Diagram {{showing the}} role of open <b>resolvers,</b> {{improperly}} configured servers vulnerable to IP address spoofing ...|$|R
40|$|Most coreference <b>resolvers</b> {{rely heavily}} on string matching, {{syntactic}} properties, and semantic attributes of words, but they lack {{the ability to make}} decisions based on individual words. In this paper, we explore the benefits of lexicalized features in the setting of domain-specific coreference resolution. We show that adding lexicalized features to off-the-shelf coreference <b>resolvers</b> yields significant performance gains on four domain-specific data sets and with two types of coreference resolution architectures. ...|$|R
5000|$|The caliper {{controller}} {{controls the}} position and speed of the brake actuator (besides its main task which is tracking of its reference brake command). Thus, position and speed sensors are vitally required in each e-caliper and an efficient design of a measurement mechanism to sense {{the position and}} speed of the actuator is required. Recent designs for brake-by-wire systems use <b>resolvers</b> to provide accurate and continuous measurements for both absolute position and speed of the [...] of the actuators. Incremental encoders are relative position sensors and their additive error needs to be calibrated or compensated for by different methods. Unlike the encoders, <b>resolvers</b> provide two output signals that always allow the detection of absolute angular position. In addition, they suppress common mode noise and are especially useful in a noisy environment. Because of these reasons, <b>resolvers</b> are usually applied {{for the purpose of}} position and speed measurement in brake-by-wire systems. However, nonlinear and robust observers are required to extract accurate position and speed estimates from the sinusoidal signals provided by <b>resolvers.</b>|$|R
