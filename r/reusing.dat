7443|10000|Public
5|$|When used together, these {{features}} allow for assembling a complex distributed computing environment by <b>reusing</b> the existing hierarchical name system.|$|E
5|$|Biden had run for {{president}} once before, but his 1988 presidential campaign had lasted for only {{three and a half}} months. He had been forced to withdraw due to controversies arising over <b>reusing</b> other politicians' speeches without credit, and falsely recollecting parts of his academic record.|$|E
5|$|Madlax {{was often}} {{accused of being}} {{secondary}} and <b>reusing</b> Noir stylistic solutions, such as the story premise, the two heroines' appearance, and the musical style. Nevertheless, some sources praised the story for being more monolithic and consequent than its predecessor's, owing to all its episodes and subplots being tightly intertwined and held together by the primary plot.|$|E
5000|$|The {{elements}} that determine frequency <b>reuse</b> are the <b>reuse</b> distance and the <b>reuse</b> factor. The <b>reuse</b> distance, D is calculated as ...|$|R
40|$|The {{incompatibility}} between architectural elements, buildings, {{and urban}} contexts arisen, {{has created an}} inability to identify contexts. Because the link of new buildings with existing buildings is lost. To get back that lost link should understand the existing buildings, elements and concepts. "The new arises from the old". Creative design has to flourish from existing. So that, they become stable and absorbed {{in the evolution of}} architecture. Creativity happens in the thinking process. With the use of the available materials in contemporary designs to be use in able to achieve creative design'. In this task, <b>reuse</b> is playing a major role. <b>Reuse</b> has become a trend in contemporary architecture. It has a wider sphere in the field of architecture. It varies within a large range from <b>reuse</b> of old discarded building element to <b>reuse</b> of whole building; <b>reuse</b> of the idea of attractive element in modern materials to <b>reuse</b> of planning concepts. <b>Reuse</b> in the sense briefly has two ideologies. They are direct <b>reuse</b> and indirect <b>reuse.</b> Direct <b>reuse</b> means <b>reuse</b> of physical things in architecture. <b>Reuse</b> of buildings, <b>reuse</b> of elements, <b>reuse</b> of materials and waste <b>reuse</b> falling in this category. <b>Reuse</b> of ideas and concepts falling in the category of indirect <b>reuse.</b> This is again can be categorized in to <b>reuse</b> of planning concepts, <b>reuse</b> of detailing ideas, relations with colours, textures and proportions etc [...] . this is the study area selected to explore in this study, where a research gap has been identified. Until the direct <b>reuse</b> and indirect <b>reuse</b> belongs to same origin, it is necessary to understand the link between them. Are they interdependence or independence, what is the most important in architecture. Until there i s no such attention focus in the field of study, more attention will be towards indirect <b>reuse.</b> How it affect the main parameters of architecture, spatial quality, especially to be deeply analyzed The final aims to identify clear link between direct <b>reuse</b> and indirect <b>reuse,</b> specially the link between indirect <b>reuse</b> and spatial quality, the main parameter of architecture...|$|R
40|$|Abstract—This {{research}} {{investigates the}} premise that the likelihood of success of software <b>reuse</b> efforts may vary with the <b>reuse</b> strategy employed and, hence, potential <b>reuse</b> adopters must be able to understand <b>reuse</b> strategy alternatives and their implications. We use survey data collected from 71 software development groups to empirically develop a set of six dimensions that describe the practices employed in <b>reuse</b> programs. The study investigates the patterns in which these practices co-occur in the real world, demonstrating that the dimensions cluster into five distinct <b>reuse</b> strategies, each with a different potential for <b>reuse</b> success. The findings provide a means to classify <b>reuse</b> settings and assess their potential for success. Index Terms—Reusability, systematic software <b>reuse,</b> software process improvement, quality, <b>reuse</b> success, <b>reuse</b> classification scheme, best practices. ...|$|R
5|$|Motifs from Apuleius' {{description}} of the Isiac initiation have been repeated and reworked in fiction and in esoteric belief systems in modern times, and they thus form {{an important part of}} the Western perception of ancient Egyptian religion. People <b>reusing</b> these motifs often assume that mystery rites were practiced in Egypt long before Hellenistic times.|$|E
5|$|Despite some {{immediate}} confiscations {{after the}} siege, {{by the time}} of the Restoration of Charles II, the Somerset family had managed to recover most of their possessions, including Raglan Castle. Henry Somerset, the 3rd Marquess, decided to prioritise the rebuilding of his other houses at Troy and Badminton, rather than Raglan, <b>reusing</b> some of the property sent away for safety before the war, or salvaged after the slighting.|$|E
5|$|During the Late Preclassic {{structures}} were built using volcanic stone {{held together with}} clay, as in the Middle Preclassic. However, they evolved to include stepped structures with indented corners and stairways dressed with rounded pebbles. At the same time, old Olmec-style sculptures were moved from their original positions and {{placed in front of}} the new-style buildings, sometimes <b>reusing</b> sculpture fragments in the stone facing.|$|E
40|$|Theories of {{knowledge}} <b>reuse</b> posit two distinct processes: <b>reuse</b> for replication and <b>reuse</b> for innovation. We identify another distinct process, <b>reuse</b> for customization. <b>Reuse</b> for customization {{is a process}} in which designers manipulate the parameters of metamodels to produce models that fulfill their personal needs. We test hypotheses about <b>reuse</b> for customization in Thingiverse, a community of designers that shares files for three-dimensional printing. 3 D metamodels are <b>reused</b> more often than the 3 D models they generate. The <b>reuse</b> of metamodels is amplified when the metamodels are created by designers with greater community experience. Metamodels make the community's design knowledge available for <b>reuse</b> for customization-or further extension of the metamodels, a kind of <b>reuse</b> for innovation...|$|R
40|$|Although {{the concept}} of design <b>reuse</b> is {{accepted}} as a valid approach to design, little attempt {{has been made to}} formalise the elements that constitutes design <b>reuse.</b> The few approaches formalising design <b>reuse,</b> e. g. 'Concept <b>Reuse</b> Approach for Engineering Design Problem Solving', tend to be prescriptive, detailing procedures and functions that have to be carried out in order to <b>reuse</b> designs. Such procedural methods fail to identify the underlying processes and knowledge resources of design <b>reuse</b> and tend to relate to an approach or method of tackling <b>reuse</b> rather than <b>reuse</b> itself. It would seem that the only current model encompassing design <b>reuse</b> is 'The Design <b>Reuse</b> Process Model'. The elements of this <b>reuse</b> process model have been used as a basis upon which to identify and analyse the benefits of design <b>reuse</b> when considering key metrics relating to competitive product development,that is time, cost, quality and performance...|$|R
40|$|This paper {{presents}} {{a study of}} the performance limits of data value <b>reuse.</b> Two types of data value <b>reuse</b> are considered: instruction-level <b>reuse</b> and trace-level <b>reuse.</b> The former <b>reuses</b> instances of single instructions whereas the latter <b>reuses</b> sequences of instructions as an atomic unit. Two different scenarios are considered: an infinite resource machine and a machine with a limited instruction window. The results show that <b>reuse</b> is abundant in the SPEC applications. Instructionlevel <b>reuse</b> may provide a significant speedup but it drops dramatically when the <b>reuse</b> latency is considered. Trace-level <b>reuse</b> has in general less potential for the unlimited window scenario but it is much more effective for the limited window configuration. This is because trace-level <b>reuse,</b> in addition to reduce the execution latency, increases the effective instruction window size, by avoiding the fetch and execution of sequences of instructions. Overall, trace-level <b>reuse</b> is shown to be a promising approa [...] ...|$|R
5|$|Hitmaker {{had tried}} to develop an on-line version of Crazy Taxi, to be called Crazy Taxi Next {{exclusively}} for the Xbox, which, besides multiplayer game modes, would have included night and day cycles, each with {{a different set of}} passengers and destinations, while <b>reusing</b> and graphically updating the maps from Crazy Taxi and Crazy Taxi 2. Ultimately, both multiplayer and day/night cycles were dropped and work on Crazy Taxi Next was transferred to Crazy Taxi 3: High Roller, which included some of the nighttime driving concepts suggested by Next.|$|E
5|$|In 1859, {{the castle}} was re-equipped with heavier artillery, a {{combination}} of 32-pounder (15kg) and 68-pounder (31kg) guns. A new magazine was constructed, comprising a large, brick-built building divided into three rooms for storing gunpowder, specially designed to keep the powder dry. The exterior gun emplacements were also redesigned, <b>reusing</b> the 1806 foundations; the two surviving emplacements, in the north-east and north-west bastions, date from 1859.|$|E
5|$|Matsuno, the game's {{producer}} and director, preferred {{to create a}} new game title from scratch and use design ideas from staff collaborations, rather than <b>reusing</b> popular characters and designs that are found in sequels. Vagrant Story is regarded as a mixture of genres, as it contains elements of role-playing in its battles and platform games when in the field map. Matsuno explained that the development team was not eager to place Vagrant Story into a specific genre, preferring to create the game with a genre of its own.|$|E
40|$|While object-orientation {{has had a}} large {{impact on}} the popularisation of <b>reuse,</b> <b>reuse</b> in OO is mostly ad hoc and lessons {{can be learned from}} the work on {{systematic}} <b>reuse.</b> On the other hand, the emphasis of object-orientation on iterative development is important because it allows the construction of reusable assets in a bottom-up fashion. We claim that systematic <b>reuse</b> needs to be reconciled with iterative development in order to make <b>reuse</b> a standard practice. Such a <b>reuse</b> methodology must emphasise the co-operation between asset providers and asset reusers to control how assets can be <b>reused,</b> how assets are <b>reused</b> and how changes propagate from assets to applications during iterative development. We propose <b>reuse</b> contracts as the basis for such a methodology. Keywords: <b>Reuse</b> contracts, change management, iterative development, object-orientation. Workshop Goals: Cross-fertilisation between the OO community and the <b>reuse</b> community, get feedback on our ideas on <b>reuse</b> contrac [...] ...|$|R
50|$|<b>Reuse</b> cost-benefits models include {{economic}} {{cost-benefit analysis}} {{as well as}} quality and productivity payoff. Maturity assessment models categorize <b>reuse</b> programs by how advanced they are in implementing systematic reuse.Amount of <b>reuse</b> metrics are used to assess and monitor a <b>reuse</b> improvement effort by tracking percentages of <b>reuse</b> for life cycle objects. Failure modes analysis is used to identify and order the impediments to <b>reuse</b> in a given organization. Reusability metrics indicate the likelihood that an artifact is reusable. <b>Reuse</b> library metrics are used to manage and track usage of a <b>reuse</b> repository.|$|R
40|$|This paper reports an {{empirical}} user study {{of an active}} <b>reuse</b> repository system. Instead of waiting passively for software developers to initiate the component location process with a well-defined <b>reuse</b> query, active <b>reuse</b> repository systems infer <b>reuse</b> queries from syntactic and semantic cues present in partially constructed programs in development environments, and proactively deliver components that match the inferred <b>reuse</b> queries. The reported empirical user study of an implemented active <b>reuse</b> repository system called CodeBroker shows that active repository systems promote <b>reuse</b> by motivating and enabling software developers to <b>reuse</b> components whose existence is not anticipated, and reducing the cost of <b>reuse</b> through the automation of the component location process...|$|R
5|$|The Normans {{began to}} make incursions into South Wales from the late-1060s onwards, pushing westwards from their bases in {{recently}} occupied England. Their advance was marked by the construction of castles, frequently on old Roman sites, for example those at Cardiff, Pevensey and Portchester, {{and the creation of}} regional lordships. <b>Reusing</b> former Roman sites in this way produced considerable savings in the manpower required to construct the large earth fortifications of the early castles.|$|E
5|$|The {{first story}} {{arc of the}} Mega Man comic series adapts the {{original}} Mega Man game, though with certain artistic liberties, such as Dr. Wily's robot factory <b>reusing</b> the design of Mega Man 2s Wily Castle, Mega Man becoming obsessed with stopping the reprogrammed Robot Masters {{to the point of}} having an identity crisis, and Dr. Light mistaking a Sniper Joe controlled by Dr. Wily for Proto Man.|$|E
5|$|The next {{plan for}} the Channel Tunnel Rail Link {{involved}} a tunnel reaching London from the south-east, and an underground terminus {{in the vicinity of}} King's Cross station. A late change in the plans, principally driven by the then Deputy Prime Minister Michael Heseltine's desire for urban regeneration in east London, led to a change of route, with the new line approaching London from the east. This opened the possibility of <b>reusing</b> the underused St Pancras station as the terminus, with access via the North London Line that crosses the throat of the station.|$|E
40|$|When {{talking about}} {{software}} <b>reuse,</b> {{a problem that}} very quickly becomes apparent is "what is being used?". In this paper, we introduce the concept of assembly, a unit of reusable software. This allows us to more sensibly compare different strategies for software <b>reuse.</b> We believe this concept is scalable to all levels, from intra-program <b>reuse</b> to inter-program <b>reuse.</b> In particular, {{it allows us to}} unify two forms of <b>reuse,</b> composition <b>reuse</b> and generative <b>reuse,</b> that have traditionally been regarded as distinct. This is part of a model we are developing for describing how software <b>reuse</b> is supported by software development systems. 1 Introduction Software <b>reuse</b> covers many topics, from large scale issues such as domain analysis to smaller scale issues such as the detailed structure of components. Also, there are different issues involved in design with <b>reuse</b> when distinguished from design for <b>reuse.</b> Our work primarily concerns design for <b>reuse,</b> at the smaller scale level. While [...] ...|$|R
40|$|Abstract. Software <b>reuse</b> {{has gained}} {{increasing}} attention by academic organizations and software development agencies. Existing researches on software pattern concentrate on constructing and representing patterns in unstructured way, so {{it is difficult to}} maintain and <b>reuse</b> them. This article puts forward pattern-oriented software development process that integrates modeling method based on architecture with software process for software <b>reuse.</b> Through the research on pattern oriented software development process, the reusability of software is enhanced. Instruction During the development of software, it is required to enhance the reusability of software, for reducing the cost of development and maintenance, shortening development time and improving software quality. However, from code <b>reuse</b> and function library <b>reuse</b> in "Copy-Paste " way to current object <b>reuse</b> and component <b>reuse,</b> all these <b>reuse</b> strategies have not lived up to expectations in development practice, where we find that bottom-to-top <b>reuse</b> method can not be used in component <b>reuse.</b> As for component integration, design <b>reuse</b> should be prior to component <b>reuse</b> and top-to-bottom method is suitable for component <b>reuse.</b> Software <b>reuse</b> includes not only software component itself but also the relationship between the components...|$|R
40|$|Abstract. Software {{has been}} <b>reused</b> in {{applications}} development ever since programming started. However, the <b>reuse</b> practices have mostly been ad hoc, {{and the potential}} benefits of <b>reuse</b> have never been fully realized. Systematic <b>reuse</b> offers the greatest potential for significant gains in software development productivity and quality. Organizations {{are looking for ways to}} develop a software <b>reuse</b> program. The strategy for adopting a <b>reuse</b> technology should be based on a vision for improving the organization’s way of doing business. Thus, this paper presents a <b>Reuse</b> Maturity Model proposal, describing consistence features for the incremental <b>reuse</b> adoption...|$|R
5|$|The various {{editions of}} Aesop's Fables {{illustrated}} by Bewick span almost his entire creative life. The first {{was created for}} the Newcastle bookseller Thomas Saint during his apprentice years, an edition of Robert Dodsley's Select Fables published in 1776. With his brother John he later contributed to a three-volume edition for the same publisher in 1784, <b>reusing</b> some pictures from the 1776 edition.|$|E
5|$|They include <b>reusing</b> part of {{the station}} {{building}} as a power station, fuelled by biomass and waste. The station's existing chimneys would be utilised for venting steam. The former turbine halls would be converted to shopping spaces, and the roofless boiler house used as a park. An energy museum would also be housed inside the former station building. The restoration of the power station building would cost £150 million.|$|E
5|$|A {{range of}} {{applications}} were considered for Advanced Gemini missions, including military flights, space station crew and logistics delivery, and lunar flights. The Lunar proposals ranged from <b>reusing</b> the docking systems {{developed for the}} Agena target vehicle on more powerful upper stages such as the Centaur, which could propel the spacecraft to the Moon, to complete modifications of the Gemini to enable it {{to land on the}} Lunar surface. Its applications would have ranged from manned lunar flybys before Apollo was ready, to providing emergency shelters or rescue for stranded Apollo crews, or even replacing the Apollo program.|$|E
40|$|The {{performance}} {{potential of}} a value <b>reuse</b> mechanism depends on its <b>reuse</b> detection time, the number of <b>reuse</b> opportunities, {{and the amount of}} work saved by skipping each <b>reuse</b> unit. Since larger instruction groups typically have fewer <b>reuse</b> opportunities than smaller groups, but also provide greater benefit for each reuse-detection process, {{it is very important to}} find the balance point that provides the largest overall performance gain. We propose a new mechanism called sub-block <b>reuse</b> to balance the <b>reuse</b> granularity and the number of <b>reuse</b> opportunities. Our simulation results show that sub-block <b>reuse</b> with compiler assistance has a substantial and consistent potential to improve the performance of superscalar processors, with speedups ranging from 10 % to 22 %. ...|$|R
40|$|Due to the {{specific}} approach to <b>reuse</b> in product line engineering, this approach brings a specific point of view to <b>reuse</b> economics. As a consequence some established assumptions and abstractions of <b>reuse</b> economics that are valid in most opportunistic approaches to <b>reuse</b> must be revisited. The list of issues ranges from the basic estimation models used as input to <b>reuse</b> economics models to real options used for valuing uncertainty and flexibility in <b>reuse.</b> Some of the issues we uncover are also relevant for <b>reuse</b> economics in general...|$|R
40|$|This paper {{describes}} {{the results of}} a controlled experiment designed to evaluate the impact of human factors on software <b>reuse.</b> The experiment concludes that (1) software <b>reuse</b> promotes higher productivity than no <b>reuse,</b> (2) <b>reuse</b> resulting from both moderate and strong encouragement promote higher productivity than no <b>reuse,</b> and (3) while strong managerial encouragement did not create a significant difference in productivity, it does tend to promote improper <b>reuse</b> activities...|$|R
5|$|According to series artist Keiji Inafune, Dr. Wily's Revenge was {{the first}} Mega Man game to be {{outsourced}} to a developer separate from Capcom. Critical reception for the game has been favorable, and most sources have denoted it as a competent, if excessively difficult, portable version of the popular NES series. Dr. Wily's Revenge was a best-seller and spawned four sequels of its own on the Game Boy, many of which follow its trend of <b>reusing</b> elements from their home console counterparts. In 2011, Dr. Wily's Revenge was made available as a Virtual Console launch title on Japan's Nintendo eShop for the Nintendo 3DS. It also appeared on PAL region and North American eShops later that year.|$|E
5|$|Adrienne's head {{is split}} open by a {{swinging}} pendulum blade in one death scene, an effect that took several hours to set up. A fake head was created from a model cast of actress Victoria Morsell's head, with pumps installed to pump fake blood into it, and strings attached {{to either side}} {{so it could be}} pulled apart. The crew only had one head model, so they had to keep putting it back together and <b>reusing</b> it over and over for each take. After filming was completed, the crew put the head back together and took a picture of Morsell with it.|$|E
5|$|As Heyer's {{popularity}} increased, {{other authors}} began to imitate her style. In May 1950, {{one of her}} readers notified her that Barbara Cartland had written several novels in a style similar to Heyer's, <b>reusing</b> names, character traits and plot points and paraphrased descriptions from her books, particularly A Hazard of Hearts, which borrowed characters from Friday's Child, and The Knave of Hearts which took off These Old Shades. Heyer completed {{a detailed analysis of}} the alleged plagiarisms for her solicitors, and while the case never came to court and no apology was received, the copying ceased. Her lawyers suggested that she leak the copying to the press. Heyer refused.|$|E
40|$|Software {{is rarely}} built {{completely}} from scratch. To a great extent, existing software documents (source code, design documents, etc.) are copied and adapted to t new requirements. Yet we {{are far from}} the goal of making <b>reuse</b> the standard approach to software development. Software <b>reuse</b> {{is the process of}} creating software systems from existing software rather than building them from scratch. Software <b>reuse</b> is still an emerging discipline. It appears in many di erent forms from ad-hoc <b>reuse</b> to systematic <b>reuse,</b> and from white-box <b>reuse</b> to black-box <b>reuse.</b> Many di erent products for <b>reuse</b> range from ideas and algorithms to any documents that are created during the software life cycle. Source code is most commonly reused; thus many people misconceive software <b>reuse</b> as the <b>reuse</b> of source code alone. Recently source code and design <b>reuse</b> have become popular with (object-oriented) class libraries, application frameworks, and design patterns. Software components provide a vehicle for planned and systematic <b>reuse.</b> The software community does not yet agree on what a software componen...|$|R
40|$|Software <b>reuse</b> has {{received}} much attention since {{the concept was}} introduced in 1968. Software <b>reuse</b> itself is a broad concept that has many levels of meaning, ranging from strict code <b>reuse,</b> to design/analysis <b>reuse,</b> to entire application <b>reuse.</b> Many companies, {{especially those in the}} defense and aerospace fields, have setup successful <b>reuse</b> programs. However, not all <b>reuse</b> programs are successful. There is an array of technical and non-technical barriers to successful <b>reuse.</b> Some of the barriers are rooted in communications and awareness issues. The World Wide Web (WWW) is a successful mechanism for addressing communications, distribution, and awareness issues and has first and second order impacts on the barriers to <b>reuse.</b> WWW is also the catalyst for the redefinition of software repository to be a computational resource and the integration of software technology with other information transfer functions. Why Care About <b>Reuse?</b> Software <b>reuse</b> was first proposed by McIlroy at a NATO [...] ...|$|R
40|$|Abstract. Code {{repositories}} on the Internet {{provide a}} tremendous amount of freely available open source code that can be <b>reused</b> for building new software. It has been argued that only software <b>reuse</b> can bring the gain of productivity in software construction demanded by the market. However, knowledge about the extent of <b>reuse</b> in software projects is only sparse. To remedy this, we report on an empirical study about software <b>reuse</b> in 20 open source Java projects with a total of 3. 3 MLOC. The study investigates (1) whether open source projects <b>reuse</b> third party code and (2) how much white-box and black-box <b>reuse</b> occurs. To answer these questions, we utilize static dependency analysis for quantifying black-box <b>reuse</b> and code clone detection for detecting white-box <b>reuse</b> from a corpus with 6. 1 MLOC of reusable Java libraries. Our results indicate that software <b>reuse</b> is common among open source Java projects and that black-box <b>reuse</b> is the predominant form of <b>reuse.</b> ...|$|R
