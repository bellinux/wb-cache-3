6|7|Public
50|$|A <b>reference</b> <b>designator</b> {{unambiguously}} identifies {{a component}} in an electrical schematic or on {{a printed circuit}} board. The <b>reference</b> <b>designator</b> usually consists {{of one or two}} letters followed by a number, e.g. R13, C1002. The number is sometimes followed by a letter, indicating that components are grouped or matched with each other, e.g. R17A, R17B.IEEE 315 contains a list of Class Designation Letters to use for electrical and electronic assemblies. For example, the letter R is a reference prefix for the resistors of an assembly, C for capacitors, K for relays.|$|E
50|$|For {{reference}} {{designation of}} any equipment in industrial systems the standard IEC 61346 (Industrial systems, installations and equipment and industrial products — Structuring principles and reference designations) can be applied. For the function Measurement the <b>reference</b> <b>designator</b> B is used, {{followed by the}} above listed letter for the measured variable.|$|E
5000|$|A {{connector}} in a fixed {{location is}} a jack and a moveable connector is a plug. The distinction is relative, so a portable radio is considered stationary {{compared to the}} cable from the headphones; the radio has a jack, and the headphone cable has a plug. Where the relationship is equal, such as when two flexible cables are connected, each is considered a plug. Jacks use the <b>reference</b> <b>designator</b> prefix of J and plugs use the <b>reference</b> <b>designator</b> prefix of P. [...] It is possible {{in the case of}} box mounted connectors for the connector to be a receptacle with male pin contacts. In this case the connector is designated a jack (J ref des) regardless of the contact gender because the housing for the contacts is in fact configured as the receptacle even though its mate (the plug) goes around the receptacle. See MIL-STD-38999 and similar cases.|$|E
50|$|On {{a circuit}} diagram, {{electronic}} devices {{are represented by}} conventional symbols. <b>Reference</b> <b>designators</b> are applied to the symbols to identify the component.|$|R
50|$|The {{construction}} of <b>reference</b> <b>designators</b> {{is covered by}} IEEE 200-1975/ANSI Y32.16-1975 (replaced by ASME Y14.44-2008) and IEEE-315-1975. The table below lists designators commonly used, and does not necessarily comply with the standard.|$|R
5000|$|... #Caption: Simplified {{schematic}} of a Wien bridge oscillator from Hewlett’s US patent 2,268,872. Unmarked capacitors {{have enough}} capacitance {{to be considered}} short circuits at signal frequency. Unmarked resistors {{are considered to be}} appropriate values for biasing and loading the vacuum tubes. Node labels and <b>reference</b> <b>designators</b> in this figure {{are not the same as}} used in the patent. The vacuum tubes indicated in Hewlett's patent were pentodes rather than the triodes shown here.|$|R
50|$|On {{a circuit}} diagram, the symbols for {{components}} are labelled with a descriptor or <b>reference</b> <b>designator</b> matching {{that on the}} list of parts. For example, C1 is the first capacitor, L1 is the first inductor, Q1 is the first transistor, and R1 is the first resistor (note that this is not written as a subscript, as in R1, L1,...). Often the value or type designation of the component is given on the diagram beside the part, but detailed specifications would go on the parts list.|$|E
40|$|A {{computerized}} interactive harness engineering {{program has}} been developed to provide an inexpensive, interactive system which is designed for learning and using an engineering approach to interconnection systems. PCACE is basically a database system that stores information as files of individual connectors and handles wiring information in circuit groups stored as records. This directly emulates the typical manual engineering methods of data handling, thus making the user interface to the program very natural. Data files can be created, viewed, manipulated, or printed in real time. The printed ouput is in a form ready for use by fabrication and engineering personnel. PCACE also contains {{a wide variety of}} error-checking routines including connector contact checks during hardcopy generation. The user may edit existing harness data files or create new files. In creating a new file, the user is given the opportunity to insert all the connector and harness boiler plate data which would be part of a normal connector wiring diagram. This data includes the following: 1) connector <b>reference</b> <b>designator,</b> 2) connector part number, 3) backshell part number, 4) cable <b>reference</b> <b>designator,</b> 5) cable part number, 6) drawing revision, 7) relevant notes, 8) standard wire gauge, and 9) maximum circuit count. Any item except the maximum circuit count may be left blank, and any item may be changed at a later time. Once a file is created and organized, the user is directed to the main menu and has access to the file boiler plate, the circuit wiring records, and the wiring records index list. The organization of a file is such that record zero contains the connector/cable boiler plate, and all other records contain circuit wiring data. Each wiring record will handle a circuit with as many as nine wires in the interface. The record stores the circuit name and wire count and the following data for each wire: 1) wire identifier, 2) contact, 3) splice, 4) wire gauge if different from standard, 5) wire/group type, 6) wire destination, and 7) note number. The PCACE record structure allows {{for a wide variety of}} wiring forms using splices and shields, yet retains sufficient structure to maintain ease of use. PCACE is written in TURBO Pascal 3. 0 and has been implemented on IBM PC, XT, and AT systems under DOS 3. 1 with a memory of 512 K of 8 bit bytes, two floppy disk drives, an RGB monitor, and a printer with ASCII control characters. PCACE was originally developed in 1983, and the IBM version was released in 1986...|$|E
40|$|The Master Console {{oversees the}} {{function}} of Computer Systems in Firing room 1 (FR 1). Master Console Operators, MCOs' for short, are our customer. I was integrated into the System Monitoring and Control (SMC) software team that is {{under the guidance of}} David Slaiman, who is the product group lead. I have been brought up to speed with System Monitoring and Control. The initial time spent reading SMC software design description and understanding how it works. The current Firing Room 1 Console Display is a floor layout giving the MCO two essential pieces of information which are Health and Status. When an issue arises, the MCO has to look on the display to find which console is affected and then the MCO must use the <b>Reference</b> <b>designator</b> from the display to manually search for the Portal Workstation (PWS) installed in the console using the hardware map; which is a long process to lookup a PWS if an issue is present. My project is to make the FR 1 Console Display easier for the MCO's to pinpoint PWS's without having to lookup additional resources in the process. My project also includes updating Firing Room 1 Console Display to include the F 1 R Non-Redundant Set. The display does not have good use of space and functionality. PWS numbers were not present in the previous design and are the critical component in efficient understanding and administration of the consoles. Part of the process includes getting feedback from the customer, instead of just emailing them with a question, we made a proposal with changes so they could respond and give us their input; which proved to be an effective method for engaging them. In order to do this I had to use the Display Editor (DE) tool developed by NASA, Paint. Net and Visio. The process I have been using has been Visio to alter the floor layout of Firing Room and take advantage of the white areas, and then I take the altered floor plan into Paint. Net. Once in Paint. Net I put the new floor plan as a background to the standard console display. Paint. Net also serves as a tool to create the new service state bars for the new background; finally I used the DE to assemble everything and setup the right CUI's for each PWS...|$|E
40|$|Abstract. Does Naming and Necessity {{show that}} we have no useful a priori {{knowledge}} about the <b>reference</b> of rigid <b>designators</b> in science and philosophy? Jackson and Chalmers answer No: Kripke shows only that the C-extension of a rigid designator is an empirical question, but any rigid designator has also its Aextension, and we know of it a priori. But what is A-extension? Supposedly, a dimension of extension which diverges from C-extension only at non-actual worlds, and only when these worlds are treated as being actual. This sounds contradictory. This paper argues that it does reflect a confusion—the confusion of seeing non-actual worlds as separated spatially, not modally, from the actual world. We have indeed no useful a priori knowledge concerning the <b>reference</b> of rigid <b>designators.</b> The externalism of Naming and Necessity does raise puzzles—but they are removed by Millikan’s naturalized account of concepts. Does the externalism about meaning sketched by Kripke in Naming and Necessity (1972) really {{show that we}} have no useful a priori knowledge concerning the reference of many key terms in science and philosophy? Does it thereby show that there is little place or role for conceptual analysis? Frank Jackson (1998) and David Chalmers (1996) have recently argued that the answer to both questions is No. Kripke’s insights are compatible, Jackson and Chalmers maintain, with the idea that such key terms hav...|$|R
40|$|Production machine {{engineering}} involves multiple engineering disciplines defining {{together the}} configuration of each machine. Each of these disciplines provides an engineering model, which influences engineering models from other disciplines and is itself influenced by other engineering models. Therefore, building a valid configuration of a production machine requires the reconciliation of engineering models of all involved engineering disciplines. Up to now, execution of model reconciliations by model transformation systems was mainly considered for desktop model transformation environments. The analysis of engineering processes and customer applications of production machines revealed that the industrial application of model transformations requires {{the execution of the}} same model transformation specification on different execution environments depending on the initiator of the model reconciliation. An electrical engineer runs the model transformation on his desktop between locally installed engineering applications for small organizations or on his field programming device for commissioning scenarios. For complex systems and bigger organizations, model transformations are executed on an enterprise product lifecycle management (PLM) server. A machine operator triggers model transformations on the real-time system of an automation controller for on-site reconfigurable machines, e. g. by physically connecting a modular device to a production machine. To tackle this scenario, this thesis presents a new application of the model driven architecture (MDA), which transforms a platform independent model transformation specifications (PIM-MT) to platform specific model transformation specifications (PSM-MT) by higher order transformations (HOT). For industrial usage, both the platform independent transformation specification and the platform specific execution reuse proven existing technology which is tailored and extended where needed. This allows for the stepwise introduction of model transformation technology in existing engineering and technology environments based on a classification scheme which was developed as part of this thesis. For the PIM-MT specification, the strict handling of references between engineering model elements from current model transformation specifications, which does not fit well the requirements of engineering models with temporarily violate references within the engineering workflow, was replaced by a weaker reference handling based on domain specific <b>reference</b> <b>designators.</b> An existing model transformation specification, the ATL language, has been tailored for PIM-MT specifications. For the PSM-MT desktop execution, the ATL desktop model transformation engine was reused. XSL transformations were adapted for enterprise model transformations executed on PLM servers. A PSM-MT engine for real-time IEC 61131 programmable logic controllers was developed as part of this thesis. With the results of this thesis it is now possible to build a customized engineering environment {{as an extension of the}} existing infrastructure of a machine builder, which automates {{the configuration of}} production machines by using model transformations generated from a common platform independent specification on multiple execution platforms. ...|$|R
40|$|This Software Requirements Specification (SRS) is an {{as-built}} {{document that}} presents the Tank Waste Remediation System (TWRS) Controlled Baseline Database (TCBD) {{in its current}} state. It was originally known as the Performance Measurement Control System (PMCS). Conversion to the new system name has not occurred within the current production system. Therefore, for simplicity, all references to TCBD are equivalent to PMCS references. This SRS will <b>reference</b> the PMCS <b>designator</b> from this point forward to capture the as-built SRS. This SRS is written at a high-level and is intended to provide the design basis for the PMCS. The PMCS was first released as the electronic data repository for cost, schedule, and technical administrative baseline information for the TAAS Program. During its initial development, the PMCS was accepted by the customer, TARS Business Management, with no formal documentation to capture the initial requirements...|$|R
40|$|In his 1975 article “Contingent Identity,” Allan Gibbard purportedly {{shows that}} not all {{identity}} statements containing proper names are necessarily true. The thrust of his argument comes from a clever statue-and-lump case. Specifically, Gibbard claims that two proper names that refer to identical objects could have referred to distinct objects. In my thesis I argue that the postulation of contingent identity immediately presents one with a contradiction—specifically, one where identity statements containing proper names are both necessarily true (i. e. true in all possible worlds) and yet also fail to be true in some possible world W. Furthermore, I argue that the proponent of contingent identity conflates an object with the properties used to fix the <b>reference</b> of a <b>designator</b> of the object. Ultimately, I show that upholding a Kripkean notion of naming and reference allows one to uphold the necessity of identity in light of Gibbard’s statue-and-lump case...|$|R

