180|989|Public
5000|$|Capability Definition, {{comprising}} the Needs Phase and the <b>Requirements</b> <b>Phase</b> of the Capability Development process.|$|E
50|$|Performance {{engineering}} {{working practices}} {{are applied to}} the <b>Requirements</b> <b>phase,</b> and to the Business Architecture, Information System Architecture, and Technology architecture phases. Within Information System Architecture, it is applied to both the Data Architecture and Application Architecture.|$|E
5000|$|Requirements analysis: Testing {{should begin}} in the <b>requirements</b> <b>phase</b> of the {{software}} development life cycle. During the design phase, testers work to determine what aspects of a design are testable and with what parameters those tests work.|$|E
5000|$|<b>Requirement</b> <b>phase</b> {{allows the}} {{description}} of operational processes and collection of all their functional, behavioural, informational and capability requirements.|$|R
40|$|Object-oriented {{analysis}} of software requirements employs encapsulation of informationand functionality into a requirements object. Nevertheless, the object-oriented development methodis often insufficient by itself to fully support the depths required for initial system specification. This paper explores basic concepts {{and issues of}} the OO approach; specifically, we concentrate onthe notion of object in the <b>requirement</b> <b>phase</b> of the software life cycle used to model reality. Wepropose a foundation for a conceptual model with an object viewed as a flow system. Thisconceptualization enriches the analysis process in the <b>requirement</b> <b>phase</b> of the software life cycle...|$|R
40|$|An ontology-based MAS {{methodology}} {{can offer}} support for software extensibility, interoperability and reuse which are critical concerns for long-term commercial viability of any MAS. These concerns underpin the eventual adoption of agent technology by industry. Existing AOSE methodologies lack adequate support for these concerns. This {{research is part}} of an ongoing effort to produce a methodology that uses ontologies as a central modeling artifact. In this chapter we propose an early <b>requirement</b> <b>phase</b> which is ontology centric. We integrate this <b>requirement</b> <b>phase</b> into an ontology-based methodological framework. Further, we identify ontology-related interdependencies between requirement, analysis, and design <b>phases.</b> Our early <b>requirement</b> is a novel approach that integrates i* with ontological analysis...|$|R
50|$|The {{process is}} {{iterative}} and cyclic. Each step checks with <b>Requirements.</b> <b>Phase</b> C involves {{some combination of}} both Data Architecture and Applications Architecture. Additional clarity can be added between steps B and C {{in order to provide}} a complete information architecture.|$|E
50|$|It was {{recognized}} that high-temperature materials were {{the key to}} the successful development of AD700 technology. Due to the extended timescales required for materials testing, validation and qualification the programme was launched with Phase 1 comprising a conceptual feasibility study (Phase 1A) and an investigation of materials property <b>requirements</b> (<b>Phase</b> 1B).|$|E
50|$|As {{part of the}} <b>requirements</b> <b>phase,</b> the {{reliability}} engineer develops a test strategy with the customer. The test strategy makes trade-offs between the needs of {{the reliability}} organization, which wants as much data as possible, and constraints such as cost, schedule and available resources. Test plans and procedures are developed for each reliability test, and results are documented.|$|E
50|$|The <b>requirements</b> {{discovery}} <b>phase</b> {{consists of}} several sub-activities.|$|R
40|$|Aspectual reuse is {{the concept}} of {{software}} reuse of aspect oriented software artifacts. Reuse is a concept in which we classify and retrieve the software components / artifacts as per the requirement. To implement software reuse one must start with reuse from the feasibility study till maintenance in the SDLC. The <b>requirement</b> <b>phase</b> in case of SDLC contains only a document. Which is written in simply a natural language. Now the main problem is how to use these document, extract aspects, find crosscutting, tangling etc. classify and then retrieve them. Here in this paper we represent a model how to implement Aspectual reuse in <b>Requirement</b> <b>phase</b> that is to extract aspects from requirement document that is SRS, store them in repository, classify and then retrieve the repository based upon the requirement in the same or the next project...|$|R
5000|$|... and the <b>requirement</b> that <b>phase</b> velocity, v, be {{constant}} at all frequencies.|$|R
50|$|Information systems {{security}} {{begins with}} incorporating security into the requirements process for any new application or system enhancement. Security {{should be designed}} into the system from the beginning. Security requirements are presented to the vendor during the <b>requirements</b> <b>phase</b> of a product purchase. Formal testing {{should be done to}} determine whether the product meets the required security specifications prior to purchasing the product.|$|E
5000|$|The Bus Matrix defines {{part of the}} Data Warehouse Bus Architecture and is an {{output of}} the Business <b>Requirements</b> <b>phase</b> in The Kimball Lifecycle. It is applied in the {{following}} phases of dimensional modeling {{and development of the}} Data Warehouse [...] The matrix can be categorized as a hybrid model, being part technical design tool, part project management tool and part communication tool ...|$|E
50|$|Requirements {{are prone}} to issues of ambiguity, incompleteness, and inconsistency. Techniques such as {{rigorous}} inspection {{have been shown to}} help deal with these issues. Ambiguities, incompleteness, and inconsistencies that can be resolved in the <b>requirements</b> <b>phase</b> typically cost orders of magnitude less to correct than when these same issues are found in later stages of product development. Requirements analysis strives to address these issues.|$|E
40|$|The growing {{importance}} of the <b>Requirements</b> Engineering <b>phase</b> in global software product development {{gives rise to the}} need to define process models suited for this phase. This paper describes a process model, now under development, that we believe will solve some of the problems detected in the earlier process models proposed for the <b>Requirements</b> Engineering <b>phase.</b> 1...|$|R
40|$|Abstract. This paper {{focuses on}} in-process project {{measurement}} in the <b>requirements</b> definition <b>phase</b> based on progress with standardization of this phase. The authors have verified {{the utility of}} in-process project measurement in a real mid-scale multi-vendor distributed project. This trial was successful, but limited to {{a part of the}} total development process. The project measurement target was limited to later processes such as the coding and testing phases where the output products were easy to acquire. The <b>requirements</b> definition <b>phase</b> where process and product were not standardized was difficult to measure. However, a newly provided governmental process guideline standardizes the process and product for the <b>requirements</b> definition <b>phase,</b> and the authors had an opportunity to measure such a requirements definition effort. This paper presents an empirical study of in-process project measurement in the standardized <b>requirements</b> definition <b>phase,</b> verifies the usefulness of this measurement for project management, and reveals the possibility of creating a new software metrics field using these measurements...|$|R
40|$|Eliciting/gathering {{information}} from the customers in <b>requirement</b> <b>phase</b> is the most crucial task {{in the development of}} the software development process, because this phase builds the base for the success or failure of any software product. Requirements specification process highly depends on the knowledge and mental abilities of the customers. In this paper, we are proposing a cognitive requirement specification model based on the cognitive classification of customers...|$|R
50|$|Proponents of {{waterfall}} model argue that {{time spent in}} designing is a worthwhile investment, {{with the hope that}} less time and effort will be spent fixing a bug {{in the early stages of}} a software product's lifecycle than when that same bug is found and must be fixed later. That is, it is much easier to fix a requirements bug in the <b>requirements</b> <b>phase</b> than to fix that same bug in the implementation phase, as to fix a requirements bug in the implementation phase requires scrapping at least some of the implementation and design work which has already been completed.|$|E
5000|$|...transparency (due {{process is}} public, and all {{technical}} discussions, meeting minutes, are archived and referencable in decision making)*relevance (new standardization is started upon due {{analysis of the}} market needs, including <b>requirements</b> <b>phase,</b> e.g. accessibility, multi-linguism)*openness (anybody can participate, and everybody does: industry, individual, public, government bodies, academia, on a worldwide scale)*impartiality and consensus (guaranteed fairness by {{the process and the}} neutral hosting of the W3C organization, with equal weight for each participant)*availability (free access to the standard text, both during development, at final stage, and for translations, and assurance that core Web and Internet technologies can be implemented Royalty-Free)*maintenance (ongoing process for testing, errata, revision, permanent access, validation, etc.) ...|$|E
5000|$|One {{should always}} {{consider}} that in normal software development the requirements define a fixed [...] "contract" [...] of the functionality {{that should be}} created. For instance the user story in a Scrum development team should also be fixed before the user story can be developed during a sprint. This {{is the same for}} SPADE projects. However when the requirements or the user stories are ready to be developed, the sprint will be performed by SPADE and this will take only a couple of minutes. This has resulted in the tendency to move the <b>requirements</b> <b>phase</b> (the creation of the user stories) to the sprint. This is therefore considered to be a bad practice in both normal Agile development as well as Agile development using SPADE.|$|E
25|$|The {{first phase}} of the work will be {{completed}} early next year, with all upgrades conforming to UK Visas and Immigration <b>requirements.</b> <b>Phases</b> two and three will then involve additions to the international arrivals hall, centring on improving its passport control and baggage reclaim facilities as well as increasing floor space. A separate £2million project to transform the terminal forecourt at Aberdeen Airport got underway in July 2008 and was completed that autumn.|$|R
30|$|Due to {{enhancement}} {{in security}} problems for e-learning systems (Hecker 2008), {{it is essential}} that security concerns to be addressed in early stages of system development cycle (Jalal et al. 2008). Various e-learning systems are designed which are based on formal techniques and provides threat modeling only in <b>requirement</b> <b>phase</b> but not in design and analysis phase of existing system. Due to this there will be no guarantee that design vulnerabilities of system can be removed easily.|$|R
30|$|Goal {{models are}} {{the usual way}} used to express {{requirements}} models for agent based systems (e.g. [16, 33]). Supported by the domain ontology, an early <b>requirement</b> <b>phase</b> can generate a high level description of system goals (and roles) and a high level conceptual {{description of the system}} (shown as conceptual models in Fig. 1). This description includes contextual description of the environment of the system (typical agent oriented models that would be included here may include organizational models and environmental models).|$|R
40|$|Abstract. The {{importance}} of the <b>requirements</b> <b>phase</b> is recognized by academics and by industry. Many methods for eliciting and specifying requirements have been proposed, such as up-front specification, formal specification, and prototyping, but there are few empirical studies that {{study the effects of}} these activities on the later phases of the software life cycle. This paper surveys multiple empirical studies on different activities performed during the <b>requirements</b> <b>phase</b> and studies their impact on downstream development...|$|E
40|$|<b>Requirements</b> <b>phase</b> {{acts as a}} {{foundation}} stone for ensuring {{the success of any}} software development process. Over the year, researchers have proposed various techniques/tools for the different activities of the <b>requirements</b> <b>phase</b> of SDLC, but at the same time, there are certainly new research questions and issues too. One of the prominent issues is the maximum human intervention in the <b>requirements</b> <b>phase</b> due to being a conceptual phase of SDLC. Research studies reveal that Artificial Intelligence (AI) techniques {{have been found to be}} a good solution to minimize the human intervention by offering some tools / techniques to automate certain processes up to some extent. In this paper, our aim is to highlight the significant contributions in the related area/s and to identify future research directions, based on the published work. The research is considered with respect to AI techniques developed to address specific requirement tasks, such as elicitation, analysis and modeling etc...|$|E
30|$|The flow {{expressions}} {{could be}} defined {{taking in consideration}} the business rules {{of the system that}} were defined during the <b>requirements</b> <b>phase.</b> Therefore, the software engineer should analyze the requirements to determine the execution order of the tasks in the system, their optionality and multiplicity.|$|E
40|$|The {{starting}} point of Sub-task 2 is to document the currently anticipated requirements for the CLIC crab cavity system. This milestone concerns completion of the basic specifications for the CLIC crab cavity system. This comprises kick, power <b>requirement,</b> <b>phase</b> and amplitude stability, technology choice, and RF layout. The wakefield calculations of a baseline CLIC cavity {{will be used to}} estimate the required damping of the higher order modes as well as other special modes in crab cavities (the lower and same order modes) ...|$|R
40|$|This paper {{discusses}} a model-based {{approach to}} test software requirements in agile development processes. The {{use of models}} as central development artifact needs {{to be added to}} the portfolio of software engineering techniques, to further increase efficiency and flexibility of the development beginning already early in the <b>requirements</b> definition <b>phase.</b> Testing <b>requirements</b> is one of the most important techniques to give feedback and to increase the quality of the result. Therefore testing of artifacts should be introduced as early as possible, even in the <b>requirements</b> definition <b>phase...</b>|$|R
50|$|Any {{inconsistencies}} between requirements or incompleteness {{of these}} requirements {{will lead to}} re-entry of the <b>requirement</b> discovery <b>phase,</b> to discover further information and refine existing but incomplete information.|$|R
40|$|The {{importance}} and real potential {{of security in}} Requirements Engineering (RE) is now being well recognized. The inclusion of security controls and measures during the <b>requirements</b> <b>phase</b> helps to design, implement, develop and maintain secure and cost effective software. Security testing {{is one of the}} prominent techniques to reveal defects in the requirements specification. The requirement phase is the foremost phase to integrate security into software development process. In this paper, we review current scenario of security testing in <b>requirements</b> <b>phase</b> and try to identify the major research directions, based on the related published work. Researcher/s can select any of the area and start the investigation in the area. In this way, this work may be useful for entry level researchers in the concerned area/s...|$|E
40|$|The <b>requirements</b> <b>phase</b> of {{information}} systems development {{is arguably the most}} organizationally dependent phase and as such it could be contended that the methods used in this phase ought to explicitly address organizational issues. However the authors would maintain that there is a weakness in many of the methods that are employed in requirements engineering in that they arc not explicitly embedded within any social scientific perspective. We argue that such a perspective would enable the systems developer to address organizational contexts and to engage with users (social actors) {{in such a way that}} it may be possible to find out about their social situations and as a consequence better inform the systems development process. In this paper we present the arguments for an explicit organizational perspective in the <b>requirements</b> <b>phase</b> {{of information}} systems development. We illustrate the argument through the presentation of action case studies in which one of the authors intervened in two situations with an explicit sociological perspective and analysis methods more commonly associated with qualitative social science methods. We conclude that there is an imperative need for those involved in the <b>requirements</b> <b>phase</b> to be explicit in their assumptions about organizations and critically reflective about the methods they use if they wish to understand the domain in which they operate...|$|E
40|$|Today’s {{business}} {{is very much}} dependent on the information systems. Computer networks have transferred our life into a fast and comfortable one {{but at the same}} time, it has posed various threats to the existing information system due to open accessibility. Any information asset, when connected to the outside world, is vulnerable to attacks. The attacks are mainly caused by threats that have the potential to exploit vulnerabilities. Any type of damage to these assets causes risk and {{it is one of the}} most important factors to the organization. The risk of malicious attacks to the software security has considerably gone up and to prevent such risk is very necessary. The maxim ‘sooner is better’ has become the order of the day. Hence, this study was undertaken in view of the significance of risk assessment in the <b>requirements</b> <b>phase</b> of SDLC. In the absence of any roadmap/process/framework, in this paper, we hereby propose Risk Assessment Framework (RAF) for assessing the risk in the <b>requirements</b> <b>phase</b> itself along with validation results. This framework has three major components: nine security policies checklists, weightage for the attributes of each policy and quantified risk estimation. Such a framework may prove to be relevant at mitigation of security vulnerabilities, right from the beginning i. e. <b>requirements</b> <b>phase</b> and lead to considerable reduction of cost in terms of software security assurance...|$|E
40|$|AbstractThe DoD Architecture Framework (DoDAF) {{provides}} the guidance and rules for developing, representing, and understanding architectures {{based on a}} common denominator across DoD, Joint, and multinational boundaries. In this paper, the process of DoDAF development is brought forward based the Activity-based Methodology (ABM). Information systems architecture development should consist of five steps, such as Planning and Design Phase, Operational Analysis <b>Phase,</b> <b>Requirements</b> Analysis <b>Phase,</b> Function Analysis Phase, Physical Synthesis Phase...|$|R
40|$|Abstract: This paper {{discusses}} a model-based {{approach to}} validate software requirements in agile development processes by simulation {{and in particular}} automated testing. The use of models as central development artifact needs {{to be added to}} the portfolio of software engineering techniques, to further increase efficiency and flexibility of the development beginning already early in the <b>requirements</b> definition <b>phase.</b> Testing <b>requirements</b> are some of the most important techniques to give feedback and to increase the quality of the result. Therefore testing of artifacts should be introduced as early as possible, even in the <b>requirements</b> definition <b>phase...</b>|$|R
40|$|Abstract. This {{position}} paper proposes a user centered approach {{for the design}} and the evaluation of adaptive systems. A list of less common, but useful HCI techniques will be presented. After having introduced the peculiarities that characterize the evaluation of adaptive systems, the paper describes those evaluation methodologies following the temporal phases of evaluation, according to a user-centered approach. Three <b>phases</b> are distinguished: <b>requirement</b> <b>phase,</b> preliminary evaluation phase, final evaluation phase. For every phase, appropriate techniques are described by giving practical examples of their application in the adaptive web. ...|$|R
