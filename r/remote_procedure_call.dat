514|3860|Public
5|$|CAPS {{entreprise}} and Pathscale {{are also}} coordinating {{their effort to}} make hybrid multi-core parallel programming (HMPP) directives an open standard called OpenHMPP. The OpenHMPP directive-based programming model offers a syntax to efficiently offload computations on hardware accelerators and to optimize data movement to/from the hardware memory. OpenHMPP directives describe <b>remote</b> <b>procedure</b> <b>call</b> (RPC) on an accelerator device (e.g. GPU) or more generally a set of cores. The directives annotate C or Fortran codes to describe two sets of functionalities: the offloading of procedures (denoted codelets) onto a remote device and the optimization of data transfers between the CPU main memory and the accelerator memory.|$|E
25|$|Network Services: Give {{access to}} the various {{networking}} abilities of the operating system. Its subcomponents include NetBIOS, Winsock, NetDDE, <b>remote</b> <b>procedure</b> <b>call</b> (RPC) and many more. This component resides in netapi32.dll on 32-bit Windows.|$|E
25|$|In late 1981 {{and early}} 1982 Sassenrath took an {{academic}} leave to do atmospheric physics research for National Science Foundation at Amundsenâ€“Scott South Pole Station. Upon returning, Sassenrath {{reached an agreement}} with HP to pursue independent research into new areas of computing, including graphical user interfaces and <b>remote</b> <b>procedure</b> <b>call</b> methods of distributed computing.|$|E
5000|$|Support for interprocess {{communication}} and <b>remote</b> <b>procedure</b> <b>calls.</b>|$|R
5000|$|Consider an {{expression}} involving conventional <b>remote</b> <b>procedure</b> <b>calls,</b> such as: ...|$|R
5000|$|Routed RPC: {{supports}} routed (not only point-to-point) <b>Remote</b> <b>Procedure</b> <b>Calls.</b>|$|R
25|$|JSON-RPC is a <b>remote</b> <b>procedure</b> <b>call</b> (RPC) {{protocol}} {{built on}} JSON, {{as a replacement}} for XML-RPC or SOAP. It is a simple protocol that defines only a handful of data types and commands. JSON-RPC lets a system send notifications (information to the server that does not require a response) and multiple calls to the server that can be answered out of order.|$|E
25|$|Among PARC's {{distinguished}} {{researchers were}} three Turing Award winners: Butler W. Lampson (1992), Alan Kay (2003), and Charles P. Thacker (2009). The Association for Computing Machinery (ACM) Software System Award recognized the Alto system in 1984, Smalltalk in 1987, InterLisp in 1992, and the <b>remote</b> <b>procedure</b> <b>call</b> in 1994. Lampson, Kay, Bob Taylor, and Charles P. Thacker received the National Academy of Engineering's prestigious Charles Stark Draper Prize in 2004 {{for their work}} on the Alto.|$|E
25|$|Another {{solution}} to the library issue comes from using completely separate executables (often in some lightweight form) and calling them using a <b>remote</b> <b>procedure</b> <b>call</b> (RPC) over a network to another computer. This approach maximizes operating system re-use: the code needed to support the library is the same code being used to provide application support and security for every other program. Additionally, such systems do not require the library to exist on the same machine, but can forward the requests over the network.|$|E
5000|$|... saga::rpc - {{interface}} for <b>remote</b> <b>procedure</b> <b>calls</b> {{client and}} servers ...|$|R
5000|$|RPC: {{supports}} <b>Remote</b> <b>Procedure</b> <b>Calls</b> {{out of the}} box (no extension required).|$|R
5000|$|Key/value pairs (encoded in HTTP GET query strings, {{to perform}} <b>remote</b> <b>procedure</b> <b>calls)</b> ...|$|R
25|$|The {{three top}} layers in the OSI model, i.e. the {{application}} layer, the presentation layer and the session layer, are not distinguished separately in the TCP/IP model which only has an application layer above the transport layer. While some pure OSI protocol applications, such as X.400, also combined them, {{there is no}} requirement that a TCP/IP protocol stack must impose monolithic architecture above the transport layer. For example, the NFS application protocol runs over the eXternal Data Representation (XDR) presentation protocol, which, in turn, runs over a protocol called <b>Remote</b> <b>Procedure</b> <b>Call</b> (RPC). RPC provides reliable record transmission, so it can safely use the best-effort UDP transport.|$|E
5000|$|GridRPC: Grid <b>Remote</b> <b>Procedure</b> <b>Call</b> designs OGF {{recommendations}} for a grid-enabled, <b>remote</b> <b>procedure</b> <b>call</b> (RPC) mechanism.|$|E
50|$|Open Network Computing (ONC) <b>Remote</b> <b>Procedure</b> <b>Call</b> (RPC) is a <b>remote</b> <b>procedure</b> <b>call</b> system. ONC was {{originally}} developed by Sun Microsystems in the 1980s {{as part of}} their Network File System project, and is sometimes referred to as Sun RPC.|$|E
5000|$|The Origin of Concurrent Programming: From Semaphores to <b>Remote</b> <b>Procedure</b> <b>Calls</b> (editor, 2002, [...] ) ...|$|R
5000|$|The Messages layer {{provides}} {{a mechanism for}} encoding <b>remote</b> <b>procedure</b> <b>calls</b> (RPCs) and notifications.|$|R
5000|$|... beside data {{exchange}} via [...] "channels", MIRA supports <b>Remote</b> <b>Procedure</b> <b>Calls</b> (RPC) and <b>Remote</b> Method Invokation.|$|R
5000|$|Open Network Computing <b>Remote</b> <b>Procedure</b> <b>Call,</b> by Sun Microsystems ...|$|E
5000|$|Representational state {{transfer}} (REST) versus <b>remote</b> <b>procedure</b> <b>call</b> (RPC) ...|$|E
5000|$|... #Subtitle level 3: Distributed {{computing}} and <b>remote</b> <b>procedure</b> <b>call</b> ...|$|E
5000|$|<b>Remote</b> <b>procedure</b> <b>calls</b> used {{in modern}} {{operating}} systems trace their roots {{back to the}} RC 4000 multiprogramming system, which used a request-response communication protocol for process synchronization. The idea of treating network operations as <b>remote</b> <b>procedure</b> <b>calls</b> goes {{back at least to}} the 1970s in early ARPANET documents. In 1978, Per Brinch Hansen proposed Distributed Processes, a language for distributed computing based on [...] "external requests" [...] consisting of <b>procedure</b> <b>calls</b> between processes.|$|R
2500|$|Brinch Hansen, Per: The Origin of Concurrent Programming: From Semaphores to <b>Remote</b> <b>Procedure</b> <b>Calls.</b> (Springer, 2002, 534pp) ...|$|R
50|$|Message queues, <b>remote</b> <b>procedure</b> <b>calls,</b> notifications, semaphores, {{and lock}} sets. (Mach semaphores and lock sets are not supported).|$|R
5000|$|XML-RPC is a <b>remote</b> <b>procedure</b> <b>call</b> (RPC) {{protocol}} {{which uses}} XML to encode its calls and HTTP as a transport mechanism. [...] "XML-RPC" [...] also refers generically {{to the use}} of XML for <b>remote</b> <b>procedure</b> <b>call,</b> independently of the specific protocol. This article is about the protocol named [...] "XML-RPC".|$|E
5000|$|<b>Remote</b> <b>Procedure</b> <b>Call</b> - Almost all network {{operations}} were performed via a primitive <b>remote</b> <b>procedure</b> <b>call</b> system, either by passing a command line direct to the file server, or by passing an operating system call parameter block. The logon command *I AM was processed by passing the whole command line and reading back the result code.|$|E
5000|$|I/O {{processor}} interconnection: <b>remote</b> <b>procedure</b> <b>call</b> over {{a serial}} link, DMA controller for bulk transfer ...|$|E
50|$|BOINC can be {{controlled}} remotely by <b>remote</b> <b>procedure</b> <b>calls</b> (RPC), from the command line, and from the BOINC Account Manager.|$|R
50|$|XML-RPC: Apache XML-RPC is a Java {{implementation}} of XML-RPC, a protocol that uses XML over HTTP to implement <b>remote</b> <b>procedure</b> <b>calls.</b>|$|R
5000|$|The [...] package {{provides}} Java {{remote method invocation}} {{to support}} <b>remote</b> <b>procedure</b> <b>calls</b> between two java applications running in different JVMs.|$|R
5000|$|Also, Java API for XML Messaging {{has several}} {{advantages}} over <b>Remote</b> <b>Procedure</b> <b>Call</b> {{such as the}} following: ...|$|E
5000|$|Web Processing Service {{which allows}} {{publishing}} {{any kind of}} algorithm through an advanced <b>remote</b> <b>procedure</b> <b>call</b> style protocol ...|$|E
50|$|Connects a set {{of clients}} to {{a set of}} services. This is a <b>remote</b> <b>procedure</b> <b>call</b> and task {{distribution}} pattern.|$|E
50|$|Alice's <b>remote</b> <b>procedure</b> <b>calling</b> {{depends on}} the virtual machine, because it may send code to be {{computed}} from one computer to another.|$|R
5000|$|AIDL: Java-based, for Android; {{supports}} {{local and}} <b>remote</b> <b>procedure</b> <b>calls,</b> {{can be accessed}} from native applications by calling through Java Native Interface (JNI) ...|$|R
50|$|GWT {{emphasizes}} reusable {{approaches to}} common web development tasks, namely asynchronous <b>remote</b> <b>procedure</b> <b>calls,</b> history management, bookmarking, UI abstraction, internationalization, and cross-browser portability.|$|R
