24|41|Public
50|$|Servoy {{also offers}} a <b>runtime</b> <b>version</b> that allows the {{creation}} of standalone Servoy applications.|$|E
5000|$|The <b>runtime</b> <b>version</b> {{allows users}} to view, edit and delete data, along with running queries, forms, reports, macros and VBA module code. The <b>runtime</b> <b>version</b> does not allow users to change the design of Microsoft Access tables, queries, forms, reports, macros or module code. The runtime {{versions}} are similar to their corresponding full version of Access and usually compatible with earlier versions; for example Access Runtime 2010 allows a user to run an Access application made with the 2010 version as well as 2007 through 2000. Due to deprecated features in Access 2013, its <b>runtime</b> <b>version</b> is also unable to support those older features. During development one can simulate the runtime environment from the fully functional version by using the [...] command line option.|$|E
5000|$|Mathematica Player Pro is a <b>runtime</b> <b>version</b> of Mathematica {{that will}} run any Mathematica {{application}} {{but does not}} allow editing or creation of the code.|$|E
50|$|Microsoft offers free <b>runtime</b> <b>versions</b> of Microsoft Access {{which allow}} users {{to run an}} Access desktop {{application}} without needing to purchase or install a retail version of Microsoft Access. This allows Access developers to create databases that can be freely distributed to an unlimited number of end-users. These <b>runtime</b> <b>versions</b> of Access 2007 and later can be downloaded for free from Microsoft. The <b>runtime</b> <b>versions</b> for Access 2003 and earlier {{were part of the}} Office Developer Extensions/Toolkit and required a separate purchase.|$|R
50|$|Authorware {{started as}} a system aimed at {{addressing}} the problems in TUTOR. Originally titled Course of Action (CoA), it was a Macintosh-only program, but produced runtime programs for both the Mac and DOS. Authorware came later and produced DOS <b>runtime</b> <b>versions</b> until {{the release of the}} first Microsoft Windows version.|$|R
50|$|Open Workbench runs under Microsoft Windows 2000, XP, Vista, and 7. It {{requires}} Java <b>Runtime</b> Environment <b>version</b> 1.3.1 or later.|$|R
5000|$|... int? i = null;object o = i;if (o == null) System.Console.WriteLine("Correct {{behaviour}} - <b>runtime</b> <b>version</b> from September 2005 or later");else System.Console.WriteLine("Incorrect behaviour - pre-release runtime (from before September 2005)"); ...|$|E
50|$|Some non-Tandy {{software}} used DeskMate {{to provide}} the user interface, and provided a <b>runtime</b> <b>version</b> of the operating environment for those without it. Examples included Activision's The Music Studio, and a version of Lotus 1-2-3.|$|E
50|$|LispWorks is a {{commercial}} implementation and Integrated Development Environment for the Common Lisp programming language. The software runs on Microsoft Windows, Mac OS X (Intel), Linux (ARM and Intel), FreeBSD, Solaris (x86/x64, SPARC) and AIX. A <b>runtime</b> <b>version</b> for Android and IOS is available.|$|E
50|$|Xenko is a 2D and 3D {{cross-platform}} game engine {{developed by}} Silicon Studio. It {{can be used}} to create video games for PC and mobile devices, and virtual reality (in the commercial <b>version).</b> <b>Runtime</b> of <b>version</b> 1 is licensed under the GNU GPLv3, but an alternative proprietary license can be used as well. Version 2 is available under a proprietary license only.|$|R
5000|$|Silverlight 2 - Included {{a version}} of the [...]NET Framework, {{implemented}} the same full Common Language <b>Runtime</b> (CLR) <b>version</b> as [...]NET Framework 3.0; so it can execute programs written in any [...]NET language.|$|R
5000|$|Java Cryptography Extension, {{integrated}} in the Java <b>Runtime</b> Environment since <b>version</b> 1.4.2 ...|$|R
50|$|Video for Windows {{was first}} {{introduced}} in November 1992. It was developed {{as a reaction to}} Apple Computer's QuickTime technology, which added digital video to the Macintosh platform. Costing around $200, the product included editing and encoding programs for use with video input boards. A <b>runtime</b> <b>version</b> for viewing videos only was also made available as a free add-on to Windows 3.1 and Windows 3.11; it then became an integral component of Windows 95 and later.|$|E
5000|$|In May 1986, Odesta {{released}} Double Helix for $495. The main {{new feature}} set {{allowed for the}} construction of custom menus and menu bars, resulting in [...] "stand-alone" [...] applications. In comparison, the original Helix produced applications that were clearly running within Helix, much as a Microsoft Word document is clearly running [...] "inside Word". Released {{as a part of a}} larger suite of software, the Helix suite also included a stand-alone <b>runtime</b> <b>version</b> known as RunTime Helix which would allow users to run Double Helix applications without the full version installed, as well as MultiUser Helix which operated in a client-server fashion.|$|E
5000|$|By {{purchasing}} license packs, {{the database}} gained a multi-user capability in five-user increments. This included a sophisticated (for a DOS application in the day) record-level locking scheme. To work properly, the multi-user database {{had to be}} on a file server with all users accessing the database through a network. It was not true client-server because processing occurred in the clients. The configuration file expanded to allow language support and user-defined re-mapping of characters. For example, German characters such as the letter [...] "รถ" [...] (o with an umlaut) could be remapped to the string oe. There were character fold tables and sort orders could be adjusted by the user. An [...] "unlimited number of licenses" [...] <b>runtime</b> <b>version</b> was offered, allowing developers to sell applications and include the run-time R:Base engine.|$|E
50|$|The {{original}} Identicon source package 0.1 was server-side Java. Version 0.2 was cleaned up, {{added some}} documentation, fixed a color bug, added a cache, and a <b>runtime</b> jar. <b>Version</b> 0.3 included client-side Canvas tags. The current version is 0.5.|$|R
5000|$|The device can {{be updated}} to Android 5.0.1 Lollipop in many regions, {{bringing}} a new, refined UI, and new <b>runtime.</b> This <b>version</b> {{has been criticized}} for poor battery life. A further update to 5.1.1 is available, depending on the wireless carrier.|$|R
50|$|Additionally, it {{includes}} {{tools such as}} a minimal Web server, command line and GUI management tools (can be run as applets), {{and a number of}} demonstration examples. It can run on Java <b>runtimes</b> from <b>version</b> 1.1 upwards, including free Java implementations such as Kaffe.|$|R
50|$|Video for Windows {{was first}} {{introduced}} in November 1992 {{as a reaction to}} Apple Computer's QuickTime technology which added digital video to Macintosh. Costing around $200, the software included editing and encoding programs for use with video input boards. A <b>runtime</b> <b>version</b> for viewing videos only was also made available. Originally released as a free add-on to Windows 3.1 and Windows 3.11, it then became an integral component of Windows 95 and later. Like QuickTime there were three components in Video for Windows. The technology introduced a file format designed to store digital video, Audio Video Interleave (AVI). The technology provided an application programming interface that allowed Windows software developers to add the ability to play or manipulate digital video to their own applications. Lastly, it included a suite of software for playing and manipulating digital video.|$|E
5000|$|Microsoft Access {{applications}} can adopt a split-database architecture. The single database can {{be divided}} into a separate [...] "back-end" [...] file that contains the data tables (shared on a file server) and a [...] "front-end" [...] (containing the application's objects such as queries, forms, reports, macros, and modules). The [...] "front-end" [...] Access application is distributed to each user's desktop and linked to the shared database. Using this approach, each user has a copy of Microsoft Access (or the <b>runtime</b> <b>version)</b> installed on their machine along with their application database. This reduces network traffic since the application is not retrieved for each use. The [...] "front-end" [...] database can still contain local tables for storing a user's settings or temporary data. This split-database design also allows development of the application independent of the data. One disadvantage is that users may make various changes to their own local copy of the application and this makes it hard to manage version control. When a new version is ready, the front-end database is replaced without impacting the data database. Microsoft Access has two built-in utilities, Database Splitter and Linked Table Manager, to facilitate this architecture.|$|E
40|$|This {{paper is}} a {{preliminary}} report of our work currently in progress. Our goal {{is to develop a}} mechanism that allows computer programs, which are running, to evolve and change their behavior without stopping their execution. Our approach is to extend dynamic linking libraries (DLLs) to support runtime software evolution. More precisely, we have included a <b>runtime</b> <b>version</b> management mechanism into DLLs to support runtime software evolution. In this paper, I will first show the outline of our <b>runtime</b> <b>version</b> management mechanism of DLLs. And then I will show our ways of implementing the <b>runtime</b> <b>version</b> management mechanism of DLLs. I will also briefly summarize {{the advantages and disadvantages of}} our approaches...|$|E
50|$|GetFEM++ is {{released}} under the GNU Lesser General Public License, version 3 or later, {{along with the}} GCC <b>Runtime</b> Library Exception, <b>version</b> 3.1 or later.|$|R
5000|$|The OpenAjax hub is a {{small set}} of JavaScript {{technologies}} that addresses critical Ajax <b>runtime</b> interoperability requirements. <b>Version</b> 1.0 of the OpenAjax Hub has the following features: ...|$|R
5000|$|Version 5.0.0 was {{released}} on August 11, 2012 and is targeted at [...]NET framework 4.5.Also, this version is available for [...]Net framework 4, but without any <b>runtime</b> advantages over <b>version</b> 4.|$|R
40|$|Glahn, C. (2011). Proxy {{configuration}} for apache server running IMS-LD <b>Runtime</b> (<b>Version</b> 1. 0) [Computer software]. Heerlen, The Netherlands: Open Universiteit in the Netherlands. The configuration {{sets up a}} "Reverse Proxy" {{that allows}} to use a {{out of the box}} runtime system and integrate it into another production system. The Reverse Proxy forwards all requests to the runtime as if they were made directly to the system. A side effect is that the underlying JBOSS system will become invisible to the end users...|$|E
40|$|This {{paper will}} give a brief {{overview}} of my approach for <b>runtime</b> <b>version</b> management of objects for software evolution. This paper is organized as follows. In the next section, I will briefly describe the notion of versions of objects. Three types of versions: variations, revisions, and mirrors will be introduced. In the third section, I will describe the mechanism for the runtime evolution of these three types of versions. I implemented my version management mechanism for Java objects. Final section will conclude this paper with some discussions to be considered in the future...|$|E
40|$|Software {{systems have}} become playing {{more and more}} {{important}} roles in human daily life. Even a temporary stop of such software systems gives inconvenience and/or damage to human activities. The primary goal of my research {{is to develop a}} mechanism that allows software engineers to fix, enhance, and maintain such software systems without stopping the execution. My approach towards the goal is based on the version management of objects. DVMS is a <b>runtime</b> <b>version</b> management system that allows objects in a running program to be replaced with new versions that include bug fixes and enhancements. Using DVMS, new versions of an object can be created without loosing the state of older versions, and versions of an object can be switched in a consistent manner with versions of other related objects...|$|E
5000|$|Equinox {{began as}} a project to replace the {{original}} Eclipse plug-in <b>runtime</b> in <b>version</b> 3.0 of Eclipse (c. 2004). The open source project was seeded with code donated by [...] It was further developed {{to meet the needs}} of the Eclipse community. The adaptations were made into the OSGi specification process, with many being incorporated in the R4 release of the OSGi framework specification. Since then, Equinox has been the reference implementation for the OSGi framework specification.|$|R
50|$|YNAB 3 (released December 2009) ran on {{multiple}} platforms using the Adobe AIR <b>runtime,</b> and previous <b>versions</b> included a Microsoft Excel/OpenOffice.org Calc spreadsheet implementation (dubbed YNAB Basic and discontinued in July 2009) and a Windows-only executable {{under the name}} YNAB Pro (discontinued in December 2009).|$|R
40|$|Release Notes for GeNN v 2. 2. 2 This release {{includes}} minor {{new features}} and several bug fixes for certain system configurations. User Side Changes Added {{support for the}} new version (2. 0) of the Brian simulation package for Python. Added a mechanism for setting user-defined flags for the C++ compiler and NVCC compiler, via GENN_PREFERENCES. Bug fixes: Fixed a problem with atomicAdd() redefinitions on certain CUDA <b>runtime</b> <b>versions</b> and GPU configurations. Fixed an incorrect bracket placement bug in code generation for certain models. Fixed an incorrect neuron group indexing bug in the learning kernel, for certain models. The dry-run compile phase now stores temporary files in the current directory, rather than the temp directory, solving issues o n some systems. The LINK_FLAGS and INCLUDE_FLAGS in the common windows makefile include 'makefile_commin_win. mk' are now appended to, rathe r than being overwritten, fixing issues with custom user makefiles on Windows. NB: If you are migrating from release 2. 1 or earlier please refer to the release notes for Release 2. 2 and 2. 2. 1 as {{there are a number}} of alterations you will need to implement for the migration. Please refer to the full documentation for further details, tutorials and complete code documentation...|$|R
40|$|AbstractโDesign-by-contract is a {{software}} engineering technology from the object-oriented world that exploits runtime assertions to define precise verifiable interface specifications with so-called invariants and pre- and post-conditions. This paper describes our idea of extending design-by-contract to support assertions dealing with platform and environment features essential in embedded systems like battery power, localization, or memory and CPU consumption to support variation of these on different deployment targets. While others {{have focused on}} contracts {{as a means for}} component-based design, i. e. for design time issues or dynamic service discovery, we suggest a <b>runtime</b> <b>version</b> to enhance system reliability and aim at an actual implementation. This paper motivates the approach, compares it to related work and sketches a possible implementation as well as an example application for mobile phones. F...|$|E
40|$|We {{describe}} CRITTER, {{a computer}} database program for managing research animals. We designed it especially for institutions which operate health surveillance plans, such as specific pathogen-free schemes. Because CRITTER {{can be used}} to record any type of test result in any species of animal, it can be customized to suit each institution and its management protocol. In addition to maintaining a current inventory of each individual animal and its location, the program retains historical information on those that have been removed from the colony. Output summaries are generated by selecting from a menu of standard reports or by designing a custom query. Although CRITTER has been designed for individual research establishments, it could be modified for use in area health surveillance programs. CRITTER operates on IBM compatible computers using a menu-driven, <b>runtime</b> <b>version</b> of Paradox...|$|E
40|$|CO and NO 2 {{measurements}} are {{of importance for}} the ventilation control of automobiles and other applications. For this purpose often semiconducting SnO 2 sensors were used. A well known disadvantage of SnO 2 sensors is the concurrent reaction of the oxidizing NO 2 and the reducing CO on the sensor surface, which causes a near zero sensor signal in presence of both gases in a certain range of mixtures. A second disadvantage of SnO 2 sensors are the long rise and decay times of the sensor signal. The combination of different SnO 2 sensors, operated at different temperatures and combined with a signal evaluation system based on a specially trained neural forward network (Artificial Neural Net - ANN) solves this problem. The <b>runtime</b> <b>version</b> of the neural net is a small program, compatible to micro controllers...|$|E
50|$|The {{film was}} {{released}} in the United States on DVD by Paramount Home Entertainment on 5 December 2006. The DVD includes: the original theatrical <b>version</b> (<b>runtime</b> 111 minutes); The Rise of The Conformist: The Story, the Cast featurette; Shadow and Light: Filming The Conformist featurette; The Conformist: Breaking New Ground featurette.|$|R
40|$|With {{multicore}} processors as {{the standard}} building block for high performance systems, parallel runtime systems need to provide excellent performance on shared memory, distributed memory, and hybrids. Conventional wisdom suggests that threads should {{be used as the}} runtime mechanism within shared memory, and two <b>runtime</b> <b>versions</b> for shared and distributed memory are often designed and implemented separately, retrofitting after the fact for hybrid systems. In this paper we consider the problem of implementing a runtime layer for Partitioned Global Address Space (PGAS) languages, which offer a uniform programming abstraction for hybrid machines. We present a new process-based shared memory runtime and compare it to our previous pthreads implementation. Both are integrated with the GASNet communication layer, and they can co-exist with one another. We evaluate the shared memory runtime approaches, showing that they interact in important and sometimes surprising ways with the communication layer. Using a set of microbenchmarks and application level benchmarks on an IBM BG/P, Cray XT, and InfiniBand cluster, we show that threads, processes and combinations of both are needed for maximum performance. Our new runtime shows speedups of over 60 % for application benchmarks and 100 % for collective communication benchmarks, when compared to the previous implementation. Our work primarily targets PGAS languages, but some of the lessons are relevant to other parallel runtime systems and libraries. 1...|$|R
5000|$|In [...]NET 4, Windows Workflow Foundation {{was greatly}} updated, with new {{features}} such as Data Contract Resolver, Flowchart, and other flow control activities added. Workflow in [...]NET 4 uses the SystemActivities namespace. Most notably, {{there is no longer}} a Workflow <b>Runtime</b> object in <b>version</b> 4; workflows are executed directly using WorkflowApplication or WorkflowInvoker instead.|$|R
