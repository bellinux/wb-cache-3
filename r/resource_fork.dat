76|39|Public
5|$|Pictures {{could also}} be cut from MacPaint and pasted into the <b>resource</b> <b>fork</b> of any {{application}} via ResEdit, allowing application internationalization.|$|E
25|$|On {{the other}} hand, these forks {{would provide a}} {{challenge}} to interoperability with other operating systems. In copying or transferring a Mac OS file to a non-Mac system, the default implementations would simply strip the file of its <b>resource</b> <b>fork.</b> Most data files contained only nonessential information in their <b>resource</b> <b>fork,</b> such as window size and location, but program files would be inoperative without their resources. This necessitated such encoding schemes as BinHex and MacBinary, which allowed a user to encode a dual-forked file into a single stream, or inversely take a single stream so-encoded and reconstitute it into a dual-forked file usable by Mac OS.|$|E
25|$|The {{power of}} HyperCard could be {{increased}} significantly {{through the use}} of external command and external function modules, more commonly termed XCMDs and XFCNs. These were code libraries packaged in a <b>resource</b> <b>fork</b> that integrated into either the system generally or the HyperTalk language specifically; this was an early example of the plug-in concept. Unlike conventional plug-ins, these did not require separate installation before they were available for use; they could be included in a stack, where they were directly available to scripts in that stack.|$|E
5000|$|As <b>resource</b> <b>forks</b> are {{supported}} {{only on the}} file systems HFS and HFS Plus, they cannot be used on operating systems which use other file systems. At present, HFS is supported only by the Macintosh operating system, which means that only machines running Mac OS can use <b>resource</b> <b>forks.</b> Even in a Mac OS system, <b>resource</b> <b>forks</b> cannot be used if the Unix File System has been installed. In the HFS Plus file system, which is currently the system most commonly used under Mac OS, settings {{can be made to}} allow other forks in addition to the data and <b>resource</b> <b>forks,</b> to create a [...] "multi-fork" [...] application. However, as forks can make it difficult to exchange files with other operating systems, this feature is not in common use. Even in OS X, <b>resource</b> <b>forks</b> are seldom used anymore.|$|R
5000|$|Until {{the advent}} of Mac OS X v10.4, the {{standard}} UNIX command line utilities in macOS (such as [...] and [...] ) did not respect <b>resource</b> <b>forks.</b> To copy files with <b>resource</b> <b>forks,</b> one had to use [...] or CpMac and MvMac.|$|R
50|$|<b>Resource</b> <b>forks</b> {{appear as}} the {{extended}} attribute com.apple.ResourceFork.|$|R
2500|$|Files in most file systems {{used with}} DOS, Windows, Unix, or other {{operating}} systems {{have only one}} [...] "fork". By contrast, MFS and HFS give files two different [...] "forks". The data fork contains {{the same sort of}} information as a file in other file systems, such as the text of a document or the bitmaps of an image file. The <b>resource</b> <b>fork</b> contains other structured data such as menu definitions, graphics, sounds, or code segments that would be incorporated into a program's file format on other systems. An executable file might consist only of resources (including code segments) with an empty data fork, while a data file might have only a data fork with no <b>resource</b> <b>fork.</b> A word processor file could contain its text in the data fork and styling information in the <b>resource</b> <b>fork,</b> so that an application which doesn’t recognize the styling information can still read the raw text.|$|E
2500|$|Prior to {{the advent}} of Mac OS X (now called macOS), the classic Mac OS system {{regarded}} the content of a file (the data fork) to be a text file when its <b>resource</b> <b>fork</b> indicated {{that the type of}} the file was [...] "TEXT". Lines of Macintosh text files are terminated with CR characters.|$|E
50|$|A <b>resource</b> <b>fork</b> stores {{information}} in a specific form, containing details such as icon bitmaps, the shapes of windows, definitions of menus and their contents, and application code (machine code). For example, a word processing file might store its text in the data fork, while storing any embedded images in the same file's <b>resource</b> <b>fork.</b> The <b>resource</b> <b>fork</b> is used mostly by executables, but every file is {{able to have a}} <b>resource</b> <b>fork.</b>|$|E
50|$|The {{complexity}} of programming with <b>resource</b> <b>forks</b> {{has led to}} compatibility problems when accessing other file systems via file sharing protocols such as AFP, SMB, NFS and FTP, when storing to non-HFS volumes, or when transmitting files to other systems in other ways (such as via email).The AFP protocol natively supports <b>Resource</b> <b>Forks,</b> and so <b>resource</b> <b>forks</b> are typically transmitted to these volumes as-is, and stored by the server transparently to clients. The SMB protocol supports a file metadata system similar to Macintosh forks known as Alternate Data Streams (ADSes hereafter). OS X did not support storing <b>resource</b> <b>forks</b> in ADSes on SMB volumes by default until OS X 10.6. In previous versions of the OS, including upgraded versions of 10.6, this feature can be enabled with a param change or by creating a special file.|$|R
50|$|These {{can then}} be {{manipulated}} with usual file system tools: because the support {{is built into the}} operating system, these <b>resource</b> <b>forks</b> will not show up as separate files, and all applications inherit support for <b>resource</b> <b>forks.</b> However, forks cannot be copied to file systems without support for forks, or transmitted over a channel that does not support forks. For interchange forks are generally instead stored as sidecar file.|$|R
50|$|Previously <b>resource</b> <b>forks</b> were {{accessed}} via the 'Resource Manager' API. This API is now deprecated.|$|R
50|$|As the <b>{{resource}}</b> <b>fork</b> can {{be edited}} with a resource editor such as ResEdit, {{it can be}} used to localize and customize software. In addition, most resource editors allow visual editing of data. In macOS, it is possible to use resources when developing an application. However, if the application may need to be used in UFS, it is also possible to configure it so that the entire <b>resource</b> <b>fork</b> is moved to the data fork, using the Raw Resource File setting. The integrated development environments distributed for free by Apple Inc., which include MPW and Apple Developer's Tools, include a compiler called Rez. This uses a dedicated language, also called Rez, which can be used to create a <b>resource</b> <b>fork</b> by compiling source code. A decompiler, DeRez, which can be used to change a <b>resource</b> <b>fork</b> back into Rez code is also included.|$|E
5000|$|UUTool uuencoded {{files and}} {{attached}} the [...]uu extension.However, UUTool {{was the first}} Macintosh program that encoded the data fork, <b>resource</b> <b>fork,</b> and finder information into one uuencoded file with the [...]mu extension. The format for this was to catenate the three pieces of file information and uniquely name the <b>resource</b> <b>fork</b> and finder info as files. This allowed for some interoperability on non-Macintosh platforms.|$|E
50|$|The <b>resource</b> <b>fork</b> of a file in a Macintosh {{file system}} stores an OSType {{identifier}} with each resource.|$|E
5000|$|Compatibility {{problems}} can arise because OS X will handle storage of <b>resource</b> <b>forks</b> differently, depending on OS X version, settings, and file system type. For example, on an SMB network {{with a mixture}} of 10.5 and 10.6 clients. A freshly installed 10.6 client will look for and store <b>resource</b> <b>forks</b> on an SMB volume in ADSes, but the 10.5 client will (by default) ignore ADSes and use AppleDouble format to handle forks. If a fileserver supports both AFP and NFS, then clients using NFS will store files in AppleDouble format, whereas AFP users will use AppleSingle format (<b>resource</b> <b>forks</b> are stored natively) [...] In those cases, compatibility can sometimes be maintained by forcing clients to use, or not use, AppleDouble format.|$|R
5000|$|Apple ISO 9660 Extensions adds {{support for}} classic Mac OS-specific and macOS-specific file {{characteristics}} such as <b>resource</b> <b>forks,</b> file backup date and more.|$|R
50|$|New Unix {{features}} — New {{versions of}} cp, mv, and rsync which support files with <b>resource</b> <b>forks.</b> Command-line support for features like the above-mentioned Spotlight are also included.|$|R
5000|$|The <b>resource</b> <b>fork</b> is {{implemented}} {{in all of}} the file systems used for system drives on the Macintosh (MFS, HFS and HFS Plus). The presence of a <b>resource</b> <b>fork</b> makes it easy to store a variety of additional information, such as allowing the system to display the correct icon for a file and open it without the need for a file extension in the file name. While access to the data fork works like file access on any other operating system — pick a file, pick a byte offset, read some data — access to the <b>resource</b> <b>fork</b> works more like extracting structured records from a database. (Microsoft Windows also has a concept of [...] "resources", but these are completely unrelated from resources in Mac OS.) ...|$|E
50|$|Additionally, NTFS {{can store}} infinite-length {{extended}} attributes {{in the form}} of alternate data streams (ADS), a type of <b>resource</b> <b>fork.</b>|$|E
5000|$|HexEdit: A binary editor, {{which in}} fact is {{normally}} used more for editing the data fork rather than the <b>resource</b> <b>fork.</b>|$|E
50|$|Future {{versions}} of CFS may include extensions to allow storingsystem specific attributes such as time fields,securitydescriptors, access control lists, <b>resource</b> <b>forks,</b> symboliclinks etc.. Developers with {{a need for}} these extensions should contactPismo Technic with requirements and/or suggestions.|$|R
5000|$|Currently, OS X {{supports}} <b>resource</b> <b>forks</b> on Windows SMB shares {{by creating}} a hidden file in the same directory with the data fork file, with the characters [...] "._" [...] {{at the beginning of}} the file name.|$|R
50|$|Many fileservers {{providing}} AFP support do not natively support <b>resource</b> <b>forks</b> {{on their}} local file systems. In those cases the forks may {{be stored in}} special ways, such as specially named files, special directories, or even Alternate Data Streams.|$|R
50|$|The <b>resource</b> <b>fork</b> is {{sometimes}} used {{to store the}} metadata of a file, although {{it can also be}} used for storing the actual data, {{as was the case with}} font files in the classic Mac operating systems. Note that the Macintosh file systems also have a separate area for metadata distinct from either the data or <b>resource</b> <b>fork.</b> Being part of the catalogue entry for the file, it is much faster to access this. However, the amount of data stored here is minimal, being just the creation and modification timestamps, the file type and creator codes, fork lengths, and the file name.Some files have only a <b>resource</b> <b>fork.</b> Classic 68k applications are one example, where even the executable code is contained in resources of type 'CODE'. Later PowerPC binaries store the executable code in the data fork.|$|E
50|$|In classic Mac OS and macOS, OpenType is one {{of several}} formats {{referred}} to as data-fork fonts, as they lack the classic Mac <b>resource</b> <b>fork.</b>|$|E
5000|$|Rezycle: An OS X {{tool that}} {{extracts}} resources from a <b>resource</b> <b>fork</b> into separate binary files while converting many types into formats suitable for modern development.|$|E
50|$|Extensions {{retained}} the resource type of 'INIT' throughout their lifetime, and the loader was gradually enhanced {{to search for}} these resources in numerous places, including in the <b>resource</b> <b>forks</b> of control panels {{in a variety of}} formats and the Chooser.|$|R
50|$|Until Mac OS X v10.4, users {{running the}} legacy Unix command line {{utilities}} (such as tar) included with Mac OS X would risk data loss, as the utilities were not updated {{to handle the}} <b>resource</b> <b>forks</b> of files until v10.4.|$|R
5000|$|... macOS {{includes}} Archive Utility {{which is}} compatible with the open formats ZIP, gzip, and bzip2. In versions since 10.3 (Panther), it now preserves <b>resource</b> <b>forks</b> in the ZIP format, so Stuffit is no longer a requirement for Mac file compression. ZIP is also a de facto standard, making it more widely accepted for archives and sharing.|$|R
5000|$|When a <b>resource</b> <b>fork</b> is accessed, data {{including}} the start position {{and length of}} the resource data and resource map is read in from the header.|$|E
5000|$|In OS X, forks {{are named}} file/..namedfork/forkname, e.g., the <b>resource</b> <b>fork</b> of the file IMG_0593.jpg is IMG_0593.jpg/..namedfork/rsrc. The [...] command {{supports}} a [...] option which lists a file's forks.|$|E
5000|$|Files in most file systems {{used with}} DOS, Windows, Unix, or other {{operating}} systems {{have only one}} [...] "fork". By contrast, MFS and HFS give files two different [...] "forks". The data fork contains {{the same sort of}} information as a file in other file systems, such as the text of a document or the bitmaps of an image file. The <b>resource</b> <b>fork</b> contains other structured data such as menu definitions, graphics, sounds, or code segments that would be incorporated into a program's file format on other systems. An executable file might consist only of resources (including code segments) with an empty data fork, while a data file might have only a data fork with no <b>resource</b> <b>fork.</b> A word processor file could contain its text in the data fork and styling information in the <b>resource</b> <b>fork,</b> so that an application which doesn’t recognize the styling information can still read the raw text.|$|E
5000|$|... macOS stores <b>resource</b> <b>forks</b> and {{metadata}} (file attributes, other ADS) using AppleDouble format in {{a hidden}} file {{with a name}} constructed from the owner filename prefixed with [...] "", and Finder stores some folder and file metadata in a hidden file called [...] "" [...] (but note that Finder uses [...] even on macOS' native filesystem, HFS+).|$|R
50|$|Third-party macOS {{software}} developers offer Finder replacements that run as stand-alone applications, such as Path Finder, Xfile, and XtraFinder. These replacements are shareware or freeware and aim to include and supersede the same functionality as the Finder. After Mac OS X 10.4 Tiger the UNIX command line file management tools understand <b>resource</b> <b>forks</b> {{and can be}} used for management of Mac files.|$|R
5000|$|One of HFS+'s most obscure {{features}} {{is that a}} file {{may have}} an arbitrary number of custom [...] "named forks" [...] {{in addition to the}} traditional data and <b>resource</b> <b>forks.</b> This feature has gone largely unused, as Apple never added support for it under Mac OS 8.1-10.3.9. Beginning with 10.4, a partial implementation was made to support Apple's extended inline attributes.|$|R
