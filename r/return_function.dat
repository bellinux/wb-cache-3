99|1899|Public
2500|$|The <b>return</b> <b>function</b> characterizes pointed functors in {{the same}} category, by {{accounting}} for the ability to [...] "lift" [...] values into the functor. It should satisfy the following law: ...|$|E
2500|$|Bracketing may be {{used and}} {{may be needed to}} disambiguate terms. For example, [...] and [...] denote {{different}} terms (although they coincidentally reduce to the same value). Here the first example defines a function that defines a function and returns the result of applying x to the child-function (apply function then return), while the second example defines a function that returns a function for any input and then returns it on application of x (<b>return</b> <b>function</b> then apply).|$|E
5000|$|The {{function}} [...] {{is called}} objective function, payoff function, <b>return</b> <b>function,</b> cost function etc.|$|E
5000|$|... (define (add x y) (+ x y))(define (f x) (lambda (y) (+ x y)))(display ((f 3) 7))(display (add 3 7))In this Scheme example, the higher-order {{function}} [...] is used {{to implement}} currying. It takes a single argument and <b>returns</b> a <b>function.</b> The evaluation of the expression [...] first <b>returns</b> a <b>function</b> after evaluating [...] The <b>returned</b> <b>function</b> is [...] Then, it evaluates the <b>returned</b> <b>function</b> with 7 as the argument, returning 10. This {{is equivalent to the}} expression , since [...] is equivalent to the curried form of [...]|$|R
5000|$|... #Subtitle level 3: Higher-order functions: <b>returning</b> <b>functions</b> as results ...|$|R
5000|$|... <b>returns</b> an {{anonymous}} <b>function,</b> which {{has captured the}} argument [...] in the closure. The <b>returned</b> <b>function</b> is a function that adds [...] to its argument: ...|$|R
5000|$|... {{function}} Accumulator(start) { var current = start; <b>return</b> <b>function</b> (x) { {{return current}} += x; };} ...|$|E
5000|$|To add parameters:var name = 'Joe';document.onclick = (function (name) { <b>return</b> <b>function</b> (...) { alert('Hey ' + name + '!'); };}(name)); ...|$|E
50|$|In {{a single}} dwell Cam mechanism, {{there are three}} motion {{functions}} that follow each other and then repeat: a dwell, a rise, and a <b>return</b> <b>function.</b> It is sometimes desired to use a Rise function such that its acceleration does not become zero at its end. To maintain continuity of acceleration, the <b>return</b> <b>function</b> should begin with a same non-zero acceleration that matches {{the end of the}} rise function. There are a number of functions that can provide these motion requirements. A double-harmonic function is a common example used for single dwell.|$|E
50|$|Many {{programming}} languages support {{passing and}} <b>returning</b> <b>function</b> values, {{which can be}} applied to arguments. Whether this suffices to call function values first-class is disputed.|$|R
50|$|An {{interchange}} circuit can carry {{many types of}} signals and provide many types of service features, such as control signals, timing signals, and common <b>return</b> <b>functions.</b>|$|R
3000|$|... are {{the stock}} of {{academic}} and vocational schooling, respectively; and all other notation is as before. This model assumes that the type-specific schooling <b>return</b> <b>functions</b> R [...]...|$|R
5000|$|Some of the [...] "successive approximation" [...] schemes used in dynamic {{programming}} to solve [...] Bellman's functional equation {{are based on}} fixed point iterations {{in the space of}} the <b>return</b> <b>function.</b>|$|E
5000|$|Also, a {{function}} is an Object instance (likewise objects are Function instances) {{and the object}} literal notation brackets, [...] for braced code, are used when defining {{a function}} this way (as opposed to using [...] ). In a very broad non-rigorous sense (especially since global bindings are compromised), an arbitrary sequence of braced JavaScript statements, , can {{be considered to be}} a fixed point of(function (...) {( [...] function (...) {( ... {( [...] function (...) {stuff} (...) [...] )} ...} (...) [...] )} (...) [...] )More correctly but with caveats, ( [...] function (...) {stuff} (...) [...] ) ~= A_Fixed_Point_of( [...] function (...) { <b>return</b> <b>function</b> (...) { return ... { <b>return</b> <b>function</b> (...) {stuff} (...) } ... } (...) } (...) [...] ) ...|$|E
5000|$|In {{order to}} enable the {{programmer}} to call v (...) and p (...) easily, sometimes the asem includes a wrapping functionalityasem.prototype.wrap = function(func){ var self = this; self.v (...) <b>return</b> <b>function</b> (...) { if(func) func.apply(this,arguments); self.p (...) }} ...|$|E
50|$|At the time, the 2nd and 3rd districts had {{combined}} <b>returns,</b> <b>functioning</b> as {{a single}} plural district, hence, both Tompkins' initial election and this special election covered both districts.|$|R
50|$|The C family allowed both passing {{functions}} as arguments and returning them as results, but avoided any problems by not supporting nested functions. (The gcc compiler allows {{them as an}} extension.) As the usefulness of <b>returning</b> <b>functions</b> primarily lies {{in the ability to}} <b>return</b> nested <b>functions</b> that have captured non-local variables, instead of top-level functions, these languages are generally not considered to have first-class functions.|$|R
50|$|Common Lisp {{supports}} first-class functions. For instance, it {{is possible}} to write functions that take other functions as arguments or <b>return</b> <b>functions</b> as well. This makes it possible to describe very general operations.|$|R
5000|$|... // Return a {{function}} that approximates the derivative of f// using an interval of dx, {{which should be}} appropriately small.function derivative(f, dx) { <b>return</b> <b>function</b> (x) { return (f(x + dx) - f(x)) / dx; };} ...|$|E
5000|$|The <b>return</b> <b>function</b> characterizes pointed functors in {{the same}} category, by {{accounting}} for the ability to [...] "lift" [...] values into the functor. It should satisfy the following law:return [...] f ≡ fmap f [...] return ...|$|E
50|$|Redlining is a {{different}} situation, as {{it is not the}} result of adverse selection. In fact, the bank can perfectly distinguish between the different types of buyers according to some criterion. Each type is assumed to have {{a different}} expected <b>return</b> <b>function</b> (from {{the point of view of}} the bank).|$|E
5000|$|Hack allows types to be {{specified}} for function {{arguments and}} <b>function</b> <b>return</b> values. <b>Functions</b> in Hack are thus annotated with types like the following: ...|$|R
5000|$|When a <b>function</b> <b>returns</b> a <b>function</b> pointer, {{it can be}} {{even more}} {{confusing}} without typedef. The following is the function prototype of signal(3) from FreeBSD: ...|$|R
5000|$|... {{function}} new_scanner (word) temp_function = function (input) scan_for_text (input, word) end <b>function</b> <b>return</b> temp_function end <b>function</b> ...|$|R
5000|$|Because of this problem, the POSIX {{documentation}} on [...] for the outdated issue 6 {{stated that}} [...] "a future version may either {{add a new}} function to <b>return</b> <b>function</b> pointers, or the current interface may be deprecated in favor of two new functions: one that returns data pointers and the other that returns function pointers".|$|E
50|$|It {{might be}} more {{intuitive}} to imagine a situation with {{a very large number}} of types (continuum). In that case, the expected <b>return</b> <b>function</b> of the bank will become smooth, rising for low levels of the interest rate, until the optimal rate, and then falling smoothly until it reaches zero. Types that would be willing to borrow at rates higher than the optimal might be rationed.|$|E
5000|$|... // Implementationvar EnumerableFirstLast = ({{function}} (...) { // function based module pattern. var first = function (...) { return this0; }, last = function (...) { return this- 1; }; <b>return</b> <b>function</b> (...) { // function based Flight-Mixin mechanics ... this.first = first; // ... {{referring to}} ... this.last = last; // ... shared code. };} (...) [...] );// Application - explicit delegation:// applying {{first and last}} enumerable behavior onto Arrays prototype.EnumerableFirstLast.call(Array.prototype);// Now you can do:a = 2, 3;a.first (...) // 1a.last (...) // 3 ...|$|E
5000|$|... 186 is a sphenic number, so the Möbius <b>function</b> <b>returns</b> -1 (and the Mertens <b>function</b> <b>returns</b> -4) ...|$|R
30|$|The {{clinical}} outcomes and complications of tension-band plating {{have been well}} documented, and commonly include a post-operative delay in <b>return</b> of <b>function.</b> We performed a retrospective comparison study to evaluate the capacity of immediate post-operative physical therapy to prevent this post-operative delay in <b>return</b> of <b>function.</b>|$|R
40|$|AbstractThe {{treatment}} of the continuous parameter control problem in the Dynamic Programming literature consists of a formal derivation of a differential relation between optimum partial <b>return</b> <b>functions.</b> In this report, we pose this problem in a more general setting and study {{the conditions under which}} the relation may be established rigorously...|$|R
5000|$|The <b>return</b> <b>function</b> {{specifies}} {{the value}} to return, {{but does not}} dictate how it is returned. The C compiler for any specific architecture implements a standard mechanism for returning the value. Compilers for the x86 architecture typically (but not always) use the EAX register to return a value, as in the assembly language example (the author of the assembly language example has chosen to copy the C convention but assembly language does not require this).|$|E
50|$|Gillette Children’s Specialty Healthcare treats {{patients}} who {{have some of the}} rarest and most complex conditions in pediatric medicine, including cerebral palsy, scoliosis, plagiocephaly, brain and spinal cord injury, epilepsy and seizures, torticollis, hydrocephalus, craniosynostosis, spina bifida, muscular dystrophy, cleft lip and palate, limb-length discrepancy, spinal muscular atrophy and osteogenesis imperfecta. Gillette provides inpatient and outpatient rehabilitation therapy to help patients mitigate the effects of disabilities and to <b>return</b> <b>function</b> following serious injury or complex surgery.|$|E
5000|$|Bracketing may be {{used and}} {{may be needed to}} disambiguate terms. For example, [...] and [...] denote {{different}} terms (although they coincidentally reduce to the same value). Here the first example defines a function that defines a function and returns the result of applying x to the child-function (apply function then return), while the second example defines a function that returns a function for any input and then returns it on application of x (<b>return</b> <b>function</b> then apply).|$|E
5000|$|Currying is {{a method}} for {{producing}} a chain of functions, each taking exactly one argument. The construction is achieved by [...] "hiding" [...] all but one argument in another, new, curried function, {{whose job it is}} to <b>return</b> <b>functions</b> of the remaining arguments. This is explicitly (but informally) illustrated next.|$|R
5000|$|... mIRC {{scripting}} {{involves a}} peculiar nomenclature {{that is not}} entirely consistent {{with most of the}} rest of the programming world. (Most notably, the term identifier—which in most languages refers to the name of a variable or <b>function</b> (whether it <b>returns</b> a value or not)—in mIRC refers specifically to a value <b>returning</b> <b>function.)</b> ...|$|R
50|$|Scalar <b>{{functions}}</b> <b>return</b> {{a single}} data value (not a table) with RETURNS clause. Scalar functions can use all scalar data types, with exception of timestamp and user-defined data types. Inline table-valued <b>functions</b> <b>return</b> the result set {{of a single}} SELECT statement. Multistatement table-valued <b>functions</b> <b>return</b> a table, which was built with many TRANSACT-SQL statements.|$|R
