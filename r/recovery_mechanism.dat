702|855|Public
5|$|Cells cannot {{function}} if DNA damage corrupts {{the integrity}} and accessibility of essential information in the genome (but cells remain superficially functional when non-essential genes are missing or damaged). Depending {{on the type of}} damage inflicted on the DNA's double helical structure, a variety of repair strategies have evolved to restore lost information. If possible, cells use the unmodified complementary strand of the DNA or the sister chromatid as a template to recover the original information. Without access to a template, cells use an error-prone <b>recovery</b> <b>mechanism</b> known as translesion synthesis as a last resort.|$|E
25|$|If other {{copies of}} the damaged data exist or can be reconstructed from {{checksums}} and parity data, ZFS will use {{a copy of the}} data (or recreate it via a RAID <b>recovery</b> <b>mechanism),</b> and recalculate the checksum—ideally resulting in the reproduction of the originally expected value. If the data passes this integrity check, the system can then update all faulty copies with known-good data and redundancy will be restored.|$|E
5000|$|... #Subtitle level 3: Challenge/response {{password}} <b>recovery</b> <b>mechanism</b> ...|$|E
40|$|Branch {{prediction}} accuracies determined using trace-driven simulation do {{not include}} the effects of executing branches along a mispredicted path. However, branches along a mispredicted path will pollute the branch prediction structures if no <b>recovery</b> <b>mechanisms</b> are provided. Without <b>recovery</b> <b>mechanisms,</b> prediction rates will suffer. In this paper, we determine the appropriateness of <b>recovery</b> <b>mechanisms</b> for the four structures of the Two-Level Adaptive Branch Predictor: the Branch Target Buffer (BTB), the Branch History Register (BHR), the Pattern History Tables (PHTs), and the Return Address Stack (RAS). We then propose cost-effective <b>recovery</b> <b>mechanisms</b> for these branch prediction structures. For five benchmarks from the SPECint 92 suite, we show that performance is not affected if <b>recovery</b> <b>mechanisms</b> are not provided for the BTB and the PHTs. On the other hand, without any <b>recovery</b> <b>mechanisms</b> for the BHR and RAS, performance drops by an average of 29 %...|$|R
40|$|Branch {{prediction}} accuracies determined using trace-driven simulation do {{not include}} the eflects of exe-cuting branches along a mispredicted path. However, branches along a mispredicted path will pollute the branch prediction structures if no <b>recovery</b> <b>mechanisms</b> are provided. Without <b>recovery</b> <b>mechanisms,</b> predic-tion rates will suger. In this paper, we determine the appropriateness of <b>recovery</b> <b>mechanisms</b> for the four structures of the Two-Level Adaptive Branch Predic...|$|R
5000|$|... #Subtitle level 2: Online {{verification}} and <b>recovery</b> <b>mechanisms</b> ...|$|R
5000|$|... #Subtitle level 3: Emergency Recovery Information (ERI) file {{password}} <b>recovery</b> <b>mechanism</b> ...|$|E
5000|$|Lack of {{understanding}} of microbial oil <b>recovery</b> <b>mechanism</b> and deficient mathematical models to predict microbial behaviour in different reservoirs.|$|E
50|$|Challenge/Response {{password}} <b>recovery</b> <b>mechanism</b> {{allows the}} password to be recovered in a secure manner. It {{is offered by}} {{a limited number of}} disk encryption solutions.|$|E
40|$|In this article, {{we discuss}} design {{constraints}} to characterize efficient error <b>recovery</b> <b>mechanisms</b> for the NoC design environment. We explore error control mechanisms {{at the data}} link and network layers and present the schemes' architectural details. We investigate the energy efficiency, error protection efficiency, and performance impact of various error <b>recovery</b> <b>mechanisms...</b>|$|R
40|$|Abstract—Applications such as Voice over IP {{and video}} {{delivery}} require continuous network service, requiring fast failure <b>recovery</b> <b>mechanisms.</b> Proactive Fast failure <b>recovery</b> <b>mechanisms</b> have been recently {{proposed to improve}} network performance during the failure transients. The proposed mechanisms need extra infrastructural support {{in the form of}} routing table entries, extra addresses etc. In this paper, we study if the extra infrastructure support can be exploited to build disjoint paths in those frameworks, while keeping the recovery path lengths close to the primary paths. Our evaluations show {{that it is possible to}} extend the proactive <b>recovery</b> <b>mechanisms</b> to provide support for nearly-disjoint paths. Index Terms—Proactive failure recovery, Disjoint Multi-path, Multi-topolog...|$|R
40|$|There {{is a high}} {{potential}} for <b>recovery</b> <b>mechanisms</b> {{to be used to}} incentivise the uptake of flood mitigation and loss reduction measures, undertake adaptation and promote community resilience. Indeed, creating a resilient response to flooding requires flood risk management approaches to be aligned {{and it needs to be}} ensured that <b>recovery</b> <b>mechanisms</b> to not provide disincentives for individuals and business to take proactive action to reduce risk. However, the degree to which it is desirable and effective for insurers and governments providing compensation to promote resilience and risk reduction depends upon how the cover or compensation is organised and the premiums which are charged. A review of international flood <b>recovery</b> <b>mechanisms</b> has been undertaken to identify firstly the types of schemes that exist and their characteristics. Analysis of existing instruments highlights that there are various potential approaches to encourage or require the uptake of flood mitigation and also discourage the construction of new development in high flood risk. However despite the presence of these instruments, those organising <b>recovery</b> <b>mechanisms</b> could be doing much more to incentivise increased resilience. status: publishe...|$|R
50|$|As {{with other}} drive mechanisms, water or gas {{injection}} {{can be used}} to maintain reservoir pressure. When a gas cap is coupled with water influx the <b>recovery</b> <b>mechanism</b> can be highly efficient.|$|E
50|$|Carboxylation {{of these}} vitamin K-dependent Gla-proteins, besides being {{essential}} for {{the function of the}} protein, is also an important vitamin <b>recovery</b> <b>mechanism</b> since it serves as a recycling pathway to recover vitamin K from its epoxide metabolite (KO) for reuse in carboxylation.|$|E
5000|$|Layer 3 redundancy. Some {{stackable}} architectures {{allow for}} continued Layer 3 routing {{if there is}} a “down” switch in a stack. If routing is centralized in one unit in the stack, and that unit fails, then there must be a <b>recovery</b> <b>mechanism</b> to move routing to a backup unit in the stack.|$|E
40|$|Applications such as Voice over IP {{and video}} {{delivery}} require continuous network service, requiring fast failure <b>recovery</b> <b>mechanisms.</b> Proactive Fast failure <b>recovery</b> <b>mechanisms</b> have been recently {{proposed to improve}} network performance during the failure transients. The proposed mechanisms need extra infrastructural support {{in the form of}} routing table entries, extra addresses etc. In this paper, we study if the extra infrastructure support can be exploited to build disjoint paths in those frameworks, while keeping the recovery path lengths close to the original paths. Furthermore, we propose a new framework that enables the construction of nearly-disjoint recovery paths with a lower infrastructure cost. Our evaluations show {{that it is possible to}} extend the fast <b>recovery</b> <b>mechanisms</b> to provide support for nearly-disjoint paths...|$|R
30|$|The <b>recovery</b> <b>mechanisms</b> of SC-CO 2 {{flooding}} {{are identified}} {{to be due}} to fractional extraction of some oil components and reduction in oil–water IFT.|$|R
40|$|Multi-protocol label {{switching}} (MPLS) integrates {{the label}} swapping forwarding paradigm with network layer routing. To deliver reliable service, MPLS requires {{a set of}} procedures to provide protection of the traffic carried on different paths. This requires that the label switching routers (LSRs) support fault detection, fault notification, and fault <b>recovery</b> <b>mechanisms,</b> and that MPLS signaling supports the configuration of recovery. The purpose of this work is to evaluate the different <b>recovery</b> <b>mechanisms</b> proposed by the IETF, by literature study and simulation experiments...|$|R
50|$|In {{computer}} storage software, a task management function is an error <b>recovery</b> <b>mechanism</b> {{implemented by the}} software to influence and alter processing of certain commands, their sequence and so on. Typically if a command is timed out this functionality is invoked to initiate a recovery for the affected command by means of Retry, abort or reset.|$|E
50|$|Klerokinesis (from the Greek {{root for}} allotted inheritance) has been {{claimed to be}} a new form of cell {{division}} in human cells. It is thought to serve as a natural back-up mechanism during faulty cell division (Cytokinesis), thus preventing some cells from going down a path that can lead to cancer. It {{is considered to be a}} <b>recovery</b> <b>mechanism.</b>|$|E
50|$|ESE {{provides}} transacted data update and retrieval. A crash <b>recovery</b> <b>mechanism</b> {{is provided}} so that data consistency is maintained {{even in the}} event of a system crash. Transactions in ESE are highly concurrent making ESE suitable for server applications. ESE caches data intelligently to ensure high performance access to data. In addition, ESE is lightweight making it suitable for auxiliary applications.|$|E
40|$|Julep is an {{object-oriented}} testbed {{designed for}} implementation {{and analysis of}} process recovery protocols. It is written in Java, and runs as a layer underneath a Java-based distributed application. Only minor modifications to a typical distributed application are necessary to use Julep as a communication mechanism. Julep is designed to allow new process <b>recovery</b> <b>mechanisms</b> to be quickly incorporated, permitting accurate comparison between mechanisms for specific distributed applications on specific hardware platforms. A novel aspect of Julep is its UDP-based object communication service, which implements "unbreakable" communication channels. Julep {{can be used as}} a testbed to compare the performance of particular <b>recovery</b> <b>mechanisms,</b> as a framework within which new <b>recovery</b> <b>mechanisms</b> can be implemented and tested, or as an infrastructure to make existing distributed applications fault tolerant. In its most basic form, Julep {{can be used as a}} reliable object-based communication service [...] ...|$|R
50|$|<b>Recovery</b> <b>mechanisms</b> {{are ways}} in which the systems can recover from failures. These <b>recovery</b> <b>mechanisms</b> should be well designed, meaning that they are reliable, {{effective}} and efficient. These systems should be proactive in testing and verifying the behavior of the <b>recovery</b> <b>mechanisms</b> so should there be a real failure it is certain that these mechanisms will do what they are designed to do and aid in the recovery of the system. These verifications should be performed even in production level equipment as this type of equipment is the most vital to have up. There are two methods for performing these tests and both of these should be used. The first method is directed tests in which the tests are set up and executed. The other method is a random test in which they occur without warning.|$|R
40|$|Julep is an {{object-oriented}} testbed {{designed for}} analysis and comparison of temporal diversity fault tolerance mechanisms. It {{is written in}} Java, and runs as a layer underneath a distributed application. Julep can run on any standard COTS platform with a JVM, in homogeneous or heterogeneous environments. Julep is designed to quickly and easily incorporate new process <b>recovery</b> <b>mechanisms,</b> allowing accurate comparison between mechanisms for specific applications on specific hardware platforms. Julep's central Manager acts as a task location and status lookup service. A novel aspect of Julep is the implementation of `unbreakable' communication channels. Julep is flexible regarding its use of fault tolerant mechanisms. It {{can be used as}} a testbed to compare performance between implemented <b>recovery</b> <b>mechanisms,</b> as a framework within which new <b>recovery</b> <b>mechanisms</b> can be implemented and tested, or as an infrastructure to add fault tolerance to an existing distributed application. 1. 1 Introduct [...] ...|$|R
50|$|If other {{copies of}} the damaged data exist or can be reconstructed from {{checksums}} and parity data, ZFS will use {{a copy of the}} data (or recreate it via a RAID <b>recovery</b> <b>mechanism),</b> and recalculate the checksum—ideally resulting in the reproduction of the originally expected value. If the data passes this integrity check, the system can then update all faulty copies with known-good data and redundancy will be restored.|$|E
50|$|Lustre {{file system}} high {{availability}} features include a robust failover and <b>recovery</b> <b>mechanism,</b> making server failures and reboots transparent. Version interoperability between successive minor {{versions of the}} Lustre software enables a server to be upgraded by taking it offline (or failing it over to a standby server), performing the upgrade, and restarting it, while all active jobs continue to run, experiencing a delay while the backup server takes over the storage.|$|E
5000|$|The OS 2200 {{database}} {{managers are}} all part of the Universal Data System (UDS). UDS provides a common control structure for multiple different data models. Flat files (sequential, multi-keyed indexed sequential - MSAM, and fixed-block), network (DMS), and relational (RDMS) data models all share a common locking, recovery, and clustering mechanism. OS 2200 applications can use any mixtures of these data models along with the high-volume transaction file system within the same program while retaining a single common <b>recovery</b> <b>mechanism.</b>|$|E
40|$|Modern {{broadband}} {{telecommunication networks}} {{are based on}} multiple transport technologies such as Asynchronous Transfer Mode (ATM), Synchronous Digital Hierarchy (SDH) and Wavelength Division Multiplex (WDM). For resilient networks, <b>recovery</b> <b>mechanisms</b> are existent in each technology. The coordination or interworking aspects of the single layer <b>recovery</b> <b>mechanisms</b> is a challenging problem and may lead to more reliable or cost-efficient networks. In this paper different recovery strategies and interworking mechanisms are described and their functionality and performance evaluated using an integrated multilayer network simulation environment developed in the ACTS project PANEL. 1...|$|R
40|$|Estimates {{show that}} after current primary and {{secondary}} oil reservoir <b>recovery</b> <b>mechanisms</b> up to 90 % of the original oil remains in the reservoir. Further <b>recovery</b> <b>mechanisms</b> can be incorporated but are often deemed economically inefficient as well as overly invasive. An alternative method of recovery is therefore a very attractive prospect. It {{has been shown that}} seismic waves propagating through saturated porous rock can generate weak ultrasonic waves. Oil saturated porous rocks have shown enhanced oil recovery under the exposure of ultrasound. There are several mechanisms claimed to cause this improvement with no generally agreed dominant mechanism...|$|R
40|$|In {{spite of}} {{the wide variety of}} {{concurrency}} control and <b>recovery</b> <b>mechanisms</b> proposed during the past decade, the behavior and the performance of various concurrency control and recovery mecha-nisms remain largely not well understood. In addition, although concurrency control and <b>recovery</b> <b>mechanisms</b> are intimately related, the interaction between them has not been adequately explored. In this paper, we take a unified view of the problems associated with concurrency control and recovery for transaction-oriented multiuser centralized database management systems, and we present several integrated mechanisms. We then develop analytical models to study the behavior and compare the performance of these integrated mechanisms, and we present the results of our performance evalua-tion...|$|R
50|$|Version 2 shares many of {{the good}} {{characteristics}} of Version 1 - it can be embedded into a regular text stream (e.g. from a build system) and it still models xUnit style test execution. It also fixes {{many of the}} issues with Version 1 - Version 2 can be multiplexed without excessive buffering (in time or space), it has a well defined <b>recovery</b> <b>mechanism</b> for dealing with corrupted streams (e.g. where two processes write to the same stream concurrently, or where the stream generator suffers a bug).|$|E
50|$|Cells cannot {{function}} if DNA damage corrupts {{the integrity}} and accessibility of essential information in the genome (but cells remain superficially functional when non-essential genes are missing or damaged). Depending {{on the type of}} damage inflicted on the DNA's double helical structure, a variety of repair strategies have evolved to restore lost information. If possible, cells use the unmodified complementary strand of the DNA or the sister chromatid as a template to recover the original information. Without access to a template, cells use an error-prone <b>recovery</b> <b>mechanism</b> known as translesion synthesis as a last resort.|$|E
50|$|A {{regenerative}} brake is an energy <b>recovery</b> <b>mechanism</b> which slows a vehicle or object by converting its kinetic energy {{into a form}} which can be either used immediately or stored until needed. This contrasts with conventional braking systems, where the excess kinetic energy is converted to unwanted and wasted heat by friction in the brakes, or with dynamic brakes, where energy is recovered by using electric motors as generators but is immediately dissipated as heat in resistors. In addition to improving the overall efficiency of the vehicle, regeneration can greatly {{extend the life of}} the braking system as its parts do not wear as quickly.|$|E
30|$|Using {{synthetic}} core samples, laboratory tests including phase behavior studies, MMP measurements, and immiscible WAG coreflood experiments {{were conducted to}} understand the major <b>recovery</b> <b>mechanisms</b> of immiscible WAG injection and thus generate accurate fluid properties under reservoir conditions.|$|R
30|$|Transmission {{from west}} to east should be {{improved}} and optimised through widespread adoption of flexible transmission technology, especially ultra-high-voltage DC transmission and superconductive transmission. Transmission system cost <b>recovery</b> <b>mechanisms</b> need to be improved to maximise transmission line capacity and cost-effectiveness.|$|R
30|$|Once {{the cell}} status is {{detected}} and diagnosed, compensation and <b>recovery</b> <b>mechanisms</b> can be triggered. For instance, readjusting cell powers to compensate a neighboring sleeping cell, rebooting automatically themselves if found faulty or alert the operator’s OAM system about the issue.|$|R
