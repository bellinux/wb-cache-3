7272|1|Public
5|$|Like the {{transitive}} closure, the transitive {{reduction is}} uniquely defined for DAGs. In contrast, for a directed graph {{that is not}} acyclic, there can {{be more than one}} minimal subgraph with the same <b>reachability</b> relation.|$|E
5|$|The {{family of}} topological orderings of a DAG {{is the same}} as the family of linear {{extensions}} of the <b>reachability</b> relation for the DAG, so any two graphs representing the same partial order have the same set of topological orders.|$|E
5|$|Important {{polynomial}} time computational problems on DAGs include topological sorting (finding a topological ordering), {{construction of the}} transitive closure and transitive reduction (the largest and smallest DAGs with the same <b>reachability</b> relation, respectively), and the closure problem, in which {{the goal is to}} find a minimum-weight subset of vertices with no edges connecting them {{to the rest of the}} graph. Transforming a directed graph with cycles into a DAG by deleting as few vertices or edges as possible (the feedback vertex set and feedback edge set problem, respectively) is NP-hard, but any directed graph can be made into a DAG (its condensation) by contracting each strongly connected component into a single supervertex. The problems of finding shortest paths and longest paths can be solved on DAGs in linear time, in contrast to arbitrary graphs for which shortest path algorithms are slower and longest path problems are NP-hard.|$|E
25|$|Note that a Petri net is bounded if {{and only}} if its <b>reachability</b> graph is finite.|$|E
25|$|For example, {{if in the}} net N, {{both places}} are {{assigned}} capacity 2, we obtain a Petri net with place capacities, say N2; its <b>reachability</b> graph is displayed on the right.|$|E
25|$|Dominance drawing places {{vertices}} {{in such a}} {{way that}} one vertex is upwards, rightwards, or both of another if and only if it is reachable from the other vertex. In this way, the layout style makes the <b>reachability</b> relation of the graph visually apparent.|$|E
25|$|In {{computational}} complexity theory, several complexity {{classes have}} been defined {{in connection with}} implicit graphs, defined as above by a rule or algorithm for listing the neighbors of a vertex. For instance, PPA is the class of problems in which one is given as input an undirected implicit graph (in which vertices are -bit binary strings, with a polynomial time algorithm for listing the neighbors of any vertex) and a vertex of odd degree in the graph, and must find a second vertex of odd degree. By the handshaking lemma, such a vertex exists; finding one {{is a problem in}} NP, but the problems that can be defined in this way may not necessarily be NP-complete, as it is unknown whether PPA=NP. PPAD is an analogous class defined on implicit directed graphs that has attracted attention in algorithmic game theory because it contains the problem of computing a Nash equilibrium. The problem of testing <b>reachability</b> of one vertex to another in an implicit graph may also be used to characterize space-bounded nondeterministic complexity classes including NL (the class of problems that may be characterized by <b>reachability</b> in implicit directed graphs whose vertices are -bit bitstrings), SL (the analogous class for undirected graphs), and PSPACE (the class of problems that may be characterized by <b>reachability</b> in implicit graphs with polynomial-length bitstrings). In this complexity-theoretic context, the vertices of an implicit graph may represent the states of a nondeterministic Turing machine, and the edges may represent possible state transitions, but implicit graphs may also be used to represent many other types of combinatorial structure. PLS, another complexity class, captures the complexity of finding local optima in an implicit graph.|$|E
25|$|The {{software}} tools typically calculate biomechanical properties including individual muscle forces, joint forces and moments. Most of these tools employ standard ergonomic evaluation {{methods such as}} the NIOSH lifting equation and Rapid Upper Limb Assessment (RULA). Some simulations also analyze physiological measures including metabolism, energy expenditure, and fatigue limits Cycle time studies, design and process validation, user comfort, <b>reachability,</b> and line of sight are other human-factors that may be examined in ergonomic simulation packages.|$|E
25|$|While <b>reachability</b> {{seems to}} be a good tool to find {{erroneous}} states, for practical problems the constructed graph usually has far too many states to calculate. To alleviate this problem, linear temporal logic is usually used in conjunction with the tableau method to prove that such states cannot be reached. LTL uses the semi-decision technique to find if indeed a state can be reached, by finding a set of necessary conditions for the state to be reached then proving that those conditions cannot be satisfied.|$|E
25|$|The {{non-deterministic}} property {{has been}} a very valuable one, as it lets the user abstract a large number of properties (depending on what the net is used for). In certain cases, however, the need arises to also model the timing, not only the structure of a model. For these cases, timed Petri nets have evolved, where there are transitions that are timed, and possibly transitions which are not timed (if there are, transitions that are not timed have a higher priority than timed ones). A subsidiary of timed Petri nets are the stochastic Petri nets that add nondeterministic time through adjustable randomness of the transitions. The exponential random distribution is usually used to 'time' these nets. In this case, the nets' <b>reachability</b> graph {{can be used as a}} continuous time Markov chain (CTMC).|$|E
500|$|... the <b>reachability</b> {{relation}} in a DAG forms {{a partial}} order, and any finite partial order may {{be represented by}} a DAG using <b>reachability.</b>|$|E
500|$|If [...] is a DAG, its {{transitive}} closure is the graph {{with the most}} edges that represents the same <b>reachability</b> relation. It has an edge [...] whenever [...] can reach [...] That is, it has an edge for every related pair [...] of distinct elements in the <b>reachability</b> relation of , and may therefore {{be thought of as}} a direct translation of the <b>reachability</b> relation [...] into graph-theoretic terms. The same method of translating partial orders into DAGs works more generally: for every finite partially ordered set , the graph that has a vertex for each member of [...] and an edge for each pair of elements related by [...] is automatically a transitively closed DAG, and has [...] as its <b>reachability</b> relation. In this way, every finite partially ordered set can be represented as the <b>reachability</b> relation of a DAG.|$|E
500|$|... used book {{embedding}} {{to study}} the computational complexity theory of the <b>reachability</b> problem in directed graphs. As they have observed, <b>reachability</b> for two-page directed graphs may be solved in unambiguous logarithmic space (the analogue, for logarithmic space complexity, of the class UP of unambiguous polynomial-time problems). However, <b>reachability</b> for three-page directed graphs requires the full power of nondeterministic logarithmic space. Thus, book embeddings seem intimately connected with the distinction between these two complexity classes.|$|E
500|$|The <b>reachability</b> {{relationship}} in any {{directed acyclic graph}} can be formalized as a partial order [...] on the vertices of the DAG. In this partial order, two vertices [...] and [...] are ordered as [...] exactly when there exists a directed path from [...] to [...] in the DAG; that is, when [...] is reachable from [...] However, different DAGs may give rise to the same <b>reachability</b> relation and the same partial order. For example, the DAG with two edges [...] and [...] has the same <b>reachability</b> relation as the graph with three edges , , and [...] Both of these DAGS produce the same partial order, in which the vertices are ordered as [...]|$|E
500|$|The {{transitive}} {{reduction of}} a DAG [...] is the graph with the fewest edges {{that represents the}} same <b>reachability</b> relation as [...] It is a subgraph of , formed by discarding the edges [...] for which [...] also contains a longer path connecting the same two vertices.|$|E
500|$|The {{transitive}} closure {{of a given}} DAG, with [...] vertices and [...] edges, may be constructed in time [...] by using either breadth-first search or depth-first search to test <b>reachability</b> from each vertex. Alternatively, it can be solved in time [...] where [...] is the exponent for fast matrix multiplication algorithms; this is a theoretical improvement over the [...] bound for dense graphs.|$|E
500|$|If a DAG [...] has a <b>reachability</b> {{relation}} {{described by}} the partial order , then the transitive reduction of [...] is a subgraph of [...] that has an edge [...] for every pair in the covering relation of [...] Transitive reductions are useful in visualizing the partial orders they represent, because they have fewer edges than other graphs representing the same orders and therefore lead to simpler graph drawings. A Hasse diagram of a partial order is a drawing of the transitive reduction in which the orientation of each edge is shown by placing the starting vertex of the edge in a lower position than its ending vertex.|$|E
2500|$|Clearly, this is {{a matter}} of walking the <b>reachability</b> graph defined above, until either we reach the {{requested}} marking or we know it can no longer be found. [...] This is harder than it may seem at first: the <b>reachability</b> graph is generally infinite, and it is not easy to determine when it is safe to stop.|$|E
2500|$|The <b>reachability</b> {{problem for}} Petri nets is to decide, given a Petri net N and a marking M, whether [...]|$|E
2500|$|The <b>reachability</b> graph of [...] is the {{transition}} relation [...] restricted to its reachable markings [...] [...] It {{is the state}} space of the net.|$|E
2500|$|... a reset arc {{does not}} impose a {{precondition}} on firing, and empties the place when the transition fires; this makes <b>reachability</b> undecidable, while some other properties, such as termination, remain decidable; ...|$|E
2500|$|Like uniform matroids and {{partition}} matroids, the gammoids, matroids representing <b>reachability</b> in directed graphs, are linear {{over every}} sufficiently large field. More specifically, a gammoid with [...] elements may be represented over every field that {{has at least}} [...] elements.|$|E
50|$|Topics of {{interest}} include (but {{are not limited}} to): <b>Reachability</b> problems in infinite state systems, rewriting systems, dynamical and hybrid systems; <b>reachability</b> problems in logic and verification; <b>reachability</b> analysis in different computational models, counter timed/ cellular/ communicating automata; Petri-Nets; computational aspects of algebraic structures (semigroups, groups and rings); frontiers between decidable and undecidable <b>reachability</b> problems; predictability in iterative maps and new computational paradigms.|$|E
50|$|Variants of the <b>reachability</b> {{problem may}} result from {{additional}} constraints on the initial or final states, specific requirement for <b>reachability</b> paths {{as well as for}} iterative <b>reachability</b> or changing the questions into analysis of winning strategies in infinite games or unavoidability of some dynamics.|$|E
5000|$|The <b>Reachability</b> Workshop is {{specifically}} aimed at gathering together scholars from diverse disciplines and backgrounds interested in <b>reachability</b> problems {{that appear in}} ...|$|E
5000|$|... #Caption: Illustration of the <b>reachability</b> {{distance}}. Objects B and C {{have the}} same <b>reachability</b> distance (k=3), while D is not a k nearest neighbor ...|$|E
50|$|Maria: The Modular <b>Reachability</b> Analyzer is a <b>reachability</b> {{analyzer}} for concurrent {{systems that}} uses Algebraic System Nets (a high-level variant of Petri nets) as its modelling formalism.|$|E
5000|$|If [...] is a DAG, its {{transitive}} closure is the graph {{with the most}} edges that represents the same <b>reachability</b> relation. It has an edge [...] whenever [...] can reach [...] That is, it has an edge for every related pair [...] of distinct elements in the <b>reachability</b> relation of , and may therefore {{be thought of as}} a direct translation of the <b>reachability</b> relation [...] into graph-theoretic terms. The same method of translating partial orders into DAGs works more generally: for every finite partially ordered set , the graph that has a vertex for each member of [...] and an edge for each pair of elements related by [...] is automatically a transitively closed DAG, and has [...] as its <b>reachability</b> relation. In this way, every finite partially ordered set can be represented as the <b>reachability</b> relation of a DAG.|$|E
5000|$|The <b>reachability</b> {{relationship}} in any directed graph (possibly containing cycles) {{gives rise to}} a preorder, where x ≤ y in the preorder if and only if there is a path from x to y in the directed graph. Conversely, every preorder is the <b>reachability</b> relationship of a directed graph (for instance, the graph that has an edge from x to y for every pair (x, y) with x ≤ y). However, many different graphs may have the same <b>reachability</b> preorder as each other. In the same way, <b>reachability</b> of directed acyclic graphs, directed graphs with no cycles, gives rise to partially ordered sets (preorders satisfying an additional anti-symmetry property).|$|E
5000|$|... used book {{embedding}} {{to study}} the computational complexity theory of the <b>reachability</b> problem in directed graphs. As they have observed, <b>reachability</b> for two-page directed graphs may be solved in unambiguous logarithmic space (the analogue, for logarithmic space complexity, of the class UP of unambiguous polynomial-time problems). However, <b>reachability</b> for three-page directed graphs requires the full power of nondeterministic logarithmic space. Thus, book embeddings seem intimately connected with the distinction between these two complexity classes.|$|E
50|$|Using a reachability-plot (a {{special kind}} of dendrogram), the {{hierarchical}} structure of the clusters can be obtained easily. It is a 2D plot, with the ordering of the points as processed by OPTICS on the x-axis and the <b>reachability</b> distance on the y-axis. Since points belonging to a cluster have a low <b>reachability</b> distance to their nearest neighbor, the clusters show up as valleys in the <b>reachability</b> plot. The deeper the valley, the denser the cluster.|$|E
50|$|Cora for Cost Optimal <b>Reachability</b> Analysis.|$|E
5000|$|Characteristic {{times of}} the system can be found by looking for {{distinct}} changes in a variable, such as the <b>reachability</b> ratio. For example, if one allows only a finite waiting time at all nodes in calculating latency, one can find interesting patterns in the resulting <b>reachability</b> ratio. For a mobile call network, the <b>reachability</b> ratio {{has been found to}} increase dramatically if one allows delays of at least two days, and for the airline network the same effect has been found at around 30 minutes.|$|E
50|$|<b>Reachability</b> is a graph {{property}} {{useful in}} optimization.|$|E
5000|$|PREDICTOR, which {{predict the}} {{feasibility}} of <b>reachability</b> analysis, ...|$|E
5000|$|HyCreate: A Tool for Overapproximating <b>Reachability</b> of Hybrid Automata ...|$|E
