0|4404|Public
5000|$|Changeable <b>window</b> <b>sizes</b> <b>Windows</b> have a <b>sizing</b> gadget {{which allows}} users to change the <b>window</b> <b>size</b> until it suits their needs ...|$|R
40|$|We extend prior {{research}} on system call anomaly detection modeling methods for intrusion detection by incorporating dynamic <b>window</b> <b>sizes.</b> The <b>window</b> <b>size</b> is {{the length of}} the subsequence of a system call trace which is used as the basic unit for modeling program or process behavior. In this work we incorporate dynamic <b>window</b> <b>sizes</b> and show marked improvements in anomaly detection. We present two methods for estimating the optimal <b>window</b> <b>size</b> based on the available training data. The first method is an entropy modeling method which determines the optimal single <b>window</b> <b>size</b> for the data. The second method is a probability modeling method that takes into account context dependent <b>window</b> <b>sizes.</b> A context dependent <b>window</b> <b>size</b> model is motivated by the way that system calls are generated by processes. Sparse Markov transducers (SMTs) are used to compute the context dependent <b>window</b> <b>size</b> model. We show over actual system call traces that the entropy modeling methods lead to the optimal single <b>window</b> <b>size.</b> We also show that context dependent <b>window</b> <b>sizes</b> outperform traditional system call modeling methods. ...|$|R
30|$|Also {{in order}} to adapt search <b>window</b> <b>size</b> with object size variations, after {{establishing}} convergence condition, similarity distance criterion will calculate for three values smaller, larger and equal <b>window</b> <b>size.</b> Among them, the <b>window</b> <b>size</b> that has a minimum amount of similarity function will choose as a <b>size</b> of <b>window.</b> (Usually <b>window</b> <b>size</b> variations will be ± 10 % of <b>window</b> <b>size).</b> Also, in the proposed method, convergence condition is that similarity distance value in each step be less than threshold value 0.01.|$|R
3000|$|... k[*]+[*] 1]). Setting {{the sliding}} <b>window</b> <b>size</b> {{is not a}} trivial task. Usually the smaller <b>window</b> <b>sizes</b> {{do not reflect the}} {{correlation}} between the data samples thoroughly, while using the bigger <b>window</b> <b>size</b> increases the chance of the overfitting. Thus, in this experiment the effect of the sliding <b>window</b> <b>size</b> on the prediction accuracy of MLP and MLPWD is studied, as well.|$|R
30|$|The percent {{improvement}} on the localization accuracy {{as a function}} of <b>window</b> <b>sizes,</b> compared to the case with no averaging, increases rapidly at the small <b>window</b> <b>sizes,</b> but it slows down noticeably as the <b>window</b> <b>size</b> increases, as listed in Table  3. That is, the incremental benefit of increasing the <b>window</b> <b>size</b> diminishes rapidly, as seen in Table  4. For example, increasing the <b>window</b> <b>size</b> from 10 to 50 improves the performance by 48 %, whereas increasing it from 50 to 100 increases the performance only by 18 %.|$|R
40|$|The TCP <b>window</b> <b>size</b> value, {{which is}} {{contained}} in the <b>window</b> <b>size</b> field of the TCP segment {{is a very important}} TCP Parameter. The <b>window</b> <b>size</b> value determines the number of bytes of data that canbe sent before an acknowledgement from the reciever is necessary. If the <b>window</b> <b>size</b> field value is made too small, the performance deteriorates. This will slow throughput considerably. On the other hand, if the <b>window</b> <b>size</b> field is made too large, the sender may transmit so many segments that reciever will be overloaded. The <b>window</b> <b>size</b> field provides flow control, regulating {{the rate at which the}} transport processes on the two hosts may transmit. In this paper we have proposed modifications in TCP <b>Window</b> <b>Size,</b> wherein the performance in the network is improved by changing the TCP parameters. Simulations done on Opnet Simulator shows significant improvement in throughput, reduction in upload response time and delay...|$|R
30|$|The first {{approach}} {{involved the}} application of the Centroid method (Ravat et al. 2007; Nwankwo et al. 2009). The block sizes were chosen to ensure that spectral signatures across the approximate 7 -km basin width were incorporated in the depth determinations. The use of multiple <b>window</b> <b>sizes</b> was to highlight the confidence in larger <b>window</b> <b>sizes</b> that would satisfy the condition of a curie point depth (CPD) that approximated L/ 2 π (Nwankwo 2014). The 51 - and 103 -km <b>window</b> <b>sizes</b> were used to generate 36 and 14 data points, respectively, that enabled the production of depth contour maps. The largest <b>window</b> <b>size</b> with L of 129  km and six data points ensured that spectral signatures were preserved. The authors, therefore, utilised three <b>window</b> <b>sizes</b> to verify discussions on the choice of <b>window</b> <b>sizes</b> that supported the use various and larger <b>window</b> <b>sizes</b> for the spectral analyses of data for depth determinations (Nwankwo 2014; Abraham et al. 2014).|$|R
30|$|Based on Fig.  16, for {{the smaller}} <b>window</b> <b>sizes</b> in the {{periodic}} environment the MLP accuracy {{is close to the}} MLPWD and the SVM accuracies. However, by increasing the <b>window</b> <b>size,</b> the MLP accuracy decreases. Similar to the results of the periodic pattern, in the environments with the growing workload pattern, the MLP prediction accuracy has a decreasing trend but does not change too much by increasing the <b>window</b> <b>size.</b> This is because increasing the <b>window</b> <b>size</b> of the MLP algorithm leads to the overfitting issue which decreases the MLP accuracy. As shown in Fig.  16, during the training phase the MLP accuracy increases by increasing the <b>window</b> <b>size.</b> This shows the MLP algorithm becomes over fitted to the training dataset by increasing the <b>window</b> <b>size.</b> The results confirm that in the environments with the periodic workload pattern, increasing the sliding <b>window</b> <b>size</b> has no positive effect on the prediction accuracies of the ERM principle.|$|R
40|$|Abstract [...] - The TCP <b>window</b> <b>size</b> value, {{which is}} {{contained}} in the <b>window</b> <b>size</b> field of the TCP segment {{is a very important}} TCP Parameter. The <b>window</b> <b>size</b> value determines the number of bytes of data that can be sent before an acknowledgement from the reciever is necessary. If the <b>window</b> <b>size</b> field value is made too small, the performance deteriorates. This will slow throughput considerably. On the other hand, if the <b>window</b> <b>size</b> field is made too large, the sender may transmit so many segments that reciever will be overloaded. The <b>window</b> <b>size</b> field provides flow control, regulating {{the rate at which the}} transport processes on the two hosts may transmit. In this paper we have proposed modifications in TCP <b>Window</b> <b>Size,</b> wherein the performance in the network is improved by changing the TCP parameters. Simulations done on Opnet Simulator shows significant improvement in throughput, reduction in upload response time and delay...|$|R
40|$|International audienceIn {{order to}} analyze surface {{electromyography}} (EMG) signals, {{it is necessary}} to use techniques based on time (temporal) domain or frequency (spectral) domain. However, these techniques are based on the mathematical assumption of signal stationarity. On the other hand, EMG signal stationarity varies depending on analysis <b>window</b> <b>size</b> and contraction types. So in this paper, a suitable <b>window</b> <b>size</b> for an analysis of EMG during static and dynamic contractions was investigated using a stationarity test, the modified reverse arrangement test. More than 90 % of the signals measured during static contraction can be considered as stationary signals for all <b>window</b> <b>sizes.</b> On average, a <b>window</b> <b>size</b> of 375 ms provides the most stationary information, 94. 29 % of EMG signals for static muscle contraction. For dynamic muscle contraction, the percentage of stationary signals decreased as the <b>window</b> <b>size</b> was increased. If the threshold of 80 % stationarity was set to validate stationarity for each <b>window</b> <b>size,</b> a suitable <b>window</b> <b>size</b> should be 250 ms or lesser. For a real-time application that a <b>size</b> of analysis <b>window</b> plus processing time should be less than 300 ms, a <b>window</b> <b>size</b> of 250 ms is suggested for both contraction types...|$|R
50|$|The {{transmitter}} {{and receiver}} each have a current sequence number nt and nr, respectively. They each also have a <b>window</b> <b>size</b> wt and wr. The <b>window</b> <b>sizes</b> may vary, but in simpler implementations they are fixed. The <b>window</b> <b>size</b> must be greater than zero for any progress to be made.|$|R
30|$|Processed_Data_Emails_Windows_Size_ 1 - 12 _Trust_Values files contain {{experiences}} {{based on}} different <b>window</b> <b>sizes</b> (from 1 to 12) and corresponding trust values assigned by subjects. The maximum <b>window</b> <b>size</b> considered is 12 since we mention in Section ‘Results’ that increasing the <b>window</b> <b>size</b> beyond 12 does not improved the result (reduce the MAE).|$|R
30|$|B[*]' {{has to be}} {{made for}} {{selecting}} a suitable computational <b>window</b> <b>size.</b> Moreover, the large <b>window</b> <b>size</b> generally makes it difficult to locate the object.|$|R
30|$|Here, an {{individual}} chromosome is denoted by i. The average percentage of japonica SNPs on each chromosome is denoted by Om. The optimal <b>window</b> <b>size</b> {{was defined as}} that with a maximum value of E; values of E ranged from - 29 to 0.963. This maximum value of E occurred with a <b>window</b> <b>size</b> of 9. The percentage of indica SNPs was at its second highest (0.966) with a <b>window</b> <b>size</b> of 9. At a <b>window</b> <b>size</b> of 10, the E value dropped rapidly for japonica SNPs (0.037) and indica SNPs (- 0.018). Thus, a <b>window</b> <b>size</b> of 9 {{was selected as the}} optimum for data analysis (Additional file 7 : Figure S 3).|$|R
30|$|The {{choice of}} the <b>window</b> <b>size</b> for the {{fragmentation}} index depends on the application and using multiple <b>window</b> <b>sizes</b> may be appropriate for regressions and classifications.|$|R
30|$|At this stage, {{frame size}} (n x×n y) and spatial <b>window</b> <b>size</b> (T) {{substantially}} impact performance rates. As {{for the previous}} stage, when fixing T, throughput decreases for increasing frame dimensions. However, for a fixed frame dimension, the impact of increasing the spatial <b>window</b> <b>size</b> is translated into higher throughput; from our analysis, our separate bi-dimensional convolution implementations attain better performance as <b>window</b> <b>size</b> increases, mainly due to the avoidance of memory latency effects. This improvement, though, is expected to stabilize for larger <b>window</b> <b>sizes</b> (that are usually not common in McGM).|$|R
50|$|When a {{receiver}} advertises a <b>window</b> <b>size</b> of 0, the sender stops sending data and starts the persist timer. The persist timer {{is used to}} protect TCP from a deadlock situation that could arise if a subsequent <b>window</b> <b>size</b> update from the receiver is lost, and the sender cannot send more data until receiving a new <b>window</b> <b>size</b> update from the receiver. When the persist timer expires, the TCP sender attempts recovery by sending a small packet so that the receiver responds by sending another acknowledgement containing the new <b>window</b> <b>size.</b>|$|R
30|$|As we expected, the {{accuracy}} of applying doc 2 vec for a <b>window</b> <b>size</b> of 10 is higher than with a <b>window</b> <b>size</b> of 5, but their difference is negligible.|$|R
40|$|In {{order to}} analyse surface {{electromyography}} (EMG) signals, {{it is necessary}} to extract the features based on a time or frequency domain. These approaches are based on the mathematical assumption of signal stationarity. Stationarity of EMG signals is thoroughly examined, especially in isotonic contractions. According to research, conflicting results have been identified depending on varying <b>window</b> <b>sizes.</b> Therefore, in this study, the authors endeavoured to determine the suitable <b>window</b> <b>size</b> to analyse EMG signals during isotonic contractions utilising stationary tests, reverse arrangement (RA), and modified reverse arrangement (MRA). There were slight differences in the average percentages of signal stationarity for RA and MRA tests in 100 ms, 500 ms, and 1000 ms <b>window</b> <b>sizes.</b> However, there was none for the 200 ms <b>window</b> <b>size.</b> On average, a <b>window</b> <b>size</b> of 200 ms provided stationary information with 88. 57 % of EMG signals compared to other <b>window</b> <b>sizes.</b> This study also recommended the MRA test to determine EMG signals stationarity for future studies, as the performances were better in comparison to RA tests. However, the following recommendation is only valid for <b>window</b> <b>sizes</b> greater than 200 ms. For a real-time application, the size of the analysis window together with the processing time should be less than 300 ms and a <b>window</b> <b>size</b> of 200 ms is applicable for isotonic contractions...|$|R
40|$|Abstract. This study {{investigated}} whether document retrieval {{can be improved}} if documents are divided into smaller sub-documents or passages and the retrieval score for these pas-sages are incorporated in the final retrieval score for the whole document. The documents were segmented by sliding a window of a certain size across the document and extract-ing the words displayed each time the window stopped. A retrieval score was calculated {{for each of the}} passages extracted and the highest score obtained by a passage of that size was taken as the document’s passage-level score for that <b>window</b> <b>size.</b> A range of <b>window</b> <b>sizes</b> was tried. The experimental results indicated that using a fixed <b>window</b> <b>size</b> of 50 words gave better results than other <b>window</b> <b>sizes</b> for the TREC- 5 and TREC- 6 test collections. This <b>window</b> <b>size</b> yielded a significant retrieval improve-ment of 24 % compared to using the whole-document retrieval score (using the traditional tf*idf weighting scheme with cosine normalisation). However, combining this window score and the whole-document retrieval score did not yield a retrieval improvement. Using a variable <b>window</b> <b>size</b> (ranging from 50 to 400 words) yielded a retrieval improvement of about 5 % over using a fixed <b>window</b> <b>size</b> of 50. Different <b>window</b> <b>sizes</b> were found to work best for different queries. If the best <b>window</b> <b>size</b> to use for each query could be predicted accurately, a maximum retrieval improvement of 42 % could be obtained. Subsequent work suggests that the usefulness of passage-level evidence in document retrieval depends on the weight-ing scheme and type of normalisation used in the retrieval method. 1...|$|R
40|$|Abstract. This study {{investigated}} whether information retrieval {{can be improved}} if documents are divided into smaller subdocuments or passages, and the retrieval score for these passages are incorporated in the final retrieval score for the whole document. The documents were segmented by sliding a window of a certain size across the document. Each time the window stopped, it displayed/extracted {{a certain number of}} contiguous words. A retrieval score was calculated for each of the passages extracted, and the highest score obtained by a passage of that size was taken as the document’s “window score ” for that <b>window</b> <b>size.</b> A range of <b>window</b> <b>sizes</b> were tried. The experimental results indicated that using a fixed <b>window</b> <b>size</b> of 50 gave better results than other <b>window</b> <b>sizes</b> for the TREC test collection. This <b>window</b> <b>size</b> yielded a significant retrieval improvement of 24 % compared to using the whole-document retrieval score. However, combining this window score and the whole-document retrieval score did not yield a retrieval improvement. Identifying the highest window score for each document (using <b>window</b> <b>sizes</b> varying from 50 to 400 words), and adopting it as the document retrieval score yielded a retrieval improvement of about 5 % over taking the size- 50 window score. Different <b>window</b> <b>sizes</b> were found to work best for different queries. If we could predict accurately the best <b>window</b> <b>size</b> to use for each query, a maximum retrieval improvement of 42 % could be obtained. However, an effective way has not been found for predicting which <b>window</b> <b>size</b> would give the best results for each query...|$|R
40|$|This study {{investigated}} whether document retrieval {{can be improved}} if documents are divided into smaller sub-documents or passages and the retrieval score for these passages are incorporated in the final retrieval score for the whole document. The documents were segmented by sliding a window of a certain size across the document and extracting the words displayed each time the window stopped. A retrieval score was calculated {{for each of the}} passages extracted and the highest score obtained by a passage of that size was taken as the document’s passage-level score for that <b>window</b> <b>size.</b> A range of <b>window</b> <b>sizes</b> was tried. The experimental results indicated that using a fixed <b>window</b> <b>size</b> of 50 words gave better results than other <b>window</b> <b>sizes</b> for the TREC- 5 and TREC- 6 test collections. This <b>window</b> <b>size</b> yielded a significant retrieval improvement of 24 % compared to using the whole-document retrieval score (using the traditional tf*idf weighting scheme with cosine normalisation). However, combining this window score and the whole-document retrieval score did not yield a retrieval improvement. Using a variable <b>window</b> <b>size</b> (ranging from 50 to 400 words) yielded a retrieval improvement of about 5 % over using a fixed <b>window</b> <b>size</b> of 50. Different <b>window</b> <b>sizes</b> were found to work best for different queries. If the best <b>window</b> <b>size</b> to use for each query could be predicted accurately, a maximum retrieval improvement of 42 % could be obtained. Subsequent work suggests that the usefulness of passage-level evidence in document retrieval depends on the weighting scheme and type of normalisation used in the retrieval method...|$|R
3000|$|... the <b>window</b> <b>size</b> to {{estimate}} the background baseline DC: the grouping spatial <b>window</b> <b>size</b> to convert sub-pixel target velocity to the pixel target velocity in the frame (as an input to the DPA) [...]...|$|R
30|$|For the IDWI {{interpolation}} to work, {{we require}} {{at least three}} non-noisy pixels in any given window. Hence, selection of <b>window</b> <b>size</b> {{plays an important role}} in this adaptive technique. For processing any given pixel in an image, a 3 [*]×[*] 3 window is used initially. As we require at least three non-noisy pixels for the IDWI calculation, the <b>size</b> of the <b>window</b> increases depending on the presence of non-noisy pixel in the current processing window (i.e., if the initial <b>window</b> <b>size</b> is 3 [*]×[*] 3 and we do not have three non-noisy pixels, then the <b>window</b> <b>size</b> increases). For example, if the number of non-noisy pixel is 3, then 3 [*]×[*] 3 window is used for calculation of weights. If number of non-noisy pixel is 2 then the <b>window</b> <b>size</b> is increased by 2 (5 [*]×[*] 5 for this case) from the initial size. In this case, if the current processing window (3 [*]×[*] 3) has only one non-noisy pixel, then the <b>window</b> <b>size</b> is increased by 4 (7 [*]×[*] 7 for this case). If there is no non-noisy pixel in the current processing window (3 [*]×[*] 3), then the <b>window</b> <b>size</b> is increased by 6 (9 [*]×[*] 9 for this case). After increasing the <b>window</b> <b>size,</b> the algorithm counts the number of non-noisy pixel in the new window. For example, if a 3 [*]×[*] 3 window has one non-noisy pixel, then the <b>window</b> <b>size</b> is increased to 7 [*]×[*] 7. If there is only one non-noisy pixel in the new 7 [*]×[*] 7 <b>window,</b> then <b>window</b> <b>size</b> will be increased by 4 (11 [*]×[*] 11 for this case). This process is repeated for the entire image.|$|R
30|$|As {{the first}} {{category}} of service differentiation or fairness, there are some schemes that directly control TCP congestion <b>window</b> <b>size</b> so as to mitigate the unfairness issue of TCP in IEEE 802.11 MAC protocol [6, 7]. Pilosof et al. [6] have exhibited that the AP in a Hot Spot network favors uplink TCP flows more than downlink TCP flows and its buffer capacity affects the fairness among stations, and then proposed the solution that the AP directly manipulates the advertised TCP <b>window</b> <b>size</b> included in TCP acknowledgment (ACK) packets passing through it. Lee et al. have proposed the solution of extending the idea in [6] {{in the way that}} AP modifies advertised TCP <b>window</b> <b>size</b> by reflecting a maximally achievable TCP <b>window</b> <b>size</b> into the computation of advertised <b>window</b> <b>size</b> in addition to inspecting current buffer availability [7].|$|R
50|$|For more {{efficient}} use of high-bandwidth networks, a larger TCP <b>window</b> <b>size</b> may be used. The TCP <b>window</b> <b>size</b> field controls the flow of data and its value is limited to between 2 and 65,535 bytes.|$|R
30|$|Table  4 {{compares the}} average {{validation}} MAPE for different sizes {{of the training}} window across various models, meters, and validation <b>window</b> <b>sizes.</b> It shows that, in general, increasing the training <b>window</b> <b>size</b> improves the forecasting performance (reduces MAPE), which indicates a relatively stable behavior of most meters {{during the period of}} at least 96 days (about three months). However, there was 1 m (4429) with the best training <b>window</b> <b>size</b> (providing the lowest value of MAPE) of 48 days and another meter (5521) with the best training <b>window</b> <b>size</b> of 576 h (24 days) only. Apparently, these 2 m were exposed to a faster concept drift than the other four ones.|$|R
40|$|In {{this study}} we {{evaluated}} the performance of individual tree detection in high and low pulse density lidar datasets, applying variable <b>windows</b> <b>size</b> (VWS) and fixed <b>windows</b> <b>size</b> (FWS) for local maxima filtering implemented in FUSION softwares CanopyMaxima tool. We verified that high pulse density and fixed <b>windows</b> <b>size</b> for 1 m x 1 m (FWS_ 1) had a better performance to individual tree detection (accuracy ranged between 4 and 35 %). We also verified that when increase the <b>window</b> <b>size</b> in FWS, the accuracy was decreasing. The performance in VWS both in high and low density was less than FWS_ 1 size. Pages: 6073 - 608...|$|R
40|$|This study {{presented}} an efficient time-frequency analysis scheme for vibration signals with transients. The scheme was developed {{based on the}} short-time Fourier transform with varying <b>window</b> <b>size</b> over time. The variable <b>window</b> <b>size</b> {{was determined by the}} local kurtosis. In regions where the kurtosis measured relatively high, a large <b>window</b> <b>size</b> was applied to improve the resolution of time-frequency image. Conversely, a small <b>window</b> <b>size</b> was applied to regions where the kurtosis measured relatively low. The method was tested by simulation signals and vibration signals in SNR 10 dB Gaussian noise. The results showed that the stationary or non-stationary signals with transients can be retrieved in time-frequency image...|$|R
50|$|<b>Window</b> <b>size</b> - LAPB {{supports}} {{an extended}} <b>window</b> <b>size</b> (modulo 128 and modulo 32768) where {{the maximum number}} of outstanding frames for acknowledgment is raised from 7 (modulo 8) to 127 (modulo 128) and 32767 (modulo 32768).|$|R
30|$|Find {{the number}} of non-noisy pixels (k) in the current {{processing}} window. If k is equal to 0, then increase the <b>window</b> <b>size</b> by 6 to get the <b>window</b> <b>size</b> 9 [*]×[*] 9 and then find the weights from their positions of non-noisy pixels. In this example, {{the number of}} non-noisy pixels in the current processing window is k[*]=[*] 0. So the <b>window</b> <b>size</b> was increased from 3 [*]×[*] 3 to 9 [*]×[*] 9.|$|R
50|$|Go-Back-N ARQ is a {{specific}} instance of the automatic repeat request (ARQ) protocol, in which the sending process continues to send a number of frames specified by a <b>window</b> <b>size</b> even without receiving an acknowledgement (ACK) packet from the receiver. It is a special case of the general sliding window protocol with the transmit <b>window</b> <b>size</b> of N and receive <b>window</b> <b>size</b> of 1.It can transmit N frames to the peer before requiring an ACK.|$|R
40|$|The sliding window-based {{method is}} one of the most used method for {{automatic}} Electrocardiogram (ECG) signal quality classification. Based on this method, ECG signals are generally divided into small segments depending on a <b>window</b> <b>size</b> and these segments are then used in another classification process, e. g., feature extraction. The segmentation step is necessary and important for signal classification and signal segments with different <b>window</b> <b>sizes</b> can directly affect the performance of classification. However, in signal quality classification, the <b>window</b> <b>size</b> is often randomly selected and further analysis on the most appropriate <b>window</b> <b>sizes</b> is thus required. In this paper, an extensive investigation of the effects of <b>window</b> <b>size</b> on signal quality classification is presented. A set of statistical-amplitude-based features widely used in the literature was extracted based on 10 different <b>window</b> <b>sizes,</b> ranging from 1 to 10 seconds. To construct signal quality classification models, four well-known machine learning techniques, i. e., Decision Tree, Multilayer Perceptron, k-Nearest Neighbor, and Naïve Bayes, were employed. The performance of the quality classification models was validated on an ECG dataset collected using wireless sensors from 20 volunteers while performing routine activities, e. g.,sitting, walking, and jogging. The evaluation results obtained from four machine-learning classifiers demonstrated that the performance of signal quality classification using <b>window</b> <b>sizes</b> of 5 and 7 seconds were good compared with other sizes...|$|R
30|$|TCP and UDP do {{not have}} an {{intrinsic}} mechanism to regulate the bandwidth when a gateway is shared, but the TCP (in its various versions) admits congestion and flux controls, while the UDP does not implement any of them. Every TCP connection keeps track of two window sizes: its own sending window and the destination <b>window</b> <b>size.</b> Congestion control is obtained by allowing the sender <b>window</b> <b>size</b> to increase when packets are properly sent and to decrease when the resources are not enough to satisfy the bandwidth request. Flux control is obtained by choosing a sending rate which is given by the minimum between the sender <b>window</b> <b>size</b> and the destination <b>window</b> <b>size.</b>|$|R
40|$|Many of the despeckling filters {{currently}} available (Mean, Median, Lee Sigma, Lee MMSE, Kuan, Frost, etc.) operate by smoothing over a fixed <b>window,</b> whose <b>size</b> must {{be decided by}} two competing factors. Over homogeneous regions large <b>window</b> <b>sizes</b> are needed to improve speckle reduction by averaging. However, a large <b>window</b> <b>size</b> reduces the fundamental resolution of the algorithm, as with multi-looking...|$|R
50|$|<b>Window</b> <b>sizes</b> are not uniform.|$|R
