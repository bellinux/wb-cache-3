264|85|Public
5|$|Each {{background}} processor {{consisted of}} a computation section, a control section and local memory. The computation section performed 64-bit scalar, floating point and vector arithmetic. The control section provided instruction buffers, memory management functions, and a <b>real-time</b> <b>clock.</b> 16 kwords (128 kbytes) of high-speed local memory was incorporated into each background processor for use as temporary scratch memory.|$|E
5|$|The PocketStation was a {{miniature}} game console created by SCE as a peripheral {{for the original}} PlayStation. Released exclusively in Japan on December 23, 1999, it featured a monochrome LCD, a speaker, a <b>real-time</b> <b>clock</b> and infrared communication capability. It {{could also be used}} as a standard PlayStation memory card by connecting it to a PlayStation memory card slot. It was extremely popular in Japan and Sony originally had plans to release it in the United States but the plan was ultimately scrapped due to various manufacturing and supply-and-demand problems.|$|E
5|$|Microsoft Windows {{keeps the}} system <b>real-time</b> <b>clock</b> in local time. This causes several problems, {{including}} compatibility when multi booting with operating systems {{that set the}} clock to UTC, and double-adjusting the clock when multi booting different Windows versions, such as with a rescue boot disk. This approach is a problem even in Windows-only systems: there is no support for per-user timezone settings, only a single system-wide setting. In 2008 Microsoft hinted that future versions of Windows will partially support a Windows registry entry RealTimeIsUniversal that had been introduced many years earlier, when Windows NT supported RISC machines with UTC clocks, but had not been maintained. Since then at least two fixes related to this feature have been published by Microsoft.|$|E
5000|$|<b>Real-Time</b> <b>Clocks</b> - Programmable, line frequency, or crystal {{controlled}} intervals ...|$|R
50|$|Stuart {{conceived}} installing battery-operated <b>real-time</b> <b>clocks</b> into computers, {{for which}} he received royalties until nearly 2000. Stuart jokingly admits contributing to the Year 2000 problem.|$|R
25|$|MEMS <b>real-time</b> <b>clocks</b> {{are used}} in systems that require precise time measurements. Smart meters for gas and {{electricity}} are an example that is consuming significant quantities of these devices.|$|R
25|$|T3Rrupt was {{generated}} {{at regular intervals}} from a hardware timer to update the AGC's <b>real-time</b> <b>clock.</b>|$|E
25|$|New {{genres of}} games were {{developed}} {{due to the}} advent of 64DD's rewritable mass storage, <b>real-time</b> <b>clock</b> (RTC), and Internet appliance functionality. However, the system's commercial failure required many 64DD games to be released on traditional Nintendo 64 cartridges alone, ported to other consoles, or canceled.|$|E
25|$|RTC {{and other}} add-on modules are {{attached}} as slaves to the processing and communication section for various input/output functions. On a modern meter most {{if not all}} of this will be implemented inside the microprocessor, such as the <b>real-time</b> <b>clock</b> (RTC), LCD controller, temperature sensor, memory and analog to digital converters.|$|E
40|$|We study {{time and}} {{knowledge}} in synchronous and asynchronous reliable distributed systems. For {{both types of}} systems, we describe clocks {{that can be used}} as if they were perfectly synchronized <b>real-time</b> <b>clocks</b> in the solution of a large class of problems that we formally characterize. For this same class of problems, we also propose a broadcast primitive that can be used as if it achieves common knowledge. Our clocks and broadcast primitive are tools that considerably simplify the task of designing and proving correct distributed algorithms: the designer can assume that processors have access to <b>real-time</b> <b>clocks</b> and the ability to achieve common knowledge. The latter can be used to implement the abstraction of shared memory...|$|R
25|$|MEMS <b>Real-time</b> <b>clocks</b> (RTCs) are ICs {{that track}} {{time of day}} and date. They include MEMS resonators, {{sustaining}} amps, and registers that increment with time, for instance counting days, hours, minutes and seconds. They also include auxiliary functions like alarm outputs and battery management.|$|R
50|$|All models {{featured}} a CPU {{with at least}} a floating-point arithmetic unit, Memory map with access protection, Memory write protection, Two <b>real-time</b> <b>clocks,</b> a Power fail-safe, an External interface, Ten internal interrupt levels. Also a Multiplexor input/output processor (MIOP) featuring Channel A with eight sub-channels.|$|R
25|$|The master {{frequency}} {{was further}} divided through a scaler, first by five using a ring counter {{to produce a}} 102.4kHz signal. This was then divided by two through 17 successive stages called F1 (51.2kHz) through F17 (0.78125Hz). The F10 stage (100Hz) was fed back into the AGC to increment the <b>real-time</b> <b>clock</b> and other involuntary counters using Pinc (discussed below). The F17 stage was used to intermittently run the AGC when it was operating in the standby mode.|$|E
25|$|None of {{the current}} Raspberry Pi models have a {{built-in}} <b>real-time</b> <b>clock,</b> so {{they are unable to}} keep track of the time of day independently. As a workaround, a program running on the Pi can retrieve the time from a network time server or from user input at boot time, thus knowing the time while powered on. To provide consistency of time for the file system, the Pi does automatically save the time it has on shutdown, and re-installs that time at boot.|$|E
25|$|Nintendo {{designed}} the 64DD as an enabling {{technology for the}} development of new genres of games, which was principally accomplished by its three main design features: its dual storage strategy of cartridges and disks; its new <b>real-time</b> <b>clock</b> (RTC); and its Internet connectivity. The dual storage strategy of the Nintendo 64 plus the 64DD combines the traditional high speed cartridges, which are low-capacity, non-writable, and expensive but very fast along with the introduction of proprietary mass storage disks, which are large-capacity, rewritable, and cheap but only moderately fast.|$|E
50|$|MEMS <b>Real-time</b> <b>clocks</b> (RTCs) are ICs {{that track}} {{time of day}} and date. They include MEMS resonators, {{sustaining}} amps, and registers that increment with time, for instance counting days, hours, minutes and seconds. They also include auxiliary functions like alarm outputs and battery management.|$|R
5000|$|In {{some cases}} {{additional}} {{information is available}} (such as <b>real-time</b> <b>clocks).</b> In these cases, {{it is possible to}} achieve more efficient causal or consensus ordering for the Inputs, with a reduced number of messages, fewer message rounds, or smaller message sizes. See references for details ...|$|R
40|$|Failure {{detectors}} are {{a service}} that provides (ap-proximate) information about process crashes in a dis-tributed system. The well-known “eventually perfect” failure detector, 3 P, has been implemented in partially synchronous systems with unknown upper bounds on message delay and relative process speeds. However, previous implementations have overlooked an important subtlety with respect to measuring {{the passage of time}} in “celerating ” environments, in which absolute process speeds can continually increase or decrease while main-taining bounds on relative process speeds. Existing im-plementations either use action clocks, which fail in ac-celerating environments, or use <b>real-time</b> <b>clocks,</b> which fail in decelerating environments. We propose the use of bichronal clocks, which are a composition of action <b>clocks</b> and <b>real-time</b> <b>clocks.</b> Our solution can be read-ily adopted to make existing implementations of 3 P ro-bust to process celeration, which can result from hard-ware upgrades, server overloads, denial-of-service at-tacks, and other system volatilities. ...|$|R
25|$|In 1994, Wang {{released}} the slimline Alliance 750CD 80486 based PC in the United Kingdom. These machines used standard PC/AT keyboards and were entirely IBM compatible, shipping with MSDOS 5.0 and Windows 3.11 as standard. The only unusual feature was that system BIOS settings and the <b>real-time</b> <b>clock</b> were maintained by four standard AA batteries {{as opposed to}} a more typical solutionsuch as a specialty battery pack or lithium battery. While originally offered with a 33MHz 80486DX, the 750CD could be upgraded to later Socket 3 processors such as the 80486DX2 through the use of third party CPU upgrade adapters or interposers. This allowed upgrading to speeds beyond 50MHz without overclocking, or alternatively the potential for speeds in excess of 100MHz with overclocking, dependent on the processor used.|$|E
500|$|Of his {{decision}} not to show the heist itself, Tarantino {{has said that the}} reason was initially budgetary but that he had always liked the idea of not showing it and stuck with that idea {{in order to make the}} details of the heist ambiguous. He has said that the technique allows for the realization that the film is [...] "about other things", a similar plot outline that appears in the stage play Glengarry Glen Ross and its film adaptation in which the mentioned robbery is never shown on camera. Tarantino has compared this to the work of a novelist, and has said that he wanted the film to be about something that is not seen and that he wanted it to [...] "play with a <b>real-time</b> <b>clock</b> as opposed to a movie clock ticking".|$|E
500|$|In 1997, a {{follow-up}} entitled [...] {{was released in}} Japan. Designed exclusively for the Super Famicom's Satellaview peripheral, the game would make notable use of a voice broadcast system called SoundLink to provide voice-acting for {{several of the characters}} from A Link to the Past. The game takes place six years after the events in A Link to the Past and it is set in Hyrule's Light World. The game notably lacks a Link character, and instead the player character is known as the Hero of Light. The available player-characters are actually the male and female BS-X avatars that also featured in BS Zelda no Densetsu. The game was divided into four weekly episodes. These episodes were played live, and a voice-acted soundtrack simultaneously ran on the satellite network, sometimes containing suggestions, clues, and plot development for the game currently being broadcast. Each week, the player could only access certain portions of the overworld. Areas shrouded in clouds were unreachable. Two dungeons were accessible per week, however the episode ended only when time expired and not when the player had completed all the objectives for that week. The [...] game could only be played during the set hours because the SoundLink content was central to gameplay (and not stored on the base unit or flash-RAM cartridge in any way), and the timer was based on a <b>real-time</b> <b>clock</b> set by the satellite itself.|$|E
50|$|Early Apple Macintosh {{computers}} store time {{in their}} <b>real-time</b> <b>clocks</b> (RTCs) and HFS filesystems as an unsigned 32-bit number of seconds since 00:00:00 on 1 January 1904. After 06:28:15 on 6 February 2040, this will wrap around to 1904. HFS+, the default format for all of Apple's recent Macintosh computers, is also affected. The replacement Apple File System resolves this issue.|$|R
50|$|Given the {{extended}} recording times of data loggers, they typically feature {{a mechanism to}} record the date and time in a timestamp to ensure that each recorded data value {{is associated with a}} date and time of acquisition in order to produce a sequence of events. As such, data loggers typically employ built-in <b>real-time</b> <b>clocks</b> whose published drift can be an important consideration when choosing between data loggers.|$|R
50|$|EEPROM {{memory is}} used to enable {{features}} in other types of products that are not strictly memory products. Products such as <b>real-time</b> <b>clocks,</b> digital potentiometers, digital temperature sensors, among others, may have small amounts of EEPROM to store calibration information or other data {{that needs to be}} available in the event of power loss.It was also used on video game cartridges to save game progress and configurations, before the usage of external and internal flash memories.|$|R
2500|$|Trapdoor slot {{under the}} machine, for RAM {{expansion}} and <b>real-time</b> <b>clock</b> ...|$|E
2500|$|The Lisa {{computer}} <b>real-time</b> <b>clock</b> uses a 4-bit integer and {{the base}} year {{is defined as}} 1980, and the software won't accept any value below 1981 so the only valid range is 1981-1995. Thus it has a [...] "1995 problem". The <b>real-time</b> <b>clock</b> depended on a 4 x AA-cell NiCd pack of batteries that only lasted {{for a few hours}} when main power was not present, often causing the packs to burst open and leak corrosive acid that could ruin the circuit boards.|$|E
2500|$|... /YEAR=yyyy [...] Instructs the Windows {{core time}} {{function}} {{to ignore the}} year that the computer's <b>real-time</b> <b>clock</b> reports and instead use the one indicated. Example: /YEAR=2001. (This switch was created to assist in Y2K testing.) ...|$|E
25|$|A <b>real-time</b> {{hardware}} <b>clock</b> with battery backup, {{such as the}} DS1307, {{which is}} fully binary coded, may be added (often via the I²C interface).|$|R
40|$|We {{propose a}} new system model for {{asynchronous}} distributed systems that we call the message classification model. Motivation for this model is its ability 1) to support a restricted but useful form of "communication by time" by classifying messages as either "slow" or "fast" but without incorporating neither <b>real-time</b> <b>clocks</b> nor "time-outs", and 2) to describe transient and permanent network partitions. The message classification model allows the definition of different classes of classification schemes. To show that the model is indeed useful, we show how one can solve the consensus and the election problem for a certain class of message classification schemes...|$|R
50|$|Apple II system clocks, {{also known}} as <b>real-time</b> <b>clocks,</b> were {{commodities}} {{in the early days}} of computing. A clock/calendar did not become standard in the Apple II line of computers until 1987 with the introduction of the Apple IIGS. Although many productivity programs as well as the ProDOS operating system implemented time/date functions, users would have to manually enter this information every time they turned the computer on. Power users often had their Apple II's peripheral slots completely filled with expansion cards, so third party vendors came up with some unique solutions in order to mitigate this problem with products like the Serial Pro and No-Slot Clock.|$|R
2500|$|Cloudflare was {{affected}} by the 2016 leap second. Its DNS resolver implementation calculated a negative number when subtracting two timestamps obtained from the Go programming language's time.Now (...) function, which uses a <b>real-time</b> <b>clock</b> source. [...] This {{could have been avoided}} by using a monotonic clock source, but the Go language does not presently have a built-in API for that.|$|E
2500|$|In {{addition}} to writable storage, the <b>real-time</b> <b>clock</b> enables {{the existence of}} persistent game worlds according to a real-world clock and calendar, backed by a battery even when the system's main power is shut off. Nintendo's lead game designer, Shigeru Miyamoto, said this of the four-year development of the ultimately unreleased pet breeding game Cabbage: [...] "We're doing it on the 64DD because I {{wanted to make a}} clock function, such that even if the power is cut, can still raise the creature." ...|$|E
2500|$|A popular {{expansion}} for the Amiga 500 was the Amiga 501 {{circuit board}} {{that can be}} installed underneath the computer behind a plastic cover. It contains [...] RAM configured by default as [...] "Slow RAM" [...] or [...] "trap-door RAM" [...] and a battery-backed <b>real-time</b> <b>clock</b> (RTC). However, the RAM is pseudo-fast RAM, only accessible by the processor, but still as slow as chip RAM. The motherboard can be modified to relocate the trap-door RAM to the chip memory pool, provided a compatible Agnus chip is fitted on the motherboard.|$|E
40|$|Abstract. This paper {{proposes a}} {{framework}} for predicate detection in systems of processes with approximately-synchronized <b>real-time</b> <b>clocks.</b> Timestamps from these clocks are used to define two orderings on events: “definitely occurred before ” and “possibly occurred before”. These orderings lead naturally to definitions of 3 distinct detection modalities, i. e., 3 meanings of “predicate Φ held during a computation”, namely: PossT Φ (“Φ possibly held”), Def T Φ (“Φ definitely held”), and Inst Φ (“Φ definitely held at a specific instant”). This paper defines these modalities and gives efficient algorithms for detecting them; the algorithms are based on algorithms of Cooper and Marzullo, Garg and Waldecker, and Fromentin and Raynal...|$|R
5000|$|No {{discussion}} of BASICs on the 8-bit computers {{of the late}} '70s and early '80s {{would be complete without}} mentioning the importance of the PEEK and POKE functions for directly reading and writing to memory. Since these systems typically had no memory protection, this allowed a programmer to access portions of the operating system, or functions that would not otherwise be available. This also provided opportunities for user programs to hang the system. For example, a CP/M programmer might use a [...] function to allow BASIC to switch the console device to the serial port, if the system BIOS supported this. For machines with <b>real-time</b> <b>clocks,</b> a set of [...] instructions might have been used to access the time.|$|R
5000|$|Dallas Semiconductor, {{acquired}} by Maxim Integrated Products in 2001, designed and manufactured analog, digital, and mixed-signal semiconductors (integrated circuits, or ICs). Its specialties included communications products (including T/E and Ethernet products), microcontrollers, battery management, thermal sensing and thermal management, non-volatile random-access memory, microprocessor supervisors, delay lines, silicon oscillators, digital potentiometers, <b>real-time</b> <b>clocks,</b> temperature-compensated crystal oscillators (TCXOs), iButton, and 1-Wire products. The Dallas, Texas-based company {{was founded in}} 1984 and purchased by Maxim Integrated Products in 2001. Both the Maxim and Dallas Semiconductor brands were actively used until 2007. Since then, the Maxim name {{has been used for}} all new products, though the Dallas Semiconductor brand has been retained for some older products, which can be identified by [...] "DS" [...] {{at the beginning of their}} part numbers.|$|R
