125|26|Public
500|$|Plan 9's {{distributed}} operation {{relies on}} the per-process namespaces as well, allowing client and server processes to communicate across machines in the way just outlined. For example, the [...] command starts a remote session on a compute server. The command exports part of its local namespace, including the user's terminal's devices ( [...] , , [...] ), to the server, so that remote programs can perform input/output using the terminal's mouse, keyboard and display, combining the effects of <b>remote</b> <b>login</b> and a shared network filesystem.|$|E
2500|$|STRSST, STRPASTHR, STRSBS - Start System Service Tools, start {{pass through}} (<b>remote</b> <b>login),</b> start {{subsystem}} ...|$|E
50|$|The SSL {{certificate}} for the <b>remote</b> <b>login</b> portal is TLS_RSA_WITH_3DES_EDE_CBC_SHA, 112 bit keys, TLS 1.2.|$|E
5000|$|Experts in {{computer}} security, such as SANS Institute, {{recommend that the}} use of Telnet for <b>remote</b> <b>logins</b> should be discontinued under all normal circumstances, for the following reasons: ...|$|R
50|$|Around this time, Goble also {{developed}} a networking protocol for Unix, referred to as pnet, which was used at Purdue at the time before being displaced by TCP/IP. Pnet allowed <b>remote</b> <b>logins,</b> and <b>remote</b> execution of commands, among other capabilities.|$|R
40|$|Recently, Chang and Cheng {{proposed}} a robust mechanism for smart card based <b>remote</b> <b>logins</b> in a multi-server architecture. However, {{based on the}} security analyzes conducted by us, we find their mechanism is vulnerable against smart card lost problems, leak-of-verifier attack and session key disclosure attack. To eliminate all identified security threats in their mechanism, we further {{proposed a}}n improved version of two-factor based user authentication protocol in multi-server networks...|$|R
5000|$|STRSST, STRPASTHR, STRSBS - Start System Service Tools, start {{pass through}} (<b>remote</b> <b>login),</b> start {{subsystem}} ...|$|E
5000|$|... ncu (networked call unix) was {{the usual}} network <b>remote</b> <b>login</b> procedure, {{analogous}} to TCP/IP's telnet or rlogin protocols. Like rx, it was a netman client (for passing standard I/O to the remote machine), a netman server (for receiving standard I/O on the remote machine), a parent process for hosting the <b>remote</b> <b>login</b> procedure, and a DNIX handler (so that remote programs believed themselves {{to be connected to}} tty devices).|$|E
5000|$|The {{software}} {{enables a}} <b>remote</b> <b>login</b> {{to the local}} machine from the Internet or the local network, for data logs stored on the target machine.|$|E
50|$|As expected, ECN {{reduces the}} number of packets dropped by a TCP connection, which, by {{avoiding}} a retransmission, reduces latency and especially jitter. This effect is most drastic when the TCP connection has a single outstanding segment, when {{it is able to}} avoid an RTO timeout; this is often the case for interactive connections, such as <b>remote</b> <b>logins,</b> and transactional protocols, such as HTTP requests, the conversational phase of SMTP, or SQL requests.|$|R
40|$|Onion Routing {{provides}} anonymous {{connections that}} are strongly resistant to both eavesdropping and trac analysis. Unmodied Internet applications can use these anonymous connections {{by means of}} prox-ies. The proxies may also make communication anony-mous by removing identifying information from the data stream. Onion routing has been implemented on Sun Solaris 2. X with proxies for Web browsing, <b>remote</b> <b>logins,</b> and e-mail. This paper's contribution is a de-tailed specication of the implemented onion routing system, a vulnerability analysis based on this specica-tion, and performance results. ...|$|R
5000|$|Microsoft Windows XP/Vista/7/8/10 {{versions}} {{for single}} user <b>login</b> (<b>Remote</b> desktop).|$|R
5000|$|... after OS or {{system failure}} the key {{characteristic}} of IPMI compared with in-band system management such as by <b>remote</b> <b>login</b> {{to the operating}} system using SSH ...|$|E
50|$|Most of Bell Laboratories was trunked {{together}} via Datakit networking. On top of Datakit transport service, several {{operating systems}} (including UNIX) implemented UUCP for electronic mail and dkcu for <b>remote</b> <b>login.</b>|$|E
50|$|Personal {{computers}} running Unix-like operating systems, {{even if they}} do {{not provide}} any <b>remote</b> <b>login</b> services, may still use getty as a means of logging in on a local virtual console.|$|E
50|$|Services are {{software}} {{objects that}} provide a set of capabilities to other software. For example, a webserver provides HTTP service to web browsers. Other services include NFS for sharing files on a network, DHCP for dynamic IP address assignment, and Secure Shell for <b>remote</b> <b>logins.</b> Even higher level functions can be services, such as specific databases for e-commerce, finance, manufacturing control, etc. Typically, services are automatically started at boot up, long-lived, have common states (e.g. running, not running), relationship & dependencies (Sendmail service depends on Naming service, which depends on Networking services), and are critical to the dedicated function of the server.|$|R
5000|$|SSH {{provides}} a secure channel over an unsecured network in a client-server architecture, connecting an SSH client application with an SSH server. [...] Common applications include <b>remote</b> command-line <b>login</b> and <b>remote</b> command execution, but any network service can be secured with SSH. The protocol specification distinguishes between two major versions, {{referred to as}} SSH-1 and SSH-2.|$|R
40|$|INTRODUCTION Roughly speaking, we can {{divide the}} history of modern {{computing}} into the following eras: 1970 s: Timesharing (1 computer with many users) 1980 s: Personal computing (1 computer per user) 1990 s: Parallel computing (many computers per user) Until about 1980, computers were huge, expensive, and located in computer centers. Most organizations had a single large machine. In the 1980 s, prices {{came down to the}} point where each user could have his or her own personal computer or workstation. These machines were often networked together, so that users could do <b>remote</b> <b>logins</b> on other people's computers or share files in various (often ad hoc) ways. Nowadays some systems have many processors per user, either {{in the form of a}} parallel computer or a large collection of CPUs shared by a small user community. Such systems are usually called parallel or distributed computer systems. This development raises...|$|R
50|$|Secure Shell (SSH) is a {{cryptographic}} {{network protocol}} for operating network services securely over an unsecured network. The best known example application is for <b>remote</b> <b>login</b> to computer systems by users.|$|E
5000|$|... ttyskeepawake prevent idle system {{sleep when}} any tty (such as a <b>remote</b> <b>login</b> session) is active; a tty is {{inactive}} only when its idle time exceeds the system sleep timer, 1 to enable or 0 to disable ...|$|E
50|$|Simple Login Manager (SLiM) is a {{graphical}} display {{manager for}} the X Window System that can be run independently of any window manager or desktop environment. SLiM aims to be light, completely configurable, and suitable for machines on which <b>remote</b> <b>login</b> functionalities are not needed.|$|E
40|$|Abstract—the {{emerging}} {{scenario of}} real-time voice transmission over wireless medium is being exploited by various {{new set of}} applications to abate the growing need of a secured, low-cost and compact embedded device. In this project a new fully-functional embedded device has been proposed which is able to stream or transmit voice in real-time over WI-FI (IEEE 802. 11) with an acceptable audio quality. The proposed system has features such as feeding recorded audio directly into a remote computer for storage from a voice recorder module. Given the credit-card- sized single-board and low price, Raspberry Pi model B is the most appropriate as a portable device for our wireless requirements. In this project, the Raspberry Pi is intended to have capability of gathering audio from an USB microphone connected to it and transmit it to another remote computer in real time. The Raspberry Pi {{is connected to the}} workstation. So, there is no need of a separate monitor. To do this, SSH(Secure SHell) is used, which is a cryptographic network protocol for secure data communication, <b>remote</b> command-line <b>login,</b> <b>remote</b> command execution, and other secure network services between two networked nodes. Open source Linux based OS is used in this project to keep the cost low. Index Terms—Raspberry Pi, Wi-Fi, 802. 11, Wireless voice transmissio...|$|R
25|$|Plex Media Server can be remote {{controlled}} via a web interface. As Plex does support NAT-PMP and Universal Plug and Play protocols, the connection should be automatically configured. While a Plex account is reported necessary to help redirecting port and improve availability, configuring the ports manually does work, {{but when the}} users accesses the <b>remote</b> web interface, <b>login</b> and password to a PLex account are required.|$|R
40|$|The Image Retrieval and Processing System (IRPS) is a {{software}} package developed at Washington University {{and used by}} the NASA Regional Planetary Image Facilities (RPIF's). The IRPS combines data base management and image processing components to allow the user to examine catalogs of image data, locate the data of interest, and perform radiometric and geometric calibration of the data in preparation for analysis. Version 1. 0 of IRPS was completed in Aug. 1989 and was installed at several IRPS's. Other RPIF's use <b>remote</b> <b>logins</b> via NASA Science Internet to access IRPS at Washington University. Work was begun on designing and population a catalog of Magellan image products that {{will be part of}} IRPS Version 2. 0, planned for release by the end of calendar year 1991. With this catalog, a user will be able to search by orbit and by location for Magellan Basic Image Data Records (BIDR's), Mosaicked Image Data Records (MIDR's), and Altimetry-Radiometry Composite Data Records (ARCDR's). The catalog will include the Magellan CD-ROM volume, director, and file name for each data product. The image processing component of IRPS is based on the Planetary Image Cartography Software (PICS) developed by the U. S. Geological Survey, Flagstaff, Arizona. To augment PICS capabilities, a set of image processing programs were developed that are compatible with PICS-format images. This software includes general-purpose functions that PICS does not have, analysis and utility programs for specific data sets, and programs from other sources that were modified to work with PICS images. Some of the software will be integrated into the Version 2. 0 release of IRPS. A table is presented that lists the programs with a brief functional description of each...|$|R
5000|$|SSH is a {{protocol}} allowing secure <b>remote</b> <b>login</b> {{to a computer}} on a network using public-key cryptography. SSH client programs (such as [...] from OpenSSH) typically run {{for the duration of}} a <b>remote</b> <b>login</b> session and are configured to look for the user's private key in a file in the user's home directory (e.g., [...] ). For added security (for instance, against an attacker that can read any file on the local filesystem), it is common to store the private key in an encrypted form, where the encryption key is computed from a passphrase that the user has memorized. Because typing the passphrase can be tedious, many users would prefer to enter it just once per local login session. The most secure place to store the unencrypted key is in program memory, and in Unix-like operating systems, memory is normally associated with a process. A normal SSH client process cannot be used to store the unencrypted key because SSH client processes only last the duration of a <b>remote</b> <b>login</b> session. Therefore, users run a program called ssh-agent that runs the duration of a local login session, stores unencrypted keys in memory, and communicates with SSH clients using a Unix domain socket.|$|E
5000|$|Massey University {{has enabled}} IPv6 on its border and core campus routers. Its central network services, {{including}} DNS, external email and NTP are also enabled. Massey's main website is IPv6-enabled and <b>remote</b> <b>login</b> to some servers and network equipment also support IPv6 for systems administration and networking staff.|$|E
50|$|A {{terminal}} concentrator {{was also}} developed that year, since time-sharing {{was still a}} prevalent mode of computer use. In 1975, the network shrank slightly due to budgetary constraints, but the setback was only temporary. At that point, the network provided <b>remote</b> <b>login,</b> remote batch and file transfer user application services.|$|E
50|$|Chrome Remote Desktop {{supports}} both {{a remote}} assistance mode, allowing a user to control another person's computer (typically to diagnose or troubleshoot a problem) {{as well as}} a remote desktop mode where a user can connect to another one {{of his or her own}} machines remotely. While <b>remote</b> assistance <b>login</b> via PIN passwords is available for terminals running Windows, Mac, iOS, Android or Linux operating systems, the remote desktop functionality is supported for Windows, Mac and Linux operating systems with Linux support in beta. It uses VP8 video to display the remote computer's desktop to the user. Under Windows, it supports copy-paste and real time audio feed as well, but lacks an option to disable sharing and transmission of the audio stream.|$|R
40|$|The World Wide Web (WWW) is a {{globally}} distributed hypertext and hypermedia system. It has standardized methods (e. g. the Common Gateway Interface (CGI)) {{which allow}} to consult databases and to dynamically create WWW documents. The {{access to the}} information can be controlled and logged. Intranets are private networks which {{are closely related to}} the Internet and also use WWW technology to build their internal information systems. This paper will discuss World Wide Web technology concentrating on dynamically loadable and executable programs for remote machines. The applications are databases which share, access, and protect information in an Intranet environment. 1 1 Introduction The Internet started off as a U. S Department of Defence network in 1969 using a newly-created network protocol called TCP/IP. The Internet enabled basic services such as electronic mail, file transfer, and <b>remote</b> systems <b>login.</b> But, only {{in the last two years}} did the Internet reach mass popularity b [...] ...|$|R
40|$|Reducing {{the energy}} {{consumption}} of PCs {{is becoming increasingly}} important with rising energy costs and environmental concerns. Sleep states such as S 3 (suspend to RAM) save energy, but are often not appropriate because ongoing networking tasks, such as accepting <b>remote</b> desktop <b>logins</b> or performing background file transfers, must be supported. In this paper we present Somniloquy, an architecture that augments network interfaces to allow PCs in S 3 to be responsive to network traffic. We show that many applications, such as remote desktop and VoIP, can be supported without application-specific code in the augmented network interface by using application-level wakeup triggers. A further class of applications, such as instant messaging and peer-to-peer file sharing, can be supported with modest processing and memory resources in the network interface. Experiments using our prototype Somniloquy implementation, a USB-based network interface, demonstrates energy savings of 60 % to 80 % in most commonly occuring scenarios. This translates to significant cost savings for PC users...|$|R
50|$|Linux, UNIX and BSD support remote {{administration}} via <b>remote</b> <b>login,</b> typically via SSH (The {{use of the}} Telnet protocol {{has been}} phased out due to security concerns). X-server connection forwarding, often tunnelled over SSH for security, allows GUI programs to be used remotely. VNC is also available for these operating systems.|$|E
50|$|The {{terminal}} emulator process must also handle terminal control commands, e.g., for resizing the screen. Widely used {{terminal emulator}} programs include xterm, GNOME Terminal, Konsole, and Terminal. <b>Remote</b> <b>login</b> handlers such as ssh and telnet servers {{play the same}} role but communicate with a remote user instead of a local one. Also consider programs such as expect.|$|E
50|$|Any type of {{a service}} which {{requires}} consistently low latency or jitter-free transmission (whether in low or high traffic bandwidths) can be severely affected, or even rendered unusable by the effects of bufferbloat. Examples are voice calls, online gaming, video chat, and other interactive applications such as instant messaging and <b>remote</b> <b>login.</b> Latency {{has been identified as}} more important than raw bandwidth for many years.|$|E
40|$|With {{the rapid}} growth of {{information}} technologies, mobile devices have been utilized in a variety of services such as e-commerce. When a remote server provides such e-commerce services to a user, it must verify the legitimacy of the user over an insecure communication channel. Therefore, remote user authentication has been widely deployed to verify the legitimacy of <b>remote</b> user <b>login</b> requests using mobile devices like smart cards. In this paper we propose a smart card-based authentication scheme that provides both user anonymity and mutual authentication between a remote server and a user. The proposed authentication scheme is a simple and efficient system applicable to the limited resource and low computing performance of the smart card. The proposed scheme provides not only resilience to potential attacks in the smart card-based authentication scheme, but also secure authentication functions. A smart card performs a simple one-way hash function, the operations of exclusive-or and concatenation in the authentication phase of the proposed scheme. The proposed scheme also provides user anonymity using a dynamic identity and key agreement, and secure password change...|$|R
40|$|Today we {{are going}} up against {{with the issue of}} high {{dimensionality}} and outsized measure of information, network intrusion detection is always the focus of current research in the network security field. It is the spoiling of data security rules by pernicious exercises. Interruption discovery (ID) is a progression of strategies for distinguishing and perceiving incredulous activities that make the move acknowledgment of benchmarks of protection/classification, prominence, unwavering quality, and accessibility of a PC based system framework. The KDD Cup 99 dataset has been the purpose of fascination for some analysts in the field of interruption discovery from the most recent decade. Numerous scientists have contributed their endeavors to break down the dataset by various methods. It grants recognizing Denial of organization (DoS), User to root (U 2 R), <b>Remote</b> to <b>login</b> (R 2 L) and Probe assault. For the identification of interruption/dangers distinctive information mining calculation has been connected by different creators. In this paper, we present the literature study of the previous work done in the field of intrusion detection with their merits and demerits...|$|R
40|$|Abstract—The use of covert application-layer tunnels {{to bypass}} {{security}} gateways has become quite popular in recent years. By encapsulating blocked or controlled protocols such as peer-to-peer, chat and e-mail into others {{allowed by the}} security policies, such as HTTP, SSH or even DNS, both legitimate and malicious users can effectively neutralize many security restrictions enforced at the network edge. Traditional firewalling techniques, based on Application Layer Gateways and even pattern-matching mechanisms are becoming practically useless as tunneling tools grow more sophisticated. In this paper we propose an effective {{solution to this problem}} based on a statistical traffic classification technique. Our mecha-nism relies on the creation of a statistical fingerprint of legitimate usage of a given protocol, such as regular <b>remote</b> interactive <b>logins</b> or secure copying activities. Such fingerprint can then be used to detect with high accuracy non-legitimate sessions, i. e., sessions that tunnel other protocols. Results from experiments conducted on a live network suggest that the technique can be very effective, even when the application layer protocol used as a tunnel is encrypted, such {{as in the case of}} SSH. I...|$|R
