0|2765|Public
5000|$|<b>Real-time</b> <b>operating</b> system, Comparison of <b>real-time</b> <b>operating</b> systems ...|$|R
40|$|This master's {{thesis is}} focused on {{benchmarking}} of <b>Real-Time</b> <b>Operating</b> Systems uC/OS-II and uC/OS-III. It describes the basic features of these systems and metrics used for benchmarking of <b>Real-Time</b> <b>Operating</b> Systems. Selected test methods are implemented and based on them are then compared the performance of <b>Real-Time</b> <b>Operating</b> Systems uC/OS-II and uC/OS-III...|$|R
40|$|The {{support systems}} for Radio Base Stations (RBS) are getting {{increasingly}} advanced. There are demands to support numerous RBS configurations, multiple and {{alternative energy sources}} such as wind a solar, different cooling systems and alarm handling. The support system is desired to be modular, reusable and upgradable. This requires more advanced software solutions utilizing the facilities of a <b>real-time</b> <b>operating</b> system. <b>Real-time</b> capabilities and performance are important factors when selecting a <b>real-time</b> <b>operating</b> system for an application. There is no standard method or tool for benchmarking <b>real-time</b> <b>operating</b> systems, neither is there an independent organization that verify and publish benchmark results of <b>real-time</b> <b>operating</b> systems. This thesis studies benchmarking of <b>real-time</b> <b>operating</b> systems which could be suitable for Radio Base Station support systems. A survey of small <b>real-time</b> <b>operating</b> system was done that focus on kernel services and available middleware. Different benchmarking methods were studied and presented in a benchmarking survey. A portable benchmark tool based on rhealstone was implemented and is {{discussed in terms of}} portability and the information it provides. Two <b>real-time</b> <b>operating</b> systems Quadros RTXC and Freescale MQX was benchmarked. The results show there can be a considerable difference in performance of small <b>real-time</b> <b>operating</b> systems. The thesis ends with a discussion about benchmarking of <b>real-time</b> <b>operating</b> systems in general that emphasises the importance of requirements and that the selection of scheduling algorithm, priority assignments and the design of the application {{plays a major role in}} obtaining the best performance. Extending the benchmark tool to include stress testing, network performance, memory footprint and power consumption is suggested. Finally it is called for an independent organization which could verify benchmark results of <b>real-time</b> <b>operating</b> systems and provide benchmarking tools...|$|R
40|$|The {{behaviour}} of a real-time {{system can}} be validated at the system level {{by means of a}} <b>real-time</b> <b>operating</b> system model in a VHDL simulation environment. The model consists of the <b>real-time</b> <b>operating</b> system, hardware described in behavioural VHDL and task descriptions written in C. The <b>real-time</b> <b>operating</b> system behaviour, HW/SW partitioning and HW/SW interfacing can be analysed by studying the simulation results. 1...|$|R
40|$|In this paper, {{we present}} a {{mechanism}} for runtime updating of all kernel modules of a highly modular dynamic <b>real-time</b> <b>operating</b> system. Our approach can help solve the lack of adaptability, extensibility, and flexibility of existing <b>real-time</b> <b>operating</b> systems. The dynamic <b>real-time</b> <b>operating</b> system will efficiently support {{a wide range of}} applications since any kernel module can be dynamically loaded at runtime to exactly suit the applications without necessitating a reboot of the system. 1...|$|R
40|$|This paper {{investigates the}} {{sensitivity}} of real-time systems running applications under operating systems that are subject to soft-errors. We consider applications using different <b>real-time</b> <b>operating</b> system services: scheduling, time and memory management, intertask communication and synchronization. We report results of a detailed analysis regarding the impact of soft-errors on <b>real-time</b> <b>operating</b> systems cores, {{taking into account the}} application timing constraints. Our results show the extent to which softerrors occurring in a <b>real-time</b> <b>operating</b> systemâ€™s kernel impact its reliability. 1...|$|R
30|$|The {{software}} platform adopts Linux <b>real-time</b> <b>operating</b> system.|$|R
5000|$|FreeRTOS - industry-leading microkernel, <b>real-time</b> <b>operating</b> system (RTOS) ...|$|R
5000|$|Interrupt, Interrupt handler, Comparison of <b>real-time</b> <b>operating</b> systems ...|$|R
5000|$|Purpose {{developed}} <b>real-time</b> <b>operating</b> system (For example VCRT) ...|$|R
50|$|The {{electronics}} subsystem {{is backed}} up with software {{that runs on}} the processor. The processor runs a <b>real-time</b> <b>operating</b> system based on FreeRTOS. The usage of a <b>real-time</b> <b>operating</b> system is standard in small embedded systems and will allow EQUiSat to respond to events in a timely, deterministic manner.|$|R
50|$|This {{offers the}} basic {{functions}} as <b>real-time</b> <b>Operating</b> System.|$|R
5000|$|INTEGRITY-178B is a royal-free ARINC 653-compliant <b>real-time</b> <b>operating</b> system ...|$|R
5000|$|Similar <b>real-time</b> <b>operating</b> {{systems are}} {{available}} from other vendors: ...|$|R
5000|$|... #Subtitle level 2: U.S. {{headquarters}} and <b>real-time</b> <b>operating</b> systems ...|$|R
50|$|TRON (acronym for The <b>Real-time</b> <b>Operating</b> system Nucleus) {{is an open}} <b>real-time</b> <b>operating</b> system kernel design. The {{project was}} started by Prof. Dr. Ken Sakamura of the University of Tokyo in 1984. The {{projects}} {{goal is to create}} an ideal computer architecture and network, to provide for all of societys needs.|$|R
50|$|BeRTOS is a <b>real-time</b> <b>operating</b> system {{designed}} for embedded systems.|$|R
5000|$|REX is a <b>Real-time</b> <b>operating</b> {{system with}} the {{following}} features: ...|$|R
5000|$|The [...] Data General RDOS (<b>Real-time</b> Disk <b>Operating</b> System) was a <b>real-time</b> <b>operating</b> system {{released}} in 1970. The software was only sold bundled with the companys popular Nova and Eclipse minicomputers.|$|R
25|$|Embedded {{systems that}} have fixed {{deadlines}} use a <b>real-time</b> <b>operating</b> system such as VxWorks, PikeOS, eCos, QNX, MontaVista Linux and RTLinux. Windows CE is a <b>real-time</b> <b>operating</b> system that shares similar APIs to desktop Windows but shares none of desktop Windows' codebase. Symbian OS also has an RTOS kernel (EKA2) starting with version 8.0b.|$|R
50|$|PikeOS {{combines}} a <b>real-time</b> <b>operating</b> system (RTOS) with a virtualization platform and Eclipse-based {{integrated development environment}} (IDE) for embedded systems. The PikeOS <b>real-time</b> <b>operating</b> system has been developed for safety and security-critical applications with certification needs {{in the fields of}} Aerospace & Defense, Automotive & Transportation, Industrial Automation & Medical, Network Infrastructures and Consumer Electronics.|$|R
5000|$|<b>Real-time</b> <b>operating</b> system - SABRE {{was one of}} {{the first}} such systems ...|$|R
50|$|MontaVista Linux (formerly named Hard Hat Linux) is a Linux {{distribution}} {{that has}} been enhanced to become a full <b>real-time</b> <b>operating</b> system. The work on real-time performance has since continued {{to a point where}} MontaVista claims to support hard real-time tasks on embedded Linux as of MontaVista Linux 4.0, with response times as fast as other <b>real-time</b> <b>operating</b> systems.|$|R
50|$|Many <b>real-time</b> <b>operating</b> systems use memory pools, {{such as the}} Transaction Processing Facility.|$|R
50|$|RTEMS, an {{open source}} <b>real-time</b> <b>operating</b> system {{containing}} a working Rate Monotonic Scheduler.|$|R
5000|$|Another {{alternative}} is to add a <b>real-time</b> <b>operating</b> system or embedded operating system ...|$|R
5000|$|Operating System Embedded - a {{proprietary}} <b>real-time</b> <b>operating</b> system {{by the same}} company ...|$|R
5000|$|... 1987: Wind River {{introduces}} VxWorks, {{a leading}} <b>real-time</b> <b>operating</b> system for embedded devices.|$|R
40|$|In {{real-time}} computing {{the accurate}} {{characterization of the}} performance and determinism that a particular <b>real-time</b> <b>operating</b> system/hardware combination can provide for real-time applications is essential. This issue is not properly addressed by existing performance metrics mainly {{due to the lack}} of completeness and generalization. In this paper we present a set of comprehensive, easy-to-implement and useful metrics covering three basic <b>real-time</b> <b>operating</b> system features: response to external events, intertask synchronization and resource sharing, and intertask data transferring. The evaluation of <b>real-time</b> <b>operating</b> systems using a set of fine-grained metrics is fundamental to guarantee that we can reach the required determinism in real-world applications. Publicad...|$|R
5000|$|... 1997: VxWorks, the <b>real-time</b> <b>operating</b> {{system for}} NASA's Mars Pathfinder mission, lands on Mars.|$|R
50|$|RT-Thread is an {{open source}} <b>real-time</b> <b>operating</b> system for {{embedded}} devices. It is distributed under the GPLv2+ licence. RT-Thread is developed by the RT-Thread Development Team based in China, after ten years' fully concentrated development. It is aimed to change the current situation in China {{that there is no}} well used open source <b>real-time</b> <b>operating</b> system in the microcontroller area.|$|R
40|$|This {{report is}} {{a moment in the}} course TDDB 72 : Concurrent Programming, <b>Operating</b> Systems, and <b>Real-Time</b> <b>Operating</b> Systems. The purpose of the report is to do a {{comparison}} of the CPU Scheduling of two different <b>real-time</b> <b>operating</b> systems, as a technical memo for a fictional company board. The company board has a new project and wants to know which of the <b>real-time</b> <b>operating</b> systems QNX or VxWork they should use in their system. The report discusses what a <b>real-time</b> <b>operating</b> system is, and what it should be suitable to use with. The main focus is scheduling of tasks in such systems. Especially two <b>real-time</b> <b>operating</b> systems are discussed, which are QNX and VxWorks. Both systems have many years at the market, and they both were created {{at the beginning of the}} 1980 s. The operating systems are found in many different kinds of devices; and theyâ€™re reaching as from being embedded in telecom hubs to operate off-planet vehicles etc. The different scheduling techniques that are mentioned in this report are pre-emptive scheduling, Round-Robin and sporadic scheduling. The scheduling methods can be combined, within a priority level, with base of the pre-emptive scheduling, or FIFO (first in first out) as i...|$|R
50|$|Deos, a {{time and}} space {{partitioned}} <b>real-time</b> <b>operating</b> system containing a working Rate Monotonic Scheduler.|$|R
50|$|Memory {{allocation}} is {{more critical}} in a <b>real-time</b> <b>operating</b> system {{than in other}} operating systems.|$|R
5000|$|RTX and RTX64 hard {{real-time}} software transforms Microsoft Windows into a <b>real-time</b> <b>operating</b> system (RTOS).|$|R
5000|$|OS-9 and OS-9000 - <b>real-time</b> <b>operating</b> {{systems for}} a wide range of {{embedded}} CPU architectures.|$|R
