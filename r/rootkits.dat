368|316|Public
5|$|Neil Rubenking of PC Magazine {{successfully}} {{installed the}} beta version on 12 malware-infected systems and commented on its small installation package (about 7 MB, {{depending on the}} operating system) and speedy installation. But the initial virus definition update took between 5 and 15 minutes, and the full installation occupied about 110 MB of disk space. Rubenking noted that the beta version sets Windows Update into fully automatic mode, although it can be turned off again through Windows Control Panel. Some full scans took {{more than an hour}} on infected systems; a scan on a clean system took 35 minutes. An on-demand scan test Rubenking conducted in June 2009 with the beta version found 89 percent of all malware samples: 30 percent of the commercial keyloggers, 67 percent of <b>rootkits,</b> but only half of the scareware samples. The product's real-time protection found 83 percent of all malware and blocked the majority of it: 40 percent of the commercial keyloggers and 78 percent of the <b>rootkits</b> were found.|$|E
5|$|Microsoft Security Essentials (MSE) is an {{antivirus}} software (AV) product that provides protection against {{different types of}} malicious software such as computer viruses, spyware, <b>rootkits</b> and Trojan horses. Before version 4.5, MSE ran on , Windows Vista and Windows 7, but not on Windows 8 and later, which have built-in AV components. MSE 4.5 and later do not run on Windows XP. The license agreement allows home users and small businesses to install and use the product free of charge. It replaces Windows Live OneCare, a discontinued commercial subscription-based AV service, and the free Windows Defender, which until Windows 8 protected users from only adware and spyware.|$|E
5|$|Microsoft Security Essentials is an {{antivirus}} software (AV) product that fights malicious software (malware), including computer viruses, spyware, Trojan horses and <b>rootkits.</b> It replaces Windows Live OneCare, a discontinued commercial subscription-based AV service, {{and the free}} Windows Defender, which until Windows 8 only protected users from adware and spyware. It automatically checks for and downloads the virus definitions it relies on from Microsoft Update, a web-based software service updated three times a day. Users may alternatively download the updates manually from the Microsoft Security Portal website. On 30 September 2011, a faulty definition update caused the product to incorrectly tag Google Chrome as malware. The issue was resolved within three hours. MSE originally ran on Windows XP, Windows Vista and Windows 7, although versions 4.5 and later do not run on Windows XP and Microsoft stopped producing definition updates for Windows XP on 14 July 2015.|$|E
5000|$|... {{option to}} hide things from system (<b>rootkit</b> behaviour, based on FU <b>Rootkit)</b> ...|$|R
50|$|AFX Windows <b>Rootkit</b> 2003 is a {{user mode}} <b>rootkit</b> that hides files, {{processes}} and registry.|$|R
50|$|Another {{action the}} Storm Worm takes is {{to install the}} <b>rootkit</b> Win32.agent.dh. Symantec pointed out that flawed <b>rootkit</b> code voids some of the Storm Worm author's plans. Later variants, {{starting}} around July 2007, loaded the <b>rootkit</b> component by patching existing Windows drivers such as tcpip.sys and cdrom.sys with a stub of code that loads the <b>rootkit</b> driver module without requiring it to have an entry in the Windows driver list.|$|R
5|$|Anti-phishing {{integrates}} with Internet Explorer. It analyzes sites, {{examining the}} website's URL, title, form, page layout, visible text and links, {{and uses a}} blacklist to detect phishing sites. Users are blocked access from suspected phishing sites, however are presented an option to continue. In PC Magazine testing, the feature blocked 22 of 24 phishing sites, while Internet Explorer 7 recognized 17 of the 24 sites. In PC Pro testing, the feature successfully blocked access to every phishing site it was tested against. Spam filtering no longer includes a language feature, Symantec claims it is less useful with current spam and created false positives. Tested against 1,500 messages by PC Magazine, Norton let {{over half of the}} spam to the inbox. Five percent of valid mail were marked as spam. This version utilizes Symantec's Veritas VxMS technology to better identify <b>rootkits.</b> VxMS allows Norton to find inconsistencies among files within directories and files at the volume level. A startup application manager allows users to prevent applications from launching at login. This release drops support for Windows 2000 and was compatible with Windows Vista upon its release with an update.|$|E
5|$|In October 2009, AV-TEST {{conducted}} {{a series of}} trials on the final build of the product in which it detected and caught 98.44 percent of 545,034 computer viruses, computer worms and software Trojan horses as well as 90.95 percent of 14,222 spyware and adware samples. It also detected and eliminated all 25 tested <b>rootkits,</b> generating no false-positives. Between June 2010 to January 2013, AV-TEST tested Microsoft Security Essentials 14 times; in 11 out of 14 cases, MSE secured AV-TEST certification of outperforming AV industry average ratings. Microsoft Security Essentials 2.0 was tested and certified on March 2011. The product achieved a protection score of 2.5 out of 6, a repair score of 3.5 out of 6 and a usability score of 5.5 out of 6. Report details show that although version 2.0 was able to find all malware samples of the WildList (widespread malware), it was not able to stop all Internet-based attacks because it lacks personal firewall and anti-spam capabilities. In an April 2012 test, version 2.1 achieved scores of 3.0, 5.5 and 5.0 for protection, repair and usability. Version 4.0 for Windows 7 SP1 (x64) was tested in June 2012 and achieved scores of 2.5, 5.5 and 5.5 for protection, repair and usability. In October 2012, the product lost its AV-TEST certification when Microsoft Security Essentials 4.1 achieved scores of 1.5, 3.5 and 5.5 for its protection, repair and usability.|$|E
25|$|Detecting <b>rootkits</b> {{is a major}} {{challenge}} for anti-virus programs. <b>Rootkits</b> have full administrative access to the computer and are invisible to users and hidden {{from the list of}} running processes in the task manager. <b>Rootkits</b> can modify {{the inner workings of the}} operating system and tamper with antivirus programs.|$|E
40|$|User-mode malware that drops a kernel module (<b>rootkit)</b> • Module (<b>rootkit)</b> manipulates OS {{objects and}} kernel data {{structures}} • User-mode malware only exposes its malicious behavior after the <b>rootkit</b> has successfully manipulated the kernel • To analyze its behavior, {{we have to}} allow evasive modular malware to manipulate kernel dat...|$|R
5000|$|.....since {{user mode}} {{applications}} all run {{in their own}} memory space, the <b>rootkit</b> needs to perform this patching in the memory space of every running application. In addition, the <b>rootkit</b> needs to monitor the system for any new applications that execute and patch those programs' memory space before they fully execute. Windows <b>Rootkit</b> Overview ...|$|R
50|$|RootkitRevealer is a {{proprietary}} freeware tool for <b>rootkit</b> detection on Microsoft Windows by Bryce Cogswell and Mark Russinovich. It runs on Windows XP and Windows Server 2003 (32-bit-versions only). Its output lists Windows Registry and file system API discrepancies that may {{indicate the presence}} of a <b>rootkit.</b> It is the same tool that triggered the Sony BMG copy protection <b>rootkit</b> scandal.|$|R
25|$|Modern <b>rootkits</b> do not elevate access, {{but rather}} {{are used to}} make another {{software}} payload undetectable by adding stealth capabilities. Most <b>rootkits</b> are classified as malware, because the payloads they are bundled with are malicious. For example, a payload might covertly steal user passwords, credit card information, computing resources, or conduct other unauthorized activities. A small number of <b>rootkits</b> may be considered utility applications by their users: for example, a rootkit might cloak a CD-ROM-emulation driver, allowing video game users to defeat anti-piracy measures that require insertion of the original installation media into a physical optical drive to verify that the software was legitimately purchased.|$|E
25|$|<b>Rootkits</b> {{employ a}} variety of {{techniques}} to gain control of a system; the type of rootkit influences the choice of attack vector. The most common technique leverages security vulnerabilities to achieve surreptitious privilege escalation. Another approach is to use a Trojan horse, deceiving a computer user into trusting the rootkit's installation program as benignin this case, social engineering convinces a user that the rootkit is beneficial. The installation task is made easier if the principle of least privilege is not applied, since the rootkit then does not have to explicitly request elevated (administrator-level) privileges. Other classes of <b>rootkits</b> can be installed only by someone with physical access to the target system. Some <b>rootkits</b> may also be installed intentionally by the owner of the system or somebody authorized by the owner, e.g. for the purpose of employee monitoring, rendering such subversive techniques unnecessary. The installation of malicious <b>rootkits</b> is commercially driven, with a pay-per-install (PPI) compensation method typical for distribution.|$|E
25|$|<b>Rootkits</b> can use kernel {{access to}} embed {{themselves}} in an operating system, becoming nearly impossible to remove.|$|E
40|$|AbstractRootkit {{is one of}} {{the most}} {{important}} issues of network communication systems, which is related to the security and privacy of Internet users. Because of the existence of the back door of the operating system, a hacker can use <b>rootkit</b> to attack and invade other people's computers and thus he can capture passwords and message traffic to and from these computers easily. With the development of the <b>rootkit</b> technology, its applications are more and more extensive and it becomes increasingly difficult to detect it. In addition, for various reasons such as trade secrets, being difficult to be developed, and so on, the <b>rootkit</b> detection technology information and effective tools are still relatively scarce. In this paper, based on the in-depth analysis of the <b>rootkit</b> detection technology, a new kind of the <b>rootkit</b> detection structure is designed and a new method (software), X-Anti, is proposed. Test results show that software designed based on structure proposed is much more efficient than any other <b>rootkit</b> detection software...|$|R
50|$|The <b>Rootkit</b> Arsenal: Escape and Evasion in the Dark Corners of the System is a {{book written}} by Bill Blunden, {{published}} by Jones & Bartlett Publishers in May 2009. The book takes the reader in depth about <b>rootkit</b> technology and uses. It covers topics such as IA-32 assembly, the Windows system architecture, kernel debugging, advanced <b>rootkit</b> development, and much more concerning <b>rootkit</b> technology {{and how it can}} be applied onto e.g. white hat hacking. The book also provides many source code examples on <b>rootkit</b> development and how to properly use it. It is required and recommended to have a fair understanding of computer programming and operating systems in order to fully comprehend the contents of the book, as the back cover states it is an advanced book on its topic.|$|R
25|$|In Italy, ALCEI (an {{association}} {{similar to}} EFF) also reported the <b>rootkit</b> to the Financial Police, {{asking for an}} investigation under various computer crime allegations, along with a technical analysis of the <b>rootkit.</b>|$|R
25|$|Enhance {{emulation}} {{software and}} security software. Alcohol 120% and Daemon Tools are commercial examples of non-hostile <b>rootkits</b> used to defeat copy-protection mechanisms such as SafeDisc and SecuROM. Kaspersky antivirus software also uses techniques resembling <b>rootkits</b> {{to protect itself}} from malicious actions. It loads its own drivers to intercept system activity, and then prevents other processes from doing harm to itself. Its processes are not hidden, but cannot be terminated by standard methods (It can be terminated with Process Hacker).|$|E
25|$|Kernel-mode <b>rootkits</b> {{run with}} the highest {{operating}} system privileges (Ring 0) by adding code or replacing portions of the core operating system, including both the kernel and associated device drivers. Most operating systems support kernel-mode device drivers, which execute with the same privileges as the operating system itself. As such, many kernel-mode <b>rootkits</b> are developed as device drivers or loadable modules, such as loadable kernel modules in Linux or device drivers in Microsoft Windows. This class of rootkit has unrestricted security access, but {{is more difficult to}} write. The complexity makes bugs common, and any bugs in code operating at the kernel level may seriously impact system stability, leading to discovery of the rootkit. One of the first widely known kernel <b>rootkits</b> was developed for Windows NT 4.0 and released in Phrack magazine in 1999 by Greg Hoglund. Kernel <b>rootkits</b> can be especially difficult to detect and remove because they operate at the same security level as the operating system itself, and are thus able to intercept or subvert the most trusted operating system operations. Any software, such as antivirus software, running on the compromised system is equally vulnerable. In this situation, no part of the system can be trusted.|$|E
25|$|Many modern {{operating}} systems use doubly linked lists to maintain references to active processes, threads, and other dynamic objects. A common strategy for <b>rootkits</b> to evade detection is to unlink themselves from these lists.|$|E
50|$|In {{the course}} of the 2005 Sony BMG copy {{protection}} <b>rootkit</b> scandal, there were reports that the Extended Copy Protection <b>rootkit</b> included on some Sony Compact Discs included portions of the LAME library without complying with the terms of the LGPL.|$|R
50|$|His work on <b>Rootkit</b> analysis.|$|R
50|$|The book {{is divided}} into four parts, {{and each of the}} 14 {{chapters}} goes into detail about specific technology and information required in advanced <b>rootkit</b> development and use. It also provides information about network and file system analysises, kernel objects, drivers, and much more related to <b>rootkit</b> technology. The reader can create a fully working <b>rootkit</b> by using the source codes in the appendix. The product description states that the book sheds light on material that has traditionally been poorly documented, partially documented, or intentionally undocumented.|$|R
25|$|The behavioral-based {{approach}} to detecting <b>rootkits</b> attempts to infer {{the presence of}} a rootkit by looking for rootkit-like behavior. For example, by profiling a system, differences in the timing and frequency of API calls or in overall CPU utilization can be attributed to a rootkit. The method is complex and is hampered by a high incidence of false positives. Defective <b>rootkits</b> can sometimes introduce very obvious changes to a system: the Alureon rootkit crashed Windows systems after a security update exposed a design flaw in its code. Logs from a packet analyzer, firewall, or intrusion prevention system may present evidence of rootkit behaviour in a networked environment.|$|E
25|$|Malwarebytes {{also has}} {{numerous}} {{tools such as}} a Junkware Removal Tool to remove adware, an Anti-Rootkit Beta to remove and repair <b>rootkits,</b> StartUpLITE to boost {{the speed of the}} Windows reboot and FileASSASSIN to prevent locked files.|$|E
25|$|Virus removal {{tools are}} {{available}} to help remove stubborn infections or certain types of infection. Examples include Trend Micro's Rootkit Buster, and rkhunter {{for the detection of}} <b>rootkits,</b> Avira's AntiVir Removal Tool, PCTools Threat Removal Tool, and AVG's Anti-Virus Free 2011.|$|E
5000|$|Visualizing Indicators of <b>Rootkit</b> Infections in Memory Forensics ...|$|R
50|$|Security {{researchers}} {{discovered the}} <b>rootkit</b> on 18 May 2006 attackers utilized it in {{attacks on the}} US and Japan. Attackers introduced it to the US in an attack against a Department of Defense entity. They used two {{different versions of the}} <b>rootkit</b> in attacks during May and June 2006.|$|R
2500|$|... Podcast by Steve Gibson/GRC {{explaining}} <b>Rootkit</b> technology, October 2005 ...|$|R
25|$|Some copy-protection {{technologies}} have borrowed from spyware. In 2005, Sony BMG Music Entertainment {{was found to}} be using <b>rootkits</b> in its XCP digital rights management technology Like spyware, not only was it difficult to detect and uninstall, it was so poorly written that most efforts to remove it could have rendered computers unable to function.|$|E
25|$|Rootkit {{detection}} {{is difficult}} because a rootkit {{may be able to}} subvert the software that is intended to find it. Detection methods include using an alternative and trusted operating system, behavioral-based methods, signature scanning, difference scanning, and memory dump analysis. Removal can be complicated or practically impossible, especially in cases where the rootkit resides in the kernel; reinstallation of the operating system may be the only available solution to the problem. When dealing with firmware <b>rootkits,</b> removal may require hardware replacement, or specialized equipment.|$|E
25|$|More-sophisticated <b>rootkits</b> {{are able}} to subvert the {{verification}} process by presenting an unmodified copy of the file for inspection, or by making code modifications only in memory, rconfiguration registers, which are later compared to a white list of expected values. The code that performs hash, compare, or extend operations must also be protected—in this context, {{the notion of an}} immutable root-of-trust holds that the very first code to measure security properties of a system must itself be trusted to ensure that a rootkit or bootkit does not compromise the system at its most fundamental level.|$|E
25|$|The first {{malicious}} <b>rootkit</b> for the Windows NT {{operating system}} appeared in 1999: a trojan called NTRootkit created by Greg Hoglund. It {{was followed by}} HackerDefender in 2003. The first <b>rootkit</b> targeting Mac OS X appeared in 2009, while the Stuxnet worm {{was the first to}} target programmable logic controllers (PLC).|$|R
25|$|During the Sony BMG CD copy {{protection}} scandal, Kaminsky used DNS cache snooping {{to find out}} whether or not servers had recently contacted any of the domains accessed by the Sony <b>rootkit.</b> He used this technique to estimate that there were at least 568,200 networks that had computers with the <b>rootkit.</b>|$|R
50|$|The first {{malicious}} <b>rootkit</b> for the Windows NT {{operating system}} appeared in 1999: a trojan called NTRootkit created by Greg Hoglund. It {{was followed by}} HackerDefender in 2003. The first <b>rootkit</b> targeting Mac OS X appeared in 2009, while the Stuxnet worm {{was the first to}} target programmable logic controllers (PLC).|$|R
