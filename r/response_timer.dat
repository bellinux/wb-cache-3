2|3|Public
5000|$|Alternate party: In {{multilevel}} precedence and preemption, {{the call}} receiver, i.e. the destination user, {{to which a}} precedence call will be diverted. Diversion will occur when the <b>response</b> <b>timer</b> expires, when the call receiver is busy on a call of equal or higher precedence, or when the call receiver is busy with access resources that are non-preemptable. Alternate party diversion is an optional terminating feature that is subscribed to by the call receiver. Thus, the alternate party is specified by the call receiver {{at the time of}} subscription.|$|E
5000|$|DCL WITHWARMING /* Data to be live-migrated (on {{platforms}} supporting [...] "warming") */ query_process pid; /* PID of query_signal sender */CONSTANT time_to_wait = 10; /* Timeout of database response */TIMER db_timeout_timer; /* Timer of database response */STATE idle; /* Idle state, {{wait for}} query signal */ INPUT query_signal(DCL input_data); DCL db_query db_query_type; /* Local variable, stored on stack. */ TASK query_process := SENDER; /* Sender address saved to specific memory area, which is preserved even on software update.*/ TASK db_query.field1 := some_procedure(input_data), db_query.field2 := input_data.field1; OUTPUT db_request_signal(db_query) TO db_process; /* Send request to database process */ SET(NOW + time_to_wait, db_timeout_timer); /* Start database <b>response</b> <b>timer</b> */ NEXTSTATE wait_db; /* Enter wait_db state where database response is expected */ENDSTATE idle;STATE wait_db; INPUT db_response_signal(DCL answer_data); RESET(db_timeout_timer) COMMENT 'Database answered in time'; OUTPUT answer_signal(answer_data.records) TO query_process; NEXTSTATE idle; INPUT db_timeout_timer; /* Timeout */ OUTPUT error_signal(error_constant) TO query_process; NEXTSTATE idle;ENDSTATE wait_db; ...|$|E
40|$|Voting advice {{applications}} (VAA) {{have become}} an increasingly popular feature of electoral campaigns. VAAs are online tools that use survey techniques to measure {{the degree to which}} the policy preferences of citizens match those of political parties or candidates. In some cases, such as The Netherlands, VAA's can attract millions of respondents providing an incredibly rich source of mass public opinion data. As a result political scientists have begun to exploit such datasets and this is fuelling a burgeoning literature on the topic. To date, however, there has been surprisingly little research on the cleaning techniques used to filter out the many rogues entries that are known to be present in VAA generated datasets. This paper presents the various methods used for cleaning VAA generated datasets that have been used for empirical research. Two main techniques are used based on item <b>response</b> <b>timers</b> and pattern recognition techniques. We show why cleaning matters and the problems that flow from not establishing rigorous cleaning techniques. The problem as such is not exclusive to VAA data but is common to all web based research involving self-administered surveys. To that end the techniques we present could be generalisable beyond the specific case of VAA-generated dataset...|$|R
40|$|The {{problems}} of TCP packet reordering and random loss over wireless networks have motivated {{the development of}} a number of TCP variants. However, most of these variants focus on resolving only one of the aforementioned two problems. A few unified solutions for both problems generally extend beyond the scope of the transport layer. In this paper, we propose a new TCP variant, known as TCP for non-congestion loss (TCP-NCL), to tackle both problems under one compact framework. Different from previous unified solutions, the modifications are limited to sender-side TCP only, thereby facilitating possible future wide deployment. A retransmission decision timer and a congestion <b>response</b> decision <b>timer</b> have been installed to trigger packet retransmission and congestion response, respectively. Our simulation studies reveal that TCP-NCL is robust against packet reordering as well as random packet loss while maintaining responsiveness against situations with purely congestive loss. Â© 2009 IEEE. published_or_final_versionThe 20 th IEEE International Symposium on Personal, Indoor and Mobile Radio Communications, Tokyo, Japan, 13 - 16 September 2009. In Proceedings of the 20 th PIMRC, 2009, p. 1093 - 109...|$|R
40|$|In {{order to}} be {{effectively}} utilizing the sunlight energy into electricity, the photovoltaic modules should be perpendicularly to the sunlight direction. However, the orientation of sunlight on Earth???s surface is varied {{that makes it difficult}} to find the optimal direction. For this reason, the solar tracker should be available to drive modules in the expected direction. In this study, the solar tracker is designed based on microcontroller ATMega 8535 and the position is adjusted based on the IC RTC <b>timer</b> <b>response.</b> The IC RTC is able to regulate the movement of photovoltaic modules about 15 degree per hour. The updating position of PV module is constantly changed, but the approach is enough for capturing sunlight energy for PV applications in equator region. The testing results show that the accumulative energy capturing annually from a 2250 Wp of PV system is about 500 kWh higher than that of without solar tracker...|$|R

