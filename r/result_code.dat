24|4822|Public
50|$|ActionInvocation invokes all the interceptors {{listed in}} the ActionInvocation object and then invokes the actual action. When the action is completed, ActionInvocation gets the action <b>result</b> <b>code</b> from the execution. It uses the action <b>result</b> <b>code</b> to look up the {{appropriate}} result, which is usually a JSP page, a velocity template or a freemarker template associated with the <b>result</b> <b>code.</b> ActionInvocation also executes the interceptors again in the reverse order and returns the response as a HttpServletResponse.|$|E
5000|$|Automatic DOCTYPE {{translations}} -from template DTD {{to result}} DTD- for (optional) validation of both template and <b>result</b> <b>code.</b>|$|E
50|$|The server {{returns the}} {{matching}} entries and potentially continuation references. These may be returned in any order. The final result {{will include the}} <b>result</b> <b>code.</b>|$|E
50|$|The {{error codes}} {{returned}} are AFP <b>result</b> <b>codes.</b>|$|R
50|$|In {{general the}} <b>resulting</b> <b>code</b> {{does not have}} static single {{assignment}} form.|$|R
5000|$|... #Subtitle level 3: The {{chemistry}} {{underlying the}} fire testing and <b>resulting</b> <b>code</b> classifications ...|$|R
50|$|The code {{editor in}} Qt Creator {{supports}} syntax highlighting for various languages. In addition to that, the code editor can parse code in C++ and QML languages {{and as a}} <b>result</b> <b>code</b> completion, context-sensitive help, semantic navigation are provided.|$|E
50|$|For privacy reasons these result {{codes are}} today rarely used; {{they include the}} {{forwarded}} to (251) or not forwarded to (551) address. But the meaning {{and the effect of}} forwarding to third parties is identical for <b>result</b> <b>code</b> 250 and error code 550 respectively.|$|E
5000|$|The ADD {{operation}} inserts a {{new entry}} into the directory-server database. If the distinguished name in the add request already exists in the directory, then the server will not add a duplicate entry but will set the <b>result</b> <b>code</b> in the add result to decimal 68, [...] "entryAlreadyExists".|$|E
5000|$|Write-only {{language}}, {{a language}} with such bizarre syntax that <b>resulting</b> <b>code</b> is incomprehensible ...|$|R
50|$|The {{parse tree}} and <b>resulting</b> <b>code</b> from {{it is not}} correct {{according}} to language semantics.|$|R
30|$|Since we have M {{of these}} packets, i.e., we have M descriptions, the <b>resulting</b> <b>coding</b> rate is RM.|$|R
50|$|On {{its back}} end, FreeBASIC {{makes use of}} GNU Binutils {{in order to produce}} console and {{graphical}} user interface applications. FreeBASIC supports the linking and creation of C static and dynamic libraries and has limited support for C++ libraries. As a <b>result,</b> <b>code</b> compiled in FreeBASIC can be reused in most native development environments.|$|E
5000|$|Remote Procedure Call - Almost all network {{operations}} were performed via a primitive {{remote procedure call}} system, either by passing a command line direct to the file server, or by passing an operating system call parameter block. The logon command *I AM was processed by passing the whole command line and reading back the <b>result</b> <b>code.</b>|$|E
50|$|BIND also {{sets the}} LDAP {{protocol}} version {{by sending a}} version number {{in the form of}} an integer. If the client requests a version that the server does not support,the server must set the <b>result</b> <b>code</b> in the BIND response to the code for a protocol error. Normally clients should use LDAPv3, which is thedefault in the protocol but not always in LDAP libraries.|$|E
5000|$|... to {{continuously}} {{improve the}} performance of the compiler and <b>resulting</b> <b>code,</b> unless it would jeopardize the points above.|$|R
50|$|However, the <b>resulting</b> <b>code</b> can be {{difficult}} to read, and the parameters have pass-by-reference semantics, which may be undesirable.|$|R
5000|$|If the {{generator}} polynomial is primitive, then the <b>resulting</b> <b>code</b> has Hamming distance at least 3, provided that [...]|$|R
5000|$|Static {{branches}} (BRUN, BRFL, and BRTR) {{used two}} additional syllables of offset. Thus arithmetic operations occupied one syllable, addressing operations (NAMC and VALC) occupied two, branches three, and long literals (LT48) five. As a <b>result,</b> <b>code</b> was much denser (had better entropy) than a conventional RISC architecture {{in which each}} operation occupies four bytes. Better code density meant fewer instruction cache misses and hence better performance running large-scale code.|$|E
5000|$|The client notifies the {{receiver}} of the originating email {{address of the}} message in a [...] command. This is also the return or bounce address in case the message cannot be delivered. In this example the email message is sent to two mailboxes on the same SMTP server: one for each recipient listed in the To and Cc header fields. The corresponding SMTP command is [...] Each successful reception and execution of a command is acknowledged by the server with a <b>result</b> <b>code</b> and response message (e.g., 250 Ok).|$|E
5000|$|In Java, {{unless the}} inner class is {{declared}} static, {{a reference to}} an instance of an inner class carries {{a reference to the}} outer class with it. As a <b>result,</b> <b>code</b> in the inner class has access to both the static and non-static members of the outer class. To create an instance of a non-static inner class, the instance of the embracing outer class must be named. This is done via a new new-operator introduced in JDK 1.3: outerClassInstance.new Outer.InnerClass (...) [...] This can be done in any class that has a reference to an instance of the outer class.|$|E
5000|$|... {{is written}} into —digit of the <b>resulting</b> <b>code,</b> and carry [...] from the given digit is {{transferred}} into the -digit and -digit.|$|R
50|$|After the {{designed}} {{experiment is}} performed, linear regression is used, sometimes iteratively, to obtain <b>results.</b> <b>Coded</b> variables {{are often used}} when constructing this design.|$|R
40|$|A {{method to}} combine two quantum error-correcting codes is presented. Even when {{starting}} with additive <b>codes,</b> the <b>resulting</b> <b>code</b> might be non-additive. Furthermore, {{the notion of}} the erasure space is introduced which gives a full characterisation of the erasure-correcting capabilities of the codes. For the special case that the two codes are unitary images of each other, the erasure space and the pure erasure space of the <b>resulting</b> <b>code</b> can be calculated. Comment: 4 pages, RevTeX, no figures, preliminary repor...|$|R
5000|$|Maximum UDP payload {{length for}} all PCP {{messages}} is 1100 octets. Each PCP message {{consists of a}} request or response header containing an opcode that determines the associated operation, any relevant opcode-specific information (such as which ports are to be mapped), and zero or more options (such as the [...] option described above). Result codes are returned as part of server responses; each <b>result</b> <b>code</b> has an associated lifetime, which tells the hosts when certain operations may be retried or should be repeated. For example, result lifetimes can specify how long a failure condition is expected to persist, or how long the created mapping will last.|$|E
50|$|The {{architecture}} of WebWork {{was based on}} the MVC Framework, Command, and Dispatcher patterns and the principle of Inversion of Control. The life cycle of a WebWork request begins when the servlet container receives a new request. The new request is passed through a set of filters called the filter chain and sent to the FilterDispatcher. The FilterDispatcher forwards the request to the ActionMapper to determine {{what needs to be done}} with the request. If the request requires an action, it sends an ActionMapping object back to the FilterDispatcher. If not, ActionMapper returns a null object, indicating that no action needs to be taken. The FilterDispatcher forwards the request and the ActionMapper object to the ActionProxy for further action. The ActionProxy invokes the Configuration File manager to get the attributes of the action, which is stored in the xwork.xml file and creates an ActionInvocation object. The ActionInvocation object contains attributes like the action, invocation context, result, <b>result</b> <b>code,</b> etc. The configuration file manager has access to these configuration files and is used by the ActionProxy as a gateway to the configuration files. The ActionInvocation object also has information about Interceptors that need to be invoked after or before an action is executed.|$|E
40|$|JVM-based {{processors}} used in {{embedded systems}} are often scaled back {{versions of the}} standard JVM which {{do not support the}} full set of Java byte codes and native methods assumed by a JVM. As a <b>result,</b> <b>code</b> bases such as Java libraries must be migrated in order make them suitable for execution on the embedded JVM-based processor. This paper describes Monarch, a high-assurance Java-to-java (J 2 j) source code migrator that we are developing to assist such code migrations...|$|E
50|$|Asterisk Commercial Licensing and Support - An Asterisk {{commercial}} license provides legal {{means of}} using and modifying Asterisk {{for a product}} without making the <b>resulting</b> <b>code</b> open source.|$|R
3000|$|... − 1 {{in order}} to obtain the {{quantized}} control vector. 1 Since Ψ is invertible, and we are transmitting the entire quantized control vector, the <b>resulting</b> <b>coding</b> rate is not affected by this operation [30].|$|R
30|$|To further motivate why {{using this}} joint decoder {{may be the}} right choice, the {{following}} proposition shows that at least the <b>resulting</b> <b>code</b> lengths are optimal. The proof {{is analogous to the}} proof of Theorem 2.|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2000). All Rights Reserved. This document describes two LDAPv 3 control extensions for server side sorting of search results. These controls allows a client to specify the attribute types and matching rules a server should use when returning the results to an LDAP search request. The controls may be useful when the LDAP client has limited functionality or for some other reason cannot sort the results but still needs them sorted. Other permissible controls on search operations are not defined in this extension. The sort controls allow a server to return a <b>result</b> <b>code</b> for the sorting of the results that is independent of the <b>result</b> <b>code</b> returned for the search operation. The key words "MUST", "SHOULD", and "MAY " used in this document are to be interpreted as described in [bradner 97]...|$|E
40|$|More {{and more}} devices contain {{computers}} with limited amounts of memory. As a <b>result,</b> <b>code</b> compaction techniques are gaining popularity, {{especially when they}} also improve performance and power consumption, {{or at least not}} degrade it. This paper quantifies the side-effects of code abstraction on performance using extensive measurements and simulations on the SPECint 2000 benchmark suite and some additional C++ programs. We show how to use profile information in order to obtain almost all the code size reduction benefits of code abstraction, yet experience almost none of its disadvantages. Categories and Subject Descriptors D. 3. 4 [Programming Languages]: Processors—code generation;compilers;optimization; E. 4 [Coding and Informatio...|$|E
40|$|Usually the <b>result</b> <b>code</b> of {{source code}} by a {{compiler}} {{is not necessary}} the best one, and can be improved to run faster or to use less memory. This kind of improvement is done in compiling phase after parsing. Some good techniques in optimization are in folding the constants, elimination of dead code, or improvement of the loops. Here it is considered the runtime overhead and present {{how can this be}} improved. The source is specific for objectoriented languages with late binding, where a name of method to be called is bound to method dynamically. It increases the computation time by a cost of traversing the class hierarchy each time a method is called. optimization, abstract state machine (evolving algebra), class annotation...|$|E
5000|$|For example, if {{a simple}} {{refactoring}} operation is {{performed on the}} code above, renaming variables [...] "$replacement" [...] to [...] "$r" [...] and [...] "$anothervalue" [...] to [...] "$a", the <b>resulting</b> <b>code</b> will look like this: ...|$|R
50|$|The Assembler Editor is two-pass 6502 {{assembler}} in an 8KB cartridge. Both {{source and}} object code {{can be in}} memory simultaneously, allowing repeated editing, assembly, and running of the <b>resulting</b> <b>code</b> without accessing a disk or tape drive.|$|R
5000|$|Store results: Dialer will {{typically}} add extra {{information to}} each customer record that is dialed. This usually {{consists of the}} name/user ID of the agent who handled the call, the date/time(s) the customer was serviced, <b>result</b> <b>code(s)</b> etc.|$|R
