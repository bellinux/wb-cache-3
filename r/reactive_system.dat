633|3093|Public
500|$|In a [...] "reversed opening", White {{plays an}} opening {{typically}} played by Black, but with colors reversed and thus an extra tempo. Evans writes of such openings, [...] "If a defense is considered good for Black, {{it must be}} even better for White with a move in hand." [...] Former World Champion Mikhail Botvinnik reportedly expressed the same view. Watson questions this idea, citing Suba's thesis that Black, by moving second, has more complete information than White. He writes, [...] "everyone has such difficulties playing as White against a Sicilian Defence (1.e4 c5), but ... leading masters have no qualms about answering 1.c4 with 1...e5." [...] To explain this paradox, Watson discusses several different reversed Sicilian lines, showing how Black can exploit the disadvantages of various [...] "extra" [...] moves for White. He concludes, [...] "The point is, Black's set-up in the Sicilian is fine as a <b>reactive</b> <b>system,</b> but not worth much when trying to claim the initiative as White. This is true because Black is able {{to react to the}} specific plan White chooses; in Suba's terms, his information is indeed a move greater! Furthermore, he is {{able to take advantage of}} dead equal positions which White (hoping to retain the advantage of the first move) would normally avoid." ...|$|E
2500|$|In 2010 ISB {{partnered with}} the Ohio State University Wexner Medical Center in Columbus, Ohio to {{establish}} the nonprofit P4 Medicine Institute (P4MI). Its goal was stated as being [...] "to lead the transformation of healthcare from a <b>reactive</b> <b>system</b> to one that predicts and prevents disease, tailors diagnosis and therapy to the individual consumer and engages patients in the active pursuit of a quantified understanding of wellness; i.e. one that is predictive, preventive, personalized and participatory (P4)." ...|$|E
50|$|SyncCharts is a {{graphical}} formalism {{dedicated to}} <b>reactive</b> <b>system</b> modeling. It allows specifying the reactive behavior, and the synchronous programming, of applications. SyncCharts {{is the name}} of the model. A syncChart is an instance. This language was created by Prof. Charles André.|$|E
40|$|New {{classes of}} <b>reactive</b> <b>systems</b> which are {{characterized}} by nanosized-scale and possessing extremely high reactivity, as compared to similar <b>reactive</b> <b>systems</b> with micro-scale heterogeneity, have attracted attention of researchers. In this review article, the recent developments and trends in combustion science towards the synthesis of nanostructured <b>reactive</b> <b>systems</b> are presented. The emphasis is on combustion of nano-structured <b>reactive</b> <b>systems</b> which includes mechanically induced composite particles, sol-gels, super thermites and multilayer nano-foils. Various applications of combustion synthesized nanostructured <b>reactive</b> <b>systems</b> are also discussed...|$|R
40|$|Distributed {{systems are}} {{getting more and more}} popular in every field of computing. This is also true for <b>reactive</b> <b>systems.</b> Traditional {{techniques}} for developing <b>reactive</b> <b>systems</b> are not very suitable for developing distributed <b>reactive</b> <b>systems,</b> because they are based on synchrony hypothesis, and it can not be hold in a distributed system. It is necessary to develop new techniques to deal with distributed <b>reactive</b> <b>systems.</b> In this paper we propose to join the features of two techniques used to specify systems: Estelle and StateCharts. The first one is very suitable for distributed systems, meanwhile the second one is broadly used for specifying <b>reactive</b> <b>systems...</b>|$|R
40|$|Real-time <b>reactive</b> <b>systems</b> {{are complex}} systems {{to design and}} verify. Rigorous testing of realtime <b>reactive</b> <b>systems</b> {{complement}} the more difficult and expensive formal verification process. This paper gives a rigorous method for black-box testing of real-time <b>reactive</b> <b>systems</b> whose design specifications are given in the Timed Reactive Object Model (TROM) formalism...|$|R
50|$|Pericyclic {{reactions}} {{often have}} related stepwise radical processes associated with them. Some pericyclic reactions, {{such as the}} 2+2 cycloaddition, are 'controversial' because their mechanism is not definitively known to be concerted (or may depend on the <b>reactive</b> <b>system).</b> Pericyclic reactions also often have metal-catalyzed analogs, although usually these are also not technically pericyclic, since they proceed via metal-stabilized intermediates, and therefore are not concerted.|$|E
50|$|UML state {{machines}} address exactly this shortcoming {{of the conventional}} FSMs. They provide a number of features for eliminating the repetitions so that the complexity of a UML state machine no longer explodes but tends to faithfully represent {{the complexity of the}} <b>reactive</b> <b>system</b> it describes. Obviously, these features are very interesting to software developers, because only they make the whole state machine approach truly applicable to real-life problems.|$|E
5000|$|Hood {{believes}} {{that a combination of}} big data and systems biology has the potential to revolutionize healthcare and create a proactive medical approach focused on maximizing the wellness of the individual. He coined the term [...] "P4 medicine" [...] in 2003. In 2010 ISB partnered with the Ohio State University Wexner Medical Center in Columbus, Ohio to establish the nonprofit P4 Medicine Institute (P4MI). Its goal was stated as being [...] "to lead the transformation of healthcare from a <b>reactive</b> <b>system</b> to one that predicts and prevents disease, tailors diagnosis and therapy to the individual consumer and engages patients in the active pursuit of a quantified understanding of wellness; i.e. one that is predictive, preventive, personalized and participatory (P4)." [...] In 2012, P4 Medical Institute established an agreement with its first community health partner, PeaceHealth. PeaceHealth is a not-for-profit Catholic health care system, operating in a variety of communities in Alaska, Washington and Oregon. In 2016, ISB affiliated with Providence Health & Services, and Hood became the senior vice president of Providence St. Joseph Health and its chief science officer.|$|E
40|$|<b>Reactive</b> <b>systems</b> {{respond to}} concurrent, {{possibly}} unsynchronized streams of input events. Programming <b>reactive</b> <b>systems</b> is challenging without language support for event-triggered actions. It {{is even more}} challenging to reason about <b>reactive</b> <b>systems.</b> This paper explores a new conceptual basis for applying functional programming techniques to the design and formal veri#cation of <b>reactive</b> <b>systems.</b> The mathematical foundation for this approach is based upon signature coalgebras and derived proof rules for coinduction. The concepts are illustrated with an example {{that has been used}} with the language Esterel. 1 Introduction <b>Reactive</b> <b>systems</b> are characterized by sequences of history-determined reactions to external events. It is known that a non-strict functional programming language can provide a suitable linguistic vehicle for programming <b>reactive</b> <b>systems</b> because streams, modeling temporal sequences of values, can be represented. It is necessary to represent more than streams, however. Cur [...] ...|$|R
40|$|<b>Reactive</b> <b>systems</b> usually contain several {{parallel}} processes, {{which are}} running concurrently. Therefore, {{it is essential}} to study and analyse each process based on its local time. Because of the introduction of local clocks, the temporal logic TLC is particularly suitable for the specification of those <b>systems</b> such as <b>reactive</b> <b>systems,</b> where granularity of time is needed. In this paper, we discuss the formal specification of <b>reactive</b> <b>systems</b> based on TLC. We in particular present a method to describe timing properties of <b>reactive</b> <b>systems</b> using TLC. In this logic, a system and its corresponding properties are represented as formulas, and the properties can be therefore directly reasoned about from the specification of the system. Keywords Temporal logic, clocks, <b>reactive</b> <b>systems,</b> formal specification, local reasoning. 1 Introduction Temporal logic has been widely used as a formalism for reasoning about time [13], program specification and verification [1, 10, 11], modeling temporal da [...] ...|$|R
40|$|Computers are {{frequently}} used in critical applications where predictable response times {{are essential for}} correctness. Such systems are called real-time systems and are a class of <b>reactive</b> <b>systems.</b> Many verification methods for verifying <b>reactive</b> <b>systems</b> were proposed, including diagram-based verification. One of diagrams used for <b>reactive</b> <b>systems</b> verification is predicate diagrams proposed by Cansell et. al. It {{has been shown that}} this diagram can be used for the verification of discrete <b>reactive</b> <b>systems.</b> In this paper, a class of diagrams called timed predicate diagrams is introduced. These diagrams are a variant of predicate diagrams, which can be used to verify real-time systems. This method has been applied on an example problem which is Fischer’s protocol. Key words...|$|R
5000|$|In a [...] "reversed opening", White {{plays an}} opening {{typically}} played by Black, but with colors reversed and thus an extra tempo. Evans writes of such openings, [...] "If a defense is considered good for Black, {{it must be}} even better for White with a move in hand." [...] Former World Champion Mikhail Botvinnik reportedly expressed the same view. Watson questions this idea, citing Suba's thesis that Black, by moving second, has more complete information than White. He writes, [...] "everyone has such difficulties playing as White against a Sicilian Defence (1.e4 c5), but ... leading masters have no qualms about answering 1.c4 with 1...e5." [...] To explain this paradox, Watson discusses several different reversed Sicilian lines, showing how Black can exploit the disadvantages of various [...] "extra" [...] moves for White. He concludes, [...] "The point is, Black's set-up in the Sicilian is fine as a <b>reactive</b> <b>system,</b> but not worth much when trying to claim the initiative as White. This is true because Black is able {{to react to the}} specific plan White chooses; in Suba's terms, his information is indeed a move greater! Furthermore, he is {{able to take advantage of}} dead equal positions which White (hoping to retain the advantage of the first move) would normally avoid." ...|$|E
40|$|Abstract. Reactive systems, such as {{operating}} systems or elevator control systems, are systems that ideally never terminate and {{are intended to}} maintain some interaction with their environment. Temporal logic {{is one of the}} methods for formal specification descriptions of reactive systems. By describing the formal specifications of reactive systems we can check the consistency of the specifications and whether they contain defects. By using a synthesis algorithm we also obtain <b>reactive</b> <b>system</b> programs from the formal specifications and prevent programming bugs. Therefore, it is important to describe <b>reactive</b> <b>system</b> formal specifications to <b>reactive</b> <b>system</b> programs. However, this algorithm synthesizes several <b>reactive</b> <b>system</b> programs from the formal specifications and it is supposed that some programs are good and some are bad. Thus, we have to choose the good programs for this specification among these <b>reactive</b> <b>system</b> programs. In this paper, we propose several strategies <b>reactive</b> <b>system</b> program synthesis to choose the efficient or good <b>reactive</b> <b>system</b> program among synthesized programs. ...|$|E
40|$|The {{behavior}} of an asynchronous <b>reactive</b> <b>system</b> {{can be described}} by its set of action traces. In this paper, we investigate which properties a trace set fulfills describing a <b>reactive</b> <b>system</b> where input and output actions are distinguished. These properties reflect the fact that, for such a system, input actions can always occur. The required properties {{are discussed in the}} light of safety and liveness concepts and related to the concept of I/O-automata. * This work was supported by the Sonderforschungsbereich 342 "Werkzeuge und Methoden fr die Nutzung paralleler Rechnerarchitekturen" and the DFG-project "Transformation verteilter Systeme". - 2 - 15. Mai 1995 1. Introduction Throughout this paper we use the term <b>reactive</b> <b>system</b> in the following sense (see [Harel, Pnueli 85]) : a <b>reactive</b> <b>system</b> is an open system that is a system connected in some way to its environment that successively reacts to input stimuli issued by its environment. Accordingly a <b>reactive</b> <b>system</b> and its en [...] ...|$|E
40|$|We {{develop a}} theory of sorted bigraphical <b>reactive</b> <b>systems.</b> Every {{application}} of bigraphs in the literature has required an extension, a sorting, of pure bigraphs. In turn, every such application has required a redevelopment {{of the theory of}} pure bigraphical <b>reactive</b> <b>systems</b> for the sorting at hand. Here we present a general construction of sortings. The constructed sortings always sustain the behavioural theory of pure bigraphs (in a precise sense), thus obviating the need to redevelop that theory for each new application. As an example, we recover Milner’s local bigraphs as a sorting on pure bigraphs. Technically, we give our construction for ordinary <b>reactive</b> <b>systems,</b> then lift it to bigraphical <b>reactive</b> <b>systems.</b> As such, we give also a construction of sortings for ordinary <b>reactive</b> <b>systems.</b> This construction is an improvement over previous attempts in that it produces smaller and much more natural sortings, as witnessed by our recovery of local bigraphs as a sorting...|$|R
40|$|<b>Reactive</b> <b>systems</b> have {{an ongoing}} {{interaction}} with their environment, accepting requests and producing responses. Correct and reliable construction of <b>reactive</b> <b>systems</b> {{is particularly important}} and challenging. So, using a formal method to establish mathematical proof of correctness of such systems is necessary...|$|R
40|$|This {{research}} is directed towards {{the implementation of}} a comprehensive deductive-algorithmic environment (toolkit) for the development and verification of high assurance <b>reactive</b> <b>systems,</b> especially concurrent, real-time, and hybrid systems. For this, we have designed and implemented the STCP (Stanford Temporal Prover) verification <b>system.</b> <b>Reactive</b> <b>systems</b> have an ongoing interaction with their environment, and their computations are infinite sequences of states. A large number of systems can be seen as <b>reactive</b> <b>systems,</b> including hardware, concurrent programs, network protocols, and embedded systems. Temporal logic provides a convenient language for expressing properties of <b>reactive</b> <b>systems.</b> A temporal verification methodology provides procedures for proving that a given system satisfies a given temporal property. The research covered necessary theoretical foundations as well as implementation and application issues...|$|R
40|$|The {{problem of}} finding a (functorial) {{concurrent}} realization of a <b>reactive</b> <b>system</b> {{by means of a}} labelled safe Petri net is studied. Firstly, a (functorial) construction is described that leads from the category of concrete asynchronous systems introduced by Morin to the category of labelled safe Petri nets. Then, the general problem is discussed. It is indicated that in general there are no optimal solutions, i. e., that the most concurrent realizations of a <b>reactive</b> <b>system</b> need not exist. Nevertheless, a framework to support the process of building a concurrent realization of a <b>reactive</b> <b>system</b> is presented. The framework is based on zig-zag morphisms. 1 Introduction This paper accepts this as a starting point that a <b>reactive</b> <b>system</b> is faithfully represented as a transition system, and that any two such strongly bisimilar representations are indistinguishable. We address the problem {{of finding a}} maximally concurrent realization of a given <b>reactive</b> <b>system.</b> This paper is intended to prov [...] ...|$|E
40|$|Abstract. Typical <b>reactive</b> <b>system</b> {{languages}} are programmed {{by means of}} rules of the form if antecedent then consequent. However, despite their seemingly logical character, hardly any <b>reactive</b> <b>system</b> languages give such rules a logical interpretation. In this paper, we investigate a simplified <b>reactive</b> <b>system</b> language KELPS, in which rules are universally quantified material implications, and computation attempts to generate a model that makes the rules true. The operational semantics of KELPS {{is similar to that}} of other <b>reactive</b> <b>system</b> languages, and is similarly incomplete. It cannot make a rule true by making its antecedent false, or by making its consequent true whether or not its antecedent becomes true. In this paper, we characterize the reactive models computed by the operational semantics. Informally speaking, a model is reactive if every action in the model is an instance of an action in the consequent of a rule whose earlier conditions are true...|$|E
40|$|We {{show how}} to develop (i. e. specify, program and verify) a nontrivial <b>reactive</b> <b>system,</b> in a {{relatively}} easy way, using existing software tools {{and a bit of}} elementary mathematics. The <b>reactive</b> <b>system</b> is a lift controller, the software tools are the Lustre compiler [2] and the symbolic model checker Lesar [4], and the elementary mathematics is simply a basic propositional calculus...|$|E
40|$|There is a {{large number}} of complex {{software}} <b>systems</b> that have <b>reactive</b> behavior. As for any other software <b>system,</b> <b>reactive</b> <b>systems</b> are subject to evolution demands. This paper defines a set requirements that must be fulfilled so that reuse of <b>reactive</b> software <b>systems</b> can be increased. Detailed analysis of a set of representative languages reveals that these requirements are not completely fulfilled by the current programming languages and as such reuse of <b>reactive</b> <b>systems</b> remains a challenge. This paper explains Event Composition Model and its implementation the EventReactor language, which fulfill the requirements. By means of an example, the suitability of the EventReactor language in creating reusable <b>reactive</b> <b>systems</b> is illustrated...|$|R
40|$|Real-time model-based {{deduction}} {{has recently}} {{emerged as a}} vital component in AI's tool box for developing highly autonomous <b>reactive</b> <b>systems.</b> Yet one of the current hurdles towards developing model-based <b>reactive</b> <b>systems</b> {{is the number of}} methods simultaneously employed, and their corresponding melange of programming and modeling languages...|$|R
40|$|In {{this paper}} we present Casl-Chart a formal visual {{specification}} language for <b>reactive</b> <b>systems</b> obtained by combining an already existing language for <b>reactive</b> <b>systems,</b> precisely the statecharts as supported by Statemate, with an already existing language for the specification of data structures, precisely the algebraic specification language Casl...|$|R
40|$|SIM) for a <b>reactive</b> <b>system</b> {{is coming}} to be {{realized}} as the linchpin in a rational method of reduced kinetics. Here a method of constructing a finite dimensional SIM based on identifying critical points and connecting them with trajectories is shown for a spatially homogeneous <b>reactive</b> <b>system.</b> The relation between this analysis and classical as well as irreversible thermodynamics is examined. I...|$|E
30|$|The Hybrid system {{performs}} {{better than}} a purely proactive or <b>reactive</b> <b>system</b> in most cases when comparing BPa.|$|E
40|$|Most {{fault-tolerant}} application programs cannot {{cope with}} constant {{changes in their}} environments and user requirements because they embed policies and mechanisms together so that if the policies or mechanisms are  changed the whole programs have to be changed as well. This paper presents a <b>reactive</b> <b>system</b> approach to overcoming this limitation. The <b>reactive</b> <b>system</b> concepts are an attractive paradigm for system design, development and maintenance because they separate policies from mechanisms. In the {{paper we propose a}} generic <b>reactive</b> <b>system</b> architecture and use group communication primitives to model it. We then implement it as a generic package which can be applied in any distributed applications. The system performance shows that it {{can be used in a}} distributed environment effectively. <br /...|$|E
40|$|Graphical formalisms are an {{increasingly}} important component of our research on the specification and verification of <b>reactive</b> <b>systems.</b> We briefly describe diagram-based verification methods we have developed for verifying temporal properties of infinite-state <b>reactive</b> <b>systems,</b> {{as well as for}} the incremental analysis and refinement of systems and specifications...|$|R
40|$|By looping over {{a set of}} behaviors, <b>reactive</b> <b>systems</b> use {{repetition}} and feedback to deal with errors and en-vironmental uncertainty. Their robust, fault-tolerant performance makes <b>reactive</b> <b>systems</b> desirable for exe-cuting plans. However, most planning systems cannot reason about the loops that characterize reactive sys-tems. In this paper, we show how the structured ap-plication of abstraction and nondeterminism can map complex planning problems requiring loop plans into a simpler representation amenable to standard plan-ning technologies. In the process, we illustrate key recipes for automatically building predictable <b>reactive</b> <b>systems</b> that are guaranteed to achieve their goals...|$|R
40|$|Complex <b>reactive</b> <b>systems</b> require {{specifying the}} {{relationship}} of inputs and outputs in the time domain. Typically, such descriptions involve complex sequences of events, often with explicit timing constraints, that combine to form the system's overall behavior. In addition, most <b>reactive</b> <b>systems</b> are highly concurrent and hierarchical. Investigating formal methods for behavior specification of <b>reactive</b> <b>systems</b> presents real challenges. A new visual language for behavioral specification of complex <b>reactive</b> <b>systems</b> is described. We call it Constraint Narrowing Grammar (CNG). CNG combines concepts from logic programming, rewriting, and lazy evaluation. The non-deterministic and non-terminating properties of CNG make it a nice formalism to model infinite reactive systems' behavior. We demonstrate how a graphical specification can be mapped to CNG rules and show stepby -step how notations of hierarchy, concurrency, and event communication are introduced into the specification. The resulting g [...] ...|$|R
40|$|Building upon work of Milner, Leifer, Jensen and ourselves, {{we develop}} {{a theory of}} sorted bigraphical {{reactive}} systems. Concretely, we show how to automatically get a sorting on bigraphs sustaining the behavioural theory of pure bigraphical reactive systems by lifting a safe sorting on the underlying <b>reactive</b> <b>system</b> of abstract bigraphs. We back this result by a general construction of a safe sorting, the Closure sorting. This sorting restricts a <b>reactive</b> <b>system,</b> and thus by the main result any bigraphical <b>reactive</b> <b>system,</b> to the contexts satisfying any given decomposable predicate. We demonstrate {{the applicability of the}} Closure sorting by proving that Milner’s Local Bigraphs arise as a closure sorting of pure bigraphs, using part of the usual scoping condition as predicate...|$|E
40|$|The {{behavior}} of an asynchronous <b>reactive</b> <b>system</b> {{can be described}} by its set of action traces. In this paper, we investigate which properties a trace set fulfills describing a <b>reactive</b> <b>system</b> where input and output actions are distinguished. These properties reflect the fact that, for such a system, input actions can always occur. The required properties {{are discussed in the}} light of safety and liveness concepts and related to the concept of I/O-automata...|$|E
40|$|There {{is a lack}} of {{autonomy}} on traditional Robot-Assisted Therapy systems interacting with children with autism. To overcome this limitation a supervised autonomous robot controller is being built. In this paper we present a multilayer <b>reactive</b> <b>system</b> within such controller. The goal of this <b>Reactive</b> <b>system</b> is to allow the robot to appropriately react to the child's behavior creating the illusion of being alive. Comment: 5 th International Symposium on New Frontiers in Human-Robot Interaction 2016 (arXiv: 1602. 05456...|$|E
40|$|Abstract. We {{present a}} {{formalism}} for programming complex multiagent <b>reactive</b> <b>systems</b> in a structured manner. The motivation behind {{this work is}} to obtain a simple semantic framework for such <b>reactive</b> <b>systems.</b> The approach followed is to build upon a timed extension of concurrent constraint programs {{that have been used}} to present an elegant declarative framework for <b>reactive</b> <b>systems.</b> Timed concurrent constraint (TCC) programs are extended with the primitives for defining and manipulating ambients that contain TCC programs. The extension is simple and conservative, in the sense that TCC programs are a subset of the new formalism – Mobile Timed Concurrent Constraints (MTCC). ...|$|R
40|$|In this paper, {{we define}} {{a new class}} of {{combined}} automata, called temporalized automata, which can be viewed as the automata-theoretic counterpart of temporalized logics, and show that relevant properties, such as closure under Boolean operations, decidability, and expressive equivalence with respect to temporal logics, transfer from component automata to temporalized ones. Furthermore, we successfully apply temporalized automata to provide the full secondorder theory of k-refinable downward unbounded layered structures with a temporal logic counterpart. Finally, we show how temporalized automata can be used to deal with relevant classes of <b>reactive</b> <b>systems,</b> such as granular <b>reactive</b> <b>systems</b> and mobile <b>reactive</b> <b>systems...</b>|$|R
40|$|Synchronous Estelle {{is a new}} {{language}} designed to specify distributed <b>reactive</b> <b>systems.</b> We have developed this {{new language}}, that tries to merge both asynchronous and synchronous paradigms, as an answer to some problems not solved with existing techniques. We will show its syntactic and semantic features, the way to obtain executable programs according to a specification, and some hints to perform the validation of the programs written in this language. The Steam Boiler Control Problem, a referent study case {{in the field of}} <b>reactive</b> <b>systems,</b> has been used to study the applicability of Synchronous Estelle to distributed <b>reactive</b> <b>systems...</b>|$|R
