10000|10000|Public
5|$|Dante's <b>rewriting</b> of the Lucanian scene 'recuperates' {{the witch}} Erichtho by making her {{necessary}} to the Dantean Virgil's status as guide: she thus functions {{in accord with the}} Christian providence that controls the advancement of the Commedias plot line. At the same time, the Lucanian Erichtho is both marginalized and subordinated to a higher power. In this sense, Dante's <b>rewriting</b> of Erichtho also undoes Lucan's subversion of the original Virgilian model.|$|E
5|$|García Márquez also {{originally}} {{wrote his}} Eréndira {{as a third}} screenplay. However, this version was lost and replaced by the novella. Nonetheless, he worked on <b>rewriting</b> the script in collaboration with Ruy Guerra and the film was released in Mexico in 1983.|$|E
5|$|A {{still more}} {{resonant}} {{aspect of his}} legacy was the uniform <b>rewriting</b> of Roman law, the Corpus Juris Civilis, which is still the basis of civil law in many modern states. His reign also marked a blossoming of Byzantine culture, and his building program yielded such masterpieces as the church of Hagia Sophia. A devastating outbreak of bubonic plague in the early 540s {{marked the end of}} an age of splendour.|$|E
40|$|AbstractWe {{introduce}} {{the notion of}} the generalized semi-monadic <b>rewrite</b> system, which is a generalization of well-known <b>rewrite</b> systems: the ground <b>rewrite</b> system, the monadic <b>rewrite</b> system, and the semi-monadic <b>rewrite</b> system. We show that linear generalized semi-monadic <b>rewrite</b> systems effectively preserve recognizability. We show that a tree language L is recognizable if and only if there exists a <b>rewrite</b> system R such that R∪R− 1 is a linear generalized semi-monadic <b>rewrite</b> system and that L is the union of finitely many ↔R★-classes. We show several decidability and undecidability results on <b>rewrite</b> systems effectively preserving recognizability and on generalized semi-monadic <b>rewrite</b> systems. For example, we show that for a <b>rewrite</b> system R effectively preserving recognizability, it is decidable if R is locally confluent. Moreover, we show that preserving recognizability and effectively preserving recognizability are modular properties of linear collapse-free <b>rewrite</b> systems. Finally, as a consequence of our results on trees we get that restricted right-left overlapping string <b>rewrite</b> systems effectively preserve recognizability...|$|R
50|$|An Indian {{parallel}} grammar {{is simply}} a CFG in which to use a <b>rewrite</b> rule, all instances of the rules non-terminal symbol must be <b>rewritten</b> simultaneously. Thus, for example, given the string aXbYcXd, with two instances of X, and some rule , {{the only way to}} <b>rewrite</b> this string with this rule is to <b>rewrite</b> it as awbYcwd; neither awbYcXd nor aXbYcwd are valid <b>rewrites</b> in an Indian parallel grammar, because they did not <b>rewrite</b> all instances of X.|$|R
40|$|International audienceWe define {{different}} types of bottom-up tree pushdown automata and study their connections with <b>rewrite</b> systems. Along this line of research we complete and generalize the results of Gallier, Book and Salomaa. We define {{the notion of a}} tail-reduction-free (trf) <b>rewrite</b> system. Using the decidability of ground reducibility, we prove the decidability of the trf property. Monadic <b>rewrite</b> systems of Book, Gallier and Salomaa become a natural particular case of trf <b>rewrite</b> systems. We associate a deterministic bottom-up tree pushdown automaton with any left-linear trf <b>rewrite</b> system. Finally, we generalize monadic <b>rewrite</b> systems by introducing the notion of a semi-monadic <b>rewrite</b> system and show that, like a monadic <b>rewrite</b> system, it preserves recognizability...|$|R
5|$|Content {{after a few}} {{rounds of}} revision, Fitzgerald {{returned}} the final batch of revised galleys {{in the middle of}} February 1925. Fitzgerald's revisions included an extensive <b>rewriting</b> of Chapter VI and VIII. Despite this, he refused an offer of $10,000 for the serial rights in order not to delay the book's publication. He had received a $3,939 advance in 1923 and $1,981.25 upon publication.|$|E
5|$|Harlan {{complained to}} Goebbels {{that all the}} {{characters}} were negative; to this, Goebbels retorted that Harlan would not turn down the role of Richard III {{just because he was}} a negative character. However, Goebbels acceded to Harlan's insistence on <b>rewriting</b> the script and Harlan spent from November 1939 to March 1940 revising the script although he kept much of what Metzger and Möller had written.|$|E
5|$|In January 1964 Fleming went to Goldeneye {{for what}} {{proved to be}} his last holiday and wrote {{the first draft of}} The Man with the Golden Gun. He was {{dissatisfied}} with it and wrote to William Plomer, the copy editor of his novels, asking for it to be rewritten. Fleming became increasingly unhappy with the book and considered <b>rewriting</b> it, but was dissuaded by Plomer, who considered it viable for publication.|$|E
40|$|Resolution modulo is an {{extension}} of first-order resolution in which <b>rewrite</b> rules are used to <b>rewrite</b> clauses during the search. In the first version of this method, clauses are <b>rewritten</b> to arbitrary propositions. These propositions are needed to be dynamically transformed into clauses. This unpleasant feature can be eliminated when the <b>rewrite</b> system is clausal, i. e., when it <b>rewrites</b> clauses to clauses. We show in this paper how to transform any <b>rewrite</b> system into a clausal one, preserving the existence of cut free proofs of any sequent. © 2013 Springer Science+Business Media New York & Science Press, China. Resolution modulo is {{an extension}} of first-order resolution in which <b>rewrite</b> rules are used to <b>rewrite</b> clauses during the search. In the first version of this method, clauses are <b>rewritten</b> to arbitrary propositions. These propositions are needed to be dynamically transformed into clauses. This unpleasant feature can be eliminated when the <b>rewrite</b> system is clausal, i. e., when it <b>rewrites</b> clauses to clauses. We show in this paper how to transform any <b>rewrite</b> system into a clausal one, preserving the existence of cut free proofs of any sequent. © 2013 Springer Science+Business Media New York & Science Press, China...|$|R
40|$|A term <b>rewrite</b> {{system is}} used to specify a pattern matcher in a code generator. The pattern matcher derived from the term <b>rewrite</b> system computes all the {{sequences}} of <b>rewrite</b> rules that will reduce a given expression tree to a given goal. While the number of sequences of <b>rewrite</b> rules that are generated is typically enormous, many sequences are in fact redundant. A theory and accompanying algorithms are developed that identify and remove these redundant <b>rewrite</b> sequences. These algorithms terminate if the term <b>rewrite</b> system is finite. Keywords Term <b>rewrite</b> systems, code generation, pattern matching, formal techniques. 1 Introduction Term <b>rewrite</b> systems have traditionally been used to prove properties of abstract data types, implement functional languages and mechanise deduction systems, {{to name just a}} few areas. Term <b>rewrite</b> systems can also be used to specify part of the back-end of a compiler [...] -the so-called pattern matcher. In a pattern matcher, <b>rewrite</b> rules are used to rewrit [...] ...|$|R
40|$|International audienceStudying {{connections}} between term <b>rewrite</b> systems and bottom-up tree pushdown automata (tpda), we complete and generalize results of Gallier, Book and K. Salomaa. We define {{the notion of}} tail reduction free <b>rewrite</b> systems (trf <b>rewrite</b> systems). Using the decidability of inductive reducibility (Plaisted), we prove the decidability of the trf property. Monadic <b>rewrite</b> systems of Book, Gallier and K. Salomaa become an obvious particular case of trf <b>rewrite</b> systems. We define also semi-monadic <b>rewrite</b> systems which generalize monadic systems but keep their fair properties. We discuss different notions of bottom-up tree pushdown automata, {{that can be seen}} as the algorithmic aspect of classes of problems specified by trf <b>rewrite</b> systems. Especially, we associate a deterministic tpda with any left-linear trf <b>rewrite</b> system...|$|R
5|$|Largely {{concerned}} with gender issues, Midas {{comments on the}} definitions of femininity and masculinity {{in the early nineteenth}} century and the developing ideology of separate spheres which encouraged women to restrict themselves to domestic affairs and men to political affairs. Part of the Romantic interest in <b>rewriting</b> classical myths, Midas focuses on challenging patriarchy and satirising the unbounded accumulation of wealth.|$|E
5|$|Some {{parts of}} the {{standard}} library are covered by specifications (for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333), but most modules are not. They are specified by their code, internal documentation, and test suites (if supplied). However, {{because most of the}} standard library is cross-platform Python code, only a few modules need altering or <b>rewriting</b> for variant implementations.|$|E
5|$|Burton {{originally}} did {{not want}} to direct another Batman film. Warner Bros. developed a script with Sam Hamm which had the Penguin and Catwoman going after hidden treasure. Burton agreed to return after they granted him more creative control and replaced Hamm with Daniel Waters. Wesley Strick did an uncredited rewrite, removing Harvey Dent and Robin and <b>rewriting</b> the climax. Annette Bening was originally cast as Catwoman but became pregnant and was replaced with Pfeiffer. Filming began in June 1991 at Warner Bros. Studios in Burbank, California.|$|E
40|$|Abstract. Kamperman and Walters {{proposed}} {{the notion of}} a simulation of one <b>rewrite</b> system by another one, whereby each term of the simulating <b>rewrite</b> system is related to a term in the original <b>rewrite</b> system. In this paper it is shown that if such a simulation is sound and complete and preserves termination, then the transformation of the original into the simulating <b>rewrite</b> system constitutes a correct step in the compilation of the original <b>rewrite</b> system. That is, the normal forms of a term in the original <b>rewrite</b> system can then be obtained by computing the normal forms of a related term in the simulating <b>rewrite</b> system. ...|$|R
40|$|Kamperman and Walters {{proposed}} {{the notion of}} a simulation of one <b>rewrite</b> system by another one, whereby each term of the simulating <b>rewrite</b> system is related to a term in the original <b>rewrite</b> system. In this paper it is shown that if such a simulation is sound and complete and preserves termination, then the transformation of the original into the simulating <b>rewrite</b> system constitutes a correct step in the compilation of the original <b>rewrite</b> system. That is, the normal forms of a term in the original <b>rewrite</b> system can then be obtained by computing the normal forms of a related term in the simulating <b>rewrite</b> system. 1 Introduction Questions on the correctness of compilation of programming languages date back to McCarthy [12]. In this paper we present a technique to deduce the correctness of compilation steps for functional programming languages which stay inside the domain of <b>rewrite</b> systems. Quite a number of papers deal with particular examples of transformations of <b>rewrite</b> syst [...] ...|$|R
50|$|To {{make this}} <b>rewrite</b> theory {{a bit less}} morbid, we can alter some of our <b>rewrite</b> rules a bit, and make them {{conditional}} <b>rewrite</b> rules, which basically means they have to fulfill some criteria {{to be applied to}} the term (other than just matching the left hand side of the <b>rewrite</b> rule).|$|R
5|$|By May 1786, Raspe {{no longer}} had control over the book, which {{was taken over by}} a {{different}} publisher, G. Kearsley. Kearsley, intending the book for a higher-class audience than the original editions had been, commissioned extensive additions and revisions from other hands, including new stories, twelve new engravings, and much <b>rewriting</b> of Raspe's prose. This third edition was sold at two shillings, twice the price of the original, as Gulliver Revived, or the Singular Travels, Campaigns, Voyages, and Adventures of Baron Munikhouson, commonly pronounced Munchausen.|$|E
5|$|Des McAnuff {{replaced}} Mann as director, and filming was {{rescheduled to}} December 1994. Screenwriter Horovitz was busy playwrighting in Europe, so McAnuff and producer Marvin Worth were constantly <b>rewriting</b> the script in July 1994. The budget {{was estimated at}} $20 million. McAnuff stepped down as director {{and was replaced by}} Dennis Hopper. Hopper was a close friend with Dean and co-starred with the actor in both Rebel Without a Cause and Giant. Hopper met with DiCaprio for the lead role, but the director eventually dropped out of the film. By May 1995, DiCaprio was still the top candidate to portray Dean with Milčo Mančevski in discussions to direct the film.|$|E
5|$|Eragon is {{the first}} novel in the Inheritance Cycle by Christopher Paolini. After writing the first draft for a year, Paolini spent a second year <b>rewriting</b> and {{fleshing}} out the story and characters. His parents saw the final manuscript and in 2001 decided to self-publish Eragon; Paolini spent a year traveling around the United States promoting the novel. By chance, the book was discovered by Carl Hiaasen, who got it re-published by Alfred A. Knopf. The re-published version was released on August 26, 2003.|$|E
40|$|Abstract Automatic code {{generators}} often contain pattern matchers {{that are}} based on tree grammars. In this work we generalise this approach by developing pattern matchers {{that are based}} on more powerful term <b>rewrite</b> systems. A pattern matcher based on a term <b>rewrite</b> system computes all the sequences of <b>rewrite</b> rules that will reduce a given expression tree to a given goal. While the number of sequences of <b>rewrite</b> rules that are generated is typically enormous, the vast majority of sequences are in fact redundant. This redundancy is caused by the fact that many <b>rewrite</b> sequences are permutations of each other. A theory and a series of algorithms are systematically developed that identify and remove two types of redundant <b>rewrite</b> sequences. These algorithms terminate if <b>rewrite</b> sequences do not diverge. Key words: Term <b>rewrite</b> systems, code generation, pattern matching, formal technique...|$|R
40|$|Graphical <b>rewrite</b> rules, {{as a form}} of {{end-user}} programming, {{suffer from}} their implicit underlying model. Interpretation of <b>rewrite</b> rules limited to syntactic properties makes it laborious for end users to define non-trivial behavior. Semantically enriched graphical <b>rewrite</b> rules have increased expressiveness, resulting in a significantly reduced number of <b>rewrite</b> rules. This reduction is essential in order to keep <b>rewrite</b> rule-based programming approaches feasible for end-user programming. The extension of the <b>rewrite</b> rule model with semantics not only benefits the definition of behavior but additionally it supports the entire visual programming process. Specifically the benefits include support for defining object look, laying out scenes consisting of dependent objects, defining behavior with a reduced number of <b>rewrite</b> rules, and reusing existing behaviors via <b>rewrite</b> rule analogies. These benefits are described {{in the context of the}} Agentsheets programming substrate...|$|R
5000|$|The converse, the {{symmetric}} closure, the reflexive closure, and the {{transitive closure}} of a <b>rewrite</b> relation is again a <b>rewrite</b> relation, {{as are the}} union and the intersection of two <b>rewrite</b> relations.|$|R
5|$|The {{process of}} garbage {{collection}} involves reading and <b>rewriting</b> {{data to the}} flash memory. This means that a new write from the host will first require a read of the whole block, a write of {{the parts of the}} block which still include valid data, and then a write of the new data. This can significantly reduce the performance of the system. Some SSD controllers implement background garbage collection (BGC), sometimes called idle garbage collection or idle-time garbage collection (ITGC), where the controller uses idle time to consolidate blocks of flash memory before the host needs to write new data. This enables the performance of the device to remain high.|$|E
5|$|After {{escaping}} from custody, Roger uses Billy {{to communicate and}} send scripts to Penny. When <b>rewriting</b> one of the programs, Gork: Son of Fire, Roger attempts to write the script with self-referential events, proving to everyone that the mysterious killer is actually sound engineer Max Applewhite. Max explains that his killings were a revenge scheme that dealt with stock holders and patents, specifically detailing his invention of television, which other scientists have copied. Roger and Penny are taken by Max atop the radio tower at gunpoint. Max is eventually killed when a biplane shows up and guns him down. Impressed by the nightly performance, the sponsors decide to fund WBN. Roger and Penny reconcile their complex relationship and decide not to divorce.|$|E
5|$|Although {{previous}} {{attempts to}} create a Simpsons film had been made, they failed {{due to the lack}} of a script of appropriate length and production crew members. Eventually in 2001, producers James L. Brooks, Matt Groening, Al Jean, Richard Sakai and Mike Scully began development of the film, and a writing team consisting of Brooks, Groening, Jean, Scully, Ian Maxtone-Graham, George Meyer, David Mirkin, Mike Reiss, Matt Selman, John Swartzwelder and Jon Vitti was assembled. They conceived numerous plot ideas, with Groening's being the one developed into a film. The script was re-written over a hundred times, and this <b>rewriting</b> continued after the animation had begun in 2006. Consequently, hours of finished material was cut from the final release, including cameo roles from Erin Brockovich, Minnie Driver, Isla Fisher, Kelsey Grammer and Edward Norton. Hanks and Green Day appeared in the final cut as themselves.|$|E
40|$|<b>Rewrite</b> {{systems are}} sets of {{directed}} equations used to compute by repeatedly replacing subterms {{in a given}} expression by equal terms until a simplest form possible (a normal form) is obtained. If a <b>rewrite</b> system is terminating (i. e., allows no infinite sequence of <b>rewrites),</b> then every expression has a normal form. A variety of orderings, called reduction orderings, {{have been designed to}} prove termination of <b>rewrite</b> sytems, but most of them are not applicable to extended <b>rewrite</b> systems, where <b>rewrites</b> may take into account inherent properties of given functions such as associativity and commutativity. In this paper we show how an ordering represented as a schematic <b>rewrite</b> system [...] -the lexicographic path ordering [...] -can be systematically modified into an ordering compatible with associativity and commutativity...|$|R
40|$|Abstract. Right-(ground or variable) <b>rewrite</b> systems (RGV {{systems for}} short) are term <b>rewrite</b> systems where all right hand sides of rules are {{restricted}} to be either ground or a variable. We define a minimal <b>rewrite</b> extension R of the rewriterelation induced by a RGV system R. This extension admits a <b>rewrite</b> closurepresentation, which can be effectively constructed fro...|$|R
40|$|Abstract <b>rewrite</b> systems {{define a}} {{reduction}} relation {{by a set}} of rules. An important aspect of such <b>rewrite</b> relations is their behavior in an arbitrary context associated with the underlying congruence relation. This behavior is described by "compatibility properties": a <b>rewrite</b> system is compatible if applying the same context to two objects preserves the <b>rewrite</b> relation among them. We present a generic completion procedure for abstract <b>rewrite</b> systems and characterize the minimal compatibility requirement for <b>rewrite</b> relations that are necessary to describe completion procedures as proof transformation procedures. This requirement (called sufficient compatibility) subsumes the class of semi-compatible <b>rewrite</b> relations that {{play an important role in}} algebraic completion. In order to allow for non-compatible <b>rewrite</b> relations we must replace the concept of equations (critical pairs) by promises which leads to a new proof transformation relation and a new proof ordering for abstract r [...] ...|$|R
5|$|Ape Escape is a {{platform}} game that is viewed from a third-person perspective. Players traverse several different environments to advance through the game. For {{most of the}} game, players control Spike—a boy tasked with pursuing and capturing the apes across time, preventing them from <b>rewriting</b> history. Players use various gadgets to pursue and capture the apes, such as the Stun Club, used as an offensive measure against enemies, and the Time Net, used to capture apes and transport them to present day. More gadgets become available as players progress through the game. Players also control vehicles throughout the game, including a rubber raft, which allows travel over water, and the water net, which assists in traversing underwater. The game's controls are heavily centered around the analog sticks: the left stick is used to move players, while the right stick manipulates the various gadgets.|$|E
5|$|At the {{beginning}} of Riven, Atrus equips the player with a trap book—a snare that functions as a one-man prison, yet looks identical to a linking book—and his personal diary. This diary summarizes the history of events leading to the present situation; Atrus cannot explain in depth as he is engaged in <b>rewriting</b> the descriptive book of Riven, {{in an attempt to}} slow its deterioration. The player must enter the Age with no way of leaving, as Atrus cannot risk sending a real linking book to Riven until Gehn is safely imprisoned lest he use it to escape Riven. Instructing the player to capture Gehn in the trap book, find Catherine, and then signal him, Atrus holds out the link book that will transport the player to Riven.|$|E
5|$|Cobra {{was adapted}} into an anime series titled Space Cobra {{directed}} by Dezaki and Yoshio Takeuchi that aired on Fuji Television between October 7, 1982, and May 19, 1983. Terasawa himself participated on weekly meetings {{to discuss the}} screenplays, giving his suggestions to the writers to fix what he told was wrong or <b>rewriting</b> himself the screenplay. The episodes were released in eight DVDs and a DVD box set on October 25, 2000 by Digital Site in Japan. The series was released in Northern America by Nozomi Entertainment in two parts; the first was released on March 4, 2014, and the second one is available since May 6, 2014. In November 2015, the series {{was added to the}} Crunchyroll streaming service to be broadcast in the United States and Canada with English substitles.|$|E
40|$|<b>Rewrite</b> {{programs}} are logic programs represented as <b>rewrite</b> rules, whose execution mechanism usually employs {{some version of}} Knuth-Bendix type completion. <b>Rewrite</b> programs allow one to express mutually exclusively defined predicates {{as well as those}} which are not. In this paper we demonstrate that <b>rewrite</b> programs, although denotationally equivalent to Prolog on the ground level, may produce fewer answers in general. Consequently, a <b>rewrite</b> program may halt with finitely many answers while the corresponding Prolog program goes into an infinite loop. In order to explain these observations, we present a precise operational semantics for <b>rewrite</b> programs, define their denotational (fixpoint) semantics, prove the equivalence of operational, model theoretic and denotational semantics, and clarify the relationship between <b>rewrite</b> programs and Prolog. Comparisons between the pruning effects of simplification and those of subsumption based loop checking mechanisms for Prolog are also included. Running title: On <b>Rewrite</b> Program...|$|R
5000|$|This module {{introduces}} two new sorts, {{and a set}} of <b>rewrite</b> rules. We {{also include}} our previous module, to illustrate how equations and <b>rewrite</b> rules differ. The <b>rewrite</b> rules is thought of as a set of legal state changes, so while equations hold the same meaning {{on both sides of the}} equality sign, <b>rewrite</b> rules do not (<b>rewrite</b> rules use a => token instead of an equality sign). You are still the same person after you're married (this is open for debate), but something has changed, your marital status at least. So this is illustrated by a <b>rewrite</b> rule, not an equation. <b>Rewrite</b> rules do not have to be confluent and terminating so it does matter a great deal what rules are chosen to <b>rewrite</b> the term. The rules are applied at [...] "random" [...] by the Maude system, meaning that you can not be sure that one rule is applied before another rule and so on. If an equation can be applied to the term, it will always be applied before any <b>rewrite</b> rule.|$|R
5|$|The {{scenario}} {{consists of}} spin-off stories which expand on <b>Rewrites</b> story, the harvest festival from <b>Rewrites</b> story is expanded on in Harvest festa!, and minigames are included {{during the course}} of gameplay, as in <b>Rewrite.</b> The size of the scenario in Harvest festa! is roughly comparable in size to Tomoyo After. The fan disc also features official character art of Inoue, a supporting character who was not illustrated in <b>Rewrite.</b> Unlike <b>Rewrite,</b> Kotarou is fully voiced in the fan disc. The five system sound themes included with the <b>Rewrite</b> laptops were released with the fan disc, with the addition of dialogue of Kagari by Kana Hanazawa.|$|R
