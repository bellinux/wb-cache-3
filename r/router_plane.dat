7|25|Public
25|$|The {{hand tool}} form of router is the {{original}} form. It is a specialized type of hand plane with a broad base and a narrow blade projecting well beyond its base plate (gaining it the nickname old woman's tooth). Today the power tool form of router, with an electric-motor-driven spindle, is the more common form, and the hand tool is now often called a <b>router</b> <b>plane.</b> Although the hand tool has a few advantages over the power tool and retains favour with some workers, it has been mostly replaced by the modern spindle router, which was designed for the same work. Some workers consider {{it to be the}} single most versatile woodworking power tool. Becoming more popular is the use of a CNC wood router, which implements the advantages of CNC (Computer Numerical Control).|$|E
2500|$|The <b>router</b> <b>plane,</b> which cleans up {{the bottom}} of {{recesses}} such as shallow mortises, grooves, and dadoes (housings). Router planes come in several sizes and can also be pressed into service to thickness the cheeks of tenons {{so that they are}} parallel to the face of the board.|$|E
2500|$|The first {{handheld}} power routers {{were invented}} in 1915 and were Jet Motor Hand Routers, called Onsruters. The name derives {{from a combination}} of the inventor's last name [...] "Onsrud" [...] and the term [...] "router". The Onsruter married a <b>router</b> <b>plane</b> with an endmill to create the first handheld power router. The idea for the Onsruter started when a rail road company decided they wanted to power the front light on a Steam Locomotive using exhaust steam from the engine. Oscar Onsrud and his son Rudy came up with, and submitted, a design for a jet motor (air turbine) to generate the power for the light, however, they failed to win the contract. A few months later Rudy was talking with a friend about his frustrations making the groove {{in the bottom of a}} cane bottom chair using a <b>router</b> <b>plane.</b> A spark went off in Rudy's head that he could re-purpose the jet motor, which he had spent so much time developing, to run on compressed air and spin a modified endmill and make the routed groove easily. The modified endmills would have to spin at 30,000 RPM, instead of the 3,000 RPM of a milling machine, in order to cut wood and not burn it. These bits also needed a steeper rake and clearance angle to evacuate the chips than needed on a traditional endmill. These new bits became known as router bits or router cutters (UK).|$|E
40|$|This memo {{provides}} {{a method for}} protecting a <b>router’s</b> control <b>plane</b> from undesired or malicious traffic. In this approach, all legitimate <b>router</b> control <b>plane</b> traffic is identified. Once legitimate traffic has been identified, a filter is deployed in the <b>router’s</b> forwarding <b>plane.</b> That filter prevents traffic not specifically identified as legitimate from reaching the <b>router’s</b> control <b>plane,</b> or rate-limits such traffic to an acceptable level. Note that the filters described in this memo are applied only to traffic that is destined for the router, and not to all traffic that is passing through the router. Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes. This document {{is a product of}} the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Interne...|$|R
50|$|Furthermore, {{there must}} be a {{guardband}} in the data channel between packets or bursts, so that core optical <b>router</b> data <b>planes</b> have adequate time to switch packets or bursts. If the guardband is large relative to the average packet or burst size, then it can limit data channel throughput. Aggregating packets into bursts can reduce guardband impact on data channel throughput.|$|R
40|$|This memo {{provides}} {{information for the}} Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2005). This document provides suggestions for measuring OSPF single <b>router</b> control <b>plane</b> convergence. Its initial {{emphasis is on the}} control plane of a single OSPF router. We do not address forwarding plane performance. NOTE: In this document, the word "convergence " relates to singl...|$|R
50|$|A <b>router</b> <b>plane</b> is a plane {{used for}} {{smoothing}} out sunken panels, and more generally for all depressions below the general {{surface of the}} pattern.|$|E
5000|$|The <b>router</b> <b>plane,</b> which cleans up {{the bottom}} of {{recesses}} such as shallow mortises, grooves, and dadoes (housings). Router planes come in several sizes and can also be pressed into service to thickness the cheeks of tenons {{so that they are}} parallel to the face of the board.|$|E
5000|$|The first {{handheld}} power routers {{were invented}} in 1915 and were Jet Motor Hand Routers, called Onsruters. The name derives {{from a combination}} of the inventor's last name [...] "Onsrud" [...] and the term [...] "router". The Onsruter married a <b>router</b> <b>plane</b> with an endmill to create the first handheld power router. The idea for the Onsruter started when a rail road company decided they wanted to power the front light on a Steam Locomotive using exhaust steam from the engine. Oscar Onsrud and his son Rudy came up with, and submitted, a design for a jet motor (air turbine) to generate the power for the light, however, they failed to win the contract. A few months later Rudy was talking with a friend about his frustrations making the groove {{in the bottom of a}} cane bottom chair using a <b>router</b> <b>plane.</b> A spark went off in Rudy's head that he could re-purpose the jet motor, which he had spent so much time developing, to run on compressed air and spin a modified endmill and make the routed groove easily. The modified endmills would have to spin at 30,000 RPM, instead of the 3,000 RPM of a milling machine, in order to cut wood and not burn it. These bits also needed a steeper rake and clearance angle to evacuate the chips than needed on a traditional endmill. These new bits became known as router bits or router cutters (UK).|$|E
40|$|Packet {{processing}} {{represents the}} most significant part of a <b>router’s</b> data <b>plane</b> and has a large impact on router’s scalability. Packet processing consists of many functions {{and some of them}} can become critical for the future router’s scalability. In this paper, the IP lookup {{as one of the most}} critical packet processing functions is analyzed to determine its impact on the Internet router’s scalability. Also, in this paper we propose a new modification of our previously proposed IP lookup algorithm BPFL...|$|R
50|$|In general, {{the passage}} from the input {{interface}} directly to an output interface, through the fabric with minimum modification at the output interface, is called the fast path of the router. If the packet needs significant processing, such as segmentation or encryption, it may go onto a slower path, which is sometimes called the services <b>plane</b> of the <b>router.</b> Service <b>planes</b> can make forwarding or processing decisions based on higher-layer information, such as a Web URL contained in the packet payload.|$|R
5000|$|By 1866, Edward Jr. {{had added}} <b>planes,</b> <b>routers,</b> joiners, coach, gun, cabinet and {{carpenters}} tools to his line, {{and the following}} year he moved his shop from his father's address and relocated to 26 Newton Street, before moving again to much larger premises at 22-24 Whittall Street. [...] This location {{became known as the}} Whittall Works and later was the office and factory of Edward Preston & Sons, Ltd.|$|R
50|$|The {{hand tool}} form of router is the {{original}} form. It is a specialized type of hand plane with a broad base and a narrow blade projecting well beyond its base plate (gaining it the nickname old woman's tooth). Today the power tool form of router, with an electric-motor-driven spindle, is the more common form, and the hand tool is now often called a <b>router</b> <b>plane.</b> Although the hand tool has a few advantages over the power tool and retains favour with some workers, it has been mostly replaced by the modern spindle router, which was designed for the same work. Some workers consider {{it to be the}} single most versatile woodworking power tool. Becoming more popular is the use of a CNC wood router, which implements the advantages of CNC (Computer Numerical Control).|$|E
40|$|Abstract—With {{increasing}} {{demands for}} more flexible services, the routing policies in enterprise network becomes much richer. This has placed {{a heavy burden}} to the current <b>router</b> forwarding <b>plane</b> to support {{the increasing number of}} policies, primarily due to the limited capacity in TCAM. This hinders the development of new network services. In this paper, we present the design and implementation of a new forwarding table structure. It separates the functions of TCAM and SRAM and maximally utilizes the large & flexible SRAM. We progressively design a set of schemes, to maintain correctness, compress storage, and achieve line-card speeds. We also design incremental update algorithms that bring less accesses to memory. We present implementation designs and evaluate our scheme with a real implementation on a commercial router using real data sets. Our design does not require new devices. The evaluation results show that the performance of our forwarding tables is promising. I...|$|R
40|$|Recent {{virtual network}} {{implementations}} {{have shown the}} capability to implement multiple network data planes using a shared hardware substrate. In this project, a new scalable virtual networking data plane is demonstrated which combines the performance efficiency of FPGA hardware with the flexibility of software running on a commodity PC. Multiple virtual <b>router</b> data <b>planes</b> are implemented using a Virtex II-based NetFPGA card to accommodate virtual networks requiring superior packet forwarding performance. Numerous additional data planes for virtual networks which require less bandwidth and slower forwarding speeds are implemented on a commodity PC server via software routers. Through experimentation, we determine that a throughput improvement of up to two orders of magnitude can be achieved for FPGA-based virtual routers versus a software-based virtual router implementation. Dynamic FPGA reconfiguration is supported to adapt to changing networking needs. System scalability is demonstrated for up to 15 virtual routers...|$|R
40|$|A major {{challenge}} in network virtualization is to virtualize the components constituting the network, {{in particular the}} routers. In the work presented here, we focus {{on how to use}} open source Linux software in combination with commodity hardware to build open virtual routers. A general approach in open router virtualization is to run multiple virtual instances in parallel on the same PC hardware. This means that virtual components are combined in the <b>router’s</b> data <b>plane,</b> which can result in performance penalty. In this paper, we investigate the impact of the design of virtual network devices on router performance in Linux namespace environment. We identify performance bottlenecks along the packet data path. We suggest design changes to improve performance. In particular, we investigate modifications of the ―macvlan‖ device, and analyze the performance improvements in terms of packet forwarding. We also investigate how the number of virtual routers and virtual devices within a physical machine influence performance. QC 2012010...|$|R
40|$|With {{increasing}} {{demands for}} more flexible services, the routing policies in enterprise network becomes much richer. This has placed {{a heavy burden}} to the current <b>router</b> forwarding <b>plane</b> to support {{the increasing number of}} policies, primarily due to the limited capacity in TCAM. This hinders the development of new network services. In this paper, we present the design and implementation of a new forwarding table structure. It separates the functions of TCAM and SRAM and maximally utilizes the large & flexible SRAM. We progressively design a set of schemes, to maintain correctness, compress storage, and achieve line-card speeds. We also design incremental update algorithms that bring less accesses to memory. We present implementation designs and evaluate our scheme with a real implementation on a commercial router using real data sets. Our design does not require new devices. The evaluation results show that the performance of our forwarding tables is promising. Department of ComputingRefereed conference pape...|$|R
40|$|Part 8 : Next Generation InternetInternational audienceA major {{challenge}} in network virtualization is to virtualize the components constituting the network, {{in particular the}} routers. In the work presented here, we focus {{on how to use}} open source Linux software in combination with commodity hardware to build open virtual routers. A general approach in open router virtualization is to run multiple virtual instances in parallel on the same PC hardware. This means that virtual components are combined in the <b>router’s</b> data <b>plane,</b> which can result in performance penalty. In this paper, we investigate the impact of the design of virtual network devices on router performance in Linux namespace environment. We identify performance bottlenecks along the packet data path. We suggest design changes to improve performance. In particular, we investigate modifications of the “macvlan” device, and analyze the performance improvements in terms of packet forwarding. We also investigate how the number of virtual routers and virtual devices within a physical machine influence performance...|$|R
40|$|Data {{networks}} {{have become increasingly}} complex nowadays. Even though technologies like Ethernet, IP protocol and packet forwarding is rather simple, control mechanisms like middleboxes, Access Control Lists (ACLs), firewalls, traffic engineering, VLANs, etc. have largely contributed to increasing their complexity. Primarily {{this is due to}} the lack of basic principles in networking. Networking still remains vertically integrated, where hardware comes with its proprietary software and is not open to innovation. Software-Defined Networks (SDN) instead decouple the data plane (which is and should remain the job of the physical <b>routers)</b> and control <b>plane.</b> The control plane in SDN is removed from the routers and switches, and instead is done in the edge of the network, thus allowing for third party software, open interface to devices regardless of hardware type and vendor, and easier management of networks. SDN is a new design model in networks rather than a new technology. It is a set of abstractions for the control plane rather than implementation mechanisms; SDN in essence offers the possibility to network programmers and third party app writers build anything they want on top of both <b>router</b> chips (data <b>plane)</b> and the Network operating system (now through OpenFlow, but it may be something else as well) in the control plane, as well as on top of the Network Operating system due to the open interface it introduces...|$|R
40|$|Abstract—The {{vantage points}} of routers along {{end-to-end}} paths in the Internet have long made them a compelling target for additional functionality. In this paper, we describe a new method for <b>router</b> data <b>plane</b> programmability that is simple, general, flexible and safe and enables complex network services {{to be built}} and deployed. Our method targets network processor (NP) and FPGA-based routers, {{and is based on}} two central ideas: (1) primitive functions for routers that are designed for specific target service domains, and (2) a primitive-aware programming language that is expressive, easy to use and easy to analyze. To demonstrate our method, we describe a set of primitive functions in the context of three diverse domains — network measurement, real-time applications and traffic engineering. Next, we describe Morpheme, our primitive-aware programming language, and show how it can be statically analyzed to safeguard router processor and memory resources. We demonstrate the efficacy of our method by implementing the primitive functions in the Click modular router [1] and a prototype Morpheme compiler. Through a series of microbenchmark experiments, we substantiate the capabilities of our prototype implementation. I...|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2003). All Rights Reserved. This document describes a mechanism that helps to minimize the negative effects on MPLS traffic caused by Label Switching <b>Router’s</b> (LSR’s) control <b>plane</b> restart, specifically by the restart of its Label Distribution Protocol (LDP) component, on LSRs {{that are capable of}} preserving the MPLS forwarding component across the restart. The mechanism described in this document is applicable to all LSRs, both those with the ability to preserve forwarding state during LD...|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2007). A mechanism for BGP that helps minimize the negative effects on routing caused by BGP restart has already been developed and is described in a separate document ("Graceful Restart Mechanism for BGP"). This document extends this mechanism to minimize the negative effects on MPLS forwarding caused by the Label Switching <b>Router’s</b> (LSR’s) control <b>plane</b> restart, and specifically by the restart of its BGP component when BGP is used to carry MPLS labels and the LSR i...|$|R
40|$|International audienceThe most {{critical}} issue in network virtualization is the {{dynamic resource allocation}} of the physical substrate. There {{is a need to}} monitor the running virtual routers in order to allow an adaptive change in the resource allocation. In this paper, we focus on the <b>router</b> data <b>plane</b> virtualization and we explore this issue by presenting a new dynamic allocation approach through queuing theory. We consider the problem where multiple instances of virtual routers (VRs) that have some quality of service (QoS) requirements are sharing different physical resources. We propose a novel router architecture that offers a strong isolation between concurrent VRs and provides a dynamic allocation scheme in order to guarantee the provided QoS to each of them. Our approach aims at providing a higher isolation for the concurrent virtual routers sharing the same infrastructure. We propose a dynamic Weighted round robin (WRR) scheduler for each physical resource and an algorithm for adjusting the weight of each VR {{in order to reduce the}} delay of the packet processing and avoid the bottlenecks. We also propose an admission control mechanism that estimates the current load of the physical node and decides either to accept or reject a creation request of a new VR. Simulation results show that the proposed approach achieves good performance in terms of delay minimization inside the virtual router...|$|R
40|$|The Generalized TTL Security Mechanism (GTSM) for the Label Distribution Protocol (LDP) The Generalized TTL Security Mechanism (GTSM) {{describes}} a generalized {{use of a}} packet’s Time to Live (TTL) (IPv 4) or Hop Limit (IPv 6) to verify that the packet was sourced by a node on a connected link, thereby protecting the <b>router’s</b> IP control <b>plane</b> from CPU utilization-based attacks. This technique improves security and is used by many protocols. This document defines the GTSM use for the Label Distribution Protocol (LDP). This specification uses a bit reserved in RFC 5036 and therefore updates RFC 5036. Status of This Memo This is an Internet Standards Track document. This document {{is a product of}} the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by th...|$|R
40|$|Abstract—The most {{critical}} issue in network virtualization is the {{dynamic resource allocation}} of the physical substrate. There {{is a need to}} monitor the running virtual routers in order to allow an adaptive change in the resource allocation. In this paper, we focus on the <b>router</b> data <b>plane</b> virtualization and we explore this issue by presenting a new dynamic allocation approach through queuing theory. We consider the problem where multiple instances of virtual routers (VRs) that have some quality of service (QoS) requirements are sharing different physical resources. We propose a novel router architecture that offers a strong isolation between concurrent VRs and provides a dynamic allocation scheme in order to guarantee the provided QoS to each of them. Our approach aims at providing a higher isolation for the concurrent virtual routers sharing the same infrastructure. We propose a dynamic Weighted Fair Queuing (WFQ) scheduler for each physical resource and an algorithm for adjusting the weight of each VR {{in order to reduce the}} delay of the packet processing and avoid the bottlenecks. We also propose an admission control mechanism that estimates the current load of the physical node and decides either to accept or reject a creation request of a new VR. Simulation results show that the proposed approach achieves good performance in terms of delay minimization inside the virtual router. Keywords-Network virtualization; Dynamic resource alloca-tion; Queuing theory; Weighted Fair Queuing I...|$|R
40|$|Today's routing {{protocols}} critically {{rely on the}} assumption that the underlying hardware is trusted. Given the increasing number of attacks on network devices, and recent reports on hardware backdoors this assumption has become questionable. Indeed, with the critical role computer networks play today, the contrast between our security assumptions and reality is problematic. This paper presents Software-Defined Adversarial Trajectory Sampling (SoftATS), an OpenFlow-based mechanism to efficiently monitor packet trajectories, also in the presence of non-cooperating or even adversarial switches or routers, e. g., containing hardware backdoors. Our approach is based on a secure, redundant and adaptive sample distribution scheme which allows us to provably detect adversarial switches or routers trying to reroute, mirror, drop, inject, or modify packets (i. e., header and/or payload). We evaluate the effectiveness of our approach in different adversarial settings, report on a proof-of-concept implementation, and provide a first evaluation of the performance overheads of such a scheme. Comment: SDN Security, Trajectory Sampling, Forwarding Attacks, Malicious <b>Router,</b> Malicious Data <b>Plane,</b> Compromised Data Plane, Data Plane Securit...|$|R
40|$|Includes bibliographical {{references}} (pages 96 - 98). The goal of {{this research}} is to design the novel multiband antennas in MIMO implementations for wireless router applications {{that can be used for}} usable communication bands. The two novel multiband annular ring antennas: segmented dual aperture-coupled multiband annular ring antenna that has four operating frequencies at 1. 85 GHz, 3. 5 GHz, 4. 55 GHz and 5. 6 GHz and multiband arrow slot aperture-coupled halo annular ring antenna that has six resonance frequencies at 1. 55 GHz, 2. 3 GHz, 2. 85 GHz, 4. 05 GHz, 4. 6 GHz and 5. 65 GHz are designed. Novel segmented dual aperture-coupled multiband annular ring antenna covers, three practical wireless communication bands, are 1. 8 GHz is for lower WLAN band, 3. 5 GHz for lower WiMAX frequency and 5. 6 GHz for WiFi communication band. The widest bandwidth achieved is at 1. 8 GHz resonant with 210 MHz fractional bandwidth. The novel multiband arrow slot aperture-coupled halo annular ring microstrip patch antenna has six operating frequency bands and all the bands achieved can be used in current communication bands. The former three bands fall into LTE Band 21, Band 30 and Band 7. The later three bands fall into satellite communication C band and upper WLAN 5. 7 GHz band. Then these two novel multiband antenna designs are placed individually on 6 inch by 6 inch wireless <b>router</b> ground <b>plane</b> to investigate its MIMO implementation. The multiple cases were studied: 1 x 2 and 2 x 2 MIMO configurations. Finally, one of the two novel multiband annular ring antennas was selected for fabrication to verify the simulation results and MIMO performance results. And it is found that the simulation and measurement results for MIMO implementation performance results are agreeable...|$|R
40|$|In OpenFlow, {{data and}} control plane are {{decoupled}} from switches or routers. While the data plane {{resides in the}} switches or <b>routers,</b> the control <b>plane</b> might be moved into one or more external servers (controllers). In this article, we propose verification mechanisms for the data plane functionality of switches. The latter consists of two parts: (1) Flow-Match Header part (to match a flow of incoming packets) and (2) action part (e. g., to forward incoming packets to an outgoing port). We propose a mechanism to verify the Flow-Match Header part of the data plane. The mechanism can be executed at the controller, or on an additional device or server (or virtual machines) attached to the network. Deploying a virtual machine (VM) or server for verification may decrease the load of the controller and/or consumed bandwidth between the controller and a switch. We propose a heuristic to place external verification devices or VMs in a network such that the verification time can be minimized. Verification time with respect to consumed resources are evaluated through emulation experiments. Results confirm that the verification time using the proposed heuristic is indeed shortened significantly, while requiring low bandwidth resources...|$|R
40|$|This {{research}} {{examines the}} efficacy {{and behavior of}} an enterprise network environment in which calculations of all routing decisions in a given network topology are performed by a centralized controller. The centralized controller then in turn informs the routers of their respective routing logic. The centralized controller will also be responsible for detecting and adapting to topology changes, as would a modern dynamic routing protocol. In essence, this approach transfers the routing duties of each <b>router???s</b> control <b>plane</b> to a centralized entity, leaving behind each router???s fast, hardware-based forwarding plane which executes the controller???s determined logic. The need to transfer route calculation away from the routers themselves is being driven by the rapidly expanding demands that are being placed on network infrastructure. This expansion of network responsibilities coupled with the rigid and difficult to modify nature of networking protocols has led to considerable research into the area of programmable networks or software-defined networking (SDN). With SDN, the protocols and technologies present on routers, switches, firewalls and other devices that have been necessary for robust, reliable networks in a typical distributed architecture are supplanted by an external entity. By consolidating the control logic of a network and removing it from the devices through which data actually flows, the control plane and forwarding plane become decoupled, allowing each to change and improve with less impact on the other. In the case of dynamic routing, an acceptable system must provide loop-free routes to and from some or all areas of a network topology. A system must also determine routes {{in such a way}} that traffic flows over the most optimum path as measured by some relevant metric or set of metrics. Finally, in order to be considered dynamic, the system must also be able to automatically respond to changes in topology. This research aims to determine if a centralized approach to routing can provide a system that not only satisfy these requirements, but may also provide immediate improvements over existing, distributed dynamic routing protocols. Computer Scienc...|$|R
40|$|This report {{focuses on}} the quality aspects of media {{delivery}} over the Internet. Weinvestigate the constructs of Knowledge Plane, Monitor Plane and Action Planeas controlling functions for the Internet. Our goal is to implement functionality formonitoring services in a home network, allowing the router to reason and take actionsto obtain an optimal traffic situation based on user preferences. The actions takento alter ongoing traffic are implemented in a modular router framework called Click. We will use this router to affect the media stream TCP connections into behavingin accordance with the networks optimal state. New features are implemented tocomplement the functionality found in Click, giving us the tools needed to obtainthe wanted results. Our focus is on adaptive video streaming in general and Silverlight SmoothStreaming in particular. Using custom Silverlight client code, we implemented asolution which allows the applications to report usage statistics to the home gateway. This information will {{be used by the}} home gateway to obtain an overview of traffic inthe network. Presenting this information to the user, we retrieve the user preferencesfor the given video streams. The router then dynamically reconfigures itself, andstarts altering TCP packets to obtain an optimal flow of traffic in the home network. Our system has been implemented on a Linux PC where it runs in its currentform. All the different areas of the solution, ranging from the clients, <b>router,</b> Knowl-edge <b>Plane</b> and traffic manipulation elements are put together. They form a workingsystem for QoE/QoS optimization which we have tested and demonstrated. In ad-dition to testing the concept on our own streaming services, the reporting featurefor Silverlight clients has also been implemented in a private build of TV 2 Sumo. This is the Internet service of the largest commercial television station in Norway. Further testing with the TV 2 Sumo client has given promising results. The systemis working as it is, although {{we would like to see}} more complex action reasoning toimprove convergence time for achieving the correct bit rate...|$|R
40|$|The {{aggressive}} {{semiconductor technology}} scaling provides {{the means for}} doubling the amount of transistors on a single chip each and every 18 months. To efficiently utilize these vast chip resources, Multi-Processor Systems on Chip (MPSoCs) integrated with a Network-on-Chip (NoC) communication infrastructure have been widely investigated. However, the transistor miniaturization also significantly increases the possibility of transient and permanent faults occurrence inside the chip, especially for NoCs as they geometrically spread all over the chip real estate. To provide dependable communication service, the NoC must maintain its functionality and gracefully degrade its performance {{in the presence of}} faults. In this dissertation, we propose several novel NoC tailored mechanisms to tolerate faults induced by, e. g., variability agents, ageing, environmental aggression factors, as well as to efficiently utilize still functional NoC components. We first introduce a low cost method to allow for correct flit transmission even when soft errors are occurring in the <b>router</b> control <b>plane.</b> Then we propose a Flit Serialization (FS) strategy to tolerate broken link wires and to efficiently utilize the remaining link bandwidth. Within the FS framework heavily defected links whose fault levels exceed a certain threshold value are deactivated to diminish the congestion in their upstream routers. Moreover, we design a distributed logic based routing algorithm able to tolerate totally broken links as well as to efficiently utilize UnPaired Functional (UPF) Links in partially defected interconnects. We also introduce a link bandwidth aware run-time task mapping algorithm to improve the mapping quality for newly injected applications in the MPSoCs. Last but not least, we discuss the application of aforementioned strategies in 3 D NoC systems and propose a Bus Virtual channel Allocation (BVA) mechanism to enable vertical wormhole switching to improve the performance of 3 D NoC-Bus hybrid systems. All proposals are evaluated in our mixed language NoC simulation platform and their advantage over state of the art counterparts are proved by means of experimental results. Software and Computer TechnologyElectrical Engineering, Mathematics and Computer Scienc...|$|R
40|$|The Internet grows {{extremely}} fast {{in terms}} of number of users and traffic volume, {{as well as in}} the number of services that must be supported. This development results in new requirements on routers—the main building blocks of the Internet. Existing router designs suffer from architectural limitations that make it difficult to meet future requirements, and the purpose of this thesis is to explore new ways of building routers. We take the approach to investigate distributed and modular router designs, where routers are composed of multiple modules that can be mapped onto different processing elements. The modules communicate through open well-defined interfaces over an internal network. Our overall hypothesis is that such a combination of modularization and decentralization is a promising way to improve scalability, flexibility, and robustness of Internet routers—properties that will be critical for new generations of routers. Our research methodology is based on design, implementation, and experimental verification. The design work has two main results: an overall system design and a distributed <b>router</b> control <b>plane.</b> The system design consists of interfaces, protocols, and internal mechanisms for physically separation of different components of a router. The distributed control plane is a decomposition of control software into independent modules mapped onto multiple distributed processing elements. Our design is evaluated and verified through the implementation of a prototype system. The experimental part of the work deals with two key issues. First, transport mechanisms for communication of internal control information between processing elements are evaluated. In particular, we investigate the use of reliable multicast protocols in this context. Results regarding communication overhead as well as overall performance of routing table dissemination and installation are presented. The results show that even though there are certain costs associated with using reliable multicast, there are large performance gains to be made when the number of processing elements increases. Second, we present performance results of processing routing information in a distributed control plane. These results show that the processing time can be significantly reduced by distributing the workload over multiple processing elements. This indicates that considerable performance improvements can be made through the use of the distributed control plane architecture proposed in this thesis. QC 2010061...|$|R

