44|61|Public
25|$|The <b>routing</b> <b>prefix</b> of {{an address}} is {{identified}} by using another address, called the network mask or subnet mask, {{written in a}} form identical {{to that of the}} address itself. For example, the subnet mask for a <b>routing</b> <b>prefix</b> that is composed of the most-significant 18 bits of an IPv4 address is written as 11111111.11111111.11000000.00000000 in binary, or as 255.255.192.0 in decimal notation. This form of denoting the network mask, however, is only used for IPv4 networks.|$|E
25|$|The <b>routing</b> <b>prefix</b> may be {{expressed}} in Classless Inter-Domain Routing (CIDR) notation written as the first address of a network, followed by a slash character (/), and ending with the bit-length of the prefix. For example, 192.168.1.0/24 is the prefix of the Internet Protocol version 4 network starting at the given address, having 24 bits allocated for the network prefix, and the remaining 8 bits reserved for host addressing. The IPv6 address specification 2001:db8::/32 is a large address block with 296 addresses, having a 32-bit <b>routing</b> <b>prefix.</b>|$|E
25|$|Computers {{that belong}} to a subnet are {{addressed}} with a common, identical, most-significant bit-group in their IP address. This results in the logical division of an IP address into two fields, a network number or <b>routing</b> <b>prefix</b> and the rest field or host identifier. The rest field is an identifier for a specific host or network interface.|$|E
25|$|This {{notation}} {{was introduced}} with Classless Inter-Domain Routing (CIDR) in RFC 4632. In IPv6 {{this is the}} only acceptable form to denote network or <b>routing</b> <b>prefixes.</b>|$|R
50|$|Traffic is {{exchanged}} (routed) between subnetworks {{with special}} gateways (routers) when the <b>routing</b> <b>prefixes</b> {{of the source}} address and the destination address differ. A router constitutes the logical or physical boundary between the subnets.|$|R
50|$|Within the Internet, an {{autonomous}} system (AS) {{is a collection}} of connected Internet Protocol (IP) <b>routing</b> <b>prefixes</b> under the control of one or more network operators on behalf of a single administrative entity or domain that presents a common, clearly defined routing policy to the Internet.|$|R
25|$|For IPv4, {{a network}} {{may also be}} {{characterized}} by its subnet mask, which is the bitmask that when applied by a bitwise AND operation to any IP address in the network, yields the <b>routing</b> <b>prefix.</b> Subnet masks are also expressed in dot-decimal notation like an address. For example, 255.255.255.0 is the network mask for the 192.168.1.0/24 prefix.|$|E
25|$|An RFC 4291 {{compliant}} subnet always uses IPv6 addresses with 64 bits for {{the host}} portion. It therefore has a /64 <b>routing</b> <b>prefix</b> (12864 = the 64 most significant bits). Although it is technically {{possible to use}} smaller subnets, they are impractical for local area networks based on Ethernet technology, because 64 bits are required for stateless address auto configuration. The Internet Engineering Task Force recommends the use of /127 subnets for point-to-point links, which consist of only two hosts.|$|E
2500|$|For {{the purpose}} of network management, an IP address {{is divided into two}} logical parts, the network prefix and the host {{identifier}} or rest field. All hosts on a subnetwork have the same network prefix. This <b>routing</b> <b>prefix</b> occupies the most-significant bits of the address. The number of bits allocated within a network to the internal <b>routing</b> <b>prefix</b> may vary between subnets, depending on the network architecture. [...] While in IPv6 the prefix must consist of a set of contiguous 1-bits, in IPv4 this is not enforced, though there is no advantage to using non-contiguous 1-bits. The host part is a unique local identification and is either a host number on the local network or an interface identifier.|$|E
50|$|Renumbering an {{existing}} network {{for a new}} connectivity provider with different <b>routing</b> <b>prefixes</b> is a major effort with IPv4. With IPv6, however, changing the prefix announced by a few routers can in principle renumber an entire network, since the host identifiers (the least-significant 64 bits of an address) can be independently self-configured by a host.|$|R
5000|$|The Router Advertisement Daemon (radvd) is an {{open-source}} {{software product}} that implements link-local advertisements of IPv6 router addresses and IPv6 <b>routing</b> <b>prefixes</b> using the Neighbor Discovery Protocol (NDP) as specified in [...] The Router Advertisement Daemon {{is used by}} system administrators in stateless autoconfiguration methods of network hosts on Internet Protocol version 6 networks.|$|R
50|$|Various {{forms of}} fast RAM and, eventually, basic content {{addressable}} memory (CAM) were used to speed lookup. CAM, while useful in layer 2 switches that needed to look up {{a relatively small number}} of fixed-length MAC addresses, had limited utility with IP addresses having variable-length <b>routing</b> <b>prefixes</b> (see Classless Inter-Domain Routing). Ternary CAM (CAM), while expensive, lends itself to variable-length prefix lookups.|$|R
50|$|IP {{addresses}} in the dot-decimal notation {{are also}} presented in CIDR notation, {{in which the}} IP address is suffixed with a slash and a number, used to specify {{the length of the}} associated <b>routing</b> <b>prefix.</b> For example, 127.0.0.1/8 specifies that the IP address has an 8-bit <b>routing</b> <b>prefix,</b> and therefore the subnet mask 255.0.0.0.|$|E
50|$|As an example, a <b>routing</b> <b>prefix</b> in the fd00::/8 range {{would be}} {{constructed}} by generating a random 40-bit hexadecimal string, {{taken to be}} e48dba82e1 in this example. The string is appended to the fd00::/8 prefix. This forms the 48-bit <b>routing</b> <b>prefix</b> fde4:8dba:82e1::/48. With this prefix, 65536 subnets of size /64 are available for the private network: fde4:8dba:82e1::/64 to fde4:8dba:82e1:ffff::/64.|$|E
50|$|Additionally, {{applications}} {{may use the}} source-specific multicast addresses {{derived from}} the local IPv6 <b>routing</b> <b>prefix,</b> with group ID C (decimal 12).|$|E
30|$|According to Wikipedia [28], an {{autonomous}} system “is {{a collection of}} connected Internet Protocol (IP) <b>routing</b> <b>prefixes</b> {{under the control of}} one or more network operators on behalf of a single administrative entity or domain that presents a common, clearly defined routing policy to the Internet”. The graph of routers comprising the Internet can be organized into sub-graphs, called autonomous systems (AS). Each AS exchange traffic flows with some neighbors (peers).|$|R
40|$|This memo {{provides}} {{information for the}} Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited. This document is a compilation of special IPv 6 addresses defined in other RFCs. It {{can be used as}} a checklist of invalid <b>routing</b> <b>prefixes</b> for developing filtering policies for routes and IP packets. It does not discuss addresses that are assigned to operators and users through the Regional Internet Registries...|$|R
40|$|We {{analyze the}} {{evolution}} of the global Internet interdomain routing system on AS, prefix and IP address level granularities, using snapshots of RouteViews BGP tables from 1997 to 2001. We introduce the notion of semiglobally <b>routed</b> <b>prefixes,</b> those present in the majority of backbone tables, and classify them into standalone [...] those which have no subsets, no supersets; root [...] have subsets, but no supersets; and subset, or more specific, which are subsets of other blocks...|$|R
50|$|IPv4 {{addresses}} may {{be represented}} in any notation expressing a 32-bit integer value. They are most often written in the dot-decimal notation, which consists of four octets of the address expressed individually in decimal numbers and separated by periods. The CIDR notation standard combines the address with its <b>routing</b> <b>prefix</b> in a compact format, in which the address {{is followed by a}} slash character (/) and the count of consecutive 1 bits in the <b>routing</b> <b>prefix</b> (subnet mask).|$|E
50|$|The <b>routing</b> <b>prefix</b> of {{an address}} is {{identified}} by using another address, called the network mask or subnet mask, {{written in a}} form identical {{to that of the}} address itself. For example, the subnet mask for a <b>routing</b> <b>prefix</b> that is composed of the most-significant 18 bits of an IPv4 address is written as 11111111.11111111.11000000.00000000 in binary, or as 255.255.192.0 in decimal notation. This form of denoting the network mask, however, is only used for IPv4 networks.|$|E
5000|$|... 192.168.100.14/24 {{represents}} the IPv4 address 192.168.100.14 {{and its associated}} <b>routing</b> <b>prefix</b> 192.168.100.0, or equivalently, its subnet mask 255.255.255.0, which has 24 leading 1-bits.|$|E
40|$|Most {{well-known}} worms, such as Code Red, Slammer, Blaster, and Sasser, infected vulnerable computers by {{scanning the}} entire IPv 4 address space. In this paper, we present an advanced worm called "routing worm", which implements two advanced attacking techniques. First, a routing worm uses BGP routing tables to only scan the Internet routable address space, which allows it propagate three {{times faster than}} a traditional worm. Second, and more importantly, the geographic information of BGP <b>routing</b> <b>prefixes</b> enables a <b>routing</b> worm to conduct pinpoint "selective attacks" by imposing heavy damage to vulnerable computers in a specific country, company, Internet Service Provider, or Autonomous System, without collateral damage done to others...|$|R
40|$|Abstract. A {{high speed}} IP address lookup engine with a {{reasonable}} memory cost {{is a key}} factor for designing a router at wire speed. This paper proposes a hardware solution that performs each IP address lookup in a few number of memory accesses with minimum amount of memory requirement. Our solution is based on dividing destination IP address into several segments. For finding the optimum address segmentation that minimizes the memory consumption, a genetic-algorithm solution is employed. The genetic program uses benchmark forwarding tables for finding the optimum points of address segmentation. The final result is a small forwarding table for the local traffic of the router. This table can be reconfigured along {{the time when the}} local traffic gradually changes. The proposed method can fit a forwarding table of size 130000 <b>routing</b> <b>prefixes</b> in about 1. 5 MB of memory with only four memory accesses for each lookup search. ...|$|R
40|$|Modern routers use {{specialized}} hardware, such as Ternary Content Addressable Memory (TCAM), {{to solve}} the Longest Prefix Matching Problem (LPMP) quickly. Due {{to the fact that}} TCAM is a non-standard type of memory and inherently parallel, there are concerns about its cost and power consumption. This problem is exacerbated by the growth in routing tables, which demands ever larger TCAMs. To reduce the size of the TCAMs in a distributed forwarding environment, a batch caching model is proposed and analyzed. The problem of determining which <b>routing</b> <b>prefixes</b> to store in the TCAMs reduces to the In-tree Knapsack Problem (ITKP) for unit weight vertices in this model. Several algorithms are analysed for solving the ITKP, both in the general case and when the problem is restricted to unit weight vertices. Additionally, a variant problem is proposed and analyzed, which exploits the caching model to provide better solutions. This thesis concludes with discussion of open problems and future experimental work...|$|R
50|$|The <b>routing</b> <b>prefix</b> may be {{expressed}} in Classless Inter-Domain Routing (CIDR) notation written as the first address of a network, followed by a slash character (/), and ending with the bit-length of the prefix. For example, 192.168.1.0/24 is the prefix of the Internet Protocol version 4 network starting at the given address, having 24 bits allocated for the network prefix, and the remaining 8 bits reserved for host addressing. The IPv6 address specification 2001:db8::/32 is a large address block with 296 addresses, having a 32-bit <b>routing</b> <b>prefix.</b>|$|E
50|$|The network prefix (the <b>routing</b> <b>prefix</b> {{combined}} with the subnet id) is contained in the most significant 64 bits of the address. The size of the <b>routing</b> <b>prefix</b> may vary; a larger prefix size means a smaller subnet id size. The bits of the subnet id(entifier) field are available to the network administrator to define subnets within the given network. The 64-bit interface identifier is either automatically generated from the interface's MAC address using the modified EUI-64 format, obtained from a DHCPv6 server, automatically established randomly, or assigned manually.|$|E
50|$|The <b>routing</b> <b>prefix</b> of an {{interface}} address may {{be directly}} indicated with the address by CIDR notation. For example, {{the configuration of}} an interface with address 2001:db8:a::123 connected to subnet 2001:db8:a::/64 is written as 2001:db8:a::123/64.|$|E
40|$|Abstract—High-speed IP lookup {{remains a}} {{challenging}} prob-lem in next generation routers {{due to the}} ever increasing line rate and routing table size. The evolution towards IPv 6 results in long prefix length, sparse prefix distribution, and potentially very large routing tables. In this {{paper we propose a}} memory-efficient IPv 6 lookup engine on Field Programmable Gate Array (FPGA). Static data structures are employed to reduce the on chip memory requirement. We design two novel techniques: implicit match identification and implicit match relay, to enhance the overall memory efficiency. Our experimental results show that the proposed techniques reduce memory usage by 30 %. Using our architecture, state-of-the-art FPGA devices can support 2 copies of IPv 6 routing table containing around 330 k <b>routing</b> <b>prefixes.</b> Using dual ported BRAM and external SRAM, 4 pipelines can be implemented on a single device, achieving a throughput of 720 million lookups per second (MLPS). Index Terms—IP lookup, packet forwarding, longest prefix match, binary search tree, perfect hash function. I...|$|R
40|$|Failures at the BGP level {{can have}} {{significant}} impact on the overall Internet. Understanding the behavior of BGP is thus both an important practical challenge and an interesting research problem. To understand the true dynamics, and help interpret the multiple gigabytes of BGP log data, we have developed the "Link-Rank" graphical toolset. Link-Rank weighs the links between Autonomous Systems by the number of <b>routing</b> <b>prefixes</b> going through each link. Tracing these graphs over time results in a directed graph that shows the weight changes of the logical inter-AS links. From this graph one can easily visualise the complex BGP path changes and also combine views from multiple vantage points, to get a better picture of global routing dynamics. We illustrate the usefulness of Link-Rank by using it to examine BGP routing dynamics in three example cases. These examples show Link-Rank is able to help BGP analysts estimate the scope of routing changes and to reveal important routing dynamics in the presence of superfluous BGP update messages...|$|R
40|$|Abstract — Traffic {{engineering}} {{is aimed at}} distributing traffic so as to “optimize ” a given performance criterion. The ability to carry out such an optimal distribution depends on both the routing protocol and the forwarding mechanisms in use in the network. In IP networks running the OSPF or IS-IS protocols, routing is over shortest paths, and forwarding mechanisms are constrained to distributing traffic uniformly over equal cost shortest paths. These constraints often make achieving an optimal distribution of traffic impossible. In this paper, we propose and evaluate an approach, based on manipulating the set of next hops for <b>routing</b> <b>prefixes,</b> {{that is capable of}} realizing near optimal traffic distribution without any change to existing routing protocols and forwarding mechanisms. In addition, we explore the tradeoff that exists between performance and the overhead associated with the additional configuration steps that our solution requires. The paper’s contributions are in formulating and evaluating an approach to traffic engineering for existing IP networks that achieves performance levels comparable to that offered when deploying other forwarding technologies such as MPLS...|$|R
50|$|For {{the purpose}} of network management, an IP address {{is divided into two}} logical parts, the network prefix and the host {{identifier}} or rest field. All hosts on a subnetwork have the same network prefix. This <b>routing</b> <b>prefix</b> occupies the most-significant bits of the address. The number of bits allocated within a network to the internal <b>routing</b> <b>prefix</b> may vary between subnets, depending on the network architecture. While in IPv6 the prefix must consist of a set of contiguous 1-bits, in IPv4 this is not enforced, though there is no advantage to using non-contiguous 1-bits. The host part is a unique local identification and is either a host number on the local network or an interface identifier.|$|E
50|$|In IPv6, {{addresses}} may {{be assigned}} by stateless (automatic) or stateful (manual) mechanisms. Stateless address autoconfiguration is performed {{as a component}} of the Neighbor Discovery Protocol (NDP), as specified in RFC 4862. The address is formed from its <b>routing</b> <b>prefix</b> and the MAC address of the interface.|$|E
5000|$|The {{preference}} selection algorithm, which selects {{the most}} appropriate address to use in communications with a particular destination (including the use of IPv4-mapped addresses in dual-stack implementations), {{is based on a}} user-customizable preference table that associates each <b>routing</b> <b>prefix</b> with a precedence level. The default table is as follows: ...|$|E
40|$|Abstract—We {{propose a}} {{combined}} length-infix pipelined search (CLIPS) architecture for high-performance IP lookup on FPGA. By performing binary search in prefix length, CLIPS {{can find the}} longest prefix match in (log L − c) phases, where L is the IP address length (32 for IPv 4) and c> 0 is a small design constant (c = 2 in our prototype design). Each CLIPS phase matches one or more input infixes of the same length against a regular data structure. Various CLIPS phases can be optimized individually: (1) 16 bits of the IP address are used to direct-access a 288 -kbit on-chip BRAM in phase 1; (2) 8 additional bits of the IP address are used to search a 1. 5 -million-entry pipelined dynamic search forest for a match in phase 2; (3) 1 to 8 additional bits of the IP address are used by a 2 -stage TreeBitmap for storing another 1 to 8 million <b>routing</b> <b>prefixes</b> in the tail phase. Post place-and-route results show that our CLIPS prototype, utilizing 28 Mbits on-chi...|$|R
40|$|To meet growing terabit link rates, highly {{parallel}} and scalable architectures {{are needed}} for IP lookup engines in next generation routers. This paper proposes an SRAM-based multi-pipeline architecture for multi-terabit rate IP lookup. The architecture consists of multiple bidirectional linear pipelines, where each pipeline stores part of a routing table. We address the challenges of realizing such a solution. Two mapping schemes with different granularity are proposed to balance the memory distribution over different pipelines as well as across different stages in each pipeline. Also, IP caching is adopted to facilitate processing multiple packets per clock cycle. Instead of using large reorder buffers and complex logic, a lightweight scheduler and several small output delay queues are developed to preserve the intra-flow packet order. Simulation experiments using real-life data show that the proposed 4 -pipeline architecture can store a core routing table with over 200 K unique <b>routing</b> <b>prefixes</b> in less than 2 MB of memory, and can achieve a high throughput of up to 18. 75 billion packets per second (GPPS), i. e. 6 Tbps for minimum size (40 bytes) packets...|$|R
40|$|Traffic {{engineering}} {{is aimed at}} distributing traffic so as to "optimize" a given performance criterion. The ability to carry out such an optimal distribution depends on both the routing protocol and the forwarding mechanisms in use in the network. In IP networks running the OSPF or IS-IS protocols, routing is over shortest paths, and forwarding mechanisms are constrained to distributing traffic uniformly over equal cost shortest paths. These constraints often make achieving an optimal distribution of traffic impossible. In this paper, we propose and evaluate an approach, based on manipulating the set of next hops for <b>routing</b> <b>prefixes,</b> {{that is capable of}} realizing near optimal traffic distribution without any change to existing routing protocols and forwarding mechanisms. In addition, we explore the tradeoff that exists between performance and the overhead associated with the additional configuration steps that our solution requires. The paper's contributions are in formulating and evaluating an approach to traffic engineering for existing IP networks that achieves performance levels comparable to that offered when deploying other forwarding technologies such as MPLS...|$|R
