2576|586|Public
25|$|The {{original}} drafts {{were intended}} to be an adult novel, but after several rejections Scholastic said they {{might be interested in}} Mortal Engines as a children's story. In the <b>refactoring</b> the story was simplified, removing several characters and much content Reeve thought would not be interesting to children (city politics).|$|E
25|$|Re-writers are {{synthetic}} biologists {{interested in}} testing the irreducibility of biological systems. Due {{to the complexity}} of natural biological systems, it would be simpler to re-build the natural systems of interest from the ground up; In order to provide engineered surrogates that are easier to comprehend, control and manipulate. Re-writers draw inspiration from <b>refactoring,</b> a process sometimes used to improve computer software.|$|E
25|$|Although in {{principle}} {{it is possible}} to practice DevOps with any architectural style, the microservices architectural style is becoming the standard for building continuously deployed systems. Because the size of each service is small, it allows the architecture of an individual service to emerge through continuous <b>refactoring,</b> hence reducing the need for a big upfront design and allows for releasing the software early and continuously.|$|E
5000|$|Dead (<b>ReFactor</b> 2008) - 4:46 (from Sick Transit Gloria Mundi, <b>ReFactor</b> 2008 remix) ...|$|R
40|$|AbstractThis paper proposes {{modeling}} {{laws for}} Alloy, a formal object-oriented modeling language. These laws are {{important not only}} to define the axiomatic semantics of Alloy but also to guide and formalize popular software development practices. In particular, these laws {{can be used to}} formaly <b>refactor</b> specifications. As an example, we formally <b>refactor</b> a specification for Java types...|$|R
5000|$|<b>Refactor</b> the system, {{putting the}} {{functionality}} in other services or redesigning the system.|$|R
25|$|Visual Studio {{includes}} a code editor supporting IntelliSense (the code completion component) {{as well as}} code <b>refactoring.</b> The integrated debugger works both as a source-level debugger and a machine-level debugger. Other built-in tools include a code profiler, forms designer for building GUI applications, web designer, class designer, and database schema designer. It accepts plug-ins that enhance the functionality at almost every level—including adding support for source control systems (like Subversion) and adding new toolsets like editors and visual designers for domain-specific languages or toolsets for {{other aspects of the}} software development lifecycle (like the Team Foundation Server client: Team Explorer).|$|E
25|$|The Visual Studio code editor also {{supports}} setting bookmarks in code for quick navigation. Other navigational aids include collapsing code blocks and incremental search, {{in addition to}} normal text search and regex search. The code editor also includes a multi-item clipboard and a task list. The code editor supports code snippets, which are saved templates for repetitive code and can be inserted into code and customized for the project being worked on. A management tool for code snippets is built in as well. These tools are surfaced as floating windows which can be set to automatically hide when unused or docked {{to the side of}} the screen. The Visual Studio code editor {{also supports}} code <b>refactoring</b> including parameter reordering, variable and method renaming, interface extraction and encapsulation of class members inside properties, among others.|$|E
500|$|Microsoft {{is leading}} the {{development}} of the open-source reference C# compiler and set of tools, previously codenamed [...] "Roslyn". The compiler, which is entirely written in managed code (C#), has been opened up and functionality surfaced as APIs. It is thus enabling developers to create <b>refactoring</b> and diagnostics tools. While other implementations of C# exist, Visual C# is by far the one most commonly used.|$|E
5000|$|Neovim, a <b>refactor</b> of Vim, that {{strives to}} be a superset of vim.|$|R
5000|$|Pragmatic Thinking and Learning: <b>Refactor</b> Your Wetware, Andy Hunt, 2008, The Pragmatic Bookshelf, ...|$|R
5000|$|... #Caption: Repetitive code being <b>refactored</b> {{by using}} an {{abstraction}} mechanism such as function.|$|R
500|$|The {{disbanding}} of Masyumi left Fakih {{with more}} time {{to focus on the}} Muhammadiyah, serving as the Second Deputy Chair under Junus Anis. During a leadership course run by the organisation during Ramadhan of 1380 AH (February/March 1961), Fakih began promoting an institutional identity through his lecture [...] "Apakah Muhammadiyah Itu" [...] ("What is Muhammadiyah?"). This outlined the organisation as one based in dawah, focusing on real-world issues, and willing to work with the government to ensure a prosperous future for Muslims. These concepts were later formulated through 1962 and established as an institutional identity, one which called for Muhammadiyah to work towards creating a truly Islamic society while opposing leftist politics. This, in turn, was followed by <b>refactoring</b> within the organisation to better adapt the new identity.|$|E
500|$|The {{foundation}} of PHP 7 is a PHP branch that was originally dubbed PHP next generation (phpng). It was authored by Dmitry Stogov, Xinchen Hui and Nikita Popov, and aimed to optimize PHP performance by <b>refactoring</b> the Zend Engine {{to use more}} compact data structures with improved cache locality while retaining near-complete language compatibility. [...] , WordPress-based benchmarks, which served as the main benchmark suite for the phpng project, showed an almost 100% increase in performance. [...] Changes from phpng are also expected {{to make it easier}} to improve performance in the future, as more compact data structures and other changes are seen as better suited for a successful migration to a just-in-time (JIT) compiler. [...] Because of the significant changes, the reworked Zend Engine is called Zend Engine 3, succeeding Zend Engine 2 used in PHP 5.|$|E
2500|$|The Neovim {{project was}} started in 2014, with some Vim {{community}} members offering early support of the high-level <b>refactoring</b> effort to provide better scripting, plugins, and integration with modern GUIs. [...] Neovim had a successful fundraiser on March 23, 2014, supporting at least one full-time developer. [...] Several frontends are under development, making use of Neovim's capabilities.|$|E
5000|$|Now {{this can}} be <b>refactored</b> and the {{trigonometric}} identity for [...] may be used: ...|$|R
2500|$|The loop which calculates {{each of the}} [...] outputs can be <b>refactored</b> {{into the}} equivalent: ...|$|R
5000|$|The loop that calculates {{each of the}} {{n outputs}} can be <b>refactored</b> into the equivalent: ...|$|R
2500|$|One of the {{differences}} of Ruby compared to Python and Perl is that Ruby keeps all of its instance variables completely private to the class and only exposes them through accessor methods (attr_writer, attr_reader, etc.). Unlike the [...] "getter" [...] and [...] "setter" [...] methods of other languages like C++ or Java, accessor methods in Ruby can be created with a single line of code via metaprogramming; however, accessor methods can also be created in the traditional fashion of C++ and Java. As invocation of these methods {{does not require the}} use of parentheses, it is trivial to change an instance variable into a full function, without modifying a single line of calling code or having to do any <b>refactoring</b> achieving similar functionality to C# and VB.NET property members.|$|E
2500|$|Replacement of Minas Gerais {{was under}} serious {{consideration}} by 1999; despite numerous refits and life-extending upgrades, the MB {{predicted that the}} carrier would require replacement before 2010. As well as the two proposals, consideration was given to acquiring a second-hand carrier, such as the French Navy's [...] One of the main issues in considering the replacement was the MB's significant investment in fixed-wing aviation in the late 1990s; a carrier capable of operating the recently acquired Skyhawks would be more expensive to acquire and operate than a STOVL or helicopter carrier, but the cheaper concepts would require the <b>refactoring</b> of Brazilian naval aviation. In the end, Foch was acquired, renamed NAe São Paulo, and slated to commission into the Marinha do Brasil in April 2001.She was downclassed as a helicopter support ship in 2001 before her decommissioning.|$|E
2500|$|Selenium Remote Control was a <b>refactoring</b> of Driven Selenium or Selenium B {{designed}} by Paul Hammant, credited with Jason as co-creator of Selenium. The original version directly launched {{a process for}} the browser in question, from the test language of Java, [...]Net, Python or Ruby. The wire protocol (called 'Selenese' in its day) was reimplemented in each language port. After the refactor by Dan Fabulich, and Nelson Sproul (with help from Pat Lightbody) there was an intermediate daemon process between the driving test script, and the browser. The benefits included the ability to drive remote browsers, and the reduced need to port every line of code to an increasingly growing set of languages. Selenium Remote Control completely took over from the Driven Selenium code-line in 2006. The browser pattern for 'Driven'/'B' and 'RC' was response/request, which subsequently became known as Comet.|$|E
40|$|RinSim is a {{logistics}} simulator {{written in}} Java. RinSim supports (de) centralized algorithms for dynamic pickup-and-delivery problems (PDP). The simulator is {{developed at the}} imec-DistriNet group at the dept. of Computer Science, KU Leuven, Belgium. Changes in this version: 	<b>Refactored</b> MeasurableSolver system, introduced Measurable interface. 	<b>Refactored</b> PDPRoadModel system for compatibility with GraphRoadModel. 	GraphRoadMoel builder that links to an external graph can now be serialized in a scenario...|$|R
40|$|Parallelizing {{existing}} sequential {{programs to}} run efficiently on multicores is hard. The Java 5 package java. util. concurrent (j. u. c.) supports writing concurrent programs. To use this package, programmers {{still need to}} <b>refactor</b> existing code. This is tedious, error-prone, and omission-prone. This demo presents our tool, CONCURRENCER, which enables programmers to <b>refactor</b> sequential code into parallel code that uses j. u. c. concurrent utilities. CONCURRENCER does not require any program annotations, although the transformations span several, non-adjacent, program statements and use custom program analysis. A find-and-replace tool can not perform such transformations. Empirical evaluation shows that CONCURRENCER <b>refactors</b> code effectively: CONCURRENCER correctly identifies and applies transformations that some open-source developers overlooked, and the converted code exhibits good speedup...|$|R
50|$|In particular, extreme {{programming}} {{has been}} reviewed and critiqued by Matt Stephens's and Doug Rosenberg's Extreme Programming <b>Refactored.</b>|$|R
2500|$|After Romney {{left the}} race in February, leaving John McCain {{strongly}} favored to win the nomination, Paul e-mailed his supporters on February 8 and stated that he was <b>refactoring</b> his presidential campaign to be [...] "leaner and tighter" [...] and would devote {{a significant portion of}} his time specifically to his campaign for reelection to the U.S. House, representing Texas's 14th congressional district, where Paul is being challenged for the Republican nomination by Friendswood mayor pro tem Chris Peden. Paul recognized a nearly zero chance of a brokered convention. He was determined to continue in every caucus and primary remaining and promised not to campaign for president for another party. Staffer Dan McCarthy clarified in a [...] on February 9 that Paul's presidential campaign [...] "is not ending, not being suspended, and not even drawing down", stating that [...] " [...] few news sources are misreporting Ron Paul’s e-mail from last night." ...|$|E
50|$|While {{the term}} <b>refactoring</b> {{originally}} referred exclusively to <b>refactoring</b> of software code, {{in recent years}} code written in hardware description languages (HDLs) has also been refactored. The term hardware <b>refactoring</b> {{is used as a}} shorthand term for <b>refactoring</b> of code in hardware description languages. Since HDLs are not considered to be programming languages by most hardware engineers, hardware <b>refactoring</b> is to be considered a separate field from traditional code <b>refactoring.</b>|$|E
50|$|It is not {{a pattern}} from Design Patterns, but is {{mentioned}} in Martin Fowler's <b>Refactoring</b> and Joshua Kerievsky's book on <b>refactoring</b> in the Insert Null Object <b>refactoring.</b>|$|E
50|$|ThreadWeaver is {{system library}} {{initially}} developed for KDE Software Compilation 4 and later <b>refactored</b> for KDE Frameworks 5.|$|R
5000|$|Downcasting: a type cast which {{breaks the}} {{abstraction}} model; the abstraction {{may have to}} be <b>refactored</b> or eliminated.|$|R
40|$|In {{this paper}} {{we report on}} our {{re-engineering}} effort to <b>refactor</b> and unify two somewhat disjoint Java distributed middleware technologies – Jini and JMS – used in the implemen-tation of the Demand Migration System (DMS). In doing so, we <b>refactor</b> their parent De-mand Migration Framework (DMF), within the General Intensional Programming System (GIPSY). The complex Java-based GIPSY project is used to investigate on the intensional and hybrid programming paradigms. ...|$|R
5000|$|... ===Model refactoring=== Model <b>refactoring</b> like code <b>refactoring</b> is the disciplined {{technique}} used for modifying or improving an existing model. The following <b>refactoring</b> functions {{are available in}} MagicDraw: ...|$|E
50|$|Before <b>refactoring</b> {{a section}} of code, a solid set of {{automatic}} unit tests is needed. The tests are used {{to demonstrate that the}} behavior of the module is correct before the <b>refactoring.</b> If a test fails, it is generally best to fix the test first; if this is not done, it is hard to distinguish between failures introduced by <b>refactoring</b> and failures that were already present. After <b>refactoring,</b> the tests are run again to verify the <b>refactoring</b> did not break the tests. Unit tests cannot prove that there are no bugs, but the important point is that this process can be cost-effective: good unit tests can catch enough errors to make them worthwhile and to make <b>refactoring</b> safe enough.|$|E
50|$|His 1999 book <b>Refactoring</b> popularized the {{practice}} of code <b>refactoring.</b> In 2004 he introduced Presentation Model (PM), an architectural pattern.|$|E
50|$|The {{advancement}} {{program for}} Scouts of Scouting Ireland {{has been designed}} and <b>refactored</b> since the merger of earlier organizations.|$|R
5000|$|Lack of ownership, when {{outsourced}} software efforts {{result in}} in-house engineering {{being required to}} <b>refactor</b> or rewrite outsourced code.|$|R
5000|$|Menu {{and command}} {{structure}} <b>refactored</b> both to integrate new features {{and to make}} Freeplane more intuitive and easier to learn ...|$|R
