65|228|Public
5000|$|Design and {{development}} of Arecanut (Careca Catech Linn) sheath size <b>reduction</b> <b>machine</b> ...|$|E
50|$|A graph <b>reduction</b> <b>machine</b> is a {{special-purpose}} computer built to perform combinator calculations by graph reduction.|$|E
5000|$|However, {{in order}} to be useful, {{reductions}} must be easy. For example, it's quite possible to reduce a difficult-to-solve NP-complete problem like the boolean satisfiability problem to a trivial problem, like determining if a number equals zero, by having the <b>reduction</b> <b>machine</b> solve the problem in exponential time and output zero only if there is a solution. However, this does not achieve much, because even though we can solve the new problem, performing the reduction is just as hard as solving the old problem. Likewise, a reduction computing a noncomputable function can reduce an undecidable problem to a decidable one. As Michael Sipser points out in Introduction to the Theory of Computation: [...] "The reduction must be easy, relative to the complexity of typical problems in the class ... If the reduction itself were difficult to compute, an easy solution to the complete problem wouldn't necessarily yield an easy solution to the problems reducing to it." ...|$|E
40|$|In {{order to}} {{facilitate}} research and teaching into parallelism in functional languages, the authors have implemented a simulator for parallel graph <b>reduction</b> <b>machines.</b> The simulator is capable of modelling both shared and distributed memory machines, and both strict and lazy evaluation strategies. This paper describes the simulator, together with some results achieved with it. 1...|$|R
40|$|Linear head {{reduction}} {{is a key}} tool {{for the analysis of}} <b>reduction</b> <b>machines</b> for lambda-calculus and for game semantics. Its definition requires a notion of redex at a distance named primary redex in the literature. Nevertheless, a clear and complete syntactic analysis of this rule is missing. We present here a general notion of beta-reduction at a distance and of linear reduction (i. e., not restricted to the head variable), and we analyse their relations and properties. This analysis rests on a variant of the so-called sigma-equivalence that is more suitable for the analysis of <b>reduction</b> <b>machines,</b> since the position along the spine of primary redexes is not permuted. We finally show that, in the simply typed case, the proof of strong normalisation of linear reduction can be obtained by a trivial tuning of Gandy's proof for strong normalisation of beta-reduction. Comment: In Proceedings LINEARITY 2016, arXiv: 1701. 0452...|$|R
40|$|Abstract: We inter-derive two prototypical {{styles of}} graph reduction: <b>reduction</b> <b>machines</b> a ̀ la Turner and graph {{rewriting}} systems a ̀ la Barendregt et al. To this end, we adapt Danvy et al. ’s mechanical program derivations {{from the world}} of terms to the world of graphs. We also outline how to inter-derive a third style of graph reduction: a graph evaluator. 1. ...|$|R
40|$|We {{investigate}} {{the development of}} a graph <b>reduction</b> <b>machine</b> for a higher-order functional logic language by extension of an appropriate architecture for purely functional languages. To execute logic programs the machine must be capable of performing unification and backtracking. We show the integration of these mechanisms in a programmed (functional) graph <b>reduction</b> <b>machine.</b> The new machine has been implemented on a transputer system...|$|E
40|$|A {{systematic}} {{method of}} compiling lazy functional programs {{based on the}} Spineless Tagless G-machine (STGM) is presented for the Java Virtual Machine (JVM). A new specification of the STGM, which consists of a compiler and a <b>reduction</b> <b>machine,</b> is presented; the compiler translates a program in the STG language, which is the source language for the STGM, into a program in an intermediate language called L-code, and our <b>reduction</b> <b>machine</b> reduces the L-code program into an answer...|$|E
40|$|AbstractThe {{complexity}} of the computation of recursive programs by the combinator <b>reduction</b> <b>machine</b> is studied. The number of the reduction steps in compared between the two models of computation. The main theorem states that the time required by the <b>reduction</b> <b>machine</b> is linear in that of the program scheme. The coefficient of the linearity was shown to be O(n 2), where n is the maximal number of variables of the functions being used. For {{the analysis of the}} combinator codes, the notion of extended combinator code is introduced...|$|E
50|$|The MIMD-Based Paradigms {{category}} subsumes {{systems in}} which a specific programming or execution paradigm {{is at least as}} fundamental to the architectural design as structural considerations are. Thus, the design of dataflow architectures and <b>reduction</b> <b>machines</b> is as much the product of supporting their distinctive execution paradigm as it is a product of connecting processors and memories in MIMD fashion. The category's subdivisions are defined by these paradigms.|$|R
40|$|This thesis {{concentrates}} on the development and application of Groebner bases methods {{to a range of}} combinatorial problems (involving groups, semigroups, categories, category actions, algebras and K-categories). Chapter Two contains the generalisation of rewriting and Knuth-Bendix procedures to Kan extensions. Chapter Three shows that the standard Knuth-Bendix algorithm is step-for-step a special case of the Buchberger's algorithm for noncommutative Groebner bases. The one-sided cases and higher dimensions are considered, and the relations between these are made precise. Chapter Four relates rewrite systems, Groebner bases and automata. <b>Reduction</b> <b>machines</b> for rewrite systems are identified with standard output automata and the <b>reduction</b> <b>machines</b> devised for algebras are expressed as Petri-nets. Chapter Five introduces logged rewriting for group presentations. The completion of a logged rewriting system for a group determines a partial contracting homotopy which enables the computation of a set of generators for the module of identities among relations using the covering groupoid methods devised by Brown and Razak Sallah. Reducing the resulting set of submodule generators is identified as a Groebner basis problem...|$|R
50|$|Anton Hám {{introduced}} in the Kremnica Mint enamelling of lapel pins and order (honour)-s that were very popular and have been produced for leading companies in the state. A large number of his pins have been focused on sports, religious, historical and agricultural themes. In 1937, he became acquainted with pantographs and the Janvier <b>reduction</b> <b>machines</b> for the medal art on his study stay in Paris, which then he {{introduced in}} the Kremnica Mint.|$|R
40|$|A new <b>reduction</b> <b>machine</b> for lazy {{functional}} languages {{called the}} Reduceron is proposed. The Reduceron exploits wide, parallel memories to increase evaluation speed, and is prototyped in programmable hardware. It is compared with conventional machines by a theoretical analysis and by an experimental comparison. It is {{shown that the}} use of wide, parallel memories in a graph <b>reduction</b> <b>machine</b> can lead to a factor of five performance improvement. Existing approaches to property-based testing are reviewed, and two new ones – Reach and Lazy SmallCheck – are developed. Reach is a program analyser that targets evaluation of expressions left uncovered by existing testing techniques, and Lazy SmallCheck is a lightweight library for a standard lazy functional language. Both are more effective than existing approache...|$|E
40|$|This {{observation}} is studying {{about the need}} of specific electrical energy emission <b>reduction</b> <b>Machine</b> toward CO 2 emission gas content of combustion resulted of 4 stroke motorcycle on variety of the machine rotation on motorcycle. Combustion reactor is fixed at exhaust and complemented with electrical ignition system such CDI (Capacitor Discharge Ignition) as addition. The current energy then measured on gasses emission <b>reduction</b> <b>machine</b> which source comes of motorcycle pulsar. The observation result of specific electrical energy which needed by addition ignition system is about 5. 39 – 296. 72 Volt Ampere. That such amount of electrical energy has been not capable yet in gas emission reduction of CO 2 even CO 2 level is increasing between 10. 09 — 66. 67...|$|E
40|$|The paper {{investigates the}} {{implementation}} of lazy narrowing {{in the framework of}} a graph <b>reduction</b> <b>machine.</b> By extending an appropriate architecture for purely functional languages an abstract graph narrowing machine for a functional logic language is constructed. The machine is capable of performing unification and backtracking...|$|E
40|$|This thesis {{concentrates}} on the development and application of rewriting and Groebner basis methods {{to a range of}} combinatorial problems. Chapter Two contains the most important result, which is the application of Knuth-Bendix procedures to Kan extensions, showing how rewriting provides a useful method for attempting to solve a variety of combinatorial problems which can be phrased in terms of Kan extensions. Chapter Three shows that the standard Knuth-Bendix algorithm is step-for-step a special case of Buchberger's algorithm. The one-sided cases and higher dimensions are considered. Chapter Four relates rewrite systems, Groebner bases and automata. Automata which only accept irreducibles, and automata which output reduced forms are discussed for presentations of Kan extensions. <b>Reduction</b> <b>machines</b> for rewrite systems are identified with standard output automata and the <b>reduction</b> <b>machines</b> devised for algebras are expressed as Petri nets. Chapter Five uses the completion of a group rewriting system to algorithmically determine a contracting homotopy necessary in order to compute the set of generators for the module of identities among relations using the covering groupoid methods devised by Brown and Razak Salleh. Reducing the resulting set of submodule generators is identified as a Groebner basis problem. Algorithms are implemented in GAP 3. Comment: 1998 PhD thesis, LaTeX 2 e 105 pages, most typos correcte...|$|R
40|$|Lazy {{narrowing}} {{has been}} proposed as the operational model of functional logic languages. This paper presents a new abstract machine which implements lazy narrowing. The core of this machine consists of a conventional stack based architecture like the one used for imperative languages. Almost orthogonal extensions of this core implement the different concepts of functional logic languages. This simplifies the machine design to a great deal and reduces the instruction set which has been particularly designed to support the application of standard code generation techniques. By its orthogonality, it is achieved that unused features introduce only minimal overhead. As a result, when performing ground term <b>reduction</b> the <b>machine</b> enjoys the same characteristics as efficient graph <b>reduction</b> <b>machines.</b> 1 Introduction Functional logic languages are obtained when free logical variables are allowed in functional expressions [BL 86, Red 86]. Several methods of combination have been proposed [...] . ...|$|R
40|$|Customers today require smaller {{series of}} products. In {{manufacturing}} companies, this increases machine setup time, {{which is a}} waste. This paper presents a procedure for organizing and implementing a <b>reduction</b> of <b>machine</b> setup time. It is based on teamwork and uses the SMED method, which allows a gradual <b>reduction</b> of <b>machine</b> setup time to less than 10 minutes, and a continuous improvement system. The paper also {{presents the results of}} the organization and execution of a SMED workshop for the reduction of setup timesin a jet machine, as well as first suggestions for improvements that should significantly reduce machine setup time...|$|R
40|$|A {{parallel}} graph <b>reduction</b> <b>machine</b> simulator is described. This performs combinator {{reduction and}} can simulate various different parallel reduction strategies. A number of functional programs are examined, and experimental results presented comparing {{the amount of}} parallelism obtainable using explicit divide-and-conquer with {{the maximum amount of}} parallelism available in the programs...|$|E
40|$|Abstract: This paper {{introduces}} two real-time {{functional programming}} languages. The first one aims to describe temporal trajectories. The second allows {{the manipulation of}} both real-time and deferred time streams. We shall describe {{the architecture of the}} real-time <b>reduction</b> <b>machine</b> used for evaluation. We shall also review the expected consequences of this approach. ...|$|E
40|$|This paper {{presents}} a new Lambda-Boolean <b>reduction</b> <b>machine</b> for Lambda-Boolean and Lambda-Beta Boolean {{reductions in the}} context of Lambda Calculus and introduces the role of Church–Rosser properties and functional computation model in symbolic and algebraic computation with induction. The algorithm which improved for Lambda-Beta Boolean reduction is simulated by the efficient logical programming language Prolog...|$|E
40|$|Over {{the past}} decade, Euclidean {{distance}} matrices, or EDMs, have been receiving increased attention for two main reasons. The first {{reason is that}} the many applications of EDMs, such as molecular conformation in bioinformatics, dimensionality <b>reduction</b> in <b>machine</b> learning and statistics, and especiall...|$|R
40|$|National School of Engineers of Tarbes (ENIT LGP {{laboratory}} of the) {{gave rise to}} the VIBRACTION, company developing the ChatterMaster software, dedicated to <b>machining</b> vibrations <b>reduction.</b> <b>Machining</b> vibrations problems cost more than 200 euros per machining center each month. The main phenomenon mainly occur on poorer machined surface finish, increased tools wear or breakage and sometimes unbearable whistles. The phenomenon of machining vibrations is very difficult to control due to the number of parameters involved (original illustrations are given in the article). After ten years of research and 3 years of intensive programming and workshop tests, the ChatterMaster software was born. It articulates about fifteen mechanical models of machining with a hundred rules, integrated in an interface using the natural language of the machinist...|$|R
40|$|AbstractA {{relevant}} drawback {{between the}} theory and the current implementations of logic programming languages {{is represented by the}} use of metalevel structures, like substitutions, and mechanisms, like mgu and instantiation, to deal with the substitution rule. Substitution rule is highly involved in the formalization of proof procedures, including narrowing and resolution. We put the substitution rule as an additional operator, mgi, of the algebra of the language terms and provide them with a variable-free abstract representation, c-expressions. A formal definition of the operations of the algebra is given through rules which, replacing equal by equal define a calculus having a special class of c-expressions as normal forms. The calculus provides for a formal construction of <b>reduction</b> <b>machines</b> for unification, rewriting and narrowing, all having c-expressions as programs...|$|R
40|$|Dactl is an {{experimental}} language programming language based on fine grain graph transformations. It {{was developed in}} the context of a large parallel <b>reduction</b> <b>machine</b> project. The design of the language is outlined, and examples given of its use both as a compiler target language and as a programming language. Dactl has a formal semantics and stable implementations on a number of platforms...|$|E
40|$|This paper {{presents}} ours rst {{experiences in}} building software components in lazy functional languages, by construing functional programs as JavaBeans components. First we show {{how we have}} implemented a graph <b>reduction</b> <b>machine,</b> the G-Machine, {{on top of the}} JVM. Then, using a compiler for a small functional language to G-Code instructions, we show how to get JavaBeans components from functional programs. KEYWORDS: Implementation of Functional Languages, Software Components and Java. ...|$|E
40|$|Denotational {{semantics}} {{is presented}} as a valuable theoretical tool, having many applications including language design, compiler generation and program analysis. In particular, a method is described for deriving a concise and useful functional representation of a program using a denotational definition of the source language's semantics. Our aim is to translate a given program into a compact functional representation to facilitate its evaluation on functional hardware. The λ-expressions are first translated into Turner's combinator code. We choose to use a fixed set of combinators as the resulting code is more amenable to analysis and there are many inherent advantages such as lazy evaluation and once only evaluation of reducible sub-expressions. Semantic algebras relating to static semantics and the store algebra are “unfrozen” so they can be partially evaluated. The <b>reduction</b> <b>machine</b> that performs the evaluation includes simplification rules that allows a more compact functional representation (denotation) to be reached. If desired, {{some or all of the}} program arguments can be supplied to produce a new denotation (result) using the same <b>reduction</b> <b>machine...</b>|$|E
40|$|In Australia, {{there is}} {{evidence}} to suggest that there is a positive association between the geographical accessibility of electronic gaming machines (EGMs) and the frequency and intensity of gambling in local areas. Evidence such as this has been used to introduce regulatory policies to reduce the geographical accessibility of EGMs through the <b>reduction</b> of gaming <b>machine</b> numbers in venues. The aim of this paper was to describe the process involved in the 15 per cent <b>reduction</b> in gaming <b>machine</b> numbers in the state of South Australia and the apparent effects on gaming revenue and gambling behaviours. Detailed analysis of objective EGM data as well as survey-based interviews with 400 regular EGM players provided only limited evidence of behavioural changes or significant reductions in gaming revenue. The paper describes the nature of industry responses to circumvent the effects of the <b>reduction</b> in <b>machine</b> numbers and the implications of these findings for future regulatory policies relating to EGM gambling. Paul Delfabbr...|$|R
40|$|AbstractCurien's CAM is an {{environment}} machine for the untyped λ-calculus based on cartesian closed categories (CCC's). This categorical model represents both environments and terms by morphisms {{regardless of their}} conceptual difference. We show that Ehrhard's D-categories yield a nice way of separating these two notions. Based on suitable categorical combinators for these D-categories we derive an eager and a lazy abstract machine. These machines specialize to the CAM and to Krivine's machine respectively. D-categories extended with additional structure to model the calculus of constructions yield generalizations of the CAM and Krivine's machine to this higher-order λ-calculus. We also obtain an algorithm for type checking of these combinators, which uses the above <b>reduction</b> <b>machines.</b> Tests using Church-numerals show that the abstract machines are quite efficient compared to other implementations...|$|R
40|$|Introduction We {{extend the}} core Prolog model of [2] to {{a model for}} the {{functional}} logic programming language BABEL [8] by adding, to Prolog's backtracking structure, rules for the reduction of functional expressions to normal form. Then we define six typical provably correct refinements which are directed towards implementation of functional logic programs: structure sharing for expressions, explicit computation of the normal form condition, embedding of the backtracking tree into a stack, localization of the normal form computation for expressions (introducing local environments for computation of subexpressions) together with some optimizations in IBAM [6], a (graph [...] -) narrowing machine actually implementing innermost BABEL. Thus the machinery of [2, 3] for mathematical description and analysis of logic programs, is linked to functional logic programs and their implementation on machines which typically combine the WAM [9] with features from <b>reduction</b> <b>machines</b> [4] for funct...|$|R
40|$|The first-order, untyped, {{functional}} logic language Babel {{is extended}} by polymophic types and higher order functions. A sophisticated incompatibility check {{which is used}} to guarantee nonambiguity of BABEL programs is presented. For the implementation of the language, unification and backtracking are integrated in a programmed (functional) graph <b>reduction</b> <b>machine.</b> The implementation of this machine has been used for a comparison between Babel and PROLOG based on the runtimes of some example programs...|$|E
40|$|AbstractA λ-calculus is defined, {{which is}} {{parametric}} {{with respect to}} a set V of input values and subsumes all the different λ-calculi given in the literature, in particular the classical one and the call-by-value λ-calculus of Plotkin. It is proved that it enjoy the confluence property, and a necessary and sufficient condition is given, under which it enjoys the standardization property. Its operational semantics is given through a <b>reduction</b> <b>machine,</b> parametric with respect to both V and a set Vo of output values...|$|E
40|$|In November 1984 three {{research}} {{groups at the}} universities of Amsterdam, Nijmegen and Utrecht started a cooperative project sponsored by the Dutch Ministry of Science and Education (Science Council). The first phase lasting {{until the end of}} 1987 is a pilot study and has as aim to answer the following question. Is it possible and realistic to construct an efficient parallel <b>reduction</b> <b>machine?</b> The present paper gives an outline of the problems concerning parallel reduction machines and of our research towards their solutions...|$|E
40|$|A {{versatile}} multistep {{continuous flow}} setup is {{reported for the}} four-step conversion of anilines into pyrazole products. The synthesis machine incorporates the use of amine-redox chemistry through diazotization and a metal-free vitamin C mediated <b>reduction.</b> The <b>machine</b> {{can be used for}} the synthesis of an array of analogues or the scale up of an individual target...|$|R
40|$|The meshed stack is a {{technique}} {{for the management of}} control structures in distributed implementations of dynamic process systems. In the environment of a parallel abstract machine for the execution of functional programs, we compare this approach to the classical graphbased reduction technique. Experimental results will show, that the stackbased reduction is more efficient in space and time, especially in relation to garbage collection. Also, the stack technique is a natural extension of sequential <b>reduction</b> <b>machines.</b> 1 Introduction In parallel implementations of functional languages, graph reduction is a well-known technique. Whereas purely sequential implementations use a runtime stack for the control of recursive function calls, parallel implementations allocate runtime structures in a graph or heap. Because of the dynamic process behaviour, the use of a single global stack is no longer advisable. Since each parallel task or process needs its own stack structure, a global [...] ...|$|R
40|$|Considering {{the wide}} range of {{products}} and the small lot size laser beam welding is a suitable process for manufacturing large-scale cooking apparatus. Laser beam welding with optimium process parameters results in <b>reduction</b> of <b>machining</b> after welding and allows higher rates of welding speed. Furthermore it offers the opportunity for completely new design. This is shown exemplary for a large frying pan...|$|R
