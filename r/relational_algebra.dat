1091|62|Public
25|$|Various {{operations}} on binary endorelations {{can be treated}} as giving rise to an algebraic structure, known as relation algebra. It {{should not be confused}} with <b>relational</b> <b>algebra</b> which deals in finitary relations (and in practice also finite and many-sorted).|$|E
25|$|Algebraic {{structures}} {{occur as}} both discrete examples and continuous examples. Discrete algebras include: boolean algebra used in logic gates and programming; <b>relational</b> <b>algebra</b> used in databases; discrete and finite versions of groups, rings and fields {{are important in}} algebraic coding theory; discrete semigroups and monoids appear {{in the theory of}} formal languages.|$|E
500|$|Joins {{evaluate}} {{using the}} same comparison rules as for WHERE clauses. Therefore, {{care must be taken}} when using nullable columns in SQL join criteria. In particular a table containing any nulls is not equal with a natural self-join of itself, meaning that whereas [...] is true for any relation R in <b>relational</b> <b>algebra,</b> a SQL self-join will exclude all rows having a Null anywhere. An example of this behavior is given in the section analyzing the missing-value semantics of Nulls.|$|E
50|$|Projection is <b>relational</b> <b>algebra's</b> {{counterpart}} of existential quantification in predicate logic. The attributes not included correspond to existentially quantified {{variables in the}} predicate whose extension the operand relation represents. The example below illustrates this point.|$|R
40|$|In {{this paper}} we use Janelidze’s {{approach}} to the classical theory of topological coverings via categorical Galois theory to study coverings in categories of <b>relational</b> <b>algebras.</b> Moreover, we present characterizations of effective descent morphisms in the categories of M-ordered sets and of multi-ordered sets...|$|R
40|$|Reasoning about {{temporal}} and spatial information is a common task in computer science, especially {{in the field of}} artificial intelligence. The topic of this thesis is the study of such reasoning from a computational perspective. We study a number of different qualitative point based formalisms for temporal reasoning and provide a complete classification of computational tractability for different time models. We also develop more general methods which can be used for proving tractability and intractability of other <b>relational</b> <b>algebras.</b> Even though most of the thesis pertains to qualitative reasoning the methods employed here can also be used for quantitative reasoning. For instance, we introduce a tractable and useful extension to the quantitative point based formalism STP � =. This extension gives the algebra an expressibility which subsumes the largest tractable fragment of the augmented interval algebra and has a faster and simpler algorithm for deciding consistency. The use of disjunctions in temporal formalisms is of great interest not only since disjunctions are a key element in different logics but also since the expressibility can be greatly enhanced in this way. If we allow arbitrary disjunctions, the problems under consideration typically become intractable and methods to identify tractable fragments of disjunctive formalisms are therefore useful. One such method is to use the independence property. We present an automatic method for deciding this property for many <b>relational</b> <b>algebras.</b> Furthermore, we show how this concept can not only be used for deciding tractability of sets of relations but also to demonstrate intractability of relations not having this property. Together with other methods for making total classifications of tractability this goes a long way towards easing the task of classifying and understanding <b>relational</b> <b>algebras.</b> The tractable fragments of <b>relational</b> <b>algebras</b> are sometimes not expressive enough to model real-world problems and a backtracking solver is needed. For these cases we identify another property among relations which can be used to aid general backtracking based solvers to find solutions faster...|$|R
500|$|A {{construct}} (such as a Codd table) {{is said to}} be {{a strong}} representation system (of missing information) if any answer to a query made on the construct can be particularized to obtain an answer for any corresponding query on the relations it represents, which are seen as models of the construct. More precisely, if [...] is a query formula in the <b>relational</b> <b>algebra</b> (of [...] "pure" [...] relations) and if [...] is its lifting to a construct intended to represent missing information, a strong representation has the property that for any query q [...] and (table) construct T, [...] lifts all the answers to the construct, i.e.: ...|$|E
5000|$|Alf - <b>Relational</b> <b>Algebra</b> at your Fingertips, a Ruby {{implementation}} of <b>relational</b> <b>algebra</b> inspired by Tutorial D, {{that you can}} try online.|$|E
5000|$|Even {{the query}} {{language}} of SQL is {{loosely based on}} a <b>relational</b> <b>algebra,</b> though the operands in SQL (tables) are not exactly relations and several useful theorems about the <b>relational</b> <b>algebra</b> do not hold in the SQL counterpart (arguably {{to the detriment of}} optimisers and/or users). The SQL table model is a bag (multiset), rather than a set. For example, the expression (R ∪ S) − T = (R − T [...] ) ∪ (S − T) is a theorem for <b>relational</b> <b>algebra</b> on sets, but not for <b>relational</b> <b>algebra</b> on bags; for a treatment of <b>relational</b> <b>algebra</b> on bags see chapter 5 of the [...] "Complete" [...] textbook by Garcia-Molina, Ullman and Widom.|$|E
40|$|Data Types Juan E. Dur'an April 11, 1996 PUC-Rio Inf. MCC 10 / 96 Abstract. Some {{varieties}} that are extensions of <b>relational</b> <b>algebras</b> with two constants that {{play the role}} of projections are studied. They are obtained by weakening some laws valid in abstract fork algebra. Applications in the literature and in the specification of abstract data types are exhibited. For the subvarieties formed with the models that have a repressentable relational reduct, a repressentation theorem is proved. For them the finitization problem is studied. Next the varieties presented are compared by means of the inclusion order. The existence of equivalent classes with a binary operation like fork is studied. Simple models and elementary properties in the classes are studied. Keywords: <b>relational</b> <b>algebras,</b> fork <b>algebras,</b> projection, <b>relational</b> specification, abstract data type, representation problem, finitization problem. Resumo. Algumas variedades que s~ao extens~oes de 'algebras relacionais com duas cons [...] ...|$|R
40|$|Many finite {{symmetric}} integral non-representable relation algebras, including {{almost all}} Monk algebras, can be {{embedded in the}} completion of an atomic symmetric integral representable relation algebra whose finitely-generated subalgebras are finite. Comment: 22 pages, presented as Subcompletions of atomic representable <b>relational</b> <b>algebras,</b> Invited Talk, at the Workshop on Lattices and Relations, 12 September 2012, Institute for Logic, Language and Computation, University of Amsterdam, The Netherland...|$|R
40|$|AbstractDualities between {{different}} theories occur frequently {{in mathematics and}} logic—between syntax and semantics of a logic, between structures and power structures, between relations and <b>relational</b> <b>algebras,</b> {{to name just a}} few. In this paper, we show for the case of structures and power structures how corresponding properties of the two related structures can be computed fully automatically by means of quantifier elimination algorithms and predicate logic theorem provers. We illustrate the method with some examples that were computed with the Otter theorem prover...|$|R
5000|$|TclRal - Tcl <b>Relational</b> <b>Algebra</b> Library, TclRal is an {{implementation}} of <b>relational</b> <b>algebra,</b> based on concepts in The Third Manifesto, {{as an extension}} of the Tcl language.|$|E
50|$|The {{principle}} is a restatement of {{the requirement that}} a database is a minimum cover set of the <b>relational</b> <b>algebra.</b> The <b>relational</b> <b>algebra</b> allows data duplication in the relations that are {{the elements of the}} algebra. One of the efficiency requirements of a database is that there be no data duplication. This requirement is met by the minimum cover set of the <b>relational</b> <b>algebra.</b>|$|E
50|$|Equijoin in <b>relational</b> <b>algebra.</b>|$|E
40|$|Abstract. We {{present a}} query {{language}} called MDatalog, {{which is an}} extension of Datalog for multimodal deductive databases. We define modal <b>relational</b> <b>algebras</b> and give the seminaive evaluation algorithm and the magic-set transformation for MDatalog queries. Results of this paper are proved for the multimodal logics of belief KDI 4 s 5, KDI 45, KD 4 s 5 s, KD 45 (m), which are extensions of the monomodal logic KD 45. We show that MDatalog has PTIME data complexity in these logics. ...|$|R
40|$|The {{investigation}} {{objects are}} the mathematical {{models of the}} databases and knowledge representation systems. The formalization of the conception "relational algebra" has been constructed. The theorem about classification of the <b>relational</b> <b>algebras</b> {{in the spirit of}} the Galois theory has been proved, the new approach to the representation of conceptions based on the methods of the category theory and theory of the toposes has been proposed and developed. Available from VNTIC / VNTIC - Scientific & Technical Information Centre of RussiaSIGLERURussian Federatio...|$|R
40|$|Support {{of order}} in query {{processing}} {{is a crucial}} component in relational database systems, {{not only because the}} output of a query is often required to be sorted in a specific order, but also because employing order properties can significantly reduce the query execution cost. Therefore, finding an effective approach to answer queries over ordered data is important to the efficiency of query processing in relational databases. In this dissertation, an ordered relational database model is proposed, which captures both data tuples of relations and tuple ordering in relations. Based on this conceptual model, ordered relational queries are formally defined in a two-sorted first-order calculus, which serves as a yardstick to evaluate expressive power of other ordered query representations. The primary purpose of this dissertation is to investigate the expressive power of different ordered query representations. Particularly, the completeness problem of ordered <b>relational</b> <b>algebras</b> is studied with respect to the first-order calculus: does there exist an ordered algebra such that any first-order expressible ordered relational query can be expressed by a finite sequence of ordered operations? The significance of studying the completeness problem of ordered <b>relational</b> <b>algebras</b> is in that the completeness of ordered <b>relational</b> <b>algebras</b> leads to the possibility of implementing a finite set of ordered operators to express all first-order expressible ordered queries in relational databases. The dissertation then focuses on the completeness problem of ordered conjunctive queries. This investigation is performed in an incremental manner: first, the ordered conjunctive queries with data-decided order is considered; then, the ordered conjunctive queries with t-decided order is studied; finally, the completeness problem for the general ordered conjunctive queries is explored. The completeness theorem of ordered algebras is proven for all three classes of ordered conjunctive queries. Although this ordered relational database model is only conceptual, and ordered operators are not implemented in this dissertation, we do prove that a complete set of ordered operators exists to retrieve all first order expressible ordered queries in the three classes of ordered conjunctive queries. This research sheds light on the possibility of implementing a complete set of ordered operators in relational databases to solve the performance problem of order-relevant queries...|$|R
50|$|In {{database}} {{systems such}} as DBToaster, views are defined with <b>relational</b> <b>algebra.</b> Incremental view maintenance statically analyzes <b>relational</b> <b>algebra</b> to create update rules that quickly maintain the view {{in the presence of}} small updates, such as insertion of a row.|$|E
50|$|The model's {{linguistic}} aspect {{described above}} is utilized in the declarative {{database query language}} ERROL, which mimics natural language constructs. ERROL's semantics and implementation are based on reshaped <b>relational</b> <b>algebra</b> (RRA), a <b>relational</b> <b>algebra</b> that is adapted to the entity-relationship model and captures its linguistic aspect.|$|E
50|$|Its {{computational}} expressiveness {{is equivalent}} to that of <b>Relational</b> <b>algebra.</b>|$|E
5000|$|In {{elementary}} network theory, {{a network}} {{is represented by}} a graph [...] in which [...] is the set of nodes and [...] the links between nodes, typically represented as a tuple of nodes [...] While this basic formalization is useful for analyzing many systems, real world networks often have added complexity {{in the form of}} multiple types of relations between system elements. An early formalization of this idea came through its application in the field of social network analysis (see, e.g., and papers on <b>relational</b> <b>algebras</b> in social networks) in which multiple forms of social connection between people were represented by multiple types of links.|$|R
40|$|We give {{formulations}} for modal deductive {{databases and}} present a modal query language called MDatalog. We define modal <b>relational</b> <b>algebras</b> {{and give the}} seminaive evaluation algorithm, the top-down evaluation algorithm, and the magic-set transformation for MDatalog queries. The results of this paper like soundness and completeness of the top-down evaluation algorithm or correctness of the magic-set transformation are proved for the multimodal logics of belief KDI 4 s 5, KDI 45, KD 4 s 5 s, KD 45 (m), KD 4 Ig 5 a, and the class of serial contextfree grammar logics. We also show that MDatalog has PTIME data complexity in the logics KDI 4 s 5, KDI 45, KD 4 s 5 s, and KD 45 (m). ...|$|R
40|$|The {{emergence}} of database languages with side effects, notably for XML, raises significant challenges for database compilers and optimizers. In this paper, we extend an algebra for the W 3 C XML query language with operations that allow {{data to be}} immediately updated. We study the impact of that extension on logical optimization, join detection, and pipelining. The main result of this work is to show that, with proper care, {{a number of important}} optimizations based on nested <b>relational</b> <b>algebras</b> remain applicable in the presence of side effects. Our approach relies on an analysis of the conditions that must be checked in order for algebraic rewritings to hold. An implementation and experimental results demonstrate the effectiveness of the approach. 1...|$|R
5000|$|Queries {{made against}} the {{relational}} database, and the derived relvars {{in the database}} are expressed in a relational calculus or a <b>relational</b> <b>algebra.</b> In his original <b>relational</b> <b>algebra,</b> Codd introduced eight relational operators in two groups of four operators each. The first four operators {{were based on the}} traditional mathematical set operations: ...|$|E
5000|$|... the unary {{operation}} of selection on a database relation in <b>relational</b> <b>algebra</b> ...|$|E
5000|$|In <b>relational</b> <b>algebra,</b> a rename is a unary {{operation}} written as [...] where: ...|$|E
40|$|AbstractThis paper {{presents}} {{a method for}} proving the partial correctness of programs with the following features: strongly typed expressions with call-by-value semantics for variables; iteration; recursive procedures with call-by-name semantics; nondeterminism; parallel assignment; and good old fashioned go-to's. An operational semantics is given to a program by viewing it as a program scheme together with an appropriate interpretation in a given model. Program schemes are viewed as diagrams in an algebraic theory, and the given models are <b>relational</b> <b>algebras</b> of this theory. A simple programming language, REPNOD, that embodies exactly the features that are discussed theoretically is defined, and several simple REPNOD programs, {{as well as a}} sample correctness proof, are given. This approach seems to provide a particularly simple framework for many problems in concurrent programming...|$|R
40|$|Abstract. We give {{formulations}} for modal deductive {{databases and}} present a modal query language called MDatalog. We define modal <b>relational</b> <b>algebras</b> {{and give the}} seminaive evaluation algorithm, the top-down evaluation algorithm, and the magic-set transformation for MDatalog queries. The results of this paper like soundness and completeness of the top-down evaluation algorithm or correctness of the magic-set transformation are proved for the multimodal logics of belief KDI 4 s 5, KDI 45, KD 4 s 5 s, KD 45 (m), KD 4 Ig 5 a, and the class of serial context-free grammar logics. We also show that MDatalog has PTIME data complexity in the logics KDI 4 s 5, KDI 45, KD 4 s 5 s, and KD 45 (m) ...|$|R
40|$|Dualities between {{different}} theories occur frequently {{in mathematics and}} logic - between syntax and semantics of a logic, between structures and power structures, between relations and <b>relational</b> <b>algebras,</b> {{to name just a}} few. In this paper we show for the case of structures and power structures how corresponding properties of the two related structures can be computed fully automatically by means of quantifier elimination algorithms and predicate logic gic theorem provers. We illustrate the method with a large number of examples and we give enough technical hints to enable the reader who has access to the OTTER theorem prover to experiment herself. (orig.) SIGLEAvailable from TIB Hannover: RR 1912 (93 - 220) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekDEGerman...|$|R
50|$|Aggregate {{functions}} occur commonly {{in numerous}} programming languages, in spreadsheets, and in <b>relational</b> <b>algebra.</b>|$|E
5000|$|... {{extending}} the relational language with hierarchy manipulations, {{such as in}} the nested <b>relational</b> <b>algebra.</b>|$|E
5000|$|Furthermore, {{computing}} various functions on a column, {{like the}} summing up its elements, {{is also not}} possible using the <b>relational</b> <b>algebra</b> introduced so far. There are five aggregate functions that are included with most relational database systems. These operations are Sum, Count, Average, Maximum and Minimum. In <b>relational</b> <b>algebra</b> the aggregation operation over a schema (A1, A2, ... An) is written as follows: ...|$|E
40|$|Kleene algebra (KA) is the algebra {{of regular}} events. Familiar {{examples}} of Kleene algebras include regular sets, <b>relational</b> <b>algebras,</b> and trace algebras. A Kleene algebra with tests (KAT) is a Kleene algebra with an embedded Boolean subalgebra. The addition of tests {{allows one to}} encode while programs as KAT terms, thus the equational theory of KAT can express (propositional) program equivalence. More complicated statements about programs can be expressed in the Hoare theory of KAT, which suffices to encode Propositional Hoare Logic. That the equational theory of KAT reduces to the equational theory of KA has been shown by Cohen et al. Unfortunately, their reduction involves an exponential blowup {{in the size of}} the terms involved. Here we give an alternate feasible reduction. ...|$|R
40|$|This paper investigates {{some key}} {{algebraic}} {{properties of the}} categories of spans and cospans (up to isomorphic supports) over the category Set of (small) sets and functions, analyzing the monoidal structures induced over both spans and cospans by cartesian product and disjoint union of sets. Our results find analogous counterparts in (and are partly inspired by) the theory of <b>relational</b> <b>algebras,</b> thus our paper also sheds {{some light on the}} relationship between (co) spans and the categories of (multi) relations and of equivalence relations. And, since (co) spans yield an intuitive presentation of dynamical systems with input and output interfaces, our results introduce an expressive, two-fold algebra that can serve as a specification formalism for rewriting systems and for composing software modules...|$|R
40|$|We {{present a}} query {{language}} called MDatalog, {{which is an}} extension of Datalog for multimodal deductive database. We de ne modal <b>relational</b> <b>algebras</b> and give the seminaive evaluation algorithm and the magic-set transformation for multimodal deductive databases. Our formulation is general, however, the results are proved only for the multimodal logics KDI 4 s 5, KDI 45, KD 4 s 5 s, KD 45 (m), which are multimodal extensions of the monomodal logic KD 45. The logics KDI 4 s 5 and KDI 45 are intended for reasoning about multi-degree belief, while KD 4 s 5 s is for use in distributed systems of belief, and KD 45 (m) is for reasoning about epistemic states of agents. We show that MDatalog has PTIME data complexity in these logics...|$|R
