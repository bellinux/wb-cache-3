42|10000|Public
5000|$|... <b>running</b> <b>the</b> <b>tests</b> {{that allow}} people to join and stay on the {{voluntary}} register of driver trainers who train drivers of car and van fleets ...|$|E
5000|$|While <b>running,</b> <b>the</b> <b>tests</b> {{show only}} a {{progress}} bar and a [...] "working" [...] background animation. Aero Glass is deactivated on Windows Vista and Windows 7 during testing so the tool can properly assess the graphics card and CPU.|$|E
50|$|To earn extra money, two {{university}} students, Zac and Cindy, {{get jobs}} as physiological test subjects. Neither {{knew that they}} would be used as pawns by the professors <b>running</b> <b>the</b> <b>tests,</b> who are using the two students to fight through a divorce.|$|E
50|$|Level Test Case (LTC): Specifying <b>the</b> <b>test</b> {{data for}} use in <b>running</b> <b>the</b> <b>test</b> cases {{identified}} in the Level Test Design.|$|R
50|$|While <b>running</b> <b>the</b> <b>test,</b> {{attempt to}} use the network {{normally}} while watching the CPU usage of the firewall.|$|R
5000|$|SPADE can run {{on its own}} but {{it often}} runs as an Apache Maven plugin and is {{therefore}} part of a Maven build cycle. This build cycle also includes <b>running</b> <b>the</b> <b>test</b> scenarios, which in turn ...|$|R
50|$|Clover {{also allows}} testing {{time to be}} reduced by only <b>running</b> <b>the</b> <b>tests</b> that cover the {{application}} code that was modified since the previous build. This is called Test Optimization {{and can lead to}} huge drops in {{the amount of time spent}} waiting for automated tests to complete.|$|E
50|$|KEduca is GPL (version 2), (free {{software}} license) {{educational software}} {{included with the}} KDE desktop environment. It includes a module for constructing and saving new tests, and a module for loading and <b>running</b> <b>the</b> <b>tests.</b> Images can be included in questions, questions can have multiple answers with different scores, and questions can have a time limit. At the moment, no finished tests are included when you download it.|$|E
50|$|In March 2009, Oliver ends {{up working}} {{security}} at the hospital because of cutbacks at Cherryvale PD. He walks in on Rex Balsom and Natalie Buchanan viewing security tapes {{trying to prove that}} Jessica Buchanan switched her dead baby with Starr Manning's live baby. Kyle in the meantime had been <b>running</b> <b>the</b> <b>tests</b> from the donor drive that would eventually find a donor match for Shane Morasco. This donor match comes from a mysterious body provided by Roxy Balsom. Fish is able to get a job at LPD again and runs into John at the hospital while returning his uniform. John asks him for a favor.|$|E
30|$|We vary several {{parameters}} when <b>running</b> <b>the</b> <b>test</b> programs. <b>The</b> applicative parameter that we {{can change}} is the scheduling policy. We also modify the processor frequency as a hardware parameter. We are interested in studying the influence of three scheduling policies: SCHED_FIFO, SCHED_RR and SCHED_OTHER.|$|R
30|$|The {{mathematical}} equations are modelled {{by using}} Matlab–Simulink tools {{in order to}} simulate {{the operation of the}} developed model with a commercially available 1  kW horizon PEM fuel cell stack (H- 1000) which is used as an experimental device in <b>running</b> <b>the</b> <b>test</b> physically in order to validate and tune the developed model.|$|R
5000|$|Miller-Rabin primality test: a {{probabilistic}} algorithm {{for testing}} whether a given number n is prime or composite. If n is composite, <b>the</b> <b>test</b> will detect n as composite WHP. There {{is a small}} chance that we are unlucky and <b>the</b> <b>test</b> will think that n is prime. But, the probability of error can be reduced indefinitely by <b>running</b> <b>the</b> <b>test</b> many times with different randomizations.|$|R
40|$|This thesis {{describes}} {{a pilot study}} {{with the goal of}} enabling automatic testing in a large legacy system. The thesis contains a literature study comparing different types of testing, a description of the actual work of implementing the tests and a discussion of the experiences of <b>running</b> <b>the</b> <b>tests.</b> The automatic tests proved not to give the expected benefits, the complexity of the system and fragility of the chosen test method made the testing impractical. The maintenance of the tests exceeded the time saved by <b>running</b> <b>the</b> <b>tests</b> automatically instead of manually...|$|E
30|$|Inside uuid, the Optimizer {{has found}} two cases (fromURN and fromBytes functions) {{where there was}} a problem {{regarding}} the absence of coverage in the tests, that is, at no time these functions are exercised during the unit tests execution. So, it was possible to remove them and still succeed in <b>running</b> <b>the</b> <b>tests.</b>|$|E
40|$|Often, t-way {{testing is}} usually adopted to trigger faults due to interactions. As a result, {{a myriad of}} useful t-way test {{generation}} strategies have been developed in order to generate t-way interaction test suite that is small in size while maintaining adequate t-way interaction coverage. Even though finding an efficient strategy to construct an optimal test suite is very valuable, another aspect to consider is the cost benefits of <b>running</b> <b>the</b> <b>tests,</b> i. e. at high level of interaction strength; the test suite size can become enormous. To balance the need for stronger interaction {{with the cost of}} <b>running</b> <b>the</b> <b>tests,</b> variable-strength interaction has been recommended. Hence, to enable support for construction of test suite with variable-strength interaction, a step by step procedure that extends our t-way test generation strategy, called Test Suite Generator (TSG) is highlighted. Benchmarking results against most existing strategies that support variable-strength interaction demonstrate that TSG is able to give competitive results. ...|$|E
50|$|Another type of {{subjective}} test is done under more controlled conditions {{and attempts to}} remove possible bias from listening tests. These sorts of tests are done with the component hidden from the listener, and are called blind tests. To prevent possible bias from <b>the</b> person <b>running</b> <b>the</b> <b>test,</b> <b>the</b> blind <b>test</b> may be done so that this person is also unaware of <b>the</b> component under <b>test.</b> This type of test is called a double-blind test. This sort of test {{is often used to}} evaluate the performance of digital audio codecs.|$|R
30|$|These smart LCMs {{were mixed}} with 170  ml of the {{drilling}} fluid at concentrations of 0.24, 0.48 and 0.96  lb/gal with the slot disk and the tapered disk. The heating jacket {{was set to}} a temperature of 185  °F, and the mixture was left there to settle for 30  min before <b>running</b> <b>the</b> <b>test.</b>|$|R
30|$|The {{independent}} variable selected was <b>the</b> <b>test</b> cases execution time, measured in milliseconds. Since the optimization perspective is the code execution time, <b>running</b> <b>the</b> <b>test</b> suite faster is the optimization criterion guiding the search. The treatment applied is {{the transformation of}} code instructions {{with the purpose of}} reducing (remove or transform) instructions, where it is expected that with fewer instructions the execution time is also smaller.|$|R
40|$|We {{report a}} useful visible light testing {{procedure}} {{for a first}} analysis of soft X-ray grazing incidence optics (0. 1 - 2 keV). Although diffraction is a limit {{in the application of}} this method, great advantages are obtained by <b>running</b> <b>the</b> <b>tests</b> in air with direct access to modify the geometrical mounting of the individual mirror shells. We present the experimental apparatus and show the first results of the investigation of light weight optics based on plastic foil material and comparison with results obtained with an X-ray bea...|$|E
40|$|This {{is a major}} release. Completely {{overhauled}} the documentation. Instead {{of relying}} on a collection of loosely organized markdown files, the documentation is much more cohesive and hosted on readthedocs. It now includes a clear introduction to what RSMTool is as well as tutorials. The RSMTool API is now richer and explicitly documented. rsmcompare can now compare two rsmeval experiments {{as well as an}} rsmtool experiment to an rsmeval experiment. Code coverage is now automatically computed as part of CI testing. Expected warnings are now suppressed when <b>running</b> <b>the</b> <b>tests.</b> Fixed several stylistic issues in the codebase raised by pep 8 and pyflakes...|$|E
40|$|The {{main goal}} of this work is to analyze the {{possibility}} of using a graphic processing unit in non graphical calculations. Graphic Processing Units are being used nowadays not only for game engines and movie encoding/decoding, but also for a vast area of applications, like Cryptography. We used the graphic processing unit as a cryptographic coprocessor in order accelerate AES algorithm. Our implementation of AES is on a GPU using CUDA architecture. The performances obtained show that the CUDA implementation can offer speedups of 11. 95 Gbps. The tests are conducted in two directions: <b>running</b> <b>the</b> <b>tests</b> on small data sizes that are located in memory and large data that are stored in files on hard drives...|$|E
25|$|It {{supports}} UML activity diagram, component diagram, (logical) class diagram, sequence diagram, and {{use case}} diagram. Visual Studio Ultimate 2010 also includes Test Impact Analysis which provides hints on which test cases are impacted by {{modifications to the}} source code, without actually <b>running</b> <b>the</b> <b>test</b> cases. This speeds up testing by avoiding running unnecessary test cases.|$|R
40|$|A {{mechanical}} pump for {{use with}} the Pioneer-Venus probe mass spectrometer inlet system was obtained, and a limited performance testing program, including ultimate/compression ratio tests and throughput tests at three different pump speeds, was performed. Considerable operating experience with the pump was obtained over approximately 200 hours of <b>running.</b> <b>The</b> <b>test</b> results show general agreement with pump specifications...|$|R
5000|$|The {{process of}} {{executing}} {{a program that}} will analyze code for potential errors is called as linting. It is a good practice to run FactoryGirl.lint once before <b>running</b> <b>the</b> <b>test</b> suite.This will build all factories and call #valid? On the factories. If any factory returns False for the valid call, Factory girl returns [...] along {{with a list of}} factories that failed to load.|$|R
40|$|Writing {{developer}} {{tests as}} software is built can provide peace of mind. As the software grows, <b>running</b> <b>the</b> <b>tests</b> {{can prove that}} everything still works as the developer envisioned it. But what about the behavior the developer failed to envision? Although verifying a few well-picked scenarios is often enough, experienced developers know bugs can often lurk even in well-tested code, when correct but untested inputs provoke obviously wrong responses. This leads to worry. We suggest writing Theories alongside developer tests, to specify desired universal behaviors. We will demonstrate how writing theories affects test-driven development, how new features in JUnit can verify theories against hand-picked inputs, and how a new tool, Theory Explorer, can search for new inputs, leading to a new, less worrysome approach to development...|$|E
40|$|Abstract. In model-driven development, the {{correctness}} {{of models}} is essential. Testing {{as soon as}} possible reduces the cost of the verification and validation process. Considering separately PIM and PSM reduces the test complexity and helps the evolution of the system model. In order to test models before their final implementation, we propose an approach to guide the tester through the process of designing tests at the model level. We target model testing for Service-based Component Models. The approach produces test harness and provides information on how to bind the services of the components under test and how to insert the relevant data. The tests are then executed by plunging the harness into a technical platform, only dedicated to <b>running</b> <b>the</b> <b>tests...</b>|$|E
40|$|Detecting and {{isolating}} {{multiple faults}} is a computationally intense task which typically consists of computing {{a set of}} tests, and then computing the diagnoses based on the test results. This paper proposes a method to reduce the computational burden by only <b>running</b> <b>the</b> <b>tests</b> that are currently needed, and dynamically starting new tests when the need changes. A main contribution is a method to select tests such that the computational burden is reduced while maintaining the isolation performance of the diagnostic system. Key components in the approach are the test selection algorithm, the test initialization procedures, and a knowledge processing framework that supports the functionality needed. The approach is exemplified on a relatively small dynamical system, which still illustrates the complexity and possible computational gain with the proposed approach...|$|E
40|$|Abstract—This article {{studies the}} {{performance}} optimization of the large-scale cluster system by <b>the</b> performance <b>test</b> for Dawning Tiankuo {{high performance cluster}} system. The efficiency of this system is exhibited through <b>the</b> <b>test</b> and analysis for this cluster system by <b>running</b> <b>the</b> <b>test</b> software in different parallel environment. Results prove that the high performance computer cluster has acceleration function and stability. These results offer a foundation for the exploiture and study. Index Terms—-performance, PCG, parallel computing, MPI, Open MP, PG...|$|R
30|$|The derived and {{developed}} equations above are implemented via using Matlab–Simulink tools {{in order to}} determine the pressures of hydrogen and oxygen in the anode and cathode respectively, yields with determining the output voltage of the PEM fuel cell stack. And the horizon PEM fuel cell stack is used as a prototype device in <b>running</b> <b>the</b> <b>test</b> physically in <b>the</b> laboratory in order to validate and tune the developed mathematical model with the output results of <b>the</b> <b>test.</b>|$|R
30|$|To {{conduct a}} partial-load at variable-speed, for example, 1 /N of the load, the brake and {{throttle}} are adjusted to achieve 1 /N {{of the maximum}} power at each speed. The curve of the brake horsepower versus speed could be obtained without <b>running</b> <b>the</b> <b>test</b> by merely dividing the maximum power by N. However, fuel consumption will vary {{in accordance with the}} changes of the load and throttle.|$|R
40|$|Selenium {{has been}} a method to test web {{applications}} for over a decade, it is interacting directly with the browser and has gained support from both browsers and the community. With the growing amount of browsers, mobile devices and operating systems which a web application is expected to work with, services providing these systems for testing web applications against has gained interest. These services provide testing as a service (TaaS), and runs Selenium-tests in the cloud. This research tried to compare the different services {{with each other in}} regard to flexibility, cost, simplicity and reliability. I have also tried to see differences between <b>running</b> <b>the</b> <b>tests</b> locally and using these services. The results showed that there are some differences between the services, and the one best suited might depend on the web application...|$|E
40|$|As the {{population}} of the Internet grows rapidly the development of web technologies becomes extremely important. For the evolvement of Web 2. 0, web services are essential. Web services are programs that allow computers of different platforms on the web to interactively communicate without the need of extra data for human reading interfaces and formats such as web page structures. Since web service is a future trend for the growth of internet, the tools that are used for development is also important. Although there are many choices of web service frameworks to choose from, developers should choose the framework that fits best to their application based on performance, time and effort for the framework. In this project, we chose four common frameworks to compare them in both qualitative and quantitative metrics. After <b>running</b> <b>the</b> <b>tests,</b> the results are statistically analyzed by SAS...|$|E
40|$|Detecting and {{isolating}} {{multiple faults}} is a computationally intense task which typically consists of computing {{a set of}} tests, and then computing the diagnoses based on the test results. This paper describes FlexDx, a reconfigurable diagnosis framework which reduces the computational burden by only <b>running</b> <b>the</b> <b>tests</b> that are currently needed. The method selects tests such that the isolation performance of the diagnostic system is maintained. Special attention {{is given to the}} practical issues introduced by a reconfigurable diagnosis framework such as FlexDx. For example, tests are added and removed dynamically, tests are partially performed on historic data, and synchronous and asynchronous processing are combined. To handle these issues FlexDx uses DyKnow, a stream-based knowledge processing middleware framework. The approach is exemplified on a relatively small dynamical system, which still illustrates the computational gain with the proposed approach. 1...|$|E
30|$|To {{correlate}} {{the performance}} of LCM with the particles morphology data like sphericity and roundness, a qualitative visual inspection of LCM particles {{was carried out by}} using the sphericity and roundness chart suggested by Powers (1953). LCM particles and the formed seals were examined under an optical microscope and a scanning electron microscope (SEM). The inspected formed seals were gently removed from the tapered discs after <b>running</b> <b>the</b> <b>test</b> and left to dry prior to inspection.|$|R
50|$|A {{test case}} {{is a set of}} test inputs, {{execution}} conditions, and expected results developed for a particular objective, such as to exercise a particular program path or to verify compliance with a specific requirement. A test case could simply be a question that you ask of the program. <b>The</b> point of <b>running</b> <b>the</b> <b>test</b> is to gain information, for example whether the program will pass or fail <b>the</b> <b>test.</b> Test cases are the cornerstone of Quality Assurance where they are developed to verify the quality and behavior of a product.|$|R
40|$|NEMO is a fluid {{dynamics}} code used for oceanographic research. Within the TERAFLOP Workbench {{in cooperation with}} the Leibniz-Institut für Meereswissenschaften (IFM-GEOMAR) in Kiel a performance assessment and improvement campaign was carried out, ranging from MPI to memory addressing in solvers. At The High Performance Computing Center Stuttgart (HLRS) tests were made using a large configuration of SX nodes running NEMO at 2. 1 Teraflop/s. The improved code is <b>running</b> <b>the</b> <b>test</b> case 29 % faster on 512 SX- 8 CPUs...|$|R
