246|330|Public
25|$|If an {{attacker}} mounts {{an attack}} {{from a single}} host it would be classified as a DoS attack. In fact, any attack against availability would be classed as a denial-of-service attack. On the other hand, if an attacker uses many systems to simultaneously launch attacks against a <b>remote</b> <b>host,</b> this would be classified as a DDoS attack.|$|E
25|$|Trivial File Transfer Protocol (TFTP) is {{a simple}} lockstep File Transfer Protocol which allows a client to get a file from or put a file onto a <b>remote</b> <b>host.</b> One of its primary uses is {{in the early stages}} of nodes booting from a local area network. TFTP has been used for this {{application}} because it is very simple to implement.|$|E
5000|$|Although BWPing {{does not}} require any special {{software}} on the <b>remote</b> <b>host</b> (only the ability to respond on ICMP echo request messages), there are some special requirements to network infrastructure, local and <b>remote</b> <b>host</b> performance: ...|$|E
5000|$|Universal {{agents to}} execute jobs {{directly}} on <b>remote</b> <b>hosts</b> across different operating systems, ...|$|R
5000|$|Syslog server for {{receiving}} and cataloging the system logs {{produced by the}} <b>remote</b> <b>hosts</b> ...|$|R
50|$|TCP Ping {{based on}} SYN/ACK or RST packets {{is used to}} explore more <b>remote</b> <b>hosts.</b>|$|R
50|$|The {{mediator}} server unwraps {{the actual}} data before forwarding {{it to the}} <b>remote</b> <b>host</b> in question. Symmetrically, when it receives data from the <b>remote</b> <b>host,</b> it wraps it in the HTTP protocol before sending {{it as part of}} an HTTP response to the application.|$|E
50|$|AYIYA {{may be used}} to {{provision}} mobile hosts by tunneling traffic from the Home Address to the Home Agent over an underlying network. Any <b>remote</b> <b>host</b> that the mobile host communicates with does not need AYIYA support. When the <b>remote</b> <b>host</b> does support AYIYA, it could also directly set up a tunnel with the mobile host establishing a direct tunnel. The <b>remote</b> <b>host</b> can determine whether a host supports AYIYA by querying for Domain Name System records and use a public/private key algorithm to authenticate the packets.|$|E
5000|$|For {{executing}} {{a single}} command on a <b>remote</b> <b>host</b> (replacing rsh) ...|$|E
5000|$|TNAPS <b>Remoting</b> <b>Host</b> Provider {{has some}} {{advanced}} (comparing to standard [...]NET Remoting) features: Channel Encription, Traffic Signing and Traffic Compression.|$|R
50|$|In Windows Server 2008 R2, the RemoteFX Codec {{could be}} {{leveraged}} for both session <b>hosting</b> (<b>Remote</b> Desktop Session <b>Hosts)</b> and VDI scenarios (and <b>Remote</b> Desktop Virtualization <b>Hosts).</b> The RemoteFX vGPU and RemoteFX USB Redirection features {{could only be}} used in VDI scenarios (<b>Remote</b> Desktop Virtualization <b>Hosts).</b>|$|R
30|$|To collect {{information}} related to services and applications running on internal hosts, we perform reconnaissance and active scanning using NIC whois querying and Nmap. After mapping the accessible network services of a host, we investigate for known vulnerabilities using the Nessus[4] and OpenVas[5] vulnerability scanners. These four tools, to which we collectively refer as reconnaissance and vulnerability scanners, give a more detailed view of the internal hosts. The last two data sources help extract information about <b>remote</b> <b>hosts</b> by leveraging publicly available data. In particular, we use blacklists from five blacklist providers covering different types of malicious hosts, like active attackers and spammers, and we query the Google search engine for suspected <b>remote</b> <b>hosts</b> and domains. The search engine indexes a variety of sources, including public forums, bulletins, and banlists, which we exploit in an automated way to find the roles, i.e., server type or actions of <b>remote</b> <b>hosts.</b> The detailed description of each feature {{can be found in}} the accompanying technical report[6].|$|R
5000|$|For {{forwarding}} X from a <b>remote</b> <b>host</b> (possible {{through multiple}} intermediate hosts) ...|$|E
50|$|After capture, a {{screenshot}} can be autonomously exported as {{an image}} file, email attachment, exported to a printer, to the clipboard, or uploaded to a <b>remote</b> <b>host</b> such as many popular image hosting services or via FTP. If the image is uploaded to a <b>remote</b> <b>host,</b> the URL generated by it can be copied to the clipboard.|$|E
5000|$|For login to a shell on a <b>remote</b> <b>host</b> (replacing Telnet and rlogin) ...|$|E
25|$|Carnegie Mellon University {{produced}} a remote-access application called Alto Terminal, that displayed overlapping {{windows on the}} Xerox Alto, and made <b>remote</b> <b>hosts</b> (typically DEC VAX systems running Unix) responsible for handling window-exposure events and refreshing window contents as necessary.|$|R
50|$|Another use of {{multicast}} within {{campus and}} commercial networks is for file distribution, particularly to deliver operating system images and updates to <b>remote</b> <b>hosts.</b> The key advantage of multicast boot images over unicasting boot images is significantly lower network bandwidth usage.|$|R
40|$|Recent {{advances}} in network technology promise to make gigabit-per-second bandwidth between <b>remote</b> <b>hosts</b> {{a reality in}} the near future. This increase in bandwidth paves the way for increased exploitation of distributed computing resources. Coupled with {{advances in}} distributed memory parallel compiler technology, there is stron...|$|R
5000|$|<b>Remote</b> <b>host</b> management: Simple Network Management Protocol (SNMP), Common Management Information Protocol over TCP (CMOT) ...|$|E
50|$|Core {{can also}} be dumped onto a <b>remote</b> <b>host</b> over a network (which is a {{security}} risk).|$|E
5000|$|Communicating {{with the}} <b>remote</b> <b>host,</b> {{which can be}} done through [...] and [...] or [...] and [...]|$|E
40|$|Abstract. Globally unique domain {{names and}} IP {{addresses}} that {{are provided in}} real time by the DNS (Domain Name System) represent the fundamental sign-posts for navigating the Internet and for locating <b>remote</b> <b>hosts.</b> It is therefore paradoxical that the traditional method for secure identification of <b>remote</b> <b>hosts</b> is not directly based on DNS, but on the browser PKI which is external to the trust structure of the DNS and thereby introduces new and complex trust prob-lems. This paper argues that certificates for global host names must be issued through DNSSEC. According to this principle, certificates for domain names are issued by DNS registrars or DNS server organisations. This greatly simplifies the trust models for online authentication and significantly improve Internet security. ...|$|R
40|$|In {{this work}} we {{introduce}} a defeasible logic programming recommender server that accepts {{different types of}} queries from client agents that can be distributed in <b>remote</b> <b>hosts.</b> We formalize new ways of querying recommender servers con-taining specific information or preferences, and creating a particular context for the queries. This special type of queries (called contextual queries) allows recommender servers to compute recommendations for any client using its prefer-ences, and will be answered using an argumentative inference mechanism. We focus on a particular implementation of rec-ommended systems that extends the integration of argumen-tation and recommender systems to a multi-agent setting. Our approach {{is based on a}} DeLP-server that can answer queries from agents in <b>remote</b> <b>hosts.</b> Since client agents can consult different domain specific recommender servers, then, multi-ple configurations of clients and servers can be defined...|$|R
40|$|This chapter {{discusses}} the false rates of Bloom filters in a distributed environment. A Bloom filter (BF) is a space-efficient data structure to support probabilistic membership query. In distributed systems, a Bloom filter {{is often used}} to summarize local services or objects and this Bloom filter is replicated to <b>remote</b> <b>hosts.</b> This allows <b>remote</b> <b>hosts</b> to perform fast membership query without contacting the original host. However, when the services or objects are changed, the remote Bloom replica may become stale. This chapter analyzes the impact of staleness on the false positive and false negative for membership queries on a Bloom filter replica. An efficient update control mechanism is then proposed based on the analytical results to minimize the updating overhead. This chapter validates the analytical models and the update control mechanism through simulation experiments...|$|R
5000|$|... 127.0.0.1 is the IP {{address of}} the client (<b>remote</b> <b>host)</b> which made the request to the server.|$|E
50|$|For example, a {{backdoor}} {{running on}} a computer behind a firewall that blocks incoming connections can easily open an outbound connection to a <b>remote</b> <b>host</b> on the Internet. Once the connection is established, the <b>remote</b> <b>host</b> can send commands to the backdoor.Remote administration tools (RAT) that use a reverse connection usually send SYN packets to the client's IP address. The client listens for these SYN packets and accepts the desired connections.|$|E
5000|$|An rsync process {{operates}} by {{communicating with}} another rsync process, a sender and a receiver. At startup, an rsync client connects to a peer process. If the transfer is local (that is, between file systems {{mounted on the}} same host) the peer can be created with fork, after setting up suitable pipes for the connection. If a <b>remote</b> <b>host</b> is involved, rsync starts a process to handle the connection, typically Secure Shell. Upon connection, a command is issued to start an rsync process on the <b>remote</b> <b>host,</b> which uses the connection thus established. As an alternative, if the <b>remote</b> <b>host</b> runs an rsync daemon, rsync clients can connect by opening a socket on TCP port 873, possibly using a proxy ...|$|E
50|$|In {{addition}} to being the first ISP in NY state to provide DSL, Dreamscape also pioneered many new technologies including wireless internet, <b>remote</b> <b>hosted</b> virtual email domains (LanMail), SMTP store and forward, and was friendly to power-users and developers of dynamic web content, via ColdFusion, MS FrontPage, Perl, and PHP.|$|R
50|$|The {{show was}} taped in Soundstage 18 of Nickelodeon Studios Florida and was hosted by Phil Moore. The <b>remote</b> <b>hosts</b> for You’re On! were Vivianne Collins and Travis White. These two would brief {{the kids on}} their tasks, congratulate them when all three tasks were completed, or let them know time was up.|$|R
30|$|All {{monitoring}} systems must perform {{some form of}} data collection. In tools commonly used for monitoring commodity server deployments this is achieved {{through the use of}} a monitoring server. In these common use cases a monitoring server either actively polls state on <b>remote</b> <b>hosts,</b> or <b>remote</b> <b>hosts</b> push their state to the server. This mechanism is ideal for small server deployments: it is simple, it has no indirection and it is fast. As the number of monitored servers grow, data collection becomes increasingly challenging. The resources of a single machine eventually become insufficient to collect all the required state. Additionally, in tightly coupled systems where there is often an active human administrator, the associated configuration overhead becomes prohibitive; requiring frequent interaction. These challenges have led to the development of a number of schemes to improve the scalability of {{monitoring systems}}.|$|R
5000|$|The {{usefulness}} of Ident for proving of a known identity to a <b>remote</b> <b>host</b> {{is limited to}} circumstances when: ...|$|E
5000|$|Chooser - {{a program}} {{used to select}} a <b>remote</b> <b>host</b> for {{managing}} a display remotely on the attached display (gdm-host-chooser) ...|$|E
5000|$|... sink mode, which {{accepts the}} files {{sent by the}} client and writes them (usually to disk) on the <b>remote</b> <b>host.</b>|$|E
40|$|This paper {{presents}} {{a framework for}} building network protocols for migrating mobile agents over a network. The framework allows network protocols for agent migration to be naturally implemented within mobile agents and to be constructed in a hierarchy as most data transmission protocols are. These protocols are given as mobile agents and they can transmit other mobile agents to <b>remote</b> <b>hosts</b> as first-class objects. Since they can be dynamically deployed at <b>remote</b> <b>hosts</b> by migrating the agents that carry them, these protocols can dynamically and flexibly customize network processing for agent migration {{according to the requirements}} of respective visiting agents and changes in the environments. A prototype implementation was built on a Java-based mobile agent system, and several practical protocols for agent migration were designed and implemented. The framework can make major contributions to mobile agent technology for telecommunication systems. ...|$|R
50|$|The {{foremost}} {{advantage of}} dedicated servers is their suitability for hosting in professional data centers, {{with all of}} the reliability and performance benefits that entails. <b>Remote</b> <b>hosting</b> also eliminates the low-latency advantage that would otherwise be held by any player who hosts and connects to a server from the same machine or local network.|$|R
5000|$|Flash Player 11.7: {{released}} in June 2013, code-named [...] "Geary." [...] This release focuses on premium video, gaming, security, and stability. Some {{of the features}} planned for this release include the following: Android captive runtime debugging. Support for the OUYA controller. <b>Remote</b> <b>hosting</b> of SWF files on iOS. Preventing backup of shared objects on iOS for better iCloud support.|$|R
