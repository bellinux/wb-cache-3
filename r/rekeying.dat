352|47|Public
25|$|Optical {{character}} recognition (OCR) {{is preferable to}} <b>rekeying</b> for converting existing text that is already written down but not in machine-readable format (for example, a Linotype-composed book from the 1940s). In other words, to convert the text from an image to editable text (that is, a string of character codes), a person could re-type it, or a computer could look at the image and deduce what each character is. OCR technology has already reached an impressive state (for example, Google Book Search) and promises more for the future.|$|E
5000|$|At tape relay {{intermediate}} stations, {{the manual}} routing or rerouting of taped messages without <b>rekeying</b> them.|$|E
50|$|In {{contemporary}} systems, <b>rekeying</b> {{is implemented}} by forcing a new key exchange, typically through a separate protocol like Internet key exchange (IKE). The procedure is handled transparently to the user.|$|E
40|$|In secure group communications, {{there are}} both <b>rekey</b> and data traffic. We propose to use application-layer {{multicast}} to support concurrent <b>rekey</b> and data transport. <b>Rekey</b> traffic is bursty and requires fast delivery. It is desired to reduce <b>rekey</b> bandwidth overhead {{as much as}} possible since it competes for bandwidth with data traffic. Towards this goal, we propose a multicast scheme that exploits proximity in the underlying network. We further propose a <b>rekey</b> message splitting scheme to significantly reduce <b>rekey</b> bandwidth overhead at each user access link and network link. We formulate and prove correctness properties for the multicast scheme and <b>rekey</b> message splitting scheme. We have conducted extensive simulations to evaluate our approach. Our simulation results show that our approach can reduce <b>rekey</b> bandwidth overhead from several thousand encrypted new keys (encryptions, in short) to less than ten encryptions for more than 90 % of users in a group of 1024 users. ...|$|R
40|$|The Logical Key Hierarchy (LKH) {{provides}} a scalable and {{efficient way to}} distribute session keys to authorized group members in secure group (multicast) communication. However, because multicast is a best-effort service, it requires additional mechanism to ensure that every member receives the <b>rekey</b> information. To solve this problem, several FEC-based schemes have been proposed. Although these schemes significantly enhance {{the reliability of the}} <b>rekey</b> transmissions, they require significant additional resources at the key server. In this paper we propose a distributed scheme for recovering lost <b>rekey</b> packets. Our scheme allows each member to contact other members to get the missing packets during <b>rekey</b> events, thus avoiding the extra computation and bandwidth resources at the key server. We compare our scheme with a well-known FEC scheme with respect to latencies experienced by receivers in reasonably large groups. Results show that our scheme yields lower average and 95 th-percentile latencies than the FEC-based scheme across several operating regimes...|$|R
30|$|The {{demand of}} being MNNs {{oblivious}} to mobility events {{to simplify the}} handover procedures comes face-to-face {{with the need to}} <b>rekey</b> the end-to-end association when a mobility event that results in changing the IP address occurs. Since MNNs do not know that a mobility event has happened, they will not <b>rekey</b> the end-to-end associations, and so, security vulnerabilities related to mobility would still be present. A straightforward solution would be to inform the MNNs to conduct end-to-end SA updates, but this would result in an unmanageable signaling cost; i.e., the advantages of delegating signaling rights would be lost.|$|R
50|$|The EFS <b>rekeying</b> wizard {{allows the}} user to choose a {{certificate}} for EFS and to select and migrate existing files that will use the newly chosen certificate. Certificate Manager also allows users to export their EFS recovery certificates and private keys. Users are reminded to back up their EFS keys upon first use through a balloon notification. The <b>rekeying</b> wizard {{can also be used}} to migrate users in existing installations from software certificates to smart cards. The wizard can also be used by an administrator or users themselves in recovery situations. This method is more efficient than decrypting and reencrypting files.|$|E
50|$|In cryptography, <b>rekeying</b> {{refers to}} the process of {{changing}} the session key -- the encryption key of an ongoing communication -- in order to limit the amount of data encrypted with the same key.|$|E
5000|$|In Public Key Infrastructure, <b>rekeying</b> (or [...] "re-keying") {{leads to}} {{issuance}} of new certificate (in contrast to certificate renewal - issuance of new certificate {{for the same}} key, which is usually not allowed by CAs).|$|E
5000|$|The {{new entry}} [...] is <b>rekeyed</b> with global depth 3 bits {{and ends up}} in D which has local depth 2, which can now be {{incremented}} to 3 and D can be split to D' and E.|$|R
40|$|We prove a tight {{lower bound}} on the {{communication}} complexity of secure multicast key distribution protocols in which <b>rekey</b> messages are built using symmetric-key encryption, pseudorandom generators and secret sharing schemes. Our lower bound {{shows that the}} amortized cost of updating the group key for each group membership change (as {{a function of the}} current group size) is at least log 2 (n) − o(1) basic <b>rekey</b> messages. This lower bound matches, up to a subconstant additive term, the upper bound due to Canetti, Garay, Itkis, Micciancio, Naor and Pinkas (Proc. of Infocomm 1999), who showed that log 2 (n) basic <b>rekey</b> messages (each time a user joins and/or leaves the group) are sufficient. Our lower bound is, thus, optimal up to a small, subconstant additive term. The result of this paper considerably strengthens previous lower bounds by Canetti, Malkin and Nissim (Proc. of Eurocrypt 1999), and Snoeyink, Suri and Varghese (Computer Networks 47 (3) : 2005), which allowed for neither the use of pseudorandom generators and secret sharing schemes, nor the iterated (nested) application of the encryption function. Our model (which allows for arbitrarily nested combinations of encryption, pseudorandom generators and secret sharing schemes) is much more general, and, in particular, encompasses essentially all known multicast key distribution protocols of practical interest...|$|R
3000|$|... [...]) is longer. This {{is because}} the number of subsessions in a cell depends on the mean {{duration}} of the communication, and thus, on the number of associations that have to be <b>rekeyed.</b> Therefore, the NeMHIP protocol outperforms the HIP–NEMO protocol in terms of signaling cost over the wireless link.|$|R
5000|$|Support of the RFC 4555 Mobility and Multihoming Protocol (MOBIKE) {{which allows}} dynamic {{changes of the}} IP address and/or network {{interface}} without IKEv2 <b>rekeying.</b> MOBIKE is also supported by the Windows 7 Agile VPN Client.|$|E
5000|$|SAASM allows {{satellite}} authentication, over-the-air <b>rekeying,</b> and contingency recovery. Those {{features are}} not available with the similar, but older, PPS-SM system. PPS-SM systems require periodic updates with a classified [...] "Red Key" [...] that may only be transmitted by secure means (such as physically taking the receiver to a secure facility for <b>rekeying</b> or having a trusted courier deliver a paper tape with a new key to the receiver, after which that paper tape must be securely destroyed). SAASM systems can be updated with an encrypted [...] "Black Key" [...] that may be transmitted over unclassified channels. All military receivers newly deployed {{after the end of}} September 2006 must use SAASM.|$|E
50|$|Andrews also {{invented a}} sewing machine, a barrel making machine, fumigators, forging presses, a kitchen range, a gas lamp, a nicotine-filtering pipe, <b>rekeying</b> and a padlock {{which has been}} used by the U.S. Post Office since 1842.|$|E
40|$|We {{present a}} {{tamper-resistant}} architectural enhancement for secure group key management in group communication applications. Using specially designed four cryptographic instructions, {{we show that}} the hardware assisted design can greatly reduce the management overhead {{to the order of}} O(1) in terms of <b>rekey</b> messages, storage cost, and the encryption computation cost. ...|$|R
40|$|Motivated by {{the problem}} of delegating signing keys to {{vulnerable}} mobile devices, we define <b>rekeyed</b> digital signature schemes. We provide an adversary model and a strong notion of security for such schemes, and show that the classic self-certification paradigm, properly implemented, provably meets this notion of security. We then suggest altnerative solutions, based o...|$|R
50|$|Dom Esteban designates his {{youngest}} son, Valdir-Lewis Lanart-Alton {{to be his}} heir. He designates Damon Ridenow as Regent of Alton. Damon discovers that Dezi has taken Domenic’s matrix while he lay injured, thus killing Domenic, and <b>rekeyed</b> it to himself. Callista uses her ability to take Domenic’s matrix away from Dezi. He dies as a result.|$|R
50|$|To {{be able to}} run on legacy WEP {{hardware}} {{with minor}} upgrades, TKIP uses RC4 as its cipher. TKIP also provides a <b>rekeying</b> mechanism. TKIP ensures that every data packet is sent with a unique encryption key.|$|E
5000|$|The IKEv2 daemon {{comes with}} a High-Availability option based on Cluster IP where {{currently}} a cluster of two hosts does active load-sharing and each host can take over the ESP and IKEv2 states without <b>rekeying</b> if the other host fails.|$|E
50|$|By design all block ciphers with a {{block size}} of 64 bit can have {{problems}} with block collisions if they are used with large amounts of data. Therefore implementations {{need to make sure}} that the amount of data encrypted with the same key is limited and <b>rekeying</b> is properly implemented.|$|E
40|$|In today‟s {{world of}} internet, secure {{communication}} among group of members has become vital, where multicasting {{plays an important}} role. In secure multicasting, security and scalability are the two important checks. Sometimes there is tradeoff between security and scalability. In order to transmit the data in a secure and scalable way, a suitable key management protocol should be implemented which reduces the number of <b>rekey</b> messages generated during the join or leave of any member thereby preserving forward and backward secrecy. In our proposed work, a new key management protocol has been proposed where a hierarchical structure has been implemented to improve the scalability. Derivation key is used to generate the new keys from the existing keys and Rabin‟s Squaring Trapdoor Function is used as the key derivation function to distribute the <b>rekey</b> messages. The security of the key derivation function lies in the hard mathematical problem of integer factorization which cannot be solved in a polynomial time. In order to increase the security, a salt value has been used along with the derivation keys for key stretching so that original keys used in the derivation function cannot be found out. The proposed protocol reduces the <b>rekey</b> messages by 1 /d, in a d-degree tree {{and the number of}} modular exponential operations is only 2 h compared to 3 h in TGDH (Tree-based Group Diffie-Hellman) protocol, where h is the height of the tree...|$|R
50|$|The {{functions}} of the MINTERM {{are similar to those}} of the TACTERM; its updated design includes an improved modular architecture, and it has been reduced in size. The MINTERM is lightweight, low-power, single channel, half-duplex, narrowband/wideband/wireline terminal providing secure voice and data communications with full key distribution and remote <b>rekey</b> capabilities. The MINTERM is certified to secure traffic up to TOP SECRET.|$|R
50|$|So far 2,231 texts {{have been}} {{released}} free to the public through {{the work of the}} University of Michigan’s Text Creation Partnership. Rather than OCR, they <b>rekey</b> the texts and tag them with TEI. Their aim is to enable improved access to a fraction of the collection: they are making SGML/XML text editions for 10,000 books. In addition to the free version, subscription access is also offered.|$|R
50|$|During SSL/TLS <b>rekeying,</b> {{there is}} a transition-window {{parameter}} that permits overlap between old and new key usage, {{so there is no}} time pressure or latency bottleneck during SSL/TLS renegotiations.  Because SSL/TLS is designed to operate over a reliable transport, OpenVPN provides a reliable transport layer on top of UDP (see diagram below).|$|E
50|$|The {{ability to}} import and export data (or lack of such ability) has large {{economic}} implications, {{because it can}} be resource-intensive to input data in non-automated ways (such as manual <b>rekeying),</b> and because lack of interoperability between systems unable to import or export data between each other causes stovepiping and lack of opportunity and efficiencies such as those seen in, for example, mash-ups.|$|E
50|$|EPLRS is a Time Division Multiple Access System {{that uses}} a {{frequency}} hopping, spread spectrum waveform in the UHF band. It incorporates the Thornton family of COMSEC devices, and has the capability for Over the Air <b>Rekeying</b> (OTAR). EPLRS uses the Army Data Distribution System version of the X.25 CCITT and IEEE 802.3 protocols to interface with Army Tactical Command and Control System (ATCCS).|$|E
40|$|International audienceThe {{provision}} of NEMO support {{based on an}} end-to-end protocol presents manageability challenges that are usually overcome delegating the signaling rights to the MR. In addition, whether the protocol is focused on establishing security associations, how these are <b>rekeyed</b> through a proxy-based process with no security threats should be solved. In this work {{we focus on the}} HIP protocol and analyze existing HIP based NEMO solutions. Based on found limitations, we outline the fundamentals of our protocol, NeMHIP...|$|R
40|$|This table, that {{originally}} appears on p. 88 of Leonardo's Laptop: Human Needs and the New Computing Technologies was redrawn and <b>rekeyed</b> {{for use in}} DTC/English 356, Electronic Research and the Rhetoric of Information, Spring 2003. Shneiderman details four activities and four relationships {{as well as a}} host of actions to create this matrix that explores the creative process for artists, software and other technology producers. Leonardo's Laptop: Human Needs and the New Computing Technologies by Ben Shneiderman. Cambridge, MA: MIT Press, 2002...|$|R
40|$|Abstract. In {{this paper}} we present the main ideas behind the Home Manager, a {{software}} infrastructure {{aimed at a}} usable and secure man-agement of Cooperating Objects for Home Automation applications. Through the Home Manager, a user can add and remove devices, query and set them, and define device access control policies. The Home Man-ager encrypts and decrypts commands to and data from devices, dis-tributes keying material to new devices, and <b>rekeys</b> the network upon device leaving. An early prototype of the Home Manager has been im-plemented...|$|R
50|$|KINK {{directly}} reuses Quick Mode payloads {{defined in}} section 5.5 of IKE, with some minor changes and omissions. In most cases, KINK exchanges are a single command and its response. An optional third message is required when creating SAs, {{only if the}} responder rejects the first proposal from the initiator or wants to contribute the keying materials. KINK also provides <b>rekeying</b> and Dead Peer Detection.|$|E
50|$|<b>Rekeying</b> {{was first}} invented in 1836 by Solomon Andrews, a New Jersey locksmith. His lock had {{adjustable}} tumblers and keys, allowing the owner to rekey it at any time. Later in the 1850s, inventors Andrews and Newell patented removable tumblers {{which could be}} taken apart and scrambled. The keys had bits that were interchangeable, matching varying tumbler configurations. This arrangement later {{became the basis for}} combination locks.|$|E
50|$|The KY-57 {{can accept}} signal fades {{of up to}} 12 seconds without losing {{synchronization}} with the transmitting station. There are storage positions for 6 keys. Keys 1 to 5 are traffic encryption keys (TEK). Key 6 is a key encryption key (KEK) used for over the air <b>rekeying</b> (OTAR) of the other 5 keys. Key 6 must be loaded manually using a fill device such as the AN/CYZ-10.|$|E
5000|$|Meanwhile, some mendacious and greedy {{civilian}} contractors for the Fleet {{have agreed}} {{to carry out a}} job for the barbarian space-warriors of the Bloodhorde: they would take a Fleet contract to <b>rekey</b> the command sequences of various missiles, and when they were aboard the specified massive Deep Space Repair vessel, covertly disable its self-destruct mechanism. This job would pave the way for the Bloodhorde boarding team. By a remarkable coincidence, it is this very same DSR, the Koskiuskos ("Kos" [...] for short) which Suiza is assigned to.|$|R
40|$|Abstract. Wireless Sensor Networks (WSNs) {{are usually}} {{subjected}} to numerous threats and vulnerable to various attacks. Generally, the key management {{is considered to}} be the prerequisite for secure communication in WSNs. In this paper, we present a Localization-based Clustered Key Management (LCKM) which can efficiently enhance the network security and survivability for the clustered heterogeneous networks. LCKM utilizes the seeds to <b>rekey</b> and then localize the key materials, which protects the network from the compromised nodes by reducing the probability of the common key. The security analysis proves that LCKM can effectively prevent more attacks than other protocols...|$|R
40|$|In secure group communications, a key server {{can deliver}} a "group- oriented" <b>rekey</b> message [20] {{to a large}} number of users {{efficiently}} using IP multicast. For reliable delivery, Keystone [21] proposed the use of forward error correction (FEC) in an initial multicast, followed by the use of unicast delivery for users that cannot recover their new keys from the multicast. In this paper, we investigate how to limit unicast recovery to a small fraction r of the user population. By specifying a very small r, almost all users in the group will receive their new keys within a single multicast round...|$|R
