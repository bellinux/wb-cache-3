10000|10000|Public
5|$|Since {{fields are}} {{ubiquitous}} {{in mathematics and}} beyond, there are several <b>refinements</b> of the concept which are adapted {{to the needs of}} a particular mathematical area.|$|E
5|$|Further <b>refinements</b> in the process, such {{as basic}} oxygen {{steelmaking}} (BOS), largely replaced earlier methods by further lowering the cost of production and increasing {{the quality of the}} final product. Today, steel {{is one of the most}} common man-made materials in the world, with more than 1.6 billion tons produced annually. Modern steel is generally identified by various grades defined by assorted standards organizations.|$|E
5|$|The F-84C {{featured}} {{a somewhat more}} reliable J35-A-13 engine and had some engineering <b>refinements.</b> Being virtually identical to the F-84B, the C model suffered {{from all of the}} same defects and underwent a similar structural upgrade program in 1949. All F-84Cs were withdrawn from active service by 1952.|$|E
40|$|We {{study the}} notion of class <b>refinement</b> in a {{concurrent}} object-oriented setting. Classes, defining attributes and methods, serve as templates for creating objects. For expressing concurrency, actions are added to classes and methods with guards are considered. A class can be defined by inheriting from a given class. Class <b>refinement</b> is defined to support algorithmic <b>refinement,</b> data <b>refinement,</b> and atomicity <b>refinement.</b> Behavioral class <b>refinement</b> is {{defined in terms of}} trace <b>refinement</b> of action systems. A simulation-based proof rule for class <b>refinement</b> using a <b>refinement</b> relation is given. The special case of atomicity <b>refinement</b> by early returns is considered. The use of the class <b>refinement</b> rule is illustrated by examples...|$|R
40|$|AbstractIn {{this paper}} we compare the <b>refinement</b> orderings, and their {{associated}} simulation rules, of state-based specification languages such as Z and Object-Z with the <b>refinement</b> orderings of event-based specification languages such as CSP. We prove {{with a simple}} counter-example that data <b>refinement,</b> established using the standard simulation rules for Z, does not imply failures <b>refinement</b> in CSP. This contradicts accepted results. Having explored {{the differences between the}} simulation rules for establishing data <b>refinement</b> and those for establishing the <b>refinement</b> of action systems and state-transition systems—models in which <b>refinement</b> is equivalent to failures <b>refinement</b> within CSP—we present a new set of simulation rules for data types. These alternative rules are both sound and jointly complete with respect to the stable failures <b>refinement</b> ordering. Furthermore we present an alternative <b>refinement</b> ordering for CSP, one in which <b>refinement</b> is equivalent to data <b>refinement</b> in Z...|$|R
40|$|The basic {{concepts}} for model generators and model management are presented. An analysis regarding model complexity and performance is made. The model <b>refinement</b> concept is defined. Three <b>refinement</b> models are being proposed for software quality metric: <b>refinement</b> through variable elimination, <b>refinement</b> through complexity decrease, <b>refinement</b> through genetic algorithms. model base, quality, metrics, <b>refinement,</b> criterions...|$|R
5|$|A further twelve bodies, pending <b>refinements</b> of {{knowledge}} regarding their physical properties, were possible candidates {{to join the}} list under this definition. Some objects in this second list were more likely eventually to be adopted as 'planets' than others. Despite what had been claimed in the media, the proposal did not necessarily leave the Solar System with only twelve planets. Mike Brown, the discoverer of Sedna and Eris, has said that at least 53 known bodies in the Solar System probably fit the definition, and that a complete survey would probably reveal more than 200.|$|E
5|$|After the {{critical}} and commercial success of Awakening, development began on Fates, {{with the staff}} of Awakening returning to their previous roles. The team's main concern was adding new features and <b>refinements</b> to the original gameplay, and improving the story, which had received criticism from fans. To this end, writer Shin Kibayashi was brought in. To show {{all sides of the}} story and provide players with different Fire Emblem experiences, the game was split up into multiple versions. Upon release, it met with highly positive reviews: Birthright was generally seen as a good starting place for new players, Conquest was praised for its challenge, while Revelation was noted as a good middle ground between the two releases.|$|E
5|$|Cyclopean fortifications were {{typical of}} Mycenaean walls, {{especially}} at the citadels of Mycenae, Tiryns, Argos, Crisa and Athens, while smaller boulders are found in Midea and large limestone slabs are found at Gla. In the Mycenaean settlements found in Epirus and Cyprus, Cyclopean-style walls are also present, {{as well as in}} western Anatolia. Besides the citadels, isolated forts were also erected on various strategic locations. The fortification systems also incorporated technical <b>refinements</b> such as secret cisterns, galleries, sally ports and projecting bastions for the protection of gateways. On the other hand, the palace of Pylos, although a major center of power, paradoxically appears to have been left without any defensive walls.|$|E
40|$|Algorithmic <b>Refinement</b> {{is part of}} {{the theory}} of the B method both at the <b>refinement</b> and {{implementation}} stages. It a sign of how little loop introduction is used in practice at the <b>refinement</b> stage that neither the B-Toolkit nor Atelier-B provide support for loop introduction until the implementation stage. This paper examines the use of algorithmic <b>refinement</b> in general before data <b>refinement.</b> This involves extending the usual scope of data <b>refinement</b> which usually happens before algorithmic <b>refinement.</b> Two case studies are used to compare and contrast the application of algorithmic <b>refinement</b> before data <b>refinement</b> and vice versa. Some extensions are needed in the B-Toolkit to implement this style (i. e., algorithmic before data <b>refinement)</b> and are proposed. Som...|$|R
40|$|In [1], we have formalized Börger’s <b>refinement</b> notion for Abstract State Machines (ASMs). The {{formalization}} {{was based}} on transition systems, and verification conditions were expressed in Dynamic Logic. In this paper, the relation between ASM <b>refinement</b> and data <b>refinement</b> is explored. Data <b>refinement</b> expresses operations and verification conditions using relational calculus. We show how {{to bridge the gap}} between the different notations, and that forward simulation in the behavioral approach to data <b>refinement</b> can be viewed as a specific instance of ASM <b>refinement</b> with 1 : 1 diagrams, where control structure is not refined. We also prove that two recent generalizations of data <b>refinement,</b> weak <b>refinement</b> and coupled <b>refinement</b> can be derived from ASM <b>refinement...</b>|$|R
40|$|State {{machines}} are hierarchical automata that {{are widely used}} to structure complex behavioural specifications. We develop two notions of <b>refinement</b> of state machines, node <b>refinement</b> and edge <b>refinement.</b> We compare the two notions by means of examples and argue that, by adopting simple conventions, they can be combined into one method of <b>refinement.</b> In the combined method, node <b>refinement</b> {{can be used to}} develop architectural aspects of a model and edge <b>refinement</b> to develop algorithmic aspects. The two notions of <b>refinement</b> are grounded in previous work. Event-B is used as the foundation for our <b>refinement</b> theory and UML-B state machine <b>refinement</b> influences the style of node <b>refinement.</b> Hence we propose a method with direct proof of state machine <b>refinement</b> avoiding the detour via Event-B that is needed by UML-B...|$|R
5|$|In 1953, Tank {{constructed}} a fourth prototype (No. 04) and, {{in an attempt}} to resolve the design's deep stall problems at high angles of attack, added stall fences on each wing and four strakes on the rear fuselage. Other <b>refinements</b> included a pressurized cockpit, additional fuel capacity and it was also the first prototype to be fitted with the definitive four 20mm Hispano Mark V cannon armament. Lt. Jorge Doyle piloted the fourth IAe 33 on its maiden flight on 20 August 1953 and, along with Lt. Gonzalez and Lt. Balado, began armament testing in 1954.|$|E
5|$|In high-mass main-sequence stars, the opacity is {{dominated}} by electron scattering, which is nearly constant with increasing temperature. Thus the luminosity only increases as the cube of the star's mass. For stars below 10 , the opacity becomes dependent on temperature, resulting in the luminosity varying approximately as the fourth power of the star's mass. For very low-mass stars, molecules in the atmosphere {{also contribute to the}} opacity. Below about 0.5 , the luminosity of the star varies as the mass to the power of 2.3, producing a flattening of the slope on a graph of mass versus luminosity. Even these <b>refinements</b> are only an approximation, however, and the mass-luminosity relation can vary depending on a star's composition.|$|E
5|$|In the mid-1930s, {{aviation}} design teams worldwide started {{developing a}} new generation of all-metal, low-wing fighter aircraft. The French Dewoitine D.520 and Germany's Messerschmitt Bf 109, for example, were designed to take advantage of new techniques of monocoque construction and the availability of new high-powered, liquid-cooled, in-line aero engines. They also featured <b>refinements</b> such as retractable undercarriages, fully enclosed cockpits, low drag and all-metal wings (all introduced on civil airliners years before but slow to be adopted by the military, who favoured the biplane's simplicity and manoeuvrability).|$|E
40|$|AbstractIn (J. Universal Comput. Sci. 7 (2001) 952), we have formalized Börger's <b>refinement</b> notion for Abstract State Machines (ASMs). The {{formalization}} {{was based}} on transition systems and verification conditions were expressed in Dynamic Logic. In this paper, the relation between ASM <b>refinement</b> and data <b>refinement</b> is explored. Data <b>refinement</b> expresses operations and verification conditions using relational calculus. We show how {{to bridge the gap}} between the different notations, and that forward simulation in the behavioral approach to data <b>refinement</b> can be viewed as a specific instance of ASM <b>refinement</b> with 1 : 1 diagrams, where control structure is not refined. We also prove that two recent generalizations of data <b>refinement,</b> weak <b>refinement</b> and coupled <b>refinement</b> can be derived from ASM <b>refinement...</b>|$|R
40|$|Data <b>refinement</b> is {{converting}} {{a program}} that uses one set of variables to an equally correct program that uses another set of variables, usually of different types. There {{have been a number}} of seemingly different mathematical definitions of data <b>refinement.</b> We present a unifying view of data <b>refinement</b> as a special case of procedural <b>refinement,</b> which is simpler to understand. All the data <b>refinement</b> theories in the literature are shown to be instances of two formulas, but we show that there are actually an infinite number of theories. In addition, we introduce the concepts of nonlocal data <b>refinement,</b> data <b>refinement</b> using semi-invariants, and procedural optimization using data <b>refinement.</b> i Table Of Contents 1. Introduction 1. 1. An Example of Data <b>Refinement</b> 2. Formalisms 2. 1. Logic 2. 2. Weakest Preconditions and Strongest Postconditions 2. 3. <b>Refinement</b> 2. 4. Virtual Code 2. 5. Saintly Nondeterminism 3. Data <b>Refinement</b> 4. Theories of Data <b>Refinement</b> 4. 1. Morris' Data Refinemen [...] ...|$|R
40|$|Abstract. This paper {{introduces}} action <b>refinement</b> in {{the context}} of CSP‖B. Our motivation to include this notion of <b>refinement</b> within the CSP‖B framework is the desire to increase flexibility in the <b>refinement</b> process. We introduce the ability to change the events of a CSP process and the B machines when refining a system. Notions of <b>refinement</b> based events are refined by sequences of concrete events. A complementary notion of <b>refinement</b> between B machines is also introduced, yielding compositionality results for <b>refinement</b> of CSP‖B controlled components. The paper also introduces a notion of I/O <b>refinement</b> into our action <b>refinement</b> framework. ...|$|R
5|$|Players {{can play}} a more {{aggressive}} run-and-gun game by using gadgets and weapons to eliminate enemies. They can interact with environmental objects, such as ledges and zip-lines, to navigate levels. Conviction mark-and-execute system returns in Blacklist, with <b>refinements</b> and additions to allow players to mark several targets. When they attack, they can kill all marked targets instantly. Improvements made the system work more fluidly. A variety of enemies (including soldiers and dogs) are encountered in the game, following the protagonist and alerting their companions. Players {{have the option to}} kill them, leave them untouched, or incapacitate them, and the game classifies their choices in one of three categories: Ghost (stealthy play), Panther (stealthy, aggressive play), and Assault (aggressive play).|$|E
5|$|The {{effort to}} develop a lighter, quieter camera with a reflex {{viewfinder}} led {{to the introduction of}} the Panavision Silent Reflex (PSR) in 1967. The camera could provide a shutter angle of up to 200 degrees. Many <b>refinements</b> were made to the PSR during the first few years after its introduction, and it soon {{became one of the most}} popular studio cameras in the world. Panavision also began manufacturing spherical lenses for 1.85:1 photography, garnering a significant share of the market.|$|E
5|$|The {{game has}} been {{positively}} received by video game journalists; much praise went to its gameplay <b>refinements</b> and technical quality. It also set the best first-week {{sales for the}} series until Fire Emblem Awakening in 2012, and with 776,338 units by 2002 was the best-selling title in the series to that date. A derivative title for the Satellaview, BS Fire Emblem, was released during 1997. A full remake for the Nintendo DS, , was released in 2010.|$|E
40|$|In this paper, model {{bases and}} model {{generators}} {{are presented in}} the context of model <b>refinement.</b> This article proposes a neural network based model <b>refinement</b> technique for software metrics estimation. Neural networks are introduced as instruments of model <b>refinement.</b> A <b>refinement</b> technique is proposed for ranking and selecting input variables. A case study shows the practice of model <b>refinement</b> using neural networks. model <b>refinement,</b> neural network, software metrics, Model generators...|$|R
40|$|We {{define a}} very general notion of data <b>refinement</b> which {{comprises}} the traditional notion of data <b>refinement</b> {{as a special}} case. Using the concepts of duals and adjoints we define converse commands and a find a symmetry between ordinary data <b>refinement</b> and a dual (backward) data <b>refinement.</b> We show how ordinary and backward data <b>refinement</b> are interpreted as simulation and we derive rules for the piecewise data <b>refinement</b> of programs. Our results are valid for a general language, covering demonic and angelic nondeterminism as well as nontermination and miracles. 1 Introduction Data <b>refinement</b> is the systematic replacement of a data structure by another one in a <b>refinement</b> step, an idea first described formally by Hoare [13]. In program development, data <b>refinement</b> is a powerful method for transforming a specification into an implementable program. In this paper, we consider data <b>refinement</b> {{in the setting of}} the <b>refinement</b> calculus. This calculus is based on Dijkstra's weakest precondi [...] ...|$|R
40|$|In this paper, {{we present}} a suite of {{optimizations}} targeting automatic abstraction <b>refinement</b> for Generalized Symbolic Trajectory Evaluation (GSTE). We optimize both model <b>refinement</b> and spec <b>refinement</b> supported by AutoGSTE: a counterexample-guided <b>refinement</b> loop for GSTE. Experiments on a family of benchmark circuits have shown that our optimizations lead to major efficiency improvements in verification involving abstraction <b>refinement...</b>|$|R
5|$|The {{introduction}} of Buddhism during {{the sixth century}} was a catalyst for large-scale temple building using complicated techniques in wood. Influence from the Chinese Tang and Sui Dynasties led to {{the foundation of the}} first permanent capital in Nara. Its checkerboard street layout used the Chinese capital of Chang'an as a template for its design. A gradual increase in the size of buildings led to standard units of measurement as well as <b>refinements</b> in layout and garden design. The {{introduction of}} the tea ceremony emphasised simplicity and modest design as a counterpoint to the excesses of the aristocracy.|$|E
5|$|The rapid {{completion}} of the fort did have some drawbacks, however. The fort lacked some of the <b>refinements</b> that would be present at later forts like Fort Foote. In 1864, civil engineer William C. Gunnell requested {{the removal of the}} wooden buildings that served as company quarters at Fort Greble so that the ammunition for the fort could be safely placed in magazines to be built in place of the shanties. There simply had not been time in 1861 to construct proper earthen magazines. This sort of constant renovation and improvement would continue throughout the war as forts were adapted to new purposes and new garrisons.|$|E
5|$|The {{successive}} updates of Le Cuisinier roïal et bourgeois include important <b>refinements</b> such as {{adding a}} glass of wine to fish stock. Definitions were also added to the 1703 edition. The 1712 edition, retitled Le Nouveau cuisinier royal et bourgeois, was increased to two volumes, and was written in a more elaborate style with extensive explanations of technique. Additional smaller preparations are included in this edition as well, leading to lighter preparations, and adding a third course to the meal. Ragout, a stew still central to French cookery, makes its first appearance as a single dish in this edition as well; prior to that, it was listed as a garnish.|$|E
40|$|We {{describe}} how proof rules for three advanced <b>refinement</b> features are mechanically verified using the HOL theorem prover. These features are data <b>refinement,</b> backwards data <b>refinement</b> and superposition <b>refinement</b> of initialised loops. We also show how applications of these proof rules to actual program <b>refinement</b> can be checked using the HOL system, with the HOL system generating the verification conditions. 1 Introduction Stepwise <b>refinement</b> is a methodology for developing programs from high-level program specifications into efficent implementations. The <b>refinement</b> calculus of Back [1, 2] is a formalisation of this approach, {{based on the}} weakest precondition calculus of Dijkstra [9]. Practical program derivation within the <b>refinement</b> calculus [5] has shown that <b>refinement</b> steps often {{tend to be very}} similar to each other. Rather than always inventing a refining statement and proving the correctness of the <b>refinement,</b> it is convenient to have access to a collection of program transfo [...] ...|$|R
40|$|We {{suggest a}} new notion of {{behaviour}} preserving transition <b>refinement</b> based on partial order semantics. This notion is called transition <b>refinement.</b> We introduced transition <b>refinement</b> for elementary (low-level) Petri Nets earlier [Peu 01 a]. For modelling and verifying complex distributed algorithms, high-level (Algebraic) Petri nets are usually used. In this paper, we define transition <b>refinement</b> for Algebraic Petri Nets. This notion {{is more powerful}} than transition <b>refinement</b> for elementary Petri nets because it corresponds to the simultaneous <b>refinement</b> of several transitions in an elementary Petri net. Transition <b>refinement</b> is particularly suitable for <b>refinement</b> steps that increase the degree of distribution of an algorithm, e. g. when synchronous communication is replaced by asynchronous message passing. We study how to prove that a replacement of a transition is a transition <b>refinement...</b>|$|R
40|$|In this paper, {{we propose}} {{a method of}} mixed-level cosimulation that enables fine gradual <b>refinement</b> of SoC {{communication}} from protocol-neutral communication to protocol-fixed communication. For fine granularity in <b>refinement,</b> the method enables the designer to perform channel-by-channel <b>refinement</b> and inter-level channel <b>refinement.</b> Thus, the designer can perform more extensive design space exploration in communication <b>refinement.</b> We show {{the effectiveness of the}} proposed method in a case study of communication <b>refinement</b> in an IS- 95 CDMA cellular phone system design...|$|R
5|$|As {{with the}} Merchant Navy class, {{electric}} lighting was provided on both locomotive and footplate, {{powered by a}} steam-powered generator below the footplate. The gauges were lit by ultra-violet light. This enabled clearer night-time vision of the boiler steam pressure gauge and the brake pipe vacuum pressure gauge whilst eliminating dazzle, {{making it easier for}} the crew to see signals along the track. Close attention was paid to the ergonomics of the cab, which was designed with the controls required for operation grouped according to the needs of both driver and fireman, thus promoting safe operation. As an aid to the fireman, a treadle used steam pressure to open the firehole doors, where the coal is shovelled into the firebox. The footplate was entirely enclosed, improving crew working conditions in winter. Other <b>refinements</b> and innovations used on the Merchant Navy class included steam-powered clasp brakes and the unusual 6ft 2 in (1.88 m) Bulleid Firth Brown (BFB) wheels.|$|E
5|$|Because {{the planet}} is {{predicted}} to be visible in the Northern Hemisphere, the primary search {{is expected to be}} carried out using the Subaru Telescope, which has both an aperture large enough to see faint objects and a wide field of view to shorten the search. Two teams of astronomers—Batygin and Brown, as well as Trujillo and Sheppard—are undertaking this search together, and both teams cooperatively expect the search to take up to five years. Brown and Batygin initially narrowed the search for Planet Nine down to roughly 2,000 square degrees of sky near Orion, a swath of space, that in Batygin's opinion, could be covered in about 20 nights by the Subaru Telescope. Subsequent <b>refinements</b> by Batygin and Brown have reduced the search space to 600–800 square degrees of sky.|$|E
5|$|Between 1877 and 1931, Albert A. Michelson made {{multiple}} {{measurements of}} the speed of light. His 1877–79 measurements were performed under the auspices of Simon Newcomb, who was also working on measuring the speed of light. Michelson's setup incorporated several <b>refinements</b> on Foucault's original arrangement. As seen in Figure5, Michelson placed the rotating mirror R near the principal focus of lens L (i.e. the focal point given incident parallel rays of light). If the rotating mirror R were exactly at the principal focus, the moving image of the slit would remain upon the distant plane mirror M (equal in diameter to lens L) as long as the axis of the pencil of light remained on the lens, this being true regardless of the RM distance. Michelson was thus able to increase the RM distance to nearly 2000feet. To achieve a reasonable value for the RS distance, Michelson used an extremely long focal length lens (150feet) and compromised on the design by placing R about 15feet closer to L than the principal focus. This allowed an RS distance of between 28.5 to 33.3feet. He used carefully calibrated tuning forks to monitor the rotation rate of the air-turbine-powered mirror R, and he would typically measure displacements of the slit image on the order of 115mm. His 1879 figure for the speed of light, 299944±51km/s, was within about 0.05% of the modern value. His 1926 repeat of the experiment incorporated still further <b>refinements</b> {{such as the use of}} polygonal prism-shaped rotating mirrors (enabling a brighter image) having from eight through sixteen facets and a 22mile baseline surveyed to fractional parts-per-million accuracy. His figure of 299,796±4km/s was only about 4km/s higher than the current accepted value. Michelson's final 1931 attempt to measure the speed of light in vacuum was interrupted by his death. Although his experiment was completed posthumously by F.G.Pease and F.Pearson, various factors militated against a measurement of highest accuracy, including an earthquake which disturbed the baseline measurement.|$|E
40|$|International audienceIn {{the present}} paper we develop {{algebraic}} semantics of <b>refinement</b> modal logic using duality theory. <b>Refinement</b> modal logic has been introduced by Bozzelli et al. [7]. A <b>Refinement</b> is like a bisimulation, except that from the three relational requirements only 'atoms' and 'back' have to be satisfied. We study the dual notion of <b>refinement</b> on algebras and present algebraic semantics of <b>refinement</b> modal logic. For this end, we proceed as follows: (1) we present the algebraic semantics of action model logic quantifier, (2) we introduce an algebraic model based on semantics of <b>refinement</b> quantifier in terms of <b>refinement</b> relation. Then we show that <b>refinement</b> modal logic is sound and complete {{with respect to the}} algebraic semantics introduced...|$|R
40|$|This paper {{introduces}} action <b>refinement</b> in {{the context}} of CSP||B. Our motivation to include this notion of <b>refinement</b> within the CSP parallel to B framework is the desire to increase flexibility in the <b>refinement</b> process. We introduce the ability to change the events of a CSP process and the B machines when refining a system. Notions of <b>refinement</b> based on traces and on traces/divergences are introduced in which abstract, events arc, refined by sequences of concrete events. A complementary notion of <b>refinement</b> between B machines is also introduced, yielding compositionality results for <b>refinement</b> of CSP parallel to B controlled components. The paper also introduces a notion of I/O <b>refinement</b> into our action <b>refinement</b> framework...|$|R
40|$|We {{automatically}} verify Back’s atomicity <b>refinement</b> law and {{a classical}} data <b>refinement</b> law for action systems. Our novel approach mechanises a <b>refinement</b> calculus based on Kleene algebras in an {{off the shelf}} resolution and paramodulation theorem prover and a counterexample checker with heuristics for hypothesis learning. The proofs are supported by a toolkit of meaningful <b>refinement</b> laws that has also been verified and that, for the first time, allows the <b>refinement</b> of programs and software systems, and the verification of further complex <b>refinement</b> laws, by automated deduction. This suggests that a substantial proportion of <b>refinement</b> could indeed be automated...|$|R
