16|921|Public
5000|$|... #Caption: A <b>recursive</b> <b>transition</b> <b>network</b> for [...] "fancy nouns". Note that {{recursion}} {{is created}} by the nodes labelled [...] "Fancy noun".|$|E
50|$|A filtered-popping <b>recursive</b> <b>transition</b> <b>network</b> (FPRTN), {{or simply}} filtered-popping network (FPN), is a <b>recursive</b> <b>transition</b> <b>network</b> (RTN) {{extended}} with {{a map of}} states to keys where returning from a subroutine jump requires the acceptor and return states to be mapped to the same key. RTNs are finite-state machines {{that can be seen}} as finite-state automata extended with a stack of return states; as well as consuming transitions and -transitions, RTNs may define call transitions. These transitions perform a subroutine jump by pushing the transition's target state onto the stack and bringing the machine to the called state. Each time an acceptor state is reached, the return state {{at the top of the}} stack is popped out, provided that the stack is not empty, and the machine is brought to this state.|$|E
5000|$|A <b>recursive</b> <b>transition</b> <b>network</b> ("RTN") is a graph {{theoretical}} schematic used {{to represent}} the rules of a context-free grammar. RTNs have application to programming languages, natural language and lexical analysis. Any sentence that is constructed {{according to the rules}} of an RTN is said to be [...] "well-formed". The structural elements of a well-formed sentence may also be well-formed sentences by themselves, or they may be simpler structures. This is why RTNs are described as recursive.|$|E
50|$|State <b>transition</b> <b>networks</b> are {{a general}} construct, with more {{specific}} examples being augmented <b>transition</b> <b>networks,</b> <b>recursive</b> <b>transition</b> <b>networks,</b> and augmented <b>recursive</b> networks, among others.|$|R
5000|$|Throughout {{this article}} we refer to filtered-popping <b>recursive</b> <b>transition</b> <b>networks</b> as FPNs, though this acronym is {{ambiguous}} (e.g.: fuzzy Petri nets). Filtered-popping networks and FPRTNs are unambiguous alternatives.|$|R
40|$|We {{describe}} {{here two}} efficient parsing algorithms for natural language texts {{based on an}} extension of <b>recursive</b> <b>transition</b> <b>networks</b> (RTN) called <b>recursive</b> <b>transition</b> <b>networks</b> with string output (RTNSO). RTNSO-based grammars may be semiautomatically built from samples of a manually built syntactic lexicon. Efficient parsing algorithms are needed to minimize the temporal cost associated {{to the size of}} the resulting networks. We focus our algorithms on the RTNSO formalism due to its simplicity which facilitates the manual construction and maintenance of RTNSO-based linguistic data as well as their exploitation. 1...|$|R
5000|$|The Postmodernism Generator is a {{computer}} program that automatically produces imitations of postmodernist writing. It was written in 1996 by Andrew C. Bulhak of Monash University using the Dada Engine, a system for generating random text from recursive grammars. A free version is also hosted online. The essays are produced from a formal grammar defined by a <b>recursive</b> <b>transition</b> <b>network.</b> Nassim Nicholas Taleb writes about [...] "Monte Carlo generators" [...] in his 2001 book Fooled by Randomness as a real instance of the reverse Turing test: a human can be declared unintelligent if his or her writing cannot be told apart from a generated one. It was mentioned by biologist Richard Dawkins in the conclusion to his article [...] "Postmodernism Disrobed" [...] (1998) for the scientific journal Nature, reprinted in his book A Devil's Chaplain (2004).|$|E
40|$|Probabilistic <b>Recursive</b> <b>Transition</b> <b>Network</b> (PRTN) is an {{elevated}} version of RTN to model and process languages in stochstic parameters. The representation {{is a direct}} derivation from the RTN and keeps much the spirit of Hidden Markov Model at the same time. We present a reestimation algorithm for PRTN that is a variation of Inside-Outside algorithm that computes {{the values of the}} probabilistic parameters for sample sentences (parsed or unparsed) ...|$|E
40|$|Assessments of {{the quality}} of parts of {{syntactic}} grammars of natural languages are useful for the validation of their construction. We extended a grammar of French determiners that {{takes the form of a}} <b>recursive</b> <b>transition</b> <b>network</b> and evaluated its quality. The result of the application of this local grammar gives deeper syntactic information than chunking or information available in treebanks. We performed the evaluation by comparison with a corpus independently annotated with information on determiners. We obtained 85 % precision and 93 % recall on text not tagged for parts of speech...|$|E
40|$|Abstract. We {{present a}} {{formalization}} of lexicalized <b>Recursive</b> <b>Transition</b> <b>Networks</b> {{which we call}} Automaton-Based Generative Dependency Grammar (gdg). We show how to extract a gdg from a syntactically annotated corpus, present a chart parser for gdg, and discuss different probabilistic models which are directly implemented in the finite automata and do not affect the parser. ...|$|R
40|$|<b>Recursive</b> <b>transition</b> <b>networks</b> are an {{abstraction}} related to contextfree grammars and nitestate automata It {{is possible to}} generate random meaningless and yet realisticlooking text in genres dened using <b>recursive</b> <b>transition</b> <b>networks</b> often with quite amusing results One genre in which this has been accomplished is that of academic papers on postmodernism In his book Godel Escher Bach An Eternal Golden Braid Douglas Hofstadter demonstrated a method of generating meaningless but grammati cally correct Englishlanguage text Hofstadter illustrated this method with an example a selection of fragments of text ten of which were generated using a computer program and three which were taken from a journal titled ArtLanguage and {{a challenge to the}} reader to identify which sentences were generated articially The challenge is made interesting {{by the fact that the}} lan guage of the excerpts from the journal is so dense and jargonladen that to the casual observer it does not make any more sense than the computergenerated fragments It was this that inspired me initially to write a program to generate articial travesties of such writing <b>Recursive</b> <b>Transition</b> <b>Networks</b> There are several approaches to generating travesties of naturallanguage text by computer Perhaps the two most common approaches areMarkov models and <b>recursive</b> <b>transition</b> <b>networks</b> The approach of using Markov models consists of analysing sample text in a genre by breaking it up into units 	typically words or characters and building up tables of the probabilities of units following other units To generate text one performs a random walk through these tables starting at a unit selecting the following unit randomly with respect to the probabilities discovered doing so again and so on The advantages of this model are that it is automatic the models can be built algorithmically from input and can have delity proportional to the number of prior units considered the degree of the model However this is a dumb model it does not model sentenc...|$|R
40|$|<b>Recursive</b> <b>transition</b> <b>networks</b> are an {{abstraction}} related to context-free grammars and finite-state automata. It is possible, to generate random, meaningless and yet realistic-looking text in genres defined using <b>recursive</b> <b>transition</b> <b>networks,</b> often with quite amusing results. One genre {{in which this}} has been accomplished is that of academic papers on postmodernism. In his book Godel, Escher, Bach: An Eternal Golden Braid [1], Douglas Hofstadter demonstrated a method of generating meaningless but grammatically correct English-language text. Hofstadter illustrated this method with an example: a selection of 13 fragments of text, ten of which were generated using a computer program and three which were taken from a journal titled Art-Language, and {{a challenge to the}} reader to identify which sentences were generated artificially. The challenge is made interesting {{by the fact that the}} language of the excerpts from the journal is so dense and jargon-laden that, to the casual observer, i [...] ...|$|R
40|$|Abstract. Existing {{syntactic}} grammars {{of natural}} languages, {{even with a}} far from complete coverage, are complex objects. Assessments {{of the quality of}} parts of such grammars are useful for the validation of their construction. We evaluated the quality of a grammar of French determiners that {{takes the form of a}} <b>recursive</b> <b>transition</b> <b>network.</b> The result of the application of this local grammar gives deeper syntactic information than chunking or information available in treebanks. We performed the evaluation by comparison with a corpus independently annotated with information on determiners. We obtained 86 % precision and 92 % recall on text not tagged for parts of speech...|$|E
40|$|In {{this paper}} we {{describe}} the architecture and operation of the MINDS-II system. The system analyzes parsed, recognized speech and tries to detect and correct regions containing misrecognitions. The system uses syntactic, semantic, pragmatic and discourse level analyses to both delimit misrecognized input and hypothesize actual spoken content. The heuristics for deriving content hypotheses primarily rely on constraint satisfaction techniques. Hypotheses are expanded into a <b>recursive</b> <b>transition</b> <b>network</b> grammar and are processed with a finite state recognizer. Finally, when multiple phrases are produced in the re-recognition process, each is folded into the entire utterance {{in order to find}} which produces the best overall utterance score. Results show this technique reduces speech recognition errors from roughly 38 to 10 percent across multiple test sets. A Feedback Architecture for Speech Understanding 1 1. Overview This paper describes the MINDS-II spoken language system architecture...|$|E
40|$|The paper {{presents}} a new algorithm for estimating the pa-rameters of a hidden stochastic context-free grammar. In con-trast to the Inside/Outside (I/O) algorithm {{it does not}} require the grammar to be expressed in Chomsky normal form, and thus can operate directly on more natural representations of a gram-mar. The algorithm uses a trellis-based structure as opposed to the binary branching tree structure used by the I/O algorithm. The form of the trellis is an extension of that used by the For-ward/Backward algorithm, and as a result the algorithm reduces to the latter for components that can be modeled as finite-state networks. In the same way that a hidden Markov model (HMM) is a stochastic analogue of a finlte-state network, the represen-tation used by the new algorithm is a stochastic analogue of a <b>recursive</b> <b>transition</b> <b>network,</b> in which a state may be simple or itself contain an underlying structure...|$|E
50|$|The library {{functions}} as an interchanging interface to multiple backends, such as OpenFST, foma and SFST. The utilities comprise various compilers, such as hfst-twolc (a compiler for morphological two-level rules), hfst-lexc (a compiler for lexicon definitions) and hfst-regexp2fst (a regular expression compiler). Functions from Xerox's proprietary scripting language xfst is duplicated in hfst-xfst, and the pattern matching utility pmatch in hfst-pmatch, which {{goes beyond the}} finite-state formalism in having <b>recursive</b> <b>transition</b> <b>networks</b> (RTNs).|$|R
40|$|Efficient {{syntactic}} and semantic parsing for ambiguous context-free {{languages are}} generally characterized as complex, specialized, highly formal algorithms. In fact, they are readily constructed from straightforward <b>recursive</b> <b>transition</b> <b>networks</b> (RTNs). In this paper, we introduce LR-RTNs, and then computationally motivate a uniform progression from basic LR parsing, to Earley's (chart) parsing, concluding with Tomita's parser. These apparently disparate algorithms are unified {{into a single}} implementation, which was used to automatically generate all the figures in this paper...|$|R
40|$|We give a new direct {{construction}} of the shift-reduce ELR(1) parsers for <b>recursive</b> <b>Transition</b> <b>Networks</b> (TN), which is suitable for languages specified by Extended BNF grammars (EBNF). Such parsers are characterized by their absence of conflicts, not just the classical shiftreduce and reduce-reduce types, but also a new type named convergence conflict. Such a condition is proved correct and is more general than the past proposed conditions for the shift-reduce parsing of EBNF grammars or TN’s. The corresponding parser is smaller than a classical one, without any extra bookkeeping. A constraint on TN’s is mentioned, which enables top-down deterministic ELL (1) analysis...|$|R
40|$|A prototype, HPARSER, {{processes}} {{a patient}} history and physical report such that specific data are obtained {{and stored in}} a patient data record. HPARSER is a <b>recursive</b> <b>transition</b> <b>network</b> (RTN) parser, and includes English and medical grammar rules, lexicon, and database constraints. Medical grammar rules augment the grammar rule base and specify common phrases seen in patient reports (e. g., "pupils are equal and reactive"). Each database constraint associates a grammar rule with a database table and attribute. Constraint behavior is such that if a rule is satisfied, data is extracted from the parse tree and stored into the database. Control reports guided construction of grammar and constraint rules. Test reports were processed with the control rules. 85 % of test report sentences parsed and a 60 % data capture rate, compared to controls, was achieved. HPARSER demonstrates use of an RTN to parse patient reports, and database constraints to transfer formal data from parse trees into a database...|$|E
40|$|In this paper, we {{introduce}} a word graph interface between speech and {{natural language processing}} systems within a flexible speech understanding framework based on stochastic concept modeling augmented with background ”filler ” models. Each concept represents a set of phrases (written as a context free grammar (CFG)) with the same meaning, and is compiled into a stochastic <b>recursive</b> <b>transition</b> <b>network</b> (SRTN). The arcs (or rules) are tagged with probabilities after training. The filler models are used for phrases that {{are not covered by}} the concept networks. The structure in concept+filler sequences is captured by ¢-grams. The interface is implemented within the context of CU Communicator spoken dialog system. We investigate the effect of several different filler models and interpolation of complementary language models on the system performance. We report notable performance improvements compared to the baseline system. The gain in performance along with the efficiency and flexibility of the method motivates future work on the implementation of a tighter interface. 1...|$|E
40|$|In {{this paper}} we present SitLog: a {{declarative}} situation-oriented logical language for programming situated service robot tasks. The formalism is task and domain independent, {{and can be}} used in a wide variety of settings. SitLog can also be seen as a behaviour engineering specification and interpretation formalism to support action selection by autonomous agents during the execution of complex tasks. The language combines the <b>recursive</b> <b>transition</b> <b>network</b> formalism, extended with functions to express dynamic and contextualized task structures, with a functional language to express control and content information. The SitLog interpreter is written in Prolog and SitLog's programs follow closely the Prolog notation, permitting the declarative specification and direct interpretation of complex applications in a modular and compact form. We discuss the structure and representation of service robot tasks in practical settings and how these can be expressed in SitLog. The present framework has been tested in the service robot Golem-II+ using the specification and programming of the typical tasks which require completion in the RoboCup@Home Competition...|$|E
40|$|While Information State (IS) based {{techniques}} show {{promise in}} the construction of flexible, knowledgebased dialogue systems, the many declarative rules that are used to encode Dialogue Theories often lead to opaque systems that are difficult to test and potentially unintuitive to users. In this paper, we advocate the application of explicitly defined Generic Dialogue Models (GDMs), encoded as <b>recursive</b> <b>transition</b> <b>networks</b> (RTNs), to the structuring of information state-based dialogue managers. To this end, we review the state of GDM approaches, comparing and contrasting them against the Dialogue Theories which are typically implemented using information state approaches. Furthermore, to support our approach, we present an extension of the ALPHA (A Language for Programming Hybrid Agents) language, which has been enhanced to support information state and GDM concepts directly. ...|$|R
40|$|This paper {{describes}} {{an application of}} Parallel Distributed Genetic Programming (PDGP) {{to the problem of}} inducing recognisers for natural language from positive and negative examples. PDGP is a new form of Genetic Programming (GP) which is suitable for the development of programs {{with a high degree of}} parallelism and an efficient and effective reuse of partial results. Programs are represented in PDGP as graphs with nodes representing functions and terminals, and links representing the flow of control and results. PDGP allows the exploration of a large space of possible programs including standard tree-like programs, logic networks, neural networks, finite state automata, <b>Recursive</b> <b>Transition</b> <b>Networks</b> (RTNs), etc. The paper describes the representations, the operators and the interpreters used in PDGP, and describes how these can be tailored to evolve RTN-based recognisers. 1 Introduction In Genetic Programming [11, 12] programs are expressed as parse trees to be execut [...] ...|$|R
40|$|A {{grammatical}} {{component to}} supply {{information to a}} text-to-speech system is presented. It is composed of four modules: a lexicon, a morphological recognizer, a syntactic preanalyzer, a parser. The parser is composed of a bottom-up algorithm implementing a context-free grammar for Italian simply as <b>Recursive</b> <b>Transition</b> <b>Networks</b> (RTN). No conditions are introduced on the arcs: this will constitute the topic of future work. The paper deals extensively with Fo contours and focus assignment rules in Italian by introducing Pierrehumbert's notational system [4]. We found that an Fo peak usually obtains in coincidence with the focussed syllable: this may be either realized as a fall or as a rise followed or preceded by a trailing/leading Fo {{movement in the opposite}} direction. The combination of the two tones High/Low and Low/High can appear also on other constituents - Phonological Words - but the steepness of the jump or dipping is remarkably inferior to the one occurring in focussed constituents...|$|R
40|$|We {{describe}} here {{an application}} of the filtered-popping network (FPN) parser in (Sastre, 2009 a) for boosting the recognition capabilities of an AIML (Wallace, 2004) chatterbot: the MovistarBot. This conversational agent was developed by Telefónica R&D as an attractive medium for the request of mobile services, such as sending SMSs or downloading games, accessible via short text messages in Spanish through MSN Messenger. AIML being too cumbersome for the fine description of complex sentences, the original chatterbot required services to be requested following a strict command syntax; natural language (NL) requests were answered with {{the description of the}} corresponding command syntax, assumed by the presence of keywords. We have manually constructed a <b>recursive</b> <b>transition</b> <b>network</b> (RTN) with output recognizing and tagging a significant variety of requests in Spanish, implemented an automatic RTN weighting procedure for ambiguity resolution and adapted the FPN parser for the automatic translation of the RTN sentences into command requests...|$|E
40|$|Gene prediction, genetic diversity, {{comparative}} genomics Given {{the availability of}} complete genome sequences from related organisms, {{it should be possible}} to exploit sequence conservation in predicting gene structure. In particular, one should be able to leverage knowledge about known genes in one species when trying to identify new genes in another. Such an approach is appealing in that high quality gene prediction can be achieved for newly-sequenced species, such as mouse and fugu fish, using the extensive knowledge that has been accumulated about human genes. In this research, we report a novel approach to predicting mouse genes by incorporating constraints from orthologous human genes using techniques that have previously been exploited in speech and natural language processing applications. Our approach uses a context-free grammar to parse a training corpus of annotated human genes. A statistical training procedure produces a weighted <b>recursive</b> <b>transition</b> <b>network</b> (RTN) intended to capture the general features of a mammalian gene. This RTN is expanded into a finite state transducer (FST) and composed with an FST capturing the specific features of the human ortholog. This model includes a trigram language model on the amino acid sequence as well as exon length constraints. A final stage uses the free software package, CLUSTALW to align the top ¤ candidates in the search space. For a set of 98 orthologous human-mouse pairs, we achieved 96 % sensitivity and 97 % specificity at the exon level on the mouse genes, given only knowledge gleaned from the human genome. ...|$|E
40|$|The goal of {{this thesis}} was to design and {{implement}} a dialog facility to assist novice users of the MS-DOS operating system. A small natural language interface facility called PE-DOS (Plain English DOS) was built, {{which serves as a}} front end for a subset of simple MS-DOS commands. PE-DOS accepts English-like terminology and translates it into the appropriate MS-DOS command using a system of <b>recursive</b> <b>transition</b> <b>networks</b> (RTNs). The translated command then is presented to the user along with an English paraphrase of the user 2 ̆ 7 s input sentence in an effort to provide confirmation for the intended command in both English and MS-DOS command language. PE-DOS was tested by presenting it to two classes of users. One group was made up of sophisticated users of other operating systems who had not used MS-DOS. The second group consisted of unsophisticated users of applications that run under MS-DOS who had not used any operating system commands. The feedback from these user indicates that PE-DOS is probably most useful as an educational device to teach new users a set of basic MS-DOS commands, rather than as a viable command interface...|$|R
40|$|In {{this paper}} we {{approach}} the following problem: Given an arbitrary language describing device (e. g. a grammar), construct an algorithm which computes structural information for an arbitrary string of the. language described by this device. Algorithms performing this task are called parsers and the problem itself {{is known as the}} 'recognition' or 'parsing' problem. In the first part three devices accepting the set of regular or type 3 languages are presented: <b>transition</b> <b>networks,</b> finite state machines and regular grammars. Then parsers are constructed with these systems as data. Basically a parser works an n-tuples (called tasks) containing all sorts of information, e. g. what symbol should be read in the inputstring, which rule can be applied, etc [...] . Starting from a given initial task, new tasks are constructed from previous tasks by means of a recursive function. The execution of the function involves scanning the inputstring and consulting the grammar. After a finite number of steps, no more tasks can be created and from the set of tasks produced during the computation structural information can be filtered out. In {{the second part of the}} paper three devices accepting the set of contextfree or type 2 languages are presented: <b>recursive</b> <b>transition</b> <b>networks,</b> pushdown automata and context-free grammars. Then parsers are constructed for these systems with the same basic strategy. Emphasis is laid on the construction of a fundamental theoretical framework rather than the description of sophisticated parsers and their implementations. Peer reviewe...|$|R
40|$|We {{extend to}} the whole class of hyperarithmetical open sets a result from [8] on the {{separation}} property, as defined in [1], of some classes of arithmetical open sets. As we do this, we slightly generalize a result from [11] about the position of arithmetical points. We also restate foundational connections between language theoretic separation, test equivalence, as defined in [4] over <b>recursive</b> <b>transition</b> systems, and (co-) analytical sets. Keywords: <b>Recursive</b> <b>transition</b> system, effective concurrency model, generalized computability, test equivalence, trace equivalence, logical expressiveness. 1 Introduction In this article, precise connections are made between a generic representation of operational semantics of models of concurrent computation, namely <b>recursive</b> <b>transition</b> systems, and the first level of analytical hierarchy. It clearly shows that models of concurrent computation are to co-analytical sets as models of sequential computation are to semi-recursive sets. This follows [...] ...|$|R
40|$|Abstract. A {{process is}} called computable {{if it can}} be {{modelled}} by a transition system that has a recursive structure [...] implying finite branching. The equivalence relation between transition systems considered is strong bisimulation equivalence. The transition systems studied in this paper can be associated to processes specified in common specification languages uch as CCS, LOTOS, ACP and PSF. As a means for defining transition systems up to bisimulation equivalence, the specification language #CRL is used. Two simple fragments of #CRL are singled out, yielding universal expressivity with respect o recursive and primitive <b>recursive</b> <b>transition</b> systems. For both these domains the following properties are classified in the arithmetical hierarchy: bisimilarity, perpetuity (both H~ regularity (having a bisimilar, finite representation, Z ~ acyclic regularity (E~ and deadlock freedom (distinguishing deadlock from successful termination, II~ Finally, it is shown that in the domain of primitive <b>recursive</b> <b>transition</b> systems over a fixed, finite label set, a genuine hierarchy in bisimilarity can be defined by the complexity of the witnessing relations, which extends r. e. bisimilarity. Hence, primitive <b>recursive</b> <b>transition</b> systems already form an interesting class. 1...|$|R
40|$|We {{show the}} {{identity}} between sets of fair computations in <b>recursive</b> <b>transition</b> graphs, sets of cluster points of finite computations for II 01 ultra-metrics refining the Baire metrics, and II 03 subsets of ww. The results {{are applied to}} recursive marked trees, fairness definitions, w-regular languages, and II 03 sets...|$|R
40|$|The <b>Transition</b> <b>Network</b> {{started as}} a {{movement}} with Transition Totnes (Devon, UK) in late 2005, with Rob Hopkins as its founder. To date it has grown to encompass 313 official <b>Transition</b> <b>Network</b> initiatives spread across {{the world from the}} UK (with roughly 50 % of all initiatives) to the USA, Canada, Italy, Japan, Germany, Ireland, New Zealand, Chile, the Netherlands, Brazil and so on (<b>Transition</b> <b>Network,</b> 2010 a). For any social movement, this could most certainly be described as something of a success and warrants a closer examination. Indeed, the aim of this profile is to explore the movement's aims and modus operandi, the problematics it has faced and how it is now evolving. The profile draws on my auto-ethnographic encounters with the movement in Transition Nottingham and at the recent <b>Transition</b> <b>Network</b> Conference 2010, whilst also being grounded in the material made publically available on the <b>Transition</b> <b>Network</b> and <b>Transition</b> Culture websites (see <b>Transition</b> <b>Network,</b> 2010 b and Transition Culture, 2010 a) ...|$|R
50|$|A {{theme of}} the <b>Transition</b> <b>Network</b> is {{acknowledging}} the emotional impact of changing to a low energy world. Some <b>Transition</b> <b>Network</b> groups have 'Heart and Soul' groups {{to look at this}} aspect.|$|R
50|$|In 2007, with Peter Lipman and Ben Brangwyn, he co-founded the <b>Transition</b> <b>Network,</b> {{a charity}} {{designed}} {{to support the}} many Transition initiatives emerging around the world, inspired by the processes begun in Kinsale and Totnes. <b>Transition</b> <b>Network</b> is based in Totnes, but there are now Transition initiatives in over 50 countries round the world, in around 1,400 communities. <b>Transition</b> <b>Network</b> has run 7 conference, Nailsworth (2007), Royal Agriculture College, Cirencester (2008), Battersea Arts Centre (2009), Dame Hannah's at Seale Hayne (2010), Hope University, Liverpool (2011), Battersea Arts Centre (2012), Dame Hannah's at Seale Hayne (2015).|$|R
5000|$|State <b>transition</b> <b>networks</b> {{are used}} in both {{academic}} and industrial fields.|$|R
40|$|The <b>Transition</b> <b>Network</b> {{exemplifies the}} {{potential}} of social movements to create spaces of possibility for alternatives {{to emerge in the}} interstices of mainstream, neoliberal economies. Yet, little work has been carried out so far on the <b>Transition</b> <b>Network</b> or other grassroots innovations for sustainability in a way that reveals their actual patterns of diffusion. This graphic of the diffusion of the <b>Transition</b> <b>Network</b> visualises its spatial structure and compare diffusion patterns across Italy, France, Great Britain and Germany. The graphics show that the number of transition initiatives in the four countries has steadily increased over the past eight years, but the rate of increase has slowed down in all countries. The maps clearly show that in all four countries the diffusion of the <b>Transition</b> <b>Network</b> has not been spatially even. The graphic suggests that in each country transition initiatives are more likely to emerge in some geographical areas (hotspots) than in others (cold spots). While the existence of a spatial structure of the <b>Transition</b> <b>Network</b> may result from the combination of place-specific factors and diffusion mechanisms, these graphics illustrate the importance of better comprehending where grassroots innovations emerge...|$|R
