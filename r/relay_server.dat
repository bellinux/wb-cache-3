23|51|Public
25|$|For a 6to4 host to have {{fast and}} {{reliable}} connectivity {{with a host}} natively using the IPv6 Internet, both the 6to4 host and the native IPv6 host must have a route to a fast, reliable and correctly configured <b>relay</b> <b>server.</b> The 6to4 host's ISP can ensure that outgoing packets go to such a relay, {{but they have no}} control over the relay used for the responses from the native IPv6 host. A variant called IPv6 rapid deployment ("6rd") uses the same basic principles as 6to4 but uses a relay operated by the 6rd user's ISP for traffic in both directions. To achieve this an address block allocated by the user's ISP is used instead of 2002::/16.|$|E
2500|$|Most IPv6 {{networks}} use autoconfiguration, {{which requires}} the last 64 bits [...] for the host. [...] The first 64 bits are the IPv6 prefix. [...] The first 16 {{bits of the}} prefix are always 2002:, the next 32 bits are the IPv4 address, and the last 16 bits of the prefix are available for addressing multiple IPv6 subnets behind the same 6to4 router. [...] Since the IPv6 hosts using autoconfiguration already have determined the unique 64 bit host portion of their address, they must simply wait for a Router Advertisement indicating the first 64 bits of prefix to have a complete IPv6 address. [...] A 6to4 router will know to send an encapsulated packet directly over IPv4 if the first 16 bits are 2002, using the next 32 as the destination, or otherwise send the packet to a well-known <b>relay</b> <b>server,</b> which has access to native IPv6.|$|E
5000|$|Streamripper {{can also}} host a local <b>relay</b> <b>server</b> on a user {{specified}} port {{so that a}} user can listen to the stream while the recording is in progress ...|$|E
40|$|Store-and-forward MTA <b>relaying</b> <b>servers</b> have {{frequently}} presented problems to various antispam techniques, such as IPbased reputation or email authentication. Algorithms that find email <b>relaying</b> <b>servers</b> can use knowledge about a domain’s outbound IP addresses combined with cryptographic domain authentication frameworks such as DomainKeys. This paper presents one such algorithm. 1. Why find <b>relaying</b> <b>servers?</b> In this paper, the term relaying {{will be used}} to describe the situation where messages intended for an email user are systematically and automatically delivered to a non-local address. Many industry terms are used for this action: forwarding, redirection, lifetime email addresses, etc. The feature is prevalent in university’s alumni email accounts and Internet acces...|$|R
50|$|For example, World-Wide-Web servers {{operate on}} port 80, and email <b>relay</b> <b>servers</b> usually listen on port 25.|$|R
40|$|Abstract—With rising {{concerns}} on user privacy {{over the}} In-ternet, anonymous communication systems that hide {{the identity of}} a participant from its partner or third parties are highly desired. Existing approaches either rely on a relative small set of pre-selected <b>relay</b> <b>servers</b> to redirect the messages, or use structured peer-to-peer systems to multicast messages among a set of relay groups. The pre-selection approaches provide good anonymity, but suffer from node failures and scalability problem. The peer-to-peer approaches are subject to node churns and high maintenance overhead, which are the intrinsic problems of P 2 P systems. In this paper, we present CAT, a node-failure-resilient anony-mous communication protocol. In this protocol, <b>relay</b> <b>servers</b> are randomly assigned to relay groups. The initiator of a connection selects a set of relay groups instead of <b>relay</b> <b>servers</b> to set up anonymous paths. A valid path consists of <b>relay</b> <b>servers,</b> one from each selected relay group. The initiator explores valid anonymous paths via a probing process. Since the relative positions of <b>relay</b> <b>servers</b> in the path are commutative, there exist multiple anonymous yet commutative paths, which form an anonymous tunnel. When a connection encounters a node failure, it quickly switches to a nearest backup path in the tunnel through “path hopping”, without tampering the initiator or renegotiating the keys. Hence, the protocol is resilient to node failures. We also show that the protocol provides good anonymity even when facing types of active and passive attacks. Finally, the operating cost of CAT is analyzed and shown to be similar to other node-based anonymous communication protocols. I...|$|R
50|$|This technique, used by Cbox {{and other}} chat applications, {{makes use of}} the XMLSocket object in a single-pixel Adobe Flash movie. Under the control of JavaScript, the client {{establishes}} a TCP connection to a unidirectional relay on the server. The <b>relay</b> <b>server</b> does not read anything from this socket; instead it immediately sends the client a unique identifier. Next, the client makes an HTTP request to the web server, including with it this identifier. The web application can then push messages addressed to the client to a local interface of the <b>relay</b> <b>server,</b> which relays them over the Flash socket. The advantage {{of this approach is}} that it appreciates the natural read-write asymmetry that is typical of many web applications, including chat, and as a consequence it offers high efficiency. Since it does not accept data on outgoing sockets, the <b>relay</b> <b>server</b> does not need to poll outgoing TCP connections at all, making it possible to hold open tens of thousands of concurrent connections. In this model, the limit to scale is the TCP stack of the underlying server operating system.|$|E
5000|$|A MUA {{knows the}} {{outgoing}} mail SMTP server from its configuration. A <b>relay</b> <b>server</b> typically determines which server {{to connect to}} by looking up the MX (Mail eXchange) DNS resource record for each recipient's domain name. If no MX record is found, a conformant relaying server (not all are) instead looks up the A record. Relay servers can also be configured to use a smart host. A <b>relay</b> <b>server</b> initiates a TCP connection to the server on the [...] "well-known port" [...] for SMTP: port 25, or for connecting to an MSA, port 587. The main difference between an MTA and an MSA is that connecting to an MSA requires SMTP Authentication.|$|E
50|$|The {{network of}} community-contributed relay servers allows devices {{that are both}} behind {{different}} IPv4 NAT firewalls {{to be able to}} communicate by relaying encrypted data via a third party. The relaying performed is similar in nature to the TURN protocol, with the traffic TLS-encrypted end-to-end between devices (thus even the <b>relay</b> <b>server</b> cannot see the data, only the encrypted stream). Private relays can also be set up and configured, with or without public relays, if desired. Syncthing will automatically switch from relaying to direct device-to-device connections if it discovers that a direct connection has become available.|$|E
5000|$|Often blank spam headers appear truncated, {{suggesting}} that computer glitches, such as software bugs or other {{may have contributed}} to this problem—from poorly written spam software to malfunctioning <b>relay</b> <b>servers,</b> or any problems that may truncate header lines from the message body.|$|R
5000|$|... 6to4 is an Internet {{transition}} {{mechanism for}} migrating from Internet Protocol version 4 (IPv4) to version 6 (IPv6), {{a system that}} allows IPv6 packets to be transmitted over an IPv4 network (generally the IPv4 Internet) without the need to configure explicit tunnels. Special <b>relay</b> <b>servers</b> are also in place that allow 6to4 networks to communicate with native IPv6 networks.|$|R
5000|$|Miredo is a client, <b>relay</b> and <b>server</b> for Linux, *BSD and Mac OS X, ...|$|R
5000|$|Usage of the {{software}} in beta testing was offered initially by invitation only. Features included a 4-step slider which allowed adjusting communication speed, traded off against anonymity. Users were allowed to transfer 3 gigabytes of data on the network initially; additional traffic could be earned by setting up one's computer as a <b>relay</b> <b>server,</b> or could be paid for. The 2010 review on DownloadSquad pointed out, [...] "BitBlinder won't work without community participation: if there's no one online to help proxify torrent traffic." [...] The software was listed as the [...] "Download of the week" [...] by MaximumPC in 2010.|$|E
50|$|For a 6to4 host to have {{fast and}} {{reliable}} connectivity {{with a host}} natively using the IPv6 Internet, both the 6to4 host and the native IPv6 host must have a route to a fast, reliable and correctly configured <b>relay</b> <b>server.</b> The 6to4 host's ISP can ensure that outgoing packets go to such a relay, {{but they have no}} control over the relay used for the responses from the native IPv6 host. A variant called IPv6 rapid deployment ("6rd") uses the same basic principles as 6to4 but uses a relay operated by the 6rd user's ISP for traffic in both directions. To achieve this an address block allocated by the user's ISP is used instead of 2002::/16.|$|E
50|$|The lock can {{be either}} {{mechanical}} or electronic. The mechanical lock {{is based on the}} distribution of an RFID-tagged key from a pillar box dispenser. The electronic lock relies on an RFID reader on the bicycle, together with a keyboard for casual users. A long term member will simply flash the member card on the bike to unlock it while the casual user will purchase a code, by internet, SMS, at a counter, or from a credit-card pillar dispenser. One idea is to share costs of payment methods and of street furniture with other existing systems such as car park ticket machines or public transport ticket systems, which can host the radio <b>relay</b> <b>server.</b>|$|E
5000|$|Windows Server 2003 has a <b>relay</b> and <b>server</b> {{provided}} {{under the}} Microsoft Beta program.|$|R
2500|$|... 6to4 is an Internet {{transition}} {{mechanism for}} migrating from Internet Protocol version 4 (IPv4) to [...] version 6 (IPv6), {{a system that}} allows IPv6 packets to be transmitted over an IPv4 network (generally the IPv4 Internet) without the need to configure explicit tunnels. Special <b>relay</b> <b>servers</b> are also in place that allow 6to4 networks to communicate with native IPv6 networks.|$|R
50|$|The {{initiating}} host, the SMTP client, can {{be either}} an end-user's email client, functionally identified as a mail user agent (MUA), or a <b>relay</b> <b>server's</b> mail transfer agent (MTA), that is an SMTP server acting as an SMTP client, in the relevant session, in order to relay mail. Fully capable SMTP servers maintain queues of messages for retrying message transmissions that resulted in transient failures.|$|R
50|$|Most IPv6 {{networks}} use autoconfiguration, {{which requires}} the last 64 bits for the host. The first 64 bits are the IPv6 prefix. The first 16 {{bits of the}} prefix are always 2002:, the next 32 bits are the IPv4 address, and the last 16 bits of the prefix are available for addressing multiple IPv6 subnets behind the same 6to4 router. Since the IPv6 hosts using autoconfiguration already have determined the unique 64 bit host portion of their address, they must simply wait for a Router Advertisement indicating the first 64 bits of prefix to have a complete IPv6 address. A 6to4 router will know to send an encapsulated packet directly over IPv4 if the first 16 bits are 2002, using the next 32 as the destination, or otherwise send the packet to a well-known <b>relay</b> <b>server,</b> which has access to native IPv6.|$|E
50|$|The recent {{proliferation}} of symmetric NATs has reduced NAT traversal success rates in many practical situations, such as for mobile and public WiFi connections. Hole punching techniques, such as STUN and ICE, fail in traversing symmetric NATs {{without the help}} of a <b>relay</b> <b>server,</b> as is practiced in TURN. Techniques that traverse symmetric NATs by attempting to predict the next port to be opened by each NAT device were discovered in 2003 by Yutaka Takeda at Panasonic Communications Research Laboratory and in 2008 by researchers at Waseda University. Port prediction techniques are only effective with NAT devices that use known deterministic algorithms for port selection. This predictable yet non-static port allocation scheme is uncommon in large scale NATs such as those used in 4G LTE networks and therefore port prediction is largely ineffective on those mobile broadband networks.|$|E
40|$|P 2 P {{streaming}} application {{must realize}} {{network address translation}} (NAT) traversal. To handle low success ratio of the existing NAT traversal algorithm, UPnP-STUN (UPUN) and port-mapping sample estimation (PMSE) algorithm are recommended in this paper. UPUN is the combination of UPnP and STUN, and PMSE utilizes port mapping samples added by symmetric NAT for different sessions to estimate regularity of port mapping of symmetric NAT, which {{takes advantage of the}} Bernoulli law of large numbers. Besides, for the situation that both peers are behind NAT, and to handle heavy <b>relay</b> <b>server</b> load when many inner peers want to communicate with each other, a peer auxiliary-relay (PAR) algorithm is presented. PAR lets outer peers with sufficient bandwidth act as relay servers to alleviate pressure of real server, which could avoid NAT traversal failure caused by single point failure of <b>relay</b> <b>server.</b> Finally, experiments show that the proposed algorithms could improve the success ratio significantly for NAT traversal in P 2 P streaming application as well as improve P 2 P streaming application applicability. © by HIGH TECHNOLOGY LETTERS PRESS. P 2 P streaming application must realize network address translation (NAT) traversal. To handle low success ratio of the existing NAT traversal algorithm, UPnP-STUN (UPUN) and port-mapping sample estimation (PMSE) algorithm are recommended in this paper. UPUN is the combination of UPnP and STUN, and PMSE utilizes port mapping samples added by symmetric NAT for different sessions to estimate regularity of port mapping of symmetric NAT, which takes advantage of the Bernoulli law of large numbers. Besides, for the situation that both peers are behind NAT, and to handle heavy <b>relay</b> <b>server</b> load when many inner peers want to communicate with each other, a peer auxiliary-relay (PAR) algorithm is presented. PAR lets outer peers with sufficient bandwidth act as relay servers to alleviate pressure of real server, which could avoid NAT traversal failure caused by single point failure of <b>relay</b> <b>server.</b> Finally, experiments show that the proposed algorithms could improve the success ratio significantly for NAT traversal in P 2 P streaming application as well as improve P 2 P streaming application applicability. © by HIGH TECHNOLOGY LETTERS PRESS...|$|E
5000|$|... ng_teredo is a <b>relay</b> and <b>server</b> {{based on}} netgraph for FreeBSD from the LIP6 University and 6WIND.|$|R
5000|$|MM1: the {{interface}} between MMS User Agent and MMS Center (MMSC, {{the combination of the}} MMS <b>Relay</b> & <b>Server)</b> ...|$|R
5000|$|This system drew {{its name}} from [...] "relay race" [...] which shares a {{comparable}} behavior, where messages travel hop-by-hop along the network of <b>Relay</b> <b>servers</b> until they reached their destination. Messages sent within the United States would take {{a few seconds to}} reach their destinations, but communication times varied in other countries or internationally. If one or more network links were down, BITNET would store and forward the messages when the network links recovered, minutes or even hours later.|$|R
30|$|Yoon and Sim [21] {{present an}} {{automated}} network vulnerability assessment framework. It uses {{a combination of}} a scan manager, message <b>relay</b> <b>server</b> and scanners to check the hosts in a network for vulnerabilities. Their approach uses similar techniques as the ones presented, but it lacks the ability to work in a Cloud computing environment. It is neither able to control virtual machines, nor to instrument an IaaS solution like the XGE.|$|E
40|$|This {{document}} specifies extensions to the Host Identity Protocol (HIP) {{to facilitate}} Network Address Translator (NAT) traversal. The extensions {{are based on}} the use of the Interactive Connectivity Establishment (ICE) methodology to discover a working path between two end-hosts, and on standard techniques for encapsulating Encapsulating Security Payload (ESP) packets within the User Datagram Protocol (UDP). This document also defines elements of a procedure for NAT traversal, including the optional use of a HIP <b>relay</b> <b>server.</b> With these extensions HIP is able to work in environments that have NATs and provides a generic NAT traversal solution to higher-layer networking applications...|$|E
40|$|Abstract. With {{the rapid}} {{development}} of wireless network technology, wireless networks {{have been widely}} used in many fields due to the flexibility of wireless access. However, in the field of video transmission, because the link state is instability and the transmission is easily interfered in wireless networks, the quality of video transmission is affected badly. In fading and shadowing channels, some users can’t watch the video normally. This paper provides an adaptive QoS solution of real-time video stream in wireless network, by adding a <b>relay</b> <b>server</b> it can provide multicast or unicast video stream satisfying multiple QoS for users with different network state. This solution has been successfully applied in Qingdao Public safety emergency video surveillance system...|$|E
5000|$|Relay Spam Stopper (RSS), spam <b>relays,</b> e.g. hijacked <b>servers.</b>|$|R
50|$|Connections are DTLS-encrypted and {{established}} point-to-point. Where a point-to-point connection is not possible, TURN <b>relay</b> <b>servers</b> {{are used to}} route the audio. TURN servers in the US, UK and Japan are available, with an independent backup system being maintained at ipdtl2.com. Connections can also be made through a special URL that allows users to access another account and connect with it. ipDTL uses a proprietary signaling method but also supports SIP for interoperability with other devices and applications such as Comrex Access and Media5-fone, and can transcode between Opus, G.722 and G.711. This also allows for Interoperability with legacy ISDN hardware via cloud based bridging servers.|$|R
5000|$|Utilize {{a single}} network port, TCP/UDP port 52311, for all <b>server,</b> <b>relay,</b> and client {{communication}} ...|$|R
30|$|Besides, {{there are}} still many {{contents}} that should not be cached, for the sake of privacy and un-necessity. Some examples are private file sharing, Voice over NDN, live videos, and online games. For these contents, re-issuing the Interest is the only but evidently insufficient choice to support the consumer mobility, since these contents always have some requirements on the delay and reliability. A more challenging problem happens when the mobile consumer is a kind of high-speed vehicle. Without the help of caching or a nearby <b>relay</b> <b>server,</b> re-issuing the Interest cannot guarantee quality of the service and causes a great amount of needless retransmissions with corresponding data sending back. Thus, to improve the handover performance, locating mobile consumers is indispensable and the separation of the consumer identifier and locator is necessary as well.|$|E
40|$|The {{purpose of}} this study is to build a {{forecast}} system for predicting at minimum air temperature in the next morning from the meteorological data, such as air temperature, humidity, and the amount of solar radiation, in a field in the evening on the previous day. The meteorological data are sent to a <b>relay</b> <b>server,</b> and then, transferred to a PC in our laboratory of Okayama University by executing the computer program to import the data which are used to calculate the predicted values of minimum air temperature. The predicted minimum air temperatures are released for the farmers on the website in the server of Okayama University. The website is also created by our laboratory. As a result, the predicted minimum air temperatures agreed with the measured ones...|$|E
40|$|International audienceMany {{existing}} overlay {{networks are}} not practical {{on the open}} Internet {{because of the presence}} of Network Address Translation (NAT) devices and firewalls. In this paper, we introduce Usurp, a message routing infrastructure that enables communication between private nodes (behind NATs or firewalls) either by direct connectivity or relaying messages via public nodes (nodes that support direct connectivity). Usurp provides fully distributed NAT-type identification and NAT traversal services using a structured overlay network (SON) built using the public nodes in the system. Private nodes do not join the SON, instead, each private node is assigned a key in the SON’s address space and the public node(s) responsible for its key acts as both a rendezvous and <b>relay</b> <b>server</b> to the private node. Usurp is designed as a middleware that existing overlay networks can be built over, enabling them to function correctly in the presence of NATs. We evaluate Usurp using a gossip-based peer sampling service (PSS). Our results show that the PSS running over Usurp preserves its randomness properties and remains connected even in scenarios with high churn rates and where 80 % of the nodes are behind NATs. We also show that Usurp only adds a low and manageable overhead to public nodes...|$|E
5000|$|Internet forums {{often use}} a flood control {{mechanism}} to prevent too many messages from being posted at once, either to prevent spamming or denial-of-service attacks. Internet <b>Relay</b> Chat <b>servers</b> will often quit users performing IRC floods with an [...] "Excess Flood" [...] message.|$|R
40|$|Abstract—We present NetServ, a node {{architecture}} for deploying in-network {{services in}} the next generation Internet. NetServ-enabled network nodes provide a common execution environment, where network services implemented as modules can be dynamically installed and removed. We demonstrate three such modules. MicroCDN is a dynamic content distribution network (CDN) service which implements a content caching strategy specific to a content provider. The NAT Keep-alive module offloads the processing of keep-alive messages from SIP <b>servers.</b> The Media <b>Relay</b> module allows any NetServ node to act as a media relay, eliminating the need to manage standalone <b>relay</b> <b>servers.</b> NetServ aims to revive the Active Networking vision. It was too far ahead of its time a decade ago, but we believe its time has finally arrived. I...|$|R
50|$|Towards {{the end of}} 2008, nolithosting has {{acquired}} the ownership of Radio Pilipinas domain and got a shoutcast server installed {{in one of its}} collocated computers on a datacenter in Dallas, USA. The new development paved the way for Kuyakurt and Nolit to redevelop Radio Pilipinas as a full Internet radio running on shoutcast server. Radio Pilipinas is currently running on one source server with two backup servers all running on state of the art centovacast software. A total of 4 <b>relay</b> <b>servers</b> are also running - three are on 64kbit/s with hundreds of listener capacity. One server is on 32kbit/s which is intended for listeners with dial up connections. This server runs on a random playlist not synch with the main server but of similar content.|$|R
