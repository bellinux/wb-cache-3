41|193|Public
500|$|In December 2002, {{publisher}} Activision signed Stainless Steel to a multi-game contract, {{the first}} title {{of which was}} revealed to be Empires in February 2003. By April, the team estimated the game to be 60–70% finished. The engine used to create Empire Earth—later released under the name Titan 2.0—was retained and upgraded for Empires. Significantly more detail {{was added to the}} units' 3D models than had appeared in Empire Earth. Further additions included <b>reflection</b> <b>mapping,</b> environmental bump mapping and a new physics engine. According to Goodman, reusing the game engine enabled the team to place its full concentration on gameplay, without worrying about technological development. Another priority was storytelling, an element of the RTS game [...] (2002) particularly enjoyed by the Empires team.|$|E
500|$|Deathrow was {{developed}} by Southend Interactive and produced by Ubisoft Entertainment. Five friends opened Southend in Malmö, Sweden in 1998 to fulfill their childhood ambitions to make video games. Southend began Deathrow development in May 1999 and expected the game to be an online PC video game tentatively titled Blitz Disc Arena. The idea for the sports game descended {{from a combination of}} Speedball 2, the Quake and Unreal series, and Tekken. Southend's nine-person team received Xbox development kits in June 2000 and decided to move the game to console in early 2001. According to Southend animator Rodrigo Cespedes in a 2002 TeamXbox interview, [...] "Xbox was the only console that would allow [...] to produce the game as it was originally envisioned", adding that Microsoft and Ubisoft encouraged the mature direction with emphasis on blood, brutality, and profanity. Thus they began to port the game to the console for its feature capabilities, including vertex and pixel shaders for bump mapped environmental textures and character animations, specular lighting, and bumped <b>reflection</b> <b>mapping.</b>|$|E
50|$|In some cases, a hemicube {{may be used}} in {{environment}} mapping or <b>reflection</b> <b>mapping.</b>|$|E
40|$|In {{this work}} we {{introduce}} {{the family of}} <b>reflection</b> <b>maps,</b> a generalization of the families of fold and double-fold <b>maps.</b> Given a <b>reflection</b> group G acting on C^p, a <b>reflection</b> <b>map</b> f X→ C^p is the composition of an embedding h X C^p with the orbit map ω C^p→ C^p that maps the G-orbit of a point to a single point. We give obstructions to stability and A-finiteness of <b>reflection</b> <b>maps</b> and produce, in the non-obstructed cases, infinite families of A-finite map-germs of any corank and with unbound order. We also show that <b>reflection</b> <b>maps</b> satisfy the following extension of a conjecture by Lê: there is no injective map-germ (C^n, 0) → (C^p, 0) of corank greater than p-n. Comment: 40 pages, 11 figures. Comments are welcome. Changes in version 2 : Improved results in Sections 13 and 15. Introduction and Final Remarks sections rewritten. Fixed typo...|$|R
40|$|The set-theoretical {{reflection}} equation and its solutions, the <b>reflection</b> <b>maps,</b> {{recently introduced}} {{by two of}} the authors, is presented in general and then applied in the context of quadrirational Yang-Baxter maps. We provide a method for constructing <b>reflection</b> <b>maps</b> and we obtain a classification of solutions associated to all the families of quadrirational Yang-Baxter maps that have been classified recently...|$|R
5000|$|... map_Ka -o 1 1 1 ambient.tga # texture origin (1,1,1) [...] refl -type sphere clouds.tga # spherical <b>reflection</b> <b>map</b> ...|$|R
50|$|<b>Reflection</b> <b>mapping</b> {{is also a}} {{traditional}} image-based lighting technique for creating reflections of real-world backgrounds on synthetic objects.|$|E
50|$|In {{computer}} graphics, environment mapping, or <b>reflection</b> <b>mapping,</b> is {{an efficient}} image-based lighting technique for approximating {{the appearance of}} a reflective surface by means of a precomputed texture image. The texture is used to store the image of the distant environment surrounding the rendered object.|$|E
50|$|Occlusion {{optimizations}} {{based on}} viewpoint geometry may introduce artifacts if the scene contains reflective surfaces. A common technique, <b>reflection</b> <b>mapping,</b> can optionally use existing occlusion estimates {{from the viewpoint}} of the main view frustum; or, if performance allows, a new occlusion map can be computed from a separate camera position.|$|E
40|$|Given a {{reflection}} group G {{acting on a}} complex vector space V, a <b>reflection</b> <b>map</b> is the composition of an embedding X V with the orbit map V→ C^p that maps a G-orbit to a point. <b>Reflection</b> <b>maps</b> can be very singular, but we give tools to study them easily. We find obstructions to A-stability of <b>reflection</b> <b>maps</b> and produce, in the unobstructed cases, infinite families of A-finite map-germs of any corank. We also relate them to conjectures of Lê, Mond and Ruas. Comment: 33 pages, 11 figures. Comments are welcome. Changes in Version 3 : Major revision of the exposition, clearer and simplified. Division into sections changed. Introduction, Final Remarks and other parts rewritten. Typos fixed. Changes in version 2 : Improved results in Sections 13 and 15. Introduction and Final Remarks sections rewritten. Fixed typo...|$|R
40|$|The {{quantitative}} {{measurement of}} {{areas on the}} cervix is of interest to researchers studying {{the natural history of}} human papilloma viral lesions. Measurement of areas from images obtained through a colposcope are, however, inherently in error due to the image being a two-dimensional projection of a threedimensional object. The ability to correct for these errors through use of digital imaging colposcopy and a practical application of a shape from shading algorithm was developed in this study. The shape from shading technique requires empirical measurement of the relationship between observed light intensity and the viewing angle (referred to as a <b>reflection</b> <b>map).</b> It was found that a population mean <b>reflection</b> <b>map</b> provided a correction that was about as accurate as using an individual's own <b>reflection</b> <b>map</b> (making it unnecessary to measure a map for each exam). Digital red filtering of the images increased accuracy and precision of measurement...|$|R
40|$|Blinn and Newell {{introduced}} <b>reflection</b> <b>maps</b> {{for computer}} simulated mirror highlights. This paper extends their method {{to cover a}} wider class of reflectance models. Panoramic images of real, painted and simulated environments are used as illumination maps that are convolved (blurred) and transformed to create <b>reflection</b> <b>maps.</b> These tables of reflected light values are used to efficiently shade objects in an animation sequence. Shaders based on point illumination may be improved in a straightforward manner to use <b>reflection</b> <b>maps.</b> Shading is by table-lookup, {{and the number of}} calculations per pixel is constant regardless of the complexity of the reflected scene. Antialiased mapping further improves image quality. The resulting pictures have many of the reality cues associated with ray-tracing but at greatly reduced computational cost. The geometry of highlights is less exact than in ray-tracing, and multiple surface reflections are not explicitly handled. The color of diffuse reflections can be rendered more accurately than in ray-tracing...|$|R
50|$|Texture mapping {{originally}} {{referred to}} a method (now more accurately called diffuse mapping) that simply wrapped and mapped pixels from a texture to a 3D surface. In recent decades the advent of multi-pass rendering and complex mapping such as height mapping, bump mapping, normal mapping, displacement mapping, <b>reflection</b> <b>mapping,</b> specular mapping, mipmaps, occlusion mapping, and many other variations on the technique (controlled by a materials system) {{have made it possible}} to simulate near-photorealism in real time by vastly reducing the number of polygons and lighting calculations needed to construct a realistic and functional 3D scene.|$|E
5000|$|In {{computer}} graphics, sphere mapping (or spherical environment mapping) {{is a type}} of <b>reflection</b> <b>mapping</b> that approximates reflective surfaces {{by considering}} the environment to be an infinitely far-away spherical wall. This environment is stored as a texture depicting what a mirrored sphere would look like if it were placed into the environment, using an orthographic projection (as opposed to one with perspective). This texture contains reflective data for the entire environment, except for the spot directly behind the sphere. (For one example of such an object, see Escher's drawing Hand with Reflecting Sphere.) ...|$|E
50|$|In December 2002, {{publisher}} Activision signed Stainless Steel to a multi-game contract, {{the first}} title {{of which was}} revealed to be Empires in February 2003. By April, the team estimated the game to be 60-70% finished. The engine used to create Empire Earth—later released under the name Titan 2.0—was retained and upgraded for Empires. Significantly more detail {{was added to the}} units' 3D models than had appeared in Empire Earth. Further additions included <b>reflection</b> <b>mapping,</b> environmental bump mapping and a new physics engine. According to Goodman, reusing the game engine enabled the team to place its full concentration on gameplay, without worrying about technological development. Another priority was storytelling, an element of the RTS game Warcraft III: Reign of Chaos (2002) particularly enjoyed by the Empires team.|$|E
40|$|This {{thesis is}} {{focusing}} on boundary problems for various classical integrable schemes. First, we consider the vector nonlinear Schrodinger (NLS) equation on the halfline. Using a Backlund transformation method which explores the folding symmetry of the system, classes of integrable boundary conditions (BCs) are derived. These BCs coincide with the linearizable BCs obtained using the unified transform method developed by Fokas. The notion of integrability is argued by constructing an explicit generating function for conserved quantities. Then, by adapting a mirror image technique, an inverse scattering method with an integrable boundary is constructed {{in order to obtain}} N-soliton solutions on the half-line, i. e. N-soliton reflections. An interesting phenomenon of transmission between different components of vector solitons before and after interacting with the boundary is demonstrated. Next, {{in light of the fact}} that the soliton-soliton interactions give rise to Yang-Baxter maps, we realize that the soliton-boundary interactions that are extracted from the N-soliton reflections can be translated into maps satisfying the set-theoretical counterpart of the quantum reflection equation. Solutions of the set-theoretical reflection equation are referred to as <b>reflection</b> <b>maps.</b> Both the Yang-Baxter <b>maps</b> and the <b>reflection</b> <b>maps</b> guarantee the factorization of the soliton-soliton and soliton-boundary interactions for vector NLS solitons on the half-line. Indeed, <b>reflection</b> <b>maps</b> represent a novel mathematical structure. Basic notions such as parametric <b>reflection</b> <b>maps,</b> their graphic representations and transfer maps are also introduced. As a natural extension, this object is studied in the context of quadrirational Yang-Baxter maps, and a classification of quadrirational <b>reflection</b> <b>maps</b> is obtained. Finally, boundaries are added to discrete integrable systems on quad-graphs. Triangle configurations are used to discretize quad-graphs with boundaries. Relations involving vertices of the triangles give rise to boundary equations that are used to described BCs. We introduce the notion of integrable BCs by giving a three-dimensional boundary consistency as a criterion for integrability. By exploring the correspondence between the quadrirational Yang-Baxter maps and the so-called ABS classification, we also show that quadrirational <b>reflection</b> <b>maps</b> can be used as a systematic tool to generate integrable boundary equations for the equations from the ABS classification. EThOS - Electronic Theses Online ServiceGBUnited Kingdo...|$|R
40|$|Based {{on recent}} results {{obtained}} by the authors on the inverse scattering method of the vector nonlinear Schrödinger equation with integrable boundary conditions, we discuss the factorization of the interactions of N-soliton solutions on the half-line. Using dressing transformations combined with a mirror image technique, factorization of soliton-soliton and soliton-boundary interactions is proved. We discover a new object, which we call <b>reflection</b> <b>map,</b> that satisfies a set-theoretical reflection equation which we also introduce. Two classes of solutions for the <b>reflection</b> <b>map</b> are constructed. Finally, basic aspects {{of the theory of}} set-theoretical reflection equations are introduced. Comment: 29 pages. Featured article in Nonlinearit...|$|R
5000|$|The {{categories}} of elementary abelian groups, abelian p-groups, and p-groups are all reflective sub{{categories of}} the category of groups, and the kernels of the <b>reflection</b> <b>maps</b> are important objects of study; see focal subgroup theorem.|$|R
50|$|The <b>reflection</b> <b>mapping</b> {{approach}} {{is more efficient}} than the classical ray tracing approach of computing the exact reflection by tracing a ray and following its optical path. The reflection color used in the shading computation at a pixel is determined by calculating the reflection vector at the point on the object and mapping it to the texel in the environment map. This technique often produces results that are superficially similar to those generated by raytracing, but is less computationally expensive since the radiance value of the reflection comes from calculating the angles of incidence and reflection, followed by a texture lookup, rather than followed by tracing a ray against the scene geometry and computing the radiance of the ray, simplifying the GPU workload.|$|E
50|$|The engine {{received}} {{a variety of}} significant upgrades, including pre-baked Global Illumination, <b>reflection</b> <b>mapping,</b> volumetric fog, dynamic weather, and dynamic foliage to name but a few examples. For Unity {{there has been a}} similar upgrade, advanced control mechanics with Physically Based Rendering (PBR) being the stand-out addition, enabling materials, objects and surfaces to look and react more realistically to lighting, shading and shadowing. Furthermore, the Global Illumination system is now more realistic with the addition of volumetric technology, physics-led objects react more realistically, and cloth behaves in a realistic manner on the protagonist, in the environment, and on other characters. The world now supports larger landmasses, more objects, bigger buildings, building interiors that can be accessed without loading screens, and many other additions that enhance visual fidelity, immersion, and the gameplay.|$|E
50|$|The {{game was}} {{developed}} using Softimage for {{creation of the}} game's art, and a custom engine built to handle the art aesthetic and limitations of the Wii's memory. The game's sets are completely modeled with complex lighting features, but only normal maps are used to draw the game, avoiding the high-processing costs of light maps or layered textures. This also allowed the game's artists to have finer control of visibility and color balance in the game. Though the developers attempted to add <b>reflection</b> <b>mapping</b> into the game, they found it did not fit well with the comic-book style and dropped it. Explosions and other effects, normally created in other games using particle effects to achieve a factor of realism, were also modeled with particles in MadWorld, but using specially-designed images to retain the comic book style.|$|E
40|$|A <b>reflection</b> <b>map</b> on the nonnegative orthant {{is applied}} to a multivariate process X with X(0) = 0 {{and then to a}} + X, where a is a nonnegative {{constant}} vector. The open question is whether {{the difference between the two}} resulting processes converges to zero as time diverges. This in turn implies that if one imposes enough stochastic structure that ensures that the <b>reflection</b> <b>map</b> applied to X converges in distribution then it will also converge in distribution when it {{is applied to}} Y + X where Y is any almost surely finite valued random vector that may even depend on the process X. ...|$|R
5000|$|However, in most {{circumstances}} a <b>mapped</b> <b>reflection</b> {{is only an}} {{approximation of}} the real <b>reflection.</b> Environment <b>mapping</b> relies on two assumptions that are seldom satisfied: ...|$|R
5000|$|Let K have {{characteristic}} {{not equal}} to 2. Let Q be a quadratic {{form on the}} vector space V over K with associated bilinear form Q(x,y) = Q(x+y) − Q(x) − Q(y) and distinguished element e such that Q(e,.) is not trivial. We define a <b>reflection</b> <b>map</b> x* by ...|$|R
5000|$|Deathrow was {{developed}} by Southend Interactive and produced by Ubisoft Entertainment. Five friends opened Southend in Malmö, Sweden in 1998 to fulfill their childhood ambitions to make video games. Southend began Deathrow development in May 1999 and expected the game to be an online PC video game tentatively titled Blitz Disc Arena. The idea for the sports game descended {{from a combination of}} Speedball 2, the Quake and Unreal series, and Tekken. Southend's nine-person team received Xbox development kits in June 2000 and decided to move the game to console in early 2001. According to Southend animator Rodrigo Cespedes in a 2002 TeamXbox interview, [...] "Xbox was the only console {{that would allow them to}} produce the game as it was originally envisioned", adding that Microsoft and Ubisoft encouraged the mature direction with emphasis on blood, brutality, and profanity. Thus they began to port the game to the console for its feature capabilities, including vertex and pixel shaders for bump mapped environmental textures and character animations, specular lighting, and bumped <b>reflection</b> <b>mapping.</b>|$|E
5000|$|Unity is an {{all purpose}} game engine that {{supports}} 2D and 3D graphics, {{drag and drop}} functionality and scripting through C#. Two other programming languages were supported: Boo, which was deprecated with release of Unity 5 [...] and UnityScript which was deprecated in August 2017 {{after the release of}} Unity 2017.1. UnityScript is a proprietary scripting language which is syntactically similar to JavaScript. The engine targets the following graphics APIs: Direct3D on Windows and Xbox One; OpenGL on Linux, macOS, and Windows; OpenGL ES on Android and iOS; WebGL on the web; and proprietary APIs on the video game consoles. Additionally, Unity supports the low-level APIs Metal on iOS and macOS and Vulkan on Android, Linux, and Windows, as well as Direct3D 12 on Windows and Xbox One. Within 2D games, Unity allows importation of sprites and an advanced 2D world renderer. For 3D games, Unity allows specification of texture compression and resolution settings for each platform that the game engine supports, and provides support for bump mapping, <b>reflection</b> <b>mapping,</b> parallax mapping, screen space ambient occlusion (SSAO), dynamic shadows using shadow maps, render-to-texture and full-screen post-processing effects. Unity also offers services to developers, these are: Unity Ads, Unity Analytics, Unity Certification, Unity Cloud Build, Unity Everyplay, Unity IAP, Unity Multiplayer, Unity Performance Reporting and Unity Collaborate.|$|E
40|$|Abstract: This paper {{presents}} a new technique, {{which we call}} depth-preserving <b>reflection</b> <b>mapping,</b> to render mirror-like reflections on planar surfaces in constant time. It is a hybrid solution which combines geometry-based rendering and imagebased rendering into a two-pass mirror reflection rendering approach. The technique extends the traditional <b>reflection</b> <b>mapping</b> to preserve depth per texel and uses forward warping to approximate the mirror-like reflections on planar surfaces. For clarity, to distinguish these texels from the ones of traditional <b>reflection</b> <b>mapping,</b> we call them zexels. ...|$|E
2500|$|When a user makes a building, model, or {{any other}} kind of object in Revit, they may use Revit's {{rendering}} engine to make a more realistic image of what is otherwise a very diagrammatic model. This is accomplished by either using the premade model, wall, floor, etc., tools, or making her or his own models, walls, materials, etc. Revit 2010 comes with a plethora of predefined materials, each of which can be modified to the user's desires. The user can also begin with a [...] "Generic" [...] material. With this, the user can set the rotation, size, brightness, and intensity of textures, gloss maps (also known as shinemaps), transparency <b>maps,</b> <b>reflection</b> <b>maps,</b> oblique <b>reflection</b> <b>maps,</b> hole maps, and bump maps, as well as leaving the map part out and just using the sliders for any one (or all or none) of the aforementioned features of textures.|$|R
5000|$|Seismic <b>reflection</b> (surface)- <b>mapping</b> top of bedrock, {{boundaries}} of faults and fracture zones, and stratigraphy ...|$|R
5000|$|... #Caption: A glide <b>reflection</b> will <b>map</b> {{a set of}} {{left and}} right {{footprints}} into each other ...|$|R
40|$|This paper {{presents}} a new technique, {{which we call}} depth-preserving <b>reflection</b> <b>mapping,</b> to render mirror-like reflections on planar surfaces in constant time. It is a hybrid solution which combines geometry-based rendering and imagebased rendering into a two-pass mirror reflection rendering approach. The technique extends the traditional <b>reflection</b> <b>mapping</b> to preserve depth per texel and uses forward warping to approximate the mirror-like reflections on planar surfaces. For clarity, to distinguish these texels from the ones of traditional <b>reflection</b> <b>mapping,</b> we call them zexels. 1 Introduction Architectural walkthrough applications enable the user to interact in real-time with computer-simulated environments [5]. An important goal is to represent the rich visual complexity of the scenes. Such complexity is usually achieved with realistic illumination and shading models to generate images of the scene. Unfortunately, interactive walkthrough applications trade photo-realism f [...] ...|$|E
40|$|In {{this paper}} we derive an {{alternative}} representation for {{the reflection of}} a continuous, bounded variation process. Under stationarity assumptions we prove a continuous counterpart of Little's law of classical queueing theory. These results, together with formulas from Palm calculus, are used to explain the method for the derivation of the mean value of a buffer fed by a special type stochastic fluid arrival process. Fluid queues <b>Reflection</b> <b>mapping</b> Conservation laws Palm probabilities...|$|E
40|$|Compression {{and data}} path {{simplification}} {{in the context}} of texture and bump mapping hardware opens new solutions ranging from low-cost to very-high-quality raster engines for real-time photorealistic rendering. An application-specific integrated circuit (ASIC) is specified, where bump- and <b>reflection</b> <b>mapping</b> of textured surfaces is executed by a dedicated decoding and shading circuitry. This report addresses the interface and design synthesis issues of a circuit prototype and test environment. (orig.) SIGLEAvailable from TIB Hannover: RR 4367 (98 - 16) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekDEGerman...|$|E
50|$|Version 1 {{does not}} support polygons other than triangles, or NURBs, {{or other forms of}} {{modeling}} other than polygonal and splines. It comes with filters to import and export meshes of other formats. However, there are more formats other than the included ones for download in various websites. ZModeler does not have a lighting system, although lighting can be made by using gradients for <b>reflection</b> <b>maps.</b>|$|R
40|$|In {{this paper}} we study the {{boundary}} characteristics of reflected di#usions with jumps in the positive orthant. We consider a model with oblique reflections {{and study the}} <b>reflection</b> <b>map</b> {{in terms of the}} local time at the boundary (or reflection) faces of +. In particular, we show that these last processes coincide (up to a multiplicative constant) and that they do not charge the set of times spent by the reflected di#usion in the intersection of two or more boundary faces, so generalizing some of the results that have been shown for semi-martingale reflecting Brownian motions (SRBMs) on the orthant. Moreover, we show that the probability distribution of the reflected di#usion at time t is null over any region contained in the boundary faces, for Lebesgue-a. e. t in, under mild conditions on the di#usion matrix. The paper concludes with extending the results to hyper-rectangles in the positive orthant. Key words: Di#usions, jumps, <b>reflection</b> <b>maps,</b> local time, semi-martingales PACS: 60 J 50, 60 J 55, 60 J 60, 60 J 75, 90 B 22...|$|R
40|$|Interaction of {{a domain}} wall with {{boundaries}} {{of a system}} is studied for a class of stochastic driven particle models. <b>Reflection</b> <b>maps</b> are introduced for the description of this process. We show that, generically, a domain wall reflects infinitely many times from the boundaries before a stationary state can be reached. This is in an evident contrast with one-species models where the stationary density is attained after just one reflection. Comment: 11 pages, 8 eps figs, to appearin JPhysA 01. 200...|$|R
