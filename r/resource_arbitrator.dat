3|2|Public
40|$|Abstract—Typical rate-based traffic {{management}} schemes for real-time applications attempt to allocate resources by controlling the packet delivery to the <b>resource</b> <b>arbitrator</b> (scheduler). This control is typically {{based only on}} the characteristics of the particular (tagged) traffic stream and would fail to optimally adjust to nonnominal network conditions such as overload. In this paper, a dynamic regulation and scheduling (dynamic-R&S) scheme is proposed whose regulation function is modulated by both the tagged stream’s characteristics and information capturing the state of the coexisting applications as provided by the scheduler. The performance of the proposed scheme—versus an equivalent static one—is investigated under both underload and overload traffic conditions. The substantially better throughput/jitter characteristics of the dynamic-R&S scheme are established. Index Terms—Delay variance, dynamic policy, QoS, regulation, scheduling, throughput...|$|E
40|$|Typical rate-based traffic {{management}} schemes for real-time applications attempt to allocate resources by controlling the packet delivery to the <b>resource</b> <b>arbitrator</b> (scheduler). This control is typically {{based only on}} the characteristics of the particular (tagged) traffic stream and would fail to optimally adjust to non-nominal network conditions such as overload. In this paper, a dynamic Regulation and Scheduling (dynamic-R&S) scheme is proposed whose regulation function is modulated by both the tagged stream's characteristics and some information capturing the state of the co-existing applications as provided by the scheduler. The performance of the proposed scheme [...] as well as the equivalent static one [...] is investigated under both underload and overload traffic conditions and the substantially better throughput / jitter characteristics of the dynamic-R&S scheme are established. Please send correspondence to: Prof. Ioannis Stavrakakis ECE Dept., 409 Dana Building, Northeastern Uni [...] ...|$|E
40|$|Computer systems {{today are}} managed by human administrators who are {{required}} to continuously observe the system, analyze its behavior, and activate corrective actions (generally {{referred to as the}} Observe-Analyze-Act loop). Automating the OAA loop within real-world systems is a non-trivial problem, but the growing economic incentive associated with making systems self-managing, and significant increase in the computation bandwidth have made OAA automation a promising area of research. The existing choices for OAA automation can be characterized as one of the following: policy-based, feedback-based, empirical or learning-based, and model-based - the available solutions suffer from complexity, brittleness, slow convergence, and have been useful to automate only trivial management scenarios. This thesis proposes Polus: a methodology for OAA automation using a a model-based approach with integrated learning and feedback. Polus uses models of system behavior for deciding the corrective action to be invoked - it continuously refines models using monitor data, exhaustively searches for an optimal corrective action using constrained optimization, and executes the selected action using a variably aggressive feedback loop. The core architecture of Polus closely resembles that of an Expert System: A Knowledge-base of models for components, workloads, actions, and a Reasoning engine that selects and executes a "feasible" action at run- time. The details of the Polus methodology consist of: Representation of domain-specific details as models; creation and evolution of these models in an automated fashion; decision-making for the corrective action(s) to be invoked at run-time; handling divergent system behavior during action execution. Polus is the first-of-a-kind in using a model-based approach for OAA automation; by applying the following operational principles, Polus addresses challenges related to model inaccuracies in real- world systems, and the computational complexity of decision- making: 1) Models don't need to be perfectly accurate - they only need to be accurate enough to maintain the relative ordering during action selection; 2) The objective of action selection is not to find the most optimal one, but rather to avoid the worst ones; 3) Creation of models is not a one-time activity - it is a continuous process over the lifetime of the system. The Polus approach was built and evaluated as an OAA framework for a production storage system (having a limited set of corrective actions). The prototype implementation (referred to as Chameleon) is a <b>resource</b> <b>arbitrator</b> that manages assignment of available storage resources to the host workloads. This mapping must ensure that a minimal number of workloads fail to meet their behavior goals (a QoS violation). Chameleon optimizes the overall system utility by automated invocation of the throttle and unthrottle corrective actions. In our experiments, Chameleon identified, analyzed, and corrected performance violations in 3 - 14 minutes which compares very favorably with the time a human administrator would have needed. Further, the self-evolving aspect of Chameleon facilitated deployment for large-scale storage systems that service variable workloads on an ever-changing mix of device types. This thesis is a starting point for applying model-based OAA automation to production systems. We have demonstrated the feasibility of our approach in the context of action sets that have a relatively low resource overhead for invocation, and whose effects can be easily reversed. Several research issues remain to be addressed before Polus can be applied to systems with a wider cost-benefit spectrum of corrective actions; we discuss these issues {{within the context of the}} existing design details of Polus...|$|E
50|$|Prior to {{joining the}} bench, {{she worked with}} the State Attorney General’s office, New York City Human <b>Resources</b> Administration, an <b>arbitrator</b> for the Small Claims Division of the Civil Court, an {{attorney}} in private practice and as an Administrative Law Judge for the New York State Department of Health. She subsequently served on the New York City Civil Court from 1982 to 1987. She was a New York Supreme Court Justice, from 1987 to 2008 {{and sat on the}} Commercial Division from 2001 until her appointment in January 2008. She was designated as a Justice for the Appellate Division, First Judicial Department in 2008 by Governor Eliot Spitzer.|$|R
40|$|Abstract — Extensive {{research}} on system support for enabling I/O-intensive applications to achieve performance {{close to the}} limits imposed by the hardware suggests two main approaches: Low overhead I/O protocols and the flexibility to customize I/O policies {{to the needs of}} applications. One way to achieve both is by supporting user-level access to I/O devices, enabling user-level implementations of I/O protocols. User-level networking is an example of this approach, specific to network interface controllers (NICs). In this paper, we argue that the real key to high-performance in I/O-intensive applications is user-level file caching and user-level network buffering, both of which can be achieved without user-level access to NICs. Avoiding the need to support user-level networking carries two important benefits for overall system design: First, a NIC exporting a privileged kernel interface is simpler to design and implement than one exporting a user-level interface. Second, the kernel is re-instated as a global system <b>resource</b> controller and <b>arbitrator.</b> We develop an analytical model of network storage applications and use it to show that their performance is not affected by the use of a kernel-based API to NICs. I...|$|R

