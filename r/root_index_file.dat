0|1144|Public
40|$|Abstract:- In this paper, a novel {{scheme for}} vector {{quantization}} (VQ) is proposed. A <b>file</b> called visible <b>index</b> <b>file</b> {{is used to}} record the coding result. The decompressed image reconstructed from the visible <b>index</b> <b>file</b> {{is the same as}} the one recovered using traditional VQ index file; however, the visible <b>index</b> <b>file</b> looks like the original image, and is therefore more convenient for the management of <b>index</b> <b>files.</b> Also, note that the size of the visible <b>index</b> <b>file</b> is the same as that of the traditional <b>index</b> <b>file.</b> Key-words: vector quantization, sorted codebook, visible <b>index</b> <b>files.</b> ...|$|R
40|$|An {{indexing}} system, {{including a}} server for {{providing access to}} at least one site, a server agent for creating an <b>index</b> <b>file</b> of data relating to the site, and a central index for storing index information from the <b>index</b> <b>file.</b> The server agent initiates communication with the central index to transfer the <b>index</b> <b>file</b> from the server agent to the central index...|$|R
50|$|Support for <b>indexed</b> <b>files</b> {{is built}} into COBOL and PL/I. Other {{languages}} with more limited I/O facilities such as C support <b>indexed</b> <b>files</b> through add-on packages in a runtime library such as C-ISAM.|$|R
50|$|Sitemap files have a {{limit of}} 50,000 URLs and 50MiB per sitemap. Sitemaps can be {{compressed}} using gzip, reducing bandwidth consumption. Multiple sitemap files are supported, with a Sitemap <b>index</b> <b>file</b> serving as an entry point. Sitemap <b>index</b> <b>files</b> may not list more than 50,000 Sitemaps and must be no larger than 50MiB (52,428,800 bytes) and can be compressed. You can {{have more than one}} Sitemap <b>index</b> <b>file.</b>|$|R
50|$|Because the <b>index</b> <b>files</b> were so small, they {{minimized}} {{the amount of}} extra data {{that had to be}} downloaded from Usenet to verify that the data files were all present and undamaged, or to determine how many parity volumes were required to repair any damage or reconstruct any missing files. They were most useful in version 1 where the parity volumes were much larger than the short <b>index</b> <b>files.</b> These larger parity volumes contain the actual recovery data along with a duplicate copy of the information in the <b>index</b> <b>files</b> (which allows them to be used on their own to verify the integrity of the data files if there is no small <b>index</b> <b>file</b> available).|$|R
5000|$|Handy Backup stores {{information}} about each backup task in <b>index</b> <b>files</b> {{of its own}} [...]HBI format. Each <b>index</b> <b>file</b> contains the list of files, their sizes, time of creation, time of last modification, file attributes, and other data. It also includes {{a reference to the}} previous <b>index</b> <b>file</b> and is renewed with each execution of the task, which enables doing incremental and differential backup and save only changes. In Handy Backup, incremental backup is made on file level and differential backup is made on byte level.|$|R
50|$|Creates an <b>index</b> <b>file,</b> sorted.bam.bai for the sorted.bam file.|$|R
5000|$|The search option {{allows a}} simple {{search of a}} central <b>INDEX</b> <b>file.</b> This <b>INDEX</b> <b>file</b> is one-line-per-resource, and is a flat file that the Hytelnet client {{searches}} directly. After entering a term, the client returns a new menu with the list of selectable items, for example this query [...] "library": ...|$|R
50|$|Creates an <b>index</b> <b>file</b> for the macOS {{built-in}} Help Viewer.|$|R
5000|$|Handling {{of static}} <b>files,</b> <b>index</b> <b>files,</b> auto-indexing and content {{negotiation}} ...|$|R
50|$|Par2 files {{generally}} {{use this}} naming/extension system: filename.vol000+01.PAR2, filename.vol001+02.PAR2, filename.vol003+04.PAR2, filename.vol007+06.PAR2, etc. The +01, +02, etc. in the filename indicates how many blocks it contains, and the vol000, vol001, vol003 etc. indicates {{the number of}} the first recovery block within the PAR2 <b>file.</b> If an <b>index</b> <b>file</b> of a download states that 4 blocks are missing, the easiest way to repair the files would be by downloading filename.vol003+04.PAR2. However, due to the redundancy, filename.vol007+06.PAR2 is also acceptable. There is also an <b>index</b> <b>file</b> filename.PAR2, it is identical in function to the small <b>index</b> <b>file</b> used in PAR1.|$|R
5000|$|Tag <b>index</b> <b>files</b> are {{supported}} by many source code editors, including: ...|$|R
40|$|An {{assessment}} of alternative methods of filing histopathology report forms {{in alphabetical order}} showed that orthodox card <b>index</b> <b>filing</b> is satisfactory up to about 100000 reports but, {{because of the need}} for long-term retrieval, when the reports filed exceed this number they should be copied on jacketed microfilm and a new card <b>index</b> <b>file</b> begun...|$|R
40|$|A {{parallel}} database {{is developed}} {{to improve the}} DR-LINK information retrieval system. DR-LINK is a system which finds the documents most relevant to a user's natural language queries. Relevant documents are found by analyzing <b>index</b> <b>files.</b> <b>Index</b> <b>files</b> contain weighted lists of key words and phrases and other characteristics of the document. The distinguishing information of the queries are matched with the <b>index</b> <b>files</b> {{in order to find}} the most relevant documents to the user. The work requires transforming the current vector-implementation of <b>index</b> <b>files</b> into a parallel database, an innovation which should have several positive effects on the system. Results include a test on performance and a test to find whether this new implementation is a better way to add new documents to the system. Future work will include testing on whether the database provides a way to detect new information about linguistic patterns...|$|R
50|$|In recent systems {{relational}} databases {{are often}} used in place of <b>indexed</b> <b>files.</b>|$|R
50|$|The <b>index</b> <b>file</b> {{contains}} {{the most basic}} information about a Files-11 volume set.|$|R
5000|$|The COBOL {{language}} supports <b>indexed</b> <b>files</b> {{with the}} following command in the [...] section ...|$|R
5000|$|KEYSORT, {{to reorganize}} an <b>indexed</b> <b>file,</b> {{rebuilding}} the key index area for greater efficiency.|$|R
40|$|Stackable file {{systems can}} provide {{extensible}} file system functionality with minimal performance overhead and development cost. However, previous approaches {{are limited in}} the functionality they provide. In particular, they do not support size-changing algorithms, which are important and useful for many applications, such as compression and security. We propose fast <b>index</b> <b>files,</b> a technique for efficient support of size-changing algorithms in stackable <b>file</b> systems. Fast <b>index</b> <b>files</b> provide a page mapping between file system layers {{in a way that}} can be used with any size-changing algorithm. <b>Index</b> <b>files</b> are designed to be recoverable if lost and add less than 0. 1 % disk space overhead. We have implemented fast indexing using portable stackable templates, and we have used this system to build several example file systems with size-changing algorithms. We demonstrate that fast <b>index</b> <b>files</b> have very low overhead for typical workloads, only 2. 3 % over other stacked file systems. Our system ca [...] ...|$|R
5000|$|...IND (Optional <b>index</b> <b>file</b> for tabular data. This {{is present}} if any columns are indexed).|$|R
5000|$|IV A 6 (<b>Index,</b> <b>files,</b> {{protective}} custody): SS-Sturmbannf√ºhrer, {{government and}} police superintendent Dr. Emil Berndorff ...|$|R
5000|$|... 1The NAICS <b>Index</b> <b>File</b> lists 19745 rubrics {{beyond the}} 6 digits {{which are not}} {{assigned}} codes.|$|R
50|$|Memopal has a cloud search {{functionality}} {{similar to}} Google desktop to <b>index</b> <b>files</b> with a relevance metric {{based on how}} the user interacts with <b>files.</b> It currently <b>indexes</b> only <b>file</b> metadata like path, computer and modification time. Content indexing is an optional feature.|$|R
5000|$|The Spatial Data File (SDF) is a single-user {{geodatabase}} {{file format}} developed by Autodesk. The file format is the native spatial data storage format for Autodesk GIS programs MapGuide and AutoCAD Map 3D. [...] SDF format version SDF3 (based on SQLite3) uses a single file. Prior {{versions of the}} format required a spatial <b>index</b> <b>file</b> (SIF), with an optional key <b>index</b> <b>file</b> (KIF) to speed access to the file.|$|R
25|$|The Bishop of Almeria {{was murdered}} {{while working on}} a history of Toledo. His card <b>index</b> <b>file</b> was destroyed.|$|R
25|$|In 1994, ALIWEB, {{also used}} an <b>index</b> <b>file</b> {{to provide the}} type of {{information}} commonly found in meta keywords attributes.|$|R
5000|$|... old format <b>index</b> <b>files</b> {{can be used}} but {{updating}} them via the Index Wizard {{is recommended}} to add new capabilities ...|$|R
5000|$|BAM files {{can only}} be {{uploaded}} using the URL-based approach. The <b>index</b> <b>file</b> (.bam.bai) should {{be located in the}} same webserver.|$|R
50|$|An <b>indexed</b> <b>file</b> is a {{computer}} <b>file</b> with an <b>index</b> that allows easy random access to any record given its file key.|$|R
5000|$|GNOME Files {{relies on}} Tracker (formerly named [...] "MetaTracker") to <b>index</b> <b>file</b> and is hence {{able to provide}} fast file search results.|$|R
5000|$|The {{standard}} {{does not}} specify database behavior in several important areas (e.g. <b>indexes,</b> <b>file</b> storage...), leaving implementations {{to decide how}} to behave.|$|R
5000|$|Help is {{delivered}} as a binary {{file with the}} [...]chm extension. It contains a set of HTML files, a hyperlinked table of contents, and an <b>index</b> <b>file.</b> The file format has been reverse-engineered and documentation of it is freely available.|$|R
50|$|The {{base level}} MIX format has four files: a {{metadata}} <b>file,</b> an <b>index</b> <b>file,</b> a status file, and some set of message data files. The metadata file contains base-level data {{applicable to the}} entire mailbox; i.e., the UID validity, last assigned UID, and list of keywords. The <b>index</b> <b>file</b> contains pointers to each unexpunged message in the message data files, along with flags, size, and IMAP internaldate data. The status file contains per-message flags and keywords.|$|R
5000|$|Microsoft Outlook PST {{files are}} parsed for their {{individual}} messages, which are converted to XML files and a Xena <b>index</b> <b>file</b> is created ...|$|R
50|$|CHAIN {{retrieves}} {{the record}} in the <b>indexed</b> <b>file</b> named in Factor 2 that matches the exact key specified by the value in Factor 1.|$|R
5000|$|Alternate <b>index</b> <b>files,</b> {{in which}} a {{separate}} index {{of the values of}} key fields is based on an existing sequential, direct, or keyed file.|$|R
