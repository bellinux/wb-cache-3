1675|5877|Public
2500|$|Multivariate {{modified}} Poisson <b>regression</b> <b>test</b> (fitted {{to traditional}} medicine) ...|$|E
50|$|This {{technique}} is {{a hybrid of}} <b>Regression</b> <b>Test</b> Selection and Test Case Prioritization.|$|E
50|$|The {{test suite}} test/test_gadfly.py {{attempts}} {{to provide a}} <b>regression</b> <b>test</b> and {{a demonstration of the}} system.|$|E
40|$|<b>Regression</b> <b>testing</b> is {{considered}} to be the most expensive phase in software <b>testing.</b> Therefore, <b>regression</b> <b>testing</b> reduction eliminates the redundant test cases in the <b>regression</b> <b>testing</b> suite and saves cost of this phase. In order to validate the correctness of the new version software project that resulted from maintenance phase, <b>Regression</b> <b>testing</b> reruns the <b>regression</b> <b>testing</b> suite to ensure that the new version. Several techniques are used {{to deal with the problem}} of <b>regression</b> <b>testing</b> reduction. This research is going to classify these techniques <b>regression</b> <b>testing</b> reduction problem...|$|R
40|$|<b>Regression</b> <b>Testing</b> is type {{of testing}} {{which is used}} to cut off the {{directly}} price associated with testing of different modules. Generally <b>regression</b> <b>testing</b> performs on test cases so that the resource utilization should be very low. Test cases in it are challenging task to achieve and suitable <b>test</b> cases for <b>regression</b> <b>testing</b> are difficult to judge and process. Optimization of various testing processes is done by optimization algorithms such as Genetic and Ant colony which usually provide solution to the good <b>regression</b> <b>testing.</b> Still these algorithms lack of some features which are required for better optimization of <b>test</b> cases in <b>regression</b> <b>testing.</b> The <b>regression</b> <b>testing</b> is the most expensive phase of the software <b>testing,</b> <b>regression</b> <b>testing</b> reduction eliminates the redundant test cases in the <b>regression</b> <b>testing</b> suite and saves the cost of the <b>regression</b> <b>testing.</b> In our proposed work, we will focus on optimization of <b>regression</b> <b>testing</b> with multi-objective genetic algorithm which will cover parameters like simplicity and complexity for <b>test</b> cases for <b>regression</b> <b>testing.</b> The complexity and simplicity for test cases will be judged and according to a common fitness function threshold we will proceed with optimization of the <b>regression</b> <b>testing</b> phases. Finally the paper evaluates the basic genetic algorithm for optimizing the test cases based on execution time; implement the multi-objective genetic algorithm with simplicity and complexity of the test cases along with execution time for test case prioritization for <b>regression</b> <b>testing...</b>|$|R
40|$|This paper {{presents}} <b>regression</b> <b>testing</b> {{support for}} Sleuth, a test generation tool based on Domain-Based Testing. We explain {{the rules for}} building <b>regression</b> <b>tests</b> {{for a variety of}} possible <b>regression</b> <b>testing</b> strategies from retest all strategies to selective <b>regression</b> <b>testing</b> strategies. Copyright c fl 1999 John Wiley & Sons, Lt...|$|R
5000|$|April 10, 2013 - <b>Regression</b> <b>test</b> {{flight to}} 3 feet with lighter legs. The vehicle's 3 legs were {{tethered}} to the ground.|$|E
5000|$|There {{is no need}} to <b>regression</b> <b>test</b> the {{existing}} product, saving on QA time associated with the new product launch, and reducing time to market.|$|E
50|$|HPE Unified Functional Testing (UFT) software, {{formerly}} known as HP QuickTest Professional (QTP), provides functional and <b>regression</b> <b>test</b> automation for software applications and environments. HPE Unified Functional Testing {{can be used for}} enterprise quality assurance.|$|E
50|$|<b>Regression</b> <b>testing.</b> White-box <b>testing</b> during <b>regression</b> <b>testing</b> {{is the use}} of {{recycled}} white-box test cases at the unit and integration testing levels.|$|R
40|$|Abstract—When {{software}} systems evolve, different amounts {{and types}} of code modifications can be involved in different versions. These factors can affect {{the costs and benefits}} of <b>regression</b> <b>testing</b> techniques in different ways, and thus, there may be no single <b>regression</b> <b>testing</b> technique that is the most cost-effective technique to use on every version. To date, many <b>regression</b> <b>testing</b> techniques have been proposed, but no research has been done on the problem of helping practitioners systematically choose appropriate techniques on new versions as systems evolve. To address this problem, we propose adaptive <b>regression</b> <b>testing</b> (ART) strategies that attempt to identify the <b>regression</b> <b>testing</b> techniques that will be the most cost-effective for each <b>regression</b> <b>testing</b> session considering organization’s situations and testing environment. To assess our approach, we conducted an experiment focusing on test case prioritization techniques. Our results show that prioritization techniques selected by our approach can be more cost-effective than those used by the control approaches. Keywords-Regression <b>testing,</b> adaptive <b>regression</b> <b>testing</b> strategy, test case prioritization, Analytical Hierarchy Process I...|$|R
40|$|Abstract: <b>Regression</b> <b>Testing</b> {{is one of}} {{the most}} {{important}} and expensive activities of Software Maintenance. It involves testing the modified program to reveal faults introduced during maintenance and keeping the software’s level of reliability, as cheaply as possible. Two techniques of <b>regression</b> <b>testing</b> are discussed. The first is a selective technique which identifies the modified structural attributes of a program (required elements) and selects a resettable test case set to exercise them. This technique is based on the Potential-Uses criteria family and is implemented by a <b>regression</b> <b>testing</b> tool working in conjunction with a testing tool. The second technique comprises procedures for <b>testing</b> and <b>regression</b> <b>testing</b> activities [...] In this paper we have presented the various types of <b>regression</b> <b>testing</b> techniques their classifications...|$|R
5000|$|<b>Regression</b> <b>test</b> - to be {{performed}} on an existing operational product, to verify that existing functionality didn't get broken when {{other aspects of the}} environment are changed (e.g., upgrading the platform on which an existing application runs).|$|E
50|$|Delta Debugging {{has been}} applied to isolate failure-inducing program input (e.g. an HTML page that makes a Web browser fail), failure-inducing user {{interaction}} (e.g. the keystrokes that make a program crash), or failure-inducing changes to the program code (e.g. after a failing <b>regression</b> <b>test).</b>|$|E
5000|$|Test script: A test {{script is}} a procedure, or programing code that {{replicates}} user actions. Initially {{the term was}} derived from the product of work created by automated <b>regression</b> <b>test</b> tools. Test case will be a baseline to create test scripts using a tool or a program.|$|E
40|$|Software maintainers {{are faced}} with the task of {{regression}} testing: retesting a program after a modification. The goal of <b>regression</b> <b>testing</b> is to ensure that bug fixes and new functionality do not adversely affect the correct functionality inherited from the original program. <b>Regression</b> <b>testing</b> often involves running a large program on a large number of test cases; thus, it can be expensive in terms of both human and machine time. Many approaches for reducing the cost of <b>regression</b> <b>testing</b> have been proposed. Those that make use of program slicing are surveyed. Keywords: program slicing, incremental <b>regression</b> <b>testing,</b> test case selection, test-data adequacy criteria, dependence graphs 1 INTRODUCTION This paper reviews research on the application of program slicing to the problem of <b>regression</b> <b>testing.</b> <b>Regression</b> <b>testing</b> is part of the larger problem of program testing (the application of program slicing to this more general problem is not considered. White [23] provides a survey of [...] ...|$|R
40|$|This paper {{proposed}} {{software testing}} system by using Artificial Intelligent techniques. In today’s scenario, Software Testing {{is a critical}} issue in software development and maintenance for increasing the quality and reliability of the software. In Software <b>Testing,</b> <b>regression</b> <b>testing</b> is often performed and researchers are finding {{ways to reduce the}} <b>regression</b> <b>testing</b> cost. In this paper, an approach is proposed which draws inspiration from Swarm Intelligence to reduce <b>test</b> suite for <b>regression</b> <b>testing</b> [...] This approach will strive to get the best optimal solution and contribute a lot in considerably reducing the testing cost, efforts and time of <b>regression</b> <b>testing...</b>|$|R
40|$|Requirement {{prioritization}} {{creates an}} implementation ordering of large wishes of diverse stakeholders of software systems. It results in delivering software functionality in increments. Implementation of new or changed requirements in each increment at code level, might affect {{other parts of}} source code representing other implemented requirements. New requirements need to be tested along with testing the affected parts of code (<b>regression</b> <b>testing).</b> To investigate the impact of requirement prioritization on <b>regression</b> <b>testing,</b> a multilayered hybrid <b>regression</b> <b>testing</b> approach was employed on unsuccessful and successful {{versions of the same}} embedded type project. Results indicate that <b>regression</b> <b>testing</b> of evolving software {{is directly related to the}} effectiveness of the requirement prioritization process and assigned priorities. By improving requirement prioritization process, correctness of priorities enhances, thereby improving <b>regression</b> <b>testing</b> process of evolving software...|$|R
5000|$|Videos of {{the test}} flights have been posted on the Morpheus Lander Channel on YouTube. This {{includes}} the 2012 <b>regression</b> <b>test</b> flights with the more powerful V1.5 engine whilst the lander is tethered, and the problematic early test flight that shows [...] "This is why we test".|$|E
50|$|Typically, {{regression}} testing {{is carried out}} by automation tools, but the existing generation of {{regression testing}} tools is not equipped to handle database application. For this reason, performing a <b>regression</b> <b>test</b> on a database application {{could prove to be}} taxing as it would require a great deal of manual effort.|$|E
50|$|It {{is common}} for a single {{functional}} <b>regression</b> <b>test</b> to be executed multiple times with different data. To facilitate this, the test recorder can automatically parametrize data entry values, and store the data in a spreadsheet like data pool. This enables tester to add additional test data cases to the test data pool without having to modify any test code. This strategy increases test coverage {{and the value of}} a given functional test.|$|E
40|$|This {{study is}} {{primarily}} focused on software <b>testing,</b> especially on <b>regression</b> <b>tests</b> and their automation. The main {{objective is to}} introduce and verify a novel procedure for implementation and automation of software <b>regression</b> <b>testing.</b> Specific objectives include putting <b>regression</b> <b>testing</b> into the context {{of other types of}} tests applied to software testing, introduction of a novel Methodology for analysis of automation of <b>regression</b> <b>tests,</b> introduction of a novel Methodology for analysis of implementation of <b>regression</b> <b>tests,</b> practical verification of the applicability of both methodologies on a real project and a suggestion of how to adapt these methodologies on the basis of practical usage. The theoretical part of this study summarizes the basic theory of software testing, decomposing it in detail, and introducing its various levels, types and categories. It also presents the field of test automation, explains its advantages and disadvantages and introduces an overview of test types, which are generally recommended for automation. More attention is paid to <b>regression</b> <b>testing</b> and its prerequisites and potential for automation. The practical part of this study consists of the proposition of two methodologies, explaining their usage in a particular practical project and focuses on the evaluation of success of practical utilization of both methodologies. Based on this evaluation, these methodologies are consequently extended. Outputs of the study are also extended variants of Methodology for analysis of automation of <b>regression</b> <b>tests</b> and Methodology for analysis of implementation of <b>regression</b> <b>tests,</b> which are available for usage on other practical projects...|$|R
40|$|<b>Regression</b> <b>testing</b> {{has been}} a popular quality {{assurance}} technique. Most <b>regression</b> <b>testing</b> techniques are based on code or software design. This paper proposes a scenario-based functional <b>regression</b> <b>testing,</b> {{which is based on}} end-to-end (E 2 E) integration test scenarios. The test scenarios are first represented in a template model that embodies both test dependency and traceability. By using test dependency information, one can obtain a test slicing algorithm to detect the scenarios that are affected and thus they are candidates for <b>regression</b> <b>testing.</b> By using traceability information, one can find affected components and their associated test scenarios and <b>test</b> cases for <b>regression</b> <b>testing.</b> With information of dependency and traceability, one can use the ripple effect analysis to identify all affected, including directly or indirectly, scenarios, and thus the set of test cases can be selected for <b>regression</b> <b>testing.</b> This paper also provides several alternative test-case selection approaches and a hybrid approach to meet various requirements and restrictions. A web-based tool has been developed to support these regression tasks. ...|$|R
40|$|<b>Regression</b> <b>testing</b> is an {{important}} but expensive activity, {{and a great deal}} of research on <b>regression</b> <b>testing</b> methodologies has been performed. In recent years, much of this research has emphasized empirical studies, including evaluations of the effectiveness and efficiency of <b>regression</b> <b>testing</b> techniques. To date, however, most studies have been limited in terms of their consideration of testing context and system lifecycle, and have used cost-benefit models that omit important factors and render some types of comparisons between techniques impossible. These limitations can cause studies to improperly assess the costs and benefits of <b>regression</b> <b>testing</b> techniques in practical settings. In this paper, we provide improved cost-benefit models for use in assessing <b>regression</b> <b>testing</b> methodologies, that incorporate context and lifecycle factors not considered in prior studies, and we use these models to compare several common methodologies. Our results show that the factors we consider (in particular, time constraints and incremental resource availability) can affect assessments of the relative benefits of <b>regression</b> <b>testing</b> techniques, and suggest that particular classes of techniques may compare differently across different types of test suites...|$|R
50|$|ATF or Automated Testing Framework is {{a testing}} {{framework}} originally created for NetBSD as a Google Summer of Code project in 2007. Automated Testing Framework {{is also used}} in many mobile phone companies to test latest applications or updated OS. ATF is a very useful tool which does many basic and time-consuming works such as clicking and switching applications repeatedly for developers. In addition, daily <b>regression</b> <b>test</b> will increase the chance to catch bugs before the release of new features.|$|E
50|$|Crucially, {{the test}} code is {{considered}} a first class project artifact {{in that it is}} maintained at the same quality as the implementation code, with all duplication removed. Developers release unit testing code to the code repository in conjunction with the code it tests. Extreme programming's thorough unit testing allows the benefits mentioned above, such as simpler and more confident code development and refactoring, simplified code integration, accurate documentation, and more modular designs. These unit tests are also constantly run as a form of <b>regression</b> <b>test.</b>|$|E
50|$|Conversely, {{graphical}} {{user interfaces}} whose layout changes frequently {{are very difficult to}} test automatically. There are test frameworks {{that can be used for}} regression testing of user interfaces. They rely on recording of sequences of keystrokes and mouse gestures, then playing them back and observing that the user interface responds in the same way every time. Unfortunately, these recordings may not work properly when a button is moved or relabeled in a subsequent release. An automatic <b>regression</b> <b>test</b> may also be fooled if the program output varies significantly.|$|E
40|$|<b>Regression</b> <b>testing,</b> which {{attempts}} to validate modified software {{and ensure that}} no new errors are introduced into previously tested code, is used extensively during maintenance of evolving software. Despite efforts to reduce its cost, <b>regression</b> <b>testing</b> {{remains one of the}} most expensive activities performed during a software system's lifetime. Because <b>regression</b> <b>testing</b> is important and expensive, many researchers have focused on ways to make it more efficient and effective. Research on <b>regression</b> <b>testing</b> spans a wide variety of topics, including test environments and automation, capture-playback mechanisms, regression-test selection, coverage identification, <b>test</b> suite maintenance, <b>regression</b> testability, and regression-testing process. This paper discusses the state of the art in several important aspects of <b>regression</b> <b>testing,</b> and presents some promising areas for future research. 1 Introduction Software maintenance can account for as much as two-thirds of the cost of sof [...] ...|$|R
3000|$|... “[TDD] I {{think it}} is has a big {{relation}} with code quality and <b>regression</b> <b>tests.</b> Two main advantages I have when practicing: the code gets better and the <b>regression</b> <b>tests</b> allow me to safely refactor.” [...]...|$|R
40|$|Inst. Syst. Technol. Inf., Control Commun. (INSTICC); University of Piraeus; University of Piraeus - Research CenterWhen {{software}} evolves, its functionalities {{are evaluated}} using <b>regression</b> <b>testing.</b> In a <b>regression</b> <b>testing</b> process, a test suite is augmented, reduced, prioritized, and {{run on a}} software build version. <b>Regression</b> <b>testing</b> {{has been used in}} industry for decades; while in some modern software activities, we find that <b>regression</b> <b>testing</b> is yet not practical to apply. For example, according to our realistic experiences in Sohu. com Inc., running a reduced test suite, even concurrently, may cost two hours or longer. Nevertheless, in an urgent task or a continuous integration environment, the version builds and <b>regression</b> <b>testing</b> requests may come more often. In such a case, it is not strange that a new round of test suite run needs to start before all the previous ones have terminated. As a solution, running test suites on different build versions in parallel may increase the efficiency of <b>regression</b> <b>testing</b> and facilitate evaluating the fitness of software evolutions. On the other hand, hardware and software resources limit the number of paralleled tasks. In this paper, we raise the problem of testing in parallel, give the general problem settings, and use a pipeline presentation for data visualization. Solving this problem is expected to make practical <b>regression</b> <b>testing...</b>|$|R
50|$|It is {{considered}} to be good practice to estimate at least one additional analysis of aggregation (other than Taylor's law) because the use of only a single index may be misleading. Although a number of other methods for detecting relationships between the variance and mean in biological samples have been proposed, to date none have achieved the popularity of Taylor's law. The most popular analysis used in conjunction with Taylor's law is probably Iowa's Patchiness <b>regression</b> <b>test</b> but all the methods listed here have been used in the literature.|$|E
50|$|At {{the end of}} the project, quality {{assurance}} plays a significant role. Testers start work once anything is playable. This may be one level or subset of the game software {{that can be used to}} any reasonable extent. Early on, testing a game occupies a relatively small amount of time. Testers may work on several games at once. As development draws to a close, a single game usually employs many testers full-time (and often with overtime). They strive to test new features and <b>regression</b> <b>test</b> existing ones. Testing is vital for modern, complex games as single changes may lead to catastrophic consequences.|$|E
5000|$|Verilator is an {{open source}} tool, and has in turn been adopted {{by a number of}} other projects. The Fedora Electronic Lab http://fedoraproject.org/wiki/Features/FedoraElectronicLab has adopted Verilator as part of its open source design flow for Fedora 11. The OpenRISC {{architecture}} from OpenCores includes a cycle accurate reference model, generated from Verilog using Verilator. A recent paper [...] described how the <b>regression</b> <b>test</b> suite for GCC could be run against a Verilator model of the OpenRISC 1200 as a way of detecting errors in the Verilog RTL implementation. TestDrive Profiling Master https://sourceforge.net/projects/test-drive/ tool provides the virtual FPGA environment using Verilator.|$|E
40|$|Researchers {{have begun}} to use formal {{architectural}} speci cation as a basis on which to develop testing techniques. These techniques promise to improve the development process by uncovering defects early. However, few of these techniques consider {{the ways in which}} software architecture can be used to facilitate (or misused to hinder) e ective <b>regression</b> <b>testing</b> and analysis of evolving systems. Despite e orts to reduce its cost, <b>regression</b> <b>testing</b> {{remains one of the most}} expensive activities performed during a software system's lifetime { studies indicate that it can consume up to one-third of the cost of the software. Because of the expense of <b>regression</b> <b>testing</b> and analysis of evolving software, e orts to improve the testing process should focus on techniques and tools to reduce the cost of these activities { the emerging formal notations for software architecture speci cation can provide a basis on which e ective <b>regression</b> <b>testing</b> and analysis techniques can be developed. This paper considers some potential areas for research in using software architecture speci cation for e ective <b>regression</b> <b>testing</b> and analysis. Because of the high proportion of a software system's lifetime that is spent in <b>regression</b> <b>testing</b> and analysis, the use of software architecture for <b>regression</b> <b>testing</b> activities has the potential for a bigger impact on the cost of software than those techniques that focus only on development testing...|$|R
40|$|Abstract — <b>Regression</b> <b>testing</b> {{is a part}} of {{software}} maintenance and it consumes about two-third of the overall software life cycle cost. It is an expensive activity that is done whenever there are some changes takes places in software. <b>Regression</b> <b>testing</b> tests both the modified code {{and other parts of the}} program that may be adversely affected by the changes introduced in the program or a part of it. The <b>regression</b> <b>testing</b> of database applications concerns with the state of the database as it contributes too many components that increase the complexity of the applications because in case of database the test cases are not independent of each other and the database requires to be reset all the time. In this paper we have done a survey of <b>regression</b> <b>testing</b> techniques for testing database applications...|$|R
40|$|Software is a {{continuously}} evolving product: updates, reconfiguration, {{new features}} or just small modifications appear frequently {{to follow the}} user needs or to correct errors. However, these modifications might introduce errors or other unexpected consequences. <b>Regression</b> <b>testing</b> is a method being able to verify {{that the results of}} the changes are correct, development does not introduce new problems into the system. In order to ensure correctness, <b>regression</b> <b>testing</b> involves the execution of numerous tests usually written manually by the developers. Many techniques try to reduce the testing efforts by reducing the number of <b>regression</b> <b>tests.</b> In this paper we introduce a model-based technique to make <b>regression</b> <b>testing</b> more efficient by focusing on the user-defined properties of the system-under-test...|$|R
