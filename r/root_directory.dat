255|14|Public
25|$|This is a Directory Table that stores {{information}} about the files and directories located in the <b>root</b> <b>directory.</b> It is only used with FAT12 and FAT16, and imposes on the <b>root</b> <b>directory</b> a fixed maximum size which is pre-allocated at creation of this volume. FAT32 stores the <b>root</b> <b>directory</b> in the Data Region, along with files and other directories, allowing it to grow without such a constraint. Thus, for FAT32, the Data Region starts here.|$|E
25|$|The <b>Root</b> <b>Directory</b> Region.|$|E
25|$|Because older {{versions}} of DOS could mistake LFN {{names in the}} <b>root</b> <b>directory</b> for the volume label, VFAT was designed to create a blank volume label in the <b>root</b> <b>directory</b> before adding any LFN name entries (if a volume label did not already exist).|$|E
5000|$|Anonymous FTP <b>root</b> <b>directories</b> do {{not require}} any {{specific}} directory structure, system binaries or other system files ...|$|R
50|$|Instances: {{a service}} is a {{collection}} of configurations. An instance is a running execution of a defined service executable. One can have many instances of a defined service, such as multiple webservers listening on different ports referencing different WWW <b>root</b> <b>directories.</b>|$|R
5000|$|CD [...] "letter:/Program Files" [...] {{will only}} {{work from the}} <b>root</b> (letter:\) <b>directory.</b> This appears to treat all forward slashes the same as [...]\.|$|R
25|$|Because ReadyBoost stores its cache as a file on the <b>root</b> <b>directory</b> of {{the drive}} rather than using the flash memory without a file system, the file system must be mounted and {{assigned}} a drive letter. The ReadyBoost cache is created on the <b>root</b> <b>directory</b> {{of the drive}}.|$|E
25|$|Aside {{from the}} <b>root</b> <b>directory</b> table in FAT12 and FAT16 file systems, which {{occupies}} the special <b>Root</b> <b>Directory</b> Region location, all directory tables {{are stored in}} the data region. The actual number of entries in a directory stored in the data region can grow by adding another cluster to the chain in the FAT.|$|E
25|$|Chromium {{snapshots}} {{are built}} automatically {{several times a}} day by Buildbot Buildslaves and made available as binary code releases. Once a snapshot has been built, it is placed in a directory in the chromium-browser-snapshots <b>root</b> <b>directory</b> and it is automatically tested. If the snapshot passes the automated testing, it is placed in a directory in the chromium-browser-continuous <b>root</b> <b>directory.</b>|$|E
50|$|The name-spacing allows {{various parts}} of the {{configuration}} to be separated and identified. Toeffectively modularize part of the configuration for reuse, administrators must be able to importthe modules easily into a site’s configuration and to customize them. Users of the Pan compilercombine a load-path with the name-spacing to achieve this. The compiler uses the load-path to searchmultiple <b>root</b> <b>directories</b> for particular, named templates; the first version found on the load-pathis the one that is used by the compiler. This allows modules to be kept in a pristine state whileallowing sites to override any particular template.|$|R
5000|$|A logical name is {{a system}} {{variable}} which may reference a disk, directory or file, or contain other program-specific information. For example, the logical SYS$SYSDEVICE contains the system's boot device. A logical name normally refers to a single directory or disk, e.g. SYS$LOGIN: which is the user's login (home) directory (or directories); these logicals cannot be used as true disk names - SYS$LOGIN:DIRFILE is not a valid file specification. However, concealed logical names, defined by DEFINE/TRANSLATION=CONCEALED, {{can be used in}} that way; these <b>rooted</b> <b>directories</b> are defined with a trailing [...] "." [...] on the directory specification, hence ...|$|R
5000|$|The {{tests can}} be grouped {{according}} to the tool they are testing. The test is run by merely calling runtest in the <b>root</b> project <b>directory.</b> runtest --tool program_to_testThis will look in the testsuite directory for any folders starting with program_to_test and will run all [...]exp files in that folder.|$|R
25|$|FAT32 {{typically}} commences the <b>Root</b> <b>Directory</b> Table in cluster number 2: {{the first}} cluster of the Data Region.|$|E
25|$|Some {{non-standard}} FAT12/FAT16 implementations {{utilize the}} cluster 1 entry {{to store the}} starting cluster of a variable-sized <b>root</b> <b>directory</b> (typically 2). This may occur {{when the number of}} <b>root</b> <b>directory</b> entries in the BPB holds a value of 0 and no FAT32 EBPB is found (no signature 0x29 or 0x28 at offset 0x042). This extension, however, is not supported by mainstream operating systems, as it is conflictive with other possible uses of the cluster 1 entry. Most conflicts can be ruled out if this extension is only allowed for FAT12 with less than 0xFEF and FAT16 volumes with less than 0x3FEF clusters and 2 FATs.|$|E
25|$|AutoRun, {{a feature}} of Windows Explorer (actually of the shell32 dll) {{introduced}} in Windows 95, enables media and devices to launch programs by use of command listed in a file called autorun.inf, stored in the <b>root</b> <b>directory</b> of the medium.|$|E
50|$|Looks for the {{existence}} of a boot <b>directory</b> in the <b>root</b> CD <b>directory.</b> N.B., this does not do any further checking to ensure anything is actually in the directory. However, if TazLito is used for all LiveCD creation operations (that is, one does not create/modify the directories used by TazLito) the directories existence implies it is populated properly.|$|R
50|$|The {{company also}} {{provides}} private cloud, logging, active <b>directory,</b> <b>root</b> access, two-factor authentication, VI segmentation, host hardening, multi-tenant policy enforcement, secondary approval services, encryption, and key management, and advises organizations {{on how to}} manage their virtualized and cloud computing environments.|$|R
50|$|Looks for the {{existence}} of an etc. <b>directory</b> in the <b>root</b> file system <b>directory.</b> N.B., this does not do any further checking to ensure anything is actually in the directory. However, if TazLito is used for all LiveCD creation operations (that is, one does not create/modify the directories used by TazLito) the directories existence implies it is populated properly.|$|R
25|$|Because {{these first}} two FAT entries store special values, {{there are no}} data {{clusters}} 0 or 1. The first data cluster (after the <b>root</b> <b>directory</b> if FAT12/FAT16) is cluster 2, and cluster 2 is by definition the first cluster in the data area.|$|E
25|$|Determine (once) SSA=RSC+FN×SF+ceil((32×RDE)/SS), {{where the}} {{reserved}} sector count RSC is stored at offset 0x00E, the FAT number FN at offset 0x010, the sectors per FAT SF at offset 0x016 (FAT12/FAT16) or 0x024 (FAT32), the <b>root</b> <b>directory</b> entries RDE at offset 0x011, the sector size SS at offset 0x00B, and ceil(x) rounds up {{to a whole}} number.|$|E
25|$|Content is {{considered}} to be Unknown if the content sniffing process finds no categorisable content. This does not mean that there are no files present, just no files falling into {{one or more of the}} above three content types. In this case AutoPlay opens an Explorer window on the <b>root</b> <b>directory</b> of the medium and the process flow finishes here.|$|E
5000|$|Once all {{of these}} files are in the <b>root</b> of a <b>directory,</b> it is given a name and the {{extension}} [...] ".wdgt", and then it can be opened up in Dashboard as a widget. More complex widgets may also include a Cocoa widget plugin (for platform-specific functionality), one or more JavaScript files (for text scrolling, preferences, etc.) or multiple images (for personalized select menus or buttons).|$|R
40|$|We {{present a}} {{hierarchical}} locking algorithm that dynamically elects a primary server in a replicated file system at various granularities. We introduce two lock types: shallow locks that control a single file or directory, and deep locks that lock {{everything in the}} subtree <b>rooted</b> at a <b>directory.</b> Experimental results show that for typical use cases, deep locks can make the overhead of replication control negligible, even when replication servers are widely distributed...|$|R
5000|$|The {{filesystem}} {{appears as}} one <b>rooted</b> tree of <b>directories.</b> Instead of addressing separate volumes such as disk partitions, removable media, and network shares as separate trees (as done in DOS and Windows: each drive has a drive letter that denotes {{the root of}} its file system tree), such volumes can be mounted on a directory, causing the volume's file system tree to appear as that directory in the larger tree. The root of the entire tree is denoted [...]|$|R
25|$|Operating system updates are {{designed}} to be received wirelessly and installed automatically during a period in sleep mode in which Wi-Fi is turned on. A user may install firmware updates manually by downloading the firmware for their device and copying the file to the device's <b>root</b> <b>directory.</b> The Kindle operating system uses the Linux kernel with a Java app for reading e-books.|$|E
25|$|When a PC {{is powered}} on its BIOS follows the {{configured}} boot {{order to find}} a bootable device. This can be a harddisk, floppy, CD/DVD, network connection, USB-device, etc. depending on the BIOS. In {{the case of a}} floppy the BIOS interprets its boot sector (first sector) as code, for NTLDR this could be a NTLDR boot sector looking for the ntldr file on the floppy. For a harddisk the code in the Master Boot Record (first sector) determines the active partition. The code in the boot sector of the active partition could then be again a NTLDR boot sector looking for ntldr in the <b>root</b> <b>directory</b> of this active partition. In a more convoluted scenario the active partition can contain a Vista boot sector for the newer Vista boot manager with an {ntldr} entry pointing to another partition with a NTLDR boot sector.|$|E
25|$|The name of {{the file}} system {{originates}} from the file system's prominent usage of an index table, the File Allocation Table, statically allocated {{at the time of}} formatting. The table contains entries for each cluster, a contiguous area of disk storage. Each entry contains either the number of the next cluster in the file, or else a marker indicating end of file, unused disk space, or special reserved areas of the disk. The <b>root</b> <b>directory</b> of the disk contains the number of the first cluster of each file in that directory; the operating system can then traverse the FAT table, looking up the cluster number of each successive part of the disk file as a cluster chain {{until the end of the}} file is reached. In much the same way, sub-directories are implemented as special files containing the directory entries of their respective files.|$|E
50|$|Creating and {{defining}} systems installable though ASDF is done {{through the creation}} and placement {{of one or more}} system definition (.asd) files at the <b>root</b> of a <b>directory</b> containing the files that make up the system. The system definition file must contain at least one call to defsystem, a lisp form in which are defined all of the components and dependencies of the system. ASDF is capable of automatically compiling and loading lisp source code, as well as automatically building and linking C programming language (also known as C source code). It contains hooks to allow for definitions of alternate compilers and complex treatment of custom components.|$|R
40|$|Directory Tree Analysis File Generator is a Practical Extraction and Reporting Language (PERL) {{script that}} {{simplifies}} and automates {{the collection of}} information for forensic analysis of compromised computer systems. During such an analysis, it is sometimes necessary to collect and analyze information about files on a specific directory tree. Directory Tree Analysis File Generator collects information of this type (except information about directories) and writes it to a text file. In particular, the script asks the user for the <b>root</b> of the <b>directory</b> tree to be processed, {{the name of the}} output file, and the number of subtree levels to process. The script then processes the directory tree and puts out the aforementioned text file. The format of the text file is designed to enable the submission of the file as input to a spreadsheet program, wherein the forensic analysis is performed. The analysis usually consists of sorting files and examination of such characteristics of files as ownership, time of creation, and time of most recent access, all of which characteristics are among the data included in the text file...|$|R
25|$|FAT uses little-endian {{format for}} all {{entries in the}} header (except for, where {{explicitly}} mentioned, for some entries on Atari ST boot sectors) and the FAT(s). It is possible to allocate more FAT sectors than necessary {{for the number of}} clusters. The end of the last sector of each FAT copy can be unused if there are no corresponding clusters. The total number of sectors (as noted in the boot record) can be larger than the number of sectors used by data (clusters × sectors per cluster), FATs (number of FATs × sectors per FAT), the <b>root</b> <b>directory</b> (n/a for FAT32), and hidden sectors including the boot sector: this would result in unused sectors {{at the end of the}} volume. If a partition contains more sectors than the total number of sectors occupied by the file system it would also result in unused sectors, at the end of the partition, after the volume.|$|E
2500|$|In {{the case}} of a generic volume, AutoPlay starts with the <b>root</b> <b>directory</b> and {{searches}} the file system to a depth of four directory levels below the <b>root</b> <b>directory</b> to find file types that fall into certain categories or [...] "content types".|$|E
2500|$|Checks {{that the}} <b>root</b> <b>directory</b> of the {{inserted}} media contains an autorun.inf file, {{which might be}} read. See below.|$|E
2500|$|... 32-byte {{directory}} entries, {{both in the}} <b>Root</b> <b>Directory</b> Region and in subdirectories, are of {{the following}} format (see also 8.3 filename): ...|$|E
2500|$|... 315 KB: Bytes per logical sector: 512 bytes, logical sectors per cluster: 1, {{reserved}} logical sectors: 1, {{number of}} FATs: 2, <b>root</b> <b>directory</b> entries: 128, total logical sectors: 630, FAT ID: 0xFC, logical sectors per FAT: 2, physical sectors per track: 9, number of heads: 1.|$|E
2500|$|... 640 KB: Bytes per logical sector: 256 bytes, logical sectors per cluster: 8, {{reserved}} logical sectors: 16, {{number of}} FATs: 1, <b>root</b> <b>directory</b> entries: 112, total logical sectors: 2560, FAT ID: 0xFF, logical sectors per FAT: 2, physical sectors per track: 16, number of heads: 2.|$|E
2500|$|... 720 KB: Bytes per logical sector: 512 bytes, logical sectors per cluster: 2, {{reserved}} logical sectors: 1, {{number of}} FATs: 2, <b>root</b> <b>directory</b> entries: 176, total logical sectors: 1440, FAT ID: 0xFE, logical sectors per FAT: 3, physical sectors per track: 9, number of heads: 2.|$|E
