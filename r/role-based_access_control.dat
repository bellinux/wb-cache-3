1030|10000|Public
25|$|In {{association}} with SELinux, sudo {{can be used}} to transition between roles in <b>role-based</b> <b>access</b> <b>control</b> (RBAC).|$|E
25|$|Examples {{of common}} access control {{mechanisms}} in use today include <b>role-based</b> <b>access</b> <b>control</b> available in many advanced database management systems—simple file permissions provided in the UNIX and Windows operating systems, Group Policy Objects provided in Windows network systems, Kerberos, RADIUS, TACACS, and the simple access lists used in many firewalls and routers.|$|E
500|$|IP Address Management (IPAM): Extended {{to support}} <b>role-based</b> <b>access</b> <b>control,</b> {{allowing}} for fine-grained control over which users can view or change configurations for DHCP reservations, scopes, IP address blocks, DNS resource records, etc. Additionally, IPAM can integrate with System Center Virtual Machine Manager 2012 R2 to have coordinated IP policy across {{both physical and}} virtual environments. [...] The IPAM database {{can be stored in}} a SQL Server instance instead of Windows Internal Database.|$|E
5000|$|<b>Role-based</b> <b>access</b> <b>controls</b> {{built into}} the {{solution}} to regulate identity data exposures as data is loaded, analyzed, and validated by various individuals {{both inside and outside}} of the organization ...|$|R
40|$|This {{paper is}} {{intended}} for storage administrators, security administrators, and IT management. It describes the <b>role-based</b> <b>access</b> <b>controls</b> (RBAC) introduced with Data ONTAP 7 G, {{an overview of the}} benefits of this feature, and some deployment examples. The appendices include reference information that should be of value for storage and security administrators who perform RBAC configuration...|$|R
50|$|DACS {{performs}} <b>access</b> <b>control</b> by evaluating <b>access</b> <b>control</b> {{rules that}} are specified by an administrator.Expressed {{as a set}} of XML documents, the rules are consulted at run-time to determinewhether access to a given resource should be granted or denied.As <b>access</b> <b>control</b> rules can be arbitrary computations, itcombines attribute-based <b>access</b> <b>control,</b> <b>role-based</b> <b>access</b> control,policy-based <b>access</b> <b>control,</b> delegated <b>access</b> <b>control,</b> and other approaches.The architecture provides many possibilities to administrators.|$|R
5000|$|<b>Role-based</b> <b>access</b> <b>control</b> (RBAC) with domain {{support for}} {{multi-tenant}} environments ...|$|E
5000|$|The American National Standards Institute, International Committee for Information Technology Standards (ANSI/INCITS) adopts the Sandhu, Ferraiolo, Kuhn RBAC (<b>Role-Based</b> <b>Access</b> <b>Control)</b> NIST [...] "unified model" [...] {{proposal}} as {{an industry}} consensus standard (INCITS 359:2004). A page is prepared (date uncertain) detailing the history of <b>Role-Based</b> <b>Access</b> <b>Control</b> from the Ferrailo and Kuhn paper in 1992 up to {{the date of the}} standard.|$|E
5000|$|<b>Role-based</b> <b>access</b> <b>control</b> (RBAC) {{providing}} {{team members}} {{with access to}} specific tasks, documents, and calendar items ...|$|E
50|$|Records may {{be covered}} by <b>access</b> <b>controls</b> to {{regulate}} who can access them and under what circumstances. Physical controls {{may be used to}} keep confidential records secure - personnel files, for instance, which hold sensitive personal data, may be held in a locked cabinet with a control log to track access. Digital records systems may include <b>role-based</b> <b>access</b> <b>controls,</b> allowing permissions (to view, change and/or delete) to be allocated to staff depending on their role in the organisation. An audit trail showing all access and changes can be maintained to ensure the integrity of the records.|$|R
5000|$|AGDLP (an {{abbreviation}} of [...] "account, global, domain local, permission") briefly summarizes Microsoft's {{recommendations for}} implementing <b>role-based</b> <b>access</b> <b>controls</b> (RBAC) using nested {{groups in a}} native-mode Active Directory (AD) domain: User and computer accounts are members of global groups that represent business roles, which are members of domain local groups that describe resource permissions or user rights assignments. AGUDLP (for [...] "account, global, universal, domain local, permission") and AGLP (for [...] "account, global, local, permission") summarize similar RBAC implementation schemes in Active Directory forests and in Windows NT domains, respectively.|$|R
40|$|Abstract—As web-based {{technologies}} mature, dynamic graphs of interlinked {{resources are}} replacing hierarchical catalogs as means for storing and organizing information. Such graphs, or semantic networks, often span multiple static and dynamic resources {{from a variety}} of sources. It is often highly desirable to give users access only to parts of the semantic network without breaking its logical continuity or consistency. Traditional <b>access</b> <b>control</b> models, such as mandatory, discretionary and <b>role-based</b> <b>access</b> <b>controls,</b> are ill-suited for these new resource structures. New models that allow users to specify access rights in terms of semantic relationships between various objects within semantic networks are needed. In this paper we discuss requirements for an <b>access</b> <b>control</b> model for semantic networks and present our approach and an initial implementation. We also describe end user tools for policy specification and assessment. I...|$|R
50|$|In {{association}} with SELinux, sudo {{can be used}} to transition between roles in <b>role-based</b> <b>access</b> <b>control</b> (RBAC).|$|E
5000|$|Use <b>role-based</b> <b>access</b> <b>control</b> (RBAC) {{to define}} who can access {{which part of}} the system, and in what {{capacity}} ...|$|E
50|$|LBAC {{is known}} as a label-based access control (or {{rule-based}} access control) restriction as opposed to <b>role-based</b> <b>access</b> <b>control</b> (RBAC).|$|E
50|$|In 2004 D3 Security Management Systems, {{leveraging}} {{a common}} thin client architecture and back-end framework, developed modules for computer-assisted dispatch and security guard tour. Following their release and implementation in early 2005, D3 Security Management Systems added a security post orders module. Beginning in 2006, D3 Security Management Systems implemented enhancements for more robust <b>role-based</b> <b>access</b> <b>controls</b> and transactional sharing of database records. The former permitted compliance with {{need to know}} regulations for privacy and the later enabled collaboration between functional units. As a result, D3 Security Management Systems released its Case Collaboration Platform (CCP), a configurable platform catering to the governance, risk management, and compliance business functions, expanding product scope from corporate security and physical security incident management to ethics and compliance, human resources and IT security case management.|$|R
40|$|Abstract — Recently RBAC (<b>role-based</b> <b>access</b> <b>controls)</b> {{was found}} to be among the most {{attractive}} solutions for providing acess control in web-based e-commerce and e-government applications. Usually, such systems involve a huge number of heterogeneous users working with the systems under different rights and obligations. In an RBAC authorization and <b>access</b> <b>control</b> system the users are assigned to roles which are derived from the organizational structure. Because of the huge amount of users and the diversity of their requirments the administration of a RBAC system becomes crucial. Our group is involved in the European funded Webocracy project in which we have designed and implemented an RBAC system based on the Core RBAC model as defined in a proposed NIST standard. Based on the functional specification of the proposed NIST standard we specified administration requirements for managing roles, users and permissions we specified. In this paper we will present an administration console, which we designed to implement this requirements. I...|$|R
40|$|E-commerce {{applications}} have diverse {{security requirements}} ranging from business-to-business over business-to-consumer to consumer-to-consumer types of applications. This range of requirements cannot be handled ade-quately by one single security model although <b>role-based</b> <b>access</b> <b>controls</b> (RBAC) depict a promising fundament for generic high-level security. Furthermore, RBAC is well researched but rather incompletely realized {{in most of}} the current backend as well as business layer systems. Security mechanisms have often been added to exist-ing software causing many of the well-known deficiencies found in most software products. However, with the rise of component-based software development security models can also be made available for reuse. Therefore, we present a general-purpose software framework providing security mechanisms such as authentication, <b>access</b> <b>controls,</b> and auditing for Java software development. The framework is called GAMMA (Generic Authorization Mechanisms for Multi-Tier Applications) and offers multiple high-level security models (including the aforemen-tioned RBAC) that may even be used concurrently to cover such diverse security requirements as found within e-commerce environments...|$|R
5000|$|Covers {{the access}} control of users and {{automated}} agents to data objects in power systems {{by means of}} <b>role-based</b> <b>access</b> <b>control</b> (RBAC).|$|E
5000|$|Sandboxes: Leopard {{includes}} kernel-level {{support for}} <b>role-based</b> <b>access</b> <b>control</b> (RBAC). RBAC {{is intended to}} prevent, for example, an application like Mail from editing the password database.|$|E
50|$|ZEPRS uses a tabbed user {{interface}} and <b>role-based</b> <b>access</b> <b>control</b> system to enable several clinicians {{to share the}} same computer to retrieve and enter data for different patients.|$|E
40|$|Information Security: basic {{concepts}} • Privacy: {{basic concepts}} and comparison with security • <b>Access</b> <b>control,</b> security policies, and models – <b>Access</b> <b>control</b> policies • the matrix {{model and the}} safety problem • discretionary <b>access</b> <b>control</b> • mandatory <b>access</b> <b>control</b> • <b>role-based</b> and task-based <b>access</b> <b>control</b> • context-based <b>access</b> <b>control</b> • chinese wall access contro...|$|R
40|$|We propose two {{extensions}} to the SQL grant/revoke security model. In SQL, {{grants are}} unconditional, so the grantor must simply trust the recipient's discretion. We allow a grantor to impose limitations {{on how the}} received privilege may be used. Second, we provide a new means of selectively reactivating permissions that have been revoked. Although our examples are from DBMSs, the results (other than the treatment of views) apply to arbitrary sets of privileges, and to systems without a query language. 1 Introduction The SQL security model has had few extensions in the past 20 years, except for the recent addition of <b>role-based</b> <b>access</b> <b>controls.</b> We propose some extensions that give important extra power at relatively low cost, {{in the hope of}} attracting vendors and users. Our goal is for these extensions to be simple for current SQL administrators to understand, simple to implement, and separable (so that one can be implemented without the other). This paper addresses the following specif [...] ...|$|R
40|$|Abstract. Shared workspaces and Web 2. 0 {{platforms}} provide lots {{of services}} for sharing various objects. Most current shared workspaces and Web 2. 0 platforms provide <b>role-based,</b> coarse-grained <b>access</b> <b>control</b> poli-cies which undermine the utility of them in some cases. In this paper, we present Annotation-Based <b>Access</b> <b>Control,</b> an approach towards <b>access</b> <b>control</b> which benefits from user annotations to annotate people using various fixed and desired open vocabulary (tags) and helps to build a more flexible <b>access</b> <b>control</b> mechanism based on relationships among dif-ferent types of users. We also present a prototype, a gadget called Uncle-Share, which we have developed to enable this <b>access</b> <b>control</b> mechanism and evaluate it...|$|R
50|$|From a purist perspective, SELinux {{provides}} {{a hybrid of}} concepts and capabilities drawn from mandatory access controls, mandatory integrity controls, <b>role-based</b> <b>access</b> <b>control</b> (RBAC), and type enforcement architecture. Third-party tools enable one to build a variety of security policies.|$|E
50|$|Apache Fortress is an {{open source}} project of the Apache Software Foundation and a subproject of the Apache Directory. It's a standards-based access {{management}} system, written in Java, that provides <b>role-based</b> <b>access</b> <b>control,</b> delegated administration and password policy services with LDAP.|$|E
50|$|The {{software}} runs on a server (on premises) {{or in the}} cloud and is scalable on parallel servers. Data security is warranted by <b>role-based</b> <b>access</b> <b>control</b> (RBAC). The software is used via web-browsers and not dependent on particular system software.|$|E
40|$|Intuition Knowledge Base Software Tool (IKBST) is a centralised, Web-based {{tool for}} {{managing}} distributed VR related knowledge content and development work. It runs on an application server and an underlying database (PostgreSQL). For optimum security and control, this Tool {{is to be}} installed behind a firewall on a dedicated server running Linux®. IKBST then connects heterogeneous user tools and Intellectual Property repositories together with a proven, integrated toolset, providing a centralised repository and dynamic workspace that can be accessed by any authorised user with a standards-compliant browser. A key concept in IKBST {{is the notion of}} “projects, associated knowledge and its secure management, and knowledge dissemination”. To achieve the required robustness and usability enterprise edition of SourceForge V 4. 3 is used in development. IKBST allows users (with the appropriate permissions) to create project knowledge workspaces: feature-rich, on-line knowledge environments that can be populated with selected team members, <b>access</b> <b>controls,</b> IP, artefacts, forums, wikis and more. Project founders and/or administrators set permissions on what knowledge, information and tools can be accessed by whom using straightforward <b>role-based</b> <b>access</b> <b>controls.</b> IKBST is designed to help VR researchers to share IP vigilantly to maximise their performance, productivity and for other interest groups who seek VR related information...|$|R
40|$|Abstract. <b>Access</b> <b>control</b> is an {{important}} aspect of regulatory compliance. Therefore, <b>access</b> <b>control</b> specifications must be process-aware in that they can refer to an underlying business process context, but do not specify when and how they must be enforced. Such <b>access</b> <b>control</b> specifications are often expressed in terms of general rules and exceptions, akin to defeasible logic. In this paper we demonstrate how a <b>role-based,</b> process-aware <b>access</b> <b>control</b> policy can be specified in the SBVR. In particular, we define an SBVR vocabulary that allows for a process-aware specification of defeasible <b>access</b> <b>control</b> rules. Because SBVR does not support defeasible rules, we show how a set of defeasible <b>access</b> <b>control</b> rules can be transformed into ordinary SBVR <b>access</b> <b>control</b> rules using decision tables as a transformation mechanism...|$|R
40|$|The {{ability to}} enforce robust and dynamic <b>access</b> <b>controls</b> on cloud-hosted data while {{simultaneously}} ensuring confidentiality {{with respect to}} the cloud itself is a clear goal for many users and organizations. To this end, there has been much cryptographic research proposing the use of (hierarchical) identity-based encryption, attribute-based encryption, predicate encryption, functional encryption, and related technologies to perform robust and private <b>access</b> <b>control</b> on untrusted cloud providers. However, the vast majority of this work studies static models in which the <b>access</b> <b>control</b> policies being enforced do not change over time. This is contrary to the needs of most practical applications, which leverage dynamic data and/or policies. In this paper, we show that the cryptographic enforcement of dynamic <b>access</b> <b>controls</b> on untrusted platforms incurs computational costs that are likely prohibitive in practice. Specifically, we develop lightweight constructions for enforcing <b>role-based</b> <b>access</b> <b>controls</b> (i. e., RBAC_ 0) over cloud-hosted files using identity-based and traditional public-key cryptography. This is done under a threat model {{as close as possible to}} the one assumed in the cryptographic literature. We prove the correctness of these constructions, and leverage real-world RBAC datasets and recent techniques developed by the <b>access</b> <b>control</b> community to experimentally analyze, via simulation, their associated computational costs. This analysis shows that supporting revocation, file updates, and other state change functionality is likely to incur prohibitive overheads in even minimally-dynamic, realistic scenarios. We identify a number of bottlenecks in such systems, and fruitful areas for future work that will lead to more natural and efficient constructions for the cryptographic enforcement of dynamic <b>access</b> <b>controls.</b> Comment: 26 pages; extended version of the IEEE S&P pape...|$|R
50|$|Strict security: Due to the {{sensitive}} nature of board information, security and confidentiality is critical. Sometimes, board portals will use two-factor authentication for user logins, <b>role-based</b> <b>access</b> <b>control</b> to information, and full encryption of stored information and communications between members.|$|E
5000|$|<b>Role-Based</b> <b>Access</b> <b>Control</b> (RBAC)RBAC allows access {{based on}} the job title. RBAC largely {{eliminates}} discretion when providing access to objects. For example, a human resources specialist should not have permissions to create network accounts; {{this should be a}} role reserved for network administrators.|$|E
50|$|Delegation is {{the process}} of a {{computer}} user handing over their authentication credentials to another user. In <b>role-based</b> <b>access</b> <b>control</b> models, delegation of authority involves delegating roles that a user can assume or the set of permissions that he can acquire, to other users.|$|E
40|$|Abstract. Most current shared workspaces within Collaborative Working Environments (CWE) provide <b>role-based</b> {{coarse-grained}} <b>access</b> <b>control</b> {{mechanisms for}} eProfessionals {{which do not}} satisfy their requirements in most cases. When e-Professionals collaborate in CWE, they leave some fingerprints, which contain highly valuable information. These fingerprints can be exported and used to extract the hidden social networks based on the objects that eProfessionals collaborate upon. Social networks have great potentials to be used within different domains like designing <b>access</b> <b>control</b> policies. Context information of eProfessionals {{is also a great}} source to be used within <b>access</b> <b>control</b> mechanisms. In this paper, I present an approach for <b>access</b> <b>control</b> mechanism within CWE based on context, trust, and social networks. These are key elements for expressing <b>access</b> <b>control</b> policies. I intend to enrich the framework with Semantic Web technologies and ontologies...|$|R
40|$|Traditionally, <b>access</b> <b>control</b> {{mechanisms}} {{have been}} static in nature, requiring explicit intervention {{in order to}} change their behavior. However, since security requirements {{can be expected to}} change frequently and rapidly in ubiquitous computing environments, <b>access</b> <b>control</b> mechanisms that can react to the context in which they are applied are desirable. With this in mind, we have created <b>ACCESS</b> (<b>Access</b> <b>Controls</b> for Cooperatively Enabled Smart Spaces); a framework for enabling dynamic, <b>role-based</b> and context-aware <b>access</b> <b>control</b> mechanisms in ubiquitous computing applications...|$|R
40|$|User role-based {{protection}} {{presents a}} flexible (hence adaptive) means for enforcing differing ranges of security policies. It can emulate both mandatory and discretionary <b>access</b> <b>control</b> modes of protection. Role-based protection enforces {{the principle of}} least privilege, hence minimizing the risk of Trojan horse attacks. This paper offers {{a glimpse into the}} strengths (and some weaknesses) of role-based protection, the structures for its enforcement and pointers to the direction for future research. Keywords: Roles, <b>role-based</b> protection, <b>access</b> <b>control,</b> privilege, information flow, capability, least privilege 1 Introduction There are two main instances where role-based protection is very useful: in applications with a large number of users with overlapping user requirements, and when there is a large number of objects. In this approach, system privileges are grouped according to their logical association to form roles. Such grouping (collection) is supposed to make the task of privi [...] ...|$|R
