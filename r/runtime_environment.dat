1235|321|Public
25|$|According to Oracle in 2010, the Java <b>Runtime</b> <b>Environment</b> {{was found}} on over 850 million PCs. Microsoft has not bundled a Java <b>Runtime</b> <b>Environment</b> (JRE) with its {{operating}} systems since Sun Microsystems sued Microsoft for adding Windows-specific classes to the bundled Java <b>runtime</b> <b>environment,</b> and for making the new classes available through Visual J++. Apple no longer includes a Java runtime with OS X as of version 10.7, but the system prompts the user to download and install {{it the first time}} an application requiring the JRE is launched. Many Linux distributions include the OpenJDK runtime as the default virtual machine, negating the need to download the proprietary Oracle JRE.|$|E
25|$|Mozilla's FirefoxOS {{consists}} of the Linux kernel, a hardware abstraction layer, a web-standards-based <b>runtime</b> <b>environment</b> and user interface, and an integrated web browser.|$|E
25|$|The {{essential}} {{components in}} the platform are the Java language compiler, the libraries, and the <b>runtime</b> <b>environment</b> in which Java intermediate bytecode executes {{according to the rules}} laid out in the virtual machine specification.|$|E
40|$|From the reason, each {{software}} system {{should have the}} ability {{to be aware of the}} states' changes in <b>runtime</b> <b>environments,</b> and to change its own behaviors depending on the states. We call such ability of {{software system}}s dynamic adaptability. However, there is a limitation on <b>runtime</b> <b>environments</b> and their states that software engineers can predict beforehand. Thus, there is also a limitation on the dynamic adaptability that the engineers can give to software systems beforehand. Therefore, the mechanism of dynamic adaptability must be extensible. Namely, the mechanism must be able to change depending on various <b>runtime</b> <b>environments</b> and their states afterward. Such software systems with dynamic adaptability not only adapt themselves to dynamically changing <b>runtime</b> <b>environments,</b> but also change their own functionalities exibly to make full use of the properties in the <b>runtime</b> <b>environments.</b> We have proposed a software model with dynamic adaptability called DAS<F 12...|$|R
50|$|Examples of free <b>runtime</b> <b>environments</b> include Kaffe, SableVM and gcj.|$|R
5000|$|DBMS hosting of the Java, Microsoft [...]NET CLR, and Mono <b>runtime</b> <b>environments</b> ...|$|R
25|$|Oracle {{plans to}} first deprecate the {{separately}} installable Java browser plugin from the Java <b>Runtime</b> <b>Environment</b> in JDK 9 then remove it completely from a future release, forcing web developers {{to use an}} alternative technology.|$|E
25|$|Java Secure Socket Extension: a Java {{implementation}} {{included in}} the Java <b>Runtime</b> <b>Environment</b> supports TLS 1.1 and 1.2 from Java 7, although is disabled by default for client, and enabled by default for server. Java 8 supports TLS 1.1 and 1.2 enabled on both the client and server by default.|$|E
25|$|Federation Commander On-Line is a {{subscription}} service {{which is part}} of the SFB On-Line service that allows players to play Federation Commander across the Internet. The client is written in Java so that it can be used on any operating system that currently supports a 1.4.x or greater Java <b>Runtime</b> <b>Environment.</b>|$|E
50|$|In January 2016, Oracle {{announced}} that Java <b>runtime</b> <b>environments</b> based on JDK 9 will discontinue the browser plugin.|$|R
5000|$|No extra <b>runtime</b> <b>environments</b> or plugins {{required}} {{to view the}} slide show (some players may require Adobe Flash or Java) ...|$|R
50|$|Runtime systems {{refers to}} the {{development}} of programming language <b>runtime</b> <b>environments</b> and their components, including virtual machines, garbage collection, and foreign function interfaces.|$|R
25|$|The Java Development Kit (JDK) is a Sun product {{aimed at}} Java developers. Since the {{introduction}} of Java, it has been {{by far the most}} widely used Java software development kit (SDK). It contains a Java compiler, a full copy of the Java <b>Runtime</b> <b>Environment</b> (JRE), and many other important development tools.|$|E
25|$|Ubuntu has a {{certification}} system for third-party software. Some third-party software {{that does not}} limit distribution is included in Ubuntu's multiverse component. The package ubuntu-restricted-extras additionally contains software that may be legally restricted, including support for MP3 and DVD playback, Microsoft TrueType core fonts, Sun's Java <b>runtime</b> <b>environment,</b> Adobe's Flash Player plugin, many common audio/video codecs, and unrar, an unarchiver for files compressed in the RAR file format.|$|E
25|$|A new <b>runtime</b> <b>environment</b> {{known as}} the Android Runtime (ART), {{intended}} to replace the Dalvik virtual machine, was introduced as a technology preview in KitKat. ART is a cross-platform runtime which supports the x86, ARM, and MIPS architectures in both 32-bit and 64-bit environments. Unlike Dalvik, which uses just-in-time compilation (JIT), ART compiles apps upon installation, which are then run exclusively from the compiled version from then on. This technique removes the processing overhead associated with the JIT process, improving system performance.|$|E
2500|$|However, most <b>runtime</b> <b>environments</b> have a console {{object that}} can be used to print output. Here is a minimalist Hello World program in JavaScript: ...|$|R
5000|$|APSG {{seeks to}} explore new {{developments}} in programming languages, <b>runtime</b> <b>environments,</b> programming tools, multicore processors, mobile platforms and end user interfaces which are important to today's real world applications.|$|R
40|$|Abstract Scalable and fault {{tolerant}} <b>runtime</b> <b>environments</b> {{are needed to}} support and adapt to the underlying libraries and hardware which require {{a high degree of}} scalability in dynamic large-scale environments. This paper presents a self-healing network (SHN) for supporting scalable and fault-tolerant <b>runtime</b> <b>environments.</b> The SHN is designed to support transmission of messages across multiple nodes while also protecting against recursive node and process failures. It will automatically recover itself after a failure occurs. SHN is implemented on top of a scalable fault-tolerant protocol (SFTP). The experimental results show that both the latest multicast and broadcast routing algorithms used in SHN are faster than the original SFTP routing algorithms...|$|R
25|$|Development on Pugs, {{the first}} high-traction implementation, began in 2005, {{and there have}} been {{multiple}} Perl 6 implementation projects. Rakudo Perl 6 is based on NQP (Not Quite Perl) and can use MoarVM or the Java Virtual Machine as a <b>runtime</b> <b>environment,</b> and releases a new version every month; in July 2010, the project released the first Rakudo Star distribution, a useful and usable collection of a Perl 6 implementation and related materials. Larry Wall maintains a reference grammar known as STD.pm6, written in Perl 6 and bootstrapped with Perl 5.|$|E
25|$|The {{platform}} {{uses the}} object-oriented Java programming language. It {{is part of}} the Java software-platform family. Java ME was designed by Sun Microsystems, acquired by Oracle Corporation in 2010; the platform replaced a similar technology, PersonalJava. Originally developed under the Java Community Process as JSR 68, the different flavors of Java ME have evolved in separate JSRs. Oracle provides a reference implementation of the specification, but has tended not to provide free binary implementations of its Java ME <b>runtime</b> <b>environment</b> for mobile devices, rather relying on third parties to provide their own.|$|E
2500|$|CommSec's {{frequent}} equities, CFDs {{and options}} traders use the realtime trading platform CommSecIRESS. It is a web-based solution, developed by IRESS Market Technology (...) {{and based on}} the Java <b>runtime</b> <b>environment.</b> This platform combines the majority of the features of the website, while adding more advanced features and streaming live data from the Australian Securities Exchange.|$|E
30|$|There are {{a number}} of {{technological}} challenges for realizing mobile multi-device ecosystems, including binding, security, spatial registration, heterogeneous platforms and sensors, non-touch interaction as well as development and <b>runtime</b> <b>environments.</b> Twenty-seven papers were classified into this category.|$|R
50|$|The Java browser plug-in {{relies on}} NPAPI, which many web browser vendors are deprecating {{due to its}} age and {{security}} issues. In January 2016, Oracle announced that Java <b>runtime</b> <b>environments</b> based on JDK 9 will discontinue the browser plug-in.|$|R
5000|$|Behavior. The {{behavior}} of a live distributed object {{is characterized by the}} set of possible patterns of external interactions that its proxies can engage in with their local <b>runtime</b> <b>environments.</b> These interactions are modeled as exchanges of explicit events (messages).|$|R
2500|$|Shell functions, {{especially}} if the command being created needs to modify the internal <b>runtime</b> <b>environment</b> of the shell itself (such as environment variables), needs to change the shell's current working directory, or must be implemented {{in a way which}} guarantees they it appear in the command search path for anything but an interactive shell (especially any [...] "safer" [...] version of rm, cp, mv and so forth).|$|E
2500|$|Sun's {{goal was}} to replace the parts that remain {{proprietary}} and closed-source with alternative implementations and make the class library completely free and open source. In the meantime, a third-party project called IcedTea created a completely free and highly usable JDK by replacing encumbered code with either stubs or code from GNU Classpath. However OpenJDK has since become buildable without the encumbered parts (from OpenJDK 6 b10) and has become the default <b>runtime</b> <b>environment</b> for most Linux distributions.|$|E
2500|$|The Java {{platform}} {{consists of}} several programs, {{each of which}} provides a portion of its overall capabilities. [...] For example, the Java compiler, which converts Java source code into Java bytecode (an intermediate language for the JVM), is provided {{as part of the}} Java Development Kit (JDK). [...] The Java <b>Runtime</b> <b>Environment</b> (JRE), complementing the JVM with a just-in-time (JIT) compiler, converts intermediate bytecode into native machine code on the fly. The Java platform also includes an extensive set of libraries.|$|E
40|$|A {{software}} system has dynamic adaptability {{if it can}} adapt itself to dynamically changing <b>runtime</b> <b>environments.</b> A component-based {{software system}} with dynamic adaptability (called dynamically adaptable component-based software system) can change its own behaviors depending on states of <b>runtime</b> <b>environments</b> in exible way. To realize the well-suited behaviors for the states, it changes: 1) behaviors of each component, 2) the structure of components composition, in runtime. We have proposed a software model with dynamic adaptability called DAS and its description language LEAD++. The DAS model is a reective software model, and LEAD++ is an object-oriented reective language based on Java. In this paper, we mention how to construct dynamically adaptable component-based software systems using LEAD++. ...|$|R
40|$|Software has dynamic {{adaptability}} if it {{can adapt}} itself to dynamically changing <b>runtime</b> <b>environments.</b> As open-ended distributed systems and mobile computing systems have spread widely, the need for software with dynamic adaptability increases. We propose {{a model of the}} software with dynamic adaptability. We are currently designing and implementing a programming language based on the model. The basic idea is that we introduce the mechanism which changes procedure invocations dynamically depending on the states of <b>runtime</b> <b>environments.</b> Our language LEAD++ provides the mechanism as a language functionality. Although our software model is simple, it can realize highly dynamic adaptability (including extensibility) of the software. By using LEAD++, we can develop dynamically adaptable software easily and systematically. I...|$|R
40|$|Dynamic compilers (or Just-in-Time [JIT] compilers) {{are a key}} {{component}} of managed <b>runtime</b> <b>environments.</b> This paper describes the design and implementation of the StarJIT compiler, a dynamic compiler for Java Virtual Machines and Common Language Runtime platforms. The goal of the StarJIT compiler is to build an infrastructure to research the influence of managed <b>runtime</b> <b>environments</b> on Intel architectures. The StarJIT compiler can compile both Java Infrastructure (CLI) bytecodes, and it uses a single intermediate representation and global optimization framework for both Java and CLI. The StarJIT compiler is designed to generate optimized code for the major Intel architectures and currently targets two Intel architectures: IA- 32 and the Itanium Processor Family...|$|R
2500|$|The Java <b>runtime</b> <b>environment</b> has {{a history}} of {{bundling}} sponsored software to be installed by default during installation and during the updates which roll out every month or so. This includes the [...] "Ask.com toolbar" [...] that will redirect browser searches to ads and [...] "McAfee Security Scan Plus". These offers can be blocked through a setting in the Java Control Panel, although this is not obvious. This setting is located under the [...] "Advanced" [...] tab in the Java Control Panel, under the [...] "Miscellaneous" [...] heading, where the option is labelled as an option to suppress [...] "sponsor offers".|$|E
2500|$|There are {{a number}} of other common DOS extenders, the most notable of which is the <b>runtime</b> <b>environment</b> for the Watcom compilers, DOS/4GW, which was very common in games for DOS. Such a game would consist of either a DOS/4GW 32-bit kernel, or a stub which loaded a DOS/4GW kernel located in the path or in the same {{directory}} and a 32-bit [...] "linear executable". Utilities are available which can strip DOS/4GW out of such a program and allow the user to experiment with any of the several, and perhaps improved, DOS/4GW clones. Another popular API for DOS extenders often used in DOS games was VCPI.|$|E
2500|$|Java SE 8 (March 18, 2014) – Notable changes include language-level {{support for}} lambda {{expressions}} (closures) and default methods, the Project Nashorn JavaScript runtime, a new Date and Time API inspired by Joda Time, and {{the removal of}} PermGen. This version is not officially supported on the Windows XP platform. However, due to the end of Java 7's lifecycle it is the recommended version for XP users. Previously, only an unofficial manual installation method had been described for Windows XP SP3. It refers to JDK8, the developing platform for Java that also includes a fully functioning Java <b>Runtime</b> <b>Environment.</b> Java 8 is supported on Windows Server 2008 R2 SP1, Windows Vista SP2 and Windows 7 SP1, [...] Ubuntu 12.04 LTS and higher (and some other OSes).|$|E
50|$|Some JavaScript {{libraries}} {{allow for}} easier integration of JavaScript with other web development technologies, such as CSS, PHP, Ruby, and Java. Many libraries include code to detect differences between <b>runtime</b> <b>environments,</b> {{and remove the}} need for applications to allow for such inconsistencies.|$|R
40|$|Abstract. High {{performance}} computing platforms are becoming larger, leading to scalability and fault-tolerance issues for both applications and <b>runtime</b> <b>environments</b> (RTE) dedicated {{to run on}} such machines. After being deployed, usually following a spanning tree, a RTE needs to build its own communication infrastructur...|$|R
40|$|A {{system has}} dynamic {{adaptability}} {{if it can}} adapt itself to dynamically changing <b>runtime</b> <b>environments.</b> As open-ended distributed systems and mobile computing systems have spread widely, the need for software with dynamic adaptability increases. We propose a model of software with dynamic adaptability and the object-oriented reflective language LEAD++ based on the model. The basic idea is that we introduce the mechanism which changes procedure invocations dynamically depending on the states of <b>runtime</b> <b>environments.</b> The mechanism forms a meta-level architecture, and realizes dynamic adaptability in reflective way. LEAD++ provides the mechanism as a language functionality. We are currently implementing a prototype of LEAD++ as a preprocessor of Java. Using LEAD++, we can systematically describe dynamically adaptable applets, mobile objects, etc...|$|R
