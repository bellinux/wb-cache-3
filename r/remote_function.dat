28|211|Public
5000|$|A <b>Remote</b> <b>Function</b> Call (RFC) is {{the call}} or remote {{execution}} of a <b>Remote</b> <b>Function</b> Module in an external system.In the SAP system, these functions are provided by the RFC interface system. The RFC interface system enables function calls between two SAP systems.There are 3 different versions of RFC communication: ...|$|E
50|$|<b>Remote</b> <b>Function</b> Call is the {{proprietary}} SAP SE interface. <b>Remote</b> <b>Function</b> Call (RFC) is {{the standard}} SAP interface for communication between SAP systems. The RFC calls a function to be executed in a remote system. <b>Remote</b> <b>function</b> calls {{may be associated with}} SAP software and ABAP programming and provide a way for an external program (written in languages such as PHP, ASP, Java, or C, C++) to use data returned from the server. Data transactions are not limited to getting data from the server, but can insert data into server records as well. SAP can act as the Client or Server in an RFC call.|$|E
5000|$|<b>Remote</b> <b>Function</b> Call is the {{standard}} SAP interface for communication between SAP systems. RFC calls a function to be executed in a remote system.|$|E
5000|$|Definition of {{possible}} introspection capabilities for call arguments and attributes of <b>remote</b> <b>functions</b> (e.g. data types, counts).|$|R
50|$|The {{callback}} is {{that function}} inside the Json object passed {{as an additional}} parameter to the <b>remoted</b> <b>function.</b>|$|R
5000|$|Direct control: Multi-layered 28 <b>function</b> <b>remote</b> {{including}} demo <b>function</b> {{and volume}} control ...|$|R
50|$|Each ABAP {{program can}} call a <b>remote</b> <b>function</b> module using the command CALL FUNCTION...DESTINATION. The {{parameter}} DESTINATION informs the SAP system that the called function module {{runs in a}} different system to the calling system. RFC communication with the remote system takes place {{as a part of}} the CALL FUNCTION command.|$|E
50|$|If a <b>remote</b> <b>function</b> is called, {{the client}} library creates an object {{describing}} the call, including all parameters. This object is serialized using the Boost serialization library {{and transferred to}} the server. Currently {{this can be done}} using Unix domain sockets or TCP. The server deserializes the object and calls the corresponding method. The result (return value or exception) is again serialized and sent back to the client.|$|E
50|$|DSP/BIOS Link or DSPLINK is an IPC (interprocessor communications) {{scheme for}} passing {{messages}} and data in multiprocessor systems. In {{the case of}} the DaVinci DSP family from Texas Instruments, this scheme would allow passing of messages and data between an ARM client and a DSP server. DSPLINK can be used to implement a layer of software abstraction called a RPC that allows a <b>remote</b> <b>function</b> on the DSP to appear as local function calls in the ARM application code. The Codec Engine IPC communication layer is implemented using a RPC call scheme built on top of DSP/BIOS LINK.|$|E
50|$|This {{method of}} <b>remoting</b> <b>functions</b> from Java to JavaScript gives DWR users a feel much like {{conventional}} RPC mechanisms like RMI or SOAP, {{with the benefit}} that it runs over the web without requiring web browser plug-ins.|$|R
5000|$|The {{evaluation}} {{board has}} a built-in 2.4 GHz IEEE 802.15.4 transceiver and Lower MAC (so supports 802.15.4, ZigBee RF4CE, ZigBee Pro, 6LoWPAN (Contiki) wireless protocols). The SoC contains 128-Kbyte flash and 8-Kbyte RAM memory. Flash memory is upgradable too via USB. It has an ARM Serial Wire Debug (SWD) interface (Remote board) and {{is designed to be}} powered by USB or with 2 AAA batteries (Remote board). There are two user-defined LEDs (green and yellow) and five push buttons to create easy-to-use <b>remote</b> <b>functions</b> (<b>Remote</b> board).|$|R
50|$|The BD Remote Control (CECHZR1) is a Bluetooth {{remote control}} which {{features}} standard Blu-ray Disc and DVD <b>remote</b> <b>functions</b> such as chapter display/select and one-touch menu control. In addition {{it has all}} standard PlayStation buttons: d-pad, , , , , L1, L2, L3, R1, R2, R3, Start, Select and a PS/Home button for turning on and off your PS3 {{and going to the}} XMB.|$|R
50|$|Composite {{applications}} function by reusing existing functionality {{to provide}} a new service; in this they are principally similar to mash-ups, although the domain and business areas of mash-ups and composite applications can be quite different or even unrelated. CAF realizes this reuse by enabling the import, edit, mapping and composition of existing web services and RFCs. (RFC - <b>remote</b> <b>function</b> calls - these are special types of ABAP functions that can be reused outside an ABAP system.) Another reuse of existing functionality is achieved by CAFs integration with KM (Knowledge Management). KM is a SAP-specific document management system, which is also {{an integral part of}} SAP NetWeaver.|$|E
5000|$|Prodigy's legacy {{architecture}} was novel at {{the time}} and anticipated much of current web browser technology. It leveraged the power of the subscriber's PC to maintain session state, handle the user interface, and process applications formed from data and interpretative program objects which were largely pulled from the network when needed. At a time when {{in the state of the}} art, distributed objects were handled by RPC equivalents (<b>remote</b> <b>function</b> calls to well known servers in which final results were returned to the caller), Prodigy pioneered the concept of actually returning interpretable, [...] "platform independent" [...] objectsto the caller for subsequent processing. This approach anticipated such things as Java applets and Javascript. Prodigy also helped pioneer true distributed object-oriented client-server implementations as well as incidental innovations such as the equivalent of HTML Frames, pre-fetch, etc. [...] Prodigy patented its implementation (US 5,347,632 et al.) and these patents are, as of this entry, among the most highly cited of all software patents.|$|E
40|$|A {{parallel}} programming system, called MPC++, provides parallel primitives {{such as a}} <b>remote</b> <b>function</b> invocation, a global pointer, and a synchronization structure using the C++ template feature. The system has run on a cluster of homogeneous computers. In this paper, the runtime system is extended to run on a cluster made up of heterogeneous computers environment. Unlike other distributed or {{parallel programming}} systems on heterogeneous computers, the same program on the homogeneous environment runs on the heterogeneous environment in this extension. 1. Introduction Most parallel programming language systems support not only communication between computers but also support <b>remote</b> <b>function</b> invocation and other parallel primitives. If such a system is designed to run on homogeneous {{as well as a}} heterogeneous computers environment, some issues, e. g., data conversion and the address of a <b>remote</b> <b>function,</b> must be solved. There are two approaches: One is to provide a parallel programming li [...] ...|$|E
50|$|This adapter {{has its own}} ATI video chip, {{and will}} cause the onboard video chip to get disabled. The reason for this was to resolve some of the {{problems}} with capturing the video for the <b>remote</b> KVM <b>function</b> that the original RSA experienced. Just like the original RSA, in the event of chaining the <b>remote</b> KVM <b>function</b> is only supported on the server with the adapter installed.|$|R
40|$|Abstract—This paper {{describes}} how new functions {{can be developed}} for automated analysis of data collected in substations of an electric power system. The new functions are first defined and architecture of the integrated substation application is proposed. Database and user interfacing needs are also presented. Once fully implemented, this solution will serve both local and <b>remote</b> <b>functions</b> allowing further benefits {{to be drawn from}} the concept of substation data integration and information exchange. I...|$|R
30|$|Since the <b>remote</b> work <b>function</b> {{has limited}} {{capability}} to support observational modeling [11, 30], {{and because it}} has increased discretion and reduced feedback compared to traditional office settings [31 – 33], the <b>remote</b> work <b>function</b> is less externally structured. Since congruence between a person’s cognitive style and the person’s task environment is an important condition for building commitment [30, 34], liberals should be more committed to the less structured environment of remote work than conservatives [26].|$|R
40|$|This course {{focuses on}} Object-Oriented Programming and {{programming}} techniques {{both at the}} application layer and the transport layer of the TCP/IP protocol stack. Additional concepts covered include text transport (moving text from one computer to another over the network), data transport, object transport, <b>remote</b> <b>function</b> calls, and class transport. This free course may be completed online at any time. See course site for detailed overview and learning outcomes. (Computer Science 407) ...|$|E
40|$|International audienceOcsigen is a {{framework}} for programming highly dynamic web sites in Objective Caml. It allows to program sites as Ocaml applications and introduces new concepts {{to take into account}} the particularities of Web interaction, especially the management of URLs and sessions. This paper describes how Ocsigen uses the Objective Caml type system in a thoroughgoing way in order to produce valid XHTML and valid <b>remote</b> <b>function</b> calls through links and form clicking. It also describes how Ocsigen handles the progression of a Web user through a site, using sophisticated and high-level sessions mechanisms...|$|E
40|$|Abstract — With the {{emergence}} of a ubiquitous web of data and services, interoperability between those services without the need for pre-coordination becomes of great importance. However, current web services are often engineered in the <b>remote</b> <b>function</b> call style. This imposes very specific interaction patterns on the peers involved, and creates a significant barrier to interoperability. This work introduces a different communication abstraction, the Free Speech system, which aims removing any ordering constraints on the communication that are not strictly needed for business requirements. We compare our first implementation of some services in the Free Speech system with a classic WSDL implementation of the same services. Our first experiments show that the Free Speech approach results in a much higher degree of interoperability between services with different business requirements...|$|E
2500|$|HackingTeam enables {{clients to}} perform <b>remote</b> {{monitoring}} <b>functions</b> against citizens via their RCS (Remote Control Systems), including their Da Vinci and Galileo platforms: ...|$|R
50|$|Aqua Vita is {{compatible}} with the <b>Remote</b> Play <b>function</b> and as such can run on an activated PlayStation Portable through a wi-fi connection.|$|R
5000|$|HackingTeam enables {{clients to}} perform <b>remote</b> {{monitoring}} <b>functions</b> against citizens via their RCS (Remote Control Systems), including their Da Vinci and Galileo platforms: ...|$|R
40|$|Authenticated actions {{provides}} {{fine grained}} <b>remote</b> <b>function</b> execution in a distributed system that crosses organizational boundaries and includes mobile hosts. Two principals can mutually authenticate {{even if they}} are disconnected {{from the rest of the}} system. Authenticated actions provides an excellent infrastructure for developing secure system administration tools. 1. 0 Introduction We are developing a single infrastructure to support users performing and delegating restricted actions in a system that includes mobile machines and crosses organizational boundaries. Given this infrastructure, we plan to use it for secure remote execution allowing us to give external users access to our machines, updating and keeping software consistent between disconnected machines, gathering statistics and executing tests on our machines, and allowing users to make restricted updates to system files. To achieve these goals, our infrastructure will need to:. Use cryptographic authentication,. Allow [...] ...|$|E
40|$|Abstract. In {{our recent}} work we envisioned a Web where functions, like Linked Data, can be openly {{published}} and {{available to all}} the users of any remote sparql endpoint. The resulting Web of Functions can be realized by introducing a call sparql extension that can invoke any <b>remote</b> <b>function</b> (custom third-party extensions) by only knowing its corresponding URI, while the implementation and the computational resources are made available by the function publisher. In this paper we demo our framework {{with a set of}} functions showing (1) advanced use of its higher-order expressivity power featuring, e. g., function composition of third-party functions, and (2) a possible bridge between hundreds of standard Web APIs and the Web of Functions. In our view these functions found an initial nucleus to which anyone can contribute within the decentralized Web of Functions, made available through call. ...|$|E
40|$|Concert/C {{is a new}} {{language}} for distributed C programming that extends ANSI C to support distribution and process dynamics. Concert/C provides {{the ability to create}} and terminate processes, connect them together, and communicate among them. It supports transparent <b>remote</b> <b>function</b> calls (RPC) and asynchronous messages. Interprocess communications interfaces are typed in Concert/C, and type correctness is checked at compile time wherever possible, otherwise at runtime. All C data types, including complex data structures containing pointers and aliases, can be transmitted in RPCs. Concert/C programs run on a heterogeneous set of machine architectures and operating systems and communicate over multiple RPC and messaging protocols. The current Concert/C implementation runs on AIX 3. 2 1, SunOS 4. 1, Solaris 2. 2 and OS/ 2 2. 1, and communicates over Sun RPC, OSF/DCE and UDP multicast. Several groups inside and outside IBM are actively using Concert/C, and it is available via anonymo [...] ...|$|E
5000|$|<b>Remote</b> radio {{management}} <b>functions</b> - Stun/Kill/Revive and Monitor ...|$|R
50|$|This is {{the first}} version to support remote KVM over Ethernet. But when {{chaining}} is used, only the server with the adapter installed supports the <b>remote</b> KVM <b>function.</b>|$|R
40|$|Summary: This paper {{presents}} {{functional requirements}} for the Automated Analysis Substation System (AASS) implemented at Texas A&M University, aimed at monitoring functions using data measured by multiple substation Intelligent Electronic Devices (IEDs). The implemented system {{is based on a}} new concept of data integration and information exchange where the data from several substation IEDs is integrated and information needed by various groups of utility users is extracted. Once fully implemented, this solution will provide both local and <b>remote</b> <b>functions</b> allowing further benefits to be drawn from the concept of substation data integration and information exchange...|$|R
40|$|Ubiquitous {{information}} access within intelligent environments - {{like the}} SmartFactoryKL -will {{become more and}} more important in everyday life. Universal mobile interaction devices will increase the flexibility of the service men during their maintenance task. Although this greater flexibility can improve the maintenance processes it also results in new problems for the users (e. g. information flood, <b>remote</b> <b>function</b> controls) and developers (e. g. multi-platform development) that have to be addressed to guaranty the efficient development of usable, interactive systems for a safe human-machine interaction in such environments. In this article we present a model-based architecture for the design of context-sensitive mobile user interfaces that allow the abstract specification of an run-time adaptive user interface. Based on the model-based architecture, a prototypical implementation of a model interpreter -the SmartMote - and an industrial use case are presented that presen t the use of a run-time adaptive user interface and the feasibility of the presented approach...|$|E
40|$|PLAN is a {{language}} designed for programming active networks, and can more generally {{be regarded as}} a model of mobile computation. PLAN generalizes the paradigm of imperative functional programming in an elegant way that allows for recursive, <b>remote</b> <b>function</b> calls, and it provides a clear mechanism for the interaction between host and mobile code. Techniques for specifying and reasoning about such languages are of growing importance. In this paper we describe our specification of PLAN in the rewriting logic language Maude. We show how techniques for specifying the operational semantics of imperative functional programs (syntax-based semantics) and for formalizing variable binding constructs and mobile environments (CINNI calculus) are used in combination with the natural representation of concurrency and distribution provided by rewriting logic to develop a faithful description of the informal PLAN semantics. We also illustrate the wide-spectrum approach to formal modeling supported by Maude: executing PLAN programs; analyzing PLAN programs using search and model-checking; proving properties of particular PLAN programs; and proving general properties of the PLAN language...|$|E
40|$|Multi-agent systems (MAS) are {{emerging}} as a promising paradigm for conceptualizing, designing and implementing large-scale heterogeneous software systems. The key advantage of looking at components in such systems as autonomous agents is that as agents {{they are capable of}} flexible self-organization, instead of being rigidly organized by the system's architect. However, self-organization is like evolution-it {{takes a lot of time}} and the results are not guaranteed. More often than not, the system's architect has an idea about how the agents should organize themselves-what types of organizations they should form. In our work, we tried to solve the problem of modelling organizations and their roles in a MAS, independent of the particular agent platform on which the MAS will eventually run. First and foremost, we have proposed a metamodel for expressing platform-independent organization models. Furthermore, we have implemented the proposed metamodel for the Jade agent platform as a module extending this framework. Finally, we have demonstrated the use of our module by modelling three specific organizations: <b>remote</b> <b>function</b> invocation, arithmetic expression evaluation and sealed-bid auction. Our work shows how to separate the behaviour acquired through a role from the behaviour intrinsic to an agent. This [...] ...|$|E
50|$|Genesis Connected Services, a {{cloud-based}} service, features <b>remote</b> vehicle <b>functions</b> such as <b>Remote</b> Start with Climate Control and Remote Lock/Unlock {{is available on}} iOS, Android and an Alexa Skill developed with Amazon.|$|R
50|$|An English-language demo for Lair {{was made}} {{available}} to Asian markets only, excluding Japan, in April 2008. Even though the Lair Trial Version includes the gameplay patch it is not compatible with the <b>Remote</b> Play <b>function.</b>|$|R
50|$|The main unique {{feature of}} the Dimensia system was the MRT 003, a 32-kilobyte {{built-in}} computer module which allowed the monitor to communicate with all Dimensia components and the <b>remote</b> <b>functions.</b> All components were connected via the control bus found on the I/O panel {{on the back of}} the TV. The control bus was a unique RCA connector which was colored black. All Dimensia branded components had this control jack and they all interconnected by using RCA plugs that could piggy-back, resulting in a daisy chain which simplified wiring. This was known as the SystemLink, a communication system that had 16 kilobytes of computer memory.|$|R
