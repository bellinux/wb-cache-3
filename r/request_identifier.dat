4|9|Public
50|$|All {{of these}} linearized objects {{are put into}} {{envelopes}} that enable the client and server agents to coordinate their processing. In DDM architecture, these envelopes are called Data Stream Structures (DSS). Commands are put into a Request DSS (RQSDSS), replies are put into a Reply DSS (RPYDSS), and other objects are put into an Object DSS (OBJDSS). There can be only one command in a RQSDSS and only one reply in RPYDSS, but many objects, such as records, can be put into an OBJDSS. Further many OBJDSSes can be chained to a RQSDSS or a PRYDSS to accommodate as many objects as necessary A DSS consists of the total length of the DSS, a flag byte identifying the type of DSS, a <b>request</b> <b>identifier,</b> and the linearized objects in the DSS. The <b>request</b> <b>identifier</b> ties an RQSDSS with subsequent OBJDSSes from the client, such as the records to be loaded into a file by the Load File command. The <b>request</b> <b>identifier</b> also ties the RQSDSS from the client with a RPYDSS or the OBJDSSes from the server to the client.|$|E
30|$|In this header payment <b>request</b> <b>{{identifier}}</b> (PID) is a identifier of {{the transaction}} generated by the vendor and modelID identifies the model.|$|E
3000|$|... key <b>request</b> <b>identifier</b> (KRID). It {{identifies}} the key request {{process that is}} being performed between client and broker and is generated as KRID=H(C, B, vCall-ID, VendorKeysReq) [...]...|$|E
30|$|Sequences were {{deposited}} in the GenBank database of the NCBI under Accession Numbers CA_ 000385775.1, GCA_ 000385795.1, GCA_ 000506605.2, GCA_ 000692035.1, GCA_ 000506665.1, GCA_ 000506685.1, GCA_ 000385815.1, GCA_ 000385835.1, GCA_ 000430345.1. Strains were {{deposited in}}to the all-Russian collection of microorganisms ([URL] and available on <b>request</b> (VKM <b>identifiers</b> VKM B- 3123 –VKM B- 3131).|$|R
50|$|When {{creating}} a <b>request,</b> the End-to-End <b>Identifier</b> {{is set to}} a locally unique value. The End-to-End Identifier is not modified by Diameter agents of any kind, and the same value in the corresponding request {{is used in the}} answer.|$|R
40|$|Abstract. Causeway {{provides}} runtime {{support for}} the development of distributed meta-applications. These meta-applications control or analyze the behavior of multi-tier distributed applications such as multi-tier web sites or web services. Examples of meta-applications include multitier debugging, fault diagnosis, resource tracking, prioritization, and security enforcement. Efficient online implementation of these meta-applications requires meta-data to be passed between the different program components. Examples of metadata corresponding to the above meta-applications are <b>request</b> <b>identifiers,</b> priorities or security principal identifiers. Causeway provides the infrastructure for injecting, destroying, reading, and writing such metadata. The key functionality in Causeway is forwarding the metadata associated with a request at so-called transfer points, where the execution of that request gets passed from one component to another. This is done automatically for system-visible channels, such as pipes or sockets. An API is provided to implement the forwarding of metadata at system-opaque channels such as shared memory. We describe the design and implementation of Causeway, and we evaluate its usability and performance. Causeway’s low overhead allows it to be present permanently in production systems. We demonstrate its usability by showing how to implement, in 150 lines of code and without modification to the application, global priority enforcement in a multitier dynamic web server. ...|$|R
40|$|In {{order to}} {{transmit}} this command using the MAC data service, specified in [B 1], {{the following information}} shall {{be included in the}} MAC frame header. The destination MAC address and PAN identifier shall be set to the network address and PAN identifier, respectively, of the first hop in the path back to the originator of the corresponding route request command frame. The destination PAN identifier shall be the same as the PAN identifier of the originator. The source MAC address and PAN identifier shall be set to the address and PAN identifier of the device sending the route reply command, {{which may or may not}} be the device from which the command originated. The frame control field shall be set to specify that the frame is a MAC data frame with MAC security disabled, since any secured frame originating from the NWK layer shall use NWK layer security. The transmission options shall be set to require acknowledgment. The addressing mode and intra-PAN flags shall be set to support the addressing fields described here. 2. 5. 2. 2 NWK header fields In order for this route reply to reach its destination and for the route discovery process to complete correctly, the following information must be provided. The frame type subfield of the NWK frame control field should be set to indicate that this frame is a NWK layer command frame. The destination address field in the NWK header shall be set to the network address of the first hop in the path back to the originator of the corresponding route request. The source address in the NWK header shall be set to the NWK 16 -bit network address of the device that is transmitting the frame. 2. 5. 2. 3 NWK payload fields The NWK frame payload contains a command identifier field, a command options field, the route <b>request</b> <b>identifier,</b> originator and responder addresses and an up-to-date summation of the path cost. The command frame identifier shall contain the value indicating a route reply command frame. 2. 5. 2. 3. 1 Command options field The format of the 8 -bit command options field is shown in Figure 43. Figure 43 Route reply command options field The route repair sub-field is a single-bit field. It shall have a value of 1 if and only if the route request command frame is being generated as part of a route repair operation for mesh network topology (see subclaus...|$|E
5000|$|BRIN {{have some}} {{similarities}} to Oracle Exadata [...] "Storage Indexes". Exadata has the strong {{concept of a}} 'storage layer' in its architecture stack. Table data is held in blocks or 'storage cells' on the storage servers. These storage cells are opaque to the storage server and are returned to the database engine on <b>request,</b> by their <b>identifier.</b> Previously, the database nodes must request all the storage cells in order to scan them.|$|R
50|$|The Diameter {{protocol}} {{requires that}} relaying and proxying agents maintain transaction state, {{which is used}} for failover purposes. Transaction state implies that upon forwarding a <b>request,</b> its Hop-by-Hop <b>Identifier</b> is saved; the field is replaced with a locally unique identifier, which is restored to its original value when the corresponding answer is received. The request’s state is released upon receipt of the answer. Received answers that do not match a known Hop-by-Hop Identifier are ignored by the Diameter agent.|$|R
40|$|When a Location Information Server {{receives}} {{a request for}} location information (using the locationRequest message), described in the base HTTP-Enabled Location Delivery (HELD) specification, it uses the source IP address of the arriving message as a pointer to the location determination process. This is sufficient in environments where {{the location of a}} Device can be determined based on its IP address. Two additional use cases are addressed by this document. In the first, location configuration requires additional or alternative identifiers from the source IP address provided in the request. In the second, an entity other than the Device requests the location of the Device. This document extends the HELD protocol to allow the location request message to carry Device identifiers. Privacy and security considerations describe the conditions where <b>requests</b> containing <b>identifiers</b> are permitted. Status of This Memo This is an Internet Standards Track document. This document {{is a product of the}} Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by th...|$|R
30|$|At boot time, {{the devices}} {{are not yet}} {{configured}} {{and they do not}} know their own identifier. Indeed, the manufacturer does not know the bus on which the device will be plugged. However, when the firmware looks for all available devices (using the assembler instruction mov to read the PCI Express space mapped in memory), each memory access is processed by the host bridge. The host bridge then translates this access into a PCI Express configuration request which is routed to the corresponding bus. In particular, this <b>request</b> contains the <b>identifier</b> of the contacted device. If this device is available in the system, it receives this request and then knows its identifier. This step is important to allow a device to communicate.|$|R
40|$|Abstract. This paper {{presents}} our {{solution to}} supporting runtime migration of Web application interfaces among devices offering different interaction modalities, in particular graphic to vocal platform migration and vice versa. Migrating between platforms implies {{keeping track of}} the user interactions in order to retrieve the runtime state of the interface and maintaining interaction continuity on the target device. The system can serve user-issued migration <b>requests</b> containing the <b>identifier</b> of the selected target device, and can also automatically start the migration procedure when environment conditions require it. In automatic migration the target platform has to be automatically selected as well. To this aim, we consider devices belonging to a restricted environment and have defined selection rules in order to identify the most suitable available target for the ongoing migration. ...|$|R
40|$|In a {{retrieval}} environment, indexing is {{the task}} which consists in the assignment to stored records and incoming information <b>requests</b> of content <b>identifiers</b> capable of representing record or query content. It is known that effective content identifiers (index terms) must exhibit the correct level of specificity in a given collection environment. Terms that are too broad must be rendered specific by being utilized as term phrases, while narrow terms must be broadened by supplying synonymous or related terms normally extracted from a thesaurus. Formal proofs are given {{in the present study}} of the retrieval effectiveness of indexing policies using single terms, term phrases and thesaurus class assignments for puposes of content representation. Keywords and Phrases: automatic information retrieval, automatic indexing, content analysis, term phrases, thesaurus classes, term addition, term deletion, retrieval evaluation, recall and precision...|$|R

