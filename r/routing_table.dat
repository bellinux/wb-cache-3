1542|1024|Public
25|$|A stub area is an {{area which}} does not receive route {{advertisements}} external to the autonomous system (AS) and routing from within the area is based entirely on a default route. An ABR deletes type 4, 5 LSAs from internal routers, sends them a default route of 0.0.0.0 and turns itself into a default gateway. This reduces LSDB and <b>routing</b> <b>table</b> size for internal routers.|$|E
25|$|OSPF is an {{interior}} gateway protocol (IGP) for routing Internet Protocol (IP) packets solely within a single routing domain, such as an autonomous system. It gathers link state information from available routers and constructs a topology map of the network. The topology {{is presented as a}} <b>routing</b> <b>table</b> to the Internet layer which routes packets based solely on their destination IP address. OSPF supports Internet Protocol Version 4 (IPv4) and Internet Protocol Version 6 (IPv6) networks and supports the Classless Inter-Domain Routing (CIDR) addressing model.|$|E
25|$|As {{is it was}} prohibitively {{expensive}} for the hobbyist SysOp to have a dedicated connection to another system, FidoNet was developed as a store and forward network. Private email (Netmail), public message boards (Echomail) and eventually even file attachments on a FidoNet-capable BBS would be bundled into one or more archive files over a set time interval. These archive files were then compressed with ARC or ZIP and forwarded to (or polled by) another nearby node or hub via a dialup Xmodem session. Messages would be relayed around various FidoNet hubs until they were eventually delivered to their destination. The hierarchy of FidoNet BBS nodes, hubs, and zones was maintained in a <b>routing</b> <b>table</b> called a Nodelist. Some larger BBSes or regional FidoNet hubs would make several transfers per day, some even to multiple nodes or hubs, and as such, transfers usually occurred at night or early morning when toll rates were lowest. In Fido's heyday, sending a Netmail message to a user on a distant FidoNet node, or participating in an Echomail discussion could take days, especially if any FidoNet nodes or hubs in the message's route only made one transfer call per day.|$|E
50|$|In {{static routing}} (or non-dynamic routing), small {{networks}} may use manually configured <b>routing</b> <b>tables.</b> Larger networks have complex topologies {{that can change}} rapidly, making the manual construction of <b>routing</b> <b>tables</b> unfeasible. Nevertheless, most of the {{public switched telephone network}} (PSTN) uses pre-computed <b>routing</b> <b>tables,</b> with fallback routes if the most direct route becomes blocked (see routing in the PSTN).|$|R
40|$|This thesis {{deals with}} issue of routing between Autonomous Systems. For routing between {{autonomous}} systems is used Border Gateway Protocol (BGP). The routers in Autonomous Systems modify their <b>routing</b> <b>tables</b> based on BGP messages.   <b>Routing</b> <b>tables</b> {{are used for}} forwarding information on Internet. Issue of this thesis is analysis of change <b>routing</b> <b>tables</b> for eventually optimizing of routing architecture. First part of thesis is focused on theory of routers, routing ang BGP. Second part of this thesis focuses on implementation and execution experiments with <b>routing</b> <b>tables.</b> In this part are also described reached results...|$|R
40|$|Anecdotal {{evidence}} suggests that misconfiguration of backbone routers occasionally leads to an injection of large <b>routing</b> <b>tables</b> into the BGP routing system. In this paper, we investigate the detailed mechanics of router response to large BGP <b>routing</b> <b>tables.</b> We examine three commercial routers, and find that their responses vary significantly. Some routers exhibit table-size oscillations that {{have the potential to}} cause cascading failure. Others need operator intervention to recover from large <b>routing</b> <b>tables.</b> We also find that deployed resource control mechanisms, such as prefix limits and route flap damping, are only partially successful in mitigating the impact of large <b>routing</b> <b>tables...</b>|$|R
2500|$|Nodes can use {{mixtures}} of prefixes in their <b>routing</b> <b>table,</b> {{such as the}} Kad Network used by eMule. [...] The Kademlia network could even be heterogeneous in <b>routing</b> <b>table</b> implementations, {{at the expense of}} complicating the analysis of lookups.|$|E
2500|$|Each node {{maintains}} {{a set of}} links to other nodes (its neighbors or <b>routing</b> <b>table)</b> [...] Together, these links form the overlay network. A node picks its neighbors according to a certain structure, called the network's topology.|$|E
2500|$|The BROUTER process {{allowed for}} {{incoming}} requests to be [...] "routed" [...] to {{a copy of}} the database on another server. It was loaded on the Netware server and dealt with communication between multiple server processes running on the file-server through the use of two File Server Tables (FSTs). According to Pervasive, these provide a list of [...] "server names and addresses, and the Server <b>Routing</b> <b>Table</b> (SRT)". BROUTER also enabled communication requests to be routed to the correct server via SPX by looking up the BSPXCOM NLM and coordinated locks and other mechanisms that controlled access to the data in the Btrieve database.|$|E
40|$|The {{availability}} of IP networks {{has increased its}} importance due to the evolving use of real-time and mission-critical applications on IP networks. Methods for preparing alternate <b>routing</b> <b>tables</b> {{that can be used}} for fast restoration from link failures have been investigated. In such methods, each node has to compute a number of alternate <b>routing</b> <b>tables</b> in advance since they have to prepare for each potential failure. The resulting huge number of alternate <b>routing</b> <b>tables</b> has prevented these methods from being deployed. In this paper, we propose a method for reducing the number of alternate <b>routing</b> <b>tables</b> for link failure. It analyzes three types of shortest path trees on the basis of link-state information. We show that the number of alternate <b>routing</b> <b>tables</b> can be reduced to 1 / 100, on average, from that with the conventional method, and that they are small enough to be stored in the memory of IP routers...|$|R
40|$|We {{describe}} a peer-to-peer system similar to Ka­demlia {{based on the}} De-Brujin topology with provable consistency and allowing every message exchange to reinforce contact information. Ultimately simple <b>routing</b> <b>tables</b> are achieved by maintaining only two «buckets» of neighbors and providing maximal accuracy of <b>routing</b> <b>tables...</b>|$|R
40|$|In systems using shortest-path <b>routing</b> <b>tables,</b> {{a single}} link failure {{is enough to}} {{interrupt}} the message transmission by disconnecting one or more shortestpath spanning trees. The on-line recomputation of an alternative path or of the entire new shortest path trees, rebuilding the <b>routing</b> <b>tables</b> accordingly, is rathe...|$|R
50|$|Using the kernel {{protocol}} this internal <b>routing</b> <b>table</b> may {{be connected}} to the actual kernel <b>routing</b> <b>table.</b> This allows BIRD to export network routes from its internal <b>routing</b> <b>table</b> to the kernel <b>routing</b> <b>table</b> and optionally also learn about network routes from the kernel <b>routing</b> <b>table</b> (created externally by the administrator or by other means) and import these routes into its internal <b>routing</b> <b>table.</b>|$|E
50|$|BIRD {{implements}} {{an internal}} <b>routing</b> <b>table</b> {{to which the}} supported protocols connect. Most of these protocols import network routes to this internal <b>routing</b> <b>table</b> and also export network routes from this internal <b>routing</b> <b>table</b> to the given protocol. This way information about network routes is exchanged among different routing protocols.|$|E
50|$|Information in the {{topology}} table may {{be inserted}} into the router's <b>routing</b> <b>table</b> and can then be used to forward traffic. If the network changes, for example, a physical link fails or is disconnected, the path will become unavailable. EIGRP is designed to detect these changes and will attempt {{to find a new}} path to the destination. The old path that is no longer available is removed from the <b>routing</b> <b>table.</b> Unlike most distance vector routing protocols, EIGRP does not transmit all the data in the router's <b>routing</b> <b>table</b> when a change is made but will only transmit the changes that have been made since the <b>routing</b> <b>table</b> was last updated. EIGRP does not send its <b>routing</b> <b>table</b> periodically, but will only send <b>routing</b> <b>table</b> data when an actual change has occurred. This behavior is more inline with link-state routing protocols, thus EIGRP is mostly considered a hybrid protocol.|$|E
30|$|The location-based routing {{protocols}} determine the packet forwarding paths in wireless networks with mobile hosts. These protocols, for example, the Greedy Perimeter Stateless Routing (GPSR) protocol [1], {{do not make}} an explicit use of the <b>routing</b> <b>tables</b> {{because of the high}} overhead associated with maintaining the <b>routing</b> <b>tables.</b> With mobility, <b>routing</b> <b>tables</b> have to be frequently updated to reflect the frequent changes of network topology. The location-based {{routing protocols}} make a joint use of host identifiers and locations for determining the forwarding paths. The location-based forwarding makes each packet to stay geographically closer to the destination of the packet after each forwarding.|$|R
5000|$|Update the <b>routing</b> <b>tables</b> of nodes {{neighboring}} {{the newly}} split zone.|$|R
50|$|The <b>routing</b> <b>tables</b> are {{generated}} centrally {{based on the}} known topology of the network, the numbering plan, and analysis of traffic data. These are then downloaded to each exchange in the telephone operators network. Because of the hierarchical nature of the numbering plan, and its geographical basis, most calls can be routed based only on their prefix using these <b>routing</b> <b>tables.</b>|$|R
5000|$|If {{there are}} {{matching}} entries but the hop count metric {{is lower than}} the one already in its <b>routing</b> <b>table,</b> then the <b>routing</b> <b>table</b> is updated with the new route.|$|E
5000|$|In computing, [...] is {{a command}} used to view and {{manipulate}} the IP <b>routing</b> <b>table</b> in both Unix-like and Microsoft Windows operating systems. Manual {{manipulation of the}} <b>routing</b> <b>table</b> is characteristic of static routing.|$|E
5000|$|When a RIP router comes online, {{it sends}} a {{broadcast}} Request Message on all of its RIP enabled interfaces. All the neighbouring routers which receive the Request message respond back with the Response Message containing their <b>Routing</b> <b>table.</b> The Response Message is also gratuitously sent when the Update timer expires. On receiving the <b>Routing</b> <b>table,</b> the router processes each entry of the <b>routing</b> <b>table</b> as per the following rules ...|$|E
40|$|We {{consider}} {{the problem of}} optimizing the assignment of IP addresses to nodes in a network. A good assignment {{takes into account the}} natural hierarchy present in the network and assigns addresses {{in such a way as}} to minimize the sizes of <b>routing</b> <b>tables</b> on the nodes. Optimized IP address assignment benefits simulators and emulators, where scale precludes manual assignment, large <b>routing</b> <b>tables</b> can limit network size, and realism can matter. It benefits enterprise networks, where large <b>routing</b> <b>tables</b> can overburden the legacy routers frequently found in such networks. We outline one of the algorithms we are exploring, and describe a key underpinning: a metric, based on Routing Equivalent Sets (RES), that quantifies the extent to which routes to sets of destinations can be aggregated. We present preliminary results of using RES to find assignments that result in small <b>routing</b> <b>tables.</b> When applied to real Internet topologies, we find that our assignment algorithm yields a compression rate of two to three over random assignment. 1...|$|R
40|$|On the one hand, the {{correctness}} of {{routing protocols}} in networks {{is an issue}} of utmost importance for guaranteeing the delivery of messages from any source to any target. On the other hand, a large collection of routing schemes have been proposed during the last two decades, with the objective of transmitting messages along short routes, while keeping the <b>routing</b> <b>tables</b> small. Regrettably, all these schemes share the property that an adversary may modify the content of the <b>routing</b> <b>tables</b> with the objective of, e. g., blocking the delivery of messages between some pairs of nodes, without being detected by any node. In this paper, we present a simple certification mechanism which enables the nodes to locally detect any alteration of their <b>routing</b> <b>tables.</b> In particular, we show how to locally verify the stretch 3 routing scheme by Thorup and Zwick [SPAA 2001] by adding certificates of ~O(sqrt(n)) bits at each node in n-node networks, that is, by keeping the memory size of the same order of magnitude as the original <b>routing</b> <b>tables.</b> We also propose a new name-independent routing scheme using <b>routing</b> <b>tables</b> of size ~O(sqrt(n)) bits. This new routing scheme can be locally verified using certificates on ~O(sqrt(n)) bits. Its stretch is 3 if using handshaking, and 5 otherwise...|$|R
5000|$|The {{technique}} was later adapted {{for use in}} the contemporary link-state routing protocols IS-IS and OSPF. Cisco literature refers to enhanced interior gateway routing protocol (EIGRP) as a [...] "hybrid" [...] protocol, despite the fact it distributes <b>routing</b> <b>tables</b> instead of topology maps. However, it does synchronize <b>routing</b> <b>tables</b> at start up as OSPF does, and sends specific updates only when topology changes occur.|$|R
5000|$|If {{there are}} no route entries {{matching}} the one received then the route entry {{is added to the}} <b>routing</b> <b>table</b> automatically, along with the information about the router from which it received the <b>routing</b> <b>table.</b>|$|E
5000|$|Nodes can use {{mixtures}} of prefixes in their <b>routing</b> <b>table,</b> {{such as the}} Kad Network used by eMule. [...] The Kademlia network could even be heterogeneous in <b>routing</b> <b>table</b> implementations, {{at the expense of}} complicating the analysis of lookups.|$|E
50|$|Until late 2001, {{the global}} <b>routing</b> <b>table</b> was growing exponentially, {{threatening}} an eventual widespread breakdown of connectivity. In {{an attempt to}} prevent this, ISPs cooperated in keeping the global <b>routing</b> <b>table</b> as small as possible, by using Classless Inter-Domain Routing (CIDR) and route aggregation. While this slowed {{the growth of the}} <b>routing</b> <b>table</b> to a linear process for several years, with the expanded demand for multihoming by end user networks the growth was once again superlinear by the middle of 2004.|$|E
30|$|In {{order to}} {{restrict}} the overhead in maintaining <b>routing</b> <b>tables,</b> some ad hoc routing protocols have been proposed to eliminate or restrict the use of <b>routing</b> <b>tables.</b> Landmark-based <b>routing</b> protocols [11] only make limited use of <b>routing</b> <b>tables.</b> A landmark hierarchy is established in a landmark-based routing protocol. A network is divided into scopes. Each scope maintains one landmark, typically a router, which maintains routing information within the scope. The landmarks in different scopes interconnect themselves. Any packet sent between different scopes goes through the corresponding pair of landmark hosts. Landmarks exchange routing information among themselves. Other landmark-based routing protocols include the LANMAR routing protocol [12] and the Location-Aided Routing (LAR) protocol [13].|$|R
40|$|Abstract — When the {{topology}} of an IP network changes {{due to a}} link {{failure or}} a link weight modification, the <b>routing</b> <b>tables</b> of all the routers must be updated. Each of those updates may cause transient loops. In this paper, we prove that by ordering the updates of the <b>routing</b> <b>tables</b> on the routers, {{it is possible to}} avoid all transient loops during the convergence of ISIS or OSPF after a planned link failure, an unplanned failure of a protected link and after a link weight modification. We then propose a protocol that allows the routers to order the update of their <b>routing</b> <b>tables</b> to avoid transient loops whithout requiring any complex computation...|$|R
5000|$|... route (command): generic command for displaying/configuring TCP/IP <b>routing</b> <b>tables</b> (including gateways) on both Windows and Unix-like systems.|$|R
50|$|A <b>routing</b> <b>table</b> usually {{contains}} the IP address of a destination {{network and the}} IP address of the next gateway (next hop) along {{the path to the}} final network destination. Using a <b>routing</b> <b>table</b> to store a next hop for each 'known' destination is called next-hop forwarding. Therefore, a given gateway only knows one step along the path, not the complete path to a destination. It is also key to know that the next hops listed in a <b>routing</b> <b>table</b> are on networks to which the gateway is directly connected to.|$|E
50|$|With the {{shortest}} paths in hand, {{the next step}} is to fill in the <b>routing</b> <b>table.</b> For any given destination node, the best path for that destination is the node which is the first step from the root node, down the branch in {{the shortest}}-path tree which leads toward the desired destination node. To create the <b>routing</b> <b>table,</b> it is only necessary to walk the tree, remembering the identity of the node at the head of each branch, and filling in the <b>routing</b> <b>table</b> entry for each node one comes across with that identity.|$|E
5000|$|Revised <b>routing</b> <b>table</b> {{programming}} model simplifies {{network management}} software ...|$|E
25|$|This {{section is}} {{simplified}} {{to use a}} single bit; see the section accelerated lookups {{for more information on}} real <b>routing</b> <b>tables.</b>|$|R
40|$|Request {{patterns}} in P 2 P networks are not uniform, {{and the cost}} of communication depends on the traffic flows among peers. This paper illustrates how the processes in an overlay network can use the information about traffic flow pattern to modify their <b>routing</b> <b>tables</b> and minimize their communication costs. Two different adaptation strategies: selfish and altruistic are described and analyzed. The selfish protocol modifies the <b>routing</b> <b>tables</b> to suit each process individual needs, and is easy to implement, but the improvements are limited. Compared to this, the altruistic protocol that adjusts <b>routing</b> <b>tables</b> based on the needs of other processes, promises a much better performance. Experimental results support this observation. Despite the promise, there are concerns about the applicability of the altruistic protocol in an untrusted P 2 P network environment...|$|R
30|$|However, {{there has}} been little {{consideration}} for the effects due to device movement in CCN environments. Especially, content source mobility brings about big problems such as frequent routing updates and low routing aggregation. That is, a mobile content source has to update <b>routing</b> <b>tables</b> of all relevant content routers, which is very slow. Moreover, many mobile content sources would pollute the <b>routing</b> <b>tables</b> with specific prefixes, tarnishing the advantages of prefix aggregation using the hierarchical name structure.|$|R
