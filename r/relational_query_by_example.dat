0|10000|Public
40|$|We {{consider}} {{the requirements for}} the design and implementation of Image DataBase (IDB) systems which support the retrieval of medical images by content. Attention is focused on a methodology for the efficient representation and retrieval of medical images based on spatial information. The content of medical images is represented by Attributed Relational Graphs (ARGs) holding features of objects or regions and relationships between such objects or regions. The method can answer <b>queries</b> <b>by</b> <b>example,</b> such as "find all image examinations similar to Smith's examination". The performance of the method has been evaluated using a dataset of 13, 500 simulated, but realistic computed tomography and magnetic resonance images. Key-Words: image database, medical image, attributed <b>relational</b> graph, <b>query</b> <b>by</b> <b>example.</b> ...|$|R
30|$|The {{enormous}} {{growth of}} personal and on-line multimedia content has created the need for tools of automatic database management. Such management tools include, for instance, <b>query</b> <b>by</b> humming or <b>query</b> <b>by</b> <b>example,</b> multimedia classification, and speaker recognition. <b>Query</b> <b>by</b> <b>example</b> is an audio retrieval task where a user provides an example signal and the retrieval system returns similar samples from the database. The main problem in the <b>query</b> <b>by</b> <b>example</b> and the other above content management applications {{is to determine the}} similarity between two database items.|$|R
50|$|Typically, {{this type}} of search engine uses {{techniques}} of <b>query</b> <b>by</b> <b>example</b> or Image <b>query</b> <b>by</b> <b>example,</b> which use the content, shape, texture and color of the image to compare them in a database and then deliver the approximate results from the query.|$|R
5000|$|A visual <b>Query</b> <b>by</b> <b>Example</b> {{implementation}} {{that was}} supported by an AI engine.|$|R
40|$|This paper defines {{and studies}} {{the use of}} <b>query</b> <b>by</b> <b>example</b> (QBE) {{in the context of}} {{photograph}} retrieval. The novelty of our approach lies in considering an automatic indexing process of photographs as well as a representation of the features of image regions in a single knowledge representation formalism. Both symbolic and feature based representation are used during the <b>query</b> <b>by</b> <b>example</b> process. More precisely, the QBE process is able {{to take into account the}} symbolic descriptors of the images but also the extracted features from image under the form of histograms. The aim of this process is to detect the relative importance of the symbolic elements and of the feature elements according to the user's <b>query</b> <b>by</b> <b>example.</b> We experiment the <b>query</b> <b>by</b> <b>example</b> process on two collections of a total of 1100 photographs. The precision measures we have obtained are as good as a baseline defined as explicit textual queries processing...|$|R
5000|$|... query {{framework}} that supports an object-oriented expression framework, <b>Query</b> <b>by</b> <b>Example</b> (QBE), EJB QL, SQL, and stored procedures ...|$|R
5000|$|Most DW {{appliances}} use {{massively parallel}} processing (MPP) architectures to provide high query performance and platform scalability. MPP architectures consist of independent processors or servers executing in parallel. Most MPP architectures implement a [...] "shared-nothing architecture" [...] where each server operates self-sufficiently and controls its own memory and disk. DW appliances distribute data onto dedicated disk storage units connected to each server in the appliance. This distribution allows DW appliances {{to resolve a}} <b>relational</b> <b>query</b> <b>by</b> scanning data on each server in parallel. The divide-and-conquer approach delivers high performance and scales linearly as new servers are added into the architecture.|$|R
50|$|Image search: Although usually it's used simple {{metadata}} search, increasingly {{is being}} used indexing methods for making the results of users queries more accurate using <b>query</b> <b>by</b> <b>example.</b> For example, QR codes.|$|R
40|$|<b>Query</b> <b>by</b> <b>example</b> video {{retrieval}} aims at automatic {{retrieval of}} video samples which {{are similar to}} a user-provided example from video database. Considering that much of prior work on video analysis support retrieval using only visual features, in this paper, a two-step method for <b>query</b> <b>by</b> <b>example</b> is proposed, in which both audio and visual features are used. In the proposed method, a set of audio and visual features are, respectively, extracted from the shot level and key frame level. Among these features, audio features are employed to rough retrieval, while visual features are applied to refine retrieval. The experimental results demonstrate the good performance of the proposed approach...|$|R
40|$|We {{present a}} modular account of query shredding, the {{simulation}} {{of a single}} nested <b>relational</b> <b>query</b> <b>by</b> a number of flat <b>relational</b> <b>queries,</b> applicable to both set and multiset semantics. Our key insight is that shredding can be greatly simplified by first rewriting the input query into a canonical normal form. Normalisation allows us to define shredding translations on types and terms independently of one another, unlike previous work. An added benefit of normalisation is that we support higher-order terms for free, provided that the result type is a plain nested relation type (without higher order components). In order to generate SQL we consider several alternatives for generating indexes, focusing on a lightweight use of SQL OLAP features. We prove correctness of our translations, focusing on the central shredding step: shredding a nested query, running the shredded queries, and stitching the results back together yields the same results as running the nested query directly. 1...|$|R
40|$|<b>Query</b> <b>by</b> <b>example</b> of {{multimedia}} signals aims at automatic retrieval of media samples from a database, which {{are similar to}} a userprovided example. This paper proposes a method for <b>query</b> <b>by</b> <b>example</b> of audio signals. The method calculates a set of acoustic features from the signals and models their probability density functions (pdfs) using Gaussian mixture models. The method measures the similarity between two samples using the Euclidian distance between their pdfs. A novel method for calculating the closed form solution of the distance is proposed. Simulation experiments show that proposed method enables higher retrieval accuracy than the reference methods. Index Terms — Acoustic signal processing, database query processing, feature extraction. 1...|$|R
40|$|Various {{methods for}} <b>query</b> <b>by</b> <b>example</b> for audio signals are {{discussed}} in this paper. The <b>query</b> <b>by</b> <b>example</b> aims at automatic retrieval of audio excerpts similar to a userprovided audio sample from his/her personal audio database. Methods based on hidden Markov models, feature histograms, and likelihood ratio test are discussed. A class based approach was adopted in defining the concept of similarity between two audio samples. For this reason two databases were constructed for the simulations. Experiments were carried out by using a high quality audio database and an audio database collected with a mobile phone. Considering {{the difficulty of the}} task the results are quite encouraging also from the future research point of view. 1...|$|R
50|$|IBM bought Metaphor Computer Systems {{to utilize}} their GUI {{interface}} and encapsulating SQL platform {{that had already}} been in use since the mid 80's.In parallel with the development of SQL IBM also developed <b>Query</b> <b>by</b> <b>Example</b> (QBE), the first graphical query language.|$|R
50|$|<b>Query</b> <b>by</b> <b>example</b> is a <b>query</b> {{technique}} that involves providing the CBIR system with an example image {{that it will}} then base its search upon. The underlying search algorithms may {{vary depending on the}} application, but result images should all share common elements with the provided example.|$|R
5000|$|The Query view {{is similar}} in {{appearance}} to the Pipeline view. Here, the user constructs partial pipelines. When the query is executed, VisTrails identifies the pipeline versions which contain the specified partial pipeline. This {{is analogous to the}} <b>Query</b> <b>By</b> <b>Example</b> method of performing database queries.|$|R
50|$|TeamMate was {{merged with}} Bentley {{development}} and in 1996 MicroStation TeamMate 96 was released. This version {{was focused on}} MicroStation support, but also handled other formats and applications such as Microsoft Office and AutoCAD. TeamMate also had metadata, file history, versions, and <b>Query</b> <b>By</b> <b>Example</b> to locate files.|$|R
40|$|I hereby {{declare that}} I am the sole {{author of this}} thesis. This is a true copy of the thesis, {{including}} any required final revisions, as accepted by my examiners. I understand that my thesis may be made electronically available to the public. iii Client applications submit streams of <b>relational</b> <b>queries</b> to database servers. For simple requests, inter-process communication costs account for {{a significant portion of}} user-perceived latency. This trend increases with faster processors, larger memory sizes, and improved database execution algorithms, and this trend is not significantly offset by improvements in communication bandwidth. Caching and prefetching are well studied approaches to reducing user-perceived latency. Caching is useful in many applications, but it does not help if future requests rarely match previous requests. Prefetching can help in this situation, but only if we are able to predict future requests. This prediction is complicated in the case of <b>relational</b> <b>queries</b> <b>by</b> the presence of request parameters: a prefetching algorithm must predict not only a query that will be executed in the future...|$|R
40|$|We propose an {{original}} approach for {{the characterization of}} video dynamic content {{with a view to}} supplying new functionalities for motion-based video indexing and retrieval with <b>query</b> <b>by</b> <b>example.</b> We have designed a statistical framework for motion content description without any prior motion segmentation, and for motion-based video classification and retrieval...|$|R
40|$|It {{is common}} for humans to {{identify}} some content <b>by</b> listing <b>examples</b> of similar content. Some movies of a Tarantino, a movie producer {{can be used to}} identify more movies of the same producer. <b>Querying</b> <b>by</b> <b>examples</b> is an alternative way of querying which allows to identify more content as well as to expand knowledge. We experimen...|$|R
40|$|WebSheets is a {{programming}} in the WYSIWYG interface tool for building dynamic web pages that access and modify databases. Without programming, designers can specify {{not only the}} presentation of a page, but the dynamic content as well. This capability is facilitated through a novel application of Programming <b>by</b> <b>Example</b> (PBE), <b>Query</b> <b>by</b> <b>Example</b> (QBE), and spreadsheet formulas within the WYSIWYG HTML editor environment...|$|R
40|$|WebDev is a {{programming}} in the WYSIWYG interface tool for building dynamic web pages that connect to databases. The system allows designers to program <b>by</b> entering <b>query</b> <b>by</b> <b>example</b> (QBE) and spreadsheet formulas into visual components of HTML documents. The system then automatically generates dynamic web pages {{that can be}} executed in a browser...|$|R
5000|$|In <b>query</b> <b>by</b> <b>example,</b> {{the element}} used to search is a {{multimedia}} content (image, audio, video). In other words, the query is a media. Often, it's used audiovisual indexing. It {{will be necessary}} to choose the criteria we are going to use for creating metadata. The process of search can be divided in three parts: ...|$|R
30|$|The above {{results show}} that the {{proposed}} similarity measures perform well in <b>query</b> <b>by</b> <b>example</b> with the database. The good performance is partly exampled by the good quality of the database: the signals within a class are usually significantly different from those in other classes, and they do not contain acoustic interference which would make the problem harder.|$|R
30|$|The {{combination}} of the above mentioned methods have also been used. Kiranyaz et al. made initial segmentation and supervised classification into four predefined classes, after which <b>query</b> <b>by</b> <b>example</b> was applied to samples, which were classified into the same class [8]. For image databases, also using multiple examples [9] and user feedback [10] have been suggested.|$|R
30|$|Since {{the above}} {{approaches}} define the similarity beforehand, they limit {{the applicability of}} the method to a certain application area or to certain classes of signals. The generic <b>query</b> <b>by</b> <b>example</b> of audio does not restrict the type of signals, but aims at finding similarity criteria which correlates with the perceptual similarity in general [6, 7].|$|R
40|$|We {{present a}} system for {{content-based}} retrieval of perceptually similar sound events in audio documents (‘sound spotting’, using a <b>query</b> <b>by</b> <b>example.</b> The system consists of three discrete stages: a front-end for feature extraction, a self-organizing map, and a pattern matching unit. Our paper introduces the approach, describes the separate modules and discusses some preliminary results and future research...|$|R
40|$|In this paper, {{we present}} the systems that the Natural Lan-guage Engineering and Pattern Recognition group (ELiRF) has {{submitted}} to the MediaEval 2014 <b>Query</b> <b>by</b> <b>Example</b> Search on Speech task. All of them {{are based on a}} Subse-quence Dynamic Time Warping algorithm and do not use any other information from outside the task (zero-resources systems). 1...|$|R
40|$|Abstract. A {{key problem}} that arises {{in the context}} of storing XML {{documents}} in relational databases is that of finding an optimal relational decomposition for a given set of XML documents and a given set of XML queries over those documents. While {{there have been a number}} of ad hoc solutions proposed for this problem, to our knowledge this paper represents a first step toward formalizing the problem and studying its complexity. It turns out that to even define what one means by an optimal decomposition, one first needs to specify an algorithm to translate XML <b>queries</b> to <b>relational</b> <b>queries,</b> and a cost model to evaluate the quality of the resulting <b>relational</b> <b>queries.</b> <b>By</b> examining an interesting problem embedded in choosing a relational decomposition, we show that choices of different translation algorithms and cost models result in very different complexities for the resulting optimization problems. Our results suggest that, contrary to the trend in previous work, the eventual development of practical algorithms for finding relational decompositions for XML workloads will require judicious choices of cost models and translation algorithms, rather than an exclusive focus on the decomposition problem in isolation. ...|$|R
30|$|The {{simulations}} {{revealed that}} the the cross-likelihood ratio test between GMMs and Euclidean distance gave the most accurate results in <b>query</b> <b>by</b> <b>example.</b> From the methods based on simpler statistics, the Mahalanobis distance gave quite competitive results. However, none of the tested methods gave clearly the best results and thus the similarity measure should be chosen according to the application at hand.|$|R
40|$|Abstract- This article {{provides}} a color-based image retrieval technique for RGB image databases. Our proposed CBIR system uses the <b>query</b> <b>by</b> <b>example</b> approach and a relevance feedback mechanism. Feature extraction process is performed by computing a global color histogram for each image. Feature vectors are compared using the histogram intersection difference metric, and a relevance feedback mechanism {{is used in}} the retrieval process...|$|R
40|$|We {{present a}} system for {{content-based}} retrieval of perceptually similar sound events in audio documents (`sound spotting', using a <b>query</b> <b>by</b> <b>example.</b> The system consists of three discrete stages: a front-end for feature extraction, a self-organizing map, and a pattern matching unit. Our paper introduces the approach, describes the separate modules and discusses some preliminary results and future research. 1. PROBLEM The possibility of storing large quantities of sound or video data on digital media {{has resulted in a}} growing demand for contentbased retrieval techniques to search multimedia data for particular events without using annotations or other meta-data. This paper presents an approach to a task that can be described as sound spotting: the detection of perceptually similar sounds in a given document, using a <b>query</b> <b>by</b> <b>example,</b> i. e. selecting a particular sound event and searching for `similar' occurrences. The proposed system could be applied to content-based retrieval of sound [...] ...|$|R
40|$|International audienceThis paper {{deals with}} the problem of <b>Query</b> <b>by</b> <b>Example</b> Music Retrieval (QEMR). Retrieving music pieces that are "similar" to a musical query is crucial when {{exploring}} very big music databases. The term "similarity" in this paper is equivalent, for instance, to the rules permitting a human subject to build a list of songs to listen to. While the <b>Query</b> <b>by</b> <b>Example</b> Image Retrieval is becoming a mature domain, the QEMR is still in his infancy. This paper proposes a set of similarity measures aiming at expressing aspects of music similarity. The similarity is based on the distance between statistical distributions of the audio spectrum and it {{can be applied to the}} raw audio data with no format restriction. A QEMR algorithm relying on the presented similarity measures is evaluated on a dataset containing more than 4000 music pieces om seven musical genres. The results are encouraging both for subjective and non-subjece judgment...|$|R
40|$|We witness an {{unprecedented}} proliferation of knowledge graphs that record millions of heterogeneous entities and their diverse rela-tionships. While knowledge graphs are structure-flexible and content-rich, {{it is difficult}} to query them. The challenge lies in the gap between their overwhelming complexity and the limited database knowledge of non-professional users. If writing structured queries over “simple ” tables is difficult, it gets even harder to query com-plex knowledge graphs. As an initial step toward improving the usability of knowledge graphs, we propose to <b>query</b> such data <b>by</b> <b>example</b> entity tuples, without requiring users to write complex graph queries. Our system, GQBE (Graph <b>Query</b> <b>By</b> <b>Example),</b> is a proof of concept to show the possibility of this querying paradigm working in practice. The proposed framework automatically de-rives a hidden query graph based on input query tuples and finds approximate matching answer graphs to obtain a ranked list of top-k answer tuples. It also makes provisions for users to give feedback on the presented top-k answer tuples. The feedback is used to refine the query graph to better capture the user intent. We conducted ini-tial experiments on the real-world Freebase dataset, and observed appealing accuracy and efficiency. Our proposal of <b>querying</b> <b>by</b> <b>example</b> tuples provides a complementary approach to the existing keyword-based and query-graph-based methods, facilitating user-friendly graph querying. To the best of our knowledge, GQBE is among the first few emerging systems to <b>query</b> knowledge graphs <b>by</b> <b>example</b> entity tuples. 1...|$|R
40|$|We have {{developed}} an original approach for content-based video indexing and retrieval. By introducing a causal Gibbsian modeling of the spatio-temporal distribution of appropriate local motion-related measurements, we have designed a general and efficient statistical framework for non parametric motion modeling, motion recognition and classification, and motion segmentation. It is exploited for motionbased video indexing and video retrieval for both global and partial <b>queries</b> <b>by</b> <b>example...</b>|$|R
40|$|To support {{computer}} assisted plant species identification in a realistic, uncontrolled picture-taking condition, we put forward an approach relying on local image features. It combines <b>query</b> <b>by</b> <b>example</b> and relevance feedback to support both the localization of potentially interesting image regions and {{the classification of}} these regions as representing or not the target species. We show that this approach is successful, and makes prior segmentation unnecessary...|$|R
40|$|This paper {{describes}} {{and reports}} an experience related to several {{applications of the}} Animate Vision Paradigm to query processing and indexing in multimedia databases. In particular we show as two main problems related to video and image databases may be usefully advantaged by an Animate Image Similarity model, namely the video segmentation problem and the image retrieval task in a <b>Query</b> <b>By</b> <b>Example</b> environmen...|$|R
