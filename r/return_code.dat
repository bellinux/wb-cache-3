54|237|Public
2500|$|... sh lacked an {{expression}} grammar. The square bracketed condition {{had to be}} evaluated by the slower means of running the external test program. [...] sh's if command took its argument words as a new command to be run as a child process. [...] If the child exited with a zero <b>return</b> <b>code,</b> sh would look for a then clause (a separate statement, but often written joined on the same line with a semicolon) and run that nested block. [...] Otherwise it would run the else. [...] Hard-linking the test program as both [...] "test" [...] and [...] " ...|$|E
50|$|Unlike diff, the <b>return</b> <b>code</b> from comm has no logical {{significance}} {{concerning the}} relationship of the two files. A <b>return</b> <b>code</b> of 0 indicates success, a <b>return</b> <b>code</b> >0 indicates an error occurred during processing.|$|E
50|$|This single {{instruction}} {{program had}} {{an error in}} it â€” it didn't set the <b>return</b> <b>code.</b> Hence a second instruction had {{to be added to}} clear the <b>return</b> <b>code</b> so that it would exit with the correct status.|$|E
5000|$|Apart {{from the}} macros [...] and , the C {{standard}} does not define {{the meaning of}} <b>return</b> <b>codes.</b> Rules {{for the use of}} <b>return</b> <b>codes</b> vary on different platforms (see the platform-specific sections).|$|R
2500|$|Check control <b>return</b> <b>codes</b> and {{implement}} error handling mechanisms ...|$|R
50|$|See SQL <b>return</b> <b>codes</b> {{for a more}} {{comprehensive}} list of common SQLCODEs.|$|R
50|$|<b>Return</b> <b>code</b> on program {{termination}} for {{batch file}} usage.|$|E
5000|$|RFC 3661 - Media Gateway Control Protocol (MGCP) <b>Return</b> <b>Code</b> Usage ...|$|E
5000|$|The SOAP webservice {{provides}} a <b>return</b> <b>code</b> indicating if an error occurred: ...|$|E
5000|$|... retcode: set {{predetermined}} <b>return</b> <b>codes</b> {{for various}} operations; used for client debugging ...|$|R
50|$|A vessel is {{equipped}} with a transmitter that transmits a coded signal to at least three radio beacons each placed at a known point. The beacons send the code back to the transmitter. The <b>returned</b> <b>coded</b> signal is placed in a timeslot to determine the origin of the <b>returned</b> <b>code.</b> Therefore in an earlier stage a specified timeslot is connected to a specific beacon.|$|R
5000|$|... reduced {{requirement}} to test <b>return</b> <b>codes</b> individually (if used at call site to determine subsequent program flow) ...|$|R
5000|$|Periodically runs {{external}} commands or batch {{scripts and}} checks the <b>return</b> <b>code.</b>|$|E
50|$|Lock temporarily:Similar to {{returning}} the bike, {{except that it}} doesn't generate a <b>return</b> <b>code.</b>|$|E
5000|$|This {{translates}} {{to the following}} pseudocode: run STEP01 if STEP01's <b>return</b> <b>code</b> is {{greater than or equal}} to [...] 4 then run STEP02 end if if any previous <b>return</b> <b>code</b> is less than [...] 8 then run STEP03 end if if STEP01 abnormally ended then run STEP04 end if if STEP03 abnormally ended then run STEP05 else run STEP05 end if ...|$|E
5000|$|The Windows native [...] and [...] APIs {{are used}} to {{associate}} HRESULT <b>return</b> <b>codes</b> with a corresponding [...] object.|$|R
50|$|Values {{returned}} {{by the program}} when its process terminates {{are referred to as}} <b>return</b> <b>codes,</b> or more specifically exit statuses.|$|R
50|$|Lisp {{uses this}} to {{implement}} a very powerful macro system. Like other macro languages such as C, a macro <b>returns</b> <b>code</b> that can then be compiled. However, unlike C macros, the macros are Lisp functions and so can exploit the full power of Lisp.|$|R
50|$|As {{with most}} Unix utilities, a <b>return</b> <b>code</b> of 0 {{indicates}} success, while nonzero values indicate failure.|$|E
5000|$|Don't run [...] if {{the number}} 8 is {{less than or equal}} to any {{previous}} <b>return</b> <b>code.</b>|$|E
5000|$|The SQLCODE field {{contains}} the SQL <b>return</b> <b>code.</b> The code can be zero (0), negative or positive: ...|$|E
30|$|Hindering The <b>returned</b> error <b>code</b> is incorrect.|$|R
2500|$|Lisp {{uses this}} to {{implement}} a very powerful macro system. [...] Like other macro languages such as C, a macro <b>returns</b> <b>code</b> that can then be compiled. [...] However, unlike C macros, the macros are Lisp functions and so can exploit the full power of Lisp.|$|R
40|$|Abstract. While MPI is {{the most}} common {{mechanism}} for expressing parallelism, MPI programs remain poorly integrated in Unix environments. We introduce MPISH 2, an MPI process manager analogous to serial Unix shells. It provides better integration capabilities for MPI programs by providing a uniform execution mechanism for parallel and serial programs, exposing <b>return</b> <b>codes</b> and standard I/O stream information. ...|$|R
5000|$|... means run {{the first}} command and, {{if it fails}} with a non-zero <b>return</b> <b>code,</b> run the next.|$|E
50|$|Exit {{status is}} the <b>return</b> <b>code</b> of {{computer}} programs running as processes, and is communicated through system calls.|$|E
5000|$|ERROR (DR DOS 6.0 {{and higher}} only) : Specifies an error / <b>return</b> <b>code</b> {{to be assumed}} in the following.|$|E
5000|$|GTIN Codes {{starting}} with 460, 859, 880 can potentially <b>return</b> a <b>code</b> 14 instead of 99 ...|$|R
5000|$|It {{is common}} to run TSO in batch (as opposed to {{interactive}}ly): all the usual TSO line-mode interactive commands can be also executed via Job Control Language (JCL) by running any of the programs , , or [...] and supplying the line commands in a file pointed to by the [...] The primary difference between the three programs is their handling of <b>return</b> <b>codes</b> from the executed commands.|$|R
50|$|Icon {{refers to}} this concept as {{goal-directed}} execution, referring to the way that execution continues until some goal is reached. In the example above {{the goal is to}} read the entire file; the read command continues to succeed while there is more information to be read, and fails when there isn't. The goal is thus coded directly in the language, instead of using statements checking <b>return</b> <b>codes</b> or similar constructs.|$|R
5000|$|... For NASM MOV AL, 1 Function 1: exit (...) MOV EBX, 0 <b>Return</b> <b>code</b> INT 80h The only {{interrupt}} Linux uses! ...|$|E
5000|$|The {{operation}} is forbidden to all users. For example, requests for a directory listing <b>return</b> <b>code</b> 403 when directory listing has been disabled.|$|E
50|$|The InfoCenter {{has a full}} {{write-up}} of each {{along with}} parameter lists and <b>return</b> <b>code</b> (RC) and reason codes (RSN). Search on cdat_olaapis.|$|E
50|$|API {{calls are}} monitored, their input {{parameters}} verified before the function calls are actually performed, warning of possible problems. The API <b>return</b> <b>codes</b> are also monitored, and error codes are logged. Such validation {{is limited to}} such APIs as are known to BoundsChecker, currently several thousand in number. If Memory Tracking is enabled, API Call Validation can {{make use of the}} information gathered for more precise validation of memory pointers.|$|R
5000|$|The {{service is}} {{currently}} down. Both its [...] ".org" [...] website and its onion link <b>return</b> error <b>code</b> 500.|$|R
5000|$|Network {{protocols}} typically support <b>returning</b> status <b>codes.</b> In the TCP/IP stack, it's {{a common}} feature of higher level protocols. For example: ...|$|R
