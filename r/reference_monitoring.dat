53|579|Public
5000|$|In September 2013, Reed {{spoke out}} as a proponent of [...] "mandatory exit surveys" [...] at college campuses, {{designed}} to better monitor the efficacy of policies and programs regarding student safety. Such surveys would, according to Reed, prevent internal corruption and dismissal of valid student claims because they would create an external <b>reference</b> <b>monitoring</b> whether colleges remain {{in compliance with the}} Clery Act and their own safety policies. Senator Claire McCaskill developed the Campus Accountability and Safety Act in 2015 using many of the suggestions Reed advocated for on HuffPost Live and in various publications.|$|E
50|$|Saffire PRO 24 DSP Audio Interface (2009) In July 2009, a {{new member}} of the Saffire range of {{interfaces}} was released, {{with the addition of}} a completely new feature. The Focusrite Saffire PRO 24 DSP is a 16 in / 8 out FireWire audio interface, featuring real-time DSP-powered tracking and mixing capability designed for the home studio environment. The unit provides DSP-powered compression and EQ for ultra-low-latency tracking, plus monitor reverb; it also includes VRM: Virtual <b>Reference</b> <b>Monitoring</b> technology. This uses dynamic convolution technology, as included in the Liquid series of products, but this time it is used to emulate monitoring systems. As a result, VRM allows a mix to be auditioned in a several different environments - such as living room, bedroom studio and professional studio control room - with a wide selection of monitoring and other loudspeakers, all by listening on headphones.|$|E
50|$|A {{significant}} step {{for the company}} was {{the addition of the}} Saffire Firewire range of audio interfaces, the first being announced at NAMM in early 2005. This range has continued to expand, offering mic/line/instrument preamps and conversion in a number of configurations, and has more recently been joined by the Scarlett range of USB interfaces. Saffire is also available with real-time DSP-powered tracking and mixing capability designed for the home studio environment, providing compression and EQ for tracking, plus monitor reverb; it also includes VRM: Virtual <b>Reference</b> <b>Monitoring</b> technology. VRM allows a mix to be auditioned in a several different emulated environments - such as living room, bedroom studio and professional studio control room - with a selection of monitoring and other loudspeakers, by listening on headphones. The VRM Box is also available, a USB headphone amplifier with DSP software for monitor emulation. Late 2010 saw Focusrite return to the plug-in arena with the release of the Midnight plug-in suite. This utilises powerful DSP technology to exactly model the classic Focusrite ISA110 equaliser and ISA130 compressor, even including high-resolution front-panel emulations reminiscent of the hardware units. The ISA110 and 130 modules were created for the Forté console in the 1980s.|$|E
40|$|This paper {{presents}} {{a mechanism for}} the consistent enforcement of security policies within a distributed system by extending the <b>reference</b> <b>monitor</b> concept {{in such a way}} that both a conceptual and actual separation of the specification and enforcement of security policies by the <b>reference</b> <b>monitor,</b> hence an externally controlled <b>reference</b> <b>monitor,</b> is obtained. An externally controlled <b>reference</b> <b>monitor</b> may enforce multiple policies simultaneously; for this multiple external <b>reference</b> <b>monitors</b> can be queried. To maintain the policy independence of the <b>reference</b> <b>monitor,</b> subjects, objects, and operations are modeled in a formal theory which can also be mapped to multiple operating systems providing a operating system-independent mechanism for specifying and enforcing policies. This policy mechanism is briefly discussed, as is an example of an interpretation element and the corresponding implementation techniques for retrofitting the externally controlled <b>reference</b> <b>monitor</b> onto existing operating systems...|$|R
40|$|We {{define and}} {{demonstrate}} {{an approach to}} securing distributed computation based on a shared <b>reference</b> <b>monitor</b> (Shamon) that enforces mandatory access control (MAC) policies across a distributed set of machines. The Shamon enables local <b>reference</b> <b>monitor</b> guarantees to be attained {{for a set of}} <b>reference</b> <b>monitors</b> on these machines. We implement a prototype system on the Xen hypervisor with a trusted MAC virtual machine built on Linux 2. 6 whose <b>reference</b> <b>monitor</b> design requires only 13 authorization checks, only 5 of which apply to normal processing (others are for policy setup). We show that, through our architecture, distributed computations can be protected and controlled coherently across all the machines involved in the computation. 1...|$|R
5000|$|... #Caption: [...] Nucoda with Precision Panel and Dolby <b>Reference</b> <b>Monitor</b> ...|$|R
30|$|For the {{optimization}} of {{the existing}} LTM network in the urbanized area of 100  km 2 in Bitterfeld/Wolfen, 462 reference wells in the Quaternary aquifer and 357 reference wells in the Tertiary aquifer, were incorporated into the transport model for outlining the spatio-temporal virtual contaminant situation. The <b>reference</b> <b>monitoring</b> wells with their latitude, longitude and screen level elevations were assigned at 3 -D nodes of the finite element mesh. The hydraulic head (m a.s.l.), the solute concentration (mg/L) and flow velocity (m/day) were recorded {{in the form of}} time series data at the <b>reference</b> <b>monitoring</b> wells. With these recorded hydraulic heads, the solute concentration and flow velocity were exported and used for the optimization {{of the existing}} LTM network. With these available data from the model, they were exported {{to be used in the}} optimization of the existing LTM network.|$|E
30|$|Particle {{tracking}} and contaminant concentration {{was used for}} monitoring network optimization in this research. Head and flow velocity were used to provide additional information for comparative analysis of random fluctuations of mass at various <b>reference</b> <b>monitoring</b> wells in the study area. Compared to the first proposed optimization model, {{the second and third}} models categorize the wells as essential and redundant with a subjective priority of redundancy.|$|E
40|$|Business {{compliance}} needs {{tools to}} anticipate imminent violations and warn compliance officers before the fact. While anticipation cannot be completely automated in general, {{it can be}} automated for anonymity in data releases, which is an essential property in various regulatory legislations, such as HIPAA and the Data Protection Act. This paper shows how early warnings can be realized by combining extended inline <b>reference</b> <b>monitoring</b> and risk estimation...|$|E
50|$|While the Rec. 2020 {{transfer}} function {{can be used}} for encoding, it is expected that most productions will use a <b>reference</b> <b>monitor</b> that has an appearance of using Gamma 2.4 {{transfer function}} as defined in Rec. ITU-R BT.1886 and that the <b>reference</b> <b>monitor</b> will be evaluated as defined in Rec. ITU-R BT.2035.|$|R
40|$|For {{many years}} the {{traditional}} {{concept of the}} <b>reference</b> <b>monitor</b> {{has proven to be}} a sound architectural foundation for secure computer systems. However, with the emergence of complex distributed systems with multiple, user-defined security policies the limitations of <b>reference</b> <b>monitors</b> become more and more obvious. In the age of application-dependent, user-defined security policies, it is particularly obvious that the scope of the <b>reference</b> <b>monitor</b> concept is restricted to access control policies. Several security policies of modern application systems address much broader aspects of system security, such as authentication policies or guarantee-of-service policies. In the age of multiple coexisting security policies in large systems, it is particularly obvious that the strong encapsulation property of the <b>reference</b> <b>monitor</b> concept makes it conceptually difficult to integrate new policies (or modify existing ones) into the trusted computing base. This paper discusses the general concept [...] ...|$|R
40|$|Thesis for {{the degree}} of Licentiate of Engineering, a Swedish degree between M. Sc. and Ph. D. This thesis studies an {{alternative}} implementation of a security <b>reference</b> <b>monitor</b> in the contexts of extensible and open systems. A security <b>reference</b> <b>monitor</b> is a classic approach to imposing a security policy on an otherwise untrusted system by using a trusted component which intercepts security-relevant resource requests and applies a security policy {{to decide whether to}} grant such requests. Recently, an application-level approach to implementing reference mon-itors has emerged. This is the so-called inlined <b>reference</b> <b>monitor</b> (IRM) approach where the software is rewritten to embed (inline) the policy within it. This thesis presents an alternative implementation of the IRM approach by using aspect-oriented programming. We call this the lightweight inlined <b>reference</b> <b>monitor</b> approach, since it does not require modification of th...|$|R
40|$|Abstract. A Prolog {{implementation}} of an In-lined <b>Reference</b> <b>Monitoring</b> system prototype for Adobe ActionScript Bytecode programs is presented. Prolog provides an elegant framework for implementing IRM’s. Its declarative and reversible nature facilitate the dual tasks of binary parsing and code generation, greatly simplifying many otherwise difficult IRM implementation challenges. The approach is demonstrated via {{the enforcement of}} several security policies on real-world Adobe Flash applets and AIR applications. ...|$|E
40|$|A {{prototype}} {{security policy}} verification system for Action-Script binaries is presented, whose implementation leverages {{recent advances in}} co-logic programming. Our experience with co-logic programming indicates {{that it is an}} extremely useful paradigm for elegantly expressing algorithms that {{lie at the heart of}} model-checking technologies. This results in an unusually small trusted computing base, making the verification system well-suited to frameworks like certifying in-lined <b>reference</b> <b>monitoring</b> systems, which require small, light-weight verifiers. Preliminary experiments and progress are discussed...|$|E
40|$|AbstractClient {{software}} for modern service-oriented web architectures is often implemented as mobile code applets made available by service-providers. Protecting clients from malicious mobile code is therefore an important concern in these architectures; however, {{the burden of}} security enforcement is typically placed entirely on the client. This approach violates the service-oriented paradigm. A method of realizing mobile code security as a separate service in a service-oriented web architecture is proposed. The security service performs in-lined <b>reference</b> <b>monitoring</b> of untrusted Java binaries on-demand for client-specified security policies. An XML format for specifying these policies is outlined, and preliminary experiments demonstrate the feasibility of the approach...|$|E
40|$|Traditional {{access control}} {{mechanisms}} rely on a <b>reference</b> <b>monitor</b> to mediate access to protected resources. <b>Reference</b> <b>monitors</b> are inherently centralized and existing attempts to distribute the functionality of the <b>reference</b> <b>monitor</b> suffer from problems of scalability. Cryptographic access control is a new distributed access control paradigm designed for a global federation of information systems. It defines an implicit access control mechanism, which relies exclusively on cryptography to provide confidentiality and integrity of data managed by the system. It is particularly designed to operate in untrusted environments where the lack of global knowledge and control are defining characteristics. The propose...|$|R
50|$|Engineering Emmy Award: Sony for the BVM E250 OLED <b>Reference</b> <b>Monitor.</b>|$|R
40|$|The {{security}} of {{systems such as}} operating systems, hypervisors, and web browsers depend critically on <b>reference</b> <b>monitors</b> to correctly enforce their desired security policy {{in the presence of}} adversaries. Recent progress in developing <b>reference</b> <b>monitors</b> with small code size and narrow interfaces has made automated formal verification of <b>reference</b> <b>monitors</b> a more tractable goal. However, a significant remaining factor for the complexity of automated verification is the size of the data structures (e. g., access control matrices) over which the programs operate. This paper develops a parametric verification technique that scales even when <b>reference</b> <b>monitors</b> and adversaries operate over unbounded, but finite data structures. Specifically, we develop a parametric guarded command language for modeling <b>reference</b> <b>monitors</b> and adversaries. We also present a parametric temporal specification logic for expressing security policies that the monitor is expected to enforce. The central technical results of the paper are a set of small model theorems. These theorems state that in order to verify that a policy is enforced by a <b>reference</b> <b>monitor</b> with an arbitrarily large data structure, it is sufficient to model check the monitor with just one entry in its data structure. We apply our methodology to verify the designs of two hypervisors, SecVisor and the sHype mandatory access- control extension to Xen. Our approach is able to prove that sHype and a variant of the original SecVisor design correctly enforces the expected security properties in the presence of powerful adversaries...|$|R
30|$|Structure health {{monitoring}} and assessment for large bridges and infrastructures are {{very important for the}} life-safety and current or future performance of these systems. The GeoSHM system, conducted by the University of Nottingham, intends to develop and demonstrate a novel system to tackle the issues in structural deformation monitoring of long bridges and make it possible for the bridge masters to fully understand the loading and response effect of the bridge, and identify unusual deformations under extreme weather conditions. Based on the <b>reference</b> <b>monitoring</b> system on the Forth Road Bridge, the paper used the GNSS measurements and corresponding loading data to analyse the dynamic characteristic of the bridge.|$|E
40|$|Abstract. µKlaim is {{a process}} {{language}} that permits programming distributed systems made up of several mobile components interacting through multiple distributed tuple spaces. We present the language and a type system for controlling the activities, e. g. access to resources and mobility, of the processes in a net. By dealing with privileges acquisition, the type system enables dynamic variations of security policies. We exploit a combination of static and dynamic type checking, and of in-lined <b>reference</b> <b>monitoring,</b> to guarantee absence of run-time errors {{due to lack of}} privileges and state two type soundness results: one involves whole nets, the other is relative to subnets of larger nets. ...|$|E
40|$|Client {{software}} for modern service-oriented web architectures is often implemented as mobile code applets made available by service-providers. Protecting clients from malicious mobile code is therefore an important concern in these architectures; however, {{the burden of}} security enforcement is typically placed entirely on the client. This approach violates the service-oriented paradigm. A method of realizing mobile code security as a separate service in a service-oriented web architecture is proposed. The security service performs in-lined <b>reference</b> <b>monitoring</b> of untrusted Java binaries on-demand for client-specified security policies. An XML format for specifying these policies is outlined, and preliminary experiments demonstrate the feasibility of the approach. c ○ 2011 Published by Elsevier Ltd...|$|E
40|$|Traditional {{techniques}} of enforcing an {{access control policy}} rely on an honest <b>reference</b> <b>monitor</b> to enforce the policy. However, for applications where the resources are sensitive, the access control policy might also be sensitive. As a result, an honest-but-curious <b>reference</b> <b>monitor</b> would glean some interesting information from the requests that it processes. For example if a requestor in a role psychiatrist is granted access to a document, the patient associated with that document probably has a psychiatric problem. The patient would consider this sensitive in- formation, and she might prefer the honest-but-curious <b>reference</b> <b>monitor</b> to remain oblivious of her mental problem. We present a high level framework for querying and enforcing a role based access control policy that identifies where sensitive information might be disclosed. We then propose a construction which enforces a role based access control policy cryptographically, {{in such a way}} that the <b>reference</b> <b>monitor</b> learns as little as possible about the policy. (The <b>reference</b> <b>monitor</b> only learns something from repeated queries). We prove the security of our scheme showing that it works in theory, but that it has a practical drawback. However, the practical drawback is common to all cryptographically enforced access policy schemes. We identify several approaches to mitigate the drawback and conclude by arguing that there is an underlying fundamental problem that cannot be solved. We also show why attribute based encryption techniques do not not solve the problem of enforcing policy by an honest but curious <b>reference</b> <b>monitor...</b>|$|R
5000|$|Engineering Emmy Award: Dolby Laboratories Inc. for the Dolby PRM-4200 Professional <b>Reference</b> <b>Monitor</b> ...|$|R
5000|$|<b>Reference</b> <b>monitor</b> functionality, so that {{no access}} can bypass {{scrutiny}} by the operating system; ...|$|R
40|$|Abstract—In-lined <b>Reference</b> <b>Monitoring</b> {{frameworks}} are {{an emerging}} technology for enforcing security policies over untrusted, mobile, binary code. However, formulating correct policy specifications for such frameworks to enforce remains a daunting undertaking with few supporting tools. A visualization approach is proposed {{to aid in}} this task; preliminary results are presented in this short paper. In contrast to existing approaches, which typically involve tedious and error-prone manual inspection of complex binary code, the proposed framework provides automatically generated, security-aware visual models that follow the UML specification. This facilitates formulation and testing of prototype security policy specifications in a faster and more reliable manner than is possible with existing manual approaches. I...|$|E
40|$|Klaim is {{a process}} {{language}} that permits programming distributed systems made up of several mobile components interacting through multiple distributed tuple spaces. We present the language and a type system for controlling the activities, e. g. access to resources and mobility, of the processes in a net. By dealing with privileges acquisition, the type system enables dynamic variations of security policies. We exploit a combination of static and dynamic type checking, and of in-lined <b>reference</b> <b>monitoring,</b> to guarantee absence of run-time errors {{due to lack of}} privileges and state two type soundness results: one involves whole nets, the other is relative to subnets of larger nets...|$|E
40|$|We {{introduce}} a capability-based access control model {{integrated into a}} linguistic formalism for modeling network aware systems and applications. Our access control model enables specification and dynamic modification of policies for controlling process activities (mobility of code and access to resources). We exploit a combination of static and dynamic checking and of in-lined <b>reference</b> <b>monitoring</b> to guarantee absence of run-time errors {{due to lack of}} capabilities. We illustrate the usefulness of our framework by using it for implementing a simplified but realistic scenario. Finally, we show how the model can be easily tailored for dealing with different forms of capability acquisition and loss, thus enabling different possible variations of access control policies...|$|E
50|$|For example, Windows 3.x and 9x {{operating}} systems were not built with a <b>reference</b> <b>monitor,</b> whereas the Windows NT line, {{which also includes}} Windows 2000 and Windows XP, was designed to contain a <b>reference</b> <b>monitor,</b> {{although it is not}} clear that its properties (tamperproof, etc.) have ever been independently verified, or what level of computer security it was intended to provide.|$|R
5000|$|In {{operating}} systems architecture a <b>reference</b> <b>monitor</b> concept defines {{a set of}} design requirements on a reference validation mechanism, which enforces an access control policy over subjects' (e.g., processes and users) ability to perform operations (e.g., read and write) on objects (e.g., files and sockets) on a system. The properties of a <b>reference</b> <b>monitor</b> are captured by the acronym NEAT, which means: ...|$|R
40|$|In Usage CONtrol (UCON) access {{decisions}} rely on mutable attributes. A <b>reference</b> <b>monitor</b> should re-evaluate security policies {{each time}} when attributes change their values. Catching timely all attribute changes is a challenging issue, {{especially if the}} attribute provider and the <b>reference</b> <b>monitor</b> reside in different security domains. Some attribute changes might be missed, corrupted, and delayed. As a result, the <b>reference</b> <b>monitor</b> may erroneously grant the access to malicious users and forbid it for eligible users. This paper proposes a set of policy enforcement models which help to tolerate uncertainties associated with mutable attributes. In our model the <b>reference</b> <b>monitor</b> as usually evaluates logical predicates over attributes and additionally makes some estimates on how much observed attribute values differ from the real state of the world. The final access decision counts both factors. We assign monetary outcomes for granting and revoking access to legitimate and malicious users and compare the proposed policy enforcement models in terms of cost-efficiency...|$|R
40|$|Android’s success {{makes it}} a {{prominent}} target for malicious software. However, the user has very limited control over security-relevant operations. This work presents AppGuard, a powerful and flexible security system that overcomes these deficiencies. It enforces user-defined security policies on untrusted Android applications without requiring any changes to a smartphone’s firmware, root access, or the like. Finegrained and stateful security policies are expressed in a formal specification language, which also supports secrecy requirements. Our system offers complete mediation of security-relevant methods based on calleesite inline <b>reference</b> <b>monitoring</b> and supports widespread deployment. In the experimental analysis we demonstrate the removal of permissions for overly curious apps {{as well as how}} to defend against several recent real-world attacks on Android phones. Our technique exhibits very little space and runtime overhead. The utility of AppGuard has already been demonstrated by more than 1, 000, 000 downloads...|$|E
40|$|There {{has been}} an influx of air-quality systems in indoor and outdoor environments. The main purpose of these systems is to gauge the air quality with {{parameters}} known to cause harmful effects to humans. Generally, an index is drawn by using these parameters to indicate the scale of pollution. Existing work in outdoor air quality systems spans across community driven sensing, mobile sensing, and city or nationally supported sensing. The large body of related work appears fragmented, and has not shown to be explored in a cradle to grave fashion. This thesis explores an integrated system built using wireless sensor network for measuring air quality {{in the city of}} Uppsala, Sweden. An in-depth study was performed to evaluate the operational performance of the system, assess the quality of data, comparison with <b>reference</b> <b>monitoring</b> stations, and analysis to study patterns...|$|E
40|$|Abstract Android’s success {{makes it}} a {{prominent}} target for malicious software. However, the user has very limited control over security-relevant operations. This work presents AppGuard, a powerful and flexible secu-rity system that overcomes these deficiencies. It enforces user-defined security policies on untrusted Android applications without requiring any changes to a smartphone’s firmware, root access, or the like. Fine-grained and stateful security policies are expressed in a formal specifi-cation language, which also supports secrecy requirements. Our system offers complete mediation of security-relevant methods based on callee-site inline <b>reference</b> <b>monitoring</b> and supports widespread deployment. In the experimental analysis we demonstrate the removal of permissions for overly curious apps {{as well as how}} to defend against several recent real-world attacks on Android phones. Our technique exhibits very little space and runtime overhead. The utility of AppGuard has already been demonstrated by more than 1, 000, 000 downloads. ...|$|E
40|$|The µKlaim {{calculus}} is {{a process}} algebra designed to study the programming of distributed systems consisting {{of a number of}} locations each having their own tuple space and collection of mobile processes. Previous work has explored how to incorporate a notion of capabilities to be enforced dynamically by means of a <b>reference</b> <b>monitor.</b> Our first contribution is to describe a sandboxing semantics for the remote evaluation of mobile code; we then develop a succinct flow logic for statically guaranteeing the properties enforced by the <b>reference</b> <b>monitor</b> and hence for dispensing with the overhead of a dynamic <b>reference</b> <b>monitor.</b> Our second contribution is an extension of the calculus to interact with an environment; here processes enter the system from the environment and we develop an entry-condition that is sufficient for ensuring that the resulting system continues to guarantee the properties that would otherwise need to be dynamically enforced by the <b>reference</b> <b>monitor.</b> We call the resulting calculus myKlaim. ...|$|R
5000|$|The UE In-Ear <b>Reference</b> <b>Monitors</b> with Triple Balanced, {{precision}} armatures, {{with multiple}} Integrated Passive Crossover ...|$|R
5000|$|Hardware, firmware, and {{software}} {{elements of a}} trusted computing base that implement the <b>reference</b> <b>monitor</b> concept.|$|R
