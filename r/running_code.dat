150|999|Public
25|$|When writing {{code for}} SQL CLR, data stored in SQL Server {{databases}} {{can be accessed}} using the ADO.NET APIs like any other managed application that accesses SQL Server data. However, doing that creates a new database session, {{different from the one}} in which the code is executing. To avoid this, SQL Server provides some enhancements to the ADO.NET provider that allows the connection to be redirected to the same session which already hosts the <b>running</b> <b>code.</b> Such connections are called context connections and are set by setting context connection parameter to true in the connection string. SQL Server also provides several other enhancements to the ADO.NET API, including classes to work with tabular data or a single row of data as well as classes to work with internal metadata about the data stored in the database. It also provides access to the XML features in SQL Server, including XQuery support. These enhancements are also available in T-SQL Procedures in consequence of the introduction of the new XML Datatype (query,value,nodes functions).|$|E
500|$|The {{boot process}} starts by <b>running</b> <b>code</b> stored in secured UEFI Boot ROM (first stage). [...] Boot ROM has two primary {{responsibilities}} performed by its components: to initialize system hardware (POST component) and to select an operating system to run (UEFI component).|$|E
2500|$|Microsoft SQL Server 2005 {{includes}} a component named SQL CLR ("Common Language Runtime") via which it integrates with [...]NET Framework. Unlike most other applications that use [...]NET Framework, SQL Server itself hosts the [...]NET Framework runtime, i.e., memory, threading and resource management requirements of [...]NET Framework are satisfied by SQLOS itself, {{rather than the}} underlying Windows operating system. SQLOS provides deadlock detection and resolution services for [...]NET code as well. With SQL CLR, stored procedures and triggers can be written in any managed [...]NET language, including C# and VB.NET. Managed code {{can also be used}} to define UDT's (user defined types), which can persist in the database. Managed code is compiled to CLI assemblies and after being verified for type safety, registered at the database. After that, they can be invoked like any other procedure. However, only a subset of the Base Class Library is available, when <b>running</b> <b>code</b> under SQL CLR. Most APIs relating to user interface functionality are not available.|$|E
5000|$|<b>Running</b> Java <b>code</b> {{requires}} an appropriate virtual machine, while <b>running</b> Managed C++ <b>code</b> {{requires an}} appropriate {{implementation of the}} [...]NET Framework.|$|R
5000|$|After <b>running</b> this <b>code,</b> {{the final}} answer is approximately0.865474033101614 ...|$|R
50|$|Ch is a C/C++ {{interpreter}} <b>running</b> C/C++ <b>code</b> {{to control}} Lego NXT or EV3. No firmware upload/download is required, no compilation is needed. A C/C++ <b>code</b> <b>running</b> in Ch can control either a Lego NXT, EV3, or multiple of NXT/EV3.|$|R
5000|$|Users/developers within {{virtual worlds}} may freely access, modify and view the source {{code of the}} entire system (they can access <b>running</b> <b>code</b> from in-world) ...|$|E
50|$|LL/SC is more {{difficult}} to emulate than CAS. Additionally, stopping <b>running</b> <b>code</b> between paired LL/SC instructions, such as when single-stepping through code, can prevent forward progress, making debugging tricky.|$|E
5000|$|... dprobes (Dynamic Probes) is a Linux kernel {{analysis}} framework created in 2004, which features {{the ability to}} insert software probes dynamically into <b>running</b> <b>code.</b> It is based on kprobes.|$|E
50|$|Because of this, Croquet has {{the ability}} to keep <b>running</b> while <b>code</b> is {{modified}} and tested, while changes are made, {{an essential part of the}} Croquet collaborative development ability. Users can change the <b>code</b> <b>running</b> the environment while the environment is running.|$|R
5000|$|Google Native Client, <b>running</b> native <b>code</b> in a sandbox in a {{web browser}} ...|$|R
5000|$|... like JCov {{on the fly}} while <b>running</b> the <b>code</b> with a Java agent, ...|$|R
5000|$|Historically, [...] {{has been}} the de facto {{signature}} for <b>running</b> <b>code</b> when the DOM is ready. However, since jQuery 3.0, developers are encouraged to use the much shorter [...] signature.|$|E
5000|$|Cross-site scripting, {{where the}} {{attacker}} tricks the user's computer into <b>running</b> <b>code</b> which {{is treated as}} trustworthy because it appears {{to belong to the}} server, allowing the attacker to obtain a copy of the cookie or perform other operations.|$|E
50|$|Like any {{security}} measure, {{code signing}} can be defeated. Users can be tricked into running unsigned code, or even into <b>running</b> <b>code</b> {{that refuses to}} validate, and the system only remains secure {{as long as the}} private key remains private.|$|E
50|$|OS/2 was {{an early}} user of call gates to {{transfer}} between application <b>code</b> <b>running</b> in ring 3, privileged <b>code</b> <b>running</b> in ring 2, and kernel code in ring 0.|$|R
50|$|Also, the Smile system {{benefits}} from a unique feature of AppleScript: live interaction with <b>running</b> <b>codes.</b> AppleScript - and thus, Smile - can interact {{with a program}} while it is running. This feature is a concern for scientists or engineers running long computations or computations involving large amounts of data, when stopping, dumping, then relaunching a program implies significant costs.|$|R
5000|$|ICD-10-CM: Circadian rhythm sleep disorder, free <b>running</b> type; <b>code</b> G47.24 {{is due to}} {{take effect}} October 1, 2014.|$|R
5000|$|Fortunately, nobody {{owns the}} Internet, {{there is no}} {{centralized}} control, and nobody can turn it off. Its evolution depends on rough consensus about technical proposals, and on <b>running</b> <b>code.</b> Engineering feed-back from real implementations {{is more important than}} any architectural principles. B.Carpenter ...|$|E
50|$|Hot {{swapping}} {{can also}} {{refer to the}} ability to alter the <b>running</b> <b>code</b> of a program without needing to interrupt its execution. Interactive programming is a programming paradigm that makes extensive use of hot swapping, so the programming activity becomes part of the program flow itself.|$|E
50|$|Monitor can be {{used for}} reading and writing memory, modifying CPU registers, <b>running</b> <b>code</b> at {{specific}} addresses in memory, saving/loading memory to/from a plugin option, etc. This is very useful for debugging programs written in machine code in difference to programs written in the EPSON BASIC programming language.|$|E
50|$|Fundamentally {{one uses}} {{redundancy}} to counter faults. This includes <b>running</b> extra <b>code</b> (redundancy in time) {{as well as}} keeping extra bits (redundancy in space).|$|R
50|$|An updated libSystem {{with both}} 32-bit and 64-bit versions; {{combined}} with the aforementioned kernel change, this allows individual applications to address more than 4 GB of memory when run on 64-bit processors, although an application using Apple libraries or frameworks other than libSystem would need to have two processes, one <b>running</b> the 64-bit <b>code</b> and one <b>running</b> the <b>code</b> that requires other libraries and frameworks.|$|R
5000|$|IncludeOS is a minimal, service oriented, open source, includable library {{operating}} system for cloud services. Currently {{a research project}} for <b>running</b> C++ <b>code</b> on virtual hardware.|$|R
5000|$|The {{phrase is}} often {{extended}} into the saying [...] "rough consensus and running code", {{to make it}} clear that the IETF is interested in practical, working systems that can be quickly implemented. There is some debate as to whether <b>running</b> <b>code</b> leads to rough consensus or vice versa.|$|E
50|$|Self-modifying code is also {{sometimes}} used by programs {{that do not}} want to reveal their presence, such as computer viruses and some shellcodes. Viruses and shellcodes that use self-modifying code mostly do this in combination with polymorphic code. Modifying a piece of <b>running</b> <b>code</b> is also used in certain attacks, such as buffer overflows.|$|E
5000|$|Architecture of DX 200 allows live {{migration}} {{as well as}} {{software update}} during live operation. Unlike in many other switching platforms, DX 200 performs live software update without code patching. Therefore, <b>running</b> <b>code</b> is not polluted by unnecessary jump instructions. Furthermore, as opposed to [...] "integration guessing" [...] of various software patches, DX 200 architecture makes proper integration testing of software components possible.|$|E
5000|$|Many {{engineers}} {{believe that}} <b>running</b> application <b>code</b> in user mode is more reliable {{and easier to}} debug, thus making the development process easier and the code more portable.|$|R
40|$|Abstract‘Derived parameters’ {{are simple}} {{arithmetic}} combinations of uncertain input parameters, {{that are expected}} to have a strong effect on an output variable of the model. Knowledge acquired by experienced modelers from the analysis of model equations and from other sources (<b>running</b> <b>codes)</b> help defining this sort of input parameters. This work summarizes the way to find derived parameters in a well-known model (Level E) and shows the benefits of introducing these parameters in the sensitivity analysis: strong dependence of outputs on them and direct physical interpretation of sensitivity analysis results...|$|R
25|$|Google Android 4.2 enabled <b>running</b> RenderScript <b>code</b> on {{the mobile}} device GPU. Apple {{introduced}} a proprietary Metal API for iOS applications, able to execute arbitrary code through Apple's GPU compute shaders.|$|R
50|$|The VDC lacked sprite capabilities, which limited {{its use in}} gaming applications. However, it did contain {{blitting}} {{capabilities to}} autonomously perform small block memory copies within its dedicated video RAM. While the VDC is performing such a copy, the system CPU can continue <b>running</b> <b>code,</b> provided no other VDC accesses are attempted before the copy is finished. These functions were used by the C128's screen editor ROM to rapidly scroll or clear screen sections.|$|E
50|$|In garbage {{collecting}} languages, objects may {{be destroyed}} {{when they can}} no longer be reached by the <b>running</b> <b>code.</b> In class-based GCed languages, the analog of destructors are finalizers, which are called before an object is garbage-collected. These differ in running at an unpredictable time and in an unpredictable order, since garbage collection is unpredictable, and are significantly less-used and less complex than C++ destructors. Example of such languages include Java, Python, and Ruby.|$|E
5000|$|The [...] "current continuation" [...] or [...] "continuation of the {{computation}} step" [...] is {{the continuation}} that, {{from the perspective}} of <b>running</b> <b>code,</b> would be derived from the current point in a program's execution. The term continuations {{can also be used to}} refer to first-class continuations, which are constructs that give a programming language the ability to save the execution state at any point and return to that point at a later point in the program, possibly multiple times.|$|E
5000|$|Protection chip: ARM7 ASIC with {{internal}} <b>code,</b> <b>running</b> at 20 MHz ...|$|R
50|$|This is {{analogous}} to the process for compiling and <b>running</b> Java <b>code.</b> Indeed, Scala's compiling and executing model is identical to that of Java, making it compatible with Java build tools such as Apache Ant.|$|R
5000|$|Alice is sent an {{infected}} email which she opens, <b>running</b> the worm <b>code.</b>|$|R
