14|5|Public
5000|$|... jq {{can both}} create and read <b>record</b> <b>separator</b> delimited JSON texts.|$|E
5000|$|Send the JSON objects {{concatenated}} with a <b>record</b> <b>separator</b> {{control character}} as the delimiter.|$|E
50|$|<b>Record</b> <b>separator</b> delimited JSON {{streaming}} allows JSON text sequences to be delimited {{without the}} requirement that the JSON formatter exclude whitespace. Since JSON text sequences cannot contain control characters, a <b>record</b> <b>separator</b> character {{can be used to}} delimit the sequences. In addition, it is suggested that each JSON text sequence be followed by a line feed character to allow proper handling of top-level JSON objects that are not self delimiting (numbers, true, false, and null).|$|E
40|$|Updates: 1) gnomAD genomes and gnomAD exomes 2) homozygosity, heterozygosity, missingGenos, missingness, sampleMaf. 3) Significantly faster (~ 2 x) while {{outputting}} ~ 2 x {{more data}} 4) VCF builder. Supports any INFO data (numerical, text; currently {{do not support}} delimiters besides commas for multiallelic, and semicolon for <b>record</b> <b>separators).</b> Properly segregates data by allele in multiallelics. Capable of performing QC using INFO data (example: AS_FilterStatus=PASS). Configurable by YAML db config...|$|R
40|$|Summary. This {{article is}} a {{continuation}} of [6]. We present the notion of files and records. These are two finite sequences. One is a record and another is a separator for the carriage return and/or line feed. So, we define the record. The sequential text file contains <b>records</b> and <b>separators.</b> Generally, a <b>record</b> and a <b>separator</b> are paired in the file. And in a special situation, the separator does not exist in the file, for that the record is only one record or record is nothing. And the record does not exist in the file, for that some separator is in the file. In this article, we present a theory for files and records...|$|R
50|$|The records {{follow the}} header in the {{database}} file. Data records are preceded by one byte: a space (0x20) if the record is not deleted, or an asterisk (0x2A) if the record is deleted. Fields are packed into <b>records</b> without field <b>separators</b> or <b>record</b> terminators. The end of the file {{is marked by a}} single byte 0x1A.|$|R
5000|$|... : Stores {{the current}} [...] "record separator" [...] {{character}}. Since, by default, an input {{line is the}} input record, the default <b>record</b> <b>separator</b> character is a [...] "newline".|$|E
50|$|The use of ASCII 31 Unit {{separator}} as a {{field separator}} and ASCII 30 <b>Record</b> <b>separator</b> solves the problem of both field and record delimiters that appear in a text data stream.|$|E
5000|$|The octal {{representation}} of 511 (7778) {{is commonly used}} by Unix commands to specify a custom <b>record</b> <b>separator</b> in order to [...] "slurp" [...] input as a whole, rather than line-by-line (i.e. separated at newline characters).|$|E
40|$|Objectives: To {{study the}} effect of {{benzocaine}} mucoadhesive patches (20 %) on orthodontic pain caused by elastomeric separators. Subjects and methods. A split-mouth design was used in 30 patients (12 female, 18 male, aged 23 ± 3. 75 years). They were instructed to apply benzocaine and placebo patches randomly for right or left first permanent molars of maxillary/mandibular arches for 20 min and repeat this procedure every 6 h with a similar type patch. A 10 cm Visual Analogue Scale (VAS) was used for pain perception assessment in patients who were given benzocaine (benzocaine group) or placebo (placebo group) patches. Pain perception (VAS) was <b>recorded</b> immediately after <b>separator</b> placement and after 2, 6, 12, 18, 24, 48 and 72 h. Results. The mean VAS (SD) for the placebo and benzocaine groups were 2. 28 (1. 08) and 1. 63 (0. 67), respectively. The pain peaked at 24 h. Significant pain perception differences were observed between groups at 2, 18, 24, 48 and 72 h. Pain perception was not different between genders or jaws investigated (p > 0. 05). The Friedman test revealed significant differences in pain perception among various time intervals for benzocaine (χ 2 = 99. 84, p = 0. 000) and placebo (χ 2 = 102. 361, p = 0. 000) groups. Significant negative correlations (ρ) were found only between pain perception scores and patient's ages {{in the placebo group}} at 18 (− 0. 438), 24 (− 0. 526), 48 (− 0. 565) and 72 h (− 0. 458). Conclusion. The recorded mean VAS values were relatively low; however, the benzocaine 20 % patches significantly reduced the post-separation orthodontic pain...|$|R
40|$|This study {{suggests}} {{a way of}} building an as-accurate-as-possible compositional infrastructure to generate continuous wellstreams, from periodic well tests. It also studies the influence of well test measurements on the reservoir and production management. Since well tests are <b>recorded</b> at varying <b>separator</b> temperature and pressure, the measurements are not consistent with each other, and may lead to misinterpretations, wrong decisions, which {{would result in a}} lowered production, and ultimately to less incomes. The Well Test Conversion module is used to estimate the actual reservoir wellstream, considering it as molar compositional rates. From this point of view, {{a better understanding of the}} flow is possible. In this model, the importance of accurate wellstream generations is emphasized. By reprocessing at any separator conditions, all the well test measurements are simulated, and the comparison between the measurements is more meaningful. The deviations due to the varying separator conditions are flagged. Once the effect of the separator conditions has been removed, actual variations of the fluid properties can be studied. The continuous data are limited to rate measurements, while the periodic well tests are richer in information. A method is proposed to feed the continuous production data with molar rates, generated from periodic well tests. This algorithm produces a database of continuous wellstreams that can be sent through the actual process facilities. In this work, a compositional description of the production is discussed. The data characterizing the production can then be studied (API density and Shrinkage Factor among others) from the simulations. This leads to discussions about the reservoir behaviour, and supports an improved production management. Once the compositional infrastructure is built and the facilities on surface are modelled, an enhanced back-allocation of the production can be achieved...|$|R
5000|$|The {{print command}} {{is used to}} output text. The output text is always {{terminated}} with a predefined string called the output <b>record</b> <b>separator</b> (ORS) whose default value is a newline. The simplest form of this command is: ...|$|E
50|$|The {{shortcut}} for Unit Separator character 1F (^_) is Ctrl -. The shortcut for <b>Record</b> <b>Separator</b> character 1E (^^) is Ctrl 6. Note that in Notepad, or any Windows standard text box, {{these characters}} {{can be easily}} inserted via the context menu Insert Unicode control character.|$|E
5000|$|Incremental plot, entered {{with the}} ASCII <b>Record</b> <b>Separator</b> (RS) character, {{replaced}} the normal coordinates with single-character directions. For instance, sending [...] moved up ("north"). This was especially useful for drawing control needles and similar moving displays, and greatly reduces {{the amount of}} information that has to be sent to the terminal over time.|$|E
50|$|ASCII {{includes}} several control characters that {{are intended to}} be used as delimiters. They are: 28 for File Separator, 29 for Group Separator, 30 for <b>Record</b> <b>Separator,</b> and 31 for Unit Separator. Use of these characters has not achieved widespread adoption; some systems have replaced their control properties with more accepted controls such as CR/LF and TAB.|$|E
5000|$|Many Unix {{utilities}} are line-oriented. These may work with [...] {{as long as}} the lines do not contain ', [...] " [...] or space. Some of the Unix utilities can use NUL as <b>record</b> <b>separator</b> (e.g. Perl (requires [...] and [...] instead of [...] ), [...] (requires using [...] ), [...] (requires using [...] ), [...] (requires [...] or [...] ), [...] (requires using [...] )). Using [...] for [...] deals with the problem, but many Unix utilities cannot use NUL as separator (e.g. , , , , , , , [...] ).|$|E
5000|$|Systems {{based on}} ASCII or a {{compatible}} character set use either [...] (Line feed, , , 10 in decimal) or [...] (Carriage return, , , 13 in decimal, displayed as [...] "^M" [...] in some editors) individually, or [...] followed by [...] (+, , [...] ). These characters {{are based on}} printer commands: The line feed indicated that one line of paper should feed out of the printer thus instructed the printer to advance the paper one line, and a carriage return indicated that the printer carriage should return {{to the beginning of}} the current line. Some rare systems, such as QNX before version 4, used the ASCII [...] (<b>record</b> <b>separator,</b> , 30 in decimal) character as the newline character.|$|E
40|$|This {{document}} {{describes the}} JavaScript Object Notation (JSON) text sequence format and associated media type "application/json-seq". A JSON text sequence consists of {{any number of}} JSON texts, all encoded in UTF- 8, each prefixed by an ASCII <b>Record</b> <b>Separator</b> (0 x 1 E), and each ending with an ASCII Line Feed character (0 x 0 A). Status of This Memo This is an Internet Standards Track document. This document {{is a product of}} the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 5741. Information about the current status of this document, any errata, and how to provide feedback on it may be obtained a...|$|E
40|$|Magnetic tape records {{though no}} more than three levels within a record were {{apparent}} in the files being studied. As a result, the methods of accessing and keying the records can be quite complex, but the advantage of doing so can be judged by the fact that in practice one policy record can be more than ten times as long as another. This varia-tion is unusual but must be provided for. Fixed-length records would thus waste about 90 % of the magnetic tape available, and increase overall processing time to an unreasonable extent. Conclusion Financial records, which form a considerable part of the general data-processing problem, can be separated by normal double-entry book-keeping into individual accounts, each for a specific asset, customer, or supplier, etc. Each of these accounts can be allotted a serial number, and will generally also contain the next date on which an action must be taken if the account does not alter, subsidiary keys such as the agency involved, the occupation or industry of the account holder, etc., References the name and address for correspondence, and details both of the items forming the outstanding balance of account and of the contract underlying the account, or each item of it. The general layout of a record of an account should be arranged with the fixed-length items at the beginning and the items subject to frequent change at the end, as follows: 1 <b>Record</b> <b>separator</b> or length of this record. 2. Principal keys, the account number and the earliest implicit alteration date. 3. Subsidiary keys and statistical keys. 4. Variable-length items subject to occasional altera-tion, such as name and address and possibly contract details. Void items may be fairly common in the latter. 5. Repetitive items subject to frequent change nor-mally by addition or deletion. The items forming the balance of the account together with their description and due dates are the principal category under this heading. CORMACK, A. S. (1965). "Interaction between user's needs and language—compiler—computer systems, " The Computer Journal Vol. 8, p. 8...|$|E

