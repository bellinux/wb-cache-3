256|271|Public
5|$|Roguelike-likes are {{generally}} much shorter games {{intended to be}} winnable within a single gaming session, in contrast to traditional roguelikes that are designed for multiple sessions of gameplay. Associated with their short length, many roguelike-likes feature a metagame, whereby achieving certain goals will unlock features {{such as the ability}} to select a new character {{at the start of the}} game or the addition of new items and monsters in the procedural generation of the game's levels. Several roguelike-likes feature daily challenges, in which a preset <b>random</b> <b>seed</b> is used to generate the game's levels in a deterministic fashion so that each player will have the same encounters; players attempt to complete the game through those levels or otherwise get the highest score through online leaderboards. Roguelike-likes may also allow the player to enter the <b>random</b> <b>seed</b> directly as to be able to rechallenge the same set of levels or share a difficult set of levels with other players.|$|E
500|$|For most {{applications}} of hashing, {{it is necessary}} to compute the hash function for each value every time that it is hashed, rather than once when its object is created. In such applications, random or pseudorandom numbers cannot be used as hash values, because then different objects with the same value would have different hashes. And cryptographic hash functions (which are designed to be computationally indistinguishable from truly random functions) are usually too slow to be used in hash tables. Instead, other methods for constructing hash functions have been devised. These methods compute the hash function quickly, and can be proven to work well with linear probing. In particular, linear probing has been analyzed from the framework of -independent hashing, a class of hash functions that are initialized from a small <b>random</b> <b>seed</b> and that are equally likely to map any -tuple of distinct keys to any -tuple of indexes. The parameter [...] {{can be thought of as}} a measure of hash function quality: the larger [...] is, the more time it will take to compute the hash function but it will behave more similarly to completely random functions.|$|E
500|$|The Rosetta@home {{application}} and the BOINC distributed computing platform {{are available for}} the operating systems Windows, Linux, and macOS; BOINC also runs on several others, e.g., FreeBSD. [...] Participation in Rosetta@home requires a central processing unit (CPU) with a clock speed of at least 500MHz, 200megabytes of free disk space, 512megabytes of physical memory, and Internet connectivity. [...] As of July 20, 2016, {{the current version of}} the Rosetta Mini application is 3.73. The current recommended BOINC program version is 7.6.22. [...] Standard Hypertext Transfer Protocol (HTTP) (port 80) is used for communication between the user's BOINC client and the Rosetta@home servers at the University of Washington; HTTPS (port 443) is used during password exchange. [...] Remote and local control of the BOINC client use port 31416 and port 1043, which might need to be specifically unblocked if they are behind a firewall. [...] Workunits containing data on individual proteins are distributed from servers located in the Baker lab at the University of Washington to volunteers' computers, which then calculate a structure prediction for the assigned protein. [...] To avoid duplicate structure predictions on a given protein, each workunit is initialized with a <b>random</b> <b>seed</b> number. [...] This gives each prediction a unique trajectory of descent along the protein's energy landscape. [...] Protein structure predictions from Rosetta@home are approximations of a global minimum in a given protein's energy landscape. [...] That global minimum represents the most energetically favorable conformation of the protein, i.e., its native state.|$|E
30|$|Simulations {{have been}} run over ten times with <b>random</b> <b>seeds.</b> The {{performance}} metrics {{used in our}} proposed scheme are then collected and averaged. To ensure a valid comparison, the sequence of <b>random</b> <b>seeds</b> is the same and the only variation is the choice of parameters.|$|R
25|$|KeePass {{features}} a built-in password generator that generates <b>random</b> passwords. <b>Random</b> <b>seeding</b> {{can be done}} through user input (mouse movement and random keyboard input).|$|R
5000|$|P curves are {{standardized}} by NIST for {{elliptic curve}} cryptography. The coefficients in these curves are generated by hashing unexplained <b>random</b> <b>seeds,</b> such as: ...|$|R
6000|$|With earnest feeling I shall pray [...] 20 [...] For thee when I am far away: [...] For {{never saw}} I mien, or face, [...] In which more plainly I could trace [...] Benignity and home-bred sense [...] Ripening in perfect innocence. [...] Here, scatter'd like a <b>random</b> <b>seed,</b> [...] Remote from men, Thou dost not need [...] The embarrass'd look of shy distress, [...] And maidenly shamefacedness: ...|$|E
60|$|A mien {{and face}} In which full plainly I can trace Benignity, and home-bred sense, Ripening in perfect innocence. Here scattered, like a <b>random</b> <b>seed,</b> Remote from men, thou dost not need The embarrassed look of shy {{distress}} And maidenly shamefacedness. Thou wear'st upon thy forehead clear The freedom of a mountaineer. A face with gladness overspread, Soft smiles, by human kindness bred, And seemliness complete, that sways Thy courtesies, about thee plays. With no restraint, save such as springs From quick and eager visitings Of thoughts that lie {{beyond the reach}} Of thy few words of English speech. A bondage sweetly brooked, a strife That gives thy gestures grace and life.|$|E
6000|$|... "A mien {{and face}} [...] In which full plainly I can trace [...] Benignity and home-bred sense, [...] Ripening in perfect innocence. [...] Here scattered, like a <b>random</b> <b>seed,</b> [...] Remote from men, thou dost not need [...] The embarrassed look of shy {{distress}} [...] And maidenly shamefacedness. [...] Thou wear'st upon thy forehead clear [...] The freedom of a mountaineer. [...] A face with gladness overspread, [...] Soft smiles, by human kindness bred, [...] And seemliness complete, that sways [...] Thy courtesies, about thee plays. [...] With no restraint, save such as springs [...] From quick and eager visitings [...] Of thoughts that lie {{beyond the reach}} [...] Of thy few words of English speech. [...] A bondage sweetly brooked, a strife [...] That gives thy gestures grace and life." ...|$|E
30|$|Surprisingly, we {{find that}} higher Uniform Threshold values {{increase}} how much link-prediction error is tolerable in planning complete cascades. We say that a rate of link-prediction error is tolerable if V' remains competitive with seeding based on perfectly accurate link information, and most realizations of G' yield a V' with performance that exceeds <b>random</b> <b>seeding.</b> We also observe a second style of tolerance against link-prediction error when OAS performance remains substantially above the performance of <b>random</b> <b>seeding</b> despite remarkably high link prediction error.|$|R
30|$|As in our {{synthetic}} network tests, {{we observe}} {{a decline in}} OAS_mg as p_neg increases. Remarkably, except when the infection threshold is quite small, we observe that OAS_mg reliably outperforms <b>random</b> <b>seeding</b> until p_neg is very high. Over an initial interval, increasing p_neg has mild impacts on OAS_mg. As p_neg passes a critical level we again observe a steep descent to the performance level of <b>random</b> <b>seeding.</b> This is remarkably similar to what we noted in smaller synthetic networks. Threshold τ = 0.8 may appear to provide somewhat of an exception, but the mild erosion of performance caused immediately as p_neg increases from 0 again is followed by an interval of slightly steeper descent (with larger variance) to match <b>random</b> <b>seeding</b> performance. We note that the distributions of cascade sizes for τ = 0.6 and τ = 0.8 are often extremely narrow.|$|R
40|$|Random number {{generators}} (RNG) play {{an important}} role in many sensor network systems and applications, such as those requiring secure and robust communications. In this paper, we develop a high-security and high-throughput hardware true random number generator, called PUFKEY, which consists of two kinds of physical unclonable function (PUF) elements. Combined with a conditioning algorithm, true <b>random</b> <b>seeds</b> are extracted from the noise on the start-up pattern of SRAM memories. These true <b>random</b> <b>seeds</b> contain full entropy. Then, the true <b>random</b> <b>seeds</b> are used as the input for a non-deterministic hardware RNG to generate a stream of true random bits with a throughput as high as 803 Mbps. The experimental results show that the bitstream generated by the proposed PUFKEY can pass all standard national institute of standards and technology (NIST) randomness tests and is resilient to a wide range of security attacks...|$|R
6000|$|With earnest feeling I shall pray [...] For thee when I am far away: [...] For {{never saw}} I mien, or face, [...] In which more plainly I could trace [...] 25 [...] Benignity and home-bred sense [...] Ripening in perfect innocence. [...] Here scattered, like a <b>random</b> <b>seed,</b> [...] Remote from men, Thou dost not need [...] The embarrassed look of shy distress, [...] 30 [...] And maidenly shamefacedness: [...] Thou wear'st upon thy {{forehead}} clear [...] The freedom of a Mountaineer: [...] A face with gladness overspread! [...] Soft smiles, [6] by human kindness bred! [...] 35 [...] And seemliness complete, that sways [...] Thy courtesies, about thee plays; [...] With no restraint, but such as springs [...] From quick and eager visitings [...] Of thoughts that lie {{beyond the reach}} [...] 40 [...] Of thy few words of English speech: [...] A bondage sweetly brooked, a strife [...] That gives thy gestures grace and life! [...] So have I, not unmoved in mind, [...] Seen birds of tempest-loving kind--45 [...] Thus beating up against the wind.|$|E
6000|$|Yet {{was this}} deep {{vacation}} {{not given up}} [...] To utter waste. Hitherto I had stood [...] In my own mind remote from social life, [...] (At least from what we commonly so name,) [...] 515 [...] Like a lone shepherd on a promontory [...] Who lacking occupation looks far forth [...] Into the boundless sea, and rather makes [...] Than finds what he beholds. And sure it is, [...] That this first transit from the smooth delights [...] 520 [...] And wild outlandish walks of simple youth [...] To something that resembles an approach [...] Towards human business, to a privileged world [...] Within a world, a midway residence [...] With all its intervenient imagery, [...] 525 [...] Did better suit my visionary mind, [...] Far better, than to have been bolted forth; [...] Thrust out abruptly into Fortune's way [...] Among the conflicts of substantial life; [...] By a more just gradation did lead on [...] 530 [...] To higher things; more naturally matured, [...] For permanent possession, better fruits, [...] Whether of truth or virtue, to ensue. [...] In serious mood, but oftener, I confess, [...] With playful zest of fancy did we note [...] 535 [...] (How could we less?) the manners and the ways [...] Of those who lived distinguished by the badge [...] Of good or ill report; or those with whom [...] By frame of Academic discipline [...] We were perforce connected, men whose sway [...] 540 [...] And known authority of office served [...] To set our minds on edge, and did no more. [...] Nor wanted we rich pastime of this kind, [...] Found everywhere, but chiefly in the ring [...] Of the grave Elders, men unsecured, grotesque [...] 545 [...] In character, tricked out like aged trees [...] Which through the lapse of their infirmity [...] Give ready place to any <b>random</b> <b>seed</b> [...] That chooses to be reared upon their trunks.|$|E
50|$|The {{choice of}} a good <b>random</b> <b>seed</b> is crucial {{in the field of}} {{computer}} security. When a secret encryption key is pseudorandomly generated, having the seed will allow one to obtain the key. High entropy is important for selecting good <b>random</b> <b>seed</b> data.|$|E
3000|$|... {{performance}} {{appears to}} stabilize reliably above the performance level of <b>random</b> <b>seeding,</b> {{even for the}} highest rates of link-prediction error. At the lowest thresholds, as link-prediction error increases, [...]...|$|R
3000|$|Remarkably, {{at higher}} {{thresholds}} (τ = 0.6, 0.8) in Fig.  11 we again observe the remarkable stabilization of OAS_tg performance {{far above the}} performance of <b>random</b> <b>seeding</b> (26 [...]...|$|R
50|$|<b>Random</b> <b>seeds</b> {{are often}} {{generated}} {{from the state of}} the computer system (such as the time), a cryptographically secure pseudorandom number generator or from a hardware random number generator.|$|R
5000|$|... #Caption: Gliders {{escape from}} a central <b>random</b> <b>seed</b> {{region in the}} Critters block {{cellular}} automaton rule.|$|E
50|$|In {{theoretical}} {{computer science}} and cryptography, a pseudorandom generator (PRG) {{for a class}} of statistical tests is a deterministic procedure that maps a <b>random</b> <b>seed</b> to a longer pseudorandom string such that no statistical test in the class can distinguish between {{the output of the}} generator and the uniform distribution. The <b>random</b> <b>seed</b> is typically a short binary string drawn from the uniform distribution.|$|E
5000|$|... #Caption: Gliders {{escape a}} central <b>random</b> <b>seed,</b> past {{the debris of}} earlier glider crashes, in the Critters rule.|$|E
50|$|Uncertainty is {{quantified}} {{by using}} <b>random</b> <b>seeds</b> to generate slightly differing realizations, particularly for areas of interest. This process improves {{the understanding of}} uncertainty and risk within the model.|$|R
3000|$|Even without {{knowledge}} of realized thresholds, OAS_tg provides a large advantage over <b>random</b> <b>seeding.</b> In the email network (Fig.  20), at p_neg= 0.4 this advantage grows from roughly 40 [...]...|$|R
30|$|To test our {{observations}} from Fig.  8, in Fig.  9 we consider a second scale-free network. The initial base community has 120 nodes with average-degree 16 (binomial degree distribution). Next, 180 new nodes are added gradually {{to the network}} according to the preferential-attachment function (3). Again, while initially OAS_tg declines steeply, at higher thresholds we note that even for extreme departures between E(G') and E(G), OAS_tg consistently outperforms <b>random</b> <b>seeding</b> attempts at the same budget (that often convert no non-seeds). The magnitude of the OAS_tg advantage over <b>random</b> <b>seeding</b> at threshold τ = 0.8 for the highest p_neg values is quite surprising.|$|R
50|$|A <b>random</b> <b>seed</b> (or seed state, or just seed) is {{a number}} (or vector) used to {{initialize}} a pseudorandom number generator.|$|E
50|$|Pseudorandom number {{generators}} (PRNGs) {{can be built}} using hash functions. This is done {{by combining}} a (secret) <b>random</b> <b>seed</b> with a counter and hashing it.|$|E
5000|$|In {{its most}} common form, a lag-r MWC {{generator}} requires abase b, a multiplier a, {{and a set}} ofr+1 <b>random</b> <b>seed</b> values, consisting of r residues of b, ...|$|E
40|$|Many motif finding {{algorithms}} apply local search {{techniques to}} a set of seeds. For example, GibbsDNA (Lawrence et al., 1993) applies Gibbs sampling to <b>random</b> <b>seeds,</b> and MEME (Bailey and Elkan, 1994) applies the EM algorithm to selected sample strings, i. e. substrings of the sample. In the case of subtle motifs, recent benchmarking efforts show that both <b>random</b> <b>seeds</b> and selected sample strings may never get close to the globally optimal motif. We propose a new approach which searches motif space by branching from sample strings, and implement this idea in both pattern-based and profile-based settings. Our PatternBranching and ProfileBranching algorithms achieve favorable results relative to other motif finding algorithms...|$|R
3000|$|As {{with smaller}} {{synthetic}} networks, in real networks (Figs.  19, 21) we observe that OAS_mg provides a reliable advantage over <b>random</b> <b>seeding</b> even when p_neg is quite large. The {{magnitude of this}} advantage is most compelling (25 [...]...|$|R
30|$|We ran {{two sets}} of six {{experiments}} on seven different network topologies. Networks were initialized with 1024 nodes in one set of experiments and 64 nodes in the other. Each experiment was run 100 times with different <b>random</b> <b>seeds.</b>|$|R
5000|$|GPxSet {{function}} {{allows the}} user to change the qualifying rules, amount of cars on the track at any time, the weather probability, quickrace length, <b>random</b> <b>seed</b> and other things too.|$|E
5000|$|Hard-core predicates give {{a way to}} {{construct}} a pseudorandom generator from any one-way permutation. If b is a hard-core predicate of a one-way permutation f, and s is a <b>random</b> <b>seed,</b> then ...|$|E
5000|$|The Lanczos {{algorithm}} usually {{starts with}} a <b>random</b> <b>seed.</b> In DMRG, the ground state obtained in a certain DMRG step, suitably transformed, {{may serve as a}} better seed for the Lanczos algorithm at the next DMRG step.|$|E
3000|$|... [*]bytes and {{is assumed}} to have an energy field that is updated during the packet {{transmission}} to calculate the total energy consumption in the network. We have applied different <b>random</b> <b>seeds</b> to generate different network configuration during the [...]...|$|R
3000|$|When {{does the}} {{performance}} of a seeding strategy that is optimized-against-a-sample reliably exceed mean <b>random</b> <b>seeding</b> (that uses no information about G’s topology)? Intuitively, this should be true when p_neg is very low, but in the figures above we observed an unexpected trend: [...]...|$|R
30|$|To {{check this}} understanding, we {{consider}} seeding our scale-free network at a smaller budget: we let b be the lowest budget sufficient {{to cause a}} full cascade in G under greedy seeding. Thus we obtain Fig.  7. At these lower budgets we obtain results that are qualitatively very similar to our observations in small-world networks (Figs. 2, 3, 4). Budgets are now so small that <b>random</b> <b>seeding</b> can completely fail to cause new infections (the red horizontal line depicting <b>random</b> <b>seeding</b> is covered by the yellow line depicting b). We tested a second scale-free network with a larger base community of 120 nodes before preferential attachment of 180 additional nodes. The figures produced by the two budget-selection methods were so similar to Figs.  6 and 7 that we exclude them to avoid repetition.|$|R
