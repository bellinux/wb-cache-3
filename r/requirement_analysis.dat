726|3824|Public
50|$|The {{objective}} of the environmental analysis is to formalize the strategies and objectives of a new electronic market. The stage comprises two phases: the environment definition and the <b>requirement</b> <b>analysis.</b> The goal of the environment definition is to characterize the economic environment for which the market is to be engineered. This phase comprises the collection and analysis of potential trading objects, market segments, and agents that may interact on a particular segment. On {{the basis of this}} analysis, potential market segments for trading these resources are identified and evaluated comparatively. Having selected a target market, information about potential agents is determined. The target market reveals the economic environment for which the market is intended. The <b>requirement</b> <b>analysis</b> consists of a thorough extraction of these needs concerning the resource allocation problem and the environmental side constraints. On the basis of the <b>requirement</b> <b>analysis,</b> the market engineer decides whether to engineer a new mechanism from scratch or to reuse and adapt an existing one for the target problem. This decision is usually supported by a literature review, surveys, a SWOT analysis, and interviews with future market participants. The output of stage 1 is a list with all requirements.|$|E
50|$|A {{system model}} is the {{conceptual}} model {{as a result of}} system modeling that describes and represents a system. A system comprises multiple views such as planning, <b>requirement</b> (<b>analysis),</b> design, implementation, deployment, structure, behavior, input data, and output data views. A system model is required to describe and represent all these multiple views.|$|E
50|$|Put simply; whereas Requirements {{analysis}} {{focuses on}} the elements needed to be represented in the system, needs analysis {{focuses on the}} requirements related to the goals, aspirations {{and needs of the}} users and/or the user community and feeds them into the system <b>requirement</b> <b>analysis</b> process. The main purpose of needs analysis is the user's satisfaction.|$|E
40|$|The {{relationship}} between project selection and <b>requirements</b> <b>analysis</b> is important, yet {{has not received}} much attention. The decisions made during project selection directly affect and frame a project’s <b>requirements</b> <b>analysis.</b> In current practice, {{it is expected that}} <b>requirements</b> <b>analysis</b> begins after project selection has occurred. Yet, we know little empirically about the procedural {{relationship between}} project selection and <b>requirements</b> <b>analysis.</b> We performed a field study to examine in detail how project selection is performed and what procedural relationship, if any, exists between project selection and <b>requirements</b> <b>analysis.</b> We found, contrary to the common view of requirements engineering practice, that <b>requirements</b> <b>analysis</b> occurred in multiple parallel streams. We observed that <b>requirements</b> <b>analysis</b> helped define the initial project choices. In addition, as the project selection process progressed, each candidate project’s requirements were further refined. We call this process multiple parallel competitive <b>requirements</b> <b>analysis</b> (MPCRA). We argue that MPCRA should be considered as a viable alternative to current requirements engineering practices, especially for determining and designing large-scale complex projects. 1...|$|R
40|$|As {{software}} {{becomes more}} complicated and larger, software engineer's <b>requirements</b> <b>analysis</b> become important and uneasy activity. This paper proposes a <b>requirements</b> <b>analysis</b> supporting system that supports informal <b>requirements</b> <b>analysis.</b> The proposed system measures the similarity between requirement sentences to identify possible redundancies and inconsistencies, and extracts the possible ambiguous requirements. The similarity measurement method combines a sliding window model and a parser model. Using these methods, the proposed system supports to trace dependency between documents and improve quality of requirement sentences. Efficiency of the proposed system and a process for <b>requirement</b> specification <b>analysis</b> using the system are presented. Key words Requirements engineering, natural language processing, software analysis, similarity measurements 1 Introduction <b>Requirements</b> <b>analysis</b> plays an increasingly important role in software development because most problems are caused by [...] ...|$|R
40|$|Interviews with IS {{developers}} {{suggest that}} <b>requirements</b> <b>analysis</b> is rarely {{perceived as a}} cooperative activity. Instead it is often seen {{as a process of}} extracting requirements from passive clients (as terms such as "requirements capture" and "requirements engineering" imply). A more cooperative approach which recognises <b>requirements</b> <b>analysis</b> as a negotiative process between analyst(s) and client(s) however, might help to overcome some of the problems encountered in traditional <b>requirements</b> <b>analysis.</b> In this chapter we will discuss some of the conditions which encourage or discourage the development of a more cooperative requirements process. We will also describe the potential use of Cognitive Mapping, as a technique specifically developed to support negotiation, in <b>requirements</b> <b>analysis.</b> 1. ...|$|R
50|$|Low-level design (LLD) is a component-level {{design process}} that follows a {{step-by-step}} refinement process. This {{process can be}} used for designing data structures, required software architecture, source code and ultimately, performance algorithms. Overall, the data organization may be defined during <b>requirement</b> <b>analysis</b> and then refined during data design work. Post-build, each component is specified in detail.|$|E
50|$|Establishing design <b>requirement</b> <b>analysis,</b> {{sometimes}} termed problem definition, {{is one of}} {{the most}} important elements in the design process, and this task is often performed at the same time as a feasibility analysis. The design requirements control the design of the project throughout the engineering design process. These include basic things like the functions, attributes, and specifications - determined after assessing user needs. Some design requirements include hardware and software parameters, maintainability, availability, and testability.|$|E
50|$|Intranets {{are often}} static sites; {{they are a}} shared drive, serving up {{centrally}} stored documents alongside internal articles or communications (often one-way communication). By leveraging firms which specialise in 'social' intranets, organisations are beginning to think of how their intranets can become a 'communication hub' for their entire team.The actual implementation would include steps such as securing senior management support and funding., conducting a business <b>requirement</b> <b>analysis</b> and identifying users' information needs.|$|E
40|$|<b>Requirements</b> <b>analysis</b> {{focuses on}} {{stakeholders}} concerns and their influence towards e-government systems. Some characteristics of stakeholders concerns clearly show {{the complexity and}} conflicts. This imposes {{a number of questions}} in the <b>requirements</b> <b>analysis,</b> such as how are they relevant to stakeholders? What are their needs? How conflicts among the different stakeholders can be resolved? And what coherent requirements can be methodologically produced? This paper describes the problem articulation method in organizational semiotics which can be used to conduct such complex <b>requirements</b> <b>analysis.</b> The outcomes of the analysis enable e-government systems development and management to meet userspsila needs. A case study of Yantai Citizen Card is chosen to illustrate a process of analysing stakeholders in the lifecycle of <b>requirements</b> <b>analysis...</b>|$|R
40|$|Experimental {{development}} {{based on}} mapping rule between <b>requirements</b> <b>analysis</b> model and web framework specific design model Hirotaka Okuda 1 *, Shinpei Ogata 2 and Saeko Matsuura 1 Model Driven Development is a promising approach to develop high quality software systems. We {{have proposed a}} method of model-driven <b>requirements</b> <b>analysis</b> using Unified Modeling Language (UML). The main feature of our method is to automatically generate a Web user interface prototype from UML <b>requirements</b> <b>analysis</b> model {{so that we can}} confirm validity of input/output data for each page and page transition on the system by directly operating the prototype. We proposes a mapping rule in which design information independent of each web application framework implementation is defined based on the <b>requirements</b> <b>analysis</b> model, so as to improve the traceability to the final product from the valid <b>requirements</b> <b>analysis</b> model. This paper discusses the result of applying our method {{to the development of a}} Group Work Support System that is currently running in our department...|$|R
40|$|Abstract—Detailed <b>requirements</b> <b>analysis</b> plays a {{key role}} towards the design of {{successful}} Data Warehouse (DW) system. The <b>requirements</b> <b>analysis</b> specifications are used as the prime input for the construction of conceptual level multidimensional data model. This paper has proposed a Business Object based <b>requirements</b> <b>analysis</b> framework for DW system which is supported with abstraction mechanism and reuse capability. It also facilitate the stepwise mapping of requirements descriptions into high level design components of graph semantic based conceptual level object oriented multidimensional data model. The proposed framework starts with the identification of the analytical requirements using business process driven approach and finally refine the requirements in further detail to map into the conceptual level DW design model using either Demand-driven of Mixed-driven approach for DW <b>requirements</b> <b>analysis...</b>|$|R
50|$|Another {{crowdsourcing}} example—TopCoder—creates {{a software}} contest model where programming tasks are posted as contests and the developer {{of the best}} solution wins the top prize. Following this model, TopCoder has established an online platform to support its ecosystem and gathered a virtual global workforce with more than 1 million registered members and nearly 50,000 active participants. All these TopCoder members compete {{against each other in}} software development tasks such as <b>requirement</b> <b>analysis,</b> algorithm design, coding, and testing.|$|E
50|$|Use case {{analysis}} {{is an important}} and valuable <b>requirement</b> <b>analysis</b> technique that has been widely used in modern software engineering since its formal introduction by Ivar Jacobson in 1992. Use case driven development is a key characteristic of many process models and frameworks such as ICONIX, the Unified Process (UP), the IBM Rational Unified Process (RUP), and the Oracle Unified Method (OUM). With its inherent iterative, incremental and evolutionary nature, use case also fits well for agile development.|$|E
50|$|Software design {{documentation}} may {{be reviewed}} or presented to allow constraints, specifications and even requirements {{to be adjusted}} prior to computer programming. Redesign may occur after review of a programmed simulation or prototype. It is possible to design software {{in the process of}} programming, without a plan or <b>requirement</b> <b>analysis,</b> but for more complex projects this would not be considered feasible. A separate design prior to programming allows for multidisciplinary designers and Subject Matter Experts (SMEs) to collaborate with highly skilled programmers for software that is both useful and technically sound.|$|E
5000|$|Certificate in Information Systems <b>Requirements</b> <b>Analysis</b> (CIRA) ...|$|R
40|$|Report {{discusses}} role of <b>requirements</b> <b>analysis</b> {{in development}} of information-intensive systems. System examined from variety of human viewpoints during design, development, and implementation. Such examination, called <b>requirements</b> <b>analysis,</b> ensures system simultaneously meets number of distinct but interacting needs. Viewpoints defined and integrated to help attain objectives...|$|R
5000|$|Definition study (DS): <b>Requirements</b> <b>analysis</b> {{and revised}} plan ...|$|R
50|$|DR {{is used by}} {{research}} communities in software engineering, mechanical design, artificial intelligence, civil engineering, and human-computer interaction research. In software engineering, {{it could be used}} to support the designers ideas during <b>requirement</b> <b>analysis,</b> capturing and documenting design meetings and predicting possible issues due to new design approach. In software architecture and outcourcing solution design, it can justify the outcome of architectural decisions and serve as a design guide.In civil engineering, it helps to coordinate the variety of work that the designers do {{at the same time in}} different areas of a construction project. It also help the designers to understand and respect each other's ideas and resolve any possible issues.|$|E
50|$|A {{major problem}} with the {{monolithic}} APs {{of the first and}} second releases is that they are too big, have too much overlap with each other, and are not sufficiently harmonized. These deficits {{led to the development of}} the STEP modular architecture (400 and 1000 series). This activity was primarily driven by new APs covering additional life-cycle phases such as early <b>requirement</b> <b>analysis</b> (AP 233) and maintenance and repair (AP 239), and also new industrial areas (AP 221, AP 236). New editions of the previous monolithic APs on a modular basis have been developed (AP 203, AP 209, AP 210). The publication of these new editions coincided with the release in 2010 of the new ISO product SMRL, the STEP Module and Resource Library, that contains all STEP resource parts and application modules on a single CD. The SMRL will be revised frequently and is available at a much lower cost than purchasing all the parts separately.|$|E
50|$|ADR {{will require}} control {{technology}} components and subsystems {{that will work}} with security, network standards, messaging, protocols, etc. in culmination with operational parameters. Advanced Metering Infrastructure (AMI) will also be checked for proper ability in terms of data volume and networking aspects. Further requirements such as rate design models, system-wide data and metadata modeling, etc. {{will be used to}} guide though system architectureThe Demand-Response system provides an efficient service to utility systems and consumers. It is based on a service-oriented architecture (SOA) that would use information from the utility systems technical evaluations and <b>requirement</b> <b>analysis</b> to help assist integration modalities for backend utility systems. Through this architecture, real-time collaboration among the entire network involving billing, metering, distribution, etc., can be accomplished. Consumers are able to make requests and a supervisory controlling system will monitor the demands of the consumer and make the best available decisions. This Demand-Response system will also can be represented by various types of energy customers (e.g. commercial, residential, industrial). This will create unique and different load profiles and pricing for each type of these customers, all of which the system must keep track of. With the WINSmartGrid™ technology, transactions will be communicated through wireless technologies to convey common data payloads. Currently, SOA in conjunction with open embedded system can provide support for plug-and-play and secure-demand-response. Also, an application programming interface (API) provides customizability and extensibility to the system.|$|E
5000|$|Conceptually, <b>requirements</b> <b>analysis</b> {{includes}} {{three types of}} activities: ...|$|R
5000|$|... #Caption: A systems {{engineering}} perspective on <b>requirements</b> <b>analysis.</b>|$|R
5000|$|<b>Requirements</b> <b>analysis</b> {{resulting}} in a software requirements specification ...|$|R
40|$|AbstractUser <b>requirement</b> <b>analysis</b> {{is crucial}} in data {{warehouse}} design. It effects almost every decision throughout implementation of data warehouse or business intelligence system. Currently, there are no standardization of user <b>requirement</b> <b>analysis</b> approaches had been outlined and this leads to complexity in data warehouse design. Various <b>requirement</b> <b>analysis</b> approaches have been proposed. However, data warehouse designer unable to choose which approach most suitable to be adapted in their project. This paper review various user <b>requirement</b> <b>analysis</b> approaches that been classified into four categories; data-driven approach, user driven approach, goal driven approach and mixed driven approach. It also outlines their strengths and weaknesses within different contexts. The review enables readers to identify appropriate user <b>requirement</b> <b>analysis</b> approach suitable for their projects...|$|E
40|$|In {{order to}} {{identify}} the determinants for getting information requirements right, cognitive {{research has been conducted}} to study the process of information <b>requirement</b> <b>analysis.</b> As a result, three important determinants for the correctness of requirement specifications have been identified: the knowledge of information analysts, <b>requirement</b> <b>analysis</b> techniques, and problem domains. In {{order to identify}} and explain the important variables for the correctness of requirement specifications, various cognitive models have been built on the basis of different cognitive theories such as normative models, problem solving models, mental models, and comprehension models. However, they are inadequate because they are focused on some rather than all of the three determinants. As a result, two issues related to <b>requirement</b> <b>analysis</b> techniques cannot be accounted for: First, no <b>requirement</b> <b>analysis</b> technique can consistently outperform the others. Second, experienced information analysts use multiple <b>requirement</b> <b>analysis</b> techniques in analyzing complex information systems. This research suggests that an adequate cognitive model need to meet two requirements: first, it can explicate the interactive relationships among the three determinants of information <b>requirement</b> <b>analysis,</b> and second, it can explain the two unsolved issues for <b>requirement</b> <b>analysis</b> techniques The importance of an adequate cognitive model can be shown in four aspects: (1) it provides an adequate model for information requirement analysis; (2) it provides a basis for empirical validation; (3) it provides a framework for viewing and comparing important aspects of information requirement analysis; and (4) it provides a theoretical basis for the design of computer-aided software engineering tools...|$|E
40|$|Abstract: Communication failure between IT {{experts and}} end users {{who are not}} {{computer}} – oriented leads to unsuccessful and chaotic <b>requirement</b> <b>analysis.</b> The Use Case approach, {{even if it is}} a tested and useful UML method, is not enough for the completion of <b>requirement</b> <b>analysis,</b> since the workflow is not present at Use Case Diagrams. BORM methodology which is also tested in real – life projects for <b>requirement</b> <b>analysis</b> on a business level, comes to cover the weaknesses of the Use Case approach, but fails in terms of standard definition of the business process workflow steps. The proposed new and modern method to business process <b>requirement</b> <b>analysis,</b> is based on the transition from Use Case methodology to BORM approach and is entitled as Use Case To BORM Transformation Algorithm (UCBTA). The construction of the algorithm is based on the nondeterministic finite automaton theory. The method aims to cover the gaps of the two aforementioned approaches by ensuring timely IT project termination since no task repetition caused by <b>requirement</b> <b>analysis</b> miscommunication will be required after its implementation...|$|E
5000|$|Problem frames {{approach}} is another approach to software <b>requirements</b> <b>analysis.</b>|$|R
5000|$|Possible {{problems}} caused by engineers and developers during <b>requirements</b> <b>analysis</b> are: ...|$|R
2500|$|... a more {{thorough}} <b>requirements</b> <b>analysis,</b> using an acknowledged method, may be necessary.|$|R
40|$|Abstract. The storage {{management}} system manages and controls for storage in-out stock activities, {{and has an}} important significance for coordinating production and operation of enterprise, improving economic efficiency. <b>Requirement</b> <b>analysis</b> {{is the basis of}} software development, mainly is functional <b>requirement</b> <b>analysis</b> and performance <b>requirement</b> <b>analysis.</b> First, do the functional <b>requirement</b> <b>analysis,</b> through analysis the business processes, analysis the main functions and processes of system with data flow diagram, and list the buyer, purchase commodity information, sales production, commodity stock table and data dictionary item. Then, do performance requirement analysis; describe the main content of the three aspects of accuracy, time characteristics and flexibility, especially analysis the C/S structure model to build software systems. In this paper, describes the overall concept of software function and performance as the specific software requirement specification, lays a foundation for the development of {{storage management}} system...|$|E
40|$|Abstract. The Unified Modeling Language (UML) is the de-facto {{standard}} modeling {{language for}} the development of software with broad ranges of applications. It supports for modeling a software at different stages during its development: <b>requirement</b> <b>analysis,</b> design and implementation. The use of UML encourages software developers to devote more effort on <b>requirement</b> <b>analysis</b> and modeling to produce better software products. The most important models to produce in an object-oriented <b>requirement</b> <b>analysis</b> are a conceptual class models and a use-case models. This paper proposes a method to combine these two models by using a classic transition system. Then we can reason about and refine such systems with well established methods and tools...|$|E
40|$|Empirical {{research}} into the novice-expert differences in information <b>requirement</b> <b>analysis</b> has recognized that the differences in knowledge and in modeling behaviors are the causes of differences in quality of requirement specifications. However, there is no cognitive process model available for explaining the interactions among the three factors: knowledge, modeling behaviors, {{and the quality of}} requirement specifications. On the basis of structure-mapping model of analogy, this article proposes a cognitive process model that views information <b>requirement</b> <b>analysis</b> as a process of conceptual mapping from the base structures (i. e., the knowledge structures of <b>requirement</b> <b>analysis</b> techniques) to the target structures (i. e., the knowledge structures o...|$|E
5000|$|<b>Requirements</b> <b>analysis</b> - {{analyzes}} {{the needs of}} the end users or customers ...|$|R
5000|$|... a more {{thorough}} <b>requirements</b> <b>analysis,</b> using an acknowledged method, may be necessary.|$|R
5000|$|Specific {{areas of}} {{excellence}} under the denominator of AO <b>Requirements</b> <b>Analysis</b> are: ...|$|R
