518|1036|Public
25|$|For {{examples}} of how this would look in popular robot languages see industrial <b>robot</b> <b>programming.</b>|$|E
50|$|Some {{examples}} of published <b>robot</b> <b>programming</b> languages are shown below.|$|E
5000|$|MindRover, a <b>robot</b> <b>programming</b> game {{incorporating}} a dataflow [...] "wiring" [...] language ...|$|E
40|$|The <b>robot</b> <b>programs</b> {{generated}} by Genetic Programming (GP) {{are found to}} be 'brittle', i. e. they fail to work when the environment is changed. Perturbation has been used to improve robustness. By introducing perturbation during the evolution of <b>robot</b> <b>programs,</b> the robustness of <b>robot</b> <b>programs</b> can be improved. This paper analyses the cause of the difference of robustness between <b>robot</b> <b>programs</b> using the case of robot navigation problems. The analysis is based on the notion of 'trace' of execution. The result of the analysis shows that the robustness of <b>robot</b> <b>programs</b> depends on the reuse of the 'experience' that a <b>robot</b> <b>program</b> acquired during evolution. To improve robustness, the size of the set of 'experience' should be increased and/or the amount of reusing the 'experience' shouM be increased...|$|R
5000|$|Northeastern University, Biomimetic Underwater <b>Robot</b> <b>Program</b> (BURP) ...|$|R
40|$|Volvo Cars Corporation creates <b>robot</b> <b>programs</b> {{off-line}} for all new robot implementations for virtual commissioning. These virtually created <b>robot</b> <b>programs</b> {{are then}} downloaded {{to the real}} robot, after the installation has been carried out, to be tested before they are fully operational. These tests are spanned from robot installation until full production, adjusting the robot programme according to Volvo Cars specification and correcting errors that the <b>robot</b> <b>program</b> may have. Changes of the <b>robot</b> <b>programs</b> will be saved each time it is modified, generating a series of backups for each robot until the robot is correctly adjusted along all {{the steps of the}} process. To improve the offline programming there is a necessity for visualize the modifications made during the physical robot commissioning. The objective of this thesis is to identify, categorise, quantify and visualize modifications between each different backup of a robot. A software application has been developed using Microsoft Visual Studio using C#. The application is designed in windows for different types of data. It enables the user to compare two <b>robot</b> <b>programs</b> (two different backup programs from the tests) from one robot and see the result between them graphically. The graphs are designed interactively so that the user can filter the information to see the desired data from the <b>robot</b> <b>programs</b> comparison. Key performance indicators (KPIs) has been specified for RobTargets and Procedures according to Volvo Cars Corporation requests. These KPIs are implemented and visualised in a graphical representation...|$|R
50|$|For {{examples}} of how this would look in popular robot languages see industrial <b>robot</b> <b>programming.</b>|$|E
5000|$|The Mobile <b>Robot</b> <b>Programming</b> Toolkit (MRPT) project: A set of open-source, {{cross-platform}} libraries covering SLAM through particle filtering and Kalman Filtering.|$|E
5000|$|Ch {{supports}} LEGO Mindstorms NXT and EV3, Arduino, Linkbot, Finch Robot, RoboTalk and Rasperry PI, Pi Zero, and ARM for <b>robot</b> <b>programming</b> and learning.|$|E
5000|$|An Army of Evil <b>Robots</b> <b>Programmed</b> for Human Destruction (Rock and Roleplay records, 1999) ...|$|R
40|$|<b>Robot</b> <b>programs</b> have to {{be tested}} {{systematically}} {{on a daily basis}} in order to improve robot performance in a controlled way. This requires automated support. We present a framework in which the designer can specify a number of test cases and metrics which are then executed by a simulator off-line. 1 Introduction Today, robots are no longer bound to factories but appear in open (i. e. non-deterministic form the robot's point of view) environments, for instance, homes, museums, or soccer fields. Improving the performance of mobile robots is not straightforward. Often performance declines dramatically because of changes in the environment setting, or after changes in the program which controls the <b>robot,</b> the <b>robot</b> <b>program.</b> Investigations of such phenomena often reveal that the <b>robot</b> <b>program</b> is overfitted with respect to the test environment and a few test experiments. Overfitting means that the <b>robot</b> <b>program</b> contains assumptions which match perfectly to simplifications and errors contain [...] ...|$|R
5000|$|Megabyte - a <b>robot</b> <b>programmed</b> {{with the}} brain {{patterns}} of a physically disabled teenage boy.|$|R
50|$|Due to {{the highly}} {{proprietary}} nature of robot software, most manufacturers of robot hardware also provide their own software. While {{this is not}} unusual in other automated control systems, the lack of standardization of programming methods for robots does pose certain challenges. For example, there are over 30 different manufacturers of industrial robots, so there are also 30 different <b>robot</b> <b>programming</b> languages required. Fortunately, there are enough similarities between the different robots {{that it is possible}} to gain a broad-based understanding of <b>robot</b> <b>programming</b> without having to learn each manufacturer's proprietary language.|$|E
50|$|By using a Post {{processor}} and Off-line programming (robotics) software {{it is possible}} to handle brand-specific <b>robot</b> <b>programming</b> language from a universal programming language, such as Python (programming language).|$|E
5000|$|Robot Operating System - Robot Operating System is an {{open-source}} {{platform for}} <b>robot</b> <b>programming</b> using Python and C++. Java, Lisp, Lua and Pharo are supported but still in experimental stage.|$|E
50|$|The second {{architect}} of Radiant City who designed, among other things, the <b>robots</b> <b>programmed</b> to assist citizens.|$|R
5000|$|... robots is a turn-based {{computer}} {{game in which}} players are tasked with escaping from <b>robots</b> <b>programmed</b> to pursue and kill them.|$|R
40|$|Genetic Programming {{has been}} {{successfully}} used to perform automatic generation of <b>robot</b> <b>programs.</b> However, to improve robustness of the generated <b>robot</b> <b>programs,</b> each candidate solution was evaluated under many environments which required the substantial processing time. This study proposed a parallel implementation to reduce the execution time. By using a coarse-grained model for parallelization, called Island Model, a near linear speedup was achieved with small communication overhead. In addition, the barrier synchronization was identified {{to be the primary}} source of the overhead...|$|R
50|$|Rdiger Dillmann {{from the}} Karlsruhe Institute of Technology (KIT), Karlsruhe, Germany was named Fellow of the Institute of Electrical and Electronics Engineers (IEEE) in 2012 for {{contributions}} to <b>robot</b> <b>programming</b> and human-centerd technologies.|$|E
5000|$|Automatic <b>Robot</b> <b>Programming</b> modules : This robot {{traces the}} menâ€™s moving and saves the traces {{automatically}} using F/T sensor. It {{was developed in}} 1995 and transferred to the assembly class in Hyunday Automation Co.|$|E
50|$|This {{meant that}} robot goals were {{specified}} {{in terms of}} desired position relationships between the robot, objects and the scene, leaving {{the details of how}} to achieve the goals to the underlying software system. Although developed in the 1970s RAPT is still considerably more advanced than most commercial <b>robot</b> <b>programming</b> languages.|$|E
50|$|Once Dominus {{had been}} defeated, Superman had {{most of the}} robots destroyed. One {{particular}} <b>robot</b> (<b>programmed</b> to protect Lois) was particularly difficult to get rid of.|$|R
40|$|Robustness is {{essential}} for programs generated by Genetic Programming (GP). This paper presents a method to improve the robustness. The method employs non-determinism in two ways: one is to evolve <b>robot</b> <b>programs</b> in noisy environments and another is to use probabilistic branch in the function set. The experiment is carried out on robot navigation problems. The result of the experiment shows that the robustness of <b>robot</b> <b>programs</b> has been improved. The analysis shows that the robustness {{is caused by the}} acquired "experience" and the amount of reuse of this experience while performing the task. Key words: Robustness, <b>Robot</b> <b>programs,</b> Non-determinism, Evolutionary Computation, Genetic Programming 1. Introduction Artificial Intelligence (AI) has been widely used to automatically generate programs. Genetic Programming (GP) [1] is one of methods that becomes popular in automatic generating programs. Our experiment use GP to generate programs for controlling a robot. GP is performed [...] ...|$|R
40|$|This work {{proposes a}} memoized {{function}} {{to speed up}} on-line evolution of <b>robot</b> <b>programs.</b> On-line evolution is performed on a physical robot. It has an advantage over an off-line method as being robust and {{does not require the}} robot model. However, on-line evolution is very time consuming. To validate our proposal, an experiment with visual-reaching tasks is carried out. The result shows that the memoized function can speed up on-line evolution by 23 times and the resulting control program performs robustly. Keywords: On-line evolution, Genetic <b>Programming,</b> <b>robot</b> <b>program,</b> memoized function...|$|R
50|$|The Mobile <b>Robot</b> <b>Programming</b> Toolkit (MRPT) is a {{cross-platform}} {{and open}} source C++ library aimed to help robotics researchers {{to design and}} implement algorithms related to Simultaneous Localization and Mapping (SLAM), computer vision and motion planning (obstacle avoidance). Different research groups have employed MRPT to implement projects reported {{in some of the}} major robotics journals and conferences.|$|E
5000|$|By {{combining}} the Neocortex intelligence platform with modular sensing and control software products, Universal Robotics currently provides flexible applications for materials handling. Todayâ€™s software products include 3D machine vision products (SpatialVision, Spatial Vision Robotics, Spatial Vision Inspection, and automated <b>robot</b> <b>programming</b> (Autonomy). Applications include Unlimited Box Moving, Unlimited Depalletization, Random Bin Picking, Random Bag Picking, and 3D Inspection.|$|E
5000|$|ZÃ¼hlke studied Electrical and Computer Engineering at the {{technical}} university RWTH Aachen. In 1983, he obtained his PhD in Mechanical Engineering (<b>robot</b> <b>programming)</b> at the Machine Tools Laboratory (WZL) at Aachenâ€™s university. From 1985 to 1991, {{he worked for}} German Lufthansa AG, where he held several management positions such {{as head of the}} aircraft maintenance department.|$|E
40|$|An {{evolutionary}} method such as Genetic Programming (GP) {{can be used}} {{to solve}} a large number of complex problems in various application domains. However, one obvious shortcoming of GP is that it usually uses a substantial amount of processing time to arrive at a solution. In this paper, we present the parallel implementations that can reduce the processing time by using a coarse-grained model for parallelization and an asynchronous migration. The problem chosen to examine the parallel GP is a mobile robot navigation problem. The experimental results show that superlinear speedup of GP can be achieved. 1 Introduction Genetic Programming was successfully used to perform automatic generation of mobile <b>robot</b> <b>programs</b> [1]. The use of the perturbation to improve robustness of the <b>robot</b> <b>programs</b> was proposed. Each <b>robot</b> <b>program</b> was evaluated under many environments that were di#erent from the original one. As a result, the substantial processing time was required to evaluate the fitness of t [...] ...|$|R
40|$|In {{order to}} assess the fitness of a <b>program</b> {{controlling}} a <b>robot,</b> many experiments have to be performed. Unfortunately the execution of an experiment and the analysis of its result are very time-consuming. In this paper we name the key factors for fast assessment of <b>robot</b> <b>programs</b> and illustrate briefly how our suite of development tools supports them. 1 Introduction The development of a robot typically consists of continuously repeating the following design cycle: edit the program which should control the robot (called "robot program" for brevity), then simulate it, test it on a robot, and modify the program again. It may take {{a few seconds to}} change a <b>robot</b> <b>program,</b> but it may take many experiments lasting hours or even days to evaluate such a change. Therefore, we need to shorten the time to set up experiments and to assess their output. Today many projects in academia insert test statements into their <b>robot</b> <b>programs.</b> These statements write data about robot execution into a file w [...] ...|$|R
50|$|In {{one first}} season episode, Dr. Smith {{was seen to}} remove the <b>robot's</b> <b>programming</b> tapes, which {{resemble}} a small reel of magnetic tape, from a hatch below the robot's chest panel.|$|R
50|$|RoboWar for the Macintosh was notable {{among the}} genre of {{autonomous}} <b>robot</b> <b>programming</b> games for the powerful programming model it exposed to the gamer. By the early 1990s, RoboWar included an integrated debugger that permitted stepping through code and setting breakpoints. Later editions of the RoboTalk language used by the robots (a cognate of the HyperTalk language for Apple's HyperCard) included support for interrupts as well.|$|E
50|$|Research in PbD also {{progressively}} {{departed from}} its original purely engineering perspective to adopt an interdisciplinary approach, taking insights from neuroscience and social sciences to emulate the process of imitation in humans and animals. With the increasing consideration of this body of work in robotics, the notion of <b>Robot</b> <b>programming</b> by demonstration (also known as RPD or RbD) was also progressively replaced by the more biological label of Learning by imitation.|$|E
50|$|It {{was soon}} {{realised}} in the Freddy project that the 'move here, do this, move there' style of robot behavior programming (actuator or joint level programming) is tedious and {{also did not}} allow for the robot to cope with variations in part position, part shape and sensor noise. Consequently, the RAPT <b>robot</b> <b>programming</b> language was developed by Pat Ambler and Robin Popplestone, in which robot behavior was specified at the object level.|$|E
5000|$|The {{software}} is robot manufacturer independent, {{so it is}} possible to create <b>robot</b> <b>programs</b> for any <b>robot</b> in a virtual environment. There are 27 different supported robot brands as of May 2015.|$|R
40|$|Autonomous robots {{offer the}} {{potential}} to conduct Counter- Weapons of Mass Destruction (C-WMD) missions in an efficient and robust manner. However, to leverage this potential, a mission designer {{needs to be able}} to determine how well a robot system will operate in the noisy and uncertain environments that a C-WMD mission may require. We are developing a software framework for verification of performance guarantees for C-WMD missions based on the MissionLab software system and a novel process algebra approach to representing <b>robot</b> <b>programs</b> and operating environments. In this paper, we report on our initial research for the Defense Threat Reduction Agency (DTRA) in understanding what is required from a performance guarantee to give a mission designer the information necessary to understand how well a <b>robot</b> <b>program</b> will perform in a specific environment. We link this to prior work on metrics for robot performance. Using a simple mission scenario, we explore the implications of uncertainty in the four components of the problem: the <b>robot</b> <b>program,</b> and the sensors, actuators and environment with which the program is executed...|$|R
40|$|This paper {{proposes a}} method to improve {{robustness}} of the <b>robot</b> <b>programs</b> generated by genetic programming. The main idea is to perturb the simulated environment during evolution of the solutions. The resulting <b>robot</b> <b>programs</b> are more robust {{because they have been}} evolved to tolerate the changes in their environment. We set out to test this idea using the problem of navigating a mobile robot from a starting point to a target point in an unknown cluttered environment where obstacles can be moved dynamically. The result shows the effectiveness of this scheme. 1. Introduction The solutions of robot learning problems generated by genetic programming method (GP) are said to be "fragile". That is, they fail to work when there is even a small change in the operational environment such as robots working in the real world. An example can be drawn from our previous work [3], in a visual reaching task, GP is used to generate <b>robot</b> <b>programs</b> that control an arm to reach a target. When there are sm [...] ...|$|R
