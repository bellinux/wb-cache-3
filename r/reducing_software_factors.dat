0|1049|Public
5000|$|... <b>reduce</b> <b>software</b> {{development}} time through {{the ability to}} reuse design modules, and ...|$|R
5000|$|<b>Reduce</b> <b>software</b> {{and support}} costs by {{negotiating}} volume contract agreements and eliminating or reallocating underutilized software licenses ...|$|R
5000|$|The BSA {{outlined}} four {{strategies that}} governments can adopt to <b>reduce</b> <b>software</b> piracy rates in its 2011 piracy study results: ...|$|R
40|$|Abstract. Nowadays, {{software}} {{is expected to}} have an extended lifespan, which makes the evaluation of its complexity at the early stages critical in upcoming maintenance. Indeed, complexity is proportional to the evolution of software. Software metrics were introduced as tools that allow us to obtain an objective measurement of the complexity of software. Hence, enabling software engineering to assess and manage <b>software</b> complexity. <b>Reducing</b> <b>software</b> costs {{is one of the major}} concerns of software engineering which creates an increasing need for new methodologies and techniques to control those costs. Software complexity metrics can help us to do so. In this paper, we would investigate how those metrics can be used to <b>reduce</b> <b>software</b> costs. We would first analyze the most popular complexity metrics and distinguish their properties. Then, we will show how each of those metrics fit within the software life cycle. Finally, we will provide a detailed approach to use the complexity metrics to <b>reduce</b> <b>software</b> costs...|$|R
50|$|Development {{testing is}} a {{software}} development process that involves synchronized {{application of a}} broad spectrum of defect prevention and detection strategies in order to <b>reduce</b> <b>software</b> development risks, time, and costs.|$|R
40|$|Risk is {{not always}} avoidable, but it is controllable. The aim {{of this paper is}} to present new {{techniques}} which use the stepwise regression analysis tomodel and evaluate the risks in planning <b>software</b> development and <b>reducing</b> risk with <b>software</b> process improvement. Top ten <b>software</b> risk <b>factors</b> in planning <b>software</b> development phase and thirty control factors were presented to respondents. This study incorporates risk management approach and planning software development to mitigate software project failure. Performed techniques used stepwise regression analysis models to compare the controls to each of the risk planning <b>software</b> development <b>factors,</b> in order to determine and evaluate if they are effective in mitigating the occurrence of each risk planning factor and, finally, to select the optimal model. Also, top ten risk planning <b>software</b> development <b>factors</b> were mitigated by using control factors. The study has been conducted on a group of software project managers. Successful project risk management will greatly improve the probability of project success. </p...|$|R
50|$|Rapid acquisition: Instead {{of waiting}} for {{software}} to be developed, crowdsourcing organizers may post a competition hoping that something identical or similar has been developed already. This is to <b>reduce</b> <b>software</b> acquisition time.|$|R
5000|$|Example of <b>reduced</b> <b>software</b> maintenance: Software patching, {{security}} updates, application/OS updates, and OS migrations can be applied, {{tested and}} activated for all users {{in one instance}} to accelerate roll-out and improve administrative efficiency.|$|R
40|$|Software {{project results}} {{continue}} to be highly subject to {{the skills of the}} individuals involved in the development life cycle. Although improved processes and tools can help increase overall productivity, it remains true that the project team {{is one of the greatest}} variables that impact project productivity. To significantly <b>reduce</b> <b>software</b> project productivity risk, it is important to simultaneously evaluate the processes, tools, and skills that characterize the project and its personnel. This article presents three approaches to <b>reducing</b> <b>software</b> project productivity risk by minimizing process rules, by maximizing simple tools, and by de-emphasizing the importance of technical skills in favor of basic abilities...|$|R
50|$|The Microsoft Security Development Lifecycle is a {{software}} development process used and proposed by Microsoft to <b>reduce</b> <b>software</b> maintenance costs and increase reliability of software concerning software security related bugs. It {{is based on}} the classical spiral model.|$|R
50|$|The {{company also}} sold the Lattice C {{compiler}} for the Sinclair QL and the Atari ST {{and range of}} other languages (e.g. Pascal, BCPL) for m68k-based computers. MetaComCo also represented LISP and <b>REDUCE</b> <b>software</b> from the RAND Corporation.|$|R
40|$|Software parallelization is {{required}} {{to contend with the}} increasing scale and complexity of high-energy physics experiments. The authors have developed a programming model, Communication Capability (CoCa) which allows this parallelization at several levels of granularity and <b>reduces</b> <b>software</b> complexity...|$|R
40|$|Leveraging natural {{language}} clues developers leave in code to improve software engineering tools, specifically, source code search tools to <b>reduce</b> <b>software</b> maintenance costs. Also interested in program comprehension, automated software testing, and software engineering experiment design & data analysis. RESEARCH EXPERIENC...|$|R
50|$|The KNOPPIX 6.0.1 / ADRIANE 1.1 is a CD-edition again, and a {{complete}} rebuild from scratch. LXDE as default desktop and a very <b>reduced</b> <b>software</b> collection in order to easily fit on CD.No further development is being done of the traditional 5.x versions.|$|R
5000|$|... more portable, as UDF 1.5+ {{alone does}} not need {{specialized}} drive hardware to write, and the computer needs neither an MRW driver for a MRW-capable optical drive nor an MRW reader for drives that are incapable of reading MRW natively, <b>reducing</b> <b>software</b> overhead.|$|R
3000|$|Now, it is {{possible}} to achieve the concept of having DBM (dedicated multicast buffers). Thanks to the enhanced virtual memory architecture which uses memory mapping as a key to <b>reduce</b> <b>software</b> overheads and thereby improving the overall bandwidth of the system. Streams S [...]...|$|R
50|$|In {{object-oriented}} programming, {{information hiding}} (by way of nesting of types) <b>reduces</b> <b>software</b> development risk by shifting the code's dependency on an uncertain implementation (design decision) onto a well-defined interface. Clients of the interface perform operations purely through it {{so if the}} implementation changes, the clients {{do not have to}} change.|$|R
50|$|XBRLS is {{intended}} to enable the non-XBRL expert to create both XBRL metadata and XBRL reports in a simple and convenient manner. At the same time, it seeks to improve the usability of XBRL, the interoperability among XBRL-based solutions, the effectiveness of XBRL extensions and to <b>reduce</b> <b>software</b> development costs.|$|R
30|$|Descriptive statistics, t-test one-way ANOVA and Cronbach’s alpha were {{calculated}} using the package “psych” in the free-software R. Effect size {{was performed in}} G*Power free-software. EFA was conducted in the <b>software</b> <b>Factor</b> version 10.4. 01 (Lorenzo-Seva and Ferrando, 2006). CFA {{was carried out in}} AMOS from the software SPSS 21.0.|$|R
30|$|Hardware aging {{management}} for {{nuclear power plants}} has been verified for decades, and its relevant regulations and standards have also matured. Software aging management is a core, but difficult, point of the digital control system. Testing and review technology can <b>reduce</b> <b>software</b> defects, but cannot guarantee that the software system is faultless.|$|R
5000|$|<b>Reduce</b> {{increased}} <b>software</b> {{maintenance costs}} due to performance problems in production ...|$|R
5000|$|<b>Reducing</b> overall <b>software</b> costs {{through the}} {{implementation}} of various processes; and ...|$|R
40|$|By {{adapting}} COSMIC's One-on-One Adaptive Maneuvering Logic (AML) for two versus one simulation, Link Division {{was able}} to <b>reduce</b> <b>software</b> and other design/development costs. Enhancements to the AML program developed by Link for simulation of two-versus one combat, two trainees can simultaneously engage a computer driven target, thereby doubling the training utility of the simulator...|$|R
5000|$|... always {{downloading}} {{the latest}} version and therefore <b>reducing</b> their <b>software's</b> extant vulnerability ...|$|R
40|$|In {{a number}} of {{feasibility}} studies of turbine rotor designs, engineers of Cummins Engine Company, Inc. 's turbocharger group have utilized a computer program from COSMIC. Part of Cummins research effort is aimed toward introduction of advanced turbocharged engines that deliver extra power with greater fuel efficiency. Company claims use of COSMIC program substantially <b>reduced</b> <b>software</b> development costs...|$|R
50|$|These routers were repackaged {{versions}} of the 2500 specifically to be sold through channel partners to small and medium businesses that needed a greater ease of setup. They were offered at a reduced price due to their <b>reduced</b> <b>software</b> feature set. They are characterized by a light grey/cream colored case compared to the standard dark grey colouring.|$|R
40|$|Although the {{research}} on software piracy is growing, criminologists have not examined the role of deterrence in software piracy. Using data collected from 382 undergraduate students attending a southeastern university, {{this study examined the}} role of deterrence in <b>reducing</b> instances of <b>software</b> piracy using a factorial design. The findings from the analysis showed that certainty and not severity was important in <b>reducing</b> <b>software</b> piracy. The study also found that contemporary parts of deterrence theory (i. e., shame and family discovery) were important in deterring software piracy. Policy implications of these findings are discussed...|$|R
40|$|The {{purpose of}} the study is to provide a better {{understanding}} of how organizations utilize e-logistics within their supply chain. Two questions will be examined, (1) How can the e-Logistics system be described and (2) What the factors that influence the e-logistics system. The e-Logistics system can be described as a process and as an information system. Factors then include reliability factors, maintainability factors, supply support factors, test and support equipment factors, organizational factors, facility, transportation, and handling <b>factors,</b> <b>software</b> <b>factors,</b> availability factors, and economic and effectiveness factors. These factors, however, deserves further research...|$|R
5000|$|<b>Reduce</b> {{increased}} <b>software</b> {{maintenance costs}} due to software impacted by ad hoc performance fixes ...|$|R
40|$|The {{proposed}} use {{of software}} {{fault tolerance techniques}} {{as a means of}} <b>reducing</b> <b>software</b> costs in avionics and as a means of addressing the issue of system unreliability due to faults in software is examined. A model is developed to provide a view of the relationships among cost, redundancy, and reliability which suggests strategies for software development and maintenance which are not conventional...|$|R
40|$|The aim of {{this paper}} is to propose new mining tech-niques by which we can study the impact of {{different}} risk management techniques and different <b>software</b> risk <b>factors</b> on <b>software</b> analysis development projects. The new mining technique uses the fuzzy multiple regression analysis techniques with fuzzy concepts to manage the software risks in a software project and mitigating risk with software process improvement. Top ten <b>software</b> risk <b>factors</b> in analysis phase and thirty risk management techniques were presented to respondents. The results show that all software risks in software projects were very important from software project manager perspec-tive, whereas all risk management techniques are used most of the time, and often. However, these mining tests were performed using fuzzy multiple regression analysis techniques to compare the risk management techniques with each of the <b>software</b> risk <b>factors</b> to determine if they are effective in reducing the occurrence of each <b>software</b> risk <b>factor.</b> The study has been conducted on a group o...|$|R
40|$|Software {{development}} methodology involves {{many activities}} and {{processes that are}} carried out when building a software system. There {{are a lot of}} available methodologies; one should be suitable for a software project. However, deciding which methodology to be applied requires some assessments on the project nature and characteristics at the early project cycle. This research focuses on finding the relationship between <b>software</b> project <b>factors</b> and methodologies, and further developing a tool that can help software practitioners in choosing the most suitable methodology. Before the tool is developed, a review on several lifecycle models has been carried out in order to examine the relevant <b>software</b> <b>factors.</b> Factors like project size, complexity, requirement stability, duration, performance requirement, modularization, project team, and criticality have the main impact on some methodologies. The relationship between methodologies and <b>software</b> <b>factors</b> is formulated using rule-based approach, and managed properly by a sequence of steps; identifying the initial selection of input variables, counterexamples of bad sub rules, pruning the variables, merging categories, and identifying hypothetical examples. RETE algorithm has been chosen as the problem solving technique in managing the rules. The tool is able to help software practitioners in early decision making process to use appropriate methodology in their software project...|$|R
30|$|Residual aging {{risks are}} {{uncontrollable}} by aging management strategies and {{may lead to}} safety incidents. To improve the stability and reliability of the safety digital control system, software attributes become more complex. Although stability and reliability goals promote <b>software</b> development, these <b>factors</b> increase <b>software</b> aging <b>factors.</b>|$|R
50|$|Extensions {{can be used}} {{to modify}} the {{behavior}} of existing features to the application or add entirely new features. Extensions are especially popular with Firefox, because Mozilla developers intend for the browser to be a fairly minimalistic application in order to <b>reduce</b> <b>software</b> bloat and bugs, while retaining a high degree of extensibility, so that individual users can add the features that they prefer.|$|R
40|$|Next-generation {{distributed}} interactive simulations have stringent {{quality of}} service (QoS) requirements for throughput, latency, and scalability, as well as requirements for a flexible communication infrastructure to <b>reduce</b> <b>software</b> lifecycle costs. The CORBA Event Service provides a flexible model for asynchronous communication among distributed and collocated objects. However, the standard CORBA Event Service specification lacks important features and QoS optimizations required by distributed interactive simulation systems...|$|R
40|$|Test-Driven Development is a practice, which quickly {{has gained}} a {{foothold}} in business application software development. Fiery advocates proclaim that it improves <b>software</b> quality, while <b>reducing</b> <b>software</b> development time. Though, the embedded software industry seems to be hesitant, as they rightly point towards some obstacles inherent to the embedded field. However we believe that these obstacles should not prove to be insurmountable. status: publishe...|$|R
