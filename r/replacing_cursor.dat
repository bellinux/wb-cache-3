0|10|Public
5000|$|... #Caption: A wait <b>cursor</b> <b>replaces</b> {{the pointer}} with an hourglass.|$|R
50|$|Unlike more {{traditional}} tower defense games, the player controls a character around the screen, collecting coins and building towers. This <b>replaces</b> the standard <b>cursor</b> controls. A second player {{can also join}} in and assist in building towers.|$|R
40|$|Expert T-SQL Window Functions in SQL Server {{takes you}} from {{any level of}} {{knowledge}} of windowing functions and turns you into an expert who can use these powerful functions to solve many T-SQL queries. <b>Replace</b> slow <b>cursors</b> and self-joins with queries {{that are easy to}} write and fantastically better performing, all through the magic of window functions. First introduced in SQL Server 2005, window functions came into full blossom with SQL Server 2012. They truly {{are one of the most}} notable developments in SQL in a decade, and every developer and DBA can benefit from their expressive power in so...|$|R
50|$|All the {{functions}} of CP/M MBASIC were available in the IBM PC disk-based BASICA or GWBASIC which made migration of programs from CP/M systems to PC-compatibles possible. The tokens used to represent keywords were different, so CP/M programs had to be saved in ASCII source form. Typically screen formatting escape sequences put into the CP/M version would be <b>replaced</b> with the <b>cursor</b> positioning commands found in the PC versions of BASIC, otherwise little rewriting would be needed.|$|R
50|$|Unveiled by Lexus at the 2008 Los Angeles Auto Show in November of that year, Remote Touch became Lexus {{entry into}} the realm of non-touchscreen human-machine interfaces. Introduced on the third {{generation}} Lexus RX, the Remote Touch system differs from previous interfaces in being the first to use a computer mouse (or trackball)-based concept, instead of the rotary knob model. The system allows the operator to freely move the on-screen cursor across any part of the screen. The <b>cursor</b> <b>replaces</b> the role of the drivers hand on the previous touchscreen interface.|$|R
50|$|The game {{introduces}} two new elements {{not found}} in Dracula: Resurrection; rudimentary combat and combining inventory items. Combat mode <b>replaces</b> the <b>cursor</b> with a reticle, and occurs infrequently, involving either a revolver or a crossbow. It is usually (but not always) timed, and often requires the player to perform a particular action, such as hitting the enemy in a specific spot to achieve victory. If they fail to do so within the designated time, the player will die. In relation to combining inventory items, unlike in the first game, the inventory screen {{is divided into two}} - a full circle, and a small semi-circle on {{the outer edge of the}} screen. Items placed within the semi-circle cannot be used directly in the game itself, but must be combined by the player with items placed within the full circle. For example, the player's gun is in the full circle, but their bullets are placed within the semi circle.|$|R
40|$|We {{describe}} local tools, {{a general}} interaction technique that replaces traditional tool palettes. A collection of tools {{sit on the}} worksurface along with the data. Each tool can be picked up (where it <b>replaces</b> the <b>cursor),</b> used, and then put down anywhere on the worksurface. There is a toolbox for organizing the tools. These local tools were implemented in Pad++ as part of KidPad, an application for children. INTRODUCTION Sitting at a desk, many people find that they work with several tools simultaneously. Perhaps they have a pencil, a red pen, a stapler, or some paper clips - all on their worksurface together. This is a very natural way to work, yet most computer interfaces don't support this style of interaction. Rather, traditional computer tool palettes allow only a single tool to be active at a time. In the real world, this would be equivalent to being forced to put away every tool before another could be used. In the Pad++ research group at the University of New Mexico, we have [...] ...|$|R
5000|$|The case {{is unusual}} in that it {{contains}} both a full-sized keyboard with programmable function keys, and a joystick. Its distinctive shape {{was due to the}} designers' desire to break away from customary designs. The low-profile keyboard is constructed with mechanical keycaps on top of a rubber membrane and has a standard layout, but the feel of the keys was disliked by many, or even most people, because the keys weren't [...] "full travel", but had a squishy feel, similar to a Sinclair QL or Spectrum+. The joystick <b>replaces</b> the normal <b>cursor</b> keys, and allows the cursor to be moved diagonally. Royal College of Art graduates Geoff Hollington and Nick Oakley were responsible for the design.|$|R
40|$|Figure 1. The PieCursor concept: a {{collection}} of tools arranged in a radial pattern Tracking Menu and shrunk {{to the size of}} a cursor. We describe a new type of graphical user interface widget called the ―PieCursor. ‖ The PieCursor is based on the Tracking Menu technique and consists of a radial cluster of command wedges, is roughly the size of a <b>cursor,</b> and <b>replaces</b> the traditional <b>cursor.</b> The PieCursor technique merges the normal cursor function of pointing with command selection into a single action. A controlled experiment was conducted to compare the performance of rapid command and target selection using the PieCursor against larger versions of Tracking Menus and a status quo Toolbar configuration. Results indicate that for small clusters of tools (4 and 8 command wedges) the PieCursor can outperform the toolbar by 20. 8 % for coarse pointing. For fine pointing, the performance of the PieCursor degrades approximately to the performance found for the Toolbar condition. Author Keywords Tracking menus, radial menus, marking menus, pi...|$|R
50|$|The player {{controls}} {{a flying}} machine which can fly over {{any part of}} the play-area and is used to command the player's bases and robots. In essence it <b>replaces</b> a mouse <b>cursor,</b> but it can hinder the robots' movement. The player must build robots and give them orders to seek out and attack Insignian robots and capture neutral or enemy factories to increase production and thus aid the war effort. Once a robot is issued an order it will keep being active until all its targets have been conquered or destroyed, the robot itself is destroyed, or other orders are received. The ultimate objective is to capture or destroy all the enemy bases and thus win the war. Everything takes place in real-time with the action being ongoing rather than turn-based. Because the player's view of the battlefield is limited to where their flying-machine is, much of the front-line fighting is left to the machines whilst the player concentrates on building more robots. However the player can choose to take direct control over one of his/her robots and effectively use it in a commando style to capture factories and bases and to destroy enemy robots. The game is displayed in forced-perspective isometric graphics.|$|R

