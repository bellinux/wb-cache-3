936|588|Public
25|$|As {{with the}} client-based interface, the Btrieve-based {{application}} makes {{a call to}} the WBTRCALL.DLL loader and <b>requester</b> interface library. This library checks the BTI.INI file to see if it needs to access data on the local system or whether it needs to access data on a remote server. If it needs to access the server, then it uses the Windows version of DPMI to access a DOS-based <b>requester</b> named BREQUEST.EXE. The <b>requester</b> then establishes a network connection to the server, which processes the request and passes back a message to the <b>requester</b> when the database request is completed.|$|E
25|$|Applications make a {{function}} call to WBTRCALL.DLL, a loader and <b>requester</b> interface. The loader and <b>requester</b> module verify the BTI.INI configuration file is correctly {{set up to}} load the client-based Btrieve engine. In turn, this loads the local interface to the btrieve engine (WBTRLOCL.DLL). If necessary, this local interface loads the Btrieve engine (WBTR32.EXE) into memory and sends the necessary database requests to it. The database engine then calls various Win32 system libraries to perform file operations on the database files.|$|E
25|$|A prayer {{request is}} a {{religious}} practice in which personal requests forothers, including organized prayer groups, to pray {{on behalf of the}} <b>requester</b> for any specific reasons. Requests are often collected in order to act upon them either as an organized prayer gathering or as individuals.|$|E
30|$|Service {{discovery}} {{studies in}} vehicular networks that guarantee QoS requirements to service <b>requesters</b> are very important. To {{the best of}} authors' knowledge, none of the existing service discovery protocols in vehicular networks have been provided in the literature that guarantee QoS to service <b>requesters</b> and to the vehicular network. For efficient service discovery in vehicular networks, {{it is very important}} to provide users with services that suit better to their requests while balancing the load on service providers. Moreover, for service discovery protocol integrated with routing protocols, it is important to guarantee load balancing on routing paths between service providers and service <b>requesters.</b> In this article, we present a QoS aware location-based service discovery protocol for vehicular networks. Our protocol guarantees load balancing on service providers, and routing paths between service providers and service <b>requesters.</b> It permits also to choose service providers and routing paths between service providers and service <b>requesters</b> that satisfy some performance attributes specified by service <b>requesters.</b> We present our QoS aware protocol, prove its correctness, report on its performance evaluation, and discuss our experimental results we have obtained using realistic scenarios.|$|R
25|$|Btrieve used <b>requesters</b> to make {{database}} I/O {{requests from}} the client workstation. The <b>requesters</b> {{were available for}} DOS, OS/2, Microsoft Windows, and UnixWare. The program BREQUEST.EXE accepted I/O requests via the Btrieve API and relayed them to BSERVER. It then handled the responses from BSERVER and relayed {{them back to the}} appropriate application.|$|R
50|$|Service <b>requesters</b> create {{accounts}} and list the items to be transported, stipulating the maximum {{they are prepared}} to pay and specifying whether they can be flexible on delivery/pickup dates or need the listed items moved subject to specified date parameters. The transport service providers bid the lowest amount they would accept to perform the transport service. A user feedback system is enabled in order {{to keep track of the}} reputation of the transport service providers and transport service <b>requesters,</b> this allows the transport service <b>requesters</b> the ability to frame their procurement decision on factors other than solely price.|$|R
25|$|Node lookups {{can proceed}} asynchronously. The {{quantity}} of simultaneous lookups is denoted by α and is typically three. A node initiates a FIND_NODE request by querying to the α nodes {{in its own}} k-buckets that are the closest ones to the desired key. When these recipient nodes receive the request, they will look in their k-buckets and return the k closest nodes to the desired key that they know. The <b>requester</b> will update a results list with the results (node ID's) he receives, keeping the k best ones (the k nodes that are closer to the searched key) that respond to queries. Then the <b>requester</b> will select these k best results and issue the request to them, and iterate this process again and again. Because every node has a better knowledge of his own surroundings than any other node has, the received results will be other nodes that are every time {{closer and closer to}} the searched key. The iterations continue until no nodes are returned that are closer than the best previous results. When the iterations stop, the best k nodes in the results list are the ones in the whole network that are the closest to the desired key.|$|E
25|$|An {{example of}} an amplified DDoS attack through NTP is through a command called monlist, which sends {{the details of the}} last 600 people who have {{requested}} the time from that computer back to the <b>requester.</b> A small request to this time server can be sent using a spoofed source IP address of some victim, which results in 556.9 times the amount of data that was requested back to the victim. This becomes amplified when using botnets that all send requests with the same spoofed IP source, which will send a massive amount of data back to the victim.|$|E
500|$|While Ramón was in France, {{his father}} sought {{to move the}} family's {{registration}} from the [...] "mixed race" [...] to the [...] "white" [...] (Caucasian) classification of families in Cabo Rojo. The process, when successful, entitled the <b>requester</b> to further legal and property rights {{for him and his}} family, and was necessary to allow his daughter, Ana María, to marry José Tió, who was a Caucasian. In the case of Betances' father, the process lasted two years, and was formalized in 1840, but not before having to have the family's lineage and religious affiliations exposed to the general public, something that embarrassed them all. Betances was considerably annoyed by the entire ordeal, since {{he was the first to}} acknowledge that he and his entire family were not [...] "blancuzcos" [...] ("whitish", a legal term) but [...] "prietuzcos" [...] ("blackish", as Betances mocked it in his letters) instead. To him the procedure reeked of hypocrisy.|$|E
40|$|Research {{has found}} people {{underestimate}} the likelihood strangers will comply with their direct requests (Bohns, 2016; Flynn 2 ̆ 6 Lake, 2008). Here we argue this “underestimation- of-compliance effect” {{may be limited}} to requests made face-to-face. We find when making direct requests over email, <b>requesters</b> instead overestimate compliance. In two studies, participants asked strangers to comply with requests either face-to-face or over email. Before making these requests, <b>requesters</b> estimated {{the number of people}} they expected to say “yes”. While <b>requesters</b> underestimated compliance in face-to-face contexts, replicating previous research, they overestimated compliance in email contexts. Analyses of several theorized mechanisms for this finding suggest that <b>requesters,</b> anchored on their own perspectives, fail to appreciate the suspicion, and resulting lack of empathy, with which targets view email requests from strangers. Given the prevalence of email and text-based communication, this is an extremely important moderator of the underestimation-of-compliance effect...|$|R
50|$|Networks Hosts {{communicate}} {{through use of}} this client software: Shells, Redirectors and <b>Requesters.</b>|$|R
40|$|Abstract. Since its introduction, Web Service {{technology}} {{has promised to}} revolutionize how businesses can release their services and technology to the world over the Internet. However, the widely accepted standards underpinning Web Services do {{not solve the problem}} of how autonomous, heterogeneous services can be discovered, mediated and invoked at runtime by service <b>requesters.</b> <b>Requesters</b> can locate services in public registries but, at design time, they still have to interpret the provider’s intent of what the service means and how it should be invoked. The Web Services Modelling Execution Environment, WSMX, is a framework that facilitates service <b>requesters</b> in discovering, selecting, mediating and invoking Web Services offered by providers at runtime. ...|$|R
2500|$|The {{operating}} {{system must be}} capable of distinguishing between requests which {{should be allowed to}} be processed, and others which should not be processed. While some systems may simply distinguish between [...] "privileged" [...] and [...] "non-privileged", systems commonly have a form of <b>requester</b> identity, such as a user name. To establish identity there may be a process of authentication. Often a username must be quoted, and each username may have a password. Other methods of authentication, such as magnetic cards or biometric data, might be used instead. In some cases, especially connections from the network, resources may be accessed with no authentication at all (such as reading files over a network share). Also covered by the concept of <b>requester</b> identity is authorization; the particular services and resources accessible by the <b>requester</b> once logged into a system are tied to either the requester's user account or to the variously configured groups of users to which the <b>requester</b> belongs.|$|E
2500|$|The {{conservative}} organization Judicial Watch filed {{a request}} for Kerry's records with the Navy under the Freedom of Information Act. [...] The Navy provided Judicial Watch with a biographical data sheet on Kerry, two citations and one certificate for the Silver Star medal, two citations and one certificate for the Bronze Star medal, and three sets of orders and certificates for the Purple Heart. [...] The Navy was required to withhold an additional 31 pages of personnel records because a release authorization was not provided, but referred the <b>requester</b> to Kerry's website which contained documents exempted from disclosure.|$|E
2500|$|Lavoe's lack {{of professionalism}} was often {{balanced}} by an affable onstage presence, very much resembling {{that of a}} stand-up comedian. One famous incident involved a middle-aged audience member at a dance who requested a Puerto Rican danza from Colón's band; Lavoe responded with an insult. The <b>requester</b> then gave Lavoe such a beating that he almost {{ended up in the}} hospital. The request was finally honored on a later Colón record, El Juicio (The Trial), when he added a danza section to the Rafael Muñoz song [...] "Soñando despierto", which Lavoe introduces with a deadpanned: [...] "¡Para tí, Motherflower!" [...] - a euphemism for: [...] "This one's for you, motherfucker!" ...|$|E
5000|$|... 2014 GL16 Washington D.C. “Grey Literature Lobby, Engines and <b>Requesters</b> for Change”, December 8-9 ...|$|R
40|$|Abstract—Cloud {{computing}} paradigm alloows subscription-based {{access to}} computing and storages services over the Internet. Since with advances of Cloud technnology, operations such as discovery, scaling, and monitoring are accomplished automatically, negotiation between Cloud service <b>requesters</b> and providers {{can be a}} bottleneck if it is carried out by humans. Therefore, our objective is to offer a state-of-the-art solution to automate the negotiation prrocess in Cloud environments. In previous works in the SLA negotiation area, <b>requesters</b> trust whatever QoS criteria valuees providers offer {{in the process of}} negotiation. However, the proposed negotiation strategy for <b>requesters</b> in this work is capable of assessing reliability of offers received from Cloud providers. In addition, our proposed negotiation strrategy for Cloud providers considers utilization of resources when it generates new offers during negotiation and concedes more on the price of less utilized resources. The experimental results show that our strategy helps Cloud providers to increease their profits when they are participating in parallel negotiation with multiple <b>requesters.</b> Keywords- Cloud computing; SLA negotiattion; I...|$|R
40|$|Research {{has shown}} a robust {{tendency}} for people to underestimate their ability to get others to comply with their requests. In five studies, we demonstrate that this underestimation-of-compliance effect is reduced when <b>requesters</b> offer money in exchange for compliance. In Studies 1 and 2, participants assigned to a no-incentive or monetary-incentive condition made actual requests of others. In both studies, <b>requesters</b> who offered no incentives underestimated the likelihood that those they approached would grant their requests; however, when <b>requesters</b> offered monetary incentives, this prediction error was mitigated. In Studies 3 - 5, we present {{evidence in support of}} a model to explain the underlying mechanism for this attenuation effect. Studies 3 and 4 demonstrate that offering monetary incentives activates a money-market frame. In Study 5, we find that this activation reduces the discomfort associated with asking, allowing <b>requesters</b> to more accurately assess the size of their request and, consequently, the likelihood of compliance...|$|R
2500|$|For the {{recursive}} query approach, a DNS resolver client will query {{a single}} DNS server, which may then query (as a client itself) other DNS servers {{on behalf of}} the <b>requester.</b> For example, a simple [...] "stub resolver" [...] running on a home router will typically make a recursive query to the DNS server run by the user's ISP. A recursive query is one for which the DNS server will fully answer the query (or give an error) by querying other name servers as needed. In typical operation, a client will issue a recursive query to a caching recursive DNS server, which will then issue non-recursive queries to determine the answer and send a single answer back to the client. The resolver, or another DNS server acting recursively {{on behalf of the}} resolver, negotiates use of recursive service using bits in the query headers. DNS servers are not required to support recursive queries.|$|E
6000|$|... "You {{appear to}} me, Mr. Darcy, to allow {{nothing for the}} {{influence}} of friendship and affection. A regard for the <b>requester</b> would often make one readily yield to a request, without waiting for arguments to reason one into it. I am not particularly speaking of such a case as you have supposed about Mr. Bingley. We may as well wait, perhaps, till the circumstance occurs before we discuss the discretion of his behaviour thereupon. But in general and ordinary cases between friend and friend, where {{one of them is}} desired by the other to change a resolution of no very great moment, should you think ill of that person for complying with the desire, without waiting to be argued into it?" ...|$|E
5000|$|Threats to the refuser's {{negative}} face vary {{along the}} ability and focus dimensions. Focusing away from the <b>requester</b> allows the refuser to maintain their autonomy while maintaining the relationship; this leads to less face-threat if the refuser has high ability because they can choose whether to comply or not. [...] Focusing on the <b>requester</b> would threaten {{their relationship with the}} <b>requester</b> and their long-term autonomy (the <b>requester</b> may be unwilling to comply to future requests when the roles are reversed); however, if the refuser has low ability, focusing on the <b>requester</b> can actually decrease threats to negative face by showing they are unable to comply even if they wanted to.|$|E
50|$|Directories: This section {{displays}} the {{complete list of}} registered issuers and <b>requesters</b> along with their URLs.|$|R
40|$|Crowdsourcing marketplaces provide {{opportunities}} for au-tonomous and collaborative professional {{work as well as}} so-cial engagement. However, in these marketplaces, workers feel disrespected due to unreasonable rejections and low pay-ments, whereas <b>requesters</b> do not trust the results they re-ceive. The lack of trust and uneven distribution of power among workers and <b>requesters</b> have raised serious concerns about sustainability of these marketplaces. To address the challenges of trust and power, this paper introduces Daemo, a self-governed crowdsourcing marketplace. We propose a pro-totype task to improve the work quality and open-governance model to achieve equitable representation. We envisage Daemo will enable workers to build sustainable careers and provide <b>requesters</b> with timely, quality labor for their busi-nesses...|$|R
30|$|We {{can also}} {{classify}} crowdsourcing platforms as either paid or unpaid. In paid platforms, <b>requesters</b> {{can tap into}} a large population of workers around the globe to accomplish tasks in {{a fraction of the}} time and money of more traditional methods [23]. On the other hand, <b>requesters</b> rely on volunteers or other crowd gathering techniques in unpaid platforms. In the following subsections, we will discuss examples of paid and unpaid platforms.|$|R
5000|$|The {{analogy with}} free/busy tone on PSTN is inexact, as the [...] "on-hook" [...] {{telephone}} status reflects {{the ability of}} the network to reach the recipient after the <b>requester</b> has initiated the conversation. The <b>requester</b> must commit to the connection method before discovering the recipient's availability state. Conversely, Presence shows the availability state before a conversation is initiated. A similar comparison might be the <b>requester</b> needing to know if the recipient is at work. The most straightforward way of checking if the recipient is available is to walk to the desk, which requires the commitment of the walk regardless of the outcome and usually requires some interaction if the recipient is at the desk. The <b>requester</b> can call first to save the walk, but now must commit to an interaction via phone. Presence gives the state of the recipient to the <b>requester</b> and the <b>requester</b> has the choice to interact with the recipient or use that information for non-interactive purposes (such as taking roll).|$|E
5000|$|As {{with the}} client-based interface, the Btrieve-based {{application}} makes {{a call to}} the [...] loader and <b>requester</b> interface library. This library checks the [...] file to see if it needs to access data on the local system or whether it needs to access data on a remote server. If it needs to access the server, then it uses the Windows version of DPMI to access a DOS-based <b>requester</b> named [...] The <b>requester</b> then establishes a network connection to the server, which processes the request and passes back a message to the <b>requester</b> when the database request is completed.|$|E
50|$|SOAP is an XML-based {{protocol}} to exchange messages between a <b>requester</b> and {{a provider of}} a Web Service.The provider publishes the WSDL to UDDI and the <b>requester</b> can join to it using SOAP.|$|E
40|$|Abstract. In the service-oriented {{architecture}} (SOA), we distinguish three roles of service owners: service providers, service <b>requesters,</b> and service brokers, {{and the three}} standard operations publish, find, and bind. We provide a formal method based on Petri nets to model services. We suggest operating guidelines as a convenient and intuitive artifact to realize publish. Then, the find operation reduces to a matching problem between the <b>requester’s</b> service and the operating guideline. ...|$|R
40|$|Data anonymisation is of {{increasing}} importance for allowing sharing individual data among various data <b>requesters</b> {{for a variety}} of social network data analysis and mining applications. Most existing works of data anonymisation target at the optimization of the anonymisation metrics to balance the data utility and privacy, whereas they ignore the effects of a <b>requester's</b> trust level and application purposes during the data anonymisation. Our aim {{of this paper is to}} propose a much finer level anonymisation scheme with regard to the data <b>requester's</b> trust and specific application purpose. We firstly prioritize the attributes for anonymisation based on their importance to application purposes. Secondly, we build the projection between the trust value and the degree of data anonymization, which intends to determine to what extent the data should be anonymized. The decomposition algorithm is developed to find the desired anonymous solution, which ensures the uniqueness and correctness. Finally, we conduct extensive experiments on two real-world data sets and the results show the benefits of our approach for both data <b>requesters</b> and providers. ...|$|R
5000|$|... allow <b>requesters</b> {{to specify}} {{that they want}} access to actual copies of {{documents}} not just the information in them ...|$|R
50|$|Relations of request are {{asymmetrical}} relations; {{one type}} requests another. The request recipient's dual seeking function is the requester's creative function, {{and as a}} result the request recipient often takes an interest in the <b>requester.</b> However, the requester's dual seeking function is the request recipient's place of least resistance, and the <b>requester</b> finds the request recipient a highly uninteresting person. Relations of request frequently end with the departure of the <b>requester.</b>|$|E
50|$|The {{algorithm}} {{applies to}} data of any size. If {{the data in}} a single write spans 2n packets, the last packet will be withheld, waiting for the ACK for the previous packet. In any request-response application protocols where request data can be larger than a packet, this can artificially impose a few hundred milliseconds latency between the <b>requester</b> and the responder, even if the <b>requester</b> has properly buffered the request data. Nagle's algorithm should be disabled by the <b>requester</b> in this case. If the response data can be larger than a packet, the responder should also disable Nagle's algorithm so the <b>requester</b> can promptly receive the whole response.|$|E
5000|$|... "where appropriate, {{the names}} and {{addresses}} of the proprietors of the patent for those Contracting States in which the <b>requester</b> is not the proprietor of the patent, and evidence that the <b>requester</b> is entitled to act on their behalf in the proceedings"; ...|$|E
50|$|My Requester: This section {{displays}} the requesters' names {{and the number}} of documents requested from the user by the <b>requesters.</b>|$|R
5000|$|The {{three key}} {{stakeholders}} of the DigiLocker platform are citizens, issuers and <b>requesters.</b> Let’s see how these stakeholders {{interact with the}} DigiLocker: ...|$|R
30|$|At the Network Layer, Intanagonwiwat et al. {{introduce}} Directed Diffusion [6], {{which provides}} data-centric routing, in-network caching and aggregation. To realise these features, Directed Diffusion provides a common data representation. Entities that request data register {{an interest in}} a particular data type at a certain network location, which causes a conceptual gradient to be established between sources and <b>requesters,</b> data is then drawn down these gradients from sources to <b>requesters.</b> As data travels down these routes, it is aggregated and cached.|$|R
