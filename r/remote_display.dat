117|139|Public
2500|$|Fluoroscopy (...) is an imaging {{technique}} that uses X-rays to obtain real-time moving {{images of the}} interior of an object. In its primary application of medical imaging, a fluoroscope (...) allows a physician to see the internal structure and function of a patient, so that the pumping action of the heart or the motion of swallowing, for example, can be watched. This is useful for both diagnosis and therapy and occurs in general radiology, interventional radiology, and image-guided surgery. In its simplest form, a fluoroscope consists of an X-ray source and a fluorescent screen, between which a patient is placed. However, since the 1950s most fluoroscopes have included X-ray image intensifiers and cameras as well, to improve the image's visibility and make it available on a <b>remote</b> <b>display</b> screen. For many decades fluoroscopy tended to produce live pictures that were not recorded, but since the 1960s, as technology improved, recording and playback became the norm.|$|E
50|$|TigerVNC {{focuses on}} {{performance}} and on <b>remote</b> <b>display</b> functionality.|$|E
50|$|RFB was {{originally}} developed at Olivetti Research Laboratory (ORL) as a <b>remote</b> <b>display</b> technology {{to be used}} by a simple thin client with ATM connectivity called a Videotile. In order to keep the device as simple as possible, RFB was developed and used in preference to any of the existing <b>remote</b> <b>display</b> technologies.|$|E
40|$|The Launch Control System (LCS) {{developed}} at NASA's Kennedy Space Center (KSC) {{will be used}} to launch future spacecraft. Two of the many components of this system are the Application Control Language (ACL) and <b>remote</b> <b>displays.</b> ACL is a high level domain specific language that is used to write remote control applications for LCS. <b>Remote</b> <b>displays</b> are graphical user interfaces (GUIs) developed to display vehicle and Ground Support Equipment (GSE) data, they also provide the ability to send commands to control GSE and the vehicle. The <b>remote</b> <b>displays</b> and the control applications have many facets and this internship experience dealt with several of them...|$|R
40|$|The firing room at Kennedy Space Center (KSC) is {{responsible}} for all NASA human spaceflight launch operations, therefore {{it is vital that}} all displays within the firing room be properly tested, up-to-date, and user-friendly during a launch. The Ground Main Propulsion System (GMPS) requires a number of <b>remote</b> <b>displays</b> for Vehicle Integration and Launch (VIL) Operations at KSC. My project is to develop <b>remote</b> <b>displays</b> for the GMPS using the Display Services and Framework (DSF) editor. These <b>remote</b> <b>displays</b> will be based on model images provided by GMPS through PowerPoint. Using the DSF editor, the PowerPoint images can be recreated with active buttons associated with the correct Compact Unique Identifiers (CUIs). These displays will be documented in the Software Requirements and Design Specifications (SRDS) at the 90 % GMPS Design Review. In the future, these <b>remote</b> <b>displays</b> will be available for other developers to improve, edit, or add on to so that the display may be incorporated into the firing room to be used for launches...|$|R
50|$|Charge {{controllers}} {{may also}} monitor battery temperature to prevent overheating. Some charge controller systems also display data, transmit data to <b>remote</b> <b>displays,</b> and data logging to track electric flow over time.|$|R
5000|$|LDM, the (<b>remote)</b> <b>Display</b> Manager of the Linux Terminal Server Project ...|$|E
5000|$|... 3275 <b>remote</b> <b>display</b> with {{controller}} function (no additional displays {{up to one}} printer) ...|$|E
5000|$|... 3276 <b>remote</b> <b>display</b> with {{controller}} function (up to {{a limited}} number of displays or printers) ...|$|E
50|$|The GNOME Display Manager (GDM) is {{a display}} manager that {{implements}} all significant features required for managing attached and <b>remote</b> <b>displays.</b> GDM was written from scratch {{and does not}} contain any XDM or X Consortium code.|$|R
40|$|Abstract- Embedded {{systems and}} {{evolution}} in electronics has made {{dramatic change in}} world. It is widely used in automation, process control, data monitoring, <b>remote</b> <b>displays</b> and many more. Networking is a major component which is used in industry in automation problems, remote monitoring and control. The technology of web is combined with embedded systems to solve many problems. I...|$|R
5000|$|... x2vnc - x2vnc {{allows the}} console (keyboard and mouse) on an X {{terminal}} {{to be used}} to control another console running a VNC server. It also provides ancillary functions like clipboard sharing. The <b>remote</b> <b>displays</b> can be running on any operating system that can run a VNC server... Developed in 1998 by Fredrik Hubinette, based on source code from x2x and VNC.|$|R
5000|$|X- Win32 allows <b>remote</b> <b>display</b> of UNIX {{windows on}} Windows {{machines}} {{in a normal}} window alongside the other Windows applications ...|$|E
50|$|Sony {{produced}} a wristwatch called Sony SmartWatch {{that must be}} paired with an Android phone. Once paired, it becomes an additional <b>remote</b> <b>display</b> and notification tool.|$|E
50|$|Compared to TightVNC, TigerVNC adds {{encryption}} for all supported {{operating systems}} (not just Linux), but it removes scaling the <b>remote</b> <b>display</b> into the client window, file transfer, and changing options while connected.|$|E
40|$|International audienceDirect {{touch input}} is {{employed}} on many devices, {{but it is}} inherently restricted to displays that are reachable by the user. Gaze input as a mediator can extend touch to <b>remote</b> <b>displays</b> - using gaze for remote selection, and touch for local manipulation - but at what cost and benefit? In this paper, we investigate the potential trade-off with four experiments that empirically compare remote Gaze+touch to standard touch. Our experiments investigate dragging, rotation, and scaling tasks. Results indicate that Gaze+touch is, compared to touch, (1) equally fast and more accurate for rotation and scaling, (2) slower and less accurate for dragging, and (3) enables selection of smaller targets. Our participants confirm this trend, and are positive about the relaxed finger placement of Gaze+touch. Our experiments provide detailed performance characteristics to consider {{for the design of}} Gaze+touch interaction of <b>remote</b> <b>displays.</b> We further discuss insights into strengths and drawbacks in contrast to direct touch...|$|R
5000|$|Networking : The X Window System is an {{architecture}} {{that was designed}} at its core to run over a network. Wayland does not offer network transparency by itself; however, a compositor can implement any remote desktop protocol to achieve <b>remote</b> <b>displaying.</b> In addition, there is research into Wayland image streaming and compression that would provide remote frame buffer access {{similar to that of}} VNC.|$|R
50|$|Fault {{reporting}} is an optional feature {{that can be}} forwarded to <b>remote</b> <b>displays</b> using simple configuration setting in all modern computing equipment. The system level of reporting that is appropriate for Condition Based Maintenance are critical, alert, and emergency, which indicate software termination due to failure. Specific failure reporting, like interface failure, can be integrated into applications linked with these reporting systems. There is no development cost if these are incorporated into designs.|$|R
50|$|Shearwater's NERD or Near Eye <b>Remote</b> <b>Display</b> is a {{head-up display}} that places the divers {{information}} {{in front of}} their eyes. The Shearwater NERD was released at Dive 2013 in Birmingham, UK.|$|E
50|$|With V1R5 (1979), ITPENTER was {{enhanced}} to {{run from}} a TSO command list (in the TSO user address space) and therefore to operate simulations from a <b>remote</b> <b>display</b> terminal in the VTAM network instead of the MVS system console.|$|E
5000|$|PC-over-IP (PCoIP) is a {{proprietary}} <b>remote</b> <b>display</b> protocol developed by Teradici. [...] The protocol {{is available in}} hardware and in software. In 2008, VMware licensed Teradici's PCoIP protocol, and supports it in VMware Horizon View. In 2013 Amazon licensed the PCoIP protocol for use in AWS Amazon Workspaces.|$|E
5000|$|Android [...] "O" [...] {{will add}} support for NeighborhoodÂ Aware Networking (NAN) for Wi-Fi based on Wi-Fi Aware, wide color gamuts in apps, an API for autofillers, {{multiprocess}} and Google Safe Browsing support for WebViews, an API to allow system-level integration for VoIP apps, and launching activities on <b>remote</b> <b>displays.</b> Android Runtime (ART) features performance improvements and better cache handling. Android [...] "O" [...] contains additional limits on apps' background activities {{in order to}} improve battery life. Apps can specify [...] "adaptive icons" [...] for differently-shaped containers specified by themes, such as circles, squares, and squircles.|$|R
5000|$|Valens' HDBaseT {{technology}} {{is used for}} transmitting uncompressed high quality images and audio from the base stations, potentially up to a distance of 100 meters (328 ft) through a single cable, to <b>remote</b> <b>displays</b> {{as a part of}} its 5PlayTM system. HDBaseT is transmitted over category 6a cables with 8P8C modular connectors of the type commonly used for Ethernet local area network connections. HDBaseT transmits uncompressed ultra-high-definition video (up to 4K), audio, power over HDBaseT (PoH - up to 100W), Ethernet, USB, and a series of controls such as RS and IR.|$|R
5000|$|On {{the display}} side, the round radar is being {{replaced}} by computer-driven cathode ray tubes, which now are {{being replaced by}} modern LCD flat screens in en route systems. However a great many US Air Traffic TRACON facilities and Towers still use the older cathode ray tube technology. Most of the larger TRACONs employ a 20" [...] x 20" [...] Sony color tube display; Common ARTS uses the ARTS Color Display (ACD) and the <b>Remote</b> ARTS Color <b>Display</b> (R-ACD), while STARS uses the Terminal Control Workstation (TCW) and Tower Display Workstation (TDW). Towers are slowly replacing old DBrite (cathode ray type <b>remote</b> <b>displays)</b> with an LCD type manufactured by Barco. However these display replacements are currently installed only at the busiest facilities with lower density traffic facilities slated for retrofit later.|$|R
5000|$|A remote text terminal. The {{communication}} capabilities usually become {{reduced to}} a serial line or its emulation, possibly with few ioctl (...) s as an out-of-band channel in such cases as Telnet and Secure Shell. This is the worst case, because software restrictions hinder the use of capabilities of a <b>remote</b> <b>display</b> device.|$|E
50|$|In May 2015, Google {{introduced}} new sets of APIs to Google Cast. The Cast <b>Remote</b> <b>Display</b> APIs allow {{developers to}} create second-screen experiences for apps such as games without needing to mirror displays. The Game Manager APIs offer developers more options for creating multiplayer games. Lastly, additional APIs were provided to control autoplaying and queuing of content.|$|E
5000|$|Unlike other {{application}} publishing products, GO-Global {{does not}} use [...] "screen scraping" [...] technology (where bitmaps or output displays are compressed and transmitted to the remote device). Instead, GO-Global intercepts Device Driver Interface (DDI) or X11 calls that are interpreted and rendered by the <b>remote</b> <b>display</b> device. This enhances client pixel redraws and greatly reduces network traffic.|$|E
50|$|Teleprocessing {{monitors}} such as IBM's CICS and {{third-party software}} such as <b>Remote</b> DUCS (<b>display</b> unit control system) and Westi platforms used Bisync line control {{to communicate with}} remote devices.|$|R
5000|$|... #Caption: Submersible {{wireless}} {{pressure transducer}} for <b>remote</b> dive computer <b>display</b> ...|$|R
40|$|This paper proposes making {{displays}} and input devices as first-class citizens in a networked system environment for collaborative applications. The paper describes a virtually shared model that enables users to use <b>remote</b> <b>displays</b> as extensions {{of their local}} {{displays and}} to allow multiple users to use multiple cursors and keyboards to input and control shared applications and their windows simultaneously. We have implemented a prototype system and deployed it to three DOE Fusion control rooms. The implementation performs well on todayâs hardware and our user feedbacks show that such a paradigm can substantially improve information sharing. 1...|$|R
50|$|Some {{pioneering}} {{storage tube}} displays were MIT Project MAC's ARDS (Advanced <b>Remote</b> <b>Display</b> Station), the Computek 400 Series Display terminals (a commercial derivative), which both used a Tektronix type 611 storage display unit, and Tektronix's 4014 terminal, the latter becoming {{a de facto}} computer terminal standard some time after its introduction (later being emulated by other systems due to this status).|$|E
50|$|The {{protocol}} supports rich <b>remote</b> <b>display</b> {{and input}} services {{with a number}} of display options to deliver the presentation of the remote applications onto the local display alongside local applications using seamless windows, or self-contained remote environments delivered full-screen or in a standalone window. The protocol also supports audio, printing, and other device mapping services including drive mapping, serial port access, and clipboard mapping.|$|E
5000|$|Microsoft RemoteFX is a Microsoft {{brand name}} that covers {{a set of}} {{technologies}} that enhance visual experience of the Microsoft-developed <b>remote</b> <b>display</b> protocol Remote Desktop Protocol (RDP). [...] RemoteFX was first introduced in Windows Server 2008 R2 SP1 {{and is based on}} intellectual property that Microsoft acquired and continued to develop since acquiring Calista Technologies. It {{is a part of the}} overall Remote Desktop Services workload.|$|E
50|$|The Kounta POS is a {{software-as-a-service}} (SaaS) {{that runs}} as an application in web browsers {{as well as}} natively on iOS and Android operating systems. It can also run {{in a wide variety}} of peripherals including receipt printers, <b>remote</b> <b>displays,</b> and cash drawers. Through Web Cache and IndexedDB, Kounta can be used in both on and offline modes. The application allows automated inventory management, purchase ordering, customer relationship management (CRM), multiple location support, employee monitoring, recipe creation for ingredient tracking, table layouts, reporting, and analytics; as well as managing customer orders, split bills, accounting, and rostering payroll applications.|$|R
5000|$|In 2012, SHFL {{entertainment}} released Deck Mate 2 {{which can}} shuffle a deck in 22 seconds and includes card recognition, allows operators {{to call the}} [...] "clock", and has a <b>remote</b> touchscreen <b>display.</b>|$|R
50|$|When {{the user}} selects a host from the list, the XDMCP Chooser {{running on the}} local machine will {{send a message to}} the {{selected}} <b>remote</b> computer's <b>display</b> manager and instruct it to connect the X server on the local computer or terminal.|$|R
