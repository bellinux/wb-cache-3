2621|10000|Public
5|$|After <b>refresher</b> training, Maryland {{headed for}} the western Pacific on 4 March 1945, {{arriving}} Ulithi on 16 March. There she joined the 5th Fleet and Rear Admiral Morton Deyo's Task Force 54 (TF 54), which was preparing for the invasion of Okinawa. The fleet departed on 21 March, bound for Okinawa.|$|E
5|$|A {{week after}} taking command, Moosally and his {{executive}} officer, Mike Fahey, canceled a planned $1million repair package for Iowas main gun batteries, including repairs {{to the main}} gun turrets' lighting, electrical, powder hoists, and hydraulic systems—75 detailed deficiencies in all. Instead, the funds were spent on overhauling the ship's powerplant. In August 1988, Iowa set sail on sea trials around the Chesapeake Bay area and then began <b>refresher</b> training in the waters around Florida and Puerto Rico in October.|$|E
5|$|From April–August 1984, Iowa {{underwent}} <b>refresher</b> {{training and}} naval gunfire support qualifications in the Atlantic Ocean. She {{spent the rest}} of 1984 on a shakedown cruise in the area around Central America. During this cruise she aided in several humanitarian operations, including in Costa Rica and Honduras, before returning to the United States in April 1985 for a period of routine maintenance.|$|E
5000|$|The <b>refresh</b> cycles are {{distributed}} {{across the entire}} <b>refresh</b> interval {{in such a way}} that all rows are <b>refreshed</b> within the required interval. To <b>refresh</b> one row of the memory array using [...] Only <b>Refresh,</b> the following steps must occur: ...|$|R
40|$|Modern DRAM {{cells are}} {{periodically}} <b>refreshed</b> to prevent data loss due to leakage. Commodity DDR (double data rate) DRAM <b>refreshes</b> cells at the rank level. This degrades performance significantly because it prevents an entire DRAM rank from serving memory requests while being <b>refreshed.</b> DRAM designed for mobile platforms, LPDDR (low power DDR) DRAM, supports an enhanced mode, called per-bank <b>refresh,</b> that <b>refreshes</b> cells {{at the bank}} level. This enables a bank to be accessed while another in the same rank is being <b>refreshed,</b> alleviating part of the negative performance impact of <b>refreshes.</b> Unfortunately, there are two shortcomings of per-bank <b>refresh</b> employed in today’s systems. First, we observe that the perbank <b>refresh</b> scheduling scheme does not exploit the full potential of overlapping <b>refreshes</b> with accesses across bank...|$|R
50|$|The <b>refresh</b> {{circuitry}} must {{perform a}} <b>refresh</b> cycle {{on each of}} the rows on the chip within the <b>refresh</b> time interval, to make sure that each cell gets <b>refreshed.</b>|$|R
5|$|In June {{he joined}} No. 66 Squadron RFC at Aire, {{equipped}} with the Sopwith Pup. He undertook a <b>refresher</b> course but his tenure there was unremarkable. He was ordered to fly with the group rather than fly solo patrols. He flew 47 hours in 66 Squadron and 21 patrols. He encountered the enemy six times but could not score. Finally on 21 and 26 July he shot down one Albatros D.V fighter for his 6–7th aerial victories.|$|E
5|$|The {{squadron}} was re-formed in {{its present}} incarnation during 1998 and is currently stationed at RAAF Base Pearce, where it has operated Hawk127 jet training aircraft since 2000. The unit's main role is to provide introductory jet aircraft training to RAAF pilots as well as <b>refresher</b> training on the Hawk for experienced pilots. No.79 Squadron also supports Australian Army and Royal Australian Navy training exercises in Western Australia and the Northern Territory.|$|E
5|$|A team {{of doctors}} and {{surgeons}} at the Fifteenth Scottish Hospital in Cairo worked extensively on Smith, putting his jaw back together with a complicated assembly of bandage, plaster, nuts, bolts and wire, and rebuilt his face through skin grafts and other reconstructive surgery. In March 1944, after about five months' convalescence, he was passed fit for flying. He turned down the offer of a posting home to Southern Rhodesia as an instructor and, after a <b>refresher</b> course in Egypt, travelled to Corsica to rejoin No. 237 Squadron, which was by now flying Spitfire Mk IXs.|$|E
50|$|Burst <b>refresh</b> {{results in}} long periods when the memory is unavailable, so {{distributed}} <b>refresh</b> {{has been used}} in most modern systems, particularly in real time systems. In distributed <b>refresh,</b> the interval between <b>refresh</b> cycles isFor example, the current generation of chips (DDR SDRAM) has a <b>refresh</b> time of 64 ms and 8,192 rows, so the <b>refresh</b> cycle interval is 7.8 μs.|$|R
40|$|DRAM cells rely on {{periodic}} <b>refresh</b> {{operations to}} main-tain data integrity. As {{the capacity of}} DRAM memories has in-creased, so has {{the amount of time}} consumed in doing <b>refresh.</b> <b>Refresh</b> operations contend with read operations, which in-creases read latency and reduces system performance. We show that eliminating latency penalty due to <b>refresh</b> can im-prove average performance by 7. 2 %. However, simply doing intelligent scheduling of <b>refresh</b> operations is ineffective at obtaining significant performance improvement. This paper provides an alternative and scalable option to reduce the latency penalty due to <b>refresh.</b> It exploits the prop-erty that each <b>refresh</b> operation in a typical DRAM device in-ternally <b>refreshes</b> multiple DRAM rows in JEDEC-based dis-tributed <b>refresh</b> mode. Therefore, a <b>refresh</b> operation has well defined points at which it can potentially be Paused to service a pending read request. Leveraging this property, we propose <b>Refresh</b> Pausing, a solution that is highly effective at allevi-ating the contention from <b>refresh</b> operations. It provides an average performance improvement of 5. 1 % for 8 Gb devices, and becomes even more effective for future high-density tech-nologies. We also show that <b>Refresh</b> Pausing significantly out-performs the recently proposed Elastic <b>Refresh</b> scheme. 1...|$|R
5000|$|Burst <b>refresh</b> - {{a series}} of <b>refresh</b> cycles are {{performed}} one after another until all the rows have been <b>refreshed,</b> after which normal memory accesses occur until the next <b>refresh</b> is required ...|$|R
5|$|Hanjour {{arrived in}} San Diego on December 8, 2000, joining Hazmi. They soon left for Arizona, where Hanjour took <b>refresher</b> training. Marwan al-Shehhi {{arrived at the}} end of May 2000, while Atta arrived on June 3, 2000, and Jarrah arrived on June 27, 2000. Bin al-Shibh applied several times for a visa to the United States, but as a Yemeni, he was {{rejected}} out of concerns he would overstay his visa and remain as an illegal immigrant. Bin al-Shibh stayed in Hamburg, providing coordination between Atta and Mohammed. The three Hamburg cell members all took pilot training in South Florida.|$|E
5|$|Harris was {{recalled}} from reserve {{status to}} active duty with {{the outbreak of the}} Korean War in 1950. On October 15, 1951, Harris reported to NAS Memphis for a two-month pilot <b>refresher</b> training before being assigned to NAS Pensacola for flight duty. Following this post, Harris served in the Air Warfare Division of the Office of the Chief of Naval Operations (OpNav) at The Pentagon, and after the Korean War he moved through a number of positions at different Naval Air Stations. He ultimately attained the rank of captain and finished out his career in the Navy back at OpNav, this time as Head of the Aviation Periodicals and History Office. Harris retired on July 1, 1967.|$|E
5|$|In the {{subsequent}} fiscal years 1941 and 1942, {{the federal government}} partially funded the education of 12,000 students at 309 nursing schools. Through that initiative, 3,800 inactive nurses received <b>refresher</b> courses and 4,800 graduated nurses received postgraduate training. By the end of 1942, 47,500 students were enrolled in nursing schools {{but that did not}} meet the country's need. At this point, it was clear that nurses could not be trained quickly enough to keep abreast of both civilian and military needs. The need for additional federal aid for the recruitment of nurses became apparent when the U.S. Army and Navy called for 2,500 new nurses each month during the fiscal year 1943.|$|E
40|$|Modern DRAM {{cells are}} {{periodically}} <b>refreshed</b> to prevent data loss due to leakage. Commodity DDR (double data rate) DRAM <b>refreshes</b> cells at the rank level. This degrades performance significantly because it prevents an entire DRAM rank from serving memory requests while being <b>refreshed.</b> DRAMdesigned for mobile platforms, LPDDR (low power DDR) DRAM, supports an enhanced mode, called per-bank <b>refresh,</b> that <b>refreshes</b> cells {{at the bank}} level. This enables a bank to be accessed while another in the same rank is being <b>refreshed,</b> alleviating part of the negative performance impact ofrefreshes. Unfortunately, there are two shortcomings of per-bank <b>refresh</b> employed in today 2 ̆ 7 s systems. First, we observe that the perbank <b>refresh</b> scheduling scheme does not exploit the full potential of overlapping <b>refreshes</b> with accesses across banks because it restricts the banks to be <b>refreshed</b> in a sequential round-robin order. Second, accesses to a bank that is being <b>refreshed</b> have to wait. To mitigate the negative performance impact of DRAM <b>refresh,</b> we propose two complementary mechanisms, DARP (Dynamic Access <b>Refresh</b> Parallelization) and SARP (Subarray Access RefreshParallelization). The goal is to address the drawbacks of per-bank <b>refresh</b> by building more efficient techniques to parallelize <b>refreshes</b> and accesses within DRAM. First, instead of issuing per-bankrefreshes in a round-robin order, as it is done today, DARP issues per-bank <b>refreshes</b> to idle banks in an out-of-order manner. Furthermore, DARP proactively schedules <b>refreshes</b> during intervals when a batch of writes are draining to DRAM. Second, SARP exploits the existence of mostly-independent subarrays within a bank. With minor modifications to DRAM organization, it allows a bank to serve memory accesses to an idle subarray while another subarray is being <b>refreshed.</b> Extensive evaluations {{on a wide variety}} of workloads and systems show that our mechanisms improve system performance(and energy efficiency) compared to three st- te-of-the-art <b>refresh</b> policies and the performance benefit increases as DRAM density increases...|$|R
40|$|Technology obsolescence, {{also known}} as DMSMS (Diminishing Manufacturing Sources and Material Shortages), is a {{significant}} problem for systems whose operational life is much longer than the procurement lifetimes of their constitute components. The most severely affected systems are sustainment-dominated, which means their long-term sustainment (life-cycle) costs significantly exceed the procurement cost for the system. Unlike high-volume commercial products, these sustainment-dominated systems may require design <b>refreshes</b> to simply remain manufacturable and supportable. A strategic method for reducing the life-cycle cost impact of DMSMS is called <b>refresh</b> planning. The goal of <b>refresh</b> planning is to determine when design <b>refreshes</b> should occur (or what the frequency of <b>refreshes</b> should be) and how to manage the system components that are obsolete or soon to be obsolete at the design <b>refreshes.</b> 	Existing strategic management approaches focus on methods for determining design <b>refresh</b> dates. While creating a set of feasible design <b>refresh</b> plans is achievable using existing design <b>refresh</b> planning methodologies, the generated <b>refresh</b> plans may not satisfy {{the needs of the}} designers (sustainers and customers) because they do not conform to the constraints imposed on the system. 	This dissertation develops a new <b>refresh</b> planning model that satisfies <b>refresh</b> structure requirements (i. e., requirements that constrain the form of the <b>refresh</b> plan to be periodic) and develops and presents the definition, generalization, synthesis and application of part-unique temporal constraints in the design <b>refresh</b> planning process for systems impacted by DMSMS-type obsolescence. 	Periodic <b>refresh</b> plans are required by applications that are <b>refresh</b> deployment constrained such as ships and submarines (e. g., only a finite number of dry docks are available to <b>refresh</b> systems). The new <b>refresh</b> planning model developed in this dissertation requires 50 % less data and runs 50 % faster than the existing state-of-the-art discrete event simulation solutions for problems where a periodic <b>refresh</b> solution is required...|$|R
40|$|Dynamic Random Access Memory (DRAM) cells rely on {{periodic}} <b>refresh</b> {{operations to}} maintain data in-tegrity. As {{the capacity of}} DRAM memories has increased, so has {{the amount of time}} consumed in doing <b>refresh.</b> <b>Refresh</b> operations contend with read operations, which increases read latency and reduces system performance. We show that eliminating latency penalty due to <b>refresh</b> can improve average performance by 7. 2 %. However, simply doing intelligent scheduling of <b>refresh</b> operations is ineffective at obtaining significant performance improvement. This article provides an alternative and scalable option to reduce the latency penalty due to <b>refresh.</b> It exploits the property that each <b>refresh</b> operation in a typical DRAM device internally <b>refreshes</b> multiple DRAM rows in JEDEC-based distributed refreshmode. Therefore, a <b>refresh</b> operation haswell-defined points at which it can potentially be Paused to service a pending read request. Leveraging this property, we propose <b>Refresh</b> Pausing, a solution that is highly effective at alleviating the contention from <b>refresh</b> operations. It provides an average performance improvement of 5. 1 % for 8 Gb devices and becomes even more effective for future high-density technologies. We also show that <b>Refresh</b> Pausing significantly outperforms the recently proposed Elastic <b>Refresh</b> scheme...|$|R
5|$|No. 2 Operational Conversion Unit (No.2 OCU) is {{a fighter}} {{training}} {{unit of the}} Royal Australian Air Force (RAAF). Located at RAAF Base Williamtown, New South Wales, the unit trains pilots to operate the McDonnell Douglas F/A-18 Hornet, conducts <b>refresher</b> courses for pilots returning to the type, and trains future Hornet instructors. Pilots new to the Hornet enter No.2OCU after first qualifying to fly fast jets at No.79 Squadron and undertaking initial fighter combat instruction at No.76 Squadron. Once qualified on the F/A-18, they are posted to one of No.81 Wing's operational Hornet units, No.3 Squadron, No.75 Squadron or No.77 Squadron.|$|E
5|$|The {{return of}} Australian {{personnel}} from the SWPA was delayed by shipping shortages {{and the need}} to maintain a force in the area for garrison duties. The military provided these personnel with training courses to prepare them for civilian life. <b>Refresher</b> courses in basic subjects such as maths and English were run first before vocational training began. The teachers and instructors for these courses were service personnel {{selected on the basis of}} their civilian occupations. In addition, sport competitions were conducted to keep the men busy.|$|E
5|$|Upon {{completion}} of a major overhaul at the New York Naval Shipyard, Wisconsin headed south for <b>refresher</b> training in the Caribbean Sea, later taking part in another Springboard exercise. During that cruise, she again visited Port-au-Prince and added Tampico, Mexico, and Cartagena, Colombia, to her list of ports of call. She returned to Norfolk {{on the last day}} of March 1955 for local operations. On 19 October, while operating in the East River in New York Harbor, Wisconsin was accidentally grounded. However, the ship was freed in about an hour without any serious damage.|$|E
40|$|Caching is an {{effective}} mechanism for reducing bandwidth usage and alleviating server load. However, the use of caching entails a compromise between content freshness and <b>refresh</b> cost. An excessive <b>refresh</b> allows {{a high degree of}} content freshness at a greater cost of system resource. Conversely, a deficient <b>refresh</b> inhibits content freshness but saves the cost of resource usages. To address the freshness-cost problem, we formulate the <b>refresh</b> scheduling problem with a generic cost model and use this cost model to determine an optimal <b>refresh</b> frequency that gives the best tradeoff between <b>refresh</b> cost and content freshness. We prove the existence and uniqueness of an optimal <b>refresh</b> frequency under the assumptions that the arrival of content update is Poisson and the age-related cost monotonically increases with decreasing freshness. In addition, we provide an analytic comparison of system performance under fixed <b>refresh</b> scheduling and random <b>refresh</b> scheduling, showing that with the same average <b>refresh</b> frequency two <b>refresh</b> schedulings are mathematically equivalent in terms of the long-run average cost...|$|R
40|$|This paper {{describes}} a methodology for forecasting technology insertion concurrent with obsolescence driven design <b>refresh</b> planning. The optimized parameter {{is the life}} cycle cost of the system. The resulting analysis provides a design <b>refresh</b> schedule for the system (i. e., when to design <b>refresh)</b> and predicts the design <b>refresh</b> content {{for each of the}} scheduled design <b>refreshes.</b> Optimal design <b>refresh</b> content is determined using a hybrid analysis scheme that utilizes Monte Carlo methods to account for uncertainties (in dates) and Bayesian Belief Networks to enable critical decision making after candidate <b>refresh</b> dates are selected...|$|R
40|$|DRAM {{requires}} periodic <b>refresh</b> {{to prevent}} data loss from charge leakage. There exists two main <b>refresh</b> methods em-ployed {{in the majority}} of today’s DRAM systems. The first method is to carry out <b>refresh</b> operations at the rank level, called all-bank <b>refresh</b> (REFab), which is mainly used by commodity DDR DRAM [6]. Because all-bank <b>refresh</b> prevents all banks within an entire DRAM rank from serving memory requests, it significantly degrades performance. The second method is to perform <b>refreshes</b> at the bank level, called per-bank <b>refresh</b> (REFpb), which is currently supported in LPDDR DRAM used in mobile platforms [7]. In contrast to REFab, REFpb enables a bank to be accessed while another bank is being <b>refreshed,</b> alleviating part of the negative performance impact of <b>refresh.</b> Unfortunately, there are two shortcomings of per-bank re-fresh. First, <b>refreshes</b> to different banks are scheduled in a strict round-robin order as specified by the LPDDR standard [7]. Us-ing this static policy may force a busy bank to be <b>refreshed,</b> delaying the memory requests queued in that bank, while other idle banks are available to be <b>refreshed.</b> Second, <b>refreshing</b> banks cannot concurrently serve memory requests. Further-more, the negative performance impact of DRAM <b>refresh</b> be-comes exacerbated as DRAM density increases in the future. Figure 1 shows the average performance degradation of all-bank/per-bank <b>refresh</b> compared to ideal baseline without any <b>refreshes.</b> 1 Although REFpb performs slightly better than REFab, the performance loss is still significant, especially as the den-sity grows (16. 6 % loss at 32 Gb). Therefore, the goal of our paper [1] is to provide practical mechanisms to overcome these two shortcomings to mitigate the performance overhead of DRAM <b>refresh...</b>|$|R
5|$|While the cutters {{were being}} shipped to Subic Bay, crew members started {{reporting}} to Coast Guard Training Center Alameda, California on 17 May 1965 for overseas processing and training. The cutter crews received one week of small arms training at Naval Amphibious Base Coronado and Camp Pendleton while Survival, Evasion, Resistance and Escape (SERE) training was received at Marine Corps Mountain Warfare Training Center, near Coleville, California, in the Sierra Nevada Mountains and at Whidbey Island Naval Air Station, Washington. Returning to Alameda, they underwent <b>refresher</b> firefighting and damage control training from the Navy at Treasure Island Naval Base. Additional weapons qualifications and live fire exercises {{were held at}} Coast Guard Island and Camp Parks, California, along with <b>refresher</b> training in radar navigation, radio procedures and visual signaling. Gun crews received mortar and machine gun training at Camp Pendleton. Of the 245 personnel assigned to the unit only 131 were present at the squadron commissioning ceremony held at Alameda on 27 May with {{the remainder of the}} crews in the process of completing training elsewhere. For service in Vietnam, two officers were added to the normal crew complement of eight to add seniority to the crew in the mission of interdicting vessels at sea. All officers assigned to command cutters were required to be lieutenants and to have previously commanded a Cape-class cutter and had to volunteer for the assignment. The executive officer was either a lieutenant junior grade or ensign.|$|E
5|$|In 1947 {{the ship}} was sold to the South African Navy, {{together}} with her sister ship, Rosamund, and departed England on 22 November after a <b>refresher</b> course at the minesweeping school at HMS Lochinvar, Port Edgar, Scotland. The sisters arrived at Cape Town on 24 December, making stops at Gibraltar, Freetown and Walvis Bay en route. She was rechristened by {{the mayor of the}} city, A. E. Hirst, on 21 January 1948. The navy had originally intended to rename the ship Maritzburg, but decided to use the city's full name after protests. In November of that year, the sisters exercised with the British 3rd Aircraft Carrier Squadron. Later that month, together with the frigate , they visited ports in Portuguese Mozambique, returning to Durban on 12 December. While serving as a midshipmans' training ship, Pietermaritzburg became the largest South African warship to visit Knysna in September 1953. The ship and her sister were placed in reserve for a time in the late 1950s.|$|E
5|$|In {{its current}} role No.79 Squadron's main {{responsibility}} is to provide introductory fast jet training to pilots who have recently graduated from No.2 Flying Training School. During this training, new pilots who have been selected to fly jet aircraft are taught to operate Hawks and provided with initial instruction on jet aircraft combat tactics. In 2004, each of No.79 Squadron's training courses lasted for twelve weeks. After completing their initial jet aircraft training, pilots transfer to No.76 Squadron at RAAF Base Williamtown for advanced instruction before being posted {{to one of the}} RAAF's operational conversion units. No.79 Squadron also provides introductory training on fast jets for RAAF air combat officers who have been selected to serve on board F/A-18F Super Hornets. The squadron trained RAAF personnel selected to serve as navigators on board F-111 strike aircraft until these aircraft were replaced with Super Hornets in 2010. No.79 Squadron also provides <b>refresher</b> training on the Hawk aircraft for experienced fighter pilots.|$|E
40|$|Several factors {{complicate the}} {{coordination}} of information <b>refresh</b> to websites from corporate databases; a complex website contains information from dierent portions of the databases; websites have dierent <b>refresh</b> frequencies; dierent <b>refresh</b> queries have dierent execution times; and limited resources are available to perform the <b>refresh.</b> Given the information <b>refresh</b> requirements {{of a set of}} websites, we must nd a suitable set of queries that timely <b>refresh</b> the websites. In this paper, we rst formulate the problem formally as the Website <b>Refresh</b> Problem (WRP) and dene four problem instances along two parameters: website <b>refresh</b> interval and execution time of <b>refresh</b> query. For each case, we give sucient and necessary conditions for the feasibility of executing a set of <b>refresh</b> queries. 1 Introduction Nowadays WWW can not only be used for business corporations to advertise themselves but also be used to support Intranet applications, with information coming from t [...] ...|$|R
40|$|A DRAM cell {{requires}} periodic <b>refresh</b> {{operations to}} preserve data in its leaky capacitor. Previously, the overheads of <b>refresh</b> operations were insignificant. But, {{as both the}} size and speed of DRAM chips have increased significantly in the past decade, <b>refresh</b> has become a dominating factor of DRAM performance and power dissipation. The objective of this dissertation is to conduct a comprehensive study of the issues related to <b>refresh</b> operations in modern DRAM devices and thereafter, propose techniques to mitigate <b>refresh</b> penalties. To understand the growing consequences of <b>refresh</b> operations, first we describe various <b>refresh</b> command scheduling schemes; analyze the <b>refresh</b> modes and timings in modern commodity DRAM devices; and characterize the variations in DRAM cells' retention time. Then, we quantify <b>refresh</b> penalties by varying device speed, size, timings, and total memory capacity. Furthermore, we also summarize prior <b>refresh</b> mechanisms and their applicability in future computing systems. Finally, based on our experiments and observations, we propose techniques to improve <b>refresh</b> energy efficiency and mitigate <b>refresh</b> scalability problems. <b>Refresh</b> operations not only introduce performance penalty but also pose energy overheads. In addition to the energy required for <b>refreshing,</b> the background energy component, dissipated by DRAM peripheral circuitry and on-die DLL during <b>refresh</b> command, will become significant in future devices. We propose a set of techniques referred collectively as "coordinated refresh", in which scheduling of low power modes and <b>refresh</b> commands are coordinated so {{that most of the}} required <b>refreshes</b> are issued when the DRAM device is in the deepest low power "self refresh" (SR) mode. Our approach saves background power because the peripheral circuitry and clocks are turned off in the SR mode. Moreover, we observe that as the number of rows in DRAM scales, a large body of research on <b>refresh</b> reduction using retention time and access awareness will be rendered ineffective. Because these mechanisms require the memory controller to have fine-grained control over which regions of the memory are <b>refreshed,</b> while in JEDEC DDRx devices, a <b>refresh</b> operation is carried out via an "auto-refresh" command, which <b>refreshes</b> multiple rows from multiple banks simultaneously. The internal implementation of "auto-refresh" is completely opaque outside the DRAM [...] all the memory controller can do is tell the DRAM to <b>refresh</b> itself [...] the DRAM handles everything else, in particular determining which rows in which banks are to be <b>refreshed.</b> We propose a modification to the DRAM that extends its existing control-register access protocol to include the DRAM's internal <b>refresh</b> counter and also introduce a new "dummy refresh" command that skips <b>refresh</b> operations and simply increments the internal counter. We show that these modifications allow a memory controller to reduce as many <b>refreshes</b> as in prior work, while achieving significant energy and performance advantages by using auto-refresh most of the time...|$|R
40|$|Abstract—Ever-growing {{application}} data footprints demand faster main memory with larger capacity. DRAM {{has been the}} technology choice for main memory due to its low latency and high density. However, DRAM cells must be <b>refreshed</b> periodically to preserve their content. <b>Refresh</b> operations negatively affect performance and power. Traditionally, the performance and power overhead of <b>refresh</b> have been insignificant. But as the size and speed of DRAM chips continue to increase, <b>refresh</b> becomes a dominating factor of DRAM performance and power dissipation. In this paper, we conduct a comprehensive study of the issues related to <b>refresh</b> operations in modern DRAMs. Specifically, we describe the difference in <b>refresh</b> operations between modern synchronous DRAM and traditional asynchronous DRAM; the <b>refresh</b> modes and timings; and variations in data retention time. Moreover, we quantify <b>refresh</b> penalties versus device speed, size, and total memory capacity. We also categorize <b>refresh</b> mechanisms based on command granularity, and summarize <b>refresh</b> techniques proposed in research papers. Finally, based on our experiments and observations, we propose guidelines for mitigating DRAM <b>refresh</b> penalties...|$|R
5|$|She sailed for the East Coast of the United States on 21 December 1918, {{and arrived}} in port at Newport, Rhode Island on 10 January 1919. After brief repairs at port in New York City, New York and <b>refresher</b> {{training}} at Guantanamo Bay Naval Base, she cleared New York on 28 April and embarked as an escort {{during the first}} transatlantic seaplane flight, made by Curtiss NC-4 aircraft. Following this duty, she visited to the Azores, Gibraltar, Malta, and Constantinople before returning to New York on 5 June. After repairs, she steamed for San Diego, California, leaving New York on 17 September and arriving in San Diego on 12 October. Beginning on 19 November 1919, she was placed in reduced commission, operating only infrequently with Naval reservists of Reserve Division 10 until she was placed out of commission on 1 June 1922.|$|E
5|$|Ted Williams, {{whose mother}} was of Mexican {{heritage}} enlisted on May 22, 1942. Williams received his wings and commission in the Marine Corps on May 2, 1944. He was in Hawaii awaiting orders {{as a replacement}} pilot when the war ended. Williams returned to the States in December 1945 and was discharged from the Marines on January 28, 1946. On May 2, 1952, Williams was recalled to active duty due to the Korean War. After completing jet <b>refresher</b> training in the F9F Panther at Cherry Point, North Carolina, Williams joined VMF-311 in Korea. He flew 37 combat missions and had a narrow escape when he crash-landed a flak-damaged aircraft. Among the decorations he received was the Air Medal with two Gold Stars for meritorious achievement. Williams returned to the States and relieved from active duty with the rank of captain on July 28, 1953. Williams, who played professional baseball with the Boston Red Sox, was elected to baseball's Hall of Fame in 1966.|$|E
5|$|The Truman family boarded Missouri on 7 September 1947 {{to return}} to the United States and disembarked at Norfolk on 19 September. Her {{overhaul}} in New York—which lasted from 23 September to 10 March 1948—was followed by <b>refresher</b> training at Guantanamo Bay. The summer of 1948 was devoted to midshipman and reserve training cruises. Also in 1948, the Big Mo became the first battleship to host a helicopter detachment, operating two Sikorsky HO3S-1 machines for utility and rescue work. The battleship departed Norfolk on 1 November 1948 for a second three-week Arctic cold-weather training cruise to the Davis Strait. During the next two years, Missouri participated in Atlantic command exercises from the New England coast to the Caribbean, alternated with two midshipman summer training cruises. She was overhauled at Norfolk Naval Shipyard from 23 September 1949 to 17 January 1950.|$|E
40|$|DRAM cells must be <b>refreshed</b> (or rewritten) {{periodically}} to maintain data integrity, and as DRAM density grows, {{so does the}} <b>refresh</b> time and energy. Not all data need to be <b>refreshed</b> with the same frequency, though, and thus some <b>refresh</b> operations can safely be delayed. Tracking such in-formation allows the memory controller to reduce <b>refresh</b> costs by judiciously choosing when to <b>refresh</b> different rows. Solutions that store imprecise information miss opportu-nities to avoid unnecessary <b>refresh</b> operations, but the stor-age for tracking complete information scales with memory capacity. We therefore propose a flexible approach to re-fresh management that tracks complete <b>refresh</b> information within the DRAM itself, where it incurs negligible storage costs (0. 006 % of total capacity) and can be managed easily in hardware or software. Completely tracking multiple types of <b>refresh</b> information (e. g., row retention time and data va-lidity) maximizes <b>refresh</b> reduction and lets us choose the most effective <b>refresh</b> schemes. Our evaluations show that our approach saves 25 - 82 % of the total DRAM energy over prior refresh-reduction mechanisms. 1...|$|R
40|$|Capacitive DRAM cells require {{periodic}} <b>refreshing</b> {{to preserve}} data integrity. In JEDEC DDRx devices, a <b>refresh</b> operation {{is carried out}} via an auto-refresh command, which <b>refreshes</b> multiple rows from multiple banks simultaneously. The internal implementation of auto-refresh is completely opaque outside the DRAM—all the memory controller {{can do is to}} instruct the DRAM to <b>refresh</b> itself— the DRAM handles all else, in particular determining which rows in which banks are to be <b>refreshed.</b> This is in conflict with a large body of research on reducing the <b>refresh</b> overhead, in which the memory controller needs fine-grained control over which regions of the memory are <b>refreshed.</b> For example, prior works exploit the fact that a subset of DRAM rows can be <b>refreshed</b> at...|$|R
50|$|The row {{address of}} the row that will be <b>refreshed</b> next is {{maintained}} by external logic or a counter within the DRAM. A system that provides the row address (and the <b>refresh</b> command) does so to have greater control over when to <b>refresh</b> and which row to <b>refresh.</b> This is done to minimize conflicts with memory accesses, since such a system has both knowledge of the memory access patterns and the <b>refresh</b> requirements of the DRAM. When the row address is supplied by a counter within the DRAM, the system relinquishes control over which row is <b>refreshed</b> and only provides the <b>refresh</b> command. Some modern DRAMs are capable of self-refresh; no external logic is required to instruct the DRAM to <b>refresh</b> or to provide a row address.|$|R
