11|10000|Public
50|$|RSX-11B - small <b>real</b> <b>time</b> <b>executive</b> {{based on}} RSX-11C with support for disk I/O. To start up the system, first DOS-11 was booted, and then RSX-11B was started. RSX-11B {{programs}} used DOS-11 macros to perform disk I/O.|$|E
5000|$|The {{company was}} founded by Eli Alon and Dale Shipley (both from Intel) as Tolerant Systems in 1983 to build {{fault-tolerant}} computer systems {{based on the idea}} of [...] "shoe-box" [...] building blocks. The shoe box consisted of an OS processor, running a version of Unix called TX, and on which applications ran, and an I/O processor, running a <b>Real</b> <b>Time</b> <b>Executive,</b> developed by Tolerant, called RTE: both processors were 320xx processors. The system was marketed as the [...] "Eternity Series." ...|$|E
50|$|Mystery Mansion is {{the name}} of a text-based {{adventure}} game written in 1978-1981 by Bill Wolpert while at the Naval Undersea Warfare Center in Keyport, Washington. It originally ran only on the HP HP-1000 minicomputer on the RTE (<b>Real</b> <b>Time</b> <b>Executive)</b> operating system, but was later ported by persons unknown to run under MPE (Multiprocessing Executive) on the HP-3000. Although the development dates make it contemporaneous with other seminal interactive fiction games such as Adventure and Dungeon (which {{went on to become the}} Zork series from Infocom), it remains relatively unknown due to the specialized computers and operating systems on which it ran.|$|E
50|$|RSX-11A, C - small {{paper tape}} <b>real</b> <b>time</b> <b>executives.</b>|$|R
40|$|A {{discussion}} of three {{aspects of the}} introduction of <b>real</b> <b>time</b> computer <b>executive</b> control systems {{into the world of}} business, using as a frame of reference the experience acquired through the design and operation of a similar military system, SAGE, over the past several years. In particular, consideration is given to the relative effectiveness with which the system communicates with its environment, the necessary compromises in the definition of the rules by which the system will function, and certain difficulties in the concept of executive control systems which are in some sense adaptive. ...|$|R
40|$|This paper {{describes}} a fully developed and versatile PDP 11 -based averaging {{system for the}} neurophysiology laboratory. Data collection parameters can be varied with ease. A hardware pseudo-random timer is provided to control patient stimulation in cerebral evoked response measurements. Quantitative data analysis programs are provided. EMG contamination in cerebral evoked response measurements is minimised and information on the patient's habituation to the stimulus is automatically extracted. To find broad application the basic data collection program has been developed to run under either the disk operating system (DOS) or a <b>real</b> <b>time</b> sharing <b>executive</b> (RSX 11 D) ...|$|R
40|$|A {{three phase}} {{language}} compiler is described which produces IBM 360 / 370 compatible object modules {{and a set}} of simulation tables to aid in run time verification. A link edit step augments the standard OS linkage editor. A comprehensive run time system and library provide the HAL/S operating environment, error handling, a pseudo <b>real</b> <b>time</b> <b>executive,</b> and an extensive set of mathematical, conversion, I/O, and diagnostic routines. The specifications of the information flow and content for this system are also considered...|$|E
40|$|Abstract. Xception is an {{automated}} and comprehensive fault injection and robustness testing environment that enables accurate and flexible V&V (verification & validation) {{and evaluation of}} mission and business critical computer systems and computer components, with particular emphasis to software components. In this paper {{we focus on the}} new robustness testing features of Xception and illustrate them with a concrete example of robustness testing of the <b>Real</b> <b>Time</b> <b>Executive</b> for Multiprocessor Systems (RTEMS) performed under a European Space Agency (ESA) contract. To the best of our knowledge, {{this is the first time}} that robustness testing results for this real time operating system are presented. The testing revealed a significant number of critical flaws in RTEMS 4. 5. 0 and shows the effectiveness of Xception toolset. 1...|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThis thesis develops a prototyping facility to support accurate exploratory modeling {{of the temporal}} structure of real time, concurrent software systems on a parallel processor architecture. The hierarchical bus parallel processor architecture, call the Real Time Cluster Star (RTC*), is the hardware on which an executive operating system, the Extended Multi-COmputer <b>Real</b> <b>Time</b> <b>EXecutive</b> (EMCORTEX), provides the capability for concurrent real time processing. The prototyping facility is a tool to aid the system designer to assess the tasking structure and the resulting temporal behavior of concurrent multiprocess systems. This facility allows an early modeling of a proposed real time system so that system's design flaws can be discovered and corrected before the system is fully developed. [URL] United States Nav...|$|E
40|$|Includes bibliographical references. The Geosonde radar system, {{developed}} {{for use in}} bore holes, includes a data acquisition system. Development is currently being conducted by the Radar Remote Sensing Group at the University of Cape Town and Stellenbosch University. This thesis describes {{the development of a}} <b>real</b> <b>time</b> operating system and an overall upgrade of basic interfaces to the Geosonde system. The current system employs the use of an embedded MS-DOS operating system and supports basic user control and data exporting over a serial line. The objectives of this thesis are to perform major upgrades on the system by introducing an XML based form of network control and NTP synchronization of the processing board. As a result, an investigation into the adequacy of MS-DOS as a target operating system, bearing in mind the intended upgrades, was carried out. Taking into consideration the failings of MS-DOS as far as the system requirements are concerned, an investigation into available <b>real</b> <b>time</b> <b>executives</b> was conducted and a decision based on the requirements was made. Embedded GNU/Linux was chosen as the target software platform. The software design of the application shows all the necessary design issues considered. The implementation phase of the thesis describes all the tools necessary to implement the embedded Linux system and all the components necessary {{to meet the needs of}} the Geosonde system. The network and serial interfaces were tested and shown to be fully functional. The XML based control in particular offers a more ﬂexible and more platform independent solution than the serial interface...|$|R
40|$|The {{processing}} subsystem of a {{land based}} radar polarimeter was designed and constructed. This subsystem is labeled the remote data acquisition and distribution system (RDADS). The radar polarimeter, an experimental remote sensor, incorporates the RDADS to control all operations of the sensor. The RDADS uses industrial standard components including an 8 -bit microprocessor based single board computer, analog input/output boards, a {{dynamic random access memory}} board, and power supplis. A high-speed digital electronics board was specially designed and constructed to control range-gating for the radar. A complete system of software programs was developed to operate the RDADS. The software uses a powerful <b>real</b> <b>time,</b> multi-tasking, <b>executive</b> package as an operating system. The hardware and software used in the RDADS are detailed. Future system improvements are recommended...|$|R
40|$|Ease the <b>real</b> <b>time</b> {{multitasking}} <b>executive</b> described m {{this thesis}} {{is designed for}} embedded systems with particular emphasis on DSP motor control applications. Ease provides an application software interface to the underlying hardware and encourages an object oriented programming approach which inherently enhances software integrity, maintainability and dependability in the potentially chaotic <b>real</b> <b>time</b> environment. Its focus is to tackle the undesirable aspects of <b>real</b> <b>time</b> programming and device dependent issues thereby allowing the application programmer to concentrate more on the application. The multitasking aspect of the executive means application tasks can be generated with ease which aids development, evolution or enhancement of an application. The multitasking aspect also facilitates tasks dedicated to on-line reconfiguration, error handling and fault correction or shutdown procedures. The software quality of a <b>real</b> <b>time</b> application running on the Ease platform is paid for by {{a small percentage of}} CPU processing power and a larger response time to external events than an unstructured monolithic interrupt driven system. During the course of research, development and prototyping of Ease, a number of suitable sample applications have been explored to test and optimise its functionality. The most notable of these is the control system for the motor simulation of a shock absorber with an active disturbance load. This was implemented as seven concurrent tasks in a uniprocessor DSP system, running Ease...|$|R
40|$|In {{this paper}} we present an {{interactive}} tool for complex systems modeling, analysis and simulation using Petri Nets and their temporal extensions. The proposed tool {{is based on}} user real time interaction and multiprogramming. Three user interactive steps are allowed: editing, analyzing and simulation. To introduce real time user interaction the tool uses a set of functions that allows to edit and simulate temporal behavior of the Petri net, i. e., programmable places, counters, timing and statistical routines. It executes a non preemptive Round Robin escalonator, that uses randomic functions, and implements a <b>real</b> <b>time</b> <b>executive,</b> consisting in a multiprocessing system. The tool {{is based on the}} concepts given by Zhou and Dicesare[9] for manufacturing systems, {{that can be used to}} many kinds of complex systems. Some other properties, as transition firing temporal dependency, resources addition, subtraction, enabling and disabling operations, and deterministic or sthocastic task time dura [...] ...|$|E
40|$|A new {{multiprocessor}} {{data acquisition}} system was developed for the existing Airborne Oceanographic Lidar (AOL). This implementation simultaneously utilizes five single board 68010 microcomputers, the UNIX system V operating system, and the <b>real</b> <b>time</b> <b>executive</b> VRTX. The original {{data acquisition system}} was implemented on a Hewlett Packard HP 21 -MX 16 bit minicomputer using a multi-tasking real time operating system and a mixture of assembly and FORTRAN languages. The present collection of data sources produce data at widely varied rates and require varied amounts of burdensome real time processing and formatting. It was decided to replace the aging HP 21 -MX minicomputer with a multiprocessor system. A new and flexible recording format was devised and implemented to accommodate the constantly changing sensor configuration. A central feature of this data system is the minimization of non-remote sensing bus traffic. Therefore, it is highly desirable that each micro be capable of functioning {{as much as possible}} on-card or via private peripherals. The bus is used primarily for the transfer of remote sensing data to or from the buffer queue...|$|E
40|$|The German Aerospace Center (DLR) {{provides}} various key {{contributions to}} the Swedish led PRISMA formation flying mission. These comprise a redundant GPS hardware architecture for the two spacecraft, a real-time navigation software to support formation flying during all phases, and dedicated experiments for absolute and relative orbit control. This paper addresses the testing and validation of the GPS-based flight software as a standalone unit prior to its full integration into the spacecraft onboard computer. Thank to the model based PRISMA onboard software design, the navigation software can be executed on different platforms in a fully consistent manner. As illustrated in the paper, this allows a seamless transition between offline simulations using GPS flight data from the Gravity Recovery and Climate Experiment (GRACE) and real-time hardware-in-loop tests comprising real Phoenix GPS receivers and a 2 x 12 channels Spirent GSS 7700 GPS signal simulator. Furthermore the complete application is ported to a <b>Real</b> <b>Time</b> <b>Executive</b> for Multiprocessor Systems (RTEMS) environment in a LEON- 3 board, representative of the PRISMA onboard computer. Overall the test campaign shows the compliance of the navigation software to the challenging requirements of the PRISMA mission and paves {{the way for the}} PRISMA system level tests with hardware-in-the-loop...|$|E
40|$|In {{a complex}} {{business}} environment, firms frequently have to manage strategic dualities—pairs of imperatives that are equally important {{but to some}} degree in conflict with one another. While there is a sizable empirical and theoretical literature in this area, research that seeks to understand how firms manage strategic dualities in practice is underdeveloped. We address this gap in knowledge through a detailed longitudinal analysis of one firm, Softcorp, conducted in <b>real</b> <b>time.</b> Softcorp’s <b>executives</b> were faced with the well-known global integration/local responsiveness duality, which they sought to resolve by creating an unusual Dual Headquarters that oriented employees across the firm toward a dual focus on Europe and Asia. We describe the sequence of changes (which we label counterweight, hybrid engine, and flywheel) that allowed Softcorp to successfully achieve its dual orientation, and we describe how these findings can potentially contribute to several bodies of theory (paradox, ambidexterity, and the attention-based view of the firm) and also to management practice...|$|R
5000|$|Aalto EE {{was ranked}} 58th at the Financial <b>Times</b> <b>Executive</b> Education - Customized rankings [...] and 43rd in Financial <b>Times</b> <b>Executive</b> Education - Open {{programs}} in 2015.|$|R
40|$|<b>Real</b> <b>time</b> search <b>Real</b> <b>time</b> content Collecta dexed only {{a limited}} amount of <b>real</b> <b>time</b> content, most notably from blogs. However, search engine {{companies}} and others are realizing that <b>real</b> <b>time</b> content from hundreds of thousands or more sources can have significant societal, cultural, and commercial implications. Google and other major search engines are experimenting with methods to archive <b>real</b> <b>time</b> content (Krazit, 2010). Major news organizations routinely rely on th...|$|R
40|$|Drawing on Intentional Change Theory (Boyatzis, 2006), {{this study}} {{examined}} the differential impact of inducing coaching recipients’ vision/positive emotion versus improvement needs/negative emotion during <b>real</b> <b>time</b> <b>executive</b> coaching sessions. A core aim {{of the study was to}} empirically test two central Intentional Change Theory (ICT) propositions on the effects of using the coached person’s Positive Emotional Attractor (vision/PEA) versus Negative Emotional Attractor (improvement needs/NEA) as the anchoring framework of a onetime, one-on-one coaching session on appraisal of 360 -degree feedback and discussion of possible change goals. Eighteen coaching recipients were randomly assigned to two coaching conditions, the coaching to vision/PEA condition and the coaching to improvement needs/NEA condition. Two main hypotheses were tested. Hypothesis 1 predicted that participants in the vision/PEA condition would show higher levels of positive emotion during appraisal of 360 -degree feedback results and discussion of change goals than recipients in the improvement needs/NEA condition. Hypothesis 2 predicted that vision/PEA participants would show lower levels of stress immediately after the coaching session than improvement needs/NEA participants. Findings showed that coaching to vision/the PEA fostered significantly lower levels of expressed negative emotion and anger during appraisal of 360 feedback results as compared to coaching to improvements needs/the NEA. Vision-focused coaching also fostered significantly greater exploration of personal passions and future desires, and more positive engagement during 360 -degree feedback appraisal. No significant differences between the two conditions were found in emotional processing during discussion of change goals or levels of stress immediately after the coaching session. Current findings suggest that vision/PEA arousal versus improvement needs/NEA arousal impact the coaching process in quite different ways; that the coach’...|$|E
40|$|To {{create a}} “win-win-win ” {{proposition}} for insurers, teens and their parents, the industry needs a technology-driven, safety-focused solution {{that addresses the}} requirements of all parties, monitors teen driving and reduces losses — in <b>real</b> <b>time.</b> <b>Executive</b> Summary Teen driving {{is a major concern}} for both fami-lies and the insurance industry, and the catalyst behind numerous awareness programs and cor-rective steps. While it is encouraging to know that since 2005, deaths from automobile accidents involving teens have dropped 47 % (from 5, 889 to 3, 150 in 2011), 1 errors traced to teenage driv-ers were identified as the cause of 75 %-plus of the 3, 150 deaths reported in 2011 — the last year reliable data was available. This is a troubling sta-tistic that calls {{for the development of a}} more comprehensive solution to help safeguard young drivers and their passengers. With the evolution of the SMAC StackTM (social, mobile, analytics and cloud), insurers have the opportunity and the ability to devise a more com-pelling solution focused on safe driving for teens. In this paper, we examine the needs of teen driv-ers, their parents and their insurers — those who have the most to gain from a value-centered and highly effective safe-driving program. We will also detail a SMAC-based solution tailored to this group of stakeholders. Key elements of the solution include: • A smart mobile app that appeals to teens; provides driver scores that can be compared with those of peers; monitors driving; and offers safe-driving tips for young people. • Software that sends real-time alerts to parents concerning their teen’s faulty driving or breach of any governing rules (speeding, driving outside pre-defined geographic areas and roads, etc.). • Capabilities that help insurers reduce losses by utilizing meaningful data from telematics devices across networks. We will also introduce GeoLocus, Cognizant’s advanced telematics solution, that insurers can use to build an all-inclusive safe-driving program for young people and their families...|$|E
40|$|<b>Real</b> <b>time</b> {{systems have}} a natural {{executing}} policy of urgency. However, <b>real</b> <b>time</b> process algebras of nowadays cannot specify this basic executing policy which limits their expressiveness. There is only one default policy called “maximal progress” in process algebras which {{is not enough to}} specify the behaviors of <b>real</b> <b>time</b> systems. Based on this, we propose a <b>real</b> <b>time</b> process algebra with urgency executing policy which can specify the behaviors of <b>real</b> <b>time</b> systems. </p...|$|R
3000|$|A <b>real</b> <b>time</b> {{system is}} a {{reactive}} system, which responds to an input within a definite amount of time (Olderog and Dierks 2008). A <b>real</b> <b>time</b> system can be a safety critical system, where the <b>real</b> <b>time</b> constraints are extracted from the safety requirements of that system. A <b>real</b> <b>time</b> system has the following properties: [...]...|$|R
40|$|AbstractConcerning {{the power}} of {{one-dimensional}} cellular automata recognizers, Ibarra and Jiang have proved that <b>real</b> <b>time</b> cellular automata (CA) and linear time CA are equivalent {{if and only if}} <b>real</b> <b>time</b> CA is closed under reverse. In this paper we investigate the question of equality of <b>real</b> <b>time</b> CA and linear time CA with respect to the operations of concatenation and cycle. In particular, we prove that if <b>real</b> <b>time</b> CA is closed under concatenation then <b>real</b> <b>time</b> CA is as powerful as linear time CA on the unary languages. We also prove that the question of knowing whether <b>real</b> <b>time</b> CA is as powerful than linear time CA is equivalent {{to the question of whether}} <b>real</b> <b>time</b> CA is closed under cycle. Moreover, in the case of two-dimensional CA recognizers, we investigate how restricted communication reduces the computational power. In particular, we show that <b>real</b> <b>time</b> CA and linear time CA with restricted variants of Moore and Von Neumann neighborhoods are not closed under rotation. Furthermore, they are not equivalent to <b>real</b> <b>time</b> CA with Moore or Von Neumann neighborhoods...|$|R
40|$|The {{types of}} control that are {{important}} for <b>real</b> <b>time</b> task scheduling are discussed. Some closely related <b>real</b> <b>time</b> issues are mentioned and major committee and research activities {{in this area are}} delineated. Although there are some problems with Ada and its <b>real</b> <b>time</b> task scheduling, Ada presents fewer than any known alternative. Ada was designed for the domain of <b>real</b> <b>time</b> embedded systems, but Ada compilers may not contain a level of task scheduling support that is adequate for all <b>real</b> <b>time</b> applications. The question addressed is which implementations of Ada's task scheduling are adequate for effective <b>real</b> <b>time</b> systems for NASA applications...|$|R
5000|$|EMBA ranked 31th {{globally}} (Financial <b>Times</b> <b>Executive</b> MBA Ranking 2016) ...|$|R
40|$|Modern <b>Real</b> <b>Time</b> Operating Systems require {{reducing}} computational costs {{even though}} the microprocessors become more powerful each day. It is usual that <b>Real</b> <b>Time</b> Operating Systems for embedded systems have advance features to administrate {{the resources of the}} applications that they support. In order to guarantee either the schedulability of the system or the schedulability of a new task in a dynamic <b>Real</b> <b>Time</b> System, it is necessary to know the Worst Case Response <b>Time</b> of the <b>Real</b> <b>Time</b> tasks during runtime. In this paper a reduced computational cost algorithm is proposed to determine the Worst Case Response <b>Time</b> of <b>Real</b> <b>Time</b> tasks. Modern <b>Real</b> <b>Time</b> Operating Systems require reducing computational costs {{even though the}} microprocessors become more powerful each day. It is usual that <b>Real</b> <b>Time</b> Operating Systems for embedded systems have advance features to administrate the resources of the applications that they support. In order to guarantee either the schedulability of the system or the schedulability of a new task in a dynamic <b>Real</b> <b>Time</b> System, it is necessary to know the Worst Case Response <b>Time</b> of the <b>Real</b> <b>Time</b> tasks during runtime. In this paper a reduced computational cost algorithm is proposed to determine the Worst Case Response <b>Time</b> of <b>Real</b> <b>Time</b> tasks. Facultad de Informátic...|$|R
5000|$|Modern billing {{systems are}} {{convergent}} (they can handle <b>real</b> <b>time</b> and batch rating {{on the same}} platform at the same time). Re-rating is not possible for <b>real</b> <b>time</b> events, because they {{would no longer be}} <b>real</b> <b>time</b> by definition ...|$|R
5000|$|Norman Starkey, at that <b>time</b> <b>Executive</b> Director of Author Services Inc.|$|R
50|$|There are 36 <b>real</b> <b>time</b> {{priority}} levels {{available by}} API for applications to use. The user and account {{must have the}} privilege to use <b>real</b> <b>time</b> priorities. It {{is up to the}} site to control how their applications use the priority levels. <b>Real</b> <b>time</b> priorities totally dominate all lower priorities so it’s quite possible for a misbehaved <b>real</b> <b>time</b> program to tie up one or more processors.|$|R
40|$|In this {{research}} work a design framework model for <b>real</b> <b>time</b> environment applications driven by novel design metrics has been proposed. Objective {{is to use}} these design metrics for measuring the design of <b>real</b> <b>time</b> environment applications. Measurement at the design level can save effort and cost. The existing design methodologies for <b>real</b> <b>time</b> systems are lacking with this measurement aspect. In {{this research}} work measurement has been introduced {{in the form of}} metrics for the design methodology of the <b>real</b> <b>time</b> system. The metrics are validated and the results are satisfactory. The case study has shown that using these metrics at the design level can reduce design errors for the <b>real</b> <b>time</b> applications. The further research can be carried out for development and implementation of <b>real</b> <b>time</b> application using the proposed <b>real</b> <b>time</b> application design framework model and the design metrics...|$|R
5000|$|<b>Real</b> <b>Time</b> Data [...] - [...] {{the ability}} to see in <b>real</b> <b>time,</b> {{visitors}} browsing your website ...|$|R
5000|$|MapKing <b>Real</b> <b>Time</b> Traffic for Singapore - {{the first}} <b>real</b> <b>time</b> traffic GPS {{navigation}} software for Singapore ...|$|R
500|$|John Mortimer, {{a former}} New York <b>Times</b> <b>executive</b> {{and his wife}} Hilda ...|$|R
5000|$|... 65% of the <b>time,</b> <b>executives</b> don't {{receive the}} data they need (fit) ...|$|R
50|$|<b>Real</b> <b>time</b> {{activities}} have an unlimited processor quantum and run without switching unless {{interrupted by a}} higher priority <b>real</b> <b>time</b> activity or High Exec activity. <b>Real</b> <b>Time</b> activities are given control of any available processor that is running something of lower priority. Interrupts are sent between processors when necessary to ensure immediate availability. <b>Real</b> <b>time</b> is used by customers to fly missiles, run simulators, and other functions that require immediate response.|$|R
40|$|What are {{real-time}} systems? Instead {{of trying}} to define them, {{we can think of}} <b>real</b> <b>time</b> systems as those that react to external stimuli in a timely and reliable fashion. <b>Real</b> <b>time</b> systems are often used to solve real world problems. Some examples of <b>real</b> <b>time</b> systems include air traffic control, automatic pilots, unmanned robots etc. Current research in <b>real</b> <b>time</b> systems lags far behind that in other areas. This is due to a largely false notion of what <b>real</b> <b>time</b> systems are and what they involve. I begin this survey by describing some of the characteristics of <b>real</b> <b>time</b> systems. Then I will dispel some of the misconceptions and make an argument for the importance of further research in the area. Next I will present some formal methods for specifying and verifying <b>real</b> <b>time</b> systems. Most of the current <b>real</b> <b>time</b> systems have been written in conventional programming languages which are not very suitable for the task and do not provide control over timing constraints. Most of the real tim [...] ...|$|R
