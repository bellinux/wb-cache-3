9|34|Public
50|$|Unlike CGI (and {{most other}} web {{application}} environments), mod_perl provides complete {{access to the}} Apache API, allowing programmers to write handlers for all phases in the Apache <b>request</b> <b>cycle,</b> manipulate Apache's internal tables and state mechanisms, share data between Apache processes or threads, alter or extend the Apache configuration file parser, and add Perl code to the configuration file itself, among other things.|$|E
50|$|Traditional model-view-controller (MVC) {{frameworks}} work {{in terms}} of whole requests and whole pages. In each <b>request</b> <b>cycle,</b> the incoming request is mapped to a method on a controller object, which then generates the outgoing response in its entirety, usually by pulling data out of a model to populate a view written in specialized template markup. This keeps the application's flow-of-control simple and clear, but can make code reuse in the controller difficult.|$|E
50|$|Each {{component}} {{is backed by}} its own model, which represents {{the state of the}} component. The framework does not have knowledge of how components interact with their models, which are treated as opaque objects automatically serialized and persisted between requests. More complex models, however, may be made detachable and provide hooks to arrange their own storage and restoration {{at the beginning and end}} of each <b>request</b> <b>cycle.</b> Wicket does not mandate any particular object-persistence or ORM layer, so applications often use some combination of Hibernate objects, EJBs or POJOs as models.|$|E
3000|$|A set {{of tests}} were {{performed}} {{using the following}} default values: 100 instantiation requests, 8 processors, window size of 10 <b>requests,</b> generation <b>cycles</b> of 10 and population size of 10. As instantiation requests' length (t [...]...|$|R
30|$|Hypermap cannot process all of {{the user}} {{requests}} synchronously because some require more time than is ideal for the http <b>request</b> response <b>cycle.</b> A task queue is needed to process asynchronously the tasks generated by these requests. Typical tasks are the check of a service or layer and the synchronization of the layer information between the relational database and the search engine.|$|R
50|$|In 2009 the {{floodlights}} {{within the}} fountain were replaced with LED lighting. Seventeen different hues {{can be seen}} as the colors rotate at night, and specific color <b>cycle</b> <b>requests</b> may be displayed during special events.|$|R
5000|$|Websites {{that are}} {{efficient}} minimize {{the number of}} requests required to render an entire page by minifying (reducing the amount of code and packing smaller pieces of code into bundles, without reducing its ability to function) resources such as images and scripts. However, minification is not necessarily convenient nor efficient and may still require separate HTTP connections to get the page and the minified resources. HTTP/2 allows the server to [...] "push" [...] content, that is, to respond with data for more queries than the client requested. This allows the server to supply data it knows a web browser will need to render a web page, without waiting for the browser to examine the first response, and without the overhead of an additional <b>request</b> <b>cycle.</b>|$|E
40|$|A modern {{competitive}} environment requires rapid and effective responses to varying production demands with shorter life cycles. A feasible solution {{to cope with}} such unpredictable situations is to introduce an automated manufacturing system characterized by high flexibility, autonomy and cooperation. Much {{research has been done}} on negotiation-based scheduling and control under the distributed control architecture due to its operational flexibility and scalability. Despite many advantages, the probability of the system stalling at a deadlock state is high. Specifically, it is difficult to detect impending part flow deadlocks within the system. A system request network model is defined here to analyse various deadlock situations. Request cycles are then identified by a virtual part flow control mechanism. No <b>request</b> <b>cycle</b> in the system request network represents 'no system deadlock'. For any <b>request</b> <b>cycle,</b> a deadlock analysis is performed. If any <b>request</b> <b>cycle</b> exists that represents either a part flow deadlock or an impending part flow deadlock, then the system will be deadlocked. The proposed model can analyse all types of impending part flow deadlocks. Furthermore, it is more efficient through the reduction of search space, is applicable to various configurations and is less restrictive in dynamic shop floor control. close 1...|$|E
40|$|Web servers {{often become}} {{overloaded}} with irregular surges in web traffic. Several techniques have been explored {{to cope with}} these overloads such as distributing load throughout different servers. This thesis presents Pipelined Apache HTTP Server, {{a modified version of}} the Apache Software Foundation’s HTTP Server that utilizes a pipelined execution of Apache’s <b>request</b> <b>cycle.</b> We discuss Apache’s original architecture, the modifications necessary for implementation of pipelined execution, and analyze its run time. Ultimately, we hoped to increase throughput of Apache but fall short because of unbalanced request phases and pipelining overhead...|$|E
50|$|Tracing {{collectors}} are {{so called}} because they trace through the working set of memory. These garbage collectors perform collection in cycles. It {{is common for}} cycles to be triggered when {{there is not enough}} free memory for the memory manager to satisfy an allocation <b>request.</b> But <b>cycles</b> can often be requested by the mutator directly or run on a time schedule. The original method involves a naïve mark-and-sweep in which the entire memory set is touched several times.|$|R
5000|$|No operation; no request. At AGP 1× speed, {{this may}} be sent as a single byte and a {{following}} 16-bit side-band <b>request</b> started one <b>cycle</b> later. At AGP 2× and higher speeds, all side-band requests, including this NOP, are 16 bits long.|$|R
50|$|Reasonable Server Faces (RSF) is an {{open source}} web {{programming}} framework written in Java, developed at the Centre for Applied Research in Educational Technologies (CARET) at the University of Cambridge. RSF is built on the Spring framework, and allows views to be templated in pure XHTML, {{as well as other}} XML dialects. RSF takes responsibility for the entire <b>request</b> processing <b>cycle</b> through HTTP <b>request</b> decoding, maintaining a bean model, invoking actions, directing errors, interpreting results and rendering views. A principal aim of RSF is to facilitate designs where zero server state is held in between requests.|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedReissued 3 Mar 2015 with corrected degreeTablet computing {{has the potential}} to reshape the scope of situational awareness. This is because application developers have derived uses for tablet devices that the original inventors did not intend and could not have imagined. One such application is to provide the ability for the warfighter to directly request aerial images from overhead assets, including unmanned aerial vehicles or satellites. Advancements in mobile technology and network connectivity have helped to overcome the challenges of information delivery, but there remains the challenge of real-time information. This thesis examines the concept of tablet-based information requests for real-time satellite tasking. As a proof-of-concept, a tablet-based application is developed that enables the user to task a satellite system by interacting with a map. Requests are sent and processed by a server application and are then routed to the appropriate asset. Real-time response to the request is emulated using a detailed simulation model of a control moment gyroscope actuated spacecraft. Simulated images and spacecraft attitude errors are used to mimic the data collection process. This information is uploaded to the server for retrieval by the tablet application, thereby completing the <b>request</b> <b>cycle</b> and demonstrating the feasibility of remote satellite tasking using a tablet computer...|$|E
40|$|International audienceWe {{study the}} problem of {{designing}} a survivable WDM network based on covering the communication requests with subnetworks that are protected independently from each other. We consider here the case when the physical network is $T(n) $, a torus of size $n$ by $n$, the subnetworks are cycles and the communication scheme is all-to-all or total exchange (where all pairs of vertices communicate). We will represent the communication requests by a logical graph: a complete graph for the scheme of all-to-all. This problem can be modeled as follows: find a cycle partition or covering of the request edges of $K_{n^ 2 }$, such that for each cycle in the partition, its request edges can be routed in the physical network $T(n) $ {{by a set of}} vertex disjoint paths (equivalently, the routings with the <b>request</b> <b>cycle</b> form an elementary cycle in $T(n) $). Let the load of an edge of the WDM network be the number of paths associated with the requests using the edge. The cost of the network depends on the total load (the cost of transmission) and the maximum load (the cost of equipment). To minimize these costs, we will search for an optimal (or quasi optimal) routing satisfying the following two conditions: (a) each request edge is routed by a shortest path over $T(n) $, and (b) the load of each physical edge resulting from the routing of all cycles of $S$ is uniform or quasi uniform. In this paper, we find a covering or partition of the request edges of $K_{n^ 2 }$ into cycles with an associated optimal or quasi optimal routing such that either (1) the number of cycles of the covering is minimum, or (2) the cycles have size 3 or 4...|$|E
30|$|The {{results from}} the three {{scenarios}} confirm that {{in the event of}} data requests predominantly going to publicly hosted content, which all active users are free to access the overall cache performance is independent of load in accord with the theoretical approximation. Another important observation from the graphs in Figure 8 is that for the modelled cache performances of 25 and 50 %, the theoretical and measurement results are very similar, with the practical results marginally better than the theoretical estimates in some places for cache hit ratio of 25 %. As the size of the local cache is increased to 75 % of the remote storage, the practical performance also goes even though it stays within the 70 % range. We attribute the lower values of cache hit ratios in the measurements at high cache capacity to a further need for calibrating the number of user <b>request</b> <b>cycles,</b> M, that governs the duration for the measurements to capture the events so that the impact data of the requests to all S files is accurately reflected by practical observations. Despite the discrepancies in the modelled and practical results shown in the graphs, particularly for higher values of hit ratios, the theoretical approximations of cache performance (in terms the respective sizes of local cache and remote storage capacities) is a reliable guide of cache performance for file requests that are spread across publicly available content.|$|R
50|$|Nagare uses a {{component}} model inspired by Seaside, and, like Seaside, Nagare uses continuations {{to provide a}} framework where the HTTP connectionless <b>request</b> / response <b>cycle</b> doesn't break the normal control flow of the application. This allows web applications to be developed {{in much the same}} way as desktop applications, for rapid application development. However, Nagare is written in Python rather than Smalltalk.|$|R
3000|$|... where x {{is number}} of cycle, and f(x) denotes the {{changes of the}} {{bandwidth}} <b>request</b> for x <b>cycle.</b> BWRequestχ- 1 and BWAllocatedχ- 1 are the bandwidth request and bandwidth allocation for x- 1 cycle, respectively. However, the f(x) {{is the amount of}} bandwidth request for the first cycle of bandwidth granting process. FPBRstatus indicates the computed factor point of BR status submodule while maxFP is the maximum factor point with 0.25 as its value.|$|R
40|$|Currently {{there is}} $ 29, 573, 516 {{available}} in Business Ready Communities funds. Total funding <b>requests</b> for this <b>cycle</b> is $ 24, 248, 002. In May of 2009, the Board voted {{to set aside}} $ 4 M for child care projects {{for the remainder of}} this current biennium and make recommendation on these projects at the December 2009 WBC Board meeting. Two grant requests were received, of which one was withdrawn. The single request at this time is $ 2, 983, 102...|$|R
40|$|We {{present an}} analog VLSI address-event {{transceiver}} containing {{an array of}} integrate-and-fire neurons and a scheme for implementing a reconfigurable neural network with probabilistic synapses. Neural “spikes ” are transmitted through address-event representation—the address of the sending neuron is communicated through an asynchronous <b>request</b> and acknowledgment <b>cycle.</b> Continuousvalued synaptic weights are implemented by probabilistically routing address events. Results from a prototype system with 1, 024 analog VLSI integrate-and-fire neurons, each with up to 128 probabilistic synapses, demonstrate these concepts in an image processing application. 1...|$|R
40|$|The Systems Analysis Campaign {{under the}} Global Nuclear Energy Partnership (GNEP) has <b>requested</b> the fuel <b>cycle</b> {{analysis}} {{group at the}} Idaho National Laboratory (INL) to analyze and provide isotopic data for four scenarios in which different strategies for Minor Actinides (MA) management are investigated. A 1000 MWth commercial-scale Sodium Fast Reactor (SFR) design {{was selected as the}} baseline in this scenario study. Two transuranic (TRU) conversion ratios, defined as the ratio of the amount of TRU produced over the TRU destroyed in the reactor core, along with different fuel-types were investigated...|$|R
40|$|Due to {{copyright}} restrictions, {{the access}} to {{the full text of}} this article is only available via subscription. Priority encoders and arbiters usually drive multiplexers (muxes). Latency optimization of priority encoders and multiplexer trees has usually been handled separately in the literature. However, in some applications with circular data dependencies, the combined latency of the arbiter and muxing needs to be optimized. Moreover, there is an ever growing need for throughput. This requires switches that pick and multiplex more than one <b>request</b> per <b>cycle.</b> In this paper, we propose a family of circuit topologies where priority encoding picks one or two requests and takes place in parallel with muxing. We first present a scalable logic circuit for the 1 -pick fixed-priority muxing problem and then extend it to the 2 -pick problem. We compare the proposed architecture to its counterpart that does only priority encoding using Synopsis Design Compiler with ARM-Artisan TSMC 180 nm worst-case standard library. The results show that most of the priority encoding latency is hidden in the proposed circuit topology...|$|R
40|$|In {{this paper}} we propose a cycle {{redundancy}} technique that provides optical networks almost fault-tolerant point-to-point and multipoint-to-multipoint communications. The technique more importantly is shown to approximately halve the necessary light-trail resources in the network while maintaining the fault-tolerance and dependability expected from cycle-based routing. For efficiency and distributed control, it is common in distributed systems and algorithms to group nodes into intersecting sets referred to as quorum sets. Optimal communication quorum sets forming optical cycles based on light-trails have been shown to flexibly and efficiently route both point-to-point and multipoint-to-multipoint traffic <b>requests.</b> Commonly <b>cycle</b> routing techniques will use pairs of cycles to achieve both routing and fault-tolerance, which uses substantial resources and creates the potential for underutilization. Instead, we intentionally utilize redundancy within the quorum cycles for fault-tolerance such that almost every point-to-point communication occurs in more than one cycle. The result is a set of cycles with 96. 60 % - 99. 37 % fault coverage, while using 42. 9 % - 47. 18 % fewer resources. Comment: 17 th International Conference on Transparent Optical Networks (ICTON), 5 - 9 July 2015. arXiv admin note: substantial text overlap with arXiv: 1608. 05172, arXiv: 1608. 0516...|$|R
40|$|The {{performance}} of the data memory hierarchy is extremely important in current and near future high performance superscalar microprocessors. To address the memory gap, computer designers implement caches to reduce the high memory latencies that are observed in the processor. Due to the ever increasing instruction window sizes and issue widths in new microprocessor designs, designers will need to implement multiported caches {{in order to be}} able service multiple memory <b>requests</b> per clock <b>cycle.</b> Several studies have been conducted in previous work dealing with the performance in terms of Instructions Per Cycle (IPC) for such cache designs. However, little is known about the access time, the energy consumption and the required chip area for multiported caches. This paper quantifies these aspects for several multiported cache designs. 1...|$|R
40|$|International audienceGrids are {{becoming}} more and more dynamic, running parallel applications on large scale and heterogeneous resources. Explicitly stopping a whole distributed application is becoming increasingly difficult. In that context, there is a strong need to free resources a soon as they become useless, leading to automatic termination, using distributed garbage collecting techniques. We propose in this paper a new distributed garbage collector for active objects taking into account cycles but with a complexity similar to the distributed garbage collector of Java/RMI. The algorithm is based on a different approach to collect acyclic and cyclic garbage. On one hand, acyclic garbage is collected by knowing the immediate referencers of an active object and detecting the lack of these referencers. This behavior with respect to acyclic garbage is common to the distributed garbage collector of RMI. On the other hand, cyclic garbage is detected by considering the recursive closure of all the referencers of an active object and finding cycles of active objects waiting for <b>requests.</b> These <b>cycles</b> are found by letting idle active objects make a consensus on a common final activity. The algorithm is fully distributed and has been implemented with no modifications to the local garbage collector. Benchmarks have shown the scalability of the algorithm in a grid context...|$|R
40|$|In this paper, {{we propose}} a greedy cycle {{direction}} heuristic {{to improve the}} generalized R redundancy quorum cycle technique. When applied using only single cycles rather than the standard paired cycles, the generalized R redundancy technique {{has been shown to}} almost halve the necessary light-trail resources in the network. Our greedy heuristic improves this cycle-based routing technique's fault-tolerance and dependability. For efficiency and distributed control, it is common in distributed systems and algorithms to group nodes into intersecting sets referred to as quorum sets. Optimal communication quorum sets forming optical cycles based on light-trails have been shown to flexibly and efficiently route both point-to-point and multipoint-to-multipoint traffic <b>requests.</b> Commonly <b>cycle</b> routing techniques will use pairs of cycles to achieve both routing and fault-tolerance, which uses substantial resources and creates the potential for underutilization. Instead, we use a single cycle and intentionally utilize R redundancy within the quorum cycles such that every point-to-point communication pairs occur in at least R cycles. Without the paired cycles the direction of the quorum cycles becomes critical to the fault tolerance performance. For this we developed a greedy cycle direction heuristic and our single fault network simulations show a reduction of missing pairs by greater than 30...|$|R
40|$|The Italian {{deregulated}} electricity {{market is}} based on a competitiveness mechanism which rewards power generation plants characterized by high flexibility, availability and reliability. In this framework power plants have to fit their production schedules to the demand curve taking into account the electricity price variability during the day. As a consequence, electricity production revenues depend not only on the generated energy quantities but, above all, on the time when the energy is yielded to the power grid and on the plant response time to the electricity generation <b>request.</b> Combined <b>cycle</b> power plants, characterized by high flexibility and reduced startup and shutdown times, are suitable for operating in the electricity market; on the other hand, steam power plants, which have been designed for base load operating conditions, have to improve their flexibility in order to be competitive. The present paper is focused on the model that has been developed in order to evaluate electricity production costs and revenues for two thermoelectric units, a combined cycle power plant and a steam power plant, which operate in the Italian electricity market. The paper outlines the main advantages and disadvantages of operating a combined cycle or a steam power plant and analyses the main results of the model considering different operating scenarios...|$|R
40|$|We {{present an}} analog VLSI address-event {{transceiver}} containing {{an array of}} integrate-and-fire neurons and a scheme for implementing a reconfigurable, scalable neural network with probabilistic synapses in the address domain. Neural "spikes" are transmitted through address-event representation, in which {{the address of the}} sending neuron is communicated through an asynchronous <b>request</b> and acknowledgment <b>cycle.</b> Continuous-valued synaptic weights are implemented by probabilistically routing address events. Results from a prototype system with 1, 024 analog VLSI integrateand -fire neurons, each with up to 128 probabilistic synapses, demonstrate these concepts in an image processing application. 1. INTRODUCTION The brain's performance in image processing and pattern recognition tasks far exceeds that of today's state-of-the-art artificial systems. In an effort to close the performance gap between artificial and natural and systems, neuromorphic engineering draws inspiration from the brain' [...] ...|$|R
40|$|In {{this paper}} we propose a {{generalized}} R redundancy cycle technique that provides optical networks almost fault-tolerant communications. More importantly, when applied using only single cycles rather than the standard paired cycles, the generalized R redundancy technique is shown to almost halve the necessary light-trail resources in the network while maintaining the fault-tolerance and dependability expected from cycle-based routing. For efficiency and distributed control, it is common in distributed systems and algorithms to group nodes into intersecting sets referred to as quorum sets. Optimal communication quorum sets forming optical cycles based on light-trails have been shown to flexibly and efficiently route both point-to-point and multipoint-to-multipoint traffic <b>requests.</b> Commonly <b>cycle</b> routing techniques will use pairs of cycles to achieve both routing and fault-tolerance, which uses substantial resources and creates the potential for underutilization. Instead, we intentionally utilize R redundancy within the quorum cycles for fault-tolerance such that every point-to-point communication pairs occur in at least R cycles. The result is a set of R = 3 redundant cycles with 93. 23 - 99. 34 % fault coverage even with two simultaneous faults all while using 38. 85 - 42. 39 % fewer resources. Comment: 7 th International Workshop on Reliable Networks Design and Modeling, 5 - 7 Oct. 2015. arXiv admin note: substantial text overlap with arXiv: 1608. 05170, arXiv: 1608. 0516...|$|R
40|$|Crawler cranes {{belong to}} the family of mobile cranes that have complex {{structure}} with big dimensions and mechanisms and high security <b>requests.</b> Main <b>cycles</b> of the work of Crawler Cranes can be divided into: lifting and lowering the working load, boom lifting and lowering, rotation (slewing) around its vertical axes in 360 º, and translational movement forward/backwards. In this workshop, we are going to simulate the work of crawler crane while rotating around its vertical axes when fully engaged with load, which hangs in some height. The aim is to see the effects of dynamic forces (or moments) in the crane’s construction during this work cycle, particularly at the start and end of the rotation when working load swings. Reasons for doing this study are occasions of crane instability, while the crane rotates and load swings. We will research the effects of angular speed and workload swaying (swinging) in overall stability of crawler crane by looking for results of swaying angles, dynamic momentums and tensions in cables. By using the modeling applications and applying simulations [3], we are confident that we will have better view of occasions in case of crane rotation and some conclusions for enforcing security and design rules in order to avoid instability and overturning. To do this study, we designed a “virtual crawler crane ” using model design and simulation applications and applied simulations based on input parameters and dimensions...|$|R
40|$|Recent {{technological}} advances have made multimedia on-demand servers feasible. Two challenging tasks in such systems are: a) satisfying the real-time requirement for continuous delivery of objects at specified bandwidths and b) efficiently servicing multiple clients simultaneously. Real-time delivery {{can be achieved}} via clever scheduling but still often comes at a price, e. g., buffer space. Most published video server designs use a cycle based scheduling method in which each disk serves a set of I/O <b>requests</b> during a <b>cycle</b> and that data is played out to the display stations during the following cycle. This technique enables efficient disk scheduling by permitting scheduling of the requests in an order that minimizes seek times. However, this method requires significant amounts of memory to buffer data between the time when it is read until the time it is played out to a display device. In contrast, the design proposed in this paper lays out the videos and schedules request streams such [...] ...|$|R
40|$|Recuperators {{have been}} {{identified}} as key components of advanced gas turbines systems that achieve a measure of improvement in operating efficiency and lead the field in achieving very low emissions. Every gas turbine manufacturer that is studying, developing, or commercializing advanced recuperated gas turbine <b>cycles</b> <b>requests</b> that recuperators operate at higher temperature without a reduction in design life and must cost less. The Solar Cooperative Research and Development of Primary Surface Recuperator for Advanced Microturbine Systems Program is directed towards meeting the future requirements of advanced gas turbine systems by the following: (1) The development of advanced alloys that will allow recuperator inlet exhaust gas temperatures to increase without significant cost increase. (2) Further characterization of the creep and oxidation (dry and humid air) properties of nickel alloy foils (less than 0. 13 mm thick) to allow the economical use of these materials. (3) Increasing the use of advanced robotic systems and advanced in-process statistical measurement systems...|$|R
40|$|According to {{the type}} of {{ancillary}} service provisioned, operation mode of a power plant may change to part load operation. In this contribution, part load operation is understood as delivering a lower power output than possible at given ambient temperature because of gas turbine power output control. If it is economically justified, a power plant may operate in the part load mode for longer time. Part load performance of a newly built 80 Â MW combined cycle in Slovakia was studied in order to assess the possibilities for fuel savings. Based on online monitoring data three possibilities were identified: condensate preheating by activation of the currently idle hot water section; change in steam condensing pressure regulation strategy; and the most important gas turbine inlet air preheating. It may seem to be in contradiction with the well proven concept of gas turbine inlet air cooling, which has however been developed for boosting the gas turbine cycles in full load operation. On the contrary, in a combined cycle in the part load operation mode, elevated inlet air temperature does not affect the part load operation of gas turbines but it causes more high pressure steam to be raised in HRSG, which leads to higher steam turbine power output. As a result, less fuel needs to be combusted in gas turbines in order to achieve the <b>requested</b> combined <b>cycle's</b> power output. By simultaneous application of all three proposals, more than a 2 % decrease in the power plant's natural gas consumption can be achieved with only minor capital expenses needed. Combined cycle Part load performance Ancillary services Electric efficiency Fuel savings...|$|R
40|$|PURPOSE: The {{purpose of}} this study was to assess the {{potential}} of the electrically assisted bicycle (EAB) as a novel tool for meeting the physical activity guidelines in terms of intensity. METHODS: Twelve habitually active adult subjects were <b>requested</b> to <b>cycle</b> a track of 4. 3 km at an intensity they would normally choose for commuter cycling, using three different support settings: no support (NO), eco support (ECO), and power support (POW). For estimating the intensity, the oxygen consumption was measured by using a portable gas-analyzing system, and HR was simultaneously measured. The bicycle was equipped with the SRM Training System to measure subjects' power output, pedaling rate, and the cycle velocity. RESULTS: Mean intensity was 6. 1 MET for NO, 5. 7 MET for ECO, and 5. 2 MET for POW. Intensity was significantly lower in POW compared with that in NO. No differences were found between NO and ECO and between ECO and POW. Mean HR was significantly higher in NO compared with that in ECO and POW. The cycling speed with electrical support settings was significantly higher than cycling in the NO condition. Mean power output during cycling was significantly different among all three conditions. Most power outputs were supplied in the NO condition, and the lowest power output was supplied in the POW condition. CONCLUSIONS: Intensity during cycling on an EAB, in all three measured conditions, is sufficiently high to contribute to the physical activity guidelines for moderate-intensity health-enhancing physical activity for adults (cutoff, 3 MET). Further study is needed to conclude whether these results still hold when using the EAB in regular daily life and in subjects with other fitness level. Copyright © 2009 by the American College of Sports Medicine...|$|R
40|$|PhEDEx {{has been}} serving CMS {{community}} since 2004 as the data broker. Every PhEDEx operation is initiated by a request, e. g. request {{to move or}} to delete data, and so on. A request has it own life cycle, including creation, approval, notification, and book keeping and the details depend on its type. Currently, only two kinds of requests, transfer and deletion, are fully integrated in PhEDEx. They are tailored specifically to the operations' workflows. To be able to serve {{a new type of}} request it generally means a fair amount of development work. After several many years of operation, we have gathered enough experience to rethink the request handling in PhEDEx. Generalized Request Project is set to abstract such experience and design a request system which is not tied into current workflow yet it is general enough to accommodate current and future requests. The challenges are dealing with different stages in a <b>request's</b> life <b>cycle,</b> complexity of approval process and complexity of the ability and authority associated with each role {{in the context of the}} request. We start with a high level abstraction driven by a deterministic finite automata, followed by a formal description and handling of approval process, followed by a set of tools that make such system friendly to the users. Since we have a formal way to describe the life of a request and a mechanism to systematically handle it, to serve a new kind of request is merely a configuration issue, adding the description of the new request rather than development effort. In this paper, we share the design and implementation of a generalized request framework and the experience of taking an existing serving system through a re-design and re-deployment...|$|R
40|$|Abstract—Embedded {{systems have}} higher {{requirements}} on real-time performance of processor. However exception, which can interrupt normal execution of program, will decrease the processor performance. For improving the exception handling efficiency of processor, a precise exception handling method for embedded pipeline processor based on pre-detection is proposed in this paper. When the precise exception occurs in any pipeline stage, the precise exception flag is set valid immediately and {{advanced to the}} next pipeline stage. Based on pre-detection on the exception flag, a single-cycle NOP instruction is provided for the processor by a dedicated hardware module. That separates the processor from spending large number of clock <b>cycles</b> <b>requesting</b> main instruction memory for instructions which will be flushed {{in the process of}} exception handling. This method has been implemented in a SPARC V 8 processor which has successfully taped out. Test results of chip show that the precise exception detection and response efficiency is increased by 35. 47 % without increasing the processor critical path. The proposed method can be used to improve response efficiency of the precise exception at low hardware overheads. Keywords-exception flag; pre-detection; dedicated module; NOP instruction; processor I...|$|R
40|$|Financial {{organizations}} {{communicate with}} each other using ISO 8583 or its derivatives to complete the <b>request</b> and response <b>cycle</b> of card originated transactions originated from an ATM, POS, or the web. ISO 8583 is a broad standard. Its implementations slightly vary due to the flexibility available within the standard. This paper discusses the problem of adaptability of communication between payment card transaction processing entities due to this flexibility. We first provide an overview of different variations in ISO 8583 implementations and identify the interoperability issue based on our industry experience. We then propose a solution and suggest a way to standardize different implementations so that one organization can communicate with another without or with minimal changes in software. The suggestion is based on the exchange of meta data indicating how the target system is interpreting the header fields during the communication process. Finally, we discuss the benefits of the solution in which the vendors could not only avail the customization flexibility provided by ISO 8583 but also ensure that their implementation of the standard is interoperable with others. This reduces the cost of interconnectivity with other partners when a network wants to expands its busines...|$|R
