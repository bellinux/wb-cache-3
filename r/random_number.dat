4944|2625|Public
5|$|The {{analysis}} above {{assumes that}} each key's hash is a <b>random</b> <b>number</b> {{independent of the}} hashes {{of all the other}} keys. This assumption is unrealistic for most applications of hashing.|$|E
5|$|In May 2008, it was {{revealed}} that a Debian developer discovered that the OpenSSL package distributed with Debian and derivatives such as Ubuntu, made a variety of security keys vulnerable to a <b>random</b> <b>number</b> generator attack, since only 32,767 different keys were generated. The security weakness was caused by changes made in 2006 by another Debian developer in response to memory debugger warnings. The complete resolution procedure was cumbersome because patching the security hole was not enough; it involved regenerating all affected keys and certificates.|$|E
5|$|In November 1984, Larson {{learned about}} a local radio show {{promotion}} promising a $30,000 prize for matching a $1bill's serial number with a <b>random</b> <b>number</b> read {{out on the}} air. Over several days, he withdrew his remaining winnings in $1bills, examined each dollar, and (upon discovering {{that he did not}} have the winning number) re-deposited roughly half of the money. Larson left about $50,000 in his house, which was stolen in a burglary while he was attending a Christmas party. The case remains unsolved to this day.|$|E
40|$|The {{objective}} of this work was to implement and evaluate a method for generating skewed <b>random</b> <b>numbers</b> {{using a combination of}} uniform <b>random</b> <b>numbers.</b> The method provides a simple and accurate way of generating skewed <b>random</b> <b>numbers</b> from the specified first three moments without an a priori specification of the probability density function. We describe the procedure for generating skewed <b>random</b> <b>numbers</b> from unifon-n <b>random</b> <b>numbers,</b> and show that it accurately produces <b>random</b> <b>numbers</b> with the desired first three moments over a range of skewness values. We also show that in the limit of zero skewness, the distribution of <b>random</b> <b>numbers</b> is an accurate approximation to the Gaussian probability density function. Future work win use this method to provide skewed <b>random</b> <b>numbers</b> for a Langevin equation model for diffusion in skewed turbulence...|$|R
5000|$|Erlang-distributed <b>random</b> <b>numbers</b> can be {{generated}} from uniform distribution <b>random</b> <b>numbers</b> (...) using the following formula: ...|$|R
50|$|<b>Random</b> <b>numbers</b> have uses {{in physics}} such as {{electronic}} noise studies, engineering, and operations research. Many methods of statistical analysis, {{such as the}} bootstrap method, require <b>random</b> <b>numbers.</b> Monte Carlo methods in physics and computer science require <b>random</b> <b>numbers.</b>|$|R
5|$|When {{the game}} is ready for release, the {{publisher}} sends copies of {{the final version of}} the game to the ESRB, who reviews the game's packaging, and a <b>random</b> <b>number</b> of games they receive are play tested for more thorough review. Penalties apply to publishers who misrepresent the content of their games, including the potential for fines up to US $1 million and a product recall, if deemed necessary. The ESRB typically posts rating information for new titles on its website 30 days after the rating process is complete; in 2008, in response to incidents where this practice inadvertently leaked information about games that had not yet been announced, the ESRB began to allow publishers to place embargoes on the release of ratings information until a game is officially announced.|$|E
25|$|Proposed new <b>random</b> <b>number</b> {{generators}} {{are often}} {{compared to the}} RC4 <b>random</b> <b>number</b> generator.|$|E
25|$|The <b>random</b> <b>number</b> {{generators}} used by Alice and Bob must {{be trusted}} and truly random (for example a Quantum <b>random</b> <b>number</b> generator).|$|E
30|$|In {{order to}} {{generate}} the <b>random</b> <b>numbers</b> in MCS method, it was required to write a pertinent code in FISH language of FLAC 2 D software. The programming environment of FLAC 2 D has only the ability to generate uniform <b>random</b> <b>numbers</b> by its default commands. Thus, it seems necessary to write a code for generating normal and lognormal <b>random</b> <b>numbers.</b> For this purpose, the normal <b>random</b> <b>numbers</b> were generated using the existing commands and then by using existing formulas for transformation of normal to lognormal variables; the lognormal <b>random</b> <b>numbers</b> were created.|$|R
40|$|We produce two {{strings of}} quantum <b>random</b> <b>numbers</b> {{simultaneously}} from the intensity fluctuations {{of the twin}} beams generated by a nondegenerate optical parametric oscillator. Two strings of quantum <b>random</b> <b>numbers</b> with bit rates up to 60 Mb/s are extracted simultaneously with a suitable post-processing algorithm. By post-selecting the identical data from two raw sequences and using a suitable hash function, we also extract two strings of identical quantum <b>random</b> <b>numbers.</b> The obtained <b>random</b> <b>numbers</b> pass all NIST randomness tests. The presented scheme shows the feasibility of generating quantum <b>random</b> <b>numbers</b> from the intensity of a macroscopic optical field...|$|R
5000|$|Sequences of subrandom numbers can be {{generated}} from <b>random</b> <b>numbers</b> by imposing a negative correlation on those <b>random</b> <b>numbers.</b> One {{way to do this}} is to start with a set of <b>random</b> <b>numbers</b> [...] on [...] and construct subrandom numbers [...] which are uniform on [...] using: ...|$|R
25|$|Before {{the advent}} of {{computational}} <b>random</b> <b>number</b> generators, generating large amounts of sufficiently random numbers (important in statistics) required a lot of work. Results would sometimes be collected and distributed as <b>random</b> <b>number</b> tables.|$|E
25|$|Methods for <b>random</b> <b>number</b> {{generation}} {{where the}} marginal distribution is a binomial distribution are well-established.|$|E
25|$|It is also {{recently}} demonstrated that a degenerate OPO {{can be used}} as an all-optical quantum <b>random</b> <b>number</b> generator that does not require post processing.|$|E
50|$|Atmospheric {{noise and}} {{variation}} {{is also used}} to generate high quality <b>random</b> <b>numbers.</b> <b>Random</b> <b>numbers</b> have interesting applications in the security domain.|$|R
50|$|Thus, {{orthogonal}} sampling {{ensures that}} the ensemble of <b>random</b> <b>numbers</b> {{is a very good}} representative of the real variability, LHS {{ensures that the}} ensemble of <b>random</b> <b>numbers</b> is representative of the real variability whereas traditional random sampling (sometimes called brute force) is just an ensemble of <b>random</b> <b>numbers</b> without any guarantees.|$|R
30|$|The <b>random</b> <b>numbers</b> {{generated}} by the chaotic generators are sorted in ascending order, and the corresponding indexes are taken from the sorted list. Based on the indexes of the <b>random</b> <b>numbers,</b> the sampled values of speech signals are permuted. The permuted parameters are substituted with the <b>random</b> <b>numbers</b> {{generated by}} corresponding chaotic generator.|$|R
25|$|Rule 30 was {{originally}} suggested {{as a possible}} block cipher for use in cryptography. Two dimensional cellular automata are used for <b>random</b> <b>number</b> generation.|$|E
25|$|A client sends a ClientHello message {{specifying the}} highest TLS {{protocol}} version it supports, a <b>random</b> <b>number,</b> {{a list of}} suggested cipher suites and compression methods.|$|E
25|$|A player starts by {{clearing}} the memory on their calculator. The player will {{then use the}} <b>random</b> <b>number</b> generator on their calculator to bring up a number between 0 and 1. The number of runs scored is the first digit after the decimal point (for example, if the <b>random</b> <b>number</b> generator provides 0.521, 5 runs are scored). Scoring is kept by using the memory addition function on the calculator, or by pen and paper. Scoring a 0 is considered out. The player who has the highest score wins.|$|E
40|$|<b>Random</b> <b>numbers</b> are the numbers, which play an {{important}} role for various network security applications. hers are some techniques that are used to generating <b>random</b> <b>numbers</b> such as” pseudorandom number generator ” and “linear congruent generator ” also cryptographically generated <b>random</b> <b>numbers</b> ” etc. but here we are using the Chinese Reminder Theorem for the purpose of generating <b>Random</b> <b>numbers.</b> In essence, CRT says it is possible to reconstruct integers in a certain range from their residues modulo a set of pair wise relatively prime modulo...|$|R
40|$|Abstract – In {{modeling}} and simulation tools, <b>random</b> <b>numbers</b> {{from a variety of}} probability distribution functions are generated to simulate the behavior of random events. Inefficient generation of these numbers can be a significant bottleneck for simulation applications. Generating these <b>random</b> <b>numbers</b> imprecisely can skew results. An efficient and scalable fixedpoint method for generating <b>random</b> <b>numbers</b> for any probability distribution function in a Field Programmable Gate Array (FPGA) is developed. A Pi estimator, a Monte Carlo integrator, and a stochastic simulator for chemical species are developed in software. Estimates are made regarding their potential to be accelerated using the designed FPGA. Results are presented which examine trade-offs between the number of gates used by the FPGA and the accuracy of the <b>random</b> <b>numbers</b> generated. The work shows that generating <b>random</b> <b>numbers</b> using the designed hardware can significantly increase the performance of simulation applications that require many <b>random</b> <b>numbers.</b> I...|$|R
40|$|Subroutines {{are written}} to {{generate}} <b>random</b> <b>numbers</b> on the computer. Depending on the subroutine used, the generated <b>random</b> <b>numbers</b> follow the uniform, binomial, normal, chi-square, t, F, or gamma distribution. Each subroutine is tested using the chi-square {{goodness of fit}} test to verify that the <b>random</b> <b>numbers</b> generated by each subroutine follow the statistical distribution {{for which it is}} written. The interpretation of the test results indicates that each subroutine generates <b>random</b> <b>numbers</b> which closely approximates the theoretical distribution for which it is designed. The approach used in the subroutine which generates gamma distributed <b>random</b> <b>numbers</b> involves the use of numerical integration, whereas simpler techniques are used in all the other subroutines. Each subroutine is documented with a description of how to use it and an explanation of the methods used to obtain the <b>random</b> <b>numbers</b> which it is designed to generate. (77 pages...|$|R
25|$|Inverse {{transform}} sampling {{is simple}} and efficient for small values of λ, and requires only one uniform <b>random</b> <b>number</b> u per sample. Cumulative probabilities are examined in turn until one exceeds u.|$|E
25|$|Eddie Tipton, {{the former}} {{security}} {{director of the}} US Multi-State Lottery Association, installed software code to the Hot Lotto <b>random</b> <b>number</b> generator {{that allowed him to}} predict winning numbers on specific days of the year.|$|E
25|$|The {{strength}} of random passwords {{depends on the}} actual entropy of the underlying number generator; however, these are often not truly random, but pseudo random. Many publicly available password generators use <b>random</b> <b>number</b> generators found in programming libraries that offer limited entropy. However most modern operating systems offer cryptographically strong <b>random</b> <b>number</b> generators that are suitable for password generation. It is also possible to use ordinary dice to generate random passwords. See stronger methods. Random password programs often {{have the ability to}} ensure that the resulting password complies with a local password policy; for instance, by always producing a mix of letters, numbers and special characters.|$|E
40|$|This thesis {{describes}} <b>random</b> <b>numbers</b> generating techniques. First part {{focuses on}} methods of obtaining pseudorandom numbers and presents typical examples of <b>random</b> <b>numbers</b> generators. This part also contains description of distribution transformation methods of <b>random</b> <b>numbers</b> and briefly deals with testing of statistical properties of <b>random</b> <b>numbers</b> generators. Following part describes LFSR generator in detail {{as one of}} most widely used generators for hardware applications. In addition, description of transformation process and implementation of circuit calculating transformation to the exponential distribution is included. Last part contains resources requierements of designed circuits for implementation in FPGA...|$|R
40|$|We {{study the}} {{statistical}} properties of <b>random</b> <b>numbers</b> under the Martin-Löf definition of randomness, proving that <b>random</b> <b>numbers</b> obey analogues of Strong Law of Large Numbers, the Law of the Iterated Logarithm, {{and that they}} are normal. We also show that weakly (1 -) <b>random</b> <b>numbers</b> do not share these properties. Comment: 11 pages, LaTeX; changed style and added acknowledgement...|$|R
40|$|We {{examine the}} {{requirements}} and the available methods and software to provide (or imitate) uniform <b>random</b> <b>numbers</b> in parallel computing environments. In some settings, {{the goal is}} to use parallel processors to fill up rapidly a large array of <b>random</b> <b>numbers.</b> In other settings, thousands or millions of independent streams of <b>random</b> <b>numbers</b> are required, each one computed on a single processing element...|$|R
25|$|A client sends a ClientHello message {{specifying the}} highest TLS {{protocol}} version it supports, a <b>random</b> <b>number,</b> {{a list of}} suggested cipher suites and compression methods. Included in the message is the session id from the previous TLS connection.|$|E
25|$|The Poisson {{distribution}} can {{be applied}} to systems with a large number of possible events, each of which is rare. How many such events will occur during a fixed time interval? Under the right circumstances, this is a <b>random</b> <b>number</b> with a Poisson distribution.|$|E
25|$|The System z9 adds 128-Bit Advanced Encryption Standard (AES) to {{the list}} of {{hardware-based}} cryptographic algorithms. Other hardware-boosted features include additional <b>random</b> <b>number</b> generation and SHA algorithms. This specialized encryption hardware means System z9 potentially outperforms other platforms which must rely on encryption software.|$|E
50|$|One robust, general, public {{method of}} {{allotment}} in use since 1997 is documented in RFC 3797: Publicly Verifiable Nominations Committee Random Selection. Using it, multiple specific sources of <b>random</b> <b>numbers</b> (e.g. lotteries) are selected in advance, and an algorithm is defined for selecting the winners {{based on those}} <b>random</b> <b>numbers.</b> When the <b>random</b> <b>numbers</b> become available, anyone can calculate the winners.|$|R
40|$|We {{report that}} we can obtain uniform <b>random</b> <b>numbers</b> easily by making use of the {{randomness}} of Horner's rule {{in the domain of}} the cancellation error under single-precision calculations. The chi-square test and the Kolmogorov-Smirnov test reveal that the properties of our <b>random</b> <b>numbers</b> are of the same level as those of <b>random</b> <b>numbers</b> generated by the function random attached to the software Delphi 2. 0...|$|R
50|$|Note {{that prior}} to Alice {{publishing}} the signature of the message, no one else knows the 2×256 <b>random</b> <b>numbers</b> in the private key. Thus, {{no one else can}} create the proper list of 256 <b>random</b> <b>numbers</b> for the signature. And after Alice has published the signature, others still do not know the other 256 <b>random</b> <b>numbers</b> and thus can not create signatures that fit other message hashes.|$|R
