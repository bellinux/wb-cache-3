43|200|Public
50|$|The KUKA <b>Robot</b> <b>Language,</b> {{also known}} as KRL, is a {{proprietary}} programming language similar to Pascal and used to control KUKA robots.|$|E
50|$|The VAL <b>robot</b> <b>language</b> is {{permanently}} {{stored as}} a part of the VAL system. This includes the programming language used to direct the system for individual applications. The VAL language has an easy to understand syntax. It uses a clear, concise, and generally self-explanatory instruction set. All commands and communications with the robot consist of easy to understand word and number sequences. Control programs are written on the same computer that controls the robot. As a real-time system, VAL's continuous trajectory computation permits complex motions to be executed quickly, with efficient use of system memory and reduction in overall system complexity. The VAL system continuously generates robot control commands, and can simultaneously interact with a human operator, permitting on-line program generation and modification.|$|E
40|$|Robotic {{commands}} {{in natural}} language usually contain various spatial descriptions that are semantically similar but syntactically different. Mapping such syntactic variants into semantic concepts {{that can be}} understood by robots is challenging due to the high flexibility of natural language expressions. To tackle this problem, we collect robotic commands for navigation and manipulation tasks using crowdsourcing. We further define a <b>robot</b> <b>language</b> and use a generative machine translation model to translate robotic commands from natural language to <b>robot</b> <b>language.</b> The main {{purpose of this paper}} is to simulate the interaction process between human and robots using crowdsourcing platforms, and investigate the possibility of translating natural language to <b>robot</b> <b>language</b> with paraphrases...|$|E
25|$|For {{examples}} of how this would look in popular <b>robot</b> <b>languages</b> see industrial <b>robot</b> programming.|$|R
40|$|In this paper, {{we make a}} {{comparative}} review {{of a variety of}} "intermediate-level" <b>robot</b> <b>languages</b> that have emerged in recent years. We also describe a <b>robot</b> programming <b>language</b> called FROB (for Functional ROBotics). FROB is an example of an embedded, domain-specific language, hosted by the Haskell programming language...|$|R
50|$|Some {{examples}} of published <b>robot</b> programming <b>languages</b> are shown below.|$|R
40|$|Robot {{communication}} {{is necessary to}} complete collaborative tasks e ciently. The robots will need an adaptable language if we want themto function in new and changing environments. This paper reports steps already taken towards {{the creation of an}} adaptable <b>robot</b> <b>language</b> and discusses extensions to the work that are being examined. ...|$|E
40|$|Macro Record <b>Robot</b> <b>Language</b> (M. R. Roboto) {{places in}} the hands of the {{programmer}} a powerful tool for controlling GUI based operating systems. By simulating the actions of a user, one can test interactive applications and automate repetitive tasks with ease. M. R. Roboto provides a simple script-style interface, while leveraging the strengths of the Jav...|$|E
40|$|Abstract. This paper {{describes}} the testing tool ”ExmoR ” {{that allows the}} user to experiment with different control algorithms as map building and a routine to explore the environment. The intention {{is to give the}} user the possibility of easy testing the various control algorithms for the Khepera robot without any knowledge about the <b>robot</b> <b>language,</b> the control architecture or other robot details. ...|$|E
40|$|Abstract—This paper {{presents}} {{the development of}} a software application for Off-line robot task programming and simulation. Such application is designed to assist in robot task planning and to direct manipulator motion on sensor based programmed motion. The concept of the designed programming application is to use the power of the knowledge base for task accumulation. In support of the programming means, an interactive graphical simulation for manipulator kinematics was also developed and integrated into the application as the complimentary factor to the robot programming media. The simulation provides the designer with useful, inexpensive, off-line tools for retain and testing robotics work cells and automated assembly lines for various industrial applications. Keywords—Robot programming, task-level programming, <b>robot</b> <b>languages,</b> <b>robot</b> simulation, robotics software. R I...|$|R
50|$|By using a Post {{processor}} and Off-line programming (robotics) software {{it is possible}} to handle brand-specific <b>robot</b> programming <b>language</b> from a universal programming language, such as Python (programming language).|$|R
40|$|Cooperating robots can bene t from communication. Our robots {{create their}} own {{adaptable}} synthetic <b>robot</b> <b>languages</b> (ASRLs). We have shown that robots can develop &quot;, context dependent, and compositional ASRLs using reinforcement learning techniques. (See (Yanco 1994) for a complete description of this work.) We have demonstrated that the robots are able to develop ASRLs using two di erent reinforcement schemes: task-based reinforcement and individual reinforcement. In task-based reinforcement, the robots only receive positive reinforcement when the task is completed properly. This reinforcement method is preferable in situations where {{it can not be}} determined who performed the correct actions to reach the goal...|$|R
40|$|The {{major problem}} {{addressed}} by {{this research is}} how to plan a safe motion for autonomous vehicles in a two dimensional, rectilinear world. With given start and goal configurations, the planner performs motion planning which will lead a vehicle to achieve its task safely. During the planning, {{in addition to the}} safety consideration, motion's smoothness is also taken into account. The approach taken was to divide whole motion planning task into two layers. The top layer finds a global path by decomposing the free space into convex regions, then searching for an optimal global path class. The bottom layer performs local motion planning which further subdivides the planning problem into mid-portion and end-portion motion planning. The local motion planning is carried out region by region along the global path class. As results, simple motion instructions are generated for each region. For execution of planned motion, a software system, Model-based Mobile <b>robot</b> <b>Language</b> (MML- 11), was developed. This easy- to-use <b>robot</b> <b>language</b> provides users a convenient tool to program their applications through its function library. The results of the research were implemented in MML- 1 l and tested on an experimental robot Yamabico- 11 successfully. (AN) NANARepublic of China Army author...|$|E
40|$|The {{advantages}} {{and performance of}} genetic programming {{in the use of}} error recovery planning in robotic assembly systems are presented. A framework is developed and coupled with a 3 D robotic simulation software for the generation of error recovery logic in assembly systems to generate robust recovery porgrams in <b>robot</b> <b>language</b> itself. Performance of the system is evaluated with the simulations made on a three dimensionally modeled automated assembly line. The obtained results showed that the system is efficient of generating robust recovery plans for different error states. 1 DEVELOPED FRAMEWOR...|$|E
40|$|Abstract—In this paper, {{we propose}} an {{architecture}} for easily constructing a robot controller. The architecture is a multi-agent system which has eight agents: the Man-machine interface, Task planner, Task teaching editor, Motion planner, Arm controller, Vehicle controller, Vision system and CG display. The controller has three databases: the Task knowledge database, the Robot database and the Environment database. Based on this controller architecture, we are constructing an experimental power distribution line maintenance robot system and {{are doing the}} experiment for the maintenance tasks, for example, “Bolt insertion task”. Keywords—Robot controller, Software library, Maintenance robot, <b>Robot</b> <b>language,</b> Agent system...|$|E
50|$|She {{joined the}} AI {{laboratory}} at the University of Edinburgh in 1968 {{as a research}} scientist.She helped develop the <b>robot</b> command <b>language</b> RAPT, and worked with Robin Popplestone and Rod Burstall amongst others.|$|R
40|$|Robots {{have great}} {{potential}} for assisting disabled people with basic manipulation tasks. However, robots have traditionally been difficult for non-experts to program, even for simple tasks. In addition, the brittleness of typical robot programs, which do not use sensing to detect changes in the robot's environment, make them unreliable in the loosely structured environments in which service robots operate. We present in this paper a graphical programming language, RoboGlyph, that uses an intuitive, graphical representation for <b>robot</b> control. This <b>language</b> has been tested for controlling a robot arm for service tasks, and it {{has proved to be}} a significant improvement over traditional <b>robot</b> programming <b>languages.</b> Even novice programmers are able to build reliable programs to perform simple tasks. However, any <b>robot</b> level <b>language</b> poses difficulties for users who are unfamiliar with robot control, especially when complex task programs must be created. The goals of the user are usually m [...] ...|$|R
40|$|Abstract — Neural {{networks}} {{have been proposed}} as an ideal cognitive modeling methodology {{to deal with the}} symbol grounding problem. More recently, such neural network approaches have been incorporated in studies based on cognitive agents and robots. In this paper we present a new model of symbol grounding transfer in cognitive <b>robots.</b> <b>Language</b> learning simulations demonstrate that robots are able to acquire new action concepts via linguistic instructions. This is achieved by autonomously transferring the grounding from directly grounded action names to new higher-order composite actions. The robot’s neural network controller permits such a grounding transfer. The implications for such a modeling approach in cognitive science and autonomous robotics are discussed...|$|R
40|$|The role of gaze in {{interaction}} {{has been}} an area of increasing interest {{to the field of}} human-robot interaction. Mutual gaze, the pattern of behavior that arises when humans look directly at each other’s faces, sends im-portant social cues and is a developmental precursor in humans to joint attention and language learning. In preparation for learn-ing a computational model of mutual gaze, data from human-human pairs in a conversa-tional task was collected using a gaze-tracking system and face detection algorithm. The results presented show the potential of this automated method. Future applications for interaction-based <b>robot</b> <b>language</b> learning are discussed. 1...|$|E
40|$|Autonomous robot task {{execution}} {{requires that}} the end effector of the robot be positioned accurately relative to a reference world-coordinate frame. The authors present a complete formulation to identify the actual robot geometric parameters. The method applies to any serial link manipulator with arbitrary order and combination of revolute and prismatic joints. A method is also presented to solve the inverse kinematic of the actual robot model which usually is not a so-called simple robot. Experimental results performed by utilizing a PUMA 560 with simple measurement hardware are presented. As {{a result of this}} calibration a precision move command is designed and integrated into a <b>robot</b> <b>language,</b> RCCL, and used in the NASA Telerobot Testbed...|$|E
40|$|Abstract—Today, most {{industrial}} robots are programmed using the typical teaching process. This paper presents a robotic system where the user can instruct and program a robot just showing {{what it should}} do, and with a high-level of abstraction from the <b>robot</b> <b>language.</b> This is done using the two most natural human interfaces (gestures and speech), a force control system and several code generation techniques. The performance of this system is compared with a similar system that instead of gestures uses a manual guidance system based on a force control strategy. Two different demonstrations with two different robots (MOTOMAN and ABB) are presented, showing that the developed systems can be customised for different users and robots. P I...|$|E
40|$|International audienceOne central {{property}} of cognitive systems {{is the ability}} to learn and to improve continually. We present a <b>robot</b> control <b>language</b> that combines programming and learning in order to make learning executable in the normal <b>robot</b> program. The <b>language</b> constructs of our learning language RoLL rely on the concept of hierarchical hybrid automata to enable a declarative, explicit specification of learning problems. Using the example of an autonomous household robot, we point out some instances where learning–and especially continued learning–makes the robot control program more cognitive...|$|R
50|$|<b>Robot</b> Interaction <b>Language</b> (2010) is a spoken {{language}} that is optimized for communication between machines and humans. The major goals of ROILA are {{that it should be}} easily learnable by the human user, and optimized for efficient recognition by computer speech recognition algorithms.|$|R
40|$|Abstract- A <b>robot</b> {{programming}} <b>language</b> (PLEASE) {{is to be}} proposed {{together with}} an ethology-based action-selection (EASE) architecture, where following features are supported; Hierarchical tree-structured behavior organization, layertailored arbiter programming, abstract expression of real world situation by logically connecting outputs of perception filters, concurrent behaviors...|$|R
40|$|In {{the scope}} of this thesis, we {{designed}} a language for programming education. At first, we described eight existing tools for learning programming and identified key features in the learning process. Second, we designed an educational domain-specific language Eddie. Eddie is suitable for teenagers and adults who want to learn programming. It uses a domain based on Karel the <b>Robot</b> <b>language,</b> where users can control a robot character in a two-dimensional grid. We implemented a prototype of Eddie using the MPS Language Workbench and its projectional editor. The Eddie language gradually introduces loops, conditionals, variables, functions, and objects. Eddie programs can be created, executed and visualized in the Eddie Studio IDE. Powered by TCPDF (www. tcpdf. org...|$|E
40|$|Approved {{for public}} release, {{distribution}} unlimitedThe major problem addressed by {{this research is}} how to develop a motion control algorithm for stable and precise control of the motion of an autonomous mobile robot The approach taken was to clearly define the robot's motion descriptions and to design a high-level, machine independent robot control language called MML (Mode-based Mobile <b>robot</b> <b>Language).</b> The results are that the robot can implement line to line, line to circle, circle to circle path tracking or the combinations of these. Based on the motion control algorithm which was developed in this thesis, the robot is able to use external sensors to execute complicated missions such as obstacle avoidance (sonar is used in this thesis work). Republic of China Army autho...|$|E
40|$|The {{major goal}} of this thesis {{was to create a}} map of a room by an {{autonomous}} mobile robot using the robot's internal odometry measurements and ultrasonic sensors. Yamabico, an autonomous mobile robot, will be controlled by Model-based Mobile <b>robot</b> <b>Language</b> (MML). The research for this thesis included the development of an algorithm to use information from the line-fitting capability of MML. It also included research about the inherent errors that are incurred using sonar for precise measurements. The results of this thesis are that it is possible for a map to be created by an autonomous robot using only ultrasonic sensors. However, the results would be much more accurate if an external source of navigation was used to correct the errors inherent in ultrasonic sensors and the robot's odometry. U. S. Army (USA) autho...|$|E
50|$|Like most <b>robot</b> {{programming}} <b>languages,</b> RoboLogix programs {{consist of}} data objects and program flow. The data objects reside in registers {{and the program}} flow represents the list of instructions, or instruction set, {{that is used to}} program the <b>robot.</b> RoboLogix program <b>language</b> is a type of scripting language that is used to control the software application. Programming languages are generally designed for building data structures and algorithms from scratch, while scripting languages are intended more for connecting, or gluing, components and instructions together. Consequently, the RoboLogix instruction set is a streamlined list of program commands that are used to simplify the programming process and provide rapid application development.|$|R
40|$|This paper {{describes}} the scienti c {{goals of the}} AllemaniACs 2004 Mid-Size soccer team. We present our robot platform and sketch out our software system. In an extended example we show some features of the high-level <b>robot</b> programming <b>language</b> GOLOG which we use for modeling the behavior of our robot...|$|R
50|$|This {{meant that}} robot goals were {{specified}} {{in terms of}} desired position relationships between the robot, objects and the scene, leaving {{the details of how}} to achieve the goals to the underlying software system. Although developed in the 1970s RAPT is still considerably more advanced than most commercial <b>robot</b> programming <b>languages.</b>|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThe major problem addressed by {{this research is}} how to improve an existing real-time software system's readability, maintainability, stability and portability using reengineering techniques. A fundamental portion of the Model- based Mobile <b>robot</b> <b>Language</b> (MML) was the real-time system chosen {{as the basis for}} this study. The approach taken was to create a new system design. The new design was based on system specifications obtained by conducting static and dynamic analysis on the existing system. The results are that a new core system was implemented using a design that focused on creating independent software sub-systems while encapsulating data. Hardware dependencies were localized and assembly code minimized. The new system is easier to understand and modify and is portable to other hardware platforms. Autonomous vehicle, Robot, Software engineering, Real-time system[URL] United States Nav...|$|E
40|$|The {{major problem}} {{addressed}} by {{this research is}} how to develop a motion control algorithm for local motion planning of an autonomous mobile robot. The approach taken was to clearly define the robot's motion descriptions and to design a high-level, machine independent robot control language called MML (Model-based Mobile <b>robot</b> <b>Language).</b> The results are that the robot can implement smooth rotation, symmetric, and initial motion tracking on an given environment. Based on the motion control algorithm developed in this thesis, the robot with rigid body can be applicable in both local and global motion planning. The experimental results were successful. The algorithms were implemented first on a simulator, then on the autonomous mobile robot Yamabico- Ji. Given an initial and final configuration, the vehicle demonstrated the capability to safely achieve its goal. NANARepublic of Korea Army author...|$|E
40|$|In {{this paper}} {{we present a}} {{client-server}} based architecture for programming several actors and sensors in a heterogeneous system architecture. To integrate all the different computer systems an object-oriented library builds the communication base. This general communication system (GECOS) provides secure communication via RPC, Shared Memory, CAN or Ethernet. The ROBCL - robot control language is a library providing prototypes for actors and sensors in a robotic laboratory. Using the ROBCL library {{it is possible to}} run several programs simultaneously in the same environment, using different or the same devices. Because of a security concept it is not possible that two programs control an actor at the same time by mistake. Keywords: robot programming, objectoriented <b>robot</b> <b>language,</b> communication layer, control I. Introduction At the beginning of robot programming, it was extremely difficult to couple several sensors and actors. Programs for all actors had to be written, which are s [...] ...|$|E
40|$|AbstractIn this paper, {{we propose}} a {{definition}} of goal achievability: given a basic action theory describing an initial {{state of the world}} and some primitive actions available to a robot, including some actions which return binary sensing information, what goals can be achieved by the robot? The main technical result of the paper is a proof that a simple <b>robot</b> programming <b>language</b> is universal, in that any effectively achievable goal can be achieved by getting the robot to execute one of the robot programs. The significance of this result is at least twofold. First, it is in many ways similar to the equivalence theorem between Turing machines and recursive functions, but applied to robots whose actions are specified by an action theory. Secondly, it provides formal justifications for using the simple <b>robot</b> programming <b>language</b> as a foundation for our work on robotics...|$|R
40|$|Abstract — An {{understanding}} {{of time and}} temporal concepts is critical for interacting with the world and with other agents in the world. What does a robot {{need to know to}} refer to the temporal aspects of events – could a robot gain a grounded {{understanding of}} ―a long journey‖, or ―soon‖? Cognitive maps constructed by individual agents from their own journey experiences have been used for grounding spatial concepts in <b>robot</b> <b>languages.</b> In this paper, we test whether a similar methodology can be applied to learning temporal concepts and an associated lexicon to answer the question ―how long ‖ did it take to complete a journey. Using evolutionary language games for specific and generic journeys, successful communication was established for concepts based on representations of time, distance, and amount of change. The studies demonstrate that a lexicon for journey duration can be grounded using a variety o...|$|R
40|$|Abstract – This paper {{presents}} a software architecture required {{to build a}} user-friendly interface for a robot manipulator. For this purpose, during research a prototype 5 -DOF robotic arm was built. The end effector of this robotic arm is a two-fingered gripper. The interface consists of two components generic to most industrial robot systems present today, first is the teach-pendant and second one is the computer based <b>robot</b> programming <b>language.</b> The main focus of the project {{is to develop a}} Language that provides robot-specific commands along with the framework common to all high level languages. A user interface has been developed that provides powerful tools for efficient control of the robot manipulator. The aspiration of this work is to present a system which is powerful, cost effective {{and at the same time}} intelligible to an average user. Key-Words:- robotic arm, <b>robot</b> programming <b>language,</b> teach pendant, user interface, AVR microcontroller...|$|R
