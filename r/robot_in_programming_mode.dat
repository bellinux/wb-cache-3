0|10000|Public
5000|$|... #Caption: A touch-screen {{programmable}} thermostat <b>in</b> <b>programming</b> <b>mode.</b>|$|R
5000|$|... #Caption: HP-67 <b>in</b> <b>programming</b> <b>mode</b> {{showing the}} key code for STO + 6 ...|$|R
5000|$|The MK-52 has {{two main}} modes of operation: {{automatic}} <b>mode</b> and <b>programming</b> <b>mode.</b> General calculations and operations are performed <b>in</b> automatic <b>mode,</b> while <b>programs</b> are fed as input <b>in</b> <b>programming</b> <b>mode.</b> The keystroke sequence [...] ( [...] in appearance) switches the MK-52 to automatic mode, while [...] (...) switches it to <b>programming</b> <b>mode.</b>|$|R
50|$|Introduced in 1992 the R7 offered {{complete}} flash automation. <b>In</b> <b>program</b> <b>mode</b> flash {{control was}} fully automatic, selected as necessary by the camera. In any mode flash ready would select flash synchronisation shutter speed.|$|R
50|$|The MK-52's {{programming}} commands are typed {{into the}} MK-52 <b>in</b> <b>programming</b> <b>mode</b> and are then executed. The MK-52 is fully {{capable of being}} programmed to manage memory and to use both conditional and unconditional branching.|$|R
50|$|<b>Program</b> <b>mode</b> can {{be biased}} towards longer or shorter shutter speeds {{by using the}} shutter speed dial. Also <b>in</b> <b>program</b> <b>mode</b> {{automatic}} flash exposure was fully controlled by the camera: off in daylight conditions, fill in flash with low light, full flash when dark. Normal flash synchronisation speed is 1/250s and with suitable flash units can {{be up to the}} camera's highest speed of 1/8000s.|$|R
5000|$|P: <b>Program</b> <b>mode</b> has {{the camera}} {{calculate}} both shutter speed and aperture (given a manually or automatically selected ISO). Higher-end cameras offer partial manual control to {{shift away from}} the automatically calculated values (increasing aperture and decreasing shutter time or conversely). The difference between <b>Program</b> <b>mode</b> and Full Auto <b>mode</b> is that <b>in</b> <b>program</b> <b>mode,</b> only the exposure is automatic, while other camera settings (e.g. shooting mode, exposure compensation, flash) can be set manually; in Full Auto mode everything is automatic.|$|R
500|$|The machine's Sinclair BASIC {{interpreter}} {{is stored}} in ROM (along with fundamental system-routines) and was written by Steve Vickers on contract from Nine Tiles Ltd. The Spectrum's chiclet keyboard (on top of a membrane, similar to calculator keys) is marked with BASIC keywords. For example, pressing [...] "G" [...] when <b>in</b> <b>programming</b> <b>mode</b> would insert the BASIC command GOTO.|$|R
5000|$|<b>In</b> <b>programming</b> <b>mode,</b> {{the screen}} {{displays}} {{information about the}} <b>program</b> <b>in</b> memory, represented by two hexadecimal-digit operation codes. For example, if [...] is displayed, then this means that [...] is stored at program step 00, [...] is stored at program step 01, [...] is stored at program step 02, and the machine is prompting for data to be input, to be stored at program step 03.|$|R
50|$|Cameras {{can perform}} autobracketing by {{adjusting}} either the shutter speed (typically in aperture priority mode, sometimes also <b>in</b> manual or <b>program</b> <b>mode)</b> or the aperture setting (typically in shutter priority <b>mode).</b> <b>In</b> <b>programmed</b> exposure <b>mode,</b> many cameras will alter both parameters {{at the same}} time. Some cameras allow to swap the parameter used for shifting in manual mode. Digital cameras may also alter the ISO setting if auto-ISO is enabled.|$|R
50|$|The manual {{controls}} {{could be}} used to independently control the three motors. To record a program; the controller had to be put <b>in</b> <b>programming</b> <b>mode,</b> and then any manual control would be recorded to the program. Pauses could also be included <b>in</b> a <b>program.</b> When the recording was done, the controller could successfully recall and execute any manual action done during the recording. The executing program could be set to loop infinitely.|$|R
50|$|At weekends, KOEL has brief news {{breaks from}} ABC News with home {{improvement}} tips, field and stream radio, and classic country music (when not <b>in</b> special <b>programming</b> <b>mode).</b>|$|R
50|$|Programming simple {{problems}} with the TI-59 or TI-58 is a very straightforward process. <b>In</b> <b>programming</b> <b>mode,</b> the TI-59 simply records key presses. Alphabetical keys provide easy access to up to ten entry points.It is also possible to activate any of the <b>programs</b> <b>in</b> the pre-programmed memory module, and run one like any user-written program. Programs written by the user can also use <b>programs</b> <b>in</b> the module as subroutines. The module's programs run directly from ROM, so they leave the calculator's memory free for the user.|$|R
50|$|The flash {{system in}} the EOS cameras {{has gone through a}} number of {{evolutions}} since its first implementation. The basic EOS flash system was actually developed not for the first EOS camera, but rather for the last high-end FD-mount manual-focus camera, the T90, launched in 1986. This was the first Canon camera with through-the-lens (TTL) flash metering, although other brands had been metering that way for some time. It also introduced the A-TTL (Advanced TTL) system for better flash exposure <b>in</b> <b>program</b> <b>mode,</b> using infrared preflashes to gauge subject distance.|$|R
5000|$|Unlike the 7000i, the 5000i {{includes}} a built-in flash, rigidly {{mounted on the}} pentaprism; Minolta claimed that this was [...] "the world's most compact AF SLR camera with built-in flash".The flash fires automatically <b>in</b> <b>Program</b> <b>mode</b> if the camera determines that the shutter speed will be too low to hand-hold, or that the main subject is backlit.The flash can be turned off if not desired and can be manually selected in Manual mode. The X-sync shutter speed is 1/90 second. A proprietary Minolta flash shoe atop the pentaprism allows the use of dedicated Minolta flashes.|$|R
50|$|A {{cornerstone}} {{of the program was}} incorporation of learned behaviors <b>in</b> the <b>robots.</b> <b>In</b> addition, the <b>program</b> used passive optical systems to accomplish long-range scene analysis.|$|R
50|$|<b>In</b> 'P' (<b>Programmed</b> AE) <b>mode,</b> the {{micro-computer}} calculates stepless aperture (f/stop) and stepless {{shutter speed}} using pre-programmed values.|$|R
50|$|<b>In</b> {{computer}} <b>programming,</b> addressing <b>modes</b> {{are primarily}} {{of interest to}} compiler writers and to those who write in assembly languages.|$|R
40|$|The {{simulation}} of motion {{and work of}} industrial robots is being used more frequently in industry because it enables generating, testing and optimization of <b>robot</b> <b>programming.</b> <b>In</b> this work {{the development of an}} application for simple RV- 2 AJ <b>robot</b> simulation <b>in</b> C++ <b>programming</b> language for Windows OS, with use of OpenGL is presented. This application enables {{simulation of}} robot motion with direct and inverse kinematics calculations, and basic off-line programming of robot. This work is a foundation for further development of the application for RV- 2 AJ robot simulation, that should enable dynamics simulation and development and testing of control algorithms...|$|R
40|$|The {{objectives}} {{of this program}} are as follows: modelling of guided waves in fiber-reinforced plates in terms of different modes; and analysis of scattering by transverse cracks using modal representation. A hybrid numerical method combining the finite element representation of a region around the crack with the modal representation in the exterior region will be used <b>in</b> this <b>program.</b> <b>Modes</b> will be obtained using the through-the-thickness discretization of the displacement field...|$|R
5000|$|Junta {{has a small}} {{floating}} servo-tech <b>robot</b> <b>in</b> {{his house}} <b>programmed</b> with his mother's memories and speech patterns, and which speaks only in Spanish. According to him he [...] "salvaged" [...] it while working in Latveria, the homeland of Doctor Doom. This, of course, is a lie.|$|R
40|$|Programming by {{demonstration}} {{has been}} introduced {{in recent years as}} a rapid and efficient way to impart skills to <b>robots.</b> <b>In</b> <b>programming</b> by demonstration, a robot learns a new skill by having an end-user perform demonstrations of the skill, bypassing the need for traditional programming. As robotic systems can often be considered as composed of multiple heterogeneous components, learning skills for these systems requires capturing and preserving concurrency and synchronization requirements in addition to task structure. Furthermore, learning time-critical tasks depends on the ability to model temporal elements in demonstrations. This thesis proposes a modeling framework <b>in</b> <b>programming</b> by demonstration based on Petri nets capable of modeling these aspects. In this approach, models of tasks are constructed from segmented demonstrations as task Petri nets, which can be executed as discrete controllers for reproduction. The implementation details of a complete prototypical system are given, showing how elements of time-critical tasks can be mapped to those of Petri nets. Finally, the approach is validated by an experiment <b>in</b> which a <b>robot</b> learns and reproduces a musical keyboard-playing task. Validerat; 20150824 (global_studentproject_submitter...|$|R
40|$|The Connection Machine CM- 5 {{supports}} both SIMD and MIMD <b>programming</b> <b>modes.</b> The SIMD mode is simulated {{over the}} MIMD mode. This simulation {{is likely to}} lead to a loss of performance <b>in</b> SIMD <b>programs.</b> This paper describes the design and implementation of benchmarks which were used to bring out the difference in speed between the two <b>programming</b> <b>modes</b> with CM Fortran and message-passing Fortran. Two kinds of benchmarks are discussed in this paper. The first kind consists of synthetic benchmarks in which we measure time for basic arithmetic operations and communication time. The second kind comprises application benchmarks for which we have developed two typical applications <b>in</b> both <b>programming</b> <b>modes</b> using the same algorithm. The experimental results conclusively show that message-passing Fortran performs considerably better than CM Fortran...|$|R
50|$|The {{university}} got {{approval from}} DEB- Distance Education Bureau under UGC, via Letter No. 1105-1109 {{in the year}} 2013 to offer <b>programs</b> <b>in</b> distance <b>mode.</b>|$|R
40|$|A common {{practice}} <b>in</b> most <b>programming</b> curricular is {{for students to}} learn computer <b>programming</b> <b>in</b> an Integrated Development Environment (IDE). Even though IDEs provide good program development support, very often, what students learn is limited to what an IDE provides. The limitation can be overcome by using additional learning activi-ties in class. LEGO RCX robots {{can be used to}} provide additional learning activities that IDEs do not provide. We used the LEGO RCX <b>robots</b> <b>in</b> our <b>programming</b> classes at three different programming skill levels (introductory, in-termediate, and advanced) and found that they are very useful in enhancing our curriculum...|$|R
50|$|Crobots borrows {{the concept}} used {{from the game}} RobotWar that ran on the {{original}} Apple II computer. <b>Robots</b> were <b>programmed</b> <b>in</b> a proprietary <b>programming</b> language that was interpreted and included a real-time view of the game as it was played.|$|R
50|$|This was {{the first}} version to run Windows <b>programs</b> <b>in</b> {{protected}} <b>mode,</b> although the 386 enhanced mode kernel was an enhanced version of the protected mode kernel for Windows/286.|$|R
50|$|First {{released}} in 1990-01-10, {{it can provide}} extra conventional memory <b>in</b> text <b>mode</b> <b>programs,</b> by reclaiming buffers located in UMA {{that are used in}} graphics modes. It requires EGA/VGA-compatible video card.|$|R
40|$|This paper {{details the}} {{development}} of a model for a mobile robot constructed from Lego® Mindstorms®. The equations representing the dynamics and kinematics of the <b>robot</b> are derived. <b>In</b> addition, the motors and wheels are represented in the model. The mobile <b>robot</b> is <b>programmed</b> <b>in</b> graphical <b>programming</b> language NXT-G and can follow a black line without problems, even if the route to achieve is difficult. ...|$|R
40|$|Abstract — The {{industrial}} robot programming {{is a work}} for specialist in robotics. Today, this work is very hard {{because there are many}} robot manufacturers with different languages and different programming environments. Although, off-line programming is an way that can reduce drastically the machines stop time to maintenance. With the use of object oriented design patterns, it is possible minimize the time spent <b>in</b> <b>robot</b> <b>programming.</b> <b>In</b> this work is proposed a model to <b>program</b> <b>robots,</b> encapsulate <b>in</b> java classes. This way has the main advantage of best source code utilization. Grouping the business classes in modules by functionalities, we can reduce complexity between low matching. Recognized patterns like Facade and Template Method will construct the base to develop this programming framework. The <b>programming</b> <b>robot</b> languages tested <b>in</b> this work was Rapid, Karel and Melfa Basic IV, respectively languages used by ABB, Fanuc and Mitsubishi constructors. Index Terms — Framework, off-line programming, robot code genera-tor. I...|$|R
40|$|Robot {{programming}} {{systems have}} not {{kept pace with}} developments <b>in</b> general purpose <b>programming</b> environments. Robot systems have special demands related to their complex interactions in real environments, and their complex sensors and actuators. We focus on <b>robot</b> <b>programming</b> <b>in</b> a laboratory research environment where robots, operating systems, hardware platforms, programming languages, and researchers all di#er and change...|$|R
40|$|With the {{increasing}} use of industrial <b>robots</b> <b>in</b> manufacturing, off-line <b>programming</b> becomes an economic factor. An important tool <b>in</b> an off-line <b>programming</b> system is a simulator which allows to verify the correct task execution. The principle aspects of such a simulation system are discussed. The features required especially for the verification of assembly task execution are outlined. The concepts of a realized system which allows the handling of time variant kinematik linkages and the modelling of communication aspects is described...|$|R
40|$|This is {{the final}} report of a two-year, Laboratory Directed Research and Development (LDRD) project at the Los Alamos National Laboratory (LANL). A method was {{developed}} to incorporate learning and adaptive capabilities into traditional rule-based descriptions of environments. The learning and adapting capacity is critical to <b>robot</b> <b>programming</b> <b>in</b> highly unstructured and variable environments such as the operation of <b>robots</b> <b>in</b> gloveboxes. The technology {{is based on a}} hybrid expert system technology, called expert networks, and was developed with the associated knowledge capture techniques...|$|R
5000|$|On a PC, {{using the}} Windows Compatibility {{features}} {{can make it}} work. Right click on the icon used to launch it and select the [...] "Run this <b>program</b> <b>in</b> compatibility <b>mode</b> for Windows 95". One must also check all of the settings below.|$|R
50|$|The {{transfer}} is activated by the DREQ {{which can be}} deactivated once acknowledged by DACK. The transfer continues until end of process EOP (either internal or external) is activated which will trigger terminal count TC to the card. Auto-initialization may be <b>programmed</b> <b>in</b> this <b>mode.</b>|$|R
5000|$|Direct mode, {{also known}} as {{immediate}} mode is a computing term referring to the input of textual commands outside {{the context of a}} program. The command would be executed immediately and the results printed on screen, <b>in</b> contrast to <b>programming</b> <b>mode</b> where nothing would be executed until a specific command was given. (BASIC's RUN {{is an example of a}} direct mode command.) Some commands could be used in either mode, while others were exclusive to one or the other.|$|R
