449|100|Public
2500|$|Visual Studio Team System Profiler (VSTS Profiler) {{is a tool}} {{to analyze}} the {{performance}} of [...]NET projects that analyzes the space and time complexity of the program. It analyzes the code and prepares a report that includes CPU sampling, instrumentation, [...]NET memory allocation and <b>resource</b> <b>contention.</b>|$|E
50|$|In a {{communications}} system, deadlocks occur mainly due to lost or corrupt signals rather than <b>resource</b> <b>contention.</b>|$|E
50|$|Failure to {{properly}} resolve <b>resource</b> <b>contention</b> problems {{may result in}} a number of problems, including deadlock, livelock, and thrashing.|$|E
30|$|Reliable {{performance}} guarantees {{based on}} configuration parameters {{is the key}} aim – real performance needs to match the expected or promised one for the provider to fulfill the SLA obligations. Accuracy in virtualisation environments is specifically challenging [24] due to <b>resource</b> <b>contentions</b> because of the layered architecture, shared resources and distribution.|$|R
40|$|High {{performance}} compilers increasingly rely on accurate {{modeling of}} the machine resources to efficiently exploit the instruction level parallelism of an application. In this paper, we propose a reduced machine description that results in faster detection of <b>resource</b> <b>contentions</b> while preserving the scheduling constraints present in the original machine description. The proposed approach reduces a machine description in an automated, error-free, and efficient fashion. Moreover, it fully supports schedulers that backtrack and process operations in arbitrary order. Reduced descriptions for the DEC Alpha 21064, MIPS R 3000 /R 3010, and Cydra 5 result in 4 to 7 times faster detection of <b>resource</b> <b>contentions</b> and require 22 to 90 % of the memory storage used by the original machine descriptions. Precise measurement for the Cydra 5 indicates that reducing the machine description results in a 2. 9 times faster contention query module...|$|R
50|$|In September 2013, Xangati raised $11M in Series A {{funding from}} Citrix Systems and HighBAR Partners.3 Xangati’s offerings include service {{assurance}} suites for VDI, Published Apps, Web Apps and Custom Workloads. Integrated into these suites is its unique StormTracker™ deep analytics capability {{to identify and}} resolve <b>resource</b> <b>contentions</b> that cause widespread and unanticipated performance degradation.|$|R
50|$|In {{computer}} {{networking and}} telecommunication, collision-avoidance methods {{try to avoid}} <b>resource</b> <b>contention</b> by attempting to avoid simultaneous attempts to access the same resource.|$|E
5000|$|Visual Studio Team System Profiler (VSTS Profiler) {{is a tool}} {{to analyze}} the {{performance}} of [...]NET projects that analyzes the space and time complexity of the program. It analyzes the code and prepares a report that includes CPU sampling, instrumentation, [...]NET memory allocation and <b>resource</b> <b>contention.</b>|$|E
50|$|Both {{single user}} and {{multiuser}} libraries {{can be built}} with c-treeACE. The multiuser support is a shared-file mode implementation where the operating system provides the locking rather than the server process. <b>Resource</b> <b>contention</b> can become an issue with the standalone multiuser model as concurrency requirements and network operations increase.|$|E
40|$|Execution {{control of}} plans {{is a very}} active domain of research, but remains a major {{challenge}} when performed on board real autonomous systems such as robots or satellites. In such a context, where execution concurrency, <b>resources</b> <b>contention</b> and environment dynamic characterize the domain, {{the use of a}} temporal planner and a temporal execution control system is desirable. This pape...|$|R
40|$|Current {{and future}} {{networks}} must accommodate {{a wide variety}} of network applications. These applications require a Quality of Service (QoS) which can be provided through proper network resource allocation. Examples include TCP congestion control, RSVP admission control, ATM ABR rate allocation, and others. Due to the finite amount of <b>resources,</b> <b>contention</b> frequently occurs in networks. For this reason, a metho...|$|R
40|$|The paper {{establishes}} two {{necessary and}} sufficient {{conditions for the}} absence of deadlock in <b>resource</b> <b>contentions</b> under the expedient allocation policy. Their equivalence is proved. One of these was discovered independently by Ibaraki and Kameda. The conditions are essentially the condition of the König-Hall Theorem for the existence of a system of distinct representatives. If there are no multiple resources the conditions simplify to the condition for acyclicity of hypergraphs...|$|R
50|$|The act of {{refusing to}} release a {{resource}} when a process has finished using it {{is known as a}} resource leak, and is an issue in sequential computing. Multiple processes wish to access a limited resource can be an issue in concurrent computing, and is known as <b>resource</b> <b>contention.</b>|$|E
50|$|In {{computer}} science, the test-and-set CPU {{instruction is}} used to implement mutual exclusion in multiprocessor environments. Although a correct lock can be implemented with test-and-set, {{it can lead to}} <b>resource</b> <b>contention</b> in busy lock (caused by bus locking and cache invalidation when test-and-set operation needs to access memory atomically).|$|E
50|$|Resolving <b>resource</b> <b>contention</b> {{problems}} {{is one of}} the basic functions of operating systems. Various low-level mechanisms can be used to aid this, including locks, semaphores, mutexes and queues. The other techniques that can be applied by the operating systems include intelligent scheduling, application mapping decision, and page colouring.|$|E
40|$|This book {{discusses}} {{the characteristics of}} virtualized cloud networking, identifies the requirements of cloud network management, and illustrates the challenges in deploying virtual clusters in multi-tenant cloud data centers. The book also introduces network partitioning techniques to provide contention-free allocation, topology-invariant reallocation, and highly efficient resource utilization, based on the Fat-tree network structure. Managing cloud data center resources without considering <b>resource</b> <b>contentions</b> among different cloud services and dynamic resource demands adversely affects the performance of cloud services and reduces the resource utilization of cloud data centers. These challenges are mainly due to strict cluster topology requirements, <b>resource</b> <b>contentions</b> between uncooperative cloud services, and spatial/temporal data center resource fragmentation. Cloud data center network resource allocation/reallocation which cope well with such challenges will allow cloud services to be provisioned with predictable network performance, mitigate service performance degradation and even guarantee service level agreements. Virtualized Cloud Data Center Networks: Issues in Resource Management tackles the challenges of managing cloud data center networks and introduces techniques to efficiently deploy large-scale distributed computing applications that require predictable performance in multi-tenant cloud data centers. ...|$|R
40|$|Current {{resource}} managers do {{not have}} adequate node allocation and distribution strategies to efficiently schedule jobs on multi-core multi-threaded systems. Clusters composed of multiple cores per processor as well as multiple processors per node are presenting new challenges to users when trying to run their program efficiently on this class of machines. New allocation algorithms and their respective user interfaces need to be devised to ensure minimum contention for cache and memory, reduced on-chip contention, etc. as well as evaluate trade-offs between <b>resource</b> <b>contentions.</b> 1...|$|R
40|$|Abstract—An infrastructure-as-a-service {{cloud system}} {{provides}} computational capacities to remote users. Parallel processing {{in the cloud}} system can shorten the execution of jobs. Parallel processing requires a mechanism to scheduling the executions order as well as resource allocation. Furthermore, a preemptable scheduling mechanism can improve the utilization of resources in clouds. In this paper, we present a preemptable job scheduling mechanism in cloud system. We propose two feedback dynamic scheduling algorithms for this scheduling mechanism. We compare these two scheduling algorithms in simulations. The {{results show that the}} feedback procedure in our algorithms works well in the situation where <b>resource</b> <b>contentions</b> are fierce...|$|R
50|$|In {{computer}} science, <b>resource</b> <b>contention</b> is {{a conflict}} over access to a shared resource such as random access memory, disk storage, cache memory, internal buses or external network devices. In recent years, research on the contention is more focused on the resources in the memory hierarchy, e.g., last-level caches, front-side bus, memory socket connection.|$|E
50|$|When {{multiple}} processes wish to use {{a shared}} resource, {{this can lead to}} <b>resource</b> <b>contention.</b> Access to memory areas is often controlled by semaphores, which allows a pathological situation called a deadlock, when different threads or processes try to allocate resources already allocated by each other. A deadlock usually leads to a program becoming partially or completely unresponsive.|$|E
50|$|This {{technique}} is conceptually simpler than the load queue search, and it eliminates a second CAM and its power-hungry search (the load queue {{can now be}} a simple FIFO queue). Since the load must re-access the memory system just before retirement, the access must be very fast, so this scheme relies on a fast cache. No matter how fast the cache is, however, the second memory system access for every out-of-order load instruction does increase instruction retirement latency and increases {{the total number of}} cache accesses that must be performed by the processor. The additional retire-time cache access can be satisfied by re-using an existing cache port; however, this creates port <b>resource</b> <b>contention</b> with other loads and stores in the processor trying to execute, and thus may cause a decrease in performance. Alternatively, an additional cache port can be added just for load disambiguation, but this increases the complexity, power, and area of the cache. Some recent work (Roth 2005) has shown ways to filter many loads from re-executing if it is known that no RAW dependence violation could have occurred; such a technique would help or eliminate such latency and <b>resource</b> <b>contention.</b>|$|E
40|$|This {{paper is}} written in honour to A. Hordijk. It {{establishes}} product form results for a generic and instructive multi-class tandem queue with blocking, to which A. Hordijk has directly and indirectly contributed. First, a sufficient and necessary product form characterization is provided. Next, three special cases are briefly presented. These illustrate the possibility of product forms despite finite capacity constraints (blocking), unproportional processor sharing mechanisms and <b>resource</b> <b>contentions</b> (such as for access control). The results are partially new and of interest for present-day applications. In essence these rely upon the pioneering work by A. Hordijk...|$|R
40|$|International audienceThe {{increasing}} {{complexity of}} system-on-chip design and shorter {{time to market}} constraints has stimulated systems designers to investigate performance characteristics of the final system implementation in the early design stages, by means of modeling the design {{at a high level}} of abstraction. This paper presents the virtual node concept for modeling the shared resources of a system-on-chip, therefore specifically dedicated {{to the study of the}} impact of shared <b>resources</b> <b>contention</b> on the overall systems performance, which is often defined by concurrent use cases. The overall approach is based on using a specific UML modeling profile and a SystemC-based simulator to execute models and analyze their performance...|$|R
40|$|High {{performance}} compilers increasingly rely on accurate {{modeling of}} the machine resources to efficiently exploit the instruction level parallelism of an application. In this dissertation, we first propose a reduced machine description that results in significantly faster detection of <b>resource</b> <b>contentions</b> while preserving the scheduling constraints present in the original machine description. This approach reduces a machine description in an automated, error-free, and efficient fashion. Moreover, it fully supports the elaborate scheduling techniques that are used by high-performance compilers, such as scheduling an operation earlier than others that are already scheduled, unscheduling operations due to resource conflicts, and efficient handling of periodic resource requirements found in software pipelined schedules. Re [...] ...|$|R
50|$|A load delay slot is an {{instruction}} which executes immediately after a load (of a register from memory) {{but does not}} see, and need not wait for, {{the result of the}} load. Load delay slots are very uncommon because load delays are highly unpredictable on modern hardware. A load may be satisfied from RAM or from a cache, and may be slowed by <b>resource</b> <b>contention.</b> Load delays were seen on very early RISC processor designs. The MIPS I ISA (implemented in the R2000 and R3000 microprocessors) suffers from this problem.|$|E
50|$|In computing, {{a system}} resource, or simply resource, is any {{physical}} or virtual component of limited availability within a computer system. Every device {{connected to a}} computer system is a resource. Every internal system component is a resource. Virtual system resources include files (concretely file handles), network connections (concretely network sockets), and memory areas. Managing resources {{is referred to as}} resource management, and includes both preventing resource leaks (releasing a resource when a process has finished using it) and dealing with <b>resource</b> <b>contention</b> (when multiple processes wish to access a limited resource).|$|E
50|$|Through a {{resource}} reservation procedure transmission capacity is booked for a flow on each link it traverses {{during the time}} frame (or time frames) predefined for its forwarding, thus setting up a synchronous virtual pipe (SVP). The capacity during each time frame can be is partially or totally reserved {{to one or more}} flows. Consequently, the time cycle provides the basis for a periodic repetition of the reservation that ensures enough transmission resources to be available on each link to forward the packets of each flow, which prevents delays due to <b>resource</b> <b>contention</b> and loss resulting to congestion.|$|E
40|$|We will {{formulate}} {{the problem}} of resolving spatial (space occupancy and support-stability) interactions in terms of tools developed in Operating Systems for the problems of deadlocks and synchronization. We show how to construct state graphs and to detect <b>resource</b> <b>contentions</b> and deadlocks from these state graphs. We describe an algorithm, called CONTAC, to deal with deadlocks where 'processes' represent the ordered motions of parts. The algorithm is a monitor-like process using preventative preemptive protocol to resolve higher-degree deadlocks. We develop the representation for knowledge about current allocations, pending requests, and synchronization constraints, to generate a contention-free sequence of actions. In this paper we focus on modeling deadlocks which are manifestations of spatial interactions...|$|R
40|$|Scheduling can be formalized as a Constraint Satisfaction Problem (CSP). Within this {{framework}} activities {{belonging to a}} plan are interconnected via temporal constraints that account for slack among them. Temporal representation must include methods for constraints propagation and provide a logic for symbolic and numerical deductions. In this paper we describe a support framework for opportunistic reasoning in constraint directed scheduling. In order to focus the attention of an incremental scheduler on critical problem aspects, some discrete temporal indexes are presented. They are also useful for the prediction {{of the degree of}} <b>resources</b> <b>contention.</b> The predictive method expressed through our indexes {{can be seen as a}} Knowledge Source for an opportunistic scheduler with a blackboard architecture...|$|R
40|$|In {{order to}} reduce energy {{consumption}} of data centers while employing infrastructure resource effectively, a comprehensive resource management method using an improved online energy saving mapping algorithm for virtual machines of data centers is proposed. An intelligent feedback management framework is built for online resource optimization. We propose reinforcement learning and threshold based virtual machine migration to find the lowest energy consumption mapping between virtual machines and host of data centers dynamically and avoid the <b>resources</b> <b>contention</b> in physical machines. Our experimental results shows that the proposed effective online energy saving resource optimization methodology can reduce data center energy consumption by at least 30. 3 % compared to traditional random placement and save at least 10 % running time compared to the offline Q-Learning scheduling algorithm...|$|R
5000|$|The {{implementation}} of the leaky-bucket as a queue does not use available network resources efficiently. Because it transmits packets only at fixed intervals, {{there will be many}} instances when the traffic volume is very low and large portions of network resources (bandwidth in particular) are not being used. Therefore no mechanism exists in the leaky-bucket implementation as a queue to allow individual flows to burst up to port speed, effectively consuming network resources at times when there would not be <b>resource</b> <b>contention</b> in the network. Implementations of the token bucket and leaky bucket as a meter do, however, allow output traffic flows to have bursty characteristics.|$|E
50|$|Some {{security}} applications maintain fewer dynamic states. Firewall technologies typically inspect smaller {{amounts of}} data such as TCP & UDP headers and usually maintain less state. Therefore, simple IP firewall technologies {{more likely to be}} candidates for virtualization. Many intrusion prevention technologies use signatures and dynamic configurations that enable a deep inpsection into the payload and sometimes monitoring session streams. Intrusion prevention also typically requires heavy state retention and maintenance, and make heavy use of dynamic data in memory. Often highly dynamic data memory segments are less able to be deduplicated as they are more dynamic than code segments. As shared resources are required more often this leads to <b>resource</b> <b>contention</b> which can add latency particularly for systems that forward datagrams. Technology such as Blue Lane's application layer enforcement is less affected because it inspects less traffic: that which is heading to known vulnerabilities while letting innocent traffic pass.|$|E
50|$|The central {{challenge}} around MobiCon {{is simultaneously}} supporting numerous applications using very limited resources. Furthermore, these available resources dynamically change {{due to their}} wearable forms and the user’s mobility. Also, resource usage by running applications or environmental factors such as interference continuously affects the resource availability.These challenges require system level support. Each application must efficiently share the limited resources. Without system-level support, however, each individual application has an extremely limited view of the existence or resource uses of other applications, and further cannot negotiate with the concurrent applications for coordinated and efficient resource utilization. MobiCon helps applications share resources and processing by seamlessly adapting the applications to dynamic resource availability by resolving <b>resource</b> <b>contention</b> between applications or selecting the best processing plan according to the resource availability at that time. The MobiCon Middleware Computing Platform can seamlessly adapt the resources committed to each application so that all system resources can be used the most efficiently.|$|E
40|$|As Java is {{emerging}} {{as one of the}} major programming languages in software development, studying how Java applications behave on recent SMT processors is of great interest. This paper characterizes the performance of Java applications on an Intel Pentium 4 Hyper-Threading processor. Using the performance counters provided by Pentium 4, we quantitatively evaluate micro-architecture metrics while running various types of Java applications. The experimental results reveal that: (1) Hyper-Threading can indeed improve the performance of multithreaded Java programs; (2) The <b>resource</b> <b>contentions</b> within Pentium 4 are the major reason of pipeline inefficiency, which prevents better performance promised by SMT; (3) The static partition design of Hyper-Threading causes considerable performance loss for many single-thread Java programs; (4) Most multiprogrammed Java benchmarks can achieve decent combined speedups on Hyper-Threading processors. 1...|$|R
40|$|Abstract—Virtualized cloud {{systems are}} prone to {{performance}} anomalies due to various reasons such as <b>resource</b> <b>contentions,</b> software bugs, and hardware failures. In this paper, we present a novel PREdictive Performance Anomaly pREvention (PREPARE) system that provides automatic performance anomaly prevention for virtualized cloud computing infrastructures. PREPARE integrates online anomaly prediction, learning-based cause inference, and predictive prevention actuation to minimize the performance anomaly penalty without human intervention. We have implemented PREPARE {{on top of the}} Xen platform and tested it on the NCSU’s Virtual Computing Lab using a commercial data stream processing system (IBM System S) and an online auction benchmark (RUBiS). The experimental results show that PREPARE can effectively prevent performance anomalies while imposing low overhead to the cloud infrastructure. Index Terms—performance anomaly prevention, online anomaly prediction, cloud computing I...|$|R
40|$|The next {{generation}} of communications satellites may be designed as a fast packet-switched constellation of spacecraft able to withstand substantial bandwidth capacity fluctuation ranging from unstable weather phenomena to intentional jamming of communication. We have designed and partially implemented an architecture for managing satellite telecommunations network resources. Our approach supports advance reservations and dynamic requests, negotiation and fulfilment of prioritized Quality of Service (QoS) contracts, graceful degradation {{in the presence of}} dynamic tasks and environmental changes, and optimization of geometrically constrained resources. Our integration of planning and execution to address this task uses planning to avoid <b>resource</b> <b>contentions</b> among requested activities and to configure an independently competent execution system. Our system can be used in routine operations or as a simulation-based design tool. 1 Introduction The current revolution in i [...] ...|$|R
