424|96|Public
5|$|For {{the same}} reason, the version {{history of a}} {{distributed}} <b>revision</b> <b>control</b> system generally has {{the structure of a}} directed acyclic graph, {{in which there is a}} vertex for each revision and an edge connecting pairs of revisions that were directly derived from each other. These are not trees in general due to merges.|$|E
5|$|Twitter has {{a history}} of both using and {{releasing}} open source software while overcoming technical challenges of their service. A page in their developer documentation thanks dozens of open source projects which they have used, from <b>revision</b> <b>control</b> software like Git to programming languages such as Ruby and Scala. Software released as open source by the company includes the Gizzard Scala framework for creating distributed datastores, the distributed graph database FlockDB, the Finagle library for building asynchronous RPC servers and clients, the TwUI user interface framework for iOS, and the Bower client-side package manager. The popular Twitter Bootstrap web design library was also started at Twitter and is the second most popular repository on GitHub.|$|E
5|$|The Witness {{uses its}} own engine {{developed}} by Blow and his team, which took {{a significant portion}} of the development time. Blow was insistent on using his own game engine instead of an existing solution such as Unity, as he would be able to fully control every element of a game engine that he created himself. As a compact game world compared to open-world games, the whole of the island of The Witness was treated as one zone, simplifying the gameplay and engine development. This presented a secondary challenge to the team as to concurrently work on the project, they needed to find a means to allow multiple developers to edit areas without resorting to using locking on their version control system as well as being able to work without being connected to a central server. Blow and his team developed an unconventional means of serializing the game world into text files that would have <b>revision</b> <b>control</b> while at the same time making it easy for individuals to discover conflicting edits. They also converted the 10,000-some entities in the game world into their own individual files for tracking to further reduce conflict between edits. Other features of this system including using defined control points for terrain elements to automatically recalculate seamless connections between them within the game's rendering engine, and a built-in world editor within the game engine to easily access existing serialized elements and create new ones.|$|E
5000|$|SVNBridge, a Windows client or server side {{extension}} to TFS that allows access to TFS <b>revision</b> <b>controlled</b> items from Subversion client applications.|$|R
5000|$|Models are {{units of}} {{communication}} and collaboration between designers, implementers, operators, and users; and can easily be shared, tracked, and <b>revision</b> <b>controlled.</b> This is important because complex services are often built and maintained {{by a variety of}} people playing different roles.|$|R
50|$|Kallithea {{supports}} hosting repositories of Mercurial and Git {{version control}} systems. Repositories can be grouped and thus allow to define common properties like access control. Its web interface for projects allows to fork {{as well as}} management of pull requests. It {{can also be used}} to quickly exchange code snippets by means of a <b>revision</b> <b>controlled</b> pastebin ("gists").|$|R
25|$|Darcs is a <b>revision</b> <b>control</b> system {{written in}} Haskell, with several {{innovative}} features, such as more precise control of patches to apply.|$|E
25|$|Another {{property}} of Git {{is that it}} snapshots directory trees of files. The earliest systems for tracking versions of source code, Source Code Control System (SCCS) and <b>Revision</b> <b>Control</b> System (RCS), worked on individual files and emphasized the space savings {{to be gained from}} interleaved deltas (SCCS) or delta encoding (RCS) the (mostly similar) versions. Later <b>revision</b> <b>control</b> systems maintained this notion of a file having an identity across multiple revisions of a project. However, Torvalds rejected this concept. Consequently, Git does not explicitly record file revision relationships at any level below the source code tree.|$|E
25|$|On June 7, 2005, Safari {{developer}} Dave Hyatt {{announced on}} his weblog that Apple was open-sourcing WebKit (formerly, only WebCore and JavaScriptCore were open source) and opening up access to WebKit's <b>revision</b> <b>control</b> {{tree and the}} issue tracker. This was announced at Apple's Worldwide Developers Conference 2005 by Apple Senior Vice President of Software Engineering Bertrand Serlet.|$|E
40|$|Sentence <b>revision</b> and {{executive}} <b>control</b> in French-speaking children and adults: Evidence from wh-questions with filled-gaps LASSOTTA, Romy, et al. LASSOTTA, Romy, et al. Sentence <b>revision</b> {{and executive}} <b>control</b> in French-speaking children and adults: Evidence from wh-questions with filled-gaps. In: 37 th annual Boston Universit...|$|R
5000|$|... #Subtitle level 4: Joystick Controlled Motion & Output <b>Controlled</b> <b>Revision</b> ...|$|R
40|$|On any project, {{it is not}} {{possible}} to have complete and accurate concern maps for all possible tasks. We present an approach to creating concern maps from available secondary software work artifacts from common software tools, such as <b>revisions</b> <b>control.</b> We mined and indexed concern fragments from repositories of those tools. Developers can search the index for an initial set of relevant fragments. To create a final concern map, the members from the initial set of fragments are validated, merged and expanded using a call graph. Members of the final concern map members are also ranked to guide developers to more relevant sections of the code...|$|R
25|$|Team Explorer: Team Explorer {{is used to}} {{integrate}} the capabilities of Team Foundation Server, the <b>Revision</b> <b>Control</b> System into the IDE (and the basis for Microsoft's CodePlex hosting environment for open source projects). In addition to source control it provides the ability to view and manage individual work items (including bugs, tasks and other documents) and to browse TFS statistics. It is included {{as part of a}} TFS install and is also available as a download for Visual Studio separately. Team Explorer is also available as a stand-alone environment solely to access TFS services.|$|E
25|$|The live {{demonstration}} {{featured the}} introduction of a complete computer hardware and software system called the oN-Line System or, more commonly, NLS. The 90-minute presentation essentially demonstrated almost all the fundamental elements of modern personal computing: windows, hypertext, graphics, efficient navigation and command input, video conferencing, the computer mouse, word processing, dynamic file linking, <b>revision</b> <b>control,</b> and a collaborative real-time editor (collaborative work). Engelbart's presentation was the first to publicly demonstrate all of these elements in a single system. The demonstration was highly influential and spawned similar projects at Xerox PARC in the early 1970s. The underlying technologies influenced both the Apple Macintosh and Microsoft Windows graphical user interface operating systems in the 1980s and 1990s.|$|E
25|$|Currently the KDE {{community}} {{uses the}} Git <b>revision</b> <b>control</b> system. The KDE Projects site and QuickGit give {{an overview of}} all projects hosted by KDE's Git repository system. Review Board is used for patch review. Commitfilter will send an email with each commit for the projects you want to watch, without either getting tons of mails or getting infrequent and redundant information. English Breakfast Network (EBN) {{is a collection of}} machines that do automated KDE source artifact quality checking. The EBN provides KDE API documentation validation, user documentation validation, source code checking. It is operated by Adriaan de Groot and Allen Winter. Commit-Digest site gives a weekly overview of the development activity. LXR indexes classes and methods used in KDE.|$|E
5000|$|... “Manual for <b>control,</b> <b>revisions</b> and {{expertise}} in state enterprises” Sofia (1933); Контрола и ревизия на стопанските предприятия ...|$|R
5000|$|Further, Chairs and Deputy Chairs of the county, {{territorial}} {{and local}} organizations were elected. Those structures would represent the party governing {{body in the}} time period between conferences and general assemblies. In addition, the Congress elected <b>Revision</b> and <b>Control</b> Commissions for Alliances' structures at all the levels.|$|R
40|$|This study {{examined}} the connections between religious problem-solving strategies and experiences of control, specifically an internal and external locus of control, God locus of control, and the illusion of control. In addition, it explored how these connections relate to psychological well-being. Undergraduates enrolled in psychology courses were recruited {{to participate in this}} study. They completed five scales and a computerized task. These scales consist of the Religious Problem-Solving Scale, the Locus of Control Scale, the Multidimensional Locus of <b>Control</b> Scale-God <b>Control</b> <b>Revision</b> (God <b>control</b> subscale), the Center for Epidemiologic Studies-Depressed Mood Scale, and the Self-Rating Anxiety Scale. The computerized task will be a light bulb illumination task. While there were no significant results found in regards to the illusion of control, the religious measures of God control and religious problem-solving were shown to be consistent with previous findings. This can prove beneficial to clinicians working with religious clients...|$|R
25|$|Renames {{are handled}} implicitly rather than explicitly. A common {{complaint}} with CVS {{is that it}} uses {{the name of a}} file to identify its revision history, so moving or renaming a file is not possible without either interrupting its history, or renaming the history and thereby making the history inaccurate. Most post-CVS <b>revision</b> <b>control</b> systems solve this by giving a file a unique long-lived name (analogous to an inode number) that survives renaming. Git does not record such an identifier, and this is claimed as an advantage. Source code files are sometimes split or merged, or simply renamed, and recording this as a simple rename would freeze an inaccurate description of what happened in the (immutable) history. Git addresses the issue by detecting renames while browsing the history of snapshots rather than recording it when making the snapshot. to show code moved between source files (Briefly, given a file in revision N, a file of the same name in revision N−1 is its default ancestor. However, when there is no like-named file in revision N−1, Git searches for a file that existed only in revision N−1 and is very similar to the new file.) However, it does require more CPU-intensive work every time history is reviewed, and several options to adjust the heuristics. This mechanism does not always work; sometimes a file that is renamed with changes in the same commit is read as a deletion of the old file {{and the creation of a}} new file. Developers can work around this limitation by committing the rename and changes separately.|$|E
500|$|Similarly, topological orderings of DAGs {{can be used}} {{to order}} the {{compilation}} operations in a makefile. The program evaluation and review technique uses DAGs to model the milestones and activities of large human projects, and schedule these projects to use as little total time as possible. Combinational logic blocks in electronic circuit design, and the operations in dataflow programming languages, involve acyclic networks of processing elements. DAGs can also represent collections of events and their influence on each other, either in a probabilistic structure such as a Bayesian network or as a record of historical data such as family trees or the version histories of [...] distributed <b>revision</b> <b>control</b> systems. DAGs can also be used as a compact representation of sequence data, such as the directed acyclic word graph representation of a collection of strings, or the binary decision diagram representation of sequences of binary choices. More abstractly, ...|$|E
2500|$|Diff3 compares one file {{against two}} other files. [...] It was {{originally}} conceived by Paul Jensen to reconcile changes made by two people editing a common source. [...] It {{is also used}} by <b>revision</b> <b>control</b> systems, e.g. RCS, for merging.|$|E
40|$|The {{process of}} {{revising}} a technical or scientific paper {{can be performed}} more efficiently by the people involved (author, co-author, supervisor, editor) when the <b>revision</b> is <b>controlled</b> by breaking it {{into a series of}} steps. The revision process recommended here is based on the levels-of-edit concept that resulted from a study of the technical editorial function at the Jet Propulsion Laboratory of the California Institute of Technology. Types of revision discussed are Substantive, Policy, Language, Mechanical Style, Format, Integrity, and Copy Clarification...|$|R
40|$|Graduation date: 1994 Presentation date: 1993 - 11 - 22 This study {{describes}} and quantifies some microprocesses {{of malaria}} transmission including blood vessel location by Anopheles stephensi and sporozoites delivery of An. stephensi infected by Plasmodium berghei. The study models {{the effects of}} malaria parasite-induced changes in probing behavior and mosquito mortality on disease transmisson. Finally, host, vector, and parasitological aspects of malaria optimal control are explored, concluding that classical entomological parameters are insufficient; this unexpected conclusion may lead to <b>revisions</b> of <b>control</b> strategies...|$|R
40|$|Techniques to {{identify}} aircraft aerodynamic characteristics from flight measurements and compute corrections to an existing simulation {{model of a}} research aircraft were investigated. The purpose of the research {{was to develop a}} process enabling rapid automated updating of aircraft simulation models using flight data and apply this capability to all flight regimes, including flight envelope extremes. The process presented has the potential to improve the efficiency of envelope expansion flight testing, <b>revision</b> of <b>control</b> system properties, and the development of high-fidelity simulators for pilot training...|$|R
2500|$|There {{are some}} {{modifications}} and extensions to the diff formats {{that are used}} and understood by certain programs and in certain contexts. [...] For example, some <b>revision</b> <b>control</b> systems—such as Subversion—specify a version number, [...] "working copy", or any other comment instead of or {{in addition to a}} timestamp in the diff's header section.|$|E
2500|$|Subversion uses a {{centralized}} <b>revision</b> <b>control</b> model. Ben Collins-Sussman, {{one of the}} designers of Subversion, believes a centralised model would help prevent [...] "insecure programmers" [...] from hiding their work from other team members. [...] Some users of version control systems see the centralised model as detrimental; famously, Linus Torvalds attacked Subversion's model and its developers.|$|E
2500|$|Since {{the story}} of the fork {{appeared}} in news, Apple has released changes of the source code of WebKit fork in a public [...] revision-control repository. Since the transfer of the source code into a public Concurrent Versions System (CVS) repository, Apple and KHTML developers have had increasing collaboration. Many KHTML developers have become reviewers and submitters for WebKit <b>revision</b> <b>control</b> repository.|$|E
40|$|We {{present a}} {{framework}} for describing proof planners. This framework is based around a decomposition of proof planners into planning states, proof language, proof plans, proof methods, proof <b>revision,</b> proof <b>control</b> and planning algorithms. We use this framework to motivate the comparison of three recent proof planning systems, lclam, OMEGA and IsaPlanner, and demonstrate how the framework allows us to discuss and illustrate both their similarities and differences in a consistent fashion. This analysis reveals that proof control {{and the use of}} contextual information in planning states are key areas in need of further investigation...|$|R
40|$|The aim of {{the whole}} {{research}} project was to subject the various container systems used to accumulate and transport diverse, separated wastes to an uniform administration procedure. This was to afford the highest standards of operational safety and verification of all processes by means of its structural correlation of transport and storage technology with automatic documentation. The following points were realised in the final concept to attain new quality control standards {{by the use of}} innovative technical methods: 1. large scale technical application of emission preventative fire safety by rendering gases inert using a nitrogen enrichment unit, 2. large scale technical application of emission prevention using active carbon filters, 3. on-site self control by the installation of comprehensive operating data processing, 4. obligatory prerequisites for <b>revision</b> by <b>controlling</b> authorities, 5. affirmative and reliable data base for the <b>revision,</b> planning and <b>control</b> of separated waste disposal in its logistical sense, 6. protection against manipulation and, if applicable, tracking. (orig.) SIGLEAvailable from TIB Hannover: RO 2148 (6016) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekBundesministerium fuer Umwelt, Naturschutz und Reaktorsicherheit, Bonn (Germany) DEGerman...|$|R
40|$|This {{document}} describes part of {{the work}} conducted under MOU 252 and MOU 324, related to the studies of vehicle collisions in vehicle-following operations. This working paper is a detailed documentation of a computer program that is the core element of the simulation tools for vehicle collision dynamics. The program, SMAC (Simulation Model of Automobile Collisions), and its PC-platform version EDSMAC have been used extensively in recent work at PATH to investigate the consequences of vehicle collisions and the effects of vehicle-following parameters on collisions. A copy of the source codes of SMAC was obtained from the University of Michigan Transportation Research Institute (UMTRI). Revisions to the program were made to insert the option of exercising feedback control in collision situations. After these <b>revisions,</b> <b>control</b> algorithms can now be tested in crash scenarios to examine the feasibility and effectiveness of vehicle control in emergency conditions. The structure of the program was outlined in this report with descriptions of the major subroutines. The added options for implementing user-specified steering inputs and feedback controllers were explained in details. An example input file for running the computer program was also provided to illustrate the formats and contents of input parameters. This working report provides a concise and essential documentation for the computer program. KEY WORDS Vehicle Collisions Simulation of Vehicle Crashes Vehicle Control in Collisions Advanced Vehicle Control System...|$|R
2500|$|Apache Subversion (often {{abbreviated}} SVN, {{after its}} command name svn) is a software versioning and <b>revision</b> <b>control</b> system distributed as open source under the Apache License. Software developers use Subversion to maintain current and historical versions of files such as source code, web pages, and documentation. [...] Its {{goal is to}} be a mostly compatible successor to the widely used Concurrent Versions System (CVS).|$|E
2500|$|Git (...) is {{a version}} control system for {{tracking}} changes in computer files and coordinating work on those files among multiple people. It is primarily used for source code management in software development, {{but it can be}} used to keep track of changes in any set of files. As a distributed <b>revision</b> <b>control</b> system it is aimed at speed, data integrity, and support for distributed, non-linear workflows.|$|E
2500|$|Linus Benedict Torvalds ( [...] ; born December 28, 1969) is a Finnish-American {{software}} engineer {{who is the}} creator, {{and for a long}} time, principal developer of the Linux kernel, which became the kernel for operating systems such as the [...] Linux operating system, Android, and Chrome OS. He also created the distributed <b>revision</b> <b>control</b> system Git and the diving logging and planning software Subsurface. He was honored, along with Shinya Yamanaka, with the 2012 Millennium Technology Prize by the Technology Academy Finland [...] "in recognition of his creation of a new open source operating system for computers leading to the widely used Linux kernel". He is also the recipient of the 2014 IEEE Computer Society Computer Pioneer Award.|$|E
5000|$|... |- style="background:#f5fffa"|802.1X-2001|Port Based Network Access Control|Incorporated into 802.1X-2004|- style="background:#f5faff"|P802.1aa|Maintenance to 802.1X-2001|Merged into 802.1X-2004|- style="background:#f5fffa"|802.1X-2004||Port Based Network Access Control (Rollup of 802.1X-2001 and P802.1aa)|Incorporated into 802.1Q-2005|- style="background:#f5faff"|P802.1af|Media Access Control (MAC) Key Security|Merged into 802.1X-2010|- style="background:#cef2e0"|802.1X-2010|Port Based Network Access <b>Control</b> (<b>revision</b> of 802.1X-2004, {{including}} P802.1af)|Current|- style="background:#cef2e0"|802.1Xbx|MAC Security Key Agreement protocol (MKA) extensions|Current|- |colspan=3 style=white| ...|$|R
40|$|Waste biosludge {{generated}} in Shell's Deer Park Manufacturing Complex aqueous effluent treatment facilities is disposed of by on-site incineration. In 1981, an energy conservation program {{resulted in a}} 48 percent reduction in natural gas consumption equalling 440 MSCF per day. The most significant reduction in natural gas consumption was realized by modifying the incinerator operating procedures. Further reductions were obtained by minor process <b>control</b> <b>revisions</b> and equipment modifications. It was also found that additional natural gas could be conserved by blocked out incinerator runs in which the incinerator was shut down and biosludge accumulated until inventories permitted operation of the incinerator nearer to design rate. This paper describes the operational and process <b>control</b> <b>revisions</b> that were made and the relative impact of these changes on natural gas consumption. Blocked out operation of the incinerator is also discussed...|$|R
40|$|This is the v 6. 1 {{release of}} AASTeX, the markup package to assist authors in {{preparing}} manuscripts intended for submission to AAS-affiliated journals. Please note that {{although this is}} a point release, it is not backwards compatible with any prior version of AASTeX. Major feature upgrades include: 	ORCID support 	Automatic affiliation indexing 	Additional collaboration support 	A new user supplied layout style for improved readability 	New multi-page table and rotation commands 	Changed the link colors from cyan to blue 	Improved <b>revision</b> tracking <b>control</b> 	Expanded editorial comment mark up 	url support in aasjournal. bst and various bug fixes...|$|R
