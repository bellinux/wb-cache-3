5|0|Public
50|$|The {{implementation}} of <b>Rational</b> <b>Fortran</b> used m4 as its macro engine from the beginning; and most Unix variants ship with it.|$|E
5000|$|The {{name of the}} {{language}} is a pun (Ratfor (<b>RATional</b> <b>FORtran)</b> -> [...] "Rat Four" [...] -> [...] "Rat Five" [...] -> RatFiv).|$|E
50|$|Ratfor (short for <b>Rational</b> <b>Fortran)</b> is a {{programming}} language implemented as a preprocessor for Fortran 66. It provided modern control structures, unavailable in Fortran 66, to replace GOTOs and statement numbers.|$|E
5000|$|Kernighan was the {{software}} editor for Prentice Hall International. His [...] "Software Tools" [...] series spread {{the essence of}} [...] "C/Unix thinking" [...] with makeovers for BASIC, FORTRAN, and Pascal, and most notably his [...] "Ratfor" [...] (<b>rational</b> <b>FORTRAN)</b> was put in the public domain.|$|E
40|$|The {{language}} RATMAC is {{a direct}} descendant {{of one of the}} most successful structured FORTRAN languages, <b>rational</b> <b>FORTRAN,</b> RATFOR. RATMAC has all of the characteristics of RATFOR, but is augmented by a powerful recursive macro processor which is extremely useful in generating transportable FORTRAN programs. A macro is a collection of programming steps which are associated with a keyword. This keyword uniquely identifies the macro, and whenever it appears in a RATMAC program it is replaced by the collection of steps. This primer covers the language's control and decision structures, macros, file inclusion, symbolic constants, and error messages...|$|E

