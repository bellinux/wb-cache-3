35|48|Public
2500|$|Bistable LCDs do {{not require}} {{continuous}} refreshing. Rewriting is only required for picture information changes. In 1984 HA van Sprang and AJSM de Vaan invented an STN type display that could be operated in a bistable mode, enabling extreme high resolution images up to 4000 lines or more using only low voltages. Since a pixel however may be either in an on-state or in an off state at the moment new information needs to be written to that particular pixel, the addressing method of these bistable displays is rather complex, reason why these displays did not {{made it to the}} market. That changed when in the 2010 [...] "zero-power" [...] (bistable) LCDs became available. Potentially, passive-matrix addressing can be used with devices if their write/erase characteristics are suitable, which was the case for ebooks showing still pictures only. After a page is written to the display, the display may be cut from the power while that information remains readable. This has the advantage that such ebooks may be operated long time on just a small battery only. High-resolution color displays, such as modern LCD computer monitors and televisions, use an active-matrix structure. A matrix of thin-film transistors (TFTs) is added to the electrodes in contact with the LC layer. Each pixel has its own dedicated transistor, allowing each column line to access one pixel. When a row line is selected, all of the column lines are connected to a row of pixels and voltages corresponding to the picture information are driven onto all of the column lines. The row line is then deactivated and the next row line is selected. All of the row lines are selected in sequence during a <b>refresh</b> <b>operation.</b> Active-matrix addressed displays look brighter and sharper than passive-matrix addressed displays of the same size, and generally have quicker response times, producing much better images.|$|E
5000|$|... 001: REFP Refresh precharge; end the <b>refresh</b> <b>operation</b> on the {{selected}} bank.|$|E
50|$|Sense {{amplifier}} {{is required}} during the data read and <b>refresh</b> <b>operation</b> from the memory concerned.|$|E
40|$|Abstract—Ever-growing {{application}} data footprints demand faster main memory with larger capacity. DRAM {{has been the}} technology choice for main memory due to its low latency and high density. However, DRAM cells must be refreshed periodically to preserve their content. <b>Refresh</b> <b>operations</b> negatively affect performance and power. Traditionally, the performance and power overhead of refresh have been insignificant. But as the size and speed of DRAM chips continue to increase, refresh becomes a dominating factor of DRAM performance and power dissipation. In this paper, we conduct a comprehensive study of the issues related to <b>refresh</b> <b>operations</b> in modern DRAMs. Specifically, we describe the difference in <b>refresh</b> <b>operations</b> between modern synchronous DRAM and traditional asynchronous DRAM; the refresh modes and timings; and variations in data retention time. Moreover, we quantify refresh penalties versus device speed, size, and total memory capacity. We also categorize refresh mechanisms based on command granularity, and summarize refresh techniques proposed in research papers. Finally, based on our experiments and observations, we propose guidelines for mitigating DRAM refresh penalties...|$|R
50|$|Following {{overhaul}} at Alameda, California, Roi {{made two}} round-trip voyages to {{bases in the}} Marshall and Mariana Islands before returning to Pearl Harbor to begin carrier <b>refresher</b> <b>operations</b> in preparation for her new duty as a replenishment carrier for the fast carrier task force of the 3rd Fleet.|$|R
40|$|Abstract—Energy {{consumption}} {{is a primary}} consideration that determines the usability of emerging mobile computing devices such as smartphones. <b>Refresh</b> <b>operations</b> for main mem-ory account for a significant fraction of the overall energy consumption, especially during idle periods, when processor can be switched off quickly; however, memory contents continue to get refreshed to avoid data loss. Given that mobile devices are idle most of the times, reducing refresh power in idle mode is critical to maximize the duration for which the device remains usable. The frequency of <b>refresh</b> <b>operations</b> in memory can be reduced significantly by using strong multi-bit error correction codes (ECC). Unfortunately, strong ECC codes incur high latency, which causes significant performance degradation (as high as 21 %, and on average 10 %). To obtain both low refresh power in idle periods and high performance in active periods, this paper proposes Morphable ECC (MECC). During idle periods, MECC keeps the memory protected with 6 -bit ECC (ECC- 6) and employs a refresh period of 1 second, instead of the typical refresh period of 64 ms. During active operation, MECC reduces the refresh interval to 64 ms, and converts memory from ECC- 6 to weaker ECC (single-bit error correction) on a demand-basis, thus avoiding the high latency of ECC- 6, except for the first access during the active mode. Our proposal reduces <b>refresh</b> <b>operations</b> during idle mode by 16 x, memory power in idle mode by 2 X, while retaining performance within 2 % {{of a system that}} does not use any ECC...|$|R
5000|$|Refresh {{commands}} {{are also}} {{different from a}} conventional SDRAM. There is no [...] "refresh all banks" [...] command, and the <b>refresh</b> <b>operation</b> is divided into separate activate and precharge operations so the timing {{is determined by the}} memory controller. The refresh counter is also programmable by the controller. Operations are: ...|$|E
50|$|This {{command is}} similar to a {{combination}} of a conventional SDRAM's precharge and refresh commands. The POPx and BPx bits specify a precharge operation, while the ROPx, DELRx, and BRx bits specify a <b>refresh</b> <b>operation.</b> Each may be separately enabled. If enabled, each may have a different command delay and must be addressed to a different bank.|$|E
5000|$|The {{scanning}} system: progressive scanning (p) or {{interlaced scanning}} (i). Progressive scanning (p) redraws an image frame (all of its lines) when refreshing each image, for example 720p/1080p. Interlaced scanning (i) draws the image field every other line or [...] "odd numbered" [...] lines {{during the first}} image <b>refresh</b> <b>operation,</b> and then draws the remaining [...] "even numbered" [...] lines during a second refreshing, for example 1080i. Interlaced scanning yields greater image resolution if subject is not moving, but loses {{up to half of}} the resolution and suffers [...] "combing" [...] artifacts when subject is moving.|$|E
40|$|Ordered {{sets and}} maps play {{important}} roles as index structures in relational data models. When a shared index in a multi-user system is modified concurrently, {{the current state}} of the index will diverge into multiple versions containing the local modifications performed in each work flow. The confluent persistence problem arises when versions should be melded in commit and <b>refresh</b> <b>operations</b> so that modifications performed by different users become merged. Confluently Persistent Sets and Maps are functional binary search trees that support efficient set operations both when operands are disjoint and when they are overlapping. Treap properties with hash values as priorities are maintained and with hash-consing of nodes a unique representation is provided. Non-destructive set merge algorithms that skip inspection of equal subtrees and a conflict detecting meld algorithm based on set merges are presented. The meld algorithm is used in commit and <b>refresh</b> <b>operations.</b> With m modifications in one flow and n items in total, the expected cost of the operations is O(m log(n/m)). Comment: 11 pages, 3 figure...|$|R
40|$|DRAM cells must be {{refreshed}} (or rewritten) {{periodically to}} maintain data integrity, and as DRAM density grows, {{so does the}} refresh time and energy. Not all data need to be refreshed with the same frequency, though, and thus some <b>refresh</b> <b>operations</b> can safely be delayed. Tracking such in-formation allows the memory controller to reduce refresh costs by judiciously choosing when to refresh different rows. Solutions that store imprecise information miss opportu-nities to avoid unnecessary <b>refresh</b> <b>operations,</b> but the stor-age for tracking complete information scales with memory capacity. We therefore propose a flexible approach to re-fresh management that tracks complete refresh information within the DRAM itself, where it incurs negligible storage costs (0. 006 % of total capacity) and can be managed easily in hardware or software. Completely tracking multiple types of refresh information (e. g., row retention time and data va-lidity) maximizes refresh reduction and lets us choose the most effective refresh schemes. Our evaluations show that our approach saves 25 - 82 % of the total DRAM energy over prior refresh-reduction mechanisms. 1...|$|R
50|$|Additional {{commands}} (with CMD5 set) {{opened and}} closed rows without a data transfer, performed <b>refresh</b> <b>operations,</b> read or wrote configuration registers, and performed other maintenance operations. Most of these commands supported an additional 4-bit sub-ID (sent as 5 bits, using the same multiple-destination encoding as the primary ID) {{which could be used}} to distinguish devices that were assigned the same primary ID because they were connected in parallel and always read/written at the same time.|$|R
50|$|Reading {{a memory}} {{location}} creates a charge well {{whether or not}} one was previously there, destroying the original contents of that location, and so any read has {{to be followed by}} a write to reinstate the original data. In some systems this was accomplished using a second electron gun inside the CRT that could write to one location while the other was reading the next. Since the display would fade over time, the entire display had to be periodically refreshed using the same basic method. However, as the data is read and then immediately written, this operation can be carried out by external circuitry while the central processor unit (CPU) was busy carrying out other operations. This <b>refresh</b> <b>operation</b> is similar to the memory refresh cycles of DRAM in modern systems.|$|E
5000|$|Bistable LCDs do {{not require}} {{continuous}} refreshing. Rewriting is only required for picture information changes. In 1984 HA van Sprang and AJSM de Vaan invented an STN type display that could be operated in a bistable mode, enabling extreme high resolution images up to 4000 lines or more using only low voltages. Since a pixel however may be either in an on-state or in an off state at the moment new information needs to be written to that particular pixel, the addressing method of these bistable displays is rather complex, reason why these displays did not {{made it to the}} market. That changed when in the 2010 [...] "zero-power" [...] (bistable) LCDs became available. Potentially, passive-matrix addressing can be used with devices if their write/erase characteristics are suitable, which was the case for ebooks showing still pictures only. After a page is written to the display, the display may be cut from the power while that information remains readable. This has the advantage that such ebooks may be operated long time on just a small battery only. High-resolution color displays, such as modern LCD computer monitors and televisions, use an active-matrix structure. A matrix of thin-film transistors (TFTs) is added to the electrodes in contact with the LC layer. Each pixel has its own dedicated transistor, allowing each column line to access one pixel. When a row line is selected, all of the column lines are connected to a row of pixels and voltages corresponding to the picture information are driven onto all of the column lines. The row line is then deactivated and the next row line is selected. All of the row lines are selected in sequence during a <b>refresh</b> <b>operation.</b> Active-matrix addressed displays look brighter and sharper than passive-matrix addressed displays of the same size, and generally have quicker response times, producing much better images.|$|E
40|$|An {{embodiment}} generally {{relates to}} {{a method of}} self-detecting an error in a {{field programmable gate array}} (FPGA). The method includes writing a signature value into a signature memory in the FPGA and determining a conclusion of a configuration <b>refresh</b> <b>operation</b> in the FPGA. The method also includes reading an outcome value from the signature memory...|$|E
40|$|Embedded dynamic {{random access}} {{memories}} (eDRAMs) have high density and low leakage futures, making them suitable for implementing large last-level caches (L 3 Cs). However, <b>refresh</b> <b>operations</b> are required, which negatively impact {{the power and}} performance. This article investigates the impact of refresh on energy and performance of eDRAM-based L 3 Cs. Experiments show that refresh has minor impact on system performance but {{continues to be the}} primary source of eDRAM-based L 3 C energy consumption. Inte...|$|R
5000|$|This {{operates}} equivalently {{to standard}} SDRAM's activate command, specifying a row address to be {{loaded into the}} bank's sense amplifier array. To save power, a chip may be configured to only activate {{a portion of the}} sense amplifier array. In this case, the SR1..0 bits specify the half or quarter of the row to activate, and following read/write commands' column addresses are required to be limited to that portion. (<b>Refresh</b> <b>operations</b> always use the full row.) ...|$|R
25|$|Two months later, {{the ship}} entered Long Beach Naval Shipyard on 15 August for an {{extended}} availability that lasted until 9 April 1975. Following <b>refresher</b> <b>operations</b> with CVW-19, Oriskany sailed on her fifteenth WESTPAC deployment on 16 September 1975. The carrier conducted war at sea and other exercises out of Subic Bay before returning home on 3 March 1976. Owing to defense budget cuts, together with the ship's increasingly poor material condition, Oriskany was listed for inactivation on 15 April 1976.|$|R
40|$|DRAM {{has become}} a crucial {{component}} in terms of system power consumption as the size of main memory increases. To improve power efficiency of DRAM devices, we need to analyze characteristics of DRAM behavior from power consumption&# 39;s perspective. In this paper, we analyze the characteristics of various DRAM devices from major vendors under real system operating environment. As {{the size of the}} DRAM increases, power consumption due to activate, precharge and burst operations remains about the same, but that due to background and refresh operations increases steadily. Especially, power consumption due to the <b>refresh</b> <b>operation</b> for 3 D stacked DRAMs increases by 91 % at high temperatures, which strongly implies that the <b>refresh</b> <b>operation</b> will become more crucial for DRAMs in the future. This research was supported by Basic Science Research Program through the National Research Foundation of Korea (NRF) funded by the Ministry of Education. (NRF- 2010 - 0024164) ...|$|E
40|$|This paper {{presents}} a low-leakage 128 kbit dynamic memory {{based on a}} 2 T dynamic cell. The design is implemented in a logic 90 nm technology and achieves a low static power consumption of 130 mWand an access time of 2 ns. It has a worst case retention time of 175 ms. This performance is achieved by introducing an optimized hierarchical organization and peripheral circuits for the read, the write and the refresh operations. A novel writing mechanism for 2 T cells using a double phase approach is demonstrated. The area penalty of using short read bitlines is alleviated using a charge transfer sense amplifier (SA). A novel local write sense amplifier (WSA) that can operate as a latch {{makes it possible to}} perform the <b>refresh</b> <b>operation</b> at the local level, improving the energy efficiency of the <b>refresh</b> <b>operation.</b> The memory includes an integrated automatic refresh mechanism. Most read and write operations can still be performed during refresh cycles. In cases where the accessed address conflictsstatus: publishe...|$|E
40|$|DRAM cells rely on {{periodic}} refresh {{operations to}} main-tain data integrity. As {{the capacity of}} DRAM memories has in-creased, so has {{the amount of time}} consumed in doing refresh. Refresh operations contend with read operations, which in-creases read latency and reduces system performance. We show that eliminating latency penalty due to refresh can im-prove average performance by 7. 2 %. However, simply doing intelligent scheduling of refresh operations is ineffective at obtaining significant performance improvement. This paper provides an alternative and scalable option to reduce the latency penalty due to refresh. It exploits the prop-erty that each <b>refresh</b> <b>operation</b> in a typical DRAM device in-ternally refreshes multiple DRAM rows in JEDEC-based dis-tributed refresh mode. Therefore, a <b>refresh</b> <b>operation</b> has well defined points at which it can potentially be Paused to service a pending read request. Leveraging this property, we propose Refresh Pausing, a solution that is highly effective at allevi-ating the contention from refresh operations. It provides an average performance improvement of 5. 1 % for 8 Gb devices, and becomes even more effective for future high-density tech-nologies. We also show that Refresh Pausing significantly out-performs the recently proposed Elastic Refresh scheme. 1...|$|E
40|$|Abstract—High density {{memory is}} {{becoming}} more important as many execution streams are consolidated onto single chip many-core processors. DRAM is ubiquitous as a main memory technology, but while DRAM’s per-chip density and frequency continue to scale, {{the time required to}} refresh its dynamic cells has grown at an alarming rate. This paper shows how currently-employed methods to schedule <b>refresh</b> <b>operations</b> are ineffective in mitigating the significant performance degradation caused by longer refresh times. Current approaches are deficient – they do not effectively exploit the flexibility of DRAMs to postpone <b>refresh</b> <b>operations.</b> This work proposes dynamically reconfigurable predictive mechanisms that exploit the full dynamic range allowed in the JEDEC DDRx SDRAM specifications. The proposed mechanisms are shown to mitigate much of the penalties seen with dense DRAM devices. We refer to the overall scheme as Elastic Refresh, in that the refresh policy is stretched to fit the currently executing workload, such that the maximum benefit of the DRAM flexibility is realized. We extend the GEMS on SIMICS tool-set to include Elastic Refresh. Simulations show the proposed solution provides a ∼ 10 % average performance improvement over existing techniques across the entire SPEC CPU suite, and up to a 41 % improvement for certain workloads. I...|$|R
5000|$|<b>Operation</b> <b>Refresher</b> Training Unit at RAF Hampstead Norris from May 1944 to February 1945 ...|$|R
40|$|DRAM memory systems require {{periodic}} recharging {{to avoid}} loss {{of data from}} leaky capacitors. These <b>refresh</b> <b>operations</b> consume energy and reduce the duration of time for which the DRAM banks are available to service memory requests. Higher DRAM density and 3 D-stacking aggravate the refresh overheads, incurring even higher energy and performance costs. 3 D-stacked DRAM and other emerging on chip High Bandwidth Memory (HBM) technologies which are widely considered to be changing the landscape of memory hierarchy in future heterogeneous and many-core architectures could suffer significantly from refresh overheads. Such large on-chip memory, when used as a very large last level cache, however, provides opportunities for addressing the refresh overheads. In this work, we propose MicroRefresh, a scheme for almost eliminating the refresh overhead in DRAM caches. MicroRefresh eliminates unwanted refresh of recently accessed DRAM pages; it {{takes advantage of the}} relative latency difference between on-chip and off-chip DRAM and achieves a fine balance of usage of system resources by aggressively opportunistically eliminating refresh of older DRAM pages. It tolerates any resulting increase in cache misses by leveraging the under-utilized main memory bandwidth. The resulting organization eliminates the energy and performance overhead of <b>refresh</b> <b>operations</b> in the DRAM cache to achieve overall performance and energy improvement. Across both 4 -core and 8 -core workloads, MicroRefresh eliminates 92 % the refresh energy consumed in the baseline periodic refresh mechanism. Further this is accompanied by performance improvements of upto 10 %, with average improvements of 3. 9 % and 3. 4 % in 4 -core and 8 -core respectively...|$|R
40|$|This paper {{presents}} a new structure of DRAM, using two-transistors. The most important advantages of this structure are high speed read, write and <b>refresh</b> <b>operation.</b> We {{will focus on}} the layout consideration to reach a very compact structure compared with other works. The proposed DRAM is designed in a 0. 35 &mu;m CMOS process, and then extracted layout file, simulated by HSPICE using level 49 parameters (BSIM 3 v 3). Comparison between this work and other approaches confirm that this structure is better than conventional works in terms of operation speed...|$|E
40|$|Abstract—This paper {{analyzes}} {{and improves}} {{the performance of}} a hybrid memory cell consisting of a memristor and ambipolar transistors. This work extends a previous design by efficiently biasing the memristor (as controlled by the ambipolar transistors), such that no <b>refresh</b> <b>operation</b> is now required. By utilizing macroscopic models, the features of the cell are characterized for the memory operations and no modification is needed to the cell circuit other than the memristor biasing scheme. A detailed treatment of the memory cell with respect to the new biasing scheme of the memristor is provided. Simulation results show that the proposed memory cell has superior performance compared with the previous memristor-based cell...|$|E
40|$|This paper {{presents}} {{a new technique}} for on-line con-sistency checking of embedded DRAMs. The basic idea {{is to use the}} periodic <b>refresh</b> <b>operation</b> for concurrently computing a test characteristic of the memory contents and compare it to a precomputed reference characteristic. Experiments show that the proposed technique signifi-cantly reduces the time between the occurrence of an error and its detection (error detection latency). It also achieves a very high error coverage at low hardware costs. Therefore it perfectly complements standard on-line checking approaches relying on error detecting codes, where the detection of certain types of errors is guaran-teed, but only during READ operations accessing the erroneous data. ...|$|E
40|$|Modern {{hand-held}} multimedia terminals consume significant {{power for}} their quality display devices. Due to 60 Hz or higher LCD <b>refresh</b> <b>operations,</b> frame buffer memory and related buses become dominant power consumers. In this paper, we introduce an efficient frame buffer compression scheme that uses differential Huffman coding and its hardware implementation. The compression and decompression must be simple and not incur distinct power overhead involving no CPU operations. We have achieved both on-thefly compression and high compression efficiency devising a limited-size code book, color-difference reduction techniques and an adaptive code book update scheme. On the MobileMark 2002 benchmark, our techniques reduce the frame buffer activity by 52 % to 90 %, saving up to 86 mW including the overhead...|$|R
40|$|Tunneling based random-access {{memories}} (TRAM’s) {{have recently}} garnered {{a great amount}} of interests among the memory designers due to their intrinsic merits such as reduced power consumption by elimination of <b>refreshing</b> <b>operation,</b> faster read and write cy-cles, and improved reliability in comparison to conventional sili-con DRAM’s. In order to understand the precise principle of oper-ation of TRAM’s, an in-depth circuit analysis has been attempted in this paper and analytical models for memory cycle time, soft error rate, and power consumption have been derived. The analyti-cal results are then validated by simulation experiments performed with HSPICE. These results are then compared with conventional DRAM’s to establish the claim of superiority of TRAM perfor-mance to DRAM performance. 1...|$|R
40|$|Dynamic random-access memory (DRAM) is the {{building}} block of modern main memory systems. DRAM cells must be periodically refreshed to prevent loss of data. These <b>refresh</b> <b>operations</b> waste energy and degrade system performance by interfering with memory accesses. The {{negative effects of}} DRAM refresh increase as DRAM device capacity increases. Existing DRAM devices refresh all cells at a rate determined by the leakiest cell in the device. However, most DRAM cells can retain data for significantly longer. Therefore, many of these refreshes are unnecessary. In this paper, we propose RAIDR (Retention-Aware Intelli-gent DRAM Refresh), a low-cost mechanism that can identify and skip unnecessary refreshes using knowledge of cell reten-tion times. Our key idea is to group DRAM rows into retentio...|$|R
40|$|Abstract. Emerging {{portable}} devices relay on DRAM/flash memory system to satisfy requirements on fast and large data storage and low-energy consumption. This paper presents {{a novel approach}} to reduce energy of memory system, which unlike others, lowers energy of <b>refresh</b> <b>operation</b> in DRAM. The approach is based on two key ideas: (1) DRAM-based flash cache that keeps dirty pages {{to reduce the number}} of accesses to flash memory; and (2) OS-controlled page allocation/aging to stop the refresh operations in banks, whose pages are clean and not accessed for a long time. Simulations show that by using this technique we can decrease the overall energy consumption of DRAM/flash memory on video applications by 8 - 26 % while reducing the DRAM refresh energy by 59 - 74 %...|$|E
40|$|Capacitive DRAM cells require {{periodic}} {{refreshing to}} preserve data integrity. In JEDEC DDRx devices, a <b>refresh</b> <b>operation</b> {{is carried out}} via an auto-refresh command, which refreshes multiple rows from multiple banks simultaneously. The internal implementation of auto-refresh is completely opaque outside the DRAM—all the memory controller {{can do is to}} instruct the DRAM to refresh itself— the DRAM handles all else, in particular determining which rows in which banks are to be refreshed. This is in conflict with a large body of research on reducing the refresh overhead, in which the memory controller needs fine-grained control over which regions of the memory are refreshed. For example, prior works exploit the fact that a subset of DRAM rows can be refreshed at...|$|E
40|$|Emerging {{portable}} devices relay on DRAM/flash memory system to satisfy requirements on fast and large data storage and low-energy consumption. This paper presents {{a novel approach}} to reduce energy of memory system, which unlike others, lowers energy of <b>refresh</b> <b>operation</b> in DRAM. The approach is based on two key ideas: (1) DRAM-based flash cache that keeps dirty pages {{to reduce the number}} of accesses to flash memory; and (2) OS-controlled page allocation/aging to stop the refresh operations in banks, whose pages are clean and not accessed for a long time. Simulations show that by using this technique we can decrease the overall energy consumption of DRAM/flash memory on video applications by 8 - 26 % while reducing the DRAM refresh energy by 59 - 74 %...|$|E
40|$|Abstract—Resonant tunneling-based random-access {{memories}} (TRAMs) {{have recently}} garnered {{a great amount}} of interest among memory designers due to their intrinsic merits such as reduced power consumption by elimination of <b>refreshing</b> <b>operation,</b> faster read and write cycles, and improved reliability in comparison to conventional silicon dynamic random access memories (DRAMs). In order to understand the precise principle of operation of TRAM memories, an in-depth circuit analysis has been attempted in this paper and analytical models for memory cycle time, soft error rate, and power consumption have been derived. The analytical results are then validated by simulation experiments performed with HSPICE. These results are then compared with conventional DRAMs to establish the claim of superiority of TRAM perfor-mance to DRAM performance. Index Terms—Critical charge, dynamic random access memory (DRAM), power consumption, soft error rate (SER), tunneling-based random-access memory (TRAM). I...|$|R
40|$|SDRAM is {{commonly}} used in cost-sensitive applications requiring large amounts of memory. Though SDRAM is inexpensive, the implementation of <b>refresh</b> <b>operations,</b> open row management, and various delays and command sequences requires logic. The Nios SDRAM Controller with an Avalon interface, transparently handles SDRAM initialization, refresh, and all other SDRAM requirements and appears to software as a simple linear memory interface (flat address space) with a wait signal. The SDRAM Controller supports standard SDRAM as described in PC 100. With the SDRAM Controller, users can access SDRAM subsystems with data widths of 8, 16, 32, or 64 -bits, various memory sizes, and multiple chip selects. Users may also choose to share the tristate data and address buses with other tristate devices. This feature is valuable in systems which have multiple types of external memory devices, but limited I/O pins. The Avalon tristate interface is required to share pins. ...|$|R
40|$|Abstract—Multirate refresh {{techniques}} {{exploit the}} non-uniformity in retention times of DRAM cells {{to reduce the}} DRAM refresh overheads. Such techniques rely on accurate profiling of retention times of cells, and perform faster refresh {{only for a few}} rows which have cells with low retention times. Unfortunately, retention times of some cells can change at runtime due to Variable Retention Time (VRT), which makes it impractical to reliably deploy multirate refresh. Based on experimental data from 24 DRAM chips, we develop architecture-level models for analyzing the impact of VRT. We show that simply relying on ECC DIMMs to correct VRT failures is unusable as it causes a data error once every few months. We propose AVATAR, a VRT-aware multirate refresh scheme that adaptively changes the refresh rate for different rows at runtime based on current VRT failures. AVATAR provides a time to failure in the regime of several tens of years while reducing <b>refresh</b> <b>operations</b> by 62 %- 72 %...|$|R
