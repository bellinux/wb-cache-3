4|99|Public
2500|$|<b>Row</b> <b>Address</b> <b>Strobe.</b> [...] Despite the name, {{this is not}} a strobe, {{but rather}} simply a command bit. [...] Along with [...] and , this selects one of 8 commands.|$|E
5000|$|... the <b>Row</b> <b>Address</b> <b>Strobe.</b> The address inputs are {{captured}} on the falling edge of , and select a row to open. The row is held open {{as long as}} [...] is low.|$|E
40|$|This paper {{presents}} an integrated, fully associative, wide Cached-DRAM (WCDRAM). We propose a {{fully associative cache}} with very large blocks (1 KB- 8 KB) but few entries (32 - 128), integrated with the DRAM array. By doing this, we exploit the internal bandwidth inherent in DRAM access. A single <b>row</b> <b>address</b> <b>strobe</b> (RAS) operation is used to transfer a large (up to 8 KB) memory block between the DRAM array and the SRAM buffer. Our simulation results demonstrate that the proposed cache is very effective. For {{more than half of}} the benchmarks, 1 MB WCDRAM has a 20 - 100 times lower local miss rate (LMR) than a 4 MB level- 3 cache. The WCDRAM cache tags can be integrated in the microprocessor and the WCDRAM cache lookup can be done in parallel with an L 2 cache access. On an L 2 cache miss, the processor issues either a WCDRAM cache access or a DRAM access. As a result, the WCDRAM cache hit time does not include the cost of a fully-associative cache look-up and a DRAM access is not preceeded by a WCDRA [...] ...|$|E
5000|$|Column <b>Address</b> <b>Strobe.</b> Despite the name, {{this is not}} a strobe, {{but rather}} simply a command bit. Along with [...] and , this selects one of 8 commands.|$|R
5000|$|... the Column <b>Address</b> <b>Strobe.</b> The <b>address</b> inputs are {{captured}} on the falling edge of , and select a column from the currently open row {{to read or}} write.|$|R
2500|$|Column <b>Address</b> <b>Strobe.</b> [...] Despite the name, {{this is not}} a strobe, {{but rather}} simply a command bit. [...] Along with [...] and , this selects one of 8 commands.|$|R
50|$|The CAS latency is {{the delay}} {{between the time}} at which the column address and the column <b>address</b> <b>strobe</b> signal are {{presented}} to the memory module and the time at which the corresponding data is made available by the memory module. The desired row must already be active; if it is not, additional time is required.|$|R
50|$|The MK14 {{could address}} up to 64 KB of memory space {{by adding a}} few chips (the NADS <b>address</b> <b>strobe</b> {{indicated}} when the most significant 4 bits of address were available to be captured by an external latch); many pioneering home-brew computer magazines such as Personal Computer World, and Practical Electronics carried details of user modifications.|$|R
5000|$|This {{can be done}} by {{supplying}} a <b>row</b> <b>address</b> and pulsing [...] low; {{it is not necessary to}} perform any [...] cycles. An external counter is needed to iterate over the <b>row</b> <b>addresses</b> in turn.|$|R
50|$|The <b>row</b> <b>address</b> of the <b>row</b> {{that will}} be {{refreshed}} next is maintained by external logic or a counter within the DRAM. A system that provides the <b>row</b> <b>address</b> (and the refresh command) does so to have greater control over when to refresh and which row to refresh. This is done to minimize conflicts with memory accesses, since such a system has both knowledge of the memory access patterns and the refresh requirements of the DRAM. When the <b>row</b> <b>address</b> is supplied by a counter within the DRAM, the system relinquishes control over which row is refreshed and only provides the refresh command. Some modern DRAMs are capable of self-refresh; no external logic is required to instruct the DRAM to refresh or to provide a <b>row</b> <b>address.</b>|$|R
50|$|A {{solution}} {{is found in}} the Amstrad CPC, which combines the <b>row</b> <b>address</b> and character address to provide linear scanlines within a non-linear buffer. It maps <b>row</b> <b>address</b> RA0-RA2 to memory address MA11-MA13 and character address CA0-CA10 to memory address MA0-MA10. This has the advantages of easier programming for non-character display and easy smooth horizontal scrolling but can impede smooth vertical scrolling.|$|R
5000|$|The <b>row</b> <b>address</b> of the <b>row</b> to be {{refreshed}} must {{be applied}} at the address input pins.|$|R
5000|$|If the {{character}} address {{is used to}} look up a character reference in RAM and the <b>row</b> <b>address</b> to index a table of character graphics in ROM an ordinary text mode display is constructed. The character reference read from memory must be combined with the <b>row</b> <b>address</b> to form the address for {{the character}} graphics ROM, with the character reference selecting a set of scan line patterns that forms one character and the <b>row</b> <b>address</b> indexing into that set to select one scan line. (In other words, the ROM address is split into two parts {{in order to use}} the ROM as a two-dimensional array: the first dimension selects a character, and the second selects a row of that character's graphic pattern.) ...|$|R
50|$|For a refresh, {{only the}} <b>row</b> <b>address</b> is needed, so a column address doesn't {{have to be}} applied to the chip address circuits.|$|R
30|$|For {{the given}} image, {{the total number}} of {{occupied}} rows in the memory will be equal to the number _sub _blocks รท 4 and the number of columns will be number _sub _blocks ร 2 on horizontal axis because one vectorized block occupies two physical memory locations. The chosen DDR 3 memory has eight banks available. When saving consecutive rows of vectorized blocks on consecutive banks the least significant 3 bits of the <b>row</b> <b>address</b> represent the bank address. Each bank contains 213 <b>row</b> <b>addresses</b> and 210 column addresses, so it can accommodate images of maximum 128 MBs width using the same scheme [6].|$|R
5000|$|DDR4 {{changes the}} {{encoding}} of the Activate command. A new signal [...] controls it, {{during which the}} other control lines are used as <b>row</b> <b>address</b> bits 16, 15 and 14. When [...] is high, other commands {{are the same as}} above.|$|R
40|$|A new {{methodology}} for improving memory repair is presented {{which can be}} applied in either manufacture time repair or built-in self-repair (BISR) scenarios. In traditional memory repair, one spare column can only replace one column containing a defective cell. However, the proposed method allows a single spare column {{to be used to}} repair multiple defective cells in multiple columns. This is done by selectively decoding the <b>row</b> <b>address</b> bits when generating the control signals for the column MUXes. This logically segments the spare column allowing it to replace different columns in different partitions of the <b>row</b> <b>address</b> space. The hardware is the same for all chips, but fuses are used to customize the row decoding circuitry on a chipby-chip basis. An algorithm is described for choosing which <b>row</b> <b>address</b> bits to decode given the defect map for a particular chip. This additional degree of freedom allows customization based on the defect map of a chip and increases the effectiveness of the proposed scheme in comparison to traditional memory repair. Experimental results show that, when compared with traditional schemes of similar complexity, the proposed scheme achieves a higher probability of repairing defects. 1...|$|R
2500|$|DDR4 {{changes the}} {{encoding}} of the Activate command. [...] A new signal [...] controls it, {{during which the}} other control lines are used as <b>row</b> <b>address</b> bits 16, 15 and 14. [...] When [...] is high, other commands {{are the same as}} above.|$|R
40|$|Abstract: Double Data Rate Synchronous DRAM (DDR SDRAM) {{has become}} a {{mainstream}} memory of choice in design due to its speed, burst access and pipeline features. The DDR SDRAM is an enhancement to the conventional SDRAM running at bus speed over 75 MHz. The DDR SDRAM (referred to as DDR) doubles the bandwidth of the memory by transferring data twice per cycle on both the rising and falling edges of the clock signal. The designed DDR Controller supports data width of 64 bits, Burst Length of 4 and CAS (Column <b>Address</b> <b>Strobe)</b> latency of 2. DDR Controller provides a synchronous command interface to the DDR SDRAM Memory along with several control signals. In this paper, the implementation {{has been done in}} Verilog HDL by using Xilinx ISE 9. 2 i and Modelsim 6. 4 b...|$|R
5000|$|Multi-rank modules allow several open {{pages in}} each rank (typically 8 pages per rank). This {{increases}} {{the possibility of}} getting a hit on an already open <b>row</b> <b>address.</b> The performance gain {{that can be achieved}} is highly dependent on the application and the memory controller's ability to take advantage of open pages.|$|R
500|$|Memory cells (blue squares in the illustration) {{are further}} {{organized}} into matrices and <b>addressed</b> through <b>rows</b> and columns. [...] A memory address {{applied to a}} matrix is broken into the <b>row</b> <b>address</b> and column address, which are processed by the <b>row</b> and column <b>address</b> decoders (in the illustration, vertical and horizontal green rectangles, respectively). [...] After a <b>row</b> <b>address</b> selects the <b>row</b> for a read operation (the selection {{is also known as}} row activation), bits from all cells in the row are transferred into the sense amplifiers that form the row buffer (red squares in the illustration), from which the exact bit is selected using the column address. [...] Consequently, read operations are of a destructive nature because the design of DRAM requires memory cells to be rewritten after their values have been read by transferring the cell charges into the row buffer. [...] Write operations decode the addresses in a similar way, but {{as a result of the}} design entire rows must be rewritten for the value of a single bit to be changed.|$|R
2500|$|The {{activate}} command {{requires more}} address bits {{than any other}} (18 <b>row</b> <b>address</b> bits in an 8Gb part), so the standard , , and [...] active low signals are shared with high-order address bits that are not used when [...] is high. [...] The combination of =L, =H and =H that previously encoded an activate command is unused.|$|R
50|$|A 13-bit address bus, as {{illustrated}} here, {{is suitable for}} a device up to 128 Mbit. It would have two banks, each containing 8192 rows and 8192 columns. Thus, <b>row</b> <b>addresses</b> are 13 bits, segment addresses are 2 bits, and 8 column address bits are required to select one byte from the 2048 bits (256 bytes) in a segment.|$|R
5000|$|The {{activate}} command {{requires more}} address bits {{than any other}} (18 <b>row</b> <b>address</b> bits in an 8 Gb part), so the standard , , and [...] active low signals are shared with high-order address bits that are not used when [...] is high. The combination of =L, =H and =H that previously encoded an activate command is unused.|$|R
5000|$|Recent {{generations of}} DRAM chips contain an {{integral}} refresh counter, {{and the memory}} control circuitry can either use this counter or provide a <b>row</b> <b>address</b> from an external counter. These chips have three standard ways to provide refresh, selected by different patterns of signals on the [...] "column select" [...] (CAS) and [...] "row select" [...] (RAS) lines: ...|$|R
2500|$|A 13-bit address bus, as {{illustrated}} here, {{is suitable for}} a device up to 128 Mbit. [...] It would have two banks, each containing 8192 rows and 8192 columns. [...] Thus, <b>row</b> <b>addresses</b> are 13 bits, segment addresses are 2 bits, and 8 column address bits are required to select one byte from the 2048 bits (256 bytes) in a segment.|$|R
5000|$|Usually the refresh {{circuitry}} {{consists of}} a refresh counter which contains the <b>address</b> of the <b>row</b> to be refreshed which {{is applied to the}} chip's <b>row</b> <b>address</b> lines, and a timer that increments the counter to step through the rows. [...] This counter may be part of the memory controller circuitry, or on the memory chip itself. Two scheduling strategies have been used: ...|$|R
2500|$|The {{active command}} {{activates}} an idle bank. [...] It presents a two-bit bank address (BA0BA1) and a 13-bit <b>row</b> <b>address</b> (A0A12), and causes a read of that row into the bank's array of all 16,384 column sense amplifiers. [...] This {{is also known}} as [...] "opening" [...] the row. [...] This operation has the side effect of refreshing the dynamic (capacitive) memory storage cells of that row.|$|R
5000|$|The {{character}} address increases linearly. When {{the chip}} signals horizontal sync {{it increases the}} <b>row</b> <b>address.</b> If the <b>row</b> <b>address</b> does not equal the programmatically set number of rows per character, then the character address is reset to the value it had {{at the beginning of}} the scanline that was just completed. Otherwise the <b>row</b> <b>address</b> is reset to zero and the memory address is continues increasing linearly. This causes the same sequence of character values to be re-read from the memory for each raster line of each character row, before the 6845 advances the memory address to the next character row and repeats the same pattern. Therefore, if a character occupies one [...] "word" [...] in the video buffer, a display of l lines and c columns of characters with s scan lines per character requires l ร c words of memory to represent a full screen of characters but takes s times that many memory accesses to complete one refresh cycle (as each line of character words is repeatedly read s times before the next one is read). This means that character displays using the 6845, compared to all-points-addressable graphics displays of the same resolution, require much less memory but still require high memory bandwidth on the order of the bandwidth required for graphics. (A different video display controller that buffers one whole line of character data internally can avoid this repeated reading of each line of characters from the display buffer RAM, reducing the required memory bandwidth and allowing either slower, less expensive memory chips to be used, more time for a system CPU to access the memory, or a combination of both.) ...|$|R
5000|$|The {{active command}} {{activates}} an idle bank. It presents a two-bit bank address (BA0 - BA1) and a 13-bit <b>row</b> <b>address</b> (A0 - A12), and causes a read of that row into the bank's array of all 16,384 column sense amplifiers. This {{is also known}} as [...] "opening" [...] the row. This operation has the side effect of refreshing the dynamic (capacitive) memory storage cells of that row.|$|R
50|$|Vertical {{scrolling}} appears constrained {{because only}} the character start address {{can be set}} and the <b>row</b> <b>address</b> is always zeroed at frame start, but by adjusting border times {{it is possible to}} shift the position the framebuffer is shown on the raster display for increments in between whole characters. With drawing of blank pixels at the screen edges, this can be made invisible to the user creating just the illusion of a smooth vertical scroll.|$|R
5000|$|This {{operates}} equivalently {{to standard}} SDRAM's activate command, specifying a <b>row</b> <b>address</b> to be {{loaded into the}} bank's sense amplifier array. To save power, a chip may be configured to only activate {{a portion of the}} sense amplifier array. In this case, the SR1..0 bits specify the half or quarter of the row to activate, and following read/write commands' column addresses are required to be limited to that portion. (Refresh operations always use the full row.) ...|$|R
50|$|As an example, {{a typical}} 1 GiB SDRAM memory module might contain eight {{separate}} one-gibibit DRAM chips, each offering 128 MiB of storage space. Each chip is divided internally into eight banks of 227=128 Mibits, {{each of which}} composes a separate DRAM array. Each array contains 214=16384 rows of 213=8192 bits each. One byte of memory (from each chip; 64 bits total from the whole DIMM) is accessed by supplying a 3-bit bank number, a 14-bit <b>row</b> <b>address,</b> and a 10-bit column address.|$|R
50|$|At this point, {{the master}} has {{gained access to}} the bus. To write data, the card drives an address, an address {{modifier}} and data onto the bus. It then drives the <b>address</b> <b>strobe</b> line and the two data strobe lines low, to indicate the data is ready, and drives the write pin to indicate the transfer direction. There are two data strobes and an *LWORD line, so the cards can indicate if the data width is 8, 16, or 32 bits (or 64 in VME64). The card at the bus address reads the data and pulls the data transfer acknowledge low line when the transfer can complete. If the transfer cannot complete, it can pull the bus error line low. Reading data {{is essentially the same}} but the controlling card drives the address bus, leaves the data bus tri-stated and drives the read pin. The slave card drives read data onto the data bus and drives the data strobe pins low when the data is ready. The signalling scheme is asynchronous, meaning that the transfer is not tied to the timing of a bus clock pin (unlike synchronous buses such as PCI).|$|R
40|$|AbstractโWe {{present a}} {{transmitter}} for a scalable multiple-access inter-chip link that communicates binary activity between two-dimensional arrays fabricated in deep submicrometer CMOS. Transmission is initiated by active cells but cells are not read individually. An entire row is read in parallel; this increases communication capacity with integration density. Access is random but not inequitable. A row is not reread until all those waiting are serviced; this increases parallelism {{as more of}} its cells become active in the mean time. <b>Row</b> and column <b>addresses</b> identify active cells {{but they are not}} transmitted simultaneously. The <b>row</b> <b>address</b> is followed sequentially by a column address for each active cell; this cuts pad count in half without sacrificing capacity. We synthesized an asynchronous implementation by performing a series of program decompositions, starting from a high-level description. Links using this design have been implemented successfully i...|$|R
30|$|Equations (4) and (5) {{show how}} the {{physical}} memory locations can be addressed, starting from the image space arrangement. The proposed addressing scheme treats MBs and sub-blocks individually and allocates separate address bit ranges for them. For the MB address, 7 bits are sufficient both horizontally (68 MBs ร 2 memory locations column address) and vertically (120 MBs รท 8 banks <b>row</b> <b>address).</b> The Sub_blockAddr and pixelAddr are fields of 2 bits each, representing the number of 4 ร 4 blocks in a MB {{and the number of}} pixels in a 4 ร 4 block along the two dimensions.|$|R
