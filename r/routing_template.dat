5|7|Public
50|$|ImpressPages 4.0 has a MVC engine {{providing}} {{users with}} MVC, <b>routing,</b> <b>template</b> helpers, url generation, DB layer (and PDO), PSR standards-compliant class naming and autoloader.|$|E
40|$|Ever {{wish you}} could simplify your ILLiad {{workflow}} quickly and easily? The speakers will describe ten ways you can do just that—for free! Topics include Trusted Sender, custom <b>routing,</b> <b>template</b> modification, converting pdfs to tiffs, Direct Request, custom queues, bypassing copyright clearance, custom emails, deflections, and using lending web pages...|$|E
40|$|We {{consider}} the following network design problem. We are given an undirected graph G = (V, E) with edges costs c(e) {{and a set of}} terminal nodes W. A hose matrix for W is any symmetric matrix (Dij) such that for each i, � j�=i Dij ≤ 1. We must compute the minimum cost edge capacities that are able to support the oblivious routing of every hose matrix in the network. An oblivious <b>routing</b> <b>template,</b> in this context, is a simple path Pij for each pair i, j ∈ W. Given such a template, if we are to route a demand matrix D, then for each i, j we send Dij units of flow along each Pij. Fingerhut et al. [13] and Gupta et al. [16] obtained a 2 -approximation for this problem, using a <b>routing</b> <b>template</b> {{in the form of a}} tree. It has been widely asked (cf. [19]) if this solution actually results in the optimal capacity for the single path VPN design problem; this has become known as the VPN conjecture. The conjecture has previously been proven for some restricted classes of graphs [18, 15, 14]. Our main theorem establishes that this conjecture is true in general graphs. This also settles the complexity of the single path VPN problem. We also show that the version of the conjecture where fractional routing templates are allowed is false...|$|E
40|$|A {{generalization}} of the robust network design problem with oblivious routing is investigated in (Scutella', 2009), where the (uncertain) demands are served through two alternative <b>routing</b> <b>templates.</b> As indicated in that paper, {{it is an}} open issue {{as to whether the}} proposed problem, called (2 -RND), is polynomially solvable or is NP-Hard. In this note we solve the issue by proving that (2 -RND), as well as some generalizations, are NP-Hard. The hardness result holds true also when some <b>routing</b> <b>templates</b> are given as input data. This strengthens the results in (Scutella', 2009), where special (2 -RND) cases are devised which are tractable from a computational perspective...|$|R
40|$|In {{this paper}} a {{generalization}} of the robust network design problem with oblivious routing is investigated, where the (uncertain) demands are served through two alternative <b>routing</b> <b>templates.</b> A mathematical programming model leading to tractable cases is presented, together with related algorithmic approaches. The proposed special cases strictly generalize the standard oblivious routing model...|$|R
40|$|Abstract—We study a {{class of}} robust network design {{problems}} motivated {{by the need to}} scale core networks to meet increasingly dynamic capacity demands. Past work has focused on one of two models. First, design the network for the known point-to-point peak demands. Second, design the network to support all hose matrices (all matrices not exceeding marginal bounds at the nodes). Both models may be too conservative if additional information on traffic patterns is available. We introduce a capped hose model to explore a range of traffic scenarios, which includes the above two as special cases. It is known that optimal network designs for the hose model are always determined by single-hub routing, and for the fixed-demand model are based on shortest-path routing. We demonstrate that a wider variety of <b>routing</b> <b>templates</b> is required to address the broader spectrum of capped hose matrices. We propose the use of hierarchical multi-hub <b>routing</b> <b>templates,</b> a generalization of hub and tree routing. Our empirical analysis is based on a heuristic for the resulting robust network design problem. These lead to two important findings: (1) designs based on multi-hub routing are often preferable to both hub and shortest path, (2) it may be possible for a carrier to sample their traffic in order to determine which type of routing is most cost-effective for their network. I...|$|R
40|$|Abstract—We study a {{class of}} robust network design {{problems}} motivated {{by the need to}} scale core networks to meet increasingly dynamic capacity demands. Past work has focused on designing the network to support all hose matrices (all matrices not exceeding marginal bounds at the nodes). This model may be too conservative if additional information on traffic patterns is available. Another extreme is the fixed demand model, where one designs the network to support peak point-to-point demands. We introduce a capped hose model to explore a broader range of traffic matrices which includes the above two as special cases. It is known that optimal designs for the hose model are always determined by single-hub routing, and for the fixed-demand model are based on shortest-path routing. We shed light on the wider space of capped hose matrices in order to see which traffic models are more shortest path-like as opposed to hub-like. To address the space in between, we use hierarchical multi-hub routing templates, a generalization of hub and tree routing. In particular, we show that by adding peak capacities into the hose model, the single-hub tree-routing template is no longer cost-effective. This initiates the study of {{a class of}} robust network design (RND) problems restricted to these templates. Our empirical analysis is based on a heuristic for this new hierarchical RND problem. We also propose {{that it is possible to}} define a routing indicator that accounts for the strengths of the marginals and peak demands and use this information to choose the appropriate <b>routing</b> <b>template.</b> We benchmark our approach against other well-known routing templates, using representative carrier networks and a variety of different capped hose traffic demands, parameterized by the relative importance of their marginals as opposed to their point-to-point peak demands. This study also reveals conditions under which multi-hub routing gives improvements over single-hub and shortest-path routings...|$|E
40|$|We study a {{class of}} robust network design {{problems}} motivated {{by the need to}} scale core networks to meet increasingly dynamic capacity demands. Past work has focused on designing the network to support all hose matrices (all matrices not exceeding marginal bounds at the nodes). This model may be too conservative if additional information on traffic patterns is available. Another extreme is the fixed demand model, where one designs the network to support peak point-to-point demands. We introduce a capped hose model to explore a broader range of traffic matrices which includes the above two as special cases. It is known that optimal designs for the hose model are always determined by single-hub routing, and for the fixed- demand model are based on shortest-path routing. We shed light on the wider space of capped hose matrices in order to see which traffic models are more shortest path-like as opposed to hub-like. To address the space in between, we use hierarchical multi-hub routing templates, a generalization of hub and tree routing. In particular, we show that by adding peak capacities into the hose model, the single-hub tree-routing template is no longer cost-effective. This initiates the study of {{a class of}} robust network design (RND) problems restricted to these templates. Our empirical analysis is based on a heuristic for this new hierarchical RND problem. We also propose {{that it is possible to}} define a routing indicator that accounts for the strengths of the marginals and peak demands and use this information to choose the appropriate <b>routing</b> <b>template.</b> We benchmark our approach against other well-known routing templates, using representative carrier networks and a variety of different capped hose traffic demands, parameterized by the relative importance of their marginals as opposed to their point-to-point peak demands...|$|E
40|$|This paper {{addresses}} {{special cases}} of the robust network design problem under the single-source Hose model. We show that, {{in the case of}} unitary bounds, the static and the dynamic routing approaches lead to the same optimal solution, and this is true for both the splittable and the unspittable scenarios. As a consequence, in such a special case, the robust network design problem with (splittable) dynamic routing is polynomially solvable, whereas the problem is coNP-Hard under the general single-source Hose model. The results are {{based on the fact that}} the single-source Hose polyhedron with unitary bounds is dominated by a polynomial number of demand vectors. A feasible static routing can then be constructed as a convex combination of a set of <b>routing</b> <b>templates</b> which are feasible for the dominant demand vectors. The equivalence between static and dynamic routing is a consequence of those results, and it can also be generalized to some single-source Hose cases with non unitary bounds...|$|R
40|$|This {{lightning}} talk {{will review}} the process of integrating the use of DocuSign for electronic signatures into the overall permissions workflow for institutional repositories. Subtopics include creating and using <b>templates,</b> <b>routing</b> to collection administrators and program managers, adjusting settings, prefilling forms, and processing the completed forms for the IR. Using an electronic process for permission forms saves time while increasing communication with creators and stakeholders...|$|R
40|$|Memristor-based Computation-in-Memory {{is one of}} the {{emerging}} architectures proposed to deal with Big Data problems. The design of such architectures requires a radically new automatic design flow because the memristor is a passive device that uses resistance to encode its logic value. This paper proposes a design flow for mapping parallel algorithms on the CIM architecture. Algorithms with similar data flow graphs can be mapped on the crossbar using the same template containing scheduling, placement, and <b>routing</b> information; this <b>template</b> is named skeleton. By configuring such a skeleton with different pre-designed circuits, we can build CIM implementations of the corresponding algorithms in that class. This approach does not only map an algorithm on a memristor crossbar, but also gives an estimation of its performance, area, and energy consumption. It also supports user-defined constraints and parallel SystemC simulation. Experimental results demonstrate the feasibility and the potential of the approach. Accepted Author ManuscriptComputer EngineeringQuantum EngineeringFTQC/Bertels La...|$|R
40|$|A single-page {{application}} is a website that retrieves all needed components in one single page load. The {{intention is to}} get a user experience that reminds more of a native appli- cation rather than a website. Single-page applications written in Javascript {{are becoming more and more}} popular, but when the size of the applications grows the complexity is also increased. A good architecture or a suitable framework is therefore needed. The thesis begins by analyzing a number of design patterns suitable for applications containing a graphical user interface. Based on a composition of these design patterns, an architecture that targets single-page applications was designed. The architecture was designed to make applications easy to develop, test and maintain. Initial loading time, data synchronization and search engine optimizations were also important aspects that were considered. A framework based on the architecture was implemented, tested and compared against other frameworks available on the market. The framework that was implemented was designed to be modular, supports <b>routing</b> and <b>templates</b> as well as a number of different drivers for communicating with a server-side database. The modules were designed with a variant of the pattern Model-View-Controller (MVC), where a presentation model was introduced between the controller and the view. This allows unit tests to bypass the user interface and instead communicate directly with the core of the application. After minification and compression, the size of the framework is only 14. 7 kB including all its dependencies. This results in a low initial loading time. Finally, a solution that allows a Javascript application to be indexed by a search engine is presented. It is based on PhantomJS in order to produce a static snapshot that can be served to the search engines. The solution is fast, scalable and easy to maintain. ...|$|R

