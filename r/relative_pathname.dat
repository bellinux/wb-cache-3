4|5|Public
5000|$|...r (--relative-only): Only output {{information}} about source files with a <b>relative</b> <b>pathname</b> (after source prefix elision). Absolute paths are usually system header files and coverage of any inline functions therein is normally uninteresting.|$|E
5000|$|All scenes, objects, materials, textures, sounds, images, {{post-production}} {{effects for}} an entire animation {{can be stored in}} a single [...] ".blend" [...] file. Data loaded from external sources, such as images and sounds, can also be stored externally and referenced through either an absolute or <b>relative</b> <b>pathname.</b> Likewise, [...] ".blend" [...] files themselves can also be used as libraries of Blender assets.|$|E
5000|$|To seal a package, a Name entry {{needs to}} appear, {{followed}} by a Sealed header, such as:Name: myCompany/myPackage/Sealed: trueThe Name header's value is the package's <b>relative</b> <b>pathname.</b> Note that it ends with a '/' to distinguish it from a filename. Any headers following a Name header, without any intervening blank lines, apply to the file or package specified in the Name header. In the above example, because the [...] header occurs after the [...] header with no intervening blank lines, the [...] header applies (only) to the package [...]|$|E
5000|$|Microsoft Windows {{application}} shortcuts contain additional metadata {{that can}} be associated with the destination, whereas POSIX symbolic links are just strings that will be interpreted as absolute or <b>relative</b> <b>pathnames.</b>|$|R
50|$|When a map {{is saved}} a new file {{extension}} is created (.mxd). This file does not save the layers or spatial data with it, only the <b>relative</b> <b>pathnames.</b> What {{this means is}} if the data used in the map {{is not in the}} same location as the previous time it was opened there will be an error. This assists with keeping the file small and reduces the amount of redundancy in data management.|$|R
5000|$|Since [...] accepts {{only one}} operand, its usage within the inner loop of shell scripts can be {{detrimental}} to performance. Consider while read file; do dirname [...] "$file" [...] done < some-inputThe above excerpt would cause a separate process invocation for each line of input. For this reason, shell substitution is typically used instead [...] echo [...] "${file%/*}";or if <b>relative</b> <b>pathnames</b> need to be handled as well if -n [...] "${file##*/*}" [...] then echo [...] "." [...] else echo [...] "${file%/*}"; fiNote that these handle trailing slashes differently than dirname.|$|R
5000|$|On Unix-style systems, DOS, and Microsoft Windows, {{the name}} [...] "sample" [...] {{refers to a}} file in the current {{directory}} named [...] "sample". If the current directory is changed, then the file referred to by the name [...] "sample" [...] is different. If you start the filename with [...] "/" [...] indicating the root directory as in [...] "/Users/Name/sample", then on Unix this is a fully qualified file name. So, for example, instead of referring to [...] in , which uses a <b>relative</b> <b>pathname,</b> the fully qualified name would be [...] In DOS, the name is still relative to the root directory of the current disk, so to get a fully qualified file name, the file name must be prefixed with the drive letter and a colon, as in [...] "C:\Users\Name\sample", where [...] "C:" [...] specifies the [...] "C" [...] drive.|$|E
5000|$|... a local <b>pathname</b> <b>relative</b> to the M3U file location; e.g. Heavysets.mp3 ...|$|R
5000|$|Tilde {{notation}} {{offers a}} shorthand way of specifying <b>pathnames</b> <b>relative</b> {{to the home}} directory using the [...] "" [...] character.|$|R

