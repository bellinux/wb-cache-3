0|10000|Public
5000|$|... causes new {{files and}} subdirectories created within it to inherit its <b>group</b> <b>ID,</b> {{rather than the}} primary <b>group</b> <b>ID</b> of the user who created the file (the owner ID is never affected, only the <b>group</b> <b>ID).</b>|$|R
50|$|Originally, {{a signed}} 16-bit integer was used. Since the sign was not {{necessary}} - negative numbers do not make valid <b>group</b> <b>IDs</b> - an unsigned integer is now used instead, allowing <b>group</b> <b>IDs</b> between 0 and 65,535. Modern operating systems usually use unsigned 32-bit integers, which allow for <b>group</b> <b>IDs</b> between 0 and 4,294,967,295.|$|R
50|$|Three {{additional}} commands, Set Path <b>Group</b> <b>ID,</b> Sense Path <b>Group</b> <b>ID,</b> andSuspend Multipath Reconnection, {{are used}} to support attachment of the3380 Models havaing two controllers {{at the head of}} a string.|$|R
5000|$|... {{does not}} affect <b>group</b> <b>ID</b> of the files that are created {{elsewhere}} {{and moved to the}} directory in question. The file will continue to carry the <b>group</b> <b>ID</b> that was effected when and where it was created.|$|R
50|$|The <b>Group</b> <b>ID</b> of the file.|$|R
50|$|The {{service is}} {{identified}} in the 112-bit <b>Group</b> <b>ID</b> field. For example, if ff02::101 refers to all Network Time Protocol (NTP) servers on the local network segment, then ff08::101 refers to all NTP servers in an organization's networks. The <b>Group</b> <b>ID</b> field may be further divided for special multicast address types.|$|R
5000|$|The {{system call}} [...] {{is used to}} create a new session {{containing}} a single (new) process group, with the current process as both the session leader and the process group leader of that single process group. Process groups are identified by a positive integer, the process <b>group</b> <b>ID,</b> which is the process identifier of the process that is (or was) the process group leader. Process groups need not necessarily have leaders, although they always begin with one. Sessions are identified by the process <b>group</b> <b>ID</b> of the session leader. POSIX prohibits the change of the process <b>group</b> <b>ID</b> of a session leader.|$|R
5000|$|UNIX-style file modes, user <b>ids</b> and <b>group</b> <b>ids,</b> {{and file}} {{timestamps}} ...|$|R
50|$|In {{the virtual}} MAC address, Xs {{represent}} the <b>group</b> <b>ID</b> in hex.|$|R
50|$|Additionally, some phones, {{especially}} Nokia phones, can lock <b>group</b> <b>IDs</b> {{which are}} used in voice group call service.|$|R
50|$|The set user <b>ID</b> and set <b>group</b> <b>ID</b> bits, {{commonly}} abbreviated set-UID and set-GID respectively, {{are used}} to change {{the identity of the}} process which executes a file having either or both of those bits set. A file having the set-UID permission bit set will cause a process which executes that file to temporarily switch the effective user ID to that of the file owner. A file having the set-GID permission bit set will cause a process which executes that file to temporarily switch the effective <b>group</b> <b>ID</b> to that of the file group. A process may then alternate between the effective user or <b>group</b> <b>ID</b> which it inherited from the file and the real user or <b>group</b> <b>ID</b> which it inherited when the user logged on to the system. This provides a mechanism by which a process may limit the access rights it possesses to those code regions which require those access rights. This is a form of a security technique known as privilege separation and improves program security by limiting the unintended or undesirable actions of a processes.|$|R
50|$|Additionally, {{applications}} {{may use the}} source-specific multicast addresses {{derived from}} the local IPv6 routing prefix, with <b>group</b> <b>ID</b> C (decimal 12).|$|R
5000|$|... only {{affects the}} <b>group</b> <b>ID</b> of new files and subdirectories created after the [...] bit is set, {{and is not}} applied to {{existing}} entities.|$|R
5000|$|Unix {{operating}} systems associate both an alphanumeric {{name and a}} user or <b>group</b> <b>ID</b> with each user account or defined group of user names.|$|R
30|$|If {{the branch}} is unconditional, find the target marker at the jump address and check {{whether it is}} valid and has the same <b>group</b> <b>ID.</b>|$|R
5000|$|The set <b>group</b> <b>ID,</b> setgid, or SGID permission. When a {{file with}} setgid is executed, the {{resulting}} process will assume the <b>group</b> <b>ID</b> {{given to the}} group class. When setgid is applied to a directory, new files and directories created under that directory will inherit their group from that directory. (Default behaviour {{is to use the}} primary group of the effective user when setting the group of new files and directories, except on BSD-derived systems which behave as though the setgid bit is always set on all directories (See Setuid).) ...|$|R
5000|$|... setuid and setgid (short for [...] "set user ID upon execution" [...] and [...] "set <b>group</b> <b>ID</b> upon execution", respectively) are Unix {{access rights}} flags that allow users {{to run an}} {{executable}} with the permissions of the executable's owner or group respectively and to change behaviour in directories. They are often used to allow users on a computer system to run programs with temporarily elevated privileges in order to perform a specific task. While the assumed user <b>id</b> or <b>group</b> <b>id</b> privileges provided are not always elevated, at a minimum they are specific.|$|R
5000|$|In Unix systems, every user must be {{a member}} of at least one group, the primary group which is {{identified}} by the numeric GID of the user's entry in the group database, which can be viewed with the command [...] (usually stored in [...] or LDAP). This group {{is referred to as the}} primary <b>group</b> <b>ID.</b> A user may be listed as member of additional groups in the relevant entries in the group database, which can be viewed with [...] (usually stored in [...] or LDAP); the <b>IDs</b> of these <b>groups</b> are referred to as supplementary <b>group</b> <b>IDs.</b>|$|R
5000|$|While the BD+ {{virtual machine}} is {{extremely}} simple, {{the interface between}} the virtual machine and the player is somewhat more complicated. BD+ provides the content code with 25 system calls or [...] "traps". An overview is given in the table below. Note that the bits 00-07 of the trap id uniquely identify each trap within a <b>group.</b> The <b>group</b> <b>id</b> itself is speciÔ¨Åed by the bits 08-16 of the trap <b>id.</b> The <b>group</b> <b>ids</b> seen so far are 00 (event handling), 01 (cryptography operations), 02 (arithmetic operations), 03 (memory operations), 04 (slot memory access), 05 (device access) and 80 (debugging).|$|R
30|$|In {{a similar}} way related QI {{attributes}} are clustered and its dimensionality is minimized. This provides a new QIT containing correlated attributes in one column and uncorrelated attributes across the column with group membership in a new column <b>group</b> <b>ID.</b>|$|R
30|$|We {{suppose that}} each UE is {{composed}} of a frame that {{is divided into three}} subframes, one for the <b>group</b> <b>ID,</b> one for the role of the UE (CH, relaying, localized, or blind UE), and one for the number of hops to the CH.|$|R
50|$|File system {{security}} within UNIX and Unix-like systems {{is based on}} 9 permission bits, set user and <b>group</b> <b>ID</b> bits, and the sticky bit, {{for a total of}} 12 bits. These permissions apply almost equally to all filesystem objects such as files, directories and devices.|$|R
50|$|The bare message {{itself is}} {{structured}} as an optional list of standard properties (message id, user id, creation time, reply to, subject, correlation <b>id,</b> <b>group</b> <b>id</b> etc.), an optional list ofapplication-specific properties (i.e., extended properties) and a body, which AMQP {{refers to as}} application data.|$|R
5000|$|CARP {{also uses}} {{a range of}} Ethernet MAC {{addresses}} which IANA had assigned to the VRRP protocol. [...] The overlap prevents one from running VRRP and CARP in the same network, as the VRRP <b>group</b> <b>ID</b> and the CARP virtual host ID would conflict.|$|R
30|$|The slicing {{algorithm}} achieves {{preservation of}} privacy through {{horizontal and vertical}} partitioning. As this work focuses on multiple SA, SA that are related are grouped together based on their correlation. At that juncture SA are sufficiently clustered and results in different tables of SA making use of advanced clustering algorithm. And in the subsequent phase tuples are partitioned horizontally by means of MFA and l-diversity is checked in for each sensitive tuple. Every ST inserts the correlated attributes along with its group membership within a new column <b>group</b> <b>ID.</b> In the same way, the partitioning of QI is done under k-anonymity and then the new QIT contains all of its exact QI values along with its group membership within a new column <b>group</b> <b>ID.</b> The partitioning technique removes the dimensionality of the data that ensures this work {{to be able to}} deal with any number of sensitive attributes. Finally, the SA in each group is shuffled and thereafter linked with a common <b>group</b> <b>id,</b> in such a manner that the sensitive value corresponding to an individual can be found by an intruder with the probability of at the most 1 /l. A larger l leads to a much stronger privacy.|$|R
5000|$|For {{instance}} in certain aldol adducts with 2,6-disubstituted aryl groups the molecular geometry has the vicinal hydrogen atoms in an antiperiplanar configuration both in {{a crystal lattice}} (X-ray diffraction) and in solution proton (NMR coupling constants) normally reserved for the most bulky <b>groups</b> <b>i.d.</b> both arenes: ...|$|R
5000|$|The {{ownership}} of any file {{in the system}} may only be altered by a super-user. A user cannot give away {{ownership of}} a file, even when the user owns it. Similarly, only {{a member of a}} group can change a file's <b>group</b> <b>ID</b> to that <b>group</b> ...|$|R
50|$|On a Unix or Unix-like system, a {{background}} process or job {{can be further}} identified as one whose process <b>group</b> <b>ID</b> differs from its terminal <b>group</b> <b>ID</b> (TGID). (The TGID of a process is the process ID of the process group leader that opened the terminal, which is typically the login shell. The TGID identifies the control terminal of the process group.) This type of process is unable to receive keyboard signals from its parent terminal, and typically will not send output to that terminal. This more technical definition does not distinguish between {{whether or not the}} process can receive user intervention. Although background processes are typically used for purposes needing few resources, any process can be run in the background, and such a process will behaves like any other process, with the exceptions given above.|$|R
50|$|You can {{specify a}} <b>group</b> <b>ID</b> number as well, {{although}} like names and short names, {{they must be}} unique numbers. By default, Workgroup Manager will assign <b>group</b> <b>ID</b> numbers in the range typically used by Mac OS X Server (beginning with 1025), {{and you can use}} these numbers as long as your computer is not part of an Mac OS X Server directory structure. If you choose to assign numbers, numbers in the 600 range should be safe in most other cases. Be sure not to use any number below 100 because they are reserved for system groups needed for Mac OS X to function. Any of the groups created for user accounts will most likely be in the 500 range and should be avoided as well (the first user account is assigned 501 and each additional account is the next highest number).|$|R
5000|$|... uid and gid:These {{two options}} tell the {{filesystem}} driver {{to set the}} (default, {{in the case of}} umsdos) owner user <b>ID</b> and <b>group</b> <b>ID</b> to be a single, specified, value for all files in the volume. Both IDs are specified as numeric values (as {{to be found in the}} /etc/passwd file). So, for example, to specify to the vfat filesystem driver that all files and directories are to have owner <b>ID</b> 745 and <b>group</b> <b>ID</b> 15, the mount command would be invoked as [...] Linux filesystem drivers do not at present incorporate support for file/directory passwords on FAT12/FAT16/FAT32 volumes and multi-user world/group/owner access permissions for read/write/delete/execute rights on FAT12/FAT16 volumes as implemented in various operating systems of the Digital Research family, including DR-DOS, PalmDOS, Novell DOS, OpenDOS, FlexOS, Concurrent DOS, Multiuser DOS, System Manager and REAL/32.|$|R
50|$|Transmitting {{information}} on placement interviews to the alumni through <b>group</b> mail <b>ids.</b>|$|R
5000|$|Additional {{functionality}} of pgrep is {{listing the}} process name {{as well as}} the PID (-l Lists the process name {{as well as the}} process ID) of all processes belonging to the group alice (-G Only match processes whose real <b>group</b> <b>ID</b> is listed. Either the numerical or symbolical value may be used):$ pgrep -l -G alice ...|$|R
30|$|Adopted from IEEE 802.11 ax, each user is {{assigned}} a distinct user <b>group</b> <b>ID</b> and user position via the <b>group</b> <b>ID</b> management frame. As we {{described in the}} PHY layer design, there is information about the <b>group</b> <b>ID</b> and user position contained in the HE-SIG-A and SA-SIG-A fields. Whenever the AP transmits packets to multiple users on multiple sub-channels, each user receives the HE-SIG-A and SA-SIG-A fields in their packets. With {{the information contained in}} the signaling symbols, the user knows the information of all the other simultaneous users, as well as the user position information for each sub-channel. The receiver then looks up the stored user group table and generates a list indicating the simultaneous users for this transmission. The users served with this transmission are then ordered from lower sub-channel to higher sub-channel and from lower position to higher position. The users of sub-channel 0 is {{at the front of the}} list, and the user with user position 0 on sub-channel 0 is the first item in the list. Then, the receiver checks the next sub-channel. If the users on the current sub-channel already exist in the list, then they will not be included again. If there are new users that do not exist in the list, the receiver will append the new users to the list. The receiver repeats this process until the last sub-channel is considered, as shown in Algorithm 2.|$|R
5000|$|... 11. Transmitting {{information}} on placement interviews to the alumni through <b>group</b> mail <b>ids.</b>|$|R
30|$|The new packets {{transmitted}} in {{the network}} are encoded so that the original packet size is modified. The new packet size {{is equal to the}} sum of the length of the new group, the length of the coefficient vector, and the length of <b>group</b> <b>ID.</b> At last, from Equations (4.18), (3.1), and the new packet size, the energy consumption of NCMR is achieved.|$|R
50|$|A user {{namespace}} {{contains a}} mapping table converting user IDs from the container's {{point of view}} to the system's point of view. This allows, for example, the root user to have user id 0 in the container but is actually treated as user id 1,400,000 by the system for ownership checks. A similar table is used for <b>group</b> <b>id</b> mappings and ownership checks.|$|R
