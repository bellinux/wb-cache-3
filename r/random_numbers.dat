2467|5058|Public
5|$|Random {{matrices}} are matrices whose {{entries are}} <b>random</b> <b>numbers,</b> subject to suitable probability distributions, such as matrix normal distribution. Beyond probability theory, they are applied in domains ranging from number theory to physics.|$|E
5|$|By 1966, Gygax {{was active}} in the wargame hobby world and was writing many {{magazine}} articles on the subject. Gygax learned about H. G. Wells' Little Wars book for play of military miniatures wargames and Fletcher Pratt's Naval Wargame book. Gygax later looked for innovative ways to generate <b>random</b> <b>numbers,</b> and he used not only common, six-sided dice, but dice of all five Platonic solid shapes, which he discovered in a school supply catalog.|$|E
5|$|In April 2015, fans mistook <b>random</b> <b>numbers</b> {{that were}} placed by Cawthon into the source {{code of the}} game's {{official}} website to be coordinates that pointed to a location significant to the games. Fans entered these numbers into Google Maps and consequently discovered a pizzeria in Virginia. Mass phone calls {{were made to the}} pizzeria by fans, attempting to discover if the company had a connection to the upcoming installment, Five Nights at Freddy's 4. It was later confirmed by Cawthon that this pizzeria had no connection with the Five Nights at Freddy's series.|$|E
40|$|<b>Random</b> <b>number</b> {{generator}} is a {{key component}} for strengthening and securing the confidentiality of electronic communications. <b>Random</b> <b>number</b> generators can be divided as either pseudo <b>random</b> <b>number</b> generators or true <b>random</b> <b>number</b> generators. A pseudo <b>random</b> <b>number</b> generator produces a stream of numbers {{that appears to be}} random but actually follow predefined sequence. A true <b>random</b> <b>number</b> generator produces a stream of unpredictable numbers that have no defined pattern. There has been growing interest to design true <b>random</b> <b>number</b> generator in past few years. Several Field Programmable Gate Array (FPGA) and Application Specific Integrated Circuit (ASIC) based approaches have been used to generate random data that requires analog circuit. RNGs having analog circuits demand for more power and area. These factors weaken hardware analog circuit-based RNG systems relative to hardware completely digital-based RNGs systems. This thesis is focused on the design of completely digital true <b>random</b> <b>number</b> generator ASIC...|$|R
25|$|Proposed new <b>random</b> <b>number</b> {{generators}} {{are often}} {{compared to the}} RC4 <b>random</b> <b>number</b> generator.|$|R
50|$|The <b>random</b> <b>number</b> {{generator}} is {{compliant with}} security and cryptographic standards such as NIST SP 800-90A, FIPS 140-2, and ANSI X9.82. Intel also requested Cryptography Research Inc. {{to review the}} <b>random</b> <b>number</b> generator in 1999 and 2012, which resulted in two published papers: The Intel <b>Random</b> <b>Number</b> Generator in 1999, and Analysis of Intel's Ivy Bridge Digital <b>Random</b> <b>Number</b> Generator in 2012.|$|R
5|$|Another {{method of}} {{constructing}} hash functions with both high quality and practical speed is tabulation hashing. In this method, the hash value for a key {{is computed by}} using each byte of the key as an index into a table of <b>random</b> <b>numbers</b> (with a different table for each byte position). The numbers from those table cells are then combined by a bitwise exclusive or operation. Hash functions constructed this way are only 3-independent. Nevertheless, linear probing using these hash functions takes constant expected time per operation. Both tabulation hashing and standard methods for generating 5-independent hash functions are limited to keys that have a fixed number of bits. To handle strings or other types of variable-length keys, {{it is possible to}} compose a simpler universal hashing technique that maps the keys to intermediate values and a higher quality (5-independent or tabulation) hash function that maps the intermediate values to hash table indices.|$|E
5|$|Archaeological {{evidence}} shows that Zhou dynasty divination was grounded in cleromancy, the production of seemingly <b>random</b> <b>numbers</b> to determine divine intent. The Zhou yi provided a guide to cleromancy that used the stalks of the yarrow plant, {{but it is not}} known how the yarrow stalks became numbers, or how specific lines were chosen from the line readings. In the hexagrams, broken lines were used as shorthand for the numbers 6 (六) and 8 (八), and solid lines were shorthand for values of 7 (七) and 9 (九). The Great Commentary contains a late classic description of a process where various numerological operations are performed on a bundle of 50 stalks, leaving remainders of 6 to 9. Like the Zhou yi itself, yarrow stalk divination dates to the Western Zhou period, although its modern form is a reconstruction.|$|E
5|$|The I Ching uses {{a type of}} divination called cleromancy, which {{produces}} apparently <b>random</b> <b>numbers.</b> Six numbers between 6 and 9 are turned into a hexagram, which can then be looked up in the I Ching book, arranged in an order known as the King Wen sequence. The interpretation of the readings found in the I Ching {{is a matter of}} centuries of debate, and many commentators have used the book symbolically, often to provide guidance for moral decision making as informed by Taoism and Confucianism. The hexagrams themselves have often acquired cosmological significance and paralleled with many other traditional names for the processes of change such as yin and yang and Wu Xing.|$|E
40|$|In {{this paper}} {{we will give}} an {{introduction}} to <b>random</b> <b>number</b> generation. We will give examples of entropy sources used in different <b>random</b> <b>number</b> generators and we will describe different de-skewing techniques and mixing functions. We will also present an implementation of a <b>random</b> <b>number</b> generator based on entropy sources available in typical computers. Finally we will describe different statistical tests for measuring the quality of output from <b>random</b> <b>number</b> generators. ...|$|R
50|$|The CRAY <b>random</b> <b>number</b> {{generator}} RANF is a Lehmer RNG with n = 2 − 1 and g = 44,485,709,377,909. The GNU Scientific Library {{includes several}} <b>random</b> <b>number</b> generators of the Lehmer form, including MINSTD, RANF, and the infamous IBM <b>random</b> <b>number</b> generator RANDU.|$|R
40|$|We {{describe}} {{a strategy for}} <b>random</b> <b>number</b> generation that efficiently supports per-particle-state for Monte Carlo transport applications. Unlike prior <b>random</b> <b>number</b> generation strategies, where the design goal of a countable number of independent full period sequences matches a per-cpu <b>random</b> <b>number</b> state well, we provide an uncount-able number of statistically independent short sequences that match the typical lifetime of a Monte Carlo particle well. The short sequences are selected from a single <b>random</b> <b>number</b> stream of suitable quality and period, using a cryptographic hash function to select random starting positions. The <b>random</b> <b>number</b> generators described herein are stateless. The <b>random</b> <b>number</b> state is carried along with the particle. The stateless de-sign removes the read-modify-write hazard associated with traditional <b>random</b> <b>number</b> generators in shared memory parallel environments, and helps support deterministic be-havior when a particle is moved from one processor to another in a distributed memory application. Our library is implemented in the C programming language. A Fortran interface to the library is provided...|$|R
25|$|Uses of Monte Carlo methods require {{large amounts}} of <b>random</b> <b>numbers,</b> and it was their use that spurred the {{development}} of pseudorandom number generators, which were far quicker to use than the tables of <b>random</b> <b>numbers</b> that had been previously used for statistical sampling.|$|E
25|$|Mathematics: <b>Random</b> <b>numbers</b> {{are also}} {{employed}} where their use is mathematically important, such as sampling for opinion polls and for statistical sampling in quality control systems. Computational solutions for {{some types of}} problems use <b>random</b> <b>numbers</b> extensively, {{such as in the}} Monte Carlo method and in genetic algorithms.|$|E
25|$|A kind of {{opposite}} of a sorting algorithm is a shuffling algorithm. These are fundamentally different because they require {{a source of}} <b>random</b> <b>numbers.</b> Interestingly, shuffling can also be implemented by a sorting algorithm, namely by a random sort: assigning a random number to each element of the list and then sorting based on the <b>random</b> <b>numbers.</b> This is generally not done in practice, however, {{and there is a}} well-known simple and efficient algorithm for shuffling: the Fisher–Yates shuffle.|$|E
50|$|C++11's <b>random</b> <b>number</b> {{functionality}} {{is split}} into two parts: a generator engine that contains the <b>random</b> <b>number</b> generator's state and produces the pseudorandom numbers; and a distribution, which determines the range and mathematical distribution of the outcome. These two are combined to form a <b>random</b> <b>number</b> generator object.|$|R
25|$|The <b>random</b> <b>number</b> {{generators}} used by Alice and Bob must {{be trusted}} and truly random (for example a Quantum <b>random</b> <b>number</b> generator).|$|R
5000|$|John von Neumann was {{a pioneer}} in {{computer-based}} <b>random</b> <b>number</b> generators. In 1949, Derrick Henry Lehmer invented the linear congruential generator, which {{was for a long}} time used in most pseudorandom number generators. Today, most generators in use are based on linear recurrence (for instance, the Xorshift family). With the spread of the use of computers, algorithmic pseudorandom <b>number</b> generators replaced <b>random</b> <b>number</b> tables, and [...] "true" [...] <b>random</b> <b>number</b> generators (hardware <b>random</b> <b>number</b> generators) are used in only a few cases.|$|R
25|$|Simulations can {{be based}} on either {{integration}} of differential equations without use of <b>random</b> <b>numbers</b> (deterministic simulations) or {{be based on}} random events (stochastic simulations).|$|E
25|$|Double-blinding is {{relatively}} easy to achieve in drug studies, by formulating the investigational drug and the control (either a placebo or an established drug) to have identical appearance (color, taste, etc.). Patients are randomly assigned to the control or experimental group and given <b>random</b> <b>numbers</b> by a study coordinator, who also encodes the drugs with matching <b>random</b> <b>numbers.</b> Neither the patients nor the researchers monitoring the outcome know which patient is receiving which treatment, until the study is over and the random code is revealed.|$|E
25|$|The Box–Muller transform, by George Edward Pelham Box and Mervin Edgar Muller, is a {{pseudo-random}} number sampling method for generating pairs of independent, standard, normally distributed (zero expectation, unit variance) <b>random</b> <b>numbers,</b> given {{a source of}} uniformly distributed <b>random</b> <b>numbers.</b> The method was in fact first mentioned by Raymond E. A. C. Paley and Norbert Wiener in 1934, and {{it is more likely}} than not that this source was well known to Box and Muller, which, however, failed to cite it in their article of 1958.|$|E
3000|$|Impersonation and replay attack: The {{protocols}} work in {{a complete}} challenge-response fashion by mutual authentication. When a tag reaches {{within the range of}} a reader, the reader sends queries with a <b>random</b> <b>number</b> to the tag. An adversary may also request a tag with a <b>random</b> <b>number.</b> Without knowing ID, hash function, secret x and <b>random</b> <b>number</b> r [...]...|$|R
40|$|Parallel {{computers}} are now commonly used for computational science and engineering, and many applications {{in these areas}} use <b>random</b> <b>number</b> generators. For some applications, such as large-scale Monte Carlo simulations, {{it is crucial that}} the <b>random</b> <b>number</b> generator have good randomness properties. Many programs are available for testing the quality of sequential <b>random</b> <b>number</b> generators, but very little work has been done on testing parallel <b>random</b> <b>number</b> generators. We present some techniques for empirical testing of <b>random</b> <b>number</b> generators on parallel computers, using tests based on computational science applications as examples. In particular, we focus on tests based on parallel algorithms developed for Monte Carlo simulations of the two dimensional Ising model, for which exact results are known. Preliminary results of these tests are presented for several parallel <b>random</b> <b>number</b> generators. Current address. 1 Introduction Parallel {{computers are}} now commonly used for computatio [...] ...|$|R
3000|$|... where (x, k) {{represent}} {{the state of}} the <b>random</b> <b>number</b> generator, updated during each invocation of the mixing function. The output, the generated <b>random</b> <b>number,</b> is x.|$|R
25|$|Before {{the advent}} of {{computational}} random number generators, generating large amounts of sufficiently <b>random</b> <b>numbers</b> (important in statistics) required a lot of work. Results would sometimes be collected and distributed as random number tables.|$|E
25|$|The many {{applications}} of randomness {{have led to}} many different methods for generating random data. These methods may vary as to how unpredictable or statistically random they are, and how quickly they can generate <b>random</b> <b>numbers.</b>|$|E
25|$|Markov chain {{methods have}} also become very {{important}} for generating sequences of <b>random</b> <b>numbers</b> to accurately reflect very complicated desired probability distributions, via a process called Markov chain Monte Carlo (MCMC). In recent years this has revolutionized the practicability of Bayesian inference methods, allowing {{a wide range of}} posterior distributions to be simulated and their parameters found numerically.|$|E
50|$|The <b>Random</b> <b>Number</b> Generation {{focuses on}} {{developing}} hardware <b>random</b> <b>number</b> generators based on quantum randomness, for cryptographic and security applications (quantum key generation) and research purposes (MonteCarlo simulations).|$|R
30|$|The {{utilization}} of <b>random</b> <b>number</b> {{challenges in the}} certificate-based user authentication procedure can also block an attacker attempting to intercept the authentication tokens, including the signature data created by other users, and prevent the attacker from using them successfully later on [28]. However, the <b>random</b> <b>number</b> challenge should be newly created for each authentication token exchange procedure. A security method for blocking replay attacks also depends on the <b>random</b> <b>number</b> challenges that were created repeatedly in the low probability. The TMZ system uses the FIPS approved by the <b>random</b> <b>number</b> generator.|$|R
40|$|We {{present a}} {{computational}} scheme, GRIP (geometric random inner products), for testing {{the quality of}} <b>random</b> <b>number</b> generators. The GRIP formalism utilizes geometric probability techniques to calculate the average scalar products of random vectors distributed in geometric objects, such as circles and spheres. We show that these average scalar products define a family of geometric constants {{which can be used}} to evaluate the quality of <b>random</b> <b>number</b> generators. We explicitly apply the GRIP tests to several <b>random</b> <b>number</b> generators frequently used in Monte Carlo simulations, and demonstrate a statistical property for good <b>random</b> <b>number</b> generators...|$|R
25|$|In May 2016, it was {{reported}} that dozens of Danish HTTPS-protected websites belonging to Visa Inc. were vulnerable to attacks allowing hackers to inject malicious code and forged content into the browsers of visitors. The attacks worked because the TLS implementation used on the affected servers incorrectly reused <b>random</b> <b>numbers</b> (nonces) that are intended be used only once, ensuring that each TLS handshake is unique.|$|E
25|$|The {{mathematical}} {{theory of}} probability arose from attempts to formulate mathematical descriptions of chance events, originally {{in the context of}} gambling, but later in connection with physics. Statistics is used to infer the underlying probability distribution of a collection of empirical observations. For the purposes of simulation, it is necessary to have a large supply of <b>random</b> <b>numbers</b> or means to generate them on demand.|$|E
25|$|There is {{also some}} {{investigation}} into {{the connection between the}} fast Hadamard transform and the normal distribution, since the transform employs just addition and subtraction and by the central limit theorem <b>random</b> <b>numbers</b> from almost any distribution will be transformed into the normal distribution. In this regard a series of Hadamard transforms can be combined with random permutations to turn arbitrary data sets into a normally distributed data.|$|E
40|$|Pseudo-random {{numbers are}} often {{required}} for simulations performed on parallel computers. The requirements for parallel <b>random</b> <b>number</b> generators are more stringent {{than those for}} sequential <b>random</b> <b>number</b> generators. As well as passing the usual sequential tests on each processor, a parallel <b>random</b> <b>number</b> generator must give dierent, independent sequences on each processor. We consider the requirements for a good parallel <b>random</b> <b>number</b> generator, and discuss generators for the uniform and normal distributions. We also describe {{a new class of}} generators for the normal distribution (based on a proposal by Wallace). Thes...|$|R
40|$|Although the <b>random</b> <b>number</b> {{generation}} in a cryptographic {{system is a}} key element of the security chain, bibliography dealing with attacks on this part is not really wide. However, among the large number of attacks targeting cyphers, the ones exploiting electromagnetic side channel (in near field) could be very effective against <b>random</b> <b>number</b> generators. This presentation gives an insight on the first results of electromagnetic analysis performed on <b>random</b> <b>number</b> generators. The main idea is to evaluate if the tools elaborated to perform electromagnetic analysis on cyphers could be used on <b>random</b> <b>number</b> generators, too...|$|R
5000|$|Because {{the outcome}} of quantum-mechanical events cannot in {{principle}} be predicted, they are the ‘gold standard’ for <b>random</b> <b>number</b> generation. Some quantum phenomena used for <b>random</b> <b>number</b> generation include: ...|$|R
