238|405|Public
2500|$|Since {{the volume}} is {{proportional}} to a power of the radius, the above relation leads to a simple <b>recurrence</b> <b>equation</b> relating the surface area of an -ball and the volume of an -ball. By applying the two-dimension recursion formula, it also gives a <b>recurrence</b> <b>equation</b> relating the surface area of an -ball and the volume of an -ball: ...|$|E
2500|$|Similar to Seidel's {{approach}} D. E. Knuth and T. J. Buckholtz [...] gave a <b>recurrence</b> <b>equation</b> for {{the numbers}} [...] and recommended this method for computing [...] and [...] ‘on electronic computers using only simple operations on integers’.|$|E
5000|$|For the {{idealized}} population, the inbreeding coefficients {{follow the}} <b>recurrence</b> <b>equation</b> ...|$|E
40|$|AbstractMost work on {{the problem}} of synthesizing a {{systolic}} array from a system of <b>recurrence</b> <b>equations</b> is restricted to systems of uniform <b>recurrence</b> <b>equations.</b> In this paper, this restriction is relaxed to include systems of affine <b>recurrence</b> <b>equations.</b> A system of uniform <b>recurrence</b> <b>equations</b> typically can be embedded in space-time so that the distance between a variable and a dependent variable does not depend on the problem size. Systems of affine <b>recurrence</b> <b>equations</b> which are not uniform do not enjoy this property. However, a method has been presented in another paper for converting a system of affine <b>recurrence</b> <b>equations</b> to an equivalent system of <b>recurrence</b> <b>equations</b> that is uniform, except for points near the boundaries of its index sets. In this paper a procedure is presented for decoupling the dimensions of the system of affine <b>recurrence</b> <b>equations,</b> thereby simplifying the conversion to an equivalent system that is uniform (except for points near the boundaries) ...|$|R
40|$|This paper {{investigates the}} computability of <b>recurrence</b> <b>equations.</b> We first recall the results {{established}} by Karp et al. on the computability of systems of uniform <b>recurrence</b> <b>equations,</b> by Rao on regular iterative arrays and Joinnault's undecidability result on the computability of conditional systems of uniform <b>recurrence</b> <b>equations</b> with non bounded domain. Then we consider systems of parameterized affine <b>recurrence</b> <b>equations,</b> {{that is to}} say, systems of <b>recurrence</b> <b>equations</b> whose domains depend linearly on a size parameter and we establish that the computability of such systems is also undecidable...|$|R
40|$|Most work on {{the problem}} of synthesizing a {{systolic}} array from a system of recur-rence equations is restricted to systems of uniform <b>recurrence</b> <b>equations.</b> In this paper, this restriction is relaxed to include systems of affine <b>recurrence</b> <b>equations.</b> A system of uniform <b>recurrence</b> <b>equations</b> typically can be embedded in spacetime so that the distance between a variable and a dependent variable does not depend on the prob-lem size. Systems of affine <b>recurrence</b> <b>equations</b> which are not uniform, do not enjoy this property. A method in another paper has been presented for converting a system of affine <b>recurrence</b> <b>equations</b> to an equivalent system of <b>recurrence</b> <b>equations</b> that is uniform, except for points near the boundaries of its index sets...|$|R
5000|$|Slow {{division}} {{methods are}} {{all based on}} a standard <b>recurrence</b> <b>equation</b> ...|$|E
5000|$|... which holds, {{because of}} its <b>recurrence</b> <b>equation,</b> for all {{rational}} arguments.|$|E
5000|$|Since {{the volume}} is {{proportional}} to a power of the radius, the above relation leads to a simple <b>recurrence</b> <b>equation</b> relating the surface area of an -ball and the volume of an -ball. By applying the two-dimension recursion formula, it also gives a <b>recurrence</b> <b>equation</b> relating the surface area of an -ball and the volume of an -ball: ...|$|E
40|$|AbstractSystems {{of uniform}} <b>recurrence</b> <b>equations</b> were {{proposed}} by Karp et al. (1967) {{as a means}} to derive automatically programs for parallel architectures. Since then, extensions of this formalism were used by many authors, in particular, in the fields of systolic array synthesis. The computability of a system of <b>recurrence</b> <b>equations</b> is, therefore, of primary importance, and is considered as the first point to be examined when trying to implement an algorithm. This paper investigates the computability of <b>recurrence</b> <b>equations.</b> We first recall the results established by Karp et al. (1967) on the computability of systems of uniform <b>recurrence</b> <b>equations,</b> by Rao (1985) on regular iterative arrays, and Joinnault's (1987) undecidability result on the computability of conditional systems of uniform <b>recurrence</b> <b>equations</b> with nonbounded domain. Then we consider systems of parameterized affine <b>recurrence</b> <b>equations,</b> that is to say, systems of <b>recurrence</b> <b>equations</b> whose domains depend linearly on a size parameter, and establish that the computability of such system is also undecidable...|$|R
40|$|We {{present an}} {{automatic}} method for mapping {{a system of}} linear <b>recurrence</b> <b>equations</b> onto systolic architectures. First, we show that systolic architectures {{can be derived from}} linear <b>recurrence</b> <b>equations</b> using the notion of directed <b>recurrence</b> <b>equations.</b> Next, we provide a procedure called CUBIZATION to achieve better performance while mapping such equations. The CUBIZATION procedure is completely automated and can be implemented to design systolic programs for a very general architecture referred to as Basic Systolic Architecture (BSA). Using BSA, we obtain specific target architectures. The method is illustrated using a running example of Gauss-Jordan diagonalization. 1 Introduction In [6], we proposed a method to map a system of directed <b>recurrence</b> <b>equations</b> (DRE), a subclass of linear <b>recurrence</b> <b>equations</b> (LRE), which properly includes uniform <b>recurrence</b> <b>equations</b> onto systolic architecture. Here, we extend our method to LREs where the dependency vector at a point is a linear fun [...] ...|$|R
40|$|Abstract: The {{author has}} studied and solved {{different}} types of <b>recurrence</b> <b>equations,</b> especially non-linear. Some of his works {{in this area are}} mentioned in the references. In the present article a new type of nonlinear <b>recurrence</b> <b>equations</b> is introduced. These equations are named Gould functional <b>recurrence</b> <b>equations</b> and they have as solutions sequences of functions called Gould sequences. We prove that, in certain conditions, the Gould functional equations are equivalent to some numerical nonlinear <b>recurrence</b> <b>equations</b> whose solutions are the coefficients of the power series expansions of the solutions of the Gould equations. Then several particular Gould equations and their associated numerical <b>recurrence</b> <b>equations</b> will be solved. In all these cases, the closed formulas of their solutions are expressed by Fibonacci numbers. Some of the particular equations considered here have been already introduced by H. W. Gould, whence the origin of the name of the <b>recurrence</b> <b>equations</b> introduced in this article...|$|R
5000|$|Using Panmictic Index (1 &minus; F) {{instead of}} {{inbreeding}} coefficient, {{we get the}} approximate <b>recurrence</b> <b>equation</b> ...|$|E
5000|$|... that is {{monotone}} on [...] and satisfies [...] This fact follows immediately {{from the}} uniqueness of the [...] function given its <b>recurrence</b> <b>equation</b> and convexity restriction. This implies the useful difference equation: ...|$|E
5000|$|Similar to Seidel's {{approach}} D. E. Knuth and T. J. Buckholtz [...] gave a <b>recurrence</b> <b>equation</b> for {{the numbers}} [...] and recommended this method for computing [...] and [...] ‘on electronic computers using only simple operations on integers’.|$|E
40|$|Abstract: This paper {{looks at}} the {{approach}} of using generating functions to solve linear inhomogeneous <b>recurrence</b> <b>equations</b> with constant coefficients. It will be shown that the generating functions for these <b>recurrence</b> <b>equations</b> are rational functions. By decomposing a generating function into partial fractions, one can derive explicit formula as well as asymptotic estimates for its coefficients. Key–Words: Linear <b>recurrence</b> <b>equations,</b> generating functions, partial fractions decomposition. ...|$|R
40|$|Most work on {{the problem}} of synthesizing a {{systolic}} array from a system of <b>recurrence</b> <b>equations</b> is restricted to systems of uniform <b>recurrence</b> <b>equations.</b> Recently, researchers have begun to relax this restriction to include systems of affine <b>recurrence</b> <b>equations.</b> A system of uniform <b>recurrence</b> <b>equations</b> typically can be embedded in spacetime so that the distance between a variable and a dependent variable does not depend on the problem size. Systems of affine <b>recurrence</b> <b>equations</b> that are not uniform do not enjoy this property. A method is presented for converting a system of affine <b>recurrence</b> <b>equations</b> to an equivalent system of <b>recurrence</b> <b>equations</b> that is uniform, except for points near the boundaries of its index sets. Necessary and sufficient conditions are given for an affine system to be amenable to such a conversion, along with an algorithm that checks for these conditions, and a procedure that converts those affine systems which can be converted. The characterization of convertible systems brings together classical ideas in algebraic geometry, number theory, and matrix representations of groups. While the proof of this characterization is complex, the characterization itself is simple, suggesting that the mathematical ideas are well chosen for this difficult problem in array design...|$|R
40|$|In this paper, we {{describe}} a methodology for mapping linear <b>recurrence</b> <b>equations</b> to {{a spectrum of}} systolic architectures. First, we provide a method to map a system of directed <b>recurrence</b> <b>equations,</b> a subclass of linear <b>recurrence</b> <b>equations,</b> onto a very general architecture referred to as basic systolic architecture and establish correctness of the implementation. We also show how efficient transformations/implementations of programs for different systolic architectures can be obtained through transformations such as projection and translation. Next, we show that the method can be applied for the whole class of linear <b>recurrence</b> <b>equations</b> through the class of directed <b>recurrence</b> <b>equations.</b> Finally, we provide a completely automated procedure called CUBIZATION to achieve better performance while mapping such equations. The method is illustrated with examples and a comparative evaluation is made with other works. 1 Introduction Designing systolic arrays has been studied extens [...] ...|$|R
5000|$|... with Z0 = 1. Alternatively, one can {{formulate}} a branching {{process as a}} random walk. Let Si denote the state in period i, and let Xi {{be a random variable}} that is iid over all i. Then the <b>recurrence</b> <b>equation</b> is ...|$|E
50|$|Petkovšek's {{algorithm}} {{is a computer}} algebra algorithm that computes a basis of hypergeometric terms solution of its input linear <b>recurrence</b> <b>equation</b> with polynomial coefficients. Equivalently, it computes a first order right factor of linear difference operators with polynomial coefficients. This {{algorithm is}} implemented in all the major computer algebra systems.|$|E
50|$|CMLs are {{comparable}} to cellular automata models {{in terms of their}} discrete features. However, the value of each site in a cellular automata network is strictly dependent on its neighbor (s) from the previous time step. Each site of the CML is only dependent upon its neighbors relative to the coupling term in the <b>recurrence</b> <b>equation.</b> However, the similarities can be compounded when considering multi-component dynamical systems.|$|E
40|$|This {{paper is}} devoted to the {{construction}} of multi-dimensional schedules for a system of uniform <b>recurrence</b> <b>equations.</b> We show that this problem is dual to the problem of computability of a system of uniform <b>recurrence</b> <b>equations.</b> We propose a new study of the decomposition algorithm first proposed by Karp, Miller and Winograd: we base our implementation on linear programming resolutions whose duals give exactly the desired multi-dimensional schedules. Furthermore, we prove that the schedules built this way are optimal up to a constant factor. Keywords: system of uniform <b>recurrence</b> <b>equations,</b> null-weight cycles detection, multidimensional scheduling, linear programming methods 1 Introduction This paper is concerned with the problem of building multi-dimensional schedules for system of uniform <b>recurrence</b> <b>equations,</b> especially when there exists no linear schedule. Systems of uniform <b>recurrence</b> <b>equations</b> were first defined and studied, by Karp, Miller and Winograd, in the now famous pap [...] ...|$|R
40|$|Normalizing {{constant}} <b>recurrence</b> <b>equations</b> play {{an important}} role in the exact analysis of load-independent (LI) product-form queueing networks. However, they have not been extended to the load-dependent (LD) case, and this is a limitation for new solution techniques based on linear systems of <b>recurrence</b> <b>equations.</b> In thi...|$|R
40|$|We {{define a}} mean-field {{semantics}} for S-PALPS, a process calculus for spatially-explicit, individual-based modeling of ecological systems. The new semantics of S-PALPS allows {{an interpretation of}} the average behavior of a system as a set of <b>recurrence</b> <b>equations.</b> <b>Recurrence</b> <b>equations</b> are a useful approximation when dealing with a large number of individuals, as it is the case in epidemiological studies. As a case study, we compute a set of <b>recurrence</b> <b>equations</b> capturing the dynamics of an individual-based model of the transmission of dengue in Bello (Antioquia), Colombia. Comment: In Proceedings DCM 2015, arXiv: 1603. 0053...|$|R
5000|$|The {{most common}} {{formulation}} of a branching process {{is that of}} the Galton - Watson process. Let Zn denote the state in period n (often interpreted as the size of generation n), and let Xn,i be a random variable denoting the number of direct successors of member i in period n, where Xn,i are independent and identically distributed random variables over all n ∈{ 0, 1, 2, ...} and i ∈ {1, ..., Zn}. Then the <b>recurrence</b> <b>equation</b> is ...|$|E
5000|$|CMLs {{were first}} {{introduced}} in the mid 1980s {{through a series of}} closely released publications. Kapral used CMLs for modeling chemical spatial phenomena. Kuznetsov sought to apply CMLs to electrical circuitry by developing a renormalization group approach (similar to Feigenbaum's universality to spatially extended systems). Kaneko's focus was more broad and he is still known as the most active researcher in this area. The most examined CML model was introduced by Kaneko in 1983 where the <b>recurrence</b> <b>equation</b> is as follows: ...|$|E
5000|$|In mathematics, the {{telephone}} numbers or involution numbers are {{a sequence of}} integers that {{count the number of}} connection patterns in a telephone system with [...] subscribers, where connections are made between pairs of subscribers. These numbers also describe the number of matchings (the Hosoya index) of a complete graph on [...] vertices, the number of permutations on [...] elements that are involutions, the sum of absolute values of coefficients of the Hermite polynomials, the number of standard Young tableaux with [...] cells, and the sum of the degrees of the irreducible representations of the symmetric group. Involution numbers were first studied in 1800 by Heinrich August Rothe, who gave a <b>recurrence</b> <b>equation</b> by which they may be calculated, giving the values (starting from [...] ) ...|$|E
40|$|Systematic {{methods have}} been {{proposed}} {{for the design of}} (semi-) systolic arrays. One approach consists in transforming <b>recurrence</b> <b>equations.</b> An important step in this methodology is the mapping of uniform <b>recurrence</b> <b>equations</b> onto (semi-) systolic arrays; this mapping is achieved by means of an affine schedule and an affine processor allocation over the index space of the recurrences. A new scheduling algorithm is presented, which is very efficient in practice. A technique, that uses the methods for semi-systolic array design, is then proposed for checking the computability of a system of uniform <b>recurrence</b> <b>equations.</b> Anglai...|$|R
30|$|Find {{the optimal}} {{path through the}} DSI using <b>recurrence</b> <b>equations</b> (16)-(17).|$|R
40|$|The parallelization of many {{algorithms}} can {{be obtained}} using space-time transformations which are applied on nested do-loops or on <b>recurrence</b> <b>equations.</b> In this paper, we analyze systems of linear <b>recurrence</b> <b>equations,</b> a generalization of uniform <b>recurrence</b> <b>equations.</b> The {{first part of the}} paper describes a method for finding automatically whether such a system can be scheduled by an affine timing function, independent of the size parameter of the algorithm. In the second part, we describe a powerful method that makes it possible to transform linear recurrences into uniform <b>recurrence</b> <b>equations.</b> Both parts rely on results on integral convex polyhedra. Our results are illustrated on the Gauss elimination algorithm and on the Gauss-Jordan diagonalization algorithm. 1 Introduction Designing efficient algorithms for parallel architectures {{is one of the main}} difficulties of the current research in computer science. As the architecture of super-computers evolves towards massive parallelism [...] ...|$|R
30|$|Obviously, the {{recurrence}} equations (9) and (10) can be retrieved as {{a particular}} case ofthe <b>recurrence</b> <b>equation</b> (8). Observe, also, that the <b>recurrence</b> <b>equation</b> (6) can beretrieved from the <b>recurrence</b> <b>equation</b> (8). For a fuller treatment of Hanoi and Fibonacci werefer the reader to [14].|$|E
30|$|Note {{that the}} {{preceding}} <b>recurrence</b> <b>equation</b> admits only one solution. Hence such a solution represents the running time of computing of the algorithm under consideration in each case. So, from engineering viewpoint, {{it remains to}} provide the asymptotic upper bound of {{the solution to the}} preceding <b>recurrence</b> <b>equation.</b> Note that the solution itself is not important. The only really important fact about the solution to the <b>recurrence</b> <b>equation</b> is the asymptotic bound because it delimits the maximum time spent by the algorithm in order to yield a solution to the problem.|$|E
40|$|We {{characterize}} {{the structure of}} the periods of a neuronal <b>recurrence</b> <b>equation.</b> Firstly, we give a characterization of k-chains in 0 - 1 periodic sequences. Secondly, we {{characterize the}} periods of all cycles of some neuronal <b>recurrence</b> <b>equation.</b> Thirdly, we explain how these results can be used to deduce the existence of the generalized period-halving bifurcation. Comment: 22 page...|$|E
40|$|We study {{scheduling}} of structured {{systems of}} <b>recurrence</b> <b>equations.</b> We first recall the formalism of structured systems of <b>recurrence</b> <b>equations,</b> then we explain how {{to implement a}} scheduling tool for non-structured systems of reccurence equations. We introduce the notion of structured schedule and propose criteria for determining whether a structured system of reccurence equations admits a structured schedule. We give an algorithm for its computation. Finaly we propose an algorithm for computing structured multi-dimensionnal schedule for systems which do not admit a structured linear schedule. With this last method, we derive a structured schedule for a structured system of <b>recurrence</b> <b>equations</b> computing the singular value decomposition of a matrix...|$|R
40|$|In {{the present}} paper we study {{stability}} of <b>recurrence</b> <b>equations</b> (which in particular case contain a dynamics of rational functions) generated by contractive functions defined on an arbitrary non-Archimedean algebra. Moreover, multirecurrence equations are considered. We also investigate reverse <b>recurrence</b> <b>equations</b> which have application {{in the study of}} $p$-adic Gibbs measures. Note that our results also provide the existence of unique solutions of nonlinear functional equations as well. Comment: 14 page...|$|R
40|$|This paper {{presents}} a method, {{based on the}} formalism of affine <b>recurrence</b> <b>equations,</b> for the synthesis of digital circuits exploiting parallelism at the bit-level. In the initial specification of a numerical algorithm, the arithmetic operators are replaced with their yet unscheduled (schedule-free) binary implementation as <b>recurrence</b> <b>equations.</b> This allows a bit-level dependency analysis yielding a bit-parallel array. The method is demonstrated on {{the example of the}} matrix-vector product, and discuted. ...|$|R
