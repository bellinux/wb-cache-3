591|29|Public
5|$|In 2014, an {{unofficial}} version for the Pandora handheld and the ARM architecture became available by static <b>recompilation</b> and reverse engineering {{of the original}} x86 version.|$|E
25|$|Other {{scholars}} {{contend that}} it is a <b>recompilation</b> and manipulation of several authentic sources put together similarly to Lönnrot's Kalevala.|$|E
25|$|The Macintosh {{version of}} Virtual PC uses dynamic <b>recompilation</b> to {{translate}} the x86 code used by PCs into equivalent PowerPC code for Macs.|$|E
5000|$|... #Subtitle level 2: Collaborations, {{versions}} and <b>recompilations</b> ...|$|R
5000|$|Support {{for global}} object cache to avoid {{unnecessary}} <b>recompilations</b> ...|$|R
50|$|Both the Java binary {{and native}} <b>recompilations</b> will {{typically}} be in memory.|$|R
25|$|The Windows {{version of}} Virtual PC also uses dynamic <b>recompilation,</b> {{but only to}} {{translate}} x86 kernel mode and real mode code into x86 user mode code; original user mode and virtual 8086 mode code run natively.|$|E
25|$|Although {{the various}} {{component}} {{parts of the}} physical library were destroyed, in fact the centres of academic excellence had already moved to various capital cities. Furthermore, {{it is possible that}} most of the material from the Library of Alexandria actually survived, by way of the Imperial Library of Constantinople, the Academy of Gondishapur, and the House of Wisdom. This material may then have been preserved by the Reconquista, which {{led to the formation of}} European Universities and the <b>recompilation</b> of ancient texts from formerly scattered fragments.|$|E
25|$|The form not {{the content}} of the {{theories}} (conversation theory and interactions of actors theory) return to and is congruent with the forms of physical theories; such as wave particle duality (the set theoretic unfoldment part of conversation theory is a radiation and its reception is the interpretation by the recipient of the descriptions so exchanged, and vice versa). The particle aspect is the <b>recompilation</b> by the listener of what a speaker is saying. Theories of many universes, one at least for each participant A and one to participant B- are bridged by analogy. As before this is the truth value of any interaction; the metaphor for which is culture itself.|$|E
50|$|In 2006, she {{announced}} a new album with <b>recompilations</b> of Antonios Katinaris’ well-known songs.|$|R
50|$|Performance-wise static <b>recompilations</b> {{have the}} {{potential}} to achieve a better performance than real emulation approaches as in optimal case one overhead introducing interface is removed.|$|R
5000|$|... “Quaderns de Poesia” {{was one of}} {{the best}} <b>recompilations</b> of poetry from that moment in Europe. In addition, they were a clear {{exponent}} of Noucentisme and the beginnings of Avant-gardism.|$|R
500|$|Benetton sent an {{alternative}} suggestion {{to the company}} on 10 May 1994, accepted by LDRA five days later. Tests on the car were {{to be carried out}} on 28 June 1994, but were cancelled. The tests eventually took place on 6 July 1994. LDRA found the tests unsatisfactory. Benetton therefore complied with the original request, the source code, on 18 July 1994. Analysis of the software found that it included launch control, a banned aid. Benetton stated that [...] "it can only be switched on by <b>recompilation</b> of the code." [...] However LDRA found this to be untrue; launch control could be switched on by connecting a computer to the gearbox control unit. Benetton conceded that this was possible but this [...] "came as a surprise to them". To switch the system on, the user is presented with a menu with 10 visible options. [...] "Launch Control" [...] was not visibly listed as an option, however, should the user scroll down to option 13, launch control could be enabled. Benetton did not make any explanation.|$|E
2500|$|The Frink {{programming}} language has an implementation of interval arithmetic that [...] handles arbitrary-precision numbers. Programs written in Frink can use intervals without rewriting or <b>recompilation.</b>|$|E
2500|$|One {{feature that}} {{has contributed to}} the {{longevity}} of the IBM System i platform is its high-level instruction set (called TIMI for [...] "Technology Independent Machine Interface" [...] by IBM), which allows application programs to take advantage of advances in hardware and software without <b>recompilation.</b> TIMI is a virtual instruction set independent of the underlying machine instruction set of the CPU. User-mode programs contain both TIMI instructions and the machine instructions of the CPU, thus ensuring hardware independence. This is conceptually somewhat similar to the virtual machine architecture of programming environments such as Smalltalk, Java and [...]NET. The key difference is that it is embedded so deeply into the AS/400's design as to make applications effectively binary-compatible across different processor families.|$|E
50|$|He {{was very}} good at {{painting}} so was given a scholarship at Escuela de Bellas Artes from Asunción. He also restored antiquities, through researches and <b>recompilations,</b> one of his favorite activities. He was very skillful and showed very special love to his work. From 1967 to 1972 he was a teacher (drawing and geometry) at Colegio Nacional de Capiatá, he also made the seal office of the Municipalidad.|$|R
40|$|International audienceVirtualization and {{just-in-time}} (JIT) compilation {{have become}} important paradigms {{in computer science}} to address application portability issues without deteriorating average-case performance. Unfortunately, JIT compilation raises predictability issues, which currently hinder its dissemination in real-time applications. Our work aims at reconciling the two domains, i. e. {{taking advantage of the}} portability and performance provided by JIT compilation, while providing predictability guarantees. As a first step towards this ambitious goal, we study two structures of code caches and demonstrate their predictability. On the one hand, the studied binary code caches avoid too frequent function <b>recompilations,</b> providing good average-case performance. On the other hand, and more importantly for the system determinism, we show that the behavior of the code cache is predictable: a safe upper bound of the number of function <b>recompilations</b> can be computed, enabling the verification of timing constraints. Experimental results show that fixing function addresses in the binary cache ahead of time results in tighter Worst Case Execution Times (WCETs) than organizing the binary code cache in fixed-size blocks replaced using a Least Recently Used (LRU) policy...|$|R
5000|$|The {{majority}} of routines {{used in the}} sport are new, modernized <b>recompilations</b> of traditional routines. However, routines taken directly from traditional styles, including the styles that {{are not part of}} standard events, may be performed in competition, especially in China. These routines generally do not garner as many points as their modern counterparts, and are performed in events separate from the compulsory routine events. Among these, the more commonly seen routines include: ...|$|R
50|$|A <b>recompilation</b> of Colombian popular stories.|$|E
50|$|Many Java virtual {{machines}} feature dynamic <b>recompilation.</b>|$|E
50|$|PCSX2 {{supports}} save {{states and}} dynamic <b>recompilation</b> (JIT).|$|E
5000|$|The Tang code of 737 was {{the basic}} {{statutory}} law for this period, together supplemental edicts and collections. The Later Liang promulgated a code in 909. This code was blamed for {{delays in the}} administration of justice and said to be excessively harsh with respect to economic crimes. The Later Tang, Later Jin, and Later Zhou also produced <b>recompilations.</b> The Later Han was in power too briefly to make a mark on the legal system ...|$|R
50|$|Currently, {{the disc}} is being {{distributed}} widely in Central America and Mexico, {{and the band}} is working on <b>recompilations</b> with other bands as Las 11 de 911, Bomba Latina 2, and Rockfest. Mekatelyu has also been chosen to open for various internationally renowned bands including The Wailers, Alpha Blondy and the Solar System, Pericos, Non Palidece, Resistencia Suburbana, Johnnydread, and Rabanes. They are currently working on projects with Pablito Molina and Fidel Nadal of Lumumba y Todos Tus Muertos.|$|R
5000|$|He {{wrote his}} {{doctoral}} thesis on Nahua philosophy {{under the tutelage}} of Fr. Ángel María Garibay K., a notable researcher and translator of primary Nahuatl source documents, whose publications in the 1930s and 1940s first brought Nahuatl literature to widespread public attention. With Garibay, León-Portilla made contributions to the study of nineteenth-century Mesoamerican historian Manuel Orozco y Berra. [...] He established his reputation as an expert through translating, interpreting and publishing several <b>recompilations</b> of Nahuatl works.|$|R
5000|$|Estamos rodeados / La margarita (EMI-Orfeo <b>Recompilation</b> 4/6 -2000) ...|$|E
5000|$|Loadable kernel module; no <b>recompilation</b> of the kernel is required.|$|E
5000|$|La Cofradía (Brotherhood) - (a <b>recompilation</b> of the {{previous}} editions) ...|$|E
40|$|Abstract—Virtualization and {{just-in-time}} (JIT) compilation {{have become}} important paradigms {{in computer science}} to address application portability issues without deteriorating average-case performance. Unfortunately, JIT compilation raises predictability issues, which currently hinder its dissemination in real-time applications. Our work aims at reconciling the two domains, i. e. {{taking advantage of the}} portability and performance provided by JIT compilation, while providing predictability guarantees. As a first step towards this ambitious goal, we study two structures of code caches and demonstrate their predictability. On the one hand, the studied binary code caches avoid too frequent function <b>recompilations,</b> providing good average-case performance. On the other hand, and more importantly for the system determinism, we show that the behavior of the code cache is predictable: a safe upper bound of the number of function <b>recompilations</b> can be computed, enabling the verification of timing constraints. Experimental results show that fixing function addresses in the binary cache ahead of time results in tighter Worst Case Execution Times (WCETs) than organizing the binary code cache in fixed-size blocks replaced using a Least Recently Used (LRU) policy. Keywords: Virtualization, Just-in-time (JIT) compilation, Worst Case Execution Time (WCET) estimation, static analysis, binary code cache. I...|$|R
40|$|Abstract—Software {{building}} is recurring and time-consuming. Based on {{the finding that}} {{a significant portion of}} compilations in incremental build is unnecessary, we propose bypath compilation, an efficient build technique that avoids unnecessary recompila-tion with automated detection of redundant dependencies and unessential changes in source files. The technique is lightweight and transparent to software developers, and can be easily applied to existing build systems. We evaluated our approach on a set of real-world open source projects. The results show that 83 % ~ 97 % of the <b>recompilations</b> are unnecessary and our approach can accelerate the incremental build up to 44. 20 %. Index Terms—Build system; Incremental build; Bypath com-pilation I...|$|R
50|$|Objectively {{comparing}} {{the performance of}} a Java program and an equivalent one written in another language such as C++ needs a carefully and thoughtfully constructed benchmark which compares programs completing identical tasks. The target platform of Java's bytecode compiler is the Java platform, and the bytecode is either interpreted or compiled into machine code by the JVM. Other compilers almost always target a specific hardware and software platform, producing machine code that will stay virtually unchanged during execution. Very different and hard-to-compare scenarios arise from these two different approaches: static vs. dynamic compilations and <b>recompilations,</b> the availability of precise information about the runtime environment and others.|$|R
5000|$|... {{reducing}} <b>recompilation</b> impact {{when the}} forward declared class is modified.|$|E
5000|$|... 1883 Tradiciones, {{from the}} first to the sixth part <b>recompilation.</b>|$|E
5000|$|Siempre son las cuatro / Mediocampo (EMI-Orfeo <b>Recompilation</b> 2/6 - 2000) ...|$|E
40|$|ABSTRACT; make is the {{standard}} UNIX utility for maintaining programs. It {{has been used by}} UNIX programmers for almost l 0 years and many UNIX programs nowadays are maintained by it. The strength of make is that it allows the user to specify how to compile program components, and that the system, after an update, is regenerated according to the speciflcation and with minimum number of <b>recompilations.</b> With the appearance of multiple processor systems, the time needed to "make " a program, or target, can be reduced effectively. Although the hardware provides parallelism, few tools are able to exploit this parallelism. The introduction of parallelism to make {{is the subject of this}} paper. We describe a parallel make and give a...|$|R
40|$|Introduction Our {{work with}} the MIT AI Lab's Reinventing Computing group focuses on quasistatic [DE 94] {{compiler}} technology. A quasistatic compiler utilizes profiling information gathered from every run of an end-user's program to direct continuous <b>recompilations</b> over the program 's lifetime. This profiling feedback illustrates which regions of code are bottlenecks under actual usage conditions, and provides empirical evidence of run-time program behaviors not obtainable by static program analysis. This information enables aggressive optimization of critical regions as well as application of "speculative" optimizations. 2 Feedback Framework We have constructed a framework for feedback-directed quasistatic compilation, using the SUIF (Stanford University Intermediate Format) research compiler. Figure 1 shows a general outline of the SUIF and feedback framework system. A program compiled in this framework gathers profiling data during execution. ...|$|R
40|$|This {{users manual}} {{provides}} in-depth information concerning installation {{and execution of}} LAURA, version 5. LAURA is a structured, multi-block, computational aerothermodynamic simulation code. Version 5 represents a major refactoring of the original Fortran 77 LAURA code toward a modular structure afforded by Fortran 95. The refactoring improved usability and maintain ability by eliminating the requirement for problem dependent <b>recompilations,</b> providing more intuitive distribution of functionality, and simplifying interfaces required for multi-physics coupling. As a result, LAURA now shares gas-physics modules, MPI modules, and other low-level modules with the Fun 3 D unstructured-grid code. In addition to internal refactoring, several new features and capabilities have been added, e. g., a GNU standard installation process, parallel load balancing, automatic trajectory point sequencing, free-energy minimization, and coupled ablation and flowfield radiation...|$|R
