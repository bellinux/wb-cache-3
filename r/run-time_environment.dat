394|133|Public
2500|$|Run-time environment: JavaScript {{typically}} {{relies on}} a <b>run-time</b> <b>environment</b> (e.g., a Web browser) to provide objects and methods by which scripts can interact with the environment (e.g., a webpage DOM). It also relies on the <b>run-time</b> <b>environment</b> to provide the ability to include/import scripts (e.g., HTML [...] elements). This is not a language feature per se, but it is common in most JavaScript implementations.|$|E
2500|$|There is no {{built-in}} I/O functionality in JavaScript; the <b>run-time</b> <b>environment</b> provides that. The ECMAScript specification in edition 5.1 mentions: ...|$|E
2500|$|ESQL/C: Embedded SQL (also {{known as}} E-SQL or ESQL/C) {{is a way}} of using SQL when {{programming}} in Visual C. Microsoft dropped support for this after SQL Server 6.5 was released, though they did license some of the ESQL/C <b>run-time</b> <b>environment</b> to a company called Micro Focus, who develops COBOL compilers and tools ...|$|E
5000|$|Supports both XML-based {{and native}} PHP-coded {{configuration}} of application and <b>run-time</b> <b>environments</b> ...|$|R
50|$|OpenLaszlo Server is a Java servlet that compiles LZX {{applications}} into executable binaries for targeted <b>run-time</b> <b>environments.</b>|$|R
40|$|Abstract [...] Software {{components}} are specially built software units {{that can be}} reused most efficiently and independently from their development environments. Although specifications are mandatory, user of components cannot depend on how the {{components are}} developed because they cannot be tested or debugged like {{they are supposed to}} be in development environment. Improving development processes and software engineering are crutial but there are big gaps between development <b>environment</b> and <b>run-time</b> <b>environments.</b> This paper studies the inter-component interfaces and the capabilities of assembling components into component software on-the-fly at run-time. First, programmer will have to shift his attentions to <b>run-time</b> <b>environments</b> in order to minimize risks of application failures and to maximize programming efficiency. The Application Run-time Life Cycle Model captures and provides application contexts, which are combinations of component contexts. The model also has the ability of adapting to different <b>run-time</b> <b>environments</b> by packing necessary information into a Component Run-time Integration Box. The benefits are that, component reuse and the efficiency of component software are emphasized...|$|R
2500|$|Silverlight {{provides}} a retained mode graphics system similar to Windows Presentation Foundation (WPF), and integrates multimedia, graphics, animations, and interactivity {{into a single}} <b>run-time</b> <b>environment.</b> In Silverlight applications, user interfaces are declared in Extensible Application Markup Language (XAML) and programmed using {{a subset of the}} [...]NET Framework. XAML can be used for marking up the vector graphics and animations. Silverlight {{can also be used to}} create Windows Sidebar gadgets for Windows Vista.|$|E
5000|$|SAFIRE Integrated Development & <b>Run-Time</b> <b>Environment</b> (COMMERCIAL) ...|$|E
5000|$|... #Subtitle level 2: Janus Platform: a SARL <b>Run-time</b> <b>Environment</b> ...|$|E
50|$|The WebSocket {{protocol}} {{is implemented}} in different web browsers, web servers, and <b>run-time</b> <b>environments</b> and libraries acting as clients or servers. The {{following is a}} table of different features of notable WebSocket implementations.|$|R
40|$|Research Interests Areas of {{research}} interest span data mining and machine learning algorithms, high-performance data-intensive computing, parallel and distributed systems for Cloud and Grid computing. More specifically, developing high-performance data mining algorithms and researching efficient <b>run-time</b> <b>environments</b> in Cloud and Grid systems...|$|R
30|$|The {{model is}} {{characterized}} by two control levels: a metamodeling and an instantiation level. The metamodel is general and technology independent, i.e., it models different configurations of adaptable software and can be instantiated in different domains. Hence, at the instantiation level, the model may be implemented in different application contexts and refers to specific <b>run-time</b> <b>environments.</b>|$|R
5000|$|<b>Run-time</b> <b>environment</b> (including {{parameter}} passing, symbol {{tables and}} register allocation) ...|$|E
50|$|Cygwin {{provides}} a largely POSIX-compliant development and <b>run-time</b> <b>environment</b> for Microsoft Windows.|$|E
5000|$|The <b>run-time</b> <b>environment</b> can {{run your}} {{application}} as an applet, in a JUnit environment or in a command-line window ...|$|E
40|$|A multi-threaded runtime {{environment}} which supports lightweight threads {{can be used}} to support many aspects of parallel processing including: virtual processors, concurrent objects, and compiler <b>run-time</b> <b>environments.</b> This work focuses on the area of compiler <b>run-time</b> <b>environments.</b> Such a library must depend on the underlying thread mechanism provided by the operating system. Threads working on compute intensive tasks work best when there is one thread performing real work on each processor. Matching the number of running threads to the number of processors can yield both good wall-clock run time and good overall machine utilization. The challenge is to schedule threads to maintain one running thread per processor by dynamically adjusting the number of threads as the load on the machine changes. It is generally not efficient to involve the operating system during a thread switch between lightweight threads. As such, a lightweight thread runtime environemnt must operate within the param [...] ...|$|R
40|$|Performance-intensive {{software}} is increasingly being used on heterogeneous combinations of OS, compiler, and hardware platforms. Examples include reusable middleware {{that forms the}} basis for scientific computing grids and distributed realtime and embedded systems. Since this software has stringent quality of service (QoS) requirements, it often provides a multitude of configuration options that can be tuned for specific application workloads and <b>run-time</b> <b>environments...</b>|$|R
40|$|This paper {{presents}} {{a tool for}} dynamic loading of components into <b>run-time</b> <b>environments.</b> This tool was implemented {{in the context of}} the Odyssey environment. Using this tool, it is possible to select, at runtime, the desired set of functionality for the Odyssey environment. Depending on the selected configuration, new components are downloaded and dynamically plugged into the environment. Moreover, the dependencies among components are analyzed to keep the consistency of the whole environment. 1...|$|R
5000|$|<b>Run-Time</b> <b>Environment</b> - {{describes}} runtime API {{and data}} model used for communication between content objects and learning management systems ...|$|E
50|$|XULJet is an {{open-source}} JavaScript {{framework for}} the Mozilla XULRunner <b>run-time</b> <b>environment.</b> It is intended for writing desktop applications in pure JavaScript.|$|E
50|$|The SARL agent-oriented {{programming}} {{language is a}} language with native support for the concept of holon. The associated <b>run-time</b> <b>environment</b> Janus enables running the implemented holons.|$|E
40|$|Seeking a {{full-time}} research position or an internship {{opportunity to develop}} high-performance data mining and machine learning algorithms and/or software systems in Cloud, Grid and many/multi-core environments for solving data-intensive problems with large and high-dimensional datasets. Research Interests Areas of research interest span data mining and machine learning algorithms, high-performance data-intensive computing, parallel and distributed systems for Cloud and Grid computing. More specifically, developing highperformance data mining algorithms and researching efficient <b>run-time</b> <b>environments</b> in Cloud and Grid systems...|$|R
5000|$|Web clients {{only provide}} a web browser, {{and rely on}} web {{applications}} to provide general-purpose computing functionality. However, note that web applications may use web storage to store some data locally, e.g. for [...] "offline mode", and they can perform significant processing tasks as well. Rich Internet Applications for instance may cross the boundary, and HTML5 Web Applications can leverage browsers as <b>run-time</b> <b>environments</b> {{through the use of}} a cache manifest or so called [...] "packaged apps" [...] (in Firefox OS and Chrome).|$|R
40|$|Introduction to SETL. Springer-Verlag, New York, 1986. [24] Seevers, B., Quinn, M. and Hatcher, P. A Parallel Programming Environment Supporting Multiple Data-Parallel Modules. In Workshop on Languages, Compilers, and <b>Run-Time</b> <b>Environments</b> for Distributed Memory Multicomputers, pages 44 [...] 47, Boulder, Colorado, September 1992. [25] Subhlok, J., Stichnoth, J. M., O'Hallaron, D. R. and Gross, T. Exploiting Task and Data Parallelism on a Multicomputer. In Fourth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, pages 13 [...] 22, San Diego, California, May 1993. Reference...|$|R
50|$|API {{documentation}} can be enriched with metadata information like Java annotations. This metadata {{can be used}} by the compiler, tools, and by the <b>run-time</b> <b>environment</b> {{to implement}} custom behaviors or custom handling.|$|E
50|$|The netBook {{runs the}} EPOC ER5 {{operating}} system (the predecessor of SymbianOS). Unlike the Psion Series 7, the netBook operating system runs from RAM. A Java <b>run-time</b> <b>environment,</b> conforming to Java version 1.1.8, is available.|$|E
5000|$|Run-time {{autonomy}} {{refers to}} the extent of the control that a service has over the way its solution logic is processed by the <b>run-time</b> <b>environment.</b> The more control a service has over its <b>run-time</b> <b>environment,</b> the more predictable is its behavior. Run-time autonomy is achieved by providing dedicated processing resources to the service. For example, if the service logic performs memory intensive tasks then the service could be deployed to a server with reserved or conserved resources. Similarly, by providing locally cached copies of data, where applicable, the service’s dependency on a remote shared database can be reduced. As a result, the overall autonomy of the service is increased...|$|E
40|$|In {{this paper}} we present new {{developments}} in the expressiveness and in the theory of a Calculus for Sensor Networks (CSN). We combine a network layer of sensor devices with a local object model to describe sensor devices with state. The resulting calculus is quite small and yet very expressive. We also present a type system and a type invariance result for the calculus. These results provide the fundamental framework for the development of programming languages and <b>run-time</b> <b>environments.</b> Comment: 14 pages, 0 figures, Submitted for Publicatio...|$|R
40|$|This report {{surveys the}} {{potential}} use of {{recent advances in}} object-oriented technology with respect to SDL <b>run-time</b> <b>environments.</b> In particular, it looks {{at the possibility of}} using a common object-oriented framework for the realization of different run-time systems on different architectures, as well as for a general application framework where user interfaces and database support for various platforms are to be supported. The report further presents industrial efforts as well as progress within standardization in the area of object-based architectures. It also examines microkernel operating systems [...] ...|$|R
40|$|SETS is an {{emerging}} reification calculus for the derivation of implementations of model-oriented specifications of abstract data types. This paper shows how abstraction invariants can be synthesized by calculation in SETS, {{and the potential}} of this calculus for assessing, comparing or classifying specifications. The main results of the paper are concerned with a functorial approach to reification, particularly wrt. the systematic implementation of recursive data domains on non-recursive <b>run-time</b> <b>environments.</b> A final example of this class of implementations is provided. Universidade do Minho. INESC. Junta Nacional de Investigação Científica e Tecnológica (JNICT) - Contracts nrs. 87 / 63, 87 / 66...|$|R
50|$|A few {{commercial}} game engines target Flash Player (Stage3D) as <b>run-time</b> <b>environment,</b> such as Unity 3D and Unreal Engine 3. Before {{the introduction}} of Stage3D, a number of older 2D engines or isometric engines like Flixel saw their heyday.|$|E
5000|$|Most dynamic {{languages}} are also dynamically typed, {{but not all}} are. Dynamic {{languages are}} frequently (but not always) referred to as [...] "scripting languages", although the term [...] "scripting language" [...] in its narrowest sense refers to languages specific to a given <b>run-time</b> <b>environment.</b>|$|E
50|$|PVM {{consists}} of a <b>run-time</b> <b>environment</b> and library for message-passing, task and resource management, and fault notification. While PVM will not automatically make a commercial software package run faster, it does provide a powerful set of functions for manually parallelizing an existing source program, or for writing new parallel/distributed programs.|$|E
40|$|Programmers face much {{complexity}} {{from the}} co-existence of “native ” (Unix-like) and virtual machine (VM) “man-aged ” <b>run-time</b> <b>environments.</b> Rather than having VMs re-place Unix processes, we investigate whether {{it makes sense}} for the latter to “become VMs”, by evolving Unix’s user-level services to subsume those of VMs. We survey the (little-understood) VM-like features in modern Unix, noting com-mon shortcomings: a lack of semantic metadata (“type in-formation”) and the inability to bind from objects “back” to their metadata. We describe the design and implementa-tion of a system, liballocs, which adds these capabilities in a highly compatible way, and explore its consequences...|$|R
5000|$|IEC 61968 [...] is {{a series}} of {{standards}} under development that will define standards for information exchanges between electrical distribution systems. These standards are being developed by Working Group 14 of Technical Committee 57 of the IEC (IEC TC 57 WG14). IEC 61968 is intended to support the inter-application integration of a utility enterprise that needs to collect data from different applications that are legacy or new and each has different interfaces and <b>run-time</b> <b>environments.</b> IEC 61968 defines interfaces for all the major elements of an interface architecture for Distribution Management Systems (DMS) and is intended to be implemented with middleware services that broker messages among applications.|$|R
5000|$|In {{the early}} part of the century, {{practices}} such as browser sniffing were deemed unusable for cross-browser scripting. The term [...] "multi-browser" [...] was coined to describe applications that relied on browser sniffing or made otherwise invalid assumptions about <b>run-time</b> <b>environments,</b> which at the time were almost invariably Web browsers. The term [...] "cross-browser" [...] took on its currently accepted meaning at this time as applications that once worked in Internet Explorer 4 and Netscape Navigator 4 and had since become unusable in modern browsers could not reasonably be described as [...] "cross-browser". Colloquially, such multi-browser applications, as well as frameworks and libraries are still referred to as cross-browser.|$|R
