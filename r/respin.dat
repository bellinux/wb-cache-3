30|8|Public
5000|$|... 2004-06-16: Distribution Release: White Box Enterprise Linux 3.0 <b>Respin</b> 1 ...|$|E
5000|$|... 2006-06-30: Distribution Release: White Box Enterprise Linux 4 <b>Respin</b> 1 ...|$|E
5000|$|Due to {{the fact}} that many Super Art Fight shows, {{particularly}} ones at anime conventions and science fiction conventions, are all-ages events, an Unleashed version of the show was created. The Unleashed shows use topics from Cards Against Humanity and instead of being allowed one <b>respin</b> per match, competitors may <b>respin</b> for every topic but must combine their first and second spins in their artwork ...|$|E
5000|$|Shoddy or {{recycled}} wool is made {{by cutting}} or tearing apart existing wool fabric and <b>respinning</b> the resulting fibers. [...] As this process makes the wool fibers shorter, the remanufactured fabric is inferior to the original. The recycled wool may be mixed with raw wool, wool noil, or another fiber such as cotton to increase the average fiber length. Such yarns are typically used as weft yarns with a cotton warp. This process was invented in the Heavy Woollen District of West Yorkshire and created a microeconomy in this area for many years.|$|R
30|$|In {{traditional}} analog and mixed-signal design flows, experienced architects conduct system-level design, {{and system}} specifications are empirically partitioned {{among the various}} functional blocks that circuit designers have to implement. In fact, since an effective system-level optimization is not achievable without accurate knowledge of the achievable performance of the several building blocks, final system performance may largely deviate from the expected one, which can result in silicon <b>respins.</b> To simultaneously achieve high-quality system integration starting from accurate circuit characterizations, analog-PBD (APBD) has been proposed and formulated in [4 – 7] as a meet-in-the-middle recursive process consisting in top-down optimization (platform mapping) and bottom-up characterizations, exporting the feasible design spaces of platform components {{to higher levels of}} abstraction.|$|R
30|$|The OpenStack release team is {{empowered}} {{during this}} last phase. It creates a stable/* branch {{from the current}} state of the master branch and introduces any new release-critical fix discovered until the release day. Between the RC 1 and the final release, OpenStack looks for regression and integration issues. RC 1 may be used as is for the final release, unless new release-critical issues are found that warrant a RC <b>respinning.</b> If this happens, a new milestone will be open (RC 2), with bugs attached to it. Those RC bug fixes need to be merged in the master branch before they are allowed to land in the stable/* branch. Once all release-critical bugs are fixed, the new RC is published. This process is repeated as many times as necessary before the final release. As it gets closer to the final release date, to avoid introducing last-minute regressions, the release team limits the number of changes and their impact: only extremely-critical and non-invasive bug fixes can get merged. All the other bugs are documented as known issues in the Release Notes instead.|$|R
5000|$|As of April 28, 2013, the originator's direct {{development}} has ceased.After this project development ceased by the originator - Fragadelic, {{a group of}} developers {{who are members of}} Copper Linux User Group in Arizona, began <b>Respin.</b> This development (project [...] "fork") was in transition to new supporters. The original code was received by the originator and the team members discussed the fork with him. This fork released a working version late July 2015. In early October 2015, the Debian Principal Developer, reverted to maintaining Remastersys, but kept Linux <b>Respin</b> open as a project for future features and development. Both the Ubuntu developer/maintainer, Sergio Mejia, and the Debian developer/maintainer, Marcia Wilbur, keep <b>respin</b> available on github and launchpad respectively.|$|E
5000|$|Essentially Peppermint is {{a system}} that has rolling {{application}} updates and some system updates. [...] Periodically a <b>Respin</b> is released which incorporates minor bug fixes and recent updates pre-installed.|$|E
50|$|A {{number of}} {{commercial}} vendors use Red Hat Enterprise Linux {{as a base}} for the operating system in their products. Two of the best known are the Console Operating System in VMware ESX Server and Oracle Linux <b>respin.</b>|$|E
30|$|Total DNA was {{prepared}} from bacterial strains {{according to the}} methodology of Sambrook et al. (1989). Each B. sphaericus strain was grown overnight in a 100 ml of Luria Bertani LB medium Bertani, 1951 at 30 °C. Cells were harvested by centrifugation at 6000 rpm and 4 °C for 10 min and washed with distilled water. The pellets were frozen at - 80 °C for 1 h then thawed at 37 °C; resuspended in 5 ml of solution containing 2 mg/ml lysozyme and incubated for 1 h at 37 °C. Then, 0.5 ml of sodium dodecyl sulphate, SDS, (1 %) was added and the solution was left for 15 min at room temperature. The cell lysate was mixed with equal volume of phenol/chloroform and kept on ice for 5 min followed by spinning for 20 min at 10000 rpm and 4 °C. The supernatant that contains the DNA is mixed again with equal volume of phenol/chloroform for 5 min on ice {{to get rid of}} any remaining proteins and <b>respinning</b> for 20 min at 10000 rpm and 4 °C. Afterward, 0.1 volume of sodium acetate (3 M) and 2.5 volume of absolute ethanol was added. DNA was collected by centrifugation and the pellet was dried and washed with 70 % ethanol. The DNA pellet was collected again, dried and 50 μl TE buffer was added and mixed well. Finally, 10 μl of RNase was added to the DNA solution and left at 37 °C for 2 days in order to remove any contaminating RNA.|$|R
50|$|Each exam (Proba) {{is marked}} from 1 to 10 with 10 being the best, using two {{decimals}} for written exams (e.g. 9.44 or 9.14 {{is a valid}} mark) and an integer for an oral exam. Each exam is corrected and graded by two separate correctors (no computers are involved, as {{this is not a}} standardized test) agreeing on the mark based on a nationwide guideline. The total mark for the Bacalaureat is the arithmetic mean average of the six or eight marks obtained (0.01 precision). To pass, a student must obtain an average score of at least 6.00 and at least 5.00 at each of the individual exams. A student scoring a perfect 10 will be warded with special honors (Absolvent cu Merite Deosebite). In July 2005, 78 candidates out of a total 179878 scored a perfect 10 (0.04%) while 149435 (83.07%) students passed the Bacalaureat. In case of failure (<b>respins),</b> the student is allowed to retake only the exams he failed, until he manages to graduate but no more than 5 times. A September session is held especially for those failing in the June/July session or for those unable to attend the exam in the summer. In case a student is not content with the mark received, one may contest it in 24 hours after finding his or her score. If passed, unlike the case with most high school completion exams, he or she may not retake it (although this matters less in Romania than in the United States or Germany).|$|R
50|$|The largest {{fraction}} of silicon integrated circuit <b>respins</b> and steppings are due {{at least in}} part to functional errors and bugs inadvertently introduced at RTL stage of the design process. Thus, comprehensive functional verification is key to reducing development costs and delivering a product on time. Functional verification of a design is most often performed using logic simulation and/or FPGA prototyping. There are advantages and disadvantages to each and often both are used. Logic simulation is easy, accurate, flexible, and low cost. However, simulation is often not fast enough for large designs and almost always too slow to run application software against the hardware design. FPGA-based prototypes are fast and inexpensive, but the time required to implement a large design into several FPGAs can be very long and is error-prone. Changes to fix design flaws also {{take a long time to}} implement and may require board wiring changes. With traditional vendor tools, FPGA prototypes have little debugging capability, probing signals inside the FPGAs in real time is very difficult, and recompiling FPGAs to move probes takes too long. This is changing with the emergence of more advanced FPGA prototype debug tools that remove limitations on signal visibility. The usual compromise is to use simulation early in the verification process when bugs and fixes are frequent, and prototyping at the end of the development cycle when the design is basically complete and speed is needed to get sufficient testing to uncover any remaining system-level bugs. FPGA prototyping is also popular for testing software.|$|R
5000|$|As {{the market}} leaders Intel and/or AMD would extend the core x86 {{instruction}} set, Transmeta could quickly upgrade their product with a software upgrade rather than requiring a <b>respin</b> of their hardware. This method just emphasises the compatibility {{rather than the}} performance.|$|E
50|$|The {{second round}} {{introduces}} two penalty spaces on the category and money reels. On the category reel, are two Brain Buster spaces. If one {{lands on the}} category reel, the questions that are asked are the most difficult questions that could be found. On the money reel are two Bank Buster spaces. If one lands on the money reel, if any player gets their question wrong, they lose all the money they have accumulated so far. In this second round, the Spin Star gets 3 more spins and if the Spin Star does not {{like the way the}} reels have landed, then they can elect to <b>respin,</b> however, they cannot <b>respin</b> the category or money reels if they land on a Brain or Bank Buster on them. Also, they cannot <b>respin</b> one reel on its own, it must be two or more. In either round, if the three middle reels have the same player name on the win line (for example: Sital, Sital, Sital), it is classed as a Jackpot line and the value of each question is doubled. The maximum amounts that can be won for these spins are £5,000 for the first spin, £7,500 for the second spin and £10,000 for the third spin.|$|E
50|$|Cinnamon is {{available}} in the Linux Mint 12 repositories, and is included in all Linux Mint versions 13 and higher as one of the four possible choices of desktop environment, one other being MATE. It is also an optional user interface in Linux Mint Debian Edition Update Pack 4 <b>respin.</b>|$|E
50|$|In {{the final}} round, {{the values that}} the daily players have {{accumulated}} are put onto the three middle reels of the Moneyspinner (twice on each reel). Also, one Bank Buster {{is placed on the}} first reel, two on the second and three on the third. The Spin Star spins the category reel (<b>respinning</b> if it is not a desired category, but only once). The Spin Star is asked a question on each reel. If the answer is right, a Bank Buster is taken away, and if wrong, one is added. After each question is asked, the reel is spun and whatever amount lands on the win line is added to the Spin Star's total. If a Bank Buster comes up on any reel, the total is wiped out, but the Spin Star can carry on playing if a Bank Buster appears on reels one or two. It is possible for the same player's total to appear more than once, so, if one player accumulated £6,500 and it came up three times, the total would be £19,500 (£6,500 + £6,500 + £6,500). The maximum winnings any player could ever win was £568,500 but the odds of this happening are incredibly rare; in order for that to happen, one player's name must appear on all three reels for all six spins and the maximum value for each spin must appear in the first two rounds (2 × 3 × (£2,000 + £3,000 + £4,000 + £5,000 + £7,500 + £10,000) + £500 = £189,500) and that same player's total must appear on all three reels for all three spins in the final round (3 × £189,500 = £568,500).|$|R
40|$|The huge {{demand for}} {{electronic}} devices has driven semiconductor companies to create better products {{in terms of}} area, speed, power etc. and to deliver them to market faster. Delay to market can result in lost opportunities. The length of the design cycle directly affects the time to market. However, inadequate time for design and verification can cause bugs that will cause further delays to market and correcting the error after manufacturing is very expensive. A bug in an ASIC found after fabrication requires <b>respinning</b> the mask {{at a cost of}} several million dollars. Even as the pressure to reduce the length of the design cycles grows, the size and complexity of digital hardware circuits have increased, which puts even greater pressure on design and verification productivity. Pipelining is one optimization technique which has contributed to the increased complexity in hardware design. Pipeline increases throughput by overlapping the execution of instructions. It is a challenge to design and verify pipelines because the specification is written to describe how instructions are executed in sequence while there can be multiple instructions being executed in a pipeline at one time. The overlapping of instructions adds further complexity to the hardware in the form of hazards which arise from resource conflicts, data dependencies or speculation of parcels due to branch instructions. To address these issues, we present PipeNet, a metamodel for describing hardware design at a higher level of abstraction and Bluenose II, a graphical tool for manipulating a PipeNet model. PipeNet is based on a pipeline model in a formal pipeline verification framework. The pipeline model contains arbiters, flow-control state machines, datapath and data-routing. The designer describes the pipeline design using PipeNet. Based on the PipeNet model, Bluenose II generates synthesizable VHDL code and a HOL verification script. Bluenose II's ability to generate HOL scripts turns the HOL theorem prover into Bluenose II's external verification environment. A direct connection to HOL is implemented {{in the form of a}} console to display results from HOL directly in Bluenose II. The data structures that represent PipeNet are evaluated for their extensibility to accommodate future changes. Finally, a case study based on an implementation of a two-wide superscalar 32 -bit RISC integer pipeline is conducted to examine the quality of the generated codes and the entire design process in Bluenose II. The generation of VHDL code is improved over that provided in Bluenose I, Bluenose II's predecessor...|$|R
5000|$|She is {{the lead}} Debian {{developer}} for Linux <b>Respin.</b> In 2014, she became the interim Copper Linux User Group president. She is heavily involved in the East Valley Maker Community leading regular Raspberry Pi, Beaglebone, Banana Pi/Pro and ESP8266 Projects including home automation, gaming consoles, surveillance, network, multimedia and other [...] "pi fun".|$|E
50|$|TalkingParabola is a {{derivative}} install CD based on TalkingArch. It is a <b>respin</b> of the Parabola ISO modified to include speech and braille output for {{blind and visually}} impaired users.TalkingParabola retains all the features of the Parabola live image, but adds speech and braille packages {{to make it possible for}} {{blind and visually impaired}} users to install Parabola eyes-free.|$|E
50|$|Peppermint 6 64-bit {{now offers}} UEFI/Secure Boot support, {{allowing}} easy installation alongside Microsoft Windows 8/8.1/10 in dual/multi-boot configurations on GPT disks, or just installed on its own, without needing {{to switch to}} legacy BIOS mode (CSM) or disabling Secure Boot. A new version of Ice {{has been added to}} the <b>respin</b> with support for the Firefox web browser (alongside Chromium and Chrome web browsers), allowing the creation of SSB's that open in a Firefox window. Some slight tweaks have been made to the Peppermix-Dark theme. Stripes have been removed from the default menu, Nemo file manager, Synaptic package manager, etc. This <b>respin</b> also includes a few minor bug fixes and tweaks: Minimum disk space requirement for the installation has been adjusted downward from 5.3GB to 3.8GB in Ubiquity. Unnecessary xfce4-power-manager-data package leftovers, from the switch to mate-power-manager, have been removed. The duplicate keyboard shortcut in xbindkeys.conf, which caused windowshots via Alt+PrtSc to be saved to both the desktop and home directory, has been removed. Also, all updates to date, have been included in the ISO.|$|E
5000|$|In a Super Art Fight match, {{artists are}} given a {{starting}} topic, often related to the convention or the night's theme, and may draw anywhere on the canvas, including overtop of each other's work. After five minutes (and every five minutes thereafter) the [...] "Wheel of Death" [...] is spun, selecting a new topic for each artist, with the bout lasting 25 minutes total. Topics are submitted by fans online and curated by the Super Art Fight staff. Competitors may request a topic <b>respin</b> once per match ...|$|E
50|$|The {{ability to}} quickly update {{products}} without a hardware <b>respin</b> was demonstrated in 2002 with an in-the-field upgrade (a download) to enhance CPU {{performance of the}} Crusoe based HP Compaq TC1000 tablet PC. It was used again in 2004 when NX bit and SSE3 support {{were added to the}} Transmeta Efficeon product line without requiring hardware changes. In the field upgrades were rare in practice due to system hardware vendors not wanting to incur additional customer support costs or spend additional money on QA for the potential upgrades or bug fixes to shipped products they had already closed the revenue books on.|$|E
50|$|Rendition was {{one step}} behind other {{competitors}} coming to market at a pivotal {{time in the}} 3D PC graphics engines battle. The NVIDIA RIVA 128 came to market in late 1997. The V2100 saw first silicon in early 1997, but was late to sample due to a digital cell library bug necessitating a <b>respin.</b> Rendition used the libraries developed by SiArch (licensed through Synopsys at that time) for their digital logic synthesis. A critical section of circuitry happened to synthesize into a 3 input nor-gate driving a scanned flip-flop. Apparently this combination was never spiced (an accurate circuit simulation engine) by SiArch. The scan-flop had three passive transmission gate muxes driven by the three n-type transistors in the NOR3, all in series. The result of this was excessive resistance with a weak bus-hold cell, which ate into the allowable noise margin and violated the static discipline in good digital logic design. This manifests itself as an intermittent bug that {{is seen in the}} lab but not in high level behavioral or even RTL or gate-level simulations. This root cause was only determined after months of investigation, simulations, and test case development in the lab, which narrowed the problem to a very confined space. At that point, the chip was run live under a scanning electron microscope using the oscilloscope probe mode to find the problem net between the NOR3 gate and the scan-flop. The combination was then spiced and confirmed to be the culprit. Two full quarters were lost due to this bug. Despite these delays, the V2x00 shipped with fully conformant OpenGL and D3D drivers.|$|E
5000|$|The Chanels and the pledges {{vote for}} their new {{president}} between Chanel (Emma Roberts) and Zayday (Keke Palmer). It comes to a tie. Zayday suggests they both be co-presidents, which makes Chanel angry, causing her to run up to her closet. When Chanel #3 (Billie Lourd) and Chanel #5 (Abigail Breslin) enter, they see her crying and go and comfort her until she starts to laugh and tells the Chanels how {{it was part of}} her plan and opts to cede her presidency to Zayday as she thought by not being the leader she won't be the Red Devil's target. She walks downstairs and tells everyone about it. In her room, Zayday and Grace (Skyler Samuels) suggest they throw a slumber party and play 'Truth or Dare' to find out who the killer is. When she announces the idea to the sisters, they argue about it until Chanel #3 suggests they play [...] "Spin the Bottle" [...] and some of the sisters give in. The sisters play [...] "Spin the Bottle" [...] which results in Hester (Lea Michele) and Jennifer [...] "Candle Vlogger" [...] (Breezy Eslin) kissing. When Chanel #3 gets her turn, it was actually Grace, but Chanel #3 declared that they can <b>respin,</b> leading her and Sam [...] "Predatory Lez" [...] (Jeanna Han) to kiss. Afterwards, Chanel #3 talks to Sam in the bathroom and tells her why she wears earmuffs. She wears them because a boy was obsessed with her ears and sent her an email threatening to cut them off if he even saw them again and so she hides them with earmuffs. That night in the kitchen, Jennifer and Sam tell the sisters that all the doors and windows are locked, Chanel thinks someone might have hacked into the security system she had installed after watching [...] "Panic Room" [...] with Chad (Glen Powell). When Jennifer says it's {{only a matter of time}} before one or all of them are killed, the lights suddenly go out and the sisters scream.|$|E
40|$|Abstract—This paper {{presents}} a novel ATPG algorithm directly producing compressed test patterns. It benefits {{both from the}} features of satisfiability-based techniques and symbolic simulation. The ATPG is targeted to architectures comprised of interconnected embedded cores, particularly to the <b>RESPIN</b> architecture. We show experimentally that the proposed ATPG significantly outperforms the state-of-the-art approaches {{in terms of the}} test compression ratio. Keywords-ATPG, satisfiability, symbolic simulation, test compression, embedded cores, <b>RESPIN.</b> I...|$|E
40|$|Abstract—This paper {{presents}} a novel ATPG and test compression algorithm based on Pseudo-Boolean (PBO) optimization. Similarly to SAT-based ATPGs, {{the test for}} each fault is represented implicitly as a PBO instance. The optimization process solves the problem of maximizing the number of unspecified values in the test. A novel don’t care aware circuit-to-PBO conversion procedure is presented. The obtained unspecified values in the test are efficiently exploited in test compression. The produced compressed test sequence is suited for the <b>RESPIN</b> decompression architecture, thus for testing systems-on-chip. The presented experimental results show the efficiency and competitiveness of the proposed method. Keywords-ATPG, test compression, Pseudo-Boolean Optimization, SoC testing, <b>RESPIN.</b> I...|$|E
40|$|Today’s {{processors}} are {{so complex}} that design validation and testing {{is a major}} bottleneck, often accounting for 50 to 70 percent of processor development time. 1 Yet, despite all the labor and computing resources invested in verification, many defects still slip into production silicon. At that point, dealing with them can be very costly. Specifically, if a manufacturer finds serious errors before the chip is released, the costs involve the engineering time required to debug and fix the errors; the direct fabrication costs associated with a chip <b>respin,</b> including new masks; and, especially, the lost revenue attributable t...|$|E
40|$|Abstract — In {{this paper}} we propose a new method of test {{patterns}} compression based on a design of a dedicated SAT-based ATPG (Automatic Test Pattern Generator). This compression method is targeted to systems on chip (SoCs) provided with the P 1500 test standard. The <b>RESPIN</b> architecture can be used for test patterns decompression. The main idea is based on finding the best overlap of test patterns during the test generation, unlike other methods, which are based on efficient overlapping of pre-generated test patterns. The proposed algorithm takes advantage of an implicit test representation as SAT problem instances. The results of test patterns compression obtained for standard ISCAS’ 85 and ‘ 89 benchmark circuits are shown and compared with competitive test compression methods...|$|E
40|$|Due to {{increasing}} semiconductor design complexity, more errors are escaping presilicon verification and being discovered only after manufacturing. As {{an alternative to}} traditional manual chip repair, the authors propose the FogClear methodology, which automates the postsilicon debugging process and thereby reduces IC development time and costs. Due to the high complexity of modern semiconductor designs and increasing pressure to reduce their time to market, errors {{are more likely to}} escape verification and are often detected only after a chip has been manufactured. Postsilicon debugging has therefore become a crucial step in the design process, currently taking 35 percent of the time spent to complete a chip 1 and potentially consuming an even greater fraction in the future. Given that the market window for many modern products is only a few years, the delay caused by two <b>respin...</b>|$|E
40|$|Due to the {{dramatic}} increase in design complexity, verifying the functional correctness of a circuit is becoming more difficult. Therefore, bugs may escape all verification efforts and be detected after tape-out. While most existing solutions focus on fixing the problem on the hardware, in this work we propose a different methodology that tries to generate constraints {{which can be used}} to mask the bugs using software. This is achieved by utilizing formal reachability analysis to extract the conditions that can trigger the bugs. By synthesizing the bug conditions, we can derive input constraints for the software so that the hardware bugs will never be exposed. In addition, we observe that such constraints have special characteristics: they have small onset terms and flexible minterms. To facilitate the use of our methodology, we also propose a novel resynthesis technique to reduce the complexity of the constraints. In this way, software can be modified to run correctly on the buggy hardware, which can improve system quality without the high cost of <b>respin...</b>|$|E
40|$|Abstract. Both test {{compression}} {{tools and}} ATPGs directly producing compressed test greatly benefit from don’t care values {{present in the}} test. Actually, presence of these don’t cares is essential for success of the compression. Contemporary ATPGs produce tests having more than 97 % of don’t cares for large industrial circuits, thus high compression ratios can be expected. However, these don’t cares are placed in the test in an “uninformed ” way. There are many possibilities of constructing a complete test for a circuit, while the ATPG chooses just one particular, without respect to the subsequent compression process. Therefore, the don’t cares cannot be fully exploited. In this paper we show how severe this issue is. A novel ATPG algorithm directly producing compressed test patterns for the <b>RESPIN</b> decompression architecture is presented. Test don’t cares are placed in an informed way, {{so that they are}} maximally exploited by compression. We compare the results with several ways of uninformed don’t care generation to show the benefits of the proposed method. Results for the ISCAS and ITC’ 99 benchmark circuits are shown and compared to state-of-the-art test compression techniques. Keywords-ATPG, test don’t cares, satisfiability, symbolic simulation, test compression, embedded cores. 1...|$|E
40|$|Papers and panels at this year’s Design and Verification Conference and Exhibition (DVCon 2008) {{showed that}} formal {{verification}} is expanding its use model. Speakers described {{the use of}} formal methods in post-silicon debug at Intel, {{as well as in}} XML-assisted SystemC virtual platform verification and aggregate register verification at Infineon. Additionally, formal verification experts shared their viewpoints at a panel session. Post-silicon debug Erik Seligman, formal verification architect in Intel’s corporate design solutions team, presented a post-silicon verification and debug methodology for validating "silicon stepping. " This term refers to a specific revision of the silicon that enables the elimination of bugs found at silicon test, as well as the implementation of a small number of last-minute features. The number of permissible modifications is very small, but they must be implemented and validated with high confidence because the cost of an error is a silicon <b>respin.</b> Intel has combined formal and simulation methodologies into a “zero escape plan ” (ZEP) approach. Seligman gave an example of the importance of post-silicon debug. A chipset required a refresh stepping to satisfy a customer request, plus two steppings to fix bugs. The three steppings had 13 logically-significant changes that were verified successfully using formal-based ZEP. Because the number of edits is small, verification can be highly focused. But if the fix doesn’t work – or if it creates even more problems than it solves – Intel uses a “defeature ” approach that disables the fix, and the design reverts to its original function. Seligman gave an example. Figure 1 shows a circui...|$|E
40|$|In this paper, we {{proposed}} a method for integrating UML model into the current SoC design process. UML is introduced as a formal model of specification for SoC design. The consistency and completeness of the specification is validated based on the formal UML model. The implementation is validated by a systematic derivation of test scenarios from UML model. The method {{has been applied to}} the design of a new media-processing chip for mobile devices. The application of the method shows that it is not only effective for finding logical errors in the implementation, but also eliminates errors due to inconsistency and incompleteness of the specification. 1. Why UML? System-on-Chip (SoC) validation has become increasingly difficult with increasing its complexity and scale. Industry studies reveal that more than 50 % of the total schedule is being spent in verification process; about 65 % chips have to <b>respin</b> after finishing them. In our experiences we find many ambiguities, flaws and oversights appear in the specification written in the natural language by designers. We need a new methodology {{to improve the quality of}} the specification as well as the implementation. The Unified Modeling Language (UML) is a modeling language for capturing the specification, the implementation using the graphical notations in software community. We also think that the UML is a good choice to model the specification for SoC, because: • UML describes the specification graphically so that it can be easy to help development members understand and review the functional specification of the target SoC system. • UML models the specification from different views using different diagrams. This feature can help us to model the functionalities, data structures, architectures, behaviors with different diagrams. • UML provides well-defined notations to describe the specification more formally than that being written in natural language. This is not only help us remove the ambiguities from specification but also lead us to develop a tool to verify the correctness of th...|$|E
40|$|The present thesis {{work has}} been carried out in the {{framework}} of the CMS collaboration, one of the experiment designed to study the physics of the proton-proton collisions at the Large Hadron Collider (LHC) at CERN. Experimentation at CMS (and at ATLAS) led to the discovery of a new particle in 2012 which has been identified as the Higgs boson, the missing brick of the Standard Model of the fundamental interactions. All the experiments at LHC are upgrading their detectors in order to fulfill the continuous increment of the LHC luminosity and the consequent increment of the per collision event rate. The CMS upgrade project foresees, inter alia, the production of a new pixel detector (CMS Phase 1 Pixel Upgrade) to be commissioned at the beginning of 2017. Crucial part of the upgrade is the new readout chip (ROC) for the silicon sensor, psi 46 digV 2 <b>respin,</b> designed at the Paul Scherrer Institute (PSI) with a 250 nm CMOS technology. This chip represents {{the state of the art}} in the readout electronics for the silicon detectors. The thesis concerns the study and the development of test procedures for this new readout chip. Thanks to a long stay at PSI, I could provide an important contribution to the debug phases of the first version of the ROC and TBM, the chip that handles the various ROCs in the pixel module, and to the development of the software used by the whole collaboration for the ROC and module testing. This experience allowed me to be the expert for the installation and commissioning of the ROC readout system in all the production centres in Italy. Furthermore, I managed the ROC wafers test from the early project phases. The ROCs are produced on silicon wafers and undergo various processes before being assembled on the modules, e. g., metal deposition on the pixel pads, thinning and dicing. These processes lead mechanical and thermal stresses that can damage the chips. The ROC wafers test has thus been performed following the same procedure before and after the processing. In order to minimize the failing ROCs fraction mounted on the modules. It has been measured that the processing introduces a 5. 2...|$|E
40|$|Author: Gordon Laurie 1. Need six 150 mm {{dishes of}} cells. Remove from incubator, bring to bench, {{aspirate}} off medium, and wash each dish two times (15 ml each wash) with room temperature PBS. Place cells on ice between the washes. - For later analysis of column eluate by avidin-peroxidase, cell surface proteins {{will need to}} be biotinylated. For sequence analysis, biotinylation can be omitted. To biotinylate, add 15 ml/dish of 50 µg/ml biotin (Pierce # 21335 NHS-LC Biotin; prepare from freshly made stock [10 mg/ml in DMSO]). Incubate on ice for 90 min, aspirate biotin, then wash with (2) 5 ml/dish of PBS-glycine (0. 56 gm glycine in 150 ml PBS). - Remove cells by tapping the side of the dishes during the PBS-glycine washes if biotinylating, or in PBS wash if not biotinylating. Collect washes into two 50 ml conicals, spin for 5 min at 1500 rpm (4 °C), aspirate supernatant, combine the cell pellets into one 50 ml conical, resuspend in 25 ml of PBS-glycine if biotinylated, or in 1 ml of lysis buffer on ice for 25 min if not biotinylated. Spin PBS-glycine cells, aspirate supernatant, resuspend in 25 ml of PBS-glycine, <b>respin,</b> and resuspend in 1 ml of lysis buffer on ice for 25 min. ![Table 1]([URL] "Table 1 ") 4. Transfer to two microfuge tubes and spin for 15 min at 4 °C. Use supernatant to apply to columns. Prepare columns (have blank precolumn, SNpeptide column [and for purification/sequencing, a Con A column]) in step 3) by first draining, then equilibrating in 6 volumes of column running buffer. Following equilibration, columns should be ‘preconditioned’ with 5 column buffers of eluant buffer (ie. column running buffer containing 1 µg/ml heparin), then wash with 6 column volumes of column running buffer. Allow supernatant to flow through precolumn into Con A or SNpeptide column. Incubate 6 hr to overnight at 4 °C. ![Table 2]([URL] "Table 2 ") 5. Wash with 20 column volumes of column running buffer. Elute SNpeptide column with 5 ml column running buffer containing 1 µg/ml heparin or in which MnCl 2 is replace with 10 - 20 mM EDTA. Elute Con A column with 5 ml column running buffer containing 0. 4 M a-methylmannoside. Next wash columns with 5 column volumes of column running buffer containing 1 M NaCl, 5 column volumes of column running buffer and then the same volume of 50 mM Tris containing 0. 02 % Azide for storage (4 °C). Be sure to keep column running without stop. 6. Subsequent analysis of eluant fractions can be performed following acetone precipitation of individual fractions, or spin concentration of all eluant fractions combined. For acetone precipitation (in 1. 5 ml screw top tubes, add 300 µl of each fraction to 300 µl of - 20 °C 100 % acetone, mix and store overnight at - 20 °C. Spin for 15 min at 4 °C, pull/discard supernatant and add 1 ml/tube of 50 % acetone (precooled to - 20 °C), mix and spin for 15 min at 4 °C. Remove/discard supernatant. Use yellow tip to remove all remaining supernatant and let pellet dry for 1 hr at RT. Make pellet up in 40 µl of SDS (5 %) gel sample buffer, boil for 5 min at 90 °C, place 1 min on ice, spin for 1 min (RT), transfer to a fresh tube and load 15 µl/well on a 8 % or 5 - 15 % SDS PAGE gel (See ‘Pouring and Running Protein Gels/Electrotransfer’). Run at 25 mAmp/gel. For spin concentration, add part of eluant to a Centricon- 100 (preblocked by incubation in 1 % BSA in PBS for 1 hr at 4 °C; at end of block, spin for 15 min at 2500 rpm in SA 600 rotor with rubber inserts [4 °C]; then do a PBS wash). Spin for 30 min to 1 hr, discard flow through and more eluant and spin. Repeat until all has been concentrated to minimum volume. Add 1 / 6 volume SDS (2 - 5 %) gel sample buffer, boil for 5 min at 90 °C, place 2 min on ice, spin for 1 min (RT), and load all in one or two wide wells on a 8 % or 5 - 15 % SDS PAGE gel. Run at 25 mAmp/gel. 7. For biotinylated prep, electrotransfer from gel to Hybond-ECL nitrocellulose (Amersham#RPN 2020 D), as follows. Have blotting buffer prepared (can be reused a number of times; record each time used by marking label). Cut nitrocellulose to same size (or slightly larger) as gel. Have two pieces of Whatmann 2 MM paper cut to same size as gel. Have plastic tray containing transfer buffer and immersed in it in the following order: plastic cage (‘+’ side down), sponge (push out air bubbles), one piece of Whatmann paper and nitrocellulose filter. Turn off power to gel. Place gel plates on bench. Gently remove glass side. Notch bottom left corner. Discard stacking gel. Carefully invert gel onto nitrocellulose and use a spatula or gel spacer to encourage gel to separate from plate onto filter. Add onto gel in order: other Whatmann piece, sponge (remove bubbles), and other half of cage. Insert caged gel into blotting buffer and transfer (- from gel to + on filter) overnight at 60 mAmp (RT). For spin concentrated prep, remove gel and fix/stain in 0. 08 % Commassie blue in 25 % isopropanol/ 10 % methanol for 30 min (up to 2 hr). Destain in 10 % acetic acid/ 10 % isopropanol. Photograph. Band(s) corresponding to receptor is carefully cut out with a clean scapel blade, placed in an ependorf tube and stored at - 20 °C until ready for sequencing. 8. Stop transfer, remove cage into transfer buffer. Use black marker to outline orientation of gel on filter, and remove filter. Immerse filter in 50 ml of 37 °C PBS-T (PBS containing 0. 1 % Tween- 20; need 500 ml total per blot experiment) containing 2. 5 % milk for 1 hr at 37 °C. Wash 1 x (50 ml) with PBS-T for 15 min, then 2 x (50 ml each) with PBS-T for 5 min each. Incubate in 50 ml of streptavidin-HRP (Amersham#RPN 1231; dilute 1 / 1000 in PBS-T) for 1 hr at RT on rotator. Wash 1 x 15 min and 4 x 5 min with PBS-T. Detect using ECL (in dark room, immediately before use, mix equal volumes of the two reagents, immerse filter for 1 min; cover filter with plastic wrap and detect with X-ray film) ...|$|E

