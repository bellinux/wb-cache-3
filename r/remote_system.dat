429|5323|Public
25|$|Remote {{debugging}} is {{the process}} of debugging a program running on a system different from the debugger. To start remote debugging, a debugger connects to a <b>remote</b> <b>system</b> over a network. The debugger can then control the execution of the program on the <b>remote</b> <b>system</b> and retrieve information about its state.|$|E
25|$|At a sysop {{meeting in}} Dallas, {{the idea was}} raised {{that it would be}} nice if there was some way for the sysops to post {{messages}} that would be shared among the systems. In February 1986 Jeff Rush, one of the group members, introduced a new mailer that extracted messages from public forums that the sysop selected, in a manner similar to the way the original mailer handled private messages. The new program was known as a tosser/scanner. The tosser produced a file that was similar (or identical) to the output from the normal netmail scan, however, these files were then compressed and attached to a normal netmail message as an attachment. This message was then sent to a special address on the <b>remote</b> <b>system.</b> After receiving netmail as normal, the scanner on the <b>remote</b> <b>system</b> looked for these messages, unpacked them, and put them into the same public forum on the original system.|$|E
25|$|Because {{national}} keyboard implementations vary, not all 94 ASCII printable characters {{can be used}} everywhere. This {{can present}} a problem to an international traveler who wished to log into <b>remote</b> <b>system</b> using a keyboard on a local computer. See keyboard layout. Many hand held devices, such as tablet computers and smart phones, require complex shift sequences to enter special characters.|$|E
40|$|The Pacific Northwest National Laboratory (PNNL) was tasked by Washington River Protection Solutions, LLC (WRPS) {{to provide}} {{information}} and lessons learned relating to the design, development and deployment of <b>remote</b> <b>systems,</b> particularly <b>remote</b> arm/manipulator <b>systems.</b> This report reflects PNNL’s experience with <b>remote</b> <b>systems</b> and lays out the most important activities {{that need to be}} completed to successfully design, build, deploy and operate <b>remote</b> <b>systems</b> in radioactive and chemically contaminated environments. It also contains lessons learned from PNNL’s work experiences, and the work of others in the national laboratory complex...|$|R
5000|$|Member, American Nuclear Society; Robotics and <b>Remote</b> <b>Systems</b> Division ...|$|R
2500|$|AntiSniff: Identification of <b>remote</b> <b>systems</b> in {{promiscuous}} mode, May 2000 ...|$|R
25|$|The FIDONET {{program was}} what later {{became known as}} a mailer. FIDO was {{modified}} to use a previously unused numeric field in the message headers to store a node number for the machine the message should be delivered to. When FIDONET ran, it would search through the email database for any messages with a number in this field. FIDONET collected all of the messages for a particular node number into a file known as a message packet. After all the packets were generated, one for each node, the FIDONET program would look up the destination node's phone number in NODELIST.BBS, and call the <b>remote</b> <b>system.</b> Provided that FIDONET was running on that system, the two systems would handshake and, if this succeeded, the calling system would upload its packet, download a return packet if there was one, and disconnect. FIDONET would then unpack the return packet, place the received messages into the local system's storage, and move onto the next packet. When there were no remaining packet, it would exit, and run the FIDO BBS program.|$|E
2500|$|Remote Desktop Connection (RDC, {{also called}} Remote Desktop, {{formerly}} Microsoft Terminal Services Client, mstsc or tsclient) [...] MSTSC in the filename mstsc.exe stands for Microsoft Terminal Services Client.}} is the client application for RDS. [...] It allows a user to remotely log into a networked computer running the terminal services server. RDC presents the desktop interface (or application GUI) of the <b>remote</b> <b>system,</b> {{as if it}} were accessed locally. In addition to regular username/password for authorizing for the remote session, RDC also supports using smart cards for authorization. With RDC 6.0, the resolution of a remote session can be set independently of the settings at the remote computer.|$|E
2500|$|Although FidoNet {{supported}} file attachments {{from even}} the earliest standards, this feature {{tended to be}} rarely used and was often turned off. File attachments followed the normal mail routing through multiple systems, and could back up transfers all along the line as the files were copied. A solution was offered {{in the form of}} file requests, which made file transfers driven by the calling system and used one-time point-to-point connections instead of the traditional routing. Two such standards became common, [...] "WaZOO" [...] and [...] "Bark", which saw varying support among different mailers. Both worked in a similar fashion, with the mailer calling the <b>remote</b> <b>system</b> and sending a new handshake packet to request the files.|$|E
5000|$|Manage permissions {{on local}} or <b>remote</b> <b>systems</b> in domains or workgroups.|$|R
5000|$|<b>Remote</b> <b>Systems</b> Premium Leisure at Ponds Forge Sports Centre in Commercial Street ...|$|R
5000|$|... 1 50K6A command post, fully {{autonomous}} combat {{work with}} interaction with other <b>remote</b> <b>systems.</b>|$|R
2500|$|In practice, the FidoNet {{structure}} {{allows for}} any node to connect directly to any other, and node operators would sometimes {{form their own}} toll-calling arrangements on an ad-hoc basis, allowing for a balance between collective cost saving and timely delivery. For instance, if one node operator in a network offered to make regular toll calls to a particular system elsewhere, other operators might arrange to forward all of their mail destined for the <b>remote</b> <b>system,</b> and those near it, to the local volunteer. [...] Operators within individual networks would sometimes have cost-sharing arrangements, {{but it was also}} common for people to volunteer to pay for regular toll calls either out of generosity, or to build their status in the community.|$|E
2500|$|A pool {{can also}} contain volumes (also known as zvols), {{which can be}} used as block storage devices by other systems. An example of a volume would be an iSCSI or Fibre Channel target for another system, used to create NAS, a SAN, or any other ZFS-backed raw block storage capability. The volume will be seen by other systems as a bare storage device which they can use as they like. Capabilities such as snapshots, redundancy, [...] "scrubbing" [...] (data {{integrity}} and repair checks), deduplication, compression, cache usage, and replication are operational but not exposed to the <b>remote</b> <b>system,</b> which [...] "sees" [...] only a bare file storage device. Because ZFS does not create a file storage system on the block device or control how the storage space is used, it cannot create nested ZFS datasets or volumes within a volume.|$|E
2500|$|Regarding {{the file}} system, a {{suitable}} {{program can be}} designated as a translator for a single file or a whole directory hierarchy. Every access to the translated file, or files below a hierarchy in the second case, is in fact handled by the program. For example, a file translator may simply redirect read and write operations to another file, like a Unix symbolic link. The effect of Unix mounting is achieved by setting up a filesystem translator (using the [...] "settrans" [...] command). Translators {{can also be used}} to provide services to the user. For example, the ftpfs translator allows a user to encapsulate remote FTP sites within a directory. Then, standard tools such as ls, cp, and rm can be used to manipulate files on the <b>remote</b> <b>system.</b> Even more powerful translators are ones such as UnionFS, which allows a user to unify multiple directories into one; thus listing the unified directory reveals the contents of all the directories.|$|E
40|$|Requirement: Users of <b>remoting</b> <b>systems</b> (e. g., RPC and Messaging) want to {{concentrate}} on the data being sent. They should not have to use a different programming model just to use a different protocol. Problem: <b>Remoting</b> <b>systems</b> need to support alternate encodings, protocols and transports, either because of evolving standards or through dynamic negotiation with a peer. Solution: This paper has two main ideas. First, it clearly partitions a <b>remoting</b> <b>system</b> into four main blocks: presentation, encoding, protocol and transport. It identifies the extensibility points, the responsibilities and interactions of those blocks. Second, it shows how, for each message arriving on a connection accepted and created by an Acceptor, the Acceptor acts as a factory for specific encoders and protocol handlers. Thus a <b>remoting</b> <b>system</b> can dynamically adapt to new encodings, protocols and transports without changing the programming model presented to the programmer. Experience: We have used this model to adaptively alternate between XML and binary encoding, protocol and transport combinations in an RMI system. We show size and performance results for these combinations. Conclusion: This model isolates change from the <b>remoting</b> <b>system</b> user while allowing common remoting infrastructure to be extended and reused. The model does not degrade performance...|$|R
50|$|PaR Systems was {{spun off}} from General Mills in 1961 {{under the name}} Programmed and <b>Remote</b> <b>Systems</b> Corporation.|$|R
40|$|Abstract. Based on the {{reusable}} components, {{this article}} developed a <b>remote</b> maintenance <b>system</b> software. Essence {{of the process}} is a reusable component extraction process and development. Under {{the guidance of the}} field of engineering analysis in the field of <b>remote</b> <b>systems,</b> identify reusable components, and achieve reusable components. Finally, <b>remote</b> maintenance <b>systems</b> software has been completed, can be used in other software. It saves development time and achieve program reusable...|$|R
2500|$|Stallman {{refers to}} mobile phones as [...] "portable {{surveillance}} and tracking devices", {{and says he}} refuses to own a cell phone until there's one that runs entirely on free software. He also avoids using a key card to enter his office building since key card systems track each location and time that someone enters the building using a card. According to Stallman, {{with the exception of}} a few sites, such as his own website or sites related to his work with GNU and the FSF, he usually does not browse the web directly from his personal computer in order to prevent being connected with his browsing history. Instead, he uses GNU Womb's grab-url-from-mail utility, which can run on a separate system, and act as an email-based proxy to web sites - the user sends an e-mail which the script receives, the <b>remote</b> <b>system</b> downloads the web page content, then the script emails the user the web page content. [...] More recently he stated that he accesses all web sites via Tor, except for Wikipedia (which generally disallows editing from Tor).|$|E
50|$|Another common {{way for an}} {{application}} on a <b>remote</b> <b>system</b> to operate through a window on a local Cygwin/X display is SSH tunneling. An application on the local system creates an SSH session on the <b>remote</b> <b>system</b> (perhaps the application is xterm and the user types an 'ssh' command). The SSH server on the <b>remote</b> <b>system</b> sets things up so that any X client program the shell starts (on the <b>remote</b> <b>system)</b> uses the local Cygwin/X server.|$|E
50|$|In {{computer}} networks, {{to upload}} {{is to send}} data to a <b>remote</b> <b>system</b> such as a server or another client so that the <b>remote</b> <b>system</b> can store a copy.|$|E
50|$|Other {{failures}} {{which the}} file system {{must deal with}} include media failures or loss of connection to <b>remote</b> <b>systems.</b>|$|R
5000|$|Responsible {{for space}} shuttle <b>remote</b> {{manipulator}} <b>system,</b> {{also known as}} the <b>Remote</b> Manipulator <b>System</b> (RMS) or [...] "robot arm".|$|R
50|$|Network Utilities {{allows for}} viewing devices and systems on network, {{connecting}} to <b>remote</b> <b>systems,</b> mapping network drives, network monitoring, and more.|$|R
5000|$|Remote {{debugging}} is {{the process}} of debugging a program running on a system different from the debugger. To start remote debugging, a debugger connects to a <b>remote</b> <b>system</b> over a network. The debugger can then control the execution of the program on the <b>remote</b> <b>system</b> and retrieve information about its state.|$|E
5000|$|Nagios Remote Plugin Executor (NRPE) is a Nagios {{agent that}} allows <b>remote</b> <b>system</b> {{monitoring}} using scripts that are hosted {{on the remote}} systems. [...] It allows for monitoring of resources such as disk usage, system load {{or the number of}} users currently logged in. Nagios periodically polls the agent on <b>remote</b> <b>system</b> using the [...] plugin.|$|E
50|$|To prevent {{unauthorised}} {{access to the}} <b>remote</b> <b>system,</b> TC encryption may be employed. Secret sharing may be used.|$|E
5000|$|Remote {{procedure}} call middleware enables a client to use services running on <b>remote</b> <b>systems.</b> The {{process can be}} synchronous or asynchronous.|$|R
50|$|A {{technique}} {{to measure and}} interpret perceived performance <b>remote</b> <b>systems</b> is shown in a 2003 and updated in 2005 for virtual machines.|$|R
50|$|Several {{terminal}} {{programs were}} available for the Tandy 2000, {{making it possible to}} log on to BBS's, e-mail, and other <b>remote</b> <b>systems.</b>|$|R
5000|$|Fast and Slow Traceroute [...] - [...] {{find the}} route packets take {{between you and}} a <b>remote</b> <b>system</b> ...|$|E
5000|$|Transferring {{data from}} one <b>remote</b> <b>system</b> to another {{under the control}} of a local system is remote uploading.|$|E
50|$|For a Telecommand (TC) to be effective, {{it must be}} {{compiled}} into a pre-arranged format (which {{may follow}} a standard structure), modulated onto a carrier wave which is then transmitted with adequate power to the <b>remote</b> <b>system.</b> The <b>remote</b> <b>system</b> will then demodulate the digital signal from the carrier, decode the TC, and execute it. Transmission of the carrier wave can be by ultrasound, infra-red or other electromagnetic means.|$|E
5000|$|... ncdu was {{developed}} by Yoran Heling to learn C and {{to serve as a}} disk usage analyzer on <b>remote</b> <b>systems</b> over ssh.|$|R
5000|$|Kibo (ISS module) <b>Remote</b> Manipulator <b>System</b> (Japanese Experiment Module <b>Remote</b> Manipulator <b>System)</b> uses {{a similar}} grapple fixture, called Electro Mechanical Grapple Fixture (EMGF).|$|R
40|$|This paper {{proposed}} an implementation scheme of networked oscilloscope <b>remote</b> control <b>system.</b> Based on LabView platform, combined with remote control technology and network data transmission, an oscilloscope <b>remote</b> control <b>system</b> could be established. This paper analyzed the <b>remote</b> control <b>system</b> hardware structure, measuring instruments accessing mode, software development technology, and basic modules of control system...|$|R
