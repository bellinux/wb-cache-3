82|264|Public
5000|$|<b>Real-time</b> <b>language</b> {{analysis}} for JavaScript (marking common JavaScript pitfalls) ...|$|E
5000|$|Doppler Labs has {{announced}} and demonstrated future product features, including <b>real-time</b> <b>language</b> translation [...] and its “machine hearing” system ...|$|E
5000|$|Virtual assistants {{would be}} capable of {{multiple}} functions. One useful function would be <b>real-time</b> <b>language</b> translation in which words spoken in a foreign language would be translated into text that would appear as subtitles to a user wearing the glasses.|$|E
40|$|This paper {{discusses}} what <b>real-time</b> <b>languages</b> are {{and some}} of the features which make these languages suited for programming real-time applications by examining several examples of these <b>real-time</b> <b>languages</b> as found in the literature. A "real-time language" is roughly defined as a language which can be used to program a real-time application...|$|R
40|$|This paper {{presents}} {{an introduction to}} the basic issues involved in real-time systems. Both real-time operating sys and <b>real-time</b> programming <b>languages</b> are explored. Concurrent programming and process synchronization and communication are also discussed. The real-time requirements of the Naval Postgraduate School Autonomous Under Vehicle (AUV) are then examined. Autonomous underwater vehicle (AUV), hard real-time system, real-time operating system, <b>real-time</b> programming <b>language,</b> <b>real-time</b> system, soft real-time system[URL]...|$|R
40|$|Existing {{techniques}} for predicting the real-time behaviour of programs from their source code are surveyed. Three popular <b>real-time</b> <b>languages,</b> Ada, occam 2 1 and Modula- 2, are examined for their amenability to timing analysis using these techniques. Current language features which are unsafe for hard real-time programming are identified. ...|$|R
50|$|RTL/2 was a {{high-level}} programming language developed at Imperial Chemical Industries Ltd by J.G.P. Barnes. It was originally used internally within ICI but was distributed by SPL International in 1974It {{was designed for}} use in real-time computing (hence the initials RTL = <b>real-time</b> <b>language).</b> Based on concepts from Algol 68, {{it was intended to}} be a small, simple language. RTL/2 was standardised in 1980 by the British Standards Institution.|$|E
5000|$|The {{platform}} {{also has}} a guest services module that allows hotel guests to communicate with hotel staff using either a white-label or ALICE-branded app on their smartphone. The app allows guests to request services and items from hotel staff and {{has been described as}} a [...] "digital concierge." [...] Room service, maid service, dinner reservations, taxi accommodations, spa reservations, item requests, maintenance service, and more can be scheduled or requested via ALICE's app. The platform also uses web and SMS options to allow for broader communication between guests and staff. A 2015 update to the platform added <b>real-time</b> <b>language</b> translation, as well.|$|E
50|$|MOGUL is {{designed}} as a platform for the generation of new hypotheses, with a terminology {{and a set of}} interrelated concepts that can be used across more than one discipline. Although not a full-fledged theory in its own right, it sets out various theoretical claims based on the current literature in a range of research domains. As suggested below it is not connectionist in the most widely used sense of that term, although it employs terms and concepts familiar to connectionists such as competition, activation, activation levels and so forth. The same processing perspective also requires the long-established Chomskyan distinction between competence and performance to be viewed in a somewhat different way. Linguistic competence (knowledge) is not compartmentalised and placed in a separate box in the model, which then forms the object for a processor (or processors) to act on. Rather, it is instantiated and implicit within the processing system. The distinction between mental representation and processing is still valid, but is expressed in a way that ought to allow the abstract properties of linguistic systems in the mind to be more easily investigated in conjunction with real-time linguistic phenomena. The inspiration for this approach is the work of Ray Jackendoff. Here the architecture of the language faculty is formulated {{in such a way as}} to facilitate statements about competence-related, representational issues and their relationship to <b>real-time</b> <b>language</b> processing within the same model.|$|E
40|$|Presented at Work in Progress Session, IEEE Real-Time Systems Symposium (RTSS 2015). 1 to 3, Dec, 2015. San Antonio, U. S. A [...] Real-time {{parallel}} {{models are}} now common, but little exists on fine-grained parallelism within <b>real-time</b> <b>languages</b> and runtimes. ADA is is {{a language of}} choice for reliable real-time systems...|$|R
40|$|Multitape Turing {{machines}} with a restricted number of nondeterministic steps are investigated. Fischer and Kintala showed an in nite nondeterministic hierarchy of properly included <b>real-time</b> <b>languages</b> between the deterministic languages and the log-bounded nondeterministic languages. This result is extended to time complexities {{in the range}} between real-time and linear-time, and is generalized to arbitrary dimensions...|$|R
40|$|AbstractCompiler Verification {{has been}} {{identified}} as a vital process in the implementation of correct safety-critical systems. We extend here Hoare's refinement-algebra approach to compilation in order to include <b>real-time</b> <b>languages</b> in which processes interact asynchronously via communication queues. The existence of unique fixed-points is exploited to verify the implementation of crucial operators such as asynchronous input, delay and timeout...|$|R
40|$|AbstractThis paper {{discusses}} <b>real-time</b> <b>language</b> {{recognition by}} one-dimensional cellular automata (CA), focusing on {{limitations of the}} parallel recognition power. We investigate language recognition of strings containing binary representations B(|w|) of their own lengths. It is shown that:(1) The language LX={w∈{ 0, 1 }+:w contains the binary number(s) B(|w|) } is recognizable by CA in linear time, but is not recognizable in real time; and(2) The class of languages that are recognizable by CA in real time is not closed under concatenation and not closed under reversal. These results are {{solutions to the problems}} posed by Smith III in [A. R. Smith III, <b>Real-time</b> <b>language</b> recognition by one-dimensional cellular automata, J. Comput. System Sci. 6 (1972) 233 – 253]...|$|E
40|$|Real-time {{systems are}} amongst the most safety {{critical}} systems involving computer software and the incorrect functioning of this software can cause great damage, {{up to and}} including the loss of life. If seems sensible therefore to write real-time software in a way that gives us the best chance of correctly implementing specifications. Because of the high level of functional programming languages, their semantic simplicity and their amenability to formal reasoning and correctness preserving transformation it thus seems natural to use a functional language for this task. This thesis explores the problems of applying functional programming languages to real-time by defining the real-time functional programming language Ruth. The first part of the thesis concerns the identification of the particular problems associated with programming real-time systems. These can broadly be stated as a requirement that a <b>real-time</b> <b>language</b> must be able to express facts about time, a feature we have called time expressibility. The next stage is to provide time expressibility within a purely functional framework. This is accomplished by the use of timestamps on inputs and outputs and by providing a real-time clock as an input to Ruth programs. The final major part of the work is the construction of a formal definition of the semantics of Ruth to serve as a basis for formal reasoning and transformation. The framework within which the formal semantics of a <b>real-time</b> <b>language</b> are defined requires time expressibility {{in the same way as}} the <b>real-time</b> <b>language</b> itself. This is accomplished within the framework of domain theory by the use of specialised domains for timestamped objects, called herring-bone domains. These domains could be used as the basis for the definition of the semantics of any <b>real-time</b> <b>language...</b>|$|E
40|$|This paper {{describes}} ongoing work {{in developing}} a compositional trace-based semantics and proof system for a <b>real-time</b> <b>language.</b> The semantics models distributed processes communicating over asynchronous FIFO communication channels. Sending processes can specify time-out periods for individual messages. Messages not received within their time-out period are `lost'. Program behavior is modeled as traces of events, including events (such as asynchronous messages) which occur after termination. The proof system uses specification triples with explicit variables for time and program traces. 1 Introduction This paper describes ongoing work {{in developing a}} compositional trace-based semantics and proof system for a <b>real-time</b> <b>language.</b> The semantics models distributed processes communicating over asynchronous FIFO communication channels. Sending processes can specify time-out periods for individual messages. Messages not received within their time-out period are `lost'. Additional work in r [...] ...|$|E
40|$|In {{the paper}} the {{possibility}} of using a <b>real-time</b> programming <b>language</b> to formulate hardware and software specifications is elaborated. Instead of using strict formal specifications, a system is described in a simple and straight-forward manner, using terminology which is close to the application programmer and his or her way of thinking. The description is a mixture of clauses in syntactically correct formal notation and natural language inserts. The specifications are then refined in a stepwise manner until a program in the <b>real-time</b> programming <b>language</b> miniPEARL is obtained. Its syntax is based on the PEARL for Distributed Systems standardised language. Certain constructs of PEARL are renounced and some others are added to support the necessary features of a consistent hardware model to be employed in real-time control. Keywords: Control engineering application of computers, real-time systems, embedded systems, process-control, <b>real-time</b> <b>languages,</b> design systems, software speci [...] ...|$|R
40|$|Abstract. One-way {{cellular}} automata with restricted nondeterminism are investigated. The {{number of}} allowed nondeterministic state transi-tions {{is limited to}} a constant. It is shown that a limit to exactly one step does not decrease the language accepting capabilities. We prove a speed-up result that allows any linear-time computation to be sped-up to real-time. Some relationships to deterministic arrays are considered. Finally we prove several closure properties of the <b>real-time</b> <b>languages.</b> ...|$|R
40|$|This paper {{presents}} {{an introduction to}} the basic issues involved in real-time systems. Both real-time operating systems and <b>real-time</b> programming <b>languages</b> are explored. Concurrent programming and process synchronization and communication are also discussed. The real-time requirements of the Naval Postgraduate School Autonomous Under Vehicle (AUV) are then examined. SUBJECT TERMS autonomous underwater vehicle (AUV), hard real-time system, real-time operating system, <b>real-time</b> programming <b>language,</b> <b>real-time</b> system, soft real-time system TABLE OF CONTENTS 1 INTRODUCTION......................... 1 1. 1 BASICS.......................... 1 1. 2 HARD REAL-TIME SYSTEMS.................. 2 2 REAL-TIME OPERATING SYSTEMS................. 3 2. 1 CONCURRENT PROGRAMMING.................. 3 2. 2 SYNCHRONIZATION AND COMMUNICATION............ 4 2. 2. 1 SHARED MEMORY SYSTEMS........ [...] ...|$|R
40|$|<b>Real-time</b> <b>language</b> {{identification}} {{is a problem}} well-suited to neural network solution. By limiting the amount of speech processing at the frontend this can be achieved to a surprising degree. In our experiments wehave developed a recurrent neural network which has been trained and tested using examples from English and French. The recurren...|$|E
40|$|Seminar in <b>real-time</b> <b>language</b> comprehension. Models of {{sentence}} and discourse comprehension from the linguistic, psychology, and artificial intelligence literature, including symbolic and connectionist models. Ambiguity resolution. Linguistic complexity. The use of lexical, syntactic, semantic, pragmatic, contextual and prosodic information in language comprehension. The {{relationship between the}} computational resources available in working memory and the language processing mechanism. The psychological reality of linguistic representations...|$|E
40|$|We {{present a}} {{compositional}} method for translating real-time programs into networks of timed automata. Programs {{are written in}} an assembly like <b>real-time</b> <b>language</b> and translated into models supported by the tool Uppaal. We have implemented the translation and give an example of its application on a simple control program for a car. Some properties of the behaviour of the control program are verified using the derived model...|$|E
5000|$|... a {{discussion}} of various classes of execution model such as for imperative versus functional languages, and an article discussing execution models for <b>real-time</b> embedded <b>languages.</b>|$|R
50|$|Tanenhaus’s {{research}} {{focuses on}} processes which underlie <b>real-time</b> spoken <b>language</b> and reading comprehension. He is also interested {{in the relationship between}} linguistic and various non-linguistic contexts.|$|R
40|$|One-way {{cellular}} automata with restricted nondeterminism are investigated. The {{number of}} allowed nondeterministic state transitions {{is limited to}} a constant. It is shown that a limit to exactly one step does not decrease the language accepting capabilities. We prove a speed-up result that allows any linear-time computation to be sped-up to real-time. Some relationships to deterministic arrays are considered. Finally we prove several closure properties of the <b>real-time</b> <b>languages.</b> (orig.) SIGLEAvailable from TIB Hannover: RO 9119 (9801) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekDEGerman...|$|R
40|$|AbstractAORTA {{has been}} {{proposed}} as an implementable <b>real-time</b> <b>language</b> for concurrent systems where event times, rather than values of data, are critical. In this paper we describe how to use AORTA with a formal data model, allowing integration {{with a variety of}} model-based data specification languages. Example definitions are given of time-critical systems with important data attributes. A development technique and supporting software tools for AORTA are also described...|$|E
40|$|This thesis explores how {{predictions}} about upcoming language inputs are computed during <b>real-time</b> <b>language</b> comprehension. Previous {{research has demonstrated}} humans' ability to use rich contextual information to compute linguistic prediction during <b>real-time</b> <b>language</b> comprehension, {{and it has been}} widely assumed that contextual information can impact linguistic prediction as soon as it arises in the input. This thesis questions this key assumption and explores how linguistic predictions develop in real-time. I provide event-related potential (ERP) and reading eye-movement (EM) evidence from studies in Mandarin Chinese and English that even prominent and unambiguous information about preverbal arguments' structural roles cannot immediately impact comprehenders' verb prediction. I demonstrate that the N 400, an ERP response that is modulated by a word's predictability, becomes sensitive to argument role-reversals only when the time interval for prediction is widened. Further, I provide initial evidence that different sources of contextual information, namely, information about preverbal arguments' lexical identity vs. their structural roles, may impact linguistic prediction on different time scales. I put forth a research framework that aims to characterize the mental computations underlying linguistic prediction along a temporal dimension...|$|E
40|$|SUMMARY This paper {{discusses}} <b>real-time</b> <b>language</b> {{recognition by}} 1 dimensional one-way cellular automata (OCAs) and two-way cellular automata (CAs), focusing on {{limitations of the}} parallel computation power. To clarify the limitations, we investigate real-time recognition of cyclic strings of the form u k with u ∈ { 0, 1 } + and k ≥ 2. We show a version of pumping lemma for recognizing cyclic strings by OCAs, {{which can be used}} for proving that several languages are not recognizable by OCAs in real time. The paper also discusses the <b>real-time</b> <b>language</b> recognition of CAs by prefix and postfix computation, in which every prefix or postfix of an input string is also accepted, if the prefix or postfix is in the language. It is shown that there are languages L ⊆ Σ + such that L is not recognizable by OCA in real-time and the reversal of L and the concatenation LΣ ∗ are recognizable by CA in real-time. key words: cellular automata, OCA, parallel language recognition, pumping lemma, prefix recognitio...|$|E
40|$|AbstractThere {{are many}} {{fundamental}} open problems concerning cellular arrays (CA's). For example:(1) Is {{the class of}} <b>real-time</b> CA <b>languages</b> closed under reversal (concatenation) ?(2) (2) Are linear-time CA's more powerful than real-time CA's?(3) (3) Are nonlinear-time CA's more powerful than linear-time CA's? 4 (4) Does one-way communication reduce the computing power of a CA?Although {{some of these problems}} appear to be easier to resolve than the others, e. g., problem (1) seems easier than (2), no solution to any of these problems is forthcoming. In this paper, we investigate the relationships among these problems as well as prove some positive results concerning CA's. We show:a(a) the class of <b>real-time</b> CA <b>languages</b> is closed under reversal if and only if linear-time CA's are equivalent to real-time CA's;bif CA's are more powerful than CA's restricted to one-way data communication (i. e., one-way CA's), then nonlinear-time CA's are more powerful than linear-time CA's;c(c) if the class of <b>real-time</b> CA <b>languages</b> is closed under reversal, then it is also closed under concatenation. In the case of unary CA languages, we show that the class is closed under concatenation. We also show that the languageL={ 0 n 1 m|m,n> 0, mdividesn}is a <b>real-time</b> CA <b>language,</b> disproving a conjecture of Bucher and Culik...|$|R
5000|$|<b>Real-Time</b> Bedside Cortical <b>Language</b> Mapping during Spontaneous Conversation with Children ...|$|R
40|$|Many next generation, critical, hard real [...] time {{systems will}} require greater flexibility, dependability, and {{predictability}} than is {{commonly found in}} today's systems. These future systems include the space station, integrated vision/robotics/AI systems, collections of humans/robots coordinating to achieve common objectives (usually in hazardous environments such as undersea exploration or chemical plants), and various command and control applications. Such real-time applications also have demanding execution requirements requiring high performance computing. Our research approach challenges several basic assumptions upon which most current real [...] time systems are built and subsequently advocates a new paradigm based {{on the notion of}} predictability and on a method for on [...] line dynamic guarantee of certain types of deadlines. The new paradigm requires an integrated set of solutions ranging from design and specification methods and tools, to <b>real-time</b> <b>languages,</b> <b>real-time</b> operating systems [...] ...|$|R
40|$|We {{used the}} {{contrastive}} expectation associated with scalar adjectives {{to examine whether}} listeners {{are sensitive to the}} distinction between common and privileged information during real-time reference resolution. Our results show that listeners used this distinction to narrow the set of potential referents to objects with contrasts in common ground from the earliest moments. These results extend previous evidence that ground information influences <b>real-time</b> <b>language</b> processing by showing that the distinction between common and privileged information is used without being triggered by unusual circumstances...|$|E
40|$|We {{examined}} how nave conversational participants circumscribed referential domains during {{the production and}} comprehension of referring expressions by monitoring participants' eye movements during a referential communication task. The results replicated some wellestablished results, e. g., incremental reference resolution, demonstrating the feasibility of studying <b>real-time</b> <b>language</b> comprehension in interactive conversation. We also observed {{a high proportion of}} underspecified referential expressions that were easily understood by addresses because of discourse and pragmatic constraints, including constraints developed {{as a result of the}} conversation...|$|E
40|$|We {{explain what}} the 500 {{language}} problem is, {{why it is}} a relevant problem, and why solutions are needed. We discuss its solution, and illustrate it by applying it to two non-trivial but representative languages: an exotic proprietary <b>real-time</b> <b>language</b> from the telecommunications industry, and a well-known dialect {{of the most popular}} language in the world: IBM's VS COBOL II. We share our lessons learned based on these examples and on other experiences we had with our work on this problem...|$|E
40|$|AbstractRobot {{controllers}} {{are often}} programmed using either standard sequential programming languages or a robot-specific language, {{which are then}} compiled to assembly language specific to the robot. Modern <b>real-time</b> programming <b>languages,</b> on the other hand, are more appropriate to program robots, as they better fit the real-time reactive model of robots. This paper reports on a project to program a non-trivial robot, the Rug Warrior, in the Artificial Intelligence Laboratory of UNSW, using Esterel, which is a <b>real-time</b> programming <b>language.</b> The approach is illustrated by simulation of a colony of Siberian ants using a group of Rug Warriors...|$|R
50|$|Andy J. Wellings is a {{professor}} in the Computer Science department at the University of York in northern England. He works closely with Alan Burns on real-time systems, distributed, concurrent and <b>real-time</b> programming <b>languages.</b>|$|R
40|$|Ada has an {{important}} role in the real-time/embedded/safety-critical areas. It is the only ISO-standard, object-oriented, concurrent, <b>real-time</b> programming <b>language.</b> Ada is used as a usual language for application areas such as defense embedded systems that reliability and efficiency are very essential. One of the main Ada’s characteristics in compare with other programming languages is that, Ada was developed from the ground up with capabilities that provide real-time requirements. In this study it will be shown why Ada is used as the new standard for <b>real-time</b> programming <b>languages</b> and basic characteristics of real-time programming system in general and how they are addressed in Ada will be explained...|$|R
