59|53|Public
50|$|MG 1A2 (MG 42/59): MG 1A1 variant; product {{improved}} with longer ejection port, heavy bolt and friction <b>ring</b> <b>buffer.</b>|$|E
50|$|The {{signal from}} the {{detector}} is transmitted over 162 m long optical fibers. The signal is digitized and stored in 32kB <b>ring</b> <b>buffer.</b> The readout of the <b>ring</b> <b>buffer</b> results in a dead time 20 µs, which corresponds to about 2% dead time at the design trigger rate of 1 kHz. The readout is controlled by an FPGA (Xilinx) chip on a PCI (MicroEnable) card. The data are saved to a RAID0 disk system at a rate up to 20 MB/s, which results in up to 800 GB raw data per night.|$|E
5000|$|... a single-reader single-writer <b>ring</b> <b>buffer</b> FIFO, {{with a size}} which evenly {{divides the}} {{overflow}} {{of one of the}} available unsigned integer types, can unconditionally be implemented safely using only a memory barrier ...|$|E
5000|$|Specialized {{instructions}} for modulo addressing in <b>ring</b> <b>buffers</b> and bit-reversed addressing mode for FFT cross-referencing ...|$|R
5000|$|... 386BSD, {{sometimes}} called [...] "Jolix", is a discontinued free Unix-like operating {{system based on}} BSD, first released in 1992. It ran on PC-compatible computer systems based on the 32-bit Intel 80386 microprocessor. 386BSD innovations include role-based security, <b>ring</b> <b>buffers,</b> self-ordered configuration and modular kernel design. The BSDs for PC descend from it.|$|R
5000|$|The Am7990 {{can handle}} 10BASE-5 Type A, 10BASE-2 Type B, and 10BASE-T. Back-to-back packet {{reception}} {{with as little}} as 0,5 µs interframe spacing. DMA/Bus mastering 24-bit (16M) address capable. Up to 128 <b>ring</b> <b>buffers</b> can be used. 48 byte receive/transmit FIFO. Operates with 5 volt DC 5% supply and logic. Features an Time-domain reflectometer (TDR) with a granularity of 30 meter. 16,8 MHz maximum frequency.|$|R
50|$|Once CODESYS is online, {{it offers}} an {{extensive}} debugging functionality such as variable monitoring/writing/forcing by setting breakpoints/performing single steps or recording variable values online on the controller in a <b>ring</b> <b>buffer</b> (Sampling Trace).|$|E
50|$|A {{circular}} buffer, circular queue, cyclic buffer or <b>ring</b> <b>buffer</b> is a {{data structure}} {{that uses a}} single, fixed-size buffer {{as if it were}} connected end-to-end.This structure lends itself easily to buffering data streams.|$|E
50|$|To {{allow for}} a preview channel during the LP cutting process, Soundstream built a digital delay unit (DDU). Digital data from tape could be delayed by a user {{selectable}} time: 3ms to 1.308s in increments of 5.12ms. Delay was accomplished {{by the use of}} a variable-depth FIFO or <b>ring</b> <b>buffer.</b>|$|E
50|$|There {{are many}} methods that {{hardware}} may use {{to increase the}} interrupt latency that can be tolerated. These include buffers, and flow control. For example, most network cards implement transmit and receive <b>ring</b> <b>buffers,</b> interrupt rate limiting, and hardware flow control. Buffers allow data to be stored until it can be transferred, and flow control allows the network card to pause communications without having to discard data if the buffer is full.|$|R
30|$|In {{search of}} food {{individual}} hippopotamus {{is estimated to}} commute every night from 2 to 7  km from the river or lake in which they spent the day. However, during condition when food is not easily obtained the distance they move may increase up to 10  km (Eltringham 1999; Muller and Erasmus 1992; Tracy 1996). Hence grazing ground suitability {{on the basis of}} proximity to resting water was classified and reclassified using multiple <b>rings</b> <b>buffer</b> analysis on Arc GIS 10.2.|$|R
5000|$|The Linux kernel packet {{scheduler}} is configured {{using the}} userspace CLI utility called [...] (short for [...] "traffic control"). As the default queuing discipline, the packet scheduler uses a FIFO implementation called pfifo_fast, although systemd since its version 217 changes the default queuing discipline to fq_codel. The packet scheduler {{is an integral}} part of the Linux kernel's network stack and manages the <b>ring</b> <b>buffers</b> of all NICs, by working on the layer 2 of the OSI model and handling Ethernet frames, for example. It manages the transmit and receive buffers of all NICs installed in a computer.|$|R
5000|$|In {{case the}} kernel {{is unable to}} handle all {{incoming}} packets, the kernel {{does not have to}} do any work in order to drop them: they are simply overwritten in the network card's incoming <b>ring</b> <b>buffer.</b> Without NAPI, the kernel has to handle every incoming packet regardless of whether there is time to service it, which leads to thrashing.|$|E
50|$|A further {{development}} of the MG 1A1 was the MG 1A2 (MG 42/59), which had a heavier bolt (950 g, compared to 550 g), a new friction <b>ring</b> <b>buffer</b> and was adapted to use both the standard German continuous DM1 ammunition belt and the American M13 disintegrating belt. Further improvements to the weapon's muzzle device, bipod and bolt resulted in the MG 1A3.|$|E
5000|$|Disruptor is {{a library}} for the Java {{programming}} language {{that provides a}} concurrent <b>ring</b> <b>buffer</b> data structure of the same name, developed at LMAX Exchange. It {{is designed to provide}} a low-latency, high-throughput work queue in asynchronous event processing architectures. It ensures that any data is owned by only one thread for write access, therefore reducing write contention compared to other structures.|$|E
40|$|The {{toroidal}} {{magnetic confinement}} experiment ASDEX Upgrade investigates hot plasma performance and scalings in preparation of a thermonuclear fusion reactor. A new distributed real-time control has been designed for the device based on PCs and workstations under VxWorks and Solaris. As scientific progress requires frequent modification of algorithms, the system must provide flexibility to select specific sets of application processes (AP) and place these on target processors providing the necessary performance. For efficient information exchange between APs a shared memory layer for real-time signals, consisting of local <b>ring</b> <b>buffers</b> and shared memory hardware, has been developed which encapsulates signal routing and administration. The universal approach with free allocation of APs onto target processors combined with transparent real-time signal communication provides a flexible, reliable and efficient runtime infrastructure for general purposes...|$|R
40|$|The NuMoon project aims {{to detect}} signals of Ultra High Energy (UHE) Cosmic Rays with radio telescopes on Earth using the Lunar Cherenkov {{technique}} at low frequencies (similar to 150 MHz). The advantage of using low frequencies is {{the much larger}} effective detecting volume, with as trade-off the cut-off in sensitivity at lower energies. A first upper limit on the UHE neutrino flux from data of the Westerbork Radio Telescope (WSRT) has been published, while a second experiment, using the new LOFAR telescope, is in preparation. The advantages of LOFAR over WSRT are the larger collecting area, the better pointing accuracy {{and the use of}} <b>ring</b> <b>buffers,</b> which allow the implementation of a sophisticated self-trigger algorithm. The expected sensitivity of LOFAR reaches flux limits within the range of some theoretical production models. (C) 2010 Elsevier B. V. All rights reserved...|$|R
5000|$|... #Caption: Professional <b>ring</b> {{announcer}} Michael <b>Buffer</b> made a guest {{appearance in}} the episode, in which he spoke his trademark phrase, [...] "Let's get ready to rumble!" ...|$|R
5000|$|... growisofs has a {{built-in}} dd, which is the low-level process for sending data to the writer. This uses two buffers, the <b>Ring</b> <b>Buffer</b> (the growisofs program's software buffer) and the Unit Buffer (the drive's internal hardware buffer), and to prevent buffer underrun, these buffers must be kept filled. This is monitored and displayed in the status line as the RBU ("Ring Buffer Utilisation") and UBU ("Unit Buffer Utilisation").|$|E
50|$|The BMDFM dynamic {{scheduling}} subsystem is {{an efficient}} SMP emulator of the tagged-token dataflow machine. The Shared Memory Pool is divided in three main parts: Input/Output <b>Ring</b> <b>Buffer</b> Port (IORBP), Data Buffer (DB) and Operation Queue (OQ). The Front-end Control Virtual Machine schedules an input application program statically and puts clustered instructions and {{data of the}} input program into the IORBP. The <b>ring</b> <b>buffer</b> service processes (IORBP PROC) move data into the DB and instructions into the OQ. The operation queue service processes (OQ PROC) tag the instructions as ready for execution if the required operands' data is accessible. Execution processes (CPU PROC) execute instructions, which are tagged as ready and output computed data into the DB or to the IORBP. Additionally, IORBP PROC and OQ PROC are responsible for freeing memory after contexts have been processed. The context is a special unique identifier representing a copy of data within different iteration bodies accordingly to the tagged-token dataflow architecture. This allows the dynamic scheduler to handle several iterations in parallel.|$|E
50|$|Either the shaper or {{comparator}} {{output is}} sampled with the LHC bunch-crossing frequency of 40 MHz into an analog pipeline. This <b>ring</b> <b>buffer</b> has a programmable latency of {{a maximum of}} 160 sampling intervals and an integrated derandomising buffer of 16 stages. For analogue readout data is multiplexed with up to 40 MHz onto one or four ports. A binary readout mode operates at up to 80 MHz output rate on two ports. Current drivers bring the serialised data off chip.|$|E
40|$|LOFAR a b s t r a c t The NuMoon project aims {{to detect}} signals of Ultra High Energy (UHE) Cosmic Rays with radio telescopes on Earth using the Lunar Cherenkov {{technique}} at low frequencies ð " 150 MHzÞ. The advantage of using low frequencies is {{the much larger}} effective detecting volume, with as trade-off the cut-off in sensitivity at lower energies. A first upper limit on the UHE neutrino flux from data of theWesterbork Radio Telescope (WSRT) has been published, while a second experiment, using the new LOFAR telescope, is in preparation. The advantages of LOFAR over WSRT are the larger collecting area, the better pointing accuracy {{and the use of}} <b>ring</b> <b>buffers,</b> which allow the implementation of a sophisticated self-trigger algorithm. The expected sensitivity of LOFAR reaches flux limits within the range of some theoretical productionmodels. & 2010 Elsevier B. V. All rights reserved. 1...|$|R
50|$|With {{longtime}} Zuffa <b>ring</b> announcer Bruce <b>Buffer</b> in Germany for UFC 122, former WEC ring announcer Joe Martinez made {{a return}} to handle announcing duties for this event.|$|R
5000|$|The Great Debate is a VH1 {{program that}} debates about pop culture. It premiered July 6, 2009 and is [...] "emceed" [...] by boxing <b>ring</b> {{announcer}} Michael <b>Buffer.</b>|$|R
50|$|The {{data table}} is {{initialized}} as all zeros, which represents {{a lack of}} activity for all previous time. New data {{is added to the}} data buffer in the fashion of a <b>ring</b> <b>buffer,</b> so that the newest point is written over the oldest data point.The convolution is solved by multiplying corresponding elements from the weight and data tables, and summing the resulting products. As described, the loss of the old data by overwriting with new data will cause echoes in a continuous system as disturbances that were absorbed into the system are suddenly removed.|$|E
5000|$|The buffer in {{an audio}} {{controller}} is a <b>ring</b> <b>buffer.</b> If an underrun occurs and the audio controller is not stopped, it will either keep repeating the sound {{contained in the}} buffer, which may hold {{a quarter of a}} second, or replace by silence depending on the implementation. Such effect is commonly referred to as [...] "machinegun" [...] or Max Headroom stuttering effect. This happens if the operating system hangs during audio playback. An error handling routine (e.g. blue screen of death) may eventually stop the audio controller.|$|E
5000|$|The third value, [...] "Top + Left - TopLeft", is {{effectively}} equivalent to applying the top predictor {{to the current}} and the left sample, followed by applying the left predictor to the prediction residual of the top predictor. This method, {{also known as the}} gradient, exploits both horizontal and vertical redundancy. So in simple terms the prediction is the median of the top, left, and gradient prediction methods. For improved performance and simplicity, the edges of the frame are assumed to be zero to avoid special cases. The prediction in encoding and decoding is managed using a <b>ring</b> <b>buffer.</b>|$|E
40|$|Integer division, modulo, and {{remainder}} {{operations are}} expressive and useful operations. They are logical candidates to express complex data accesses {{such as the}} wrap-around behavior in queues using <b>ring</b> <b>buffers,</b> array address calculations in data distribution, and cache locality compiler-optimizations. Experienced application programmers, however, avoid them because they are slow. Furthermore, while advances in both hardware and software have improved the performance of many parts of a program, few are applicable to division and modulo operations. This trend makes these operations increasingly detrimental to program performance. This paper describes a suite of optimizations for eliminating division, modulo, and remainder operations from programs. These techniques are analogous to strength reduction techniques used for multiplications. In addition to some algebraic simplifications, we present a set of optimization techniques which eliminates division and modulo operations that are functions of loop induction variables and loop constants. The optimizations rely on number theory, integer programming and loop transformations...|$|R
40|$|ABSTRACT Integer division, modulo, and {{remainder}} {{operations are}} expressive and useful operations. They are logical candidates to express complex data accesses {{such as the}} wrap-around behavior in queues using <b>ring</b> <b>buffers.</b> In addition, they appear frequently in address computations {{as a result of}} compiler optimizations that improve data locality, perform data distribution, or enable parallelization. Experienced application programmers, however, avoid them because they are slow. Furthermore, while advances in both hardware and software have improved the performance of many parts of a program, few are applicable to division and modulo operations. This trend makes these operations increasingly detrimental to program performance. This paper describes a suite of optimizations for eliminating division, modulo, and remainder operations from programs. These techniques are analogous to strength reduction techniques used for multiplications. In addition to some algebraic simplifications, we present a set of optimization techniques that eliminates division and modulo operations that are functions of loop induction variables and loop constants. The optimizations rely on algebra, integer programming, and loop transformations. 1...|$|R
5000|$|Hughes is {{a native}} of Pocatello, Idaho. [...] He has trademarked the catchphrase he is most {{associated}} with, [...] "Can you feel it?", following the pattern of <b>ring</b> announcer Michael <b>Buffer</b> who previously trademarked his own catchphrase, [...] "Let's get ready to rumble!" ...|$|R
5000|$|A classic {{concurrency}} {{problem is}} that of the bounded producer/consumer, {{in which there is a}} queue or <b>ring</b> <b>buffer</b> of tasks with a maximum size, with one or more threads being [...] "producer" [...] threads that add tasks to the queue, and one or more other threads being [...] "consumer" [...] threads that take tasks out of the queue. The queue is assumed to be non-thread-safe itself, and it can be empty, full, or between empty and full. Whenever the queue is full of tasks, then we need the producer threads to block until there is room from consumer threads dequeueing tasks. On the other hand, whenever the queue is empty, then we need the consumer threads to block until more tasks are available due to producer threads adding them.|$|E
3000|$|Chronologically ordered metrics can be {{inserted}} into the <b>ring</b> <b>buffer</b> in constant time. An out of order metric is entered into the <b>ring</b> <b>buffer</b> using a binary search to locate the index which falls within the appropriate time period, separates the buffer into two slices at that index, appends the metric to the lower slice and then appends the upper slice. This results in a O(l [...]...|$|E
40|$|This {{document}} addresses {{two issues}} in the original paper entitled 'An Intelligent, Onboard Signal Processing Payload Concept' submitted to the SPIE AeroSense 2003 C 0 nference. l Since the original paper submission, and prior to the scheduled presentation, a correction {{has been made to}} one of the figures in the original paper and an update has been performed to the software simulation of the payload concept. The figure, referred to as Figure 8. Simulation Results in the original paper, contains an error in the voltage versus the capacity drained chart. This chart does not correctly display the voltage changes experienced by the battery module due to the varying discharge rates. This error is an artifact of the procedure used to graph the data. Additionally, the original version of the Simulation related the algorithm execution rate to the lightning event rate regardless of the number of events in the <b>ring</b> <b>buffer.</b> This feature was mentioned in section 5. Simulation Results of the original paper. A correction was also made {{to the size of the}} <b>ring</b> <b>buffer.</b> Incorrect information was provided to the authors that placed the number of possible events at 18, 310. Corrected information has since been obtained that specifies the <b>ring</b> <b>buffer</b> can typically hold only 1, 000 events. This has a significant impact on the APM process and the number of events lost when the size of the <b>ring</b> <b>buffer</b> is exceeded. Also, upon further analysis, it was realized that the simulation contained an error in the recording of the number of events in the <b>ring</b> <b>buffer.</b> The faster algorithms, LMS and ML, should have been able to process all events during the simulation time interval, but the initial results did not reflect this characteristic. The updated version of the simulation appropriately handles the number of algorithm executions and recording of events in the <b>ring</b> <b>buffer</b> as well as uses the correct size for the <b>ring</b> <b>buffer.</b> These improvements to the simulation and subsequent results are discussed in this document...|$|E
40|$|Multichannel local-area {{networks}} can {{be constructed}} using fiber-optic wavelength-division-multiplexing (WDM) techniques. In this paper, WDM is applied to ring networks such as FDDI, token ring, slotted <b>ring,</b> and <b>buffer</b> insertion <b>ring</b> architectures. Crosstalk and insertion loss analyses of grating demultiplexers shows that the ratio of channel separation to channel width must be greater than four. Performance analyses of the multichannel WDM ring are formulated to determine the packet delay. The delay in the multichannel token ring is obtained by summing the remaining service time, token walk time, and the average service time of newly arrived messages. The remaining service time is estimated by approximating {{the system as a}} M/M/m queue. The multichannel slotted <b>ring</b> and <b>buffer</b> insertion <b>ring</b> are modeled by a non-preemptive head-of-the-line priority queuing system. By identifying that portion of the passing ring traffic having priority over local traffic, the delay of a tagged packet can be obtained as the sum of the residual service time and service times of local waiting packets and newly arrived ring packets. Two implementations are identified, one with parallel optical transmitters and receivers and protocol modules, and another using an array of laser diodes and photodetectors and a single protocol module. link_to_subscribed_fulltex...|$|R
40|$|PETRA-III is a 3 rd {{generation}} synchrotron {{light source}} dedicated to users at 14 beam lines with 30 instruments. The storage ring is presently modified to add 12 beam lines. PETRA III was operated with several filling modes such as 40, 60, 480 and 960 bunches {{with a total}} current of 100 mA at electron beam energy of 6 GeV. The horizontal beam emittance is 1 nmrad while a coupling of 1 % amounts to a vertical emittance of 10 pmrad. During a user run the Machine Protection System (MPS) may trigger an unscheduled beam dump if transients in the current of magnet power supplies are detected which are above permissible limits. The trigger of MPS stops the <b>ring</b> <b>buffers</b> of the 226 BPM electronics where the last 16384 turns just before the dump are stored. These data and transient recorder data of Magnet Power Supply Controllers are available for a post-mortem analysis. Here we discuss in detail the functionality of a Java GUI used to investigate the transient behavior {{of the differences between}} set and readout values of different power supplies to find out the responsible power supply that might have led to emittance growth, fluctuations in orbits or beam dumps seen in a post-mortem analysis...|$|R
40|$|In this paper, we {{describe}} a design for an object-oriented, interprocess communications subsystem {{that supports the}} migration of communication endpoints. All communication is connection-oriented and occurs between two endpoints, represented by Interface Objects (IObjs). A full-duplex connection between IObjs is implemented by one <b>buffer</b> <b>ring</b> per direction; the <b>buffer</b> <b>rings</b> are conceptually shared by both IObjs through a consumer-producer relationship. This design's architecture is location-transparent for naive objects that are not designed to deal specifically with migrating peers. However, the architecutre can keep highly optimized objects informed {{so that they can}} react to migration events and adjust their behavior. The design supplies a framework with which the system can provide efficient object and process migration while maintaining open connections. 1 Introduction Interprocess communication (IPC) is a key primitive in modern operating systems. The structure of system IPC affec [...] ...|$|R
