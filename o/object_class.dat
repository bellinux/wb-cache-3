981|3296|Public
25|$|Similar to Java, UnrealScript is {{object-oriented}} without {{multiple inheritance}} (classes all inherit {{from a common}} <b>Object</b> <b>class),</b> and classes are defined in individual files named for the class they define. Unlike Java, UnrealScript does not have object wrappers for primitive types. Interfaces are only supported in Unreal Engine generation 3 and a few Unreal Engine 2 games. UnrealScript supports operator overloading, but not method overloading, except for optional parameters.|$|E
25|$|Some {{languages}} like Perl 6 or C# have {{a unified}} type system. This {{means that all}} C# types including primitive types inherit from a single root object. Every type in C# inherits from the <b>Object</b> <b>class.</b> Java has several primitive types that are not objects. Java provides wrapper object types that exist together with the primitive types so developers can use either the wrapper object types or the simpler non-object primitive types.|$|E
2500|$|An Electronic Product Code (EPC) is {{one common}} type of data stored in a tag. When written into the tag by an RFID printer, the tag {{contains}} a 96-bit string of data. [...] The first eight bits are a header which identifies the version of the protocol. The next 28 bits identify the organization that manages {{the data for this}} tag; the organization number is assigned by the EPCGlobal consortium. The next 24 bits are an <b>object</b> <b>class,</b> identifying the kind of product; the last 36 bits are a unique serial number for a particular tag. These last two fields are set by the organization that issued the tag. Rather like a URL, the total electronic product code number {{can be used as a}} key into a global database to uniquely identify a particular product.|$|E
40|$|Class "EBMTP", {{classes and}} methods for {{empirical}} Bayes multiple testing procedure output Description An <b>object</b> of <b>class</b> EBMTP is {{the output of}} a particular multiple testing procedure, as generated by the function EBMTP. The object has slots for the various data used to make multiple testing decisions, in particular adjusted p-values. <b>Objects</b> from the <b>Class</b> <b>Objects</b> can be created by calls of the form new(’MTP’, statistic = [...] , <b>object</b> of <b>class</b> numeric estimate = [...] , <b>object</b> of <b>class</b> numeric sampsize = [...] , <b>object</b> of <b>class</b> numeric rawp = [...] , <b>object</b> of <b>class</b> numeric adjp = [...] , <b>object</b> of <b>class</b> numeric reject = [...] , <b>object</b> of <b>class</b> matrix rawdist = [...] , <b>object</b> of <b>class</b> matrix nulldist = [...] , <b>object</b> of <b>class</b> matrix nulldist. type = [...] , <b>object</b> of <b>class</b> character marg. null = [...] , <b>object</b> of <b>class</b> character marg. par = [...] , <b>object</b> of <b>class</b> matrix label = [...] , <b>object</b> of <b>class</b> numeric falsepos = [...] , <b>object</b> of <b>class</b> matrix truepos = [...] , <b>object</b> of <b>class</b> matrix errormat = [...] , <b>object</b> of <b>class</b> matrix EB. h 0 M = [...] , <b>object</b> of <b>class</b> numeric prior = [...] , <b>object</b> of <b>class</b> numeric prior. type = [...] , <b>object</b> of <b>class</b> character lqv = [...] , <b>object</b> of <b>class</b> numeric Hsets = [...] , <b>object</b> of <b>class</b> matrix index = [...] , <b>object</b> of <b>class</b> matrix call = [...] , <b>object</b> of <b>class</b> call seed = [...] , <b>object</b> of <b>class</b> intege...|$|R
40|$|Designing object {{models for}} a robot’s detection-system {{can be very}} {{time-consuming}} since many <b>object</b> <b>classes</b> exist. This paper presents an approach that automatically infers <b>object</b> <b>classes</b> from recorded 3 D data and collects train-ing examples. A special focus is put on difficult unstruc-tured outdoor scenarios with <b>object</b> <b>classes</b> ranging from cars over trees to buildings. In contrast to many existing works, it is not assumed that perfect segmentation of the scene is possible. Instead, a novel hierarchical segmenta-tion method is proposed that works together with a novel inference strategy to infer <b>object</b> <b>classes.</b> 1...|$|R
40|$|Abstract. The PASCAL Visual <b>Object</b> <b>Classes</b> Challenge {{ran from}} February to March 2005. The {{goal of the}} {{challenge}} was to recognize objects {{from a number of}} visual <b>object</b> <b>classes</b> in realistic scenes (i. e. not pre-segmented <b>objects).</b> Four <b>object</b> <b>classes</b> were selected: motorbikes, bicycles, cars and people. Twelve teams entered the challenge. In this chapter we provide details of the datasets, algorithms used by the teams, evaluation criteria, and results achieved. ...|$|R
2500|$|Ruby is object-oriented: every {{value is}} an object, {{including}} classes and instances of types {{that many other}} languages designate as primitives (such as integers, booleans, and [...] "null"). Variables always hold references to objects. Every function is a method and methods are always called on an object. Methods defined at the top level scope become methods of the <b>Object</b> <b>class.</b> Since this class is an ancestor of every other class, such methods can be called on any object. They are also visible in all scopes, effectively serving as [...] "global" [...] procedures. Ruby supports inheritance with dynamic dispatch, [...] mixins and singleton methods (belonging to, and defined for, a single instance rather than being defined on the class). Though Ruby does not support multiple inheritance, classes can import modules as mixins.|$|E
2500|$|Each HyperCard <b>object</b> <b>class,</b> {{contains}} {{a set of}} [...] "properties". For example, buttons are a type of object, and come in standard styles. To determine, say, whether a checkbox style button is in fact checked, a script can simply call the highlight property, which would return either true or false. [...] In a similar way, objects can be analyzed via functions. For example, the number of lines in text field (another type of object) can be determined by {{a variant of the}} number function, called simply as [...] This is very useful when performing a given action on each separate line of the field. The script that implements the action need only call the function to know exactly the number of lines it must process. [...] Should the field data change, the already coded function call will still be accurate.|$|E
50|$|A complex <b>object</b> <b>class</b> {{contains}} many objects. An object can perform various actions {{at a particular}} time, but cannot have a concurrency within itself. Also an <b>object</b> <b>class</b> that isn’t involved in any sort of relationship(component/specialization) is called an independent <b>object</b> <b>class.</b>|$|E
50|$|NIM data is {{organized}} into <b>object</b> <b>classes</b> and <b>object</b> types. <b>Classes</b> include machines, networks and resources while types {{refer to the}} kind of <b>object</b> within a <b>class,</b> e.g., script or image resources.|$|R
40|$|The {{concepts}} of the basic entities, i. e., <b>objects,</b> <b>object</b> <b>classes,</b> <b>object</b> types, etc., in the type hierarchy of object-oriented languages are revisited. The notion of object reuse is defined and elaborated. We show that while <b>object</b> <b>classes</b> are useful in object description and creation, the class-is-type principle which is used in many object-oriented languages is inadequate for object reuse. We also show that parameterized types and generic functions are better served by using kind-bounded qualification than universal qualification and other mechanisms. Keywords: Object reuse, software integration, <b>objects,</b> <b>classes,</b> types, kinds, class-is-type principle, parameterized types, generic functions, kind-bounded polymorphism...|$|R
5000|$|... nested data {{structures}} such as records, <b>objects,</b> <b>classes,</b> etc.|$|R
50|$|The {{community}} model {{gives an}} overview of all the object classes and the concurrent objects of the system. An <b>Object</b> <b>class</b> encapsulates the data that describes objects of the same structure and behaviour. A complex <b>object</b> <b>class</b> can have single or multiple components.|$|E
5000|$|<b>Object</b> <b>Class</b> Term: Represents {{the object}} {{to which the}} {{property}} is applicable. In NIEM, we interpret that object to be the real-world object. (An <b>object</b> <b>class</b> refers {{to a group of}} objects that share the same attributes, operations, methods, relationships, and semantics.) ...|$|E
5000|$|The {{resulting}} <b>object</b> <b>class</b> is {{shipped in}} DLL form. Once the new <b>object</b> <b>class</b> implemented by it is {{registered with the}} Workplace Shell and an instance of this class is created, it can be acted on by the user or other programs as every other Workplace Shell object.|$|E
5000|$|... #Caption: Overview of the <b>object</b> <b>classes</b> product, {{order and}} {{resource}} ...|$|R
5000|$|The {{benefits}} of organizing software into <b>object</b> <b>classes</b> fall into three categories: ...|$|R
40|$|We {{propose a}} {{canonical}} model for <b>object</b> <b>classes</b> in aerial images. This model {{is motivated by}} the observation that geographic regions of interest are characterized by collections of texture motifs corresponding to the geographic processes that generate them. We show that this model is effective in learning the common texture themes, or motifs, of the <b>object</b> <b>classes.</b> 1...|$|R
5000|$|... package subroutines into a module, library, <b>object,</b> <b>class,</b> etc.|$|E
50|$|Object {{instances}} are slotted into namespaces; each <b>object</b> <b>class</b> inherits {{from its}} parent <b>object</b> <b>class</b> (and ultimately from {{the root of}} the hierarchy), adding attributes to the must-may list. Directory services are often central to the security design of an IT system and have a correspondingly-fine granularity of access control.|$|E
5000|$|Object - The Object {{data type}} {{is defined by}} the <b>Object</b> <b>class.</b> The <b>Object</b> <b>class</b> serves as the base class for all class {{definitions}} in ActionScript. Objects in their basic form can be used as associative arrays that contain key-value pairs, where keys are Strings and values may be any type.|$|E
50|$|Multiple {{inheritance}} is {{a feature}} of some object-oriented computer programming languages in which an <b>object</b> or <b>class</b> can inherit characteristics and features {{from more than one}} parent <b>object</b> or parent <b>class.</b> It is distinct from single inheritance, where an <b>object</b> or <b>class</b> may only inherit from one particular <b>object</b> or <b>class.</b>|$|R
5000|$|Invocation {{of another}} {{constructor}} (either of the <b>object's</b> <b>class</b> {{or of the}} object's superclass) ...|$|R
5000|$|... {{the aspect}} transparently forces the {{cross-cutting}} behavior on <b>object</b> <b>classes</b> and other software entities ...|$|R
5000|$|Directory schemas are object classes, attributes, name {{bindings}} {{and knowledge}} (namespaces) where an <b>object</b> <b>class</b> has: ...|$|E
5000|$|Best Paper: <b>Object</b> <b>Class</b> Recognition by Unsupervised Scale-Invariant Learning, Rob Fergus, Pietro Perona, and Andrew Zisserman ...|$|E
50|$|A {{community}} diagram {{along with}} its corresponding <b>object</b> <b>class</b> diagram forms the structural part of a system.|$|E
40|$|Objects can {{be created}} using the {{function}} read. affybatch or the wrapper ReadAffy. cdfName: <b>Object</b> of <b>class</b> character representing the name of CDF file associated with the arrays in the AffyBatch. nrow: <b>Object</b> of <b>class</b> integer representing the physical number of rows in the arrays. ncol: <b>Object</b> of <b>class</b> integer representing the physical number of columns in the arrays. assayData: <b>Object</b> of <b>class</b> AssayData containing the raw data, which will be at minimum a matrix of intensity values. This slot can also hold a matrix of standard errors if the ’sd’ argument is set to TRUE in the call to ReadAffy. phenoData: <b>Object</b> of <b>class</b> AnnotatedDataFrame containing phenotypic data for the samples. annotation A character string identifying the annotation {{that may be used}} for the ExpressionSet instance. protocolData: <b>Object</b> of <b>class</b> AnnotatedDataFrame containing protocol data for the samples. featureData <b>Object</b> of <b>class</b> AnnotatedDataFrame containing feature-level (e. g., probesetlevel) information. experimentData: <b>Object</b> of <b>class</b> "MIAME " containing experiment-level information...|$|R
40|$|Abstract. Recognizing the {{presence}} of <b>object</b> <b>classes</b> in an image, or image clas-sification, has become an increasingly important topic of interest. Equally impor-tant, however, is also the capability to locate these <b>object</b> <b>classes</b> in the image. We consider in this paper an approach to these two related problems with {{the primary goal of}} minimizing the training requirements so as to allow for ease of adding new <b>object</b> <b>classes,</b> as opposed to approaches that favor training a suite of object-specific classifiers. To this end, we provide the analysis of an exemplar-based approach that leverages unsupervised clustering for classification purpose, and sliding window matching for localization. While such exemplar based ap-proach by itself is brittle towards intraclass and viewpoint variations, we achieve robustness by introducing a novel Conditional Random Field model that facili-tates a straightforward accept/reject decision of the localized <b>object</b> <b>classes.</b> Per-formance of our approach on the PASCAL Visual Object Challenge 2007 dataset demonstrates its efficacy. ...|$|R
40|$|Current object {{recognition}} systems aim at achieving two challenging goals: recognizing numerous <b>object</b> <b>classes</b> and learning new <b>object</b> <b>classes</b> {{from a small}} number of examples. This paper provides a benchmark for evaluating progress on these fundamental tasks. Several methods have recently proposed to utilize the commonalities between <b>object</b> <b>classes</b> in order to effectively acquire new <b>object</b> <b>classes.</b> Such methods can be termed interclass transfer techniques. However, it is currently difficult to asses which of the proposed methods maximally utilizes the shared structure of related classes. To facilitate the development, as well as the assessment of methods for dealing with multiple related classes, the proposed benchmark provides labeled images of over  ¢¡¢¡ mammal classes. The images are organized in five levels of variability, and their labels provide information on the objects identity, location and pose. A labeled benchmark containing a large number of related classes is crucial for assessing how well proposed solutions scale up, and which methods better utilize interclass transfer. ...|$|R
5000|$|Within X.500 and LDAP schemas and protocols, OIDs uniquely name each {{attribute}} type and <b>object</b> <b>class,</b> {{and other elements}} of schema.|$|E
5000|$|To fully {{understand}} the grammar concept behind the WITH SYNTAX clause, imagine we wrote our OPERATION Information <b>Object</b> <b>Class</b> definition as follows: ...|$|E
5000|$|A basic {{principle}} of data modelling {{is the combination}} of an <b>object</b> <b>class</b> and a characteristic. For example, [...] "Person - hair color".|$|E
40|$|Recognizing the {{presence}} of <b>object</b> <b>classes</b> in an image, or image classification, has become an increasingly important topic of interest. Equally important, however, is also the capability to locate these <b>object</b> <b>classes</b> in the image. We consider in this paper an approach to these two related problems with {{the primary goal of}} minimizing the training requirements so as to allow for ease of adding new <b>object</b> <b>classes,</b> as opposed to approaches that favor training a suite of object-specific classifiers. To this end, we provide the analysis of an exemplar-based approach that leverages unsupervised clustering for classification purpose, and sliding window matching for localization. While such exemplar based approach by itself is brittle towards intraclass and viewpoint variations, we achieve robustness by introducing a novel Conditional Random Field model that facilitates a straightforward accept/reject decision of the localized <b>object</b> <b>classes.</b> Performance of our approach on the PASCAL Visual Object Challenge 2007 dataset demonstrates its efficacy. © 2011 Springer-Verlag...|$|R
5000|$|Contains a {{large number}} of <b>object</b> <b>classes</b> and allows the {{creation}} of new classes easily.|$|R
40|$|We {{propose a}} new {{approach}} for constructing mid-level visual features for image classification. We represent an image using the outputs {{of a collection of}} binary classifiers. These binary classifiers are trained to differentiate pairs of <b>object</b> <b>classes</b> in an <b>object</b> hierarchy. Our feature repre-sentation implicitly captures the hierarchical structure in <b>object</b> <b>classes.</b> We show that our proposed approach out-performs other baseline methods in image classification. 1...|$|R
