1|10000|Public
40|$|Opening {{access to}} the source code for a product is a {{business}} strategy that is increasingly {{used as the basis}} for innovative collaborations with stakeholders. The strategy has been successful at producing a large quantity of high-quality software. A tactic in this strategy is to effectively use the efforts of many widely dispersed professionals. The processes, software tools and the communication mechanisms used to facilitate concurrent development by {{a large number of people}} are of as much interest as the software being created. In this position paper we present our view of how a software product line organization might operate if it used an <b>open</b> <b>development</b> <b>method</b> (ODM) but is not necessarily producing open source software. We will describe a hypothetical product line (HPL), which is part speculation, part our experience, and partly the experience of others...|$|E
40|$|Building on {{the success}} of the first four {{workshops}} in the series, which were held at ICSE 2001 (Toronto), ICSE 2002 (Orlando), ICSE 2003 (Portland) and ICSE 2004 (Edinburgh), the 5 th Workshop on Open Source Software Engineering, ("Open Source Application Spaces") brought together researchers and practitioners for the purpose of building a roadmap {{of the ways in which}} various computing application spaces have been impacted by open source software and also by <b>open</b> source <b>development</b> <b>methods,</b> tools and organizational structures...|$|R
40|$|Software {{is largely}} a service {{industry}} operating under the persistent but unfounded delusion {{that it is a}} manufacturing industry. ” — Eric S. Raymond [38] Open source software {{is not the end of}} the commercial software industry but it is clearly changing some areas of the industry’s landscape. In this paper we examine the <b>open</b> source <b>development</b> <b>method</b> as it exists in practice today from a technical and social context. We find similar licenses, leadership by meritocracy, and tool-based collaboration across eleven projects and three development portals surveyed. We propose a “walled server ” model to describe open source project information flow and control. We further examine the social context of open source communication and intragroup conflict. We describe five business models observed in today’s open source industry and evaluate when a business should choose to use open source methods over other approaches. We conclude by proposing four areas for future research: open source patronage, competition between open source and proprietary software, open source use as Off-The-Shelf (OTS) software, and transplanting the <b>open</b> source software <b>development</b> <b>method.</b> ...|$|R
40|$|In {{this paper}} {{we report on}} an ongoing {{research}} to understand and foster networks of communities around the development of software systems in a large corporation. Software systems are integral to the functions of any modern large, corporation. Such systems minimally include word processors, email, group communication systems, and often include complex systems such as Enterprise Resource Planning (ERP), Enterprise Portals, and so forth. Hence, most modern corporations of today heavily utilize and often develop software systems or their customizations. The success of several Open Source software systems, e. g., Linux, Apache, and so forth, leads {{us to believe that}} certain collaboration practices of <b>Open</b> Source <b>development</b> <b>methods,</b> like <b>open</b> discussions for features and requirements, the ability of the user community to participate in such discussions with the developer community, will benefit large corporate software development and customizations. In particular, we aim to document the ongoing efforts within Hewlett-Packard, to replicate the collaboration styles of <b>Open</b> Source <b>development</b> <b>methods</b> within a corporate setting. We report on the <b>development</b> of “Progressive <b>Open</b> Source, ” as defined at Hewlett-Packard, and the nature of network communities developed to support it. We formulate and describe a study aimed at describing the fostering of such networked communities within Hewlett-Packard. While the study is in progress, early results indicate the positive influence of Progressive Open Source in creating diverse networking groups within the company...|$|R
40|$|The Software Product Line {{strategy}} resorts {{often on}} a platform team, being responsible for the core assets. A central problem is that this platform team becomes a bottleneck in the development organization, as conflicting requirements are asked for by many different core assets users. This presentation is about how <b>Open</b> Source <b>Development</b> <b>Methods</b> help to decouple product and platform teams. The idea is that working in an Open Source manner within the borders of a company gives {{the right amount of}} flexibility to each product team, while allowing the platform team to focus on the long term business targets and build a sustainable set of core assets...|$|R
40|$|Agile {{software}} <b>development</b> <b>methods</b> (ASD) and <b>open</b> source software <b>development</b> <b>methods</b> (OSSD) are {{two different}} approaches which were introduced in last decade {{and both of them}} have their fanatical advocators. Yet, it seems that relation and interface between ASD and OSSD is a fertile area and few rigorous studies have been done in this matter. Major goal of this study was assessment of the relation and integration of ASD and OSSD. Analyzing of collected data shows that ASD and OSSD are able to support each other. Some practices in one of them are useful in the other. Another finding is that however there are some case studies using ASD and OSSD simultaneously, but there is not enough evidence about comprehensive integration of them. Comment: 6 pages, 5 table...|$|R
40|$|Open Source {{software}} is competing successfully in many areas. The commercial sector is recognizing the benefits offered by <b>Open</b> Source <b>development</b> <b>methods</b> {{that lead to}} high quality software. Can these benefits be realized in specialized domains where expertise is rare? This study examined discussion forums of an Open Source project in a particular specialized application domain – electronic medical records – to see how development roles are carried out, and by whom. We found through a qualitative analysis that the core developers in this system include doctors and clinicians who also use the product. We {{also found that the}} size of the community associated with the project is an order of magnitude smaller than predicted, yet still maintains a high degree of responsiveness to issues raised by users. The implication is that a few experts and a small core of dedicated programmers can achieve success using an Open Source approach in a specialized domain...|$|R
40|$|Abstract: The {{prominent}} role of software in nanotechnology research and <b>development</b> suggests that <b>open</b> source <b>development</b> <b>methods</b> might offer advantages in improving reliability, performance and accessibility. Open source approaches have shown {{new opportunities for}} voluntary cooperation to create and improve complex software. Suitable software licenses {{could be used to}} promote access, compatibility and sharing of improvements. Many companies currently associated with nanotechnology produce materials, equipment, and research and development services, all of which could support open source business models; however no company yet emphasizes an open source strategy. Some molecular modeling software is already open source or public domain. Software for molecular engineering constitutes an important opportunity for open sourcing, especially if systems architectures encouraging collaboration can be further developed. Analysis suggests that the net impact of open sourcing would be to enhance safety. Initiatives for open sourcing of molecular nanotechnology could be strengthened by coalition building, and appropriate strategies for open source licensing of copyrights an...|$|R
40|$|We {{describe}} the Open Mind Initiative, {{a framework for}} building intelligent systems collaboratively over the internet, and focus on one of its simpler component projects, Open Mind Animals. The Initiative extends traditional <b>open</b> source <b>development</b> <b>methods</b> by allowing non-expert netizens to contribute informal data over the internet. Such data is used to train classifiers or guide automatic inference systems, and thus {{it is important that}} only data of high accuracy and consistency be accepted. We identify a number of possible sources of poor data in Animals [...] - several of which are generic and applicable to a range of open data collection projects [...] - and implement a system of software modules for automatically and semi-automatically preventing poor data from being accepted. Our system, tested in a controlled laboratory intranet, filters faulty data through a variety of mechanisms and leads to accurate decision tree classifiers. Our reusable modules can be employed in our planned large-scale internet deployment of Animals and other Open Mind projects...|$|R
40|$|The Open Mind Initiative is an {{internet}} based collaborative framework for constructing intelligent systems. Open Mind extends traditional <b>open</b> source <b>development</b> <b>methods</b> by allowing non-expert "netizens" to contribute informal data {{by means of}} interactive queries presented on web browsers. Since this data is used to train classifiers or guide automatic inferencing systems, {{it is important to}} accept data of high quality and consistency and reject data of low quality. We identify a number of forms of lowquality data from unreliable contributors to a specific Open Mind demonstration program, Animals, as well as in a broad class of pattern recognition projects. We tested several software modules that automatically or semiautomatically reduce the e#ects of poor data in Animals. We also discuss a number of techniques for ensuring data quality that can be tailored to generic pattern recognition and artificial intelligence projects. These techniques possess parameters that can be set to give the optimal balance between data quality and data quantity to give the fastest improvement of the system...|$|R
40|$|The Open University of the Netherlands uses {{since its}} {{start in the}} early 1980 's {{computers}} to support its own organization {{as well as to}} enhance the learning experience of its students. Over the years all different kinds of hardware and software platforms have been used. But there has always been one common denominator; all software used was closed, proprietary software. This included all the software which was developed in house or by subcontractors. The technology development programme of OTEC recently expressed an interest in looking into other kinds of software like non-closed, non-proprietary software. This kind of software is generally referred to as 'Free Software' or as 'open source software'. But new ideas inevitably bring new misconceptions with them. Many people have different perceptions on the ideas behing free software or open source software. This report will try to clarify these issues by clearly defining and explaining these terms. Furthermore it will show {{the advantages and disadvantages of}} the open source definition. It will also discuss the <b>open</b> source <b>development</b> <b>method,</b> called 'Bazaar style' and give criteria on when to choose or not to choose for open source. Finally, this report will look at the way the technology development programme benefits from open source software and <b>open</b> source <b>development...</b>|$|R
40|$|In {{this paper}} we present AeroSource, an {{initiative}} to bring <b>Open</b> Source Software <b>development</b> <b>methods</b> to internal software developers at The Aerospace Corporation. Within AeroSource, FreeBSD {{is used in}} several key roles. First, we run most of our tools on top of FreeBSD. Second, the ports collection (both official ports and custom internal ones) eases our administrative burden. Third, and most importantly the FreeBSD project serves as an example and role model for the results {{that can be achieved}} by an Open Source Software projects. We discuss the development infrastructure we have built for AeroSource based largely on BSD licensed software including FreeBSD, PostgreSQL, Apache, and Trac. We will also discuss our custom management tools including our system for managing our custom internal ports. Finally, we will cover our development successes and how we use projects like FreeBSD as exemplars of OSS development...|$|R
5000|$|Jiujiang <b>Open</b> <b>Development</b> Region, Gongqing <b>Open</b> <b>Development</b> Region ...|$|R
40|$|Abstract The {{subject matters}} {{in this study}} were <b>open</b> source {{software}} <b>development,</b> companies, business models and motivation. The intention {{of the study was to}} study profit oriented companies in order to identify and understand their business models and motivation for taking part in <b>open</b> source software <b>development</b> <b>methods.</b> As background research material I used articles available through the Oulu university library. I also interviewed and assessed several actual companies. In one of these companies I had worked in an <b>open</b> source software <b>development</b> project, two of the companies I interviewed face to face in Oulu, two other Finnish companies I e-mail interviewed. I also assessed a very successful foreign company in order to bring contrast to the Finnish companies. In order to assess the case companies I refined the software business model framework developed by Rajala, Rossi and Tuunainen (2003). I constructed themes under the components of the framework as advised by Hirsjärvi and Hurme in their book “Teemahaastattelu” from 1985. These themes contained some guiding questions that I posed to the interviewees in the case companies and then noted what they had to say about the subject themes and matters. The results of the study are that there are many kinds of business models that profit oriented firms can utilize in order to gather revenues from <b>open</b> source software <b>development</b> projects. Utilizing these models is also viable for firms of all sizes. Based on the study it is also clear that the easiest business model to pull off is the subscription based open source business model. In order to succeed with open source business models companies need to understand what actors there are on the open source field and how they affect development projects. It is vital for companies to understand what motivations drive these actors in <b>open</b> source <b>development</b> projects and how the companies can generate and benefit from those motivations. Future work should concentrate on integrating the motivation component to the framework...|$|R
40|$|<b>Open</b> <b>development</b> {{refers to}} the ways in which new Information and Communications Technologies (ICTs) {{transform}} modes of participation and production, human development processes and access to knowledge resources. <b>Open</b> <b>development,</b> however, is not well-defined and immanent developments have only recently begun to be categorised (Reilly and Smith, 2014). This means that there has been little exploration of <b>open</b> <b>development</b> in terms of its potential to influence intentional and existing development aid practices. This paper therefore intends to offer insight into how <b>open</b> <b>development</b> practices within relationships between donors and civil society organisations could be guided by an underlying information ethics. By considering the totality of relationships in an information environment, or the infosphere, <b>open</b> <b>development</b> may be more likely to ensure effective and inclusive human development outcomes...|$|R
40|$|Abstract. Look {{forward to}} the future, the {{development}} of software <b>development</b> <b>method</b> is inevitable. What are important factors to impact the development of software <b>development</b> <b>method?</b> After analysis, several important factors have been proposed, and they impact the development of software <b>development</b> <b>methods.</b> These important factors related {{to the content of}} the various existing software <b>development</b> <b>methods.</b> Based on profound and comprehensive analysis to variety existing software <b>development</b> <b>method,</b> these important factors have been proposed. In the future, if software developers want to improve and perfect the existing software <b>development</b> <b>methods,</b> or want to build a new software <b>development</b> <b>method,</b> then these important factors are some important issues which must be studied. The content of these important factors were discussed...|$|R
25|$|X.Org and XFree86 began {{discussing}} a reorganisation suited to properly nurturing {{the development of}} X. Jim Gettys had been pushing strongly for an <b>open</b> <b>development</b> model since at least 2000. Gettys, Packard and several others began discussing in detail the requirements for the effective governance of X with <b>open</b> <b>development.</b>|$|R
5000|$|... #Caption: Traditional [...] "Waterfall" [...] or Sequential <b>Development</b> <b>Method</b> vs. Iterative <b>Development</b> <b>Method</b> in {{concurrent}} engineering.|$|R
5000|$|User {{programmability}} using Eclipse-based IDE and RAVE <b>open</b> <b>development</b> language ...|$|R
25|$|Also in 2010 AVST {{introduced}} UCConnect™, an <b>open</b> <b>development</b> {{environment for}} applications.|$|R
40|$|Part 15 : NotesInternational audienceOpen {{development}} is the public, networked sharing of communication and information resources towards a process of positive social transformation. <b>Open</b> <b>development</b> likewise imposes a challenge, because new actors, practices and problems of inequality are introduced. Accountability at its core is meant to redress issues of power and inequality [1], thus offering potential to improve <b>open</b> <b>development</b> processes and initiatives. However, the distinct and innovative characteristics of open processes render some concepts of accountability inadequate. This article compares three purposes and perspectives on accountability for their relevance to <b>open</b> <b>development.</b> The purpose {{of which is to}} suggest future areas of research and theoretical development in this field...|$|R
40|$|Part 5 : Section 4 : Citizens’ Involvement, Citizens’ Rights and ICTInternational audienceOpen {{development}} has been conceptualised as initiatives that use information technology to foster citizen participation and freedom of debate in development projects. The Internet has brought hope that citizens would {{have an opportunity to}} organise campaigns, thus fostering democracy. These possibilities face a number of obstacles. Analysing case evidence from Iran, this study explores how institutions have influenced the forms of appropriation of Internet tools in initiatives intended to enable <b>open</b> <b>development.</b> The paper contributes to our understanding of institutional mechanisms for controlling and constraining <b>open</b> <b>development</b> initiatives, and the relevance of institutional environments when planning <b>open</b> <b>development</b> projects...|$|R
5000|$|<b>Development</b> <b>methods</b> {{exist on}} a {{continuum}} from adaptive to predictive. Agile software <b>development</b> <b>methods</b> lie on the adaptive side of this continuum.One key of adaptive <b>development</b> <b>methods</b> is a [...] "Rolling Wave" [...] approach to schedule planning, which identifies milestones but leaves flexibility in the path to reach them, and also allows for the milestones themselves to change.|$|R
40|$|In {{this paper}} {{we argue that}} {{software}} <b>development</b> <b>methods</b> represent theories {{on how best to}} engage the impressively complex and inherently socio-technical activity of making software. To help illustrate our points we draw on examples of three software methods: the waterfall approach, packages software development and free/libre and <b>open</b> source software <b>development,</b> In doing this, we highlight that software <b>development</b> <b>methods</b> reflect – too often implicitly – theories of (1) how people should behave, (2) how groups of people should interact, (3) the tasks that people should do, (4) the order of these tasks, (5) the tools needed to achieve these tasks, (6) the proper outcomes of these tasks, (7) the means to make this all happen, and, (8) that these relations among concepts are further set in specific contexts. We conclude by highlighting three trends in conceptualizing these eight elements. 1 Methods as Theories: Evidence and Arguments for Theorizing on Software Development Through this paper we argue that software <b>development</b> <b>methods</b> are vehicles for theorizing on the impressively complex and inherently socio-technical activity of making software work. W...|$|R
40|$|This paper {{departs from}} the {{observation}} that empirical and conceptual frame-works describing the intersection of new technology and development studies have begun to embrace the idea of <b>open</b> <b>development.</b> Frameworks for re-search, however, continue to reºect older notions of technology appropriation and empowerment. In order to start a dialogue about research design appro-priate to <b>open</b> <b>development,</b> I {{provide an overview of}} key ontological, epistemological, and methodological considerations of signiªcance to this ªeld. An <b>open</b> <b>development</b> approach, I argue, should focus on enhancing cognitive justice rather than productivity or empowerment. This can best be carried out through the application of a constructivist and critical realist episte-mology, through positional methodology and through networked research processes...|$|R
5000|$|Data Revolution - have 3 {{dominant}} aspects: Big <b>development</b> data, <b>Open</b> <b>development</b> data, Real Time development data.|$|R
50|$|This {{enables the}} {{creation}} of <b>development</b> <b>methods</b> suitable for any development situation. Each system development starts then, with a method definition phase where the <b>development</b> <b>method</b> is constructed on the spot.|$|R
50|$|MOAP(L) is {{supported}} by Linux-based phones from Panasonic and NEC. MOAP(L) is also not an <b>open</b> <b>development</b> platform.|$|R
40|$|Abstract. Commercial {{software}} {{firms are}} increasingly using {{and contributing to}} open source software. Thus, {{they need to understand}} and work with <b>open</b> source software <b>development</b> processes. This paper investigates whether the practice of continuous integration of agile software <b>development</b> <b>methods</b> has had an impact on open source software projects. Using fine-granular data from more than 5000 active open source software projects we analyze the size of code contributions over a project’s life-span. Code contribution size has stayed flat. We interpret this to mean that <b>open</b> source software <b>development</b> has not changed its code integration practices. In particular, within the limits of this study, we claim that the practice of continuous integration has not yet significantly influenced the behavior of open source software developers. ...|$|R
40|$|Land use {{adjacent}} to waterways, such as development or agriculture, alters hydrological patterns leading {{to increases in}} runoff and nutrient input. Forests and wetlands, as natural land cover types, reduce water movement and allow infiltration into soil. We measured algal biomass and diversity in order to quantify the influence neighboring land cover types have on streams in Northeastern Indiana. In the study area, cultivated crops were the dominant land cover type, with <b>open</b> <b>development</b> and deciduous forest following. Emergent wetland area had the greatest influence on algal biomass, with increases in wetland area decreasing biomass. However, <b>open</b> <b>development,</b> low intensity development, grassland, shrub, and forested wetlands added to increases in biomass. Conversely, forested wetlands reduced algal richness, while <b>open</b> <b>development</b> and pastures increased richness. Because <b>open</b> <b>development</b> (i. e. dominated by turf grass, lawns, parks, golf courses) was {{the second most common}} land cover type and positively influenced both algal biomass and richness, management of those properties will likely have direct impact on nutrient flow into streams. Additionally, adding functional wetlands dominated by emergent herbaceous plants will directly impact future algal biomass...|$|R
40|$|The {{telecommunications}} Operations Support Systems {{supply chain}} must address many stakeholders: R&D, Product and Requirements Management, Purchasing, Systems Integration, Systems Administration and Users. While {{the management of}} next generation networks and services poses significant technical challenges, the present supply chain, market configuration, and business practices of the OSS community are an obstacle to rapid innovation. Forums for <b>open</b> <b>development</b> could potentially provide a medium to shorten this supply chain for the deployment of workable systems. This paper discusses the potential benefits and barriers to the <b>open</b> <b>development</b> of OSS for the telecommunications industry. It proposes the use of action research to execute a feasibility study into the <b>open</b> <b>development</b> of OSS software solutions within an industry wide Open OSS project...|$|R
5000|$|Rodin (Rigorous <b>Open</b> <b>Development</b> Environment for Complex Systems) is an {{extension}} of Eclipse IDE (Java based).Rodin Eclipse Builder coordinates: ...|$|R
5000|$|... 2015 - Mudgeeraba Old Post Office - a fully fledged Council {{supported}} {{space for}} <b>open</b> <b>development,</b> creative minds and education.|$|R
40|$|This Technical Specification {{is being}} {{developed}} {{in accordance with the}} UN/CEFACT/TRADE/ 22 <b>Open</b> <b>Development</b> Process. It has been approved by the eBTWG Core Component Project Team for final eBTWG release for comment as defined in Step 4 of the <b>Open</b> <b>Development</b> Process. This document contains information to guide in the interpretation or implementation of ebXML concepts. Distribution of this document is unlimited. The document formatting is based on the Internet Society’s Standard RFC format...|$|R
50|$|In June 2013 Ubisoft {{announced}} <b>open</b> <b>development</b> with community. Limbic Entertainment team {{along with}} Ubisoft Chengdu were announced as game developers.|$|R
40|$|<b>Development</b> <b>methods</b> for (sequential) {{programs}} that run in isolation {{have been studied}} elsewhere. Programs that run in parallel can interfere with each other, either via shared storage or by sending messages. Extensions to earlier <b>development</b> <b>methods</b> are proposed for the rigorous development of interfering programs. In particular, extensions tothe specification method based on postconditions that are predicates oftwo states and the <b>development</b> <b>methods</b> of operation decomposition a d data refinement are proposed...|$|R
