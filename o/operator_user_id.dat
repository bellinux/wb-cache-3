0|1254|Public
5000|$|The saved <b>user</b> <b>ID</b> (...) is {{used when}} a program running with {{elevated}} privileges needs to temporarily do some unprivileged work: it changes its effective <b>user</b> <b>ID</b> from a privileged value (typically root) to some unprivileged one, and this triggers {{a copy of}} the privileged <b>user</b> <b>ID</b> to the saved <b>user</b> <b>ID</b> slot. Later, it can set its effective <b>user</b> <b>ID</b> back to the saved <b>user</b> <b>ID</b> (an unprivileged process can only set its effective <b>user</b> <b>ID</b> to three values: its real <b>user</b> <b>ID,</b> its saved <b>user</b> <b>ID,</b> and its effective user ID—i.e., unchanged) to resume its privileges.|$|R
40|$|Abstract (our paper) How do users behave if {{they can}} tag each other in social networks? In this paper, we answer this {{question}} by studying the interactive tagging network constructed by Twitter lists. Twitter lists {{can be regarded as}} the tagging process; a user (i. e., tagger) creates a list with a name (i. e., tag) and adds other users (i. e., tagged users) into the list. This tagging network is by nature different from the resource tagging networks (e. g., Flickr and Delicious) because users on this network can tag each other. We address the following research questions: (RQ 1) What is the common patterns and the difference between the interactive tagging network and the resource tagging networks? (RQ 2) Do users tag each other on the interactive tagging network? And if so, to what extent? (RQ 3) What is {{the difference between the two}} types of relationships on Twitter: who-tags-whom and who-follows-whom? By quantitatively studying million-scale networks, we found the pervasive patterns across the different tagging networks, and the interactive patterns within the interactive tagging network. This study sheds light on the underlying characteristics of the interactive tagging network, which is relevant to the social scientists and the system designers of the tagging systems. Data twitter. seed. users: The first column is the <b>user</b> <b>id,</b> and the second column is the json of the user objects on Twitter. This is the set of 1 million seed users to collect the following data. twitter. tagging. network: The first column is the source <b>user</b> <b>id</b> (from <b>user</b> <b>id),</b> the second column is the destination <b>user</b> <b>id</b> (to <b>user</b> <b>id),</b> the third column is the tag (i. e. slug or list name), and the fourth column is the list id. twitter. tagging-out-going-from-seed-users. network: The first column is the source <b>user</b> <b>id</b> (from <b>user</b> <b>id),</b> the second column is the destination <b>user</b> <b>id</b> (to <b>user</b> <b>id),</b> the third column is the tag (i. e. slug or list name), and the fourth column is the list id. This is only the out-going edges from the seed users, i. e., this is a subset of twitter. tagging. network. twitter. following. network: The first column is the source <b>user</b> <b>id</b> (from <b>user</b> <b>id),</b> and the second column is the destination <b>user</b> <b>id</b> (to <b>user</b> <b>id).</b> twitter. following-closed-seed-users. network: The first column is the source <b>user</b> <b>id</b> (from <b>user</b> <b>id),</b> and the second column is the destination <b>user</b> <b>id</b> (to <b>user</b> <b>id).</b> This is not used in the following publication paper, but will be useful in other studies. Publication This data set was created for our study. If you make use of this data set, please cite: Yuto Yamaguchi, Mitsuo Yoshida, Christos Faloutsos, Hiroyuki Kitagawa. Patterns in Interactive Tagging Networks. Proceedings of the Ninth International AAAI Conference on Web and Social Media (ICWSM- 15). pp. 513 - 522, 2015. [URL] Code Our code outputting experiment results made available at: [URL]...|$|R
50|$|When {{the command}} is used without specifying the new <b>user</b> <b>id</b> as a command line argument, it {{defaults}} {{to using the}} superuser account (<b>user</b> <b>id</b> 0) of the system.|$|R
50|$|A user {{namespace}} {{contains a}} mapping table converting <b>user</b> <b>IDs</b> from the container's {{point of view}} to the system's point of view. This allows, for example, the root user to have <b>user</b> <b>id</b> 0 in the container but is actually treated as <b>user</b> <b>id</b> 1,400,000 by the system for ownership checks. A similar table is used for group id mappings and ownership checks.|$|R
5000|$|The {{ability to}} permit files, {{not just to}} other <b>user</b> <b>IDs</b> and {{projects}} (aka groups), but to specific commands or programs and combinations of <b>user</b> <b>IDs,</b> projects, commands and programs.|$|R
30|$|To better {{understand}} the pattern of outside crawlers’ algorithms, we publicize all forum contents without requiring a valid <b>user</b> <b>ID</b> and password for authentication. As we remove the <b>user</b> <b>ID</b> authentication requirement, we use the IP address of each visit to replace the <b>user</b> <b>ID</b> in each URL marker. The website is released in one month period. We select the crawlers’ logs that can be manually verified by checking the User-Agent field or IP address(Google).|$|R
50|$|The set <b>user</b> <b>ID,</b> setuid, or SUID mode. When a {{file with}} setuid is executed, the {{resulting}} process will assume the effective <b>user</b> <b>ID</b> {{given to the}} owner class. This enables users to be treated temporarily as root (or another user).|$|R
50|$|In a Unix-like system, each user has a <b>user</b> <b>ID</b> number, {{which is}} what the kernel uses to {{distinguish}} users and to manage <b>user</b> permissions. <b>User</b> <b>ID</b> #0 is reserved as the superuser account, and is given permission to do anything on the system.|$|R
50|$|The System/34 sign on {{looked like}} this: * SIGN ON W1 * <b>USER</b> <b>ID.........</b> ________ * PASSWORD........ ____ * MENU (OPTIONAL). ______ * LIBRARY......... ________ The PROF ("Profile") {{procedure}} {{was used to}} work with <b>User</b> <b>IDs</b> and passwords. The user profile contains a 1-to-8 character alphanumeric <b>User</b> <b>ID,</b> a 4 character alphanumeric password, a code for the user's security rating—M (Master Security Officer), S (Security Officer), O (System Operator), C (Subconsole Operator), or D (Display Station Operator) -- {{and a number of}} other default settings.|$|R
50|$|The <b>User</b> <b>ID</b> of the file's owner.|$|R
40|$|SIGUCCS 2 ̆ 715 : ACM SIGUCCS Annual Conference : St. Petersburg, FL, USA : November 09 - 13, 2015 In Kyushu University, a {{traditional}} 2 ̆ 2 Student ID 2 ̆ 2 based on student number assigned by Student Affairs Department {{had been used}} as the <b>user</b> <b>ID</b> of various IT services for a long time. There were some security and usability concerns using Student <b>ID</b> as a <b>user</b> <b>ID.</b> Since Student ID {{was used as the}} e-mail address of the student, it was easy to leak outside. Student ID is constructed based on a department code and a serial number, so guessing other ID strings from one ID is easy. Student ID is issued at the day of the entrance ceremony, so it is not usable for pre-entrance education. Student ID will change when the student moves to another department or proceeds from undergraduate to graduate school, so he/she loses personal data when Student ID changes. To solve these problems, Kyushu University decided to introduce another unchanging <b>user</b> <b>ID</b> independent from Student ID. This paper reports the design of new <b>user</b> <b>ID,</b> ID management system we are using, and the effect of introduction of new <b>user</b> <b>ID...</b>|$|R
25|$|Under Unix, every running {{program has}} an {{associated}} <b>user</b> <b>id,</b> which normally {{corresponds to the}} user that started the process. This id largely dictates the actions permitted to the program. No outside process can change the <b>user</b> <b>id</b> of a running program. A Hurd process, on the other hand, runs under a set of <b>user</b> <b>ids,</b> which can contain multiple ids, one, or none. A sufficiently privileged process can add and remove ids to another process. For example, there is a password server that will hand out ids {{in return for a}} correct login password.|$|R
5000|$|Linux {{also has}} a file system <b>user</b> <b>ID</b> (...) which is used {{explicitly}} for access control to the file system. It matches the [...] unless explicitly set otherwise. It may be root's <b>user</b> <b>ID</b> only if , , or [...] is root. Whenever the [...] is changed, the change is propagated to the [...]|$|R
5000|$|Windows NT domain {{controller}} (i.e., <b>User</b> <b>ID</b> and password verification) ...|$|R
5000|$|Ticket-issuing SAP {{system must}} be able to {{recognize}} <b>user's</b> <b>ID.</b>|$|R
30|$|The first {{table is}} “Extended Access Log Table”, which saves all {{extended}} access logs. It has six columns: Log <b>ID,</b> <b>User</b> <b>ID,</b> <b>User</b> IP, URL, URL marker, and timestamp. For our online forum, whenever the main controller confirms the current <b>user</b> <b>ID</b> {{is not known}} crawler, PathMarker inserts one entry into this table.|$|R
5000|$|During the South Korean presidential election, 2012, {{an agent}} of South Korean National Intelligence Service, known by her last name Kim, created {{multiple}} <b>user</b> <b>IDs</b> in Todayhumor website and posted articles and comments. South Korean Police confirmed that she had signed up for 16 <b>user</b> <b>IDs</b> and made 288 clicks to express support or opposition to articles in Todayhumor. [...] They also confirmed that she posted articles to Todayhumor on politically sensitive topics including Jeju-do Naval Base and Four Major Rivers Project. Subsequently, the police announced that 5 <b>user</b> <b>IDs</b> out of 16 were used by others.|$|R
5000|$|HTTP page content {{including}} page title, <b>user</b> <b>ID,</b> and transaction values ...|$|R
5000|$|UNIX-style file modes, <b>user</b> <b>ids</b> {{and group}} ids, and file {{timestamps}} ...|$|R
5000|$|<b>User</b> <b>id</b> and {{password}} {{maintained in}} an encrypted file by OS 2200 ...|$|R
50|$|Zombie cookies {{allow the}} web traffic {{tracking}} companies to retrieve {{information such as}} previous unique <b>user</b> <b>ID</b> and continue tracking personal browsing habits. When the <b>user</b> <b>ID</b> is stored outside of a single browser's cookie storage, such as in a header injected by the network into HTTP requests, zombie cookies can track users across browsers on the same machine.|$|R
5000|$|<b>User</b> <b>ID</b> (10.5238/0-9a-zA-Z_.# (...) {2-32}): Identifies a user using {{a string}} of 2-32 {{alphanumeric}} and selected special characters (illustrated here with PERL syntax). A User is primarily an administrative concept that is subordinate to Parties (from whom they inherit access rights). Unlike the other EIDR DOIs, the <b>User</b> <b>ID</b> can only be used within EIDR (e.g. programming APIs).|$|R
5000|$|Identification and {{verification}} of a <b>user</b> via <b>user</b> <b>id</b> and password check (authentication) ...|$|R
5000|$|... field 5: the <b>user</b> <b>ID</b> string, {{variable}} length, terminated with a null (0x00) ...|$|R
5000|$|SAP NetWeaver Application Server authenticates <b>user,</b> with <b>user</b> <b>ID</b> and {{password}} for example.|$|R
30|$|The {{database}} userMetaDb {{will later}} {{be used to}} attract <b>user</b> <b>id,</b> and <b>user</b> names.|$|R
5000|$|All users {{shall have}} a unique <b>user</b> <b>ID</b> based on a {{standard}} naming convention ...|$|R
5000|$|A formal {{authorization}} process {{shall be}} defined and followed for provisioning of <b>user</b> <b>IDs.</b>|$|R
40|$|This release {{includes}} two new command line options and similarly named Twarc methods: friend_ids and follower_ids. You {{can use them}} to lookup <b>user</b> <b>ids</b> for accounts that follow a given Twitter <b>user,</b> or <b>user</b> <b>ids</b> for accounts that a given Twitter user follows. % twarc. py [...] follower_ids HillaryClinton > followers. txt or % twarc. py [...] friend_ids HillaryClinton > friends. tx...|$|R
50|$|The SECEDIT {{procedure}} {{was used to}} work with <b>User</b> <b>IDs</b> and passwords. The user profile contains a 1-to-8 character alphanumeric <b>User</b> <b>ID,</b> a 4 character alphanumeric password, a code for the user's security rating - M (Master Security Officer), S (Security Officer), O (System Operator), C (Subconsole Operator), or D (Display Station Operator) - {{and a number of}} other default settings.|$|R
40|$|UserFS {{provides}} egalitarian OS {{protection mechanisms}} in Linux. UserFS allows any user—not just the system administrator—to allocate Unix <b>user</b> <b>IDs,</b> to use chroot, {{and to set}} up firewall rules in order to confine untrusted code. One key idea in UserFS is representing <b>user</b> <b>IDs</b> as files in a /proc-like file system, thus allowing applications to manage <b>user</b> <b>IDs</b> like any other files, by setting permissions and passing file descriptors over Unix domain sockets. UserFS addresses several challenges in making <b>user</b> <b>IDs</b> egalitarian, including accountability, resource allocation, persistence, and UID reuse. We have ported several applications {{to take advantage of}} UserFS; by changing just tens to hundreds of lines of code, we prevented attackers from exploiting application-level vulnerabilities, such as code injection or missing ACL checks in a PHP-based wiki application. Implementing UserFS requires minimal changes to the Linux kernel—a single 3, 000 -line kernel module—and incurs no performance overhead for most operations, making it practical to deploy on real systems. ...|$|R
5000|$|CICS --> WAS : CICS can assert its region ID or the {{application}} <b>user</b> <b>ID</b> ...|$|R
50|$|Causes {{the server}} to log the {{specified}} information {{as the current}} <b>user</b> <b>id</b> without login.|$|R
5000|$|SIGN ON W1 [...] <b>User</b> <b>ID.........</b> ________ Password........ ____ Menu (Optional). ______ Library......... ________ Procedure....... ________ ...|$|R
5000|$|User {{identity}} management integration (by binding <b>user</b> <b>IDs</b> to IP or MAC addresses for [...] "reputation") ...|$|R
3000|$|..., {{a dynamic}} <b>user</b> <b>ID</b> named as CIDi {{is created by}} the smart card based on the nonce value nu instead of using the <b>user’s</b> own <b>ID.</b> This helps to {{withstand}} the ID-theft attack and also preserves {{the privacy of the}} user.|$|R
