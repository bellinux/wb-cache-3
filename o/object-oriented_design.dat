1444|925|Public
5|$|During the game's development, {{the team}} lacked artists. The art {{director}} at Epic Games, Shane Caudle, and the artists at Digital Extremes {{could not make}} enough new textures because {{of the amount of}} diversity in characters and maps. In order to supplement the skin and texture production, Epic turned to contract artist Steve Garofalo. The game's level and content management program, UnrealEd, was written in Visual Basic and considered buggy, but no one had time to fix it. The game engine had an <b>object-oriented</b> <b>design,</b> and the scripting language, UnrealScript, was considered to be more like Java. The modularity of the <b>object-oriented</b> <b>design</b> meant that programmers could make large changes without affecting other parts of the game. Other tools used during development included Microsoft Visual Studio and 3D Studio Max. All of the weapon sound effects were created by Sonic Mayhem. The soundtrack for the game, which employed the system of module files, was written by Alexander Brandon, Michiel van den Bos, Andrew Sega, Dan Gardopee and Peter Hajba.|$|E
25|$|Already {{present at}} this stage of {{development}} were many of the features familiar in later releases of Ruby, including <b>object-oriented</b> <b>design,</b> classes with inheritance, mixins, iterators, closures, exception handling and garbage collection.|$|E
2500|$|... 2000. Squeak: <b>Object-Oriented</b> <b>Design</b> with Multimedia Applications.|$|E
40|$|AbstractThis article {{presents}} a mathematical characterization of object-oriented concepts by defining an observation-oriented semantics for a relational object-based language {{with a rich}} variety of features including subtypes, visibility, inheritance, type casting, dynamic binding and polymorphism. The language {{can be used to}} specify <b>object-oriented</b> <b>designs</b> as well as programs. We present a calculus that supports both structural and behavioural refinement of <b>object-oriented</b> <b>designs.</b> The design calculus is based on the predicate logic in Hoare and He's Unifying Theories of Programming (UTP) ...|$|R
40|$|The {{goals of}} {{exception}} handling mechanisms are to make programs more reliable and robust. The integration of exception handling mechanisms with object-oriented languages raises some unique issues. The requirements of exception handling often conflict {{with some of}} the goals of <b>object-oriented</b> <b>designs,</b> such as supporting design evolution, functional specialization, and abstraction for implementation transparency. This paper demonstrates these conflicts, illustrates that the use of exception handling in object-oriented systems poses potential pitfalls, and suggests that their resolution {{is one of the first}} steps necessary to make exception handling robust in <b>object-oriented</b> <b>designs</b> and languages...|$|R
40|$|This paper {{describes}} an approach for modeling the behavioral characteristics of concurrent <b>object-oriented</b> <b>designs</b> using the Petri net formalism. Specifically, this paper {{describes an}} approach for integrating colored Petri nets with concurrent object architecture designs created with the COMET method and specified in the Unified Modeling Language (UML). This work {{is part of an}} on-going effort to automate the behavioral analysis of concurrent and real-time <b>object-oriented</b> software <b>designs...</b>|$|R
50|$|OIS uses an <b>Object-oriented</b> <b>design.</b>|$|E
5000|$|... 2000. Squeak: <b>Object-Oriented</b> <b>Design</b> with Multimedia Applications.|$|E
5000|$|LePUS3 (a visual, <b>object-oriented</b> <b>design</b> {{description}} language) ...|$|E
40|$|Abstract. This paper {{develops}} a mathematical characterisation of object-oriented concepts by defining an observation-oriented semantics for an object-oriented language (OOL) {{with a rich}} variety of features including subtypes, visibility, inheritance, dynamic binding and polymorphism. The language is expressive enough for the specification of <b>object-oriented</b> <b>designs</b> and programs. We also propose a calculus based on this model to support both structural and behavioural refinement of <b>object-oriented</b> <b>designs.</b> We take {{the approach of the}} development of the design calculus based on the standard predicate logic in Hoare and Heâ€™s Unifying Theories of Programming (UTP). We also consider object reference in terms of object identity as values and mutually dependent methods...|$|R
40|$|Current diagramming {{techniques}} {{for the development}} and documentation of <b>object-oriented</b> <b>designs</b> largely emphasize capturing relationships among classes. Such techniques cannot capture full designs because the static nature of class relationships makes them inadequate for describing the dynamics of object collaboration. Other techniques attempt to diagram dynamic behavior but are limited by their media to producing essentially passive description of dynamic operations. What is still needed is a technique that models message ordering, changing visibility and temporal object lifetimes {{in a manner that}} is concise and immediate. We have developed an approach in which developers use animation to develop and capture <b>object-oriented</b> <b>designs.</b> This allows developers to <b>design</b> <b>object-oriented</b> scenarios in the way that they visualize them: by animating the actions of the objects in the scenario. The same animation then acts as the documentation for the design. Its playback makes immediately eviden [...] ...|$|R
40|$|Reorganization {{of classes}} for {{object-oriented}} programming and <b>object-oriented</b> database <b>design</b> has recently received considerable {{attention in the}} literature. In this paper a small set of primitive transformations is presented which forms an orthogonal basis for object-preserving class reorganizations. This set is proven to be correct, complete, and minimal. The primitive transformations help form a theoretical basis for class organization and are {{a powerful tool for}} reasoning about particular organizations. Keywords: <b>Object-oriented</b> programming and <b>design,</b> <b>object-oriented</b> database <b>design,</b> class library organization. 1 Introduction Reorganization of classes for object-oriented programming and <b>object-oriented</b> database <b>design</b> has recently received considerable attention in the literature: [BCG + 87], [LBSL 90], [LBSL 91], [AH 87], [BMW 86], [Cas 89], [Cas 90], [LM 91], [Pir 89], [PW 89]. A number of researchers have suggested algorithms and hueristics to produce "good" class organizations. A [...] ...|$|R
5000|$|... #Subtitle level 3: Input (sources) for <b>object-oriented</b> <b>design</b> ...|$|E
5000|$|... #Subtitle level 3: Output (deliverables) of <b>object-oriented</b> <b>design</b> ...|$|E
5000|$|Ability to use true <b>object-oriented</b> <b>design</b> for {{programming}} pages and controls ...|$|E
50|$|His {{research}} interests are <b>object-oriented</b> analysis and <b>design,</b> <b>object-oriented</b> metrics, agent-oriented methodologies, and {{the migration of}} organizations to object technology.|$|R
40|$|Object-Z {{offers an}} {{object-oriented}} means for structuring formal specifications. We investigate {{the application of}} refactoring rules to add and remove structure from such specifications to forge <b>object-oriented</b> <b>designs.</b> This allows us to tractably move from an abstract functional description of a system toward a lower-level design suitable for implementation on an object-oriented platform...|$|R
40|$|CS 302 is a {{continuation}} of CS 201 and emphasizes concepts of <b>object-oriented</b> software <b>design.</b> Topics include inheritance, recursion, algorithm analysis, and <b>object-oriented</b> software <b>design</b> using data structures such as stacks, queues, and binary trees. This class has a laboratory component. Writing is a significant component of this course (QEP). Prerequisites: CS 20...|$|R
5000|$|... 1992. IDEF4 <b>object-oriented</b> <b>design</b> method report. Armstrong Laboratory, Air Force Systems Command.|$|E
50|$|IDEF4, or Integrated DEFinition for <b>Object-Oriented</b> <b>Design,</b> is an <b>object-oriented</b> <b>design</b> {{modeling}} {{language for}} the design of component-based client/server systems. It has been designed to support smooth transition from the application domain and requirements analysis models to the design and to actual source code generation. It specifies design objects with sufficient detail to enable source code generation.|$|E
50|$|An {{object-oriented}} {{operating system}} is an operating system that uses <b>object-oriented</b> <b>design</b> principles.|$|E
40|$|Mixin layers are a {{technique}} for implementing layered <b>object-oriented</b> <b>designs</b> (e. g., collaboration-based designs). Mixin layers {{are similar to}} abstract subclasses (mixin classes) but scaled to a multiple-class granularity. We describe mixin layers from a programming language viewpoint, discuss checking the consistency of a mixin layer composition, and analyze the language support issues involved...|$|R
50|$|Develop students' {{skill in}} <b>object-oriented</b> {{software}} <b>design</b> {{methods and data}} management systems.|$|R
50|$|The UCC is a monolithic, <b>object-oriented</b> toolset <b>designed</b> {{to simplify}} its maintenance.|$|R
5000|$|Metz, Sandi (September 5, 2012), Practical <b>Object-Oriented</b> <b>Design</b> in Ruby (First ed.), Addison-Wesley, ...|$|E
50|$|Metadata {{repositories}} can {{be designed}} as either an Entity-relationship model, or an <b>Object-oriented</b> <b>design.</b>|$|E
50|$|Its prototype-based <b>object-oriented</b> <b>design</b> was {{influenced}} by the Self and the Io programming languages.|$|E
5000|$|Develop students' {{skill in}} <b>object-oriented</b> {{software}} <b>design</b> {{methods and data}} management systems.|$|R
40|$|A {{semantic}} {{definition is}} given for instance-based pointer confinement (alias control); this provides {{a form of}} encapsulation suited to many <b>object-oriented</b> <b>designs.</b> A syntax-directed static analysis is defined and proved, using a compositional semantics, to imply semantic confinement. Previous work by the authors, reviewed here, shows that this notion of confinement ensures a strong information-hiding property...|$|R
40|$|Abstractâ€”The {{importance}} of {{low power consumption}} is widely acknowledged due to {{the increasing use of}} portable devices, which require minimizing the consumption of energy. Energy dissipation is heavily dependent on the software used in the system. Applying <b>design</b> patterns in <b>object-oriented</b> <b>designs</b> is a common practice nowadays. In this paper we analyze six design patterns and explore the effect of them on energy consumption and performance...|$|R
5000|$|Object-oriented databases, like CachÃ© or ConceptBase. They {{can save}} objects of an <b>object-oriented</b> <b>design.</b>|$|E
50|$|Present-day {{operating}} systems use <b>object-oriented</b> <b>design</b> principles for many {{components of the}} system, which includes protection.|$|E
5000|$|... (1) {{to study}} the methods for {{developing}} programs (specification methods, <b>object-oriented</b> <b>design,</b> structured programming algorithms, testing); ...|$|E
40|$|Servlets and JavaServer Pages {{provide the}} ability to {{dynamically}} generate web pages using the Java programming language. Among other benefits, the use of Java on the server-side allows the web developer to directly implement <b>object-oriented</b> <b>designs,</b> utilize multiple threads of execution, and employ JDBC to communicate with a database. This tutorial will introduce Servlets and JavaServer Pages through UML diagrams, code samples, and an example web application...|$|R
5000|$|... 1992. Book of {{object-oriented}} knowledge : <b>object-oriented</b> analysis, <b>design,</b> {{and implementation}} : {{a new approach}} to software engineering.|$|R
40|$|Developers {{have long}} used {{pictures}} to aid design activities {{and there has}} been a lot of interest in standard notations for design. We have developed delegation diagrams, a graphical notation that provides visual support for developing <b>object-oriented</b> <b>designs</b> and that makes the relationship between the requirements and the design explicit. We describe both the notation and tool support, and evaluate delegation diagrams using the cognitive dimensions of notations framework...|$|R
