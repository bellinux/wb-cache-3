0|342|Public
50|$|Resonate {{provides}} software, {{technology and}} services in three core areas; signalling control <b>software,</b> <b>operational</b> <b>software</b> and asset management products.|$|R
40|$|Software-configuration {{management}} {{activities are}} crucial to ensure the integrity of current <b>operational</b> <b>software</b> {{and the quality of}} new software either being developed at CERN or outsourced. The functionality of the present management system became insufficient with large maintenance overheads. In order to improve our situation, a new software-configuration management system has been set up. It is based on Razor R, a commercial tool, which supports the management of file versions and <b>operational</b> <b>software</b> releases, along with integrated problem-reporting capabilities. In addition to the basic tool functionality, automated procedures were custom-made for the installation and distribution of <b>operational</b> <b>software.</b> The system ensures that, at all times, the status and location of all deliverable versions are known, the state of shared objects is carefully controlled and unauthorized changes prevented. This paper outlines the reasons for selecting the chosen tool, the implementation of the system and the final goals achieved...|$|R
40|$|For some {{environmental}} science applications, Unmanned Aircraft Systems (UASs) are increasingly recognized for {{their capacity to}} collect remotely sensed data in a safer, more efficient and effective manner than is permitted with manned aircraft and satellite remote sensing platforms. To date, however, technological, human, and other challenges have constrained adoption of UASs in the environmental sciences. This study developed and tested a new UAS for an archetypical environmental science research group (stakeholder) composed of non-UAS experts. Specifically, this thesis: 1) Assessed the research and operational needs of the stakeholder to determine the optimum UAS platform; 2) Developed an Unmanned Aerial Vehicle (UAV) and sensor payload; 3) Developed a new software tool for UAV operation planning, control, and optimized data acquisition; and 4) Tested the operational performance of the newly developed UAS. ^ A powered paraglider {{was selected as the}} optimal UAV platform for the stakeholder. Development and testing of the UAS overcame many technical, human, and other challenges. A relatively stable and useful UAS with a 30 lb payload was engineered and appears {{to meet the needs of}} the stakeholder. A new scalable <b>operational</b> <b>software</b> tool was engineered that integrates operation planning, UAV and sensor specification, and map based real time flight optimization with a relational database. ^ An assessment of the Unmanned Aircraft System was performed by asking four different pilots, ranging in pilot skills from skilled to novice, to perform two flights (one unassisted and one assisted with the newly designed <b>operational</b> <b>software)</b> to best capture photographic coverage of an experimental area (200 x 400 meters) within a fifteen minute time limit). The capacity of the <b>operational</b> <b>software</b> to improve the spatial coverage of data acquisition was also assessed. Coverage of aerial photography was enhanced 4. 41 % to 35. 76 % when the <b>operational</b> <b>software</b> was used when compared to non software assisted flights, and the Unmanned Aerial Vehicle spent between 3. 75 % and 12. 29 % more time in the predefined sampling area when guided by the <b>operational</b> <b>software.</b> An experienced pilot outperformed inexperienced pilots but still benefitted from the guidance offered by the <b>operational</b> <b>software.</b> ...|$|R
5000|$|The {{next major}} update to the <b>operational</b> <b>software</b> was made under the Guidance Replacement Program. Autonetics (later {{acquired}} by The Boeing Co.) developed the necessary {{software for the}} new flight computer.|$|R
50|$|Figure 6 {{illustrates}} a modern automated thermometric titration {{system based on}} the Metrohm 859 Titrotherm interface module with Thermoprobe sensor, Metrohm 800 Dosino dispensing devices and a computer running the <b>operational</b> <b>software.</b>|$|R
40|$|Quantitative {{measures}} of reliability for <b>operational</b> <b>software</b> in embedded avionics computer systems are presented. Analysis {{is carried out}} on data collected during flight testing and from both static and dynamic simulation testing. Failure rate {{is found to be}} a useful statistic for estimating software quality and recognizing reliability trends during the <b>operational</b> phase of <b>software</b> development...|$|R
50|$|UrtheCast is a Vancouver-based Canadian {{company that}} will {{distribute}} the <b>operational</b> <b>software</b> {{for the first}} publicly accessible high definition cameras installed on the International Space Station. The company went public on the Toronto Stock Exchange in June 2013.|$|R
40|$|InterCell is an {{open and}} <b>operational</b> <b>software</b> suite for implementation, code {{generation}} and interactive simulation of fine grained parallel computational models. This article describes the software archi-tecture, some use cases from physics and cortical networks as well as first performance measurements...|$|R
50|$|Maintenance of <b>operational</b> <b>{{software}}</b> and {{the ability}} to test software and the simulation of selective air situations for the training of miliz military personnel (Swiss soldier usually are only part-time in Military 2-4 weeks every year, see Military of Switzerland).|$|R
40|$|Abstract. Performance {{engineering}} aims {{to demonstrate}} that the software being developed will meet the performance needs. The goal of robustness engineering is to prove that the system can function correctly in the presence of faults or stress conditions. From this point of view robustness engineering comprises performance engineering as a specific case of normal operational conditions. This shall allow to share the means for monitoring of a system's properties between performance and robustness engineering. Usually, performance analysis is done prior to or in parallel with the development of the <b>operational</b> <b>software</b> by modelling it representatively regarding performance. This paper describes an approach, called ISG (Instantaneous System and Software Generation), which allows to measure the performance and the robustness right {{from the beginning of the}} development until the very end when executing the <b>operational</b> <b>software</b> itself. ISG automates the development process, so that the required instrumentation can easily be inserted or removed, a capability which is a pre-condition to obtain performance and robustness figures from the <b>operational</b> <b>software.</b> Consequently, no additional models need to be established to analyse the non-functional properties of the software under development...|$|R
40|$|In this paper, {{we address}} the problem of {{preventive}} maintenance of <b>operational</b> <b>software</b> systems, an approach recently pro-posed to counteract the phenomenon of software “aging”. We consider the so-called “software rejuvenation ” technique [Soft-ware rejuvenation: analysis, module and applications, in: Proceedings of the 25 th International Symposium on Fault-Toleranc...|$|R
5000|$|EOI [...] - [...] Operational {{intelligence}} Enterprise <b>Operational</b> Intelligence <b>Software</b> ...|$|R
40|$|An <b>operational</b> <b>software</b> {{program is}} now {{available}} for deriving 'scaled surface reflectances' from spectral data collected by the Airborne Visible/Infrared Imaging Spectrometer (AVIRIS). The program simulates both the atmospheric scattering and absorption effects. Brief descriptions of the algorithm, inputs, outputs, {{the limitations of the}} software, and procedures for obtaining the software are given...|$|R
40|$|The {{tremendous}} {{benefits of}} taking a product line approach for similar software-intensive systems are well documented [Clements & Northrop 02 a]. What’s not as clear, however, is how to effectively achieve an <b>operational</b> <b>software</b> product line, often called product line adoption. The “Launching and Institutionalizing ” practice area of the Framework fo...|$|R
40|$|This work is {{motivated}} by the difficulty of representing Environmental domains in a functional way. We present a formalization approach covering both environmental and computational needs. It allows us to produce an <b>operational</b> <b>software</b> for intelligent decision support on a Horizontal Subsurface Constructed Wetlands (HSCW) while capturing the most significant elements of the domain. Peer ReviewedPostprint (published version...|$|R
40|$|Evidence {{suggests}} {{that only a}} small percentage of open source development (OSSD) projects are active, have significant participation, or have delivered <b>operational</b> <b>software.</b> We develop a system dynamics based simulation model to analyze the dynamics of open source project participation process and software development process. We show that the complex interaction between participation and development processes affects crucially success or failure. 1...|$|R
50|$|The POLYATOM System was {{the first}} package for ab initio {{calculations}} using Gaussian orbitals that was applied {{to a wide variety}} of molecules. It was developed in Slater's Solid State and Molecular Theory Group (SSMTG) at MIT using the resources of the Cooperative Computing Laboratory. The mathematical infrastructure and <b>operational</b> <b>software</b> were developed by Imre Csizmadia, Malcolm Harrison, Jules Moskowitz and Brian Sutcliffe.|$|R
50|$|MWRnet is {{a network}} {{established}} in 2009 of scientists working with ground-based microwave radiometers. MWRnet aims {{to facilitate the}} exchange of information in the MWR user community fostering the participation to coordinated international projects. In the long run, MWRnet’s mission aims at setting up <b>operational</b> <b>software,</b> quality control procedures, data formats, etc. similar to other successful networks such as EARLINET, AERONET, CWINDE.|$|R
5000|$|Storage for {{all three}} systems was 8 inch floppy drives made by [...] CDC, {{although}} 7502 was most often used without a floppy disk, as it could download its <b>operational</b> <b>software</b> from the mainframe over its serial communication line. This was referred as [...] "teleloading". <b>Operational</b> <b>software</b> {{was referred to as}} a Terminal Executive (TE), and would vary depending upon the functions required, mainframe connection and communications protocol employed. The TEs for standard protocols and functions were written and maintained by the Kidsgrove software team, but Letchworth Development Centre made a niche market of modifying TEs for special purposes. Variants for communication with IBM mainframes, X25 networks and the Counter Terminal System for Anglia Building Society and Local Government sector were examples. A separate development was the WORDSKIL word-processor system which was based upon 7502 hardware with dual or quadruple single-density floppy discs, portrait-format VDU and the Qume [...] "Daisy-wheel" [...] printer.|$|R
40|$|Software {{applications}} {{have become}} {{crucial to the}} aerospace industry, providing {{a wide range of}} functionalities and capabilities used during the design, manufacturing and support of aircraft. However, as this criticality increases, so too does the risk for business operations when facing a software failure. Hence, {{there is a need for}} new methodologies to be developed to support aerospace companies in effectively managing their software portfolios, avoiding the hazards of business disruption and additional costs. This paper aims to provide a definition of <b>operational</b> <b>software</b> maturity, and how this can be used to assess <b>software</b> <b>operational</b> behaviour, as well as a view on the different aspects that drive software maturity within the aerospace industry. The key research question addressed is, how can <b>operational</b> <b>software</b> maturity monitoring assist the aerospace industry in effectively managing large software portfolios? This question has been addressed by conducting an in depth review of current literature, by working closely with aerospace professionals and by running an industry case study within a major aircraft manufacturer. The results are a software maturity model composed of a set of drivers and a prototype tool used for the testing and validation of the research findings. By utilising these methodologies to assess the <b>operational</b> maturity of <b>software</b> applications in aerospace, benefits in maintenance activities and operations disruption avoidance have been observed, supporting business cases for system improvement. Paper originally presented at ICSM 2017 : 19 th International Conference on Software Maintenance, 18 - 19 September 2017, Rome, Italy...|$|R
5000|$|... • <b>Operational</b> Systems <b>Software</b> Efficiently {{coordinate}} {{business and}} operational processes for rapid design, creation, {{and delivery of}} services.|$|R
40|$|The {{commissioning}} {{and operations}} {{planning for the}} European Spallation Source is currently being defined. It is foreseen that the ESS will begin to deliver beam on target by mid 2019, something which is urging a well structured and thought through plan both for commissioning and operations. In this paper we will discuss the plans for beam physics <b>operational</b> <b>software,</b> priorities and software services needed during the different stages of beam commissioning...|$|R
40|$|We {{present an}} outline of a process by which <b>operational</b> <b>software</b> {{requirements}} specifications can be written for Formal Concept Analysis (FCA). The Z notation is used to specify the FCA model and the formal operations on it. We posit a novel approach whereby key features of Z and FCA can be integrated and put to work in contemporary software development, thus promoting operational specification as a useful application of conceptual structures. </p...|$|R
40|$|We will {{demonstrate}} the SHARED software, which contains an {{implementation of the}} Automated Interaction Design (AID) approach to dynamic creation of user interfaces. AID uses multiple agents, multiple models, and productive compositional processes to generate need-based user interfaces within a complex control domain. In addition to demonstrating <b>operational</b> <b>software</b> that responds to military interaction needs, we will present details of the underlying models and operations that support user interface generation in this domain...|$|R
40|$|International audienceThe {{originality}} of {{this work}} leads in tackling text compression using an unsupervised method, based on a deep linguistic analysis, and without resorting on a learning corpus. This work presents a system for dependent tree pruning, while preserving the syntactic coherence and the main informational contents, and led to an <b>operational</b> <b>software,</b> named COLIN. Experiment results show that our compressions get honorable satisfaction levels, with a mean compression ratio of 38 %...|$|R
40|$|Abstract. We {{present an}} outline of a process by which <b>operational</b> <b>software</b> {{requirements}} specifications can be written for Formal Concept Analysis (FCA). The Z notation is used to specify the FCA model and the formal operations on it. We posit a novel approach whereby key features of Z and FCA can be integrated and put to work in contemporary software development, thus promoting operational specification as a useful application of conceptual structures. ...|$|R
40|$|The {{originality}} of {{this work}} leads in tackling text compression using an unsupervised method, based on a deep linguistic analysis, and without resorting on a learning corpus. This work presents a system for dependent tree pruning, while preserving the syntactic coherence and the main informational contents, and led to an <b>operational</b> <b>software,</b> named COLIN. Experiment results show that our compressions get honorable satisfaction levels, with a mean compression ratio of 38 %. ...|$|R
40|$|The design, control, and {{reconstruction}} of the flight paths of all four Viking vehicles is presented. The specification of requirements on the flight hardware is described along with the navigation strategies, procedures, <b>operational</b> <b>software,</b> and the inflight navigation. Features of the Viking navigation discussed include the precise determination of the spacecraft trajectories, prediction of the trajectories, design of the propulsive maneuvers required to effect the necessary trajectory changes, and calculation of the Lander descent guidance parameters...|$|R
50|$|The Space Environment Information System (SPENVIS) is an ESA <b>operational</b> <b>software</b> {{developed}} and maintained at Belgian Institute for Space Aeronomy since 1996. It provides a web-based interface {{for assessing the}} Space environment {{and its effects on}} spacecraft systems and crews. The system is used by an international user community for various purposes, e.g. mission analysis and planning, educational support, and running models for scientific applications. SPENVIS also includes extensive background information on the space environment and the environment models.|$|R
5000|$|Intelitek's {{innovative}} {{tools and}} technologies empower instructors and inspire students {{to improve the}} world around them. We understand the changing needs of your career and technology classrooms and design flexible solutions that meet those needs {{within the framework of}} any budget. Intelitek educational solutions for STEM and Technical careers are revolutionary project based learning programs that integrate sophisticated curriculum, <b>operational</b> <b>software,</b> 3-D simulation and real world hardware. Intelitek delivers educational programs via our modern learning management system - LearnMate ...|$|R
40|$|Software {{configuration}} management activities {{are crucial to}} assure the integrity of current operational {{and the quality of}} new software either being developed at CERN or outsourced. The functionality of the present management system became insufficient with large maintenance overheads. In order to improve our situation, a new software {{configuration management}} system has been set up. It is based on Razor, a commercial tool, which supports the management of file versions and <b>operational</b> <b>software</b> releases, along with integrated problem reporting capabilities. In addition to the basic tool functionality, automated procedures were custom made, for the installation and distribution of <b>operational</b> <b>software.</b> Policies were developed and applied over the software development life cycle to provide visibility and control. The system ensures that, at all times, the status and location of all deliverable versions are known, the state of shared objects is carefully controlled and unauthorised changes prevented. It provides a managed environment for software development, in various domains of the SPS and LEP CERN accelerators, and the technical services, automating code and lifecycle management. This paper outlines the reasons for selecting the chosen tool, the implementation of the system, the problems solved and the final goals achieved...|$|R
40|$|The {{operations}} software {{group at}} the Thomas Jefferson National Accelerator Facility faces a number of challenges common to facilities which manage {{a large body of}} software developed in-house. Developers include members of the software group, operators, hardware engineers and accelerator physicists. One management problem has been ensuring that all software has an identified owner who is still working at the lab. In some cases, locating source code for ''orphaned'' software has also proven to be difficult. Other challenges include ensuring that working versions of all <b>operational</b> <b>software</b> are available, testing changes to <b>operational</b> <b>software</b> without impacting operations, upgrading infrastructure software (OS, compilers, interpreters, commercial packages, share/freeware, etc), ensuring that appropriate documentation is available and up to date, underutilization of code reuse, input/output file management,and determining what other software will break if a software package is upgraded. This paper will describe a relational database model which has been developed to track this type of information and make it available to managers and developers. The model also provides a foundation for developing productivity-enhancing tools for automated building, versioning, and installation of software. This work was supported by the U. S. DOE contract No. DE-AC 05 - 84 ER 40150...|$|R
40|$|The {{techniques}} used for ingesting SEASAT-A SASS wind retrievals into the existing <b>operational</b> <b>software</b> are described. The {{intent is to}} assess the impact of SEASAT data in he marine wind fields produced by the global marine wind/sea level pressure analysis. This analysis is performed on a 21 / 2 deg latitude/longitude global grid which executes at three hourly time increments. Wind fields with and without SASS winds are being compared. The problems of data volume reduction and aliased wind retrieval ambiquity are treated...|$|R
5000|$|Brad is {{a skilled}} birder who can {{identify}} nearly any species solely by sound. He hates his job maintaining the <b>operational</b> <b>software</b> {{of a nuclear}} power plant in Lansdowne, Pennsylvania. Living with his parents after a failed marriage, an aborted career at Dell, and dropping out of grad school, he is a [...] "typical Jack Black underachiever". He hopes that doing a Big Year will give him a sense of purpose and possibly even make his father proud of him.|$|R
40|$|A highly fault {{tolerant}} digital computer {{system has been}} configured based on extensive experience with flight proven, redundant digital flight control systems. The feasibility of minimizing hardware complexity is shown while maintaining high levels of fault tolerance. The emerging hardware design combines reconfiguration concepts with conventional hardware redundancy techniques and special <b>operational</b> <b>software</b> to provide dual fail operate performance with a basic triplex system. The design provides high reliability and flight safety, enhances maintainability, and reduces life cycle cost while offering improved performance for future aircraft...|$|R
30|$|The {{on-board}} computer {{is responsible for}} routine operations of the spacecraft. Low power space qualified processors and memory are available for CubeSats {{from a variety of}} vendors, typically based upon ARM devices and flash storage. The OBC will support different mission modes including initial switch-on and detumbling, charging, RAM attitude keeping, experiment, and data download modes. Failsafe modes including in-orbit reset will be included. A facility to update <b>operational</b> <b>software</b> is desirable as this allows experiments to be performed that were not envisaged prior to launch.|$|R
