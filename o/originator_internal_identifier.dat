0|23|Public
50|$|The {{frequent}} use of a double underscores in <b>internal</b> <b>identifiers</b> in Python {{gave rise to the}} abbreviation dunder; this was coined by Mark Jackson and independently by Tim Hochberg, within minutes of each other, both in reply to the same question in 2002.|$|R
50|$|The NT {{version number}} is not now {{generally}} used for marketing purposes, {{but is still}} used internally, and said to reflect the degree of changes {{to the core of}} the operating system. However, for application compatibility reasons, Microsoft kept the major version number as 6 in releases following Vista, but changed it later to 10 in Windows 10. The build number is an <b>internal</b> <b>identifier</b> used by Microsoft's developers and beta testers.|$|R
30|$|All the {{information}} is defined automatically when the user wishes to add a new one, though it can be changed by the user or can be read from a file. An <b>internal</b> <b>identifier</b> is required to distinguish a node from others in Castadiva's framework. Such identifier is then referenced when defining the network topology and data connections. The remaining parameters will be used by Castadiva's main application to connect nodes among themselves and with the main server. The MAC address is required for Castadiva to enforce topology changes.|$|R
50|$|He {{has been}} alleged {{as the author}} of the Roman de Flamenca, but as this was written around 1234 - 1235, he would have done so while about ninety years of age, which is hardly likely. However, the author of the Flamenca {{probably}} imitated the dialogue of Peire Rogiers poems. As the <b>originator</b> of <b>internal</b> dialogue in the troubadour lyric, Peire Rogier was also imitated by Guiraut de Bornelh.|$|R
40|$|Unlike {{identification}} with keys and reference schemes in ER and ORM, UML uses <b>internal,</b> system-generated, <b>identifiers,</b> with a little-known underspecified option for user-defined identifiers. To increase the ontological foundations of UML, we propose two language enhancements for UML, being formally defined simple and compound identifiers {{and the notion}} of defined class, which also have a corresponding extension of UML’s metamodel...|$|R
40|$|Surrogates or <b>internal</b> <b>identifiers</b> {{can be made}} to {{facilitate}} both fast access and storage in-dependence if they are implemented properly. Such an implementation is discussed here; it permits the tuplcs of a relation to be accessed very fast by primary key for both random and sequential search without retarding the per-formance of secondary keys. It employs a key compression and a hasiiing algorithm and attempts to place tuples on data pages in the primary key sequence. Subsequent updates are absorbed by a dynamic allocation of overflows. An indexing technique called a hash tree holds surrogates in primary key order, and facili-tates fast sequential access. The access speed remains high even at a 90 % load factor, with-out being significantly affected by storage reorganisation resulting from the addition of new attributes, deletion of old attributes or change of data page sizes. These techniques have been implemented in the PRECI database system at Aberdeen. 1...|$|R
40|$|Sound naming {{schemes for}} objects are crucial {{in many parts}} of {{computer}} science, such as database modeling, database implementation, distributed and federated databases, and networked and distributed operating systems. Over the past 20 years, physical pointers, keys, surrogates and object identifiers have been used as naming schemes in database systems and elsewhere. However, there are some persistent confusions about the nature, applicability and limits of these schemes. In this paper we give a detailed comparison of three naming schemes, viz. object <b>identifiers,</b> <b>internal</b> <b>identifiers</b> (often called surrogates) and keys. We discuss several ways in which identification schemes can be implemented, and show what the theoretical and practical limits of applicability of identification schemes are, independently from how they are implemented. In particular, we discuss problems with the recognition and authentication of identifiers. If the identified objects are persons, an additional problem is that object identification may conflict with privacy demands; for this case, we indicate a way in which identification can be combined with privacy protection...|$|R
40|$|BackgroundBioCyc {{databases}} are {{an important}} resource for information on biological pathways and genomic data. Such databases represent the accumulation of biological data, some {{of which has been}} manually curated from literature. An essential feature of these databases is the continuing data integration as new knowledge is discovered. As functional annotations are improved, scalable methods are needed for curators to manage annotations without detailed knowledge of the specific design of the BioCyc database. ResultsWe have developed CycTools, a software tool which allows curators to maintain functional annotations in a model organism database. This tool builds on existing software to improve and simplify annotation data imports of user provided data into BioCyc databases. Additionally, CycTools automatically resolves synonyms and alternate identifiers contained within the database into the appropriate <b>internal</b> <b>identifiers.</b> ConclusionsAutomating steps in the manual data entry process can improve curation efforts for major biological databases. The functionality of CycTools is demonstrated by transferring GO term annotations from MaizeCyc to matching proteins in CornCyc, both maize metabolic pathway databases available at MaizeGDB, and by creating strain specific databases for metabolic engineering...|$|R
5000|$|In general, {{within a}} domain {{such as an}} {{individual}} institution, patient identifiers and identifiers of request, studies and reports (e.g., by accession numbers) are assigned uniquely within that domain, but not outside. Most internal systems (and most PACS) do not manage the existence of multiple identity domains, and if identifiers are used across domains then collisions and ambiguity occur. Thus each identifier needs to either be qualified by its [...] "assigning authority" [...] when used (the approach taken by the DICOM-based IHE Multiple Image Manager Archive (MIMA) profile) or coerced into a single [...] "canonical" [...] identifier that spans {{the scope of the}} larger domain that includes all integrated cross-enterprise systems (the approach taken by IHE Cross Enterprise Document Sharing. When importing outside images into the local archive, this matter also has to be addressed, usually by mapping the outside <b>identifier</b> into an <b>internal</b> <b>identifier</b> and re-encoding the information (coercion) in the DICOM [...] "header" [...] or other meta-data (such as by the manner specified in Import Reconciliation Workflow).|$|R
25|$|Permalinks {{frequently}} {{consist of}} a string of characters that represent the date and time of posting, and an identifier that denotes the author who initially authored the item or its subject. Crucially, if an item is changed, renamed, or moved within the internal database, its permalink remains unaltered, as it functions as a magic cookie that references an <b>internal</b> database <b>identifier.</b> If an item is deleted altogether, its permalink can frequently not be reused.|$|R
50|$|A non-semantic URL is {{typically}} {{composed of a}} path, script name, and query string. The query string parameters dictate the content to show on the page, and frequently include information opaque or irrelevant to users—such as <b>internal</b> numeric <b>identifiers</b> for values in a database, illegibly-encoded data, session IDs, implementation details, and so on. Semantic URLs, by contrast, contain only {{the path of a}} resource, in a hierarchy that reflects some logical structure that users can easily interpret and manipulate.|$|R
40|$|Figure 2 - Data {{flow from}} Scratchpad to Darwin Core Archive. The dwca_export module (orange) defines {{a number of}} custom Drupal Views (queries) that collect the data {{required}} for archive generation from the Scratchpad (blue) and combines them with the meta. xml which describes {{the information in the}} archive. For eMonocot Scratchpads the emonocot_dwca module (green) provides an intermediary function replacing the Scratchpads <b>internal</b> unique <b>identifiers</b> with those used throughout the eMonocot project (see eMonocot modifications section) ...|$|R
40|$|STITCH is a {{database}} of protein-chemical interactions that integrates many sources of experimental and manually curated evidence with text-mining information and interaction predictions. Available at [URL] the resulting interaction network includes 390 000 chemicals and 3. 6 million proteins from 1133 organisms. Compared with the previous version, the number of high-confidence protein-chemical interactions in human has increased by 45 %, to 367 000. In this version, we added features for users to upload their own data to STITCH {{in the form of}} <b>internal</b> <b>identifiers,</b> chemical structures or quantitative data. For example, a user can now upload a spreadsheet with screening hits to easily check which interactions are already known. To increase the coverage of STITCH, we expanded the text mining to include full-text articles and added a prediction method based on chemical structures. We further changed our scheme for transferring interactions between species to rely on orthology rather than protein similarity. This improves the performance within protein families, where scores are now transferred only to orthologous proteins, but not to paralogous proteins. STITCH can be accessed with a web-interface, an API and downloadable file...|$|R
40|$|AbstractPatient {{lists are}} project-specific sets of {{patients}} {{that can be}} queried in integrated data repositories (IDR’s). By allowing a set of patients to be an addition to the qualifying conditions of a query, returned results will refer to, and only to, that set of patients. We report a variety of use cases for such lists, including: restricting retrospective chart review to a defined set of patients; following a set of patients for practice management purposes; distributing “honest-brokered” (deidentified) data; adding phenotypes to biosamples; and enhancing the content of study or registry data. Among the capabilities needed to implement patient lists in an IDR are: capture of patient identifiers from a query and feedback of these into the IDR; {{the existence of a}} permanent <b>internal</b> <b>identifier</b> in the IDR that is mappable to external identifiers; the ability to add queryable attributes to the IDR; the ability to merge data from multiple queries; and suitable control over user access and de-identification of results. We implemented patient lists in a custom IDR of our own design. We reviewed capabilities of other published IDRs for focusing on sets of patients. The widely used i 2 b 2 IDR platform has various ways to address patient sets, and it could be modified to add the low-overhead version of patient lists that we describe...|$|R
5000|$|Many newer systems {{capable of}} {{accessing}} online services (such as the Xbox One, PlayStation 4 and iPhone) have <b>internal</b> hardware-based unique <b>identifiers,</b> allowing individual systems to be tracked over a network and banned from accessing certain online services. Banned systems usually {{continue to operate}} for purposes unrelated to the online service, but they are often considered [...] "bricked" [...] by users of the online service.|$|R
5000|$|The {{error is}} {{displayed}} as two fields, {{separated by a}} period. The format is #0000000x.yyyyyyyy {{in case of a}} CPU error, or #aabbcccc.dddddddd in case of a system software error. The first field is either the Motorola 68000 exception number that occurred (if a CPU error occurs) or an <b>internal</b> error <b>identifier</b> (such as an 'Out of Memory' code), in case of a system software error. The second can be the address of a Task structure, or the address of a memory block whose allocation or deallocation failed. It is never the address of the code that caused the error. If the cause of the crash is uncertain, this number is rendered as 48454C50, which stands for [...] "HELP" [...] in hexadecimal ASCII characters (48=H, 45=E, 4C=L, 50=P).|$|R
50|$|If {{the media}} source {{is not a}} {{real-time}} source (e.g. a media file on a mass storage device), the presentation times can be generated based on the nominal media rate. If the media source is a real-time source (e.g. a microphone), the presentation time can be constructed by the talker based on its observation of the 802.1AS time {{in relation to the}} microphone’s sample clock.Other higher layer services can use AVB in a similar way. Existing connection management schemes, for example, can use the AVB SRP reservation services by mapping their <b>internal</b> stream <b>identifiers</b> with the SRP stream ID. Once a connection is established, streaming can start. E.g., applications using RTP transmit RTCP packets defined by IEEE 1733 that correlate the SSRC to the SRP stream ID. Furthermore, listener applications using 1722 use the SRP stream ID to discriminate between different streams.|$|R
5000|$|Ji Jike ( [...] ; 1588-1662) was {{a highly}} {{accomplished}} martial artist from Yongji, Shanxi Province. He was also known as Ji Longfeng (...) [...] According to accepted theory, he is widely {{considered to be the}} <b>originator</b> of the <b>internal</b> martial art of Xingyiquan. (Other, less credible, theories consider Bodhidharma or Yue Fei as the originators of this art.) Ji Jike created the martial art of Xinyiquan (Heart and Intention Boxing), which is the precursor of Xingyiquan (Form and Intention Boxing). He based the fundamentals of Xinyi on the spear techniques for which he was also famous. It was Li Luo Neng, a most famous descendant of Ji Jike, who modified Xinyi and called it Xingyi.|$|R
40|$|Object {{identity}} {{is a fundamental}} concept of object orientation. Objects are distinguishable even if they coincide in all their externally visible properties, i. e. values and relationships. In data models this abstract concept is usually realized by <b>internal</b> object <b>identifiers</b> to which the query language of the data model does not provide direct access. Therefore, in general, objects have to be accessed or `identified' by their properties. Property-based retrieval of single objects is also of importance if different data models are used together. Examples are given by the combination of object-oriented applications with relational databases or the relational implementation of objectoriented databases. This thesis addresses value-based identification of objects in data models which {{are similar to the}} static part of the Object Modeling Technique, a design method frequently used in connection with the object-oriented design of database applications. Object functional dependencies are proposed as a graph-based generalization of functional dependencies, a class of integrity constraints known from the relational data model. They allow the specification of constraints between attributes and object types of an object schema and provide a framework for value-based identification constraints. The sematics o...|$|R
30|$|Within {{the process}} of storing data into the CTI Vault, the {{integrity}} of captured data is essential to preserve its evidential significance for any subsequent forensic analyses or even for court cases. The proposed concept provides two different mechanisms to guarantee the integrity for stored incident information. On the one hand, the integrity of incident information has to be ensured when it enters the system for the first time, on the other hand, changes on persisted information have to be conducted in an integrity preserving manner. The integrity of inserted information is preserved using controlled redundancies. Inserted information will intentionally not be checked for redundancies to prevent any possible distortion of this data. The insertion of redundant data is possible, since the graph database assigns an <b>internal</b> unique <b>identifier</b> for every element inserted. This, in turn, prevents objects with the same content from producing collisions. However, delimitation for redundant objects remains still possible due to the pooling of elements and their affiliation to their root element, namely their bundle. The only exception for this are insertions of redundant elements within one bundle. However, this would only be the case if the elements contain identical STIX unique identifiers, which makes them both syntactically and semantically identical and consequently leads to a unification of these elements.|$|R
40|$|Objectives: This {{study is}} aimed at {{developing}} a set of data groups (DGs) to be employed as reusable building blocks {{for the construction of}} the eight most common clinical documents used in China’s general hospitals in order to achieve their structural and semantic standardization. Methods: The Diagnostics knowledge framework, the related approaches taken from the Health Level Seven (HL 7), the Integrating the Healthcare Enterprise (IHE), and the Healthcare Information Technology Standards Panel (HITSP) and 1, 487 original clinical records were considered together to form the DG architecture and data sets. The internal structure, content, and semantics of each DG were then defined by mapping each DG data set to a corresponding Clinical Document Architecture data element and matching each DG data set to the metadata in the Chinese National Health Data Dictionary. By using the DGs as reusable building blocks, standardized structures and semantics regarding the clinical documents for semantic interoperability were able to be constructed. Results: Altogether, 5 header DGs, 48 section DGs, and 17 entry DGs were developed. Several issues regarding the DGs, including their <b>internal</b> structure, <b>identifiers,</b> data set names, definitions, length and format, data types, and value sets, were further defined. Standardized structures and semantics regarding the eight clinical documents were structured by the DGs. Conclusions: This approach of constructing clinical document standards using DGs is a feasible standard-driven solution useful in preparing documents possessing semantic interoperability among the disparate information systems in China. These standards need to be validated and refine...|$|R
5000|$|The [...] "HKLM\SAM" [...] key usually {{appears as}} empty for most users (unless they are granted access by administrators {{of the local}} system or administrators of domains {{managing}} the local system). It is used to reference all [...] "Security Accounts Manager" [...] (SAM) databases for all domains into which the local system has been administratively authorized or configured (including the local domain of the running system, whose SAM database is stored a subkey also named [...] "SAM": other subkeys will be created as needed, one for each supplementary domain). Each SAM database contains all builtin accounts (mostly group aliases) and configured accounts (users, groups and their aliases, including guest accounts and administrator accounts) created and configured on the respective domain, for each account in that domain, it notably contains the user name {{which can be used}} to log on that domain, the <b>internal</b> unique user <b>identifier</b> in the domain, a cryptographic hash of each user's password for each enabled authentication protocol, the location of storage of their user Registry hive, various status flags (for example if the account can be enumerated and be visible in the logon prompt screen), and the list of domains (including the local domain) into which the account was configured.|$|R

