1|227|Public
40|$|Spam email is a {{big problem}} on the Internet, with 89 % of all email {{consisting}} of spam. The aim of this work was to investigate the technologies required to send spam email and then to develop an automated tool. The tool would need to perform three steps, which were email harvesting, applying social engineering to the content and finally sending out the spam emails. This work clearly demonstrated how emails could still be harvested to produce spam emails, even when the Web Administrator had attempted to obfuscate them. Two common techniques to protect email addresses included replacing the text of address with an image or using JavaScript to safeguard email address in the code used to write the web page. Both of these techniques are aimed at discouraging harvesting activities. In order to bypass the anti-spam system, spammers need to harvest large numbers of valid email addresses and therefore this process needed to be automated. Having identified how the email addresses were stored, these then had to be extracted for use in the tool. This was done using regular expressions. Having obtained a large number of valid emails, {{the next step was to}} design an email that the “victim” would open using social engineering techniques, known as a targeted malicious email (TME). It was important to understand the motivation behind TME because this affected the success of the attack. TME needed to pay more attention to the list of recipients and the content of the emails, as well as the process of delivery. TME distribution was also limited to specific groups of users. This meant that the email contents could be crafted to match the interests of the target group. The content template was applied to the sending email. In order to deliver the email, the tool had to be able to interact with the SMTP server to send out the email. <b>Open</b> <b>relay</b> <b>server</b> was selected for managing this process. The tool was able to harvest email addresses, send deceptive messages based on social engineering and perform targeted email attacks using the CMS School web site at the University of Greenwich as the “victim”. In conclusion, a strategy is proposed to prevent automated tools such as the one presented from gathering the information for use in spam mail...|$|E
5000|$|In the mid-1990s, {{with the}} rise of spamming, spammers resorted to {{re-routing}} their e-mail through third party e-mail servers to avoid detection and to exploit the additional resources of these <b>open</b> <b>relay</b> <b>servers.</b> Spammers would send one e-mail to the <b>open</b> <b>relay</b> and (effectively) include a large blind carbon copy list, then the <b>open</b> <b>relay</b> would relay that spam to the entire list. [...] While this greatly reduced the bandwidth requirements for spammers at a time when Internet connections were limited, it forced each spam to be an exact copy and thus easier to detect. After abuse by spammers became widespread, operating an <b>open</b> <b>relay</b> came to be frowned upon among the majority of Internet server administrators and other prominent users. [...] <b>Open</b> <b>relays</b> are recommended against in RFC 2505 and RFC 5321 (which defines SMTP). The exact copy nature of spam using <b>open</b> <b>relays</b> made it easy to create bulk e-mail detection systems such as Vipul's Razor and the Distributed Checksum Clearinghouse. To counter this, spammers were forced to switch to using hash busters to make them less effective and the advantage of using <b>open</b> <b>relays</b> was removed since every copy of spam was [...] "unique" [...] and had to be sent individually.|$|R
5000|$|The {{most popular}} DNSBLs (DNS Blacklists) are lists of domain names of known spammers, known <b>open</b> <b>relays,</b> known proxy <b>servers,</b> {{compromised}} [...] "zombie" [...] spammers, {{as well as}} hosts on the internet that shouldn't be sending external emails, such as the end-user address space of a consumer ISP. These are known as [...] "Dial Up Lists", from the time when end users whose computers were [...] "zombieing" [...] spam were {{connected to the internet}} with a modem and a phone line.|$|R
50|$|To {{combat the}} {{problems}} posed by botnets, <b>open</b> <b>relays,</b> and proxy <b>servers,</b> many email server administrators pre-emptively block dynamic IP ranges and impose stringent requirements on other servers wishing to deliver mail. Forward-confirmed reverse DNS must be correctly {{set for the}} outgoing mail server and large swaths of IP addresses are blocked, sometimes pre-emptively, to prevent spam. These measures can pose problems for those wanting to run a small email server off an inexpensive domestic connection. Blacklisting of IP ranges due to spam emanating from them also causes problems for legitimate email servers in the same IP range.|$|R
5000|$|A MUA {{knows the}} {{outgoing}} mail SMTP server from its configuration. A <b>relay</b> <b>server</b> typically determines which server {{to connect to}} by looking up the MX (Mail eXchange) DNS resource record for each recipient's domain name. If no MX record is found, a conformant <b>relaying</b> <b>server</b> (not all are) instead looks up the A record. <b>Relay</b> <b>servers</b> can also be configured to use a smart host. A <b>relay</b> <b>server</b> initiates a TCP connection to the server on the [...] "well-known port" [...] for SMTP: port 25, or for connecting to an MSA, port 587. The main difference between an MTA and an MSA is that connecting to an MSA requires SMTP Authentication.|$|R
40|$|Store-and-forward MTA <b>relaying</b> <b>servers</b> have {{frequently}} presented problems to various antispam techniques, such as IPbased reputation or email authentication. Algorithms that find email <b>relaying</b> <b>servers</b> can use knowledge about a domain’s outbound IP addresses combined with cryptographic domain authentication frameworks such as DomainKeys. This paper presents one such algorithm. 1. Why find <b>relaying</b> <b>servers?</b> In this paper, the term relaying {{will be used}} to describe the situation where messages intended for an email user are systematically and automatically delivered to a non-local address. Many industry terms are used for this action: forwarding, redirection, lifetime email addresses, etc. The feature is prevalent in university’s alumni email accounts and Internet acces...|$|R
50|$|<b>Open</b> <b>Relay</b> Behavior-modification System (ORBS), {{created and}} run by Alan Brown in New Zealand, {{was one of the}} first DNS-based Blackhole Lists (DNSBL), a means by which an {{internet}} domain may publish a list of IP addresses, in a database which can be easily queried automatically by other computer programs on the Internet.The ORBS list was used to blacklist IP addresses that were <b>open</b> mail <b>relays,</b> third-party mail <b>servers</b> through which spammers can relay their messages and thus attempt to obfuscate the source of the spam.|$|R
50|$|For example, World-Wide-Web servers {{operate on}} port 80, and email <b>relay</b> <b>servers</b> usually listen on port 25.|$|R
50|$|Several {{groups had}} cached the lists, retested the <b>open</b> <b>relays,</b> and {{replaced}} ORBS. Running an <b>open</b> <b>relay</b> became even {{a bigger problem}} than before. DNSBLs listing <b>open</b> <b>relays</b> got so effective that spammers shifted to insecure proxy servers.|$|R
40|$|Abstract—With rising {{concerns}} on user privacy {{over the}} In-ternet, anonymous communication systems that hide {{the identity of}} a participant from its partner or third parties are highly desired. Existing approaches either rely on a relative small set of pre-selected <b>relay</b> <b>servers</b> to redirect the messages, or use structured peer-to-peer systems to multicast messages among a set of relay groups. The pre-selection approaches provide good anonymity, but suffer from node failures and scalability problem. The peer-to-peer approaches are subject to node churns and high maintenance overhead, which are the intrinsic problems of P 2 P systems. In this paper, we present CAT, a node-failure-resilient anony-mous communication protocol. In this protocol, <b>relay</b> <b>servers</b> are randomly assigned to relay groups. The initiator of a connection selects a set of relay groups instead of <b>relay</b> <b>servers</b> to set up anonymous paths. A valid path consists of <b>relay</b> <b>servers,</b> one from each selected relay group. The initiator explores valid anonymous paths via a probing process. Since the relative positions of <b>relay</b> <b>servers</b> in the path are commutative, there exist multiple anonymous yet commutative paths, which form an anonymous tunnel. When a connection encounters a node failure, it quickly switches to a nearest backup path in the tunnel through “path hopping”, without tampering the initiator or renegotiating the keys. Hence, the protocol is resilient to node failures. We also show that the protocol provides good anonymity even when facing types of active and passive attacks. Finally, the operating cost of CAT is analyzed and shown to be similar to other node-based anonymous communication protocols. I...|$|R
5000|$|Streamripper {{can also}} host a local <b>relay</b> <b>server</b> on a user {{specified}} port {{so that a}} user can listen to the stream while the recording is in progress ...|$|R
50|$|This technique, used by Cbox {{and other}} chat applications, {{makes use of}} the XMLSocket object in a single-pixel Adobe Flash movie. Under the control of JavaScript, the client {{establishes}} a TCP connection to a unidirectional <b>relay</b> on the <b>server.</b> The <b>relay</b> <b>server</b> does not read anything from this socket; instead it immediately sends the client a unique identifier. Next, the client makes an HTTP request to the web server, including with it this identifier. The web application can then push messages addressed to the client to a local interface of the <b>relay</b> <b>server,</b> which <b>relays</b> them over the Flash socket. The advantage {{of this approach is}} that it appreciates the natural read-write asymmetry that is typical of many web applications, including chat, and as a consequence it offers high efficiency. Since it does not accept data on outgoing sockets, the <b>relay</b> <b>server</b> does not need to poll outgoing TCP connections at all, making it possible to hold open tens of thousands of concurrent connections. In this model, the limit to scale is the TCP stack of the underlying server operating system.|$|R
40|$|P 2 P {{streaming}} application {{must realize}} {{network address translation}} (NAT) traversal. To handle low success ratio of the existing NAT traversal algorithm, UPnP-STUN (UPUN) and port-mapping sample estimation (PMSE) algorithm are recommended in this paper. UPUN is the combination of UPnP and STUN, and PMSE utilizes port mapping samples added by symmetric NAT for different sessions to estimate regularity of port mapping of symmetric NAT, which {{takes advantage of the}} Bernoulli law of large numbers. Besides, for the situation that both peers are behind NAT, and to handle heavy <b>relay</b> <b>server</b> load when many inner peers want to communicate with each other, a peer auxiliary-relay (PAR) algorithm is presented. PAR lets outer peers with sufficient bandwidth act as <b>relay</b> <b>servers</b> to alleviate pressure of real server, which could avoid NAT traversal failure caused by single point failure of <b>relay</b> <b>server.</b> Finally, experiments show that the proposed algorithms could improve the success ratio significantly for NAT traversal in P 2 P streaming application as well as improve P 2 P streaming application applicability. © by HIGH TECHNOLOGY LETTERS PRESS. P 2 P streaming application must realize network address translation (NAT) traversal. To handle low success ratio of the existing NAT traversal algorithm, UPnP-STUN (UPUN) and port-mapping sample estimation (PMSE) algorithm are recommended in this paper. UPUN is the combination of UPnP and STUN, and PMSE utilizes port mapping samples added by symmetric NAT for different sessions to estimate regularity of port mapping of symmetric NAT, which takes advantage of the Bernoulli law of large numbers. Besides, for the situation that both peers are behind NAT, and to handle heavy <b>relay</b> <b>server</b> load when many inner peers want to communicate with each other, a peer auxiliary-relay (PAR) algorithm is presented. PAR lets outer peers with sufficient bandwidth act as <b>relay</b> <b>servers</b> to alleviate pressure of real server, which could avoid NAT traversal failure caused by single point failure of <b>relay</b> <b>server.</b> Finally, experiments show that the proposed algorithms could improve the success ratio significantly for NAT traversal in P 2 P streaming application as well as improve P 2 P streaming application applicability. © by HIGH TECHNOLOGY LETTERS PRESS...|$|R
50|$|The {{network of}} community-contributed <b>relay</b> <b>servers</b> allows devices {{that are both}} behind {{different}} IPv4 NAT firewalls {{to be able to}} communicate by relaying encrypted data via a third party. The relaying performed is similar in nature to the TURN protocol, with the traffic TLS-encrypted end-to-end between devices (thus even the <b>relay</b> <b>server</b> cannot see the data, only the encrypted stream). Private relays can also be set up and configured, with or without public relays, if desired. Syncthing will automatically switch from relaying to direct device-to-device connections if it discovers that a direct connection has become available.|$|R
50|$|In response, mail system administrators {{concerned}} about spam began {{to demand that}} other mail operators configure MTAs to cease being <b>open</b> <b>relays.</b> The first DNSBLs, such as MAPS RBL and the now-defunct ORBS, aimed chiefly at allowing mail sites to refuse mail from known <b>open</b> <b>relays.</b> By 2003 less than 1% of corporate mail servers were available as <b>open</b> <b>relays,</b> down from 91% in 1997.|$|R
5000|$|The {{most famous}} <b>open</b> mail <b>relay</b> {{operating}} today is probably that of John Gilmore, who argues that running an <b>open</b> <b>relay</b> {{is a free}} speech issue. His server is included on many <b>open</b> <b>relay</b> blacklists (many of which are generated by [...] "automatic detection", that is, by anti-spam blacklisters sending an (unsolicited) test e-mail to other servers {{to see if they}} will be relayed). These measures cause much of his outgoing e-mail to be blocked. Along with his further deliberate configuration of the <b>server,</b> his <b>open</b> <b>relay</b> enables people to send e-mail without their IP address being directly visible to the recipient and thereby send e-mail anonymously. In 2002, his <b>open</b> <b>relay,</b> along with 24 others, was used by a computer worm to propagate.|$|R
5000|$|Often blank spam headers appear truncated, {{suggesting}} that computer glitches, such as software bugs or other {{may have contributed}} to this problem—from poorly written spam software to malfunctioning <b>relay</b> <b>servers,</b> or any problems that may truncate header lines from the message body.|$|R
50|$|One {{consequence}} of the new unacceptability of <b>open</b> <b>relays</b> was an inconvenience for some end users and certain internet service providers. To allow customers to use their e-mail addresses at Internet locations other than the company's systems (such as at school or work), many mail sites explicitly allowed <b>open</b> <b>relaying</b> so that customers could send e-mail via the ISP from any location. Once <b>open</b> <b>relay</b> became unacceptable because of abuse (and unusable because of blocking of <b>open</b> <b>relays),</b> ISPs and other sites had to adopt new protocols to allow remote users to send mail. These include smart hosts, SMTP-AUTH, POP before SMTP, {{and the use of}} virtual private networks (VPNs). The IETF has written a best current practices covering Email Submission Operations in RFC 5068.|$|R
50|$|Others started DNS-based blacklists of <b>open</b> <b>relays.</b>|$|R
50|$|Internet {{initiatives}} to close <b>open</b> <b>relays</b> have ultimately missed their intended purpose because spammers have created distributed botnets of zombie computers that contain malware with mail relaying capability. The {{number of clients}} under spammers' control is now so great that previous anti-spam countermeasures that focused on closing <b>open</b> <b>relays</b> are no longer effective.|$|R
50|$|A website {{was created}} in 2001 by Brad Baker called stoporbs.org, to offer {{assistance}} to other mail administrators who had been listed on the ORBS blacklist {{for reasons other than}} <b>open</b> <b>relays.</b> Many administrators felt that by listing servers for other than the reasons advertised (<b>open</b> <b>relays),</b> the list was not reliable for the supposed purpose.|$|R
5000|$|... #Article: Cross-country skiing at the 2014 Winter Paralympics - 4 x 2.5 {{kilometre}} <b>open</b> <b>relay</b> ...|$|R
50|$|NJABL {{maintained}} {{a list of}} known and potential spam sources (<b>open</b> mail <b>relays,</b> <b>open</b> proxies, open form to mail HTTP gateways, dynamic IP pools, and direct spammers) {{for the purpose of}} being able to tag or refuse e-mail and thereby block spam from certain sources. NJABL automatically retests only listed <b>open</b> <b>relays</b> every 90 days.|$|R
5000|$|... 6to4 is an Internet {{transition}} {{mechanism for}} migrating from Internet Protocol version 4 (IPv4) to version 6 (IPv6), {{a system that}} allows IPv6 packets to be transmitted over an IPv4 network (generally the IPv4 Internet) without the need to configure explicit tunnels. Special <b>relay</b> <b>servers</b> are also in place that allow 6to4 networks to communicate with native IPv6 networks.|$|R
5000|$|Miredo is a client, <b>relay</b> and <b>server</b> for Linux, *BSD and Mac OS X, ...|$|R
5000|$|Windows Server 2003 has a <b>relay</b> and <b>server</b> {{provided}} {{under the}} Microsoft Beta program.|$|R
2500|$|... 6to4 is an Internet {{transition}} {{mechanism for}} migrating from Internet Protocol version 4 (IPv4) to [...] version 6 (IPv6), {{a system that}} allows IPv6 packets to be transmitted over an IPv4 network (generally the IPv4 Internet) without the need to configure explicit tunnels. Special <b>relay</b> <b>servers</b> are also in place that allow 6to4 networks to communicate with native IPv6 networks.|$|R
50|$|The Internet Mail Consortium (IMC) {{reported}} 55% of mail <b>servers</b> were <b>open</b> <b>relays</b> in 1998, {{but less}} than 1% in 2002.|$|R
50|$|An {{open proxy}} is one which will create {{connections}} for any client to any server, without authentication. Like <b>open</b> <b>relays,</b> <b>open</b> proxies were once relatively common, as many administrators {{did not see}} a need to restrict access to them.|$|R
50|$|These honeypots {{can reveal}} the abuser's IP address and provide bulk spam capture (which enables {{operators}} to determine spammers' URLs and response mechanisms). For <b>open</b> <b>relay</b> honeypots, {{it is possible}} to determine the e-mail addresses ("dropboxes") spammers use as targets for their test messages, which are the tool they use to detect <b>open</b> <b>relays.</b> It is then simple to deceive the spammer: transmit any illicit relay e-mail received addressed to that dropbox e-mail address. That tells the spammer the honeypot is a genuine abusable <b>open</b> <b>relay,</b> and they often respond by sending large quantities of relay spam to that honeypot, which stops it. The apparent source may be another abused system—spammers and other abusers may use a chain of abused systems to make detection of the original starting point of the abuse traffic difficult.|$|R
50|$|Since <b>open</b> mail <b>relays</b> make {{no effort}} to {{authenticate}} the sender of an e-mail, <b>open</b> mail <b>relays</b> are vulnerable to address spoofing.|$|R
50|$|Soon {{after the}} advent of the RBL, others started {{developing}} their own lists with different policies. One of the first was Alan Brown's <b>Open</b> <b>Relay</b> Behavior-modification System (ORBS). This used automated testing to discover and list mail servers running as open mail relays—exploitable by spammers to carry their spam. ORBS was controversial at the time because many people felt running an <b>open</b> <b>relay</b> was acceptable, and that scanning the Internet for open mail servers could be abusive.|$|R
50|$|The {{initiating}} host, the SMTP client, can {{be either}} an end-user's email client, functionally identified as a mail user agent (MUA), or a <b>relay</b> <b>server's</b> mail transfer agent (MTA), that is an SMTP server acting as an SMTP client, in the relevant session, in order to relay mail. Fully capable SMTP servers maintain queues of messages for retrying message transmissions that resulted in transient failures.|$|R
5000|$|Related to {{the testing}} regime, which was {{excessive}} {{in the eyes}} of a number of email administrators, Brown's policy of adding servers he was unable to test to the list, {{whether or not they were}} actually <b>open</b> <b>relays,</b> was also a matter of dispute. Another complaint was that <b>open</b> <b>relays</b> that had never sent spam were listed without notice. False listings on ORBS were also alleged, particularly when Brown was engaged in legal or other dispute against the listed party ...|$|R
5000|$|... ng_teredo is a <b>relay</b> and <b>server</b> {{based on}} netgraph for FreeBSD from the LIP6 University and 6WIND.|$|R
5000|$|If the MUA {{is badly}} configured, {{it can also}} use a {{different}} relay, such as an outmoded <b>open</b> <b>relay,</b> that often doesn't authenticate the user.|$|R
