270|239|Public
5000|$|Inheritance : A {{specific}} type of relationship used in <b>object-oriented</b> <b>technology</b> is inheritance.|$|E
5000|$|Application Development Using <b>Object-Oriented</b> <b>Technology.</b> Danny B. Lange. In Proceedings of the IPSJ Symposium on Information Science, 1993.|$|E
50|$|Festi {{is created}} {{with use of}} <b>object-oriented</b> <b>technology</b> of {{software}} development that strongly complicates researches by a method of the reverse engineering and does a bot easily ported for other operating systems.|$|E
5000|$|... 1993. Objects {{in action}} : {{commercial}} applications of <b>object-oriented</b> <b>technologies.</b> With David A. Taylor and {{the assistance of}} William Morrissey ...|$|R
5000|$|Program Explorer: A Program Visualizer for C++. Danny B. Lange and Yuichi Nakamura. In Proceedings of the USENIX Conference on <b>Object-Oriented</b> <b>Technologies</b> (COOTS), 1995.|$|R
40|$|Various {{kinds of}} {{distributed}} applications {{have been developed}} by using <b>object-oriented</b> <b>technologies.</b> <b>Object-oriented</b> <b>technologies</b> like CORBA are widely used to realize the interoperability of the applications. Object-oriented systems are composed of multiple objects which cooperate to achieve some objectives by passing messages. In addition to realizing the interoperability, {{it is essential to}} make the system secure. The secure system is required to not only protect objects from illegally accessed but also prevent illegal information flow among objects. In this paper, we discuss role-based purpose-oriented access control model in the object-oriented systems and how to resolve illegal information flow. 1 Introduction By using <b>object-oriented</b> <b>technologies,</b> various kinds of object-oriented systems like database systems [2] and languages like C++ and JAVA [9] have been developed. Object-oriented systems are composed of multiple objects which cooperate to achieve some objectives by exchan [...] ...|$|R
50|$|Taskon was a Norwegian IT {{enterprise}} {{which developed}} systems using <b>object-oriented</b> <b>technology.</b> The company also provided advisory and consultancy services, products, and training {{within the field}} of object-oriented systems development. Formed in 1986 by Trygve Reenskaug, Taskon's expertise was in the area of analysis, design, and implementation of component-based systems.|$|E
50|$|In {{the early}} days of <b>object-oriented</b> <b>technology</b> before the mid-1990s, there were many {{different}} competing methodologies for software development and object-oriented modeling, often tied to specific Computer Aided Software Engineering (CASE) tool vendors. No standard notations, consistent terms and process guides were the major concerns at the time, which degraded communication efficiency and lengthened learning curves.|$|E
50|$|The few {{remaining}} {{expert system shell}} companies were eventually forced to downsize and {{search for new markets}} and software paradigms, like case based reasoning or universal database access. The maturation of Common Lisp saved many systems such as ICAD which found application in knowledge-based engineering. Other systems, such as Intellicorp's KEE, moved from Lisp to a C++ (variant) on the PC and helped establish <b>object-oriented</b> <b>technology</b> (including providing major support for the development of UML).|$|E
50|$|Chanathip Namprempre, Jeremy Sussman, and Keith Marzullo. Implementing causal logging using OrbixWeb interception. Proceedings of the Fifth USENIX Conference on <b>Object-Oriented</b> <b>Technologies</b> and Systems (COOTS'99). USENIX Assoc. 1999, pp. 57-67. Berkeley, CA, USA.|$|R
40|$|Recently, the {{introduction}} of <b>object-oriented</b> <b>technologies</b> into accelerator controls has been understood as a promis-ing future direction. Among <b>object-oriented</b> <b>technologies,</b> Java and CORBA have been widely accepted in all indus-trial fields. We, the KEK electron/positron injector-linac team members, have investigated the possibility to intro-duce such technologies for the real-time display of the ac-celerator status. A test program was developed with Java, a CORBA client, which communicates with the CORBA server at a Unix workstation of the KEK linac control sys-tem. As a result, {{the status of the}} KEK linac was shown at a web-browser of a remote PC. Experiences and discussions are given in this article. ...|$|R
40|$|Talks {{about the}} {{achieved}} and potentially obtainable advances in electromagnetics with innovative IT technologies. This work contains tutorial chapters, which introduce technologies, such as parallel and distributed computing, <b>object-oriented</b> <b>technologies,</b> grid computing, semantic grids, agent based computing and service-oriented architectures...|$|R
50|$|Maier {{has been}} {{chairman}} of the program committee of ACM SIGMOD. He also served as {{an associate editor of}} ACM Transactions on Database Systems. Maier has consulted with Tektronix, Inc., Servio Corporation, the Microelectronics and Computer Technology Corporation (MCC), Digital Equipment Corporation, Altair, Honeywell, Texas Instruments, IBM, Microsoft, Informix, Oracle Corporation, NCR, and Object Design, as well as several governmental agencies. He is {{a founding member of the}} Data-Intensive Systems Center (DISC), a joint project of OGI and Portland State University. He is the author of books on relational databases, logic programming and object-oriented databases, as well as papers in database theory, <b>object-oriented</b> <b>technology</b> and scientific databases. He received the Presidential Young Investigator Award from the National Science Foundation in 1984 at OGC, and was awarded the 1997 SIGMOD Edgar F. Codd Innovations Award for his contributions in objects and databases at UW. He is also an ACM Fellow.|$|E
5000|$|The primary {{difference}} between the two paradigms was in the degree that encapsulation was considered a major requirement. For the object-oriented paradigm encapsulation was one of the if not the most critical requirement. The desire to reduce the potential interactions between software components and hence manage large complex systems was a key driver of <b>object-oriented</b> <b>technology.</b> For the frame language camp this requirement was less critical than the desire to provide a vast array of possible tools to represent rules, constraints, and programming logic. In the object-oriented world everything is controlled by methods and the visibility of methods. So for example, accessing the data value of an object property must be done via an accessor method. This method controls things such as validating the data type and constraints on the value being retrieved or set on the property. In Frame languages these same types of constraints could be handled in multiple ways. Triggers could be defined to fire before or after a value was set or retrieved. Rules could be defined that managed the same types of constraints. The slots themselves could be augmented with additional information (called [...] "facets" [...] in some languages) again with the same type of constraint information.|$|E
40|$|This {{course is}} a {{comprehensive}} introduction into <b>object-oriented</b> <b>technology</b> and its application. <b>Object-oriented</b> <b>technology</b> requires a rethinking and reeducation of software development processes. B. Approach C. Goal This course {{provides an overview of}} <b>object-oriented</b> <b>technology</b> that emphasizes both theoretical and practical topics using a learning-by-doing methodology. The primary goal of this course is to prepare students to be knowledgeable in <b>object-oriented</b> <b>technology.</b> <b>Object-oriented</b> <b>technology</b> encourages reusability resulting in reduced cost and less time required for software development...|$|E
40|$|<b>Object-Oriented</b> <b>technologies</b> are {{becoming}} pervasive in many software development organizations. However, many methods, processes, tools, or notations {{are being used}} without thorough evaluation. Empirical studies aim at investigating the performance of such technologies {{and the quality of}} the resulting object-oriented (OO) software products. In othe...|$|R
40|$|Whereas most <b>object-oriented</b> <b>technologies</b> {{traditionally}} achieve reuse in a bottom-up fashion, {{the research}} areas of architectures and domain analysis advocate a top-down approach to achieve systematic reuse. Practice {{shows that a}} combination of both is often desired or needed. The reuse contracts model can provide such a combination and can make the connection between object technology, architectures and domain analysis...|$|R
40|$|This paper {{presents}} the CAMELEON “Modelware” platform {{result of a}} R&D project led by CNES (French Space Agency) and developed by Alcatel TITN Answare and IRIT Research laboratory. CAMELEON is a distributed management platform for complex systems. This project provides an innovative approach for global and distributed management system involving <b>object-oriented</b> <b>technologies</b> such as CIM, CORBA and Java. 1. Towards {{a new generation of}} Network an...|$|R
40|$|<b>Object-Oriented</b> <b>technology</b> {{is often}} {{described}} in terms of an interwoven troika of themes: encapsulation, polymorphism, and inheritance. But these themes are firmly tied with the concept of iden-tity. If <b>object-oriented</b> <b>technology</b> is to be successfully scaled from the development of independent applica-tions to development of integrated suites of applica-tions, it must relax its emphasis on the objecf. The technology must recognize more directly that a mul-tiplicity of subjective views delocalizes the concept of object, and must emphasize more the binding concept of identity to tie them together. This paper explores this shift to a style of <b>object-oriented</b> <b>technology</b> that emphasizes the subjective views: Subject-Oriented Programming. 1...|$|E
40|$|Abstract. Our study {{applies the}} <b>object-oriented</b> <b>technology</b> to extract urban green automatically, which could {{increase}} accuracy through evaluating and analyzing {{the quality of}} disaster spatial data by measuring the disfigurement points and disfigurement rate in disaster GIS based on error analysis. The study shows that for high resolution remote sensing images that the accuracy may increase about 20 % based on <b>object-oriented</b> <b>technology</b> using remote sensing image processing software eCognition than based on traditional supervised classification method using software ERDAS...|$|E
40|$|Based on an {{analysis}} of contemporaneous materials, we present a history of <b>object-oriented</b> <b>technology</b> from the late 1970 s, when object orientation was little-known, until the early 1990 s, when <b>object-oriented</b> <b>technology</b> was widely accepted across computer science. We identify three phases of emergence: interpretative flexibility; community and dissemination; and pervasiveness. We describe the role of various communities, constituencies, fora and programming languages, and show how the intellectual history of an idea underpinning a technology differs from that technology’s path of adoption...|$|E
40|$|Sharing of {{software}} with <b>object-oriented</b> <b>technologies</b> {{is a recent}} trend in accelerator control. Among the objectoriented technologies, Java and CORBA have been widely accepted in all industrial fields. We have studied use of both Java and CORBA {{in order to develop}} sharable applications among various accelerators. Sample applications have been made at the KEK electron/positron injector-linac. Evaluation of the application and discussion are given in this article. ...|$|R
50|$|Founded in 1980, IC marketed {{an early}} expert system {{environment}} (Knowledge Engineering Environment - KEE) for development and deployment of knowledge systems on the Lisp machines that had several advanced features, such as truth maintenance. KEE used the backward-chaining method of Mycin {{which had been}} developed at Stanford. While moving KEE functionality to the PC, IC created {{one of the early}} <b>object-oriented</b> <b>technologies</b> for commercial programming development environments (LiveModel).|$|R
40|$|Knowledge-based {{integrated}} {{information systems}} (KBIIS) denote {{a class of}} systems that involve the integration of heterogeneous information resources. These information resources may include heterogeneous distributed database systems, knowledge-based systems (such as expert systems) involving heterogeneous knowledge representations, and conventional application programs and their associated processors. Heterogeneous distributed database <b>technology</b> and <b>object-oriented</b> database <b>technology</b> have extended conventional database technology {{in an attempt to}} deal with some of the issues involved in integrating these information sources. This paper describes applications of <b>object-oriented</b> database <b>technology</b> in KBIIS, including the integration of heterogeneous (and distributed) system components, and heterogeneous data and knowledge representations. The paper also describes a further extension of <b>object-oriented</b> database <b>technology,</b> which we call distributed object management technology, and whi [...] ...|$|R
40|$|This {{position}} paper describes an object-oriented approach to connecting trusted database management systems. In particular, an object {{model of the}} heterogeneous environment, {{the operation of the}} system, and a possible approach to simulating the environment using <b>object-oriented</b> <b>technology</b> are discussed. 1...|$|E
40|$|Experience. of the {{industrial}} use of <b>object-oriented</b> <b>technology</b> indicates that. a disciplined softwareproces. s is the essential factor determining success f 4]. Key. components of a software process are systexna. tk analysis and design teih. niques. The first efforts at employing such techni~forohject-orientedsoftwaredevelopmen...|$|E
40|$|Experience of the {{industrial}} use of <b>object-oriented</b> <b>technology</b> indicates that a disciplined software process is the essential factor determining success [4]. Key components of a software process are systematic analysis and design techniques. The first efforts at employing such techniques for object-oriented software developmen...|$|E
40|$|Object-oriented {{database}} systems began {{developing in}} the mid- 80 ’s {{out of a}} necessity {{to meet the requirements}} of applications beyond the data processing applications which were [are] served by relational database systems. This paper serves as an overview on the achievements of <b>object-oriented</b> database <b>technology</b> so far, and also discusses the weaknesses that have to be yet resolved by the object-oriented database community before <b>object-oriented</b> database <b>technology</b> can become as widespread as relational databases. ...|$|R
50|$|Meta Data Services is an <b>object-oriented</b> {{repository}} <b>technology</b> {{that can}} be integrated with enterprise information systems or with applications that process metadata.|$|R
40|$|This paper {{presents}} {{the application of}} combined deductive and <b>object-oriented</b> <b>technologies</b> to a complex scheduling (timetable) problem. This approach emphasizes local propagation of constraints, which we perform with deductive rules, and combines it with global pruning heuristics, which we represent with methods (in a procedural manner) attached to objects. Because both components are essential to ensure success, we see this scheduling application as an interesting demonstration of the synergy between <b>object-oriented</b> and deductive <b>technology.</b> We provide a precise description of the problem, discuss what makes it difficult, and present detailed techniques that we used for its resolution. 1. Introduction Timetable scheduling problems (e. g., course scheduling for universities [Car 86]) are common problems that are usually solved by ad-hoc algorithms packaged as dedicated software. Such problems are not only difficult from a theoretical perspective (most of them are NPhard problems) but [...] ...|$|R
40|$|The work {{accomplished}} {{during the}} past nine months {{in order to help}} three different organizations involved in Flight Planning and in Mission Operations systems, to transition to <b>Object-Oriented</b> <b>Technology,</b> by adopting one of the currently most widely used Object-Oriented analysis and Design Methodology is summarized...|$|E
40|$|Domain {{engineering}} aims {{to support}} systematic reuse, focusing on modeling common knowledge in a problem domain. Ontologies {{have also been}} pointed as holding great promise for software reuse. In this paper, we present ODE (Ontology-based Domain Engineering), an ontological approach for domain engineering that aims to join ontologies and <b>object-oriented</b> <b>technology...</b>|$|E
40|$|<b>Object-oriented</b> <b>technology</b> {{has become}} {{mature enough to}} satisfy many new {{requirements}} coming from areas like computer -aided design (CAD), computer-integrated manufacturing (CIM), or software engineering (SE). However, a competetive information management infrastructure often demands to merge data from CAD-, CIM-, or SE-systems with business data stored in a relational system. In addition, complex dependencies between those data stored in the different systems might exist and should be maintained. One approach for seamless integration of object-oriented and relational systems is to migrate the data (and the corresponding schema) from a relational to an object-oriented system. In this paper we describe an integrated design environment that supports the migration process and overcomes major drawbacks of comparable approaches. 1 Motivation <b>Object-oriented</b> <b>technology</b> has become mature enough to satisfy many new requirements coming from areas like computer-aided design (CAD), computer-integr [...] ...|$|E
40|$|With the {{widespread}} adoption of <b>object–oriented</b> <b>technologies,</b> {{the lack of}} computationally efficient and scalable approaches is limiting the ability to model and analyze the history of large object–oriented software systems. This paper proposes an approximate representation of object– oriented code characteristics, inspired by pattern recognition centroids for clustering. An interesting application of such a representation is a linear–time complexity algorithm to detect duplicate or nearly duplicated code in object–oriented systems. The algorithm accuracy and time complexity were assessed on 11 releases of a large software system, the Eclipse Framework. Keywords: Object–Oriented Software Evolution, Clone Detection, Source Code Analysi...|$|R
40|$|Abstract. The annual European {{workshop}} on Object Orientation and Web Services focusses challenges and potentials of service-oriented computing {{in relation to}} <b>object-oriented</b> <b>technologies</b> and methodologies. In particular it brings together the academic and the industrial perspective on Web Services. This year’s issue was characterised by the competency and motivation of the participants, both workshop activists who presented their specific results as well as organisers and invited speaker, who contributed their broad experience. This report outlines the contributions and discussions of the event, {{as well as the}} conclusions reached by the participants. 1 Structure of the Worksho...|$|R
40|$|Abstract: If formal {{techniques}} {{are to be}} more widely accepted then they should evolve as current software engineering approaches evolve. Current techniques {{in the development of}} distributed systems use interface definition languages (IDLs) as a basis for the underlying communication and also as an abstraction tool. <b>Object-oriented</b> <b>technologies</b> [6] and the idea of engineering software through frameworks [5] are also widely accepted approaches in developing software. In this paper we show how the formal specification language SDL and associated tool support have been applied in the TOSCA 1 project to engineer telecommunication services using these current techniques...|$|R
