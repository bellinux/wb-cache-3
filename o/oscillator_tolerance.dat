3|5|Public
5000|$|All nodes on the CAN network must {{operate at}} the same nominal bit rate, but noise, phase shifts, <b>{{oscillator}}</b> <b>tolerance</b> and oscillator drift mean that the actual bit rate {{may not be the}} same as the nominal bit rate. [...] Since a separate clock signal is not used, a means of synchronizing the nodes is necessary. Synchronization is important during arbitration since the nodes in arbitration must be able to see both their transmitted data and the other nodes' transmitted data {{at the same}} time. Synchronization is also important to ensure that variations in oscillator timing between nodes do not cause errors.|$|E
40|$|Speckled Computing {{is a novel}} {{vision of}} a {{wireless}} sensor network consisting of small nodes which can sense, compute and network wirelessly. The nodes will individually have limited power and processing resources, but together will form a powerful processing system. Electrical power resources at such a volume are severely restricted, and as such design decisions are made with low-power as the first priority. This work examines the use of Manchester encoding in the digital transceiver to reduce the complexity of symbol synchronisation. A Manchester decoder has been implemented which has the useful property of being tolerant to oscillator inaccuracies, allowing a cheap and low-power clock source to be employed. A realistic implementation of the decoder using rectangular pulseshaping and an oversampling ratio of 8 allows an on-chip <b>oscillator</b> <b>tolerance</b> of more than 11 %...|$|E
40|$|Determination of Bit Timing Parameters for the CAN Controller SJA 1000 Philips Semiconductors Application Note AN 97046 2 Philips Electronics N. V. 1997 All {{rights are}} reserved. Reproduction {{in whole or}} in part is {{prohibited}} without the prior written consent of the copyright owner. The information presented in this document does not form part of any quotation or contract, is believed to be accurate and reliable and may be changed without notice. No liability will be accepted by the publisher for any consequence of its use. Publication thereof does not convey nor imply any license under patent- or other industrial or intellectual property rights. The CAN protocol provides for programming of the bit rate, and the number and location of data samples in a bit period. Optimization of these parameters guarantees message synchronization and proper error detection at the extremes of <b>oscillator</b> <b>tolerance</b> and propagation delay. A step by step method for calculating optimum CAN bit timing para [...] ...|$|E
50|$|Local <b>oscillator</b> <b>tolerances</b> {{and lack}} of time {{synchronization}} between the nodes will result in minor time frames drifting away from each other. This does not adversely affect message latencies {{as long as the}} duration of the minor time frame in all nodes matches closely. To ensure predictability, all aperiodic messages must be included in the bandwidth management calculations.|$|R
50|$|In a standard-compliant {{communication}} system, {{such as the}} IEEE 802.11 WLAN the <b>oscillator</b> precision <b>tolerance</b> is specified to be {{less than}} ±20 ppm, so that CFO is in the range from - 40 ppm to +40 ppm.|$|R
40|$|Counting circuit corrects errors when side lock occurs. Digital error-detection-and-correction circuit in color-television {{oscillator}} circuit provides synchronization when color-burst frequency drifts outside normal tolerance. Digital side-lock-prevention circuit used {{in television}} color-burst phase-lock-loop <b>oscillator</b> provides greater <b>tolerance</b> of off-frequency signals than crystal-controlled oscillators...|$|R
40|$|Abstract—This paper {{studies the}} {{specifications}} of gated-oscillator-based clock and data recovery circuits (GO CDRs) designed for short haul optical data communication systems. Jitter tolerance (JTOL) and frequency tolerance (FTOL) are analyzed and modeled as two main design parameters {{for the proposed}} topology to explore the main tradeoffs in design of low-power GO CDRs. Based on this approach, a top-down design methodology is presented to implement a low-power CDR unit while the JTOL and FTOL requirements of the system are simultaneously satisfied. Using standard digital 0. 18 m CMOS technology, an 8 -channel CDR system has been realized consuming 4. 2 mW/Gb/s/channel and occupying a silicon area of 0. 045 mm 2 /channel, with the total aggregate data bit rate of 20 Gb/s. The measured FTOL is 3. 5 % and no error was detected for a 2 31 1 pseudo-random bit stream (PRBS) input data for 30 minutes, meaning that the bit error rate (BER) is smaller than 10 12. Meanwhile, a shared-PLL (phase-locked loop) with a wide tuning range and compensated loop gain has been introduced to tune the center frequency of all CDR channels to the desired value. Index Terms—Chip-to-chip interconnection, clock and data recovery circuit, CMOS integrated circuits, frequency <b>tolerance,</b> gated <b>oscillator,</b> jitter <b>tolerance,</b> optical data communication, short-haul. I...|$|R
40|$|A {{document}} {{discusses the}} utilization of embedded clocks inside of operating network data links as an auxiliary clock source to satisfy local oscillator monitoring requirements. Modem network interfaces, typically serial network links, often contain embedded clocking information of very tight precision to recover data from the link. This embedded clocking data can be utilized by the receiving device to monitor the local <b>oscillator</b> for <b>tolerance</b> to required specifications, often important in high-integrity fault-tolerant applications. A device can utilize a received embedded clock {{to determine if the}} local or the remote device is out of tolerance by using a single link. The local device can determine if it is failing, assuming a single fault model, with two or more active links. Network fabric components, containing many operational links, can potentially determine faulty remote or local devices in the presence of multiple faults. Two methods of implementation are described. In one method, a recovered clock can be directly used to monitor the local clock as a direct replacement of an external local oscillator. This scheme is consistent with a general clock monitoring function whereby clock sources are clocking two counters and compared over a fixed interval of time. In another method, overflow/underflow conditions can be used to detect clock relationships for monitoring. These network interfaces often provide clock compensation circuitry to allow data to be transferred from the received (network) clock domain to the internal clock domain. This circuit could be modified to detect overflow/underflow conditions of the buffering required and report a fast or slow receive clock, respectively...|$|R

