10000|10000|Public
5|$|B-1B: The B-1B is {{a revised}} B-1 design with reduced radar {{signature}} {{and a top}} speed of Mach1.25. It is <b>optimized</b> <b>for</b> low-level penetration. A total of 100 B-1Bs were produced.|$|E
5|$|Symantec has {{released}} {{a special edition}} of Norton Internet Security <b>optimized</b> <b>for</b> netbooks. This is available as download from the Symantec website or in a USB thumb drive. Symantec states that the Netbook edition is <b>optimized</b> <b>for</b> netbooks. The main display is optimized to provide support for the 800 x 480 screen resolution. In addition, non-critical tasks are delayed while the netbook is on battery. Furthermore, the Netbook edition contains complimentary access to Norton's secure online backup and parental control to protect children as they surf the web.|$|E
5|$|The {{baseline}} {{performance of}} a Mach2-class fighter with long range and a bomber-sized payload would be the template {{for the next generation}} of large and light/middle-weight fighters <b>optimized</b> <b>for</b> daylight air combat.|$|E
5000|$|Formally, <b>optimizing</b> <b>for</b> {{robustness}} or <b>optimizing</b> <b>for</b> opportuneness {{yields a}} preference relation {{on the set}} of decisions, and the decision rule is the [...] "optimize with respect to this preference".|$|R
2500|$|Codon <b>optimize</b> <b>for</b> {{recombinant}} protein production in any organism using multiple algorithms ...|$|R
50|$|Swiftweasel is {{compiled}} with {{options that}} <b>optimize</b> <b>for</b> speed rather than binary size.|$|R
5|$|To {{allow more}} {{software}} {{to run on}} the Itanium, Intel supported the development of compilers <b>optimized</b> <b>for</b> the platform, especially its own suite of compilers.|$|E
5|$|A {{cellphone}} {{version was}} released in Japan on i-mode distribution service on August 25, 2011. An iOS version was released on December 8, 2011. This version {{is based on the}} Nintendo DS version, with graphics <b>optimized</b> <b>for</b> iOS. The game was later released for Android on October 29, 2012.|$|E
5|$|All Eurasian {{composite}} bows {{derive from}} the same nomad origins, but every culture that used them has made its own adaptations to the basic design. The Turkish, Mongolian, and Korean bows were standardized when archery lost its military function and became a popular sport. Recent Turkish bows are <b>optimized</b> <b>for</b> flight shooting.|$|E
5000|$|... {{manufacturing}} testing with {{an emphasis}} on checking assembly-related issues and <b>optimizing</b> <b>for</b> time ...|$|R
5000|$|Common Lisp - Some {{implementations}} perform tail-call optimization during compilation if <b>optimizing</b> <b>for</b> speed ...|$|R
5000|$|... layered Successive Interference Cancellation (SIC), {{performance}} {{could be}} further improved when <b>optimizing</b> <b>for</b> QPSK vs. QPSK.|$|R
5|$|Dante Alighieri was {{designed}} by Rear Admiral Engineer Edoardo Masdea, Chief Constructor of the Regia Marina, based on the ideas of General Vittorio Cuniberti who advocated a battleship with main guns of a single caliber and <b>optimized</b> <b>for</b> broadside fire. In addition, the ship's superstructure and funnels were to be kept to a minimum.|$|E
5|$|General-purpose {{computing}} on graphics processing units (GPGPU) is {{a fairly}} recent trend in computer engineering research. GPUs are co-processors that have been heavily <b>optimized</b> <b>for</b> computer graphics processing. Computer graphics processing is a field dominated by data parallel operations—particularly linear algebra matrix operations.|$|E
5|$|In May 2009, Java SE was ported and <b>optimized</b> <b>for</b> Snapdragon. At the November 2009 Computex Taipei show, Qualcomm {{announced}} the QSD8650A {{addition to the}} Snapdragon product suite, {{which was based on}} 45 nanometer manufacturing processes. It featured a 1.2GHz processor and had lower power consumption than prior models.|$|E
40|$|Data Stream Management Systems (DSMS) {{typically}} host multiple Continuous Queries (CQ) {{that process}} streams of data. In this paper, {{we examine the}} problem of how to schedule CQs in a DSMS to <b>optimize</b> <b>for</b> average QoS. We show that unlike standard on-line systems, scheduling policies in DSMSs that <b>optimize</b> <b>for</b> average response time will be different than policies that <b>optimize</b> <b>for</b> average slowdown which is more appropriate metric to use in the presence of a heterogeneous workload. We also propose a hybrid scheduling policy based on slowdown that strikes a fine balance between performance and fairness. We further discuss how our policies can be efficiently implemented and extended to exploit sharing in optimized multi-query plans and multi- stream CQs. Finally, we experimentally show using real data that our policies outperform currently used ones...|$|R
30|$|Minimize memory {{usage of}} the index and <b>optimize</b> <b>for</b> auto-incremental integer keys and make the zero false {{positive}} rate of flash/disk reads key-value store.|$|R
30|$|Finally, {{note that}} the concept of the MSRL can be used to <b>optimize,</b> <b>for</b> example, the {{waveform}} and/or the array geometry for a specific problem.|$|R
5|$|KSAT {{operates}} two polar ground stations <b>optimized</b> <b>for</b> low Earth orbit (LEO) satellites, {{the other}} being SvalSat at Longyearbyen in Svalbard, Norway. These {{are the only}} two ground stations able to communicate with all orbits of LEO satellites. By using both stations, customers can download data twice per orbit, twenty-six times per day, with only a forty-minute maximum delay.|$|E
5|$|KSAT {{operates}} two polar ground stations <b>optimized</b> <b>for</b> low Earth orbit (LEO) satellites, {{the other}} being TrollSat at Troll in Antarctica. These {{are the only}} two ground stations able to see a polar-orbiting satellite on every revolution. By using both stations, customers can communicate with a satellite twice per orbit.|$|E
5|$|The Imperator Aleksandr II-class battleships {{were two}} battleships {{built for the}} Imperial Russian Navy in the 1880s. They were {{intended}} to counter the small armored ships of the other Baltic powers. Construction was very prolonged and the ships were virtually obsolescent when completed. They were <b>optimized</b> <b>for</b> ramming.|$|E
3000|$|... (by {{averaging}} on all patches) {{that we have}} to <b>optimize,</b> <b>for</b> the satisfactory {{approximation error}} obtained for every patch, is much (several times) smaller then N.|$|R
40|$|The {{choice of}} the {{separation}} wavenumber Kd for the two-scale scattering approximation is examined by the comparison of two-scale calculations with exact numerical solutions using the moment method. It {{was found that the}} optimal choice of Kd is near k/ 2 when attempting to <b>optimize</b> <b>for</b> all incidence angles. When <b>optimizing</b> <b>for</b> specific incidence angles, Kd varied from k/ 5 at low incidence angles to just below k at higher incidence angles. These numerical results are in rough agreement with previous theoretical derivations of the separation wavenumber...|$|R
3000|$|... where β is a {{parameter}} to <b>optimize.</b> <b>For</b> {{each candidate}} time point n, the interval within which it must fulfill the maximum condition {{is set to}} [n−t [...]...|$|R
5|$|The THSR 700T {{trainset}} {{is based}} on the 700 Series Shinkansen trainset used by JR Central and JR West in Japan. This marked the first time Shinkansen technology was exported to a foreign country. Customization was focused on adapting to Taiwan's climate and geography, and the nose shape was <b>optimized</b> <b>for</b> tunnels wider than those in Japan.|$|E
5|$|The final {{instrument}} was the HSP, {{designed and built}} at the University of Wisconsin–Madison. It was <b>optimized</b> <b>for</b> visible and ultraviolet light observations of variable stars and other astronomical objects varying in brightness. It could take up to 100,000 measurements per second with a photometric accuracy of about 2% or better.|$|E
5|$|The game {{is powered}} by an {{internal}} engine developed previously by Insomniac Games for its game Fuse. The engine of the game was reworked and <b>optimized</b> <b>for</b> the Xbox One. The game runs on 900p at 30 frame rate per second. The game originally ran at a higher definition of 1080p, but {{it was decided to}} fix it at 900p so that more actions and enemies can appear on-screen.|$|E
40|$|In topologically-protected quantum computation, quantum gates can {{be carried}} out by adiabatically {{braiding}} two-dimensional quasiparticles, reminiscent of entangled world lines. Bonesteel et al. [Phys. Rev. Lett. 95, 140503 (2005) ], as well as Leijnse and Flensberg [Phys. Rev. B 86, 104511 (2012) ] recently provided schemes for computing quantum gates from quasiparticle braids. Mathematically, the problem of executing a gate becomes that of finding a product of the generators (matrices) in that set that approximates the gate best, up to an error. To date, efficient methods to compute these gates only strive to <b>optimize</b> <b>for</b> accuracy. We explore the possibility of using a generic approach applicable to a variety of braiding problems based on evolutionary (genetic) algorithms. The method efficiently finds optimal braids while allowing the user to <b>optimize</b> <b>for</b> the relative utilities of accuracy and/or length. Furthermore, when <b>optimizing</b> <b>for</b> error only, the method can quickly produce efficient braids. Comment: 6 pages 4 figure...|$|R
40|$|In this paper, {{we explore}} the {{challenges}} in scaling on-chip networks towards kilo-core processors. Current low-radix topologies <b>optimize</b> <b>for</b> fast local communication, but do not scale well to kilo-core systems {{because of the large}} number of routers required. These increase both power and hop count. In contrast, symmetric high-radix topologies <b>optimize</b> <b>for</b> global communication with fewer hop counts, but degrade local com-munication with their large, slow routers. To address both local and global communication optimiza-tions independently, we decouple the interconnect design using asymmetric high-radix topologies. By setting a design goal of matching router speed with wire speed, our proposed topolo-gies use fast medium-radix routers to <b>optimize</b> <b>for</b> local com-munication and a few slow high-radix routers that reduce hop count to <b>optimize</b> <b>for</b> global communication. Our asymmetric high-radix designs are enabled by recently proposed Swizzle-Switches, which allow us to achieve performance scalability within realistic power budgets. We propose and evaluate two asymmetric high-radix topolo-gies: Super-Star (asymmetric folded Clos) and Super-StarX (asymmetric folded Clos with superimposed mesh). Our evalu-ations show that the best performing asymmetric high-radix topology improves average network latency over a mesh by 45 % while reducing the power consumption by 40 %. When compared to symmetric high-radix topologies network through-put is improved by 2. 9 × while still providing similar latency benefits and power efficiency. 1...|$|R
50|$|An {{intuitive}} {{explanation is}} that <b>optimizing</b> <b>for</b> the mean-squared error of a combined estimator {{is not the same}} as <b>optimizing</b> <b>for</b> the errors of separate estimators of the individual parameters. In practical terms, if the combined error is in fact of interest, then a combined estimator should be used, even if the underlying parameters are independent; this occurs in channel estimation in telecommunications, for instance (different factors affect overall channel performance). On the other hand, if one is instead interested in estimating an individual parameter, then using a combined estimator does not help and is in fact worse.|$|R
5|$|The site uses a pink {{color palette}} and emulates the magazine-style layout of The Verge. The site was {{programmed}} to use HTML5 standards with a responsive design that adapts {{to the screen}} dimensions of laptops, tablets, and smartphones. This is partially to remove need for a separate mobile version. Their longform journalism was <b>optimized</b> <b>for</b> reading on tablets.|$|E
5|$|A MaK-built DB Class 240 {{locomotive}} was test-run in Norway during 1990. On 23 November 1992, NSB's board {{decided to}} order ten similar units. The order was later expanded with another two units because NSB {{was offered a}} lower price than originally stipulated. The Di6 would have motors from Siemens, who had bought MaK, and would be <b>optimized</b> <b>for</b> Norwegian conditions and standards. The contract was worth NOK380 million, or NOK32 million per unit. At the same time, NSB also made an order for 20 smaller diesel-electric locomotives from MaK, the Di8. Between the two new classes, they were to replace all the Di3s.|$|E
5|$|A PlayStation 3 {{version of}} Oblivion was {{released}} on March 20, 2007 in North America, and April 27, 2007 in Europe, following delays similar to those for the Xbox 360 release. The PlayStation 3 release was touted for its improvement over the graphics of the PC and Xbox 360 versions, {{although some of the}} improved shader routines <b>optimized</b> <b>for</b> the PlayStation 3 release were set to be ported over to the other releases through patches. A plan to distribute content through downloads paid by micropayment was initially met with criticism by customers due to its alleged low value, but later releases—at a reduced price, and with more content—proved more popular.|$|E
30|$|For each experiment, we {{randomly}} {{split the}} data into two equal parts, one {{for training and}} one for testing. For training, we used 10 -fold cross validation to tune the parameters. As CHI is a complex data fusion mechanism that synthesizes monotonicity of the disease progression, label information, and statistical homogeneity, we use a comprehensive scheme to compare DL-CHI with CHI. Specifically, we compared the two models (1) when only monotonicity is used for model training (i.e., by setting β= 0 and <b>optimizing</b> <b>for</b> α), (2) when only the label information is used for model training (i.e., by setting α= 0 and <b>optimizing</b> <b>for</b> β), and (3) when a full model is used (i.e., by <b>optimizing</b> <b>for</b> both α and β). In addition, we performed {{in each of the}} settings by randomly down-sampling the training data, i.e., only using a proportion of the data ranging from 15 to 75 %, to train both models. A model that can maintain good performances with less training data in obviously more promising in healthcare applications while data collection is relatively more costly than other real-world applications.|$|R
40|$|With an {{increasing}} use of data mining tools and techniques, we envision that a Knowledge Discovery and Data Mining System (KDDMS) will have to support and <b>optimize</b> <b>for</b> the following scenarios: 1) Sequence of Queries: A user may analyze one or more datasets by issuing a sequence of related complex mining queries, and 2) Multiple Simultaneous Queries: Several users may be analyzing a set of datasets concurrently, and may issue related complex queries. This paper presents a systematic mechanism to <b>optimize</b> <b>for</b> the above cases, targeting the class of mining queries involving frequent pattern mining on one or multiple datasets. We present a system architecture and propose new algorithms to simultaneously optimize multiple such queries and use a knowledgeable cache to store and utilize the past query results. We have implemented and evaluated our system with both real and synthetic datasets. Our experimental results show that our techniques can achieve a speedup of up to a factor of 9, compared with the systems which do not support caching or <b>optimize</b> <b>for</b> multiple queries...|$|R
50|$|Because NSPE {{ensures that}} when a polygon's vertex is dragged {{it will always be}} on the NURBS surface, NSPE greatly helps the user to avoid unintentionally {{changing}} the shape of the model when <b>optimizing</b> <b>for</b> real time animation.|$|R
