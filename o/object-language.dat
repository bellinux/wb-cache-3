52|3|Public
5000|$|The Pinocchio paradox is, in a way, a {{counter-example}} to {{solutions to}} the Liar that would exclude semantic predicates from an <b>object-language,</b> because [...] "is growing" [...] is not a semantic predicate.|$|E
5000|$|... where S is {{replaced}} by a name of a sentence (in the <b>object-language)</b> and P {{is replaced}} by a translation of that sentence in the metalanguage. So, for example, [...] "La neve è bianca is true if and only if snow is white" [...] is a sentence which conforms to Convention T; the <b>object-language</b> is Italian and the metalanguage is English. The predicate [...] "true" [...] does not appear in the object language, so no sentence of the object language can directly or indirectly assert truth or falsity of itself. Tarski thus formulated a two-tiered scheme that avoids semantic paradoxes such as Russell's paradox.|$|E
40|$|This paper {{discusses}} {{a proposal}} to extend the primitive basis of the HOL logic with a very simple form of quantification over types. It is shown how certain practical problems with using the definitional mechanisms of HOL would be solved by the additional expressive power gained by making this extension. Keyword Codes: F. 4. 1; I. 2. 3 Keywords: Mathematical Logic; Deduction and Theorem Proving. 1 Introduction The version of higher order logic mechanized by the HOL system is essentially Church's formulation of simple type theory [2] extended with explicit rules of definition and with <b>object-language</b> polymorphism of the kind developed by Milner for the LCF logic PP [4]. In this paper a further extension to the logic is proposed [...] -namely, {{the addition of a}} very limited form of <b>object-language</b> quantification over types. The motivation for this extension comes from a particular technical problem that arises when using the definitional mechanisms provided by the HOL logic. This paper explains [...] ...|$|E
50|$|Cultural {{literacy}} {{is a term}} coined by E. D. Hirsch , referring {{to the ability to}} understand and participate fluently in a given culture. Cultural {{literacy is}} an analogy to literacy proper (the ability to read and write letters). A literate reader knows the <b>object-language's</b> alphabet, grammar, and a sufficient set of vocabulary; a culturally literate person knows a given culture's signs and symbols, including its language, particular dialectic, stories, entertainment, idioms, idiosyncrasies, and so on. The culturally literate person is able to talk to and understand others of that culture with fluency, while the culturally illiterate person fails to understand culturally-conditioned allusions, references to past events, idiomatic expressions, jokes, names, places, etc.|$|R
40|$|RTAI {{extension}} to Linux operating system {{makes it possible}} to perform Hard Real-Time (HRT) controls using a commercial PC and utilizing open-source code. This paper details a software installation process, along with the suitable hardware chosen for realizing motion controls using Linux-RTAI. Advantages offered by the possibility of designing and developing motion controls using the powerful tools of high level <b>object-languages</b> (i. e. Simulink) are described. It is proven that the combination of Simulink as a development environment and Linux-RTAI PC as a controller platform brings advantages that can be greatly appreciated in industrial motion control applications, such as: very reduced time for development, diagnostics, design of controls; adequate control performance; cost reductions offered by the open-source status of the operating system...|$|R
40|$|AbstractThe {{theory of}} cut-free sequent proofs {{has been used}} to motivate and justify the design of a number of logic {{programming}} languages. Two such languages, λProlog and its linear logic refinement, Lolli [15], provide for various forms of abstraction (modules, abstract data types, and higher-order programming) but lack primitives for concurrency. The logic programming language, LO (Linear Objects) [2] provides some primitives for concurrency but lacks abstraction mechanisms. In this paper we present Forum, a logic programming presentation of all of linear logic that modularly extends λProlog, Lolli, and LO. Forum, therefore, allows specifications to incorporate both abstractions and concurrency. To illustrate the new expressive strengths of Forum, we specify in it a sequent calculus proof system and the operational semantics of a programming language that incorporates references and concurrency. We also show that the meta theory of linear logic can be used to prove properties of the <b>object-languages</b> specified in Forum...|$|R
40|$|The {{distinction}} between a meta- and an <b>object-language</b> has become increasingly familiar in information science, through the diffusion {{of the concept of}} metadata. A significant antecedent {{can be found in the}} development of formal logic. This paper proposes an analogous distinction for information retrieval research, between discourse about and transformations within systems. The aim is to obtain analytical clarity and economy in research effort. 1...|$|E
40|$|Possibilistic Defeasible Logic Programming (P-DeLP) is a logic {{programming}} language which combines features from argumentation theory and {{logic programming}}, incorporating {{the treatment of}} possibilistic uncertainty at <b>object-language</b> level. The aim {{of this paper is}} twofold: first to present an approach towards extending P-DeLP in order to incorporate fuzzy constants and fuzzy unification, and after to propose a way to handle conflicting arguments {{in the context of the}} extended framework...|$|E
40|$|In {{an essay}} first {{published}} in 1959, Roland Barthes declared that modern literature had become “a mask pointing to itself ”. 1 Barthes described this self-reflexivity as an anxious, even tragic condition, a tortured process in which literature divides itself into the two logically distinct, yet inter-related levels of <b>object-language</b> and meta-language. Asking itself continually the single, self-absorbing question of its own identity, literature becomes a meta-language and thereby ceases to be an <b>object-language</b> capable of depicting or describing anything other than itself. “It follows”, Barthes proclaims, that “for over one hundred years our literature has played a dangerous game with its own death, or in other words, with a manner of living through its own death”. Barthes conjectures in passing that this perpetual self-questioning began with the bourgeoisie’s loss of its bonne conscience. Literature’s self-reflexive turn {{has resulted in a}} variety of fascinating writerly strategies, but has also had the global effect of precluding the emergence of a literature of action and engagement. Ceasing to ask: ‘What is to be done?’, the artist can only utter the words: ‘Who am I?...|$|E
40|$|We present MLSOS, a {{functional}} metalanguage for encoding definitions of structural operational semantics. The key {{features of this}} language are inbuilt support for representing <b>object-language</b> binding structures and performing proof-search. MLSOS uses the nominal {{approach to dealing with}} binders and a FreshML-style generative treatment of atoms. This allows us to prototype systems in a natural way, starting from a semi-formal specification. We outline the main design choices behind the language and illustrate its use. ...|$|E
40|$|International audienceThe Institut National de la Langue Française is at {{the head}} of the largest {{linguistic}} database available in the world. This paper is devoted to the description of software that makes possible the decentralised exploitation of the database without the need to use any data-transmission network. This software, called hyperbase, is written in the hypertalk <b>object-language.</b> It implements the methods of hypertext and emphasizes two main orientations, respectively towards documentation and towards statistics...|$|E
40|$|Recent {{research}} has identified {{the notion of}} indirect consistency as a rationality postulate that ev-ery rule-based argumentation frame-works should satisfy. Possibilistic Defeasible Logic Programming (P-DeLP) is an argumentation frame-work based on logic programming which incorporates a treatment of possibilistic uncertainty at <b>object-language</b> level, in which indirect con-sistency does not hold. In this pa-per we consider a novel approach to computing warranted arguments in P-DeLP which ensures the above ra-tionality postulate and we describe a procedure to effectively compute them...|$|E
40|$|Building on {{the work}} of Peter Hinst and Geo Siegwart, we develop a pragmatised natural {{deduction}} calculus, i. e. a natural deduction calculus that incorporates illocutionary operators at the formal level, and prove its adequacy. In contrast to other linear calculi of natural deduction, derivations in this calculus are sequences of <b>object-language</b> sentences which do not require graphical or other means of commentary in order to keep track of assumptions or to indicate subproofs. (Translation of our German paper "Ein Redehandlungskalkül. Ein pragmatisierter Kalkül des natürlichen Schließens nebst Metatheorie"; online available at [URL]...|$|E
40|$|The aim of {{this article}} is to study the {{phenomenon}} of autonymic modalisation within the framework of communicative dynamism elaborated by Jan Firbas and his colleagues at the University of Brno. Special attention is given to the concept of “second instance”. The autonymic modalisation, making dual use of a text item, involves two semiotic levels, <b>object-language</b> level and metalinguistic level, and thus two parallel communicative dynamisms. The rhematisation at the metalinguistic level is the result of an ad hoc opposition between different metalinguistic aspects of an item depending heavily on different types of contexts...|$|E
40|$|Abstract. Possibilistic Defeasible Logic Programming (P-DeLP) is an argumen-tation {{framework}} {{based on}} logic programming which incorporates a treatment of possibilistic uncertainty at <b>object-language</b> level. In P-DeLP, {{the closure of}} justi-fied conclusions is not always consistent, which has been detected to be an anomaly {{in the context of}} so-called rationality postulates for rule-based argumentation sys-tems. In this paper we present a novel level-based approach to computing war-ranted arguments in P-DeLP which ensures the above rationality postulate. We also show that our solution presents some advantages in comparison {{with the use of a}} transposition operator applied on strict rules...|$|E
40|$|AbstractWe study a modal {{language}} for negative operators—an intuitionistic-like negation and its paraconsistent dual—added to (bounded) distributive lattices. For each non-classical negation an extra operator is hereby adjoined {{in order to}} allow for standard logical inferences to be opportunely restored. We present abstract characterizations and exhibit the main properties of each kind of negative modality, {{as well as of the}} associated connectives that express consistency and determinedness at the <b>object-language</b> level. Appropriate sequent-style proof systems and adequate kripke semantics are also introduced, characterizing the minimal normal logic and a few other basic logics containing such negative modalities and their companions...|$|E
40|$|The paper takes {{issue with}} a claim by Dummett that, in order to aid {{understanding}} between proponents and opponents of logical principles, a semantic theory should make {{the logic of the}} <b>object-language</b> maximally insensitive to the logic of the metalanguage. The general advantages of something closer to a homophonic semantic theory are sketched. A case study is then made of modal logic, with special reference to disputes over the Brouwerian formula (B) in propositional modal logic and the Barcan formula in quantified modal logic. Semantic theories for modal logic within a possible worlds framework satisfy Dummett’s desideratum, since the non-modal nature of the semantics makes the modal logic of the <b>object-language</b> trivially insensitive to the modal logic of the metalanguage. However, that does not help proponents and opponents of the modal principles at issue understand each other. Rather, it makes the semantic theory virtually irrelevant to the dispute, which is best conducted mainly in the object-language; this applies even to Dummett’s own objection to the B principle. Other forms of semantics for modal languages are shown not to alter the picture radically. It is argued that the semantic and more generally metalinguistic aspect of disputes in logic is much less significant than Dummett takes it to be. The role of (non-causal) abductive considerations in logic and philosophy is emphasized, contrary to Dummett’s view that inference to the best explanation is not a legitimate method of argument in these areas. ...|$|E
40|$|For {{the sake}} of simplicity, we adopt the same logical frame as Tarski's in his Wahrheitsbegriff (Wb). There, Tarski is mainly {{interested}} {{in the possibility of}} explicitely defining truth for an <b>object-language,</b> he does not pay much attention to recursive definitions of truth. We say why. However, recursive definitions have advantages of their own. In particular, we prove the positive theorem: if L is of finite order ≥ 4, then a recursive definition is possible for L in a metalanguage of the same order as L. We indicate how this result could be used for a solution of a generalized version of Frege's paradox...|$|E
40|$|This {{paper offers}} a descriptivist {{analysis}} of proper names under an empirical {{assumption that the}} syntax of proper names is complex. I argue that the logical form of the singular use of a proper name is [the [[F w] C]] where w is an <b>object-language</b> pronoun that denotes a possible world and C is a domain restriction variable. World-denoting pronouns and domain restriction variables account for the context-dependence of determiner phrases in general. Since proper names are determiner phrases, they can uniquely and rigidly designate objects via contextualization. The proposed descriptivist analysis avoids the standard objections to classical descriptivism because it treats proper names as contextually produced rigid designators...|$|E
40|$|AbstractNominal {{rewriting}} {{is based}} on the observation that if we add support for α-equivalence to first-order syntax using the nominal-set approach, then systems with binding, including higher-order reduction schemes such as λ-calculus beta-reduction, can be smoothly represented. Nominal rewriting maintains a strict distinction between variables of the <b>object-language</b> (atoms) and of the meta-language (variables or unknowns). Atoms may be bound by a special abstraction operation, but variables cannot be bound, giving the framework a pronounced first-order character, since substitution of terms for variables is not capture-avoiding. We show how good properties of first-order rewriting survive the extension, by giving an efficient rewriting algorithm, a critical pair lemma, and a confluence theorem for orthogonal systems...|$|E
40|$|ABSTRACT. This paper reformulates {{and decides}} a certain {{conjecture}} in Dunn’s ‘Relevant Predication 1 : The Formal Theory ’ (Journal of Philosophical Logic 16, 347 - 381, 1987). This conjecture of Dunn’s relates his <b>object-language</b> characterisation of a property’s being relevant in a variable x to certain grammatical characterisations of relevance, analogous to some given by Helman, in ‘Relevant Implication and Relevant Functions ’ (to appear in Entailment: The Logic of Relevance and Necessity, vol. 2, by Alan Ross Anderson, Nuel Belnap, and J. Michael Dunn et al.) In {{the course of}} the investigation this paper also investigates Kit Fine’s semantics for quantified relevance logics, which appears in his appropriately titled ‘Semantics for Quantified Relevanc...|$|E
40|$|Possibilistic Defeasible Logic Programming (P-DeLP) is a logic {{programming}} language which combines features from argumentation theory and {{logic programming}}, incorporating {{as well the}} treatment of possibilistic uncertainty and fuzzy knowledge at <b>object-language</b> level. Defeasible argumentation in general and P-DeLP in particular provide a way of modelling non-monotonic inference. From a logical viewpoint, capturing defeasible inference relationships for modelling argument and warrant is particularly important, {{as well as the}} study of their logical properties. This paper analyzes a non-monotonic operator for P-DeLP which models the expansion of a given program by adding new weighed facts associated with warranted literals. Different logical properties are studied and contrasted with a traditional SLD-based Horn logic, providing useful comparison criteria that can be extended and applied to other argumentation frameworks...|$|E
40|$|Encodings {{based on}} higher-order {{abstract}} syntax represent {{the variables of}} an <b>object-language</b> as the variables of a meta-language. Such encodings allow for the reuse of α-conversion, substitution and hypothetical judgments already defined in the meta-language and thus often lead to simple and natural formalization. However, it is also well-known {{that there are some}} inherent difficulties with higher-order abstract syntax in supporting recursive definitions. We demonstrate a novel approach to explicitly combining higher-order abstract syntax with first-order abstract syntax that makes use of a (restricted) form of dependent types. With this combination, we can readily define recursive functions over first-order abstract syntax while ensuring the correctness of these functions through higher-order abstract syntax. We present an implementation of substitution and a verified evaluator for pure untyped call-by-value λ-calculus...|$|E
40|$|Aims of the Project The aim of {{the project}} was to {{implement}} and evaluate new ideas concerning the application of nominal logic to the field of logic programming. This involved the development of FreshProlog, an experimental logic programming language specifically designed for processing structural operational semantics definitions and incorporating <b>object-language</b> binding constructs. Work Completed The operational semantics of the FreshProlog language were developed from an initial specification provided by Prof. Pitts. A concrete syntax was designed, and an interpreter for the language was implemented using the Fresh Objective Caml language. During the implementation, theoretical difficulties were encountered which required some work on the underlying theories of nominal unification and pattern-matching. Special Difficulties There was a large body of theory relating to nominal logic to be absorbed. The experimenta...|$|E
40|$|Abstract Encodings {{based on}} higher-order {{abstract}} syntax represent the vari-ables of an <b>object-language</b> as {{the variables of}} a meta-language. Such encodings allow for the reuse of ff-conversion, substitutionand hypothetical judgments already defined in the meta-language and thus often lead to simple and natural formalization. However,it is also well-known {{that there are some}} inherent difficulties with higher-order abstract syntax in supporting recursive definitions. We demonstrate a novel approach to explicitly combining higher-order abstract syntax with first-order abstract syntax thatmakes use of a (restricted) form of dependent types. With this combination, we can readily define recursive functions over first-orderabstract syntax while ensuring the correctness of these functions through higher-order abstract syntax. We present an implemen-tation of substitution and a verified evaluator for pure untyped call-by-value *-calculus. Categories and Subject Descriptors D. 3 [Software]: Program-ming Language...|$|E
40|$|MAS) {{involves}} {{finding an}} adequate formalization of an agent's knowledge to perform defeasible inferences in a computationally effective way. In the last years, argument-based approaches {{have proven to}} be an attractive setting to achieve this goal. Dealing with uncertainty and fuzziness associated with the available knowledge are also common requirements in MAS. Such features, however, are not embedded in most argument-based formalisms. Possibilistic Defeasible Logic Programming (P-DeLP) has recently appeared as an alternative to solve the above problem. P-DeLP is a logic programming language which combines features from argumentation theory and logic programming, incorporating as well the treatment of possibilistic uncertainty and fuzzy knowledge at <b>object-language</b> level. This paper describes how P-DeLP can be applied in the context of formalizing an agent's beliefs and perceptions, along with an argumentative inference procedure to determine which of the agent's beliefs are ultimately accepted (or warranted) ...|$|E
40|$|Abstract. Higher-order {{abstract}} syntax (HOAS) {{refers to the}} technique of representing variables of an <b>object-language</b> using variables of a meta-language. The standard first-order alternatives force the programmer to deal with superficial concerns such as substitutions, whose implementation is often routine, tedious, and error-prone. In this paper, we describe the underlying calculus of Delphin. Delphin is a fully implemented functional-programming language supporting reasoning over higher-order encodings and dependent types, while maintaining the benefits of HOAS. More specifically, just as representations utilizing HOAS free the programmer from concerns of handling explicit contexts and substitutions, our system permits programming over such encodings without making these constructs explicit, leading to concise and elegant programs. To this end our system distinguishes bindings of variables intended for instantiation from those that will remain uninstantiated, utilizing a variation of Miller and Tiu’s ∇-quantifier [1]. ...|$|E
40|$|In {{this paper}} we study {{categories}} of theories and interpretations. In these categories, notions of sameness of theories, like synonymy, bi-interpretability and mutual interpretability, {{take the form}} of isomorphism. We study the usual notions like monomorphism and product in the various theories. We provide some examples to separate notions across categories. In contrast, we show that, in some cases, notions in different categories do coincide. E. g., we can, under such-and-such conditions, infer synonymity of two theories from their being equivalent {{in the sense of a}} coarser equivalence relation. We illustrate that the categories offer an appropriate framework for conceptual analysis of notions. For example, we provide a ‘coordinate free ’ explication of the notion of axiom scheme. Also we give a closer analysis of the <b>object-language</b> / meta-language distinction. Our basic category can be enriched with a form of 2 -structure. We us...|$|E
40|$|Writing (meta-) {{programs}} that manipulate other (object-) programs poses significant technical problems when the <b>object-language</b> itself has {{a notion of}} binders and variable occurrences. Higher-order abstract syntax is a representation of object {{programs that}} has recently {{been the focus of}} several studies. This paper points out a number of limitations of using higher order syntax in a functional context, and argues that DALI, a language based on a simple and elegant proposal made by Dale Miller ten years ago can provide superior support for manipulating such object-languages. Miller's original proposal, however, did not provide any formal treatment. To fill this gap, we present both a big-step and a reduction semantics for DALI, and summarize the results of our extensive study of the semantics, including the rather involved proof of the soundness of the reduction semantics with respect to the big-step semantics. Because our formal development is carried out for the untyped version of the lang [...] ...|$|E
40|$|Abstract: It {{has been}} argued {{elsewhere}} that a logic programming language with function variables and λ-abstractions within terms makes a good meta-programming language, especially when an <b>object-language</b> contains notions of bound variables and scope. The λProlog logic programming language and the related Elf and Isabelle systems provide meta-programs with both function variables and λ-abstractions by containing implementations of higher-order unification. This paper presents a logic programming language, called Lλ, that also contains both function variables and λ-abstractions, although certain restrictions are placed on occurrences of function variables. As {{a result of these}} restrictions, an implementation of Lλ does not need to implement full higherorder unification. Instead, an extension to first-order unification that respects bound variable names and scopes is all that is required. Such unification problems are shown to be decidable and to possess most general unifiers when unifiers exist. A unification algorithm and logic programming interpreter are described and proved correct. Several examples of using Lλ as a meta-programming language are presented. 1...|$|E
40|$|Bornat has {{recently}} described {{an approach to}} reasoning about pointers, building on work of Morris. Here we describe a semantics that validates the approach, {{and use it to}} help devise axioms for operations that allocate and dispose of memory. 1. INTRODUCTION It is widely acknowledged that pointers cause problems for program-proving formalisms (e. g. [8, 17, 13, 16, 9, 1, 14, 7]), but there is less agreement on precisely what the problems are. So, before describing our own work, we rst discuss where we believe the diculties lie. The rst issue that must be faced is aliasing, where distinct expressions can denote the same l-value. The problem here can be seen by reference to Hoare logic, where assignment is treated using substitution on the <b>object-language</b> level: fP [E=x]g x := E fPg: For this treatment of assignment to be sound it is necessary that dierent identiers are not aliases. With pointers the problem is that aliasing is not an exceptional circumstance: for example, it wi [...] ...|$|E
40|$|AbstractPossibilistic Defeasible Logic Programming (P-DeLP) is a logic {{programming}} language which combines features from argumentation theory and {{logic programming}}, incorporating {{the treatment of}} possibilistic uncertainty at the <b>object-language</b> level. In spite of its expressive power, an important limitation in P-DeLP is that imprecise, fuzzy information cannot be expressed in the object language. One interesting alternative for solving this limitation {{is the use of}} PGL+, a possibilistic logic over Gödel logic extended with fuzzy constants. Fuzzy constants in PGL+ allow expressing disjunctive information about the unknown value of a variable, {{in the sense of a}} magnitude, modelled as a (unary) predicate. The aim of this article is twofold: firstly, we formalize DePGL+, a possibilistic defeasible logic programming language that extends P-DeLP through the use of PGL+ in order to incorporate fuzzy constants and a fuzzy unification mechanism for them. Secondly, we propose a way to handle conflicting arguments in the context of the extended framework...|$|E
40|$|It {{has been}} argued {{elsewhere}} that a logic programming language with function variables and A-abstractions within terms makes a good meta-programming language, especially when an <b>object-language</b> contains notions of bound variables and scope. The AProlog logic programming language and the related Elf and Isabelle systems provide meta-programs with both function variables and A-abstractions by containing implementations of higher-order unification. This paper presents a logic programming language, called Lx, that also contains both function variables and A-abstractions, although certain restrictions are placed on occurrences of function variables. As {{a result of these}} restrictions, an implementation of Lx does not need to implement full higher-order unification. Instead, an extension to first-order unification that respects bound variable names and scopes is all that is required. Such unification problems are shown to be decidable and to possess most general unifiers when unifiers exist. A unification algorithm and logic programming interpreter are de-scribed and proved correct. Several examples of using Lk as a meta-progTamming language are presented. 1...|$|E
40|$|The {{terms of}} the simply-typed λ-calculus {{can be used to}} express the higher-order {{abstract}} syntax of objects such as logical formulas, proofs, and programs. Support for the manipulation of such objects is provided in several programming languages (e. g. λProlog, Elf). Such languages also provide embedded implication, a tool which is widely used for expressing hypothetical judgments in natural deduction. In this paper, we show how a restricted form of second-order syntax and embedded implication can be used together with induction in the Coq Proof Development system. We specify typing rules and evaluation for a simple functional language containing only function abstraction and application, and we fully formalize a proof of type soundness in the system. One difficulty we encountered is that expressing the higher-order syntax of an <b>object-language</b> as an inductive type in Coq generates a class of terms that contains more than just those that directly represent objects in the language. We ove [...] ...|$|E
40|$|There {{are several}} {{relations}} which may {{fall short of}} genuine identity, but which behave like identity in important respects. Such grades of discrimination have recently {{been the subject of}} much philosophical and technical discussion. This paper aims to complete their technical investigation. Grades of indiscernibility are defined in terms of satisfaction of certain first-order formulas. Grades of symmetry are defined in terms of symmetries on a structure. Both of these families of grades of discrimination have been studied in some detail. However, this paper also introduces grades of relativity, defined in terms of relativeness correspondences. This paper explores the relationships between all the grades of discrimination, exhaustively answering several natural questions that have so far received only partial answers. It also establishes which grades can be captured in terms of satisfaction of <b>object-language</b> formulas and draws connections with definability theory. This is the author accepted manuscript. It is currently under indefinite embargo pending publication by Duke University Press...|$|E
40|$|The HOL {{system is}} an LCF-style {{mechanized}} proof-assistant for conducting proofs in higher order logic. This paper discusses {{a proposal to}} extend the primitive basis of the logic underlying the HOL system with a very simple form of quantification over types. It is shown how certain practical problems with using the definitional mechanisms of HOL would be solved by the additional expressive power gained by making this extension. Keywords: types, higher order logic, theorem proving. 1 Introduction The HOL system [4] is a mechanized proof-assistant developed by Mike Gordon at the University of Cambridge for conducting proofs in higher order logic. The version of higher order logic mechanized by HOL is essentially Church's formulation of simple type theory [2] extended with explicit rules of definition and with <b>object-language</b> polymorphism of the kind developed by Milner for the LCF logic PP [5]. In this paper a further extension to the logic is proposed [...] -namely, {{the addition of a}} ver [...] ...|$|E
