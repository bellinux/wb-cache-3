71|2456|Public
25|$|JPL was {{transferred}} to NASA in December 1958, becoming the agency's primary planetary spacecraft center. JPL engineers designed and operated Ranger and Surveyor missions to the Moon that prepared {{the way for the}} Apollo program. JPL also led the way in interplanetary exploration with the Mariner missions to Venus, Mars, and Mercury. In 1998, JPL opened the Near-Earth <b>Object</b> <b>Program</b> Office for NASA; as of 2013, it has found 95% of asteroids that are a kilometer or more in diameter that cross Earth's orbit.|$|E
500|$|Some reports {{indicated}} initial {{suspicions that}} the illnesses {{may have been}} psychosomatic in nature. Don Yeomans, head of the Near Earth <b>Object</b> <b>Program</b> at NASA's Jet Propulsion Laboratory in Pasadena, California, said, [...] "Statistically, it's {{far more likely to}} have come from below than from above. The noxious fumes that have supposedly sickened curious locals who went to examine the crater would seem to indicate hydrothermal activity, such as a local gas explosion, because meteorites don't give off odors." ...|$|E
5000|$|... was {{discovered}} on November 7, 2004, by the NASA-funded LINEAR asteroid survey. The object is estimated by NASA's Near Earth <b>Object</b> <b>Program</b> Office to be 580 meters in diameter with an approximate mass of 2.6×1011 kg.|$|E
5000|$|Like other Common Language Infrastructure (CLI) languages, F# can use CLI {{types and}} <b>objects</b> through <b>object</b> <b>programming.</b> [...] F# support for <b>object</b> <b>programming</b> in {{expressions}} includes: ...|$|R
40|$|Meta-programming is a {{discipline}} of writing programs {{in a certain}} programming language that generate, manipulate or execute programs written in another language. In a typed setting, meta-programming languages usually contain a modal type constructor to distinguish the level of <b>object</b> <b>programs</b> (which are the manipulated data) from the meta programs (which perform the computations). In functional programming, modal types of <b>object</b> <b>programs</b> generally come in two flavors: open and closed, {{depending on whether the}} expressions they classify may contain any free variables or not. Closed <b>object</b> <b>programs</b> can be executed at run-time by the meta program, but the computations over them are more rigid, and typically produce less e#cient residual code. Open <b>object</b> <b>programs</b> provide better inlining and partial evaluation, but once constructed, expressions of open modal type cannot be evaluated...|$|R
40|$|Meta-programming {{languages}} provide {{infrastructure to}} generate and execute <b>object</b> <b>programs</b> at run-time. In a typed setting, they contain a modal type constructor which classifies object code. These code types generally {{come in two}} flavors: closed and open. Closed code expressions can be invoked at run-time, but the computations over them are more rigid, and typically produce less efficient residual <b>object</b> <b>programs.</b> Open code provides better inlining and partial evaluation of <b>object</b> <b>programs,</b> but once constructed, expressions of this type cannot in general be evaluated. Recent {{work in this area}} has focused on combining the two notions into a sound system. We present a novel way to achieve this. It is based on adding the notion of names from the work on Nominal Logic and FreshML to the λ □-calculus of proof terms for the necessity fragment of modal logic S 4. The resulting language provides a more fine-grained control over free variables of <b>object</b> <b>programs</b> when compared to the existing languages for meta-programming. In addition, this approach lends itself well to addition of intensional code analysis, i. e. ability of meta programs to inspect and destruct <b>object</b> <b>programs</b> at run-time in a type-safe manner, which we also undertake...|$|R
5000|$|In the 1990s, US Congress held {{hearings}} {{to consider the}} risks and {{what needed to be}} done about them. This led to a US$3 million annual budget for programs like Spaceguard and the near-Earth <b>object</b> <b>program,</b> as managed by NASA and USAF.|$|E
5000|$|... is an Apollo {{asteroid}} some 50 m {{in diameter}} and a Mars-crosser asteroid first observed on November 20, 2007, by Andrea Boattini of the Catalina Sky Survey. Early observations of [...] caused excitement amongst the scientific community when it was estimated as having {{as high as a}} 1 in 25 chance of colliding with Mars on January 30, 2008. However, by January 9, 2008, additional observations allowed NASA's Near Earth <b>Object</b> <b>Program</b> (NEOP) to reduce the uncertainty region resulting in only a 1-in-10,000 chance of impact. [...] most likely passed Mars at a distance of 6.5 Mars radii. Due to this relatively small distance and the uncertainty level of the prior observations, the gravitational effects of Mars on its trajectory are unknown and, according to Steven Chesley of NASA's Jet Propulsion Laboratory Near-Earth <b>Object</b> <b>program,</b> [...] is currently considered 'lost' (see lost asteroids).|$|E
5000|$|December 21, 2007: [...] was {{approximately}} halfway between Earth and Mars traveling at 27900 mph. It was estimated by NASA's Near Earth <b>Object</b> <b>Program</b> (NEOP) {{to have a}} 1-in-75 chance of colliding with Mars on January 30, 2008 at approximately 10:55 UT. It was thought it would pass about 50,000 km (0.00034AU) from Mars.|$|E
2500|$|... Contains a {{learning}} <b>objects</b> <b>program,</b> panoramas, 3D models, and glyphs and translations.|$|R
5000|$|Flyweight pattern - an <b>object</b> <b>programming</b> design pattern, {{that also}} uses {{a kind of}} memoization ...|$|R
50|$|Dehlin co-authored {{the book}} <b>Object</b> <b>Programming</b> with Visual Basic 4 and Microsoft Office for Windows 95.|$|R
50|$|Manca also {{performs}} follow-up astrometry of near-Earth objects (NEOs). He acquired {{research and}} observational {{experience on the}} NEOs at professional observatories in Arizona, United States. Non-observational work focuses on computations of orbit and close approaches of asteroids with the Earth (linked at Near Earth <b>Object</b> <b>Program</b> at Jet Propulsion Laboratory) and orbit and identifications of asteroids and comets.|$|E
50|$|In it, Shores {{outlined}} {{several different}} formats: Print (i.e. book or journal), Graphic (globe or photograph), Projection (film or slide), Transmission (radio or tape recording), Resource (person or <b>object),</b> <b>Program</b> (computer or machine) and Extrasensory (telepathy or clairvoyance). Shores {{talked about how}} {{all of these things}} were integral to learning and that the majority of them should be found in the library.|$|E
5000|$|... is a 50 m Apollo-class NEO and a Mars-crosser {{discovered}} on 20 November 2007, by Andrea Boattini of the Catalina Sky Survey. Early observations of [...] caused excitement amongst {{the scientific community}} when it was estimated as having {{as high as a}} 1 in 25 chance of colliding with Mars on 30 January 2008. However, by 9 January 2008 additional observations allowed NASA's Near Earth <b>Object</b> <b>Program</b> (NEOP) to reduce the uncertainty region resulting in only a 1-in-10,000 chance of impact. [...] most likely passed Mars at a distance of 6.5 Mars radii. Due to this relatively small distance and the uncertainty level of the prior observations, the gravitational effects of Mars on its trajectory are unknown and, according to Steven Chesley of NASA's JPL-Near Earth <b>Object</b> <b>program,</b> [...] is currently considered [...] "lost". The best fit trajectory had the asteroid passing within 21,000 km of Mars and only 16,000 km from its moon Deimos.|$|E
40|$|With the {{increasing}} demand for distributed real-time systems, the need for programming tools and execution platforms useful in development of such application systems is widely recognized. This paper presents CORD-RTS, an efficient middleware architecture that provides support for real-time distributed <b>object</b> <b>programming.</b> The communication infrastructure and various components of the middleware, which support several modes of interactions among distributed real-time objects, along with its real-time features and services, are discussed in detail. Key Words: real-time, middleware, distributed <b>object</b> <b>programming,</b> <b>object</b> interactions 1...|$|R
40|$|Action LeToolThis paper {{discusses}} the cognitive {{aspects of the}} programming activity in «colored object programming", a refinement of <b>object</b> oriented <b>programming.</b> The paper first reports works done by cognitive psychologists about object oriented programming; and browes a number of tools and researches meant for overcoming the difficulties encountered by programmers. The salient features of colored <b>object</b> <b>programming</b> (ex. : visual formalism, simulation capability, declarative programming, [...] .) are then analysed from a cognitive point of view. Color graphs appear to have distinct advantages for abstracting essential properties and capturing informations that were left implicit in traditional <b>object</b> oriented <b>programming.</b> Besides bringing progresses in information structuring and layering, colored <b>object</b> <b>programming</b> is notably expected to better support of opportunistic programming activities...|$|R
5000|$|... (3) {{in-depth}} study of <b>object</b> <b>programming,</b> and learning an object-oriented methodology that uses UML as modeling notation; ...|$|R
5000|$|As {{with other}} SSI systems LOCUS {{sometimes}} {{found it necessary}} to break the illusion of a single system, notably to allow some files to be different on a per-node basis. For example, it was possible to build a LOCUS cluster containing both PDP-11/45 and VAX 750 machines, but instruction sets used were not identical, so two versions of each <b>object</b> <b>program</b> would be needed ...|$|E
50|$|Unlike similar {{projects}} {{to search for}} near-Earth asteroids or near-Earth objects (NEOs) such as NASA's Near-Earth <b>Object</b> <b>Program,</b> Sentinel would have orbited between Earth and the Sun. Since the Sun would therefore always have been behind {{the lens of the}} telescope, it would have never inhibited the telescope's ability to detect NEOs and Sentinel {{would have been able to}} perform continuous observation and analysis.|$|E
50|$|As {{a result}} of a set of {{hearings}} by the NASA Advisory Committee following the Chelyabinsk explosion in 2013, in conjunction with a White House request to double its budget, NASA’s Near Earth <b>Object</b> <b>Program</b> funding was increased to $40.5 M/year in its FY2014 (Fiscal Year 2014) budget. It had previously been increased to $20.5 M/year in FY2012 (about 0.1% of NASA's annual budget at the time), from an average of about $4 M/year between 2002 and 2010.|$|E
40|$|<b>Object</b> {{oriented}} <b>programming</b> aims at code lisibility and conciseness via abstract {{data type}} declarations and takes advantage from setting the objects (ie data) {{in the center of}} the application, instead of procedures or demonstrations. Just as in Logic programming, where describing the properties of the solution of some problem is (theoreticaly) enough to allow the program to compute the solution, <b>Object</b> <b>programming</b> proceeds from the fact that purely declarative information leads to more procedural behaviour. It appears that Logic <b>programming</b> and <b>Object</b> <b>programming</b> are complementary in the sense that the first is very suitable for expressing subtle reasoning, but rather weak as a formalism for describing complex structures, and conversely for the second. These considerations led us, at the IIRIAM, to combine Logic and <b>Object</b> <b>programming</b> in order to use the advantages of both. Our research effort resulted In the system LAP, an extension of Prolog to <b>object</b> <b>programming,</b> giving a new dimension to the latter, through logic programming concepts: processing of partially known data and non determinism applied at the object level. The first part of this paper introduces the main characteristics of LAP, faced with the requirements of Al application development. The second part illustrates some of these capabilities through simple examples...|$|R
50|$|ICI is not object-based, many <b>object</b> <b>programming</b> {{features}} can be emulated in {{the language}} by using a data structure inheritance feature called super-structures.|$|R
40|$|The aim of {{this work}} is to clarify and to {{familiarize}} users {{with the problem of}} <b>object</b> <b>programming</b> in LabVIEW version 8. 5. In the introduction outlining the principle of LabVIEW as such a recall when it was first implemented <b>programming</b> <b>object</b> in the development environment. Furthermore, gradually examines the theory of classes and objects, their creation, basic properties, use in the block diagram and the various settings of the objects required for their proper and full use in the programming. The theoretical part {{of the end of the}} study the inheritance hierarchy between objects, and even deals with dynamic and static inputs and outputs. For the idea of the differences between the <b>object</b> <b>programming</b> in LabVIEW and C++ is included comparison of mechanisms and principles theoretically and clearly on the example programme. It also compares classical dataflow approach and <b>object</b> <b>programming</b> in LabVIEW. And finally they are accompanied by two developed by the task, including manual...|$|R
5000|$|FOR TRANSIT {{statements}} {{were limited to}} columns 7 through 56, only.Punched cards were used for input and output on the IBM 650. Three passes were required to translate source code to the [...] "IT" [...] language, then to compile the IT statements into SOAP assembly language, and finally to produce the <b>object</b> <b>program,</b> which could then be loaded into the machine to run the program (using punched cards for data input, and outputting results onto punched cards).|$|E
5000|$|Some reports {{indicated}} initial {{suspicions that}} the illnesses {{may have been}} psychosomatic in nature. Don Yeomans, head of the Near Earth <b>Object</b> <b>Program</b> at NASA’s Jet Propulsion Laboratory in Pasadena, California, said, [...] "Statistically, it’s {{far more likely to}} have come from below than from above. The noxious fumes that have supposedly sickened curious locals who went to examine the crater would seem to indicate hydrothermal activity, such as a local gas explosion, because meteorites don't give off odors." ...|$|E
50|$|JPL was {{transferred}} to NASA in December 1958, becoming the agency's primary planetary spacecraft center. JPL engineers designed and operated Ranger and Surveyor missions to the Moon that prepared {{the way for the}} Apollo program. JPL also led the way in interplanetary exploration with the Mariner missions to Venus, Mars, and Mercury. In 1998, JPL opened the Near-Earth <b>Object</b> <b>Program</b> Office for NASA; as of 2013, it has found 95% of asteroids that are a kilometer or more in diameter that cross Earth's orbit.|$|E
50|$|The term is also {{sometimes}} {{used to describe}} object-relational mapping systems, which bridge the divide between the SQL database world and modern <b>object</b> <b>programming</b> languages.|$|R
40|$|Abstract Meta-programming {{languages}} provide {{infrastructure to}} gener-ate and execute <b>object</b> <b>programs</b> at run-time. In a typed setting, they contain a modal type constructor which classifies objectcode. These code types generally {{come in two}} flavors: closed and open. Closed code expressions can be invoked at run-time,but the computations over them are more rigid, and typically produce less efficient residual <b>object</b> <b>programs.</b> Open codeprovides better inlining and partial evaluation of <b>object</b> <b>programs,</b> but once constructed, expressions of this type cannotin general be evaluated. Recent {{work in this area}} has focused on combining the two no-tions into a sound system. We present a novel way to achieve this. It is based on adding the notion of names from the workon Nominal Logic and FreshML to the l Λ-calculus of proof terms for the necessity fragment of modal logic S 4. The re-sulting language provides a more fine-grained control ove...|$|R
5000|$|Conference on <b>Object</b> Oriented <b>Programming</b> Systems Languages and Applications archive Proceedings of the 20th annual ACM SIGPLAN {{conference on}} <b>Object</b> {{oriented}} <b>programming,</b> systems, languages, and applications http://portal.acm.org/citation.cfm?id=1094811.1094841&coll=GUIDE&dl=GUIDE&CFID=10871926&CFTOKEN=54412436 ...|$|R
5000|$|Although some {{inaccurate}} {{press reports}} {{have suggested that}} it may pose an impact risk to Earth, the NASA/JPL Near Earth <b>Object</b> <b>Program</b> Office reported that it poses no risk of impact to any planet for at least 150 years. Between 1904 and 2174, the closest approach it makes to any planet was on 9 June 2008 when it passed [...] from Mars. The asteroid has never been listed on the Sentry Risk Table and has a well determined orbit with an observation arc of 6 years.|$|E
5000|$|December 28, 2007: NASA {{scientists}} at the Near-Earth <b>Object</b> <b>program</b> office at JPL announced they had found [...] in 3 precovery images from November 8, 2007. The refined orbit placed {{the odds of a}} Mars impact at 1-in-25. The uncertainty region was reduced from 1 million km to roughly 400,000 km. The best fit trajectory had the asteroid passing within 21,000 km of Mars and only 16,000 km from the moon Deimos. The pre-discovery observations were located by Andy Puckett in the archive of the Sloan Digital Sky Survey II at the Apache Point Observatory.|$|E
5000|$|The Minor Planet Center in Cambridge, Massachusetts {{has been}} {{cataloging}} {{the orbits of}} asteroids and comets since 1947. It has recently been joined by surveys which specialize in locating the near-Earth objects (NEO), many (as of early 2007) funded by NASA's Near Earth <b>Object</b> <b>program</b> office {{as part of their}} Spaceguard program. One of the best-known is LINEAR that began in 1996. By 2004 LINEAR was discovering tens of thousands of objects each year and accounting for 65% of all new asteroid detections. [...] LINEAR uses two one-meter telescopes and one half-meter telescope based in New Mexico.|$|E
50|$|With the {{additional}} Compatibility Feature hardware and Compatibility Support software under DOS/360, the IBM 1401/1440/1460 <b>object</b> <b>programs</b> could be {{run in the}} emulation mode, {{with little or no}} reprogramming.|$|R
40|$|Object code is {{a program}} of a {{processor}} language and can be directly executed on a machine. Program verification constructs a formal proof that a program correctly implements its specification. Verifying object code therefore ensures that the program {{which is to be}} executed on a machine is correct. However, the nature of processor languages makes it difficult to specify and reason about <b>object</b> code <b>programs</b> in a formal system of logic. Furthermore, a proof of the correctness of an <b>object</b> code <b>program</b> will often be too large to construct manually because of the size of <b>object</b> code <b>programs.</b> The presence of pointers and computed jumps in <b>object</b> code <b>programs</b> constrains the use of automated tools to simplify object code verification. This thesis develops an abstract language which is expressive enough to describe any sequential <b>object</b> code <b>program.</b> The abstract language supports the definition of program logics in which to specify and verify <b>object</b> code <b>programs.</b> This allows the object c [...] ...|$|R
40|$|International audienceIn {{order to}} tackle the {{development}} of concurrent and distributed systems, the active <b>object</b> <b>programming</b> model provides a high-level abstraction to program concurrent behaviours. There exists already a variety of active object frameworks targeted at a large range of application domains: modelling, verification, efficient execution. However, among these frameworks, very few consider a multi-threaded execution of active objects. Introducing controlled parallelism within active objects enables overcoming some of their limitations. In this paper, we present a complete framework around the multi-active <b>object</b> <b>programming</b> model. We present it through ProActive, the Java library that offers multi-active objects, and through MultiASP, the programming language that allows the formalisation of our developments. We then show how to compile an active object language with cooperative multi-threading into multi-active objects. This paper also presents different use cases and the development support to illustrate the practical usability of our language. Formalisation of our work provides the programmer with guarantees on the behaviour of the multi-active <b>object</b> <b>programming</b> model and of the compiler...|$|R
