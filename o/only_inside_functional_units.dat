0|7276|Public
40|$|We {{present an}} optimal budget {{distribution}} method for low power circuit design using transistor sizing. The algorithm distributes the available budget <b>inside</b> the <b>functional</b> <b>unit</b> by efficient traversalof the Series Parallel Graph representation. The technique can be efficiently applied at different abstraction {{levels of the}} design as well as toward other optimization goals (such as area optimization). The complexity is O(n) {{in terms of the}} number of transistors in the circuit. Incorporating our method in the design flow yields significant improvements in power consumption. Experiments on circuits extracted from MCNC 91 benchmark suite have revealed improvements up to 59 % in average power and 65 % in maximum power dissipation compared to a...|$|R
30|$|Each event handler and event {{dispatcher}} {{has its own}} {{data path}} and control hardware <b>inside</b> their respective <b>functional</b> <b>units.</b> As described earlier, the event handlers work in parallel. The parallel architecture in the proposed system increases the efficiency of message processing and the throughput of the system. The computation capability is distributed among event handlers enabling the designed system to respond to an event whenever it occurs. As shown by the test results in Section Implementation details and test results, the parallel distributed computation allows the system to respond faster to an application’s needs.|$|R
40|$|This paper {{shows that}} {{software}} pipelining {{can be an}} effective technique for code generation for coarsegrained reconfigurable instruction set processors. The paper describes a technique based on software pipelining that performs reconfigurable instruction generation and instruction scheduling on a combined algorithm. Although typical compiler for reconfigurable processors perform these steps separately, results shows that the combination allows a successful usage of the reconfigurable resources. The technique presented is also able to exploit spatial computation <b>inside</b> the reconfigurable <b>functional</b> <b>unit</b> by which the output of a processing element is directly connected to the input of another processing element without the need of an intermediate register. Results show {{that it is possible to}} reduce the cycle count by using spatial computation. ...|$|R
40|$|In {{this paper}} we extend a custom FFT vector {{architecture}} by adding multiple lane capabilities and study its hardware implementation. We use the six step algorithm to segment a long Fourier transform of size N=Z x L into L smaller transforms of size Z. We split the data into pairs of vector registers (for {{the real and}} imaginary part), each containing Z elements. A vector register pair with its corresponding <b>functional</b> <b>unit</b> form a single lane replicated L times. While smaller transforms proceed iteratively {{all of them are}} computed in parallel. The shorter FFT transforms along the X dimension are computed using previously proposed vector permutations while the transforms along the Y dimension are performed using a simple butterfly network that handles inter-lane communication. All data patterns required by the FFT computation are generated implicitly in hardware by a simple control unit. No data transposition is required and the twiddle factors are stored locally <b>inside</b> the <b>functional</b> <b>units.</b> We validated our design through simulation and ASIC synthesis targeting 90 nm CMOS technology. We compare three possible configurations for computing a 256 point FFT, all running at 217 MHz with Z x L equal to: a) 32 x 8, b) 16 x 16 and c) 8 x 32. Configuration a) is the smallest and the slowest; configuration b) requires 1. 43 times fewer cycles but 1. 64 more area while configuration c) requires 1. 76 times fewer cycles and is 3. 16 times larger. Unlike other high performance FFT implementations, our design offers the possibility to trade-off execution speed for two resource types: vector register size and number of lanes. Another important contribution is the possibility to execute 2 D FFT without any HW modifications or special provisions. © 2012 IEEE...|$|R
40|$|SLM-API {{function}} accomplished slmRegisterCapability() Input Parameters (<b>Functional</b> <b>Unit</b> Description Record 3; Callback Entry for Open Service Indication; Callback Entry for Close Service The slmRegisterCapability() {{function is}} called by Services to register their specific instances of <b>Functional</b> <b>Units</b> {{with the local}} Salutation Manager. The specific instance is described in a record called a <b>Functional</b> <b>Unit</b> Description Record. The calling Service passes a <b>Functional</b> <b>Unit</b> Description Record, which describes its capability, to the Salutation Manager. The Salutation Manager returns a <b>Functional</b> <b>Unit</b> Handle that uniquely identifies the <b>Functional</b> <b>Unit</b> among all the <b>Functional</b> <b>Units</b> registered with the Salutation Manager. 3 The Salutation Architecture defines the <b>Functional</b> <b>Unit</b> Description Record as a record that identifies the <b>Functional</b> <b>Unit,</b> and the capabilities of that instance of the <b>Functional</b> <b>Unit.</b> The <b>Functional</b> <b>Unit</b> maps to the Bluetooth Service and capabilities map to the [...] ...|$|R
40|$|Includes bibliographical {{references}} (leaves 101 - 105). This project elaborates on {{the possibility}} of optimizing the power consumed by the <b>functional</b> <b>units</b> by optimizing the <b>functional</b> <b>unit</b> binding technique. <b>Functional</b> <b>unit</b> binding maps the operations in each control step to specific <b>functional</b> <b>units.</b> However, the mapping between the operations and the available <b>functional</b> <b>units</b> has a profound effect on the power consumed. Hence, by optimizing the <b>functional</b> <b>unit</b> binding algorithm, it is possible to reduce the power consumption of the <b>functional</b> <b>units</b> which comprises a large fraction of the overall power of the design. The optimized poweraware <b>functional</b> <b>unit</b> binding methodology focus on reducing the switching activity of the <b>functional</b> <b>units</b> by minimizing the transitions of their input operands; this is done by trying to bind operations having one of its inputs remaining the same between two consecutive control steps, to the same <b>functional</b> <b>unit.</b> The second part of this project tackled temperature reduction. The same methodology used for power reduction was used for temperature reduction by optimizing the <b>functional</b> <b>unit</b> binding technique. The optimized temperature-aware <b>functional</b> <b>unit</b> binding focus on reducing the temperature of the <b>functional</b> <b>units</b> by following a parabola-like cost function; the cost is the temperature dissipated by the <b>functional</b> <b>unit</b> for every two consecutive switching at its inputs. This will lead to a change in the binding of operations to <b>functional</b> <b>units</b> giving each <b>functional</b> <b>unit</b> the time to cool down between any two successive operations. 1 bound copy: xii, 105 leaves; ill.; 31 cm. available at RNL...|$|R
5000|$|<b>Functional</b> <b>Unit</b> Status: Indicates {{the state}} of each <b>{{function}}al</b> <b>unit.</b> Each function unit maintains 9 fields in the table: ...|$|R
40|$|The present {{invention}} {{relates to}} a <b>functional</b> <b>unit,</b> containing {{at least one}} active or passive electronic component, the <b>functional</b> <b>unit</b> being surrounded {{by at least one}} flexible dielectric layer and, on the outer side of the <b>functional</b> <b>unit,</b> contacts are provided for contacting the electrical components for further mounting...|$|R
40|$|Unavailability of <b>functional</b> <b>units</b> {{is a major}} {{performance}} bottleneck in general-purpose processors (GPP). In a GPP {{with limited}} number of <b>functional</b> <b>units</b> while a <b>functional</b> <b>unit</b> may be heavily utilized at times, creating a performance bottleneck, the other <b>functional</b> <b>units</b> might be under-utilized. We propose a novel idea for adapting <b>functional</b> <b>units</b> in GPP architecture in order to overcome this challenge. For this purpose, a selected set of complex <b>functional</b> <b>units</b> that might be under-utilized such as multiplier and divider, are realized using a programmable look up table-based fabric. This allows for run-time adaptation of <b>functional</b> <b>units</b> to improving performance. The programmable look up tables are realized using magnetic tunnel junction (MTJ) based memories that dissipate near zero leakage and are CMOS compatible. We have applied this idea to a dual issue architecture. The results show that compared to a design with all CMOS <b>functional</b> <b>units</b> a performance improvement of 18 %, on average is achieved for standard benchmarks. This comes with 4. 1 % power increase in integer benchmarks and 2. 3 % power decrease in floating point benchmarks, compared to a CMOS design...|$|R
40|$|The thermal {{stability}} of the eight <b>functional</b> <b>units</b> of beta-hemocyanin of the gastropodan mollusc Helix pomatia was investigated by FTIR spectroscopy. Molluscan hemocyanin <b>functional</b> <b>units</b> have a molecular mass of approximately 50 kDa and generally contain three disulfide bridges: two in the mainly alpha-helical N-terminal domain {{and one in the}} C-terminal beta-sheet domain. They show more than 50 % sequence homology and it is assumed that they adopt a similar conformation. However, the <b>functional</b> <b>units</b> of H. pomatia beta-hemocyanin, designated HpH-a to HpH-h, differ considerably in their carbohydrate content (0 - 18 wt%). Most <b>functional</b> <b>units</b> are exceptionally stable with a melting temperature in the range 77 - 83 degrees C. Two <b>functional</b> <b>units,</b> HpH-b and HpH-c, however, have a reduced stability with melting temperature values of 73 degrees C and 64 degrees C, respectively. Although the most glycosylated <b>functional</b> <b>unit</b> (HpH-g) has the highest temperature stability, there is no linear correlation between the degree of glycosylation of the <b>functional</b> <b>units</b> and the unfolding temperature. This is ascribed to variations in secondary structure as well as in glycan attachment sites. Moreover, the disulfide bonds might {{play an important role in}} the conformational {{stability of the}} <b>functional</b> <b>units.</b> Sequence comparison of molluscan hemocyanins suggests that the less stable <b>functional</b> <b>units,</b> HpH-b and HpH-c, similar to most of their paralogous counterparts, lack the disulfide bond in the C-terminal domain. status: publishe...|$|R
40|$|The {{invention}} {{relates to}} a <b>functional</b> <b>unit</b> for a processor, {{such as a}} Very Large Instruction Word Processor. The invention further relates to a processor comprising at least one such <b>functional</b> <b>unit.</b> The invention further relates to a <b>functional</b> <b>unit</b> and processor capable of mitigating the effect of transient faults in harsh environments...|$|R
40|$|A scalar/vector {{processor}} {{includes a}} plurality of <b>functional</b> <b>units</b> (252, 260, 262, 264, 266, 268, 270). At {{least one of the}} <b>functional</b> <b>units</b> includes a vector section (210) for operating on at least one vector and a scalar section (220) for operating on at least one scalar. The vector section and scalar section of the <b>functional</b> <b>unit</b> co-operate by the scalar section being arranged to provide and/or consume at least one scalar required by and/or supplied by the vector section of the <b>functional</b> <b>unit...</b>|$|R
40|$|A {{method for}} exchanging data between a first {{and a second}} <b>functional</b> <b>unit</b> is described, which {{comprises}} the following steps: in a first handshake procedure, data is exchanged corresponding to a communication thread (TID) selected by the first <b>functional</b> <b>unit</b> (I), while independently in a second handshake procedure, information relating to a status {{of at least one}} communication thread is exchanged from the second (T) to the first <b>functional</b> <b>unit</b> (I). The information enables the first <b>functional</b> <b>unit</b> (I) to anticipate the possibility of exchanging data for the at least one communication thread...|$|R
40|$|Comprehensive data {{of protein}} {{interactions}} {{are suitable for}} large-scale identifications of <b>functional</b> <b>units</b> such as protein complexes and pathways. There have been the preceding studies to identify the <b>functional</b> <b>units</b> mainly by graph approaches and by co-expression. In this poster presentation, we propose the evolutionary approaches to identify the <b>functional</b> <b>units</b> in yeast protein interaction network [1]. By inferring th...|$|R
40|$|DE 102008017997 A 1 UPAB: 20090205 NOVELTY - The method {{involves}} {{providing a}} connecting <b>functional</b> <b>unit</b> with a readable data {{for a computer}} unit in a manufacturing guidance level. The data is transformed and enriched with semantic information. A system-induced manufacturing is exchanged and adjusted by operating relevant information with the data of the <b>functional</b> <b>unit</b> that has the semantic information {{by one of the}} communication interfaces. USE - Method for connecting an automatic <b>functional</b> <b>unit</b> in a hierarchically structured manufacturing system. ADVANTAGE - The method involves providing a connecting <b>functional</b> <b>unit</b> with a readable data for a computer unit in a manufacturing guidance level, where the data is transformed and enriched with semantic information, exchanging and adjusting system-induced manufacturing by operating relevant information with the data of the <b>functional</b> <b>unit</b> that has the semantic information by one of the communication interfaces, and thus ensures an improved automatic <b>functional</b> <b>unit</b> without a manual installation processes...|$|R
40|$|<b>Functional</b> <b>units</b> {{provide the}} {{backbone}} of any spatial accelerator by providing the computing resources. The desire for having rich and expensive <b>functional</b> <b>units</b> is in tension with producing a regular and energy-efficient computing fabric. This paper explores the design trade-off between complex, universal <b>functional</b> <b>units</b> and simpler, limited <b>functional</b> <b>units.</b> We show that a modest amount of specialization reduces the area-delay-energy product of an optimized architecture to 0. 86 × a baseline architecture. Furthermore, we provide a design guideline that allows an architect to customize {{the contents of the}} computing fabric just by examining the profile of benchmarks within the application domains...|$|R
40|$|This paper {{presents}} two soft-error mitigation {{methods for}} DSP processors. Considering that a DSP processor {{is composed of}} several <b>functional</b> <b>units</b> and each <b>functional</b> <b>unit</b> constitutes of a control unit, some registers and combinational logic, a unique characteristic of DSP workloads has been deployed to develop a masking mechanism for the control-logic of each <b>functional</b> <b>unit.</b> Combinational logic has been elaborated with a fast recovery mechanism to isolate the fault-free <b>functional</b> <b>units</b> and re-execute the erroneous instruction. These techniques have been implemented on a DSP processor {{in order to assess}} the achieved fault-tolerance versus the imposed overheads...|$|R
5000|$|The 6600 CP {{included}} 10 parallel <b>functional</b> <b>units,</b> allowing multiple {{instructions to}} be worked on at the same time. Today, this is known as a superscalar design, but it was unique for its time. Unlike most modern CPU designs, <b>functional</b> <b>units</b> were not pipelined; the <b>functional</b> <b>unit</b> would become busy when an instruction was [...] "issued" [...] to it and would remain busy for the entire time required to execute that instruction. (By contrast, the CDC 7600 introduced pipelining into its <b>functional</b> <b>units.)</b> In the best case, an instruction could be issued to a <b>functional</b> <b>unit</b> every 100ns clock cycle. The system read and decoded instructions from memory as fast as possible, generally faster than they could be completed, and fed them off to the units for processing. The units were: ...|$|R
40|$|The paper {{introduces}} a formalism {{based on a}} unique type of object, the <b>functional</b> <b>unit,</b> which is a module acting both as a procedure and as a data structure. Communication between <b>functional</b> <b>units</b> is achieved by message exchanging. The main activity of each <b>functional</b> <b>unit</b> is receiving and sending messages. Interaction among <b>functional</b> <b>units</b> allows to deal in a natural way with concurrency and other non-standard control regimes. One motivation {{of this paper is}} showing how data structures are conveniently described by <b>functional</b> <b>units</b> hence they can be implemented "as active objects". <b>Functional</b> <b>units</b> acting as data types are similar to SIMULA- 67 classes, since type they are responsible for all the operations on data of their type. Our main concern is stressing s programming methodology which centers around the definition of <b>functional</b> <b>units</b> acting as data types. This methodology is discussed in the framework of the concepts of modularity and structuredness. The paper will show how a data type definition can be splitted into two separate steps. The first one consists of data type specification (axiomatisation) while the second one is related to the implementation. The relevance of data types specification in connection with a top-down-like programming methodology is finally discussed...|$|R
40|$|The Itanium processor, an {{implementation}} of an Explicitly Parallel Instruction Computing (EPIC) architecture, is an in-order processor that fetches, executes, and forwards results to <b>functional</b> <b>units</b> in-order. The architecture {{relies heavily on}} the compiler to expose Instruction Level Parallelism (ILP) to avoid stalls created by in-order processing. The goal {{of this paper is}} to examine, in small steps, changing the in-order Itanium processor model to allow execution to be performed out-of-order. The purpose is to overcome memory and <b>functional</b> <b>unit</b> latencies. To accomplish this, we consider an architecture with Pending <b>Functional</b> <b>Units</b> (PFU). The PFU architecture assigns/schedules instructions to <b>functional</b> <b>units</b> in-order. Instructions sit at the pending <b>functional</b> <b>units</b> until their operands become ready and then execute out-of-order. While an instruction is pending at a <b>functional</b> <b>unit,</b> no other instruction can be scheduled to that <b>functional</b> <b>unit.</b> We examine several PFU architecture designs. The minimal design does not perform renaming, and only supports bypassing of non-speculative result values. We then examine making PFU more aggressive by supporting speculative register state, and then finally by adding in register renaming. We show that the minimal PFU architecture provides on average an 18 % speedup over an in-order EPIC processor and produces up to half of the speedup that would be gained using a full out-of-order architecture...|$|R
40|$|Improvements in {{microprocessor}} fabrication {{have allowed}} {{a large number}} of architectural advances aimed at improving performance, mainly through the addition of multiple <b>functional</b> <b>units</b> which attempt to execute many instructions in parallel. These attempts to extract more parallelism from code have been successful, but have met with diminishing returns as more <b>functional</b> <b>units</b> are added. Additionally, energy dissipation has been increasing exponentially with the addition of more <b>functional</b> <b>units.</b> This wor...|$|R
40|$|We {{present a}} fast {{algorithm}} for scheduling instructions with precedence-latency constraints, timing constraints {{in the form}} of individual integer release times and deadlines on an ILP (Instruction Level Parallelism) processor. The time complexity of our algorithm is O(n log d) + minfO(de); O(ne) g + minfO(ne); O(n) g, where d is the maximum latency. Our algorithm can nd a feasible schedule whenever one exists in the following special cases: (1) one <b>functional</b> <b>unit,</b> arbitrary precedence, latencies in f 0; 1 g, integer release times and deadlines; (2) two identical <b>functional</b> <b>units,</b> arbitrary precedence, latencies of 0, integer release times and deadlines; (3) multiple <b>functional</b> <b>units</b> of dierent types or multiple identical <b>functional</b> <b>units,</b> monotone interval graph, integer release times and deadlines; (4) multiple identical <b>functional</b> <b>units,</b> in-forest, equal latencies, integer release times and deadlines. In cases (1), our algorithm improves the existing fastest algorithm [2] from) g. In case (2), our algorithm improves Garey and Johnson's algorithm [5] from O(n g to minfO(ne); O(n) g. In case (3), no polynomial time algorithm for multiple <b>functional</b> <b>units</b> of dierent types was known before...|$|R
50|$|Otherwise, we {{can assume}} the operands {{are not in the}} registers, and so use virtual values. The <b>functional</b> <b>unit</b> must {{calculate}} the real value {{to keep track of the}} <b>functional</b> <b>units</b> that produce the operand.|$|R
40|$|Abstract — In {{the era of}} deep {{submicron}} technology, wire delay on an LSI chip {{is becoming}} relatively larger than operation delay. Increase of execution speed by parallel processing may be limited due to the data transfer time between <b>functional</b> <b>units.</b> If we can dynamically reconfigure nearby <b>functional</b> <b>units</b> into desired operation type and execute operations on the reconfigured units, long data transfer is reduced and hence fast processing can be achieved. In this {{paper we propose a}} scheduling method to determine static operation execution time and <b>functional</b> <b>unit</b> allocation to achieve fast signal processing by considering dynamic reconfiguration of <b>functional</b> <b>units.</b> Results show the effectiveness of the proposed method. ...|$|R
50|$|<b>Functional</b> <b>Units</b> (such as an adder or a multiplier), {{each have}} their own {{corresponding}} Reservation Station. The output of the <b>Functional</b> <b>Unit</b> connects to the Common Data Bus, where Reservation Stations are listening for the operands they need.|$|R
40|$|<b>Functional</b> <b>units</b> in {{the human}} foot provide a {{meaningful}} basis for subdivisions of the entire foot during gait analysis as well as justified simplifications of foot models. The present study aimed to identify such <b>functional</b> <b>units</b> during walking and slow running. An invasive method based upon reflective marker arrays mounted on intracortical pins was used to register motion of seven foot bones. Six healthy subjects were assessed during walking and four of them during slow running. Angle-angle diagrams of corresponding planar bone rotations were plotted against each other and used to establish <b>functional</b> <b>units.</b> Individual <b>functional</b> <b>units</b> were accepted when the joints rotated temporally in phase and either (i) in the same direction, (ii) in the opposite direction, or (iii) {{when one of the}} two joints showed no rotation. A <b>functional</b> <b>unit</b> was generalized if all available angle-angle diagrams showed a consistent pattern. A medial array from the navicular to the first metatarsal was found to perform as a <b>functional</b> <b>unit</b> with parts rotating in the same direction and larger rotations occurring proximally. A rigid <b>functional</b> <b>unit</b> comprised the navicular and cuboid. No other <b>functional</b> <b>units</b> were identified. It was concluded that the talus, navicular, and medial cuneiform should neither be regarded as one rigid unit nor as one segment during gait analysis. The first and fifth metatarsals should also be considered separately. It was further concluded that a marker setup for gait analysis should consist of the following four segments: calcaneus, navicular-cuboid, medial cuneiform-first metatarsal, fifth metatarsal...|$|R
5000|$|Compressing the downmix audio by a base audio coder further {{increases}} the coding efficiency of S5. The various bitstreams {{produced by the}} <b>functional</b> <b>units</b> of an S5 encoder may be encapsulated into a single bitstream by the <b>functional</b> <b>unit</b> 'Multiplexer'.|$|R
30|$|The <b>functional</b> <b>unit</b> and its {{analysis}} {{is a way}} of geometrical understanding for the biological structure [13]. The <b>functional</b> <b>units</b> of mandible are reported to be composed of condyle, coronoid, body, angle, symphysis, and dentoalveolus [13, 14], which are known to be growing independently. Thus, we can presume that the characteristics of <b>functional</b> <b>units</b> in hemifacial microsomia can be different at its affected part or unit and the degree of involvement during the development and growth.|$|R
2500|$|... the <b>functional</b> <b>unit,</b> which defines what {{precisely}} {{is being}} studied and quantifies the service {{delivered by the}} product system, providing a reference to which the inputs and outputs can be related. Further, the <b>functional</b> <b>unit</b> is an important basis that enables alternative goods, or services, to be compared and analyzed. So to explain this a functional system which is inputs, processes and outputs contains a <b>functional</b> <b>unit,</b> that fulfills a function, for example paint is covering a wall, making a <b>functional</b> <b>unit</b> of 1m² covered for 10 years. The functional flow would be the items necessary for that function, so {{this would be a}} brush, tin of paint and the paint itself.|$|R
40|$|Power {{consumption}} {{is the major}} constraint for modern microprocessor designs. In particular, static power consumption becomes a serious problem as the transistor size shrinks via semiconductor technology improvement. This paper proposes a technique that reduces the static power consumed by <b>functional</b> <b>units.</b> It exploits the activity rate of <b>functional</b> <b>units</b> and utilizes the power heterogeneous <b>functional</b> <b>units.</b> From detailed simulations, we investigate {{the conditions in which}} the proposed technique works effectively for simultaneous dynamic and static power reduction and find that we can reduce the total power by 11. 2 % if two out of four leaky <b>functional</b> <b>units</b> are replaced by leakless ones in the situation where the static power occupies half of the total power...|$|R
5000|$|... the <b>functional</b> <b>unit,</b> which defines what {{precisely}} {{is being}} studied and quantifies the service {{delivered by the}} product system, providing a reference to which the inputs and outputs can be related. Further, the <b>functional</b> <b>unit</b> is an important basis that enables alternative goods, or services, to be compared and analyzed. So to explain this a functional system which is inputs, processes and outputs contains a <b>functional</b> <b>unit,</b> that fulfills a function, for example paint is covering a wall, making a <b>functional</b> <b>unit</b> of 1m² covered for 10 years. The functional flow would be the items necessary for that function, so {{this would be a}} brush, tin of paint and the paint itself.|$|R
40|$|Abstract-‐Unavailability of <b>functional</b> <b>units</b> {{and their}} unequal {{activity}} makes performance bottlenecks and thermal hot spot units in general-purpose processors. We propose to use reconfigurable <b>functional</b> <b>units</b> {{to overcome these}} challenges. A selected set of complex <b>functional</b> <b>units</b> that might be under-utilized, such as a multiplier and divider, are realized in a time-multiplexed fashion using a shared programmable Look Up Table (LUT) based fabric. This allows for run-time reconfiguration and migration of their activity. LUT based implementation also allows under-utilized <b>functional</b> <b>units</b> to be dynamically reconfigured to the <b>functional</b> <b>units</b> that have a performance bottleneck and hence improving performance. The programmable LUTs are realized using Spin Transfer Torque (STT) Magnetic technology (also called STT-NV) due to its zero leakage and CMOS compatibility. The results show significant performance improvement of 16 % on average across standard benchmarks, when replacing CMOS multiplier and divider with reconfigurable STT-NV LUT counterpart. In addition, reconfiguration reduces the maximum temperature of <b>functional</b> <b>units</b> by up to 27 oC and almost eliminates the thermal variation across them. This comes with small power overhead and no area impact. Keywords [...] STT-NV logic; reconfigurable architecture; low power; functional units; low temperature; multiplier; divider I...|$|R
40|$|Different {{fragments}} of the hemocyanin (Hc) isolated from the gastropod Rapana venosa containing a single <b>functional</b> <b>unit</b> (50 kDa), two <b>functional</b> <b>units</b> (100 kDa) and three <b>functional</b> <b>units</b> (150 kDa) were obtained in a dissociating buffer {{in the presence of}} Zn 2 + and purified to homogeneity. Their conformations in solution were studied by means of small angle X-ray scattering (SAXS) and compared with those of the corresponding fragments previously obtained by limited proteolysis [Arch. Biochem. Biophys., 2000, 373, 154]. The overall shape of each fragment was determined using an ab initio approach. The crystal structures of the <b>functional</b> <b>unit</b> e from the same Hc and from another molluscan Hc (Octopus dofleini) were used to model 100 and 150 kDa fragments using rigid body movements to fit the corresponding SAXS patterns. Interesting differences were observed between the <b>functional</b> <b>unit</b> organization in the low-molecular mass fragments according to the two preparation methods, suggesting different localizations within the 11 S functional subunit. [ [...] . ...|$|R
30|$|The aim of {{this study}} was to present {{three-dimensional}} (3 D) structural characteristics of the mandible in the hemifacial microsomia. The mandible has six distinct <b>functional</b> <b>units,</b> and its architecture is the sum of balanced growth of each <b>functional</b> <b>unit</b> and surrounding matrix.|$|R
40|$|Revealing <b>functional</b> <b>units</b> in protein-protein {{interaction}} (PPI) {{networks are}} important for understanding cellular functional organization. Current algorithms for identifying <b>functional</b> <b>units</b> mainly focus on cohesive protein complexes which have more internal interactions than external interactions. Most of these approaches do not handle overlaps among complexes since they usually allow a protein to belong to only one complex. Moreover, {{recent studies have shown}} that other non-cohesive structural <b>functional</b> <b>units</b> beyond complexes also exist in PPI networks. Thus previous algorithms that just focus on non-overlapping cohesive complexes are not able to present the biological reality fully. Here, we develop a new regularized sparse random graph model (RSRGM) to explore overlapping and various structural <b>functional</b> <b>units</b> in PPI networks. RSRGM is principally dominated by two model parameters. One is used to define the <b>functional</b> <b>units</b> as groups of proteins that have similar patterns of connections to others, which allows RSRGM to detect non-cohesive structural <b>functional</b> <b>units.</b> The other one is used to represent the degree of proteins belonging to the units, which supports a protein belonging to more than one revealed unit. We also propose a regularizer to control the smoothness between the estimators of these two parameters. Experimental results on four S. cerevisiae PPI networks show that the performance of RSRGM on detecting cohesive complexes and overlapping complexes is superior to that of previous competing algorithms. Moreover, RSRGM has the ability to discover biological significant <b>functional</b> <b>units</b> besides complexes...|$|R
30|$|In {{order to}} {{characterize}} the mandibular 3 D architecture of hemifacial microsomia, we analyzed the mandibular <b>functional</b> <b>units</b> of four hemifacial microsomia patients using the 3 D reconstructed computed tomography (CT) images. And we compared the <b>functional</b> <b>unit</b> size between affected and non-affected side.|$|R
