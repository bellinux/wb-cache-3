5|216|Public
40|$|Abstract. On-orbit service (<b>OOS)</b> <b>system</b> {{based on}} Orbital Servicing Vehicle (OSV) {{is a complex}} giant system which needs an overall {{planning}} according {{to the analysis of}} its components and demands. Accordingly in this article, the target spacecrafts of the <b>OOS</b> <b>system</b> and their demands are firstly analyzed based on their function design and orbital location. Then the servicing mission is divided into 3 aspects including service, maintenance and assembly. The mission types and effectiveness are clarified as well. Finally, the components and their mutual relationship of OSV-cored <b>OOS</b> <b>system</b> are elaborated considering the future development. The plan proposed in this paper will make a good reference for the overall design of <b>OOS</b> <b>system.</b> ...|$|E
40|$|Software {{developers}} {{develop their}} software with some standard specification, but important {{issue is how}} to measure the quality of software modularization. In this paper advanced set of metrics are proposed which measure quality of modularization of an Object-Oriented Software (<b>OOS)</b> <b>System.</b> Metrics are designed with universal standard principles to measure the quality of Object-Oriented software which has been developed. Proposed metrics are coupling based structural metrics, these metrics measures the function-call traffic through the API’s of the modules {{in relation to the}} overall function-call traffic. It is universally accepted that quality of the software modularization is improved when interaction between modules of system is through published APIs only. The metrics can be validated from the results obtained on human-modularized versions of the software...|$|E
40|$|The {{major issue}} {{faced by the}} {{developers}} in today’s environment is how to measure the quality of modularized software. Here {{a new set of}} metrics are proposed which measure the quality of modularization of an Object-Oriented Software (<b>OOS)</b> <b>System.</b> A set of design principles are proposed to capture the notion of modularity and metrics are defined based on the principles. For this we have the coupling-based structural metrics which is used to measure the function-call traffic through the API’s of the modules in relation to the overall function-call traffic. It is now widely accepted that the overall quality of a large body of software is enhanced when module interactions are restricted to take place through the published API’s for the modules. The metrics can be tested on some large legacy-code business applications. The metrics can be validated from the results obtained on human-modularized versions of the software...|$|E
40|$|Considerable {{effort has}} been devoted to {{developing}} exception handling models for sequential object-oriented (<b>OO)</b> <b>systems,</b> so a common understanding exists in many topics in the field. Many practical systems have been designed using these features. The situation is different in concurrent <b>OO</b> <b>systems.</b> Although several schemes combining concurrency and exception handlin...|$|R
40|$|It {{is next to}} {{impossible}} to develop real-life applications in just pure Prolog. With XPCE [5] we realised a mechanism for integrating Prolog with an external object-oriented system that turns this <b>OO</b> <b>system</b> into a natural extension to Prolog. We describe the design {{and how it can}} be applied to other external <b>OO</b> <b>systems.</b> ...|$|R
40|$|In this paper, {{we focus}} on the problem of {{identifying}} refactoring opportunities 1 in object-oriented (<b>OO)</b> legacy <b>systems,</b> in the light of aspect-oriented programming (AOP). Our position is {{based on the premise that}} design patterns comprise an impor-tant technique used by developers of <b>OO</b> <b>systems</b> to cope with crosscutting. We argu...|$|R
40|$|Many {{researches}} {{to testing}} object-oriented systems (OOSs) {{have been proposed}} for the past decade. After all, almost all large OO software specifications still contain incompleteness, inconsistency, and ambiguity. The framework can be defined using any state-based specification notation and used to derive test cases from state-based specifications in this paper, it is demonstrated using the RSML notation. A state transition diagram (STD) derived from RSML specification provides a complete behavior of a given <b>OOS.</b> <b>System</b> testing is concerned with testing an entire system based on its specifications. In the context of object-oriented, UML development, this means that system test requirements are derived from UML analysis artifacts such as use cases, their corresponding sequence and collaboration diagrams, class diagrams. The goal is here to support the derivation of functional system test requirements, which will be transformed into test cases once we have detailed design information. In this paper, we describe a methodology in a practical way and illustrate it with an example. In this paper a framework that formally defines test data sets and their relation to the operations in a specification and to other test data sets, providing structure to the testing process...|$|E
40|$|The amenability of {{satellites}} to on-orbit servicing (OOS) is assessed {{through the}} development of an agent-based model. With the context of a multi-year servicing campaign in the GEO (geosynchronous orbit) belt, OOS is treated as a multi-variable optimization problem with the principal trade of minimizing both ∆V (change in velocity) expenditures and transfer time. Assuming current launch vehicle, propulsion, and robotic technology for servicing vehicles, the focus in the model is on the serviceability of target satellites. Servicing vehicle operations are simulated over time, completing maneuvers as a function of pathdependent servicing operations. Primary outputs of the agent model are the cost of servicing (mean ∆V expenditure by servicing vehicle for satisfying tickets) and the performance of target satellites (availability for mission operations). Many interesting lessons emerged from the agent-based model of OOS with implications for both serviceability assessments of target satellites and servicing provider architecture. Most fundamentally, the high availability of GEO satellites in the model suggests that satellites work too well to stress a simple <b>OOS</b> <b>system.</b> Servicing vehicles were idle more than 90 % of the time leading to a probability of two or more servicing vehicles conducting missions simultaneously of less than 1 %. OOS business models need to balance the attraction of GEO due to the high concentration of valuable spacecraft and friendly orbital dynamics with the high-reliability of GEO satellites launched over the past two decades. Nomenclature aphase = Semi major axis of the phasing orbit for the servicer a target = Semi major axis of the target satellite orbit kservicer = Number of phasing revolutions of the servicer kt arg et = Number of phasing revolutions of the target satellite ϑ = Initial angular separation between servicer and target satellite ∆Vphase = Velocity change necessary for servicer to adjust its phase to match target satellite ∆Vproximity = Velocity change necessary for servicer to adjust to proximity operations at target satellite I...|$|E
40|$|This paper {{proposes a}} {{comprehensive}} suite of measures {{to quantify the}} level of class coupling during the design of object-oriented (<b>OO)</b> <b>systems.</b> This suite takes into account different OO design mechanisms, such as usage, specialization, and aggregation, thus capturing different kinds of coupling in <b>OO</b> <b>systems.</b> Based on data about operational failures of a commercial software system, our coupling measures are empirically investigated by analyzing {{their relationship with the}} probability of fault detection across classes. The results demonstrate that some of these coupling measures, along with some of Chi damber and Kemererüs measures, may be useful early quality indicators of the design of <b>OO</b> <b>systems.</b> In addition, principal component analysis shows that the underlying theory on which are based our coupling measures is partially supported by evidence. The results are then compared with a previous university study: we found a significant level of consistency and stability in the results...|$|R
40|$|This paper {{addresses}} Object-Oriented (<b>OO)</b> <b>system</b> complexity at the application, object, method, {{and variable}} levels. At each level measures are proposed {{to account for}} the cohesion and coupling aspects of the <b>system.</b> <b>OO</b> <b>system</b> complexity at each level is presented {{as a function of the}} measurable characteristics such as fan-in, fan-out, number of I/O variables, fan-up, fan-down, and polymorphism. Each measure is defined with adherence to the principles that measures must be intuitive and that they must be applicable to all phases of the OO development life cycle. I...|$|R
40|$|Abstract. The {{need for}} formal methods for Object Oriented (<b>OO)</b> <b>systems</b> {{resulted}} in methods like UML and Lepus 3 that are de-facto graphical languages equipped with formal tools that {{are able to}} handle the design of <b>OO</b> <b>systems.</b> However, they lack precise semantics which might lead to problems, such as inconsistencies or redundancies. On the other hand, to our knowledge, there is no approach that allows one to understand and follow the requirements of a design-implementation path for people that lack knowledge about standard software modeling language. The approach to <b>OO</b> <b>system</b> modeling presented in this paper uses Controlled English (CE) (a well defined subset of English) in the area where graphical languages are currently used. Object Oriented Constructs are modeled first in Description Logic (DL) that provides the logical framework and the CE verbalization of DL (CE DL) finally bridges DL with CL allowing to access OO world in formal, yet understandable way for both human and computer. ...|$|R
40|$|This paper aims at empirically {{exploring}} {{the relationships between}} most of the existing design coupling, cohesion, and inheritance measures for object-oriented (<b>OO)</b> <b>systems,</b> and the fault-proneness of <b>OO</b> <b>system</b> classes. The underlying goal {{of this study is}} to better understand the relationship between existing design measurement in <b>OO</b> <b>systems</b> and the quality of the software developed. In addition, we aim at assessing whether such relationships, once modeled, can be used to effectively drive and focus inspections or testing. The study described here is a replication of an analogous study conducted in a university environment with systems developed by students. In order to draw more general conclusions and to (dis) confirm the results obtained there, we now replicated the study using data collected on an industrial system developed by professionals. Results show that many of our findings are consistent across systems, despite the very disparate nature of the systems under study. Some of t [...] ...|$|R
40|$|Since the {{development}} of software inspection over twenty-five years ago it has become established as {{an effective means of}} detecting defects. Inspections were originally developed {{at a time when the}} procedural paradigm was dominant but, with the Object- Oriented (OO) paradigm growing in influence and use, there now exists a lack of guidance on how to apply inspections to <b>OO</b> <b>systems.</b> Object-oriented and procedural languages differ not only in their syntax but also in a number of more profound ways - the encapsulation of data and associated functionality, the common use of inheritance, and the concepts of polymorphism and dynamic binding. These factors influence the way that modules (classes) are created in <b>OO</b> <b>systems,</b> which in turn influences the way that <b>OO</b> <b>systems</b> are structured and execute. Failure to take this into account may hinder the application of inspections to OO code. This thesis shows that the way in which the objectoriented paradigm distributes related functionality can have a serious impact on code inspection and, to address this problem, it develops and empirically evaluates three code reading techniques...|$|R
40|$|Size related {{measures}} {{have traditionally been}} the basis for effort estimation models to predict costs of software activities along the entire software product life cycle. Object-Oriented (<b>OO)</b> <b>systems</b> are developed and evolve by adding/removing new classes and modifying existing entities. We propose an approach to predict the size of changes of evolving <b>OO</b> <b>systems</b> based on {{the analysis of the}} classes impacted by a change request. Our approach can be used both in iterative development processes or during software maintenance. A first empirical evaluation of the proposed approach has been obtained by applying our tools to the postrelease evolution of <b>OO</b> software <b>systems</b> available on the net. The systems were analyzed, and models to predict added/modified LOCs from added/modified classes were statistically validated. In the paper preliminary results of the above outlined evaluation is presented. 1...|$|R
40|$|Abstract Several non {{probabilistic}} approaches were {{proposed in}} the literature to analyze and predict change impact in Object-Oriented (<b>OO)</b> <b>systems.</b> Different aspects were considered in these studies and several experiments were conducted to check some hypotheses. However, causality relation between software internal attributes and change impact still misses convincing explanations. In this paper, we propose a probabilistic approach using Bayesian networks to answer to this problematic of change impact analysis and prediction in <b>OO</b> <b>systems.</b> The built probabilistic model is tested on data extracted from a real system. The running of different scenarios on the network, globally confirm results already found in previous studies. ...|$|R
40|$|Object Oriented {{languages}} do {{not guarantee}} that a system is flexible enough to absorb future requirement evolution, or that its components can be reused in other contexts. This paper presents an approach to the identification of existing problematic constructions in OO applications. Our main goal is to provide support both for reengineering legacy <b>OO</b> <b>systems,</b> and evaluating <b>OO</b> <b>systems</b> that are still under development, by detecting certain constructions that compromise their future expansion or modification, and suggesting their replacement by more adequate ones. This approach {{is supported by a}} tool (OOPDTool) comprising a knowledge base of good design constructions, that correspond to heuristics and design patterns, as well as problematic constructions (i. e., anti-patterns). 1...|$|R
40|$|Abstract. In {{empirical}} {{comparisons of}} Aspect-Oriented (AO) to Object-Oriented (<b>OO)</b> <b>systems,</b> system properties such as understandability, maintainability, reusability, and testability {{have often been}} inferred from other metrics, such as lines of code, sites of change, and modularity. However, in traditional OO metrics suites such system properties are assessed separately from these measures. We applied OO metrics for comparing an AO with an <b>OO</b> <b>system</b> and found that improved modularity did not imply improvements in the system properties listed above. This paper illustrates the appropriateness of using OO metrics for the empirical analysis of systems, and presents evidence that in subsequent studies of AO systems certain system properties should be assessed separately from modularity. ...|$|R
40|$|This paper aims at empirically {{exploring}} {{the relationships between}} most of the existing coupling and cohesion measures for object-oriented (<b>OO)</b> <b>systems,</b> and the fault-proneness of <b>OO</b> <b>system</b> classes. The underlying goal of such a study is {{to better understand the}} relationship between existing design measurement in <b>OO</b> <b>systems</b> {{and the quality of the}} software developed. The study described here is a replication of an analogous study conducted in an university environment with systems developed by students. In order to draw more general conclusions and to (dis) confirm the results obtained there, we now replicated the study using data collected on an industrial system developed by professionals. Results show that many of our findings are consistent across systems, despite the very disparate nature of the systems under study. Some of the strong dimensions captured by the measures in each data set are visible in both the university and industrial case study. For example, the frequency of metho d invocations appears to be the main driving factor of fault-proneness in all systems. However, there are also differences across studies which illustrate the fact that quality does not follow universal laws and that quality models must be developed locally, wherever needed...|$|R
50|$|The Diploma of Information Technology (DIT) is {{equivalent}} to one academic year of a Bachelor of Information Technology at several universities. It has eight compulsory subjects: systems analysis, programming, computer organisation, data management, <b>OO</b> <b>systems</b> development, computer communications, professional practice and systems principles.|$|R
40|$|Thispaper aims at empirically {{exploring}} the relationships betweenmost {{of the existing}} design coupling, cohesion, and inheritancemeasures for object-oriented (<b>OO)</b> <b>systems,</b> and the fault-pronenessof <b>OO</b> <b>system</b> classes. The underlying goal {{of this study is}} tobetter understand the relationship between existing design measurementin <b>OO</b> <b>systems</b> {{and the quality of the}} software developed. in addition,we aim at assessing whether such relationships, once modeled,can be used to effectively drive and focus inspections or testing. The study described here is a replication of an analogous studyconducted in a university environment with systems developedby students. In order to draw more general conclusions and to(dis) confirm the results obtained there, we now replicated thestudy using data collected on an industrial system developedby professionals. Results show that many of our findings areconsistent across systems, despite the very disparate natureof the systems under study. Some of the strong dimensions capturedby the measures in each data set are visible in both the universityand industrial case study. For example, the frequency of methodinvocations appears to be the main driving factor of fault-pronenessin all systems. However, there are also differences across studies,which illustrate the fact that, although many principles andtechniques can be reused, quality does not follow universal lawsand quality models must be developed locally, wherever needed...|$|R
40|$|This article {{reports about}} M-Track, a metric tool {{framework}} for tracking {{the evolution of}} Objetct-Oriented (<b>OO)</b> <b>systems.</b> It tracks the evolution using metrics reflecting cohesion, coupling, inheritance, and size. M-Track was applied for analyzing the evlolution of a product family of systems {{in the domain of}} stock market...|$|R
40|$|Abstract [...] - Software {{testing and}} {{maintenance}} being interleaved phases span more in software life cycle. The efforts to minimize this span rely obviously on testing when maintenance is natural. The features of Object-Oriented (<b>OO)</b> software <b>systems,</b> {{when compared to}} the classical systems, claim much reducing the maintenance costwithout necessarily thepossibility of maintenance itself. It is natural that even such systems evolve due to many reasons. Though the specific reasons leading to the maintenance differ, the general rationale behind maintenance is to enhance the life-cycleand possibly the value of the existing system. Hence testing effort is more natural and significant even then. Moreover, the salient features of <b>OO</b> software <b>systems</b> furtherance the testing span despite their claim on maintenance. However, the availability of classical OO software metrics aid better early quality testing of <b>OO</b> <b>systems.</b> They exploit the critical parts of <b>OO</b> software <b>systems</b> thereby offering timely, thorough, and effective assurance. However there is not yet a common metric model in this regard. On the other hand, it is expected that the evolved model-based OO software metrics help define the subjective features more objectively facilitating users to perform metrics activities. The conflation of both classical and model-based metrics mutually alleviates their limitations and brings more synergy in reducing the test costs of <b>OO</b> software <b>systems.</b> Keywords [...] - OO metrics, Object-Orientation, Model-based OO metrics, Software metrics...|$|R
40|$|UML {{notation}} and {{use case}} centred architecture for developing software systems {{are considered to}} be the industry standard for <b>OO</b> <b>system</b> development. When it comes to modeling the business though, the situation is still far from being well established. Two mainstream architectures applied in business modeling are business use case and busines...|$|R
40|$|This paper {{presents}} behavior contracts {{as a new}} assertion {{mechanism and}} a tool that uses such contracts to support the testing of Object-Oriented (<b>OO)</b> <b>systems.</b> A behavior contract models how the scenarios for performing a designated task {{are expected to be}} implemented. Based on this contract, our tool can automatically monitor the program execution for checking important properties related to these scenarios. This capability can help testers to determine whether the scenarios have been implemented correctly. Our tool can also collect test coverage information w. r. t. the scenarios modeled by a behavior contract. Such information can be used to direct the testing efforts towards the less-covered scenarios, and to determine whether the implementation of these scenarios has been adequately tested. Therefore, using this tool should improve both the efficiency and effectiveness of testing <b>OO</b> <b>systems.</b> ...|$|R
40|$|This paper {{considers}} {{the problem of}} providing an Object-Oriented (<b>OO)</b> <b>system</b> with reasoning and program synthesis abilities. We consider an object-oriented knowledge system in which methods are synthesized from specifications using an intuitionistic propositional calculus and a Proof-As-Program methodology. In order to support reasoning about some dynamic aspects of the <b>OO</b> <b>system,</b> we propose to use a logic language of meta-specifications and we develop transformations from an object base to the meta-specifications and the inverse ones. Partial Deduction is used as an optimization technique for deduction {{in the language of}} meta-specifications. 1 Introduction This paper reports on our experience from implementing reasoning and program synthesis in an object-oriented system. Object-oriented systems are successful in structuring and organizing software systems, but, traditionally, they are imperative. Consequently, reasoning in such systems about, for instance, dynamic properties is rathe [...] ...|$|R
40|$|Object-Oriented (<b>OO)</b> <b>systems</b> are {{inherently}} data structure dependent. Database (DB) systems {{are intended to}} be data structure independent. So to attempt to specify an OODB is vain. A simplified version of the Relational model provides data structure independence, and avoids the most telling criticism of that model: the lack of orthogonality of its structures...|$|R
40|$|In {{this paper}} we discuss some issues {{regarding}} the nature and behavior of crosscutting concerns in <b>OO</b> <b>systems.</b> We argue that aspects must be defined as first-class abstractions in order to be manipulated as such and thus to provide for reusability and dynamic adaptability {{as well as for the}} creation of dynamically loadable aspect repositories. 1...|$|R
40|$|The rise of {{object-oriented}} (OO) {{programming in}} conjunction with relational databases as a persistent storage mechanism {{has led to a}} great deal of interest in Object-Relational Mappers (ORMs) that automate queries on behalf of <b>OO</b> <b>systems.</b> ORMs are subject to a number of problems that arise when attempts are made to map OO data to conceptuall...|$|R
40|$|Multi-agent {{systems have}} become {{increasingly}} mature, but their appearance {{does not make the}} traditional OO approach obsolete. On the contrary, OO methodologies can benefit from the principles and tools designed for agent systems. The Agent/Rule/Class (ARC) framework is proposed as an approach that builds agents upon traditional <b>OO</b> <b>system</b> components and makes use of business rules to dictate agent behaviour with the aid of OO components. By modelling agent knowledge in business rules, the proposed paradigm provides a straightforward means to develop agent-oriented systems based on the existing object-oriented systems and offers features that are otherwise difficult to achieve in the original <b>OO</b> <b>systems.</b> The main outcome of using ARC is the achievement of adaptivity. The framework is supported by a tool that ensures agents implement up-todate requirements from business people, reflecting desired current behaviour, without the need for frequent system rebuilds. ARC is illustrated with an e-business example. 1...|$|R
40|$|Many {{coupling}} {{measures have}} been proposed {{in the context of}} object-oriented (<b>OO)</b> <b>systems.</b> In addition, several studies have highlighted the complexity of using dependency analysis in OO software to perform impact analysis. The question is then: can we use simple decision models based on coupling measurement to support impact analysis in <b>OO</b> <b>systems?</b> Such an approach has for main advantage its simplicity and complete automation. To investigate this question, we perform here a thorough analysis on a commercial C++ system where change data has been collected over several years. We identify the coupling dimensions that seem to be significantly related to ripple effects and use them to rank classes according to their probability of containing ripple effects. We then assess the expected effectiveness of such decision models. Keywords Coupling, metrics, measurement, impact analysis, object -oriented. 1 Introduction A claimed benefit of object-oriented (OO) modeling approaches is that they [...] ...|$|R
40|$|Software {{architecture}} modelling {{and representation}} {{has become an}} important phase of the development process of complex software systems. Using software architecture representation as a high level view provides many advantages during all phases of the software life cycle. Nevertheless, for many systems, such architecture representation is not available. To deal with this problem, we propose in this paper an approach of architecture recovery which aims to extract component-based architecture from an object-oriented (<b>OO)</b> <b>system,</b> by a semiautomatic exploration process. To this end, we use relational concept analysis {{in order to identify}} the architectural components. The RCA-based approach comes as a complementary method to relieve some limits of the existing implementation of ROMANTIC based on simulated annealing algorithm. In the RCA approach, architectural components are identified from concepts derived by exploiting all existing dependency relations between classes of the <b>OO</b> <b>system.</b> We evaluated the feasibility of our approach on a Java software...|$|R
40|$|This paper {{proposes a}} {{comprehensive}} suite of measures {{to quantify the}} level of class coupling during the design of object-oriented systems. This suite {{takes into account the}} different OO design mechanisms provided by the C++ language (e. g., friendship between classes, specialization, and aggregation) but it can be tailored to other OO languages. The different measures in our suite thus reflect different hypotheses about the different mechanisms of coupling in <b>OO</b> <b>systems.</b> Based on actual project defect data, the hypotheses underlying our coupling measures are empirically validated by analyzing their relationship with the probability of fault detection across classes. The results demonstrate that some of these coupling measures may be useful early quality indicators of the design of <b>OO</b> <b>systems.</b> These measures are conceptually different from the OO design measures defined by Chidamber and Kemerer; in addition, our data suggests that they are complementary quality indicators. Key-words: Co [...] ...|$|R
40|$|The design {{structure}} of OO software has decisive impact on its quality. The design must be strongly correlated with quality characteristics like analyzability, changeability, stability and testability, which {{are important for}} maintaining the system. But due to the diversity {{and complexity of the}} design properties of <b>OO</b> <b>system</b> e. g. Polymorphism, encapsulation, coupling it becomes cumbersome. Comment: 8 pages, 2 figure...|$|R
5000|$|Like the <b>OO</b> <b>systems</b> in {{most dynamic}} languages, CLOS does not enforce encapsulation. Any slot can be {{accessed}} using the [...] function or via (optionally auto-generated) accessor methods. To access it via [...] {{you have to know}} the name of the slot. CL programmers use the language's package facility to declare which functions or data structures are intended for export.|$|R
40|$|International audienceSoftware {{architecture}} modelling {{and representation}} {{has become an}} important phase of the development process of complex software systems. Using software architecture representation as a high level view provides many advantages during all phases of the software life cycle. Nevertheless, for many systems, such architecture representation is not available. To deal with this problem, we propose in this paper an approach of architecture recovery which aims to extract component-based architecture from an object-oriented (<b>OO)</b> <b>system,</b> by a semi-automatic exploration process. To this end, we use relational concept analysis {{in order to identify}} the architectural components. The RCA-based approach comes as a complementary method to relieve some limits of the existing implementation of ROMANTIC based on simulated annealing algorithm. In the RCA approach, architectural components are identified from concepts derived by exploiting all existing dependency relations between classes of the <b>OO</b> <b>system.</b> We evaluated the feasibility of our approach on a Java software...|$|R
40|$|Abstract [...] This paper {{describes}} {{a series of}} three empirical studies devoted {{to the development of a}} rigorous approach for effective inspections of object-oriented (OO) code. Since the time that inspections were developed they have been shown to be powerful defect detection strategies. However, little research has been done to investigate their application to <b>OO</b> <b>systems,</b> which have very different structural and execution models compared to procedural systems. This suggests that inspection techniques may not be currently being deployed to their best effect in the context of large-scale <b>OO</b> <b>systems.</b> The studies reveal three significant issues that need to be addressed-the identification of chunks of code to be inspected, the order in which the code is read, and the resolution of frequent non local references. The sequence of experiments builds up a complement of three techniques: one based on a checklist, one focussed on constructing abstract specifications, and the last centred on the rout...|$|R
