549|938|Public
25|$|Psychological {{formalism}} {{is defined}} as the science of mind and corresponds to the behavior of animal objects. Human psychology {{is considered to be a}} unique subset of psychological formalism that deals with human behavior at the level of the individual. Because human behavior is immersed in the larger socio-cultural context (level four in the ToK System), human psychology is considered a hybrid discipline that merges the pure science of psychology with the social sciences. It is important to point out that there are other disciplines the ToK System would classify as “hybrids.” Molecular genetics, for example, is a hybrid between chemistry and biology and neuroscience is a hybrid between biology and psychology. As with Henriques' proposed conception of human psychology, both of these disciplines adopt an <b>object</b> <b>level</b> perspective (molecular and cellular, respectively) on phenomena that simultaneously exist as part of meta-level system processes (life and mind, respectively).|$|E
2500|$|Nelson and Narens {{proposed}} {{a theoretical framework}} for understanding metacognition and metamemory. In this framework there are two levels: the <b>object</b> <b>level</b> (for example, cognition and memory) and the meta level (for example, metacognition and metamemory). Information flow from the meta level to the <b>object</b> <b>level</b> is called control, and information flow from the <b>object</b> <b>level</b> to the meta level is called monitoring. Both monitoring and control processes occur in acquisition, retention, and retrieval. Examples of control processes are allocating study time and selecting search strategies, and examples of monitoring processes are ease-of-learning (EOL) judgments and FOK judgments.|$|E
50|$|JScript {{support at}} a global and <b>object</b> <b>level.</b>|$|E
3000|$|Objects {{stored in}} a Swift-based system are {{organized}} in a three level hierarchy. The topmost level of this hierarchy is the accounts level, followed by the containers level (second <b>level)</b> and the <b>objects</b> <b>level</b> (third level). The accounts level contains user accounts. Each user account is associated with many containers from the containers level. A container is used for organizing objects, therefore a container is associated with many objects from the <b>objects</b> <b>level.</b> An <b>object</b> may be a file or a folder (that contains other objects). Every object within a container is identified by a container-unique name. Each request for an operation over an object contains a URI that denotes the account, the container {{and the name of}} the object in question, i.e., it is of the form “[URL] [...]...|$|R
40|$|This {{document}} {{is also available}} in these non-normative formats: PostScript file, PDF file, plain text, ZIP file, and single HTML file. Copyright © 2002 W 3 C ® (MIT, INRIA, Keio), All Rights Reserved. W 3 C liability, trademark, document use and software licensing rules apply. This specification defines the Document <b>Object</b> Model <b>Level</b> 2 HTML, a platform- and language-neutral interface that allows programs and scripts to dynamically access and update the content and structure of [HTML 4. 01] and [XHTML 1. 0] documents. The Document <b>Object</b> Model <b>Level</b> 2 HTML builds on the Document <b>Object</b> Model <b>Level</b> 2 Core [DOM Level 2 Core] and is not backward compatible with DO...|$|R
50|$|Downloadable content (DLC) is {{additional}} content created for a released video game. It is distributed through the Internet by the game's official publisher. Downloadable content {{can be of}} several types, ranging from aesthetic outfit changes to a new, extensive storyline, similar to an expansion pack. As such, DLC may add new game modes, <b>objects,</b> <b>levels,</b> challenges or other features to a complete, already released game.|$|R
5000|$|Nelson and Narens {{proposed}} {{a theoretical framework}} for understanding metacognition and metamemory. In this framework there are two levels: the <b>object</b> <b>level</b> (for example, cognition and memory) and the meta level (for example, metacognition and metamemory). Information flow from the meta level to the <b>object</b> <b>level</b> is called control, and information flow from the <b>object</b> <b>level</b> to the meta level is called monitoring. Both monitoring and control processes occur in acquisition, retention, and retrieval. Examples of control processes are allocating study time and selecting search strategies, and examples of monitoring processes are ease-of-learning (EOL) judgments and FOK judgments.|$|E
5000|$|BIM {{data and}} process {{management}} (accessing and managing BIM models at the <b>object</b> <b>level</b> for project management) ...|$|E
5000|$|In this representation, <b>object</b> <b>level</b> {{variables}} do {{not appear}} explicitly. The constant [...] takes an expression (that is being bound) and a meta-level function [...] → [...] (the body of the let). This function is the higher-order part: an expression with a free variable isrepresented as an expression with holes that are filled in by the meta-level function when applied. As a concrete example, we would construct the <b>object</b> <b>level</b> expression ...|$|E
40|$|This {{document}} {{is also available}} in these non-normative formats: XML file, plain text, PostScript file, PDF file, single HTML file, and ZIP file. Copyright © 2002 W 3 C ® (MIT, INRIA, Keio), All Rights Reserved. W 3 C liability, trademark, document use and software licensing rules apply. This specification defines the Document <b>Object</b> Model <b>Level</b> 2 HTML, a platform- and language-neutral interface that allows programs and scripts to dynamically access and update the content and structure of [HTML 4. 01] and [XHTML 1. 0] documents. The Document <b>Object</b> Model <b>Level</b> 2 HTML builds on the Document <b>Object</b> Model <b>Level</b> 2 Core [DOM Level 2 Core] and is not backward compatible with DO...|$|R
50|$|Structurally, DDM {{architecture}} {{consists of}} hierarchical <b>levels</b> of <b>objects,</b> each <b>level</b> manifesting emergent properties at increasingly higher levels.|$|R
50|$|Phantasmat is {{a mystery}} hidden object game about a sunken town and the secrets of it. It was {{released}} on May 22, 2010 for Windows and macOS. The game uses hand-drawn graphics and was released in eleven languages. It was developed and published by Codeminion. A Collector's Edition contains an additional Epilogue adventure, strategy guide, ability to replay match-3 and hidden <b>object</b> <b>levels,</b> concept art, wallpapers and the soundtrack.|$|R
5000|$|One level deeper is the <b>Object</b> <b>Level,</b> which scopes on single data objects. The {{optionality}} on {{this level}} is more dynamic.|$|E
50|$|Managed code: Memory {{protection}} on <b>object</b> <b>level,</b> {{rather than}} on process level; absence of pointer arithmetic in managed code avoids many problems that are present in unmanaged code.|$|E
50|$|Appserver.io {{includes}} a runtime environment, containing PHP extended with external libraries, PHP extensions and service daemons. It is an out-of-the-box runtime environment for PHP development. The {{use of a}} multithreading environment is considered to break the so-called shared nothing concept of PHP as it allows for inter-process communication on <b>object</b> <b>level.</b>|$|E
50|$|In {{many modern}} applications, {{the number of}} polygons in any scene can be phenomenal. However, a viewer in a scene will {{only be able to}} discern details of close-by <b>objects.</b> <b>Level</b> of detail {{algorithms}} vary the complexity of geometry as a function of distance to the viewer. Objects {{right in front of the}} viewer can be rendered at full complexity while objects further away can be simplified dynamically, or even replaced completely with sprites.|$|R
40|$|The article {{describes}} the methodology of an automated commercial electricity metering system (ACEMS), which is designed for reliable determination {{of the volume of}} its own energy consumption, as well as to control electricity overflows with related companies of the Wholesale Electricity Market. Company?s software ? hardware ACEMS form two levels: the bottom level, which includes a level of metering points and electricity metering <b>objects</b> <b>level.</b> The upper level consists of a central point level and level of automated ACEMS workstations|$|R
40|$|The {{mismatch}} between meta and <b>object</b> <b>levels</b> can be partially {{dealt with by}} understanding much of {{the context of an}} inference rule as ambient. However, this generalization is not sufficient for describing calculi like ordered logic or the logic of bunched implications. We briefly discuss two ways around this problem, one which is connected to polarized logic [NZ], the other of which is connected to hybrid logic [JR]. This note borrows extensively from the style and content of Alessio Guglielmi's 2003 manuscript [AG]...|$|R
50|$|The {{database}} server process maintains lock request queues at the <b>object</b> <b>level</b> to control concurrency {{of access to}} the same object. A request for update will establish a queue if there are any existing readers of an object. The request either goes through when all current readers release their locks or times-out (an exception which can be handled by client is thrown). Locks are generally released at transaction boundaries. When a queue is established by an update request, all other subsequent requests fall in queue behind the update request. Once the update request has been filled, all read requests in the queue rush in and get their read lock, return the object, and if there are no other updates, the queue disappears. In this architecture, locks are done at the <b>object</b> <b>level</b> so false waits and false deadlocks do not occur.|$|E
50|$|PDM (Programming {{development}} manager) {{was installed}} on most AS/400 and IBM System i systems {{as a part}} of the Applications Development ToolSet (ADT) and is still installed on most IBM i systems today. PDM is an environment that lets programmers and/or operators navigate three levels of the PDM: 1) the library level, 2) the <b>object</b> <b>level,</b> and 3) the member level.|$|E
50|$|One {{way that}} DAM can prevent SQL {{injection}} is by monitoring the application activity, generating a baseline of “normal behavior”, and identifying an attack {{based on a}} divergence from normal SQL structures and normal sequences. Alternative approaches monitor {{the memory of the}} database, where both the database execution plan and the context of the SQL statements are visible, and based on policy can provide granular protection at the <b>object</b> <b>level.</b>|$|E
40|$|This brief surveys {{existing}} techniques {{to address the}} problem of long delays and high power consumption for web browsing on smartphones, which can be due to the local computational limitation at the smartphone (e. g., running java scripts or flash <b>objects)</b> <b>level.</b> To address this issue, an architecture called Virtual-Machine based Proxy (VMP) is introduced, shifting the computing from smartphones to the VMP which may reside in the cloud. Mobile Web Browsing Using the Cloud illustrates the feasibility of deploying the proposed VMP system in 3 G networks through a prototype using Xen virtual machi...|$|R
40|$|Status of this {{document}} This document {{is the first}} release of the Document <b>Object</b> Model <b>Level</b> 2. It is guaranteed to change; anyone implementing it should realize {{that we will not}} allow ourselves to be restricted by experimental implementations of Level 2 when deciding whether to change the specifications. This is a W 3 C Working Draft for review by W 3 C members and other interested parties. It is a draft document and may be updated, replaced or obsoleted by other documents at any time. It is inappropriate to use W 3 C Working Drafts as reference material or to cite them as other than "work in progress". This is work in progress and does not imply endorsement by, or the consensus of, either W 3 C or members of the DOM working group. This document has been produced as part of the W 3 C DOM Activity. The authors of {{this document}} are the DOM WG members. Different chapters of the Document Object Model may have different editors. Comments on this document should be sent to the public mailing list www-dom@w 3. org. This specification defines the Document <b>Object</b> Model <b>Level</b> 2, a platform- and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure and style of documents. The Document <b>Object</b> Model <b>Level</b> 2 builds on the Document <b>Object</b> Model <b>Level</b> 1. Level...|$|R
5000|$|Editor of Document <b>Object</b> Model (DOM) <b>Level</b> 2 HTML Specification, a W3C Recommendation. http://www.w3.org/TR/DOM-Level-2-HTML/ ...|$|R
50|$|It {{was soon}} {{realised}} in the Freddy project that the 'move here, do this, move there' style of robot behavior programming (actuator or joint level programming) is tedious and {{also did not}} allow for the robot to cope with variations in part position, part shape and sensor noise. Consequently, the RAPT robot programming language was developed by Pat Ambler and Robin Popplestone, in which robot behavior was specified at the <b>object</b> <b>level.</b>|$|E
50|$|Experts {{believe that}} {{conventional}} object-oriented models are too low-level because the semantics {{of communication between}} two objects cannot be easily extended to other objects. Therefore, {{there was a need}} for a high level language mechanism {{that can be used to}} model layered system architectures in which each system in a layer exchanges data with its adjacent layers. Mechanisms such as inheritance only provide abstraction at the <b>object</b> <b>level,</b> but fail in abstraction of communication among objects.|$|E
5000|$|Common Distributed Application Process (CDAP). CDAP enables {{distributed}} applications {{to deal with}} communications at an <b>object</b> <b>level,</b> rather than forcing applications to explicitly deal with serialization and input/output operations. CDAP provides the application protocol component of a Distributed Application Facility (DAF) {{that can be used}} to construct arbitrary {{distributed applications}}, of which the DIF is an example. CDAP provides a straightforward and unifying approach to sharing data over a network without having to create specialized protocols.|$|E
50|$|The Nintendo DS {{version of}} the game {{consists}} of 2D side-scrolling. Max is essentially limited to running and jumping, roaring at enemies, and throwing <b>objects.</b> Some <b>levels</b> allow Max to traverse background and foreground layers of the stage.|$|R
40|$|This study {{presents}} a methodology for cartographic modeling of spatial diffusion of dengue fever epidemics, based on spatial analysis techniques and ArcMap and Idrisi 32 GIS. Data from 109 counties, organized in epidemiological weeks, {{related to a}} dengue fever epidemic that occurred in 2001 in northwestern Sao Paulo state, were used to map the spatial diffusion of cases. The methodology is based on five levels of approaches: four levels that join exact objects/continuous fields models with single/multiple times slices sequences, and a fifth level, {{which is based on}} network analysis of connections between counties. With the single time scale/exact <b>objects</b> <b>level,</b> county clusters, spatial contagion of counties and local incidence rates were mapped; and with the multiple time scale/exact <b>objects</b> <b>level,</b> spatial dynamics of the cases were mapped with a spatial&time sequencing model. Using the single time/continuous field level, isoplethic and tendency surface maps were produced. At the multiple times/continuous field level, spatial diffusion maps and spatial-time mobility of mean geographical center of dengue epidemics are arranged using a sequential maps model. At the last level of methodology, urban node connections are spatially analyzed using road network analysis techniques, to map potential for contagion between counties, spatial dispersion of epidemics between counties, and the path of spread of dengue fever over the region as a whole. The results show the spatial diffusion of dengue fever is most efficient in major highway corridors where the daily trips are more frequent, and where there has been no economic impedance to the circulation of merchandise and people...|$|R
25|$|On {{the other}} hand, it is {{possible}} to derive triviality from the 'conflict' between consistency and contradictions, once these notions have been properly distinguished. The very notions of consistency and inconsistency may be furthermore internalized at the <b>object</b> language <b>level.</b>|$|R
50|$|Core Data {{describes}} {{data with}} a high level data model expressed in terms of entities and their relationships plus fetch requests that retrieve entities meeting specific criteria. Code can retrieve and manipulate this data on a purely <b>object</b> <b>level</b> without having to worry about the details of storage and retrieval. The controller objects available in Interface Builder can retrieve and manipulate these entities directly. When combined with Cocoa bindings the UI can display many components of the data model without needing background code.|$|E
50|$|In forming TecSec and {{building}} the company's large IP library, he anticipated the flexibility and mobility required of 21st Century communication systems {{with a key}} management system that is primarily client-based and much less dependent upon a central server. The relative scalability achieved by this approach, together with encryption at the <b>object</b> <b>level,</b> provides enforced role based access and granularity not otherwise available. Ed remains {{deeply involved in the}} company's product development and expanding application solutions, just as he is in general management.|$|E
5000|$|Rippling [...] {{refers to}} a group of meta-level heuristics, {{developed}} primarily in the Mathematical Reasoning Group in the School of Informatics at the University of Edinburgh, and most commonly used to guide inductive proofs in automated theorem proving systems. Rippling may be viewed as a restricted form of rewrite system, where special <b>object</b> <b>level</b> annotations are used to ensure fertilization upon the completion of rewriting, with a measure decreasing requirement ensuring termination for any set of rewrite rules and expression.|$|E
50|$|Happy Wheels {{features}} a level editor which allows players to create custom levels of their own. It contains {{a plethora of}} tools and <b>objects</b> for <b>level</b> building. Users can upload their maps to a public server where they are accessible.|$|R
50|$|On {{the other}} hand, it is {{possible}} to derive triviality from the 'conflict' between consistency and contradictions, once these notions have been properly distinguished. The very notions of consistency and inconsistency may be furthermore internalized at the <b>object</b> language <b>level.</b>|$|R
50|$|Perhaps {{the easiest}} part of JAXP to understand, the DOM {{interface}} parses an entire XML document and constructs a complete in-memory {{representation of the}} document using the classes and modeling the concepts found in the Document <b>Object</b> Model(DOM) <b>Level</b> 2 Core Specification.|$|R
