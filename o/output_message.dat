43|205|Public
50|$|The Web Service Conversation Language (WSCL) {{proposal}} {{defines the}} overall input and <b>output</b> <b>message</b> sequences for one web service using a finite state automaton FSA over the alphabet of message types.|$|E
5000|$|The {{frequency}} of the local oscillator must {{be the same as}} the {{frequency of}} the carrier, or else the <b>output</b> <b>message</b> will fade in and out in the case of AM, or be frequency shifted in the case of SSB ...|$|E
50|$|A {{specialised}} form {{of pattern}} matching is extensively used to parse events and to pass key variables {{on to other}} components of HP-OM, such as the various fields of the <b>output</b> <b>message</b> and the automatic actions, and to generate keys for correlation (see below).|$|E
5000|$|... {{one or more}} Application VMs (AVMs), {{responsible}} for all application processing - receiving input <b>messages</b> and returning <b>output</b> <b>messages.</b>|$|R
30|$|The second update rule {{concerns}} the update equations for <b>Output</b> <b>Messages</b> {{going out of}} a Check Node. This corresponds to the cases of Figure  5 b,d.|$|R
3000|$|... (a) The first update rule {{concerns}} the update equations for <b>Output</b> <b>Messages</b> {{going out of}} a Variable Node. This corresponds to the cases of Figure  5 a,c.|$|R
5000|$|... =head1 NAME Hello::World - An {{encapsulation}} of {{a common}} <b>output</b> <b>message</b> =head1 SYNOPSIS [...] use Hello::World; my $hello = Hello::World->new (...) $hello->print; =head1 DESCRIPTION This is an object-oriented library which can print the famous [...] "H.W."message. =head2 Methods =head3 new [...] my $hello = Hello::World->new (...) my $hello = Hello::World->new( [...] target => $target [...] ); Instantiates an object which holds a greeting message. If a C<$target> isgiven it is passed to C<< $hello->target >>. =cut ...|$|E
5000|$|Moreover, the claimed symbol probabilities were , but {{the actual}} {{frequencies}} in this example are [...] If the intervals are readjusted for these frequencies, the entropy of the message would be 4.755 bits and the same NEUTRAL NEGATIVE ENDOFDATA message could be encoded as intervals [...] and a binary interval of [...] This is also {{an example of how}} statistical coding methods like arithmetic encoding can produce an <b>output</b> <b>message</b> that is larger than the input message, especially if the probability model is off.|$|E
50|$|Hewitt {{argued against}} adding the {{requirement}} that messages must arrive in {{the order in which}} they are sent to the Actor. If <b>output</b> <b>message</b> ordering is desired, then it can be modeled by a queue Actor that provides this functionality. Such a queue Actor would queue the messages that arrived so that they could be retrieved in FIFO order. So if an Actor X sent a message M1 to an Actor Y, and later X sent another message M2 to Y, there is no requirement that M1 arrives at Y before M2.|$|E
50|$|Trouble Notification - Send {{notification}} {{of a specific}} event or condition to a local display or Operations System (OS). Trouble notifications include <b>output</b> <b>messages</b> and visual and audible alarms.|$|R
5000|$|Suppose {{that the}} power {{constraint}} is satisfied for a codebook, and further suppose that the messages follow a uniform distribution. Let [...] be the input messages and [...] the <b>output</b> <b>messages.</b> Thus the information flows as: ...|$|R
5000|$|Let {{the random}} {{variables}} X and Y represent input and <b>output</b> <b>messages</b> with a joint probability [...] Let e represent an occurrence of error; i.e., that , with [...] being an approximate version of [...] Fano's inequality is ...|$|R
5000|$|The {{programmer}} could {{specify a}} buffer pool, a data structure {{used to hold}} messages transmitted to or from the terminals. BTAM could construct the pool automatically or the programmer could construct the pool in various ways. The BUILD macro would format the pool in static or dynamic storage previously acquired, or the [...] macro would acquire and format storage automatically. For read operations BTAM would automatically obtain one or more buffers from the pool and store the received message. For a write operation the programmer needed to code [...] to obtain the number of buffers necessary to build the <b>output</b> <b>message.</b> In either case the [...] was used to free the buffers on completion of the read or write.|$|E
50|$|IMS TM uses a {{messaging}} and queuing paradigm. An IMS {{control program}} receives a transaction entered from a terminal (or Web browser or other application) and then stores the transaction on a message queue (in memory or in a dataset). IMS then invokes its scheduler on the queued transaction {{to start the}} business application program in a message processing region. The message processing region retrieves the transaction from the IMS message queue and processes it, reading and updating IMS and/or DB2 databases, assuring proper recording of the transaction. Then, if required, IMS enqueues a response message back onto the IMS message queue. Once the <b>output</b> <b>message</b> is complete and available the IMS control program sends {{it back to the}} originating terminal. IMS TM can handle this whole process thousands (or even tens of thousands) of times per second. A recently completed IBM benchmark demonstrated the ability to process 100,000 transactions per second on a single IMS system.|$|E
3000|$|... are the {{standard}} deviation of positioning point {{in the direction of}} north and east, which can be available in the <b>output</b> <b>message</b> of the GPS receiver; σ [...]...|$|E
40|$|No {{matter how}} well {{designed}} and engineered, a mix server offers little protection if its administrator can be convinced to log and selectively disclose correspondences between its input and <b>output</b> <b>messages,</b> either for profit or to cooperate with an investigation. In this {{paper we propose a}} technique, fragile mixing, to discourage an administrator from revealing such correspondences, assuming he is motivated to protect the unlinkability of other communications that flow through the mix (e. g., his own). Briefly, fragile mixing implements the property that any disclosure of an input-message-tooutput-message correspondence discloses all such correspondences for that batch of <b>output</b> <b>messages.</b> We detail this technique {{in the context of a}} re-encryption mix, its integration with a mix network, and incentive and efficiency issues...|$|R
3000|$|..., as the {{pipeline}} {{of the internal}} elaborations would be corrupted and the <b>output</b> <b>messages</b> of the two layers would overlap in time. This is not but another kind of pipeline hazard, and again, it can be solved by delaying the update of the second layer with [...]...|$|R
30|$|Dec(sk,ct): an {{algorithm}} which <b>outputs</b> a <b>message</b> m∈M.|$|R
3000|$|... (3) For {{the lowest}} code node in Figure  4, the <b>output</b> <b>message</b> {{is always the}} same at the input message from the last {{evidence}} node, which remains constant throughout the iterations.|$|E
40|$|Time Warp {{parallel}} simulations need efficient {{schemes to}} cancel erroneous event messages {{in order to}} achieve acceptable performance levels. Lazy cancellation depends on delaying the cancellation of incorrect computations until rolled-back events are re-processed. An antimessage is then sent for cancellation only if an <b>output</b> <b>message</b> reproduced after rollback is found to be unequal to its counterpart produced before rollback. In this paper, we suggest an enhanced cancellation technique that aims to throttle incorrect computations by asking logical processes (LPs) that have received output messages generated from the execution of an input event that has later been cancelled to mark those messages as temporarily blocked until it is later decided whether or not they should also be cancelled. The receiving LP is blocked once a marked message is due for processing. After re-executing the input event, the rolled-back LP sends the receiving LP either an "unblock" message or an antimessage for each previously marked <b>output</b> <b>message</b> depending on the result of the equality test of that <b>output</b> <b>message</b> versions before and after rollback. Experimental results for a synthetic benchmark show that our technique can yield better performance than both lazy and aggressive cancellatio...|$|E
30|$|To permit old UNIX {{programs}} {{to work with}} the new framework, two adaptor programs are used. One converts an input (Clive) message stream into an output (UNIX) raw-byte message stream ready for consumption by UNIX commands. The other does the opposite and converts raw input data into an <b>output</b> <b>message</b> stream. This enables the construction of arbitrary pipelines mixing Clive and UNIX commands.|$|E
40|$|A Natural Language Processor module {{has been}} {{implemented}} at Telefónica I+D. This module is composed by a Semantic Parser, a Message Generator, and a Dialog Controller which coordinates all the process. The Dialog Controller is an inference engine that works through a semantic tree. This tree hierarchically organizes the information going from general concepts, towards more specific ones. The dialog strategy at each tree node can be chosen by selecting the node type from among five pre-defined node types. <b>Output</b> <b>Messages</b> are {{selected by the}} Message Generator. There are six different types of messages and two recovery strategies that the Message Generator can follow. Several <b>output</b> <b>messages</b> for each node in the tree can be defined {{in order to provide}} variability. Based on this scheme, a conversational system call ATO...|$|R
40|$|Criteria {{based on}} the {{analysis}} of the properties of vectorial Boolean functions for selection of substitutions (S-boxes) for symmetric cryptographic primitives are given. We propose an improved gradient descent method for increasing performance of nonlinear vectorial Boolean functions generation with optimal cryptographic properties. Substitutions are generated by proposed method for the most common 8 -bits input and <b>output</b> <b>messages</b> have nonlinearity 104, 8 -uniformity and algebraic immunity 3...|$|R
50|$|Using the O.P.I. {{interface}} gives {{a payment}} solution {{access to the}} PoS peripherals, e.g. to a PoS printer to print out receipts, a display to <b>output</b> <b>messages</b> to the cashier or cardholder, or a magnetic card reader.Decoupling the interface in this way increases its flexibility for integration in international, solution and industry-specific scenarios for users {{as well as for}} PoS and payment solution providers, and therefore also protects their investments.|$|R
40|$|The {{requirements}} {{definition for}} the prototype {{version of the}} automated orbit determination system (AODS) is presented including the AODS requirements at all levels, the functional model as determined through the structured analysis performed during requirements definition, {{and the results of}} the requirements analysis. Also specified are the implementation strategy for AODS and the AODS-required external support software system (ADEPT), input and <b>output</b> <b>message</b> formats, and procedures for modifying the requirements...|$|E
30|$|The message {{loss rate}} in this {{experiment}} should be caused by network traffic overhead, interferences, shading, and message collisions. As previous mention, all nine nodes are actually receiving message from the whole network, so {{they have the same}} conditions of the incoming network traffic. Moreover, we can assume that the message rate in Table 9 indicates the intranode performance of single node. If a node cannot handle such incoming network traffic and cause <b>output</b> <b>message</b> loss, the loss rate should be increased with the message rate.|$|E
40|$|This paper {{deals with}} the new {{progressive}} channel coding methods for short message transmission via satellite transponder using predetermined length of frame. The key benefits of this contribution are modification and implementation of a new turbo code and utilization of unique features with applications of methods for bit error rate estimation and algorithm for <b>output</b> <b>message</b> reconstruction. The mentioned methods allow an error free communication with very low Eb/N 0 ratio {{and they have been}} adopted for satellite communication, however they can be applied for other systems working with very low Eb/N 0 ratio...|$|E
40|$|International Telemetering Conference Proceedings / October 17 - 20, 1994 / Town & Country Hotel and Conference Center, San Diego, CaliforniaThis paper {{describes}} the application software {{used in the}} Message Processing System at the Air Force Development Test Center (AFDTC), Eglin AFB. The {{focus is on the}} Alpha AXP application software designed and developed to log, process, and reformat IRIG Chapter 8 1553 data. The main data reduction and editing capabilities of the processing phase are explained: <b>message</b> <b>output</b> selection, <b>message</b> <b>output</b> sampling, <b>message</b> translation, error identification, and IRIG Chapter 8 time editing. The design of and methods used to produce the output files, the BBNProbe STD file, and the 1553 message summary report are described. This software’s flexibility and comprehensiveness in processing, reducing, and re-formatting 1553 message data will enable AFDTC to satisfy current and future post-mission processing requirements...|$|R
30|$|The {{proposed}} scenarios {{analyze the}} behavior of the highest access category (voice), when this category is used to transmit RT data (small-sized packets in periodic intervals) from RT stations. The communication environment is shared with external traffic sources that are out of the sphere-of-control of the RT architecture. These RT periodic data exchanges are intended to model both sensor messages sent to plant controllers, and <b>output</b> <b>messages</b> sent from plant controllers to the actuators.|$|R
50|$|Diagnostic design {{specification}} is a document indicating how the diagnostics {{will be implemented}} on an upcoming/new products that will be developed by the company. It describes {{the behavior of the}} diagnostics like how the test will execute, how the <b>output</b> <b>messages</b> are formatted, and how the final result is displayed (amongst other). This document is usually defined by the manufacturing team (more specifically, the manufacturing test engineers) and will be submitted to the software-diagnostic group for approvals.|$|R
40|$|Part 1 : Software Architectures and DevelopmentInternational audienceThis paper {{presents}} a novel method of using action-based planning {{for construction of}} enterprise integration solutions that utilize messaging technologies. More specifically, the presented method is able to generate a sequence of processing steps needed to transform input message flow(s) to specified <b>output</b> <b>message</b> flow(s), taking into account requirements in areas of throughput, availability, service monitoring, message ordering, and message content and format conversions. The method has been implemented as a research prototype. It has been evaluated using scenarios taken from the literature {{as well as from}} real-world experience of the authors...|$|E
40|$|Large {{amounts of}} {{information}} are embedded in natural scenes. Signs are good examples of natural objects with high information content. In this paper, we discuss problems in automatic detection and translation of text from natural scenes. We describe the challenges of automatic text detection and propose methods to address these challenges. We extend example based machine translation technology for sign translation and present a prototype system for Chinese sign translation. This system is capable of capturing images, automatically detecting and recognizing text, and translating the text into English. The translation can be displayed on a palm size PDA, or synthesized as a voice <b>output</b> <b>message</b> over the earphones. 1...|$|E
40|$|In this paper, we {{consider}} the problem of composing a set of web services, where the requirements are spec-ified {{in terms of the}} input and output messages of the composite workflow. We propose a semantic model of messages using RDF graphs that encode OWL ABox assertions. We also propose a model of web service operations where the input message requirements and <b>output</b> <b>message</b> characteristics are modeled using RDF graph patterns. We formulate the message-oriented se-mantic web service composition problem and show how it can be translated into a planning problem. There are, however, significant challenges in scalably doing plan-ning in this domain, especially since DL reasoning may be performed to check if an operation can be given a cer...|$|E
40|$|AbstractIn {{this paper}} {{the study of}} a {{noiseless}} transducer with finite memory, begun by Conner [Ann. Math. Statist. 41, No. 6 (1970) ], is set forth. The uniqueness and the weak Bernoulli property of the maximal-output dynamical system are proved. A convergence theorem about equivocation, which is analogous to McMillan's theorem about entropy, is obtained. An application of this theorem yields a lower estimation of the Billingsley dimension of the ambiguity set of almost all <b>output</b> <b>messages...</b>|$|R
40|$|An {{investigation}} {{has been made}} into improving <b>messages</b> <b>output</b> by a computer system by using a program called FIDO (From Input Derive Output), which can be taught to give appropriate <b>output</b> <b>messages</b> in varying situations. A number of possible applications for such a program are discussed {{and the idea is}} particularly applied to syntax error messages for LR(1) parsers. Many of the ideas used in pattern recognition are applicable to FIDO. Important features of the system developed are - It {{can be used in a}} number of applications. - It is simple. - It makes reasonable demands on computer resources. - It is easy to use. Examples of FIDO in use are given...|$|R
40|$|Objects can {{be viewed}} as {{entities}} reacting concurrently with their environment through the sending and receiving of messages. In this paper a model for such reactive objects is constructed where messages may be blocked either by the object or by the environment. This model differentiates between <b>output</b> <b>messages</b> controlled by the object, and input messages controlled by the environment. The model is applied to define an object compatibility lattice structure enabling the construction of objects satisfying best possible compatibility requirements...|$|R
