3|266|Public
40|$|In {{this paper}} we present three {{algorithms}} that provide performance guarantees for scheduling switches, such as optical switches, with configuration overhead. Each algorithm emulates an unconstrained (zero <b>overhead)</b> <b>switch</b> by accumulating {{a batch of}} configuration requests and generating a corresponding schedule for a constrained switch. Speedup is required both to cover the configuration overhead of the switch and to compensate for empty slots left by the scheduling algorithm. Scheduling algorithms are characterized {{by the number of}} configurations, Ns, they require to cover a batch of requests, and the speedup required to compensate for empty slots, S min. We show that a well known exact matching algorithm, EXACT, leaves no empty slots (i. e. S min = 1), but requires Ns configurations for an N - port switch leading to high overhead or large batches and hence high delay. We present two new algorithms that reduce the number of configurations required substantially. MIN covers a batch of requests in the minimum possible number of configurations, Ns = N, but at the expense of many empty slots, S min 4 log 2 N. DOUBLE strikes a balance, requiring twice as many configurations, Ns = 2 N, while reducing the number of empty slots so that S min = 2. We show that DOUBLE offers the lowest required speedup to emulate an unconstrained switch across a wide range of port count and delay...|$|E
40|$|Abstract—In this paper, {{we present}} three {{algorithms}} that provide performance guarantees for scheduling switches, such as optical switches, with configuration overhead. Each algorithm emulates an unconstrained (zero <b>overhead)</b> <b>switch</b> by accumulating {{a batch of}} configuration requests and generating a corresponding schedule for a constrained switch. Speedup is required both to cover the configuration overhead of the switch and to compensate for empty slots left by the scheduling algorithm. Scheduling algorithms are characterized {{by the number of}} configurations they require to cover a batch of requests and the speedup required to compensate for empty slots ���. Initially, all switch reconfiguration is assumed to occur simultaneously. We show that a well-known exact matching algorithm, EXACT, leaves no empty slots (i. e., �� � aI), but requires P configurations for an-port switch leading to high configuration overhead or large batches and, hence, high delay. We present two new algorithms that reduce the number of configurations required substantially. MIN covers a batch of requests in the minimum possible number of configurations, a, but at the expense of many empty slots, �� � R���P. DOUBLE strikes a balance, requiring twice as many configurations, a P, while reducing the number of empty slots so that �� � aP. Loosening the restriction on reconfiguration times, the scheduling problem is cast as an open shop. The best known practical scheduling algorithm for open shops, list scheduling (LIST), gives the same emulation requirements as DOUBLE. Therefore, we conclude that our architecture gains no advantages from allowing arbitrary switch reconfiguration. Finally, we show that DOUBLE and LIST offer the lowest required speedup to emulate an unconstrained switch across a wide range of port count and delay. Index Terms—Optical switches, packet switching. NOMENCLATUR...|$|E
40|$|The {{critical}} {{mission tasks}} assessments effort seeks {{to determine the}} physical performance requirements that astronauts must meet in order to safely and successfully accomplish lunar exploration missions. These assessments will determine astronaut preflight strength, fitness, and flexibility requirements, {{and the extent to}} which exercise and other countermeasures must prevent the physical deconditioning associated with prolonged weightlessness. The purpose is to determine the flexibility and strength that crewmembers must possess in order to reach Crew Exploration Vehicle controls during maneuvers that result in sustained acceleration levels ranging from 3. 7 G to 7. 8 G. An industry standard multibody dynamics application was used to create human models representing a 5 th percentile female, a 50 th percentile male, and a 95 th percentile male. The additional mass of a space suit sleeve was added to the reaching arm to account for the influence of the suit mass on the reaching effort. The human model was merged with computer models of a pilot seat and control panel for the Crew Exploration Vehicle. Three dimensional paths were created that guided the human models hand from a starting position alongside its thigh to three control targets: a joystick, a keyboard, and an <b>overhead</b> <b>switch</b> panel. The reaching motion to each target was repeated under four vehicle acceleration conditions: nominal ascent (3. 7 G), two ascent aborts (5. 5 G and 7. 8 G) and lunar reentry (4. 6 G). Elbow and shoulder joint angular excursions were analyzed to assess range of motion requirements. Mean and peak elbow and shoulder joint torques were determined and converted to equivalent resistive exercise loads to assess strength requirements. Angular excursions for the 50 th and 95 th percentile male models remained within joint range of motion limits. For the 5 th percentile female, both the elbow and the shoulder exceeded range of motion limits during the overhead reach. Elbow joint torques ranged from 10 N-m (nominal ascent) to 60 N-m (ascent abort). Shoulder joint torques ranged from 65 N-m (nominal ascent) to 280 N-m (ascent abort). Maximal equivalent exercise loads reached 30 lb in tricep extension, 9 lb in bicep curl, 110 lb in unilateral pullover and unilateral bench press for nominal conditions (lunar reentry), and 188 lb in unilateral pullover and unilateral bench press. The location of the pilot seat was found to be inadequately located to allow a 5 th percentile female to reach the switches on the overhead panel. Elbow strength requirements were found to be well within population norms. Shoulder strength was found to be a limiting factor. Reaching under nominal ascent and lunar reentry conditions was found to require near maximal shoulder strength. Reaching under ascent abort conditions requires shoulder strength well beyond population norms. Pilot seats must adjust to accomodate a 5 th percentile female. Exercise countermeasures must maintain maximal pullover and bench press strength to allow pilots to reach and operate controls during lunar reentry. Reaching will not be possible during ascent abort conditions. Flight controls should be built into armrests or flight control must be accomplished by autonomous systems during acceleration exceeding 4. 6 G...|$|E
5000|$|Scheduling <b>overheads</b> (<b>switching</b> {{from one}} task to another) are zero.|$|R
5000|$|Cockpit: Adjustable {{pedal box}} for faster driver change, <b>overhead</b> <b>switches,</b> easy read {{steering}} wheel dash, over spacious design, driver adjustable front anti roll bar, adjustable brake bias and forced air driver cooling ...|$|R
5000|$|... no <b>overhead</b> for <b>switching</b> between 16- and 32-bit {{instruction}} encodings ...|$|R
50|$|Shared {{memory and}} message passing {{concurrency}} have different performance characteristics. Typically (although not always), the per-process memory <b>overhead</b> and task <b>switching</b> <b>overhead</b> is lower in a message passing system, but the overhead of message passing {{is greater than}} for a procedure call. These differences are often overwhelmed by other performance factors.|$|R
40|$|We {{study the}} {{scheduling}} polices for asymptotically optimal delay in queueing systems with <b>switching</b> <b>overhead.</b> Such systems {{consist of a}} single server that serves multiple queues, and some capacity is lost whenever the server switches to serve {{a different set of}} queues. The capacity loss due to this <b>switching</b> <b>overhead</b> can be significant in many emerging applications, and needs to be explicitly addressed in the design of scheduling policies. For example, in 60 GHz wireless networks with directional antennas, base stations need to train and reconfigure their beam patterns whenever they switch from one client to another. Considerable <b>switching</b> <b>overhead</b> can also be observed in many other queueing systems such as transportation networks and manufacturing systems. While the celebrated Max-Weight policy achieves asymptotically optimal average delay for systems without <b>switching</b> <b>overhead,</b> it fails to preserve throughput-optimality, let alone delay-optimality, when <b>switching</b> <b>overhead</b> is taken into account. We propose a class of Biased Max-Weight scheduling policies that explicitly takes <b>switching</b> <b>overhead</b> into account. The Biased Max-Weight policy can use either queue length or head-of-line waiting time as an indicator of the system status. We prove that our policies not only are throughput-optimal, but also can be made arbitrarily close to the asymptotic lower bound on average delay. To validate the performance of the proposed policies, we provide extensive simulation with various system topologies and different traffic patterns. We show that the proposed policies indeed achieve much better delay performance than that of the state-of-the-art policy. Comment: 37 page...|$|R
5000|$|Cache is {{physically}} addressed, solving many cache aliasing problems and reducing context <b>switch</b> <b>overhead.</b>|$|R
40|$|Abstract — The optical burst {{switching}} (OBS) {{schemes to}} date {{assume that the}} <b>switching</b> <b>overhead</b> at intermediate nodes is either negligible or {{can be considered as}} part of the processing delay of the control packet. In this paper, we will show that the <b>switching</b> <b>overhead</b> can {{have a significant impact on}} the performance of OBS. We have also proposed methods to alleviate the problem. I...|$|R
40|$|Abstract — This paper {{presents}} an methodology {{to improve the}} context <b>switch</b> <b>overhead</b> in cloud computing. As migration {{of jobs in the}} cloud makes context <b>switching</b> <b>overhead</b> a challenging task which increases the communication costs of cloud and results in the low utilisation. To succeed this objective, dynamic context switching parallel algorithm is purposed in this paper. In order to enhance the utilisation and computing speeds of cloud an improved strategy is used which uses dynamic context switching parallel algorithm. Purposed methodology makes changes in the decision making process of the context switch parallel algorithm dynamically considerably reducing the context <b>switch</b> <b>overheads.</b> For execution of purposed approach, a cloud simulation environment is established which significantly reduces the waiting time of jobs during execution...|$|R
30|$|In this section, {{the impact}} of {{processor}} frequency on the context <b>switch</b> <b>overhead</b> for static and dynamic frequency cases is discussed.|$|R
30|$|Switching {{interval}} is {{an important}} parameter to consider as it directly impacts the delay jitter and the achievable TCP throughput. Once the transmitting interface R 2 switches to a given channel with non-empty queue, it stays on that channel for a predefined switching interval (awaiting for more packets to arrive to the queue) {{in order to minimize}} <b>switching</b> <b>overhead.</b> A small <b>switching</b> interval leads to smaller jitter and is sensitive to channel mobility of neighbor nodes, but less time on a given channel.|$|R
40|$|Gasdynamic {{hyperbolic}} {{systems are}} treated by a novel conservative flux difference splitting upwind method which is applicable to explicit or implicit and iterative or direct schemes, for marching in time or space with the Euler or compressible Navier-Stokes equations. The method {{is able to}} capture sharp shocks correctly by maintaining global conservation. The embedded characteristics formulation is cast in the volumetric internal energy primitive variable, which is effective for real as well as perfect gases. Higher order upwind formulae are constructed from the distribution of pieces of the simple internal flux difference splitting, and the method reverts to first order at the appropriate points {{in order not to}} violate the domain of dependence by differencing across discontinuities. At insignificant computational <b>overhead,</b> <b>switching</b> is done by simple algebraic extensions of the truth functions that determine upwind direction for the first order scheme...|$|R
40|$|Abstract [...] This paper {{describes}} {{methodology for}} the electromagnetic transients computation, {{which is based}} on the system decomposition. A phase domain transmission line model is used. This approach is implemented in the software used for the <b>overhead</b> line <b>switching</b> surge studies. <b>Overhead</b> line is divided into short segments, enabling determination of the overvoltage distribution along the line...|$|R
3000|$|... c Minimizing the {{expected}} times of channel switches {{can also be}} treated equally as maximizing the throughput with the consideration of the system <b>overhead</b> of channel <b>switches.</b>|$|R
40|$|International audienceNowadays, {{reducing}} the energy consumption of large scale and distributed infrastructures has truly become {{a challenge for}} both industry and academia. Dynamic job allocation and resources provisioning is important to fit users requirements. The aim is to minimize the number of hosts utilized {{in order to reduce}} the energy consumption while maintaining a correct level of quality of service for the users. Green leverages like migration and on/off actions have cost <b>overheads.</b> <b>Switching</b> on and off a host has a cost: it takes time and it consumes power. These actions have to be optimized and should anticipate load variations. In this paper we investigate host management linked with the allocation and reallocation algorithm in order to optimize the number of powered on hosts and to reduce the overheads. We propose an original host management algorithm based on a genetic algorithm. Our approach has been implemented in DCWoRMS simulator and compared with other heuristics...|$|R
25|$|The 4th Street Bridge in Los Angeles, a fully {{reversible}} street {{controlled by}} <b>overhead</b> signals. It <b>switches</b> direction every rush hour and on weekends. In case of emergencies, the bridge can be one-way {{to or from}} Los Angeles.|$|R
3000|$|Because of the <b>switching</b> <b>overhead,</b> the new demand {{should last}} {{a certain time}} before the benefit of new UL/DL {{configuration}} compensates the switching cost. Given the data transmission time distribution P(t), we can estimate the probability P(T [...]...|$|R
50|$|The 4th Street Bridge in Los Angeles, a fully {{reversible}} street {{controlled by}} <b>overhead</b> signals. It <b>switches</b> direction every rush hour and on weekends. In case of emergencies, the bridge can be one-way {{to or from}} Los Angeles.|$|R
40|$|Heterogeneous {{multicore}} systems—comprised {{of multiple}} cores with varying capabilities, performance, and energy characteristics— {{have emerged as}} a promising approach to increasing energy efficiency. Such systems reduce energy consumption by identifying phase changes in an application and migrating execution to the most efficient core that meets its current performance requirements. However, due to the <b>overhead</b> of <b>switching</b> between cores, migration opportunities are limited to coarse-grained phases (hundreds of millions of instructions), reducing the potential to exploit energy efficient cores. We propose Composite Cores, an architecture that reduces <b>switching</b> <b>overheads</b> by bringing the notion of heterogeneity within a single core. The proposed architecture pairs big and little compute µEngines that together can achieve high performance and energy efficiency. By sharing much of the architectural state between the µEngines, the <b>switching</b> <b>overhead</b> {{can be reduced to}} near zero, enabling fine-grained switching and increasing the opportunities to utilize the little µEngine without sacrificing performance. An intelligent controller switches between the µEngines to maximize energy efficiency while constraining performance loss to a configurable bound. We evaluate Composite Cores using cycle accurate microarchitectural simulations and a detailed power model. Results show that, on average, the controller is able to map 25 % of the execution to the little µEngine, achieving an 18 % energy savings while limiting performance loss to 5 %. 1...|$|R
30|$|Irrespective of {{the type}} of the network structure, the system is {{composed}} of <b>switches,</b> <b>overhead</b> lines {{and a variety of other}} devices. Thus, the network composition can be simplified and the directional topology of the distribution network can be obtained.|$|R
40|$|Abstract—The {{capacity}} and flexibility of wireless mesh networks (WMNs) can be greatly improved by adopting dynamic channel assignment. However, dynamic channel assignment brings new challenges such as <b>switching</b> <b>overheads</b> and dependency problems. We propose a channel assignment protocol, called the hybrid channel assignment protocol (HCAP) for infrastructure WMNs (I-WMN). To {{find out a}} reasonable tradeoff between flexibility and <b>switching</b> <b>overheads,</b> HCAP adopts static interface assignment strategy for nodes that have the heaviest loads. For other nodes, it adopts a hybrid strategy. HCAP uses a slot-based coordination policy to implement communications between nodes that adopt hybrid strategy. NS 2 -based simulations show that HCAP not only improves {{capacity and}} scalability of I-WMNs, but also enhances per-flow fairness. I...|$|R
40|$|Abstract. High-performance and {{low-power}} VLIW DSP processors {{are increasingly}} being deployed in mobile devices to process video and multimedia applications. The diverse applications of such systems has led to recent research efforts focusing on their resource management and kernel scheduling. In this paper, we address the enhancing {{the performance of the}} microkernel for a VLIW DSP processor, called PAC architectures. In order {{to reduce the number of}} read and write ports in register files of VLIW architectures, so as to reduce both the power consumption and implementation costs, a distributed register file and multibank register architectures are being adopted in PAC architectures. These methods present challenges for microkernel designs in terms of reducing context <b>switch</b> <b>overhead.</b> In our work, we propose a multiset descriptor mechanism with compiler support to reduce the context <b>switch</b> <b>overheads</b> associated with the use of registers. The experiments were done with the microkernel system called pCore which has an efficient and tiny design that prunes its code size down under 11 Kbytes. Experimental results show that our multiset context-switching mechanism may reduce the context <b>switch</b> <b>overhead</b> up to 30 %. ...|$|R
40|$|In this paper, {{we present}} a {{constraint}} programming-based approach for optimization of routing and reconfiguration overhead for a class of reconfigurable processor array architectures called weakly programmable. For a given set of different algorithms the execution of {{which is supposed to}} be switched upon request at run-time, we provide static solutions for optimal routing of data between processor elements as well as for minimization of the routing area and the reconfiguration <b>overhead</b> when <b>switching</b> between the execution of these algorithms. Our experiments confirm that our method can minimize routing overhead and reduce reconfiguration time significantly...|$|R
40|$|In this paper, we {{evaluate}} {{two techniques}} for executing shared memory {{programs on the}} EM-X distributed memory multiprocessor: access with no local copy(NL) and access with coherent local copy(CL). For the NL approach, multithreading efficiently hides the latency caused by fine-grain communication, whereas the thread <b>switching</b> <b>overhead</b> still remains. To eliminate the thread <b>switching</b> <b>overhead</b> and exploit locality, we have also implemented the CL mechanism derived from the notion of conventional software distributed shared memory. Performance analyses show that a highly optimized implementation for a frequent shared access program greatly improves the performance, in spite of additional software overhead. Tradeoffs of NL versus CL, thus obtained, {{provide a basis for}} the selection of a technique that is more appropriate for applications on the EM-X. Keywords: Parallel memory systems, Performance evaluation and measurements, Fine-grain communication, Distributed shared memory...|$|R
40|$|In {{this paper}} we develop {{techniques}} for analyzing and optimizing energy management in multi-core servers with speed scaling capabilities. Our framework incorporates the processor's dynamic power, {{and it also}} accounts for other intricate and important power features such as the static (leakage) power and <b>switching</b> <b>overhead</b> between speed levels. Using stochastic fluid models to capture traffic burst dynamics, we propose and study different strategies for adapting the multi-core server speeds based on the observable buffer content, so as to optimize objective functions that balance energy consumption and performance. It is shown that, for a reasonable <b>switching</b> <b>overhead</b> and {{a small number of}} thresholds, a substantial efficiency gain is achieved. In addition, the optimal power consumptions of the different strategies are hardly sensitive to perturbations in the input parameters, so that the performance is robust to misspecifications of the system's input traffic...|$|R
40|$|International audienceIn this paper, {{we present}} a {{constraint}} programming-based approach for optimization of routing and reconfiguration overhead for a class of reconfigurable processor array architectures called weakly programmable. For a given set of different algorithms the execution of {{which is supposed to}} be switched upon request at run-time, we provide static solutions for optimal routing of data between processor elements as well as for minimization of the routing area and the reconfiguration <b>overhead</b> when <b>switching</b> between the execution of these algorithms. Our experiments confirm that our method can minimize routing overhead and reduce reconfiguration time significantly...|$|R
40|$|Abstract: The paper {{deals with}} the problem of {{designing}} main FPGA-cell blocks with the current-mode gates – novel digital gates operating with constant, continuous power supply current. Using proposed approaches to designing digital current-mode circuits, the currentmode prototypes of several digital circuits and the main basic block of FPGA cell – the function generator – are designed. The obtained circuits are characterized by smaller hardware <b>overheads</b> and <b>switching</b> noise level in comparison with the similar circuits based on the classical voltage type of gates. It proves the possibility of realization of field programmable mixed analog-digital array on a single die...|$|R
40|$|A gearbox-type {{capacitive}} DC/DC converter {{is presented}} with an enhanced switch- and capacitor-array. The <b>switch</b> <b>overhead</b> is reduced significantly {{with respect to}} a conventional implementation. The presented topologies exhibit a lower swing on the intermediate capacitor nodes so that power loss due to the parasitic capacitances on these nodes is reduced drastically. status: publishe...|$|R
50|$|Multitasking on BareMetal {{is unusual}} for {{operating}} systems {{in this day}} and age. BareMetal uses an internal work queue that all CPU cores poll. A task added to the work queue will be processed by any available CPU core in the system and will execute until completion, which results in no context <b>switch</b> <b>overhead.</b>|$|R
40|$|International audienceIn this paper, we {{introduce}} a constraint programming-based approach for optimization of routing and reconfiguration overhead {{for a class}} of reconfigurable processor array architectures called weakly programmable. For a given set of different algorithms the execution of {{which is supposed to}} be switched upon request at run-time, we provide static solutions for optimal routing of data between processors as well as for minimization of the routing area and the reconfiguration <b>overhead</b> when <b>switching</b> between the execution of these algorithms. In fact, applying the switching can be accomplished in just a few clock cycles. Our experiments confirm that our method can minimize routing overhead and reduce reconfiguration time significantly...|$|R
40|$|ABSTRACT: We {{describe}} an {{implementation of a}} fine-grain adaptive scheduling mechanism, based on software feedback. Conventional scheduling makes job assignment exclusively a function of time. We broaden {{the meaning of the}} term "scheduling " to include job assignment as a function of a sequence of events, such as timer interrupts, I/O operations, queue overflodunderflow, and system call traps. Our implementation of software feedback in the Synthesis operating system is analogous to the hardware phase locked loop. Very low <b>overhead</b> context <b>switches</b> and scheduling cost (a few microseconds on a 68020 -based machine) makes this implementation useful to practical applications such as digital signal processing. Since schedulin...|$|R
40|$|High-performance cache {{architectures}} always {{pull up the}} bitlines in all cache subarrays to {{hide the}} bitline charging latency prior to a cache access. Unfortunately, such architectures lead to significant bitline discharge in unaccessed subarrays in nanoscale CMOS caches and waste power. Recent proposals advocate bitline isolation to reduce bitline discharge in unaccessed subarrays by turning off precharge devices located between the supply voltage and bitlines in these subarrays. Many of these proposals tacitly assume that on-demand precharging of isolated bitlines can be overlapped with address decoding and hidden from the cache access latency. Moreover, they assume that the energy <b>overhead</b> of <b>switching</b> precharge devices is insignificant...|$|R
40|$|In this paper, we {{introduce}} a constraint programming-based approach for optimization of routing and reconfiguration overhead {{for a class}} of reconfigurable processor array architectures called weakly programmable. For a given set of different algorithms the execution of {{which is supposed to}} be switched upon request at run-time, we provide static solutions for optimal routing of data between processors as well as for minimization of the routing area and the reconfiguration <b>overhead</b> when <b>switching</b> between the execution of these algorithms. In fact, applying the switching can be accomplished in just a few clock cycles. Our experiments confirm that our method can minimize routing overhead and reduce reconfiguration time significantly...|$|R
30|$|As a result, {{there are}} {{relatively}} few MAC protocols that consider the uncommon channel availability. However, {{they have some}} operational shortcomings including the extra requirement of control signal exchanges and the <b>overhead</b> of channel <b>switching.</b> Also, nodes are affected by long transmission delay and waiting time. Furthermore, it is not preferable to use CCC for preventing CCC saturation and denial of service attacks.|$|R
