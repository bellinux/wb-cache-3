501|1205|Public
2500|$|Up to four serial ports {{that can}} be mapped to a pipe or to an <b>output</b> <b>file,</b> ...|$|E
2500|$|Up {{to three}} {{bi-directional}} parallel ports, {{each of which}} can be mapped to a real port, to a real printer, or to an <b>output</b> <b>file,</b> ...|$|E
2500|$|This {{might be}} in a file myfile.tex, as [...]tex is a common file {{extension}} for plain TeX files. By default, everything that follows a percent sign on a line is a comment, ignored by TeX. Running TeX on this file (for example, by typing texmyfile.tex in a command-line interpreter, or by calling it from a graphical user interface) will create an <b>output</b> <b>file</b> called myfile.dvi, representing the content of the page in a device independent format (DVI). A DVI file could then either be viewed on screen or converted to a suitable format for any of the various printers for which a device driver existed (printer support was generally not an operating system feature at the time that TeX was created). Knuth has said that there is nothing inherent in TeX that requires DVI as the output format, and later versions of TeX, notably pdfTeX, XeTeX and LuaTeX, all support output directly to PDF.|$|E
30|$|Starfish writes {{capillary}} pressure, water {{relative permeability}}, and oil relative permeability as functions of water saturation in its <b>output</b> <b>files.</b> The <b>outputs</b> of the drainage process and imbibitions process {{are written in}} prefix_drainage.dat file and prefix_imbibition.dat file, respectively. In both <b>output</b> <b>files,</b> the absolute permeability and the wettability type of the network is printed at the top. The path and the prefix of the <b>output</b> <b>files</b> {{are the same as}} the input files. During the execution of Starfish, a copy of all output data is printed on the screen.|$|R
5000|$|File {{extension}} [...]S37 is {{used for}} Motorola S-record <b>Output</b> <b>Files</b> ...|$|R
30|$|In {{the third}} step, users invoke scripts to build {{libraries}} and executable, and prestage the standard input data {{required by the}} simulation. The final step runs the case and creates <b>output</b> <b>files</b> and log files. At {{the end of the}} run, <b>output</b> <b>files</b> and log files are archived in a short-term directory.|$|R
5000|$|The [...] {{conversion}} option means do not truncate the <b>output</b> <b>file</b> — that is, if the <b>output</b> <b>file</b> already exists, just {{replace the}} specified bytes {{and leave the}} rest of the <b>output</b> <b>file</b> alone. Without this option, [...] would create an <b>output</b> <b>file</b> 512 bytes long.|$|E
5000|$|Suppose {{that there}} is a {{compression}} algorithm that transforms every file into an <b>output</b> <b>file</b> that is no longer than the original file, and that at least one file will be compressed into an <b>output</b> <b>file</b> that is shorter than the original file.|$|E
5000|$|... ddrescue {{does not}} write zeros to the output when it finds bad sectors in the input, {{and does not}} {{truncate}} the <b>output</b> <b>file</b> if not asked to. As such, every time one runs ddrescue on the same <b>output</b> <b>file,</b> it tries {{to fill in the}} gaps without wiping out the data already rescued.|$|E
5000|$|... 0 The {{standard}} input was successfully copied to all <b>output</b> <b>files.</b>|$|R
40|$|The folder contains: -Pseudopotential {{files for}} Ge and H in the. recpot format used in all calculations. -Input and <b>output</b> <b>files</b> for {{constant}} enthalpy geometry relaxations of hydrogenated Ge nanocrystals using the electronic enthalpy method within ONETEP (version 3. 3). -Input and <b>output</b> <b>files</b> for the DFPT calculations performed with CASTEP (version 6. 01) ...|$|R
50|$|An {{output module}} wrote the {{temporary}} <b>output</b> <b>files</b> to physical printers and punches.|$|R
50|$|It is {{easiest to}} look at the {{polyphase}} merge starting from its ending conditions and working backwards. At the start of each iteration, there will be two input files and one <b>output</b> <b>file.</b> At the end of the iteration, one input file will have been completely consumed and will become the <b>output</b> <b>file</b> for the next iteration. The current <b>output</b> <b>file</b> will become an input file for the next iteration. The remaining files (just one in the 3 file case) have only been partially consumed and their remaining runs will be input for the next iteration.|$|E
50|$|Now {{suppose a}} client calls {{the service and}} names its <b>output</b> <b>file</b> BILL. The service opens the <b>output</b> <b>file.</b> Even though the client did {{not have access to}} that file, the service does, so the open succeeds, and the server writes the {{compilation}} output to the file, overwriting it, and thus destroying the billing information.|$|E
5000|$|... $dumpfile — Declare the VCD (Value Change Dump) format <b>output</b> <b>file</b> name.|$|E
5000|$|... '''''' Append the {{pipeline}} content to the <b>output</b> <b>file(s)</b> rather than overwriting them.|$|R
30|$|The mapper {{must then}} {{download}} the required {{data from the}} data server (2) before starting the computation (3). After the task execution is completed, the mapper creates an MD 5 hash {{for each of the}} map <b>output</b> <b>files.</b> Therefore, {{at the end of the}} computation, each mapper is left with both the map <b>output</b> <b>files</b> and the same number of corresponding hashes. These hash sums are sent back to the server in place of the <b>output</b> <b>files</b> (4) (so it is compatible with current VC solutions, e.g. BOINC). This greatly reduces the upload volume from mappers to the VMR server (as discussed in Section 3).|$|R
30|$|Analyze the PSD-BPA <b>output</b> <b>files</b> of {{base state}} and fault state, and further compute PFT results.|$|R
5000|$|... This is the <b>output</b> <b>file</b> {{which gives}} a {{detailed}} account of the energetic results. The verbosity of the information in the <b>output</b> <b>file</b> is controlled in the input file. The output places emphasis on reporting on nonbonded interactions such as van der Waals force and electrostatics interactions in detail on the solvent, the solution, and the interactions among them.|$|E
5000|$|... eDrop - Extracts e-mail {{addresses}} from text files {{into a single}} <b>output</b> <b>file.</b>|$|E
50|$|In {{the above}} script, only text within {{brackets}} would be saved in the <b>output</b> <b>file.</b>|$|E
5000|$|... {{short-term}} outputs {{would lead}} to immense <b>output</b> <b>files,</b> which {{would be difficult to}} manage and interpret; ...|$|R
50|$|RunManager manages {{simulations}} and workflows {{and gives}} users {{access to the}} <b>output</b> <b>files</b> through a graphical interface.|$|R
5000|$|Added PDF {{printing}} pre-sets and optimized the PDF export for shorter export {{times and}} smaller <b>output</b> <b>files.</b>|$|R
5000|$|MrefBuilder uses Common Compiler Infrastructure (CCI) {{to reflect}} against managed {{assemblies}} and generate an <b>output</b> <b>file.</b>|$|E
5000|$|MIDI, Csound, LilyPond and MusicXML {{file export}} (including PostScript and PDF <b>output</b> <b>file</b> {{generation}} of score) ...|$|E
5000|$|Up to four serial ports {{that can}} be mapped to a pipe or to an <b>output</b> <b>file,</b> ...|$|E
50|$|The ANUGA Viewer is a {{graphical}} 3D rendering program {{suitable for}} animating the <b>output</b> <b>files</b> from ANUGA.|$|R
5000|$|An {{ordinary}} {{merge sort}} using four working files organizes {{them as a}} pair of input files and a pair of <b>output</b> <b>files.</b> The dataset is distributed evenly between two of the working files, either as sorted runs or in the simplest case, single records, which can be considered to be sorted runs of size 1. Once all of the dataset is transferred to the two working files, those two working files become the input files for the first merge iteration. Each merge iteration merges runs from the two input working files, alternating the merged output between the two <b>output</b> <b>files,</b> again distributing the merged runs evenly between the two <b>output</b> <b>files</b> (until the final merge iteration). Once all of the runs from the two inputs files are merged and output, then the <b>output</b> <b>files</b> become the input files and vice versa for the next merge iteration. The number of runs decreases by a factor of 2 at each iteration, such as 64, 32, 16, 8, 4, 2, 1. For the final merge iteration, the two input files only have one sorted run (1/2 of the dataset) each, and the merged result is a single sorted run (the sorted dataset) on one of the <b>output</b> <b>files.</b> This is also described at Merge sort#Use with tape drives [...]|$|R
30|$|As we stated previously, each mapper {{makes its}} map outputs {{available}} for download {{as soon as}} the task is finished. The map <b>output</b> <b>files</b> are available for download until a timeout is reached (set at several times the expected application runtime) or the MapReduce job is completed. A VMR mapper only accepts requests for the existing map <b>output</b> <b>files,</b> and discards messages that do not follow a predefined template.|$|R
50|$|Customization of the <b>output</b> <b>file</b> settings, such as bitrate, frame rate, frame size, {{video and}} audio codecs, etc.|$|E
5000|$|An {{input file}} [...] can be {{converted}} from ISO-8859-1 to UTF-8 and output to <b>output</b> <b>file</b> [...] using: ...|$|E
50|$|The {{same scene}} is then {{reproduced}} in the renderer, and the <b>output</b> <b>file</b> is {{compared with the}} photograph.|$|E
50|$|The file_deleter daemon deletes <b>output</b> <b>files</b> {{after the}} assimilator has {{processed}} them, and deletes input files that aren't needed anymore.|$|R
5000|$|GNU LilyPond {{provides}} an inverse search feature through PDF <b>output</b> <b>files,</b> since version 2.6. The program calls this feature Point-and-click, ...|$|R
40|$|A new {{parallel}} I/O {{scheme is}} {{implemented in the}} hybrid particle-field MD simulation code called OCCAM. In the new implementation the numbers of input and <b>output</b> <b>files</b> are greatly reduced. Furthermore, the sizes of the input and <b>output</b> <b>files</b> are reduced as the new files are in binary format compared to ASCII files in the original code. The I/O performance is improved due to bulk data transfer instead of small and frequent data transfer in the original code. The results of tests on two different systems show 6 - 18 % performance improvements...|$|R
