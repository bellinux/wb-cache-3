6706|336|Public
25|$|DAO: DAO, or Data Access Objects were an <b>object</b> <b>oriented</b> {{interface}} {{created by}} Microsoft which allowed early versions of Microsoft Access and Visual Basic {{to access the}} Jet database engine. Later (in version 3.5) {{it was able to}} bypass the Jet engine altogether and directly access ODBC data sources.|$|E
25|$|Atufenua Maui and {{educators}} from Japan {{have worked on}} the implementation of an e-learning pilot system at Motufoua Secondary School that applies the Modular <b>Object</b> <b>Oriented</b> Dynamic Learning Environment (Moodle). The e-learning system is intended to benefit students at Motufoua Secondary School and to provide computer skills to students who will enter the tertiary level of education outside Tuvalu.|$|E
25|$|This diagram {{has been}} {{incorporated}} within the VA-EA {{to provide a}} symbolic representation of the metamodel it used, to describe the One-VA Enterprise Architecture and to build an EA Repository {{without the use of}} Commercial EA Repository Software. It was developed using an <b>object</b> <b>oriented</b> database within the Caliber-RM Software Product. Caliber-RM is intended {{to be used as a}} software configuration management tool; not as an EA repository.|$|E
5000|$|... 1993 Bytes (A Black Dog Productions {{album that}} {{includes}} two Plaid songs, <b>Object</b> <b>Orient</b> and Yamemm) ...|$|R
40|$|More {{and more}} {{applications}} are using database support {{to meet their}} data processing requirements. NEONS (Naval Environmental Operational Nowcasting System) uses a relational database management system (RDBMS) to store and retrieve huge quantities of geophysical data. <b>Object</b> [...] <b>oriented</b> databases are gaining in importance due {{to a number of}} desirable features. Since the <b>object</b> [...] <b>oriented</b> database concept is relatively new, and many systems like NEONS already contain a lot of data in a relational database, providing <b>object</b> [...] <b>oriented</b> access to such relational data can be useful. This paper addresses some of the issues involved in providing an <b>object</b> [...] <b>oriented</b> view of an existing relational database. An approach that uses additional domain information in identifying objects in a relational database schema is investigated. Key words: database, <b>object</b> [...] <b>oriented</b> database, relational database management systems, OODBMS, RDBMS, E [...] R model, relational model, <b>object</b> [...] <b>oriented</b> model 1. Introduction [...] ...|$|R
40|$|This paper aims to {{show the}} {{interaction}} and performance of a commercial database; Objectivity/DB (Objectivity Inc.) with a HSM (Hierarchical Storage Management) systems; Sony Peta Serve. Experiences of building a 100 Gigabyte prototype database {{on top of the}} HSM system with Sony tape library robotics are reported. A test of making objects in the database shows the performance on the HSM and on pure disks was almost equivalent. In database access tests, the performances on HSM was less than that on pure disks. However, the database with the HSM still got compatible speed with conventional sequential tape access in addition to the <b>Object</b> <b>Orient</b> Database system merits. INTRODUCTION New data storage management methods may be required to handle the anticipated high volumes of complex data expected from upcoming HEP experiments. The methods must fit <b>object</b> <b>orient</b> programings which become key tool for the HEP computing. Recently a commercial <b>object</b> <b>orient</b> database system, Objecti [...] ...|$|R
25|$|Objects in <b>object</b> <b>oriented</b> {{languages}} are usually accessed by a reference whose static target type (or manifest type) {{is equal to}} either the object's run-time type (its latent type) or a supertype thereof. This is conformant with the Liskov substitution principle, which states that all operations performed on an instance of a given type can also be performed on an instance of a subtype. This concept {{is also known as}} subsumption. In some languages subtypes may also possess covariant or contravariant return types and argument types respectively.|$|E
25|$|The C-Lab programmers {{left that}} company to form Emagic, and in 1993 {{released}} a new program, Notator Logic, which attempted to fuse both track- and pattern-based operation (but looked {{much more like}} track-based sequencers than Notator). While rich in features, early versions of Logic on the Atari lacked the intuitiveness and immediacy of either Cubase or Notator, and never achieved the same success. However, {{by this time the}} Atari was becoming obsolete, and {{part of the reason why}} Notator Logic had been written from scratch with an <b>object</b> <b>oriented</b> GUI (though it shared the same nomenclature as its predecessor) was to make it easier to port to other platforms. The Notator preface was dropped from the product name and the software became known as simply Logic.|$|E
25|$|Gelenbe {{has contributed}} {{pioneering}} research concerning {{the performance of}} multiprogramming computer systems, virtual memory management, data base reliability optimisation, distributed systems and network protocols. He formed, led, and trained the team that designed the commercial QNAP Computer and Network Performance Modeling Tool. He introduced the Flexsim <b>Object</b> <b>Oriented</b> approach for the simulation in manufacturing systems. He carried {{out some of the}} first work on adaptive control of computer systems, and published seminal papers on the performance optimisation of computer network protocols and on the use of diffusion approximations for network performance. He developed new product form queueing networks with negative customers and triggers known as G-networks. He also introduced a new spiked stochastic neural network model known as the random neural network, developed its mathematical solution and learning algorithms, and applied it to both engineering and biological problems. His inventions include the design of the first random access fibre-optics local area network, a patented admission control technique for ATM networks, a neural network based anomaly detector for brain magnetic resonance scans, and the cognitive packet network routing protocol to offer quality of service to users.|$|E
40|$|This paper {{describes}} {{the outline of}} our lecture and the experience we have had when introducing <b>object</b> [...] <b>oriented</b> programming, design, and software architecture to students of different educational and vocational backgrounds. While other courses on <b>object</b> [...] <b>oriented</b> programming only show how to implement things in an <b>object</b> [...] <b>oriented</b> way, we emphasize on the production of reusable class libraries and frameworks. 1. 1 The audienc...|$|R
40|$|Microsoft VC++ is a {{powerful}} <b>object</b> – <b>oriented</b> application integrated development environment. <b>Object</b> – <b>oriented</b> programs are rich in structure: Methods and attributes belong to classes, objects are instances of classes, and interclass relationship entails, association, aggregation, inheritance, and call relationships. The <b>object</b> – <b>oriented</b> frameworks provide a important enabling technology for reusing software components. In VC++, these frameworks are supported by Microsoft Foundation Classes (MFC). The MFC is used t...|$|R
40|$|This report {{illustrates}} the progress {{made on the}} Rubber Boat Ship Specification System for NavSim between May and September of 1999. The work centers on the usage of <b>objected</b> <b>oriented</b> programming where imported CAD drawings are converted to graphical patch objects in MATLAB. Peer reviewed: NoNRC publication: Ye...|$|R
500|$|During the {{development}} of the [...]NET Framework, the class libraries were originally written using a managed code compiler system called Simple Managed C (SMC). In January 1999, Anders Hejlsberg formed a team to build a new language at the time called Cool, which stood for [...] "C-like <b>Object</b> <b>Oriented</b> Language". Microsoft had considered keeping the name [...] "Cool" [...] as the final name of the language, but chose not to do so for trademark reasons. By the time the [...]NET project was publicly announced at the July 2000 Professional Developers Conference, the language had been renamed C#, and the class libraries and ASP.NET runtime had been ported to C#.|$|E
500|$|To {{address these}} {{business}} concerns, an aspect weaver enables {{the use of}} widely adopted languages like Java with aspect-oriented programming through minor adaptations such as AspectJ which work with existing tools. Instead of developing an entirely new language, the aspect weaver interprets the extensions defined by AspectJ and builds [...] "woven" [...] Java code which can then be used by any existing Java compiler. This ensures that any existing <b>object</b> <b>oriented</b> code will still be valid aspect-oriented code and that development will feel like a natural extension of the object-oriented language. The AspectC++ programming language extends C++ through the use of an aspect weaver, offering the additional efficiency over AspectJ that is necessary for embedded systems while still retaining the benefits of aspect-oriented programming.|$|E
500|$|Beneath a Steel Sky {{became the}} second game to use Revolution's Virtual Theatre engine, after Lure of the Temptress. According to Cecil, the {{original}} version of the engine seemed less applicable in Beneath a Steel Sky, {{as the ability to}} issue commands conflicted with the gameplay they intended to create. Lure of the Temptress had one story that was moved forward by a key event, whereas Beneath a Steel Sky had multiple threads. In one way this presented them with [...] "exciting gameplay opportunities, but in others it cordoned off more ambitious ideas in terms of multilinearity." [...] As a consequence, some of the engine's features were scaled back. Tony Warriner and David Sykes, both Revolution co-founders and programmers, had to update the engine, which was part of the new deal with Virgin Interactive. As an example of change in the updated engine, Virtual Theatre 2.0, Warriner explained that in Lure of the Temptress, the system controlled everything, for instance specific routines to a door. So if there was a door on-screen, the door-routine was called up to handle it. The consequence was that every door looked the same and acted the same, so if a door was somewhat different from the last one, it caused a problem. This was changed in the new system, as it was <b>object</b> <b>oriented</b> and no distinction was made between a proper object like a door or key.|$|E
5000|$|A new welcome center, and the {{addition}} of six landmark <b>objects</b> to <b>orient</b> visitors.|$|R
40|$|A new {{methodology}} for the <b>object</b> [...] <b>oriented</b> description of models {{consisting of a}} mixture of continuous and discrete components is presented. The <b>object</b> [...] <b>oriented</b> paradigm enables the user to describe such models in a modular fashion that permits the reuse of these models independently of {{the environment in which}} they are to be embedded. The paper explains the basic mechanisms needed for <b>object</b> [...] <b>oriented</b> modeling of hybrid systems by means of language constructs available in the <b>object</b> [...] <b>oriented</b> modeling language Dymola. It then addresses more advanced concepts such as variable structure models containing e. g. ideal electrical switches, ideal diodes and dry friction. INTRODUCTION Hybrid models contain both continuous and discrete parts. In simulation programs, the continuous parts are described by sets of differential equations and algebraic equations in either explicit form (ODE) or implicit form (DAE). Traditionally, the discrete parts are expressed with event descriptions. A numeric [...] ...|$|R
40|$|In this paper, we {{introduce}} <b>object</b> [...] <b>oriented</b> {{programs as}} sets of communicating objects. We investigate possibilities for their concurrent execution, {{starting with a}} review of existing concurrent, <b>object</b> [...] <b>oriented</b> systems. Most of these systems introduce new programming [...] language features, forcing a programmer to control concurrency by hand. In contrast, we prefer automatic parallelization of programs. For this purpose, we introduce a concurrent, object [...] based execution model. 1 Introduction The aim of this work is to take programs written in an <b>object</b> [...] <b>oriented</b> language and execute them in parallel on a set of processors. The <b>object</b> [...] <b>oriented</b> language will thus play the role of an "executable specification" without any implication of an execution mode (sequential or parallel). As it is widely accepted, significant improvements of computing power will, in the near future, only be achieved by the use of multi [...] processor architectures in which numerous processing elements share the app [...] ...|$|R
2500|$|The {{following}} version can be {{used with}} <b>Object</b> <b>Oriented</b> languages: ...|$|E
2500|$|The <b>Object</b> <b>Oriented</b> Amiga Exec; Tim Holloway; Byte Magazine; 1991 ...|$|E
2500|$|Object Pascal – an <b>object</b> <b>oriented</b> variant (the {{one used}} in Delphi and Lazarus) of Niklaus Wirth's {{original}} Pascal language. Free Pascal is the compiler in Lazarus ...|$|E
40|$|The {{advantages}} of Florid as a deductive <b>object</b> [...] <b>oriented</b> database system are the rich <b>object</b> [...] <b>oriented</b> modeling facilities of its language Flogic. The {{focus of this}} paper is on Florid's multiple inheritance mechanism which {{turns out to be a}} useful means to adapt various examples of nonmonotonic reasoning in the <b>object</b> [...] <b>oriented</b> setting. 1 Introduction With Florid (F-logic reasoning in databases) [7] we present an implementation of all essential features of F-logic, a rule language for deductive <b>object</b> [...] <b>oriented</b> databases. In this area one is concerned with nonmonotonic reasoning in various ways. Besides the well [...] known problems with negation and recursion, see e. g. [2, 3], an important issue is the inheritance of methods. Since as a distinctive feature the language allows for the unrestricted definition of class information by rules, an involved interdependence between logical deduction and inheritance takes place. Consider first the following classical example which illustrates the i [...] ...|$|R
40|$|Database {{management}} systems (DBMSs) {{are being used}} {{in a wide variety}} of domains to handle many types of data. Scientific data pose a special challenge to DBMSs due to their volume and complex nature. The <b>object</b> [...] <b>oriented</b> model has many additional capabilities over the relational model that enables the database designer to capture the semantics of the data better. This paper describes the process of re [...] engineering a part of a relational database to an <b>object</b> [...] <b>oriented</b> database. The transformation of the relational schema to an <b>object</b> [...] <b>oriented</b> schema, the implementation of the new schema using an <b>object</b> [...] <b>oriented</b> DBMS, and a user interface for the new database are described in this paper. 1. Introduction A Database management system (DBMS) is a system that provides facilities to store, retrieve, and manage large quantities of data. One of the key aspects of storing data using a DBMS is data modelling. There are at least two popular data models on which most of the current systems are [...] ...|$|R
40|$|The author discuss {{different}} {{theoretical models}} for the comprehension of the psychoanalytical couple psychotherapy. More specifically, metapsychological <b>oriented,</b> <b>object</b> relations <b>oriented</b> and relational-intersubjective oriented models will be shortly described and confronted to underline their specificities an some possible point of conjunction. The concept of link will be stressed in these different orientations...|$|R
2500|$|... p5.js [...] is an <b>object</b> <b>oriented</b> JavaScript library {{designed}} for artists and designers. It {{is based on}} the ideas of the Processing project but is for the web.|$|E
2500|$|HyperCard {{contains}} an <b>object</b> <b>oriented</b> scripting language called HyperTalk. Objects {{exist in a}} message path hierarchy and respond to messages generated by either the user or the system (timers for instance). Objects inherit properties and attributes from those above them in the hierarchy. [...] HyperTalk object classes are predetermined by the HyperCard environment, although others can be added {{by the use of}} externals (see below). HyperTalk is verbose, hence its ease of use and readability. HyperTalk code segments are referred to as [...] "scripts", a term that was considered less daunting to beginning programmers.|$|E
2500|$|After Windows 3.11, Microsoft {{began to}} develop a new {{consumer}} oriented version of the operating system codenamed Chicago. Chicago was designed to have support for 32-bit preemptive multitasking like OS/2 and Windows NT, although a 16-bit kernel would remain for the sake of backward compatibility. The Win32 API first introduced with Windows NT was adopted as the standard 32-bit programming interface, with Win16 compatibility being preserved through a technique known as [...] "thunking". A new <b>object</b> <b>oriented</b> GUI was not originally planned as part of the release, although elements of the Cairo user interface were borrowed and added as other aspects of the release (notably Plug and Play) slipped.|$|E
30|$|In {{the current}} research, an {{open-source}} software for pore network modeling was implemented in C++, {{which we call}} it “Starfish”. Starfish has been specifically developed for petroleum engineering applications. It benefits from an <b>objected</b> <b>oriented</b> design and it can handle wide ranges of network sizes and pore/throat geometries. Parallel computing was used extensively in Starfish code to reduce its runtime, and its efficient solver package enables it to simulate very large networks with considerable accuracy.|$|R
40|$|A {{simulation}} has a {{very important}} role in robotics. This research project was focused to develop an efficient universal n link serial link manipulator simulator which can be interacted through graphical user interface with zero code environment using <b>object</b> <b>orient</b> language of Visual C++. This simulator support to wide range of robotics manipulators and computes manipulator links motions under the influence of external forces and internal configuration with sufficient efficiency and allow user interaction...|$|R
40|$|In this {{contribution}} {{we describe}} an <b>object</b> [...] <b>oriented</b> software architecture for image segmentation, 3 [...] D pose estimation {{as well as}} Bayesian object recognition: models are represented by densities, model generation corresponds to parameter estimation tasks, and the identification applies the Bayesian decision rule. We show results of 3 [...] D object recognition experiments based on the observation of 2 [...] D points or lines. Keywords: <b>Object</b> [...] <b>oriented</b> programming, statistical <b>object</b> recognition...|$|R
2500|$|The {{next major}} consumer-oriented release of Windows, Windows 95, was {{released}} on August 24, 1995. While still remaining MS-DOS-based, Windows 95 introduced support for native 32-bit applications, plug and play hardware, preemptive multitasking, long file names of up to 255 characters, and provided increased stability over its predecessors. Windows 95 also introduced a redesigned, <b>object</b> <b>oriented</b> user interface, replacing the previous Program Manager with the Start menu, taskbar, and Windows Explorer shell. Windows 95 was a major commercial success for Microsoft; Ina Fried of CNET remarked that [...] "by the time Windows 95 was finally ushered off the market in 2001, {{it had become a}} fixture on computer desktops around the world." [...] Microsoft published four OEM Service Releases (OSR) of Windows 95, each of which was roughly equivalent to a service pack. The first OSR of Windows 95 was also the first version of Windows to be bundled with Microsoft's web browser, Internet Explorer. Mainstream support for Windows 95 ended on December 31, 2000, and extended support for Windows 95 ended on December 31, 2001.|$|E
5000|$|Java [...] <b>object</b> <b>oriented</b> [...] static [...] Ruby [...] functional, <b>object</b> <b>oriented</b> [...] duck typing, dynamic [...] Groovy [...] functional, <b>object</b> <b>oriented</b> [...] duck typing, dynamic, static ...|$|E
50|$|Fred, the {{developer}} of PureBasic, {{has stated that}} PureBasic will never be <b>object</b> <b>oriented.</b> However, numerous users have created <b>object</b> <b>oriented</b> support systems.|$|E
40|$|The {{software}} package ConPAHS facilitates control design of continuous-time piecewise-affine hybrid systems on polytopes. For the control objective of reaching a particular state from a specified initial state, {{the output of}} the package is a piecewise-affine control law. After a short review of the control theory for this problem, the paper presents the functional specification of ConPAHS, the <b>objected</b> <b>oriented</b> software principles used, the program structure, and the design choices. Three examples including simulations are provided to illustrate the use of ConPAHS...|$|R
40|$|This paper {{describes}} an NFS configuration and management system for large and heterogeneous computer environments. It also shows how this {{system can be}} extended to address other services in the network. The solution is composed of a process that describes service configuration and management life-cycle, a modular architecture and an <b>objected</b> <b>oriented</b> model. The system supports multiple features, including: automatic host and service installation, service dependency inference and analysis, performance analysis, configuration optimization as well as service functioning monitoring and problem correction...|$|R
40|$|Abstract — The {{software}} package ConPAHS facilitates control design of continuous-time piecewise-affine hybrid systems on polytopes. For the control objective of reaching a particular state from a specified initial state, {{the output of}} the package is a piecewise-affine control law. After a short review of the control theory for this problem, the paper presents the functional specification of ConPAHS, the <b>objected</b> <b>oriented</b> software principles used, the program structure, and the design choices. Three examples including simulations are provided to illustrate the use of ConPAHS. I...|$|R
