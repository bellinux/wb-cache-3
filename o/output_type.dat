87|604|Public
25|$|To each {{variable}} in the primal space corresponds an inequality to satisfy in the dual space, both indexed by <b>output</b> <b>type.</b> To each inequality to satisfy in the primal space corresponds a {{variable in the}} dual space, both indexed by input type.|$|E
5000|$|According to the <b>output</b> <b>type,</b> {{different}} versions of Logic Learning Machine have been developed: ...|$|E
50|$|Among programmers, {{to produce}} {{compatible}} functions, {{the principle is}} popularized in the form be contravariant in the input type and covariant in the <b>output</b> <b>type.</b>|$|E
5000|$|Unit Emergy Values (UEVs) — the emergy {{required}} to generate one unit of <b>output.</b> <b>Types</b> of UEVs: ...|$|R
5000|$|In total {{there are}} six input and <b>output</b> <b>types</b> within NEPO. These types can have the {{following}} values: ...|$|R
5000|$|Output: Specifies {{the file}} format {{in which the}} {{software}} saves the final video (non-video <b>output</b> <b>types</b> are omitted) ...|$|R
50|$|The {{element type}} (called the input type) is indexed by shape and position, {{so it can}} vary by shape and position, and the {{extension}} (called the <b>output</b> <b>type)</b> is also indexed by shape.|$|E
50|$|In other words, the → type {{constructor}} is contravariant in {{the input}} type and covariant in the <b>output</b> <b>type.</b> This rule was first stated formally by John C. Reynolds, and further popularized {{in a paper}} by Luca Cardelli.|$|E
50|$|The <b>output</b> <b>type</b> for {{the machine}} is {{designed}} {{so that it is}} possible to determine from the output which processing function was executed, in response to a given input. This relates to the property of output distinguishability, described below.|$|E
40|$|This article {{examines}} <b>output</b> <b>types</b> as manifestations of different concepts of research. We compare the UK academic scene {{to that of}} Brazil, identifying the former as responding ???bottom-up??? to researcher needs and the latter determining ???top-down??? what researchers can do. Taking the UK model as indicative of what researchers think they need, we undertook {{a detailed analysis of}} the <b>output</b> <b>types</b> used in RAE 2008 across all subjects in order to see which types were used and by whom. We also undertook a further analysis of the use of traditional, text-based formats in art and design, and the use of non-traditional, non-textual <b>output</b> <b>types</b> in other subjects. We conclude that both the journal format and the exhibition format are expressive of the understanding each community has of the meaning of research as an activity. This is further reinforced by the national structures within which research is undertaken and evaluate...|$|R
50|$|The FMOD {{sound system}} has an {{advanced}} plugin architecture {{that can be}} used to extend the support of audio formats or to develop new <b>output</b> <b>types,</b> e.g. for streaming.|$|R
50|$|In {{computer}} science, a type family associates {{data types}} with other data types, using a type-level function defined by an open-ended collection of valid instances of input types {{and the corresponding}} <b>output</b> <b>types.</b>|$|R
50|$|To each {{variable}} in the primal space corresponds an inequality to satisfy in the dual space, both indexed by <b>output</b> <b>type.</b> To each inequality to satisfy in the primal space corresponds a {{variable in the}} dual space, both indexed by input type.|$|E
5000|$|The input {{offset voltage}} (...) is a {{parameter}} defining the differential DC voltage required between the inputs of an amplifier, especially an operational amplifier (op-amp), to make the output zero (for voltage amplifiers, 0 volts with respect to ground or between differential outputs, depending on the <b>output</b> <b>type).</b>|$|E
50|$|A light {{characteristic}} is {{a graphic}} and text {{description of a}} navigational light sequence or colour displayed on a nautical chart or in a Light List with the chart symbol for a lighthouse, lightvessel, buoy or sea mark with a light on it. The graphic indicates how the real light may be identified when looking at its actual light <b>output</b> <b>type</b> or sequence. Different lights use different colours, frequencies and light patterns, so mariners can identify which light they are seeing.|$|E
50|$|The Map {{function}} takes {{a series}} of key/value pairs, processes each, and generates zero or more output key/value pairs. The input and <b>output</b> <b>types</b> of the map can be (and often are) different from each other.|$|R
5000|$|E is an arc {{expression}} function. It maps each arc a∈A {{into the}} expression e. The input and <b>output</b> <b>types</b> of the arc expressions must {{correspond to the}} type of the nodes the arc is connected to.|$|R
40|$|We {{study the}} {{expressive}} {{power of the}} static type system of the Nested Relational Calculus and show that on so-called homogeneous input and <b>output</b> <b>types,</b> the type system is expressively complete: every untyped but homogeneously well-defined expression can be equivalently expressed by a well-typed expression. The static type system hence does not limit the expressive power of the query writer. © 2013 Springer-Verlag Berlin Heidelberg. SCOPUS: ar. kinfo:eu-repo/semantics/publishe...|$|R
50|$|Computer facial {{animation}} {{is primarily}} {{an area of}} computer graphics that encapsulates methods and techniques for generating and animating images or models of a character face. The character can be a human, a humanoid, an animal, a fantasy creature or character, etc. Due to its subject and <b>output</b> <b>type,</b> it is also related to many other scientific and artistic fields from psychology to traditional animation. The importance of human faces in verbal and non-verbal communication and advances in computer graphics hardware and software have caused considerable scientific, technological, and artistic interests in computer facial animation.|$|E
5000|$|While {{assembling}} {{software components}} out of interchangeable modules {{is a far}} from new concept, policy-based design represents an innovation {{in the way it}} applies that concept at the (relatively low) level of defining the behavior of an individual class. Policy classes have some similarity to callbacks, but differ in that, rather than consisting of a single function, a policy class will typically contain several related functions (methods), often combined with state variables or other facilities such as nested types. A policy-based host class {{can be thought of as}} a type of metafunction, taking a set of behaviors represented by types as input, and returning as output a type representing the result of combining those behaviors into a functioning whole. (Unlike MPL metafunctions, however, the output is usually represented by the instantiated host class itself, rather than a nested <b>output</b> <b>type.)</b> ...|$|E
5000|$|In {{programming}} languages, the associativity (or fixity) of {{an operator}} is a property that determines how operators {{of the same}} precedence are grouped {{in the absence of}} parentheses. If an operand is both preceded and followed by operators (for example, [...] "^ 4 ^"), and those operators have equal precedence, then the operand may be used as input to two different operations (i.e. the two operations indicated by the two operators). The choice of which operations to apply the operand to, is determined by the [...] "associativity" [...] of the operators. Operators may be associative (meaning the operations can be grouped arbitrarily), left-associative (meaning the operations are grouped from the left), right-associative (meaning the operations are grouped from the right) or non-associative (meaning operations cannot be chained, often because the <b>output</b> <b>type</b> is incompatible with the input types). The associativity and precedence of an operator {{is a part of the}} definition of the programming language; different programming languages may have different associativity and precedence for the same type of operator.|$|E
5000|$|A merging {{operator}} *** {{that can}} take two arrows, possibly with different input and <b>output</b> <b>types,</b> and fuse them into one arrow between two compound types. Note that the merge operator is not necessarily commutative.A s t *** A u v -> [...] A (s,u) (t,v) ...|$|R
3000|$|... [...]. The {{explicit}} type {{transition is}} found by computing the shortest type transition path between the input and <b>output</b> <b>types.</b> This shortest path algorithm uses a type transition table that contains {{all of the}} valid type transitions (some type transitions are not possible for a given operator library).|$|R
5000|$|A general X-machine handles {{input and}} output using a prior {{encoding}} function α: Y → X for input, and a posterior decoding function β: X → Z for output, where Y and Z are respectively the input and <b>output</b> <b>types.</b> In a Stream X-Machine, these types are streams: ...|$|R
5000|$|When forming {{technical}} {{ceramic materials}} from dry powders prepared for processing, {{the method of}} forming into the shape required depends upon the method of material preparation and {{size and shape of}} the part to be formed. Materials prepared for dry powder forming are most commonly formed by [...] "dry" [...] pressing in mechanical or hydraulic powder compacting presses selected for the necessary force and powder fill depth. Dry powder is automatically discharged into the non-flexible steel or tungsten carbide insert in the die and punches then compact the powder to the shape of the die. If the part is to be large and unable to have pressure transmit suitably for a uniform pressed density then isostatic pressing may be used. When iso-statically pressed the powder takes the shape of a flexible membrane acting as the mould, forming the shape and size of the pressed powder. Isostatic presses can be either high speed, high <b>output</b> <b>type</b> of automatic presses for such parts as ceramic insulators for spark plugs or sand blast nozzles, or slower operating [...] "wet bag" [...] presses that are much more manual in operation but suitable particularly for large machinable blanks or blanks that will be cut or otherwise formed in secondary operations to the final shape.|$|E
50|$|The MF {{architecture}} {{is divided into}} the Control layer, Core Layer and the Platform layer. The core layer encapsulates most of the functionality of Media Foundation. It consists of the media foundation pipeline, which has three components: Media Source, Media Sink and Media Foundation Transforms (MFT). A media source is an object that acts {{as the source of}} multimedia data, either compressed or uncompressed. It can encapsulate various data sources, like a file, or a network server or even a camcorder, with source specific functionality abstracted by a common interface. A source object can use a source resolver object which creates a media source from an URI, file or bytestream. Support for non-standard protocols can be added by creating a source resolver for them. A source object can also use a sequencer object to use a sequence of sources (a playlist) or to coalesce multiple sources into single logical source. A media sink is the recipient of processed multimedia data. A media sink can either be a renderer sink, which renders the content on an output device, or an archive sink, which saves the content onto a persistent storage system such as a file. A renderer sink takes uncompressed data as input whereas an archive sink can take either compressed or uncompressed data, depending on the <b>output</b> <b>type.</b> The data from media sources to sinks are acted upon by MFTs; MFTs are certain functions which transform the data into another form. MFTs can include multiplexers and demultiplexers, codecs or DSP effects like reverb. The core layer uses services like file access and networking and clock synchronization to time the multimedia rendering. These are part of the Platform layer, which provides services necessary for accessing the source and sink byte streams, presentation clocks and an object model that lets the core layer components function asynchronously, and is generally implemented as OS services. Pausing, stopping, fast forward, reverse or time-compression can be achieved by controlling the presentation clock.|$|E
40|$|International audienceWe give in {{this paper}} a purely syntactical {{definition}} of input and output types of system F. We define the syntactical data types as input and output types. We show that any type with positive quantifiers is a syntactical data type and that an input type is an <b>output</b> <b>type.</b> We give some restrictions on the ∀-elimination rule {{in order to prove}} that an <b>output</b> <b>type</b> is an input type...|$|E
50|$|A {{profiler}} is {{a performance}} analysis tool that measures {{the behavior of}} a program as it executes, particularly the frequency and duration of function calls. Performance analysis tools existed at least from the early 1970s. Profilers may be classified according to their <b>output</b> <b>types,</b> or their methods for data gathering.|$|R
40|$|A {{one page}} {{guide to the}} Open Access {{requirements}} for the next REF. Key points are covered including Act on acceptance, outputs that the policy covers, {{what to do with}} books, book chapters, reports and other <b>output</b> <b>types,</b> how to add them to the CRIS and future developments including ORCIDs and importing from Web of Science...|$|R
40|$|Emerging {{semantic}} web service description formalisms, such as OWL-S, {{allow for a}} definition of the semantic of services. Describing input and <b>output</b> <b>types</b> {{is not sufficient to}} declaratively and unambiguously denote the operations offered by a web service. Two services may have the same input and <b>output</b> <b>types</b> and have completely different semantics of their operation. In this paper we present an approach for the specification of a web service denotation based on OWL-S capabilities, and an algorithm for dynamic discovery of services exploiting their denotation. We show how preconditions and results of the OWL-S formalism can be used to constrain the actual denotation of a service, and we describe how an agent can perform dynamic discovery of services exploiting their denotation. In our scenario, an agent has to search for the appropriate service, and verify that this service is able to produce the information that the agent needs...|$|R
40|$|The µPC 2721 / 2722 are Silicon {{monolithic}} ICs {{designed for}} L-band down converter. These ICs consist of double balanced mixer, local oscillator, local oscillation buffer amplifier, IF amplifier, and voltage regulator. The packages are 8 pin SOP or SSOP suitable for high-density surface mount. FEATURES • Wide band operation fRF = 0. 9 to 2. 0 GHz • Two products in IF output variation are prepared µPC 2721 : Emitter follower <b>output</b> <b>type</b> = 50 Ω constant resistive impedance µPC 2722 : Open collector <b>output</b> <b>type</b> = High impedance output dependent on external inductance. • Single-end push-pull IF amplifier suppresses fluctuation in output impedance...|$|E
40|$|AbstractThe well-definedness {{problem for}} a {{programming}} language consists of checking, given an expression and an input type, whether the semantics of the expression is defined for all inputs adhering to the input type. A related problem is the semantic type-checking problem which consists of checking, given an expression, an input type, and an <b>output</b> <b>type</b> whether the expression always returns outputs adhering to the <b>output</b> <b>type</b> on inputs adhering to the input type. Both problems are undecidable for general-purpose programming languages. In this paper we study these problems for the Nested Relational Calculus, a specific-purpose database query language. We also investigate how these problems behave {{in the presence of}} programming language features such as singleton coercion and type tests...|$|E
40|$|Magnetizing {{currents}} {{of a line}} side interphase transformer applied in a three phase twelve pulse voltage <b>output</b> <b>type</b> rectifiers are analyzed. Waveforms of the transformer voltages are derived. It is shown that fluxes of the core limbs contain a significant zero sequence component, resulting in a stray flux and high magnetizing currents. Application of three single phase cores is proposed. The results are experimentallyverified...|$|E
30|$|Each {{workflow}} may rely on {{some type}} of products from other workflows and may produce some other type of products. Each workflow agent has an internal process flow, the required input <b>types</b> and <b>output</b> <b>types.</b> This leads to dependency between workflows. Due to the dependency between workflows, the original contract net protocol must be extended {{to be applied to}} solve the collaborative scheduling problem in supply chains.|$|R
30|$|The basic {{conceptual}} outline {{depicted in}} Fig.  1 also provides {{the structure and}} framework for on-going research and development in the SOLUTIONS project for approaches that lack or are insufficiently validated [21]. The essential parts setting {{the agenda for the}} research relate to the linkages between the four entry points (circular arrows), and to the net types of contribution to a safe chemical use (outer circle: major <b>output</b> <b>types).</b>|$|R
40|$|The Standard Industrial Classification Code (SICC) {{is based}} on the {{external}} characteristics of industries, including physical <b>outputs,</b> <b>types</b> and usage. Such external criteria are becoming increasingly inadequate to guide both management strategy and public policy, as firms seek new sources of advantage from diversification. In this paper a new classification based on core competences is introduced. This provides a new setting in which the effectiveness of diversification may be discussed. ...|$|R
