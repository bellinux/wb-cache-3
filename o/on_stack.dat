207|4994|Public
25|$|The {{algorithm}} below uses a trailing pointer for {{the insertion}} into the sorted list. A simpler recursive method rebuilds the list each time (rather than splicing) and can use <b>O(n)</b> <b>stack</b> space.|$|E
25|$|Stack {{manipulation}} in X# {{is performed}} using + and - prefixes, where + pushes a register, value, constant or all registers onto the stack and - pops a value to some register. All constants are pushed <b>on</b> <b>stack</b> as double words, unless stated otherwise (pushing single bytes is not supported).|$|E
25|$|These {{functions}} {{are based on}} the observation that the question is 4 even? is equivalent to is 3 odd?, which is in turn equivalent to is 2 even?, and so on down to 0. This example is mutual single recursion, and could easily be replaced by iteration. In this example, the mutually recursive calls are tail calls, and tail call optimization would be necessary to execute in constant stack space. In C, this would take <b>O(n)</b> <b>stack</b> space, unless rewritten to use jumps instead of calls.|$|E
5000|$|... #Caption: A {{wind farm}} <b>on</b> <b>Stack's</b> Mountain in the Stack's Mountains.|$|R
5000|$|Some {{environments that}} rely heavily <b>on</b> <b>stacks</b> may provide {{additional}} operations, for example: ...|$|R
5000|$|... #Caption: A {{wooden chair}} with {{upholstery}} and with focus <b>on</b> <b>stacking</b> abilities, designed by Busk-Hertzog in 2003.|$|R
5000|$|... #Caption: Steam yacht CANGARDA at Belfast, ME. July, 2017 (inset: Cangarda name <b>on</b> <b>stack)</b> ...|$|E
5000|$|FADD, FSUB, FMUL, FDIV {{only for}} {{single-precision}} operating <b>on</b> <b>stack</b> addressed by register operand ...|$|E
5000|$|Arm top feeler Wheels (feel only bottom record <b>on</b> <b>stack)</b> - random intermix, odd sizes (Miracord 9 and 90) ...|$|E
50|$|A {{variety of}} {{synthetic}} nanotubes, based <b>on</b> <b>stacking</b> of cyclic peptides and other cyclic molecules have been investigated.|$|R
5000|$|... 2009: “Artistic {{treatment}} to end panels <b>on</b> <b>stacks</b> of bookshelves throughout the complex, Deltona Public Library”Volusia County. FL.|$|R
40|$|International audienceIn {{this paper}} we develop {{the theory of}} perverse sheaves <b>on</b> Artin <b>stacks</b> {{continuing}} the study in "The six operations for sheaves <b>on</b> Artin <b>stacks</b> I: Finite Coefficients" and "The six operations for sheaves <b>on</b> Artin <b>stacks</b> II: Adic Coefficients" (math. AG/ 0512097 and math. AG/ 0603680...|$|R
5000|$|... <b>on</b> <b>stack</b> array allocation: #define BUFLEN 10 var !p_buf with pf_buf = @byteBUFLEN(0) // pf_buf = @byteBUFLEN(0) @ p_buf ...|$|E
50|$|Programming Puzzles & Code Golf <b>on</b> <b>Stack</b> Exchange (online): Any {{programming}} language allowed. Also includes {{other types of}} programming challenges.|$|E
5000|$|... (Parts of {{this table}} were copied from a [...] "List of Top Repositories by Programming Language" [...] <b>on</b> <b>Stack</b> Overflow) ...|$|E
5000|$|Jenna Krajeski of The New Yorker wrote: [...] "His work <b>on</b> <b>stacked</b> spines {{and covers}} reworks books into a beautiful, albeit unreadable, library".|$|R
5000|$|Rotate (or Roll): the n topmost {{items are}} moved <b>on</b> the <b>stack</b> in a {{rotating}} fashion. For example, if n=3, items 1, 2, and 3 <b>on</b> the <b>stack</b> are moved to positions 2, 3, and 1 <b>on</b> the <b>stack,</b> respectively. Many variants {{of this operation}} are possible, with the most common being called left rotate and right rotate.|$|R
5000|$|Object {{references}} <b>on</b> the <b>stack.</b> Object references <b>on</b> the <b>stack</b> are checked. One {{of the two}} following actions {{is taken}} for each object reference that points to an object in from-space: ...|$|R
5000|$|... #Caption: Salvage Tug Relief {{prior to}} 1918 sale to US Navy (note black horse [...] "house flag" [...] <b>on</b> <b>stack)</b> ...|$|E
5000|$|PUSHF Push flags <b>on</b> <b>stack</b> MOV BP,SP Copy SP to BP {{for use as}} index OR WORD PTRBP+0,0100H Set TF flag POPF Restore flag Register ...|$|E
50|$|After the {{releases}} of Firefox OS based <b>on</b> <b>stack</b> of web technologies, Mozilla added a feature to install mobile apps on PC using Firefox as base.|$|E
50|$|Trampolines {{are usually}} {{implemented}} by gcc as {{small pieces of}} code generated at runtime <b>on</b> the <b>stack.</b> Thus, they require executing memory <b>on</b> the <b>stack,</b> which triggers PaX to kill the program.|$|R
40|$|We {{introduce}} {{the notion of}} cofoliation <b>on</b> a <b>stack.</b> A cofoliation is a change of the differentiable structure which amounts to giving a full representable smooth epimorphism. Cofoliations are uniquely determined by their associated Lie algebroids. Cofoliations <b>on</b> <b>stacks</b> arise from flat connections on groupoids. Connections on groupoids generalize connections on gerbes and bundles in a natural way. A flat connection on a groupoid is an integrable distribution of the morphism space compatible with the groupoid structure and complementary to both source and target fibres. A cofoliation of a stack determines the flat groupoid up to etale equivalence. We show how a cofoliation <b>on</b> a <b>stack</b> {{gives rise to a}} refinement of the Hodge to De Rham spectral sequence, where the E 1 -term consists entirely of vector bundle valued cohomology groups. Our theory works for differentiable, holomorphic and algebraic stacks. Comment: The paper has been completely rewritten. The technical core remains unchanged, but the context has changed entirely. We do not claim any more that additional structure <b>on</b> a <b>stack</b> is needed to obtain the Hodge to de Rham spectral sequence. We renamed "parallel structures" on groupoids "flat connections" and changed entirely the nature of the structure induced <b>on</b> <b>stacks</b> by flat groupoids. Citations and acknowledgements have been added. New version has 37 page...|$|R
60|$|Right {{under me}} was a wide, yellow, bare spot, miles across, a horrible slash in the green forest, {{and in the middle}} of it, {{surrounded}} by <b>stacks</b> <b>on</b> <b>stacks</b> of lumber, was a great sawmill.|$|R
5000|$|... "Smashing The Stack For Fun And Profit" [...] by Aleph One, {{published}} in issue 49, is the [...] "classic paper" [...] <b>on</b> <b>stack</b> buffer overflows, {{partly responsible for}} popularizing the vulnerability.|$|E
50|$|The {{algorithm}} below uses a trailing pointer for {{the insertion}} into the sorted list. A simpler recursive method rebuilds the list each time (rather than splicing) and can use <b>O(n)</b> <b>stack</b> space.|$|E
5000|$|LDCI % Load {{constant}} integer (push opcode word) % A {{lot like}} SLDCI, except fetch 2-byte word and [...] "push" [...] <b>on</b> <b>stack</b> dec(sp) | stack := tos | tos := word | goto fetch ...|$|E
50|$|Specifically, the invariants <b>on</b> <b>stacked</b> run sizes {{ensure a}} tight {{upper bound on}} the maximum size of the {{required}} stack. The implementation preallocated a stack sufficient to sort 264 bytes of input, and avoided further overflow checks.|$|R
50|$|Nodes {{are placed}} <b>on</b> a <b>stack</b> {{in the order}} in which they are visited. When the depth-first search recursively visits a node v and its descendants, those nodes are not all {{necessarily}} popped from the stack when this recursive call returns. The crucial invariant property is that a node remains <b>on</b> the <b>stack</b> after it has been visited if and only if there exists a path in the input graph from it to some node earlier <b>on</b> the <b>stack.</b>|$|R
40|$|In {{this paper}} we work out some basic results {{concerning}} heterotic string compactifications <b>on</b> <b>stacks</b> and, in particular, gerbes. A heterotic string compactification on a gerbe {{can be understood}} as, simultaneously, both a compactification on a space with a restriction on nonperturbative sectors, and also, a gauge theory in which a subgroup of the gauge group acts trivially on the massless matter. Gerbes admit more bundles than corresponding spaces, which suggests they are potentially a rich playground for heterotic string compactifications. After we give a general characterization of heterotic strings <b>on</b> <b>stacks,</b> we specialize to gerbes, and consider three different classes of `building blocks' of gerbe compactifications. We argue that heterotic string compactifications on one class is equivalent to compactification of the same heterotic string on a disjoint union of spaces, compactification on another class is dual to compactifications of other heterotic strings on spaces, and compactification on the third class is not perturbatively consistent, {{so that we do}} not in fact recover a broad array of new heterotic compactifications, just combinations of existing ones. In appendices we explain how to compute massless spectra of heterotic strings <b>on</b> <b>stacks,</b> derive some new necessary conditions for a heterotic string <b>on</b> a <b>stack</b> or orbifold to be well-defined, and also review some basic properties of bundles on gerbes. Comment: 72 pages, LaTeX; v 2 : typos fixed, references added; v 3 : updated appendi...|$|R
50|$|From 2008 to 2014, Atwood and Spolsky {{published}} a weekly podcast covering the progress <b>on</b> <b>Stack</b> Exchange {{and a wide}} range of software development issues. Jeff Atwood was also a keynote presenter at the 2008 Canadian University Software Engineering Conference.|$|E
50|$|In C++, when {{constructor}} is invoked without new {{the objects}} are created <b>on</b> <b>stack.</b> When objects are created using new they are created on heap. They must be deleted implicitly by a destructor or explicitly by {{a call to}} operator delete.|$|E
5000|$|DLI PHA Save Accumulator <b>on</b> <b>stack</b> LDA #$9C Load {{light blue}} (color $9, {{luminance}} $C) STA WSYNC Wait to sync {{to the end}} of the scanline [...] STA COLBK Set the background [...] PLA Restore Accumulator from stack RTI The end.|$|E
40|$|A new {{alignment}} {{layer is}} developed. This alignment layer {{is capable of}} generating arbitrary pretilt and azimuth angles for the liquid crystal. It is based <b>on</b> <b>stacking</b> both photo-aligned polymer and rubbed polyimide together. The alignment produced is robust. Moreover, the processing window is also maximize...|$|R
40|$|A {{flexible}} {{computer architecture}} based <b>on</b> <b>stacked</b> interchangeable modules is {{ideally suited to}} implementation using stacked multichip modules. Its use of all sides of a module stack allows simple, single-bussed modules, together with a gateway module, to be easily configured {{into a variety of}} more complicated architectures...|$|R
50|$|Winokur married Judah Miller, who was {{a writer}} <b>on</b> <b>Stacked,</b> <b>on</b> October 7, 2006. In March 2008, the couple {{announced}} that they were expecting their first child, a boy to be named Zev, via a surrogate mother and that the pregnancy was five months along. Zev Isaac Miller was born July 22, 2008, weighing in at 8 pounds 7 ounces and measured 21 inches long. Winokur and Miller helped deliver their son.|$|R
