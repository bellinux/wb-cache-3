7|46|Public
500|$|The firm {{launched}} its Pure Alpha fund {{and began to}} market portable alpha investment strategies in 1991. The Pure Alpha fund did well during the market's downturn of 2000 to 2003 and, as hedge funds became more popular, the company expanded its assets through its connections with various underfunded pension funds, {{some of which were}} already clients. [...] In 1992 the firm introduced its global bond <b>overlay</b> <b>program.</b> In 1995, company executives participated in the discussions at the U.S. Treasury [...] and advised federal government on the development of inflation-indexed bonds.|$|E
50|$|Constructing an <b>overlay</b> <b>program</b> {{involves}} manually dividing {{a program}} into self-contained object code blocks called overlays {{laid out in}} a tree structure. Sibling segments, those at the same depth level, share the same memory, called overlay region or destination region. An overlay manager, either part of the operating system or part of the <b>overlay</b> <b>program,</b> loads the required overlay from external memory into its destination region when it is needed. Often linkers provide support for overlays.|$|E
5000|$|In the BASIC {{programming}} language, [...] is used {{to start}} program execution from direct mode, or to start a <b>overlay</b> <b>program</b> from a loader program.|$|E
25|$|DOS {{is not a}} {{multitasking}} operating system, but {{replacing the}} previous executable image has a great merit there due to harsh primary memory limitations and lack of virtual memory. The same API is used for <b>overlaying</b> <b>programs</b> in DOS and it has effects similar to ones on POSIX systems.|$|R
40|$|The B 01 {{version of}} the United Subsonic Supersonic Aerodynamic Analysis program {{is the result of}} {{numerous}} modifications and additions made to the B 00 version. These modifications and additions affect the program input, its computational options, the code readability, and the overlay structure. The following are described: (1) the revised input; (2) the plotting <b>overlay</b> <b>programs</b> which were also modified, and their associated subroutines, (3) the auxillary files used by the program, the revised output data; and (4) the <b>program</b> <b>overlay</b> structure...|$|R
40|$|A {{description}} is given of the Interactive Astronomical Data Analysis Facility (IADAF) which performs interactive analysis of astronomical data for resident and visiting scientists. The facilities include a Grant measuring engine, a PDS 1010 A microdensitometer, a COMTAL image display {{system and a}} PDP 11 / 40 computer system. Both hardware and software systems are examined, including a description of thirteen <b>overlay</b> <b>programs.</b> Some uses of the IADAF are indicated...|$|R
5000|$|The {{following}} example {{shows the}} control statements that instruct the OS/360 Linkage Editor to link an <b>overlay</b> <b>program,</b> indented to show structure (segment names are arbitrary): ...|$|E
50|$|The {{purpose of}} an active {{currency}} <b>overlay</b> <b>program</b> is to vary currency hedge ratios over time depending upon the macroeconomic and financial market circumstances prevailing at any time. It will enable the hedge ratio to be increased in anticipation of periods of base currency appreciation and reduced in anticipation of base currency decline. The dynamism afforded by this approach can provide substantial added value by adjusting portfolio hedge ratios (and cross hedges) in accordance with prevailing financial market and macro-economic conditions.|$|E
5000|$|The firm {{launched}} its Pure Alpha fund {{and began to}} market portable alpha investment strategies in 1991. The Pure Alpha fund did well during the market's downturn of 2000 to 2003 and, as hedge funds became more popular, the company expanded its assets through its connections with various underfunded pension funds, {{some of which were}} already clients. [...] In 1992, the firm introduced its global bond <b>overlay</b> <b>program.</b> In 1995, company executives participated in the discussions at the U.S. Treasury [...] and advised federal government on the development of inflation-indexed bonds.|$|E
50|$|The MIMIC {{software}} package, {{written as}} FORTRAN <b>overlay</b> <b>programs,</b> executes input {{statements of the}} mathematical model in six consecutive passes. Simulation programs written in MIMIC are compiled rather than interpreted. The core of the simulation package is a variable step numerical integrator of fourth-order Runge-Kutta method. Many useful functions related to electrical circuit elements exist besides some mathematical functions found in most scientific programming languages. There {{is no need to}} sort the statements in order of dependencies of the variables, since MIMIC does it internally.|$|R
40|$|Virtual {{memory was}} {{conceived}} {{as a way to}} automate <b>overlaying</b> of <b>program</b> segments. Modern computers have very large main memories, but need automatic solutions to the relocation and protection problems. Virtual memory serves this need as well and is thus useful in computers of all sizes. The history of the idea is traced, showing how it has become a widespread, little noticed feature of computers today...|$|R
50|$|The {{advantage}} of a 720 × 480i overscanned computer was an easy interface with interlaced TV production, leading {{to the development of}} Newtek's Video Toaster. This device allowed Amigas to be used for CGI creation in various news departments (example: weather <b>overlays),</b> drama <b>programs</b> such as NBC's seaQuest, WB's Babylon 5, and early computer-generated animation by Disney for The Little Mermaid, Beauty and the Beast, and Aladdin.|$|R
5000|$|He {{began his}} {{investment}} management {{career at the}} University of Southern California in 1985 where he was Assistant Treasurer of Investments. In 1988, he joined Geewax, Terker & Company as a portfolio manager in 1988, where he co-managed the firm’s institutional accounts and managed equity short selling for the firm’s hedge fund assets. While at GT&C, he designed an option <b>overlay</b> <b>program</b> for its institutional accounts. He then worked at Hellman, Jordan Investment Management Company as a senior vice-president/portfolio manager, and had lead responsibility for $500 million in institutional assets. [...] There, he also participated {{in the management of}} $150 million in hedge fund assets. [...] Daftary started his own investment firm in 1996, DG Capital Management, of which he is president and CEO ...|$|E
5000|$|One {{way these}} {{images can be}} {{captured}} is {{to turn off the}} hardware overlay. Because many computers have no hardware <b>overlay,</b> most <b>programs</b> are built to work without it, just a little slower. In Windows XP, this is disabled by opening the Display Properties menu, clicking on the [...] "Settings" [...] tab, clicking, [...] "Advanced", [...] "Troubleshoot", and moving the Hardware Acceleration Slider to [...] "None." ...|$|R
40|$|Abstract—Previous {{performance}} evaluation of range image segmentation algorithms has depended on manual tuning of algorithm parameters, and has lacked {{a basis for}} {{a test of the}} significance of differences between algorithms. We present an automated framework for evaluating the performance of range image segmentation algorithms. Automated tuning of algorithm parameters in this framework results in performance as good as that previously obtained with careful manual tuning by the algorithm developers. Use of multiple training and test sets of images provides the basis for a test of the significance of performance differences between algorithms. The framework implementation includes range images, ground truth <b>overlays,</b> <b>program</b> source code, and shell scripts. This framework should a) make it possible to objectively and reliably compare the performance of range image segmentation algorithms; b) allow informed experimental feedback for the design of improved segmentation algorithms. The framework is demonstrated using range images, but in principle it could be used to evaluate region segmentation algorithms for any type of image. Index Terms—Performance evaluation, range image segmentation, region segmentation. I...|$|R
40|$|Programming {{information}} for the RESIST program for the dynamic and thermal stress analysis {{of the space shuttle}} surface insulation is presented. The overall flow chart of the <b>program,</b> <b>overlay</b> chart, data set allocation, and subprogram calling sequence are given along with {{a brief description of the}} individual subprograms and typical subprogram output...|$|R
5000|$|Still, {{overlays}} remain {{useful in}} embedded systems. [...] Some low-cost processors used in embedded systems {{do not provide}} a memory management unit (MMU). In addition many embedded systems are real-time systems and overlays provide more determinate response-time than paging. For example, the Space Shuttle Primary Avionics System Software (PASS) uses <b>programmed</b> <b>overlays.</b>|$|R
50|$|From an {{engineering}} standpoint, C-Net DS2 was remarkable {{in its use}} of Machine language modules, early multitasking technology, relocatable code, and modular <b>program</b> <b>overlays.</b> Although the user experience was entirely text-based and non-graphical, fast performance could be attained {{through the use of}} memory expansion modules, IEEE-488 interface hard drives, and modem speeds including the mid-1980s state of the art 19,200 bps.|$|R
50|$|In {{contrast}} to a hardware vision mixer, a software vision mixer allows for {{a larger number of}} channels, connection types, and transition effects, and allows for greater flexibility of computer-based content integration, text and graphics <b>overlay,</b> and media <b>programming.</b> Another difference between software and hardware vision mixers is that software mixers are limited by the computer's performance. Software vision mixers are generally less expensive than hardware vision mixers.|$|R
50|$|Tiled {{printing}} is {{a method}} that computer programs use to enable users to print images larger than a standard page, popularized by a program called The Rasterbator. A tiled printing <b>program</b> <b>overlays</b> a grid on the printed image in which each cell (or tile) {{is the size of}} a printed page and then prints each tile. A person can then arrange the tiles to reconstruct the full image.|$|R
50|$|Programming of this {{minicomputer}} was via assembler language. It was {{not object}} code compatible with anything else {{and so had}} limited tool support. Imlac eventually added a self-hosted Fortran compiler (using an interpreter?) with hour-long compiles due to the cramped memory. Some PDS models had an optional IBM 2310 cartridge disk drive or 8-inch floppy drive. These ran a rudimentary disk OS supporting <b>program</b> <b>overlays.</b> The disks were dropped from later products.|$|R
5000|$|In {{a general}} {{computing}} sense, overlaying means [...] "the process of transferring {{a block of}} program code or other data into internal memory, replacing what is already stored". <b>Overlaying</b> is a <b>programming</b> method that allows programs to be larger than the computer's main memory. An embedded system would normally use overlays because of the limitation of physical memory, which is internal memory for a system-on-chip, {{and the lack of}} virtual memory facilities.|$|R
25|$|Meld is a {{declarative}} language, a {{logic programming}} language originally designed for <b>programming</b> <b>overlay</b> networks. By using logic programming, the code for an ensemble of robots {{can be written}} from a global perspective, enabling the programmer {{to concentrate on the}} overall performance of the claytronics matrix rather than writing individual instructions for every one of the thousands to millions of catoms in the ensemble. This dramatically simplifies the thought process for programming the movement of a claytronics matrix.|$|R
5000|$|The {{original}} version relied on [...]NET Framework, which ran only on Microsoft Windows. The more recent Java version, World Wind Java, is cross platform, a {{software development kit}} (SDK) aimed at developers and, unlike the old [...]NET version, not a standalone virtual globe application {{in the style of}} Google Earth. The SDK includes a suite of basic demos, available at goworldwind.org. The World Wind Java version was awarded NASA Software of the Year in November 2009. The <b>program</b> <b>overlays</b> NASA and USGS satellite imagery, aerial photography, topographic maps, Keyhole Markup Language (KML) and Collada files.|$|R
40|$|A new and {{innovative}} mechanistically based pavement overlay design method is described tha that considers the most predominant type of overlay distress {{observed in the}} field: Reflective cracking above old cracks in the underlying pavement surface. Both dense-graded hot mix asphalt and gap-graded asphalt rubber (wet process) mixes were studied, in the laboratory and in the field, to derive the necessary mechanistic relationships and statistically based equations. The models proposed {{are based on a}} finite element model that closely approximates actual field phenomena. Many field test sections, mainly in Arizona, were studied {{during the course of the}} research. Other HMA mixes used for overlays may also be calibrated and used through the proposed method. However, the relevant mix properties of any additional materials or environmental zones must first be determined. The two mix types studied are mainly used in the desert southwest region of Arizona and California. The <b>overlay</b> design <b>program</b> is available from the Rubber Pavements Association or Arizona Department of Transportation in the form of an Excel spreadsheet with an easy-to-use visual basic computer program (macro) ...|$|R
40|$|International audienceIt {{is a fact}} of {{life that}} {{sequential}} programs are often fragmented. Consequently, fragmented program behaviours are frequently found. We consider this phenomenon in the setting of thread algebra. We extend basic thread algebra with poly-threading, the barest mechanism for sequencing of threads that are taken for program fragment behaviours. This mechanism is the counterpart of <b>program</b> <b>overlaying</b> at the level of program behaviours. We relate the resulting theory to the process theory known as ACP and use it to describe analytic execution architectures suited for fragmented programs. We also consider the case where the steps of fragmented program behaviours are interleaved in the ways of non-distributed and distributed multi-threading...|$|R
40|$|AbstractIf {{visualization}} is {{more effective}} when accompanied by narration, why not superimpose visualization on narration? This might result in better transfer of learning. We will present a general framework for such superimposed visualization, called overlay visualization. The objectives {{for the design of}} our framework are 1) to separate the application from the visualization; and 2) to separate the specification from the rendering. We will describe a few applications of <b>overlay</b> visualization for <b>programming</b> and provide examples from our implementation of overlay visualization for software tutors called problets. The advantages of overlay visualization include: less cognitive load on the learner, and automatic support for both path and state visualization...|$|R
40|$|It {{is a fact}} of {{life that}} {{sequential}} programs are often fragmented. Consequently, fragmented program behaviours are frequently found. We consider this phenomenon in the setting of thread algebra. We extend basic thread algebra with poly-threading, the barest mechanism for sequencing of threads that are taken for program fragment behaviours. This mechanism is the counterpart of <b>program</b> <b>overlaying</b> at the level of program behaviours. We relate the resulting theory to the process theory known as ACP and use it to describe analytic execution architectures suited for fragmented programs. We also consider the case where the steps of fragmented program behaviours are interleaved in the ways of non-distributed and distributed multi-threading...|$|R
5000|$|This {{process works}} by {{depositing}} a simple, two-instruction program in memory and executing it. The first instruction commands the disk controller to begin reading the disk {{from the current}} disk address into the current memory address. The second instruction is a JMP instruction that jumps to itself endlessly. When [...] "Clear" [...] is pressed, the disk controller's current disk address is set to sector 0 and its current memory address is set to memory location 0000. When the read is commanded, the program stored in disk sector 0 <b>overlays</b> the bootstrap <b>program</b> and, once the JMP instruction is overlaid, the disk program takes control of the machine.|$|R
40|$|Information {{needed to}} run a {{computer}} program for the calculation of the potential flow about arbitrary three dimensional lifting configurations is presented. The program contains a geometry package which greatly reduces the task of preparing the input data. Starting from a very sparse set of coordinate data, the program automatically augments and redistributes the coordinates, calculates curves of intersection between components, and redistributes coordinates in the regions adjacent to the intersection curves in a suitable manner {{for use in the}} potential flow calculations. A brief summary of the program capabilities and options is given, as well as detailed instructions for the data input, a suggested structure for the <b>program</b> <b>overlay,</b> and the output for two test cases...|$|R
40|$|Abstract—This paper {{presents}} Meld, a programming lan-guage for modular robots, i. e., for independently executing robots where inter-robot {{communication is}} limited to immediate neighbors. Meld is a declarative language, based on P 2, a logic-programming language originally designed for <b>programming</b> <b>overlay</b> networks. By using logic programming, the code for an ensemble of robots can be written from a global perspective, {{as opposed to a}} large collection of independent robot views. This greatly simplifies the thought process needed for programming large ensembles. Initial experience shows that this also leads to a considerable reduction in code size and complexity. An initial implementation of Meld has been completed and has been used to demonstrate its effectiveness in the Claytronics simulator. Early results indicate that Meld programs are con-siderably more concise (more than 20 x shorter) than programs written in C++, while running nearly as efficiently. I...|$|R
40|$|Traditional {{lines of}} supply have, over time, {{developed}} natural barriers that reduced the supply network efficiency {{and the opportunity}} to develop a win-win environment between corporations and community stakeholders. This situation originates from the early stages of a new program integration regardless of stakeholders intent. As such, early program integration is crucial for having any meaningful improvement away from traditional arms length supply relationships. The performance of organisations within the supply network is intertwined. For successful integration, information will need to flow efficiently throughout the supply network and be accessible to community stakeholders who represent a node within the supply network. Having timely and accurate information will help supply networks minimise costs and concentrate on being customer-centric. However, this creates pressure on supply nodes to increase collaboration that breaks down the natural barriers typical to many networks. However, most supply networks rely on legacy systems that jeopardise the networks ability to innovate and deliver early and therefore successful program integration. To exacerbate the problem, most community and corporate departments become highly involved in day-to-day operational needs that limit program success. Typically most models of early supplier engagement are coupled with standard requests for tender processes that do not address potential risks inherent with what has become the outsourcing of strategic intent. By drawing on current case study materials, this paper discusses the inherent risk to organisations who continue to attempt <b>overlaying</b> integration <b>programs</b> into classical hierarchical structures and delivers a novel decision framework for maintaining engagement between corporations and community stakeholders...|$|R
500|$|Moving {{away from}} its predecessor's PowerPC-based {{architecture}}, Xbox One marks a shift back to the x86 architecture used in the original Xbox; it features an AMD Accelerated Processing Unit (APU) built around the x86-64 instruction set. Xbox One's controller was redesigned over the Xbox 360's, with a redesigned body, D-pad and triggers capable of delivering directional haptic feedback. The console places an increased emphasis on cloud computing, {{as well as social}} networking features, and the ability to record and share video clips or screenshots from gameplay, or live-stream directly to streaming services such as Mixer and Twitch. Games can also be played off-console via a local area network on supported Windows 10 devices. The console can play Blu-ray Disc, and <b>overlay</b> live television <b>programming</b> from an existing set-top box or a digital tuner for digital terrestrial television with an enhanced program guide. The console optionally included a redesigned Kinect sensor, marketed as the [...] "Kinect 2.0", providing improved motion tracking and voice recognition for use in its graphical user interface (GUI) and games.|$|R
50|$|All CADO systems up to {{that point}} had the system and CADOL {{interpreter}} reside in EPROM, so as soon as power was applied it read track 0 sector 0 of the diskette and began executing CADOL code. The IL codes for the interpreter written by Jim Ferguson looked similar to Tannenbaum's optimized IL codes from his empirical study. The language was extended by Richard Sexton, who added Pascal/C like syntax and 65 KB instead of 256 byte <b>program</b> <b>overlay</b> sizes. Previous to that, CADOL worked in programs no longer than 256 bytes of IL code long and when the programmers had code that hit about the 200-byte mark they would have to issue a LOAD statement to load the next 256 bytes of CADOL IL codes. At some point when a fair number of applications had been written, the loading of overlays was made transparent by Sexton's modifications to the interpreter up to an apparent program of 65 KB. Dan Lanham rewrote the compiler. This was all done in Intel 8085 assembly.|$|R
40|$|In {{this paper}} we motivate a Context Fusion Network (CFN), an {{infrastructure}} model that allows contextaware applications to select distributed data sources and compose them with customized data-fusion operators into a directed acyclic information fusion graph. Such a graph represents how an application computes high-level understandings of its execution context from low-level sensory data. Multiple graphs by different applications inter-connect {{with each other}} to form a global graph. A key advantage of a CFN is re-usability, both at code-level and instance-level, facilitated by operator composition. We designed and implemented a distributed CFN system, Solar, which maps the logical operator graph representation onto a set of overlay hosts. In particular, Solar meets the challenges inherent to heterogeneous and volatile ubicomp environments. By abstracting most complexities into the infrastructure, Solar facilitates both the development and deployment of context-aware applications. We present the operator composition model, basic services of the Solar <b>overlay</b> network, and <b>programming</b> support for the developers. We also discuss some applications built with Solar and the lessons we learned from our experience. ...|$|R
5000|$|Moving {{away from}} its predecessor's PowerPC-based {{architecture}}, Xbox One marks a shift back to the x86 architecture used in the original Xbox; it features an AMD Accelerated Processing Unit (APU) built around the x86-64 instruction set. Xbox One's controller was redesigned over the Xbox 360's, with a redesigned body, D-pad and triggers capable of delivering directional haptic feedback. The console places an increased emphasis on cloud computing, {{as well as social}} networking features, and the ability to record and share video clips or screenshots from gameplay, or live-stream directly to streaming services such as Mixer and Twitch. Games can also be played off-console via a local area network on supported Windows 10 devices. The console can play Blu-ray Disc, and <b>overlay</b> live television <b>programming</b> from an existing set-top box or a digital tuner for digital terrestrial television with an enhanced program guide. The console optionally included a redesigned Kinect sensor, marketed as the [...] "Kinect 2.0", providing improved motion tracking and voice recognition for use in its graphical user interface (GUI) and games.|$|R
