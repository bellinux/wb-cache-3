10000|10000|Public
5|$|When Lichtenstein had {{his first}} solo show at the Leo Castelli Gallery in February 1962, it sold out before opening. Golf Ball {{was one of the}} works that Lichtenstein exhibited. Later, Lichtenstein {{included}} Golf Ball in Still Life with Goldfish Bowl, 1972, and Go for Baroque, 1979. The painting exemplifies the novel superimposition <b>of</b> <b>abstraction</b> and figuration. The work also represents abstraction as a result of elimination of three-dimensionality, chiaroscuro and a landscape context.|$|E
25|$|In {{addition}} to its familiar geometric structure, with isomorphisms that are isometries {{with respect to the}} usual inner product, the plane may be viewed at various other levels <b>of</b> <b>abstraction.</b> Each level <b>of</b> <b>abstraction</b> corresponds to a specific category.|$|E
25|$|Process {{knowledge}} management: Integrate {{the different}} business processes levels <b>of</b> <b>abstraction.</b>|$|E
40|$|Abstract. We draw {{an analogy}} between biology and {{computer}} hardware systems and {{argue for the}} need of a tower <b>of</b> <b>abstractions</b> to tame complexity of living systems. Much like in hardware design, where engineers use a tower <b>of</b> <b>abstractions</b> to produce the most complex man-made systems, we stress that in reverse engineering of biological systems; only by using a tower <b>of</b> <b>abstractions</b> {{we would be able to}} understand the “program of life”. ...|$|R
5000|$|... {{expanding}} the range <b>of</b> <b>abstractions</b> {{available to the}} developers.|$|R
5000|$|... {{time series}} <b>of</b> <b>abstractions</b> and {{shortages}} for each demand node ...|$|R
25|$|The {{tendency}} towards abstraction in art {{corresponded with}} abstraction in architecture. Publication of Concerning the Spiritual in Art in 1912 by Wassily Kandinsky, his first advocacy <b>of</b> <b>abstraction</b> while still {{involved in the}} Blau Reiter phaze, marks a beginning <b>of</b> <b>abstraction</b> in expressionism and abstraction in expressionist architecture. The conception of the Einstein Tower by Erich Mendelson was not far behind Kandinsky, in advancing abstraction in architecture. By the publication of Kandinsky's Point and Line to Plane in 1926 a rigorous and more geometric form <b>of</b> <b>abstraction</b> emerged, and Kandinsky's work took on clearer and drafted lines. The trends in architecture are not dissimilar, as the Bauhaus was gaining attention and expressionist architecture was giving way to the geometric abstractions of modern architecture.|$|E
25|$|Zhang, J., Silvescu, A., and Honavar, V. (2002). Ontology-Driven Induction of Decision Trees at Multiple Levels <b>of</b> <b>Abstraction.</b> In: Proceedings of Symposium on Abstraction, Reformulation, and Approximation. Berlin: Springer-Verlag.|$|E
25|$|Bui, N. and Honavar, V. (2013). On the Utility <b>of</b> <b>Abstraction</b> in Labeling Actors in Social Networks. In: The 2013 IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining.|$|E
2500|$|A {{sequence}} <b>of</b> <b>abstractions</b> is contracted: λx.λy.λz.N is abbreviated as λxyz.N ...|$|R
40|$|Model....................... 121 A. 3 Traffic Light Control System.................... 121 B Correctness <b>of</b> <b>Abstractions</b> 123 B. 1 Definition <b>of</b> the <b>Abstraction</b> Function............... 123 B. 2 Homomorphosm Proof Obligation................. 124 B. 3 Strengthening Proof Obligation................... 126 6 Chapter...|$|R
40|$|In {{this paper}} {{we present a}} {{semantic}} theory <b>of</b> <b>abstractions</b> based on viewing abstractions as interpretations between theories. This theory captures important aspects <b>of</b> <b>abstractions</b> not captured in the theory <b>of</b> <b>abstractions</b> presented by Giunchiglia and Walsh. Instead <b>of</b> viewing <b>abstractions</b> as syntactic mappings, we view abstractions as a two step process: the intended domain model is first abstracted and then a set of (abstract) formulas is constructed to capture the abstracted domain model. Viewing and justifying abstractions as model level transformations is both natural and insightful. We provide a precise characterization of the abstract theory that exactly implements the intended abstraction, and show that this theory, while being axiomatizable, is not always finitely axiomatizable. A simple corollary of the latter result disproves a conjecture made by Tenenberg that if a theory is finitely axiomatizable, then predicate <b>abstraction</b> <b>of</b> that theory leads to a finitely axiomatizable theory...|$|R
25|$|Choucair's {{work has}} been {{considered}} {{as one of the}} best examples of the spirit <b>of</b> <b>abstraction</b> characteristic of Arabic visual art, completely disconnected from the observation of nature and inspired by Arabic geometric art.|$|E
25|$|The kernel often {{interfaces}} {{with the}} process manager. The level <b>of</b> <b>abstraction</b> is such that the kernel never calls into the process manager, only {{the other way around}} (save for a handful of corner cases, still never to the point of a functional dependence).|$|E
25|$|In the {{opposite}} direction <b>of</b> <b>abstraction,</b> we may apply a compatible field structure to the geometric plane, giving rise to the complex plane and the major area of complex analysis. The complex field has only two isomorphisms that leave the real line fixed, the identity and conjugation.|$|E
5000|$|... "Evolutionary epistemology" [...] {{can also}} {{refer to the}} {{opposite}} of (onto)genetic epistemology, namely phylogenetic epistemology as the historical discovery and reification <b>of</b> <b>abstractions</b> that necessarily precedes the learning <b>of</b> such <b>abstractions</b> by individuals. Piaget dismissed this possibility, stating ...|$|R
5000|$|Greenspun's Tenth Rule for an aphorism {{about an}} (the?) optimum {{point in the}} space <b>of</b> <b>abstractions</b> ...|$|R
40|$|Abstract. Current {{symbolic}} {{techniques for}} the automated reasoning over unde-cidable hybrid automata, force one {{to choose between}} the refinement of either an overapproximation or an underapproximation of the set of reachable states. When the analysis of branching time temporal properties is considered, the literature has developed a number <b>of</b> <b>abstractions</b> techniques based on the simulation preorder, that allow the preservation of only true universally quantified formulæ. This paper suggests a way to surmount these difficulties by defining a succes-sion <b>of</b> <b>abstractions</b> <b>of</b> hybrid automata, which not only (1) allow the detection and the refinement of both over- and under-approximated reachable sets symmet-rically, but also (2) preserves the full set of branching time temporal properties (when interpreted on a dense time domain). Moreover, our approach imposes on the corresponding set <b>of</b> <b>abstractions</b> a desirable monotonicity property with re-spect to the set of model-checked formulaæ. ...|$|R
25|$|Image-understanding systems (IUS) {{include three}} levels <b>of</b> <b>abstraction</b> as follows: Low level {{includes}} image primitives such as edges, texture elements, or regions; intermediate level includes boundaries, surfaces and volumes; and high level includes objects, scenes, or events. Many of these requirements are really topics for further research.|$|E
25|$|Reactions to Art Nouveau impelled {{partly by}} moral yearnings for a sterner and more unadorned style {{and in part}} by rationalist ideas {{requiring}} practical justification for formal effects. Art Nouveau had however, opened up a language <b>of</b> <b>abstraction</b> and pointed to {{lessons to be learned}} from nature.|$|E
25|$|The {{computational}} level addresses, at a {{high level}} <b>of</b> <b>abstraction,</b> the problems that the visual system must overcome. The algorithmic level attempts to identify the strategy that may be used to solve these problems. Finally, the implementational level attempts to explain how solutions to these problems are realized in neural circuitry.|$|E
40|$|Abstract. The {{design of}} {{inheritance}} and encapsulation in SELF, an object-oriented language based on prototypes, results from understanding that inheritance allows {{parents to be}} shared parts of their children. The programmer resolves ambiguities arising from multiple inheritance by prioritizing an object’s parents. Unifying unordered and ordered multiple inheritance supports differential programming <b>of</b> <b>abstractions</b> and methods, combination <b>of</b> unrelated <b>abstractions,</b> unequal combination <b>of</b> <b>abstractions,</b> and mixins. In SELF, a private slot may be accessed if the sending method is a shared part of the receiver, allowing privileged communication between related objects. Thus, classless SELF enjoys the benefits of class-based encapsulation. ...|$|R
5000|$|... torchnet - Torch {{framework}} {{providing a}} set <b>of</b> <b>abstractions</b> aiming at encouraging code re-use {{as well as}} encouraging modular programming ...|$|R
50|$|The {{application}} of this design principle requires looking into four different types <b>of</b> <b>abstractions</b> that {{could be applied to}} a service.|$|R
25|$|The Italian poet Filippo Tommaso Marinetti {{published}} the Manifesto of Futurism in 1909, which later inspired {{artists such as}} Carlo Carra in Painting of Sounds, Noises and Smells and Umberto Boccioni Train in Motion, 1911, to a further stage <b>of</b> <b>abstraction</b> that would, along with Cubism, profoundly influenced art movements throughout Europe.|$|E
25|$|Some of Feyerabend's work {{concerns}} {{the way in}} which people's perception of reality is influenced by various rules. In his last book, unfinished when he died, he talks of how our sense of reality is shaped and limited. Conquest of Abundance: A Tale <b>of</b> <b>Abstraction</b> versus the Richness of Being bemoans the propensity we have of institutionalizing these limitations.|$|E
25|$|Consequently, {{throughout}} the history of human culture, people have become dissatisfied with language's ability to express reality and as a result have developed new modes of representation. It is necessary to construct new ways of seeing reality, as people only know reality through representation. From this arises the contrasting and alternate theories and representational modes <b>of</b> <b>abstraction,</b> realism and modernism, to name a few.|$|E
40|$|The use <b>of</b> {{hierarchical}} <b>abstractions</b> allows processing at {{an abstract}} level {{so that the}} complexity of low-level processing can be avoided or delayed. The idea <b>of</b> hierarchical <b>abstractions</b> is a simple but powerful one in intelligent engineering systems. It is commonly used {{in a wide range}} of applications, such as those for design, planning, learning, and natural language processing. It is also ubiquitous in many general paradigms for intelligent systems, such as heuristic search and blackboard architectures. Despite its usefulness and widespread use, the reduction in complexity achieved through hierarchical abstractions has been only informally understood. This can lead to suboptimal designs <b>of</b> hierarchical <b>abstractions.</b> In the present paper, we derive formulas to show how hierarchical abstractions reduce complexity in intelligent engineering systems. Formalizing the costs and benefits <b>of</b> hierarchical <b>abstractions</b> also allows us to see exactly when what kinds <b>of</b> <b>abstractions</b> are useful. We illustrate the practicality of this approach with IPDOS, a system for designing offshore structures. With an improved understanding of the power <b>of</b> hierarchical <b>abstractions,</b> we hope to stimulate even greater use <b>of</b> such <b>abstractions</b> in computing for engineering. link_to_subscribed_fulltex...|$|R
40|$|Although {{conventional}} compilers {{implement a}} wide range of optimization techniques, they frequently miss opportunities to optimize the use <b>of</b> <b>abstractions,</b> largely because they are not designed to recognize and use the relevant semantic information about such abstractions. In this position paper, we propose a set of annotations to help communicate high-level semantic information about abstractions to the compiler, thereby enabling the large body of traditional compiler optimizations to be applied to the use <b>of</b> those <b>abstractions.</b> Our annotations explicitly describe properties <b>of</b> <b>abstractions</b> that are needed to guarantee the applicability and profitability of a broad variety of such optimizations, including memoization, reordering, data layout transformations, and inlining and specialization. ...|$|R
50|$|In 2011, Smith has {{executed}} a suite <b>of</b> <b>abstractions</b> he calls Rain Paintings, which he creates by spraying fire extinguishers filled with paint.|$|R
25|$|Despite {{the level}} <b>of</b> <b>abstraction,</b> derived {{categories}} became accepted {{over the following}} decades, especially as a convenient setting for sheaf cohomology. Perhaps the biggest advance was the formulation of the Riemann–Hilbert correspondence in dimensions greater than 1 in derived terms, around 1980. The Sato school adopted the language of derived categories, and the subsequent history of D-modules was of a theory expressed in those terms.|$|E
25|$|After the {{introduction}} of 'Bindu' (a point or the source of energy), he added newer dimensions to his thematic oeuvre in the following decades, with the inclusion of themes around the Tribhuj (Triangle), which bolstered Indian concepts of space and time, {{as well as that}} of 'prakriti-purusha' (the female and the male energy), his transformation from an expressionist to a master <b>of</b> <b>abstraction</b> and profundity, was complete.|$|E
25|$|In the 1970s, David Marr {{developed}} a multi-level theory of vision, which analyzed {{the process of}} vision at different levels <b>of</b> <b>abstraction.</b> In order {{to focus on the}} understanding of specific problems in vision, he identified three levels of analysis: the computational, algorithmic and implementational levels. Many vision scientists, including Tomaso Poggio, have embraced these levels of analysis and employed them to further characterize vision from a computational perspective.|$|E
5000|$|Model: A system <b>of</b> <b>abstractions</b> that {{describes}} selected {{aspects of a}} domain {{and can be used}} to solve problems related to that domain; ...|$|R
40|$|This paper {{presents}} {{a method for}} incrementally computing success patterns of logic programs {{with respect to a}} class <b>of</b> <b>abstractions.</b> The method is specialised for computing success patterns for two families <b>of</b> <b>abstractions,</b> namely depth abstractions and stump abstractions. Equational unification algorithms and their correctness for these families <b>of</b> <b>abstractions</b> are also presented. Keywords: Success patterns; Abstract interpretation; Logic programs; Equational unification 1 Introduction Abstract interpretation is a methodology for program analysis. Program analyses are viewed as program execution over non-standard data domains. Cousot and Cousot laid solid foundations for abstract interpretation [4, 5]. Their idea is to define a collecting semantics for a program which associates each program point with the set of all program states that are possibly obtained when the execution reaches the point. Then an approximation to the collecting semantics is calculated by simulating over a non [...] ...|$|R
40|$|Symbolic {{controller}} synthesis {{offers the}} ability to design controllers enforcing a rich class of specifications such as those expressible in temporal logic. Despite the promise of symbolic controller synthesis and correct-by-design control software, this design methodology is not yet widely applicable due to the complexity <b>of</b> constructing finite-state <b>abstractions</b> for large continuous systems. In this letter, we investigate a compositional approach to the construction <b>of</b> <b>abstractions</b> by exploiting the cascading structure of partially feedback linearizable systems. We show how the linearized part and the zero dynamics can be independently abstracted and subsequently composed to obtain an <b>abstraction</b> <b>of</b> the original continuous system. We also illustrate through examples how this compositional approach significantly reduces the time required for construction <b>of</b> <b>abstractions...</b>|$|R
