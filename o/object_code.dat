719|722|Public
5|$|Apple's {{litigation}} over <b>object</b> <b>code</b> {{contributed to}} the development of contemporary copyright law because the company's <b>object</b> <b>code</b> cases brought different results in different courts, creating a conflict of laws that resulted in international litigation. In the 1980s, Apple litigated two copyright cases with central issues that included the question of whether <b>object</b> <b>code</b> (as contrasted with source code) of a computer program is subject to copyright laws. A third case in which Apple was not a party but that involved the Apple decisions followed in New Zealand. The specific cases were Computer Edge Pty. Ltd. v Apple Computer Inc. (1986, Australia) ("Computer Edge"), Apple Computer Inc. v Mackintosh Computers Ltd., (Canada, 1987) ("Apple v. Mackintosh"), and IBM v. Computer Imports Ltd. ("IBM v. Computer Imports"), (New Zealand, 1989).|$|E
5|$|In the Computer Edge case, the Australian court {{decided against}} the then-prevailing {{opinions}} in other courts (the U.K., Canada, South Africa, and the U.S.) and ruled <b>object</b> <b>code</b> was not copyrightable, while the Supreme Court of Canada in Apple v. Mackintosh reversed its earlier decisions and ruled that because <b>object</b> <b>code</b> was {{a translation of}} source code and embodied in a silicon chip, it was therefore a translation of an original literary work expressed in a material form and unauthorized reproduction of the <b>object</b> <b>code</b> was therefore an infringement of copyright. The Canadian court opined that programs within ROM silicon chips are protected under the Copyright Act of Canada and the conversion from the source code into <b>object</b> <b>code</b> {{is a form of}} translation. It further held that such translation does not include the expression of an idea in another form, but rather only applies to the expression of an idea in another language, and that a translation has a one-to-one correspondence between works that are expressed in two different languages.|$|E
5|$|In these {{conflict}} of laws cases, Apple met with conflicting international judicial opinions: an Australian court decision conflicted with a Canadian court decision on the copyrightability of <b>object</b> <b>code.</b> In IBM v. Computer Imports, the High Court of New Zealand then considered these prior decisions and sided with the Canadian decision in ruling that, although <b>object</b> <b>code</b> is not an original literary work in its own right, it is a reproduction of source code in material form and therefore an infringement of copyright takes place if it is copied without the authorization of the copyright owner. Such legal conflicts affected not only Apple, but all other software companies as well, and the conflicts remained unresolved until {{the creation of an}} international legal regime embodied in further changes to national copyright laws, which ultimately made <b>object</b> <b>code</b> subject to copyright law. These revisions of law in favor of making <b>object</b> <b>code</b> subject to copyright law are still controversial. The revisions also form the technical underpinnings (via the Digital Millennium Copyright Act (DMCA) and the Electronic Communications Privacy Act) for the legal notions of electronic privacy violation and computer trespass, as well as the further development of anti-hacking law-making such as the Patriot Act and the Convention on Cybercrime.|$|E
40|$|Video <b>object</b> <b>coding</b> {{is one of}} {{the most}} {{important}} functionalities proposed by MPEG 4. In this paper, we propose a new wavelet method to encode the texture of an arbitrarily shaped object, both for the still and for the moving object. The method uses the shape adaptive wavelet transform (SA-DWT) in MPEG 4 still <b>object</b> <b>coding,</b> but with a computationally more efficient lifting implementation. The transformed object coefficients are then quantized and entropy encoded with a partial bitplane embedded coder, which greatly improves the coding efficiency. We denote the coding algorithm as video object wavelet (VOW) coder. Experimental results show that VOW significantly outperforms MPEG 4 in still <b>object</b> <b>coding,</b> and achieves a comparable performance in video <b>object</b> <b>coding</b> in terms of PSNR. Moreover, the VOW decoded object looks better subjectively, with much less annoying blocking artifacts than that of MPEG 4. 1...|$|R
40|$|Video <b>object</b> <b>coding</b> {{is one of}} {{the most}} {{important}} functionalities proposed by MPEG 4. In this paper, we propose a new wavelet method to encode the texture of an arbitrarily shaped object, both for the still and for video object. The method uses the shape adaptive wavelet transform (SA-DWT) in MPEG 4 still <b>object</b> <b>coding,</b> but with a computationally more efficient lifting implementation...|$|R
40|$|Abstract. The compiled-typed NC system compiles NC program into <b>object</b> <b>codes</b> {{and sends}} them to slave computers. The <b>object</b> <b>codes</b> {{generated}} {{is a large}} amount of data. To ensure the data transmission fast and real-time, USB communication is adopted and researched in this paper. The design of USB driver program and communication program in the upper computer and slave computers is mainly introduced...|$|R
5|$|Apple v. Franklin {{established}} the fundamental basis of copyright of computer software, {{even if it}} was provided only as <b>object</b> <b>code</b> or in firmware. In 1982, Apple filed a lawsuit against Franklin Computer Corp., alleging that Franklin's ACE 100 personal computer used illegal copies of the Apple II's operating system and ROM. The case was decided in Franklin's favor but reversed by the Court of Appeals for the Third Circuit.|$|E
25|$|Philippe Kahn {{first saw}} an {{opportunity}} for Borland, his newly formed software company, {{in the field of}} programming tools. Historically, the vast majority of programmers saw their workflow in terms of the edit/compile/link cycle, with separate tools dedicated to each task. Programmers wrote source code using a text editor; the source code was then compiled into <b>object</b> <b>code</b> (often requiring multiple passes), and a linker combined <b>object</b> <b>code</b> with runtime libraries to produce an executable program.|$|E
25|$|A cross {{assembler}} (see also cross compiler) is an assembler that is {{run on a}} computer or operating system (the host system) of a different type from the system on which the resulting code is to run (the target system). Cross-assembling facilitates the development of programs for systems {{that do not have}} the resources to support software development, such as an embedded system. In such a case, the resulting <b>object</b> <b>code</b> must be transferred to the target system, either via read-only memory (ROM, EPROM, etc.) or a data link using an exact bit-by-bit copy of the <b>object</b> <b>code</b> or a text-based representation of that code, such as Motorola S-record or Intel HEX.|$|E
5000|$|MPEG-D (2007): MPEG audio technologies. (ISO/IEC 23003) (e.g., MPEG Surround, SAOC-Spatial Audio <b>Object</b> <b>Coding</b> and USAC-Unified Speech and Audio Coding) ...|$|R
5000|$|If the 8086 is {{to retain}} 8-bit <b>object</b> <b>codes</b> {{and hence the}} {{efficient}} memory use of the 8080, then it cannot guarantee that (16-bit) opcodes and data will lie on an even-odd byte address boundary. The first 8-bit opcode will shift the next 8-bit instruction to an odd byte or a 16-bit instruction to an odd-even byte boundary. By implementing the [...] signal and the extra logic needed, the 8086 has allows instructions to exist as 1-byte, 3-byte or any other odd byte <b>object</b> <b>codes.</b>|$|R
40|$|Attached is the Equipment and Vehicle Purchase Report for Fiscal Year 2008 as {{required}} by Iowa Code section 307. 47. The report is sorted by our accounting <b>object</b> <b>codes.</b> The <b>object</b> <b>codes</b> help you sort the equipment into general categories. The following list will help you understand the codes: 	Object		Description 701 	Self Propelled Vehicles 702 	Road Equipment & Trailers 703 	Large Office Furniture & Files 704 	Shop Tools & Small Equipment 705 	Engineer, Survey & Measuring Equipment 706 	Copiers, Fax & Communication Equipment 707 	Computers & Related Equipment...|$|R
25|$|In 1999, in {{an effort}} towards compatibility, several Unix system vendors agreed on SVR4's Executable and Linkable Format (ELF) as the {{standard}} for binary and <b>object</b> <b>code</b> files. The common format allows substantial binary compatibility among Unix systems operating on the same CPU architecture.|$|E
25|$|To give {{compiler}} vendors greater freedom, the C++ {{standards committee}} {{decided not to}} dictate the implementation of name mangling, exception handling, and other implementation-specific features. The downside of this decision is that <b>object</b> <b>code</b> produced by different compilers {{is expected to be}} incompatible. There were, however, attempts to standardize compilers for particular machines or operating systems (for example C++ ABI), though they seem to be largely abandoned now.|$|E
25|$|Even {{when the}} {{original}} client PXE firmware has been written by Intel and always provided at no cost as a linkable IA32 <b>object</b> <b>code</b> format module included in their Product Development Kit (PDK), the open source world has produced over the years non-standard derivative projects like gPXE/iPXE offering their own ROMs. While Intel based ROMs have always been rock solid implementing the client side of the PXE standard some people were willing to trade extra features for stability and PXE standard conformance.|$|E
50|$|The docstring for a Python <b>code</b> <b>object</b> (a module, class, or function) is {{the first}} {{statement}} of that <b>code</b> <b>object,</b> immediately following the definition (the 'def' or 'class' statement). The statement must be a bare string literal, not {{any other kind of}} expression. The docstring for the <b>code</b> <b>object</b> is available on that <b>code</b> <b>object's</b> '__doc__' attribute.|$|R
5000|$|... #Caption: The {{player can}} {{interact}} with any object in Hack 'n' Slash that possess a USB port (like the diamond-shaped pillars {{in the middle}} of the screen) to access the <b>object's</b> <b>code</b> and adjust its parameters to achieve various goals ...|$|R
40|$|The {{topic of}} Dialogue Enhancement and {{personalization}} of audio has recently received increased attention. Both hearing-impaired and normal-hearing audience benefit, for example, from {{the possibility of}} boosting the commentator speech to minimize listening effort, or to attenuate the speech in favor of sports stadium atmosphere {{in order to enhance}} the feeling of being there. In late 2014, the ISO/MPEG standardization group made available a new specification, Spatial Audio <b>Object</b> <b>Coding</b> for Dialogue Enhancement (SAOC-DE), which was closely derived from the well-known MPEG-D Spatial Audio <b>Object</b> <b>Coding</b> (SAOC). This paper describes the architecture and features of the new system. The envisioned applications will be discussed and the performance of the new technology is demonstrated in subjective listening tests...|$|R
25|$|An {{assembler}} program creates <b>object</b> <b>code</b> by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents. This representation typically includes an operation code ("opcode") {{as well as}} other control bits and data. The assembler also calculates constant expressions and resolves symbolic names for memory locations and other entities. The use of symbolic references is a key feature of assemblers, saving tedious calculations and manual address updates after program modifications. Most assemblers also include macro facilities for performing textual substitution – e.g., to generate common short sequences of instructions as inline, instead of called subroutines.|$|E
2500|$|Assembly directives, {{also called}} pseudo-opcodes, pseudo-operations or pseudo-ops, are {{commands}} given to an assembler [...] "directing it to perform operations other than assembling instructions.". Directives affect how the assembler operates and [...] "may affect the <b>object</b> <b>code,</b> the symbol table, the listing file, {{and the values}} of internal assembler parameters." [...] Sometimes the term pseudo-opcode is reserved for directives that generate <b>object</b> <b>code,</b> {{such as those that}} generate data.|$|E
2500|$|Compilers {{are used}} to {{translate}} source code from a programming language into either <b>object</b> <b>code</b> or machine code. [...] <b>Object</b> <b>code</b> needs further processing to become machine code, and machine code consists of the central processing unit's native instructions, ready for execution. Compiled computer programs are {{commonly referred to as}} executables, binary images, or simply as binaries– a reference to the binary file format used to store the executable code.|$|E
40|$|In {{this paper}} {{the problem of}} <b>object</b> <b>coding</b> is addressed. In order to satisfy the needs of new {{applications}} in a multi-resolution environment the problem of <b>object</b> [...] oriented <b>coding</b> has to be addressed. In this paper a new approach of <b>object</b> <b>coding</b> is proposed. It {{is based on an}} arbitrarily [...] shaped subband transform followed by a generalized embedded zerotree wavelet algorithm. It is shown in the paper that it achieves good compression results and has additional properties such as supporting arbitrarily [...] shaped regions, being computationally efficient, keeping the same dimensionality in the transformed domain, being perfect reconstruction, and allowing a perfect rate control. In addition a lossless mode can be defined by using an appropriate filter bank. 1 Introduction New applications in a multiresolution environment arise the need of additional functionalities and requirements for video coding schemes. Most of them are closely related to object [...] oriented manipulations. Object [...] oriente [...] ...|$|R
50|$|Batavi is {{developed}} on LAMP (software bundle), especially PHP and MySQL, and adopts a three layer {{model in which}} design <b>objects,</b> <b>code</b> and the database are strictly separated. From a designer perspective, this creates the advantage of easy manipulation of template objects, without the need of adapting code.|$|R
40|$|Abstract—A layered video <b>object</b> <b>coding</b> {{system is}} {{presented}} in this paper. The goal is to improve video coding efficiency by exploiting the layering of video and to support content-based functionality. These two objectives are accomplished using a sprite technique and an affine motion model on a per-object basis. Several novel algorithms {{have been developed for}} mask process-ing and coding, trajectory coding, sprite accretion and coding, locally affine motion compensation, error signal suppression, and image padding. Compared with conventional frame-based coding methods, better experimental results on both hybrid and natural scenes have been obtained using our coding scheme. We also demonstrate content-based functionality which can be easily achieved in our system. Index Terms — Affine motion model, image padding, layered video <b>object</b> <b>coding,</b> MPEG- 4, scalability, shape coding, sprite coding. I...|$|R
2500|$|... "1. Computer programs, {{whether in}} source or <b>object</b> <b>code,</b> shall be {{protected}} as literary works under the Berne Convention (1971).|$|E
2500|$|On November 25, 2009, Global Findability filed {{a patent}} {{infringement}} lawsuit against Summit Entertainment and Escape Artists in the U.S. District Court for the District of Columbia, claiming that a geospatial entity <b>object</b> <b>code</b> {{was used in}} the film Knowing which infringed Patent [...] The case was dismissed on January 10, 2011.|$|E
2500|$|One-pass {{assemblers}} {{go through}} the source code once. Any symbol used before it is defined will require [...] "errata" [...] {{at the end of}} the <b>object</b> <b>code</b> (or, at least, no earlier than the point where the symbol is defined) telling the linker or the loader to [...] "go back" [...] and overwrite a placeholder which had been left where the as yet undefined symbol was used.|$|E
40|$|A {{prototype}} framework {{has been}} established for developing and using mathematical components. The resulting framework uses IDL from CORBA for specifying the interfaces for <b>objects.</b> <b>Code</b> developed in the framework is mapped into either the COM object model for creating ActiveX components or into CORBA objects for creating servers implemented as dynamic modules...|$|R
50|$|It is {{good for}} safety {{purposes}} that compilers producing incompatible <b>object</b> <b>codes</b> (codes based on different ABIs, regarding e.g., classes and exceptions) use different name mangling schemes. This guarantees that these incompatibilities are detected at the linking phase, not when executing the software (which could lead to obscure bugs and serious stability issues).|$|R
5000|$|Part 2: Classification of <b>objects</b> and <b>codes</b> {{for classes}} (IEC 61346-2:2000) ...|$|R
2500|$|A {{compiler}} is {{a computer}} program or set of programs that transforms source code written in a computerized source [...] language into another computer language often having a binary form known as an <b>object</b> <b>code.</b> The most common reason for wanting to transform source code {{is to create an}} executable program. The first compiler written for the A-0 programming language is attributed to its inventor, Grace Hopper in 1949.|$|E
2500|$|While BMC's most {{significant}} asset {{is perhaps a}} workforce of skilled software engineers, the firm owns considerable intellectual property {{in the form of}} software code. It elaborated how it protects this property in an SEC filing (2002): [...] "We distribute our products in <b>object</b> <b>code</b> form and rely upon contract, trade secret, copyright and patent laws to protect our intellectual property. The license agreements under which customers use our products restrict the customer's use to its own operations and prohibit disclosure to third persons. We now distribute certain of our products on a shrink-wrap basis, and the enforceability of such restrictions in a shrink-wrap license is unproven in certain jurisdictions. Also, notwithstanding those restrictions, it is possible for other persons to obtain copies of our products in <b>object</b> <b>code</b> form. We believe that obtaining such copies would have limited value without access to the product's source code, which we keep highly confidential. In addition, we employ protective measures such as CPU dependent passwords, expiring passwords and time-based trials." ...|$|E
2500|$|This is because, as was {{realized}} in the 1960s, the concept of [...] "macro processing" [...] is independent {{of the concept of}} [...] "assembly", the former being in modern terms more word processing, text processing, than generating <b>object</b> <b>code.</b> The concept of macro processing appeared, and appears, in the C programming language, which supports [...] "preprocessor instructions" [...] to set variables, and make conditional tests on their values. Note that unlike certain previous macro processors inside assemblers, the C preprocessor is not Turing-complete because it lacks the ability to either loop or [...] "go to", the latter allowing programs to loop.|$|E
3000|$|In this experiment, we analyze coding {{performance}} {{when using}} the optimized coding configuration determined through our method, and compare these results against the coding performance when using other coding configurations. This experiment continues to use the “Mobile” and “Bus” (CIF format) video sets as the test <b>objects.</b> <b>Coding</b> configuration optimization is mainly reflected in QP [...]...|$|R
40|$|This paper {{reports the}} results of an {{in-depth}} analysis ofthe degree of usefulness of <b>object</b> shape <b>coding</b> in videocompression. In particular, MPEG- 4 is used as referencestandard. The influence of different coding parameters onthe performance is deeply examined and discussions on theresults are provided. <b>Object</b> shape <b>coding</b> is compared withclassical (MPEG- 2) frame-based coding both at an objectivelevel (by comparing PSNR/quality and bitrate/filesize) and at a subjective level (asking to a set of users to expresstheir opinion on overall quality, cognitive effectiveness, andwillingness to pay). In conclusion, this paper aims at answering to the question whether it is convenient to use <b>object</b> shape <b>coding</b> instead of frame-based coding or not...|$|R
5000|$|Mobile agents — <b>Objects</b> or <b>code</b> {{with the}} ability to migrate between {{machines}} autonomously.|$|R
