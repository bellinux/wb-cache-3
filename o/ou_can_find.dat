0|10000|Public
50|$|In 2007, OU has {{launched}} the Open University Learning Management System (PUPOU-LMS or eMabini), where {{the faculty of}} the <b>OU</b> <b>can</b> hold classes online to Filipino students in United Arab Emirates, Hong Kong, Singapore, and Vietnam.|$|R
5000|$|In Sun Java System Directory Server and Microsoft Active Directory (AD), an {{organizational}} unit (<b>OU)</b> <b>can</b> contain any other unit, including other OUs, users, groups, and computers. Organizational unit in separate Domains may have identical names but {{are independent of}} each other.|$|R
50|$|The objects held {{within a}} domain can be grouped into Organizational Units (<b>OUs).</b> <b>OUs</b> <b>can</b> provide {{hierarchy}} to a domain, ease its administration, and can resemble the organization's structure in managerial or geographical terms. <b>OUs</b> <b>can</b> contain other OUs—domains are containers in this sense. Microsoft recommends using OUs rather than domains for structure and {{to simplify the}} implementation of policies and administration. The OU is the recommended level at which to apply group policies, which are Active Directory objects formally named Group Policy Objects (GPOs), although policies can also be applied to domains or sites (see below). The OU is {{the level at which}} administrative powers are commonly delegated, but delegation can be performed on individual objects or attributes as well.|$|R
40|$|Think old programmers can't {{learn new}} tricks? In this paper, I show two neat tricks that combine into {{something}} really clev er. (1) Our first neat trick is {{that instead of}} a path to a file on disk, the FILENAME statement can also accept a URL (v ia the URL access method). (2) Second, the SAS XML LIBNAME Engine (SXLE) can read in a static XML document f rom a FILENAME statement {{and turn it into}} a table. Combining these two, y <b>ou</b> <b>can</b> hav e SAS download a dy namically generated XML document, probably produced by a REST (representational state transfer) Web service (which can be built in Jav a, PHP, or. NET; it doesn't matter), and y <b>ou</b> <b>can</b> do it all in three lines of code...|$|R
5000|$|... “Dopo are {{reminiscent}} of John Fahey and Boxhead Ensemble at their most blissfully meandering” - Marc Weidenbaum, Disquiet / December 23, 2005 “Je suis réellement retombé à la fin des années 60, à l'époque <b>où</b> <b>Can</b> expérimentait, <b>où</b> Amon Düül ne s'était pas encore démultiplié” - LaFresto / December 12, 2005 ...|$|R
40|$|Models of the FLP {{have been}} successful, but • Their {{predictions}} are seldom (never?) tested. • The Phenotypic Tango, {{a more general}} version of the model, offers some improvements. • Its predictions can be evaluated with simulations, but • Can the Phenotypic Tango account for actual sexual radiations (e. g., the bird-of-paradise radiation) ? • What about popular generic models (BM & <b>OU)</b> ? <b>Can</b> they account for the b-o-p radiation...|$|R
6000|$|... "Why, then, that's {{something}} to start from, Tom," [...] said his friend. [...] "If we <b>can</b> <b>find</b> that, then maybe we <b>can</b> <b>find</b> whither they went from there." ...|$|R
50|$|The {{tourists}} <b>can</b> <b>find</b> {{here the}} Scandinavian-style wooden Benedictine monastery, Goszthonyi Halls and János Somogyi's private arboretum. There are some sports opportunities. You <b>can</b> <b>find</b> here an Archery Ranch.|$|R
30|$|From Eq. (12), we <b>can</b> <b>find</b> that K 2 is a constant. Moreover, we <b>can</b> <b>find</b> {{that the}} minimum window is in inverse {{proportion}} to the velocity for a group.|$|R
5000|$|Organizational units do not {{each have}} a {{separate}} namespace; e.g. user accounts with an identical username (sAMAccountName) in separate OUs within a domain are not allowed, such as [...] "fred.staff-ou.domain" [...] and [...] "fred.student-ou.domain", where [...] "staff-ou" [...] and [...] "student-ou" [...] are the OUs. This is because sAMAccountName, a user object attribute, must be unique within the domain. However, two users in different <b>OUs</b> <b>can</b> have the same Common Name (CN), the name under which they are stored in the directory itself.|$|R
6000|$|... "Well, if he <b>can</b> <b>find</b> out {{anything}} against our getting this divorce, he will. It {{is not my}} habit to go into Court with {{a case in which}} anybody <b>can</b> <b>find</b> {{out anything}}." ...|$|R
5000|$|... (B) I know {{at least}} 50% {{of the topic}} partially, and I know where I <b>can</b> <b>find</b> more {{information}} about it. Within 20 minutes, I am confident I <b>can</b> <b>find</b> the complete answer.|$|R
50|$|In the Leaderboard we <b>can</b> <b>find</b> {{one main}} ranking {{with the overall}} scores and another three rankings for {{each one of the}} {{evaluated}} areas where we <b>can</b> <b>find</b> the top companies contributing in each.|$|R
50|$|This {{gives us}} an abelian hidden {{subgroup}} problem, as f corresponds to a group homomorphism. The kernel corresponds to modular multiples of (r,1). So, if we <b>can</b> <b>find</b> the kernel, we <b>can</b> <b>find</b> r.|$|R
5000|$|<b>Can</b> <b>find</b> fewer bugs than smart monkeys, but <b>can</b> also <b>find</b> {{important}} bugs {{that are}} hard to catch by smart monkeys ...|$|R
60|$|What Christ's {{character}} was we <b>can</b> <b>find</b> in the Holy Gospels; and we <b>can</b> <b>find</b> it too, scattered and in parts, {{in all the}} good, the holy, the noble, who have aught of Christ's spirit and likeness in them.|$|R
5000|$|... {{which shows}} that [...] for [...] will give the {{response}} of the system to the point charge [...] Therefore, from the discussion above, if we <b>can</b> <b>find</b> the Green's function of this operator, we <b>can</b> <b>find</b> [...] to be ...|$|R
6000|$|... "You {{think that}} you <b>can</b> <b>find</b> your uncle's house, my dear?" [...] she asked, glancing at Virginia with concern. Through all of that long journey she had worn a look apart. [...] "Do you think you <b>can</b> <b>find</b> your uncle's house?" ...|$|R
5000|$|As the {{official}} description states, [...] "Lord Brackly's dead, {{but no one}} <b>can</b> <b>find</b> his secret vault, rumored to contain {{the bulk of his}} very wealthy estate. His will leaves it all to the one who <b>can</b> <b>find</b> it. <b>Can</b> you?" ...|$|R
50|$|There {{is a list}} of {{national}} organisations, so people <b>can</b> <b>find</b> help from others in their own countries, for example people in the UK <b>can</b> <b>find</b> a link to Samaritans. There is information about depression, mood swings and other problems.|$|R
50|$|In most systems, {{organizational}} units appear {{within a}} top-level organization grouping or organization certificate, called a domain. In many systems one <b>OU</b> <b>can</b> also exist within another OU. When OUs are nested, as one OU contains another OU, {{this creates a}} relationship where the contained OU is called {{the child and the}} container is called the parent. Thus, OUs are used to create a hierarchy of containers within a domain. Only OUs within the same domain <b>can</b> have relationships. <b>OUs</b> of the same name in different domains are independent.|$|R
40|$|Abstract—This paper compares three {{different}} evolutionary algorithms for solving the node covering problem:EA-I {{relies on the}} definition of the problem only without using any domain knowledge, while EA-II and EA-III employ extra heuristic knowledge. In theory, it is proven that all three algorithms <b>can</b> <b>find</b> an optimal solution in finite generations and find a feasible solution efficiently; but none of them <b>can</b> <b>find</b> the optimal solution efficiently for all instances of the problem. Through experiments, it is observed that all three algorithms <b>can</b> <b>find</b> a feasible solution efficiently, and the algorithms with extra heuristic knowledge <b>can</b> <b>find</b> better approximation solutions, but none of them <b>can</b> <b>find</b> the optimal solution to the first instance efficiently. This paper shows that heuristic knowledge is helpful for evolutionary algorithms to find good approximation solutions, but it contributes little to search for the optimal solution in some instances. Index Terms—Algorithm design, heuristic knowledge, optimization methods, performance analysis. I...|$|R
40|$|This paper compares three {{different}} evolutionary algorithms for solving the node covering problem: EA-I {{relies on the}} definition of the problem only without using any domain knowledge, while EA-II and EA-III employ extra heuristic knowledge for the problem. It is proven in theory all three evolutionary algorithms <b>can</b> <b>find</b> the optimal solution in a finite computation time, find a feasible solution efficiently, but none of them <b>can</b> <b>find</b> the optimal solution efficiently for all instances of the problem. Through experiments, it is found that all three evolutionary algorithms <b>can</b> <b>find</b> a feasible solution efficiently, and evolutionary algorithms with extra heuristic knowledge <b>can</b> <b>find</b> good approximation solutions; but none of them <b>can</b> <b>find</b> the optimal solution to the first instance efficiently. It is shown in this paper that heuristic knowledge is helpful for evolutionary algorithms to find good approximation solutions, but for some instances, it contributes little to finding the optimal solution. I...|$|R
3000|$|Alongside the Spanish case, in France we <b>can</b> <b>find</b> a droitréeldegage or nantissement on (tangible or intangible) movable {{property}} (the closest Spanish legal concept is therefore the prenda) and a hypothèque on im{{movable property}} (the closest Spanish figure, {{as it was}} discussed, would be the hipoteca). The French enforcement procedure {{in the case of}} immovable property (saisieimmobilière) differs with respect to that in Spain, in the fact that judicial intervention is always needed. The judicial intervention will take place either via a huissier (bailiff) or the enforcement judge directly (juged’exécution). Like in Spain, the execution of fixed charge/security over a movable property (mise à exécution d’un gage <b>ou</b> d’un nantissement) <b>can</b> be either judicial or extrajudicial. 62 [...]...|$|R
40|$|Classic {{heuristic}} search algorithms <b>can</b> <b>find</b> solutions {{that take the}} form of a simple path (A*), a tree, or an acyclic graph (AO*). In this paper, we describe a novel generalization of {{heuristic search}}, called LAO*, that <b>can</b> <b>find</b> solutions with loops. We show that LAO * can be used to solve Markov decision problems and that it shares the advantage heuristic search has over dynamic programming for other classes of problems. Given a start state, it <b>can</b> <b>find</b> an optimal solution without evaluatin...|$|R
30|$|Similarly, we <b>can</b> <b>find</b> LLRx[*]=[*] 1 (y).|$|R
50|$|You <b>can</b> <b>find</b> {{out just}} by saying...|$|R
50|$|You <b>can</b> <b>find</b> {{the google}} map here...|$|R
50|$|On the {{territory}} of the studio there is a Museum of the Cinema, in which you <b>can</b> <b>find</b> out about many interesting facts {{on the history of the}} cinema. Here you <b>can</b> <b>find</b> historic materials, from the invention of cinema, to the postmodern, digital and avant garde.|$|R
40|$|Abstract: Association Rule mining {{is one of}} {{the most}} {{important}} functionality in data mining, by using which we <b>can</b> <b>find</b> out the frequent patterns. By the association rule mining either we <b>can</b> <b>find</b> out the frequent patterns of item sets or we <b>can</b> <b>find</b> out the customers who visits our shopping mall frequently. In this paper who propose a vertical data set which consists of two rows where we have the Customer-ID’s and the items which they purchased. Here we use Boolean matrix technique to represent the data and by using it we <b>can</b> easily <b>find</b> out frequent items purchased by the customers, so that we can improve our sales by this frequent pattern mining as well as we <b>can</b> <b>find</b> out which customers purchased our frequent item sets, so we can give some exclusive offers to those customers, so that we can improve our sales...|$|R
30|$|It <b>can</b> <b>find</b> seams for all {{weldable}} materials.|$|R
50|$|Favorite Hangout: The biggest throne he <b>can</b> <b>find.</b>|$|R
50|$|The {{materials}} <b>can</b> <b>find</b> use in phased-array optics.|$|R
50|$|Popular local {{watering}} holes include Nine Pines, {{where one}} <b>can</b> <b>find</b> local live entertainment on Thursday nights; and Burke's, a traditional diner where one <b>can</b> <b>find</b> classic-style {{fish and chips}} {{and an array of}} home-cooked meal options. Two pizza chains, Trio Pizza and Pizza Twice, also call Blackville home.|$|R
25|$|One <b>can</b> <b>find</b> {{the median}} using the Stem-and-Leaf Plot.|$|R
30|$|We <b>can</b> <b>find</b> the {{following}} phenomenon from Example  3.3.|$|R
