0|10000|Public
5000|$|Although OS/360 {{itself was}} discontinued, {{successor}} <b>operating</b> <b>systems</b> including the <b>virtual</b> <b>storage</b> MVS and the 64-bit z/OS are still run [...] and maintain application-level compatibility.|$|R
40|$|FORVAL (FORest VALuation) is a {{computer}} program for cash-flow analysis of forestry investments. The FORTRAN 77 program {{is available from the}} MAFES Forestry Department for Data General computers using the Advanced <b>Operating</b> <b>System</b> with <b>Virtual</b> <b>Storage,</b> and for IBM-compatible personal computers (send letter of request and 51 !. -inch diskette to P. O. Drawer FR, Mississippi State, MS 39762) ...|$|R
5000|$|Mature {{versions}} of the Commodore, SWTPC, Atari 8-bit, and Apple II home computer systems all featured a disk <b>operating</b> <b>system</b> (actually called DOS {{in the case of}} the Commodore 64 (CBM DOS), Atari 8-bit family (Atari DOS), and Apple II machines (Apple DOS)), as did (at the other end of the hardware spectrum, and much earlier) IBM's System/360, 370 and (later) 390 series of mainframes (e.g., DOS/360: Disk <b>Operating</b> <b>System</b> / 360 and DOS/VSE: Disk <b>Operating</b> <b>System</b> / <b>Virtual</b> <b>Storage</b> Extended).|$|R
40|$|International audienceThe {{problem of}} {{assigning}} identical servers to different customer classes with {{the objectives of}} optimizing customer service and resource utilization is analysed. The problem that motivated this research is the assignment of batch jobs in a computer centre running the <b>operating</b> <b>system</b> MVS (Multiple <b>Virtual</b> <b>Storage).</b> A mathematical formulation {{of the problem is}} presented and its computational complexity discussed. A new schema for the definition of customer classes and a heuristic for the assignment of servers to classes are developed and applied to the problem. Numerical results show the efficiency of the procedure as compared with other previously utilized methods. The final part of the paper presents the conclusions and recommendations for further research...|$|R
5000|$|Having a {{separate}} area for <b>operating</b> <b>system</b> <b>virtual</b> memory swapping/paging.|$|R
5000|$|... allow {{users to}} select from {{different}} kinds of code generators so that the resulting executable can be targeted for different processors, <b>operating</b> <b>systems,</b> <b>virtual</b> machines, or other execution environment.|$|R
50|$|At Carnegie Mellon, Eppinger's {{dissertation}} {{demonstrated the}} integration of the Mach <b>Operating</b> <b>System's</b> <b>virtual</b> memory with the Camelot Transaction <b>System.</b> This recoverable <b>virtual</b> memory concept was subsequently used to implement the Coda File System.|$|R
50|$|The <b>operating</b> <b>systems</b> or <b>virtual</b> {{machines}} the proxifiers {{are designed}} to run on.|$|R
50|$|In May 2017, iX Systems {{announced}} that FreeNAS 11 would be imminently released, {{which was based}} on 9.10 but included features such as an update of the FreeBSD <b>operating</b> <b>system,</b> <b>virtual</b> machine management, updates to jails, and a new beta user interface along the lines of Corral but based on Angular JS.|$|R
25|$|The {{kernel mode}} parts consist of the Virtual Machine Manager (VMM), the Installable File System Manager (IFSHLP), the Configuration Manager, and in Windows 98 and later, the WDM Driver Manager (NTKERN). As a 32-bit <b>operating</b> <b>system,</b> <b>virtual</b> memory space is 4 GiB, divided into a lower 2 GiB for {{applications}} and an upper 2 GiB for kernel per process.|$|R
5000|$|The <b>operating</b> <b>systems</b> or <b>virtual</b> {{machines}} the SSH {{clients are}} designed to run on without emulation; there are several possibilities: ...|$|R
5000|$|A DPMI {{service can}} be 16-bit, 32-bit, or [...] "universal" [...] and {{is called the}} DPMI kernel, DPMI host, or DPMI server. It is {{provided}} either by the host <b>operating</b> <b>system</b> (<b>virtual</b> DPMI host) or by a DOS extender (real DPMI host). The DPMI kernel {{can be part of}} a DOS extender such as in DOS/4GW or DOS/32A, or separate, like CWSDPMI or HDPMI.|$|R
50|$|Modern <b>operating</b> <b>systems</b> employ <b>virtual</b> memory, however {{programs}} that use {{large amounts of}} data (e.g. video editing) may need to create temporary file(s).|$|R
40|$|Abstract- Virtualization enables {{installation}} and running of multiple virtual machines {{on the same}} computer <b>system.</b> <b>Operating</b> <b>system</b> that communicates directly with hardware {{is known as the}} host <b>operating</b> <b>system</b> whereas <b>virtual</b> <b>operating</b> <b>systems</b> have all the features of a real <b>operating</b> <b>system,</b> but they run inside the host <b>operating</b> <b>system.</b> A <b>virtual</b> machine is separated from the computer hardware resources and it runs on the emulated hardware. Performance of the <b>virtual</b> <b>operating</b> <b>system</b> running on the same computer system hardware depends on the performance of the host <b>operating</b> <b>system.</b> In this paper we study how different host <b>operating</b> <b>systems</b> influence <b>virtual</b> machine performance. Windows XP®, Windows Vista ™ and Windows 7 ™ are used as host <b>operating</b> <b>systems</b> using Windows Vista as a <b>virtual</b> <b>operating</b> <b>system.</b> Performance measurement of the <b>virtual</b> <b>operating</b> <b>system</b> is done in the same controlled conditions for all three host <b>operating</b> <b>systems</b> using benchmark applications. Performance measurement results show that the <b>virtual</b> <b>operating</b> <b>system</b> has the best performance when Windows 7 is used as the host <b>operating</b> <b>system...</b>|$|R
50|$|In modern 32-bit <b>operating</b> <b>systems,</b> <b>virtual</b> 8086 mode {{is still}} used for running applications, e.g. DPMI {{compatible}} DOS extender programs (through virtual DOS machines) or Windows 3.x applications (through the Windows on Windows subsystem) and certain classes of device drivers (e.g. {{for changing the}} screen-resolution using BIOS functionality) in OS/2 2.0 and later, all under control of a 32-bit kernel. However, 64-bit <b>operating</b> <b>systems</b> (which run in long mode) no longer use this, since virtual 8086 mode {{has been removed from}} long mode.|$|R
40|$|Low-level systems software— such as <b>operating</b> <b>systems,</b> <b>virtual</b> machines, {{language}} runtimes, embedded software, and performance-critical applications—is commonly {{written in}} unsafe languages, notably CandC++. Theselow-levellanguagesremain prevalent {{because they provide}} high performance, {{direct access to the}} underlying hardware, and explicit control over memory management. Moreover, because such systems often consist of millions of lines of code, transitioning the computing ecosystem away from C and its variants is not feasible any time soon. Unfortunately, C and its variants do no...|$|R
40|$|Abstract-We {{present an}} out-of-core {{algorithm}} for Parallel Delaunay Renement (PDR) for shared memory machines. Our per-formance {{data on a}} small 4 -way shared memory machine in-dicate that the out-of-core PDR algorithm is 6. 5 {{times faster than the}} in-core PDR implementation that relies on <b>operating</b> <b>system</b> <b>virtual</b> memory for meshes larger than 30 million el-ements. However, as it was expected, it is about twice slower than the in-core PDR implementation for meshes smaller than 20 million elements...|$|R
50|$|The {{key element}} is the MEC {{application}} server, which is integrated at the RAN element. This server provides computing resources, storage capacity, connectivity {{and access to}} RAN information. It supports a multitenancy run-time and hosting environment for applications. The virtual appliance applications are delivered as packaged <b>operating</b> <b>system</b> <b>virtual</b> machine (VM) images. The platform also provides a set of middleware application and infrastructure services. Application software can be provided from equipment vendors, service providers and third-parties.|$|R
50|$|Modern <b>operating</b> <b>systems</b> provide <b>virtual</b> memory, {{in which}} {{processes}} {{are given a}} range of memory, but where the memory does not directly correspond to actual physical RAM. Virtual memory can be backed by physical RAM, a disk file via mmap, or swap space, and the <b>operating</b> <b>system</b> can move <b>virtual</b> memory pages around as it needs. Because virtual memory {{does not need to}} be backed by physical memory, exhaustion of it is rare, and usually there are other limits imposed by the <b>operating</b> <b>system</b> on resource consumption.|$|R
3000|$|... is the hardware, <b>operating</b> <b>system,</b> {{management}} server, <b>virtual</b> machine, {{and service}} availability (reliability), respectively.|$|R
40|$|A {{methodology}} for performance-tuning a <b>virtual</b> <b>storage</b> <b>system</b> is discussed. This methodology encompasses Performance mea-surement, workload characterization, performance evaluation, and planned experimentation. Use of the methodology is illus-trated by describing {{results of a}} case study involving the IBM Research Division’s TSSl 360 <b>system.</b> Tuning a <b>virtual</b> <b>storage</b> syste...|$|R
40|$|Modern <b>operating</b> <b>systems</b> use <b>virtual</b> memory concept {{because of}} its {{advantages}} but they use different page replacement techniques. An efficient page replacement technique is required so as to produce minimum number of page faults. Some of the page replacement techniques are FIFO, LRU, OPTIMAL etc. Optimal has been proven to be best producing minimum number of page faults. LRU approximates optimal. Considerable {{research has been done}} to evaluate theses policies and to develop new ones based on recency, frequency, token, and locality model parameters etc. This paper uses a histogram based approach to compare FIFO, LRU, LRU 2, OPTIMAL policies. Simulation results show that histograms for all policies equalize as the number of frames increases. Also histogram for optimal policy equalizes more rapidly then other policy’s histograms. Also pages of large frequency of occurrences contribute much to the total number of page faults in both LRU and optimal page replacement algorithms. General Terms <b>Operating</b> <b>system,</b> <b>virtual</b> replacement techniques. memory, simulation of pag...|$|R
50|$|NOS/VE (Network <b>Operating</b> <b>System</b> / <b>Virtual</b> Environment) was an <b>operating</b> <b>system</b> with {{time-sharing}} capabilities, {{written by}} Control Data Corporation in the 1980s. It is a <b>virtual</b> memory <b>operating</b> <b>system,</b> employing the 64-bit virtual mode of the CDC Cyber 180 series computers. NOS/VE replaced the earlier NOS <b>operating</b> <b>system</b> of the 1970s.|$|R
5000|$|Advanced {{problem solving}} and trouble {{shooting}} skills (which requires {{a wide range of}} skills beyond JDE CNC skills such as networking, <b>storage,</b> database, <b>operating</b> <b>system,</b> and <b>virtual</b> infrastructures and the ability to work with people who are experts in these areas) ...|$|R
30|$|The memory dumps {{analysis}} method {{is the most}} serious approach of treating these threats. It performs a forced dump of the <b>operating</b> <b>system’s</b> <b>virtual</b> memory to identify an active rootkit. However, this technique is highly specific, it requires access to private source code, it is time consuming and it requires specialized personnel with the respective tools (digital forensic investigation tools). Moreover, it does not have the ability to detect every type of threat, as a hypervisor rootkit is able to monitor and to overturn the lower level of the system in an attempt to read the memory [3].|$|R
50|$|Bélády earned B.S. in Mechanical Engineering, then an M.S. in Aeronautical Engineering at the Technical University of Budapest. He left Hungary {{after the}} Hungarian Revolution of 1956. He {{worked as a}} {{draftsman}} at Ford Motor Company in Cologne and as an aerodynamics engineer at Dassault in Paris. In 1961 he immigrated to the United States, where he joined International Business Machines and did early work in <b>operating</b> <b>systems,</b> <b>virtual</b> machine architectures, program behavior modeling, memory management, computer graphics, Asian character sets, and data security. In the 60s and 70s he primarily lived in New York City with stints in California and England.|$|R
40|$|Object-oriented {{programming}} languages {{provide a}} {{rich set of}} features that provide significant software engineering benefits. The increased productivity provided by these features comes at a justifiable cost in a more sophisticated runtime system whose responsibility is to implement these features e#ciently. However, the virtualization introduced by this sophistication provides a significant challenge to understanding complete system performance, not found in traditionally compiled languages, such as C or C++. Thus, understanding system performance of such a system requires profiling that spans {{all levels of the}} execution stack, such as the hardware, <b>operating</b> <b>system,</b> <b>virtual</b> machine, and application...|$|R
5000|$|Computer {{programs}} may {{manage their own}} resources by using features exposed by programming languages ( [...] is a survey article contrasting different approaches), or may elect to manage them by a host - an <b>operating</b> <b>system</b> or <b>virtual</b> machine - or another program.|$|R
5000|$|Software {{platforms}} {{can either}} be an <b>operating</b> <b>system</b> or programming environment, though more commonly it {{is a combination of}} both. A notable exception to this is Java, which uses an <b>operating</b> <b>system</b> independent <b>virtual</b> machine for its compiled code, known in the world of Java as bytecode. Examples of software platforms include: ...|$|R
5000|$|Virtual - A {{simulation}} involving {{real people}} <b>operating</b> simulated <b>systems.</b> <b>Virtual</b> simulations inject a Human-in-the-Loop into {{a central role}} by exercising motor control skills (e.g., flying jet or tank simulator), decision making skills (e.g., committing fire control resources to action), or communication skills (e.g., {{as members of a}} C4I team).|$|R
40|$|This paper {{explores the}} role of <b>operating</b> <b>system</b> and {{high-level}} languages {{in the development of}} software and domain-specific languages (DSLs) for self-reconfigurable robotics. We review some of the current trends in self-reconfigurable robotics and describe the development of a software system for ATRON II which utilizes Linux and Python to significantly improve software abstraction and portability while providing some basic features which could prove useful when using Python, either stand-alone or via a DSL, on a self-reconfigurable robot system. These features include transparent socket communication, module identification, easy software transfer and reliable module-to-module communication. The end result is a software platform for modular robots that where appropriate builds on existing work in <b>operating</b> <b>systems,</b> <b>virtual</b> machines, middleware and high-level languages. Comment: Presented at DSLRob 2011 (arXiv: 1212. 3308...|$|R
40|$|Transcript, 38 pp. Belady {{discusses}} {{his early}} life and education in Hungary, escape to West Germany during the 1956 revolution, and {{work as a}} draftsman at Ford Motor Company in Cologne and as an aerodynamics engineer at Dassault in Paris. Belady covers his 1961 immigration into the United States, where he joined International Business Machines and did early work in <b>operating</b> <b>systems,</b> <b>virtual</b> machine architectures, program behavior modeling, memory management, computer graphics, Asian character sets, and data security. He also discusses his tenure as Vice President and Program Director of the Microelectronics and Computer Technology Corporation (MCC); as Chairman, CTO, and CEO of the Mitsubishi Electric Research Laboratories, Inc. (MERL); and as Executive Director of the Austin Software Council...|$|R
50|$|DSPs {{frequently}} use multi-tasking <b>operating</b> <b>systems,</b> {{but have}} no support for virtual memory or memory protection. <b>Operating</b> <b>systems</b> that use <b>virtual</b> memory require more time for context switching among processes, which increases latency.|$|R
40|$|This paper {{introduces}} {{our work}} around combining machine virtualization technology with Trusted Computing Group technology. We first describe our architecture for reducing and containing the privileged {{code of the}} Xen Hypervisor. Secondly we describe our Trusted Virtual Platform architecture. This is aimed at supporting the strong enforcement of integrity and security policy controls over a virtual entity where a virtual entity can be either a full guest <b>operating</b> <b>system</b> or <b>virtual</b> appliance running on a virtualized platform. The architecture includes a virtualization-specific integrity measurement and reporting framework. This is designed to reflect all the dependencies of the virtual environment of a guest <b>operating</b> <b>system.</b> The work is a core enabling component of our research around converged devices – client platforms such as notebooks or desktop PCs that can safely host multiple <b>virtual</b> <b>operating</b> <b>systems</b> and <b>virtual</b> appliances concurrently and report accurately on the trustworthiness of the individually executing entities...|$|R
50|$|Using a 'POKE' cheat is more {{difficult}} in modern games, as many include anti-cheat or copy-protection measures that inhibit modification of the game's memory space. Modern <b>operating</b> <b>systems</b> enforce <b>virtual</b> memory protection schemes to deny external program access to non-shared memory (for example, separate page tables for each application, hence inaccessible memory spaces).|$|R
40|$|Hardware {{virtualization}} allows physical hardware of {{a single}} computer to be shared between multiple <b>operating</b> <b>systems</b> in a nearly transparent manner. A virtual machine monitor provides each <b>operating</b> <b>system</b> <b>virtual</b> resources which are backed by physical resources of the hardware. Though increasing system complexity somewhat, hardware virtualization saves costs and {{has a number of}} other benefits. As the deployment of virtualization increases, dependence on the technology increases accordingly, thus emphasizing the importance of the security of virtualization mechanisms. We present a literature survey of commodity x 86 hardware virtualization. We also consider virtualization security from two viewpoints: we first develop a security model for virtualization using an asset-threats approach, and then consider how virtualization can be used to improve system security. Finally, we discuss security oriented virtualization architectures, and the relationship between trusted computing, the Trusted Platform Module (TPM), and virtualization...|$|R
