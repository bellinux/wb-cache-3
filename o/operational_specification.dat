67|182|Public
500|$|On Sunday, 18 March 1945, {{the lower}} cloud ceiling at Kaltenkirchen {{was less than}} [...] {{and most of the}} time between , while the upper cloud ceiling was at , {{rendering}} flight conditions outside the official <b>operational</b> <b>specification</b> for the Me 262. The jet was not fully cleared for instrument flight, mandating a lower cloud ceiling of more than [...] Major Erich Rudorffer, Gruppenkommandeur of the I./JG 7, was attending a meeting at the Luftgaukommando in Hamburg-Blankensee, when Oberleutnant Hans Grünberg, the most senior officer on duty and Staffelkapitän of the 1st Staffel, received the order from Major Richter, the Ia (operations officer), to engage inbound heavy bombers. Grünberg initially argued that weather conditions prohibited a safe takeoff but Reichsmarschall Hermann Göring intervened and ordered the jets to engage the enemy.|$|E
2500|$|Columbia was {{destroyed}} because of damaged thermal protection from foam debris that broke {{off from the}} external tank during ascent. The foam had not been designed or expected to break off, but had been observed {{in the past to}} do so without incident. The original shuttle <b>operational</b> <b>specification</b> said the orbiter thermal protection tiles were not designed to withstand any debris hits at all. Over time NASA managers gradually accepted more tile damage, similar to how O-ring damage was accepted. The Columbia Accident Investigation Board called this tendency the [...] "normalization of deviance" [...] a gradual acceptance of events outside the design tolerances of the craft simply because they had not been catastrophic to date.|$|E
5000|$|This phase-one DARPA study {{ended in}} 2001, and was {{followed}} by a phase-two study that focused on particular vendors with an intent to develop MAVs closer to <b>operational</b> <b>specification.</b> A number of different MAVs were developed as part of these DARPA efforts: ...|$|E
25|$|Document the system's <b>operational</b> <b>specifications</b> and {{inputs and}} outputs.|$|R
5000|$|For many electric/electronic {{volatile}} and non-volatile storage mediums, exposure to electromagnetic fields greatly exceeding safe <b>operational</b> <b>specifications</b> (e.g., high-voltage electric current or high-amplitude microwave radiation) ...|$|R
50|$|In {{addition}} to its programme management and commercial role, EuroTorp is also responsible for achieving compliance with <b>operational</b> <b>specifications,</b> integration on launching platforms and new systems development such as Hard Kill and submarine-launched versions.|$|R
5000|$|The Fides {{guide is}} made of two {{distinct}} parts. The first is a reliability prediction calculation method concerning main electronic component families and complete subassemblies like hard disks or LCD displays. The second part is a process control and audit guide which is a tool to assess the reliability quality and technical know-how in the operating time of the studied product, <b>operational</b> <b>specification</b> and maintenance.|$|E
5000|$|The [...] "English School" [...] {{derived from}} work by Cliff Jones on {{the aspects of}} VDM not {{specifically}} related to language definition and compiler design (Jones 1980, 1990). It stresses modelling persistent state {{through the use of}} data types constructed from a rich collection of base types. Functionality is typically described through operations which may have side-effects on the state and which are mostly specified implicitly using a precondition and postcondition. The [...] "Danish School" [...] (Bjørner et al. 1982) has tended to stress a constructive approach with explicit <b>operational</b> <b>specification</b> used to a greater extent. Work in the Danish school led to the first European validated Ada compiler.|$|E
50|$|On Sunday, 18 March 1945, {{the lower}} cloud ceiling at Kaltenkirchen {{was less than}} 600 m {{and most of the}} time between 80 - 100 m, while the upper cloud ceiling was at 6000 m, {{rendering}} flight conditions outside the official <b>operational</b> <b>specification</b> for the Me 262. The jet was not fully cleared for instrument flight, mandating a lower cloud ceiling of more than 800 m. Major Erich Rudorffer, Gruppenkommandeur of the I./JG 7, was attending a meeting at the Luftgaukommando in Hamburg-Blankensee, when Oberleutnant Hans Grünberg, the most senior officer on duty and Staffelkapitän of the 1st Staffel, received the order from Major Richter, the Ia (operations officer), to engage inbound heavy bombers. Grünberg initially argued that weather conditions prohibited a safe takeoff but Reichsmarschall Hermann Göring intervened and ordered the jets to engage the enemy.|$|E
40|$|Bialgebraic semantics, {{invented a}} decade ago by Turi and Plotkin, is an {{approach}} to formal reasoning about well-behaved structural <b>operational</b> <b>specifications.</b> An extension of algebraic and coalgebraic methods, it abstracts from concrete notions of syntax and system behaviour, thus treating various kinds of operational descriptions in a uniform fashion. In this talk, {{the current state of}} the art in the area of bialgebraic semantics is presented, and its prospects for the future are sketched. In particular, a combination of basic bialgebraic techniques with a categorical approach to modal logic is described, as an abstract approach to proving compositionality by decomposing modal logics over structural <b>operational</b> <b>specifications.</b> Keywords...|$|R
40|$|AbstractContracts specify {{properties}} of an interface to a software component. We consider {{the problem of}} defining a full contract that specifies not only the normal behaviour, but also special cases and tolerated exceptions. In this paper {{we focus on the}} behavioural {{properties of}} use cases taken from the Common Component Modelling Example (CoCoME), proposed as a benchmark to compare different component models. We first give the full specification of the use cases in the deontic-based specification language CL, and then we concentrate on three particular properties in order to compare deontic and <b>operational</b> <b>specifications.</b> We conjecture that <b>operational</b> <b>specifications</b> are well suited for normal cases, but are less easily extended for exceptional cases. This hypothesis is investigated by comparing <b>specifications</b> in CSP (<b>operational)</b> with <b>specifications</b> in CL. The outcome of the experiment supports the conjecture and demonstrates clear differences in the basic descriptive power of the formalisms...|$|R
50|$|Another aspect {{that was}} studied and {{analyzed}} was the {{adherence to the}} maintenance plan in the available technical documentation. The analysis led investigators {{to believe that the}} aircraft, its components and its engines complied with the requirements set out in the maintenance plan and the approved <b>operational</b> <b>specifications</b> of the Dirección Nacional de Aeronavegabilidad (National Board of Aeronavigation).|$|R
5000|$|Columbia was {{destroyed}} because of damaged thermal protection from foam debris that broke {{off from the}} external tank during ascent. The foam had not been designed or expected to break off, but had been observed {{in the past to}} do so without incident. The original shuttle <b>operational</b> <b>specification</b> said the orbiter thermal protection tiles were not designed to withstand any debris hits at all. Over time NASA managers gradually accepted more tile damage, similar to how O-ring damage was accepted. The Columbia Accident Investigation Board called this tendency the [...] "normalization of deviance" [...] - [...] a gradual acceptance of events outside the design tolerances of the craft simply because they had not been catastrophic to date.The subject of missing or damaged thermal tiles on the Shuttle fleet only became an issue following the loss of Columbia in 2003, as it broke up on re-entry. In fact, Shuttles had previously come back missing as many as 20 tiles without any problem. STS-1 and STS-41 had all flown with missing thermal tiles from the orbital maneuvering system pods (visible to the crew).|$|E
40|$|One {{approach}} to assuring information security is to control {{access to information}} through an appropriately designed device. A cost-effective way to provide assurance that the device meets its security requirements is to detect and correct violations of these requirements {{at an early stage}} of development: when the operational requirements are specified. Once it is demonstrated that an operational requirements specification is complete and consistent, that it captures the intended device behavior, and that the <b>operational</b> <b>specification</b> satisfies the security requirements, this <b>operational</b> <b>specification</b> can be used both to guide development of implementations and to generate test sets for testing implementations. This paper describes the application of the SCR (Software Cost Reduction) requirements method and the NRL's SCR* toolset, which includes a set of verification and validation tools, to a US Navy communications security device. It reports on our success in proving that the operatio [...] ...|$|E
40|$|A new {{solution}} to the Generalized Railroad Crossing problem, based on timed automata, invariants and simulation mappings, is presented and evaluated. The solution shows formally the correspondence between four system descriptions: an axiomatic specification, an <b>operational</b> <b>specification,</b> a discrete system implementation, and a system implementation that works with a continuous gate model. The details of the proofs, omitted from the conference paper {{due to lack of}} space, are included...|$|E
40|$|QC 351 A 7 no. 16 This {{document}} {{has been}} prepared to {{form the basis for}} the <b>operational</b> <b>specifications</b> for the Cassegrain instrumentation for the 90 -inch telescope of the Steward Observatory. The publication of this document is for the purpose of providing guidance to other astronomical groups who may have use for the considerations recorded herein...|$|R
40|$|The paper {{describes}} {{new technology}} to resolve a problem of receiving an alternative biofuel with improved ecological and <b>operational</b> <b>specifications</b> based on industrial diesel fuel with addition of components from iterated energy sources - methyl ethers of vegetable oils. The developed biodiesel fuels {{meet the requirements of}} the current standards and can be used as regular fuel for diesel engines...|$|R
50|$|In telecommunications, when testing new {{software}} or hardware for release, {{a set of}} test specifications are created to test this new product {{to ensure that it}} meets minimum acceptable <b>operational</b> <b>specifications.</b> This test specification will state the minimum criteria necessary for the testing process to be considered complete and the product is ready for release IE: Exit the testing phase of the program.|$|R
40|$|We {{present an}} outline of a process by which {{operational}} software requirements specifications can be written for Formal Concept Analysis (FCA). The Z notation is used to specify the FCA model and the formal operations on it. We posit a novel approach whereby key features of Z and FCA can be integrated and put to work in contemporary software development, thus promoting <b>operational</b> <b>specification</b> as a useful application of conceptual structures. </p...|$|E
40|$|We {{propose a}} unifying {{framework}} for formal specification and verification of both epistemic and behavioral aspects of security protocols. The main novelty {{of the proposed}} framework is the explicit support for cryptographic constructs, which {{is among the most}} essential ingredients of security protocols. Due to this feature, the indistinguishability relation for the epistemic constructs gets a dynamic semantics by taking the communicated keys and cryptographic terms in the <b>operational</b> <b>specification</b> into account...|$|E
40|$|Abstract. We {{present an}} outline of a process by which {{operational}} software requirements specifications can be written for Formal Concept Analysis (FCA). The Z notation is used to specify the FCA model and the formal operations on it. We posit a novel approach whereby key features of Z and FCA can be integrated and put to work in contemporary software development, thus promoting <b>operational</b> <b>specification</b> as a useful application of conceptual structures. ...|$|E
5000|$|The artifact-centric {{business}} process model {{has emerged as}} a holistic approach for modelling {{business process}}es, as it provides a highly flexible solution to capture <b>operational</b> <b>specifications</b> of business processes. It particularly focuses on describing the data of business processes, known as [...] "artifacts", by characterizing business-relevant data objects, their life-cycles, and related services. The artifact-centric process modelling approach fosters the automation of the business operations and supports the flexibility of the workflow enactment and evolution.|$|R
40|$|Some formats of well-behaved <b>operational</b> <b>specifications,</b> {{correspond}} to natural transformations of certain types (for example, GSOS and coGSOS laws). These transformations {{have a common}} gener-alization: distributive laws of monads over comonads. We prove that this elegant theoretical gener-alization has limited practical benefits: it does not translate to any concrete rule format that would be complete for specifications that contain both GSOS and coGSOS rules. This is shown for the case of labeled transition systems and deterministic stream systems. ...|$|R
40|$|Abstract. Previous {{work has}} {{introduced}} {{the setting of}} Logic LTS, together with a variant of ready simulation as fully-abstract refinement preorder, which allows one to compose <b>operational</b> <b>specifications</b> using a CSP-style parallel operator {{as well as the}} propositional connectives conjunction and disjunction. In this paper, we show how a temporal logic for specifying safety properties may be embedded into Logic LTS so that (a) the temporal operators are compositional for ready simulation and (b) ready simulation, when restricted to pairs of processes and formulas, coincides with the logic’s satisfaction relation. The utility of this setting as a semantic foundation for mixed <b>operational</b> and temporal-logic <b>specification</b> languages is demonstrated via a simple example. ...|$|R
40|$|We {{report on}} our {{experience}} using Haskell as an executable specification {{language in the}} formal verification of the seL 4 microkernel. The verification connects an abstract <b>operational</b> <b>specification</b> in the theorem prover Isabelle/HOL to a C implementation of the microkernel. We describe how this project differs from other efforts, and {{examine the effect of}} using Haskell in a large-scale formal verification. The kernel comprises 8, 700 lines of C code; the verification more than 150, 000 lines of proof script...|$|E
40|$|A {{baseline}} laboratory {{prototype of}} an integrated, six man, zero-g subsystem for processing human wastes onboard spacecraft was investigated, and included {{the development of}} an <b>operational</b> <b>specification</b> for the baseline subsystem, followed by design and fabrication. The program was concluded by performing a series of six tests over a period of two weeks to evaluate the performance of the subsystem. The results of the tests were satisfactory, however, several changes {{in the design of the}} subsystem are required before completely satisfactory performance can be achieved...|$|E
40|$|Abstract. This paper aims at {{defining}} the semantics of Agent Communication Languages (ACLs) {{in terms of}} changes in the social relationships between agents, represented in terms of social commitments. We take commitment to be a primitive concept underlying the social dimension of multiagent systems, and define a basic artificial institution that provides agents with the means to affect the commitment network that binds them to each other. Two different approaches are adopted for the presentation of our proposal: a logical formalization and an <b>operational</b> <b>specification.</b> ...|$|E
40|$|We {{introduce}} a logical notion of well-guardedness for recursive terms on arbitrary signatures defined in Plotkin's framework of structural <b>operational</b> <b>specifications,</b> restricted by de Simone's realizability requirements. We then suggest a simpler {{form for the}} logical rule that gives the behaviour of a recursively defined expression {{in terms of the}} behaviour of its unfoldings. For well-guarded terms, the simplified rule is logically equivalent to the general rule, but is has not the draw-back to ask for premises more complex that consequences...|$|R
40|$|This paper {{concerns}} with clustering {{elements in a}} bi-layer and multi-item supply chain aiming purification of interactions using data mining. The goal {{is to improve the}} performance of the supply chain and preventing the bottlenecks. Thus, a clustering is applied for classifying elements configure the proposed supply chain using <b>operational</b> <b>specifications</b> related to each layer of the supply chain. Here, we propose a new technique to cluster the elements of a supply network based on the similarity in information flow...|$|R
40|$|Structural <b>operational</b> <b>specifications</b> (SOS) are {{supplied}} with concurrent models based on permutations of proved transitions {{in the form}} of trace automata which are deterministic automata equipped with an explicit relation of independence on actions. In order to characterize the finite trace automata which are realized by SOS-algebras, we introduce a new kind of nets which encode exactly the concurrent behaviour of systems specified in SOS and we establish a correspondence between nets and those "seperated" trace automata which are realized in SOS...|$|R
40|$|Abstract. This paper {{reports on}} a non-trivial case-study {{carried out in the}} context on the German correct {{compiler}} construction project Verifix. The PVS system is here used as a vehicle to formally represent and verify a generic checker routine (run-time result verification) used in compiler back-ends. The checker verifies the results of a sophisticated labeling process of intermediate language expression trees with instances of compilation rule schemata. Starting from an <b>operational</b> <b>specification</b> (i. e. a set of recursive PVS functions), necessary declarative properties of the checker are formally stated and proved correct...|$|E
40|$|The nominal {{transition}} systems (NTSs) of Parrow et al. {{describe the}} operational semantics of nominal process calculi. We study NTSs {{in terms of}} the nominal residual transition systems (NRTSs) that we introduce. We provide rule formats for the specifications of NRTSs that ensure that the associated NRTS is an NTS and apply them to the <b>operational</b> <b>specification</b> of the early pi-calculus. Our study stems from the recent Nominal SOS of Cimini et al. and from earlier works in nominal sets and nominal logic by Gabbay, Pitts and their collaborators...|$|E
40|$|Starting from an <b>operational</b> <b>specification</b> of a {{translation}} from a structured to an unstructured imperative language, we point out how a compositional and context-insensitive translation {{gives rise to}} static chains of jumps. Taking an inspiration from the notion of continuation, we state a new compositional and context-sensitive specification that provably gives rise to no static chains of jumps, no redundant labels, and no unused labels. It is defined with one inference rule per syntactic construct and operates in linear time and space {{on the size of}} the source program (indeed it operates in one pass). ...|$|E
30|$|SAMOS models {{cloud service}} {{operation}} via three components: cloud service entity and operation classification, cloud service entity datatype specification, and cloud service entity <b>operational</b> relationship <b>specification.</b>|$|R
40|$|Simulation at the machine-control level {{plays an}} {{important}} role in designing machine controls and <b>operational</b> <b>specifications.</b> Recently, there has been a considerable amount of work done in the area of manufacturing systems control. This micro-level type of modeling is as important as modeling at the plant level. This paper is an application case study of modeling at the machine-control level. The objective of this paper is to address the issues of augmenting control design for automated production systems through the use of DES. The case study is an automated process of a frame turnover. In this process, an inbound conveyor transfers large frames into a turnover unit. Frames are accelerated toward the lift and rotate unit using a hydraulic slide. Frames are lifted and rolled over side to side then lowered onto an outbound pedestal conveyor. The pedestal conveyor shifts frames to the unloading station. The objectives of the case study were to visualize the turnover process and to design the sequences and timing of its operations. Based on that, it is required to verify that there is enough time for the turnover process to take place in synch with the movement of the inbound and pedestal conveyors. Finally, the machine controls are designed so that the system throughput and <b>operational</b> <b>specifications</b> are achieved...|$|R
40|$|Under general assumptions, the Turing {{test can}} be easily passed by an {{appropriate}} algorithm. I show that for any test satisfying several general conditions, we can construct an algorithm that can pass that test, hence, any operational definition is easy to fulfill. I suggest a test complementary to Turing's test, which will measure {{our understanding of the}} human mind. The Turing test is required to fix the <b>operational</b> <b>specifications</b> of the algorithm under test; under this constrain, the additional test simply consists in measuring the length of the algorithm...|$|R
