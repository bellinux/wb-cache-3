744|160|Public
25|$|As {{knowledge-based}} technology scaled up {{the need}} for larger knowledge bases and for modular knowledge bases that could communicate and integrate with each other became apparent. This {{gave rise to the}} discipline of <b>ontology</b> <b>engineering,</b> designing and building large knowledge bases that could be used by multiple projects. One of the leading research projects in this area was the Cyc project. Cyc was an attempt to build a huge encyclopedic knowledge base that would contain not just expert knowledge but common sense knowledge. In designing an artificial intelligence agent it was soon realized that representing common sense knowledge, knowledge that humans simply take for granted, was essential to make an AI that could interact with humans using natural language. Cyc was meant to address this problem. The language they defined was known as CycL.|$|E
2500|$|The {{application}} of unified labeling or naming conventions in <b>ontology</b> <b>engineering</b> {{will help to}} harmonize the appearance and increase the robustness of ontological representational units such as class and relation names. A full free access paper with the naming conventions is accessible online under http://www.biomedcentral.com/1471-2105/10/125 Retrieved 2010-01-11.|$|E
50|$|<b>Ontology</b> <b>engineering</b> aims to make {{explicit}} {{the knowledge}} contained within software applications, and within enterprises and business procedures {{for a particular}} domain. <b>Ontology</b> <b>engineering</b> offers a direction towards solving the interoperability problems brought about by semantic obstacles, such as the obstacles related to the definitions of business terms and software classes. <b>Ontology</b> <b>engineering</b> {{is a set of}} tasks related to the development of ontologies for a particular domain.|$|E
40|$|This paper aims {{to present}} an {{ontology}} model of software engineering to represent its knowledge. The fundamental knowledge relating to software engineering is well described in the textbook titled Software Engineering by Ian Sommerville that {{is now in its}} eighth edition [1] and the white paper, SoftWare Engineering Body Of Knowledge (SWEBOK), by the IEEE [2] upon which software <b>engineering</b> <b>ontology</b> is based. This paper gives an analysis of what software <b>engineering</b> <b>ontology</b> is, what it consists of and what it is used for in the form of usage example scenarios. The usage scenarios presented in the paper highlight characteristics of the software <b>engineering</b> <b>ontology.</b> The software <b>engineering</b> <b>ontology</b> assists in defining information for the exchange of semantic project information and is used as a communication framework. Its end users are software engineers sharing domain knowledge as well as instance knowledge of software engineering...|$|R
40|$|This paper aims {{to present}} {{software}} <b>engineering</b> <b>ontology</b> as software <b>engineering</b> knowledge representation for a multi-site software development. It {{will not only}} facilitate the capturing of software engineering knowledge but also enhance the sharing of software engineering knowledge across geographically multiple software development sites. The software <b>engineering</b> <b>ontology</b> assists in defining information for the exchange of semantic project data and {{is used as a}} communication framework. Its end users are software engineers sharing software engineering domain knowledge as well as software engineering project data...|$|R
40|$|Here is {{presented}} {{a platform for}} automatic composition of inductive learning systems using ontologies called CAMLET, based on knowledge modeling and <b>ontologies</b> <b>engineering</b> technique. CAMLET constructs an inductive applications with better competence to a given data set, using process and object ontologies. Afterwards, CAMLET instantiates and refines a constructed system based on the following refinement strategies: greedy alteration, random generation and heuristic alteration. Using the UCI repository of ML databases and domain theories, experimental results have shown us that CAMLET supports a user in constructing a inductive applications with best competence...|$|R
50|$|<b>Ontology</b> <b>engineering</b> in {{computer}} science and information science is a field which studies the methods and methodologies for building ontologies: formal representations {{of a set of}} concepts within a domain and the relationships between those concepts.A large-scale representation of abstract concepts such as actions, time, physical objects and beliefs would be an example of ontological engineering. <b>Ontology</b> <b>engineering</b> is one of the areas of applied ontology, and can be seen as an application of philosophical ontology. Core ideas and objectives of <b>ontology</b> <b>engineering</b> are also central in conceptual modeling.|$|E
5000|$|... engineeringaims {{at making}} {{explicit}} the knowledge contained within software applications, and within enterprises and business procedures {{for a particular}} domain. <b>Ontology</b> <b>engineering</b> offers a direction towards solving the inter-operability problems brought about by semantic obstacles, i.e. the obstacles related to the definitions of business terms and software classes. <b>Ontology</b> <b>engineering</b> {{is a set of}} tasks related to the development of ontologies for a particular domain. [...] Line Pouchard, Nenad Ivezic and Craig Schlenoff ...|$|E
50|$|Since 2008, the Corporate Semantic Web {{research}} group, {{located at}} the Free University of Berlin, focuses on building blocks: Corporate Semantic Search, Corporate Semantic Collaboration, and Corporate <b>Ontology</b> <b>Engineering.</b>|$|E
40|$|This paper {{outlines}} the basic differences between language <b>ontologies,</b> <b>engineering</b> <b>ontologies</b> and Web ontologies such as Yahoo!’s directory. Each {{type of application}} has different requirements that are not always easily reconciled. Problems in ontology integration and standardization reinforce {{the view that the}} idea of a universal reusable ontology is perhaps illusory. The paper concludes by pointing at some directions which have been explored in the context of syntax and lexical semantics, but not applied to other domains. 1 Ontologies and Knowledge Bases A classification of ontologies (Guarino 97) for information processing distinguishes the four different kinds of ontologies: • Top-level ontologies describe generic concepts independently of a particular domain or problem. A top-level ontology defines fairly abstract categories of time, space, event, action, etc. Typically, linguistic ontologies that encode a common sense vie...|$|R
40|$|International audienceBy bridge-building {{between the}} {{classical}} models of social networks analysis, <b>ontologies</b> <b>engineering</b> and physics, our work defines a multidisciplinary model of professional social networks analysis, dedicated to human and social capital management in enterprises and institutions. We introduce a semantic process of social graphs static and dynamic analysis, {{based on the}} enterprise content and producing decisional tools for the performance management. This approach {{is in line with}} the SOCIOPRISE project, in partnership with a leader software engineering company for human capital management. SOCIOPRISE is funded by the French State Secretariat at the prospective and development of digital economy...|$|R
40|$|The {{process and}} {{problems}} associated with translating a specific software <b>engineering</b> <b>ontology</b> into a different ontology language are described. The software <b>engineering</b> <b>ontology</b> is the Distributed Management Task Force (DMTF) Common Information Model (CIM). The target ontology language is the W 3 C OWL DL language. The specific translations are described for various CIM constructs. Difficulties in translation are characterized. 1...|$|R
50|$|<b>Ontology</b> <b>engineering</b> {{research}} {{includes the}} question of how to involve non-expert users in creating ontologies and semantically annotated content and for extracting explicit knowledge from the interaction of users within enterprises.|$|E
5000|$|Menthor Editor (An <b>ontology</b> <b>engineering</b> {{tool for}} dealing with OntoUML. It also {{includes}} OntoUML syntax validation, Alloy simulation, Anti-Pattern verification, and transformations from OntoUML to OWL, SBVR and Natural Language (Brazilian Portuguese)) ...|$|E
50|$|Menthor Editor {{is a free}} <b>ontology</b> <b>engineering</b> {{tool for}} dealing with OntoUML models. It also {{includes}} OntoUML syntax validation, Alloy simulation, Anti-Pattern verification, and MDA transformations from OntoUML to OWL, SBVR and Natural Language (Brazilian Portuguese).|$|E
40|$|This paper {{describes}} {{experiences with}} quasiautomated {{creation of a}} computational ontology for maritime information from a mixed collection of source material. Based on these experiences, hypotheses and conclusions concerning the creation of computational <b>ontologies</b> for <b>engineering</b> and other technical or scientific domains are presented. Heuristic...|$|R
40|$|Software <b>engineering</b> <b>ontology</b> {{shares a}} common {{understanding}} of software engineering domain among community users. However, the ontology continues {{to develop and}} evolve constantly. Thus, the tool and framework to assist the ontology to evolve with users’ participation are necessary. The Semantic Wiki and Content Management System technology provide encouraging community involvement environment for ontology evolution process. The proposed framework purposely facilitates community-driven Software <b>engineering</b> <b>ontology</b> evolution process with implemented prototype system of mentioned technologie...|$|R
40|$|Abstract: Capturing design {{knowledge}} and its modeling are crucial issues for design support systems and design knowledge management. It {{is important that}} knowledge models are systematic, consistent, reusable and interoperable. This survey article discusses the roles of <b>ontologies</b> of <b>engineering</b> artifacts for contributing to such design knowledge modeling from a viewpoint of computer science. An ontology of artifacts, in general, consists of systematic and computational definitions of fundamental concepts and relationship which exist {{in the physical world}} related to target artifacts, and shows how to capture the artifacts. This article, firstly, discusses needs, types, levels and some examples of <b>ontologies</b> of <b>engineering</b> artifacts. Then, we discuss roles of the ontologies for design knowledge modeling such as modeling specification for consistent modeling, capturing implicit {{knowledge and}} basis of knowledge systematization. 1...|$|R
50|$|<b>Ontology</b> <b>engineering</b> (or {{ontology}} building) is a subfield {{of knowledge}} engineering. It studies the ontology development process, the ontology life cycle, {{the methods and}} methodologies for building ontologies, and the tool suites and languages that support them.|$|E
50|$|From 2004-2005, {{at the end}} of the OWL WG, Welty led the <b>Ontology</b> <b>Engineering</b> and Patterns {{efforts in}} the Semantic Web Best Practices WG, helping to edit several {{important}} notes on using OWL, as well as the first W3C ontology for part-whole relations and time.|$|E
50|$|The {{notion of}} {{ontology}} modularization {{refers to a}} methodological principle in <b>ontology</b> <b>engineering.</b> The idea is that an ontology is built in a modular manner, i.e. developed {{as a set of}} small modules and later composed to form, and be used as, one modular ontology.|$|E
40|$|AbstractVarious {{efforts have}} been done so far to develop <b>ontology</b> for <b>engineering</b> {{functions}} {{in order to support}} functional modeling in design processes. The efforts focused on identifying a minimal set of functions that did not overlap and yet encompass the space of designed products. In this study, we use Substance Field analysis of biological systems acting in various fields and environments to define an ontology for biological functions. Comparing our ontology for biological functions, derived from the Su-Field analysis, to other <b>ontologies</b> for <b>engineering</b> functions reveals similarity and suggests an efficient generalization of system function ontologies. The process of the Su-Field analysis is provided together with examples and demonstrations. The implication of the results for functional modeling design in general and for biomimetic design in particular is further discussed...|$|R
5000|$|... dot15926 Editor—Ontology {{management}} framework initially {{designed for}} <b>engineering</b> <b>ontology</b> standard ISO 15926. Allows Python rule scripting and pattern-based data analysis. Supports extensions.|$|R
5000|$|... dot15926 Editor (Open source {{ontology}} {{editor for}} data compliant to <b>engineering</b> <b>ontology</b> standard ISO 15926. Allows Python scripting and pattern-based data analysis. Supports extensions.) ...|$|R
5000|$|Thomas Robert [...] "Tom" [...] Gruber (born 1959) is an American {{computer}} scientist, inventor, and entrepreneur with a {{focus on}} systems for knowledge sharing and collective intelligence. He did foundational work in <b>ontology</b> <b>engineering</b> and is well known for his definition of ontologies in the context of artificial intelligence.|$|E
5000|$|In {{software}} engineering, {{a domain}} {{model is a}} conceptual model of the domain that incorporates both behavior and data. In <b>ontology</b> <b>engineering,</b> a domain model is a formal representation of a knowledge domain with concepts, roles, datatypes, individuals, and rules, typically grounded in a description logic and implemented in OWL.|$|E
5000|$|The NeOn Toolkit {{is an open}} source, {{multi-platform}} ontology editor, {{which supports}} the development of ontologies in F-Logic and OWL/RDF. The editor {{is based on the}} Eclipse platform and provides a set of plug-ins (currently 20 plug-ins are available for the latest version, v2.4) covering a number of <b>ontology</b> <b>engineering</b> activities, including Annotation and Documentation, Modularization and Customization, Reuse, Ontology Evolution, translation and others.|$|E
40|$|Ontologies {{are heavily}} {{used in the}} context of the Semantic Web (Berners-Lee 1998, 2001) to formalize human knowledge. <b>Ontologies</b> <b>engineering</b> is now an {{important}} activity, and specialized softwares are developed to help in managing huge ontologies. The development of ontologies and of information systems can be compared to the development of programs. In this paper we make a parallel between ontologies and types in programming languages, and we use a small example to show that an ontology can be seen as a type system. When an ontology evolves, studying the impact of this evolution on the semantic annotations that use this ontology can be viewed as a type-checking process. The next step should be to import some notions used in the types community as overloading, polymorphism, type parameters, etc. to improve or create more powerful ontology definition languages...|$|R
40|$|ISBN: 978 - 972 - 8924 - 68 - 3 International audienceOntologies {{are heavily}} {{used in the}} context of the Semantic Web (Berners-Lee 1998, 2001) to formalize human knowledge. <b>Ontologies</b> <b>engineering</b> is now an {{important}} activity, and specialized softwares are developed to help in managing huge ontologies. The development of ontologies and of information systems can be compared to the development of programs. In this paper we make a parallel between ontologies and types in programming languages, and we use a small example to show that an ontology can be seen as a type system. When an ontology evolves, studying the impact of this evolution on the semantic annotations that use this ontology can be viewed as a type-checking process. The next step should be to import some notions used in the types community as overloading, polymorphism, type parameters, etc. to improve or create more powerful ontology definition languages...|$|R
5000|$|ONTOLIS (Collaborative web {{application}} for managing <b>ontologies</b> and knowledge <b>engineering,</b> web-browser-based graphical rules editor, sophisticated search and export interface. Web service availabel to link ontology information to exisiting data) ...|$|R
50|$|In 2016 a {{group of}} former {{students}} from NEMO founded Menthor, a startup aiming at providing ontology engineering-related products and services. Among these products, they offer the Menthor Editor, an open-source <b>ontology</b> <b>engineering</b> tool for dealing with OntoUML models. It also includes OntoUML syntax validation, Alloy simulation,23 Anti-Pattern verification,4 and MDA transformations from OntoUML to OWL,56 SBVR and Natural Language (Brazilian Portuguese). Menthor Editor is derived from OLED.|$|E
5000|$|The ideas {{underlying}} OntoClean appeared {{first in}} the literature {{in a series of}} three papers published in 2000. The name OntoClean does not appear in the literature until 2002. [...] According to Thompson-ISI, work on OntoClean was the most cited of academic papers on Ontology. [...] OntoClean was important as it was the first formal methodology for <b>ontology</b> <b>engineering,</b> applying scientific principles to a field whose practice was mostly art.|$|E
5000|$|During 1999-2000, {{while on}} sabbatical from Vassar College in Padova, Italy, he formed a {{productive}} collaboration with Nicola Guarino to develop OntoClean, a notable and widely recognized contribution in Artificial Intelligence, specifically Ontologies. According to Thompson-ISI, work on OntoClean {{was the most}} cited of academic papers on Ontology. [...] OntoClean was important {{as it was the}} first formal methodology for <b>ontology</b> <b>engineering,</b> applying scientific principles to a field whose practice was mostly art.|$|E
40|$|Software <b>engineering</b> <b>ontology</b> {{was first}} {{developed}} to provide efficient {{collaboration and coordination}} among distributed teams working on related software development projects across the sites. It helped to clarify the software engineering concepts and project information as well as enable knowledge sharing. However, a major challenge of the software <b>engineering</b> <b>ontology</b> users is that they need the competence to access and translate what {{they are looking for}} into the concepts and relations described in the ontology; otherwise, {{they may not be able}} to obtain required information. In this paper, we propose a conceptual framework of a multi-agent based recommender system to provide active support to access and utilize knowledge and project information in the software <b>engineering</b> <b>ontology.</b> Multi-agent system and semantic-based recommendation approach will be integrated to create collaborative working environment to access and manipulate data from the ontology and perform reasoning as well as generate expert recommendation facilities for dispersed software teams across the sites...|$|R
50|$|Privacy {{engineering}} involves aspects such as process management, security, <b>ontology</b> {{and software}} <b>engineering.</b> The actual {{application of these}} derives from necessary legal compliances, privacy policies and `manifestos' such as Privacy-by-Design.|$|R
40|$|In {{this paper}} we explore the {{development}} of systems for software <b>engineering</b> <b>ontology</b> instantiations management in the methodology for multi-site distributed software development. Ultimately the systems facilitate collaboration of teams in multi-site distributed software development. In multi-site distributed environment, team members in the software engineering projects have naturally an interaction {{with each other and}} share lots of project data/agreement amongst themselves. Since theyare not always residing at the same place and face-to-face meetings hardly happen, {{there is a need for}} methodology and tools that facilitate effective communication for efficient collaboration. Whist multi-site distributed teams collaborate, there are a lot of shared project data updated or created. In a large volume of project data, systematic management is of importance. Software engineering knowledge is represented in the software <b>engineering</b> <b>ontology</b> whose instantiations, which are undergoing evolution, need a good management system. Software <b>engineering</b> <b>ontology</b> instantiations signify project information which is shared and has evolved to reflect project development, changes in the software requirements or in the design process, to incorporate additional functionality to systems or to allow incremental improvement, etc...|$|R
