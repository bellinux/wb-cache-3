61|1219|Public
25|$|In computing, <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC) is a {{standard}} application programming interface (API) for accessing database management systems (DBMS). The designers of ODBC aimed to make it independent of database systems and operating systems. An application written using ODBC can be ported to other platforms, both on the client and server side, with few changes to the data access code.|$|E
25|$|Microsoft Data Access Components (MDAC; {{also known}} as Windows DAC) is a {{framework}} of interrelated Microsoft technologies that allows programmers a uniform and comprehensive way of developing applications that can access almost any data store. Its components include: ActiveX Data Objects (ADO), OLE DB, and <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC). There have been several deprecated components as well, such as the Microsoft Jet Database Engine, MSDASQL (the OLE DB provider for ODBC), and Remote Data Services (RDS). Some components have also become obsolete, such as the former Data Access Objects API and Remote Data Objects.|$|E
25|$|The Mono/Linux/GNOME {{development}} stack provide {{tools for}} application development while using the existing GNOME and free and open-source libraries. These include: Gtk# for {{graphical user interface}} (GUI) development, Mozilla libraries for working with the Gecko rendering engine, Unix integration libraries (Mono.Posix), database connectivity libraries, a security stack, and the XML schema language RelaxNG. Gtk# allows Mono applications to integrate into the Gnome desktop as native applications. The database libraries provide connectivity to the object-relational database db4o, Firebird, Microsoft SQL Server (MSSQL), MySQL, <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC), Oracle, PostgreSQL, SQLite, and many others. The Mono project tracks developing database components at its website.|$|E
25|$|Sun Microsystems {{used the}} ODBC system {{as the basis}} for their own <b>open</b> standard, Java <b>Database</b> <b>Connectivity</b> (JDBC). In most ways, JDBC can be {{considered}} a version of ODBC for the programming language Java instead of C. JDBC-to-ODBC bridges allow Java-based programs to access data sources through ODBC drivers on platforms lacking a native JDBC driver, although these are now relatively rare. Inversely, ODBC-to-JDBC bridges allow C-based programs to access data sources through JDBC drivers on platforms or from databases lacking suitable ODBC drivers.|$|R
40|$|Nowadays {{enormous}} {{geospatial data}} are acquired {{every day with}} various sensors. However the geographical information resources are naturally heterogeneous. For example, {{there are many different}} types of geographical data, such as databases, data files, maps, further more these data are maintained in different software systems by different enterprises, governments and individuals according to their own application requirements. Integration and interoperation of multi-source, heterogeneous spatial database are important for complex GIS applications, such as emergent response of natural disaster. In this paper we give a kind of call-level specification of <b>Open</b> Geospatial <b>Database</b> <b>Connectivity</b> (OGDC) used in China, which is designed for better data sharing among different GIS software. This specification defines a framework of data providers, spatial vector objects based on OGC simple feature specification and spatial raster objects, ODBC-styled database access objects, and corresponding interfaces. The framework of OGDC consists of database level, data provider level, interface level and application level. Several data providers are developed by some Chinese GIS companies, for example, SuperMap, GeoStar, GeoBean, etc. Oracle spatial data provider is also provided by Wuhan University. So we can do some comprehensive spatial analysis in our applications by these providers using different data sources. For data users, it is unnecessary to know which data source they use. How these providers are integrated to perform data overlay is demonstrated. 1...|$|R
5000|$|The Java <b>Database</b> <b>Connectivity</b> (JDBC) API for {{database}} access ...|$|R
25|$|<b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC) is {{a native}} {{interface}} that is accessed through a programming language (usually C) that can make calls into a native library. In MDAC this interface {{is defined as a}} DLL. A separate module or driver is needed for each database that must be accessed. The functions in the ODBC API are implemented by these DBMS-specific drivers. The driver that Microsoft provides in MDAC is called the SQL Server ODBC Driver (SQLODBC), and (as the name implies) is designed for Microsoft's SQL Server. It supports SQL Server v6.5 and upwards. ODBC allows programs to use SQL requests that will access databases without having to know the proprietary interfaces to the databases. It handles the SQL request and converts it into a request that the individual database system understands.|$|E
5000|$|JDBC and <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC) {{connectivity}} for Linux and Windows clients ...|$|E
50|$|OpenOffice.org could {{interact}} with databases (local or remote) using ODBC (<b>Open</b> <b>Database</b> <b>Connectivity),</b> JDBC (Java Database Connectivity) or SDBC (StarOffice Database Connectivity).|$|E
5000|$|Enterprise - adds client/server <b>database</b> <b>connectivity,</b> Enterprise Mobility Services, and DataSnap multi-tier SDK.|$|R
5000|$|B4A {{supports}} {{all types}} of applications such as games, <b>databases,</b> <b>connectivity,</b> [...] sensors and hardware.|$|R
5000|$|... 1993 Shipped first ODBC {{functionality}} on non-Windows platforms, Universal <b>DataBase</b> <b>Connectivity</b> (UDBC); name {{changed to}} OpenLink Software ...|$|R
5000|$|Tests {{accessibility}} of data sources of <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC) or native MS SQL. Runs SQL querys and checks return results as an option.|$|E
5000|$|... 6. <b>Open</b> <b>Database</b> <b>Connectivity</b> - SheerPower {{supports}} other database engines {{through its}} ODBC interface, {{and its own}} ARS engine can be accessed via ODBC in other database applications.|$|E
50|$|MemSQL is wire-compatible with MySQL. This {{means that}} {{applications}} can connect to MemSQL through MySQL clients and drivers, {{as well as}} standard <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC) and Java Database Connectivity (JDBC) connectors.|$|E
50|$|<b>Database</b> <b>connectivity</b> is supported, and Delphi {{supplies}} several database components. VCL {{includes many}} database-aware and database access components.|$|R
5000|$|Enterprise - adds client/server <b>database</b> <b>connectivity,</b> Enterprise Mobility Services, {{mobile data}} pack, client/server pack and DataSnap multi-tier SDK.|$|R
5000|$|<b>Database</b> <b>connectivity</b> (i.e. {{embedded}} HSQLDB {{or other}} DBMS with JDBC 3 driver) for storing messages and user details ...|$|R
50|$|There {{are many}} means of {{aggregating}} {{information to be}} displayed in a SharePoint Dashboard. Some common methods include Application Programming Interface (API), Business Connectivity Service/Business Data Catalogue, Microsoft Excel, and <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC).|$|E
5000|$|... a {{simplified}} and standardized way to access unstructured content across all vendors {{would increase the}} adoption of ECM products, {{but only if the}} standard could remain compatible with existing deployed systems, much the way that ODBC <b>Open</b> <b>Database</b> <b>Connectivity</b> did for the relational database market in the 1990s.|$|E
50|$|In computing, <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC) is a {{standard}} application programming interface (API) for accessing database management systems (DBMS). The designers of ODBC aimed to make it independent of database systems and operating systems. An application written using ODBC can be ported to other platforms, both on the client and server side, with few changes to the data access code.|$|E
5000|$|Integration and {{messaging}} services, including J2EE Connector Architecture (JCA), Java <b>Database</b> <b>Connectivity</b> (JDBC), and Java Message Service (JMS) ...|$|R
50|$|JDBC: Since WebObjects uses JDBC for <b>database</b> <b>connectivity</b> any DBMS {{that has}} a JDBC-driver can be used within WebObjects.|$|R
50|$|PHP 5 has {{a similar}} {{interface}} called PHP Data Objects (PDO). Java's Java <b>Database</b> <b>Connectivity</b> (JDBC) is also similar.|$|R
50|$|E-petitioner is {{implemented}} in Microsoft Active Server Pages (ASP) {{and uses a}} SQL server database to hold the petitions data. It uses the open standard XHTML 1.0 for web page markup, and ODBC (<b>open</b> <b>database</b> <b>connectivity</b> standard) to connect to the database. The system is currently hosted on a Windows 2003 server running IIS and SQL Server 2005. Disk storage requirements for the application are less than 10 MB.|$|E
5000|$|The most {{widespread}} use of the CLI standard {{is the basis of}} the <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC) specification, which is widely used to allow applications to transparently access database systems from different vendors. The current version of the API, ODBC 3.52, incorporates features from both the ISO and X/Open standards. Examples of languages that support Call Level Interface are ANSI C, C#, Visual Basic [...]NET (VB.NET), Java, Pascal, and Fortran.|$|E
5000|$|Remote Data Objects (abbreviated RDO) is an {{obsolete}} {{data access}} {{application programming interface}} primarily used in Microsoft Visual Basic applications on Windows 95 and later operating systems. [...] This includes database connection, queries, stored procedures, result manipulation, and change commits. It allowed developers to create interfaces that can directly interact with <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC) data sources on remote machines, without {{having to deal with}} the comparatively complex ODBC API.|$|E
5000|$|Object Relational Mapper: for <b>database</b> <b>connectivity</b> {{including}} My SQL, Postgres, Microsoft SQL Server and Oracle. No SQL is needed.|$|R
50|$|Simba Technologies ships SimbaProvider, an SDK used {{to build}} custom OLE DB for OLAP {{providers}} for multi-dimensional and star schema <b>database</b> <b>connectivity.</b>|$|R
5000|$|Third party snaplets for {{features}} such as file uploads, <b>database</b> <b>connectivity</b> (PostgreSQL, MongoDB, etc.), generation of JavaScript from Haskell code, and more.|$|R
50|$|GNU Data Access (GDA) {{is a set}} of plugin APIs, {{defined as}} generic as possible, so that any kind of data source can be {{accessed}} through them, to provide uniform access to different kinds of data sources (databases, information servers, mail spools, etc.). Similar to <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC) or Java Database Connectivity (JDBC), GNU Data Access is a wrapper but with more features to access several database engines. GNU Data Access has been developed as a complete architecture that provides everything required to access data sources.|$|E
5000|$|ISO/IEC 9075-3:2016 Part 3: Call-Level Interface (SQL/CLI). It defines {{interfacing}} components (structures, procedures, variable bindings) {{that can}} be used to execute SQL statements from applications written in Ada, C respectively C++, COBOL, Fortran, MUMPS, Pascal or PL/I. (For Java see part 10.) SQL/CLI is defined in such a way that SQL statements and SQL/CLI procedure calls are treated as separate from the calling application's source code. <b>Open</b> <b>Database</b> <b>Connectivity</b> is a well-known superset of SQL/CLI. This part of the standard consists solely of mandatory features.|$|E
50|$|Microsoft Data Access Components (MDAC; {{also known}} as Windows DAC) is a {{framework}} of interrelated Microsoft technologies that allows programmers a uniform and comprehensive way of developing applications that can access almost any data store. Its components include: ActiveX Data Objects (ADO), OLE DB, and <b>Open</b> <b>Database</b> <b>Connectivity</b> (ODBC). There have been several deprecated components as well, such as the Microsoft Jet Database Engine, MSDASQL (the OLE DB provider for ODBC), and Remote Data Services (RDS). Some components have also become obsolete, such as the former Data Access Objects API and Remote Data Objects.|$|E
5000|$|Data access: {{working with}} {{relational}} database management systems on the Java platform using Java <b>Database</b> <b>Connectivity</b> (JDBC) and object-relational mapping tools and with NoSQL databases ...|$|R
50|$|Professional - adds 64-bit Windows applications, {{cross-platform}} compilation for macOS, iOS and Android, library source code, code formatting, local <b>database</b> <b>connectivity</b> {{and a full}} commercial license.|$|R
50|$|Java <b>Database</b> <b>Connectivity</b> (JDBC) is an {{application}} programming interface (API) for the programming language Java, which defines how a client may access a database. It is Java based data access technology and used for Java <b>database</b> <b>connectivity.</b> It {{is part of the}} Java Standard Edition platform, from Oracle Corporation. It provides methods to query and update data in a database, and is oriented towards relational databases. A JDBC-to-ODBC bridge enables connections to any ODBC-accessible data source in the Java virtual machine (JVM) host environment.|$|R
