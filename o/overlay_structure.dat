145|431|Public
50|$|The HUNK_OVERLAY type was {{intended}} {{to reduce the amount}} of RAM needed to run a program. Executables with an <b>overlay</b> <b>structure</b> have a root node which is in memory at all times, and the rest of the program is split into smaller modules which are loaded and unloaded automatically when needed.|$|E
50|$|Recent {{publication}} on the 2.5 Å {{crystal structure}} of PLCγ in complex with FGFR1 kinase (PDB: 3GQI) provides new insights {{in understanding the}} molecular mechanism of FGFR1's recruitment of PLCγ by its SH2 domains. Figure 1 on the extreme right shows the PLCγ-FGFR1 kinase complex with the c-SH2 domain colored in red, n-SH2 domain colored in blue, and the interdomain linker colored in yellow. The structure contains typical SH2 domain, with two α-helices and three antiparallel β-strands in each SH2 domain. In this complex, the phosphorylated tyrosine (pY766) on the C-terminal tail of FGFR1 kinase binds preferentially to the nSH2 domain of PLCγ. The phosphorylation of tyrosine residue 766 on FGFR1 kinase forms hydrogen bonds with the n-SH2 to stabilize the complex. Hydrogen bonds in the binding pocket help to stabilize the PLCγ-FGFR1 kinase complex. The water molecule as shown mediates the interaction of asparagine 647 (N647) and aspartate 768 (D768) to further increase the binding affinity of the n-SH2 and FGFR1 kinase complex. (Figure 2). The phosphorylation of tyrosine 653 and tyrosine 654 in the active kinase conformation causes a large conformation change in the activation segment of FGFR1 kinase. Threonine 658 is moved by 24Å from the inactive form (Figure 3.) to the activated form of FGFR1 kinase (Figure 4.). The movement causes the closed conformation in the inactive form to open to enable substrate binding. It also allows the open conformation to coordinate Mg2+ with AMP-PCP (analog of ATP). In addition, pY653 and pY654 in the active form helps to maintain the open conformation of the SH2 and FGFR1 kinase complex. However, the mechanism by which the phosphorylation at Y653 and Y654 helps to recruit the SH2 domain to its C-terminal tail upon phosphorylation of Y766 remains elusive. Figure 5 shows the <b>overlay</b> <b>structure</b> of active and inactive forms of FGFR1 kinase. Figure 6 shows the dots and contacts on phosphorylated tyrosine residues 653 and 654. Green dots show highly favorable contacts between pY653 and pY654 with surrounding residues. Red spikes show unfavorable contacts in the activation segment. The figure is generated through Molprobity extension on Pymol.|$|E
40|$|Several {{approaches}} {{suitable for}} simulating a distributed system are considered: state space simulation, statistical data flow simulation, and <b>overlay</b> <b>structure</b> simulation. <b>Overlay</b> <b>structure</b> efficiency metrics are provided. Importance of structural modeling is shown for simulation of large-scale decentralized systems. ??????????? ????? ??????? ? ????????????? ?????????????? ??????: ????????????? ???????????? ?????????, ?????????????? ????????????? ??????? ??????, ????????????? ?????????? ????????? ???????. ???????? ??????? ?????? ????????????? ?????????? ????????? ? ????????????? ?????????? ???????????? ????????????? ??? ?????????????????? ??????...|$|E
5000|$|... #Caption: Figure 5. <b>Overlay</b> <b>Structures</b> of Active and Inactive Forms of FGFR1 kinase ...|$|R
50|$|IEWFETCH also {{incorporates}} {{facilities for}} so-called <b>overlay</b> <b>structures,</b> and which facilitates running potentially very large executables in a minimum memory model (as small as 44 KB on some {{versions of the}} OS, but 88 KB and 128 KB are more common).|$|R
40|$|In our research, we {{developed}} a general framework to model and implement <b>overlay</b> data <b>structures</b> in dynamic network environments. <b>Overlay</b> data <b>structures</b> can be defined {{by means of a}} couple (C,P). The content C can be an arbitrary data structure representing the information carried on by the data structure. The propagation rule P determines how the <b>overlay</b> data <b>structure</b> should be distributed and propagated across the network. This includes determining the "scope" of the overlay (i. e. the distance at which it should be propagated and possibly the spatial direction of propagation) and how such propagation can be affected by the presence or the absence of other data structures in the system. In addition, the propagation rules can determine how the content should change while it is propagated. <b>Overlay</b> data <b>structure</b> are not necessarily distributed replicas: by assuming different values in different nodes, they can be effectively used to build a distributed <b>overlay</b> data <b>structure</b> expressing some kind of contextual information. In addition, we realized highly scalable, autonomic maintenance mechanisms to let the <b>overlay</b> data <b>structures</b> preserve its intended distribution (C,P) despite network contingencie...|$|R
40|$|Abstract. Internet overlay {{services}} must {{adapt to}} the substrate network topology and link properties to achieve high performance. A common <b>overlay</b> <b>structure</b> management layer is desirable for enhancing the architectural modularity of service design and deployment. A shared substrate-aware <b>overlay</b> <b>structure</b> can also save redundant per-service link-selection probing when overlay nodes participate in multiple services. Despite the benefits, the concept of building services on a common structure management layer does not work well with recently proposed scalable distributed hashtable (DHT) protocols that employ protocol-specific overlay structures. In this paper, we present {{the design of a}} self-organizing DHT protocol based on the Landmark Hierarchy. Coupled with a simple low-latency <b>overlay</b> <b>structure</b> management protocol, this approach can support low-latency DHT lookup without any service-specific requirement on the <b>overlay</b> <b>structure.</b> Using simulations and experimentation on 51 PlanetLab sites, we measure the performance of the proposed scheme in terms of lookup latency, load balance, and stability during node churns. ...|$|E
40|$|The B 01 {{version of}} the United Subsonic Supersonic Aerodynamic Analysis program {{is the result of}} {{numerous}} modifications and additions made to the B 00 version. These modifications and additions affect the program input, its computational options, the code readability, and the <b>overlay</b> <b>structure.</b> The following are described: (1) the revised input; (2) the plotting overlay programs which were also modified, and their associated subroutines, (3) the auxillary files used by the program, the revised output data; and (4) the program <b>overlay</b> <b>structure...</b>|$|E
40|$|Abstract. Network {{overlays}} {{have been}} the subject of intensive research in recent years. The paper presents an <b>overlay</b> <b>structure,</b> S-Fireflies, that is self-stabilizing and is robust against permanent Byzantine faults. The <b>overlay</b> <b>structure</b> has a logarithmic diameter with high probability, which matches the diameter of less robust overlays. The overlay can withstand high churn without affecting the ability of active and correct members to disseminate their messages. The construction uses a randomized technique to choose the neighbors of each member, while limiting the ability of Byzantine members to affect the randomization or to disturb the construction. The basic ideas generalize the original Fireflies construction that withstands Byzantine failures but was not self-stabilizing. ...|$|E
40|$|Method is {{described}} for producing tungsten-reinforced tantalum, a material possessing the {{high temperature strength}} of tungsten and room temperature ductility and weldability of tantalum. This material is produced by bonding together and <b>overlaying</b> <b>structure</b> of tungsten wires with chemical vapor deposited tantalum...|$|R
40|$|Given the {{respective}} {{advantages of the}} two complimentary techniques for peer-to-peer media streaming (namely tree-based push and mesh-based pull), {{there is a strong}} trend of combining them into a hybrid streaming system. Backed by recently proposed mechanisms to identify stable peers, such a hybrid system usually consists of backbone trees formed by the stable peers and other <b>overlay</b> <b>structures</b> in the second tier to accommodate the remaining peers. In this paper, we embrace the hybrid push-pull structure for peer-to-peer media streaming. Our protocol is dominated by a multi-tree push mechanism to minimize the delay in the backbone and is complemented by other <b>overlay</b> <b>structures</b> to cope with peer dynamics. What mainly distinguishes our multi-tree pushing from the conventional ones is an unbalanced tree design guided by the so called snow-ball streaming, which has a provable minimum delay and can be smoothly "melded" with virtually any other existing <b>overlay</b> <b>structures</b> lying in the second tier. We design algorithms to construct and maintain our SNowbAll multi-tree Pushing (SNAP) overlay, and we also illustrate how to smoothly weld the SNAP backbone with the second tier. Finally, we perform simulations in ns- 2; the results indicate that our approach outperforms a recently proposed hybrid streaming system...|$|R
40|$|Should {{we build}} Gnutella on a <b>structured</b> <b>overlay?</b> There {{has been much}} {{interest}} in both unstructured and <b>structured</b> <b>overlays</b> recently. Unstructured overlays, like Gnutella, build a random graph and use flooding or random walks on the graph to discover data stored by <b>overlay</b> nodes. <b>Structured</b> <b>overlays</b> assign keys to data items and build a graph that maps each key to a specific node. The structure of the graph enables efficient discovery of data items given their keys {{but it does not}} support complex queries. Should we build Gnutella on a <b>structured</b> <b>overlay?</b> We believe the answer is yes. We replaced the random graph in Gnutella by a <b>structured</b> <b>overlay</b> while retaining the content placement and discovery mechanisms of unstructured overlays to support complex queries. Our preliminary results indicate that we can use structure to improve the performance of floods and random walks. They also indicate that structure can be used to reduce maintenance overhead, which is surprising because it is commonly believed that unstructured overlays have lower maintenance overhead than <b>structured</b> <b>overlays.</b> ...|$|R
40|$|Internet overlay {{services}} must {{adapt to}} the substrate network topology and link properties to achieve high performance. A common <b>overlay</b> <b>structure</b> management layer is desirable for enhancing the architectural modularity of service design and deployment. For instance, new link probing techniques {{can be incorporated into}} the common structure layer such {{that a large number of}} overlay services can benefit transparently. Additionally, a shared substrate-aware <b>overlay</b> <b>structure</b> can potentially reduce redundant per-service link-selection probing when overlay nodes participate in multiple services. The concept of building services on a common structure management layer fits well with unstructured services, those that do not place specific requirements on the overlay connectivity structure (e. g., Gnutella). Despite the benefits, it is unclear how the distributed hashtable (DHT) service can take advantage of a serviceindependent structure management layer, considering recently proposed scalable DHT protocols all employ protocol-specific overlay structures. In this paper, we present the design of a self-organizing DHT protocol based on the Landmark Hierarchy. Coupled with a simple low-latency <b>overlay</b> <b>structure</b> management protocol, this approach can support low-latency DHT lookup without any service-specific requirement on the <b>overlay</b> <b>structure.</b> Compared with Chord, a well-known DHT protocol, simulations and experimentation on 51 PlanetLab sites find that the proposed scheme can deliver better lookup performance (reducing the lookup latency by almost half) under the same link density. This benefit is achieved at the cost of less balanced lookup routing overhead. Our evaluation also demonstrates that the balance of key placement and fault tolerance for the proposed scheme are close to those of Chord. However, our approach produces more key reassignments after overlay membership changes, due to its structure-sensitive DHT mapping scheme. ...|$|E
40|$|In the paper, we {{consider}} the problem of distributing large-size content to a fixed set of nodes. In contrast with the most existing end-system solutions to this problem, FastReplica [1] does not attempt to build a ‘good ’ <b>overlay</b> <b>structure,</b> but simply uses a fixed mesh <b>overlay</b> <b>structure.</b> This can significantly reduces the overheads incurred in probing, building and maintaining the <b>overlay</b> <b>structure,</b> otherwise. However, FastReplica is oblivious to heterogeneous and dynamic environments. To remedy this problem, we propose an application-level load balancing idea: putting more data on ‘good ’ paths and less on ‘bad ’ ones. Our goal is to study (1) how to make FastReplica adaptive to dynamic environments and (2) how much performance gain {{can be achieved by}} exploring the application-level load balancing idea in FastReplica. Toward this end, we provide a theoretical analysis of a simplified model, which provides the insights serving as a basis to develop an implementation of this concept. Then, we present a performance evaluation on a wide-area testbed with a prototype implementation, showing that addition of application-level load balancing in FastReplica can achieve significant speedups by exploiting heterogeneous paths and dynamically adapting to bursty traffic. keywords Communications/Networking and Information Technology, Network Protocol...|$|E
30|$|Load {{balancing}} {{depends on}} {{information provided by}} resource discovery. Load balancing may also participate in spreading information by means of migration dialog. Hence, some mechanism of local interaction between information management and the migration process is added. This interaction changes the <b>overlay</b> <b>structure</b> and enhances obtained results.|$|E
40|$|There {{has been}} much {{interest}} in both unstructured and <b>structured</b> <b>overlays</b> recently. Unstructured overlays, like Gnutella, build a random graph and use flooding or random walks on the graph to discover data stored by <b>overlay</b> nodes. <b>Structured</b> <b>overlays</b> assign keys to data items and build a graph that maps each key to a specific node. The structure of the graph enables efficient discovery of data items given their keys {{but it does not}} support complex queries. Should we build Gnutella on a <b>structured</b> <b>overlay?</b> We believe the answer is yes. We replaced the random graph in Gnutella by a <b>structured</b> <b>overlay</b> while retaining the content placement and discovery mechanisms of unstructured overlays to support complex queries. Our preliminary results indicate that we can use structure to improve the performance of floods and random walks. They also indicate that structure can be used to reduce maintenance overhead, which is surprising because it is commonly believed that unstructured overlays have lower maintenance overhead than <b>structured</b> <b>overlays.</b> ...|$|R
40|$|Abstract—A large {{fraction}} of <b>structured</b> <b>overlays</b> work efficiently {{as long as}} node identifiers follow a uniform distribution with high probability. There is another kind of <b>structured</b> <b>overlay</b> supporting non-uniform node identifier distributions and it enables a DHT to support range queries. This paper presents FRT-Chord #, such a <b>structured</b> <b>overlay</b> for non-uniform node identifier distributions. It is based on Flexible Routing Tables (FRT), a method for designing <b>structured</b> <b>overlays,</b> and inherits advantageous features of FRT, that existing overlays do not hold. Such features include extensibility, arbitrary routing table capacity. I...|$|R
40|$|There {{has been}} much {{interest}} in both unstructured and <b>structured</b> <b>overlays</b> recently. Unstructured overlays, like Gnutella, build a random graph and use flooding or random walks on the graph to discover data stored by <b>overlay</b> nodes. <b>Structured</b> <b>overlays</b> assign keys to data items and build a graph that maps each key to a specific node. The structure of the graph enables efficient discovery of data items given their keys {{but it does not}} support complex queries...|$|R
40|$|This paper {{proposes a}} fully {{decentralized}} peer-to-peer <b>overlay</b> <b>structure</b> GeoP 2 P, to facilitate geographic location based search and retrieval of information. Certain limitations of centralized geographic indexes favor peerto-peer {{organization of the}} information, which, in addition to avoiding performance bottleneck, allows autonomy over local information. Peer-to-peer systems for geographic or multidimensional range queries built on existing DHTs suffer from the inaccuracy in linearization of the multidimensional space. Other overlay structures {{that are based on}} hierarchical partitioning of the search space are not scalable because they use special super-peers to represent the nodes in the hierarchy. GeoP 2 P partitions the search space hierarchically, maintains the <b>overlay</b> <b>structure</b> and performs the routing without the need of any super-peers. Although similar fully-decentralized overlays have been previously proposed, they lack the ability to dynamically grow and retract the partition hierarchy when the number of peers change. GeoP 2 P provides such adaptive features with minimum perturbation of the system state. Such adaptation makes both the routing delay and the state size of each peer logarithmic to the total number of peers, irrespective {{of the size of the}} multidimensional space. Our analysis also reveals that the <b>overlay</b> <b>structure</b> and the routing algorithm are generic and independent of several aspects of the partitioning hierarchy, such as the geometric shape of the zones or the dimensionality of the search space. ...|$|E
40|$|There is an {{increasing}} interest in explicitly managed memory hierarchies, where a hierarchy of distinct memories is exposed to the programmer and managed explicitly in software. These hierarchies {{can be found in}} typical embedded systems and an emerging class of multicore architectures. To run an application that requires more code memory than the available higher-level memory, typically an <b>overlay</b> <b>structure</b> is needed. The <b>overlay</b> <b>structure</b> is generated manually by the programmer or automatically by a specialized linker. Manual code overlaying requires the programmer to deeply understand the program structure for maximum memory savings as well as minimum performance degradation. Although the linker can automatically gen-erate the code <b>overlay</b> <b>structure,</b> its memory savings are limited and it even brings significant performance degradation because traditional techniques do not consider the program context. In this article, we propose an automatic code overlay generation technique that overcomes the limitations of traditional automatic code overlaying techniques. We are dealing with a system context that imposes two distinct constraints: (1) no hardware support for address translation and (2) a spatially and temporally coarse grained faulting mech-anism at the function level. Our approach addresses those two constraints as efficiently as possible. Our technique statically computes theWorst-Case Number of Conflict misses (WCNC) between two different code segments using path expressions. Then, it constructs a static temporal relationship graph with the WCNC...|$|E
30|$|To put our {{approach}} into practice, we implemented it within a Chord network [10]. We {{begin with a}} review of Chord's <b>overlay</b> <b>structure</b> and routing protocol in § 5.1. Section 5.2 then formulates the Chord protocol as a utility optimization problem using the second best. Finally, § 5.3 describes our experimental methodology and results.|$|E
40|$|AbstractIn 1972, R. H. Fox has {{generalized}} {{the classical}} classification theorem for covering mappings to a classification theorem for <b>overlay</b> <b>structures</b> over an arbitrary connected metric space. In {{the present paper}} we generalize his result to connected topological spaces. To achieve this we use ANR-resolutions of the base space, the fact that overlay mappings are pull-backs of covering mappings over ANRs and the classical classification theorem...|$|R
40|$|One of {{the major}} {{weaknesses}} of existing peer-to-peer networks is that their <b>overlay</b> <b>structures</b> {{do not reflect the}} underlying Internet topology, resulting in unnecessary consumption of network resources. We propose a Geographical Longest Prefix Matching (Geo-LPM) scheme to self-organise nodes into clusters using IP prefixes and network metric measurements. Geo-LPM efficiently locates nodes to produce superior overlays while optimising the usage of network resources. It is simple, scalable and self-organising...|$|R
40|$|<b>Overlay</b> data <b>structures</b> are a {{powerful}} mechanism to provide application components with context-information {{and to let}} them interact in dynamic-network scenarios like mobile ad-hoc networks and pervasive computing. These overlays can be propagated across a network {{in order to support}} components’ context awareness and coordination activities. We present a modeling framework and some autonomic algorithms to create <b>overlay</b> data <b>structures</b> that are able to self-maintain their intended distribution under a number of circumstances. The paper presents some experiments and performance measures to validate our approach and to show its scalability...|$|R
40|$|A {{computer}} program developed for solving the subsonic, three dimensional flow over wing-body configurations with leading edge vortex separation is presented. Instructions are {{given for the}} proper set up and input of a problem into the computer code. Program input formats and output are described, {{as well as the}} <b>overlay</b> <b>structure</b> of the program. The program is written in FORTRAN...|$|E
40|$|In {{this paper}} we propose an {{analytical}} framework to examine the stability of various P 2 P overlay structures against dynamic movement of peers. We model the behavior of these peers using degree independent and degree dependent random failure. As superpeer networks are currently most widely used <b>overlay</b> <b>structure,</b> we perform stability analysis of these networks as a case study. 1...|$|E
40|$|BitTorrent {{is a free}} {{peer-to-peer}} (P 2 P) content-sharing application with {{a complex}} and dynamic <b>overlay</b> <b>structure</b> due to loose coupling, high churn rate, and varying responsiveness of nodes. The complexity and the dynamic nature of the <b>overlay</b> <b>structure</b> can mask {{the problems in the}} network, making errors difficult to detect and diagnosis in a timely manner. Furthermore, the heavy reliance of clients on the node local views compounds the problems such as partitioning in the network or load imbalance due to biased peer selection. In an effort to provide the network with partial global information to resolve the network problems, this project looks into introducing a tool that efficiently collects global information from BitTorrent network. The tool, called Torrent Crawler (TC) uses a number of techniques to efficiently find all participating peers of the swarm, collecting global information from the network. The crawler also collects the information unobtrusively to the network traffic. In this paper, we describe the design, the implementation, and the evaluation of TC...|$|E
40|$|The {{success of}} {{peer-to-peer}} overlays for live multicast streaming {{depends on their}} ability to maintain low delays and a low ratio of information loss end-to-end. However, data distribution over an overlay consisting of unreliable peers is inherently subject to disturbances. Resilience is thus inevitably a key requirement for peer-topeer live-streaming architectures. In this article, we present a survey of the media distribution methods, <b>overlay</b> <b>structures,</b> and error-control solutions proposed for peer-to-peer live streaming. We discuss the trade off between resilience and overhead and argue that efficient architectures can be defined only through thorough performance analysis...|$|R
40|$|One of {{the major}} {{weakness}} of existing peer-to-peer networks is that their <b>overlay</b> <b>structures</b> do not match well with the physical underlying network topology. In this paper, we present a Geographical Longest Prefix Matching (Geo-LPM) scheme whereby nodes selforganise themselves into clusters such that nodes in the same cluster are {{close to each other}} in terms of network latency and membership. Geo-LPM combines IP prefixes and network metric measurements to quickly and easily locate nodes in the geographical space. It is simple, scalable, self-organising and distributed with no form of global knowledge required. Simulation results are presented...|$|R
40|$|Abstract. Small World {{patterns}} {{have been}} found in many social and natural networks, and even in Peer-to-Peer topologies. In this paper, we analyze File Sharing applications that aggregate virtual communities of users exchanging data. In these domains, it is possible to define <b>overlaying</b> <b>structures</b> that we call “Preference Networks ” that show self organized interest-based clusters. The relevance of this finding is augmented with the introduction of a proac-tive recommendation scheme that exploits this natural feature. The intuition behind this scheme is that a user would trust her network of “elective affini-ties ” more than anonymous and generic suggestions made by impersonal entities...|$|R
40|$|Abstract — We present SPIDER – {{a system}} for fast {{replication}} or distribution of large content from a single source to multiple sites interconnected over Internet or via a private network. In order to exploit spatial diversity of the underlying network, SPIDER uses an <b>overlay</b> <b>structure</b> composed of dedicated Transit Nodes (TNs). The data transport mechanism in SPIDER leverages this <b>overlay</b> <b>structure</b> to provide a coordinated approach that minimizes the maximum time to replicate to all destination sites (the makespan of content replication). In order to achieve this objective, SPIDER employs two orthogonal components: a) creation of multiple dynamic distribution trees using the transit nodes b) end-to-end reliable data transport with flow control on these trees by chaining point-to-point TCPs. We further present simulations based results to quantify benefits of tree construction algorithms in random topologies. We evaluate the real implementation of the SPIDER in PlanetLab and observe a 2 - 6 times speed up compared to different existing schemes. Index Terms — System Design, Mathematical programming/optimization, Graph Theory, Experimentation wit...|$|E
40|$|Both {{in terms}} of number of {{participating}} users and in traffic volume, KaZaA {{is one of the}} most important applications in the Internet today. Nevertheless, because KaZaA is proprietary and uses encryption, little is understood about KaZaA’s <b>overlay</b> <b>structure</b> and dynamics, its messaging protocol, and its index management. We have built two measurement apparatus- the KaZaA Sniffing Platform and the KaZaA Probing Tool- to unravel many of the mysteries behind KaZaA. We deploy the apparatus to study KaZaA’s <b>overlay</b> <b>structure</b> and dynamics, its neighbor selection, its use of dynamic port numbers to circumvent firewalls, and its index management. Although this study does not fully solve the KaZaA puzzle, it nevertheless leads to a coherent description of KaZaA and its overlay. Furthermore, we leverage the measurement results to set forth a number of key principles for the design of a successful unstructured P 2 P overlay. The measurement results and resulting design principles in this paper should be useful for future architects of P 2 P overlay networks as well as for engineers managing ISPs. 1...|$|E
40|$|User {{instructions}} for a graphics package for coupled rotor/airframe vibration analysis are presented. Responses to plot package messages which the user must make to activate plot package operations and options are described. Installation instructions required {{to set up}} the program on the CDC system are included. The plot package <b>overlay</b> <b>structure</b> and subroutines which have to be modified for the CDC system are also described. Operating {{instructions for}} CDC applications are included...|$|E
40|$|Dataset supporting: "Stone et al. Aeroacoustic catastrophes: {{upstream}} cusp beaming in Lilley&# 39;s equation". This {{zip file}} contains two Mathematica Notebooks and CDF (Computational Document Format) files. 1. A spherical polar wrap of the modal solution to Lilley&# 39;s equation with point source. The <b>overlaying</b> <b>structures</b> are {{defined in the}} above paper. 2. Cusp rays. Ray trajectories that form the cusp for two different receiver arcs. Note that the Notebook files require the user to have a Mathematica license, whereas the CDF is an interactive document that can be viewed using a free-of-charge CDF viewer. </span...|$|R
50|$|Leaders {{emerge from}} within the {{structure}} of the informal organization. Their personal qualities, the demands of the situation, or a combination of these and other factors attract followers who accept their leadership within one or several <b>overlay</b> <b>structures.</b> Instead of the authority of position held by an appointed head or chief, the emergent leader wields influence or power. Influence is the ability of a person to gain co-operation from others by means of persuasion or control over rewards. Power is a stronger form of influence because it reflects a person's ability to enforce action through the control of a means of punishment.|$|R
40|$|Abstract — One of {{the major}} {{weaknesses}} of existing peer-to-peer (P 2 P) networks is that their <b>overlay</b> <b>structures</b> do not correlate to the physical underlying network topology. As a result, the overlays waste network resources and introduce excessive end-toend latency for P 2 P applications. In this paper, we present a new model for topology-aware overlay formation. Firstly, it clusters nodes that are {{close to each other}} in terms of network latency and network membership. Secondly, it discovers the underlying topology between clusters to form an efficient overlay. The model is self-organising and distributed without the need of global knowledge Keywords- Peer-to-Peer, Overlay Networks, Node Location I...|$|R
