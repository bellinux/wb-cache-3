113|509|Public
50|$|FLUKA is {{available}} in form of a pre-compiled <b>object</b> <b>library</b> {{for a number of}} computer platforms. Source code is also available subject to the conditions specified in the FLUKA license.|$|E
5000|$|A {{team that}} is mounted (horse, motorcycle, etc.) or {{advances}} some type of mobile <b>object</b> (<b>library</b> carts, lawn chairs, or even garbage bins). May also include teams of dogs and handlers.|$|E
5000|$|Kylix was a {{descendant}} of Delphi, with support for the Linux operating system and an improved <b>object</b> <b>library.</b> It is no longer supported. Compiler and IDE are available now for non-commercial use.|$|E
5000|$|... is {{implemented}} with standard <b>object</b> <b>libraries</b> {{included with the}} Solaris 10 OS or user libraries packaged with the executable ...|$|R
50|$|The manual, UBC PLUS: The Plus Programming Language, is available. A {{description}} of the source and <b>object</b> <b>libraries</b> available for use with Plus, PLUS Source Library Definitions, is also available.|$|R
50|$|As NATO was {{distributed}} with a software development kit, several artists and programmers created third party extensions (e.g. the PeRColate and Auvi <b>object</b> <b>libraries),</b> or developed entire applications based on NATO.|$|R
50|$|FlexSim {{includes}} a standard <b>object</b> <b>library,</b> with each object containing pre-built logic and task execution {{to mimic the}} resources found in real-world operations. FlexSim objects are defined and programmed in four classes: fixed resource class, task executer class, node class and visual object class. FlexSim uses an object-oriented design.|$|E
50|$|Eunice was one {{of several}} Unix {{compatibility}} packages developed during the 1980s. It provided VMS binary versions of Unix tools, a VMS <b>object</b> <b>library</b> emulating the Unix API (including the system call interface) and an assembler that produced VMS binaries. Eunice was criticized for its performance problems and not quite complete Unix compatibility.|$|E
50|$|The specifications, documentation, and example files, {{as well as}} {{information}} about a viewer application (Carina), may all be found at the xVRML Project website. All but the examples may be downloaded from the Project SourceForge site. An extensive and growing <b>object</b> <b>library</b> is available for public use through the xVRML Project site.|$|E
5000|$|Android uses ELF [...]so (shared <b>object)</b> <b>libraries</b> for the Java Native Interface. With Android Runtime (ART), {{the default}} since Android 5.0 [...] "Lollipop", all {{applications}} are compiled into native ELF binaries on installation.|$|R
50|$|Constrained by {{the design}} principles, Pantheios has {{attracted}} some criticisms, particularly {{in regard to}} its packaging and the complexity of its build: it builds many 10s of <b>object</b> <b>libraries</b> for a given target operating-system/compiler.|$|R
50|$|GDL {{is a free}} {{technology}} (although ArchiCAD {{itself is}} a commercial software), it is allowed and possible to develop GDL based <b>object</b> <b>libraries</b> using free tools like Graphisoft LP_XMLConverter and Graphisoft GDL Web Plug-In.|$|R
5000|$|Factories {{are used}} in various design patterns, {{specifically}} in creational patterns such as the Design pattern <b>object</b> <b>library.</b> Specific recipes {{have been developed to}} implement them in many languages. For example, several [...] "GoF patterns", like the [...] "Factory method pattern", the [...] "Builder" [...] or even the [...] "Singleton" [...] are implementations of this concept. The [...] "Abstract factory pattern" [...] instead is a method to build collections of factories.|$|E
50|$|The early {{model for}} the system was the Kaleida Media Player, or KMP, {{essentially}} a cross-platform interactive version of the QuickTime Player that would run on the Apple Macintosh, IBM PC clones, as well as set-top boxes and other platforms - {{it was to be}} a single universal multimedia system. On top of this model was the ScriptX programming language and <b>object</b> <b>library,</b> which allowed developers to make the media files completely interactive.|$|E
5000|$|With the [...] "death" [...] of OS/2 in the mid-1990s, the [...] for SOM/DSOM largely disappeared; if users {{would not}} be running OS/2 on the desktop, {{there would be no}} {{universal}} <b>object</b> <b>library</b> anyway. In 1997, when Steve Jobs returned to Apple and ended many development efforts including Copland and OpenDoc, SOM was replaced with comparably not so advanced Objective-C already being in use in OPENSTEP OS (to become Mac OS X later). SOM/DSOM development faded, and is no longer actively developed.|$|E
50|$|Special vector editors {{are used}} for {{computer-assisted}} drafting. These are not suitable for artistic or decorative graphics, but are rich in tools and <b>object</b> <b>libraries</b> used to ensure precision and standards compliance of drawings and blueprints.|$|R
40|$|Includes bibliographical references. Introduction [...] The {{study of}} {{beginnings}} [...] Definition {{of the library}} [...] Method [...] Antediluvian libraries; General [...] Libraries of the gods [...] Animal and plant libraries? [...] Preadamite libraries [...] Adamite and patriarchal libraries before the flood [...] Prehistoric and historic libraries [...] The evolution of record keeping [...] Memory <b>libraries</b> [...] Pictorial <b>object</b> <b>libraries</b> [...] Mnemonic <b>object</b> <b>libraries</b> [...] Picture book libraries [...] Ideographic records [...] Types of primitive libraries [...] Contents of primitive libraries [...] The administration of primitive libraries [...] The beginnings of library schools [...] The beginnings of library research [...] Bibliography (p. 159 - 164). Mode of access: Internet...|$|R
40|$|A {{building}} information model (BIM) {{is just one}} component of the jigsaw puzzle of high quality information management to control the life cycle processes around building structures. A BIM in itself {{is not sufficient to}} solve adequately the ICT support shortcomings of the building production chain. The BIM should be embedded in a formal description of all needed exchange requirements. The ISO/buildingSMART standard Information Delivery Manual (IDM) is a perfect point of departure for such a formal interaction framework. In addition, the significance of (standard) <b>object</b> type <b>libraries</b> is still seriously underestimated. Real interoperability can only be established with a BIM that maintains strong links to one or more <b>object</b> <b>libraries.</b> This paper discusses how the interaction frameworks, <b>object</b> <b>libraries</b> and the {{building information}} model are related and demonstrate the way this approach is applied to introduce BIM in an actual highway design/ build/maintenance project in the Netherlands...|$|R
50|$|After {{capturing}} {{a presentation}} in the Camatasia Recorder, the Camtasia component {{can be used}} to modify audio and video displayed as tracks by using the timeline control and <b>object</b> <b>library</b> interface with an integrated preview window. The image in the infobox to the right is a screen capture of the timeline interface. In addition, Camtasia allows voice overlay for the presenter or editor, as well as the ability to add sound effects in many different formats including music formats into the clip bin and arrange anywhere on the timeline.|$|E
50|$|Following Goldhaber ousting, the company’s {{focus was}} narrowed. Plans {{to build a}} system for set-top boxes was officially {{abandoned}} in April 1994. Kaleida’s mission from then on was to complete and support the ScriptX language and multimedia <b>object</b> <b>library,</b> which by this point were very late. Kaleida sought to bundle the KMP as system software with new personal computers. At the same time, CD-ROM developers could ship the KMP with content to support existing Windows and Macintosh systems. As {{part of the new}} focus, the company was downsized, with layoffs representing about 20 to 25% of the workforce.|$|E
50|$|The {{most notable}} {{difference}} between SOM and COM is support for inheritance—COM {{does not have}} any. It might seem odd that Microsoft produced an <b>object</b> <b>library</b> system that could not support {{one of the most}} fundamental concepts of OO programming; the main {{reason for this is that}} it is difficult to know where a base class exists in a system where libraries are loaded in a potentially random order. COM demands that the programmer specify the exact base class at compile time, making it impossible to insert other derived classes in the middle (at least in other COM libraries).|$|E
5000|$|Programs {{written in}} C#, Visual Basic.NET, C++/CLI and other [...]NET {{languages}} require the [...]NET Framework. It has many libraries (one {{of them is}} mscorlib.dll Multilanguage Standard Common <b>Object</b> Runtime <b>Library,</b> formerly Microsoft Common <b>Object</b> Runtime <b>Library)</b> and so-called assemblies (e.g. System.Windows.Forms.dll).|$|R
40|$|Statistical {{research}} {{has always been}} {{at the edge of}} available computing power. Huge datasets, e. g in DataMining or Quantitative Finance, and computationally intensive techniques, e. g. bootstrap methods, always require a little bit more computing power than is currently available. But the most popular statistical programming language R, as well as statistical programming languages like S or XploRe, are interpreted which makes them slow in computing intensive areas. The common solution is to implement these routines in low-level programming languages like C/C++ or Fortran and subsequently integrate them as dynamic linked libraries (DLL) or shared <b>object</b> <b>libraries</b> (SO) in the statistical programming language. statistical programming language, XploRe, Yxilon, Java, dynamic linked <b>libraries,</b> shared <b>object</b> <b>libraries...</b>|$|R
50|$|Over time, {{a number}} of <b>object</b> <b>libraries</b> evolved on the Mac, notably MacApp and the Think Class Library (TCL) in Pascal, and later {{versions}} of MacApp and CodeWarrior's PowerPlant in C++. By the mid-1990s, most Mac software was written in C++ using CodeWarrior.|$|R
5000|$|Other {{features}} include visualization of ntopng, ntop, wireshark, traceroute, netflow and kismet data by geolocating the host addresses, IPv4 Address conversation, traceroute data and wireless access points and displaying them via Google Earth or a Mercator World Map bit image, a browser-based packet capture and protocol analysis system capable of monitoring {{up to four}} network interfaces using Wireshark, {{as well as a}} Snort-based intrusion detection system with a [...] "collector" [...] backend that stores incidents in a MySQL database. For web developers, there is also a JavaScript console with a built-in <b>object</b> <b>library</b> with functions that aid the development of dynamic web pages.|$|E
50|$|Joseph Firmage started {{development}} {{of what would}} become AppWare circa June 1987, originally {{in order to help}} develop an accounting system for his parent's greeting card company. In 1989 he and his brother Ed formed Serius Corp. to market the product, now known as Serius89. The 1.0 version shipped for the Mac in August 1989, with two versions, Serius Programmer that allowed the creation of new applications using the existing <b>object</b> <b>library,</b> and Serius Developer that allowed new objects to be written in external computer languages. This release was followed by 1.1 in October, which added a new Database object, and the 1.2 update in December.|$|E
5000|$|The {{architecture}} of OpenThreads is designed around [...] "swappable" [...] thread models which are defined at compile-time in a shared <b>object</b> <b>library.</b> It is {{of importance to}} note that while a factory pattern design {{could have been used}} to achieve the goal of generic interface, it would have required the programmer to allocate each of the 4 fundamental types (Thread, Mutex, Barrier, & Condition) on the heap. Due to the cost associated with heap allocation of the underlying concrete implementations of these constructs on some platforms, such allocation was deemed unacceptable at the time this library was originally written, and thus the factory pattern was not used.|$|E
50|$|ARCHICAD is {{available}} {{in a number of}} localized versions. In addition to a translated user interface and documentation, these versions have a set of parametric <b>objects</b> (<b>object</b> <b>libraries)</b> developed considering the specific requirements of the regional market, and different default values for object properties, menu arrangements, etc.|$|R
5000|$|...NET Remoting - <b>object</b> remoting <b>library</b> within Microsoft's [...]NET Framework ...|$|R
40|$|Discrete-event {{simulation}} is {{an established}} {{tool for the}} design and management of large-scale mail sortation and distribution systems. Because the design of distribution facilities integrates {{many of the same}} or functionally similar components, adopting an object-oriented approach to simulation promises significant economies. Instead of coding and verifying models de novo for each facility, component subsystem, or individual process, object orientation allows engineers to reuse validated code stored in an <b>objects</b> <b>library.</b> In this paper, we illustrate how the procedural language AutoMod ® [...] a leading commercial simulation package widely accepted in the industry [...] can be adapted for use within a hierarchical, object-oriented paradigm. A principal contribution is the design of a configuration management plan, which defines a structured process to control and account for the development and maintenance of procedural code and graphics stored in the <b>objects</b> <b>library.</b> ...|$|R
50|$|The Automation (IDispatch) {{interface}} {{allows a}} client application {{to find out}} what properties and methods are supported by an object at run-time, i.e. implements the concept of RTTI. It also provides the information necessary to invoke these properties and methods. Client applications {{do not need to be}} aware of the object members when they are compiled. This allows COM and ActiveX objects to be called by scripting programs platforms such as the ASP server and JavaScript on Internet Explorer, where calling conventions were not known at the time IIS or IE were built. By contrast, a simple <b>object</b> <b>library</b> is compiled and linked into a program, e.g. a DLL call needs to know a function name and parameters at compile time.|$|E
5000|$|The problem being {{addressed}} by Meyer involves {{the maintenance of}} large software projects or software libraries. Sometimes when developing or maintaining software it is necessary, after much code is in place, to change a class or object {{in a way that}} transforms what was simply an attribute access into a method call. Programming languages often use different syntax for attribute access and invoking a method, (e.g., [...] versus [...] ). The syntax change would require, in popular programming languages of the day, changing the source code in all the places where the attribute was used. This might require changing source code in many different locations throughout a very large volume of source code. Or worse, if the change is in an <b>object</b> <b>library</b> used by hundreds of customers, each of those customers would have to find and change all the places the attribute was used in their own code and recompile their programs.|$|E
5000|$|Hence {{a defense}} account in Le Monde, the rapid {{publication}} of the thesis, one or two violent attacks and several complimentary articles (including two pages by Étiemble in Le Nouvel Observateur). Elected a professor the same year at the University of Reims, he spent thirteen years {{as director of the}} Department of French. In 1986, he published La lecture comme jeu ("Reading as a Game") and then, in 1989, Lire le temps ("Reading Time"), an essay in which he analyzed literature not as an <b>object</b> (<b>library,</b> volume or [...] "text"), but as an [...] "Activity"- this being not writing but reading, some sort of reading, fully definable as a game. In 2002, La Tentation will extend the thesis to art in general, starting from the famous engraving of Jacques Callot. However, joining practice to theory, he pursued his work as novelist and published four novels in recent years, one of which, notably, [...] "Matantemma", attracted the attention of the critics and obtained the Feuille d'or de la ville de Nancy prize.|$|E
5000|$|More than 110 {{visual effect}} <b>objects</b> (Dfx <b>library,</b> Core Image Filters) ...|$|R
50|$|Expressions in {{computer}} programs reference variables, data types, functions, classes, <b>objects,</b> <b>libraries,</b> packages and other entities by name. In that context, name resolution {{refers to the}} association of those not-necessarily-unique names with the intended program entities. The algorithms that determine what those identifiers refer to in specific contexts {{are part of the}} language definition.|$|R
50|$|NeXTSTEP {{was later}} {{modified}} {{to separate the}} underlying operating system from the higher-level <b>object</b> <b>libraries.</b> The result was the OpenStep API, which ran on multiple underlying operating systems, including NeXT's own OPENSTEP, Windows NT and SUN Solaris. NeXTSTEP's legacy stands today {{in the form of}} its direct descendents, Apple's macOS and iOS operating systems.|$|R
