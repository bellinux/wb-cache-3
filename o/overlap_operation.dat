3|173|Public
50|$|Operation Dominic I and II {{would follow}} Operation Nougat, with some testing <b>overlap.</b> <b>Operation</b> Hardtack II preceded Nougat and the testing moratorium.|$|E
40|$|This paper {{presents}} a novel optimal location selection prob-lem, {{which can be}} applied {{to a wide range of}} applications. After providing a formal definition of the novel query type, we explore an intuitive approach that sequentially scans all possible object combinations in the search space. Then, we propose an Overlapping Voronoi Diagram (OVD) model that defines OVDs and Minimum OVDs, and construct an algebraic structure under an OVD <b>overlap</b> <b>operation.</b> Based on the OVD model, we design an advanced approach to answer the query. Due to the high complexity of Voronoi diagram overlap computation, we improve the overlap oper-ation by replacing the real boundaries of Voronoi diagrams with their Minimum Bounding Rectangles (MBR). We also propose a cost-bound iterative approach that efficiently pro...|$|E
40|$|Mining spatial {{co-location}} patterns plays a {{key role}} in spatial data mining. Spatial co-location patterns refer to subsets of features whose objects are frequently located in close geographic proximity. Due to spatial heterogeneity, spatial co-location patterns are usually not the same across geographic space. However, existing methods are mainly designed to discover global spatial co-location patterns, and not suitable for detecting regional spatial co-location patterns. On that account, an adaptive method for mining hierarchical spatial co-location patterns is proposed in this paper. Firstly, global spatial co-location patterns are detected and other non-prevalent co-location patterns are identified as candidate regional co-location patterns. Then, for each candidate pattern, adaptive spatial clustering method is used to delineate localities of that pattern in the study area, and participation ratio is utilized to measure the prevalence of the candidate co-location pattern. Finally, an <b>overlap</b> <b>operation</b> is developed to deduce localities of (k + 1) -size co-location patterns from localities of k -size co-location patterns. Experiments on both simulated and real-life datasets show that the proposed method is effective for detecting hierarchical spatial co-location patterns...|$|E
5000|$|Locking {{requires}} {{thinking about}} <b>overlapping</b> <b>operations</b> and partial operations in distantly separated and seemingly unrelated sections of code, a task {{which is very}} difficult and error-prone.|$|R
30|$|The new {{proposed}} algorithm MGswapDD {{has removed}} all faults {{of the existing}} algorithm swapDD and is working well in all possible cases of swapping two deletions. It works well at all boundary conditions. It has also considered the partial <b>overlapping</b> of <b>operations</b> o 1.str and o 2.str. Also if o 1.str completely overlaps by o 2.str or o 2.str completely overlaps by o 1.str, then also it works well totally. Thus, it considers well overlapping and splitting of operations. The MGswapDD is practically implemented in lab and works well on partial or total <b>overlapping</b> of <b>operations.</b> In addition, it works well on not <b>overlapping</b> <b>operations</b> and boundary conditions.|$|R
50|$|In April 2011, it was {{announced}} that Panasonic would cut its work force by 40,000 by the end of fiscal 2012 in a bid to streamline <b>overlapping</b> <b>operations.</b> The curtailment is about 10 percent of its group work force.|$|R
50|$|Following {{the merger}} of Pennzoil and Quaker State in 1998, the 581 Q Lube stores were merged into the Jiffy Lube brand, then {{possessing}} 1,541 stores, with <b>overlapping</b> <b>operations</b> being closed down. Pennzoil-Quaker State was ultimately purchased by Shell Oil in 2002.|$|R
40|$|It is {{generally}} {{known that the}} mechanism of <b>overlapping</b> <b>operations</b> allows to reduce the average job lead times in a production system. However, a machine may remain idle between two consecutive sublots belonging to the same job, due to a difference between its own setup and processing times {{and those of the}} preceding machine. These idle times are referred to as “gaps”. Until now, little formal results are available to calculate these “gaps” in terms of the system parameters and the transfer batch sizes used. In this paper, we derive expressions for these gaps and the transfer batch lead times in a single-product production line with deterministic arrivals, setup and processing times. We prove that in our setting, the average transfer batch lead time is minimized when the transfer batch size equals one product unit. Transfer batching, <b>Overlapping</b> <b>operations,</b> Lead time management...|$|R
40|$|This paper {{describes}} {{a model for}} minimizing total costs in a single-product, deterministic flow shop with <b>overlapping</b> <b>operations</b> {{in terms of the}} sublot size used. Three types of costs are considered: the inventory holding costs, the transportation costs and the so-called "gap costs" which may result from the intermittent idling of machines between consecutive Sublots. status: publishe...|$|R
40|$|A {{model of}} {{computation}} on multi-dimensional words, {{based on the}} <b>overlapping</b> <b>operation,</b> induces a categorical structure, to which {{a new type of}} logic corresponds, whose formulae express properties of computations in a language containing all first order formulae. The resulting deductive system is more powerful than coherent logic. The approach is illustrated through an example of an online game of map-colouring...|$|R
40|$|An {{overlapping}} composite track coating {{was produced}} on a steel surface by preplacing an 0. 5 mm {{thick layer of}} TiC powder and then melting using a TIG torch of constant energy input. The influence of the <b>overlapping</b> <b>operation</b> on preheating of the substrate, the dissolution of TiC particulates and the subsequent depth and hardness of the composite layer was analysed. The melt microstructure consisted of both undissolved and partially dissolved TiC particulates, together {{with a variety of}} morphologies and sizes of TiC particles precipitated during solidification. Preheating, resulting from the <b>overlapping</b> <b>operation</b> occurred, producing additional melting of the TiC particulates and deeper melt depths but with a reduced volume fraction of TiC precipitates in the subsequent tracks. A maximum hardness of over 800 Hv was developed in the composite layer. The high hardness was unevenly distributed in tracks melted at the initial and final stages, while it varied across the melt depths in other tracks...|$|R
5000|$|Some of {{the fields}} that have {{considerable}} <b>overlap</b> with <b>Operations</b> Research and Management Science include: ...|$|R
40|$|AbstractWe {{consider}} the PA-matching operation, used in DNA computing, as a formal operation on strings and languages. We investigate {{the closure of}} various families of languages under this operation, representations of recursively enumerable languages and decision problems. We also {{consider the}} dual <b>operation</b> of <b>overlapping</b> strings. All closure properties of families in the Chomksy hierarchy under both non-iterated and iterated PA-matching and <b>overlapping</b> <b>operations</b> are settled...|$|R
5000|$|Von Neumann {{suggests}} (Sec. 5.6) {{keeping the}} computer {{as simple as}} possible, avoiding any attempt at improving performance by <b>overlapping</b> <b>operations.</b> Arithmetic operations are to be performed one binary digit at a time. He estimates addition of two binary digits as taking one microsecond and that therefore a 30-bit multiplication should take about 302 microseconds or about one millisecond, much faster than any computing device available at the time.|$|R
40|$|ABSTRACT A dual-stage, time-proportioning {{thermostat}} {{has been}} developed for controlling both heating and ventilating functions in poultry houses. With the device connected to brooder stoves and ventilation fans, both functions can be controlled through a single temperature adjust-ment. <b>Overlapping</b> <b>operation</b> of heating and cooling is eliminated, thus conserving energy. Environ-mental temperature can be controlled to within ± 1. 5 C when the thermostat is connected to heaters and fans of adequate capacity. 1980 Poultry Science 59 : 231 - 23...|$|R
50|$|Massbus {{storage devices}} each contain their own {{autonomous}} controller units, allowing fully <b>overlapped</b> <b>operation</b> of multiple storage units {{connected to a}} single Massbus. The interface between the computer and the Massbus is basically a pass-through device that allows connection of the common Massbus to the individual computer's internal buses (whether PDP-10 memory bus, Unibus, PDP-11/70 cache bus, or VAX Synchronous Backplane Interconnect). Whenever a storage controller has a data transfer ready, it arbitrates {{for the use of}} the Massbus's synchronous data channel.|$|R
40|$|This paper {{presents}} a software pipelining algorithm for the automatic extraction of fine-grain parallelism in general loops. The algorithm accounts for machine resource constraints {{in a way}} that smoothly integrates the management of resource constraints with software pipelining. Furthermore, generality in the software pipelining algorithm is not sacrificed to handle resource constraints, and scheduling choices are made with truly global information. Proofs of correctness and the results of experiments with an implementation are also presented. 1 Introduction Recently there has been considerable interest in a class of compiler parallelization techniques known collectively as software pipelining. Software pipelining algorithms compute a static parallel schedule <b>overlapping</b> the <b>operations</b> of a loop body {{in much the same way}} that a hardware pipeline <b>overlaps</b> <b>operations</b> in a dynamic instruction stream. The schedule computed by a software pipelining algorithm is suitable for execution on a [...] ...|$|R
50|$|Now, {{suppose we}} divide our {{triangle}} into eight subtriangles. For each consecutive pair of triangles, perform the same <b>overlapping</b> <b>operation</b> we described before to get four new shapes, each {{consisting of two}} overlapping triangles. Next, overlap consecutive pairs of these new shapes by shifting their bases over each other partially, so we're left with two shapes, and finally overlap these two in the same way. In the end, we get a shape looking somewhat like a tree, but with an area much smaller than our original triangle.|$|R
50|$|The {{new company}} had <b>overlapping</b> <b>operations</b> {{and to some}} extent the same {{customer}} base too. The purpose of the merger was the will to grow particularly in process technology. For a bigger company it seemed to be easier to survive better in international markets. The company’s scope of business became more diversified than before and there were critics of the merger saying that easier growth would have been achieved if the two companies would have each acquired a competitor in their own core business sector.|$|R
5000|$|... #Subtitle level 3: Serialized, <b>overlapped,</b> and queued <b>operations</b> ...|$|R
40|$|In this paper, we {{considered}} solving approaches to flexible job shop problems. Makespan {{is not a}} good evaluation criterion with <b>overlapping</b> in <b>operations</b> assumption. Accordingly, in addition to makespan, we used total machine work loading time and critical machine work loading time as evaluation criteria. As <b>overlapping</b> in <b>operations</b> is a practical assumption in chemical, petrochemical, and glass industries, we used simulated annealing algorithm for multi-objective flexible job shop scheduling problem with <b>overlapping</b> in <b>operations</b> to find a suitable solution. To evaluate performance of the algorithm, we developed a mixed integer linear programming model, and solved it with the classical method (branch and bound). The results showed that in small size problems, the solutions of the proposed algorithm and the mathematical model were so close, and in medium size problems, they only had lower and upper bounds of solution and our proposed algorithm had a suitable solution. We used an experimental design for improving the proposed algorithm...|$|R
40|$|In this paper, a new {{approach}} to <b>overlapping</b> <b>operations</b> in job shop scheduling is presented. In many job shops, a customer demand can be met in more than one way for each job, where demand determines the quantity of each finished job ordered by a customer. In each job, embedded operations can be performed due to overlapping considerations in which each <b>operation</b> may be <b>overlapped</b> with the others because of its nature. The effects of the {{new approach}} on job shop scheduling problems are evaluated. Since the problem is well known as NP-Hard class, a simulated annealing algorithm is developed to solve large scale problems. Moreover, a mixed integer linear programming (MILP) method is applied to validate the proposed algorithm. The approach is tested on a set of random data to evaluate and study the behavior of the proposed algorithm. Computational experiments confirmed superiority of the proposed approach. To evaluate the effect of overlapping considerations on the job shop scheduling problem, the results of classical job shop scheduling with the new approach (job shop scheduling problem with <b>overlapping</b> <b>operations)</b> are compared. It is concluded that the proposed approach can improve the criteria and machines utilization measures in job shop scheduling. The proposed approach can be applied easily in real factory conditions and for large size problems. It should thus be useful to both practitioners and researchers...|$|R
40|$|This paper studies a continual-domain ant colony {{algorithm}} {{based on}} the <b>overlapping</b> mutation <b>operation,</b> which forms a dynamic candidate group to the solution of each component possible value, and records each possibility value information content in the candidate group. In each iteration of ant colony algorithm, firstly, it should choose the starting value of solution component according to the information content, and then it should use <b>overlapping</b> and variation <b>operation</b> to determine the overall optimal solution value. Through the corresponding algorithm design, from the relative sufficiency big solution component value, its variation region is small and becomes the partial search. Otherwise, the variation region is big and then constitutes the overall situation earch. At the same time, along with iterative number of times increase, the component value variation scope becomes gradually small, as this may enable the restraining process a lot when the iterative number of times is under the suitable control in accelerating convergence. Finally through the simulation experiment, compared the <b>overlapping</b> variation <b>operation</b> continual domain ant colony algorithm with the genetic algorithm performance. Conclusion has proven the <b>overlapping</b> variation <b>operation</b> continual domain ant colony algorithm has the high search superior solution ability and saves the computing time greatly...|$|R
40|$|Abstract. Conventional {{semantics}} for shared-variable concurrency {{suffers from}} the “grain of time ” problem, i. e., the necessity of specifying a default level of atomicity. We propose a semantics that avoids any such choice by regarding all interference that is not controlled by explicit critical regions as catastrophic. It is based on three principles: – Operations have duration and can overlap one another during execution. – If two <b>overlapping</b> <b>operations</b> touch the same location, {{the meaning of the}} program execution is “wrong”. – If, from a given starting state, execution of a program can give “wrong”, then no other possibilities need be considered. ...|$|R
40|$|With growing {{worldwide}} trade, {{container terminals}} {{have grown in}} number and size. Many new terminals are now automated to increase operational efficiency. The key focus is on improving seaside processes, where a distinction can be made between single quay crane operations (all quay cranes are either loading or unloading containers) and <b>overlapping</b> quay crane <b>operations</b> (some quay cranes are loading while others are unloading containers). From existing studies, {{it is not clear}} if the design insights obtained from analyzing single operations, such as optimal stack layout, are consistent with the insights obtained from analyzing <b>overlapping</b> <b>operations.</b> In this paper, we develop new integrated stochastic models for analyzing the performance of overlapping loading and unloading operations that capture the complex stochastic interactions among quayside, vehicle, and stackside processes. Using these integrated models, we are able to show that that there are stack layout configurations that are robust for both single (either loading or unloading) and for overlapping (both loading and unloading) operations...|$|R
40|$|Abstract. The <b>operation</b> of <b>overlap</b> {{assembly}} {{was defined}} by Csuhaj-Varju, Petre, and Vaszil as a formal model of the linear self-assembly of DNA strands: The overlap assembly of two strings, xy and yz, which share an “overlap ” y, results in the string xyz. This paper continues {{the exploration of the}} properties of the <b>overlap</b> assembly <b>operation</b> by investigating closure of various language classes under iterated overlap assembly, and the decidability of the completeness of a language. It also investigates the problem of deciding whether a given string is terminal with respect to a language, and the problem of deciding if a given lan-guage can be generated by an <b>overlap</b> assembly <b>operation</b> of two given others. ...|$|R
40|$|Hagit Attiya and Eyal Dagan Department of Computer Science The Technion Haifa 32000, Israel Abstract An {{algorithm}} {{for implementing}} binary operations (of any type) from unary load-linked (LL) and storeconditional (SC) operations is presented. The {{performance of the}} algorithm is measured by its sensitivity, i. e., how far (in terms of distances in the graph induced by the contention among <b>overlapping</b> <b>operations)</b> should operations be {{in order not to}} influence the step complexity of each other. The sensitivity of this implementation is at most O(log n), where n is the number of the processors in the system. That is, operations that are at least O(log n) apart in the contention graph do not delay each other. In some cases, where the data sets of the operations are restricted, e. g., in operations used to implement linked lists and heaps, the sensitivity is O(1). We also prove a negative result. We show {{that there is a problem}} which can be solved in O(1) steps using binary LL/SC o [...] ...|$|R
50|$|Depending on the sub-specialties involved, {{industrial}} engineering {{may also be}} known as, or <b>overlap</b> with, <b>operations</b> research, systems engineering, manufacturing engineering, production engineering, management science, management engineering, ergonomics or human factors engineering, safety engineering, or others, depending on the viewpoint or motives of the user.|$|R
40|$|Much {{research}} {{has been devoted to}} the job shop scheduling problem since its introduction in the late 50 's. Despite these efforts, even moderate sized benchmarking problems remained unsolved for many years. Given the complexity of the job shop scheduling problem, there is little hope for solving large real-life problems optimally within reasonable time. We therefore rely on heuristics, of which the shifting bottleneck procedure, developed by Adams et al. (1988), is performing excellently. We examine several extensions of the shifting bottleneck procedure towards real-life applications. We introduce due dates, release dates, assembly structures, split structures, <b>overlapping</b> <b>operations,</b> setup times, transportation times, parallel machines and beginning inventory. This generalized shifting bottleneck procedure is compared with priority dispatching rules on a set of large test problems. status: publishe...|$|R
40|$|Overlapping {{tracks were}} {{processed}} by melting preplaced titanium carbide (TiC) powder on steel surfaces using a {{tungsten inert gas}} torch. The tracks produced ~ 1. 0 mm melt depth free from cracks, but occasional pores were observed. The microstructure consisted of unmelted and partially melted TiC particulates together with reprecipitated TiC particles, which were prominent in tracks processed in the initial stage. A greater number of reprecipitated globular and cubic TiC particles were observed in tracks processed in the later stages, indicating more dissolution of TiC particulates from the <b>overlapping</b> <b>operation.</b> Those multitracks processed in the initial stage developed a maximum hardness of 850 - 1000 HV, which was lower in most other tracks, although comparable hardness values were recorded in the last track...|$|R
40|$|We {{explore a}} variant of a {{recently}} introduced operation on images, which provides an adequate basis for modeling computations in which concurrent agents cooperatively construct (pointed) pictures. In this setting, concurrent agents generate languages of multi-dimensional words on partially ordered alphabets through a simple <b>operation</b> of <b>overlapping,</b> constrained by the order imposed on the alphabet. The <b>overlapping</b> <b>operation</b> is {{proved to be a}} powerful tool for picture generation in general. The operation is parametric with respect to the composition law, and we show how some simple requests on the behavior of this law provide a meet-semilattice structure to the class of pointed pictures. This feature allows their use in building a model for concurrent processes in the spirit of process algebras...|$|R
3000|$|In {{the feature}} output stage of ICANet, the <b>overlapping</b> block {{histogram}} <b>operations</b> is employed {{to decrease the}} information loss [...]...|$|R
40|$|Scheduling {{problems}} in multipurpose batch process industries are {{very hard to}} solve because of the job shop like processing structure in combination with rigid technical constraints, such as no-wait restrictions. This paper shows that scheduling {{problems in}} this type of industry may be characterized as multiprocessor no-wait job shop problems with <b>overlapping</b> <b>operations.</b> A simulated annealing algorithm is proposed that obtains near-optimal solutions with respect to makespan. This paper shows that the no-wait restrictions require several adaptations of the neighborhood structure used by simulated annealing. The performance of the algorithm is evaluated by scheduling industrial instances from a multipurpose batch plant in the pharmaceutical industry. Our results indicate that simulated annealing consistently gives better results for a number of realistic instances than simple heuristics within acceptable computation time...|$|R
40|$|Product mix {{problem is}} one of the most {{important}} decisions made in production systems. Several algorithms have been developed to determine the product mix. Most of the previous works assume that all resources can perform, simultaneously and independently, which may lead to infeasibility of the schedule. In this paper, product mix problem and scheduling are considered, simultaneously. A new mixed-integer programming (MIP) model is proposed to formulate this problem. The proposed model differentiates between process batch size and transfer batch size. Therefore, it is possible to have <b>overlapped</b> <b>operations.</b> The numerical example is used to demonstrate the implementation of the proposed model. In addition, the proposed model is examined using some instances previously cited in the literature. The preliminary computational results show that the proposed model can generate higher performance than conventional product mix model...|$|R
40|$|Linearizability {{has become}} the key {{correctness}} criterion for concurrent data structures, ensuring that histories of the concurrent object under consideration are consistent, where con-sistency is judged {{with respect to a}} sequential history of a corresponding abstract data struc-ture. Linearizability allows any order of concurrent (i. e., <b>overlapping)</b> calls to <b>operations</b> to be picked, but requires the real-time order of non-overlapping to be preserved. A history of <b>overlapping</b> <b>operation</b> calls is linearizable if {{at least one of the}} possible order of operations forms a valid sequential history (i. e., corresponds to a valid sequential execution of the data structure), and a concurrent data structure is linearizable iff every history of the data structure is linearizable. Over the years numerous techniques for verifying linearizability have been de-veloped, using a variety of formal foundations such as refinement, shape analysis, reduction, etc. However, as the underlying framework, nomenclature and terminology for each method differs, it has become difficult for practitioners to judge the differences between each approach, and hence, judge the methodology most appropriate for the data structure at hand. We com-pare the major of methods used to verify linearizability, describe the main contribution of each method, and compare their advantages and limitations. ...|$|R
40|$|International audienceLinearizability is the {{de facto}} {{correctness}} condition for concurrent objects. Informally, linearizable objects provide the illusion that each operation takes effect instantaneously at a unique point in time between its invocation and response. Hence, by design, linearizability cannot describe behaviors of concurrency-aware concurrent objects (CA-objects), objects in which several <b>overlapping</b> <b>operations</b> “seem to take effect simultaneously”. In this paper, we introduce concurrency- aware linearizability (CAL), a generalized notion of linearizability which allows to formally describe the behavior of CA-objects. Based on CAL, we develop a thread- and procedure-modular verification technique for reasoning about CA- objects and their clients. Using our new technique, we present the first proof of linearizability of the elimination stack of Hendler et al. [10] in which the stack’s elimination subcomponent, which is a general-purpose CA-object, is specified and verified independently of its particular usage by the stack...|$|R
