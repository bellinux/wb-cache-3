2|21|Public
50|$|By 1940 {{there were}} three points, on Nut, Deer, and Moon islands, for the {{discharge}} of raw sewage into the oceans. This sewage had contaminated the shellfish beds {{to the point that}} discussions of building treatment plants began. The Nut Island plant opened in 1951. The Deer Island plant opened in 1968, and Moon Island was converted to standby, <b>overflow,</b> <b>operation.</b>|$|E
40|$|A Pump as Turbine (PAT) {{is one of}} micro hydro system {{components}} {{that is used to}} substitute a commercially available turbine due to its wide availability and low acquisition cost. However, PAT have high hydraulic losses due to differences in pump-turbine operation and hydraulic design. The fluid flowing inside the PAT is subjected to hydraulic losses due to the longer flow passage and unmatched fluid flow within the wall boundaries. This paper presents the effect of rounding the impeller leading edges of the pump on turbine performance. A CFD model of a PAT was designed to simulate virtual performance for the analysis. The aim {{of this study is to}} observe the internal hydraulic performance resulting from the changes in the performance characteristics. Highest efficiency was recorded at 17. 0 l/s, an increase of 0. 18 %. The simulation results reveal that there is an improvement in hydraulic performance at <b>overflow</b> <b>operation.</b> The velocity vector visualization shows that there is a reduction in wake and consequently less flow separation along impeller flow passages. However, adjusting the sensitive impeller inlet geometry will also alter the velocity inlet vector and consequently change the velocity triangles for the turbo machinery system...|$|E
30|$|Computer {{run-time}} tests: Run-time tests detect anomalous {{states such}} as <b>overflow,</b> undefined <b>operation</b> code, underflow, write-protection violations, or end of file (Pullum [2001]).|$|R
50|$|One {{does not}} have to check for <b>overflow</b> in these <b>operations.</b>|$|R
50|$|MIX also records {{whether the}} {{previous}} <b>operation</b> <b>overflowed,</b> {{and has a}} one-trit comparison indicator (less than, equal to, or greater than).|$|R
25|$|On 31 July 2015, it was {{announced}} that the site might be used to house <b>overflow</b> lorries from <b>Operation</b> Stack. To prevent lorries from parking on the motorway during busy periods, freight traffic bound for the Port of Dover might be diverted to the airfield and held until it can be directed to the ferry services.|$|R
40|$|In {{this report}} we propose the {{formalization}} in higher-order logic of fixed-point arithmetic {{based on the}} SPW (Signal Processing WorkSystem) tool. We encoded the fixed-point number system and specified the different rounding modes in fixed-point arithmetic such as the directed and even rounding modes. We also considered the formalization of exceptions detection and their handling like <b>overflow</b> and invalid <b>operation.</b> An erro...|$|R
3000|$|... {{for this}} integer part must allow the {{representation}} of all the values taken by the data and is obtained from the data bound values. Thus, firstly the dynamic range is evaluated for each datum. Then, these results are used to determine, for each data, the binary-point position which minimizes the integer part word-length and which avoids <b>overflow.</b> Moreover, scaling <b>operations</b> are inserted in the application to adapt the fixed-point format of a datum to its dynamic range or to align the binary-point of the addition inputs.|$|R
50|$|On lines 3 and 4, the sums are 16-bit {{variables}} so {{that the}} additions on lines 9 and 10 will not <b>overflow.</b> The modulo <b>operation</b> {{is applied to the}} first sum on line 9 and to the second sum on line 10. Here, this is done after each addition, so {{that at the end of}} the for loop the sums are always reduced to 8 bits. At the end of the input data, the two sums are combined into the 16-bit Fletcher checksum value and returned by the function on line 13.|$|R
40|$|We {{present a}} new idea to adapt {{relational}} abstract domains {{to the analysis of}} IEEE 754 -compliant floating-point numbers in order to statically detect, through abstract Interpretation-based static analyses, potential floating-point run-time exceptions such as <b>overflows</b> or invalid <b>operations.</b> In order to take the non-linearity of rounding into account, expressions are modeled as linear forms with interval coefficients. We show how to extend already existing numerical abstract domains, such as the octagon abstract domain, to efficiently abstract transfer functions based on interval linear forms. We discuss specific fixpoint stabilization techniques and give some experimental results. Comment: (update: reversed author first and last names...|$|R
40|$|International audienceWe {{present a}} new idea to adapt {{relational}} abstract domains {{to the analysis of}} IEEE 754 -compliant floating-point numbers in order to statically detect, through Abstract Interpretation-based static analyses, potential floating-point run-time exceptions such as <b>overflows</b> or invalid <b>operations.</b> In order to take the non-linearity of rounding into account, expressions are modeled as linear forms with interval coefficients. We show how to extend already existing numerical abstract domains, such as the octagon abstract domain, to efficiently abstract transfer functions based on interval linear forms. We discuss specific fixpoint stabilization techniques and give some experimental results...|$|R
40|$|Detecting {{arithmetic}} <b>overflow</b> during summation <b>operations</b> {{is vital}} to ensuring correct and secure behavior of many types of code. For example, applying transformations to signed integer pixel co-ordinates without any overflow detection may result in pixels rendering at unexpected negative co-ordinates, summing a large array of signed or unsigned integers without overflow detection can result in bogus totals, or performing arithmetic operations on packed bitfields without overflow detection could result in corruption of data in adjacent bitfields. A traditional way to detect arithmetic overflow is to insert specific checks of the host processor’s Overflow arithmetic condition flag after each arithmetic operation to detect signed integer overflow, or {{a check of the}} host processor’...|$|R
40|$|This paper {{addresses}} the formalization in higher-order logic of fixed-point arithmetic {{based on the}} SPW (Signal Processing WorkSystem) tool. We encoded the fixed-point number system and specified the dierent rounding modes in fixed-point arithmetic such as the directed and even rounding modes. We also considered the formalization of exceptions detection and their handling like <b>overflow</b> and invalid <b>operation.</b> An error analysis is then performed to check the correctness of the rounding and to verify the basic arithmetic operations, addition, subtraction, multiplication and division against their mathematical counterparts. Finally, we showed by an example how this formalization {{can be used to}} enable the verification of the transition from the floating-point to fixed-point algorithmic levels in the design flow of signal processors...|$|R
40|$|A {{fuzzy logic}} {{controller}} - WNC (Water Network Control) {{was developed for}} control of urban drainage systems. The objectives are to avoid accidents, flooding, pollutions through combined sewer <b>overflows</b> and excessive <b>operation</b> and maintenance costs. Fuzzy logic was {{proved to be a}} promising approach, flexible and easy accepted, because it includes the expert knowledge. Fuzzy control system proposed is robust and also easy to understand and modified. It offers to the operator the possibility to participate directly in the system control, combining the results of the modern optimization techniques with the experience and knowledge accumulated in time by experts. Thus, the control of urban sewer system can be well solved by implementing an intelligent control system, based on available information (fuzzy) and on expert's experience. An important feature of this fuzzy logic system is its capability to elaborate a control decision even in situations that were not considered in the design phase of the urban network...|$|R
40|$|The {{prediction}} of combined sewer <b>overflow</b> (CSO) <b>operation</b> in urban environments presents a challenging task for water utilities. The operation of CSOs (most often in heavy rainfall conditions) prevents houses and businesses from flooding. However, sometimes, CSOs {{do not operate}} as they should, potentially bringing environmental pollution risks. Therefore, CSOs should be appropriately managed by water utilities, highlighting the need for adapted decision support systems. This paper proposes an automated CSO predictive model construction methodology using field monitoring data, {{as a substitute for}} the commonly established hydrological-hydraulic modelling approach for time-series {{prediction of}} CSO statuses. It is a systematic methodology factoring in all monitored field variables to construct time-series dependencies for CSO statuses. The model construction process is largely automated with little human intervention, and the pertinent variables together with their associated time lags for every CSO are holistically and automatically generated. A fast LASSO (Least Absolute Shrinkage and Selection Operator) solution generating scheme is proposed to expedite the model construction process, where matrix inversions are effectively eliminated. The whole algorithm works in a stepwise manner, invoking either an incremental or decremental movement for including or excluding one model regressor into, or from, the predictive model at every step. The computational complexity is thereby analysed with the pseudo code provided. Actual experimental results from both single-step ahead (i. e., 15 mins) and multi-step ahead predictions are finally produced and analysed on a UK pilot area with various types of monitoring data made available, demonstrating the efficiency and effectiveness of the proposed approach...|$|R
40|$|International audienceThis paper {{addresses}} {{the problem of}} controlling a system, subject to disturbances, to prevent exit from a safe region of the state space. Problems of this nature are encountered in many different contexts, for example in the control of tanks to avoid <b>overflow</b> and of <b>operation</b> of telecommunications systems to avoid the failing of a communications link. The proposed control methodology is based on solving a differential game, in which a feedback control is found that minimizes the disturbance energy to force the state out of the safe region. Such controls also have interpretations in terms of stochastic exit-time problems. We announce {{a new class of}} exit problems, including problems with high state dimension, for which the related game can be simply computed. The proposed solution technique involves the on-line solution of $N$ optimal control problems where, typically, $N$ is small. Accordingly, the computational effort is several times larger, but still of the same order of magnitude, as that involved in implementing a standard non-linear model predictive controller...|$|R
40|$|This paper {{advances}} {{the state}} of the art in abstract interpretation of machine code. It tackles two of the biggest challenges in machine-code analysis: (1) holding onto invariants about values in memory, and (2) identifying affine-inequality invariants while handling <b>overflow</b> in arithmetic <b>operations</b> over bit-vector data-types. Most current approaches either capture relations only among registers (and ignore memory entirely), or make potentially unsound assumptions when handling memory. Furthermore, existing bit-vector domains are able to represent either relational affine equalities or non-relational inequalities (e. g., intervals). The key insight to tackling both challenges is to define a new domain combinator (denoted by V), called the view-product combinator. V constructs a reduced product of two domains in which shared view-variables are used to communicate information among the domains. V applied to a non-relational memory domain and a relational bit-vector affine-equality domain constructs the Bit-Vector Memory-Equality Domain (BVME), a domain of bit-vector affine-equalities over memory and registers. V applied to the BVME domain and a bit-vector interval domain constructs the Bit-Vector Memory-Inequality Domain, a domain of relational bitvector affine-inequalities over memory and registers...|$|R
40|$|The {{problem of}} finding an optimal bipartition of a {{rectangle}} set {{has a direct}} impact on query performance of dynamic R-trees. During update <b>operations,</b> <b>overflowed</b> nodes need to be split (bipartitioned) with the goal of minimizing resultant expected query time. The previous algorithm for optimal node splitting requires exponential time. One contribution of this paper is a polynomial time algorithm for finding optimal bipartitions for any objective function whose value depends exclusively on the bounding hyper-rectangles of the ensuing partitions. The algorithm runs in O(n) time where d ? 1 is the number of dimensions of the input. Experimental studies indicate that the use of optimal splits alone results in improvements of query performance of only between 5 % and 15 % when compared to other heuristics. Thus, a second contribution is to demonstrate the near optimality of previous split heuristics, a fact that suggests that research should focus on global rather than local optimization issues. Finally, we propose a new dynamic R-tree insertion method that uses a more global restructuring heuristic when processing node overflows. When coupled wit...|$|R
40|$|Abstract We {{present a}} new idea to adapt {{relational}} abstract domains {{to the analysis of}} IEEE 754 -compliant floating-point numbers in order to statically detect, through Abstract Interpretation-based static analyses, potential floating-point run-time exceptions such as <b>overflows</b> or invalid <b>operations.</b> In order to take the non-linearity of rounding into account, expressions are modeled as linear forms with interval coefficients. We show how to extend already existing numerical abstract domains, such as the octagon abstract domain, to efficiently abstract transfer functions based on interval linear forms. We discuss specific fixpoint stabilization techniques and give some experimental results. 1 Introduction It is a well-established fact, since the failure of the Ariane 5 launcher in 1996, that run-time errors in critical embedded software can cause great financial [...] and human [...] losses. Nowadays, embedded software {{is becoming more and more}} complex. One particular trend is to abandon fixed-point arithmetics in favor of floating-point computations. Unfortunately, floating-point models are quite complex and features such as rounding and special numbers (infinities, NaN, etc.) are not always understood by programmers. This has already led to catastrophic behaviors, such as the Patriot missile story told in [16]. Much work is concerned about the precision of the computations, that is to say, characterizing the amount and cause of drift between a computation on perfect reals and the corresponding floating-point implementation. Ours is not. We seek to prove that an exceptional behavior (such as division by zero or overflow) will not occur in any execution of the analyzed program. While this is a simpler problem, our goal is to scale up to programs of hundreds of thousands of lines with full data coverage and very few (even none) false alarms...|$|R
40|$|The {{particle}} size or crystal size distribution (PSD or CSD) {{of a solid}} product from a crystallizer is important in handling the solid. CSD related properties might be improved with larger {{particle size}}. The principle of particle size increase in continuous crystallization processes is to remove fine particles {{at a faster rate}} than large ones. Two technologies based on this principle are the Double Draw-Off (DDO) and the Fines Dissolving (FD) crystallizer configurations. Design charts were developed for the Fines Dissolving crystallizer. It was found that the particle size increase passes through a maximum value as the fines classification cut size is increased. Based on this information a design protocol was suggested for the FD crystallizer. A limited amount of data are required for this method of design. The modified DDO crystallizer configuration was developed in order to obtain particle size increase in processes with high natural slurry density for which a build-up of solid is impractical. This involved a recycle of a part of the <b>overflow</b> (in DDO <b>operation)</b> after further classification of particles to remove fines in a size range L(F 1) to L(F 2), thus controling the slurry density in the crystallizer. Design equations and design charts for this configuration were developed. Analysis showed that a stream with some fines in it might be more effective in decreasing the slurry density than a clear filtered liquor. Particle size increase was demonstrated for sodium chloride crystallization in caustic liquor using the FD, DDO and modified DDO crystallizers. A fines/feed flow modification as well as actual fines dissolution was used in the FD experiments. Significant size increase was observed in both cases. These experiments indicated that appreciable dissolution cost would be involved in FD operation. The DDO experiments produced large crystal particles with associated increase in slurry density. Slurry density information from large scale operations indicated that DDO operation would be possible for DDO ratios upto about 2. 5. The modified DDO configuration also produced larger particles. However, size increases were less than expected. Loss of supersaturation outside the crystallizer might be the reason. Appreciable reduction of crystallizer vessel fouling was observed in the DDO and modified DDO experiments. Randolph et al. (1990) demonstrated significant particle size increase for calcium sulfite precipitation in flue gas desulfurization (FGD) liquor using a DDO crystallizer. Experimental particle sizes were appreciably larger than predicted values. A partial fines dissolving model was proposed to explain this behavior. It was shown that dissolution of particles smaller than 8 μm in only about 2. 8 % of the recycle stream was enough for the additional size increase...|$|R

