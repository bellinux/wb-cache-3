3179|7448|Public
5|$|While Microsoft largely {{failed to}} {{participate}} in the rise of the Internet in the early 1990s, some of the key technologies in which the company had invested to enter the Internet market started to pay off by the mid-90s. One of the most prominent of these was ActiveX, an application programming interface built on the Microsoft Component <b>Object</b> <b>Model</b> (COM); this enabled Microsoft and others to embed controls in many programming languages, including the company's own scripting languages, such as JScript and VBScript. ActiveX included frameworks for documents and server solutions. The company also released the Microsoft SQL Server 6.5, which had built-in support for internet applications. Later in 1997, Microsoft Office 97 as well as Internet Explorer 4.0 were released, marking the beginning of the takeover of the browser market from rival Netscape, and by agreement with Apple Computer, Internet Explorer was bundled with the Apple Macintosh operating system as well as with Windows. Windows CE 2.0, the handheld version of Windows, was released this year, including a host of bug fixes and new features designed to make it more appealing to corporate customers. In October, the Justice Department filed a motion in the federal district court in which they stated that Microsoft had violated an agreement signed in 1994, and asked the court to stop the bundling of Internet Explorer with Windows.|$|E
25|$|OLE 1.0 later {{evolved to}} become an {{architecture}} for software components known as the Component <b>Object</b> <b>Model</b> (COM), and later DCOM.|$|E
25|$|Using JavaScript on the Document <b>Object</b> <b>Model</b> (DOM) {{leads to}} the method of Dynamic HTML that allows dynamic {{creation}} and modification of a web page within the browser.|$|E
40|$|This chapter {{provides}} an overview of 3 D <b>object</b> <b>modeling</b> approaches. It begins by briefly describing the issues in 3 D <b>object</b> <b>modeling</b> and their impact {{on the quality of the}} resulting model. Then it looks in depth on classical 3 D <b>object</b> <b>modeling</b> techniques and what they involve. It discusses advantages and disadvantages and gives possible applications for each described method. The presentation is not meant to be exhaustive and it only provides a background for the study of neural networks in the context of 3 D <b>object</b> <b>modeling.</b> The chapter ends up by discussing several neural architectures and examining their use in <b>object</b> <b>modeling...</b>|$|R
40|$|Combining {{different}} and complementary <b>object</b> <b>models</b> promises {{to increase the}} robustness and generality of today's computer vision algorithms. This paper introduces a new method for combining different <b>object</b> <b>models</b> by determining a configuration of the models which maximizes their mutual information...|$|R
40|$|Combining {{different}} and complementary <b>object</b> <b>models</b> promises {{to increase the}} robustness and generality of today's computer vision algorithms. This paper introduces a new method for combining different <b>object</b> <b>models</b> by determining a configuration of the models which maximizes their mutual information. The combination scheme consequently creates a unified hypothesis from multiple <b>object</b> <b>models</b> "on the fly" without prior training. To validate {{the effectiveness of the}} proposed method, the approach is applied to the detection of faces combining the output of three different models. ...|$|R
25|$|GNOME was {{originally}} {{an acronym for}} GNU Network <b>Object</b> <b>Model</b> Environment but the acronym was dropped because it no longer reflected {{the vision of the}} GNOME project.|$|E
25|$|While {{extremely}} powerful, {{it makes}} the most common case of object orientation, a struct-like object with some associated code, unnecessarily difficult. In addition, because Perl can make no assumptions about the <b>object</b> <b>model</b> in use, method invocation cannot be optimized very well.|$|E
25|$|In {{addition}} to Web browsers and servers, JavaScript interpreters {{are embedded in}} a number of tools. Each of these applications provides its own <b>object</b> <b>model</b> that provides access to the host environment. The core JavaScript language remains mostly the same in each application.|$|E
5000|$|... 1996. Analysis Patterns: Reusable <b>Object</b> <b>Models.</b> Addison-Wesley[...]|$|R
40|$|Abstract—This paper {{presents}} {{a new approach}} to free-form <b>object</b> <b>modeling</b> from multiple range images. In most conventional approaches, successive views are registered sequentially. In contrast to the sequential approaches, we propose an integral approach which reconstructs statistically optimal <b>object</b> <b>models</b> by simultaneously aggregating all data from multiple views into a weighted least-squares (WLS) formulation. The integral approach has two components. First, a global resampling algorithm constructs partial representations of the object from individual views, so that correspondence can be established among different views. Second, a weighted least-squares algorithm integrates resampled partial representations of multiple views, using the techniques of principal component analysis with missing data (PCAMD). Experiments show that our approach is robust against noise and mismatch. Index Terms— 3 D <b>object</b> <b>modeling,</b> free-form <b>object</b> <b>modeling,</b> multiple view merging, principal component analysis, resampling, local curvature. ...|$|R
5000|$|Document <b>Object</b> <b>Model's</b> logical structure, Yahoo! subject index, DMOZ ...|$|R
25|$|Neither mobile profile {{includes}} {{support for}} the full Document <b>Object</b> <b>Model</b> (DOM), while only SVG Basic has optional support for scripting, {{but because they are}} fully compatible subsets of the full standard, most SVG graphics can still be rendered by devices which only support the mobile profiles.|$|E
25|$|Java {{introduced}} the javax.script package in version 6 {{that includes a}} JavaScript implementation based on Mozilla Rhino. Thus, Java applications can host scripts that access the application's variables and objects, much like Web browsers host scripts that access a webpage's Document <b>Object</b> <b>Model</b> (DOM).|$|E
25|$|Firefox 1.5 (and other Gecko-based browsers) {{and later}} {{versions}} use fast Document <b>Object</b> <b>Model</b> (DOM) caching. JavaScript is only executed on pageload from net or disk cache, {{but not if}} it is loaded from DOM cache. This can affect JavaScript-based tracking of browser statistics.|$|E
5000|$|Part 4: <b>Object</b> <b>Models</b> and Attributes of Manufacturing Operations ...|$|R
5000|$|Fowler, Martin: Analysis Patterns, Reusable <b>object</b> <b>models,</b> Addison-Wesley Longman, 1997[...]|$|R
5000|$|Expanded managed content {{provides}} out-of-the-box {{data and}} <b>object</b> <b>models</b> for: ...|$|R
25|$|Third-party {{bindings}} {{available for}} other languages include Clozure CL, Monobjc and NObjective (C#), Cocoa# (CLI), Cocodao and D/Objective-C Bridge, LispWorks, CamelBones (Perl), PyObjC (Python), FPC PasCocoa (Lazarus and Free Pascal), RubyCocoa (Ruby). Nu uses the Objective-C <b>object</b> <b>model</b> directly, {{and thus can}} use the Cocoa frameworks without needing a binding.|$|E
25|$|The draft {{introduced}} a change to object management. The GL 2.1 <b>object</b> <b>model</b> was built upon the state-based design of OpenGL. That is, to modify an object {{or to use}} it, one needs to bind the object to the state system, then make modifications to the state or perform function calls that use the bound object.|$|E
25|$|All {{aspects of}} an SVG {{document}} {{can be accessed}} and manipulated using scripts {{in a similar way}} to HTML. The default scripting language is ECMAScript (closely related to JavaScript) and there are defined Document <b>Object</b> <b>Model</b> (DOM) objects for every SVG element and attribute. Scripts are enclosed in <script> elements. They can run in response to pointer events, keyboard events and document events as required.|$|E
5000|$|Part 5: <b>Object</b> <b>Models</b> and Attributes of Manufacturing Operations Management ...|$|R
40|$|Time-of-Flight (ToF) cameras deliver 3 D images at 25 fps, {{offering}} {{great potential}} for developing fast <b>object</b> <b>modeling</b> algorithms. Surprisingly, this potential has not been extensively exploited up to now. A {{reason for this is}} that, since the acquired depth images are noisy, most of the available registration algorithms are hardly applicable. A further difficulty is that the transformations between views are in general not accurately known, a circumstance that multi-view <b>object</b> <b>modeling</b> algorithms do not handle properly under noisy conditions. In this work, we take into account both uncertainty sources (in images and camera poses) to generate spatially consistent 3 D <b>object</b> <b>models</b> fusing multiple views with a probabilistic approach. We propose a method to compute the covariance of the registration process, and apply an iterative state estimation method to build <b>object</b> <b>models</b> under noisy conditions. Postprint (published version...|$|R
40|$|This paper {{exploits}} {{a simple}} but general technique to extract <b>object</b> <b>models</b> from arbitrary image sequences. Such <b>object</b> <b>models</b> {{can be used to}} structure and index the image sequence. The algorithm extracts and tracks homogenous regions, which may correspond to objects or object parts. By grouping similar moving regions the algorithm constructs <b>models</b> of potential <b>objects.</b> As such, the approach is model-free {{in the sense that it}} does not use a priori models to detect, track and segment objects. On the contrary, the ultimate goal of the approach is to build such models automatically from image sequences. 1 Introduction Many algorithms exist for the recognition of known and a priori <b>modeled</b> <b>objects.</b> A priori <b>object</b> <b>models</b> also facilitate the detection and segmentation of objects. However, it is unclear how to automatically extract such <b>object</b> <b>models</b> from a camera mounted on a robot moving around in a dynamic environment. This paper exploits the possibility to detect, segment, track and [...] ...|$|R
25|$|The final {{specification}} proved {{far less}} revolutionary than the Longs Peak proposal. Instead of removing all immediate mode and fixed functionality (non-shader mode), the spec included them as deprecated features. The proposed <b>object</b> <b>model</b> was not included, and no {{plans have been}} announced to include it in any future revisions. As a result, the API remained largely the same with a few existing extensions being promoted to core functionality.|$|E
25|$|OLE 2.0 was {{the next}} {{evolution}} of OLE, sharing {{many of the same}} goals as version 1.0, but was re-implemented on top of the Component <b>Object</b> <b>Model</b> (COM) instead of using VTBLs directly. New features were OLE automation, drag-and-drop, in-place activation and structured storage. Monikers evolved from OLE 1 object names, and provided a hierarchical object and resource naming system similar to URLs or URIs, which were independently invented. Windows now has merged the two technologies supporting a URL Moniker type, and a Moniker URL scheme.|$|E
25|$|WebCore is a layout, rendering, and Document <b>Object</b> <b>Model</b> (DOM) {{library for}} HTML and Scalable Vector Graphics (SVG), {{developed}} by the WebKit project. Its full source code is licensed under the GNU Lesser General Public License (LGPL). The WebKit framework wraps WebCore and JavaScriptCore, providing an Objective-C application programming interface to the C++-based WebCore rendering engine and JavaScriptCore script engine, allowing it to be easily referenced by applications based on the Cocoa API; later versions also include a cross-platform C++ platform abstraction, and various ports provide more APIs.|$|E
40|$|Abstract. Accurate, {{efficient}} and predictable performance assessment of distributed <b>object</b> <b>models</b> {{is necessary to}} make a founded decision about which model to use in a given application domain. This article presents a performance assessment framework for distributed <b>object</b> <b>models.</b> It presents two contributions {{to the study of}} distributed object performances: it defines the performance criteria for all important aspects of distributed object computing, including single and multi-client scenarios, and, it presents the high and low-level design of the framework and gives insights into implementation details for several important distributed <b>object</b> <b>models,</b> like CORBA, RMI and RMI-IIOP. 1...|$|R
2500|$|Part 4 – <b>Object</b> <b>Models</b> & Attributes for Manufacturing Operations Management ...|$|R
5000|$|IEC 61850-90-8 — <b>Object</b> <b>Models</b> for Electrical Transportation (E-Mobility New Work) ...|$|R
25|$|Document <b>Object</b> <b>Model</b> (DOM) is an API {{that allows}} for {{navigation}} of the entire document {{as if it were}} a tree of node objects representing the document's contents. A DOM document can be created by a parser, or can be generated manually by users (with limitations). Data types in DOM nodes are abstract; implementations provide their own programming language-specific bindings. DOM implementations tend to be memory intensive, as they generally require the entire document to be loaded into memory and constructed as a tree of objects before access is allowed.|$|E
25|$|ActiveX Data Objects (ADO) is a {{high-level}} programming interface to OLE DB. It uses a hierarchical <b>object</b> <b>model</b> to allow applications to programmatically create, retrieve, update and delete data from sources supported by OLE DB. ADO {{consists of a}} series of hierarchical COM-based objects and collections, an object that acts as a container of many other objects. A programmer can directly access ADO objects to manipulate data, or can send an SQL query to the database via several ADO mechanisms. ADO is made up of nine objects and four collections.|$|E
25|$|Background Intelligent Transfer Service (BITS) is a {{component}} of Microsoft Windows 2000 and later iterations of the operating systems, which facilitates asynchronous, prioritized, and throttled transfer of files between machines using idle network bandwidth. It is most commonly used by recent versions of Windows Update, Microsoft Update, Windows Server Update Services, and System Center Configuration Manager to deliver software updates to clients, Microsoft's anti-virus scanner Microsoft Security Essentials (a later version of Windows Defender) to fetch signature updates, and is also used by Microsoft's instant messaging products to transfer files. BITS is exposed through the Component <b>Object</b> <b>Model</b> (COM).|$|E
5000|$|Part 4 - <b>Object</b> <b>Models</b> & Attributes for Manufacturing Operations Management ...|$|R
40|$|In an ever-changing {{business}} environment, {{business models}} and rules have migrated from compiled source code to external metadata. This paradigm {{better known as}} adaptive <b>object</b> <b>modelling</b> (AOM) empowers domain experts to take control over application implementations, and allows them to change an application’s business model as the business evolves. The problem with the adaptive <b>object</b> <b>modelling</b> approach is that it only caters for an evolving business model and ignores the effects of expanding functional requirements. This paper presents the Expandable Software Infrastructure (ESI), an amalgamation of adaptive <b>object</b> <b>modelling</b> and componentbased software development. Unlike other adaptive <b>object</b> <b>modelling</b> implementations where metadata have only been {{used to describe the}} data and the executing domain, the ESI takes metadata further and utilizes it to describe the data, domain, behaviour and components- providing us with a truly expandable AOM. We highlight how the relatively complex task of adaptive <b>object</b> <b>modelling</b> can be executed simply and elegantly using the Microsoft. NET Framework and further describe how core. NET technologies such as ADO. NET,. NET Compact Framework, reflection and remoting sculpted the architecture of the ESI. We conclude with the notion of moving towards a standardized, intelligent architecture that executes on multiple platforms...|$|R
5000|$|Part 1: <b>Object</b> <b>Models</b> and Attributes of Manufacturing Operations (First edition 2003-03) ...|$|R
