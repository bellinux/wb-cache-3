1|14|Public
5000|$|Over time, {{several groups}} of people worked on various {{computer}} bus standards, including the IEEE Bus Architecture Standards Committee (BASC), the IEEE [...] "Superbus" [...] study group, the <b>open</b> <b>microprocessor</b> <b>initiative</b> (OMI), the open microsystems initiative (OMI), the [...] "Gang of Nine" [...] that developed EISA, etc.|$|E
40|$|With {{a number}} of {{microprocessor}} architectures in use today, the flexibility to change from one target platform to another, in respond to market or customer demands, is decisive for competitiveness for application developers. In order to increase this flexibility, the Architecture Neutral Distribution Format (ANDF) has been developed within OMI (<b>Open</b> <b>Microprocessor</b> Systems <b>Initiative)</b> ...|$|R
5000|$|In {{the early}} 1990s, DDC-I worked on {{redesigning}} the compiler {{system for the}} wide-ranging Ada 95 revision of the language standard. They used a new object-based programming design and still adhered to a formal methods approach as well, using VDM-SL. [...] The work was done under sponsorship of the European Community-based <b>Open</b> <b>Microprocessor</b> <b>Initiative's</b> Global Language and Uniform Environment -project (OMI/GLUE), where DDC-I's role {{was to create a}} compiler targeting the Architecture Neutral Distribution Format (ANDF) intermediate form, with the intention of bringing Ada 95 to more platforms quickly. [...] As part of this work, DDC-I collaborated with the Defence Evaluation and Research Agency in expanding some of ANDF's abilities to express semantics of Ada and the fast-growing programming language C++. [...] Work in Ada-specific areas, such as bounds-checking elimination, was done to get optimal run-time performance.|$|R
40|$|As regards competitiveness, {{flexibility}} {{to change from}} one target platform to another is decisive for application developers, especially {{in the area of}} embedded systems. The Architecture Neutral Distribution Format (ANDF), developed and evaluated within OMI (<b>Open</b> <b>Microprocessor</b> Systems <b>Initiative)</b> {{has turned out to be}} a key technology to improve this flexibility. The basic idea is to break compilers into front-ends (for specific languages) and back-ends (for specific microprocessors) where both pieces easily could be replaced by a "plug-and-play" compatible component...|$|R
40|$|International audienceThe <b>Open</b> <b>Microprocessor</b> systems <b>Initiative</b> was {{the first}} {{industry}} initiative to identify and start work on standards for IP exchange. This paper looks at what has been achieved so far in a rapidly changing industry and business environment. The paper will cover a number of early prototype technical standards developed in OMI. These include on-chip interconnect (PI-Bus), which has been successfully implemented and in use {{by a number of}} manufacturers, interfacing debuggers to systems under development and others. It then looks at the commercial considerations, and how some of the research projects have tackled the whole problem of IP protection in the Internet age and in Electronic Commerce...|$|R
5000|$|Announcement of IEEE 1754 <b>Open</b> <b>Microprocessor</b> Standard http://mail-index.netbsd.org/port-sparc/1994/03/19/0000.html ...|$|R
50|$|Judging by the {{information}} available from online sources Baikal Electronics have selected a different approach compared to other Russian <b>microprocessor</b> <b>initiatives</b> such as the Elbrus-2SM, Elbrus-8S by MCST, and the Multiclet line of chips. The design by Baikal Electronics is based on existing commercial IP Cores from Imagination Technologies and ARM Holdings, compared to the more innovative approach of Multiclet, and the Elbrus CPU which has a history {{dating back to the}} Elbrus supercomputers from the Soviet Union.|$|R
50|$|The {{work of the}} Institute of Electrical and Electronics Engineers was {{sponsored}} by the Bus Architecture Standards Committee as part of the <b>Open</b> <b>Microprocessor</b> Systems Initiative.The chair of the group was Colin Whitby-Strevens, co-chair was Roland Marbot, and editor was Andrew Cofler. The standard was approved 21 September 1995 as IEEE Standard for Heterogeneous InterConnect (HIC) (Low-Cost, Low-Latency Scalable Serial Interconnect for Parallel System Construction) and published as IEEE Std 1355-1995.A trade association was formed in October 1999 and maintained a web site until 2004.|$|R
50|$|As a technologist, Williams {{has served}} as the Vice Chair of the IEEE 802.21 working group, {{secretary}} for the IEEE 1275 Open Firmware working group, and member of the IEEE 1754 <b>Open</b> <b>Microprocessor</b> working group. He authored the program SuperScore, one of the first computer editing and printing programs for music, and co-developed the Sonata font, the first music font for professional computer typesetting of music. He authored articles for the IEICE, Music Technology, Electronic Music Educator, and Klavier. He was awarded the title of Leading Scientist while working at Nokia. He holds patents in a variety of areas including network security, clustering, authentication and secure search.|$|R
50|$|S1 Core (codename Sirocco) is an <b>open</b> source {{hardware}} <b>microprocessor</b> design {{developed by}} Simply RISC. Based on Sun Microsystems' UltraSPARC T1, the S1 Core is licensed under the GNU General Public License, {{which is the}} license Sun chose for the OpenSPARC project.|$|R
40|$|This paper {{presents}} an FPGA-based fault injection tool, called FITO that supports several synthesizable fault models for dependability analysis of digital systems modeled by Verilog HDL. Using the FITO, experiments {{can be performed}} in real-time with good controllability and observability. As a case study, an <b>Open</b> RISC 1200 <b>microprocessor</b> was evaluated using an FPGA circuit. About 4000 permanent, transient, and SEUfaults were injected into this microprocessor. The {{results show that the}} FITO tool is more than 79 times faster than a pure simulation-based fault injection with only 2. 5...|$|R
40|$|The first Beowulf Linux {{commodity}} cluster {{was constructed}} at NASA's Goddard Space Flight Center in 1994 and its origins {{are a part}} of the folklore of high-end computing. In fact, the conditions within Goddard that brought the idea into being were shaped by rich historical roots, strategic pressures brought on by the ramp up of the Federal High-Performance Computing and Communications Program, growth of the <b>open</b> software movement, <b>microprocessor</b> performance trends, and the vision of key technologists. This multifaceted story is told here for the first time from the point of view of NASA project management...|$|R
40|$|Finding {{energy sources}} {{to satisfy the}} world's growing demand is one of society's {{foremost}} challenges for the next half-century. The challenge in converting sunlight to electricity via photovoltaic solar cells is dramatically reducing $/watt of delivered solar electricity. In this context the sun trackers are such devices for efficiency improvement. The diurnal and seasonal movement of earth affects the radiation intensity on the solar systems. Sun-trackers move the solar systems to compensate for these motions, keeping the best orientation relative to the sun. Although using sun-tracker is not essential, its use can boost the collected energy 10 - 100 % in different periods of time and geographical conditions. However, it is not recommended to use tracking system for small solar panels because of high energy losses in the driving systems. It is found that the power consumption by tracking device is 2 - 3 % of the increased energy. In this paper different types of sun-tracking systems are reviewed and their cons and pros are discussed. The most efficient and popular sun-tracking device {{was found to be}} in the form of polar-axis and azimuth/elevation types. Photovoltaic Sun tracker Azimuth <b>Microprocessor</b> <b>Open</b> loop control...|$|R
40|$|Energy {{efficiency}} in embedded processors is of major importance {{in order to}} achieve longer operating time for battery operated devices. In this thesis the energy efficiency of a microcontroller based on the <b>open</b> source ZPU <b>microprocessor</b> is evaluated and improved. The ZPU microprocessor is a zero-operand stack machine originally designed for small size FPGA implementation, but in this thesis the core is synthesized for implementation with a 180 nm technology library. Power estimation of the design is done both before and after synthesis in the design flow, and it is shown that power estimates based on RTL simulations (before synthesis) are 35 x faster to obtain than power estimates based on gate-level simulations (after synthesis). The RTL estimates deviate from the gate-level estimates by only 15 % and can provide faster design cycle iterations without sacrificing too much accuracy. The energy consumption of the ZPU microcontroller is reduced by implementing clock gating in the ZPU core and also implementing a tiny stack cache to reduce stack activity energy consumption. The result of these improvements show a 46 % reduction in average power consumption. The ZPU architecture is also compared to the more common MIPS architecture, and the Plasma CPU of MIPS architecture is synthesized and simulated to serve as comparison to the ZPU microcontroller. The results of the comparison with the MIPS architecture shows that the ZPU needs on average 15 x as many cycles and 3 x as many memory accesses to complete the benchmark programs as the MIPS does...|$|R
40|$|Advances in {{the design}} and {{manufacture}} of microelectronic devices since the 1960 s have enabled embedded computers that are ubiquitous. Microprocessors, the core component in modern computers, and their architectures have evolved continuously over this time, too. During the 1980 s a new architectural approach, favoring a reduction in design complexity, emerged and became known as reduced instruction set computer, or RISC, architectures. The mid- 1980 s also saw the beginning of a widespread change in the attitudes towards computer software. The Free Software Foundation (FSF) was set up and aimed to foster the development of free (as in freedom) and open source software, as a reaction to increasingly protective measures software vendors were taking to restrict the use of their software. The concept of less restrictive software has proved successful but it took over fifteen years before this philosophy was applied to the discipline of electronic hardware design. One of the earliest and most prominent projects to do so was initiated in the late 1990 s by a group of students aiming to develop an <b>open</b> source <b>microprocessor</b> architecture and set of implementations. Their goals were realised in the OpenRISC project, a RISC microprocessor specification and implementations. The initial development team then created OpenCores, an online open source hardware design community focusing on developing register transfer level (RTL) designs of functional cores based on the principles of the open source software movement. The application of open source principles to hardware design gathered pace throughout the decade that followed, but despite good progress early in the OpenRISC project, it slowed as the maintainers decided to pursue commercial interests and ceased development of the publicly released versions. Recent interest in the architecture, and increased uptake in use of open source hardware, has lead to a much-needed rejuvenation of the project. Twelve years on from the inception of the OpenRISC project, this work has lead to questions {{about the state of the}} open source hardware development movement, and about a possible successor to the first OpenRISC architecture. This document will discuss the underlying technologies and philosophies of the OpenRISC project, present the recent work on the platform, undertake a critical analysis of the project as a whole, and present a section on the future directions of the OpenRISC 1000 project in particular, and open source hardware development in general. Recommendations of specific work to be done on the project and arguments for the general direction of development are presented. Finally, the proposed successor architecture, OpenRISC 2000, is discussed...|$|R

