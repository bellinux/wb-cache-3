7|73|Public
5000|$|Elevators {{that reach}} the top tenant floor also require <b>overhead</b> <b>machine</b> rooms; those are {{sometimes}} put into full-size mechanical floors but most often into a mechanical penthouse, which can also contain communications gear and window-washing equipment. On most building designs this is a simple [...] "box" [...] on the roof, on others it is concealed inside a decorative spire. A consequence {{of this is that}} if the topmost mechanical floors are counted in the total, there can be {{no such thing as a}} true [...] "top-floor office" [...] in a skyscraper with this design.|$|E
30|$|The first {{objective}} function consists of nine cost components. Terms (1)–(7) {{are the same}} as those formulated by Kia et al. (2013) and calculate the total cost of intra-cell and inter-cell material handling, cell reconfiguration, machine purchase, machine <b>overhead,</b> <b>machine</b> operation, and forming cells. Finally, terms (8) and (9) which are added to the previous model are for outsourcing and inventory holding costs.|$|E
30|$|The first {{objective}} of the developed model is to minimize the total costs of intra-cell and inter-cell material handling, machine relocation, machine purchase, machine <b>overhead,</b> <b>machine</b> processing, forming cells, outsourcing and inventory holding. The second objective is to minimize the workload imbalances among cells. The main constraints are machine capability, demand satisfaction through different PP strategies, machine availability in cells or depot, machine location, cell size, machine time capacity, and material flow conservation.|$|E
50|$|In a split-axis system, the {{placement}} head {{moves in the}} X, theta and Z directions, while the PWB moves in the Y direction. As two moving components are involved, split-axis machine slightly more difficult to achieve to achieve high accuracy comparing to the <b>overhead</b> gantry <b>machine.</b> But it greatly improves placement speed.|$|R
30|$|Bashiri and Bagheri (2013) {{proposed}} a two-phase heuristic method for cell formation and operator assigning, {{where in the}} first phase, clustering technique {{and in the second}} phase, a mathematical model is used. Kia et al. (2011) presented a mathematical model for a multi-period CM system layout with fuzzy parameters. By taking the linear intra-cell machines layout, operation sequence, processing times and the machines capacity into account, the model intended to minimize the intra/inter-cell movements costs, the <b>machines</b> <b>overhead</b> costs and <b>machines</b> relocation costs.|$|R
30|$|The aim of {{this paper}} is to present a multi-objective {{mathematical}} model with an extensive coverage of important manufacturing features consisting of alternative process routings, operation sequence, processing time, production volume of parts, purchasing machine, duplicate machines, machine capacity, lot splitting, group layout, multi-rows layout of equal area facilities, flexible reconfiguration of cells, variable number of cells, and balancing of the cell workload. The first objective of our presented model related to cost components is to minimize the total costs of intra- and inter-cell material handling, machine relocation, purchasing new <b>machines,</b> <b>machine</b> <b>overhead</b> cost, <b>machine</b> processing, and forming of cells. The second objective is to minimize the imbalance of workload among cells.|$|R
40|$|The goal of {{this work}} is to explore {{architectural}} mechanisms for supporting explicit communication in cachecoherent shared memory multiprocessors. The motivation stems from the observation that applications display wide diversity in terms of sharing characteristics and hence impose different communication requirements on the system. Explicit communication mechanisms would allow tailoring the coherence management under software control to match these differing needs and strive to provide a close approximation to a zero <b>overhead</b> <b>machine</b> from the application perspective. Toward achieving these goals, we first analyze the characteristics of sharing observed in certain specific applications. We then use these characteristics to synthesize explicit communication primitives. The proposed primitives allow selectively updating a set of processors, or requesting a stream of data ahead of its intended use. These primitives are essentially generalizations of prefetch and poststore, with the abilit [...] ...|$|E
30|$|This paper {{presents}} a multi-objective mixed-integer nonlinear programming model to design a group layout of a cellular manufacturing system in a dynamic environment, in which the number of cells to be formed is variable. Cell formation (CF) and group layout (GL) are concurrently made in a dynamic environment by the integrated model, which incorporates with an extensive coverage of important manufacturing features used {{in the design of}} CMSs. Additionally, there are some features that make the presented model different from the previous studies. These features include the following: (1) the variable number of cells, (2) the integrated CF and GL decisions in a dynamic environment by a multi-objective mathematical model, and (3) two conflicting objectives that minimize the total costs (i.e., costs of intra and inter-cell material handling, machine relocation, purchasing new machines, machine <b>overhead,</b> <b>machine</b> processing, and forming cells) and minimize the imbalance of workload among cells. Furthermore, the presented model considers some limitations, such as machine capability, machine capacity, part demands satisfaction, cell size, material flow conservation, and location assignment. Four numerical examples are solved by the GAMS software to illustrate the promising results obtained by the incorporated features.|$|E
40|$|This paper {{presents}} a mixed-integer non-linear mathematical model for designing group layout of a cellular manufacturing {{system in a}} dynamic environment with variable number of cells. Decision making of cell formation (CF) and group layout (GL), two major and interrelated decisions involved {{in the design of}} a CMS, are concurrently made under a dynamic environment in this study. Another compromising aspect of this model is finding the optimal number of cells which should be formed in each period to bring flexibility for the model to reduce forming cell costs. The proposed model incorporates several design features including alternate process routings, operation sequence, processing time, production volume of parts, purchasing machines, duplicate machines, machine capacity, lot splitting, intra-cell layout, inter-cell layout, multi-rows layout of equal area facilities, flexible reconfiguration of cells and variable number of cells. The objective function of the integrated model is to minimize the total costs of intra and inter-cell material handling, machine relocation, purchasing new machines, machine <b>overhead,</b> <b>machine</b> processing and forming cells. A numerical example taken from the literature is solved by the Gams software to illustrate the features of this model...|$|E
5000|$|Materfer owns a 66,000 m2 factory with 200 machines, mainly electrofusion, folding, {{sheet metal}} cutters and <b>overhead</b> crane <b>machines.</b> In the 1980s Materfer {{employed}} 2,500 people, {{mainly in the}} manufacture of diesel locomotives, coaches and railcars for the Argentine and international markets. The factory produced about one coach per day. Materfer has also produced combine harvesters under the brand [...] "Maraní Agrinar". Nowadays the company has 400 employees working at its factory in Ferreyra.|$|R
40|$|International audienceWhile {{virtualization}} only {{introduces a}} small <b>overhead</b> on <b>machines</b> with few cores, {{this is not}} the case on larger ones. Most of the overhead on the latter machines is caused by the Non-Uniform Memory Access (NUMA) architecture they are using. In order to reduce this overhead, this paper shows how NUMA placement heuristics can be implemented inside Xen. With an evaluation of 29 applications on a 48 -core machine, we show that the NUMA placement heuristics can multiply the performance of 9 applications by more than 2...|$|R
40|$|This paper {{presents}} a novel mixed-integer non-linear programming {{model for the}} design of a dynamic cellular manufacturing system (DCMS) based on production planning (PP) decisions and several manufacturing attributes. Such an integrated DCMS model with an extensive coverage of important design features has not been proposed yet and incorporates several manufacturing attributes including alternative process routings, operation sequence, processing time, production volume of parts, purchasing machine, duplicate machines, machine depot, machine capacity, lot splitting, material flow conservation equations, inflation coefficient, cell workload balancing, budget constraints for cell construction and machine procurement, varying number of formed cells, worker capacity, holding inventories and backorders, outsourcing part-operations, warehouse capacity, and cell reconfiguration. The objective of the integrated model is to minimize the total costs of cell construction, cell unemployment, <b>machine</b> <b>overhead</b> and <b>machine</b> processing, part-operations setup and production, outsourcing, backorders, inventory holding, material handling between system and warehouse, intra-cell and inter-cell movements, purchasing new machines, and machine relocation/installation/uninstallation. A comprehensive numerical example taken from the literature is solved by the Lingo software to illustrate the performance of the proposed model in handling the PP decisions and to investigate the incorporated manufacturing attributes in an integrated DCMS...|$|R
40|$|This paper {{presents}} a multi-objective mixed-integer nonlinear programming model to design a group layout of a cellular manufacturing system in a dynamic environment, in which the number of cells to be formed is variable. Cell formation (CF) and group layout (GL) are concurrently made in a dynamic environment by the integrated model, which incorporates with an extensive coverage of important manufacturing features used {{in the design of}} CMSs. Additionally, there are some features that make the presented model different from the previous studies. These features include the following: (1) the variable number of cells, (2) the integrated CF and GL decisions in a dynamic environment by a multi-objective mathematical model, and (3) two conflicting objectives that minimize the total costs (i. e., costs of intra and inter-cell material handling, machine relocation, purchasing new machines, machine <b>overhead,</b> <b>machine</b> processing, and forming cells) and minimize the imbalance of workload among cells. Furthermore, the presented model considers some limitations, such as machine capability, machine capacity, part demands satisfaction, cell size, material flow conservation, and location assignment. Four numerical examples are solved by the GAMS software to illustrate the promising results obtained by the incorporated features...|$|E
5|$|Exasperated, Candace {{returns to}} the circus, where Jeremy has saved a spot for her, only for the boys to mistake her for Buford and include her in his act. She is sent flying through {{the roof of the}} tent, just as Doofenshmirtz and Perry are flying <b>overhead.</b> Doofenshmirtz's <b>machine</b> activates, giving {{everyone}} in the cirque audience high-pitched voices that cause the tent to rupture. The high velocity of Doofenshmirtz's flying machine propels the tent up into the air, destroying the machine and sending Doofenshmirtz flying off (with a high voice). Jeremy gives a CD to Candace, but Candace is not at the house, but Candace then gets the CD from Jeremy.|$|R
40|$|Processor {{management}} {{deals with}} the problem of managing a distributed memory parallel machine as a partitionable resource. Most of the processor allocation strategies proposed so far are based on centralized algorithms and suffer from poor scalabilty. With an increasing number of processors in the system, the centralized data structure used to manage the resources is deemed to become the bottleneck of the system. Toovercome the scalability problem, we propose the use of distributed algorithms for processor management. For the two-dimensional mesh, several variants of distributed allocation algorithms are proposed and compared to the centralized frame slide algorithm with regard to <b>overhead</b> and <b>machine</b> utilization...|$|R
5000|$|JMSS is 100% {{owned by}} KADDB, staffed with workforce, {{equipped}} with infrastructure, {{which consists of}} 12,500M² workshops and stores, 50 tons <b>overhead</b> cranes, CNC <b>Machines</b> which include(Water Jet, Laser, 1000MT Press Brakes, CNC Plasma cutting machines, CNC tube bending) and owns heavy steel structure manufacturing up to tank assembly including hull machining machines, hull and turret manipulators and turning machines. Its activities include: ...|$|R
50|$|By the 1960s and 1970s, {{the firm}} had {{divested}} its welding, diesel engines, and prefabricated homes businesses in order to concentrate on construction and mining <b>machines,</b> <b>overhead</b> cranes, hoists, and material handing systems. Recessions in the 1970s and 1980s led the firm to shift its strategic focus to include pulp and papermaking machinery and systems and computer systems applied to military and aerospace systems.|$|R
5|$|Bertie the Brain was {{an early}} {{computer}} game, {{and one of the}} first games developed in the early history of video games. It was built in Toronto by Josef Kates for the 1950 Canadian National Exhibition. The four meter tall computer allowed exhibition attendees to play a game of tic-tac-toe against an artificial intelligence. The player entered a move on a lit keypad in the form of a three-by-three grid, and the game played out on a grid of lights <b>overhead.</b> The <b>machine</b> had an adjustable difficulty level. After two weeks on display by Rogers Majestic, the machine was disassembled at the end of the exhibition and largely forgotten as a curiosity.|$|R
25|$|Over time, her {{interests}} in social movements and politics became her main work. She was a vocal {{opponent of the}} Vietnam War, {{a member of the}} 'Jeannette Rankin Brigade', a group of notable women who fought against the war and for civil rights. In 1967 she participated in a peace march in Century City (adjacent to Beverly Hills) where she and thousands of other protestors were attacked and beaten by police and the National Guard. The President of the United States was present at the Century Plaza Hotel and helicopters were flying <b>overhead</b> with <b>machine</b> guns pointed at the marchers, but no mention of this shocking event was made on television or newspapers.|$|R
50|$|Bertie the Brain was {{an early}} {{computer}} game, {{and one of the}} first games developed in the early history of video games. It was built in Toronto by Josef Kates for the 1950 Canadian National Exhibition. The four meter tall computer allowed exhibition attendees to play a game of tic-tac-toe against an artificial intelligence. The player entered a move on a lit keypad in the form of a three-by-three grid, and the game played out on a grid of lights <b>overhead.</b> The <b>machine</b> had an adjustable difficulty level. After two weeks on display by Rogers Majestic, the machine was disassembled at the end of the exhibition and largely forgotten as a curiosity.|$|R
50|$|Over time, her {{interests}} in social movements and politics became her main work. She was a vocal {{opponent of the}} Vietnam War, {{a member of the}} 'Jeannette Rankin Brigade', a group of notable women who fought against the war and for civil rights. In 1967 she participated in a peace march in Century City (adjacent to Beverly Hills) where she and thousands of other protestors were attacked and beaten by police and the National Guard. The President of the United States was present at the Century Plaza Hotel and helicopters were flying <b>overhead</b> with <b>machine</b> guns pointed at the marchers, but no mention of this shocking event was made on television or newspapers.|$|R
40|$|International audienceAbstract {{machines}} for the strong evaluation of λ-terms (that is, under abstractions) are a mostly neglected topic, despite {{their use in}} the implementation of proof assistants and higher-order logic programming languages. This paper introduces a machine for the simplest form of strong evaluation, leftmost-outermost (call-by-name) evaluation to normal form, proving it correct, complete, and bounding its <b>overhead.</b> Such a <b>machine,</b> deemed Strong Milner Abstract Machine, is a variant of the KAM computing normal forms and using just one global environment. Its properties are studied via a special form of decoding, called a distillation, into the Linear Substitution Calculus, neatly reformulating the machine as a standard micro-step strategy for explicit substitutions, namely linear leftmost-outermost reduction, i. e. the extension to normal form of linear head reduction. Additionally, the <b>overhead</b> of the <b>machine</b> is shown to be linear both in the number of steps and {{in the size of the}} initial term, validating its design. The study highlights two distinguished features of strong machines, namely backtracking phases and their interactions with abstractions and environments...|$|R
40|$|Photograph of a {{room full}} of {{unidentified}} machinery at the University of Southern California, [s. d. ]. Three large metal machines are lined up from the foreground at right to the background at left. The machine at right has a long tank for its base, with another tank on top at right. Pipes with valves and gauges attached run from the machine to the ceiling. The machine at center is a large rectangular box with gauges on the front and a ventilation duct <b>overhead.</b> The <b>machine</b> at left has many pipes on the side. Windows covered by Venetian blinds {{can be seen in the}} background at left. The machine at right is identified as a Banbury Mixer, a machine used for mixing or compounding plastics...|$|R
30|$|When {{there is}} surplus {{processing}} capacity in a period, idle machines {{can be removed}} from the cells and transferred to the machine depot, where the idle machines are kept. This can decrease the <b>machine</b> <b>overhead</b> costs, provide empty locations in cells to accommodate required machines and shorten the distances traveled by parts among machines. Whenever it is necessary to increase the processing time capacity of the system because of high demand volume, those machines are returned to the cells.|$|R
50|$|Self-Shadowing {{methods have}} {{trade-offs}} between quality and speed {{depending on the}} desired result. To keep speed up, some techniques rely on fast and low resolution solutions which could result in wrong looking shadows which {{may be out of}} place in a scene. Others require the CPU and GPU to calculate with algorithms the exact location and shape of a shadow {{with a high level of}} accuracy. This requires a lot of computational <b>overhead,</b> which older <b>machines</b> could not handle.|$|R
40|$|Task {{scheduling}} {{is one of}} {{core technologies}} to improve the efficiency of parallel processing. A schedule is a solution of task scheduling problem, and make to cooperate the performance of parallel machines. The shorter length of schedule (makespan) is reduced, the more efficient parallel machines run. But, task scheduling problem is combinatorial optimization problem that has strongly NP hard computational complexity. Accordingly, {{it is necessary that}} to design algorithm taking account of more unforeseeable disposition in order to reduce makespan. Concerning to solve the problem, the disposition is considered with communication <b>overhead</b> between <b>machines.</b> In this paper, the authors propose new heuristic algorithms to optimize communication overhead. These are applied the focus to critical path of dependences and earliest allocation pattern of communications. The authors describe characteristics and processes of these algorithms, and our experiments show the effectiveness of the...|$|R
40|$|The method T. H. M. (machine - hour - rate) gives greater {{accuracy}} in the factories or departments, where production is largely by machinery. In the specialty literature, {{the notion of}} price - the time - the car is defined as "œa rate calculated by dividing the budgeted or estimated overhead or labour and overhead cost attributable to a machine or group of similar machines by the appropriate number of machine hours. The hours may be {{the number of hours}} for which the machine or group is expected to be operated, the number of hours which would relate to normal working for the factory, or full capacity". In a highly mechanised cost centre, majority of the overhead expenses are incurred on account of using the machine, such as, depreciation, power, repairs and maintenance, insurance, etc. This method is currently offering the most equitable basis for absorption of <b>overheads</b> in <b>machine</b> intensive cost centres. ...|$|R
30|$|The third {{example is}} {{presented}} by incorporating a machine depot feature {{into the main}} model to keep idle machines in successive periods with completely different levels of part demands. This decreases <b>machine</b> <b>overhead</b> costs and provides empty locations to accommodate required machines and configure cells more effectively. By considering machine depot, in each period that there is surplus capacity, idle machines can {{be removed from the}} cells and transferred to the machine depot. In addition, whenever it is necessary to increase the processing time capacity of the system because of high demand volume, those machines can be returned to the cells.|$|R
30|$|Xu et al. [17] have {{reviewed}} the state-of-the-art research on managing the performance <b>overhead</b> of virtual <b>machines</b> and summarize them under diverse scenarios of the infrastructure-as-a-service (IaaS), {{ranging from the}} single-server virtualization, a single mega datacenter, to multiple geodistributed datacenters. Specifically, they unveiled the causes of virtual <b>machine</b> performance <b>overhead</b> by illustrating representative scenarios, discussed the performance modeling methods with a particular focus on their accuracy and cost, and compared the overhead mitigation techniques by identifying their effectiveness and implementation complexity. Finally, they presented future research challenges pertinent to the modeling methods and mitigation techniques of virtual <b>machine</b> performance <b>overhead</b> in the IaaS cloud [17].|$|R
5000|$|The first {{strategic}} bombing efforts {{took place}} during World War I (1914-18), by the Russians with their Sikorsky Ilya Muromets bomber (the first heavy four-engine aircraft), and by the Germans using Zeppelins or long-range multi-engine Gotha aircraft. Zeppelins reached England on bombing raids by 1915, forcing the British to create extensive defense systems {{including some of the}} first anti-aircraft guns which were often used with searchlights to highlight the enemy <b>machines</b> <b>overhead.</b> Late in the war, American fliers under the command of Brig. Gen. Billy Mitchell were developing multi-aircraft [...] "mass" [...] bombing missions behind German lines, although the Armistice ended full realization of what was being planned.|$|R
40|$|The shared-memory data-parallel model {{presents}} an attractive interface for programming multiprocessors by allowing for easy management of parallel tasks while hiding {{details of the}} underlying machine architecture. Unfortunately, the shared-memory abstraction requires synchronization {{in order to maintain}} data consistency. Present compilers provide consistency between parallel code sections by enforcing a global point of synchrony with a barrier synchronization. Such a simple mechanism possesses several disadvantages. First, the required global collection of information generates significant <b>overhead</b> which leads <b>machine</b> designers to employ special hardware to support barriers. Second, global synchronization reduces parallelism by requiring needless serialization of independent tasks. This work aims to reduce the costs associated with these disadvantages by generating pairwise point-to-point synchronization between specific tasks. Implementation of point-to-point synchronization demands e [...] ...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThe problem of scheduling parallel program tasks on multiprocessor systems {{is known to}} be NP-complete in its general form. When non-determinism is added to the scheduling problem through loops and conditional branching, an optimal solution is even harder to obtain. The intractability of obtaining an optimal solution for the general scheduling problem has led to the introduction {{of a large number of}} scheduling heuristics, These heuristics consider many real world factors, such as communication <b>overhead,</b> target <b>machine</b> topology, and the tradeoff between exploiting the parallelism in a parallel program and the resulting scheduling overhead. We present the probabilistic merge heuristic [...] in which a unified schedule of all possible execution instances is generated by successively scheduling tasks in order of their execution probabilities. When a conditional task is scheduled, we first attempt to merge the task with the time slot of a previously scheduled task which is a member of a different execution instance. We have found that the merge scheduler produces schedules which are 10 % faster than previous techniques. More importantly, however, we show that the probabilistic merge heuristic is significantly more scalable [...] being able to schedule branch and precedence graphs which exceed 50 modes. [URL] Army Research Laborator...|$|R
50|$|Overhead gantry-style {{positioning}} system's placement head {{is mounted}} on a gantry beam (X-axis). During the sequence, the beam moves perpendicular to {{the direction of the}} placement head movement, which offers two degrees of freedom (X and Y alignment) in a plane parallel to the machine table. The PCB and feeders keep stationary during placement. The PCB is located on the table by identifying global and local fiducials through a vision system. This placement head moves along the axis beams to pick components from a feeder, and then moves into position to place the components. A vacuum nozzle on the placement head moves up and down vertically to provide Z-axis and rotates in the horizontal plane to provide theta angular alignment. Sometimes a secondary vision system is also applied to check the correctness and alignment of the components after pick-up and before placement.As the PCB and feeders remain stationary in the placement sequence, the additional sources of positional inaccuracy are eliminated. <b>Overhead</b> gantry-style <b>machine</b> has the best placement accuracy among all types and is utilized by flexible placers exclusively. It offers greater flexibility and accuracy, but cannot match the speeds of other styles. Machines with multiple gantries can achieve faster speed.|$|R
40|$|Abstract—The {{performance}} of fine-grained {{applications such as}} Parallel Discrete Event Simulation (PDES) is limited by communication overheads. Multi-core architectures with tightly integrated cores on a single chip can substantially reduce the communication cost. The number of cores available on such machines remains low. To scale the simulation, {{it is important to}} be able to effectively use Clusters of Multicores (CMs). However, the high communication <b>overheads</b> between remote <b>machines</b> can significantly limit scalability. It is unclear if, in the presence of relatively slow links, there is a benefit of having the low latency between the cores on the same machine. In this paper, we first extended a multithreaded PDES simulator to support CMs. In addition, we show that remote communication forms a primary challenge to scalability due to both latency and message processing software overheads. I...|$|R
40|$|An {{algorithm}} for deadlock-free routing in {{bidirectional ring}} structures in multicomputer networks is presented. This algorithm provides greater throughput and lower message latencies {{than those of}} previously presented ring routing algorithms. Insight into these results is given by a message traffic analysis, and increased performance for wormhole-routed networks is quantified through simulation experiments. Additionally, a routing element which implements this algorithm is shown to be simpler and faster than that for a currently-used algorithm. Keywords: Multicomputer Networks, Routing, Virtual Channels 1 Introduction First generation distributed-memory multicomputers such as the Cosmic Cube [10] used "store-and-forward" packet-switching methods for routing messages among the multicomputer nodes. The present generation of multicomputers is able to reduce hardware communication <b>overheads</b> of first-generation <b>machines</b> by over two orders of magnitude by employing innovative routing techni [...] ...|$|R
40|$|An {{analytical}} model for obtaining performance measures in multicomputer networks which use wormhole routing is presented. Unlike previous wormhole routing models, the model introduced {{in this paper}} is accurate and quite simple. The model is validated through flit-level simulation experiments and is sufficiently general to be extended for several networks, including k-ary n-cubes, and related routing paradigms, such as virtual cut-through. The value of this model is exhibited through its application to current networks to indicate cost-effective augmentations which result in significant performance improvements. NOTE: A List of Symbols is provided in Appendix A. 1 Introduction First generation distributed-memory multicomputers such as the Cosmic Cube [20], used "store-and-forward" packet-switching methods for routing messages among the multicomputer nodes. The present generation of multicomputers are able to reduce hardware communication <b>overheads</b> of first-generation <b>machines</b> by over [...] ...|$|R
