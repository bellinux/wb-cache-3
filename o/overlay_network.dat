2232|1618|Public
25|$|The {{keyspace}} partitioning and <b>overlay</b> <b>network</b> {{components are}} described below {{with the goal}} of capturing the principal ideas common to most DHTs; many designs differ in the details.|$|E
25|$|Aside from routing, {{there exist}} many {{algorithms}} that exploit {{the structure of}} the <b>overlay</b> <b>network</b> for sending a message to all nodes, or a subset of nodes, in a DHT. These algorithms are used by applications to do overlay multicast, range queries, or to collect statistics. Two systems that are based on this approach are Structella, which implements flooding and random walks on a Pastry overlay, and DQ-DHT, which implements a dynamic querying search algorithm over a Chord network.|$|E
25|$|Kademlia is a {{distributed}} {{hash table}} for decentralized peer-to-peer computer networks designed by Petar Maymounkov and David Mazières in 2002. It specifies {{the structure of}} the network and the exchange of information through node lookups. Kademlia nodes communicate among themselves using UDP. A virtual or <b>overlay</b> <b>network</b> is formed by the participant nodes. Each node is identified by a number or node ID. The node ID serves not only as identification, but the Kademlia algorithm uses the node ID to locate values (usually file hashes or keywords). In fact, the node ID provides a direct map to file hashes and that node stores information on where to obtain the file or resource.|$|E
40|$|<b>Overlay</b> <b>networks</b> are a {{technique}} whereby application developers create virtual customized networks {{on top of}} physical networks. Recent implementations of peer-to-peer applications such as file sharing and VoIP have increasingly meant that <b>overlay</b> <b>networks</b> have almost become ubiquitous. As a result, future <b>overlay</b> <b>networks</b> will increasingly coexist on the same node. A number of middleware frameworks such as GRIDKIT [1], P 2 [2] and ODIN-S [3] currently offer support for the co-existence of multiple <b>overlay</b> <b>networks.</b> However, co-existing <b>overlay</b> <b>networks</b> interfere with each other’s performance either through competition for resources {{or the lack of}} collaboration between them. This paper introduces an approach called virtual overlays which manages competition and collaboration between co-existing <b>overlay</b> <b>networks</b> {{in a way that is}} expressive, flexible, configurable and dynamically adaptable...|$|R
40|$|Simultaneous <b>overlay</b> <b>networks</b> {{compete for}} network {{resources}} and disrupt each other. If they cooperate with each other, the collective performance {{can be improved}} and they can coexist comfortably. Taking inspiration from biology, {{in this paper we}} present a model of symbiotic <b>overlay</b> <b>networks.</b> Coexisting <b>overlay</b> <b>networks</b> dynamically evolve, interact with each other, and change their internal structures. <b>Overlay</b> <b>networks</b> in a symbiotic condition eventually establish the strong relationship and finally merge into one. We also evaluate the effect of interconnection of two <b>overlay</b> <b>networks</b> from the viewpoint of the robustness and the rate of message dissemination. 1...|$|R
40|$|This {{technical}} report {{consists of the}} current state of the art in <b>overlay</b> <b>networks</b> and dynamic routing with tra c prediction. Introduction to the <b>overlay</b> <b>networks</b> is followed by routing speci cs in <b>overlay</b> <b>networks.</b> Subsequent chapters describe routing metrics and parameters measured in <b>overlay</b> <b>networks.</b> Following chapter introduces time series prediction algorithms and methods. The last chapter brings a description of the further work and the goals of the Ph. D. thesis followed by summary...|$|R
2500|$|Each node {{maintains}} {{a set of}} links to other nodes (its neighbors or routing table) [...] Together, these links form the <b>overlay</b> <b>network.</b> A node picks its neighbors according to a certain structure, called the network's topology.|$|E
2500|$|The {{structure}} of a DHT can be decomposed into several main components. [...] The foundation is an abstract keyspace, such as the set of 160-bit strings. A keyspace partitioning scheme splits ownership of this keyspace among the participating nodes. An <b>overlay</b> <b>network</b> then connects the nodes, allowing them to find the owner of any given key in the keyspace.|$|E
2500|$|Tor is free {{software}} for enabling anonymous communication. The name {{is derived from}} an acronym for the original software project name [...] "The Onion Router". Tor directs Internet traffic through a free, worldwide, volunteer <b>overlay</b> <b>network</b> consisting of more than seven thousand relays to conceal a user's location and usage from anyone conducting network surveillance or traffic analysis. Using Tor {{makes it more difficult}} for Internet activity to {{be traced back to the}} user: this includes [...] "visits to Web sites, online posts, instant messages, and other communication forms". Tor's use is intended to protect the personal privacy of users, as well as their freedom and ability to conduct confidential communication by keeping their Internet activities from being monitored.|$|E
40|$|Structured {{peer-to-peer}} <b>overlay</b> <b>networks</b> {{have recently}} emerged as good candidate infrastructure for building novel large-scale and robust Internet applications in which participating peers share computing resources as equals. In {{the past three}} year, various structured peer-to-peer <b>overlay</b> <b>networks</b> have been proposed, and probably more are to come. We present a framework for understanding, analyzing and designing structured peer-to-peer <b>overlay</b> <b>networks.</b> The main objective of the paper is to provide practical guidelines {{for the design of}} structured <b>overlay</b> <b>networks</b> by identifying a fundamental element in the construction of overlay networks: the embedding of k¡ary trees. Then, a number of e®ective techniques for maintaining these <b>overlay</b> <b>networks</b> are discussed. The proposed framework has been e®ective {{in the development of the}} DKS system, whose preliminary design appears in [2]. 1...|$|R
40|$|This paper {{presents}} {{an overview of}} the implementation of Application Layer Multicast (ALM) in OverSim, a simulation framework designed specifically for simulating <b>overlay</b> <b>networks.</b> OverSim builds upon the OMNeT++ discrete event simulator. In addition, the paper presents guidelines for further research work based on reliable and Quality of Service (QoS) -aware multicast <b>overlay</b> <b>networks.</b> This research work is part of a bigger research project, called "Routing in <b>Overlay</b> <b>Networks</b> (ROVER) " which is focused on unicast and multicast routing in <b>overlay</b> <b>networks</b> with QoS guarantees and congestion control facilities on top of existing and future Peer-to-Peer (P 2 P) networks...|$|R
40|$|<b>Overlay</b> <b>networks</b> {{create new}} {{networking}} services using nodes that communicate using pre-existing networks. They are often optimized for specific applications and targeted at niche vertical domains, but lack interoperability with which their functionalities can be shared. MOSAIC is a declarative platform for constructing new <b>overlay</b> <b>networks</b> from multiple existing overlays, each possessing {{a subset of}} the desired new network’s characteristics. This paper focuses on the design and implementation of MOSAIC: composition and deployment of control and/or data plane functions of different <b>overlay</b> <b>networks,</b> dynamic compositions of <b>overlay</b> <b>networks</b> to meet changing application needs and network conditions, and seamless support for legacy applications. MOSAIC overlays are specified using Mozlog, a new declarative language for expressing overlay properties independently from their particular implementation or underlying network. MOSAIC is validated experimentally using compositions specified in Mozlog in order to create new <b>overlay</b> <b>networks</b> with compositions of their functions: the i 3 indirectio...|$|R
2500|$|Once these {{components}} are in place, a typical {{use of the}} DHT for storage and retrieval might proceed as follows. Suppose the keyspace is the set of 160-bit strings. To index a file with given [...] and [...] in the DHT, the SHA-1 hash of [...] is generated, producing a 160-bit key , and a message [...] is sent to any node participating in the DHT. The message is forwarded from node to node through the <b>overlay</b> <b>network</b> until it reaches the single node responsible for key [...] as specified by the keyspace partitioning. That node then stores the key and the data. Any other client can then retrieve {{the contents of the}} file by again hashing [...] to produce [...] and asking any DHT node to find the data associated with [...] with a message [...] The message will again be routed through the overlay to the node responsible for , which will reply with the stored [...]|$|E
50|$|To find a node {{already in}} the <b>overlay</b> <b>network,</b> {{bootstrapping}} nodes {{may be used to}} inform the joining node of IP addresses of nodes currently in the <b>overlay</b> <b>network.</b>|$|E
50|$|A {{bootstrapping}} node, {{also known}} as a rendezvous host, is a node in an <b>overlay</b> <b>network</b> that provides initial configuration information to newly joining nodes so that they may successfully join the <b>overlay</b> <b>network.</b>|$|E
40|$|Abstract. This paper {{presents}} Synapse, a scalable {{protocol for}} information retrieval over the inter-connection of heterogeneous <b>overlay</b> <b>networks.</b> Applications {{on top of}} Synapse see those intra-overlay networks as a unique inter-overlay network. Scalability in Synapse is achieved via co-located nodes, i. e. nodes {{that are part of}} multiple <b>overlay</b> <b>networks</b> at the same time. Co-located nodes, playing the role of neural synapses and connected to several <b>overlay</b> <b>networks,</b> allow a larger search area and provide alternative routing. Synapse can either work with “open” overlays adapting their protocol to synapse interconnection requirements, or with “closed ” overlays that will not accept any change to their protocol. Results from simulation and experiments show that Synapse is scalable, with a communication and state overhead scaling similarly as the networks interconnected. Thanks to alternate routing paths, Synapse also gives a practical solution to network partitions. We precisely capture the behavior of traditional metrics of <b>overlay</b> <b>networks</b> within Synapse and present results from simulations as well as some actual experiments of a client prototype on the Grid’ 5000 platform. The prototype developed implements the Synapse protocol in the particular case of the interconnection of many Chord <b>overlay</b> <b>networks.</b> Keywords. Peer-to-peer, <b>overlay</b> <b>networks,</b> information retrieval. ...|$|R
40|$|Many Internet {{applications}} use <b>overlay</b> <b>networks</b> {{as their}} basic facilities, like resource sharing, collaborative computing, and so on. Considering the communication cost, most <b>overlay</b> <b>networks</b> set limited hops for routing messages, {{so as to}} restrain routing within a certain scope. In this paper we describe partition nodes in such limitedrouting-hop <b>overlay</b> <b>networks,</b> whose failure may potentially lead the overlay topology to be partitioned so that seriously affect its performance. We propose a proactive, distributed method to detect partition nodes and then reduce them by changing them into normal nodes. The results of simulations on both real-trace and generated topologies, scaling from 500 to 10000 nodes, show that our method can effectively detect and reduce partition nodes and improve the connectivity and fault tolerance of <b>overlay</b> <b>networks.</b> ...|$|R
40|$|Abstract <b>Overlay</b> <b>networks</b> achieve new {{functionality}} {{and enhance}} network performance by allowing routing {{to be controlled}} at the appli-cation layer. However, these approaches result in degradations of underlying networks due to the selfish behavior of <b>overlay</b> <b>networks.</b> In this paper, we investigate the stability of virtual network topology (VNT) control under the <b>overlay</b> <b>networks</b> that perform dynamic routing updates. We reveal that the dynamics of routing on <b>overlay</b> <b>networks</b> cause a high fluctuation in the traffic demand, which leads to significant instability of VNT control. To overcome the instability induced by the overlay routing, we introduce three extensions, utilization hysteresis, two-state utilization hysteresis, and filtering, to VNT control. Through simulations, we show that our methods achieve the stability against overlay routing without {{the loss of the}} adaptability for changes in the traffic demand...|$|R
50|$|Another {{example of}} an <b>overlay</b> <b>network</b> is a {{distributed}} hash table, which maps keys to nodes in the network. In this case, the underlying network is an IP network, and the <b>overlay</b> <b>network</b> is a table (actually a map) indexed by keys.|$|E
50|$|For example, Akamai Technologies manages an <b>overlay</b> <b>network</b> which {{provides}} reliable, efficient content delivery (a kind of multicast). Academic research includes End System Multicast and Overcast for multicast; RON (Resilient <b>Overlay</b> <b>Network)</b> for resilient routing; and OverQoS for {{quality of service}} guarantees, among others.|$|E
50|$|An <b>overlay</b> <b>network</b> is {{a virtual}} {{computer}} network that is built {{on top of another}} network. Nodes in the <b>overlay</b> <b>network</b> are connected by virtual or logical links. Each link corresponds to a path, perhaps through many physical links, in the underlying network. The topology of the <b>overlay</b> <b>network</b> may (and often does) differ from that of the underlying one. For example, many peer-to-peer networks are overlay networks. They are organized as nodes of a virtual system of links that run on top of the Internet.|$|E
40|$|<b>Overlay</b> <b>networks</b> provide {{important}} routing functionality not easily supported {{directly by the}} Internet. Distributed Hash Tables (DHTs) have been proposed to support such <b>overlay</b> <b>networks.</b> While it is often straightforward to support <b>overlay</b> <b>networks</b> on DHTs, this choice can be questioned. DHTs dictate routes that are not optimal, and DHTs are hard to secure. As <b>overlay</b> <b>networks</b> are beginning to be deployed for critical applications, efficiency and security are becoming important attributes. We present an alternative support structure called Fireflies. Fireflies provides each of its members with a complete view of its live peers. A small subset of these peers are marked as neighbors. With high probability, the mesh formed by the members and their neighbor links has a diameter logarithmic {{in the number of}} live members, and connects all the reachable members that are not Byzantine. Fireflies uses several randomized algorithms, which are briefly described. We also discuss how Fireflies may be used to build intrusion-tolerant <b>overlay</b> <b>networks.</b> 0 We are supported by DARPA’s SRS program, a MUR...|$|R
40|$|In {{this age}} of {{information}}, new models of information exchange methodologies based on <b>overlay</b> <b>networks</b> are gaining popular attention. <b>Overlay</b> <b>networks</b> provide a logical interconnection topology over an existing physical <b>network.</b> <b>Overlay</b> <b>networks</b> offer bene-fits such as ease of implementation, flexibility, adaptability, and incremental deployability. Due to {{the wide range of}} applications and advantages, formal study of <b>overlay</b> <b>networks</b> is required to understand the various research challenges in this context. In this thesis, we study two classes of <b>overlay</b> <b>networks</b> namely peer-to-peer networks and wireless ad hoc networks. Our focus will be along two central issues in overlay net-works: how to arrive at efficient topologies and how to provide efficient routing strategies. Peer-to-peer networks have gained a lot of research attention in recent years for various reasons. Despite many advances however, fundamental questions such as how to design deterministic constructions, and how to organize peers of non-uniform bandwidth have remained open. In this thesis, we answer these questions by providing a deterministic overlay topology, Pagoda, {{that can be used for}} efficient routing, data management an...|$|R
40|$|<b>Overlay</b> <b>networks</b> {{are used}} {{today in a}} variety of {{distributed}} systems ranging from file-sharing and storage systems to communication infrastructures. However, designing, building and adapting these overlays to the intended application and the target environment is a difficult and time consuming process. To ease the development and the deployment of such <b>overlay</b> <b>networks</b> we have implemented P 2, a system that uses a declarative logic language to express <b>overlay</b> <b>networks</b> in a highly compact and reusable form. P 2 can express a Naradastyle mesh network in 16 rules, and the Chord structured overlay in only 47 rules. P 2 directly parses and executes such specifications using a dataflow architecture to construct and maintain <b>overlay</b> <b>networks.</b> We describe the P 2 approach, how our implementation works, and show by experiment its promising trade-off point between specification complexity and performance...|$|R
50|$|HyperCast {{introduces}} {{the concept of}} overlay sockets as endpoints of communication, i.e. a node, in an <b>overlay</b> <b>network.</b> A HyperCast <b>overlay</b> <b>network</b> is simply viewed {{as a collection of}} overlay sockets. Each overlay socket has a logical address and a physical address. The logical address is a unique address that identiﬁes the node in the <b>overlay</b> <b>network</b> as well as to route overlay messages among overlay sockets. The physical address of the overlay socket speciﬁes an address in the underlying network where an overlay socket can send and receive messages.|$|E
5000|$|... #Caption: Figure 2: <b>Overlay</b> <b>network</b> {{broken up}} into logical layers ...|$|E
5000|$|I2P, an <b>overlay</b> <b>network</b> used {{to browse}} the Internet anonymously.|$|E
40|$|Nowadays, a {{very useful}} {{platform}} is becoming widely used to deploy new services and applications in the Internet: the <b>overlay</b> <b>networks.</b> These networks create a virtual topology on top of existing ones {{with the purpose of}} providing several different services such as file sharing or content delivery. This survey focuses on diverse research issues concerning <b>overlay</b> <b>networks</b> applicability and management strategies required for emergent network environments. In this way, mobility, security, scalability, dependability and resource constraints are studied with regard to <b>overlay</b> <b>networks.</b> We finally discuss the evolution of these networks in order to satisfy new technological improvements...|$|R
40|$|<b>Overlay</b> <b>{{networks}}</b> are networks {{operating on}} the inter-domain level, where the edge hosts learn of each other and, based on knowledge of underlying network performance, they form loosely coupled neighboring relationships. These relationships {{can be used to}} induce a specific graph, where nodes are representing hosts and edges are representing neighboring relationships. Graph abstraction and the associated graph theory can be further used to formulate routing algorithms on <b>overlay</b> <b>networks.</b> The main advantage of <b>overlay</b> <b>networks</b> is that they offer the possibility to augment the IP routing as well as the QoS functionality offered by the Internet...|$|R
40|$|This paper {{presents}} Synapse, a scalable {{protocol for}} information retrieval over the inter-connection of heterogeneous <b>overlay</b> <b>networks.</b> Applications {{on top of}} Synapse see this collection of intra-overlay networks as a unique inter-overlay network. Scalability in Synapse is achieved via co-located nodes, i. e., nodes {{that are part of}} multiple <b>overlay</b> <b>networks</b> at the same time. Co-located nodes, playing the role of neural synapses and connected to several <b>overlay</b> <b>networks,</b> provide a larger search area and provide alternative routing. Synapse can either work with "open'' overlays adapting their protocol to synapse interconnection requirements, or with "closed'' overlays that will not accept any change to their protocol. Results from simulation and experiments show that Synapse is scalable, with a communication and state overhead scaling similarly as the networks interconnected. thanks to alternate routing paths, Synapse also gives a practical solution to network partitions. We precisely capture the behavior of traditional metrics of <b>overlay</b> <b>networks</b> within Synapse and present results from simulations as well as some actual experiments of a client prototype on the Grid' 5000 platform. The prototype developed implements the Synapse protocol in the particulare case of the inter-connection of many Chord <b>overlay</b> <b>networks...</b>|$|R
5000|$|A {{bootstrapping}} node, {{also known}} as a rendezvous host, is a node in an <b>overlay</b> <b>network</b> that provides initial configuration information to newly joining nodes so that they may successfully join the <b>overlay</b> <b>network.</b> [...] Bootstrapping nodes are predominantly found in decentralized peer-to-peer (P2P) networks because of the dynamically changing identities and configurations of member nodes in these networks.|$|E
50|$|Originally, Voodoo Chat was run in {{a server}} {{hierarchy}} within an <b>overlay</b> <b>network.</b>|$|E
50|$|An <b>overlay</b> <b>network</b> is a {{computer}} network that is built {{on top of another}} network. Nodes in the <b>overlay</b> <b>network</b> {{can be thought of as}} being connected by virtual or logical links, each of which corresponds to a path, perhaps through many physical links, in the underlying network. For example, distributed systems such as peer-to-peer networks and client-server applications are overlay networks because their nodes run on top of the Internet. The Internet was originally built as an overlay upon the telephone network, while today (through the advent of VoIP), the telephone network is increasingly turning into an <b>overlay</b> <b>network</b> built on top of the Internet.|$|E
40|$|<b>Overlay</b> <b>networks</b> {{create new}} {{networking}} services across nodes that communicate using pre-existing networks. MOSAIC is a unified declarative platform for constructing new <b>overlay</b> <b>networks</b> from multiple existing overlays, each possessing {{a subset of}} the desired new <b>network’s</b> characteristics. MOSAIC <b>overlays</b> are specified using Mozlog, a new declarative language for expressing overlay properties independently from their particular implementation or underlying network. This paper focuses on the runtime aspects of MOSAIC: composition and deployment of control and/or data plane functions of different <b>overlay</b> <b>networks,</b> dynamic compositions of <b>overlay</b> <b>networks</b> to meet changing application needs and network conditions, and seamless support for legacy applications. MOSAIC is validated experimentally using compositions specified in Mozlog: we combine an indirection overlay that supports mobility (i 3), a resilient overlay (RON), and scalable lookups (Chord), to provide new <b>overlay</b> <b>networks</b> with new functions. MOSAIC uses runtime composition to simultaneously deliver application-aware mobility, NAT traversal and reliability. We further demonstrate MO-SAIC’s dynamic composition capabilities by Chord switching its underlay from IP to RON at runtime. These benefits are obtained at a low performance cost, as demonstrated by measurements on both a local cluster and PlanetLab. 1...|$|R
40|$|Reliable {{point-to-point}} {{communication is}} usually achieved in <b>overlay</b> <b>networks</b> by applying TCP {{on the end}} nodes of a connection. This paper presents a hop-by-hop reliability approach that considerably reduces the latency and jitter of reliable connections. Our approach is feasible and beneficial in <b>overlay</b> <b>networks</b> {{that do not have}} the scalability and interoperability requirements of the global Internet...|$|R
40|$|Abstract—Many {{multicast}} <b>overlay</b> <b>networks</b> maintain application-specific {{performance goals}} by dynamically adapting the overlay structure when the monitored performance becomes inadequate. This adaptation {{results in an}} unstructured overlay where no neighbor selection constraints are imposed. Although such networks provide resilience to benign failures, they are susceptible to attacks conducted by adversaries that compromise overlay nodes. Previous defense solutions proposed to address attacks against <b>overlay</b> <b>networks</b> rely on strong organizational constraints and are not effective for unstructured overlays. In this work, we identify, demonstrate and mitigate insider attacks against measurement-based adaptation mechanisms in unstructured multicast <b>overlay</b> <b>networks.</b> We propose techniques to decrease the number of incorrect adaptations by using outlier detection and limit the impact of malicious nodes by aggregating local information to derive global reputation for each node. We demonstrate the attacks and mitigation techniques through real-life deployments of a mature overlay multicast system. Index Terms—Adaptivity, insider attacks, <b>overlay</b> <b>networks,</b> security. I...|$|R
