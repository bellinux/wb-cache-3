1138|696|Public
2500|$|... {{was issued}} to Miller on July 20, 2010, as the {{inventor}} of a technique for <b>object-oriented</b> <b>database</b> management.|$|E
50|$|Its ObjectStore <b>object-oriented</b> <b>database</b> {{shipped in}} 1990.|$|E
50|$|Genera {{provides}} a client for the Statice <b>object-oriented</b> <b>database</b> from Symbolics.|$|E
40|$|Abstract: In {{this paper}} a {{run-time}} model is proposed. The run-time model enforces integrity constraints for attributes that {{are derived from}} composition and inheritance hierarchies. The run-time model is designed for enforcing the logical integrity constraints in <b>object-oriented</b> <b>databases</b> during the run-time. A new technique called detection method is designed to check the object meta data to detect and catch the <b>object-oriented</b> <b>databases</b> violation before it occurs. Furthermore, we have implemented the RTM and supported set of definitions that are for checking attribute values validity, <b>object-oriented</b> <b>databases</b> consistency, and also a method for verifying attribute values when inserting, deleting, and updating objects. Keywords: <b>Object-oriented</b> <b>databases,</b> integrity constraints, constraints violation...|$|R
40|$|Abstract—Appeared toward 1986, the <b>object-oriented</b> <b>databases</b> {{management}} systems {{had not known}} successes knew five years after their birth. One of the major difficulties is the query optimization. We propose in this paper a new approach that permits to enrich techniques of query optimization existing in the <b>object-oriented</b> <b>databases.</b> Seen success that knew the query optimization in the relational model, our approach inspires itself of these optimization techniques and enriched it {{so that they can}} support the new concepts introduced by the object databases. Keywords—Query, query optimization, relational <b>databases,</b> <b>object-oriented</b> <b>databases.</b> O I...|$|R
40|$|<b>Object-oriented</b> <b>databases</b> {{are being}} {{increasingly}} used to model non-standard applications that em-phasize modularity, composition, and rapid proto-typing. A semantic locking protocol is presented for transaction management for such <b>object-oriented</b> <b>databases.</b> In particular, the protocol incorporates the semantics of complex objects, nested executions and dynamic conflicts resulting from referentially shared objects. ...|$|R
5000|$|A terminology-oriented {{database}} builds upon an <b>object-oriented</b> <b>database,</b> often customized for {{a specific}} field.|$|E
5000|$|Enhanced Relationships in <b>Object-Oriented</b> <b>Database</b> Modeling. Danny B. Lange. In Proceedings of InfoScience '93, 1993.|$|E
5000|$|... {{was issued}} to Miller on July 20, 2010, as the {{inventor}} of a technique for <b>object-oriented</b> <b>database</b> management.|$|E
40|$|Although the {{mathematical}} foundations of relational databases {{are very well}} established, the state of affairs for <b>object-oriented</b> <b>databases</b> is much less satisfactory. We propose a semantic foundation for <b>object-oriented</b> <b>databases</b> based on a simple logic of change called rewriting logic, and a language called MaudeLog {{that is based on}} that logic. Some key advantages of our approach include its logical nature, its simplicity without any need for higher-order features, the fact that dynamic aspects are directly addressed, the rigorous integration of user-definable algebraic data types within the framework, the existence of initial models, and the integration of query, update, and programming aspects within a single declarative language. 1 Introduction Although {{the mathematical}} foundations of relational databases are very well established, the state of affairs for <b>object-oriented</b> <b>databases</b> is much less satisfactory. This is unfortunate, because <b>object-oriented</b> <b>databases</b> seem to have impor [...] ...|$|R
40|$|<b>Object-oriented</b> <b>databases</b> were {{originally}} developed {{as an alternative}} to relational database technology for the representation, storage, and access of non-traditional data forms that were increasingly found in advanced applications of database technology. After much debate regarding <b>object-oriented</b> versus relational <b>database</b> technology, <b>object-oriented</b> extensions were eventually incorporated into relational technology to create object-relational <b>databases.</b> Both <b>object-oriented</b> <b>databases</b> and object-relational databases, collectively known as object databases, provide inherent support for objec...|$|R
5000|$|<b>Object-oriented</b> <b>databases,</b> like Caché or ConceptBase. They {{can save}} objects of an {{object-oriented}} design.|$|R
50|$|The {{terminology}} {{model is}} a means for subject matter experts to express their knowledge about the subject in subject specific terms. Since the terminology model is structured rather similar to an <b>object-oriented</b> <b>database</b> schema, is can be transformed without loss of information into an <b>object-oriented</b> <b>database</b> schema. Thus, the terminology {{model is a}} method for problem analysis {{on the one side}} and a mean of defining database schema on the other side.|$|E
5000|$|D Weinreb, N Feinberg, D Gerson, C Lamb, An <b>object-oriented</b> <b>database</b> {{system to}} support an {{integrated}} programming environment, Data Engineering Bulletin, 1988 ...|$|E
5000|$|Daniel L. Weinreb and Sam J. Haradhvala, [...] "Method and {{apparatus}} for {{virtual memory}} mapping and transaction management in an <b>object-oriented</b> <b>database</b> system", U.S. Patent #5649139 ...|$|E
40|$|<b>Object-oriented</b> <b>databases</b> {{have now}} a large audience. A stan dard, the odmg one, is born to {{federate}} them. However {{we need to}} ponder on their future. In this paper we see some new needs that appear in the <b>object-oriented</b> <b>databases</b> do main. These needs are about relations between persistence and object modeling, or about persistent object models evo lution. We show how a metaobject approach can be useful to elegantly solve these problems, and we present our ap proach. 1 <b>Object-Oriented</b> <b>Databases</b> and Legacy Systems For some years, in database community, a growing interest has focused on <b>object-oriented</b> <b>databases.</b> Most of the cur rent object oriented database management systems (oodbms) are now uniform, that is, all levels, including the storage level, deal with objects. However, {{as it is shown}} in [10], the introduction of such information systems into compa nies induces many problems. On the one hand, companies have often made big investments in relational databases, and they do not wan [...] ...|$|R
40|$|Concepts {{originally}} developed in object-oriented programming languages are appearing {{in many other}} domains. There are <b>object-oriented</b> <b>databases,</b> <b>object-oriented</b> applicationframeworks andintegration platforms, evenobject-orienteduserinterfaces. Object concepts are widelyusedin distributed systems and are prominentinthe draf...|$|R
40|$|Most work on query {{optimization}} in relational and <b>object-oriented</b> <b>databases</b> has {{concentrated on}} tuning algebraic expressions {{and the physical}} access to the database contents. The attention to semantic query optimization, however, has been restricted due to its inherent complexity. We {{take a second look}} at semantic query optimization in <b>object-oriented</b> <b>databases</b> and find that reasoning techniques for concept languages developed in Artificial Intelligence apply to this problem because concept languages have been tailored for efficiency and their semantics is compatible with class and query definitions in <b>object-oriented</b> <b>databases.</b> We propose a query optimizer that recognizes subset relationships between a query and a view (a simpler query whose answer is stored) in polynomial time. Contents 1 Introduction 3 2 <b>Object-Oriented</b> <b>Databases</b> and Queries 5 2. 1 Defining an OODB Schema : : : : : : : : : : : : : : : : : : : : : : : 6 2. 2 Query Classes : : : : : : : : : : : : : : : : : : : : : : [...] ...|$|R
5000|$|Versant markets three {{commercial}} <b>object-oriented</b> <b>database</b> {{management systems}} (OODBMS), “Versant JPA,” [...] "Versant Object Database" [...] and [...] "Versant FastObjects". In addition, Versant offers the open-source database [...] "db4o".|$|E
5000|$|ODB {{provides}} an <b>object-oriented</b> <b>database</b> API {{that allows the}} application developer to perform various operations on persistent objects. The following code fragment illustrates {{the use of the}} most common operations: ...|$|E
50|$|The Zope Object Database (ZODB) is an <b>object-oriented</b> <b>database</b> for transparently and {{persistently}} storing Python objects. It {{is included}} {{as part of}} the Zope web application server, but can also be used independently of Zope.|$|E
40|$|<b>Object-oriented</b> <b>databases</b> {{are being}} {{increasingly}} used to model non-standard applications that emphasize modularity, composition, and rapid prototyping. Semantic locking protocols are presented for transaction management for such <b>object-oriented</b> <b>databases.</b> In particular, the protocol incorporates the semantics of complex objects, nested executions and dynamic conflicts resulting from referentially shared objects. Category: Research. Topic Area: Datbases, Concurrent Systems. 1 Introduction <b>Object-oriented</b> <b>databases</b> are being increasingly used to model non-standard applications. These applications place new constraints on databases design. In particular, they emphasize modularity, composition, and rapid prototyping. Often basic objects are defined, {{and more complex}} and advanced objects are composed recursively in terms of these basic objects. As a result, the traditional notion of conflict based on read and write operations may impose unnecessary constraints on the execution of transac [...] ...|$|R
40|$|This report {{presents}} a formal approach to support schema integration in <b>object-oriented</b> <b>databases.</b> The {{basis of the}} approach is a synthetic subclass order to compare classes. Classes are integrated in a natural way using a join operator w. r. t. the subclass order. In contrast with existing literature, our subclass order compares classes not only by their attributes, {{but also by the}} behaviour of their methods, leading to a more semantic approach towards schema integration in <b>object-oriented</b> <b>databases.</b> 1991 CR Categories: D. 1. 5 : [Software] Object-oriented programming, D. 2. 2 : [Software] Tools and techniques, H. 2. 1 : [Database management] Logical design. Keywords and Phrases: <b>Database</b> design, <b>Object-oriented</b> <b>databases,</b> Schema integration. Note: This research is partly funded by the Dutch Organisation for Scientific Research through NFI-grant NF 74. Contents...|$|R
40|$|This paper {{describes}} a concurrency control technique for real-time <b>object-oriented</b> <b>databases</b> that supports logical consistency and temporal consistency, {{as well as}} bounded imprecision that results from their trade-offs. The concurrency control technique uses a semantic locking mechanism within each object and user-defined conditional compatibility over the methods of the object. The semantics can specify when to sacrifice precise logical consistency to meet temporal consistency requirements. It can also specify accumulation and bounding of any resulting logical imprecision. We show that this technique, under certain general restrictions, can preserve global correctness and bound imprecision by proving it can guarantee a form of epsilon serializability specialized for <b>object-oriented</b> <b>databases.</b> Index terms: bounded imprecision real-time <b>object-oriented</b> <b>databases,</b> semantic concurrency control 1 Introduction Real-time applications such as air traffic control, autonomous vehicle [...] ...|$|R
50|$|The {{software}} {{includes a}} powerful {{graphical user interface}} with geographical coordinates, an <b>object-oriented</b> <b>database</b> and explicit representation of scenarios. Powerful network editing tools are also included. Data may be imported or exported to/from other databases and models.|$|E
50|$|Paton {{was educated}} at the University of Aberdeen {{where he was}} awarded first class Bachelor of Science degree in Computing Science in 1986 and a PhD in 1989 for {{research}} into <b>object-oriented</b> <b>database</b> systems using Prolog supervised by Peter Gray.|$|E
50|$|Atkinson {{has pursued}} a career {{working as a}} {{researcher}} in database systems in both academia and industry. Among Atkinson's best known achievements are his influential work on <b>Object-Oriented</b> <b>Database</b> Systems, as presented in the <b>Object-Oriented</b> <b>Database</b> System Manifesto (with François Bancilhon, David DeWitt, Klaus Dittrich, David Maier, and Stanley Zdonik), and his work designing OGSA-DAI, a web-service platform for distributed data access, integration and management used internationally in scientific applications. In {{the early stages of}} his career, he worked closely with Carol Linden and Neil Wiseman on the Intermediate Data Language. He identified the value of orthogonal persistence at VLDB in 1978 and led the team that built the first orthogonally persistent programming language, PS-algol, in 1980.|$|E
40|$|Some new {{strategies}} for query optimization in <b>object-oriented</b> <b>databases</b> are proposed. Complex selections and joins containing path expressions and aggregation functions are classified into different types. It is shown that {{different types of}} selections and joins require different kinds of evaluation strategies. Some selections and joins with aggregation functions can be transformed into equivalent but more efficient forms without aggregation functions. Query graphs are employed not only to represent queries in <b>object-oriented</b> <b>databases</b> and to capture different kinds of complex selections and joins but also to generate efficient query evaluation plans. 1411 1 Introduction Query optimization {{is essential to the}} performance of <b>object-oriented</b> <b>databases.</b> Considerable research has been devoted to the improvement of query processing in objectoriented database systems with encouraging progress[1]. In some previous studies, the optimization techniques developed for relational queries were [...] ...|$|R
40|$|<b>Object-oriented</b> <b>databases</b> {{integrated}} into a C++ software engineering environment promise an appealing platform for managing complex data and engineering tasks. In competitive markets like CAD for civil engineering and architecture stringent reliability and performance criteria must be met before entering into commercial products. We present a benchmark study specifically tailored to such CAD domains. The results reveal that the big promises of the ODBS lobby begin to become reality, though several areas can be pointed out where further improvements are clearly needed. Keywords: <b>Object-oriented</b> <b>databases,</b> performance benchmarks, system evaluation, CAD requirements and systems, spatial index This work was done {{under the direction of}} W. Kießling as part of the OCAD project on <b>object-oriented</b> <b>databases</b> for CAD, funded by Nemetschek Programmsystem GmbH, Munich and by the Bavarian Research Center for Knowledge-Based Systems (FORWISS). 1 Introduction Many large applications in the engineer [...] ...|$|R
5000|$|Early {{examples}} {{of using a}} zero-translation architecture in multi-tier systems {{can be traced back}} to the rise of <b>object-oriented</b> <b>databases</b> in the 1990s. See OODBMS History ...|$|R
50|$|In 1988, he co-founded Object Design, {{where he}} was one of the architects and implementors of ObjectStore, a leading {{commercial}} <b>object-oriented</b> <b>database</b> management system Object Database. It is still commercially maintained and available from Progress Software, which bought Object Design (then eXcelon, Inc.).|$|E
50|$|ConceptBase (a.k.a. ConceptBase.cc) is a {{deductive}} and <b>object-oriented</b> <b>database</b> {{management system}} developed at University of Aachen and University of Skövde. It is mainly used for conceptual modeling and metamodeling {{in the domain}} of software engineering and related domains. ConceptBase.cc is free and open-source software.|$|E
50|$|Similarly, CSV cannot {{naturally}} represent hierarchical or <b>object-oriented</b> <b>database</b> {{or other}} data. This is because every CSV record {{is expected to}} have the same structure. CSV is therefore rarely appropriate for documents such as those created with HTML, XML, or other markup or word-processing technologies.|$|E
50|$|Symbolics {{introduced}} one of {{the first}} commercial <b>object-oriented</b> <b>databases,</b> Statice, in 1989. The developers of Statice later went on to found Object Design, Inc. and create ObjectStore.|$|R
5000|$|His {{scientific}} contributions lie in {{the fields}} of database theory—comprising work on deductive <b>databases,</b> <b>object-oriented</b> <b>databases,</b> and constraint databases—as well as in fault-tolerant distributed computation and in type theory.|$|R
40|$|<b>Object-oriented</b> <b>databases</b> havebeendeveloped {{to allow}} {{applications}} to store persistent {{data in the}} form of objects. As in conventional <b>databases,</b> <b>object-oriented</b> <b>databases</b> need to support queries that allow associative access to data by describing a property of the data of interest. In particular, they should support queries over user-defined sets based on user-defined functions that compute the propertyofinterest. Tomakesuch function-based queries run faster, wemust support function-based indexes where the keys are these computed properties. Function-based indexes are harder to maintain than indexes in conventional databases because mutations that affect keys can be done without accessing an element of the indexed set...|$|R
