1|1|Public
50|$|The input for ESPRESSO is a {{function}} table of the desired functionality; {{the result is a}} minimized table, describing either the ON-cover or the <b>OFF-cover</b> of the function, depending on the selected options. By default, the product terms will be shared as much as possible by the several output functions, but the program can be instructed to handle each of the output functions separately. This allows for efficient implementation in two-level logic arrays such as a PLA (Programmable Logic Array) or a PAL (Programmable Array Logic).|$|E
5000|$|A radically {{different}} approach to this issue is followed in the ESPRESSO algorithm, developed by Brayton et al. at the University of California, Berkeley. Rather than expanding a logic function into minterms, the program manipulates [...] "cubes", representing the product terms in the ON-, DC- and <b>OFF-covers</b> iteratively. Although the minimization result is not guaranteed to be the global minimum, in practice this is very closely approximated, while the solution is always free from redundancy. Compared to the other methods, this one is essentially more efficient, reducing memory usage and computation time by several orders of magnitude. Its name reflects the way of instantly making a cup of fresh coffee. There is hardly any restriction {{to the number of}} variables, output functions and product terms of a combinational function block. In general, e.g. tens of variables with tens of output functions are readily dealt with.|$|R

