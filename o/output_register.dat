31|136|Public
5000|$|... (Output): The {{contents}} of the Accumulator A are placed in <b>output</b> <b>register</b> specified by address.|$|E
50|$|Accumulator (A-register) - The {{accumulator}} {{serves as}} the main register of the computer and holds the results of all arithmetic operations. This register serves as an <b>output</b> <b>register</b> for telemetry and character outputs.|$|E
5000|$|Duff's {{problem was}} to copy 16-bit units ("shorts" [...] in most C implementations) from an array into a memory-mapped <b>output</b> <b>register,</b> denoted in C by a pointer. His {{original}} code, in K&R C, looked as follows: ...|$|E
30|$|The output updater {{holds the}} same output {{value on the}} same port, until a control signal comes from the {{instruction}} decoder to its controller to update the output with a newer value in a certain <b>register.</b> The <b>output</b> <b>registers</b> are general registers used to set any value as an output. Here, we give <b>output</b> <b>registers</b> restricted names to clarify the engine operation. The five <b>output</b> <b>registers</b> holds the starting address, FCFO, CELL-ID, ICFO, and SCFO. All of the five registers are 12 -bit each. Typically, Starting Address goes to the input buffer that holds the FFT window to identify the first sample in the incoming frame. The estimated FCFO {{is used by the}} CFO correction complex-multiplier to derotate the input samples. CELL-ID is transferred to higher layers. ICFO is added to the fractional part of the CFO to guarantee correct reception with time. Estimated value of SCFO is considered as the seed for the ROB/STUFF correction algorithm in [13].|$|R
5000|$|Any of {{the above}} tape-based {{machines}} can be equipped with input and output tapes; any {{of the above}} register-based machines can be equipped with dedicated input and <b>output</b> <b>registers.</b> For example, the Schönhage pointer-machine model has two instructions called [...] "input λ0,λ1" [...] and [...] "output β".|$|R
5000|$|By comparison, the Sun Microsystems SPARC {{architecture}} provides simultaneous visibility {{into four}} sets of eight registers each. Three sets of eight registers each are [...] "windowed". Eight registers (i0 through i7) form the input registers to the current procedure level. Eight registers (L0 through L7) are local to the current procedure level, and eight registers (o0 through o7) are the outputs from the current procedure level {{to the next level}} called. When a procedure is called, the register window shifts by sixteen registers, hiding the old input registers and old local registers and making the old <b>output</b> <b>registers</b> the new input registers.The common <b>registers</b> (old <b>output</b> <b>registers</b> and new input registers) are used for parameter passing. Finally, eight registers (g0 through g7) are globally visible to all procedure levels.|$|R
50|$|In its {{simplest}} implementation, a TDC {{is simply}} a high-frequency counter that increments every clock cycle. The current contents of the counter represents the current time. When an event occurs, the counter's value is captured in an <b>output</b> <b>register.</b>|$|E
5000|$|To {{allow for}} bit errors to fade {{out and to}} allow (re)synchronization to an ongoing bitstream, the <b>output</b> <b>register</b> (which keeps the {{reference}} sample) is normally realized as a leaky integrator with a time constant (...) of about 1 ms.|$|E
5000|$|This is a {{parallel}} [...] "holding" [...] register {{for the eight}} bit (one byte) value that will {{be transferred to the}} serial shift register for output one bit at a time. When the port is ready to accept data for output a Serial Data Out interrupt informs the Operating System that it can write a byte to this <b>output</b> <b>register.</b>|$|E
5000|$|... 4003: 10-bit {{parallel}} <b>output</b> shift <b>register</b> for scanning keyboards, displays, printers, etc.|$|R
30|$|Every new {{correlation}} {{result is}} {{compared with the}} maximum previous result and the index of the maximum correlation output is stored in a register from Register File 1. This index corresponds to the correct ICFO and the attached CELL-ID. The final step in the aquistion phase is updating the values of ICFO and CELL-ID <b>output</b> <b>registers.</b>|$|R
5000|$|On the {{assumption}} that each instruction bundle reads its input registers before writing its <b>output</b> <b>registers,</b> this code is correct. At {{the start of the}} replicated loop body, [...] holds the value of [...] from the previous replicated loop iteration. Since [...] has been incremented by 2 in the meantime, this is actually the value of [...] in this replicated loop iteration.|$|R
50|$|The command DM multiplies {{the number}} in address B by {{the number in}} address A, placing the left half of the result into address C. The {{remaining}} low end digits are left in LOP, the Low <b>Output</b> <b>Register.</b> They can be transferred from there to a main memory address by the TX or TS command. DM is fully supported by the Floating Point Adaptor. In its absence, simulation is required.|$|E
5000|$|Similarly, the <b>output</b> <b>register</b> {{space is}} related to the qubit register, by a Yvalued {{observable}} A. Note that observables in quantum mechanics are usually defined interms of projection valued measures on R; if the variablehappens to be discrete, the projection valued measure reduces to afamily {Eλ} indexed on some parameter λranging over a countable set. Similarly, a Y valued observable,can be associated with a family of pairwise orthogonal projections{Ey} indexed by elements of Y. such that ...|$|E
50|$|The W65C21S PIA is {{organized}} into two independent sections {{referred to as}} the A Side and the B Side. Each section consists of Control Register (CRA, CRB), Data Direction Register (DDRA, DDRB), <b>Output</b> <b>Register</b> (ORA, ORB), Interrupt Status Control (ISCA, ISCB) and the buffers necessary to drive the Peripheral Interface buses. Data Bus Buffers (DBB) interface data from the two sections to the data bus, while the Date Input Register (DIR) interfaces data from the DBB to the PIA registers. Chip Select and RWB control circuitry interface to the processor bus control lines.|$|E
50|$|Since most ROMs do {{not have}} input or <b>output</b> <b>registers,</b> they cannot be used {{stand-alone}} for sequential logic. An external TTL register was often used for sequential designs such as state machines. Common EPROMs, for example the 2716, are still sometimes used in this way by hobby circuit designers, who often have some lying around. This use is sometimes called a 'poor man's PAL'.|$|R
40|$|An {{instrument}} is described {{which is used}} to multiplex the “ready” and “external sync” lines of an IBM 1800 ’s data channel to 15 external devices. Used with the digital <b>output</b> <b>registers</b> of the computer, the device facilitates the interfacing of non-IBM peripheral devices to the 1800. The multiplexer can be used in any application in which a pair of lines needs to be shared among several devices...|$|R
3000|$|... [...]. The {{update on}} the <b>output</b> FCFO <b>register</b> is carried out via the output updater with the same SET instruction.|$|R
50|$|It {{is assumed}} that the input register, A and the <b>output</b> <b>register</b> B occupy the first k and last k spins along the chain, and that all spins along the chain are {{prepared}} {{to be in the}} spin down state in the z direction. The parties then use all k of their spin states to encode/decode a single qubit. The motivation for this method is that if all k spins were allowed to be used, we would have a k-qubit channel, which would be too complex to be completely analyzed. Clearly, a more effective channel would make use of all k spins, but by using this inefficient method, it is possible to look at the resulting maps analytically.|$|E
5000|$|Designed at the MIT Lincoln Laboratory {{largely as}} an {{experiment}} in transistorized design {{and the construction of}} very large core memory systems, the TX-0 was essentially a transistorized version of the equally famous Whirlwind, also built at Lincoln Lab. While the Whirlwind filled an entire floor of a large building, TX-0 fit in a single reasonably sized room and yet was somewhat faster. Like the Whirlwind, the TX-0 was equipped with a vector display system, consisting of a 12" [...] oscilloscope with a working area of 7 by 7 inches connected to the 18-bit <b>output</b> <b>register</b> of the computer, allowing it to display points and vectors with a resolution up to 512&times;512 screen locations.|$|E
30|$|E 5 a[*]=[*]mTm, Eq. (49). In this case, {{a single}} ROM port is {{utilized}} to preload the m vector into both input buffers of the MACx. This occurs {{in parallel with}} the Φ and the gain matrix calculations. After the multiply and add operations of the MACx are completed, the output MACx module sends {{a signal to the}} E module, indicating that this value is ready. The E module accesses the value from the MACx <b>output</b> <b>register</b> and multiplies this value with P 2 to create E 5. The MACx <b>output</b> <b>register</b> is also the input register used to store the data in RAM-high. This value is stored in the memory while the E module accesses the value to send it to an adder.|$|E
50|$|The ST (SuperTotalizer) has two display <b>output</b> <b>registers</b> and two {{additional}} levers {{that allow for}} the creation of intermediate results. Each key pressed by the operator is added to the top display register creating an intermediate result which is added to the bottom display register when the operator activates the front right lever (it also resets it). The bottom display register accumulates the intermediate results until it is cleared by using the left lever.|$|R
5000|$|PORTx: <b>Output</b> port <b>register.</b> Sets the <b>output</b> {{value on}} pins {{configured}} as outputs. Enables or disables the pull-up resistor on pins configured as inputs.|$|R
50|$|In {{cases where}} the {{parallel}} outputs should not change during the serial loading process, it is desirable to use a latched or buffered output. In a latched shift register (such as the 74595) the serial data is first loaded into an internal buffer register, then upon receipt of a load signal {{the state of the}} buffer register is copied into a set of <b>output</b> <b>registers.</b> In general, the practical application of the serial-in/parallel-out shift register is to convert data from serial format on a single wire to parallel format on multiple wires.|$|R
40|$|A circuit {{for high}} {{resolution}} decoding of multi-anode microchannel array detectors consisting of input registers accepting transient inputs from the anode array; anode encoding logic circuits {{connected to the}} input registers; midpoint pipeline registers connected to the anode encoding logic circuits; and pixel decoding logic circuits connected to the midpoint pipeline registers is described. A high resolution algorithm circuit operates in parallel with the pixel decoding logic circuit and computes a high resolution least significant bit to enhance the multianode microchannel array detector's spatial resolution by halving the pixel size and doubling the number of pixels in each axis of the anode array. A multiplexer {{is connected to the}} pixel decoding logic circuit and allows a user selectable pixel address output according to the actual multi-anode microchannel array detector anode array size. An <b>output</b> <b>register</b> concatenates the high resolution least significant bit onto the standard ten bit pixel address location to provide an eleven bit pixel address, and also stores the full eleven bit pixel address. A timing and control state machine is connected to the input registers, the anode encoding logic circuits, and the <b>output</b> <b>register</b> for managing the overall operation of the circuit...|$|E
30|$|E 2 [*]=[*]E 2 am, Eq. (46). The m vector {{is loaded}} into one MACx input buffer using a ROM port. Simultaneously, E 2 a is completed, and step 5 is being executed. Then, E 2 a is {{loaded into the}} other input buffer using a RAM-low port. Once the MACx {{operation}} is completed, the output module sends {{a signal to the}} E module and the E module accesses the MACx <b>output</b> <b>register</b> to add this value to E 5 [*]+[*]E 1 [*]+[*]E 3.|$|E
40|$|Fitness {{distributions}} (landscapes) {{of programs}} tend to a limit {{as they get}} bigger. Markov minorization gives upper bounds ((15. 3 + 2. 30 m) / log I) {{on the length of}} program run on random or average computing devices. I is the size of the instruction set and m size of <b>output</b> <b>register.</b> Almost all programs are constants. Convergence is exponential with 90 % of programs of length 1. 6 n 2 yielding constants (n = size input register and size of memory = N). This is supported by experiment...|$|E
50|$|On {{the other}} hand, when the voltage of input A is high, the PMOS {{transistor}} {{is in an}} OFF (high resistance) state so it would limit the current flowing from the positive supply to the output, while the NMOS transistor is in an ON (low resistance) state, allowing the output from drain to ground. Because the resistance between Q and ground is low, the voltage drop due to a current drawn into Q placing Q above ground is small. This low drop results in the <b>output</b> <b>registering</b> a low voltage.|$|R
50|$|By 1985, {{however, the}} {{production}} of every significant mineral in the country had failed to exceed the <b>output</b> <b>registered</b> in 1975. Moreover, the international tin market crashed in 1985. The mining sector in 1987 accounted for only 4 percent of GDP, 36 percent of exports, 2.5 percent of government revenues, and 2 percent {{of the labor force}}, compared with 8 percent of GDP, 65 percent of exports, 27 percent of government revenues, and about 6 percent of the labor force in 1977. Spurred by a massive increase in gold production, however, the mining sector rebounded in 1988, returning {{to the top of the}} nation's list of foreign exchange earners.|$|R
5000|$|B bus: {{connected}} to the <b>output</b> of the <b>registers</b> and to the input of the ALU.|$|R
40|$|In {{order to}} make a {{register}} transfer structure testable, it is usually divided into functional blocks that can be tested independently by various test methods. The test patterns are shifted in or generated autonomously at the inputs of each block. The test responses of a block are compacted or observed at its <b>output</b> <b>register.</b> In this paper a unified method for assembling all the single tests to a global schedule is presented. It is compatible with a variety of different test methods. The described scheduling procedures reduce the overall test time and minimize the number of internal registers that have to be made directly observable...|$|E
30|$|E 3 [*]=[*]E 4 a[*]=[*]E 3 aGffz, Eq. (48). The time {{it takes}} to load steps 3 and 4 ensures that the {{operation}} started in step 2 (E 3 a) is completed. The input module ensures that this value is ready by checking the complete signal. One port from each RAM is used to preload E 3 a, while a column of Gffz is loaded into the MACx input buffers. This step continues until all the columns of Gffz have been loaded. Upon completion of the MACx operations, the output module sends a signal to the E module indicating that the value (E 3) is available. The E module accesses the MACx <b>output</b> <b>register</b> to add this value to E 5 [*]+[*]E 1.|$|E
40|$|Abstract—Smartphones offer {{sophisticated}} features (e. g., Wi-Fi, GPS, etc.) {{that require}} significant energy and limit battery life. Offline smartphone power modeling with benchtop equipment is cumbersome for software developers and takes substantial time {{to perform on}} multiple devices. By running on the device itself, online modeling can be performed dynamically and is scalable to many different smartphones. Previous online modeling work used existing battery management unit (BMU) current sensors with a high internal sample rate (18. 6 kHz), but very low (software-readable) <b>output</b> <b>register</b> update rates (0. 28 Hz). We propose allowing the register update rate to be dynamically adjusted to decrease online modeling time and energy cost. In this work we consider the benefits and evaluate the trade-offs of this approach. I...|$|E
50|$|At the register-transfer level, {{some types}} of {{circuits}} can be recognized. If there is a cyclic path of logic from a <b>register's</b> <b>output</b> to its input (or from a set of <b>registers</b> <b>outputs</b> to its inputs), the circuit is called a state machine or {{can be said to}} be sequential logic. If there are logic paths from a register to another without a cycle, it is called a pipeline.|$|R
40|$|We {{consider}} {{the effects of}} plane-wave states scattering off finite graphs, as an approach to implementing single-qubit unitary operations within the continuous-time quantum walk framework of universal quantum computation. Four semi-infinite tails are attached at arbitrary points of a given graph, representing the input and <b>output</b> <b>registers</b> of a single qubit. For a range of momentum eigenstates, we enumerate all of the graphs with up to n= 9 vertices for which the scattering implements a single-qubit gate. As n increases, {{the number of new}} unitary operations increases exponentially, and for n> 6 the majority correspond to rotations about axes distributed roughly uniformly across the Bloch sphere. Rotations by both rational and irrational multiples of π are found. Comment: 8 pages, 7 figure...|$|R
50|$|Outputs {{from the}} digital {{controller}} are functions {{of current and}} past input samples, as well as past output samples - this can be implemented by storing relevant values of input and <b>output</b> in <b>registers.</b> The <b>output</b> can then be formed by a weighted sum of these stored values.|$|R
