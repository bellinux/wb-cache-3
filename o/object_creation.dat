272|271|Public
25|$|Under the Longs Peak API, <b>object</b> <b>creation</b> {{would become}} atomic, using {{templates}} {{to define the}} properties of an object which would be created with one function call. The object could then be used immediately across multiple threads. Objects would also be immutable; however, they could have their contents changed and updated. For example, a texture could change its image, but its size and format could not be changed.|$|E
25|$|Each {{instance}} {{of an object}} that is created stores its name, parameters that are passed to the <b>object</b> <b>creation</b> function, security attributes and a pointer to its object type. The object also contains an object close procedure and a reference count to tell the object manager how many other objects in the system reference that object and thereby determines whether the object can be destroyed when a close request is sent to it. Every named object exists in a hierarchical object namespace.|$|E
25|$|<b>Object</b> <b>{{creation}}</b> is {{a process}} in two phases, creation and insertion. Creation causes the allocation of an empty object and the reservation of any resources required by the object manager, such as an (optional) name in the namespace. If creation was successful, the subsystem responsible for the creation fills in the empty object. Finally, if the subsystem deems the initialization successful, it instructs the object manager to insert the object, which makes it accessible through its (optional) name or a cookie called a handle. From then on, the lifetime of the object is handled by the object manager, and it's up to the subsystem to keep the object in a working condition until being signaled by the object manager to dispose of it.|$|E
5000|$|Class invariant: Conditions {{that must}} hold true after the <b>object's</b> <b>creation</b> and after any call to an {{exported}} class routine. Because the invariant is checked so often, {{it makes it}} simultaneously the most expensive and most powerful form of condition or contract.|$|R
50|$|A yulem {{object is}} in {{contrast}} to a work of art or found art. A yulem <b>object's</b> <b>creation</b> is unintentional and not the result of human forethought. Art objects are intentional manifestations of creativity. This distinction forces emphasis on a collective recognition of an object's intrinsic aesthetic characteristics versus conformity to a pre-existing set of aesthetic criteria.|$|R
50|$|The QPDF library {{also makes}} it {{possible}} for you to create PDF files from scratch. In this mode, you are responsible for supplying all the contents of the file, while the QPDF library takes care of the syntactical representation of the <b>objects,</b> <b>creation</b> of cross references tables and, optionally, object streams, encryption, linearization, and other syntactic details.|$|R
50|$|Creational design {{patterns}} are further categorized into Object-creational patterns and Class-creational patterns, where Object-creational patterns deal with <b>Object</b> <b>creation</b> and Class-creational patterns deal with Class-instantiation. In greater details, Object-creational patterns defer {{part of its}} <b>object</b> <b>creation</b> to another object, while Class-creational patterns defer its <b>object</b> <b>creation</b> to subclasses.|$|E
50|$|In {{software}} engineering, creational {{design patterns}} are design patterns {{that deal with}} <b>object</b> <b>creation</b> mechanisms, trying to create objects in a manner suitable to the situation. The basic form of <b>object</b> <b>creation</b> could result in design problems or in added complexity to the design. Creational design patterns solve this problem by somehow controlling this <b>object</b> <b>creation.</b>|$|E
5000|$|Singleton pattern restricts <b>object</b> <b>creation</b> for a {{class to}} only one instance.|$|E
50|$|In {{object-oriented}} programming (OOP), the object lifetime (or life cycle) {{of an object}} is the time between an <b>object's</b> <b>creation</b> and its destruction. Rules for object lifetime vary significantly between languages, in some cases between implementations of a given language, and lifetime of a particular object may vary from one run of the program to another.|$|R
40|$|The thesis {{deals with}} floral objects in exteriors and {{includes}} parts clarifying this theme. The first part {{is focused on}} the definition of the term and the possible classification. Furthermore the thesis is interested in the possible sources of inspiration {{that could be used for}} floral objects studies. Painting, sculpturing but also art movement called Land Art belong among them. An important part is a chapter dedicated to the artists who mostly use natural materials for their work because these <b>objects</b> <b>creation</b> is connected with the natural environment and natural materials. This part is then followed by the ways of the creation, suitable materials and techniques used during floral <b>objects</b> <b>creation.</b> The thesis also deals with the floral objects importance for garden and landscape architecture. Another important part of the thesis is author's own design of two seasonal floral objects for the purpose of an area decoration and their production descriptions...|$|R
40|$|Abstract – The {{technology}} of modeling of one class of multi-agent systems with automata based programming is {{proposed in the}} paper. The technology is illustrated on the example of system of interacting drone flying <b>objects</b> <b>creation.</b> UniMod – a tool intended for supporting automata based programming is used for building a control system for each flying object. UniMod also supports the concept of “executable UML”...|$|R
5000|$|Native VRML <b>Object</b> <b>Creation</b> {{support with}} options to create ‘hinged’ part objects ...|$|E
5000|$|Function <b>object</b> <b>creation</b> using a closure {{referencing}} a non-local {{variable in}} Python 3: ...|$|E
5000|$|... as a {{shortcut}} for using an explicit <b>object</b> <b>creation</b> with a conversion procedure: ...|$|E
40|$|International audienceThis paper {{presents}} a model-based {{framework for the}} symbolic animation of object-oriented specifications. A customized set-theoretic solver is used to simulate {{the execution of the}} system and handle constraints on state variables. We define a framework for animating object-oriented specifications with dynamic <b>object</b> <b>creations,</b> interactions and inheritance. We show how this technique can be applied to Java Modeling Language (JML) specifications, making it possible to animate Java programs that only contain method interfaces and no code...|$|R
40|$|This thesis {{deals with}} the {{creation}} of a graphic intro with limited size. This work describes methods and techniques for generating the graphic content. It deals with procedural generation of textures and <b>objects,</b> <b>creation</b> of particle systems, lighting and animation of selected objects. It describes methods for reducing the size of the final application. The result is a graphical intro showing an underwater environment with a coral reef and floating fish whose size is less than 64 kB...|$|R
50|$|Also {{posing a}} {{difficulty}} to stratigraphical analysis {{is the possibility}} that the time of an <b>object's</b> <b>creation</b> and final deposit can vary greatly. Many portable objects are believed to have served as ritual objects, being passed down from generation to generation, keeping them in use for hundreds or thousands of years. Through the migration of prehistoric man, {{it is possible that the}} final resting place of an object is hundreds or even thousands of miles from the point of its original creation.|$|R
5000|$|A class delegates <b>object</b> <b>creation</b> to {{a factory}} object instead of {{creating}} objects directly.|$|E
5000|$|Object-oriented programming: Contextualization consists, at <b>object</b> <b>creation</b> time, {{to provide}} {{adequate}} initialization parameters to a class constructor.|$|E
5000|$|... <b>object</b> <b>creation</b> is data driven: {{managing}} resources requires {{very little}} code, everything is controlled through configuration files ...|$|E
40|$|This paper {{presents}} a model-based {{framework for the}} symbolic animation of object-oriented specifications. A customized set-theoretic solver is used to simulate {{the execution of the}} system and handle constraints on state variables. We define a framework for animating object-oriented specifications with dynamic <b>object</b> <b>creations,</b> interactions and inheritance. We show how this technique can be applied to Java Modeling Language (JML) specifications, making it possible to animate Java programs that only contain method interfaces and no code! ©Springer-Verlag Berlin Heidelberg 2005...|$|R
50|$|Nature, {{being one}} of the primary {{concerns}} in Man’s life and struggle, and {{being one of}} the <b>objects</b> of <b>Creation,</b> is important to Man’s spiritual quests.|$|R
50|$|Creating {{an object}} often {{requires}} complex processes not appropriate to include within a composing <b>object.</b> The <b>object's</b> <b>creation</b> {{may lead to}} a significant duplication of code, may require information not accessible to the composing object, may not provide a sufficient level of abstraction, or may otherwise not be part of the composing object's concerns. The factory method design pattern handles these problems by defining a separate method for creating the objects, which subclasses can then override to specify the derived type of product that will be created.|$|R
5000|$|StAX-like XML reader/writer {{which does}} not require <b>object</b> <b>creation</b> (such as String) and {{consequently}} faster than standard StAX ...|$|E
5000|$|This {{metaclass}} only overrides <b>object</b> <b>creation.</b> All {{other aspects}} of class and object behavior are still handled by [...]|$|E
5000|$|In Perl, constructors are, by convention, named [...] "new" [...] {{and have}} to do a fair amount of <b>object</b> <b>creation.</b>|$|E
40|$|Bipedalism is {{the main}} {{characteristic}} of humans. During evolutin bipedalism emerged probably as an adaptation to a changing environment. Major changes in skeletal system included femur, pelvis, skull and spine. The significance of bipedal locomotion: Bipedalism freed the forelimbs for carrying <b>objects,</b> <b>creation</b> and usage of tools. In the upright position animals have a broader view {{of the environment and}} the early detection of predators is crucial for survival. Bipedal locomotion makes larger distances easier to pass, which is very important in the migration of hominids...|$|R
50|$|The {{primitive}} requests can {{modify the}} access matrix by adding or removing access rights {{for a pair}} of subjects and objects and by adding or removing subjects or <b>objects.</b> <b>Creation</b> of a subject or object requires the subject or object not to exist in the current configuration, while deletion of a subject or object requires it to have existed prior to deletion. In a complex command, a sequence of operations is executed only as a whole. A failing operation in a sequence makes the whole sequence fail, a form of database transaction.|$|R
40|$|Discusses the {{technological}} changes that affects learning organizations {{as well as}} the human, technical, legal and sustainable aspects regarding learning <b>objects</b> repositories <b>creation,</b> maintenance and use. It presents concepts of information objects and learning objects, the functional requirements needed to their storage at Learning Management Systems. The role of Metadata is reviewed concerning learning <b>objects</b> <b>creation</b> and retrieval, followed by considerations about learning object repositories models, community participation/collaborative strategies and potential derived metrics/indicators. As a result of this desktop research, {{it can be said that}} not only technical competencies are critical to any learning objects repository implementation, but it urges that an engaged community of interest be establish as a key to support a learning object repository project. On that matter, researchers are applying Activity Theory (Vygostky, Luria y Leontiev) in order to seek joint perceptions and actions involving learning objects repository users, curators and managers, perceived as critical assets to a successful proposal...|$|R
50|$|Since <b>object</b> <b>creation</b> of {{different}} concrete objects cannot {{be done at}} runtime, the <b>object</b> <b>creation</b> process must be abstracted. This is done with an abstract guiFactory, which takes on the responsibility of creating UI elements. The abstract guiFactory has concrete implementations, such as MotifFactory, which creates concrete elements of the appropriate type (MotifScrollBar). In this way, the program need only ask for a ScrollBar and, at run-time, it will be given the correct concrete element.|$|E
5000|$|DrawPlus {{provides}} {{a range of}} <b>object</b> <b>creation</b> and editing tools which are common in other editors, and also offers additional tools ...|$|E
5000|$|Encapsulate <b>object</b> <b>creation</b> in a {{separate}} (factory) object. That is, define an interface (AbstractFactory) for creating objects, and implement the interface.|$|E
50|$|Since lazy {{inheritance}} called {{only once}} {{at the moment of}} first <b>object</b> instance <b>creation,</b> it seems logical to combine process of class prototype creation with resolving necessary dependencies of that class.|$|R
5000|$|Every <b>object</b> of <b>creation</b> is made {{of atoms}} (parmanu) which in turn connect {{with each other to}} form {{molecules}} (anu). Atoms are eternal, and their combinations constitute the empirical material world.|$|R
50|$|ALTO {{is often}} used in {{combination}} with Metadata Encoding and Transmission Standard (METS) for {{the description of the}} whole digitized <b>object</b> and <b>creation</b> of references across the ALTO files, e.g. reading sequence description.|$|R
