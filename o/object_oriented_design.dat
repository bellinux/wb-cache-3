422|7542|Public
5000|$|... {{implementation}} using state-of-art, <b>object</b> <b>oriented</b> <b>design</b> methods ...|$|E
50|$|The {{relationships}} are {{specified in the}} science of <b>object</b> <b>oriented</b> <b>design</b> and object interface standards defined by popular use, language designers (Java, C++, Smalltalk, Visual Prolog) and standards committees for software design like the Object Management Group.|$|E
50|$|LML {{communicates}} cost, {{schedule and}} performance to all stakeholders {{in the system}} lifecycle. LML combines the logical constructs with an ontology to capture information. SysML is mainly constructs and has a limited ontology, while DoDAF MetaModel 2.0 (DM2) only has an ontology. Instead LML simplifies both the constructs and ontology {{to make them more}} complete, but still easier to use. There are only 12 primary entity classes. Almost all of the classes relate to each other and themselves with consistent words, i.e., Asset performs Action. Action performed by Asset. SysML uses <b>object</b> <b>oriented</b> <b>design,</b> because it was designed to relate systems thinking to software development. No other discipline in the lifecycle uses <b>object</b> <b>oriented</b> <b>design</b> and analysis extensively. LML captures the entire lifecycle from cradle to grave.|$|E
40|$|The paper {{presents}} a controlled experiment, {{focusing on the}} impact of applying quality design principles such as the ones provided by P. Coad and E. Yourdon (1991) on the maintainability of <b>object</b> <b>oriented</b> <b>designs.</b> Results, which repeat the findings of a previous study, strongly suggest that such design principles have a beneficial effect on the maintainability of <b>object</b> <b>oriented</b> <b>designs.</b> It is argued that <b>object</b> <b>oriented</b> <b>designs</b> are sensitive to poor design practices because the cognitive complexity introduced becomes increasingly unmanageable. However, as our ability to generalize these results is limited, they should be considered as preliminary, i. e., it is very likely that they can only be generalized to programmers with little <b>object</b> <b>oriented</b> training and programming experience. Such programmers can, however, be commonly found on maintenance projects. As well as additional research, external replications of this study are required to confirm the results and achieve confidence in these findings...|$|R
40|$|In {{software}} development, designing {{software is}} {{really needed to}} make software with good quality. The Concept of programming was moved into <b>object</b> <b>oriented</b> programming that make programming more easier, reusable, and maintainable. There should be a new method for measuring the quality of <b>object</b> <b>oriented</b> software <b>design.</b> The journal discuss how to make software to measure quality of an <b>object</b> <b>oriented</b> software <b>design,</b> using method called Matrics for <b>Object</b> <b>Oriented</b> Software Engineering (MOOSE). MOOSE refers to a basic structural mechanism of the object-oriented paradigm as methods (WMC, LCOM), inheritance (DIT, NOC), and coupling (CBO, RFC). so developer can measure quality of an <b>object</b> <b>oriented</b> software <b>design...</b>|$|R
40|$|In role-based designs a role {{describes}} a specific {{view of an}} object, and collaborations describe interactions between <b>objects.</b> Cooperative <b>object</b> <b>oriented</b> <b>designs</b> use a variant of collaborations (CO actions) which are able to clearly separate interaction and functional code. This paper proposes a reflective architecture for role-based cooperative <b>object</b> <b>oriented</b> <b>designs</b> where roles can be dynamically and transparently attached to objects. Dynamically means that roles can be attached to and detached from objects during runtime, and transparently means that objects {{are not aware of}} the handling of roles. The proposed reflective architecture aims to enforce separation between several concerns such as function, interaction, synchronization, and handling of roles. The separation allows the implementation of different kinds of algorithms one by one, making them easier to write, understand, and evolve...|$|R
50|$|Despite {{being written}} in C, Orx has an <b>object</b> <b>oriented</b> <b>design</b> with a plugin architecture. This allows its kernel to be {{cross-platform}} and delegates hardware- and OS-dependent tasks to plugins. Most of these plugins {{are based on}} other open source libraries, such as GLFW, SDL and Box2D.|$|E
50|$|MASCOT was {{successfully}} {{used in a}} number of defence systems, most notably the Rapier ground-to-air missile system of the British Army. Although still in use on systems in the field, it never reached critical success and has been subsequently overshadowed by <b>object</b> <b>oriented</b> <b>design</b> methodologies based on UML.|$|E
50|$|OpenSL ES {{utilizes}} an <b>object</b> <b>oriented</b> <b>design</b> to give application developers {{access to}} the audio functionality. The object model is shared with OpenMAX AL, and a device manufacturer can choose to implement {{one or both of}} the APIs. Together the two APIs give access to a wide range of functionality of the device's multimedia engine.|$|E
40|$|Declarative {{programming}} languages {{provide a}} higher level of abstraction and more powerful concepts than typical imperative and <b>object</b> <b>oriented</b> languages. On the other hand, the <b>object</b> <b>oriented</b> paradigm is superseding conventional approaches to software development like SA/SD and modular design. This is, among others, due to the better reusability and simpler maintenance of <b>object</b> <b>oriented</b> components. As a consequence, only languages which enable a simple implementation of <b>object</b> <b>oriented</b> <b>designs</b> will remain interesting for the development of significant software systems...|$|R
40|$|This paper {{describes}} {{the results of}} three studies on <b>object</b> <b>oriented</b> metrics and also a reusability study currently in progress. The first study investigates the maintainability of <b>object</b> <b>oriented</b> software versus procedural software. The second one examines the relationship between programmer productivity, software reuse, and the <b>object</b> <b>oriented</b> paradigm. The third study proposes and validates a new suite of <b>object</b> <b>oriented</b> metrics based on the MOOSE metrics developed by Chidamber and Kemerer [Chid 91]. These new metrics are shown to predict maintainability from <b>object</b> <b>oriented</b> <b>designs</b> and source code...|$|R
40|$|In this paper, we {{take the}} {{position}} that good <b>object</b> <b>oriented</b> <b>designs</b> accrue from attention to both the design of objects and classes and to the architectural framework which defines how instances of those classes interact. We argue that an architecture should be assessed for conceptual integrity, and describe tool support for making such an assessment...|$|R
5000|$|A Metrics Suite for <b>Object</b> <b>Oriented</b> <b>Design</b> was {{introduced}} by Chidamber and Kemerer in 1994 focusing, as the title suggests, on metrics specifically for object oriented code. They introduce six OO complexity metrics; weighted methods per class, coupling between object classes, response for a class, number of children, depth of inheritance tree and lack of cohesion of methods ...|$|E
5000|$|In 1994 Lethbridge {{started his}} {{academic}} {{career at the}} Department of Computer Science of the University of Ottawa as Assistant Professor, in 2001 Associate Professor, and since 2005 Professor of Computer Science and Software Engineering at the University of Ottawa. He specializes in [...] "Human Computer Interaction, Software Modeling, UML, <b>Object</b> <b>Oriented</b> <b>Design,</b> Software Engineering Education".|$|E
50|$|The {{dependency}} inversion principle was postulated by Robert C. Martin {{and described}} in several publications including the paper <b>Object</b> <b>Oriented</b> <b>Design</b> Quality Metrics: {{an analysis of}} dependencies, an article appearing in the C++ Report in May 1996 entitled The Dependency Inversion Principle, and the books Agile Software Development, Principles, Patterns, and Practices, and Agile Principles, Patterns, and Practices in C#.|$|E
5000|$|Pujari A.K., Ajith Kumar N.K. - <b>Object</b> <b>Oriented</b> LAN <b>Design,</b> National Conf. In {{software}} Engg. SOFTEN - December 93, IEEE Kerala Section, Trivandrum.|$|R
40|$|The {{issue of}} using {{extended}} data flow notations to document <b>object</b> <b>oriented</b> <b>designs</b> and specifications is discussed. Extended data flow notations, {{for the purposes}} here, refer to notations {{that are based on}} the rules of Yourdon/DeMarco data flow analysis. The extensions include additional notation for representing real-time systems as well as some proposed extensions specific to <b>object</b> <b>oriented</b> development. Some advantages of data flow notations are stated. How data flow diagrams are used to represent software objects are investigated. Some problem areas with regard to using data flow notations for <b>object</b> <b>oriented</b> development are noted. Some initial solutions to these problems are proposed...|$|R
30|$|In {{the current}} research, an {{open-source}} software for pore network modeling was implemented in C++, {{which we call}} it “Starfish”. Starfish has been specifically developed for petroleum engineering applications. It benefits from an <b>objected</b> <b>oriented</b> <b>design</b> and it can handle wide ranges of network sizes and pore/throat geometries. Parallel computing was used extensively in Starfish code to reduce its runtime, and its efficient solver package enables it to simulate very large networks with considerable accuracy.|$|R
5000|$|Criticism: While CGIDEV2 is {{a popular}} choice as a web {{development}} languages for RPG programmers on IBM iSeries systems, CGIDEV2 lacks in some features offered by other web development languages such as session management {{and the ability to}} design programs using <b>object</b> <b>oriented</b> <b>design</b> principles. IBM's ambiguous commitment to the CGIDEV2 product and to the iSeries in general is also an issue to some users.|$|E
5000|$|Connascence (...) is a {{software}} quality metric invented by Meilir Page-Jones to allow reasoning about the complexity caused by dependency relationships in <b>object</b> <b>oriented</b> <b>design</b> much like coupling did for structured design. In addition to allowing categorization of dependency relationships, connascence {{also provides a}} system for comparing different types of dependency. Such comparisons between potential designs can often hint at {{ways to improve the}} quality of the software.|$|E
50|$|No Magic, Inc. is a {{software}} company that develops solutions {{in the areas}} of <b>object</b> <b>oriented</b> <b>design</b> and development. No Magic has been a leader in OMG (Object Management Group) standards based technologies and methods is the area of modeling, simulation and analysis for over 19 years. The flagship product MagicDraw has won numerous awards and is recognized globally for excellence as a (UML) Unified Modeling Language modeling tool.|$|E
50|$|Proper <b>object</b> <b>oriented</b> {{programming}} involves <b>design</b> {{principles that}} avoid action at a distance.|$|R
50|$|Object {{modeling}} {{language are}} modeling languages {{based on a}} standardized set of symbols and ways of arranging them to model (part of) an <b>object</b> <b>oriented</b> software <b>design</b> or system design.|$|R
40|$|The Metrics Group of Virginia Tech {{has been}} {{studying}} the <b>object</b> <b>oriented</b> paradigm and how it relates to software maintenance and software reusability {{in an attempt to}} make programmers more productive. Software reuse is the key to increased productivity within the software development process. By reusing existing software, time and effort are saved in the testing and maintenance phases of a software product. The <b>object</b> <b>oriented</b> paradigm is <b>designed</b> to enhance software reusability through encapsulation and inheritance (CoxB 86, Meye 87). This paper describes the results of three studies on <b>object</b> <b>oriented</b> metrics and also a reusability study currently in progress. The first study investigates the maintainability of <b>object</b> <b>oriented</b> software versus procedural software. The second one examines the relationship between programmer productivity, software reuse, and the <b>object</b> <b>oriented</b> paradigm. The third study proposes and validates a new suite of <b>object</b> <b>oriented</b> metrics based on the MOOSE metrics developed by Chidamber and Kemerer (Chid 91). These new metrics are shown to predict maintainability from <b>object</b> <b>oriented</b> <b>designs</b> and source code...|$|R
50|$|The {{term was}} {{introduced}} by Robert C. Martin in an article by the same name {{as part of his}} Principles of <b>Object</b> <b>Oriented</b> <b>Design,</b> made popular by his book Agile Software Development, Principles, Patterns, and Practices. Martin described it as being based on the principle of cohesion, as described by Tom DeMarco in his book Structured Analysis and System Specification, and Meilir Page-Jones in The Practical Guide to Structured Systems Design.|$|E
50|$|The most {{important}} attribute {{of a system}} driven by situated AI is that the intelligence is controlled {{by a set of}} independent semi-autonomous modules. In the original systems, each module was actually a separate device or was at least conceived of as running on its own processing thread. Generally, though, the modules are just abstractions. In this respect, situated AI may be seen as a software engineering approach to AI, perhaps akin to <b>object</b> <b>oriented</b> <b>design.</b>|$|E
50|$|Batavi (Latin for Batavians) is an {{open-source}} webshop {{under the}} GNU General Public License. The development of Batavi started in 2007 {{inspired by a}} preliminary osCommerce 3.0 version, a version {{that seemed to be}} never finished by the osCommerce team. In Batavi, an <b>Object</b> <b>oriented</b> <b>design</b> model is adopted, and on a functional level XML-EDI integration with the systems of suppliers is a lead theme, as most merchants don't run 'standalone' webshops. This distinguishes Batavi also from other webshops like PrestaShop, Zen Cart and Magento.|$|E
5000|$|Stability Model (SM) is {{a method}} of {{designing}} and modelling software. It {{is an extension of}} <b>Object</b> <b>Oriented</b> Software <b>Design</b> (OOSD) methodology, like UML, but adds its own set of rules, guidelines, procedures, and heuristics to achieve a more advanced <b>Object</b> <b>Oriented</b> software.|$|R
40|$|A {{language}} for {{the representation of}} <b>object</b> <b>oriented</b> software <b>designs</b> is described. IDEF 4, a methodology for object-oriented design, is being developed as a design tool for software designers who use such object-oriented languages. Such languages include the Common LISP Object System, Flavors, C++, Smalltalk, Objective C, and others. Since effective usage of the object-oriented paradigm requires a different thought process than that used with conventional procedural or database languages, standard methodologies such as structure charts, data flow diagrams, and traditional data design models (hierarchical, relational, and network) are not sufficient. IDEF 4 seeks to provide the necessary facilities to support the object-oriented design decision making process. Specifically, the two primary design goals of IDEF 4 are: (1) to provide support for creating <b>object</b> <b>oriented</b> <b>designs</b> whose implementations will exhibit desirable life cycle qualities and reduce total implementation development time; and (2) {{to make it easy}} to evaluate <b>object</b> <b>oriented</b> code {{to determine whether or not}} the delivered product both conforms to the design and exhibits the desired life cycle qualities. The application of IDEF 4 in the life cycle of a software development project is intended to be focused on those activities after a decision has been made to employ <b>object</b> <b>oriented</b> programming technology, but prior to detailed code specification...|$|R
40|$|The {{notion of}} <b>object</b> <b>oriented</b> {{analysis}} and <b>design</b> in software engineering has many rewards that aid the programmer {{to have an}} understanding of and improve the program efficaciously. <b>Object</b> <b>oriented</b> metrics helps rather a lot to a programmer or developer to comprehend and unravel the thing-oriented trouble readily and exactly. <b>Object</b> <b>oriented</b> metrics helps in examining the usefulness of <b>object</b> <b>oriented</b> applied sciences or in simple phrases Object-oriented metrics depict characteristics of object-oriented programming. The intention {{of this paper is to}} {{have an understanding of}} concerning the UML, <b>Object</b> <b>oriented</b> evaluation and <b>design</b> and the way it plays in UML...|$|R
5000|$|In <b>object</b> <b>oriented</b> <b>design</b> {{this still}} does not provide access to private data and methods. Therefore, extra work may be {{necessary}} for unit tests. In Java and other languages, a developer can use reflection to access private fields and methods. Alternatively, an inner class {{can be used to}} hold the unit tests so they have visibility of the enclosing class's members and attributes. In the [...]NET Framework and some other programming languages, partial classes may be used to expose private methods and data for the tests to access.|$|E
5000|$|PHG: PHG is a toolbox for {{developing}} parallel adaptive finite element programs. It's suitable for h-, p- and hp-fem. PHG is currently under active development at State Key Laboratory of Scientific and Engineering Computing, Institute of Computational Mathematics and Scientific/Engineering Computing of Chinese Academy of Sciences(LSEC, CAS, China). PHG deals with conforming tetrahedral meshes and uses bisection for adaptive local mesh refinement and MPI for message passing. PHG has an <b>object</b> <b>oriented</b> <b>design</b> which hides parallelization details and provides common operations on meshes and finite element functions in an abstract way, allowing the users {{to concentrate on}} their numerical algorithms.|$|E
50|$|EASAMS was E A Space and Advanced Military Systems (the EA {{was never}} spelled out), based in Frimley, Surrey - {{first at the}} nearby Marconi Electronic Systems plant in Chobham Road and later, when it became a limited company, at its {{headquarters}} in Lyon Way. It evolved its proprietary EMPRENT an early PERT planning system used {{for the construction of}} North Sea Oil platform, and for the BAC TSR-2 which later was incorporated into MRCA multi-role combat aircraft which finally became Panavia Tornado. EASAMS senior management was highly conservative, and a number of innovative engineers working on 'private venture' projects such as Hierarchical <b>Object</b> <b>Oriented</b> <b>Design</b> HOOD and Ada language development left to form their own companies, including Admiral Computing which later merged with Logica, Systems Designers Ltd and Software Sciences (later part of IBM UK).|$|E
40|$|In {{relation}} to software component reuse and <b>object</b> <b>oriented</b> analysis <b>design</b> (OOAD), {{this paper presents}} an overview of software reuse, including the history of software reuse, current state, development and benefit and constraints. On {{the second part of}} the paper, a discussion of the relevance of software component reuse and <b>Object</b> <b>Oriented</b> and Analysis <b>Design</b> in terms of opportunities and challenge is given. After that, there is a provision of some general guidelines on when and how reusable components could be identified and developed. Toward the end, the paper discusses strategies and future directions of software engineering in {{relation to}} software component reuse...|$|R
40|$|This {{document}} will {{be revised}} to reflect comments from partners. Intermediate translation to VDM replaced by direct generation of proof rules from the abstract syntax. State type {{is replaced by}} attributes and methods represented as actions. Semantics given to indexed inheritance and some statements. In this report we describe an axiomatic semantics for the OO part of VDM. This report reflects work which is partially funded by the Commission of the European Communities (CEC) under the ESPRIT III programme {{in the area of}} Information Processing Systems, project no. 6500 : "Applying Formal Methods to Real-sized <b>Object</b> <b>Oriented</b> <b>Designs</b> in Technical Environments". Content...|$|R
2500|$|... p5.js [...] is an <b>object</b> <b>oriented</b> JavaScript library <b>designed</b> {{for artists}} and designers. It {{is based on}} the ideas of the Processing project but is for the web.|$|R
