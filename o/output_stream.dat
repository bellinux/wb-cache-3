323|481|Public
25|$|The <b>output</b> <b>stream</b> is reversible; an LFSR with {{mirrored}} taps will cycle {{through the}} output sequence in reverse order.|$|E
25|$|LFSRs {{have long}} been used as {{pseudo-random}} number generators for use in stream ciphers (especially in military cryptography), due to the ease of construction from simple electromechanical or electronic circuits, long periods, and very uniformly distributed output streams. However, an LFSR is a linear system, leading to fairly easy cryptanalysis. For example, given a stretch of known plaintext and corresponding ciphertext, an attacker can intercept and recover a stretch of LFSR <b>output</b> <b>stream</b> used in the system described, and from that stretch of the <b>output</b> <b>stream</b> can construct an LFSR of minimal size that simulates the intended receiver by using the Berlekamp-Massey algorithm. This LFSR can then be fed the intercepted stretch of <b>output</b> <b>stream</b> to recover the remaining plaintext.|$|E
25|$|To {{generate}} the same <b>output</b> <b>stream,</b> {{the order of}} the taps is the counterpart (see above) of the order for the conventional LFSR, otherwise the stream will be in reverse. Note that the internal state of the LFSR is not necessarily the same. The Galois register shown has the same <b>output</b> <b>stream</b> as the Fibonacci register in the first section. A time offset exists between the streams, so a different startpoint will be needed to get the same output each cycle.|$|E
50|$|Multiple {{input and}} <b>output</b> <b>streams</b> bring {{concurrency}} issues into the groupware applications.|$|R
50|$|Broadcast Manager is {{enterprise-class}} {{software that}} controls and automates the multiple <b>output</b> <b>streams</b> of Digital Rapids encoders.|$|R
5000|$|In {{a manner}} similar to Unix, VMS defines several {{standard}} input and <b>output</b> <b>streams</b> with these logical names: ...|$|R
25|$|Each SPE runs a {{distinct}} program. Data {{comes from an}} input stream, and is sent to SPEs. When an SPE has terminated the processing, the output data is sent to an <b>output</b> <b>stream.</b>|$|E
25|$|The discard {{of input}} pairs {{is at least}} {{proportion}} 1/2, the minimum which occurs where pnbsp&=nbsp&1/2 for the original process. In that case the <b>output</b> <b>stream</b> is 1/4 {{the length of the}} input on average.|$|E
25|$|IDAT {{contains}} the image, {{which may be}} split among multiple IDAT chunks. Such splitting increases filesize slightly, but {{makes it possible to}} generate a PNG in a streaming manner. The IDAT chunk {{contains the}} actual image data, which is the <b>output</b> <b>stream</b> of the compression algorithm.|$|E
50|$|Input and <b>output</b> <b>streams</b> {{represent}} {{sources and}} sinks of binary or textual data, such as the terminal or open files.|$|R
5000|$|Output formats (container formats {{and other}} ways of {{creating}} <b>output</b> <b>streams)</b> in FFmpeg are called [...] "muxers". FFmpeg supports, among others, the following: ...|$|R
40|$|An {{extensible}} {{file system}} raises {{the level of}} file abstraction which provides benefits to both the end-user and programmer. The Modify-on-Access file system provides safe and simple user-defined extensibility through transformations, which are modular operations on input and <b>output</b> <b>streams.</b> A user inserts transformations into input and <b>output</b> <b>streams,</b> which modify the data accessed. Untrusted transformations execute in user space for safety. Performance of user-level transformations, although much slower than that of in-kernel transformations, is comparable to other user-level approaches, such as pipes...|$|R
25|$|In the <b>output</b> <b>stream</b> 0 and 1 {{are equally}} likely, as 10 and 01 are equally {{likely in the}} original, both having {{probability}} pqnbsp&=nbsp&qp. This extraction of uniform randomness {{does not require the}} input trials to be independent, only uncorrelated. More generally, it works for any exchangeable sequence of bits: all sequences that are finite rearrangements are equally likely.|$|E
25|$|Named {{after the}} French {{mathematician}} Ã‰variste Galois, an LFSR in Galois configuration, {{which is also}} known as modular, internal XORs, or one-to-many LFSR, is an alternate structure that can generate the same <b>output</b> <b>stream</b> as a conventional LFSR (but offset in time). In the Galois configuration, when the system is clocked, bits that are not taps are shifted one position to the right unchanged. The taps, on the other hand, are XORed with the output bit before they are stored in the next position. The new output bit is the next input bit. The effect of this is that when the output bit is zero, all the bits in the register shift to the right unchanged, and the input bit becomes zero. When the output bit is one, the bits in the tap positions all flip (if they are 0, they become 1, and if they are 1, they become 0), and then the entire register is shifted to the right and the input bit becomes 1.|$|E
500|$|... stack and then, at {{appropriately}} chosen times, popping {{them from}} the stack onto an <b>output</b> <b>stream</b> can sort the data {{if and only if}} its initial order is described by a permutation that avoids the permutation pattern 231. Since then, there has been much work on similar problems of sorting data streams by more general systems of stacks and queues. In the system considered by , each element from an input data stream must be pushed onto one of several stacks. Then, once all of the data has been pushed in this way, the items are popped from these stacks (in an appropriate order) onto an <b>output</b> <b>stream.</b> As Chung et al. observe, a given permutation can be sorted by this system if and only if a certain graph, derived from the permutation, has a book embedding with the vertices in a certain fixed order along the spine and with a number of pages that is at most equal to the number of stacks.|$|E
50|$|A P3L module {{corresponds}} to a properly defined skeleton construct with input and <b>output</b> <b>streams,</b> and other sub-modules or sequential C code. Modules can be nested using the two tier model, where the outer level is composed of task parallel skeletons, while data parallel skeletons {{may be used in}} the inner level 64. Type verification is performed at the data flow level, when the programmer explicitly specifies the type of the input and <b>output</b> <b>streams,</b> and by specifying the flow of data between sub-modules.|$|R
50|$|Traditional {{application}} {{programs on}} IBM mainframe operating systems have no standard input and <b>output</b> <b>streams</b> to allow redirection or piping. Instead of spawning processes with external programs, CMS Pipelines features a lightweight dispatcher to concurrently execute instances of built-in programs {{to run the}} pipeline. More than 200 built-in programs that implement typical UNIX utilities and interface to devices and operating system services. In addition to the built-in programs, CMS Pipelines defines a framework to allow user-written REXX programs with input and <b>output</b> <b>streams</b> {{that can be used}} in the pipeline.|$|R
40|$|In this paper, {{an initial}} {{condition}} of a sigma-delta modulator is estimated based on quantizer <b>output</b> bit <b>streams</b> and an input signal. The set of initial conditions that generate a stable trajectory is characterized. It is {{found that this}} set, {{as well as the}} set of initial conditions corresponding to the quantizer <b>output</b> bit <b>streams,</b> are convex. Also, it is found that the mapping from the set of initial conditions to the stable admissible set of quantizer <b>output</b> bit <b>streams</b> is invertible if the loop filter is unstable. Hence, the initial condition corresponding to given stable admissible quantizer <b>output</b> <b>streams</b> and an input signal is uniquely defined when the loop filter is unstable, and a projection onto convex set approach is employed for approximating the initial condition...|$|R
500|$|In a {{continuous}} distillation, {{the system is}} kept in a steady state or approximate steady state. [...] Steady state means that quantities related to the process do not change as time passes during operation. [...] Such constant quantities include feed input rate, <b>output</b> <b>stream</b> rates, heating and cooling rates, reflux ratio, and temperatures, pressures, and compositions at every point (location). [...] Unless the process is disturbed due to changes in feed, heating, ambient temperature, or condensing, steady state is normally maintained. [...] This is also the main attraction of continuous distillation, apart from the minimum amount of (easily instrumentable) surveillance; if the feed rate and feed composition are kept constant, product rate and quality are also constant. [...] Even when a variation in conditions occurs, modern process control methods are commonly able to gradually return the continuous process to another steady state again.|$|E
2500|$|As {{mentioned}} above, {{the most}} important weakness of RC4 comes from the insufficient key schedule; the first bytes of output reveal information about the key. [...] This can be corrected by simply discarding some initial portion of the <b>output</b> <b>stream.</b> This is known as RC4-dropN, where N is typically a multiple of 256, such as 768 or 1024.|$|E
2500|$|The bit {{positions}} {{that affect the}} next state are called the taps. In the diagram the taps are [...] The rightmost bit of the LFSR is called the output bit. The taps are XOR'd sequentially with the output bit and then fed back into the leftmost bit. The sequence of bits in the rightmost position is called the <b>output</b> <b>stream.</b>|$|E
50|$|Mass {{balances}} can {{be performed}} across systems which have cyclic flows. In these systems <b>output</b> <b>streams</b> are fed back into the input of a unit, often for further reprocessing.|$|R
50|$|The null {{device is}} {{typically}} used for disposing of unwanted <b>output</b> <b>streams</b> of a process, or as a convenient empty file for input streams. This is usually done by redirection.|$|R
5000|$|An FBP {{component}} can {{be regarded}} as a function transforming its input <b>stream(s)</b> into its <b>output</b> <b>stream(s).</b> These functions are then combined to make more complex transformations, as shown here: ...|$|R
2500|$|The {{pipeline}} {{structure of}} the bind operator ensures that the [...] and [...] operations get evaluated only once and in the given order, so that the side-effects of extracting text from the input stream and writing to the <b>output</b> <b>stream</b> are correctly handled in the functional pipeline. This remains true even if the language performs out-of-order or lazy evaluation of functions.|$|E
2500|$|Stream ciphers, in {{contrast}} to the 'block' type, create an arbitrarily long stream of key material, which is combined with the plaintext bit-by-bit or character-by-character, somewhat like the one-time pad. In a stream cipher, the <b>output</b> <b>stream</b> is created based on a hidden internal state that changes as the cipher operates. That internal state is initially set up using the secret key material. RC4 is a widely used stream cipher; see [...] Block ciphers can be used as stream ciphers; see Block cipher modes of operation.|$|E
2500|$|If no [...] block {{matches the}} type of the thrown exception, the {{execution}} of the outer block (or method) containing the [...] statement is discontinued, and the exception is passed up and outside the containing block or method. The exception is propagated upwards through the call stack until a matching [...] block is found within one of the currently active methods. If the exception propagates {{all the way up to}} the top-most [...] method without a matching [...] block being found, the entire program is terminated and a textual description of the exception is written to the standard <b>output</b> <b>stream.</b>|$|E
30|$|Let us {{consider}} x and y as the input and the <b>output</b> <b>streams</b> of the encoder, respectively, {{related to each}} other through the generator matrix G as y = G x.|$|R
50|$|An RTU {{monitors}} the field digital and analog parameters and transmits {{data to the}} Central Monitoring Station. It contains setup software to connect data input <b>streams</b> to data <b>output</b> <b>streams,</b> define communication protocols, and troubleshoot installation problems.|$|R
50|$|Often {{the input}} and <b>output</b> <b>streams</b> are streams of characters, but these {{also may be}} streams of {{arbitrary}} objects. These are generally used in wrappers since they conceal the existing implementation with the abstraction required at the developer side.|$|R
2500|$|Ones and zeroes {{occur in}} [...] "runs". The <b>output</b> <b>stream</b> 1110010, for example, {{consists}} of four runs of lengths 3, 2, 1, 1, in order. In one period of a maximal LFSR, 2nâˆ’1 runs occur (for example, a six-bit LFSR has 32 runs). Exactly half of these runs are one bit long, a quarter are two bits long, up to a single run of zeroes nâˆ’1 bits long, and a single run of ones n bits long. This distribution almost equals the statistical expectation value for a truly random sequence. However, the probability of finding exactly this distribution {{in a sample of}} a truly random sequence is rather low.|$|E
5000|$|I/O mode {{indicator}} (input stream, <b>output</b> <b>stream,</b> or update stream) ...|$|E
5000|$|Convert {{the object}} to a byte stream and write {{it to the}} <b>output</b> <b>stream</b> ...|$|E
50|$|The Slussen is an adapter {{released}} on 1 February, 2013 {{designed for use}} with the Slussen iOS app for mobile DJing, functioning as a splitter allowing two separate <b>output</b> <b>streams</b> to be passed out through a single headphone jack.|$|R
40|$|A {{method and}} {{apparatus}} for combining {{a plurality of}} 8 B/ 10 B encoded DVB-ASI input streams into an aggregate <b>output</b> data <b>stream</b> allows a receiving device to synchronize to the aggregate <b>output</b> data <b>stream</b> by mapping a synchronization character to a unique character if the synchronization character occurs in a first timeslot of the aggregate <b>output</b> data <b>stream.</b> This unique character allows a receiving device to synchronize to the aggregate <b>output</b> data <b>stream.</b> If the synchronization character occurs in a timeslot other than the first timeslot, the synchronization character is mapped to another special character that denotes that no data {{is present in the}} timeslot. In addition, if the synchronization character occurs in a timeslot after the last timeslot in which data may be placed in the aggregate <b>output</b> data <b>stream,</b> the synchronization character can be mapped to yet another special character denoting that no data is available in the timeslot. Georgia Tech Research Corporatio...|$|R
40|$|The {{sequential}} synthesis problem, {{which is}} closely related to Church's solvability problem, asks, given a specification {{in the form of a}} binary relation between input and <b>output</b> <b>streams,</b> for the construction of a finite-state stream transducer that converts inputs to appropriate outputs. For efficienc...|$|R
