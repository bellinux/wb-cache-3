4|103|Public
50|$|Spy Lantern is a {{surveillance}} camera commercial project based on PowerShot and CHDK <b>open</b> <b>script.</b>|$|E
50|$|MCI {{makes it}} very simple to write a program which can play {{a wide variety of}} media files and even to record sound by just passing {{commands}} as strings. It uses relations described in Windows registries or in the MCI section of the file system.ini. One advantage of this API is that MCI commands can be transmitted both from the programming language and from the scripting language (<b>open</b> <b>script,</b> lingo aso). Example of such commands are mciSendCommand or mciSendString.|$|E
40|$|In {{this paper}} we raise the question: does our {{consumer}} behaviour make us happy? The infinite source of consumer desires {{seems to be}} the justification of an ever increasing amount of products that inundate our lives. Consumption itself is set free from any functional bond, bringing our current consumption levels {{to the point that it}} is ecologically destructive and unsustainable. By examining philosophical theories of well-being we argue that consumer satisfaction does not of necessity lead to happiness, and we reach the conclusion that it is in the act of appropriation -fitting the acquired artefacts into our lives- that consumption of goods renders a meaningful attribution to our well-being. Building on theories of Science and Technology Studies, we propose the design of objects with open scripts, as a means to facilitate and encourage this act of appropriation as a conscious process. This design perspective is made more tangible by the examination of several examples from fashion design and investigated further in a short design exploration. Five design professionals were asked to apply the <b>open</b> <b>script</b> design perspective in the design of new garment concepts. The results of both activities show that it is possible to design products that encourage the process of appropriation by demanding a certain dedication of the user in accomplishing her use-goal. We expect that this encourages product bonding and render our possessions less replaceable. Although the few products that employ an <b>open</b> <b>script</b> will not overcome consumerism and transform society at large, we do believe they can help bring about an attitude change and help to establish well-being as the purpose of consumptio...|$|E
50|$|JavaScript OSA is an <b>Open</b> <b>Scripting</b> Architecture {{scripting}} language. It is a system-level scripting language, {{based on}} the SpiderMonkey engine, intended {{as an alternative to}} AppleScript.|$|R
50|$|BBEdit {{supports}} the <b>Open</b> <b>Scripting</b> Architecture {{and can be}} scripted and recorded using AppleScript and other languages, as well as having the ability to execute AppleScripts itself.|$|R
25|$|OS X Yosemite {{introduced}} JavaScript for Automation (JXA), {{which is}} built upon JavaScriptCore and the <b>Open</b> <b>Scripting</b> Architecture. It features an Objective-C bridge that enables entire Cocoa applications to be programmed in JavaScript.|$|R
40|$|Abstract. With the {{development}} of virtual reality display technology of cultural heritage, the virtual reality display technology is developed more deeply and widely, the sense of reality and immersion put forward higher requirements, {{more and more people}} {{pay more attention to the}} attribute information of cultural relics. UDK technology not only has high fidelity 3 D rendering technology, with the image quality optimization, adaptive partition layer for the image is obtained, and the real-time shadow rendering technology is taken to realize the cultural heritage manually tours and interactive roaming function automatically. It also has the <b>open</b> <b>script</b> programming interface, and it can connect the database through the dynamic link library, and link rich scene cultural background of each interface. This combination of basic information database and efficient virtual simulation technology can provide a visual and cultural feast for the user, and it has a great application prospect in the field of cultural heritage digital display...|$|E
50|$|Script Debugger is a Macintosh {{computer}} {{source code}} editor and debugging {{environment for the}} AppleScript programming language, and other languages based on Apple Inc.'s <b>Open</b> <b>Scripting</b> Architecture. It {{is a product of}} Late Night Software.|$|R
5000|$|JavaScript for Automation (JXA) {{is the new}} {{system-wide}} {{support for}} scripting with JavaScript, built upon JavaScriptCore and the <b>Open</b> <b>Scripting</b> Architecture. [...] It features an Objective-C bridge which enables entire Cocoa applications to be programmed in JavaScript.|$|R
40|$|The <b>Open</b> <b>Scripting</b> Architecture {{combines}} aspectsofts 37539 - 4131 programming, distributed computation, database queries, anddynamic- 39150 into {{a powerful}} and practical system for automation,integration, 66 customization of applications and system services. Applications areintegrated 830 with distributed messaging. The messages operate uponuser-level 2670 objects, like windows and spreadsheet cells, that are identified by queriesover 39344 - 3 and document containment structure. A general-purposescriptingpose 35 automates message sending and handling, and supports persistence andmobile- 26190 Applications call on scripting services to customize thebehavior 2 their objects through a generic script management API. 1 Introduction The <b>Open</b> <b>Scripting</b> Architecture (OSA) is acomprehensive 16650 for automating complex or repetitive tasks, integratingdistributed 4669 - 14490 and system services, and customizing application behavior. These. 36615 benefits are supported by a synergistic combination of t [...] ...|$|R
5000|$|Image Capture is scriptable with AppleScript, {{and may be}} {{manipulated}} with Mac OS X v10.4 (Tiger)'s [...] "Automator" [...] application. As of Mac OS X 10.4, Image Capture's AppleScript dictionary does not <b>open</b> in <b>Script</b> Editor. As of Mac OS X 10.6 only the Image Capture Web Server <b>opens</b> in <b>Script</b> Editor.|$|R
5000|$|The {{language}} {{is identical to}} Mozilla's core language, with extensions added via a [...] "Core" [...] object and a [...] "MacOS" [...] object. The MacOS object has methods for obtaining objects that are bound to applications. This is done via the AppleEvent messaging system, {{a part of the}} Macintosh's <b>Open</b> <b>Scripting</b> Architecture.|$|R
5000|$|One {{feature of}} the OSA is {{scripting}} additions, or OSAX for <b>Open</b> <b>Scripting</b> Architecture eXtension, which were inspired by HyperCard's External Commands. Scripting additions are libraries that allow programmers to extend the function of AppleScript. Commands included as scripting additions are available system-wide, and are not dependent on an application (see also [...] ).|$|R
5000|$|OpenSCAD {{is another}} <b>open</b> source <b>scripting</b> {{language}} for creating 3D objects ...|$|R
50|$|In 1995, Late Night Software {{released}} what is {{now their}} main product, Script Debugger. At the time, there were several competing AppleScript and <b>Open</b> <b>Scripting</b> Architecture (OSA) language source code editors, including ScriptWizard and Main Event Software's Scripter. As of May, 2005, Script Debugger and Smile remain the only competitors to Apple Computer's freeware Script Editor application.|$|R
5000|$|... newLISP is an <b>open</b> source <b>scripting</b> {{language}} in the Lisp family of programming languages developed by Lutz Mueller and released under the GNU General Public License.|$|R
5000|$|Apple {{events are}} the message-based interprocess {{communication}} mechanism in Mac OS, first appearing in System 7 {{and supported by}} every version of the classic Mac OS since then and by macOS. Apple events describe [...] "high-level" [...] events such as [...] "open document" [...] or [...] "print file", whereas earlier OSs had supported much more basic events, namely [...] "click" [...] and [...] "keypress". Apple events {{form the basis of}} the Mac OS <b>scripting</b> system, the <b>Open</b> <b>Scripting</b> Architecture (the primary language of such being AppleScript).|$|R
40|$|Bio 2 RDF {{currently}} {{provides the}} largest network of Linked Data for the Life Sciences. Here, we describe a significant update {{to increase the}} overall quality of RDFized datasets generated from <b>open</b> <b>scripts</b> powered by an API to generate registry-validated IRIs, dataset provenance and metrics, SPARQL endpoints, downloadable RDF and database files. We demonstrate federated SPARQL queries within and across the Bio 2 RDF network, including semantic integration using the Semanticscience Integrated Ontology (SIO). This work forms a strong foundation for increased coverage and continuous integration of data in the life sciences...|$|R
40|$|The <b>Open</b> <b>Scripting</b> Architecture {{combines}} {{aspects of}} object-oriented programming, distributed computation, database queries, and dynamic languages into {{a powerful and}} practical system for automation, integration, and customization of applications and system services. Applications are integrated together with distributed messaging. The messages operate upon user-level application objects, like windows and spreadsheet cells that are identified by queries over properties and document containment structure. A general-purpose scripting language automates message sending and handling, and supports persistence and mobile objects. Applications call on scripting services to customize the behavior of their objects through a generic script management API...|$|R
5000|$|Language {{features}} in the <b>Open</b> <b>Scripting</b> Architecture (and thus AppleScript) were initially implemented as dynamically loadable plugins known as [...] "scripting additions" [...] or OSAXes. In Mac OS 8 and 9, these were augmented by faceless background applications that were loaded in the background on demand. Just as with regular applications, these applications were accessed using [...] clauses: the global namespace was not updated {{as was the case}} with OSAXes. The operating system did not indicate the launch of such processes nor indicate whether or not they were running.|$|R
50|$|An {{important}} aspect of the AppleScript implementation is the <b>Open</b> <b>Scripting</b> Architecture (OSA). Apple provides OSA for other scripting languages and third-party scripting/automation products such as QuicKeys and UserLand Frontier, to function on an equal status with AppleScript. AppleScript was implemented as a scripting component, and the basic specs for interfacing such components to the OSA were public, allowing other developers to add their own scripting components to the system. Public client APIs for loading, saving and compiling scripts would work the same for all such components, which also meant that applets and droplets could hold scripts in any of those scripting languages.|$|R
40|$|AppleScript is a {{scripting}} language and {{environment for the}} Mac OS. Originally conceived in 1989, AppleScript allows end users to automate complex tasks and customize Mac OS applications. To automate tasks, AppleScript provides standard programming language features (control flow, variables, data structures) and sends Apple Events to invoke application behavior. Apple Events are a variation on standard remote procedure calls in which messages can identify their arguments by queries that are interpreted by the remote application. This approach avoids the need for remote object pointers or proxies, and reduces the number of communication round trips, which are expensive in high latency environments like the early Macintosh OS. To customize an application that uses AppleScript’s <b>Open</b> <b>Scripting</b> Architecture, users attach scripts to application objects; these scripts can then intercept and modify application behavior. AppleScript was designed for casual users: AppleScript syntax resembles natural language, and scripts can be created easily by recording manual operations on a graphical interface. AppleScript also supported internationalization in allowing script to be presented in multiple dialects, including English, Japanese, or French. Although the naturalistic syntax is easy to read, it can make scripts {{much more difficult to}} write. Early adoption was hindered by the difficulty of modifying applications to support Apple Events and the <b>Open</b> <b>Scripting</b> Architecture. Yet AppleScript is now widely used and is an essential differentiator of the Mac OS. Apple-Script’s communication model is a precursor to web services, and the idea of embedded scripting has been widely adopted...|$|R
5000|$|<b>Open</b> source tools, <b>scripts</b> and Sun {{internal}} tools {{needed to}} simulate the design ...|$|R
5000|$|Gorin Prize for the Best <b>Script,</b> <b>Open</b> Russian Film Festival Kinotavr in Sochi, 2014 ...|$|R
50|$|Microsoft Visual Basic for Applications is not {{supported}} in this version. As a result, such Excel add-ins dependent on VBA, such as Solver, {{have not been}} bundled in the current release. In June 2008, Microsoft announced that it is exploring the idea of bringing some of the functionality of Solver back to Excel. In late August 2008, Microsoft announced that a new Solver for Excel 2008 was available as a free download from Frontline Systems, original developers of the Excel Solver. However, Excel 2008 also lacks other functionality, such as Pivot Chart functionality, which {{has long been a}} feature in the Windows version. In May 2008, Microsoft announced that VBA will be making a return in the next version of Microsoft Office for Mac. AppleScript and the <b>Open</b> <b>Scripting</b> Architecture will still be supported.|$|R
50|$|In April 2005 Apple {{announced}} Shake 4 at a pre-NAB event. New features included 3D multi-plane compositing, 32-bit Keylight and Primatte keying, Optical Flow {{image processing}} (time-remapping and image stabilisation), Final Cut Pro 5 integration and extensions to their <b>open,</b> extensible <b>scripting</b> language and SDK. Shake 4 had no IRIX version.|$|R
50|$|IEs4Linux is a {{free and}} <b>open</b> source <b>script</b> that allows a user to run Internet Explorer (IE) using Wine. It is {{possible}} to install Internet Explorer versions 5, 5.5, and 6, along with partial functionality of IE7 (the layout engine was loaded into the IE6 interface, which works well enough to demonstrate how the target page looks in IE7).|$|R
50|$|The Zend Engine is the <b>open</b> source <b>scripting</b> {{engine that}} interprets the PHP {{programming}} language. It was originally developed by Andi Gutmans and Zeev Suraski {{while they were}} students at the Technion - Israel Institute of Technology. They later founded a company called Zend Technologies in Ramat Gan, Israel. The name Zend {{is a combination of}} their forenames, Zeev and Andi.|$|R
40|$|The Multiplayer On One Screen Entertainment System (MOOSES) is a {{framework}} for providing multiplayer on a large screen using mobile phones as controllers. A prototype of MOOSES was made during a depth study at NTNU fall 2006 as a proof of concept. This prototype has a few limitations that make it inconvenient as a standalone platform, because manipulation of source code is needed when adding new games to the platform. This thesis is based on improvements of the MOOSES platform to make it able to dynamically load game controllers for MOOSES, using an <b>open</b> <b>scripting</b> framework. The research also includes focus ways to heighten the abstraction level for the game developers and looking on {{ways to make the}} application programming interface more tailored to the MOOSES domain. The goal of this research is to develop a prototype on a dynamic client that may be used in future testing of the MOOSES platform...|$|R
50|$|In between {{chapters}} {{are various}} musings {{on a range}} of topics from why not to <b>open</b> a <b>script</b> with a courtroom scene to how he sets about adapting a book. Some of these snippets offer an insight into Goldman's background that was not in the first book—such as his relationship with his parents, his university life and time in the military—the book thereby shading into autobiography.|$|R
5000|$|... pyBookie is an <b>open</b> source Python <b>script</b> {{used for}} home {{accounting}}. It {{is a basic}} accounting program, lacking most features which most other accounting software include; however, {{it is enough to}} use as a double-entry accounting system.|$|R
5000|$|Besides relays and proxies, spammers {{have used}} other {{insecure}} services to send spam. One example is FormMail.pl, a CGI script to allow Web-site users to send e-mail feedback from an HTML form. Several {{versions of this}} program, and others like it, allowed the user to redirect e-mail to arbitrary addresses. Spam sent through <b>open</b> FormMail <b>scripts</b> is frequently marked by the program's characteristic opening line: [...] "Below {{is the result of}} your feedback form." ...|$|R
5000|$|The [...] "multimedia sprint" [...] team {{managed to}} gather a {{gigabyte}} of free content which Klaatu organized and curated and released {{as a free}} download. The bundle contains over 2000 free fonts, 300 synthesizer sounds, GIMP paint brushes, and more. A second sprint gathered 11 fonts, 150 gigaSamples, 150 tile-able patterns, 29 GIMP Brush sets, 50 GIMP enhancements 99 Hydrogen Drumkits, generated from an <b>open</b> source <b>script</b> that Klaatu published as genhydro.py ...|$|R
5000|$|PLaSM (Programming Language of Solid Modeling) is an <b>open</b> source <b>scripting</b> {{language}} for solid modeling, a discipline that constitutes {{the foundation of}} computer-aided design [...] and CAD systems. In contrast to other CAD programs, PLaSM emphasizes scripting rather than interactive GUI work. Users can create arbitrarily complex designs using {{a wide range of}} simple 2D and 3D objects, advanced curves and curved surfaces, Boolean operations, and elementary as well as advanced geometric transformations.|$|R
50|$|Besides {{its main}} site, OSNews detects {{hundreds}} of mobile browsers and handsets and redirects {{them to a}} specially formatted cHTML version of the website at mobile.osnews.com. Eugenia Loli-Queru, {{the author of this}} <b>script,</b> <b>open</b> sourced it in 2008.|$|R
40|$|We {{present an}} {{automated}} method to generate DNA profiles from replicate PCRs by combining {{advantages of the}} composite and consensus method by a system of brackets in which an allelic balance threshold {{is used as a}} variable to separate DNA-profiles of major from minor donors. Through the analysis of artificial low (125 pg) and high (250 pg) template three-person mixtures with low (1 : 1. 5 : 3) and high (1 : 5 : 10) donor ratios we demonstrate the usefulness of a tool to determine the optimal allelic balance threshold within a locus. The automated extraction of dominant profiles saves considerable amounts of time when producing composite-consensus profiles. Drop-in/drop-out rates are produced and a comparison is made with an alternative <b>open</b> source <b>script</b> to evaluate the dominant profiles generated. By introducing this script into the forensic community we hope to increase awareness of much needed collaborative efforts with bioinformaticians and statisticians to develop forensic <b>open</b> source software <b>scripts.</b> status: publishe...|$|R
